<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/86513">
    <body>
      <group id="86513">
        <trans-unit id="e8da74d117732daae1ec6eced513ab4442893f06" translate="yes" xml:space="preserve">
          <source>(But then, someone who /really/ knew what they were doing would say:</source>
          <target state="translated">(Pero entonces,alguien que realmente sabía lo que estaba haciendo diría:</target>
        </trans-unit>
        <trans-unit id="c854ac93991da55521bfe15bb671f855074e82c7" translate="yes" xml:space="preserve">
          <source>*As long as your server endpoints have the correct validation &amp;amp; sanitisation of user supplied values, it should not matter what gets parsed and eval'd in your client side javascript.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;* Siempre que los puntos finales de su servidor tengan la validaci&amp;oacute;n y desinfecci&amp;oacute;n correctas de los valores proporcionados por el usuario, no deber&amp;iacute;a importar lo que se analice y eval&amp;uacute;e en su javascript del lado del cliente.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1216171f6b14f8050f363786c3b695062989583e" translate="yes" xml:space="preserve">
          <source>...which is much easier to read as well as less potentially buggy.</source>
          <target state="translated">...que es mucho más fácil de leer,así como menos potencialmente de buggy.</target>
        </trans-unit>
        <trans-unit id="a4c4530f99dceb59d9b5f2c1b1e4b43d1913e4d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Debugging&lt;/strong&gt; can be more challenging
(no line numbers, etc.)</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La depuraci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; puede ser m&amp;aacute;s desafiante (sin n&amp;uacute;meros de l&amp;iacute;nea, etc.)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="68827a63b5078f9a50c23ab76de31607123511a8" translate="yes" xml:space="preserve">
          <source>All modern browsers have a developer console where you can execute arbitrary javascript anyway and any semi-smart developer can look at your JS source and put whatever bits of it they need to into the dev console to do what they wish.</source>
          <target state="translated">Todos los navegadores modernos tienen una consola de desarrollo donde se puede ejecutar cualquier javascript de todos modos y cualquier desarrollador semi-inteligente puede mirar su fuente de JS y poner cualquier pedazo de ella que necesiten en la consola de desarrollo para hacer lo que quieran.</target>
        </trans-unit>
        <trans-unit id="efc7386ceb8449e138c1ffecfb668b89e72781e3" translate="yes" xml:space="preserve">
          <source>Along with the rest of the answers, I don't think eval statements can have advanced minimization.</source>
          <target state="translated">Junto con el resto de las respuestas,no creo que las declaraciones de evaluación puedan tener una minimización avanzada.</target>
        </trans-unit>
        <trans-unit id="04f073718f97b7a0620837423dbd160f9efde52e" translate="yes" xml:space="preserve">
          <source>Another way to prevent automatic globals is to wrap the
&lt;code&gt;eval()&lt;/code&gt; call into an immediate function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Otra forma de prevenir los globales autom&amp;aacute;ticos es envolver la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;llamada &lt;/font&gt;&lt;/font&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en una funci&amp;oacute;n inmediata.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29a3e2a33db16ab92bf0e28b6d2254865dd52c91" translate="yes" xml:space="preserve">
          <source>Basically from</source>
          <target state="translated">Básicamente de</target>
        </trans-unit>
        <trans-unit id="68f751cf48a145fd656a026a713a49fe39869d0e" translate="yes" xml:space="preserve">
          <source>Behind the scenes, JavaScript still has to evaluate and execute
the string you pass as programming code:</source>
          <target state="translated">Entre bastidores,JavaScript todavía tiene que evaluar y ejecutar la cadena que pasa como código de programación:</target>
        </trans-unit>
        <trans-unit id="6de8012b0b5762ab8293b8a7887b69c33081f049" translate="yes" xml:space="preserve">
          <source>Besides the possible security issues if you are executing user-submitted code, most of the time there's a better way that doesn't involve re-parsing the code every time it's executed. Anonymous functions or object properties can replace most uses of eval and are much safer and faster.</source>
          <target state="translated">Además de los posibles problemas de seguridad si estás ejecutando código enviado por el usuario,la mayoría de las veces hay una mejor manera que no implica volver a leer el código cada vez que se ejecuta.Las funciones anónimas o las propiedades de los objetos pueden reemplazar la mayoría de los usos de eval y son mucho más seguras y rápidas.</target>
        </trans-unit>
        <trans-unit id="85c8f9654ce736912618edd0981f92704b35e280" translate="yes" xml:space="preserve">
          <source>But if the Engine finds an eval(..) in the code, it essentially has to assume that all its awareness of identifier location may be invalid, because it cannot know at lexing time exactly what code you may pass to eval(..) to modify the lexical scope, or the contents of the object you may pass to with to create a new lexical scope to be consulted.</source>
          <target state="translated">Pero si la Máquina encuentra un eval(..)en el código,esencialmente tiene que asumir que todo su conocimiento de la ubicación del identificador puede ser inválido,porque no puede saber en el momento del lexing exactamente qué código puede pasar a eval(..)para modificar el ámbito léxico,o el contenido del objeto al que puede pasar para crear un nuevo ámbito léxico para ser consultado.</target>
        </trans-unit>
        <trans-unit id="708ad811ceaadce04eda4ed9426ac29d31be3a58" translate="yes" xml:space="preserve">
          <source>EDIT:  by the way, I wouldn't suggest (for all the security reasons pointed out heretofore) that you base you object names on user input.  I can't imagine any good reason you'd want to do that though.  Still, thought I'd point it out that it wouldn't be a good idea :)</source>
          <target state="translated">EDITORIAL:por cierto,no sugeriría (por todas las razones de seguridad señaladas hasta ahora)que se basen los nombres de los objetos en la entrada del usuario.Sin embargo,no puedo imaginar ninguna buena razón por la que quisieras hacer eso.Aún así,pensé en señalar que no sería una buena idea :)</target>
        </trans-unit>
        <trans-unit id="e912f4005bab4ffe00de9bda5fe37444d9215a0d" translate="yes" xml:space="preserve">
          <source>Edit: As @Jeff Walden points out in comments, #3 is less true today than it was in 2008. However, while some caching of compiled scripts may happen this will only be limited to scripts that are eval'd repeated with no modification. A more likely scenario is that you are eval'ing scripts that have undergone slight modification each time and as such could not be cached. Let's just say that SOME eval'd code executes more slowly.</source>
          <target state="translated">Edición:Como señala @Jeff Walden en sus comentarios,el número 3 es menos cierto hoy que en 2008.Sin embargo,aunque puede ocurrir algún tipo de almacenamiento en caché de los guiones compilados,esto sólo se limitará a los guiones que se evalúen y se repitan sin ninguna modificación.Un escenario más probable es que se estén evaluando guiones que han sufrido ligeras modificaciones cada vez y que,por lo tanto,no podrían ser almacenados en caché.Digamos que ALGUN código evaluado se ejecuta más lentamente.</target>
        </trans-unit>
        <trans-unit id="84841ccacb20efbdee1996b961b9cb5573918289" translate="yes" xml:space="preserve">
          <source>Garbage collection</source>
          <target state="translated">Recogida de basura</target>
        </trans-unit>
        <trans-unit id="b6d7540d21081b0823e787c495d22c2e6a29acd1" translate="yes" xml:space="preserve">
          <source>Here's a script to demo the problem</source>
          <target state="translated">Aquí hay un guión para demostrar el problema</target>
        </trans-unit>
        <trans-unit id="75feee4bba342c7d1a150d617df26a5b84f7c599" translate="yes" xml:space="preserve">
          <source>However, eval is currently and historically massively over-used by people who don't know what they're doing. That includes people writing JavaScript tutorials, unfortunately, and in some cases this can indeed have security consequences - or, more often, simple bugs. So the more we can do to throw a question mark over eval, the better. Any time you use eval you need to sanity-check what you're doing, because chances are you could be doing it a better, safer, cleaner way.</source>
          <target state="translated">Sin embargo,la evaluación es actualmente e históricamente usada masivamente por personas que no saben lo que están haciendo.Eso incluye a las personas que escriben tutoriales de JavaScript,desafortunadamente,y en algunos casos esto puede tener consecuencias de seguridad-o,más a menudo,simples errores.Así que cuanto más podamos hacer para poner un signo de interrogación sobre la evaluación,mejor.Cada vez que usas eval,necesitas comprobar la cordura de lo que estás haciendo,porque lo más probable es que lo hagas de una forma mejor,más segura y más limpia.</target>
        </trans-unit>
        <trans-unit id="b0cc8a90cfd59a17fbc14979055df165cbd77f75" translate="yes" xml:space="preserve">
          <source>However, for all the reasons mentioned above, you shouldn't use it for your own code, where you have complete control - it's just not necessary, and better-off relegated to the 'tricky JavaScript hacks' shelf.</source>
          <target state="translated">Sin embargo,por todas las razones mencionadas anteriormente,no deberías usarlo para tu propio código,donde tienes el control completo-no es necesario,y mejor relegado a la estantería de &quot;trucos de Javascript&quot;.</target>
        </trans-unit>
        <trans-unit id="0d2efd49cfff0a15360537f164259f4616c0e72a" translate="yes" xml:space="preserve">
          <source>I believe it's because it can execute any JavaScript function from a string. Using it makes it easier for people to inject rogue code into the application.</source>
          <target state="translated">Creo que es porque puede ejecutar cualquier función de JavaScript desde una cadena.Usarlo hace más fácil para la gente inyectar código malicioso en la aplicación.</target>
        </trans-unit>
        <trans-unit id="edba6850417672557191720478e91372debe060d" translate="yes" xml:space="preserve">
          <source>I know this discussion is old, but I really like &lt;a href=&quot;http://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=6EJ801el-I8#t=1729s&quot;&gt;this&lt;/a&gt; approach by Google and wanted to share that feeling with others ;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;S&amp;eacute; que esta discusi&amp;oacute;n es antigua, pero realmente me gusta &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=6EJ801el-I8#t=1729s&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;este&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; enfoque de Google y quer&amp;iacute;a compartir ese sentimiento con los dem&amp;aacute;s;)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc70f4cb34b43ea51c23addc083f3c8caad5fc21" translate="yes" xml:space="preserve">
          <source>I won't attempt to refute anything said heretofore, but i will offer this use of eval() that (as far as I know) can't be done any other way.  There's probably other ways to code this, and probably ways to optimize it, but this is done longhand and without any bells and whistles for clarity sake to illustrate a use of eval that really doesn't have any other alternatives.  That is: dynamical (or more accurately) programmically-created object names (as opposed to values).</source>
          <target state="translated">No intentaré refutar nada de lo que se ha dicho hasta ahora,pero ofreceré este uso de eval()que (hasta donde yo sé)no puede hacerse de otra manera.Probablemente hay otras maneras de codificar esto,y probablemente maneras de optimizarlo,pero esto se hace a mano y sin campanas ni silbidos por razones de claridad para ilustrar un uso de eval que realmente no tiene ninguna otra alternativa.Es decir:nombres de objetos dinámicos (o más exactamente)creados programáticamente (en contraposición a los valores).</target>
        </trans-unit>
        <trans-unit id="44f1a7e0acb79a925f0a5eb2f48fbce6d2a201ff" translate="yes" xml:space="preserve">
          <source>I would go as far as to say that it doesn't really matter if you use &lt;code&gt;eval()&lt;/code&gt; in javascript which is run in browsers.*(caveat)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Me atrever&amp;iacute;a a decir que realmente no importa si usa &lt;/font&gt;&lt;/font&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en javascript que se ejecuta en los navegadores. * (Advertencia)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fcf7355fa794212df970cc7d5b845c63c7a95cb8" translate="yes" xml:space="preserve">
          <source>I&amp;rsquo;m not saying you should go run out and start using eval()
  everywhere. In fact, there are very few good use cases for running
  eval() at all. There are definitely concerns with code clarity,
  debugability, and certainly performance that should not be overlooked.
  But you shouldn&amp;rsquo;t be afraid to use it when you have a case where
  eval() makes sense. Try not using it first, but don&amp;rsquo;t let anyone scare
  you into thinking your code is more fragile or less secure when eval()
  is used appropriately.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No estoy diciendo que debas salir corriendo y comenzar a usar eval () en todas partes. De hecho, hay muy pocos casos de uso buenos para ejecutar eval (). Definitivamente, existen preocupaciones con respecto a la claridad del c&amp;oacute;digo, la capacidad de depuraci&amp;oacute;n y, ciertamente, el rendimiento que no deben pasarse por alto. Pero no debe tener miedo de usarlo cuando tiene un caso en el que eval () tiene sentido. Intente no usarlo primero, pero no permita que nadie lo asuste y piense que su c&amp;oacute;digo es m&amp;aacute;s fr&amp;aacute;gil o menos seguro cuando eval () se usa adecuadamente.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b07728bbbfd376d8b79bdf7dfdada9b7a5a3a8ff" translate="yes" xml:space="preserve">
          <source>If the authors of the kind of code above had a clue about the basics of how JavaScript objects work, they'd have realised that square brackets can be used instead of literal dot-names, obviating the need for eval:</source>
          <target state="translated">Si los autores del tipo de código anterior tuvieran una pista sobre los fundamentos de cómo funcionan los objetos de JavaScript,se habrían dado cuenta de que se pueden utilizar corchetes en lugar de nombres de puntos literales,obviando la necesidad de evaluar:</target>
        </trans-unit>
        <trans-unit id="7a9210275eab4c37ef5ac1d41a84323394920187" translate="yes" xml:space="preserve">
          <source>If you spot the use of eval() in your code, remember the mantra &amp;ldquo;eval() is evil.&amp;rdquo;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si ve el uso de eval () en su c&amp;oacute;digo, recuerde el mantra &quot;eval () is evil&quot;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1e6c44d75d7af9e8969d55a4397d71b07326d5f" translate="yes" xml:space="preserve">
          <source>If you want the user to input some logical functions and evaluate for AND the OR then the JavaScript eval function is perfect. I can accept two strings and &lt;code&gt;eval(uate) string1 === string2&lt;/code&gt;, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si desea que el usuario ingrese algunas funciones l&amp;oacute;gicas y eval&amp;uacute;e AND Y, entonces la funci&amp;oacute;n de evaluaci&amp;oacute;n de JavaScript es perfecta. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puedo aceptar dos cadenas y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;eval(uate) string1 === string2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , etc.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f3031dedc7540794a7092138701cb532acae72ab" translate="yes" xml:space="preserve">
          <source>If you were to ask if it's suitable to use &lt;code&gt;eval()&lt;/code&gt; in PHP however, the answer is &lt;strong&gt;NO&lt;/strong&gt;, unless you &lt;strong&gt;whitelist&lt;/strong&gt; any values which may be passed to your eval statement.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;si tuviera que preguntar si es adecuado usar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en PHP, la respuesta es &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;NO&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , a menos que &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;incluya en la lista blanca&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; cualquier valor que pueda pasar a su sentencia eval.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c48a549b1d6f103cd7da2f5411479e65b3492ed4" translate="yes" xml:space="preserve">
          <source>If your application is using &lt;code&gt;eval()&lt;/code&gt; to create an object from some JSON which has come back from an &lt;a href=&quot;http://en.wikipedia.org/wiki/XMLHttpRequest&quot;&gt;XMLHttpRequest&lt;/a&gt; to your own site, created by your trusted server-side code, it's probably not a problem.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si su aplicaci&amp;oacute;n est&amp;aacute; utilizando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para crear un objeto de alg&amp;uacute;n JSON que ha regresado de una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;solicitud &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/XMLHttpRequest&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;XMLHttpRequest&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a su propio sitio, creado por su c&amp;oacute;digo confiable del lado del servidor, probablemente no sea un problema.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2c8a85d8fc546b1eb106d07c70fa24db9d6bac6f" translate="yes" xml:space="preserve">
          <source>Improper use of &lt;strong&gt;eval&lt;/strong&gt; opens up your
code for injection attacks</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El uso incorrecto de &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;eval&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; abre su c&amp;oacute;digo para ataques de inyecci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="14d6fe3adbcdf0f5b6ca6fb7ea8cba66668180d5" translate="yes" xml:space="preserve">
          <source>In other words, in the pessimistic sense, most of those optimizations it would make are pointless if eval(..) is present, so it simply doesn't perform the optimizations at all.</source>
          <target state="translated">En otras palabras,en el sentido pesimista,la mayoría de las optimizaciones que haría son inútiles si eval(..)está presente,por lo que simplemente no realiza las optimizaciones en absoluto.</target>
        </trans-unit>
        <trans-unit id="2bf3bffa2873d5b6030df088077ed6930916a446" translate="yes" xml:space="preserve">
          <source>It greatly reduces your level of confidence about security.</source>
          <target state="translated">Reduce enormemente su nivel de confianza en la seguridad.</target>
        </trans-unit>
        <trans-unit id="6f03d1d2d23aa04e158c4ae98f058def0948b3b6" translate="yes" xml:space="preserve">
          <source>It is a possible security risk, it has a different scope of execution, and is quite inefficient, as it creates an entirely new scripting environment for the execution of the code. See here for some more info: &lt;a href=&quot;http://userjs.org/help/tutorials/efficient-code#evalevil&quot;&gt;eval&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es un posible riesgo de seguridad, tiene un alcance de ejecuci&amp;oacute;n diferente y es bastante ineficiente, ya que crea un entorno de secuencias de comandos completamente nuevo para la ejecuci&amp;oacute;n del c&amp;oacute;digo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vea aqu&amp;iacute; para m&amp;aacute;s informaci&amp;oacute;n: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://userjs.org/help/tutorials/efficient-code#evalevil&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;eval&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d8961c0347a3eacf41d26a8b6650e23806802192" translate="yes" xml:space="preserve">
          <source>It is quite useful, though, and used with moderation can add a lot of good functionality.</source>
          <target state="translated">Es bastante útil,sin embargo,y usado con moderación puede añadir mucha funcionalidad.</target>
        </trans-unit>
        <trans-unit id="6dfa9b7f1d8c876ae6c2dd750e25f385454bcfcd" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s also important to remember that passing strings to &lt;code&gt;setInterval()&lt;/code&gt;, &lt;code&gt;setTimeout()&lt;/code&gt;,
and the &lt;code&gt;Function()&lt;/code&gt; constructor is, for the most part, similar to using &lt;code&gt;eval()&lt;/code&gt; and therefore
should be avoided.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n es importante recordar que pasar cadenas a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;setInterval()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;setTimeout()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;constructor &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Function()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es, en su mayor parte, similar al uso de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y, por lo tanto, debe evitarse.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d8c3cc80491fbfb8cbd6e3ac6b00259872abd652" translate="yes" xml:space="preserve">
          <source>It's generally only an issue if you're passing eval user input.</source>
          <target state="translated">Por lo general,sólo es un problema si pasas la evaluación de la entrada del usuario.</target>
        </trans-unit>
        <trans-unit id="8c42fa01d170f0ba1c3ba79193d4093073ef1646" translate="yes" xml:space="preserve">
          <source>It's not always a bad idea. Take for example, code generation. I recently wrote a library called &lt;a href=&quot;https://github.com/vincentracine/hyperbars&quot;&gt;Hyperbars&lt;/a&gt; which bridges the gap between &lt;a href=&quot;https://github.com/Matt-Esch/virtual-dom&quot;&gt;virtual-dom&lt;/a&gt; and &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;handlebars&lt;/a&gt;. It does this by parsing a handlebars template and converting it to &lt;a href=&quot;https://github.com/dominictarr/hyperscript&quot;&gt;hyperscript&lt;/a&gt; which is subsequently used by virtual-dom. The hyperscript is generated as a string first and before returning it, &lt;code&gt;eval()&lt;/code&gt; it to turn it into executable code. I have found &lt;code&gt;eval()&lt;/code&gt; in this particular situation the exact opposite of evil.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No siempre es una mala idea. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tomemos, por ejemplo, la generaci&amp;oacute;n de c&amp;oacute;digo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Recientemente escrib&amp;iacute; una biblioteca llamada &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/vincentracine/hyperbars&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hyperbars&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que cierra la brecha entre &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/Matt-Esch/virtual-dom&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;virtual-dom&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;manillar&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo hace analizando una plantilla de manillar y convirti&amp;eacute;ndola en &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/dominictarr/hyperscript&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;hiperescrito&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que posteriormente es utilizado por virtual-dom. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El hiperescrito se genera primero como una cadena y antes de devolverlo, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para convertirlo en c&amp;oacute;digo ejecutable. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;He encontrado &lt;/font&gt;&lt;/font&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en esta situaci&amp;oacute;n particular, exactamente lo contrario del mal.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="31da5fad3f0e5a2f90cae8dbe47b9ff1d4257b20" translate="yes" xml:space="preserve">
          <source>It's not necessarily that bad provided you know what context you're using it in.</source>
          <target state="translated">No es necesariamente tan malo,siempre y cuando sepas en qué contexto lo estás usando.</target>
        </trans-unit>
        <trans-unit id="6fdf367987c4f683a398eb84746d6c7cffa8f46a" translate="yes" xml:space="preserve">
          <source>Mainly, it's a lot harder to maintain and debug. It's like a &lt;code&gt;goto&lt;/code&gt;. You can use it, but it makes it harder to find problems and harder on the people who may need to make changes later.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Principalmente, es mucho m&amp;aacute;s dif&amp;iacute;cil de mantener y depurar. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es como un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;goto&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede usarlo, pero hace que sea m&amp;aacute;s dif&amp;iacute;cil encontrar problemas y m&amp;aacute;s dif&amp;iacute;cil para las personas que pueden necesitar hacer cambios m&amp;aacute;s adelante.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6816994f89090ba2d1e15d75329ea4bd59ca4afc" translate="yes" xml:space="preserve">
          <source>One thing to keep in mind is that you can often use eval() to execute code in an otherwise restricted environment - social networking sites that block specific JavaScript functions can sometimes be fooled by breaking them up in an eval block -</source>
          <target state="translated">Una cosa a tener en cuenta es que a menudo se puede usar eval()para ejecutar código en un entorno restringido-los sitios de redes sociales que bloquean funciones específicas de JavaScript a veces pueden ser engañados al dividirlos en un bloque de evaluación -</target>
        </trans-unit>
        <trans-unit id="286c00910c6d09f3a9fbe2684368745980787a14" translate="yes" xml:space="preserve">
          <source>Passing user input to eval() is a security risk, but also each invocation of eval() creates a new instance of the JavaScript interpreter. This can be a resource hog.</source>
          <target state="translated">Pasar la entrada del usuario a eval()es un riesgo de seguridad,pero también cada invocación de eval()crea una nueva instancia del intérprete de JavaScript.Esto puede ser un acaparamiento de recursos.</target>
        </trans-unit>
        <trans-unit id="df4727fbdcb3341721f9c555bf1cbb200fd36b28" translate="yes" xml:space="preserve">
          <source>Performance: until the code to be executed is unknown, it cannot be optimized.  (about javascript and performance, certainly &lt;a href=&quot;http://steve-yegge.blogspot.com/2008/05/dynamic-languages-strike-back.html&quot;&gt;Steve Yegge's presentation&lt;/a&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Rendimiento: hasta que se desconozca el c&amp;oacute;digo a ejecutar, no se puede optimizar. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(sobre JavaScript y rendimiento, ciertamente &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://steve-yegge.blogspot.com/2008/05/dynamic-languages-strike-back.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la presentaci&amp;oacute;n de Steve Yegge&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="64aa4d557cc62d15e8de600185aa21dbf6018da0" translate="yes" xml:space="preserve">
          <source>Reference :</source>
          <target state="translated">Referencia :</target>
        </trans-unit>
        <trans-unit id="5e60db53c154faf8e7afbee52db6ba5fc5c47e87" translate="yes" xml:space="preserve">
          <source>Security (but as long as you generate the string to be evaluated yourself, this might be a non-issue)</source>
          <target state="translated">Seguridad (pero mientras usted mismo genere la cadena a evaluar,esto podría no ser un problema)</target>
        </trans-unit>
        <trans-unit id="14685695470c1f8b261fc20c5c317f1a512aa650" translate="yes" xml:space="preserve">
          <source>So if you're looking to run some JavaScript code where it might not otherwise be allowed (&lt;a href=&quot;http://en.wikipedia.org/wiki/Myspace&quot;&gt;Myspace&lt;/a&gt;, I'm looking at you...) then eval() can be a useful trick.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, si est&amp;aacute; buscando ejecutar alg&amp;uacute;n c&amp;oacute;digo JavaScript donde de otra manera no se permitir&amp;iacute;a ( &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Myspace&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Myspace&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , lo estoy mirando ...), entonces eval () puede ser un truco &amp;uacute;til.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29ca7e51eaa8f10f1aa783d05d0cdd8080017091" translate="yes" xml:space="preserve">
          <source>Something as simple as the above code causes a small amount of memory to be store until the app dies. 
This is worse when the evaled script is a giant function, and called on interval.</source>
          <target state="translated">Algo tan simple como el código anterior hace que se almacene una pequeña cantidad de memoria hasta que la aplicación muera.Esto es peor cuando el guión evaluado es una función gigante,y se llama a intervalo.</target>
        </trans-unit>
        <trans-unit id="41399e76633f1ba3e54bb4e075d2084afd4fcd9f" translate="yes" xml:space="preserve">
          <source>The JavaScript Engine has a number of performance optimizations that it performs during the compilation phase. Some of these boil down to being able to essentially statically analyze the code as it lexes, and pre-determine where all the variable and function declarations are, so that it takes less effort to resolve identifiers during execution.</source>
          <target state="translated">El motor de JavaScript tiene una serie de optimizaciones de rendimiento que realiza durante la fase de compilación.Algunas de ellas se reducen a ser capaces de analizar esencialmente de forma estática el código a medida que se lexe,y predeterminar dónde están todas las declaraciones de variables y funciones,de modo que se requiere menos esfuerzo para resolver los identificadores durante la ejecución.</target>
        </trans-unit>
        <trans-unit id="148e0c7f81d9a3698c5049c257860541935ee71e" translate="yes" xml:space="preserve">
          <source>The browsers garbage collection has no idea if the code that's eval'ed can be removed from memory so it just keeps it stored until the page is reloaded. 
Not too bad if your users are only on your page shortly, but it can be a problem for webapp's.</source>
          <target state="translated">La colección de basura de los navegadores no tiene ni idea de si el código que se evalúa puede ser eliminado de la memoria,así que sólo lo mantiene almacenado hasta que la página se recarga.No es tan malo si los usuarios sólo están en la página en breve,pero puede ser un problema para las aplicaciones web.</target>
        </trans-unit>
        <trans-unit id="24be6ca54f3f04a72a882c99dcb539c99444e81b" translate="yes" xml:space="preserve">
          <source>The eval function is a powerful and easy way to dynamically generate code, so what are the caveats?</source>
          <target state="translated">La función de evaluación es una manera poderosa y fácil de generar código de forma dinámica,así que,¿cuáles son las advertencias?</target>
        </trans-unit>
        <trans-unit id="68865d1d8d64a6c8ba9da456612b2787bc0b5b95" translate="yes" xml:space="preserve">
          <source>The other thing is that the better You get the more You try to understand and finally You just don't believe that something is good or bad just because someone said so :) 
This is a very inspirational &lt;a href=&quot;http://www.youtube.com/watch?v=MFtijdklZDo&quot;&gt;video&lt;/a&gt; that helped me to think more by myself :) GOOD PRACTICES are good, but don't use them mindelessly :)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La otra cosa es que cuanto mejor obtienes, m&amp;aacute;s tratas de entender y, finalmente, simplemente no crees que algo es bueno o malo solo porque alguien lo dijo :) Este es un &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=MFtijdklZDo&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;video&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; muy inspirador &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;que me ayud&amp;oacute; a pensar m&amp;aacute;s por m&amp;iacute; mismo :) Las BUENAS PR&amp;Aacute;CTICAS son buenas, pero no las uses sin pensar :)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d16f9ac85bd63b35f45508e21cf50ad7aeb3cb1f" translate="yes" xml:space="preserve">
          <source>The performance of &lt;code&gt;eval()&lt;/code&gt; isn't an issue in a situation like this because you only need to interpret the generated string once and then reuse the executable output many times over.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El rendimiento de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no es un problema en una situaci&amp;oacute;n como esta porque solo necesita interpretar la cadena generada una vez y luego reutilizar la salida ejecutable muchas veces.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7633212c2dd3cc676f1ba1372322ebac779d750f" translate="yes" xml:space="preserve">
          <source>There is a small potential
benefit because the code evaluated in new Function() will be running in a local function
scope, so any variables defined with var in the code being evaluated will not become
globals automatically.</source>
          <target state="translated">Hay un pequeño beneficio potencial porque el código evaluado en el nuevo Function()se ejecutará en un ámbito de función local,por lo que cualquier variable definida con var en el código que se está evaluando no se convertirá en global automáticamente.</target>
        </trans-unit>
        <trans-unit id="4584f4b326d529ce961e584e35dd41b651162eb7" translate="yes" xml:space="preserve">
          <source>This
function takes an arbitrary string and executes it as JavaScript code. When the code in
question is known beforehand (not determined at runtime), there&amp;rsquo;s no reason to use
eval(). 
If the code is dynamically generated at runtime, there&amp;rsquo;s often a better way to
achieve the goal without eval(). 
For example, just using square bracket notation to
access dynamic properties is better and simpler:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta funci&amp;oacute;n toma una cadena arbitraria y la ejecuta como c&amp;oacute;digo JavaScript. Cuando el c&amp;oacute;digo en cuesti&amp;oacute;n se conoce de antemano (no se determina en tiempo de ejecuci&amp;oacute;n), no hay raz&amp;oacute;n para usar eval (). Si el c&amp;oacute;digo se genera din&amp;aacute;micamente en tiempo de ejecuci&amp;oacute;n, a menudo hay una mejor manera de lograr el objetivo sin eval (). Por ejemplo, simplemente usar la notaci&amp;oacute;n de corchetes para acceder a las propiedades din&amp;aacute;micas es mejor y m&amp;aacute;s simple:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0ccfc53cb017769dd7ae987a142efdb9302c67cd" translate="yes" xml:space="preserve">
          <source>This explains it all.</source>
          <target state="translated">Esto lo explica todo.</target>
        </trans-unit>
        <trans-unit id="ee72c7e2a527cacf1dc21f1420f881a587b5bf1d" translate="yes" xml:space="preserve">
          <source>This is one of good articles talking about eval and how it is not an evil:
&lt;a href=&quot;http://www.nczonline.net/blog/2013/06/25/eval-isnt-evil-just-misunderstood/&quot;&gt;http://www.nczonline.net/blog/2013/06/25/eval-isnt-evil-just-misunderstood/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Este es uno de los buenos art&amp;iacute;culos que hablan sobre eval y c&amp;oacute;mo no es un mal: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.nczonline.net/blog/2013/06/25/eval-isnt-evil-just-misunderstood/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://www.nczonline.net/blog/2013/06/25/eval-isnt-evil-just-misunderstood/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="206747b449bd6d921232d550ccc476c2741e014c" translate="yes" xml:space="preserve">
          <source>This may become more of an issue as the next generation of browsers come out with some flavor of a JavaScript compiler. Code executed via Eval may not perform as well as the rest of your JavaScript against these newer browsers. Someone should do some profiling.</source>
          <target state="translated">Esto puede convertirse en un problema más grande a medida que la próxima generación de navegadores salga con algo de sabor a un compilador de JavaScript.El código ejecutado a través de Eval puede no funcionar tan bien como el resto de su JavaScript contra estos nuevos navegadores.Alguien debería hacer un perfil.</target>
        </trans-unit>
        <trans-unit id="f0f8ad23e65b95f25bbdd8df86f29ae3982527e0" translate="yes" xml:space="preserve">
          <source>To give an all-too-typical example, to set the colour of an element with an id stored in the variable 'potato':</source>
          <target state="translated">Para dar un ejemplo demasiado típico,establecer el color de un elemento con una identificación almacenada en la variable &quot;patata&quot;:</target>
        </trans-unit>
        <trans-unit id="f4c65e507b7f93297ee2268d7252cbd7eb37d296" translate="yes" xml:space="preserve">
          <source>To this</source>
          <target state="translated">A esto</target>
        </trans-unit>
        <trans-unit id="b34c39225645dafeee78e3812eddc5e31d4bb53b" translate="yes" xml:space="preserve">
          <source>Two points come to mind:</source>
          <target state="translated">Me vienen a la mente dos puntos:</target>
        </trans-unit>
        <trans-unit id="d9b8f5845abccd0b52ea08432402c9e42002ef09" translate="yes" xml:space="preserve">
          <source>Unless you are 100% sure that the code being evaluated is from a trusted source (usually your own application) then it's a surefire way of exposing your system to a cross-site scripting attack.</source>
          <target state="translated">A menos que estés 100% seguro de que el código que se está evaluando proviene de una fuente de confianza (normalmente tu propia aplicación),entonces es una forma segura de exponer tu sistema a un ataque de scripts en varios sitios.</target>
        </trans-unit>
        <trans-unit id="e3090c0855982eee09e2769634d70840bc3e123f" translate="yes" xml:space="preserve">
          <source>Unless you let eval() a dynamic content (through cgi or input), it is as safe and solid as all other JavaScript in your page.</source>
          <target state="translated">A menos que dejes evaluar()un contenido dinámico (a través de cgi o input),es tan seguro y sólido como cualquier otro JavaScript en tu página.</target>
        </trans-unit>
        <trans-unit id="828ef76c49e81348c8216226d09ee2f8044a35d7" translate="yes" xml:space="preserve">
          <source>Untrusted client-side JavaScript code can't do that much anyway. Provided the thing you're executing &lt;code&gt;eval()&lt;/code&gt; on has come from a reasonable source, you're fine.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El c&amp;oacute;digo JavaScript del lado del cliente no confiable no puede hacer mucho de todos modos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Siempre que lo que est&amp;aacute; ejecutando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; haya venido de una fuente razonable, est&amp;aacute; bien.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f9d7c43ed517909799508794915cbb170a228986" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;eval()&lt;/code&gt; also has security implications, because you might be executing code (for
example coming from the network) that has been tampered with. 
This is a common antipattern when dealing with a JSON response from an Ajax request. 
In those cases
it&amp;rsquo;s better to use the browsers&amp;rsquo; built-in methods to parse the JSON response to make
sure it&amp;rsquo;s safe and valid. For browsers that don&amp;rsquo;t support &lt;code&gt;JSON.parse()&lt;/code&gt; natively, you can
use a library from JSON.org.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El uso de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tambi&amp;eacute;n tiene implicaciones de seguridad, ya que podr&amp;iacute;a estar ejecutando c&amp;oacute;digo (por ejemplo, proveniente de la red) que ha sido manipulado. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Este es un antipatr&amp;oacute;n com&amp;uacute;n cuando se trata con una respuesta JSON de una solicitud de Ajax. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En esos casos, es mejor utilizar los m&amp;eacute;todos integrados de los navegadores para analizar la respuesta JSON para asegurarse de que sea segura y v&amp;aacute;lida. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para los navegadores que no admiten &lt;/font&gt;&lt;/font&gt; &lt;code&gt;JSON.parse()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; forma nativa, puede usar una biblioteca de JSON.org.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f6b34e4ed2beda88578b9d4ffae571828b3a96fe" translate="yes" xml:space="preserve">
          <source>Using the new Function() constructor is similar to eval() and should be approached
with care. It could be a powerful construct but is often misused. 
If you absolutely must
use &lt;code&gt;eval()&lt;/code&gt;, you can consider using new Function() instead.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El uso del nuevo constructor Function () es similar a eval () y debe abordarse con cuidado. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Podr&amp;iacute;a ser una construcci&amp;oacute;n poderosa, pero a menudo se usa mal. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si absolutamente debe usar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , puede considerar usar una nueva funci&amp;oacute;n () en su lugar.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bfd49273a1375934f5c848fad258380f58fc832e" translate="yes" xml:space="preserve">
          <source>Why is using the JavaScript eval function a bad idea</source>
          <target state="translated">¿Por qué es una mala idea usar la función de evaluación de JavaScript</target>
        </trans-unit>
        <trans-unit id="baa0684dab15c8994c1b20edf616d0265609e87c" translate="yes" xml:space="preserve">
          <source>You can see how the code generation was achieved if you're curious &lt;a href=&quot;https://github.com/vincentracine/hyperbars/blob/master/src/hyperbars.js#L131&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede ver c&amp;oacute;mo se logr&amp;oacute; la generaci&amp;oacute;n del c&amp;oacute;digo si tiene curiosidad &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/vincentracine/hyperbars/blob/master/src/hyperbars.js#L131&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aqu&amp;iacute;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="10ee2d5d74a937a388d34da3fa1e839789d7bfc1" translate="yes" xml:space="preserve">
          <source>eval isn't always evil. There are times where it's perfectly appropriate.</source>
          <target state="translated">Eval no siempre es malvada.Hay momentos en los que es perfectamente apropiada.</target>
        </trans-unit>
        <trans-unit id="fe78ef92fe2e03888205d149e55224d05ac1f054" translate="yes" xml:space="preserve">
          <source>eval'd code executes slower (no opportunity to compile/cache eval'd code)</source>
          <target state="translated">El código de evaluación se ejecuta más lentamente (no hay oportunidad de compilar el código de evaluación)</target>
        </trans-unit>
        <trans-unit id="2237830e035cd30c9631188a7c1490660cccb742" translate="yes" xml:space="preserve">
          <source>eval() is very powerful and can be used to execute a JS statement or evaluate an expression. But the question isn't about the uses of eval() but lets just say some how the string you running with eval() is affected by a malicious party. At the end you will be running malicious code. With power comes great responsibility. So use it wisely is you are using it. 
 This isn't related much to eval() function but this article has pretty good information:
 &lt;a href=&quot;http://blogs.popart.com/2009/07/javascript-injection-attacks/&quot;&gt;http://blogs.popart.com/2009/07/javascript-injection-attacks/&lt;/a&gt;
If you are looking for the basics of eval() look here: 
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;eval () es muy poderoso y puede usarse para ejecutar una declaraci&amp;oacute;n JS o evaluar una expresi&amp;oacute;n. Pero la pregunta no es sobre los usos de eval (), sino que digamos de alguna manera c&amp;oacute;mo la cadena que ejecuta con eval () se ve afectada por una parte maliciosa. Al final estar&amp;aacute;s ejecutando c&amp;oacute;digo malicioso. Con el poder viene una gran responsabilidad. As&amp;iacute; que &amp;uacute;salo sabiamente si lo est&amp;aacute;s usando. Esto no est&amp;aacute; muy relacionado con la funci&amp;oacute;n eval () pero este art&amp;iacute;culo tiene bastante buena informaci&amp;oacute;n: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.popart.com/2009/07/javascript-injection-attacks/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://blogs.popart.com/2009/07/javascript-injection-attacks/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Si est&amp;aacute; buscando los conceptos b&amp;aacute;sicos de eval () mira aqu&amp;iacute;: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5d118d441bbdad12f46b572679b98788e81ea43d" translate="yes" xml:space="preserve">
          <source>which is more reliable than the dodgy old trick of accessing DOM elements straight out of the document object.)</source>
          <target state="translated">que es más fiable que el viejo truco de acceder a los elementos DOM directamente desde el objeto del documento).</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
