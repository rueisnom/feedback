<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/115983">
    <body>
      <group id="115983">
        <trans-unit id="a979ef10cc6f6a36df6b8a323307ee3bb2e2db9c" translate="yes" xml:space="preserve">
          <source>+</source>
          <target state="translated">+</target>
        </trans-unit>
        <trans-unit id="54dfe2f7832271935a1233868d84cc1176f6f8c3" translate="yes" xml:space="preserve">
          <source>.gitkeep approach</source>
          <target state="translated">gitkeep アプローチ</target>
        </trans-unit>
        <trans-unit id="965e73fdd6e46ed980c8bdf03a589adab642edf9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/a/932982/456814&quot;&gt;The solution of Jamie Flournoy&lt;/a&gt; works great. Here is a bit enhanced version to keep the &lt;code&gt;.htaccess&lt;/code&gt; :</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/932982/456814&quot;&gt;Jamie Flournoyの解決策は&lt;/a&gt;うまくいきます。 &lt;code&gt;.htaccess&lt;/code&gt; を保持するためのビット拡張バージョンを次に示します。</target>
        </trans-unit>
        <trans-unit id="4e021e8096db3c4f40241955870ff1f94ba900d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;EDIT:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a55530aeccb75e9eeb062568b1cd54555a6a784b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit for a better solution&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;より良いソリューションのために編集&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d4481ac83b0f3173c1c526133aba6d8184bf1add" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;However&lt;/strong&gt;, I later thought It would be better to make this into a small utility command, so I recreated it using Python and published it to the PyPI &lt;a href=&quot;https://pypi.org/project/gitkeep2/&quot;&gt;here&lt;/a&gt;. You can install it by simply running:</source>
          <target state="translated">&lt;strong&gt;しかし&lt;/strong&gt; 、後でこれを小さなユーティリティコマンドにした方がいいと思ったので、Pythonを使用して再作成し、 &lt;a href=&quot;https://pypi.org/project/gitkeep2/&quot;&gt;ここ&lt;/a&gt;のPyPIに公開しました。 次のコマンドを実行するだけでインストールできます。</target>
        </trans-unit>
        <trans-unit id="202469ff83d849ba4804312d74f79bb4ea71ff92" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Original post below:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;以下の元の投稿：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2e622355d0c04a203c2ae230ad42e052083e6c1f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING: This tweak is not truly working as it turns out.&lt;/strong&gt; Sorry for the inconvenience.</source>
          <target state="translated">&lt;strong&gt;警告：この調整は、実際には機能していません。&lt;/strong&gt; ご不便おかけしてすみません。</target>
        </trans-unit>
        <trans-unit id="101a20c7c6631be2b36cbef52a2cb2613a6724f4" translate="yes" xml:space="preserve">
          <source>A GIT repository with exactly one commit:</source>
          <target state="translated">正確には1つのコミットを持つGITリポジトリ。</target>
        </trans-unit>
        <trans-unit id="5fa8d5d03c6966d644feecd12a13d42641e037f4" translate="yes" xml:space="preserve">
          <source>A file clearly related to Git</source>
          <target state="translated">明らかに Git に関連するファイル</target>
        </trans-unit>
        <trans-unit id="1613e56a1fc0205ddfa3ab0bfb1dab82dacc86c1" translate="yes" xml:space="preserve">
          <source>A file unrelated to the code (because of the leading dot and the name)</source>
          <target state="translated">コードとは関係のないファイル(先頭のドットと名前のため)</target>
        </trans-unit>
        <trans-unit id="f6920857980f2d91e8c0805986b7d6808c9af1ce" translate="yes" xml:space="preserve">
          <source>Add a empty .gitkeep file in there</source>
          <target state="translated">空の .gitkeep ファイルを追加します。</target>
        </trans-unit>
        <trans-unit id="41f9d35d45a5809f08ddb210d46278bb6f19b01c" translate="yes" xml:space="preserve">
          <source>Add a submodule to any repository (&lt;code&gt;git submodule add path_to_repo&lt;/code&gt;)</source>
          <target state="translated">サブモジュールを任意のリポジトリに &lt;code&gt;git submodule add path_to_repo&lt;/code&gt; ます（ git submodule add path_to_repo ）</target>
        </trans-unit>
        <trans-unit id="7f257395a529eabc4dadeed1ba30bccd729c2da6" translate="yes" xml:space="preserve">
          <source>Add it to the index using a plumbing command and the empty tree &lt;a href=&quot;http://en.wikipedia.org/wiki/SHA-1&quot;&gt;SHA-1&lt;/a&gt;:</source>
          <target state="translated">配管コマンドと空のツリー&lt;a href=&quot;http://en.wikipedia.org/wiki/SHA-1&quot;&gt;SHA-1&lt;/a&gt;を使用してそれをインデックスに追加します。</target>
        </trans-unit>
        <trans-unit id="94916474ca86f077fbf26f834c5faca8838d0984" translate="yes" xml:space="preserve">
          <source>Adding one more option to the fray.</source>
          <target state="translated">争いに選択肢を一つ増やす</target>
        </trans-unit>
        <trans-unit id="9d9855d155abfb00319d620ad3008e951f075bcb" translate="yes" xml:space="preserve">
          <source>Adoption</source>
          <target state="translated">Adoption</target>
        </trans-unit>
        <trans-unit id="99970754935cc627f1a4d7e256aaac3733fca7f9" translate="yes" xml:space="preserve">
          <source>After the commit you have a broken symbolic link in your index and git creates the directory. The broken link has some advantages, since it is no regular file and points to no regular file. So it even fits to the part of the question &quot;(that contains no files)&quot;, not by the intention but by the meaning, I guess:</source>
          <target state="translated">コミット後、インデックスに壊れたシンボリックリンクがあり、gitがディレクトリを作成します。壊れたリンクには、通常のファイルではなく、通常のファイルを指し示すものではないので、いくつかの利点があります。つまり、「(ファイルが含まれていない)」という質問の部分にも当てはまるわけで、意図的なものではなく、意味的なものだと思います。</target>
        </trans-unit>
        <trans-unit id="b7d6d9bb1e8d27ac23a196714647227815b05a51" translate="yes" xml:space="preserve">
          <source>Alternatively, as noted in another &lt;a href=&quot;https://stackoverflow.com/a/5305908/832230&quot;&gt;answer&lt;/a&gt;, the directory can contain a descriptive &lt;a href=&quot;https://stackoverflow.com/questions/8655937/github-readme-and-readme-md&quot;&gt;&lt;code&gt;README&lt;/code&gt; or &lt;code&gt;README.md&lt;/code&gt; file&lt;/a&gt; instead.</source>
          <target state="translated">または、別の&lt;a href=&quot;https://stackoverflow.com/a/5305908/832230&quot;&gt;回答&lt;/a&gt;に記載されているように、ディレクトリには代わりに説明的な&lt;a href=&quot;https://stackoverflow.com/questions/8655937/github-readme-and-readme-md&quot;&gt; &lt;code&gt;README&lt;/code&gt; または &lt;code&gt;README.md&lt;/code&gt; ファイルを&lt;/a&gt;含めることができます。</target>
        </trans-unit>
        <trans-unit id="205e51c8e1ece1ffd2fce77ba495ccd116607ccf" translate="yes" xml:space="preserve">
          <source>Alternatively, you could just exclude &lt;em&gt;every&lt;/em&gt; README file from being ignored:</source>
          <target state="translated">または、 &lt;em&gt;すべての&lt;/em&gt; READMEファイルを無視しないように除外することもできます。</target>
        </trans-unit>
        <trans-unit id="4117f5e31a8f100fe678077742923976451bc72f" translate="yes" xml:space="preserve">
          <source>Although it may seem not such a big difference:</source>
          <target state="translated">そこまで大きな差はないように思われるかもしれませんが。</target>
        </trans-unit>
        <trans-unit id="1744eb66f2436ca0f0c9f01a0155762ce350072a" translate="yes" xml:space="preserve">
          <source>An easy way to do this is by adding a &lt;code&gt;.gitkeep&lt;/code&gt; file to the directory you wish to (currently) keep empty.</source>
          <target state="translated">これを行う簡単な方法は、（現在）空のままにしたいディレクトリに &lt;code&gt;.gitkeep&lt;/code&gt; ファイルを追加することです。</target>
        </trans-unit>
        <trans-unit id="219f59595254577d0c91a349dfa6d30d4e67e595" translate="yes" xml:space="preserve">
          <source>An empty directory &lt;em&gt;cannot be part of a tree under the Git versioning system&lt;/em&gt;.</source>
          <target state="translated">空のディレクトリ&lt;em&gt;をGitバージョン管理システムのツリーの一部にすることはできません&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="362f60ebf0e843cd145df3739ab29dfe432e6594" translate="yes" xml:space="preserve">
          <source>Andy Lester is right, but if your directory just needs to be empty, and not &lt;em&gt;empty&lt;/em&gt; empty, you can put an empty &lt;code&gt;.gitignore&lt;/code&gt; file in there as a workaround.</source>
          <target state="translated">Andy Lesterは正しいですが、ディレクトリを空にする必要があるだけで、空にする必要がない場合は、回避策として空の &lt;code&gt;.gitignore&lt;/code&gt; ファイルをそこに置くことができます。</target>
        </trans-unit>
        <trans-unit id="673af2d6ba313c8fac9157b8704d15350b4c0a6d" translate="yes" xml:space="preserve">
          <source>Another idea would be to add a &lt;code&gt;README&lt;/code&gt; file explaining what the directory will be used for.</source>
          <target state="translated">別のアイデアは、ディレクトリが何のために使用されるかを説明する &lt;code&gt;README&lt;/code&gt; ファイルを追加することです。</target>
        </trans-unit>
        <trans-unit id="1ec908de3e9396e1c85db9b6afb773449d35d181" translate="yes" xml:space="preserve">
          <source>Another option (in response to a comment by @GreenAsJade), if you want to track an empty folder that &lt;em&gt;MAY&lt;/em&gt; contain tracked files in the future, but will be empty for now, you can ommit the &lt;code&gt;*&lt;/code&gt; from the &lt;code&gt;.gitignore&lt;/code&gt; file, and check &lt;em&gt;that&lt;/em&gt; in.  Basically, all the file is saying is &quot;do not ignore &lt;em&gt;me&lt;/em&gt;&quot;, but otherwise, the directory is empty and tracked.</source>
          <target state="translated">別のオプション（@GreenAsJadeによるコメントへの応答）、将来追跡されるファイルが含まれる可能性があるが現時点では空になる空のフォルダーを追跡する場合は、 &lt;code&gt;.gitignore&lt;/code&gt; ファイルから &lt;code&gt;*&lt;/code&gt; を省略して、基本的に、すべてのファイルは「無視しないで&lt;em&gt;ください&lt;/em&gt; 」と言っていますが、それ以外の場合、ディレクトリは空で追跡されます。</target>
        </trans-unit>
        <trans-unit id="e3cd64b3958a23e5561c2201ea3cd924a9116ba2" translate="yes" xml:space="preserve">
          <source>Another way to make a directory stay (almost) empty (in the repository) is to create a &lt;code&gt;.gitignore&lt;/code&gt; file inside that directory that contains these four lines:</source>
          <target state="translated">（リポジトリ内で）ディレクトリを（ほぼ）空のままにする別の方法は、次の4行を含むディレクトリ内に &lt;code&gt;.gitignore&lt;/code&gt; ファイルを作成することです。</target>
        </trans-unit>
        <trans-unit id="8ada30d97d2322a43013b97b2132220ba3c00e8a" translate="yes" xml:space="preserve">
          <source>Appendix: Recreating this commit</source>
          <target state="translated">付録。このコミットを再現する</target>
        </trans-unit>
        <trans-unit id="dc15c49fe1e32d89a01fe92846b02027eac99394" translate="yes" xml:space="preserve">
          <source>As an aside, this is an implementation issue, not a fundamental Git storage design problem. As has been mentioned many times on the Git mailing list, the reason that this has not been implemented is that no one has cared enough to submit a patch for it, not that it couldn&amp;rsquo;t or shouldn&amp;rsquo;t be done.</source>
          <target state="translated">余談ですが、これは実装の問題であり、基本的なGitストレージ設計の問題ではありません。 Gitメーリングリストで何度も言及されているように、これが実装されていない理由は、誰もがパッチを提出するのに十分な配慮がなされていないことであり、実行できなかった、または実行できないことではありません。</target>
        </trans-unit>
        <trans-unit id="3239a01b066eacc1ab9371152bfd4916f5f2b8e9" translate="yes" xml:space="preserve">
          <source>As described in other answers, Git is unable to represent empty directories in its staging area. (See the &lt;a href=&quot;https://git.wiki.kernel.org/index.php/GitFaq#Can_I_add_empty_directories.3F&quot;&gt;Git FAQ&lt;/a&gt;.) However, if, for your purposes, a directory is empty enough if it contains a &lt;code&gt;.gitignore&lt;/code&gt; file only, then you can create &lt;code&gt;.gitignore&lt;/code&gt; files in empty directories only via:</source>
          <target state="translated">他の回答で説明されているように、Gitはステージング領域で空のディレクトリを表すことができません。 （ &lt;a href=&quot;https://git.wiki.kernel.org/index.php/GitFaq#Can_I_add_empty_directories.3F&quot;&gt;Git FAQを&lt;/a&gt;参照してください 。）ただし、目的のために、 &lt;code&gt;.gitignore&lt;/code&gt; ファイルのみが含まれているディレクトリが十分に空である場合、次の方法でのみ、空のディレクトリに &lt;code&gt;.gitignore&lt;/code&gt; ファイルを作成できます。</target>
        </trans-unit>
        <trans-unit id="b3aa328f227341220383e651bc6b4c7fbf977534" translate="yes" xml:space="preserve">
          <source>As mentioned it's not possible to add empty directories, but here is a one liner that adds empty .gitignore files to all directories.</source>
          <target state="translated">前述の通り、空のディレクトリを追加することはできませんが、ここでは空の .gitignore ファイルをすべてのディレクトリに追加するワンライナーを紹介します。</target>
        </trans-unit>
        <trans-unit id="8f582e5d97d10444178705b3520e63053106d73b" translate="yes" xml:space="preserve">
          <source>Assuming you would like to add a directory to &lt;code&gt;git&lt;/code&gt; that, for all purposes related to &lt;code&gt;git&lt;/code&gt;, should remain empty and never have it's contents tracked, a &lt;code&gt;.gitignore&lt;/code&gt; as suggested numerous times here, will do the trick.</source>
          <target state="translated">&lt;code&gt;git&lt;/code&gt; に関連するすべての目的のために、空のままにして、その内容を追跡しないようにするディレクトリを &lt;code&gt;git&lt;/code&gt; に追加する場合、ここで何度も提案されている &lt;code&gt;.gitignore&lt;/code&gt; でうまくいきます。</target>
        </trans-unit>
        <trans-unit id="23613439d97605dcd248fd94d6a238984f2dc5ca" translate="yes" xml:space="preserve">
          <source>But I strongly recommend to use this solution only in special circumstances, a good written &lt;code&gt;README&lt;/code&gt; in an empty directory is usually a better solution. (And I do not know if this works with a windows filesystem...)</source>
          <target state="translated">しかし、私はこのソリューションを特別な状況でのみ使用することを強くお勧めします。通常、空のディレクトリに書かれた &lt;code&gt;README&lt;/code&gt; が適切なソリューションです。 （これがWindowsファイルシステムで機能するかどうかはわかりません...）</target>
        </trans-unit>
        <trans-unit id="204ee4ab94277da69a779db2a898d64b3886bdd5" translate="yes" xml:space="preserve">
          <source>Create an empty file called &lt;code&gt;.gitkeep&lt;/code&gt; in the directory, and add that.</source>
          <target state="translated">ディレクトリに &lt;code&gt;.gitkeep&lt;/code&gt; という空のファイルを作成し、追加します。</target>
        </trans-unit>
        <trans-unit id="53f860381ebc4d59d1571298edcbb7f65b9e7033" translate="yes" xml:space="preserve">
          <source>Create your empty directory:</source>
          <target state="translated">空のディレクトリを作成します。</target>
        </trans-unit>
        <trans-unit id="63c79f01306ce2c1fdcd4302cc3efd54a5fbf20b" translate="yes" xml:space="preserve">
          <source>Creating a &lt;code&gt;.gitignore&lt;/code&gt; file with a sort of &quot;reverse logic&quot; (i.e. to include all the files) which, at the end, serves the same purpose of approach #1.</source>
          <target state="translated">一種の「逆ロジック」（つまり、すべてのファイルを含める）を使用して &lt;code&gt;.gitignore&lt;/code&gt; ファイルを作成します。これは、最後に、アプローチ＃1と同じ目的を果たします。</target>
        </trans-unit>
        <trans-unit id="a40e01a66ccfdfc021d7951d7b2e682524016ace" translate="yes" xml:space="preserve">
          <source>Creating reproducible GIT commits is surprisingly hard&amp;hellip;</source>
          <target state="translated">再現可能なGITコミットの作成は驚くほど難しい&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="dd6a02a553da4cb247f914011dd67c37487ec082" translate="yes" xml:space="preserve">
          <source>Ctrl</source>
          <target state="translated">Ctrl</target>
        </trans-unit>
        <trans-unit id="f47719f4b93d12245afcb6b378a55e51cb7baab4" translate="yes" xml:space="preserve">
          <source>Currently the design of the git index
  (staging area) only permits files to
  be listed, and nobody competent enough
  to make the change to allow empty
  directories has cared enough about
  this situation to remedy it.</source>
          <target state="translated">現在のところ、git インデックス (ステージングエリア)のデザインではファイルの一覧表示のみを許可しています。</target>
        </trans-unit>
        <trans-unit id="50c9e8d5fc98727b4bbc93cf5d64a68db647f04f" translate="yes" xml:space="preserve">
          <source>D</source>
          <target state="translated">D</target>
        </trans-unit>
        <trans-unit id="82e82713359cdaaafb72b46a6e1882670542c2ef" translate="yes" xml:space="preserve">
          <source>Delete &lt;code&gt;.submodules&lt;/code&gt; file and commit the change.</source>
          <target state="translated">&lt;code&gt;.submodules&lt;/code&gt; ファイルを削除し、変更をコミットします。</target>
        </trans-unit>
        <trans-unit id="30b45d9391fc566055c2446c75bdd98979449a2e" translate="yes" xml:space="preserve">
          <source>Directories are added automatically
  when adding files inside them. That
  is, directories never have to be added
  to the repository, and are not tracked
  on their own.</source>
          <target state="translated">ディレクトリは、その中にファイルを追加すると自動的に追加されます。つまり、ディレクトリはリポジトリに追加される必要はなく、それ自身で追跡されることはありません。</target>
        </trans-unit>
        <trans-unit id="2b9eceb7a86a9f577ef80586c5c1d7fde9ff493d" translate="yes" xml:space="preserve">
          <source>Enter</source>
          <target state="translated">Enter</target>
        </trans-unit>
        <trans-unit id="24a34e8586a6fe7adbf4df3b5903f1f20ba96a9d" translate="yes" xml:space="preserve">
          <source>Enter: &lt;a href=&quot;https://gitlab.com/empty-repo/empty.git&quot;&gt;https://gitlab.com/empty-repo/empty.git&lt;/a&gt;</source>
          <target state="translated">入力： &lt;a href=&quot;https://gitlab.com/empty-repo/empty.git&quot;&gt;https&lt;/a&gt; : //gitlab.com/empty-repo/empty.git</target>
        </trans-unit>
        <trans-unit id="a4812472ded0e1206418736ef926fbf3549ac4b5" translate="yes" xml:space="preserve">
          <source>Find all the empty folders in the directory</source>
          <target state="translated">ディレクトリ内のすべての空のフォルダを検索します。</target>
        </trans-unit>
        <trans-unit id="6fc62c55ea835d429e6f2c2649c12b929bdef0d6" translate="yes" xml:space="preserve">
          <source>First create the needed directory:</source>
          <target state="translated">まず、必要なディレクトリを作成します。</target>
        </trans-unit>
        <trans-unit id="4d831780e1be8efe8f863fef86feaa1ec0c4bb58" translate="yes" xml:space="preserve">
          <source>First things first:</source>
          <target state="translated">まず第一に</target>
        </trans-unit>
        <trans-unit id="388d5fca9cb393c73059a212159a7d23344c109b" translate="yes" xml:space="preserve">
          <source>For instance, you should use READMEs as, well, READMEs with useful information, not as an excuse to keep the folder.</source>
          <target state="translated">例えば、フォルダを保持するための言い訳ではなく、便利な情報を持っているREADMEとして、まあ、READMEを使うべきです。</target>
        </trans-unit>
        <trans-unit id="afd17bd7401c7f01a2081091f425ec0aa178eef9" translate="yes" xml:space="preserve">
          <source>Git does not track empty directories. See the &lt;a href=&quot;https://git.wiki.kernel.org/index.php/GitFaq#Can_I_add_empty_directories.3F&quot;&gt;Git FAQ&lt;/a&gt; for more explanation. The suggested workaround is to put a &lt;code&gt;.gitignore&lt;/code&gt; file in the empty directory. I do not like that solution, because the &lt;code&gt;.gitignore&lt;/code&gt; is &quot;hidden&quot; by Unix convention. Also there is no explanation why the directories are empty.</source>
          <target state="translated">Gitは空のディレクトリを追跡しません。 詳細については、 &lt;a href=&quot;https://git.wiki.kernel.org/index.php/GitFaq#Can_I_add_empty_directories.3F&quot;&gt;Git FAQ&lt;/a&gt;を参照してください。 推奨される回避策は、空のディレクトリに &lt;code&gt;.gitignore&lt;/code&gt; ファイルを置くことです。 &lt;code&gt;.gitignore&lt;/code&gt; はUnixの慣例によって「隠されている」ので、 私はその解決策が好きではありません。 また、ディレクトリが空である理由も説明されていません。</target>
        </trans-unit>
        <trans-unit id="abf7a55b985a75376342b4667163ebbc63f5923d" translate="yes" xml:space="preserve">
          <source>Git will store the latest commit hash when creating the submodule reference, so you don't have to worry about me (or GitLab) using this to inject malicious files. Unfortunately I have not found any way to force which commit ID is used during checkout, so you'll have to manually check that the reference commit ID is &lt;code&gt;e84d7b81f0033399e325b8037ed2b801a5c994e0&lt;/code&gt; using &lt;code&gt;git submodule status&lt;/code&gt; after adding the repo.</source>
          <target state="translated">Gitはサブモジュール参照を作成するときに最新のコミットハッシュを保存するため、私（またはGitLab）がこれを使用して悪意のあるファイルを挿入することを心配する必要はありません。 残念ながら、チェックアウト時にどのコミットIDを使用するかを強制する方法が見つからなかったため、リポジトリを追加した後、 &lt;code&gt;git submodule status&lt;/code&gt; を使用して、参照コミットIDが &lt;code&gt;e84d7b81f0033399e325b8037ed2b801a5c994e0&lt;/code&gt; であることを手動で確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="db50b939caa3ae7b84670ab53010e4af37c2f3c3" translate="yes" xml:space="preserve">
          <source>Here is a hack, but it's funny that it works (Git 2.2.1). Similar to what @Teka suggested, but easier to remember:</source>
          <target state="translated">ここにハックがありますが、動作するのが面白いです(Git 2.2.1)。Tekaさんが提案してくれたものと似ていますが、覚えやすいです。</target>
        </trans-unit>
        <trans-unit id="34f32b59bdf6637082ef61a348b5705dfef7d5f3" translate="yes" xml:space="preserve">
          <source>How can I add an empty directory (that contains no files) to a Git repository?</source>
          <target state="translated">Git リポジトリに空のディレクトリ (ファイルを含まない)を追加するにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="0e45c641df1a90759be618c6e1cdc42dbd52a6aa" translate="yes" xml:space="preserve">
          <source>How can I add an empty directory to a Git repository</source>
          <target state="translated">Git リポジトリに空のディレクトリを追加するには</target>
        </trans-unit>
        <trans-unit id="c56cbbc0db85f25f2cb2b5fed84e8bb724a6cf5c" translate="yes" xml:space="preserve">
          <source>However, if you don't already (and won't) use any Git submodules in your repository, and the &quot;empty&quot; folder will remain empty or if you want Git to know of its existence and ignore its content, you can go with this tweak. Going the usual way with submodules takes more steps that this tweak.</source>
          <target state="translated">しかし、もしあなたがすでにリポジトリでGitのサブモジュールを使っていない(使わない)場合で、&quot;empty &quot;フォルダが空のままになったり、Gitにその存在を知ってもらいたいが内容を無視したい場合は、この調整を行うことができます。通常の方法でサブモジュールを使うには、この調整よりも多くのステップが必要になります。</target>
        </trans-unit>
        <trans-unit id="d7afc7e7ad9e4271b572fcd3ae18972213f21d5e" translate="yes" xml:space="preserve">
          <source>However, only a handful of our developers work on Mac or Linux. A lot work on Windows and I could not find an equivalent simple one-liner to accomplish the same there. Some were lucky enough to have &lt;a href=&quot;http://cygwin.com/&quot;&gt;Cygwin&lt;/a&gt; installed for other reasons, but prescribing Cygwin just for this seemed overkill.</source>
          <target state="translated">ただし、MacまたはLinuxで作業している開発者はごくわずかです。 Windowsでは多くの作業が行われ、そこで同じことを達成するための同等のシンプルなワンライナーを見つけることができませんでした。 他の理由で&lt;a href=&quot;http://cygwin.com/&quot;&gt;Cygwinを&lt;/a&gt;インストールできる幸運な人もいましたが、これだけのためにCygwinを処方するのはやり過ぎに思えました。</target>
        </trans-unit>
        <trans-unit id="13f53a1c26556881cd505b26923bea72fd3ab01b" translate="yes" xml:space="preserve">
          <source>I always build a function to check for my desired folder structure and build it for me within the project. This gets around this problem as the empty folders are held in Git by proxy.</source>
          <target state="translated">私はいつも、希望のフォルダ構造をチェックしてプロジェクト内で構築する関数をビルドしています。これで、空のフォルダはプロキシでGitに保持されるので、この問題を回避できます。</target>
        </trans-unit>
        <trans-unit id="e45fece1abd6f90f892e145a9e915efb5e5cfe68" translate="yes" xml:space="preserve">
          <source>I found &lt;em&gt;&lt;a href=&quot;http://markmail.org/message/4eqjxx73opiswfis&quot;&gt;Re: Empty directories..&lt;/a&gt;&lt;/em&gt;, but maybe there is another one.</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;http://markmail.org/message/4eqjxx73opiswfis&quot;&gt;Re：空のディレクトリが&lt;/a&gt;&lt;/em&gt;見つかりました。</target>
        </trans-unit>
        <trans-unit id="cec4839d0fd9dcd4f41fe6fdf0c182675133d9e8" translate="yes" xml:space="preserve">
          <source>I found a solution while playing with Git internals!</source>
          <target state="translated">Gitの内部をいじっているうちに解決策を見つけました!</target>
        </trans-unit>
        <trans-unit id="72bc357e57efa0f7705c578621ba96ce18f6e6cd" translate="yes" xml:space="preserve">
          <source>I have stuck this in a Rakefile for easy access.</source>
          <target state="translated">簡単にアクセスできるようにRakefileに貼り付けました。</target>
        </trans-unit>
        <trans-unit id="75374da781eaeff20a4b10d655362c8fc04030b2" translate="yes" xml:space="preserve">
          <source>I hope you find it useful.</source>
          <target state="translated">ご参考になれば幸いです。</target>
        </trans-unit>
        <trans-unit id="2b5864cd78e42492f8da9b2ebfb0ea04618da5a1" translate="yes" xml:space="preserve">
          <source>I like the answers by @Artur79 and @mjs so I've been using a combination of both and made it a standard for our projects.</source>
          <target state="translated">私は@Artur79さんと@mjsさんの回答が好きなので、両方を組み合わせて定番にしています。</target>
        </trans-unit>
        <trans-unit id="68d2ec6eb602fadce9c838e0feee9b9302798d60" translate="yes" xml:space="preserve">
          <source>I suggest to put a README file in the empty directory explaining why the directory is empty and why it needs to be tracked in Git. With the README file in place, as far as Git is concerned, the directory is no longer empty.</source>
          <target state="translated">空のディレクトリにREADMEファイルを置いて、なぜ空のディレクトリなのか、なぜGitで追跡する必要があるのかを説明することを提案します。READMEファイルを設置したことで、Gitに関する限りでは、ディレクトリは空ではなくなりました。</target>
        </trans-unit>
        <trans-unit id="a72a8fb57623c0f8806b374760683795900bb699" translate="yes" xml:space="preserve">
          <source>I think it's worth noting that this solution does precisely what the question asked for, but is not perhaps what many people looking at this question will have been looking for. This solution guarantees that the directory remains empty. It says &quot;I truly never want files checked in here&quot;. As opposed to &quot;I don't have any files to check in here, yet, but I need the directory here, files may be coming later&quot;.</source>
          <target state="translated">このソリューションは、質問が求めていたことを正確に行うが、おそらくこの質問を見ている多くの人が探していたものではないことに注目する価値があると思います。この解決策は、ディレクトリが空のままであることを保証します。それは「私は本当にここでファイルをチェックしてほしくない」と言っています。私はここにチェックインするファイルを持っていない、まだ、しかし、私はここのディレクトリを必要としている、ファイルは後で来るかもしれない」と対照的です。</target>
        </trans-unit>
        <trans-unit id="d2300172ae86404895cfc0ad7ea8c4955047cf15" translate="yes" xml:space="preserve">
          <source>I wouldn't encourage to use it though since it may stop working in the future versions of Git. Which may leave your repository corrupted.</source>
          <target state="translated">将来のバージョンのGitでは動作しなくなるかもしれないので、使うことはお勧めしません。そのため、リポジトリが壊れたままになってしまうかもしれません。</target>
        </trans-unit>
        <trans-unit id="39d2f303154b0d1585f3a6e0af983c9b6b2afbfc" translate="yes" xml:space="preserve">
          <source>I've been facing the issue with empty directories, too. The problem with using placeholder files is that you need to create them, and delete them, if they are not necessary anymore (because later on there were added sub-directories or files. With big source trees managing these placeholder files can be cumbersome and error prone.</source>
          <target state="translated">私も空のディレクトリの問題に直面したことがあります。プレースホルダファイルを使用する場合の問題点は、それらを作成し、不要になった場合には削除する必要があるということです。大きなソースツリーでは、これらのプレースホルダファイルの管理は面倒でエラーが発生しやすいです。</target>
        </trans-unit>
        <trans-unit id="c7601d68ee81f8e120259486e6b1ae12a9ccbac6" translate="yes" xml:space="preserve">
          <source>I've been using this solution since I found it. It appears to work exactly the same way as creating a submodule, except that no module is defined anywhere.
This leads to errors when issuing &lt;code&gt;git submodule init|update&lt;/code&gt;.
The problem is that &lt;code&gt;git update-index&lt;/code&gt; rewrites the &lt;code&gt;040000 tree&lt;/code&gt; part into &lt;code&gt;160000 commit&lt;/code&gt;.</source>
          <target state="translated">このソリューションを見つけてからずっと使っています。 モジュールがどこにも定義されていないことを除いて、サブモジュールの作成とまったく同じように機能するように見えます。 これにより、 &lt;code&gt;git submodule init|update&lt;/code&gt; 発行するときにエラーが発生します。 問題は、 &lt;code&gt;git update-index&lt;/code&gt; が &lt;code&gt;040000 tree&lt;/code&gt; 部分を &lt;code&gt;160000 commit&lt;/code&gt; に書き換えることです。</target>
        </trans-unit>
        <trans-unit id="5d351e13a8bcc336ead6a5f1d2d86c50443b1858" translate="yes" xml:space="preserve">
          <source>I've seen the &lt;code&gt;.gitkeep&lt;/code&gt; approach adopted by very important frameworks like &lt;a href=&quot;https://laravel.com/&quot;&gt;Laravel&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular/angular-cli&quot;&gt;Angular-CLI&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://laravel.com/&quot;&gt;Laravel&lt;/a&gt;や&lt;a href=&quot;https://github.com/angular/angular-cli&quot;&gt;Angular-CLI&lt;/a&gt;などの非常に重要なフレームワークで採用されている &lt;code&gt;.gitkeep&lt;/code&gt; アプローチを見てきました。</target>
        </trans-unit>
        <trans-unit id="c8c0e91122ef0e2ff25a3087273b4f747cbc7488" translate="yes" xml:space="preserve">
          <source>If you really need a directory to
  exist in checkouts you should create a
  file in it. .gitignore works well for
  this purpose; you can leave it empty,
  or fill in the names of files you
  expect to show up in the directory.</source>
          <target state="translated">.gitignore はこの目的のためにうまく機能します。空のままにしておいてもいいし、ディレクトリに表示されたいファイル名を記入してもいいのです。</target>
        </trans-unit>
        <trans-unit id="b88b5727e398d6429615a95c050ef00e69f875c5" translate="yes" xml:space="preserve">
          <source>If you take the oft-suggested approach of checking in an almost-empty folder, you have the minor complexity of deleting the contents without also deleting the &quot;.gitignore&quot; file.</source>
          <target state="translated">空っぽになりそうなフォルダをチェックするというよく言われる方法をとると、「.gitignore」ファイルを削除せずに内容を削除しなければならないというちょっとした複雑さがあります。</target>
        </trans-unit>
        <trans-unit id="166d76c7375556749fc9ca7b90405f0825334d89" translate="yes" xml:space="preserve">
          <source>If you want to add a folder that will house a lot of transient data in multiple semantic directories, then one approach is to add something like this to your root .gitignore...</source>
          <target state="translated">複数のセマンティックディレクトリに大量の一過性のデータを格納するフォルダを追加したい場合は、ルートの .gitignore...に以下のようなものを追加するのも一つのアプローチです。</target>
        </trans-unit>
        <trans-unit id="d5380b667e544ff8a24b9405c725ec14b0995cee" translate="yes" xml:space="preserve">
          <source>In other words, you need to add the .gitignore file to the index before you can tell Git to ignore it (and everything else in the empty directory).</source>
          <target state="translated">つまり、.gitignore ファイルをインデックスに追加してからでないと、Git に無視するように指示できないということです (そして、空のディレクトリにある他のすべてのファイルを無視することもできます)。</target>
        </trans-unit>
        <trans-unit id="8b7c46451552b6582259deab5c7ceb320e0fb3a4" translate="yes" xml:space="preserve">
          <source>In this example, you might check in a (broken) symbolic link to the directory so that you can access it without the &quot;.generated&quot; prefix (but this is optional).</source>
          <target state="translated">この例では、ディレクトリへの(壊れた)シンボリックリンクをチェックして、 &quot;.generated&quot; 接頭辞なしでアクセスできるようにしています(ただし、これはオプションです)。</target>
        </trans-unit>
        <trans-unit id="42e8b8ca648f88055ab3a7f7d1902e80c94e7f59" translate="yes" xml:space="preserve">
          <source>It simply won't be tracked. But there are scenarios in which &quot;versioning&quot; empty directories can be meaningful, for example:</source>
          <target state="translated">これは単に追跡されません。しかし、例えば空のディレクトリを「バージョン管理」することが意味のあるシナリオもあります。</target>
        </trans-unit>
        <trans-unit id="483f2c3fbd5ff5e3af78d6c8c2adbfae854e7d94" translate="yes" xml:space="preserve">
          <source>It will add README files to all directories that are empty so those directories would be then added to the index.</source>
          <target state="translated">空のディレクトリにREADMEファイルが追加されるので、それらのディレクトリはインデックスに追加されます。</target>
        </trans-unit>
        <trans-unit id="a7b8e2ca1cdebbdc89287f27d67ef4cbeb716916" translate="yes" xml:space="preserve">
          <source>It will allow you to create and remove &lt;code&gt;.gitkeep&lt;/code&gt; files recursively, and it will also allow you to add messages to them for your peers to understand why those directories are important. This last bit is bonus. I thought it would be nice if the &lt;code&gt;.gitkeep&lt;/code&gt; files could be self-documenting.</source>
          <target state="translated">&lt;code&gt;.gitkeep&lt;/code&gt; ファイルを再帰的に作成および削除できるほか、ピアにメッセージを追加して、これらのディレクトリが重要である理由を理解することもできます。 この最後のビットはボーナスです。 &lt;code&gt;.gitkeep&lt;/code&gt; ファイルが自己文書化できればいいと思いました。</target>
        </trans-unit>
        <trans-unit id="2d06fc8a679b0a64d72b2527f4f092c409690681" translate="yes" xml:space="preserve">
          <source>Its purpose (&lt;strong&gt;keep&lt;/strong&gt;) is clearly stated and consistent and semantically opposed in its meaning to &lt;strong&gt;ignore&lt;/strong&gt;</source>
          <target state="translated">その目的（ &lt;strong&gt;keep&lt;/strong&gt; ）は明確に述べられており、一貫しており、 &lt;strong&gt;無視する&lt;/strong&gt;という意味で意味的に反対している</target>
        </trans-unit>
        <trans-unit id="1fcb5763f6c039d05fea047246e4864f744c352d" translate="yes" xml:space="preserve">
          <source>Just have a look at: &lt;a href=&quot;http://code.google.com/p/markemptydirs&quot;&gt;http://code.google.com/p/markemptydirs&lt;/a&gt;</source>
          <target state="translated">ちょうど見て&lt;a href=&quot;http://code.google.com/p/markemptydirs&quot;&gt;ください&lt;/a&gt; ： http : //code.google.com/p/markemptydirs</target>
        </trans-unit>
        <trans-unit id="cb69e9e85d861cc1799a2ab90d75e5b238ce6c12" translate="yes" xml:space="preserve">
          <source>Let's say you need an empty directory named &lt;em&gt;tmp&lt;/em&gt; :</source>
          <target state="translated">&lt;em&gt;tmp&lt;/em&gt;という名前の空のディレクトリが必要だとします。</target>
        </trans-unit>
        <trans-unit id="dce834c48c9c506ecf25445f132f1074f7c14cdb" translate="yes" xml:space="preserve">
          <source>Making &lt;a href=&quot;https://stackoverflow.com/users/554807/greenasjade&quot;&gt;@GreenAsJade&lt;/a&gt;'s comment persistent:</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/users/554807/greenasjade&quot;&gt;@GreenAsJade&lt;/a&gt;のコメントを永続化する：</target>
        </trans-unit>
        <trans-unit id="6d48ddee3eda342f20f214a0de35f6e8991c5e24" translate="yes" xml:space="preserve">
          <source>Many have already answered this question. Just adding a PowerShell version here.</source>
          <target state="translated">この質問にはすでに多くの方が回答しています。ここにPowerShell版を追加しただけです。</target>
        </trans-unit>
        <trans-unit id="bc06c8663b818722cd6a2623f281d92d7c20ea09" translate="yes" xml:space="preserve">
          <source>Many users suggest:</source>
          <target state="translated">多くのユーザーが提案しています。</target>
        </trans-unit>
        <trans-unit id="718082bfabee7c4536bec0a547e963a64c95428c" translate="yes" xml:space="preserve">
          <source>Maybe adding an empty directory seems like it would be the &lt;em&gt;path of least resistance&lt;/em&gt; because you have scripts that expect that directory to exist (maybe because it is a target for generated binaries).  Another approach would be to &lt;strong&gt;modify your scripts to create the directory as needed&lt;/strong&gt;.</source>
          <target state="translated">空のディレクトリの追加は、そのディレクトリが存在することを期待するスクリプトがあるため（おそらく生成されたバイナリのターゲットであるため）、 &lt;em&gt;抵抗が最も少ないパスの&lt;/em&gt;ように思われます。 別のアプローチは&lt;strong&gt;、スクリプト&lt;/strong&gt;を&lt;strong&gt;変更して、必要に応じてディレクトリを作成することです&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="72f8680bc8b66e814ab7ca0955e95906b0631a1d" translate="yes" xml:space="preserve">
          <source>Moreover, any file placed under that path won't ever be noticed by Git, as it thinks they belong to some other repository. This is nasty as it can easily be overlooked!</source>
          <target state="translated">さらに、そのパスの下に置かれたファイルは、他のリポジトリに属していると考えているため、Git に気づかれることはありません。簡単に見落とされてしまうので、これは厄介です。</target>
        </trans-unit>
        <trans-unit id="c0df808058afe069050fc4e72ff7757ce6b52a1e" translate="yes" xml:space="preserve">
          <source>Myself, I have a shell script that I use to do this.  Name the script whatever you whish, and either add it somewhere in your include path, or reference it directly:</source>
          <target state="translated">私自身、シェルスクリプトを持っていて、それを使っています。スクリプトには好きな名前をつけて、インクルードパスのどこかに追加するか、直接参照してください。</target>
        </trans-unit>
        <trans-unit id="d68274ce8fcc52dfb6e43b10d00cf3ff4bf0710d" translate="yes" xml:space="preserve">
          <source>Naming it &lt;code&gt;.gitkeep&lt;/code&gt; makes it very clear and straightforward from the filename itself (and also &lt;em&gt;to other developers&lt;/em&gt;, which is good for a shared project and one of the core purposes of a Git repository) that this file is</source>
          <target state="translated">&lt;code&gt;.gitkeep&lt;/code&gt; という名前を付けると、ファイル名自体から（そして&lt;em&gt;他の開発者&lt;/em&gt;にとっても、共有ファイルおよびGitリポジトリの主要な目的の1つに適しているため）、このファイルは非常に明確かつ簡単になります。</target>
        </trans-unit>
        <trans-unit id="052b70f088afbe4cac5cfcc1c4886118408ce134" translate="yes" xml:space="preserve">
          <source>No message, no committed files.</source>
          <target state="translated">メッセージもコミットされたファイルもありません。</target>
        </trans-unit>
        <trans-unit id="4641e3dd557f4ca80cc44f9bd23b7d1da32610b6" translate="yes" xml:space="preserve">
          <source>Now the log directory will be included in the tree. It is super-useful when deploying, so you won't have to write a routine to make log directories.</source>
          <target state="translated">これでログディレクトリがツリーに含まれるようになりました。デプロイ時に超便利なので、ログディレクトリを作るためのルーチンを書く必要はありません。</target>
        </trans-unit>
        <trans-unit id="1ffbbb66f36c1145f1fd9d30958754c95d2721a4" translate="yes" xml:space="preserve">
          <source>Now, if you want a way to do this at the command line, in one fell swoop, while &lt;em&gt;inside&lt;/em&gt; the directory you want to add, you can execute:</source>
          <target state="translated">これで、コマンドラインでこれを行う方法が必要な場合は、追加したいディレクトリ&lt;em&gt;内&lt;/em&gt;で、次のコマンドを実行できます。</target>
        </trans-unit>
        <trans-unit id="38954e49f281e7ece90f63890439a704cc47c830" translate="yes" xml:space="preserve">
          <source>Now, you have a directory that gets created when commit is checked out. An interesting thing though is that if you look at the content of tree object of this file you'll get:</source>
          <target state="translated">これで、コミットがチェックアウトされたときに作成されるディレクトリができました。興味深いのは、このファイルのツリーオブジェクトの内容を見ると、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="54207b890566fccf2728625f4f05a22750569061" translate="yes" xml:space="preserve">
          <source>Of course this requires that the presence of the file won't cause your application to break.</source>
          <target state="translated">もちろん、これはファイルの存在によってアプリケーションが壊れないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="d68f11b73fd1a28163d179879538eafbd4057fce" translate="yes" xml:space="preserve">
          <source>On Linux, this creates an empty file named &lt;code&gt;.keep&lt;/code&gt;. For what it's worth, this name is agnostic to Git, whereas &lt;code&gt;.gitkeep&lt;/code&gt; would be specific to Git. Secondly, as another user has noted, the &lt;code&gt;.git&lt;/code&gt; prefix convention should be reserved for files and directories that Git itself uses.</source>
          <target state="translated">Linuxでは、これにより &lt;code&gt;.keep&lt;/code&gt; という名前の空のファイルが作成されます 。 価値があるのは、この名前はGitに依存しないこと &lt;code&gt;.gitkeep&lt;/code&gt; が、 .gitkeepはGitに固有のものです。 第2に、別のユーザーが指摘したように、 &lt;code&gt;.git&lt;/code&gt; プレフィックス規則は、Git自体が使用するファイルおよびディレクトリ用に予約する必要があります。</target>
        </trans-unit>
        <trans-unit id="b0ad216a803a00613e01c41fc295c139ede68d11" translate="yes" xml:space="preserve">
          <source>Placing a &lt;code&gt;README&lt;/code&gt; file or another file with some content in order to make the directory non-empty, or</source>
          <target state="translated">&lt;code&gt;README&lt;/code&gt; ファイルまたはコンテンツを含む別のファイルを配置して、ディレクトリを空にしない、または</target>
        </trans-unit>
        <trans-unit id="93eb92fdf4a152028fa81b55f63d32976354d372" translate="yes" xml:space="preserve">
          <source>Rather than &lt;em&gt;hacking a fake submodule into GIT&lt;/em&gt;, just &lt;strong&gt;add an empty real one&lt;/strong&gt;.</source>
          <target state="translated">&lt;em&gt;偽のサブモジュールをGITにハッキングするので&lt;/em&gt;はなく&lt;strong&gt;、空の実際の&lt;/strong&gt; &lt;em&gt;サブモジュールを&lt;/em&gt; &lt;strong&gt;追加する&lt;/strong&gt;だけです。</target>
        </trans-unit>
        <trans-unit id="bc6820d0a373db625fb96ec7de8c73508075f0c8" translate="yes" xml:space="preserve">
          <source>Reading &lt;a href=&quot;https://stackoverflow.com/a/8944077/277882&quot;&gt;@ofavre&lt;/a&gt;'s and &lt;a href=&quot;https://stackoverflow.com/a/27635349/277882&quot;&gt;@stanislav-bashkyrtsev&lt;/a&gt;'s answers using broken GIT submodule references to create the GIT directories, I'm surprised that nobody has suggested yet this simple amendment of the idea to make the whole thing sane and safe:</source>
          <target state="translated">壊れたGITサブモジュール参照を使用して&lt;a href=&quot;https://stackoverflow.com/a/27635349/277882&quot;&gt;@ofavre&lt;/a&gt;と@ stanislav-bashkyrtsevの回答を読んで GITディレクトリを作成すると、全体を正気で安全にするためのアイデアのこの単純な修正を誰もまだ提案していないことに驚いています。</target>
        </trans-unit>
        <trans-unit id="23cdc9f7361b0d5b570a36dcba55ff9b5cae4bca" translate="yes" xml:space="preserve">
          <source>See this &lt;a href=&quot;https://stackoverflow.com/a/7229996/1882064&quot;&gt;SOF answer&lt;/a&gt; for further info - which also explains why some people find the competing convention of adding a .gitignore file (as stated in many answers here) confusing.</source>
          <target state="translated">詳細については、この&lt;a href=&quot;https://stackoverflow.com/a/7229996/1882064&quot;&gt;SOF回答&lt;/a&gt;を参照してください。これは、.gitignoreファイルを追加するという競合する規則（多くの回答で説明されている）が混乱している理由を説明している理由も説明しています。</target>
        </trans-unit>
        <trans-unit id="d6621ff4ffc0ff6569560bb0a2efc73f49936c0c" translate="yes" xml:space="preserve">
          <source>Separation of concerns is always a good thing, and you can still add a &lt;code&gt;.gitignore&lt;/code&gt; to ignore unwanted files.</source>
          <target state="translated">懸念事項の分離は常に良いことであり、 &lt;code&gt;.gitignore&lt;/code&gt; を追加して不要なファイルを無視することもできます。</target>
        </trans-unit>
        <trans-unit id="592714d4edcb65cef2e2c3b218225cb036a5b740" translate="yes" xml:space="preserve">
          <source>So you have some reason why you need an empty directory in git. Put that reason in the README file. That way other developers (and future you) know why the empty directory needs to be there. You will also know that you can remove the empty directory when the problem requiring the empty directory has been solved.</source>
          <target state="translated">つまり、git に空のディレクトリが必要な理由があるということですね。その理由を README ファイルに書いておきましょう。そうすれば、他の開発者 (そして将来のあなた)が空のディレクトリが必要な理由を知ることができます。また、空のディレクトリを必要とする問題が解決したときに、空のディレクトリを削除できることもわかります。</target>
        </trans-unit>
        <trans-unit id="f4ddceacd9ef252bd2b26735610de3953bcaf160" translate="yes" xml:space="preserve">
          <source>So, since most of our developers already have &lt;a href=&quot;http://ant.apache.org/&quot;&gt;Ant&lt;/a&gt; installed, the first thing I thought of was to put together an Ant build file to accomplish this independently of the platform. This can still be found &lt;a href=&quot;https://github.com/mig82/gitkeep&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">ですから、ほとんどの開発者はすでに&lt;a href=&quot;http://ant.apache.org/&quot;&gt;Antを&lt;/a&gt;インストールしているので、私が最初に考えたのは、Antビルドファイルをまとめて、プラットフォームとは関係なくこれを実現することでした。 これはまだ&lt;a href=&quot;https://github.com/mig82/gitkeep&quot;&gt;ここにあります&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f7a7193ce04f935ddcdda5d451f93adfb51ede51" translate="yes" xml:space="preserve">
          <source>Some suggested workarounds</source>
          <target state="translated">いくつかの回避策を提案</target>
        </trans-unit>
        <trans-unit id="24d48e9605946eaa8d5b15a84c152609ade8789b" translate="yes" xml:space="preserve">
          <source>Sometimes you have to deal with bad written libraries or software, which need a &quot;real&quot; empty and existing directory. Putting a simple &lt;code&gt;.gitignore&lt;/code&gt; or &lt;code&gt;.keep&lt;/code&gt; might break them and cause a bug. The following might help in these cases, but no guarantee...</source>
          <target state="translated">「実際の」空の既存のディレクトリが必要な、不適切に作成されたライブラリまたはソフトウェアに対処する必要がある場合があります。 単純な &lt;code&gt;.gitignore&lt;/code&gt; または &lt;code&gt;.keep&lt;/code&gt; を置くと、それらが壊れてバグが発生する可能性があります。 以下はこれらの場合に役立つかもしれませんが、保証はありません...</target>
        </trans-unit>
        <trans-unit id="cf726d64819da79e232e9449d98f66861477c78f" translate="yes" xml:space="preserve">
          <source>Still not a native solution, but the best we probably can have without somebody getting their hands &lt;em&gt;really&lt;/em&gt;, &lt;em&gt;really&lt;/em&gt; dirty in the GIT codebase.</source>
          <target state="translated">まだネイティブソリューションではありませんが、GITコードベースで誰かが&lt;em&gt;本当に&lt;/em&gt;手を染めずにできる限り最高のソリューションです。</target>
        </trans-unit>
        <trans-unit id="cf4be5ed3cfbdabce8848b04a368438be916697c" translate="yes" xml:space="preserve">
          <source>Suppose you are in your repository.</source>
          <target state="translated">あなたのリポジトリにいるとします。</target>
        </trans-unit>
        <trans-unit id="e9440e7d8743e5013dcfa9058a0b91853acdb142" translate="yes" xml:space="preserve">
          <source>That's it! Your empty folder is in your index. All you have to do is commit.</source>
          <target state="translated">それだ!空のフォルダはあなたのインデックスにあります。あとはコミットするだけです。</target>
        </trans-unit>
        <trans-unit id="562923af0e1a8d102acfd05b50f5ffe1e3954ed4" translate="yes" xml:space="preserve">
          <source>That's it, check that in, and you have an empty, yet tracked, directory that you can track files in at some later time.</source>
          <target state="translated">これをチェックして、空の、しかし追跡されたディレクトリを作成して、後でファイルを追跡することができます。</target>
        </trans-unit>
        <trans-unit id="a953cbe252f4b95d3c8d893ebb5a8f6698c5ae93" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://en.wikipedia.org/wiki/Ruby_on_Rails&quot;&gt;Ruby on Rails&lt;/a&gt; log folder creation way:</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Ruby_on_Rails&quot;&gt;Ruby on Rails&lt;/a&gt;ログフォルダーの作成方法：</target>
        </trans-unit>
        <trans-unit id="a065a9784ab6e7bdd148b461bc6d4ab1e93e44a6" translate="yes" xml:space="preserve">
          <source>The empty tree SHA-1 can be found by creating a new empty Git repository, &lt;code&gt;cd&lt;/code&gt; into it and issue &lt;code&gt;git write-tree&lt;/code&gt;, which outputs the empty tree SHA-1.</source>
          <target state="translated">空のツリーSHA-1を見つけるには、新しい空のGitリポジトリを作成し、そこに &lt;code&gt;cd&lt;/code&gt; して、 &lt;code&gt;git write-tree&lt;/code&gt; を発行します 。これにより、空のツリーSHA-1が出力されます。</target>
        </trans-unit>
        <trans-unit id="307e8e768a7cd49c93d468cac94e2255ed611a4f" translate="yes" xml:space="preserve">
          <source>The file can be named and contain anything you want, but most people use an empty file named &lt;code&gt;.gitkeep&lt;/code&gt; (although some people prefer the VCS-agnostic &lt;code&gt;.keep&lt;/code&gt;).</source>
          <target state="translated">ファイルには任意の名前を付けて、必要なものを含めることができますが、ほとんどの人は &lt;code&gt;.gitkeep&lt;/code&gt; という名前の空のファイルを使用します（ただし、VCSに依存しない &lt;code&gt;.keep&lt;/code&gt; を好む人もいます ）。</target>
        </trans-unit>
        <trans-unit id="66f448f887e290279d30def41c251c99c2c81784" translate="yes" xml:space="preserve">
          <source>The format, as mentioned, is:</source>
          <target state="translated">形式は、前述の通りです。</target>
        </trans-unit>
        <trans-unit id="e742b2cbc27fb33e33cca9e1072fb5dc2e8c6c74" translate="yes" xml:space="preserve">
          <source>The logfiles can be kept out by issuing,</source>
          <target state="translated">ログファイルを発行することで、ログファイルを外に出さないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="bf29dff62fdb5ee3fc2a33b322ef5c3f576f3005" translate="yes" xml:space="preserve">
          <source>The prefixed &lt;code&gt;.&lt;/code&gt; marks it as a hidden file.</source>
          <target state="translated">接頭辞付き &lt;code&gt;.&lt;/code&gt; 隠しファイルとしてマークします。</target>
        </trans-unit>
        <trans-unit id="adde9d966c336b6cf829e4ff186e0bdbb1f17fdb" translate="yes" xml:space="preserve">
          <source>The real question is why do you need the empty directory in git? Usually you have some sort of build script that can create the empty directory before compiling/running. If not then make one. That is a far better solution than putting empty directories in git.</source>
          <target state="translated">本当の疑問は、なぜgitに空のディレクトリが必要なのかということです。通常は、コンパイルする前に空のディレクトリを作成できるようなビルドスクリプトを用意しているはずです。そうでなければ、それを作ってください。空のディレクトリをgitに置くよりもずっと良い解決策です。</target>
        </trans-unit>
        <trans-unit id="4e10a5f8b55bf16c877fb4a4db4028d201a75b3d" translate="yes" xml:space="preserve">
          <source>The reason I suggest keeping that one line in the file is that it gives the &lt;code&gt;.gitignore&lt;/code&gt; purpose. Otherwise, some one down the line may think to remove it.  It may help if you place a comment above the line.</source>
          <target state="translated">ファイルの1行を維持することをお勧めする理由は、 &lt;code&gt;.gitignore&lt;/code&gt; の目的を提供するためです。 そうでなければ、誰かがそれを削除しようと考えるかもしれません。 行の上にコメントを付けると役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="44dd342bd16c11fefd5f44220831e5efdbe41a34" translate="yes" xml:space="preserve">
          <source>Then do</source>
          <target state="translated">では、次のようにします。</target>
        </trans-unit>
        <trans-unit id="271ab51f7d49757a4117bf808028499958faf787" translate="yes" xml:space="preserve">
          <source>Then you add a broken symbolic link to this directory (but on any other case than the described use case above, please use a &lt;code&gt;README&lt;/code&gt; with an explanation):</source>
          <target state="translated">次に、壊れたシンボリックリンクをこのディレクトリに追加します（ただし、上記の使用例以外の場合は、説明付きの &lt;code&gt;README&lt;/code&gt; を使用してください）。</target>
        </trans-unit>
        <trans-unit id="cbe8b088983da206fee5cb9a90a567c09bef564f" translate="yes" xml:space="preserve">
          <source>Then you can commit descriptive README.md files (or blank files, doesn't matter, as long as you can target them uniquely like with the &lt;code&gt;*.md&lt;/code&gt; in this case) in each directory to ensure that the directories all remain part of the repo but the files (with extensions) are kept ignored. LIMITATION: &lt;code&gt;.&lt;/code&gt;'s are not allowed in the directory names!</source>
          <target state="translated">次に、各ディレクトリに説明的なREADME.mdファイル（または、この場合は &lt;code&gt;*.md&lt;/code&gt; のように一意にターゲットを設定できる限り、問題ではない空のファイル）をコミットして、すべてのディレクトリが常にrepoしかし、ファイル（拡張子付き）は無視されます。 制限： &lt;code&gt;.&lt;/code&gt; はディレクトリ名に使用できません！</target>
        </trans-unit>
        <trans-unit id="61c9cbd5afc1886a9d4c83796b2f8645d0725617" translate="yes" xml:space="preserve">
          <source>Then you don't have to get the order right the way that you have to do in m104's &lt;a href=&quot;https://stackoverflow.com/a/180917/32453&quot;&gt;solution&lt;/a&gt;.</source>
          <target state="translated">次に、m104の&lt;a href=&quot;https://stackoverflow.com/a/180917/32453&quot;&gt;ソリューションで&lt;/a&gt;行う必要がある方法で正しい順序を取得する必要はありません。</target>
        </trans-unit>
        <trans-unit id="4738c75f9da892a390366657d2ab91d093af9b84" translate="yes" xml:space="preserve">
          <source>There is a rant out there somewhere I read once.</source>
          <target state="translated">以前読んだどこかで暴言が出ています。</target>
        </trans-unit>
        <trans-unit id="26fa8fd7ec96a6040db82979ba4051519106b223" translate="yes" xml:space="preserve">
          <source>There is no need to further alter your &lt;code&gt;.gitignore&lt;/code&gt; or decentralise by creating a new &lt;code&gt;.gitignore&lt;/code&gt; for each new directory. Probably not the smartest solution but is terse gitignore-wise and always works for me. Nice and simple! ;)</source>
          <target state="translated">新しいディレクトリごとに新しい &lt;code&gt;.gitignore&lt;/code&gt; を作成して、 &lt;code&gt;.gitignore&lt;/code&gt; をさらに変更したり分散化したりする必要はありません。 おそらく最も賢い解決策ではありませんが、簡潔なgitignore-wiseであり、常に私のために機能します。 素敵でシンプル！ ;）</target>
        </trans-unit>
        <trans-unit id="e4a770f2fd29b2be505353071c334d0fd6d58785" translate="yes" xml:space="preserve">
          <source>There's no way to get Git to track directories, so the only solution is to add a placeholder file within the directory that you want Git to track.</source>
          <target state="translated">Git にディレクトリを追跡させる方法はありませんので、Git に追跡させたいディレクトリの中にプレースホルダファイルを追加するしかありません。</target>
        </trans-unit>
        <trans-unit id="1ae5f2188a715c59168ab614b7195164558364d0" translate="yes" xml:space="preserve">
          <source>This also gives the benefit that files in that directory won't show up as &quot;untracked&quot; when you do a git status.</source>
          <target state="translated">これは、git の状態を確認したときにそのディレクトリにあるファイルが &quot;untracked&quot; として表示されないようにするという利点もあります。</target>
        </trans-unit>
        <trans-unit id="1d51a99a1263426f38791134a8084992fd3d9699" translate="yes" xml:space="preserve">
          <source>This commands shows an empty result, since no files are present in this directory. So most applications, which get all files in a directory usually do not see this link, at least if they do a &quot;file exists&quot; or a &quot;is readable&quot;. Even some scripts will not find any files there:</source>
          <target state="translated">このコマンドは、このディレクトリにファイルが存在しないので、空の結果を示します。だから、ディレクトリ内のすべてのファイルを取得するほとんどのアプリケーションは、通常、少なくとも彼らは &quot;ファイルが存在する &quot;または &quot;読み取り可能である &quot;を行う場合は、このリンクを参照してくださいません。いくつかのスクリプトでさえ、そこにあるファイルを見つけることができません。</target>
        </trans-unit>
        <trans-unit id="941a2713b26907b0edfc9326db1fe8fd6d6259ce" translate="yes" xml:space="preserve">
          <source>This is in PHP, but I am sure most languages support the same functionality, and because the creation of the folders is taken care of by the application, the folders will always be there.</source>
          <target state="translated">これはPHPでの話ですが、ほとんどの言語が同じ機能をサポートしていると思いますし、フォルダの作成はアプリケーションが面倒を見てくれるので、フォルダは常にそこにあります。</target>
        </trans-unit>
        <trans-unit id="0231a3e6089a1a461ba784b7f40b45deb15617c7" translate="yes" xml:space="preserve">
          <source>This is why I decided to write an open source tool which can manage the creation/deletion of such placeholder files automatically. It is written for .NET platform and runs under Mono (.NET for Linux) and Windows.</source>
          <target state="translated">そこで、このようなプレースホルダファイルの作成・削除を自動的に管理できるオープンソースツールを書くことにしました。これは.NETプラットフォーム用に書かれており、Mono (.NET for Linux)とWindowsで動作します。</target>
        </trans-unit>
        <trans-unit id="0ff65b1e79038cf9e8c142a884be4f581f2e90a5" translate="yes" xml:space="preserve">
          <source>This solution is short and apparently works fine (&lt;strong&gt;see the EDIT!&lt;/strong&gt;), but it is not that easy to remember...</source>
          <target state="translated">この解決策は短く、明らかにうまく機能します（ &lt;strong&gt;編集を参照してください&lt;/strong&gt; ）が、覚えるのはそれほど簡単ではありません...</target>
        </trans-unit>
        <trans-unit id="8669dd39694b308e5b298072467437705670849e" translate="yes" xml:space="preserve">
          <source>This will add a folder and a file &lt;code&gt;.submodules&lt;/code&gt;. Commit a change.</source>
          <target state="translated">これにより、フォルダーとファイル &lt;code&gt;.submodules&lt;/code&gt; が追加されます。 変更をコミットします。</target>
        </trans-unit>
        <trans-unit id="447b2024267dea2031844c6f68742d0c73587964" translate="yes" xml:space="preserve">
          <source>To add an empty directory to you GIT repo:</source>
          <target state="translated">空のディレクトリをGITレポに追加します。</target>
        </trans-unit>
        <trans-unit id="490916f50c4d5acc4a001cfc2ae3064c52b31c17" translate="yes" xml:space="preserve">
          <source>To add the ignored file, use a parameter to force it:</source>
          <target state="translated">無視されたファイルを追加するには、パラメータを使って強制的に追加します。</target>
        </trans-unit>
        <trans-unit id="b5b5dd30965da188d3bdbf913bf64ed36eb60fb6" translate="yes" xml:space="preserve">
          <source>To convert all existing empty directories to submodules:</source>
          <target state="translated">既存のすべての空のディレクトリをサブモジュールに変換します。</target>
        </trans-unit>
        <trans-unit id="d8c3c4fd1ad227759ac5eda9bde9680891d85369" translate="yes" xml:space="preserve">
          <source>To create placeholder READMEs in every empty directory:</source>
          <target state="translated">空のディレクトリごとにプレースホルダ README を作成する。</target>
        </trans-unit>
        <trans-unit id="d059071611973c155c1fa728cc1dc8d54a784477" translate="yes" xml:space="preserve">
          <source>To ignore everything in the directory except the README file put the following lines in your &lt;code&gt;.gitignore&lt;/code&gt;:</source>
          <target state="translated">READMEファイルを除くディレクトリ内のすべてを無視するには、次の行を &lt;code&gt;.gitignore&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="8d5ad49ffa75003ce93790e45a213bfc2c5568dc" translate="yes" xml:space="preserve">
          <source>To ignore files in this directory, you can add it in your root &lt;code&gt;.gitignore&lt;/code&gt;:</source>
          <target state="translated">このディレクトリのファイルを無視するには、ルート &lt;code&gt;.gitignore&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="4d28181251c8e026869f72e94fcb9f913bb43572" translate="yes" xml:space="preserve">
          <source>To list every README after they are already created:</source>
          <target state="translated">既に作成されているREADMEを一覧表示する。</target>
        </trans-unit>
        <trans-unit id="eb5231ed99174cb588bedfa581b7186849bdd9e4" translate="yes" xml:space="preserve">
          <source>To list every empty directory use the following command:</source>
          <target state="translated">すべての空のディレクトリをリストアップするには、次のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="f5fd9c123a60713e27942ff28cd8c0c830fcdd51" translate="yes" xml:space="preserve">
          <source>Type the command and then enter the second line. Press</source>
          <target state="translated">コマンドを入力し、2 行目に入ります。を押してください。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="ffd1db763848f4c4472ac7f7473013edf19585c9" translate="yes" xml:space="preserve">
          <source>Use an &lt;em&gt;empty&lt;/em&gt; file called &lt;code&gt;.gitkeep&lt;/code&gt; in order to force the presence of the folder in the versioning system.</source>
          <target state="translated">バージョニングシステムにフォルダを強制的に存在させるには、 &lt;code&gt;.gitkeep&lt;/code&gt; という&lt;em&gt;空の&lt;/em&gt;ファイルを使用します。</target>
        </trans-unit>
        <trans-unit id="cddf6b9a46a0454ba89ee38e73b711678e2deb70" translate="yes" xml:space="preserve">
          <source>When you add a &lt;code&gt;.gitignore&lt;/code&gt; file, if you are going to put any amount of content in it (that you want Git to ignore) you might want to add a single line with just an asterisk &lt;code&gt;*&lt;/code&gt; to make sure you don't add the ignored content accidentally.</source>
          <target state="translated">&lt;code&gt;.gitignore&lt;/code&gt; ファイルを追加するときに、Gitに無視させたいコンテンツをいくらか入れようとする場合は、アスタリスク &lt;code&gt;*&lt;/code&gt; だけの1行を追加して、誤ってコンテンツを無視しました。</target>
        </trans-unit>
        <trans-unit id="fe8fd8f26e88b908b2a3b55d4634c460d8e2a8ec" translate="yes" xml:space="preserve">
          <source>When you want to clean up your source tree you can just:</source>
          <target state="translated">ソースツリーをきれいにしたいときは</target>
        </trans-unit>
        <trans-unit id="eeadc9a1aaa0db3bc40739107087ee919a727078" translate="yes" xml:space="preserve">
          <source>While &lt;em&gt;both solutions surely work&lt;/em&gt; I find them inconsistent with a meaningful approach to Git versioning.</source>
          <target state="translated">&lt;em&gt;どちらのソリューションも確かに機能し&lt;/em&gt;ますが、Gitバージョニングへの有意義なアプローチとは矛盾します。</target>
        </trans-unit>
        <trans-unit id="b62d1c6896a552b6058f125d41d2a8a506cf5359" translate="yes" xml:space="preserve">
          <source>Why are you supposed to put bogus files or READMEs that maybe you don't really want in your project?</source>
          <target state="translated">あなたのプロジェクトには多分本当に必要ないであろうインチキなファイルやREADMEを入れることになっているのはなぜですか?</target>
        </trans-unit>
        <trans-unit id="b3cc7336ea3346a09abac426eb677ad323e9fdd1" translate="yes" xml:space="preserve">
          <source>Why use &lt;code&gt;.gitignore&lt;/code&gt; to do a thing (&lt;em&gt;keeping&lt;/em&gt; files) that is the very opposite of what it's meant for (&lt;em&gt;excluding&lt;/em&gt; files), even though it is possible?</source>
          <target state="translated">可能 &lt;code&gt;.gitignore&lt;/code&gt; が、 .gitignoreを使用して（ファイル&lt;em&gt;を除外する&lt;/em&gt; ）の目的とは正反対のこと（ファイル&lt;em&gt;を除外&lt;/em&gt;すること）を行うのはなぜですか？</target>
        </trans-unit>
        <trans-unit id="103215cec6138a09084b9458c3ce747f188a10b4" translate="yes" xml:space="preserve">
          <source>Why would we need empty versioned folders</source>
          <target state="translated">なぜ空のバージョンのフォルダが必要なのか</target>
        </trans-unit>
        <trans-unit id="4ce5d0388c01b6cedd52787992f8c7a955244236" translate="yes" xml:space="preserve">
          <source>With this solution you are able to commit a empty folder, for example &lt;code&gt;/log&lt;/code&gt;, &lt;code&gt;/tmp&lt;/code&gt; or &lt;code&gt;/cache&lt;/code&gt; and the folder will stay empty.</source>
          <target state="translated">このソリューションでは、 &lt;code&gt;/log&lt;/code&gt; 、 &lt;code&gt;/tmp&lt;/code&gt; 、 &lt;code&gt;/cache&lt;/code&gt; などの空のフォルダーをコミットでき、フォルダーは空のままになります。</target>
        </trans-unit>
        <trans-unit id="f23151da0deaa4d23f72fa98790c48326765298a" translate="yes" xml:space="preserve">
          <source>With this, you can either execute it from within the directory you wish to add, or reference the directory as it's first and only parameter:</source>
          <target state="translated">これにより、追加したいディレクトリ内から実行するか、ディレクトリを最初の唯一のパラメータとして参照することができます。</target>
        </trans-unit>
        <trans-unit id="4aec0f970702275a4ff389c3481cbd12213f0065" translate="yes" xml:space="preserve">
          <source>You can fill up all of these directories with xml/images files or whatever and add more directories under &lt;code&gt;/app/data/&lt;/code&gt; over time as the storage needs for your app develop (with the README.md files serving to burn in a description of what each storage directory is for exactly).</source>
          <target state="translated">これらのディレクトリをすべてxml / imagesファイルなどで埋め、 &lt;code&gt;/app/data/&lt;/code&gt; 下にディレクトリを追加し、アプリのストレージニーズが発展するにつれて（README.mdファイルを使用して、各ストレージディレクトリは正確に使用されます）。</target>
        </trans-unit>
        <trans-unit id="368ecf61c201184ca1eca5a09d4b430bba4475ac" translate="yes" xml:space="preserve">
          <source>You can ignore all of your generated files by adding the following to your root .gitignore:</source>
          <target state="translated">rootの.gitignoreに以下を追加することで、生成されたファイルをすべて無視することができます。</target>
        </trans-unit>
        <trans-unit id="db3768f3cbb474672a2f790a2f3a93556c86a883" translate="yes" xml:space="preserve">
          <source>You can save this code as create_readme.php and run the &lt;a href=&quot;http://en.wikipedia.org/wiki/PHP&quot;&gt;PHP&lt;/a&gt; code from the root directory of your Git project.</source>
          <target state="translated">このコードをcreate_readme.phpとして保存し、Gitプロジェクトのルートディレクトリから&lt;a href=&quot;http://en.wikipedia.org/wiki/PHP&quot;&gt;PHP&lt;/a&gt;コードを実行できます。</target>
        </trans-unit>
        <trans-unit id="35e7674c15b829e3da47e9c91c17c0b45bbbcbc4" translate="yes" xml:space="preserve">
          <source>You can say &quot;&lt;code&gt;git add &amp;lt;dir&amp;gt;&lt;/code&gt;&quot; and it
  will add files in there.</source>
          <target state="translated">「 &lt;code&gt;git add &amp;lt;dir&amp;gt;&lt;/code&gt; 」と言うと、そこにファイルが追加されます。</target>
        </trans-unit>
        <trans-unit id="6cfdb4128821ccf4042227c42e6a3ce5eff4c3ec" translate="yes" xml:space="preserve">
          <source>You can't and unfortunately will never be able to. This is a decision made by Linus Torvald himself. He knows what's good for us.</source>
          <target state="translated">あなたにはできないし、残念ながら今後もできないでしょう。これはライナス・トーバルド自身が決めたことだ。彼は私たちにとって何が良いかを知っている。</target>
        </trans-unit>
        <trans-unit id="96422f8128e7582ea39f5a813f28720ea292d5ce" translate="yes" xml:space="preserve">
          <source>You can't.  See the &lt;a href=&quot;https://git.wiki.kernel.org/index.php/GitFaq#Can_I_add_empty_directories.3F&quot;&gt;Git FAQ&lt;/a&gt;.</source>
          <target state="translated">できません。 &lt;a href=&quot;https://git.wiki.kernel.org/index.php/GitFaq#Can_I_add_empty_directories.3F&quot;&gt;Git FAQを&lt;/a&gt;参照してください 。</target>
        </trans-unit>
        <trans-unit id="22ca8c67077a960213c9270a133c31b59f499c76" translate="yes" xml:space="preserve">
          <source>You can't. This is an intentional design decision by the Git maintainers. Basically, the purpose of a Source Code Management System like Git is managing source code and empty directories aren't source code. Git is also often described as a content tracker, and again, empty directories aren't content (quite the opposite, actually), so they are not tracked.</source>
          <target state="translated">できません。これはGitメンテナによる意図的な設計上の決定です。基本的に、Gitのようなソースコード管理システムの目的はソースコードの管理であり、空のディレクトリはソースコードではありません。また、Git はコンテンツトラッカーとしてもよく説明されますが、空のディレクトリはコンテンツではないので(実際にはその逆です)、トラッキングされることはありません。</target>
        </trans-unit>
        <trans-unit id="803b77036ef8698000e9339edcd62fd703594653" translate="yes" xml:space="preserve">
          <source>You could always put a README file in the directory with an explanation of why you want this, otherwise empty, directory in the repository.</source>
          <target state="translated">リポジトリ内の空のディレクトリにしたい理由を説明した README ファイルをディレクトリに入れることができます。</target>
        </trans-unit>
        <trans-unit id="dcee5b95aba60fafa22b894110eb63499a6ee4d7" translate="yes" xml:space="preserve">
          <source>You have to live with the workarounds...unfortunately.</source>
          <target state="translated">回避策を考えて生きていかなければなりませんね...残念ながら。</target>
        </trans-unit>
        <trans-unit id="03f9d41dc6b8f480026623afffc50b5a20a7c5da" translate="yes" xml:space="preserve">
          <source>You should be able to recreate this exact commit using (in an empty directory):</source>
          <target state="translated">(空のディレクトリにある)を使って、このコミットを再作成することができるはずです。</target>
        </trans-unit>
        <trans-unit id="9487aa6e228be403f7931650f0ee33843eff1948" translate="yes" xml:space="preserve">
          <source>You use a file that has the &lt;em&gt;single&lt;/em&gt; purpose of keeping the folder. You don't put there any info you don't want to put.</source>
          <target state="translated">フォルダーを保持するという&lt;em&gt;単一の&lt;/em&gt;目的を持つファイルを使用します。 あなたが置きたくない情報をそこに置いてはいけません。</target>
        </trans-unit>
        <trans-unit id="50e789a4519a8bfb4201a8cf539afda28392b287" translate="yes" xml:space="preserve">
          <source>Your &lt;code&gt;.gitignore&lt;/code&gt; file would look like:</source>
          <target state="translated">&lt;code&gt;.gitignore&lt;/code&gt; ファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="a357a0b3b6bb01e41a042b584904f6b12375f3f1" translate="yes" xml:space="preserve">
          <source>and then</source>
          <target state="translated">而して</target>
        </trans-unit>
        <trans-unit id="c6f38c96c5ac4615934334f5e2718109ae1691d4" translate="yes" xml:space="preserve">
          <source>but you probably knew that.</source>
          <target state="translated">でも、あなたは知っていたでしょう。</target>
        </trans-unit>
        <trans-unit id="31a8afc956c3b38d471b6f69f007533194f0e239" translate="yes" xml:space="preserve">
          <source>fatal: Not a valid object name
  b64338b90b4209263b50244d18278c0999867193</source>
          <target state="translated">致命的:有効なオブジェクト名ではありません b64338b90b4209263b50244d18278c0999867193</target>
        </trans-unit>
        <trans-unit id="7ed76119035d1dc7e53e02cf1cd68c1b13efd79d" translate="yes" xml:space="preserve">
          <source>related to the above, some projects &lt;em&gt;won't work without some folders&lt;/em&gt; (which is often a hint of a poorly designed project, but it's a frequent real-world scenario and maybe there could be, say, permission problems to be addressed).</source>
          <target state="translated">上記に関連して、一部のプロジェクト&lt;em&gt;は一部のフォルダーなしでは機能しません&lt;/em&gt; （これは多くの場合、設計が不十分なプロジェクトのヒントですが、現実のシナリオで頻繁に発生し、おそらく、アクセス許可の問題が発生する可能性があります）。</target>
        </trans-unit>
        <trans-unit id="87b56ec500c49bd553a7cff70a8680d17089dd52" translate="yes" xml:space="preserve">
          <source>scaffolding a &lt;strong&gt;predefined folder structure&lt;/strong&gt;, making it available to every user/contributor of the repository; or, as a specialized case of the above, creating a folder for &lt;strong&gt;temporary files&lt;/strong&gt;, such as a &lt;code&gt;cache/&lt;/code&gt; or &lt;code&gt;logs/&lt;/code&gt; directories, where we want to provide the folder but &lt;code&gt;.gitignore&lt;/code&gt; its contents</source>
          <target state="translated">&lt;strong&gt;事前定義されたフォルダ構造を&lt;/strong&gt;足場にして、リポジトリのすべてのユーザー/寄稿者が利用できるようにします。 または、上記の特殊なケースとして、 &lt;code&gt;cache/&lt;/code&gt; や &lt;code&gt;logs/&lt;/code&gt; ディレクトリなどの&lt;strong&gt;一時ファイル&lt;/strong&gt;用のフォルダーを作成します。ここでは、フォルダーを提供しますが、その内容は &lt;code&gt;.gitignore&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="a9dc3140cab3fe6f3324bc773106f6dea351ca23" translate="yes" xml:space="preserve">
          <source>to terminate your input.
Note: the format is &lt;em&gt;mode&lt;/em&gt; [SPACE] &lt;em&gt;type&lt;/em&gt; [SPACE] SHA-1hash &lt;strong&gt;[TAB]&lt;/strong&gt; path (the tab is important, the answer formatting does not preserve it).</source>
          <target state="translated">入力を終了します。 注：形式は&lt;em&gt;モード&lt;/em&gt; [スペース] &lt;em&gt;タイプ&lt;/em&gt; [スペース] SHA-1ハッシュ&lt;strong&gt;[&lt;/strong&gt;タブ&lt;strong&gt;]&lt;/strong&gt;パスです（タブは重要です。回答のフォーマットでは保持されません）。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
