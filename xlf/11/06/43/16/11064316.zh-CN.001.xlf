<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/11064316">
    <body>
      <group id="11064316">
        <trans-unit id="091d7604521f03fbab270293c84abd2e70da5fb8" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are &lt;strong&gt;composite objects&lt;/strong&gt; that contain properties that consist of application data as well as properties that are used by application code.  This characteristic is crucial when designing the view model for reusability and is discussed in the examples below.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;是&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;复合对象&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，其包含由应用程序数据以及应用程序代码使用的属性组成的属性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在设计可重用性的视图模型时，此特性至关重要。下面的示例对此进行了讨论。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71c8fcb4369ecbce1cadce629ab789c7a425003c" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are business objects &amp;ndash; their definition is dependent on application data.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;是业务对象&amp;ndash;它们的定义取决于应用程序数据。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8e5133166dfde93ad82f68548991bff539b30864" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are the single source of data used to render a page or screen.  Usually this means that a view model will expose every property that any control on the page will need to render itself correctly.  Making the view model the single source of data for the view greatly improves its capability and value for unit testing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;是用于呈现页面或屏幕的单一数据源。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通常，这意味着视图模型将公开页面上任何控件正确呈现其自身所需的每个属性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使视图模型成为视图的单一数据源可以极大地提高其功能和单元测试的价值。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="02b2e16664ca73e1abe6e37f7febb336eece814d" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are written &amp;ldquo;per page&amp;rdquo; or &amp;ldquo;per screen&amp;rdquo;.  A unique View Model is typically written for every page or screen in an application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;写为&amp;ldquo;每页&amp;rdquo;或&amp;ldquo;每个屏幕&amp;rdquo;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通常为应用程序中的每个页面或屏幕编写一个唯一的视图模型。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4dadb08ae807a9a03438ec13b1f5b7f4e1802702" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Contain application code.  View Models usually contain methods that are called during rendering and when the user is interacting with the page.  This code typically relates to event handling, animation, visibility of controls, styling, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;包含应用程序代码。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图模型通常包含在渲染过程中以及用户与页面交互时调用的方法。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;此代码通常与事件处理，动画，控件的可见性，样式等相关。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f8dd38f2c3ef2267225a10c37937fb1e65b83bd5" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Contain code that calls business services for the purpose of retrieving data or sending it to a database server.  This code is often mistakenly placed in a controller. Calling business services from a controller usually limits the usefulness of the view model for unit testing.  To be clear, view models themselves should not contain business logic but should make calls to services which do contain business logic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;包含调用业务服务以获取数据或将其发送到数据库服务器的代码。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该代码通常被错误地放置在控制器中。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从控制器调用业务服务通常会限制视图模型对单元测试的有用性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;需要明确的是，视图模型本身不应包含业务逻辑，而应调用包含业务逻辑的服务。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="021c8e92e046cb7fb5232384ab062c9875b5cbfd" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Contain mostly properties. Code is typically limited to formatting data or converting to or from a DTO.  Presentation Models should not contain business logic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;主要包含属性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代码通常仅限于格式化数据或与DTO相互转换。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示模型不应包含业务逻辑。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="857491b6cd3a3ecb0e3f8827e94a51936304c24e" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often contain properties of a different base type than a DTO.  For example dollar amounts may be represented as strings so they can contain commas and a currency symbol.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;通常包含与DTO不同的基本类型的属性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如，美元金额可以表示为字符串，因此它们可以包含逗号和货币符号。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e22c1184a19f283ebf5e7adbf12c0f7a1715b41f" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often contain properties which are other view models for other pages or screens.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;通常包含属性，这些属性是其他页面或屏幕的其他视图模型。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="25911f773ca4593c19b1e48346c8399bb77a595a" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often defined by how they are used as well as their object characteristics.  In other words, a simple DTO that is used as the backing model for rendering a grid is in fact also a presentation model in the context of that grid.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;通常由它们的使用方式及其对象特征来定义。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;换句话说，用作渲染网格的支持模型的简单DTO实际上也是该网格上下文中的表示模型。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c6a66f7efdf4a5e06bab68ad2558579c130c863f" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often present a denormalized view of data.  That is, they often combine properties from multiple DTO&amp;rsquo;s.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;通常会显示非规范化的数据视图。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;也就是说，它们通常合并多个DTO的属性。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6e4898ca5f9d6eb2c49f1bea5369a60c4cf54965" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Primarily used for transporting data to and from a database.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;主要用于与数据库之间的数据传输。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e335886ac2f2cf3f381eaa744f2b290f0f4ce886" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties exactly or closely match fields on a specific table in a data store.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;属性与数据存储中特定表上的字段完全或紧密匹配。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c61f4a5d65b5e385b3d98c5edfd58bbe6c75219e" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties that are used to display application state such as error messages, user name, status, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;用于显示应用程序状态的属性，例如错误消息，用户名，状态等。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="44152c81772618111892f0b7395aac169c9b852d" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties used for data binding such as list objects and properties that hold intermediate data that is input by the user.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;用于数据绑定的属性，例如列表对象和保存用户输入的中间数据的属性。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="21d410d4b0bf8af1d102f651deae6feaf00cba49" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties used to format, display, stylize, or animate controls.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;用于格式化，显示，样式化或动画化控件的属性。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5aae7795624e8dca926efd2b235f5ecf57ae583d" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Usually contain properties only &amp;ndash; no code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;通常只包含属性-没有代码。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e1f255cb7e3440d6e3b86db25341f9d63f75478a" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Usually derive from a base class since most pages and screens share common properties.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;通常是从基类派生的，因为大多数页面和屏幕都具有相同的属性。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9227c0bb1dad45263adf473f0da3cd39ae90f89c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ASP.NET MVC view can't have more than one model so if we need to display properties from more than one models into the view, it is not possible. ViewModel serves this purpose.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ASP.NET MVC视图不能有多个模型，因此如果我们需要在视图中显示多个模型的属性，则不可能。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModel用于此目的。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="47ecad6905ac0c9527eeca8989f3ed9315b6069e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Composition over inheritance&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;组成重于继承&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6cac57bc3539db0f79006be49553f758c9944982" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View Model Composition&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;查看模型组成&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="23c62b9e31fb317d9e700732e0edb1adc0d493ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Data Transfer Objects a.k.a &amp;ldquo;Model&amp;rdquo;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数据传输对象又称&amp;ldquo;模型&amp;rdquo;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fcc90465fc1eb3567b153a345917c67232ee01d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Designing ViewModel&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;设计ViewModel&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dfd516553a0c9858f016c9102534da6d1fc06d58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit: I updated this answer on my Blog:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;编辑：我在我的博客上更新了此答案：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4e6d967aabeacd3870e306f89d67a1c8ccd3c930" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Presentation Models&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;展示模型&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="edc563f12ca05992aa529daff2c5530df492d181" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Presenting the viewmodel in the view&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在视图中呈现视图模型&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="57f268bfc3a39fc05382bd8b6501103c2bad7346" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The key thing to remember is that the view model only represents the data that you want to use&lt;/strong&gt;, nothing else.  You can imagine all the unnecessary code and validation if you have a domain model with 30 properties and you only want to update a single value.  Given this scenario you would only have this one value/property in the view model and not all the properties that are in the domain object.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要记住的关键是，视图模型仅代表您要使用的数据&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，没有别的。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您有一个具有30个属性的域模型，并且只想更新一个值，则可以想象所有不必要的代码和验证。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这种情况下，您将在视图模型中仅拥有一个值/属性，而没有域对象中的所有属性。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2ce37be823ac6fcdb8d035e0cb1591c15610d45b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;View Models&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;查看模型&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="acd627ae1902dfff170bb19bfeb185edff1d043f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;View model&lt;/strong&gt; is a class that represents the data model used in a specific view. We could use this class as a model for a login page:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图模型&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是一个类，代表特定视图中使用的数据模型。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我们可以将此类用作登录页面的模型：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3eb7989fc7b3268a75e31973397bb4f2b77d2723" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Working with Action&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;采取行动&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="784698e6a41a9d10172d3f4ce6ee6685a991721c" translate="yes" xml:space="preserve">
          <source>@model ProjectName.Model.StudentViewModel</source>
          <target state="translated">@model ProjectName.Model.Model.StudentViewModel</target>
        </trans-unit>
        <trans-unit id="06a9eb888b55eaa767a102d8d7022d31558b556f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;view model&lt;/code&gt; represents the data that you want to display on your view/page, whether it be used for static text or for input values (like textboxes and dropdown lists) that can be added to the database (or edited). It is something different than your &lt;code&gt;domain model&lt;/code&gt;. It is a model for the view.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一个&lt;/font&gt;&lt;/font&gt; &lt;code&gt;view model&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代表要显示视图/页面上，无论是用于静态文本或输入值（如文本框和下拉列表），可添加到数据库中（或编辑）的数据。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它与您的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;domain model&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有所不同&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它是视图的模型。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7608e08d4f0b61ea5e48d5fd217b4a94edd98648" translate="yes" xml:space="preserve">
          <source>A Data Transfer Object (DTO) is a class with properties that match a table schema in a database.  DTO&amp;rsquo;s are named for their common usage for shuttling data to and from a data store.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数据传输对象（DTO）是一个类，其属性与数据库中的表模式匹配。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DTO以其在往返数据存储之间穿梭数据的常用用法而命名。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db643f1ec44d2c837e9ab61d91025bd7d3d53e82" translate="yes" xml:space="preserve">
          <source>A controller is responsible for the page flow</source>
          <target state="translated">一个控制器负责页面的流程</target>
        </trans-unit>
        <trans-unit id="e3b4707fbc3e3d5a32deeabab22085bbd5da453c" translate="yes" xml:space="preserve">
          <source>A lot of big examples, let me explain in clear and crispy way.</source>
          <target state="translated">很多大的例子,让我讲得清清楚楚,脆生生地解释一下。</target>
        </trans-unit>
        <trans-unit id="0d466d07d557affcf02c5d91f34f48707173caa3" translate="yes" xml:space="preserve">
          <source>A model is responsible for the business logic</source>
          <target state="translated">一个模型是对业务逻辑负责</target>
        </trans-unit>
        <trans-unit id="7c0ca4a31f487009bebc32f78ce8247e830d54b1" translate="yes" xml:space="preserve">
          <source>A presentation model is a &lt;em&gt;utility&lt;/em&gt; class that is used to render data on a screen or report.  Presentation models are typically used to model complex data structures that are composed from data from multiple DTO&amp;rsquo;s.  Presentation models often represent a denormalized view of data.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示模型是一种&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实用程序&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类，用于在屏幕或报表上呈现数据。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示模型通常用于对由多个DTO的数据组成的复杂数据结构进行建模。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示模型通常代表数据的非规范化视图。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="979814b66cb168384578069cfbe0cf257d7bd4fb" translate="yes" xml:space="preserve">
          <source>A view model is a conceptual model of data. Its use is to for example either get a subset or combine data from different tables.</source>
          <target state="translated">视图模型是一个数据的概念模型。它的用途是为了得到一个子集或组合不同表的数据。</target>
        </trans-unit>
        <trans-unit id="29517336bce9403bbabf349182e99b37661f6c22" translate="yes" xml:space="preserve">
          <source>A view model is similar to a presentation model in that is a backing class for rendering a view.  However it is very different from a Presentation Model or a DTO in how it is constructed.  View models often contain the same properties as presentation models and DTO&amp;rsquo;s and for this reason they are often confused one for the other.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图模型类似于表示模型，因为它是用于渲染视图的后备类。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，它的构造与Presentation Model或DTO完全不同。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图模型通常包含与表示模型和DTO相同的属性，因此，它们常常彼此混淆。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2d122dfbc586108e4d0e045c5a4088f267f77650" translate="yes" xml:space="preserve">
          <source>A view model might not only have data from one database table. It can combine data from another table. Take my example above about adding a new employee record. Besides adding just the first and last names you might also want to add the department of the employee. This list of departments will come from your &lt;code&gt;Departments&lt;/code&gt; table. So now you have data from the &lt;code&gt;Employees&lt;/code&gt; and &lt;code&gt;Departments&lt;/code&gt; tables in one view model. You will just then need to add the following two properties to your view model and populate it with data:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一个视图模型可能不仅具有来自一个数据库表的数据。它可以合并来自另一个表的数据。以上面关于添加新员工记录的示例为例。除了仅添加名字和姓氏之外，您可能还需要添加员工的部门。该部门列表将来自您的&amp;ldquo; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Departments&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表。因此，现在您可以&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在一个视图模型中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;获得&amp;ldquo; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Employees&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Departments&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表中的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数据&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。此时，您需要将以下两个属性添加到视图模型中，并用数据填充它：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="18421b8d98d053ede53aa47964692b02a912d66b" translate="yes" xml:space="preserve">
          <source>An example of a model in a web application could be:</source>
          <target state="translated">网络应用中的模型的一个例子可以是:</target>
        </trans-unit>
        <trans-unit id="8c5608853992951b4bd783c7430ce80a18111116" translate="yes" xml:space="preserve">
          <source>An example presentation model:</source>
          <target state="translated">一个例子的演示模型。</target>
        </trans-unit>
        <trans-unit id="12c9ef1f0ac8e4b4eaecd1d24444d26dcf26204d" translate="yes" xml:space="preserve">
          <source>And actions:</source>
          <target state="translated">和行动。</target>
        </trans-unit>
        <trans-unit id="32b125fff82d8b61b77572d85c31866f061d2d80" translate="yes" xml:space="preserve">
          <source>And with Data Annotations it might look this:</source>
          <target state="translated">而有了数据注释,它可能是这样的。</target>
        </trans-unit>
        <trans-unit id="ee07849c78e92b6c9ec11549edbd1c54d9e97b91" translate="yes" xml:space="preserve">
          <source>Another example of a view model and its retrieval: We want to display basic user data, his privileges and users name. We create a special view model, which contains only the required fields. We retrieve data from different entities from database, but the view is only aware of the view model class:</source>
          <target state="translated">另一个视图模型及其检索的例子。我们想显示用户的基本数据,他的权限和用户名。我们创建一个特殊的视图模型,它只包含所需的字段。我们从数据库中检索不同实体的数据,但视图模型类只知道视图模型类。</target>
        </trans-unit>
        <trans-unit id="c9a2a634871a0bacbbb2bcba04ceea845df0f23c" translate="yes" xml:space="preserve">
          <source>Another point, you don&amp;rsquo;t really need a view model for every action. If it is simple data then it would be fine to only use &lt;code&gt;EmployeeViewModel&lt;/code&gt;. If it is complex views/pages and they differ from each other then I would suggest you use separate view models for each.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;还有一点，您并不需要每个动作都需要一个视图模型。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果是简单数据，则仅使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;EmployeeViewModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;会很好&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果是复杂的视图/页面并且它们彼此不同，那么我建议您为每个视图/页面使用单独的视图模型。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30a807962c4d842911cca18dd735b9820c28317b" translate="yes" xml:space="preserve">
          <source>As stated earlier, view models are composite objects in that they combine application properties and business data properties on a single object.  Examples of commonly used application properties that are used on view models are:</source>
          <target state="translated">如前所述,视图模型是复合对象,因为它们将应用属性和业务数据属性结合在一个对象上。视图模型上常用的应用属性的例子有:。</target>
        </trans-unit>
        <trans-unit id="f13564fc793a8a2f2c5001293b80cd5b65cc8a6d" translate="yes" xml:space="preserve">
          <source>As you can see it only contains two of the properties. These two properties are also in the employee domain model.  Why is this you may ask?  &lt;code&gt;Id&lt;/code&gt; might not be set from the view, it might be auto generated by the Employee table.  And &lt;code&gt;DateCreated&lt;/code&gt; might also be set in the stored procedure or in the service layer of your application.  So &lt;code&gt;Id&lt;/code&gt; and &lt;code&gt;DateCreated&lt;/code&gt; are not needed in the view model. You might want to display these two properties when you view an employee&amp;rsquo;s details (an employee that has already been captured) as static text.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如您所见，它仅包含两个属性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这两个属性也在雇员域模型中。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可能会问为什么？ &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可能无法从视图中设置&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，它可能是由Employee表自动生成的。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而且&lt;/font&gt;&lt;/font&gt; &lt;code&gt;DateCreated&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;也可以在存储过程或应用程序的服务层中进行设置。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，视图模型中不需要&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;DateCreated&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当您以静态文本查看员工的详细信息（已被捕获的员工）时，可能要显示这两个属性。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34516062670ac1d4db45943e7dbe90a4d7d929e5" translate="yes" xml:space="preserve">
          <source>As you can see, a view model has many roles:</source>
          <target state="translated">如你所见,一个视图模型有很多作用。</target>
        </trans-unit>
        <trans-unit id="7f17218ceb9cb01e6e7e9e9aa432bc220eb9e92b" translate="yes" xml:space="preserve">
          <source>Assume we are writing a web application.  One of the requirements of the application design is that the page title, user name, and application name must be displayed on every page.  If we want to create a page to display a presentation order object, we may modify the presentation model as follows:</source>
          <target state="translated">假设我们正在编写一个网页应用程序。应用程序设计的一个要求是,每个页面上必须显示页面标题、用户名和应用程序名称。如果我们要创建一个页面来显示一个展示顺序对象,我们可以对展示模型进行如下修改。</target>
        </trans-unit>
        <trans-unit id="7463aba05ab71a5b6737ae5556ad6f86a21910e0" translate="yes" xml:space="preserve">
          <source>Characteristics of DTO&amp;rsquo;s:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DTO的特点：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="86f4c5a2ba2bb5bcef5863f95fddcf2f402f1d49" translate="yes" xml:space="preserve">
          <source>Characteristics of Presentation Models:</source>
          <target state="translated">呈现模式的特点。</target>
        </trans-unit>
        <trans-unit id="bcda80ff10e740640afce89952a9a0c497f395fe" translate="yes" xml:space="preserve">
          <source>Characteristics of View Models:</source>
          <target state="translated">视图模型的特点。</target>
        </trans-unit>
        <trans-unit id="7f7ca519ba25ddf1cdaa868e954528b1bb64bfd5" translate="yes" xml:space="preserve">
          <source>Database tables are usually normalized therefore DTO&amp;rsquo;s are usually normalized also.  This makes them of limited use for presenting data.  However, for certain simple data structures they often do quite well.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数据库表通常被规范化，因此DTO也通常被规范化。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这使得它们在呈现数据方面用途有限。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，对于某些简单的数据结构，它们通常做得很好。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9ae7f8fac70de032f0536b881084c08503cd96fb" translate="yes" xml:space="preserve">
          <source>Few examples of View Models are below</source>
          <target state="translated">以下是一些视图模型的例子</target>
        </trans-unit>
        <trans-unit id="0256f135a479d495b6f97309a130ec92b420fff0" translate="yes" xml:space="preserve">
          <source>Generally speaking, a view model is an object that contains all the properties and methods necessary to render a view. View model properties are often related to data objects such as customers and orders and in addition they also contain properties related to the page or application itself such as user name, application name etc. View models provide a convenient object to pass to a rendering engine to create a html page.  One of many reasons to use a view model is that view models provide a way to unit test certain presentation tasks such as handling user input, validating data, retrieving data for display, etc.</source>
          <target state="translated">一般来说,视图模型是一个包含渲染视图所需的所有属性和方法的对象。视图模型的属性通常与客户和订单等数据对象相关,此外,它们还包含与页面或应用程序本身相关的属性,如用户名、应用程序名称等。视图模型提供了一个方便的对象,可以传递给渲染引擎来创建一个HTML页面。使用视图模型的原因有很多,其中一个原因是视图模型提供了一种方法来对某些展示任务进行单元测试,如处理用户输入、验证数据、检索数据显示等。</target>
        </trans-unit>
        <trans-unit id="0ecc5f2f113be01ef1af7af6615d65e0b2559802" translate="yes" xml:space="preserve">
          <source>Here are two examples of what DTO&amp;rsquo;s might look like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是DTO可能看起来像的两个示例：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b5752eb70f697d164aee0d46a8a5e9ee4f7bfc27" translate="yes" xml:space="preserve">
          <source>Here is a comparison of Entity models (a.ka. DTO's a.ka. models), Presentation Models, and View Models.</source>
          <target state="translated">下面是实体模型(又名DTO模型)、演示模型、视图模型的比较。</target>
        </trans-unit>
        <trans-unit id="41fc4a53daff6828d2c36dc08d64604023be26b0" translate="yes" xml:space="preserve">
          <source>Here is a small example of &lt;a href=&quot;http://techfunda.com/howto/262/list-data-using-viewmodel&quot;&gt;List data using ViewModel&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是一个&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://techfunda.com/howto/262/list-data-using-viewmodel&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用ViewModel&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;List数据&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的小示例&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3bdb4b2444f19c2d0fe752fada6e32503c4b33b2" translate="yes" xml:space="preserve">
          <source>Here is a way we might re-factor the order presentation model such that it become a true view model and will be useful for displaying a single PresentationOrder object or a collection of PresentationOrder objects:</source>
          <target state="translated">这里有一种方法,我们可以重构订单显示模型,使其成为一个真正的视图模型,并且可以用于显示单个PresentationOrder对象或PresentationOrder对象的集合。</target>
        </trans-unit>
        <trans-unit id="0a2a50d3fa7ff4100b69d2f8236dcca6fdff8970" translate="yes" xml:space="preserve">
          <source>Hope this will be useful.</source>
          <target state="translated">希望能对你有所帮助。</target>
        </trans-unit>
        <trans-unit id="095b0b70b5a9cab69d8341323e70d4db8884f3cc" translate="yes" xml:space="preserve">
          <source>I am new to ASP.NET MVC. I have a problem with understanding the purpose of a ViewModel.</source>
          <target state="translated">我是ASP.NET MVC的新手。我在理解ViewModel的目的方面遇到了一个问题。</target>
        </trans-unit>
        <trans-unit id="9ae564fdfdc1add6404c350c63a78148f7b5df36" translate="yes" xml:space="preserve">
          <source>I didn't read all the posts but every answer seems to be missing one concept that really helped me &quot;get it&quot;...</source>
          <target state="translated">我没有看完所有的帖子,但每一个答案似乎都缺少一个概念,真正帮我 &quot;搞定 &quot;了。</target>
        </trans-unit>
        <trans-unit id="29fe05d20d4215aef9cfbc0a31e274894e167da3" translate="yes" xml:space="preserve">
          <source>I find myself using ViewModels to pass info into a view/form, and then transfering that data into a valid Model when the form posts back to the controller - also very handy for storing Lists(IEnumerable).</source>
          <target state="translated">我发现自己使用ViewModels将信息传递到viewform中,然后当表单发布回控制器时,将数据转换为有效的Model---这对于存储Lists(IEnumerable)也非常方便。</target>
        </trans-unit>
        <trans-unit id="9e24d7239899f9ca10ad64122efd148daa74a551" translate="yes" xml:space="preserve">
          <source>I hope this clears up any confusion that you had about view models and domain models.</source>
          <target state="translated">我希望这能澄清你对视图模型和域模型的困惑。</target>
        </trans-unit>
        <trans-unit id="24252c1ad530d2526ac3e27970bf24f54019eafb" translate="yes" xml:space="preserve">
          <source>If I get a good example about its working and explanation that would be better.</source>
          <target state="translated">如果我得到一个关于它的工作和解释的好例子,那就更好了。</target>
        </trans-unit>
        <trans-unit id="fb6471d4ff66132ef2b78aefd3fa0f22bdcfd22f" translate="yes" xml:space="preserve">
          <source>If a Model is akin to a database &lt;strong&gt;&lt;em&gt;Table&lt;/em&gt;&lt;/strong&gt;, then a ViewModel is akin to a database &lt;strong&gt;&lt;em&gt;View&lt;/em&gt;&lt;/strong&gt; - A view typically either returns small amounts of data from one table, or, complex sets of data from multiple tables (joins).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果一个模型是类似于一个数据库&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，然后一个ViewModel是类似于一个数据库&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -视图通常或者返回少量的数据从一个表，或者，复台从多个表（连接）数据的。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a33be26cdbdc7f223acadebc849211c36bba0ca8" translate="yes" xml:space="preserve">
          <source>If there are too few view-specific data and/or transformations, you can use the Model itself</source>
          <target state="translated">如果特定于视图的数据和转换太少,你可以使用模型本身</target>
        </trans-unit>
        <trans-unit id="4843531d7fc5288ce3a4f8b2b896b726f41768cc" translate="yes" xml:space="preserve">
          <source>If you have properties specific to the view, and not related to the DB/Service/Data store, it is a good practice to use ViewModels. Say, you want to leave a checkbox selected based on a DB field (or two) but the DB field itself isn't a boolean. While it is possible to create these properties in the Model itself and keep it hidden from the binding to data, you may not want to clutter the Model depending on the amount of such fields and transactions.</source>
          <target state="translated">如果你有特定于视图的属性,并且与DBServiceData存储无关,那么使用ViewModels是一个很好的做法。比如说,你想根据一个DB字段(或两个)留下一个选中的复选框,但DB字段本身并不是一个布尔值。虽然可以在Model本身中创建这些属性,并将其隐藏在与数据的绑定中,但根据这样的字段和事务的数量,你可能不想让Model杂乱无章。</target>
        </trans-unit>
        <trans-unit id="50975c3b578778119e55331e663bf658d0f95499" translate="yes" xml:space="preserve">
          <source>If you want to study code how to setup a &quot;Baseline&quot; web application with ViewModels I can advise to download this code on GitHub: &lt;a href=&quot;https://github.com/ajsaulsberry/BlipAjax&quot;&gt;https://github.com/ajsaulsberry/BlipAjax&lt;/a&gt;. I developed large enterprise applications. When you do this its problematic to setup a good architecture that handles all this &quot;ViewModel&quot; functionality. I think with BlipAjax you will have a very Good &quot;baseline&quot; to start with. Its just a simple website, but great in its simplicity. I like the way they used the English language to point at whats really needed in the application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您想研究如何使用ViewModels设置&amp;ldquo;基线&amp;rdquo; Web应用程序的代码，我建议您在GitHub上下载此代码：&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/ajsaulsberry/BlipAjax&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//github.com/ajsaulsberry/BlipAjax&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我开发了大型企业应用程序。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当您执行此操作时，设置一个好的架构来处理所有这些&amp;ldquo; ViewModel&amp;rdquo;功能将很成问题。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我认为从BlipAjax开始，您将有一个很好的&amp;ldquo;基线&amp;rdquo;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它只是一个简单的网站，但简单易用。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我喜欢他们使用英语指出应用程序中真正需要的方式。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6a3c97e12b9a1ccbdf3d8424c6609b00baa9196d" translate="yes" xml:space="preserve">
          <source>In MVC the process is split into 3 different responsibilities:</source>
          <target state="translated">在MVC中,这个过程被分成3个不同的职责。</target>
        </trans-unit>
        <trans-unit id="2d72e29ee7d99b2d5c4d674d77a200110c79124b" translate="yes" xml:space="preserve">
          <source>In ViewModel put only those fields/data that you want to display on 
the view/page.</source>
          <target state="translated">在ViewModel中,只放那些你想在viewpage上显示的字段数据。</target>
        </trans-unit>
        <trans-unit id="dce4a57fc1720e9f891e0f68e7fc4cdd117eef11" translate="yes" xml:space="preserve">
          <source>Let us say that you have an &lt;code&gt;Employee&lt;/code&gt; class that represents your employee domain model and it contains the following properties (unique identifier, first name, last name and date created):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;假设您有一个&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Employee&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类，它代表您的员工域模型，并且包含以下属性（唯一标识符，名字，姓氏和创建日期）：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="77a51cb2e7eadb97bd30de437ef458714cf33e08" translate="yes" xml:space="preserve">
          <source>Looking at the above two classes we can see that one way to think about a view model is that it is a presentation model that contains another presentation model as a property.  The top level presentation model (i.e. view model) contains properties that are relevant to the page or application while presentation model (property) contains properties that are relevant to application data.</source>
          <target state="translated">观察上面的两个类,我们可以看到,对视图模型的一种思考方式是,视图模型是一个展现模型,它包含了另一个展现模型作为属性。顶层的呈现模型(即视图模型)包含与页面或应用相关的属性,而呈现模型(属性)包含与应用数据相关的属性。</target>
        </trans-unit>
        <trans-unit id="e52b8b84a0ff20689f4296eecbe0ffcbf0e3d25a" translate="yes" xml:space="preserve">
          <source>MVC doesn't have a viewmodel: it has a model, view and controller. A viewmodel is part of MVVM (Model-View-Viewmodel). MVVM is derived from the Presentation Model and is popularized in WPF. There should also be a model in MVVM, but most people miss the point of that pattern completely and they will only have a view and a viewmodel. The model in MVC is similar to the model in MVVM.</source>
          <target state="translated">MVC没有viewmodel:它有一个模型、视图和控制器。视图模型是MVVM(Model-View-Viewmodel)的一部分。MVVM源于Presentation Model,在WPF中得到了普及。MVVM中也应该有一个模型,但大多数人完全错过了这个模式的意义,他们只会有一个view和viewmodel。MVC中的模型与MVVM中的模型类似。</target>
        </trans-unit>
        <trans-unit id="0007a747ce5507b06eab17bdb0e2de8aa9b638a7" translate="yes" xml:space="preserve">
          <source>MVC is not very suitable for web applications. It is a pattern introduced by Smalltalk for creating desktop applications. A web environment behaves completely different. It doesn't make much sense to copy a 40-year old concept from the desktop development and paste it into a web enviroment. However a lot of people think this is ok, because their application compiles and returns the correct values. That is, in my opinion, not enough to declare a certain design choice as ok.</source>
          <target state="translated">MVC并不是很适合于Web应用程序。它是Smalltalk引入的一种模式,用于创建桌面应用程序。而Web环境的行为完全不同。从桌面开发中复制一个40年的概念,并将其粘贴到web环境中并没有太大的意义。然而,很多人认为这样做是可以的,因为他们的应用程序会编译并返回正确的值。在我看来,这并不足以宣告某一个设计选择就可以了。</target>
        </trans-unit>
        <trans-unit id="c79b14feab9fbcbe613cc41f23adc6adae02bdd7" translate="yes" xml:space="preserve">
          <source>My answer is a bit lengthy but I think it is important to compare view models to other types of commonly used models to understand why they are different and why they are necessary.</source>
          <target state="translated">我的回答有点长,但我认为应该把视图模型和其他类型的常用模型进行比较,了解它们为什么不一样,为什么有必要。</target>
        </trans-unit>
        <trans-unit id="8eba30174b6f892cdd849bbf51e7c3fc9fec3d73" translate="yes" xml:space="preserve">
          <source>Now  we use this ViewModel in View</source>
          <target state="translated">现在我们在View中使用这个ViewModel</target>
        </trans-unit>
        <trans-unit id="659895d640bf5615ecde5842496c44e98b39693c" translate="yes" xml:space="preserve">
          <source>Now our implementations are effortless:</source>
          <target state="translated">现在,我们的实施是不费吹灰之力的。</target>
        </trans-unit>
        <trans-unit id="c33d9e59e291008f5fe3aa95e955d7c285c36b6a" translate="yes" xml:space="preserve">
          <source>Now we are able to access all the properties of StudentViewModel and inherited class in View.</source>
          <target state="translated">现在,我们可以访问StudentViewModel的所有属性和View中的继承类。</target>
        </trans-unit>
        <trans-unit id="591bd6b2b0e6e6bf85b2261e1527ffe7d3c0375f" translate="yes" xml:space="preserve">
          <source>Now we can simplify our PresentationOrderVM like this:</source>
          <target state="translated">现在我们可以像这样简化我们的PresentationOrderVM。</target>
        </trans-unit>
        <trans-unit id="96775092c82616d374ace6d7a2b5fd684f2a92d9" translate="yes" xml:space="preserve">
          <source>Now we create one class and can give it any name, but this format &quot;XyzViewModel&quot; will make it easier to understand. It is inheritance concept.
Now we create a third class with the following name:</source>
          <target state="translated">现在我们创建一个类,可以给它起任何名字,但这种格式 &quot;XyzViewModel &quot;会更容易理解。它是继承的概念。现在我们创建第三个类,名字如下。</target>
        </trans-unit>
        <trans-unit id="56f6d61294c2da51e88d3679b47bf298b7bdf469" translate="yes" xml:space="preserve">
          <source>Now we want to display records student's Name and Subject's Name in View (In MVC), but it's not possible to add more than one classes like:</source>
          <target state="translated">现在我们想在视图中显示学生的姓名和科目名称,但不能像MVC那样添加多个班级。</target>
        </trans-unit>
        <trans-unit id="d1b202eb2b094f90355bef37b9bc8b31b823c3c6" translate="yes" xml:space="preserve">
          <source>Presentation models are used &amp;ldquo;as needed&amp;rdquo; and &amp;ldquo;where needed&amp;rdquo; (whereas DTO&amp;rsquo;s are usually tied to the database schema).  A presentation model may be used to model data for an entire page, a grid on a page, or a dropdown on a grid on a page. Presentation models often contain properties that are other presentation models.  Presentation models are often constructed for a single-use purpose such as to render a specific grid on a single page.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示模型&amp;ldquo;按需&amp;rdquo;和&amp;ldquo;按需&amp;rdquo;使用（而DTO通常与数据库模式相关联）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示模型可以用于为整个页面，页面上的网格或页面上的网格上的下拉列表的数据建模。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示模型通常包含其他表示模型的属性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示模型通常是为一次性使用而构造的，例如在单个页面上呈现特定的网格。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8ffa8c608739cf046a5f4acf0ce72acebed316f4" translate="yes" xml:space="preserve">
          <source>Retrieval:</source>
          <target state="translated">Retrieval:</target>
        </trans-unit>
        <trans-unit id="ede225ff98051fa3d75a279416af02c28a4902d6" translate="yes" xml:space="preserve">
          <source>Since view reperesents the properties of the ViewModel, hence it is
easy for rendering and maintenance.</source>
          <target state="translated">由于视图再现了ViewModel的属性,因此便于渲染和维护。</target>
        </trans-unit>
        <trans-unit id="810649a5346ec9759ec597984cd267207680cc84" translate="yes" xml:space="preserve">
          <source>So in above Example Place and Category are the two different entities and PlaceCategory viewmodel is ViewModel which we can use on View.</source>
          <target state="translated">所以在上面的例子中,Place和Category是两个不同的实体,PlaceCategory的viewmodel是ViewModel,我们可以在View上使用。</target>
        </trans-unit>
        <trans-unit id="55668866ad670a5721cd3d4b303def755a5f1b9c" translate="yes" xml:space="preserve">
          <source>Take this &lt;code&gt;Id&lt;/code&gt; and pass it through to your repository layer, together with your first name and last name values.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将此&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;连同您的名字和姓氏值一起传递到您的存储库层。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c9c0379520c692636f1098086ee64944f61eb925" translate="yes" xml:space="preserve">
          <source>The controller can use it like this:</source>
          <target state="translated">控制器可以这样使用。</target>
        </trans-unit>
        <trans-unit id="dac2212ec6ea6f80a65cd7e4c4833a9d4ce8e740" translate="yes" xml:space="preserve">
          <source>The following examples show why the composite nature of view models is important and how we can best construct a View Model that efficient and reusable.</source>
          <target state="translated">下面的例子说明了为什么视图模型的复合性很重要,以及我们如何才能最好地构建一个高效、可重用的视图模型。</target>
        </trans-unit>
        <trans-unit id="fc04ddab544f11f980f798cc18d0d331fbd3fb78" translate="yes" xml:space="preserve">
          <source>The way of creating ViewModel is same as creating Model, the way of creating view for the Viewmodel is same as creating view for Model.</source>
          <target state="translated">创建ViewModel的方式与创建Model相同,创建ViewModel的方式与创建Model的视图相同。</target>
        </trans-unit>
        <trans-unit id="0b20cb6512cbb29a4429b759ba44cc79eb0ee528" translate="yes" xml:space="preserve">
          <source>This design might work&amp;hellip; but what if we want to create a page that will display a list of orders?  The PageTitle, UserName, and ApplicationName properties will be repeated and become unwieldy to work with.  Also, what if we want to define some page-level logic in the constructor of the class?  We can no longer do that if we create an instance for every order that will be displayed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这种设计可能有效&amp;hellip;&amp;hellip;但是，如果我们要创建一个显示订单列表的页面怎么办？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PageTitle，UserName和ApplicationName属性将重复出现，并且难以使用。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;另外，如果我们想在类的构造函数中定义一些页面级逻辑，该怎么办？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果我们为要显示的每个订单创建一个实例，我们将无法再这样做。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc3f1aa6ae9c1ae576ba8114ffcb4e62e943c55b" translate="yes" xml:space="preserve">
          <source>To list data from more than entities in a view page &amp;ndash; we can create a
View model and have properties of all the entities for which we want
to list data. Join those database entities and set View model
properties and return to the View to show data of different
entities in one tabular form</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要从视图页面中的多个实体中列出数据，我们可以创建一个View模型，并具有要为其列出数据的所有实体的属性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;加入这些数据库实体并设置View模型属性，然后返回到View以一种表格形式显示不同实体的数据&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d7a93bb744cd53b65dd6eabcf5a3c928eb5a7df3" translate="yes" xml:space="preserve">
          <source>To summarize, and to directly answer the question that is asked:</source>
          <target state="translated">归纳总结,直接回答所提出的问题。</target>
        </trans-unit>
        <trans-unit id="848ace57c7dbc4504e9902c434ff0470b55aa46b" translate="yes" xml:space="preserve">
          <source>Use a mapper when ViewModel become more complex.</source>
          <target state="translated">当ViewModel变得更复杂时,使用一个映射器。</target>
        </trans-unit>
        <trans-unit id="73ed7042fd0b7f5ee31ecb7dc68fc0d76ebd701f" translate="yes" xml:space="preserve">
          <source>Using this view model you can define the view (Razor view engine):</source>
          <target state="translated">使用这个视图模型,你可以定义视图(Razor视图引擎)。</target>
        </trans-unit>
        <trans-unit id="7d591ae4859bc24521fd94d00cecdd51f4e7a80b" translate="yes" xml:space="preserve">
          <source>Validation would thus be done only on &lt;code&gt;FirstName&lt;/code&gt; and &lt;code&gt;LastName&lt;/code&gt;.  Using &lt;a href=&quot;https://fluentvalidation.net/&quot;&gt;FluentValidation&lt;/a&gt; you might have validation like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，仅对&lt;/font&gt;&lt;/font&gt; &lt;code&gt;FirstName&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;LastName&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;进行验证&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://fluentvalidation.net/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;FluentValidation，&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可能会进行如下验证：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="087b229658bbe1662ba4cdcdb4873d59633cb3d2" translate="yes" xml:space="preserve">
          <source>View Model is a model class that can hold only those properties that is required for a view. It can also contains properties from more than one entities (tables) of the database. As the name suggests, this model is created specific to the View requirements.</source>
          <target state="translated">视图模型是一个模型类,它只能容纳一个视图所需要的属性。它也可以包含数据库中多个实体(表)的属性。顾名思义,这个模型是专门针对视图需求创建的。</target>
        </trans-unit>
        <trans-unit id="d776d2197476e41176b7c93c2dc025f13b077b72" translate="yes" xml:space="preserve">
          <source>View Model is class which we can use for rendering data on View. Suppose you have two entities Place and PlaceCategory and you want to access data from both entities using a single model then we use ViewModel.</source>
          <target state="translated">视图模型是一个类,我们可以用它来渲染View上的数据。假设你有两个实体Place和PlaceCategory,你想用一个模型从两个实体中访问数据,那么我们使用ViewModel。</target>
        </trans-unit>
        <trans-unit id="f27d834295e2d242c474637acd727f54ea253491" translate="yes" xml:space="preserve">
          <source>View is responsible for presenting the data to the user</source>
          <target state="translated">视图负责向用户展示数据。</target>
        </trans-unit>
        <trans-unit id="0356ac1237d6bba655d268c89b9c5143d4544bc5" translate="yes" xml:space="preserve">
          <source>View model a is simple class which can contain more than one class property. We use it to inherit all the required properties, e.g. I have two classes Student and Subject</source>
          <target state="translated">视图模型a是一个简单的类,它可以包含多个类的属性。我们用它来继承所有需要的属性,例如我有两个类 Student 和 Subject</target>
        </trans-unit>
        <trans-unit id="bf0d1cdb5a6a3644e8bfc760e102d8c45933f5f2" translate="yes" xml:space="preserve">
          <source>View model defines how a view should look (for &lt;code&gt;LabelFor&lt;/code&gt;,&lt;code&gt;EditorFor&lt;/code&gt;,&lt;code&gt;DisplayFor&lt;/code&gt; helpers).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图模型定义视图的外观（对于&lt;/font&gt;&lt;/font&gt; &lt;code&gt;LabelFor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;EditorFor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;DisplayFor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;助手）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9d2f4d999b4e8033bb27ab7dc2cb0b933cc2b1f9" translate="yes" xml:space="preserve">
          <source>View model may define only specific fields of a single entity that is
required for the View.</source>
          <target state="translated">视图模型可以只定义视图所需的单个实体的特定字段。</target>
        </trans-unit>
        <trans-unit id="a3ad613724e9d48eba6c89b46a17de20911012a5" translate="yes" xml:space="preserve">
          <source>View models can combine values from different database entities.</source>
          <target state="translated">视图模型可以将不同数据库实体的值结合起来。</target>
        </trans-unit>
        <trans-unit id="88cc59de60ea78da078768bd0693287c462679fb" translate="yes" xml:space="preserve">
          <source>View models differ from domain models in that view models only contain the data (represented by properties) that you want to use on your view.  For example, lets say that you want to add a new employee record, your view model might look like this:</source>
          <target state="translated">视图模型不同于域模型,因为视图模型只包含你想在视图中使用的数据(由属性表示)。例如,假设你想添加一个新的员工记录,你的视图模型可能看起来像这样。</target>
        </trans-unit>
        <trans-unit id="1f8c9f81606302005f84d32d3f69f5ae641d81b8" translate="yes" xml:space="preserve">
          <source>View models documents a view by consisting only fields, that are represented in view.</source>
          <target state="translated">视图模型通过仅由视图中表示的字段组成来记录一个视图。</target>
        </trans-unit>
        <trans-unit id="b2ce5abd60a4d19b5579c94962e64770fc9e8908" translate="yes" xml:space="preserve">
          <source>View models may contain specific validation rules using data annotations or IDataErrorInfo.</source>
          <target state="translated">视图模型可以使用数据注释或IDataErrorInfo包含特定的验证规则。</target>
        </trans-unit>
        <trans-unit id="be4918c5414f9100cd5f83485a0270d1c180afa8" translate="yes" xml:space="preserve">
          <source>ViewModel = Model that is created to serve the view.</source>
          <target state="translated">ViewModel=为服务于视图而创建的模型。</target>
        </trans-unit>
        <trans-unit id="79c30b5bc1a474a5144110a6447c9b55277a8b35" translate="yes" xml:space="preserve">
          <source>ViewModel can also be used to insert, update records into more than one entities however the main use of ViewModel is to display columns from multiple entities (model) into a single view.</source>
          <target state="translated">ViewModel也可以用来在多个实体中插入、更新记录,但是ViewModel的主要用途是将多个实体(模型)的列显示到一个视图中。</target>
        </trans-unit>
        <trans-unit id="e6722051609c05704e6c132b81141178f6c7d623" translate="yes" xml:space="preserve">
          <source>ViewModel can have multiple entities or objects from different data
models or data source.</source>
          <target state="translated">ViewModel可以拥有来自不同数据模型或数据源的多个实体或对象。</target>
        </trans-unit>
        <trans-unit id="33a3551043f854c97d287c49523c956381559fcc" translate="yes" xml:space="preserve">
          <source>ViewModel can have specific validation rules using data annotations
or IDataErrorInfo.</source>
          <target state="translated">ViewModel可以使用数据注解或IDataErrorInfo拥有特定的验证规则。</target>
        </trans-unit>
        <trans-unit id="0336bfa7474ae8caa1c7da67673f6011e594432b" translate="yes" xml:space="preserve">
          <source>ViewModel contain fields that are represented in the view (for
LabelFor,EditorFor,DisplayFor helpers)</source>
          <target state="translated">ViewModel包含在视图中表示的字段(用于LabelFor,EditorFor,DisplayFor帮助器)。</target>
        </trans-unit>
        <trans-unit id="362dde63db291f8ff26350eb03d16db0683098ff" translate="yes" xml:space="preserve">
          <source>ViewModel is workaround that patches the conceptual clumsiness of the MVC framework. It represents the 4th layer in the 3-layer Model-View-Controller architecture. when Model (domain model) is not appropriate, too big (bigger than 2-3 fields) for the View, we create smaller ViewModel to pass it to the View.</source>
          <target state="translated">ViewModel是修补MVC框架概念上的笨拙的工作方法,它代表了3层Model-View-Controller架构中的第4层。当Model(域模型)不适合View的时候,太大(大于2-3个字段),我们就创建一个更小的ViewModel来传递给View。</target>
        </trans-unit>
        <trans-unit id="34715abf0c1e9b3f517aff36258647a1d12e3e85" translate="yes" xml:space="preserve">
          <source>We can make our BaseViewModel even more re-usable by making it generic:</source>
          <target state="translated">我们可以通过使我们的BaseViewModel变得更加可重用。</target>
        </trans-unit>
        <trans-unit id="8575942cd731d21e3c9c12ecd2f77fb911ff82d2" translate="yes" xml:space="preserve">
          <source>We can take our design a step further and create a base view model class that can be used not only for PresentationOrders, but for any other class as well:</source>
          <target state="translated">我们可以在设计上更进一步,创建一个基础视图模型类,这个类不仅可以用于PresentationOrders,也可以用于其他任何类。</target>
        </trans-unit>
        <trans-unit id="27fe3c01127e89d4991e485facdc2dfdf77c99d0" translate="yes" xml:space="preserve">
          <source>What is ViewModel in MVC</source>
          <target state="translated">什么是MVC中的ViewModel</target>
        </trans-unit>
        <trans-unit id="59dbf448d2c61de00cc76afad7cfb7a43e353b97" translate="yes" xml:space="preserve">
          <source>What is a ViewModel and why do we need a ViewModel for an ASP.NET MVC Application?</source>
          <target state="translated">什么是ViewModel,为什么我们需要一个ASP.NET MVC应用程序的ViewModel?</target>
        </trans-unit>
        <trans-unit id="f82b0e97dd715c410e184bb6c08e65934b5ca31e" translate="yes" xml:space="preserve">
          <source>When deleting a record, I normally follow the same path as with the edit view model. I would also have a URL, for example:</source>
          <target state="translated">在删除记录时,我一般会按照编辑视图模型的路径进行删除。我也会有一个URL,比如说。</target>
        </trans-unit>
        <trans-unit id="78e0a655e7144b9be0d4b6b6603f1084fa30e450" translate="yes" xml:space="preserve">
          <source>When editing employee data (an employee that has already been added to the database) it wouldn&amp;rsquo;t differ much from my example above.  Create a view model, call it for example &lt;code&gt;EditEmployeeViewModel&lt;/code&gt;. Only have the data that you want to edit in this view model, like first name and last name. Edit the data and click the submit button. I wouldn&amp;rsquo;t worry too much about the &lt;code&gt;Id&lt;/code&gt; field because the &lt;code&gt;Id&lt;/code&gt; value will probably been in the URL, for example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在编辑员工数据（已经添加到数据库的员工）时，与上面的示例没有太大区别。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;创建一个视图模型，例如将其&lt;/font&gt;&lt;/font&gt; &lt;code&gt;EditEmployeeViewModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;EditEmployeeViewModel&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仅具有要在此视图模型中编辑的数据，例如名字和姓氏。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;编辑数据，然后单击提交按钮。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我不必担心&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;字段，因为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;值很可能位于URL中，例如：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ffab00c82c200ae2679aaae4659aa6adc58110d" translate="yes" xml:space="preserve">
          <source>When loading the view/page, the create action method in your employee controller will create an instance of this view model, populate any fields if required, and then pass this view model to the view/page:</source>
          <target state="translated">当加载viewpage时,雇员控制器中的create action方法将创建一个视图模型的实例,如果需要的话,填充任何字段,然后将这个视图模型传递给viewpage。</target>
        </trans-unit>
        <trans-unit id="72c4f619085b94af5e15383c1cb9cefa8cdfb289" translate="yes" xml:space="preserve">
          <source>When the view loads up for the first time I would get the employee&amp;rsquo;s data from the database using the &lt;code&gt;Id&lt;/code&gt; of 3. I would then just display static text on my view/page so that the user can see what employee is being deleted. When the user clicks the Delete button, I would just use the &lt;code&gt;Id&lt;/code&gt; value of 3 and pass it to my repository layer. You only need the &lt;code&gt;Id&lt;/code&gt; to delete a record from the table.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当视图首次加载时，我将使用3的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从数据库中获取员工的数据&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。然后，我将仅在视图/页面上显示静态文本，以便用户可以看到正在删除的员工。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当用户单击&amp;ldquo;删除&amp;rdquo;按钮时，我将仅使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;值3并将其传递到我的存储库层。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您只需要&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从表中删除一条记录。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="60f4d77148cd9cb2e8b3f820285a972e93d7457c" translate="yes" xml:space="preserve">
          <source>Which produces this result (screen is taken after submitting form, with validation messages):</source>
          <target state="translated">其中会产生这样的结果(屏幕是在提交表单后,有验证信息的情况下拍摄的)。</target>
        </trans-unit>
        <trans-unit id="af219870105d660c40974d481c6f445bbb293a95" translate="yes" xml:space="preserve">
          <source>You can specify easily display templates for view models and reuse them in many places using DisplayFor or EditorFor helpers.</source>
          <target state="translated">您可以为视图模型指定轻松的显示模板,并使用DisplayFor或EditorFor助手在许多地方重用它们。</target>
        </trans-unit>
        <trans-unit id="52fadbc15fec74384a432f20937533ae9caf336b" translate="yes" xml:space="preserve">
          <source>You might only want specific properties, so this allows you to only load those and not additional unneccesary properties</source>
          <target state="translated">你可能只需要特定的属性,所以这允许你只加载这些属性,而不是额外的不必要的属性。</target>
        </trans-unit>
        <trans-unit id="046abf42fe38709c73c082b01e30a42673f2c0f0" translate="yes" xml:space="preserve">
          <source>Your controller methods and your models will be small, easily testable and to the point.</source>
          <target state="translated">你的控制器方法和你的模型将是小的,容易测试的,而且要有针对性。</target>
        </trans-unit>
        <trans-unit id="329ed648e659670fd193a27344d7cd539f996a1d" translate="yes" xml:space="preserve">
          <source>Your view/page might look like this (assuming you are using &lt;code&gt;ASP.NET MVC&lt;/code&gt; and the &lt;code&gt;Razor&lt;/code&gt; view engine):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您的视图/页面可能看起来像这样（假设您使用的是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ASP.NET MVC&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Razor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图引擎）：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="892c65ec6b04eec1e3b1acf11b73bee74b3373a8" translate="yes" xml:space="preserve">
          <source>the code above will throw an error...</source>
          <target state="translated">上面的代码会出现错误.....</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
