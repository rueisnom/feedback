<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/11064316">
    <body>
      <group id="11064316">
        <trans-unit id="091d7604521f03fbab270293c84abd2e70da5fb8" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are &lt;strong&gt;composite objects&lt;/strong&gt; that contain properties that consist of application data as well as properties that are used by application code.  This characteristic is crucial when designing the view model for reusability and is discussed in the examples below.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アプリケーションデータで構成されるプロパティと、アプリケーションコードで使用されるプロパティを含む&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;複合オブジェクト&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この特性は、再利用性のためにビューモデルを設計するときに重要であり、以下の例で説明します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71c8fcb4369ecbce1cadce629ab789c7a425003c" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are business objects &amp;ndash; their definition is dependent on application data.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;ビジネスオブジェクト&amp;ndash;それらの定義はアプリケーションデータに依存します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8e5133166dfde93ad82f68548991bff539b30864" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are the single source of data used to render a page or screen.  Usually this means that a view model will expose every property that any control on the page will need to render itself correctly.  Making the view model the single source of data for the view greatly improves its capability and value for unit testing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;ページまたは画面のレンダリングに使用される単一のデータソースです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通常、これは、ビューモデルが、ページ上のコントロールがそれ自体を正しくレンダリングするために必要なすべてのプロパティを公開することを意味します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビューモデルをビューの単一のデータソースにすると、機能と単体テストの価値が大幅に向上します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="02b2e16664ca73e1abe6e37f7febb336eece814d" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are written &amp;ldquo;per page&amp;rdquo; or &amp;ldquo;per screen&amp;rdquo;.  A unique View Model is typically written for every page or screen in an application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;「ページごと」または「画面ごと」と書かれている。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;固有のビューモデルは、通常、アプリケーションのすべてのページまたは画面に対して作成されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4dadb08ae807a9a03438ec13b1f5b7f4e1802702" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Contain application code.  View Models usually contain methods that are called during rendering and when the user is interacting with the page.  This code typically relates to event handling, animation, visibility of controls, styling, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;アプリケーションコードが含まれています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通常、ビューモデルには、レンダリング中およびユーザーがページを操作しているときに呼び出されるメソッドが含まれています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このコードは通常、イベント処理、アニメーション、コントロールの可視性、スタイリングなどに関連しています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f8dd38f2c3ef2267225a10c37937fb1e65b83bd5" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Contain code that calls business services for the purpose of retrieving data or sending it to a database server.  This code is often mistakenly placed in a controller. Calling business services from a controller usually limits the usefulness of the view model for unit testing.  To be clear, view models themselves should not contain business logic but should make calls to services which do contain business logic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;データの取得またはデータベースサーバーへの送信を目的としてビジネスサービスを呼び出すコードが含まれています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このコードは、誤ってコントローラーに配置されることがよくあります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントローラからビジネスサービスを呼び出すと、通常、ユニットテストのビューモデルの有用性が制限されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;明確にするために、ビューモデル自体にはビジネスロジックを含めないでください。ビジネスロジックを含むサービスを呼び出す必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="021c8e92e046cb7fb5232384ab062c9875b5cbfd" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Contain mostly properties. Code is typically limited to formatting data or converting to or from a DTO.  Presentation Models should not contain business logic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;主にプロパティを含む。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コードは通常、データのフォーマットまたはDTOとの変換に限定されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンテーションモデルにはビジネスロジックを含めないでください。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="857491b6cd3a3ecb0e3f8827e94a51936304c24e" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often contain properties of a different base type than a DTO.  For example dollar amounts may be represented as strings so they can contain commas and a currency symbol.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;多くの場合、DTOとは異なる基本タイプのプロパティが含まれています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、ドルの金額は文字列として表すことができるため、カンマや通貨記号を含めることができます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e22c1184a19f283ebf5e7adbf12c0f7a1715b41f" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often contain properties which are other view models for other pages or screens.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;多くの場合、他のページまたは画面の他のビューモデルであるプロパティが含まれています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="25911f773ca4593c19b1e48346c8399bb77a595a" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often defined by how they are used as well as their object characteristics.  In other words, a simple DTO that is used as the backing model for rendering a grid is in fact also a presentation model in the context of that grid.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;多くの場合、それらの使用方法とオブジェクトの特性によって定義されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;言い換えると、グリッドをレンダリングするためのバッキングモデルとして使用される単純なDTOは、実際には、そのグリッドのコンテキストでのプレゼンテーションモデルでもあります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c6a66f7efdf4a5e06bab68ad2558579c130c863f" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often present a denormalized view of data.  That is, they often combine properties from multiple DTO&amp;rsquo;s.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;多くの場合、データの非正規化されたビューが表示されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、複数のDTOのプロパティを組み合わせることがよくあります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6e4898ca5f9d6eb2c49f1bea5369a60c4cf54965" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Primarily used for transporting data to and from a database.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;主にデータベースとの間でデータを転送するために使用されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e335886ac2f2cf3f381eaa744f2b290f0f4ce886" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties exactly or closely match fields on a specific table in a data store.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;プロパティは、データストア内の特定のテーブルのフィールドと完全にまたはほぼ一致します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c61f4a5d65b5e385b3d98c5edfd58bbe6c75219e" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties that are used to display application state such as error messages, user name, status, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;エラーメッセージ、ユーザー名、ステータスなど、アプリケーションの状態を表示するために使用されるプロパティ&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="44152c81772618111892f0b7395aac169c9b852d" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties used for data binding such as list objects and properties that hold intermediate data that is input by the user.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;リストオブジェクトやユーザーが入力した中間データを保持するプロパティなど、データバインディングに使用されるプロパティ。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="21d410d4b0bf8af1d102f651deae6feaf00cba49" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties used to format, display, stylize, or animate controls.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;コントロールのフォーマット、表示、スタイル設定、またはアニメーション化に使用されるプロパティ。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5aae7795624e8dca926efd2b235f5ecf57ae583d" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Usually contain properties only &amp;ndash; no code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;通常はプロパティのみが含まれ、コードは含まれません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e1f255cb7e3440d6e3b86db25341f9d63f75478a" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Usually derive from a base class since most pages and screens share common properties.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull;ほとんどのページと画面は共通のプロパティを共有するため、通常は基本クラスから派生します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9227c0bb1dad45263adf473f0da3cd39ae90f89c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ASP.NET MVC view can't have more than one model so if we need to display properties from more than one models into the view, it is not possible. ViewModel serves this purpose.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ASP.NET MVCビューに複数のモデルを含めることはできないため、複数のモデルのプロパティをビューに表示する必要がある場合は不可能です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModelはこの目的を果たします。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="47ecad6905ac0c9527eeca8989f3ed9315b6069e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Composition over inheritance&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承より構成&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6cac57bc3539db0f79006be49553f758c9944982" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View Model Composition&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデル構成を表示&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="23c62b9e31fb317d9e700732e0edb1adc0d493ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Data Transfer Objects a.k.a &amp;ldquo;Model&amp;rdquo;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;データ転送オブジェクト、別名「モデル」&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fcc90465fc1eb3567b153a345917c67232ee01d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Designing ViewModel&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModelの設計&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dfd516553a0c9858f016c9102534da6d1fc06d58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit: I updated this answer on my Blog:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;編集：私は私のブログでこの回答を更新しました：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4e6d967aabeacd3870e306f89d67a1c8ccd3c930" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Presentation Models&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンテーションモデル&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="edc563f12ca05992aa529daff2c5530df492d181" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Presenting the viewmodel in the view&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビューでのビューモデルの提示&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="57f268bfc3a39fc05382bd8b6501103c2bad7346" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The key thing to remember is that the view model only represents the data that you want to use&lt;/strong&gt;, nothing else.  You can imagine all the unnecessary code and validation if you have a domain model with 30 properties and you only want to update a single value.  Given this scenario you would only have this one value/property in the view model and not all the properties that are in the domain object.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;覚えておくべき重要なことは、ビューモデルは使用したいデータのみを表すということであり&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、それ以外は何も&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表し&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;30個のプロパティを持つドメインモデルがあり、単一の値のみを更新する場合は、すべての不要なコードと検証を想像できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このシナリオでは、ドメインモデルにあるすべてのプロパティではなく、ビューモデルにこの1つの値/プロパティのみが含まれます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2ce37be823ac6fcdb8d035e0cb1591c15610d45b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;View Models&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデルを見る&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="acd627ae1902dfff170bb19bfeb185edff1d043f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;View model&lt;/strong&gt; is a class that represents the data model used in a specific view. We could use this class as a model for a login page:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビューモデル&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、特定のビューで使用されるデータモデルを表すクラスです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このクラスをログインページのモデルとして使用できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3eb7989fc7b3268a75e31973397bb4f2b77d2723" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Working with Action&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アクションでの作業&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="784698e6a41a9d10172d3f4ce6ee6685a991721c" translate="yes" xml:space="preserve">
          <source>@model ProjectName.Model.StudentViewModel</source>
          <target state="translated">モデル ProjectName.Model.StudentViewModel</target>
        </trans-unit>
        <trans-unit id="06a9eb888b55eaa767a102d8d7022d31558b556f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;view model&lt;/code&gt; represents the data that you want to display on your view/page, whether it be used for static text or for input values (like textboxes and dropdown lists) that can be added to the database (or edited). It is something different than your &lt;code&gt;domain model&lt;/code&gt;. It is a model for the view.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;view model&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたはそれが静的なテキストまたはデータベース（または編集）に追加することができます（テキストボックスやドロップダウンリストなど）の入力値のために使用されるかどうか、あなたのビュー/ページに表示したいというデータを表します。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;domain model&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とは異なるもの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビューのモデルです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7608e08d4f0b61ea5e48d5fd217b4a94edd98648" translate="yes" xml:space="preserve">
          <source>A Data Transfer Object (DTO) is a class with properties that match a table schema in a database.  DTO&amp;rsquo;s are named for their common usage for shuttling data to and from a data store.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;データ転送オブジェクト（DTO）は、データベースのテーブルスキーマに一致するプロパティを持つクラスです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DTOは、データストアとの間でデータを往復する一般的な使用法にちなんで名付けられました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db643f1ec44d2c837e9ab61d91025bd7d3d53e82" translate="yes" xml:space="preserve">
          <source>A controller is responsible for the page flow</source>
          <target state="translated">コントローラはページの流れを担当します。</target>
        </trans-unit>
        <trans-unit id="e3b4707fbc3e3d5a32deeabab22085bbd5da453c" translate="yes" xml:space="preserve">
          <source>A lot of big examples, let me explain in clear and crispy way.</source>
          <target state="translated">大きな例がたくさんあるので、わかりやすくサクッと説明させてください。</target>
        </trans-unit>
        <trans-unit id="0d466d07d557affcf02c5d91f34f48707173caa3" translate="yes" xml:space="preserve">
          <source>A model is responsible for the business logic</source>
          <target state="translated">モデルはビジネスロジックを担当します。</target>
        </trans-unit>
        <trans-unit id="7c0ca4a31f487009bebc32f78ce8247e830d54b1" translate="yes" xml:space="preserve">
          <source>A presentation model is a &lt;em&gt;utility&lt;/em&gt; class that is used to render data on a screen or report.  Presentation models are typically used to model complex data structures that are composed from data from multiple DTO&amp;rsquo;s.  Presentation models often represent a denormalized view of data.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンテーションモデルは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、画面またはレポートにデータをレンダリングするために使用される&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ユーティリティ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンテーションモデルは通常、複数のDTOのデータから構成される複雑なデータ構造をモデル化するために使用されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンテーションモデルは、データの非正規化されたビューを表すことがよくあります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="979814b66cb168384578069cfbe0cf257d7bd4fb" translate="yes" xml:space="preserve">
          <source>A view model is a conceptual model of data. Its use is to for example either get a subset or combine data from different tables.</source>
          <target state="translated">ビューモデルは、データの概念的なモデルです。その用途は、例えば、サブセットを取得したり、異なるテーブルからデータを結合したりすることです。</target>
        </trans-unit>
        <trans-unit id="29517336bce9403bbabf349182e99b37661f6c22" translate="yes" xml:space="preserve">
          <source>A view model is similar to a presentation model in that is a backing class for rendering a view.  However it is very different from a Presentation Model or a DTO in how it is constructed.  View models often contain the same properties as presentation models and DTO&amp;rsquo;s and for this reason they are often confused one for the other.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビューモデルは、ビューをレンダリングするためのバッキングクラスであるという点でプレゼンテーションモデルに似ています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、プレゼンテーションモデルやDTOとは、その構成方法が大きく異なります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビューモデルには、プレゼンテーションモデルやDTOと同じプロパティが含まれていることがよくあります。このため、ビューモデルは互いに混同されることがよくあります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2d122dfbc586108e4d0e045c5a4088f267f77650" translate="yes" xml:space="preserve">
          <source>A view model might not only have data from one database table. It can combine data from another table. Take my example above about adding a new employee record. Besides adding just the first and last names you might also want to add the department of the employee. This list of departments will come from your &lt;code&gt;Departments&lt;/code&gt; table. So now you have data from the &lt;code&gt;Employees&lt;/code&gt; and &lt;code&gt;Departments&lt;/code&gt; tables in one view model. You will just then need to add the following two properties to your view model and populate it with data:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビューモデルには、1つのデータベーステーブルのデータだけが含まれるとは限りません。別のテーブルのデータを組み合わせることができます。上記の私の従業員レコードの追加に関する例を見てみましょう。姓名だけでなく、従業員の部署を追加することもできます。この部門のリストは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Departments&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;テーブル&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から取得されます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。これ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で、1つのビューモデルに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Employees&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;テーブル&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Departments&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;テーブルの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;データができました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。次に、次の2つのプロパティをビューモデルに追加して、データを入力する必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="18421b8d98d053ede53aa47964692b02a912d66b" translate="yes" xml:space="preserve">
          <source>An example of a model in a web application could be:</source>
          <target state="translated">ウェブアプリケーションにおけるモデルの例としては、以下のようなものが考えられます。</target>
        </trans-unit>
        <trans-unit id="8c5608853992951b4bd783c7430ce80a18111116" translate="yes" xml:space="preserve">
          <source>An example presentation model:</source>
          <target state="translated">プレゼンテーションモデルの例。</target>
        </trans-unit>
        <trans-unit id="12c9ef1f0ac8e4b4eaecd1d24444d26dcf26204d" translate="yes" xml:space="preserve">
          <source>And actions:</source>
          <target state="translated">そして行動。</target>
        </trans-unit>
        <trans-unit id="32b125fff82d8b61b77572d85c31866f061d2d80" translate="yes" xml:space="preserve">
          <source>And with Data Annotations it might look this:</source>
          <target state="translated">そして、データアノテーションでは、次のようになります。</target>
        </trans-unit>
        <trans-unit id="ee07849c78e92b6c9ec11549edbd1c54d9e97b91" translate="yes" xml:space="preserve">
          <source>Another example of a view model and its retrieval: We want to display basic user data, his privileges and users name. We create a special view model, which contains only the required fields. We retrieve data from different entities from database, but the view is only aware of the view model class:</source>
          <target state="translated">ビューモデルとその検索の別の例。基本的なユーザデータ、ユーザの権限、ユーザ名を表示したいとします。必要なフィールドのみを含む特別なビューモデルを作成します。データベースから異なるエンティティからデータを取得しますが、ビューはビューモデルクラスのみを認識しています。</target>
        </trans-unit>
        <trans-unit id="c9a2a634871a0bacbbb2bcba04ceea845df0f23c" translate="yes" xml:space="preserve">
          <source>Another point, you don&amp;rsquo;t really need a view model for every action. If it is simple data then it would be fine to only use &lt;code&gt;EmployeeViewModel&lt;/code&gt;. If it is complex views/pages and they differ from each other then I would suggest you use separate view models for each.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もう1つのポイントは、すべてのアクションにビューモデルが実際に必要なわけではないということです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;単純なデータの場合は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;EmployeeViewModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のみを使用しても問題ありません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;複雑なビュー/ページであり、それらが互いに異なる場合は、それぞれに個別のビューモデルを使用することをお勧めします。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30a807962c4d842911cca18dd735b9820c28317b" translate="yes" xml:space="preserve">
          <source>As stated earlier, view models are composite objects in that they combine application properties and business data properties on a single object.  Examples of commonly used application properties that are used on view models are:</source>
          <target state="translated">先に述べたように、ビューモデルは、アプリケーション・プロパティとビジネス・データ・プロパティを1つのオブジェクトに結合した複合オブジェクトです。ビューモデルで使用される一般的に使用されるアプリケーションプロパティの例は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="f13564fc793a8a2f2c5001293b80cd5b65cc8a6d" translate="yes" xml:space="preserve">
          <source>As you can see it only contains two of the properties. These two properties are also in the employee domain model.  Why is this you may ask?  &lt;code&gt;Id&lt;/code&gt; might not be set from the view, it might be auto generated by the Employee table.  And &lt;code&gt;DateCreated&lt;/code&gt; might also be set in the stored procedure or in the service layer of your application.  So &lt;code&gt;Id&lt;/code&gt; and &lt;code&gt;DateCreated&lt;/code&gt; are not needed in the view model. You might want to display these two properties when you view an employee&amp;rsquo;s details (an employee that has already been captured) as static text.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ご覧のとおり、2つのプロパティのみが含まれています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これら2つのプロパティは、従業員ドメインモデルにもあります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これはなぜあなたが尋ねるかもしれませんか？ &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はビューから設定されない場合があり、Employeeテーブルによって自動生成される場合があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;DateCreated&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、ストアドプロシージャまたはアプリケーションのサービスレイヤーでも設定できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;DateCreated&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はビューモデルでは必要ありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;従業員の詳細（既にキャプチャされている従業員）を静的テキストとして表示する場合、これら2つのプロパティを表示することができます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34516062670ac1d4db45943e7dbe90a4d7d929e5" translate="yes" xml:space="preserve">
          <source>As you can see, a view model has many roles:</source>
          <target state="translated">このように、ビューモデルには多くの役割があります。</target>
        </trans-unit>
        <trans-unit id="7f17218ceb9cb01e6e7e9e9aa432bc220eb9e92b" translate="yes" xml:space="preserve">
          <source>Assume we are writing a web application.  One of the requirements of the application design is that the page title, user name, and application name must be displayed on every page.  If we want to create a page to display a presentation order object, we may modify the presentation model as follows:</source>
          <target state="translated">Webアプリケーションを書いているとします。アプリケーション設計の要件の一つは、ページタイトル、ユーザー名、アプリケーション名をすべてのページに表示しなければならないということです。提示順序オブジェクトを表示するページを作成したい場合、以下のように提示モデルを修正することができます。</target>
        </trans-unit>
        <trans-unit id="7463aba05ab71a5b6737ae5556ad6f86a21910e0" translate="yes" xml:space="preserve">
          <source>Characteristics of DTO&amp;rsquo;s:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DTOの特性：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="86f4c5a2ba2bb5bcef5863f95fddcf2f402f1d49" translate="yes" xml:space="preserve">
          <source>Characteristics of Presentation Models:</source>
          <target state="translated">プレゼンテーションモデルの特徴。</target>
        </trans-unit>
        <trans-unit id="bcda80ff10e740640afce89952a9a0c497f395fe" translate="yes" xml:space="preserve">
          <source>Characteristics of View Models:</source>
          <target state="translated">ビューモデルの特徴。</target>
        </trans-unit>
        <trans-unit id="7f7ca519ba25ddf1cdaa868e954528b1bb64bfd5" translate="yes" xml:space="preserve">
          <source>Database tables are usually normalized therefore DTO&amp;rsquo;s are usually normalized also.  This makes them of limited use for presenting data.  However, for certain simple data structures they often do quite well.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通常、データベーステーブルは正規化されているため、DTOも通常は正規化されています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これにより、データを表示するための使用が制限されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、特定の単純なデータ構造では、多くの場合非常にうまく機能します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9ae7f8fac70de032f0536b881084c08503cd96fb" translate="yes" xml:space="preserve">
          <source>Few examples of View Models are below</source>
          <target state="translated">ビューモデルの例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="0256f135a479d495b6f97309a130ec92b420fff0" translate="yes" xml:space="preserve">
          <source>Generally speaking, a view model is an object that contains all the properties and methods necessary to render a view. View model properties are often related to data objects such as customers and orders and in addition they also contain properties related to the page or application itself such as user name, application name etc. View models provide a convenient object to pass to a rendering engine to create a html page.  One of many reasons to use a view model is that view models provide a way to unit test certain presentation tasks such as handling user input, validating data, retrieving data for display, etc.</source>
          <target state="translated">一般的にビューモデルとは、ビューをレンダリングするために必要なすべてのプロパティとメソッドを含むオブジェクトのことです。ビューモデルのプロパティは、顧客や注文などのデータオブジェクトに関連することが多く、さらに、ユーザー名やアプリケーション名などのページやアプリケーション自体に関連するプロパティも含まれます。ビューモデルは、HTMLページを作成するためにレンダリングエンジンに渡す便利なオブジェクトを提供します。ビューモデルを使用する多くの理由の一つは、ユーザー入力の処理、データの検証、表示のためのデータの取得など、特定のプレゼンテーションタスクをユニットテストする方法を提供することです。</target>
        </trans-unit>
        <trans-unit id="0ecc5f2f113be01ef1af7af6615d65e0b2559802" translate="yes" xml:space="preserve">
          <source>Here are two examples of what DTO&amp;rsquo;s might look like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DTOがどのように見えるかの例を2つ示します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b5752eb70f697d164aee0d46a8a5e9ee4f7bfc27" translate="yes" xml:space="preserve">
          <source>Here is a comparison of Entity models (a.ka. DTO's a.ka. models), Presentation Models, and View Models.</source>
          <target state="translated">ここでは、Entityモデル(DTOのa.ka.モデル)、Presentationモデル、Viewモデルを比較してみます。</target>
        </trans-unit>
        <trans-unit id="41fc4a53daff6828d2c36dc08d64604023be26b0" translate="yes" xml:space="preserve">
          <source>Here is a small example of &lt;a href=&quot;http://techfunda.com/howto/262/list-data-using-viewmodel&quot;&gt;List data using ViewModel&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下は、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://techfunda.com/howto/262/list-data-using-viewmodel&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModelを使用したListデータの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;小さな例です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3bdb4b2444f19c2d0fe752fada6e32503c4b33b2" translate="yes" xml:space="preserve">
          <source>Here is a way we might re-factor the order presentation model such that it become a true view model and will be useful for displaying a single PresentationOrder object or a collection of PresentationOrder objects:</source>
          <target state="translated">ここでは、オーダープレゼンテーションモデルをリファクタリングして、真のビューモデルとなり、単一のPresentationOrderオブジェクトまたはPresentationOrderオブジェクトのコレクションを表示するのに役立つようにする方法を示します。</target>
        </trans-unit>
        <trans-unit id="0a2a50d3fa7ff4100b69d2f8236dcca6fdff8970" translate="yes" xml:space="preserve">
          <source>Hope this will be useful.</source>
          <target state="translated">お役に立てるといいのですが。</target>
        </trans-unit>
        <trans-unit id="095b0b70b5a9cab69d8341323e70d4db8884f3cc" translate="yes" xml:space="preserve">
          <source>I am new to ASP.NET MVC. I have a problem with understanding the purpose of a ViewModel.</source>
          <target state="translated">ASP.NET MVC の初心者です。ViewModelの目的が理解できずに困っています。</target>
        </trans-unit>
        <trans-unit id="9ae564fdfdc1add6404c350c63a78148f7b5df36" translate="yes" xml:space="preserve">
          <source>I didn't read all the posts but every answer seems to be missing one concept that really helped me &quot;get it&quot;...</source>
          <target state="translated">すべての投稿を読んだわけではないが、どの回答も、私を「理解する」のに役立った一つのコンセプトが欠けているように思える...。</target>
        </trans-unit>
        <trans-unit id="29fe05d20d4215aef9cfbc0a31e274894e167da3" translate="yes" xml:space="preserve">
          <source>I find myself using ViewModels to pass info into a view/form, and then transfering that data into a valid Model when the form posts back to the controller - also very handy for storing Lists(IEnumerable).</source>
          <target state="translated">ViewModels を使ってビューフォームに情報を渡し、フォームがコントローラに戻ってきたときにそのデータを有効なモデルに変換します-リスト(IEnumerable)を格納するのにも便利です。</target>
        </trans-unit>
        <trans-unit id="9e24d7239899f9ca10ad64122efd148daa74a551" translate="yes" xml:space="preserve">
          <source>I hope this clears up any confusion that you had about view models and domain models.</source>
          <target state="translated">これで、ビューモデルとドメインモデルについての混乱が解消されることを願っています。</target>
        </trans-unit>
        <trans-unit id="24252c1ad530d2526ac3e27970bf24f54019eafb" translate="yes" xml:space="preserve">
          <source>If I get a good example about its working and explanation that would be better.</source>
          <target state="translated">私はその動作と説明についての良い例を得るならば、それはより良いだろう。</target>
        </trans-unit>
        <trans-unit id="fb6471d4ff66132ef2b78aefd3fa0f22bdcfd22f" translate="yes" xml:space="preserve">
          <source>If a Model is akin to a database &lt;strong&gt;&lt;em&gt;Table&lt;/em&gt;&lt;/strong&gt;, then a ViewModel is akin to a database &lt;strong&gt;&lt;em&gt;View&lt;/em&gt;&lt;/strong&gt; - A view typically either returns small amounts of data from one table, or, complex sets of data from multiple tables (joins).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデルがデータベースの&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tableに&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;似ている&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合、ViewModelはデータベースの&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Viewに&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;似ています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-ビューは通常、1つのテーブルから少量のデータを返すか、複数のテーブル（結合）から複雑なデータセットを返します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a33be26cdbdc7f223acadebc849211c36bba0ca8" translate="yes" xml:space="preserve">
          <source>If there are too few view-specific data and/or transformations, you can use the Model itself</source>
          <target state="translated">ビュー固有のデータや変換が少なすぎる場合は、モデル自体を使用することができます。</target>
        </trans-unit>
        <trans-unit id="4843531d7fc5288ce3a4f8b2b896b726f41768cc" translate="yes" xml:space="preserve">
          <source>If you have properties specific to the view, and not related to the DB/Service/Data store, it is a good practice to use ViewModels. Say, you want to leave a checkbox selected based on a DB field (or two) but the DB field itself isn't a boolean. While it is possible to create these properties in the Model itself and keep it hidden from the binding to data, you may not want to clutter the Model depending on the amount of such fields and transactions.</source>
          <target state="translated">ビューに固有のプロパティがあり、DBserviceDataストアとは関係ない場合、ViewModelsを使用するのが良い方法です。例えば、DBフィールド(または2つ)に基づいてチェックボックスを選択したままにしたいが、DBフィールド自体はブール値ではないとします。モデル自体にこれらのプロパティを作成して、データへのバインディングから隠しておくことは可能ですが、そのようなフィールドやトランザクションの量によっては、モデルを乱雑にしたくないかもしれません。</target>
        </trans-unit>
        <trans-unit id="50975c3b578778119e55331e663bf658d0f95499" translate="yes" xml:space="preserve">
          <source>If you want to study code how to setup a &quot;Baseline&quot; web application with ViewModels I can advise to download this code on GitHub: &lt;a href=&quot;https://github.com/ajsaulsberry/BlipAjax&quot;&gt;https://github.com/ajsaulsberry/BlipAjax&lt;/a&gt;. I developed large enterprise applications. When you do this its problematic to setup a good architecture that handles all this &quot;ViewModel&quot; functionality. I think with BlipAjax you will have a very Good &quot;baseline&quot; to start with. Its just a simple website, but great in its simplicity. I like the way they used the English language to point at whats really needed in the application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModelsで「ベースライン」Webアプリケーションをセットアップする方法をコードで学習したい場合は、GitHubでこのコードをダウンロードすることをお勧めします：&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/ajsaulsberry/BlipAjax&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//github.com/ajsaulsberry/BlipAjax&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;大規模なエンタープライズアプリケーションを開発しました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これを行うと、このすべての「ViewModel」機能を処理する適切なアーキテクチャをセットアップすることが問題になります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;BlipAjaxを使用すると、最初に非常に優れた「ベースライン」が得られると思います。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その単純なウェブサイトですが、そのシンプルさは素晴らしいです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は、アプリケーションで本当に必要なものを指摘するために彼らが英語を使用した方法が好きです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6a3c97e12b9a1ccbdf3d8424c6609b00baa9196d" translate="yes" xml:space="preserve">
          <source>In MVC the process is split into 3 different responsibilities:</source>
          <target state="translated">MVCでは、プロセスは3つの異なる責任に分かれています。</target>
        </trans-unit>
        <trans-unit id="2d72e29ee7d99b2d5c4d674d77a200110c79124b" translate="yes" xml:space="preserve">
          <source>In ViewModel put only those fields/data that you want to display on 
the view/page.</source>
          <target state="translated">ViewModelには、ビューページに表示したいフィールドデータのみを配置します。</target>
        </trans-unit>
        <trans-unit id="dce4a57fc1720e9f891e0f68e7fc4cdd117eef11" translate="yes" xml:space="preserve">
          <source>Let us say that you have an &lt;code&gt;Employee&lt;/code&gt; class that represents your employee domain model and it contains the following properties (unique identifier, first name, last name and date created):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私たちはあなたが持っているとしましょう&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Employee&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたの従業員のドメインモデルを表すクラスをし、それは、次のプロパティ（一意の識別子、最初の名前、最後に作成された名前と日付）が含まれています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="77a51cb2e7eadb97bd30de437ef458714cf33e08" translate="yes" xml:space="preserve">
          <source>Looking at the above two classes we can see that one way to think about a view model is that it is a presentation model that contains another presentation model as a property.  The top level presentation model (i.e. view model) contains properties that are relevant to the page or application while presentation model (property) contains properties that are relevant to application data.</source>
          <target state="translated">上記の2つのクラスを見てみると、ビューモデルについての1つの考え方として、ビューモデルは別のプレゼンテーションモデルをプロパティとして含むプレゼンテーションモデルであることがわかります。トップレベルのプレゼンテーションモデル(すなわちビューモデル)には、ページやアプリケーションに関連するプロパティが含まれ、プレゼンテーションモデル(プロパティ)にはアプリケーションデータに関連するプロパティが含まれます。</target>
        </trans-unit>
        <trans-unit id="e52b8b84a0ff20689f4296eecbe0ffcbf0e3d25a" translate="yes" xml:space="preserve">
          <source>MVC doesn't have a viewmodel: it has a model, view and controller. A viewmodel is part of MVVM (Model-View-Viewmodel). MVVM is derived from the Presentation Model and is popularized in WPF. There should also be a model in MVVM, but most people miss the point of that pattern completely and they will only have a view and a viewmodel. The model in MVC is similar to the model in MVVM.</source>
          <target state="translated">MVCにはビューモデルはありません:モデル、ビュー、コントローラがあります。ビューモデルは MVVM (Model-View-Viewmodel)の一部です。MVVMはPresentation Modelから派生したもので、WPFで普及しています。MVVMにもモデルがあるはずなのですが、ほとんどの人はそのパターンの意味を完全に見逃してしまい、ビューとビューモデルだけになってしまいます。MVCにおけるモデルはMVVMにおけるモデルと似たようなものです。</target>
        </trans-unit>
        <trans-unit id="0007a747ce5507b06eab17bdb0e2de8aa9b638a7" translate="yes" xml:space="preserve">
          <source>MVC is not very suitable for web applications. It is a pattern introduced by Smalltalk for creating desktop applications. A web environment behaves completely different. It doesn't make much sense to copy a 40-year old concept from the desktop development and paste it into a web enviroment. However a lot of people think this is ok, because their application compiles and returns the correct values. That is, in my opinion, not enough to declare a certain design choice as ok.</source>
          <target state="translated">MVCはWebアプリケーションにはあまり向いていません。デスクトップアプリケーションを作成するためにSmalltalkが導入したパターンです。ウェブ環境では全く異なる振る舞いをします。デスクトップ開発から40年前のコンセプトをコピーして、それをウェブ環境に貼り付けるのはあまり意味がありません。しかし、多くの人は、アプリケーションがコンパイルされて正しい値を返すから大丈夫だと思っています。私の考えでは、あるデザインの選択をOKと宣言するには十分ではありません。</target>
        </trans-unit>
        <trans-unit id="c79b14feab9fbcbe613cc41f23adc6adae02bdd7" translate="yes" xml:space="preserve">
          <source>My answer is a bit lengthy but I think it is important to compare view models to other types of commonly used models to understand why they are different and why they are necessary.</source>
          <target state="translated">私の回答は少し長くなりましたが、一般的に使われているビューモデルと他のタイプのモデルを比較して、なぜ違うのか、なぜ必要なのかを理解することが大切だと思います。</target>
        </trans-unit>
        <trans-unit id="8eba30174b6f892cdd849bbf51e7c3fc9fec3d73" translate="yes" xml:space="preserve">
          <source>Now  we use this ViewModel in View</source>
          <target state="translated">ここでは、この ViewModel を View</target>
        </trans-unit>
        <trans-unit id="659895d640bf5615ecde5842496c44e98b39693c" translate="yes" xml:space="preserve">
          <source>Now our implementations are effortless:</source>
          <target state="translated">今では、私たちの実装が楽になりました。</target>
        </trans-unit>
        <trans-unit id="c33d9e59e291008f5fe3aa95e955d7c285c36b6a" translate="yes" xml:space="preserve">
          <source>Now we are able to access all the properties of StudentViewModel and inherited class in View.</source>
          <target state="translated">これでStudentViewModelのすべてのプロパティとView内の継承クラスにアクセスできるようになりました。</target>
        </trans-unit>
        <trans-unit id="591bd6b2b0e6e6bf85b2261e1527ffe7d3c0375f" translate="yes" xml:space="preserve">
          <source>Now we can simplify our PresentationOrderVM like this:</source>
          <target state="translated">これで、PresentationOrderVMを次のように単純化することができます。</target>
        </trans-unit>
        <trans-unit id="96775092c82616d374ace6d7a2b5fd684f2a92d9" translate="yes" xml:space="preserve">
          <source>Now we create one class and can give it any name, but this format &quot;XyzViewModel&quot; will make it easier to understand. It is inheritance concept.
Now we create a third class with the following name:</source>
          <target state="translated">これで1つのクラスを作り、名前は自由につけられますが、「XyzViewModel」という形式にするとわかりやすいでしょう。継承の概念です。次に、以下のような名前の3つ目のクラスを作成します。</target>
        </trans-unit>
        <trans-unit id="56f6d61294c2da51e88d3679b47bf298b7bdf469" translate="yes" xml:space="preserve">
          <source>Now we want to display records student's Name and Subject's Name in View (In MVC), but it's not possible to add more than one classes like:</source>
          <target state="translated">ここで、学生の名前と科目名を表示させたいのですが、複数のクラスを追加することはできません。</target>
        </trans-unit>
        <trans-unit id="d1b202eb2b094f90355bef37b9bc8b31b823c3c6" translate="yes" xml:space="preserve">
          <source>Presentation models are used &amp;ldquo;as needed&amp;rdquo; and &amp;ldquo;where needed&amp;rdquo; (whereas DTO&amp;rsquo;s are usually tied to the database schema).  A presentation model may be used to model data for an entire page, a grid on a page, or a dropdown on a grid on a page. Presentation models often contain properties that are other presentation models.  Presentation models are often constructed for a single-use purpose such as to render a specific grid on a single page.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンテーションモデルは「必要に応じて」および「必要に応じて」使用されます（DTOは通常データベーススキーマに関連付けられています）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンテーションモデルは、ページ全体、ページ上のグリッド、またはページ上のグリッドのドロップダウンのデータをモデル化するために使用できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;多くの場合、プレゼンテーションモデルには、他のプレゼンテーションモデルであるプロパティが含まれています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンテーションモデルは、特定のグリッドを単一のページにレンダリングするなど、使い捨ての目的で作成されることがよくあります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8ffa8c608739cf046a5f4acf0ce72acebed316f4" translate="yes" xml:space="preserve">
          <source>Retrieval:</source>
          <target state="translated">Retrieval:</target>
        </trans-unit>
        <trans-unit id="ede225ff98051fa3d75a279416af02c28a4902d6" translate="yes" xml:space="preserve">
          <source>Since view reperesents the properties of the ViewModel, hence it is
easy for rendering and maintenance.</source>
          <target state="translated">ビューはViewModelのプロパティを再表示するので、レンダリングやメンテナンスが容易です。</target>
        </trans-unit>
        <trans-unit id="810649a5346ec9759ec597984cd267207680cc84" translate="yes" xml:space="preserve">
          <source>So in above Example Place and Category are the two different entities and PlaceCategory viewmodel is ViewModel which we can use on View.</source>
          <target state="translated">上記の例では、PlaceとCategoryは2つの異なるエンティティであり、PlaceCategoryのビューモデルはViewModelであり、View上で使用することができます。</target>
        </trans-unit>
        <trans-unit id="55668866ad670a5721cd3d4b303def755a5f1b9c" translate="yes" xml:space="preserve">
          <source>Take this &lt;code&gt;Id&lt;/code&gt; and pass it through to your repository layer, together with your first name and last name values.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を取得して、姓名の値とともにリポジトリレイヤーに渡します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c9c0379520c692636f1098086ee64944f61eb925" translate="yes" xml:space="preserve">
          <source>The controller can use it like this:</source>
          <target state="translated">コントローラーはこんな感じで使えます。</target>
        </trans-unit>
        <trans-unit id="dac2212ec6ea6f80a65cd7e4c4833a9d4ce8e740" translate="yes" xml:space="preserve">
          <source>The following examples show why the composite nature of view models is important and how we can best construct a View Model that efficient and reusable.</source>
          <target state="translated">以下の例では、なぜビューモデルの複合性が重要なのか、また、効率的で再利用可能なビューモデルを構築するにはどうすればよいのかを示しています。</target>
        </trans-unit>
        <trans-unit id="fc04ddab544f11f980f798cc18d0d331fbd3fb78" translate="yes" xml:space="preserve">
          <source>The way of creating ViewModel is same as creating Model, the way of creating view for the Viewmodel is same as creating view for Model.</source>
          <target state="translated">ViewModelの作成方法はModelの作成方法と同じで、Viewmodelのビューの作成方法はModelのビューの作成方法と同じです。</target>
        </trans-unit>
        <trans-unit id="0b20cb6512cbb29a4429b759ba44cc79eb0ee528" translate="yes" xml:space="preserve">
          <source>This design might work&amp;hellip; but what if we want to create a page that will display a list of orders?  The PageTitle, UserName, and ApplicationName properties will be repeated and become unwieldy to work with.  Also, what if we want to define some page-level logic in the constructor of the class?  We can no longer do that if we create an instance for every order that will be displayed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このデザインはうまくいくかもしれませんが、注文のリストを表示するページを作成したい場合はどうでしょうか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PageTitle、UserName、およびApplicationNameの各プロパティが繰り返され、扱いにくくなります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、クラスのコンストラクターでページレベルのロジックを定義したい場合はどうなりますか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示されるすべての注文のインスタンスを作成すると、それを行うことができなくなります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc3f1aa6ae9c1ae576ba8114ffcb4e62e943c55b" translate="yes" xml:space="preserve">
          <source>To list data from more than entities in a view page &amp;ndash; we can create a
View model and have properties of all the entities for which we want
to list data. Join those database entities and set View model
properties and return to the View to show data of different
entities in one tabular form</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビューページ内の複数のエンティティのデータを一覧表示するには、ビューモデルを作成して、データを一覧表示するすべてのエンティティのプロパティを設定できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらのデータベースエンティティを結合してビューモデルプロパティを設定し、ビューに戻ってさまざまなエンティティのデータを1つの表形式で表示します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d7a93bb744cd53b65dd6eabcf5a3c928eb5a7df3" translate="yes" xml:space="preserve">
          <source>To summarize, and to directly answer the question that is asked:</source>
          <target state="translated">要約して、質問されたことに直接答えること。</target>
        </trans-unit>
        <trans-unit id="848ace57c7dbc4504e9902c434ff0470b55aa46b" translate="yes" xml:space="preserve">
          <source>Use a mapper when ViewModel become more complex.</source>
          <target state="translated">ViewModelが複雑になってきたときにマッパーを使用します。</target>
        </trans-unit>
        <trans-unit id="73ed7042fd0b7f5ee31ecb7dc68fc0d76ebd701f" translate="yes" xml:space="preserve">
          <source>Using this view model you can define the view (Razor view engine):</source>
          <target state="translated">このビューモデルを使用して、ビュー(Razor ビューエンジン)を定義することができます。</target>
        </trans-unit>
        <trans-unit id="7d591ae4859bc24521fd94d00cecdd51f4e7a80b" translate="yes" xml:space="preserve">
          <source>Validation would thus be done only on &lt;code&gt;FirstName&lt;/code&gt; and &lt;code&gt;LastName&lt;/code&gt;.  Using &lt;a href=&quot;https://fluentvalidation.net/&quot;&gt;FluentValidation&lt;/a&gt; you might have validation like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、検証は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;FirstName&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;LastName&lt;/code&gt; で&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のみ行われ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://fluentvalidation.net/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;FluentValidation&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用すると、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ような検証が行われる可能性があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="087b229658bbe1662ba4cdcdb4873d59633cb3d2" translate="yes" xml:space="preserve">
          <source>View Model is a model class that can hold only those properties that is required for a view. It can also contains properties from more than one entities (tables) of the database. As the name suggests, this model is created specific to the View requirements.</source>
          <target state="translated">ビューモデルは、ビューに必要なプロパティのみを保持できるモデルクラスです。また、データベースの複数のエンティティ(テーブル)からのプロパティを保持することもできます。その名の通り、このモデルはビューの要件に特化して作成されます。</target>
        </trans-unit>
        <trans-unit id="d776d2197476e41176b7c93c2dc025f13b077b72" translate="yes" xml:space="preserve">
          <source>View Model is class which we can use for rendering data on View. Suppose you have two entities Place and PlaceCategory and you want to access data from both entities using a single model then we use ViewModel.</source>
          <target state="translated">View Modelは、View上でデータをレンダリングするためのクラスです。Place と PlaceCategory という 2 つのエンティティがあり、単一のモデルを使って両方のエンティティからデータにアクセスしたい場合は ViewModel を使用します。</target>
        </trans-unit>
        <trans-unit id="f27d834295e2d242c474637acd727f54ea253491" translate="yes" xml:space="preserve">
          <source>View is responsible for presenting the data to the user</source>
          <target state="translated">ビューは、ユーザーにデータを提示する役割を担っています。</target>
        </trans-unit>
        <trans-unit id="0356ac1237d6bba655d268c89b9c5143d4544bc5" translate="yes" xml:space="preserve">
          <source>View model a is simple class which can contain more than one class property. We use it to inherit all the required properties, e.g. I have two classes Student and Subject</source>
          <target state="translated">ビューモデルaは、複数のクラスプロパティを含むことができるシンプルなクラスです。私たちはそれを使用して、必要なすべてのプロパティを継承するために、例えば、私は2つのクラスStudentとSubjectを持っています。</target>
        </trans-unit>
        <trans-unit id="bf0d1cdb5a6a3644e8bfc760e102d8c45933f5f2" translate="yes" xml:space="preserve">
          <source>View model defines how a view should look (for &lt;code&gt;LabelFor&lt;/code&gt;,&lt;code&gt;EditorFor&lt;/code&gt;,&lt;code&gt;DisplayFor&lt;/code&gt; helpers).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビューモデルは、ビューの外観を定義します（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;LabelFor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;EditorFor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;DisplayFor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ヘルパーの場合）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9d2f4d999b4e8033bb27ab7dc2cb0b933cc2b1f9" translate="yes" xml:space="preserve">
          <source>View model may define only specific fields of a single entity that is
required for the View.</source>
          <target state="translated">ビューモデルは、ビューに必要な単一のエンティティの特定のフィールドのみを定義することができます。</target>
        </trans-unit>
        <trans-unit id="a3ad613724e9d48eba6c89b46a17de20911012a5" translate="yes" xml:space="preserve">
          <source>View models can combine values from different database entities.</source>
          <target state="translated">ビューモデルは、異なるデータベースエンティティからの値を組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="88cc59de60ea78da078768bd0693287c462679fb" translate="yes" xml:space="preserve">
          <source>View models differ from domain models in that view models only contain the data (represented by properties) that you want to use on your view.  For example, lets say that you want to add a new employee record, your view model might look like this:</source>
          <target state="translated">ビューモデルはドメインモデルとは異なり、ビューモデルにはビューで使用したいデータ(プロパティで表される)のみが含まれています。例えば、新しい従業員の記録を追加したい場合、ビューモデルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="1f8c9f81606302005f84d32d3f69f5ae641d81b8" translate="yes" xml:space="preserve">
          <source>View models documents a view by consisting only fields, that are represented in view.</source>
          <target state="translated">ビューモデルは、ビューで表現されるフィールドのみで構成されたビューを文書化しています。</target>
        </trans-unit>
        <trans-unit id="b2ce5abd60a4d19b5579c94962e64770fc9e8908" translate="yes" xml:space="preserve">
          <source>View models may contain specific validation rules using data annotations or IDataErrorInfo.</source>
          <target state="translated">ビュー モデルには、データ アノテーションまたは IDataErrorInfo を使用した特定の検証ルールが含まれている場合があります。</target>
        </trans-unit>
        <trans-unit id="be4918c5414f9100cd5f83485a0270d1c180afa8" translate="yes" xml:space="preserve">
          <source>ViewModel = Model that is created to serve the view.</source>
          <target state="translated">ViewModel=ビューを提供するために作成されるモデル。</target>
        </trans-unit>
        <trans-unit id="79c30b5bc1a474a5144110a6447c9b55277a8b35" translate="yes" xml:space="preserve">
          <source>ViewModel can also be used to insert, update records into more than one entities however the main use of ViewModel is to display columns from multiple entities (model) into a single view.</source>
          <target state="translated">ViewModel は複数のエンティティへのレコードの挿入や更新にも使用することができますが、ViewModel の主な用途は複数のエンティティ (モデル)のカラムを単一のビューに表示することです。</target>
        </trans-unit>
        <trans-unit id="e6722051609c05704e6c132b81141178f6c7d623" translate="yes" xml:space="preserve">
          <source>ViewModel can have multiple entities or objects from different data
models or data source.</source>
          <target state="translated">ViewModel は、異なるデータモデルやデータソースから複数のエンティティやオブジェクトを持つことができます。</target>
        </trans-unit>
        <trans-unit id="33a3551043f854c97d287c49523c956381559fcc" translate="yes" xml:space="preserve">
          <source>ViewModel can have specific validation rules using data annotations
or IDataErrorInfo.</source>
          <target state="translated">ViewModel は、データ アノテーションや IDataErrorInfo を使用して特定の検証ルールを持つことができます。</target>
        </trans-unit>
        <trans-unit id="0336bfa7474ae8caa1c7da67673f6011e594432b" translate="yes" xml:space="preserve">
          <source>ViewModel contain fields that are represented in the view (for
LabelFor,EditorFor,DisplayFor helpers)</source>
          <target state="translated">ViewModel は、ビューで表現されるフィールドを含みます (LabelFor,EditorFor,DisplayFor ヘルパー用)。</target>
        </trans-unit>
        <trans-unit id="362dde63db291f8ff26350eb03d16db0683098ff" translate="yes" xml:space="preserve">
          <source>ViewModel is workaround that patches the conceptual clumsiness of the MVC framework. It represents the 4th layer in the 3-layer Model-View-Controller architecture. when Model (domain model) is not appropriate, too big (bigger than 2-3 fields) for the View, we create smaller ViewModel to pass it to the View.</source>
          <target state="translated">ViewModel は MVC フレームワークの概念的な不器用さを修正するためのワークアラウンドです。3 層の Model-View-Controller アーキテクチャの第 4 層を表します。Model (ドメインモデル)が適切でない場合や、View にとって大きすぎる (2-3 フィールドよりも大きい)場合は、より小さな ViewModel を作成して View に渡します。</target>
        </trans-unit>
        <trans-unit id="34715abf0c1e9b3f517aff36258647a1d12e3e85" translate="yes" xml:space="preserve">
          <source>We can make our BaseViewModel even more re-usable by making it generic:</source>
          <target state="translated">BaseViewModel を汎用的なものにすることで、より再利用しやすいものにすることができます。</target>
        </trans-unit>
        <trans-unit id="8575942cd731d21e3c9c12ecd2f77fb911ff82d2" translate="yes" xml:space="preserve">
          <source>We can take our design a step further and create a base view model class that can be used not only for PresentationOrders, but for any other class as well:</source>
          <target state="translated">デザインをさらに一歩進めて、PresentationOrdersだけでなく、他のクラスでも使用できるベースビューモデルクラスを作成することができます。</target>
        </trans-unit>
        <trans-unit id="27fe3c01127e89d4991e485facdc2dfdf77c99d0" translate="yes" xml:space="preserve">
          <source>What is ViewModel in MVC</source>
          <target state="translated">MVCにおけるViewModelとは</target>
        </trans-unit>
        <trans-unit id="59dbf448d2c61de00cc76afad7cfb7a43e353b97" translate="yes" xml:space="preserve">
          <source>What is a ViewModel and why do we need a ViewModel for an ASP.NET MVC Application?</source>
          <target state="translated">ViewModel とは何か、なぜ ASP.NET MVC アプリケーションに ViewModel が必要なのか?</target>
        </trans-unit>
        <trans-unit id="f82b0e97dd715c410e184bb6c08e65934b5ca31e" translate="yes" xml:space="preserve">
          <source>When deleting a record, I normally follow the same path as with the edit view model. I would also have a URL, for example:</source>
          <target state="translated">レコードを削除するとき、私は通常、編集ビューモデルと同じパスに従います。私はまた、例えばURLを持っているでしょう。</target>
        </trans-unit>
        <trans-unit id="78e0a655e7144b9be0d4b6b6603f1084fa30e450" translate="yes" xml:space="preserve">
          <source>When editing employee data (an employee that has already been added to the database) it wouldn&amp;rsquo;t differ much from my example above.  Create a view model, call it for example &lt;code&gt;EditEmployeeViewModel&lt;/code&gt;. Only have the data that you want to edit in this view model, like first name and last name. Edit the data and click the submit button. I wouldn&amp;rsquo;t worry too much about the &lt;code&gt;Id&lt;/code&gt; field because the &lt;code&gt;Id&lt;/code&gt; value will probably been in the URL, for example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;従業員データ（既にデータベースに追加されている従業員）を編集する場合、上記の例と大差ありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビューモデルを作成し、たとえば&lt;/font&gt;&lt;/font&gt; &lt;code&gt;EditEmployeeViewModel&lt;/code&gt; と呼び&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このビューモデルで編集したいデータ（姓、名など）のみを含めます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;データを編集し、送信ボタンをクリックします。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は約あまり心配はない&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ので、フィールド&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値は、おそらく例えば、URLになってます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ffab00c82c200ae2679aaae4659aa6adc58110d" translate="yes" xml:space="preserve">
          <source>When loading the view/page, the create action method in your employee controller will create an instance of this view model, populate any fields if required, and then pass this view model to the view/page:</source>
          <target state="translated">ビューページをロードする際、従業員コントローラのcreate actionメソッドは、このビューモデルのインスタンスを作成し、必要に応じてフィールドを入力し、このビューモデルをビューページに渡します。</target>
        </trans-unit>
        <trans-unit id="72c4f619085b94af5e15383c1cb9cefa8cdfb289" translate="yes" xml:space="preserve">
          <source>When the view loads up for the first time I would get the employee&amp;rsquo;s data from the database using the &lt;code&gt;Id&lt;/code&gt; of 3. I would then just display static text on my view/page so that the user can see what employee is being deleted. When the user clicks the Delete button, I would just use the &lt;code&gt;Id&lt;/code&gt; value of 3 and pass it to my repository layer. You only need the &lt;code&gt;Id&lt;/code&gt; to delete a record from the table.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビューが初めて読み込まれるとき、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;3 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用してデータベースから従業員のデータを取得します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。次に、ユーザーがどの従業員が削除されているかを確認できるように、ビュー/ページに静的テキストを表示します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ユーザーが[削除]ボタンをクリックすると、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値3を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用して、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それをリポジトリレイヤーに渡します。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必要なのは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、テーブルからレコードを削除する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合だけです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="60f4d77148cd9cb2e8b3f820285a972e93d7457c" translate="yes" xml:space="preserve">
          <source>Which produces this result (screen is taken after submitting form, with validation messages):</source>
          <target state="translated">これはこのような結果を生成します(画面はフォームを送信した後に撮影され、検証メッセージが表示されます)。</target>
        </trans-unit>
        <trans-unit id="af219870105d660c40974d481c6f445bbb293a95" translate="yes" xml:space="preserve">
          <source>You can specify easily display templates for view models and reuse them in many places using DisplayFor or EditorFor helpers.</source>
          <target state="translated">DisplayForやEditorForのヘルパーを使って、ビューモデルの表示テンプレートを簡単に指定し、様々な場所で再利用することができます。</target>
        </trans-unit>
        <trans-unit id="52fadbc15fec74384a432f20937533ae9caf336b" translate="yes" xml:space="preserve">
          <source>You might only want specific properties, so this allows you to only load those and not additional unneccesary properties</source>
          <target state="translated">特定のプロパティだけが必要な場合もあるでしょうから、これを使うことでそれらのプロパティだけをロードして、不必要なプロパティを追加しないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="046abf42fe38709c73c082b01e30a42673f2c0f0" translate="yes" xml:space="preserve">
          <source>Your controller methods and your models will be small, easily testable and to the point.</source>
          <target state="translated">あなたのコントローラのメソッドとモデルは、小さく、簡単にテスト可能で、要点を押さえたものになります。</target>
        </trans-unit>
        <trans-unit id="329ed648e659670fd193a27344d7cd539f996a1d" translate="yes" xml:space="preserve">
          <source>Your view/page might look like this (assuming you are using &lt;code&gt;ASP.NET MVC&lt;/code&gt; and the &lt;code&gt;Razor&lt;/code&gt; view engine):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビュー/ページは次のようになります（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ASP.NET MVC&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Razor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビューエンジン&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用している場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="892c65ec6b04eec1e3b1acf11b73bee74b3373a8" translate="yes" xml:space="preserve">
          <source>the code above will throw an error...</source>
          <target state="translated">上記のコードではエラーが発生します...</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
