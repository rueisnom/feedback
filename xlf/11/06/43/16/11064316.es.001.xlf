<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/11064316">
    <body>
      <group id="11064316">
        <trans-unit id="091d7604521f03fbab270293c84abd2e70da5fb8" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are &lt;strong&gt;composite objects&lt;/strong&gt; that contain properties that consist of application data as well as properties that are used by application code.  This characteristic is crucial when designing the view model for reusability and is discussed in the examples below.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Son &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objetos compuestos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que contienen propiedades que consisten en datos de la aplicaci&amp;oacute;n, as&amp;iacute; como propiedades que utiliza el c&amp;oacute;digo de la aplicaci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta caracter&amp;iacute;stica es crucial al dise&amp;ntilde;ar el modelo de vista para su reutilizaci&amp;oacute;n y se discute en los ejemplos a continuaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71c8fcb4369ecbce1cadce629ab789c7a425003c" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are business objects &amp;ndash; their definition is dependent on application data.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Son objetos comerciales: su definici&amp;oacute;n depende de los datos de la aplicaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8e5133166dfde93ad82f68548991bff539b30864" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are the single source of data used to render a page or screen.  Usually this means that a view model will expose every property that any control on the page will need to render itself correctly.  Making the view model the single source of data for the view greatly improves its capability and value for unit testing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Son la &amp;uacute;nica fuente de datos utilizada para representar una p&amp;aacute;gina o pantalla. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo general, esto significa que un modelo de vista expondr&amp;aacute; cada propiedad que cualquier control en la p&amp;aacute;gina necesitar&amp;aacute; para representarse correctamente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hacer que el modelo de vista sea la &amp;uacute;nica fuente de datos para la vista mejora en gran medida su capacidad y valor para las pruebas unitarias.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="02b2e16664ca73e1abe6e37f7febb336eece814d" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are written &amp;ldquo;per page&amp;rdquo; or &amp;ldquo;per screen&amp;rdquo;.  A unique View Model is typically written for every page or screen in an application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Est&amp;aacute;n escritos &quot;por p&amp;aacute;gina&quot; o &quot;por pantalla&quot;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo general, se escribe un modelo de vista &amp;uacute;nico para cada p&amp;aacute;gina o pantalla de una aplicaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4dadb08ae807a9a03438ec13b1f5b7f4e1802702" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Contain application code.  View Models usually contain methods that are called during rendering and when the user is interacting with the page.  This code typically relates to event handling, animation, visibility of controls, styling, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Contiene el c&amp;oacute;digo de la aplicaci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los modelos de vista generalmente contienen m&amp;eacute;todos que se invocan durante la representaci&amp;oacute;n y cuando el usuario interact&amp;uacute;a con la p&amp;aacute;gina. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Este c&amp;oacute;digo generalmente se relaciona con el manejo de eventos, la animaci&amp;oacute;n, la visibilidad de los controles, el estilo, etc.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f8dd38f2c3ef2267225a10c37937fb1e65b83bd5" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Contain code that calls business services for the purpose of retrieving data or sending it to a database server.  This code is often mistakenly placed in a controller. Calling business services from a controller usually limits the usefulness of the view model for unit testing.  To be clear, view models themselves should not contain business logic but should make calls to services which do contain business logic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Contener c&amp;oacute;digo que llame a servicios comerciales con el prop&amp;oacute;sito de recuperar datos o enviarlos a un servidor de base de datos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Este c&amp;oacute;digo a menudo se coloca por error en un controlador. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Llamar a los servicios comerciales desde un controlador generalmente limita la utilidad del modelo de vista para pruebas unitarias. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para ser claros, los modelos de vista en s&amp;iacute; mismos no deben contener l&amp;oacute;gica empresarial, sino que deben realizar llamadas a servicios que s&amp;iacute; contienen l&amp;oacute;gica empresarial.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="021c8e92e046cb7fb5232384ab062c9875b5cbfd" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Contain mostly properties. Code is typically limited to formatting data or converting to or from a DTO.  Presentation Models should not contain business logic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Contienen principalmente propiedades. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El c&amp;oacute;digo generalmente se limita a formatear datos o convertir ao desde un DTO. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los modelos de presentaci&amp;oacute;n no deben contener l&amp;oacute;gica empresarial.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="857491b6cd3a3ecb0e3f8827e94a51936304c24e" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often contain properties of a different base type than a DTO.  For example dollar amounts may be represented as strings so they can contain commas and a currency symbol.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; A menudo contienen propiedades de un tipo base diferente que un DTO. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, los montos en d&amp;oacute;lares pueden representarse como cadenas para que puedan contener comas y un s&amp;iacute;mbolo de moneda.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e22c1184a19f283ebf5e7adbf12c0f7a1715b41f" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often contain properties which are other view models for other pages or screens.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; A menudo contienen propiedades que son otros modelos de vista para otras p&amp;aacute;ginas o pantallas.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="25911f773ca4593c19b1e48346c8399bb77a595a" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often defined by how they are used as well as their object characteristics.  In other words, a simple DTO that is used as the backing model for rendering a grid is in fact also a presentation model in the context of that grid.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; A menudo se define por c&amp;oacute;mo se usan, as&amp;iacute; como por sus caracter&amp;iacute;sticas de objeto. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En otras palabras, un DTO simple que se utiliza como modelo de respaldo para representar una cuadr&amp;iacute;cula es, de hecho, tambi&amp;eacute;n un modelo de presentaci&amp;oacute;n en el contexto de esa cuadr&amp;iacute;cula.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c6a66f7efdf4a5e06bab68ad2558579c130c863f" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often present a denormalized view of data.  That is, they often combine properties from multiple DTO&amp;rsquo;s.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; A menudo presentan una vista desnormalizada de datos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es decir, a menudo combinan propiedades de m&amp;uacute;ltiples DTO.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6e4898ca5f9d6eb2c49f1bea5369a60c4cf54965" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Primarily used for transporting data to and from a database.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Se utiliza principalmente para transportar datos hacia y desde una base de datos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e335886ac2f2cf3f381eaa744f2b290f0f4ce886" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties exactly or closely match fields on a specific table in a data store.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Las propiedades coinciden exacta o exactamente con los campos de una tabla espec&amp;iacute;fica en un almac&amp;eacute;n de datos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c61f4a5d65b5e385b3d98c5edfd58bbe6c75219e" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties that are used to display application state such as error messages, user name, status, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Propiedades que se utilizan para mostrar el estado de la aplicaci&amp;oacute;n, como mensajes de error, nombre de usuario, estado, etc.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="44152c81772618111892f0b7395aac169c9b852d" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties used for data binding such as list objects and properties that hold intermediate data that is input by the user.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Propiedades utilizadas para el enlace de datos, como objetos de lista y propiedades que contienen datos intermedios que ingresa el usuario.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="21d410d4b0bf8af1d102f651deae6feaf00cba49" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties used to format, display, stylize, or animate controls.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Propiedades utilizadas para formatear, mostrar, estilizar o animar controles.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5aae7795624e8dca926efd2b235f5ecf57ae583d" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Usually contain properties only &amp;ndash; no code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Por lo general, solo contienen propiedades, sin c&amp;oacute;digo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e1f255cb7e3440d6e3b86db25341f9d63f75478a" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Usually derive from a base class since most pages and screens share common properties.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Generalmente derivan de una clase base ya que la mayor&amp;iacute;a de las p&amp;aacute;ginas y pantallas comparten propiedades comunes.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9227c0bb1dad45263adf473f0da3cd39ae90f89c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ASP.NET MVC view can't have more than one model so if we need to display properties from more than one models into the view, it is not possible. ViewModel serves this purpose.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La vista ASP.NET MVC no puede tener m&amp;aacute;s de un modelo, por lo que si necesitamos mostrar propiedades de m&amp;aacute;s de un modelo en la vista, no es posible. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModel sirve para este prop&amp;oacute;sito.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="47ecad6905ac0c9527eeca8989f3ed9315b6069e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Composition over inheritance&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Composici&amp;oacute;n sobre herencia&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6cac57bc3539db0f79006be49553f758c9944982" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View Model Composition&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ver composici&amp;oacute;n del modelo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="23c62b9e31fb317d9e700732e0edb1adc0d493ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Data Transfer Objects a.k.a &amp;ldquo;Model&amp;rdquo;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Objetos de transferencia de datos, tambi&amp;eacute;n conocido como &quot;Modelo&quot;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fcc90465fc1eb3567b153a345917c67232ee01d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Designing ViewModel&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dise&amp;ntilde;ando ViewModel&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dfd516553a0c9858f016c9102534da6d1fc06d58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit: I updated this answer on my Blog:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Editar: Actualic&amp;eacute; esta respuesta en mi Blog:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4e6d967aabeacd3870e306f89d67a1c8ccd3c930" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Presentation Models&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Modelos de presentaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="edc563f12ca05992aa529daff2c5530df492d181" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Presenting the viewmodel in the view&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Presentaci&amp;oacute;n del modelo de vista en la vista&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="57f268bfc3a39fc05382bd8b6501103c2bad7346" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The key thing to remember is that the view model only represents the data that you want to use&lt;/strong&gt;, nothing else.  You can imagine all the unnecessary code and validation if you have a domain model with 30 properties and you only want to update a single value.  Given this scenario you would only have this one value/property in the view model and not all the properties that are in the domain object.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La clave para recordar es que el modelo de vista solo representa los datos que desea usar&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , nada m&amp;aacute;s. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede imaginar todo el c&amp;oacute;digo y la validaci&amp;oacute;n innecesarios si tiene un modelo de dominio con 30 propiedades y solo desea actualizar un solo valor. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dado este escenario, solo tendr&amp;iacute;a este valor / propiedad en el modelo de vista y no todas las propiedades que est&amp;aacute;n en el objeto de dominio.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2ce37be823ac6fcdb8d035e0cb1591c15610d45b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;View Models&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ver modelos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="acd627ae1902dfff170bb19bfeb185edff1d043f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;View model&lt;/strong&gt; is a class that represents the data model used in a specific view. We could use this class as a model for a login page:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El modelo de vista&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una clase que representa el modelo de datos utilizado en una vista espec&amp;iacute;fica. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Podr&amp;iacute;amos usar esta clase como modelo para una p&amp;aacute;gina de inicio de sesi&amp;oacute;n:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3eb7989fc7b3268a75e31973397bb4f2b77d2723" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Working with Action&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Trabajando con acci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="784698e6a41a9d10172d3f4ce6ee6685a991721c" translate="yes" xml:space="preserve">
          <source>@model ProjectName.Model.StudentViewModel</source>
          <target state="translated">@model ProjectName.Model.StudentViewModel</target>
        </trans-unit>
        <trans-unit id="06a9eb888b55eaa767a102d8d7022d31558b556f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;view model&lt;/code&gt; represents the data that you want to display on your view/page, whether it be used for static text or for input values (like textboxes and dropdown lists) that can be added to the database (or edited). It is something different than your &lt;code&gt;domain model&lt;/code&gt;. It is a model for the view.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;view model&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; representa los datos que desea mostrar en su vista / p&amp;aacute;gina, ya sea que se use para texto est&amp;aacute;tico o para valores de entrada (como cuadros de texto y listas desplegables) que se pueden agregar a la base de datos (o editar). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es algo diferente a su &lt;/font&gt;&lt;/font&gt; &lt;code&gt;domain model&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es un modelo para la vista.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7608e08d4f0b61ea5e48d5fd217b4a94edd98648" translate="yes" xml:space="preserve">
          <source>A Data Transfer Object (DTO) is a class with properties that match a table schema in a database.  DTO&amp;rsquo;s are named for their common usage for shuttling data to and from a data store.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un objeto de transferencia de datos (DTO) es una clase con propiedades que coinciden con un esquema de tabla en una base de datos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los DTO se nombran por su uso com&amp;uacute;n para transferir datos hacia y desde un almac&amp;eacute;n de datos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db643f1ec44d2c837e9ab61d91025bd7d3d53e82" translate="yes" xml:space="preserve">
          <source>A controller is responsible for the page flow</source>
          <target state="translated">Un controlador es responsable del flujo de páginas</target>
        </trans-unit>
        <trans-unit id="e3b4707fbc3e3d5a32deeabab22085bbd5da453c" translate="yes" xml:space="preserve">
          <source>A lot of big examples, let me explain in clear and crispy way.</source>
          <target state="translated">Un montón de grandes ejemplos,déjenme explicarles de manera clara y crujiente.</target>
        </trans-unit>
        <trans-unit id="0d466d07d557affcf02c5d91f34f48707173caa3" translate="yes" xml:space="preserve">
          <source>A model is responsible for the business logic</source>
          <target state="translated">Un modelo es responsable de la lógica del negocio</target>
        </trans-unit>
        <trans-unit id="7c0ca4a31f487009bebc32f78ce8247e830d54b1" translate="yes" xml:space="preserve">
          <source>A presentation model is a &lt;em&gt;utility&lt;/em&gt; class that is used to render data on a screen or report.  Presentation models are typically used to model complex data structures that are composed from data from multiple DTO&amp;rsquo;s.  Presentation models often represent a denormalized view of data.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un modelo de presentaci&amp;oacute;n es una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;clase de &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;utilidad&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que se utiliza para representar datos en una pantalla o informe. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los modelos de presentaci&amp;oacute;n generalmente se usan para modelar estructuras de datos complejas que se componen de datos de m&amp;uacute;ltiples DTO. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los modelos de presentaci&amp;oacute;n a menudo representan una vista desnormalizada de datos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="979814b66cb168384578069cfbe0cf257d7bd4fb" translate="yes" xml:space="preserve">
          <source>A view model is a conceptual model of data. Its use is to for example either get a subset or combine data from different tables.</source>
          <target state="translated">Un modelo de vista es un modelo conceptual de datos.Se utiliza,por ejemplo,para obtener un subconjunto o combinar datos de diferentes tablas.</target>
        </trans-unit>
        <trans-unit id="29517336bce9403bbabf349182e99b37661f6c22" translate="yes" xml:space="preserve">
          <source>A view model is similar to a presentation model in that is a backing class for rendering a view.  However it is very different from a Presentation Model or a DTO in how it is constructed.  View models often contain the same properties as presentation models and DTO&amp;rsquo;s and for this reason they are often confused one for the other.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un modelo de vista es similar a un modelo de presentaci&amp;oacute;n, ya que es una clase de respaldo para representar una vista. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, es muy diferente de un Modelo de Presentaci&amp;oacute;n o un DTO en cuanto a c&amp;oacute;mo se construye. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los modelos de vista a menudo contienen las mismas propiedades que los modelos de presentaci&amp;oacute;n y los DTO y, por esta raz&amp;oacute;n, a menudo se confunden uno con el otro.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2d122dfbc586108e4d0e045c5a4088f267f77650" translate="yes" xml:space="preserve">
          <source>A view model might not only have data from one database table. It can combine data from another table. Take my example above about adding a new employee record. Besides adding just the first and last names you might also want to add the department of the employee. This list of departments will come from your &lt;code&gt;Departments&lt;/code&gt; table. So now you have data from the &lt;code&gt;Employees&lt;/code&gt; and &lt;code&gt;Departments&lt;/code&gt; tables in one view model. You will just then need to add the following two properties to your view model and populate it with data:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un modelo de vista no solo puede tener datos de una tabla de base de datos. Puede combinar datos de otra tabla. Tome mi ejemplo anterior sobre agregar un nuevo registro de empleado. Adem&amp;aacute;s de agregar solo el nombre y el apellido, es posible que tambi&amp;eacute;n desee agregar el departamento del empleado. Esta lista de departamentos vendr&amp;aacute; de su &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tabla de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Departments&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . As&amp;iacute; que ahora tiene datos de las &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tablas &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Employees&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Departments&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en un modelo de vista. Solo tendr&amp;aacute; que agregar las siguientes dos propiedades a su modelo de vista y llenarlo con datos:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="18421b8d98d053ede53aa47964692b02a912d66b" translate="yes" xml:space="preserve">
          <source>An example of a model in a web application could be:</source>
          <target state="translated">Un ejemplo de un modelo en una aplicación web podría ser:</target>
        </trans-unit>
        <trans-unit id="8c5608853992951b4bd783c7430ce80a18111116" translate="yes" xml:space="preserve">
          <source>An example presentation model:</source>
          <target state="translated">Un ejemplo de modelo de presentación:</target>
        </trans-unit>
        <trans-unit id="12c9ef1f0ac8e4b4eaecd1d24444d26dcf26204d" translate="yes" xml:space="preserve">
          <source>And actions:</source>
          <target state="translated">Y acciones:</target>
        </trans-unit>
        <trans-unit id="32b125fff82d8b61b77572d85c31866f061d2d80" translate="yes" xml:space="preserve">
          <source>And with Data Annotations it might look this:</source>
          <target state="translated">Y con las Anotaciones de Datos podría verse así:</target>
        </trans-unit>
        <trans-unit id="ee07849c78e92b6c9ec11549edbd1c54d9e97b91" translate="yes" xml:space="preserve">
          <source>Another example of a view model and its retrieval: We want to display basic user data, his privileges and users name. We create a special view model, which contains only the required fields. We retrieve data from different entities from database, but the view is only aware of the view model class:</source>
          <target state="translated">Otro ejemplo de un modelo de vista y su recuperación:Queremos mostrar los datos básicos del usuario,sus privilegios y su nombre de usuario.Creamos un modelo de vista especial,que contiene sólo los campos obligatorios.Recuperamos datos de diferentes entidades de la base de datos,pero la vista sólo conoce la clase de modelo de vista:</target>
        </trans-unit>
        <trans-unit id="c9a2a634871a0bacbbb2bcba04ceea845df0f23c" translate="yes" xml:space="preserve">
          <source>Another point, you don&amp;rsquo;t really need a view model for every action. If it is simple data then it would be fine to only use &lt;code&gt;EmployeeViewModel&lt;/code&gt;. If it is complex views/pages and they differ from each other then I would suggest you use separate view models for each.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Otro punto, realmente no necesita un modelo de vista para cada acci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si se trata de datos simples, estar&amp;iacute;a bien usar solo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;EmployeeViewModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si se trata de vistas / p&amp;aacute;ginas complejas y difieren entre s&amp;iacute;, le sugiero que utilice modelos de vista separados para cada una.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30a807962c4d842911cca18dd735b9820c28317b" translate="yes" xml:space="preserve">
          <source>As stated earlier, view models are composite objects in that they combine application properties and business data properties on a single object.  Examples of commonly used application properties that are used on view models are:</source>
          <target state="translated">Como ya se ha dicho,los modelos de vista son objetos compuestos en el sentido de que combinan las propiedades de las aplicaciones y las propiedades de los datos comerciales en un solo objeto.Ejemplos de propiedades de aplicación comúnmente utilizadas en los modelos de visualización son:</target>
        </trans-unit>
        <trans-unit id="f13564fc793a8a2f2c5001293b80cd5b65cc8a6d" translate="yes" xml:space="preserve">
          <source>As you can see it only contains two of the properties. These two properties are also in the employee domain model.  Why is this you may ask?  &lt;code&gt;Id&lt;/code&gt; might not be set from the view, it might be auto generated by the Employee table.  And &lt;code&gt;DateCreated&lt;/code&gt; might also be set in the stored procedure or in the service layer of your application.  So &lt;code&gt;Id&lt;/code&gt; and &lt;code&gt;DateCreated&lt;/code&gt; are not needed in the view model. You might want to display these two properties when you view an employee&amp;rsquo;s details (an employee that has already been captured) as static text.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como puede ver, solo contiene dos de las propiedades. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Estas dos propiedades tambi&amp;eacute;n est&amp;aacute;n en el modelo de dominio de empleado. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Por qu&amp;eacute; es esto lo que puedes preguntar? &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; podr&amp;iacute;a no establecerse desde la vista, podr&amp;iacute;a generarse autom&amp;aacute;ticamente por la tabla Empleado. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;DateCreated&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tambi&amp;eacute;n se puede configurar en el procedimiento almacenado o en la capa de servicio de su aplicaci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;DateCreated&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no son necesarios en el modelo de vista. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es posible que desee mostrar estas dos propiedades cuando vea los detalles de un empleado (un empleado que ya ha sido capturado) como texto est&amp;aacute;tico.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34516062670ac1d4db45943e7dbe90a4d7d929e5" translate="yes" xml:space="preserve">
          <source>As you can see, a view model has many roles:</source>
          <target state="translated">Como pueden ver,un modelo de vista tiene muchos papeles:</target>
        </trans-unit>
        <trans-unit id="7f17218ceb9cb01e6e7e9e9aa432bc220eb9e92b" translate="yes" xml:space="preserve">
          <source>Assume we are writing a web application.  One of the requirements of the application design is that the page title, user name, and application name must be displayed on every page.  If we want to create a page to display a presentation order object, we may modify the presentation model as follows:</source>
          <target state="translated">Supongamos que estamos escribiendo una aplicación web.Uno de los requisitos del diseño de la aplicación es que el título de la página,el nombre de usuario y el nombre de la aplicación deben aparecer en todas las páginas.Si queremos crear una página para mostrar un objeto de orden de presentación,podemos modificar el modelo de presentación de la siguiente manera:</target>
        </trans-unit>
        <trans-unit id="7463aba05ab71a5b6737ae5556ad6f86a21910e0" translate="yes" xml:space="preserve">
          <source>Characteristics of DTO&amp;rsquo;s:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Caracter&amp;iacute;sticas de los DTO:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="86f4c5a2ba2bb5bcef5863f95fddcf2f402f1d49" translate="yes" xml:space="preserve">
          <source>Characteristics of Presentation Models:</source>
          <target state="translated">Características de los modelos de presentación:</target>
        </trans-unit>
        <trans-unit id="bcda80ff10e740640afce89952a9a0c497f395fe" translate="yes" xml:space="preserve">
          <source>Characteristics of View Models:</source>
          <target state="translated">Características de los modelos de vista:</target>
        </trans-unit>
        <trans-unit id="7f7ca519ba25ddf1cdaa868e954528b1bb64bfd5" translate="yes" xml:space="preserve">
          <source>Database tables are usually normalized therefore DTO&amp;rsquo;s are usually normalized also.  This makes them of limited use for presenting data.  However, for certain simple data structures they often do quite well.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las tablas de la base de datos generalmente se normalizan, por lo tanto, los DTO tambi&amp;eacute;n se normalizan. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto los hace de uso limitado para presentar datos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, para ciertas estructuras de datos simples, a menudo funcionan bastante bien.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9ae7f8fac70de032f0536b881084c08503cd96fb" translate="yes" xml:space="preserve">
          <source>Few examples of View Models are below</source>
          <target state="translated">A continuación se presentan algunos ejemplos de modelos de visualización</target>
        </trans-unit>
        <trans-unit id="0256f135a479d495b6f97309a130ec92b420fff0" translate="yes" xml:space="preserve">
          <source>Generally speaking, a view model is an object that contains all the properties and methods necessary to render a view. View model properties are often related to data objects such as customers and orders and in addition they also contain properties related to the page or application itself such as user name, application name etc. View models provide a convenient object to pass to a rendering engine to create a html page.  One of many reasons to use a view model is that view models provide a way to unit test certain presentation tasks such as handling user input, validating data, retrieving data for display, etc.</source>
          <target state="translated">En términos generales,un modelo de vista es un objeto que contiene todas las propiedades y métodos necesarios para renderizar una vista.Las propiedades del modelo de vista suelen estar relacionadas con objetos de datos como clientes y pedidos y,además,también contienen propiedades relacionadas con la página o la aplicación en sí,como el nombre de usuario,el nombre de la aplicación,etc.Los modelos de visualización proporcionan un objeto conveniente para pasar a un motor de renderizado para crear una página html.Una de las muchas razones para utilizar un modelo de vista es que los modelos de vista proporcionan una forma de probar unitariamente ciertas tareas de presentación como el manejo de los datos introducidos por el usuario,la validación de los datos,la recuperación de datos para su visualización,etc.</target>
        </trans-unit>
        <trans-unit id="0ecc5f2f113be01ef1af7af6615d65e0b2559802" translate="yes" xml:space="preserve">
          <source>Here are two examples of what DTO&amp;rsquo;s might look like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; hay dos ejemplos de c&amp;oacute;mo se ver&amp;iacute;an los DTO:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b5752eb70f697d164aee0d46a8a5e9ee4f7bfc27" translate="yes" xml:space="preserve">
          <source>Here is a comparison of Entity models (a.ka. DTO's a.ka. models), Presentation Models, and View Models.</source>
          <target state="translated">Aquí hay una comparación de los modelos de Entidades (también conocidos como modelos de DTO),Modelos de Presentación y Modelos de Vista.</target>
        </trans-unit>
        <trans-unit id="41fc4a53daff6828d2c36dc08d64604023be26b0" translate="yes" xml:space="preserve">
          <source>Here is a small example of &lt;a href=&quot;http://techfunda.com/howto/262/list-data-using-viewmodel&quot;&gt;List data using ViewModel&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; hay un peque&amp;ntilde;o ejemplo de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://techfunda.com/howto/262/list-data-using-viewmodel&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;datos&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lista usando ViewModel&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3bdb4b2444f19c2d0fe752fada6e32503c4b33b2" translate="yes" xml:space="preserve">
          <source>Here is a way we might re-factor the order presentation model such that it become a true view model and will be useful for displaying a single PresentationOrder object or a collection of PresentationOrder objects:</source>
          <target state="translated">He aquí una forma en que podríamos re-factorizar el modelo de presentación de órdenes de tal manera que se convierta en un verdadero modelo de vista y sea útil para mostrar un solo objeto de Orden de Presentación o una colección de objetos de Orden de Presentación:</target>
        </trans-unit>
        <trans-unit id="0a2a50d3fa7ff4100b69d2f8236dcca6fdff8970" translate="yes" xml:space="preserve">
          <source>Hope this will be useful.</source>
          <target state="translated">Espero que esto sea útil.</target>
        </trans-unit>
        <trans-unit id="095b0b70b5a9cab69d8341323e70d4db8884f3cc" translate="yes" xml:space="preserve">
          <source>I am new to ASP.NET MVC. I have a problem with understanding the purpose of a ViewModel.</source>
          <target state="translated">Soy nuevo en ASP.NET MVC.Tengo un problema para entender el propósito de un ViewModel.</target>
        </trans-unit>
        <trans-unit id="9ae564fdfdc1add6404c350c63a78148f7b5df36" translate="yes" xml:space="preserve">
          <source>I didn't read all the posts but every answer seems to be missing one concept that really helped me &quot;get it&quot;...</source>
          <target state="translated">No leí todos los mensajes,pero a cada respuesta parece faltarle un concepto que realmente me ayudó a &quot;entenderlo&quot;...</target>
        </trans-unit>
        <trans-unit id="29fe05d20d4215aef9cfbc0a31e274894e167da3" translate="yes" xml:space="preserve">
          <source>I find myself using ViewModels to pass info into a view/form, and then transfering that data into a valid Model when the form posts back to the controller - also very handy for storing Lists(IEnumerable).</source>
          <target state="translated">Me encuentro usando ViewModels para pasar información a un formulario de vista,y luego transfiriendo esos datos a un modelo válido cuando el formulario vuelve al controlador-también muy útil para almacenar Lists(IEnumerable).</target>
        </trans-unit>
        <trans-unit id="9e24d7239899f9ca10ad64122efd148daa74a551" translate="yes" xml:space="preserve">
          <source>I hope this clears up any confusion that you had about view models and domain models.</source>
          <target state="translated">Espero que esto aclare cualquier confusión que haya tenido sobre los modelos de vista y los modelos de dominio.</target>
        </trans-unit>
        <trans-unit id="24252c1ad530d2526ac3e27970bf24f54019eafb" translate="yes" xml:space="preserve">
          <source>If I get a good example about its working and explanation that would be better.</source>
          <target state="translated">Si me dan un buen ejemplo sobre su funcionamiento y explicación sería mejor.</target>
        </trans-unit>
        <trans-unit id="fb6471d4ff66132ef2b78aefd3fa0f22bdcfd22f" translate="yes" xml:space="preserve">
          <source>If a Model is akin to a database &lt;strong&gt;&lt;em&gt;Table&lt;/em&gt;&lt;/strong&gt;, then a ViewModel is akin to a database &lt;strong&gt;&lt;em&gt;View&lt;/em&gt;&lt;/strong&gt; - A view typically either returns small amounts of data from one table, or, complex sets of data from multiple tables (joins).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si un modelo es similar a una &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tabla de&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; base de datos &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, entonces un modelo de vista es similar a una &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;vista de&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; base de datos &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;: una vista generalmente devuelve peque&amp;ntilde;as cantidades de datos de una tabla o conjuntos complejos de datos de varias tablas (combinaciones).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a33be26cdbdc7f223acadebc849211c36bba0ca8" translate="yes" xml:space="preserve">
          <source>If there are too few view-specific data and/or transformations, you can use the Model itself</source>
          <target state="translated">Si hay muy pocos datos específicos de la vista y/o transformaciones,se puede utilizar el propio Modelo</target>
        </trans-unit>
        <trans-unit id="4843531d7fc5288ce3a4f8b2b896b726f41768cc" translate="yes" xml:space="preserve">
          <source>If you have properties specific to the view, and not related to the DB/Service/Data store, it is a good practice to use ViewModels. Say, you want to leave a checkbox selected based on a DB field (or two) but the DB field itself isn't a boolean. While it is possible to create these properties in the Model itself and keep it hidden from the binding to data, you may not want to clutter the Model depending on the amount of such fields and transactions.</source>
          <target state="translated">Si tiene propiedades específicas para la vista,y no relacionadas con el almacén DBServiceData,es una buena práctica utilizar ViewModels.Digamos que quieres dejar una casilla de verificación seleccionada en base a un campo de BD (o dos)pero el campo de BD en sí no es un booleano.Aunque es posible crear estas propiedades en el propio Modelo y mantenerlo oculto de la vinculación a los datos,es posible que no quieras desordenar el Modelo dependiendo de la cantidad de tales campos y transacciones.</target>
        </trans-unit>
        <trans-unit id="50975c3b578778119e55331e663bf658d0f95499" translate="yes" xml:space="preserve">
          <source>If you want to study code how to setup a &quot;Baseline&quot; web application with ViewModels I can advise to download this code on GitHub: &lt;a href=&quot;https://github.com/ajsaulsberry/BlipAjax&quot;&gt;https://github.com/ajsaulsberry/BlipAjax&lt;/a&gt;. I developed large enterprise applications. When you do this its problematic to setup a good architecture that handles all this &quot;ViewModel&quot; functionality. I think with BlipAjax you will have a very Good &quot;baseline&quot; to start with. Its just a simple website, but great in its simplicity. I like the way they used the English language to point at whats really needed in the application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si desea estudiar el c&amp;oacute;digo de c&amp;oacute;mo configurar una aplicaci&amp;oacute;n web &quot;Baseline&quot; con ViewModels, puedo aconsejarle que descargue este c&amp;oacute;digo en GitHub: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/ajsaulsberry/BlipAjax&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://github.com/ajsaulsberry/BlipAjax&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Desarroll&amp;eacute; aplicaciones para grandes empresas. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando hace esto, es problem&amp;aacute;tico configurar una buena arquitectura que maneje toda esta funcionalidad &quot;ViewModel&quot;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Creo que con BlipAjax tendr&amp;aacute;s una muy buena &quot;l&amp;iacute;nea de base&quot; para comenzar. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es solo un sitio web simple, pero excelente en su simplicidad. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Me gusta la forma en que usaron el idioma ingl&amp;eacute;s para se&amp;ntilde;alar lo que realmente se necesita en la aplicaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6a3c97e12b9a1ccbdf3d8424c6609b00baa9196d" translate="yes" xml:space="preserve">
          <source>In MVC the process is split into 3 different responsibilities:</source>
          <target state="translated">En el MVC el proceso se divide en 3 responsabilidades diferentes:</target>
        </trans-unit>
        <trans-unit id="2d72e29ee7d99b2d5c4d674d77a200110c79124b" translate="yes" xml:space="preserve">
          <source>In ViewModel put only those fields/data that you want to display on 
the view/page.</source>
          <target state="translated">En ViewModel pon sólo los datos de campo que quieras mostrar en la página de vista.</target>
        </trans-unit>
        <trans-unit id="dce4a57fc1720e9f891e0f68e7fc4cdd117eef11" translate="yes" xml:space="preserve">
          <source>Let us say that you have an &lt;code&gt;Employee&lt;/code&gt; class that represents your employee domain model and it contains the following properties (unique identifier, first name, last name and date created):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Supongamos que tiene una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Employee&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que representa el modelo de dominio de su empleado y que contiene las siguientes propiedades (identificador &amp;uacute;nico, nombre, apellido y fecha de creaci&amp;oacute;n):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="77a51cb2e7eadb97bd30de437ef458714cf33e08" translate="yes" xml:space="preserve">
          <source>Looking at the above two classes we can see that one way to think about a view model is that it is a presentation model that contains another presentation model as a property.  The top level presentation model (i.e. view model) contains properties that are relevant to the page or application while presentation model (property) contains properties that are relevant to application data.</source>
          <target state="translated">Si observamos las dos clases anteriores,podemos ver que una forma de pensar en un modelo de vista es que se trata de un modelo de presentación que contiene otro modelo de presentación como una propiedad.El modelo de presentación de nivel superior (es decir,el modelo de vista)contiene propiedades que son relevantes para la página o la aplicación,mientras que el modelo de presentación (propiedad)contiene propiedades que son relevantes para los datos de la aplicación.</target>
        </trans-unit>
        <trans-unit id="e52b8b84a0ff20689f4296eecbe0ffcbf0e3d25a" translate="yes" xml:space="preserve">
          <source>MVC doesn't have a viewmodel: it has a model, view and controller. A viewmodel is part of MVVM (Model-View-Viewmodel). MVVM is derived from the Presentation Model and is popularized in WPF. There should also be a model in MVVM, but most people miss the point of that pattern completely and they will only have a view and a viewmodel. The model in MVC is similar to the model in MVVM.</source>
          <target state="translated">MVC no tiene un modelo de vista:tiene un modelo,una vista y un controlador.Un modelo de vista es parte de MVVM (Modelo-Vista-Modelo de Vista).MVVM se deriva del Modelo de Presentación y se populariza en WPF.También debería haber un modelo en MVVM,pero la mayoría de la gente pierde el punto de ese patrón por completo y sólo tendrán una vista y un modelo de vista.El modelo en MVC es similar al modelo en MVVM.</target>
        </trans-unit>
        <trans-unit id="0007a747ce5507b06eab17bdb0e2de8aa9b638a7" translate="yes" xml:space="preserve">
          <source>MVC is not very suitable for web applications. It is a pattern introduced by Smalltalk for creating desktop applications. A web environment behaves completely different. It doesn't make much sense to copy a 40-year old concept from the desktop development and paste it into a web enviroment. However a lot of people think this is ok, because their application compiles and returns the correct values. That is, in my opinion, not enough to declare a certain design choice as ok.</source>
          <target state="translated">El MVC no es muy adecuado para las aplicaciones web.Es un patrón introducido por Smalltalk para crear aplicaciones de escritorio.Un entorno web se comporta de manera completamente diferente.No tiene mucho sentido copiar un concepto de 40 años de antigüedad del desarrollo de escritorio y pegarlo en un entorno web.Sin embargo,mucha gente piensa que esto está bien,porque su aplicación compila y devuelve los valores correctos.Eso es,en mi opinión,no es suficiente para declarar que una cierta elección de diseño está bien.</target>
        </trans-unit>
        <trans-unit id="c79b14feab9fbcbe613cc41f23adc6adae02bdd7" translate="yes" xml:space="preserve">
          <source>My answer is a bit lengthy but I think it is important to compare view models to other types of commonly used models to understand why they are different and why they are necessary.</source>
          <target state="translated">Mi respuesta es un poco larga,pero creo que es importante comparar los modelos de visión con otros tipos de modelos comúnmente utilizados para entender por qué son diferentes y por qué son necesarios.</target>
        </trans-unit>
        <trans-unit id="8eba30174b6f892cdd849bbf51e7c3fc9fec3d73" translate="yes" xml:space="preserve">
          <source>Now  we use this ViewModel in View</source>
          <target state="translated">Ahora usamos este ViewModel en View</target>
        </trans-unit>
        <trans-unit id="659895d640bf5615ecde5842496c44e98b39693c" translate="yes" xml:space="preserve">
          <source>Now our implementations are effortless:</source>
          <target state="translated">Ahora nuestras implementaciones son sin esfuerzo:</target>
        </trans-unit>
        <trans-unit id="c33d9e59e291008f5fe3aa95e955d7c285c36b6a" translate="yes" xml:space="preserve">
          <source>Now we are able to access all the properties of StudentViewModel and inherited class in View.</source>
          <target state="translated">Ahora podemos acceder a todas las propiedades de StudentViewModel y a la clase heredada en View.</target>
        </trans-unit>
        <trans-unit id="591bd6b2b0e6e6bf85b2261e1527ffe7d3c0375f" translate="yes" xml:space="preserve">
          <source>Now we can simplify our PresentationOrderVM like this:</source>
          <target state="translated">Ahora podemos simplificar nuestra PresentaciónOrdenVM así:</target>
        </trans-unit>
        <trans-unit id="96775092c82616d374ace6d7a2b5fd684f2a92d9" translate="yes" xml:space="preserve">
          <source>Now we create one class and can give it any name, but this format &quot;XyzViewModel&quot; will make it easier to understand. It is inheritance concept.
Now we create a third class with the following name:</source>
          <target state="translated">Ahora creamos una clase y podemos darle cualquier nombre,pero este formato &quot;XyzViewModel&quot; lo hará más fácil de entender.Es un concepto de herencia.Ahora creamos una tercera clase con el siguiente nombre:</target>
        </trans-unit>
        <trans-unit id="56f6d61294c2da51e88d3679b47bf298b7bdf469" translate="yes" xml:space="preserve">
          <source>Now we want to display records student's Name and Subject's Name in View (In MVC), but it's not possible to add more than one classes like:</source>
          <target state="translated">Ahora queremos mostrar los registros del Nombre del Estudiante y el Nombre del Sujeto a la Vista (En MVC),pero no es posible añadir más de una clase como:</target>
        </trans-unit>
        <trans-unit id="d1b202eb2b094f90355bef37b9bc8b31b823c3c6" translate="yes" xml:space="preserve">
          <source>Presentation models are used &amp;ldquo;as needed&amp;rdquo; and &amp;ldquo;where needed&amp;rdquo; (whereas DTO&amp;rsquo;s are usually tied to the database schema).  A presentation model may be used to model data for an entire page, a grid on a page, or a dropdown on a grid on a page. Presentation models often contain properties that are other presentation models.  Presentation models are often constructed for a single-use purpose such as to render a specific grid on a single page.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los modelos de presentaci&amp;oacute;n se usan &quot;seg&amp;uacute;n sea necesario&quot; y &quot;donde sea necesario&quot; (mientras que los DTO generalmente est&amp;aacute;n vinculados al esquema de la base de datos). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Se puede usar un modelo de presentaci&amp;oacute;n para modelar datos para una p&amp;aacute;gina completa, una cuadr&amp;iacute;cula en una p&amp;aacute;gina o un men&amp;uacute; desplegable en una cuadr&amp;iacute;cula en una p&amp;aacute;gina. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los modelos de presentaci&amp;oacute;n a menudo contienen propiedades que son otros modelos de presentaci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los modelos de presentaci&amp;oacute;n a menudo se construyen para un prop&amp;oacute;sito de un solo uso, como representar una grilla espec&amp;iacute;fica en una sola p&amp;aacute;gina.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8ffa8c608739cf046a5f4acf0ce72acebed316f4" translate="yes" xml:space="preserve">
          <source>Retrieval:</source>
          <target state="translated">Retrieval:</target>
        </trans-unit>
        <trans-unit id="ede225ff98051fa3d75a279416af02c28a4902d6" translate="yes" xml:space="preserve">
          <source>Since view reperesents the properties of the ViewModel, hence it is
easy for rendering and maintenance.</source>
          <target state="translated">Dado que la vista repercute en las propiedades del ViewModel,por lo tanto es fácil de renderizar y mantener.</target>
        </trans-unit>
        <trans-unit id="810649a5346ec9759ec597984cd267207680cc84" translate="yes" xml:space="preserve">
          <source>So in above Example Place and Category are the two different entities and PlaceCategory viewmodel is ViewModel which we can use on View.</source>
          <target state="translated">Así que en el ejemplo anterior Lugar y Categoría son las dos entidades diferentes y LugarCategoría es ViewModel que podemos usar en View.</target>
        </trans-unit>
        <trans-unit id="55668866ad670a5721cd3d4b303def755a5f1b9c" translate="yes" xml:space="preserve">
          <source>Take this &lt;code&gt;Id&lt;/code&gt; and pass it through to your repository layer, together with your first name and last name values.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tome este &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y p&amp;aacute;selo a su capa de repositorio, junto con sus valores de nombre y apellido.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c9c0379520c692636f1098086ee64944f61eb925" translate="yes" xml:space="preserve">
          <source>The controller can use it like this:</source>
          <target state="translated">El controlador puede usarlo así:</target>
        </trans-unit>
        <trans-unit id="dac2212ec6ea6f80a65cd7e4c4833a9d4ce8e740" translate="yes" xml:space="preserve">
          <source>The following examples show why the composite nature of view models is important and how we can best construct a View Model that efficient and reusable.</source>
          <target state="translated">Los siguientes ejemplos muestran por qué la naturaleza compuesta de los modelos de vista es importante y cómo podemos construir mejor un modelo de vista que sea eficiente y reutilizable.</target>
        </trans-unit>
        <trans-unit id="fc04ddab544f11f980f798cc18d0d331fbd3fb78" translate="yes" xml:space="preserve">
          <source>The way of creating ViewModel is same as creating Model, the way of creating view for the Viewmodel is same as creating view for Model.</source>
          <target state="translated">La forma de crear ViewModel es la misma que la de crear el Modelo,la forma de crear la vista para el Viewmodel es la misma que la de crear la vista para el Modelo.</target>
        </trans-unit>
        <trans-unit id="0b20cb6512cbb29a4429b759ba44cc79eb0ee528" translate="yes" xml:space="preserve">
          <source>This design might work&amp;hellip; but what if we want to create a page that will display a list of orders?  The PageTitle, UserName, and ApplicationName properties will be repeated and become unwieldy to work with.  Also, what if we want to define some page-level logic in the constructor of the class?  We can no longer do that if we create an instance for every order that will be displayed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Este dise&amp;ntilde;o podr&amp;iacute;a funcionar ... pero &amp;iquest;qu&amp;eacute; pasa si queremos crear una p&amp;aacute;gina que muestre una lista de pedidos? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las propiedades PageTitle, UserName y ApplicationName se repetir&amp;aacute;n y ser&amp;aacute;n dif&amp;iacute;ciles de manejar. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, &amp;iquest;qu&amp;eacute; pasa si queremos definir alguna l&amp;oacute;gica a nivel de p&amp;aacute;gina en el constructor de la clase? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ya no podemos hacer eso si creamos una instancia para cada pedido que se mostrar&amp;aacute;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc3f1aa6ae9c1ae576ba8114ffcb4e62e943c55b" translate="yes" xml:space="preserve">
          <source>To list data from more than entities in a view page &amp;ndash; we can create a
View model and have properties of all the entities for which we want
to list data. Join those database entities and set View model
properties and return to the View to show data of different
entities in one tabular form</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para enumerar datos de m&amp;aacute;s de entidades en una p&amp;aacute;gina de vista, podemos crear un modelo de Vista y tener propiedades de todas las entidades para las que queremos enumerar datos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;Uacute;nase a esas entidades de la base de datos y configure las propiedades del modelo Ver y regrese a la Vista para mostrar datos de diferentes entidades en una forma tabular&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d7a93bb744cd53b65dd6eabcf5a3c928eb5a7df3" translate="yes" xml:space="preserve">
          <source>To summarize, and to directly answer the question that is asked:</source>
          <target state="translated">Para resumir y responder directamente a la pregunta que se hace:</target>
        </trans-unit>
        <trans-unit id="848ace57c7dbc4504e9902c434ff0470b55aa46b" translate="yes" xml:space="preserve">
          <source>Use a mapper when ViewModel become more complex.</source>
          <target state="translated">Usa un mapper cuando ViewModel se vuelva más complejo.</target>
        </trans-unit>
        <trans-unit id="73ed7042fd0b7f5ee31ecb7dc68fc0d76ebd701f" translate="yes" xml:space="preserve">
          <source>Using this view model you can define the view (Razor view engine):</source>
          <target state="translated">Con este modelo de vista se puede definir la vista (motor de la vista de la cuchilla):</target>
        </trans-unit>
        <trans-unit id="7d591ae4859bc24521fd94d00cecdd51f4e7a80b" translate="yes" xml:space="preserve">
          <source>Validation would thus be done only on &lt;code&gt;FirstName&lt;/code&gt; and &lt;code&gt;LastName&lt;/code&gt;.  Using &lt;a href=&quot;https://fluentvalidation.net/&quot;&gt;FluentValidation&lt;/a&gt; you might have validation like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, la validaci&amp;oacute;n solo se realizar&amp;iacute;a en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;FirstName&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;LastName&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Usando &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://fluentvalidation.net/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;FluentValidation&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; puede tener una validaci&amp;oacute;n como esta:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="087b229658bbe1662ba4cdcdb4873d59633cb3d2" translate="yes" xml:space="preserve">
          <source>View Model is a model class that can hold only those properties that is required for a view. It can also contains properties from more than one entities (tables) of the database. As the name suggests, this model is created specific to the View requirements.</source>
          <target state="translated">El modelo de vista es una clase de modelo que puede contener sólo las propiedades necesarias para una vista.También puede contener propiedades de más de una entidad (tablas)de la base de datos.Como su nombre indica,este modelo se crea específicamente para los requisitos de la Vista.</target>
        </trans-unit>
        <trans-unit id="d776d2197476e41176b7c93c2dc025f13b077b72" translate="yes" xml:space="preserve">
          <source>View Model is class which we can use for rendering data on View. Suppose you have two entities Place and PlaceCategory and you want to access data from both entities using a single model then we use ViewModel.</source>
          <target state="translated">El modelo de la Vista es una clase que podemos usar para renderizar los datos de la Vista.Supongamos que tienes dos entidades Place y PlaceCategory y quieres acceder a los datos de ambas entidades usando un único modelo,entonces usamos ViewModel.</target>
        </trans-unit>
        <trans-unit id="f27d834295e2d242c474637acd727f54ea253491" translate="yes" xml:space="preserve">
          <source>View is responsible for presenting the data to the user</source>
          <target state="translated">View se encarga de presentar los datos al usuario</target>
        </trans-unit>
        <trans-unit id="0356ac1237d6bba655d268c89b9c5143d4544bc5" translate="yes" xml:space="preserve">
          <source>View model a is simple class which can contain more than one class property. We use it to inherit all the required properties, e.g. I have two classes Student and Subject</source>
          <target state="translated">El modelo de vista a es una clase simple que puede contener más de una propiedad de clase.Lo usamos para heredar todas las propiedades requeridas,por ejemplo,tengo dos clases:Estudiante y Materia</target>
        </trans-unit>
        <trans-unit id="bf0d1cdb5a6a3644e8bfc760e102d8c45933f5f2" translate="yes" xml:space="preserve">
          <source>View model defines how a view should look (for &lt;code&gt;LabelFor&lt;/code&gt;,&lt;code&gt;EditorFor&lt;/code&gt;,&lt;code&gt;DisplayFor&lt;/code&gt; helpers).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El modelo de vista define c&amp;oacute;mo debe verse una vista (para los &lt;/font&gt;&lt;/font&gt; &lt;code&gt;LabelFor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;EditorFor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;DisplayFor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9d2f4d999b4e8033bb27ab7dc2cb0b933cc2b1f9" translate="yes" xml:space="preserve">
          <source>View model may define only specific fields of a single entity that is
required for the View.</source>
          <target state="translated">El modelo de la Vista puede definir sólo campos específicos de una única entidad que se requiere para la Vista.</target>
        </trans-unit>
        <trans-unit id="a3ad613724e9d48eba6c89b46a17de20911012a5" translate="yes" xml:space="preserve">
          <source>View models can combine values from different database entities.</source>
          <target state="translated">Los modelos de visualización pueden combinar valores de diferentes entidades de la base de datos.</target>
        </trans-unit>
        <trans-unit id="88cc59de60ea78da078768bd0693287c462679fb" translate="yes" xml:space="preserve">
          <source>View models differ from domain models in that view models only contain the data (represented by properties) that you want to use on your view.  For example, lets say that you want to add a new employee record, your view model might look like this:</source>
          <target state="translated">Los modelos de vista difieren de los modelos de dominio en que los modelos de vista sólo contienen los datos (representados por propiedades)que desea utilizar en su vista.Por ejemplo,digamos que quieres añadir un nuevo registro de empleado,tu modelo de vista podría tener este aspecto:</target>
        </trans-unit>
        <trans-unit id="1f8c9f81606302005f84d32d3f69f5ae641d81b8" translate="yes" xml:space="preserve">
          <source>View models documents a view by consisting only fields, that are represented in view.</source>
          <target state="translated">Los modelos de vista documentan una vista consistente sólo en campos,que son representados en la vista.</target>
        </trans-unit>
        <trans-unit id="b2ce5abd60a4d19b5579c94962e64770fc9e8908" translate="yes" xml:space="preserve">
          <source>View models may contain specific validation rules using data annotations or IDataErrorInfo.</source>
          <target state="translated">Los modelos de visualización pueden contener reglas de validación específicas utilizando anotaciones de datos o IDataErrorInfo.</target>
        </trans-unit>
        <trans-unit id="be4918c5414f9100cd5f83485a0270d1c180afa8" translate="yes" xml:space="preserve">
          <source>ViewModel = Model that is created to serve the view.</source>
          <target state="translated">ViewModel=Modelo que se crea para servir a la vista.</target>
        </trans-unit>
        <trans-unit id="79c30b5bc1a474a5144110a6447c9b55277a8b35" translate="yes" xml:space="preserve">
          <source>ViewModel can also be used to insert, update records into more than one entities however the main use of ViewModel is to display columns from multiple entities (model) into a single view.</source>
          <target state="translated">ViewModel también se puede utilizar para insertar,actualizar registros en más de una entidad,sin embargo el uso principal de ViewModel es mostrar columnas de múltiples entidades (modelo)en una sola vista.</target>
        </trans-unit>
        <trans-unit id="e6722051609c05704e6c132b81141178f6c7d623" translate="yes" xml:space="preserve">
          <source>ViewModel can have multiple entities or objects from different data
models or data source.</source>
          <target state="translated">ViewModel puede tener múltiples entidades u objetos de diferentes modelos o fuentes de datos.</target>
        </trans-unit>
        <trans-unit id="33a3551043f854c97d287c49523c956381559fcc" translate="yes" xml:space="preserve">
          <source>ViewModel can have specific validation rules using data annotations
or IDataErrorInfo.</source>
          <target state="translated">ViewModel puede tener reglas de validación específicas usando anotaciones de datos o IDataErrorInfo.</target>
        </trans-unit>
        <trans-unit id="0336bfa7474ae8caa1c7da67673f6011e594432b" translate="yes" xml:space="preserve">
          <source>ViewModel contain fields that are represented in the view (for
LabelFor,EditorFor,DisplayFor helpers)</source>
          <target state="translated">ViewModel contiene los campos que se representan en la vista (para los ayudantes LabelFor,EditorFor,DisplayFor)</target>
        </trans-unit>
        <trans-unit id="362dde63db291f8ff26350eb03d16db0683098ff" translate="yes" xml:space="preserve">
          <source>ViewModel is workaround that patches the conceptual clumsiness of the MVC framework. It represents the 4th layer in the 3-layer Model-View-Controller architecture. when Model (domain model) is not appropriate, too big (bigger than 2-3 fields) for the View, we create smaller ViewModel to pass it to the View.</source>
          <target state="translated">ViewModel es una solución alternativa que parchea la torpeza conceptual del marco MVC.Representa la 4ª capa en la arquitectura de 3 capas Modelo-Vista-Controlador.Cuando el Modelo (modelo de dominio)no es apropiado,demasiado grande (más de 2-3 campos)para la Vista,creamos un Modelo de Vista más pequeño para pasarlo a la Vista.</target>
        </trans-unit>
        <trans-unit id="34715abf0c1e9b3f517aff36258647a1d12e3e85" translate="yes" xml:space="preserve">
          <source>We can make our BaseViewModel even more re-usable by making it generic:</source>
          <target state="translated">Podemos hacer que nuestro BaseViewModel sea aún más reutilizable haciéndolo genérico:</target>
        </trans-unit>
        <trans-unit id="8575942cd731d21e3c9c12ecd2f77fb911ff82d2" translate="yes" xml:space="preserve">
          <source>We can take our design a step further and create a base view model class that can be used not only for PresentationOrders, but for any other class as well:</source>
          <target state="translated">Podemos llevar nuestro diseño un paso más allá y crear una clase de modelo de vista base que se puede utilizar no sólo para PresentationOrders,sino para cualquier otra clase también:</target>
        </trans-unit>
        <trans-unit id="27fe3c01127e89d4991e485facdc2dfdf77c99d0" translate="yes" xml:space="preserve">
          <source>What is ViewModel in MVC</source>
          <target state="translated">¿Qué es ViewModel en MVC</target>
        </trans-unit>
        <trans-unit id="59dbf448d2c61de00cc76afad7cfb7a43e353b97" translate="yes" xml:space="preserve">
          <source>What is a ViewModel and why do we need a ViewModel for an ASP.NET MVC Application?</source>
          <target state="translated">¿Qué es un ViewModel y por qué necesitamos un ViewModel para una aplicación ASP.NET MVC?</target>
        </trans-unit>
        <trans-unit id="f82b0e97dd715c410e184bb6c08e65934b5ca31e" translate="yes" xml:space="preserve">
          <source>When deleting a record, I normally follow the same path as with the edit view model. I would also have a URL, for example:</source>
          <target state="translated">Cuando borro un registro,normalmente sigo el mismo camino que con el modelo de vista de edición.También tendría una URL,por ejemplo:</target>
        </trans-unit>
        <trans-unit id="78e0a655e7144b9be0d4b6b6603f1084fa30e450" translate="yes" xml:space="preserve">
          <source>When editing employee data (an employee that has already been added to the database) it wouldn&amp;rsquo;t differ much from my example above.  Create a view model, call it for example &lt;code&gt;EditEmployeeViewModel&lt;/code&gt;. Only have the data that you want to edit in this view model, like first name and last name. Edit the data and click the submit button. I wouldn&amp;rsquo;t worry too much about the &lt;code&gt;Id&lt;/code&gt; field because the &lt;code&gt;Id&lt;/code&gt; value will probably been in the URL, for example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Al editar datos de empleados (un empleado que ya se ha agregado a la base de datos), no diferir&amp;iacute;a mucho de mi ejemplo anterior. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cree un modelo de vista, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;EditEmployeeViewModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , por ejemplo, &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;EditEmployeeViewModel&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Solo tenga los datos que desea editar en este modelo de vista, como nombre y apellido. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Edite los datos y haga clic en el bot&amp;oacute;n enviar. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No me preocupar&amp;iacute;a demasiado por el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;campo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; porque el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valor de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; probablemente estar&amp;aacute; en la URL, por ejemplo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ffab00c82c200ae2679aaae4659aa6adc58110d" translate="yes" xml:space="preserve">
          <source>When loading the view/page, the create action method in your employee controller will create an instance of this view model, populate any fields if required, and then pass this view model to the view/page:</source>
          <target state="translated">Al cargar la página de vista,el método de acción de creación en el controlador de empleados creará una instancia de este modelo de vista,rellenará los campos si es necesario y luego pasará este modelo de vista a la página de vista:</target>
        </trans-unit>
        <trans-unit id="72c4f619085b94af5e15383c1cb9cefa8cdfb289" translate="yes" xml:space="preserve">
          <source>When the view loads up for the first time I would get the employee&amp;rsquo;s data from the database using the &lt;code&gt;Id&lt;/code&gt; of 3. I would then just display static text on my view/page so that the user can see what employee is being deleted. When the user clicks the Delete button, I would just use the &lt;code&gt;Id&lt;/code&gt; value of 3 and pass it to my repository layer. You only need the &lt;code&gt;Id&lt;/code&gt; to delete a record from the table.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando la vista se carga por primera vez, obten&amp;iacute;a los datos del empleado de la base de datos utilizando el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; .&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 3. Luego, simplemente mostraba texto est&amp;aacute;tico en mi vista / p&amp;aacute;gina para que el usuario pueda ver qu&amp;eacute; empleado se est&amp;aacute; eliminando. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando el usuario hace clic en el bot&amp;oacute;n Eliminar, simplemente usar&amp;iacute;a el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valor de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de 3 y lo pasar&amp;iacute;a a mi capa de repositorio. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Solo necesita el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para eliminar un registro de la tabla.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="60f4d77148cd9cb2e8b3f820285a972e93d7457c" translate="yes" xml:space="preserve">
          <source>Which produces this result (screen is taken after submitting form, with validation messages):</source>
          <target state="translated">Lo que produce este resultado (la pantalla se toma después de enviar el formulario,con mensajes de validación):</target>
        </trans-unit>
        <trans-unit id="af219870105d660c40974d481c6f445bbb293a95" translate="yes" xml:space="preserve">
          <source>You can specify easily display templates for view models and reuse them in many places using DisplayFor or EditorFor helpers.</source>
          <target state="translated">Puede especificar fácilmente plantillas de visualización para los modelos de vista y reutilizarlas en muchos lugares utilizando los ayudantes de DisplayFor o EditorFor.</target>
        </trans-unit>
        <trans-unit id="52fadbc15fec74384a432f20937533ae9caf336b" translate="yes" xml:space="preserve">
          <source>You might only want specific properties, so this allows you to only load those and not additional unneccesary properties</source>
          <target state="translated">Puede que sólo quieras propiedades específicas,así que esto te permite cargar sólo aquellas y no propiedades adicionales innecesarias</target>
        </trans-unit>
        <trans-unit id="046abf42fe38709c73c082b01e30a42673f2c0f0" translate="yes" xml:space="preserve">
          <source>Your controller methods and your models will be small, easily testable and to the point.</source>
          <target state="translated">Sus métodos de control y sus modelos serán pequeños,fácilmente comprobables y al grano.</target>
        </trans-unit>
        <trans-unit id="329ed648e659670fd193a27344d7cd539f996a1d" translate="yes" xml:space="preserve">
          <source>Your view/page might look like this (assuming you are using &lt;code&gt;ASP.NET MVC&lt;/code&gt; and the &lt;code&gt;Razor&lt;/code&gt; view engine):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Su vista / p&amp;aacute;gina podr&amp;iacute;a verse as&amp;iacute; (suponiendo que est&amp;eacute; usando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ASP.NET MVC&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;motor de vista &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Razor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="892c65ec6b04eec1e3b1acf11b73bee74b3373a8" translate="yes" xml:space="preserve">
          <source>the code above will throw an error...</source>
          <target state="translated">el código de arriba arrojará un error...</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
