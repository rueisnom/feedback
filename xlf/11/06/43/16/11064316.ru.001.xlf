<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/11064316">
    <body>
      <group id="11064316">
        <trans-unit id="091d7604521f03fbab270293c84abd2e70da5fb8" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are &lt;strong&gt;composite objects&lt;/strong&gt; that contain properties that consist of application data as well as properties that are used by application code.  This characteristic is crucial when designing the view model for reusability and is discussed in the examples below.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; являются &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;составными объектами,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; которые содержат свойства, которые состоят из данных приложения, а также свойств, которые используются кодом приложения. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Эта характеристика имеет решающее значение при разработке модели представления для повторного использования и обсуждается в примерах ниже.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71c8fcb4369ecbce1cadce629ab789c7a425003c" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are business objects &amp;ndash; their definition is dependent on application data.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; являются бизнес-объектами - их определение зависит от данных приложения.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8e5133166dfde93ad82f68548991bff539b30864" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are the single source of data used to render a page or screen.  Usually this means that a view model will expose every property that any control on the page will need to render itself correctly.  Making the view model the single source of data for the view greatly improves its capability and value for unit testing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Являются ли единственным источником данных, используемых для отображения страницы или экрана. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Обычно это означает, что модель представления будет предоставлять все свойства, которые любой элемент управления на странице должен будет правильно отображать. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Создание модели представления в качестве единственного источника данных для представления значительно улучшает его возможности и ценность для модульного тестирования.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="02b2e16664ca73e1abe6e37f7febb336eece814d" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are written &amp;ldquo;per page&amp;rdquo; or &amp;ldquo;per screen&amp;rdquo;.  A unique View Model is typically written for every page or screen in an application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; написаны &amp;laquo;на страницу&amp;raquo; или &amp;laquo;на экран&amp;raquo;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Уникальная модель представления обычно пишется для каждой страницы или экрана приложения.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4dadb08ae807a9a03438ec13b1f5b7f4e1802702" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Contain application code.  View Models usually contain methods that are called during rendering and when the user is interacting with the page.  This code typically relates to event handling, animation, visibility of controls, styling, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Содержать код приложения. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модели представления обычно содержат методы, которые вызываются во время рендеринга и когда пользователь взаимодействует со страницей. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Этот код обычно относится к обработке событий, анимации, видимости элементов управления, стилям и т. Д.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f8dd38f2c3ef2267225a10c37937fb1e65b83bd5" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Contain code that calls business services for the purpose of retrieving data or sending it to a database server.  This code is often mistakenly placed in a controller. Calling business services from a controller usually limits the usefulness of the view model for unit testing.  To be clear, view models themselves should not contain business logic but should make calls to services which do contain business logic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Содержат код, который вызывает бизнес-сервисы с целью извлечения данных или отправки их на сервер базы данных. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Этот код часто ошибочно помещается в контроллер. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вызов бизнес-сервисов из контроллера обычно ограничивает полезность модели представления для модульного тестирования. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Чтобы было ясно, сами модели представлений не должны содержать бизнес-логику, а должны вызывать сервисы, которые содержат бизнес-логику.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="021c8e92e046cb7fb5232384ab062c9875b5cbfd" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Contain mostly properties. Code is typically limited to formatting data or converting to or from a DTO.  Presentation Models should not contain business logic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Содержат в основном свойства. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Код обычно ограничен форматированием данных или преобразованием в или из DTO. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модели презентаций не должны содержать бизнес-логики.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="857491b6cd3a3ecb0e3f8827e94a51936304c24e" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often contain properties of a different base type than a DTO.  For example dollar amounts may be represented as strings so they can contain commas and a currency symbol.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Часто содержат свойства другого базового типа, чем DTO. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Например, суммы в долларах могут быть представлены в виде строк, поэтому они могут содержать запятые и символ валюты.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e22c1184a19f283ebf5e7adbf12c0f7a1715b41f" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often contain properties which are other view models for other pages or screens.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Часто содержат свойства, которые являются другими моделями представления для других страниц или экранов.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="25911f773ca4593c19b1e48346c8399bb77a595a" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often defined by how they are used as well as their object characteristics.  In other words, a simple DTO that is used as the backing model for rendering a grid is in fact also a presentation model in the context of that grid.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Часто определяется тем, как они используются, а также характеристиками их объектов. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Другими словами, простой DTO, который используется в качестве вспомогательной модели для визуализации сетки, фактически является также моделью представления в контексте этой сетки.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c6a66f7efdf4a5e06bab68ad2558579c130c863f" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often present a denormalized view of data.  That is, they often combine properties from multiple DTO&amp;rsquo;s.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Часто представляют денормализованное представление данных. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;То есть они часто объединяют свойства из нескольких DTO.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6e4898ca5f9d6eb2c49f1bea5369a60c4cf54965" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Primarily used for transporting data to and from a database.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; В основном используется для передачи данных в базу данных и из нее.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e335886ac2f2cf3f381eaa744f2b290f0f4ce886" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties exactly or closely match fields on a specific table in a data store.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Свойства точно или близко совпадают с полями определенной таблицы в хранилище данных.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c61f4a5d65b5e385b3d98c5edfd58bbe6c75219e" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties that are used to display application state such as error messages, user name, status, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Свойства, которые используются для отображения состояния приложения, такие как сообщения об ошибках, имя пользователя, состояние и т. Д.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="44152c81772618111892f0b7395aac169c9b852d" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties used for data binding such as list objects and properties that hold intermediate data that is input by the user.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Свойства, используемые для привязки данных, такие как объекты списка и свойства, которые содержат промежуточные данные, введенные пользователем.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="21d410d4b0bf8af1d102f651deae6feaf00cba49" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties used to format, display, stylize, or animate controls.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Свойства, используемые для форматирования, отображения, стилизации или анимации элементов управления.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5aae7795624e8dca926efd2b235f5ecf57ae583d" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Usually contain properties only &amp;ndash; no code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Обычно содержат только свойства - без кода.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e1f255cb7e3440d6e3b86db25341f9d63f75478a" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Usually derive from a base class since most pages and screens share common properties.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; Обычно наследуются от базового класса, поскольку большинство страниц и экранов имеют общие свойства.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9227c0bb1dad45263adf473f0da3cd39ae90f89c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ASP.NET MVC view can't have more than one model so if we need to display properties from more than one models into the view, it is not possible. ViewModel serves this purpose.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Представление ASP.NET MVC не может иметь более одной модели, поэтому, если нам нужно отобразить в представлении свойства нескольких моделей, это невозможно. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModel служит этой цели.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="47ecad6905ac0c9527eeca8989f3ed9315b6069e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Composition over inheritance&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Композиция по наследству&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6cac57bc3539db0f79006be49553f758c9944982" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View Model Composition&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Посмотреть состав модели&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="23c62b9e31fb317d9e700732e0edb1adc0d493ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Data Transfer Objects a.k.a &amp;ldquo;Model&amp;rdquo;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Объекты передачи данных ака &amp;laquo;Модель&amp;raquo;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fcc90465fc1eb3567b153a345917c67232ee01d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Designing ViewModel&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Проектирование ViewModel&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dfd516553a0c9858f016c9102534da6d1fc06d58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit: I updated this answer on my Blog:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Изменить: я обновил этот ответ в своем блоге:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4e6d967aabeacd3870e306f89d67a1c8ccd3c930" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Presentation Models&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Презентационные модели&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="edc563f12ca05992aa529daff2c5530df492d181" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Presenting the viewmodel in the view&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Представление модели представления в представлении&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="57f268bfc3a39fc05382bd8b6501103c2bad7346" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The key thing to remember is that the view model only represents the data that you want to use&lt;/strong&gt;, nothing else.  You can imagine all the unnecessary code and validation if you have a domain model with 30 properties and you only want to update a single value.  Given this scenario you would only have this one value/property in the view model and not all the properties that are in the domain object.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Важно помнить, что модель представления представляет только те данные, которые вы хотите использовать&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , и ничего больше. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы можете представить весь ненужный код и проверку, если у вас есть модель домена с 30 свойствами, и вы хотите обновить только одно значение. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;При таком сценарии у вас будет только одно значение / свойство в модели представления, а не все свойства, которые находятся в объекте домена.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2ce37be823ac6fcdb8d035e0cb1591c15610d45b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;View Models&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Посмотреть модели&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="acd627ae1902dfff170bb19bfeb185edff1d043f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;View model&lt;/strong&gt; is a class that represents the data model used in a specific view. We could use this class as a model for a login page:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модель&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; представления - это класс, который представляет модель данных, используемую в конкретном представлении. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Мы могли бы использовать этот класс в качестве модели для страницы входа в систему:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3eb7989fc7b3268a75e31973397bb4f2b77d2723" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Working with Action&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Работа с действием&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="784698e6a41a9d10172d3f4ce6ee6685a991721c" translate="yes" xml:space="preserve">
          <source>@model ProjectName.Model.StudentViewModel</source>
          <target state="translated">@модельНазвание проекта.Модель.Студенческая модельСтуденческая модель</target>
        </trans-unit>
        <trans-unit id="06a9eb888b55eaa767a102d8d7022d31558b556f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;view model&lt;/code&gt; represents the data that you want to display on your view/page, whether it be used for static text or for input values (like textboxes and dropdown lists) that can be added to the database (or edited). It is something different than your &lt;code&gt;domain model&lt;/code&gt;. It is a model for the view.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;view model&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; представляет собой данные , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;которые вы хотите отобразить на вашем представлении / странице ли его использовать для статического текста или для ввода значений (например , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;текстовые поля и раскрывающиеся списки) , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;которые могут быть добавлены в базу данных (или редактирования). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это нечто отличное от &lt;/font&gt;&lt;/font&gt; &lt;code&gt;domain model&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вашего &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;домена&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это модель для представления.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7608e08d4f0b61ea5e48d5fd217b4a94edd98648" translate="yes" xml:space="preserve">
          <source>A Data Transfer Object (DTO) is a class with properties that match a table schema in a database.  DTO&amp;rsquo;s are named for their common usage for shuttling data to and from a data store.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Объект передачи данных (DTO) - это класс со свойствами, которые соответствуют схеме таблицы в базе данных. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DTO названы по их общему использованию для передачи данных в и из хранилища данных.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db643f1ec44d2c837e9ab61d91025bd7d3d53e82" translate="yes" xml:space="preserve">
          <source>A controller is responsible for the page flow</source>
          <target state="translated">Контроллер отвечает за поток страниц</target>
        </trans-unit>
        <trans-unit id="e3b4707fbc3e3d5a32deeabab22085bbd5da453c" translate="yes" xml:space="preserve">
          <source>A lot of big examples, let me explain in clear and crispy way.</source>
          <target state="translated">Множество больших примеров,позвольте мне объяснить ясным и хрустящим образом.</target>
        </trans-unit>
        <trans-unit id="0d466d07d557affcf02c5d91f34f48707173caa3" translate="yes" xml:space="preserve">
          <source>A model is responsible for the business logic</source>
          <target state="translated">Модель отвечает за бизнес-логику</target>
        </trans-unit>
        <trans-unit id="7c0ca4a31f487009bebc32f78ce8247e830d54b1" translate="yes" xml:space="preserve">
          <source>A presentation model is a &lt;em&gt;utility&lt;/em&gt; class that is used to render data on a screen or report.  Presentation models are typically used to model complex data structures that are composed from data from multiple DTO&amp;rsquo;s.  Presentation models often represent a denormalized view of data.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модель представления - это &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;служебный&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; класс, который используется для отображения данных на экране или в отчете. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модели представления обычно используются для моделирования сложных структур данных, которые состоят из данных из нескольких DTO. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модели представления часто представляют денормализованное представление данных.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="979814b66cb168384578069cfbe0cf257d7bd4fb" translate="yes" xml:space="preserve">
          <source>A view model is a conceptual model of data. Its use is to for example either get a subset or combine data from different tables.</source>
          <target state="translated">Модель взгляда является концептуальной моделью данных.Ее применение заключается,например,в получении подмножества или объединении данных из разных таблиц.</target>
        </trans-unit>
        <trans-unit id="29517336bce9403bbabf349182e99b37661f6c22" translate="yes" xml:space="preserve">
          <source>A view model is similar to a presentation model in that is a backing class for rendering a view.  However it is very different from a Presentation Model or a DTO in how it is constructed.  View models often contain the same properties as presentation models and DTO&amp;rsquo;s and for this reason they are often confused one for the other.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модель представления аналогична модели представления в том, что является базовым классом для визуализации представления. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Однако это очень отличается от модели представления или DTO в том, как она построена. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модели представлений часто содержат те же свойства, что и модели представления и DTO, и по этой причине их часто путают друг с другом.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2d122dfbc586108e4d0e045c5a4088f267f77650" translate="yes" xml:space="preserve">
          <source>A view model might not only have data from one database table. It can combine data from another table. Take my example above about adding a new employee record. Besides adding just the first and last names you might also want to add the department of the employee. This list of departments will come from your &lt;code&gt;Departments&lt;/code&gt; table. So now you have data from the &lt;code&gt;Employees&lt;/code&gt; and &lt;code&gt;Departments&lt;/code&gt; tables in one view model. You will just then need to add the following two properties to your view model and populate it with data:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модель представления может иметь не только данные из одной таблицы базы данных. Он может объединять данные из другой таблицы. Возьмите мой пример выше о добавлении новой записи сотрудника. Помимо добавления только имени и фамилии, вы также можете добавить отдел сотрудника. Этот список отделов будет взят из вашей &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;таблицы &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Departments&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Теперь у вас есть данные из &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;таблиц &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Employees&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Departments&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в одной модели представления. Затем вам нужно будет добавить следующие два свойства в вашу модель представления и заполнить ее данными:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="18421b8d98d053ede53aa47964692b02a912d66b" translate="yes" xml:space="preserve">
          <source>An example of a model in a web application could be:</source>
          <target state="translated">Примером модели в веб-приложении может быть:</target>
        </trans-unit>
        <trans-unit id="8c5608853992951b4bd783c7430ce80a18111116" translate="yes" xml:space="preserve">
          <source>An example presentation model:</source>
          <target state="translated">Пример презентационной модели:</target>
        </trans-unit>
        <trans-unit id="12c9ef1f0ac8e4b4eaecd1d24444d26dcf26204d" translate="yes" xml:space="preserve">
          <source>And actions:</source>
          <target state="translated">И действия:</target>
        </trans-unit>
        <trans-unit id="32b125fff82d8b61b77572d85c31866f061d2d80" translate="yes" xml:space="preserve">
          <source>And with Data Annotations it might look this:</source>
          <target state="translated">И с аннотациями данных это может выглядеть так:</target>
        </trans-unit>
        <trans-unit id="ee07849c78e92b6c9ec11549edbd1c54d9e97b91" translate="yes" xml:space="preserve">
          <source>Another example of a view model and its retrieval: We want to display basic user data, his privileges and users name. We create a special view model, which contains only the required fields. We retrieve data from different entities from database, but the view is only aware of the view model class:</source>
          <target state="translated">Еще один пример модели представления и ее поиска:Мы хотим отобразить основные данные пользователя,его привилегии и имя пользователя.Мы создаем специальную модель представления,которая содержит только необходимые поля.Мы извлекаем данные из базы данных из различных сущностей,но представление знает только класс модели представления:</target>
        </trans-unit>
        <trans-unit id="c9a2a634871a0bacbbb2bcba04ceea845df0f23c" translate="yes" xml:space="preserve">
          <source>Another point, you don&amp;rsquo;t really need a view model for every action. If it is simple data then it would be fine to only use &lt;code&gt;EmployeeViewModel&lt;/code&gt;. If it is complex views/pages and they differ from each other then I would suggest you use separate view models for each.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Еще один момент: вам не нужна модель представления для каждого действия. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если это простые данные, то было бы хорошо использовать только &lt;/font&gt;&lt;/font&gt; &lt;code&gt;EmployeeViewModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если это сложные представления / страницы, и они отличаются друг от друга, то я бы предложил вам использовать отдельные модели представлений для каждого.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30a807962c4d842911cca18dd735b9820c28317b" translate="yes" xml:space="preserve">
          <source>As stated earlier, view models are composite objects in that they combine application properties and business data properties on a single object.  Examples of commonly used application properties that are used on view models are:</source>
          <target state="translated">Как уже говорилось ранее,модели представлений являются составными объектами в том смысле,что они объединяют свойства приложения и свойства бизнес данных на одном объекте.Примерами обычно используемых свойств приложения,которые используются на моделях представлений,являются:</target>
        </trans-unit>
        <trans-unit id="f13564fc793a8a2f2c5001293b80cd5b65cc8a6d" translate="yes" xml:space="preserve">
          <source>As you can see it only contains two of the properties. These two properties are also in the employee domain model.  Why is this you may ask?  &lt;code&gt;Id&lt;/code&gt; might not be set from the view, it might be auto generated by the Employee table.  And &lt;code&gt;DateCreated&lt;/code&gt; might also be set in the stored procedure or in the service layer of your application.  So &lt;code&gt;Id&lt;/code&gt; and &lt;code&gt;DateCreated&lt;/code&gt; are not needed in the view model. You might want to display these two properties when you view an employee&amp;rsquo;s details (an employee that has already been captured) as static text.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Как видите, он содержит только два свойства. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Эти два свойства также находятся в модели домена сотрудника. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Почему это вы можете спросить? &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не может быть установлен из представления, он может быть автоматически сгенерирован таблицей Employee. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;И &lt;/font&gt;&lt;/font&gt; &lt;code&gt;DateCreated&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; также может быть установлен в хранимой процедуре или на уровне обслуживания вашего приложения. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Таким образом, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt; &lt;code&gt;DateCreated&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не нужны в модели представления. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Возможно, вы захотите отобразить эти два свойства при просмотре сведений о сотруднике (сотрудник, который уже был захвачен) в виде статического текста.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34516062670ac1d4db45943e7dbe90a4d7d929e5" translate="yes" xml:space="preserve">
          <source>As you can see, a view model has many roles:</source>
          <target state="translated">Как видите,модель представления имеет множество ролей:</target>
        </trans-unit>
        <trans-unit id="7f17218ceb9cb01e6e7e9e9aa432bc220eb9e92b" translate="yes" xml:space="preserve">
          <source>Assume we are writing a web application.  One of the requirements of the application design is that the page title, user name, and application name must be displayed on every page.  If we want to create a page to display a presentation order object, we may modify the presentation model as follows:</source>
          <target state="translated">Предположим,мы пишем веб-приложение.Одним из требований к дизайну приложения является то,что название страницы,имя пользователя и название приложения должны отображаться на каждой странице.Если мы хотим создать страницу для отображения объекта заказа презентации,мы можем изменить модель презентации следующим образом:</target>
        </trans-unit>
        <trans-unit id="7463aba05ab71a5b6737ae5556ad6f86a21910e0" translate="yes" xml:space="preserve">
          <source>Characteristics of DTO&amp;rsquo;s:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Характеристики DTO:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="86f4c5a2ba2bb5bcef5863f95fddcf2f402f1d49" translate="yes" xml:space="preserve">
          <source>Characteristics of Presentation Models:</source>
          <target state="translated">Характеристики презентационных моделей:</target>
        </trans-unit>
        <trans-unit id="bcda80ff10e740640afce89952a9a0c497f395fe" translate="yes" xml:space="preserve">
          <source>Characteristics of View Models:</source>
          <target state="translated">Характеристики моделей вида:</target>
        </trans-unit>
        <trans-unit id="7f7ca519ba25ddf1cdaa868e954528b1bb64bfd5" translate="yes" xml:space="preserve">
          <source>Database tables are usually normalized therefore DTO&amp;rsquo;s are usually normalized also.  This makes them of limited use for presenting data.  However, for certain simple data structures they often do quite well.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Таблицы базы данных обычно нормализуются, поэтому DTO обычно также нормализуются. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это делает их ограниченным использованием для представления данных. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Тем не менее, для некоторых простых структур данных они часто работают достаточно хорошо.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9ae7f8fac70de032f0536b881084c08503cd96fb" translate="yes" xml:space="preserve">
          <source>Few examples of View Models are below</source>
          <target state="translated">Ниже приведено несколько примеров моделей View</target>
        </trans-unit>
        <trans-unit id="0256f135a479d495b6f97309a130ec92b420fff0" translate="yes" xml:space="preserve">
          <source>Generally speaking, a view model is an object that contains all the properties and methods necessary to render a view. View model properties are often related to data objects such as customers and orders and in addition they also contain properties related to the page or application itself such as user name, application name etc. View models provide a convenient object to pass to a rendering engine to create a html page.  One of many reasons to use a view model is that view models provide a way to unit test certain presentation tasks such as handling user input, validating data, retrieving data for display, etc.</source>
          <target state="translated">Вообще говоря,модель представления-это объект,содержащий все свойства и методы,необходимые для отображения представления.Свойства модели представления часто связаны с объектами данных,такими как клиенты и заказы,и,кроме того,они также содержат свойства,связанные со страницей или самим приложением,такие как имя пользователя,имя приложения и т.д.Вид модели предоставляет удобный объект для перехода к рендеринговому движку для создания html страницы.Одной из многих причин использования модели представления является то,что модель представления предоставляет способ единичного тестирования определенных задач представления,таких как обработка вводимых пользователем данных,проверка данных,извлечение данных для отображения и т.д.</target>
        </trans-unit>
        <trans-unit id="0ecc5f2f113be01ef1af7af6615d65e0b2559802" translate="yes" xml:space="preserve">
          <source>Here are two examples of what DTO&amp;rsquo;s might look like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вот два примера того, как может выглядеть DTO:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b5752eb70f697d164aee0d46a8a5e9ee4f7bfc27" translate="yes" xml:space="preserve">
          <source>Here is a comparison of Entity models (a.ka. DTO's a.ka. models), Presentation Models, and View Models.</source>
          <target state="translated">Здесь приведено сравнение моделей Entity (a.ka.DTO's a.ka.models),Presentation Models (Модели представления)и View Models (Модели представления).</target>
        </trans-unit>
        <trans-unit id="41fc4a53daff6828d2c36dc08d64604023be26b0" translate="yes" xml:space="preserve">
          <source>Here is a small example of &lt;a href=&quot;http://techfunda.com/howto/262/list-data-using-viewmodel&quot;&gt;List data using ViewModel&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вот небольшой пример &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://techfunda.com/howto/262/list-data-using-viewmodel&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;списка данных с использованием ViewModel&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3bdb4b2444f19c2d0fe752fada6e32503c4b33b2" translate="yes" xml:space="preserve">
          <source>Here is a way we might re-factor the order presentation model such that it become a true view model and will be useful for displaying a single PresentationOrder object or a collection of PresentationOrder objects:</source>
          <target state="translated">Здесь мы можем переделать модель представления заказа таким образом,чтобы она стала моделью истинного вида и была бы полезна для отображения одного объекта PresentationOrder или коллекции объектов PresentationOrder:</target>
        </trans-unit>
        <trans-unit id="0a2a50d3fa7ff4100b69d2f8236dcca6fdff8970" translate="yes" xml:space="preserve">
          <source>Hope this will be useful.</source>
          <target state="translated">Надеюсь,это будет полезно.</target>
        </trans-unit>
        <trans-unit id="095b0b70b5a9cab69d8341323e70d4db8884f3cc" translate="yes" xml:space="preserve">
          <source>I am new to ASP.NET MVC. I have a problem with understanding the purpose of a ViewModel.</source>
          <target state="translated">Я новичок в ASP.NET MVC.У меня есть проблема с пониманием назначения ViewModel.</target>
        </trans-unit>
        <trans-unit id="9ae564fdfdc1add6404c350c63a78148f7b5df36" translate="yes" xml:space="preserve">
          <source>I didn't read all the posts but every answer seems to be missing one concept that really helped me &quot;get it&quot;...</source>
          <target state="translated">Я не прочитал все сообщения,но кажется,что в каждом ответе не хватает одного понятия,которое действительно помогло мне &quot;достать его&quot;...</target>
        </trans-unit>
        <trans-unit id="29fe05d20d4215aef9cfbc0a31e274894e167da3" translate="yes" xml:space="preserve">
          <source>I find myself using ViewModels to pass info into a view/form, and then transfering that data into a valid Model when the form posts back to the controller - also very handy for storing Lists(IEnumerable).</source>
          <target state="translated">Я использую ViewModels для передачи информации в viewform,а затем передаю эти данные в действительную модель,когда форма отправляет обратно в контроллер-также очень удобно для хранения списков (IEnumerable).</target>
        </trans-unit>
        <trans-unit id="9e24d7239899f9ca10ad64122efd148daa74a551" translate="yes" xml:space="preserve">
          <source>I hope this clears up any confusion that you had about view models and domain models.</source>
          <target state="translated">Я надеюсь,что это прояснит любую путаницу,которая у вас была по поводу моделей просмотра и моделей домена.</target>
        </trans-unit>
        <trans-unit id="24252c1ad530d2526ac3e27970bf24f54019eafb" translate="yes" xml:space="preserve">
          <source>If I get a good example about its working and explanation that would be better.</source>
          <target state="translated">Если я получу хороший пример о его работе и объяснения,это будет лучше.</target>
        </trans-unit>
        <trans-unit id="fb6471d4ff66132ef2b78aefd3fa0f22bdcfd22f" translate="yes" xml:space="preserve">
          <source>If a Model is akin to a database &lt;strong&gt;&lt;em&gt;Table&lt;/em&gt;&lt;/strong&gt;, then a ViewModel is akin to a database &lt;strong&gt;&lt;em&gt;View&lt;/em&gt;&lt;/strong&gt; - A view typically either returns small amounts of data from one table, or, complex sets of data from multiple tables (joins).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если Модель сродни &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Таблице&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; базы данных &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, то ViewModel сродни &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Представлению&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; базы данных &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;- Представление обычно либо возвращает небольшие объемы данных из одной таблицы, либо сложные наборы данных из нескольких таблиц (объединений).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a33be26cdbdc7f223acadebc849211c36bba0ca8" translate="yes" xml:space="preserve">
          <source>If there are too few view-specific data and/or transformations, you can use the Model itself</source>
          <target state="translated">Если существует слишком мало специфических для просмотра данных и их преобразования,можно использовать саму Модель</target>
        </trans-unit>
        <trans-unit id="4843531d7fc5288ce3a4f8b2b896b726f41768cc" translate="yes" xml:space="preserve">
          <source>If you have properties specific to the view, and not related to the DB/Service/Data store, it is a good practice to use ViewModels. Say, you want to leave a checkbox selected based on a DB field (or two) but the DB field itself isn't a boolean. While it is possible to create these properties in the Model itself and keep it hidden from the binding to data, you may not want to clutter the Model depending on the amount of such fields and transactions.</source>
          <target state="translated">Если у вас есть свойства,специфичные для представления,и не связанные с хранилищем данных DBServiceData,то это хорошая практика-использовать ViewModels.Скажем,вы хотите оставить флажок,выбранный на основе поля БД (или двух),но само поле БД не является булевым.Хотя можно создавать эти свойства в самой Модели и скрывать их от привязки к данным,вы,возможно,не захотите загромождать Модель в зависимости от количества таких полей и транзакций.</target>
        </trans-unit>
        <trans-unit id="50975c3b578778119e55331e663bf658d0f95499" translate="yes" xml:space="preserve">
          <source>If you want to study code how to setup a &quot;Baseline&quot; web application with ViewModels I can advise to download this code on GitHub: &lt;a href=&quot;https://github.com/ajsaulsberry/BlipAjax&quot;&gt;https://github.com/ajsaulsberry/BlipAjax&lt;/a&gt;. I developed large enterprise applications. When you do this its problematic to setup a good architecture that handles all this &quot;ViewModel&quot; functionality. I think with BlipAjax you will have a very Good &quot;baseline&quot; to start with. Its just a simple website, but great in its simplicity. I like the way they used the English language to point at whats really needed in the application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если вы хотите изучить код, как настроить &amp;laquo;базовое&amp;raquo; веб-приложение с помощью ViewModels, я могу посоветовать загрузить этот код на GitHub: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/ajsaulsberry/BlipAjax&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://github.com/ajsaulsberry/BlipAjax&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я разработал крупные корпоративные приложения. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Когда вы делаете это, проблематично настроить хорошую архитектуру, которая обрабатывает все эти функциональные возможности &amp;laquo;ViewModel&amp;raquo;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я думаю, что с BlipAjax у вас будет очень хороший &amp;laquo;базовый уровень&amp;raquo; для начала. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это просто простой веб-сайт, но отличный в своей простоте. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Мне нравится, как они использовали английский язык, чтобы указать на то, что действительно нужно в приложении.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6a3c97e12b9a1ccbdf3d8424c6609b00baa9196d" translate="yes" xml:space="preserve">
          <source>In MVC the process is split into 3 different responsibilities:</source>
          <target state="translated">В MVC процесс разделен на 3 различные обязанности:</target>
        </trans-unit>
        <trans-unit id="2d72e29ee7d99b2d5c4d674d77a200110c79124b" translate="yes" xml:space="preserve">
          <source>In ViewModel put only those fields/data that you want to display on 
the view/page.</source>
          <target state="translated">В ViewModel поместите на видовую страницу только те поля-данные,которые вы хотите отобразить.</target>
        </trans-unit>
        <trans-unit id="dce4a57fc1720e9f891e0f68e7fc4cdd117eef11" translate="yes" xml:space="preserve">
          <source>Let us say that you have an &lt;code&gt;Employee&lt;/code&gt; class that represents your employee domain model and it contains the following properties (unique identifier, first name, last name and date created):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Допустим, у вас есть &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;класс &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Employee&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , представляющий модель домена вашего сотрудника, и он содержит следующие свойства (уникальный идентификатор, имя, фамилия и дата создания):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="77a51cb2e7eadb97bd30de437ef458714cf33e08" translate="yes" xml:space="preserve">
          <source>Looking at the above two classes we can see that one way to think about a view model is that it is a presentation model that contains another presentation model as a property.  The top level presentation model (i.e. view model) contains properties that are relevant to the page or application while presentation model (property) contains properties that are relevant to application data.</source>
          <target state="translated">Глядя на два вышеуказанных класса,мы видим,что один из способов думать о модели представления заключается в том,что это модель представления,которая содержит другую модель представления в качестве свойства.Модель представления верхнего уровня (т.е.модель представления)содержит свойства,которые имеют отношение к странице или приложению,в то время как модель представления (свойство)содержит свойства,которые имеют отношение к данным приложения.</target>
        </trans-unit>
        <trans-unit id="e52b8b84a0ff20689f4296eecbe0ffcbf0e3d25a" translate="yes" xml:space="preserve">
          <source>MVC doesn't have a viewmodel: it has a model, view and controller. A viewmodel is part of MVVM (Model-View-Viewmodel). MVVM is derived from the Presentation Model and is popularized in WPF. There should also be a model in MVVM, but most people miss the point of that pattern completely and they will only have a view and a viewmodel. The model in MVC is similar to the model in MVVM.</source>
          <target state="translated">MVC не имеет видовой модели:у него есть модель,вид и контроллер.Вид-модель является частью MVVM (Model-View-Viewmodel).MVVM является производным от модели презентации и популяризируется в WPF.В MVVM также должна быть модель,но большинство людей полностью пропускают точку зрения этой модели,и у них будет только вид и видовая модель.Модель в MVC похожа на модель в MVVM.</target>
        </trans-unit>
        <trans-unit id="0007a747ce5507b06eab17bdb0e2de8aa9b638a7" translate="yes" xml:space="preserve">
          <source>MVC is not very suitable for web applications. It is a pattern introduced by Smalltalk for creating desktop applications. A web environment behaves completely different. It doesn't make much sense to copy a 40-year old concept from the desktop development and paste it into a web enviroment. However a lot of people think this is ok, because their application compiles and returns the correct values. That is, in my opinion, not enough to declare a certain design choice as ok.</source>
          <target state="translated">MVC не очень подходит для веб-приложений.Это шаблон,введенный Smalltalk для создания настольных приложений.Веб-среда ведет себя совершенно по-другому.Не имеет смысла копировать 40-летнюю концепцию из настольной разработки и вставлять ее в веб-окружение.Однако многие люди думают,что это нормально,потому что их приложение компилируется и возвращает правильные значения.То есть,на мой взгляд,не достаточно,чтобы объявить определенный выбор дизайна нормальным.</target>
        </trans-unit>
        <trans-unit id="c79b14feab9fbcbe613cc41f23adc6adae02bdd7" translate="yes" xml:space="preserve">
          <source>My answer is a bit lengthy but I think it is important to compare view models to other types of commonly used models to understand why they are different and why they are necessary.</source>
          <target state="translated">Мой ответ немного длинноват,но я думаю,что важно сравнить модели просмотра с другими типами широко используемых моделей,чтобы понять,почему они отличаются и почему они необходимы.</target>
        </trans-unit>
        <trans-unit id="8eba30174b6f892cdd849bbf51e7c3fc9fec3d73" translate="yes" xml:space="preserve">
          <source>Now  we use this ViewModel in View</source>
          <target state="translated">Теперь мы используем эту ViewModel в View.</target>
        </trans-unit>
        <trans-unit id="659895d640bf5615ecde5842496c44e98b39693c" translate="yes" xml:space="preserve">
          <source>Now our implementations are effortless:</source>
          <target state="translated">Теперь наши внедрения не требуют усилий:</target>
        </trans-unit>
        <trans-unit id="c33d9e59e291008f5fe3aa95e955d7c285c36b6a" translate="yes" xml:space="preserve">
          <source>Now we are able to access all the properties of StudentViewModel and inherited class in View.</source>
          <target state="translated">Теперь мы можем получить доступ ко всем свойствам StudentViewModel и унаследованному классу в View.</target>
        </trans-unit>
        <trans-unit id="591bd6b2b0e6e6bf85b2261e1527ffe7d3c0375f" translate="yes" xml:space="preserve">
          <source>Now we can simplify our PresentationOrderVM like this:</source>
          <target state="translated">Теперь мы можем упростить наш PresentationOrderVM вот так:</target>
        </trans-unit>
        <trans-unit id="96775092c82616d374ace6d7a2b5fd684f2a92d9" translate="yes" xml:space="preserve">
          <source>Now we create one class and can give it any name, but this format &quot;XyzViewModel&quot; will make it easier to understand. It is inheritance concept.
Now we create a third class with the following name:</source>
          <target state="translated">Теперь мы создаем один класс и можем дать ему любое имя,но этот формат &quot;XyzViewModel&quot; сделает его более понятным.Это концепция наследования.Теперь мы создаем третий класс со следующим именем:</target>
        </trans-unit>
        <trans-unit id="56f6d61294c2da51e88d3679b47bf298b7bdf469" translate="yes" xml:space="preserve">
          <source>Now we want to display records student's Name and Subject's Name in View (In MVC), but it's not possible to add more than one classes like:</source>
          <target state="translated">Теперь мы хотим отобразить записи Имя ученика и Имя предмета в просмотре (в MVC),но невозможно добавить более одного класса как:</target>
        </trans-unit>
        <trans-unit id="d1b202eb2b094f90355bef37b9bc8b31b823c3c6" translate="yes" xml:space="preserve">
          <source>Presentation models are used &amp;ldquo;as needed&amp;rdquo; and &amp;ldquo;where needed&amp;rdquo; (whereas DTO&amp;rsquo;s are usually tied to the database schema).  A presentation model may be used to model data for an entire page, a grid on a page, or a dropdown on a grid on a page. Presentation models often contain properties that are other presentation models.  Presentation models are often constructed for a single-use purpose such as to render a specific grid on a single page.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модели представления используются &amp;laquo;по необходимости&amp;raquo; и &amp;laquo;где необходимо&amp;raquo; (тогда как DTO обычно привязаны к схеме базы данных). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модель представления может использоваться для моделирования данных для всей страницы, сетки на странице или раскрывающегося списка сетки на странице. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модели презентаций часто содержат свойства, которые являются другими моделями презентаций. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модели представления часто создаются для одноразового использования, например, для визуализации определенной сетки на одной странице.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8ffa8c608739cf046a5f4acf0ce72acebed316f4" translate="yes" xml:space="preserve">
          <source>Retrieval:</source>
          <target state="translated">Retrieval:</target>
        </trans-unit>
        <trans-unit id="ede225ff98051fa3d75a279416af02c28a4902d6" translate="yes" xml:space="preserve">
          <source>Since view reperesents the properties of the ViewModel, hence it is
easy for rendering and maintenance.</source>
          <target state="translated">Так как представление повторяет свойства ViewModel,следовательно,его легко визуализировать и обслуживать.</target>
        </trans-unit>
        <trans-unit id="810649a5346ec9759ec597984cd267207680cc84" translate="yes" xml:space="preserve">
          <source>So in above Example Place and Category are the two different entities and PlaceCategory viewmodel is ViewModel which we can use on View.</source>
          <target state="translated">Таким образом,в вышеприведенном примере Place и Category-это две различные сущности,а модель представления PlaceCategory-это ViewModel,которую мы можем использовать на View.</target>
        </trans-unit>
        <trans-unit id="55668866ad670a5721cd3d4b303def755a5f1b9c" translate="yes" xml:space="preserve">
          <source>Take this &lt;code&gt;Id&lt;/code&gt; and pass it through to your repository layer, together with your first name and last name values.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Возьмите этот &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и передайте его на ваш уровень хранилища вместе с вашими именами и фамилиями.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c9c0379520c692636f1098086ee64944f61eb925" translate="yes" xml:space="preserve">
          <source>The controller can use it like this:</source>
          <target state="translated">Контроллер может использовать его вот так:</target>
        </trans-unit>
        <trans-unit id="dac2212ec6ea6f80a65cd7e4c4833a9d4ce8e740" translate="yes" xml:space="preserve">
          <source>The following examples show why the composite nature of view models is important and how we can best construct a View Model that efficient and reusable.</source>
          <target state="translated">Следующие примеры показывают,почему композитная природа моделей представления важна,и как мы можем лучше всего построить такую модель представления,которая будет эффективной и многоразовой.</target>
        </trans-unit>
        <trans-unit id="fc04ddab544f11f980f798cc18d0d331fbd3fb78" translate="yes" xml:space="preserve">
          <source>The way of creating ViewModel is same as creating Model, the way of creating view for the Viewmodel is same as creating view for Model.</source>
          <target state="translated">Способ создания ViewModel такой же,как и создание Модели,способ создания вида для Viewmodel такой же,как и создание вида для Модели.</target>
        </trans-unit>
        <trans-unit id="0b20cb6512cbb29a4429b759ba44cc79eb0ee528" translate="yes" xml:space="preserve">
          <source>This design might work&amp;hellip; but what if we want to create a page that will display a list of orders?  The PageTitle, UserName, and ApplicationName properties will be repeated and become unwieldy to work with.  Also, what if we want to define some page-level logic in the constructor of the class?  We can no longer do that if we create an instance for every order that will be displayed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Этот дизайн может работать ... но что если мы хотим создать страницу, которая будет отображать список заказов? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Свойства PageTitle, UserName и ApplicationName будут повторены и станут неудобными для работы. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Кроме того, что, если мы хотим определить некоторую логику на уровне страницы в конструкторе класса? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Мы больше не можем этого делать, если создадим экземпляр для каждого заказа, который будет отображаться.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc3f1aa6ae9c1ae576ba8114ffcb4e62e943c55b" translate="yes" xml:space="preserve">
          <source>To list data from more than entities in a view page &amp;ndash; we can create a
View model and have properties of all the entities for which we want
to list data. Join those database entities and set View model
properties and return to the View to show data of different
entities in one tabular form</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Чтобы вывести данные из более чем сущностей на странице представления - мы можем создать модель представления и иметь свойства всех сущностей, для которых мы хотим вывести данные. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Присоединитесь к этим объектам базы данных и установите свойства модели View и вернитесь в View, чтобы отобразить данные разных объектов в одной табличной форме.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d7a93bb744cd53b65dd6eabcf5a3c928eb5a7df3" translate="yes" xml:space="preserve">
          <source>To summarize, and to directly answer the question that is asked:</source>
          <target state="translated">Подвести итог и непосредственно ответить на заданный вопрос:</target>
        </trans-unit>
        <trans-unit id="848ace57c7dbc4504e9902c434ff0470b55aa46b" translate="yes" xml:space="preserve">
          <source>Use a mapper when ViewModel become more complex.</source>
          <target state="translated">Используйте мэппингер,когда ViewModel становится сложнее.</target>
        </trans-unit>
        <trans-unit id="73ed7042fd0b7f5ee31ecb7dc68fc0d76ebd701f" translate="yes" xml:space="preserve">
          <source>Using this view model you can define the view (Razor view engine):</source>
          <target state="translated">С помощью этой модели вида можно определить вид (движок вида бритвы):</target>
        </trans-unit>
        <trans-unit id="7d591ae4859bc24521fd94d00cecdd51f4e7a80b" translate="yes" xml:space="preserve">
          <source>Validation would thus be done only on &lt;code&gt;FirstName&lt;/code&gt; and &lt;code&gt;LastName&lt;/code&gt;.  Using &lt;a href=&quot;https://fluentvalidation.net/&quot;&gt;FluentValidation&lt;/a&gt; you might have validation like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Таким образом, проверка будет выполняться только для &lt;/font&gt;&lt;/font&gt; &lt;code&gt;FirstName&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt; &lt;code&gt;LastName&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Используя &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://fluentvalidation.net/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;FluentValidation,&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вы можете иметь такую ​​проверку:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="087b229658bbe1662ba4cdcdb4873d59633cb3d2" translate="yes" xml:space="preserve">
          <source>View Model is a model class that can hold only those properties that is required for a view. It can also contains properties from more than one entities (tables) of the database. As the name suggests, this model is created specific to the View requirements.</source>
          <target state="translated">View Model (Модель представления)-это класс модели,который может содержать только те свойства,которые необходимы для представления.Он также может содержать свойства из нескольких сущностей (таблиц)БД.Как следует из названия,эта модель создается в соответствии с требованиями представления.</target>
        </trans-unit>
        <trans-unit id="d776d2197476e41176b7c93c2dc025f13b077b72" translate="yes" xml:space="preserve">
          <source>View Model is class which we can use for rendering data on View. Suppose you have two entities Place and PlaceCategory and you want to access data from both entities using a single model then we use ViewModel.</source>
          <target state="translated">View Model-это класс,который мы можем использовать для отрисовки данных на View.Предположим,что у вас есть две сущности Place и PlaceCategory,и вы хотите получить доступ к данным обеих сущностей с помощью одной модели,а затем мы используем ViewModel.</target>
        </trans-unit>
        <trans-unit id="f27d834295e2d242c474637acd727f54ea253491" translate="yes" xml:space="preserve">
          <source>View is responsible for presenting the data to the user</source>
          <target state="translated">View несет ответственность за представление данных пользователю</target>
        </trans-unit>
        <trans-unit id="0356ac1237d6bba655d268c89b9c5143d4544bc5" translate="yes" xml:space="preserve">
          <source>View model a is simple class which can contain more than one class property. We use it to inherit all the required properties, e.g. I have two classes Student and Subject</source>
          <target state="translated">Модель просмотра a-это простой класс,который может содержать более одного свойства класса.Мы используем его для наследования всех необходимых свойств,например,у меня есть два класса Student и Subject</target>
        </trans-unit>
        <trans-unit id="bf0d1cdb5a6a3644e8bfc760e102d8c45933f5f2" translate="yes" xml:space="preserve">
          <source>View model defines how a view should look (for &lt;code&gt;LabelFor&lt;/code&gt;,&lt;code&gt;EditorFor&lt;/code&gt;,&lt;code&gt;DisplayFor&lt;/code&gt; helpers).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модель представления определяет, как должен выглядеть вид (для &lt;/font&gt;&lt;/font&gt; &lt;code&gt;LabelFor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;EditorFor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;DisplayFor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9d2f4d999b4e8033bb27ab7dc2cb0b933cc2b1f9" translate="yes" xml:space="preserve">
          <source>View model may define only specific fields of a single entity that is
required for the View.</source>
          <target state="translated">Модель представления может определять только специфические поля одной сущности,которые необходимы для представления.</target>
        </trans-unit>
        <trans-unit id="a3ad613724e9d48eba6c89b46a17de20911012a5" translate="yes" xml:space="preserve">
          <source>View models can combine values from different database entities.</source>
          <target state="translated">Модели представлений могут объединять значения из различных объектов базы данных.</target>
        </trans-unit>
        <trans-unit id="88cc59de60ea78da078768bd0693287c462679fb" translate="yes" xml:space="preserve">
          <source>View models differ from domain models in that view models only contain the data (represented by properties) that you want to use on your view.  For example, lets say that you want to add a new employee record, your view model might look like this:</source>
          <target state="translated">Представление моделей отличается от доменных моделей тем,что представление моделей содержит только данные (представленные свойствами),которые вы хотите использовать на вашем представлении.Например,скажем,что вы хотите добавить новую запись сотрудника,ваша модель представления может выглядеть так:</target>
        </trans-unit>
        <trans-unit id="1f8c9f81606302005f84d32d3f69f5ae641d81b8" translate="yes" xml:space="preserve">
          <source>View models documents a view by consisting only fields, that are represented in view.</source>
          <target state="translated">Модели представлений документируют представление,состоящее только из полей,которые представлены в представлении.</target>
        </trans-unit>
        <trans-unit id="b2ce5abd60a4d19b5579c94962e64770fc9e8908" translate="yes" xml:space="preserve">
          <source>View models may contain specific validation rules using data annotations or IDataErrorInfo.</source>
          <target state="translated">Модели просмотра могут содержать специальные правила проверки с помощью аннотаций данных или IDataErrorInfo.</target>
        </trans-unit>
        <trans-unit id="be4918c5414f9100cd5f83485a0270d1c180afa8" translate="yes" xml:space="preserve">
          <source>ViewModel = Model that is created to serve the view.</source>
          <target state="translated">ViewModel=модель,созданная для обслуживания представления.</target>
        </trans-unit>
        <trans-unit id="79c30b5bc1a474a5144110a6447c9b55277a8b35" translate="yes" xml:space="preserve">
          <source>ViewModel can also be used to insert, update records into more than one entities however the main use of ViewModel is to display columns from multiple entities (model) into a single view.</source>
          <target state="translated">ViewModel также может использоваться для вставки,обновления записей в несколько сущностей,однако основное использование ViewModel заключается в отображении столбцов из нескольких сущностей (моделей)в одном представлении.</target>
        </trans-unit>
        <trans-unit id="e6722051609c05704e6c132b81141178f6c7d623" translate="yes" xml:space="preserve">
          <source>ViewModel can have multiple entities or objects from different data
models or data source.</source>
          <target state="translated">ViewModel может иметь несколько сущностей или объектов из разных моделей данных или источников данных.</target>
        </trans-unit>
        <trans-unit id="33a3551043f854c97d287c49523c956381559fcc" translate="yes" xml:space="preserve">
          <source>ViewModel can have specific validation rules using data annotations
or IDataErrorInfo.</source>
          <target state="translated">ViewModel может иметь специальные правила проверки,используя аннотации данных или IDataErrorInfo.</target>
        </trans-unit>
        <trans-unit id="0336bfa7474ae8caa1c7da67673f6011e594432b" translate="yes" xml:space="preserve">
          <source>ViewModel contain fields that are represented in the view (for
LabelFor,EditorFor,DisplayFor helpers)</source>
          <target state="translated">ViewModel содержит поля,которые представлены в представлении (для LabelFor,EditorFor,DisplayFor helpers).</target>
        </trans-unit>
        <trans-unit id="362dde63db291f8ff26350eb03d16db0683098ff" translate="yes" xml:space="preserve">
          <source>ViewModel is workaround that patches the conceptual clumsiness of the MVC framework. It represents the 4th layer in the 3-layer Model-View-Controller architecture. when Model (domain model) is not appropriate, too big (bigger than 2-3 fields) for the View, we create smaller ViewModel to pass it to the View.</source>
          <target state="translated">ViewModel-это обходной путь,который исправляет концептуальную неуклюжесть каркаса MVC.Она представляет 4-й слой в 3-х слойной архитектуре Model-View-Controller.Когда Model (модель домена)не подходит,слишком большая (больше 2-3 полей)для View,мы создаем меньшую ViewModel,чтобы передать ее View.</target>
        </trans-unit>
        <trans-unit id="34715abf0c1e9b3f517aff36258647a1d12e3e85" translate="yes" xml:space="preserve">
          <source>We can make our BaseViewModel even more re-usable by making it generic:</source>
          <target state="translated">Мы можем сделать нашу модель BaseViewModel еще более пригодной для повторного использования,сделав ее универсальной:</target>
        </trans-unit>
        <trans-unit id="8575942cd731d21e3c9c12ecd2f77fb911ff82d2" translate="yes" xml:space="preserve">
          <source>We can take our design a step further and create a base view model class that can be used not only for PresentationOrders, but for any other class as well:</source>
          <target state="translated">Мы можем пойти дальше и создать базовый класс модели представления,который может быть использован не только для PresentationOrders,но и для любого другого класса:</target>
        </trans-unit>
        <trans-unit id="27fe3c01127e89d4991e485facdc2dfdf77c99d0" translate="yes" xml:space="preserve">
          <source>What is ViewModel in MVC</source>
          <target state="translated">Что такое ViewModel в MVC</target>
        </trans-unit>
        <trans-unit id="59dbf448d2c61de00cc76afad7cfb7a43e353b97" translate="yes" xml:space="preserve">
          <source>What is a ViewModel and why do we need a ViewModel for an ASP.NET MVC Application?</source>
          <target state="translated">Что такое ViewModel и зачем нам нужна ViewModel для приложения ASP.NET MVC?</target>
        </trans-unit>
        <trans-unit id="f82b0e97dd715c410e184bb6c08e65934b5ca31e" translate="yes" xml:space="preserve">
          <source>When deleting a record, I normally follow the same path as with the edit view model. I would also have a URL, for example:</source>
          <target state="translated">При удалении записи я обычно иду по тому же пути,что и с моделью вида редактирования.У меня также будет URL,например:</target>
        </trans-unit>
        <trans-unit id="78e0a655e7144b9be0d4b6b6603f1084fa30e450" translate="yes" xml:space="preserve">
          <source>When editing employee data (an employee that has already been added to the database) it wouldn&amp;rsquo;t differ much from my example above.  Create a view model, call it for example &lt;code&gt;EditEmployeeViewModel&lt;/code&gt;. Only have the data that you want to edit in this view model, like first name and last name. Edit the data and click the submit button. I wouldn&amp;rsquo;t worry too much about the &lt;code&gt;Id&lt;/code&gt; field because the &lt;code&gt;Id&lt;/code&gt; value will probably been in the URL, for example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;При редактировании данных сотрудника (сотрудника, который уже был добавлен в базу данных), он не сильно отличается от моего примера выше. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Создайте модель представления, назовите ее, например, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;EditEmployeeViewModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Только данные, которые вы хотите редактировать в этой модели представления, например, имя и фамилия. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Отредактируйте данные и нажмите кнопку отправки. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я бы не слишком беспокоился о &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;поле &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; потому что &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;значение &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , вероятно, будет в URL, например:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ffab00c82c200ae2679aaae4659aa6adc58110d" translate="yes" xml:space="preserve">
          <source>When loading the view/page, the create action method in your employee controller will create an instance of this view model, populate any fields if required, and then pass this view model to the view/page:</source>
          <target state="translated">При загрузке страницы представления,метод создания действия в контроллере сотрудника создаст экземпляр этой модели представления,при необходимости заполнит любые поля,а затем передаст эту модель представления на страницу представления:</target>
        </trans-unit>
        <trans-unit id="72c4f619085b94af5e15383c1cb9cefa8cdfb289" translate="yes" xml:space="preserve">
          <source>When the view loads up for the first time I would get the employee&amp;rsquo;s data from the database using the &lt;code&gt;Id&lt;/code&gt; of 3. I would then just display static text on my view/page so that the user can see what employee is being deleted. When the user clicks the Delete button, I would just use the &lt;code&gt;Id&lt;/code&gt; value of 3 and pass it to my repository layer. You only need the &lt;code&gt;Id&lt;/code&gt; to delete a record from the table.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Когда представление загружается в первый раз, я получаю данные сотрудника из базы данных, используя &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 3. Затем я просто отображаю статический текст на своем представлении / странице, чтобы пользователь мог видеть, какого сотрудника удаляют. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Когда пользователь нажимает кнопку &amp;laquo;Удалить&amp;raquo;, я просто использую &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;значение &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; равное 3, и передаю его слою своего хранилища. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вам нужен только &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для удаления записи из таблицы.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="60f4d77148cd9cb2e8b3f820285a972e93d7457c" translate="yes" xml:space="preserve">
          <source>Which produces this result (screen is taken after submitting form, with validation messages):</source>
          <target state="translated">Который приводит к такому результату (экран берется после отправки формы,с валидационными сообщениями):</target>
        </trans-unit>
        <trans-unit id="af219870105d660c40974d481c6f445bbb293a95" translate="yes" xml:space="preserve">
          <source>You can specify easily display templates for view models and reuse them in many places using DisplayFor or EditorFor helpers.</source>
          <target state="translated">Вы можете задать легко отображаемые шаблоны для просмотра моделей и повторно использовать их во многих местах с помощью помощников DisplayFor или EditorFor.</target>
        </trans-unit>
        <trans-unit id="52fadbc15fec74384a432f20937533ae9caf336b" translate="yes" xml:space="preserve">
          <source>You might only want specific properties, so this allows you to only load those and not additional unneccesary properties</source>
          <target state="translated">Вам могут понадобиться только определенные свойства,так что это позволяет загружать только эти и не дополнительные ненужные свойства.</target>
        </trans-unit>
        <trans-unit id="046abf42fe38709c73c082b01e30a42673f2c0f0" translate="yes" xml:space="preserve">
          <source>Your controller methods and your models will be small, easily testable and to the point.</source>
          <target state="translated">Методы контроллера и модели будут небольшими,легко тестируемыми и к делу.</target>
        </trans-unit>
        <trans-unit id="329ed648e659670fd193a27344d7cd539f996a1d" translate="yes" xml:space="preserve">
          <source>Your view/page might look like this (assuming you are using &lt;code&gt;ASP.NET MVC&lt;/code&gt; and the &lt;code&gt;Razor&lt;/code&gt; view engine):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ваш вид / страница может выглядеть следующим образом (при условии, что вы используете &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ASP.NET MVC&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;механизм представления &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Razor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="892c65ec6b04eec1e3b1acf11b73bee74b3373a8" translate="yes" xml:space="preserve">
          <source>the code above will throw an error...</source>
          <target state="translated">приведенный выше код приведет к ошибке...</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
