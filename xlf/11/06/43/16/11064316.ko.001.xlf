<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/11064316">
    <body>
      <group id="11064316">
        <trans-unit id="091d7604521f03fbab270293c84abd2e70da5fb8" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are &lt;strong&gt;composite objects&lt;/strong&gt; that contain properties that consist of application data as well as properties that are used by application code.  This characteristic is crucial when designing the view model for reusability and is discussed in the examples below.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;응용 프로그램 코드로 사용되는 속성뿐만 아니라 응용 프로그램 데이터로 구성된 속성이 포함 된 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;복합 개체&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 특성은 재사용 성을 위해 뷰 모델을 설계 할 때 중요하며 아래 예에서 설명합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71c8fcb4369ecbce1cadce629ab789c7a425003c" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are business objects &amp;ndash; their definition is dependent on application data.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; 비즈니스 개체 &amp;ndash; 정의는 응용 프로그램 데이터에 따라 다릅니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8e5133166dfde93ad82f68548991bff539b30864" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are the single source of data used to render a page or screen.  Usually this means that a view model will expose every property that any control on the page will need to render itself correctly.  Making the view model the single source of data for the view greatly improves its capability and value for unit testing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; 페이지 또는 화면을 렌더링하는 데 사용되는 단일 데이터 소스입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;일반적으로 이것은 뷰 모델이 페이지의 모든 컨트롤이 올바르게 렌더링해야하는 모든 속성을 노출한다는 것을 의미합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델을 뷰의 단일 데이터 소스로 만들면 단위 테스트의 기능과 가치가 크게 향상됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="02b2e16664ca73e1abe6e37f7febb336eece814d" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Are written &amp;ldquo;per page&amp;rdquo; or &amp;ldquo;per screen&amp;rdquo;.  A unique View Model is typically written for every page or screen in an application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; &quot;페이지 당&quot;또는 &quot;화면 당&quot;으로 작성되었습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;고유 한 뷰 모델은 일반적으로 응용 프로그램의 모든 페이지 또는 화면에 대해 작성됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4dadb08ae807a9a03438ec13b1f5b7f4e1802702" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Contain application code.  View Models usually contain methods that are called during rendering and when the user is interacting with the page.  This code typically relates to event handling, animation, visibility of controls, styling, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; 응용 프로그램 코드를 포함합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델에는 일반적으로 렌더링 중 및 사용자가 페이지와 상호 작용할 때 호출되는 메서드가 포함됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 코드는 일반적으로 이벤트 처리, 애니메이션, 컨트롤의 가시성, 스타일 등에 관련됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f8dd38f2c3ef2267225a10c37937fb1e65b83bd5" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Contain code that calls business services for the purpose of retrieving data or sending it to a database server.  This code is often mistakenly placed in a controller. Calling business services from a controller usually limits the usefulness of the view model for unit testing.  To be clear, view models themselves should not contain business logic but should make calls to services which do contain business logic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; 데이터를 검색하거나 데이터베이스 서버로 전송하기 위해 비즈니스 서비스를 호출하는 코드를 포함합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 코드는 종종 컨트롤러에 실수로 배치됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러에서 비즈니스 서비스를 호출하면 일반적으로 단위 테스트에 대한 뷰 모델의 유용성이 제한됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;명확히하기 위해 뷰 모델 자체에는 비즈니스 로직이 포함되지 않아야하지만 비즈니스 로직이 포함 된 서비스를 호출해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="021c8e92e046cb7fb5232384ab062c9875b5cbfd" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Contain mostly properties. Code is typically limited to formatting data or converting to or from a DTO.  Presentation Models should not contain business logic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; 대부분 속성을 포함합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;코드는 일반적으로 데이터 형식을 지정하거나 DTO로 또는 DTO로 변환하는 것으로 제한됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프리젠 테이션 모델에는 비즈니스 로직이 포함되지 않아야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="857491b6cd3a3ecb0e3f8827e94a51936304c24e" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often contain properties of a different base type than a DTO.  For example dollar amounts may be represented as strings so they can contain commas and a currency symbol.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; 종종 DTO와 다른 기본 유형의 속성을 포함합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어 달러 금액은 문자열로 표시되어 쉼표와 통화 기호를 포함 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e22c1184a19f283ebf5e7adbf12c0f7a1715b41f" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often contain properties which are other view models for other pages or screens.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; 종종 다른 페이지 나 화면에 대한 다른 뷰 모델 인 속성이 포함되어 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="25911f773ca4593c19b1e48346c8399bb77a595a" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often defined by how they are used as well as their object characteristics.  In other words, a simple DTO that is used as the backing model for rendering a grid is in fact also a presentation model in the context of that grid.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; 객체 특성뿐만 아니라 사용 방법에 따라 정의되기도합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다시 말해, 그리드를 렌더링하기위한 백킹 모델로 사용되는 간단한 DTO는 실제로 해당 그리드와 관련된 프레젠테이션 모델이기도합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c6a66f7efdf4a5e06bab68ad2558579c130c863f" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Often present a denormalized view of data.  That is, they often combine properties from multiple DTO&amp;rsquo;s.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; 종종 비정규 화 된 데이터보기가 제공됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;즉, 종종 여러 DTO의 속성을 결합합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6e4898ca5f9d6eb2c49f1bea5369a60c4cf54965" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Primarily used for transporting data to and from a database.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; 데이터베이스와의 데이터 전송에 주로 사용됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e335886ac2f2cf3f381eaa744f2b290f0f4ce886" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties exactly or closely match fields on a specific table in a data store.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; 속성은 데이터 저장소의 특정 테이블에있는 필드와 정확히 또는 밀접하게 일치합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c61f4a5d65b5e385b3d98c5edfd58bbe6c75219e" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties that are used to display application state such as error messages, user name, status, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; 오류 메시지, 사용자 이름, 상태 등과 같은 응용 프로그램 상태를 표시하는 데 사용되는 속성&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="44152c81772618111892f0b7395aac169c9b852d" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties used for data binding such as list objects and properties that hold intermediate data that is input by the user.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; 목록 개체와 같은 데이터 바인딩에 사용되는 속성 및 사용자가 입력 한 중간 데이터를 저장하는 속성.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="21d410d4b0bf8af1d102f651deae6feaf00cba49" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Properties used to format, display, stylize, or animate controls.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; 컨트롤의 서식, 표시, 스타일 또는 애니메이션에 사용되는 속성.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5aae7795624e8dca926efd2b235f5ecf57ae583d" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Usually contain properties only &amp;ndash; no code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; 일반적으로 코드가없는 속성 만 포함합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e1f255cb7e3440d6e3b86db25341f9d63f75478a" translate="yes" xml:space="preserve">
          <source>&amp;bull;   Usually derive from a base class since most pages and screens share common properties.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;bull; 대부분의 페이지와 화면은 공통 속성을 공유하므로 일반적으로 기본 클래스에서 파생됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9227c0bb1dad45263adf473f0da3cd39ae90f89c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ASP.NET MVC view can't have more than one model so if we need to display properties from more than one models into the view, it is not possible. ViewModel serves this purpose.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ASP.NET MVC 뷰는 둘 이상의 모델을 가질 수 없으므로 둘 이상의 모델의 속성을 뷰에 표시해야하는 경우에는 불가능합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModel이이 목적을 수행합니다.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="47ecad6905ac0c9527eeca8989f3ed9315b6069e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Composition over inheritance&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;상속에 대한 구성&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6cac57bc3539db0f79006be49553f758c9944982" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View Model Composition&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델 구성보기&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="23c62b9e31fb317d9e700732e0edb1adc0d493ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Data Transfer Objects a.k.a &amp;ldquo;Model&amp;rdquo;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot;모델&quot;이라는 데이터 전송 개체&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fcc90465fc1eb3567b153a345917c67232ee01d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Designing ViewModel&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델 설계&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dfd516553a0c9858f016c9102534da6d1fc06d58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit: I updated this answer on my Blog:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;편집 : 내 블로그 에서이 답변을 업데이트했습니다.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4e6d967aabeacd3870e306f89d67a1c8ccd3c930" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Presentation Models&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프리젠 테이션 모델&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="edc563f12ca05992aa529daff2c5530df492d181" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Presenting the viewmodel in the view&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰에서 뷰 모델 제시&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="57f268bfc3a39fc05382bd8b6501103c2bad7346" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The key thing to remember is that the view model only represents the data that you want to use&lt;/strong&gt;, nothing else.  You can imagine all the unnecessary code and validation if you have a domain model with 30 properties and you only want to update a single value.  Given this scenario you would only have this one value/property in the view model and not all the properties that are in the domain object.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;기억해야 할 핵심은 뷰 모델이 사용하려는 데이터만을 나타내며&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , 그 밖의 다른 것은 없다는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;30 개의 속성을 가진 도메인 모델이 있고 단일 값만 업데이트하려는 경우 불필요한 모든 코드와 유효성 검사를 상상할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 시나리오에서는 도메인 모델에있는 모든 속성이 아니라보기 모델에이 값 / 속성 만 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2ce37be823ac6fcdb8d035e0cb1591c15610d45b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;View Models&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델보기&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="acd627ae1902dfff170bb19bfeb185edff1d043f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;View model&lt;/strong&gt; is a class that represents the data model used in a specific view. We could use this class as a model for a login page:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 특정 뷰에서 사용되는 데이터 모델을 나타내는 클래스입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 클래스를 로그인 페이지의 모델로 사용할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3eb7989fc7b3268a75e31973397bb4f2b77d2723" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Working with Action&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;액션으로 작업하기&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="784698e6a41a9d10172d3f4ce6ee6685a991721c" translate="yes" xml:space="preserve">
          <source>@model ProjectName.Model.StudentViewModel</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@model ProjectName.Model.StudentViewModel&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="06a9eb888b55eaa767a102d8d7022d31558b556f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;view model&lt;/code&gt; represents the data that you want to display on your view/page, whether it be used for static text or for input values (like textboxes and dropdown lists) that can be added to the database (or edited). It is something different than your &lt;code&gt;domain model&lt;/code&gt;. It is a model for the view.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;view model&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 데이터베이스에 추가 (또는 편집) 할 수는 (텍스트 상자 및 드롭 다운 목록 등) 정적 텍스트 또는 입력 값에 사용할 수 있는지 여부,보기 / 페이지에 표시하도록 데이터를 나타냅니다. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;domain model&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 과 다른 것 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기의 모델입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7608e08d4f0b61ea5e48d5fd217b4a94edd98648" translate="yes" xml:space="preserve">
          <source>A Data Transfer Object (DTO) is a class with properties that match a table schema in a database.  DTO&amp;rsquo;s are named for their common usage for shuttling data to and from a data store.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DTO (데이터 전송 개체)는 데이터베이스의 테이블 스키마와 일치하는 속성이있는 클래스입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DTO는 데이터 저장소와 데이터를주고받는 데 일반적으로 사용되는 이름으로 지정되었습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db643f1ec44d2c837e9ab61d91025bd7d3d53e82" translate="yes" xml:space="preserve">
          <source>A controller is responsible for the page flow</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러는 페이지 흐름을 담당합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e3b4707fbc3e3d5a32deeabab22085bbd5da453c" translate="yes" xml:space="preserve">
          <source>A lot of big examples, let me explain in clear and crispy way.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;많은 큰 예들이 명확하고 또렷하게 설명하겠습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0d466d07d557affcf02c5d91f34f48707173caa3" translate="yes" xml:space="preserve">
          <source>A model is responsible for the business logic</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;비즈니스 로직을 책임지는 모델&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c0ca4a31f487009bebc32f78ce8247e830d54b1" translate="yes" xml:space="preserve">
          <source>A presentation model is a &lt;em&gt;utility&lt;/em&gt; class that is used to render data on a screen or report.  Presentation models are typically used to model complex data structures that are composed from data from multiple DTO&amp;rsquo;s.  Presentation models often represent a denormalized view of data.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프리젠 테이션 모델은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;화면 또는 보고서에서 데이터를 렌더링하는 데 사용되는 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;유틸리티&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 클래스입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프리젠 테이션 모델은 일반적으로 여러 DTO의 데이터로 구성된 복잡한 데이터 구조를 모델링하는 데 사용됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프리젠 테이션 모델은 종종 비정규 화 된 데이터 뷰를 나타냅니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="979814b66cb168384578069cfbe0cf257d7bd4fb" translate="yes" xml:space="preserve">
          <source>A view model is a conceptual model of data. Its use is to for example either get a subset or combine data from different tables.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델은 데이터의 개념적 모델입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어 서브 세트를 가져 오거나 다른 테이블에서 데이터를 결합하는 데 사용됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29517336bce9403bbabf349182e99b37661f6c22" translate="yes" xml:space="preserve">
          <source>A view model is similar to a presentation model in that is a backing class for rendering a view.  However it is very different from a Presentation Model or a DTO in how it is constructed.  View models often contain the same properties as presentation models and DTO&amp;rsquo;s and for this reason they are often confused one for the other.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델은 뷰를 렌더링하기위한 백킹 클래스라는 점에서 프리젠 테이션 모델과 유사합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 프레젠테이션 모델 또는 DTO와는 구성 방식이 매우 다릅니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델에는 프레젠테이션 모델 및 DTO와 동일한 속성이 포함되는 경우가 많기 때문에 종종 서로 혼동됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2d122dfbc586108e4d0e045c5a4088f267f77650" translate="yes" xml:space="preserve">
          <source>A view model might not only have data from one database table. It can combine data from another table. Take my example above about adding a new employee record. Besides adding just the first and last names you might also want to add the department of the employee. This list of departments will come from your &lt;code&gt;Departments&lt;/code&gt; table. So now you have data from the &lt;code&gt;Employees&lt;/code&gt; and &lt;code&gt;Departments&lt;/code&gt; tables in one view model. You will just then need to add the following two properties to your view model and populate it with data:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델에는 하나의 데이터베이스 테이블의 데이터 만있을 수 있습니다. 다른 테이블의 데이터를 결합 할 수 있습니다. 새 직원 레코드 추가에 대한 위의 예를 들어보십시오. 성과 이름을 추가하는 것 외에도 직원 부서를 추가 할 수도 있습니다. 부서의이 목록은에서 올 것이다 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Departments&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 테이블. 이제 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Employees&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; and &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Departments&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 테이블 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 데이터 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;가 하나의 뷰 모델에 있습니다. 그런 다음 뷰 모델에 다음 두 속성을 추가하고 데이터로 채워야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="18421b8d98d053ede53aa47964692b02a912d66b" translate="yes" xml:space="preserve">
          <source>An example of a model in a web application could be:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;웹 애플리케이션에서 모델의 예는 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8c5608853992951b4bd783c7430ce80a18111116" translate="yes" xml:space="preserve">
          <source>An example presentation model:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프레젠테이션 모델의 예 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="12c9ef1f0ac8e4b4eaecd1d24444d26dcf26204d" translate="yes" xml:space="preserve">
          <source>And actions:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 행동 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="32b125fff82d8b61b77572d85c31866f061d2d80" translate="yes" xml:space="preserve">
          <source>And with Data Annotations it might look this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 데이터 주석을 사용하면 다음과 같이 보일 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ee07849c78e92b6c9ec11549edbd1c54d9e97b91" translate="yes" xml:space="preserve">
          <source>Another example of a view model and its retrieval: We want to display basic user data, his privileges and users name. We create a special view model, which contains only the required fields. We retrieve data from different entities from database, but the view is only aware of the view model class:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델 및 검색의 다른 예 : 기본 사용자 데이터, 그의 권한 및 사용자 이름을 표시하려고합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;필수 필드 만 포함하는 특수 뷰 모델을 만듭니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;데이터베이스에서 다른 엔티티에서 데이터를 검색하지만 뷰는 뷰 모델 클래스 만 인식합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c9a2a634871a0bacbbb2bcba04ceea845df0f23c" translate="yes" xml:space="preserve">
          <source>Another point, you don&amp;rsquo;t really need a view model for every action. If it is simple data then it would be fine to only use &lt;code&gt;EmployeeViewModel&lt;/code&gt;. If it is complex views/pages and they differ from each other then I would suggest you use separate view models for each.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또 다른 요점으로, 모든 액션에 대해 뷰 모델이 실제로 필요하지는 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단순한 데이터라면 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;EmployeeViewModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 만 사용하는 것이 좋습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;복잡한보기 / 페이지이며 서로 다르면 각각 별도의보기 모델을 사용하는 것이 좋습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30a807962c4d842911cca18dd735b9820c28317b" translate="yes" xml:space="preserve">
          <source>As stated earlier, view models are composite objects in that they combine application properties and business data properties on a single object.  Examples of commonly used application properties that are used on view models are:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;앞에서 언급 한 것처럼 뷰 모델은 단일 객체에서 응용 프로그램 속성과 비즈니스 데이터 속성을 결합한다는 점에서 복합 객체입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델에 사용되는 일반적으로 사용되는 응용 프로그램 속성의 예는 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f13564fc793a8a2f2c5001293b80cd5b65cc8a6d" translate="yes" xml:space="preserve">
          <source>As you can see it only contains two of the properties. These two properties are also in the employee domain model.  Why is this you may ask?  &lt;code&gt;Id&lt;/code&gt; might not be set from the view, it might be auto generated by the Employee table.  And &lt;code&gt;DateCreated&lt;/code&gt; might also be set in the stored procedure or in the service layer of your application.  So &lt;code&gt;Id&lt;/code&gt; and &lt;code&gt;DateCreated&lt;/code&gt; are not needed in the view model. You might want to display these two properties when you view an employee&amp;rsquo;s details (an employee that has already been captured) as static text.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보시다시피 두 가지 속성 만 포함합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 두 속성은 직원 도메인 모델에도 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;왜 이런 질문을 할 수 있습니까? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기에서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 설정하지 않았거나 Employee 테이블에서 자동으로 생성했을 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;DateCreated&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 저장 프로시 저나 응용 프로그램의 서비스 계층에서 설정 될 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델에는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;DateCreated&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 필요하지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;직원의 세부 사항 (이미 캡처 된 직원)을 정적 텍스트로 볼 때이 두 특성을 표시 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34516062670ac1d4db45943e7dbe90a4d7d929e5" translate="yes" xml:space="preserve">
          <source>As you can see, a view model has many roles:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보시다시피 뷰 모델에는 많은 역할이 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7f17218ceb9cb01e6e7e9e9aa432bc220eb9e92b" translate="yes" xml:space="preserve">
          <source>Assume we are writing a web application.  One of the requirements of the application design is that the page title, user name, and application name must be displayed on every page.  If we want to create a page to display a presentation order object, we may modify the presentation model as follows:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;웹 애플리케이션을 작성한다고 가정하십시오. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;응용 프로그램 디자인의 요구 사항 중 하나는 페이지 제목, 사용자 이름 및 응용 프로그램 이름이 모든 페이지에 표시되어야한다는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프리젠 테이션 순서 오브젝트를 표시하기 위해 페이지를 작성하려는 경우 프리젠 테이션 모델을 다음과 같이 수정할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7463aba05ab71a5b6737ae5556ad6f86a21910e0" translate="yes" xml:space="preserve">
          <source>Characteristics of DTO&amp;rsquo;s:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DTO의 특징 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="86f4c5a2ba2bb5bcef5863f95fddcf2f402f1d49" translate="yes" xml:space="preserve">
          <source>Characteristics of Presentation Models:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프리젠 테이션 모델의 특징 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bcda80ff10e740640afce89952a9a0c497f395fe" translate="yes" xml:space="preserve">
          <source>Characteristics of View Models:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델의 특징 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7f7ca519ba25ddf1cdaa868e954528b1bb64bfd5" translate="yes" xml:space="preserve">
          <source>Database tables are usually normalized therefore DTO&amp;rsquo;s are usually normalized also.  This makes them of limited use for presenting data.  However, for certain simple data structures they often do quite well.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;데이터베이스 테이블은 일반적으로 정규화되므로 DTO도 일반적으로 정규화됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 데이터 표시에 제한적으로 사용됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 특정 간단한 데이터 구조의 경우 종종 잘 수행됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9ae7f8fac70de032f0536b881084c08503cd96fb" translate="yes" xml:space="preserve">
          <source>Few examples of View Models are below</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델의 몇 가지 예는 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0256f135a479d495b6f97309a130ec92b420fff0" translate="yes" xml:space="preserve">
          <source>Generally speaking, a view model is an object that contains all the properties and methods necessary to render a view. View model properties are often related to data objects such as customers and orders and in addition they also contain properties related to the page or application itself such as user name, application name etc. View models provide a convenient object to pass to a rendering engine to create a html page.  One of many reasons to use a view model is that view models provide a way to unit test certain presentation tasks such as handling user input, validating data, retrieving data for display, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;일반적으로 뷰 모델은 뷰를 렌더링하는 데 필요한 모든 속성과 메서드가 포함 된 객체입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델 속성은 종종 고객 및 주문과 같은 데이터 객체와 관련이 있으며 사용자 이름, 애플리케이션 이름 등과 같은 페이지 또는 애플리케이션 자체와 관련된 속성도 포함합니다. 뷰 모델은 렌더링 엔진에 전달하기에 편리한 객체를 제공합니다. html 페이지를 만듭니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델을 사용하는 많은 이유 중 하나는 뷰 모델이 사용자 입력 처리, 데이터 유효성 검사, 표시 할 데이터 검색 등과 같은 특정 프레젠테이션 작업을 단위로 테스트 할 수있는 방법을 제공하기 때문입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0ecc5f2f113be01ef1af7af6615d65e0b2559802" translate="yes" xml:space="preserve">
          <source>Here are two examples of what DTO&amp;rsquo;s might look like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음은 DTO의 모습에 대한 두 가지 예입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b5752eb70f697d164aee0d46a8a5e9ee4f7bfc27" translate="yes" xml:space="preserve">
          <source>Here is a comparison of Entity models (a.ka. DTO's a.ka. models), Presentation Models, and View Models.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음은 엔터티 모델 (일명 DTO의 일명 모델), 프레젠테이션 모델 및 뷰 모델을 비교 한 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="41fc4a53daff6828d2c36dc08d64604023be26b0" translate="yes" xml:space="preserve">
          <source>Here is a small example of &lt;a href=&quot;http://techfunda.com/howto/262/list-data-using-viewmodel&quot;&gt;List data using ViewModel&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음은 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://techfunda.com/howto/262/list-data-using-viewmodel&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModel을 사용&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 하는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;List 데이터&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 작은 예입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3bdb4b2444f19c2d0fe752fada6e32503c4b33b2" translate="yes" xml:space="preserve">
          <source>Here is a way we might re-factor the order presentation model such that it become a true view model and will be useful for displaying a single PresentationOrder object or a collection of PresentationOrder objects:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음은 주문 프리젠 테이션 모델이 실제 뷰 모델이되도록 단일 리팩터링하는 방법이며 단일 PresentationOrder 객체 또는 PresentationOrder 객체 컬렉션을 표시하는 데 유용합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0a2a50d3fa7ff4100b69d2f8236dcca6fdff8970" translate="yes" xml:space="preserve">
          <source>Hope this will be useful.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것이 도움이 되길 바랍니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="095b0b70b5a9cab69d8341323e70d4db8884f3cc" translate="yes" xml:space="preserve">
          <source>I am new to ASP.NET MVC. I have a problem with understanding the purpose of a ViewModel.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ASP.NET MVC를 처음 사용합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModel의 목적을 이해하는 데 문제가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9ae564fdfdc1add6404c350c63a78148f7b5df36" translate="yes" xml:space="preserve">
          <source>I didn't read all the posts but every answer seems to be missing one concept that really helped me &quot;get it&quot;...</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 모든 게시물을 읽지는 않았지만 모든 대답에는 실제로 내가 그것을 얻는 데 도움이되는 하나의 개념이 누락 된 것 같습니다 ...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29fe05d20d4215aef9cfbc0a31e274894e167da3" translate="yes" xml:space="preserve">
          <source>I find myself using ViewModels to pass info into a view/form, and then transfering that data into a valid Model when the form posts back to the controller - also very handy for storing Lists(IEnumerable).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModels를 사용하여 정보를보기 / 양식에 전달 한 다음 양식이 컨트롤러에 다시 게시 될 때 해당 데이터를 유효한 모델로 전송합니다 .Lists (IEnumerable)를 저장하는 데 매우 유용합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9e24d7239899f9ca10ad64122efd148daa74a551" translate="yes" xml:space="preserve">
          <source>I hope this clears up any confusion that you had about view models and domain models.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것이 뷰 모델과 도메인 모델에 대한 혼란을 없애기를 바랍니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="24252c1ad530d2526ac3e27970bf24f54019eafb" translate="yes" xml:space="preserve">
          <source>If I get a good example about its working and explanation that would be better.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;작동 및 설명에 대한 좋은 예를 얻으면 더 좋습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fb6471d4ff66132ef2b78aefd3fa0f22bdcfd22f" translate="yes" xml:space="preserve">
          <source>If a Model is akin to a database &lt;strong&gt;&lt;em&gt;Table&lt;/em&gt;&lt;/strong&gt;, then a ViewModel is akin to a database &lt;strong&gt;&lt;em&gt;View&lt;/em&gt;&lt;/strong&gt; - A view typically either returns small amounts of data from one table, or, complex sets of data from multiple tables (joins).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델이 데이터베이스 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;테이블&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 과 유사하면 ViewModel은 데이터베이스와 유사합니다. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -일반적으로 뷰는 한 테이블에서 소량의 데이터를 반환하거나 여러 테이블 (조인)의 복잡한 데이터 집합을 반환합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a33be26cdbdc7f223acadebc849211c36bba0ca8" translate="yes" xml:space="preserve">
          <source>If there are too few view-specific data and/or transformations, you can use the Model itself</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 특정 데이터 및 / 또는 변환이 너무 적은 경우 모델 자체를 사용할 수 있습니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4843531d7fc5288ce3a4f8b2b896b726f41768cc" translate="yes" xml:space="preserve">
          <source>If you have properties specific to the view, and not related to the DB/Service/Data store, it is a good practice to use ViewModels. Say, you want to leave a checkbox selected based on a DB field (or two) but the DB field itself isn't a boolean. While it is possible to create these properties in the Model itself and keep it hidden from the binding to data, you may not want to clutter the Model depending on the amount of such fields and transactions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰와 관련된 속성이 있고 DB / Service / Data 저장소와 관련이없는 경우 ViewModels를 사용하는 것이 좋습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DB 필드 (또는 2 개)를 기준으로 확인란을 선택된 상태로 두려고하지만 DB 필드 자체는 부울이 아닙니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델 자체에서 이러한 속성을 생성하고 데이터 바인딩에서 숨길 수는 있지만 이러한 필드와 트랜잭션의 양에 따라 모델을 어지럽히 지 않을 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="50975c3b578778119e55331e663bf658d0f95499" translate="yes" xml:space="preserve">
          <source>If you want to study code how to setup a &quot;Baseline&quot; web application with ViewModels I can advise to download this code on GitHub: &lt;a href=&quot;https://github.com/ajsaulsberry/BlipAjax&quot;&gt;https://github.com/ajsaulsberry/BlipAjax&lt;/a&gt;. I developed large enterprise applications. When you do this its problematic to setup a good architecture that handles all this &quot;ViewModel&quot; functionality. I think with BlipAjax you will have a very Good &quot;baseline&quot; to start with. Its just a simple website, but great in its simplicity. I like the way they used the English language to point at whats really needed in the application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModels를 사용하여 &quot;기준&quot;웹 응용 프로그램을 설정하는 방법을 코드를 연구하려면 GitHub에서 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/ajsaulsberry/BlipAjax&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://github.com/ajsaulsberry/BlipAjax&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 코드를 다운로드하는 것이 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;좋습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;대기업 응용 프로그램을 개발했습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이렇게하면이 &quot;ViewModel&quot;기능을 모두 처리하는 훌륭한 아키텍처를 설정하는 것이 문제가됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;BlipAjax를 사용하면 아주 좋은 &quot;기준선&quot;을 갖게 될 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단순한 웹 사이트이지만 단순성이 뛰어납니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 그들이 응용 프로그램에서 실제로 필요한 것을 지적하기 위해 영어를 사용하는 방식을 좋아합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6a3c97e12b9a1ccbdf3d8424c6609b00baa9196d" translate="yes" xml:space="preserve">
          <source>In MVC the process is split into 3 different responsibilities:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC에서 프로세스는 3 가지 책임으로 나뉩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2d72e29ee7d99b2d5c4d674d77a200110c79124b" translate="yes" xml:space="preserve">
          <source>In ViewModel put only those fields/data that you want to display on 
the view/page.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModel에는보기 / 페이지에 표시하려는 필드 / 데이터 만 넣으십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dce4a57fc1720e9f891e0f68e7fc4cdd117eef11" translate="yes" xml:space="preserve">
          <source>Let us say that you have an &lt;code&gt;Employee&lt;/code&gt; class that represents your employee domain model and it contains the following properties (unique identifier, first name, last name and date created):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;직원 도메인 모델을 나타내는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Employee&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 클래스가 있고 다음과 같은 속성 (고유 식별자, 이름, 성 및 생성 날짜)이 포함되어 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있다고 가정 해 보겠습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="77a51cb2e7eadb97bd30de437ef458714cf33e08" translate="yes" xml:space="preserve">
          <source>Looking at the above two classes we can see that one way to think about a view model is that it is a presentation model that contains another presentation model as a property.  The top level presentation model (i.e. view model) contains properties that are relevant to the page or application while presentation model (property) contains properties that are relevant to application data.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위의 두 클래스를 보면 뷰 모델을 생각하는 한 가지 방법은 다른 프리젠 테이션 모델을 속성으로 포함하는 프리젠 테이션 모델이라는 것을 알 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;최상위 프레젠테이션 모델 (예 : 뷰 모델)에는 페이지 또는 응용 프로그램과 관련된 속성이 포함되고 프레젠테이션 모델 (속성)에는 응용 프로그램 데이터와 관련된 속성이 포함됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e52b8b84a0ff20689f4296eecbe0ffcbf0e3d25a" translate="yes" xml:space="preserve">
          <source>MVC doesn't have a viewmodel: it has a model, view and controller. A viewmodel is part of MVVM (Model-View-Viewmodel). MVVM is derived from the Presentation Model and is popularized in WPF. There should also be a model in MVVM, but most people miss the point of that pattern completely and they will only have a view and a viewmodel. The model in MVC is similar to the model in MVVM.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC에는 뷰 모델이 없습니다. 모델, 뷰 및 컨트롤러가 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델은 MVVM (Model-View-Viewmodel)의 일부입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVVM은 프레젠테이션 모델에서 파생되었으며 WPF에서 대중화되었습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVVM에는 모델도 있어야하지만 대부분의 사람들은 해당 패턴의 요점을 완전히 놓치고 뷰와 뷰 모델 만 갖습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC의 모델은 MVVM의 모델과 유사합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0007a747ce5507b06eab17bdb0e2de8aa9b638a7" translate="yes" xml:space="preserve">
          <source>MVC is not very suitable for web applications. It is a pattern introduced by Smalltalk for creating desktop applications. A web environment behaves completely different. It doesn't make much sense to copy a 40-year old concept from the desktop development and paste it into a web enviroment. However a lot of people think this is ok, because their application compiles and returns the correct values. That is, in my opinion, not enough to declare a certain design choice as ok.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC는 웹 응용 프로그램에 적합하지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;데스크탑 응용 프로그램을 만들기 위해 Smalltalk에서 도입 한 패턴입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;웹 환경은 완전히 다릅니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;40 년 된 개념을 데스크탑 개발에서 복사하여 웹 환경에 붙여 넣는 것은 의미가 없습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 많은 사람들이 응용 프로그램이 올바른 값을 컴파일하고 반환하기 때문에 이것이 정상이라고 생각합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;즉, 특정 디자인 선택을 괜찮다고 선언하기에 충분하지 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c79b14feab9fbcbe613cc41f23adc6adae02bdd7" translate="yes" xml:space="preserve">
          <source>My answer is a bit lengthy but I think it is important to compare view models to other types of commonly used models to understand why they are different and why they are necessary.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;내 대답은 약간 길지만 뷰 모델을 다른 유형과 일반적으로 사용되는 모델과 비교하여 왜 다른지, 왜 필요한지를 이해하는 것이 중요하다고 생각합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8eba30174b6f892cdd849bbf51e7c3fc9fec3d73" translate="yes" xml:space="preserve">
          <source>Now  we use this ViewModel in View</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 View에서이 ViewModel을 사용합니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="659895d640bf5615ecde5842496c44e98b39693c" translate="yes" xml:space="preserve">
          <source>Now our implementations are effortless:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 우리의 구현은 수월합니다 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c33d9e59e291008f5fe3aa95e955d7c285c36b6a" translate="yes" xml:space="preserve">
          <source>Now we are able to access all the properties of StudentViewModel and inherited class in View.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 View에서 StudentViewModel 및 상속 된 클래스의 모든 속성에 액세스 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="591bd6b2b0e6e6bf85b2261e1527ffe7d3c0375f" translate="yes" xml:space="preserve">
          <source>Now we can simplify our PresentationOrderVM like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 PresentationOrderVM을 다음과 같이 단순화 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="96775092c82616d374ace6d7a2b5fd684f2a92d9" translate="yes" xml:space="preserve">
          <source>Now we create one class and can give it any name, but this format &quot;XyzViewModel&quot; will make it easier to understand. It is inheritance concept.
Now we create a third class with the following name:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 우리는 하나의 클래스를 만들어 어떤 이름이든 지정할 수 있지만이 형식 &quot;XyzViewModel&quot;은 이해하기 쉽게 만들어줍니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;상속 개념입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 다음 이름으로 세 번째 클래스를 만듭니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="56f6d61294c2da51e88d3679b47bf298b7bdf469" translate="yes" xml:space="preserve">
          <source>Now we want to display records student's Name and Subject's Name in View (In MVC), but it's not possible to add more than one classes like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 우리는 학생의 이름과 과목의 이름을 View (MVC에서)로 표시하고 싶지만 다음과 같은 클래스를 두 개 이상 추가 할 수는 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d1b202eb2b094f90355bef37b9bc8b31b823c3c6" translate="yes" xml:space="preserve">
          <source>Presentation models are used &amp;ldquo;as needed&amp;rdquo; and &amp;ldquo;where needed&amp;rdquo; (whereas DTO&amp;rsquo;s are usually tied to the database schema).  A presentation model may be used to model data for an entire page, a grid on a page, or a dropdown on a grid on a page. Presentation models often contain properties that are other presentation models.  Presentation models are often constructed for a single-use purpose such as to render a specific grid on a single page.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프리젠 테이션 모델은&amp;ldquo;필요한&amp;rdquo;및&amp;ldquo;필요한 위치&amp;rdquo;(DTO는 일반적으로 데이터베이스 스키마와 연결되어 있음)로 사용됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프리젠 테이션 모델은 전체 페이지, 페이지의 그리드 또는 페이지의 그리드 드롭 다운에 대한 데이터를 모델링하는 데 사용될 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프리젠 테이션 모델에는 종종 다른 프리젠 테이션 모델 인 특성이 포함됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프리젠 테이션 모델은 종종 특정 그리드를 단일 페이지에 렌더링하는 것과 같은 단일 목적으로 구성됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8ffa8c608739cf046a5f4acf0ce72acebed316f4" translate="yes" xml:space="preserve">
          <source>Retrieval:</source>
          <target state="translated">Retrieval:</target>
        </trans-unit>
        <trans-unit id="ede225ff98051fa3d75a279416af02c28a4902d6" translate="yes" xml:space="preserve">
          <source>Since view reperesents the properties of the ViewModel, hence it is
easy for rendering and maintenance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰는 ViewModel의 속성을 반영하므로 렌더링 및 유지 관리가 쉽습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="810649a5346ec9759ec597984cd267207680cc84" translate="yes" xml:space="preserve">
          <source>So in above Example Place and Category are the two different entities and PlaceCategory viewmodel is ViewModel which we can use on View.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위의 예에서 장소 및 카테고리는 서로 다른 두 엔티티이며 PlaceCategory 뷰 모델은 View에서 사용할 수있는 ViewModel입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="55668866ad670a5721cd3d4b303def755a5f1b9c" translate="yes" xml:space="preserve">
          <source>Take this &lt;code&gt;Id&lt;/code&gt; and pass it through to your repository layer, together with your first name and last name values.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가져 와서 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이름 및 성 값과 함께 리포지토리 계층으로 전달하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c9c0379520c692636f1098086ee64944f61eb925" translate="yes" xml:space="preserve">
          <source>The controller can use it like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러는 다음과 같이 사용할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dac2212ec6ea6f80a65cd7e4c4833a9d4ce8e740" translate="yes" xml:space="preserve">
          <source>The following examples show why the composite nature of view models is important and how we can best construct a View Model that efficient and reusable.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음 예는 뷰 모델의 복합 특성이 중요한 이유와 효율적이고 재사용 가능한 뷰 모델을 가장 잘 구성 할 수있는 방법을 보여줍니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fc04ddab544f11f980f798cc18d0d331fbd3fb78" translate="yes" xml:space="preserve">
          <source>The way of creating ViewModel is same as creating Model, the way of creating view for the Viewmodel is same as creating view for Model.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModel 작성 방법은 Model 작성 방법과 동일하며, Viewmodel보기 작성 방법은 Model보기 작성 방법과 동일합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0b20cb6512cbb29a4429b759ba44cc79eb0ee528" translate="yes" xml:space="preserve">
          <source>This design might work&amp;hellip; but what if we want to create a page that will display a list of orders?  The PageTitle, UserName, and ApplicationName properties will be repeated and become unwieldy to work with.  Also, what if we want to define some page-level logic in the constructor of the class?  We can no longer do that if we create an instance for every order that will be displayed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 디자인은 효과가있을 수 있지만 주문 목록을 표시 할 페이지를 만들려면 어떻게해야합니까? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PageTitle, UserName 및 ApplicationName 속성이 반복되어 다루기 어려워집니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 클래스 생성자에서 일부 페이지 수준 논리를 정의하려면 어떻게해야합니까? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;표시 될 모든 주문에 대해 인스턴스를 생성하면 더 이상 그렇게 할 수 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc3f1aa6ae9c1ae576ba8114ffcb4e62e943c55b" translate="yes" xml:space="preserve">
          <source>To list data from more than entities in a view page &amp;ndash; we can create a
View model and have properties of all the entities for which we want
to list data. Join those database entities and set View model
properties and return to the View to show data of different
entities in one tabular form</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 페이지에 여러 엔터티의 데이터를 나열하려면 &amp;ndash; 뷰 모델을 만들고 데이터를 나열 할 모든 엔터티의 속성을 가질 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;해당 데이터베이스 엔터티에 가입하고 뷰 모델 속성을 설정하고 뷰로 돌아가서 다른 엔터티의 데이터를 하나의 표 형식으로 표시&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d7a93bb744cd53b65dd6eabcf5a3c928eb5a7df3" translate="yes" xml:space="preserve">
          <source>To summarize, and to directly answer the question that is asked:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;요약 된 질문과 질문에 직접 대답하려면 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="848ace57c7dbc4504e9902c434ff0470b55aa46b" translate="yes" xml:space="preserve">
          <source>Use a mapper when ViewModel become more complex.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModel이 더 복잡해지면 매퍼를 사용하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="73ed7042fd0b7f5ee31ecb7dc68fc0d76ebd701f" translate="yes" xml:space="preserve">
          <source>Using this view model you can define the view (Razor view engine):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 뷰 모델을 사용하여 뷰를 정의 할 수 있습니다 (Razor 뷰 엔진).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d591ae4859bc24521fd94d00cecdd51f4e7a80b" translate="yes" xml:space="preserve">
          <source>Validation would thus be done only on &lt;code&gt;FirstName&lt;/code&gt; and &lt;code&gt;LastName&lt;/code&gt;.  Using &lt;a href=&quot;https://fluentvalidation.net/&quot;&gt;FluentValidation&lt;/a&gt; you might have validation like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 유효성 검사는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;FirstName&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;LastName&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서만 수행됩니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://fluentvalidation.net/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;FluentValidation&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하면&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 다음과 같은 유효성 검사가 가능합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="087b229658bbe1662ba4cdcdb4873d59633cb3d2" translate="yes" xml:space="preserve">
          <source>View Model is a model class that can hold only those properties that is required for a view. It can also contains properties from more than one entities (tables) of the database. As the name suggests, this model is created specific to the View requirements.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델은 뷰에 필요한 속성 만 보유 할 수있는 모델 클래스입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 데이터베이스의 둘 이상의 엔티티 (테이블)의 특성을 포함 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이름에서 알 수 있듯이이 모델은 View 요구 사항에 따라 만들어집니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d776d2197476e41176b7c93c2dc025f13b077b72" translate="yes" xml:space="preserve">
          <source>View Model is class which we can use for rendering data on View. Suppose you have two entities Place and PlaceCategory and you want to access data from both entities using a single model then we use ViewModel.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델은 뷰에서 데이터를 렌더링하는 데 사용할 수있는 클래스입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;두 개의 엔티티 Place 및 PlaceCategory가 있고 단일 모델을 사용하여 두 엔티티의 데이터에 액세스하려는 경우 ViewModel을 사용한다고 가정하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f27d834295e2d242c474637acd727f54ea253491" translate="yes" xml:space="preserve">
          <source>View is responsible for presenting the data to the user</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;View는 사용자에게 데이터를 제공합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0356ac1237d6bba655d268c89b9c5143d4544bc5" translate="yes" xml:space="preserve">
          <source>View model a is simple class which can contain more than one class property. We use it to inherit all the required properties, e.g. I have two classes Student and Subject</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델 a는 둘 이상의 클래스 속성을 포함 할 수있는 간단한 클래스입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우리는 필요한 모든 속성을 상속하기 위해 사용합니다. 예를 들어 Student와 Subject라는 두 클래스가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bf0d1cdb5a6a3644e8bfc760e102d8c45933f5f2" translate="yes" xml:space="preserve">
          <source>View model defines how a view should look (for &lt;code&gt;LabelFor&lt;/code&gt;,&lt;code&gt;EditorFor&lt;/code&gt;,&lt;code&gt;DisplayFor&lt;/code&gt; helpers).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델은 뷰의 모양을 정의합니다 ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;LabelFor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;EditorFor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;DisplayFor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 도우미).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9d2f4d999b4e8033bb27ab7dc2cb0b933cc2b1f9" translate="yes" xml:space="preserve">
          <source>View model may define only specific fields of a single entity that is
required for the View.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델은 뷰에 필요한 단일 엔터티의 특정 필드 만 정의 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a3ad613724e9d48eba6c89b46a17de20911012a5" translate="yes" xml:space="preserve">
          <source>View models can combine values from different database entities.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델은 다른 데이터베이스 엔터티의 값을 결합 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="88cc59de60ea78da078768bd0693287c462679fb" translate="yes" xml:space="preserve">
          <source>View models differ from domain models in that view models only contain the data (represented by properties) that you want to use on your view.  For example, lets say that you want to add a new employee record, your view model might look like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델은 뷰에 사용하려는 데이터 (속성으로 표시) 만 포함한다는 점에서 도메인 모델과 다릅니다. 예를 들어, 새 직원 레코드를 추가한다고 가정하면 뷰 모델은 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1f8c9f81606302005f84d32d3f69f5ae641d81b8" translate="yes" xml:space="preserve">
          <source>View models documents a view by consisting only fields, that are represented in view.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델은 뷰로 표시되는 필드 만 구성하여 뷰를 문서화합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b2ce5abd60a4d19b5579c94962e64770fc9e8908" translate="yes" xml:space="preserve">
          <source>View models may contain specific validation rules using data annotations or IDataErrorInfo.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 모델에는 데이터 주석 또는 IDataErrorInfo를 사용하는 특정 유효성 검사 규칙이 포함될 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="be4918c5414f9100cd5f83485a0270d1c180afa8" translate="yes" xml:space="preserve">
          <source>ViewModel = Model that is created to serve the view.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModel = 뷰를 제공하기 위해 작성된 모델입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="79c30b5bc1a474a5144110a6447c9b55277a8b35" translate="yes" xml:space="preserve">
          <source>ViewModel can also be used to insert, update records into more than one entities however the main use of ViewModel is to display columns from multiple entities (model) into a single view.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 ViewModel을 사용하여 여러 엔터티에 레코드를 삽입하고 업데이트 할 수 있지만 ViewModel의 주요 용도는 여러 엔터티 (모델)의 열을 단일 뷰에 표시하는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e6722051609c05704e6c132b81141178f6c7d623" translate="yes" xml:space="preserve">
          <source>ViewModel can have multiple entities or objects from different data
models or data source.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModel은 다른 데이터 모델 또는 데이터 소스의 여러 엔티티 또는 객체를 가질 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="33a3551043f854c97d287c49523c956381559fcc" translate="yes" xml:space="preserve">
          <source>ViewModel can have specific validation rules using data annotations
or IDataErrorInfo.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModel은 데이터 주석 또는 IDataErrorInfo를 사용하여 특정 유효성 검사 규칙을 가질 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0336bfa7474ae8caa1c7da67673f6011e594432b" translate="yes" xml:space="preserve">
          <source>ViewModel contain fields that are represented in the view (for
LabelFor,EditorFor,DisplayFor helpers)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModel에는 뷰에 표시되는 필드가 포함되어 있습니다 (LabelFor, EditorFor, DisplayFor 도우미)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="362dde63db291f8ff26350eb03d16db0683098ff" translate="yes" xml:space="preserve">
          <source>ViewModel is workaround that patches the conceptual clumsiness of the MVC framework. It represents the 4th layer in the 3-layer Model-View-Controller architecture. when Model (domain model) is not appropriate, too big (bigger than 2-3 fields) for the View, we create smaller ViewModel to pass it to the View.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModel은 MVC 프레임 워크의 개념적 서투른 부분을 패치하는 해결 방법입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;3 계층 Model-View-Controller 아키텍처에서 4 번째 계층을 나타냅니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model (도메인 모델)이 적합하지 않고 View에 너무 큰 (2-3 개 필드보다 큼) View를 전달하기 위해 더 작은 ViewModel을 만듭니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34715abf0c1e9b3f517aff36258647a1d12e3e85" translate="yes" xml:space="preserve">
          <source>We can make our BaseViewModel even more re-usable by making it generic:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우리는 BaseViewModel을 일반화하여 더욱 재사용 가능하게 만들 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8575942cd731d21e3c9c12ecd2f77fb911ff82d2" translate="yes" xml:space="preserve">
          <source>We can take our design a step further and create a base view model class that can be used not only for PresentationOrders, but for any other class as well:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;디자인을 한 단계 더 발전시켜 PresentationOrders뿐만 아니라 다른 클래스에도 사용할 수있는 기본 뷰 모델 클래스를 만들 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="27fe3c01127e89d4991e485facdc2dfdf77c99d0" translate="yes" xml:space="preserve">
          <source>What is ViewModel in MVC</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC의 ViewModel이란 무엇입니까&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="59dbf448d2c61de00cc76afad7cfb7a43e353b97" translate="yes" xml:space="preserve">
          <source>What is a ViewModel and why do we need a ViewModel for an ASP.NET MVC Application?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ViewModel이란 무엇이며 왜 ASP.NET MVC 응용 프로그램에 ViewModel이 필요합니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f82b0e97dd715c410e184bb6c08e65934b5ca31e" translate="yes" xml:space="preserve">
          <source>When deleting a record, I normally follow the same path as with the edit view model. I would also have a URL, for example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;레코드를 삭제할 때 일반적으로 편집 뷰 모델과 동일한 경로를 따릅니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어 URL도 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="78e0a655e7144b9be0d4b6b6603f1084fa30e450" translate="yes" xml:space="preserve">
          <source>When editing employee data (an employee that has already been added to the database) it wouldn&amp;rsquo;t differ much from my example above.  Create a view model, call it for example &lt;code&gt;EditEmployeeViewModel&lt;/code&gt;. Only have the data that you want to edit in this view model, like first name and last name. Edit the data and click the submit button. I wouldn&amp;rsquo;t worry too much about the &lt;code&gt;Id&lt;/code&gt; field because the &lt;code&gt;Id&lt;/code&gt; value will probably been in the URL, for example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;직원 데이터 (데이터베이스에 이미 추가 된 직원)를 편집 할 때 위의 예와 크게 다르지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기 모델을 작성하고이를 편집하십시오 (예 : &lt;/font&gt;&lt;/font&gt; &lt;code&gt;EditEmployeeViewModel&lt;/code&gt; )&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 뷰 모델에서 편집하려는 데이터 (이름 및 성) 만 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;데이터를 편집하고 제출 버튼을 클릭하십시오. &lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 값이 URL에있을 수 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있으므로 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 필드 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에 대해 너무 걱정하지 않아도 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;됩니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ffab00c82c200ae2679aaae4659aa6adc58110d" translate="yes" xml:space="preserve">
          <source>When loading the view/page, the create action method in your employee controller will create an instance of this view model, populate any fields if required, and then pass this view model to the view/page:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기 / 페이지를로드 할 때 직원 컨트롤러에서 활동 작성 메소드는이보기 모델의 인스턴스를 작성하고 필요한 경우 필드를 채운 후이보기 모델을보기 / 페이지로 전달합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="72c4f619085b94af5e15383c1cb9cefa8cdfb289" translate="yes" xml:space="preserve">
          <source>When the view loads up for the first time I would get the employee&amp;rsquo;s data from the database using the &lt;code&gt;Id&lt;/code&gt; of 3. I would then just display static text on my view/page so that the user can see what employee is being deleted. When the user clicks the Delete button, I would just use the &lt;code&gt;Id&lt;/code&gt; value of 3 and pass it to my repository layer. You only need the &lt;code&gt;Id&lt;/code&gt; to delete a record from the table.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰가 처음로드되면 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 3을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용하여 데이터베이스에서 직원 데이터를 가져옵니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그런 다음 사용자가 삭제중인 직원을 볼 수 있도록 내보기 / 페이지에 정적 텍스트를 표시합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용자가 삭제 버튼을 클릭하면 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 값 3을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용하여 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;리포지토리 계층에 전달합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;테이블에서 레코드를 삭제하려면 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Id&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 만 필요 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="60f4d77148cd9cb2e8b3f820285a972e93d7457c" translate="yes" xml:space="preserve">
          <source>Which produces this result (screen is taken after submitting form, with validation messages):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 결과를 생성합니다 (유효성 검사 메시지와 함께 양식을 제출 한 후 화면이 표시됨).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="af219870105d660c40974d481c6f445bbb293a95" translate="yes" xml:space="preserve">
          <source>You can specify easily display templates for view models and reuse them in many places using DisplayFor or EditorFor helpers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DisplayFor 또는 EditorFor 도우미를 사용하여 뷰 모델에 대한 표시 템플릿을 쉽게 지정하고 여러 곳에서 재사용 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="52fadbc15fec74384a432f20937533ae9caf336b" translate="yes" xml:space="preserve">
          <source>You might only want specific properties, so this allows you to only load those and not additional unneccesary properties</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;특정 속성 만 원할 수 있으므로 추가 속성이 아닌 속성 만로드 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="046abf42fe38709c73c082b01e30a42673f2c0f0" translate="yes" xml:space="preserve">
          <source>Your controller methods and your models will be small, easily testable and to the point.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러 방법과 모델은 작고 쉽게 테스트 할 수 있으며 문제가되지 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="329ed648e659670fd193a27344d7cd539f996a1d" translate="yes" xml:space="preserve">
          <source>Your view/page might look like this (assuming you are using &lt;code&gt;ASP.NET MVC&lt;/code&gt; and the &lt;code&gt;Razor&lt;/code&gt; view engine):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;ASP.NET MVC&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Razor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 뷰 엔진을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용한다고 가정하면 뷰 / 페이지가 다음과 같이 보일 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="892c65ec6b04eec1e3b1acf11b73bee74b3373a8" translate="yes" xml:space="preserve">
          <source>the code above will throw an error...</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위의 코드는 오류가 발생합니다 ...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
