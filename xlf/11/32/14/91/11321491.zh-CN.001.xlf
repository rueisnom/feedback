<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/11321491">
    <body>
      <group id="11321491">
        <trans-unit id="6097a10580050b75ec7d85d9d5ee9d68c82121ca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.5/en/identifiers.html&quot;&gt;According to MySQL documentation&lt;/a&gt;, you do not need to quote (backtick) identifiers using the following character set:</source>
          <target state="translated">&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.5/en/identifiers.html&quot;&gt;根据MySQL文档&lt;/a&gt; ，您不需要使用以下字符集引用（反引号）标识符：</target>
        </trans-unit>
        <trans-unit id="90045b0d033e2dd619e6383df8041179e609f3e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;&lt;/code&gt; or &lt;code&gt;'&lt;/code&gt; are used for enclosing string-like values &lt;code&gt;&quot;26-01-2014 00:00:00&quot;&lt;/code&gt; or &lt;code&gt;'26-01-2014 00:00:00'&lt;/code&gt; . These symbols are only for strings, not aggregate functions like &lt;code&gt;now&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt;, or &lt;code&gt;max&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&lt;/code&gt; 或 &lt;code&gt;'&lt;/code&gt; 用于封装类似字符串的值 &lt;code&gt;&quot;26-01-2014 00:00:00&quot;&lt;/code&gt; &lt;code&gt;'26-01-2014 00:00:00'&lt;/code&gt; &amp;rdquo;或'26 -01-2014 00:00:00' 。这些符号仅用于字符串，不适用于像 &lt;code&gt;now&lt;/code&gt; 这样的集合函数， &lt;code&gt;sum&lt;/code&gt; 或 &lt;code&gt;max&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1d59f5f8b081c1446e0a241557283a4d5bc4cd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'&lt;/code&gt; for enclosing string literals</source>
          <target state="translated">&lt;code&gt;'&lt;/code&gt; 用于包含字符串文字</target>
        </trans-unit>
        <trans-unit id="a80de0ca330c2f2aaefe4b688914a9cc7a012e95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt; simply enclose parts of a query e.g.   &lt;code&gt;select `column_name` from `table_name` where (id='2' and gender='male') or name='rakesh'&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt; 和 &lt;code&gt;)&lt;/code&gt; 只是将查询的部分括起来，例如， &lt;code&gt;select `column_name` from `table_name` where (id='2' and gender='male') or name='rakesh'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0b2f0352941e63498cd4c7fa4a455b1ce743796f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;123E10&lt;/code&gt; is a valid identifier name but also a valid &lt;code&gt;INTEGER&lt;/code&gt; literal.</source>
          <target state="translated">&lt;code&gt;123E10&lt;/code&gt; 是有效的标识符名称，但也是有效的 &lt;code&gt;INTEGER&lt;/code&gt; 文字。</target>
        </trans-unit>
        <trans-unit id="da38380bf2f05c4bece3b8989ad72606b9d3ac17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;`&lt;/code&gt;  is used for enclosing table or column names, e.g. &lt;code&gt;select `column_name` from `table_name` where id='2'&lt;/code&gt;</source>
          <target state="translated">用于封闭表或列的名称，例如 &lt;code&gt;select `column_name` from `table_name` where id='2'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="da03c042c5cf25afb1bafac2439fe779180a0bd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;`&lt;/code&gt; for enclosing identifiers such as table and column names</source>
          <target state="translated">&lt;code&gt;`&lt;/code&gt; 用于包含诸如表名和列名之类的标识符</target>
        </trans-unit>
        <trans-unit id="e616ce30e908e2aa2c025c12fddf0941e9987928" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;`table_name`&lt;/code&gt;. &lt;code&gt;`column_name`&lt;/code&gt;   &amp;lt;-- Note: exclude &lt;code&gt;.&lt;/code&gt;  from back ticks.</source>
          <target state="translated">&lt;code&gt;`table_name`&lt;/code&gt; &lt;code&gt;`column_name`&lt;/code&gt; &amp;lt;-注意：排除 &lt;code&gt;.&lt;/code&gt; 从后面的滴答声。</target>
        </trans-unit>
        <trans-unit id="e9472c553def7914df498d93c687e68d18e0022d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(There are good answers above regarding the SQL nature of your question, but this may also be relevant if you are new to PHP.)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（关于问题的SQL性质，上面有很好的答案，但是如果您不熟悉PHP，这也可能是相关的。）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="deaf5aa7bf7c1c895ac2d93f5557710e2f50238c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;By default&lt;/em&gt; the &lt;code&gt;&quot;&lt;/code&gt; character can be used to enclose string literals just like &lt;code&gt;'&lt;/code&gt;</source>
          <target state="translated">&lt;em&gt;默认情况下&lt;/em&gt; ， &lt;code&gt;&quot;&lt;/code&gt; 字符可用于封装字符串文字，就像 &lt;code&gt;'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="12fc96176da144173d5b5f6d12acdfe181173a67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Disclaimer:&lt;/strong&gt; So I thought I would add this as an &quot;FYI&quot; type of answer for those who are completely new to working with databases and who may not understand the technical terms described already.</source>
          <target state="translated">&lt;strong&gt;免责声明：&lt;/strong&gt;因此，我想为那些刚接触数据库并且可能不了解已经描述的技术术语的人，将其添加为&amp;ldquo; FYI&amp;rdquo;类型的答案。</target>
        </trans-unit>
        <trans-unit id="a19812fd99fa5716527f0685d3186fd7d816426a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you are denoting a column name with a table name then use back ticks like this:</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;如果要用表名表示列名，请使用如下所示的勾号：</target>
        </trans-unit>
        <trans-unit id="60895f279f726f13bb47c03b7e3172d30cdde826" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;I've been reading answers to similar questions on here for about 20 minutes, but it seems like there is no definitive answer to this question.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;我已经在这里阅读了大约20分钟的类似问题的答案，但是似乎没有确切的答案。&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="b83c40ec26f2f2e2a49118a4fad948bd11959972" translate="yes" xml:space="preserve">
          <source>A string is a sequence of bytes or characters, enclosed within either
  single quote (&amp;ldquo;'&amp;rdquo;) or double quote (&amp;ldquo;&quot;&amp;rdquo;) characters.</source>
          <target state="translated">字符串是字节或字符的序列，用单引号（&amp;ldquo;'&amp;rdquo;）或双引号（&amp;ldquo;&amp;rdquo;&amp;ldquo;））括起来。</target>
        </trans-unit>
        <trans-unit id="4615ed604badacba54d261f18d9acd38d9c535fb" translate="yes" xml:space="preserve">
          <source>AND as @MichaelBerkowski said</source>
          <target state="translated">而且正如@MichaelBerkowski所说</target>
        </trans-unit>
        <trans-unit id="2622820d29bda626c277ee00365f43ae9ee7a2a8" translate="yes" xml:space="preserve">
          <source>ANSI_QUOTES disabled</source>
          <target state="translated">ANSI_QUOTES禁用</target>
        </trans-unit>
        <trans-unit id="98cb3bec05013f28a22ddbdb7d1d65285553692f" translate="yes" xml:space="preserve">
          <source>ANSI_QUOTES enabled</source>
          <target state="translated">启用 ANSI_QUOTES</target>
        </trans-unit>
        <trans-unit id="6b8f89108c71d3681d918d68fc197e69b138fb24" translate="yes" xml:space="preserve">
          <source>ASCII: &lt;code&gt;[0-9,a-z,A-Z$_]&lt;/code&gt; (basic Latin letters, digits 0-9, dollar, underscore)</source>
          <target state="translated">ASCII： &lt;code&gt;[0-9,a-z,A-Z$_]&lt;/code&gt; （基本拉丁字母，数字0-9，美元，下划线）</target>
        </trans-unit>
        <trans-unit id="adb5ad7318b3a95f2a3a3eec5e91188245c1f9fa" translate="yes" xml:space="preserve">
          <source>Also, in the above example, consider that &lt;code&gt;table&lt;/code&gt;, &lt;code&gt;col1&lt;/code&gt;, &lt;code&gt;val1&lt;/code&gt;, etc. may be variables.</source>
          <target state="translated">同样，在上面的示例中，请考虑 &lt;code&gt;table&lt;/code&gt; ， &lt;code&gt;col1&lt;/code&gt; ， &lt;code&gt;val1&lt;/code&gt; 等可以是变量。</target>
        </trans-unit>
        <trans-unit id="9da9a87dfc3b82e06d404a5b2dc7b1df991317ef" translate="yes" xml:space="preserve">
          <source>Always quote identifiers since it is a good practice (quite a few questions on SO discuss this)</source>
          <target state="translated">总是引用标识符,因为这是一个很好的做法(在SO上有不少问题在讨论这个问题)。</target>
        </trans-unit>
        <trans-unit id="87b1a656c26103e950c3c0c57b60ec53877ef83c" translate="yes" xml:space="preserve">
          <source>And then there is &lt;code&gt;&quot;&lt;/code&gt; which is a special case. It could be used for &lt;em&gt;one&lt;/em&gt; of above-mentioned purposes at a time depending on MySQL server's &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html&quot;&gt;&lt;code&gt;sql_mode&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">然后是 &lt;code&gt;&quot;&lt;/code&gt; ，这是特例。它可以一次用于上述目的&lt;em&gt;之一&lt;/em&gt; ，具体取决于MySQL服务器的&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html&quot;&gt; &lt;code&gt;sql_mode&lt;/code&gt; &lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="d79be8be1c06eef6b3594039b253c94737b212ba" translate="yes" xml:space="preserve">
          <source>And you could use a variable in PHP's double-quoted string:</source>
          <target state="translated">而你可以在PHP的双引号字符串中使用一个变量。</target>
        </trans-unit>
        <trans-unit id="e78a5da35a0f4e859b76dbcbf684350f545aae93" translate="yes" xml:space="preserve">
          <source>BACKTICKS(`) are used around identifier names.</source>
          <target state="translated">BACKTICKS(`)用于标识符名称周围。</target>
        </trans-unit>
        <trans-unit id="0eddaaa57762e06093cf16a2eca308a76210c356" translate="yes" xml:space="preserve">
          <source>Back-trip(`) is optional to use in SQL and is used for table name, db name and column names.</source>
          <target state="translated">Back-trip(`)是SQL中可选的,用于表名、db名和列名。</target>
        </trans-unit>
        <trans-unit id="e016ca66c68af56f6e1542b4497d8f527b313bcc" translate="yes" xml:space="preserve">
          <source>Backticks are generally used to indicate an &lt;code&gt;identifier&lt;/code&gt; and as well be &lt;strong&gt;safe&lt;/strong&gt; from accidentally using the &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/keywords.html&quot;&gt;Reserved Keywords&lt;/a&gt;.</source>
          <target state="translated">反引号通常用于指示 &lt;code&gt;identifier&lt;/code&gt; ，并且可以防止意外使用&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/keywords.html&quot;&gt;保留关键字&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="4ac2eea9a3ab2e5ace13b460c95cc0edd70a77ac" translate="yes" xml:space="preserve">
          <source>Backticks are generally used to indicate an identifier and as well be safe from accidentally using the reserved keywords.</source>
          <target state="translated">背投一般用来表示标识符,也是为了避免不小心使用预留的关键词而安全。</target>
        </trans-unit>
        <trans-unit id="c1f3c18db147bebab8ccfa118fd95403942a780a" translate="yes" xml:space="preserve">
          <source>Backticks are to be used for table and column identifiers, but are
  only necessary when the identifier is a &lt;code&gt;MySQL&lt;/code&gt; reserved keyword, or
  when the identifier contains whitespace characters or characters
  beyond a limited set (see below) It is often recommended to avoid
  using reserved keywords as column or table identifiers when possible,
  avoiding the quoting issue.</source>
          <target state="translated">反引号用于表和列标识符，但仅当标识符是 &lt;code&gt;MySQL&lt;/code&gt; 保留关键字，或者当标识符包含空格字符或超出限制的字符集时才需要使用反引号（请参见下文）。通常建议避免使用保留关键字在可能的情况下用作列或表的标识符，避免引用问题。</target>
        </trans-unit>
        <trans-unit id="970739737eb627ea72fad456ba23d9fd6b15447e" translate="yes" xml:space="preserve">
          <source>Backticks are to be used for table and column identifiers, but are only necessary when the identifier is a &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/keywords.html&quot;&gt;MySQL reserved keyword&lt;/a&gt;, or when the identifier contains whitespace characters or characters beyond a limited set (see below) It is often recommended to avoid using reserved keywords as column or table identifiers when possible, avoiding the quoting issue.</source>
          <target state="translated">反引号用于表和列标识符，但仅当标识符是&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/keywords.html&quot;&gt;MySQL保留关键字时&lt;/a&gt; ，或者当标识符包含空格字符或超出限制的字符集时才需要使用反引号（请参见下文）。通常建议避免使用保留关键字在可能的情况下用作列或表的标识符，避免引用问题。</target>
        </trans-unit>
        <trans-unit id="7b67ad97a7905e28021888adb6b075e99bd7dfc5" translate="yes" xml:space="preserve">
          <source>Besides all of the (well-explained) answers, there hasn't been the following mentioned and I visit this Q&amp;amp;A quite often.</source>
          <target state="translated">除了所有（充分解释的）答案外，还没有提到以下内容，我经常访问此问答。</target>
        </trans-unit>
        <trans-unit id="fadc64aefd2086615b50e6053cff09b85e061547" translate="yes" xml:space="preserve">
          <source>But if &lt;code&gt;$val1&lt;/code&gt; or &lt;code&gt;$val2&lt;/code&gt; contains single quotes, that will make your SQL be wrong. So you need to escape it before it is used in sql; that is what &lt;code&gt;mysql_real_escape_string&lt;/code&gt; is for. (Although a prepared statement is better.)</source>
          <target state="translated">但是，如果 &lt;code&gt;$val1&lt;/code&gt; 或 &lt;code&gt;$val2&lt;/code&gt; 包含单引号，则会使您的SQL错误。 因此，您需要先对其进行转义，然后才能在sql中使用它； 这就是 &lt;code&gt;mysql_real_escape_string&lt;/code&gt; 的用途。 （尽管准备好的陈述会更好。）</target>
        </trans-unit>
        <trans-unit id="53ee153e28dc13a819ab66374649167bc848ff1b" translate="yes" xml:space="preserve">
          <source>But, to define a value you have to use either single or double quotes. Lets see another example.</source>
          <target state="translated">但是,要定义一个值,你必须使用单引号或双引号。让我们来看看另一个例子。</target>
        </trans-unit>
        <trans-unit id="295538c6b767eb09e4635898c20cc6628d6c8a75" translate="yes" xml:space="preserve">
          <source>Characters requring backtick quoting in identifiers:</source>
          <target state="translated">识别符中要求反引号的字符。</target>
        </trans-unit>
        <trans-unit id="33540ed181289a1140c17a2c218548c4015aacf8" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;https://stackoverflow.com/a/261476/295264&quot;&gt;this&lt;/a&gt; answer to understand more about backticks.</source>
          <target state="translated">检查&lt;a href=&quot;https://stackoverflow.com/a/261476/295264&quot;&gt;此&lt;/a&gt;答案以了解有关反引号的更多信息。</target>
        </trans-unit>
        <trans-unit id="01d813a36b899f97a17fcdd3eeea9309b45be4ec" translate="yes" xml:space="preserve">
          <source>ERROR when not using backticks.</source>
          <target state="translated">当不使用背杆时出现错误。</target>
        </trans-unit>
        <trans-unit id="e9199febdaab27118bac1b42feacb4f953051759" translate="yes" xml:space="preserve">
          <source>EXAMPLE</source>
          <target state="translated">EXAMPLE</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="e974b798f49fb4a4cc543c3a62ba2ba7d7e6b101" translate="yes" xml:space="preserve">
          <source>Functions native to the RDBMS (for example, &lt;code&gt;NOW()&lt;/code&gt; in MySQL) should not be quoted, although their arguments are subject to the same string or identifier quoting rules already mentioned.</source>
          <target state="translated">RDBMS的本机函数（例如，MySQL中的 &lt;code&gt;NOW()&lt;/code&gt; ）不应被引用，尽管它们的参数要遵循已经提到的相同的字符串或标识符引用规则。</target>
        </trans-unit>
        <trans-unit id="94cf825fa1d3abfecf4a149a7632a28e486aea1a" translate="yes" xml:space="preserve">
          <source>Here I have deliberately forgotten to wrap the &lt;code&gt;title1&lt;/code&gt; with quotes. Now the server will take the &lt;code&gt;title1&lt;/code&gt; as a column name (i.e. an identifier). So, to indicate that it's a value you have to use either double or single quotes.</source>
          <target state="translated">在这里，我故意忘记了将 &lt;code&gt;title1&lt;/code&gt; 用引号引起来。 现在，服务器将 &lt;code&gt;title1&lt;/code&gt; 作为列名（即标识符）。 因此，要表明它是一个值，您必须使用双引号或单引号。</target>
        </trans-unit>
        <trans-unit id="4a763aa684a171a96a38e00c93601f0a880682f5" translate="yes" xml:space="preserve">
          <source>Here the backticks will help the server to understand that the &lt;code&gt;database&lt;/code&gt; is in fact the name of the database, not the database identifier.</source>
          <target state="translated">在这里，反引号将帮助服务器了解 &lt;code&gt;database&lt;/code&gt; 实际上是数据库的名称，而不是数据库标识符。</target>
        </trans-unit>
        <trans-unit id="4f81a4dc4011e810be2b92de1ec6a988879991d1" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;123451a6&lt;/code&gt; is a perfectly fine identifier name (without back ticks).</source>
          <target state="translated">但是， &lt;code&gt;123451a6&lt;/code&gt; 是一个很好的标识符名称（无反斜杠 ）。</target>
        </trans-unit>
        <trans-unit id="a4f56cb2abf950c1dfa214bb2db1ce7a12e1c976" translate="yes" xml:space="preserve">
          <source>I am trying to learn the best way to write queries. I also understand the importance of being consistent. Until now, I have randomly used single quotes, double quotes, and backticks without any real thought.</source>
          <target state="translated">我在努力学习如何写好查询的方法。我也明白了一致性的重要性。到现在为止,我都是随意的用单引号、双引号、反引号,没有真正的思考过。</target>
        </trans-unit>
        <trans-unit id="7a9bf86a612725a6c1f6c761089d4ddb092b4044" translate="yes" xml:space="preserve">
          <source>I suggest that you avoid using &lt;code&gt;&quot;&lt;/code&gt; so that your code becomes independent of SQL modes</source>
          <target state="translated">我建议您避免使用 &lt;code&gt;&quot;&lt;/code&gt; 以使您的代码独立于SQL模式</target>
        </trans-unit>
        <trans-unit id="5f60d12129de9ac0f8ab9d5b826e24134bcace41" translate="yes" xml:space="preserve">
          <source>If need further clearance do follow &lt;a href=&quot;https://stackoverflow.com/questions/242813/when-to-use-double-or-single-quotes-in-javascript&quot;&gt;quotes in JavaScript&lt;/a&gt;</source>
          <target state="translated">如果需要进一步清除，请遵循&lt;a href=&quot;https://stackoverflow.com/questions/242813/when-to-use-double-or-single-quotes-in-javascript&quot;&gt;JavaScript中的引号&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="be71c075bdbc1c4a895b09b719334569621f7c87" translate="yes" xml:space="preserve">
          <source>If table cols and values are variables then there are two ways:</source>
          <target state="translated">如果表cols和值是变量,那么有两种方式。</target>
        </trans-unit>
        <trans-unit id="f9bd21271adf2137aa18f7f1550c14e6a0e4f6b6" translate="yes" xml:space="preserve">
          <source>If ther's a &lt;code&gt;where&lt;/code&gt; statement in your query and/or trying to &lt;code&gt;insert&lt;/code&gt; a value and/or an &lt;code&gt;update&lt;/code&gt; of value which is string use single quote(') for these values like:</source>
          <target state="translated">如果这是查询中的 &lt;code&gt;where&lt;/code&gt; 语句和/或试图 &lt;code&gt;insert&lt;/code&gt; 值和/或值的 &lt;code&gt;update&lt;/code&gt; （字符串），请对这些值使用单引号（'），例如：</target>
        </trans-unit>
        <trans-unit id="ef576002982235df7942f8b6022509ce993c7455" translate="yes" xml:space="preserve">
          <source>If you are trying to write query in your back-end to call MySQL then you can use double quote(&quot;) or single quotes(') to assign query to a variable like:</source>
          <target state="translated">如果你想在后端写查询来调用MySQL,那么你可以使用双引号(&quot;)或单引号(')将查询分配给一个变量,如:&quot;&quot;。</target>
        </trans-unit>
        <trans-unit id="0d7bb6dd9c3505559eec418428d442550094778d" translate="yes" xml:space="preserve">
          <source>If you want to stay out of this confusion when to use double quotes(&quot;) and single quotes('), would recommend to stick with single quotes(') this will include backslash() like:</source>
          <target state="translated">如果你想在使用双引号(&quot;)和单引号(')的时候不至于出现这种混乱的情况,建议坚持使用单引号('),这将包括反斜杠()这样的。</target>
        </trans-unit>
        <trans-unit id="7c29751a38776630a32c7e1e7d4595a893ad9ff4" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_ansi_quotes&quot;&gt;&lt;code&gt;ANSI_QUOTES&lt;/code&gt;&lt;/a&gt; mode the &lt;code&gt;&quot;&lt;/code&gt; character can be used to enclose identifiers just like &lt;code&gt;`&lt;/code&gt;</source>
          <target state="translated">在&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_ansi_quotes&quot;&gt; &lt;code&gt;ANSI_QUOTES&lt;/code&gt; &lt;/a&gt;模式下， &lt;code&gt;&quot;&lt;/code&gt; 字符可用于包含标识符，就像 &lt;code&gt;`&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b6cf548a377690984817b64cc2d564bb2bd0be16" translate="yes" xml:space="preserve">
          <source>In MySQL, these symbols are used to delimit a query &lt;code&gt;`&lt;/code&gt; ,&lt;code&gt;&quot;&lt;/code&gt; ,&lt;code&gt;'&lt;/code&gt; and &lt;code&gt;()&lt;/code&gt; .</source>
          <target state="translated">在MySQL中，这些符号用于分隔查询 &lt;code&gt;`&lt;/code&gt; ， &lt;code&gt;&quot;&lt;/code&gt; &lt;code&gt;'&lt;/code&gt; 和 &lt;code&gt;()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a65692f9a2f2ccad5c1fdbc6da666d455b5bf33f" translate="yes" xml:space="preserve">
          <source>In a nutshell; &lt;strong&gt;MySQL thinks you want to do math&lt;/strong&gt; on its own table/column and interprets hyphens such as &quot;e-mail&quot; as &lt;code&gt;e&lt;/code&gt;&lt;strong&gt;minus&lt;/strong&gt;&lt;code&gt;mail&lt;/code&gt;.</source>
          <target state="translated">简而言之; &lt;strong&gt;MySQL认为您想&lt;/strong&gt;在自己的表/列上&lt;strong&gt;进行数学运算&lt;/strong&gt; ，并将诸如&amp;ldquo; e-mail&amp;rdquo;之类的连字符解释为e- &lt;code&gt;mail&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c211317a410743c5d6c983e704b3718ba22ed06" translate="yes" xml:space="preserve">
          <source>In combination of PHP and MySQL, double quotes and single quotes make your query writing time so much easier.</source>
          <target state="translated">结合了PHP和MySQL,双引号和单引号的组合,让你的查询写作时间变得更加轻松。</target>
        </trans-unit>
        <trans-unit id="2dc9e149434250d7fd746b11427230a7e86b3be1" translate="yes" xml:space="preserve">
          <source>In combination of PHP and MySQL, double quotes and single quotes make your query-writing time so much easier.</source>
          <target state="translated">结合了PHP和MySQL,双引号和单引号,让你的查询写作时间变得轻松许多。</target>
        </trans-unit>
        <trans-unit id="853461a0cd82d96ba71e241a4d83962a0f2666b0" translate="yes" xml:space="preserve">
          <source>Mostly, we use single quotes for an SQL string value, so we need to use double quotes for a PHP string.</source>
          <target state="translated">大多数情况下,我们对一个SQL字符串值使用单引号,所以我们需要对一个PHP字符串使用双引号。</target>
        </trans-unit>
        <trans-unit id="0b6a5aa0c171380342f888c1606d55c54f6cf97d" translate="yes" xml:space="preserve">
          <source>MySQL also expects &lt;code&gt;DATE&lt;/code&gt; and &lt;code&gt;DATETIME&lt;/code&gt; literal values to be single-quoted as strings like &lt;code&gt;'2001-01-01 00:00:00'&lt;/code&gt;. Consult &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/date-and-time-literals.html&quot;&gt;the Date and Time Literals&lt;/a&gt; documentation for more details, in particular alternatives to using the hyphen &lt;code&gt;-&lt;/code&gt; as a segment delimiter in date strings.</source>
          <target state="translated">MySQL还期望 &lt;code&gt;DATE&lt;/code&gt; 和 &lt;code&gt;DATETIME&lt;/code&gt; 文字值被单引号括起来，如 &lt;code&gt;'2001-01-01 00:00:00'&lt;/code&gt; 之类的字符串。 有关更多详细信息，请查阅&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/date-and-time-literals.html&quot;&gt;日期和时间文字&lt;/a&gt;文档，尤其是使用连字符作为日期字符串中的段定界符的替代方法。</target>
        </trans-unit>
        <trans-unit id="0cd5365acbce54464733f800d3e2f2cb6a4aebe2" translate="yes" xml:space="preserve">
          <source>No ERROR on backticks.</source>
          <target state="translated">没有反签的错误。</target>
        </trans-unit>
        <trans-unit id="01c108ac1d103d1516bc345e95d4ec9ac9b420a6" translate="yes" xml:space="preserve">
          <source>None of these table or column identifiers are reserved words or make use of characters requiring quoting, but I've quoted them anyway with backticks (more on this later...).</source>
          <target state="translated">这些表或列的标识符都不是保留词,也没有使用需要加引号的字符,但我还是用了反引号(后面会有更多的内容...)。</target>
        </trans-unit>
        <trans-unit id="28fee859607534b52f5c5e34eec1da4bccb3a417" translate="yes" xml:space="preserve">
          <source>Now about Double quotes &amp;amp; Single Quotes (Michael has already mentioned that).</source>
          <target state="translated">现在有关双引号和单引号（Michael已经提到过）。</target>
        </trans-unit>
        <trans-unit id="8606c8b706526ec7a094d564c27838a760aa1e50" translate="yes" xml:space="preserve">
          <source>Now, in combination with PHP, double quotes and single quotes make your query writing time much easier. Let's see a modified version of the query in your question.</source>
          <target state="translated">现在,结合PHP,双引号与单引号的结合,让你的查询书写时间变得更加轻松。让我们来看看你的问题中的修改版的查询。</target>
        </trans-unit>
        <trans-unit id="05d78f2aa10becd6283e505907025d5685589d69" translate="yes" xml:space="preserve">
          <source>Now, suppose you are using a direct post variable into the MySQL query then, use it this way:</source>
          <target state="translated">现在,假设你是用一个直接的post变量进入MySQL查询,那么,用这种方式使用它。</target>
        </trans-unit>
        <trans-unit id="693e36e4de7a62195a71e714f4c90f54916b168e" translate="yes" xml:space="preserve">
          <source>Now, using double quotes in the PHP, you will make the variables &lt;code&gt;$val1&lt;/code&gt;, and &lt;code&gt;$val2&lt;/code&gt; to use their values thus creating a perfectly valid query. Like</source>
          <target state="translated">现在，在PHP中使用双引号，您将使变量 &lt;code&gt;$val1&lt;/code&gt; 和 &lt;code&gt;$val2&lt;/code&gt; 使用它们的值，从而创建一个完全有效的查询。 喜欢</target>
        </trans-unit>
        <trans-unit id="e72184f55cc026514b7160d78c3c5aef63c2a050" translate="yes" xml:space="preserve">
          <source>Or</source>
          <target state="translated">Or</target>
        </trans-unit>
        <trans-unit id="185bc949d8e637c87bdd6f1f0ee55566da841699" translate="yes" xml:space="preserve">
          <source>Perhaps it is important to mention that PHP handles single and double quoted strings differently...</source>
          <target state="translated">也许有必要提一下,PHP对单引号和双引号字符串的处理方式不同......</target>
        </trans-unit>
        <trans-unit id="88e0e0a0df815f954f20830db35becc23bd2fb02" translate="yes" xml:space="preserve">
          <source>Prepared statements</source>
          <target state="translated">准备好的报表</target>
        </trans-unit>
        <trans-unit id="db8c5d7eb06f66c5c2883fd10b7c9f25e10cbf80" translate="yes" xml:space="preserve">
          <source>Problem with double(&quot;) or single(') quotes arise when we had to assign some value dynamic and perform some string concatenation like:</source>
          <target state="translated">双引号(&quot;)或单引号(')的问题出现了,当我们必须动态地分配一些值并进行一些字符串的串串联时,就会出现这样的问题。</target>
        </trans-unit>
        <trans-unit id="0e88a4043a367129052a923a43951e162472a3d3" translate="yes" xml:space="preserve">
          <source>SINGLE QUOTES(') are used around values.</source>
          <target state="translated">SINGLE QUOTES(')在值周围使用。</target>
        </trans-unit>
        <trans-unit id="99382b494168d7b55cb152720e432f349b76b6ba" translate="yes" xml:space="preserve">
          <source>SQL servers and MySQL, PostgreySQL, Oracle don't understand double quotes(&quot;). Thus your query should be free from double quotes(&quot;) and should only use single quotes(').</source>
          <target state="translated">SQL服务器和MySQL,PostgreySQL,Oracle不理解双引号(&quot;)。因此,你的查询应该不使用双引号(&quot;),而只能使用单引号(')。</target>
        </trans-unit>
        <trans-unit id="e5d8f12a59e9d37cc970caf5496df216cd4c4e99" translate="yes" xml:space="preserve">
          <source>Same can be done for the table names and field names. This is a very &lt;em&gt;good habit&lt;/em&gt; if you wrap your database identifier with backticks.</source>
          <target state="translated">表名和字段名可以做同样的事情。 如果用反引号包装数据库标识符，这是一个&lt;em&gt;很好的习惯&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="840a76f9d9d4101767dd6c408ea67ac56627684f" translate="yes" xml:space="preserve">
          <source>Single quotes should be used for string values like in the &lt;code&gt;VALUES()&lt;/code&gt; list.  Double quotes are supported by MySQL for string values as well, but single quotes are more widely accepted by other RDBMS, so it is a good habit to use single quotes instead of double.</source>
          <target state="translated">单引号应用于 &lt;code&gt;VALUES()&lt;/code&gt; 列表中的字符串值。 MySQL还为字符串值支持双引号，但是单引号已被其他RDBMS广泛接受，因此使用单引号而不是双引号是一个好习惯。</target>
        </trans-unit>
        <trans-unit id="208154868777c5596cc50185f19d1c260427aa82" translate="yes" xml:space="preserve">
          <source>Single quotes should be used for string values like in the VALUES() list.</source>
          <target state="translated">像VALUES()列表中的字符串值应该使用单引号。</target>
        </trans-unit>
        <trans-unit id="49e809f970df167664867752404912bcbeb9c826" translate="yes" xml:space="preserve">
          <source>Single-quoted strings are 'literals' and are pretty much WYSIWYG strings. Double-quoted strings are interpreted by PHP for possible variable-substitution (backticks in PHP are not exactly strings; they execute a command in the shell and return the result).</source>
          <target state="translated">单引号的字符串是 &quot;字段&quot;,基本上是所见即所得的字符串。双引号的字符串被PHP解释为可能的变量替换(PHP中的backticks并不完全是字符串,它在shell中执行命令并返回结果)。</target>
        </trans-unit>
        <trans-unit id="9eaa0efb21da499527054208ef276f599b1f2281" translate="yes" xml:space="preserve">
          <source>So if your string contains single quotes, then you could use double quotes to quote the string, or if it contains double quotes, then you could use single quotes to quote the string. But if your string contains both single quotes and double quotes, you need to escape the one that used to quote the string.</source>
          <target state="translated">所以如果你的字符串包含单引号,那么你可以用双引号来引用字符串,如果它包含双引号,那么你可以用单引号来引用字符串。但如果你的字符串中同时包含单引号和双引号,那么你需要转引出用于引用字符串的那一个。</target>
        </trans-unit>
        <trans-unit id="90a743846cd66e712bd99d8ed5918ec643324cc0" translate="yes" xml:space="preserve">
          <source>So using your example, I would double-quote the PHP string and use single quotes on the values &lt;code&gt;'val1', 'val2'&lt;/code&gt;.  &lt;code&gt;NULL&lt;/code&gt; is a MySQL keyword, and a special (non)-value, and is therefore unquoted.</source>
          <target state="translated">因此，使用您的示例，我将双引号括起来并在值 &lt;code&gt;'val1', 'val2'&lt;/code&gt; 上使用单引号。 &lt;code&gt;NULL&lt;/code&gt; 是MySQL关键字，是一个特殊的（非）值，因此未加引号。</target>
        </trans-unit>
        <trans-unit id="0d017453a7cc8300a916af70e40a39e5e8e2f1b6" translate="yes" xml:space="preserve">
          <source>The following query will produce different results (or errors) depending on SQL mode:</source>
          <target state="translated">下面的查询将根据SQL模式的不同而产生不同的结果(或错误)。</target>
        </trans-unit>
        <trans-unit id="adebd13f3da25e7bbda4c2effcd391c369d3f149" translate="yes" xml:space="preserve">
          <source>The query will select the column &lt;code&gt;column&lt;/code&gt; where column &lt;code&gt;foo&lt;/code&gt; is equal to column &lt;code&gt;bar&lt;/code&gt;</source>
          <target state="translated">查询将选择列 &lt;code&gt;foo&lt;/code&gt; 等于列 &lt;code&gt;bar&lt;/code&gt; 的列column</target>
        </trans-unit>
        <trans-unit id="9ee32a639440216e4b2f7ed7aa69a7ce5d857bc1" translate="yes" xml:space="preserve">
          <source>The query will select the string literal &lt;code&gt;&quot;column&quot;&lt;/code&gt; where column &lt;code&gt;foo&lt;/code&gt; is equal to string &lt;code&gt;&quot;bar&quot;&lt;/code&gt;</source>
          <target state="translated">查询将选择字符串文字 &lt;code&gt;&quot;column&quot;&lt;/code&gt; ，其中列 &lt;code&gt;foo&lt;/code&gt; 等于字符串 &lt;code&gt;&quot;bar&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ddf65abb76a47ea6d6931947e8f74f6da692f1a2" translate="yes" xml:space="preserve">
          <source>The quoting patterns for variables do not change, although if you intend to interpolate the variables directly in a string, it must be double-quoted in PHP. Just make sure that you have properly escaped the variables for use in SQL. (&lt;a href=&quot;https://stackoverflow.com/questions/60174/how-to-prevent-sql-injection-in-php&quot;&gt;It is recommended to use an API supporting prepared statements instead, as protection against SQL injection&lt;/a&gt;).</source>
          <target state="translated">变量的引用模式不会改变，尽管如果您打算直接在字符串中插入变量，则必须在PHP中将其双引号。 只要确保您已正确转义了要在SQL中使用的变量即可。 （ &lt;a href=&quot;https://stackoverflow.com/questions/60174/how-to-prevent-sql-injection-in-php&quot;&gt;建议使用支持预备语句的API来防止SQL注入&lt;/a&gt; ）。</target>
        </trans-unit>
        <trans-unit id="9dcec773dd6d848ae315fc05a43c597e3397f591" translate="yes" xml:space="preserve">
          <source>The string literals in MySQL and PHP are the same.</source>
          <target state="translated">MySQL和PHP中的字符串字元是一样的。</target>
        </trans-unit>
        <trans-unit id="28a083b8be20369358b80d4af6e18c9821470ac2" translate="yes" xml:space="preserve">
          <source>There are two types of quotes in MySQL:</source>
          <target state="translated">MySQL中的引号有两种类型。</target>
        </trans-unit>
        <trans-unit id="26beaab34e0768054165d0c1783d4d12e91ffddd" translate="yes" xml:space="preserve">
          <source>There has been many helpful answers here, generally culminating into two points.</source>
          <target state="translated">这里有很多有用的答案,一般都是将其总结为两点。</target>
        </trans-unit>
        <trans-unit id="78fa2e0372f5352b9d83a0736e9385e74fb02f28" translate="yes" xml:space="preserve">
          <source>There is a case though where an identifier can neither be a &lt;em&gt;reserved keyword&lt;/em&gt; or contain &lt;em&gt;whitespace&lt;/em&gt; or &lt;em&gt;characters beyond limited set&lt;/em&gt; but necessarily require backticks around them.</source>
          <target state="translated">在某些情况下，标识符既不能是&lt;em&gt;保留关键字，&lt;/em&gt;也不能包含&lt;em&gt;空格&lt;/em&gt;或&lt;em&gt;超出限制的字符，&lt;/em&gt;但必须在它们周围加反引号。</target>
        </trans-unit>
        <trans-unit id="ffb638c7729af90d6ab35de9742eb90045d7a9f7" translate="yes" xml:space="preserve">
          <source>This is completely because &lt;code&gt;1234156e6&lt;/code&gt; is also an exponential number.</source>
          <target state="translated">这完全是因为 &lt;code&gt;1234156e6&lt;/code&gt; 也是一个指数数。</target>
        </trans-unit>
        <trans-unit id="66dd3116ff7f609f37b4d10de5c37835eecf1d3b" translate="yes" xml:space="preserve">
          <source>This is the best practice for using PHP variables into MySQL.</source>
          <target state="translated">这是在MySQL中使用PHP变量的最佳实践。</target>
        </trans-unit>
        <trans-unit id="58d6e4e975e2f7eace65c91034b92638753a3c78" translate="yes" xml:space="preserve">
          <source>Use back ticks &lt;code&gt;``&lt;/code&gt; when a column/value name is similar to a MySQL reserved keyword.</source>
          <target state="translated">当列/值名称类似于MySQL保留关键字时，请使用反斜线 &lt;code&gt;``&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9056c1c45a9a2f407b0675fff2c7c7401342b40b" translate="yes" xml:space="preserve">
          <source>Variable interpolation</source>
          <target state="translated">可变内插法</target>
        </trans-unit>
        <trans-unit id="4f4436a7610700ede1a264b9258f77eb38045437" translate="yes" xml:space="preserve">
          <source>What is the standard for this? What do you do?</source>
          <target state="translated">这方面的标准是什么?你是怎么做的?</target>
        </trans-unit>
        <trans-unit id="ed82b9ac93865fb15bdceac28e48b922d33a56ee" translate="yes" xml:space="preserve">
          <source>When to use single quotes, double quotes, and backticks in MySQL</source>
          <target state="translated">何时在MySQL中使用单引号、双引号和反引号?</target>
        </trans-unit>
        <trans-unit id="64f93b08c3ed93ef44b231186c6bd7e0a580b9a3" translate="yes" xml:space="preserve">
          <source>When to use what</source>
          <target state="translated">什么时候用什么</target>
        </trans-unit>
        <trans-unit id="54f07e6ed7c59c30778e41c8bd305cbd13b96ba3" translate="yes" xml:space="preserve">
          <source>When working with prepared statements, consult the documentation to determine whether or not the statement's placeholders must be quoted.  The most popular APIs available in PHP, PDO and MySQLi, expect &lt;em&gt;unquoted&lt;/em&gt; placeholders, as do most prepared statement APIs in other languages:</source>
          <target state="translated">在使用准备好的语句时，请查阅文档以确定是否必须引用语句的占位符。 PHP，PDO和MySQLi中最流行的API都希望使用无&lt;em&gt;引号的&lt;/em&gt;占位符，其他语言中大多数准备好的语句API也是如此：</target>
        </trans-unit>
        <trans-unit id="1ff715c4d19dd4560790ccb4ec16c12cb744669e" translate="yes" xml:space="preserve">
          <source>With double quotes &lt;code&gt;&quot;&quot;&lt;/code&gt; the complete query:</source>
          <target state="translated">用双引号 &lt;code&gt;&quot;&quot;&lt;/code&gt; 完成查询：</target>
        </trans-unit>
        <trans-unit id="97f55790949107a26fe97c8af77a0d602d9990c7" translate="yes" xml:space="preserve">
          <source>With single quotes &lt;code&gt;''&lt;/code&gt;:</source>
          <target state="translated">用单引号 &lt;code&gt;''&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c892ad3d5a3543c5ae3c83edfab273b7341a72e7" translate="yes" xml:space="preserve">
          <source>You can use characters beyond that set as table or column identifiers, including whitespace for example, but then you &lt;em&gt;must&lt;/em&gt; quote (backtick) them.</source>
          <target state="translated">您可以使用超出设置范围的字符作为表或列标识符，例如，包括空格，但是&lt;em&gt;必须将其&lt;/em&gt;引号（反引号）。</target>
        </trans-unit>
        <trans-unit id="c86679f13b3d62526371afbe4aff681c0612003f" translate="yes" xml:space="preserve">
          <source>[Without going into detail how you would get such an identifier name], Suppose I want to create a temporary table named &lt;code&gt;123456e6&lt;/code&gt;.</source>
          <target state="translated">[没有详细介绍如何获得这样的标识符名称]，假设我想创建一个名为 &lt;code&gt;123456e6&lt;/code&gt; 的临时表。</target>
        </trans-unit>
        <trans-unit id="9d413bc3ea63f223ff615cfe259e30f18066d98c" translate="yes" xml:space="preserve">
          <source>will make</source>
          <target state="translated">会使</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
