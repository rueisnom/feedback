<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/11321491">
    <body>
      <group id="11321491">
        <trans-unit id="6097a10580050b75ec7d85d9d5ee9d68c82121ca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.5/en/identifiers.html&quot;&gt;According to MySQL documentation&lt;/a&gt;, you do not need to quote (backtick) identifiers using the following character set:</source>
          <target state="translated">&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.5/en/identifiers.html&quot;&gt;MySQLのドキュメント&lt;/a&gt;によると 、次の文字セットを使用して識別子を引用（バックティック）する必要はありません。</target>
        </trans-unit>
        <trans-unit id="90045b0d033e2dd619e6383df8041179e609f3e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;&lt;/code&gt; or &lt;code&gt;'&lt;/code&gt; are used for enclosing string-like values &lt;code&gt;&quot;26-01-2014 00:00:00&quot;&lt;/code&gt; or &lt;code&gt;'26-01-2014 00:00:00'&lt;/code&gt; . These symbols are only for strings, not aggregate functions like &lt;code&gt;now&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt;, or &lt;code&gt;max&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&lt;/code&gt; または &lt;code&gt;'&lt;/code&gt; は、文字列のような値 &lt;code&gt;&quot;26-01-2014 00:00:00&quot;&lt;/code&gt; または &lt;code&gt;'26-01-2014 00:00:00'&lt;/code&gt; を囲むために使用されます 。これらの記号は文字列専用であり、 &lt;code&gt;now&lt;/code&gt; ような集約関数ではありません、 &lt;code&gt;sum&lt;/code&gt; 、または &lt;code&gt;max&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1d59f5f8b081c1446e0a241557283a4d5bc4cd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'&lt;/code&gt; for enclosing string literals</source>
          <target state="translated">&lt;code&gt;'&lt;/code&gt; 文字列リテラルを囲む</target>
        </trans-unit>
        <trans-unit id="a80de0ca330c2f2aaefe4b688914a9cc7a012e95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt; simply enclose parts of a query e.g.   &lt;code&gt;select `column_name` from `table_name` where (id='2' and gender='male') or name='rakesh'&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt; および &lt;code&gt;)&lt;/code&gt; クエリの一部を単に囲みます。たとえば &lt;code&gt;select `column_name` from `table_name` where (id='2' and gender='male') or name='rakesh'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0b2f0352941e63498cd4c7fa4a455b1ce743796f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;123E10&lt;/code&gt; is a valid identifier name but also a valid &lt;code&gt;INTEGER&lt;/code&gt; literal.</source>
          <target state="translated">&lt;code&gt;123E10&lt;/code&gt; は有効な識別子名ですが、有効な &lt;code&gt;INTEGER&lt;/code&gt; リテラルでもあります。</target>
        </trans-unit>
        <trans-unit id="da38380bf2f05c4bece3b8989ad72606b9d3ac17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;`&lt;/code&gt;  is used for enclosing table or column names, e.g. &lt;code&gt;select `column_name` from `table_name` where id='2'&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;`&lt;/code&gt; テーブルまたは列の名前を囲むために使用され &lt;code&gt;select `column_name` from `table_name` where id='2'&lt;/code&gt; たとえば、id = '2'の場合、` table_name`から `column_name`を選択します</target>
        </trans-unit>
        <trans-unit id="da03c042c5cf25afb1bafac2439fe779180a0bd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;`&lt;/code&gt; for enclosing identifiers such as table and column names</source>
          <target state="translated">&lt;code&gt;`&lt;/code&gt; テーブル名や列名などの識別子を囲む</target>
        </trans-unit>
        <trans-unit id="e616ce30e908e2aa2c025c12fddf0941e9987928" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;`table_name`&lt;/code&gt;. &lt;code&gt;`column_name`&lt;/code&gt;   &amp;lt;-- Note: exclude &lt;code&gt;.&lt;/code&gt;  from back ticks.</source>
          <target state="translated">&lt;code&gt;`table_name`&lt;/code&gt; 。 &lt;code&gt;`column_name`&lt;/code&gt; &amp;lt;-注：除外し &lt;code&gt;.&lt;/code&gt; ダニから。</target>
        </trans-unit>
        <trans-unit id="e9472c553def7914df498d93c687e68d18e0022d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(There are good answers above regarding the SQL nature of your question, but this may also be relevant if you are new to PHP.)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（質問のSQLの性質に関して上記の良い答えがありますが、これはPHPを初めて使用する場合にも関連する可能性があります。）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="deaf5aa7bf7c1c895ac2d93f5557710e2f50238c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;By default&lt;/em&gt; the &lt;code&gt;&quot;&lt;/code&gt; character can be used to enclose string literals just like &lt;code&gt;'&lt;/code&gt;</source>
          <target state="translated">&lt;em&gt;デフォルトで&lt;/em&gt;は、 &lt;code&gt;&quot;&lt;/code&gt; 文字を使用して、文字列リテラルを &lt;code&gt;'&lt;/code&gt; のように囲むことができます。</target>
        </trans-unit>
        <trans-unit id="12fc96176da144173d5b5f6d12acdfe181173a67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Disclaimer:&lt;/strong&gt; So I thought I would add this as an &quot;FYI&quot; type of answer for those who are completely new to working with databases and who may not understand the technical terms described already.</source>
          <target state="translated">&lt;strong&gt;免責事項：&lt;/strong&gt;データベースを操作するのが初めてで、すでに説明されている技術用語を理解していない可能性がある人のために、これを「FYI」タイプの回答として追加すると思いました。</target>
        </trans-unit>
        <trans-unit id="a19812fd99fa5716527f0685d3186fd7d816426a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you are denoting a column name with a table name then use back ticks like this:</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;列名をテーブル名で表す場合は、次のようにバックティックを使用します。</target>
        </trans-unit>
        <trans-unit id="60895f279f726f13bb47c03b7e3172d30cdde826" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;I've been reading answers to similar questions on here for about 20 minutes, but it seems like there is no definitive answer to this question.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;私はここで同様の質問に対する回答を約20分間読んでいますが、この質問に対する明確な回答はないようです。&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="b83c40ec26f2f2e2a49118a4fad948bd11959972" translate="yes" xml:space="preserve">
          <source>A string is a sequence of bytes or characters, enclosed within either
  single quote (&amp;ldquo;'&amp;rdquo;) or double quote (&amp;ldquo;&quot;&amp;rdquo;) characters.</source>
          <target state="translated">文字列は、一重引用符（ &quot;'&quot;）または二重引用符（ &quot;&quot; &quot;）文字で囲まれた一連のバイトまたは文字です。</target>
        </trans-unit>
        <trans-unit id="4615ed604badacba54d261f18d9acd38d9c535fb" translate="yes" xml:space="preserve">
          <source>AND as @MichaelBerkowski said</source>
          <target state="translated">そして、@MichaelBerkowskiが言ったように</target>
        </trans-unit>
        <trans-unit id="2622820d29bda626c277ee00365f43ae9ee7a2a8" translate="yes" xml:space="preserve">
          <source>ANSI_QUOTES disabled</source>
          <target state="translated">ANSI_QUOTES 無効</target>
        </trans-unit>
        <trans-unit id="98cb3bec05013f28a22ddbdb7d1d65285553692f" translate="yes" xml:space="preserve">
          <source>ANSI_QUOTES enabled</source>
          <target state="translated">ANSI_QUOTES有効</target>
        </trans-unit>
        <trans-unit id="6b8f89108c71d3681d918d68fc197e69b138fb24" translate="yes" xml:space="preserve">
          <source>ASCII: &lt;code&gt;[0-9,a-z,A-Z$_]&lt;/code&gt; (basic Latin letters, digits 0-9, dollar, underscore)</source>
          <target state="translated">ASCII： &lt;code&gt;[0-9,a-z,A-Z$_]&lt;/code&gt; （基本的なラテン文字、数字0-9、ドル、アンダースコア）</target>
        </trans-unit>
        <trans-unit id="adb5ad7318b3a95f2a3a3eec5e91188245c1f9fa" translate="yes" xml:space="preserve">
          <source>Also, in the above example, consider that &lt;code&gt;table&lt;/code&gt;, &lt;code&gt;col1&lt;/code&gt;, &lt;code&gt;val1&lt;/code&gt;, etc. may be variables.</source>
          <target state="translated">また、上記の例では、 &lt;code&gt;table&lt;/code&gt; 、 &lt;code&gt;col1&lt;/code&gt; 、 &lt;code&gt;val1&lt;/code&gt; などが変数である可能性があることを考慮してください 。</target>
        </trans-unit>
        <trans-unit id="9da9a87dfc3b82e06d404a5b2dc7b1df991317ef" translate="yes" xml:space="preserve">
          <source>Always quote identifiers since it is a good practice (quite a few questions on SO discuss this)</source>
          <target state="translated">識別子を引用するのは良い習慣ですので、必ず引用してください(SOではかなりの数の質問がこれについて議論しています)。</target>
        </trans-unit>
        <trans-unit id="87b1a656c26103e950c3c0c57b60ec53877ef83c" translate="yes" xml:space="preserve">
          <source>And then there is &lt;code&gt;&quot;&lt;/code&gt; which is a special case. It could be used for &lt;em&gt;one&lt;/em&gt; of above-mentioned purposes at a time depending on MySQL server's &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html&quot;&gt;&lt;code&gt;sql_mode&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">そして、 &lt;code&gt;&quot;&lt;/code&gt; これは特別なケースです。MySQLサーバーの&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html&quot;&gt; &lt;code&gt;sql_mode&lt;/code&gt; に&lt;/a&gt;応じて、上記の目的の&lt;em&gt;いずれか&lt;/em&gt;で&lt;em&gt;一度&lt;/em&gt;に使用できます。</target>
        </trans-unit>
        <trans-unit id="d79be8be1c06eef6b3594039b253c94737b212ba" translate="yes" xml:space="preserve">
          <source>And you could use a variable in PHP's double-quoted string:</source>
          <target state="translated">そして、PHPのダブルクォート文字列の中にある変数を使えばいいのです。</target>
        </trans-unit>
        <trans-unit id="e78a5da35a0f4e859b76dbcbf684350f545aae93" translate="yes" xml:space="preserve">
          <source>BACKTICKS(`) are used around identifier names.</source>
          <target state="translated">BACKTICKS(`)は識別子名の周辺で使用されます。</target>
        </trans-unit>
        <trans-unit id="0eddaaa57762e06093cf16a2eca308a76210c356" translate="yes" xml:space="preserve">
          <source>Back-trip(`) is optional to use in SQL and is used for table name, db name and column names.</source>
          <target state="translated">Back-trip(`)はSQLで使用するためのオプションで、テーブル名、DB名、カラム名に使用されます。</target>
        </trans-unit>
        <trans-unit id="e016ca66c68af56f6e1542b4497d8f527b313bcc" translate="yes" xml:space="preserve">
          <source>Backticks are generally used to indicate an &lt;code&gt;identifier&lt;/code&gt; and as well be &lt;strong&gt;safe&lt;/strong&gt; from accidentally using the &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/keywords.html&quot;&gt;Reserved Keywords&lt;/a&gt;.</source>
          <target state="translated">バックティックは通常、 &lt;code&gt;identifier&lt;/code&gt; を示すために使用されるほか、 &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/keywords.html&quot;&gt;予約済みキーワードを&lt;/a&gt;誤って使用しないようにする&lt;strong&gt;ために&lt;/strong&gt;も使用されます。</target>
        </trans-unit>
        <trans-unit id="4ac2eea9a3ab2e5ace13b460c95cc0edd70a77ac" translate="yes" xml:space="preserve">
          <source>Backticks are generally used to indicate an identifier and as well be safe from accidentally using the reserved keywords.</source>
          <target state="translated">バックティックは一般的に識別子を示すために使用され、予約されたキーワードを誤って使用することがないように安全です。</target>
        </trans-unit>
        <trans-unit id="c1f3c18db147bebab8ccfa118fd95403942a780a" translate="yes" xml:space="preserve">
          <source>Backticks are to be used for table and column identifiers, but are
  only necessary when the identifier is a &lt;code&gt;MySQL&lt;/code&gt; reserved keyword, or
  when the identifier contains whitespace characters or characters
  beyond a limited set (see below) It is often recommended to avoid
  using reserved keywords as column or table identifiers when possible,
  avoiding the quoting issue.</source>
          <target state="translated">バッククォートはテーブルと列の識別子に使用されますが、識別子が &lt;code&gt;MySQL&lt;/code&gt; の予約済みキーワードである場合、または識別子に空白文字または制限されたセットを超える文字が含まれている場合にのみ必要です（以下を参照）予約済みキーワードの使用は避けることをお勧めします可能な場合は列またはテーブルの識別子として、引用の問題を回避します。</target>
        </trans-unit>
        <trans-unit id="970739737eb627ea72fad456ba23d9fd6b15447e" translate="yes" xml:space="preserve">
          <source>Backticks are to be used for table and column identifiers, but are only necessary when the identifier is a &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/keywords.html&quot;&gt;MySQL reserved keyword&lt;/a&gt;, or when the identifier contains whitespace characters or characters beyond a limited set (see below) It is often recommended to avoid using reserved keywords as column or table identifiers when possible, avoiding the quoting issue.</source>
          <target state="translated">バッククォートはテーブルと列の識別子に使用されますが、識別子が&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/keywords.html&quot;&gt;MySQLの予約済みキーワード&lt;/a&gt;である場合、または識別子に空白文字または制限されたセットを超える文字が含まれている場合にのみ必要です（以下を参照）予約済みキーワードの使用を避けることをお勧めします可能な場合は列またはテーブルの識別子として、引用の問題を回避します。</target>
        </trans-unit>
        <trans-unit id="7b67ad97a7905e28021888adb6b075e99bd7dfc5" translate="yes" xml:space="preserve">
          <source>Besides all of the (well-explained) answers, there hasn't been the following mentioned and I visit this Q&amp;amp;A quite often.</source>
          <target state="translated">（十分に説明された）すべての回答に加えて、次のような言及はありませんでした。私はこのQ＆Aに頻繁にアクセスしています。</target>
        </trans-unit>
        <trans-unit id="fadc64aefd2086615b50e6053cff09b85e061547" translate="yes" xml:space="preserve">
          <source>But if &lt;code&gt;$val1&lt;/code&gt; or &lt;code&gt;$val2&lt;/code&gt; contains single quotes, that will make your SQL be wrong. So you need to escape it before it is used in sql; that is what &lt;code&gt;mysql_real_escape_string&lt;/code&gt; is for. (Although a prepared statement is better.)</source>
          <target state="translated">ただし、 &lt;code&gt;$val1&lt;/code&gt; または &lt;code&gt;$val2&lt;/code&gt; に単一引用符が含まれていると、SQLが不正になります。 したがって、SQLで使用する前にエスケープする必要があります。 それが &lt;code&gt;mysql_real_escape_string&lt;/code&gt; の目的です。 （ただし、準備されたステートメントの方が優れています。）</target>
        </trans-unit>
        <trans-unit id="53ee153e28dc13a819ab66374649167bc848ff1b" translate="yes" xml:space="preserve">
          <source>But, to define a value you have to use either single or double quotes. Lets see another example.</source>
          <target state="translated">しかし、値を定義するにはシングルクォーテーションかダブルクォーテーションを使用しなければなりません。別の例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="295538c6b767eb09e4635898c20cc6628d6c8a75" translate="yes" xml:space="preserve">
          <source>Characters requring backtick quoting in identifiers:</source>
          <target state="translated">識別子にバックティック引用符を使用する文字。</target>
        </trans-unit>
        <trans-unit id="33540ed181289a1140c17a2c218548c4015aacf8" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;https://stackoverflow.com/a/261476/295264&quot;&gt;this&lt;/a&gt; answer to understand more about backticks.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/261476/295264&quot;&gt;この&lt;/a&gt;回答をチェックして、バックティックの詳細を理解してください。</target>
        </trans-unit>
        <trans-unit id="01d813a36b899f97a17fcdd3eeea9309b45be4ec" translate="yes" xml:space="preserve">
          <source>ERROR when not using backticks.</source>
          <target state="translated">バックロックを使用していない場合にエラーが発生する。</target>
        </trans-unit>
        <trans-unit id="e9199febdaab27118bac1b42feacb4f953051759" translate="yes" xml:space="preserve">
          <source>EXAMPLE</source>
          <target state="translated">EXAMPLE</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="e974b798f49fb4a4cc543c3a62ba2ba7d7e6b101" translate="yes" xml:space="preserve">
          <source>Functions native to the RDBMS (for example, &lt;code&gt;NOW()&lt;/code&gt; in MySQL) should not be quoted, although their arguments are subject to the same string or identifier quoting rules already mentioned.</source>
          <target state="translated">RDBMSにネイティブな関数（たとえば、MySQLの &lt;code&gt;NOW()&lt;/code&gt; )は引用符で囲まないでください。ただし、それらの引数には、すでに説明した同じ文字列または識別子の引用規則が適用されます。</target>
        </trans-unit>
        <trans-unit id="94cf825fa1d3abfecf4a149a7632a28e486aea1a" translate="yes" xml:space="preserve">
          <source>Here I have deliberately forgotten to wrap the &lt;code&gt;title1&lt;/code&gt; with quotes. Now the server will take the &lt;code&gt;title1&lt;/code&gt; as a column name (i.e. an identifier). So, to indicate that it's a value you have to use either double or single quotes.</source>
          <target state="translated">ここでは、意図的に &lt;code&gt;title1&lt;/code&gt; を引用符で囲むことを忘れています。 これで、サーバーは &lt;code&gt;title1&lt;/code&gt; を列名（つまり、識別子）として受け取ります。 したがって、それが値であることを示すには、二重引用符または一重引用符を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4a763aa684a171a96a38e00c93601f0a880682f5" translate="yes" xml:space="preserve">
          <source>Here the backticks will help the server to understand that the &lt;code&gt;database&lt;/code&gt; is in fact the name of the database, not the database identifier.</source>
          <target state="translated">ここで、バックティックは、 &lt;code&gt;database&lt;/code&gt; が実際にはデータベースの名前であり、データベース識別子ではないことをサーバーが理解するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="4f81a4dc4011e810be2b92de1ec6a988879991d1" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;123451a6&lt;/code&gt; is a perfectly fine identifier name (without back ticks).</source>
          <target state="translated">ただし、 &lt;code&gt;123451a6&lt;/code&gt; は完全に適切な識別子名です（バックティックなし）。</target>
        </trans-unit>
        <trans-unit id="a4f56cb2abf950c1dfa214bb2db1ce7a12e1c976" translate="yes" xml:space="preserve">
          <source>I am trying to learn the best way to write queries. I also understand the importance of being consistent. Until now, I have randomly used single quotes, double quotes, and backticks without any real thought.</source>
          <target state="translated">クエリーの書き方を勉強しようと思っています。また、一貫性を持つことの重要性も理解しています。今までは、シングルクォートやダブルクォート、バックトークなどを無造作に使っていました。</target>
        </trans-unit>
        <trans-unit id="7a9bf86a612725a6c1f6c761089d4ddb092b4044" translate="yes" xml:space="preserve">
          <source>I suggest that you avoid using &lt;code&gt;&quot;&lt;/code&gt; so that your code becomes independent of SQL modes</source>
          <target state="translated">コードをSQLモードから独立させるために、 &lt;code&gt;&quot;&lt;/code&gt; を使用しないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5f60d12129de9ac0f8ab9d5b826e24134bcace41" translate="yes" xml:space="preserve">
          <source>If need further clearance do follow &lt;a href=&quot;https://stackoverflow.com/questions/242813/when-to-use-double-or-single-quotes-in-javascript&quot;&gt;quotes in JavaScript&lt;/a&gt;</source>
          <target state="translated">さらにクリアランスが必要な場合&lt;a href=&quot;https://stackoverflow.com/questions/242813/when-to-use-double-or-single-quotes-in-javascript&quot;&gt;は、JavaScriptの引用符に&lt;/a&gt;従ってください</target>
        </trans-unit>
        <trans-unit id="be71c075bdbc1c4a895b09b719334569621f7c87" translate="yes" xml:space="preserve">
          <source>If table cols and values are variables then there are two ways:</source>
          <target state="translated">テーブルのcolsと値が変数である場合、2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="f9bd21271adf2137aa18f7f1550c14e6a0e4f6b6" translate="yes" xml:space="preserve">
          <source>If ther's a &lt;code&gt;where&lt;/code&gt; statement in your query and/or trying to &lt;code&gt;insert&lt;/code&gt; a value and/or an &lt;code&gt;update&lt;/code&gt; of value which is string use single quote(') for these values like:</source>
          <target state="translated">クエリの &lt;code&gt;where&lt;/code&gt; ステートメントである場合、および/または値を &lt;code&gt;insert&lt;/code&gt; しようとしている場合、および/または文字列である値の &lt;code&gt;update&lt;/code&gt; を行う場合は、次のようにこれらの値に単一引用符（ '）を使用します。</target>
        </trans-unit>
        <trans-unit id="ef576002982235df7942f8b6022509ce993c7455" translate="yes" xml:space="preserve">
          <source>If you are trying to write query in your back-end to call MySQL then you can use double quote(&quot;) or single quotes(') to assign query to a variable like:</source>
          <target state="translated">バックエンドでMySQLを呼び出すためのクエリを書こうとしている場合は、ダブルクォート(&quot;)やシングルクォート(')を使って、クエリを変数に代入することができます。</target>
        </trans-unit>
        <trans-unit id="0d7bb6dd9c3505559eec418428d442550094778d" translate="yes" xml:space="preserve">
          <source>If you want to stay out of this confusion when to use double quotes(&quot;) and single quotes('), would recommend to stick with single quotes(') this will include backslash() like:</source>
          <target state="translated">二重引用符(&quot;)と単一引用符(')を使用するときにこの混乱から抜け出したい場合は、単一引用符(')に固執することをお勧めしますこれはバックスラッシュ()のようなものが含まれます。</target>
        </trans-unit>
        <trans-unit id="7c29751a38776630a32c7e1e7d4595a893ad9ff4" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_ansi_quotes&quot;&gt;&lt;code&gt;ANSI_QUOTES&lt;/code&gt;&lt;/a&gt; mode the &lt;code&gt;&quot;&lt;/code&gt; character can be used to enclose identifiers just like &lt;code&gt;`&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_ansi_quotes&quot;&gt; &lt;code&gt;ANSI_QUOTES&lt;/code&gt; &lt;/a&gt;モードでは、 &lt;code&gt;&quot;&lt;/code&gt; 文字を使用して、 &lt;code&gt;`&lt;/code&gt; のように識別子を囲むことができます。</target>
        </trans-unit>
        <trans-unit id="b6cf548a377690984817b64cc2d564bb2bd0be16" translate="yes" xml:space="preserve">
          <source>In MySQL, these symbols are used to delimit a query &lt;code&gt;`&lt;/code&gt; ,&lt;code&gt;&quot;&lt;/code&gt; ,&lt;code&gt;'&lt;/code&gt; and &lt;code&gt;()&lt;/code&gt; .</source>
          <target state="translated">MySQLでは、これらの記号はクエリの &lt;code&gt;`&lt;/code&gt; 、 &lt;code&gt;&quot;&lt;/code&gt; 、 &lt;code&gt;'&lt;/code&gt; 、 &lt;code&gt;()&lt;/code&gt; を区切るために使用されます。</target>
        </trans-unit>
        <trans-unit id="a65692f9a2f2ccad5c1fdbc6da666d455b5bf33f" translate="yes" xml:space="preserve">
          <source>In a nutshell; &lt;strong&gt;MySQL thinks you want to do math&lt;/strong&gt; on its own table/column and interprets hyphens such as &quot;e-mail&quot; as &lt;code&gt;e&lt;/code&gt;&lt;strong&gt;minus&lt;/strong&gt;&lt;code&gt;mail&lt;/code&gt;.</source>
          <target state="translated">一言で言えば; &lt;strong&gt;MySQLは&lt;/strong&gt; 、独自のテーブル/列で&lt;strong&gt;数学を実行したいと考え&lt;/strong&gt; 、「e-mail」などのハイフンをe-mailとして解釈します。</target>
        </trans-unit>
        <trans-unit id="9c211317a410743c5d6c983e704b3718ba22ed06" translate="yes" xml:space="preserve">
          <source>In combination of PHP and MySQL, double quotes and single quotes make your query writing time so much easier.</source>
          <target state="translated">PHPとMySQLを組み合わせることで、ダブルクォーテーションとシングルクォーテーションを使用してクエリを書く時間を大幅に短縮することができます。</target>
        </trans-unit>
        <trans-unit id="2dc9e149434250d7fd746b11427230a7e86b3be1" translate="yes" xml:space="preserve">
          <source>In combination of PHP and MySQL, double quotes and single quotes make your query-writing time so much easier.</source>
          <target state="translated">PHPとMySQLを組み合わせることで、ダブルクォーテーションとシングルクォーテーションを使用することで、クエリを書く時間を大幅に短縮することができます。</target>
        </trans-unit>
        <trans-unit id="853461a0cd82d96ba71e241a4d83962a0f2666b0" translate="yes" xml:space="preserve">
          <source>Mostly, we use single quotes for an SQL string value, so we need to use double quotes for a PHP string.</source>
          <target state="translated">ほとんどの場合、SQL文字列の値にはシングルクォートを使用しますので、PHPの文字列にはダブルクォートを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0b6a5aa0c171380342f888c1606d55c54f6cf97d" translate="yes" xml:space="preserve">
          <source>MySQL also expects &lt;code&gt;DATE&lt;/code&gt; and &lt;code&gt;DATETIME&lt;/code&gt; literal values to be single-quoted as strings like &lt;code&gt;'2001-01-01 00:00:00'&lt;/code&gt;. Consult &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/date-and-time-literals.html&quot;&gt;the Date and Time Literals&lt;/a&gt; documentation for more details, in particular alternatives to using the hyphen &lt;code&gt;-&lt;/code&gt; as a segment delimiter in date strings.</source>
          <target state="translated">MySQLは、 &lt;code&gt;DATE&lt;/code&gt; および &lt;code&gt;DATETIME&lt;/code&gt; リテラル値が &lt;code&gt;'2001-01-01 00:00:00'&lt;/code&gt; のような文字列として単一引用符で囲まれていることも想定しています 。 詳細について&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/date-and-time-literals.html&quot;&gt;は、日付と時刻リテラルの&lt;/a&gt;ドキュメントを参照してください。特に、日付文字列のセグメント区切り文字としてハイフンを使用する代わりに使用できます。</target>
        </trans-unit>
        <trans-unit id="0cd5365acbce54464733f800d3e2f2cb6a4aebe2" translate="yes" xml:space="preserve">
          <source>No ERROR on backticks.</source>
          <target state="translated">バックトークにerrorはありません。</target>
        </trans-unit>
        <trans-unit id="01c108ac1d103d1516bc345e95d4ec9ac9b420a6" translate="yes" xml:space="preserve">
          <source>None of these table or column identifiers are reserved words or make use of characters requiring quoting, but I've quoted them anyway with backticks (more on this later...).</source>
          <target state="translated">これらの表や列の識別子はどれも予約語ではありませんし、引用符を必要とする文字を使用していませんが、私はそれらをバックトークで引用しています(これについては後で詳しく説明します...)。</target>
        </trans-unit>
        <trans-unit id="28fee859607534b52f5c5e34eec1da4bccb3a417" translate="yes" xml:space="preserve">
          <source>Now about Double quotes &amp;amp; Single Quotes (Michael has already mentioned that).</source>
          <target state="translated">次に、二重引用符と単一引用符についてです（Michaelはすでにそれについて言及しています）。</target>
        </trans-unit>
        <trans-unit id="8606c8b706526ec7a094d564c27838a760aa1e50" translate="yes" xml:space="preserve">
          <source>Now, in combination with PHP, double quotes and single quotes make your query writing time much easier. Let's see a modified version of the query in your question.</source>
          <target state="translated">さて、PHPとの組み合わせで、二重引用符と一重引用符を使うと、クエリを書く時間が格段に楽になります。ご質問のクエリの修正版を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="05d78f2aa10becd6283e505907025d5685589d69" translate="yes" xml:space="preserve">
          <source>Now, suppose you are using a direct post variable into the MySQL query then, use it this way:</source>
          <target state="translated">さて、MySQLクエリに直接ポスト変数を使用していると仮定して、このように使用します。</target>
        </trans-unit>
        <trans-unit id="693e36e4de7a62195a71e714f4c90f54916b168e" translate="yes" xml:space="preserve">
          <source>Now, using double quotes in the PHP, you will make the variables &lt;code&gt;$val1&lt;/code&gt;, and &lt;code&gt;$val2&lt;/code&gt; to use their values thus creating a perfectly valid query. Like</source>
          <target state="translated">ここで、PHPで二重引用符を使用して、変数 &lt;code&gt;$val1&lt;/code&gt; および &lt;code&gt;$val2&lt;/code&gt; を作成し、それらの値を使用して、完全に有効なクエリを作成します。 お気に入り</target>
        </trans-unit>
        <trans-unit id="e72184f55cc026514b7160d78c3c5aef63c2a050" translate="yes" xml:space="preserve">
          <source>Or</source>
          <target state="translated">Or</target>
        </trans-unit>
        <trans-unit id="185bc949d8e637c87bdd6f1f0ee55566da841699" translate="yes" xml:space="preserve">
          <source>Perhaps it is important to mention that PHP handles single and double quoted strings differently...</source>
          <target state="translated">おそらく、PHPがシングルクォート文字列とダブルクォート文字列の扱いが異なることに言及しておくべきでしょう...。</target>
        </trans-unit>
        <trans-unit id="88e0e0a0df815f954f20830db35becc23bd2fb02" translate="yes" xml:space="preserve">
          <source>Prepared statements</source>
          <target state="translated">作成されたステートメント</target>
        </trans-unit>
        <trans-unit id="db8c5d7eb06f66c5c2883fd10b7c9f25e10cbf80" translate="yes" xml:space="preserve">
          <source>Problem with double(&quot;) or single(') quotes arise when we had to assign some value dynamic and perform some string concatenation like:</source>
          <target state="translated">double(&quot;)やsingle(')の引用符の問題は、動的に値を代入して文字列を連結しなければならない場合に発生します。</target>
        </trans-unit>
        <trans-unit id="0e88a4043a367129052a923a43951e162472a3d3" translate="yes" xml:space="preserve">
          <source>SINGLE QUOTES(') are used around values.</source>
          <target state="translated">SINGLE QUOTES(')は値の周りに使用されます。</target>
        </trans-unit>
        <trans-unit id="99382b494168d7b55cb152720e432f349b76b6ba" translate="yes" xml:space="preserve">
          <source>SQL servers and MySQL, PostgreySQL, Oracle don't understand double quotes(&quot;). Thus your query should be free from double quotes(&quot;) and should only use single quotes(').</source>
          <target state="translated">SQLサーバやMySQL、PostgreySQL、Oracleは二重引用符(&quot;)を理解しません。したがって、あなたのクエリは二重引用符(&quot;)を使用せず、単一引用符(')のみを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e5d8f12a59e9d37cc970caf5496df216cd4c4e99" translate="yes" xml:space="preserve">
          <source>Same can be done for the table names and field names. This is a very &lt;em&gt;good habit&lt;/em&gt; if you wrap your database identifier with backticks.</source>
          <target state="translated">テーブル名とフィールド名についても同様です。 データベース識別子をバッククォートで囲む場合、これは非常に&lt;em&gt;良い習慣&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="840a76f9d9d4101767dd6c408ea67ac56627684f" translate="yes" xml:space="preserve">
          <source>Single quotes should be used for string values like in the &lt;code&gt;VALUES()&lt;/code&gt; list.  Double quotes are supported by MySQL for string values as well, but single quotes are more widely accepted by other RDBMS, so it is a good habit to use single quotes instead of double.</source>
          <target state="translated">&lt;code&gt;VALUES()&lt;/code&gt; リストのように文字列値には一重引用符を使用する必要があります。 MySQLでは文字列値の二重引用符もサポートされていますが、単一引用符は他のRDBMSで広く受け入れられているため、二重引用符の代わりに単一引用符を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="208154868777c5596cc50185f19d1c260427aa82" translate="yes" xml:space="preserve">
          <source>Single quotes should be used for string values like in the VALUES() list.</source>
          <target state="translated">一重引用符は、VALUES()リストのように文字列の値に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="49e809f970df167664867752404912bcbeb9c826" translate="yes" xml:space="preserve">
          <source>Single-quoted strings are 'literals' and are pretty much WYSIWYG strings. Double-quoted strings are interpreted by PHP for possible variable-substitution (backticks in PHP are not exactly strings; they execute a command in the shell and return the result).</source>
          <target state="translated">シングルクォートされた文字列は「リテラル」であり、WYSIWYG 文字列のようなものです。二重引用符で囲まれた文字列は、変数の置換の可能性があるかどうかを PHP が解釈します (PHP の backticks は正確には文字列ではありません。)</target>
        </trans-unit>
        <trans-unit id="9eaa0efb21da499527054208ef276f599b1f2281" translate="yes" xml:space="preserve">
          <source>So if your string contains single quotes, then you could use double quotes to quote the string, or if it contains double quotes, then you could use single quotes to quote the string. But if your string contains both single quotes and double quotes, you need to escape the one that used to quote the string.</source>
          <target state="translated">ですから、もしあなたの文字列にシングルクォートが含まれている場合はダブルクォートを使って文字列を引用し、ダブルクォートが含まれている場合はシングルクォートを使って文字列を引用することができます。しかし、文字列にシングルクォートとダブルクォートの両方が含まれている場合は、文字列の引用に使用した方をエスケープする必要があります。</target>
        </trans-unit>
        <trans-unit id="90a743846cd66e712bd99d8ed5918ec643324cc0" translate="yes" xml:space="preserve">
          <source>So using your example, I would double-quote the PHP string and use single quotes on the values &lt;code&gt;'val1', 'val2'&lt;/code&gt;.  &lt;code&gt;NULL&lt;/code&gt; is a MySQL keyword, and a special (non)-value, and is therefore unquoted.</source>
          <target state="translated">したがって、例を使用すると、PHP文字列を二重引用符で &lt;code&gt;'val1', 'val2'&lt;/code&gt; 、値'val1'、 'val2'に単一引用符を使用します。 &lt;code&gt;NULL&lt;/code&gt; はMySQLキーワードであり、特別な（非）値であるため、引用符で囲まれていません。</target>
        </trans-unit>
        <trans-unit id="0d017453a7cc8300a916af70e40a39e5e8e2f1b6" translate="yes" xml:space="preserve">
          <source>The following query will produce different results (or errors) depending on SQL mode:</source>
          <target state="translated">以下のクエリは、SQLモードによって異なる結果(またはエラー)を生成します。</target>
        </trans-unit>
        <trans-unit id="adebd13f3da25e7bbda4c2effcd391c369d3f149" translate="yes" xml:space="preserve">
          <source>The query will select the column &lt;code&gt;column&lt;/code&gt; where column &lt;code&gt;foo&lt;/code&gt; is equal to column &lt;code&gt;bar&lt;/code&gt;</source>
          <target state="translated">クエリは、列 &lt;code&gt;foo&lt;/code&gt; が列 &lt;code&gt;bar&lt;/code&gt; と等しい列 &lt;code&gt;column&lt;/code&gt; を選択します</target>
        </trans-unit>
        <trans-unit id="9ee32a639440216e4b2f7ed7aa69a7ce5d857bc1" translate="yes" xml:space="preserve">
          <source>The query will select the string literal &lt;code&gt;&quot;column&quot;&lt;/code&gt; where column &lt;code&gt;foo&lt;/code&gt; is equal to string &lt;code&gt;&quot;bar&quot;&lt;/code&gt;</source>
          <target state="translated">クエリは、文字列リテラル &lt;code&gt;&quot;column&quot;&lt;/code&gt; を選択します。ここで、列 &lt;code&gt;foo&lt;/code&gt; は文字列 &lt;code&gt;&quot;bar&quot;&lt;/code&gt; と等しいです。</target>
        </trans-unit>
        <trans-unit id="ddf65abb76a47ea6d6931947e8f74f6da692f1a2" translate="yes" xml:space="preserve">
          <source>The quoting patterns for variables do not change, although if you intend to interpolate the variables directly in a string, it must be double-quoted in PHP. Just make sure that you have properly escaped the variables for use in SQL. (&lt;a href=&quot;https://stackoverflow.com/questions/60174/how-to-prevent-sql-injection-in-php&quot;&gt;It is recommended to use an API supporting prepared statements instead, as protection against SQL injection&lt;/a&gt;).</source>
          <target state="translated">変数の引用パターンは変更されませんが、変数を文字列で直接補間する場合は、PHPで二重引用符で囲む必要があります。 SQLで使用するために変数を適切にエスケープしたことを確認してください。 （ &lt;a href=&quot;https://stackoverflow.com/questions/60174/how-to-prevent-sql-injection-in-php&quot;&gt;SQLインジェクションに対する保護として、代わりに準備済みステートメントをサポートするAPIを使用することをお勧めします&lt;/a&gt; ）。</target>
        </trans-unit>
        <trans-unit id="9dcec773dd6d848ae315fc05a43c597e3397f591" translate="yes" xml:space="preserve">
          <source>The string literals in MySQL and PHP are the same.</source>
          <target state="translated">MySQLとPHPの文字列リテラルは同じです。</target>
        </trans-unit>
        <trans-unit id="28a083b8be20369358b80d4af6e18c9821470ac2" translate="yes" xml:space="preserve">
          <source>There are two types of quotes in MySQL:</source>
          <target state="translated">MySQLには2種類の引用符があります。</target>
        </trans-unit>
        <trans-unit id="26beaab34e0768054165d0c1783d4d12e91ffddd" translate="yes" xml:space="preserve">
          <source>There has been many helpful answers here, generally culminating into two points.</source>
          <target state="translated">ここには多くの参考になる回答があり、概ね2つのポイントに集約されています。</target>
        </trans-unit>
        <trans-unit id="78fa2e0372f5352b9d83a0736e9385e74fb02f28" translate="yes" xml:space="preserve">
          <source>There is a case though where an identifier can neither be a &lt;em&gt;reserved keyword&lt;/em&gt; or contain &lt;em&gt;whitespace&lt;/em&gt; or &lt;em&gt;characters beyond limited set&lt;/em&gt; but necessarily require backticks around them.</source>
          <target state="translated">ただし、識別子が&lt;em&gt;予約されたキーワードになっ&lt;/em&gt;たり、 &lt;em&gt;制限されたセットを超えて&lt;/em&gt; &lt;em&gt;空白&lt;/em&gt;や&lt;em&gt;文字を&lt;/em&gt;含むことはできないが、それらを囲む必要がある場合もあります。</target>
        </trans-unit>
        <trans-unit id="ffb638c7729af90d6ab35de9742eb90045d7a9f7" translate="yes" xml:space="preserve">
          <source>This is completely because &lt;code&gt;1234156e6&lt;/code&gt; is also an exponential number.</source>
          <target state="translated">これは完全に &lt;code&gt;1234156e6&lt;/code&gt; も指数であるためです。</target>
        </trans-unit>
        <trans-unit id="66dd3116ff7f609f37b4d10de5c37835eecf1d3b" translate="yes" xml:space="preserve">
          <source>This is the best practice for using PHP variables into MySQL.</source>
          <target state="translated">これは、PHPの変数をMySQLに使用する際のベストプラクティスです。</target>
        </trans-unit>
        <trans-unit id="58d6e4e975e2f7eace65c91034b92638753a3c78" translate="yes" xml:space="preserve">
          <source>Use back ticks &lt;code&gt;``&lt;/code&gt; when a column/value name is similar to a MySQL reserved keyword.</source>
          <target state="translated">列/値の名前がMySQLの予約済みキーワードに類似している場合は、バックティックを使用します。</target>
        </trans-unit>
        <trans-unit id="9056c1c45a9a2f407b0675fff2c7c7401342b40b" translate="yes" xml:space="preserve">
          <source>Variable interpolation</source>
          <target state="translated">変数補間</target>
        </trans-unit>
        <trans-unit id="4f4436a7610700ede1a264b9258f77eb38045437" translate="yes" xml:space="preserve">
          <source>What is the standard for this? What do you do?</source>
          <target state="translated">何を基準にしているのか?何をしているのか?</target>
        </trans-unit>
        <trans-unit id="ed82b9ac93865fb15bdceac28e48b922d33a56ee" translate="yes" xml:space="preserve">
          <source>When to use single quotes, double quotes, and backticks in MySQL</source>
          <target state="translated">MySQLでシングルクォート、ダブルクォート、バックトークを使用する場合</target>
        </trans-unit>
        <trans-unit id="64f93b08c3ed93ef44b231186c6bd7e0a580b9a3" translate="yes" xml:space="preserve">
          <source>When to use what</source>
          <target state="translated">どんな時に何を使うか</target>
        </trans-unit>
        <trans-unit id="54f07e6ed7c59c30778e41c8bd305cbd13b96ba3" translate="yes" xml:space="preserve">
          <source>When working with prepared statements, consult the documentation to determine whether or not the statement's placeholders must be quoted.  The most popular APIs available in PHP, PDO and MySQLi, expect &lt;em&gt;unquoted&lt;/em&gt; placeholders, as do most prepared statement APIs in other languages:</source>
          <target state="translated">準備されたステートメントを使用する場合は、ドキュメントを参照して、ステートメントのプレースホルダーを引用する必要があるかどうかを判断してください。 PHP、PDO、MySQLiで利用できる最も人気のあるAPIは、他の言語で準備されたほとんどのステートメントAPIと同様に、 &lt;em&gt;引用符で囲ま&lt;/em&gt;れていないプレースホルダーを想定しています。</target>
        </trans-unit>
        <trans-unit id="1ff715c4d19dd4560790ccb4ec16c12cb744669e" translate="yes" xml:space="preserve">
          <source>With double quotes &lt;code&gt;&quot;&quot;&lt;/code&gt; the complete query:</source>
          <target state="translated">二重引用符 &lt;code&gt;&quot;&quot;&lt;/code&gt; で完全なクエリ：</target>
        </trans-unit>
        <trans-unit id="97f55790949107a26fe97c8af77a0d602d9990c7" translate="yes" xml:space="preserve">
          <source>With single quotes &lt;code&gt;''&lt;/code&gt;:</source>
          <target state="translated">単一引用符付き &lt;code&gt;''&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c892ad3d5a3543c5ae3c83edfab273b7341a72e7" translate="yes" xml:space="preserve">
          <source>You can use characters beyond that set as table or column identifiers, including whitespace for example, but then you &lt;em&gt;must&lt;/em&gt; quote (backtick) them.</source>
          <target state="translated">たとえば、空白を含む、テーブルまたは列の識別子としてそのセット以外の文字を使用できますが、それらを引用符（バックティック）で囲む&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="c86679f13b3d62526371afbe4aff681c0612003f" translate="yes" xml:space="preserve">
          <source>[Without going into detail how you would get such an identifier name], Suppose I want to create a temporary table named &lt;code&gt;123456e6&lt;/code&gt;.</source>
          <target state="translated">[そのような識別子名の取得方法については詳しく説明しません] &lt;code&gt;123456e6&lt;/code&gt; という名前の一時テーブルを作成するとします。</target>
        </trans-unit>
        <trans-unit id="9d413bc3ea63f223ff615cfe259e30f18066d98c" translate="yes" xml:space="preserve">
          <source>will make</source>
          <target state="translated">作る</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
