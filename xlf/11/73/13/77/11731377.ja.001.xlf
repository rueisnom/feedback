<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/11731377">
    <body>
      <group id="11731377">
        <trans-unit id="ef8391e59c1a023244e01b021bd1729ad8c21a90" translate="yes" xml:space="preserve">
          <source>(Mine: java -jar target/dependency/webapp-runner.jar --port 5190 target/*.war )</source>
          <target state="translated">(私の場合:java -jar targetdependencywebapp-runner.jar --port 5190 target*.war )</target>
        </trans-unit>
        <trans-unit id="b5cec627593f5d86de855befd0cfb85ff2e671a5" translate="yes" xml:space="preserve">
          <source>------------ 2.1: press:&lt;strong&gt;Windows+R&lt;/strong&gt; --&amp;gt; type:&quot;&lt;strong&gt;services.msc&lt;/strong&gt;&quot;</source>
          <target state="translated">------------ 2.1：押す： &lt;strong&gt;Windows + R-&lt;/strong&gt; &amp;gt;タイプ： &quot; &lt;strong&gt;services.msc&lt;/strong&gt; &quot;</target>
        </trans-unit>
        <trans-unit id="be4e0f02aaf33dddc6b7fceb222626cadcbb2322" translate="yes" xml:space="preserve">
          <source>------------ 2.2: Find &quot;Apache Tomcat #.# Tomcat#&quot; in Name column of list.</source>
          <target state="translated">------------2.2:リストのName欄から「Apache Tomcat #.#Tomcat#」を検索します。</target>
        </trans-unit>
        <trans-unit id="173e9a38061f30310ec90115c0fa04d3a1a7f191" translate="yes" xml:space="preserve">
          <source>------------ 2.3: Right Click --&amp;gt; &quot;&lt;strong&gt;stop&lt;/strong&gt;&quot;</source>
          <target state="translated">------------ 2.3：右クリック-&amp;gt; &quot; &lt;strong&gt;停止&lt;/strong&gt; &quot;</target>
        </trans-unit>
        <trans-unit id="91b8d11041aa20511cbe7e9257af91c079127b75" translate="yes" xml:space="preserve">
          <source>1) button-id : The 'id' tag you give to your button in your html/jsp file.</source>
          <target state="translated">1)button-id:htmljspファイルの中でボタンに与える'id'タグ。</target>
        </trans-unit>
        <trans-unit id="74b146e4924e8ffe740e7c55d20617e919fe77d2" translate="yes" xml:space="preserve">
          <source>1: Stop Tomcat</source>
          <target state="translated">1:トムキャットを止める</target>
        </trans-unit>
        <trans-unit id="50de7c88d6d5d014a6ef5a834d3599f88b6808e5" translate="yes" xml:space="preserve">
          <source>1: The maven build (mvn package) will not report any errors here.</source>
          <target state="translated">1:mavenビルド(mvnパッケージ)では、ここでのエラーは報告されません。</target>
        </trans-unit>
        <trans-unit id="274a270c86d2d89f2b13429f439b2bf634f4dc1b" translate="yes" xml:space="preserve">
          <source>2) full-servlet-path: The path that shows in the browser when you run the servlet alone</source>
          <target state="translated">2)full-servlet-path。サーブレットを単独で実行したときにブラウザに表示されるパス</target>
        </trans-unit>
        <trans-unit id="d059299348ab69329702cab2896c97e38cfb9f52" translate="yes" xml:space="preserve">
          <source>2: Delete the &quot;target&quot; folder.
&lt;strong&gt;(mvn clean will not help you here)&lt;/strong&gt;</source>
          <target state="translated">2：「ターゲット」フォルダを削除します。 &lt;strong&gt;（mvn cleanはここでは役に立ちません）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="81253366bea8a825e170b81240a47abbeb3ecd5a" translate="yes" xml:space="preserve">
          <source>2: servlet-class line in web.xml can have CORRECT package path. E.g:</source>
          <target state="translated">2:web.xml のサーブレットクラスの行は正しいパッケージパスを持つことができます。例えば</target>
        </trans-unit>
        <trans-unit id="45e4cb7f42032bd3a7a8f022d8efabbd6d70d597" translate="yes" xml:space="preserve">
          <source>3: mvn package</source>
          <target state="translated">3:mvn パッケージ</target>
        </trans-unit>
        <trans-unit id="b3f109ced9bbd12fb5c4d6de262beabf951ba3ba" translate="yes" xml:space="preserve">
          <source>4: &lt;em&gt;YOUR_DEPLOYMENT_COMMAND_HERE&lt;/em&gt;</source>
          <target state="translated">4： &lt;em&gt;YOUR_DEPLOYMENT_COMMAND_HERE&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f53b9666f74a092e6d24900856588c39d7ee0af0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;Our servlets wiki page&lt;/a&gt; - Contains some hello world examples</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;サーブレットのWikiページ&lt;/a&gt; -Hello Worldの例がいくつか含まれています</target>
        </trans-unit>
        <trans-unit id="cee257bd7a775d5243756102b96bb120f117f14d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@WebServlet&lt;/code&gt; works only on Servlet 3.0 or newer</source>
          <target state="translated">&lt;code&gt;@WebServlet&lt;/code&gt; はServlet 3.0以降でのみ機能します</target>
        </trans-unit>
        <trans-unit id="4a9c9b8f24fd28dfb4dba5a0f715e166c4d87683" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Description&lt;/em&gt;: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists</source>
          <target state="translated">&lt;em&gt;説明&lt;/em&gt; ：オリジンサーバーがターゲットリソースの現在の表現を見つけられなかったか、存在することを開示しようとしません</target>
        </trans-unit>
        <trans-unit id="fa3a68f402e7d5197ab69044cf7d9ace2e7ebfd9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Description&lt;/em&gt;: The requested resource (/servlet) is not available.</source>
          <target state="translated">&lt;em&gt;説明&lt;/em&gt; ：要求されたリソース（/ servlet）は利用できません。</target>
        </trans-unit>
        <trans-unit id="ede18368a347b70e15f2231b24a9cf9741fe1f5c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Message&lt;/em&gt;: /servlet</source>
          <target state="translated">&lt;em&gt;メッセージ&lt;/em&gt; ：/ servlet</target>
        </trans-unit>
        <trans-unit id="e7d7a139342121cd742dd9b773166e870fb5e06e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Full Back Story:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;完全なバックストーリー：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e6d02356a12a437281e7fe2b2c9b0a6d50625d1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Scenario #1:&lt;/strong&gt; You &lt;strong&gt;accidentially re-deployed&lt;/strong&gt; from the command line while tomcat was &lt;strong&gt;already running&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;シナリオ＃1：&lt;/strong&gt; tomcatが&lt;strong&gt;すでに実行&lt;/strong&gt;され&lt;strong&gt;ている&lt;/strong&gt;ときに、コマンドラインから&lt;strong&gt;誤って再デプロイ&lt;/strong&gt;した。</target>
        </trans-unit>
        <trans-unit id="72a6b1a86bdb5acc0399e8ea8b72e95bd4f339d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Scenario #2:&lt;/strong&gt; request.getRequestDispatcher(&quot;&lt;strong&gt;MIS_SPELLED_FILE_NAME&lt;/strong&gt;.jsp&quot;)</source>
          <target state="translated">&lt;strong&gt;シナリオ＃2：&lt;/strong&gt; request.getRequestDispatcher（ &quot; &lt;strong&gt;MIS_SPELLED_FILE_NAME&lt;/strong&gt; .jsp&quot;）</target>
        </trans-unit>
        <trans-unit id="e71b95ab432c10ccf9447ef5474cf42d07f6641b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Scenario #3: Class Not Found Exceptions&lt;/strong&gt;
(Answer put here because: Question# 17982240  )
(&lt;a href=&quot;https://stackoverflow.com/questions/17982240&quot;&gt;java.lang.ClassNotFoundException for servlet in tomcat with eclipse&lt;/a&gt; )
(was marked as duplicate and directed me here )</source>
          <target state="translated">&lt;strong&gt;シナリオ＃3：クラスが見つかりません例外&lt;/strong&gt; （Answer here here：Question＃17982240）（ &lt;a href=&quot;https://stackoverflow.com/questions/17982240&quot;&gt;java.lang.ClassNotFoundException for servlet in tomcat with eclipse&lt;/a&gt; ）（重複としてマークされ、ここに指示されました）</target>
        </trans-unit>
        <trans-unit id="3d11a958b6695c4d330e024521eaffdd45846a38" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short Answer:&lt;/strong&gt; Check file name &lt;strong&gt;spelling&lt;/strong&gt;, make sure &lt;strong&gt;case&lt;/strong&gt; is correct.</source>
          <target state="translated">&lt;strong&gt;短い回答：&lt;/strong&gt;ファイル名の&lt;strong&gt;スペル&lt;/strong&gt;を確認し、 &lt;strong&gt;大文字&lt;/strong&gt;と&lt;strong&gt;小文字&lt;/strong&gt;が正しいことを確認してください。</target>
        </trans-unit>
        <trans-unit id="adec26fb9c76bf7f62c3198ee306e113bc4e4df3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short Answer:&lt;/strong&gt; Stop Tomcat, &lt;strong&gt;delete target folder&lt;/strong&gt;, mvn package, then re-deploy</source>
          <target state="translated">&lt;strong&gt;短い答え：&lt;/strong&gt; Tomcatを停止し、 &lt;strong&gt;ターゲットフォルダー&lt;/strong&gt; 、mvnパッケージを&lt;strong&gt;削除して&lt;/strong&gt;から、再デプロイします</target>
        </trans-unit>
        <trans-unit id="4b40b41ff9b79bbad60117438e54398499c8b404" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;right click&lt;/strong&gt;, select &lt;strong&gt;properties&lt;/strong&gt;, then &lt;strong&gt;web project settings&lt;/strong&gt;. Check &lt;strong&gt;the context root cannot be empty&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;右クリックして&lt;/strong&gt; 、 &lt;strong&gt;プロパティを&lt;/strong&gt;選択し、次に&lt;strong&gt;Webプロジェクト設定を&lt;/strong&gt;選択し&lt;strong&gt;ます&lt;/strong&gt; 。 &lt;strong&gt;コンテキストルートを空にすることはできません。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b08b5c1fa5ee7c0ba71a96bec64fcec446944f4c" translate="yes" xml:space="preserve">
          <source>Accidentially opened a new git-bash window and
tried to deploy a .war file for my heroku project via:</source>
          <target state="translated">誤って新しい git-bash ウィンドウを開き、.war ファイルを使って heroku プロジェクトにデプロイしようとしました。</target>
        </trans-unit>
        <trans-unit id="c80a367345cd94ec547a04ac950c0e5493aaf0a9" translate="yes" xml:space="preserve">
          <source>After a failure to deploy, I realized I had two git-bash windows open,
and &lt;strong&gt;had not used CTLR+C to stop the previous deployment&lt;/strong&gt;.</source>
          <target state="translated">デプロイに失敗した後、2つのgit-bashウィンドウが開い&lt;strong&gt;ていて、以前のデプロイを停止するためにCTLR + Cを使用&lt;/strong&gt;し&lt;strong&gt;ていない&lt;/strong&gt;ことに気付き&lt;strong&gt;ました&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="4f6969f7446f4228b19794745ad6ff91eeb37d87" translate="yes" xml:space="preserve">
          <source>An easy way to verify if the servlet is correctly compiled and placed in classpath is to let the build tool produce a WAR file (e.g. rightclick project, &lt;em&gt;Export &amp;gt; WAR file&lt;/em&gt; in Eclipse) and then inspect its contents with a ZIP tool. If the servlet class is missing in &lt;code&gt;/WEB-INF/classes&lt;/code&gt;, then the project is badly configured or some IDE/project configuration defaults have been mistakenly reverted (e.g. &lt;em&gt;Project &amp;gt; Build Automatically&lt;/em&gt; has been disabled in Eclipse). In case you have no clue, best is to restart from scratch and do not touch any IDE/project configuration defaults.</source>
          <target state="translated">サーブレットが正しくコンパイルされ、クラスパスに配置されているかどうかを確認する簡単な方法は、ビルドツールにWARファイル（たとえば、右クリックプロジェクト、 &lt;em&gt;エクスポート&amp;gt;&lt;/em&gt; Eclipseの&lt;em&gt;WARファイル&lt;/em&gt; ）を生成させ、その内容をZIPツールで検査することです。 &lt;code&gt;/WEB-INF/classes&lt;/code&gt; にサーブレットクラスがない場合は、プロジェクトが正しく構成されていないか、一部のIDE /プロジェクト構成のデフォルトが誤って元に戻されています（たとえば、[ &lt;em&gt;プロジェクト]&amp;gt; [自動ビルド]&lt;/em&gt;がEclipseで無効になっている）。 手がかりがない場合は、最初から再起動し、IDE /プロジェクト構成のデフォルトには触れないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="9429e838596ece8bc28028824208934441c2dcdf" translate="yes" xml:space="preserve">
          <source>An old thread, but since I didn't find it elsewhere, here is one more possibility:</source>
          <target state="translated">古いスレッドですが、他の場所では見当たらなかったので、もう一つ可能性があります。</target>
        </trans-unit>
        <trans-unit id="0f7ad93b9bc21d7c046ba64860b72ddc12494176" translate="yes" xml:space="preserve">
          <source>And find in the server log a &lt;code&gt;java.lang.ClassNotFoundException: com.example.YourServlet&lt;/code&gt;, followed by a &lt;code&gt;java.lang.NoClassDefFoundError: com.example.YourServlet&lt;/code&gt;, in turn followed by &lt;code&gt;javax.servlet.ServletException: Error instantiating servlet class com.example.YourServlet&lt;/code&gt;.</source>
          <target state="translated">サーバーログで &lt;code&gt;java.lang.ClassNotFoundException: com.example.YourServlet&lt;/code&gt; 見つけ、その後にjava.lang.NoClassDefFoundError：com.example.YourServletが続き、続いて &lt;code&gt;javax.servlet.ServletException: Error instantiating servlet class com.example.YourServlet&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e8fde66d4ba4d2ffe76db21d5dabbb5f3e784d9c" translate="yes" xml:space="preserve">
          <source>And register the servlet instead in &lt;code&gt;web.xml&lt;/code&gt; like this:</source>
          <target state="translated">代わりに、次のように &lt;code&gt;web.xml&lt;/code&gt; にサーブレットを登録します。</target>
        </trans-unit>
        <trans-unit id="f31a04c0a607763671161201a194397605433d8b" translate="yes" xml:space="preserve">
          <source>Apache Tomcat/8.5.31</source>
          <target state="translated">アパッチトムキャット8.5.31</target>
        </trans-unit>
        <trans-unit id="9311a5a7c8c675608e7857b5e7dc39e34ec690b3" translate="yes" xml:space="preserve">
          <source>Below is further details for Scenario #1:</source>
          <target state="translated">以下、シナリオ#1の詳細について説明する。</target>
        </trans-unit>
        <trans-unit id="4fc60ef095769fc27b7820ba6e1bc65385e59105" translate="yes" xml:space="preserve">
          <source>Below is further details for Scenario #3:</source>
          <target state="translated">以下、シナリオ#3の詳細について説明する。</target>
        </trans-unit>
        <trans-unit id="45a48f3a7b47cdcff8e92d7e3a184fb2175629a1" translate="yes" xml:space="preserve">
          <source>Browser can't access/find relative resources like CSS, images and links when calling a Servlet which forwards to a JSP</source>
          <target state="translated">JSPに転送するサーブレットを呼び出しても、CSS、画像、リンクなどの相対的なリソースを見つけられない。</target>
        </trans-unit>
        <trans-unit id="5725c9dc0820e6a7ad318694bdcf97c570b83593" translate="yes" xml:space="preserve">
          <source>But none of those work. They all keep returning a HTTP 404 error like below in Tomcat 6/7/8:</source>
          <target state="translated">しかし、どれもうまくいきません。いずれもTomcat 678では以下のようなHTTP 404エラーを返し続けています。</target>
        </trans-unit>
        <trans-unit id="9307d562fcd4393c48dc6b781472fcff3a97d3eb" translate="yes" xml:space="preserve">
          <source>But this will likely result in a 404 as it's in the wrong context.</source>
          <target state="translated">しかし、これは文脈が間違っているので404になる可能性が高いです。</target>
        </trans-unit>
        <trans-unit id="b9659f22f0ae1db5076d13011b3dce97af6d7062" translate="yes" xml:space="preserve">
          <source>But this will likely result in a 404 as it's in the wrong folder.</source>
          <target state="translated">しかし、これは間違ったフォルダに入っているので404になる可能性が高いです。</target>
        </trans-unit>
        <trans-unit id="5a2081ada0ab60ea8a03c04f68b58631b8953e07" translate="yes" xml:space="preserve">
          <source>Click on Run</source>
          <target state="translated">実行をクリックしてください。</target>
        </trans-unit>
        <trans-unit id="6f58c0b59cdbdd002e90c2c974a0545ae8bacf63" translate="yes" xml:space="preserve">
          <source>Description The origin server  did not find a current representation
  for  the target resource or is not willing  to disclose that one
  exists.</source>
          <target state="translated">説明 オリジンサーバーがターゲットリソースの現在の表現を見つけられなかったか、またはその表現が存在することを開示しようとしませんでした。</target>
        </trans-unit>
        <trans-unit id="b5001be1142daaa1300235961153b37007e81bc8" translate="yes" xml:space="preserve">
          <source>Do the following two steps. I hope, it will solve the &quot;404 not found&quot; issue in tomcat server during the development of java servlet application.</source>
          <target state="translated">以下の2つの手順を実行してください。これで、サーブレットアプリケーションの開発中に、tomcatサーバで「404が見つかりませんでした」という問題が解決することを期待しています。</target>
        </trans-unit>
        <trans-unit id="8895ad91fe7f2f9fbb11ac6ff2709c6fc3acd7dd" translate="yes" xml:space="preserve">
          <source>Don't just start your server, for example Wildfly, using the cmd. It has to be launched within the IDE and now visit your localhost URL. Example: &lt;a href=&quot;http://localhost:8080/HelloWorldServlet/HelloWorld&quot;&gt;http://localhost:8080/HelloWorldServlet/HelloWorld&lt;/a&gt;</source>
          <target state="translated">cmdを使用して、Wildflyなどのサーバーを起動しないでください。 IDE内で起動し、localhost URLにアクセスする必要があります。 例： &lt;a href=&quot;http://localhost:8080/HelloWorldServlet/HelloWorld&quot;&gt;http：// localhost：8080 / HelloWorldServlet / HelloWorld&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6e682f594d071ee55a589dfbe5b20d3a97433ecb" translate="yes" xml:space="preserve">
          <source>Error instantiating servlet class com.example.YourServlet</source>
          <target state="translated">サーブレット・クラス com.example.YourServlet のインスタンス作成エラー</target>
        </trans-unit>
        <trans-unit id="8caf401de3e529d1edadce1206b5b498ecd8cf5f" translate="yes" xml:space="preserve">
          <source>File is in: &quot;&lt;strong&gt;/my_stuff&lt;/strong&gt;&quot; folder</source>
          <target state="translated">ファイルは次の場所にあります： &quot; &lt;strong&gt;/ my_stuff&lt;/strong&gt; &quot;フォルダー</target>
        </trans-unit>
        <trans-unit id="800eea699b37746a59c8b769da60887886b22430" translate="yes" xml:space="preserve">
          <source>File: PRJ_ROOT/src/main/webapp/WEB-INF/&lt;strong&gt;web.xml&lt;/strong&gt;</source>
          <target state="translated">ファイル：PRJ_ROOT / src / main / webapp / WEB-INF / &lt;strong&gt;web.xml&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="77602214dcb3b6d4255d68a8ffca412d3d842cf8" translate="yes" xml:space="preserve">
          <source>File: my_stuff/&lt;strong&gt;MyClass.java&lt;/strong&gt;:</source>
          <target state="translated">ファイル：my_stuff / &lt;strong&gt;MyClass.java&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="3fca440acf66feade2247b7789eb83c8035fb7b7" translate="yes" xml:space="preserve">
          <source>First of all, put the servlet class in a Java &lt;code&gt;package&lt;/code&gt;. You should &lt;em&gt;always&lt;/em&gt; put publicly reuseable Java classes in a package, otherwise they are invisible to classes which are in a package, such as the server itself. This way you eliminiate potential environment-specific problems. Packageless servlets work only in specific Tomcat+JDK combinations and this should never be relied upon.</source>
          <target state="translated">まず、サーブレットクラスをJava &lt;code&gt;package&lt;/code&gt; に入れます 。 パッケージには&lt;em&gt;常に&lt;/em&gt;再利用可能なJavaクラスを配置する必要があります。そうしないと、サーバー自体など、パッケージ内のクラスからは見えません。 このようにして、潜在的な環境固有の問題を排除します。 パッケージレスサーブレットは特定のTomcat + JDKの組み合わせでのみ機能し、これに依存することはできません。</target>
        </trans-unit>
        <trans-unit id="72613fd18546c799f0819c61a56dd315f9d9b70d" translate="yes" xml:space="preserve">
          <source>First of all, run your IDE as Admin. After that, right click the project folder -&amp;gt; Project Facets and make sure that the Java Version is set correct. On my PC. (For Example 1.8) Now it should work.</source>
          <target state="translated">まず、IDEを管理者として実行します。 その後、プロジェクトフォルダーを右クリックし、[プロジェクトファセット]をクリックして、Javaバージョンが正しく設定されていることを確認します。 私のPCで。 （例1.8の場合）これで動作するはずです。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="3594b84339b2741289df2cbcccd0f0dddfa1e538" translate="yes" xml:space="preserve">
          <source>Form action submits to an URL which goes one folder up.</source>
          <target state="translated">フォームアクションは、1つ上のフォルダに移動するURLに送信します。</target>
        </trans-unit>
        <trans-unit id="72fed683ae94af8229cb6d58840440a195da13ed" translate="yes" xml:space="preserve">
          <source>Form action submits to an URL with a leading slash.</source>
          <target state="translated">フォームアクションは、先頭にスラッシュが付いた URL に送信します。</target>
        </trans-unit>
        <trans-unit id="674a2f9286ddcf0c261d355fa8f5006b41a04a5d" translate="yes" xml:space="preserve">
          <source>Form action submits to an URL without a leading slash.</source>
          <target state="translated">フォームアクションは、先頭のスラッシュのないURLに送信します。</target>
        </trans-unit>
        <trans-unit id="6ead09b0ba385bc6c067e746b20be94ca9918320" translate="yes" xml:space="preserve">
          <source>HTTP Status 404 &amp;mdash; /servlet</source>
          <target state="translated">HTTPステータス404 &amp;mdash; / servlet</target>
        </trans-unit>
        <trans-unit id="0da74029840f15c6561d87f656f135731176773d" translate="yes" xml:space="preserve">
          <source>HTTP Status 404 &amp;mdash; Not Found</source>
          <target state="translated">HTTPステータス404-見つかりません</target>
        </trans-unit>
        <trans-unit id="ff1e544f6dd3a5f362619b9163745f2816df2605" translate="yes" xml:space="preserve">
          <source>HTTP Status 404 &amp;ndash; Not Found Type Status Report</source>
          <target state="translated">HTTPステータス404 &amp;ndash;見つからないタイプのステータスレポート</target>
        </trans-unit>
        <trans-unit id="dfcb317b128e39332916f53d074b049b81bf6696" translate="yes" xml:space="preserve">
          <source>HTTP Status 404 - Servlet [ServletName] is not available</source>
          <target state="translated">HTTP ステータス 404-サーブレット [ServletName]が利用できません。</target>
        </trans-unit>
        <trans-unit id="41618ce632a94afa3200bb50d878a946c1a6c598" translate="yes" xml:space="preserve">
          <source>HTTP Status 404 - The requested resource (/) is not available</source>
          <target state="translated">HTTP ステータス 404-要求されたリソース ()が利用できません。</target>
        </trans-unit>
        <trans-unit id="141f6c9b114a1000819fcba97ae9d5770e6dd091" translate="yes" xml:space="preserve">
          <source>HTTP Status 404 - The requested resource (/ProjectName/) is not available</source>
          <target state="translated">HTTP ステータス 404-要求されたリソース (ProjectName)が利用できません。</target>
        </trans-unit>
        <trans-unit id="d92f97f2a6e730df416b349f7adcdfa2c0fab3ed" translate="yes" xml:space="preserve">
          <source>HTTP Status 500</source>
          <target state="translated">HTTPステータス500</target>
        </trans-unit>
        <trans-unit id="a1e689c246c34a93e864e4944f2905a7df932dd0" translate="yes" xml:space="preserve">
          <source>How do I pass current item to Java method by clicking a hyperlink or button in JSP page?</source>
          <target state="translated">JSPページでハイパーリンクやボタンをクリックして、現在の項目をJavaメソッドに渡すには?</target>
        </trans-unit>
        <trans-unit id="4efade0a60778809858fe1b2abb6a89661931c05" translate="yes" xml:space="preserve">
          <source>How to call servlet class from HTML form</source>
          <target state="translated">HTMLフォームからサーブレットクラスを呼び出す方法</target>
        </trans-unit>
        <trans-unit id="4b4f60ee886330c79cae09f93b3390a54153cae8" translate="yes" xml:space="preserve">
          <source>I have an HTML form in a JSP file in my &lt;code&gt;WebContent/jsps&lt;/code&gt; folder. I have a servlet class &lt;code&gt;servlet.java&lt;/code&gt; in my default package in &lt;code&gt;src&lt;/code&gt; folder. In my &lt;code&gt;web.xml&lt;/code&gt; it is mapped as &lt;code&gt;/servlet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WebContent/jsps&lt;/code&gt; フォルダーのJSPファイルにHTMLフォームがあります。 &lt;code&gt;src&lt;/code&gt; フォルダーのデフォルトパッケージにサーブレットクラス &lt;code&gt;servlet.java&lt;/code&gt; があります。 私の &lt;code&gt;web.xml&lt;/code&gt; では &lt;code&gt;/servlet&lt;/code&gt; としてマッピングされています 。</target>
        </trans-unit>
        <trans-unit id="7b026efd36d46f71c9e9788b132727e22de91d25" translate="yes" xml:space="preserve">
          <source>I have tried several URLs in &lt;code&gt;action&lt;/code&gt; attribute of the HTML form:</source>
          <target state="translated">HTMLフォームの &lt;code&gt;action&lt;/code&gt; 属性でいくつかのURLを試しました。</target>
        </trans-unit>
        <trans-unit id="2128fd1aeb196c7c595b9f0f63a2d44281130e7c" translate="yes" xml:space="preserve">
          <source>I removed the old web library such that are spring framework libraries. And build a new path of the libraries. Then it works.</source>
          <target state="translated">spring frameworkのライブラリなどの古いWebライブラリを削除して、新しいライブラリのパスを構築しました。そして、そのライブラリの新しいパスを構築する。そうすると動くようになります。</target>
        </trans-unit>
        <trans-unit id="0b0ec361526f3fb55ee9cd843135355cd165f672" translate="yes" xml:space="preserve">
          <source>I was met with:</source>
          <target state="translated">出会いがありました。</target>
        </trans-unit>
        <trans-unit id="8d76b9a8a4f4190e6f17b7541bade75e3dbc323e" translate="yes" xml:space="preserve">
          <source>If you would like to open a servlet with javascript without using 'form' and 'submit' button, here is the following code:</source>
          <target state="translated">フォーム」と「送信」ボタンを使わずにjavascriptでサーブレットを開きたい場合は、以下のコードになります。</target>
        </trans-unit>
        <trans-unit id="826ccc2a80cd946b9f6744f1565b7ae178c674d5" translate="yes" xml:space="preserve">
          <source>If you're using &lt;strong&gt;servlet-api 3.0+&lt;/strong&gt;, then your web.xml must &lt;strong&gt;NOT&lt;/strong&gt; include &lt;code&gt;metadata-complete=&quot;true&quot;&lt;/code&gt; attribute</source>
          <target state="translated">&lt;strong&gt;servlet-api 3.0+&lt;/strong&gt;を使用している場合、web.xmlに &lt;code&gt;metadata-complete=&quot;true&quot;&lt;/code&gt; 属性を含めないでください</target>
        </trans-unit>
        <trans-unit id="64a64e80a7621f7625ffed91e7422cefb2a3132f" translate="yes" xml:space="preserve">
          <source>If you're using eclipse:</source>
          <target state="translated">eclipseを使っているのであれば</target>
        </trans-unit>
        <trans-unit id="c2a716aaed49701515efc0063af77f8d9e04c1a0" translate="yes" xml:space="preserve">
          <source>In case of a &quot;plain&quot; IDE project, the class needs to be placed in its package structure inside &quot;Java Resources&quot; folder and thus &lt;em&gt;not&lt;/em&gt; &quot;WebContent&quot;, this is for web files such as JSP. Below is an example of the folder structure of a default Eclipse &lt;em&gt;Dynamic Web Project&lt;/em&gt; as seen in &lt;em&gt;Navigator&lt;/em&gt; view:</source>
          <target state="translated">「プレーン」IDEプロジェクトの場合、クラスは「Javaリソース」フォルダー内のパッケージ構造に配置する必要があり、「WebContent」では&lt;em&gt;なく&lt;/em&gt; 、JSPなどのWebファイル用です。 以下は、 &lt;em&gt;ナビゲーター&lt;/em&gt;ビューに表示されるデフォルトのEclipse &lt;em&gt;ダイナミックWebプロジェクト&lt;/em&gt;のフォルダー構造の例です。</target>
        </trans-unit>
        <trans-unit id="16455dacf1751280b4179ca601a2013475c5fd67" translate="yes" xml:space="preserve">
          <source>In case of a Maven project, the class needs to be placed in its package structure inside &lt;code&gt;main/java&lt;/code&gt;&lt;a href=&quot;https://stackoverflow.com/questions/31051494/how-to-link-a-css-resource-file-in-main-resources-in-jsp/&quot;&gt;and thus &lt;em&gt;not&lt;/em&gt; e.g. &lt;code&gt;main/resources&lt;/code&gt;, this is for non-class files&lt;/a&gt;.  Below is an example of the folder structure of a default Maven webapp project as seen in Eclipse's &lt;em&gt;Navigator&lt;/em&gt; view:</source>
          <target state="translated">Mavenプロジェクトの場合、クラスは &lt;code&gt;main/java&lt;/code&gt; 内のパッケージ構造に配置する必要があり&lt;a href=&quot;https://stackoverflow.com/questions/31051494/how-to-link-a-css-resource-file-in-main-resources-in-jsp/&quot;&gt;ます&lt;/a&gt; 。 たとえば &lt;code&gt;main/resources&lt;/code&gt; では&lt;em&gt;なく&lt;/em&gt; 、これは非クラスファイル用です 。 以下は、Eclipseの&lt;em&gt;ナビゲーター&lt;/em&gt;ビューに表示されるデフォルトのMaven webappプロジェクトのフォルダー構造の例です。</target>
        </trans-unit>
        <trans-unit id="ff35ed17d8053e6bdf018cf153378c4c20055b06" translate="yes" xml:space="preserve">
          <source>In case you want to support path parameters like &lt;code&gt;/servlet/foo/bar&lt;/code&gt;, then use an URL pattern of &lt;code&gt;/servlet/*&lt;/code&gt; instead. See also &lt;a href=&quot;https://stackoverflow.com/questions/8715474/servlet-and-path-parameters-like-xyz-value-test-how-to-map-in-web-xml&quot;&gt;Servlet and path parameters like /xyz/{value}/test, how to map in web.xml?&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;/servlet/foo/bar&lt;/code&gt; などのパスパラメータをサポートする場合は、代わりに &lt;code&gt;/servlet/*&lt;/code&gt; の URLパターンを使用します。 &lt;a href=&quot;https://stackoverflow.com/questions/8715474/servlet-and-path-parameters-like-xyz-value-test-how-to-map-in-web-xml&quot;&gt;/ xyz / {value} / testのようなサーブレットおよびパスパラメータ&lt;/a&gt;も参照してください。web.xmlでマッピングする方法は？</target>
        </trans-unit>
        <trans-unit id="f5e6dc43fe2e140234aa697ed5ab9a15dc43bac7" translate="yes" xml:space="preserve">
          <source>In case you're using a build tool such as Eclipse and/or Maven, then you need to make absolutely sure that the compiled servlet class file resides in its package structure in &lt;code&gt;/WEB-INF/classes&lt;/code&gt; folder of the produced WAR file. In case of &lt;code&gt;package com.example; public class YourServlet&lt;/code&gt;, it must be located in &lt;code&gt;/WEB-INF/classes/com/example/YourServlet.class&lt;/code&gt;. Otherwise you will face in case of &lt;code&gt;@WebServlet&lt;/code&gt; also a 404 error, or in case of &lt;code&gt;&amp;lt;servlet&amp;gt;&lt;/code&gt; a HTTP 500 error like below:</source>
          <target state="translated">EclipseやMavenなどのビルドツールを使用している場合は、コンパイルされたサーブレットクラスファイルが、生成されたWARファイルの &lt;code&gt;/WEB-INF/classes&lt;/code&gt; フォルダー内のパッケージ構造に存在することを完全に確認する必要があります。 &lt;code&gt;package com.example; public class YourServlet&lt;/code&gt; 場合; パブリッククラスYourServlet。/WEB-INF/classes/com/example/YourServlet.classに配置する必要があります。 そうしないと、 &lt;code&gt;@WebServlet&lt;/code&gt; 場合も404エラーが発生するか、 &lt;code&gt;&amp;lt;servlet&amp;gt;&lt;/code&gt; の場合は次のようなHTTP 500エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="c3776b58aca9b3b83cd6bc89a0922a51e663b6e8" translate="yes" xml:space="preserve">
          <source>In order to use &lt;code&gt;@WebServlet&lt;/code&gt;, you only need to make sure that your &lt;code&gt;web.xml&lt;/code&gt; file, if any (it's optional since Servlet 3.0), is declared conform Servlet 3.0+ version &lt;a href=&quot;https://stackoverflow.com/questions/6535676/webservlet-annotation-with-tomcat-7&quot;&gt;and thus &lt;em&gt;not&lt;/em&gt; conform e.g. 2.5 version or lower&lt;/a&gt;. Below is a Servlet 4.0 compatible one (which matches Tomcat 9+, WildFly 11+, Payara 5+, etc).</source>
          <target state="translated">&lt;code&gt;@WebServlet&lt;/code&gt; を使用するには、 &lt;code&gt;web.xml&lt;/code&gt; ファイルが存在する場合（それはServlet 3.0以降のオプションです）がServlet 3.0以降のバージョンに準拠して宣言されている&lt;a href=&quot;https://stackoverflow.com/questions/6535676/webservlet-annotation-with-tomcat-7&quot;&gt;ため&lt;em&gt;、&lt;/em&gt;たとえば2.5バージョン以下に準拠して&lt;em&gt;いない&lt;/em&gt;&lt;/a&gt;ことを確認する必要があります。 以下は、サーブレット4.0互換のものです（これは、Tomcat 9以降、WildFly 11以降、Payara 5以降などと一致します）。</target>
        </trans-unit>
        <trans-unit id="e0b13061987ce1a0299752af6f2180176aa8ed37" translate="yes" xml:space="preserve">
          <source>It should MATCH the package statement at top
   of your java servlet class.</source>
          <target state="translated">これはjavaサーブレットクラスの先頭にあるpackage文と一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="602da574311d6b74668cfac40e7422784f5b6c65" translate="yes" xml:space="preserve">
          <source>JSP in /WEB-INF returns &quot;HTTP Status 404 The requested resource is not available&quot;</source>
          <target state="translated">WEB-INF の JSP は &quot;HTTP Status 404 The requested resource is not available&quot; を返します。</target>
        </trans-unit>
        <trans-unit id="3dde4a1d30520701e0706973e522f1b1df66b25c" translate="yes" xml:space="preserve">
          <source>Key:</source>
          <target state="translated">Key:</target>
        </trans-unit>
        <trans-unit id="40d6d87f220a9098461946af8e6b257c8cb5e12c" translate="yes" xml:space="preserve">
          <source>Message /if-student-test.jsp</source>
          <target state="translated">メッセージ if-student-test.jsp</target>
        </trans-unit>
        <trans-unit id="fa2643e8f53f28b091b68cb59984a4eba5e113da" translate="yes" xml:space="preserve">
          <source>My issue was that my method was missing the @RequestBody annotation. After adding the annotation I no longer received the 404 exception.</source>
          <target state="translated">私の問題は、私のメソッドに @RequestBody アノテーションがないことでした。アノテーションを追加した後、404の例外を受け取らなくなりました。</target>
        </trans-unit>
        <trans-unit id="4732de65c5f504179c7a2f29b50a224abff9b32c" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;/jsps&lt;/code&gt; subfolder is not strictly necessary. You can even do without it and put the JSP file directly in webcontent/webapp root, but I'm just taking over this from your question.</source>
          <target state="translated">&lt;code&gt;/jsps&lt;/code&gt; サブフォルダーは必ずしも必要ではないことに注意してください。 それなしで、JSPファイルを直接webcontent / webappルートに配置することもできますが、私はこれをあなたの質問から引き継いでいます。</target>
        </trans-unit>
        <trans-unit id="11fbc1431e5877d984b55da44446d6982dcfe3a4" translate="yes" xml:space="preserve">
          <source>Note thus that you should not use both ways. Use either annotation based configuarion or XML based configuration. When you have both, then XML based configuration will override annotation based configuration.</source>
          <target state="translated">このように、両方の方法を使うべきではないことに注意してください。アノテーションベースの設定かXMLベースの設定のどちらかを使用してください。両方を使用した場合は、XMLベースの設定がアノテーションベースの設定を上書きします。</target>
        </trans-unit>
        <trans-unit id="9d8b6d68c2375883337cacab6312d97fcf719651" translate="yes" xml:space="preserve">
          <source>Once you've verified that the servlet works fine when invoked individually, then you can advance to HTML. As to your concrete problem with the HTML form, the &lt;code&gt;&amp;lt;form action&amp;gt;&lt;/code&gt; value needs to be a valid URL. The same applies to &lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt;. You need to understand how absolute/relative URLs work. You know, an URL is a web address as you can enter/see in the webbrowser's address bar. If you're specifying a relative URL as form action, i.e. without the &lt;code&gt;http://&lt;/code&gt; scheme, then it becomes relative to the &lt;em&gt;current&lt;/em&gt; URL as you see in your webbrowser's address bar. It's thus absolutely not relative to the JSP/HTML file location in server's WAR folder structure as many starters seem to think.</source>
          <target state="translated">サーブレットが個別に呼び出されたときに正常に機能することを確認したら、HTMLに進むことができます。 HTMLフォームに関する具体的な問題については、 &lt;code&gt;&amp;lt;form action&amp;gt;&lt;/code&gt; 値は有効なURLである必要があります。 同じことが &lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt; にも当てはまります。 絶対/相対URLがどのように機能するかを理解する必要があります。 ご存知のとおり、URLは、Webブラウザーのアドレスバーに入力/表示できるWebアドレスです。 相対URLをフォームアクションとして指定している場合、つまり &lt;code&gt;http://&lt;/code&gt; スキームを使用していない場合、Webブラウザーのアドレスバーに表示されるように、 &lt;em&gt;現在の&lt;/em&gt; URLに対して相対的になります。 したがって、多くの初心者が考えているように、サーバーのWARフォルダ構造内のJSP / HTMLファイルの場所とはまったく関係ありません。</target>
        </trans-unit>
        <trans-unit id="6426d5697a9127d6c1f5c7ade4affbb13ce539d3" translate="yes" xml:space="preserve">
          <source>Option 1: Via CTRL+C in terminal.</source>
          <target state="translated">オプション1:ターミナルのCTRL+Cを使用します。</target>
        </trans-unit>
        <trans-unit id="062defd9d90596eefeb7838ebf547f7f661523db" translate="yes" xml:space="preserve">
          <source>Option 2: (terminal closed while tomcat still running)</source>
          <target state="translated">オプション 2:(tomcat を起動したまま端末を閉じる)</target>
        </trans-unit>
        <trans-unit id="4ac70eaa5100912964a6ebed6468ae44ddea691c" translate="yes" xml:space="preserve">
          <source>Or as below in Tomcat 8.5/9:</source>
          <target state="translated">または、Tomcat 8.59で以下のように。</target>
        </trans-unit>
        <trans-unit id="7cd26a2167ab4253bb488cefa2f1a89dbd565438" translate="yes" xml:space="preserve">
          <source>Or, in case you're not on Servlet 3.0+ yet (e.g. Tomcat 6 or older), then remove the &lt;code&gt;@WebServlet&lt;/code&gt; annotation.</source>
          <target state="translated">または、まだServlet 3.0以降を使用していない場合（Tomcat 6以前など）、 &lt;code&gt;@WebServlet&lt;/code&gt; アノテーションを削除します。</target>
        </trans-unit>
        <trans-unit id="2f7c23ff79bfe10c71b5faffadc0852d17917c01" translate="yes" xml:space="preserve">
          <source>Other cases of HTTP Status 404 error:</source>
          <target state="translated">その他、HTTPステータス404エラーの場合。</target>
        </trans-unit>
        <trans-unit id="98f890d5c61e3d745874acbdbbdc8acd3806dc0a" translate="yes" xml:space="preserve">
          <source>Overriding &lt;code&gt;service()&lt;/code&gt; is a bad practice, unless you're reinventing a MVC framework &amp;mdash; which is very unlikely if you're just starting out with servlets and are clueless as to the problem described in the current question ;) See also &lt;a href=&quot;https://stackoverflow.com/questions/3541077/design-patterns-web-based-applications&quot;&gt;Design Patterns web based applications&lt;/a&gt;.</source>
          <target state="translated">MVCフレームワークを再発明しない限り、 &lt;code&gt;service()&lt;/code&gt; をオーバーライドすることはお勧めできません。これは、サーブレットから始めたばかりで、現在の質問で説明されている問題について無知である場合は非常に考えにくいです。） &lt;a href=&quot;https://stackoverflow.com/questions/3541077/design-patterns-web-based-applications&quot;&gt;Design Patterns web&lt;/a&gt;も参照してください。 ベースのアプリケーション 。</target>
        </trans-unit>
        <trans-unit id="57c3cb2f346fbde46274710b2fbc2254761b178e" translate="yes" xml:space="preserve">
          <source>Please check &lt;strong&gt;context root cannot be empty&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;コンテキストルートは空にできません&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="cdb5a225b2291e963ed22d566cf481d7bb0cee1e" translate="yes" xml:space="preserve">
          <source>Project-&amp;gt;Properties</source>
          <target state="translated">Project-&amp;gt;Properties</target>
        </trans-unit>
        <trans-unit id="62dab2cda53ef921f019e178ae490c03981f4165" translate="yes" xml:space="preserve">
          <source>Provided that the server runs on &lt;code&gt;localhost:8080&lt;/code&gt;, and that the WAR is successfully deployed on a context path of &lt;code&gt;/contextname&lt;/code&gt; (which defaults to the IDE project name, case sensitive!), and the servlet hasn't failed its initialization (read server logs for any deploy/servlet success/fail messages and the actual context path and servlet mapping), then a servlet with URL pattern of &lt;code&gt;/servlet&lt;/code&gt; is available at &lt;code&gt;http://localhost:8080/contextname/servlet&lt;/code&gt;.</source>
          <target state="translated">サーバーが &lt;code&gt;localhost:8080&lt;/code&gt; で実行され、WARが &lt;code&gt;/contextname&lt;/code&gt; のコンテキストパス（デフォルトではIDEプロジェクト名、大文字と小文字が区別されます）に正常にデプロイされ、サーブレットがその初期化に失敗しなかった場合（サーバーの読み取り）デプロイ/サーブレットの成功/失敗メッセージと実際のコンテキストパスとサーブレットマッピングのログ）、 &lt;code&gt;/servlet&lt;/code&gt; の URLパターンを持つサーブレットは &lt;code&gt;http://localhost:8080/contextname/servlet&lt;/code&gt; で入手できます 。</target>
        </trans-unit>
        <trans-unit id="73b5e5046b075f91b6f2fe24bb2ed1957afe42b4" translate="yes" xml:space="preserve">
          <source>Put servlet class in a &lt;code&gt;package&lt;/code&gt;</source>
          <target state="translated">サーブレットクラスを &lt;code&gt;package&lt;/code&gt; 入れる</target>
        </trans-unit>
        <trans-unit id="5568fdb53e25ae4416fc2545d5e28bd53e284133" translate="yes" xml:space="preserve">
          <source>Referencing a resource placed in WEB-INF folder in JSP file returns HTTP 404 on resource</source>
          <target state="translated">JSP ファイル内の WEB-INF フォルダに配置されたリソースを参照すると、リソースに対して HTTP 404 を返します。</target>
        </trans-unit>
        <trans-unit id="6e3f489457cb12f528643917e67862c5e12e0760" translate="yes" xml:space="preserve">
          <source>Referencing the servlet URL from HTML</source>
          <target state="translated">HTMLからサーブレットのURLを参照する</target>
        </trans-unit>
        <trans-unit id="35aa6c866df5f0b6ac9bf88682cfd26cd43db13f" translate="yes" xml:space="preserve">
          <source>Regardless, if the servlet already returns 404 when tested invidivually, then it's entirely pointless to try with a HTML form instead. Logically, it's therefore also entirely pointless to include any HTML form in questions about 404 errors from a servlet.</source>
          <target state="translated">それにもかかわらず、サーブレットが既にインビジブルでテストしたときに404を返すのであれば、代わりにHTMLフォームで試すことは全く無意味です。論理的には、サーブレットからの404エラーに関する質問にHTMLフォームを含めることも全く無意味です。</target>
        </trans-unit>
        <trans-unit id="f53596244482f9f5792bb33ee73875f10b4ad841" translate="yes" xml:space="preserve">
          <source>Relative URL:/index.jsp (Select your project root URL)</source>
          <target state="translated">相対URL:index.jsp (プロジェクトのルートURLを選択)</target>
        </trans-unit>
        <trans-unit id="5341c2fa1daf0efe21a1084d8ede866682363b04" translate="yes" xml:space="preserve">
          <source>SCENARIO 3.1:
   The servlet-class package path is wrong 
   in your web.xml file.</source>
          <target state="translated">SCENARIO 3.1:web.xmlファイル内のサーブレットクラスのパッケージパスが間違っています。</target>
        </trans-unit>
        <trans-unit id="d91a5bae37231d9132359913b96ed650c4198a3f" translate="yes" xml:space="preserve">
          <source>SCENARIO 3.2:</source>
          <target state="translated">SCENARIO 3.</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="7bee870fcf57250e43a224283a02d460632eba3e" translate="yes" xml:space="preserve">
          <source>Servlet returns “HTTP Status 404 The requested resource (/servlet) is not available”</source>
          <target state="translated">サーブレットは「HTTP Status 404 The requested resource (servlet)is not available」を返します。</target>
        </trans-unit>
        <trans-unit id="6e3f50e169cb28fbd8bd38a999b28e350e42f508" translate="yes" xml:space="preserve">
          <source>Set servlet URL in &lt;code&gt;url-pattern&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;url-pattern&lt;/code&gt; にサーブレットURLを設定する</target>
        </trans-unit>
        <trans-unit id="818ee04886fc44a80bd434b6b4b528c2d8c15594" translate="yes" xml:space="preserve">
          <source>Short Answer #3.1: web.xml has wrong package path in servlet-class tag.</source>
          <target state="translated">Short Answer #3.1:web.xmlのservlet-classタグのパッケージパスが間違っています。</target>
        </trans-unit>
        <trans-unit id="43aeda9277558256b50cb345d93cae30d1647932" translate="yes" xml:space="preserve">
          <source>Short Answer #3.2: java file has wrong import statement.</source>
          <target state="translated">Short Answer #3.2:javaファイルのインポート文が間違っています。</target>
        </trans-unit>
        <trans-unit id="b8b5988ed8fde03ef8fc5b1e80fd87981be3a6d1" translate="yes" xml:space="preserve">
          <source>So, assuming that the JSP page with the HTML form is opened by &lt;code&gt;http://localhost:8080/contextname/jsps/page.jsp&lt;/code&gt;, and you need to submit to a servlet located in &lt;code&gt;http://localhost:8080/contextname/servlet&lt;/code&gt;, here are several cases (note that you can safely substitute &lt;code&gt;&amp;lt;form action&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt; here):</source>
          <target state="translated">したがって、HTMLフォームを含むJSPページが &lt;code&gt;http://localhost:8080/contextname/jsps/page.jsp&lt;/code&gt; によって開かれ、 http：// localhost：8080 / contextname /にあるサーブレットに送信する必要があると仮定します。 &lt;code&gt;http://localhost:8080/contextname/servlet&lt;/code&gt; 、ここにいくつかのケースがあります （ここで &lt;code&gt;&amp;lt;form action&amp;gt;&lt;/code&gt; を &lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt; で安全に置き換えることができることに注意してください）：</target>
        </trans-unit>
        <trans-unit id="d44f3e54ebe2b7593f583855b07e5d2cb2ffc8e7" translate="yes" xml:space="preserve">
          <source>Solution for &lt;code&gt;HTTP Status 404&lt;/code&gt; in NetBeans IDE:
Right click on your project and go to your project properties, then click on run, then input your project relative URL like &lt;code&gt;index.jsp&lt;/code&gt;.</source>
          <target state="translated">NetBeans IDEの &lt;code&gt;HTTP Status 404&lt;/code&gt; 解決策：プロジェクトを右クリックしてプロジェクトのプロパティに移動し、[実行]をクリックして、 &lt;code&gt;index.jsp&lt;/code&gt; のようなプロジェクトの相対URLを入力します。</target>
        </trans-unit>
        <trans-unit id="46c32fffc86d47e759671318daf6f5e89dae6c1d" translate="yes" xml:space="preserve">
          <source>Stack Used:
&lt;strong&gt;Notepad++&lt;/strong&gt; + &lt;strong&gt;GitBash&lt;/strong&gt; + &lt;strong&gt;Maven&lt;/strong&gt; + &lt;strong&gt;Heroku Web App Runner&lt;/strong&gt; + &lt;strong&gt;Tomcat9&lt;/strong&gt; + &lt;strong&gt;Windows10&lt;/strong&gt;:</source>
          <target state="translated">使用スタック： &lt;strong&gt;Notepad ++&lt;/strong&gt; + &lt;strong&gt;GitBash&lt;/strong&gt; + &lt;strong&gt;Maven&lt;/strong&gt; + &lt;strong&gt;Heroku Web App Runner&lt;/strong&gt; + &lt;strong&gt;Tomcat9&lt;/strong&gt; + &lt;strong&gt;Windows10&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="1a95b9b1f565e84ca30888994360f0d92f92a3c5" translate="yes" xml:space="preserve">
          <source>Step 1: &lt;code&gt;Right click on the server(in the server explorer tab)-&amp;gt;Properties-&amp;gt;Switch Location from workspace metadata to tomcat server&lt;/code&gt;</source>
          <target state="translated">手順1： &lt;code&gt;Right click on the server(in the server explorer tab)-&amp;gt;Properties-&amp;gt;Switch Location from workspace metadata to tomcat server&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af361a11d51d530a8a5348323f6436030b19a567" translate="yes" xml:space="preserve">
          <source>Step 2: &lt;code&gt;Double Click on the server(in the server explorer tab)-&amp;gt;Select Use tomcat installation option inside server location menu&lt;/code&gt;</source>
          <target state="translated">ステップ2： &lt;code&gt;Double Click on the server(in the server explorer tab)-&amp;gt;Select Use tomcat installation option inside server location menu&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1a560218f7c9b5ce0b96d555977f73e611be412c" translate="yes" xml:space="preserve">
          <source>Testing the servlet individually</source>
          <target state="translated">サーブレットを個別にテストする</target>
        </trans-unit>
        <trans-unit id="4ea5b78cab6de407e47a3117d5145471f09ff2ed" translate="yes" xml:space="preserve">
          <source>The canonical approach, however, is to make the URL domain-relative so that you don't need to fix the URLs once again when you happen to move the JSP files around into another folder.</source>
          <target state="translated">しかし、定型的なアプローチは、JSPファイルを別のフォルダに移動したときに、再度URLを修正する必要がないように、URLをドメイン関連にすることです。</target>
        </trans-unit>
        <trans-unit id="74f0d205563e043b0246eff6cee722e3c477b2a6" translate="yes" xml:space="preserve">
          <source>The fix that worked for me is(if you are using Maven): Rightclick your project, Maven -&amp;gt; Update project. This might give you some other error with the JDK and other Libraries(in my case, MySQL connector), but once you fix them, your original problem should be fixed!</source>
          <target state="translated">私にとってうまくいった修正は（Mavenを使用している場合）：プロジェクトを右クリックし、[Maven]-&amp;gt; [プロジェクトの更新]をクリックします。 これにより、JDKおよびその他のライブラリ（私の場合はMySQLコネクタ）で他のエラーが発生する可能性がありますが、修正すると、元の問題が修正されます。</target>
        </trans-unit>
        <trans-unit id="b6ae81cdeca4e90823920b5669278c0db301ea2d" translate="yes" xml:space="preserve">
          <source>The leading slash &lt;code&gt;/&lt;/code&gt; makes the URL relative to the domain, thus the form will submit to</source>
          <target state="translated">先頭のスラッシュ &lt;code&gt;/&lt;/code&gt; は、ドメインに関連するURLを作成するため、フォームは</target>
        </trans-unit>
        <trans-unit id="1f34c385be50e8146dab2bac04989a09654b3ba1" translate="yes" xml:space="preserve">
          <source>The servlet URL is specified as the &quot;URL pattern&quot; of the servlet mapping. It's absolutely not per definition the classname/filename of the servlet class. The URL pattern is to be specified as value of &lt;code&gt;@WebServlet&lt;/code&gt; annotation.</source>
          <target state="translated">サーブレットURLは、サーブレットマッピングの「URLパターン」として指定されます。 これは、サーブレットクラスのクラス名/ファイル名の定義ではありません。 URLパターンは &lt;code&gt;@WebServlet&lt;/code&gt; アノテーションの値として指定されます。</target>
        </trans-unit>
        <trans-unit id="a09ccb4e544c5c4a336b64f56412fd874742c07f" translate="yes" xml:space="preserve">
          <source>This is tricky because:</source>
          <target state="translated">これが厄介なのは</target>
        </trans-unit>
        <trans-unit id="4fa2de0733634d2479b27648d7a5fb6f21ea0cec" translate="yes" xml:space="preserve">
          <source>This makes the URL relative to the current folder of the current URL, thus the form will submit to</source>
          <target state="translated">これは、URLを現在のURLの現在のフォルダに相対化するので、フォームの送信先は</target>
        </trans-unit>
        <trans-unit id="3f0cef6c4c4ded34809202e3145fd89a65bc9493" translate="yes" xml:space="preserve">
          <source>This one must work!</source>
          <target state="translated">これは効くに違いない!</target>
        </trans-unit>
        <trans-unit id="5ff78129ac7c61c334dfbc708c2a651ec2e1d12a" translate="yes" xml:space="preserve">
          <source>This tells tomcat to map the servlets using data given in &lt;code&gt;web.xml&lt;/code&gt; instead of using the &lt;code&gt;@WebServlet&lt;/code&gt; annotation.</source>
          <target state="translated">これは、 &lt;code&gt;@WebServlet&lt;/code&gt; アノテーションを使用する代わりに、 &lt;code&gt;web.xml&lt;/code&gt; で指定されたデータを使用してサーブレットをマップするようtomcatに指示します。</target>
        </trans-unit>
        <trans-unit id="d2aba27c5552952ab7d1a5d1902d49d00abe64b4" translate="yes" xml:space="preserve">
          <source>This will generate</source>
          <target state="translated">を生成します。</target>
        </trans-unit>
        <trans-unit id="0d00e06ed0962b80e70f5bc84648842096261bb8" translate="yes" xml:space="preserve">
          <source>This will go one folder up (exactly like as in local disk file system paths!), thus the form will submit to</source>
          <target state="translated">これは一つ上のフォルダに移動します (ローカルディスクのファイルシステムのパスと全く同じです!)。</target>
        </trans-unit>
        <trans-unit id="1842188b9685486c0c9ca74072c0954dd0cffef4" translate="yes" xml:space="preserve">
          <source>Use straight quotes in HTML</source>
          <target state="translated">HTMLでストレートクォートを使用する</target>
        </trans-unit>
        <trans-unit id="cd0907a941d96e172572e31f7c0600a173ef314e" translate="yes" xml:space="preserve">
          <source>Verifying the build/deployment</source>
          <target state="translated">builddeploymentの検証</target>
        </trans-unit>
        <trans-unit id="41b63a88ae448998dd95072234e4c014ca451144" translate="yes" xml:space="preserve">
          <source>Which will thus always submit to the right URL.</source>
          <target state="translated">これにより、常に正しいURLに送信されます。</target>
        </trans-unit>
        <trans-unit id="e768a8549b0c793a529e4e4ca97fbdb2e521d975" translate="yes" xml:space="preserve">
          <source>Why is it not working?</source>
          <target state="translated">なぜ機能しないのか?</target>
        </trans-unit>
        <trans-unit id="1dfd44e035f4516c0267241d9eaea4bc96f2d81f" translate="yes" xml:space="preserve">
          <source>You can just enter it straight in browser's address bar to test it invidivually. If its &lt;code&gt;doGet()&lt;/code&gt; is properly overriden and implemented, then you will see its output in browser. Or if you don't have any &lt;code&gt;doGet()&lt;/code&gt; or if it incorrectly calls &lt;code&gt;super.doGet()&lt;/code&gt;, then a &quot;&lt;a href=&quot;https://stackoverflow.com/questions/5370633/405-http-method-get-is-not-supported-by-this-url&quot;&gt;HTTP 405: HTTP method GET is not supported by this URL&lt;/a&gt;&quot; error will be shown (which is still better than a 404 as a 405 is evidence that the servlet itself is actually found).</source>
          <target state="translated">ブラウザのアドレスバーに直接入力して、個別にテストできます。 &lt;code&gt;doGet()&lt;/code&gt; が適切にオーバーライドおよび実装されている場合は、ブラウザに出力が表示されます。 または、 &lt;code&gt;doGet()&lt;/code&gt; がない場合、または &lt;code&gt;super.doGet()&lt;/code&gt; を誤って呼び出す場合は、「 &lt;a href=&quot;https://stackoverflow.com/questions/5370633/405-http-method-get-is-not-supported-by-this-url&quot;&gt;HTTP 405：HTTPメソッドGETはこのURL&lt;/a&gt;ではサポートされていません 」というエラーが表示されます（404よりも優れています） 405は、サーブレット自体が実際に見つかった証拠です。</target>
        </trans-unit>
        <trans-unit id="744d79c2e7bad54404f2e8909c0a8e61ec6626cb" translate="yes" xml:space="preserve">
          <source>You mistakenly write:</source>
          <target state="translated">勘違いして書いてますね。</target>
        </trans-unit>
        <trans-unit id="cb81b7589d8522d369ca3b39cb76b0c289c9274e" translate="yes" xml:space="preserve">
          <source>You need to make absolutely sure you're using straight quotes in HTML attributes like &lt;code&gt;action=&quot;...&quot;&lt;/code&gt; or &lt;code&gt;action='...'&lt;/code&gt; and thus &lt;em&gt;not&lt;/em&gt; curly quotes like &lt;code&gt;action=&amp;rdquo;...&amp;rdquo;&lt;/code&gt; or &lt;code&gt;action=&amp;rsquo;...&amp;rsquo;&lt;/code&gt;. Curly quotes are not supported in HTML and they will simply become part of the value.</source>
          <target state="translated">&lt;code&gt;action=&quot;...&quot;&lt;/code&gt; や &lt;code&gt;action='...'&lt;/code&gt; のようなHTML属性でストレート引用符を使用し、 action =&amp;rdquo; ...&amp;rdquo;やaction = 'のような中かっこで囲ま&lt;em&gt;ない&lt;/em&gt;ようにしてください &lt;code&gt;action=&amp;rsquo;...&amp;rsquo;&lt;/code&gt; 中括弧はHTMLではサポートされておらず、単に値の一部になります。</target>
        </trans-unit>
        <trans-unit id="773029b9865107a6cae0e5e0a4ae6a98413d4f43" translate="yes" xml:space="preserve">
          <source>You put the wrong &quot;&lt;strong&gt;package&lt;/strong&gt;&quot; statement
   at top of your myClass.java file.</source>
          <target state="translated">myClass.javaファイルの先頭に間違った「 &lt;strong&gt;package&lt;/strong&gt; 」ステートメントを配置しました。</target>
        </trans-unit>
        <trans-unit id="27b38379d7aa8c77c508d949568e595f1a9f5575" translate="yes" xml:space="preserve">
          <source>doGet and doPost in Servlets</source>
          <target state="translated">サーブレットのdoGetとdoPost</target>
        </trans-unit>
        <trans-unit id="4e6ad51fdf1deb39a696c3baf282e0282a222547" translate="yes" xml:space="preserve">
          <source>java -jar target/dependency/webapp-runner.jar --port 5190 target/*.war</source>
          <target state="translated">java -jar targetdependencywebapp-runner.jar --port 5190 target*.war</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
