<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/6827752">
    <body>
      <group id="6827752">
        <trans-unit id="c52bb2477a9cac0236f8c69a02e58e30e1dca449" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; only scans &lt;code&gt;@Component&lt;/code&gt; and does not look for &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt; and &lt;code&gt;@Repository&lt;/code&gt; in general. They are scanned because they themselves are annotated with &lt;code&gt;@Component&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 만 스캔 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하며 일반적으로 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;찾지 않습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 로 주석이 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;달렸&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 기 때문에 스캔 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c0a46bb7fbef933e5b2ac6ddf73b73c53e57521c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Autowired&lt;/code&gt; - Let Spring auto-wire other beans into your classes using @Autowired annotation.</source>
          <target state="translated">&lt;code&gt;@Autowired&lt;/code&gt; -@&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Autowired 어노테이션을 사용하여 Spring이 다른 bean을 클래스에 자동 와이어 링하도록하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4bc7bd8bd6588b120c74696f648e62dc842860f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Component&lt;/code&gt; - Annotate your other components (for example REST resource classes) with a component stereotype.</source>
          <target state="translated">&lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Component-컴포넌트 스테레오 타입으로 다른 컴포넌트 (예 : REST 자원 클래스)에 주석을 답니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f60b2f1e94f9c7d209679c9203afa153d9aa612a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Component&lt;/code&gt; - Annotate your other components (for example REST resource classes) with component stereotype.</source>
          <target state="translated">&lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Component-컴포넌트 스테레오 타입으로 다른 컴포넌트 (예 : REST 자원 클래스)에 주석을 답니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d27eada60b5a322fd96c7024833dd0f559a9929d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Component&lt;/code&gt; = Actual Components ( Beans )</source>
          <target state="translated">&lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; = 실제 구성 요소 (콩)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c962e54fcc2f756b514e4c953c8635938eddef70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Component&lt;/code&gt; is a generic stereotype for any Spring-managed component. &lt;code&gt;@Repository&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, and &lt;code&gt;@Controller&lt;/code&gt; are specializations of &lt;code&gt;@Component&lt;/code&gt; for more specific use cases, for example, in the persistence, service, and presentation layers, respectively.</source>
          <target state="translated">&lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 Spring 관리 컴포넌트의 일반적인 스테레오 타입입니다. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;각각 지속성, 서비스 및 프리젠 테이션 계층과 같은보다 구체적인 사용 사례에 대한 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 전문화 영역입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a86102aa2acb8d184a67117632ec2f5f96e461e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Component&lt;/code&gt; is the top level generic annotation which makes the annotated bean to be scanned and available in the DI container</source>
          <target state="translated">&lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 주석이 달린 빈을 스캔하여 DI 컨테이너에서 사용할 수있게하는 최상위 일반 주석입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="53d51bed880db024f2154f22c00ca38294357d40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Component&lt;/code&gt;: It is a basic auto component scan annotation, it indicates annotated class is an auto scan component.</source>
          <target state="translated">&lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 기본 자동 컴포넌트 스캔 주석이며 주석이 달린 클래스가 자동 스캔 컴포넌트임을 나타냅니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a85c783976ded2ec7bf340636fcbf94c846af9e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller:&lt;/code&gt; where your &lt;strong&gt;request&lt;/strong&gt;&lt;strong&gt;mapping from presentation page&lt;/strong&gt; done i.e. Presentation layer won't go to any other file it goes directly to &lt;code&gt;@Controller&lt;/code&gt; class and checks for requested path in &lt;code&gt;@RequestMapping&lt;/code&gt; annotation which written before method calls if necessary.</source>
          <target state="translated">&lt;code&gt;@Controller:&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 귀하의 경우 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;요청 &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프리젠 테이션 페이지에서 매핑&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 프리젠 테이션 층, 즉 수행이가 직접 이동 다른 파일로 이동하지 않습니다 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; 의&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 요청 경로를 클래스와 검사 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 필요한 경우 메서드 호출 이전에 작성된 주석.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="42bdae02eaf700513be4523a71747e53f7a3713e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller&lt;/code&gt; -&amp;gt; Classes annotated with this, are intended to receive a request from the client side. The first request comes to the Dispatcher Servlet, from where it passes the request to the particular controller using the value of &lt;code&gt;@RequestMapping&lt;/code&gt; annotation.</source>
          <target state="translated">&lt;code&gt;@Controller&lt;/code&gt; -&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;gt; 이것으로 주석이 달린 클래스는 클라이언트 측에서 요청을 받기위한 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;첫 번째 요청은 Dispatcher Servlet으로옵니다. 여기서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 주석 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 값을 사용하여 요청을 특정 컨트롤러에 전달합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1e287e07020b7f5854ebd49f7b8fe81dbef2fb61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller&lt;/code&gt; = @Component ( Internal Annotation ) + Presentation layer Features</source>
          <target state="translated">&lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; = @Component (내부 주석) + 프리젠 테이션 레이어 기능&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="51e8f89f260fc43722b23090ae1ac2abb49a46dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller&lt;/code&gt; beans are used by spring-mvc</source>
          <target state="translated">&lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Bean은 spring-mvc에서 사용됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ebc68bedd3b3269aebc658ea919ace4c2ba2c5e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller&lt;/code&gt; is used to mark classes as Spring MVC Controller. This
annotation is just a specialized version of &lt;code&gt;@Component&lt;/code&gt; and it
allows the controller classes to be auto-detected based on classpath
scanning.</source>
          <target state="translated">&lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 클래스를 Spring MVC Controller로 표시하는 데 사용됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 주석은 특수화 된 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 버전이며 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;클래스 경로 스캔을 기반으로 컨트롤러 클래스를 자동 감지 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="60acfe2763e013acff10de2e90dc737721af301d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller&lt;/code&gt; you can return a view in Spring web MVC.</source>
          <target state="translated">&lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 당신은 Spring web MVC에서 뷰를 반환 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1867322fce2cf8c6945fe5c011aae47dc3614e97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller&lt;/code&gt;: Annotated class indicates that it is a controller component, and mainly used at the presentation layer.</source>
          <target state="translated">&lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Annotated 클래스는 컨트롤러 컴포넌트이며 주로 프리젠 테이션 레이어에서 사용됨을 나타냅니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="755f30ff16842ff20dc3434aef8ec3f81ac01294" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt; - Annotate all your DAO classes with @Repository. All your database access logic should be in DAO classes.</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; -&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 모든 DAO 클래스에 @Repository로 주석을 답니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 데이터베이스 액세스 로직은 DAO 클래스에 있어야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6435804414b2b59a17da073be0c6c40aee98bcb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt; -&amp;gt; Classes annotated with this, are intended to connect with database. It can also be considered as DAO(Data Access Object) layer. This layer should be restricted to CRUD (create, retrieve, update, delete) operations only.
If any manipulation is required, data should be sent be send back to @Service layer.</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; -&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;gt; 이것으로 주석이 달린 클래스는 데이터베이스에 연결하기위한 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DAO (Data Access Object) 레이어로 간주 될 수도 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 계층은 CRUD (만들기, 검색, 업데이트, 삭제) 작업으로 만 제한되어야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;조작이 필요한 경우 데이터를 @Service 계층으로 다시 보내야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7f0db2ae59ef409d76fc1ebc571b3ccadeeeb808" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt; = @Component ( Internal Annotation ) + Data Layer Features ( use for handling the Domain Beans )</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; = @Component (내부 주석) + 데이터 계층 기능 (도메인 Bean 처리에 사용)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="75f13022996e28a8ab5fca548f247847bf7f3ca1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt; annotation will add some functionality to your bean (some automatic exception translation to your bean persistence layer).</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 주석은 Bean에 일부 기능을 추가합니다 (일부 자동 예외는 Bean 지속성 계층으로 변환).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="efe183c2a1873030970b25581ebc3552dca4d171" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt; beans are eligible for persistence exception translation</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Bean은 지속성 예외 변환에 적합합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7f44b3951a7fab8002b541c86593b0e72bbe5364" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt; is specialized annotation and it brings the feature of converting all the unchecked exceptions from the DAO classes</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 특수 주석이며 DAO 클래스에서 확인되지 않은 모든 예외를 변환하는 기능을 제공합니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3354d3ec0c176e3f31600d85600a2011385ca78b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt;: This is Persistence layer(Data Access Layer) of application which used to get data from the database. i.e. &lt;strong&gt;all the Database related operations are done by the repository.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 데이터베이스에서 데이터를 가져 오는 데 사용되는 애플리케이션의 Persistence layer (Data Access Layer)입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;즉, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 데이터베이스 관련 작업은 리포지토리에서 수행됩니다.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9acd254fd2bbf9f9bc57bc5af90b23eddd3bc958" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt;: You need to use this annotation within the persistence layer, this acts like database repository.</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 퍼시스턴스 레이어 내에서이 주석을 사용해야합니다. 이것은 데이터베이스 리포지토리처럼 작동합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="90be53f5cbdd981a8c2355b766d9fff306b6775a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@RestController&lt;/code&gt; also converts the response to &lt;code&gt;JSON/XML automatically&lt;/code&gt; as &lt;code&gt;@ResponseBody&lt;/code&gt; makes the returned objects to something that could be in the body, &lt;code&gt;e.g. JSON or XML&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@RestController&lt;/code&gt; 은&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 또한에 대한 응답으로 변환 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;JSON/XML automatically&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 로 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@ResponseBody&lt;/code&gt; 가&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 몸에있을 수있는 일에 반환 된 객체를 만드는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;e.g. JSON or XML&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd9ce01b50aaf96a042df6119c17a292c30ebb61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt; - Annotate all your service classes with @Service. This layer knows the unit of work. All your business logic will be in Service classes. Generally methods of service layer are covered under transaction. You can make multiple DAO calls from service method, if one transaction fails all transactions should rollback.</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; -&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 모든 서비스 클래스에 @Service로 주석을 답니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 계층은 작업 단위를 알고 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 비즈니스 로직은 서비스 클래스에 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;일반적으로 서비스 계층의 방법은 트랜잭션에 포함됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;한 트랜잭션이 실패하면 모든 트랜잭션이 롤백되어야합니다. 서비스 메소드에서 여러 DAO 호출을 수행 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="65f7a4157131313ba9d9c7de0c0c2ec078d920ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt; -&amp;gt; Classes annotated with this, are intended to manipulate data, that we receive from the client or fetch from the database. All the manipulation with data should be done in this layer.</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; -&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;gt; 이것으로 주석이 달린 클래스는 클라이언트에서 받거나 데이터베이스에서 가져 오는 데이터를 조작하기위한 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;데이터에 대한 모든 조작은이 계층에서 수행해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="57f5d1af5bcd96d8cf4535d91fa857ae7afca44d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt; = @Component ( Internal Annotation ) + Service layer Features</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; = @Component (내부 주석) + 서비스 계층 기능&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed4dc909a6dc9f48489b83955476a753cfb55340" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt; beans hold the business logic and call methods in the repository layer.</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Bean은 저장소 계층에서 비즈니스 로직 및 호출 메소드를 보유합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="17a69c480a6a788c48c3fc84d2577526d41ced15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt; is specialized annotation. it do not bring any new feature as of now but it clarifies the intent of the bean</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 특수 주석입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;현재로서는 새로운 기능을 제공하지 않지만 Bean의 의도를 분명히합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a3e80f101ac8ba58423611e9a359db720a6cddb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt;: All business logic is here i.e. Data related calculations and all.This annotation of business layer in which our user not directly call persistence method so it will call this method using this annotation. &lt;strong&gt;It will request @Repository as per user request&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 모든 비즈니스 로직은 여기에 있습니다. 즉 데이터 관련 계산 및 모두. 사용자가 퍼시스턴스 메소드를 직접 호출하지 않으므로이 주석을 사용하여이 메소드를 호출하는 비즈니스 계층의 주석입니다. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용자 요청에 따라 @Repository를 요청합니다.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a1c1d2514399a89419fa8c725118147960f9a19d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt;: It indicates annotated class is a Service component in the business layer.</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 어노테이션이있는 클래스가 비즈니스 계층의 서비스 컴포넌트임을 나타냅니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f869cdae24718975bd86c139b1a4cf4ab5f8872a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Above mentioned is one very common scenario, there are many more use cases of why to use three annotations.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위에서 언급 한 매우 일반적인 시나리오는 세 가지 주석을 사용해야하는 경우가 더 많다는 것입니다.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e271c23aaca1c5d21764465c2548e1b0ba0791c5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Repository&lt;/em&gt; and &lt;em&gt;Service&lt;/em&gt; are children of &lt;em&gt;Component&lt;/em&gt; annotation. So, all of them are &lt;em&gt;Component&lt;/em&gt;. &lt;em&gt;Repository&lt;/em&gt; and &lt;em&gt;Service&lt;/em&gt; just expand it. 
How exactly?
&lt;em&gt;Service&lt;/em&gt; has only ideological difference: we use it for services. &lt;em&gt;Repository&lt;/em&gt; has particular exception handler.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;리포지토리&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;서비스&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;구성 요소&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 주석의 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하위입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그래서 그것들은 모두 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Component&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 입니다. &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;리포지토리&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;서비스&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 확장되었습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;정확히 어떻게? &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;서비스&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 이념적으로 만 차이가 있습니다. 서비스를 위해 서비스를 사용합니다. &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;리포지토리&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에는 특정 예외 처리기가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ae222d32c4733e99013c09b00a14f25cb9fd89f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;@Controller&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;@Controller&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fe5c6f1fd0c4469ec22b1b64df1d3f9ce7148e34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;@Controller&lt;/code&gt;&lt;/strong&gt; vs &lt;strong&gt;&lt;code&gt;RestController&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대&lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;RestController&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d02dda508b6792bef5b289438aab0dae9f34a654" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;@RestController&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;@RestController&lt;/code&gt;&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="24d9897af3ded3ed27b764d17d671273337c87e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;What else?&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또 뭐요?&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02b386ae3ef0df690e5ff6fbaf501f2daa6c5f59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;What&amp;rsquo;s special about @Component&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component의 특별한 점&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3db920e461fbae37694bbd0baa0837165ffcd644" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;What&amp;rsquo;s special about @Controller?&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Controller의 특별한 점은 무엇입니까?&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c947974b0ed3abe583c5d614ea1dae412c1bfd7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;What&amp;rsquo;s special about @Repository?&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository의 특별한 점은 무엇입니까?&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="44531a49d4e8b2e827b3cb7707c16eb31eb8085f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;What&amp;rsquo;s special about @Service?&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service의 특별한 점은 무엇입니까?&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="01ccc260c2cb635c23e720d73b05ea5f97b7093a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Component&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@Component&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d71c877c3a78adec6503e4663386504304e2102d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Component&lt;/strong&gt; acts as @Bean annotation in configuration class , register bean in spring context. Also it is parent for @Service, @Repository and @Controller annotation.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 구성 클래스에서 @Bean 주석으로 작동하고 스프링 컨텍스트에서 Bean을 등록합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 @Service, @Repository 및 @Controller 주석의 부모입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="68a54727ad6cec624faf6b13c4382e35a8734254" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Component&lt;/strong&gt;: you annotate a class &lt;code&gt;@Component&lt;/code&gt;, it tells hibernate that it is a Bean.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 당신은 클래스에 주석을 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; 를&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 그것은이 빈 것을 최대 절전 모드 알려줍니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="08d89f88959bdae44be6a1bb588f2c4224fb6221" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Controller&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@Controller&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7aa7e80f0249d623ecda3e6e3746451017dfda60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Controller&lt;/strong&gt; - acts as controller in MVC pattern. The dispatcher will scan such annotated classes for mapped methods, detecting @RequestMapping annotations.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Controller-MVC 패턴에서 컨트롤러 역할을합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;디스패처는 이러한 주석이 달린 클래스에서 매핑 된 메소드를 검색하여 @RequestMapping 주석을 감지합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30944fd2fb61d9ebcd45f8a10a490acf26a78223" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Repository&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@Repository&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d59ee6059e619bf4112380bb8ba8a318d31487a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Repository&lt;/strong&gt; - extends @Component annotation and translate all database exceptions into 
&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/dao/DataAccessException.html&quot;&gt;DataAccessException&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Repository-@Component 주석을 확장하고 모든 데이터베이스 예외를 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/dao/DataAccessException.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DataAccessException&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 으로 변환합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4c82a84c7e004e5dbf46fdab8620acd39f117766" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Repository&lt;/strong&gt;: you annotate a class &lt;code&gt;@Repository&lt;/code&gt;, it tells hibernate it is a DAO class and treat it as DAO class. Means it makes the unchecked exceptions (thrown from DAO methods) eligible for translation into Spring &lt;code&gt;DataAccessException&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 클래스 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; 에&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 주석을 달면 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;최대 절전 모드에 DAO 클래스임을 알리고 DAO 클래스로 처리합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;검사되지 않은 예외 (DAO 메소드에서 발생)를 Spring &lt;/font&gt;&lt;/font&gt; &lt;code&gt;DataAccessException&lt;/code&gt; 으로&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 변환 할 수있게합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82c18cae0ef756fd2e697fe0e8a89527b3e4afbc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Repository&lt;/strong&gt;&lt;strong&gt;@Service&lt;/strong&gt; and &lt;strong&gt;@Controller&lt;/strong&gt; are serves as specialization of @Component for more specific use on that basis you can replace @Service to @Component but in this case you loose the specialization.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Controller&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 @Service를 @Component로 대체 할 수 있지만이 경우 전문화를 잃을 수있는보다 구체적인 사용을 위해 @Component의 전문화 역할을합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2b0d3443c7a52d182de6b0ed42e9280aef8cad71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Service, @Controller, @Repository = {@Component + some more special functionality}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service, @Controller, @Repository = {@ 컴포넌트 + 더 특별한 기능}&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6521051becbb1d47181a14e3843c1fa624be1400" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Service&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@Service&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="215e20d4b229d51d2aeab8ffaded5b0e314136d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Service&lt;/strong&gt;, extends @Component annotation and has only naming difference.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , @Component 주석을 확장하며 이름 차이 만 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7b190c46f1884d04aa30c69d70b5df62cc53a9a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Service&lt;/strong&gt;: This tells hibernate it is a Service class where you will have &lt;code&gt;@Transactional&lt;/code&gt; etc Service layer annotations so hibernate treats it as a Service component.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 이것은 당신이 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Transactional&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; etc Service 계층 주석을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;가질 Service 클래스라는 것을 Hibernate에게 알려준다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그래서 hibernate는 그것을 그것을 Service 컴포넌트로 취급한다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6d1c0a0bda111c87bc1cbdf4a7e655e8ea734ff4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Difference between @Component, @Repository, @Controller &amp;amp; @Service annotations&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component, @Repository, @Controller 및 @Service 주석의 차이점&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="66ac77b04336b73384ca2da9c721255689dc172c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Explanation of stereotypes :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;고정 관념 설명 :&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cdb7da5140a2c9fbc61635d14ca6e792686c863c" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;&lt;em&gt;Note: If a class is already registered as a bean through any alternate method, like through &lt;code&gt;@Bean&lt;/code&gt; or through &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt; etc... annotations, then &lt;code&gt;@RequestMapping&lt;/code&gt; can be picked if the class is also annotated with &lt;code&gt;@RequestMapping&lt;/code&gt; annotation. But that's a different scenario.&lt;/em&gt;&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;참고 : 클래스가 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Bean&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 또는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 등 ... 어노테이션 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;통한 대체 메소드를 통해 Bean으로 이미 등록 된 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;경우 클래스에 &lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 어노테이션이 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;주석이있는 경우 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; 을&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 선택할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 그것은 다른 시나리오입니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="0565cbb19c0f1f95a14173024327464b4109d17e" translate="yes" xml:space="preserve">
          <source>@Component &amp;ndash; generic and can be used across application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component &amp;ndash; ​​일반이며 응용 프로그램에서 사용할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c19cd435b45c7ce39cdcdaceb349ed963c2409e3" translate="yes" xml:space="preserve">
          <source>@Component in Spring</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;봄의 @Component&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2ae1ae6a578e4e2d086f153b4357b17a600f401e" translate="yes" xml:space="preserve">
          <source>@Component is a generic stereotype for any Spring managed component.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component는 모든 Spring 관리 컴포넌트의 일반적인 스테레오 타입입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="075ba1e63b8499e295328ae654616b3ac457ed4c" translate="yes" xml:space="preserve">
          <source>@Component is a generic stereotype for the components managed by Spring @Repository, @Service, and @Controller are @Component specializations for more specific uses:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component는 Spring @Repository, @Service 및 @Controller가 관리하는 컴포넌트에 대한 일반적인 스테레오 타입으로보다 구체적인 용도를위한 @Component 전문화입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6988be0d5c6bb12c0268a4bc1d2d64bbd996e1d7" translate="yes" xml:space="preserve">
          <source>@Component is equivalent to</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component는&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e189419b60784f6f072701a0112019edf4475523" translate="yes" xml:space="preserve">
          <source>@Component, @ Repository, @ Service, @Controller:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component, @ Repository, @ Service, @Controller :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8926cf25bf717ea2455a649c055241dbeb16a7c4" translate="yes" xml:space="preserve">
          <source>@Controller &amp;ndash; annotate
  classes at presentation layers level, mainly used in Spring MVC.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Controller &amp;ndash; Spring MVC에서 주로 사용되는 프리젠 테이션 레이어 레벨에서 클래스에 주석을 답니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a3bb904e5fd4d9f31ad357d460088636f9c191b" translate="yes" xml:space="preserve">
          <source>@Controller for MVC controllers</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC 컨트롤러 용 @Controller&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4415d372a91efad7a310c7fe84b6c23fa2a9f96c" translate="yes" xml:space="preserve">
          <source>@Controller is specialized annotation which makes the bean MVC aware and allows the use of further annotation like &lt;code&gt;@RequestMapping&lt;/code&gt; and all such</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Controller는 bean MVC를 인식하고 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 과 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;같은 추가 주석과 그 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;와 같은 모든 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;주석을 사용할 수 있도록하는 특수 주석입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="217fe57ceff049bd7161c67a27d8dcf3c690ef51" translate="yes" xml:space="preserve">
          <source>@Controller, @Service and @Repository are Specializations of @Component for specific use cases.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Controller, @Service 및 @Repository는 특정 사용 사례에 대한 @Component의 전문화 영역입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1b6ecfeaf188513038146749de2ca33e4f1505ea" translate="yes" xml:space="preserve">
          <source>@Repository &amp;ndash; annotate classes at persistence layer, which will act as
  database repository.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository &amp;ndash; 지속성 계층에서 클래스에 주석을 달면 데이터베이스 저장소로 작동합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34e70a53a8400f32673bc2dbaf054dc1b5f39ea5" translate="yes" xml:space="preserve">
          <source>@Repository for persistence</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;지속성을위한 @Repository&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9f87cf278958424bb2ad6c92d0c7bbd86c3ecb94" translate="yes" xml:space="preserve">
          <source>@Service
  &amp;ndash; annotate classes at service layer level.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service &amp;ndash; 서비스 계층 수준에서 클래스에 주석을 답니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f44b4afb62ac2bd44fd3a929667646726384ba94" translate="yes" xml:space="preserve">
          <source>@Service for services and transactions</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;서비스 및 거래를위한 @Service&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7ba2a28134b3ca42c2c6b345eb1c4e794befe840" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;@Service&lt;/code&gt; to quote spring documentation,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;스프링 문서를 인용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ,&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="91d02755008708aed94833e44e0aeffc9010db7e" translate="yes" xml:space="preserve">
          <source>A REPOSITORY represents all objects of a certain type as a conceptual
  set (usually emulated). It acts like a collection, except with more
  elaborate querying capability. Objects of the appropriate type are
  added and removed, and the machinery behind the REPOSITORY inserts
  them or deletes them from the database. This definition gathers a
  cohesive set of responsibilities for providing access to the roots of
  AGGREGATES from early life cycle through the end.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;REPOSITORY는 특정 유형의 모든 객체를 개념 집합 (일반적으로 에뮬레이션)으로 나타냅니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보다 정교한 쿼리 기능을 제외하고는 컬렉션처럼 작동합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;적절한 유형의 오브젝트가 추가 및 제거되고 REPOSITORY 뒤의 기계가 오브젝트를 삽입하거나 데이터베이스에서 삭제합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 정의는 초기 수명주기에서 끝까지 AGGREGATES의 근본에 대한 액세스를 제공하는 일관된 책임 세트를 수집합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f47b388fe44e5f55543ff7ae7b6a0d924ebef100" translate="yes" xml:space="preserve">
          <source>A SERVICE is an operation offered as an interface that stands alone in
  the model, without encapsulating state, as ENTITIES and VALUE OBJECTS
  do. SERVICES are a common pattern in technical frameworks, but they
  can also apply in the domain layer. The name service emphasizes the
  relationship with other objects. Unlike ENTITIES and VALUE OBJECTS, it
  is defined purely in terms of what it can do for a client. A SERVICE
  tends to be named for an activity, rather than an entity&amp;mdash;a verb rather
  than a noun. A SERVICE can still have an abstract, intentional
  definition; it just has a different flavor than the definition of an
  object. A SERVICE should still have a defined responsibility, and that
  responsibility and the interface fulfilling it should be defined as
  part of the domain model. Operation names should come from the
  UBIQUITOUS LANGUAGE or be introduced into it. Parameters and results
  should be domain objects. SERVICES should be used judiciously and not
  allowed to strip the ENTITIES and VALUE OBJECTS of all their behavior.
  But when an operation is actually an important domain concept, a
  SERVICE forms a natural part of a MODEL-DRIVEN DESIGN. Declared in the
  model as a SERVICE, rather than as a phony object that doesn't
  actually represent anything, the standalone operation will not mislead
  anyone.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SERVICE는 ENTITIES 및 VALUE OBJECTS와 같이 캡슐화 상태없이 모델에서 독립적 인 인터페이스로 제공되는 작업입니다. 서비스는 기술 프레임 워크에서 일반적인 패턴이지만 도메인 계층에도 적용될 수 있습니다. 이름 서비스는 다른 개체와의 관계를 강조합니다. ENTITIES 및 VALUE OBJECTS와는 달리 클라이언트에 대해 수행 할 수있는 작업 측면에서 순수하게 정의됩니다. SERVICE는 엔티티가 아닌 활동, 즉 명사가 아닌 동사로 명명되는 경향이 있습니다. 서비스는 여전히 추상적이고 의도적 인 정의를 가질 수 있습니다. 그것은 단지 객체의 정의와 다른 풍미를 가지고 있습니다. 서비스는 여전히 정의 된 책임이 있어야하며,이를 수행하는 책임과 인터페이스는 도메인 모델의 일부로 정의되어야합니다.조작 이름은 유비쿼터스 언어에서 가져 오거나 도입해야합니다. 매개 변수 및 결과는 도메인 개체 여야합니다. 서비스는 신중하게 사용해야하며 모든 행동의 개체 및 가치있는 물건을 제거해서는 안됩니다. 그러나 작업이 실제로 중요한 도메인 개념 인 경우 SERVICE는 MODEL-DRIVEN DESIGN의 자연스러운 부분을 형성합니다. 실제로 어떤 것도 나타내지 않는 가짜 객체가 아닌 서비스로 모델로 선언 된 독립형 작업은 다른 사람을 오도하지 않습니다.서비스는 모델 중심 디자인의 자연스러운 부분을 형성합니다. 실제로 어떤 것도 나타내지 않는 가짜 객체가 아닌 서비스로 모델로 선언 된 독립형 작업은 다른 사람을 오도하지 않습니다.서비스는 모델 중심 디자인의 자연스러운 부분을 형성합니다. 실제로 어떤 것도 나타내지 않는 가짜 객체가 아닌 서비스로 모델로 선언 된 독립형 작업은 다른 사람을 오도하지 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c8430209be1050ef9c81cf8f55d45b83d428418f" translate="yes" xml:space="preserve">
          <source>A class annotated with &quot;@Repository&quot; has a better translation and readable error handling with org.springframework.dao.DataAccessException. Ideal for implementing components that access data (DataAccessObject or DAO).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot;@Repository&quot;로 주석이 달린 클래스는 org.springframework.dao.DataAccessException으로 더 나은 번역 및 읽기 쉬운 오류 처리 기능을 갖습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;데이터에 액세스하는 컴포넌트 (DataAccessObject 또는 DAO)를 구현하는 데 이상적입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6a8649297afe73083d33548e58a5b17638fa4b53" translate="yes" xml:space="preserve">
          <source>All are the same way when you inject them, &lt;strong&gt;@Repository&lt;/strong&gt; it's an interface which apply the implementation for the Repository Pattern &lt;a href=&quot;https://stackoverflow.com/questions/5166888/repository-design-pattern&quot;&gt;Repository design pattern&lt;/a&gt;, generally it's used when you are dealing with some data store or database, and you will find that, it contains multiple ready implementation for you to handle database operations; it can be  &lt;em&gt;CrudRepository&lt;/em&gt;, &lt;em&gt;JpaRepository&lt;/em&gt; etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 주입 할 때 모두 동일한 방식입니다 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.Repository&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 Repository Pattern &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/5166888/repository-design-pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Repository 디자인 패턴에&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대한 구현을 적용하는 인터페이스 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이며 일반적으로 일부 데이터 저장소 또는 데이터베이스를 처리 할 때 사용되며 여러 항목이 포함되어 있음을 알 수 있습니다 데이터베이스 작업을 처리 할 수있는 준비된 구현. &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CrudRepository&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JpaRepository&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 등이 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;될 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6d5c7ff40a6cd439fca89118f4d3196bdb0da41c" translate="yes" xml:space="preserve">
          <source>An annotated class with &quot;@Controller&quot; plays a controller role in a Spring Web MVC application</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot;@Controller&quot;가있는 주석이 달린 클래스는 Spring Web MVC 애플리케이션에서 컨트롤러 역할을합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="226f9c7ef04f761d7e503608315d9a02c54ba6ab" translate="yes" xml:space="preserve">
          <source>An annotated class with &quot;@Service&quot; plays a role in business logic services, example Facade pattern for DAO Manager (Facade) and transaction handling</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot;@Service&quot;가있는 주석이 달린 클래스는 비즈니스 로직 서비스에서 역할을 수행합니다 (예 : DAO 관리자의 Facade 패턴 (Facade) 및 트랜잭션 처리).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82eb7fb789cdca7c0796a25ea6eb54cf3fa98997" translate="yes" xml:space="preserve">
          <source>Annotate other components with @Component, for example REST Resource classes.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;REST Resource 클래스와 같이 @Component로 다른 컴포넌트에 주석을 답니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="438148bac733e4506cfcd03045e90b60cf643030" translate="yes" xml:space="preserve">
          <source>Another thing is that you designate the components semantically to different layers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또 다른 것은 구성 요소를 의미 적으로 다른 계층으로 지정한다는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e1c8aad64854b177f2f12eacee87256f59a7539f" translate="yes" xml:space="preserve">
          <source>Apart from the fact that it's used to indicate, that it's holding the business logic, there&amp;rsquo;s nothing else noticeable in this annotation; but who knows, Spring may add some additional exceptional in future.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;비즈니스 로직을 보유하고 있음을 나타내는 데 사용된다는 사실 외에도이 주석에는 눈에 띄는 것이 없습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 누가 알더라도 Spring은 앞으로 몇 가지 예외를 추가 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="774e1e57c082c4559eab60f3dc8b0a7778c5aacb" translate="yes" xml:space="preserve">
          <source>As many of the answers already state what these annotations are used for, we'll here focus on some minor differences among them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;많은 답변이 이미 이러한 주석이 사용되는 것을 나타내므로 여기서는 약간의 차이점에 중점을 둘 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a96409f0b3e24141f785ed6967bd54c0cee54a7a" translate="yes" xml:space="preserve">
          <source>But spring user these different annotations in different for the specific use, for example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 스프링 사용자는 이러한 다른 주석을 특정 용도에 따라 다르게 사용하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2e7ed5de866f818fd7632c8378ac9d611c644ab0" translate="yes" xml:space="preserve">
          <source>Can &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Repository.html&quot;&gt;&lt;code&gt;@Repository&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Service.html&quot;&gt;&lt;code&gt;@Service&lt;/code&gt;&lt;/a&gt; annotations be used interchangeably in Spring or do they provide any particular functionality besides acting as a notation device?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;캔 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt; &lt;code&gt;@Component&lt;/code&gt; 는&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Repository.html&quot;&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Service.html&quot;&gt; &lt;code&gt;@Service&lt;/code&gt; 의&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 주석이 봄에 교대로 사용할 수 또는 그들이 표기법 장치 역할 외에 특정 기능을 제공합니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="05959bd7bd4046316957d11cac98f16f60eec006" translate="yes" xml:space="preserve">
          <source>Controllers just do stuff like dispatching, forwarding, calling service methods etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러는 디스패치, 포워딩, 서비스 메소드 호출 등과 같은 작업을 수행합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5f1b1659d1c790ecfe93af1bc16ee886f5f8f7bd" translate="yes" xml:space="preserve">
          <source>Differences between @Component, @Repository, @Controller and @Service</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component, @Repository, @Controller 및 @Service의 차이점&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="108530447972b523e2d373bdb632a25c26021ef2" translate="yes" xml:space="preserve">
          <source>Even if we interchange @Component or @Repository or @service</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component 또는 @Repository 또는 @service를 서로 바꿔도&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fb3e3dc324e182ca9b656d76a3d7ce9de027ff17" translate="yes" xml:space="preserve">
          <source>Finally the &lt;strong&gt;@Component&lt;/strong&gt;, this is the generic form for registered beans in Spring, that's spring is always looking for bean marked with @Component to be registered, then both @Service and @Repository are special cases of @Component, however the common use case for component is when you're making something purely technical not for covering direct business case! like formatting dates or handing special request serialization mechanism and so on.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;마지막으로 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , 이것은 Spring에서 등록 된 Bean의 일반적인 형태입니다. 봄은 항상 @Component로 표시된 Bean을 찾고, 등록 된 @Service와 @Repository는 @Component의 특별한 경우이지만 일반적인 사용 사례입니다 구성 요소는 직접적인 비즈니스 사례를 다루지 않는 순수한 기술적 인 것을 만들 때입니다! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;날짜 형식 지정 또는 특수 요청 직렬화 메커니즘 등을 전달합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9f0261eacd2baa531daae71e46b0f60617be49df" translate="yes" xml:space="preserve">
          <source>First point worth highlighting again is that &lt;strong&gt;with respect to scan-auto-detection and dependency injection for BeanDefinition&lt;/strong&gt; all these annotations (viz., @Component, @Service,
  @Repository, @Controller) are the same. &lt;strong&gt;We can use one in place
  of another and can still get our way around.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다시 강조해야 할 첫 번째 사항 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;은 BeanDefinition의 스캔 자동 감지 및 종속성 주입과 관련하여&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이러한 모든 주석 (즉, @Component, @Service, @Repository, @Controller)이 동일하다는 것입니다. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우리는 다른 것을 대신하여 사용할 수 있으며 여전히 길을 갈 수 있습니다.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dae40ac0e6509431287b6fc01d6ddd4f16209179" translate="yes" xml:space="preserve">
          <source>First the &lt;strong&gt;Similarity&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;먼저 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;유사점&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="60d63f919d7b29919cbe50d8a11dcefc13043550" translate="yes" xml:space="preserve">
          <source>For example recently I made:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어 최근에 만들었습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7f633a4de5a6fad5c4d8ba29d7323985965ecde0" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-stereotype-annotations&quot;&gt;Spring Documentation&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에서 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-stereotype-annotations&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;봄 문서&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd6033d5effd839344b23f051f6dad9c015a7e91" translate="yes" xml:space="preserve">
          <source>From the Spring source code:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;스프링 소스 코드에서 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c399a887e5a285d63699e02b5d8b941d0e57855a" translate="yes" xml:space="preserve">
          <source>Good enough answers are here to explain the whats-the-difference-between-component-repository-service-annotations. I would like to share the difference between &lt;code&gt;@Controller &amp;amp; @RestController&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;구성 요소 저장소 서비스 주석 사이의 차이점을 설명하기에 충분한 답변이 있습니다. &lt;/font&gt; &lt;code&gt;@Controller &amp;amp; @RestController&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 차이점을 공유하고 &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싶습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc7f9ea7304fd7a39962300b05ca13d8a3ae0cd5" translate="yes" xml:space="preserve">
          <source>Help developers define a better category for the competent. This categorizing may become helpful in some cases. (For example when you are using &lt;code&gt;aspect-oriented&lt;/code&gt;, these can be a good candidate for &lt;code&gt;pointcuts&lt;/code&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;개발자가 역량에 대한 더 나은 범주를 정의 할 수 있도록 도와줍니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 분류는 경우에 따라 도움이 될 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(예를 들어 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;aspect-oriented&lt;/code&gt; 를&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용할 때 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것들은 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;pointcuts&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 위한 좋은 후보가 될 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d635c1de85cee5ea3af4b392a4b9368f7868551" translate="yes" xml:space="preserve">
          <source>Here @Component is a base annotation for @Service,@Repository and @Controller annotations</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기서 @Component는 @ Service, @ Repository 및 @Controller 주석에 대한 기본 주석입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7363505f6a586aa6429740258f3dda2647d3fbc5" translate="yes" xml:space="preserve">
          <source>Here are more &lt;a href=&quot;http://howtodoinjava.com/spring/spring-core/how-to-use-spring-component-repository-service-and-controller-annotations/&quot;&gt;details&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;자세한 &lt;/font&gt;&lt;a href=&quot;http://howtodoinjava.com/spring/spring-core/how-to-use-spring-component-repository-service-and-controller-annotations/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;내용&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 다음과 같습니다&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed3b4ac7f21763d162d61f6aa39be3864476bcb1" translate="yes" xml:space="preserve">
          <source>If we add @Repository on top of class then it tells that a class consisting persistence logic</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;클래스 위에 @Repository를 추가하면 지속성 논리로 구성된 클래스를 알려줍니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="00838cb34513f47aee10b2f69acf45e84c1125a3" translate="yes" xml:space="preserve">
          <source>If we add @Service annotation then it tells that a role of class consisting business logic</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service 주석을 추가하면 비즈니스 로직을 구성하는 클래스의 역할을 알려줍니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7465ecd9bd3b510352e72b483bfc7d63faa77863" translate="yes" xml:space="preserve">
          <source>If we add the @Component then it tells the role of class is a component class it means it is a class consisting some logic,but it
  does not tell whether a class containing a specifically business or
  persistence or controller logic so we don't use directly this
  @Component annotation</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component를 추가하면 클래스의 역할이 컴포넌트 클래스임을 알려줍니다.이 클래스는 일부 로직을 구성하는 클래스임을 의미하지만 클래스가 특정 비즈니스 또는 지속성 또는 컨트롤러 로직을 포함하는지 여부를 알려주지 않으므로 사용하지 않습니다. 이 @Component 주석을 직접&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a288de74244c35de7979dfbbff38f630197ec222" translate="yes" xml:space="preserve">
          <source>If we interchange their place(use &lt;code&gt;@Repository&lt;/code&gt; in place of &lt;code&gt;@Controller&lt;/code&gt;), our application will work fine.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우리가 그들의 위치 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;를 &lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대신 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;) 응용 프로그램이 잘 작동합니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1eb25941af3c497f8a5ce8bd6f65690000953687" translate="yes" xml:space="preserve">
          <source>If you are using spring MVC, the &lt;code&gt;@RequestMapping&lt;/code&gt; can only be added to classes which are annotated by &lt;code&gt;@Controller&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;스프링 MVC를 사용하는 경우 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 로 주석이 달린 클래스에만 추가 할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ebfaeb082fcf318a425dd207d5a1a54a58f44649" translate="yes" xml:space="preserve">
          <source>If you do not use the proper annotations, you may face commit exceptions overridden by rollback transactions. You will see exceptions during stress load test that is related to roll back JDBC transactions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;적절한 주석을 사용하지 않으면 롤백 트랜잭션으로 인해 커밋 예외가 발생할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JDBC 트랜잭션 롤백과 관련된 스트레스로드 테스트 중 예외가 표시됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="99e6cddbe71afbd4fa8a1d1bba72430392222c97" translate="yes" xml:space="preserve">
          <source>If you look at domain driven design by eric evans,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에릭 에반스의 도메인 주도 디자인을 보면,&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2d9913d9dc88af8dacca28534e00dbbf0e041820" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;@RestController&lt;/code&gt; you cannot return a view (By using
&lt;code&gt;Viewresolver&lt;/code&gt; in Spring/Spring-Boot)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;@RestController&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 사용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하면 뷰를 반환 할 수 없습니다 ( &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring / Spring-Boot에서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Viewresolver&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 사용하여 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8b5dacb446cf84e727c664735181a4440878cdea" translate="yes" xml:space="preserve">
          <source>Imagine if there were only one annotation @Controller, then this component will have dispatching, business logic and accessing database all mixed, so dirty code!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Controller 주석이 하나만 있다고 가정하면이 구성 요소에는 디스패치, 비즈니스 로직 및 액세스 데이터베이스가 모두 혼합되어 더러워진 코드가 있습니다!&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9343295b80ac0e2bd6b361283d8e53172f671469" translate="yes" xml:space="preserve">
          <source>In Spring 2.0 and later, the &lt;code&gt;@Repository&lt;/code&gt; annotation is a marker for
  any class that fulfills the role or stereotype (also known as Data
  Access Object or DAO) of a repository. Among the uses of this marker
  is the automatic translation of exceptions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring 2.0 이상에서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 어노테이션은 저장소의 역할 또는 스테레오 타입 (데이터 액세스 오브젝트 또는 DAO라고도 함)을 충족하는 모든 클래스의 마커입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 마커의 사용 중에는 예외 자동 번역이 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8b7350be16af05d3f28297bf4fd50c42a92bb6f5" translate="yes" xml:space="preserve">
          <source>In Spring 4, latest version:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring 4의 최신 버전 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d3f07103494a99afd3d9f5749a39ec3f45c77438" translate="yes" xml:space="preserve">
          <source>In Spring &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Controller&lt;/code&gt;, and &lt;code&gt;@Repository&lt;/code&gt; are Stereotype annotations which are used for:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 다음에 사용되는 스테레오 타입 주석입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e3a6348ec28746c35a4737921fc5757d9d481b7f" translate="yes" xml:space="preserve">
          <source>In addition to pointing out, that this is an &lt;em&gt;Annotation based Configuration&lt;/em&gt;, &lt;code&gt;@Repository&lt;/code&gt;&amp;rsquo;s job is to catch platform specific exceptions and re-throw them as one of Spring&amp;rsquo;s unified unchecked exception. For this, we&amp;rsquo;re provided with &lt;code&gt;PersistenceExceptionTranslationPostProcessor&lt;/code&gt;, that we are required to add in our Spring&amp;rsquo;s application context like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이는 것을, 지적뿐만 아니라 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;구성 기반 주석&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 작업이 캐치 플랫폼 특정의 예외이다 봄의 통일 체크되지 않는 예외의 하나로서 그들을 다시 던져. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이를 위해 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;PersistenceExceptionTranslationPostProcessor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 제공되며 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring의 애플리케이션 컨텍스트에 다음과 같이 추가해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="795eec8bf0eef1012cfd63fdfb85457f9c4bf930" translate="yes" xml:space="preserve">
          <source>In order to simplify this illustration, let us consider technicality by use case, These annotations are used to be injected and as I said literally &quot;&lt;em&gt;Used to be injected&lt;/em&gt;&quot; , that mean, if you know how to use &lt;strong&gt;Dependency Injection &quot;DI&quot;&lt;/strong&gt;  and you should, then you will always look for these annotations, and by annotating the classes with these &lt;strong&gt;Stereo Types&lt;/strong&gt;, you are informing the &lt;em&gt;DI&lt;/em&gt; container to scan them to be ready for Injection on other places, this is the practical target.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 그림을 단순화하기 위해, 우리가 사용 사례에 의해 전문적를 생각해 보자,이 주석을 주입하는 데 사용됩니다 및 말했듯이 문자 그대로 &quot; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;주입하는 데 사용됩니다&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용하는 방법을 알고있는 경우에, 그 말은,&quot; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의존성 삽입 (Dependency Injection) &quot;DI&quot;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 당신을 다음, 당신은 항상 이러한 주석, 이들과 함께 수업을 주석으로 모양해야 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;스테레오 타입&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , 당신이 통보된다 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DI의&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 다른 장소에 주입을위한 준비가 그들을 검사 할 컨테이너를이 실제 대상입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="990c52936055f05ac08e35c6a319e562e44f0a62" translate="yes" xml:space="preserve">
          <source>In other words, if I have a Service class and I change the annotation from &lt;code&gt;@Service&lt;/code&gt; to &lt;code&gt;@Component&lt;/code&gt;, will it still behave the same way?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;즉, Service 클래스가 있고 주석을 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; 로&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 변경해 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;도 여전히 같은 방식으로 작동합니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="46a399d538f354135718b8beec0576afb824eb1a" translate="yes" xml:space="preserve">
          <source>In spring framework provides some special type of annotations,called stereotype annotations.
These are following:-</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;스프링 프레임 워크에서는 스테레오 타입 주석이라고하는 특수한 주석 유형을 제공합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이들은 다음과 같습니다 :-&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d0288df0a0caa96be3fb1fcb410d17ac61873da0" translate="yes" xml:space="preserve">
          <source>Indicates that an annotated class is a &quot;&lt;a href=&quot;http://docs.spring.io/spring-framework/docs/2.5.x/api/org/springframework/stereotype/Component.html&quot;&gt;component&lt;/a&gt;&quot;. Such classes are
  considered as candidates for auto-detection when using
  annotation-based configuration and classpath scanning.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;주석이 달린 클래스가 &quot; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.spring.io/spring-framework/docs/2.5.x/api/org/springframework/stereotype/Component.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;구성 요소&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;임을 나타냅니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이러한 클래스는 주석 기반 구성 및 클래스 경로 검색을 사용할 때 자동 감지의 후보로 간주됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="603ae5b24635d9c9cc928a1fbbfc200b44fef9fb" translate="yes" xml:space="preserve">
          <source>Indicates that an annotated class is a &quot;Service&quot;, &lt;strong&gt;originally defined
  by Domain-Driven Design (Evans, 2003) as &quot;an operation offered as an
  interface that stands alone in the model, with no encapsulated state.&quot;&lt;/strong&gt;
  May also indicate that a class is a &quot;Business Service Facade&quot; (in the
  Core J2EE patterns sense), or something similar. This annotation is a
  general-purpose stereotype and individual teams may narrow their
  semantics and use as appropriate.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;주석이 달린 클래스는 &quot;서비스&quot;이며 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;원래 도메인 기반 디자인 (Evans, 2003)에 의해 &quot;캡슐화 된 상태가없는 모델에서 독립된 인터페이스로 제공되는 작업&quot;으로 정의됩니다. &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 클래스가 &quot;비즈니스 서비스 외관&quot;(핵심 J2EE 패턴 의미) 또는 이와 유사한 것임을 나타낼 수도 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 주석은 범용 고정 관념이며 개별 팀은 의미를 좁히고 적절하게 사용할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1bcf44cc569a33a13c3a571a60f384e0548b094b" translate="yes" xml:space="preserve">
          <source>Indicates that an annotated class is a &quot;component&quot;. Such classes are considered as candidates for auto-detection when using annotation-based configuration and classpath scanning.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;주석이 달린 클래스가 &quot;컴포넌트&quot;임을 나타냅니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이러한 클래스는 주석 기반 구성 및 클래스 경로 검색을 사용할 때 자동 감지의 후보로 간주됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="85dfd254c334ad8fc68bd7aa1dcde048bb6a1174" translate="yes" xml:space="preserve">
          <source>It will behave the same , but one aspect is that they wont be able to catch some specific exception related to DAO instead of Repository if we use component or @ service</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;구성 요소 또는 @ 서비스를 사용하면 Repository 대신 DAO와 관련된 특정 예외를 포착 할 수 없다는 것이 한 가지 측면입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6641643e8c8fb510696ea216a90e65385335b9a9" translate="yes" xml:space="preserve">
          <source>Just take a look at &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt; and &lt;code&gt;@Repository&lt;/code&gt; annotation definitions:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 주석 정의를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;살펴보십시오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="903bfafcdae2fa0d2a53b0efa2b6858af2cb9337" translate="yes" xml:space="preserve">
          <source>Let's say you want to Monitors the Activity of the DAO Layer only. You will write an Aspect (A class) class that does some logging before and after every method of your DAO is invoked, you are able to do that using AOP as you have three distinct Layers and are not mixed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DAO 레이어의 활동 만 모니터링한다고 가정 해 봅시다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DAO의 모든 메소드가 호출되기 전후에 로깅을 수행하는 Aspect (클래스) 클래스를 작성합니다. AOP를 사용하면 3 개의 별개의 레이어가 있고 혼합되지 않으므로 AOP를 사용하여이를 수행 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c2629ed734c3a1b852e77ed00f1df23f518f1f94" translate="yes" xml:space="preserve">
          <source>More Detailed View</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;더 자세히보기&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ebb845500698520391f76f33b840d9410bf39333" translate="yes" xml:space="preserve">
          <source>Now lets move to each one; first &lt;strong&gt;@Service&lt;/strong&gt;, If you are building some logic for specific business case you need to separate that in a place which will contain your business logic, this service is normal Class or you can use it as interface if you want , and it is written like this</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 각각으로 이동하자; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;첫 번째 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , 특정 비즈니스 사례에 대한 논리를 작성하는 경우 비즈니스 논리가 포함될 장소에서 해당 논리를 분리해야합니다.이 서비스는 일반 클래스이거나 원하는 경우 인터페이스로 사용할 수 있으며 다음과 같이 작성됩니다 이&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="235ac4ca12c6e15fd070a83c68746376ccc0ff7f" translate="yes" xml:space="preserve">
          <source>Now you may ask why separate them: (I assume you know AOP-Aspect Oriented Programming)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 왜 그것들을 분리 해야하는지 물을 수 있습니다. (AOP-Aspect Oriented Programming을 알고 있다고 가정합니다)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0e49e54de73dcdad3023900189208d240b064830" translate="yes" xml:space="preserve">
          <source>One should choose a more specialised form of &lt;code&gt;@Component&lt;/code&gt; while annotating their class as this annotation may contain specific behavior going forward.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 주석에는 앞으로 특정 동작이 포함될 수 있으므로 클래스에 주석 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;을 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 더 특수한 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 형식을 선택해야합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fdd116a6947fffa7da31c90c4e34c869835628f6" translate="yes" xml:space="preserve">
          <source>One thing that &lt;code&gt;@Component&lt;/code&gt; offers is that you can annotate other annotations with it, and then use them the same way as &lt;code&gt;@Service&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; 가&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 제공 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하는 한 가지는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 주석에 주석을 달고 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 같은 방식으로 사용할 수 있다는 것 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d31650711bf9f2dafab41426e9e398c7d17c0a5a" translate="yes" xml:space="preserve">
          <source>Or does the annotation also influence the behavior and functionality of the class?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;아니면 주석이 클래스의 동작과 기능에도 영향을 줍니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a06c6eb35e880fc6c2fdd09687a380413e6a28fa" translate="yes" xml:space="preserve">
          <source>Originally answered &lt;a href=&quot;https://stackoverflow.com/questions/16051656/advantages-of-using-spring-stereotypes/16105106#16105106&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;원래 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/16051656/advantages-of-using-spring-stereotypes/16105106#16105106&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에 대답 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;했습니다&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b6262057e07ae846d043a86d7e9fee68034d9861" translate="yes" xml:space="preserve">
          <source>Other class-level annotations may be considered as identifying a
  component as well, typically a special kind of component: e.g. the
  @Repository annotation or AspectJ's @Aspect annotation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 클래스 수준 주석은 구성 요소를 식별하는 것으로 간주 될 수 있으며 일반적으로 특수한 구성 요소 유형입니다 (예 : @Repository 주석 또는 AspectJ의 @Aspect 주석).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0c3bd2feae7e8a7044ad1d68132cdba2cae4dd29" translate="yes" xml:space="preserve">
          <source>Plus &lt;code&gt;@Service&lt;/code&gt; is advance of &lt;code&gt;@Component&lt;/code&gt;. Assume the bean class name is &lt;code&gt;CustomerService&lt;/code&gt;, since you did not choose XML bean configuration way so you annotated the bean with &lt;code&gt;@Component&lt;/code&gt; to indicate it as a Bean. So while getting the bean object &lt;code&gt;CustomerService cust = (CustomerService)context.getBean(&quot;customerService&quot;);&lt;/code&gt; By default, Spring will lower case the first character of the component &amp;ndash; from &amp;lsquo;CustomerService&amp;rsquo; to &amp;lsquo;customerService&amp;rsquo;. And you can retrieve this component with name &amp;lsquo;customerService&amp;rsquo;.
But if you use &lt;code&gt;@Service&lt;/code&gt; annotation for the bean class you can provide a specific bean name by</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 보다 앞서 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Bean 클래스 이름이 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;CustomerService&lt;/code&gt; 라고&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가정 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하십시오. XML Bean 구성 방법을 선택하지 않았으므로 Bean으로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;표시하기 위해 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Bean에 주석을 달았습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 Bean 오브젝트를 가져 오는 동안 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;CustomerService cust = (CustomerService)context.getBean(&quot;customerService&quot;);&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;기본적으로 Spring은 컴포넌트의 첫 문자 인 'CustomerService'에서 'customerService'로 소문자를 지정합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이름이 'customerService'인이 구성 요소를 검색 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Bean 클래스에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 주석을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용하면 다음과 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;같이 특정 Bean 이름을 제공 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="97b6f37b8647002ac0f4d19689972c444a6cc418" translate="yes" xml:space="preserve">
          <source>Purpose of each annotation:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;각 주석의 목적 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5c33ac0525673af29e43ddf85d13630c95db59c2" translate="yes" xml:space="preserve">
          <source>Referring to &lt;code&gt;JSR-330&lt;/code&gt;, which is now supported by spring, you can only use &lt;code&gt;@Named&lt;/code&gt; to define a bean (Somehow &lt;code&gt;@Named=@Component&lt;/code&gt;). So according to this standard, there seems that there is no use to define stereotypes (like &lt;code&gt;@Repository&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Controller&lt;/code&gt;) to categories beans.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 스프링에서 지원되는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;JSR-330&lt;/code&gt; 을&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 참조하면 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Named&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 만 사용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하여 Bean을 정의 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Somehow &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Named=@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서이 표준에 따르면 스테레오 타입 ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 같은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;)을 카테고리 Bean &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에 정의하는 데 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;쓸모&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 없는 것으로 보입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="685dc316b07cd5f694d0845b3fd6ec857a538dd4" translate="yes" xml:space="preserve">
          <source>Repository are the DAOs (Data Access Objects), they access the database directly.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;리포지토리는 DAO (Data Access Objects)이며 데이터베이스에 직접 액세스합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e147f1fe24ee57f9f37f6dc9c7383254c93bd48f" translate="yes" xml:space="preserve">
          <source>Service Hold business Logic, Calculations etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;서비스 보류 비즈니스 로직, 계산 등&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e2d186594b1e6d077235fcfdef486079382c759e" translate="yes" xml:space="preserve">
          <source>Similar to above, in the future Spring may add special functionalities for &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Controller&lt;/code&gt; and &lt;code&gt;@Repository&lt;/code&gt; based on their layering conventions. Hence, it's always a good idea to respect the convention and use it in line with layers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위와 유사하게, Spring은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;레이어링 규칙에 따라 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에 특별한 기능을 추가 할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 컨벤션을 존중하고 레이어에 맞춰 사용하는 것이 좋습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="426f653b4b02591f9400e218877d98d88ef2cf85" translate="yes" xml:space="preserve">
          <source>So all classes annotated with &lt;code&gt;@ScheduledJob&lt;/code&gt; are spring beans and in addition to that are registered as quartz jobs. You just have to provide code that handles the specific annotation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@ScheduledJob&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 으로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;주석이 달린 모든 클래스 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;는 스프링 빈이며 그 외에도 석영 작업으로 등록됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;특정 주석을 처리하는 코드 만 제공하면됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94f5ef83d953e16e3fc387e0969a50cac858275e" translate="yes" xml:space="preserve">
          <source>So you can do logging of DAO  &quot;around&quot;, &quot;before&quot; or &quot;after&quot; the DAO methods. You could do that because you had a DAO in the first place. What you just achieved is &lt;strong&gt;Separation of concerns or tasks.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 DAO 메소드 &quot;around&quot;, &quot;before&quot;또는 &quot;after&quot;를 DAO 로깅 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;당신은 처음에 DAO를 가지고 있기 때문에 그렇게 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;방금 달성 한 것은 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우려 또는 작업의 분리입니다.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c1d2586129c5e43b746ba3d3c2d74b7668fa20f" translate="yes" xml:space="preserve">
          <source>Special type annotations are also scanned, because they themselves are annotated with &lt;code&gt;@Component&lt;/code&gt; annotation, which means they are also &lt;code&gt;@Component&lt;/code&gt;s. If we define our own custom annotation and annotate it with &lt;code&gt;@Component&lt;/code&gt;, it will also get scanned with &lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그들 자신이 주석하고 있기 때문에 특수 유형 약어도, 스캔 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; 의&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 그들은 또한 의미 주석, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 들. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우리는 우리 자신의 사용자 정의 주석을 정의하고 그것을 주석 경우 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , 그것은 또한 스캔 얻을 것이다 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="13138bde579f40373313fd0ba397b74463f24bd5" translate="yes" xml:space="preserve">
          <source>Spring 2.5 introduces further stereotype annotations: &lt;code&gt;@Component&lt;/code&gt;,
  &lt;code&gt;@Service&lt;/code&gt;, and &lt;code&gt;@Controller&lt;/code&gt;. &lt;code&gt;@Component&lt;/code&gt; is a generic stereotype for any
  Spring-managed component. &lt;code&gt;@Repository&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, and &lt;code&gt;@Controller&lt;/code&gt; are
  specializations of &lt;code&gt;@Component&lt;/code&gt; for more specific use cases, for
  example, in the persistence, service, and presentation layers,
  respectively.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring 2.5에는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 등의 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;스테레오 타입 주석이 추가되었다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 Spring 관리 컴포넌트의 일반적인 스테레오 타입입니다. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;각각 지속성, 서비스 및 프리젠 테이션 계층과 같은보다 구체적인 사용 사례에 대한 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 전문화 영역입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0d6a36819b19fd7dcb56550f70df1216a3e250f9" translate="yes" xml:space="preserve">
          <source>Spring 2.5 introduces further stereotype annotations: @Component, @Service and @Controller. @Component serves as a generic stereotype for any Spring-managed component; whereas, @Repository, @Service, and @Controller serve as specializations of @Component for more specific use cases (e.g., in the persistence, service, and presentation layers, respectively). What this means is that you can annotate your component classes with @Component, but by annotating them with @Repository, @Service, or @Controller instead, your classes are more properly suited for processing by tools or associating with aspects. For example, these stereotype annotations make ideal targets for pointcuts. Of course, it is also possible that @Repository, @Service, and @Controller may carry additional semantics in future releases of the Spring Framework. Thus, if you are making a decision between using @Component or @Service for your service layer, @Service is clearly the better choice. Similarly, as stated above, @Repository is already supported as a marker for automatic exception translation in your persistence layer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring 2.5에는 @Component, @Service 및 @Controller와 같은 추가 스테레오 타입 주석이 도입되었습니다. @Component는 모든 Spring 관리 컴포넌트의 일반적인 스테레오 타입으로 사용됩니다. 반면 @Repository, @Service 및 @Controller는보다 구체적인 사용 사례 (예 : 지속성, 서비스 및 프레젠테이션 계층 각각)에 대한 @Component 전문화 역할을합니다. 이것이 의미하는 것은 컴포넌트 클래스에 @Component로 주석을 달 수 있지만, 대신 @Repository, @Service 또는 @Controller로 주석을 달아 클래스를 도구로 처리하거나 측면과 연관시키는 데 더 적합합니다. 예를 들어, 이러한 스테레오 타입 주석은 포인트 컷에 이상적인 대상이됩니다. 물론 @Repository, @Service 및 @Controller는 향후 스프링 프레임 워크 릴리스에서 추가 의미를 가질 수 있습니다. 그러므로,서비스 계층에 @Component 또는 @Service를 사용하기로 결정한 경우 @Service가 더 나은 선택입니다. 마찬가지로 위에서 언급했듯이 @Repository는 이미 퍼시스턴스 레이어에서 자동 예외 변환을위한 마커로 지원됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4c8f97fe823731da56120c1a0479f249b978d9eb" translate="yes" xml:space="preserve">
          <source>Spring provides four different types of auto component scan annotations, they are &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt; and &lt;code&gt;@Controller&lt;/code&gt;. Technically, there is no difference between them, but every auto component scan annotation should be used for a special purpose and within the defined layer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring은 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; 의&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 네 가지 유형의 자동 구성 요소 스캔 주석을 제공합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;기술적으로는 차이점이 없지만 모든 자동 구성 요소 스캔 주석은 특수 목적과 정의 된 레이어 내에서 사용해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4e47ccbf053a0ec52f68e06b21639f47966082e4" translate="yes" xml:space="preserve">
          <source>Spring provides further stereotype annotations: @Component, @Service,
  and @Controller. @Component is a generic stereotype for any
  Spring-managed component. @Repository, @Service, and @Controller are
  specializations of @Component for more specific use cases, for
  example, in the persistence, service, and presentation layers,
  respectively. Therefore, you can annotate your component classes with
  @Component, but by annotating them with @Repository, @Service, or
  @Controller instead, your classes are more properly suited for
  processing by tools or associating with aspects. For example, these
  stereotype annotations make ideal targets for pointcuts. It is also
  possible that @Repository, @Service, and @Controller may carry
  additional semantics in future releases of the Spring Framework. Thus,
  if you are choosing between using @Component or @Service for your
  service layer, @Service is clearly the better choice. Similarly, as
  stated above, @Repository is already supported as a marker for
  automatic exception translation in your persistence layer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring은 추가 스테레오 타입 어노테이션을 제공합니다 : @Component, @Service 및 @Controller. @Component는 Spring 관리 컴포넌트의 일반적인 스테레오 타입입니다. @Repository, @Service 및 @Controller는 각각 지속성, 서비스 및 프리젠 테이션 계층과 같은보다 구체적인 사용 사례에 대한 @Component의 전문화 영역입니다. 따라서 @Component로 컴포넌트 클래스에 주석을 달 수 있지만, 대신 @Repository, @Service 또는 @Controller로 주석을 달면 클래스가 도구로 처리하거나 측면과 연관시키는 데 더 적합합니다. 예를 들어, 이러한 스테레오 타입 주석은 포인트 컷에 이상적인 대상이됩니다. @Repository, @Service 및 @Controller는 향후 스프링 프레임 워크 릴리스에서 추가 의미를 가질 수 있습니다. 그러므로,서비스 계층에 @Component 또는 @Service를 사용하도록 선택하는 경우 @Service가 더 나은 선택입니다. 마찬가지로 위에서 언급했듯이 @Repository는 이미 퍼시스턴스 레이어에서 자동 예외 변환을위한 마커로 지원됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2af2883cda90ae2aabcf36bb1d742fa55939ea53" translate="yes" xml:space="preserve">
          <source>Technically &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt; are all same. All of them extends &lt;code&gt;@Component&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;기술적으로 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 모두 동일합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모두 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; 를&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 확장 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3450da4a4365327d7d93ea1ed7f17670543838e4" translate="yes" xml:space="preserve">
          <source>That mean Service, The Controller and Repository are functionally the same.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이는 서비스, 컨트롤러 및 리포지토리가 기능적으로 동일하다는 것을 의미합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0229edf27680c26ff671b29e914c64208980be53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@Controller&lt;/code&gt; annotation indicates that a particular class serves the role of a controller. The &lt;code&gt;@Controller&lt;/code&gt; annotation acts as a stereotype for the annotated class, indicating its role.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; 의&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 어노테이션은 특정 클래스가 컨트롤러의 역할을 역할을 나타냅니다. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; 의&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 주석은 역할을 나타내는 주석 클래스에 대한 스테레오 타입 역할을합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="533fb10976bc2fbd348b95363b3eebc5b25e7b10" translate="yes" xml:space="preserve">
          <source>The @Repository annotation is a marker for any class that fulfills the
  role or stereotype of a repository (also known as Data Access Object
  or DAO). Among the uses of this marker is the automatic translation of
  exceptions as described in Section 20.2.2, &amp;ldquo;Exception translation&amp;rdquo;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository 어노테이션은 리포지토리의 역할 또는 스테레오 타입 (데이터 액세스 오브젝트 또는 DAO라고도 함)을 충족하는 모든 클래스의 마커입니다. 이 마커의 사용 중에는 20.2.2 절&amp;ldquo;예외 변환&amp;rdquo;에 설명 된 예외의 자동 번역이 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="900ecd692d24a5c797f10bc27ca6905fadfb0704" translate="yes" xml:space="preserve">
          <source>The main purpose of using three different &lt;code&gt;@annotations&lt;/code&gt; is to provide better Modularity to the Enterprise application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;세 가지 다른 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@annotations&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 사용하는 주요 목적은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;엔터프라이즈 응용 프로그램에 더 나은 모듈성을 제공하는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa530228a9750a5c455b2162199e35549007bf86" translate="yes" xml:space="preserve">
          <source>The three annotations are used to separate &lt;strong&gt;&quot;Layers&quot;&lt;/strong&gt; in your application,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;세 개의 주석은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;애플리케이션에서 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot;레이어&quot;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 분리하는 데 사용됩니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4bf4bb5c5fdc69be38378fc9b78403ba1c199156" translate="yes" xml:space="preserve">
          <source>There is no difference between &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt;.
&lt;code&gt;@Component&lt;/code&gt; is the Generic annotation to represent the component of our MVC. But there will be several components as part of our MVC application like service layer components, persistence layer components and presentation layer components. So to differentiate them Spring people have given the other three annotations also.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사이에는 차이가 없습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 MVC의 구성 요소를 나타내는 일반 주석입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 서비스 계층 구성 요소, 지속성 계층 구성 요소 및 프레젠테이션 계층 구성 요소와 같은 MVC 응용 프로그램의 일부로 여러 구성 요소가 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 봄 사람들은 다른 세 가지 주석도 제공했습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d40a885a98ab77cf143237e07c7ff23a62fee425" translate="yes" xml:space="preserve">
          <source>Therefore, you can annotate your component classes with &lt;code&gt;@Component&lt;/code&gt;,
  but by annotating them with &lt;code&gt;@Repository&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, or &lt;code&gt;@Controller&lt;/code&gt;
  instead, your classes are more properly suited for processing by tools
  or associating with aspects. For example, these stereotype annotations
  make ideal targets for pointcuts.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; 로&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 컴포넌트 클래스에 주석을 달 수 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있지만 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대신 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 또는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; 로&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 주석을 달면 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;클래스가 도구로 처리하거나 측면과 연관시키는 데 더 적합합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어, 이러한 스테레오 타입 주석은 포인트 컷에 이상적인 대상이됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="058eac42dd2f1563bae1c74a367ecbd5fb342e14" translate="yes" xml:space="preserve">
          <source>These are all StereoType annotations.this are usefull for the making our classes as spring beans in ioc container,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것들은 모두 StereoType 주석입니다. 이것은 클래스를 ioc 컨테이너에서 스프링 빈으로 만드는 데 유용합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9ea8e1c357fb5f85e91ae49d1be94f92a6e71d20" translate="yes" xml:space="preserve">
          <source>They are almost the same - all of them mean that the class is a Spring bean. &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt; and &lt;code&gt;@Controller&lt;/code&gt; are specialized &lt;code&gt;@Component&lt;/code&gt;s. You can choose to perform specific actions with them. For example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그들은 거의 동일합니다-모두 클래스가 스프링 콩임을 의미합니다. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 특수 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그들과 함께 특정 작업을 수행하도록 선택할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들면 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="de905c43b0b2db7baa533c33546ac95732270a99" translate="yes" xml:space="preserve">
          <source>This annotation is a specialized version of &lt;code&gt;@Controller&lt;/code&gt; which adds
&lt;code&gt;@Controller&lt;/code&gt; and &lt;code&gt;@ResponseBody&lt;/code&gt; annotation automatically. so we do not have to add &lt;code&gt;@ResponseBody&lt;/code&gt; to our mapping methods. That means
&lt;code&gt;@ResponseBody&lt;/code&gt; is default active.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 주석은 &lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt; &lt;code&gt;@ResponseBody&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 주석을 자동으로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;추가 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하는 특수화 된 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 버전입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 &lt;/font&gt; &lt;code&gt;@ResponseBody&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 매핑 메소드 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에 추가 할 필요가 없습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt; &lt;code&gt;@ResponseBody&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 기본적으로 활성화되어 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있음을 의미 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ad914a8e008667b3f088395a61125ea2021b0679" translate="yes" xml:space="preserve">
          <source>This bean post processor adds an advisor to any bean that&amp;rsquo;s annotated with &lt;code&gt;@Repository&lt;/code&gt; so that any platform-specific exceptions are caught and then re-thrown as one of Spring&amp;rsquo;s unchecked data access exceptions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 bean post processor는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; 로&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 주석이 달린 모든 bean에 권고자를 추가하여 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;플랫폼 별 예외를 포착 한 다음 Spring의 확인되지 않은 데이터 액세스 예외 중 하나로 다시 생각합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dfd7db7acb2d6fc63a6f62d3d5b6144a16676402" translate="yes" xml:space="preserve">
          <source>This is a general-purpose stereotype annotation indicating that the class is a spring component.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;클래스가 스프링 컴포넌트임을 나타내는 범용 스테레오 타입 어노테이션입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29446177a2ee21e508666cc155eefb09a624a7e7" translate="yes" xml:space="preserve">
          <source>This is to indicate that the class defines a data repository.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 클래스가 데이터 저장소를 정의 함을 나타냅니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="99a7f349c5d5d0a3edcbffea295e6e3e4fdda6c3" translate="yes" xml:space="preserve">
          <source>Thus, if you are choosing between using &lt;code&gt;@Component&lt;/code&gt; or &lt;code&gt;@Service&lt;/code&gt; for
  your service layer, &lt;code&gt;@Service&lt;/code&gt; is clearly the better choice. Similarly,
  as stated above, &lt;code&gt;@Repository&lt;/code&gt; is already supported as a marker for
  automatic exception translation in your persistence layer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;서비스 계층에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 또는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용하도록 선택하는 경우 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 더 나은 선택입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;마찬가지로 위에서 언급했듯이 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 이미 퍼시스턴스 레이어에서 자동 예외 변환을위한 마커로 지원됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3a3c5bd3d66266193b40ff5b6c65f686b1bcdc89" translate="yes" xml:space="preserve">
          <source>Thus, it&amp;rsquo;s not wrong to say that &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt; and &lt;code&gt;@Repository&lt;/code&gt; are special types of &lt;code&gt;@Component&lt;/code&gt; annotation. &lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; picks them up and registers their following classes as beans, just as if they were annotated with &lt;code&gt;@Component&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 특수한 유형의 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 주석 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이라고 말하는 것은 잘못이 아닙니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 로 주석이 달린 것처럼 다음 클래스를 Bean으로 등록합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d69d4160a585819959849c4eab806d317481f0d" translate="yes" xml:space="preserve">
          <source>To represent persistence layer components: &lt;code&gt;@Repository&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;지속성 계층 구성 요소를 나타내려면 : &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ead03f90db54e666450ff5accb8191e98e8faf2f" translate="yes" xml:space="preserve">
          <source>To represent presentation layer components: &lt;code&gt;@Controller&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프리젠 테이션 레이어 컴포넌트를 나타내려면 : &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84f553135d1580aab45e503274f77780d545545a" translate="yes" xml:space="preserve">
          <source>To represent service layer components: &lt;code&gt;@Service&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;서비스 계층 구성 요소를 나타내려면 : &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2000222464e633cfff2ab4ceb90805664f7f5cec" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;@Repository&lt;/code&gt; for all your stored proc DB connections</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 저장된 proc DB 연결에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5c1728a39750ffa3f74da82312bfc52d8e3e74c7" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;@Service&lt;/code&gt; for all your web service type of DB connections</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 웹 서비스 유형의 DB 연결에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc984e733a64481ce8437080e217ab61c76e668e" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;@Service&lt;/code&gt; and &lt;code&gt;@Repository&lt;/code&gt; annotations are important from database connection perspective.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 사용 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 주석 데이터베이스 연결의 관점에서 중요하다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="395a1505737478df9357bdcff0d4b671ab87cde1" translate="yes" xml:space="preserve">
          <source>We can answer this according to java standard</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우리는 자바 표준에 따라 이것에 대답 할 수 있습니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="512d97efffc0e0cfedd41715bd27b58f51ad13f2" translate="yes" xml:space="preserve">
          <source>We can directly use &lt;code&gt;@Component&lt;/code&gt; for each and every bean, but for better understanding and maintainability of a large application, we use &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;각각의 빈마다 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;직접 사용할 수 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있지만, 큰 응용 프로그램의 이해와 유지 관리 성을 높이기 위해 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; 를 사용&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="350545f8a4491c80a200eba5f89f14af6638afce" translate="yes" xml:space="preserve">
          <source>We cannot switch this annotation with any other like &lt;code&gt;@Service&lt;/code&gt; or &lt;code&gt;@Repository&lt;/code&gt;, even though they look same. 
The dispatcher scans the classes annotated with &lt;code&gt;@Controller&lt;/code&gt; and detects methods annotated with &lt;code&gt;@RequestMapping&lt;/code&gt; annotations within them. We can use &lt;code&gt;@RequestMapping&lt;/code&gt; on/in only those methods whose classes are annotated with &lt;code&gt;@Controller&lt;/code&gt; and it will &lt;strong&gt;NOT&lt;/strong&gt; work with &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt; etc...</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 또는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 같은 다른 주석 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;으로는&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이 주석을 전환 할 수 없습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. 디스패처는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; 로&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 주석이 달린 클래스를 스캔하고 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 주석으로 주석이 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;달린 메소드를 감지 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 클래스에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 로 주석이 달린 메소드에서만 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용하거나 &lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 등에서 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;작동 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하지 않습니다&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="987a0f0b1f106a0619a7eb85604b381949c7a0f7" translate="yes" xml:space="preserve">
          <source>What's the difference between @Component, @Repository &amp; @Service annotations in Spring</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring에서 @Component, @Repository 및 @Service 주석의 차이점은 무엇입니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cefd45d96e7811a0c9b997ad8106965b84732c2a" translate="yes" xml:space="preserve">
          <source>Why use @Repository, @Service, @Controller over @Component?
We can mark our component classes with @Component, but if instead we use the alternative that adapts to the expected functionality. Our classes are better suited to the functionality expected in each particular case.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component보다 @Repository, @Service, @Controller를 사용하는 이유는 무엇입니까? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컴포넌트 클래스를 @Component로 표시 할 수 있지만, 대신 예상되는 기능에 맞는 대안을 사용합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우리 수업은 각각의 특정한 경우에 예상되는 기능에 더 적합합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4330aa1f435a8813e33467c458b9c523669cfb79" translate="yes" xml:space="preserve">
          <source>above declared annotations are special because when we add &lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; into xxx-servlet.xml file ,spring will automatically create the object of those classes which are annotated with above annotation during context creation/loading phase.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위에서 선언 된 주석은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;xxx-servlet.xml 파일 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 추가 할 때 컨텍스트 생성 /로드 단계에서 주석으로 주석이 달린 클래스의 객체를 자동으로 생성 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하기 때문에 특별 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e564121cda727185523b754490351a631d26c406" translate="yes" xml:space="preserve">
          <source>all these annotations are type of stereo type type of annotation,the difference between these three annotations are</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 모든 주석은 스테레오 유형의 주석 유형이며,이 세 주석의 차이점은&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="18f4b81d4f3a4621f6153578c2a46358cc403380" translate="yes" xml:space="preserve">
          <source>and a &lt;code&gt;Repository&lt;/code&gt; as per Eric Evans,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Eric Evans에 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따른 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db875ee55092e2c0f3365edd019bd8c053b32ca1" translate="yes" xml:space="preserve">
          <source>and you can get the bean object by</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 당신은 콩 객체를 얻을 수 있습니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7e2fb968a45f3910e02ba7ce0b0ea0809f985cc3" translate="yes" xml:space="preserve">
          <source>for example</source>
          <target state="translated">예를 들어</target>
        </trans-unit>
        <trans-unit id="3e13d8fce6fc1b32339adca9dc15bc225249e64d" translate="yes" xml:space="preserve">
          <source>or else you can use &lt;code&gt;@Component&lt;/code&gt; for all of them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그렇지 않으면 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 모두 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용할 수 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab2c9bc11b9d93d73219ddd793d8bd6c8060c0db" translate="yes" xml:space="preserve">
          <source>reference :- &lt;a href=&quot;https://docs.spring.io/spring/docs/3.0.0.M3/reference/html/ch04s12.html&quot;&gt;Spring Documentation - Classpath scanning, managed components and writing configurations using Java &lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;참조 : &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/3.0.0.M3/reference/html/ch04s12.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-Spring Documentation-Java를 사용한 클래스 경로 스캐닝, 관리 컴포넌트 및 쓰기 구성&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9ef3608f431d68a9480040ab93b4dc1c90c79240" translate="yes" xml:space="preserve">
          <source>whenever we adds the &lt;code&gt;@Service&lt;/code&gt; or &lt;code&gt;@Repositroy&lt;/code&gt; or &lt;code&gt;@Controller&lt;/code&gt; annotation by default &lt;code&gt;@Component&lt;/code&gt; annotation is going to existence on top of the class</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 또는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repositroy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 또는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 주석을 기본적으로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;추가 할 때마다 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 주석은 클래스 위에 존재합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
