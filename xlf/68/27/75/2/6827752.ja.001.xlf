<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/6827752">
    <body>
      <group id="6827752">
        <trans-unit id="c52bb2477a9cac0236f8c69a02e58e30e1dca449" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; only scans &lt;code&gt;@Component&lt;/code&gt; and does not look for &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt; and &lt;code&gt;@Repository&lt;/code&gt; in general. They are scanned because they themselves are annotated with &lt;code&gt;@Component&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のみのスキャン&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と探していません&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一般的に。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それら自体が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; で&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注釈されているため、スキャンされ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c0a46bb7fbef933e5b2ac6ddf73b73c53e57521c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Autowired&lt;/code&gt; - Let Spring auto-wire other beans into your classes using @Autowired annotation.</source>
          <target state="translated">&lt;code&gt;@Autowired&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -Springが@Autowiredアノテーションを使用して他のBeanをクラスに自動接続するようにします。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4bc7bd8bd6588b120c74696f648e62dc842860f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Component&lt;/code&gt; - Annotate your other components (for example REST resource classes) with a component stereotype.</source>
          <target state="translated">&lt;code&gt;@Component&lt;/code&gt; -&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他のコンポーネント（RESTリソースクラスなど）にコンポーネントステレオタイプの注釈を付けます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f60b2f1e94f9c7d209679c9203afa153d9aa612a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Component&lt;/code&gt; - Annotate your other components (for example REST resource classes) with component stereotype.</source>
          <target state="translated">&lt;code&gt;@Component&lt;/code&gt; -&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他のコンポーネント（RESTリソースクラスなど）にコンポーネントステレオタイプの注釈を付けます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d27eada60b5a322fd96c7024833dd0f559a9929d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Component&lt;/code&gt; = Actual Components ( Beans )</source>
          <target state="translated">&lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; =実際のコンポーネント（Beans）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c962e54fcc2f756b514e4c953c8635938eddef70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Component&lt;/code&gt; is a generic stereotype for any Spring-managed component. &lt;code&gt;@Repository&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, and &lt;code&gt;@Controller&lt;/code&gt; are specializations of &lt;code&gt;@Component&lt;/code&gt; for more specific use cases, for example, in the persistence, service, and presentation layers, respectively.</source>
          <target state="translated">&lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、Springで管理されるコンポーネントの一般的なステレオタイプです。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、及び&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の特殊化され&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それぞれより具体的なユースケースのために、例えば、持続性で、サービス、およびプレゼンテーション層、。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a86102aa2acb8d184a67117632ec2f5f96e461e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Component&lt;/code&gt; is the top level generic annotation which makes the annotated bean to be scanned and available in the DI container</source>
          <target state="translated">&lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、アノテーション付きBeanをスキャンしてDIコンテナーで使用できるようにする最上位の汎用アノテーションです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="53d51bed880db024f2154f22c00ca38294357d40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Component&lt;/code&gt;: It is a basic auto component scan annotation, it indicates annotated class is an auto scan component.</source>
          <target state="translated">&lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：基本的な自動コンポーネントスキャンアノテーションであり、アノテーション付きクラスが自動スキャンコンポーネントであることを示します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a85c783976ded2ec7bf340636fcbf94c846af9e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller:&lt;/code&gt; where your &lt;strong&gt;request&lt;/strong&gt;&lt;strong&gt;mapping from presentation page&lt;/strong&gt; done i.e. Presentation layer won't go to any other file it goes directly to &lt;code&gt;@Controller&lt;/code&gt; class and checks for requested path in &lt;code&gt;@RequestMapping&lt;/code&gt; annotation which written before method calls if necessary.</source>
          <target state="translated">&lt;code&gt;@Controller:&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたの&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要求の&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンテーションページからマッピング&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンテーション層、つまり行われ、それが直接行き、他のファイルに行くことはありません&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中に要求されたパスのクラスをチェック&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必要に応じて、メソッドの呼び出しの前に書かれた注釈を。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="42bdae02eaf700513be4523a71747e53f7a3713e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller&lt;/code&gt; -&amp;gt; Classes annotated with this, are intended to receive a request from the client side. The first request comes to the Dispatcher Servlet, from where it passes the request to the particular controller using the value of &lt;code&gt;@RequestMapping&lt;/code&gt; annotation.</source>
          <target state="translated">&lt;code&gt;@Controller&lt;/code&gt; -&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;gt;これで注釈が付けられたクラスは、クライアント側から要求を受け取ることを目的としています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初のリクエストはDispatcherサーブレットに送信され、そこから&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アノテーションの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値を使用して特定のコントローラーにリクエストを渡し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1e287e07020b7f5854ebd49f7b8fe81dbef2fb61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller&lt;/code&gt; = @Component ( Internal Annotation ) + Presentation layer Features</source>
          <target state="translated">&lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; = @Component（内部注釈）+プレゼンテーション層の機能&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="51e8f89f260fc43722b23090ae1ac2abb49a46dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller&lt;/code&gt; beans are used by spring-mvc</source>
          <target state="translated">&lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Beanは、spring-mvcによって使用されます&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ebc68bedd3b3269aebc658ea919ace4c2ba2c5e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller&lt;/code&gt; is used to mark classes as Spring MVC Controller. This
annotation is just a specialized version of &lt;code&gt;@Component&lt;/code&gt; and it
allows the controller classes to be auto-detected based on classpath
scanning.</source>
          <target state="translated">&lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、クラスをSpring MVCコントローラーとしてマークするために使用されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このアノテーションは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特別なバージョンで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、クラスパススキャンに基づいてコントローラークラスを自動検出できるようにします。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="60acfe2763e013acff10de2e90dc737721af301d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller&lt;/code&gt; you can return a view in Spring web MVC.</source>
          <target state="translated">&lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Spring MVCでビューを返すことができます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1867322fce2cf8c6945fe5c011aae47dc3614e97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller&lt;/code&gt;: Annotated class indicates that it is a controller component, and mainly used at the presentation layer.</source>
          <target state="translated">&lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：注釈付きクラスは、それがコントローラーコンポーネントであり、主にプレゼンテーションレイヤーで使用されることを示します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="755f30ff16842ff20dc3434aef8ec3f81ac01294" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt; - Annotate all your DAO classes with @Repository. All your database access logic should be in DAO classes.</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; -&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべてのDAOクラスに@Repositoryで注釈を付けます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべてのデータベースアクセスロジックはDAOクラスにある必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6435804414b2b59a17da073be0c6c40aee98bcb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt; -&amp;gt; Classes annotated with this, are intended to connect with database. It can also be considered as DAO(Data Access Object) layer. This layer should be restricted to CRUD (create, retrieve, update, delete) operations only.
If any manipulation is required, data should be sent be send back to @Service layer.</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; -&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;gt;これで注釈されたクラスは、データベースと接続することを目的としています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DAO（データアクセスオブジェクト）レイヤーと見なすこともできます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このレイヤーは、CRUD（作成、取得、更新、削除）操作のみに制限する必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;操作が必要な場合は、データを@Serviceレイヤーに送り返す必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7f0db2ae59ef409d76fc1ebc571b3ccadeeeb808" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt; = @Component ( Internal Annotation ) + Data Layer Features ( use for handling the Domain Beans )</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; = @Component（内部アノテーション）+データレイヤー機能（ドメインBeanの処理に使用）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="75f13022996e28a8ab5fca548f247847bf7f3ca1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt; annotation will add some functionality to your bean (some automatic exception translation to your bean persistence layer).</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アノテーションは、Beanにいくつかの機能を追加します（Bean永続化レイヤーへのいくつかの自動例外変換）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="efe183c2a1873030970b25581ebc3552dca4d171" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt; beans are eligible for persistence exception translation</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Beanは永続化例外の変換に適格です&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7f44b3951a7fab8002b541c86593b0e72bbe5364" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt; is specialized annotation and it brings the feature of converting all the unchecked exceptions from the DAO classes</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は特殊なアノテーションであり、DAOクラスからのすべての未チェックの例外を変換する機能を提供します&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3354d3ec0c176e3f31600d85600a2011385ca78b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt;: This is Persistence layer(Data Access Layer) of application which used to get data from the database. i.e. &lt;strong&gt;all the Database related operations are done by the repository.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：これは、データベースからデータを取得するために使用されたアプリケーションの永続層（データアクセス層）です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、データベースに関連するすべての操作はリポジトリによって行われます。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9acd254fd2bbf9f9bc57bc5af90b23eddd3bc958" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt;: You need to use this annotation within the persistence layer, this acts like database repository.</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：永続層内でこのアノテーションを使用する必要があります。これはデータベースリポジトリのように機能します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="90be53f5cbdd981a8c2355b766d9fff306b6775a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@RestController&lt;/code&gt; also converts the response to &lt;code&gt;JSON/XML automatically&lt;/code&gt; as &lt;code&gt;@ResponseBody&lt;/code&gt; makes the returned objects to something that could be in the body, &lt;code&gt;e.g. JSON or XML&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@RestController&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;またに応じて変換し&lt;/font&gt;&lt;/font&gt; &lt;code&gt;JSON/XML automatically&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通り&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@ResponseBody&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、体内にある可能性が何かに返されたオブジェクトを作る&lt;/font&gt;&lt;/font&gt; &lt;code&gt;e.g. JSON or XML&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd9ce01b50aaf96a042df6119c17a292c30ebb61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt; - Annotate all your service classes with @Service. This layer knows the unit of work. All your business logic will be in Service classes. Generally methods of service layer are covered under transaction. You can make multiple DAO calls from service method, if one transaction fails all transactions should rollback.</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; -&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべてのサービスクラスに@Serviceアノテーションを付けます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このレイヤーは作業単位を認識しています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべてのビジネスロジックはServiceクラスにあります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通常、サービス層のメソッドはトランザクションでカバーされます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1つのトランザクションが失敗した場合、すべてのトランザクションをロールバックする必要がある場合、サービスメソッドから複数のDAO呼び出しを行うことができます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="65f7a4157131313ba9d9c7de0c0c2ec078d920ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt; -&amp;gt; Classes annotated with this, are intended to manipulate data, that we receive from the client or fetch from the database. All the manipulation with data should be done in this layer.</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; -&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;gt;これで注釈が付けられたクラスは、クライアントから受信するか、データベースからフェッチするデータを操作することを目的としています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;データを使用したすべての操作は、このレイヤーで行う必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="57f5d1af5bcd96d8cf4535d91fa857ae7afca44d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt; = @Component ( Internal Annotation ) + Service layer Features</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; = @Component（内部アノテーション）+サービスレイヤーの機能&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed4dc909a6dc9f48489b83955476a753cfb55340" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt; beans hold the business logic and call methods in the repository layer.</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Beanは、ビジネスロジックを保持し、リポジトリレイヤーでメソッドを呼び出します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="17a69c480a6a788c48c3fc84d2577526d41ced15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt; is specialized annotation. it do not bring any new feature as of now but it clarifies the intent of the bean</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は特別なアノテーションです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;現在のところ新機能はありませんが、Beanの意図が明確になっています&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a3e80f101ac8ba58423611e9a359db720a6cddb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt;: All business logic is here i.e. Data related calculations and all.This annotation of business layer in which our user not directly call persistence method so it will call this method using this annotation. &lt;strong&gt;It will request @Repository as per user request&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：すべてのビジネスロジックがここにあります。つまり、データ関連の計算とすべてです。このビジネスレイヤーのアノテーションでは、ユーザーが永続メソッドを直接呼び出さないため、このアノテーションを使用してこのメ​​ソッドを呼び出します。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ユーザーのリクエストに応じて@Repositoryをリクエストします&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a1c1d2514399a89419fa8c725118147960f9a19d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt;: It indicates annotated class is a Service component in the business layer.</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：注釈付きクラスがビジネスレイヤーのサービスコンポーネントであることを示します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f869cdae24718975bd86c139b1a4cf4ab5f8872a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Above mentioned is one very common scenario, there are many more use cases of why to use three annotations.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記は非常に一般的なシナリオの1つですが、3つのアノテーションを使用する理由は他にもたくさんあります。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e271c23aaca1c5d21764465c2548e1b0ba0791c5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Repository&lt;/em&gt; and &lt;em&gt;Service&lt;/em&gt; are children of &lt;em&gt;Component&lt;/em&gt; annotation. So, all of them are &lt;em&gt;Component&lt;/em&gt;. &lt;em&gt;Repository&lt;/em&gt; and &lt;em&gt;Service&lt;/em&gt; just expand it. 
How exactly?
&lt;em&gt;Service&lt;/em&gt; has only ideological difference: we use it for services. &lt;em&gt;Repository&lt;/em&gt; has particular exception handler.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リポジトリ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サービス&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンポーネント&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アノテーションの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;子です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、それらはすべて&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Component&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リポジトリ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サービスは&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それを拡張するだけです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;正確には？ &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サービスに&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はイデオロギー上の違いしかない：私たちはそれをサービスに使用します。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リポジトリに&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は特定の例外ハンドラがあります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ae222d32c4733e99013c09b00a14f25cb9fd89f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;@Controller&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;@Controller&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fe5c6f1fd0c4469ec22b1b64df1d3f9ce7148e34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;@Controller&lt;/code&gt;&lt;/strong&gt; vs &lt;strong&gt;&lt;code&gt;RestController&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;RestController&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d02dda508b6792bef5b289438aab0dae9f34a654" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;@RestController&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;@RestController&lt;/code&gt;&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="24d9897af3ded3ed27b764d17d671273337c87e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;What else?&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ほかに何か？&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02b386ae3ef0df690e5ff6fbaf501f2daa6c5f59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;What&amp;rsquo;s special about @Component&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Componentの特別な点&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3db920e461fbae37694bbd0baa0837165ffcd644" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;What&amp;rsquo;s special about @Controller?&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Controllerの何が特別なのですか？&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c947974b0ed3abe583c5d614ea1dae412c1bfd7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;What&amp;rsquo;s special about @Repository?&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repositoryの何が特別なのですか？&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="44531a49d4e8b2e827b3cb7707c16eb31eb8085f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;What&amp;rsquo;s special about @Service?&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Serviceの特別な点は何ですか？&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="01ccc260c2cb635c23e720d73b05ea5f97b7093a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Component&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@Component&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d71c877c3a78adec6503e4663386504304e2102d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Component&lt;/strong&gt; acts as @Bean annotation in configuration class , register bean in spring context. Also it is parent for @Service, @Repository and @Controller annotation.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、設定クラスの@Beanアノテーションとして機能し、SpringコンテキストでBeanを登録します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、@ Service、@ Repository、および@Controllerアノテーションの親です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="68a54727ad6cec624faf6b13c4382e35a8734254" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Component&lt;/strong&gt;: you annotate a class &lt;code&gt;@Component&lt;/code&gt;, it tells hibernate that it is a Bean.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスに注釈を付けると、クラスが&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;であることをhibernateに伝えます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="08d89f88959bdae44be6a1bb588f2c4224fb6221" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Controller&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@Controller&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7aa7e80f0249d623ecda3e6e3746451017dfda60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Controller&lt;/strong&gt; - acts as controller in MVC pattern. The dispatcher will scan such annotated classes for mapped methods, detecting @RequestMapping annotations.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Controller&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -MVCパターンでコントローラーとして機能します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ディスパッチャーは、そのような注釈付きクラスをスキャンして、マップされたメソッドを探し、@ RequestMapping注釈を検出します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30944fd2fb61d9ebcd45f8a10a490acf26a78223" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Repository&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@Repository&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d59ee6059e619bf4112380bb8ba8a318d31487a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Repository&lt;/strong&gt; - extends @Component annotation and translate all database exceptions into 
&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/dao/DataAccessException.html&quot;&gt;DataAccessException&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - @Component注釈を拡張し、内のすべてのデータベースの例外翻訳 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/dao/DataAccessException.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DataAccessExceptionを&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4c82a84c7e004e5dbf46fdab8620acd39f117766" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Repository&lt;/strong&gt;: you annotate a class &lt;code&gt;@Repository&lt;/code&gt;, it tells hibernate it is a DAO class and treat it as DAO class. Means it makes the unchecked exceptions (thrown from DAO methods) eligible for translation into Spring &lt;code&gt;DataAccessException&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスに注釈を付けます。これにより、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;休止状態がDAOクラスであり、DAOクラスとして扱われることが&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;チェックされていない例外（DAOメソッドからスローされた）をSpring &lt;/font&gt;&lt;/font&gt; &lt;code&gt;DataAccessException&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変換できるようにすることを意味します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82c18cae0ef756fd2e697fe0e8a89527b3e4afbc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Repository&lt;/strong&gt;&lt;strong&gt;@Service&lt;/strong&gt; and &lt;strong&gt;@Controller&lt;/strong&gt; are serves as specialization of @Component for more specific use on that basis you can replace @Service to @Component but in this case you loose the specialization.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Controller&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@ Componentの&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特殊化として機能し、そのため、@ Serviceを@Componentに置き換えることができますが、この場合、特殊化は失われます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2b0d3443c7a52d182de6b0ed42e9280aef8cad71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Service, @Controller, @Repository = {@Component + some more special functionality}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@ Service、@ Controller、@ Repository = {@Component +いくつかの特別な機能}&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6521051becbb1d47181a14e3843c1fa624be1400" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Service&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@Service&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="215e20d4b229d51d2aeab8ffaded5b0e314136d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Service&lt;/strong&gt;, extends @Component annotation and has only naming difference.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は@Componentアノテーションを拡張し、名前の違いのみを持ちます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7b190c46f1884d04aa30c69d70b5df62cc53a9a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Service&lt;/strong&gt;: This tells hibernate it is a Service class where you will have &lt;code&gt;@Transactional&lt;/code&gt; etc Service layer annotations so hibernate treats it as a Service component.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：これは、Hibernateに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Transactional&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;などのサービスレイヤーアノテーション&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;付与&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;されるServiceクラスであることを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通知する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、HibernateはそれをServiceコンポーネントとして扱います。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6d1c0a0bda111c87bc1cbdf4a7e655e8ea734ff4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Difference between @Component, @Repository, @Controller &amp;amp; @Service annotations&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@ Component、@ Repository、@ Controller、@ Serviceアノテーションの違い&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="66ac77b04336b73384ca2da9c721255689dc172c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Explanation of stereotypes :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステレオタイプの説明：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cdb7da5140a2c9fbc61635d14ca6e792686c863c" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;&lt;em&gt;Note: If a class is already registered as a bean through any alternate method, like through &lt;code&gt;@Bean&lt;/code&gt; or through &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt; etc... annotations, then &lt;code&gt;@RequestMapping&lt;/code&gt; can be picked if the class is also annotated with &lt;code&gt;@RequestMapping&lt;/code&gt; annotation. But that's a different scenario.&lt;/em&gt;&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注：クラスが既に通っように、任意の別の方法を介してBeanとして登録されている場合&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Bean&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;又は介し&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;等...注釈、次いで&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスもで注釈された場合に取り出すことができる&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注釈。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、それは別のシナリオです。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="0565cbb19c0f1f95a14173024327464b4109d17e" translate="yes" xml:space="preserve">
          <source>@Component &amp;ndash; generic and can be used across application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component &amp;ndash;汎用的で、アプリケーション全体で使用できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c19cd435b45c7ce39cdcdaceb349ed963c2409e3" translate="yes" xml:space="preserve">
          <source>@Component in Spring</source>
          <target state="translated">春の@Component</target>
        </trans-unit>
        <trans-unit id="2ae1ae6a578e4e2d086f153b4357b17a600f401e" translate="yes" xml:space="preserve">
          <source>@Component is a generic stereotype for any Spring managed component.</source>
          <target state="translated">Componentは、Springが管理するコンポーネントの一般的なステレオタイプです。</target>
        </trans-unit>
        <trans-unit id="075ba1e63b8499e295328ae654616b3ac457ed4c" translate="yes" xml:space="preserve">
          <source>@Component is a generic stereotype for the components managed by Spring @Repository, @Service, and @Controller are @Component specializations for more specific uses:</source>
          <target state="translated">Componentは、Springが管理するコンポーネントの一般的なステレオタイプです。 @Repository、@Service、@Controllerは、より特定の用途のための@Componentの専門化です。</target>
        </trans-unit>
        <trans-unit id="6988be0d5c6bb12c0268a4bc1d2d64bbd996e1d7" translate="yes" xml:space="preserve">
          <source>@Component is equivalent to</source>
          <target state="translated">コンポーネントは</target>
        </trans-unit>
        <trans-unit id="e189419b60784f6f072701a0112019edf4475523" translate="yes" xml:space="preserve">
          <source>@Component, @ Repository, @ Service, @Controller:</source>
          <target state="translated">コンポーネント、@リポジトリ、@サービス、@コントローラ。</target>
        </trans-unit>
        <trans-unit id="8926cf25bf717ea2455a649c055241dbeb16a7c4" translate="yes" xml:space="preserve">
          <source>@Controller &amp;ndash; annotate
  classes at presentation layers level, mainly used in Spring MVC.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Controller &amp;ndash;主にSpring MVCで使用されるプレゼンテーション層レベルでクラスに注釈を付けます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a3bb904e5fd4d9f31ad357d460088636f9c191b" translate="yes" xml:space="preserve">
          <source>@Controller for MVC controllers</source>
          <target state="translated">MVC コントローラ用の @Controller</target>
        </trans-unit>
        <trans-unit id="4415d372a91efad7a310c7fe84b6c23fa2a9f96c" translate="yes" xml:space="preserve">
          <source>@Controller is specialized annotation which makes the bean MVC aware and allows the use of further annotation like &lt;code&gt;@RequestMapping&lt;/code&gt; and all such</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Controllerは、Bean MVCを認識させ、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;などの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;追加アノテーションを使用できるようにする&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特殊&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なアノテーションです&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="217fe57ceff049bd7161c67a27d8dcf3c690ef51" translate="yes" xml:space="preserve">
          <source>@Controller, @Service and @Repository are Specializations of @Component for specific use cases.</source>
          <target state="translated">Controller、@Service、@Repositoryは、特定のユースケースに対応するための@ComponentのSpecializationです。</target>
        </trans-unit>
        <trans-unit id="1b6ecfeaf188513038146749de2ca33e4f1505ea" translate="yes" xml:space="preserve">
          <source>@Repository &amp;ndash; annotate classes at persistence layer, which will act as
  database repository.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository &amp;ndash;データベースリポジトリとして機能する永続化層でクラスに注釈を付けます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34e70a53a8400f32673bc2dbaf054dc1b5f39ea5" translate="yes" xml:space="preserve">
          <source>@Repository for persistence</source>
          <target state="translated">永続性を確保するためのリポジトリ</target>
        </trans-unit>
        <trans-unit id="9f87cf278958424bb2ad6c92d0c7bbd86c3ecb94" translate="yes" xml:space="preserve">
          <source>@Service
  &amp;ndash; annotate classes at service layer level.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service &amp;ndash;サービスレイヤーレベルでクラスに注釈を付けます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f44b4afb62ac2bd44fd3a929667646726384ba94" translate="yes" xml:space="preserve">
          <source>@Service for services and transactions</source>
          <target state="translated">サービスとトランザクションのための@Service</target>
        </trans-unit>
        <trans-unit id="7ba2a28134b3ca42c2c6b345eb1c4e794befe840" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;@Service&lt;/code&gt; to quote spring documentation,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ドキュメントを引用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="91d02755008708aed94833e44e0aeffc9010db7e" translate="yes" xml:space="preserve">
          <source>A REPOSITORY represents all objects of a certain type as a conceptual
  set (usually emulated). It acts like a collection, except with more
  elaborate querying capability. Objects of the appropriate type are
  added and removed, and the machinery behind the REPOSITORY inserts
  them or deletes them from the database. This definition gathers a
  cohesive set of responsibilities for providing access to the roots of
  AGGREGATES from early life cycle through the end.</source>
          <target state="translated">REPOSITORYは、特定の型のすべてのオブジェクトを概念集合(通常はエミュレート)として表します。これは、より精巧なクエリ機能を持つことを除いて、コレクションのように動作します。適切な型のオブジェクトが追加されたり削除されたりしますが、REPOSITORYの背後にある機械がそれらをデータベースに挿入したり削除したりします。この定義は、初期のライフサイクルから終了までのAGREGATESのルーツへのアクセスを提供するための責任のまとまりのあるセットを収集します。</target>
        </trans-unit>
        <trans-unit id="f47b388fe44e5f55543ff7ae7b6a0d924ebef100" translate="yes" xml:space="preserve">
          <source>A SERVICE is an operation offered as an interface that stands alone in
  the model, without encapsulating state, as ENTITIES and VALUE OBJECTS
  do. SERVICES are a common pattern in technical frameworks, but they
  can also apply in the domain layer. The name service emphasizes the
  relationship with other objects. Unlike ENTITIES and VALUE OBJECTS, it
  is defined purely in terms of what it can do for a client. A SERVICE
  tends to be named for an activity, rather than an entity&amp;mdash;a verb rather
  than a noun. A SERVICE can still have an abstract, intentional
  definition; it just has a different flavor than the definition of an
  object. A SERVICE should still have a defined responsibility, and that
  responsibility and the interface fulfilling it should be defined as
  part of the domain model. Operation names should come from the
  UBIQUITOUS LANGUAGE or be introduced into it. Parameters and results
  should be domain objects. SERVICES should be used judiciously and not
  allowed to strip the ENTITIES and VALUE OBJECTS of all their behavior.
  But when an operation is actually an important domain concept, a
  SERVICE forms a natural part of a MODEL-DRIVEN DESIGN. Declared in the
  model as a SERVICE, rather than as a phony object that doesn't
  actually represent anything, the standalone operation will not mislead
  anyone.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SERVICEは、ENTITIESやVALUE OBJECTSのように、状態をカプセル化せずに、モデル内でスタンドアロンのインターフェースとして提供される操作です。サービスは、テクニカルフレームワークでは一般的なパターンですが、ドメインレイヤーにも適用できます。ネームサービスは、他のオブジェクトとの関係を強調します。 ENTITIESやVALUE OBJECTSとは異なり、クライアントに対して何ができるかという観点から純粋に定義されています。 SERVICEは、エンティティではなくアクティビティ、つまり名詞ではなく動詞にちなんで名付けられる傾向があります。サービスは、抽象的で意図的な定義を持つことができます。オブジェクトの定義とは異なるフレーバーを持っているだけです。サービスには依然として責任が定義されている必要があり、その責任とそれを実行するインターフェースはドメインモデルの一部として定義されている必要があります。オペレーション名は、UBIQUITOUS LANGUAGEから取得するか、その中に導入する必要があります。パラメータと結果はドメインオブジェクトである必要があります。 SERVICESは慎重に使用する必要があり、ENTITIESとVALUE OBJECTSのすべての動作を取り除くことはできません。しかし、操作が実際に重要なドメイン概念である場合、サービスはモデル駆動型設計の自然な部分を形成します。モデルでは、実際には何も表さない偽のオブジェクトとしてではなく、SERVICEとして宣言されているため、スタンドアロンの操作によって誤解が生じることはありません。サービスは、モデル駆動型設計の自然な部分を形成します。モデルでは、実際には何も表さない偽のオブジェクトとしてではなく、SERVICEとして宣言されているため、スタンドアロンの操作によって誤解が生じることはありません。サービスは、モデル駆動型設計の自然な部分を形成します。モデルでは、実際には何も表さない偽のオブジェクトとしてではなく、SERVICEとして宣言されているため、スタンドアロンの操作によって誤解が生じることはありません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c8430209be1050ef9c81cf8f55d45b83d428418f" translate="yes" xml:space="preserve">
          <source>A class annotated with &quot;@Repository&quot; has a better translation and readable error handling with org.springframework.dao.DataAccessException. Ideal for implementing components that access data (DataAccessObject or DAO).</source>
          <target state="translated">&quot;@Repository &quot;でアノテーションされたクラスは、org.springframework.dao.DataAccessExceptionでより良い翻訳と読みやすいエラー処理を実現しています。データ(DataAccessObjectやDAO)にアクセスするコンポーネントの実装に最適です。</target>
        </trans-unit>
        <trans-unit id="6a8649297afe73083d33548e58a5b17638fa4b53" translate="yes" xml:space="preserve">
          <source>All are the same way when you inject them, &lt;strong&gt;@Repository&lt;/strong&gt; it's an interface which apply the implementation for the Repository Pattern &lt;a href=&quot;https://stackoverflow.com/questions/5166888/repository-design-pattern&quot;&gt;Repository design pattern&lt;/a&gt;, generally it's used when you are dealing with some data store or database, and you will find that, it contains multiple ready implementation for you to handle database operations; it can be  &lt;em&gt;CrudRepository&lt;/em&gt;, &lt;em&gt;JpaRepository&lt;/em&gt; etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらを注入するときはすべて同じ方法です。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Repositoryは、リポジトリパターン&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/5166888/repository-design-pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リポジトリデザインパターン&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の実装を適用するインターフェイスです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。通常、これは、データストアまたはデータベースを処理するときに使用され、複数のものが含まれていることがわかります。データベース操作を処理するための準備が整っている。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CrudRepository&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JpaRepository&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;などに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;することができます &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6d5c7ff40a6cd439fca89118f4d3196bdb0da41c" translate="yes" xml:space="preserve">
          <source>An annotated class with &quot;@Controller&quot; plays a controller role in a Spring Web MVC application</source>
          <target state="translated">アノテーションされたクラスに&quot;@Controller &quot;があると、Spring Web MVCアプリケーションでコントローラの役割を果たします。</target>
        </trans-unit>
        <trans-unit id="226f9c7ef04f761d7e503608315d9a02c54ba6ab" translate="yes" xml:space="preserve">
          <source>An annotated class with &quot;@Service&quot; plays a role in business logic services, example Facade pattern for DAO Manager (Facade) and transaction handling</source>
          <target state="translated">Service &quot;を持つアノテーションクラスは、ビジネスロジックサービスの役割を果たし、例としてDAO ManagerのFacadeパターン(Facade)とトランザクション処理</target>
        </trans-unit>
        <trans-unit id="82eb7fb789cdca7c0796a25ea6eb54cf3fa98997" translate="yes" xml:space="preserve">
          <source>Annotate other components with @Component, for example REST Resource classes.</source>
          <target state="translated">他のコンポーネントを @Component でアノテーションします。</target>
        </trans-unit>
        <trans-unit id="438148bac733e4506cfcd03045e90b60cf643030" translate="yes" xml:space="preserve">
          <source>Another thing is that you designate the components semantically to different layers.</source>
          <target state="translated">もう一つは、構成要素を意味的に異なるレイヤーに指定することです。</target>
        </trans-unit>
        <trans-unit id="e1c8aad64854b177f2f12eacee87256f59a7539f" translate="yes" xml:space="preserve">
          <source>Apart from the fact that it's used to indicate, that it's holding the business logic, there&amp;rsquo;s nothing else noticeable in this annotation; but who knows, Spring may add some additional exceptional in future.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それがビジネスロジックを保持していることを示すために使用されているという事実を除けば、この注釈には他に目立つものはありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、誰が知っているか、Springは将来さらに例外的なものを追加するかもしれません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="774e1e57c082c4559eab60f3dc8b0a7778c5aacb" translate="yes" xml:space="preserve">
          <source>As many of the answers already state what these annotations are used for, we'll here focus on some minor differences among them.</source>
          <target state="translated">回答の多くは、すでにこれらの注釈が何に使用されているかを述べているので、ここではそれらの間のいくつかの小さな違いに焦点を当ててみましょう。</target>
        </trans-unit>
        <trans-unit id="a96409f0b3e24141f785ed6967bd54c0cee54a7a" translate="yes" xml:space="preserve">
          <source>But spring user these different annotations in different for the specific use, for example:</source>
          <target state="translated">しかし、春のユーザーは、特定の用途のために、例えば、これらの異なるアノテーションを異なる。</target>
        </trans-unit>
        <trans-unit id="2e7ed5de866f818fd7632c8378ac9d611c644ab0" translate="yes" xml:space="preserve">
          <source>Can &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Repository.html&quot;&gt;&lt;code&gt;@Repository&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Service.html&quot;&gt;&lt;code&gt;@Service&lt;/code&gt;&lt;/a&gt; annotations be used interchangeably in Spring or do they provide any particular functionality besides acting as a notation device?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Repository.html&quot;&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、および&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Service.html&quot;&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アノテーションは、Springで交換可能に使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;か&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それとも&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表記デバイスとして機能する以外に特定の機能を提供しますか？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="05959bd7bd4046316957d11cac98f16f60eec006" translate="yes" xml:space="preserve">
          <source>Controllers just do stuff like dispatching, forwarding, calling service methods etc.</source>
          <target state="translated">コントローラはディスパッチや転送、サービスメソッドの呼び出しなどを行うだけです。</target>
        </trans-unit>
        <trans-unit id="5f1b1659d1c790ecfe93af1bc16ee886f5f8f7bd" translate="yes" xml:space="preserve">
          <source>Differences between @Component, @Repository, @Controller and @Service</source>
          <target state="translated">コンポーネント、@リポジトリ、@コントローラ、@サービスの違い</target>
        </trans-unit>
        <trans-unit id="108530447972b523e2d373bdb632a25c26021ef2" translate="yes" xml:space="preserve">
          <source>Even if we interchange @Component or @Repository or @service</source>
          <target state="translated">コンポーネントやリポジトリやサービスを入れ替えても</target>
        </trans-unit>
        <trans-unit id="fb3e3dc324e182ca9b656d76a3d7ce9de027ff17" translate="yes" xml:space="preserve">
          <source>Finally the &lt;strong&gt;@Component&lt;/strong&gt;, this is the generic form for registered beans in Spring, that's spring is always looking for bean marked with @Component to be registered, then both @Service and @Repository are special cases of @Component, however the common use case for component is when you're making something purely technical not for covering direct business case! like formatting dates or handing special request serialization mechanism and so on.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最後に&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、これはSpringで登録されたBeanの一般的な形式です。つまり、Springは常に@ComponentでマークされたBeanを登録対象として探します。@ Serviceと@Repositoryはどちらも@Componentの特殊なケースですが、一般的な使用例コンポーネントの場合は、直接的なビジネスケースをカバーするためではなく、純粋に技術的なものを作成する場合です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;日付をフォーマットしたり、特殊な要求のシリアル化メカニズムを処理したりするようなものです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9f0261eacd2baa531daae71e46b0f60617be49df" translate="yes" xml:space="preserve">
          <source>First point worth highlighting again is that &lt;strong&gt;with respect to scan-auto-detection and dependency injection for BeanDefinition&lt;/strong&gt; all these annotations (viz., @Component, @Service,
  @Repository, @Controller) are the same. &lt;strong&gt;We can use one in place
  of another and can still get our way around.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もう一度強調する価値のある最初の点は、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;BeanDefinitionのスキャン自動検出と依存性注入に関して&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、これらのすべての注釈（つまり、@ Component、@ Service、@ Repository、@ Controller）が同じであることです。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;別のものの代わりに使用することができ、それでも回避することができます。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dae40ac0e6509431287b6fc01d6ddd4f16209179" translate="yes" xml:space="preserve">
          <source>First the &lt;strong&gt;Similarity&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初に&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;類似点&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="60d63f919d7b29919cbe50d8a11dcefc13043550" translate="yes" xml:space="preserve">
          <source>For example recently I made:</source>
          <target state="translated">例えば最近私は作った。</target>
        </trans-unit>
        <trans-unit id="7f633a4de5a6fad5c4d8ba29d7323985965ecde0" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-stereotype-annotations&quot;&gt;Spring Documentation&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-stereotype-annotations&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Springドキュメント&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd6033d5effd839344b23f051f6dad9c015a7e91" translate="yes" xml:space="preserve">
          <source>From the Spring source code:</source>
          <target state="translated">Springのソースコードから。</target>
        </trans-unit>
        <trans-unit id="c399a887e5a285d63699e02b5d8b941d0e57855a" translate="yes" xml:space="preserve">
          <source>Good enough answers are here to explain the whats-the-difference-between-component-repository-service-annotations. I would like to share the difference between &lt;code&gt;@Controller &amp;amp; @RestController&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;what-the-difference-between-component-repository-service-annotationsを説明するのに十分な答えがあります。&lt;/font&gt; &lt;code&gt;@Controller &amp;amp; @RestController&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;違いを共有したいと思い&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc7f9ea7304fd7a39962300b05ca13d8a3ae0cd5" translate="yes" xml:space="preserve">
          <source>Help developers define a better category for the competent. This categorizing may become helpful in some cases. (For example when you are using &lt;code&gt;aspect-oriented&lt;/code&gt;, these can be a good candidate for &lt;code&gt;pointcuts&lt;/code&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;開発者がコンピテントのより良いカテゴリーを定義するのを助けます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この分類は、場合によっては役立つことがあります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（たとえば&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;aspect-oriented&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用している場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、これらは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;pointcuts&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;良い候補になります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d635c1de85cee5ea3af4b392a4b9368f7868551" translate="yes" xml:space="preserve">
          <source>Here @Component is a base annotation for @Service,@Repository and @Controller annotations</source>
          <target state="translated">ここでは、@Component は @Service,@Repository,@Controller アノテーションのベースアノテーションです。</target>
        </trans-unit>
        <trans-unit id="7363505f6a586aa6429740258f3dda2647d3fbc5" translate="yes" xml:space="preserve">
          <source>Here are more &lt;a href=&quot;http://howtodoinjava.com/spring/spring-core/how-to-use-spring-component-repository-service-and-controller-annotations/&quot;&gt;details&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここではより多くのです&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://howtodoinjava.com/spring/spring-core/how-to-use-spring-component-repository-service-and-controller-annotations/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;詳細は&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ed3b4ac7f21763d162d61f6aa39be3864476bcb1" translate="yes" xml:space="preserve">
          <source>If we add @Repository on top of class then it tells that a class consisting persistence logic</source>
          <target state="translated">クラスの上に @Repository を追加すると、永続化ロジックで構成されたクラスであることがわかります。</target>
        </trans-unit>
        <trans-unit id="00838cb34513f47aee10b2f69acf45e84c1125a3" translate="yes" xml:space="preserve">
          <source>If we add @Service annotation then it tells that a role of class consisting business logic</source>
          <target state="translated">Serviceアノテーションを追加すると、ビジネスロジックで構成されるクラスの役割を伝えます。</target>
        </trans-unit>
        <trans-unit id="7465ecd9bd3b510352e72b483bfc7d63faa77863" translate="yes" xml:space="preserve">
          <source>If we add the @Component then it tells the role of class is a component class it means it is a class consisting some logic,but it
  does not tell whether a class containing a specifically business or
  persistence or controller logic so we don't use directly this
  @Component annotation</source>
          <target state="translated">もし @Component を追加すると、クラスの役割がコンポーネントクラスであることを教えてくれますが、それは何らかのロジックで構成されるクラスであることを意味します。</target>
        </trans-unit>
        <trans-unit id="a288de74244c35de7979dfbbff38f630197ec222" translate="yes" xml:space="preserve">
          <source>If we interchange their place(use &lt;code&gt;@Repository&lt;/code&gt; in place of &lt;code&gt;@Controller&lt;/code&gt;), our application will work fine.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらの場所を交換すると（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）、アプリケーションは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;正常&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に動作します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1eb25941af3c497f8a5ce8bd6f65690000953687" translate="yes" xml:space="preserve">
          <source>If you are using spring MVC, the &lt;code&gt;@RequestMapping&lt;/code&gt; can only be added to classes which are annotated by &lt;code&gt;@Controller&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは春MVCを使用している場合は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;だけで注釈されたクラスに追加することができ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ebfaeb082fcf318a425dd207d5a1a54a58f44649" translate="yes" xml:space="preserve">
          <source>If you do not use the proper annotations, you may face commit exceptions overridden by rollback transactions. You will see exceptions during stress load test that is related to roll back JDBC transactions.</source>
          <target state="translated">適切なアノテーションを使用しないと、ロールバックトランザクションによってオーバーライドされるコミット例外に直面する可能性があります。JDBC トランザクションのロールバックに関連したストレス負荷テスト中に例外が発生します。</target>
        </trans-unit>
        <trans-unit id="99e6cddbe71afbd4fa8a1d1bba72430392222c97" translate="yes" xml:space="preserve">
          <source>If you look at domain driven design by eric evans,</source>
          <target state="translated">エリック・エヴァンスのドメイン・ドリブン・デザインを見てみると</target>
        </trans-unit>
        <trans-unit id="2d9913d9dc88af8dacca28534e00dbbf0e041820" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;@RestController&lt;/code&gt; you cannot return a view (By using
&lt;code&gt;Viewresolver&lt;/code&gt; in Spring/Spring-Boot)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;@RestController&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用する場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、ビューを返すことはできません（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring / Spring-Bootで&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Viewresolver&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用することにより &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8b5dacb446cf84e727c664735181a4440878cdea" translate="yes" xml:space="preserve">
          <source>Imagine if there were only one annotation @Controller, then this component will have dispatching, business logic and accessing database all mixed, so dirty code!</source>
          <target state="translated">もし @Controller のアノテーションが一つしかなかったら、このコンポーネントはディスパッチ、ビジネスロジック、データベースへのアクセスが混在していて、汚いコードになってしまうでしょう。</target>
        </trans-unit>
        <trans-unit id="9343295b80ac0e2bd6b361283d8e53172f671469" translate="yes" xml:space="preserve">
          <source>In Spring 2.0 and later, the &lt;code&gt;@Repository&lt;/code&gt; annotation is a marker for
  any class that fulfills the role or stereotype (also known as Data
  Access Object or DAO) of a repository. Among the uses of this marker
  is the automatic translation of exceptions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring 2.0以降では、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アノテーションは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リポジトリ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の役割またはステレオタイプ（データアクセスオブジェクトまたはDAOとも呼ばれる）を満たすクラスのマーカーです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このマーカーの使用には、例外の自動翻訳があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8b7350be16af05d3f28297bf4fd50c42a92bb6f5" translate="yes" xml:space="preserve">
          <source>In Spring 4, latest version:</source>
          <target state="translated">Spring 4では、最新版。</target>
        </trans-unit>
        <trans-unit id="d3f07103494a99afd3d9f5749a39ec3f45c77438" translate="yes" xml:space="preserve">
          <source>In Spring &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Controller&lt;/code&gt;, and &lt;code&gt;@Repository&lt;/code&gt; are Stereotype annotations which are used for:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;春に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、及び&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ために使用されるステレオタイプの注釈です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e3a6348ec28746c35a4737921fc5757d9d481b7f" translate="yes" xml:space="preserve">
          <source>In addition to pointing out, that this is an &lt;em&gt;Annotation based Configuration&lt;/em&gt;, &lt;code&gt;@Repository&lt;/code&gt;&amp;rsquo;s job is to catch platform specific exceptions and re-throw them as one of Spring&amp;rsquo;s unified unchecked exception. For this, we&amp;rsquo;re provided with &lt;code&gt;PersistenceExceptionTranslationPostProcessor&lt;/code&gt;, that we are required to add in our Spring&amp;rsquo;s application context like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これが&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注釈ベースの構成&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あることを指摘することに加えて&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の仕事は、プラットフォーム固有の例外をキャッチし、それらをSpringの統合されたチェックされていない例外の1つとして再スローすることです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このため、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;PersistenceExceptionTranslationPostProcessor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が提供されます。これは、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Springのアプリケーションコンテキストに次のように追加する必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="795eec8bf0eef1012cfd63fdfb85457f9c4bf930" translate="yes" xml:space="preserve">
          <source>In order to simplify this illustration, let us consider technicality by use case, These annotations are used to be injected and as I said literally &quot;&lt;em&gt;Used to be injected&lt;/em&gt;&quot; , that mean, if you know how to use &lt;strong&gt;Dependency Injection &quot;DI&quot;&lt;/strong&gt;  and you should, then you will always look for these annotations, and by annotating the classes with these &lt;strong&gt;Stereo Types&lt;/strong&gt;, you are informing the &lt;em&gt;DI&lt;/em&gt; container to scan them to be ready for Injection on other places, this is the practical target.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この図を簡略化するために、ユースケースごとに専門性を検討してみましょう。これらの注釈は注入に使用されます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。つまり、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;文字通り「&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注入に使用されました&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」ということです。つまり、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依存性注入「DI」の&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用方法を知っていて&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 、すると、常にこれらの注釈を探し、これらの&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステレオタイプ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスに注釈を付ける&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことにより、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DI&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンテナにそれらをスキャンして他の場所でのインジェクションの準備ができるように&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通知する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことになります。これは実用的なターゲットです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="990c52936055f05ac08e35c6a319e562e44f0a62" translate="yes" xml:space="preserve">
          <source>In other words, if I have a Service class and I change the annotation from &lt;code&gt;@Service&lt;/code&gt; to &lt;code&gt;@Component&lt;/code&gt;, will it still behave the same way?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、Serviceクラスがあり、アノテーションを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に変更し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ても、同じように動作しますか？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="46a399d538f354135718b8beec0576afb824eb1a" translate="yes" xml:space="preserve">
          <source>In spring framework provides some special type of annotations,called stereotype annotations.
These are following:-</source>
          <target state="translated">Springフレームワークでは、ステレオタイプアノテーションと呼ばれる特殊なタイプのアノテーションを提供しています。これらは次のようなものです。</target>
        </trans-unit>
        <trans-unit id="d0288df0a0caa96be3fb1fcb410d17ac61873da0" translate="yes" xml:space="preserve">
          <source>Indicates that an annotated class is a &quot;&lt;a href=&quot;http://docs.spring.io/spring-framework/docs/2.5.x/api/org/springframework/stereotype/Component.html&quot;&gt;component&lt;/a&gt;&quot;. Such classes are
  considered as candidates for auto-detection when using
  annotation-based configuration and classpath scanning.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注釈付きクラスが「&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.spring.io/spring-framework/docs/2.5.x/api/org/springframework/stereotype/Component.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンポーネント&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;であることを示します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このようなクラスは、注釈ベースの構成とクラスパススキャンを使用する場合、自動検出の候補と見なされます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="603ae5b24635d9c9cc928a1fbbfc200b44fef9fb" translate="yes" xml:space="preserve">
          <source>Indicates that an annotated class is a &quot;Service&quot;, &lt;strong&gt;originally defined
  by Domain-Driven Design (Evans, 2003) as &quot;an operation offered as an
  interface that stands alone in the model, with no encapsulated state.&quot;&lt;/strong&gt;
  May also indicate that a class is a &quot;Business Service Facade&quot; (in the
  Core J2EE patterns sense), or something similar. This annotation is a
  general-purpose stereotype and individual teams may narrow their
  semantics and use as appropriate.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注釈付きクラスが「サービス」であり、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ドメイン駆動設計（Evans、2003）によって「カプセル化された状態のない、モデル内でスタンドアロンのインターフェースとして提供される操作」として最初に定義された&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことを示します&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; また、クラスが「ビジネスサービスファサード」（コアJ2EEパターンの意味で）、または類似したものであることを示す場合もあります。この注釈は汎用のステレオタイプであり、個々のチームはセマンティクスを絞り込み、必要に応じて使用できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1bcf44cc569a33a13c3a571a60f384e0548b094b" translate="yes" xml:space="preserve">
          <source>Indicates that an annotated class is a &quot;component&quot;. Such classes are considered as candidates for auto-detection when using annotation-based configuration and classpath scanning.</source>
          <target state="translated">アノテーションされたクラスが「コンポーネント」であることを示します。このようなクラスは、アノテーションベースの設定やクラスパス・スキャンを使用する際に、自動検出の候補とみなされます。</target>
        </trans-unit>
        <trans-unit id="85dfd254c334ad8fc68bd7aa1dcde048bb6a1174" translate="yes" xml:space="preserve">
          <source>It will behave the same , but one aspect is that they wont be able to catch some specific exception related to DAO instead of Repository if we use component or @ service</source>
          <target state="translated">これは同じように動作しますが、ある面では、コンポーネントや@サービスを使用した場合、リポジトリではなくDAOに関連した例外をキャッチできなくなります。</target>
        </trans-unit>
        <trans-unit id="6641643e8c8fb510696ea216a90e65385335b9a9" translate="yes" xml:space="preserve">
          <source>Just take a look at &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt; and &lt;code&gt;@Repository&lt;/code&gt; annotation definitions:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただ、見とる&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注釈の定義を：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="903bfafcdae2fa0d2a53b0efa2b6858af2cb9337" translate="yes" xml:space="preserve">
          <source>Let's say you want to Monitors the Activity of the DAO Layer only. You will write an Aspect (A class) class that does some logging before and after every method of your DAO is invoked, you are able to do that using AOP as you have three distinct Layers and are not mixed.</source>
          <target state="translated">DAOレイヤーのアクティビティだけを監視したいとしましょう。あなたは、DAOの各メソッドが呼び出される前と後にいくつかのロギングを行うAspect (Aクラス)クラスを書くことになります。</target>
        </trans-unit>
        <trans-unit id="c2629ed734c3a1b852e77ed00f1df23f518f1f94" translate="yes" xml:space="preserve">
          <source>More Detailed View</source>
          <target state="translated">より詳細なビュー</target>
        </trans-unit>
        <trans-unit id="ebb845500698520391f76f33b840d9410bf39333" translate="yes" xml:space="preserve">
          <source>Now lets move to each one; first &lt;strong&gt;@Service&lt;/strong&gt;, If you are building some logic for specific business case you need to separate that in a place which will contain your business logic, this service is normal Class or you can use it as interface if you want , and it is written like this</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に、それぞれに移動しましょう。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、特定のビジネスケースのロジックを構築している場合は、ビジネスロジックを含む場所でそれを分離する必要があります。このサービスは通常のクラスですが、必要に応じてインターフェイスとして使用することもできます。この&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="235ac4ca12c6e15fd070a83c68746376ccc0ff7f" translate="yes" xml:space="preserve">
          <source>Now you may ask why separate them: (I assume you know AOP-Aspect Oriented Programming)</source>
          <target state="translated">今、あなたはなぜそれらを分離するのかと尋ねるかもしれません。(私はあなたがAOP-アスペクト指向プログラミングを知っていると仮定します)</target>
        </trans-unit>
        <trans-unit id="0e49e54de73dcdad3023900189208d240b064830" translate="yes" xml:space="preserve">
          <source>One should choose a more specialised form of &lt;code&gt;@Component&lt;/code&gt; while annotating their class as this annotation may contain specific behavior going forward.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このアノテーションには今後の特定の動作が含まれる可能性があるため、クラスにアノテーション&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ときに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@ Componentの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;より特殊な形式を選択する必要があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fdd116a6947fffa7da31c90c4e34c869835628f6" translate="yes" xml:space="preserve">
          <source>One thing that &lt;code&gt;@Component&lt;/code&gt; offers is that you can annotate other annotations with it, and then use them the same way as &lt;code&gt;@Service&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その一つ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;申し出は、あなたがそれを他の注釈に注釈を付け、その後、同じようにそれらを使用することができるということです&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d31650711bf9f2dafab41426e9e398c7d17c0a5a" translate="yes" xml:space="preserve">
          <source>Or does the annotation also influence the behavior and functionality of the class?</source>
          <target state="translated">それとも、アノテーションはクラスの動作や機能にも影響を与えるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="a06c6eb35e880fc6c2fdd09687a380413e6a28fa" translate="yes" xml:space="preserve">
          <source>Originally answered &lt;a href=&quot;https://stackoverflow.com/questions/16051656/advantages-of-using-spring-stereotypes/16105106#16105106&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もともと&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/16051656/advantages-of-using-spring-stereotypes/16105106#16105106&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;答え&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;た&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b6262057e07ae846d043a86d7e9fee68034d9861" translate="yes" xml:space="preserve">
          <source>Other class-level annotations may be considered as identifying a
  component as well, typically a special kind of component: e.g. the
  @Repository annotation or AspectJ's @Aspect annotation.</source>
          <target state="translated">他のクラスレベルのアノテーションは、コンポーネントを識別するものとみなされるかもしれませんが、典型的には特別な種類のコンポーネントです。</target>
        </trans-unit>
        <trans-unit id="0c3bd2feae7e8a7044ad1d68132cdba2cae4dd29" translate="yes" xml:space="preserve">
          <source>Plus &lt;code&gt;@Service&lt;/code&gt; is advance of &lt;code&gt;@Component&lt;/code&gt;. Assume the bean class name is &lt;code&gt;CustomerService&lt;/code&gt;, since you did not choose XML bean configuration way so you annotated the bean with &lt;code&gt;@Component&lt;/code&gt; to indicate it as a Bean. So while getting the bean object &lt;code&gt;CustomerService cust = (CustomerService)context.getBean(&quot;customerService&quot;);&lt;/code&gt; By default, Spring will lower case the first character of the component &amp;ndash; from &amp;lsquo;CustomerService&amp;rsquo; to &amp;lsquo;customerService&amp;rsquo;. And you can retrieve this component with name &amp;lsquo;customerService&amp;rsquo;.
But if you use &lt;code&gt;@Service&lt;/code&gt; annotation for the bean class you can provide a specific bean name by</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さらに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; の拡張&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;XML Beanの設定方法を選択しなかったので&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、Beanクラス名が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;CustomerService&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;である&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と想定し、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Beanに注釈を付けて、Beanである&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;こと&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を示します。したがって、Beanオブジェクトを取得する際に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;CustomerService cust = (CustomerService)context.getBean(&quot;customerService&quot;);&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デフォルトでは、Springはコンポーネントの最初の文字を小文字にします（「CustomerService」から「customerService」まで）。そして、このコンポーネントを「customerService」という名前で取得できます。ただし&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、Beanクラスに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アノテーション&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用する場合は、次の方法で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特定のBean名を提供できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="97b6f37b8647002ac0f4d19689972c444a6cc418" translate="yes" xml:space="preserve">
          <source>Purpose of each annotation:</source>
          <target state="translated">各アノテーションの目的。</target>
        </trans-unit>
        <trans-unit id="5c33ac0525673af29e43ddf85d13630c95db59c2" translate="yes" xml:space="preserve">
          <source>Referring to &lt;code&gt;JSR-330&lt;/code&gt;, which is now supported by spring, you can only use &lt;code&gt;@Named&lt;/code&gt; to define a bean (Somehow &lt;code&gt;@Named=@Component&lt;/code&gt;). So according to this standard, there seems that there is no use to define stereotypes (like &lt;code&gt;@Repository&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Controller&lt;/code&gt;) to categories beans.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;@Named&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;サポートされる&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ようになった&lt;/font&gt;&lt;/font&gt; &lt;code&gt;JSR-330&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照すると&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;@Named=@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用してのみ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Beanを定義&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;できます（&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;何らかの理由で&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@ Named = @ Component&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この規格に準拠したので、（のようなステレオタイプを定義するためには使用がないことがあるようです&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）カテゴリ豆には。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="685dc316b07cd5f694d0845b3fd6ec857a538dd4" translate="yes" xml:space="preserve">
          <source>Repository are the DAOs (Data Access Objects), they access the database directly.</source>
          <target state="translated">リポジトリは、DAO(データアクセスオブジェクト)は、彼らが直接データベースにアクセスします。</target>
        </trans-unit>
        <trans-unit id="e147f1fe24ee57f9f37f6dc9c7383254c93bd48f" translate="yes" xml:space="preserve">
          <source>Service Hold business Logic, Calculations etc.</source>
          <target state="translated">サービスホールド業務 論理・計算など</target>
        </trans-unit>
        <trans-unit id="e2d186594b1e6d077235fcfdef486079382c759e" translate="yes" xml:space="preserve">
          <source>Similar to above, in the future Spring may add special functionalities for &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Controller&lt;/code&gt; and &lt;code&gt;@Repository&lt;/code&gt; based on their layering conventions. Hence, it's always a good idea to respect the convention and use it in line with layers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、上記と同様に、将来的には春のための特別な機能を追加する&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その階層化の規則に基づきます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、常に規約を尊重し、レイヤーに合わせて使用​​することをお勧めします。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="426f653b4b02591f9400e218877d98d88ef2cf85" translate="yes" xml:space="preserve">
          <source>So all classes annotated with &lt;code&gt;@ScheduledJob&lt;/code&gt; are spring beans and in addition to that are registered as quartz jobs. You just have to provide code that handles the specific annotation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@ScheduledJob&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注釈が付けられたすべてのクラスは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Beanであり、それに加えて、quartzジョブとして登録されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特定の注釈を処理するコードを提供するだけです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94f5ef83d953e16e3fc387e0969a50cac858275e" translate="yes" xml:space="preserve">
          <source>So you can do logging of DAO  &quot;around&quot;, &quot;before&quot; or &quot;after&quot; the DAO methods. You could do that because you had a DAO in the first place. What you just achieved is &lt;strong&gt;Separation of concerns or tasks.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、DAOの「前後」、「前」、「後」のDAOのロギングを行うことができます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そもそもDAOがあったからです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたがたった今達成したことは&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、懸念や仕事の分離です。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c1d2586129c5e43b746ba3d3c2d74b7668fa20f" translate="yes" xml:space="preserve">
          <source>Special type annotations are also scanned, because they themselves are annotated with &lt;code&gt;@Component&lt;/code&gt; annotation, which means they are also &lt;code&gt;@Component&lt;/code&gt;s. If we define our own custom annotation and annotate it with &lt;code&gt;@Component&lt;/code&gt;, it will also get scanned with &lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特別なタイプのアノテーションもスキャンされます。これは、それら自体が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アノテーションでアノテーション&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;されているため&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、それらも&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;独自のカスタムアノテーションを定義し、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アノテーションを付けると&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; でもスキャンされます</target>
        </trans-unit>
        <trans-unit id="13138bde579f40373313fd0ba397b74463f24bd5" translate="yes" xml:space="preserve">
          <source>Spring 2.5 introduces further stereotype annotations: &lt;code&gt;@Component&lt;/code&gt;,
  &lt;code&gt;@Service&lt;/code&gt;, and &lt;code&gt;@Controller&lt;/code&gt;. &lt;code&gt;@Component&lt;/code&gt; is a generic stereotype for any
  Spring-managed component. &lt;code&gt;@Repository&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, and &lt;code&gt;@Controller&lt;/code&gt; are
  specializations of &lt;code&gt;@Component&lt;/code&gt; for more specific use cases, for
  example, in the persistence, service, and presentation layers,
  respectively.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;春2.5を発表、さらにステレオタイプ注釈：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、Springで管理されるコンポーネントの一般的なステレオタイプです。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、及び&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の特殊化され&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それぞれより具体的なユースケースのために、例えば、持続性で、サービス、およびプレゼンテーション層、。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0d6a36819b19fd7dcb56550f70df1216a3e250f9" translate="yes" xml:space="preserve">
          <source>Spring 2.5 introduces further stereotype annotations: @Component, @Service and @Controller. @Component serves as a generic stereotype for any Spring-managed component; whereas, @Repository, @Service, and @Controller serve as specializations of @Component for more specific use cases (e.g., in the persistence, service, and presentation layers, respectively). What this means is that you can annotate your component classes with @Component, but by annotating them with @Repository, @Service, or @Controller instead, your classes are more properly suited for processing by tools or associating with aspects. For example, these stereotype annotations make ideal targets for pointcuts. Of course, it is also possible that @Repository, @Service, and @Controller may carry additional semantics in future releases of the Spring Framework. Thus, if you are making a decision between using @Component or @Service for your service layer, @Service is clearly the better choice. Similarly, as stated above, @Repository is already supported as a marker for automatic exception translation in your persistence layer.</source>
          <target state="translated">Spring 2.5では、さらにステレオタイプのアノテーションが導入されました。それは@Component、@Service、@Controllerです。一方、@Repository、@Service、@Controllerは、より特定のユースケース(例えば、それぞれパーシステンス、サービス、プレゼンテーションレイヤーなど)のための@Componentの特殊化として機能します。つまり、コンポーネントクラスを @Component でアノテーションすることはできますが、代わりに @Repository、@Service、@Controller でアノテーションすることで、ツールによる処理やアスペクトとの関連付けに適したクラスになるということです。例えば、これらのステレオタイプのアノテーションは、ポイントカットの理想的なターゲットになります。もちろん、将来のSpring Frameworkのリリースで@Repository,@Service,@Controllerにセマンティクスが追加される可能性もあります。したがって、サービスレイヤーに@Componentと@Serviceのどちらを使うかを決める場合は、明らかに@Serviceの方が良い選択です。同様に、上で述べたように、@Repositoryはパーシスタンスレイヤーでの自動例外変換のためのマーカーとして既にサポートされています。</target>
        </trans-unit>
        <trans-unit id="4c8f97fe823731da56120c1a0479f249b978d9eb" translate="yes" xml:space="preserve">
          <source>Spring provides four different types of auto component scan annotations, they are &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt; and &lt;code&gt;@Controller&lt;/code&gt;. Technically, there is no difference between them, but every auto component scan annotation should be used for a special purpose and within the defined layer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;春には、自動コンポーネントスキャン注釈の4種類を提供し、それらは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;技術的には、それらの間に違いはありませんが、すべての自動コンポーネントスキャンアノテーションは、特別な目的で定義されたレイヤー内で使用する必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4e47ccbf053a0ec52f68e06b21639f47966082e4" translate="yes" xml:space="preserve">
          <source>Spring provides further stereotype annotations: @Component, @Service,
  and @Controller. @Component is a generic stereotype for any
  Spring-managed component. @Repository, @Service, and @Controller are
  specializations of @Component for more specific use cases, for
  example, in the persistence, service, and presentation layers,
  respectively. Therefore, you can annotate your component classes with
  @Component, but by annotating them with @Repository, @Service, or
  @Controller instead, your classes are more properly suited for
  processing by tools or associating with aspects. For example, these
  stereotype annotations make ideal targets for pointcuts. It is also
  possible that @Repository, @Service, and @Controller may carry
  additional semantics in future releases of the Spring Framework. Thus,
  if you are choosing between using @Component or @Service for your
  service layer, @Service is clearly the better choice. Similarly, as
  stated above, @Repository is already supported as a marker for
  automatic exception translation in your persistence layer.</source>
          <target state="translated">Springはさらにステレオタイプのアノテーションを提供しています。それは @Component,@Service,@Controller です。Componentは、Springが管理するコンポーネントの一般的なステレオタイプです。Repository,@Service,@Controllerは、@Componentの特殊化であり、例えば、それぞれパーシステンス、サービス、プレゼンテーション層など、より特定のユースケースに対応しています。したがって、コンポーネントクラスに @Component をアノテーションすることもできますが、代わりに @Repository,@Service,@Controller をアノテーションすることで、ツールによる処理やアスペクトとの関連付けに適したクラスを作成することができます。例えば、これらのステレオタイプのアノテーションは、ポイントカットの理想的なターゲットになります。また、@Repository,@Service,@Controller は、Spring Framework の将来のリリースでセマンティクスが追加される可能性があります。したがって、サービスレイヤーに@Componentと@Serviceのどちらを使うかを選択する場合は、明らかに@Serviceの方が良い選択です。同様に、上で述べたように、@Repositoryはパーシスタンスレイヤーの自動例外変換のためのマーカーとして既にサポートされています。</target>
        </trans-unit>
        <trans-unit id="2af2883cda90ae2aabcf36bb1d742fa55939ea53" translate="yes" xml:space="preserve">
          <source>Technically &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt; are all same. All of them extends &lt;code&gt;@Component&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;技術的には&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべて同じです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらはすべて&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;拡張し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3450da4a4365327d7d93ea1ed7f17670543838e4" translate="yes" xml:space="preserve">
          <source>That mean Service, The Controller and Repository are functionally the same.</source>
          <target state="translated">つまり、サービス、コントローラ、リポジトリは機能的には同じです。</target>
        </trans-unit>
        <trans-unit id="0229edf27680c26ff671b29e914c64208980be53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@Controller&lt;/code&gt; annotation indicates that a particular class serves the role of a controller. The &lt;code&gt;@Controller&lt;/code&gt; annotation acts as a stereotype for the annotated class, indicating its role.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注釈は特定のクラスは、コントローラの役割を果たしていることを示しています。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注釈は、その役割を示し、注釈付きクラスのステレオタイプとして機能します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="533fb10976bc2fbd348b95363b3eebc5b25e7b10" translate="yes" xml:space="preserve">
          <source>The @Repository annotation is a marker for any class that fulfills the
  role or stereotype of a repository (also known as Data Access Object
  or DAO). Among the uses of this marker is the automatic translation of
  exceptions as described in Section 20.2.2, &amp;ldquo;Exception translation&amp;rdquo;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repositoryアノテーションは、リポジトリ（データアクセスオブジェクトまたはDAOとも呼ばれます）の役割またはステレオタイプを満たすクラスのマーカーです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このマーカーの使用には、20.2.2項「例外の変換」で説明されている例外の自動変換があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="900ecd692d24a5c797f10bc27ca6905fadfb0704" translate="yes" xml:space="preserve">
          <source>The main purpose of using three different &lt;code&gt;@annotations&lt;/code&gt; is to provide better Modularity to the Enterprise application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;3つの異なる&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@annotations&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用する主な目的は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、エンタープライズアプリケーションにより優れたモジュール性を提供することです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa530228a9750a5c455b2162199e35549007bf86" translate="yes" xml:space="preserve">
          <source>The three annotations are used to separate &lt;strong&gt;&quot;Layers&quot;&lt;/strong&gt; in your application,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;3つのアノテーションは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、アプリケーションで&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「レイヤー」&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を区切るために使用され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4bf4bb5c5fdc69be38378fc9b78403ba1c199156" translate="yes" xml:space="preserve">
          <source>There is no difference between &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt;.
&lt;code&gt;@Component&lt;/code&gt; is the Generic annotation to represent the component of our MVC. But there will be several components as part of our MVC application like service layer components, persistence layer components and presentation layer components. So to differentiate them Spring people have given the other three annotations also.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;差がない&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、MVCのコンポーネントを表すGenericアノテーションです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、MVCアプリケーションの一部として、サービスレイヤーコンポーネント、永続化レイヤーコンポーネント、プレゼンテーションレイヤーコンポーネントなど、いくつかのコンポーネントが存在します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、それらを区別するために、Springの人々は他の3つの注釈も与えています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d40a885a98ab77cf143237e07c7ff23a62fee425" translate="yes" xml:space="preserve">
          <source>Therefore, you can annotate your component classes with &lt;code&gt;@Component&lt;/code&gt;,
  but by annotating them with &lt;code&gt;@Repository&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, or &lt;code&gt;@Controller&lt;/code&gt;
  instead, your classes are more properly suited for processing by tools
  or associating with aspects. For example, these stereotype annotations
  make ideal targets for pointcuts.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、あなたがあなたのコンポーネントクラスに注釈を付けることができ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が、それらを注釈を付けることによって&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 代わりに、あなたのクラスは、より適切なツールによって処理または態様との関連付けに適しています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、これらのステレオタイプアノテーションは、ポイントカットの理想的なターゲットになります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="058eac42dd2f1563bae1c74a367ecbd5fb342e14" translate="yes" xml:space="preserve">
          <source>These are all StereoType annotations.this are usefull for the making our classes as spring beans in ioc container,</source>
          <target state="translated">これらはすべて StereoType アノテーションです。これは、私たちのクラスを ioc コンテナの中でスプリングビーンズとして作るのに便利です。</target>
        </trans-unit>
        <trans-unit id="9ea8e1c357fb5f85e91ae49d1be94f92a6e71d20" translate="yes" xml:space="preserve">
          <source>They are almost the same - all of them mean that the class is a Spring bean. &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt; and &lt;code&gt;@Controller&lt;/code&gt; are specialized &lt;code&gt;@Component&lt;/code&gt;s. You can choose to perform specific actions with them. For example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらはほとんど同じです。それらはすべて、クラスがSpring Beanであることを意味します。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; が&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特化され&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;秒。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらを使用して特定のアクションを実行することを選択できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例えば：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="de905c43b0b2db7baa533c33546ac95732270a99" translate="yes" xml:space="preserve">
          <source>This annotation is a specialized version of &lt;code&gt;@Controller&lt;/code&gt; which adds
&lt;code&gt;@Controller&lt;/code&gt; and &lt;code&gt;@ResponseBody&lt;/code&gt; annotation automatically. so we do not have to add &lt;code&gt;@ResponseBody&lt;/code&gt; to our mapping methods. That means
&lt;code&gt;@ResponseBody&lt;/code&gt; is default active.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この注釈は、の特殊なバージョンである&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;追加 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@ResponseBody&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;自動的に注釈を。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのため&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、マッピングメソッドに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@ResponseBody&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;追加する必要はありません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@ResponseBody&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がデフォルトでアクティブになります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ad914a8e008667b3f088395a61125ea2021b0679" translate="yes" xml:space="preserve">
          <source>This bean post processor adds an advisor to any bean that&amp;rsquo;s annotated with &lt;code&gt;@Repository&lt;/code&gt; so that any platform-specific exceptions are caught and then re-thrown as one of Spring&amp;rsquo;s unchecked data access exceptions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このBeanポストプロセッサは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注釈が付けられたBeanにアドバイザを追加し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;て、プラットフォーム固有の例外がキャッチされ、Springの未チェックのデータアクセス例外の1つとして再スローされるようにします。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dfd7db7acb2d6fc63a6f62d3d5b6144a16676402" translate="yes" xml:space="preserve">
          <source>This is a general-purpose stereotype annotation indicating that the class is a spring component.</source>
          <target state="translated">これは、クラスがバネ部品であることを示す汎用的なステレオタイプ注釈です。</target>
        </trans-unit>
        <trans-unit id="29446177a2ee21e508666cc155eefb09a624a7e7" translate="yes" xml:space="preserve">
          <source>This is to indicate that the class defines a data repository.</source>
          <target state="translated">これは、クラスがデータリポジトリを定義していることを示しています。</target>
        </trans-unit>
        <trans-unit id="99a7f349c5d5d0a3edcbffea295e6e3e4fdda6c3" translate="yes" xml:space="preserve">
          <source>Thus, if you are choosing between using &lt;code&gt;@Component&lt;/code&gt; or &lt;code&gt;@Service&lt;/code&gt; for
  your service layer, &lt;code&gt;@Service&lt;/code&gt; is clearly the better choice. Similarly,
  as stated above, &lt;code&gt;@Repository&lt;/code&gt; is already supported as a marker for
  automatic exception translation in your persistence layer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたが使用しての間で選択している場合はこのように、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ご利用のサービス層のために、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;明らかに良い選択です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同様に、前述のように、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は永続レイヤーでの自動例外変換のマーカーとしてすでにサポートされています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3a3c5bd3d66266193b40ff5b6c65f686b1bcdc89" translate="yes" xml:space="preserve">
          <source>Thus, it&amp;rsquo;s not wrong to say that &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt; and &lt;code&gt;@Repository&lt;/code&gt; are special types of &lt;code&gt;@Component&lt;/code&gt; annotation. &lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; picks them up and registers their following classes as beans, just as if they were annotated with &lt;code&gt;@Component&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、それはと言うことは間違っていないのです&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; は、&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特殊なタイプのある&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注釈。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、それらをピックアップし、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注釈が付けられたかのように、後続のクラスをBeanとして登録します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d69d4160a585819959849c4eab806d317481f0d" translate="yes" xml:space="preserve">
          <source>To represent persistence layer components: &lt;code&gt;@Repository&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;永続層コンポーネントを表すには：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ead03f90db54e666450ff5accb8191e98e8faf2f" translate="yes" xml:space="preserve">
          <source>To represent presentation layer components: &lt;code&gt;@Controller&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンテーション層コンポーネントを表すには：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84f553135d1580aab45e503274f77780d545545a" translate="yes" xml:space="preserve">
          <source>To represent service layer components: &lt;code&gt;@Service&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サービス層コンポーネントを表すには：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2000222464e633cfff2ab4ceb90805664f7f5cec" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;@Repository&lt;/code&gt; for all your stored proc DB connections</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべてのストアド&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; DB接続に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用する&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5c1728a39750ffa3f74da82312bfc52d8e3e74c7" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;@Service&lt;/code&gt; for all your web service type of DB connections</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DBサービスのすべてのWebサービスタイプに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用する&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc984e733a64481ce8437080e217ab61c76e668e" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;@Service&lt;/code&gt; and &lt;code&gt;@Repository&lt;/code&gt; annotations are important from database connection perspective.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アノテーションの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、データベース接続の観点から重要です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="395a1505737478df9357bdcff0d4b671ab87cde1" translate="yes" xml:space="preserve">
          <source>We can answer this according to java standard</source>
          <target state="translated">これはjavaの標準に従って答えられます。</target>
        </trans-unit>
        <trans-unit id="512d97efffc0e0cfedd41715bd27b58f51ad13f2" translate="yes" xml:space="preserve">
          <source>We can directly use &lt;code&gt;@Component&lt;/code&gt; for each and every bean, but for better understanding and maintainability of a large application, we use &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私たちは、直接使用することができます&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それぞれ、すべてのBeanのため、より良い理解と大規模なアプリケーションの保守のために、我々は使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="350545f8a4491c80a200eba5f89f14af6638afce" translate="yes" xml:space="preserve">
          <source>We cannot switch this annotation with any other like &lt;code&gt;@Service&lt;/code&gt; or &lt;code&gt;@Repository&lt;/code&gt;, even though they look same. 
The dispatcher scans the classes annotated with &lt;code&gt;@Controller&lt;/code&gt; and detects methods annotated with &lt;code&gt;@RequestMapping&lt;/code&gt; annotations within them. We can use &lt;code&gt;@RequestMapping&lt;/code&gt; on/in only those methods whose classes are annotated with &lt;code&gt;@Controller&lt;/code&gt; and it will &lt;strong&gt;NOT&lt;/strong&gt; work with &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt; etc...</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じように見えても、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このアノテーションを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;や&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;などの他のものと切り替えることはできません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。ディスパッチャーは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アノテーションが付けられたクラスをスキャンし、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アノテーションでアノテーションが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;付けられたメソッドを検出&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;します。我々は使用することができます&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのクラスでアノテートされているメソッドのみに/上&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、それが意志&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しない&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と仕事&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;等...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="987a0f0b1f106a0619a7eb85604b381949c7a0f7" translate="yes" xml:space="preserve">
          <source>What's the difference between @Component, @Repository &amp; @Service annotations in Spring</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Springの@ Component、@ Repository、@ Serviceアノテーションの違いは何ですか&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cefd45d96e7811a0c9b997ad8106965b84732c2a" translate="yes" xml:space="preserve">
          <source>Why use @Repository, @Service, @Controller over @Component?
We can mark our component classes with @Component, but if instead we use the alternative that adapts to the expected functionality. Our classes are better suited to the functionality expected in each particular case.</source>
          <target state="translated">なぜ @Component ではなく @Repository,@Service,@Controller を使うのか?コンポーネントクラスを @Component でマークすることもできますが、その代わりに期待される機能に合わせた代替案を使用します。私たちのクラスは、それぞれのケースで期待される機能に適しています。</target>
        </trans-unit>
        <trans-unit id="4330aa1f435a8813e33467c458b9c523669cfb79" translate="yes" xml:space="preserve">
          <source>above declared annotations are special because when we add &lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; into xxx-servlet.xml file ,spring will automatically create the object of those classes which are annotated with above annotation during context creation/loading phase.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記の宣言された注釈は特別です。なぜなら、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をxxx-servlet.xmlファイルに追加すると、Springは、コンテキストの作成/ロード段階で、上記の注釈が付けられたクラスのオブジェクトを自動的に作成します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e564121cda727185523b754490351a631d26c406" translate="yes" xml:space="preserve">
          <source>all these annotations are type of stereo type type of annotation,the difference between these three annotations are</source>
          <target state="translated">これらのアノテーションはすべてステレオタイプのタイプのアノテーションであり、これらの3つのアノテーションの違いは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="18f4b81d4f3a4621f6153578c2a46358cc403380" translate="yes" xml:space="preserve">
          <source>and a &lt;code&gt;Repository&lt;/code&gt; as per Eric Evans,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Eric Evans &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;による&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db875ee55092e2c0f3365edd019bd8c053b32ca1" translate="yes" xml:space="preserve">
          <source>and you can get the bean object by</source>
          <target state="translated">で、Beanオブジェクトを取得することができます。</target>
        </trans-unit>
        <trans-unit id="7e2fb968a45f3910e02ba7ce0b0ea0809f985cc3" translate="yes" xml:space="preserve">
          <source>for example</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="3e13d8fce6fc1b32339adca9dc15bc225249e64d" translate="yes" xml:space="preserve">
          <source>or else you can use &lt;code&gt;@Component&lt;/code&gt; for all of them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、それらすべてに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用でき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab2c9bc11b9d93d73219ddd793d8bd6c8060c0db" translate="yes" xml:space="preserve">
          <source>reference :- &lt;a href=&quot;https://docs.spring.io/spring/docs/3.0.0.M3/reference/html/ch04s12.html&quot;&gt;Spring Documentation - Classpath scanning, managed components and writing configurations using Java &lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リファレンス：&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/3.0.0.M3/reference/html/ch04s12.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-Springのドキュメント-クラスパススキャン、管理対象コンポーネント、Javaを使用した構成の記述&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9ef3608f431d68a9480040ab93b4dc1c90c79240" translate="yes" xml:space="preserve">
          <source>whenever we adds the &lt;code&gt;@Service&lt;/code&gt; or &lt;code&gt;@Repositroy&lt;/code&gt; or &lt;code&gt;@Controller&lt;/code&gt; annotation by default &lt;code&gt;@Component&lt;/code&gt; annotation is going to existence on top of the class</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repositroy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アノテーションをデフォルトで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;追加すると、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アノテーションがクラスの最上位に存在し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
