<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/6827752">
    <body>
      <group id="6827752">
        <trans-unit id="c52bb2477a9cac0236f8c69a02e58e30e1dca449" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; only scans &lt;code&gt;@Component&lt;/code&gt; and does not look for &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt; and &lt;code&gt;@Repository&lt;/code&gt; in general. They are scanned because they themselves are annotated with &lt;code&gt;@Component&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; solo escanea &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y no busca &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en general. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Se escanean porque ellos mismos est&amp;aacute;n anotados con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c0a46bb7fbef933e5b2ac6ddf73b73c53e57521c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Autowired&lt;/code&gt; - Let Spring auto-wire other beans into your classes using @Autowired annotation.</source>
          <target state="translated">&lt;code&gt;@Autowired&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : deje que Spring conecte autom&amp;aacute;ticamente otros beans a sus clases utilizando la anotaci&amp;oacute;n @Autowired.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4bc7bd8bd6588b120c74696f648e62dc842860f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Component&lt;/code&gt; - Annotate your other components (for example REST resource classes) with a component stereotype.</source>
          <target state="translated">&lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anote&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sus otros componentes (por ejemplo, clases de recursos REST) ​​con un estereotipo de componente.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f60b2f1e94f9c7d209679c9203afa153d9aa612a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Component&lt;/code&gt; - Annotate your other components (for example REST resource classes) with component stereotype.</source>
          <target state="translated">&lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anote&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sus otros componentes (por ejemplo, clases de recursos REST) ​​con estereotipo de componente.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d27eada60b5a322fd96c7024833dd0f559a9929d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Component&lt;/code&gt; = Actual Components ( Beans )</source>
          <target state="translated">&lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; = Componentes reales (frijoles)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c962e54fcc2f756b514e4c953c8635938eddef70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Component&lt;/code&gt; is a generic stereotype for any Spring-managed component. &lt;code&gt;@Repository&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, and &lt;code&gt;@Controller&lt;/code&gt; are specializations of &lt;code&gt;@Component&lt;/code&gt; for more specific use cases, for example, in the persistence, service, and presentation layers, respectively.</source>
          <target state="translated">&lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un estereotipo gen&amp;eacute;rico para cualquier componente administrado por Spring. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son especializaciones de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para casos de uso m&amp;aacute;s espec&amp;iacute;ficos, por ejemplo, en las capas de persistencia, servicio y presentaci&amp;oacute;n, respectivamente.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a86102aa2acb8d184a67117632ec2f5f96e461e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Component&lt;/code&gt; is the top level generic annotation which makes the annotated bean to be scanned and available in the DI container</source>
          <target state="translated">&lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es la anotaci&amp;oacute;n gen&amp;eacute;rica de nivel superior que hace que el bean anotado se escanee y est&amp;eacute; disponible en el contenedor DI&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="53d51bed880db024f2154f22c00ca38294357d40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Component&lt;/code&gt;: It is a basic auto component scan annotation, it indicates annotated class is an auto scan component.</source>
          <target state="translated">&lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : es una anotaci&amp;oacute;n b&amp;aacute;sica de escaneo de componentes autom&amp;aacute;ticos, indica que la clase anotada es un componente de escaneo autom&amp;aacute;tico.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a85c783976ded2ec7bf340636fcbf94c846af9e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller:&lt;/code&gt; where your &lt;strong&gt;request&lt;/strong&gt;&lt;strong&gt;mapping from presentation page&lt;/strong&gt; done i.e. Presentation layer won't go to any other file it goes directly to &lt;code&gt;@Controller&lt;/code&gt; class and checks for requested path in &lt;code&gt;@RequestMapping&lt;/code&gt; annotation which written before method calls if necessary.</source>
          <target state="translated">&lt;code&gt;@Controller:&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; cuando la &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;asignaci&amp;oacute;n de&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; su &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;solicitud &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;desde la p&amp;aacute;gina de presentaci&amp;oacute;n se&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; realiza, es decir, la capa de presentaci&amp;oacute;n no ir&amp;aacute; a ning&amp;uacute;n otro archivo, va directamente a la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y comprueba la ruta solicitada en la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anotaci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que se escribe antes de las llamadas al m&amp;eacute;todo si es necesario.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="42bdae02eaf700513be4523a71747e53f7a3713e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller&lt;/code&gt; -&amp;gt; Classes annotated with this, are intended to receive a request from the client side. The first request comes to the Dispatcher Servlet, from where it passes the request to the particular controller using the value of &lt;code&gt;@RequestMapping&lt;/code&gt; annotation.</source>
          <target state="translated">&lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -&amp;gt; Las clases anotadas con esto, est&amp;aacute;n destinadas a recibir una solicitud del lado del cliente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La primera solicitud llega al Servlet Dispatcher, desde donde pasa la solicitud al controlador en particular utilizando el valor de la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anotaci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1e287e07020b7f5854ebd49f7b8fe81dbef2fb61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller&lt;/code&gt; = @Component ( Internal Annotation ) + Presentation layer Features</source>
          <target state="translated">&lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; = @Component (Anotaci&amp;oacute;n interna) + Caracter&amp;iacute;sticas de la capa de presentaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="51e8f89f260fc43722b23090ae1ac2abb49a46dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller&lt;/code&gt; beans are used by spring-mvc</source>
          <target state="translated">&lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; beans &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Controller&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son utilizados por spring-mvc&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ebc68bedd3b3269aebc658ea919ace4c2ba2c5e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller&lt;/code&gt; is used to mark classes as Spring MVC Controller. This
annotation is just a specialized version of &lt;code&gt;@Component&lt;/code&gt; and it
allows the controller classes to be auto-detected based on classpath
scanning.</source>
          <target state="translated">&lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se usa para marcar clases como Spring MVC Controller. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta anotaci&amp;oacute;n es solo una versi&amp;oacute;n especializada de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y permite que las clases de controlador se detecten autom&amp;aacute;ticamente en funci&amp;oacute;n del escaneo de classpath.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="60acfe2763e013acff10de2e90dc737721af301d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller&lt;/code&gt; you can return a view in Spring web MVC.</source>
          <target state="translated">&lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; puede devolver una vista en Spring web MVC.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1867322fce2cf8c6945fe5c011aae47dc3614e97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Controller&lt;/code&gt;: Annotated class indicates that it is a controller component, and mainly used at the presentation layer.</source>
          <target state="translated">&lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : la clase anotada indica que es un componente controlador y se utiliza principalmente en la capa de presentaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="755f30ff16842ff20dc3434aef8ec3f81ac01294" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt; - Annotate all your DAO classes with @Repository. All your database access logic should be in DAO classes.</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anote&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; todas sus clases de DAO con @Repository. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Toda la l&amp;oacute;gica de acceso a su base de datos debe estar en clases DAO.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6435804414b2b59a17da073be0c6c40aee98bcb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt; -&amp;gt; Classes annotated with this, are intended to connect with database. It can also be considered as DAO(Data Access Object) layer. This layer should be restricted to CRUD (create, retrieve, update, delete) operations only.
If any manipulation is required, data should be sent be send back to @Service layer.</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -&amp;gt; Las clases anotadas con esto, est&amp;aacute;n destinadas a conectarse con la base de datos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n se puede considerar como capa DAO (objeto de acceso a datos). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta capa debe restringirse &amp;uacute;nicamente a las operaciones CRUD (crear, recuperar, actualizar, eliminar). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si se requiere alguna manipulaci&amp;oacute;n, los datos deben enviarse y devolverse a la capa @Service.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7f0db2ae59ef409d76fc1ebc571b3ccadeeeb808" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt; = @Component ( Internal Annotation ) + Data Layer Features ( use for handling the Domain Beans )</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; = @Component (Anotaci&amp;oacute;n interna) + Caracter&amp;iacute;sticas de la capa de datos (uso para manejar los beans de dominio)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="75f13022996e28a8ab5fca548f247847bf7f3ca1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt; annotation will add some functionality to your bean (some automatic exception translation to your bean persistence layer).</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; anotaci&amp;oacute;n &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; agregar&amp;aacute; algunas funcionalidades a su bean (alguna traducci&amp;oacute;n de excepci&amp;oacute;n autom&amp;aacute;tica a su capa de persistencia de bean).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="efe183c2a1873030970b25581ebc3552dca4d171" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt; beans are eligible for persistence exception translation</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; beans &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son elegibles para la traducci&amp;oacute;n de excepci&amp;oacute;n de persistencia&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7f44b3951a7fab8002b541c86593b0e72bbe5364" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt; is specialized annotation and it brings the feature of converting all the unchecked exceptions from the DAO classes</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una anotaci&amp;oacute;n especializada y trae la caracter&amp;iacute;stica de convertir todas las excepciones no controladas de las clases DAO&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3354d3ec0c176e3f31600d85600a2011385ca78b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt;: This is Persistence layer(Data Access Layer) of application which used to get data from the database. i.e. &lt;strong&gt;all the Database related operations are done by the repository.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : esta es la capa de persistencia (Data Access Layer) de la aplicaci&amp;oacute;n que sol&amp;iacute;a obtener datos de la base de datos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;es decir, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;todas las operaciones relacionadas con la base de datos son realizadas por el repositorio.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9acd254fd2bbf9f9bc57bc5af90b23eddd3bc958" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Repository&lt;/code&gt;: You need to use this annotation within the persistence layer, this acts like database repository.</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : debe usar esta anotaci&amp;oacute;n dentro de la capa de persistencia, esto act&amp;uacute;a como un repositorio de base de datos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="90be53f5cbdd981a8c2355b766d9fff306b6775a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@RestController&lt;/code&gt; also converts the response to &lt;code&gt;JSON/XML automatically&lt;/code&gt; as &lt;code&gt;@ResponseBody&lt;/code&gt; makes the returned objects to something that could be in the body, &lt;code&gt;e.g. JSON or XML&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@RestController&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tambi&amp;eacute;n convierte la respuesta a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;JSON/XML automatically&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ya que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@ResponseBody&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; convierte los objetos devueltos en algo que podr&amp;iacute;a estar en el cuerpo, &lt;/font&gt; &lt;code&gt;e.g. JSON or XML&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JSON o XML&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cd9ce01b50aaf96a042df6119c17a292c30ebb61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt; - Annotate all your service classes with @Service. This layer knows the unit of work. All your business logic will be in Service classes. Generally methods of service layer are covered under transaction. You can make multiple DAO calls from service method, if one transaction fails all transactions should rollback.</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anote&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; todas sus clases de servicio con @Service. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta capa conoce la unidad de trabajo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Toda su l&amp;oacute;gica de negocios estar&amp;aacute; en clases de servicio. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En general, los m&amp;eacute;todos de la capa de servicio est&amp;aacute;n cubiertos por la transacci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede realizar m&amp;uacute;ltiples llamadas DAO desde el m&amp;eacute;todo de servicio, si una transacci&amp;oacute;n falla, todas las transacciones deber&amp;iacute;an revertirse.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="65f7a4157131313ba9d9c7de0c0c2ec078d920ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt; -&amp;gt; Classes annotated with this, are intended to manipulate data, that we receive from the client or fetch from the database. All the manipulation with data should be done in this layer.</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -&amp;gt; Las clases anotadas con esto, est&amp;aacute;n destinadas a manipular los datos que recibimos del cliente o se obtienen de la base de datos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Toda la manipulaci&amp;oacute;n con datos debe hacerse en esta capa.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="57f5d1af5bcd96d8cf4535d91fa857ae7afca44d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt; = @Component ( Internal Annotation ) + Service layer Features</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; = @Component (Anotaci&amp;oacute;n interna) + Caracter&amp;iacute;sticas de la capa de servicio&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed4dc909a6dc9f48489b83955476a753cfb55340" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt; beans hold the business logic and call methods in the repository layer.</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; beans &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; contienen la l&amp;oacute;gica empresarial y los m&amp;eacute;todos de llamada en la capa de repositorio.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="17a69c480a6a788c48c3fc84d2577526d41ced15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt; is specialized annotation. it do not bring any new feature as of now but it clarifies the intent of the bean</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una anotaci&amp;oacute;n especializada. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no trae ninguna caracter&amp;iacute;stica nueva a partir de ahora pero aclara la intenci&amp;oacute;n del bean&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a3e80f101ac8ba58423611e9a359db720a6cddb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt;: All business logic is here i.e. Data related calculations and all.This annotation of business layer in which our user not directly call persistence method so it will call this method using this annotation. &lt;strong&gt;It will request @Repository as per user request&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : toda la l&amp;oacute;gica empresarial est&amp;aacute; aqu&amp;iacute;, es decir, c&amp;aacute;lculos relacionados con los datos y todo. Esta anotaci&amp;oacute;n de la capa empresarial en la que nuestro usuario no llama directamente al m&amp;eacute;todo de persistencia, por lo que llamar&amp;aacute; a este m&amp;eacute;todo utilizando esta anotaci&amp;oacute;n. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Solicitar&amp;aacute; @Repository seg&amp;uacute;n la solicitud del usuario&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a1c1d2514399a89419fa8c725118147960f9a19d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@Service&lt;/code&gt;: It indicates annotated class is a Service component in the business layer.</source>
          <target state="translated">&lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : indica que la clase anotada es un componente de Servicio en la capa empresarial.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f869cdae24718975bd86c139b1a4cf4ab5f8872a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Above mentioned is one very common scenario, there are many more use cases of why to use three annotations.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo anterior es un escenario muy com&amp;uacute;n, hay muchos m&amp;aacute;s casos de uso de por qu&amp;eacute; usar tres anotaciones.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e271c23aaca1c5d21764465c2548e1b0ba0791c5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Repository&lt;/em&gt; and &lt;em&gt;Service&lt;/em&gt; are children of &lt;em&gt;Component&lt;/em&gt; annotation. So, all of them are &lt;em&gt;Component&lt;/em&gt;. &lt;em&gt;Repository&lt;/em&gt; and &lt;em&gt;Service&lt;/em&gt; just expand it. 
How exactly?
&lt;em&gt;Service&lt;/em&gt; has only ideological difference: we use it for services. &lt;em&gt;Repository&lt;/em&gt; has particular exception handler.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El repositorio&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y el &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;servicio&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son elementos secundarios de la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anotaci&amp;oacute;n &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;de &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;componentes&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, todos ellos son &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Componente&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El repositorio&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y el &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;servicio&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; solo lo expanden. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;C&amp;oacute;mo exactamente? &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El servicio&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; solo tiene una diferencia ideol&amp;oacute;gica: lo usamos para servicios. &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El repositorio&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene un controlador de excepciones particular.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ae222d32c4733e99013c09b00a14f25cb9fd89f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;@Controller&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;@Controller&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fe5c6f1fd0c4469ec22b1b64df1d3f9ce7148e34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;@Controller&lt;/code&gt;&lt;/strong&gt; vs &lt;strong&gt;&lt;code&gt;RestController&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; vs&lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;RestController&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d02dda508b6792bef5b289438aab0dae9f34a654" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;@RestController&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;@RestController&lt;/code&gt;&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="24d9897af3ded3ed27b764d17d671273337c87e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;What else?&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Qu&amp;eacute; m&amp;aacute;s?&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02b386ae3ef0df690e5ff6fbaf501f2daa6c5f59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;What&amp;rsquo;s special about @Component&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Qu&amp;eacute; tiene de especial @Component?&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3db920e461fbae37694bbd0baa0837165ffcd644" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;What&amp;rsquo;s special about @Controller?&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Qu&amp;eacute; tiene de especial @Controller?&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c947974b0ed3abe583c5d614ea1dae412c1bfd7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;What&amp;rsquo;s special about @Repository?&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Qu&amp;eacute; tiene de especial @Repository?&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="44531a49d4e8b2e827b3cb7707c16eb31eb8085f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;What&amp;rsquo;s special about @Service?&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Qu&amp;eacute; tiene de especial @Service?&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="01ccc260c2cb635c23e720d73b05ea5f97b7093a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Component&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@Component&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d71c877c3a78adec6503e4663386504304e2102d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Component&lt;/strong&gt; acts as @Bean annotation in configuration class , register bean in spring context. Also it is parent for @Service, @Repository and @Controller annotation.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; act&amp;uacute;a como anotaci&amp;oacute;n @Bean en la clase de configuraci&amp;oacute;n, registre bean en contexto de primavera. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n es padre para la anotaci&amp;oacute;n @Service, @Repository y @Controller.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="68a54727ad6cec624faf6b13c4382e35a8734254" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Component&lt;/strong&gt;: you annotate a class &lt;code&gt;@Component&lt;/code&gt;, it tells hibernate that it is a Bean.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : usted anota una clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , le dice a Hibernate que es un Bean.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="08d89f88959bdae44be6a1bb588f2c4224fb6221" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Controller&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@Controller&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7aa7e80f0249d623ecda3e6e3746451017dfda60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Controller&lt;/strong&gt; - acts as controller in MVC pattern. The dispatcher will scan such annotated classes for mapped methods, detecting @RequestMapping annotations.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Controller&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : act&amp;uacute;a como controlador en el patr&amp;oacute;n MVC. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El despachador escanear&amp;aacute; dichas clases anotadas para m&amp;eacute;todos mapeados, detectando anotaciones @RequestMapping.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30944fd2fb61d9ebcd45f8a10a490acf26a78223" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Repository&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@Repository&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d59ee6059e619bf4112380bb8ba8a318d31487a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Repository&lt;/strong&gt; - extends @Component annotation and translate all database exceptions into 
&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/dao/DataAccessException.html&quot;&gt;DataAccessException&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : extiende la anotaci&amp;oacute;n @Component y traduce todas las excepciones de la base de datos a &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/dao/DataAccessException.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DataAccessException&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4c82a84c7e004e5dbf46fdab8620acd39f117766" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Repository&lt;/strong&gt;: you annotate a class &lt;code&gt;@Repository&lt;/code&gt;, it tells hibernate it is a DAO class and treat it as DAO class. Means it makes the unchecked exceptions (thrown from DAO methods) eligible for translation into Spring &lt;code&gt;DataAccessException&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : anota una clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , le dice a hibernate que es una clase DAO y la trata como una clase DAO. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Significa que las excepciones no verificadas ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;DataAccessException&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; por los m&amp;eacute;todos DAO) son elegibles para la traducci&amp;oacute;n a Spring &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DataAccessException&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82c18cae0ef756fd2e697fe0e8a89527b3e4afbc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Repository&lt;/strong&gt;&lt;strong&gt;@Service&lt;/strong&gt; and &lt;strong&gt;@Controller&lt;/strong&gt; are serves as specialization of @Component for more specific use on that basis you can replace @Service to @Component but in this case you loose the specialization.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Controller&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sirven como especializaci&amp;oacute;n de @Component para un uso m&amp;aacute;s espec&amp;iacute;fico sobre la base de que puede reemplazar @Service por @Component pero en este caso pierde la especializaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2b0d3443c7a52d182de6b0ed42e9280aef8cad71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Service, @Controller, @Repository = {@Component + some more special functionality}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service, @Controller, @Repository = {@Component + alguna funcionalidad m&amp;aacute;s especial}&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6521051becbb1d47181a14e3843c1fa624be1400" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Service&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@Service&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="215e20d4b229d51d2aeab8ffaded5b0e314136d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Service&lt;/strong&gt;, extends @Component annotation and has only naming difference.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , extiende la anotaci&amp;oacute;n @Component y solo tiene una diferencia de nomenclatura.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7b190c46f1884d04aa30c69d70b5df62cc53a9a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@Service&lt;/strong&gt;: This tells hibernate it is a Service class where you will have &lt;code&gt;@Transactional&lt;/code&gt; etc Service layer annotations so hibernate treats it as a Service component.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Esto le dice a hibernate que es una clase de Servicio donde tendr&amp;aacute; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anotaciones de capa de servicio &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Transactional&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; etc., por lo que hibernate lo trata como un componente de Servicio.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6d1c0a0bda111c87bc1cbdf4a7e655e8ea734ff4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Difference between @Component, @Repository, @Controller &amp;amp; @Service annotations&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Diferencia entre las anotaciones @Component, @Repository, @Controller y @Service&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="66ac77b04336b73384ca2da9c721255689dc172c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Explanation of stereotypes :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Explicaci&amp;oacute;n de los estereotipos:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cdb7da5140a2c9fbc61635d14ca6e792686c863c" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;&lt;em&gt;Note: If a class is already registered as a bean through any alternate method, like through &lt;code&gt;@Bean&lt;/code&gt; or through &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt; etc... annotations, then &lt;code&gt;@RequestMapping&lt;/code&gt; can be picked if the class is also annotated with &lt;code&gt;@RequestMapping&lt;/code&gt; annotation. But that's a different scenario.&lt;/em&gt;&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Nota: Si una clase ya est&amp;aacute; registrada como un bean a trav&amp;eacute;s de cualquier m&amp;eacute;todo alternativo, como a trav&amp;eacute;s de las &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Bean&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;etc., entonces &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se puede seleccionar si la clase tambi&amp;eacute;n se anota con la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anotaci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero ese es un escenario diferente.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="0565cbb19c0f1f95a14173024327464b4109d17e" translate="yes" xml:space="preserve">
          <source>@Component &amp;ndash; generic and can be used across application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component: gen&amp;eacute;rico y se puede usar en todas las aplicaciones.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c19cd435b45c7ce39cdcdaceb349ed963c2409e3" translate="yes" xml:space="preserve">
          <source>@Component in Spring</source>
          <target state="translated">@Componente en primavera</target>
        </trans-unit>
        <trans-unit id="2ae1ae6a578e4e2d086f153b4357b17a600f401e" translate="yes" xml:space="preserve">
          <source>@Component is a generic stereotype for any Spring managed component.</source>
          <target state="translated">@Componente es un estereotipo genérico para cualquier componente gestionado por Spring.</target>
        </trans-unit>
        <trans-unit id="075ba1e63b8499e295328ae654616b3ac457ed4c" translate="yes" xml:space="preserve">
          <source>@Component is a generic stereotype for the components managed by Spring @Repository, @Service, and @Controller are @Component specializations for more specific uses:</source>
          <target state="translated">@Componente es un estereotipo genérico para los componentes administrados por Spring @Repositorio,@Servicio y @Controlador son especializaciones de @Componente para usos más específicos:</target>
        </trans-unit>
        <trans-unit id="6988be0d5c6bb12c0268a4bc1d2d64bbd996e1d7" translate="yes" xml:space="preserve">
          <source>@Component is equivalent to</source>
          <target state="translated">@Componente es equivalente a</target>
        </trans-unit>
        <trans-unit id="e189419b60784f6f072701a0112019edf4475523" translate="yes" xml:space="preserve">
          <source>@Component, @ Repository, @ Service, @Controller:</source>
          <target state="translated">@Componente,@Repositorio,@Servicio,@Controlador:</target>
        </trans-unit>
        <trans-unit id="8926cf25bf717ea2455a649c055241dbeb16a7c4" translate="yes" xml:space="preserve">
          <source>@Controller &amp;ndash; annotate
  classes at presentation layers level, mainly used in Spring MVC.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Controller: anota las clases a nivel de las capas de presentaci&amp;oacute;n, utilizadas principalmente en Spring MVC.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a3bb904e5fd4d9f31ad357d460088636f9c191b" translate="yes" xml:space="preserve">
          <source>@Controller for MVC controllers</source>
          <target state="translated">@Controlador para controladores MVC</target>
        </trans-unit>
        <trans-unit id="4415d372a91efad7a310c7fe84b6c23fa2a9f96c" translate="yes" xml:space="preserve">
          <source>@Controller is specialized annotation which makes the bean MVC aware and allows the use of further annotation like &lt;code&gt;@RequestMapping&lt;/code&gt; and all such</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Controller es una anotaci&amp;oacute;n especializada que hace que el bean MVC sea consciente y permite el uso de otras anotaciones como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y todas esas&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="217fe57ceff049bd7161c67a27d8dcf3c690ef51" translate="yes" xml:space="preserve">
          <source>@Controller, @Service and @Repository are Specializations of @Component for specific use cases.</source>
          <target state="translated">@Controlador,@Servicio y @Repositorio son especializaciones de @Componente para casos de uso específicos.</target>
        </trans-unit>
        <trans-unit id="1b6ecfeaf188513038146749de2ca33e4f1505ea" translate="yes" xml:space="preserve">
          <source>@Repository &amp;ndash; annotate classes at persistence layer, which will act as
  database repository.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository: anota las clases en la capa de persistencia, que actuar&amp;aacute; como repositorio de la base de datos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34e70a53a8400f32673bc2dbaf054dc1b5f39ea5" translate="yes" xml:space="preserve">
          <source>@Repository for persistence</source>
          <target state="translated">@Repositorio para la persistencia</target>
        </trans-unit>
        <trans-unit id="9f87cf278958424bb2ad6c92d0c7bbd86c3ecb94" translate="yes" xml:space="preserve">
          <source>@Service
  &amp;ndash; annotate classes at service layer level.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service: anota clases en el nivel de capa de servicio.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f44b4afb62ac2bd44fd3a929667646726384ba94" translate="yes" xml:space="preserve">
          <source>@Service for services and transactions</source>
          <target state="translated">@Servicio de servicios y transacciones</target>
        </trans-unit>
        <trans-unit id="7ba2a28134b3ca42c2c6b345eb1c4e794befe840" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;@Service&lt;/code&gt; to quote spring documentation,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para citar la documentaci&amp;oacute;n de primavera,&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="91d02755008708aed94833e44e0aeffc9010db7e" translate="yes" xml:space="preserve">
          <source>A REPOSITORY represents all objects of a certain type as a conceptual
  set (usually emulated). It acts like a collection, except with more
  elaborate querying capability. Objects of the appropriate type are
  added and removed, and the machinery behind the REPOSITORY inserts
  them or deletes them from the database. This definition gathers a
  cohesive set of responsibilities for providing access to the roots of
  AGGREGATES from early life cycle through the end.</source>
          <target state="translated">Un REPOSITORIO representa todos los objetos de un cierto tipo como un conjunto conceptual (generalmente emulado).Actúa como una colección,excepto con una capacidad de consulta más elaborada.Los objetos del tipo apropiado se añaden y se eliminan,y la maquinaria que está detrás del REPOSITORIO los inserta o los elimina de la base de datos.Esta definición reúne un conjunto cohesivo de responsabilidades para proporcionar acceso a las raíces de los AGREGADOS desde el principio del ciclo de vida hasta el final.</target>
        </trans-unit>
        <trans-unit id="f47b388fe44e5f55543ff7ae7b6a0d924ebef100" translate="yes" xml:space="preserve">
          <source>A SERVICE is an operation offered as an interface that stands alone in
  the model, without encapsulating state, as ENTITIES and VALUE OBJECTS
  do. SERVICES are a common pattern in technical frameworks, but they
  can also apply in the domain layer. The name service emphasizes the
  relationship with other objects. Unlike ENTITIES and VALUE OBJECTS, it
  is defined purely in terms of what it can do for a client. A SERVICE
  tends to be named for an activity, rather than an entity&amp;mdash;a verb rather
  than a noun. A SERVICE can still have an abstract, intentional
  definition; it just has a different flavor than the definition of an
  object. A SERVICE should still have a defined responsibility, and that
  responsibility and the interface fulfilling it should be defined as
  part of the domain model. Operation names should come from the
  UBIQUITOUS LANGUAGE or be introduced into it. Parameters and results
  should be domain objects. SERVICES should be used judiciously and not
  allowed to strip the ENTITIES and VALUE OBJECTS of all their behavior.
  But when an operation is actually an important domain concept, a
  SERVICE forms a natural part of a MODEL-DRIVEN DESIGN. Declared in the
  model as a SERVICE, rather than as a phony object that doesn't
  actually represent anything, the standalone operation will not mislead
  anyone.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un SERVICIO es una operaci&amp;oacute;n que se ofrece como una interfaz independiente en el modelo, sin un estado encapsulado, como lo hacen las ENTIDADES y los OBJETOS DE VALOR. Los SERVICIOS son un patr&amp;oacute;n com&amp;uacute;n en los marcos t&amp;eacute;cnicos, pero tambi&amp;eacute;n pueden aplicarse en la capa de dominio. El servicio de nombres enfatiza la relaci&amp;oacute;n con otros objetos. A diferencia de las ENTIDADES y los OBJETOS DE VALOR, se define &amp;uacute;nicamente en t&amp;eacute;rminos de lo que puede hacer por un cliente. Un SERVICIO tiende a ser nombrado para una actividad, en lugar de una entidad, un verbo en lugar de un sustantivo. Un SERVICIO a&amp;uacute;n puede tener una definici&amp;oacute;n abstracta e intencional; simplemente tiene un sabor diferente al de la definici&amp;oacute;n de un objeto. Un SERVICIO a&amp;uacute;n debe tener una responsabilidad definida, y esa responsabilidad y la interfaz que lo cumple deben definirse como parte del modelo de dominio.Los nombres de las operaciones deben provenir del LENGUAJE UBIQUITO o introducirse en &amp;eacute;l. Los par&amp;aacute;metros y resultados deben ser objetos de dominio. Los SERVICIOS deben usarse con prudencia y no permitir que despojen a las ENTIDADES y los OBJETOS DE VALOR de todo su comportamiento. Pero cuando una operaci&amp;oacute;n es en realidad un concepto de dominio importante, un SERVICIO forma parte natural de un DISE&amp;Ntilde;O IMPULSADO POR MODELO. Declarado en el modelo como un SERVICIO, en lugar de como un objeto falso que en realidad no representa nada, la operaci&amp;oacute;n independiente no enga&amp;ntilde;ar&amp;aacute; a nadie.un SERVICIO forma parte natural de un DISE&amp;Ntilde;O IMPULSADO POR MODELO. Declarado en el modelo como un SERVICIO, en lugar de como un objeto falso que en realidad no representa nada, la operaci&amp;oacute;n independiente no enga&amp;ntilde;ar&amp;aacute; a nadie.un SERVICIO forma parte natural de un DISE&amp;Ntilde;O IMPULSADO POR MODELO. Declarado en el modelo como un SERVICIO, en lugar de como un objeto falso que en realidad no representa nada, la operaci&amp;oacute;n independiente no enga&amp;ntilde;ar&amp;aacute; a nadie.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c8430209be1050ef9c81cf8f55d45b83d428418f" translate="yes" xml:space="preserve">
          <source>A class annotated with &quot;@Repository&quot; has a better translation and readable error handling with org.springframework.dao.DataAccessException. Ideal for implementing components that access data (DataAccessObject or DAO).</source>
          <target state="translated">Una clase anotada con &quot;@Repository&quot; tiene una mejor traducción y un manejo de errores legibles con org.springframework.dao.DataAccessException.Ideal para implementar componentes que accedan a los datos (DataAccessObject o DAO).</target>
        </trans-unit>
        <trans-unit id="6a8649297afe73083d33548e58a5b17638fa4b53" translate="yes" xml:space="preserve">
          <source>All are the same way when you inject them, &lt;strong&gt;@Repository&lt;/strong&gt; it's an interface which apply the implementation for the Repository Pattern &lt;a href=&quot;https://stackoverflow.com/questions/5166888/repository-design-pattern&quot;&gt;Repository design pattern&lt;/a&gt;, generally it's used when you are dealing with some data store or database, and you will find that, it contains multiple ready implementation for you to handle database operations; it can be  &lt;em&gt;CrudRepository&lt;/em&gt;, &lt;em&gt;JpaRepository&lt;/em&gt; etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Todos son iguales cuando los inyecta, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una interfaz que aplica la implementaci&amp;oacute;n para el patr&amp;oacute;n de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/5166888/repository-design-pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dise&amp;ntilde;o de&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Repository Pattern &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Repository&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , generalmente se usa cuando se trata de alg&amp;uacute;n almac&amp;eacute;n de datos o base de datos, y encontrar&amp;aacute; que contiene m&amp;uacute;ltiples implementaci&amp;oacute;n lista para que usted maneje las operaciones de la base de datos; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;puede ser &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CrudRepository&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JpaRepository&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;etc.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6d5c7ff40a6cd439fca89118f4d3196bdb0da41c" translate="yes" xml:space="preserve">
          <source>An annotated class with &quot;@Controller&quot; plays a controller role in a Spring Web MVC application</source>
          <target state="translated">Una clase anotada con &quot;@Controlador&quot; juega un papel de controlador en una aplicación Spring Web MVC</target>
        </trans-unit>
        <trans-unit id="226f9c7ef04f761d7e503608315d9a02c54ba6ab" translate="yes" xml:space="preserve">
          <source>An annotated class with &quot;@Service&quot; plays a role in business logic services, example Facade pattern for DAO Manager (Facade) and transaction handling</source>
          <target state="translated">Una clase anotada con &quot;@Servicio&quot; juega un papel en los servicios de lógica de negocios,ejemplo Patrón de fachada para DAO Manager (Fachada)y manejo de transacciones</target>
        </trans-unit>
        <trans-unit id="82eb7fb789cdca7c0796a25ea6eb54cf3fa98997" translate="yes" xml:space="preserve">
          <source>Annotate other components with @Component, for example REST Resource classes.</source>
          <target state="translated">Anota otros componentes con @Componente,por ejemplo las clases de recursos REST.</target>
        </trans-unit>
        <trans-unit id="438148bac733e4506cfcd03045e90b60cf643030" translate="yes" xml:space="preserve">
          <source>Another thing is that you designate the components semantically to different layers.</source>
          <target state="translated">Otra cosa es que designas los componentes semánticamente a diferentes capas.</target>
        </trans-unit>
        <trans-unit id="e1c8aad64854b177f2f12eacee87256f59a7539f" translate="yes" xml:space="preserve">
          <source>Apart from the fact that it's used to indicate, that it's holding the business logic, there&amp;rsquo;s nothing else noticeable in this annotation; but who knows, Spring may add some additional exceptional in future.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aparte del hecho de que se usa para indicar, que mantiene la l&amp;oacute;gica de negocios, no hay nada m&amp;aacute;s notable en esta anotaci&amp;oacute;n; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pero qui&amp;eacute;n sabe, Spring puede agregar algunos excepcionales adicionales en el futuro.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="774e1e57c082c4559eab60f3dc8b0a7778c5aacb" translate="yes" xml:space="preserve">
          <source>As many of the answers already state what these annotations are used for, we'll here focus on some minor differences among them.</source>
          <target state="translated">Como muchas de las respuestas ya indican para qué se utilizan estas anotaciones,nos centraremos aquí en algunas diferencias menores entre ellas.</target>
        </trans-unit>
        <trans-unit id="a96409f0b3e24141f785ed6967bd54c0cee54a7a" translate="yes" xml:space="preserve">
          <source>But spring user these different annotations in different for the specific use, for example:</source>
          <target state="translated">Pero el usuario de primavera estas anotaciones diferentes en diferentes para el uso específico,por ejemplo:</target>
        </trans-unit>
        <trans-unit id="2e7ed5de866f818fd7632c8378ac9d611c644ab0" translate="yes" xml:space="preserve">
          <source>Can &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Repository.html&quot;&gt;&lt;code&gt;@Repository&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Service.html&quot;&gt;&lt;code&gt;@Service&lt;/code&gt;&lt;/a&gt; annotations be used interchangeably in Spring or do they provide any particular functionality besides acting as a notation device?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; pueden usar indistintamente las anotaciones &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Repository.html&quot;&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Service.html&quot;&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en Spring o proporcionan alguna funcionalidad particular adem&amp;aacute;s de actuar como un dispositivo de notaci&amp;oacute;n?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="05959bd7bd4046316957d11cac98f16f60eec006" translate="yes" xml:space="preserve">
          <source>Controllers just do stuff like dispatching, forwarding, calling service methods etc.</source>
          <target state="translated">Los controladores sólo hacen cosas como despachar,reenviar,llamar a los métodos de servicio,etc.</target>
        </trans-unit>
        <trans-unit id="5f1b1659d1c790ecfe93af1bc16ee886f5f8f7bd" translate="yes" xml:space="preserve">
          <source>Differences between @Component, @Repository, @Controller and @Service</source>
          <target state="translated">Diferencias entre @Componente,@Repositorio,@Controlador y @Servicio</target>
        </trans-unit>
        <trans-unit id="108530447972b523e2d373bdb632a25c26021ef2" translate="yes" xml:space="preserve">
          <source>Even if we interchange @Component or @Repository or @service</source>
          <target state="translated">Incluso si intercambiamos @Componente o @Repositorio o @servicio</target>
        </trans-unit>
        <trans-unit id="fb3e3dc324e182ca9b656d76a3d7ce9de027ff17" translate="yes" xml:space="preserve">
          <source>Finally the &lt;strong&gt;@Component&lt;/strong&gt;, this is the generic form for registered beans in Spring, that's spring is always looking for bean marked with @Component to be registered, then both @Service and @Repository are special cases of @Component, however the common use case for component is when you're making something purely technical not for covering direct business case! like formatting dates or handing special request serialization mechanism and so on.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Finalmente &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Component&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , esta es la forma gen&amp;eacute;rica para los beans registrados en Spring, esa primavera siempre est&amp;aacute; buscando frijoles marcados con @Component para registrarse, luego @Service y @Repository son casos especiales de @Component, sin embargo, el caso de uso com&amp;uacute;n &amp;iexcl;el componente es cuando est&amp;aacute;s haciendo algo puramente t&amp;eacute;cnico, no para cubrir el caso comercial directo! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;como formatear fechas o entregar mecanismos de serializaci&amp;oacute;n de solicitudes especiales, etc.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9f0261eacd2baa531daae71e46b0f60617be49df" translate="yes" xml:space="preserve">
          <source>First point worth highlighting again is that &lt;strong&gt;with respect to scan-auto-detection and dependency injection for BeanDefinition&lt;/strong&gt; all these annotations (viz., @Component, @Service,
  @Repository, @Controller) are the same. &lt;strong&gt;We can use one in place
  of another and can still get our way around.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El primer punto que vale la pena resaltar nuevamente es que, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;con respecto a la detecci&amp;oacute;n autom&amp;aacute;tica de escaneo y la inyecci&amp;oacute;n de dependencia para BeanDefinition,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; todas estas anotaciones (a saber, @Component, @Service, @Repository, @Controller) son las mismas. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Podemos usar uno en lugar de otro y a&amp;uacute;n as&amp;iacute; podemos orientarnos.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dae40ac0e6509431287b6fc01d6ddd4f16209179" translate="yes" xml:space="preserve">
          <source>First the &lt;strong&gt;Similarity&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Primero la &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;similitud&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="60d63f919d7b29919cbe50d8a11dcefc13043550" translate="yes" xml:space="preserve">
          <source>For example recently I made:</source>
          <target state="translated">Por ejemplo,recientemente hice:</target>
        </trans-unit>
        <trans-unit id="7f633a4de5a6fad5c4d8ba29d7323985965ecde0" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-stereotype-annotations&quot;&gt;Spring Documentation&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-stereotype-annotations&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la documentaci&amp;oacute;n de primavera&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd6033d5effd839344b23f051f6dad9c015a7e91" translate="yes" xml:space="preserve">
          <source>From the Spring source code:</source>
          <target state="translated">Del código fuente de Spring:</target>
        </trans-unit>
        <trans-unit id="c399a887e5a285d63699e02b5d8b941d0e57855a" translate="yes" xml:space="preserve">
          <source>Good enough answers are here to explain the whats-the-difference-between-component-repository-service-annotations. I would like to share the difference between &lt;code&gt;@Controller &amp;amp; @RestController&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las respuestas lo suficientemente buenas est&amp;aacute;n aqu&amp;iacute; para explicar las anotaciones de cu&amp;aacute;l es la diferencia entre los componentes del servicio de repositorio de componentes. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Me gustar&amp;iacute;a compartir la diferencia entre &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller &amp;amp; @RestController&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dc7f9ea7304fd7a39962300b05ca13d8a3ae0cd5" translate="yes" xml:space="preserve">
          <source>Help developers define a better category for the competent. This categorizing may become helpful in some cases. (For example when you are using &lt;code&gt;aspect-oriented&lt;/code&gt;, these can be a good candidate for &lt;code&gt;pointcuts&lt;/code&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ayuda a los desarrolladores a definir una mejor categor&amp;iacute;a para los competentes. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta categorizaci&amp;oacute;n puede ser &amp;uacute;til en algunos casos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Por ejemplo, cuando usa &lt;/font&gt;&lt;/font&gt; &lt;code&gt;aspect-oriented&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , estos pueden ser un buen candidato para &lt;/font&gt;&lt;/font&gt; &lt;code&gt;pointcuts&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;corte&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d635c1de85cee5ea3af4b392a4b9368f7868551" translate="yes" xml:space="preserve">
          <source>Here @Component is a base annotation for @Service,@Repository and @Controller annotations</source>
          <target state="translated">Aquí @Componente es una anotación base para las anotaciones de @Servicio,@Repositorio y @Controlador</target>
        </trans-unit>
        <trans-unit id="7363505f6a586aa6429740258f3dda2647d3fbc5" translate="yes" xml:space="preserve">
          <source>Here are more &lt;a href=&quot;http://howtodoinjava.com/spring/spring-core/how-to-use-spring-component-repository-service-and-controller-annotations/&quot;&gt;details&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; hay m&amp;aacute;s &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://howtodoinjava.com/spring/spring-core/how-to-use-spring-component-repository-service-and-controller-annotations/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;detalles&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ed3b4ac7f21763d162d61f6aa39be3864476bcb1" translate="yes" xml:space="preserve">
          <source>If we add @Repository on top of class then it tells that a class consisting persistence logic</source>
          <target state="translated">Si añadimos @Repositorio en la parte superior de la clase entonces dice que una clase que consiste en la lógica de la persistencia</target>
        </trans-unit>
        <trans-unit id="00838cb34513f47aee10b2f69acf45e84c1125a3" translate="yes" xml:space="preserve">
          <source>If we add @Service annotation then it tells that a role of class consisting business logic</source>
          <target state="translated">Si añadimos la anotación @Servicio entonces dice que un papel de clase que consiste en la lógica del negocio</target>
        </trans-unit>
        <trans-unit id="7465ecd9bd3b510352e72b483bfc7d63faa77863" translate="yes" xml:space="preserve">
          <source>If we add the @Component then it tells the role of class is a component class it means it is a class consisting some logic,but it
  does not tell whether a class containing a specifically business or
  persistence or controller logic so we don't use directly this
  @Component annotation</source>
          <target state="translated">Si añadimos el @Componente entonces dice que el papel de la clase es una clase componente significa que es una clase que consiste en cierta lógica,pero no dice si una clase que contiene una lógica específicamente de negocio o de persistencia o de controlador para que no usemos directamente esta anotación @Componente</target>
        </trans-unit>
        <trans-unit id="a288de74244c35de7979dfbbff38f630197ec222" translate="yes" xml:space="preserve">
          <source>If we interchange their place(use &lt;code&gt;@Repository&lt;/code&gt; in place of &lt;code&gt;@Controller&lt;/code&gt;), our application will work fine.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si intercambiamos su lugar (use &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en lugar de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), nuestra aplicaci&amp;oacute;n funcionar&amp;aacute; bien.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1eb25941af3c497f8a5ce8bd6f65690000953687" translate="yes" xml:space="preserve">
          <source>If you are using spring MVC, the &lt;code&gt;@RequestMapping&lt;/code&gt; can only be added to classes which are annotated by &lt;code&gt;@Controller&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si est&amp;aacute; utilizando Spring MVC, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; solo se puede agregar a las clases anotadas por &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ebfaeb082fcf318a425dd207d5a1a54a58f44649" translate="yes" xml:space="preserve">
          <source>If you do not use the proper annotations, you may face commit exceptions overridden by rollback transactions. You will see exceptions during stress load test that is related to roll back JDBC transactions.</source>
          <target state="translated">Si no utiliza las anotaciones adecuadas,puede enfrentarse a la posibilidad de cometer excepciones anuladas por las operaciones de desmantelamiento.Verá excepciones durante la prueba de carga de estrés que está relacionada con las transacciones de JDBC rollback.</target>
        </trans-unit>
        <trans-unit id="99e6cddbe71afbd4fa8a1d1bba72430392222c97" translate="yes" xml:space="preserve">
          <source>If you look at domain driven design by eric evans,</source>
          <target state="translated">Si miras el diseño impulsado por el dominio de Eric Evans,</target>
        </trans-unit>
        <trans-unit id="2d9913d9dc88af8dacca28534e00dbbf0e041820" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;@RestController&lt;/code&gt; you cannot return a view (By using
&lt;code&gt;Viewresolver&lt;/code&gt; in Spring/Spring-Boot)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si usa &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RestController&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no puede devolver una vista (Al usar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Viewresolver&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en Spring / Spring-Boot)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8b5dacb446cf84e727c664735181a4440878cdea" translate="yes" xml:space="preserve">
          <source>Imagine if there were only one annotation @Controller, then this component will have dispatching, business logic and accessing database all mixed, so dirty code!</source>
          <target state="translated">Imagina que si hubiera una sola anotación @Controlador,entonces este componente tendría despacho,lógica de negocios y acceso a la base de datos todo mezclado,¡por lo tanto código sucio!</target>
        </trans-unit>
        <trans-unit id="9343295b80ac0e2bd6b361283d8e53172f671469" translate="yes" xml:space="preserve">
          <source>In Spring 2.0 and later, the &lt;code&gt;@Repository&lt;/code&gt; annotation is a marker for
  any class that fulfills the role or stereotype (also known as Data
  Access Object or DAO) of a repository. Among the uses of this marker
  is the automatic translation of exceptions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En Spring 2.0 y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; posteriores, la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anotaci&amp;oacute;n &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un marcador para cualquier clase que cumpla el rol o estereotipo (tambi&amp;eacute;n conocido como Data Access Object o DAO) de un repositorio. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entre los usos de este marcador est&amp;aacute; la traducci&amp;oacute;n autom&amp;aacute;tica de excepciones.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8b7350be16af05d3f28297bf4fd50c42a92bb6f5" translate="yes" xml:space="preserve">
          <source>In Spring 4, latest version:</source>
          <target state="translated">En la primavera 4,la última versión:</target>
        </trans-unit>
        <trans-unit id="d3f07103494a99afd3d9f5749a39ec3f45c77438" translate="yes" xml:space="preserve">
          <source>In Spring &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Controller&lt;/code&gt;, and &lt;code&gt;@Repository&lt;/code&gt; are Stereotype annotations which are used for:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En Spring &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son anotaciones de estereotipo que se utilizan para:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e3a6348ec28746c35a4737921fc5757d9d481b7f" translate="yes" xml:space="preserve">
          <source>In addition to pointing out, that this is an &lt;em&gt;Annotation based Configuration&lt;/em&gt;, &lt;code&gt;@Repository&lt;/code&gt;&amp;rsquo;s job is to catch platform specific exceptions and re-throw them as one of Spring&amp;rsquo;s unified unchecked exception. For this, we&amp;rsquo;re provided with &lt;code&gt;PersistenceExceptionTranslationPostProcessor&lt;/code&gt;, that we are required to add in our Spring&amp;rsquo;s application context like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s de se&amp;ntilde;alar que esta es una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;configuraci&amp;oacute;n basada en anotaciones&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;el trabajo de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es capturar excepciones espec&amp;iacute;ficas de la plataforma y volver a lanzarlas como una de las excepciones unificadas y no verificadas de Spring. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para esto, contamos con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;PersistenceExceptionTranslationPostProcessor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que estamos obligados a agregar en el contexto de la aplicaci&amp;oacute;n Spring de esta manera:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="795eec8bf0eef1012cfd63fdfb85457f9c4bf930" translate="yes" xml:space="preserve">
          <source>In order to simplify this illustration, let us consider technicality by use case, These annotations are used to be injected and as I said literally &quot;&lt;em&gt;Used to be injected&lt;/em&gt;&quot; , that mean, if you know how to use &lt;strong&gt;Dependency Injection &quot;DI&quot;&lt;/strong&gt;  and you should, then you will always look for these annotations, and by annotating the classes with these &lt;strong&gt;Stereo Types&lt;/strong&gt;, you are informing the &lt;em&gt;DI&lt;/em&gt; container to scan them to be ready for Injection on other places, this is the practical target.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para simplificar esta ilustraci&amp;oacute;n, consideremos el tecnicismo por caso de uso. Estas anotaciones se usan para inyectarse y, como dije literalmente &quot; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sol&amp;iacute;a ​​inyectarse&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;, es decir, si sabe c&amp;oacute;mo usar la &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;inyecci&amp;oacute;n de dependencia &quot;DI&quot;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y usted deber&amp;iacute;a, entonces siempre buscar&amp;aacute; estas anotaciones, y al anotar las clases con estos &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipos est&amp;eacute;reo&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , est&amp;aacute; informando al &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;contenedor &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DI&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para escanearlos para que est&amp;eacute;n listos para la inyecci&amp;oacute;n en otros lugares, este es el objetivo pr&amp;aacute;ctico.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="990c52936055f05ac08e35c6a319e562e44f0a62" translate="yes" xml:space="preserve">
          <source>In other words, if I have a Service class and I change the annotation from &lt;code&gt;@Service&lt;/code&gt; to &lt;code&gt;@Component&lt;/code&gt;, will it still behave the same way?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En otras palabras, si tengo una clase de Servicio y cambio la anotaci&amp;oacute;n de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &amp;iquest;seguir&amp;aacute; comport&amp;aacute;ndose de la misma manera?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="46a399d538f354135718b8beec0576afb824eb1a" translate="yes" xml:space="preserve">
          <source>In spring framework provides some special type of annotations,called stereotype annotations.
These are following:-</source>
          <target state="translated">En el marco de la primavera proporciona un tipo especial de anotaciones,llamadas anotaciones de estereotipo.Estas son las siguientes:-</target>
        </trans-unit>
        <trans-unit id="d0288df0a0caa96be3fb1fcb410d17ac61873da0" translate="yes" xml:space="preserve">
          <source>Indicates that an annotated class is a &quot;&lt;a href=&quot;http://docs.spring.io/spring-framework/docs/2.5.x/api/org/springframework/stereotype/Component.html&quot;&gt;component&lt;/a&gt;&quot;. Such classes are
  considered as candidates for auto-detection when using
  annotation-based configuration and classpath scanning.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Indica que una clase anotada es un &quot; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.spring.io/spring-framework/docs/2.5.x/api/org/springframework/stereotype/Component.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;componente&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dichas clases se consideran candidatos para la detecci&amp;oacute;n autom&amp;aacute;tica cuando se utiliza la configuraci&amp;oacute;n basada en anotaciones y el escaneo de classpath.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="603ae5b24635d9c9cc928a1fbbfc200b44fef9fb" translate="yes" xml:space="preserve">
          <source>Indicates that an annotated class is a &quot;Service&quot;, &lt;strong&gt;originally defined
  by Domain-Driven Design (Evans, 2003) as &quot;an operation offered as an
  interface that stands alone in the model, with no encapsulated state.&quot;&lt;/strong&gt;
  May also indicate that a class is a &quot;Business Service Facade&quot; (in the
  Core J2EE patterns sense), or something similar. This annotation is a
  general-purpose stereotype and individual teams may narrow their
  semantics and use as appropriate.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Indica que una clase anotada es un &quot;Servicio&quot;, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;originalmente definido por Domain-Driven Design (Evans, 2003) como &quot;una operaci&amp;oacute;n ofrecida como una interfaz que est&amp;aacute; sola en el modelo, sin estado encapsulado&quot;.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Tambi&amp;eacute;n puede indicar que una clase es una &quot;Fachada de servicios empresariales&quot; (en el sentido de los patrones Core J2EE), o algo similar. Esta anotaci&amp;oacute;n es un estereotipo de prop&amp;oacute;sito general y los equipos individuales pueden reducir su sem&amp;aacute;ntica y usarla seg&amp;uacute;n corresponda.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1bcf44cc569a33a13c3a571a60f384e0548b094b" translate="yes" xml:space="preserve">
          <source>Indicates that an annotated class is a &quot;component&quot;. Such classes are considered as candidates for auto-detection when using annotation-based configuration and classpath scanning.</source>
          <target state="translated">Indica que una clase anotada es un &quot;componente&quot;.Estas clases se consideran candidatas a la autodetección cuando se utiliza la configuración basada en la anotación y el escaneo de la ruta de clase.</target>
        </trans-unit>
        <trans-unit id="85dfd254c334ad8fc68bd7aa1dcde048bb6a1174" translate="yes" xml:space="preserve">
          <source>It will behave the same , but one aspect is that they wont be able to catch some specific exception related to DAO instead of Repository if we use component or @ service</source>
          <target state="translated">Se comportará de la misma manera,pero un aspecto es que no podrán captar alguna excepción específica relacionada con el DAO en lugar del Repositorio si usamos el componente o @ servicio</target>
        </trans-unit>
        <trans-unit id="6641643e8c8fb510696ea216a90e65385335b9a9" translate="yes" xml:space="preserve">
          <source>Just take a look at &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt; and &lt;code&gt;@Repository&lt;/code&gt; annotation definitions:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Solo eche un vistazo a las &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;definiciones de anotaci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="903bfafcdae2fa0d2a53b0efa2b6858af2cb9337" translate="yes" xml:space="preserve">
          <source>Let's say you want to Monitors the Activity of the DAO Layer only. You will write an Aspect (A class) class that does some logging before and after every method of your DAO is invoked, you are able to do that using AOP as you have three distinct Layers and are not mixed.</source>
          <target state="translated">Digamos que quieres monitorear la actividad de la capa DAO solamente.Escribirás una clase de Aspecto (clase A)que haga un poco de registro antes y después de que cada método de tu DAO sea invocado,puedes hacerlo usando AOP ya que tienes tres Capas distintas y no están mezcladas.</target>
        </trans-unit>
        <trans-unit id="c2629ed734c3a1b852e77ed00f1df23f518f1f94" translate="yes" xml:space="preserve">
          <source>More Detailed View</source>
          <target state="translated">Vista más detallada</target>
        </trans-unit>
        <trans-unit id="ebb845500698520391f76f33b840d9410bf39333" translate="yes" xml:space="preserve">
          <source>Now lets move to each one; first &lt;strong&gt;@Service&lt;/strong&gt;, If you are building some logic for specific business case you need to separate that in a place which will contain your business logic, this service is normal Class or you can use it as interface if you want , and it is written like this</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora pasemos a cada uno; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;primero &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Service&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , si est&amp;aacute; creando algo de l&amp;oacute;gica para un caso de negocios espec&amp;iacute;fico, debe separarlo en un lugar que contendr&amp;aacute; su l&amp;oacute;gica de negocios, este servicio es de Clase normal o puede usarlo como interfaz si lo desea, y est&amp;aacute; escrito como esta&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="235ac4ca12c6e15fd070a83c68746376ccc0ff7f" translate="yes" xml:space="preserve">
          <source>Now you may ask why separate them: (I assume you know AOP-Aspect Oriented Programming)</source>
          <target state="translated">Ahora puede preguntarse por qué separarlos:(Asumo que conoces la Programación Orientada al AOP-Aspecto)</target>
        </trans-unit>
        <trans-unit id="0e49e54de73dcdad3023900189208d240b064830" translate="yes" xml:space="preserve">
          <source>One should choose a more specialised form of &lt;code&gt;@Component&lt;/code&gt; while annotating their class as this annotation may contain specific behavior going forward.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Se debe elegir una forma m&amp;aacute;s especializada de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; al anotar su clase, ya que esta anotaci&amp;oacute;n puede contener un comportamiento espec&amp;iacute;fico en el futuro.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fdd116a6947fffa7da31c90c4e34c869835628f6" translate="yes" xml:space="preserve">
          <source>One thing that &lt;code&gt;@Component&lt;/code&gt; offers is that you can annotate other annotations with it, and then use them the same way as &lt;code&gt;@Service&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una cosa que &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ofrece &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es que puede anotar otras anotaciones con &amp;eacute;l y luego usarlas de la misma manera que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d31650711bf9f2dafab41426e9e398c7d17c0a5a" translate="yes" xml:space="preserve">
          <source>Or does the annotation also influence the behavior and functionality of the class?</source>
          <target state="translated">¿O la anotación también influye en el comportamiento y la funcionalidad de la clase?</target>
        </trans-unit>
        <trans-unit id="a06c6eb35e880fc6c2fdd09687a380413e6a28fa" translate="yes" xml:space="preserve">
          <source>Originally answered &lt;a href=&quot;https://stackoverflow.com/questions/16051656/advantages-of-using-spring-stereotypes/16105106#16105106&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Originalmente respondido &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/16051656/advantages-of-using-spring-stereotypes/16105106#16105106&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aqu&amp;iacute;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b6262057e07ae846d043a86d7e9fee68034d9861" translate="yes" xml:space="preserve">
          <source>Other class-level annotations may be considered as identifying a
  component as well, typically a special kind of component: e.g. the
  @Repository annotation or AspectJ's @Aspect annotation.</source>
          <target state="translated">Puede considerarse que otras anotaciones a nivel de clase identifican también un componente,típicamente un tipo especial de componente:por ejemplo,la anotación @Repository o la anotación @Aspect de AspectJ.</target>
        </trans-unit>
        <trans-unit id="0c3bd2feae7e8a7044ad1d68132cdba2cae4dd29" translate="yes" xml:space="preserve">
          <source>Plus &lt;code&gt;@Service&lt;/code&gt; is advance of &lt;code&gt;@Component&lt;/code&gt;. Assume the bean class name is &lt;code&gt;CustomerService&lt;/code&gt;, since you did not choose XML bean configuration way so you annotated the bean with &lt;code&gt;@Component&lt;/code&gt; to indicate it as a Bean. So while getting the bean object &lt;code&gt;CustomerService cust = (CustomerService)context.getBean(&quot;customerService&quot;);&lt;/code&gt; By default, Spring will lower case the first character of the component &amp;ndash; from &amp;lsquo;CustomerService&amp;rsquo; to &amp;lsquo;customerService&amp;rsquo;. And you can retrieve this component with name &amp;lsquo;customerService&amp;rsquo;.
But if you use &lt;code&gt;@Service&lt;/code&gt; annotation for the bean class you can provide a specific bean name by</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un avance de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Suponga que el nombre de la clase del bean es &lt;/font&gt;&lt;/font&gt; &lt;code&gt;CustomerService&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , ya que no eligi&amp;oacute; la forma de configuraci&amp;oacute;n del bean XML, por lo que anot&amp;oacute; el bean con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para indicarlo como un Bean. Entonces, al obtener el objeto bean &lt;/font&gt;&lt;/font&gt; &lt;code&gt;CustomerService cust = (CustomerService)context.getBean(&quot;customerService&quot;);&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Por defecto, Spring en min&amp;uacute;scula el primer car&amp;aacute;cter del componente, desde 'CustomerService' hasta 'customerService'. Y puede recuperar este componente con el nombre 'customerService'. Pero si usa la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anotaci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para la clase de bean, puede proporcionar un nombre de bean espec&amp;iacute;fico&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="97b6f37b8647002ac0f4d19689972c444a6cc418" translate="yes" xml:space="preserve">
          <source>Purpose of each annotation:</source>
          <target state="translated">Propósito de cada anotación:</target>
        </trans-unit>
        <trans-unit id="5c33ac0525673af29e43ddf85d13630c95db59c2" translate="yes" xml:space="preserve">
          <source>Referring to &lt;code&gt;JSR-330&lt;/code&gt;, which is now supported by spring, you can only use &lt;code&gt;@Named&lt;/code&gt; to define a bean (Somehow &lt;code&gt;@Named=@Component&lt;/code&gt;). So according to this standard, there seems that there is no use to define stereotypes (like &lt;code&gt;@Repository&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Controller&lt;/code&gt;) to categories beans.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En referencia a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;JSR-330&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que ahora es compatible con spring, solo puede usar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Named&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para definir un bean (Somehow &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Named=@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, de acuerdo con este est&amp;aacute;ndar, parece que no sirve de nada definir los estereotipos (como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) para categor&amp;iacute;as beans.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="685dc316b07cd5f694d0845b3fd6ec857a538dd4" translate="yes" xml:space="preserve">
          <source>Repository are the DAOs (Data Access Objects), they access the database directly.</source>
          <target state="translated">Los depósitos son los DAOs (Data Access Objects),ellos acceden a la base de datos directamente.</target>
        </trans-unit>
        <trans-unit id="e147f1fe24ee57f9f37f6dc9c7383254c93bd48f" translate="yes" xml:space="preserve">
          <source>Service Hold business Logic, Calculations etc.</source>
          <target state="translated">Lógica,cálculos,etc.del servicio de mantenimiento.</target>
        </trans-unit>
        <trans-unit id="e2d186594b1e6d077235fcfdef486079382c759e" translate="yes" xml:space="preserve">
          <source>Similar to above, in the future Spring may add special functionalities for &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Controller&lt;/code&gt; and &lt;code&gt;@Repository&lt;/code&gt; based on their layering conventions. Hence, it's always a good idea to respect the convention and use it in line with layers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Similar a lo anterior, en el futuro Spring puede agregar funcionalidades especiales para &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; en&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; funci&amp;oacute;n de sus convenciones de capas. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, siempre es una buena idea respetar la convenci&amp;oacute;n y usarla en l&amp;iacute;nea con las capas.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="426f653b4b02591f9400e218877d98d88ef2cf85" translate="yes" xml:space="preserve">
          <source>So all classes annotated with &lt;code&gt;@ScheduledJob&lt;/code&gt; are spring beans and in addition to that are registered as quartz jobs. You just have to provide code that handles the specific annotation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, todas las clases anotadas con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@ScheduledJob&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son granos de primavera y, adem&amp;aacute;s, est&amp;aacute;n registrados como trabajos de cuarzo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Solo tiene que proporcionar un c&amp;oacute;digo que maneje la anotaci&amp;oacute;n espec&amp;iacute;fica.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94f5ef83d953e16e3fc387e0969a50cac858275e" translate="yes" xml:space="preserve">
          <source>So you can do logging of DAO  &quot;around&quot;, &quot;before&quot; or &quot;after&quot; the DAO methods. You could do that because you had a DAO in the first place. What you just achieved is &lt;strong&gt;Separation of concerns or tasks.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, puede hacer un registro de DAO &quot;alrededor&quot;, &quot;antes&quot; o &quot;despu&amp;eacute;s&quot; de los m&amp;eacute;todos DAO. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Podr&amp;iacute;as hacer eso porque ten&amp;iacute;as un DAO en primer lugar. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo que acaba de lograr es la &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;separaci&amp;oacute;n de preocupaciones o tareas.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c1d2586129c5e43b746ba3d3c2d74b7668fa20f" translate="yes" xml:space="preserve">
          <source>Special type annotations are also scanned, because they themselves are annotated with &lt;code&gt;@Component&lt;/code&gt; annotation, which means they are also &lt;code&gt;@Component&lt;/code&gt;s. If we define our own custom annotation and annotate it with &lt;code&gt;@Component&lt;/code&gt;, it will also get scanned with &lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las anotaciones de tipo especial tambi&amp;eacute;n se escanean, porque ellas mismas est&amp;aacute;n anotadas con la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anotaci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , lo que significa que tambi&amp;eacute;n son &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; s. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si definimos nuestra propia anotaci&amp;oacute;n personalizada y la anotamos con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , tambi&amp;eacute;n se escanear&amp;aacute; con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="13138bde579f40373313fd0ba397b74463f24bd5" translate="yes" xml:space="preserve">
          <source>Spring 2.5 introduces further stereotype annotations: &lt;code&gt;@Component&lt;/code&gt;,
  &lt;code&gt;@Service&lt;/code&gt;, and &lt;code&gt;@Controller&lt;/code&gt;. &lt;code&gt;@Component&lt;/code&gt; is a generic stereotype for any
  Spring-managed component. &lt;code&gt;@Repository&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, and &lt;code&gt;@Controller&lt;/code&gt; are
  specializations of &lt;code&gt;@Component&lt;/code&gt; for more specific use cases, for
  example, in the persistence, service, and presentation layers,
  respectively.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring 2.5 presenta m&amp;aacute;s anotaciones de estereotipo: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un estereotipo gen&amp;eacute;rico para cualquier componente administrado por Spring. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son especializaciones de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para casos de uso m&amp;aacute;s espec&amp;iacute;ficos, por ejemplo, en las capas de persistencia, servicio y presentaci&amp;oacute;n, respectivamente.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0d6a36819b19fd7dcb56550f70df1216a3e250f9" translate="yes" xml:space="preserve">
          <source>Spring 2.5 introduces further stereotype annotations: @Component, @Service and @Controller. @Component serves as a generic stereotype for any Spring-managed component; whereas, @Repository, @Service, and @Controller serve as specializations of @Component for more specific use cases (e.g., in the persistence, service, and presentation layers, respectively). What this means is that you can annotate your component classes with @Component, but by annotating them with @Repository, @Service, or @Controller instead, your classes are more properly suited for processing by tools or associating with aspects. For example, these stereotype annotations make ideal targets for pointcuts. Of course, it is also possible that @Repository, @Service, and @Controller may carry additional semantics in future releases of the Spring Framework. Thus, if you are making a decision between using @Component or @Service for your service layer, @Service is clearly the better choice. Similarly, as stated above, @Repository is already supported as a marker for automatic exception translation in your persistence layer.</source>
          <target state="translated">La primavera 2.5 introduce más anotaciones de estereotipos:@Componente,@Servicio y @Controlador.@Component sirve como un estereotipo genérico para cualquier componente gestionado por Spring;mientras que @Repository,@Service y @Controller sirven como especializaciones de @Component para casos de uso más específicos (por ejemplo,en las capas de persistencia,servicio y presentación,respectivamente).Lo que esto significa es que se pueden anotar las clases de los componentes con @Component,pero al anotarlas con @Repository,@Service o @Controller en su lugar,las clases son más adecuadas para ser procesadas por herramientas o para asociarlas con aspectos.Por ejemplo,estas anotaciones de estereotipos son objetivos ideales para los cortes de puntos.Por supuesto,también es posible que @Repositorio,@Servicio y @Controlador puedan llevar semántica adicional en futuras versiones del Marco de Trabajo de Primavera.Por lo tanto,si está tomando una decisión entre usar @Componente o @Servicio para su capa de servicio,@Servicio es claramente la mejor opción.Del mismo modo,como se ha indicado anteriormente,@Repository ya está soportado como marcador para la traducción automática de excepciones en su capa de persistencia.</target>
        </trans-unit>
        <trans-unit id="4c8f97fe823731da56120c1a0479f249b978d9eb" translate="yes" xml:space="preserve">
          <source>Spring provides four different types of auto component scan annotations, they are &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt; and &lt;code&gt;@Controller&lt;/code&gt;. Technically, there is no difference between them, but every auto component scan annotation should be used for a special purpose and within the defined layer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring proporciona cuatro tipos diferentes de anotaciones de escaneo de componentes autom&amp;aacute;ticos, son &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;T&amp;eacute;cnicamente, no hay diferencia entre ellos, pero cada anotaci&amp;oacute;n de escaneo de componentes autom&amp;aacute;ticos debe usarse para un prop&amp;oacute;sito especial y dentro de la capa definida.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4e47ccbf053a0ec52f68e06b21639f47966082e4" translate="yes" xml:space="preserve">
          <source>Spring provides further stereotype annotations: @Component, @Service,
  and @Controller. @Component is a generic stereotype for any
  Spring-managed component. @Repository, @Service, and @Controller are
  specializations of @Component for more specific use cases, for
  example, in the persistence, service, and presentation layers,
  respectively. Therefore, you can annotate your component classes with
  @Component, but by annotating them with @Repository, @Service, or
  @Controller instead, your classes are more properly suited for
  processing by tools or associating with aspects. For example, these
  stereotype annotations make ideal targets for pointcuts. It is also
  possible that @Repository, @Service, and @Controller may carry
  additional semantics in future releases of the Spring Framework. Thus,
  if you are choosing between using @Component or @Service for your
  service layer, @Service is clearly the better choice. Similarly, as
  stated above, @Repository is already supported as a marker for
  automatic exception translation in your persistence layer.</source>
          <target state="translated">La primavera proporciona más anotaciones de estereotipos:@Componente,@Servicio y @Controlador.@Componente es un estereotipo genérico para cualquier componente gestionado por Spring.@Repositorio,@Servicio y @Controlador son especializaciones de @Componente para casos de uso más específicos,por ejemplo,en las capas de persistencia,servicio y presentación,respectivamente.Por lo tanto,puede anotar sus clases de componentes con @Component,pero al anotarlas con @Repository,@Service o @Controller en su lugar,sus clases son más adecuadas para ser procesadas por herramientas o para asociarlas con aspectos.Por ejemplo,estas anotaciones de estereotipos son objetivos ideales para los cortes de puntos.También es posible que @Repositorio,@Servicio y @Controlador puedan llevar semántica adicional en futuras versiones del Marco de Trabajo de Primavera.Por lo tanto,si está eligiendo entre usar @Componente o @Servicio para su capa de servicio,@Servicio es claramente la mejor opción.Del mismo modo,como se ha indicado anteriormente,@Repository ya está soportado como marcador para la traducción automática de excepciones en su capa de persistencia.</target>
        </trans-unit>
        <trans-unit id="2af2883cda90ae2aabcf36bb1d742fa55939ea53" translate="yes" xml:space="preserve">
          <source>Technically &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt; are all same. All of them extends &lt;code&gt;@Component&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;T&amp;eacute;cnicamente &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son todos iguales. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Todos ellos extienden &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3450da4a4365327d7d93ea1ed7f17670543838e4" translate="yes" xml:space="preserve">
          <source>That mean Service, The Controller and Repository are functionally the same.</source>
          <target state="translated">Eso significa que el Servicio,el Controlador y el Depósito son funcionalmente iguales.</target>
        </trans-unit>
        <trans-unit id="0229edf27680c26ff671b29e914c64208980be53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@Controller&lt;/code&gt; annotation indicates that a particular class serves the role of a controller. The &lt;code&gt;@Controller&lt;/code&gt; annotation acts as a stereotype for the annotated class, indicating its role.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anotaci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; indica que una clase particular cumple la funci&amp;oacute;n de un controlador. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anotaci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; act&amp;uacute;a como un estereotipo para la clase anotada, indicando su papel.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="533fb10976bc2fbd348b95363b3eebc5b25e7b10" translate="yes" xml:space="preserve">
          <source>The @Repository annotation is a marker for any class that fulfills the
  role or stereotype of a repository (also known as Data Access Object
  or DAO). Among the uses of this marker is the automatic translation of
  exceptions as described in Section 20.2.2, &amp;ldquo;Exception translation&amp;rdquo;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La anotaci&amp;oacute;n @Repository es un marcador para cualquier clase que cumpla el rol o estereotipo de un repositorio (tambi&amp;eacute;n conocido como Data Access Object o DAO). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entre los usos de este marcador est&amp;aacute; la traducci&amp;oacute;n autom&amp;aacute;tica de excepciones como se describe en la Secci&amp;oacute;n 20.2.2, &amp;ldquo;Traducci&amp;oacute;n de excepciones&amp;rdquo;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="900ecd692d24a5c797f10bc27ca6905fadfb0704" translate="yes" xml:space="preserve">
          <source>The main purpose of using three different &lt;code&gt;@annotations&lt;/code&gt; is to provide better Modularity to the Enterprise application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El prop&amp;oacute;sito principal de usar tres &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@annotations&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; diferentes &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;es proporcionar una mejor Modularidad a la aplicaci&amp;oacute;n Enterprise.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa530228a9750a5c455b2162199e35549007bf86" translate="yes" xml:space="preserve">
          <source>The three annotations are used to separate &lt;strong&gt;&quot;Layers&quot;&lt;/strong&gt; in your application,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las tres anotaciones se utilizan para separar &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot;Capas&quot;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en su aplicaci&amp;oacute;n,&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4bf4bb5c5fdc69be38378fc9b78403ba1c199156" translate="yes" xml:space="preserve">
          <source>There is no difference between &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt;.
&lt;code&gt;@Component&lt;/code&gt; is the Generic annotation to represent the component of our MVC. But there will be several components as part of our MVC application like service layer components, persistence layer components and presentation layer components. So to differentiate them Spring people have given the other three annotations also.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No hay diferencia entre &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es la anotaci&amp;oacute;n gen&amp;eacute;rica para representar el componente de nuestro MVC. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero habr&amp;aacute; varios componentes como parte de nuestra aplicaci&amp;oacute;n MVC, como componentes de la capa de servicio, componentes de la capa de persistencia y componentes de la capa de presentaci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, para diferenciarlos, la gente de Spring tambi&amp;eacute;n ha dado las otras tres anotaciones.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d40a885a98ab77cf143237e07c7ff23a62fee425" translate="yes" xml:space="preserve">
          <source>Therefore, you can annotate your component classes with &lt;code&gt;@Component&lt;/code&gt;,
  but by annotating them with &lt;code&gt;@Repository&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, or &lt;code&gt;@Controller&lt;/code&gt;
  instead, your classes are more properly suited for processing by tools
  or associating with aspects. For example, these stereotype annotations
  make ideal targets for pointcuts.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, puede anotar sus clases de componentes con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , pero al &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Repository&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , sus clases son m&amp;aacute;s adecuadas para el procesamiento por herramientas o la asociaci&amp;oacute;n con aspectos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, estas anotaciones de estereotipo son objetivos ideales para puntos de corte.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="058eac42dd2f1563bae1c74a367ecbd5fb342e14" translate="yes" xml:space="preserve">
          <source>These are all StereoType annotations.this are usefull for the making our classes as spring beans in ioc container,</source>
          <target state="translated">Estas son todas las anotaciones de StereoType.Esto es útil para hacer nuestras clases como frijoles de primavera en un contenedor ioc,</target>
        </trans-unit>
        <trans-unit id="9ea8e1c357fb5f85e91ae49d1be94f92a6e71d20" translate="yes" xml:space="preserve">
          <source>They are almost the same - all of them mean that the class is a Spring bean. &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt; and &lt;code&gt;@Controller&lt;/code&gt; are specialized &lt;code&gt;@Component&lt;/code&gt;s. You can choose to perform specific actions with them. For example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Son casi iguales, todos significan que la clase es un Spring bean. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; s &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;especializados &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede elegir realizar acciones espec&amp;iacute;ficas con ellos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="de905c43b0b2db7baa533c33546ac95732270a99" translate="yes" xml:space="preserve">
          <source>This annotation is a specialized version of &lt;code&gt;@Controller&lt;/code&gt; which adds
&lt;code&gt;@Controller&lt;/code&gt; and &lt;code&gt;@ResponseBody&lt;/code&gt; annotation automatically. so we do not have to add &lt;code&gt;@ResponseBody&lt;/code&gt; to our mapping methods. That means
&lt;code&gt;@ResponseBody&lt;/code&gt; is default active.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta anotaci&amp;oacute;n es una versi&amp;oacute;n especializada de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que agrega la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anotaci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@ResponseBody&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; autom&amp;aacute;ticamente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;as&amp;iacute; que no tenemos que agregar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@ResponseBody&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a nuestros m&amp;eacute;todos de mapeo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Eso significa que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@ResponseBody&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; est&amp;aacute; activo por defecto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ad914a8e008667b3f088395a61125ea2021b0679" translate="yes" xml:space="preserve">
          <source>This bean post processor adds an advisor to any bean that&amp;rsquo;s annotated with &lt;code&gt;@Repository&lt;/code&gt; so that any platform-specific exceptions are caught and then re-thrown as one of Spring&amp;rsquo;s unchecked data access exceptions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Este postprocesador de beans agrega un asesor a cualquier bean anotado con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para que se capturen las excepciones espec&amp;iacute;ficas de la plataforma y luego se vuelvan a lanzar como una de las excepciones de acceso a datos no verificadas de Spring.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dfd7db7acb2d6fc63a6f62d3d5b6144a16676402" translate="yes" xml:space="preserve">
          <source>This is a general-purpose stereotype annotation indicating that the class is a spring component.</source>
          <target state="translated">Esta es una anotación estereotipada de propósito general que indica que la clase es un componente de primavera.</target>
        </trans-unit>
        <trans-unit id="29446177a2ee21e508666cc155eefb09a624a7e7" translate="yes" xml:space="preserve">
          <source>This is to indicate that the class defines a data repository.</source>
          <target state="translated">Esto es para indicar que la clase define un depósito de datos.</target>
        </trans-unit>
        <trans-unit id="99a7f349c5d5d0a3edcbffea295e6e3e4fdda6c3" translate="yes" xml:space="preserve">
          <source>Thus, if you are choosing between using &lt;code&gt;@Component&lt;/code&gt; or &lt;code&gt;@Service&lt;/code&gt; for
  your service layer, &lt;code&gt;@Service&lt;/code&gt; is clearly the better choice. Similarly,
  as stated above, &lt;code&gt;@Repository&lt;/code&gt; is already supported as a marker for
  automatic exception translation in your persistence layer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, si elige entre usar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para su capa de servicio, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es claramente la mejor opci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De manera similar, como se indic&amp;oacute; anteriormente, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ya es compatible como marcador para la traducci&amp;oacute;n autom&amp;aacute;tica de excepciones en su capa de persistencia.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3a3c5bd3d66266193b40ff5b6c65f686b1bcdc89" translate="yes" xml:space="preserve">
          <source>Thus, it&amp;rsquo;s not wrong to say that &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt; and &lt;code&gt;@Repository&lt;/code&gt; are special types of &lt;code&gt;@Component&lt;/code&gt; annotation. &lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; picks them up and registers their following classes as beans, just as if they were annotated with &lt;code&gt;@Component&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, no est&amp;aacute; mal decir que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son tipos especiales de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anotaci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; los&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; recoge y registra sus siguientes clases como beans, como si estuvieran anotados con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d69d4160a585819959849c4eab806d317481f0d" translate="yes" xml:space="preserve">
          <source>To represent persistence layer components: &lt;code&gt;@Repository&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para representar los componentes de la capa de persistencia: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ead03f90db54e666450ff5accb8191e98e8faf2f" translate="yes" xml:space="preserve">
          <source>To represent presentation layer components: &lt;code&gt;@Controller&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para representar los componentes de la capa de presentaci&amp;oacute;n: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84f553135d1580aab45e503274f77780d545545a" translate="yes" xml:space="preserve">
          <source>To represent service layer components: &lt;code&gt;@Service&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para representar componentes de la capa de servicio: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2000222464e633cfff2ab4ceb90805664f7f5cec" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;@Repository&lt;/code&gt; for all your stored proc DB connections</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Use &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para todas sus conexiones de base de datos de proceso almacenadas&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5c1728a39750ffa3f74da82312bfc52d8e3e74c7" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;@Service&lt;/code&gt; for all your web service type of DB connections</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Use &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para todo su tipo de servicio web de conexiones DB&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc984e733a64481ce8437080e217ab61c76e668e" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;@Service&lt;/code&gt; and &lt;code&gt;@Repository&lt;/code&gt; annotations are important from database connection perspective.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El uso de las &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anotaciones &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es importante desde la perspectiva de la conexi&amp;oacute;n de la base de datos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="395a1505737478df9357bdcff0d4b671ab87cde1" translate="yes" xml:space="preserve">
          <source>We can answer this according to java standard</source>
          <target state="translated">Podemos responder a esto de acuerdo con el estándar de Java</target>
        </trans-unit>
        <trans-unit id="512d97efffc0e0cfedd41715bd27b58f51ad13f2" translate="yes" xml:space="preserve">
          <source>We can directly use &lt;code&gt;@Component&lt;/code&gt; for each and every bean, but for better understanding and maintainability of a large application, we use &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Podemos usar directamente &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para cada bean, pero para una mejor comprensi&amp;oacute;n y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de mantenimiento de una aplicaci&amp;oacute;n grande, usamos &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Controller&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="350545f8a4491c80a200eba5f89f14af6638afce" translate="yes" xml:space="preserve">
          <source>We cannot switch this annotation with any other like &lt;code&gt;@Service&lt;/code&gt; or &lt;code&gt;@Repository&lt;/code&gt;, even though they look same. 
The dispatcher scans the classes annotated with &lt;code&gt;@Controller&lt;/code&gt; and detects methods annotated with &lt;code&gt;@RequestMapping&lt;/code&gt; annotations within them. We can use &lt;code&gt;@RequestMapping&lt;/code&gt; on/in only those methods whose classes are annotated with &lt;code&gt;@Controller&lt;/code&gt; and it will &lt;strong&gt;NOT&lt;/strong&gt; work with &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt; etc...</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No podemos cambiar esta anotaci&amp;oacute;n con ninguna otra como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , aunque se vean iguales. El despachador escanea las clases anotadas con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y detecta los m&amp;eacute;todos anotados con &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anotaciones &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; dentro de ellas. Podemos usar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@RequestMapping&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en / solo en aquellos m&amp;eacute;todos cuyas clases est&amp;aacute;n anotadas con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;NO&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; funcionar&amp;aacute; con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;etc.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="987a0f0b1f106a0619a7eb85604b381949c7a0f7" translate="yes" xml:space="preserve">
          <source>What's the difference between @Component, @Repository &amp; @Service annotations in Spring</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Cu&amp;aacute;l es la diferencia entre las anotaciones @Component, @Repository y @Service en Spring&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cefd45d96e7811a0c9b997ad8106965b84732c2a" translate="yes" xml:space="preserve">
          <source>Why use @Repository, @Service, @Controller over @Component?
We can mark our component classes with @Component, but if instead we use the alternative that adapts to the expected functionality. Our classes are better suited to the functionality expected in each particular case.</source>
          <target state="translated">¿Por qué usar @Repositorio,@Servicio,@Controlador sobre @Componente? Podemos marcar nuestras clases de componentes con @Componente,pero si en cambio usamos la alternativa que se adapta a la funcionalidad esperada.Nuestras clases se adaptan mejor a la funcionalidad esperada en cada caso particular.</target>
        </trans-unit>
        <trans-unit id="4330aa1f435a8813e33467c458b9c523669cfb79" translate="yes" xml:space="preserve">
          <source>above declared annotations are special because when we add &lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; into xxx-servlet.xml file ,spring will automatically create the object of those classes which are annotated with above annotation during context creation/loading phase.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las anotaciones declaradas anteriormente son especiales porque cuando agregamos &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en el archivo xxx-servlet.xml, spring crear&amp;aacute; autom&amp;aacute;ticamente el objeto de esas clases que se anotan con la anotaci&amp;oacute;n anterior durante la fase de creaci&amp;oacute;n / carga del contexto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e564121cda727185523b754490351a631d26c406" translate="yes" xml:space="preserve">
          <source>all these annotations are type of stereo type type of annotation,the difference between these three annotations are</source>
          <target state="translated">todas estas anotaciones son del tipo de tipo estéreo,la diferencia entre estas tres anotaciones es</target>
        </trans-unit>
        <trans-unit id="18f4b81d4f3a4621f6153578c2a46358cc403380" translate="yes" xml:space="preserve">
          <source>and a &lt;code&gt;Repository&lt;/code&gt; as per Eric Evans,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;y un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Repository&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; seg&amp;uacute;n Eric Evans,&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db875ee55092e2c0f3365edd019bd8c053b32ca1" translate="yes" xml:space="preserve">
          <source>and you can get the bean object by</source>
          <target state="translated">y puedes conseguir el objeto de frijol por</target>
        </trans-unit>
        <trans-unit id="7e2fb968a45f3910e02ba7ce0b0ea0809f985cc3" translate="yes" xml:space="preserve">
          <source>for example</source>
          <target state="translated">por ejemplo</target>
        </trans-unit>
        <trans-unit id="3e13d8fce6fc1b32339adca9dc15bc225249e64d" translate="yes" xml:space="preserve">
          <source>or else you can use &lt;code&gt;@Component&lt;/code&gt; for all of them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;o bien puede usar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para todos ellos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab2c9bc11b9d93d73219ddd793d8bd6c8060c0db" translate="yes" xml:space="preserve">
          <source>reference :- &lt;a href=&quot;https://docs.spring.io/spring/docs/3.0.0.M3/reference/html/ch04s12.html&quot;&gt;Spring Documentation - Classpath scanning, managed components and writing configurations using Java &lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;referencia: - &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/3.0.0.M3/reference/html/ch04s12.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Documentaci&amp;oacute;n de Spring - Escaneo Classpath, componentes administrados y configuraciones de escritura usando Java&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9ef3608f431d68a9480040ab93b4dc1c90c79240" translate="yes" xml:space="preserve">
          <source>whenever we adds the &lt;code&gt;@Service&lt;/code&gt; or &lt;code&gt;@Repositroy&lt;/code&gt; or &lt;code&gt;@Controller&lt;/code&gt; annotation by default &lt;code&gt;@Component&lt;/code&gt; annotation is going to existence on top of the class</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;siempre que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anotaci&amp;oacute;n @Service&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Repositroy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de forma predeterminada, la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anotaci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; va a existir en la parte superior de la clase&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
