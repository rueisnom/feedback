<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/6841333">
    <body>
      <group id="6841333">
        <trans-unit id="bd1451938716cbc1c8094ba21225f6bd6718e890" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_6_.28December_11.2C_2006.29&quot;&gt;JDK 6&lt;/a&gt; two years ago, and in &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_7_.28July_28.2C_2011.29&quot;&gt;JDK 7&lt;/a&gt; just recently in &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#cite_note-131&quot;&gt;update 25&lt;/a&gt;.</source>
          <target state="translated">2年前の&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_6_.28December_11.2C_2006.29&quot;&gt;JDK 6&lt;/a&gt; 、および最近の&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#cite_note-131&quot;&gt;アップデート25の&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_7_.28July_28.2C_2011.29&quot;&gt;JDK 7&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="fe67aa701548fdd40c1b0265468a45f72b73f1df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT:&lt;/strong&gt; History has changed again...</source>
          <target state="translated">&lt;strong&gt;編集：&lt;/strong&gt;歴史は再び変わりました...</target>
        </trans-unit>
        <trans-unit id="0551d19941d120adfb039f0ae92f8a04f20e3128" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT:&lt;/strong&gt; Stop press! History changes...</source>
          <target state="translated">&lt;strong&gt;編集：&lt;/strong&gt;プレスを止めて！ 歴史の変化...</target>
        </trans-unit>
        <trans-unit id="bde921caecc04f466d2c822ea74545f52d552b7c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT:&lt;/strong&gt; To answer a question around a transition at 1900... it looks like the Java timezone implementation treats &lt;em&gt;all&lt;/em&gt; time zones as simply being in their standard time for any instant before the start of 1900 UTC:</source>
          <target state="translated">&lt;strong&gt;編集：&lt;/strong&gt; 1900年の移行に関する質問に答えるために... Javaタイムゾーン実装は&lt;em&gt;すべての&lt;/em&gt;タイムゾーンを1900 UTCの開始前の任意の瞬間の標準時間にあるものとして扱うように見えます：</target>
        </trans-unit>
        <trans-unit id="a97cec64d39b8eb010cdc08b8e103d0bb8477c86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;It's better to use UTC where time doesn't change unless if needed to use non-UTC time like in display.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;表示のように非UTC時間を使用する必要がない限り、時間が変更されない場所でUTCを使用することをお勧めします。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d54617ac5dccf99b7c02c39453136d7473a3a634" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Java version:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Javaバージョン：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ad49472f83852737eae406aca91cdf31a2059cf4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The output is:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;出力は次のとおりです。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1902350e92496ff9e18c5813a36700a28a11fa42" translate="yes" xml:space="preserve">
          <source>Also, these two offsets are the same:</source>
          <target state="translated">また、この2つのオフセットも同じです。</target>
        </trans-unit>
        <trans-unit id="0c0cfe54c8369a97a25846fb4b86d04a36d5e3f0" translate="yes" xml:space="preserve">
          <source>And then see that the result is:</source>
          <target state="translated">そして、その結果を見てください。</target>
        </trans-unit>
        <trans-unit id="858ee0b7325db3da2f9d26de1bb98beb63ac41f3" translate="yes" xml:space="preserve">
          <source>Another way to approach this is to check whether there's a transition going on. We can do this like this:</source>
          <target state="translated">もう一つのアプローチ方法は、移行が行われているかどうかを確認することです。このようにすることができます</target>
        </trans-unit>
        <trans-unit id="98e8bfb3f4d507059ac54e043de58cc5443b82ee" translate="yes" xml:space="preserve">
          <source>As explained by others, there's a time discontinuity there. There are two possible timezone offsets for &lt;code&gt;1927-12-31 23:54:08&lt;/code&gt; at &lt;code&gt;Asia/Shanghai&lt;/code&gt;, but only one offset for &lt;code&gt;1927-12-31 23:54:07&lt;/code&gt;. So, depending on which offset is used, there's either a one second difference or a 5 minutes and 53 seconds difference.</source>
          <target state="translated">他の人が説明したように、そこには時間の不連続があります。 &lt;code&gt;1927-12-31 23:54:08&lt;/code&gt; の &lt;code&gt;Asia/Shanghai&lt;/code&gt; では2つのタイムゾーンオフセットがありますが、 &lt;code&gt;1927-12-31 23:54:07&lt;/code&gt; のオフセットは1つだけです。 したがって、使用されるオフセットに応じて、1秒の差または5分53秒の差があります。</target>
        </trans-unit>
        <trans-unit id="4fc8c3099313e3b540718692a541892bd6628f60" translate="yes" xml:space="preserve">
          <source>As others said, it's a time change in 1927 in Shanghai.</source>
          <target state="translated">他の方もおっしゃっていますが、上海では1927年のタイムチェンジです。</target>
        </trans-unit>
        <trans-unit id="92ab96205c8f86e70f3ccdccb518bf64a18fd635" translate="yes" xml:space="preserve">
          <source>But there is something different about these two time changes. The latter changes continuously and the former was just a change. It didn't change back or change again by the same amount.</source>
          <target state="translated">しかし、この二つの時間の変化には何か違うものがあります。後者は連続的に変化し、前者は変化しただけ。同じ量だけ戻ったり、また変わったりするわけではなかった。</target>
        </trans-unit>
        <trans-unit id="f514b433b60960e9cff044c9d2fa1237ffb4ac2d" translate="yes" xml:space="preserve">
          <source>But these two are different:</source>
          <target state="translated">しかし、この二つは違う。</target>
        </trans-unit>
        <trans-unit id="e4d76851ab235c8fb1be42a6df2c235bb2b681eb" translate="yes" xml:space="preserve">
          <source>I hope this helps people handle this sort of issue once Java 8 becomes widely available, or to those using Java 7 who adopt the JSR 310 backport.</source>
          <target state="translated">Java 8が広く利用できるようになってから、あるいはJava 7を使っている人でJSR 310のバックポートを採用している人たちが、このような問題に対処できるようになることを願っています。</target>
        </trans-unit>
        <trans-unit id="a72d9ab2a0ed8923c9ba597f62e9bc18d91da876" translate="yes" xml:space="preserve">
          <source>I mean, come on, aren't global static variables an anti-OO pattern? Nothing else is those pervasive defaults given by some rudimentary environment variables.......</source>
          <target state="translated">つまり、グローバルな静的変数は反OOパターンではないのでしょうか?いくつかの初歩的な環境変数によって与えられるそれらの広汎なデフォルト以外の何ものでもない......。</target>
        </trans-unit>
        <trans-unit id="066199f064ebb3cc500e664941df954942936266" translate="yes" xml:space="preserve">
          <source>I only noticed this because I'm collecting questions like this in Noda Time, in the form of &lt;a href=&quot;https://github.com/nodatime/nodatime/blob/master/src/NodaTime.Demo/StackOverflowExamples.cs#L68&quot;&gt;unit tests&lt;/a&gt;... The test has now been changed, but it just goes to show - not even historical data is safe.</source>
          <target state="translated">野田タイムで&lt;a href=&quot;https://github.com/nodatime/nodatime/blob/master/src/NodaTime.Demo/StackOverflowExamples.cs#L68&quot;&gt;ユニットテスト&lt;/a&gt;の形でこのような質問を収集しているので、私はこれに気づきました...テストは変更されましたが、表示されるだけです-履歴データでさえ安全ではありません。</target>
        </trans-unit>
        <trans-unit id="56c48ba41119f7aa61b2ce2e8b785a8269989909" translate="yes" xml:space="preserve">
          <source>I'm sorry to say, but the time discontinuity has moved a bit in</source>
          <target state="translated">で時間の不連続性が少し動いてしまいました。</target>
        </trans-unit>
        <trans-unit id="8b3d29b36e59c1a8b6737ba1d904177462d786a8" translate="yes" xml:space="preserve">
          <source>IMHO the pervasive, &lt;em&gt;implicit&lt;/em&gt; localization in Java is its single largest design flaw. It may be intended for user interfaces, but frankly, who really uses Java for user interfaces today except for some IDEs where you can basically ignore localization because programmers aren't exactly the target audience for it. You can fix it (especially on Linux servers) by:</source>
          <target state="translated">私見Javaでの広く&lt;em&gt;暗黙的な&lt;/em&gt;ローカリゼーションは、その単一の最大の設計上の欠陥です。 それはユーザーインターフェースを対象としている可能性がありますが、率直に言って、プログラマーが正確に対象ユーザーではないため、ローカリゼーションを基本的に無視できる一部のIDEを除き、ユーザーインターフェースにJavaを実際に使用します。 あなたはそれを（特にLinuxサーバーで）修正することができます：</target>
        </trans-unit>
        <trans-unit id="7fcc1a8a527402c0f0dfeebebf4baaaacb625564" translate="yes" xml:space="preserve">
          <source>If I change the dates to times 1 second later:</source>
          <target state="translated">日付を1秒後の時間帯に変更すると</target>
        </trans-unit>
        <trans-unit id="5111eaaf38d1db5ec766498848da9d88df7016f7" translate="yes" xml:space="preserve">
          <source>If I run the following program, which parses two date strings referencing times 1 second apart and compares them:</source>
          <target state="translated">以下のプログラムを実行すると、1秒間隔で時刻を参照している2つの日付文字列を解析して比較します。</target>
        </trans-unit>
        <trans-unit id="02c748d4978e79c37d10ac4811023a81fbcf2f28" translate="yes" xml:space="preserve">
          <source>If you can not display a date or time in UTC, always indicate the time-zone.</source>
          <target state="translated">日付や時間をUTCで表示できない場合は、常にタイムゾーンを表示してください。</target>
        </trans-unit>
        <trans-unit id="6306f0e3ad2baf3d4413643d7578c13d53158a95" translate="yes" xml:space="preserve">
          <source>If you can not require an input date/time in UTC, require an explicitly indicated time-zone.</source>
          <target state="translated">UTCでの入力を要求できない場合は、タイムゾーンを明示的に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="8087c7ec3c81c2fd292ffd2a9305534c6fc3d42a" translate="yes" xml:space="preserve">
          <source>If you converted to UTC, add each second, and convert to local time for display. You would go through 11:54:08 p.m. &lt;a href=&quot;http://en.wikipedia.org/wiki/Local_mean_time&quot;&gt;LMT&lt;/a&gt; - 11:59:59 p.m. LMT and then 11:54:08 p.m. &lt;a href=&quot;http://en.wikipedia.org/wiki/Central_Time_Zone_%28North_America%29&quot;&gt;CST&lt;/a&gt; - 11:59:59 p.m. CST.</source>
          <target state="translated">UTCに変換した場合は、1秒ごとに追加し、現地時間に変換して表示します。 午後11:54:08午後LMT-午後11:59:59午後&lt;a href=&quot;http://en.wikipedia.org/wiki/Local_mean_time&quot;&gt;LMT&lt;/a&gt;を通過し、午後11:54:08午後CST-午後11:59:59午後&lt;a href=&quot;http://en.wikipedia.org/wiki/Central_Time_Zone_%28North_America%29&quot;&gt;CSTを&lt;/a&gt;通過します。</target>
        </trans-unit>
        <trans-unit id="103136494c4c14adc48cb8f8c7ddfd0b81928581" translate="yes" xml:space="preserve">
          <source>In TZDB 2014f, the time of the change has moved to 1900-12-31, and it's now a mere 343 second change (so the time between &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;t+1&lt;/code&gt; is 344 seconds, if you see what I mean).</source>
          <target state="translated">TZDB 2014fでは、変更の時間は1900-12-31に移動し、現在は343秒の変更にすぎません（つまり、 &lt;code&gt;t&lt;/code&gt; と &lt;code&gt;t+1&lt;/code&gt; の間の時間は344秒です。</target>
        </trans-unit>
        <trans-unit id="5e37e1acca1e0cc2f4a1ebac231a5b1558c151d8" translate="yes" xml:space="preserve">
          <source>Instead of converting each date, you can use the following code:</source>
          <target state="translated">それぞれの日付を変換するのではなく、以下のコードを使用します。</target>
        </trans-unit>
        <trans-unit id="b3b9e3534c00684dc4a2b06c0f3d5e8c5d38a7ab" translate="yes" xml:space="preserve">
          <source>It's a time zone change on December 31st in Shanghai.</source>
          <target state="translated">12月31日の上海での時間帯変更です。</target>
        </trans-unit>
        <trans-unit id="75441c0e99705d8e65e4033acbeb0010a83637ba" translate="yes" xml:space="preserve">
          <source>Just another episode in the often weird and wonderful world of time zones.</source>
          <target state="translated">奇妙で素晴らしい時間帯の世界での別のエピソードです。</target>
        </trans-unit>
        <trans-unit id="e65efb5fa854d52f51124f878d5b88742c1710d5" translate="yes" xml:space="preserve">
          <source>Lesson to learn: avoid non-UTC times at all costs, except maybe for display.</source>
          <target state="translated">学ぶべき教訓:表示のために多分を除いて、何としてもUTC以外の時間を避けること。</target>
        </trans-unit>
        <trans-unit id="0049464ec04d018c3ecefbf1142ef34dcb8fd292" translate="yes" xml:space="preserve">
          <source>Note that the 2013a update of the timezone database moved this discontinuity a few seconds earlier, but the effect would still be observable.</source>
          <target state="translated">タイムゾーンデータベースの2013aアップデートでは、この不連続性が数秒前に移動していますが、その効果はまだ観測可能です。</target>
        </trans-unit>
        <trans-unit id="9137b60d69cf6be5d93720a3b111187bc27cb03e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.timeanddate.com/worldclock/clockchange.html?n=237&amp;amp;year=1927&quot;&gt;this page&lt;/a&gt; for details of 1927 in Shanghai. Basically at midnight at the end of 1927, the clocks went back 5 minutes and 52 seconds. So &quot;1927-12-31 23:54:08&quot; actually happened twice, and it looks like Java is parsing it as the &lt;em&gt;later&lt;/em&gt; possible instant for that local date/time - hence the difference.</source>
          <target state="translated">1927年の上海の詳細については、 &lt;a href=&quot;http://www.timeanddate.com/worldclock/clockchange.html?n=237&amp;amp;year=1927&quot;&gt;このページ&lt;/a&gt;を参照してください 。 基本的に1927年の終わりの真夜中に、時計は5分52秒戻りました。 したがって、「1927-12-31 23:54:08」は実際には2回発生し、Javaはそれをローカル日付/時刻の可能な最も&lt;em&gt;遅い&lt;/em&gt;瞬間として解析しているように見えます-したがって、違いです。</target>
        </trans-unit>
        <trans-unit id="9475c45ed435d1dcc8064230299ad9bbea971f1d" translate="yes" xml:space="preserve">
          <source>The code above produces no output on my Windows machine. So any time zone which has any offset other than its standard one at the start of 1900 will count that as a transition. TZDB itself has some data going back earlier than that, and doesn't rely on any idea of a &quot;fixed&quot; standard time (which is what &lt;code&gt;getRawOffset&lt;/code&gt; assumes to be a valid concept) so other libraries needn't introduce this artificial transition.</source>
          <target state="translated">上記のコードでは、Windowsマシンで出力が生成されません。 したがって、1900年の初めに標準以外のオフセットがあるタイムゾーンは、それを遷移としてカウントします。 TZDB自体にはそれより前に遡るデータがいくつかあり、「固定」標準時間（これは &lt;code&gt;getRawOffset&lt;/code&gt; が有効な概念であると想定している時間）の概念に依存しないため、他のライブラリではこの人工的な遷移を導入する必要はありません。</target>
        </trans-unit>
        <trans-unit id="b7100a91b9d8b1cb54cb804d21e63e3627bdd121" translate="yes" xml:space="preserve">
          <source>The moral of this strangeness is:</source>
          <target state="translated">この奇妙さの教訓は</target>
        </trans-unit>
        <trans-unit id="d63ca0e9fab08267556d100f286c945b2a64bc3d" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;java.time&lt;/code&gt; package on Java 8 let use see this more clearly, and provide tools to handle it. Given:</source>
          <target state="translated">Java 8の新しい &lt;code&gt;java.time&lt;/code&gt; パッケージは、これをより明確に見て、それを処理するためのツールを提供します。 与えられた：</target>
        </trans-unit>
        <trans-unit id="19a3e89ca6ba713c3583ed6c4c15800b57fd093f" translate="yes" xml:space="preserve">
          <source>The original question would no longer demonstrate quite the same behaviour, if rebuilt with version 2013a of &lt;a href=&quot;https://github.com/nodatime/nodatime/blob/master/src/NodaTime.Demo/StackOverflowExamples.cs#L68&quot;&gt;TZDB&lt;/a&gt;. In 2013a, the result would be 358 seconds, with a transition time of 23:54:03 instead of 23:54:08.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/nodatime/nodatime/blob/master/src/NodaTime.Demo/StackOverflowExamples.cs#L68&quot;&gt;TZDBの&lt;/a&gt;バージョン2013aで再構築した場合、元の質問はまったく同じ動作を示しません。 2013aでは、結果は358秒になり、遷移時間は23:54:08ではなく23:54:03になります。</target>
        </trans-unit>
        <trans-unit id="b217bce103afb1f4fb3afe8cf964a7f81122a266" translate="yes" xml:space="preserve">
          <source>The time can also mess up in other places like the US. The US has Daylight Saving Time. When the Daylight Saving Time starts the time goes forward 1 hour. But after a while the Daylight Saving Time ends, and it goes backward 1 hour back to the standard time zone. So sometimes when comparing times in the US the difference is about &lt;code&gt;3600&lt;/code&gt; seconds not 1 second.</source>
          <target state="translated">時間は、米国などの他の場所でも混乱する可能性があります。 米国には夏時間があります。 夏時間が始まると、時刻は1時間進みます。 しかし、しばらくすると夏時間が終了し、標準時間帯に1時間戻ります。 したがって、米国の時間を比較すると、違いは1秒ではなく約 &lt;code&gt;3600&lt;/code&gt; 秒になることがあります。</target>
        </trans-unit>
        <trans-unit id="9ddd52667a83232bb1f4cef9b34b280a0bf54281" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;durationAtEarlierOffset&lt;/code&gt; will be one second, while &lt;code&gt;durationAtLaterOffset&lt;/code&gt; will be five minutes and 53 seconds.</source>
          <target state="translated">その後、 &lt;code&gt;durationAtEarlierOffset&lt;/code&gt; は1秒、 &lt;code&gt;durationAtLaterOffset&lt;/code&gt; は5分53秒になります。</target>
        </trans-unit>
        <trans-unit id="19db37336bb97e1cf9c14ba0a1883e72e3897316" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;ld4-ld3&lt;/code&gt; will be &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">その場合、 &lt;code&gt;ld4-ld3&lt;/code&gt; は &lt;code&gt;1&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="4967ebc9aa4719471c06c3f53ba2a7bbe93eac0d" translate="yes" xml:space="preserve">
          <source>This is not particularly strange and has happened pretty much everywhere at one time or another as timezones were switched or changed due to political or administrative actions.</source>
          <target state="translated">これは特に不思議なことではなく、政治的または行政的な行動のためにタイムゾーンが入れ替わったり、変更されたりしたために、ある時期または別の時期に、かなりどこでも起こっています。</target>
        </trans-unit>
        <trans-unit id="824c06d0b3b4e8849b79ccd53ac695c0c6307a4c" translate="yes" xml:space="preserve">
          <source>This slight shift of offsets, instead of the usual one-hour daylight savings (summer time) we are used to, obscures the problem a bit.</source>
          <target state="translated">私たちが慣れ親しんでいる通常の1時間のサマータイム(夏時間)ではなく、このわずかなオフセットのシフトが問題を少し曖昧にしています。</target>
        </trans-unit>
        <trans-unit id="789fc42e0f431b1a07dca884b6ca5760ba615519" translate="yes" xml:space="preserve">
          <source>This way you will be able to walk through any periods where hours or minutes happen twice.</source>
          <target state="translated">このようにして、何時間、何分が二度起こるかわからない期間を歩くことができるようになります。</target>
        </trans-unit>
        <trans-unit id="b60de2541acc5faacd938ec0f0eba22688a97b01" translate="yes" xml:space="preserve">
          <source>To the &lt;a href=&quot;https://www.jcp.org/&quot;&gt;Java Community Process&lt;/a&gt; members I recommend:</source>
          <target state="translated">&lt;a href=&quot;https://www.jcp.org/&quot;&gt;Java Community Processの&lt;/a&gt;メンバーには、次のことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6bd7890badd212524f07fa62eb450fca97ffbef9" translate="yes" xml:space="preserve">
          <source>Use dates and times in UTC wherever possible.</source>
          <target state="translated">日付と時間は可能な限りUTCで使用してください。</target>
        </trans-unit>
        <trans-unit id="c2ce6e9f01ab31c91c6ec268e87f5a3e7c9631a0" translate="yes" xml:space="preserve">
          <source>When incrementing time you should convert back to UTC and then add or subtract. Use the local time only for display.</source>
          <target state="translated">時間をインクリメントする場合は、UTCに変換してから加算または減算する必要があります。表示にはローカルタイムのみを使用します。</target>
        </trans-unit>
        <trans-unit id="e41c0f15f4012cc34cd7401c111b10939a9f0632" translate="yes" xml:space="preserve">
          <source>When it was &lt;code&gt;23:54:07&lt;/code&gt; in Shanghai, the local standard time, but after 5 minutes and 52 seconds, it turned to the next day at &lt;code&gt;00:00:00&lt;/code&gt;, and then local standard time changed back to &lt;code&gt;23:54:08&lt;/code&gt;. So, that's why the difference between the two times is 343 seconds not 1 second, as you would have expected.</source>
          <target state="translated">上海 &lt;code&gt;23:54:07&lt;/code&gt; たが、5分52秒後に翌日 &lt;code&gt;00:00:00&lt;/code&gt; になり、現地標準時は &lt;code&gt;23:54:08&lt;/code&gt; に戻りました。 。 そのため、2つの時間の差は、予想どおり1秒ではなく343秒になります。</target>
        </trans-unit>
        <trans-unit id="0c92b6b65def6ef6d62c2b2bf1cdc1784a43eefe" translate="yes" xml:space="preserve">
          <source>When local standard time was about to reach Sunday, 1. January 1928,
  00:00:00 clocks were turned backward 0:05:52 hours to Saturday, 31.
  December 1927, 23:54:08 local standard time instead</source>
          <target state="translated">現地標準時が1928年1月1日(日)になろうとしていた時、0時00分00秒の時計が0時05分52秒に逆戻りして31日(土)になりました。1927年12月、23:54:08現地標準時の代わりに</target>
        </trans-unit>
        <trans-unit id="73d4aa31d8c6b5023622dc30633d91c8e5f478f9" translate="yes" xml:space="preserve">
          <source>Why is &lt;code&gt;ld4-ld3&lt;/code&gt; not &lt;code&gt;1&lt;/code&gt; (as I would expect from the one-second difference in the times), but &lt;code&gt;353&lt;/code&gt;?</source>
          <target state="translated">なぜ &lt;code&gt;ld4-ld3&lt;/code&gt; は &lt;code&gt;1&lt;/code&gt; ではなく（時間の1秒の差から予想されるように）、 &lt;code&gt;353&lt;/code&gt; ですか？</target>
        </trans-unit>
        <trans-unit id="d2a71713da9e82099ccbad90518de1ca9e1bb60c" translate="yes" xml:space="preserve">
          <source>Why is subtracting these two times (in 1927) giving a strange result</source>
          <target state="translated">なぜこの2回(1927年)を引くと変な結果になるのか?</target>
        </trans-unit>
        <trans-unit id="9fc9644ca504b8a7d6cc99d99594925a6e30ae17" translate="yes" xml:space="preserve">
          <source>You can check whether the transition is an overlap where there's more than one valid offset for that date/time or a gap where that date/time is not valid for that zone id - by using the &lt;code&gt;isOverlap()&lt;/code&gt; and &lt;code&gt;isGap()&lt;/code&gt; methods on &lt;code&gt;zot4&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;isGap()&lt;/code&gt; メソッドとisGap（）メソッドを使用することにより、その日付/時刻に有効なオフセットが複数あるオーバーラップ、またはそのゾーンIDにその日付/時刻が無効であるギャップが遷移であるかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="46cca3c2b359b243aaf93432f10772e5e013b14e" translate="yes" xml:space="preserve">
          <source>You can see the same problem comparing &lt;code&gt;1927-12-31 23:59:59&lt;/code&gt; with &lt;code&gt;1928-01-01 00:00:00&lt;/code&gt;, though, in this case, it is the earlier offset that produces the longer divergence, and it is the earlier date that has two possible offsets.</source>
          <target state="translated">&lt;code&gt;1927-12-31 23:59:59&lt;/code&gt; と &lt;code&gt;1928-01-01 00:00:00&lt;/code&gt; を比較すると同じ問題が見られますが、この場合、より長い発散を生成するのはより早いオフセットであり、それは2つの可能なオフセットがある以前の日付。</target>
        </trans-unit>
        <trans-unit id="d0fc95a43660c9f95b3383aec1ea859ebd40f9a6" translate="yes" xml:space="preserve">
          <source>You've encountered a &lt;a href=&quot;http://timeanddate.com/worldclock/clockchange.html?n=237&amp;amp;year=1927&quot;&gt;local time discontinuity&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://timeanddate.com/worldclock/clockchange.html?n=237&amp;amp;year=1927&quot;&gt;現地時間の不連続&lt;/a&gt;が発生しました：</target>
        </trans-unit>
        <trans-unit id="851c4419c76cc7437e9fc5b06b0d5a51f136d8c6" translate="yes" xml:space="preserve">
          <source>export LC_ALL=C TZ=UTC</source>
          <target state="translated">エクスポート LC_ALL=C TZ=UTC</target>
        </trans-unit>
        <trans-unit id="894fa40b06e8625588b6dbe8fd0fdc94e07482b6" translate="yes" xml:space="preserve">
          <source>make localized methods not the default, but require the user to explicitly request localization.</source>
          <target state="translated">ローカライズされたメソッドをデフォルトではなく、ユーザーが明示的にローカリゼーションを要求するようにします。</target>
        </trans-unit>
        <trans-unit id="e39b6549994f5fbdde97320628c30d6d2b245a1a" translate="yes" xml:space="preserve">
          <source>never use localized implementations unless absolutely necessary (ie for display only)</source>
          <target state="translated">どうしても必要な場合を除き、ローカライズされた実装を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="6fd0469b691655f5c5d7e7cf3174ba1a2fc60148" translate="yes" xml:space="preserve">
          <source>set your system clock to UTC</source>
          <target state="translated">システムクロックをUTCに設定します。</target>
        </trans-unit>
        <trans-unit id="cf7886d28aed4eb23b330f782c10d18ca9ee1834" translate="yes" xml:space="preserve">
          <source>use UTF-8/UTC as the &lt;em&gt;FIXED&lt;/em&gt; default instead because that's simply the default today. There is no reason to do something else, except if you want to produce threads like this.</source>
          <target state="translated">代わりに、UTF-8 / UTCを&lt;em&gt;FIXEDの&lt;/em&gt;デフォルトとして使用してください。 このようなスレッドを作成する場合を除いて、他に何かをする理由はありません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
