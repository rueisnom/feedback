<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/684672">
    <body>
      <group id="684672">
        <trans-unit id="4e6c60b40db8e2958de1c62a00efabde299246e3" translate="yes" xml:space="preserve">
          <source>'big' object - with 1000 fields - you can perform test on your machine &lt;a href=&quot;https://jsbench.me/0pk7emfoy9/1&quot;&gt;HERE&lt;/a&gt;</source>
          <target state="translated">「大きな」オブジェクト-1000フィールド- &lt;a href=&quot;https://jsbench.me/0pk7emfoy9/1&quot;&gt;ここで&lt;/a&gt;マシン上でテストを実行できます</target>
        </trans-unit>
        <trans-unit id="ec950c295fbae882d685ccc9545dfed2b76e75ae" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://codepen.io/Hashbrown/pen/mEWadp&quot;&gt;DEMO&lt;/a&gt; working in Chrome and FF (I assume ES6 only)</source>
          <target state="translated">ChromeとFFで動作する&lt;a href=&quot;http://codepen.io/Hashbrown/pen/mEWadp&quot;&gt;デモ&lt;/a&gt; （ES6のみを想定）</target>
        </trans-unit>
        <trans-unit id="474279ebe960067670817c8a1990ae8709a29b95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_.forIn()&lt;/code&gt; iterates over &lt;em&gt;own and inherited&lt;/em&gt; enumerable properties of an object, while &lt;code&gt;_.forOwn()&lt;/code&gt; iterates only over &lt;em&gt;own&lt;/em&gt; properties of an object (basically checking against &lt;code&gt;hasOwnProperty&lt;/code&gt; function). For simple objects and object literals any of these methods will work fine.</source>
          <target state="translated">&lt;code&gt;_.forIn()&lt;/code&gt; は、オブジェクトの&lt;em&gt;独自の継承&lt;/em&gt;可能な列挙可能なプロパティを反復処理しますが、 &lt;code&gt;_.forOwn()&lt;/code&gt; は、オブジェクトの&lt;em&gt;独自の&lt;/em&gt;プロパティのみを反復処理します（基本的には &lt;code&gt;hasOwnProperty&lt;/code&gt; 関数をチェックします）。 単純なオブジェクトとオブジェクトリテラルの場合、これらのメソッドはすべて正常に機能します。</target>
        </trans-unit>
        <trans-unit id="bd81e35af1823c9558691aedf06bde04281fb40c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.entries&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;Object.entries&lt;/code&gt;:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3dd5a193e7d69f45ee20d2f2016b15efdde5358d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.entries&lt;/code&gt;&lt;/strong&gt; [&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;MDN&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.entries&quot;&gt;spec&lt;/a&gt;] &amp;mdash; A function providing an array of the names &lt;em&gt;and&lt;/em&gt; values of an object's &lt;em&gt;own&lt;/em&gt;, &lt;em&gt;enumerable&lt;/em&gt; properties (each entry in the array is a &lt;code&gt;[name, value]&lt;/code&gt; array).</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Object.entries&lt;/code&gt; &lt;/strong&gt; [ &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;MDN&lt;/a&gt; 、 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.entries&quot;&gt;spec&lt;/a&gt; ] &amp;mdash;オブジェクト&lt;em&gt;自身の&lt;/em&gt; &lt;em&gt;列挙可能な&lt;/em&gt;プロパティの名前&lt;em&gt;と&lt;/em&gt;値の配列を提供する関数（配列の各エントリは &lt;code&gt;[name, value]&lt;/code&gt; 配列です）。</target>
        </trans-unit>
        <trans-unit id="ede21db207d84db7454d34051468010e74e5fcfb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b8a00e2a008aac31c6e4fc4fec09c0d8812aacc4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;&lt;/strong&gt; [&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames&quot;&gt;MDN&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.getownpropertynames&quot;&gt;spec&lt;/a&gt;] &amp;mdash; A function providing an array of the names of an object's &lt;em&gt;own&lt;/em&gt; properties (even non-enumerable ones) whose names are strings.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt; &lt;/strong&gt; [ &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames&quot;&gt;MDN&lt;/a&gt; 、 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.getownpropertynames&quot;&gt;spec&lt;/a&gt; ] &amp;mdash;名前が文字列であるオブジェクト&lt;em&gt;自体の&lt;/em&gt;プロパティ（列挙できないものも含む）の名前の配列を提供する関数。</target>
        </trans-unit>
        <trans-unit id="a5aec969b485f5159cd506af0dfcdf05706956c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a2b3837c88dfdd939e85634eaed657aebee7690f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;&lt;/strong&gt; [&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols&quot;&gt;MDN&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols&quot;&gt;spec&lt;/a&gt;] &amp;mdash; A function providing an array of the names of an object's &lt;em&gt;own&lt;/em&gt; properties (even non-enumerable ones) whose names are Symbols.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt; &lt;/strong&gt; [ &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols&quot;&gt;MDN&lt;/a&gt; 、 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols&quot;&gt;spec&lt;/a&gt; ] &amp;mdash;名前がSymbolsであるオブジェクト&lt;em&gt;自体の&lt;/em&gt;プロパティ（列挙できないものも含む）の名前の配列を提供する関数。</target>
        </trans-unit>
        <trans-unit id="1ebda5b16342bb06084a9bd4fd7be9e7eab81a71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/strong&gt; [&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;MDN&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.keys&quot;&gt;spec&lt;/a&gt;] &amp;mdash; A function providing an array of the names of an object's &lt;em&gt;own&lt;/em&gt;, &lt;em&gt;enumerable&lt;/em&gt; properties whose names are strings.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/strong&gt; [ &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;MDN&lt;/a&gt; 、 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.keys&quot;&gt;spec&lt;/a&gt; ] &amp;mdash;名前が文字列である、オブジェクト&lt;em&gt;自体の&lt;/em&gt; &lt;em&gt;列挙可能な&lt;/em&gt;プロパティの名前の配列を提供する関数。</target>
        </trans-unit>
        <trans-unit id="8b65922b96013e6bbea564cf2c7cb74b7bfe4dee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/strong&gt;&lt;em&gt;(with a &lt;code&gt;for-of&lt;/code&gt; loop, but you can use any looping construct)&lt;/em&gt;:</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/strong&gt; &lt;em&gt;（ &lt;code&gt;for-of&lt;/code&gt; ループを使用しますが、任意のループ構成を使用できます）&lt;/em&gt; ：</target>
        </trans-unit>
        <trans-unit id="1754300f39456aee06698922c50acb14a9fe09f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.values&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;Object.values&lt;/code&gt;:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0dac8d73c86bc0d696fe7cea9ad377898c9d43b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.values&lt;/code&gt;&lt;/strong&gt; [&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/values&quot;&gt;MDN&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.values&quot;&gt;spec&lt;/a&gt;] &amp;mdash; A function providing an array of the &lt;em&gt;values&lt;/em&gt; of an object's &lt;em&gt;own&lt;/em&gt;, &lt;em&gt;enumerable&lt;/em&gt; properties.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Object.values&lt;/code&gt; &lt;/strong&gt; [ &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/values&quot;&gt;MDN&lt;/a&gt; 、 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.values&quot;&gt;spec&lt;/a&gt; ] &amp;mdash;オブジェクト&lt;em&gt;自身の&lt;/em&gt; &lt;em&gt;列挙可能な&lt;/em&gt;プロパティの&lt;em&gt;値&lt;/em&gt;の配列を提供する関数。</target>
        </trans-unit>
        <trans-unit id="2da5969acc187f93fbeb365e2dccef6be6d0d7d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Reflect.ownKeys&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;Reflect.ownKeys&lt;/code&gt;:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3aab8dcea4dd592726faf4dc27e65e115ed78154" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Reflect.ownKeys&lt;/code&gt;&lt;/strong&gt; [&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys&quot;&gt;MDN&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-reflect.ownkeys&quot;&gt;spec&lt;/a&gt;] &amp;mdash; A function providing an array of the names of an object's &lt;em&gt;own&lt;/em&gt; properties (even non-enumerable ones), whether those names are strings or Symbols.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Reflect.ownKeys&lt;/code&gt; &lt;/strong&gt; [ &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys&quot;&gt;MDN&lt;/a&gt; 、 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-reflect.ownkeys&quot;&gt;spec&lt;/a&gt; ] &amp;mdash;それらの名前が文字列かシンボルかに関係なく、オブジェクト&lt;em&gt;自体の&lt;/em&gt;プロパティ（列挙できないものも含む）の名前の配列を提供する関数。</target>
        </trans-unit>
        <trans-unit id="0c83f91ec1f572afad87fb64a22dd5d2e7f873bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;for-in&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;for-in&lt;/code&gt;:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="be58acf7a12d4f8e428cd7ccb5c5c0d1a0e99dc8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;for-in&lt;/code&gt;&lt;/strong&gt; [&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt;MDN&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements&quot;&gt;spec&lt;/a&gt;] &amp;mdash; A loop structure that loops through the names of an object's &lt;em&gt;enumerable&lt;/em&gt; properties, including inherited ones, whose names are strings</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;for-in&lt;/code&gt; &lt;/strong&gt; [ &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt;MDN&lt;/a&gt; 、 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements&quot;&gt;spec&lt;/a&gt; ] &amp;mdash;継承されたプロパティを含む、オブジェクトの&lt;em&gt;列挙可能な&lt;/em&gt;プロパティの名前をループするループ構造。名前は文字列です。</target>
        </trans-unit>
        <trans-unit id="0ce88fb2e4b9a870187aeb2f4765051ba2131b1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;All properties&lt;/strong&gt;, including inherited non-enumerable ones:</source>
          <target state="translated">継承できない列挙不可能なものを含む&lt;strong&gt;すべてのプロパティ&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="4e021e8096db3c4f40241955870ff1f94ba900d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;EDIT:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ea9f83ce98fb74a01138d2466873fea80b2ac7c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For those who don't like to shim, or mess with &lt;code&gt;prototype&lt;/code&gt; in general, feel free to make the function on window instead, calling it something like &lt;code&gt;getObjIterator()&lt;/code&gt; then;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;シムを作成したくない、または一般的に &lt;code&gt;prototype&lt;/code&gt; を台無しにしたくない場合は、代わりにウィンドウで関数を作成し、 &lt;code&gt;getObjIterator()&lt;/code&gt; のようなものを呼び出してください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f29d8e49346eb8d4ca5b185798c9e93caa0374fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For-of with Object.keys() alternative:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Object.keys（）代替のfor-of：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e6ba5897c67b5008b29e0f8adffc49356bf25e6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here is the snippet:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;これがスニペットです：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3ec9e97aa9f9cb8b81f3d24df257f8e956e99de7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Lo-Dash&lt;/strong&gt; provides several methods for iterating over object properties. Basic &lt;a href=&quot;http://lodash.com/docs#forEach&quot;&gt;&lt;code&gt;_.forEach()&lt;/code&gt;&lt;/a&gt; (or it's alias &lt;code&gt;_.each()&lt;/code&gt;) is useful for looping through both objects and arrays, however (!) objects with &lt;code&gt;length&lt;/code&gt; property are treated like arrays, and to avoid this behavior it is suggested to use &lt;a href=&quot;http://lodash.com/docs#forIn&quot;&gt;&lt;code&gt;_.forIn()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://lodash.com/docs#forOwn&quot;&gt;&lt;code&gt;_.forOwn()&lt;/code&gt;&lt;/a&gt; methods (these also have &lt;code&gt;value&lt;/code&gt; argument coming first):</source>
          <target state="translated">&lt;strong&gt;Lo-Dash&lt;/strong&gt;は、オブジェクトプロパティを反復するためのいくつかのメソッドを提供します。 基本的な&lt;a href=&quot;http://lodash.com/docs#forEach&quot;&gt; &lt;code&gt;_.forEach()&lt;/code&gt; &lt;/a&gt; （またはそのエイリアス &lt;code&gt;_.each()&lt;/code&gt; ）は、オブジェクトと配列の両方をループするのに役立ちますが、（！） &lt;code&gt;length&lt;/code&gt; プロパティを持つオブジェクトは配列のように扱われ、この動作を回避するために&lt;a href=&quot;http://lodash.com/docs#forIn&quot;&gt; &lt;code&gt;_.forIn()&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします.forIn（）および&lt;a href=&quot;http://lodash.com/docs#forOwn&quot;&gt; &lt;code&gt;_.forOwn()&lt;/code&gt; &lt;/a&gt;メソッド（これらも最初に &lt;code&gt;value&lt;/code&gt; 引数があります ）：</target>
        </trans-unit>
        <trans-unit id="8a88d5e452dddbbc5bff670d7b08e484086a6743" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This method is not supported natively by Internet Explorer. You may consider using a Polyfill for older browsers.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このメソッドは、Internet Explorerではネイティブにサポートされていません。 古いブラウザでは、ポリフィルの使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="7bcc2d79f81abc6bc319aa1e147e3a26bed87a03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UPD:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;UPD:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ca69a725c1fda2284d76c860ae7bf0171359dc78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using a &lt;code&gt;for-of&lt;/code&gt; on &lt;code&gt;Object.keys()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Object.keys()&lt;/code&gt; &lt;code&gt;for-of&lt;/code&gt; を使用する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="855d4dd01619da313af702cfb9f2ce2cf8e942d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using the new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;&lt;code&gt;Object.entries()&lt;/code&gt;&lt;/a&gt; method:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;新しい&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt; &lt;code&gt;Object.entries()&lt;/code&gt; &lt;/a&gt;メソッドの使用：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="53790a84e8ab38f180b61a8110c686082d451b3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You can make ordinary object associations iterate! Behaving just like &lt;code&gt;Map&lt;/code&gt;s with direct use of the fancy &lt;code&gt;for...of&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;通常のオブジェクトの関連付けを繰り返すことができます！&lt;/strong&gt; &lt;strong&gt;のファンシーを直接使用する &lt;code&gt;Map&lt;/code&gt; のよう &lt;code&gt;for...of&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c7c568e20d9991ec9c2b339eef28dc0358005207" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;You can't just &lt;code&gt;for...of&lt;/code&gt; an &lt;code&gt;Object&lt;/code&gt; because it's not an iterator, and &lt;code&gt;for...index&lt;/code&gt; or &lt;code&gt;.forEach()&lt;/code&gt;ing the &lt;code&gt;Object.keys()&lt;/code&gt; is ugly/inefficient.&lt;br/&gt;
I'm glad most people are refraining from &lt;code&gt;for...in&lt;/code&gt; (with or without checking &lt;code&gt;.hasOwnProperty()&lt;/code&gt;) as that's also a bit messy, so other than my answer above, I'm here to say...&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;イテレータではないため、 &lt;code&gt;Object&lt;/code&gt; &lt;code&gt;for...of&lt;/code&gt; だけではできません &lt;code&gt;.forEach()&lt;/code&gt; &lt;code&gt;for...index&lt;/code&gt; または &lt;code&gt;Object.keys()&lt;/code&gt; は、醜い/非効率的です。&lt;/sub&gt; &lt;sub&gt;&lt;br/&gt;&lt;/sub&gt; &lt;sub&gt;ほとんどの人が &lt;code&gt;for...in&lt;/code&gt; （ &lt;code&gt;.hasOwnProperty()&lt;/code&gt; のチェックの有無にかかわらず）を控えているのはうれしいです。&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="2743df4fd6790c4b11ebcfecaa61faf6176c851f" translate="yes" xml:space="preserve">
          <source>After looking through all the answers in here, hasOwnProperty isn't required for my own usage because my json object is clean; there's really no sense in adding any additional javascript processing. This is all I'm using:</source>
          <target state="translated">ここでのすべての回答を調べた結果、私のjsonオブジェクトはクリーンなので、hasOwnPropertyは私自身の使用には必要ありません。私が使っているのはこれだけです。</target>
        </trans-unit>
        <trans-unit id="d23b6095239360e58d17c190e8570054390525cc" translate="yes" xml:space="preserve">
          <source>All information about how can you do an iterator and generator you can find at developer Mozilla page.</source>
          <target state="translated">イテレータやジェネレータの作成方法については、開発者のMozillaのページを参照してください。</target>
        </trans-unit>
        <trans-unit id="be3d1dffaaec51c8d5bac1fc878f97bc2de6ce72" translate="yes" xml:space="preserve">
          <source>Also, I know this is out of scope with this question but in 2011, ECMAScript 5.1 added the &lt;code&gt;forEach&lt;/code&gt; method for Arrays only which basically created a new improved way to loop through arrays while still leaving non iterable objects with the old verbose and confusing &lt;code&gt;for&lt;/code&gt; loop. But the odd part is that this new &lt;code&gt;forEach&lt;/code&gt; method does not support &lt;code&gt;break&lt;/code&gt; which led to all sorts of other problems.</source>
          <target state="translated">また、私はこれがこの質問の範囲外であることを知っていますが、2011年にECMAScript 5.1は配列のみの &lt;code&gt;forEach&lt;/code&gt; メソッドを追加しました。 。 しかし、奇妙な点は、この新しい &lt;code&gt;forEach&lt;/code&gt; メソッドは、他のあらゆる種類の問題につながる &lt;code&gt;break&lt;/code&gt; をサポートしないことです。</target>
        </trans-unit>
        <trans-unit id="ddb599b84c5c70cad249ca23093fa251a6088148" translate="yes" xml:space="preserve">
          <source>Also, objects that comply with the iterable protocol can be used with the new ES2015 feature &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot;&gt;spread&lt;/a&gt; operator thus we can read object property values as an array.</source>
          <target state="translated">また、反復可能プロトコルに準拠するオブジェクトは、新しいES2015機能&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot;&gt;スプレッド&lt;/a&gt;演算子で使用できるため、オブジェクトのプロパティ値を配列として読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="7169cd388b4e0ea06d66deafeab91e44ccebee64" translate="yes" xml:space="preserve">
          <source>And here are result for small objects on chrome</source>
          <target state="translated">そして、クローム上の小さなオブジェクトの結果は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="26c29271527c52627e2a30548efdf0bbd9a1c238" translate="yes" xml:space="preserve">
          <source>As of 2015, we now have a better out of the box way to loop (and break) any object type (including Arrays and Strings). Here is what a loop in JavaScript will eventually look like when the recommendation becomes mainstream:</source>
          <target state="translated">2015年現在では、あらゆるオブジェクト型(配列や文字列を含む)をループさせる(壊してしまう)ための、より優れたアウトオブザボックスな方法が提供されています。ここでは、推奨が主流になったときに、JavaScriptのループが最終的にどのようなものになるかを紹介します。</target>
        </trans-unit>
        <trans-unit id="b275d7374d2be31ecff1b4494870b6e516f02b51" translate="yes" xml:space="preserve">
          <source>At a glance here is what a JavaScript object loop look like before ECMA6:</source>
          <target state="translated">一目でわかるように、ECMA6以前のJavaScriptのオブジェクトループは以下のようになっています。</target>
        </trans-unit>
        <trans-unit id="49f65eee4a59f7212ca7868c00254253e471bfb3" translate="yes" xml:space="preserve">
          <source>Basically in 2011, there is not a real solid way to loop in JavaScript other than what many popular libraries (jQuery, Underscore, etc.) decided to re-implement.</source>
          <target state="translated">基本的に2011年には、多くの一般的なライブラリ(jQueryやUnderscoreなど)が再実装することを決めた以外に、JavaScriptでループするための本当の堅実な方法はありませんでした。</target>
        </trans-unit>
        <trans-unit id="45a5f442b26367c7cb0baf8101619b75564033ea" translate="yes" xml:space="preserve">
          <source>Below snippets presents used solutions</source>
          <target state="translated">以下のスニペットは、使用されているソリューションを紹介します。</target>
        </trans-unit>
        <trans-unit id="3487c01cde5edf6b7390c08c1e99c3f7375241e6" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;Object.keys()&lt;/code&gt; and &lt;code&gt;Object.entries()&lt;/code&gt; iterate properties in the same order as a &lt;code&gt;for...in&lt;/code&gt; loop &lt;em&gt;but ignore the prototype chain&lt;/em&gt;. Only the object's own enumerable properties are iterated.</source>
          <target state="translated">&lt;code&gt;Object.keys()&lt;/code&gt; と &lt;code&gt;Object.entries()&lt;/code&gt; はどちらも、 &lt;code&gt;for...in&lt;/code&gt; ループと同じ順序でプロパティを反復します&lt;em&gt;が、プロトタイプチェーンは無視&lt;/em&gt; します。 オブジェクト自体の列挙可能なプロパティのみが反復されます。</target>
        </trans-unit>
        <trans-unit id="1e0346498acc0470e9e83ec6c7e459d6ab78c307" translate="yes" xml:space="preserve">
          <source>Browser support you can see on &lt;a href=&quot;http://kangax.github.io/es5-compat-table/#Object.keys&quot;&gt;Kangax's compat table&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://kangax.github.io/es5-compat-table/#Object.keys&quot;&gt;Kangaxの互換表で&lt;/a&gt;確認できるブラウザーサポート</target>
        </trans-unit>
        <trans-unit id="e7847daba29883c636ac7ac0fde37fec94bf0d76" translate="yes" xml:space="preserve">
          <source>But be very careful when using this kind of loop, because this will &lt;strong&gt;loop all the properties along the prototype chain&lt;/strong&gt;.</source>
          <target state="translated">ただし、この種類のループを使用する場合&lt;strong&gt;は、プロトタイプチェーンに沿ってすべてのプロパティ&lt;/strong&gt;が&lt;strong&gt;ループされる&lt;/strong&gt;ため、注意が必要&lt;strong&gt;です&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="5d7cebc73a40081c8c8727aebf942e336258e8cb" translate="yes" xml:space="preserve">
          <source>But its important to know the capabilities you now have using es6!</source>
          <target state="translated">しかし、重要なのは、あなたが今、es6を使用している能力を知っていることです!</target>
        </trans-unit>
        <trans-unit id="b536777ff175ae7f0dadd5ccfd9e78c00761a19e" translate="yes" xml:space="preserve">
          <source>Conclusions</source>
          <target state="translated">Conclusions</target>
        </trans-unit>
        <trans-unit id="432d4416f444775f0c61858bbd9701cb9bcf6474" translate="yes" xml:space="preserve">
          <source>Considering ES6 I'd like to add my own spoon of sugar and provide one more approach to iterate over object's properties.</source>
          <target state="translated">ES6を考慮して、私は私自身の砂糖のスプーンを追加して、オブジェクトのプロパティを反復処理するためのもう一つのアプローチを提供したいと思います。</target>
        </trans-unit>
        <trans-unit id="dc3decbb93847518f1a049dcf49d0d7c6560bcc6" translate="yes" xml:space="preserve">
          <source>Details</source>
          <target state="translated">Details</target>
        </trans-unit>
        <trans-unit id="bb0b024be65447537f1109f57128500da607b30c" translate="yes" xml:space="preserve">
          <source>ECMAScript 6 adds &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">ECMAScript 6は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;追加します ：</target>
        </trans-unit>
        <trans-unit id="aab6bac5701c96a921f7ef249212a3c6589127c4" translate="yes" xml:space="preserve">
          <source>ECMAScript 8 adds &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;&lt;code&gt;Object.entries()&lt;/code&gt;&lt;/a&gt; which avoids having to look up each value in the original object:</source>
          <target state="translated">ECMAScript 8は、元のオブジェクトの各値を検索する必要を回避する&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt; &lt;code&gt;Object.entries()&lt;/code&gt; &lt;/a&gt;を追加します。</target>
        </trans-unit>
        <trans-unit id="f8e737a86e92eea815b3daf94f21793951fb689b" translate="yes" xml:space="preserve">
          <source>ES2017 will include &lt;code&gt;Object.entries&lt;/code&gt; which will make iterating over &lt;code&gt;[key, value]&lt;/code&gt; pairs in objects even more easier. It is now known that it will be a part of a standard according to the &lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;ts39&lt;/a&gt; stage information.</source>
          <target state="translated">ES2017には &lt;code&gt;Object.entries&lt;/code&gt; が含まれ、オブジェクトの &lt;code&gt;[key, value]&lt;/code&gt; ペアの反復がさらに簡単になります。 &lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;ts39&lt;/a&gt;ステージ情報によると、これは標準の一部になることがわかっています。</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">スニペットを展開</target>
        </trans-unit>
        <trans-unit id="cf8fd5dacacd6e6d99426d454618e6efc71eb3cf" translate="yes" xml:space="preserve">
          <source>Extend Implementations</source>
          <target state="translated">実装を拡張する</target>
        </trans-unit>
        <trans-unit id="9ad3df9ebcbaddf889827bce6d56caa2706bfaf9" translate="yes" xml:space="preserve">
          <source>For old browser you have &lt;a href=&quot;http://tokenposts.blogspot.com.au/2012/04/javascript-objectkeys-browser.html&quot;&gt;simple&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;full&lt;/a&gt; polyfill</source>
          <target state="translated">古いブラウザの場合、 &lt;a href=&quot;http://tokenposts.blogspot.com.au/2012/04/javascript-objectkeys-browser.html&quot;&gt;シンプル&lt;/a&gt;で&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;完全な&lt;/a&gt;ポリフィルがあります</target>
        </trans-unit>
        <trans-unit id="0bf13115eababbf2f614dc6364e0f23888e54c77" translate="yes" xml:space="preserve">
          <source>For those people who don't like the &quot;&lt;em&gt;for ... in&lt;/em&gt;&quot;-method:</source>
          <target state="translated">「-...」メソッドの「 &lt;em&gt;for ...&lt;/em&gt; 」が気に入らない人の&lt;em&gt;ために&lt;/em&gt; ：</target>
        </trans-unit>
        <trans-unit id="2268f901152e3f2d05e1c2ec2e3c22c82039761d" translate="yes" xml:space="preserve">
          <source>Generally all described methods have the same behaviour with any supplied objects. Besides using native &lt;code&gt;for..in&lt;/code&gt; loop will usually be &lt;em&gt;faster&lt;/em&gt; than any abstraction, such as &lt;code&gt;jQuery.each()&lt;/code&gt;, these methods are considerably easier to use, require less coding and provide better error handling.</source>
          <target state="translated">一般的に、記述されたすべてのメソッドは、提供されたオブジェクトと同じ動作をします。 通常、ネイティブの &lt;code&gt;for..in&lt;/code&gt; ループを使用すると、 &lt;code&gt;jQuery.each()&lt;/code&gt; などの抽象化&lt;em&gt;より&lt;/em&gt;も&lt;em&gt;高速になり&lt;/em&gt;ますが、これらのメソッドはかなり使いやすく、コーディングが少なくて済み、エラー処理が向上します。</target>
        </trans-unit>
        <trans-unit id="3192335d6b047d6820b956a2f7d3d5ce3e4fb3bb" translate="yes" xml:space="preserve">
          <source>Here in 2018, your options for looping through an object's properties are (some examples follow the list):</source>
          <target state="translated">ここ2018年では、オブジェクトのプロパティをループするためのあなたのオプションは(リストに続くいくつかの例)です。</target>
        </trans-unit>
        <trans-unit id="3600b23783a6ba3cad6df777ebfcbdec4cb1fb02" translate="yes" xml:space="preserve">
          <source>Here is another method to iterate through an object.</source>
          <target state="translated">ここでは、オブジェクトを反復処理する別のメソッドを紹介します。</target>
        </trans-unit>
        <trans-unit id="d44521d61b9dbb64a50448918809bc483ebcd927" translate="yes" xml:space="preserve">
          <source>Hope It helped someone.</source>
          <target state="translated">誰かの助けになるといいな</target>
        </trans-unit>
        <trans-unit id="a70a77f4df60b00dbf4761fecee7e8eaf9d4703e" translate="yes" xml:space="preserve">
          <source>How do I loop through or enumerate a JavaScript object</source>
          <target state="translated">JavaScript オブジェクトをループスルーしたり列挙したりする方法</target>
        </trans-unit>
        <trans-unit id="4962635faad77468226beef9f94be30feb4bc4f4" translate="yes" xml:space="preserve">
          <source>I can modify the JavaScript object if necessary. My ultimate goal is to loop through some key value pairs and if possible I want to avoid using &lt;code&gt;eval&lt;/code&gt;.</source>
          <target state="translated">必要に応じてJavaScriptオブジェクトを変更できます。 私の最終的な目標は、いくつかのキーと値のペアをループすることであり、可能であれば &lt;code&gt;eval&lt;/code&gt; の使用を避けたいです。</target>
        </trans-unit>
        <trans-unit id="518b880018aedfc7045e2d34af28d36b3ffcb649" translate="yes" xml:space="preserve">
          <source>I have a JavaScript object like the following:</source>
          <target state="translated">以下のようなJavaScriptオブジェクトを持っています。</target>
        </trans-unit>
        <trans-unit id="7aae5d3e79c225ee3d26350be843bb10799d7f06" translate="yes" xml:space="preserve">
          <source>I think it is time to update my answer to let it became even more fresher than it's now.</source>
          <target state="translated">今よりもさらに新鮮になるように、そろそろ回答を更新してもいいのではないでしょうか。</target>
        </trans-unit>
        <trans-unit id="0a4080da4ca8055bce77c174c9c6711488472b3c" translate="yes" xml:space="preserve">
          <source>I would do this rather than checking &lt;code&gt;obj.hasOwnerProperty&lt;/code&gt; within every &lt;code&gt;for ... in&lt;/code&gt; loop.</source>
          <target state="translated">すべての &lt;code&gt;for ... in&lt;/code&gt; ループ内で &lt;code&gt;obj.hasOwnerProperty&lt;/code&gt; をチェックするのではなく、これを行います。</target>
        </trans-unit>
        <trans-unit id="3854436e5e74dbacd9d3d55f9f6c2ddc431c9223" translate="yes" xml:space="preserve">
          <source>If anybody needs to loop through &lt;strong&gt;arrayObjects with condition&lt;/strong&gt;:</source>
          <target state="translated">誰かが&lt;strong&gt;arrayObjectsを条件付きで&lt;/strong&gt;ループする必要がある場合：</target>
        </trans-unit>
        <trans-unit id="81b25a043bef98723984fe9cc8d2b96c70e6ec81" translate="yes" xml:space="preserve">
          <source>If you don't want to get conflicts with other forEach-Methods you can name it with your unique name.</source>
          <target state="translated">他の forEach-Methods と競合したくない場合は、独自の名前を付けることができます。</target>
        </trans-unit>
        <trans-unit id="4d52c429155b878272be6a80be52e5d6ad0a333c" translate="yes" xml:space="preserve">
          <source>If you want &lt;strong&gt;all&lt;/strong&gt; of an object's properties, including non-enumerable inherited ones, you need to use a loop and &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; [&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf&quot;&gt;MDN&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.getprototypeof&quot;&gt;spec&lt;/a&gt;] and use &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;, &lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;, or &lt;code&gt;Reflect.ownKeys&lt;/code&gt; on each object in the prototype chain (example at the bottom of this answer).</source>
          <target state="translated">列挙できない継承されたものを含む、オブジェクトの&lt;strong&gt;すべて&lt;/strong&gt;のプロパティが必要な場合は、ループと &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; [ &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf&quot;&gt;MDN&lt;/a&gt; 、 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.getprototypeof&quot;&gt;spec&lt;/a&gt; ]を使用し、 &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt; 、 &lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt; 、または &lt;code&gt;Reflect.ownKeys&lt;/code&gt; を使用して、プロトタイプチェーン（この回答の下部にある例）。</target>
        </trans-unit>
        <trans-unit id="e064bea268f729cfd8e9b622bb27d0d02946c767" translate="yes" xml:space="preserve">
          <source>If you want to iterate over &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#Enumerable_attribute&quot;&gt;non-enumerable properties&lt;/a&gt;&lt;/strong&gt; as well, you can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames(obj)&lt;/code&gt;&lt;/a&gt; to return an array of all properties (enumerable or not) found directly upon a given object.</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#Enumerable_attribute&quot;&gt;列挙不可能なプロパティ&lt;/a&gt;&lt;/strong&gt;も繰り返し処理したい場合は、 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames&quot;&gt; &lt;code&gt;Object.getOwnPropertyNames(obj)&lt;/code&gt; &lt;/a&gt;を使用して、特定のオブジェクトで直接見つかったすべてのプロパティ（列挙可能かどうかにかかわらず）の配列を返すことができます。</target>
        </trans-unit>
        <trans-unit id="0f6358b4744c76d0b63e5ea4860e57dd30d61fc8" translate="yes" xml:space="preserve">
          <source>If you work with &lt;strong&gt;jQuery&lt;/strong&gt;, you may use &lt;a href=&quot;http://api.jquery.com/jQuery.each/&quot;&gt;&lt;code&gt;jQuery.each()&lt;/code&gt;&lt;/a&gt; method. It can be used to seamlessly iterate over both objects and arrays:</source>
          <target state="translated">&lt;strong&gt;jQueryを&lt;/strong&gt;使用する場合は、 &lt;a href=&quot;http://api.jquery.com/jQuery.each/&quot;&gt; &lt;code&gt;jQuery.each()&lt;/code&gt; &lt;/a&gt;メソッドを使用できます。 オブジェクトと配列の両方をシームレスに反復するために使用できます。</target>
        </trans-unit>
        <trans-unit id="3f897e5ce6ceaf2b1f2ce70c631d9cebac75e9cf" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;Underscore.js&lt;/strong&gt; you can find method &lt;a href=&quot;http://underscorejs.org/#each&quot;&gt;&lt;code&gt;_.each()&lt;/code&gt;&lt;/a&gt;, which iterates over a list of elements, yielding each in turn to a supplied function (pay attention to the order of arguments in &lt;em&gt;iteratee&lt;/em&gt; function!):</source>
          <target state="translated">&lt;strong&gt;Underscore.js&lt;/strong&gt;では、メソッドの&lt;a href=&quot;http://underscorejs.org/#each&quot;&gt; &lt;code&gt;_.each()&lt;/code&gt; を&lt;/a&gt;見つけることができます。このメソッドは、要素のリストを反復処理し、それぞれを提供された関数に&lt;em&gt;渡し&lt;/em&gt;ます（ &lt;em&gt;反復&lt;/em&gt;関数の引数の順序に注意して&lt;em&gt;ください&lt;/em&gt; ！）：</target>
        </trans-unit>
        <trans-unit id="2d20cf1ada379d6e39f32c37a72028e9238c013f" translate="yes" xml:space="preserve">
          <source>In ECMAScript 5 you have new approach in iteration fields of literal - &lt;code&gt;Object.keys&lt;/code&gt;</source>
          <target state="translated">ECMAScript 5では、リテラルの反復フィールドに新しいアプローチがあります &lt;code&gt;Object.keys&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="63c7274ad3c87fa15ab98b9cce65eea76c9a19fd" translate="yes" xml:space="preserve">
          <source>In ES6 we have well-known symbols to expose some previously internal methods, you can use it to define how iterators work for this object:</source>
          <target state="translated">ES6では、以前の内部メソッドを公開するためによく知られたシンボルがあります。</target>
        </trans-unit>
        <trans-unit id="4e1fdbb2aaaf6c0ad99feef360af0adf0a7ed96a" translate="yes" xml:space="preserve">
          <source>In fact, with this shim, if you still wanted to take advantage of Map's other functionality (without shimming them all in) but still wanted to use the neat object notation, since objects are now iterable you can now just make a Map from it!</source>
          <target state="translated">実際には、このシムを使うことで、Map の他の機能を利用したいが (すべてをシムインせずに)すっきりとしたオブジェクト記法を使いたい場合、オブジェクトが反復可能になったので、それを使って Map を作成することができるようになりました。</target>
        </trans-unit>
        <trans-unit id="439b07330c042796d437d89c30acfaa93b3e4fe9" translate="yes" xml:space="preserve">
          <source>In latest ES script, you can do something like this:</source>
          <target state="translated">最新のESスクリプトでは、このようなことができます。</target>
        </trans-unit>
        <trans-unit id="b8f340ce3b448e2f38cbaf0946576afd1c5832b1" translate="yes" xml:space="preserve">
          <source>In my Firefox I have following results</source>
          <target state="translated">私のFirefoxでは、次のような結果になりました。</target>
        </trans-unit>
        <trans-unit id="f91575a8eebebd143c3dcd78381f6c6cf67dd7be" translate="yes" xml:space="preserve">
          <source>It's interesting people in these answers have touched on both &lt;code&gt;Object.keys()&lt;/code&gt; and &lt;code&gt;for...of&lt;/code&gt; but never combined them:</source>
          <target state="translated">これらの回答で興味深いのは、 &lt;code&gt;Object.keys()&lt;/code&gt; と &lt;code&gt;for...of&lt;/code&gt; 両方に触れたことがあるが、それらを組み合わせたことはない：</target>
        </trans-unit>
        <trans-unit id="6791e0260346d559f245d4a88a53a01351732e2d" translate="yes" xml:space="preserve">
          <source>Let's we have &lt;code&gt;book&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;book&lt;/code&gt; オブジェクトがあるとします。</target>
        </trans-unit>
        <trans-unit id="a707aa190f760150c8ff8256bff3171e748227a0" translate="yes" xml:space="preserve">
          <source>Like:</source>
          <target state="translated">Like:</target>
        </trans-unit>
        <trans-unit id="98e4701c0ce58626eabd986c3ab94ed192ef3071" translate="yes" xml:space="preserve">
          <source>Loops can be pretty interesting when using pure JavaScript. It seems that only ECMA6 (New 2015 JavaScript specification) got the loops under control. Unfortunately as I'm writing this, both Browsers and popular Integrated development environment (IDE) are still struggling to support completely the new bells and whistles.</source>
          <target state="translated">ループは純粋なJavaScriptを使うとかなり面白いです。ECMA6 (2015年の新JavaScript仕様)だけがループをコントロールできるようになったようです。残念ながら、これを書いている今でも、ブラウザも人気のある統合開発環境(IDE)も、新しいベルやホイッスルを完全にサポートするのに苦労しています。</target>
        </trans-unit>
        <trans-unit id="13e7186984f9711a8852f884dfd2f7ae96b20b3f" translate="yes" xml:space="preserve">
          <source>MDN DOCS Object.values()</source>
          <target state="translated">MDN DOCS Object.values()</target>
        </trans-unit>
        <trans-unit id="c33ee070c0554e63382502c3b891cc91bc88f40b" translate="yes" xml:space="preserve">
          <source>More information you can see on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;MDN&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;MDNで&lt;/a&gt;確認できる詳細情報</target>
        </trans-unit>
        <trans-unit id="8ce2cf512eb2d280fcb6e6a8408306774abf7584" translate="yes" xml:space="preserve">
          <source>My choice is below as a faster solution in current versions of browsers (Chrome30, IE10, FF25)</source>
          <target state="translated">私の選択は、現在のブラウザのバージョン(Chrome30、IE10、FF25)では、より高速なソリューションとして以下のようになります。</target>
        </trans-unit>
        <trans-unit id="9283e1080a0ba71402309d9223ad40bc03462179" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;key&lt;/code&gt; will not take on the value of the property, it's just an index value.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; はプロパティの値をとらず、単なるインデックス値であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c478e37ee66a6eba87efd093d99010af9d03a121" translate="yes" xml:space="preserve">
          <source>Note that most browsers won't support the code above as of June 18th 2016. Even in Chrome you need to enable this special flag for it to work: &lt;code&gt;chrome://flags/#enable-javascript-harmony&lt;/code&gt;</source>
          <target state="translated">2016年6月18日の時点で、ほとんどのブラウザーは上記のコードをサポートしていないことに注意してください。Chromeでも、次の特別なフラグを有効にする必要があります &lt;code&gt;chrome://flags/#enable-javascript-harmony&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="512c928855a3a4800967b483956e8c6009db237a" translate="yes" xml:space="preserve">
          <source>Note: you can do this over arrays, but you'll iterate over the &lt;code&gt;length&lt;/code&gt; and other properties, too.</source>
          <target state="translated">注：配列に対してこれを行うことができますが、 &lt;code&gt;length&lt;/code&gt; や他のプロパティについても繰り返します。</target>
        </trans-unit>
        <trans-unit id="dc8ff6e94fd31b05b3bd0d0a7bbbe0463493bea0" translate="yes" xml:space="preserve">
          <source>Notice the use of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;&lt;code&gt;for-of&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt;&lt;code&gt;for-in&lt;/code&gt;&lt;/a&gt;, if not used it will return undefined on named properties, and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt; ensures the use of only the object's own properties without the whole prototype-chain properties</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt; &lt;code&gt;for-in&lt;/code&gt; &lt;/a&gt;ではなく&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt; &lt;code&gt;for-of&lt;/code&gt; を&lt;/a&gt;使用することに注意してください。使用しない場合は、名前付きプロパティで未定義が返されます&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt; &lt;code&gt;Object.keys()&lt;/code&gt; &lt;/a&gt;は、プロトタイプチェーンのプロパティ全体ではなく、オブジェクト自体のプロパティのみを使用します。</target>
        </trans-unit>
        <trans-unit id="a1c26ca5b91d4a51f8174e0bc4f8e68ec7cdcc94" translate="yes" xml:space="preserve">
          <source>Now I want to loop through all &lt;code&gt;p&lt;/code&gt; elements (&lt;code&gt;p1&lt;/code&gt;, &lt;code&gt;p2&lt;/code&gt;, &lt;code&gt;p3&lt;/code&gt;...) And get their keys and values. How can I do that?</source>
          <target state="translated">次に、すべての &lt;code&gt;p&lt;/code&gt; 要素（ &lt;code&gt;p1&lt;/code&gt; 、 &lt;code&gt;p2&lt;/code&gt; 、 &lt;code&gt;p3&lt;/code&gt; ...）をループして、それらのキーと値を取得します。 どうやってやるの？</target>
        </trans-unit>
        <trans-unit id="7ea052b7cd7dd8fe0b68bae7e15db15d394b4554" translate="yes" xml:space="preserve">
          <source>Now you can just call it as an ordinary function, nothing else is affected</source>
          <target state="translated">これで通常の関数として呼び出すことができ、他には何の影響もありません。</target>
        </trans-unit>
        <trans-unit id="f8fe217f1f92ae27a4182945fcd57151d97a8b18" translate="yes" xml:space="preserve">
          <source>Now, you can simple call:</source>
          <target state="translated">これで簡単に電話ができるようになりました。</target>
        </trans-unit>
        <trans-unit id="4911ec574e940846f79565123dd16e79b73fa664" translate="yes" xml:space="preserve">
          <source>Nowadays many well known JavaScript libraries provide their own methods for iterating over collections, i.e. over &lt;em&gt;arrays&lt;/em&gt;, &lt;em&gt;objects&lt;/em&gt;, and &lt;em&gt;array-like objects&lt;/em&gt;. These methods are convenient to use and are entirely compatible with any browser.</source>
          <target state="translated">現在、多くの有名なJavaScriptライブラリは、コレクション、つまり&lt;em&gt;配列&lt;/em&gt; 、 &lt;em&gt;オブジェクト&lt;/em&gt; 、 &lt;em&gt;配列のようなオブジェクト&lt;/em&gt;を反復処理するための独自のメソッドを提供してい&lt;em&gt;ます&lt;/em&gt; 。 これらのメソッドは使いやすく、すべてのブラウザと完全に互換性があります。</target>
        </trans-unit>
        <trans-unit id="629350d753d476936775753f4a2c85036cbe029a" translate="yes" xml:space="preserve">
          <source>Object keys iteration</source>
          <target state="translated">オブジェクトキーの反復</target>
        </trans-unit>
        <trans-unit id="7e52410ffda30839d3fcb0ba5a2e71cf9dcfbcb1" translate="yes" xml:space="preserve">
          <source>Object properties can be &lt;em&gt;enumerable&lt;/em&gt; or &lt;em&gt;non-enumerable&lt;/em&gt;. Non-enumerable properties are left out of lots of property enumerations/arrays.</source>
          <target state="translated">オブジェクトプロパティは、 &lt;em&gt;列挙可能&lt;/em&gt;または&lt;em&gt;非列挙可能&lt;/em&gt;です。 列挙できないプロパティは、多くのプロパティ列挙/配列から除外されます。</target>
        </trans-unit>
        <trans-unit id="22994f821def1dd2970557b55c917d3dfde9d7b8" translate="yes" xml:space="preserve">
          <source>Object properties can be &lt;em&gt;own&lt;/em&gt; (the property is on the object itself) or &lt;em&gt;inherited&lt;/em&gt; (not on the object itself, on one of its prototypes).</source>
          <target state="translated">オブジェクトプロパティは、 &lt;em&gt;所有&lt;/em&gt;することも（プロパティ自体がオブジェクト自体にある）、 &lt;em&gt;継承&lt;/em&gt;することもできます（オブジェクト自体ではなく、プロトタイプの1つにあります）。</target>
        </trans-unit>
        <trans-unit id="be1c89ae8f0ef034137eab5e3b5a95b39860d1ac" translate="yes" xml:space="preserve">
          <source>Object.keys approach took 40.21101451665163 milliseconds.</source>
          <target state="translated">Object.keyのアプローチには40.21101451665163ミリ秒かかりました。</target>
        </trans-unit>
        <trans-unit id="5686d9a694d8bcf58a2ec40ae647cbc33eb4e0e4" translate="yes" xml:space="preserve">
          <source>Object.keys(obj) : Array</source>
          <target state="translated">Object.keys(obj):配列</target>
        </trans-unit>
        <trans-unit id="9bd98e631eeca19ad778683f0b597ef60c3d91d2" translate="yes" xml:space="preserve">
          <source>Ok here is a code:</source>
          <target state="translated">ここにコードがあります。</target>
        </trans-unit>
        <trans-unit id="48821ddde845a8127856b5197412d3e9b98d849f" translate="yes" xml:space="preserve">
          <source>Only JavaScript code without dependencies:</source>
          <target state="translated">依存関係のないJavaScriptのコードのみ。</target>
        </trans-unit>
        <trans-unit id="1fc344e92e022043d22ed9f86b1ba91fec95875c" translate="yes" xml:space="preserve">
          <source>Or if you know the power of ES6 &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/function*&quot;&gt;generators&lt;/a&gt;, so you certainly can make the code above much shorter.</source>
          <target state="translated">または、ES6 &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/function*&quot;&gt;ジェネレーター&lt;/a&gt;の能力を知っている場合は、上記のコードをさらに短くすることができます。</target>
        </trans-unit>
        <trans-unit id="4c5e92a1bdcfc9b09bb1412b1c5936ad6f1f5dbe" translate="yes" xml:space="preserve">
          <source>Or you can use &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;destructuring&lt;/a&gt; assignment:</source>
          <target state="translated">または、 &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;分解&lt;/a&gt;代入を使用できます。</target>
        </trans-unit>
        <trans-unit id="a3cdf0ea02f23eab1dafc7dfa0f6225f546d3bb5" translate="yes" xml:space="preserve">
          <source>PS. on Chrome the difference even bigger &lt;a href=&quot;http://codepen.io/dsheiko/pen/JdrqXa&quot;&gt;http://codepen.io/dsheiko/pen/JdrqXa&lt;/a&gt;</source>
          <target state="translated">PS。 Chromeでは、さらに大きな違い&lt;a href=&quot;http://codepen.io/dsheiko/pen/JdrqXa&quot;&gt;http://codepen.io/dsheiko/pen/JdrqXa&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9a7d963cb944872745e42eebdfeb267c1df5c1bf" translate="yes" xml:space="preserve">
          <source>PS2: In ES6 (EcmaScript 2015) you can iterate iterable object nicer:</source>
          <target state="translated">PS2:ES6 (EcmaScript 2015)では、イテレート可能なオブジェクトをよりきれいにイテレートできるようになりました。</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="ad5f5605ae02a7ee104521831414d243db1ba749" translate="yes" xml:space="preserve">
          <source>Performance tests was performed for</source>
          <target state="translated">の性能試験を実施しました。</target>
        </trans-unit>
        <trans-unit id="d5f737ce74fd4e194d4acc8a93050d00e0d3a46c" translate="yes" xml:space="preserve">
          <source>Preface:</source>
          <target state="translated">Preface:</target>
        </trans-unit>
        <trans-unit id="e51f130523ffae59f445c83fb99c53b717a2112b" translate="yes" xml:space="preserve">
          <source>Property names can be strings or Symbols. Properties whose names are Symbols are left out of lots of property enumerations/arrays.</source>
          <target state="translated">プロパティ名には文字列または記号を使用できます。プロパティ名がSymbolであるプロパティは、プロパティ列挙配列の多くから除外されます。</target>
        </trans-unit>
        <trans-unit id="4bcb4e163bf193fe874c35e7a1a754e4ed2bd51c" translate="yes" xml:space="preserve">
          <source>Show code snippet</source>
          <target state="translated">コードスニペットを表示</target>
        </trans-unit>
        <trans-unit id="ccd8d63992692c4fb1b10a7b977cc306b7a354db" translate="yes" xml:space="preserve">
          <source>Since es2015 is getting more and more popular I am posting this answer which include usage of generator and iterator to smoothly iterate through &lt;code&gt;[key, value]&lt;/code&gt; pairs. As it is possible in other languages for instance Ruby.</source>
          <target state="translated">es2015の人気が高まっているので、この回答を投稿しています。これには &lt;code&gt;[key, value]&lt;/code&gt; ペアをスムーズに反復するジェネレータとイテレータの使用法が含まれています。 Rubyなどの他の言語でも可能です。</target>
        </trans-unit>
        <trans-unit id="7fd310e39b9c5384f400f2a00d5e814ddeb587d8" translate="yes" xml:space="preserve">
          <source>Since plain JS object isn't &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;iterable&lt;/a&gt; just out of box, we aren't able to use &lt;code&gt;for..of&lt;/code&gt; loop for iterating over its content. But no one can stop us &lt;strong&gt;to make it iterable&lt;/strong&gt;.</source>
          <target state="translated">単純なJSオブジェクトは &lt;code&gt;for..of&lt;/code&gt; は&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;反復可能で&lt;/a&gt;はないため、 for..ofループを使用してそのコンテンツを反復することはできません。 しかし、 &lt;strong&gt;それを反復可能にするために&lt;/strong&gt;私たち&lt;strong&gt;を&lt;/strong&gt;止めることはできません。</target>
        </trans-unit>
        <trans-unit id="1426a0b62263371d020ccb96a30b630d270b2473" translate="yes" xml:space="preserve">
          <source>Since we've made it we can use it this way:</source>
          <target state="translated">せっかく作ったのだから、こんな風に使いましょう。</target>
        </trans-unit>
        <trans-unit id="2dfdb00ae3e82ded6da686bffc206325c58d0800" translate="yes" xml:space="preserve">
          <source>So it gives the same list of keys as you intend by testing each object key with hasOwnProperty. You don't need that extra test operation than and &lt;code&gt;Object.keys( obj ).forEach(function( key ){})&lt;/code&gt; is supposed to be faster. Let's prove it:</source>
          <target state="translated">そのため、hasOwnPropertyを使用して各オブジェクトキーをテストすることで、意図したものと同じキーのリストが得られます。 &lt;code&gt;Object.keys( obj ).forEach(function( key ){})&lt;/code&gt; 方が高速であると想定されているため、追加のテスト操作は必要ありません。 それを証明しましょう：</target>
        </trans-unit>
        <trans-unit id="4645d5a0a5468109c2f88c910e1e58294f6beb7c" translate="yes" xml:space="preserve">
          <source>So long as you include my shim below:</source>
          <target state="translated">下のシムを入れてくれればね</target>
        </trans-unit>
        <trans-unit id="5631c195805d78cb0d5be22d5f2c5a9ee8dc79d1" translate="yes" xml:space="preserve">
          <source>Sure, you can apply such behavior for all objects with making &lt;code&gt;Object&lt;/code&gt; iterable on &lt;code&gt;prototype&lt;/code&gt; level.</source>
          <target state="translated">もちろん、 &lt;code&gt;prototype&lt;/code&gt; レベルで &lt;code&gt;Object&lt;/code&gt; 反復可能にすることで、すべてのオブジェクトにこのような動作を適用できます。</target>
        </trans-unit>
        <trans-unit id="9448e2a156ab791737a33c4161a27378a271d13f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object.keys()&lt;/code&gt; method returns an array of a given object's own enumerable properties. Read more about it &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;Object.keys()&lt;/code&gt; メソッドは、指定されたオブジェクト自体の列挙可能なプロパティの配列を返します。 詳細は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;こちら&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="68bedeb904864bc6eac4936194bfc1432a121a4d" translate="yes" xml:space="preserve">
          <source>The question won't be complete if we don't mention about alternative methods for looping through objects.</source>
          <target state="translated">オブジェクトをループするための代替メソッドについて言及しなければ、この問題は完全ではありません。</target>
        </trans-unit>
        <trans-unit id="707d8f25499ef81c0afd56a2467cd54972a9756d" translate="yes" xml:space="preserve">
          <source>There's no reason why that wouldn't work.</source>
          <target state="translated">それが通用しない理由はない。</target>
        </trans-unit>
        <trans-unit id="2a2aa295e2f8f8018137cbb4a177ff7f8b5f104f" translate="yes" xml:space="preserve">
          <source>Therefore, when using for-in loops, always make use of the &lt;code&gt;hasOwnProperty&lt;/code&gt; method to determine if the current property in iteration is really a property of the object you're checking on:</source>
          <target state="translated">したがって、for-inループを使用するときは、常に &lt;code&gt;hasOwnProperty&lt;/code&gt; メソッドを使用して、反復の現在のプロパティが実際にチェック対象のオブジェクトのプロパティであるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="6573ff7791abb12235eaf772c627e522459492a8" translate="yes" xml:space="preserve">
          <source>Today 2020.03.06 I perform tests of chosen solutions on Chrome v80.0, Safari v13.0.5 and Firefox 73.0.1 on MacOs High Sierra v10.13.6</source>
          <target state="translated">今日2020.03.06私はMacOs High Sierra v10.13.13.6上でChrome v80.0、Safari v13.0.5、Firefox 73.0.1で選択したソリューションのテストを実行します。</target>
        </trans-unit>
        <trans-unit id="b7fdbc9f9f0e814bb215987071150223e78ef8b9" translate="yes" xml:space="preserve">
          <source>Under ECMAScript 5, you can combine &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;&lt;code&gt;Array.prototype.forEach()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">ECMAScript 5では、 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt; &lt;code&gt;Object.keys()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt; &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; を&lt;/a&gt;組み合わせることができます：</target>
        </trans-unit>
        <trans-unit id="fba73f56e7147c5069eb5bb50bfaa3827fd326bf" translate="yes" xml:space="preserve">
          <source>Until this becomes the new standard, the old method can still be used but there are also alternatives in popular libraries or even &lt;a href=&quot;https://github.com/nbouvrette/forEach&quot;&gt;lightweight alternatives&lt;/a&gt; for those who aren't using any of these libraries.</source>
          <target state="translated">これが新しい標準になるまでは、古い方法を使用できますが、一般的なライブラリの&lt;a href=&quot;https://github.com/nbouvrette/forEach&quot;&gt;代替手段&lt;/a&gt;や、これらのライブラリを使用していない人のための軽量な代替手段もあります。</target>
        </trans-unit>
        <trans-unit id="d2223bf1aacb8d79e11777d0049d9e90a5b8f254" translate="yes" xml:space="preserve">
          <source>Welcome to the future.</source>
          <target state="translated">未来へようこそ</target>
        </trans-unit>
        <trans-unit id="cc674edcf6e433a211df7e9e557f550332aec2a1" translate="yes" xml:space="preserve">
          <source>With all of them except &lt;code&gt;for-in&lt;/code&gt;, you'd use some kind of looping construct on the array (&lt;code&gt;for&lt;/code&gt;, &lt;code&gt;for-of&lt;/code&gt;, &lt;code&gt;forEach&lt;/code&gt;, etc.).</source>
          <target state="translated">&lt;code&gt;for-in&lt;/code&gt; 以外のすべてで、配列 &lt;code&gt;for&lt;/code&gt; 何らかのループ構成（ for 、 &lt;code&gt;for-of&lt;/code&gt; 、 &lt;code&gt;forEach&lt;/code&gt; など）を使用します。</target>
        </trans-unit>
        <trans-unit id="1c0d75033729d34abf569f3b3ddaf6a1bdbed218" translate="yes" xml:space="preserve">
          <source>Without having to create a real Map object that doesn't have the nice syntactic sugar.</source>
          <target state="translated">素敵な構文的な糖質を持たない実際の Map オブジェクトを作成する必要がありません。</target>
        </trans-unit>
        <trans-unit id="2afea76e635096801d93bc41fb6a5536f18c15fa" translate="yes" xml:space="preserve">
          <source>You can add a simple &lt;em&gt;forEach&lt;/em&gt; function to all objects, so you can automatically loop through any object:</source>
          <target state="translated">すべてのオブジェクトに単純な&lt;em&gt;forEach&lt;/em&gt;関数を追加できるため、任意のオブジェクトを自動的にループできます。</target>
        </trans-unit>
        <trans-unit id="d8e306872c5b3d04ad61153a998ec79ee2e2e06f" translate="yes" xml:space="preserve">
          <source>You can also use Object.keys() and iterate over the object keys like below to get the value:</source>
          <target state="translated">Object.keys()を使用して、以下のようにオブジェクトのキーを反復処理して値を取得することもできます。</target>
        </trans-unit>
        <trans-unit id="9df7817cd06171f45a723354756f26620f580de5" translate="yes" xml:space="preserve">
          <source>You can check out &lt;a href=&quot;http://www.es6fiddle.net/isksh68n/&quot;&gt;&lt;strong&gt;JSFiddle&lt;/strong&gt;&lt;/a&gt; with all code I've provided above.</source>
          <target state="translated">上記で提供したすべてのコードで&lt;a href=&quot;http://www.es6fiddle.net/isksh68n/&quot;&gt;&lt;strong&gt;JSFiddle&lt;/strong&gt;&lt;/a&gt;をチェックアウトできます。</target>
        </trans-unit>
        <trans-unit id="f092bb3d231117e16875d827dbcb4f592ee6ddd3" translate="yes" xml:space="preserve">
          <source>You can combine &lt;code&gt;for...of&lt;/code&gt;, destructuring, and &lt;code&gt;Object.entries&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;for...of&lt;/code&gt; 、destructuring、および &lt;code&gt;Object.entries&lt;/code&gt; を組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="5835361bd2e75d290192b51cf230550d40991036" translate="yes" xml:space="preserve">
          <source>You can compare performance of this approach with different implementations on &lt;a href=&quot;http://jsperf.com/&quot;&gt;jsperf.com&lt;/a&gt;:</source>
          <target state="translated">このアプローチのパフォーマンスを&lt;a href=&quot;http://jsperf.com/&quot;&gt;jsperf.comの&lt;/a&gt;さまざまな実装と比較できます。</target>
        </trans-unit>
        <trans-unit id="07ea959fb6adebc978c0f011c09d6fbb38b48283" translate="yes" xml:space="preserve">
          <source>You can find more about usage on
&lt;a href=&quot;https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;MDN&lt;/a&gt; page</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;MDN&lt;/a&gt;ページで使用方法の詳細を確認できます</target>
        </trans-unit>
        <trans-unit id="b39c85fe2996ce2b1cb62746063fa3f6b9c3aea2" translate="yes" xml:space="preserve">
          <source>You can just iterate over it like:</source>
          <target state="translated">みたいな感じで反復処理すればいいんだよ。</target>
        </trans-unit>
        <trans-unit id="e2bacd14cdcb3c8381ec25749f21eb003ffda72a" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt;&lt;code&gt;for-in&lt;/code&gt;&lt;/a&gt; loop as shown by others. However, you also have to make sure that the key you get is an actual property of an object, and doesn't come from the prototype.</source>
          <target state="translated">他の人が示すように、 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt; &lt;code&gt;for-in&lt;/code&gt; &lt;/a&gt;ループを使用できます。 ただし、取得するキーがオブジェクトの実際のプロパティであり、プロトタイプに由来しないことも確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="40252eae4706cceffc619189db0a17d754ce42ed" translate="yes" xml:space="preserve">
          <source>You have to use the &lt;strong&gt;for-in loop&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;for-inループ&lt;/strong&gt;を使用する&lt;strong&gt;必要があります&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6730e3f19253e5d08b76d3651b7182a3df338152" translate="yes" xml:space="preserve">
          <source>and for keys ( allready answerd before me here )</source>
          <target state="translated">そして鍵のために(ここで私の前にすでに答えられた</target>
        </trans-unit>
        <trans-unit id="7a947b3af5f007df2c90a38c8e173c0e9affdfa7" translate="yes" xml:space="preserve">
          <source>for...in/hasOwnProperty approach took 98.26163508463651 milliseconds.</source>
          <target state="translated">for...inhasOwnPropertyのアプローチには98.26163508463651ミリ秒かかりました。</target>
        </trans-unit>
        <trans-unit id="1dad84041e1f4a1ac2b61ea3b839a03f52f00ebd" translate="yes" xml:space="preserve">
          <source>it return the an array of the object values and it not extract values from Prototype!!</source>
          <target state="translated">これはオブジェクトの値の配列を返し、Prototypeから値を抽出しません!</target>
        </trans-unit>
        <trans-unit id="68be3091c9ded638c69cfcfde91d5f8203202b2c" translate="yes" xml:space="preserve">
          <source>object literal iteration</source>
          <target state="translated">オブジェクトリテラル反復</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="8972d45f7e8c1e4586030e6383fab869625b067e" translate="yes" xml:space="preserve">
          <source>performance comparison for all most popular cases in this question on &lt;code&gt;perfjs.info&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;perfjs.info&lt;/code&gt; のこの質問で最も人気のあるすべてのケースのパフォーマンス比較：</target>
        </trans-unit>
        <trans-unit id="4e4ac781c74f3de12b85437e0ce21526690c5030" translate="yes" xml:space="preserve">
          <source>retrieves all string-valued keys of all enumerable own (non-inherited) properties.</source>
          <target state="translated">列挙可能な自身の(非継承の)プロパティのすべての文字列値のキーを取得します。</target>
        </trans-unit>
        <trans-unit id="9d3fd172d54a8a1b0e808b84e2f2068fcff097b0" translate="yes" xml:space="preserve">
          <source>since ES06 you can get the values of an object as array with</source>
          <target state="translated">ES06 以降、オブジェクトの値を配列として取得するには</target>
        </trans-unit>
        <trans-unit id="ba86877b9e6415b124321f46f5e12940e8b3aa72" translate="yes" xml:space="preserve">
          <source>small object - with 3 fields - you can perform test on your machine &lt;a href=&quot;https://jsbench.me/wok7em87k8/1&quot;&gt;HERE&lt;/a&gt;</source>
          <target state="translated">小さなオブジェクト-3つのフィールド- &lt;a href=&quot;https://jsbench.me/wok7em87k8/1&quot;&gt;ここで&lt;/a&gt;マシン上でテストを実行できます</target>
        </trans-unit>
        <trans-unit id="8b00365aaf30d8e7d329d80bbae34538a7af63af" translate="yes" xml:space="preserve">
          <source>solution C is slow for big objects and medium-slow for small objects</source>
          <target state="translated">解Cは大物には遅く、小物には中程度に遅い</target>
        </trans-unit>
        <trans-unit id="5929799c0c51a9fbea02779e3db64be6923384d9" translate="yes" xml:space="preserve">
          <source>solutions based on &lt;code&gt;for-in&lt;/code&gt; (A,B) are fast (or fastest) for all browsers for big and small objects</source>
          <target state="translated">&lt;code&gt;for-in&lt;/code&gt; （A、B）に基づくソリューションは、大小のオブジェクトのすべてのブラウザーで高速（または最高速）です。</target>
        </trans-unit>
        <trans-unit id="ad6295bc425c88fcc6cc0617c8f1752b188249be" translate="yes" xml:space="preserve">
          <source>solutions based on explicit index &lt;code&gt;i&lt;/code&gt; (J,K) are quite fast on all browsers for small objects (for firefox also fast for big ojbects but medium fast on other browsers)</source>
          <target state="translated">明示的なインデックス &lt;code&gt;i&lt;/code&gt; （J、K）に基づくソリューションは、すべてのブラウザーで小さなオブジェクトに対して非常に高速です（Firefoxの場合、大きなオブジェクトでは高速ですが、他のブラウザーでは中速です）。</target>
        </trans-unit>
        <trans-unit id="b68a11032c4c5524a6d469ea8b3201d777a3c20e" translate="yes" xml:space="preserve">
          <source>solutions based on iterators (D,E) are slowest and not recommended</source>
          <target state="translated">イテレータ (D,E)に基づく解は最も遅く、推奨されない</target>
        </trans-unit>
        <trans-unit id="6e650787270deb795dae97cbcb4d1880a0d37dc2" translate="yes" xml:space="preserve">
          <source>surprisingly &lt;code&gt;for-of&lt;/code&gt; (H) solution is fast on chrome for small and big objects</source>
          <target state="translated">驚くほど &lt;code&gt;for-of&lt;/code&gt; （H）ソリューションは、小さいオブジェクトと大きいオブジェクトのクロムで高速です。</target>
        </trans-unit>
        <trans-unit id="0f9f637f0ba1bb1c6606fd4a5d8bf3f034370d03" translate="yes" xml:space="preserve">
          <source>this will give the same result as using for...in es6 loop.</source>
          <target state="translated">これは、es6ループでfor...を使ったのと同じ結果になります。</target>
        </trans-unit>
        <trans-unit id="d3bee068dc0d244e9d3ae4935d4bbc75483368a0" translate="yes" xml:space="preserve">
          <source>via &lt;strong&gt;prototype&lt;/strong&gt; with &lt;strong&gt;forEach()&lt;/strong&gt; which should skip the &lt;strong&gt;prototype chain&lt;/strong&gt; properties:</source>
          <target state="translated">&lt;strong&gt;プロトタイプチェーン&lt;/strong&gt;プロパティをスキップする&lt;strong&gt;forEach（）&lt;/strong&gt;を使用した&lt;strong&gt;プロトタイプ&lt;/strong&gt;を介して：</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
