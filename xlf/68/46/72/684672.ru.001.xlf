<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/684672">
    <body>
      <group id="684672">
        <trans-unit id="4e6c60b40db8e2958de1c62a00efabde299246e3" translate="yes" xml:space="preserve">
          <source>'big' object - with 1000 fields - you can perform test on your machine &lt;a href=&quot;https://jsbench.me/0pk7emfoy9/1&quot;&gt;HERE&lt;/a&gt;</source>
          <target state="translated">&amp;laquo;Большой&amp;raquo; объект - с 1000 полями - вы можете выполнить тест на своем компьютере &lt;a href=&quot;https://jsbench.me/0pk7emfoy9/1&quot;&gt;ЗДЕСЬ&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ec950c295fbae882d685ccc9545dfed2b76e75ae" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://codepen.io/Hashbrown/pen/mEWadp&quot;&gt;DEMO&lt;/a&gt; working in Chrome and FF (I assume ES6 only)</source>
          <target state="translated">&lt;a href=&quot;http://codepen.io/Hashbrown/pen/mEWadp&quot;&gt;ДЕМО&lt;/a&gt; работает в Chrome и FF (я полагаю, только ES6)</target>
        </trans-unit>
        <trans-unit id="474279ebe960067670817c8a1990ae8709a29b95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_.forIn()&lt;/code&gt; iterates over &lt;em&gt;own and inherited&lt;/em&gt; enumerable properties of an object, while &lt;code&gt;_.forOwn()&lt;/code&gt; iterates only over &lt;em&gt;own&lt;/em&gt; properties of an object (basically checking against &lt;code&gt;hasOwnProperty&lt;/code&gt; function). For simple objects and object literals any of these methods will work fine.</source>
          <target state="translated">&lt;code&gt;_.forIn()&lt;/code&gt; выполняет итерации по &lt;em&gt;собственным и унаследованным&lt;/em&gt; перечисляемым свойствам объекта, в то время как &lt;code&gt;_.forOwn()&lt;/code&gt; выполняет итерации только по &lt;em&gt;собственным&lt;/em&gt; свойствам объекта (в основном, проверяя функцию &lt;code&gt;hasOwnProperty&lt;/code&gt; ). Для простых объектов и литералов объектов любой из этих методов будет работать нормально.</target>
        </trans-unit>
        <trans-unit id="bd81e35af1823c9558691aedf06bde04281fb40c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.entries&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;Object.entries&lt;/code&gt;:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3dd5a193e7d69f45ee20d2f2016b15efdde5358d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.entries&lt;/code&gt;&lt;/strong&gt; [&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;MDN&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.entries&quot;&gt;spec&lt;/a&gt;] &amp;mdash; A function providing an array of the names &lt;em&gt;and&lt;/em&gt; values of an object's &lt;em&gt;own&lt;/em&gt;, &lt;em&gt;enumerable&lt;/em&gt; properties (each entry in the array is a &lt;code&gt;[name, value]&lt;/code&gt; array).</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Object.entries&lt;/code&gt; &lt;/strong&gt; [ &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;MDN&lt;/a&gt; , &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.entries&quot;&gt;spec&lt;/a&gt; ] - функция, предоставляющая массив имен &lt;em&gt;и&lt;/em&gt; значений &lt;em&gt;собственных&lt;/em&gt; , &lt;em&gt;перечисляемых&lt;/em&gt; свойств объекта (каждая запись в массиве является массивом &lt;code&gt;[name, value]&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="ede21db207d84db7454d34051468010e74e5fcfb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b8a00e2a008aac31c6e4fc4fec09c0d8812aacc4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;&lt;/strong&gt; [&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames&quot;&gt;MDN&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.getownpropertynames&quot;&gt;spec&lt;/a&gt;] &amp;mdash; A function providing an array of the names of an object's &lt;em&gt;own&lt;/em&gt; properties (even non-enumerable ones) whose names are strings.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt; &lt;/strong&gt; [ &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames&quot;&gt;MDN&lt;/a&gt; , &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.getownpropertynames&quot;&gt;spec&lt;/a&gt; ] - Функция, предоставляющая массив имен &lt;em&gt;собственных&lt;/em&gt; свойств объекта (даже не перечисляемых), имена которых являются строками.</target>
        </trans-unit>
        <trans-unit id="a5aec969b485f5159cd506af0dfcdf05706956c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a2b3837c88dfdd939e85634eaed657aebee7690f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;&lt;/strong&gt; [&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols&quot;&gt;MDN&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols&quot;&gt;spec&lt;/a&gt;] &amp;mdash; A function providing an array of the names of an object's &lt;em&gt;own&lt;/em&gt; properties (even non-enumerable ones) whose names are Symbols.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt; &lt;/strong&gt; [ &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols&quot;&gt;MDN&lt;/a&gt; , &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols&quot;&gt;spec&lt;/a&gt; ] - функция, предоставляющая массив имен &lt;em&gt;собственных&lt;/em&gt; свойств объекта (даже не перечисляемых), имена которых являются символами.</target>
        </trans-unit>
        <trans-unit id="1ebda5b16342bb06084a9bd4fd7be9e7eab81a71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/strong&gt; [&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;MDN&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.keys&quot;&gt;spec&lt;/a&gt;] &amp;mdash; A function providing an array of the names of an object's &lt;em&gt;own&lt;/em&gt;, &lt;em&gt;enumerable&lt;/em&gt; properties whose names are strings.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/strong&gt; [ &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;MDN&lt;/a&gt; , &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.keys&quot;&gt;spec&lt;/a&gt; ] - функция, предоставляющая массив имен &lt;em&gt;собственных&lt;/em&gt; , &lt;em&gt;перечисляемых&lt;/em&gt; свойств объекта, имена которых являются строками.</target>
        </trans-unit>
        <trans-unit id="8b65922b96013e6bbea564cf2c7cb74b7bfe4dee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/strong&gt;&lt;em&gt;(with a &lt;code&gt;for-of&lt;/code&gt; loop, but you can use any looping construct)&lt;/em&gt;:</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/strong&gt; &lt;em&gt;(с циклом &lt;code&gt;for-of&lt;/code&gt; , но вы можете использовать любую конструкцию цикла)&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="1754300f39456aee06698922c50acb14a9fe09f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.values&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;Object.values&lt;/code&gt;:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0dac8d73c86bc0d696fe7cea9ad377898c9d43b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Object.values&lt;/code&gt;&lt;/strong&gt; [&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/values&quot;&gt;MDN&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.values&quot;&gt;spec&lt;/a&gt;] &amp;mdash; A function providing an array of the &lt;em&gt;values&lt;/em&gt; of an object's &lt;em&gt;own&lt;/em&gt;, &lt;em&gt;enumerable&lt;/em&gt; properties.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Object.values&lt;/code&gt; &lt;/strong&gt; [ &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/values&quot;&gt;MDN&lt;/a&gt; , &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.values&quot;&gt;spec&lt;/a&gt; ] - функция, предоставляющая массив &lt;em&gt;значений&lt;/em&gt; &lt;em&gt;собственных&lt;/em&gt; , &lt;em&gt;перечисляемых&lt;/em&gt; свойств объекта.</target>
        </trans-unit>
        <trans-unit id="2da5969acc187f93fbeb365e2dccef6be6d0d7d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Reflect.ownKeys&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;Reflect.ownKeys&lt;/code&gt;:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3aab8dcea4dd592726faf4dc27e65e115ed78154" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Reflect.ownKeys&lt;/code&gt;&lt;/strong&gt; [&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys&quot;&gt;MDN&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-reflect.ownkeys&quot;&gt;spec&lt;/a&gt;] &amp;mdash; A function providing an array of the names of an object's &lt;em&gt;own&lt;/em&gt; properties (even non-enumerable ones), whether those names are strings or Symbols.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Reflect.ownKeys&lt;/code&gt; &lt;/strong&gt; [ &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys&quot;&gt;MDN&lt;/a&gt; , &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-reflect.ownkeys&quot;&gt;spec&lt;/a&gt; ] - функция, предоставляющая массив имен &lt;em&gt;собственных&lt;/em&gt; свойств объекта (даже не перечисляемых), независимо от того, являются ли эти имена строками или символами.</target>
        </trans-unit>
        <trans-unit id="0c83f91ec1f572afad87fb64a22dd5d2e7f873bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;for-in&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;for-in&lt;/code&gt;:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="be58acf7a12d4f8e428cd7ccb5c5c0d1a0e99dc8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;for-in&lt;/code&gt;&lt;/strong&gt; [&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt;MDN&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements&quot;&gt;spec&lt;/a&gt;] &amp;mdash; A loop structure that loops through the names of an object's &lt;em&gt;enumerable&lt;/em&gt; properties, including inherited ones, whose names are strings</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;for-in&lt;/code&gt; &lt;/strong&gt; [ &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt;MDN&lt;/a&gt; , &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements&quot;&gt;spec&lt;/a&gt; ] - структура цикла, которая перебирает имена &lt;em&gt;перечисляемых&lt;/em&gt; свойств объекта, включая унаследованные, имена которых являются строками</target>
        </trans-unit>
        <trans-unit id="0ce88fb2e4b9a870187aeb2f4765051ba2131b1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;All properties&lt;/strong&gt;, including inherited non-enumerable ones:</source>
          <target state="translated">&lt;strong&gt;Все свойства&lt;/strong&gt; , в том числе унаследованные, не перечисляемые:</target>
        </trans-unit>
        <trans-unit id="4e021e8096db3c4f40241955870ff1f94ba900d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;EDIT:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ea9f83ce98fb74a01138d2466873fea80b2ac7c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For those who don't like to shim, or mess with &lt;code&gt;prototype&lt;/code&gt; in general, feel free to make the function on window instead, calling it something like &lt;code&gt;getObjIterator()&lt;/code&gt; then;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Для тех, кто не любит подшучивать или вообще &lt;code&gt;getObjIterator()&lt;/code&gt; с &lt;code&gt;prototype&lt;/code&gt; , не стесняйтесь вместо этого делать функцию в окне, вызывая ее как getObjIterator () затем;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f29d8e49346eb8d4ca5b185798c9e93caa0374fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For-of with Object.keys() alternative:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Альтернатива For-of с Object.keys ():&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e6ba5897c67b5008b29e0f8adffc49356bf25e6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here is the snippet:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Вот фрагмент:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3ec9e97aa9f9cb8b81f3d24df257f8e956e99de7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Lo-Dash&lt;/strong&gt; provides several methods for iterating over object properties. Basic &lt;a href=&quot;http://lodash.com/docs#forEach&quot;&gt;&lt;code&gt;_.forEach()&lt;/code&gt;&lt;/a&gt; (or it's alias &lt;code&gt;_.each()&lt;/code&gt;) is useful for looping through both objects and arrays, however (!) objects with &lt;code&gt;length&lt;/code&gt; property are treated like arrays, and to avoid this behavior it is suggested to use &lt;a href=&quot;http://lodash.com/docs#forIn&quot;&gt;&lt;code&gt;_.forIn()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://lodash.com/docs#forOwn&quot;&gt;&lt;code&gt;_.forOwn()&lt;/code&gt;&lt;/a&gt; methods (these also have &lt;code&gt;value&lt;/code&gt; argument coming first):</source>
          <target state="translated">&lt;strong&gt;Lo-Dash&lt;/strong&gt; предоставляет несколько методов для перебора свойств объекта. Базовая &lt;a href=&quot;http://lodash.com/docs#forEach&quot;&gt; &lt;code&gt;_.forEach()&lt;/code&gt; &lt;/a&gt; (или ее псевдоним &lt;code&gt;_.each()&lt;/code&gt; ) полезна для циклического перемещения по объектам и массивам, однако (!) Объекты со свойством &lt;code&gt;length&lt;/code&gt; обрабатываются как массивы, и во избежание такого поведения рекомендуется использовать &lt;a href=&quot;http://lodash.com/docs#forIn&quot;&gt; &lt;code&gt;_.forIn()&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;http://lodash.com/docs#forOwn&quot;&gt; &lt;code&gt;_.forOwn()&lt;/code&gt; &lt;/a&gt; (они также имеют аргумент &lt;code&gt;value&lt;/code&gt; , идущий первым):</target>
        </trans-unit>
        <trans-unit id="8a88d5e452dddbbc5bff670d7b08e484086a6743" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This method is not supported natively by Internet Explorer. You may consider using a Polyfill for older browsers.</source>
          <target state="translated">&lt;strong&gt;Примечание.&lt;/strong&gt; Этот метод изначально не поддерживается Internet Explorer. Вы можете рассмотреть возможность использования Polyfill для старых браузеров.</target>
        </trans-unit>
        <trans-unit id="7bcc2d79f81abc6bc319aa1e147e3a26bed87a03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UPD:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;UPD:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ca69a725c1fda2284d76c860ae7bf0171359dc78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using a &lt;code&gt;for-of&lt;/code&gt; on &lt;code&gt;Object.keys()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Использование &lt;code&gt;for-of&lt;/code&gt; для &lt;code&gt;Object.keys()&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="855d4dd01619da313af702cfb9f2ce2cf8e942d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using the new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;&lt;code&gt;Object.entries()&lt;/code&gt;&lt;/a&gt; method:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Используя новый &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt; &lt;code&gt;Object.entries()&lt;/code&gt; &lt;/a&gt; :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="53790a84e8ab38f180b61a8110c686082d451b3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You can make ordinary object associations iterate! Behaving just like &lt;code&gt;Map&lt;/code&gt;s with direct use of the fancy &lt;code&gt;for...of&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Вы можете сделать обычные ассоциации объектов итерацией!&lt;/strong&gt; &lt;strong&gt;Вести себя так же, как &lt;code&gt;Map&lt;/code&gt; с прямым использованием фантазии &lt;code&gt;for...of&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c7c568e20d9991ec9c2b339eef28dc0358005207" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;You can't just &lt;code&gt;for...of&lt;/code&gt; an &lt;code&gt;Object&lt;/code&gt; because it's not an iterator, and &lt;code&gt;for...index&lt;/code&gt; or &lt;code&gt;.forEach()&lt;/code&gt;ing the &lt;code&gt;Object.keys()&lt;/code&gt; is ugly/inefficient.&lt;br/&gt;
I'm glad most people are refraining from &lt;code&gt;for...in&lt;/code&gt; (with or without checking &lt;code&gt;.hasOwnProperty()&lt;/code&gt;) as that's also a bit messy, so other than my answer above, I'm here to say...&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;Вы не можете просто &lt;code&gt;for...of&lt;/code&gt; &lt;code&gt;Object&lt;/code&gt; потому что это не итератор, а &lt;code&gt;for...index&lt;/code&gt; или &lt;code&gt;.forEach()&lt;/code&gt; &lt;code&gt;Object.keys()&lt;/code&gt; уродливо / неэффективно.&lt;/sub&gt; &lt;sub&gt;&lt;br/&gt;&lt;/sub&gt; &lt;sub&gt;Я рад, что большинство людей воздерживаются от &lt;code&gt;for...in&lt;/code&gt; (с проверкой или без &lt;code&gt;.hasOwnProperty()&lt;/code&gt; ), поскольку это также немного грязно, поэтому, помимо моего ответа выше, я здесь, чтобы сказать ...&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="2743df4fd6790c4b11ebcfecaa61faf6176c851f" translate="yes" xml:space="preserve">
          <source>After looking through all the answers in here, hasOwnProperty isn't required for my own usage because my json object is clean; there's really no sense in adding any additional javascript processing. This is all I'm using:</source>
          <target state="translated">После просмотра всех ответов здесь,hasOwnProperty не требуется для моего собственного использования,потому что мой объект json чистый;на самом деле нет смысла добавлять дополнительную обработку javascript.Это всё,что я использую:</target>
        </trans-unit>
        <trans-unit id="d23b6095239360e58d17c190e8570054390525cc" translate="yes" xml:space="preserve">
          <source>All information about how can you do an iterator and generator you can find at developer Mozilla page.</source>
          <target state="translated">Всю информацию о том,как сделать итератор и генератор,Вы можете найти на странице разработчика Mozilla.</target>
        </trans-unit>
        <trans-unit id="be3d1dffaaec51c8d5bac1fc878f97bc2de6ce72" translate="yes" xml:space="preserve">
          <source>Also, I know this is out of scope with this question but in 2011, ECMAScript 5.1 added the &lt;code&gt;forEach&lt;/code&gt; method for Arrays only which basically created a new improved way to loop through arrays while still leaving non iterable objects with the old verbose and confusing &lt;code&gt;for&lt;/code&gt; loop. But the odd part is that this new &lt;code&gt;forEach&lt;/code&gt; method does not support &lt;code&gt;break&lt;/code&gt; which led to all sorts of other problems.</source>
          <target state="translated">Кроме того, я знаю, что этот вопрос выходит за рамки этого вопроса, но в 2011 году ECMAScript 5.1 добавил метод &lt;code&gt;forEach&lt;/code&gt; только для массивов, который в основном создал новый улучшенный способ циклически проходить по массивам, оставляя при этом не повторяемые объекты со старым многословием и сбивая с толку цикл , Но странная часть заключается в том, что этот новый метод &lt;code&gt;forEach&lt;/code&gt; не поддерживает &lt;code&gt;break&lt;/code&gt; который привел к множеству других проблем.</target>
        </trans-unit>
        <trans-unit id="ddb599b84c5c70cad249ca23093fa251a6088148" translate="yes" xml:space="preserve">
          <source>Also, objects that comply with the iterable protocol can be used with the new ES2015 feature &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot;&gt;spread&lt;/a&gt; operator thus we can read object property values as an array.</source>
          <target state="translated">Кроме того, объекты, соответствующие итерируемому протоколу, могут использоваться с новым оператором расширения функций ES2015, поэтому мы можем считывать значения свойств объекта в виде массива.</target>
        </trans-unit>
        <trans-unit id="7169cd388b4e0ea06d66deafeab91e44ccebee64" translate="yes" xml:space="preserve">
          <source>And here are result for small objects on chrome</source>
          <target state="translated">И вот результат для маленьких объектов на хроме.</target>
        </trans-unit>
        <trans-unit id="26c29271527c52627e2a30548efdf0bbd9a1c238" translate="yes" xml:space="preserve">
          <source>As of 2015, we now have a better out of the box way to loop (and break) any object type (including Arrays and Strings). Here is what a loop in JavaScript will eventually look like when the recommendation becomes mainstream:</source>
          <target state="translated">С 2015 года у нас появился лучший внеоконный способ зацикливания (и разрыва)любого типа объектов (включая массивы и строки).Вот как будет выглядеть цикл в JavaScript,когда рекомендация станет мейнстримом:</target>
        </trans-unit>
        <trans-unit id="b275d7374d2be31ecff1b4494870b6e516f02b51" translate="yes" xml:space="preserve">
          <source>At a glance here is what a JavaScript object loop look like before ECMA6:</source>
          <target state="translated">С первого взгляда можно увидеть,как выглядит цикл объектов JavaScript перед ECMA6:</target>
        </trans-unit>
        <trans-unit id="49f65eee4a59f7212ca7868c00254253e471bfb3" translate="yes" xml:space="preserve">
          <source>Basically in 2011, there is not a real solid way to loop in JavaScript other than what many popular libraries (jQuery, Underscore, etc.) decided to re-implement.</source>
          <target state="translated">В основном,в 2011 году не было реального надежного способа зацикливания в JavaScript,кроме того,что многие популярные библиотеки (jQuery,Underscore и т.д.)решили реализовать заново.</target>
        </trans-unit>
        <trans-unit id="45a5f442b26367c7cb0baf8101619b75564033ea" translate="yes" xml:space="preserve">
          <source>Below snippets presents used solutions</source>
          <target state="translated">Ниже представлены использованные решения</target>
        </trans-unit>
        <trans-unit id="3487c01cde5edf6b7390c08c1e99c3f7375241e6" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;Object.keys()&lt;/code&gt; and &lt;code&gt;Object.entries()&lt;/code&gt; iterate properties in the same order as a &lt;code&gt;for...in&lt;/code&gt; loop &lt;em&gt;but ignore the prototype chain&lt;/em&gt;. Only the object's own enumerable properties are iterated.</source>
          <target state="translated">Оба &lt;code&gt;Object.keys()&lt;/code&gt; и &lt;code&gt;Object.entries()&lt;/code&gt; повторяют свойства в том же порядке, что и цикл &lt;code&gt;for...in&lt;/code&gt; &lt;em&gt;но игнорируют цепочку прототипов&lt;/em&gt; . Только собственные перечисляемые свойства объекта повторяются.</target>
        </trans-unit>
        <trans-unit id="1e0346498acc0470e9e83ec6c7e459d6ab78c307" translate="yes" xml:space="preserve">
          <source>Browser support you can see on &lt;a href=&quot;http://kangax.github.io/es5-compat-table/#Object.keys&quot;&gt;Kangax's compat table&lt;/a&gt;</source>
          <target state="translated">Поддержка браузера, которую вы можете увидеть &lt;a href=&quot;http://kangax.github.io/es5-compat-table/#Object.keys&quot;&gt;в таблице сравнения Kangax&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e7847daba29883c636ac7ac0fde37fec94bf0d76" translate="yes" xml:space="preserve">
          <source>But be very careful when using this kind of loop, because this will &lt;strong&gt;loop all the properties along the prototype chain&lt;/strong&gt;.</source>
          <target state="translated">Но будьте очень осторожны при использовании этого вида цикла, потому что это &lt;strong&gt;зациклит все свойства вдоль цепи прототипа&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="5d7cebc73a40081c8c8727aebf942e336258e8cb" translate="yes" xml:space="preserve">
          <source>But its important to know the capabilities you now have using es6!</source>
          <target state="translated">Но важно знать,какими возможностями вы сейчас обладаете,используя es6!</target>
        </trans-unit>
        <trans-unit id="b536777ff175ae7f0dadd5ccfd9e78c00761a19e" translate="yes" xml:space="preserve">
          <source>Conclusions</source>
          <target state="translated">Conclusions</target>
        </trans-unit>
        <trans-unit id="432d4416f444775f0c61858bbd9701cb9bcf6474" translate="yes" xml:space="preserve">
          <source>Considering ES6 I'd like to add my own spoon of sugar and provide one more approach to iterate over object's properties.</source>
          <target state="translated">Учитывая ES6,я хотел бы добавить свою собственную ложку сахара и обеспечить еще один подход к итерации над свойствами объекта.</target>
        </trans-unit>
        <trans-unit id="dc3decbb93847518f1a049dcf49d0d7c6560bcc6" translate="yes" xml:space="preserve">
          <source>Details</source>
          <target state="translated">Details</target>
        </trans-unit>
        <trans-unit id="bb0b024be65447537f1109f57128500da607b30c" translate="yes" xml:space="preserve">
          <source>ECMAScript 6 adds &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">ECMAScript 6 добавляет &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="aab6bac5701c96a921f7ef249212a3c6589127c4" translate="yes" xml:space="preserve">
          <source>ECMAScript 8 adds &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;&lt;code&gt;Object.entries()&lt;/code&gt;&lt;/a&gt; which avoids having to look up each value in the original object:</source>
          <target state="translated">ECMAScript 8 добавляет &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt; &lt;code&gt;Object.entries()&lt;/code&gt; &lt;/a&gt; что позволяет избежать необходимости искать каждое значение в исходном объекте:</target>
        </trans-unit>
        <trans-unit id="f8e737a86e92eea815b3daf94f21793951fb689b" translate="yes" xml:space="preserve">
          <source>ES2017 will include &lt;code&gt;Object.entries&lt;/code&gt; which will make iterating over &lt;code&gt;[key, value]&lt;/code&gt; pairs in objects even more easier. It is now known that it will be a part of a standard according to the &lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;ts39&lt;/a&gt; stage information.</source>
          <target state="translated">ES2017 будет включать &lt;code&gt;Object.entries&lt;/code&gt; , что сделает итерацию по парам &lt;code&gt;[key, value]&lt;/code&gt; в объектах еще проще. Теперь известно, что он будет частью стандарта в соответствии с информацией о стадии &lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;ts39&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Расширить фрагмент</target>
        </trans-unit>
        <trans-unit id="cf8fd5dacacd6e6d99426d454618e6efc71eb3cf" translate="yes" xml:space="preserve">
          <source>Extend Implementations</source>
          <target state="translated">Расширение Осуществление</target>
        </trans-unit>
        <trans-unit id="9ad3df9ebcbaddf889827bce6d56caa2706bfaf9" translate="yes" xml:space="preserve">
          <source>For old browser you have &lt;a href=&quot;http://tokenposts.blogspot.com.au/2012/04/javascript-objectkeys-browser.html&quot;&gt;simple&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;full&lt;/a&gt; polyfill</source>
          <target state="translated">Для старого браузера у вас есть &lt;a href=&quot;http://tokenposts.blogspot.com.au/2012/04/javascript-objectkeys-browser.html&quot;&gt;простой&lt;/a&gt; и &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;полный&lt;/a&gt; polyfill</target>
        </trans-unit>
        <trans-unit id="0bf13115eababbf2f614dc6364e0f23888e54c77" translate="yes" xml:space="preserve">
          <source>For those people who don't like the &quot;&lt;em&gt;for ... in&lt;/em&gt;&quot;-method:</source>
          <target state="translated">Для тех людей, которые не любят метод &quot; &lt;em&gt;для ... в&lt;/em&gt; &quot;:</target>
        </trans-unit>
        <trans-unit id="2268f901152e3f2d05e1c2ec2e3c22c82039761d" translate="yes" xml:space="preserve">
          <source>Generally all described methods have the same behaviour with any supplied objects. Besides using native &lt;code&gt;for..in&lt;/code&gt; loop will usually be &lt;em&gt;faster&lt;/em&gt; than any abstraction, such as &lt;code&gt;jQuery.each()&lt;/code&gt;, these methods are considerably easier to use, require less coding and provide better error handling.</source>
          <target state="translated">Как правило, все описанные методы имеют одинаковое поведение с любыми предоставленными объектами. Помимо использования встроенного цикла &lt;code&gt;for..in&lt;/code&gt; , как правило, будет &lt;em&gt;быстрее,&lt;/em&gt; чем любая абстракция, такая как &lt;code&gt;jQuery.each()&lt;/code&gt; , эти методы значительно проще в использовании, требуют меньше кодирования и обеспечивают лучшую обработку ошибок.</target>
        </trans-unit>
        <trans-unit id="3192335d6b047d6820b956a2f7d3d5ce3e4fb3bb" translate="yes" xml:space="preserve">
          <source>Here in 2018, your options for looping through an object's properties are (some examples follow the list):</source>
          <target state="translated">Здесь,в 2018 году,у вас есть возможность пройти петлю через свойства объекта (некоторые примеры следуют за списком):</target>
        </trans-unit>
        <trans-unit id="3600b23783a6ba3cad6df777ebfcbdec4cb1fb02" translate="yes" xml:space="preserve">
          <source>Here is another method to iterate through an object.</source>
          <target state="translated">Вот еще один метод итерации через объект.</target>
        </trans-unit>
        <trans-unit id="d44521d61b9dbb64a50448918809bc483ebcd927" translate="yes" xml:space="preserve">
          <source>Hope It helped someone.</source>
          <target state="translated">Надеюсь,это кому-то помогло.</target>
        </trans-unit>
        <trans-unit id="a70a77f4df60b00dbf4761fecee7e8eaf9d4703e" translate="yes" xml:space="preserve">
          <source>How do I loop through or enumerate a JavaScript object</source>
          <target state="translated">Как прокрутить или перечислить объект JavaScript</target>
        </trans-unit>
        <trans-unit id="4962635faad77468226beef9f94be30feb4bc4f4" translate="yes" xml:space="preserve">
          <source>I can modify the JavaScript object if necessary. My ultimate goal is to loop through some key value pairs and if possible I want to avoid using &lt;code&gt;eval&lt;/code&gt;.</source>
          <target state="translated">Я могу изменить объект JavaScript, если это необходимо. Моя конечная цель - пройтись по нескольким парам ключ-значение, и, если возможно, я хочу избежать использования &lt;code&gt;eval&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="518b880018aedfc7045e2d34af28d36b3ffcb649" translate="yes" xml:space="preserve">
          <source>I have a JavaScript object like the following:</source>
          <target state="translated">У меня есть объект JavaScript,как показано ниже:</target>
        </trans-unit>
        <trans-unit id="7aae5d3e79c225ee3d26350be843bb10799d7f06" translate="yes" xml:space="preserve">
          <source>I think it is time to update my answer to let it became even more fresher than it's now.</source>
          <target state="translated">Я думаю,что пришло время обновить свой ответ,чтобы он стал еще свежее,чем сейчас.</target>
        </trans-unit>
        <trans-unit id="0a4080da4ca8055bce77c174c9c6711488472b3c" translate="yes" xml:space="preserve">
          <source>I would do this rather than checking &lt;code&gt;obj.hasOwnerProperty&lt;/code&gt; within every &lt;code&gt;for ... in&lt;/code&gt; loop.</source>
          <target state="translated">Я бы сделал это вместо того, чтобы проверять &lt;code&gt;obj.hasOwnerProperty&lt;/code&gt; в каждом цикле &lt;code&gt;for ... in&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3854436e5e74dbacd9d3d55f9f6c2ddc431c9223" translate="yes" xml:space="preserve">
          <source>If anybody needs to loop through &lt;strong&gt;arrayObjects with condition&lt;/strong&gt;:</source>
          <target state="translated">Если кому-то нужно &lt;strong&gt;перебрать arrayObjects с условием&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="81b25a043bef98723984fe9cc8d2b96c70e6ec81" translate="yes" xml:space="preserve">
          <source>If you don't want to get conflicts with other forEach-Methods you can name it with your unique name.</source>
          <target state="translated">Если вы не хотите конфликтов с другими forEach-Методами,вы можете назвать его своим уникальным именем.</target>
        </trans-unit>
        <trans-unit id="4d52c429155b878272be6a80be52e5d6ad0a333c" translate="yes" xml:space="preserve">
          <source>If you want &lt;strong&gt;all&lt;/strong&gt; of an object's properties, including non-enumerable inherited ones, you need to use a loop and &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; [&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf&quot;&gt;MDN&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.getprototypeof&quot;&gt;spec&lt;/a&gt;] and use &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;, &lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;, or &lt;code&gt;Reflect.ownKeys&lt;/code&gt; on each object in the prototype chain (example at the bottom of this answer).</source>
          <target state="translated">Если вам нужны &lt;strong&gt;все&lt;/strong&gt; свойства объекта, включая не перечисляемые наследуемые, вам нужно использовать цикл и &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; [ &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf&quot;&gt;MDN&lt;/a&gt; , &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.getprototypeof&quot;&gt;spec&lt;/a&gt; ] и использовать &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt; , &lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt; или &lt;code&gt;Reflect.ownKeys&lt;/code&gt; для каждого объекта в цепочка прототипов (пример внизу этого ответа).</target>
        </trans-unit>
        <trans-unit id="e064bea268f729cfd8e9b622bb27d0d02946c767" translate="yes" xml:space="preserve">
          <source>If you want to iterate over &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#Enumerable_attribute&quot;&gt;non-enumerable properties&lt;/a&gt;&lt;/strong&gt; as well, you can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames(obj)&lt;/code&gt;&lt;/a&gt; to return an array of all properties (enumerable or not) found directly upon a given object.</source>
          <target state="translated">Если вы хотите перебрать и &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#Enumerable_attribute&quot;&gt;не перечисляемые свойства&lt;/a&gt;&lt;/strong&gt; , вы можете использовать &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames&quot;&gt; &lt;code&gt;Object.getOwnPropertyNames(obj)&lt;/code&gt; &lt;/a&gt; чтобы вернуть массив всех свойств (перечисляемых или нет), найденных непосредственно в данном объекте.</target>
        </trans-unit>
        <trans-unit id="0f6358b4744c76d0b63e5ea4860e57dd30d61fc8" translate="yes" xml:space="preserve">
          <source>If you work with &lt;strong&gt;jQuery&lt;/strong&gt;, you may use &lt;a href=&quot;http://api.jquery.com/jQuery.each/&quot;&gt;&lt;code&gt;jQuery.each()&lt;/code&gt;&lt;/a&gt; method. It can be used to seamlessly iterate over both objects and arrays:</source>
          <target state="translated">Если вы работаете с &lt;strong&gt;jQuery&lt;/strong&gt; , вы можете использовать &lt;a href=&quot;http://api.jquery.com/jQuery.each/&quot;&gt; &lt;code&gt;jQuery.each()&lt;/code&gt; &lt;/a&gt; . Его можно использовать для беспроблемной итерации как по объектам, так и по массивам:</target>
        </trans-unit>
        <trans-unit id="3f897e5ce6ceaf2b1f2ce70c631d9cebac75e9cf" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;Underscore.js&lt;/strong&gt; you can find method &lt;a href=&quot;http://underscorejs.org/#each&quot;&gt;&lt;code&gt;_.each()&lt;/code&gt;&lt;/a&gt;, which iterates over a list of elements, yielding each in turn to a supplied function (pay attention to the order of arguments in &lt;em&gt;iteratee&lt;/em&gt; function!):</source>
          <target state="translated">В &lt;strong&gt;Underscore.js&lt;/strong&gt; вы можете найти метод &lt;a href=&quot;http://underscorejs.org/#each&quot;&gt; &lt;code&gt;_.each()&lt;/code&gt; &lt;/a&gt; , который выполняет итерацию по списку элементов, передавая каждый из них по очереди предоставленной функции (обратите внимание на порядок аргументов в функции &lt;em&gt;iteratee&lt;/em&gt; !):</target>
        </trans-unit>
        <trans-unit id="2d20cf1ada379d6e39f32c37a72028e9238c013f" translate="yes" xml:space="preserve">
          <source>In ECMAScript 5 you have new approach in iteration fields of literal - &lt;code&gt;Object.keys&lt;/code&gt;</source>
          <target state="translated">В ECMAScript 5 у вас есть новый подход в полях итераций литерала - &lt;code&gt;Object.keys&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="63c7274ad3c87fa15ab98b9cce65eea76c9a19fd" translate="yes" xml:space="preserve">
          <source>In ES6 we have well-known symbols to expose some previously internal methods, you can use it to define how iterators work for this object:</source>
          <target state="translated">В ES6 у нас есть хорошо известные символы для разоблачения некоторых ранее внутренних методов,вы можете использовать их для определения того,как итераторы работают для этого объекта:</target>
        </trans-unit>
        <trans-unit id="4e1fdbb2aaaf6c0ad99feef360af0adf0a7ed96a" translate="yes" xml:space="preserve">
          <source>In fact, with this shim, if you still wanted to take advantage of Map's other functionality (without shimming them all in) but still wanted to use the neat object notation, since objects are now iterable you can now just make a Map from it!</source>
          <target state="translated">На самом деле,с этой прокладкой,если вы все еще хотите воспользоваться другой функциональностью Map (без прокладки их всех),но все еще хотите использовать аккуратную нотацию объектов,так как объекты теперь итерабельны,вы можете просто сделать из них карту!</target>
        </trans-unit>
        <trans-unit id="439b07330c042796d437d89c30acfaa93b3e4fe9" translate="yes" xml:space="preserve">
          <source>In latest ES script, you can do something like this:</source>
          <target state="translated">В последнем сценарии ES,вы можете сделать что-то подобное:</target>
        </trans-unit>
        <trans-unit id="b8f340ce3b448e2f38cbaf0946576afd1c5832b1" translate="yes" xml:space="preserve">
          <source>In my Firefox I have following results</source>
          <target state="translated">В моей Firefox у меня есть следующие результаты</target>
        </trans-unit>
        <trans-unit id="f91575a8eebebd143c3dcd78381f6c6cf67dd7be" translate="yes" xml:space="preserve">
          <source>It's interesting people in these answers have touched on both &lt;code&gt;Object.keys()&lt;/code&gt; and &lt;code&gt;for...of&lt;/code&gt; but never combined them:</source>
          <target state="translated">Интересно, что люди в этих ответах касались как &lt;code&gt;Object.keys()&lt;/code&gt; и &lt;code&gt;for...of&lt;/code&gt; но никогда не объединяли их:</target>
        </trans-unit>
        <trans-unit id="6791e0260346d559f245d4a88a53a01351732e2d" translate="yes" xml:space="preserve">
          <source>Let's we have &lt;code&gt;book&lt;/code&gt; object.</source>
          <target state="translated">Давайте у нас есть объект &lt;code&gt;book&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a707aa190f760150c8ff8256bff3171e748227a0" translate="yes" xml:space="preserve">
          <source>Like:</source>
          <target state="translated">Like:</target>
        </trans-unit>
        <trans-unit id="98e4701c0ce58626eabd986c3ab94ed192ef3071" translate="yes" xml:space="preserve">
          <source>Loops can be pretty interesting when using pure JavaScript. It seems that only ECMA6 (New 2015 JavaScript specification) got the loops under control. Unfortunately as I'm writing this, both Browsers and popular Integrated development environment (IDE) are still struggling to support completely the new bells and whistles.</source>
          <target state="translated">Петли могут быть довольно интересны при использовании чистого JavaScript.Похоже,что только ECMA6 (спецификация JavaScript New 2015)получила контроль над петлями.К сожалению,пока я пишу это,как Браузеры,так и популярная Integrated Development Environment (IDE)все еще пытаются полностью поддерживать новые колокольчики и свистки.</target>
        </trans-unit>
        <trans-unit id="13e7186984f9711a8852f884dfd2f7ae96b20b3f" translate="yes" xml:space="preserve">
          <source>MDN DOCS Object.values()</source>
          <target state="translated">MDN DOCS Object.values()</target>
        </trans-unit>
        <trans-unit id="c33ee070c0554e63382502c3b891cc91bc88f40b" translate="yes" xml:space="preserve">
          <source>More information you can see on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;MDN&lt;/a&gt;</source>
          <target state="translated">Больше информации вы можете увидеть на &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;MDN&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8ce2cf512eb2d280fcb6e6a8408306774abf7584" translate="yes" xml:space="preserve">
          <source>My choice is below as a faster solution in current versions of browsers (Chrome30, IE10, FF25)</source>
          <target state="translated">Мой выбор ниже в качестве более быстрого решения в текущих версиях браузеров (Chrome30,IE10,FF25).</target>
        </trans-unit>
        <trans-unit id="9283e1080a0ba71402309d9223ad40bc03462179" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;key&lt;/code&gt; will not take on the value of the property, it's just an index value.</source>
          <target state="translated">Обратите внимание, что &lt;code&gt;key&lt;/code&gt; не будет принимать значение свойства, это просто значение индекса.</target>
        </trans-unit>
        <trans-unit id="c478e37ee66a6eba87efd093d99010af9d03a121" translate="yes" xml:space="preserve">
          <source>Note that most browsers won't support the code above as of June 18th 2016. Even in Chrome you need to enable this special flag for it to work: &lt;code&gt;chrome://flags/#enable-javascript-harmony&lt;/code&gt;</source>
          <target state="translated">Обратите внимание, что большинство браузеров не будут поддерживать приведенный выше код по состоянию на 18 июня 2016 года. Даже в Chrome необходимо включить этот специальный флаг, чтобы он работал: &lt;code&gt;chrome://flags/#enable-javascript-harmony&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="512c928855a3a4800967b483956e8c6009db237a" translate="yes" xml:space="preserve">
          <source>Note: you can do this over arrays, but you'll iterate over the &lt;code&gt;length&lt;/code&gt; and other properties, too.</source>
          <target state="translated">Примечание: вы можете делать это над массивами, но вы будете перебирать и &lt;code&gt;length&lt;/code&gt; и другие свойства.</target>
        </trans-unit>
        <trans-unit id="dc8ff6e94fd31b05b3bd0d0a7bbbe0463493bea0" translate="yes" xml:space="preserve">
          <source>Notice the use of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;&lt;code&gt;for-of&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt;&lt;code&gt;for-in&lt;/code&gt;&lt;/a&gt;, if not used it will return undefined on named properties, and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt; ensures the use of only the object's own properties without the whole prototype-chain properties</source>
          <target state="translated">Обратите внимание на использование &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt; &lt;code&gt;for-of&lt;/code&gt; &lt;/a&gt; вместо &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt; &lt;code&gt;for-in&lt;/code&gt; &lt;/a&gt; , если он не используется, он вернет undefined для именованных свойств, а &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt; &lt;code&gt;Object.keys()&lt;/code&gt; &lt;/a&gt; обеспечивает использование только собственных свойств объекта без целых свойств цепочки прототипов.</target>
        </trans-unit>
        <trans-unit id="a1c26ca5b91d4a51f8174e0bc4f8e68ec7cdcc94" translate="yes" xml:space="preserve">
          <source>Now I want to loop through all &lt;code&gt;p&lt;/code&gt; elements (&lt;code&gt;p1&lt;/code&gt;, &lt;code&gt;p2&lt;/code&gt;, &lt;code&gt;p3&lt;/code&gt;...) And get their keys and values. How can I do that?</source>
          <target state="translated">Теперь я хочу пройтись по всем элементам &lt;code&gt;p&lt;/code&gt; ( &lt;code&gt;p1&lt;/code&gt; , &lt;code&gt;p2&lt;/code&gt; , &lt;code&gt;p3&lt;/code&gt; ...) и получить их ключи и значения. Как я могу это сделать?</target>
        </trans-unit>
        <trans-unit id="7ea052b7cd7dd8fe0b68bae7e15db15d394b4554" translate="yes" xml:space="preserve">
          <source>Now you can just call it as an ordinary function, nothing else is affected</source>
          <target state="translated">Теперь ты можешь просто назвать это обычной функцией,больше ни на что не повлияет.</target>
        </trans-unit>
        <trans-unit id="f8fe217f1f92ae27a4182945fcd57151d97a8b18" translate="yes" xml:space="preserve">
          <source>Now, you can simple call:</source>
          <target state="translated">Теперь ты можешь просто позвонить:</target>
        </trans-unit>
        <trans-unit id="4911ec574e940846f79565123dd16e79b73fa664" translate="yes" xml:space="preserve">
          <source>Nowadays many well known JavaScript libraries provide their own methods for iterating over collections, i.e. over &lt;em&gt;arrays&lt;/em&gt;, &lt;em&gt;objects&lt;/em&gt;, and &lt;em&gt;array-like objects&lt;/em&gt;. These methods are convenient to use and are entirely compatible with any browser.</source>
          <target state="translated">В настоящее время многие хорошо известные библиотеки JavaScript предоставляют свои собственные методы для перебора коллекций, то есть &lt;em&gt;массивов&lt;/em&gt; , &lt;em&gt;объектов&lt;/em&gt; и &lt;em&gt;объектов&lt;/em&gt; , &lt;em&gt;подобных&lt;/em&gt; &lt;em&gt;массивам&lt;/em&gt; . Эти методы удобны в использовании и полностью совместимы с любым браузером.</target>
        </trans-unit>
        <trans-unit id="629350d753d476936775753f4a2c85036cbe029a" translate="yes" xml:space="preserve">
          <source>Object keys iteration</source>
          <target state="translated">Итерация клавиш объектов</target>
        </trans-unit>
        <trans-unit id="7e52410ffda30839d3fcb0ba5a2e71cf9dcfbcb1" translate="yes" xml:space="preserve">
          <source>Object properties can be &lt;em&gt;enumerable&lt;/em&gt; or &lt;em&gt;non-enumerable&lt;/em&gt;. Non-enumerable properties are left out of lots of property enumerations/arrays.</source>
          <target state="translated">Свойства объекта могут быть &lt;em&gt;перечисляемыми&lt;/em&gt; или &lt;em&gt;не перечисляемыми&lt;/em&gt; . Не перечисляемые свойства исключаются из множества перечислений / массивов свойств.</target>
        </trans-unit>
        <trans-unit id="22994f821def1dd2970557b55c917d3dfde9d7b8" translate="yes" xml:space="preserve">
          <source>Object properties can be &lt;em&gt;own&lt;/em&gt; (the property is on the object itself) or &lt;em&gt;inherited&lt;/em&gt; (not on the object itself, on one of its prototypes).</source>
          <target state="translated">Свойства объекта могут быть &lt;em&gt;собственными&lt;/em&gt; (свойство находится на самом объекте) или &lt;em&gt;наследоваться&lt;/em&gt; (не на самом объекте, на одном из его прототипов).</target>
        </trans-unit>
        <trans-unit id="be1c89ae8f0ef034137eab5e3b5a95b39860d1ac" translate="yes" xml:space="preserve">
          <source>Object.keys approach took 40.21101451665163 milliseconds.</source>
          <target state="translated">Подход Object.key занял 40.21101451665163 миллисекунд.</target>
        </trans-unit>
        <trans-unit id="5686d9a694d8bcf58a2ec40ae647cbc33eb4e0e4" translate="yes" xml:space="preserve">
          <source>Object.keys(obj) : Array</source>
          <target state="translated">Object.keys(obj):Массив</target>
        </trans-unit>
        <trans-unit id="9bd98e631eeca19ad778683f0b597ef60c3d91d2" translate="yes" xml:space="preserve">
          <source>Ok here is a code:</source>
          <target state="translated">Хорошо,вот код:</target>
        </trans-unit>
        <trans-unit id="48821ddde845a8127856b5197412d3e9b98d849f" translate="yes" xml:space="preserve">
          <source>Only JavaScript code without dependencies:</source>
          <target state="translated">Только JavaScript-код без зависимостей:</target>
        </trans-unit>
        <trans-unit id="1fc344e92e022043d22ed9f86b1ba91fec95875c" translate="yes" xml:space="preserve">
          <source>Or if you know the power of ES6 &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/function*&quot;&gt;generators&lt;/a&gt;, so you certainly can make the code above much shorter.</source>
          <target state="translated">Или, если вы знаете мощность &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/function*&quot;&gt;генераторов&lt;/a&gt; ES6, вы наверняка сможете сделать приведенный выше код намного короче.</target>
        </trans-unit>
        <trans-unit id="4c5e92a1bdcfc9b09bb1412b1c5936ad6f1f5dbe" translate="yes" xml:space="preserve">
          <source>Or you can use &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;destructuring&lt;/a&gt; assignment:</source>
          <target state="translated">Или вы можете использовать назначение &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;деструктурирования&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="a3cdf0ea02f23eab1dafc7dfa0f6225f546d3bb5" translate="yes" xml:space="preserve">
          <source>PS. on Chrome the difference even bigger &lt;a href=&quot;http://codepen.io/dsheiko/pen/JdrqXa&quot;&gt;http://codepen.io/dsheiko/pen/JdrqXa&lt;/a&gt;</source>
          <target state="translated">PS. на Chrome разница еще больше &lt;a href=&quot;http://codepen.io/dsheiko/pen/JdrqXa&quot;&gt;http://codepen.io/dsheiko/pen/JdrqXa&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9a7d963cb944872745e42eebdfeb267c1df5c1bf" translate="yes" xml:space="preserve">
          <source>PS2: In ES6 (EcmaScript 2015) you can iterate iterable object nicer:</source>
          <target state="translated">PS2:В ES6 (EcmaScript 2015)вы можете выполнить итерацию более красивых итерабельных объектов:</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="ad5f5605ae02a7ee104521831414d243db1ba749" translate="yes" xml:space="preserve">
          <source>Performance tests was performed for</source>
          <target state="translated">Были проведены тесты производительности для</target>
        </trans-unit>
        <trans-unit id="d5f737ce74fd4e194d4acc8a93050d00e0d3a46c" translate="yes" xml:space="preserve">
          <source>Preface:</source>
          <target state="translated">Preface:</target>
        </trans-unit>
        <trans-unit id="e51f130523ffae59f445c83fb99c53b717a2112b" translate="yes" xml:space="preserve">
          <source>Property names can be strings or Symbols. Properties whose names are Symbols are left out of lots of property enumerations/arrays.</source>
          <target state="translated">Названия свойств могут быть как строками,так и символами.Свойства,названия которых являются символами,не включаются во многие перечисления свойств.</target>
        </trans-unit>
        <trans-unit id="4bcb4e163bf193fe874c35e7a1a754e4ed2bd51c" translate="yes" xml:space="preserve">
          <source>Show code snippet</source>
          <target state="translated">Показать фрагмент кода</target>
        </trans-unit>
        <trans-unit id="ccd8d63992692c4fb1b10a7b977cc306b7a354db" translate="yes" xml:space="preserve">
          <source>Since es2015 is getting more and more popular I am posting this answer which include usage of generator and iterator to smoothly iterate through &lt;code&gt;[key, value]&lt;/code&gt; pairs. As it is possible in other languages for instance Ruby.</source>
          <target state="translated">Поскольку es2015 становится все более популярным, я публикую этот ответ, который включает использование генератора и итератора для плавного перебора пар &lt;code&gt;[key, value]&lt;/code&gt; . Как это возможно в других языках, например, Ruby.</target>
        </trans-unit>
        <trans-unit id="7fd310e39b9c5384f400f2a00d5e814ddeb587d8" translate="yes" xml:space="preserve">
          <source>Since plain JS object isn't &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;iterable&lt;/a&gt; just out of box, we aren't able to use &lt;code&gt;for..of&lt;/code&gt; loop for iterating over its content. But no one can stop us &lt;strong&gt;to make it iterable&lt;/strong&gt;.</source>
          <target state="translated">Так как обычный объект JS не может быть &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;повторен&lt;/a&gt; просто из коробки, мы не можем использовать цикл &lt;code&gt;for..of&lt;/code&gt; для перебора его содержимого. Но никто не может помешать нам &lt;strong&gt;сделать его итеративным&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="1426a0b62263371d020ccb96a30b630d270b2473" translate="yes" xml:space="preserve">
          <source>Since we've made it we can use it this way:</source>
          <target state="translated">С тех пор,как мы его сделали,мы можем использовать его таким образом:</target>
        </trans-unit>
        <trans-unit id="2dfdb00ae3e82ded6da686bffc206325c58d0800" translate="yes" xml:space="preserve">
          <source>So it gives the same list of keys as you intend by testing each object key with hasOwnProperty. You don't need that extra test operation than and &lt;code&gt;Object.keys( obj ).forEach(function( key ){})&lt;/code&gt; is supposed to be faster. Let's prove it:</source>
          <target state="translated">Таким образом, он дает тот же список ключей, что и вы, проверяя каждый ключ объекта с помощью hasOwnProperty. Вам не нужна эта дополнительная тестовая операция, а &lt;code&gt;Object.keys( obj ).forEach(function( key ){})&lt;/code&gt; должен быть быстрее. Давайте докажем это:</target>
        </trans-unit>
        <trans-unit id="4645d5a0a5468109c2f88c910e1e58294f6beb7c" translate="yes" xml:space="preserve">
          <source>So long as you include my shim below:</source>
          <target state="translated">При условии,что ты включишь мою шайбу внизу:</target>
        </trans-unit>
        <trans-unit id="5631c195805d78cb0d5be22d5f2c5a9ee8dc79d1" translate="yes" xml:space="preserve">
          <source>Sure, you can apply such behavior for all objects with making &lt;code&gt;Object&lt;/code&gt; iterable on &lt;code&gt;prototype&lt;/code&gt; level.</source>
          <target state="translated">Конечно, вы можете применить такое поведение ко всем объектам, сделав &lt;code&gt;Object&lt;/code&gt; итерируемым на уровне &lt;code&gt;prototype&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9448e2a156ab791737a33c4161a27378a271d13f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object.keys()&lt;/code&gt; method returns an array of a given object's own enumerable properties. Read more about it &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">Метод &lt;code&gt;Object.keys()&lt;/code&gt; возвращает массив собственных перечисляемых свойств данного объекта. Подробнее об этом читайте &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;здесь&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="68bedeb904864bc6eac4936194bfc1432a121a4d" translate="yes" xml:space="preserve">
          <source>The question won't be complete if we don't mention about alternative methods for looping through objects.</source>
          <target state="translated">Вопрос не будет полным,если не упомянуть об альтернативных методах петлевания через объекты.</target>
        </trans-unit>
        <trans-unit id="707d8f25499ef81c0afd56a2467cd54972a9756d" translate="yes" xml:space="preserve">
          <source>There's no reason why that wouldn't work.</source>
          <target state="translated">Нет причин,по которым это не сработает.</target>
        </trans-unit>
        <trans-unit id="2a2aa295e2f8f8018137cbb4a177ff7f8b5f104f" translate="yes" xml:space="preserve">
          <source>Therefore, when using for-in loops, always make use of the &lt;code&gt;hasOwnProperty&lt;/code&gt; method to determine if the current property in iteration is really a property of the object you're checking on:</source>
          <target state="translated">Поэтому при использовании циклов for-in всегда используйте метод &lt;code&gt;hasOwnProperty&lt;/code&gt; , чтобы определить, действительно ли текущее свойство в итерации является свойством объекта, который вы проверяете:</target>
        </trans-unit>
        <trans-unit id="6573ff7791abb12235eaf772c627e522459492a8" translate="yes" xml:space="preserve">
          <source>Today 2020.03.06 I perform tests of chosen solutions on Chrome v80.0, Safari v13.0.5 and Firefox 73.0.1 on MacOs High Sierra v10.13.6</source>
          <target state="translated">Сегодня 2020.03.06 я провожу тестирование выбранных решений на версиях Chrome v80.0,Safari v13.0.5 и Firefox 73.0.1 на MacOs High Sierra v10.13.6.</target>
        </trans-unit>
        <trans-unit id="b7fdbc9f9f0e814bb215987071150223e78ef8b9" translate="yes" xml:space="preserve">
          <source>Under ECMAScript 5, you can combine &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;&lt;code&gt;Array.prototype.forEach()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">В ECMAScript 5 вы можете объединить &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt; &lt;code&gt;Object.keys()&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt; &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="fba73f56e7147c5069eb5bb50bfaa3827fd326bf" translate="yes" xml:space="preserve">
          <source>Until this becomes the new standard, the old method can still be used but there are also alternatives in popular libraries or even &lt;a href=&quot;https://github.com/nbouvrette/forEach&quot;&gt;lightweight alternatives&lt;/a&gt; for those who aren't using any of these libraries.</source>
          <target state="translated">Пока это не станет новым стандартом, старый метод все еще может использоваться, но в популярных библиотеках также есть альтернативы или даже &lt;a href=&quot;https://github.com/nbouvrette/forEach&quot;&gt;облегченные альтернативы&lt;/a&gt; для тех, кто не использует ни одну из этих библиотек.</target>
        </trans-unit>
        <trans-unit id="d2223bf1aacb8d79e11777d0049d9e90a5b8f254" translate="yes" xml:space="preserve">
          <source>Welcome to the future.</source>
          <target state="translated">Добро пожаловать в будущее.</target>
        </trans-unit>
        <trans-unit id="cc674edcf6e433a211df7e9e557f550332aec2a1" translate="yes" xml:space="preserve">
          <source>With all of them except &lt;code&gt;for-in&lt;/code&gt;, you'd use some kind of looping construct on the array (&lt;code&gt;for&lt;/code&gt;, &lt;code&gt;for-of&lt;/code&gt;, &lt;code&gt;forEach&lt;/code&gt;, etc.).</source>
          <target state="translated">Со всеми из них, кроме &lt;code&gt;for-in&lt;/code&gt; , вы бы использовали некоторую циклическую конструкцию массива ( &lt;code&gt;for&lt;/code&gt; , &lt;code&gt;for-of&lt;/code&gt; , &lt;code&gt;forEach&lt;/code&gt; и т. Д.)</target>
        </trans-unit>
        <trans-unit id="1c0d75033729d34abf569f3b3ddaf6a1bdbed218" translate="yes" xml:space="preserve">
          <source>Without having to create a real Map object that doesn't have the nice syntactic sugar.</source>
          <target state="translated">Без необходимости создания реального объекта Map,у которого нет хорошего синтаксического сахара.</target>
        </trans-unit>
        <trans-unit id="2afea76e635096801d93bc41fb6a5536f18c15fa" translate="yes" xml:space="preserve">
          <source>You can add a simple &lt;em&gt;forEach&lt;/em&gt; function to all objects, so you can automatically loop through any object:</source>
          <target state="translated">Вы можете добавить простую &lt;em&gt;функцию forEach&lt;/em&gt; ко всем объектам, чтобы вы могли автоматически перебирать любой объект:</target>
        </trans-unit>
        <trans-unit id="d8e306872c5b3d04ad61153a998ec79ee2e2e06f" translate="yes" xml:space="preserve">
          <source>You can also use Object.keys() and iterate over the object keys like below to get the value:</source>
          <target state="translated">Вы также можете использовать Object.keys()и выполнить итерацию по объектным ключам,как показано ниже,чтобы получить значение:</target>
        </trans-unit>
        <trans-unit id="9df7817cd06171f45a723354756f26620f580de5" translate="yes" xml:space="preserve">
          <source>You can check out &lt;a href=&quot;http://www.es6fiddle.net/isksh68n/&quot;&gt;&lt;strong&gt;JSFiddle&lt;/strong&gt;&lt;/a&gt; with all code I've provided above.</source>
          <target state="translated">Вы можете проверить &lt;a href=&quot;http://www.es6fiddle.net/isksh68n/&quot;&gt;&lt;strong&gt;JSFiddle&lt;/strong&gt;&lt;/a&gt; со всем кодом, который я предоставил выше.</target>
        </trans-unit>
        <trans-unit id="f092bb3d231117e16875d827dbcb4f592ee6ddd3" translate="yes" xml:space="preserve">
          <source>You can combine &lt;code&gt;for...of&lt;/code&gt;, destructuring, and &lt;code&gt;Object.entries&lt;/code&gt;:</source>
          <target state="translated">Вы можете объединить &lt;code&gt;for...of&lt;/code&gt; , destructuring и &lt;code&gt;Object.entries&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="5835361bd2e75d290192b51cf230550d40991036" translate="yes" xml:space="preserve">
          <source>You can compare performance of this approach with different implementations on &lt;a href=&quot;http://jsperf.com/&quot;&gt;jsperf.com&lt;/a&gt;:</source>
          <target state="translated">Вы можете сравнить производительность этого подхода с различными реализациями на &lt;a href=&quot;http://jsperf.com/&quot;&gt;jsperf.com&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="07ea959fb6adebc978c0f011c09d6fbb38b48283" translate="yes" xml:space="preserve">
          <source>You can find more about usage on
&lt;a href=&quot;https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;MDN&lt;/a&gt; page</source>
          <target state="translated">Вы можете найти больше информации об использовании на странице &lt;a href=&quot;https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;MDN.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b39c85fe2996ce2b1cb62746063fa3f6b9c3aea2" translate="yes" xml:space="preserve">
          <source>You can just iterate over it like:</source>
          <target state="translated">Ты можешь просто пережить это,как:</target>
        </trans-unit>
        <trans-unit id="e2bacd14cdcb3c8381ec25749f21eb003ffda72a" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt;&lt;code&gt;for-in&lt;/code&gt;&lt;/a&gt; loop as shown by others. However, you also have to make sure that the key you get is an actual property of an object, and doesn't come from the prototype.</source>
          <target state="translated">Вы можете использовать цикл &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt; &lt;code&gt;for-in&lt;/code&gt; ,&lt;/a&gt; как показано другими. Однако вы также должны убедиться, что ключ, который вы получаете, является фактическим свойством объекта и не берется из прототипа.</target>
        </trans-unit>
        <trans-unit id="40252eae4706cceffc619189db0a17d754ce42ed" translate="yes" xml:space="preserve">
          <source>You have to use the &lt;strong&gt;for-in loop&lt;/strong&gt;</source>
          <target state="translated">Вы должны использовать &lt;strong&gt;цикл for-in&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6730e3f19253e5d08b76d3651b7182a3df338152" translate="yes" xml:space="preserve">
          <source>and for keys ( allready answerd before me here )</source>
          <target state="translated">и для ключей(уже ответил передо мной )</target>
        </trans-unit>
        <trans-unit id="7a947b3af5f007df2c90a38c8e173c0e9affdfa7" translate="yes" xml:space="preserve">
          <source>for...in/hasOwnProperty approach took 98.26163508463651 milliseconds.</source>
          <target state="translated">за...внутрихозяйственный подход занял 98,26163508463651 миллисекунд.</target>
        </trans-unit>
        <trans-unit id="1dad84041e1f4a1ac2b61ea3b839a03f52f00ebd" translate="yes" xml:space="preserve">
          <source>it return the an array of the object values and it not extract values from Prototype!!</source>
          <target state="translated">он возвращает массив значений объектов,а не извлекает значения из Prototype!!!</target>
        </trans-unit>
        <trans-unit id="68be3091c9ded638c69cfcfde91d5f8203202b2c" translate="yes" xml:space="preserve">
          <source>object literal iteration</source>
          <target state="translated">буквальная итерация объекта</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="8972d45f7e8c1e4586030e6383fab869625b067e" translate="yes" xml:space="preserve">
          <source>performance comparison for all most popular cases in this question on &lt;code&gt;perfjs.info&lt;/code&gt;:</source>
          <target state="translated">Сравнение производительности для всех самых популярных случаев в этом вопросе на &lt;code&gt;perfjs.info&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4e4ac781c74f3de12b85437e0ce21526690c5030" translate="yes" xml:space="preserve">
          <source>retrieves all string-valued keys of all enumerable own (non-inherited) properties.</source>
          <target state="translated">извлекает все ключи,имеющие строковую ценность,из всех бесчисленных собственных (не унаследованных)свойств.</target>
        </trans-unit>
        <trans-unit id="9d3fd172d54a8a1b0e808b84e2f2068fcff097b0" translate="yes" xml:space="preserve">
          <source>since ES06 you can get the values of an object as array with</source>
          <target state="translated">Начиная с ES06,вы можете получить значения объекта в виде массива с помощью параметра</target>
        </trans-unit>
        <trans-unit id="ba86877b9e6415b124321f46f5e12940e8b3aa72" translate="yes" xml:space="preserve">
          <source>small object - with 3 fields - you can perform test on your machine &lt;a href=&quot;https://jsbench.me/wok7em87k8/1&quot;&gt;HERE&lt;/a&gt;</source>
          <target state="translated">маленький объект - с 3 полями - вы можете выполнить тест на своем компьютере &lt;a href=&quot;https://jsbench.me/wok7em87k8/1&quot;&gt;ЗДЕСЬ&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8b00365aaf30d8e7d329d80bbae34538a7af63af" translate="yes" xml:space="preserve">
          <source>solution C is slow for big objects and medium-slow for small objects</source>
          <target state="translated">решение C медленно для больших объектов и средне-медленно для малых объектов</target>
        </trans-unit>
        <trans-unit id="5929799c0c51a9fbea02779e3db64be6923384d9" translate="yes" xml:space="preserve">
          <source>solutions based on &lt;code&gt;for-in&lt;/code&gt; (A,B) are fast (or fastest) for all browsers for big and small objects</source>
          <target state="translated">Решения на основе &lt;code&gt;for-in&lt;/code&gt; (A, B) являются быстрыми (или самыми быстрыми) для всех браузеров для больших и маленьких объектов.</target>
        </trans-unit>
        <trans-unit id="ad6295bc425c88fcc6cc0617c8f1752b188249be" translate="yes" xml:space="preserve">
          <source>solutions based on explicit index &lt;code&gt;i&lt;/code&gt; (J,K) are quite fast on all browsers for small objects (for firefox also fast for big ojbects but medium fast on other browsers)</source>
          <target state="translated">Решения, основанные на явном индексе &lt;code&gt;i&lt;/code&gt; (J, K), достаточно быстры во всех браузерах для небольших объектов (для Firefox также быстры для больших объектов, но средние в других браузерах)</target>
        </trans-unit>
        <trans-unit id="b68a11032c4c5524a6d469ea8b3201d777a3c20e" translate="yes" xml:space="preserve">
          <source>solutions based on iterators (D,E) are slowest and not recommended</source>
          <target state="translated">решения на основе итераторов (D,E)являются наиболее медленными и не рекомендованы к использованию</target>
        </trans-unit>
        <trans-unit id="6e650787270deb795dae97cbcb4d1880a0d37dc2" translate="yes" xml:space="preserve">
          <source>surprisingly &lt;code&gt;for-of&lt;/code&gt; (H) solution is fast on chrome for small and big objects</source>
          <target state="translated">Удивительно, что решение &lt;code&gt;for-of&lt;/code&gt; (H) быстро на хром для маленьких и больших объектов</target>
        </trans-unit>
        <trans-unit id="0f9f637f0ba1bb1c6606fd4a5d8bf3f034370d03" translate="yes" xml:space="preserve">
          <source>this will give the same result as using for...in es6 loop.</source>
          <target state="translated">это даст такой же результат,как и при использовании для...в цикле es6.</target>
        </trans-unit>
        <trans-unit id="d3bee068dc0d244e9d3ae4935d4bbc75483368a0" translate="yes" xml:space="preserve">
          <source>via &lt;strong&gt;prototype&lt;/strong&gt; with &lt;strong&gt;forEach()&lt;/strong&gt; which should skip the &lt;strong&gt;prototype chain&lt;/strong&gt; properties:</source>
          <target state="translated">через &lt;strong&gt;прототип&lt;/strong&gt; с помощью &lt;strong&gt;forEach (),&lt;/strong&gt; который должен пропустить свойства &lt;strong&gt;цепочки прототипов&lt;/strong&gt; :</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
