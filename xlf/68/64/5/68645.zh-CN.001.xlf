<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/68645">
    <body>
      <group id="68645">
        <trans-unit id="fb3c02b0eeef390bcce865c7e2bf9425d0a705bc" translate="yes" xml:space="preserve">
          <source>&quot;Static Variables&quot;</source>
          <target state="translated">&quot;静态变量&quot;</target>
        </trans-unit>
        <trans-unit id="923c98ff322c67bbf340c4c55101c705035e55fe" translate="yes" xml:space="preserve">
          <source>(NOTE: That is, unless a class instance decides to define its own version of &lt;code&gt;_i&lt;/code&gt;! But if someone decides to do THAT, they deserve what they get, don't they???)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（注意：也就是说，除非类实例决定定义自己的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;_i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;版本&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;！但是如果有人决定执行该操作，那么他们应得的是什么，不是吗？？？）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fe80505db325683081cb2b8043640419938dd054" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tryIt&lt;/code&gt; class represented the regular class we need to use.</source>
          <target state="translated">&lt;code&gt;tryIt&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类表示我们需要使用的常规类。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3fcc0a40b8d044e78f2de5ebaafc54bbbd2c37c5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Partial&lt;/em&gt; expected static variable behavior, i.e., syncing of the attribute between multiple instances (but &lt;strong&gt;not&lt;/strong&gt; with the class itself; see &quot;gotcha&quot; below), can be achieved by turning the class attribute into a property:</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以通过将class属性变成一个属性来实现&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;部分&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;预期的静态变量行为，即，多个实例之间的属性同步（但&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与类本身&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同步&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;；请参见下面的&amp;ldquo;陷阱&amp;rdquo;）：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ee3b9876fda717b971917c803e2fa0ae98ed95f8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;REAL, ACTUAL&lt;/em&gt; Static Variables - &lt;code&gt;Test.i == x.i&lt;/code&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;REAL，ACTUAL&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静态变量&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Test.i == x.i&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6c84779c986093e3848942ecefdbf373d3303ffd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Emulating static variable behavior of other languages using a metaclass&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用元类模拟其他语言的静态变量行为&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b75698168fab613d3f998ae1085b1c067132dfcd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Instance variables:&lt;/strong&gt; Variables that are related and accessed by instance of a class are instance variables.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实例变量：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与某个类的实例相关并访问的变量是实例变量。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bf79b0ce0a0e731516b8ad76a434185d5ed8f5db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Static Methods:&lt;/strong&gt; Similar to variables, static methods can be accessed directly using class Name. No need to create an instance.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静态方法：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与变量类似，可以使用Name类直接访问静态方法。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;无需创建实例。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e9355061a1a9a0a45aa77f0e192b893be52e2cbf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Static Variables :&lt;/strong&gt;
Variable declared at class level are called static variable which can be accessed directly using class name.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静态变量：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 在类级别声明的变量称为静态变量，可以使用类名称直接访问。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7b455eb0ee2a7eff8964d76d06c661454f8261d0" translate="yes" xml:space="preserve">
          <source>@Blair Conrad said static variables declared inside the class definition, but not inside a method are class or &quot;static&quot; variables:</source>
          <target state="translated">@Blair Conrad说,在类定义内部声明的静态变量是类或 &quot;静态 &quot;变量,但在方法内部没有声明的静态变量。</target>
        </trans-unit>
        <trans-unit id="1e02e2fa5e8076e3896f91c277496bb3aa522653" translate="yes" xml:space="preserve">
          <source>@Steve Johnson also answered regarding static methods, also documented under &quot;Built-in Functions&quot; in the Python Library Reference.</source>
          <target state="translated">@Steve Johnson也回答了关于静态方法的问题,在Python库参考书中的 &quot;内置函数 &quot;下也有记载。</target>
        </trans-unit>
        <trans-unit id="c1becb9a9c9125f2176a9c56ed6adb9e0d76496f" translate="yes" xml:space="preserve">
          <source>@Steve Johnson has already answered regarding &lt;a href=&quot;http://web.archive.org/web/20090214211613/http://pyref.infogami.com/staticmethod&quot;&gt;static methods&lt;/a&gt;, also documented under &lt;a href=&quot;https://docs.python.org/3/library/functions.html#staticmethod&quot;&gt;&quot;Built-in Functions&quot; in the Python Library Reference&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Steve Johnson已经回答了有关&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://web.archive.org/web/20090214211613/http://pyref.infogami.com/staticmethod&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静态方法的问题&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，该&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;也记录在&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/3/library/functions.html#staticmethod&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Python Library Reference中的&amp;ldquo;内置函数&amp;rdquo;下&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0a517b8a67adfdb270dfe2e99f10d93d6f12557d" translate="yes" xml:space="preserve">
          <source>@beid also mentioned classmethod, which is similar to staticmethod. A classmethod's first argument is the class object. Example:</source>
          <target state="translated">@beid也提到了classmethod,它类似于staticmethod。classmethod的第一个参数是类对象。举个例子。</target>
        </trans-unit>
        <trans-unit id="a29f8a471567fa54f9038d7e7839104aeaf450ee" translate="yes" xml:space="preserve">
          <source>@beidy recommends &lt;a href=&quot;https://docs.python.org/3/library/functions.html#classmethod&quot;&gt;classmethod&lt;/a&gt;s over staticmethod, as the method then receives the class type as the first argument, but I'm still a little fuzzy on the advantages of this approach over staticmethod. If you are too, then it probably doesn't matter.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@beidy建议使用&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/3/library/functions.html#classmethod&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;classmethod而&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不是staticmethod，因为该方法随后将类类型作为第一个参数，但是对于这种方法相对于staticmethod的优点，我仍然有些模糊。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您也是，那可能没关系。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="716445368e64a991edb17b5a46b3339d2237d8e7" translate="yes" xml:space="preserve">
          <source>A catalog of the &quot;static variables&quot; is stored in the &lt;code&gt;StaticVarMeta.statics&lt;/code&gt; attribute. All attribute requests are initially attempted to be resolved using a substitute resolution order. I have dubbed this the &quot;static resolution order&quot;, or &quot;SRO&quot;. This is done by looking for the requested attribute in the set of &quot;static variables&quot; for a given class (or its parent classes). If the attribute does not appear in the &quot;SRO&quot;, the class will fall back on the default attribute get/set/delete behavior (i.e., &quot;MRO&quot;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;ldquo;静态变量&amp;rdquo;的目录存储在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;StaticVarMeta.statics&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性中。最初尝试使用替代解析顺序解决所有属性请求。我将其称为&amp;ldquo;静态解决方案命令&amp;rdquo;或&amp;ldquo; SRO&amp;rdquo;。这是通过在给定类（或其父类）的&amp;ldquo;静态变量&amp;rdquo;集合中查找请求的属性来完成的。如果该属性未出现在&amp;ldquo; SRO&amp;rdquo;中，则该类将回退到默认属性的&amp;ldquo;获取/设置/删除&amp;rdquo;行为（即&amp;ldquo; MRO&amp;rdquo;）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9ba0e4cf819d3aecb8e28b09b879d8c4c956e753" translate="yes" xml:space="preserve">
          <source>A metaclass is the class of a class. The default metaclass for all classes in Python (i.e., the &quot;new style&quot; classes post Python 2.3 I believe) is &lt;code&gt;type&lt;/code&gt;. For example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;元类是类的类。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Python中所有类的默认元类（即我认为Python 2.3之后的&amp;ldquo;新样式&amp;rdquo;类）是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;type&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1d84b5cc9c11e8fbd038457df57121eaf2a5b05a" translate="yes" xml:space="preserve">
          <source>Absolutely Yes,
  Python by itself don't have any static data member explicitly, but We can have by doing so</source>
          <target state="translated">当然是的,Python本身没有明确的静态数据成员,但我们可以通过这样做来实现。</target>
        </trans-unit>
        <trans-unit id="b46b3d1dcf527451bdbc0461353f2ec10b9f1c26" translate="yes" xml:space="preserve">
          <source>All these objects are being added to the list &lt;code&gt;tryArr&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;所有这些对象都将添加到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;tryArr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;列表中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e4f17a8594b7ae763c648f0009c79dc5399ab7e7" translate="yes" xml:space="preserve">
          <source>Although it doesn't say anything specific about static variables or methods, the &lt;a href=&quot;http://docs.python.org/tut/&quot;&gt;Python tutorial&lt;/a&gt; has some relevant information on &lt;a href=&quot;https://docs.python.org/2/tutorial/classes.html&quot;&gt;classes and class objects&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;尽管它没有对静态变量或方法做任何具体说明，但是&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.python.org/tut/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Python教程&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;提供了有关&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/2/tutorial/classes.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类和类对象的&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一些相关信息&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="91787b9332a1283e843895baa576e5561b7f0f8e" translate="yes" xml:space="preserve">
          <source>And apply it to your own class like this (Python 3 only):</source>
          <target state="translated">并像这样应用到自己的类中(仅Python 3)。</target>
        </trans-unit>
        <trans-unit id="603ddd0924bfe8048ee6beb9057fae4e325e3a27" translate="yes" xml:space="preserve">
          <source>And class instances can change class variables</source>
          <target state="translated">而类的实例可以改变类的变量</target>
        </trans-unit>
        <trans-unit id="ffc90a5ac13979e4c0b805d92ef0d61ac7029375" translate="yes" xml:space="preserve">
          <source>Are static class variables possible in Python</source>
          <target state="translated">在Python中是否可以使用静态类变量</target>
        </trans-unit>
        <trans-unit id="0a0ed2bafc9b01dbd74af85d75e3455632f19611" translate="yes" xml:space="preserve">
          <source>As @&lt;a href=&quot;https://stackoverflow.com/questions/68645/static-class-variables-in-python#answer-69067&quot;&gt;millerdev&lt;/a&gt; points out, this creates a class-level &lt;code&gt;i&lt;/code&gt; variable, but this is distinct from any instance-level &lt;code&gt;i&lt;/code&gt; variable, so you could have</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;正如@ &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/68645/static-class-variables-in-python#answer-69067&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;millerdev&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指出的那样，这将创建一个类级别的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;变量，但这与任何实例级别的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;变量都不同，因此您可以&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b48d5c164190553420fa013b9a2e15d51ba80f51" translate="yes" xml:space="preserve">
          <source>As the other answers have noted, static and class methods are easily accomplished using the built-in decorators:</source>
          <target state="translated">正如其他答案中提到的那样,静态方法和类方法都可以利用内置的装饰器轻松完成。</target>
        </trans-unit>
        <trans-unit id="6849c9c54c02634651dc00427dec658eb5da9ab8" translate="yes" xml:space="preserve">
          <source>As usual, the first argument to &lt;code&gt;MyMethod()&lt;/code&gt; is bound to the class instance object. In contrast, the first argument to &lt;code&gt;MyClassMethod()&lt;/code&gt; is &lt;em&gt;bound to the class object itself&lt;/em&gt; (e.g., in this case, &lt;code&gt;Test&lt;/code&gt;). For &lt;code&gt;MyStaticMethod()&lt;/code&gt;, none of the arguments are bound, and having arguments at all is optional.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与往常一样，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyMethod()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的第一个参数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;绑定到类实例对象。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与此相反，第一个参数&lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyClassMethod()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;被&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;绑定到类对象本身&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（例如，在这种情况下，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Test&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于&lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyStaticMethod()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，没有参数绑定，并且完全没有参数是可选的。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5c1e001f8d06fe61e487859615fdde64ca65b701" translate="yes" xml:space="preserve">
          <source>Below is a metaclass I have created which attempts to emulate &quot;static variable&quot; behavior of other languages. It basically works by replacing the default getter, setter, and deleter with versions which check to see if the attribute being requested is a &quot;static variable&quot;.</source>
          <target state="translated">下面是我创建的一个元类,它试图模仿其他语言的 &quot;静态变量 &quot;行为。它的工作原理是将默认的getter、setter和deleter替换为检查被请求的属性是否是 &quot;静态变量 &quot;的版本。</target>
        </trans-unit>
        <trans-unit id="de1e8590d73a98048d90751fc3c9ca7ee3b1a1e5" translate="yes" xml:space="preserve">
          <source>But keep in mind, a static method cannot call a non-static method in python.</source>
          <target state="translated">但请记住,在python中,静态方法不能调用非静态方法。</target>
        </trans-unit>
        <trans-unit id="034d9c75b21b8bdab27752521c503330e9ae8145" translate="yes" xml:space="preserve">
          <source>CLASSNAME.var is static variable</source>
          <target state="translated">CLASSNAME.var是静态变量</target>
        </trans-unit>
        <trans-unit id="27f53cfc72387e2ee44e393370ad734a7a2d754b" translate="yes" xml:space="preserve">
          <source>Clearly, the member &lt;code&gt;i&lt;/code&gt; of &lt;code&gt;Test&lt;/code&gt; must be a &lt;code&gt;property&lt;/code&gt; object, which is the type of object returned from the &lt;code&gt;property&lt;/code&gt; function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;显然，构件&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Test&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必须是一个&lt;/font&gt;&lt;/font&gt; &lt;code&gt;property&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象，这是对象的从返回的类型&lt;/font&gt;&lt;/font&gt; &lt;code&gt;property&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的功能。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fd30f1cd4685ddb51bcfd080d74eaf11e7c00e74" translate="yes" xml:space="preserve">
          <source>For anyone using a class factory with &lt;strong&gt;python3.6&lt;/strong&gt; and up use the &lt;code&gt;nonlocal&lt;/code&gt; keyword to add it to the scope / context of the class being created like so:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于使用类工厂与任何人&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;python3.6&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和最多使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;nonlocal&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关键字把它添加到类的范围/上下文被创建，如下所示：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="2b54ba729e81ff9978c8fb36147cf3390572603a" translate="yes" xml:space="preserve">
          <source>For immutable static variable behavior, simply omit the &lt;code&gt;property&lt;/code&gt; setter:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于不可变的静态变量行为，只需省略&lt;/font&gt;&lt;/font&gt; &lt;code&gt;property&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;设置器即可：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f6e2ec17416b5276ca6187ea22ee603d1ffbfe2b" translate="yes" xml:space="preserve">
          <source>For static properties.. Its time you look up some python definition.. variable can always change. There are two types of them mutable and immutable.. Also, there are class attributes and instance attributes.. Nothing really like static attributes in the sense of java &amp;amp; c++</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于静态属性..它时候您查找一些python定义..变量可以随时更改。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它们有两种类型，它们是可变的和不可变的。此外，还有类属性和实例属性。在Java和C ++的意义上，没有什么比静态属性更像&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="482ad5ff83b6ece8126bc6706f0498390e307cf8" translate="yes" xml:space="preserve">
          <source>Have a look at &lt;a href=&quot;https://stackoverflow.com/a/102062/717357&quot;&gt;this answer&lt;/a&gt; and the official docs &lt;a href=&quot;https://docs.python.org/2/howto/descriptor.html&quot;&gt;HOWTO&lt;/a&gt; for more information about descriptors.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请查看&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/102062/717357&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;此答案&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和官方文档&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/2/howto/descriptor.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;HOWTO&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，以获取有关描述符的更多信息。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d33a527cb9b6867a3151aa24601ccec91f4d74c5" translate="yes" xml:space="preserve">
          <source>Here's a proof-of-concept written in Python 3 -- if any of the exact details are wrong the code can be tweaked to match just about whatever you mean by a &lt;code&gt;static variable&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是用Python 3编写的概念证明-如果任何确切的细节有误，则可以对代码进行调整以使其与&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static variable&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;含义完全匹配&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc932230a709472b96d584b039369020ce7d8983" translate="yes" xml:space="preserve">
          <source>However, implementing &quot;static variables&quot; (well, &lt;em&gt;mutable&lt;/em&gt; static variables, anyway, if that's not a contradiction in terms...) is not as straight forward. As millerdev &lt;a href=&quot;https://stackoverflow.com/a/69067/2437514&quot;&gt;pointed out in his answer&lt;/a&gt;, the problem is that Python's class attributes are not truly &quot;static variables&quot;. Consider:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，实现&amp;ldquo;静态变量&amp;rdquo;（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;无论如何&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可变&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静态变量，如果这不是矛盾的话&amp;hellip;&amp;hellip;）并不是那么简单。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;正如millerdev &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/69067/2437514&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在回答中指出的那样&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，问题在于Python的类属性并不是真正的&amp;ldquo;静态变量&amp;rdquo;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;考虑：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0f8a487fc6cd6a6763e809c1188898ae1fbd2b19" translate="yes" xml:space="preserve">
          <source>However, you can define your own metaclass like this:</source>
          <target state="translated">但是,你可以这样定义自己的元类。</target>
        </trans-unit>
        <trans-unit id="7a0af7a1ab4f0bfd806d739ba81825a2c5f216bc" translate="yes" xml:space="preserve">
          <source>I present a solution to the above 'gotcha' below; however I would suggest - strenuously - that you do not try to do something like the following until - at minimum - you thoroughly understand why &lt;code&gt;assert Test.i = x.i&lt;/code&gt; causes an error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我在下面提出了上述&amp;ldquo;陷阱&amp;rdquo;的解决方案；&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，我建议-极力地-您不要尝试执行以下操作，直到-至少-您要完全理解为什么&lt;/font&gt;&lt;/font&gt; &lt;code&gt;assert Test.i = x.i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;会导致错误。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="95bb1b0d431026a4d5396f2ff19d5bf214bbf4fb" translate="yes" xml:space="preserve">
          <source>I present the (Python 3) solution below for informational purposes only. I am not endorsing it as a &quot;good solution&quot;. I have my doubts as to whether emulating the static variable behavior of other languages in Python is ever actually necessary. However, regardless as to whether it is actually useful, the below should help further understanding of how Python works.</source>
          <target state="translated">我在下面介绍 (Python 3)的解决方案,仅供参考。我并不认可它是一个 &quot;好的解决方案&quot;。我对在 Python 中模仿其他语言中的静态变量行为是否真的有必要表示怀疑。然而,不管它是否真的有用,下面的内容应该有助于进一步理解Python的工作原理。</target>
        </trans-unit>
        <trans-unit id="bf192665549b7bf056c69785006798c8da7ed033" translate="yes" xml:space="preserve">
          <source>INSTANCENAME.var is not static variable.</source>
          <target state="translated">INSTANCENAME.var不是静态变量。</target>
        </trans-unit>
        <trans-unit id="92c791c6da652ba33da92a5b7ebc0cbf7fb9fdf2" translate="yes" xml:space="preserve">
          <source>If you find the above confusing, you are most likely still thinking about it from the perspective of other languages (e.g. Java or c++). You should go study the &lt;code&gt;property&lt;/code&gt; object, about the order in which Python attributes are returned, the descriptor protocol, and the method resolution order (MRO).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您发现上述混淆，您很可能仍会从其他语言（例如Java或c ++）的角度考虑它。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您应该研究&lt;/font&gt;&lt;/font&gt; &lt;code&gt;property&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象，有关返回Python属性的顺序，描述符协议和方法解析顺序（MRO）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a793a0b8dbc9d5cbd4f6953387ce957e43bb28e5" translate="yes" xml:space="preserve">
          <source>Immutable &quot;Static Variables&quot;</source>
          <target state="translated">不可变的 &quot;静态变量&quot;</target>
        </trans-unit>
        <trans-unit id="5e0698c5f3aa0792d204ff6d50cac604fafda38d" translate="yes" xml:space="preserve">
          <source>In regards to this &lt;a href=&quot;https://stackoverflow.com/a/68672/717357&quot;&gt;answer&lt;/a&gt;, for a &lt;em&gt;constant&lt;/em&gt; static variable, you can use a descriptor. Here's an example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关于此&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/68672/717357&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;答案&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，对于&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;常量&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静态变量，可以使用描述符。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是一个例子：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="23d8e625b60f08d46acca2cd6f6c70dbf987a866" translate="yes" xml:space="preserve">
          <source>Is it possible to have static class variables or methods in Python? What syntax is required to do this?</source>
          <target state="translated">在Python中是否可以有静态类变量或方法?要做到这一点需要什么语法?</target>
        </trans-unit>
        <trans-unit id="227728c0117a3347b1f1e4ff01ea4a621ed1c380" translate="yes" xml:space="preserve">
          <source>It is possible to have &lt;code&gt;static&lt;/code&gt; class variables, but probably not worth the effort.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类变量，但可能不值得。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2122ce24b3105ea2e7912a3e3ce6b1dd723c9a35" translate="yes" xml:space="preserve">
          <source>Just for kicks and giggles, we could call &lt;em&gt;myInstanceMethod&lt;/em&gt; on the class by passing in an instance of the class, like so:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;只是为了一笑而过，我们可以&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通过传入类的实例来在类上&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;调用&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;myInstanceMethod&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，如下所示：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ad3f82e3da3ccd456a6c0fcd7b2c4c35c05deafd" translate="yes" xml:space="preserve">
          <source>Making a variable static takes this a step further by disallowing the variable name to point to any object but that to which it currently points. (Note: this is a general software concept and not specific to Python; please see others' posts for information about implementing statics in Python).</source>
          <target state="translated">使一个变量静态化,可以更进一步,因为它不允许变量名指向任何对象,但当前指向的对象除外。(注:这是一个通用的软件概念,并不是Python所特有的;关于在Python中实现静态的信息,请参考其他人的帖子)。</target>
        </trans-unit>
        <trans-unit id="43441a1f202581c71f8ec82052e59dfe772e9196" translate="yes" xml:space="preserve">
          <source>Many people will find this surprising. However, it should not be. If we go back and inspect our &lt;code&gt;Test&lt;/code&gt; class definition (the second version), we take note of this line:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;许多人会发现这令人惊讶。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，事实并非如此。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果我们返回并检查我们的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Test&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类定义（第二个版本），请注意以下这一行：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d1379f495b367651ba8de70dfe76b9a5e75999fa" translate="yes" xml:space="preserve">
          <source>Normally there aren't any assignments to these after they are created.  Note that the lookup uses &lt;code&gt;self&lt;/code&gt; because, although &lt;code&gt;label&lt;/code&gt; is static in the sense of not being associated with a &lt;em&gt;particular&lt;/em&gt; instance, the value still depends on the (class of the) instance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通常，在创建它们之后，没有任何分配。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请注意，查找使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是因为，尽管&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在不与&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特定&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实例&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;相关联的意义上&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，虽然&lt;/font&gt;&lt;/font&gt; &lt;code&gt;label&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是静态的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，但&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该值仍取决于实例（的类）。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="98d0b0d29eb9847e22f23f5f2fe6b2b149ab6c65" translate="yes" xml:space="preserve">
          <source>Note that technically speaking, &lt;code&gt;i&lt;/code&gt; is still not a 'static variable' at all; it is a &lt;code&gt;property&lt;/code&gt;, which is a special type of descriptor. However, the &lt;code&gt;property&lt;/code&gt; behavior is now equivalent to a (mutable) static variable synced across all class instances.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请注意，从技术上讲，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仍然根本不是一个&amp;ldquo;静态变量&amp;rdquo;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它是一个&lt;/font&gt;&lt;/font&gt; &lt;code&gt;property&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，它是一种特殊的描述符类型。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;property&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;行为现在等效于在所有类实例之间同步的（可变）静态变量。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e28be6f65f9b868c62441821b4e55d9c148212b9" translate="yes" xml:space="preserve">
          <source>Note that the above methods only work with &lt;em&gt;instances&lt;/em&gt; of your class - they will &lt;strong&gt;not&lt;/strong&gt; work &lt;em&gt;when using the class itself&lt;/em&gt;. So for example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请注意，上述方法只能用工作&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实例&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类的-他们会&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;工作&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用类本身时&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，例如：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2aa8de918d1257f189538703f8d0a84d945f9beb" translate="yes" xml:space="preserve">
          <source>Notice how the instance variable &lt;code&gt;t.i&lt;/code&gt; got out of sync with the &quot;static&quot; class variable when the attribute &lt;code&gt;i&lt;/code&gt; was set directly on &lt;code&gt;t&lt;/code&gt;. This is because &lt;code&gt;i&lt;/code&gt; was re-bound within the &lt;code&gt;t&lt;/code&gt; namespace, which is distinct from the &lt;code&gt;Test&lt;/code&gt; namespace. If you want to change the value of a &quot;static&quot; variable, you must change it within the scope (or object) where it was originally defined. I put &quot;static&quot; in quotes because Python does not really have static variables in the sense that C++ and Java do.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请注意，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当将属性&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;直接设置在&lt;/font&gt; &lt;code&gt;t&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;上&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;时&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，实例变量&lt;/font&gt;&lt;/font&gt; &lt;code&gt;t.i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如何&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与&amp;ldquo;静态&amp;rdquo;类变量不同步&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。这是因为&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;被重新绑定在&lt;/font&gt; &lt;code&gt;t&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;名称空间中，该&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;名称空间&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与&lt;/font&gt; &lt;code&gt;Test&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;名称空间不同。如果要更改&amp;ldquo;静态&amp;rdquo;变量的值，则必须在其最初定义的范围（或对象）内进行更改。我将&amp;ldquo; static&amp;rdquo;用引号引起来，因为Python实际上没有C ++和Java所具有的静态变量。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b11f25deb60bcf114999baab257666e9e2348aaf" translate="yes" xml:space="preserve">
          <source>Notice that when we call the method &lt;em&gt;myInstanceMethod&lt;/em&gt;, we get an error. This is because it requires that method be called on an instance of this class. The method &lt;em&gt;myStaticMethod&lt;/em&gt; is set as a classmethod using the &lt;a href=&quot;http://www.python.org/dev/peps/pep-0318/&quot;&gt;decorator&lt;/a&gt;&lt;em&gt;@classmethod&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注意，当我们调用方法&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;myInstanceMethod时&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，我们得到一个错误。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是因为它要求在此类的实例上调用该方法。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;a href=&quot;http://www.python.org/dev/peps/pep-0318/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;装饰器&lt;/font&gt;&lt;/a&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@classmethod&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将方法&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;myStaticMethod&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;设置为类方法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="04b11500326db84662ca01bae977689a11325b6b" translate="yes" xml:space="preserve">
          <source>Now I made an object for one flag (&lt;code&gt;staticFlag&lt;/code&gt;). This flag will be sent as reference to all the regular objects.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在，我为一个标志（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;staticFlag&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）创建&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;了一个对象&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该标志将作为对所有常规对象的引用发送。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a63fef43f83986e3b879a67e1e0bc2160f63c588" translate="yes" xml:space="preserve">
          <source>Now attempting to set the instance &lt;code&gt;i&lt;/code&gt; attribute will return an &lt;code&gt;AttributeError&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在尝试设置实例&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性将返回&lt;/font&gt;&lt;/font&gt; &lt;code&gt;AttributeError&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="93b9e7a0a6529c120d308e3a9afc60556aa4685a" translate="yes" xml:space="preserve">
          <source>Now you can do:</source>
          <target state="translated">现在你可以做。</target>
        </trans-unit>
        <trans-unit id="a8143fc64259415dc4e81d9b7c8ca127e00dfb6d" translate="yes" xml:space="preserve">
          <source>One Gotcha to be Aware of</source>
          <target state="translated">需要注意的一个问题</target>
        </trans-unit>
        <trans-unit id="cf866e2eaf69fa7d0d427fbeb00721940a9b2ab6" translate="yes" xml:space="preserve">
          <source>One special thing to note about static properties &amp;amp; instance properties, shown in the example below:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关于静态属性和实例属性的一件事要特别注意，如下面的示例所示：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba96023bb3d145e2c5235de13d92f0c0bb0272ef" translate="yes" xml:space="preserve">
          <source>One very interesting point about Python's attribute lookup is that it can be used to create &quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_function&quot;&gt;virtual&lt;/a&gt; variables&quot;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关于Python属性查找的一个非常有趣的观点是，它可以用于创建&amp;ldquo; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_function&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;虚拟&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;变量&amp;rdquo;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="385b691c1ae1c4adc4de1e88d36cc95e38a9138f" translate="yes" xml:space="preserve">
          <source>Personally I would use a classmethod whenever I needed a static method. Mainly because I get the class as an argument.</source>
          <target state="translated">就我个人而言,每当我需要静态方法时,我都会使用classmethod。主要是因为我得到的类是一个参数。</target>
        </trans-unit>
        <trans-unit id="066c6dab07691f1f0eaca748f5bdb9aa86a40369" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.python.org/3/tutorial/classes.html#class-objects&quot;&gt;what the Python tutorial has to say on the subject of classes and class objects&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;了解有关&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/3/tutorial/classes.html#class-objects&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类和类对象的Python教程必须说些什么&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="19468e42d1406facfb94b682d3988e089dffb3f3" translate="yes" xml:space="preserve">
          <source>So this is probably a hack, but I've been using &lt;code&gt;eval(str)&lt;/code&gt; to obtain an static object, kind of a contradiction, in python 3.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;所以这可能是一个hack，但是我一直在使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;eval(str)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在Python 3中获取静态对象，这有点矛盾。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f5bd63a0154590f547e524ecb2acae4fec295a56" translate="yes" xml:space="preserve">
          <source>So where &lt;code&gt;object_name = 'RecordOne'&lt;/code&gt; or the class name, I call &lt;code&gt;cur_type = eval(object_name)&lt;/code&gt; and then to instantiate it you do &lt;code&gt;cur_inst = cur_type(args)&lt;/code&gt;
However before you instantiate you can call static methods from &lt;code&gt;cur_type.getName()&lt;/code&gt; for example, kind of like abstract base class implementation or whatever the goal is.  However in the backend, it's probably instantiated in python and is not truly static, because eval is returning an object....which must have been instantiated....that gives static like behavior.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;那么，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;object_name = 'RecordOne'&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;或者类的名字，我叫&lt;/font&gt;&lt;/font&gt; &lt;code&gt;cur_type = eval(object_name)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，然后初始化它你做&lt;/font&gt;&lt;/font&gt; &lt;code&gt;cur_inst = cur_type(args)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 但是之前你实例可以调用从静态方法&lt;/font&gt;&lt;/font&gt; &lt;code&gt;cur_type.getName()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如，有点像抽象基类实现或目标是什么。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，在后端，它可能是在python中实例化的，并且不是真正的静态对象，因为eval返回的是一个对象&amp;hellip;&amp;hellip;该对象必须已经实例化&amp;hellip;&amp;hellip;会产生类似静态的行为。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c67360c3d645d0aa1adb9aa2212a5a28b5ee6429" translate="yes" xml:space="preserve">
          <source>Some primitive object types like integers, floats, strings, and touples are immutable in Python. This means that the object that is referred to by a given name cannot change if it is of one of the aforementioned object types. The name can be reassigned to a different object, but the object itself may not be changed.</source>
          <target state="translated">在 Python 中,一些原始对象类型,如整数、浮点数、字符串和 touples 是不可变的。这意味着,如果对象属于上述对象类型之一,那么由给定的名称所引用的对象不能改变。这个名字可以被重新分配给不同的对象,但对象本身不能改变。</target>
        </trans-unit>
        <trans-unit id="77a636b5b4d7a2176f8e66c9c644dc845450890a" translate="yes" xml:space="preserve">
          <source>Static Variables in Class factory python3.6</source>
          <target state="translated">类 factory python3.6中的静态变量</target>
        </trans-unit>
        <trans-unit id="3e09b5597dc2f831a37224a9d398246ba48bccbc" translate="yes" xml:space="preserve">
          <source>Static and Class Methods</source>
          <target state="translated">静态和类方法</target>
        </trans-unit>
        <trans-unit id="b62c84c2f2fc62191f6409f49fae79e49e517dac" translate="yes" xml:space="preserve">
          <source>Static methods in python are called &lt;a href=&quot;http://pyref.infogami.com/classmethod&quot;&gt;classmethod&lt;/a&gt;s. Take a look at the following code</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;python中的静态方法称为&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://pyref.infogami.com/classmethod&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;classmethod&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;看下面的代码&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d61c5af957ba48ad3fdcd1f8f0c5694fc586119" translate="yes" xml:space="preserve">
          <source>The best way I found is to use another class. You can create an object and then use it on other objects.</source>
          <target state="translated">我发现最好的方法是使用另一个类。你可以创建一个对象,然后在其他对象上使用。</target>
        </trans-unit>
        <trans-unit id="3ee7082972a1c7359e7d63e796387aa7119e5ed4" translate="yes" xml:space="preserve">
          <source>The line &lt;code&gt;assert Test.i == x.i&lt;/code&gt; produces an error, because the &lt;code&gt;i&lt;/code&gt; attribute of &lt;code&gt;Test&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; are two different objects.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;行&lt;/font&gt;&lt;/font&gt; &lt;code&gt;assert Test.i == x.i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;会产生错误，因为&lt;/font&gt; &lt;code&gt;Test&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;是两个不同的对象。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e207d54f3f66c85042f2980a5480da7329c015e9" translate="yes" xml:space="preserve">
          <source>The results are</source>
          <target state="translated">结果是</target>
        </trans-unit>
        <trans-unit id="eac1b4cec0ba95d3ad3640cc48cca64d6cd7b1df" translate="yes" xml:space="preserve">
          <source>The static variable will now remain in sync &lt;em&gt;between all class instances&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在，静态变量将&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在所有类实例之间&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;保持同步&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d175dc37234724759ae8499c9d5b6dfe21cd93be" translate="yes" xml:space="preserve">
          <source>Then whenever by accident you try to initialize &lt;strong&gt;MyClass&lt;/strong&gt; you'll get an StaticClassError.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;然后，每当您无意中尝试初始化&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MyClass时&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，都会收到一个StaticClassError。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c1c6ea2a728f72467430bc488d980b6f7812f114" translate="yes" xml:space="preserve">
          <source>There are a few gotcha's here. Carrying on from the example above:</source>
          <target state="translated">这里有几个问题。继续上面的例子:</target>
        </trans-unit>
        <trans-unit id="a8e90448feb1fc6ffec123e4902c92e7ec30ff32" translate="yes" xml:space="preserve">
          <source>There is an Records.py file that has nothing but &lt;code&gt;class&lt;/code&gt; objects defined with static methods and constructors that save some arguments.  Then from another .py file I &lt;code&gt;import Records&lt;/code&gt; but i need to dynamically select each object and then instantiate it on demand according to the type of data being read in.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;没有一个Records.py文件，只有&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通过静态方法定义的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象和保存一些参数的构造函数。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;然后从另一个.py文件&lt;/font&gt;&lt;/font&gt; &lt;code&gt;import Records&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是我需要动态选择每个对象，然后根据读取的数据类型按需实例化它。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6cff49d2685531640b47e192800596a520bba4b4" translate="yes" xml:space="preserve">
          <source>This Script Results:</source>
          <target state="translated">此脚本结果。</target>
        </trans-unit>
        <trans-unit id="3fa353ca1cd885e1e7f147d5db84a2d135c81e0d" translate="yes" xml:space="preserve">
          <source>This class should present the static var &lt;code&gt;__success&lt;/code&gt; (Private Static Var).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;此类应显示静态var &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__success&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（私有静态Var）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d65fc440657ccbc4dee9a6811971adeea48f8783" translate="yes" xml:space="preserve">
          <source>This is because the line &lt;code&gt;x.i = 12&lt;/code&gt; has added a new instance attribute &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt; instead of changing the value of the &lt;code&gt;Test&lt;/code&gt; class &lt;code&gt;i&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是因为线&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x.i = 12&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;增加了一个新的实例属性&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，而不是改变的值&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Test&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f12657d5e0f44beb86fc4f972388e39c5a2d9d2d" translate="yes" xml:space="preserve">
          <source>This is different from C++ and Java, but not so different from C#, where a static member can't be accessed using a reference to an instance.</source>
          <target state="translated">这一点与C++和Java不同,但与C#的区别不大,C#中的静态成员不能用引用实例来访问。</target>
        </trans-unit>
        <trans-unit id="902be678ff552c86849fe57e0a62e700be4d7d62" translate="yes" xml:space="preserve">
          <source>This means before assigning the value to instance property, if we try to access the property thru' instance, the static value is used. &lt;strong&gt;Each property declared in python class always has a static slot in memory&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这意味着在将值分配给实例属性之前，如果我们尝试通过实例访问属性，则将使用静态值。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;python类中声明的每个属性在内存中始终具有一个静态插槽&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="60a2f9857f978998d130aa55e96706b01dece78d" translate="yes" xml:space="preserve">
          <source>To avoid any potential confusion, I would like to contrast static variables and immutable objects.</source>
          <target state="translated">为了避免可能出现的混乱,我想把静态变量和不可变对象做个对比。</target>
        </trans-unit>
        <trans-unit id="03b610518887187d17eae1f71a0ced296d90826a" translate="yes" xml:space="preserve">
          <source>UPDATE: this attempt &lt;strong&gt;is really pretty awful&lt;/strong&gt;; if you insist on doing something like this (hint: please don't; Python is a very elegant language and shoe-horning it into behaving like another language is just not necessary), use the code in &lt;a href=&quot;https://stackoverflow.com/a/36216964/2437514&quot;&gt;Ethan Furman's answer&lt;/a&gt; instead.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更新：这种尝试&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;确实非常糟糕&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;；&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您坚持要做这样的事情（提示：请不要； Python是一种非常优雅的语言，并且不必像其他语言那样勉强地表现出来），请改用&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/36216964/2437514&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ethan Furman的答案中&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的代码&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="55d169eee6cbf73a55a103c97b3a8f86a14e9715" translate="yes" xml:space="preserve">
          <source>Variables declared inside the class definition, but not inside a method are class or static variables:</source>
          <target state="translated">在类定义中声明的变量是类或静态变量,而不是在方法中声明的变量。</target>
        </trans-unit>
        <trans-unit id="d8ffdb8173233c2c17fd3ece0ddc1db436dc5696" translate="yes" xml:space="preserve">
          <source>When define some member variable outside any member method, the variable can be either static or non-static depending on how the variable is expressed.</source>
          <target state="translated">当在任何成员方法之外定义一些成员变量时,根据变量的表达方式,可以是静态的,也可以是非静态的。</target>
        </trans-unit>
        <trans-unit id="57b9f463ab237084bfd30d8c5ce587fa31a4f6ec" translate="yes" xml:space="preserve">
          <source>Why use static method in pythonic sense, if it has no relation whatever to the class! If I were you, I'd either use classmethod or define the method independent from the class.</source>
          <target state="translated">如果它和类没有任何关系,为什么要用python意义上的静态方法呢?如果我是你,我会使用classmethod,或者定义独立于类的方法。</target>
        </trans-unit>
        <trans-unit id="3e5845522a8f0889e4d26e11472d31957b0a5c67" translate="yes" xml:space="preserve">
          <source>With the example above, I made a class named &lt;code&gt;staticFlag&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在上面的示例中，我创建了一个名为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;staticFlag&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的类&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3fe78493a78b0db687ba5723cbd51b3331a8d2c3" translate="yes" xml:space="preserve">
          <source>Yes, definitely possible to write static variables and methods in python.</source>
          <target state="translated">是的,绝对可以用python写静态变量和方法。</target>
        </trans-unit>
        <trans-unit id="e54fc2579c6516bf7252df36dd093f3fb20ac36f" translate="yes" xml:space="preserve">
          <source>You can also add class variables to classes on the fly</source>
          <target state="translated">你还可以在飞行中为类添加类变量。</target>
        </trans-unit>
        <trans-unit id="126b723e778d0d460547d24ed9a07f26ea2c09b9" translate="yes" xml:space="preserve">
          <source>You can always raise an exception if quietly ignoring setting value (&lt;code&gt;pass&lt;/code&gt; above) is not your thing. If you're looking for a C++, Java style static class variable:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不希望&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;悄悄地忽略设置值（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;pass&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上方），则&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;始终可以引发异常&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果要查找C ++ Java样式静态类变量：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8196642b30bce4710429aaf9f58f9978c4f7181b" translate="yes" xml:space="preserve">
          <source>You can use a list or a dictionary to get &quot;static behavior&quot; between instances.</source>
          <target state="translated">你可以使用列表或字典来获取实例之间的 &quot;静态行为&quot;。</target>
        </trans-unit>
        <trans-unit id="1016d03781823b954bc6bd1a0a7c08385615ecdd" translate="yes" xml:space="preserve">
          <source>You could also enforce a class to be static using metaclass.</source>
          <target state="translated">你也可以使用metaclass强制一个类是静态的。</target>
        </trans-unit>
        <trans-unit id="42dedc3b16fd40173a3154115a36ebd9bb2ba137" translate="yes" xml:space="preserve">
          <source>and in use:</source>
          <target state="translated">和使用中。</target>
        </trans-unit>
        <trans-unit id="b3df91c008d10ff7eb93984296a3827ba8e3537e" translate="yes" xml:space="preserve">
          <source>and some tests:</source>
          <target state="translated">和一些测试。</target>
        </trans-unit>
        <trans-unit id="73b8427ebc9e80db4f1373ae0d7951406a01acdc" translate="yes" xml:space="preserve">
          <source>explanation</source>
          <target state="translated">explanation</target>
        </trans-unit>
        <trans-unit id="afcb2418e5a2e1a5f3adc8ab74fc80bd4839b24d" translate="yes" xml:space="preserve">
          <source>or use a decorator</source>
          <target state="translated">或使用装饰师</target>
        </trans-unit>
        <trans-unit id="1029d67644815d428f554e390aa966d57a0b29b8" translate="yes" xml:space="preserve">
          <source>output</source>
          <target state="translated">output</target>
        </trans-unit>
        <trans-unit id="081c88d752751c574111b5133f57fd6961ade81c" translate="yes" xml:space="preserve">
          <source>resulting in ...</source>
          <target state="translated">导致.....</target>
        </trans-unit>
        <trans-unit id="7270fb48a58802a3360289641a78eff29822ed3e" translate="yes" xml:space="preserve">
          <source>self.var inside class is not static variable.</source>
          <target state="translated">类内的self.var不是静态变量。</target>
        </trans-unit>
        <trans-unit id="94b3874dc8866a1cc7a25d0f00ac9e3e38c34bd6" translate="yes" xml:space="preserve">
          <source>var inside the class member function is not defined.</source>
          <target state="translated">类成员函数里面的var没有定义。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
