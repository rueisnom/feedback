<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/9682092">
    <body>
      <group id="9682092">
        <trans-unit id="91de6e5632c96599d709bfa2655e3e4d2780d307" translate="yes" xml:space="preserve">
          <source>$scope.$watch(&amp;lsquo;expression/function&amp;rsquo;) &amp;mdash; In your JavaScript we can just attach a scope object for angular to watch.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;$ scope。$ watch（ 'expression / function'）&amp;mdash; JavaScriptで、angularが監視するスコープオブジェクトをアタッチするだけです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b7820d85df30b0b7884bdfefcb9723bc43a90d70" translate="yes" xml:space="preserve">
          <source>(if it has any). When $digest() iterates
  over the watches, it checks if the value of the expression has
  changed. If the value has changed, AngularJS calls the listener with
  new value and old value. The $digest() function is called
  whenever AngularJS thinks it is necessary. For example, after a button
  click, or after an AJAX call. You may have some cases where AngularJS
  does not call the $digest() function for you. In that case you have to
  call it yourself.</source>
          <target state="translated">がある場合)。digest()がウォッチを反復処理すると、式の値が変更されたかどうかをチェックします。値が変更されている場合、AngularJSは新しい値と古い値でリスナーを呼び出します。ダイジェスト()関数はAngularJSが必要だと思ったときに呼び出されます。例えば、ボタンクリックの後やAJAXコールの後などです。AngularJSが$digest()関数を呼び出さない場合があるかもしれません。その場合は自分で呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="33e1522ece49487d912bf4b8c01791e362bcecd4" translate="yes" xml:space="preserve">
          <source>//Dom update code with new value</source>
          <target state="translated">/新しい値でコードを更新します。</target>
        </trans-unit>
        <trans-unit id="e876771cd34a0018c198b4d5a45eee5c3e8f6f61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-model&lt;/code&gt; binds our view and render it in expression &lt;code&gt;{{ }}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ng-model&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はビューをバインドし、式&lt;/font&gt;&lt;/font&gt; &lt;code&gt;{{ }}&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でレンダリングします&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5fe9258fbd573d515f842c6b1ae446f5e5726696" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-model&lt;/code&gt; is the data which is shown to the user in the view and with which the user interacts.</source>
          <target state="translated">&lt;code&gt;ng-model&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、ビューでユーザーに表示され、ユーザーが操作するデータです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a23e57991f9eb393ba30e7917a3fc84a1533a36d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Limited&lt;/em&gt; &amp;mdash; You can't really show more than about 2000 pieces of information to a human on a single page. Anything more than that is really bad UI, and humans can't process this anyway.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;制限あり&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;mdash;実際には、1ページで約2000を超える情報を人間に表示することはできません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それ以上のものは本当に悪いUIであり、人間はとにかくこれを処理することはできません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8e14aa7e871928b62520d6e0b8e10e2cffc78f21" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Slow&lt;/em&gt; &amp;mdash; Anything faster than 50&amp;nbsp;ms is imperceptible to humans and thus can be considered as &quot;instant&quot;.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;遅い&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;mdash; 50ミリ秒よりも速いものは人間には知覚できないため、「インスタント」と見なすことができます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="90d38fa37c44e3e62eeefb071eae0c59c73b444a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$apply()&lt;/strong&gt; -</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;$ apply（）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5975df0296848c55622406b2bb66e7ec25788e86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$digest()&lt;/strong&gt; -</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;$ digest（）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd14b832fd688faba3d0531903fb7672f5bb945f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$watch()&lt;/strong&gt; :-</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;$ watch（）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：-&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1303db0abb7e5b6b8865f6a4d1841c909f514e12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$watch&lt;/strong&gt; function takes in three parameters:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;$ watch&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数は3つのパラメーターを受け取ります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="355c0e35ea0794843854cef2fc1fbb22fe357cda" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="595ac3c717717f780d25d74e1b557454a56132f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="634b1d0bb5b61119c1b7b9f683e4940b4c8913be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;3)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;3)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d73ec0e35dfd919874037befa129888de0e136a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;What is data binding?&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;データバインディングとは&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3c2332a09f133d6a0597e878dbfa788b036ac566" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;AngularJS Code&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AngularJSコード&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1d6b4242ac6358cb3597337491f651b75eb7ecba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description :&lt;/strong&gt;
Angular js sets the watcher on the scope model, which fires the listener function if there is a change in the model.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;説明：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Angular jsはスコープモデルにウォッチャーを設定し、モデルに変更があった場合にリスナー関数を起動します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6524f86f67897c2c00f49d97594a0331982027b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For Ex.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6e360378a5f9ce12a09c9e371f6ff0b7082ac4e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HTML Code&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;HTMLコード&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b8db34f25d93fa8eee917fe302430d84387ad465" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How is it possible?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どのようにして可能ですか？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="866c51fff782ef985d22aab635285eca8cab7d37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;O/P&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;O/P&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="869138fa5ca240e6391e1fd6a7b3bce75e085d97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short answer :&lt;/strong&gt;
With the help of digest cycle.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;短い答え：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 消化サイクルの助けを借りて。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c025a485c08098687c23572800580a92630ee0e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;So When and How is the watcher function called?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では、ウォッチャー関数はいつ、どのように呼び出されますか？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="284c0cc1c16634ee278d62d9da4d70563394d278" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TL;DR&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;TL;DR&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d0cb000ddd31af21b11edf2884f5f7e6bb763965" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;data binding:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;データバインディング：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="64003ac4d8c2449fd0db7d0d812d631a0365c5a3" translate="yes" xml:space="preserve">
          <source>A digest cycle is a &lt;strong&gt;depth-first traversal of &lt;code&gt;$scope&lt;/code&gt; and all its children&lt;/strong&gt;. For each &lt;code&gt;$scope&lt;/code&gt;&lt;code&gt;object&lt;/code&gt;, we iterate over its &lt;code&gt;$$watchers&lt;/code&gt;&lt;code&gt;array&lt;/code&gt; and evaluate all the expressions. If the new expression value is different from the last known value, the watcher's function is called. This function might recompile part of the DOM, recompute a value on &lt;code&gt;$scope&lt;/code&gt;, trigger an &lt;code&gt;AJAX&lt;/code&gt;&lt;code&gt;request&lt;/code&gt;, anything you need it to do.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ダイジェストサイクルは、&lt;/font&gt;&lt;strong&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とそのすべての子の&lt;/font&gt;&lt;/strong&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;深さ優先トラバーサルです&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;code&gt;object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ごとに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$$watchers&lt;/code&gt; &lt;code&gt;array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を反復処理し、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての式を評価します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新しい式の値が最後の既知の値と異なる場合、ウォッチャーの関数が呼び出されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この関数は、DOMの一部を再コンパイルしたり、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値を再計算したり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;AJAX&lt;/code&gt; &lt;code&gt;request&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;トリガーしたり、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必要なものを何でも実行できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="287c01a594c777e6def93fe6bfe0ca2101558958" translate="yes" xml:space="preserve">
          <source>A function which will be executed if the watcher is dirty.</source>
          <target state="translated">ウォッチャーがダーティな場合に実行される関数。</target>
        </trans-unit>
        <trans-unit id="4729c82301a3c543842ace5fe6896ce14e0331a4" translate="yes" xml:space="preserve">
          <source>A last known value of the expression. This can be checked against the current computed value of the expression. If the values differ the watcher will trigger the function and mark the &lt;code&gt;$scope&lt;/code&gt; as dirty.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;式の最後の既知の値。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、式の現在の計算値に対してチェックできます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値が異なる場合、ウォッチャーは関数をトリガーし、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をダーティとして&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;マークし&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f7a4cd7cf6fbab5ba3dec319212de69d6967eae1" translate="yes" xml:space="preserve">
          <source>An example where I passed the model is updated from server data is when you ask for a zip code and zip code based on written loads a list of colonies and cities associated with that view, and by default set the first value with the user. And this I worked very well, what does happen, is that &lt;code&gt;angularJS&lt;/code&gt; sometimes takes a few seconds to refresh the model, to do this you can put a spinner while displaying the data.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サーバーデータから更新されたモデルを渡した例は、郵便番号を要求すると、そのビューに関連付けられたコロニーと都市のリストをロードに基づいてロードし、デフォルトでユーザーに最初の値を設定する場合です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして、これが私が非常にうまく機能したことは何が起こるかというと、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;angularJS&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がモデルを更新するのに数秒かかることがあります。これを行うには、データを表示しながらスピナーを配置します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8da1959d807de663cf2b11afe60055d655f244eb" translate="yes" xml:space="preserve">
          <source>An expression which the watcher is monitoring. This might just be an &lt;code&gt;attribute&lt;/code&gt; name, or something more complicated.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ウォッチャーが監視している式。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは単なる&lt;/font&gt;&lt;/font&gt; &lt;code&gt;attribute&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;名か、もっと複雑なもの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;かもしれません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0f4d7984356ebcf25d2e6d62a2611834b289a5d9" translate="yes" xml:space="preserve">
          <source>Angular adds a watcher to the $$watchers for each of these</source>
          <target state="translated">Angularは、それぞれの$$watcherにウォッチャーを追加します。</target>
        </trans-unit>
        <trans-unit id="c1f96c7ee88fa3157584f1e739b926f3ad299b10" translate="yes" xml:space="preserve">
          <source>Angular do auto-magically updates only those model changes which are
  inside AngularJS context. When you do change in any model outside of
  the Angular context (like browser DOM events, setTimeout, XHR or third
  party libraries), then you need to inform Angular of the changes by
  calling $apply() manually. When the $apply() function call finishes
  AngularJS calls $digest() internally, so all data bindings are
  updated.</source>
          <target state="translated">AngularはAngularJSのコンテキスト内にあるモデルの変更のみを自動的に更新します。Angularのコンテキスト外のモデル(ブラウザのDOMイベント、setTimeout、XHR、サードパーティのライブラリなど)に変更があった場合は、手動で$apply()を呼び出して変更内容をAngularに通知する必要があります。apply()関数の呼び出しが終わると、AngularJSは内部的に$digest()を呼び出すので、すべてのデータバインディングが更新されます。</target>
        </trans-unit>
        <trans-unit id="4ee3d482254a050a513753124978cd73f85d5a94" translate="yes" xml:space="preserve">
          <source>Angular maintains a &lt;code&gt;oldValue&lt;/code&gt; and &lt;code&gt;newValue&lt;/code&gt; of every binding. And after every &lt;em&gt;Angular event&lt;/em&gt;, the famous &lt;code&gt;$digest()&lt;/code&gt; loop will check the WatchList to see if something changed. These &lt;em&gt;Angular events&lt;/em&gt; are &lt;code&gt;ng-click&lt;/code&gt;, &lt;code&gt;ng-change&lt;/code&gt;, &lt;code&gt;$http&lt;/code&gt; completed ...  The &lt;code&gt;$digest()&lt;/code&gt; will loop as long as any &lt;code&gt;oldValue&lt;/code&gt; differs from the &lt;code&gt;newValue&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Angular &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はすべてのバインディングの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;oldValue&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;newValue&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;維持してい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。そして、すべての&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Angularイベントの&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;後&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に、有名な&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$digest()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ループがWatchListをチェックして、何かが変更されたかどうかを確認します。これらの&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Angularイベント&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-click&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-change&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$http&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; completedです... &lt;/font&gt; &lt;code&gt;oldValue&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt; &lt;code&gt;newValue&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;と異なる&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;限り、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$digest()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はループします&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6897a7bb238c36acd615fe16d93b0865f419c091" translate="yes" xml:space="preserve">
          <source>Angular maintains a simple &lt;code&gt;array&lt;/code&gt; of watchers in the &lt;code&gt;$scope&lt;/code&gt; objects. If you inspect any &lt;code&gt;$scope&lt;/code&gt; you will find that it contains an &lt;code&gt;array&lt;/code&gt; called &lt;code&gt;$$watchers&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Angular &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクト&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でウォッチャーの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;単純な&lt;/font&gt;&lt;/font&gt; &lt;code&gt;array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;維持してい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたはどんな検査した場合&lt;/font&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたはそれが含まれていることがわかります&lt;/font&gt; &lt;code&gt;array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼ばれる&lt;/font&gt; &lt;code&gt;$$watchers&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bf0f962413a08a96f272491ff2fde4a07d077a61" translate="yes" xml:space="preserve">
          <source>Angular.js creates a watcher for every model we create in view. Whenever a model is changed, an &quot;ng-dirty&quot; class is appeneded to the model, so the watcher will observe all models which have the class &quot;ng-dirty&quot; &amp;amp; update their values in the controller &amp;amp; vice versa.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Angular.jsは、ビューで作成するすべてのモデルのウォッチャーを作成します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデルが変更されるたびに、「ng-dirty」クラスがモデルに付加されるため、ウォッチャーはクラス「ng-dirty」を持つすべてのモデルを監視し、コントローラーでその値を更新します（逆も同様）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="25576f174eab97ef207e9a46466bb2b7e362d6ba" translate="yes" xml:space="preserve">
          <source>AngularJS handle data-binding mechanism with the help of three powerful functions :      &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$watch&quot;&gt;$watch()&lt;/a&gt;,&lt;a href=&quot;https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest&quot;&gt;$digest()&lt;/a&gt;and &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply&quot;&gt;$apply()&lt;/a&gt;. Most of the time AngularJS will call the $scope.$watch() and $scope.$digest(), but
in some cases you may have to call these functions manually to update with new values.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AngularJSは、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$watch&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;$ watch（）&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;$ digest（）&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、および&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;$ apply（）&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の3つの強力な関数を使用してデータバインディングメカニズムを処理します &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ほとんどの場合、AngularJSは$ scope。$ watch（）および$ scope。$ digest（）を呼び出しますが、場合によっては、これらの関数を手動で呼び出して新しい値で更新する必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="adaa93c89cb1f65e12242562d8f52d1e5b339d30" translate="yes" xml:space="preserve">
          <source>AngularJS remembers the value and compares it to a previous value. This is basic dirty-checking. If there is a change in value, then it fires the change event.</source>
          <target state="translated">AngularJSは値を記憶していて、以前の値と比較しています。これは基本的なダーティチェックです。値に変更があれば、変更イベントを発生させます。</target>
        </trans-unit>
        <trans-unit id="fbef5694a622a1a4c9253ab37640ce184b463958" translate="yes" xml:space="preserve">
          <source>AngularJs supports &lt;strong&gt;Two way data-binding&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AngularJsは、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;双方向のデータバインディングを&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サポートしています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="efa79dd5413f9fd95b27c41dccb2665020217dc4" translate="yes" xml:space="preserve">
          <source>As Misko stated, around 2000 bindings are where you start to see problems, but you shouldn't have more than 2000 pieces of information on a page anyway. This may be true, but not every data-binding is visible to the user. Once you start building any sort of widget or data grid with two-way binding you can &lt;em&gt;easily&lt;/em&gt; hit 2000 bindings, without having a bad UX.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Miskoが述べたように、約2000のバインディングで問題が発生し始めますが、いずれにしても、ページに2000を超える情報はありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは本当かもしれませんが、すべてのデータバインディングがユーザーに見えるわけではありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;双方向バインディングを使用してあらゆる種類のウィジェットまたはデータグリッドの構築を開始&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すると、悪いUXを発生させることなく、2000バインディングを&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;簡単に&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行でき&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="37fbc5e79c6734b14dad81b7d685ccc6893e71b0" translate="yes" xml:space="preserve">
          <source>As you can see in the example above, &lt;strong&gt;AngularJS&lt;/strong&gt; uses &lt;code&gt;ng-model&lt;/code&gt; to listen and watch what happens on HTML elements, especially on &lt;code&gt;input&lt;/code&gt; fields. When something happens, do something. In our case, &lt;code&gt;ng-model&lt;/code&gt; is bind to our view, using the mustache notation &lt;code&gt;{{}}&lt;/code&gt;. Whatever is typed inside the input field is displayed on the screen instantly. And that's the beauty of data binding, using AngularJS in its simplest form.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記の例でわかるように、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AngularJS&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-model&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;して、HTML要素、特に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;input&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;フィールドで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;何が起こるかをリッスンして監視し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;何かが起こったら、何かしてください。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私たちの場合、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-model&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は口ひげ表記&lt;/font&gt;&lt;/font&gt; &lt;code&gt;{{}}&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用してビューにバインドされています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;入力フィールドに入力されたものはすべて、画面に即座に表示されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして、それがAngularJSを最も単純な形で使用するデータバインディングの美点です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="737afa2dc7c25184622f10ed905b43a86ad1a089" translate="yes" xml:space="preserve">
          <source>As you can see, every time something changes in an AngularJS app, AngularJS will check every single watcher in the &lt;code&gt;$scope&lt;/code&gt; hierarchy to see how to respond. For a developer this is a massive productivity boon, as you now need to write almost no wiring code, AngularJS will just notice if a value has changed, and make the rest of the app consistent with the change.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ご覧のとおり、AngularJSアプリで何かが変更されるたびに、AngularJSは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;階層&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内のすべてのウォッチャーをチェックして&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、応答方法を確認します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;開発者にとってこれは非常に生産性の恩恵です。配線コードをほとんど書く必要がないので、AngularJSは値が変更されたかどうかに気づき、アプリの残りの部分をその変更と一致させます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a79d468ad5e9c27dc450d53ed835dd90ea4fe4a0" translate="yes" xml:space="preserve">
          <source>At the end of the &lt;code&gt;$apply&lt;/code&gt; the &lt;code&gt;$digest&lt;/code&gt; method is invoked which goes
through each of the watches and checks to see if they changed since
last time the &lt;code&gt;$digest&lt;/code&gt; ran.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;終わりに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$apply&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;$digest&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法は、彼らは最後の時間以降に変更かどうかを確認するために時計や小切手のそれぞれを通過され呼び出される&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$digest&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;走りました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bcd2eb5356b9b892e7bf902bb23bd9186e6d6799" translate="yes" xml:space="preserve">
          <source>By dirty checking the &lt;code&gt;$scope&lt;/code&gt; object</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ダーティチェックする&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e0710b2f8c5ca3b1d6e227e2204bcfc446f57738" translate="yes" xml:space="preserve">
          <source>Change coalescence. Suppose you have an array of items. Say you want to add items into an array, as you are looping to add, each time you add you are firing events on change, which is rendering the UI. This is very bad for performance. What you want is to update the UI only once, at the end. The change events are too fine-grained.</source>
          <target state="translated">合体を変更します。アイテムの配列があるとします。アイテムを配列に追加したいとしますが、追加するためにループしているので、追加するたびに変更時にイベントが発生し、UIをレンダリングしています。これはパフォーマンスにとって非常に悪いことです。あなたが望むのは、最後に一度だけUIを更新することです。変更イベントが細かすぎます。</target>
        </trans-unit>
        <trans-unit id="77c891a95974122552c0d70ba96a05fea9fafba4" translate="yes" xml:space="preserve">
          <source>Change listeners fire immediately on a setter, which is a problem, since the change listener can further change data, which fires more change events. This is bad since on your stack you may have several change events happening at once. Suppose you have two arrays which need to be kept in sync for whatever reason. You can only add to one or the other, but each time you add you fire a change event, which now has an inconsistent view of the world. This is a very similar problem to thread locking, which JavaScript avoids since each callback executes exclusively and to completion. Change events break this since setters can have far-reaching consequences which are not intended and non obvious, which creates the thread problem all over again. It turns out that what you want to do is to delay the listener execution, and guarantee, that only one listener runs at a time, hence any code is free to change data, and it knows that no other code runs while it is doing so.</source>
          <target state="translated">チェンジリスナーはセッターですぐに起動しますが、これは問題です。スタック上で複数の変更イベントが一度に発生する可能性があるので、これは良くありません。何らかの理由で同期を保つ必要がある 2 つの配列があるとします。片方かもう片方にしか追加できませんが、追加するたびに変更イベントが発生し、世界観が一貫しなくなってしまいます。これはスレッドロックと非常に似た問題で、JavaScriptでは各コールバックが排他的に実行され、完了するまで実行されるため、これを回避することができます。変更イベントは、セッターが意図していない、あるいは明らかでない広範囲な結果をもたらす可能性があるため、これを回避することができません。リスナーの実行を遅らせて、一度に1つのリスナーだけが実行されることを保証することで、どのコードでもデータを変更することができます。</target>
        </trans-unit>
        <trans-unit id="aa1e7dcbb0597e8ac8563615ae3d1825d9496839" translate="yes" xml:space="preserve">
          <source>Changes to watched items must be made within a block of code
wrapped by the &lt;code&gt;$apply&lt;/code&gt; method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;監視対象アイテムの変更は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$apply&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ラップされたコードブロック内で行う必要があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b536777ff175ae7f0dadd5ccfd9e78c00761a19e" translate="yes" xml:space="preserve">
          <source>Conclusions</source>
          <target state="translated">Conclusions</target>
        </trans-unit>
        <trans-unit id="04738af7725b2e98757c86e363c8914ab552c47c" translate="yes" xml:space="preserve">
          <source>Consider, for example, a combo box where you can type text to filter the available options. This sort of control could have ~150 items and still be highly usable. If it has some extra feature (for example a specific class on the currently selected option) you start to get 3-5 bindings per option. Put three of these widgets on a page (e.g. one to select a country, the other to select a city in the said country, and the third to select a hotel) and you are somewhere between 1000 and 2000 bindings already.</source>
          <target state="translated">例えば、テキストを入力して利用可能なオプションをフィルタリングできるコンボボックスを考えてみましょう。この種のコントロールは、~150個の項目を持っていても、非常に使い勝手が良いです。追加機能(例えば、現在選択されているオプションに特定のクラスを設定するなど)があれば、オプションごとに3~5個のバインディングを取得することができるようになります。これらのウィジェットのうち3つをページに置くと (例えば、1つは国を選択するため、もう1つはその国の都市を選択するため、そして3つ目はホテルを選択するため)、すでに1000から2000の間のどこかにバインドされていることになります。</target>
        </trans-unit>
        <trans-unit id="38c9337e102844fbe073028e31a3f03dfd28fcd6" translate="yes" xml:space="preserve">
          <source>Data binding lets you treat the model as the single-source-of-truth in your application. The view is a projection of the model at all times. If the model is changed, the view reflects the change and vice versa.</source>
          <target state="translated">データバインディングでは、モデルをアプリケーションの単一の真実のソースとして扱うことができます。ビューは常にモデルの投影です。モデルが変更されると、ビューには変更が反映され、その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="41d6ccf94599c075293f64da897cc14ce18c72a7" translate="yes" xml:space="preserve">
          <source>Data-Binding needs a mapping</source>
          <target state="translated">データバインディングにはマッピングが必要</target>
        </trans-unit>
        <trans-unit id="53cfd605042a9685d0d23f950654e2d90a38e47f" translate="yes" xml:space="preserve">
          <source>Data-binding in Angular apps is the automatic synchronisation of data between the model and view components.</source>
          <target state="translated">Angularアプリにおけるデータバインディングとは、モデルとビューのコンポーネント間でデータを自動的に同期させることです。</target>
        </trans-unit>
        <trans-unit id="5934654605974e05a5cca46342e4add1e6e8bca2" translate="yes" xml:space="preserve">
          <source>Digest cycle function:</source>
          <target state="translated">ダイジェストサイクル機能。</target>
        </trans-unit>
        <trans-unit id="67bdd0d045b9621fed41646eae45fdacd100225f" translate="yes" xml:space="preserve">
          <source>Digest cycle is called automatically triggered as part of angular js built in directives/services like ng-model , ng-bind , $timeout, ng-click and others.. that let you trigger the digest cycle.</source>
          <target state="translated">ダイジェストサイクルは、ng-model,ng-bind,$timeout,ng-clickなどのdirectivesservicesに組み込まれたAngular jsの一部として自動的に呼び出され、ダイジェストサイクルをトリガーすることができます。</target>
        </trans-unit>
        <trans-unit id="edf2df3cebeb7068c67f0f8fcf259a256e8d43b4" translate="yes" xml:space="preserve">
          <source>Each time your user interacts with your app, every single watcher in your app will be evaluated at least once. A big part of optimising an AngularJS app is reducing the number of watchers in your &lt;code&gt;$scope&lt;/code&gt; tree. One easy way to do this is with &lt;em&gt;one time binding&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ユーザーがアプリを操作するたびに、アプリ内のすべてのウォッチャーが少なくとも1回評価されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AngularJSアプリの最適化の大きな部分は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ツリーの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ウォッチャーの数を減らすこと&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これを行う簡単な方法の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1つ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1回限りのバインディング&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9c05d40154f2b4c392454198d496e63c5efbde51" translate="yes" xml:space="preserve">
          <source>Each watcher is an &lt;code&gt;object&lt;/code&gt; that contains among other things</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;各ウォッチャーは、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他のものを含む&lt;/font&gt;&lt;/font&gt; &lt;code&gt;object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="08048692776861edadc2dbcb23494dab4e7cab0f" translate="yes" xml:space="preserve">
          <source>Events leads to $digest()</source>
          <target state="translated">イベントは$digest()につながります。</target>
        </trans-unit>
        <trans-unit id="1999f5595c55decba8e973c1baa963538f547a35" translate="yes" xml:space="preserve">
          <source>Every scope is traversed and every watch expression evaluated and checked against the last value.</source>
          <target state="translated">すべてのスコープがトラバースされ、すべてのウォッチ式が評価され、最後の値と照合されます。</target>
        </trans-unit>
        <trans-unit id="3fde00899391e695c237589b8f69f3b46e5c7578" translate="yes" xml:space="preserve">
          <source>Explaining with Pictures :</source>
          <target state="translated">写真を使って説明しています。</target>
        </trans-unit>
        <trans-unit id="24e795a953c3ca2043687acd912052593a9b0ba7" translate="yes" xml:space="preserve">
          <source>First one is a watcher function which just returns the object or we can just add an expression.</source>
          <target state="translated">最初のものは、オブジェクトを返すだけのウォッチャー関数ですが、式を追加することもできます。</target>
        </trans-unit>
        <trans-unit id="f5db049bbbb9e77f2e7abb9fa13d29e74b53f616" translate="yes" xml:space="preserve">
          <source>For example if the model had something like:</source>
          <target state="translated">例えば、モデルにこんなものがあったとします。</target>
        </trans-unit>
        <trans-unit id="a26ff29486dd859efb930e73cff198672e8c1db8" translate="yes" xml:space="preserve">
          <source>From the perspective of the machine though this is wildly inefficient and will slow our app down if we create too many watchers. Misko has quoted a figure of about 4000 watchers before your app will feel slow on older browsers.</source>
          <target state="translated">しかし、マシンの観点から見ると、これは非常に効率が悪く、ウォッチャーを作りすぎるとアプリが遅くなってしまいます。Miskoは、古いブラウザでアプリが遅く感じるようになる前に、約4000人のウォッチャーの数字を引用しています。</target>
        </trans-unit>
        <trans-unit id="6b5d848557beff3ca27b16e316546c260f2f5158" translate="yes" xml:space="preserve">
          <source>Here if you want to use input &lt;code&gt;name&lt;/code&gt; in the controller then,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で、コントローラで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;入力&lt;/font&gt;&lt;/font&gt; &lt;code&gt;name&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用する場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="abf84c6c85867c652efadb878febf74268cb94de" translate="yes" xml:space="preserve">
          <source>Here in above example whatever input user will give, It will be visible in &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記の例では、ユーザーが入力する入力はすべて&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タグで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e61aa1cba9e6c9aeb8141c1c1d1742560bba644d" translate="yes" xml:space="preserve">
          <source>Here is an example of data binding with AngularJS, using an input field. I will explain later</source>
          <target state="translated">AngularJSで入力フィールドを使ってデータをバインドした例をご紹介します。後ほど説明します。</target>
        </trans-unit>
        <trans-unit id="1aaba0345af07c860b35fb4c80fc9c3aad3a3673" translate="yes" xml:space="preserve">
          <source>Here, when you modify the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, you touch the &lt;strong&gt;data-ref3&lt;/strong&gt;. And the classic data-bind mecanism will change &lt;strong&gt;data-ref4&lt;/strong&gt;. So how the other &lt;code&gt;{{data}}&lt;/code&gt; expressions will move ?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を変更するときに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;data-ref3に触れ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして、古典的なデータバインドメカニズムは&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;data-ref4&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を変更し&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では、他の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;{{data}}&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;式は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どのように&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;動くのでしょうか？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a6a0ce9031e0776d5fc6120b3023d51bccf114f1" translate="yes" xml:space="preserve">
          <source>Hope this helps.</source>
          <target state="translated">これが助けになることを願っています。</target>
        </trans-unit>
        <trans-unit id="72856d6ab746c0e7dce884ff804eef9218f95f83" translate="yes" xml:space="preserve">
          <source>How does data binding work in AngularJS</source>
          <target state="translated">AngularJSでのデータバインディングの仕組み</target>
        </trans-unit>
        <trans-unit id="811938083dc4a1506a5fffbb7dcd3afefd093cb8" translate="yes" xml:space="preserve">
          <source>How does data binding work in the &lt;code&gt;AngularJS&lt;/code&gt; framework?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;AngularJS&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;フレームワーク&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でデータバインディングはどのように機能します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;か？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b4092cb5028284c4f70ad111654a59eae29e5aeb" translate="yes" xml:space="preserve">
          <source>How to avoid creating too many watchers</source>
          <target state="translated">ウォッチャーを作りすぎないようにする方法</target>
        </trans-unit>
        <trans-unit id="ab2ba6105e0812e7f41747d9629bf67642b2443b" translate="yes" xml:space="preserve">
          <source>How watchers are defined</source>
          <target state="translated">ウォッチャーの定義</target>
        </trans-unit>
        <trans-unit id="100f16b029687f5c04393f39efd21cce04a9d408" translate="yes" xml:space="preserve">
          <source>Humans are:</source>
          <target state="translated">人間は。</target>
        </trans-unit>
        <trans-unit id="f771cf38309d8e303737f960b8e1ee9d5fa25d29" translate="yes" xml:space="preserve">
          <source>I find this to be a &lt;strong&gt;huge&lt;/strong&gt; problem when working with AngularJS, and the only solution I've been able to find so far is to construct widgets without using two-way binding, instead of using ngOnce, deregistering watchers and similar tricks, or construct directives which build the DOM with jQuery and DOM manipulation. I feel this defeats the purpose of using Angular in the first place.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はAngularJSで作業するときに&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;大きな&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;問題であることがわかりました。これまでに見つけられた唯一の解決策は、ngOnceを使用する代わりに双方向バインディングを使用せずにウィジェットを構築し、ウォッチャーと同様のトリックを登録解除するか、または構築することですjQueryとDOM操作でDOMを構築するディレクティブ。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そもそも、これはAngularを使用する目的に反するものだと思います。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3cce5ace8b3744fb015ccf880633cfe7cc6b5814" translate="yes" xml:space="preserve">
          <source>I found that there are &lt;a href=&quot;https://stackoverflow.com/questions/1029241/javascript-object-watch-for-all-browsers&quot;&gt;JavaScript watchers&lt;/a&gt; that may do this work. But they are not supported in &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_6&quot;&gt;Internet&amp;nbsp;Explorer&amp;nbsp;6&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_7&quot;&gt;Internet&amp;nbsp;Explorer&amp;nbsp;7&lt;/a&gt;. So how does AngularJS know that I changed for example the following and reflected this change on a view?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この作業を行う&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1029241/javascript-object-watch-for-all-browsers&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScriptウォッチャーが&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あること&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がわかりました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_6&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Internet Explorer 6&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_7&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Internet Explorer 7 &lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サポートされていません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では、AngularJSは、たとえば次の変更を行い、この変更をビューに反映したことをどのようにして知るのでしょうか。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1de9c7f3209ea909ee2644a83f8b7a0597e60b39" translate="yes" xml:space="preserve">
          <source>I haven't found technical details on &lt;a href=&quot;http://angularjs.org&quot;&gt;their site&lt;/a&gt;. It's more or less clear how it works when data is propagated from view to model. But how does AngularJS track changes of model properties without setters and getters?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://angularjs.org&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;彼らのサイトで&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;技術的な詳細は見つかりませんでした&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;データがビューからモデルに伝達されるときにどのように機能するかはほぼ明らかです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、AngularJSは、セッターやゲッターなしでモデルプロパティの変更をどのように追跡するのでしょうか。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3bb7cb327e6090eec145fd3400cccddf72e28acc" translate="yes" xml:space="preserve">
          <source>I wondered this myself for a while. Without setters how does &lt;code&gt;AngularJS&lt;/code&gt; notice changes to the &lt;code&gt;$scope&lt;/code&gt; object? Does it poll them?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しばらくこれを自分で考えた。セッターがなければ、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;AngularJS&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変更に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どのように&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;気付く&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でしょうか？それらをポーリングしますか？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9fd4c7597da7bda76a445582e5711ea629ddaea8" translate="yes" xml:space="preserve">
          <source>I would love to hear suggestions on other ways to handle this, but then maybe I should write my own question. I wanted to put this in a comment, but it turned out to be way too long for that...</source>
          <target state="translated">他にも対処法があれば教えていただきたいのですが、それならば自分で質問を書いた方がいいのかもしれません。コメントに書き込もうと思ったのですが、長くなりすぎてしまいました...。</target>
        </trans-unit>
        <trans-unit id="c9c6e1411333d79894f31f96b1b2abf469641d9b" translate="yes" xml:space="preserve">
          <source>If a watcher is triggered, the &lt;code&gt;$scope&lt;/code&gt; is dirty</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ウォッチャーがトリガーされた場合、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はダーティです&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="45bb602373f8c144ed802f1013ba835906212ef9" translate="yes" xml:space="preserve">
          <source>If a watcher is triggered, the app knows something has changed, and the &lt;code&gt;$scope&lt;/code&gt; is marked as dirty.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ウォッチャーがトリガーされると、アプリは何かが変更されたことを認識し、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はダーティとしてマークされます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9754f028f3820afdf781852e2300bdcd1bd49e5a" translate="yes" xml:space="preserve">
          <source>If any changes are found then the digest is invoked again until all changes stabilize.</source>
          <target state="translated">何らかの変更が見つかった場合は、すべての変更が安定するまでダイジェストが再度実行されます。</target>
        </trans-unit>
        <trans-unit id="dc49c0ac42bacc60d1fd64ddb061940ef36b5e04" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$digest&lt;/code&gt; is dirty, we execute the entire &lt;code&gt;$digest&lt;/code&gt; cycle again</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;$digest&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がダーティである&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;$ &lt;/font&gt;&lt;/font&gt; &lt;code&gt;$digest&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サイクル&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;全体を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;再度&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行します&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2fc6fe8831ed56fa2f83cd2185e8c4d3af21ff79" translate="yes" xml:space="preserve">
          <source>If want to bind input from html to controller:-</source>
          <target state="translated">htmlからの入力をコントローラにバインドしたい場合は、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="fc233c384289e4ba733c6143276863ae3e11acf9" translate="yes" xml:space="preserve">
          <source>If we reach the digest limit AngularJS will raise an error in the console:</source>
          <target state="translated">ダイジェスト制限に達するとAngularJSはコンソールでエラーを出します。</target>
        </trans-unit>
        <trans-unit id="b182bb47efd5ceffd0f9647d638795a8d4f4ba86" translate="yes" xml:space="preserve">
          <source>If we use JavaScript&amp;rsquo;s &lt;strong&gt;setTimeout()&lt;/strong&gt; function to update a scope model, Angular has no way of knowing what you might change. In this case it&amp;rsquo;s our responsibility to call $apply() manually, which triggers a $digest cycle. Similarly, if you have a directive that sets up a DOM event listener and changes some models inside the handler function, you need to call $apply() to ensure the changes take effect. The big idea of $apply is that we can execute some code that isn't aware of Angular, that code may still change things on the scope. If we wrap that code in $apply , it will take care of calling $digest(). Rough implementation of $apply().</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScriptの&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;setTimeout（）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;てスコープモデルを更新する場合、Angularは何を変更するかを知る方法がありません。この場合、$ apply（）を手動で呼び出して$ digestサイクルをトリガーするのは私たちの責任です。同様に、DOMイベントリスナーを設定し、ハンドラー関数内の一部のモデルを変更するディレクティブがある場合は、$ apply（）を呼び出して、変更を有効にする必要があります。 $ applyの大きなアイデアは、Angularを認識しないコードを実行できるということです。そのコードは、スコープの設定を変更する可能性があります。そのコードを$ applyでラップすると、$ digest（）の呼び出しが処理されます。 $ apply（）の大まかな実装。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="acdee26d7393979df447003717d465f503612861" translate="yes" xml:space="preserve">
          <source>If you have data which will rarely change, you can bind it only once using the :: syntax, like so:</source>
          <target state="translated">滅多に変更されないデータを持っている場合は、次のように ::構文を使って一度だけバインドすることができます。</target>
        </trans-unit>
        <trans-unit id="f2797b9f1ba27fd200e5c9c4c6af64e50a08620b" translate="yes" xml:space="preserve">
          <source>In normal development, data-binding syntax in the HTML tells the AngularJS compiler to create the watches for you and controller methods are run inside &lt;code&gt;$apply&lt;/code&gt; already. So to the application developer it is all transparent.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通常の開発では、HTMLのデータバインディング構文はAngularJSコンパイラーにウォッチを作成するように指示し、コントローラーメソッドは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$apply&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;既に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、アプリケーション開発者にとっては、すべてが透過的です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="67037b0a8b5a6bff39857e9b537abcdf932d0df1" translate="yes" xml:space="preserve">
          <source>In the previous picture, it will notice that data-ref1 and data-ref2 has changed.</source>
          <target state="translated">前の画像では、data-ref1とdata-ref2が変更されていることに気づくでしょう。</target>
        </trans-unit>
        <trans-unit id="8a8356ec773654ca4bdbd056cf3d9a35ffe5458b" translate="yes" xml:space="preserve">
          <source>Issues with change listeners:</source>
          <target state="translated">チェンジリスナーの問題点。</target>
        </trans-unit>
        <trans-unit id="f3d16a96c54aef7c6ebe0587ea01873f549a3af8" translate="yes" xml:space="preserve">
          <source>It happened that I needed to link a data model of a person with a form, what I did was a direct mapping of the data with the form.</source>
          <target state="translated">それは私がフォームと人のデータモデルをリンクする必要があることが起こった、私がしたことは、フォームとデータの直接マッピングでした。</target>
        </trans-unit>
        <trans-unit id="343562dfa3bd11083e7175cd655a02ac86844311" translate="yes" xml:space="preserve">
          <source>It turns out that video games and GPUs use the dirty-checking approach, specifically because it is consistent. As long as they get over the monitor refresh rate (typically 50-60 Hz, or every 16.6-20 ms), any performance over that is a waste, so you're better off drawing more stuff, than getting FPS higher.</source>
          <target state="translated">ビデオゲームやGPUはダーティチェックのアプローチを使っていることが判明しました、特にそれが一貫しているからです。モニターのリフレッシュレート(通常50~60Hz、16.6~20ms毎)を超えている限り、それ以上の性能は無駄なので、FPSを高くするよりも、より多くのものを描画した方が良いです。</target>
        </trans-unit>
        <trans-unit id="274f1724f9cedd0714f587c409d9a100538443a6" translate="yes" xml:space="preserve">
          <source>It's a little like the Egg and Chicken. You never know who starts, but hopefully it works most of the time as expected.</source>
          <target state="translated">それは少し卵と鶏のようなものです。誰が始めるかわからないが、うまくいけば大抵の場合は期待通りの結果になるだろう。</target>
        </trans-unit>
        <trans-unit id="1525bd60097acc3d807b5139debefd7ba132b0ea" translate="yes" xml:space="preserve">
          <source>Items are watched by passing a function (returning the thing to be
watched) to the &lt;code&gt;$watch&lt;/code&gt; method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アイテムは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$watch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数（監視対象を返す）を渡すことで監視され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="519ea33e338b0e1bee563a64730e09aa647199f5" translate="yes" xml:space="preserve">
          <source>Means you can access data &lt;strong&gt;View -&amp;gt; Controller&lt;/strong&gt; &amp;amp; &lt;strong&gt;Controller -&amp;gt; View&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;データ&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビューに&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アクセスできることを意味します&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-&amp;gt;コントローラー&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;＆&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントローラー-&amp;gt;表示&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e33d668c8f945d34b9f05ee30f75c1e4213cde48" translate="yes" xml:space="preserve">
          <source>Misko already gave an excellent description of how the data bindings work, but I would like to add my view on the performance issue with the data binding.</source>
          <target state="translated">Miskoはすでにデータバインディングがどのように機能するかについて素晴らしい説明をしてくれましたが、私はデータバインディングのパフォーマンスの問題について私の見解を追加したいと思います。</target>
        </trans-unit>
        <trans-unit id="f98f946369ce6e582d4af4e03e409d9f9dc2ef40" translate="yes" xml:space="preserve">
          <source>Note:
$apply() is equal to $rootScope.$digest() this  means the dirty checking starts right from the root or top or the parent scope down to all the child $scopes in the angular js application.</source>
          <target state="translated">注意:$apply()は $rootScope.$digest()と同じです。つまり、ダーティチェックはルートやトップ、親スコープから始まり、Angular js アプリケーションのすべての子スコープに至るまで始まります。</target>
        </trans-unit>
        <trans-unit id="c93e786087831c4f1fafb334ae9947a471cc20d6" translate="yes" xml:space="preserve">
          <source>Obviously there is no periodic checking of &lt;code&gt;Scope&lt;/code&gt; whether there is any change in the Objects attached to it. Not all the objects attached to scope are watched . Scope prototypically maintains a &lt;strong&gt;$$watchers&lt;/strong&gt; . &lt;code&gt;Scope&lt;/code&gt; only iterates through this &lt;code&gt;$$watchers&lt;/code&gt; when &lt;code&gt;$digest&lt;/code&gt; is called .</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アタッチされているオブジェクトに変更があるかどうか&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の定期的なチェックはありません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スコープにアタッチされているすべてのオブジェクトが監視されるわけではありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スコープは&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;$$ watchersを&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロトタイプで維持し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;$digest&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;が呼び出された&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ときに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のみ、この&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$$watchers&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;反復処理し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c86e0e64f0406905129a3f72489210a41131f5c7" translate="yes" xml:space="preserve">
          <source>Or consider a data-grid in a corporate web application. 50 rows per page is not unreasonable, each of which could have 10-20 columns. If you build this with ng-repeats, and/or have information in some cells which uses some bindings, you could be approaching 2000 bindings with this grid alone.</source>
          <target state="translated">あるいは、企業のウェブアプリケーションのデータグリッドを考えてみましょう。1ページあたり50行というのは不合理ではありませんが、それぞれが10~20列の列を持つことができます。これを ng-repeats で構築し、いくつかのセルにいくつかのバインディングを使用する情報がある場合、このグリッドだけで2000個のバインディングに近づくことができます。</target>
        </trans-unit>
        <trans-unit id="9b8a08e18d95dbfa2c87458daac1a9abc11ba8cb" translate="yes" xml:space="preserve">
          <source>Second one is a listener function which will be called when there is a change in the object. All the things like DOM changes will be implemented in this function.</source>
          <target state="translated">2つ目は、オブジェクトに変更があったときに呼び出されるリスナー関数です。DOM の変更のようなものはすべてこの関数で実装されます。</target>
        </trans-unit>
        <trans-unit id="3fd1ca72ff9c0211014fb86b642296ec816618c7" translate="yes" xml:space="preserve">
          <source>See a working example here on
&lt;a href=&quot;http://codepen.io/chrisN/pen/YqEmOO&quot;&gt;Codepen&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;a href=&quot;http://codepen.io/chrisN/pen/YqEmOO&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Codepenの実際の&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例を &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;見る&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="693b3d4126317443f94c9a270b3d9ac192e6d991" translate="yes" xml:space="preserve">
          <source>So it is easy to bind data in AngularJs.</source>
          <target state="translated">なので、AngularJsでデータをバインドするのは簡単です。</target>
        </trans-unit>
        <trans-unit id="c9b7e10aa62d01a0083a0bafbc14a25d628a5a04" translate="yes" xml:space="preserve">
          <source>So it may seem that we are slow, since dirty-checking is inefficient. This is where we need to look at real numbers rather than just have theoretical arguments, but first let's define some constraints.</source>
          <target state="translated">なので、ダーティチェックは効率が悪いので、遅いと思われるかもしれません。ここで理論的な議論ではなく実数を見ていく必要があるのですが、まずはいくつかの制約を定義してみましょう。</target>
        </trans-unit>
        <trans-unit id="31ff2a053dd930ba998f5931530fbca741e8b5b1" translate="yes" xml:space="preserve">
          <source>So the real question is this: How many comparisons can you do on a browser in 50&amp;nbsp;ms? This is a hard question to answer as many factors come into play, but here is a test case: &lt;a href=&quot;http://jsperf.com/angularjs-digest/6&quot;&gt;http://jsperf.com/angularjs-digest/6&lt;/a&gt; which creates 10,000 watchers. On a modern browser this takes just under 6&amp;nbsp;ms. On &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_8&quot;&gt;Internet&amp;nbsp;Explorer&amp;nbsp;8&lt;/a&gt; it takes about 40&amp;nbsp;ms. As you can see, this is not an issue even on slow browsers these days. There is a caveat: The comparisons need to be simple to fit into the time limit... Unfortunately it is way too easy to add a slow comparison into AngularJS, so it is easy to build slow applications when you don't know what you are doing. But we hope to have an answer by providing an instrumentation module, which would show you which are the slow comparisons.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それで本当の質問はこれです：ブラウザで50ミリ秒でいくつの比較ができますか？これは、多くの要因が遊びに来るような答えに難しい質問ですが、ここではテストケースである：&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://jsperf.com/angularjs-digest/6&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://jsperf.com/angularjs-digest/6&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;万のウォッチャーが作成されます。最近のブラウザーでは、これには6ミリ秒未満かかります。上&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_8&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のInternet Explorer 8&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;には、約40ミリ秒かかります。ご覧のとおり、最近の遅いブラウザでも問題はありません。注意点があります：比較は時間制限に合わせるために単純である必要があります...残念ながら、AngularJSに遅い比較を追加するのはあまりにも簡単です。やっている。しかし、どの比較が遅いかを示すインストルメンテーションモジュールを提供することで、答えが得られることを期待しています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="174534c6b3882921f07bb41f7a29c9824d9b171b" translate="yes" xml:space="preserve">
          <source>Thank you.</source>
          <target state="translated">ありがとうございます。</target>
        </trans-unit>
        <trans-unit id="92577ceb7120ac7b142fac481d75199d5e0a53f3" translate="yes" xml:space="preserve">
          <source>That way if you modify the value of the object controller, this will be reflected automatically in the view.</source>
          <target state="translated">これにより、オブジェクトコントローラの値を変更した場合、自動的にビューに反映されます。</target>
        </trans-unit>
        <trans-unit id="2003e784c284ddbed19467eee8de2a001cf6b923" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$apply()&lt;/code&gt; method, which is what you call when you are transitioning from a non-AngularJS world into an AngularJS world, calls &lt;code&gt;$digest()&lt;/code&gt;. A digest is just plain old dirty-checking. It works on all browsers and is totally predictable.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;$apply()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたはAngularJS世界に非AngularJS世界から移行しているときに呼んで方法は、呼び出し&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$digest()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ダイジェストは、単純に古いダーティーチェックです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべてのブラウザで動作し、完全に予測可能です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0b522c9d331f9c497ebd37172926a4cbfa51cfad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$digest&lt;/code&gt; cycle checks all watchers against their last value</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;$digest&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サイクルチェックに彼らの最後の値に対するすべてのウォッチャー&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="57d293436789127bbfd7b6ac942ebead8614f1b9" translate="yes" xml:space="preserve">
          <source>The above features work in the browsers IE for the mentioned versions also just by making sure your application is angular js application which means you are using the angularjs framework script file referenced in the script tag.</source>
          <target state="translated">上記の機能はブラウザIEでも動作しますが、アプリケーションがAngular jsアプリケーションであることを確認するだけで、スクリプトタグで参照されているAngularjsフレームワークのスクリプトファイルを使用しています。</target>
        </trans-unit>
        <trans-unit id="468988dca821eab1366620955fd6086c27fd11e1" translate="yes" xml:space="preserve">
          <source>The binding will only be triggered when the containing template is rendered and the data loaded into &lt;code&gt;$scope&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バインディングは、含まれているテンプレートがレンダリングされ、データが&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;読み込まれたときにのみトリガーされ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="15405ba0c4fa31d34c3dffcbf02c552e4ca0b07b" translate="yes" xml:space="preserve">
          <source>The control input of the form:</source>
          <target state="translated">フォームの制御入力です。</target>
        </trans-unit>
        <trans-unit id="3e6b0df17c0aaea4b70014e68b2e206f24d35edc" translate="yes" xml:space="preserve">
          <source>The data binding can cause performance issues on complex pages.</source>
          <target state="translated">データの結合は、複雑なページでパフォーマンスの問題を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="25004e2affdfc42b03e4884351a5cc585b221410" translate="yes" xml:space="preserve">
          <source>The digest is hard on the machine but easy on the developer</source>
          <target state="translated">ダイジェストは機械には難しくても、開発者にはやさしい</target>
        </trans-unit>
        <trans-unit id="08cbe99aa8a083947a0b23f9775c4b49f46dc65a" translate="yes" xml:space="preserve">
          <source>The one-way data binding is an approach where a value is taken from the data model and inserted into an HTML element. There is no way to update model from view. It is used in classical template systems. These systems bind data in only one direction.</source>
          <target state="translated">一方通行のデータバインディングは、データモデルから値を取り出してHTML要素に挿入するアプローチです。ビューからモデルを更新する方法はありません。これは、古典的なテンプレートシステムで使用されています。これらのシステムでは、データを一方向のみにバインドします。</target>
        </trans-unit>
        <trans-unit id="395b6fe80ec647c86c7ba13a79a819f5b1d4ef1c" translate="yes" xml:space="preserve">
          <source>The other point is that you can understand easily the impact deep of a simple binding on the memory and the CPU. Hopefully Desktops are fat enough to handle this. Mobile phones are not that strong.</source>
          <target state="translated">もう一つのポイントは、単純なバインディングでメモリやCPUに与える影響の深さが分かりやすいということです。うまくいけばデスクトップが太くても大丈夫。携帯電話はそこまで強くない。</target>
        </trans-unit>
        <trans-unit id="dedae52c9852165a86fa875d38e2c1e75a87ccf1" translate="yes" xml:space="preserve">
          <source>The reference in the scope is not exactly the reference   in the template. When you data-bind two objects, you need a third one that listen to the first and modify the other.</source>
          <target state="translated">スコープ内の参照はテンプレート内の参照とは異なります。2つのオブジェクトをデータバインドする場合、1つ目のオブジェクトをリッスンしてもう1つのオブジェクトを修正する3つ目のオブジェクトが必要になります。</target>
        </trans-unit>
        <trans-unit id="c91a85811c33fbcef6fa8731745c927c0012d820" translate="yes" xml:space="preserve">
          <source>The syntax is atrocious, since browsers do not support it natively. Yes, there are proxies, but they are not semantically correct in all cases, and of course there are no proxies on old browsers. The bottom line is that dirty-checking allows you to do &lt;a href=&quot;http://en.wikipedia.org/wiki/Plain_Old_Java_Object&quot;&gt;POJO&lt;/a&gt;, whereas KnockoutJS and Backbone.js force you to inherit from their classes, and access your data through accessors.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ブラウザーはそれをネイティブでサポートしていないため、構文はひどいです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はい、プロキシはありますが、すべてのケースで意味的に正しいわけではありません。もちろん、古いブラウザにはプロキシはありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、ダーティチェックでは&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Plain_Old_Java_Object&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;POJO&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を実行できますが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、KnockoutJSとBackbone.jsではクラスからの継承を強制し、アクセサを介してデータにアクセスします。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a43dba51173aab39fa19ef60ae9870ffdf5e18cd" translate="yes" xml:space="preserve">
          <source>The third being an optional parameter which takes in a boolean . If its true , angular deep watches the object &amp;amp; if its false Angular just does a reference watching on the object.
    Rough Implementation of $watch looks like this</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;3番目は、ブール値を受け取るオプションのパラメーターです。そのtrueの場合、angular deepはオブジェクトを監視し、そのfalseのAngularはオブジェクトを参照するだけです。 $ watchの大まかな実装は次のようになります&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a3c98a925e6264735a9cd6c4c03c15427dac1af8" translate="yes" xml:space="preserve">
          <source>There are many different ways of defining a watcher in AngularJS.</source>
          <target state="translated">AngularJSでウォッチャーを定義する方法はいろいろあります。</target>
        </trans-unit>
        <trans-unit id="8237def3104a80cff7eecee796adaf84abd4fa04" translate="yes" xml:space="preserve">
          <source>There is an interesting thing in Angular called Digest Cycle. The $digest cycle starts as a result of a call to $scope.$digest(). Assume that you change a $scope model in a handler function through the ng-click directive. In that case AngularJS automatically triggers a $digest cycle by calling $digest().In addition to ng-click, there are several other built-in directives/services that let you change models (e.g. ng-model, $timeout, etc) and automatically trigger a $digest cycle.  The rough implementation of $digest looks like this.</source>
          <target state="translated">Angularにはダイジェストサイクルという面白いものがあります。ダイジェストサイクルは$scope.$digest()への呼び出しの結果として開始されます。ハンドラ関数の中の$scopeのモデルをng-clickディレクティブで変更したとします。ng-click以外にも、モデルを変更して自動的に$digestサイクルを起動するための組み込みのディレクティブサービスがいくつかあります(例:ng-model、$timeoutなど)。ダイジェストの大まかな実装は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="e2e20ff3c295188e752a47e4f991273ed16c6dfd" translate="yes" xml:space="preserve">
          <source>This function is used to observe changes in a variable on the $scope.
  It accepts three parameters: expression, listener and equality object,
  where listener and equality object are optional parameters.</source>
          <target state="translated">この関数は、$scope上の変数の変化を観測するために使用します。この関数は、expression、listener および equality object の 3 つのパラメータを受け取ります。</target>
        </trans-unit>
        <trans-unit id="3dd9be14c4e8bc97123d1fd8dc61ae080e1b9123" translate="yes" xml:space="preserve">
          <source>This function iterates through all the watches in the $scope object,
  and its child $scope objects</source>
          <target state="translated">この関数は、$scope オブジェクト内のすべてのウォッチとその子の $scope オブジェクトを繰り返し処理します。</target>
        </trans-unit>
        <trans-unit id="91a26da78200b3aef1cb1945d188957561dfd228" translate="yes" xml:space="preserve">
          <source>This is because AngularJS has two-way binding, so data can be passed back up the &lt;code&gt;$scope&lt;/code&gt; tree. We may change a value on a higher &lt;code&gt;$scope&lt;/code&gt; that has already been digested. Perhaps we change a value on the &lt;code&gt;$rootScope&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、AngularJSに双方向バインディングがあるため、データを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ツリーに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;戻すことができるため&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すでにダイジェストされている&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;より高い&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値を変更する場合があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;おそらく、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$rootScope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値を変更します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="56940ba3b003c3b9efc4a2d260ce62e5a12c0d89" translate="yes" xml:space="preserve">
          <source>This is especially important when you have an &lt;code&gt;ng-repeat&lt;/code&gt; with many items.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、多くのアイテム&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を含む&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-repeat&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がある場合に特に重要です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc2a49f6d92f573bcfe485e392faeba5d9e44a4a" translate="yes" xml:space="preserve">
          <source>This is my basic understanding. It may well be wrong!</source>
          <target state="translated">これは私の基本的な理解です。間違っているかもしれません</target>
        </trans-unit>
        <trans-unit id="824a36c001af90b4c01a2f8a9b0d6db5c1f42c79" translate="yes" xml:space="preserve">
          <source>This limit is easy to reach if you &lt;code&gt;ng-repeat&lt;/code&gt; over a large &lt;code&gt;JSON&lt;/code&gt;&lt;code&gt;array&lt;/code&gt; for example. You can mitigate against this using features like one-time binding to compile a template without creating watchers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、大きな&lt;/font&gt; &lt;code&gt;JSON&lt;/code&gt; &lt;code&gt;array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;に対して&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-repeat&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を実行すると、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この制限に簡単に到達できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ウォッチャーを作成せずにテンプレートをコンパイルするワンタイムバインディングなどの機能を使用して、これを軽減できます。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5f9698290b18dfcad06dccf0d7af50181f334d2c" translate="yes" xml:space="preserve">
          <source>To contrast dirty-checking (AngularJS) vs change listeners (&lt;a href=&quot;http://en.wikipedia.org/wiki/KnockoutJS&quot;&gt;KnockoutJS&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Backbone.js&quot;&gt;Backbone.js&lt;/a&gt;): While dirty-checking may seem simple, and even inefficient (I will address that later), it turns out that it is semantically correct all the time, while change listeners have lots of weird corner cases and need things like dependency tracking to make it more semantically correct. KnockoutJS dependency tracking is a clever feature for a problem which AngularJS does not have.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ダーティチェック（AngularJS）と変更リスナー（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/KnockoutJS&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;KnockoutJS&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Backbone.js&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Backbone.js&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を対比するには&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：ダーティチェックは単純で効率が悪いように見えるかもしれませんが（後で対処します）、常に意味的に正しいことがわかります。一方、変更リスナーには多くの奇妙なコーナーケースがあり、依存関係の追跡などにより意味的に正確にする必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;KnockoutJSの依存関係の追跡は、AngularJSにはない問題に対する賢い機能です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7badb858f29a6efa2f33f71e4eb4033d92c9cc96" translate="yes" xml:space="preserve">
          <source>Watcher function is called as part of the digest cycle.</source>
          <target state="translated">ダイジェストサイクルの一部としてウォッチャー機能が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="8715de0439dc5dc006e1080c1077524c864eb3fc" translate="yes" xml:space="preserve">
          <source>Watcher functions can change other attributes on &lt;code&gt;$scope&lt;/code&gt; or on a parent &lt;code&gt;$scope&lt;/code&gt;. If one &lt;code&gt;$watcher&lt;/code&gt; function has been triggered, we can't guarantee that our other &lt;code&gt;$scope&lt;/code&gt;s are still clean, and so we execute the entire digest cycle again.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ウォッチャー関数は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または親&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他の属性を変更でき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1つの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$watcher&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数がトリガーされた場合、他の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がまだクリーンである&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことを保証できない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、ダイジェストサイクル全体を再度実行します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="07fcfb61713968827e9ec7c9f565e6d499887b35" translate="yes" xml:space="preserve">
          <source>We continually loop through the &lt;code&gt;$digest&lt;/code&gt; cycle until either the digest cycle comes up clean (all &lt;code&gt;$watch&lt;/code&gt; expressions have the same value as they had in the previous cycle), or we reach the digest limit. By default, this limit is set at 10.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ダイジェストサイクルがクリーンになるまで（すべての&lt;/font&gt; &lt;code&gt;$watch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;式は前のサイクルと同じ値になります）、またはダイジェストの制限に達する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;まで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$digest&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サイクルを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ループし続けます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デフォルトでは、この制限は10に設定されています。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="99c41154db2ed0f7cd5e6cf93d295fefb4cb0cb8" translate="yes" xml:space="preserve">
          <source>What about performance?</source>
          <target state="translated">パフォーマンスはどうなの?</target>
        </trans-unit>
        <trans-unit id="f6d49eb840ac9b816221044bcd3d3d0b4f2429c7" translate="yes" xml:space="preserve">
          <source>What it actually does is this: Any &quot;normal&quot; place you modify the model was already called from the guts of &lt;code&gt;AngularJS&lt;/code&gt;, so it automatically calls &lt;code&gt;$apply&lt;/code&gt; for you after your code runs. Say your controller has a method that's hooked up to &lt;code&gt;ng-click&lt;/code&gt; on some element. Because &lt;code&gt;AngularJS&lt;/code&gt; wires the calling of that method together for you, it has a chance to do an &lt;code&gt;$apply&lt;/code&gt; in the appropriate place. Likewise, for expressions that appear right in the views, those are executed by &lt;code&gt;AngularJS&lt;/code&gt; so it does the &lt;code&gt;$apply&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際に行うことは次のとおりです。モデルを変更する「通常の」場所は、すでに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;AngularJS&lt;/code&gt; の根本&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から呼び出されている&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、コードの実行後に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$apply&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;自動的に呼び出さ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れます。コントローラーに、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要素の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-click&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;接続されたメソッドがある&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とします&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;AngularJS&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はそのメソッドの呼び出しを一緒に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ワイヤリングする&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、適切な場所で&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$apply&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を実行する機会があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。同様に、ビューに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;AngularJS&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;現れる式の場合、それらは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AngularJS&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;によって実行される&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$apply&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b811e7e92d8afabecc4cce05a490306acb550c72" translate="yes" xml:space="preserve">
          <source>When the documentation talks about having to call &lt;code&gt;$apply&lt;/code&gt; manually for code &lt;em&gt;outside of &lt;code&gt;AngularJS&lt;/code&gt;&lt;/em&gt;, it's talking about code which, when run, doesn't stem from &lt;code&gt;AngularJS&lt;/code&gt; itself in the call stack.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ドキュメント&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;/em&gt;&lt;em&gt; &lt;code&gt;AngularJS&lt;/code&gt; の&lt;/em&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;外部の&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コードに対して&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$apply&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;手動で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必要がある&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことについて述べている場合、それは、実行時&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;にコールスタック内の&lt;/font&gt; &lt;code&gt;AngularJS&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;自体に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;由来しないコードについて述べてい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f128527b9d0415ad5b444d6311a137dbd015bc23" translate="yes" xml:space="preserve">
          <source>When we interact with AngularJS through the normal channels (ng-model, ng-repeat, etc) a digest cycle will be triggered by the directive.</source>
          <target state="translated">AngularJSと通常のチャンネル(ng-modelやng-repeatなど)でやりとりすると、ディレクティブによってダイジェストサイクルがトリガーされます。</target>
        </trans-unit>
        <trans-unit id="c389541f2e6d6e735f2fe65334c1314a25636932" translate="yes" xml:space="preserve">
          <source>Whenever the user changes the data in the view , there occurs an update of that change in the scope model, and viceversa.</source>
          <target state="translated">ユーザーがビュー内のデータを変更するたびに、スコープモデルにその変更の更新が発生します。</target>
        </trans-unit>
        <trans-unit id="1e49f79840dfeb596c214735bd51aa334175dc26" translate="yes" xml:space="preserve">
          <source>You can ask a directive such as &lt;code&gt;ng-model&lt;/code&gt; to define the watcher for you.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;ng-model&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;などのディレクティブ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して、ウォッチャーを定義できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6bec541c245d7b7b926dd45128797bb84bae1703" translate="yes" xml:space="preserve">
          <source>You can bind data in &lt;code&gt;ng-model&lt;/code&gt; Like:-</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-model&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ように&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;データをバインドすることができます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：-&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9926611fef2cbdb7f4ac38d125214c2c8f5120ac" translate="yes" xml:space="preserve">
          <source>You can explicitly &lt;code&gt;$watch&lt;/code&gt; an &lt;code&gt;attribute&lt;/code&gt; on &lt;code&gt;$scope&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは明示的にすることができます&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$watch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;attribute&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="67e827d680b215290300f8cff935a4a123114bbf" translate="yes" xml:space="preserve">
          <source>You can place a &lt;code&gt;{{}}&lt;/code&gt; interpolation in your template (a watcher will be created for you on the current &lt;code&gt;$scope&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは置くことができます&lt;/font&gt;&lt;/font&gt; &lt;code&gt;{{}}&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ウォッチャーは、現在であなたのために作成されますテンプレートの補間を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a804c4b9fc797bd7668b53bb525c54f66da53f64" translate="yes" xml:space="preserve">
          <source>i.e&lt;code&gt;$rootScope.$apply()&lt;/code&gt;</source>
          <target state="translated">i.e&lt;code&gt;$rootScope.$apply()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="5857e7febe3c8593e18cc3737f8b0bea41507946" translate="yes" xml:space="preserve">
          <source>{{expression}} &amp;mdash; In your templates (and anywhere else where there&amp;rsquo;s an expression) or when we define ng-model.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;{{expression}} &amp;mdash;テンプレート（および式がある場所）で、またはng-modelを定義するとき。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
