<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/4810664">
    <body>
      <group id="4810664">
        <trans-unit id="d04e79de260ba2b52b7b4be3155464cf946b0af5" translate="yes" xml:space="preserve">
          <source>&amp;hellip; but this fails when &lt;code&gt;Collection&lt;/code&gt; is not a raw array.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;hellip; 그러나 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Collection&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이 원시 배열이 아닌 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;경우 실패합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0612f3b5a654cd50db291e826efe5c34a0b6cc25" translate="yes" xml:space="preserve">
          <source>&amp;hellip; declarations for an array object can specify array types that
  differ by the presence or absence of a major array bound (8.3.4).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;hellip; 배열 객체에 대한 선언은 주 배열 경계 (8.3.4)의 존재 유무에 따라 다른 배열 유형을 지정할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0e4678381c395fca109fb1a7ab2963eb52ccdf85" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;⋮</source>
          <target state="translated">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;⋮</target>
        </trans-unit>
        <trans-unit id="eaace149c48e3954770834bb04a3463bc80ecf38" translate="yes" xml:space="preserve">
          <source>(None of the above is specific to arrays. These rules apply equally well to other kinds of static objects.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위의 어느 것도 배열에만 해당되지 않습니다. 이러한 규칙은 다른 종류의 정적 객체에도 동일하게 적용됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9bf1213a32eac75ae4baa950dd194049601cf63c" translate="yes" xml:space="preserve">
          <source>(Note that the implicitly generated pointer has no name, so I wrote &lt;code&gt;x+0&lt;/code&gt; in order to identify it.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(암시 적으로 생성 된 포인터에는 이름이 없으므로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이를 식별하기 위해 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x+0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;썼습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="38adde0b67b061a1ec171d70e52bc519f4a9e0b7" translate="yes" xml:space="preserve">
          <source>(Note that variables at namespace scope are implicitly static. Adding the &lt;code&gt;static&lt;/code&gt; keyword to their definition has a &lt;a href=&quot;https://stackoverflow.com/questions/3891325/&quot;&gt;completely different, deprecated meaning&lt;/a&gt;.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;네임 스페이스 범위의 변수는 암시 적으로 정적입니다. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 키워드를 정의에 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;추가하면 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3891325/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;완전히 다른 사용되지 않는 의미가&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="231510dccd89918e53895d32efe43a1984323116" translate="yes" xml:space="preserve">
          <source>(Note the trailing pair of parenthesis right before the semicolon.) Again, C++0x simplifies the rules and allows specifying initial values for anonymous arrays thanks to uniform initialization:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(세미콜론 바로 뒤에 오는 괄호 쌍을 주목하십시오.) 다시 C ++ 0x는 규칙을 단순화하고 균일 한 초기화 덕분에 익명 배열의 초기 값을 지정할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="90aa3f8dd54d913a20bcd4352992625debef9147" translate="yes" xml:space="preserve">
          <source>1 elements.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1 개의 요소.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a651c751b5b91bd381394f65645d3e91f1f89c2d" translate="yes" xml:space="preserve">
          <source>5. Common pitfalls when using arrays.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;5. 배열을 사용할 때의 일반적인 함정.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="19ec1826e2fdf1b52e478a2704cb8d0d8615d9bc" translate="yes" xml:space="preserve">
          <source>5.1 Pitfall: Trusting type-unsafe linking.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;5.1 함정 : 신뢰할 수없는 유형 안전 연결.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1796594de79af31df71419271109d6b84d26c8a2" translate="yes" xml:space="preserve">
          <source>5.2 Pitfall: Doing premature optimization (&lt;code&gt;memset&lt;/code&gt; &amp;amp; friends).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;5.2 함정 : 조기 최적화 ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;memset&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;amp; friends).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b0a0e496ecd16a8c73f36baed69bdc51bfc3031a" translate="yes" xml:space="preserve">
          <source>5.3 Pitfall: Using the C idiom to get number of elements.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;5.3 함정 : 많은 요소를 얻기 위해 C 관용구 사용.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2479875ffe2b4aa5f8ac73d86a4c378dc2349229" translate="yes" xml:space="preserve">
          <source>5.4 C++11 &amp;amp; C++14 pitfall: Using a &lt;code&gt;constexpr&lt;/code&gt; array size function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;5.4 C ++ 11 &amp;amp; C ++ 14 함정 : &lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 배열 크기 함수 사용.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5390b67f62a37f1c341c198ae984410b96914b51" translate="yes" xml:space="preserve">
          <source>7 elements, calling display...</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;7 가지 요소, 호출 디스플레이 ...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f9de6fbff782960fefcc3095a3bc24ddfce1b643" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;N_ITEMS&lt;/code&gt; is therefore invoked with a pointer.</source>
          <target state="translated">&lt;code&gt;N_ITEMS&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;N_ITEMS&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 포인터로 호출됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74212934fe8368a399b0d98b0a4d9b7243ba5e1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int(*)[8]&lt;/code&gt; is a pointer to an array of 8 integers.</source>
          <target state="translated">&lt;code&gt;int(*)[8]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 8 개의 정수 배열에 대한 포인터입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a32d2b9fd0ba41aa42e8651c7bf0b911729c9d10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int*[8]&lt;/code&gt; is an array of 8 pointers, each element of type &lt;code&gt;int*&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;int*[8]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 유형의 각 요소 인 8 개의 포인터 배열입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="96eb00bc6e8065436e33e4a99e47570293b66488" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sizeof(*array)&lt;/code&gt; is equivalent to &lt;code&gt;sizeof(int)&lt;/code&gt;, which for a 32-bit executable is also 4.</source>
          <target state="translated">&lt;code&gt;sizeof(*array)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof(int)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 동일 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하며 32 비트 실행 파일의 경우 4입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f3903fae2b05023ec89b2d2cc770d69f2c57d737" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Not written yet&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;아직 쓰지 않았습니다&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e8586c6494c198dbc6f2f6317d094faf70f2ea3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[N3290 &amp;sect;3.5/10]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[N3290 &amp;sect;3.5 / 10]&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="620ae72342c6c376f4c4a1a08f78905e1878296d" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;
&lt;em&gt;(Note: This is meant to be an entry to &lt;a href=&quot;https://stackoverflow.com/questions/tagged/c++-faq&quot;&gt;Stack Overflow's C++ FAQ&lt;/a&gt;. If you want to critique the idea of providing an FAQ in this form, then &lt;a href=&quot;https://meta.stackexchange.com/questions/68647/setting-up-a-faq-for-the-c-tag&quot;&gt;the posting on meta that started all this&lt;/a&gt; would be the place to do that. Answers to that question are monitored in the &lt;a href=&quot;http://chat.stackoverflow.com/rooms/10/c-lounge&quot;&gt;C++ chatroom&lt;/a&gt;, where the FAQ idea started out in the first place, so your answer is very likely to get read by those who came up with the idea.)&lt;/em&gt;
&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;em&gt;(참고 : 이것은 &lt;a href=&quot;https://stackoverflow.com/questions/tagged/c++-faq&quot;&gt;Stack Overflow의 C ++ FAQ에&lt;/a&gt; 대한 항목입니다.이 양식으로 FAQ를 제공한다는 아이디어를 비판하려면이 &lt;a href=&quot;https://meta.stackexchange.com/questions/68647/setting-up-a-faq-for-the-c-tag&quot;&gt;모든 것을 시작한 메타에 게시&lt;/a&gt; 하면됩니다. 이 질문은 &lt;a href=&quot;http://chat.stackoverflow.com/rooms/10/c-lounge&quot;&gt;C ++ 대화방&lt;/a&gt; 에서 모니터링되며 여기서 FAQ 아이디어는 처음부터 시작되었으므로 아이디어를 얻은 사람들이 귀하의 답변을 읽을 가능성이 큽니다.)&lt;/em&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="a7380dfe067e661e6c28af642fc12e65ff35a367" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;conditional-expression&lt;/em&gt;&lt;code&gt;e&lt;/code&gt; is a &lt;em&gt;core constant expression&lt;/em&gt; unless the evaluation
  of &lt;code&gt;e&lt;/code&gt;, following the rules of the abstract machine (1.9), would evaluate one of the
  following expressions:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;조건부 표현 &lt;/font&gt;&lt;/font&gt;&lt;/em&gt; &lt;code&gt;e&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; A는 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;핵심 상수 표현&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 평가하지 않는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;e&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 추상 기계 (1.9), 다음 식 중 하나를 평가하는 것의 규칙에 따라 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6ec1049f6c023e311e56e84c953aa4c9fe27c95a" translate="yes" xml:space="preserve">
          <source>A violation of this rule on type identity does not require a diagnostic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;유형 ID에 대한이 규칙을 위반하면 진단이 필요하지 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0cd6ad0e54ee6246cea808ee63fd05eddfc872e5" translate="yes" xml:space="preserve">
          <source>About the choice of return type for &lt;code&gt;static_n_items&lt;/code&gt;: this code doesn't use &lt;code&gt;std::integral_constant&lt;/code&gt;
because with &lt;code&gt;std::integral_constant&lt;/code&gt; the result is represented
directly as a &lt;code&gt;constexpr&lt;/code&gt; value, reintroducing the original problem. Instead
of a &lt;code&gt;Size_carrier&lt;/code&gt; class one can let the function directly return a
reference to an array. However, not everybody is familiar with that syntax.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에 대한 반환 형식의 선택에 대해 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_n_items&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :이 코드는 사용하지 않는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::integral_constant&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 과하기 때문에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::integral_constant&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 결과가로 직접 표현 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; 의&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 값을 원래의 문제를 다시 소개. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Size_carrier&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 클래스 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;대신 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;함수가 배열에 대한 참조를 직접 반환하도록 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 모든 사람이이 구문에 익숙하지는 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b959c28ecb4dde919a516a1c1b3188124c5c2f89" translate="yes" xml:space="preserve">
          <source>About the naming: part of this solution to the &lt;code&gt;constexpr&lt;/code&gt;-invalid-due-to-reference
problem is to make the choice of compile time constant explicit.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;명명 정보 : &lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -invalid-to-to-to-reference 문제에 대한 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 솔루션의 일부 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;는 컴파일 시간을 일정하게 선택하는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="26a01f7a3f29b95a2006e044a16488cdb32ba200" translate="yes" xml:space="preserve">
          <source>Accessing elements</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;요소에 액세스&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8d39c2f6a75768a2092994233c9a0daa3c70b9d6" translate="yes" xml:space="preserve">
          <source>Also note that you could simply provide &lt;code&gt;x&lt;/code&gt; as the first argument. That is a little too terse for my taste, and it also makes template argument deduction a bit harder for the compiler, because in that case the first argument is an array but the second argument is a pointer. (Again, array-to-pointer decay kicks in.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 첫 번째 인수로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;간단히 제공 할 수 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그것은 내 취향에 비해 너무 간결하며 컴파일러의 경우 템플릿 인수 공제를 조금 더 어렵게 만듭니다.이 경우 첫 번째 인수는 배열이지만 두 번째 인수는 포인터이기 때문입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(다시 말해서 배열 간 포인터 붕괴가 시작됩니다.)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="18999a9d2d7e1f9e2ca1c736ffbc5c4469b40a2e" translate="yes" xml:space="preserve">
          <source>Alternatively, the initial values can be explicitly specified in the &lt;em&gt;array initializer&lt;/em&gt;, a comma-separated list surrounded by curly brackets:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또는 초기 값은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;괄호로 묶은 쉼표로 구분 된 목록 인 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열 이니셜 라이저&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 명시 적으로 지정할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="13bd6a28072658c138cb224a1d27229ba67fa990" translate="yes" xml:space="preserve">
          <source>Alternatively, you can define an automatic array in the constructor body and copy the elements over:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또는 생성자 본문에서 자동 배열을 정의하고 요소를 다음으로 복사 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b08a5a490469c21ff382823b10dd32277b29eff4" translate="yes" xml:space="preserve">
          <source>Although you cannot assign arrays directly, you &lt;em&gt;can&lt;/em&gt; assign structs and classes which &lt;em&gt;contain&lt;/em&gt; array members. That is because &lt;a href=&quot;https://stackoverflow.com/questions/4164279/&quot;&gt;array members are copied memberwise&lt;/a&gt; by the assignment operator which is provided as a default by the compiler. If you define the assignment operator manually for your own struct or class types, you must fall back to manual copying for the array members.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열을 직접 할당 할 수는 없지만 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열 멤버 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;를 &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;포함&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 하는 구조체와 클래스를 할당 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;할 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;수 있습니다&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이는 &lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4164279/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열 멤버가&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 컴파일러에서 기본값으로 제공되는 할당 연산자에 의해 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;멤버 단위로 복사&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 되기 때문 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;자체 구조체 또는 클래스 유형에 대해 할당 연산자를 수동으로 정의하는 경우 배열 멤버의 수동 복사로 폴백해야합니다.&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="686c9976fce3ef9968836df6eec6c84549086e98" translate="yes" xml:space="preserve">
          <source>An array of type &lt;code&gt;T[n]&lt;/code&gt; has &lt;code&gt;n&lt;/code&gt; elements, indexed from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n-1&lt;/code&gt;; there is no element &lt;code&gt;n&lt;/code&gt;. And yet, to support half-open ranges (where the beginning is &lt;em&gt;inclusive&lt;/em&gt; and the end is &lt;em&gt;exclusive&lt;/em&gt;), C++ allows the computation of a pointer to the (non-existent) n-th element, but it is illegal to dereference that pointer:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;T[n]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 유형의 배열에는 &lt;/font&gt; &lt;code&gt;0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 &lt;/font&gt; &lt;code&gt;n-1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 까지 색인 된 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; 개의&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 요소 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;가 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;요소 &lt;/font&gt; &lt;code&gt;n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이 없습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 반 개방 범위 (시작이 &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;포함&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 되고 끝이 &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;독점 인&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;를 지원하기 위해 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++에서는 (존재하지 않는) n 번째 요소에 대한 포인터 계산을 허용하지만 해당 포인터를 역 참조하는 것은 불법입니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="42456e1dacb6621675d5ac2e2413c58c4322f39d" translate="yes" xml:space="preserve">
          <source>An array type is denoted as &lt;code&gt;T[n]&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is the &lt;em&gt;element type&lt;/em&gt; and &lt;code&gt;n&lt;/code&gt; is a positive &lt;em&gt;size&lt;/em&gt;, the number of elements in the array. The array type is a product type of the element type and the size. If one or both of those ingredients differ, you get a distinct type:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열 유형은 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T[n]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 으로 표시됩니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 여기서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;요소 유형&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이고 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 양수 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;크기&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이며 배열의 요소 수입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열 유형은 요소 유형과 크기의 제품 유형입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이러한 성분 중 하나 또는 둘 다가 다른 경우 다음과 같은 고유 한 유형이 나타납니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2e9e7db807e1364a1e5c48cc0f20413a61a41902" translate="yes" xml:space="preserve">
          <source>And here is how it looks like in memory:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음은 메모리에서 어떻게 보이는지입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eac77d06b46f4d096b1aad128c8a1a33836938e7" translate="yes" xml:space="preserve">
          <source>Anonymous arrays of pointers</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;익명의 포인터 배열&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="647cdf988737cc9ccd2df7b3b704cfd1c6bb74a8" translate="yes" xml:space="preserve">
          <source>Anonymous multidimensional arrays</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;익명의 다차원 배열&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1343cf5171221fe816c93d6f2a075c26f5b24b07" translate="yes" xml:space="preserve">
          <source>Array creation and initialization</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열 생성 및 초기화&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="399f9928701629470c3f9405ace42415e4409175" translate="yes" xml:space="preserve">
          <source>Array data members</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열 데이터 멤버&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="24b8804b7e356d42cd7f09e1eb85af586ae43524" translate="yes" xml:space="preserve">
          <source>Array data members are created when their owning object is created. Unfortunately, C++03 provides no means to initialize arrays in the &lt;a href=&quot;https://stackoverflow.com/questions/1711990/&quot;&gt;member initializer list&lt;/a&gt;, so initialization must be faked with assignments:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;자신의 객체가 생성 될 때 배열 데이터 멤버가 생성됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;불행히도 C ++ 03은 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1711990/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;멤버 이니셜 라이저 목록&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 배열을 초기화 할 수단을 제공하지 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;않으므로 할당을 통해 초기화를 위조해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e8874168e3c1df960a01e93b0e01fe86fb6ae2dc" translate="yes" xml:space="preserve">
          <source>Array-to-pointer decay</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열에서 포인터로의 붕괴&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1ac5bd4e173a92bcb04c137f8efe28804ea718a6" translate="yes" xml:space="preserve">
          <source>Array-to-pointer decay naturally extends to arrays of arrays and arrays of pointers:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열에서 포인터로의 붕괴는 자연스럽게 배열의 배열과 포인터의 배열로 확장됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6e40493abcaecb122cbcf832dab790b8d29fdd9f" translate="yes" xml:space="preserve">
          <source>Arrays are not pointers</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열은 포인터가 아니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f7a03c30a551a2c39c3c9fc257600a5d16f43aaf" translate="yes" xml:space="preserve">
          <source>Arrays can also be passed by reference:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열은 참조로 전달할 수도 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2bf47475c7967f15061d931504841dd6198c3b0f" translate="yes" xml:space="preserve">
          <source>Arrays cannot be passed by value. You can either pass them by pointer or by reference.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;값으로 배열을 전달할 수 없습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;포인터 나 참조로 전달할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0d3931969794470ea65ef6c4ed1f5814ad89e104" translate="yes" xml:space="preserve">
          <source>Arrays of pointers</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;포인터 배열&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7b85b17ab780077809da01b26286144e5377b12f" translate="yes" xml:space="preserve">
          <source>Arrays on the type level</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;타입 레벨의 배열&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9195cd8f84277c2a066f9b3969eb7b482e709897" translate="yes" xml:space="preserve">
          <source>As a syntactic alternative, you can also declare parameters as &lt;code&gt;T p[]&lt;/code&gt;, and it means the exact same thing as &lt;code&gt;T* p&lt;/code&gt;&lt;strong&gt;in the context of parameter lists only&lt;/strong&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;구문 대안으로 매개 변수를 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T p[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 로 선언 할 수도 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있으며 매개 변수 목록의 컨텍스트에서만 &lt;/font&gt;&lt;/strong&gt;&lt;/font&gt; &lt;code&gt;T* p&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 정확히 동일한 것을 의미합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7b591505e594b531518f3338ddc699030668ab81" translate="yes" xml:space="preserve">
          <source>As with any other kind of C++ object, arrays can be stored either directly in named variables (then the size must be a compile-time constant; &lt;a href=&quot;https://stackoverflow.com/questions/1887097/&quot;&gt;C++ does not support VLAs&lt;/a&gt;), or they can be stored anonymously on the heap and accessed indirectly via pointers (only then can the size be computed at runtime).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 종류의 C ++ 객체와 마찬가지로, 배열은 명명 된 변수에 직접 저장 될 수 있습니다 (그런 다음 크기는 컴파일 타임 상수 여야합니다. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1887097/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++는 VLA를 지원하지 않습니다&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). 또는 힙에 익명으로 저장되어 간접적으로 액세스 될 수 있습니다. 포인터 (런타임에서만 크기를 계산할 수 있음).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba05dcd6a6016a8619c5531920406c9d627e7d45" translate="yes" xml:space="preserve">
          <source>Assertion failed: ( &quot;N_ITEMS requires an actual array as argument&quot;, typeid( a ) != typeid( &amp;amp;*a ) ), file runtime_detect
  ion.cpp, line 16</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;어설 션 실패 : ( &quot;N_ITEMS에는 실제 배열이 인수로 필요함&quot;, typeid (a)! = typeid (&amp;amp; * a), 파일 runtime_detect ion.cpp, 16 행&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e55df441e8955746182110c3946288f381520e83" translate="yes" xml:space="preserve">
          <source>Assignment</source>
          <target state="translated">Assignment</target>
        </trans-unit>
        <trans-unit id="40f5291aa65f0d251ce748666c38a331190c5ced" translate="yes" xml:space="preserve">
          <source>Automatic arrays</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;자동 배열&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e1d37e408deb2e78b4ca48daeb81d9bd4471d3ae" translate="yes" xml:space="preserve">
          <source>Automatic arrays (arrays living &quot;on the stack&quot;) are created each time the flow of control passes through the definition of a non-static local array variable:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어 흐름이 비 정적 로컬 배열 변수의 정의를 통과 할 때마다 자동 배열 ( &quot;스택&quot;에있는 배열)이 생성됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f636bb95872b824ff74a6c4034eaba0370183449" translate="yes" xml:space="preserve">
          <source>But consider this code using the &lt;code&gt;constexpr&lt;/code&gt; version:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 버전을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용 하여이 코드를 고려하십시오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="de28acb7f2a0a27ea202dbc568fb44f90656e5d6" translate="yes" xml:space="preserve">
          <source>C++ inherited arrays from C where they are used virtually everywhere. C++ provides abstractions that are easier to use and less error-prone (&lt;code&gt;std::vector&amp;lt;T&amp;gt;&lt;/code&gt; since C++98 and &lt;a href=&quot;http://en.cppreference.com/w/cpp/container/array&quot;&gt;&lt;code&gt;std::array&amp;lt;T, n&amp;gt;&lt;/code&gt;&lt;/a&gt; since &lt;a href=&quot;https://en.wikipedia.org/wiki/C++11&quot;&gt;C++11&lt;/a&gt;), so the need for arrays does not arise quite as often as it does in C. However, when you read legacy code or interact with a library written in C, you should have a firm grasp on how arrays work.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++은 거의 모든 곳에서 사용되는 C의 배열을 상속했습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++은 사용하기 쉽고 오류가 적은 추상화 ( &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 98 이후 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::vector&amp;lt;T&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/C++11&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 11&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이후 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp/container/array&quot;&gt; &lt;code&gt;std::array&amp;lt;T, n&amp;gt;&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )를 제공하므로 배열이 필요하지 않습니다. C 에서처럼 자주 발생합니다. 그러나 레거시 코드를 읽거나 C로 작성된 라이브러리와 상호 작용할 때 배열의 작동 방식을 확실히 파악해야합니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="372b375c077d1592b504d6ea862fc8b660d07ce4" translate="yes" xml:space="preserve">
          <source>C++ provides two syntactic variations to access individual elements of an array.
Neither of them is superior to the other, and you should familiarize yourself with both.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++는 배열의 개별 요소에 액세스하기위한 두 가지 구문 변형을 제공합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;둘 중 어느 쪽도 다른 쪽보다 우월하지 않으므로 두 가지 모두에 익숙해 져야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e9ee5228e62855edd689fcf1ee439ad1835186a8" translate="yes" xml:space="preserve">
          <source>C++11 C++14 $5.19/2 nine&lt;sup&gt;&lt;i&gt;th&lt;/i&gt;&lt;/sup&gt; dash</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 11 C ++ 14 $ 5.19 / 2 아홉 &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;i&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;번째&lt;/font&gt;&lt;/font&gt;&lt;/i&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대시&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="451cf0fb180276f6104c195abd9824bc51889070" translate="yes" xml:space="preserve">
          <source>Compiling this definition substituted into the first complete program, with g++,
I got &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 정의를 첫 번째 완전한 프로그램으로 대체하고 g ++로 대체했습니다 ...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="edd1068f47092445e2ade712a957ef28258872b7" translate="yes" xml:space="preserve">
          <source>Concerning default values for elements, anonymous arrays behave similar to automatic arrays.
Normally, anonymous POD arrays are not initialized, but there is a &lt;a href=&quot;https://stackoverflow.com/questions/620137/&quot;&gt;special syntax&lt;/a&gt; that triggers value-initialization:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;요소의 기본값과 관련하여 익명 배열은 자동 배열과 유사하게 동작합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;일반적으로 익명 POD 배열은 초기화되지 않지만 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;값 초기화를 트리거 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하는 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/620137/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;특수 구문&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b08eaadf77cfdba7944ddcaf69eee5a983b74af3" translate="yes" xml:space="preserve">
          <source>Conversions</source>
          <target state="translated">Conversions</target>
        </trans-unit>
        <trans-unit id="e8e9bf39de7b205510d34a98df2a540f29880a3d" translate="yes" xml:space="preserve">
          <source>Due to the fact that addition is commutative, the following code does exactly the same:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;덧셈은 정식 적이라는 사실 때문에 다음 코드는 정확히 동일합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d44854713dee942aa855be9529ca9049d1f51a4" translate="yes" xml:space="preserve">
          <source>Dynamic arrays</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;동적 배열&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fa79fb6c19ebe9065a4f0b664015743660924a69" translate="yes" xml:space="preserve">
          <source>Dynamic arrays have no names, hence the only means of accessing them is via pointers. Because they have no names, I will refer to them as &quot;anonymous arrays&quot; from now on.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;동적 배열에는 이름이 없으므로 액세스 할 수있는 유일한 방법은 포인터를 통하는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이름이 없기 때문에 앞으로는 &quot;익명 배열&quot;이라고합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1ad437396251bede18ff480da4a2fb5768a40959" translate="yes" xml:space="preserve">
          <source>For a 32-bit executable &lt;code&gt;sizeof(array)&lt;/code&gt; (size of a pointer) is then 4.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;32 비트 실행 파일의 경우 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof(array)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (포인터의 크기)는 4입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ccf9fc11e30342ada49e22699adfb1eee920ea13" translate="yes" xml:space="preserve">
          <source>For example, if you want to sort an array, both of the following would work equally well:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어 배열을 정렬하려면 다음 두 가지가 동일하게 작동합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="df57dc8940ddba3bf21d9400ea8d2ff132094b4b" translate="yes" xml:space="preserve">
          <source>For example, in contrast to the C++03 function, such a compile time constant
can be used to declare an array of the same size as another:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어, C ++ 03 함수와 달리, 컴파일 시간 상수는 다른 크기와 동일한 크기의 배열을 선언하는 데 사용될 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c60990da60348b38b26e24567aa5449142642c6b" translate="yes" xml:space="preserve">
          <source>For no particular reason, arrays cannot be assigned to one another. Use &lt;code&gt;std::copy&lt;/code&gt; instead:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;특별한 이유로 배열을 서로 지정할 수 없습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;대신 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::copy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용하십시오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c72639e3e48ee10535ffefafd0e659f4a2e46be9" translate="yes" xml:space="preserve">
          <source>Given a pointer &lt;code&gt;p&lt;/code&gt; to the first element of an array, the expression &lt;code&gt;p+i&lt;/code&gt; yields a pointer to the i-th element of the array. By dereferencing that pointer afterwards, one can access individual elements:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열의 첫 번째 요소에 대한 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;포인터 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;p&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;주어지면 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, 식 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;p+i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 배열의 i 번째 요소에 대한 포인터를 생성합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나중에 해당 포인터를 참조 해제하면 개별 요소에 액세스 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="55b8034a1c4de8546af371fad141ee844edc1ceb" translate="yes" xml:space="preserve">
          <source>Here is a named array of five pointers which are initialized with anonymous arrays of different lengths:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음은 길이가 다른 익명의 배열로 초기화 된 5 개의 포인터로 구성된 명명 된 배열입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c076f328745f37debceee5f1f2ed902d4a78f344" translate="yes" xml:space="preserve">
          <source>Here is an anonymous array of 5 (or any other number of) pointers which are initialized with anonymous arrays of different lengths:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음은 길이가 다른 익명 배열로 초기화되는 5 (또는 다른 수의) 포인터의 익명 배열입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="23dac17f7c85db33e32efee228cc1206d13ce8f2" translate="yes" xml:space="preserve">
          <source>Here is how static arrays behave differently from automatic arrays:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;정적 배열이 자동 배열과 다르게 동작하는 방법은 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29b93b685e9f34727b707a03a54e84c221d810d0" translate="yes" xml:space="preserve">
          <source>Hopefully the oops-there-was-a-reference-involved-in-your-&lt;code&gt;constexpr&lt;/code&gt; issue will be fixed with
C++17, but until then a macro like the &lt;code&gt;STATIC_N_ITEMS&lt;/code&gt; above yields portability,
e.g. to the clang and Visual C++ compilers, retaining type safety.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;희망적으로 oops-the-the- &lt;/font&gt; &lt;code&gt;STATIC_N_ITEMS&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 참조 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-volume&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -in-your- &lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 문제는 C ++ 17에서 수정 될 것이지만, 그때까지 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;STATIC_N_ITEMS&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 같은 매크로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;는 clang 및 Visual C ++ 컴파일러와 같은 이식성을 제공합니다. 유형 안전 유지.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="12890f5a4d79b3a152da01cd5f87ddd2cfb5f4eb" translate="yes" xml:space="preserve">
          <source>How do I use arrays in C++</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++에서 배열을 사용하는 방법&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="de3060ce19f3a3bb1c4391b3ddd3d0001e575313" translate="yes" xml:space="preserve">
          <source>How it works: the array is passed &lt;em&gt;by reference&lt;/em&gt; to &lt;code&gt;n_items&lt;/code&gt;, and so it does
not decay to pointer to first element, and the function can just return the
number of elements specified by the type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;작동 방식 : 배열은 &lt;/font&gt; &lt;code&gt;n_items&lt;/code&gt; &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;를 참조&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 하여 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;전달 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;되므로 첫 번째 요소에 대한 포인터로 쇠퇴하지 않으며 함수는 유형에 지정된 요소 수만 반환 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71ce2f00f67820d9da8ad53a668481248e234bc0" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;&amp;amp;x[0]&lt;/code&gt; is generally &lt;em&gt;not&lt;/em&gt; equivalent to &lt;code&gt;x&lt;/code&gt;. The former is a pointer, the latter an array. Only when the context triggers array-to-pointer decay can &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;&amp;amp;x[0]&lt;/code&gt; be used interchangeably. For example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;x[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 일반적으로 &lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;같지 않습니다&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;전자는 포인터이고 후자는 배열입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨텍스트가 배열에서 포인터로의 붕괴를 트리거 할 때만 &lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 &lt;/font&gt; &lt;code&gt;&amp;amp;x[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 서로 바꾸어 사용할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들면 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="50831c9c02e63682913c1ef6afbaea938a24ca91" translate="yes" xml:space="preserve">
          <source>However, there is no implicit conversion from &lt;code&gt;T[h][w]&lt;/code&gt; to &lt;code&gt;T**&lt;/code&gt;. If such an implicit conversion did exist, the result would be a pointer to the first element of an array of &lt;code&gt;h&lt;/code&gt; pointers to &lt;code&gt;T&lt;/code&gt; (each pointing to the first element of a line in the original 2D array), but that pointer array does not exist anywhere in memory yet. If you want such a conversion, you must create and fill the required pointer array manually:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T[h][w]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T**&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 로의 암시 적 변환은 없습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이러한 암시 적 변환이 존재하면 결과는 &lt;/font&gt; &lt;code&gt;T&lt;/code&gt; 에&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대한 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;h&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 포인터 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열의 첫 번째 요소에 대한 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;포인터가되고 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(각각 원래 2D 배열에서 라인의 첫 번째 요소를 가리키는) 포인터 포인터가 존재하지 않습니다. 아직 메모리의 아무 곳이나. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이러한 변환을 원하면 필요한 포인터 배열을 수동으로 작성하고 채워야합니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6325f458cb378a4b64ec12cd194cb25703a0a7a1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;T&lt;/code&gt; is a &lt;a href=&quot;https://stackoverflow.com/questions/146589/&quot;&gt;POD&lt;/a&gt; (like &lt;code&gt;int&lt;/code&gt; in the above example), no initialization takes place.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;경우 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; 는&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; A는 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/146589/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;POD&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (같은 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 위의 예)에는 초기화가 일어나지 않는다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="16e6c04649f4d9ae6d831611c9b9eff3d05641fc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;T&lt;/code&gt; provides no accessible default-constructor, the program does not compile.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;경우 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; 가&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 액세스 가능한 기본-생성자를 제공하지 않습니다, 프로그램은 컴파일되지 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eb41e3d981a1357a114e1a3e78f40d975727427d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;x&lt;/code&gt; denotes an &lt;em&gt;array&lt;/em&gt;, then array-to-pointer decay will kick in, because adding an array and an integer is meaningless (there is no plus operation on arrays), but adding a pointer and an integer makes sense:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열을&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 나타내는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;경우 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열과 정수를 추가하는 것은 의미가 없으므로 (배열에 더하기 연산이 없음) 포인터와 정수를 추가하는 것이 의미가 있기 때문에 배열 간 포인터 붕괴가 시작됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d91f0db788d31e3ba270714f7e149455d1be1520" translate="yes" xml:space="preserve">
          <source>If you are done using an anonymous array, you have to release it back to the system:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;익명 배열을 사용한 경우 시스템으로 다시 배포해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e9be23246f4db6859f24f143fdfa68db6666d4e3" translate="yes" xml:space="preserve">
          <source>If you are unfamiliar with the C declarator syntax, the parenthesis in the type &lt;code&gt;int(*)[8]&lt;/code&gt; are essential:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C 선언자 구문에 익숙하지 않은 경우 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int(*)[8]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 유형의 괄호 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;는 필수입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="14c24b9c0b2d0257aaceb7cde0555b7a4f3c1769" translate="yes" xml:space="preserve">
          <source>If you feel something important is missing in this FAQ, write an answer and link it here as an additional part.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 FAQ에서 중요한 내용이 누락되었다고 생각되면 답변을 작성하여 여기에 추가 부분으로 연결하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d5bcb303a25ffde92cc0974fd617bffe13104ab4" translate="yes" xml:space="preserve">
          <source>If, on the other hand, &lt;code&gt;x&lt;/code&gt; denotes a &lt;em&gt;pointer&lt;/em&gt; to the first (or any other) element of an array, then array-to-pointer decay is not necessary, because the pointer on which &lt;code&gt;i&lt;/code&gt; is going to be added already exists:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;반면에, 만약 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; 가&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 나타내고 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;포인터&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 제 (또는 기타) 배열의 요소가되는 포인터 때문에, 다음 배열에 포인터 감쇠가 필요하지 않다 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이미 추가 될 예정이다 존재 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1ec50dff9162ea0c55c63f2ee2fedc58220b5d3c" translate="yes" xml:space="preserve">
          <source>In C++0x, arrays &lt;em&gt;can&lt;/em&gt; be initialized in the member initializer list thanks to &lt;a href=&quot;http://www.youtube.com/watch?v=uEqknlxXJfg&quot;&gt;uniform initialization&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 0x에서는 &lt;/font&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=uEqknlxXJfg&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;균일 한 초기화&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 덕분에 멤버 이니셜 라이저 목록에서 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;을&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 초기화 &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;할 수&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2c1bdd707612ae097771a2db46f18f20e841ba75" translate="yes" xml:space="preserve">
          <source>In C, anonymous arrays are created via &lt;code&gt;malloc&lt;/code&gt; and friends. In C++, anonymous arrays are created using the &lt;code&gt;new T[size]&lt;/code&gt; syntax which returns a pointer to the first element of an anonymous array:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C에서는 익명 배열이 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;malloc&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 과 친구들을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;통해 생성됩니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++에서 익명 배열은 익명 배열 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 첫 번째 요소에 대한 포인터를 반환하는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new T[size]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 구문을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용하여 생성 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="41b1d1fe662d24559c66cf35d58d5d091bc62661" translate="yes" xml:space="preserve">
          <source>In Windows 7 this compiles and links fine with both MinGW g++ 4.4.1 and
Visual C++ 10.0.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Windows 7에서는 MinGW g ++ 4.4.1 및 Visual C ++ 10.0과 잘 컴파일되고 링크됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="437c03d1c28955b95b16ec11169a5605bc02a59a" translate="yes" xml:space="preserve">
          <source>In order to detect this error at run time you can do &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;런타임시이 오류를 감지하려면 다음을 수행하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="26eee36cf964126ee4dcb59852fa30dc17bf56fe" translate="yes" xml:space="preserve">
          <source>In that case, the remaining elements are &lt;a href=&quot;https://stackoverflow.com/questions/1613383/&quot;&gt;zero-initialized&lt;/a&gt;. Note that C++ allows an empty array initializer (all elements are zero-initialized), whereas C89 does not (at least one value is required). Also note that array initializers can only be used to &lt;em&gt;initialize&lt;/em&gt; arrays; they cannot later be used in assignments.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 경우 나머지 요소는 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1613383/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;0으로 초기화&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++에서는 빈 배열 이니셜 라이저 (모든 요소가 0으로 초기화 됨)를 허용하지만 C89는 그렇지 않습니다 (적어도 하나의 값이 필요함). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 그 배열 초기화는 할 수 있습니다주의 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;초기화&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 배열; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나중에 과제에 사용할 수 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d28f9a6d6ed85ab85596615272616028e68b524" translate="yes" xml:space="preserve">
          <source>In the following text, &quot;array&quot; means &quot;C array&quot;, not the class template &lt;code&gt;std::array&lt;/code&gt;. Basic knowledge of the C declarator syntax is assumed. Note that the manual usage of &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; as demonstrated below is extremely dangerous in the face of exceptions, but that is the topic of &lt;a href=&quot;https://stackoverflow.com/questions/712639/&quot;&gt;another FAQ&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음 텍스트에서 &quot;array&quot;는 클래스 템플리트 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 아니라 &quot;C array&quot;를 의미 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C 선언자 구문에 대한 기본 지식이 있다고 가정합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;아래에 설명 된대로 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;delete&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;수동으로 사용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하는 것은 예외 상황에서 매우 위험하지만 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/712639/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 FAQ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 주제입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a5dcb9a46d4b13c3f0a33e51d890dc93adbc865" translate="yes" xml:space="preserve">
          <source>In this case, the array size is significant. Since writing a function that only accepts arrays of exactly 8 elements is of little use, programmers usually write such functions as templates:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 경우 배열 크기가 중요합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;정확히 8 개 요소의 배열 만 받아들이는 함수를 작성하는 것은 거의 쓸모가 없으므로 프로그래머는 일반적으로 템플릿과 같은 함수를 작성합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="890a35e657b26ee90956dc55f869c0acaf541ebb" translate="yes" xml:space="preserve">
          <source>In-practice explanation: in &lt;code&gt;main.cpp&lt;/code&gt; the array is treated as a pointer, placed
at the same address as the array. For 32-bit executable this means that the first
&lt;code&gt;int&lt;/code&gt; value in the array, is treated as a pointer. I.e., in &lt;code&gt;main.cpp&lt;/code&gt; the
&lt;code&gt;numbers&lt;/code&gt; variable contains, or appears to contain, &lt;code&gt;(int*)1&lt;/code&gt;. This causes the
program to access memory down at very bottom of the address space, which is
conventionally reserved and trap-causing. Result: you get a crash.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;실습 설명 : &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main.cpp&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 배열은 배열과 동일한 주소에 배치되는 포인터로 취급됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;32 비트 실행 파일의 경우 이는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 첫 번째 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 값이 포인터로 처리됨을 의미합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;즉, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main.cpp&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;numbers&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 변수는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(int*)1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 포함하거나 포함하는 것으로 보입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이로 인해 프로그램은 주소 공간의 맨 아래에서 메모리에 액세스합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;결과 : 충돌이 발생합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="070fe92341683cf9d092141bd709fad70875176e" translate="yes" xml:space="preserve">
          <source>In-the-formal explanation: the program has Undefined Behavior (UB), and instead
of crashing it can therefore just hang, or perhaps do nothing, or it
can send threating e-mails to the presidents of the USA, Russia, India,
China and Switzerland, and make Nasal Daemons fly out of your nose.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;공식적인 설명 :이 프로그램에는 UB (Undefined Behavior)가 있으므로 충돌하지 않고 그냥 중단하거나 아무 것도하지 않거나 미국, 러시아, 인도, 중국과 스위스, 코에서 코피를 날리십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c97bad7c68964c91e199c52d4f2f4a2d7be3c3fe" translate="yes" xml:space="preserve">
          <source>Indexing operator</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;인덱싱 연산자&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="608d106aeaf49a5d6d2d18e72fbb2975527e39df" translate="yes" xml:space="preserve">
          <source>Initialization is performed in ascending order. Note that the initial values depend on the element type &lt;code&gt;T&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;초기화는 오름차순으로 수행됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;초기 값은 요소 유형 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에 따라 다릅니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7a1ce46f618ab33d9bc54dcc4675dfdfc40bbc7b" translate="yes" xml:space="preserve">
          <source>It is also possible to specify the size and provide a shorter array initializer:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;크기를 지정하고 더 짧은 배열 이니셜 라이저를 제공 할 수도 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3d2fd5d37362f6b75096f1913050f5033ca3aaba" translate="yes" xml:space="preserve">
          <source>M:\count&amp;gt; _</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;M : \ count&amp;gt; _&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cdd64d56a86a26a498d6bbef6d3c1868cc754771" translate="yes" xml:space="preserve">
          <source>M:\count&amp;gt; g++ compile_time_detection.cpp</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;M : \ count&amp;gt; g ++ compile_time_detection.cpp&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bf9d1f82d43843cd09374cb46c7a3dcbd8fbc7d5" translate="yes" xml:space="preserve">
          <source>Main pitfall: the C idiom is not typesafe. For example, the code
&amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;주요 함정 : C 관용구는 형식이 안전하지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어 코드는 ...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ef5472faf1452242241b190fbf2f97ecd84ba6ea" translate="yes" xml:space="preserve">
          <source>Most programmers are familiar with named multidimensional arrays, but many are unaware of the fact that multidimensional array can also be created anonymously. Multidimensional arrays are often referred to as &quot;arrays of arrays&quot; or &quot;&lt;em&gt;true&lt;/em&gt; multidimensional arrays&quot;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;대부분의 프로그래머는 명명 된 다차원 배열에 익숙하지만, 다차원 배열도 익명으로 만들 수 있다는 사실을 모르는 사람이 많습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다차원 배열은 종종 &quot;어레이 배열&quot;또는 &quot; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;참&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 다차원 배열&quot;이라고합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="00762e90f2d0e1fc656e0809cb403c7716fbb355" translate="yes" xml:space="preserve">
          <source>Multidimensional arrays</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다차원 배열&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ad847916fde2cd7cb8d9547c74c3fccb05986bb9" translate="yes" xml:space="preserve">
          <source>Named arrays of pointers</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;명명 된 포인터 배열&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d38b7a1ca47e08bdd5d13e7b55118d97017de16" translate="yes" xml:space="preserve">
          <source>Named multidimensional arrays</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;명명 된 다차원 배열&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eee6419b689f5d4600b5eb44117945feff22b904" translate="yes" xml:space="preserve">
          <source>Note how the pointer to the first element only points to a single integer (depicted as a small box), whereas the pointer to the entire array points to an array of 8 integers (depicted as a large box).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;첫 번째 요소에 대한 포인터가 단일 정수 (작은 상자로 표시됨) 만 가리키는 반면 전체 배열에 대한 포인터는 8 개의 정수 배열 (큰 상자로 표시됨)을 가리키는 방법에 유의하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="23ba020b1bef6697ee28252a1170fead955b8b56" translate="yes" xml:space="preserve">
          <source>Note that 2D grids such as the above are merely helpful visualizations. From the point of view of C++, memory is a &quot;flat&quot; sequence of bytes. The elements of a multidimensional array are stored in row-major order. That is, &lt;code&gt;connect_four[0][6]&lt;/code&gt; and &lt;code&gt;connect_four[1][0]&lt;/code&gt; are neighbors in memory. In fact, &lt;code&gt;connect_four[0][7]&lt;/code&gt; and &lt;code&gt;connect_four[1][0]&lt;/code&gt; denote the same element! This means that you can take multi-dimensional arrays and treat them as large, one-dimensional arrays:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위와 같은 2D 그리드는 단지 유용한 시각화에 불과합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++의 관점에서 볼 때 메모리는 &quot;플랫&quot;바이트 시퀀스입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다차원 배열의 요소는 주요 행 순서로 저장됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;즉, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;connect_four[0][6]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;connect_four[1][0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 메모리의 이웃입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;실제로, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;connect_four[0][7]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;connect_four[1][0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 동일한 요소를 나타냅니다! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;즉, 다차원 배열을 가져 와서 큰 1 차원 배열로 취급 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7186b877025b5d08bccafccf8a0b9683541aa2f2" translate="yes" xml:space="preserve">
          <source>Note that in the depicted case, &lt;code&gt;x&lt;/code&gt; is a pointer &lt;em&gt;variable&lt;/em&gt; (discernible by the small box next to &lt;code&gt;x&lt;/code&gt;), but it could just as well be the result of a function returning a pointer (or any other expression of type &lt;code&gt;T*&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;묘사 된 경우 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 포인터 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;변수&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 옆의 작은 상자로 식별 가능 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;)이지만 포인터를 반환하는 함수 (또는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 유형의 다른 표현식 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;)의 결과 일 수도 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5e01e8bdf0e314ca975d17798f6f9fac1c741d43" translate="yes" xml:space="preserve">
          <source>Note that it is illegal to provide &lt;code&gt;&amp;amp;x[n]&lt;/code&gt; as the second argument since this is equivalent to &lt;code&gt;&amp;amp;*(x+n)&lt;/code&gt;, and the sub-expression &lt;code&gt;*(x+n)&lt;/code&gt; technically invokes &lt;a href=&quot;https://stackoverflow.com/questions/3144904/&quot;&gt;undefined behavior&lt;/a&gt; in C++ (but not in C99).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;x[n]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;*(x+n)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 과 동일하고 하위 표현식 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(x+n)&lt;/code&gt; 은&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 기술적 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;으로 C ++에서 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3144904/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;정의되지 않은 동작&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;호출 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하기 때문에 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;amp; x [n]&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 두 번째 인수로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제공하는 것은 불법 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4a783e015ec501739631e705c9f21aff6b055fac" translate="yes" xml:space="preserve">
          <source>Note that the array itself is still allocated as a single block in memory.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열 자체는 여전히 메모리에서 단일 블록으로 할당됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="554d5b1a6dcb70e7921afec83e4b4971c2df9586" translate="yes" xml:space="preserve">
          <source>Note that the size is part of the type, that is, array types of different size are incompatible types that have absolutely nothing to do with each other. &lt;code&gt;sizeof(T[n])&lt;/code&gt; is equivalent to &lt;code&gt;n * sizeof(T)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;크기는 유형의 일부입니다. 즉, 다른 크기의 배열 유형은 서로 관련이없는 호환되지 않는 유형입니다. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof(T[n])&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;n * sizeof(T)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d4de64b4a294e1e1f832bbe75edd6afa90d315d2" translate="yes" xml:space="preserve">
          <source>Note that there is &lt;em&gt;no&lt;/em&gt; array-to-pointer decay going on here. Although evaluating &lt;code&gt;new int[size]&lt;/code&gt; does in fact create an &lt;em&gt;array&lt;/em&gt; of integers, the result of the expression &lt;code&gt;new int[size]&lt;/code&gt; is &lt;em&gt;already&lt;/em&gt; a pointer to a single integer (the first element), &lt;em&gt;not&lt;/em&gt; an array of integers or a pointer to an array of integers of unknown size. That would be impossible, because the static type system requires array sizes to be compile-time constants. (Hence, I did not annotate the anonymous array with static type information in the picture.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기서는 어레이 간 포인터 붕괴 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;가 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;없습니다&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . 평가되지만 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new int[size]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사실에서 생성 않는 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 정수, 식의 결과 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new int[size]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이다 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이미&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 단일 정수 포인터 (첫 번째 요소) &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하지&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 내지 An 정수 배열 또는 포인터 알 수없는 크기의 정수 배열. 정적 유형 시스템에서는 배열 크기가 컴파일 타임 상수 여야하므로 불가능합니다. (그래서 그림에 정적 유형 정보로 익명 배열에 주석을 달지 않았습니다.)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa3802c18f9d7df661ece56023d81fd4a5c43ad8" translate="yes" xml:space="preserve">
          <source>Note that this generates a view of the original multidimensional array. If you need a copy instead, you must create extra arrays and copy the data yourself:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이렇게하면 원래 다차원 배열의보기가 생성됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;대신 복사본이 필요한 경우 추가 배열을 만들고 데이터를 직접 복사해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="731accb3850c583ab5dab43550cbdd5a71aa446b" translate="yes" xml:space="preserve">
          <source>Note that you can only call such a function template with an actual array of integers, not with a pointer to an integer. The size of the array is automatically inferred, and for every size &lt;code&gt;n&lt;/code&gt;, a different function is instantiated from the template. You can also write &lt;a href=&quot;https://stackoverflow.com/questions/4759078/&quot;&gt;quite useful&lt;/a&gt; function templates that abstract from both the element type and from the size.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;정수에 대한 포인터가 아니라 실제 정수 배열로만 함수 템플릿을 호출 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열의 크기가 자동으로 추론되며 모든 크기 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에 대해 템플릿에서 다른 함수가 인스턴스화됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;요소 유형과 크기 모두에서 추상화되는 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4759078/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;매우 유용한&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 함수 템플릿을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;작성할 수도 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="85d63e980e7422c247f8647e79d77a52c6d97e7f" translate="yes" xml:space="preserve">
          <source>OK, you&amp;rsquo;ve been told, or have found out yourself, that globals (namespace
scope variables that can be accessed outside the translation unit) are
Evil&amp;trade;. But did you know how truly Evil&amp;trade; they are? Consider the
program below, consisting of two files [main.cpp] and [numbers.cpp]:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;전역 (번역 단위 외부에서 액세스 할 수있는 네임 스페이스 범위 변수)이 Evil &amp;trade;이라는 말을 들었습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 그들이 실제로 얼마나 악한 지 아십니까? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;두 개의 파일 [main.cpp] 및 [numbers.cpp]로 구성된 아래 프로그램을 고려하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="53bde04906550009556f993b7806f8d76b8c6d5f" translate="yes" xml:space="preserve">
          <source>Obviously, anonymous arrays require more memory than named arrays due to the extra pointer that must be stored separately. (There is also some additional overhead on the free store.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;분명히 익명 배열은 별도로 저장해야하는 추가 포인터로 인해 명명 된 배열보다 더 많은 메모리가 필요합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(무료 상점에도 약간의 오버 헤드가 있습니다.)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63fb417f29bfd9f2405ad6c79a04190fdd2d712c" translate="yes" xml:space="preserve">
          <source>On the first line, the compiler detects an assignment from a pointer to a pointer, which trivially succeeds. On the second line, it detects an assignment from an &lt;em&gt;array&lt;/em&gt; to a pointer. Since this is meaningless (but &lt;em&gt;pointer&lt;/em&gt; to pointer assignment makes sense), array-to-pointer decay kicks in as usual.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;첫 번째 줄에서 컴파일러는 포인터에서 포인터로의 할당을 감지하여 사소하게 성공합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;두 번째 줄에서는 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 포인터로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 할당을 감지합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 (그러나 의미이기 때문에 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;포인터&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 포인터 할당에 말이), 배열에 대한 포인터 붕괴 차기에서 평소와 같이.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3b30f736895ab3c14d15df82c8709f3aa1fb3ea" translate="yes" xml:space="preserve">
          <source>One can always write the more verbose</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;항상 더 장황하게 쓸 수 있습니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c4685ee8261138ace07d8fb78c91b3a94b27dd88" translate="yes" xml:space="preserve">
          <source>One important context in which an array does &lt;em&gt;not&lt;/em&gt; decay into a pointer to its first element is when the &lt;code&gt;&amp;amp;&lt;/code&gt; operator is applied to it. In that case, the &lt;code&gt;&amp;amp;&lt;/code&gt; operator yields a pointer to the &lt;em&gt;entire&lt;/em&gt; array, not just a pointer to its first element. Although in that case the &lt;em&gt;values&lt;/em&gt; (the addresses) are the same, a pointer to the first element of an array and a pointer to the entire array are completely distinct types:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열이 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;첫 번째 요소에 대한 포인터로 붕괴 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;되지 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;않는&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 중요한 컨텍스트 중 하나 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 연산자를 적용 할 때입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 경우 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 연산자 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;는 첫 번째 요소에 대한 포인터뿐만 아니라 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;전체&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 배열에 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;대한 포인터를 생성합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 경우 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;값&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (주소)은 동일하지만 배열의 첫 번째 요소에 대한 포인터와 전체 배열에 대한 포인터는 완전히 다른 유형입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="41e3330ec09c505432c9bd89998da5f0ce62c087" translate="yes" xml:space="preserve">
          <source>Otherwise, the default-constructor of &lt;code&gt;T&lt;/code&gt; initializes all the elements.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그렇지 않으면 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 기본 생성자가 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 요소를 ​​초기화합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e1dd1f36b3d11a080ec32ab7967d3c72b1acb694" translate="yes" xml:space="preserve">
          <source>Parameter passing</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;매개 변수 전달&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd57df0504585da5013127cd2c481cb9a4d98a15" translate="yes" xml:space="preserve">
          <source>Pass by pointer</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;포인터로 전달&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a428f2745394276b3ef22fe8ce93840f03d517fe" translate="yes" xml:space="preserve">
          <source>Pass by reference</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;참조로 전달&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c5015408faa4e590c7a33664c84fb50fb239cff6" translate="yes" xml:space="preserve">
          <source>Please contact the application's support team for more information.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;자세한 내용은 응용 프로그램 지원 팀에 문의하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="886d0e716745d04046260e2fd4e01fbcdb9fbe82" translate="yes" xml:space="preserve">
          <source>Pointer arithmetic</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;포인터 산술&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="27319e98c440e9f7e0dae34adba8c3b67a414d93" translate="yes" xml:space="preserve">
          <source>Programmers often confuse multidimensional arrays with arrays of pointers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프로그래머는 종종 다차원 배열과 포인터 배열을 혼동합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0d5fda95e3940bc09dc1ccc22666813c0b54f73d" translate="yes" xml:space="preserve">
          <source>Ranges</source>
          <target state="translated">Ranges</target>
        </trans-unit>
        <trans-unit id="7976ce91c52fe87631d0a3d9dd7e9ac38cb29122" translate="yes" xml:space="preserve">
          <source>Related: macros do not respect scopes, so to avoid name collisions it can be a
good idea to use a name prefix, e.g. &lt;code&gt;MYLIB_STATIC_N_ITEMS&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;관련 : 매크로는 범위를 고려하지 않으므로 이름 충돌을 피하려면 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MYLIB_STATIC_N_ITEMS&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 같이 이름 접두사를 사용하는 것이 좋습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="845580eed354c30eedf70a4e23705439efbc345d" translate="yes" xml:space="preserve">
          <source>Since an &lt;code&gt;array&lt;/code&gt; decays to pointer to first element where needed, the
expression &lt;code&gt;sizeof(a)/sizeof(a[0])&lt;/code&gt; can also be written as
&lt;code&gt;sizeof(a)/sizeof(*a)&lt;/code&gt;. It means the same, and no matter how it&amp;rsquo;s
written it is the &lt;strong&gt;C idiom&lt;/strong&gt; for finding the number elements of array.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이 필요한 경우 첫 번째 요소에 대한 포인터로 붕괴 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;되기 때문에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof(a)/sizeof(a[0])&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 표현식 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;을 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof(a)/sizeof(*a)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;쓸&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 수도 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그것은 똑같은 것을 의미하며, 그것이 어떻게 작성 되든 그것은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열의 숫자 요소를 찾는 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C 관용구&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fdd3bf58590a288a7255f35b31aa883fdb12ea5a" translate="yes" xml:space="preserve">
          <source>Since arrays themselves cannot be passed by value, usually a pointer to their first element is passed by value instead. This is often called &quot;pass by pointer&quot;. Since the size of the array is not retrievable via that pointer, you have to pass a second parameter indicating the size of the array (the classic C solution) or a second pointer pointing after the last element of the array (the C++ iterator solution):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열 자체는 값으로 전달 될 수 없으므로 일반적으로 첫 번째 요소에 대한 포인터가 값으로 전달됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것을 종종 &quot;포인터로 전달&quot;이라고합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열의 크기는 해당 포인터를 통해 검색 할 수 없으므로 배열의 크기를 나타내는 두 번째 매개 변수 (클래식 C 솔루션) 또는 배열의 마지막 요소 (C ++ 반복자 솔루션)를 가리키는 두 번째 포인터를 전달해야합니다. :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b44febfd34ec6b3b83a2f3ed4ef55e29031984dc" translate="yes" xml:space="preserve">
          <source>Since each line is allocated individually now, viewing 2D arrays as 1D arrays does not work anymore.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 각 라인이 개별적으로 할당되므로 2D 배열을 1D 배열로 볼 때 더 이상 작동하지 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2f0cf1c959967562a9ea9857497386e60eb8610f" translate="yes" xml:space="preserve">
          <source>Since in this case the number of elements in the array initializer is equal to the size of the array, specifying the size manually is redundant. It can automatically be deduced by the compiler:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 경우 배열 이니셜 라이저의 요소 수는 배열의 크기와 같으므로 수동으로 크기를 지정하면 중복됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컴파일러가 자동으로 추론 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="76da052225a0e136a9e4e987d8dabb6143458717" translate="yes" xml:space="preserve">
          <source>Since the syntax &lt;code&gt;*(x+i)&lt;/code&gt; is a bit clumsy, C++ provides the alternative syntax &lt;code&gt;x[i]&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;구문 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(x+i)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 약간 어색하기 때문에 C ++은 대체 구문 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x[i]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 제공합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e02a2730b214f5417ece2b04ba144915d409379b" translate="yes" xml:space="preserve">
          <source>Since the types don't match, the program crashes when you run it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;유형이 일치하지 않으므로 프로그램을 실행할 때 충돌이 발생합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8441d3938f1ecea2e057daaaa95958eeb1304ca0" translate="yes" xml:space="preserve">
          <source>Static POD arrays are initialized &lt;em&gt;exactly once&lt;/em&gt;, and the initial values are &lt;em&gt;typically&lt;/em&gt; baked into the executable, in which case there is no initialization cost at runtime. This is not always the most space-efficient solution, however, and it is not required by the standard.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;정적 POD 배열은 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;정확히 한 번&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 초기화 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;되고 초기 값은 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;일반적으로&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 실행 파일에 구워 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;지며, &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 경우 런타임시 초기화 비용이 없습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것이 항상 가장 공간 효율적인 솔루션 인 것은 아니며 표준에서 요구하지는 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5fc6d78bfd1b3cbec3f64c6df4199384d6e606cb" translate="yes" xml:space="preserve">
          <source>Static arrays</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;정적 배열&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a0600c54cb97b541cf9c0e780ec5c24bde3f13bd" translate="yes" xml:space="preserve">
          <source>Static arrays (arrays living &quot;in the data segment&quot;) are local array variables defined with the &lt;code&gt;static&lt;/code&gt; keyword and array variables at namespace scope (&quot;global variables&quot;):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;정적 배열 ( &quot;데이터 세그먼트&quot;에있는 배열)은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;네임 스페이스 범위 ( &quot;전역 변수&quot;)에서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 키워드 및 배열 변수로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;정의 된 로컬 배열 변수입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="774c4e05a928152894fd8eee023448f0bd571034" translate="yes" xml:space="preserve">
          <source>Static arrays without an array initializer are zero-initialized prior to any further potential initialization.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열 이니셜 라이저가없는 정적 배열은 추가로 초기화하기 전에 0으로 초기화됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d719c3b1e68cccdda79bb9c4f8e7142667d5e8af" translate="yes" xml:space="preserve">
          <source>Static non-POD arrays are initialized the &lt;em&gt;first time&lt;/em&gt; the flow of control passes through their definition. In the case of local static arrays, that may never happen if the function is never called.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;정적 비 POD 어레이는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어 흐름이 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;처음으로&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 정의를 통과 할 &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;때&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 초기화 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;로컬 정적 배열의 경우 함수가 호출되지 않으면 발생하지 않을 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc398be3b099870d82f0233260c92cd7fe247e52" translate="yes" xml:space="preserve">
          <source>The compiler rewrites &lt;code&gt;int const a[7]&lt;/code&gt; to just &lt;code&gt;int const a[]&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컴파일러는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int const a[7]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int const a[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 다시 씁니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b4182f7f5ae56ba8db00f357997716a8374d56d" translate="yes" xml:space="preserve">
          <source>The compiler rewrites &lt;code&gt;int const a[]&lt;/code&gt; to &lt;code&gt;int const* a&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컴파일러는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int const a[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int const* a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 다시 작성 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="686df3b8d217ab698b2df0c1fd71552a18fd8b54" translate="yes" xml:space="preserve">
          <source>The compiler will silently generate a pointer to the first element of an array whenever it is deemed useful, that is, whenever an operation would fail on an array but succeed on a pointer. This conversion from array to pointer is trivial, since the resulting pointer &lt;em&gt;value&lt;/em&gt; is simply the address of the array. Note that the pointer is &lt;em&gt;not&lt;/em&gt; stored as part of the array itself (or anywhere else in memory). &lt;strong&gt;An array is not a pointer.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컴파일러는 유용한 것으로 간주 될 때마다, 즉 배열에서 작업이 실패하지만 포인터에서 성공할 때마다 배열의 첫 번째 요소에 대한 포인터를 자동으로 생성합니다. 결과 포인터 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;값&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이 단순히 배열의 주소 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이기 때문에 배열에서 포인터로의 변환은 쉽지 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;않습니다. 포인터는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열 자체의 일부 (또는 메모리의 다른 위치)로 저장 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;되지 않습니다&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열은 포인터가 아닙니다.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a5270e2af134e0442ff7692e26dd083472328919" translate="yes" xml:space="preserve">
          <source>The compilers are fully within their rights to not diagnose this error,
because C++11 &amp;sect;3.5/10 says, about the requirement of compatible types
for the declarations,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 11 &amp;sect;3.5 / 10에 따르면 선언에 호환되는 유형의 요구 사항에 대해 컴파일러는이 오류를 진단하지 않을 권리가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b3c4bbf6e6b3262be7b6e0ac48d15ee8ea7abffa" translate="yes" xml:space="preserve">
          <source>The definition of the indexing operator leads to the following interesting equivalence:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;인덱싱 연산자의 정의는 다음과 같은 흥미로운 내용으로 이어집니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8f0c75d53a53f4088924e02576b1ea2942b86f60" translate="yes" xml:space="preserve">
          <source>The following ASCII art depicts the memory layout if the size is computed as 8 at runtime:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음 ASCII 아트는 런타임에 크기가 8로 계산되는 경우 메모리 레이아웃을 보여줍니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="554e227d03dda0191d05be5936967bfe2f42dec4" translate="yes" xml:space="preserve">
          <source>The following ASCII art explains this distinction:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음 ASCII 기술은이 차이점을 설명합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b9ad5ce162146034fe3468d816b1762bdc3db4ef" translate="yes" xml:space="preserve">
          <source>The only &quot;connection&quot; between &lt;code&gt;T[n]&lt;/code&gt; and &lt;code&gt;T[m]&lt;/code&gt; is that both types can implicitly be &lt;em&gt;converted&lt;/em&gt; to &lt;code&gt;T*&lt;/code&gt;, and the result of this conversion is a pointer to the first element of the array. That is, anywhere a &lt;code&gt;T*&lt;/code&gt; is required, you can provide a &lt;code&gt;T[n]&lt;/code&gt;, and the compiler will silently provide that pointer:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;간의 유일한 &quot;연결&quot; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T[n]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T[m]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 두 종류 암시 될 수 있다는 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;변환&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , 이러한 변환의 결과가 상기 어레이의 첫번째 엘리먼트에 대한 포인터이다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;즉, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 필요한 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 곳에서 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;T &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T[n]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 제공 할 수 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있으며 컴파일러는 해당 포인터를 자동으로 제공합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4900a0a1149898ae253be24f75d402af0b30da85" translate="yes" xml:space="preserve">
          <source>The pitfall: as of July 2015 the above compiles with MinGW-64 5.1.0 with
&lt;code&gt;-pedantic-errors&lt;/code&gt;, and,
testing with the online compilers at &lt;a href=&quot;http://gcc.godbolt.org/&quot;&gt;gcc.godbolt.org/&lt;/a&gt;, also with clang 3.0
and clang 3.2, but not with clang 3.3, 3.4.1, 3.5.0, 3.5.1, 3.6 (rc1) or
3.7 (experimental). And important for the Windows platform, it does not compile
with Visual C++ 2015. The reason is a C++11/C++14 statement about use of
references in &lt;code&gt;constexpr&lt;/code&gt; expressions:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;함정 : 2015 년 7 월 현재 위의 내용은 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;-pedantic-errors&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 함께 MinGW-64 5.1.0 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;으로 컴파일하고 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://gcc.godbolt.org/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;gcc.godbolt.org/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 온라인 컴파일러를 사용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하여 clang 3.0 및 clang 3.2로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;테스트 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하지만 clang은 아닙니다. 3.3, 3.4.1, 3.5.0, 3.5.1, 3.6 (rc1) 또는 3.7 (실험). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Windows 플랫폼의 경우 Visual C ++ 2015로 컴파일되지 않습니다. 그 이유는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 표현식 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에서 참조 사용에 대한 C ++ 11 / C ++ 14 문입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f45126b06ef23df5ffbfdd6efaae59b432607f7f" translate="yes" xml:space="preserve">
          <source>The runtime error detection is better than no detection, but it wastes a little
processor time, and perhaps much more programmer time. Better with detection at
compile time! And if you're happy to not support arrays of local types with C++98,
then you can do that:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;런타임 오류 감지는 감지하지 않는 것보다 낫지 만 프로세서 시간이 약간 소요되고 프로그래머 시간이 훨씬 더 많이 소요됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컴파일 타임에 감지 기능이 향상되었습니다! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 C ++ 98을 사용하여 로컬 유형의 배열을 지원하지 않으려면 다음과 같이하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a649050a2be06c8e39adac5d67332961492c1c85" translate="yes" xml:space="preserve">
          <source>The same paragraph details the variation that is allowed:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;동일한 단락에 허용되는 변형이 자세히 설명되어 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8fdd2f0bef4d6e460fb6f1f2ec6ebe3c770034da" translate="yes" xml:space="preserve">
          <source>The same situation arises in classes and is maybe more obvious. A pointer to an object and a pointer to its first data member have the same &lt;em&gt;value&lt;/em&gt; (the same address), yet they are completely distinct types.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;같은 상황이 수업에서 발생하고 아마도 더 분명합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;객체에 대한 포인터와 첫 번째 데이터 멤버에 대한 포인터는 동일한 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;값&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (같은 주소)을 갖지만 완전히 다른 유형입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e7540274c5dbcf87fc080dd7cc42e01b3035b4fe" translate="yes" xml:space="preserve">
          <source>This FAQ is split into five parts:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 FAQ는 다섯 부분으로 나뉩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="75cbb85f170e4859016dc81df1a331401263eebc" translate="yes" xml:space="preserve">
          <source>This allowed variation does not include declaring a name as an array in one
translation unit, and as a pointer in another translation unit.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 허용 된 변형에는 이름을 한 번역 단위의 배열로 선언하고 다른 번역 단위의 포인터로 선언하는 것이 포함되지 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3cbef9e71473e0b651623890cdcceb97160ae6b" translate="yes" xml:space="preserve">
          <source>This application has requested the Runtime to terminate it in an unusual way.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 응용 프로그램은 런타임을 비정상적인 방식으로 종료하도록 요청했습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="77a8211a815c79e630f954b14acfcbbff4945d7c" translate="yes" xml:space="preserve">
          <source>This conversion is known as &quot;array-to-pointer decay&quot;, and it is a major source of confusion. The size of the array is lost in this process, since it is no longer part of the type (&lt;code&gt;T*&lt;/code&gt;). Pro: Forgetting the size of an array on the type level allows a pointer to point to the first element of an array of &lt;em&gt;any&lt;/em&gt; size. Con: Given a pointer to the first (or any other) element of an array, there is no way to detect how large that array is or where exactly the pointer points to relative to the bounds of the array. &lt;a href=&quot;https://stackoverflow.com/questions/4261074/&quot;&gt;Pointers are extremely stupid&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 변환은 &quot;배열 간 포인터 붕괴&quot;라고하며 혼란의 주요 원인입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 프로세스에서 어레이의 크기는 더 이상 유형 ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )의 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;일부가 아니므로 손실됩니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;장점 : 형식 수준에서 배열의 크기를 잊어 버리면 포인터가 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 크기 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 배열의 첫 번째 요소를 가리킬 &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;수&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단점 : 배열의 첫 번째 (또는 다른) 요소에 대한 포인터가 주어지면 해당 배열의 크기 또는 배열의 경계를 기준으로 포인터가 정확히 가리키는 위치를 감지 할 방법이 없습니다. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4261074/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;포인터는 매우 바보&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a4348c73ecd32e24327bad7c0bda07f2fded0659" translate="yes" xml:space="preserve">
          <source>This is how a named multidimensional array looks like in memory:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;메모리에서 명명 된 다차원 배열의 모양은 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fdfc624bf57b66e2918a46588b9dcca5300477c3" translate="yes" xml:space="preserve">
          <source>This is how an anonymous multidimensional array looks like in memory:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 익명의 다차원 배열이 메모리에서 어떻게 보이는지입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ede415bd1cfcb19839ab828b1f1b520817e906b1" translate="yes" xml:space="preserve">
          <source>This is more flexible than what true array assignment could provide because it is possible to copy slices of larger arrays into smaller arrays.
&lt;code&gt;std::copy&lt;/code&gt; is usually specialized for primitive types to give maximum performance. It is unlikely that &lt;code&gt;std::memcpy&lt;/code&gt; performs better. If in doubt, measure.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이는 더 큰 어레이의 슬라이스를 더 작은 어레이로 복사 할 수 있기 때문에 실제 어레이 할당이 제공 할 수있는 것보다 더 유연합니다. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::copy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 일반적으로 기본 유형에 최적화되어 최대 성능을 제공합니다. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::memcpy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 더 잘 수행 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;되지는 않습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의심스러운 경우 측정하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a81aa85761c51a0de5661013b69548fe3e215386" translate="yes" xml:space="preserve">
          <source>This is the only solution that works with element types that have no default constructor.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;기본 생성자가없는 요소 유형에서 작동하는 유일한 솔루션입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f883fd467cbb1529780034400816e1198b388651" translate="yes" xml:space="preserve">
          <source>To deal with collections that can be non-arrays one needs the overloadability of an
&lt;code&gt;n_items&lt;/code&gt; function, but also, for compile time use one needs a compile time
representation of the array size. And the classic C++03 solution, which works fine
also in C++11 and C++14, is to let the function report its result not as a value
but via its function result &lt;em&gt;type&lt;/em&gt;. For example like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;비 배열 일 수있는 컬렉션을 처리하려면 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;n_items&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 함수 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 오버로드 가능성이 필요 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하지만, 컴파일 시간을 사용하려면 배열 크기의 컴파일 시간 표현이 필요합니다. C ++ 11 및 C ++ 14에서도 잘 작동하는 클래식 C ++ 03 솔루션은 함수가 결과를 값이 아니라 함수 결과 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;유형을&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 통해보고하도록하는 것 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;입니다. 예를 들면 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="86ccc751b475ca0db70475e824206e924ea35910" translate="yes" xml:space="preserve">
          <source>Unfortunately, you can also provide a size in an array parameter which is silently ignored by the compiler. That is, the following three signatures are exactly equivalent, as indicated by the compiler errors:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;불행하게도, 컴파일러가 자동으로 무시하는 배열 매개 변수의 크기를 제공 할 수도 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;즉, 컴파일러 오류로 표시되는 다음 세 가지 서명은 정확히 동일합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="987ac6859eb610ba381637e374a761e25c6a0958" translate="yes" xml:space="preserve">
          <source>When using named multidimensional arrays, &lt;em&gt;all&lt;/em&gt; dimensions must be known at compile time:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;명명 된 다차원 배열을 사용하는 경우 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 차원을 컴파일 타임에 알아야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="037941813c24acca926890ecb0bb3d7c1d72ad7b" translate="yes" xml:space="preserve">
          <source>With C++11 and later it's natural, but as you'll see dangerous!, to
replace the C++03 function</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 11 이상에서는 당연하지만 C ++ 03 함수를 대체하는 것은 위험합니다!&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="89f756335068da1d48636a9fe82e0a3f5bd23361" translate="yes" xml:space="preserve">
          <source>With C++11 you can use this also for arrays of local type, and it's the type safe
&lt;strong&gt;C++ idiom&lt;/strong&gt; for finding the number of elements of an array.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 11을 사용하면 로컬 유형의 배열에도 사용할 수 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있으며 배열의 요소 수를 찾는 데 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;안전한 유형의 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 관용구&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="18a241c5629454bfac48aee554b037322204406c" translate="yes" xml:space="preserve">
          <source>With anonymous multidimensional arrays, all dimensions &lt;em&gt;except the first&lt;/em&gt; must be known at compile time:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;익명의 다차원 배열을 사용하면 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컴파일 타임에 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;첫 번째&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 차원을 &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제외한&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 모든 차원을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;알아야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b0e6bf7cf1415d98e09ee516a0a8f2f1e3d5ef8f" translate="yes" xml:space="preserve">
          <source>With deep C experience it&amp;rsquo;s natural to write &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;깊은 C 경험으로 작성하는 것이 자연 스럽습니다&amp;hellip;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0903eff36ec8b3650ef143d2b41f698fea3c7cd9" translate="yes" xml:space="preserve">
          <source>You can overcome the restriction of fixed width by introducing another level of indirection.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 수준의 간접 지시를 도입하여 고정 너비 제한을 극복 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9cbd8f05852ef038c494a761f689310e77a9157b" translate="yes" xml:space="preserve">
          <source>You can think of the compiler as rewriting &lt;code&gt;T p[]&lt;/code&gt; to &lt;code&gt;T *p&lt;/code&gt;&lt;strong&gt;in the context of parameter lists only&lt;/strong&gt;. This special rule is partly responsible for the whole confusion about arrays and pointers. In every other context, declaring something as an array or as a pointer makes a &lt;em&gt;huge&lt;/em&gt; difference.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컴파일러 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;는 매개 변수 목록의 컨텍스트에서만 &lt;/font&gt;&lt;/strong&gt;&lt;/font&gt; &lt;code&gt;T p[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T *p&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 로 다시 쓰는 것으로 생각할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 특별한 규칙은 배열과 포인터에 대한 전체 혼란을 부분적으로 담당합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 모든 맥락에서 배열이나 포인터로 무언가를 선언하면 &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;큰&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 차이가 있습니다.&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1aece31962ca91ece9ad614074408dff8ca56f74" translate="yes" xml:space="preserve">
          <source>You must release each anonymous array exactly once and then never touch it again afterwards. Not releasing it at all results in a memory leak (or more generally, depending on the element type, a resource leak), and trying to release it multiple times results in undefined behavior. Using the non-array form &lt;code&gt;delete&lt;/code&gt; (or &lt;code&gt;free&lt;/code&gt;) instead of &lt;code&gt;delete[]&lt;/code&gt; to release the array is also &lt;a href=&quot;https://stackoverflow.com/questions/1612031/&quot;&gt;undefined behavior&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;각 익명 배열을 정확히 한 번 해제 한 후에는 다시 만지지 마십시오. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;전혀 해제하지 않으면 메모리 누수가 발생하거나 (일반적으로 요소 유형에 따라 리소스 누수가 발생 함) 여러 번 해제하려고하면 정의되지 않은 동작이 발생합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;을 해제하기 위해 &lt;/font&gt; &lt;code&gt;delete[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대신 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열이 아닌 형식 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;delete&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (또는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;free&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )를 사용하는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;것도 &lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1612031/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;정의되지 않은 동작&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 입니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7cf4dca388e375295b617def54235d06f1f18486" translate="yes" xml:space="preserve">
          <source>an &lt;em&gt;id-expression&lt;/em&gt; that refers to a variable or data member of reference type
  unless the reference has a preceding initialization and either</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;참조에 선행 초기화가없고 다음 중 하나가 아닌 경우 참조 유형의 변수 또는 데이터 멤버를 참조 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하는 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;id- 표현식&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ee5a0cb7c4a9d8e5aaef6186e3dca85b7a1c4c63" translate="yes" xml:space="preserve">
          <source>array creation and initialization</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열 생성 및 초기화&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6915828ba027c236180d6e8c4ba69d8413c5d95d" translate="yes" xml:space="preserve">
          <source>arrays on the type level and accessing elements</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;유형 수준 및 액세스 요소의 배열&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aed12379aa394fd233ce8de1dde42fadfbb8dae3" translate="yes" xml:space="preserve">
          <source>assignment and parameter passing</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;할당 및 매개 변수 전달&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5e37194a585e4aee6d98b0399a5f22fd2cc761e0" translate="yes" xml:space="preserve">
          <source>common pitfalls when using arrays</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;배열을 사용할 때의 일반적인 함정&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="69b28d8d2e333e97a73be6ac4484ceb918b4ce92" translate="yes" xml:space="preserve">
          <source>compile_time_detection.cpp: In function 'void display(const int*)':</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;compile_time_detection.cpp : 'void display (const int *)'함수에서 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba91b6f0adec5d5575c2f50a5f21d1e358484f3c" translate="yes" xml:space="preserve">
          <source>compile_time_detection.cpp:14: error: no matching function for call to 'n_items(const int*&amp;amp;)'</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;compile_time_detection.cpp : 14 : 오류 : 'n_items (const int * &amp;amp;)'호출에 일치하는 함수가 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c4d482013cc4cc18e80a64e5984427c90c12ed9" translate="yes" xml:space="preserve">
          <source>it is a non-static data member of an object whose lifetime began within
  the evaluation of e;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;e의 평가 내에서 수명이 시작된 객체의 비 정적 데이터 멤버입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6bb2ba899277df8e9c8abaec677046b9e7febe4c" translate="yes" xml:space="preserve">
          <source>it is initialized with a constant expression or</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;상수 표현식으로 초기화되거나&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa0a88b7d54288b7f66de4f7d51b7f248e1c3534" translate="yes" xml:space="preserve">
          <source>multidimensional arrays and arrays of pointers</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다차원 배열과 포인터 배열&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8b843815899353680e28463b8efa687d68cc8a4f" translate="yes" xml:space="preserve">
          <source>passes a pointer to &lt;code&gt;N_ITEMS&lt;/code&gt;, and therefore most likely produces a wrong
result. Compiled as a 32-bit executable in Windows 7 it produces &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;N_ITEMS&lt;/code&gt; 에&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대한 포인터를 전달 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하므로 대부분 잘못된 결과를 생성합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Windows 7에서 32 비트 실행 파일로 컴파일되어&amp;hellip;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c30d6576bbcad8a1d310c146ea6af4cf8cc8fd26" translate="yes" xml:space="preserve">
          <source>where the significant change is the use of &lt;code&gt;constexpr&lt;/code&gt;, which allows
this function to produce a &lt;strong&gt;compile time constant&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기서 중요한 변화는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 사용으로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;,이 함수는 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컴파일 타임 상수&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 생성 할 수있게합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8fcd25a39d2037183044a8897e9a5333d727fded" translate="yes" xml:space="preserve">
          <source>with</source>
          <target state="translated">with</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
