<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/4810664">
    <body>
      <group id="4810664">
        <trans-unit id="d04e79de260ba2b52b7b4be3155464cf946b0af5" translate="yes" xml:space="preserve">
          <source>&amp;hellip; but this fails when &lt;code&gt;Collection&lt;/code&gt; is not a raw array.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;... pero esto falla cuando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Collection&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no es una matriz sin formato.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0612f3b5a654cd50db291e826efe5c34a0b6cc25" translate="yes" xml:space="preserve">
          <source>&amp;hellip; declarations for an array object can specify array types that
  differ by the presence or absence of a major array bound (8.3.4).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;hellip; Las declaraciones para un objeto de matriz pueden especificar tipos de matriz que difieren seg&amp;uacute;n la presencia o ausencia de un l&amp;iacute;mite de matriz principal (8.3.4).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0e4678381c395fca109fb1a7ab2963eb52ccdf85" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;⋮</source>
          <target state="translated">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;⋮</target>
        </trans-unit>
        <trans-unit id="eaace149c48e3954770834bb04a3463bc80ecf38" translate="yes" xml:space="preserve">
          <source>(None of the above is specific to arrays. These rules apply equally well to other kinds of static objects.)</source>
          <target state="translated">(Nada de lo anterior es específico de los conjuntos.Estas reglas se aplican igualmente a otros tipos de objetos estáticos).</target>
        </trans-unit>
        <trans-unit id="9bf1213a32eac75ae4baa950dd194049601cf63c" translate="yes" xml:space="preserve">
          <source>(Note that the implicitly generated pointer has no name, so I wrote &lt;code&gt;x+0&lt;/code&gt; in order to identify it.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Tenga en cuenta que el puntero generado impl&amp;iacute;citamente no tiene nombre, por lo que escrib&amp;iacute; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x+0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para identificarlo).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="38adde0b67b061a1ec171d70e52bc519f4a9e0b7" translate="yes" xml:space="preserve">
          <source>(Note that variables at namespace scope are implicitly static. Adding the &lt;code&gt;static&lt;/code&gt; keyword to their definition has a &lt;a href=&quot;https://stackoverflow.com/questions/3891325/&quot;&gt;completely different, deprecated meaning&lt;/a&gt;.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Tenga en cuenta que las variables en el &amp;aacute;mbito del espacio de nombres son impl&amp;iacute;citamente est&amp;aacute;ticas. Agregar la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;palabra clave &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a su definici&amp;oacute;n tiene un &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3891325/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;significado completamente diferente y obsoleto&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="231510dccd89918e53895d32efe43a1984323116" translate="yes" xml:space="preserve">
          <source>(Note the trailing pair of parenthesis right before the semicolon.) Again, C++0x simplifies the rules and allows specifying initial values for anonymous arrays thanks to uniform initialization:</source>
          <target state="translated">(Obsérvese el par de paréntesis que va a continuación justo antes del punto y coma.)Una vez más,C++0x simplifica las reglas y permite especificar valores iniciales para matrices anónimas gracias a la inicialización uniforme:</target>
        </trans-unit>
        <trans-unit id="90aa3f8dd54d913a20bcd4352992625debef9147" translate="yes" xml:space="preserve">
          <source>1 elements.</source>
          <target state="translated">1 elementos.</target>
        </trans-unit>
        <trans-unit id="a651c751b5b91bd381394f65645d3e91f1f89c2d" translate="yes" xml:space="preserve">
          <source>5. Common pitfalls when using arrays.</source>
          <target state="translated">5.Los peligros más comunes cuando se utilizan matrices.</target>
        </trans-unit>
        <trans-unit id="19ec1826e2fdf1b52e478a2704cb8d0d8615d9bc" translate="yes" xml:space="preserve">
          <source>5.1 Pitfall: Trusting type-unsafe linking.</source>
          <target state="translated">5.1 Trampa:Confiar en la vinculación de tipo inseguro.</target>
        </trans-unit>
        <trans-unit id="1796594de79af31df71419271109d6b84d26c8a2" translate="yes" xml:space="preserve">
          <source>5.2 Pitfall: Doing premature optimization (&lt;code&gt;memset&lt;/code&gt; &amp;amp; friends).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;5.2 Peligro: Hacer una optimizaci&amp;oacute;n prematura ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;memset&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y amigos).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b0a0e496ecd16a8c73f36baed69bdc51bfc3031a" translate="yes" xml:space="preserve">
          <source>5.3 Pitfall: Using the C idiom to get number of elements.</source>
          <target state="translated">5.3 Trampa:Usar el modismo C para obtener el número de elementos.</target>
        </trans-unit>
        <trans-unit id="2479875ffe2b4aa5f8ac73d86a4c378dc2349229" translate="yes" xml:space="preserve">
          <source>5.4 C++11 &amp;amp; C++14 pitfall: Using a &lt;code&gt;constexpr&lt;/code&gt; array size function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;5.4 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; C ++ 11 y C ++ 14: Uso de una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funci&amp;oacute;n de tama&amp;ntilde;o de matriz &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;constexpr&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5390b67f62a37f1c341c198ae984410b96914b51" translate="yes" xml:space="preserve">
          <source>7 elements, calling display...</source>
          <target state="translated">7 elementos,pantalla de llamada...</target>
        </trans-unit>
        <trans-unit id="f9de6fbff782960fefcc3095a3bc24ddfce1b643" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;N_ITEMS&lt;/code&gt; is therefore invoked with a pointer.</source>
          <target state="translated">&lt;code&gt;N_ITEMS&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se invoca con un puntero.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74212934fe8368a399b0d98b0a4d9b7243ba5e1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int(*)[8]&lt;/code&gt; is a pointer to an array of 8 integers.</source>
          <target state="translated">&lt;code&gt;int(*)[8]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un puntero a una matriz de 8 enteros.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a32d2b9fd0ba41aa42e8651c7bf0b911729c9d10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int*[8]&lt;/code&gt; is an array of 8 pointers, each element of type &lt;code&gt;int*&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;int*[8]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una matriz de 8 punteros, cada elemento de tipo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="96eb00bc6e8065436e33e4a99e47570293b66488" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sizeof(*array)&lt;/code&gt; is equivalent to &lt;code&gt;sizeof(int)&lt;/code&gt;, which for a 32-bit executable is also 4.</source>
          <target state="translated">&lt;code&gt;sizeof(*array)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es equivalente a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof(int)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que para un ejecutable de 32 bits tambi&amp;eacute;n es 4.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f3903fae2b05023ec89b2d2cc770d69f2c57d737" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Not written yet&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A&amp;uacute;n no escrito&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e8586c6494c198dbc6f2f6317d094faf70f2ea3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[N3290 &amp;sect;3.5/10]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[N3290 &amp;sect;3.5 / 10]&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="620ae72342c6c376f4c4a1a08f78905e1878296d" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;
&lt;em&gt;(Note: This is meant to be an entry to &lt;a href=&quot;https://stackoverflow.com/questions/tagged/c++-faq&quot;&gt;Stack Overflow's C++ FAQ&lt;/a&gt;. If you want to critique the idea of providing an FAQ in this form, then &lt;a href=&quot;https://meta.stackexchange.com/questions/68647/setting-up-a-faq-for-the-c-tag&quot;&gt;the posting on meta that started all this&lt;/a&gt; would be the place to do that. Answers to that question are monitored in the &lt;a href=&quot;http://chat.stackoverflow.com/rooms/10/c-lounge&quot;&gt;C++ chatroom&lt;/a&gt;, where the FAQ idea started out in the first place, so your answer is very likely to get read by those who came up with the idea.)&lt;/em&gt;
&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;em&gt;(Nota: Esto est&amp;aacute; destinado a ser una entrada a &lt;a href=&quot;https://stackoverflow.com/questions/tagged/c++-faq&quot;&gt;las preguntas frecuentes de C ++ de Stack Overflow&lt;/a&gt; . Si desea criticar la idea de proporcionar una pregunta frecuente en este formulario, entonces &lt;a href=&quot;https://meta.stackexchange.com/questions/68647/setting-up-a-faq-for-the-c-tag&quot;&gt;la publicaci&amp;oacute;n en meta que comenz&amp;oacute; todo esto&lt;/a&gt; ser&amp;iacute;a el lugar para hacerlo. Respuestas a esa pregunta se monitorea en la &lt;a href=&quot;http://chat.stackoverflow.com/rooms/10/c-lounge&quot;&gt;sala de chat de C ++&lt;/a&gt; , donde la idea de preguntas frecuentes comenz&amp;oacute; en primer lugar, por lo que es muy probable que su respuesta sea le&amp;iacute;da por aquellos a quienes se les ocurri&amp;oacute; la idea).&lt;/em&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="a7380dfe067e661e6c28af642fc12e65ff35a367" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;conditional-expression&lt;/em&gt;&lt;code&gt;e&lt;/code&gt; is a &lt;em&gt;core constant expression&lt;/em&gt; unless the evaluation
  of &lt;code&gt;e&lt;/code&gt;, following the rules of the abstract machine (1.9), would evaluate one of the
  following expressions:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;expresi&amp;oacute;n condicional &lt;/font&gt;&lt;/font&gt;&lt;/em&gt; &lt;code&gt;e&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;expresi&amp;oacute;n constante central a&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; menos que la evaluaci&amp;oacute;n de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;e&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , siguiendo las reglas de la m&amp;aacute;quina abstracta (1.9), eval&amp;uacute;e una de las siguientes expresiones:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6ec1049f6c023e311e56e84c953aa4c9fe27c95a" translate="yes" xml:space="preserve">
          <source>A violation of this rule on type identity does not require a diagnostic.</source>
          <target state="translated">La violación de esta regla sobre la identidad de tipo no requiere un diagnóstico.</target>
        </trans-unit>
        <trans-unit id="0cd6ad0e54ee6246cea808ee63fd05eddfc872e5" translate="yes" xml:space="preserve">
          <source>About the choice of return type for &lt;code&gt;static_n_items&lt;/code&gt;: this code doesn't use &lt;code&gt;std::integral_constant&lt;/code&gt;
because with &lt;code&gt;std::integral_constant&lt;/code&gt; the result is represented
directly as a &lt;code&gt;constexpr&lt;/code&gt; value, reintroducing the original problem. Instead
of a &lt;code&gt;Size_carrier&lt;/code&gt; class one can let the function directly return a
reference to an array. However, not everybody is familiar with that syntax.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Acerca de la elecci&amp;oacute;n del tipo de retorno para &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_n_items&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : este c&amp;oacute;digo no usa &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::integral_constant&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; porque con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::integral_constant&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; el resultado se representa directamente como un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valor &lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , reintroduciendo el problema original. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En lugar de una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Size_carrier&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , se puede dejar que la funci&amp;oacute;n devuelva directamente una referencia a una matriz. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, no todos est&amp;aacute;n familiarizados con esa sintaxis.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b959c28ecb4dde919a516a1c1b3188124c5c2f89" translate="yes" xml:space="preserve">
          <source>About the naming: part of this solution to the &lt;code&gt;constexpr&lt;/code&gt;-invalid-due-to-reference
problem is to make the choice of compile time constant explicit.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Acerca de la denominaci&amp;oacute;n: parte de esta soluci&amp;oacute;n al problema &lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -invalid-due-to-reference es hacer expl&amp;iacute;cita la elecci&amp;oacute;n del tiempo de compilaci&amp;oacute;n constante.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="26a01f7a3f29b95a2006e044a16488cdb32ba200" translate="yes" xml:space="preserve">
          <source>Accessing elements</source>
          <target state="translated">Acceder a los elementos</target>
        </trans-unit>
        <trans-unit id="8d39c2f6a75768a2092994233c9a0daa3c70b9d6" translate="yes" xml:space="preserve">
          <source>Also note that you could simply provide &lt;code&gt;x&lt;/code&gt; as the first argument. That is a little too terse for my taste, and it also makes template argument deduction a bit harder for the compiler, because in that case the first argument is an array but the second argument is a pointer. (Again, array-to-pointer decay kicks in.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n tenga en cuenta que simplemente podr&amp;iacute;a proporcionar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como primer argumento. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Eso es demasiado breve para mi gusto, y tambi&amp;eacute;n hace que la deducci&amp;oacute;n de argumentos de plantilla sea un poco m&amp;aacute;s dif&amp;iacute;cil para el compilador, porque en ese caso el primer argumento es una matriz pero el segundo argumento es un puntero. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Nuevamente, la descomposici&amp;oacute;n de matriz a puntero se activa).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="18999a9d2d7e1f9e2ca1c736ffbc5c4469b40a2e" translate="yes" xml:space="preserve">
          <source>Alternatively, the initial values can be explicitly specified in the &lt;em&gt;array initializer&lt;/em&gt;, a comma-separated list surrounded by curly brackets:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Alternativamente, los valores iniciales se pueden especificar expl&amp;iacute;citamente en el &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;inicializador de matriz&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , una lista separada por comas rodeada de llaves:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="13bd6a28072658c138cb224a1d27229ba67fa990" translate="yes" xml:space="preserve">
          <source>Alternatively, you can define an automatic array in the constructor body and copy the elements over:</source>
          <target state="translated">Alternativamente,puede definir un arreglo automático en el cuerpo del constructor y copiar los elementos:</target>
        </trans-unit>
        <trans-unit id="b08a5a490469c21ff382823b10dd32277b29eff4" translate="yes" xml:space="preserve">
          <source>Although you cannot assign arrays directly, you &lt;em&gt;can&lt;/em&gt; assign structs and classes which &lt;em&gt;contain&lt;/em&gt; array members. That is because &lt;a href=&quot;https://stackoverflow.com/questions/4164279/&quot;&gt;array members are copied memberwise&lt;/a&gt; by the assignment operator which is provided as a default by the compiler. If you define the assignment operator manually for your own struct or class types, you must fall back to manual copying for the array members.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aunque no puede asignar matrices directamente, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;puede&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; asignar estructuras y clases que &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;contienen&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; miembros de la matriz. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto se debe a que los &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4164279/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;miembros de la matriz son copiados&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; por el operador de asignaci&amp;oacute;n, que el compilador proporciona como predeterminado. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si define el operador de asignaci&amp;oacute;n manualmente para sus propios tipos de estructura o clase, debe recurrir a la copia manual para los miembros de la matriz.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="686c9976fce3ef9968836df6eec6c84549086e98" translate="yes" xml:space="preserve">
          <source>An array of type &lt;code&gt;T[n]&lt;/code&gt; has &lt;code&gt;n&lt;/code&gt; elements, indexed from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n-1&lt;/code&gt;; there is no element &lt;code&gt;n&lt;/code&gt;. And yet, to support half-open ranges (where the beginning is &lt;em&gt;inclusive&lt;/em&gt; and the end is &lt;em&gt;exclusive&lt;/em&gt;), C++ allows the computation of a pointer to the (non-existent) n-th element, but it is illegal to dereference that pointer:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una matriz de tipo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T[n]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene &lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; elementos, indexados de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;n-1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no hay elemento &lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y, sin embargo, para admitir rangos medio abiertos (donde el principio es &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;inclusivo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y el final es &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;exclusivo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), C ++ permite el c&amp;aacute;lculo de un puntero al elemento n-&amp;eacute;simo (inexistente), pero es ilegal desreferenciar ese puntero:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="42456e1dacb6621675d5ac2e2413c58c4322f39d" translate="yes" xml:space="preserve">
          <source>An array type is denoted as &lt;code&gt;T[n]&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is the &lt;em&gt;element type&lt;/em&gt; and &lt;code&gt;n&lt;/code&gt; is a positive &lt;em&gt;size&lt;/em&gt;, the number of elements in the array. The array type is a product type of the element type and the size. If one or both of those ingredients differ, you get a distinct type:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un tipo de matriz se denota como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T[n]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; donde &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es el &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipo de elemento&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un positivo &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tama&amp;ntilde;o&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , el n&amp;uacute;mero de elementos de la matriz. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El tipo de matriz es un tipo de producto del tipo de elemento y el tama&amp;ntilde;o. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si uno o ambos ingredientes difieren, obtienes un tipo distinto:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2e9e7db807e1364a1e5c48cc0f20413a61a41902" translate="yes" xml:space="preserve">
          <source>And here is how it looks like in memory:</source>
          <target state="translated">Y así es como se ve en la memoria:</target>
        </trans-unit>
        <trans-unit id="eac77d06b46f4d096b1aad128c8a1a33836938e7" translate="yes" xml:space="preserve">
          <source>Anonymous arrays of pointers</source>
          <target state="translated">Matrices anónimas de punteros</target>
        </trans-unit>
        <trans-unit id="647cdf988737cc9ccd2df7b3b704cfd1c6bb74a8" translate="yes" xml:space="preserve">
          <source>Anonymous multidimensional arrays</source>
          <target state="translated">Matrices multidimensionales anónimas</target>
        </trans-unit>
        <trans-unit id="1343cf5171221fe816c93d6f2a075c26f5b24b07" translate="yes" xml:space="preserve">
          <source>Array creation and initialization</source>
          <target state="translated">Creación e inicialización de la matriz</target>
        </trans-unit>
        <trans-unit id="399f9928701629470c3f9405ace42415e4409175" translate="yes" xml:space="preserve">
          <source>Array data members</source>
          <target state="translated">Los miembros de la matriz de datos</target>
        </trans-unit>
        <trans-unit id="24b8804b7e356d42cd7f09e1eb85af586ae43524" translate="yes" xml:space="preserve">
          <source>Array data members are created when their owning object is created. Unfortunately, C++03 provides no means to initialize arrays in the &lt;a href=&quot;https://stackoverflow.com/questions/1711990/&quot;&gt;member initializer list&lt;/a&gt;, so initialization must be faked with assignments:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los miembros de datos de matriz se crean cuando se crea su objeto propietario. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Desafortunadamente, C ++ 03 no proporciona medios para inicializar matrices en la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1711990/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;lista de inicializadores de miembros&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , por lo que la inicializaci&amp;oacute;n debe ser falsificada con asignaciones:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e8874168e3c1df960a01e93b0e01fe86fb6ae2dc" translate="yes" xml:space="preserve">
          <source>Array-to-pointer decay</source>
          <target state="translated">Decadencia de la matriz a la punta</target>
        </trans-unit>
        <trans-unit id="1ac5bd4e173a92bcb04c137f8efe28804ea718a6" translate="yes" xml:space="preserve">
          <source>Array-to-pointer decay naturally extends to arrays of arrays and arrays of pointers:</source>
          <target state="translated">El decaimiento de matriz a puntero se extiende naturalmente a las matrices de matrices y matrices de punteros:</target>
        </trans-unit>
        <trans-unit id="6e40493abcaecb122cbcf832dab790b8d29fdd9f" translate="yes" xml:space="preserve">
          <source>Arrays are not pointers</source>
          <target state="translated">Los arreglos no son punteros</target>
        </trans-unit>
        <trans-unit id="f7a03c30a551a2c39c3c9fc257600a5d16f43aaf" translate="yes" xml:space="preserve">
          <source>Arrays can also be passed by reference:</source>
          <target state="translated">Las matrices también se pueden pasar por referencia:</target>
        </trans-unit>
        <trans-unit id="2bf47475c7967f15061d931504841dd6198c3b0f" translate="yes" xml:space="preserve">
          <source>Arrays cannot be passed by value. You can either pass them by pointer or by reference.</source>
          <target state="translated">Las matrices no se pueden pasar por valor.Se pueden pasar por puntero o por referencia.</target>
        </trans-unit>
        <trans-unit id="0d3931969794470ea65ef6c4ed1f5814ad89e104" translate="yes" xml:space="preserve">
          <source>Arrays of pointers</source>
          <target state="translated">Matrices de punteros</target>
        </trans-unit>
        <trans-unit id="7b85b17ab780077809da01b26286144e5377b12f" translate="yes" xml:space="preserve">
          <source>Arrays on the type level</source>
          <target state="translated">Arreglos en el nivel de tipo</target>
        </trans-unit>
        <trans-unit id="9195cd8f84277c2a066f9b3969eb7b482e709897" translate="yes" xml:space="preserve">
          <source>As a syntactic alternative, you can also declare parameters as &lt;code&gt;T p[]&lt;/code&gt;, and it means the exact same thing as &lt;code&gt;T* p&lt;/code&gt;&lt;strong&gt;in the context of parameter lists only&lt;/strong&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como alternativa sint&amp;aacute;ctica, tambi&amp;eacute;n puede declarar par&amp;aacute;metros como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T p[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y significa exactamente lo mismo que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T* p&lt;/code&gt; &lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;en el contexto de las listas de par&amp;aacute;metros solamente&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7b591505e594b531518f3338ddc699030668ab81" translate="yes" xml:space="preserve">
          <source>As with any other kind of C++ object, arrays can be stored either directly in named variables (then the size must be a compile-time constant; &lt;a href=&quot;https://stackoverflow.com/questions/1887097/&quot;&gt;C++ does not support VLAs&lt;/a&gt;), or they can be stored anonymously on the heap and accessed indirectly via pointers (only then can the size be computed at runtime).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Al igual que con cualquier otro tipo de objeto C ++, las matrices se pueden almacenar directamente en variables con nombre (entonces el tama&amp;ntilde;o debe ser una constante de tiempo de compilaci&amp;oacute;n; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1887097/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ no admite VLA&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), o se pueden almacenar de forma an&amp;oacute;nima en el mont&amp;oacute;n y acceder indirectamente a trav&amp;eacute;s de punteros (solo entonces se puede calcular el tama&amp;ntilde;o en tiempo de ejecuci&amp;oacute;n).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba05dcd6a6016a8619c5531920406c9d627e7d45" translate="yes" xml:space="preserve">
          <source>Assertion failed: ( &quot;N_ITEMS requires an actual array as argument&quot;, typeid( a ) != typeid( &amp;amp;*a ) ), file runtime_detect
  ion.cpp, line 16</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Error de afirmaci&amp;oacute;n: (&quot;N_ITEMS requiere una matriz real como argumento&quot;, typeid (a)! = Typeid (&amp;amp; * a)), archivo runtime_detect ion.cpp, l&amp;iacute;nea 16&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e55df441e8955746182110c3946288f381520e83" translate="yes" xml:space="preserve">
          <source>Assignment</source>
          <target state="translated">Assignment</target>
        </trans-unit>
        <trans-unit id="40f5291aa65f0d251ce748666c38a331190c5ced" translate="yes" xml:space="preserve">
          <source>Automatic arrays</source>
          <target state="translated">Matrices automáticas</target>
        </trans-unit>
        <trans-unit id="e1d37e408deb2e78b4ca48daeb81d9bd4471d3ae" translate="yes" xml:space="preserve">
          <source>Automatic arrays (arrays living &quot;on the stack&quot;) are created each time the flow of control passes through the definition of a non-static local array variable:</source>
          <target state="translated">Las matrices automáticas (matrices que viven &quot;en la pila&quot;)se crean cada vez que el flujo de control pasa por la definición de una variable de matriz local no estática:</target>
        </trans-unit>
        <trans-unit id="f636bb95872b824ff74a6c4034eaba0370183449" translate="yes" xml:space="preserve">
          <source>But consider this code using the &lt;code&gt;constexpr&lt;/code&gt; version:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero considere este c&amp;oacute;digo usando la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;versi&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="de28acb7f2a0a27ea202dbc568fb44f90656e5d6" translate="yes" xml:space="preserve">
          <source>C++ inherited arrays from C where they are used virtually everywhere. C++ provides abstractions that are easier to use and less error-prone (&lt;code&gt;std::vector&amp;lt;T&amp;gt;&lt;/code&gt; since C++98 and &lt;a href=&quot;http://en.cppreference.com/w/cpp/container/array&quot;&gt;&lt;code&gt;std::array&amp;lt;T, n&amp;gt;&lt;/code&gt;&lt;/a&gt; since &lt;a href=&quot;https://en.wikipedia.org/wiki/C++11&quot;&gt;C++11&lt;/a&gt;), so the need for arrays does not arise quite as often as it does in C. However, when you read legacy code or interact with a library written in C, you should have a firm grasp on how arrays work.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ hered&amp;oacute; matrices de C donde se usan pr&amp;aacute;cticamente en todas partes. C ++ proporciona abstracciones que son m&amp;aacute;s f&amp;aacute;ciles de usar y menos propensas a errores ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::vector&amp;lt;T&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; desde C ++ 98 y &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp/container/array&quot;&gt; &lt;code&gt;std::array&amp;lt;T, n&amp;gt;&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; desde &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/C++11&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 11&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), por lo que la necesidad de matrices no surgen con tanta frecuencia como en C. Sin embargo, cuando lee c&amp;oacute;digo heredado o interact&amp;uacute;a con una biblioteca escrita en C, debe tener una idea clara de c&amp;oacute;mo funcionan las matrices.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="372b375c077d1592b504d6ea862fc8b660d07ce4" translate="yes" xml:space="preserve">
          <source>C++ provides two syntactic variations to access individual elements of an array.
Neither of them is superior to the other, and you should familiarize yourself with both.</source>
          <target state="translated">C++proporciona dos variaciones sintácticas para acceder a los elementos individuales de un conjunto.Ninguna de ellas es superior a la otra,y deberías familiarizarte con ambas.</target>
        </trans-unit>
        <trans-unit id="e9ee5228e62855edd689fcf1ee439ad1835186a8" translate="yes" xml:space="preserve">
          <source>C++11 C++14 $5.19/2 nine&lt;sup&gt;&lt;i&gt;th&lt;/i&gt;&lt;/sup&gt; dash</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 11 ++ 14 C $ 5.19 / 2 nueve &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;i&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;ordm;&lt;/font&gt;&lt;/font&gt;&lt;/i&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tablero&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="451cf0fb180276f6104c195abd9824bc51889070" translate="yes" xml:space="preserve">
          <source>Compiling this definition substituted into the first complete program, with g++,
I got &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Compilando esta definici&amp;oacute;n sustituida en el primer programa completo, con g ++, obtuve ...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="edd1068f47092445e2ade712a957ef28258872b7" translate="yes" xml:space="preserve">
          <source>Concerning default values for elements, anonymous arrays behave similar to automatic arrays.
Normally, anonymous POD arrays are not initialized, but there is a &lt;a href=&quot;https://stackoverflow.com/questions/620137/&quot;&gt;special syntax&lt;/a&gt; that triggers value-initialization:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con respecto a los valores predeterminados para los elementos, las matrices an&amp;oacute;nimas se comportan de manera similar a las matrices autom&amp;aacute;ticas. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Normalmente, las matrices an&amp;oacute;nimas de POD no se inicializan, pero hay una &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/620137/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sintaxis especial&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que desencadena la inicializaci&amp;oacute;n de valores:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b08eaadf77cfdba7944ddcaf69eee5a983b74af3" translate="yes" xml:space="preserve">
          <source>Conversions</source>
          <target state="translated">Conversions</target>
        </trans-unit>
        <trans-unit id="e8e9bf39de7b205510d34a98df2a540f29880a3d" translate="yes" xml:space="preserve">
          <source>Due to the fact that addition is commutative, the following code does exactly the same:</source>
          <target state="translated">Debido al hecho de que la adición es conmutativa,el siguiente código hace exactamente lo mismo:</target>
        </trans-unit>
        <trans-unit id="7d44854713dee942aa855be9529ca9049d1f51a4" translate="yes" xml:space="preserve">
          <source>Dynamic arrays</source>
          <target state="translated">Matrices dinámicas</target>
        </trans-unit>
        <trans-unit id="fa79fb6c19ebe9065a4f0b664015743660924a69" translate="yes" xml:space="preserve">
          <source>Dynamic arrays have no names, hence the only means of accessing them is via pointers. Because they have no names, I will refer to them as &quot;anonymous arrays&quot; from now on.</source>
          <target state="translated">Las matrices dinámicas no tienen nombres,por lo que la única forma de acceder a ellas es a través de punteros.Debido a que no tienen nombres,me referiré a ellos como &quot;matrices anónimas&quot; de ahora en adelante.</target>
        </trans-unit>
        <trans-unit id="1ad437396251bede18ff480da4a2fb5768a40959" translate="yes" xml:space="preserve">
          <source>For a 32-bit executable &lt;code&gt;sizeof(array)&lt;/code&gt; (size of a pointer) is then 4.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para un ejecutable de 32 bits, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof(array)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (tama&amp;ntilde;o de un puntero) es entonces 4.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ccf9fc11e30342ada49e22699adfb1eee920ea13" translate="yes" xml:space="preserve">
          <source>For example, if you want to sort an array, both of the following would work equally well:</source>
          <target state="translated">Por ejemplo,si quieres clasificar un conjunto,los dos siguientes funcionarán igual de bien:</target>
        </trans-unit>
        <trans-unit id="df57dc8940ddba3bf21d9400ea8d2ff132094b4b" translate="yes" xml:space="preserve">
          <source>For example, in contrast to the C++03 function, such a compile time constant
can be used to declare an array of the same size as another:</source>
          <target state="translated">Por ejemplo,a diferencia de la función C++03,esta constante de tiempo de compilación puede utilizarse para declarar una matriz del mismo tamaño que otra:</target>
        </trans-unit>
        <trans-unit id="c60990da60348b38b26e24567aa5449142642c6b" translate="yes" xml:space="preserve">
          <source>For no particular reason, arrays cannot be assigned to one another. Use &lt;code&gt;std::copy&lt;/code&gt; instead:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin ninguna raz&amp;oacute;n en particular, las matrices no pueden asignarse entre s&amp;iacute;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Utilice &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::copy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; lugar:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c72639e3e48ee10535ffefafd0e659f4a2e46be9" translate="yes" xml:space="preserve">
          <source>Given a pointer &lt;code&gt;p&lt;/code&gt; to the first element of an array, the expression &lt;code&gt;p+i&lt;/code&gt; yields a pointer to the i-th element of the array. By dereferencing that pointer afterwards, one can access individual elements:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dado un puntero &lt;/font&gt;&lt;/font&gt; &lt;code&gt;p&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; al primer elemento de una matriz, la expresi&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;p+i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; produce un puntero al elemento i-&amp;eacute;simo de la matriz. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Al hacer referencia a ese puntero posteriormente, se puede acceder a elementos individuales:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="55b8034a1c4de8546af371fad141ee844edc1ceb" translate="yes" xml:space="preserve">
          <source>Here is a named array of five pointers which are initialized with anonymous arrays of different lengths:</source>
          <target state="translated">Aquí hay un conjunto nombrado de cinco punteros que se inicializan con conjuntos anónimos de diferentes longitudes:</target>
        </trans-unit>
        <trans-unit id="c076f328745f37debceee5f1f2ed902d4a78f344" translate="yes" xml:space="preserve">
          <source>Here is an anonymous array of 5 (or any other number of) pointers which are initialized with anonymous arrays of different lengths:</source>
          <target state="translated">He aquí una matriz anónima de 5 (o cualquier otro número de)punteros que se inicializan con matrices anónimas de diferentes longitudes:</target>
        </trans-unit>
        <trans-unit id="23dac17f7c85db33e32efee228cc1206d13ce8f2" translate="yes" xml:space="preserve">
          <source>Here is how static arrays behave differently from automatic arrays:</source>
          <target state="translated">Así es como los arreglos estáticos se comportan de manera diferente a los arreglos automáticos:</target>
        </trans-unit>
        <trans-unit id="29b93b685e9f34727b707a03a54e84c221d810d0" translate="yes" xml:space="preserve">
          <source>Hopefully the oops-there-was-a-reference-involved-in-your-&lt;code&gt;constexpr&lt;/code&gt; issue will be fixed with
C++17, but until then a macro like the &lt;code&gt;STATIC_N_ITEMS&lt;/code&gt; above yields portability,
e.g. to the clang and Visual C++ compilers, retaining type safety.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esperemos que el problema oops-there-was-a-reference-implica-in- &lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;constexpr&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se solucione con C ++ 17, pero hasta entonces una macro como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;STATIC_N_ITEMS&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; anterior proporciona portabilidad, por ejemplo, a los compiladores clang y Visual C ++, retencion tipo seguridad.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="12890f5a4d79b3a152da01cd5f87ddd2cfb5f4eb" translate="yes" xml:space="preserve">
          <source>How do I use arrays in C++</source>
          <target state="translated">¿Cómo utilizo las matrices en C++</target>
        </trans-unit>
        <trans-unit id="de3060ce19f3a3bb1c4391b3ddd3d0001e575313" translate="yes" xml:space="preserve">
          <source>How it works: the array is passed &lt;em&gt;by reference&lt;/em&gt; to &lt;code&gt;n_items&lt;/code&gt;, and so it does
not decay to pointer to first element, and the function can just return the
number of elements specified by the type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C&amp;oacute;mo funciona: la matriz se pasa &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;por referencia&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;n_items&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , por lo que no decae al puntero al primer elemento, y la funci&amp;oacute;n solo puede devolver el n&amp;uacute;mero de elementos especificados por el tipo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71ce2f00f67820d9da8ad53a668481248e234bc0" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;&amp;amp;x[0]&lt;/code&gt; is generally &lt;em&gt;not&lt;/em&gt; equivalent to &lt;code&gt;x&lt;/code&gt;. The former is a pointer, the latter an array. Only when the context triggers array-to-pointer decay can &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;&amp;amp;x[0]&lt;/code&gt; be used interchangeably. For example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;x[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; generalmente &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no es&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; equivalente a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El primero es un puntero, el &amp;uacute;ltimo una matriz. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;S&amp;oacute;lo cuando la caries los factores desencadenantes de contexto array-a-puntero puede &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;x[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; usarse de forma intercambiable. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="50831c9c02e63682913c1ef6afbaea938a24ca91" translate="yes" xml:space="preserve">
          <source>However, there is no implicit conversion from &lt;code&gt;T[h][w]&lt;/code&gt; to &lt;code&gt;T**&lt;/code&gt;. If such an implicit conversion did exist, the result would be a pointer to the first element of an array of &lt;code&gt;h&lt;/code&gt; pointers to &lt;code&gt;T&lt;/code&gt; (each pointing to the first element of a line in the original 2D array), but that pointer array does not exist anywhere in memory yet. If you want such a conversion, you must create and fill the required pointer array manually:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, no hay conversi&amp;oacute;n impl&amp;iacute;cita de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T[h][w]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T**&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si existiera tal conversi&amp;oacute;n impl&amp;iacute;cita, el resultado ser&amp;iacute;a un puntero al primer elemento de una matriz de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;punteros &lt;/font&gt;&lt;/font&gt; &lt;code&gt;h&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (cada uno apuntando al primer elemento de una l&amp;iacute;nea en la matriz 2D original), pero esa matriz de puntero no existe en cualquier lugar de la memoria todav&amp;iacute;a. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si desea dicha conversi&amp;oacute;n, debe crear y completar la matriz de punteros requerida manualmente:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6325f458cb378a4b64ec12cd194cb25703a0a7a1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;T&lt;/code&gt; is a &lt;a href=&quot;https://stackoverflow.com/questions/146589/&quot;&gt;POD&lt;/a&gt; (like &lt;code&gt;int&lt;/code&gt; in the above example), no initialization takes place.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/146589/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;POD&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en el ejemplo anterior), no se lleva a cabo la inicializaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="16e6c04649f4d9ae6d831611c9b9eff3d05641fc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;T&lt;/code&gt; provides no accessible default-constructor, the program does not compile.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no proporciona un constructor predeterminado accesible, el programa no se compila.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eb41e3d981a1357a114e1a3e78f40d975727427d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;x&lt;/code&gt; denotes an &lt;em&gt;array&lt;/em&gt;, then array-to-pointer decay will kick in, because adding an array and an integer is meaningless (there is no plus operation on arrays), but adding a pointer and an integer makes sense:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; denota una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;matriz&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , entonces la descomposici&amp;oacute;n de matriz a puntero se activar&amp;aacute;, porque agregar una matriz y un entero no tiene sentido (no hay operaci&amp;oacute;n m&amp;aacute;s en las matrices), pero tiene sentido agregar un puntero y un entero:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d91f0db788d31e3ba270714f7e149455d1be1520" translate="yes" xml:space="preserve">
          <source>If you are done using an anonymous array, you have to release it back to the system:</source>
          <target state="translated">Si terminas de usar una matriz anónima,tienes que liberarla de nuevo al sistema:</target>
        </trans-unit>
        <trans-unit id="e9be23246f4db6859f24f143fdfa68db6666d4e3" translate="yes" xml:space="preserve">
          <source>If you are unfamiliar with the C declarator syntax, the parenthesis in the type &lt;code&gt;int(*)[8]&lt;/code&gt; are essential:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si no est&amp;aacute; familiarizado con la sintaxis del declarador de C, los par&amp;eacute;ntesis en el tipo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int(*)[8]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son esenciales:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="14c24b9c0b2d0257aaceb7cde0555b7a4f3c1769" translate="yes" xml:space="preserve">
          <source>If you feel something important is missing in this FAQ, write an answer and link it here as an additional part.</source>
          <target state="translated">Si cree que falta algo importante en esta FAQ,escriba una respuesta y enséñela aquí como una parte adicional.</target>
        </trans-unit>
        <trans-unit id="d5bcb303a25ffde92cc0974fd617bffe13104ab4" translate="yes" xml:space="preserve">
          <source>If, on the other hand, &lt;code&gt;x&lt;/code&gt; denotes a &lt;em&gt;pointer&lt;/em&gt; to the first (or any other) element of an array, then array-to-pointer decay is not necessary, because the pointer on which &lt;code&gt;i&lt;/code&gt; is going to be added already exists:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si, por el otro lado, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; denota un &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;puntero&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a la primera (o cualquier otro) elemento de una matriz, entonces array-a-puntero decaimiento no es necesario, porque el puntero en la que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; existe va a ser a&amp;ntilde;adido ya:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1ec50dff9162ea0c55c63f2ee2fedc58220b5d3c" translate="yes" xml:space="preserve">
          <source>In C++0x, arrays &lt;em&gt;can&lt;/em&gt; be initialized in the member initializer list thanks to &lt;a href=&quot;http://www.youtube.com/watch?v=uEqknlxXJfg&quot;&gt;uniform initialization&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En C ++ 0x, las matrices &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; pueden inicializar en la lista de inicializadores de miembros gracias a &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=uEqknlxXJfg&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la inicializaci&amp;oacute;n uniforme&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2c1bdd707612ae097771a2db46f18f20e841ba75" translate="yes" xml:space="preserve">
          <source>In C, anonymous arrays are created via &lt;code&gt;malloc&lt;/code&gt; and friends. In C++, anonymous arrays are created using the &lt;code&gt;new T[size]&lt;/code&gt; syntax which returns a pointer to the first element of an anonymous array:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En C, se crean matrices an&amp;oacute;nimas a trav&amp;eacute;s de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;malloc&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y amigos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En C ++, las matrices an&amp;oacute;nimas se crean utilizando la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new T[size]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sintaxis &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;T [tama&amp;ntilde;o]&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que devuelve un puntero al primer elemento de una matriz an&amp;oacute;nima:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="41b1d1fe662d24559c66cf35d58d5d091bc62661" translate="yes" xml:space="preserve">
          <source>In Windows 7 this compiles and links fine with both MinGW g++ 4.4.1 and
Visual C++ 10.0.</source>
          <target state="translated">En Windows 7 esto compila y enlaza bien tanto con MinGW g++4.4.1 como con Visual C++10.0.</target>
        </trans-unit>
        <trans-unit id="437c03d1c28955b95b16ec11169a5605bc02a59a" translate="yes" xml:space="preserve">
          <source>In order to detect this error at run time you can do &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para detectar este error en tiempo de ejecuci&amp;oacute;n, puede hacer ...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="26eee36cf964126ee4dcb59852fa30dc17bf56fe" translate="yes" xml:space="preserve">
          <source>In that case, the remaining elements are &lt;a href=&quot;https://stackoverflow.com/questions/1613383/&quot;&gt;zero-initialized&lt;/a&gt;. Note that C++ allows an empty array initializer (all elements are zero-initialized), whereas C89 does not (at least one value is required). Also note that array initializers can only be used to &lt;em&gt;initialize&lt;/em&gt; arrays; they cannot later be used in assignments.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En ese caso, los elementos restantes est&amp;aacute;n &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1613383/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;inicializados en cero&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que C ++ permite un inicializador de matriz vac&amp;iacute;o (todos los elementos est&amp;aacute;n inicializados en cero), mientras que C89 no (se requiere al menos un valor). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n tenga en cuenta que los inicializadores de matriz solo se pueden usar para &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;inicializar&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; matrices; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;luego no pueden usarse en tareas.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d28f9a6d6ed85ab85596615272616028e68b524" translate="yes" xml:space="preserve">
          <source>In the following text, &quot;array&quot; means &quot;C array&quot;, not the class template &lt;code&gt;std::array&lt;/code&gt;. Basic knowledge of the C declarator syntax is assumed. Note that the manual usage of &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; as demonstrated below is extremely dangerous in the face of exceptions, but that is the topic of &lt;a href=&quot;https://stackoverflow.com/questions/712639/&quot;&gt;another FAQ&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En el siguiente texto, &quot;matriz&quot; significa &quot;matriz C&quot;, no la plantilla de clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Se asume el conocimiento b&amp;aacute;sico de la sintaxis del declarante C. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que el uso manual de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;delete&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como se muestra a continuaci&amp;oacute;n es extremadamente peligroso ante las excepciones, pero ese es el tema de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/712639/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;otras preguntas frecuentes&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a5dcb9a46d4b13c3f0a33e51d890dc93adbc865" translate="yes" xml:space="preserve">
          <source>In this case, the array size is significant. Since writing a function that only accepts arrays of exactly 8 elements is of little use, programmers usually write such functions as templates:</source>
          <target state="translated">En este caso,el tamaño de la matriz es significativo.Dado que escribir una función que sólo acepta matrices de exactamente 8 elementos es de poca utilidad,los programadores suelen escribir tales funciones como plantillas:</target>
        </trans-unit>
        <trans-unit id="890a35e657b26ee90956dc55f869c0acaf541ebb" translate="yes" xml:space="preserve">
          <source>In-practice explanation: in &lt;code&gt;main.cpp&lt;/code&gt; the array is treated as a pointer, placed
at the same address as the array. For 32-bit executable this means that the first
&lt;code&gt;int&lt;/code&gt; value in the array, is treated as a pointer. I.e., in &lt;code&gt;main.cpp&lt;/code&gt; the
&lt;code&gt;numbers&lt;/code&gt; variable contains, or appears to contain, &lt;code&gt;(int*)1&lt;/code&gt;. This causes the
program to access memory down at very bottom of the address space, which is
conventionally reserved and trap-causing. Result: you get a crash.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Explicaci&amp;oacute;n en la pr&amp;aacute;ctica: en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main.cpp&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; la matriz se trata como un puntero, ubicado en la misma direcci&amp;oacute;n que la matriz. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para el ejecutable de 32 bits, esto significa que el primer &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valor &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de la matriz se trata como un puntero. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es decir, en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main.cpp&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;variable de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;numbers&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; contiene, o parece contener, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(int*)1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto hace que el programa acceda a la memoria en la parte inferior del espacio de direcciones, que est&amp;aacute; convencionalmente reservado y causa trampa. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Resultado: tienes un accidente.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="070fe92341683cf9d092141bd709fad70875176e" translate="yes" xml:space="preserve">
          <source>In-the-formal explanation: the program has Undefined Behavior (UB), and instead
of crashing it can therefore just hang, or perhaps do nothing, or it
can send threating e-mails to the presidents of the USA, Russia, India,
China and Switzerland, and make Nasal Daemons fly out of your nose.</source>
          <target state="translated">Explicación formal:el programa tiene un comportamiento indefinido (UB),y en lugar de estrellarse puede por lo tanto simplemente colgarse,o quizás no hacer nada,o puede enviar correos electrónicos amenazadores a los presidentes de los EE.UU.,Rusia,India,China y Suiza,y hacer que los demonios nasales salgan volando de tu nariz.</target>
        </trans-unit>
        <trans-unit id="c97bad7c68964c91e199c52d4f2f4a2d7be3c3fe" translate="yes" xml:space="preserve">
          <source>Indexing operator</source>
          <target state="translated">Operador de indexación</target>
        </trans-unit>
        <trans-unit id="608d106aeaf49a5d6d2d18e72fbb2975527e39df" translate="yes" xml:space="preserve">
          <source>Initialization is performed in ascending order. Note that the initial values depend on the element type &lt;code&gt;T&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La inicializaci&amp;oacute;n se realiza en orden ascendente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que los valores iniciales dependen del tipo de elemento &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7a1ce46f618ab33d9bc54dcc4675dfdfc40bbc7b" translate="yes" xml:space="preserve">
          <source>It is also possible to specify the size and provide a shorter array initializer:</source>
          <target state="translated">También es posible especificar el tamaño y proporcionar un inicializador de matriz más corto:</target>
        </trans-unit>
        <trans-unit id="3d2fd5d37362f6b75096f1913050f5033ca3aaba" translate="yes" xml:space="preserve">
          <source>M:\count&amp;gt; _</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;M: \ cuenta&amp;gt; _&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cdd64d56a86a26a498d6bbef6d3c1868cc754771" translate="yes" xml:space="preserve">
          <source>M:\count&amp;gt; g++ compile_time_detection.cpp</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;M: \ count&amp;gt; g ++ compile_time_detection.cpp&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bf9d1f82d43843cd09374cb46c7a3dcbd8fbc7d5" translate="yes" xml:space="preserve">
          <source>Main pitfall: the C idiom is not typesafe. For example, the code
&amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Principal escollo: el idioma C no es seguro. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, el c&amp;oacute;digo ...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ef5472faf1452242241b190fbf2f97ecd84ba6ea" translate="yes" xml:space="preserve">
          <source>Most programmers are familiar with named multidimensional arrays, but many are unaware of the fact that multidimensional array can also be created anonymously. Multidimensional arrays are often referred to as &quot;arrays of arrays&quot; or &quot;&lt;em&gt;true&lt;/em&gt; multidimensional arrays&quot;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La mayor&amp;iacute;a de los programadores est&amp;aacute;n familiarizados con las matrices multidimensionales con nombre, pero muchos desconocen el hecho de que la matriz multidimensional tambi&amp;eacute;n se puede crear de forma an&amp;oacute;nima. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las matrices multidimensionales a menudo se denominan &quot;matrices de matrices&quot; o &quot; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;matrices multidimensionales &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;verdaderas&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="00762e90f2d0e1fc656e0809cb403c7716fbb355" translate="yes" xml:space="preserve">
          <source>Multidimensional arrays</source>
          <target state="translated">Matrices multidimensionales</target>
        </trans-unit>
        <trans-unit id="ad847916fde2cd7cb8d9547c74c3fccb05986bb9" translate="yes" xml:space="preserve">
          <source>Named arrays of pointers</source>
          <target state="translated">Nombró conjuntos de punteros</target>
        </trans-unit>
        <trans-unit id="5d38b7a1ca47e08bdd5d13e7b55118d97017de16" translate="yes" xml:space="preserve">
          <source>Named multidimensional arrays</source>
          <target state="translated">Nombrado arreglos multidimensionales</target>
        </trans-unit>
        <trans-unit id="eee6419b689f5d4600b5eb44117945feff22b904" translate="yes" xml:space="preserve">
          <source>Note how the pointer to the first element only points to a single integer (depicted as a small box), whereas the pointer to the entire array points to an array of 8 integers (depicted as a large box).</source>
          <target state="translated">Obsérvese que el puntero del primer elemento sólo apunta a un único número entero (representado como una pequeña caja),mientras que el puntero de toda la matriz apunta a una matriz de 8 números enteros (representada como una gran caja).</target>
        </trans-unit>
        <trans-unit id="23ba020b1bef6697ee28252a1170fead955b8b56" translate="yes" xml:space="preserve">
          <source>Note that 2D grids such as the above are merely helpful visualizations. From the point of view of C++, memory is a &quot;flat&quot; sequence of bytes. The elements of a multidimensional array are stored in row-major order. That is, &lt;code&gt;connect_four[0][6]&lt;/code&gt; and &lt;code&gt;connect_four[1][0]&lt;/code&gt; are neighbors in memory. In fact, &lt;code&gt;connect_four[0][7]&lt;/code&gt; and &lt;code&gt;connect_four[1][0]&lt;/code&gt; denote the same element! This means that you can take multi-dimensional arrays and treat them as large, one-dimensional arrays:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que las cuadr&amp;iacute;culas 2D como las anteriores son meramente visualizaciones &amp;uacute;tiles. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Desde el punto de vista de C ++, la memoria es una secuencia &quot;plana&quot; de bytes. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los elementos de una matriz multidimensional se almacenan en orden de fila mayor. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es decir, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;connect_four[0][6]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;connect_four[1][0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son vecinos en la memoria. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De hecho, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;connect_four[0][7]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;connect_four[1][0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; denotan el mismo elemento. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto significa que puede tomar matrices multidimensionales y tratarlas como matrices unidimensionales grandes:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7186b877025b5d08bccafccf8a0b9683541aa2f2" translate="yes" xml:space="preserve">
          <source>Note that in the depicted case, &lt;code&gt;x&lt;/code&gt; is a pointer &lt;em&gt;variable&lt;/em&gt; (discernible by the small box next to &lt;code&gt;x&lt;/code&gt;), but it could just as well be the result of a function returning a pointer (or any other expression of type &lt;code&gt;T*&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que en el caso representado, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;variable de&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; puntero &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(discernible por el peque&amp;ntilde;o cuadro al lado de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), pero podr&amp;iacute;a ser el resultado de una funci&amp;oacute;n que devuelve un puntero (o cualquier otra expresi&amp;oacute;n de tipo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5e01e8bdf0e314ca975d17798f6f9fac1c741d43" translate="yes" xml:space="preserve">
          <source>Note that it is illegal to provide &lt;code&gt;&amp;amp;x[n]&lt;/code&gt; as the second argument since this is equivalent to &lt;code&gt;&amp;amp;*(x+n)&lt;/code&gt;, and the sub-expression &lt;code&gt;*(x+n)&lt;/code&gt; technically invokes &lt;a href=&quot;https://stackoverflow.com/questions/3144904/&quot;&gt;undefined behavior&lt;/a&gt; in C++ (but not in C99).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que es ilegal proporcionar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;x[n]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como segundo argumento, ya que es equivalente a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;*(x+n)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y la sub-expresi&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(x+n)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; t&amp;eacute;cnicamente invoca &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3144904/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;un comportamiento indefinido&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en C ++ (pero no en C99 )&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4a783e015ec501739631e705c9f21aff6b055fac" translate="yes" xml:space="preserve">
          <source>Note that the array itself is still allocated as a single block in memory.</source>
          <target state="translated">Observe que la matriz en sí misma sigue estando asignada como un bloque único en la memoria.</target>
        </trans-unit>
        <trans-unit id="554d5b1a6dcb70e7921afec83e4b4971c2df9586" translate="yes" xml:space="preserve">
          <source>Note that the size is part of the type, that is, array types of different size are incompatible types that have absolutely nothing to do with each other. &lt;code&gt;sizeof(T[n])&lt;/code&gt; is equivalent to &lt;code&gt;n * sizeof(T)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que el tama&amp;ntilde;o es parte del tipo, es decir, los tipos de matriz de diferente tama&amp;ntilde;o son tipos incompatibles que no tienen absolutamente nada que ver entre s&amp;iacute;. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof(T[n])&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es equivalente a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;n * sizeof(T)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d4de64b4a294e1e1f832bbe75edd6afa90d315d2" translate="yes" xml:space="preserve">
          <source>Note that there is &lt;em&gt;no&lt;/em&gt; array-to-pointer decay going on here. Although evaluating &lt;code&gt;new int[size]&lt;/code&gt; does in fact create an &lt;em&gt;array&lt;/em&gt; of integers, the result of the expression &lt;code&gt;new int[size]&lt;/code&gt; is &lt;em&gt;already&lt;/em&gt; a pointer to a single integer (the first element), &lt;em&gt;not&lt;/em&gt; an array of integers or a pointer to an array of integers of unknown size. That would be impossible, because the static type system requires array sizes to be compile-time constants. (Hence, I did not annotate the anonymous array with static type information in the picture.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que no &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;hay&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; una descomposici&amp;oacute;n de matriz a puntero aqu&amp;iacute;. Aunque evaluar un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new int[size]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de hecho crea una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;matriz&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de enteros, el resultado de la expresi&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new int[size]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ya&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;un puntero a un &amp;uacute;nico entero (el primer elemento), &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; una matriz de enteros o un puntero a un Matriz de enteros de tama&amp;ntilde;o desconocido. Eso ser&amp;iacute;a imposible, porque el sistema de tipo est&amp;aacute;tico requiere que los tama&amp;ntilde;os de matriz sean constantes de tiempo de compilaci&amp;oacute;n. (Por lo tanto, no anot&amp;eacute; la matriz an&amp;oacute;nima con informaci&amp;oacute;n de tipo est&amp;aacute;tico en la imagen).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa3802c18f9d7df661ece56023d81fd4a5c43ad8" translate="yes" xml:space="preserve">
          <source>Note that this generates a view of the original multidimensional array. If you need a copy instead, you must create extra arrays and copy the data yourself:</source>
          <target state="translated">Obsérvese que esto genera una vista de la matriz multidimensional original.Si necesitas una copia en su lugar,debes crear matrices adicionales y copiar los datos tú mismo:</target>
        </trans-unit>
        <trans-unit id="731accb3850c583ab5dab43550cbdd5a71aa446b" translate="yes" xml:space="preserve">
          <source>Note that you can only call such a function template with an actual array of integers, not with a pointer to an integer. The size of the array is automatically inferred, and for every size &lt;code&gt;n&lt;/code&gt;, a different function is instantiated from the template. You can also write &lt;a href=&quot;https://stackoverflow.com/questions/4759078/&quot;&gt;quite useful&lt;/a&gt; function templates that abstract from both the element type and from the size.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que solo puede llamar a dicha plantilla de funci&amp;oacute;n con una matriz real de enteros, no con un puntero a un entero. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El tama&amp;ntilde;o de la matriz se infiere autom&amp;aacute;ticamente, y para cada tama&amp;ntilde;o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , se instancia una funci&amp;oacute;n diferente de la plantilla. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n puede escribir &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;plantillas de funciones &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4759078/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;bastante &amp;uacute;tiles&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que se resumen tanto del tipo de elemento como del tama&amp;ntilde;o.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="85d63e980e7422c247f8647e79d77a52c6d97e7f" translate="yes" xml:space="preserve">
          <source>OK, you&amp;rsquo;ve been told, or have found out yourself, that globals (namespace
scope variables that can be accessed outside the translation unit) are
Evil&amp;trade;. But did you know how truly Evil&amp;trade; they are? Consider the
program below, consisting of two files [main.cpp] and [numbers.cpp]:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Bien, le han dicho, o se ha enterado usted mismo, que los globales (variables de alcance del espacio de nombres a las que se puede acceder fuera de la unidad de traducci&amp;oacute;n) son Evil &amp;trade;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Pero sab&amp;iacute;as cu&amp;aacute;n verdaderamente Evil &amp;trade; son? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Considere el siguiente programa, que consta de dos archivos [main.cpp] y [numbers.cpp]:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="53bde04906550009556f993b7806f8d76b8c6d5f" translate="yes" xml:space="preserve">
          <source>Obviously, anonymous arrays require more memory than named arrays due to the extra pointer that must be stored separately. (There is also some additional overhead on the free store.)</source>
          <target state="translated">Obviamente,las matrices anónimas requieren más memoria que las matrices con nombre debido al puntero extra que debe ser almacenado por separado.(También hay algunos gastos adicionales en el almacén gratuito.)</target>
        </trans-unit>
        <trans-unit id="63fb417f29bfd9f2405ad6c79a04190fdd2d712c" translate="yes" xml:space="preserve">
          <source>On the first line, the compiler detects an assignment from a pointer to a pointer, which trivially succeeds. On the second line, it detects an assignment from an &lt;em&gt;array&lt;/em&gt; to a pointer. Since this is meaningless (but &lt;em&gt;pointer&lt;/em&gt; to pointer assignment makes sense), array-to-pointer decay kicks in as usual.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En la primera l&amp;iacute;nea, el compilador detecta una asignaci&amp;oacute;n de un puntero a un puntero, que tiene &amp;eacute;xito trivialmente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En la segunda l&amp;iacute;nea, detecta una asignaci&amp;oacute;n de una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;matriz&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a un puntero. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como esto no tiene sentido (pero la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;asignaci&amp;oacute;n de &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;puntero&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a puntero tiene sentido), la descomposici&amp;oacute;n de matriz a puntero se activa como de costumbre.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3b30f736895ab3c14d15df82c8709f3aa1fb3ea" translate="yes" xml:space="preserve">
          <source>One can always write the more verbose</source>
          <target state="translated">Siempre se puede escribir lo más verborreico</target>
        </trans-unit>
        <trans-unit id="c4685ee8261138ace07d8fb78c91b3a94b27dd88" translate="yes" xml:space="preserve">
          <source>One important context in which an array does &lt;em&gt;not&lt;/em&gt; decay into a pointer to its first element is when the &lt;code&gt;&amp;amp;&lt;/code&gt; operator is applied to it. In that case, the &lt;code&gt;&amp;amp;&lt;/code&gt; operator yields a pointer to the &lt;em&gt;entire&lt;/em&gt; array, not just a pointer to its first element. Although in that case the &lt;em&gt;values&lt;/em&gt; (the addresses) are the same, a pointer to the first element of an array and a pointer to the entire array are completely distinct types:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un contexto importante en el que una matriz no &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; desintegra en un puntero a su primer elemento es cuando &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se le aplica el operador &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En ese caso, el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;operador &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; genera un puntero a &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;toda la&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; matriz, no solo un puntero a su primer elemento. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aunque en ese caso los &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valores&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (las direcciones) son los mismos, un puntero al primer elemento de una matriz y un puntero a toda la matriz son tipos completamente distintos:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="41e3330ec09c505432c9bd89998da5f0ce62c087" translate="yes" xml:space="preserve">
          <source>Otherwise, the default-constructor of &lt;code&gt;T&lt;/code&gt; initializes all the elements.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De lo contrario, el constructor predeterminado de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; inicializa todos los elementos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e1dd1f36b3d11a080ec32ab7967d3c72b1acb694" translate="yes" xml:space="preserve">
          <source>Parameter passing</source>
          <target state="translated">Paso de parámetros</target>
        </trans-unit>
        <trans-unit id="dd57df0504585da5013127cd2c481cb9a4d98a15" translate="yes" xml:space="preserve">
          <source>Pass by pointer</source>
          <target state="translated">Pasar por el puntero</target>
        </trans-unit>
        <trans-unit id="a428f2745394276b3ef22fe8ce93840f03d517fe" translate="yes" xml:space="preserve">
          <source>Pass by reference</source>
          <target state="translated">Pasar por referencia</target>
        </trans-unit>
        <trans-unit id="c5015408faa4e590c7a33664c84fb50fb239cff6" translate="yes" xml:space="preserve">
          <source>Please contact the application's support team for more information.</source>
          <target state="translated">Por favor,póngase en contacto con el equipo de apoyo de la aplicación para obtener más información.</target>
        </trans-unit>
        <trans-unit id="886d0e716745d04046260e2fd4e01fbcdb9fbe82" translate="yes" xml:space="preserve">
          <source>Pointer arithmetic</source>
          <target state="translated">Aritmética de puntero</target>
        </trans-unit>
        <trans-unit id="27319e98c440e9f7e0dae34adba8c3b67a414d93" translate="yes" xml:space="preserve">
          <source>Programmers often confuse multidimensional arrays with arrays of pointers.</source>
          <target state="translated">Los programadores a menudo confunden las matrices multidimensionales con las matrices de punteros.</target>
        </trans-unit>
        <trans-unit id="0d5fda95e3940bc09dc1ccc22666813c0b54f73d" translate="yes" xml:space="preserve">
          <source>Ranges</source>
          <target state="translated">Ranges</target>
        </trans-unit>
        <trans-unit id="7976ce91c52fe87631d0a3d9dd7e9ac38cb29122" translate="yes" xml:space="preserve">
          <source>Related: macros do not respect scopes, so to avoid name collisions it can be a
good idea to use a name prefix, e.g. &lt;code&gt;MYLIB_STATIC_N_ITEMS&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Relacionado: las macros no respetan los &amp;aacute;mbitos, por lo que para evitar colisiones de nombres puede ser una buena idea usar un prefijo de nombre, por ejemplo, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MYLIB_STATIC_N_ITEMS&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="845580eed354c30eedf70a4e23705439efbc345d" translate="yes" xml:space="preserve">
          <source>Since an &lt;code&gt;array&lt;/code&gt; decays to pointer to first element where needed, the
expression &lt;code&gt;sizeof(a)/sizeof(a[0])&lt;/code&gt; can also be written as
&lt;code&gt;sizeof(a)/sizeof(*a)&lt;/code&gt;. It means the same, and no matter how it&amp;rsquo;s
written it is the &lt;strong&gt;C idiom&lt;/strong&gt; for finding the number elements of array.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dado que una &lt;/font&gt;&lt;/font&gt; &lt;code&gt;array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; desintegra al puntero al primer elemento donde sea necesario, la expresi&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof(a)/sizeof(a[0])&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tambi&amp;eacute;n se puede escribir como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof(a)/sizeof(*a)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Significa lo mismo, y no importa c&amp;oacute;mo est&amp;eacute; escrito, es el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;idioma C&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para encontrar los elementos num&amp;eacute;ricos de la matriz.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fdd3bf58590a288a7255f35b31aa883fdb12ea5a" translate="yes" xml:space="preserve">
          <source>Since arrays themselves cannot be passed by value, usually a pointer to their first element is passed by value instead. This is often called &quot;pass by pointer&quot;. Since the size of the array is not retrievable via that pointer, you have to pass a second parameter indicating the size of the array (the classic C solution) or a second pointer pointing after the last element of the array (the C++ iterator solution):</source>
          <target state="translated">Dado que las matrices en sí no pueden ser pasadas por valor,normalmente un puntero a su primer elemento es pasado por valor en su lugar.A esto se le llama a menudo &quot;pasar por el puntero&quot;.Dado que el tamaño de la matriz no se puede recuperar a través de ese puntero,hay que pasar un segundo parámetro que indique el tamaño de la matriz (la clásica solución de C)o un segundo puntero que apunte al último elemento de la matriz (la solución iteradora de C++):</target>
        </trans-unit>
        <trans-unit id="b44febfd34ec6b3b83a2f3ed4ef55e29031984dc" translate="yes" xml:space="preserve">
          <source>Since each line is allocated individually now, viewing 2D arrays as 1D arrays does not work anymore.</source>
          <target state="translated">Como ahora cada línea se asigna individualmente,ver los arreglos 2D como arreglos 1D ya no funciona.</target>
        </trans-unit>
        <trans-unit id="2f0cf1c959967562a9ea9857497386e60eb8610f" translate="yes" xml:space="preserve">
          <source>Since in this case the number of elements in the array initializer is equal to the size of the array, specifying the size manually is redundant. It can automatically be deduced by the compiler:</source>
          <target state="translated">Dado que en este caso el número de elementos en el inicializador de la matriz es igual al tamaño de la misma,especificar el tamaño manualmente es redundante.Puede ser deducido automáticamente por el compilador:</target>
        </trans-unit>
        <trans-unit id="76da052225a0e136a9e4e987d8dabb6143458717" translate="yes" xml:space="preserve">
          <source>Since the syntax &lt;code&gt;*(x+i)&lt;/code&gt; is a bit clumsy, C++ provides the alternative syntax &lt;code&gt;x[i]&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dado que la sintaxis &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(x+i)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un poco torpe, C ++ proporciona la sintaxis alternativa &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x[i]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e02a2730b214f5417ece2b04ba144915d409379b" translate="yes" xml:space="preserve">
          <source>Since the types don't match, the program crashes when you run it.</source>
          <target state="translated">Como los tipos no coinciden,el programa se bloquea cuando lo ejecutas.</target>
        </trans-unit>
        <trans-unit id="8441d3938f1ecea2e057daaaa95958eeb1304ca0" translate="yes" xml:space="preserve">
          <source>Static POD arrays are initialized &lt;em&gt;exactly once&lt;/em&gt;, and the initial values are &lt;em&gt;typically&lt;/em&gt; baked into the executable, in which case there is no initialization cost at runtime. This is not always the most space-efficient solution, however, and it is not required by the standard.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las matrices POD est&amp;aacute;ticas se inicializan &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;exactamente una vez&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y los valores iniciales &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;generalmente se&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; incorporan al ejecutable, en cuyo caso no hay costo de inicializaci&amp;oacute;n en tiempo de ejecuci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, esta no siempre es la soluci&amp;oacute;n m&amp;aacute;s eficiente en cuanto al espacio, y el est&amp;aacute;ndar no la exige.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5fc6d78bfd1b3cbec3f64c6df4199384d6e606cb" translate="yes" xml:space="preserve">
          <source>Static arrays</source>
          <target state="translated">Matrices estáticas</target>
        </trans-unit>
        <trans-unit id="a0600c54cb97b541cf9c0e780ec5c24bde3f13bd" translate="yes" xml:space="preserve">
          <source>Static arrays (arrays living &quot;in the data segment&quot;) are local array variables defined with the &lt;code&gt;static&lt;/code&gt; keyword and array variables at namespace scope (&quot;global variables&quot;):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las matrices est&amp;aacute;ticas (matrices que viven &quot;en el segmento de datos&quot;) son variables de matriz local definidas con la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;palabra clave &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y las variables de matriz en el &amp;aacute;mbito del espacio de nombres (&quot;variables globales&quot;):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="774c4e05a928152894fd8eee023448f0bd571034" translate="yes" xml:space="preserve">
          <source>Static arrays without an array initializer are zero-initialized prior to any further potential initialization.</source>
          <target state="translated">Los conjuntos estáticos sin un inicializador de conjuntos se inicializan a cero antes de cualquier otra posible inicialización.</target>
        </trans-unit>
        <trans-unit id="d719c3b1e68cccdda79bb9c4f8e7142667d5e8af" translate="yes" xml:space="preserve">
          <source>Static non-POD arrays are initialized the &lt;em&gt;first time&lt;/em&gt; the flow of control passes through their definition. In the case of local static arrays, that may never happen if the function is never called.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las matrices est&amp;aacute;ticas sin POD se inicializan la &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;primera vez que&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; el flujo de control pasa por su definici&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En el caso de las matrices est&amp;aacute;ticas locales, eso nunca suceder&amp;aacute; si nunca se llama a la funci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc398be3b099870d82f0233260c92cd7fe247e52" translate="yes" xml:space="preserve">
          <source>The compiler rewrites &lt;code&gt;int const a[7]&lt;/code&gt; to just &lt;code&gt;int const a[]&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El compilador reescribe &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int const a[7]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; solo para &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int const a[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b4182f7f5ae56ba8db00f357997716a8374d56d" translate="yes" xml:space="preserve">
          <source>The compiler rewrites &lt;code&gt;int const a[]&lt;/code&gt; to &lt;code&gt;int const* a&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El compilador reescribe &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int const a[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int const* a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="686df3b8d217ab698b2df0c1fd71552a18fd8b54" translate="yes" xml:space="preserve">
          <source>The compiler will silently generate a pointer to the first element of an array whenever it is deemed useful, that is, whenever an operation would fail on an array but succeed on a pointer. This conversion from array to pointer is trivial, since the resulting pointer &lt;em&gt;value&lt;/em&gt; is simply the address of the array. Note that the pointer is &lt;em&gt;not&lt;/em&gt; stored as part of the array itself (or anywhere else in memory). &lt;strong&gt;An array is not a pointer.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El compilador generar&amp;aacute; silenciosamente un puntero al primer elemento de una matriz siempre que se considere &amp;uacute;til, es decir, cuando una operaci&amp;oacute;n falle en una matriz pero tenga &amp;eacute;xito en un puntero. Esta conversi&amp;oacute;n de matriz a puntero es trivial, ya que el &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valor del&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; puntero resultante &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;es simplemente la direcci&amp;oacute;n de la matriz. Tenga en cuenta que el puntero &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no se&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; almacena como parte de la matriz en s&amp;iacute; (o en cualquier otro lugar de la memoria). &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una matriz no es un puntero.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a5270e2af134e0442ff7692e26dd083472328919" translate="yes" xml:space="preserve">
          <source>The compilers are fully within their rights to not diagnose this error,
because C++11 &amp;sect;3.5/10 says, about the requirement of compatible types
for the declarations,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los compiladores tienen pleno derecho a no diagnosticar este error, porque C ++ 11 &amp;sect;3.5 / 10 dice, sobre el requisito de tipos compatibles para las declaraciones,&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b3c4bbf6e6b3262be7b6e0ac48d15ee8ea7abffa" translate="yes" xml:space="preserve">
          <source>The definition of the indexing operator leads to the following interesting equivalence:</source>
          <target state="translated">La definición del operador de indexación conduce a la siguiente equivalencia interesante:</target>
        </trans-unit>
        <trans-unit id="8f0c75d53a53f4088924e02576b1ea2942b86f60" translate="yes" xml:space="preserve">
          <source>The following ASCII art depicts the memory layout if the size is computed as 8 at runtime:</source>
          <target state="translated">El siguiente arte ASCII representa la disposición de la memoria si el tamaño se calcula como 8 en tiempo de ejecución:</target>
        </trans-unit>
        <trans-unit id="554e227d03dda0191d05be5936967bfe2f42dec4" translate="yes" xml:space="preserve">
          <source>The following ASCII art explains this distinction:</source>
          <target state="translated">El siguiente arte ASCII explica esta distinción:</target>
        </trans-unit>
        <trans-unit id="b9ad5ce162146034fe3468d816b1762bdc3db4ef" translate="yes" xml:space="preserve">
          <source>The only &quot;connection&quot; between &lt;code&gt;T[n]&lt;/code&gt; and &lt;code&gt;T[m]&lt;/code&gt; is that both types can implicitly be &lt;em&gt;converted&lt;/em&gt; to &lt;code&gt;T*&lt;/code&gt;, and the result of this conversion is a pointer to the first element of the array. That is, anywhere a &lt;code&gt;T*&lt;/code&gt; is required, you can provide a &lt;code&gt;T[n]&lt;/code&gt;, and the compiler will silently provide that pointer:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La &amp;uacute;nica &quot;conexi&amp;oacute;n&quot; entre &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T[n]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T[m]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es que ambos tipos pueden &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;convertirse&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; impl&amp;iacute;citamente &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y el resultado de esta conversi&amp;oacute;n es un puntero al primer elemento de la matriz. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es decir, en cualquier lugar donde &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se requiera &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;una &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , puede proporcionar una &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T[n]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y el compilador proporcionar&amp;aacute; silenciosamente ese puntero:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4900a0a1149898ae253be24f75d402af0b30da85" translate="yes" xml:space="preserve">
          <source>The pitfall: as of July 2015 the above compiles with MinGW-64 5.1.0 with
&lt;code&gt;-pedantic-errors&lt;/code&gt;, and,
testing with the online compilers at &lt;a href=&quot;http://gcc.godbolt.org/&quot;&gt;gcc.godbolt.org/&lt;/a&gt;, also with clang 3.0
and clang 3.2, but not with clang 3.3, 3.4.1, 3.5.0, 3.5.1, 3.6 (rc1) or
3.7 (experimental). And important for the Windows platform, it does not compile
with Visual C++ 2015. The reason is a C++11/C++14 statement about use of
references in &lt;code&gt;constexpr&lt;/code&gt; expressions:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La trampa: a partir de julio de 2015, lo anterior se compila con MinGW-64 5.1.0 con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;-pedantic-errors&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y, probando con los compiladores en l&amp;iacute;nea en &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://gcc.godbolt.org/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;gcc.godbolt.org/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , tambi&amp;eacute;n con clang 3.0 y clang 3.2, pero no con clang 3.3, 3.4.1, 3.5.0, 3.5.1, 3.6 (rc1) o 3.7 (experimental). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;E importante para la plataforma Windows, no se compila con Visual C ++ 2015. El motivo es una declaraci&amp;oacute;n C ++ 11 / C ++ 14 sobre el uso de referencias en &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;expresiones &lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f45126b06ef23df5ffbfdd6efaae59b432607f7f" translate="yes" xml:space="preserve">
          <source>The runtime error detection is better than no detection, but it wastes a little
processor time, and perhaps much more programmer time. Better with detection at
compile time! And if you're happy to not support arrays of local types with C++98,
then you can do that:</source>
          <target state="translated">La detección de errores en tiempo de ejecución es mejor que la no detección,pero desperdicia un poco de tiempo del procesador,y quizás mucho más tiempo del programador.¡Mejor con la detección en tiempo de compilación! Y si estás contento de no soportar arrays de tipos locales con C++98,entonces puedes hacerlo:</target>
        </trans-unit>
        <trans-unit id="a649050a2be06c8e39adac5d67332961492c1c85" translate="yes" xml:space="preserve">
          <source>The same paragraph details the variation that is allowed:</source>
          <target state="translated">En el mismo párrafo se detalla la variación que se permite:</target>
        </trans-unit>
        <trans-unit id="8fdd2f0bef4d6e460fb6f1f2ec6ebe3c770034da" translate="yes" xml:space="preserve">
          <source>The same situation arises in classes and is maybe more obvious. A pointer to an object and a pointer to its first data member have the same &lt;em&gt;value&lt;/em&gt; (the same address), yet they are completely distinct types.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La misma situaci&amp;oacute;n surge en las clases y es quiz&amp;aacute;s m&amp;aacute;s obvia. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un puntero a un objeto y un puntero a su primer miembro de datos tienen el mismo &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valor&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (la misma direcci&amp;oacute;n), pero son tipos completamente distintos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e7540274c5dbcf87fc080dd7cc42e01b3035b4fe" translate="yes" xml:space="preserve">
          <source>This FAQ is split into five parts:</source>
          <target state="translated">Este FAQ está dividido en cinco partes:</target>
        </trans-unit>
        <trans-unit id="75cbb85f170e4859016dc81df1a331401263eebc" translate="yes" xml:space="preserve">
          <source>This allowed variation does not include declaring a name as an array in one
translation unit, and as a pointer in another translation unit.</source>
          <target state="translated">Esta variación permitida no incluye la declaración de un nombre como matriz en una unidad de traducción,y como puntero en otra unidad de traducción.</target>
        </trans-unit>
        <trans-unit id="c3cbef9e71473e0b651623890cdcceb97160ae6b" translate="yes" xml:space="preserve">
          <source>This application has requested the Runtime to terminate it in an unusual way.</source>
          <target state="translated">Esta solicitud ha pedido al Runtime que la termine de una manera inusual.</target>
        </trans-unit>
        <trans-unit id="77a8211a815c79e630f954b14acfcbbff4945d7c" translate="yes" xml:space="preserve">
          <source>This conversion is known as &quot;array-to-pointer decay&quot;, and it is a major source of confusion. The size of the array is lost in this process, since it is no longer part of the type (&lt;code&gt;T*&lt;/code&gt;). Pro: Forgetting the size of an array on the type level allows a pointer to point to the first element of an array of &lt;em&gt;any&lt;/em&gt; size. Con: Given a pointer to the first (or any other) element of an array, there is no way to detect how large that array is or where exactly the pointer points to relative to the bounds of the array. &lt;a href=&quot;https://stackoverflow.com/questions/4261074/&quot;&gt;Pointers are extremely stupid&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta conversi&amp;oacute;n se conoce como &quot;decaimiento de matriz a puntero&quot;, y es una fuente importante de confusi&amp;oacute;n. El tama&amp;ntilde;o de la matriz se pierde en este proceso, ya que ya no es parte del tipo ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). Pro: olvidar el tama&amp;ntilde;o de una matriz en el nivel de tipo permite que un puntero apunte al primer elemento de una matriz de &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cualquier&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tama&amp;ntilde;o. Con: dado un puntero al primer (o cualquier otro) elemento de una matriz, no hay forma de detectar qu&amp;eacute; tan grande es esa matriz o d&amp;oacute;nde apunta exactamente el puntero en relaci&amp;oacute;n con los l&amp;iacute;mites de la matriz. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4261074/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los punteros son extremadamente est&amp;uacute;pidos&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a4348c73ecd32e24327bad7c0bda07f2fded0659" translate="yes" xml:space="preserve">
          <source>This is how a named multidimensional array looks like in memory:</source>
          <target state="translated">Así es como se ve una matriz multidimensional nombrada en la memoria:</target>
        </trans-unit>
        <trans-unit id="fdfc624bf57b66e2918a46588b9dcca5300477c3" translate="yes" xml:space="preserve">
          <source>This is how an anonymous multidimensional array looks like in memory:</source>
          <target state="translated">Así es como se ve una matriz multidimensional anónima en la memoria:</target>
        </trans-unit>
        <trans-unit id="ede415bd1cfcb19839ab828b1f1b520817e906b1" translate="yes" xml:space="preserve">
          <source>This is more flexible than what true array assignment could provide because it is possible to copy slices of larger arrays into smaller arrays.
&lt;code&gt;std::copy&lt;/code&gt; is usually specialized for primitive types to give maximum performance. It is unlikely that &lt;code&gt;std::memcpy&lt;/code&gt; performs better. If in doubt, measure.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto es m&amp;aacute;s flexible de lo que podr&amp;iacute;a proporcionar la verdadera asignaci&amp;oacute;n de matriz porque es posible copiar segmentos de matrices m&amp;aacute;s grandes en matrices m&amp;aacute;s peque&amp;ntilde;as. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::copy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; suele estar especializado para tipos primitivos para obtener el m&amp;aacute;ximo rendimiento. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es poco probable que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::memcpy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; mejor. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si tiene dudas, mida.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a81aa85761c51a0de5661013b69548fe3e215386" translate="yes" xml:space="preserve">
          <source>This is the only solution that works with element types that have no default constructor.</source>
          <target state="translated">Esta es la única solución que funciona con los tipos de elementos que no tienen un constructor por defecto.</target>
        </trans-unit>
        <trans-unit id="f883fd467cbb1529780034400816e1198b388651" translate="yes" xml:space="preserve">
          <source>To deal with collections that can be non-arrays one needs the overloadability of an
&lt;code&gt;n_items&lt;/code&gt; function, but also, for compile time use one needs a compile time
representation of the array size. And the classic C++03 solution, which works fine
also in C++11 and C++14, is to let the function report its result not as a value
but via its function result &lt;em&gt;type&lt;/em&gt;. For example like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para manejar colecciones que pueden ser no matrices, se necesita la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;n_items&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de sobrecarga de una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funci&amp;oacute;n &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;n_items&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , pero tambi&amp;eacute;n, para el tiempo de compilaci&amp;oacute;n, se necesita una representaci&amp;oacute;n en tiempo de compilaci&amp;oacute;n del tama&amp;ntilde;o de la matriz. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y la soluci&amp;oacute;n cl&amp;aacute;sica de C ++ 03, que funciona bien tambi&amp;eacute;n en C ++ 11 y C ++ 14, es dejar que la funci&amp;oacute;n informe su resultado no como un valor sino a trav&amp;eacute;s de su &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipo de&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; resultado de funci&amp;oacute;n &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo as&amp;iacute;:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="86ccc751b475ca0db70475e824206e924ea35910" translate="yes" xml:space="preserve">
          <source>Unfortunately, you can also provide a size in an array parameter which is silently ignored by the compiler. That is, the following three signatures are exactly equivalent, as indicated by the compiler errors:</source>
          <target state="translated">Desafortunadamente,también puede proporcionar un tamaño en un parámetro de la matriz que es silenciosamente ignorado por el compilador.Es decir,las siguientes tres firmas son exactamente equivalentes,como lo indican los errores del compilador:</target>
        </trans-unit>
        <trans-unit id="987ac6859eb610ba381637e374a761e25c6a0958" translate="yes" xml:space="preserve">
          <source>When using named multidimensional arrays, &lt;em&gt;all&lt;/em&gt; dimensions must be known at compile time:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando se utilizan matrices multidimensionales con nombre, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;todas las&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; dimensiones deben conocerse en tiempo de compilaci&amp;oacute;n:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="037941813c24acca926890ecb0bb3d7c1d72ad7b" translate="yes" xml:space="preserve">
          <source>With C++11 and later it's natural, but as you'll see dangerous!, to
replace the C++03 function</source>
          <target state="translated">Con C++11 y más tarde es natural,pero como verán es peligroso!,para reemplazar la función de C++03</target>
        </trans-unit>
        <trans-unit id="89f756335068da1d48636a9fe82e0a3f5bd23361" translate="yes" xml:space="preserve">
          <source>With C++11 you can use this also for arrays of local type, and it's the type safe
&lt;strong&gt;C++ idiom&lt;/strong&gt; for finding the number of elements of an array.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con C ++ 11 puede usar esto tambi&amp;eacute;n para matrices de tipo local, y es el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;idioma&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; seguro de &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para encontrar el n&amp;uacute;mero de elementos de una matriz.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="18a241c5629454bfac48aee554b037322204406c" translate="yes" xml:space="preserve">
          <source>With anonymous multidimensional arrays, all dimensions &lt;em&gt;except the first&lt;/em&gt; must be known at compile time:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con matrices multidimensionales an&amp;oacute;nimas, todas las dimensiones, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;excepto la primera,&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; deben conocerse en tiempo de compilaci&amp;oacute;n:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b0e6bf7cf1415d98e09ee516a0a8f2f1e3d5ef8f" translate="yes" xml:space="preserve">
          <source>With deep C experience it&amp;rsquo;s natural to write &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con experiencia profunda en C es natural escribir ...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0903eff36ec8b3650ef143d2b41f698fea3c7cd9" translate="yes" xml:space="preserve">
          <source>You can overcome the restriction of fixed width by introducing another level of indirection.</source>
          <target state="translated">Se puede superar la restricción de la anchura fija introduciendo otro nivel de indirección.</target>
        </trans-unit>
        <trans-unit id="9cbd8f05852ef038c494a761f689310e77a9157b" translate="yes" xml:space="preserve">
          <source>You can think of the compiler as rewriting &lt;code&gt;T p[]&lt;/code&gt; to &lt;code&gt;T *p&lt;/code&gt;&lt;strong&gt;in the context of parameter lists only&lt;/strong&gt;. This special rule is partly responsible for the whole confusion about arrays and pointers. In every other context, declaring something as an array or as a pointer makes a &lt;em&gt;huge&lt;/em&gt; difference.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede pensar en el compilador como reescribiendo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T p[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T *p&lt;/code&gt; &lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;en el contexto de listas de par&amp;aacute;metros solamente&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta regla especial es en parte responsable de toda la confusi&amp;oacute;n sobre matrices y punteros. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En cualquier otro contexto, declarar algo como una matriz o como un puntero hace una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;gran&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; diferencia.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1aece31962ca91ece9ad614074408dff8ca56f74" translate="yes" xml:space="preserve">
          <source>You must release each anonymous array exactly once and then never touch it again afterwards. Not releasing it at all results in a memory leak (or more generally, depending on the element type, a resource leak), and trying to release it multiple times results in undefined behavior. Using the non-array form &lt;code&gt;delete&lt;/code&gt; (or &lt;code&gt;free&lt;/code&gt;) instead of &lt;code&gt;delete[]&lt;/code&gt; to release the array is also &lt;a href=&quot;https://stackoverflow.com/questions/1612031/&quot;&gt;undefined behavior&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Debe liberar cada matriz an&amp;oacute;nima exactamente una vez y luego nunca volver a tocarla. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si no se libera en absoluto, se produce una p&amp;eacute;rdida de memoria (o, m&amp;aacute;s generalmente, dependiendo del tipo de elemento, una p&amp;eacute;rdida de recursos), e intentar liberarlo varias veces resulta en un comportamiento indefinido. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El uso de la forma sin matriz &lt;/font&gt;&lt;/font&gt; &lt;code&gt;delete&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;free&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) en lugar de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;delete[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para liberar la matriz tambi&amp;eacute;n es &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1612031/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;un comportamiento indefinido&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7cf4dca388e375295b617def54235d06f1f18486" translate="yes" xml:space="preserve">
          <source>an &lt;em&gt;id-expression&lt;/em&gt; that refers to a variable or data member of reference type
  unless the reference has a preceding initialization and either</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;expresi&amp;oacute;n de identificaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que se refiere a una variable o miembro de datos de tipo de referencia a menos que la referencia tenga una inicializaci&amp;oacute;n anterior y&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ee5a0cb7c4a9d8e5aaef6186e3dca85b7a1c4c63" translate="yes" xml:space="preserve">
          <source>array creation and initialization</source>
          <target state="translated">creación e inicialización de la matriz</target>
        </trans-unit>
        <trans-unit id="6915828ba027c236180d6e8c4ba69d8413c5d95d" translate="yes" xml:space="preserve">
          <source>arrays on the type level and accessing elements</source>
          <target state="translated">matrices en el nivel de tipo y elementos de acceso</target>
        </trans-unit>
        <trans-unit id="aed12379aa394fd233ce8de1dde42fadfbb8dae3" translate="yes" xml:space="preserve">
          <source>assignment and parameter passing</source>
          <target state="translated">asignación y paso de parámetros</target>
        </trans-unit>
        <trans-unit id="5e37194a585e4aee6d98b0399a5f22fd2cc761e0" translate="yes" xml:space="preserve">
          <source>common pitfalls when using arrays</source>
          <target state="translated">los peligros más comunes cuando se utilizan matrices</target>
        </trans-unit>
        <trans-unit id="69b28d8d2e333e97a73be6ac4484ceb918b4ce92" translate="yes" xml:space="preserve">
          <source>compile_time_detection.cpp: In function 'void display(const int*)':</source>
          <target state="translated">compile_time_detection.cpp:En la función 'void display(const int*)':</target>
        </trans-unit>
        <trans-unit id="ba91b6f0adec5d5575c2f50a5f21d1e358484f3c" translate="yes" xml:space="preserve">
          <source>compile_time_detection.cpp:14: error: no matching function for call to 'n_items(const int*&amp;amp;)'</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;compile_time_detection.cpp: 14: error: no hay funci&amp;oacute;n coincidente para la llamada a 'n_items (const int * &amp;amp;)'&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c4d482013cc4cc18e80a64e5984427c90c12ed9" translate="yes" xml:space="preserve">
          <source>it is a non-static data member of an object whose lifetime began within
  the evaluation of e;</source>
          <target state="translated">es un miembro de datos no estático de un objeto cuya vida comenzó dentro de la evaluación de e;</target>
        </trans-unit>
        <trans-unit id="6bb2ba899277df8e9c8abaec677046b9e7febe4c" translate="yes" xml:space="preserve">
          <source>it is initialized with a constant expression or</source>
          <target state="translated">se inicializa con una expresión constante o</target>
        </trans-unit>
        <trans-unit id="aa0a88b7d54288b7f66de4f7d51b7f248e1c3534" translate="yes" xml:space="preserve">
          <source>multidimensional arrays and arrays of pointers</source>
          <target state="translated">conjuntos multidimensionales y conjuntos de punteros</target>
        </trans-unit>
        <trans-unit id="8b843815899353680e28463b8efa687d68cc8a4f" translate="yes" xml:space="preserve">
          <source>passes a pointer to &lt;code&gt;N_ITEMS&lt;/code&gt;, and therefore most likely produces a wrong
result. Compiled as a 32-bit executable in Windows 7 it produces &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pasa un puntero a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;N_ITEMS&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y, por lo tanto, lo m&amp;aacute;s probable es que produzca un resultado incorrecto. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Compilado como un ejecutable de 32 bits en Windows 7 produce ...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c30d6576bbcad8a1d310c146ea6af4cf8cc8fd26" translate="yes" xml:space="preserve">
          <source>where the significant change is the use of &lt;code&gt;constexpr&lt;/code&gt;, which allows
this function to produce a &lt;strong&gt;compile time constant&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;donde el cambio significativo es el uso de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que permite que esta funci&amp;oacute;n produzca una &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;constante de tiempo de compilaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8fcd25a39d2037183044a8897e9a5333d727fded" translate="yes" xml:space="preserve">
          <source>with</source>
          <target state="translated">with</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
