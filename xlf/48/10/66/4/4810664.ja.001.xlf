<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/4810664">
    <body>
      <group id="4810664">
        <trans-unit id="d04e79de260ba2b52b7b4be3155464cf946b0af5" translate="yes" xml:space="preserve">
          <source>&amp;hellip; but this fails when &lt;code&gt;Collection&lt;/code&gt; is not a raw array.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;hellip;しかし、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Collection&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が生の配列でない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合、これは失敗します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0612f3b5a654cd50db291e826efe5c34a0b6cc25" translate="yes" xml:space="preserve">
          <source>&amp;hellip; declarations for an array object can specify array types that
  differ by the presence or absence of a major array bound (8.3.4).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;hellip;配列オブジェクトの宣言では、主要な配列境界（8.3.4）の有無によって異なる配列型を指定できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0e4678381c395fca109fb1a7ab2963eb52ccdf85" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;⋮</source>
          <target state="translated">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;⋮</target>
        </trans-unit>
        <trans-unit id="eaace149c48e3954770834bb04a3463bc80ecf38" translate="yes" xml:space="preserve">
          <source>(None of the above is specific to arrays. These rules apply equally well to other kinds of static objects.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf1213a32eac75ae4baa950dd194049601cf63c" translate="yes" xml:space="preserve">
          <source>(Note that the implicitly generated pointer has no name, so I wrote &lt;code&gt;x+0&lt;/code&gt; in order to identify it.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（暗黙的に生成されたポインターには名前がないので、それを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;識別するために&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x+0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と書きまし&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;た。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="38adde0b67b061a1ec171d70e52bc519f4a9e0b7" translate="yes" xml:space="preserve">
          <source>(Note that variables at namespace scope are implicitly static. Adding the &lt;code&gt;static&lt;/code&gt; keyword to their definition has a &lt;a href=&quot;https://stackoverflow.com/questions/3891325/&quot;&gt;completely different, deprecated meaning&lt;/a&gt;.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（名前空間スコープの変数は暗黙的に静的であることに注意してください&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キーワードを定義に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;追加すると&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3891325/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完全に異なる、非推奨の意味になり&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="231510dccd89918e53895d32efe43a1984323116" translate="yes" xml:space="preserve">
          <source>(Note the trailing pair of parenthesis right before the semicolon.) Again, C++0x simplifies the rules and allows specifying initial values for anonymous arrays thanks to uniform initialization:</source>
          <target state="translated">また、C++0x では、一様な初期化によりルールが簡素化され、匿名配列の初期値を指定できるようになっています。</target>
        </trans-unit>
        <trans-unit id="90aa3f8dd54d913a20bcd4352992625debef9147" translate="yes" xml:space="preserve">
          <source>1 elements.</source>
          <target state="translated">1つの要素。</target>
        </trans-unit>
        <trans-unit id="a651c751b5b91bd381394f65645d3e91f1f89c2d" translate="yes" xml:space="preserve">
          <source>5. Common pitfalls when using arrays.</source>
          <target state="translated">5.配列を使用する際によくある落とし穴</target>
        </trans-unit>
        <trans-unit id="19ec1826e2fdf1b52e478a2704cb8d0d8615d9bc" translate="yes" xml:space="preserve">
          <source>5.1 Pitfall: Trusting type-unsafe linking.</source>
          <target state="translated">5.1 落とし穴。型安全でないリンクを信頼する</target>
        </trans-unit>
        <trans-unit id="1796594de79af31df71419271109d6b84d26c8a2" translate="yes" xml:space="preserve">
          <source>5.2 Pitfall: Doing premature optimization (&lt;code&gt;memset&lt;/code&gt; &amp;amp; friends).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;5.2落とし穴：時期尚早の最適化（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;memset&lt;/code&gt; など&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b0a0e496ecd16a8c73f36baed69bdc51bfc3031a" translate="yes" xml:space="preserve">
          <source>5.3 Pitfall: Using the C idiom to get number of elements.</source>
          <target state="translated">5.3 落とし穴。Cの熟語を使って要素の数を取得する。</target>
        </trans-unit>
        <trans-unit id="2479875ffe2b4aa5f8ac73d86a4c378dc2349229" translate="yes" xml:space="preserve">
          <source>5.4 C++11 &amp;amp; C++14 pitfall: Using a &lt;code&gt;constexpr&lt;/code&gt; array size function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;5.4 C ++ 11およびC ++ 14の落とし穴：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列サイズ関数の使用。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5390b67f62a37f1c341c198ae984410b96914b51" translate="yes" xml:space="preserve">
          <source>7 elements, calling display...</source>
          <target state="translated">7つの要素、呼び出し表示...</target>
        </trans-unit>
        <trans-unit id="f9de6fbff782960fefcc3095a3bc24ddfce1b643" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;N_ITEMS&lt;/code&gt; is therefore invoked with a pointer.</source>
          <target state="translated">&lt;code&gt;N_ITEMS&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;N_ITEMS&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はポインターで呼び出されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74212934fe8368a399b0d98b0a4d9b7243ba5e1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int(*)[8]&lt;/code&gt; is a pointer to an array of 8 integers.</source>
          <target state="translated">&lt;code&gt;int(*)[8]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、8つの整数の配列へのポインターです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a32d2b9fd0ba41aa42e8651c7bf0b911729c9d10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int*[8]&lt;/code&gt; is an array of 8 pointers, each element of type &lt;code&gt;int*&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;int*[8]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、各要素が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;型の8つのポインターの配列です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="96eb00bc6e8065436e33e4a99e47570293b66488" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sizeof(*array)&lt;/code&gt; is equivalent to &lt;code&gt;sizeof(int)&lt;/code&gt;, which for a 32-bit executable is also 4.</source>
          <target state="translated">&lt;code&gt;sizeof(*array)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof(int)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と同等&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で、32ビット実行可能ファイルの場合も4です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f3903fae2b05023ec89b2d2cc770d69f2c57d737" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Not written yet&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;まだ書かれていない&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e8586c6494c198dbc6f2f6317d094faf70f2ea3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[N3290 &amp;sect;3.5/10]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[N3290&amp;sect;3.5/ 10]&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="620ae72342c6c376f4c4a1a08f78905e1878296d" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;
&lt;em&gt;(Note: This is meant to be an entry to &lt;a href=&quot;https://stackoverflow.com/questions/tagged/c++-faq&quot;&gt;Stack Overflow's C++ FAQ&lt;/a&gt;. If you want to critique the idea of providing an FAQ in this form, then &lt;a href=&quot;https://meta.stackexchange.com/questions/68647/setting-up-a-faq-for-the-c-tag&quot;&gt;the posting on meta that started all this&lt;/a&gt; would be the place to do that. Answers to that question are monitored in the &lt;a href=&quot;http://chat.stackoverflow.com/rooms/10/c-lounge&quot;&gt;C++ chatroom&lt;/a&gt;, where the FAQ idea started out in the first place, so your answer is very likely to get read by those who came up with the idea.)&lt;/em&gt;
&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;em&gt;（注：これは、 &lt;a href=&quot;https://stackoverflow.com/questions/tagged/c++-faq&quot;&gt;Stack OverflowのC ++ FAQ&lt;/a&gt;へのエントリになることを意図しています。このフォームでFAQを提供するという考えを批評したい場合は、これ&lt;a href=&quot;https://meta.stackexchange.com/questions/68647/setting-up-a-faq-for-the-c-tag&quot;&gt;をすべて開始したメタへの投稿&lt;/a&gt;がそのための場所になります。回答その質問は&lt;a href=&quot;http://chat.stackoverflow.com/rooms/10/c-lounge&quot;&gt;C ++チャットルーム&lt;/a&gt;で監視され、FAQのアイデアはそもそも始まったので、アイデアを思いついた人があなたの答えを読む可能性が非常に高くなります。&lt;/em&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="a7380dfe067e661e6c28af642fc12e65ff35a367" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;conditional-expression&lt;/em&gt;&lt;code&gt;e&lt;/code&gt; is a &lt;em&gt;core constant expression&lt;/em&gt; unless the evaluation
  of &lt;code&gt;e&lt;/code&gt;, following the rules of the abstract machine (1.9), would evaluate one of the
  following expressions:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;条件式の&lt;/font&gt;&lt;/font&gt;&lt;/em&gt; &lt;code&gt;e&lt;/code&gt; が&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コアの定数式&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の評価ない限り&lt;/font&gt;&lt;/font&gt; &lt;code&gt;e&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下の式のいずれかを評価するであろう、抽象機械（1.9）の規則に従って、。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6ec1049f6c023e311e56e84c953aa4c9fe27c95a" translate="yes" xml:space="preserve">
          <source>A violation of this rule on type identity does not require a diagnostic.</source>
          <target state="translated">型の同一性に関するこの規則の違反は、診断を必要としません。</target>
        </trans-unit>
        <trans-unit id="0cd6ad0e54ee6246cea808ee63fd05eddfc872e5" translate="yes" xml:space="preserve">
          <source>About the choice of return type for &lt;code&gt;static_n_items&lt;/code&gt;: this code doesn't use &lt;code&gt;std::integral_constant&lt;/code&gt;
because with &lt;code&gt;std::integral_constant&lt;/code&gt; the result is represented
directly as a &lt;code&gt;constexpr&lt;/code&gt; value, reintroducing the original problem. Instead
of a &lt;code&gt;Size_carrier&lt;/code&gt; class one can let the function directly return a
reference to an array. However, not everybody is familiar with that syntax.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;戻り値の型の選択について&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_n_items&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：このコードは使用しない&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::integral_constant&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 持つため&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::integral_constant&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;結果として直接表現され&lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; のの&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値元の問題を再導入します、。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Size_carrier&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、関数に配列への参照を直接返させることができます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、誰もがその構文に精通しているわけではありません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b959c28ecb4dde919a516a1c1b3188124c5c2f89" translate="yes" xml:space="preserve">
          <source>About the naming: part of this solution to the &lt;code&gt;constexpr&lt;/code&gt;-invalid-due-to-reference
problem is to make the choice of compile time constant explicit.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;命名について：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -invalid-due-to-reference問題&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に対するこのソリューションの一部は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、コンパイル時定数の選択を明示的にすることです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="26a01f7a3f29b95a2006e044a16488cdb32ba200" translate="yes" xml:space="preserve">
          <source>Accessing elements</source>
          <target state="translated">要素へのアクセス</target>
        </trans-unit>
        <trans-unit id="8d39c2f6a75768a2092994233c9a0daa3c70b9d6" translate="yes" xml:space="preserve">
          <source>Also note that you could simply provide &lt;code&gt;x&lt;/code&gt; as the first argument. That is a little too terse for my taste, and it also makes template argument deduction a bit harder for the compiler, because in that case the first argument is an array but the second argument is a pointer. (Again, array-to-pointer decay kicks in.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、最初の引数として&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;単に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を指定&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;することもでき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは私の好みには少し簡潔すぎます。また、テンプレート引数の推定はコンパイラにとって少し難しくなります。その場合、最初の引数は配列ですが、2番目の引数はポインタです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（ここでも、配列からポインタへの減衰が始まります。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="18999a9d2d7e1f9e2ca1c736ffbc5c4469b40a2e" translate="yes" xml:space="preserve">
          <source>Alternatively, the initial values can be explicitly specified in the &lt;em&gt;array initializer&lt;/em&gt;, a comma-separated list surrounded by curly brackets:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あるいは、初期値は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、中括弧で囲まれたコンマ区切りのリスト&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;である&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列初期化子&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;明示的に指定でき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="13bd6a28072658c138cb224a1d27229ba67fa990" translate="yes" xml:space="preserve">
          <source>Alternatively, you can define an automatic array in the constructor body and copy the elements over:</source>
          <target state="translated">あるいは、コンストラクタのボディで自動配列を定義し、その要素をコピーすることもできます。</target>
        </trans-unit>
        <trans-unit id="b08a5a490469c21ff382823b10dd32277b29eff4" translate="yes" xml:space="preserve">
          <source>Although you cannot assign arrays directly, you &lt;em&gt;can&lt;/em&gt; assign structs and classes which &lt;em&gt;contain&lt;/em&gt; array members. That is because &lt;a href=&quot;https://stackoverflow.com/questions/4164279/&quot;&gt;array members are copied memberwise&lt;/a&gt; by the assignment operator which is provided as a default by the compiler. If you define the assignment operator manually for your own struct or class types, you must fall back to manual copying for the array members.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列を直接割り当てることはできません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列メンバー&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;含む&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構造体とクラスを割り当てる&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;こと&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ができ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4164279/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列のメンバーが&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、コンパイラーによってデフォルトで提供される代入演算子によって&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メンバーごとにコピー&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;されるためです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;独自の構造体またはクラス型の割り当て演算子を手動で定義する場合は、配列メンバーの手動コピーにフォールバックする必要があります。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="686c9976fce3ef9968836df6eec6c84549086e98" translate="yes" xml:space="preserve">
          <source>An array of type &lt;code&gt;T[n]&lt;/code&gt; has &lt;code&gt;n&lt;/code&gt; elements, indexed from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n-1&lt;/code&gt;; there is no element &lt;code&gt;n&lt;/code&gt;. And yet, to support half-open ranges (where the beginning is &lt;em&gt;inclusive&lt;/em&gt; and the end is &lt;em&gt;exclusive&lt;/em&gt;), C++ allows the computation of a pointer to the (non-existent) n-th element, but it is illegal to dereference that pointer:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;型の配列&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T[n]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有する&lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; 個&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の要素から索引付け&lt;/font&gt;&lt;/font&gt; &lt;code&gt;0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;n-1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要素&lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はありません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さらに、半開範囲（最初は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;包括的&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で最後は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;排他的&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をサポートするために&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、C ++では（存在しない）n番目の要素へのポインターの計算を許可していますが、そのポインターを逆参照することは違法です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="42456e1dacb6621675d5ac2e2413c58c4322f39d" translate="yes" xml:space="preserve">
          <source>An array type is denoted as &lt;code&gt;T[n]&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is the &lt;em&gt;element type&lt;/em&gt; and &lt;code&gt;n&lt;/code&gt; is a positive &lt;em&gt;size&lt;/em&gt;, the number of elements in the array. The array type is a product type of the element type and the size. If one or both of those ingredients differ, you get a distinct type:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列型は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T[n]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として表され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要素の型&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は正の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サイズ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（配列内の要素の数）です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列型は、要素型とサイズの積型です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらの成分の1つまたは両方が異なる場合、異なるタイプになります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2e9e7db807e1364a1e5c48cc0f20413a61a41902" translate="yes" xml:space="preserve">
          <source>And here is how it looks like in memory:</source>
          <target state="translated">そして、記憶の中ではこんな感じです。</target>
        </trans-unit>
        <trans-unit id="eac77d06b46f4d096b1aad128c8a1a33836938e7" translate="yes" xml:space="preserve">
          <source>Anonymous arrays of pointers</source>
          <target state="translated">ポインタの匿名配列</target>
        </trans-unit>
        <trans-unit id="647cdf988737cc9ccd2df7b3b704cfd1c6bb74a8" translate="yes" xml:space="preserve">
          <source>Anonymous multidimensional arrays</source>
          <target state="translated">匿名多次元配列</target>
        </trans-unit>
        <trans-unit id="1343cf5171221fe816c93d6f2a075c26f5b24b07" translate="yes" xml:space="preserve">
          <source>Array creation and initialization</source>
          <target state="translated">配列の作成と初期化</target>
        </trans-unit>
        <trans-unit id="399f9928701629470c3f9405ace42415e4409175" translate="yes" xml:space="preserve">
          <source>Array data members</source>
          <target state="translated">配列データメンバー</target>
        </trans-unit>
        <trans-unit id="24b8804b7e356d42cd7f09e1eb85af586ae43524" translate="yes" xml:space="preserve">
          <source>Array data members are created when their owning object is created. Unfortunately, C++03 provides no means to initialize arrays in the &lt;a href=&quot;https://stackoverflow.com/questions/1711990/&quot;&gt;member initializer list&lt;/a&gt;, so initialization must be faked with assignments:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列データメンバーは、所有するオブジェクトが作成されるときに作成されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;残念ながら、C ++ 03は&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1711990/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メンバー初期化子リストの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列を初期化する手段を提供していない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、初期化は割り当てで偽造する必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e8874168e3c1df960a01e93b0e01fe86fb6ae2dc" translate="yes" xml:space="preserve">
          <source>Array-to-pointer decay</source>
          <target state="translated">アレイからポインターへの減衰</target>
        </trans-unit>
        <trans-unit id="1ac5bd4e173a92bcb04c137f8efe28804ea718a6" translate="yes" xml:space="preserve">
          <source>Array-to-pointer decay naturally extends to arrays of arrays and arrays of pointers:</source>
          <target state="translated">配列からポインタへの減衰は、当然のことながら、配列の配列やポインタの配列にも及ぶ。</target>
        </trans-unit>
        <trans-unit id="6e40493abcaecb122cbcf832dab790b8d29fdd9f" translate="yes" xml:space="preserve">
          <source>Arrays are not pointers</source>
          <target state="translated">配列はポインタではありません</target>
        </trans-unit>
        <trans-unit id="f7a03c30a551a2c39c3c9fc257600a5d16f43aaf" translate="yes" xml:space="preserve">
          <source>Arrays can also be passed by reference:</source>
          <target state="translated">配列は参照で渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="2bf47475c7967f15061d931504841dd6198c3b0f" translate="yes" xml:space="preserve">
          <source>Arrays cannot be passed by value. You can either pass them by pointer or by reference.</source>
          <target state="translated">配列は値で渡すことはできません。ポインタで渡すことも、参照で渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="0d3931969794470ea65ef6c4ed1f5814ad89e104" translate="yes" xml:space="preserve">
          <source>Arrays of pointers</source>
          <target state="translated">ポインタの配列</target>
        </trans-unit>
        <trans-unit id="7b85b17ab780077809da01b26286144e5377b12f" translate="yes" xml:space="preserve">
          <source>Arrays on the type level</source>
          <target state="translated">型レベルの配列</target>
        </trans-unit>
        <trans-unit id="9195cd8f84277c2a066f9b3969eb7b482e709897" translate="yes" xml:space="preserve">
          <source>As a syntactic alternative, you can also declare parameters as &lt;code&gt;T p[]&lt;/code&gt;, and it means the exact same thing as &lt;code&gt;T* p&lt;/code&gt;&lt;strong&gt;in the context of parameter lists only&lt;/strong&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構文の代替として、パラメーターを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T p[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として宣言することもできます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パラメーターリストのコンテキストのみで&lt;/font&gt;&lt;/strong&gt;&lt;/font&gt; &lt;code&gt;T* p&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とまったく同じことを意味し&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7b591505e594b531518f3338ddc699030668ab81" translate="yes" xml:space="preserve">
          <source>As with any other kind of C++ object, arrays can be stored either directly in named variables (then the size must be a compile-time constant; &lt;a href=&quot;https://stackoverflow.com/questions/1887097/&quot;&gt;C++ does not support VLAs&lt;/a&gt;), or they can be stored anonymously on the heap and accessed indirectly via pointers (only then can the size be computed at runtime).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他の種類のC ++オブジェクトと同様に、配列は名前付き変数に直接格納できます（サイズはコンパイル時の定数でなければなり&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1887097/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません。C++はVLAをサポートしていません&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）、またはヒープに匿名で格納して間接的にアクセスできます。ポインタ（実行時にのみサイズを計算できます）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba05dcd6a6016a8619c5531920406c9d627e7d45" translate="yes" xml:space="preserve">
          <source>Assertion failed: ( &quot;N_ITEMS requires an actual array as argument&quot;, typeid( a ) != typeid( &amp;amp;*a ) ), file runtime_detect
  ion.cpp, line 16</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アサーションが失敗しました：（「N_ITEMSには引数として実際の配列が必要です」、typeid（a）！= typeid（＆* a））、ファイルruntime_detect ion.cpp、行16&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e55df441e8955746182110c3946288f381520e83" translate="yes" xml:space="preserve">
          <source>Assignment</source>
          <target state="translated">Assignment</target>
        </trans-unit>
        <trans-unit id="40f5291aa65f0d251ce748666c38a331190c5ced" translate="yes" xml:space="preserve">
          <source>Automatic arrays</source>
          <target state="translated">自動配列</target>
        </trans-unit>
        <trans-unit id="e1d37e408deb2e78b4ca48daeb81d9bd4471d3ae" translate="yes" xml:space="preserve">
          <source>Automatic arrays (arrays living &quot;on the stack&quot;) are created each time the flow of control passes through the definition of a non-static local array variable:</source>
          <target state="translated">自動配列(「スタック上」に存在する配列)は、制御の流れが非静的ローカル配列変数の定義を通過するたびに作成されます。</target>
        </trans-unit>
        <trans-unit id="f636bb95872b824ff74a6c4034eaba0370183449" translate="yes" xml:space="preserve">
          <source>But consider this code using the &lt;code&gt;constexpr&lt;/code&gt; version:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バージョン&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用してこのコードを検討して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="de28acb7f2a0a27ea202dbc568fb44f90656e5d6" translate="yes" xml:space="preserve">
          <source>C++ inherited arrays from C where they are used virtually everywhere. C++ provides abstractions that are easier to use and less error-prone (&lt;code&gt;std::vector&amp;lt;T&amp;gt;&lt;/code&gt; since C++98 and &lt;a href=&quot;http://en.cppreference.com/w/cpp/container/array&quot;&gt;&lt;code&gt;std::array&amp;lt;T, n&amp;gt;&lt;/code&gt;&lt;/a&gt; since &lt;a href=&quot;https://en.wikipedia.org/wiki/C++11&quot;&gt;C++11&lt;/a&gt;), so the need for arrays does not arise quite as often as it does in C. However, when you read legacy code or interact with a library written in C, you should have a firm grasp on how arrays work.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++はCから継承した配列で、事実上どこでも使用されています。 C ++は、使いやすく、エラーが発生しにくい抽象化を提供します（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 98以降の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::vector&amp;lt;T&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/C++11&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 11&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以降の&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp/container/array&quot;&gt; &lt;code&gt;std::array&amp;lt;T, n&amp;gt;&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。したがって、配列の必要性はありません。 Cで発生するのと同じくらい頻繁に発生します。ただし、レガシーコードを読んだり、Cで作成されたライブラリとやり取りしたりするときは、配列がどのように機能するかをしっかりと把握する必要があります。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="372b375c077d1592b504d6ea862fc8b660d07ce4" translate="yes" xml:space="preserve">
          <source>C++ provides two syntactic variations to access individual elements of an array.
Neither of them is superior to the other, and you should familiarize yourself with both.</source>
          <target state="translated">C++には、配列の個々の要素にアクセスするための構文のバリエーションが 2 つあります。どちらが優れているというわけではありませんので、両方に精通しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="e9ee5228e62855edd689fcf1ee439ad1835186a8" translate="yes" xml:space="preserve">
          <source>C++11 C++14 $5.19/2 nine&lt;sup&gt;&lt;i&gt;th&lt;/i&gt;&lt;/sup&gt; dash</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 11 C ++ 14 $ 5.19 / 2 9 &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;i&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;番目の&lt;/font&gt;&lt;/font&gt;&lt;/i&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ダッシュ&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="451cf0fb180276f6104c195abd9824bc51889070" translate="yes" xml:space="preserve">
          <source>Compiling this definition substituted into the first complete program, with g++,
I got &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この定義を最初の完全なプログラムに置き換えて、g ++でコンパイルすると、&amp;hellip;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="edd1068f47092445e2ade712a957ef28258872b7" translate="yes" xml:space="preserve">
          <source>Concerning default values for elements, anonymous arrays behave similar to automatic arrays.
Normally, anonymous POD arrays are not initialized, but there is a &lt;a href=&quot;https://stackoverflow.com/questions/620137/&quot;&gt;special syntax&lt;/a&gt; that triggers value-initialization:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要素のデフォルト値に関して、無名配列は自動配列と同様に動作します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通常、匿名のPOD配列は初期化されませんが、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値の初期化をトリガー&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/620137/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特別な構文&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b08eaadf77cfdba7944ddcaf69eee5a983b74af3" translate="yes" xml:space="preserve">
          <source>Conversions</source>
          <target state="translated">Conversions</target>
        </trans-unit>
        <trans-unit id="e8e9bf39de7b205510d34a98df2a540f29880a3d" translate="yes" xml:space="preserve">
          <source>Due to the fact that addition is commutative, the following code does exactly the same:</source>
          <target state="translated">足し算が可換的であるという事実のため、以下のコードは全く同じことを行います。</target>
        </trans-unit>
        <trans-unit id="7d44854713dee942aa855be9529ca9049d1f51a4" translate="yes" xml:space="preserve">
          <source>Dynamic arrays</source>
          <target state="translated">動的配列</target>
        </trans-unit>
        <trans-unit id="fa79fb6c19ebe9065a4f0b664015743660924a69" translate="yes" xml:space="preserve">
          <source>Dynamic arrays have no names, hence the only means of accessing them is via pointers. Because they have no names, I will refer to them as &quot;anonymous arrays&quot; from now on.</source>
          <target state="translated">動的配列には名前がありませんので、ポインタを使ってアクセスするしかありません。名前がないので、今後は「匿名配列」と呼ぶことにします。</target>
        </trans-unit>
        <trans-unit id="1ad437396251bede18ff480da4a2fb5768a40959" translate="yes" xml:space="preserve">
          <source>For a 32-bit executable &lt;code&gt;sizeof(array)&lt;/code&gt; (size of a pointer) is then 4.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;32ビット実行可能ファイルの場合、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof(array)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（ポインタのサイズ）は4です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ccf9fc11e30342ada49e22699adfb1eee920ea13" translate="yes" xml:space="preserve">
          <source>For example, if you want to sort an array, both of the following would work equally well:</source>
          <target state="translated">例えば、配列をソートしたい場合は、以下のどちらも同じように動作します。</target>
        </trans-unit>
        <trans-unit id="df57dc8940ddba3bf21d9400ea8d2ff132094b4b" translate="yes" xml:space="preserve">
          <source>For example, in contrast to the C++03 function, such a compile time constant
can be used to declare an array of the same size as another:</source>
          <target state="translated">たとえば、C++03 関数とは対照的に、このようなコンパイル時定数を使用して、別のものと同じサイズの配列を宣言することができます。</target>
        </trans-unit>
        <trans-unit id="c60990da60348b38b26e24567aa5449142642c6b" translate="yes" xml:space="preserve">
          <source>For no particular reason, arrays cannot be assigned to one another. Use &lt;code&gt;std::copy&lt;/code&gt; instead:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特に理由はありませんが、配列を相互に割り当てることはできません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::copy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c72639e3e48ee10535ffefafd0e659f4a2e46be9" translate="yes" xml:space="preserve">
          <source>Given a pointer &lt;code&gt;p&lt;/code&gt; to the first element of an array, the expression &lt;code&gt;p+i&lt;/code&gt; yields a pointer to the i-th element of the array. By dereferencing that pointer afterwards, one can access individual elements:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列の最初の要素への&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインター&lt;/font&gt;&lt;/font&gt; &lt;code&gt;p&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与えられると、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;式&lt;/font&gt;&lt;/font&gt; &lt;code&gt;p+i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は配列のi番目の要素へのポインターを生成します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;後でそのポインターを逆参照することにより、個々の要素にアクセスできます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="55b8034a1c4de8546af371fad141ee844edc1ceb" translate="yes" xml:space="preserve">
          <source>Here is a named array of five pointers which are initialized with anonymous arrays of different lengths:</source>
          <target state="translated">ここでは、長さの異なる匿名配列で初期化された5つのポインタの名前付き配列を示しています。</target>
        </trans-unit>
        <trans-unit id="c076f328745f37debceee5f1f2ed902d4a78f344" translate="yes" xml:space="preserve">
          <source>Here is an anonymous array of 5 (or any other number of) pointers which are initialized with anonymous arrays of different lengths:</source>
          <target state="translated">ここには、長さの異なる匿名配列で初期化された5個(または他の任意の数)のポインタの匿名配列があります。</target>
        </trans-unit>
        <trans-unit id="23dac17f7c85db33e32efee228cc1206d13ce8f2" translate="yes" xml:space="preserve">
          <source>Here is how static arrays behave differently from automatic arrays:</source>
          <target state="translated">ここでは、静的配列が自動配列とどのように異なる振る舞いをするかを説明します。</target>
        </trans-unit>
        <trans-unit id="29b93b685e9f34727b707a03a54e84c221d810d0" translate="yes" xml:space="preserve">
          <source>Hopefully the oops-there-was-a-reference-involved-in-your-&lt;code&gt;constexpr&lt;/code&gt; issue will be fixed with
C++17, but until then a macro like the &lt;code&gt;STATIC_N_ITEMS&lt;/code&gt; above yields portability,
e.g. to the clang and Visual C++ compilers, retaining type safety.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;うまくいけば、oops-there-was-a-reference-involved-in- &lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;constexprの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;問題はC ++ 17で修正されますが、それまでは、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;STATIC_N_ITEMS&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;よう&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なマクロ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;により、たとえばclangコンパイラやVisual C ++コンパイラに移植性&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もたらされ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。型安全性を保持します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="12890f5a4d79b3a152da01cd5f87ddd2cfb5f4eb" translate="yes" xml:space="preserve">
          <source>How do I use arrays in C++</source>
          <target state="translated">C++で配列を使用するには</target>
        </trans-unit>
        <trans-unit id="de3060ce19f3a3bb1c4391b3ddd3d0001e575313" translate="yes" xml:space="preserve">
          <source>How it works: the array is passed &lt;em&gt;by reference&lt;/em&gt; to &lt;code&gt;n_items&lt;/code&gt;, and so it does
not decay to pointer to first element, and the function can just return the
number of elements specified by the type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仕組み：配列は&lt;/font&gt; &lt;code&gt;n_items&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;への&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照によって&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;渡さ&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れる&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、最初の要素へのポインターまで減衰せず、関数は型で指定された要素の数を返すことができます。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71ce2f00f67820d9da8ad53a668481248e234bc0" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;&amp;amp;x[0]&lt;/code&gt; is generally &lt;em&gt;not&lt;/em&gt; equivalent to &lt;code&gt;x&lt;/code&gt;. The former is a pointer, the latter an array. Only when the context triggers array-to-pointer decay can &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;&amp;amp;x[0]&lt;/code&gt; be used interchangeably. For example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;x[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は通常&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;と同等で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はあり&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;前者はポインタ、後者は配列です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンテキストが配列からポインターへの減衰をトリガーする場合にのみ、&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt; &lt;code&gt;&amp;amp;x[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;交換可能に使用できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例えば：&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="50831c9c02e63682913c1ef6afbaea938a24ca91" translate="yes" xml:space="preserve">
          <source>However, there is no implicit conversion from &lt;code&gt;T[h][w]&lt;/code&gt; to &lt;code&gt;T**&lt;/code&gt;. If such an implicit conversion did exist, the result would be a pointer to the first element of an array of &lt;code&gt;h&lt;/code&gt; pointers to &lt;code&gt;T&lt;/code&gt; (each pointing to the first element of a line in the original 2D array), but that pointer array does not exist anywhere in memory yet. If you want such a conversion, you must create and fill the required pointer array manually:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T[h][w]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T**&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;へ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の暗黙的な変換はありません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのような暗黙の変換が存在した場合、結果は&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;へ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;h&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインターの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列の最初の要素への&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインター&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（それぞれが元の2D配列の行の最初の要素を指す）になりますが、そのポインター配列は存在しませんまだメモリのどこかに。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このような変換が必要な場合は、必要なポインター配列を手動で作成して入力する必要があります。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6325f458cb378a4b64ec12cd194cb25703a0a7a1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;T&lt;/code&gt; is a &lt;a href=&quot;https://stackoverflow.com/questions/146589/&quot;&gt;POD&lt;/a&gt; (like &lt;code&gt;int&lt;/code&gt; in the above example), no initialization takes place.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; が&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/146589/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;POD&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（等&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記の例では）、全く初期化が行われません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="16e6c04649f4d9ae6d831611c9b9eff3d05641fc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;T&lt;/code&gt; provides no accessible default-constructor, the program does not compile.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がアクセス可能なdefault-constructorを提供しない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、プログラムはコンパイルされません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eb41e3d981a1357a114e1a3e78f40d975727427d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;x&lt;/code&gt; denotes an &lt;em&gt;array&lt;/em&gt;, then array-to-pointer decay will kick in, because adding an array and an integer is meaningless (there is no plus operation on arrays), but adding a pointer and an integer makes sense:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列を&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、配列と整数を追加しても意味がないため（配列にプラス演算はありません）、配列からポインターへの減衰が発生しますが、ポインターと整数を追加することには意味があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d91f0db788d31e3ba270714f7e149455d1be1520" translate="yes" xml:space="preserve">
          <source>If you are done using an anonymous array, you have to release it back to the system:</source>
          <target state="translated">匿名配列の使用が終わったら、それをシステムに戻して解放しなければなりません。</target>
        </trans-unit>
        <trans-unit id="e9be23246f4db6859f24f143fdfa68db6666d4e3" translate="yes" xml:space="preserve">
          <source>If you are unfamiliar with the C declarator syntax, the parenthesis in the type &lt;code&gt;int(*)[8]&lt;/code&gt; are essential:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C宣言子の構文に慣れていない場合は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int(*)[8]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;型の括弧&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が不可欠です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="14c24b9c0b2d0257aaceb7cde0555b7a4f3c1769" translate="yes" xml:space="preserve">
          <source>If you feel something important is missing in this FAQ, write an answer and link it here as an additional part.</source>
          <target state="translated">このFAQで何か重要なことが欠けていると感じた場合は、回答を書いてここに追加でリンクしてください。</target>
        </trans-unit>
        <trans-unit id="d5bcb303a25ffde92cc0974fd617bffe13104ab4" translate="yes" xml:space="preserve">
          <source>If, on the other hand, &lt;code&gt;x&lt;/code&gt; denotes a &lt;em&gt;pointer&lt;/em&gt; to the first (or any other) element of an array, then array-to-pointer decay is not necessary, because the pointer on which &lt;code&gt;i&lt;/code&gt; is going to be added already exists:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一方、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; が&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列の最初の（またはその他の）要素への&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインター&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;示す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が追加される&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインターが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;既に存在する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、配列からポインターへの減衰は不要&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1ec50dff9162ea0c55c63f2ee2fedc58220b5d3c" translate="yes" xml:space="preserve">
          <source>In C++0x, arrays &lt;em&gt;can&lt;/em&gt; be initialized in the member initializer list thanks to &lt;a href=&quot;http://www.youtube.com/watch?v=uEqknlxXJfg&quot;&gt;uniform initialization&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 0xでは、&lt;/font&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=uEqknlxXJfg&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;均一な初期化&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;により、メンバー初期化子リストで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初期化&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でき&lt;/font&gt;&lt;/em&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2c1bdd707612ae097771a2db46f18f20e841ba75" translate="yes" xml:space="preserve">
          <source>In C, anonymous arrays are created via &lt;code&gt;malloc&lt;/code&gt; and friends. In C++, anonymous arrays are created using the &lt;code&gt;new T[size]&lt;/code&gt; syntax which returns a pointer to the first element of an anonymous array:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cでは、匿名配列は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;malloc&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;やその仲間を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;介して作成され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++では、匿名配列は、匿名配列&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の最初の要素へのポインタを返す&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new T[size]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構文を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用して作成され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="41b1d1fe662d24559c66cf35d58d5d091bc62661" translate="yes" xml:space="preserve">
          <source>In Windows 7 this compiles and links fine with both MinGW g++ 4.4.1 and
Visual C++ 10.0.</source>
          <target state="translated">Windows 7では、MinGW g++4.4.1とVisual C++10.0の両方でコンパイルして正常にリンクしています。</target>
        </trans-unit>
        <trans-unit id="437c03d1c28955b95b16ec11169a5605bc02a59a" translate="yes" xml:space="preserve">
          <source>In order to detect this error at run time you can do &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行時にこのエラーを検出するために、次のことができます...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="26eee36cf964126ee4dcb59852fa30dc17bf56fe" translate="yes" xml:space="preserve">
          <source>In that case, the remaining elements are &lt;a href=&quot;https://stackoverflow.com/questions/1613383/&quot;&gt;zero-initialized&lt;/a&gt;. Note that C++ allows an empty array initializer (all elements are zero-initialized), whereas C89 does not (at least one value is required). Also note that array initializers can only be used to &lt;em&gt;initialize&lt;/em&gt; arrays; they cannot later be used in assignments.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その場合、残りの要素は&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1613383/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ゼロで初期化されます&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++では空の配列初期化子（すべての要素はゼロで初期化されます）が許可されていますが、C89では許可されていません（少なくとも1つの値が必要です）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列イニシャライザを専用に使用することができることにも留意されたい&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初期化&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列を、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;後で割り当てに使用することはできません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d28f9a6d6ed85ab85596615272616028e68b524" translate="yes" xml:space="preserve">
          <source>In the following text, &quot;array&quot; means &quot;C array&quot;, not the class template &lt;code&gt;std::array&lt;/code&gt;. Basic knowledge of the C declarator syntax is assumed. Note that the manual usage of &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; as demonstrated below is extremely dangerous in the face of exceptions, but that is the topic of &lt;a href=&quot;https://stackoverflow.com/questions/712639/&quot;&gt;another FAQ&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次のテキストでは、「配列」はクラステンプレート&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ではなく「C配列」を意味し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C宣言子構文の基本的な知識があることを前提としています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下に示すよう&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;delete&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;手動で使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことは、例外に直面すると非常に危険ですが、これは&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/712639/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;別のFAQの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;トピックです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a5dcb9a46d4b13c3f0a33e51d890dc93adbc865" translate="yes" xml:space="preserve">
          <source>In this case, the array size is significant. Since writing a function that only accepts arrays of exactly 8 elements is of little use, programmers usually write such functions as templates:</source>
          <target state="translated">この場合,配列のサイズは重要です.きっちり8要素の配列しか受け付けない関数を書いてもあまり意味がないので、プログラマーは通常このような関数をテンプレートとして書きます。</target>
        </trans-unit>
        <trans-unit id="890a35e657b26ee90956dc55f869c0acaf541ebb" translate="yes" xml:space="preserve">
          <source>In-practice explanation: in &lt;code&gt;main.cpp&lt;/code&gt; the array is treated as a pointer, placed
at the same address as the array. For 32-bit executable this means that the first
&lt;code&gt;int&lt;/code&gt; value in the array, is treated as a pointer. I.e., in &lt;code&gt;main.cpp&lt;/code&gt; the
&lt;code&gt;numbers&lt;/code&gt; variable contains, or appears to contain, &lt;code&gt;(int*)1&lt;/code&gt;. This causes the
program to access memory down at very bottom of the address space, which is
conventionally reserved and trap-causing. Result: you get a crash.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際の説明：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main.cpp&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では、配列はポインターと同じように扱われ、配列と同じアドレスに配置されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;32ビット実行可能ファイルの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合、これは配列の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値がポインターとして扱われる&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことを意味し &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main.cpp&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では、 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;numbers&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変数に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(int*)1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が含まれているか、含まれているように見えます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これにより、プログラムはアドレス空間の最下部でメモリにアクセスします。これは、従来は予約されており、トラップを引き起こしていました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;結果：クラッシュします。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="070fe92341683cf9d092141bd709fad70875176e" translate="yes" xml:space="preserve">
          <source>In-the-formal explanation: the program has Undefined Behavior (UB), and instead
of crashing it can therefore just hang, or perhaps do nothing, or it
can send threating e-mails to the presidents of the USA, Russia, India,
China and Switzerland, and make Nasal Daemons fly out of your nose.</source>
          <target state="translated">形式的な説明:このプログラムには未定義の行動(UB)があり、クラッシュする代わりに、ハングアップしたり、何もしなかったり、アメリカ、ロシア、インド、中国、スイスの大統領に脅迫メールを送ったり、鼻から鼻の大魔神が飛び出すようにしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="c97bad7c68964c91e199c52d4f2f4a2d7be3c3fe" translate="yes" xml:space="preserve">
          <source>Indexing operator</source>
          <target state="translated">インデックス演算子</target>
        </trans-unit>
        <trans-unit id="608d106aeaf49a5d6d2d18e72fbb2975527e39df" translate="yes" xml:space="preserve">
          <source>Initialization is performed in ascending order. Note that the initial values depend on the element type &lt;code&gt;T&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初期化は昇順で行われます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初期値は要素タイプ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依存することに注意してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7a1ce46f618ab33d9bc54dcc4675dfdfc40bbc7b" translate="yes" xml:space="preserve">
          <source>It is also possible to specify the size and provide a shorter array initializer:</source>
          <target state="translated">サイズを指定して、より短い配列のイニシャライザを提供することも可能です。</target>
        </trans-unit>
        <trans-unit id="3d2fd5d37362f6b75096f1913050f5033ca3aaba" translate="yes" xml:space="preserve">
          <source>M:\count&amp;gt; _</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;M：\ count&amp;gt; _&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cdd64d56a86a26a498d6bbef6d3c1868cc754771" translate="yes" xml:space="preserve">
          <source>M:\count&amp;gt; g++ compile_time_detection.cpp</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;M：\ count&amp;gt; g ++ compile_time_detection.cpp&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bf9d1f82d43843cd09374cb46c7a3dcbd8fbc7d5" translate="yes" xml:space="preserve">
          <source>Main pitfall: the C idiom is not typesafe. For example, the code
&amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;主な落とし穴：Cイディオムはタイプセーフではありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、コード&amp;hellip;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ef5472faf1452242241b190fbf2f97ecd84ba6ea" translate="yes" xml:space="preserve">
          <source>Most programmers are familiar with named multidimensional arrays, but many are unaware of the fact that multidimensional array can also be created anonymously. Multidimensional arrays are often referred to as &quot;arrays of arrays&quot; or &quot;&lt;em&gt;true&lt;/em&gt; multidimensional arrays&quot;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ほとんどのプログラマーは名前付き多次元配列に精通していますが、多次元配列も匿名で作成できることを多くの人は知りません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;多次元配列は、「配列の配列」または「&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;真の&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;多次元配列」&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼ばれることがよくあります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="00762e90f2d0e1fc656e0809cb403c7716fbb355" translate="yes" xml:space="preserve">
          <source>Multidimensional arrays</source>
          <target state="translated">多次元配列</target>
        </trans-unit>
        <trans-unit id="ad847916fde2cd7cb8d9547c74c3fccb05986bb9" translate="yes" xml:space="preserve">
          <source>Named arrays of pointers</source>
          <target state="translated">ポインタの名前付き配列</target>
        </trans-unit>
        <trans-unit id="5d38b7a1ca47e08bdd5d13e7b55118d97017de16" translate="yes" xml:space="preserve">
          <source>Named multidimensional arrays</source>
          <target state="translated">名前付き多次元配列</target>
        </trans-unit>
        <trans-unit id="eee6419b689f5d4600b5eb44117945feff22b904" translate="yes" xml:space="preserve">
          <source>Note how the pointer to the first element only points to a single integer (depicted as a small box), whereas the pointer to the entire array points to an array of 8 integers (depicted as a large box).</source>
          <target state="translated">最初の要素へのポインタが1つの整数を指しているのに対して(小さな箱で描かれています),配列全体へのポインタは8つの整数の配列を指していることに注意してください(大きな箱で描かれています).</target>
        </trans-unit>
        <trans-unit id="23ba020b1bef6697ee28252a1170fead955b8b56" translate="yes" xml:space="preserve">
          <source>Note that 2D grids such as the above are merely helpful visualizations. From the point of view of C++, memory is a &quot;flat&quot; sequence of bytes. The elements of a multidimensional array are stored in row-major order. That is, &lt;code&gt;connect_four[0][6]&lt;/code&gt; and &lt;code&gt;connect_four[1][0]&lt;/code&gt; are neighbors in memory. In fact, &lt;code&gt;connect_four[0][7]&lt;/code&gt; and &lt;code&gt;connect_four[1][0]&lt;/code&gt; denote the same element! This means that you can take multi-dimensional arrays and treat them as large, one-dimensional arrays:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記のような2Dグリッドは、単に視覚化に役立つことに注意してください。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++の観点から見ると、メモリはバイトの「フラットな」シーケンスです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;多次元配列の要素は行優先順で格納されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;connect_four[0][6]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;connect_four[1][0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はメモリ内のネイバーです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;connect_four[0][7]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;connect_four[1][0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は同じ要素を示しています！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、多次元配列を取り、それらを大きな1次元配列として扱うことができます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7186b877025b5d08bccafccf8a0b9683541aa2f2" translate="yes" xml:space="preserve">
          <source>Note that in the depicted case, &lt;code&gt;x&lt;/code&gt; is a pointer &lt;em&gt;variable&lt;/em&gt; (discernible by the small box next to &lt;code&gt;x&lt;/code&gt;), but it could just as well be the result of a function returning a pointer (or any other expression of type &lt;code&gt;T*&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;示されたケースで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はポインター&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変数&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;隣の小さなボックスで識別可能&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）ですが、ポインター（またはタイプ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他の式）を返す関数の結果である場合もあります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5e01e8bdf0e314ca975d17798f6f9fac1c741d43" translate="yes" xml:space="preserve">
          <source>Note that it is illegal to provide &lt;code&gt;&amp;amp;x[n]&lt;/code&gt; as the second argument since this is equivalent to &lt;code&gt;&amp;amp;*(x+n)&lt;/code&gt;, and the sub-expression &lt;code&gt;*(x+n)&lt;/code&gt; technically invokes &lt;a href=&quot;https://stackoverflow.com/questions/3144904/&quot;&gt;undefined behavior&lt;/a&gt; in C++ (but not in C99).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;x[n]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を2番目の引数として指定&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;することは不正であることに注意してください。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;*(x+n)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と同等&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;であり、部分式&lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(x+n)&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;技術&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3144904/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;にC ++で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;未定義の動作&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（ただしC99では&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ませ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ん） ）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4a783e015ec501739631e705c9f21aff6b055fac" translate="yes" xml:space="preserve">
          <source>Note that the array itself is still allocated as a single block in memory.</source>
          <target state="translated">配列自体はメモリ内の単一のブロックとして割り当てられていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="554d5b1a6dcb70e7921afec83e4b4971c2df9586" translate="yes" xml:space="preserve">
          <source>Note that the size is part of the type, that is, array types of different size are incompatible types that have absolutely nothing to do with each other. &lt;code&gt;sizeof(T[n])&lt;/code&gt; is equivalent to &lt;code&gt;n * sizeof(T)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サイズは型の一部であることに注意してください。つまり、異なるサイズの配列型は、互いにまったく関係のない互換性のない型です。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof(T[n])&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;n * sizeof(T)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と同等&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d4de64b4a294e1e1f832bbe75edd6afa90d315d2" translate="yes" xml:space="preserve">
          <source>Note that there is &lt;em&gt;no&lt;/em&gt; array-to-pointer decay going on here. Although evaluating &lt;code&gt;new int[size]&lt;/code&gt; does in fact create an &lt;em&gt;array&lt;/em&gt; of integers, the result of the expression &lt;code&gt;new int[size]&lt;/code&gt; is &lt;em&gt;already&lt;/em&gt; a pointer to a single integer (the first element), &lt;em&gt;not&lt;/em&gt; an array of integers or a pointer to an array of integers of unknown size. That would be impossible, because the static type system requires array sizes to be compile-time constants. (Hence, I did not annotate the anonymous array with static type information in the picture.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここでは&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列からポインタへの減衰&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はあり&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new int[size]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;評価&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すると実際に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は整数の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;作成されます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が、式&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new int[size]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すでに&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;単一の整数（最初の要素）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;へのポインターであり、整数の配列やポインターへのポインターではあり&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サイズが不明な整数の配列。静的型システムでは配列サイズをコンパイル時の定数にする必要があるため、これは不可能です。 （したがって、図の静的型情報で匿名配列に注釈を付けませんでした。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa3802c18f9d7df661ece56023d81fd4a5c43ad8" translate="yes" xml:space="preserve">
          <source>Note that this generates a view of the original multidimensional array. If you need a copy instead, you must create extra arrays and copy the data yourself:</source>
          <target state="translated">これは元の多次元配列のビューを生成することに注意してください。代わりにコピーが必要な場合は、余分な配列を作成して自分でデータをコピーしなければなりません。</target>
        </trans-unit>
        <trans-unit id="731accb3850c583ab5dab43550cbdd5a71aa446b" translate="yes" xml:space="preserve">
          <source>Note that you can only call such a function template with an actual array of integers, not with a pointer to an integer. The size of the array is automatically inferred, and for every size &lt;code&gt;n&lt;/code&gt;, a different function is instantiated from the template. You can also write &lt;a href=&quot;https://stackoverflow.com/questions/4759078/&quot;&gt;quite useful&lt;/a&gt; function templates that abstract from both the element type and from the size.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このような関数テンプレートは、整数へのポインタではなく、実際の整数の配列でのみ呼び出すことができることに注意してください。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列のサイズは自動的に推測され、サイズ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ごとに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;異なる関数がテンプレートからインスタンス化されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要素のタイプとサイズの両方から抽象化する&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4759078/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;非常に便利な&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数テンプレートを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;書くこともでき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="85d63e980e7422c247f8647e79d77a52c6d97e7f" translate="yes" xml:space="preserve">
          <source>OK, you&amp;rsquo;ve been told, or have found out yourself, that globals (namespace
scope variables that can be accessed outside the translation unit) are
Evil&amp;trade;. But did you know how truly Evil&amp;trade; they are? Consider the
program below, consisting of two files [main.cpp] and [numbers.cpp]:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;OK、グローバル（翻訳単位の外部からアクセスできる名前空間スコープ変数）はEvil&amp;trade;であると言われました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、それらがどれほど真にEvil&amp;trade;であるかを知っていましたか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2つのファイル[main.cpp]と[numbers.cpp]で構成される以下のプログラムを考えてみます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="53bde04906550009556f993b7806f8d76b8c6d5f" translate="yes" xml:space="preserve">
          <source>Obviously, anonymous arrays require more memory than named arrays due to the extra pointer that must be stored separately. (There is also some additional overhead on the free store.)</source>
          <target state="translated">明らかに、匿名配列は、個別に格納しなければならない余分なポインタのため、名前付き配列よりも多くのメモリを必要とします(フリーストアにもいくつかの追加のオーバーヘッドがあります)。(フリーストアにもいくつかの追加のオーバーヘッドがあります)。</target>
        </trans-unit>
        <trans-unit id="63fb417f29bfd9f2405ad6c79a04190fdd2d712c" translate="yes" xml:space="preserve">
          <source>On the first line, the compiler detects an assignment from a pointer to a pointer, which trivially succeeds. On the second line, it detects an assignment from an &lt;em&gt;array&lt;/em&gt; to a pointer. Since this is meaningless (but &lt;em&gt;pointer&lt;/em&gt; to pointer assignment makes sense), array-to-pointer decay kicks in as usual.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の行で、コンパイラーは、ポインターからポインターへの割り当てを検出します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2行目では、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;からポインタへの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;割り当てを検出&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは無意味です（ただし、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインター&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;からポインターへの割り当ては意味&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;があり&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）ので、配列からポインターへの減衰は通常どおり開始されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3b30f736895ab3c14d15df82c8709f3aa1fb3ea" translate="yes" xml:space="preserve">
          <source>One can always write the more verbose</source>
          <target state="translated">饒舌な方を書けばいい</target>
        </trans-unit>
        <trans-unit id="c4685ee8261138ace07d8fb78c91b3a94b27dd88" translate="yes" xml:space="preserve">
          <source>One important context in which an array does &lt;em&gt;not&lt;/em&gt; decay into a pointer to its first element is when the &lt;code&gt;&amp;amp;&lt;/code&gt; operator is applied to it. In that case, the &lt;code&gt;&amp;amp;&lt;/code&gt; operator yields a pointer to the &lt;em&gt;entire&lt;/em&gt; array, not just a pointer to its first element. Although in that case the &lt;em&gt;values&lt;/em&gt; (the addresses) are the same, a pointer to the first element of an array and a pointer to the entire array are completely distinct types:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の要素へのポインタに減衰&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ない&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;重要なコンテキストの1つ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演算子がそれに適用される場合です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その場合、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演算子は、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の要素へのポインターだけでなく&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;全体&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;へのポインターを生成します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その場合、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（アドレス）は同じですが、配列の最初の要素へのポインターと配列全体へのポインターは完全に異なる型です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="41e3330ec09c505432c9bd89998da5f0ce62c087" translate="yes" xml:space="preserve">
          <source>Otherwise, the default-constructor of &lt;code&gt;T&lt;/code&gt; initializes all the elements.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それ以外の場合、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; default-constructorは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての要素を初期化します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e1dd1f36b3d11a080ec32ab7967d3c72b1acb694" translate="yes" xml:space="preserve">
          <source>Parameter passing</source>
          <target state="translated">パラメータの受け渡し</target>
        </trans-unit>
        <trans-unit id="dd57df0504585da5013127cd2c481cb9a4d98a15" translate="yes" xml:space="preserve">
          <source>Pass by pointer</source>
          <target state="translated">ポインタによるパス</target>
        </trans-unit>
        <trans-unit id="a428f2745394276b3ef22fe8ce93840f03d517fe" translate="yes" xml:space="preserve">
          <source>Pass by reference</source>
          <target state="translated">リファレンスパス</target>
        </trans-unit>
        <trans-unit id="c5015408faa4e590c7a33664c84fb50fb239cff6" translate="yes" xml:space="preserve">
          <source>Please contact the application's support team for more information.</source>
          <target state="translated">詳しくはアプリのサポートチームまでお問い合わせください。</target>
        </trans-unit>
        <trans-unit id="886d0e716745d04046260e2fd4e01fbcdb9fbe82" translate="yes" xml:space="preserve">
          <source>Pointer arithmetic</source>
          <target state="translated">ポインタ演算</target>
        </trans-unit>
        <trans-unit id="27319e98c440e9f7e0dae34adba8c3b67a414d93" translate="yes" xml:space="preserve">
          <source>Programmers often confuse multidimensional arrays with arrays of pointers.</source>
          <target state="translated">プログラマはしばしば多次元配列とポインタの配列を混同します。</target>
        </trans-unit>
        <trans-unit id="0d5fda95e3940bc09dc1ccc22666813c0b54f73d" translate="yes" xml:space="preserve">
          <source>Ranges</source>
          <target state="translated">Ranges</target>
        </trans-unit>
        <trans-unit id="7976ce91c52fe87631d0a3d9dd7e9ac38cb29122" translate="yes" xml:space="preserve">
          <source>Related: macros do not respect scopes, so to avoid name collisions it can be a
good idea to use a name prefix, e.g. &lt;code&gt;MYLIB_STATIC_N_ITEMS&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関連：マクロはスコープを尊重しないため、名前の衝突を避けるために、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;MYLIB_STATIC_N_ITEMS&lt;/code&gt; などの&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;名前の接頭辞を使用することをお勧めします&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="845580eed354c30eedf70a4e23705439efbc345d" translate="yes" xml:space="preserve">
          <source>Since an &lt;code&gt;array&lt;/code&gt; decays to pointer to first element where needed, the
expression &lt;code&gt;sizeof(a)/sizeof(a[0])&lt;/code&gt; can also be written as
&lt;code&gt;sizeof(a)/sizeof(*a)&lt;/code&gt;. It means the same, and no matter how it&amp;rsquo;s
written it is the &lt;strong&gt;C idiom&lt;/strong&gt; for finding the number elements of array.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以来、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に必要な最初の要素へのポインタに減衰、発現&lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof(a)/sizeof(a[0])&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のように書くこともでき &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof(a)/sizeof(*a)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それは同じことを意味し、どのように記述されていても、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列の数値要素を見つけるため&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cイディオム&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fdd3bf58590a288a7255f35b31aa883fdb12ea5a" translate="yes" xml:space="preserve">
          <source>Since arrays themselves cannot be passed by value, usually a pointer to their first element is passed by value instead. This is often called &quot;pass by pointer&quot;. Since the size of the array is not retrievable via that pointer, you have to pass a second parameter indicating the size of the array (the classic C solution) or a second pointer pointing after the last element of the array (the C++ iterator solution):</source>
          <target state="translated">配列自体は値で渡すことができないので、通常は最初の要素へのポインタが代わりに値で渡されます。これはしばしば「ポインタを渡す」と呼ばれます。配列のサイズはそのポインタからは取得できないので、配列のサイズを示す 2 番目のパラメータを渡すか (古典的な C の解決策)、配列の最後の要素の後を指す 2 番目のポインタを渡す必要があります (C++のイテレータの解決策)。</target>
        </trans-unit>
        <trans-unit id="b44febfd34ec6b3b83a2f3ed4ef55e29031984dc" translate="yes" xml:space="preserve">
          <source>Since each line is allocated individually now, viewing 2D arrays as 1D arrays does not work anymore.</source>
          <target state="translated">各行に個別に割り当てられるようになったため、2次元配列を1次元配列として見ることができなくなりました。</target>
        </trans-unit>
        <trans-unit id="2f0cf1c959967562a9ea9857497386e60eb8610f" translate="yes" xml:space="preserve">
          <source>Since in this case the number of elements in the array initializer is equal to the size of the array, specifying the size manually is redundant. It can automatically be deduced by the compiler:</source>
          <target state="translated">この場合、配列イニシャライザの要素数は配列のサイズと等しいので、手動でサイズを指定するのは冗長です。コンパイラが自動的に推論してくれます。</target>
        </trans-unit>
        <trans-unit id="76da052225a0e136a9e4e987d8dabb6143458717" translate="yes" xml:space="preserve">
          <source>Since the syntax &lt;code&gt;*(x+i)&lt;/code&gt; is a bit clumsy, C++ provides the alternative syntax &lt;code&gt;x[i]&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構文&lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(x+i)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は少し扱いに​​くいので、C ++は代替構文&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x[i]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;提供します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e02a2730b214f5417ece2b04ba144915d409379b" translate="yes" xml:space="preserve">
          <source>Since the types don't match, the program crashes when you run it.</source>
          <target state="translated">型が一致しないので、実行するとプログラムがクラッシュします。</target>
        </trans-unit>
        <trans-unit id="8441d3938f1ecea2e057daaaa95958eeb1304ca0" translate="yes" xml:space="preserve">
          <source>Static POD arrays are initialized &lt;em&gt;exactly once&lt;/em&gt;, and the initial values are &lt;em&gt;typically&lt;/em&gt; baked into the executable, in which case there is no initialization cost at runtime. This is not always the most space-efficient solution, however, and it is not required by the standard.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静的POD配列は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1回だけ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初期化され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、初期値は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通常&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行可能ファイルにベイク処理されます。この場合、実行時に初期化コストはかかりません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、これは常に最もスペース効率の良いソリューションであるとは限りません。また、標準では必須ではありません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5fc6d78bfd1b3cbec3f64c6df4199384d6e606cb" translate="yes" xml:space="preserve">
          <source>Static arrays</source>
          <target state="translated">静的配列</target>
        </trans-unit>
        <trans-unit id="a0600c54cb97b541cf9c0e780ec5c24bde3f13bd" translate="yes" xml:space="preserve">
          <source>Static arrays (arrays living &quot;in the data segment&quot;) are local array variables defined with the &lt;code&gt;static&lt;/code&gt; keyword and array variables at namespace scope (&quot;global variables&quot;):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静的配列（「データセグメント内に存在する配列」）は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キーワードで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;定義されたローカル配列変数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と名前空間スコープの配列変数（「グローバル変数」）です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="774c4e05a928152894fd8eee023448f0bd571034" translate="yes" xml:space="preserve">
          <source>Static arrays without an array initializer are zero-initialized prior to any further potential initialization.</source>
          <target state="translated">配列のイニシャライザを持たない静的な配列は、それ以上の潜在的な初期化の前にゼロ初期化されます。</target>
        </trans-unit>
        <trans-unit id="d719c3b1e68cccdda79bb9c4f8e7142667d5e8af" translate="yes" xml:space="preserve">
          <source>Static non-POD arrays are initialized the &lt;em&gt;first time&lt;/em&gt; the flow of control passes through their definition. In the case of local static arrays, that may never happen if the function is never called.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静的な非POD配列は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、制御のフローがその定義を&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初めて&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通過する&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ときに&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初期化され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ローカル静的配列の場合、関数が呼び出されない場合、これは起こりません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc398be3b099870d82f0233260c92cd7fe247e52" translate="yes" xml:space="preserve">
          <source>The compiler rewrites &lt;code&gt;int const a[7]&lt;/code&gt; to just &lt;code&gt;int const a[]&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンパイラーは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int const a[7]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int const a[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;書き換え&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b4182f7f5ae56ba8db00f357997716a8374d56d" translate="yes" xml:space="preserve">
          <source>The compiler rewrites &lt;code&gt;int const a[]&lt;/code&gt; to &lt;code&gt;int const* a&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンパイラーは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int const a[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int const* a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;書き換え&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="686df3b8d217ab698b2df0c1fd71552a18fd8b54" translate="yes" xml:space="preserve">
          <source>The compiler will silently generate a pointer to the first element of an array whenever it is deemed useful, that is, whenever an operation would fail on an array but succeed on a pointer. This conversion from array to pointer is trivial, since the resulting pointer &lt;em&gt;value&lt;/em&gt; is simply the address of the array. Note that the pointer is &lt;em&gt;not&lt;/em&gt; stored as part of the array itself (or anywhere else in memory). &lt;strong&gt;An array is not a pointer.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンパイラーは、有用であると見なされる場合、つまり、操作が配列で失敗してもポインターで成功する場合は常に、配列の最初の要素へのポインターを暗黙的に生成します。結果のポインター&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は単に配列のアドレスである&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、配列からポインターへのこの変換&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は簡単です。ポインタは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列自体（またはメモリ内の他の場所）の一部として格納され&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ない&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことに注意してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列はポインターではありません。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a5270e2af134e0442ff7692e26dd083472328919" translate="yes" xml:space="preserve">
          <source>The compilers are fully within their rights to not diagnose this error,
because C++11 &amp;sect;3.5/10 says, about the requirement of compatible types
for the declarations,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 11&amp;sect;3.5/ 10は、宣言の互換性のある型の要件について、&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b3c4bbf6e6b3262be7b6e0ac48d15ee8ea7abffa" translate="yes" xml:space="preserve">
          <source>The definition of the indexing operator leads to the following interesting equivalence:</source>
          <target state="translated">割り出し演算子の定義は、次のような興味深い等価性をもたらします。</target>
        </trans-unit>
        <trans-unit id="8f0c75d53a53f4088924e02576b1ea2942b86f60" translate="yes" xml:space="preserve">
          <source>The following ASCII art depicts the memory layout if the size is computed as 8 at runtime:</source>
          <target state="translated">以下のASCIIアートは、実行時にサイズが8として計算された場合のメモリレイアウトを表しています。</target>
        </trans-unit>
        <trans-unit id="554e227d03dda0191d05be5936967bfe2f42dec4" translate="yes" xml:space="preserve">
          <source>The following ASCII art explains this distinction:</source>
          <target state="translated">この区別については、以下のアスキーアートで説明されています。</target>
        </trans-unit>
        <trans-unit id="b9ad5ce162146034fe3468d816b1762bdc3db4ef" translate="yes" xml:space="preserve">
          <source>The only &quot;connection&quot; between &lt;code&gt;T[n]&lt;/code&gt; and &lt;code&gt;T[m]&lt;/code&gt; is that both types can implicitly be &lt;em&gt;converted&lt;/em&gt; to &lt;code&gt;T*&lt;/code&gt;, and the result of this conversion is a pointer to the first element of the array. That is, anywhere a &lt;code&gt;T*&lt;/code&gt; is required, you can provide a &lt;code&gt;T[n]&lt;/code&gt;, and the compiler will silently provide that pointer:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;T[n]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T[m]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;間の唯一の「接続」&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、両方のタイプを暗黙的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt; &lt;code&gt;T*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変換&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;できること&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;であり、この変換の結果は、配列の最初の要素へのポインターです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、&lt;/font&gt; &lt;code&gt;T*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;が必要な&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場所であればどこでも&lt;/font&gt; &lt;code&gt;T[n]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;提供でき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、コンパイラーは暗黙的にそのポインターを提供します。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4900a0a1149898ae253be24f75d402af0b30da85" translate="yes" xml:space="preserve">
          <source>The pitfall: as of July 2015 the above compiles with MinGW-64 5.1.0 with
&lt;code&gt;-pedantic-errors&lt;/code&gt;, and,
testing with the online compilers at &lt;a href=&quot;http://gcc.godbolt.org/&quot;&gt;gcc.godbolt.org/&lt;/a&gt;, also with clang 3.0
and clang 3.2, but not with clang 3.3, 3.4.1, 3.5.0, 3.5.1, 3.6 (rc1) or
3.7 (experimental). And important for the Windows platform, it does not compile
with Visual C++ 2015. The reason is a C++11/C++14 statement about use of
references in &lt;code&gt;constexpr&lt;/code&gt; expressions:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;落とし穴：2015年7月現在、上記&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;a href=&quot;http://gcc.godbolt.org/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-pedantic &lt;/font&gt;&lt;/a&gt;&lt;/font&gt; &lt;code&gt;-pedantic-errors&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を指定してMinGW-64 5.1.0でコンパイルし &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;gcc.godbolt.org /&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オンラインコンパイラを使用してテストします&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。また、clang 3.0およびclang 3.2を使用しますが、clangは使用しません。 3.3、3.4.1、3.5.0、3.5.1、3.6（rc1）、または3.7（実験的）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Windowsプラットフォームにとって重要であり、Visual C ++ 2015でコンパイルされません。理由は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;式&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;での参照の使用に関するC ++ 11 / C ++ 14ステートメントです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f45126b06ef23df5ffbfdd6efaae59b432607f7f" translate="yes" xml:space="preserve">
          <source>The runtime error detection is better than no detection, but it wastes a little
processor time, and perhaps much more programmer time. Better with detection at
compile time! And if you're happy to not support arrays of local types with C++98,
then you can do that:</source>
          <target state="translated">ランタイムエラー検出は、検出しないよりはマシですが、少しのプロセッサ時間を無駄にします。コンパイル時に検出した方が良いでしょう! そして、C++98でローカル型の配列をサポートしないことに満足しているのであれば、そうすればいいのです。</target>
        </trans-unit>
        <trans-unit id="a649050a2be06c8e39adac5d67332961492c1c85" translate="yes" xml:space="preserve">
          <source>The same paragraph details the variation that is allowed:</source>
          <target state="translated">同一の段落では、許可されているバリエーションを詳細に説明しています。</target>
        </trans-unit>
        <trans-unit id="8fdd2f0bef4d6e460fb6f1f2ec6ebe3c770034da" translate="yes" xml:space="preserve">
          <source>The same situation arises in classes and is maybe more obvious. A pointer to an object and a pointer to its first data member have the same &lt;em&gt;value&lt;/em&gt; (the same address), yet they are completely distinct types.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じ状況がクラスで発生し、おそらくもっと明白です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトへのポインターとその最初のデータメンバーへのポインターは同じ&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（同じアドレス）を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;持ってい&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらは完全に異なる型です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e7540274c5dbcf87fc080dd7cc42e01b3035b4fe" translate="yes" xml:space="preserve">
          <source>This FAQ is split into five parts:</source>
          <target state="translated">このFAQは5つのパートに分かれています。</target>
        </trans-unit>
        <trans-unit id="75cbb85f170e4859016dc81df1a331401263eebc" translate="yes" xml:space="preserve">
          <source>This allowed variation does not include declaring a name as an array in one
translation unit, and as a pointer in another translation unit.</source>
          <target state="translated">この許可されたバリエーションには、ある翻訳ユニットでは名前を配列として宣言し、別の翻訳ユニットではポインタとして宣言することは含まれません。</target>
        </trans-unit>
        <trans-unit id="c3cbef9e71473e0b651623890cdcceb97160ae6b" translate="yes" xml:space="preserve">
          <source>This application has requested the Runtime to terminate it in an unusual way.</source>
          <target state="translated">このアプリケーションは、ランタイムに異常終了を要求しています。</target>
        </trans-unit>
        <trans-unit id="77a8211a815c79e630f954b14acfcbbff4945d7c" translate="yes" xml:space="preserve">
          <source>This conversion is known as &quot;array-to-pointer decay&quot;, and it is a major source of confusion. The size of the array is lost in this process, since it is no longer part of the type (&lt;code&gt;T*&lt;/code&gt;). Pro: Forgetting the size of an array on the type level allows a pointer to point to the first element of an array of &lt;em&gt;any&lt;/em&gt; size. Con: Given a pointer to the first (or any other) element of an array, there is no way to detect how large that array is or where exactly the pointer points to relative to the bounds of the array. &lt;a href=&quot;https://stackoverflow.com/questions/4261074/&quot;&gt;Pointers are extremely stupid&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この変換は「配列からポインタへの減衰」として知られており、混乱の主な原因です。配列のサイズは、タイプ（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一部ではなくなったため、このプロセスで失われ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。メリット：型レベルで配列のサイズを忘れると、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;任意の&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サイズの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列の最初の要素を指すポインターが許可&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;されます。欠点：配列の最初の（またはその他の）要素へのポインターが指定されている場合、その配列の大きさや、ポインターが配列の境界に対して正確にどこを指しているかを検出する方法はありません。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4261074/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインタは非常に愚か&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a4348c73ecd32e24327bad7c0bda07f2fded0659" translate="yes" xml:space="preserve">
          <source>This is how a named multidimensional array looks like in memory:</source>
          <target state="translated">これは、名前付き多次元配列がメモリ上でどのように見えるかを示しています。</target>
        </trans-unit>
        <trans-unit id="fdfc624bf57b66e2918a46588b9dcca5300477c3" translate="yes" xml:space="preserve">
          <source>This is how an anonymous multidimensional array looks like in memory:</source>
          <target state="translated">無名の多次元配列がメモリ上ではこのようになっています。</target>
        </trans-unit>
        <trans-unit id="ede415bd1cfcb19839ab828b1f1b520817e906b1" translate="yes" xml:space="preserve">
          <source>This is more flexible than what true array assignment could provide because it is possible to copy slices of larger arrays into smaller arrays.
&lt;code&gt;std::copy&lt;/code&gt; is usually specialized for primitive types to give maximum performance. It is unlikely that &lt;code&gt;std::memcpy&lt;/code&gt; performs better. If in doubt, measure.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、大きな配列のスライスを小さな配列にコピーできるため、真の配列割り当てよりも柔軟です。 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::copy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は通常、プリミティブ型に特化して最大のパフォーマンスを提供します。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::memcpy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パフォーマンスが向上する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことはほとんどありません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;疑わしい場合は、測定してください。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a81aa85761c51a0de5661013b69548fe3e215386" translate="yes" xml:space="preserve">
          <source>This is the only solution that works with element types that have no default constructor.</source>
          <target state="translated">これは、デフォルトのコンストラクタを持たない要素タイプで動作する唯一のソリューションです。</target>
        </trans-unit>
        <trans-unit id="f883fd467cbb1529780034400816e1198b388651" translate="yes" xml:space="preserve">
          <source>To deal with collections that can be non-arrays one needs the overloadability of an
&lt;code&gt;n_items&lt;/code&gt; function, but also, for compile time use one needs a compile time
representation of the array size. And the classic C++03 solution, which works fine
also in C++11 and C++14, is to let the function report its result not as a value
but via its function result &lt;em&gt;type&lt;/em&gt;. For example like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列以外のコレクションを処理するには、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;n_items&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オーバーロード &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;機能が必要ですが、コンパイル時に配列サイズのコンパイル時の表現が必要です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、C ++ 11およびC ++ 14でも正常に機能する従来のC ++ 03ソリュ​​ーションは、関数に結果を値としてではなく、関数の結果の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;型を&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;介して報告させること&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、次のようになります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="86ccc751b475ca0db70475e824206e924ea35910" translate="yes" xml:space="preserve">
          <source>Unfortunately, you can also provide a size in an array parameter which is silently ignored by the compiler. That is, the following three signatures are exactly equivalent, as indicated by the compiler errors:</source>
          <target state="translated">残念ながら、配列パラメータにサイズを指定することもできますが、これはコンパイラによって静かに無視されます。つまり、以下の3つのシグネチャは、コンパイラのエラーが示すように、まったく同じものです。</target>
        </trans-unit>
        <trans-unit id="987ac6859eb610ba381637e374a761e25c6a0958" translate="yes" xml:space="preserve">
          <source>When using named multidimensional arrays, &lt;em&gt;all&lt;/em&gt; dimensions must be known at compile time:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;名前付き多次元配列を使用する場合、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次元がコンパイル時に既知である必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="037941813c24acca926890ecb0bb3d7c1d72ad7b" translate="yes" xml:space="preserve">
          <source>With C++11 and later it's natural, but as you'll see dangerous!, to
replace the C++03 function</source>
          <target state="translated">C++11 以降では当然のことですが、おわかりのように危険です! C++03 の関数を</target>
        </trans-unit>
        <trans-unit id="89f756335068da1d48636a9fe82e0a3f5bd23361" translate="yes" xml:space="preserve">
          <source>With C++11 you can use this also for arrays of local type, and it's the type safe
&lt;strong&gt;C++ idiom&lt;/strong&gt; for finding the number of elements of an array.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 11では、これをローカルタイプの配列にも使用できます。これは、配列&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の要素数を見つけるための&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タイプセーフな &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++イディオム&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="18a241c5629454bfac48aee554b037322204406c" translate="yes" xml:space="preserve">
          <source>With anonymous multidimensional arrays, all dimensions &lt;em&gt;except the first&lt;/em&gt; must be known at compile time:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;匿名の多次元配列で&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、最初の&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次元&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を除く&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての次元が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンパイル時に認識されている必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b0e6bf7cf1415d98e09ee516a0a8f2f1e3d5ef8f" translate="yes" xml:space="preserve">
          <source>With deep C experience it&amp;rsquo;s natural to write &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;深いCの経験があれば、書くのは当然です&amp;hellip;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0903eff36ec8b3650ef143d2b41f698fea3c7cd9" translate="yes" xml:space="preserve">
          <source>You can overcome the restriction of fixed width by introducing another level of indirection.</source>
          <target state="translated">別のレベルのインダイレクトを導入することで、固定幅の制約を克服することができます。</target>
        </trans-unit>
        <trans-unit id="9cbd8f05852ef038c494a761f689310e77a9157b" translate="yes" xml:space="preserve">
          <source>You can think of the compiler as rewriting &lt;code&gt;T p[]&lt;/code&gt; to &lt;code&gt;T *p&lt;/code&gt;&lt;strong&gt;in the context of parameter lists only&lt;/strong&gt;. This special rule is partly responsible for the whole confusion about arrays and pointers. In every other context, declaring something as an array or as a pointer makes a &lt;em&gt;huge&lt;/em&gt; difference.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンパイラ&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、パラメータリストのコンテキストでのみ&lt;/font&gt;&lt;/strong&gt;&lt;/font&gt; &lt;code&gt;T p[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T *p&lt;/code&gt; &lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;書き換えると考えることができます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この特別なルールは、配列とポインタに関する全体的な混乱の原因の1つです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他のすべてのコンテキストでは、何かを配列またはポインタとして宣言すると、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;大きな&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;違いが生じます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1aece31962ca91ece9ad614074408dff8ca56f74" translate="yes" xml:space="preserve">
          <source>You must release each anonymous array exactly once and then never touch it again afterwards. Not releasing it at all results in a memory leak (or more generally, depending on the element type, a resource leak), and trying to release it multiple times results in undefined behavior. Using the non-array form &lt;code&gt;delete&lt;/code&gt; (or &lt;code&gt;free&lt;/code&gt;) instead of &lt;code&gt;delete[]&lt;/code&gt; to release the array is also &lt;a href=&quot;https://stackoverflow.com/questions/1612031/&quot;&gt;undefined behavior&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それぞれの匿名配列を1回だけ解放し、その後は再び触れないでください。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;まったく解放しないとメモリリークが発生し（より一般的には、要素タイプによってはリソースリークが発生します）、複数回解放しようとすると、未定義の動作が発生します。&lt;/font&gt; &lt;code&gt;delete[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;非配列形式の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;delete&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;free&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）を&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用し&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;て配列を解放することも、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1612031/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;未定義の動作&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7cf4dca388e375295b617def54235d06f1f18486" translate="yes" xml:space="preserve">
          <source>an &lt;em&gt;id-expression&lt;/em&gt; that refers to a variable or data member of reference type
  unless the reference has a preceding initialization and either</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照に先行する初期化と以下のいずれかがない限り、参照タイプの変数またはデータメンバーを参照&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;id式&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ee5a0cb7c4a9d8e5aaef6186e3dca85b7a1c4c63" translate="yes" xml:space="preserve">
          <source>array creation and initialization</source>
          <target state="translated">配列の作成と初期化</target>
        </trans-unit>
        <trans-unit id="6915828ba027c236180d6e8c4ba69d8413c5d95d" translate="yes" xml:space="preserve">
          <source>arrays on the type level and accessing elements</source>
          <target state="translated">配列を型レベルで使用し、要素にアクセスします。</target>
        </trans-unit>
        <trans-unit id="aed12379aa394fd233ce8de1dde42fadfbb8dae3" translate="yes" xml:space="preserve">
          <source>assignment and parameter passing</source>
          <target state="translated">代入とパラメータの受け渡し</target>
        </trans-unit>
        <trans-unit id="5e37194a585e4aee6d98b0399a5f22fd2cc761e0" translate="yes" xml:space="preserve">
          <source>common pitfalls when using arrays</source>
          <target state="translated">配列を使用する際の共通の落とし穴</target>
        </trans-unit>
        <trans-unit id="69b28d8d2e333e97a73be6ac4484ceb918b4ce92" translate="yes" xml:space="preserve">
          <source>compile_time_detection.cpp: In function 'void display(const int*)':</source>
          <target state="translated">compile_time_detection.cppを参照してください。関数 'void display(const int*)' で。</target>
        </trans-unit>
        <trans-unit id="ba91b6f0adec5d5575c2f50a5f21d1e358484f3c" translate="yes" xml:space="preserve">
          <source>compile_time_detection.cpp:14: error: no matching function for call to 'n_items(const int*&amp;amp;)'</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;compile_time_detection.cpp：14：エラー： 'n_items（const int *＆）'の呼び出しに一致する関数がありません&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c4d482013cc4cc18e80a64e5984427c90c12ed9" translate="yes" xml:space="preserve">
          <source>it is a non-static data member of an object whose lifetime began within
  the evaluation of e;</source>
          <target state="translated">e の評価内でライフタイムが始まったオブジェクトの非静的データメンバです。</target>
        </trans-unit>
        <trans-unit id="6bb2ba899277df8e9c8abaec677046b9e7febe4c" translate="yes" xml:space="preserve">
          <source>it is initialized with a constant expression or</source>
          <target state="translated">は定数式で初期化されるか</target>
        </trans-unit>
        <trans-unit id="aa0a88b7d54288b7f66de4f7d51b7f248e1c3534" translate="yes" xml:space="preserve">
          <source>multidimensional arrays and arrays of pointers</source>
          <target state="translated">多次元配列とポインタの配列</target>
        </trans-unit>
        <trans-unit id="8b843815899353680e28463b8efa687d68cc8a4f" translate="yes" xml:space="preserve">
          <source>passes a pointer to &lt;code&gt;N_ITEMS&lt;/code&gt;, and therefore most likely produces a wrong
result. Compiled as a 32-bit executable in Windows 7 it produces &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインタを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;N_ITEMS&lt;/code&gt; に渡す&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、おそらく誤った結果が生成されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Windows 7で32ビットの実行可能ファイルとしてコンパイルされると、&amp;hellip;が生成されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c30d6576bbcad8a1d310c146ea6af4cf8cc8fd26" translate="yes" xml:space="preserve">
          <source>where the significant change is the use of &lt;code&gt;constexpr&lt;/code&gt;, which allows
this function to produce a &lt;strong&gt;compile time constant&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで重要な変更は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;constexpr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の使用です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。これにより、この関数で&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンパイル時定数&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を生成できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8fcd25a39d2037183044a8897e9a5333d727fded" translate="yes" xml:space="preserve">
          <source>with</source>
          <target state="translated">with</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
