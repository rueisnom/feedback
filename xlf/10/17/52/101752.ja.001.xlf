<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/101752">
    <body>
      <group id="101752">
        <trans-unit id="02bf2147f49be0f82a17ad0a0d80e87267a2f579" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MERGE_HEAD&lt;/code&gt; is present when a merge is in progress.</source>
          <target state="translated">&lt;code&gt;MERGE_HEAD&lt;/code&gt; は、マージの進行中に存在します。</target>
        </trans-unit>
        <trans-unit id="ecef8f87034314627bd1cbff708e130c1a7f2c8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git merge --abort&lt;/code&gt; is equivalent to &lt;code&gt;git reset --merge&lt;/code&gt; when
  &lt;code&gt;MERGE_HEAD&lt;/code&gt; is present.</source>
          <target state="translated">&lt;code&gt;git merge --abort&lt;/code&gt; は、 &lt;code&gt;MERGE_HEAD&lt;/code&gt; が存在する場合の &lt;code&gt;git reset --merge&lt;/code&gt; --mergeと同等です。</target>
        </trans-unit>
        <trans-unit id="284a0f707b5508c1419922a42fe50638c69c623b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset&lt;/code&gt; should do the equivalent of &lt;code&gt;svn revert&lt;/code&gt;, that is, discard your unwanted changes.</source>
          <target state="translated">&lt;code&gt;git reset&lt;/code&gt; は &lt;code&gt;svn revert&lt;/code&gt; と同等のことを行います。つまり、不要な変更を破棄します。</target>
        </trans-unit>
        <trans-unit id="e87048bc0d037c41ab6ae1f0375a015d0a6a963c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;.git\index.lock&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;.git\index.lock&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="59156d56f3ee2cf8fe10ef54186e17dc320e3df2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sourcetree&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Sourcetree&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="df0f0090a24082d1353e139667cbd879cef89ee9" translate="yes" xml:space="preserve">
          <source>Abort the current conflict resolution process, and try to reconstruct
  the pre-merge state.</source>
          <target state="translated">現在の紛争解決プロセスを中止し、マージ前の状態を再構築しようとします。</target>
        </trans-unit>
        <trans-unit id="8c30b0197f322ac327dc1621d7ad9f56aaca47e9" translate="yes" xml:space="preserve">
          <source>After a failed merge, when there is no &lt;code&gt;MERGE_HEAD&lt;/code&gt;, the failed merge can be undone with &lt;code&gt;git reset --merge&lt;/code&gt;, but not necessarily with &lt;code&gt;git merge --abort&lt;/code&gt;. &lt;strong&gt;They are not only old and new syntax for the same thing&lt;/strong&gt;.</source>
          <target state="translated">マージが失敗した後、 &lt;code&gt;MERGE_HEAD&lt;/code&gt; がない場合、失敗したマージは &lt;code&gt;git reset --merge&lt;/code&gt; で元に戻すことができますが、必ずしも &lt;code&gt;git merge --abort&lt;/code&gt; で元に戻すことはできません。 &lt;strong&gt;それらは同じものの新旧の構文だけではありません&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="791fb8b21d51a3802fba1fa40b7239e498e590ab" translate="yes" xml:space="preserve">
          <source>Also, as @Michael Johnson mentions, if your git version is &amp;gt;= 1.7.4, you can also use &lt;code&gt;git merge --abort&lt;/code&gt;.</source>
          <target state="translated">また、@ Michael Johnsonが言及しているように、gitのバージョンが1.7.4以上の場合は、 &lt;code&gt;git merge --abort&lt;/code&gt; を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="10e3f9dc1bfd1fe88ec5ffb63ae62a9e25199a5b" translate="yes" xml:space="preserve">
          <source>Also, regarding uncommitted changes when starting a merge:</source>
          <target state="translated">また、マージ開始時のコミットされていない変更について。</target>
        </trans-unit>
        <trans-unit id="21d475caf7346dfbafa92d4d7ff7e6c3e0b21f4a" translate="yes" xml:space="preserve">
          <source>An alternative, which preserves the state of the working copy is:</source>
          <target state="translated">作業コピーの状態を保持する代替案があります。</target>
        </trans-unit>
        <trans-unit id="712e1ef96c2bd52e8daeabd348d4d40e752f9cf3" translate="yes" xml:space="preserve">
          <source>As always, make sure you have no uncommitted changes before you start a merge.</source>
          <target state="translated">いつものように、マージを開始する前にコミットされていない変更がないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="517132e5238a7bbb5ebb8b3aecd7b22187b1e124" translate="yes" xml:space="preserve">
          <source>Because you not commit your merge, then just double click on another branch (which mean checkout it) and when sourcetree ask you about discarding all changes then agree :)</source>
          <target state="translated">マージをコミットしていないので、別のブランチをダブルクリックして(つまりチェックアウトして)、sourcetree がすべての変更を破棄するかどうかを尋ねてきたら、同意してください :)</target>
        </trans-unit>
        <trans-unit id="6856177af5d074efd83139576b4a743e3354e6e3" translate="yes" xml:space="preserve">
          <source>Beware that &lt;code&gt;git revert&lt;/code&gt; means something very different to, say, &lt;code&gt;svn revert&lt;/code&gt; - in Subversion the revert will discard your (uncommitted) changes, returning the file to the current version from the repository, whereas &lt;code&gt;git revert&lt;/code&gt; &quot;undoes&quot; a commit.</source>
          <target state="translated">&lt;code&gt;git revert&lt;/code&gt; は、たとえば &lt;code&gt;svn revert&lt;/code&gt; とは非常に異なる意味を持つことに注意してください。Subversionでは、revertは（コミットされていない）変更を破棄し、ファイルをリポジトリから現在のバージョンに &lt;code&gt;git revert&lt;/code&gt; ますが、 git revertはコミットを「 元に戻します 」。</target>
        </trans-unit>
        <trans-unit id="9d718f64dd39792294a0b1602f30d3f419b0db66" translate="yes" xml:space="preserve">
          <source>But this has since been removed, as explained in &lt;a href=&quot;http://marc.info/?l=git&amp;amp;m=121637513604413&amp;amp;w=2&quot;&gt;this message by Junio Hamano&lt;/a&gt; (the Git maintainer).  As noted in &lt;a href=&quot;http://marc.info/?l=git&amp;amp;m=121637513604413&amp;amp;w=2&quot;&gt;the link&lt;/a&gt;, instead you would do this:</source>
          <target state="translated">しかし、 &lt;a href=&quot;http://marc.info/?l=git&amp;amp;m=121637513604413&amp;amp;w=2&quot;&gt;このメッセージで&lt;/a&gt;説明されているように、これは削除されました（GitメンテナーであるJunano Hamano ）。 &lt;a href=&quot;http://marc.info/?l=git&amp;amp;m=121637513604413&amp;amp;w=2&quot;&gt;リンク&lt;/a&gt;に記載されているように、代わりに次のようにします。</target>
        </trans-unit>
        <trans-unit id="8af8b6481056400c3f47cfe5e1b7e48a179e5514" translate="yes" xml:space="preserve">
          <source>Comments suggest that &lt;code&gt;git reset --merge&lt;/code&gt; is an alias for &lt;code&gt;git merge --abort&lt;/code&gt;. It is worth noticing that &lt;code&gt;git merge --abort&lt;/code&gt; is only equivalent to &lt;code&gt;git reset --merge&lt;/code&gt; given that a &lt;code&gt;MERGE_HEAD&lt;/code&gt; is present. This can be read in the git help for merge command.</source>
          <target state="translated">コメントは &lt;code&gt;git reset --merge&lt;/code&gt; が &lt;code&gt;git merge --abort&lt;/code&gt; のエイリアスであることを示唆しています。 &lt;code&gt;git merge --abort&lt;/code&gt; が存在する場合 、 git merge --abortは &lt;code&gt;git reset --merge&lt;/code&gt; と同等であることは注目に値します。 これはgit help for mergeコマンドで読むことができます。</target>
        </trans-unit>
        <trans-unit id="1e9035b2a397e9705bd18a9bbd63a789d1459e36" translate="yes" xml:space="preserve">
          <source>File [cut paste to some other location in case of recovery] and then enter any of below command depending on which version you want.</source>
          <target state="translated">ファイルを[復旧時には別の場所に切り貼り]してから、どのバージョンにするかによって以下のコマンドを入力します。</target>
        </trans-unit>
        <trans-unit id="6162a78e6a90b00b5719d7e90b8593b6f0fe7353" translate="yes" xml:space="preserve">
          <source>For an unmerged file in a conflict git makes available the common base, local and remote versions of the file in the index. (This is where they are read from for use in a 3-way diff tool by &lt;code&gt;git mergetool&lt;/code&gt;.) You can use &lt;code&gt;git show&lt;/code&gt; to view them.</source>
          <target state="translated">競合するマージされていないファイルの場合、gitはインデックス内のファイルの共通のベースバージョン、ローカルバージョン、リモートバージョンを利用できるようにします。 （これは &lt;code&gt;git mergetool&lt;/code&gt; による3者間差分ツールで使用するために読み込まれる場所です。） &lt;code&gt;git show&lt;/code&gt; を使用して表示できます。</target>
        </trans-unit>
        <trans-unit id="70c30d0ff4f890495962cdea5521d118b0d1c16e" translate="yes" xml:space="preserve">
          <source>For scenario like, I did &lt;code&gt;git fetch&lt;/code&gt; and &lt;code&gt;git pull&lt;/code&gt;, then realized that upstream branch was not master branch, which resulted in unwanted conflicts.</source>
          <target state="translated">のようなシナリオでは、私は &lt;code&gt;git fetch&lt;/code&gt; と &lt;code&gt;git pull&lt;/code&gt; を実行しましたが、上流のブランチはマスターブランチではないことに気づき、不要な競合が発生した。</target>
        </trans-unit>
        <trans-unit id="152d61ea299f8a95ffd8c070d5fd1ebe6ec651a5" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-merge.html&quot;&gt;git merge man page&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-merge.html&quot;&gt;git merge manページから&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fe4e4175fe2e48f2a0198f83b0274ede8a6bc38f" translate="yes" xml:space="preserve">
          <source>Git itself shows you the solution when you are in this type of trouble and run the git status command.</source>
          <target state="translated">Git自体がこのようなトラブル時の解決策を示してくれるので、git statusコマンドを実行してみましょう。</target>
        </trans-unit>
        <trans-unit id="d24f776256db00dcd3875bf4049b55a993429d31" translate="yes" xml:space="preserve">
          <source>Hope that helps!!!</source>
          <target state="translated">役に立つといいな!</target>
        </trans-unit>
        <trans-unit id="d19245bcbed4cfa8a6542877bf6c4347e22a9ebf" translate="yes" xml:space="preserve">
          <source>Hope this will help people.</source>
          <target state="translated">これが人々の助けになることを願っています。</target>
        </trans-unit>
        <trans-unit id="140247c3e0474069eaa356bb3b86594837cb4f0b" translate="yes" xml:space="preserve">
          <source>I found the following worked for me (revert a single file to pre-merge state):</source>
          <target state="translated">私は以下の方法で動作することを発見しました(単一ファイルをマージ前の状態に戻す)。</target>
        </trans-unit>
        <trans-unit id="51de8ea84ac791d95b2ba99ea72abc343085651d" translate="yes" xml:space="preserve">
          <source>I generally advise against this, because it is effectively like merging in Subversion as it throws away the branch relationships in the following commit.</source>
          <target state="translated">一般的には、これは Subversion でのマージと同じようなもので、次のコミットでのブランチの関係を捨てることになるので、これはお勧めしません。</target>
        </trans-unit>
        <trans-unit id="9174b79d94c70dc57d9e2d4ae0932fe7c0e37483" translate="yes" xml:space="preserve">
          <source>I know that the other version of the file is good and that mine is bad so all my changes should be abandoned. How can I do this?</source>
          <target state="translated">他のバージョンが良くて、私のは悪いので、私の変更はすべて放棄されるべきであることを知っています。どうすればいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="1588f966e4811a83f9bedfeb0fceb34e605ba7d7" translate="yes" xml:space="preserve">
          <source>I ran into a merge conflict. How can I abort the merge</source>
          <target state="translated">マージの競合が発生しました。マージを中止するには</target>
        </trans-unit>
        <trans-unit id="c825979616374dd915934597924a0aaa5f5637f7" translate="yes" xml:space="preserve">
          <source>I think it's &lt;code&gt;git reset&lt;/code&gt; you need.</source>
          <target state="translated">必要な &lt;code&gt;git reset&lt;/code&gt; だと思います。</target>
        </trans-unit>
        <trans-unit id="61df000cfdc04e4a9db7b39a7bce3514385a9c8e" translate="yes" xml:space="preserve">
          <source>I used &lt;code&gt;git pull&lt;/code&gt; and had a merge conflict:</source>
          <target state="translated">私は &lt;code&gt;git pull&lt;/code&gt; を使用し、マージの競合が発生しました：</target>
        </trans-unit>
        <trans-unit id="df726c65ada3d8014e213aa4ceb535292539e815" translate="yes" xml:space="preserve">
          <source>If there were uncommitted worktree changes present when the merge
  started, &lt;code&gt;git merge --abort&lt;/code&gt; will in some cases be unable to
  reconstruct these changes. It is therefore recommended to always
  commit or stash your changes before running git merge.</source>
          <target state="translated">マージの開始時にコミットされていないワークツリーの変更があった場合、 &lt;code&gt;git merge --abort&lt;/code&gt; はこれらの変更を再構築できない場合があります。 したがって、git mergeを実行する前に、常に変更をコミットまたは隠しておくことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="709ed61ed3d36eeac04045a5085be3e024e9706c" translate="yes" xml:space="preserve">
          <source>If you end up with merge conflict and doesn't have anything to commit, but still a merge error is being displayed. After applying all the below mentioned commands,</source>
          <target state="translated">マージが競合してしまい、何もコミットするものがないのに、それでもマージエラーが表示されてしまう場合。以下のコマンドをすべて適用した後</target>
        </trans-unit>
        <trans-unit id="4e7c2ea3e42b3ee2935f64e0268799a6c6084059" translate="yes" xml:space="preserve">
          <source>If you have changes you don't want to commit before starting a merge, just &lt;code&gt;git stash&lt;/code&gt; them  before the merge and &lt;code&gt;git stash pop&lt;/code&gt; after finishing the merge or aborting it.</source>
          <target state="translated">マージを開始する前にコミットしたくない変更がある場合は、マージの前に &lt;code&gt;git stash&lt;/code&gt; し、マージの終了または中止後に &lt;code&gt;git stash pop&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="4538bb07a0823cf18e35dba0b2a42e38d6e8137c" translate="yes" xml:space="preserve">
          <source>If your git version is &amp;gt;= 1.6.1, you can use &lt;code&gt;git reset --merge&lt;/code&gt;.</source>
          <target state="translated">gitバージョンが1.6.1以上の場合は、 &lt;code&gt;git reset --merge&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="3ff60ef513e21845e9f61b33db2c5db7d630cc27" translate="yes" xml:space="preserve">
          <source>In this particular use case, you don't really want to abort the merge, just resolve the conflict in a particular way.</source>
          <target state="translated">この特定のユースケースでは、マージを中止するのではなく、特定の方法で競合を解決するだけです。</target>
        </trans-unit>
        <trans-unit id="f5a7b1165a98d22b34e8577ac1da1faa418a6971" translate="yes" xml:space="preserve">
          <source>Its so simple.</source>
          <target state="translated">それはとてもシンプルです。</target>
        </trans-unit>
        <trans-unit id="ad24a9cbfde531af2a5bab0a12512b5fb9520cf8" translate="yes" xml:space="preserve">
          <source>Older versions of git allowed you to use the &quot;theirs&quot; merge strategy:</source>
          <target state="translated">古いバージョンの git では、&quot;theirs&quot; マージ戦略を使うことができました。</target>
        </trans-unit>
        <trans-unit id="506b2f062b32ae7c597d33e1474db6ab8de30b56" translate="yes" xml:space="preserve">
          <source>Or, with git &amp;gt;= 1.6.1:</source>
          <target state="translated">または、git&amp;gt; = 1.6.1の場合：</target>
        </trans-unit>
        <trans-unit id="e5693d1039874e81ca26a165144490fc9c80bb23" translate="yes" xml:space="preserve">
          <source>Personally, I find &lt;code&gt;git reset --merge&lt;/code&gt; much more powerful for scenarios similar to the described one, and failed merges in general.</source>
          <target state="translated">個人的には、私は &lt;code&gt;git reset --merge&lt;/code&gt; を説明したシナリオと同様のシナリオではるかに強力にし、一般的にマージの失敗を見つけました。</target>
        </trans-unit>
        <trans-unit id="1985998030bf657d21706a20543a7b89c6583a70" translate="yes" xml:space="preserve">
          <source>Please remove</source>
          <target state="translated">削除してください</target>
        </trans-unit>
        <trans-unit id="4b86fdbba1b8eda0d918103e45ed8516c5a7bcdc" translate="yes" xml:space="preserve">
          <source>Since Git 1.6.1.3 &lt;a href=&quot;http://git-scm.com/docs/git-checkout&quot;&gt;&lt;code&gt;git checkout&lt;/code&gt;&lt;/a&gt; has been able to checkout from either side of a merge:</source>
          <target state="translated">Git 1.6.1.3以降、 &lt;a href=&quot;http://git-scm.com/docs/git-checkout&quot;&gt; &lt;code&gt;git checkout&lt;/code&gt; &lt;/a&gt;はマージのどちらの側からでもチェックアウトできるようになりました：</target>
        </trans-unit>
        <trans-unit id="0590754c25162153993addb51d2d41624a9b3617" translate="yes" xml:space="preserve">
          <source>Since your &lt;code&gt;pull&lt;/code&gt; was unsuccessful then &lt;code&gt;HEAD&lt;/code&gt; (not &lt;code&gt;HEAD^&lt;/code&gt;) is the last &quot;valid&quot; commit on your branch:</source>
          <target state="translated">&lt;code&gt;pull&lt;/code&gt; が失敗したため、 &lt;code&gt;HEAD^&lt;/code&gt; ではなくHEADがブランチでの最後の「有効な」コミットになります。</target>
        </trans-unit>
        <trans-unit id="e023525efe3b907ee6060ad13ad488f7f489541f" translate="yes" xml:space="preserve">
          <source>The other piece you want is to let their changes over-ride your changes.</source>
          <target state="translated">もう一つは、彼らの変更をあなたの変更を上書きさせることです。</target>
        </trans-unit>
        <trans-unit id="36acba7173a71b452ad5b6cb475a79fab96d3e5a" translate="yes" xml:space="preserve">
          <source>The simplest way to resolve the conflict to use the remote version verbatim is:</source>
          <target state="translated">リモートバージョンをバーバティムで使用するための競合を解決する最も簡単な方法は</target>
        </trans-unit>
        <trans-unit id="47ca8db790a0d74e76056cd45b2f85f55c9394c8" translate="yes" xml:space="preserve">
          <source>There is no particular need to reset and perform a merge with a different strategy, either. The conflicts have been correctly highlighted by git and the requirement to accept the other sides changes is only for this one file.</source>
          <target state="translated">リセットして別の戦略でマージする必要も特にありません。衝突は git によって正しくハイライトされており、他方の変更を受け入れる必要があるのはこのファイルだけです。</target>
        </trans-unit>
        <trans-unit id="26625700ba33f98c435e1e5283ad998c9e568291" translate="yes" xml:space="preserve">
          <source>This reverted back without resetting my local changes.</source>
          <target state="translated">これは私のローカルの変更をリセットせずに元に戻しました。</target>
        </trans-unit>
        <trans-unit id="52c5a965d0a6ef20f8231b4355c016a7d4ac2374" translate="yes" xml:space="preserve">
          <source>git merge --abort is equivalent to git reset --merge when MERGE_HEAD is present.</source>
          <target state="translated">git merge --abort は、merge_head が存在する場合は git reset --merge と同じです。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
