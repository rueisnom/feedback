<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/1024847">
    <body>
      <group id="1024847">
        <trans-unit id="04eca2d86e336edfe107c929c2e59855b15899fa" translate="yes" xml:space="preserve">
          <source>&quot;Is it possible to add a key to a Python dictionary after it has been created? It doesn't seem to have an .add() method.&quot;</source>
          <target state="translated">&quot;파이썬 사전을 만든 후에 키를 추가 할 수 있습니까? .add () 메소드가없는 것 같습니다.&quot;</target>
        </trans-unit>
        <trans-unit id="4ab0ac8c9a73378934e80024d0570549356521d0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/questions/38987/how-can-i-merge-union-two-python-dictionaries-in-a-single-expression&quot;&gt;This popular question&lt;/a&gt; addresses &lt;em&gt;functional&lt;/em&gt; methods of merging dictionaries &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/38987/how-can-i-merge-union-two-python-dictionaries-in-a-single-expression&quot;&gt;이 인기있는 질문&lt;/a&gt; 은 사전 &lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 를 병합 하는 &lt;em&gt;기능적&lt;/em&gt; 방법을 다룹니다.</target>
        </trans-unit>
        <trans-unit id="ad001b0828fca5ae3c82625f31c6bb441ba469a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defaultdict&lt;/code&gt; can also be used with complex data types such as &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;defaultdict&lt;/code&gt; 는 &lt;code&gt;list&lt;/code&gt; 및 &lt;code&gt;set&lt;/code&gt; 과 같은 복잡한 데이터 유형과 함께 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b929177a76d46636bc59ee1a9414e08ccf23217" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_dict&lt;/code&gt; is now:</source>
          <target state="translated">&lt;code&gt;my_dict&lt;/code&gt; 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6e93c63524908f0f74096b8c3156a602a3753de3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new_params&lt;/code&gt; is equal to &lt;code&gt;{'a': 1, 'b': 2, 'c': 3}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;new_params&lt;/code&gt; 는 &lt;code&gt;{'a': 1, 'b': 2, 'c': 3}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8d1585b803e1652c6e2085fcbf2d21217dee1387" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;params&lt;/code&gt; is still equal to &lt;code&gt;{'a': 1, 'b': 2}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; 는 여전히 &lt;code&gt;{'a': 1, 'b': 2}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d501fe2570ed3293f58c5ce5460d711f502caa12" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: The first method above only works if the keys in &lt;code&gt;b&lt;/code&gt; are strings.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;참고 : 위의 첫 번째 방법은 &lt;code&gt;b&lt;/code&gt; 의 키가 문자열 인 경우에만 작동합니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2601d5077d58f1f6c225d2c1738c86f152c2d7a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In Python 3.5+ you can do:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Python 3.5 이상에서는 다음을 수행 할 수 있습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="73996e032b248c04ab8caa9f7c14f69e2df001c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; Python requires that you first add a sub</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 파이썬은 먼저 하위를 추가해야합니다</target>
        </trans-unit>
        <trans-unit id="3ccfff51da82250c6945871fe29c0806ff574c48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Output:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Output:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5018b70000138d5df7f921ebffdd2cac6a28885e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Python 2 equivalent is:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Python 2와 동등한 기능은 다음과 같습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a339136d5630eda985681c6701c00f1ea6b8f95e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To add or modify a single element&lt;/strong&gt;, the &lt;code&gt;b&lt;/code&gt; dictionary would contain only that one element...</source>
          <target state="translated">&lt;strong&gt;단일 요소를 추가하거나 수정하기&lt;/strong&gt; 위해 &lt;code&gt;b&lt;/code&gt; 사전에는 하나의 요소 만 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="da499b5301b989b6a1a605c94874f3c525420c09" translate="yes" xml:space="preserve">
          <source>Adding an element automatically initialises the list.</source>
          <target state="translated">요소를 추가하면 목록이 자동으로 초기화됩니다.</target>
        </trans-unit>
        <trans-unit id="683cea09edf080a37df4a34fb6508de828da5791" translate="yes" xml:space="preserve">
          <source>After either of these:</source>
          <target state="translated">다음 중 하나 후에</target>
        </trans-unit>
        <trans-unit id="ca0a4e48f5bd8b26fa85a737d2708df901169ec2" translate="yes" xml:space="preserve">
          <source>Another efficient way of doing this with the update method is with keyword arguments, but since they have to be legitimate python words, you can't have spaces or special symbols or start the name with a number, but many consider this a more readable way to create keys for a dict, and here we certainly avoid creating an extra unnecessary &lt;code&gt;dict&lt;/code&gt;:</source>
          <target state="translated">update 메소드를 사용 하여이 작업을 수행하는 또 다른 효율적인 방법은 키워드 인수를 사용하는 것입니다.하지만 합법적 인 파이썬 단어 여야하므로 공백이나 특수 기호를 사용하거나 숫자로 이름을 시작할 수 없지만 많은 사람들이이를 더 읽기 쉬운 방법으로 생각합니다 dict에 대한 키를 작성하려면 여기에서 불필요한 불필요한 &lt;code&gt;dict&lt;/code&gt; 를 작성하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="4c893d88e38b8da8202ff64ca99c0a9e5057064a" translate="yes" xml:space="preserve">
          <source>Best Practice 1: Subscript notation</source>
          <target state="translated">모범 사례 1 : 첨자 표기법</target>
        </trans-unit>
        <trans-unit id="ee37591de484a99eb48a9bc98bda86e813d9c8f2" translate="yes" xml:space="preserve">
          <source>Best Practice 2: The &lt;code&gt;update&lt;/code&gt; method - 2 ways</source>
          <target state="translated">모범 사례 2 : &lt;code&gt;update&lt;/code&gt; 방법-2 가지 방법</target>
        </trans-unit>
        <trans-unit id="82fd8d7e0bcfdd1da88305b692e30eb31d1cf0a4" translate="yes" xml:space="preserve">
          <source>Check if a key is already in dictionary</source>
          <target state="translated">키가 이미 사전에 있는지 확인</target>
        </trans-unit>
        <trans-unit id="f67c0362cd7b8147f13b2d5a76db3a64115a6abe" translate="yes" xml:space="preserve">
          <source>Create a dictionary from two lists</source>
          <target state="translated">두 목록에서 사전 만들기</target>
        </trans-unit>
        <trans-unit id="c318045ce8395ad18b41f4d3d8eeff8fb211aa5e" translate="yes" xml:space="preserve">
          <source>Creating a dictionary with initial values</source>
          <target state="translated">초기 값으로 사전 만들기</target>
        </trans-unit>
        <trans-unit id="007ef487c0ab13c7eba1f5da4ab8c155bcc1a2d0" translate="yes" xml:space="preserve">
          <source>Creating a merged dictionary without modifying originals</source>
          <target state="translated">원본을 수정하지 않고 병합 된 사전 만들기</target>
        </trans-unit>
        <trans-unit id="d926f36f38031abc15a68e74b97ef479550883ea" translate="yes" xml:space="preserve">
          <source>Creating a merged dictionary without modifying originals:</source>
          <target state="translated">원본을 수정하지 않고 병합 된 사전 만들기 :</target>
        </trans-unit>
        <trans-unit id="d1f247308a0e11faa03c3b75d469095dcbcd9bf3" translate="yes" xml:space="preserve">
          <source>Creating an empty dictionary</source>
          <target state="translated">빈 사전 만들기</target>
        </trans-unit>
        <trans-unit id="6c0b1ef1dfb363843aa061d29046a36c2fe18c2e" translate="yes" xml:space="preserve">
          <source>Deleting items in dictionary</source>
          <target state="translated">사전에서 항목 삭제</target>
        </trans-unit>
        <trans-unit id="e2f12086d0ce0d1bd023d0978333425bfbc88cb8" translate="yes" xml:space="preserve">
          <source>Example: Add a new entry to your dictionary &amp;amp; sub dictionary</source>
          <target state="translated">예 : 사전 및 하위 사전에 새 항목 추가</target>
        </trans-unit>
        <trans-unit id="c51d3114bf34ea5d9d02d882fbc1c15dde414d6a" translate="yes" xml:space="preserve">
          <source>Feel free to add more!</source>
          <target state="translated">더 추가하십시오!</target>
        </trans-unit>
        <trans-unit id="21b8e2c1ac3b0fa7f64e3918b7d05b6d8a91bfb5" translate="yes" xml:space="preserve">
          <source>For adding a single key, the accepted answer has less computational overhead.</source>
          <target state="translated">단일 키를 추가하는 경우 허용되는 답변의 계산 오버 헤드가 줄어 듭니다.</target>
        </trans-unit>
        <trans-unit id="9ce5b9ee6a88f9e23557639655e58e51344bc688" translate="yes" xml:space="preserve">
          <source>Gives:</source>
          <target state="translated">Gives:</target>
        </trans-unit>
        <trans-unit id="6bf08be80db6bb207abab39eaae33bda80c9e0de" translate="yes" xml:space="preserve">
          <source>Here are some of the more straightforward methods (tested in Python 3)...</source>
          <target state="translated">다음은 좀 더 간단한 방법입니다 (Python 3에서 테스트).</target>
        </trans-unit>
        <trans-unit id="7eeb65e3d0b9300bdfd81a2a351ceb19234b44e1" translate="yes" xml:space="preserve">
          <source>Here's another way that I didn't see here:</source>
          <target state="translated">여기에 보이지 않는 또 다른 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="c80ca74c688588bd09c7cd450bb9d84c48c140cc" translate="yes" xml:space="preserve">
          <source>How can I add new keys to a dictionary</source>
          <target state="translated">사전에 새 키를 추가하는 방법</target>
        </trans-unit>
        <trans-unit id="84aa9f6a9e0a85147606e49e1f706d1b73446c21" translate="yes" xml:space="preserve">
          <source>However, if you'd like to add, for example, thousands of new key-value pairs, you should consider using the &lt;code&gt;update()&lt;/code&gt; method.</source>
          <target state="translated">그러나 예를 들어 수천 개의 새로운 키-값 쌍을 추가하려면 &lt;code&gt;update()&lt;/code&gt; 메소드 사용을 고려해야합니다.</target>
        </trans-unit>
        <trans-unit id="f781565580385fe51694b451bc7ed3d85575bded" translate="yes" xml:space="preserve">
          <source>I feel like consolidating info about Python dictionaries:</source>
          <target state="translated">파이썬 사전에 대한 정보를 통합하고 싶습니다.</target>
        </trans-unit>
        <trans-unit id="fe9540b28ec3329620b845c15367febdc19cbf33" translate="yes" xml:space="preserve">
          <source>I think it would also be useful to point out Python's &lt;strong&gt;&lt;a href=&quot;https://docs.python.org/3/library/collections.html&quot;&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; module that consists of many useful dictionary subclasses and wrappers that simplify the &lt;strong&gt;addition and modification of data types in a dictionary&lt;/strong&gt;, specifically &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.defaultdict&quot;&gt;&lt;strong&gt;&lt;code&gt;defaultdict&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;:</source>
          <target state="translated">필자 &lt;strong&gt;는 사전에서 데이터 유형&lt;/strong&gt; 의 &lt;strong&gt;추가 및 수정&lt;/strong&gt; 을 단순화하는 많은 유용한 사전 서브 클래스와 래퍼로 구성된 Python의 &lt;strong&gt;&lt;a href=&quot;https://docs.python.org/3/library/collections.html&quot;&gt; &lt;code&gt;collections&lt;/code&gt; &lt;/a&gt;&lt;/strong&gt; 모듈을 지적하는 것이 유용 할 것이라고 생각합니다.</target>
        </trans-unit>
        <trans-unit id="58b953bf28537ef05b6330d05a69cdb056422cd2" translate="yes" xml:space="preserve">
          <source>If the key does not yet exist, &lt;code&gt;defaultdict&lt;/code&gt; assigns the value given (in our case &lt;code&gt;10&lt;/code&gt;) as the initial value to the dictionary (often used inside loops). This operation therefore does two things: it &lt;strong&gt;adds a new key to a dictionary (as per question), &lt;em&gt;and&lt;/em&gt; assigns the value if the key doesn't yet exist.&lt;/strong&gt; With the standard dictionary, this would have raised an error as the &lt;code&gt;+=&lt;/code&gt; operation is trying to access a value that doesn't yet exist:</source>
          <target state="translated">키가 아직 존재하지 않으면 &lt;code&gt;defaultdict&lt;/code&gt; 는 주어진 값 (이 경우 &lt;code&gt;10&lt;/code&gt; )을 사전에 초기 값으로 지정합니다 (종종 루프 내부에서 사용됨). 따라서이 작업은 두 가지 작업을 수행 &lt;strong&gt;합니다. 질문에 따라 사전에 새 키를 추가하고 키가없는 경우 값을 할당합니다.&lt;/strong&gt; 표준 사전을 사용하면 &lt;code&gt;+=&lt;/code&gt; 작업이 아직 존재하지 않는 값에 액세스하려고 할 때 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="34460f694884d22830583b7d0ecc808eac4cf38e" translate="yes" xml:space="preserve">
          <source>If you want to add a dictionary within a dictionary you can do it this way.</source>
          <target state="translated">사전 내에 사전을 추가하려면이 방법으로 사전을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1c28f910100ccbcd2b7d117b11137ad326d77bf" translate="yes" xml:space="preserve">
          <source>If you're not joining two dictionaries, but adding new key-value pairs to a dictionary, then using the subscript notation seems like the best way.</source>
          <target state="translated">두 개의 사전을 결합하지 않고 사전에 새 키-값 쌍을 추가하는 경우 아래 첨자 표기법을 사용하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="7c5a136df2e826799a0ed49363226be36f4e2af7" translate="yes" xml:space="preserve">
          <source>In fact, defining &lt;code&gt;__getitem__&lt;/code&gt; and &lt;code&gt;__setitem__&lt;/code&gt; methods is how you can make your own class support the  square bracket syntax. See &lt;a href=&quot;https://python.developpez.com/cours/DiveIntoPython/php/endiveintopython/object_oriented_framework/special_class_methods.php&quot;&gt;https://python.developpez.com/cours/DiveIntoPython/php/endiveintopython/object_oriented_framework/special_class_methods.php&lt;/a&gt;</source>
          <target state="translated">실제로 &lt;code&gt;__getitem__&lt;/code&gt; 및 &lt;code&gt;__setitem__&lt;/code&gt; 메소드를 정의하면 고유 클래스가 대괄호 구문을 지원할 수 있습니다. &lt;a href=&quot;https://python.developpez.com/cours/DiveIntoPython/php/endiveintopython/object_oriented_framework/special_class_methods.php&quot;&gt;https://python.developpez.com/cours/DiveIntoPython/php/endiveintopython/object_oriented_framework/special_class_methods.php를&lt;/a&gt; 참조 하십시오</target>
        </trans-unit>
        <trans-unit id="c3ca7494efc8866f48f970515cffc68077cede67" translate="yes" xml:space="preserve">
          <source>Inserting/Updating a single value</source>
          <target state="translated">단일 값 삽입 / 업데이트</target>
        </trans-unit>
        <trans-unit id="e17b244054d460d3ea34f1a148402b3a9f13a7e2" translate="yes" xml:space="preserve">
          <source>Inserting/Updating multiple values</source>
          <target state="translated">여러 값 삽입 / 업데이트</target>
        </trans-unit>
        <trans-unit id="ffa6d0b860c9583fcb4129c001e4584597a6cb91" translate="yes" xml:space="preserve">
          <source>Is it possible to add a key to a Python dictionary after it has been created?</source>
          <target state="translated">파이썬 사전을 만든 후에 키를 파이썬 사전에 추가 할 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="1f334bada45788eb2d25d0cbd1894b162eb9cf1d" translate="yes" xml:space="preserve">
          <source>It doesn't seem to have an &lt;code&gt;.add()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;.add()&lt;/code&gt; 메소드가없는 것 같습니다.</target>
        </trans-unit>
        <trans-unit id="9d212c65e43810ddf6d4d8cc17b2fd85a7520e22" translate="yes" xml:space="preserve">
          <source>Iterate through pairs in a dictionary</source>
          <target state="translated">사전에서 쌍을 반복</target>
        </trans-unit>
        <trans-unit id="89707e99a83e8fc10ba3e89a1267b2183fc91f51" translate="yes" xml:space="preserve">
          <source>Let's pretend you want to live in the immutable world and do NOT want to modify the original but want to create a new &lt;code&gt;dict&lt;/code&gt; that is the result of adding a new key to the original.</source>
          <target state="translated">불변의 세계에 살고 싶다고 가정하고 원본을 수정하고 싶지는 않지만 원본에 새 키를 추가 한 결과로 새로운 &lt;code&gt;dict&lt;/code&gt; 을 만들고자합니다.</target>
        </trans-unit>
        <trans-unit id="c05b3de09a182d983d2d192df85c7931241a87f8" translate="yes" xml:space="preserve">
          <source>Magic method, &lt;code&gt;__setitem__&lt;/code&gt;, and why it should be avoided</source>
          <target state="translated">매직 메소드 &lt;code&gt;__setitem__&lt;/code&gt; 과 피해야하는 이유</target>
        </trans-unit>
        <trans-unit id="a328da44292955eb3e07db8e7fb25d80212d3eff" translate="yes" xml:space="preserve">
          <source>New to Python&amp;nbsp;3.5</source>
          <target state="translated">Python 3.5를 처음 사용함</target>
        </trans-unit>
        <trans-unit id="4edb040613659daef3715e1286edccf82a09d7e1" translate="yes" xml:space="preserve">
          <source>New to Python&amp;nbsp;3.9</source>
          <target state="translated">Python 3.9의 새로운 기능</target>
        </trans-unit>
        <trans-unit id="cf20e08fc74dec1943b9c074404296220334d375" translate="yes" xml:space="preserve">
          <source>Reference: &lt;a href=&quot;https://stackoverflow.com/a/2255892/514866&quot;&gt;https://stackoverflow.com/a/2255892/514866&lt;/a&gt;</source>
          <target state="translated">참조 : &lt;a href=&quot;https://stackoverflow.com/a/2255892/514866&quot;&gt;https://stackoverflow.com/a/2255892/514866&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="65745abd95b26b4a2cfbaac4ad41ab7203838713" translate="yes" xml:space="preserve">
          <source>So many answers and still everybody forgot about the strangely named, oddly behaved, and yet still handy &lt;code&gt;dict.setdefault()&lt;/code&gt;</source>
          <target state="translated">너무 많은 답변과 여전히 모든 사람들이 이상하게 명명되고 이상하게 행동하지만 여전히 편리한 &lt;code&gt;dict.setdefault()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e800b8d845babd687813e13316500c664f8ed4e9" translate="yes" xml:space="preserve">
          <source>So now we have covered three Pythonic ways of updating a &lt;code&gt;dict&lt;/code&gt;.</source>
          <target state="translated">이제 우리는 &lt;code&gt;dict&lt;/code&gt; 을 업데이트하는 세 가지 파이썬 방식을 다루었습니다.</target>
        </trans-unit>
        <trans-unit id="34681cf08f50bb145828fce3cc070ced57636477" translate="yes" xml:space="preserve">
          <source>So we see that using the subscript notation is actually much faster than using &lt;code&gt;__setitem__&lt;/code&gt;. Doing the Pythonic thing, that is, using the language in the way it was intended to be used, usually is both more readable and computationally efficient.</source>
          <target state="translated">따라서 첨자 표기법을 사용하는 것이 실제로 &lt;code&gt;__setitem__&lt;/code&gt; 을 사용하는 것보다 훨씬 빠릅니다. 파이썬적인 일을하는 것, 즉 사용하려는 방식으로 언어를 사용하는 것은 일반적으로 더 읽기 쉽고 계산적으로 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="a656aa2af1115c832571c643fef51343b32d3de0" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;merge operator&lt;/em&gt;&lt;code&gt;|&lt;/code&gt; now works for dictionaries:</source>
          <target state="translated">&lt;em&gt;병합 연산자&lt;/em&gt; &lt;code&gt;|&lt;/code&gt; 이제 사전에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="6dda7832f9afb81c5410ec735df0a28b3a9ae560" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;update operator&lt;/em&gt;&lt;code&gt;|=&lt;/code&gt; now works for dictionaries:</source>
          <target state="translated">&lt;em&gt;업데이트 연산자&lt;/em&gt; &lt;code&gt;|=&lt;/code&gt; 이제 사전에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="a9dfb14f74f5ba23b1199b110fcc51c8b8dcb117" translate="yes" xml:space="preserve">
          <source>The above is using dictionary comprehension.</source>
          <target state="translated">위의 사전 이해를 사용하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="816376b6b1b0653e7c5b78705f0befc4d77dd9ac" translate="yes" xml:space="preserve">
          <source>The orthodox syntax is &lt;code&gt;d[key] = value&lt;/code&gt;, but if your keyboard is missing the square bracket keys you could do:</source>
          <target state="translated">정통 구문은 &lt;code&gt;d[key] = value&lt;/code&gt; 이지만 키보드에 대괄호 키가없는 경우 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b9db9819504a60edc52842254ca28854e4a72c00" translate="yes" xml:space="preserve">
          <source>There will be times when you don't want to modify the original (you only want the result of adding to the original). &lt;strong&gt;I find this a refreshing alternative to the following:&lt;/strong&gt;</source>
          <target state="translated">원본을 수정하지 않으려는 경우가 있습니다 (원본에 추가 한 결과 만 원함). &lt;strong&gt;나는 이것을 다음과 같은 상쾌한 대안으로 생각한다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fe9f9bb804c273ab92dd6fad89de2270c6f6a45f" translate="yes" xml:space="preserve">
          <source>There's another way of updating a &lt;code&gt;dict&lt;/code&gt; that you shouldn't use, which uses the &lt;code&gt;__setitem__&lt;/code&gt; method. Here's an example of how one might use the &lt;code&gt;__setitem__&lt;/code&gt; method to add a key-value pair to a &lt;code&gt;dict&lt;/code&gt;, and a demonstration of the poor performance of using it:</source>
          <target state="translated">&lt;code&gt;__setitem__&lt;/code&gt; 메소드를 사용하는 사용하지 말아야 할 &lt;code&gt;dict&lt;/code&gt; 를 업데이트하는 또 다른 방법이 있습니다. 다음은 &lt;code&gt;__setitem__&lt;/code&gt; 메소드를 사용하여 &lt;code&gt;dict&lt;/code&gt; 에 키-값 쌍을 추가하는 방법과이를 사용하는 성능이 좋지 않음을 보여주는 예입니다.</target>
        </trans-unit>
        <trans-unit id="7971e6a051104074fdae0f02322417b6eb5695a2" translate="yes" xml:space="preserve">
          <source>This</source>
          <target state="translated">This</target>
        </trans-unit>
        <trans-unit id="b60959ef74f05198ffbb9483003774741e2ce211" translate="yes" xml:space="preserve">
          <source>This is equivalent to...</source>
          <target state="translated">이것은 ...에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="6e2a7126f13d73c067c38ca4a0cf0150e9e85b91" translate="yes" xml:space="preserve">
          <source>This is particularly useful if you are working with dictionaries that always consist of the same data types or structures, for example a dictionary of lists.</source>
          <target state="translated">이는 항상 동일한 데이터 유형 또는 구조로 구성된 사전 (예 : 목록 사전)으로 작업하는 경우에 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="cac34963cbb5c84957e51d1bd950df84c8685bf7" translate="yes" xml:space="preserve">
          <source>This uses a new featrue called &lt;em&gt;dictionary unpacking&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;사전 언 패킹&lt;/em&gt; 이라는 새로운 기능을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="5f065f1bcd7e1060c98d49ceb25c6a1c6b0112b2" translate="yes" xml:space="preserve">
          <source>To add multiple keys simultaneously, use &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#dict.update&quot;&gt;&lt;code&gt;dict.update()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">여러 키를 동시에 추가하려면 &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#dict.update&quot;&gt; &lt;code&gt;dict.update()&lt;/code&gt; &lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="48d513119759c4eb5faabc0d8bea779ccd23f528" translate="yes" xml:space="preserve">
          <source>To demonstrate how and how not to use it, let's create an empty dict with the dict literal, &lt;code&gt;{}&lt;/code&gt;:</source>
          <target state="translated">사용법과 사용하지 않는 방법을 보여주기 위해 dict 리터럴 &lt;code&gt;{}&lt;/code&gt; 을 사용하여 빈 dict를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="2f82cbfa84fc78c67f3abbc2c4d07772fc65c2ba" translate="yes" xml:space="preserve">
          <source>To update this dict with a single new key and value, you can use &lt;a href=&quot;https://docs.python.org/2/reference/datamodel.html#the-standard-type-hierarchy&quot;&gt;the subscript notation (see Mappings here)&lt;/a&gt; that provides for item assignment:</source>
          <target state="translated">하나의 새 키와 값으로이 dict를 업데이트하려면 항목 할당을 제공 &lt;a href=&quot;https://docs.python.org/2/reference/datamodel.html#the-standard-type-hierarchy&quot;&gt;하는 아래 첨자 표기법 (여기에서 매핑 참조)&lt;/a&gt; 을 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="22cde883903efc2be312b6c06634b84c92a693bf" translate="yes" xml:space="preserve">
          <source>Update or add values for an existing dictionary</source>
          <target state="translated">기존 사전에 대한 값 업데이트 또는 추가</target>
        </trans-unit>
        <trans-unit id="f965363578a0a48ee84cf5d50bf813ecbd71ba83" translate="yes" xml:space="preserve">
          <source>We can also update the dict with multiple values efficiently as well using &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#dict.update&quot;&gt;the &lt;code&gt;update&lt;/code&gt; method&lt;/a&gt;.  We may be unnecessarily creating an extra &lt;code&gt;dict&lt;/code&gt; here, so we hope our &lt;code&gt;dict&lt;/code&gt; has already been created and came from or was used for another purpose:</source>
          <target state="translated">또한 &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#dict.update&quot;&gt; &lt;code&gt;update&lt;/code&gt; 메소드를&lt;/a&gt; 사용하여 여러 값으로 dict를 효율적으로 업데이트 할 수도 있습니다. 우리는 불필요하게 여분의 &lt;code&gt;dict&lt;/code&gt; 를 여기에서 만들 수 있으므로 &lt;code&gt;dict&lt;/code&gt; 이 이미 작성되어 다른 목적으로 사용되기를 바랍니다.</target>
        </trans-unit>
        <trans-unit id="6b1948cb734207d9dbf1fef75f11bea17febc51f" translate="yes" xml:space="preserve">
          <source>Without the use of &lt;code&gt;defaultdict&lt;/code&gt;, the amount of code to add a new element would be much greater and perhaps looks something like:</source>
          <target state="translated">&lt;code&gt;defaultdict&lt;/code&gt; 를 사용하지 않으면 새 요소를 추가하는 코드의 양이 훨씬 커지고 다음과 같이 보입니다.</target>
        </trans-unit>
        <trans-unit id="ad79e6455a72416a2adc86530d1fe884bda628e0" translate="yes" xml:space="preserve">
          <source>Yes it is possible, and it does have a method that implements this, but you don't want to use it directly.</source>
          <target state="translated">예, 가능하며이를 구현하는 메소드가 있지만 직접 사용하고 싶지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="b2c3f8dcd877c1fd5a3b17344b8da4eca0690a09" translate="yes" xml:space="preserve">
          <source>You can create one:</source>
          <target state="translated">하나를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="10b368798be3d1c50d80dd097441baa77fabe765" translate="yes" xml:space="preserve">
          <source>You can use the dictionary constructor and implicit expansion to reconstruct a dictionary. Moreover, interestingly, this method can be used to control the positional order during dictionary construction (&lt;a href=&quot;https://stackoverflow.com/q/39980323/325452&quot;&gt;post Python 3.6&lt;/a&gt;). &lt;a href=&quot;https://mail.python.org/pipermail/python-dev/2017-December/151283.html&quot;&gt;In fact, insertion order is guaranteed for Python 3.7 and above!&lt;/a&gt;</source>
          <target state="translated">사전 생성자와 암시 적 확장을 사용하여 사전을 재구성 할 수 있습니다. 또한 흥미롭게도,이 방법은 사전 구성 ( &lt;a href=&quot;https://stackoverflow.com/q/39980323/325452&quot;&gt;Python 3.6 이후)&lt;/a&gt; 동안 위치 순서를 제어하는 ​​데 사용될 수 있습니다. &lt;a href=&quot;https://mail.python.org/pipermail/python-dev/2017-December/151283.html&quot;&gt;실제로, 삽입 순서는 Python 3.7 이상에서 보장됩니다!&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e903b2f410053125931a305e99c0a07848b4c663" translate="yes" xml:space="preserve">
          <source>add dictionary key, value class.</source>
          <target state="translated">사전 키, 값 클래스를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="0e9d8b81c479b2fad669112b24581aa30f3d1d3c" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;my_dict&lt;/code&gt; is now:</source>
          <target state="translated">그리고 &lt;code&gt;my_dict&lt;/code&gt; 는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="720a99ba5cd7b3a8e07151db559bc4dbf2814558" translate="yes" xml:space="preserve">
          <source>basically just does this:</source>
          <target state="translated">기본적 으로이 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="bb3342ef80392218dd3ddd17d98bb5d8b32fe6d8" translate="yes" xml:space="preserve">
          <source>before adding entries.</source>
          <target state="translated">항목을 추가하기 전에.</target>
        </trans-unit>
        <trans-unit id="2fc0539c66d69447ca1dfc11b0014ae772488369" translate="yes" xml:space="preserve">
          <source>dict subclass that calls a factory function to supply missing values</source>
          <target state="translated">누락 된 값을 제공하기 위해 팩토리 함수를 호출하는 dict 서브 클래스</target>
        </trans-unit>
        <trans-unit id="7f53a68d324346fc8457a1665141697dcc97ee86" translate="yes" xml:space="preserve">
          <source>e.g.</source>
          <target state="translated">e.g.</target>
        </trans-unit>
        <trans-unit id="1dfd948319c95b0ad599608b513acea82f0dd1ed" translate="yes" xml:space="preserve">
          <source>first to check whether the key already exists</source>
          <target state="translated">키가 이미 존재하는지 먼저 확인</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="57f51543353d577af291dc9ea677b91a886b6e55" translate="yes" xml:space="preserve">
          <source>then you can add the new key and value</source>
          <target state="translated">새로운 키와 값을 추가 할 수 있습니다</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
