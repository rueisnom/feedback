<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/1085162">
    <body>
      <group id="1085162">
        <trans-unit id="23e42a6ef9c64a5546118f7117feb409e677b35e" translate="yes" xml:space="preserve">
          <source>. If no selection is made, the complete hunk is staged.</source>
          <target state="translated">. 선택하지 않으면 전체 덩어리가 준비됩니다.</target>
        </trans-unit>
        <trans-unit id="847948549067358fc7a4308fd567106f17add26d" translate="yes" xml:space="preserve">
          <source>... and then using the mentioned keys, (y/n etc), for choosing lines to be included in the commit.</source>
          <target state="translated">... 그리고 커밋에 포함될 줄을 선택하기 위해 언급 된 키 (y / n 등)를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="61de0379c7d819a87c04dbdac3b47a347b3ab611" translate="yes" xml:space="preserve">
          <source>... but for files already in you repository, there is, in s are much better off using --patch flag on the commit command directly (if you are using a recent enough version of git): 
&lt;code&gt;
git commit --patch filename.txt
&lt;/code&gt;</source>
          <target state="translated">...하지만 이미 저장소에있는 파일의 경우 commit 명령에서 직접 --patch 플래그를 사용하는 것이 훨씬 좋습니다 (최근 충분한 버전의 git을 사용하는 경우) : &lt;code&gt; git commit --patch filename.txt &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f3b72d5b73714422778fa475930c0069a912871" translate="yes" xml:space="preserve">
          <source>... or, again, the short-form 
&lt;code&gt;
git commit -p filename.txt
&lt;/code&gt;</source>
          <target state="translated">... 또는 짧은 형식의 &lt;code&gt; git commit -p filename.txt &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1a6f81aa83591a345f7d00fc226626c0579ba9de" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://git-cola.github.io/&quot;&gt;git-cola&lt;/a&gt; is a great GUI and also has this feature built-in. Just select the lines to stage and press</source>
          <target state="translated">&lt;a href=&quot;https://git-cola.github.io/&quot;&gt;git-cola&lt;/a&gt; 는 훌륭한 GUI 이며이 기능도 내장되어 있습니다. 스테이징 할 라인을 선택하고</target>
        </trans-unit>
        <trans-unit id="35441747290dcc3711db4cdec8c7cacff7f37e98" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/airblade/vim-gitgutter&quot;&gt;vim-gitgutter&lt;/a&gt; plugin can stage hunks without leaving vim editor using</source>
          <target state="translated">&lt;a href=&quot;https://github.com/airblade/vim-gitgutter&quot;&gt;vim-gitgutter&lt;/a&gt; 플러그인은 vim 편집기를 사용하지 않고 덩어리를 스테이징 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8903e3f3225494c415da330134b06696301cdc78" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/jjlee/git-meld-index&quot;&gt;git-meld-index&lt;/a&gt; -- quoting from the website:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/jjlee/git-meld-index&quot;&gt;git-meld-index-&lt;/a&gt; 웹 사이트에서 인용 :</target>
        </trans-unit>
        <trans-unit id="28b716c5bba7244cfb7516b371504adfe48cfc84" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;Intellij IDEA&lt;/a&gt; (and I guess all other products of the series) has built in support for partial commits since v2018.1</source>
          <target state="translated">&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;Intellij IDEA&lt;/a&gt; (및 시리즈의 다른 모든 제품)는 v2018 이후 부분 커밋을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="a3693c4c04984eaf771586cad4040aa423acf334" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git commit -v&lt;/code&gt; to view your commit while you edit the commit message.</source>
          <target state="translated">커밋 메시지를 편집하는 동안 커밋을 보려면 &lt;code&gt;git commit -v&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cb31642f605e0315309cc4b14fe75ddb68bfca5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git diff --staged&lt;/code&gt; to check that you staged the correct changes</source>
          <target state="translated">&lt;code&gt;git diff --staged&lt;/code&gt; 는 올바른 변경 사항을 준비 했는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="a300a432b7be1f62c0bfcf53665b08b13a0d8d89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset -p&lt;/code&gt; to unstage mistakenly added hunks</source>
          <target state="translated">&lt;code&gt;git reset -p&lt;/code&gt; 실수로 추가 한 덩어리를 스테이지 해제</target>
        </trans-unit>
        <trans-unit id="7554969efd8c83b8d600d8b9661de769b4581ce1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1. Hunk wise:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1. 현명한 척 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3ec47db25e3de53e6b5b4945d2a98c539eba18c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2. Line wise:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2. 현명한 선 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="34bd1c26971226d88394a22e3a5522039b11f6e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;3. If you want to stage the complete file except couple of lines:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;3. 몇 줄을 제외한 전체 파일을 준비하려면 다음을 수행하십시오.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="717533e2cf3df700e8aa4b35f4a2379b03d77f77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Caution:&lt;/em&gt;&lt;/strong&gt;&lt;em&gt; do not change the content of the file, this is not a good place to do so. Just change the operators of deleted or added lines.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;주의 :&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;파일 내용을 변경하지 마십시오. 이렇게하는 것은 좋지 않습니다.&lt;/em&gt; &lt;em&gt;삭제되거나 추가 된 라인의 연산자를 변경하십시오.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dcbfbc3d6aae516d0ed9d15c0444f8ac72f9abf0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;LEFT&lt;/strong&gt;: temporary directory contining files copied from your working tree</source>
          <target state="translated">&lt;strong&gt;LEFT&lt;/strong&gt; : 작업 트리에서 복사 한 파일을 포함하는 임시 디렉토리</target>
        </trans-unit>
        <trans-unit id="13c6f36292c01a823253f512a339ab42dfc2fe46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RIGHT&lt;/strong&gt;: temporary directory with the contents of the index. This also includes files that are not yet in the index but are modified or untracked in the working copy -- in this case you'll see the file contents from HEAD.</source>
          <target state="translated">&lt;strong&gt;RIGHT&lt;/strong&gt; : 인덱스 내용이있는 임시 디렉토리입니다. 여기에는 아직 색인에 없지만 작업 복사본에서 수정되거나 추적되지 않은 파일도 포함됩니다.이 경우 HEAD에서 파일 내용을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="372f60334aa5d8918e891d52c780ab816ff7ba23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Usage&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c767acbf8b9ca7f2b499bbb39aac7fce3d76c573" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;added content&lt;/strong&gt; 
             Added content is represented by lines beginning with &quot;+&quot;. You can
             prevent staging any addition lines by deleting them.</source>
          <target state="translated">&lt;strong&gt;추가 된 컨텐츠&lt;/strong&gt; 추가 된 컨텐츠는 &quot;+&quot;로 시작하는 줄로 표시됩니다. 추가 라인을 삭제하여 스테이징을 방지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f607b8d257c50df637d647fa28b123086e4be8d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;git gui&lt;/strong&gt; provides this functionality under the diff view. Just right click the line(s) you're interested in and you should see a &quot;stage this line to commit&quot; menu item.</source>
          <target state="translated">&lt;strong&gt;git gui&lt;/strong&gt; 는 diff보기에서이 기능을 제공합니다. 관심있는 행을 마우스 오른쪽 단추로 클릭하면 &quot;이 행을 커밋하여 스테이지&quot;메뉴 항목이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="8ba7739b3b0c26c77014375db0f4c8d5dad3926d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;modified content:&lt;/strong&gt; 
             Modified content is represented by &quot;-&quot; lines (removing the old
             content) followed by &quot;+&quot; lines (adding the replacement content).
             You can prevent staging the modification by converting &quot;-&quot; lines to
             &quot; &quot;, and removing &quot;+&quot; lines. Beware that modifying only half of the
             pair is likely to introduce confusing changes to the index.</source>
          <target state="translated">&lt;strong&gt;수정 된 내용 :&lt;/strong&gt; 수정 된 내용은 &quot;-&quot;줄 (이전 내용 제거)과 &quot;+&quot;줄 (대체 내용 추가)로 표시됩니다. &quot;-&quot;행을 &quot;&quot;로 변환하고 &quot;+&quot;행을 제거하면 수정 사항이 스테이징되지 않도록 할 수 있습니다. 쌍의 절반 만 수정하면 색인이 혼동 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f8bdb8133686a8ad60a0f2d2b9279d1a888e115" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;removed content:&lt;/strong&gt;
             Removed content is represented by lines beginning with &quot;-&quot;. You can
             prevent staging their removal by converting the &quot;-&quot; to a &quot; &quot;
             (space).</source>
          <target state="translated">&lt;strong&gt;제거 된 컨텐츠 :&lt;/strong&gt; 제거 된 컨텐츠는 &quot;-&quot;로 시작하는 행으로 표시됩니다. &quot;-&quot;를 &quot;&quot;(공백)으로 변환하여 제거가 준비되지 않도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9821869aa821996defeaba01e6c12538af610d55" translate="yes" xml:space="preserve">
          <source>Added content is represented by lines beginning with &quot;+&quot;. You can prevent staging any addition lines by deleting them.</source>
          <target state="translated">추가 된 내용은 &quot;+&quot;로 시작하는 줄로 표시됩니다. 추가 라인을 삭제하여 스테이징을 방지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a0bd44e9469f5b0a01c14c017e5f08be1f2e2eb4" translate="yes" xml:space="preserve">
          <source>Adding on a previous answer, if you prefer using the command line, entering &lt;code&gt;git add -e myfile&lt;/code&gt; gives you the choice to choose line by line what you want to commit because this command will open an editor with the differences, like so:</source>
          <target state="translated">이전 답변에 추가하고 명령 줄을 선호하는 경우 &lt;code&gt;git add -e myfile&lt;/code&gt; 을 입력하면 커밋하려는 항목을 한 줄씩 선택할 수 있습니다.이 명령은 다음과 같이 차이점이있는 편집기를 엽니 다.</target>
        </trans-unit>
        <trans-unit id="ace6e76e5b5dce58f294c1fa6d523113cc7f265a" translate="yes" xml:space="preserve">
          <source>Afterwards, you can use:</source>
          <target state="translated">이후에는 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6734f386df43dba1b5b934c1feb61c5334bd4d27" translate="yes" xml:space="preserve">
          <source>As &lt;a href=&quot;https://stackoverflow.com/a/1085191/340811&quot;&gt;one answer&lt;/a&gt; above shows, you can use 
&lt;code&gt;
git add --patch filename.txt
&lt;/code&gt;</source>
          <target state="translated">위의 &lt;a href=&quot;https://stackoverflow.com/a/1085191/340811&quot;&gt;답변에서 볼 수&lt;/a&gt; 있듯이 &lt;code&gt; git add --patch filename.txt &lt;/code&gt; 를 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="be21521ecb4c7d9c5c8691f8206a6ac37f252f2c" translate="yes" xml:space="preserve">
          <source>As you may known lines that start with &lt;code&gt;+&lt;/code&gt; are addtions, lines that start with &lt;code&gt;-&lt;/code&gt; are deletions. So:</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 로 시작하는 줄이 추가 인 것으로 알고 있듯이 &lt;code&gt;-&lt;/code&gt; 로 시작하는 줄은 삭제입니다. 그래서:</target>
        </trans-unit>
        <trans-unit id="ef56989526889384d7de34cfc717d71ed832fdec" translate="yes" xml:space="preserve">
          <source>Beside this, it provides other cool features like a diff sign column as in some modern IDEs</source>
          <target state="translated">이 외에도 일부 최신 IDE에서와 같이 diff sign column과 같은 다른 멋진 기능을 제공합니다</target>
        </trans-unit>
        <trans-unit id="5c0f00258f5a786db203a0a5065228f986e1abbe" translate="yes" xml:space="preserve">
          <source>Commit only part of a file in Git</source>
          <target state="translated">Git에서 파일의 일부만 커밋</target>
        </trans-unit>
        <trans-unit id="37d93ee3e64beb05ff2a0858ce87a460e62aef34" translate="yes" xml:space="preserve">
          <source>Edit the index (right hand side) until happy. Remember to save when needed.</source>
          <target state="translated">행복해질 때까지 색인 (오른쪽)을 편집하십시오. 필요할 때 저장하십시오.</target>
        </trans-unit>
        <trans-unit id="f434b2db17a1d7f01dbc67f0158ecbc3fe4be048" translate="yes" xml:space="preserve">
          <source>Every details about &lt;code&gt;git add&lt;/code&gt; are available on &lt;code&gt;git --help add&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;git add&lt;/code&gt; 에 대한 모든 세부 사항은 &lt;code&gt;git --help add&lt;/code&gt; 에서 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="07bb17d57bcd9c5e250639f163b7bbee5d78743c" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;http://atom.io&quot;&gt;Atom&lt;/a&gt; users, the package &lt;a href=&quot;https://github.com/atom/github&quot;&gt;github&lt;/a&gt; includes interactive staging, in the style of &lt;code&gt;git gui&lt;/code&gt;. For shortcuts see the package's &lt;a href=&quot;https://flight-manual.atom.io/using-atom/sections/github-package/&quot;&gt;documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://atom.io&quot;&gt;Atom&lt;/a&gt; 사용자의 경우 &lt;a href=&quot;https://github.com/atom/github&quot;&gt;github&lt;/a&gt; 패키지에는 &lt;code&gt;git gui&lt;/code&gt; 스타일의 대화식 스테이징이 포함됩니다. 바로 가기는 패키지 &lt;a href=&quot;https://flight-manual.atom.io/using-atom/sections/github-package/&quot;&gt;설명서를&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="40c81ad64f5f7bb1bc418d6564a82d4e98911ad5" translate="yes" xml:space="preserve">
          <source>For emacs there is also &lt;a href=&quot;http://github.com/chneukirchen/gitsum&quot;&gt;gitsum&lt;/a&gt;</source>
          <target state="translated">이맥스에는 &lt;a href=&quot;http://github.com/chneukirchen/gitsum&quot;&gt;gitsum&lt;/a&gt; 도 있습니다</target>
        </trans-unit>
        <trans-unit id="f0444bdcf76b5f9632e10b0404425cd7d186826c" translate="yes" xml:space="preserve">
          <source>For example, how could I commit only 15 lines out of 30 lines that have been changed in a file?</source>
          <target state="translated">예를 들어, 파일에서 변경된 30 줄 중 15 줄만 어떻게 커밋 할 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="2ba3f180baead898993201dbc26c96e533f80bbc" translate="yes" xml:space="preserve">
          <source>For those who use &lt;strong&gt;Git Extensions&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;힘내 확장&lt;/strong&gt; 을 사용하는 사람들을 위해 :</target>
        </trans-unit>
        <trans-unit id="59f3fba9fd6e62600e09e7c815ce8d4de4f1c35d" translate="yes" xml:space="preserve">
          <source>Here is a description of each option:</source>
          <target state="translated">각 옵션에 대한 설명은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="517a9b1840568ea22b08ea1f647231bed6e4e0ab" translate="yes" xml:space="preserve">
          <source>I believe that &lt;code&gt;git add -e myfile&lt;/code&gt; is the easiest way (my preference at least) since it simply opens a text editor and lets you choose which line you want to stage and which line you don't.
Regarding editing commands:</source>
          <target state="translated">&lt;code&gt;git add -e myfile&lt;/code&gt; 은 텍스트 편집기를 열고 스테이지하고 싶은 줄과 원하지 않는 줄을 선택할 수 있기 때문에 가장 쉬운 방법이라고 생각합니다. 편집 명령과 관련하여 :</target>
        </trans-unit>
        <trans-unit id="41704e4a48d4a2577d68697853205cb72ed1e6a3" translate="yes" xml:space="preserve">
          <source>I would strongly recommend using &lt;a href=&quot;https://www.sourcetreeapp.com/&quot;&gt;SourceTree&lt;/a&gt; from Atlassian. (It's free.) It makes this trivial. You can stage individual hunks of code or individual lines of code quickly and easily.</source>
          <target state="translated">Atlassian의 &lt;a href=&quot;https://www.sourcetreeapp.com/&quot;&gt;SourceTree&lt;/a&gt; 를 사용하는 것이 좋습니다. (무료) 이것은 사소한 일입니다. 개별 코드 덩어리 또는 개별 코드 줄을 빠르고 쉽게 스테이징 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c26e334cc417c71ced9e0e20b6e573d3a3a987e4" translate="yes" xml:space="preserve">
          <source>If it's on &lt;code&gt;Windows&lt;/code&gt; platform, in my opinion &lt;code&gt;git gui&lt;/code&gt; is very good tool to &lt;code&gt;stage&lt;/code&gt;/&lt;code&gt;commit&lt;/code&gt; few lines from &lt;code&gt;unstaged&lt;/code&gt; file</source>
          <target state="translated">그것이 &lt;code&gt;Windows&lt;/code&gt; 플랫폼에 있다면 내 생각에 &lt;code&gt;git gui&lt;/code&gt; 는 &lt;code&gt;stage&lt;/code&gt; 않은 파일에서 몇 줄을 준비 / &lt;code&gt;commit&lt;/code&gt; 하는 매우 좋은 도구입니다.</target>
        </trans-unit>
        <trans-unit id="f0aab2b8f69d3d6b7bb910a0606dbaeef0d9f5f5" translate="yes" xml:space="preserve">
          <source>If only part of hunk should be staged &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;vim-fugitive&lt;/a&gt;</source>
          <target state="translated">덩어리의 일부만 &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;vim-fugitive&lt;/a&gt; 스테이지해야하는 경우</target>
        </trans-unit>
        <trans-unit id="045ec0da0831cce15d8fd5cfea09e640da8232f3" translate="yes" xml:space="preserve">
          <source>If the file is not in the repository yet, you can first do &lt;code&gt;git add -N &amp;lt;filename&amp;gt;&lt;/code&gt;. Afterwards you can go on with &lt;code&gt;git add -p &amp;lt;filename&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">파일이 아직 저장소에 없으면 &lt;code&gt;git add -N &amp;lt;filename&amp;gt;&lt;/code&gt; 을 수행하십시오 . 그런 다음 &lt;code&gt;git add -p &amp;lt;filename&amp;gt;&lt;/code&gt; 으로 진행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="46738d37fe9a25b9ad51cf85eecd1df4c9f7d76e" translate="yes" xml:space="preserve">
          <source>If you are using vim, you may want to try the excellent plugin called &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;fugitive&lt;/a&gt;.</source>
          <target state="translated">vim을 사용하는 경우 &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;fugitive&lt;/a&gt; 라는 훌륭한 플러그인을 사용해보십시오.</target>
        </trans-unit>
        <trans-unit id="14388be9fdfad5e3d00b91139d94da29d1c8deaf" translate="yes" xml:space="preserve">
          <source>If you prefer doing it from GUI, you can use &lt;a href=&quot;http://git-scm.com/docs/git-gui&quot;&gt;git-gui&lt;/a&gt;. You can simply mark chunks which you want to have included in commit.  I personally find it easier than using &lt;code&gt;git add -i&lt;/code&gt;.  Other git GUIs, like QGit or GitX, might also have this functionality as well.</source>
          <target state="translated">GUI에서 선호한다면 &lt;a href=&quot;http://git-scm.com/docs/git-gui&quot;&gt;git-gui를&lt;/a&gt; 사용할 수 있습니다. 커밋에 포함하려는 청크를 간단히 표시 할 수 있습니다. 개인적으로 &lt;code&gt;git add -i&lt;/code&gt; 를 사용하는 것보다 쉽습니다. QGit 또는 GitX와 같은 다른 git GUI에도이 기능이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d0ffacab77b9308a3cf3697ac65536e8276d38cd" translate="yes" xml:space="preserve">
          <source>In a git repository, run:</source>
          <target state="translated">자식 저장소에서 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="af4c27a86b8f42b6d7e6b884b22d8573ed032c03" translate="yes" xml:space="preserve">
          <source>In the Commit window, select the file you want to partially commit, then select the text you want to commit in the right pane, then right-click on the selection and choose 'Stage selected lines' from the context menu.</source>
          <target state="translated">커밋 창에서 부분 커밋하려는 파일을 선택한 다음 오른쪽 창에서 커밋하려는 텍스트를 선택한 다음 선택을 마우스 오른쪽 단추로 클릭하고 상황에 맞는 메뉴에서 '선택한 줄 표시'를 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="44dc43e2735e0a17a8d0426f9b1117c8acf5f974" translate="yes" xml:space="preserve">
          <source>It's been 10 years since this question was asked. And I hope this answer will be useful to someone. As mentioned in the answer &lt;a href=&quot;https://stackoverflow.com/a/55326882/736149&quot;&gt;here&lt;/a&gt;, where GUI is not an option, Andrew Shadura's &lt;a href=&quot;https://github.com/andrewshadura/git-crecord&quot;&gt;crecord extension&lt;/a&gt; helps bring a ncurses window in which we can select the lines to commit.</source>
          <target state="translated">이 질문을받은 지 10 년이 지났습니다. 이 답변이 누군가에게 도움이 되길 바랍니다. GUI가 옵션이 아닌 &lt;a href=&quot;https://stackoverflow.com/a/55326882/736149&quot;&gt;여기&lt;/a&gt; 의 답변 에서 언급했듯이 Andrew Shadura의 &lt;a href=&quot;https://github.com/andrewshadura/git-crecord&quot;&gt;crecord 확장&lt;/a&gt; 은 커밋 할 줄을 선택할 수있는 ncurses 창을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="58668e7669fd564d99db5d581fcdb6a5618440b5" translate="yes" xml:space="preserve">
          <source>J</source>
          <target state="translated">J</target>
        </trans-unit>
        <trans-unit id="a7ee38bb7be4fc44198cb2685d9601dcf2b9f569" translate="yes" xml:space="preserve">
          <source>K</source>
          <target state="translated">K</target>
        </trans-unit>
        <trans-unit id="59b86486aed4edafd59a372a9da15c32460385f0" translate="yes" xml:space="preserve">
          <source>Like this:</source>
          <target state="translated">이처럼 :</target>
        </trans-unit>
        <trans-unit id="5573b67a2a0a6c0c6bdb8830a0a160f18532fc7f" translate="yes" xml:space="preserve">
          <source>Modern Git has also &lt;code&gt;git commit --interactive&lt;/code&gt; (and &lt;code&gt;git commit --patch&lt;/code&gt;, which is shortcut to patch option in interactive commit).</source>
          <target state="translated">최신 Git에는 &lt;code&gt;git commit --interactive&lt;/code&gt; (대화식 커밋의 패치 옵션 바로 가기 인 &lt;code&gt;git commit --patch&lt;/code&gt; )도 있습니다.</target>
        </trans-unit>
        <trans-unit id="00b61542d0211972bc61982931e3e8c50577c383" translate="yes" xml:space="preserve">
          <source>Modified content is represented by &quot;-&quot; lines (removing the old content) followed by &quot;+&quot; lines (adding the replacement content). You can prevent staging the modification by converting &quot;-&quot; lines to &quot; &quot;, and removing &quot;+&quot;
             lines. Beware that modifying only half of the pair is likely to introduce confusing changes to the index.</source>
          <target state="translated">수정 된 내용은 &quot;-&quot;줄 (이전 내용 제거)과 &quot;+&quot;줄 (대체 내용 추가)로 표시됩니다. &quot;-&quot;행을 &quot;&quot;로 변환하고 &quot;+&quot;행을 제거하면 수정 사항이 스테이징되지 않도록 할 수 있습니다. 쌍의 절반 만 수정하면 색인이 혼동 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bae9503f83a8e896d44b3571e2eb4a60a9fe1b2a" translate="yes" xml:space="preserve">
          <source>Much like jdsumsion's answer you can also stash your current work but then use a difftool like meld to pull selected changes from the stash. That way you can even edit the hunks manually very easy, which is a bit of a pain when in &lt;code&gt;git add -p&lt;/code&gt;:</source>
          <target state="translated">jdsumsion의 답변과 마찬가지로 현재 작업을 숨길 수 있지만 meld와 같은 difftool을 사용하여 숨김에서 선택한 변경 사항을 가져옵니다. 그렇게하면 수동으로 쉽게 덩어리를 편집 할 수도 있습니다 &lt;code&gt;git add -p&lt;/code&gt; 에서 약간 고통 스럽습니다.</target>
        </trans-unit>
        <trans-unit id="53ec17fd9b28ca771807cff59cfa96c309a72a6d" translate="yes" xml:space="preserve">
          <source>Note this is far different than the &lt;code&gt;git format-patch&lt;/code&gt; command, whose purpose is to parse commit data into a &lt;code&gt;.patch&lt;/code&gt; files.</source>
          <target state="translated">이것은 커밋 데이터를 &lt;code&gt;.patch&lt;/code&gt; 파일로 구문 분석하는 &lt;code&gt;git format-patch&lt;/code&gt; 명령과는 매우 다릅니다.</target>
        </trans-unit>
        <trans-unit id="cf0b19ebbada53230ba7249ba576d21462e947b8" translate="yes" xml:space="preserve">
          <source>Press &lt;code&gt;Ctrl+T (Stage file to commit)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Ctrl+T (Stage file to commit)&lt;/code&gt; 누르십시오 (커밋 할 단계 파일)</target>
        </trans-unit>
        <trans-unit id="52239031922cdf5e70de23769980eb38d27ba72b" translate="yes" xml:space="preserve">
          <source>Reference for future: &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging&quot;&gt;Git Tools - Interactive Staging&lt;/a&gt;</source>
          <target state="translated">미래를위한 참조 : &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging&quot;&gt;Git Tools-Interactive Staging&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e317f2faafb831e4cbd09ebccd9fa3144e930ab8" translate="yes" xml:space="preserve">
          <source>Removed content is represented by lines beginning with &quot;-&quot;. You can prevent staging their removal by converting the &quot;-&quot; to a &quot; &quot; (space).</source>
          <target state="translated">제거 된 내용은 &quot;-&quot;로 시작하는 줄로 표시됩니다. &quot;-&quot;를 &quot;&quot;(공백)으로 변환하여 제거가 준비되지 않도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef674289039b58b9fbd3bc60331d9ad9f7f2ac74" translate="yes" xml:space="preserve">
          <source>Right click and select &lt;code&gt;Stage Lines for commit&lt;/code&gt;</source>
          <target state="translated">마우스 오른쪽 단추를 클릭하고 &lt;code&gt;Stage Lines for commit&lt;/code&gt; 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="8020cf0a2c0136cbe4dff7fd09abeadf6fd6efe3" translate="yes" xml:space="preserve">
          <source>Right click and select &lt;code&gt;UnStage Lines for commit&lt;/code&gt;</source>
          <target state="translated">마우스 오른쪽 단추를 클릭하고 &lt;code&gt;UnStage Lines for commit&lt;/code&gt; 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="56d808d074c0a88634b9cef4a33c2469daa0e812" translate="yes" xml:space="preserve">
          <source>Right click chunk of code which needs to be staged</source>
          <target state="translated">준비해야하는 코드 덩어리를 마우스 오른쪽 버튼으로 클릭</target>
        </trans-unit>
        <trans-unit id="02aa629c8b16cd17a44f3a0efec2feed43937642" translate="yes" xml:space="preserve">
          <source>S</source>
          <target state="translated">S</target>
        </trans-unit>
        <trans-unit id="623ca25f66ecbf070f81282eaa31f40ab5a274c2" translate="yes" xml:space="preserve">
          <source>Screencast showing a sample usage</source>
          <target state="translated">샘플 사용법을 보여주는 스크린 캐스트</target>
        </trans-unit>
        <trans-unit id="a5417a62ca7d77b9ec3e57207087553d427fb00b" translate="yes" xml:space="preserve">
          <source>Select &lt;code&gt;Stage Hunk for commit&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Stage Hunk for commit&lt;/code&gt; 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="ebce5d0eeaf118eee23bff549f7a7bee7579de19" translate="yes" xml:space="preserve">
          <source>Select the file from &lt;code&gt;unstagged Changes&lt;/code&gt; section</source>
          <target state="translated">&lt;code&gt;unstagged Changes&lt;/code&gt; 가 지정되지 않은 변경 사항 섹션에서 파일을 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="fa2b58c78176d060bcde0e4b996821d4aabc9272" translate="yes" xml:space="preserve">
          <source>Select the line/lines be staged</source>
          <target state="translated">준비 할 라인을 선택하십시오</target>
        </trans-unit>
        <trans-unit id="6fae30d7ddd28643a4dfb0611be0f70d48956dd7" translate="yes" xml:space="preserve">
          <source>Select the line/lines to be staged</source>
          <target state="translated">스테이징 할 라인을 선택하십시오</target>
        </trans-unit>
        <trans-unit id="ec430cad84d922bbf920abd01c484d1a3e8aa858" translate="yes" xml:space="preserve">
          <source>Selected file now moves to &lt;code&gt;Staged Changes&lt;/code&gt; Section</source>
          <target state="translated">선택한 파일이 이제 &lt;code&gt;Staged Changes&lt;/code&gt; 섹션으로 이동</target>
        </trans-unit>
        <trans-unit id="c7420a1e2bd38f2439eaf52e297b4afe5d8714c1" translate="yes" xml:space="preserve">
          <source>Set up the extension as follows:</source>
          <target state="translated">다음과 같이 확장을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="305d297ce07ffd48b4b0e32f0a495bd9f7e053e6" translate="yes" xml:space="preserve">
          <source>Should you use emacs, take a look at &lt;a href=&quot;https://github.com/magit/magit&quot;&gt;Magit&lt;/a&gt;, which provides a git interface for emacs. It supports &lt;a href=&quot;https://magit.vc/manual/magit/Staging-and-unstaging.html&quot;&gt;staging hunks&lt;/a&gt; (parts of files) quite well.</source>
          <target state="translated">emacs를 사용하는 경우, emacs를위한 git 인터페이스를 제공하는 &lt;a href=&quot;https://github.com/magit/magit&quot;&gt;Magit을&lt;/a&gt; 살펴보십시오. &lt;a href=&quot;https://magit.vc/manual/magit/Staging-and-unstaging.html&quot;&gt;스테이징 덩어리&lt;/a&gt; (파일의 일부)를 꽤 잘 지원합니다.</target>
        </trans-unit>
        <trans-unit id="4b6dae5db01cab8d5dfa9eb338aee11d63798aa7" translate="yes" xml:space="preserve">
          <source>This is similar to the functionality of git add -p, and git add --interactive. In some cases meld is easier / quicker to use than git add -p. That's because meld allows you, for example, to:</source>
          <target state="translated">이것은 git add -p 및 git add --interactive의 기능과 유사합니다. 어떤 경우에는 git add -p보다 meld를 사용하는 것이 더 쉽고 빠릅니다. 예를 들어 meld를 사용하면 다음을 수행 할 수 있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="107bcabe6072db121e67aa71721c126bc5b7a251" translate="yes" xml:space="preserve">
          <source>This is what &lt;code&gt;git add -h&lt;/code&gt; says about adding files this way (patching files):</source>
          <target state="translated">이것은 &lt;code&gt;git add -h&lt;/code&gt; 가 파일을 이런 식으로 추가하는 것에 대해 말한 것입니다 (파일 패치).</target>
        </trans-unit>
        <trans-unit id="294fe49b14eb83ec799ed7501f42dc4441ab0366" translate="yes" xml:space="preserve">
          <source>This would bring up the ncurses interface which can be used as shown below. Pressing the following keys in the ncurses window will do certain actions:</source>
          <target state="translated">그러면 아래와 같이 사용할 수있는 ncurses 인터페이스가 나타납니다. ncurses 창에서 다음 키를 누르면 특정 작업이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="b26ee33e338740e38745f396a6e8dc505b55c741" translate="yes" xml:space="preserve">
          <source>To not stage a deletion just replace &lt;code&gt;-&lt;/code&gt; with space .</source>
          <target state="translated">삭제를 준비하지 않으려면 공백으로 바꾸십시오.</target>
        </trans-unit>
        <trans-unit id="3d532a60dd3a1c232befda239f8834800f5a6bca" translate="yes" xml:space="preserve">
          <source>To not stage an addition just delete that line.</source>
          <target state="translated">추가를 준비하지 않으려면 해당 줄을 삭제하십시오.</target>
        </trans-unit>
        <trans-unit id="957a877ee67efecdb4f61b01204df1e0f35b8efb" translate="yes" xml:space="preserve">
          <source>Tried out &lt;code&gt;git add -p filename.x&lt;/code&gt;, but on a mac, I found gitx (&lt;a href=&quot;http://gitx.frim.nl/&quot;&gt;http://gitx.frim.nl/&lt;/a&gt; or &lt;a href=&quot;https://github.com/pieter/gitx&quot;&gt;https://github.com/pieter/gitx&lt;/a&gt;) to be much easier to commit exactly the lines I wanted to.</source>
          <target state="translated">&lt;code&gt;git add -p filename.x&lt;/code&gt; 을 시도했지만 Mac에서는 gitx ( &lt;a href=&quot;http://gitx.frim.nl/&quot;&gt;http://gitx.frim.nl/&lt;/a&gt; 또는 &lt;a href=&quot;https://github.com/pieter/gitx&quot;&gt;https://github.com/pieter/gitx&lt;/a&gt; )가 정확하게 커밋하기가 훨씬 쉽다는 것을 알았습니다. 내가 원하는 줄.</target>
        </trans-unit>
        <trans-unit id="ca8bc6b6ead73dfa665a0d4dec1469cd39a4cc85" translate="yes" xml:space="preserve">
          <source>Using Atom allows working with a theme that has dark background (by default, &lt;a href=&quot;https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Graphical-Interfaces&quot;&gt;&lt;code&gt;git gui&lt;/code&gt;&lt;/a&gt; has a white background).</source>
          <target state="translated">Atom을 사용하면 배경이 어두운 테마로 작업 할 수 있습니다 (기본적으로 &lt;a href=&quot;https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Graphical-Interfaces&quot;&gt; &lt;code&gt;git gui&lt;/code&gt; 의&lt;/a&gt; 배경은 흰색 임).</target>
        </trans-unit>
        <trans-unit id="99ec45b509d4548ed87f55167fbcd7ee680ecd01" translate="yes" xml:space="preserve">
          <source>Using the stash method gives you the opportunity to test, if your code still works, before you commit it.</source>
          <target state="translated">stash 메소드를 사용하면 코드가 여전히 작동하는지 커밋하기 전에 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff757ce89282a58ada7756dd6170fccc0c35abe9" translate="yes" xml:space="preserve">
          <source>Very good introductory screencasts &lt;a href=&quot;http://vimcasts.org/blog/2011/05/the-fugitive-series/&quot;&gt;here&lt;/a&gt; (see esp. &lt;a href=&quot;http://vimcasts.org/episodes/fugitive-vim-working-with-the-git-index/&quot;&gt;part 2&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;http://vimcasts.org/blog/2011/05/the-fugitive-series/&quot;&gt;여기에&lt;/a&gt; 아주 좋은 소개 스크린 캐스트가 있습니다 (특히 &lt;a href=&quot;http://vimcasts.org/episodes/fugitive-vim-working-with-the-git-index/&quot;&gt;2 부&lt;/a&gt; 참조).</target>
        </trans-unit>
        <trans-unit id="d19085746262dfa0b4a2e48a79a7c3a79eade753" translate="yes" xml:space="preserve">
          <source>When I have a lot of changes, and will end up creating a few commits from the changes, then I want to save my starting point temporarily before staging things.</source>
          <target state="translated">변경 사항이 많고 변경 사항으로 커밋을 만들면 준비를 시작하기 전에 시작 지점을 임시로 저장하고 싶습니다.</target>
        </trans-unit>
        <trans-unit id="c26e0bd3b160568868c27879c9ec41b2a5d7c27c" translate="yes" xml:space="preserve">
          <source>When I make changes to a file in Git, how can I commit only some of the changes?</source>
          <target state="translated">Git에서 파일을 변경할 때 일부 변경 사항 만 커밋하려면 어떻게해야합니까?</target>
        </trans-unit>
        <trans-unit id="9ab19446ba2f329c6b2652821409e8c2a85fc007" translate="yes" xml:space="preserve">
          <source>When you're done, close meld, and git-meld-index will update the index to match the contents of the temporary directory on the right hand side of meld that you just edited.</source>
          <target state="translated">완료되면 meld를 닫으면 git-meld-index는 방금 편집 한 meld의 오른쪽에있는 임시 디렉토리의 내용과 일치하도록 색인을 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="1f25c863c7368dd1170c04b039b2bb6a11f88e0c" translate="yes" xml:space="preserve">
          <source>Whymarrh's answer is what I usually do, except sometimes there are lots of changes and I can tell I might make a mistake while staging things, and I want a committed state I can fall back on for a second pass.</source>
          <target state="translated">왜 마르 마의 대답은 때때로 많은 변화가 있고, 준비하는 동안 실수를 저지르고 두 번째 패스로 넘어갈 수있는 헌신적 인 상태를 원한다는 것을 제외하고는 내가 일반적으로하는 일입니다.</target>
        </trans-unit>
        <trans-unit id="c0fbf9c727bf6651110e82e636d1ff5fc2055fa3" translate="yes" xml:space="preserve">
          <source>With TortoiseGit:</source>
          <target state="translated">TortoiseGit으로 :</target>
        </trans-unit>
        <trans-unit id="d626449e752977866bd08eaedb98e61749874fc3" translate="yes" xml:space="preserve">
          <source>Worth noting that to use &lt;code&gt;git add --patch&lt;/code&gt; for a &lt;strong&gt;new file&lt;/strong&gt; you need to first add the file to index with &lt;code&gt;git add --intent-to-add&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;새 파일에&lt;/strong&gt; &lt;code&gt;git add --patch&lt;/code&gt; 를 사용하려면 먼저 &lt;code&gt;git add --intent-to-add&lt;/code&gt; 로 파일을 색인에 추가해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5de17521f490d0afa8d7013ca6849d8c188412a3" translate="yes" xml:space="preserve">
          <source>You can see the diff of a file between working copy and index with &lt;code&gt;:Gdiff&lt;/code&gt;, and then add lines or hunks to the index using classic vim diff commands like &lt;code&gt;dp&lt;/code&gt;. Save the modifications in the index and commit with &lt;code&gt;:Gcommit&lt;/code&gt;, and you're done.</source>
          <target state="translated">&lt;code&gt;:Gdiff&lt;/code&gt; 를 사용 하여 작업 카피와 인덱스 사이에서 파일의 diff를 본 다음 &lt;code&gt;dp&lt;/code&gt; 와 같은 고전적인 vim diff 명령을 사용하여 색인에 행이나 덩어리를 추가 할 수 있습니다. 색인에 수정 사항을 저장하고 &lt;code&gt;:Gcommit&lt;/code&gt; 으로 커밋하면 완료됩니다.</target>
        </trans-unit>
        <trans-unit id="615e7bfe037e262f18abbd07e4ba664a365964a1" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;git add --interactive&lt;/code&gt; or &lt;code&gt;git add -p &amp;lt;&lt;em&gt;file&lt;/em&gt;&amp;gt;&lt;/code&gt;, and then &lt;code&gt;git commit&lt;/code&gt; (&lt;strong&gt;not&lt;/strong&gt;&lt;code&gt;git commit -a&lt;/code&gt;); see &lt;em&gt;Interactive mode&lt;/em&gt; in &lt;a href=&quot;http://git-scm.com/docs/git-add&quot;&gt;git-add&lt;/a&gt; manpage, or simply follow instructions.</source>
          <target state="translated">&lt;code&gt;git add --interactive&lt;/code&gt; 또는 &lt;code&gt;git add -p &amp;lt;&lt;em&gt;file&lt;/em&gt;&amp;gt;&lt;/code&gt; 을 사용한 다음 &lt;code&gt;git commit&lt;/code&gt; ( &lt;code&gt;git commit -a&lt;/code&gt; 아님)을 사용할 수 있습니다. &lt;a href=&quot;http://git-scm.com/docs/git-add&quot;&gt;git-add&lt;/a&gt; 맨 페이지의 &lt;em&gt;대화식 모드&lt;/em&gt; 를 참조하거나 지침을 따르십시오.</target>
        </trans-unit>
        <trans-unit id="a401d330b7ab811a76458f02f4cc5cdfd7f43aec" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;git add --patch &amp;lt;filename&amp;gt;&lt;/code&gt; (or &lt;code&gt;-p&lt;/code&gt; for short), and git will begin to break down your file into what it thinks are sensible &quot;hunks&quot; (portions of the file). It will then prompt you with this question:</source>
          <target state="translated">&lt;code&gt;git add --patch &amp;lt;filename&amp;gt;&lt;/code&gt; (또는 짧게는 &lt;code&gt;-p&lt;/code&gt; ) 을 사용할 수 있으며, git은 파일이 &quot;허크&quot;(파일의 일부)라고 생각되는 것으로 분류되기 시작합니다. 그런 다음이 질문을 묻습니다.</target>
        </trans-unit>
        <trans-unit id="a8d7ec41c3df53ed0c68c5ddca5e3337d59f3573" translate="yes" xml:space="preserve">
          <source>You'll see meld (or your configured git difftool) pop up with:</source>
          <target state="translated">다음과 같이 meld (또는 구성된 git difftool) 팝업이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="86f7e437faa5a7fce15d1ddcb9eaeaea377667b8" translate="yes" xml:space="preserve">
          <source>a</source>
          <target state="translated">a</target>
        </trans-unit>
        <trans-unit id="5b599c890062a85dea5257d16b555dad8305bfda" translate="yes" xml:space="preserve">
          <source>added content:</source>
          <target state="translated">추가 된 내용 :</target>
        </trans-unit>
        <trans-unit id="2bd1a9484c2c9f160372d06b72725e5d0cb958f7" translate="yes" xml:space="preserve">
          <source>allows visual range selection then &lt;code&gt;:'&amp;lt;,'&amp;gt;diffput&lt;/code&gt; or &lt;code&gt;:'&amp;lt;,'&amp;gt;diffget&lt;/code&gt; to stage/revert individual line changes.</source>
          <target state="translated">시각적 범위 선택을 허용 한 다음 &lt;code&gt;:'&amp;lt;,'&amp;gt;diffput&lt;/code&gt; 또는 &lt;code&gt;:'&amp;lt;,'&amp;gt;diffget&lt;/code&gt; 을 사용하여 개별 라인 변경을 스테이징 / 복귀합니다.</target>
        </trans-unit>
        <trans-unit id="939a3589d16f8375971efd6cba1bbef0770d3266" translate="yes" xml:space="preserve">
          <source>cd to your git repo and invoke it as follows:</source>
          <target state="translated">git repo에 cd하고 다음과 같이 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="3c363836cf4e16666669a25da280a1865c2d2874" translate="yes" xml:space="preserve">
          <source>d</source>
          <target state="translated">d</target>
        </trans-unit>
        <trans-unit id="21a709faaa441c7cbc72b92e9631d25156fb9de8" translate="yes" xml:space="preserve">
          <source>do not stage this hunk for the next commit</source>
          <target state="translated">다음 커밋을 위해이 덩어리를 준비하지 마십시오</target>
        </trans-unit>
        <trans-unit id="5cb599d5f2640b95044ae8fbfeb0a86fef5ccb92" translate="yes" xml:space="preserve">
          <source>do not stage this hunk or any of the later hunks in the file</source>
          <target state="translated">파일에서이 덩어리 또는 이후 덩어리를 스테이징하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="58e6b3a414a1e090dfc6029add0f3555ccba127f" translate="yes" xml:space="preserve">
          <source>e</source>
          <target state="translated">e</target>
        </trans-unit>
        <trans-unit id="fac0778a946fcd984d819bd8ba1f9f2a148a6061" translate="yes" xml:space="preserve">
          <source>edit by hand and see 'live' diff updates (updated after every keypress)</source>
          <target state="translated">직접 편집하고 '실시간'diff 업데이트를 볼 수 있습니다 (키를 누를 때마다 업데이트 됨)</target>
        </trans-unit>
        <trans-unit id="54fd1711209fb1c0781092374132c66e79e2241b" translate="yes" xml:space="preserve">
          <source>g</source>
          <target state="translated">g</target>
        </trans-unit>
        <trans-unit id="9aef0c5ee589f04c2f5d9cecb27c8c7afb703d04" translate="yes" xml:space="preserve">
          <source>git-meld-index runs meld -- or any other git difftool (kdiff3, diffuse, etc.) -- to allow you to interactively stage changes to the git index (also known as the git staging area).</source>
          <target state="translated">git-meld-index는 meld 또는 다른 git difftool (kdiff3, spread 등)을 실행하여 git 인덱스 (git staging area라고도 함)의 변경 사항을 대화식으로 스테이징 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c2dd944dde9e08881bef0894fe7b22a5c9c4b06" translate="yes" xml:space="preserve">
          <source>j</source>
          <target state="translated">j</target>
        </trans-unit>
        <trans-unit id="13fbd79c3d390e5d6585a21e11ff5ec1970cff0c" translate="yes" xml:space="preserve">
          <source>k</source>
          <target state="translated">k</target>
        </trans-unit>
        <trans-unit id="e624254c5f00cfb41d411f0289f1d7f313562900" translate="yes" xml:space="preserve">
          <source>leave this hunk undecided, see next hunk</source>
          <target state="translated">이 덩어리를 미정의 상태로 두십시오, 다음 덩어리를보십시오</target>
        </trans-unit>
        <trans-unit id="73f1fb01121e6fe592576068c4c58768f12bf692" translate="yes" xml:space="preserve">
          <source>leave this hunk undecided, see next undecided hunk</source>
          <target state="translated">이 덩어리를 미결정 상태로 두십시오. 다음 미정 덩어리를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="44a80068c49c358887ccd8723bf2742be57110ef" translate="yes" xml:space="preserve">
          <source>leave this hunk undecided, see previous hunk</source>
          <target state="translated">이 덩어리를 미정의 상태로 두십시오, 이전 덩어리를보십시오</target>
        </trans-unit>
        <trans-unit id="8206a9870270114d62e9ac026a19d0a9dc3c7408" translate="yes" xml:space="preserve">
          <source>leave this hunk undecided, see previous undecided hunk</source>
          <target state="translated">이 덩어리를 미결정 상태로 두십시오. 이전의 미정 덩어리를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3c9a0c677d8b89380ca2574208ab057e3e3bb7f8" translate="yes" xml:space="preserve">
          <source>manually edit the current hunk</source>
          <target state="translated">현재 덩어리를 수동으로 편집</target>
        </trans-unit>
        <trans-unit id="ace76e0e158a4c766cceb7381c21cb78f042b860" translate="yes" xml:space="preserve">
          <source>modified content:</source>
          <target state="translated">수정 된 내용 :</target>
        </trans-unit>
        <trans-unit id="d1854cae891ec7b29161ccaf79a24b00c274bdaa" translate="yes" xml:space="preserve">
          <source>n</source>
          <target state="translated">n</target>
        </trans-unit>
        <trans-unit id="0cfaab1d27c93e0d310a84aa1c86c7d62a3a71f4" translate="yes" xml:space="preserve">
          <source>navigate to a change without saying 'n' to every change you want to skip</source>
          <target state="translated">건너 뛰려는 모든 변경 사항에 대해 'n'이라고 말하지 않고 변경 사항으로 이동</target>
        </trans-unit>
        <trans-unit id="d9c887040bab16e786e9865b9ca42745e486c7e2" translate="yes" xml:space="preserve">
          <source>or the short-form 
&lt;code&gt;
git add -p filename.txt
&lt;/code&gt;</source>
          <target state="translated">또는 짧은 형식의 &lt;code&gt; git add -p filename.txt &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="37d153789c2dbb68f9608a65efc226fa132b90a9" translate="yes" xml:space="preserve">
          <source>print hunk help</source>
          <target state="translated">덩어리 도움말 인쇄</target>
        </trans-unit>
        <trans-unit id="22ea1c649c82946aa6e479e1ffd321e4a318b1b0" translate="yes" xml:space="preserve">
          <source>q</source>
          <target state="translated">q</target>
        </trans-unit>
        <trans-unit id="615eb261f17dea328d8bd3ad7d422948e7c79bf7" translate="yes" xml:space="preserve">
          <source>quit; do not stage this hunk or any of the remaining hunks</source>
          <target state="translated">떠나다; 이 덩어리 또는 나머지 덩어리를 준비하지 마십시오</target>
        </trans-unit>
        <trans-unit id="255ef44dfeab3c6fe814ae0eafeb12f21f555dc5" translate="yes" xml:space="preserve">
          <source>removed content:</source>
          <target state="translated">제거 된 내용 :</target>
        </trans-unit>
        <trans-unit id="69cb0d9032f44652297ddcc29503be1db22ac8d7" translate="yes" xml:space="preserve">
          <source>right click on the file and use &lt;code&gt;Context Menu &amp;rarr; Restore after commit&lt;/code&gt;. This will create a copy of the file as it is. Then you can edit the file, e.g. in TortoiseGitMerge and undo all the changes you don't want to commit. After saving those changes you can commit the file.</source>
          <target state="translated">파일을 마우스 오른쪽 버튼으로 클릭하고 &lt;code&gt;Context Menu &amp;rarr; Restore after commit&lt;/code&gt; 사용하십시오. 파일의 사본을 그대로 만듭니다. 그런 다음 TortoiseGitMerge에서 파일을 편집하고 커밋하지 않으려는 모든 변경 사항을 취소 할 수 있습니다. 해당 변경 사항을 저장 한 후 파일을 커미트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a0f1490a20d0211c997b44bc357e1972deab8ae3" translate="yes" xml:space="preserve">
          <source>s</source>
          <target state="translated">s</target>
        </trans-unit>
        <trans-unit id="6bf011b4c4e4a3b51d486045f81bb5c55e449ea8" translate="yes" xml:space="preserve">
          <source>search for a hunk matching the given regex</source>
          <target state="translated">주어진 정규식과 일치하는 덩어리를 검색</target>
        </trans-unit>
        <trans-unit id="64910625a6143adc6a9492187c237d484695bd48" translate="yes" xml:space="preserve">
          <source>see intra-line diffs</source>
          <target state="translated">인라인 라인 차이 참조</target>
        </trans-unit>
        <trans-unit id="0487db7276da0fa004abf7a968b5acde74288481" translate="yes" xml:space="preserve">
          <source>see more context</source>
          <target state="translated">더 많은 맥락을보십시오</target>
        </trans-unit>
        <trans-unit id="46e65c804a644f61e13d7053473dec3fe1fbf881" translate="yes" xml:space="preserve">
          <source>select a hunk to go to</source>
          <target state="translated">갈 덩어리를 선택하십시오</target>
        </trans-unit>
        <trans-unit id="72f562ac46d88f8ce6d11b88676fd931e24aa771" translate="yes" xml:space="preserve">
          <source>split the current hunk into smaller hunks</source>
          <target state="translated">현재 덩어리를 작은 덩어리로 나누십시오</target>
        </trans-unit>
        <trans-unit id="b7945fc58b43436a06f81e0c40bca7ac83f99327" translate="yes" xml:space="preserve">
          <source>stage this hunk and all later hunks in the file</source>
          <target state="translated">파일에서이 덩어리와 모든 이후 덩어리를 준비하십시오.</target>
        </trans-unit>
        <trans-unit id="c2f61885ca5863b63181678e5c4401fc217d8536" translate="yes" xml:space="preserve">
          <source>stage this hunk for the next commit</source>
          <target state="translated">다음 커밋을 위해이 덩어리를 준비하십시오</target>
        </trans-unit>
        <trans-unit id="95cb0bfd2977c761298d9624e4b4d4c72a39974a" translate="yes" xml:space="preserve">
          <source>y</source>
          <target state="translated">y</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
