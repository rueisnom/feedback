<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/1085162">
    <body>
      <group id="1085162">
        <trans-unit id="23e42a6ef9c64a5546118f7117feb409e677b35e" translate="yes" xml:space="preserve">
          <source>. If no selection is made, the complete hunk is staged.</source>
          <target state="translated">.如果没有选择,则完整的大块的内容就会上演。</target>
        </trans-unit>
        <trans-unit id="847948549067358fc7a4308fd567106f17add26d" translate="yes" xml:space="preserve">
          <source>... and then using the mentioned keys, (y/n etc), for choosing lines to be included in the commit.</source>
          <target state="translated">....然后使用所述的键,(yn等),选择要包含在提交中的行。</target>
        </trans-unit>
        <trans-unit id="61de0379c7d819a87c04dbdac3b47a347b3ab611" translate="yes" xml:space="preserve">
          <source>... but for files already in you repository, there is, in s are much better off using --patch flag on the commit command directly (if you are using a recent enough version of git): 
&lt;code&gt;
git commit --patch filename.txt
&lt;/code&gt;</source>
          <target state="translated">...但是对于已经存在于存储库中的文件，in最好直接在commit命令上使用--patch标志（如果您使用的是最新版本的git）： &lt;code&gt; git commit --patch filename.txt &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f3b72d5b73714422778fa475930c0069a912871" translate="yes" xml:space="preserve">
          <source>... or, again, the short-form 
&lt;code&gt;
git commit -p filename.txt
&lt;/code&gt;</source>
          <target state="translated">...或简短的 &lt;code&gt; git commit -p filename.txt &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1a6f81aa83591a345f7d00fc226626c0579ba9de" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://git-cola.github.io/&quot;&gt;git-cola&lt;/a&gt; is a great GUI and also has this feature built-in. Just select the lines to stage and press</source>
          <target state="translated">&lt;a href=&quot;https://git-cola.github.io/&quot;&gt;git-cola&lt;/a&gt;是一个很棒的GUI，并且还内置了此功能。 只需选择要上演的行并按</target>
        </trans-unit>
        <trans-unit id="35441747290dcc3711db4cdec8c7cacff7f37e98" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/airblade/vim-gitgutter&quot;&gt;vim-gitgutter&lt;/a&gt; plugin can stage hunks without leaving vim editor using</source>
          <target state="translated">&lt;a href=&quot;https://github.com/airblade/vim-gitgutter&quot;&gt;vim-gitgutter&lt;/a&gt;插件可以在不离开vim编辑器的情况下进行大礼</target>
        </trans-unit>
        <trans-unit id="8903e3f3225494c415da330134b06696301cdc78" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/jjlee/git-meld-index&quot;&gt;git-meld-index&lt;/a&gt; -- quoting from the website:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/jjlee/git-meld-index&quot;&gt;git-meld-&lt;/a&gt; index-从网站引用：</target>
        </trans-unit>
        <trans-unit id="28b716c5bba7244cfb7516b371504adfe48cfc84" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;Intellij IDEA&lt;/a&gt; (and I guess all other products of the series) has built in support for partial commits since v2018.1</source>
          <target state="translated">&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;自v2018.1起，Intellij IDEA&lt;/a&gt; （我猜该系列的所有其他产品）都内置了对部分提交的支持</target>
        </trans-unit>
        <trans-unit id="a3693c4c04984eaf771586cad4040aa423acf334" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git commit -v&lt;/code&gt; to view your commit while you edit the commit message.</source>
          <target state="translated">&lt;code&gt;git commit -v&lt;/code&gt; 在编辑提交消息时查看您的提交。</target>
        </trans-unit>
        <trans-unit id="cb31642f605e0315309cc4b14fe75ddb68bfca5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git diff --staged&lt;/code&gt; to check that you staged the correct changes</source>
          <target state="translated">&lt;code&gt;git diff --staged&lt;/code&gt; 检查您是否已进行正确的更改</target>
        </trans-unit>
        <trans-unit id="a300a432b7be1f62c0bfcf53665b08b13a0d8d89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset -p&lt;/code&gt; to unstage mistakenly added hunks</source>
          <target state="translated">&lt;code&gt;git reset -p&lt;/code&gt; 取消错误添加的帅哥</target>
        </trans-unit>
        <trans-unit id="7554969efd8c83b8d600d8b9661de769b4581ce1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1. Hunk wise:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1.大块头：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3ec47db25e3de53e6b5b4945d2a98c539eba18c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2. Line wise:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2.行明智的：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="34bd1c26971226d88394a22e3a5522039b11f6e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;3. If you want to stage the complete file except couple of lines:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;3.如果要暂存完整文件，请注意以下几行：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="717533e2cf3df700e8aa4b35f4a2379b03d77f77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Caution:&lt;/em&gt;&lt;/strong&gt;&lt;em&gt; do not change the content of the file, this is not a good place to do so. Just change the operators of deleted or added lines.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;注意：&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;请勿更改文件的内容，这不是一个好地方。&lt;/em&gt; &lt;em&gt;只需更改已删除或已添加行的运算符。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dcbfbc3d6aae516d0ed9d15c0444f8ac72f9abf0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;LEFT&lt;/strong&gt;: temporary directory contining files copied from your working tree</source>
          <target state="translated">&lt;strong&gt;左&lt;/strong&gt; ：从工作树复制的临时目录继续文件</target>
        </trans-unit>
        <trans-unit id="13c6f36292c01a823253f512a339ab42dfc2fe46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RIGHT&lt;/strong&gt;: temporary directory with the contents of the index. This also includes files that are not yet in the index but are modified or untracked in the working copy -- in this case you'll see the file contents from HEAD.</source>
          <target state="translated">&lt;strong&gt;RIGHT&lt;/strong&gt; ：具有索引内容的临时目录。 这还包括尚未在索引中但在工作副本中已修改或未跟踪的文件-在这种情况下，您将看到HEAD中的文件内容。</target>
        </trans-unit>
        <trans-unit id="372f60334aa5d8918e891d52c780ab816ff7ba23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Usage&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c767acbf8b9ca7f2b499bbb39aac7fce3d76c573" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;added content&lt;/strong&gt; 
             Added content is represented by lines beginning with &quot;+&quot;. You can
             prevent staging any addition lines by deleting them.</source>
          <target state="translated">&lt;strong&gt;添加的内容&lt;/strong&gt;添加的内容由以&amp;ldquo; +&amp;rdquo;开头的行表示。 您可以通过删除它们来防止暂存任何附加行。</target>
        </trans-unit>
        <trans-unit id="f607b8d257c50df637d647fa28b123086e4be8d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;git gui&lt;/strong&gt; provides this functionality under the diff view. Just right click the line(s) you're interested in and you should see a &quot;stage this line to commit&quot; menu item.</source>
          <target state="translated">&lt;strong&gt;git gui&lt;/strong&gt;在diff视图下提供了此功能。 只需右键单击您感兴趣的行，您应该会看到&amp;ldquo;暂存此行以提交&amp;rdquo;菜单项。</target>
        </trans-unit>
        <trans-unit id="8ba7739b3b0c26c77014375db0f4c8d5dad3926d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;modified content:&lt;/strong&gt; 
             Modified content is represented by &quot;-&quot; lines (removing the old
             content) followed by &quot;+&quot; lines (adding the replacement content).
             You can prevent staging the modification by converting &quot;-&quot; lines to
             &quot; &quot;, and removing &quot;+&quot; lines. Beware that modifying only half of the
             pair is likely to introduce confusing changes to the index.</source>
          <target state="translated">&lt;strong&gt;修改后的内容：&lt;/strong&gt;修改后的内容由&amp;ldquo;-&amp;rdquo;行（删除旧内容）和&amp;ldquo; +&amp;rdquo;行（添加替换内容）表示。 您可以通过将&amp;ldquo;-&amp;rdquo;行转换为&amp;ldquo;&amp;rdquo;并删除&amp;ldquo; +&amp;rdquo;行来防止进行修改。 请注意，仅修改该对中的一半可能会对索引造成混乱的更改。</target>
        </trans-unit>
        <trans-unit id="5f8bdb8133686a8ad60a0f2d2b9279d1a888e115" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;removed content:&lt;/strong&gt;
             Removed content is represented by lines beginning with &quot;-&quot;. You can
             prevent staging their removal by converting the &quot;-&quot; to a &quot; &quot;
             (space).</source>
          <target state="translated">&lt;strong&gt;删除的内容：&lt;/strong&gt;删除的内容由以&amp;ldquo;-&amp;rdquo;开头的行表示。 您可以通过将&amp;ldquo;-&amp;rdquo;转换为&amp;ldquo;&amp;rdquo;（空格）来防止将其删除。</target>
        </trans-unit>
        <trans-unit id="9821869aa821996defeaba01e6c12538af610d55" translate="yes" xml:space="preserve">
          <source>Added content is represented by lines beginning with &quot;+&quot;. You can prevent staging any addition lines by deleting them.</source>
          <target state="translated">添加的内容用 &quot;+&quot;开头的行来表示。你可以通过删除任何添加的行来防止添加的内容。</target>
        </trans-unit>
        <trans-unit id="a0bd44e9469f5b0a01c14c017e5f08be1f2e2eb4" translate="yes" xml:space="preserve">
          <source>Adding on a previous answer, if you prefer using the command line, entering &lt;code&gt;git add -e myfile&lt;/code&gt; gives you the choice to choose line by line what you want to commit because this command will open an editor with the differences, like so:</source>
          <target state="translated">在上一个答案的基础上，如果您更喜欢使用命令行，则输入 &lt;code&gt;git add -e myfile&lt;/code&gt; 可以使您逐行选择要提交的内容，因为此命令将打开具有差异的编辑器，如下所示：</target>
        </trans-unit>
        <trans-unit id="ace6e76e5b5dce58f294c1fa6d523113cc7f265a" translate="yes" xml:space="preserve">
          <source>Afterwards, you can use:</source>
          <target state="translated">之后,你可以使用。</target>
        </trans-unit>
        <trans-unit id="6734f386df43dba1b5b934c1feb61c5334bd4d27" translate="yes" xml:space="preserve">
          <source>As &lt;a href=&quot;https://stackoverflow.com/a/1085191/340811&quot;&gt;one answer&lt;/a&gt; above shows, you can use 
&lt;code&gt;
git add --patch filename.txt
&lt;/code&gt;</source>
          <target state="translated">如上面的&lt;a href=&quot;https://stackoverflow.com/a/1085191/340811&quot;&gt;答案&lt;/a&gt;所示，您可以使用 &lt;code&gt; git add --patch filename.txt &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="be21521ecb4c7d9c5c8691f8206a6ac37f252f2c" translate="yes" xml:space="preserve">
          <source>As you may known lines that start with &lt;code&gt;+&lt;/code&gt; are addtions, lines that start with &lt;code&gt;-&lt;/code&gt; are deletions. So:</source>
          <target state="translated">您可能知道以 &lt;code&gt;+&lt;/code&gt; 开头的行是加法，而以 &lt;code&gt;-&lt;/code&gt; 开头的行是删除。 所以：</target>
        </trans-unit>
        <trans-unit id="ef56989526889384d7de34cfc717d71ed832fdec" translate="yes" xml:space="preserve">
          <source>Beside this, it provides other cool features like a diff sign column as in some modern IDEs</source>
          <target state="translated">除此以外,它还提供了其他很酷的功能,比如像一些现代的IDE中的diff标志列。</target>
        </trans-unit>
        <trans-unit id="5c0f00258f5a786db203a0a5065228f986e1abbe" translate="yes" xml:space="preserve">
          <source>Commit only part of a file in Git</source>
          <target state="translated">在Git中只提交部分文件</target>
        </trans-unit>
        <trans-unit id="37d93ee3e64beb05ff2a0858ce87a460e62aef34" translate="yes" xml:space="preserve">
          <source>Edit the index (right hand side) until happy. Remember to save when needed.</source>
          <target state="translated">编辑索引(右手边),直到满意为止。需要的时候记得保存。</target>
        </trans-unit>
        <trans-unit id="f434b2db17a1d7f01dbc67f0158ecbc3fe4be048" translate="yes" xml:space="preserve">
          <source>Every details about &lt;code&gt;git add&lt;/code&gt; are available on &lt;code&gt;git --help add&lt;/code&gt;</source>
          <target state="translated">关于 &lt;code&gt;git add&lt;/code&gt; 的每一个细节都可以在 &lt;code&gt;git --help add&lt;/code&gt; 上找到</target>
        </trans-unit>
        <trans-unit id="07bb17d57bcd9c5e250639f163b7bbee5d78743c" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;http://atom.io&quot;&gt;Atom&lt;/a&gt; users, the package &lt;a href=&quot;https://github.com/atom/github&quot;&gt;github&lt;/a&gt; includes interactive staging, in the style of &lt;code&gt;git gui&lt;/code&gt;. For shortcuts see the package's &lt;a href=&quot;https://flight-manual.atom.io/using-atom/sections/github-package/&quot;&gt;documentation&lt;/a&gt;.</source>
          <target state="translated">对于&lt;a href=&quot;http://atom.io&quot;&gt;Atom&lt;/a&gt;用户，包&lt;a href=&quot;https://github.com/atom/github&quot;&gt;github&lt;/a&gt;包含 &lt;code&gt;git gui&lt;/code&gt; 样式的交互式暂存。 有关快捷方式，请参见软件包的&lt;a href=&quot;https://flight-manual.atom.io/using-atom/sections/github-package/&quot;&gt;文档&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="40c81ad64f5f7bb1bc418d6564a82d4e98911ad5" translate="yes" xml:space="preserve">
          <source>For emacs there is also &lt;a href=&quot;http://github.com/chneukirchen/gitsum&quot;&gt;gitsum&lt;/a&gt;</source>
          <target state="translated">对于emacs也有&lt;a href=&quot;http://github.com/chneukirchen/gitsum&quot;&gt;gitsum&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f0444bdcf76b5f9632e10b0404425cd7d186826c" translate="yes" xml:space="preserve">
          <source>For example, how could I commit only 15 lines out of 30 lines that have been changed in a file?</source>
          <target state="translated">例如,在一个文件中的30行中,我怎么可能只提交了15行的改动?</target>
        </trans-unit>
        <trans-unit id="2ba3f180baead898993201dbc26c96e533f80bbc" translate="yes" xml:space="preserve">
          <source>For those who use &lt;strong&gt;Git Extensions&lt;/strong&gt;:</source>
          <target state="translated">对于那些使用&lt;strong&gt;Git Extensions的人&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="59f3fba9fd6e62600e09e7c815ce8d4de4f1c35d" translate="yes" xml:space="preserve">
          <source>Here is a description of each option:</source>
          <target state="translated">以下是每个选项的说明。</target>
        </trans-unit>
        <trans-unit id="517a9b1840568ea22b08ea1f647231bed6e4e0ab" translate="yes" xml:space="preserve">
          <source>I believe that &lt;code&gt;git add -e myfile&lt;/code&gt; is the easiest way (my preference at least) since it simply opens a text editor and lets you choose which line you want to stage and which line you don't.
Regarding editing commands:</source>
          <target state="translated">我相信 &lt;code&gt;git add -e myfile&lt;/code&gt; 是最简单的方法（至少是我的喜好），因为它只是打开了一个文本编辑器，让您选择要暂存的行和不需要的行。 关于编辑命令：</target>
        </trans-unit>
        <trans-unit id="41704e4a48d4a2577d68697853205cb72ed1e6a3" translate="yes" xml:space="preserve">
          <source>I would strongly recommend using &lt;a href=&quot;https://www.sourcetreeapp.com/&quot;&gt;SourceTree&lt;/a&gt; from Atlassian. (It's free.) It makes this trivial. You can stage individual hunks of code or individual lines of code quickly and easily.</source>
          <target state="translated">我强烈建议使用Atlassian的&lt;a href=&quot;https://www.sourcetreeapp.com/&quot;&gt;SourceTree&lt;/a&gt; 。 （它是免费的。）这使它变得微不足道。 您可以快速，轻松地暂存单个代码块或单个代码行。</target>
        </trans-unit>
        <trans-unit id="c26e334cc417c71ced9e0e20b6e573d3a3a987e4" translate="yes" xml:space="preserve">
          <source>If it's on &lt;code&gt;Windows&lt;/code&gt; platform, in my opinion &lt;code&gt;git gui&lt;/code&gt; is very good tool to &lt;code&gt;stage&lt;/code&gt;/&lt;code&gt;commit&lt;/code&gt; few lines from &lt;code&gt;unstaged&lt;/code&gt; file</source>
          <target state="translated">如果在 &lt;code&gt;Windows&lt;/code&gt; 平台上，我认为 &lt;code&gt;git gui&lt;/code&gt; 是从未 &lt;code&gt;unstaged&lt;/code&gt; 文件暂存 / &lt;code&gt;commit&lt;/code&gt; 几行代码的很好的工具</target>
        </trans-unit>
        <trans-unit id="f0aab2b8f69d3d6b7bb910a0606dbaeef0d9f5f5" translate="yes" xml:space="preserve">
          <source>If only part of hunk should be staged &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;vim-fugitive&lt;/a&gt;</source>
          <target state="translated">如果只有部分大块应该上演&lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;逃亡&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="045ec0da0831cce15d8fd5cfea09e640da8232f3" translate="yes" xml:space="preserve">
          <source>If the file is not in the repository yet, you can first do &lt;code&gt;git add -N &amp;lt;filename&amp;gt;&lt;/code&gt;. Afterwards you can go on with &lt;code&gt;git add -p &amp;lt;filename&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">如果文件不在存储库中，则可以先执行 &lt;code&gt;git add -N &amp;lt;filename&amp;gt;&lt;/code&gt; 。 之后，您可以继续使用 &lt;code&gt;git add -p &amp;lt;filename&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="46738d37fe9a25b9ad51cf85eecd1df4c9f7d76e" translate="yes" xml:space="preserve">
          <source>If you are using vim, you may want to try the excellent plugin called &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;fugitive&lt;/a&gt;.</source>
          <target state="translated">如果您使用的是vim，则可能要尝试使用名为&lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;fugitive&lt;/a&gt;的出色插件。</target>
        </trans-unit>
        <trans-unit id="14388be9fdfad5e3d00b91139d94da29d1c8deaf" translate="yes" xml:space="preserve">
          <source>If you prefer doing it from GUI, you can use &lt;a href=&quot;http://git-scm.com/docs/git-gui&quot;&gt;git-gui&lt;/a&gt;. You can simply mark chunks which you want to have included in commit.  I personally find it easier than using &lt;code&gt;git add -i&lt;/code&gt;.  Other git GUIs, like QGit or GitX, might also have this functionality as well.</source>
          <target state="translated">如果您更喜欢通过GUI进行操作，则可以使用&lt;a href=&quot;http://git-scm.com/docs/git-gui&quot;&gt;git-gui&lt;/a&gt; 。 您可以简单地标记要包含在提交中的块。 我个人发现它比使用 &lt;code&gt;git add -i&lt;/code&gt; 更容易。 其他git GUI，例如QGit或GitX，也可能具有此功能。</target>
        </trans-unit>
        <trans-unit id="d0ffacab77b9308a3cf3697ac65536e8276d38cd" translate="yes" xml:space="preserve">
          <source>In a git repository, run:</source>
          <target state="translated">在git仓库中,运行。</target>
        </trans-unit>
        <trans-unit id="af4c27a86b8f42b6d7e6b884b22d8573ed032c03" translate="yes" xml:space="preserve">
          <source>In the Commit window, select the file you want to partially commit, then select the text you want to commit in the right pane, then right-click on the selection and choose 'Stage selected lines' from the context menu.</source>
          <target state="translated">在 &quot;提交 &quot;窗口中,选择要部分提交的文件,然后在右窗格中选择要提交的文本,然后在选区上单击右键,从上下文菜单中选择 &quot;阶段选行&quot;。</target>
        </trans-unit>
        <trans-unit id="44dc43e2735e0a17a8d0426f9b1117c8acf5f974" translate="yes" xml:space="preserve">
          <source>It's been 10 years since this question was asked. And I hope this answer will be useful to someone. As mentioned in the answer &lt;a href=&quot;https://stackoverflow.com/a/55326882/736149&quot;&gt;here&lt;/a&gt;, where GUI is not an option, Andrew Shadura's &lt;a href=&quot;https://github.com/andrewshadura/git-crecord&quot;&gt;crecord extension&lt;/a&gt; helps bring a ncurses window in which we can select the lines to commit.</source>
          <target state="translated">提出这个问题已有10年了。 我希望这个答案对某人有用。 如此处的答案所述，在没有GUI的情况下，Andrew Shadura的&lt;a href=&quot;https://github.com/andrewshadura/git-crecord&quot;&gt;crecord扩展&lt;/a&gt;有助于带来ncurses窗口，我们可以在其中选择要提交的行。</target>
        </trans-unit>
        <trans-unit id="58668e7669fd564d99db5d581fcdb6a5618440b5" translate="yes" xml:space="preserve">
          <source>J</source>
          <target state="translated">J</target>
        </trans-unit>
        <trans-unit id="a7ee38bb7be4fc44198cb2685d9601dcf2b9f569" translate="yes" xml:space="preserve">
          <source>K</source>
          <target state="translated">K</target>
        </trans-unit>
        <trans-unit id="59b86486aed4edafd59a372a9da15c32460385f0" translate="yes" xml:space="preserve">
          <source>Like this:</source>
          <target state="translated">就像这样。</target>
        </trans-unit>
        <trans-unit id="5573b67a2a0a6c0c6bdb8830a0a160f18532fc7f" translate="yes" xml:space="preserve">
          <source>Modern Git has also &lt;code&gt;git commit --interactive&lt;/code&gt; (and &lt;code&gt;git commit --patch&lt;/code&gt;, which is shortcut to patch option in interactive commit).</source>
          <target state="translated">Modern Git还具有 &lt;code&gt;git commit --interactive&lt;/code&gt; （和 &lt;code&gt;git commit --patch&lt;/code&gt; ，这是交互式提交中patch选项的快捷方式）。</target>
        </trans-unit>
        <trans-unit id="00b61542d0211972bc61982931e3e8c50577c383" translate="yes" xml:space="preserve">
          <source>Modified content is represented by &quot;-&quot; lines (removing the old content) followed by &quot;+&quot; lines (adding the replacement content). You can prevent staging the modification by converting &quot;-&quot; lines to &quot; &quot;, and removing &quot;+&quot;
             lines. Beware that modifying only half of the pair is likely to introduce confusing changes to the index.</source>
          <target state="translated">修改后的内容用&quot;-&quot;行(删除旧内容)表示,然后用 &quot;+&quot;行(添加替换内容)表示。你可以通过将&quot;-&quot;行转换为&quot;&quot;,并删除 &quot;+&quot;行,来防止分期修改。注意,只修改对中的一半很可能会给索引带来混乱的变化。</target>
        </trans-unit>
        <trans-unit id="bae9503f83a8e896d44b3571e2eb4a60a9fe1b2a" translate="yes" xml:space="preserve">
          <source>Much like jdsumsion's answer you can also stash your current work but then use a difftool like meld to pull selected changes from the stash. That way you can even edit the hunks manually very easy, which is a bit of a pain when in &lt;code&gt;git add -p&lt;/code&gt;:</source>
          <target state="translated">就像jdsumsion的答案一样，您也可以隐藏您当前的工作，但是然后使用diff工具（例如meld）从存储中提取选定的更改。 这样，您甚至可以非常轻松地手动编辑帅哥，这在 &lt;code&gt;git add -p&lt;/code&gt; 中有点麻烦 ：</target>
        </trans-unit>
        <trans-unit id="53ec17fd9b28ca771807cff59cfa96c309a72a6d" translate="yes" xml:space="preserve">
          <source>Note this is far different than the &lt;code&gt;git format-patch&lt;/code&gt; command, whose purpose is to parse commit data into a &lt;code&gt;.patch&lt;/code&gt; files.</source>
          <target state="translated">请注意，这与 &lt;code&gt;git format-patch&lt;/code&gt; 命令有很大不同，后者的目的是将提交数据解析为 &lt;code&gt;.patch&lt;/code&gt; 文件。</target>
        </trans-unit>
        <trans-unit id="cf0b19ebbada53230ba7249ba576d21462e947b8" translate="yes" xml:space="preserve">
          <source>Press &lt;code&gt;Ctrl+T (Stage file to commit)&lt;/code&gt;</source>
          <target state="translated">按 &lt;code&gt;Ctrl+T (Stage file to commit)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52239031922cdf5e70de23769980eb38d27ba72b" translate="yes" xml:space="preserve">
          <source>Reference for future: &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging&quot;&gt;Git Tools - Interactive Staging&lt;/a&gt;</source>
          <target state="translated">未来参考： &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging&quot;&gt;Git工具-交互式登台&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e317f2faafb831e4cbd09ebccd9fa3144e930ab8" translate="yes" xml:space="preserve">
          <source>Removed content is represented by lines beginning with &quot;-&quot;. You can prevent staging their removal by converting the &quot;-&quot; to a &quot; &quot; (space).</source>
          <target state="translated">删除的内容用&quot;-&quot;开头的行来表示。您可以通过将&quot;-&quot;转换为&quot;&quot;(空格)来防止分期删除。</target>
        </trans-unit>
        <trans-unit id="ef674289039b58b9fbd3bc60331d9ad9f7f2ac74" translate="yes" xml:space="preserve">
          <source>Right click and select &lt;code&gt;Stage Lines for commit&lt;/code&gt;</source>
          <target state="translated">右键单击并选择 &lt;code&gt;Stage Lines for commit&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8020cf0a2c0136cbe4dff7fd09abeadf6fd6efe3" translate="yes" xml:space="preserve">
          <source>Right click and select &lt;code&gt;UnStage Lines for commit&lt;/code&gt;</source>
          <target state="translated">右键单击并选择 &lt;code&gt;UnStage Lines for commit&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="56d808d074c0a88634b9cef4a33c2469daa0e812" translate="yes" xml:space="preserve">
          <source>Right click chunk of code which needs to be staged</source>
          <target state="translated">右键点击需要分阶段执行的代码块</target>
        </trans-unit>
        <trans-unit id="02aa629c8b16cd17a44f3a0efec2feed43937642" translate="yes" xml:space="preserve">
          <source>S</source>
          <target state="translated">S</target>
        </trans-unit>
        <trans-unit id="623ca25f66ecbf070f81282eaa31f40ab5a274c2" translate="yes" xml:space="preserve">
          <source>Screencast showing a sample usage</source>
          <target state="translated">显示样本使用情况的截屏</target>
        </trans-unit>
        <trans-unit id="a5417a62ca7d77b9ec3e57207087553d427fb00b" translate="yes" xml:space="preserve">
          <source>Select &lt;code&gt;Stage Hunk for commit&lt;/code&gt;</source>
          <target state="translated">选择 &lt;code&gt;Stage Hunk for commit&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ebce5d0eeaf118eee23bff549f7a7bee7579de19" translate="yes" xml:space="preserve">
          <source>Select the file from &lt;code&gt;unstagged Changes&lt;/code&gt; section</source>
          <target state="translated">从未 &lt;code&gt;unstagged Changes&lt;/code&gt; 部分中选择文件</target>
        </trans-unit>
        <trans-unit id="fa2b58c78176d060bcde0e4b996821d4aabc9272" translate="yes" xml:space="preserve">
          <source>Select the line/lines be staged</source>
          <target state="translated">选择要上演的线段</target>
        </trans-unit>
        <trans-unit id="6fae30d7ddd28643a4dfb0611be0f70d48956dd7" translate="yes" xml:space="preserve">
          <source>Select the line/lines to be staged</source>
          <target state="translated">选择要分阶段的线路</target>
        </trans-unit>
        <trans-unit id="ec430cad84d922bbf920abd01c484d1a3e8aa858" translate="yes" xml:space="preserve">
          <source>Selected file now moves to &lt;code&gt;Staged Changes&lt;/code&gt; Section</source>
          <target state="translated">所选文件现在移至&amp;ldquo; &lt;code&gt;Staged Changes&lt;/code&gt; 部分</target>
        </trans-unit>
        <trans-unit id="c7420a1e2bd38f2439eaf52e297b4afe5d8714c1" translate="yes" xml:space="preserve">
          <source>Set up the extension as follows:</source>
          <target state="translated">分机的设置如下:</target>
        </trans-unit>
        <trans-unit id="305d297ce07ffd48b4b0e32f0a495bd9f7e053e6" translate="yes" xml:space="preserve">
          <source>Should you use emacs, take a look at &lt;a href=&quot;https://github.com/magit/magit&quot;&gt;Magit&lt;/a&gt;, which provides a git interface for emacs. It supports &lt;a href=&quot;https://magit.vc/manual/magit/Staging-and-unstaging.html&quot;&gt;staging hunks&lt;/a&gt; (parts of files) quite well.</source>
          <target state="translated">如果您使用emacs，请看一下&lt;a href=&quot;https://github.com/magit/magit&quot;&gt;Magit&lt;/a&gt; ，它为emacs提供了git接口。 它很好地支持&lt;a href=&quot;https://magit.vc/manual/magit/Staging-and-unstaging.html&quot;&gt;暂存块&lt;/a&gt; （文件的一部分）。</target>
        </trans-unit>
        <trans-unit id="4b6dae5db01cab8d5dfa9eb338aee11d63798aa7" translate="yes" xml:space="preserve">
          <source>This is similar to the functionality of git add -p, and git add --interactive. In some cases meld is easier / quicker to use than git add -p. That's because meld allows you, for example, to:</source>
          <target state="translated">这与 git add -p 和 git add --interactive 的功能类似。在某些情况下,meld比git add -p更容易快速使用。这是因为meld允许你,比如说,你可以。</target>
        </trans-unit>
        <trans-unit id="107bcabe6072db121e67aa71721c126bc5b7a251" translate="yes" xml:space="preserve">
          <source>This is what &lt;code&gt;git add -h&lt;/code&gt; says about adding files this way (patching files):</source>
          <target state="translated">这是 &lt;code&gt;git add -h&lt;/code&gt; 关于以这种方式添加文件（修补文件）的内容：</target>
        </trans-unit>
        <trans-unit id="294fe49b14eb83ec799ed7501f42dc4441ab0366" translate="yes" xml:space="preserve">
          <source>This would bring up the ncurses interface which can be used as shown below. Pressing the following keys in the ncurses window will do certain actions:</source>
          <target state="translated">这样就会弹出ncurses界面,如下图所示。在 ncurses 窗口中按以下按键,可以进行一定的操作。</target>
        </trans-unit>
        <trans-unit id="b26ee33e338740e38745f396a6e8dc505b55c741" translate="yes" xml:space="preserve">
          <source>To not stage a deletion just replace &lt;code&gt;-&lt;/code&gt; with space .</source>
          <target state="translated">要不进行删除，只需将 &lt;code&gt;-&lt;/code&gt; 替换为空格。</target>
        </trans-unit>
        <trans-unit id="3d532a60dd3a1c232befda239f8834800f5a6bca" translate="yes" xml:space="preserve">
          <source>To not stage an addition just delete that line.</source>
          <target state="translated">为了不做加法,只需删除那一行。</target>
        </trans-unit>
        <trans-unit id="957a877ee67efecdb4f61b01204df1e0f35b8efb" translate="yes" xml:space="preserve">
          <source>Tried out &lt;code&gt;git add -p filename.x&lt;/code&gt;, but on a mac, I found gitx (&lt;a href=&quot;http://gitx.frim.nl/&quot;&gt;http://gitx.frim.nl/&lt;/a&gt; or &lt;a href=&quot;https://github.com/pieter/gitx&quot;&gt;https://github.com/pieter/gitx&lt;/a&gt;) to be much easier to commit exactly the lines I wanted to.</source>
          <target state="translated">尝试了 &lt;code&gt;git add -p filename.x&lt;/code&gt; ，但是在Mac上，我发现gitx（ &lt;a href=&quot;http://gitx.frim.nl/&quot;&gt;http://gitx.frim.nl/&lt;/a&gt;或&lt;a href=&quot;https://github.com/pieter/gitx&quot;&gt;https://github.com/pieter/gitx&lt;/a&gt; ）更加容易提交我想要的行。</target>
        </trans-unit>
        <trans-unit id="ca8bc6b6ead73dfa665a0d4dec1469cd39a4cc85" translate="yes" xml:space="preserve">
          <source>Using Atom allows working with a theme that has dark background (by default, &lt;a href=&quot;https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Graphical-Interfaces&quot;&gt;&lt;code&gt;git gui&lt;/code&gt;&lt;/a&gt; has a white background).</source>
          <target state="translated">使用Atom可以处理具有深色背景的主题（默认情况下， &lt;a href=&quot;https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Graphical-Interfaces&quot;&gt; &lt;code&gt;git gui&lt;/code&gt; &lt;/a&gt;具有白色背景）。</target>
        </trans-unit>
        <trans-unit id="99ec45b509d4548ed87f55167fbcd7ee680ecd01" translate="yes" xml:space="preserve">
          <source>Using the stash method gives you the opportunity to test, if your code still works, before you commit it.</source>
          <target state="translated">在提交之前,使用缓存方法让你有机会测试你的代码是否仍然有效。</target>
        </trans-unit>
        <trans-unit id="ff757ce89282a58ada7756dd6170fccc0c35abe9" translate="yes" xml:space="preserve">
          <source>Very good introductory screencasts &lt;a href=&quot;http://vimcasts.org/blog/2011/05/the-fugitive-series/&quot;&gt;here&lt;/a&gt; (see esp. &lt;a href=&quot;http://vimcasts.org/episodes/fugitive-vim-working-with-the-git-index/&quot;&gt;part 2&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;http://vimcasts.org/blog/2011/05/the-fugitive-series/&quot;&gt;此处有&lt;/a&gt;非常好的入门级截屏视频（请参见&lt;a href=&quot;http://vimcasts.org/episodes/fugitive-vim-working-with-the-git-index/&quot;&gt;第2部分&lt;/a&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d19085746262dfa0b4a2e48a79a7c3a79eade753" translate="yes" xml:space="preserve">
          <source>When I have a lot of changes, and will end up creating a few commits from the changes, then I want to save my starting point temporarily before staging things.</source>
          <target state="translated">当我有很多改动,最后会从改动中创建一些提交,那么我想在分期之前暂时保存我的出发点,然后再把东西分期。</target>
        </trans-unit>
        <trans-unit id="c26e0bd3b160568868c27879c9ec41b2a5d7c27c" translate="yes" xml:space="preserve">
          <source>When I make changes to a file in Git, how can I commit only some of the changes?</source>
          <target state="translated">当我在 Git 中对文件进行修改时,如何才能只提交部分修改?</target>
        </trans-unit>
        <trans-unit id="9ab19446ba2f329c6b2652821409e8c2a85fc007" translate="yes" xml:space="preserve">
          <source>When you're done, close meld, and git-meld-index will update the index to match the contents of the temporary directory on the right hand side of meld that you just edited.</source>
          <target state="translated">完成后,关闭meld,git-meld-index会更新索引,使之与刚才编辑的meld右侧的临时目录内容相匹配。</target>
        </trans-unit>
        <trans-unit id="1f25c863c7368dd1170c04b039b2bb6a11f88e0c" translate="yes" xml:space="preserve">
          <source>Whymarrh's answer is what I usually do, except sometimes there are lots of changes and I can tell I might make a mistake while staging things, and I want a committed state I can fall back on for a second pass.</source>
          <target state="translated">Whymarrrh的回答是我通常会做的,只是有时会有很多变化,我可以判断出我在分期的时候可能会出错,我希望有一个承诺的状态,我可以在第二遍的时候再来一次。</target>
        </trans-unit>
        <trans-unit id="c0fbf9c727bf6651110e82e636d1ff5fc2055fa3" translate="yes" xml:space="preserve">
          <source>With TortoiseGit:</source>
          <target state="translated">用TortoiseGit。</target>
        </trans-unit>
        <trans-unit id="d626449e752977866bd08eaedb98e61749874fc3" translate="yes" xml:space="preserve">
          <source>Worth noting that to use &lt;code&gt;git add --patch&lt;/code&gt; for a &lt;strong&gt;new file&lt;/strong&gt; you need to first add the file to index with &lt;code&gt;git add --intent-to-add&lt;/code&gt;:</source>
          <target state="translated">值得注意的是，要对&lt;strong&gt;新文件&lt;/strong&gt;使用 &lt;code&gt;git add --patch&lt;/code&gt; ，首先需要使用 &lt;code&gt;git add --intent-to-add&lt;/code&gt; 将文件添加到索引：</target>
        </trans-unit>
        <trans-unit id="5de17521f490d0afa8d7013ca6849d8c188412a3" translate="yes" xml:space="preserve">
          <source>You can see the diff of a file between working copy and index with &lt;code&gt;:Gdiff&lt;/code&gt;, and then add lines or hunks to the index using classic vim diff commands like &lt;code&gt;dp&lt;/code&gt;. Save the modifications in the index and commit with &lt;code&gt;:Gcommit&lt;/code&gt;, and you're done.</source>
          <target state="translated">您可以使用 &lt;code&gt;:Gdiff&lt;/code&gt; 查看工作副本和索引之间文件的差异，然后使用经典的vim diff命令（例如 &lt;code&gt;dp&lt;/code&gt; )在索引中添加行或块。 将修改保存到索引中，然后使用 &lt;code&gt;:Gcommit&lt;/code&gt; 提交， 即可完成。</target>
        </trans-unit>
        <trans-unit id="615e7bfe037e262f18abbd07e4ba664a365964a1" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;git add --interactive&lt;/code&gt; or &lt;code&gt;git add -p &amp;lt;&lt;em&gt;file&lt;/em&gt;&amp;gt;&lt;/code&gt;, and then &lt;code&gt;git commit&lt;/code&gt; (&lt;strong&gt;not&lt;/strong&gt;&lt;code&gt;git commit -a&lt;/code&gt;); see &lt;em&gt;Interactive mode&lt;/em&gt; in &lt;a href=&quot;http://git-scm.com/docs/git-add&quot;&gt;git-add&lt;/a&gt; manpage, or simply follow instructions.</source>
          <target state="translated">您可以使用 &lt;code&gt;git add --interactive&lt;/code&gt; 或 &lt;code&gt;git add -p &amp;lt;&lt;em&gt;file&lt;/em&gt;&amp;gt;&lt;/code&gt; ，然后使用 &lt;code&gt;git commit&lt;/code&gt; （ &lt;strong&gt;不是&lt;/strong&gt; &lt;code&gt;git commit -a&lt;/code&gt; ）； 请参见&lt;a href=&quot;http://git-scm.com/docs/git-add&quot;&gt;git-add&lt;/a&gt;联机帮助页中的&amp;ldquo; &lt;em&gt;交互&amp;rdquo;模式&lt;/em&gt; ，或直接按照说明进行操作。</target>
        </trans-unit>
        <trans-unit id="a401d330b7ab811a76458f02f4cc5cdfd7f43aec" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;git add --patch &amp;lt;filename&amp;gt;&lt;/code&gt; (or &lt;code&gt;-p&lt;/code&gt; for short), and git will begin to break down your file into what it thinks are sensible &quot;hunks&quot; (portions of the file). It will then prompt you with this question:</source>
          <target state="translated">您可以使用 &lt;code&gt;git add --patch &amp;lt;filename&amp;gt;&lt;/code&gt; （或简称 &lt;code&gt;-p&lt;/code&gt; ），并且git会开始将您的文件分解为它认为合理的&amp;ldquo;大头&amp;rdquo;（文件的一部分）。 然后它将提示您以下问题：</target>
        </trans-unit>
        <trans-unit id="a8d7ec41c3df53ed0c68c5ddca5e3337d59f3573" translate="yes" xml:space="preserve">
          <source>You'll see meld (or your configured git difftool) pop up with:</source>
          <target state="translated">你会看到meld (或你配置的git difftool)弹出与。</target>
        </trans-unit>
        <trans-unit id="86f7e437faa5a7fce15d1ddcb9eaeaea377667b8" translate="yes" xml:space="preserve">
          <source>a</source>
          <target state="translated">a</target>
        </trans-unit>
        <trans-unit id="5b599c890062a85dea5257d16b555dad8305bfda" translate="yes" xml:space="preserve">
          <source>added content:</source>
          <target state="translated">添加的内容。</target>
        </trans-unit>
        <trans-unit id="2bd1a9484c2c9f160372d06b72725e5d0cb958f7" translate="yes" xml:space="preserve">
          <source>allows visual range selection then &lt;code&gt;:'&amp;lt;,'&amp;gt;diffput&lt;/code&gt; or &lt;code&gt;:'&amp;lt;,'&amp;gt;diffget&lt;/code&gt; to stage/revert individual line changes.</source>
          <target state="translated">允许选择可视范围，然后使用 &lt;code&gt;:'&amp;lt;,'&amp;gt;diffput&lt;/code&gt; 或 &lt;code&gt;:'&amp;lt;,'&amp;gt;diffget&lt;/code&gt; 暂存 /还原单个行更改。</target>
        </trans-unit>
        <trans-unit id="939a3589d16f8375971efd6cba1bbef0770d3266" translate="yes" xml:space="preserve">
          <source>cd to your git repo and invoke it as follows:</source>
          <target state="translated">cd到你的git repo,并按以下方式调用它。</target>
        </trans-unit>
        <trans-unit id="3c363836cf4e16666669a25da280a1865c2d2874" translate="yes" xml:space="preserve">
          <source>d</source>
          <target state="translated">d</target>
        </trans-unit>
        <trans-unit id="21a709faaa441c7cbc72b92e9631d25156fb9de8" translate="yes" xml:space="preserve">
          <source>do not stage this hunk for the next commit</source>
          <target state="translated">不要在下一次提交的时候把这个大块的东西放进去</target>
        </trans-unit>
        <trans-unit id="5cb599d5f2640b95044ae8fbfeb0a86fef5ccb92" translate="yes" xml:space="preserve">
          <source>do not stage this hunk or any of the later hunks in the file</source>
          <target state="translated">不要把这个大块或后面的任何大块的文件中的任何大块放在一起</target>
        </trans-unit>
        <trans-unit id="58e6b3a414a1e090dfc6029add0f3555ccba127f" translate="yes" xml:space="preserve">
          <source>e</source>
          <target state="translated">e</target>
        </trans-unit>
        <trans-unit id="fac0778a946fcd984d819bd8ba1f9f2a148a6061" translate="yes" xml:space="preserve">
          <source>edit by hand and see 'live' diff updates (updated after every keypress)</source>
          <target state="translated">手动编辑,看到 &quot;实时 &quot;更新(每按一次键后更新)。</target>
        </trans-unit>
        <trans-unit id="54fd1711209fb1c0781092374132c66e79e2241b" translate="yes" xml:space="preserve">
          <source>g</source>
          <target state="translated">g</target>
        </trans-unit>
        <trans-unit id="9aef0c5ee589f04c2f5d9cecb27c8c7afb703d04" translate="yes" xml:space="preserve">
          <source>git-meld-index runs meld -- or any other git difftool (kdiff3, diffuse, etc.) -- to allow you to interactively stage changes to the git index (also known as the git staging area).</source>
          <target state="translated">git-meld-index运行meld --或其他任何git difftool (kdiff3,diffuse等)--允许你交互式地对git index (也被称为git staging area)进行阶段性修改。</target>
        </trans-unit>
        <trans-unit id="5c2dd944dde9e08881bef0894fe7b22a5c9c4b06" translate="yes" xml:space="preserve">
          <source>j</source>
          <target state="translated">j</target>
        </trans-unit>
        <trans-unit id="13fbd79c3d390e5d6585a21e11ff5ec1970cff0c" translate="yes" xml:space="preserve">
          <source>k</source>
          <target state="translated">k</target>
        </trans-unit>
        <trans-unit id="e624254c5f00cfb41d411f0289f1d7f313562900" translate="yes" xml:space="preserve">
          <source>leave this hunk undecided, see next hunk</source>
          <target state="translated">撇开这个不说,看下一个人吧</target>
        </trans-unit>
        <trans-unit id="73f1fb01121e6fe592576068c4c58768f12bf692" translate="yes" xml:space="preserve">
          <source>leave this hunk undecided, see next undecided hunk</source>
          <target state="translated">悬而未决,见下一个悬而未决的大块头</target>
        </trans-unit>
        <trans-unit id="44a80068c49c358887ccd8723bf2742be57110ef" translate="yes" xml:space="preserve">
          <source>leave this hunk undecided, see previous hunk</source>
          <target state="translated">未定之事,见前车之鉴</target>
        </trans-unit>
        <trans-unit id="8206a9870270114d62e9ac026a19d0a9dc3c7408" translate="yes" xml:space="preserve">
          <source>leave this hunk undecided, see previous undecided hunk</source>
          <target state="translated">悬而未决,见前车之鉴</target>
        </trans-unit>
        <trans-unit id="3c9a0c677d8b89380ca2574208ab057e3e3bb7f8" translate="yes" xml:space="preserve">
          <source>manually edit the current hunk</source>
          <target state="translated">手动编辑当前的大块</target>
        </trans-unit>
        <trans-unit id="ace76e0e158a4c766cceb7381c21cb78f042b860" translate="yes" xml:space="preserve">
          <source>modified content:</source>
          <target state="translated">修改后的内容。</target>
        </trans-unit>
        <trans-unit id="d1854cae891ec7b29161ccaf79a24b00c274bdaa" translate="yes" xml:space="preserve">
          <source>n</source>
          <target state="translated">n</target>
        </trans-unit>
        <trans-unit id="0cfaab1d27c93e0d310a84aa1c86c7d62a3a71f4" translate="yes" xml:space="preserve">
          <source>navigate to a change without saying 'n' to every change you want to skip</source>
          <target state="translated">导航到一个变化,而不用对每一个你想跳过的变化说'n',就能导航到一个变化。</target>
        </trans-unit>
        <trans-unit id="d9c887040bab16e786e9865b9ca42745e486c7e2" translate="yes" xml:space="preserve">
          <source>or the short-form 
&lt;code&gt;
git add -p filename.txt
&lt;/code&gt;</source>
          <target state="translated">或简短的 &lt;code&gt; git add -p filename.txt &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="37d153789c2dbb68f9608a65efc226fa132b90a9" translate="yes" xml:space="preserve">
          <source>print hunk help</source>
          <target state="translated">打印大块的帮助</target>
        </trans-unit>
        <trans-unit id="22ea1c649c82946aa6e479e1ffd321e4a318b1b0" translate="yes" xml:space="preserve">
          <source>q</source>
          <target state="translated">q</target>
        </trans-unit>
        <trans-unit id="615eb261f17dea328d8bd3ad7d422948e7c79bf7" translate="yes" xml:space="preserve">
          <source>quit; do not stage this hunk or any of the remaining hunks</source>
          <target state="translated">不干了;不要把这个大块头或其余的大块头放在舞台上。</target>
        </trans-unit>
        <trans-unit id="255ef44dfeab3c6fe814ae0eafeb12f21f555dc5" translate="yes" xml:space="preserve">
          <source>removed content:</source>
          <target state="translated">已删除的内容。</target>
        </trans-unit>
        <trans-unit id="69cb0d9032f44652297ddcc29503be1db22ac8d7" translate="yes" xml:space="preserve">
          <source>right click on the file and use &lt;code&gt;Context Menu &amp;rarr; Restore after commit&lt;/code&gt;. This will create a copy of the file as it is. Then you can edit the file, e.g. in TortoiseGitMerge and undo all the changes you don't want to commit. After saving those changes you can commit the file.</source>
          <target state="translated">右键单击文件，然后使用 &lt;code&gt;Context Menu &amp;rarr; Restore after commit&lt;/code&gt; 。 这将按原样创建文件的副本。 然后，您可以编辑文件，例如在TortoiseGitMerge中并撤消所有您不想提交的更改。 保存这些更改后，您可以提交文件。</target>
        </trans-unit>
        <trans-unit id="a0f1490a20d0211c997b44bc357e1972deab8ae3" translate="yes" xml:space="preserve">
          <source>s</source>
          <target state="translated">s</target>
        </trans-unit>
        <trans-unit id="6bf011b4c4e4a3b51d486045f81bb5c55e449ea8" translate="yes" xml:space="preserve">
          <source>search for a hunk matching the given regex</source>
          <target state="translated">搜索匹配的大块块</target>
        </trans-unit>
        <trans-unit id="64910625a6143adc6a9492187c237d484695bd48" translate="yes" xml:space="preserve">
          <source>see intra-line diffs</source>
          <target state="translated">见线内差价</target>
        </trans-unit>
        <trans-unit id="0487db7276da0fa004abf7a968b5acde74288481" translate="yes" xml:space="preserve">
          <source>see more context</source>
          <target state="translated">查看更多语境</target>
        </trans-unit>
        <trans-unit id="46e65c804a644f61e13d7053473dec3fe1fbf881" translate="yes" xml:space="preserve">
          <source>select a hunk to go to</source>
          <target state="translated">挑大梁</target>
        </trans-unit>
        <trans-unit id="72f562ac46d88f8ce6d11b88676fd931e24aa771" translate="yes" xml:space="preserve">
          <source>split the current hunk into smaller hunks</source>
          <target state="translated">分块</target>
        </trans-unit>
        <trans-unit id="b7945fc58b43436a06f81e0c40bca7ac83f99327" translate="yes" xml:space="preserve">
          <source>stage this hunk and all later hunks in the file</source>
          <target state="translated">阶段这个大块和文件中所有后来的大块</target>
        </trans-unit>
        <trans-unit id="c2f61885ca5863b63181678e5c4401fc217d8536" translate="yes" xml:space="preserve">
          <source>stage this hunk for the next commit</source>
          <target state="translated">摊上这块大块</target>
        </trans-unit>
        <trans-unit id="95cb0bfd2977c761298d9624e4b4d4c72a39974a" translate="yes" xml:space="preserve">
          <source>y</source>
          <target state="translated">y</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
