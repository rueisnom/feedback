<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/1056728">
    <body>
      <group id="1056728">
        <trans-unit id="8ebe5c00c9152c2a29452c0429ebce7224a6a0fa" translate="yes" xml:space="preserve">
          <source>&quot;The contents of the String are implementation-dependent&quot;</source>
          <target state="translated">&quot;문자열의 내용은 구현에 따라 다릅니다&quot;</target>
        </trans-unit>
        <trans-unit id="58d3fd1405412176e917bcb2f9418f496041f179" translate="yes" xml:space="preserve">
          <source>(See also &lt;a href=&quot;https://jsfiddle.net/az0ab0Lm/1/&quot;&gt;&lt;strong&gt;this Fiddle&lt;/strong&gt;&lt;/a&gt;).</source>
          <target state="translated">( &lt;a href=&quot;https://jsfiddle.net/az0ab0Lm/1/&quot;&gt;&lt;strong&gt;이 Fiddle&lt;/strong&gt;&lt;/a&gt; 도 참조하십시오).</target>
        </trans-unit>
        <trans-unit id="ac98b31ad2f5eb41b7075765db2403e374944e82" translate="yes" xml:space="preserve">
          <source>(See also &lt;a href=&quot;https://jsfiddle.net/az0ab0Lm/2/&quot;&gt;&lt;strong&gt;this Fiddle&lt;/strong&gt;&lt;/a&gt;).</source>
          <target state="translated">( &lt;a href=&quot;https://jsfiddle.net/az0ab0Lm/2/&quot;&gt;&lt;strong&gt;이 Fiddle&lt;/strong&gt;&lt;/a&gt; 도 참조하십시오).</target>
        </trans-unit>
        <trans-unit id="394f25fa51d18c1ef08249a77940691c429c71f9" translate="yes" xml:space="preserve">
          <source>09 August 2013</source>
          <target state="translated">2013 년 8 월 9 일</target>
        </trans-unit>
        <trans-unit id="a08b9de555d871c1fbf1d22c6f872de2c90d486c" translate="yes" xml:space="preserve">
          <source>2013 9 Aug</source>
          <target state="translated">2013 년 8 월 9 일</target>
        </trans-unit>
        <trans-unit id="e1808e038d73a2e67b2c73caad1366ea6792c7b4" translate="yes" xml:space="preserve">
          <source>2013 Aug 09</source>
          <target state="translated">2013 년 8 월 09 일</target>
        </trans-unit>
        <trans-unit id="9f9d758f0400cb85f5531b7ed462464405c2feb1" translate="yes" xml:space="preserve">
          <source>2013 August 09</source>
          <target state="translated">2013 년 8 월 09 일</target>
        </trans-unit>
        <trans-unit id="86984c19e3d33e2abd749dd3be71d242a57aaaa1" translate="yes" xml:space="preserve">
          <source>2013/Aug/09</source>
          <target state="translated">2013/Aug/09</target>
        </trans-unit>
        <trans-unit id="4911b625eb5e48c162c0244fd0170d28558f5170" translate="yes" xml:space="preserve">
          <source>2013/Aug/9</source>
          <target state="translated">2013/Aug/9</target>
        </trans-unit>
        <trans-unit id="8370ff8837ccd8498c3b5c7e99863985e62e0191" translate="yes" xml:space="preserve">
          <source>2013/August/09</source>
          <target state="translated">2013/August/09</target>
        </trans-unit>
        <trans-unit id="f0520d97800f21976c30eed254fb557da8ed11aa" translate="yes" xml:space="preserve">
          <source>2013/August/9</source>
          <target state="translated">2013/August/9</target>
        </trans-unit>
        <trans-unit id="ccb8622f1509ced8bcfd055c92497186bd209379" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.javascriptsource.com/repository/javascripts/2009/03/880961/JS_Simple_Date_Format.zip&quot;&gt;JsSimpleDateFormat&lt;/a&gt; is a library that can format the date object and parse the formatted string back to Date object. It uses the Java format (SimpleDateFormat class). The name of months and days can be localized.</source>
          <target state="translated">&lt;a href=&quot;http://www.javascriptsource.com/repository/javascripts/2009/03/880961/JS_Simple_Date_Format.zip&quot;&gt;JsSimpleDateFormat&lt;/a&gt; 은 날짜 객체를 포맷하고 포맷 된 문자열을 다시 Date 객체로 구문 분석 할 수있는 라이브러리입니다. Java 형식 (SimpleDateFormat 클래스)을 사용합니다. 월과 일의 이름은 현지화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="69c1646795cc29f6118a2086f12bb8d3f9dc29a2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(*) lightweight meaning 9.3KB minified + gzipped in the smallest possible setup (feb 2014)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;(*) 가벼운 의미 9.3KB 축소 및 가능한 가장 작은 설정에서 gzipped (2014 년 2 월)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="43aa3117c1a2cc592f1cf2d1a383b7fe843ba4ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;(*)&lt;/strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString&quot;&gt;&lt;strong&gt;According to the MDN&lt;/strong&gt;&lt;/a&gt;, &quot;Modern browsers&quot; means Chrome 24+, Firefox 29+, IE11, Edge12+, Opera 15+ &amp;amp; Safari &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/56490/what-does-nightly-builds-mean&quot;&gt;&lt;strong&gt;nightly build&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString&quot;&gt;&lt;strong&gt;MDN에 따르면&lt;/strong&gt;&lt;/a&gt; &quot;현대 브라우저&quot;는 Chrome 24 이상, Firefox 29 이상, IE11, Edge12 이상, Opera 15 이상 및 Safari &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/56490/what-does-nightly-builds-mean&quot;&gt;&lt;strong&gt;야간 빌드를 의미합니다&lt;/strong&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="abbfb636aafdc4e967f6266a371cccd6e4c348a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;http://momentjs.com&quot;&gt;Moment.js&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;http://momentjs.com&quot;&gt;Moment.js&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="56bdf945673a85a98139128a373da6cbd2c4e554" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Any combination of [Full Year], [Month Name] and [Date Number] separated by spaces&lt;/strong&gt; - Month name can be in either short or long format, and date number can be with or without a leading zero.</source>
          <target state="translated">&lt;strong&gt;공백으로 구분 된 [Full Year], [Month Name] 및 [Date Number]의 조합&lt;/strong&gt; -Month name은 짧은 형식 또는 긴 형식 일 수 있으며 날짜 숫자는 선행 0이 있거나없는 형식 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="19acc1433de180fc96c6335d7425c88ea1387ff9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;CODE&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;CODE&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c1211658cdfed6d835b9c05999e42df3a7d43cf1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT&lt;/strong&gt;: Tyler Forsythe points out, that datejs is outdated. I use it in my current project and hadn't any trouble with it, however you should be aware of this and consider alternatives.</source>
          <target state="translated">&lt;strong&gt;편집&lt;/strong&gt; : Tyler Forsythe는 datejs가 구식이라고 지적합니다. 나는 현재 프로젝트에서 그것을 사용하고 아무 문제가 없었지만, 당신은 이것을 알고 대안을 고려해야합니다.</target>
        </trans-unit>
        <trans-unit id="9184099b9d5087267394bbc23a30d1c5015b359d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Editor's note:&lt;/strong&gt; The following approach is the asker's attempt that worked on a particular browser but does &lt;em&gt;not&lt;/em&gt; work in general; &lt;strong&gt;see the answers on this page&lt;/strong&gt; to see some actual solutions.</source>
          <target state="translated">&lt;strong&gt;편집자 주 :&lt;/strong&gt; 다음 접근 방식은 특정 브라우저에서 작동했지만 일반적으로 작동하지 &lt;em&gt;않는&lt;/em&gt; 시도 자의 시도입니다. 실제 해결책을 보려면 &lt;strong&gt;이 페이지의 답변&lt;/strong&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f35097e2b1b38de5ec88177ea2b0967e5b0e99a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;NOTE:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="762b0b987efcf101541560526e8d90e402907514" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;References&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;References&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aa09b1a3058d56edd04f134fd7c48d7c250cde5f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Resources&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Resources&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1cb021c737f247e65e724f7eb367810088853454" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sample usage:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;샘플 사용법 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d8d97e3f2670d27077e8554771499c964d22ac6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;USE&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;USE&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cb036d47b4951903b72f01d8ef22e8a73e6f8858" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using month names:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;월 이름 사용 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1e87bd8086b97bf28f63ffc82c1ce23a55a2e6de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[Full Year]-[Month Number]-[Date Number]&lt;/strong&gt; - Month and Date Number must include leading zeros (this is the format that the &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.1/en/datetime.html&quot;&gt;MySQL Date type&lt;/a&gt; uses)</source>
          <target state="translated">&lt;strong&gt;[Full Year]-[Month Number]-[Date Number]&lt;/strong&gt; -Month and Date Number는 선행 0을 포함해야합니다 ( &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.1/en/datetime.html&quot;&gt;MySQL Date 유형이&lt;/a&gt; 사용하는 형식 임)</target>
        </trans-unit>
        <trans-unit id="f8c65f77ac21681d72033298bc24d458cb9c2f37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[Full Year]/[Month]/[Date number]&lt;/strong&gt; - Month can be either the number with or without a leading zero or the month name in short or long format, and date number can be with or without a leading zero.</source>
          <target state="translated">&lt;strong&gt;[Full Year] / [Month] / [Date number]&lt;/strong&gt; -Month는 선행 0이 있거나없는 숫자 또는 짧은 또는 긴 형식의 월 이름 일 수 있으며 날짜 숫자는 선행 0이 있거나없는 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6503e0b877945cc606ecb61795423f721a3b085b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[Month]/[Full Year]/[Date Number]&lt;/strong&gt; - Month can be either the number with or without a leading zero or the month name in short or long format, and date number can be with or without a leading zero.</source>
          <target state="translated">&lt;strong&gt;[Month] / [Full Year] / [Date Number]&lt;/strong&gt; -Month는 앞에 0이 있거나없는 숫자이거나 짧거나 긴 형식의 월 이름이 될 수 있으며 날짜 숫자는 앞에 0이 있거나없는 숫자 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cf114a4079c245b58c7eb276a64c660d62431b03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toDateString&lt;/strong&gt;: Implementation dependent, show only the date.</source>
          <target state="translated">&lt;strong&gt;toDateString&lt;/strong&gt; : 구현에 따라 다르며 날짜 만 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="d449150196f8a97c5dac501ab0afe7927c86bc84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toISOString&lt;/strong&gt;: Show ISO 8601 date and time.</source>
          <target state="translated">&lt;strong&gt;toISOString&lt;/strong&gt; : ISO 8601 날짜 및 시간을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="b87d940c1a7d4428305f8d57f4f8bbfb41f83210" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toJSON&lt;/strong&gt;: Stringifier for JSON.</source>
          <target state="translated">&lt;strong&gt;toJSON&lt;/strong&gt; : JSON 용 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="d62776092ec81e94bb95c1a60a1bbba485a1a55a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toLocaleDateString&lt;/strong&gt;: Implementation dependent, a date in locale format.</source>
          <target state="translated">&lt;strong&gt;toLocaleDateString&lt;/strong&gt; : 구현에 따라 다르며 로캘 형식의 날짜입니다.</target>
        </trans-unit>
        <trans-unit id="15af5141cf91c453da4dadd2030192f75f52710e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toLocaleString&lt;/strong&gt;: Implementation dependent, a date&amp;amp;time in locale format.</source>
          <target state="translated">&lt;strong&gt;toLocaleString&lt;/strong&gt; : 구현에 따라, 로케일 형식의 날짜 및 시간입니다.</target>
        </trans-unit>
        <trans-unit id="cc4bd4e71898a87ae28ace2a736a913a4237affe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toLocaleTimeString&lt;/strong&gt;: Implementation dependent, a time in locale format.</source>
          <target state="translated">&lt;strong&gt;toLocaleTimeString&lt;/strong&gt; : 구현에 따라 다르며 로케일 형식의 시간입니다.</target>
        </trans-unit>
        <trans-unit id="88bd54e450e605aba3b2ad14b3cd0037df5ac04d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toString&lt;/strong&gt;: Generic toString for Date.</source>
          <target state="translated">&lt;strong&gt;toString&lt;/strong&gt; : Date의 일반 toString입니다.</target>
        </trans-unit>
        <trans-unit id="3a3fc6fb939e0085074cefc8e6d65d3381d91750" translate="yes" xml:space="preserve">
          <source>A few examples:</source>
          <target state="translated">몇 가지 예 :</target>
        </trans-unit>
        <trans-unit id="81283a532c4be641711c15d68082ba6a383e838e" translate="yes" xml:space="preserve">
          <source>A more advanced function could generate configurable output based on a format parameter. There are a couple of good examples in this same page.</source>
          <target state="translated">고급 기능은 형식 매개 변수를 기반으로 구성 가능한 출력을 생성 할 수 있습니다. 이 같은 페이지에는 몇 가지 좋은 예가 있습니다.</target>
        </trans-unit>
        <trans-unit id="3e48d3ff441b037822ac67e234117e44abc2fd9c" translate="yes" xml:space="preserve">
          <source>AFAIK, pure JavaScript doesn't support format specifiers &lt;strong&gt;the way you have indicated you'd like to use them&lt;/strong&gt;.  But it does support methods for formatting dates and/or times, such as &lt;code&gt;.toLocaleDateString()&lt;/code&gt;, &lt;code&gt;.toLocaleTimeString()&lt;/code&gt;, and &lt;code&gt;.toUTCString()&lt;/code&gt;.</source>
          <target state="translated">AFAIK, 순수 JavaScript는 형식 지정자를 사용 &lt;strong&gt;하려는 방식을&lt;/strong&gt; 지원하지 않습니다. 그러나 &lt;code&gt;.toLocaleDateString()&lt;/code&gt; , &lt;code&gt;.toLocaleTimeString()&lt;/code&gt; 및 &lt;code&gt;.toUTCString()&lt;/code&gt; 과 같은 날짜 및 / 또는 시간 형식화 방법을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="319b6bedfe935439fc96568d7d71290d45517b52" translate="yes" xml:space="preserve">
          <source>All browsers</source>
          <target state="translated">모든 브라우저</target>
        </trans-unit>
        <trans-unit id="6b134d179c1e5ebb6ed2eb728129655503743071" translate="yes" xml:space="preserve">
          <source>All other numbers are interpreted as &amp;ldquo;date components&amp;rdquo;.</source>
          <target state="translated">다른 모든 숫자는&amp;ldquo;날짜 구성 요소&amp;rdquo;로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="24191b53350478480af9945bba50a31b32c847a0" translate="yes" xml:space="preserve">
          <source>All words that start with the first three digits of a month are interpreted as the month.</source>
          <target state="translated">한 달의 처음 세 자리 숫자로 시작하는 모든 단어는 해당 월로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="a835db62a4378918567ec54b8551ec58e9a13d4b" translate="yes" xml:space="preserve">
          <source>Also here I couldn't find any documentation on all the ways we can format the date object into a string.</source>
          <target state="translated">또한 날짜 객체를 문자열로 포맷 할 수있는 모든 방법에 대한 문서를 찾을 수 없었습니다.</target>
        </trans-unit>
        <trans-unit id="d6c603d37d9fc02df74f9c7e73a29f2ed402f555" translate="yes" xml:space="preserve">
          <source>Also note that the &lt;strong&gt;Date Object Properties&lt;/strong&gt; section provides a link to &lt;a href=&quot;http://www.w3schools.com/jsref/jsref_prototype_date.asp&quot;&gt;&lt;code&gt;prototype&lt;/code&gt;&lt;/a&gt;, which illustrates some ways you can extend the Date object with custom methods.  There has been &lt;a href=&quot;http://perfectionkills.com/extending-built-in-native-objects-evil-or-not/&quot;&gt;some debate&lt;/a&gt; in the JavaScript community over the years about whether or not this is best practice, and I am not advocating for or against it, just pointing out its existence.</source>
          <target state="translated">또한 &lt;strong&gt;날짜 개체 속성&lt;/strong&gt; 섹션에는 &lt;a href=&quot;http://www.w3schools.com/jsref/jsref_prototype_date.asp&quot;&gt; &lt;code&gt;prototype&lt;/code&gt; 에&lt;/a&gt; 대한 링크가 있으며,이 메서드는 사용자 지정 방법으로 날짜 개체를 확장 할 수있는 몇 가지 방법을 보여줍니다. 수년에 걸쳐 JavaScript 커뮤니티에서 이것이 모범 사례인지 아닌지에 대한 &lt;a href=&quot;http://perfectionkills.com/extending-built-in-native-objects-evil-or-not/&quot;&gt;논쟁&lt;/a&gt; 이 있었고, 나는 그것이 존재하는지 지적하면서 그것을 주장하거나 반대하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d2eb98bd0de830f5731a65b846e8e483046f2f58" translate="yes" xml:space="preserve">
          <source>Also valid in &quot;modern browsers&quot; (or in other words all browsers except IE9 and below)</source>
          <target state="translated">&quot;현대 브라우저&quot;(또는 IE9 이하를 제외한 모든 브라우저)에서도 유효</target>
        </trans-unit>
        <trans-unit id="237bdf333911975e526f9262114e5dad917509d2" translate="yes" xml:space="preserve">
          <source>And we can further infer that dates are expected to be in a modified ISO 8601 Extended Format, as specified here:</source>
          <target state="translated">또한 날짜가 여기에 지정된대로 수정 된 ISO 8601 확장 형식 일 것으로 예상됩니다.</target>
        </trans-unit>
        <trans-unit id="5d1af9943967d40553a9297a8b384a35122f8d34" translate="yes" xml:space="preserve">
          <source>Aug 9 2013</source>
          <target state="translated">2013 년 8 월 9 일</target>
        </trans-unit>
        <trans-unit id="fd105e2bf900d5f1b4c39161809ab24b76edfd94" translate="yes" xml:space="preserve">
          <source>Aug/2013/09</source>
          <target state="translated">Aug/2013/09</target>
        </trans-unit>
        <trans-unit id="d510a20c1b95f9648c28ce9937e220b9b7243991" translate="yes" xml:space="preserve">
          <source>Aug/2013/9</source>
          <target state="translated">Aug/2013/9</target>
        </trans-unit>
        <trans-unit id="12372c7bb2acb7b6362bf3ffaa48f57cc35610af" translate="yes" xml:space="preserve">
          <source>August 2013 09</source>
          <target state="translated">2013 년 8 월 09</target>
        </trans-unit>
        <trans-unit id="b623a37f638b2241cbb33bdc9588b286daecad49" translate="yes" xml:space="preserve">
          <source>August/2013/09</source>
          <target state="translated">August/2013/09</target>
        </trans-unit>
        <trans-unit id="adb64d3866f80cf9591aa1582c085f8a232265b3" translate="yes" xml:space="preserve">
          <source>August/2013/9</source>
          <target state="translated">August/2013/9</target>
        </trans-unit>
        <trans-unit id="461e78e221d0c01f168ee4d775ec261a544a1652" translate="yes" xml:space="preserve">
          <source>Basically, you have three methods and you have to combine the strings for yourself:</source>
          <target state="translated">기본적으로 세 가지 방법이 있으며 문자열을 직접 결합해야합니다.</target>
        </trans-unit>
        <trans-unit id="156939da701f32e70e53db07bd4d6fc51b4bc587" translate="yes" xml:space="preserve">
          <source>Both of those functions should look familiar, but this does not immediately answer your question and what quantifies as an acceptable &amp;ldquo;date format&amp;rdquo; requires further explanation. When you pass a string to new Date(), it will call the prototype (note that I'm using the word &lt;em&gt;prototype&lt;/em&gt; loosely; the versions may be individual functions, or it may be part of a conditional statement in a single function) for &lt;strong&gt;new Date(value)&lt;/strong&gt; with your string as the argument for the &amp;ldquo;value&amp;rdquo; parameter. This function will first check whether it is a number or a string. The documentation for this function can be found here:</source>
          <target state="translated">이 두 함수는 모두 친숙해 보일 것이지만, 이것이 바로 귀하의 질문에 대답하지는 않으며 수용 가능한 &quot;날짜 형식&quot;으로 정량화하는 것은 추가 설명이 필요합니다. 문자열을 new Date ()에 전달하면 프로토 타입을 호출합니다 (prototype이라는 단어를 느슨하게 사용하고 있습니다. 버전은 개별 함수이거나 단일 함수에서 조건 문의 일부일 수 있음). 문자열을&amp;ldquo;value&amp;rdquo;매개 변수의 인수로 사용하는 &lt;strong&gt;새로운 날짜 (값)&lt;/strong&gt; . 이 함수는 먼저 숫자인지 문자열인지 확인합니다. 이 기능에 대한 설명서는 다음에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="df17feb52ee10a0b2b083f6cd0c801c1948f59bb" translate="yes" xml:space="preserve">
          <source>Custom formatting function:</source>
          <target state="translated">맞춤 형식 지정 기능 :</target>
        </trans-unit>
        <trans-unit id="215fe7d89c494c03c175f31265f32bb1c7ec5e2b" translate="yes" xml:space="preserve">
          <source>DP_DateExtensions Library</source>
          <target state="translated">DP_DateExtensions 라이브러리</target>
        </trans-unit>
        <trans-unit id="9224d74f25db171b77441c2783969d67515b2aea" translate="yes" xml:space="preserve">
          <source>DateJS is certainly full-featured, but I'd recommend &lt;a href=&quot;http://blog.stevenlevithan.com/archives/date-time-format&quot;&gt;this MUCH simpler lib (JavaScript Date Format)&lt;/a&gt; which I prefer  simply because it's only 120 lines or so.</source>
          <target state="translated">DateJS는 확실히 모든 기능을 갖추고 있지만 120 줄 정도이기 때문에 선호하는 &lt;a href=&quot;http://blog.stevenlevithan.com/archives/date-time-format&quot;&gt;이 훨씬 간단한 lib (JavaScript Date Format)&lt;/a&gt; 를 권장 합니다 .</target>
        </trans-unit>
        <trans-unit id="afba89d9308eb3bee8421b4a271b91b7c7e36cae" translate="yes" xml:space="preserve">
          <source>Essentially, when dealing with javascript, you&amp;rsquo;re dealing with a derivative (javascript specific to the browser) of an implementation (javascript itself). Google&amp;rsquo;s V8, for example, implements ECMAScript 5.0, but Internet Explorer&amp;rsquo;s JScript doesn&amp;rsquo;t attempt to conform to any ECMAScript standard, yet Internet&amp;nbsp;Explorer&amp;nbsp;9 does conform to ECMAScript 5.0.</source>
          <target state="translated">본질적으로 자바 스크립트를 처리 할 때 구현 (자바 스크립트 자체)의 파생물 (브라우저에 특정한 자바 스크립트)을 처리합니다. 예를 들어 Google의 V8은 ECMAScript 5.0을 구현하지만 Internet Explorer의 JScript는 ECMAScript 표준을 따르지 않지만 Internet Explorer 9는 ECMAScript 5.0을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="0483beb1135269908e7a45fb455b6f6963675242" translate="yes" xml:space="preserve">
          <source>Example :</source>
          <target state="translated">예 :</target>
        </trans-unit>
        <trans-unit id="1fabb1683d22d0469c9e9cac437dfd3fa193ab75" translate="yes" xml:space="preserve">
          <source>Example code:</source>
          <target state="translated">예제 코드 :</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">사용법 예 :</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">스 니펫 확장</target>
        </trans-unit>
        <trans-unit id="89ab4e92b02edbfc12ec7c3cbc134c5834677c24" translate="yes" xml:space="preserve">
          <source>For fixed formats, a simple function make the job. Following example generate the international format YYYY-MM-DD:</source>
          <target state="translated">고정 형식의 경우 간단한 기능으로 작업이 가능합니다. 다음 예는 국제 형식 YYYY-MM-DD를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="6b3c835fe3e86a3e2fa59918b389b2620cd398f0" translate="yes" xml:space="preserve">
          <source>Formatting and especially parsing dates in JavaScript can be a bit of a headache. Not all browsers handle dates in the same way. So while it's useful to know the base methods, its more practical to use a helper library.</source>
          <target state="translated">JavaScript에서 날짜를 형식화하고 특히 구문 분석하는 것은 약간 까다로울 수 있습니다. 모든 브라우저가 동일한 방식으로 날짜를 처리하는 것은 아닙니다. 따라서 기본 메소드를 아는 것이 유용하지만 헬퍼 라이브러리를 사용하는 것이 더 실용적입니다.</target>
        </trans-unit>
        <trans-unit id="5e20b191436ba78d6a13b6ff78b42967d24bb3c6" translate="yes" xml:space="preserve">
          <source>Framework free, limited but light</source>
          <target state="translated">프레임 워크가없고 제한적이지만 가벼움</target>
        </trans-unit>
        <trans-unit id="22cab2219190e6ad9eb54540338877c187dc078c" translate="yes" xml:space="preserve">
          <source>From this you can expect basic functionality, but what &amp;ldquo;ought&amp;rdquo; to be is not inherently what &amp;ldquo;is&amp;rdquo;. I&amp;rsquo;m going to go a little in depth with this procedurally though, as it appears only three people actually answered the question (Scott, goofballLogic, and peller namely) which, to me, suggests most people are unaware of what actually happens when you create a Date object.</source>
          <target state="translated">이것으로부터 기본 기능을 기대할 수 있지만&amp;ldquo;필요한&amp;rdquo;것은 본질적으로&amp;ldquo;있는&amp;rdquo;것이 아닙니다. 나는 단지 세 사람 만이 실제로 질문에 답한 것처럼 보이므로 (Scott, goofballLogic 및 peller) 즉, 대부분의 사람들은 당신이 실제로 어떤 일이 일어나고 있는지 알지 못한다 Date 객체를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="797ded1cb074fdfadda99abfcd54257663d72435" translate="yes" xml:space="preserve">
          <source>From this, we can deduce that to get the string formatting allowed for new Date(value), we have to look at the method Date.parse(string). The documentation for this method can be found here:</source>
          <target state="translated">이를 통해 새로운 Date (value)에 허용되는 문자열 형식을 얻으려면 Date.parse (string) 메소드를 확인해야합니다. 이 방법에 대한 설명서는 다음에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1ed5866b4b0020cb1fe4b7cf51bf48fa489826b" translate="yes" xml:space="preserve">
          <source>Functions such as the samples below could be used to accomplish formatting fairly easily.</source>
          <target state="translated">아래 샘플과 같은 기능을 사용하여 포맷을 매우 쉽게 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="94b126616ecade2ae2606a5fd2ba3d2b7b6ff56f" translate="yes" xml:space="preserve">
          <source>Google&amp;rsquo;s V8, date.js, DateConstructor</source>
          <target state="translated">구글의 V8, date.js, DateConstructor</target>
        </trans-unit>
        <trans-unit id="b22dc0cb06620e63bb33dd9f96d926eaf027c323" translate="yes" xml:space="preserve">
          <source>Google&amp;rsquo;s V8, date.js, DateParse</source>
          <target state="translated">구글의 V8, date.js, DateParse</target>
        </trans-unit>
        <trans-unit id="15f24e286a9a678cb2ba3e5c226eae1005009b21" translate="yes" xml:space="preserve">
          <source>Google&amp;rsquo;s V8, runtime.cc, %DateParseString</source>
          <target state="translated">Google의 V8, runtime.cc, % DateParseString</target>
        </trans-unit>
        <trans-unit id="b6133ba61c3e572cccbbdf2b89341728a1c0f187" translate="yes" xml:space="preserve">
          <source>Google's V8, dateparser-inl.h, DateParser::Parse</source>
          <target state="translated">Google의 V8, dateparser-inl.h, DateParser :: Parse</target>
        </trans-unit>
        <trans-unit id="9a49d653b56cf99344b3fdd68c872aae5b737771" translate="yes" xml:space="preserve">
          <source>Have a look at &lt;a href=&quot;http://docs.jquery.com/UI/Datepicker/formatDate&quot;&gt;jQuery UI datepicker formatDate&lt;/a&gt;, the examples.</source>
          <target state="translated">&lt;a href=&quot;http://docs.jquery.com/UI/Datepicker/formatDate&quot;&gt;jQuery UI datepicker formatDate&lt;/a&gt; 예제를 살펴보십시오.</target>
        </trans-unit>
        <trans-unit id="b6417d0ed712ddb7d0b22551a01de7cc0ed38ec4" translate="yes" xml:space="preserve">
          <source>Having looked through several of the options provided in other answers, I decided to write my own limited but simple solution that others may also find useful.</source>
          <target state="translated">다른 답변에서 제공되는 몇 가지 옵션을 살펴본 후 다른 사람들도 유용하게 사용할 수있는 제한적이지만 간단한 솔루션을 작성하기로 결정했습니다.</target>
        </trans-unit>
        <trans-unit id="c36ef013f2a88dc8907e59aa3361eb63f3bd8dd8" translate="yes" xml:space="preserve">
          <source>Here's a function I use a lot. The result is yyyy-mm-dd hh:mm:ss.nnn.</source>
          <target state="translated">여기 제가 많이 사용하는 기능이 있습니다. 결과는 yyyy-mm-dd hh : mm : ss.nnn입니다.</target>
        </trans-unit>
        <trans-unit id="a460d0df0162832679dedc7cafe8979e7acac7fc" translate="yes" xml:space="preserve">
          <source>However, the datepicker only formats dates, and cannot format times.</source>
          <target state="translated">그러나 날짜 선택기는 날짜 만 형식화하고 시간은 형식화 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c9d7a7c12f2adc466e804e068645892b51e580b0" translate="yes" xml:space="preserve">
          <source>However, we can recognize from experience that javascript&amp;rsquo;s Date object accepts other formats (enforced by the existence of this question in the first place), and this is okay because ECMAScript allows for implementation specific formats. However, that still doesn&amp;rsquo;t answer the question of what documentation is available on the available formats, nor what formats are actually allowed. We&amp;rsquo;re going to look at Google&amp;rsquo;s javascript implementation, V8; please note I&amp;rsquo;m not suggesting this is the &amp;ldquo;best&amp;rdquo; javascript engine (how can one define &amp;ldquo;best&amp;rdquo; or even &amp;ldquo;good&amp;rdquo;) and one cannot assume that the formats allowed in V8 represent all formats available today, but I think it&amp;rsquo;s fair to assume they do follow modern expectations.</source>
          <target state="translated">그러나 Javascript의 Date 객체가 다른 형식을 허용한다는 것을 경험을 통해 알 수 있습니다 (처음 에이 질문의 존재로 강제 됨) .ECMAScript는 구현 특정 형식을 허용하기 때문에 괜찮습니다. 그러나 여전히 사용 가능한 형식으로 제공되는 설명서 또는 실제로 허용되는 형식에 대한 질문에는 대답하지 않습니다. 우리는 구글의 자바 스크립트 구현 인 V8을 살펴볼 것이다. 이것이 &quot;최상의&quot;자바 스크립트 엔진 ( &quot;최상의&quot;또는 &quot;좋은&quot;을 어떻게 정의 할 수 있는지)을 제안하는 것은 아니며 V8에서 허용되는 형식이 현재 사용 가능한 모든 형식을 나타내는 것으로 가정 할 수는 없습니다. 그들이 현대의 기대를 따르고 있다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="df17521fdb77be395fc191a49ea603cf9f753c47" translate="yes" xml:space="preserve">
          <source>I could not find documentation anywhere showing all the valid string formats while calling &lt;code&gt;new Date()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;new Date()&lt;/code&gt; 함수를 호출하는 동안 유효한 문자열 형식을 모두 보여주는 문서를 찾을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c31759a3d8424f9ea9e6642c8f160fd4294ef2d9" translate="yes" xml:space="preserve">
          <source>I love &lt;em&gt;&lt;a href=&quot;https://www.webdevelopersnotes.com/10-ways-to-format-time-and-date-using-javascript&quot;&gt;10 ways to format time and date using JavaScript&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href=&quot;http://www.elated.com/articles/working-with-dates/&quot;&gt;Working with Dates&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://www.webdevelopersnotes.com/10-ways-to-format-time-and-date-using-javascript&quot;&gt;JavaScript&lt;/a&gt;&lt;/em&gt; &lt;em&gt;&lt;a href=&quot;http://www.elated.com/articles/working-with-dates/&quot;&gt;와 날짜 작업을&lt;/a&gt;&lt;/em&gt; &lt;em&gt;사용하여 시간과 날짜를 형식화하는 10 가지 방법을&lt;/em&gt; 좋아합니다.</target>
        </trans-unit>
        <trans-unit id="ffaa4c3a0de427e532067ad206544c297c53abaf" translate="yes" xml:space="preserve">
          <source>I made this very simple formatter, it's cut/n/pastable (Updated with neater version):</source>
          <target state="translated">이 매우 간단한 포맷터를 만들었습니다. 잘라내거나 붙여 넣을 수 있습니다 (더 깔끔한 버전으로 업데이트 됨).</target>
        </trans-unit>
        <trans-unit id="6611357bea8f62dbbc5da8da06517924dcc25f51" translate="yes" xml:space="preserve">
          <source>I noticed that JavaScript's &lt;code&gt;new Date()&lt;/code&gt; function is very smart in accepting dates in several formats.</source>
          <target state="translated">JavaScript의 &lt;code&gt;new Date()&lt;/code&gt; 함수는 여러 형식의 날짜를 받아들이는 것이 매우 똑똑하다는 것을 알았습니다.</target>
        </trans-unit>
        <trans-unit id="e2b072e3133413cb47898dc670481a1957ae2633" translate="yes" xml:space="preserve">
          <source>I stumbled across this today and was quite surprised that no one took the time to answer this simple question.  True, there are many libraries out there to help with date manipulation.  Some are better than others.  But that wasn't the question asked.</source>
          <target state="translated">나는 오늘 이것을 우연히 발견했으며 아무도이 간단한 질문에 대답하는 데 시간이 걸리지 않았다는 사실에 놀랐습니다. 사실 날짜 조작을 도와주는 라이브러리가 많이 있습니다. 일부는 다른 것보다 낫습니다. 그러나 그것은 질문이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="f26176545d2d73fecac09ec100bebc27ffa99a69" translate="yes" xml:space="preserve">
          <source>I was unable to find any definitive documentation on valid date formats so I wrote my own test to see what is supported in various browsers.</source>
          <target state="translated">유효한 날짜 형식에 대한 명확한 문서를 찾을 수 없으므로 다양한 브라우저에서 지원되는 사항을 확인하기 위해 자체 테스트를 작성했습니다.</target>
        </trans-unit>
        <trans-unit id="ff2c642683d153adf11406f5bced4f1383f52db5" translate="yes" xml:space="preserve">
          <source>If to write a formatting function is too long, there are plenty of libraries around which does it. Some other answers already enumerate them. But increasing dependencies also has it counter-part.</source>
          <target state="translated">포맷팅 함수를 작성하는 것이 너무 길면, 그 주위에 많은 라이브러리가 있습니다. 다른 답변은 이미 열거했습니다. 그러나 의존성이 증가함에 따라 대응이 증가합니다.</target>
        </trans-unit>
        <trans-unit id="f961fbd962ecbfce00d3cd719d73fca366f1d8cf" translate="yes" xml:space="preserve">
          <source>If you are already using &lt;a href=&quot;http://en.wikipedia.org/wiki/JQuery_UI&quot;&gt;jQuery UI&lt;/a&gt; in your project, you can use the built-in datepicker method for formatting your date object:</source>
          <target state="translated">프로젝트에서 이미 &lt;a href=&quot;http://en.wikipedia.org/wiki/JQuery_UI&quot;&gt;jQuery UI&lt;/a&gt; 를 사용중인 경우 내장 날짜 선택 도구를 사용하여 날짜 객체의 형식을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4c8f8108b5237dee81b175d9ed4d82650b5e56a6" translate="yes" xml:space="preserve">
          <source>If you don't need all the features that a library like &lt;a href=&quot;http://momentjs.com/&quot;&gt;Moment.js&lt;/a&gt; provides, then you can use my port of &lt;a href=&quot;http://man7.org/linux/man-pages/man3/strftime.3.html&quot;&gt;strftime&lt;/a&gt;. It's lightweight (1.35 KB vs. 57.9 KB minified compared to Moment.js 2.15.0) and provides most of the functionality of &lt;code&gt;strftime()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://momentjs.com/&quot;&gt;Moment.js&lt;/a&gt; 와 같은 라이브러리가 제공하는 모든 기능이 필요하지 않으면 &lt;a href=&quot;http://man7.org/linux/man-pages/man3/strftime.3.html&quot;&gt;strftime&lt;/a&gt; 포트를 사용할 수 있습니다. 가벼우 며 (1.35KB 대 57.9KB는 Moment.js 2.15.0에 비해 축소됨) &lt;code&gt;strftime()&lt;/code&gt; 의 기능을 대부분 제공합니다.</target>
        </trans-unit>
        <trans-unit id="22aff460a9167708273c07351e5616027269234b" translate="yes" xml:space="preserve">
          <source>If you want to show only time with &lt;strong&gt;two&lt;/strong&gt; digits, this may helps you:</source>
          <target state="translated">&lt;strong&gt;두&lt;/strong&gt; 자리 숫자로만 시간을 표시하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="710aeb2a7dc5514d4f010c9ceeef5446ab41ad87" translate="yes" xml:space="preserve">
          <source>In addition to this, there is a second standard set forward by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Engineering_Task_Force&quot;&gt;IETF&lt;/a&gt; that browsers tend to follow as well, which is the definition for timestamps made in the RFC 2822. Actual documentation can be found in the references list at the bottom.</source>
          <target state="translated">또한, &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Engineering_Task_Force&quot;&gt;IETF&lt;/a&gt; 가 브라우저가 따르는 경향이있는 두 번째 표준이 있는데, 이는 RFC 2822에서 작성된 타임 스탬프에 대한 정의입니다. 실제 문서는 하단의 참조 목록에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="53f5d1f9ef5fa567eb91d6bcee19878cc9a173b9" translate="yes" xml:space="preserve">
          <source>In any case, this should aid in highlighting that there is no &quot;documentation&quot; that universally represents all implementations of javascript, but there is still enough documentation available to make reasonable sense of what strings are acceptable for a Date object. Quite the loaded question when you think about it, yes? :P</source>
          <target state="translated">어쨌든, 이것은 모든 자바 스크립트 구현을 보편적으로 나타내는 &quot;문서&quot;가 없다는 것을 강조하는 데 도움이되지만 Date 객체에 어떤 문자열이 허용되는지를 합리적으로 이해할 수있는 충분한 문서가 여전히 남아 있습니다. 당신이 그것에 대해 생각할 때 꽤로드 된 질문, 예? :피</target>
        </trans-unit>
        <trans-unit id="a8b51096d048c4e95d01b50fbf008933f958f287" translate="yes" xml:space="preserve">
          <source>Interestingly, when using month names I discovered that only the first 3 characters of the month name are ever used so all the of the following are perfectly valid:</source>
          <target state="translated">흥미롭게도 월 이름을 사용할 때 월 이름의 처음 3 자만 사용되므로 다음의 모든 것이 완벽하게 유효하다는 것을 알았습니다.</target>
        </trans-unit>
        <trans-unit id="17a5ba31c784e8cf40aae28024d8f4c4ada4f7e9" translate="yes" xml:space="preserve">
          <source>It is a (lightweight)* JavaScript date library for parsing, manipulating, and formatting dates.</source>
          <target state="translated">날짜 구문 분석, 조작 및 형식 지정을위한 (경량) * JavaScript 날짜 라이브러리입니다.</target>
        </trans-unit>
        <trans-unit id="f5d115279f70dbc882e63025cc30de4149b7c25b" translate="yes" xml:space="preserve">
          <source>It uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;Object.keys()&lt;/a&gt; which is undefined in older browsers so you may need implement polyfill from given link.</source>
          <target state="translated">구형 브라우저에서는 정의되지 않은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;Object.keys ()&lt;/a&gt; 를 사용하므로 주어진 링크에서 polyfill을 구현해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="db8e74eb464018f7742f85205c4907c910613e62" translate="yes" xml:space="preserve">
          <source>Items that match multiple formats (e.g. 1970-01-01) are processed as a standard compliant EMCAScript 5.0 ISO 8601 string.</source>
          <target state="translated">여러 형식 (예 : 1970-01-01)과 일치하는 항목은 표준 호환 EMCAScript 5.0 ISO 8601 문자열로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="35e8d3da12c5512106244c4805a83ed372be85c2" translate="yes" xml:space="preserve">
          <source>Just another option, which I wrote:</source>
          <target state="translated">내가 쓴 또 다른 옵션 :</target>
        </trans-unit>
        <trans-unit id="61e0891acda5196c701c4069bfab5ec127258538" translate="yes" xml:space="preserve">
          <source>Just to continue gongzhitaao's solid answer - this handles AM/PM</source>
          <target state="translated">gongzhitaao의 확실한 대답을 계속하려면 AM / PM을 처리하십시오.</target>
        </trans-unit>
        <trans-unit id="6ead88c04f35aa5703ee4b194af590049b41f827" translate="yes" xml:space="preserve">
          <source>Link to changing the locale strings: &lt;a href=&quot;https://gist.github.com/1221376&quot;&gt;https://gist.github.com/1221376&lt;/a&gt;</source>
          <target state="translated">로캘 문자열 변경 링크 : &lt;a href=&quot;https://gist.github.com/1221376&quot;&gt;https://gist.github.com/1221376&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d9aec26094de82b27ee47b6b58066eac935231a5" translate="yes" xml:space="preserve">
          <source>Looking at the DateConstructor function, we can deduce we need to find the DateParse function; however, note that &amp;ldquo;year&amp;rdquo; is not the actual year and is only a reference to the &amp;ldquo;year&amp;rdquo; parameter.</source>
          <target state="translated">DateConstructor 함수를 살펴보면 DateParse 함수를 찾아야한다고 추론 할 수 있습니다. 그러나 &quot;year&quot;는 실제 연도가 아니며 &quot;year&quot;매개 변수에 대한 참조 일뿐입니다.</target>
        </trans-unit>
        <trans-unit id="645a33c68f34de07fcdb035049e28802d0c3928b" translate="yes" xml:space="preserve">
          <source>Make sure you checkout &lt;a href=&quot;http://www.datejs.com/&quot;&gt;Datejs&lt;/a&gt; when dealing with dates in JavaScript. It's quite impressive and well documented as you can see in case of the &lt;a href=&quot;http://code.google.com/p/datejs/wiki/APIDocumentation#toString&quot;&gt;toString function&lt;/a&gt;.</source>
          <target state="translated">JavaScript에서 날짜를 다룰 때 &lt;a href=&quot;http://www.datejs.com/&quot;&gt;Datejs&lt;/a&gt; 를 체크 아웃하십시오. &lt;a href=&quot;http://code.google.com/p/datejs/wiki/APIDocumentation#toString&quot;&gt;toString 함수의&lt;/a&gt; 경우에 볼 수 있듯이 상당히 인상적이고 문서화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="c08bf5434568b6d819143126966cb6c329517266" translate="yes" xml:space="preserve">
          <source>Modern browsers only</source>
          <target state="translated">최신 브라우저 만</target>
        </trans-unit>
        <trans-unit id="44ef0a0c5c2c4d04666563418da2fbc86eae2dea" translate="yes" xml:space="preserve">
          <source>My results concluded the following formats are valid in all browsers that I tested (examples use the date &quot;9th August 2013&quot;):</source>
          <target state="translated">내 결과는 테스트 한 모든 브라우저에서 다음 형식이 유효하다는 결론을 내 렸습니다 (예 : &quot;2013 년 8 월 9 일&quot;날짜 사용).</target>
        </trans-unit>
        <trans-unit id="5984a869d38cc1793c9591d03820fabba3dcfd3d" translate="yes" xml:space="preserve">
          <source>No reason to consider it if you're already using a framework (they're all capable), but if you just need to quickly add date manipulation to a project give it a chance.</source>
          <target state="translated">이미 프레임 워크를 사용하고 있다면 모두 고려할 필요는 없지만 (모두 가능) 프로젝트에 날짜 조작을 신속하게 추가 해야하는 경우 기회를 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="0a2ba271ef9c79b3df9517d20a87f07aa8719568" translate="yes" xml:space="preserve">
          <source>Not sure if it'll help, but I've found it useful in several projects - looks like it'll do what you need.</source>
          <target state="translated">그것이 도움이 될지 확실하지 않지만 여러 프로젝트에서 유용하다는 것을 알았습니다. 필요한 일을하는 것처럼 보입니다.</target>
        </trans-unit>
        <trans-unit id="8bb7e2992a7f187e98c466141e8d68757fa57d45" translate="yes" xml:space="preserve">
          <source>Note: It is, however, usually not a good idea to extend the Javascript standard libraries (e.g. by adding this function to the prototype of Date).</source>
          <target state="translated">참고 : 그러나 일반적으로 Javascript 표준 라이브러리를 확장하는 것은 좋지 않습니다 (예 :이 함수를 Date 프로토 타입에 추가).</target>
        </trans-unit>
        <trans-unit id="f8e0bb8fd74a60e7662c2922a1ca8ec1a4e31fb0" translate="yes" xml:space="preserve">
          <source>Note: it is possible to generate custom output out of those formatting functions:</source>
          <target state="translated">참고 : 이러한 형식 지정 기능에서 사용자 정의 출력을 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="546ca3e57a581b385f3731a50d1011d161cf2cea" translate="yes" xml:space="preserve">
          <source>Parenthesized text are ignored.</source>
          <target state="translated">괄호 안의 텍스트는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="df9f379161c233d12b62504d684bf2a89535c58c" translate="yes" xml:space="preserve">
          <source>Paste the pieces together according to your target format</source>
          <target state="translated">대상 형식에 따라 조각을 붙여 넣습니다.</target>
        </trans-unit>
        <trans-unit id="495908be539a7c150597912922f8549215a765aa" translate="yes" xml:space="preserve">
          <source>Personally, because I use both PHP and jQuery/javascript in equal measures, I use the date function from php.js &lt;a href=&quot;http://phpjs.org/functions/date/&quot;&gt;http://phpjs.org/functions/date/&lt;/a&gt;</source>
          <target state="translated">개인적으로, PHP와 jQuery / javascript를 모두 동등한 척도로 사용하기 때문에 php.js &lt;a href=&quot;http://phpjs.org/functions/date/&quot;&gt;http://phpjs.org/functions/date/&lt;/a&gt; 의 날짜 함수를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="8992beb0ddb8597071fe787737b4a332cd5d7403" translate="yes" xml:space="preserve">
          <source>Several libraries provide routines to parameterize this, some with extensive localization support.  You can also check out the methods in &lt;a href=&quot;http://dojotoolkit.org/api/?qs=1.3/dojo.date.locale&quot;&gt;dojo.date.locale&lt;/a&gt;.</source>
          <target state="translated">몇몇 라이브러리는이를 매개 변수화하는 루틴을 제공하며, 일부는 광범위한 현지화 지원을 제공합니다. &lt;a href=&quot;http://dojotoolkit.org/api/?qs=1.3/dojo.date.locale&quot;&gt;dojo.date.locale&lt;/a&gt; 에서 메소드를 확인할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="632f9f269685ebdbf3950204c25d20e189268211" translate="yes" xml:space="preserve">
          <source>Signed numbers followed by the hour or hour minute (e.g. +5:15 or +0515) are interpreted as the timezone.</source>
          <target state="translated">부호있는 숫자 다음에시 또는 분 (예 : +5 : 15 또는 +0515)이 시간대로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="e246126e46317b507ad8695fe2a3d9e7e77549d1" translate="yes" xml:space="preserve">
          <source>Since more recent versions of ECMAscript, the &lt;code&gt;Date&lt;/code&gt; class has some specific formatting functions:</source>
          <target state="translated">최신 ECMAscript 버전 이후로 &lt;code&gt;Date&lt;/code&gt; 클래스에는 몇 가지 특정 형식 지정 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f5e5390bb2f05f3426be2d9113575f9da131f3b" translate="yes" xml:space="preserve">
          <source>So this should be enough to give you a basic idea of what to expect when it comes to passing a string into a Date object. You can further expand upon this by looking at the following specification that Mozilla points to on the Mozilla Developer Network (compliant to the IETF RFC 2822 timestamps):</source>
          <target state="translated">따라서 이것은 문자열을 Date 객체에 전달할 때 예상되는 것에 대한 기본 아이디어를 제공하기에 충분해야합니다. Mozilla가 Mozilla Developer Network에서 가리키는 다음 스펙 (IETF RFC 2822 타임 스탬프 준수)을 살펴보면 추가로 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="362ba4f79ecd3d6b8188ca1c6338d84d7d9d137f" translate="yes" xml:space="preserve">
          <source>Standard ECMAScript formatting functions:</source>
          <target state="translated">표준 ECMAScript 형식화 기능 :</target>
        </trans-unit>
        <trans-unit id="fc260ca4fff84e241646a28bf161bd0d2a785031" translate="yes" xml:space="preserve">
          <source>Sugar gives the Date class much love starting with the Date.create
  method which can understand dates in just about any format in 15 major
  languages, including relative formats like &quot;1 hour ago&quot;. Dates can
  also be output in any format or language using an easy to understand
  syntax, with shortcuts to commonly used date formats. Complex date
  comparison is also possible with methods like is, which understand any
  format and apply built in precision.</source>
          <target state="translated">Sugar는 Date 클래스가 Date.create 메소드로 시작하는 것을 좋아합니다.이 메소드는 &quot;1 시간 전&quot;과 같은 상대 형식을 포함하여 15 개 주요 언어로 된 형식을 거의 모든 형식으로 이해할 수 있습니다. 일반적으로 사용되는 날짜 형식에 대한 바로 가기와 함께 이해하기 쉬운 구문을 사용하여 날짜를 모든 형식 또는 언어로 출력 할 수 있습니다. 형식을 이해하고 내장 된 정밀도를 적용하는 is와 같은 방법으로 복잡한 날짜 비교도 가능합니다.</target>
        </trans-unit>
        <trans-unit id="f29981eb711a34385f3a8c3369941b1acb944227" translate="yes" xml:space="preserve">
          <source>Supports date/time formatting, date math (add/subtract date parts), date compare, date parsing, etc. It's liberally open sourced.</source>
          <target state="translated">날짜 / 시간 형식, 날짜 수학 (날짜 부분 추가 ​​/ 빼기), 날짜 비교, 날짜 구문 분석 등을 지원합니다. 공개적으로 공개됩니다.</target>
        </trans-unit>
        <trans-unit id="bde303b779bf944e66997dd5072e542fef0bc54a" translate="yes" xml:space="preserve">
          <source>Symbols like &amp;ldquo;+&amp;rdquo;, &amp;ldquo;-&amp;ldquo; and unmatched &amp;ldquo;)&amp;rdquo; are not allowed after a number has been processed.</source>
          <target state="translated">숫자가 처리 된 후에는 &quot;+&quot;, &quot;-&quot;및 일치하지 않는 &quot;)&quot;와 같은 기호를 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c0970dca1dd4c1fa0ffdec75be5345150b8cc7a4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://arshaw.com/xdate/&quot;&gt;XDate javascript library&lt;/a&gt; by &lt;a href=&quot;https://github.com/arshaw&quot;&gt;Adam Shaw&lt;/a&gt; has been around since mid-2011 and is still under active development. It has fantastic documentation, a great API, formatting, tries to remain backwards-compatible and even supports localized strings.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/arshaw&quot;&gt;Adam Shaw&lt;/a&gt; 의 &lt;a href=&quot;http://arshaw.com/xdate/&quot;&gt;XDate 자바 스크립트 라이브러리&lt;/a&gt; 는 2011 년 중반부터 사용되었으며 여전히 개발 중에 있습니다. 그것은 훌륭한 문서, 훌륭한 API, 형식을 가지고 있으며 하위 호환성을 유지하려고 노력하며 심지어 현지화 된 문자열을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="9a31a1d75771606068b0e21585d78fa3a68201a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Date&lt;/code&gt; object reference I use most frequently is on the &lt;a href=&quot;http://www.w3schools.com/jsref/jsref_obj_date.asp&quot;&gt;w3schools.com website&lt;/a&gt; (but &lt;a href=&quot;https://www.google.com/search?q=javascript%20date%20object%20reference&quot;&gt;a quick Google search&lt;/a&gt; will reveal many more that may better meet your needs).</source>
          <target state="translated">내가 가장 자주 사용하는 &lt;code&gt;Date&lt;/code&gt; 객체 참조는 &lt;a href=&quot;http://www.w3schools.com/jsref/jsref_obj_date.asp&quot;&gt;w3schools.com 웹 사이트에 있습니다&lt;/a&gt; (그러나 &lt;a href=&quot;https://www.google.com/search?q=javascript%20date%20object%20reference&quot;&gt;빠른 Google 검색&lt;/a&gt; 은 귀하의 요구를 더 잘 충족시킬 수있는 더 많은 것을 보여줍니다).</target>
        </trans-unit>
        <trans-unit id="c313a2f758973e99a7ac1efe394d3aa15368d95c" translate="yes" xml:space="preserve">
          <source>The Long Answer</source>
          <target state="translated">긴 대답</target>
        </trans-unit>
        <trans-unit id="74eb4fbb4455194adbd83215435ba76c2ca91924" translate="yes" xml:space="preserve">
          <source>The Microsoft Developer Network additionally mentions an additional standard for the Date object: ECMA-402, the ECMAScript Internationalization API Specification, which is complementary to the ECMAScript 5.1 standard (and future ones). That can be found here:</source>
          <target state="translated">또한 Microsoft Developer Network는 Date 객체에 대한 추가 표준 인 ECMAScript 국제화 API 사양 인 ECMA-402 (ECMAScript 5.1 표준 및 이후 표준)를 보완합니다. 여기에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d8764c6013c43b06ebc1ddd6b77dfb3eca5fddf" translate="yes" xml:space="preserve">
          <source>The Short Answer</source>
          <target state="translated">짧은 대답</target>
        </trans-unit>
        <trans-unit id="ff6913229ad05d770a476ed2ac4b8e61031fa129" translate="yes" xml:space="preserve">
          <source>The answer is &quot;nowhere&quot; since the date formatting is proprietary functionality. I don't think the toString functions are intended to conform to a specific format. e.g. in the ECMAScript 5.1 spec (&lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf&quot;&gt;http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf&lt;/a&gt;, 2/8/2013, page 173), the &lt;em&gt;toString&lt;/em&gt; function is documented as follows:</source>
          <target state="translated">날짜 형식은 독점적 기능이기 때문에 대답은 &quot;아무것도 없습니다&quot;. toString 함수가 특정 형식을 준수한다고 생각하지 않습니다. 예를 들어 ECMAScript 5.1 사양 ( &lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf&quot;&gt;http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf&lt;/a&gt; , 2013 년 2 월 8 일, 173 페이지)에서 &lt;em&gt;toString&lt;/em&gt; 함수는 다음과 같이 문서화됩니다. :</target>
        </trans-unit>
        <trans-unit id="83316fbc622f5c1d7fe0d9f842cc4f9dde008b02" translate="yes" xml:space="preserve">
          <source>The correct way to format a date to return &quot;2012-12-29&quot; is with the script from &lt;em&gt;&lt;a href=&quot;http://blog.stevenlevithan.com/archives/date-time-format&quot;&gt;JavaScript Date Format&lt;/a&gt;&lt;/em&gt;:</source>
          <target state="translated">&quot;2012-12-29&quot;를 반환하도록 날짜를 형식화하는 올바른 방법은 &lt;em&gt;&lt;a href=&quot;http://blog.stevenlevithan.com/archives/date-time-format&quot;&gt;JavaScript 날짜 형식&lt;/a&gt;&lt;/em&gt; 의 스크립트를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="58a5df2329d2012661d2a190ba533636ba8bfa70" translate="yes" xml:space="preserve">
          <source>The divide by 1000 of the javascript timestamp is because a javascript timestamp is in miliseconds but a PHP timestamp is in seconds.</source>
          <target state="translated">자바 스크립트 타임 스탬프를 1000으로 나누면 자바 스크립트 타임 스탬프는 밀리 초 단위이지만 PHP 타임 스탬프는 초 단위이기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="208fb032494a5398f27cb359bed6be16e0680185" translate="yes" xml:space="preserve">
          <source>The function call we&amp;rsquo;re concerned with in this function is for DateParser::Parse(); ignore the logic surrounding those function calls, these are just checks to conform to the encoding type (ASCII and UC16). DateParser::Parse is defined here:</source>
          <target state="translated">이 함수와 관련하여 함수 호출은 DateParser :: Parse (); 이러한 함수 호출을 둘러싼 논리를 무시하십시오. 이는 인코딩 유형 (ASCII 및 UC16)을 준수하는지 확인하는 것입니다. DateParser :: Parse는 여기에 정의되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff24516955ea914e95d2683b9fdde659134819ef" translate="yes" xml:space="preserve">
          <source>The functionality you cite is not standard Javascript, not likely to be portable across browsers and therefore not good practice.  The &lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-262.htm&quot;&gt;ECMAScript 3 spec&lt;/a&gt; leaves the parse and output formats function up to the Javascript implementation.  &lt;a href=&quot;http://www.ecma-international.org/publications/files/drafts/tc39-2009-025.pdf&quot;&gt;ECMAScript 5&lt;/a&gt; adds a subset of ISO8601 support.  I believe the toString() function you mention is an innovation in one browser (Mozilla?)</source>
          <target state="translated">인용 한 기능은 표준 자바 스크립트가 아니므로 브라우저간에 이식 할 수 없으므로 좋은 방법이 아닙니다. &lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-262.htm&quot;&gt;ECMAScript 3 사양&lt;/a&gt; 은 구문 분석 및 출력 형식 기능을 Javascript 구현으로 유지합니다. &lt;a href=&quot;http://www.ecma-international.org/publications/files/drafts/tc39-2009-025.pdf&quot;&gt;ECMAScript 5&lt;/a&gt; 는 ISO8601 지원의 하위 세트를 추가합니다. 언급 한 toString () 함수는 하나의 브라우저에서 혁신적이라고 생각합니다 (Mozilla?)</target>
        </trans-unit>
        <trans-unit id="fb5132a5f296f9e26eaafe57c951c9d7d57ac063" translate="yes" xml:space="preserve">
          <source>The latest code is available here: &lt;a href=&quot;https://github.com/thdoan/strftime&quot;&gt;https://github.com/thdoan/strftime&lt;/a&gt;</source>
          <target state="translated">최신 코드는 여기에서 확인할 수 있습니다 : &lt;a href=&quot;https://github.com/thdoan/strftime&quot;&gt;https://github.com/thdoan/strftime&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="926c36400232ffe8358479fbc62d0ec264e1e3c7" translate="yes" xml:space="preserve">
          <source>The library &lt;a href=&quot;http://sugarjs.com/&quot;&gt;sugar.js&lt;/a&gt; has some great functionality for working with dates in JavaScript. And it is very well &lt;a href=&quot;http://sugarjs.com/dates&quot;&gt;documented&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://sugarjs.com/&quot;&gt;sugar.js&lt;/a&gt; 라이브러리에는 JavaScript로 날짜를 처리하는 데 유용한 기능이 있습니다. 그리고 그것은 잘 &lt;a href=&quot;http://sugarjs.com/dates&quot;&gt;문서화되어&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="ce22ecbbee5303a0c5bb16b1eb00e066062f22ae" translate="yes" xml:space="preserve">
          <source>The most reliable way to format a date with the source format you're using, is to apply the following steps :</source>
          <target state="translated">사용중인 소스 형식으로 날짜를 형식화하는 가장 신뢰할 수있는 방법은 다음 단계를 적용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="21fbd3fdb82c16c9be3dcb4d68a57b8cebd0c23a" translate="yes" xml:space="preserve">
          <source>There is no &amp;ldquo;universal&amp;rdquo; documentation that javascript caters to; every browser that has javascript is really an implementation. However, there is a standard that most modern browsers tend to follow, and that&amp;rsquo;s the EMCAScript standard; the ECMAScript standard strings would take, minimally, a modified implementation of the ISO 8601 definition.</source>
          <target state="translated">자바 스크립트가 제공하는 &quot;유니버설&quot;문서는 없습니다. 자바 스크립트가있는 모든 브라우저는 실제로 구현입니다. 그러나 대부분의 최신 브라우저가 따르는 경향이 있으며 이것이 EMCAScript 표준입니다. ECMAScript 표준 문자열에는 최소한 ISO 8601 정의의 수정 된 구현이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="b65719efe6459ff12eb557c8094dcc84f302078f" translate="yes" xml:space="preserve">
          <source>This calls %DateParseString, which is actually a run-time function reference for a C++ function. It refers to the following code:</source>
          <target state="translated">이것은 실제로 C ++ 함수에 대한 런타임 함수 참조 인 % DateParseString을 호출합니다. 다음 코드를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3f8ae4a76e37e1e76d35b274e44fd80da79587f6" translate="yes" xml:space="preserve">
          <source>This code does NOT work:</source>
          <target state="translated">이 코드는 작동하지 않습니다 :</target>
        </trans-unit>
        <trans-unit id="15b9c3a43393ea4622514204e0c4f0eeefff406c" translate="yes" xml:space="preserve">
          <source>This is for converting a string to a date. If we look at the opposite side, that is, converting a date object to a string, until now I was under the impression that JavaScript doesn't have a built-in API to format a date object into a string.</source>
          <target state="translated">문자열을 날짜로 변환하기위한 것입니다. 반대편을 보면, 즉 날짜 객체를 문자열로 변환하면 지금까지 JavaScript에 날짜 객체를 문자열로 형식화하는 내장 API가 없다는 인상을 받았습니다.</target>
        </trans-unit>
        <trans-unit id="665ccf906c485674418efbf561bb0fad18bcbd73" translate="yes" xml:space="preserve">
          <source>This is the function that actually defines what formats it accepts. Essentially, it checks for the EMCAScript 5.0 ISO 8601 standard and if it is not standards compliant, then it will attempt to build the date based on legacy formats. A few key points based on the comments:</source>
          <target state="translated">이것은 실제로 어떤 형식을 허용하는지 정의하는 함수입니다. 기본적으로 EMCAScript 5.0 ISO 8601 표준을 확인하고 표준을 준수하지 않는 경우 레거시 형식을 기반으로 날짜를 작성하려고 시도합니다. 의견을 바탕으로 몇 가지 핵심 사항 :</target>
        </trans-unit>
        <trans-unit id="deabbc82fac39505ed6ac9afea320e8a4ad748ed" translate="yes" xml:space="preserve">
          <source>To answer the question, or typically even look for the answer to this question, you need to know that javascript is not a novel language; it&amp;rsquo;s actually an implementation of ECMAScript, and follows the ECMAScript standards (but note, javascript also actually pre-dated those standards; EMCAScript standards are built off the early implementation of LiveScript/JavaScript). The current ECMAScript standard is 5.1 (2011); at the time that the question was originally asked (June &amp;rsquo;09), the standard was 3 (4 was abandoned), but 5 was released shortly after the post at the end of 2009. This should outline one problem; what standard a javascript implementation may follow, may not reflect what is actually in place, because a) it&amp;rsquo;s an implementation of a given standard, b) not all implementations of a standard are puritan, and c) functionality is not released in synchronization with a new standard as d) an implementation is a constant work in progress</source>
          <target state="translated">질문에 대답하거나 일반적으로이 질문에 대한 답을 찾으려면 자바 스크립트가 새로운 언어가 아님을 알아야합니다. 실제로는 ECMAScript의 구현이며 ECMAScript 표준을 따릅니다 (그러나 Javascript는 실제로 해당 표준보다 사전에 작성된 것입니다. EMCAScript 표준은 LiveScript / JavaScript의 초기 구현을 기반으로합니다). 현재 ECMAScript 표준은 5.1 (2011)입니다. 질문이 처음 요청되었을 때 (09 년 6 월) 표준은 3 (4 개는 폐기 됨)이지만 2009 년 말에 게시 된 직후 5 개가 릴리스되었습니다. 이는 한 가지 문제를 요약해야합니다. a) 특정 표준의 구현, b) 표준의 모든 구현이 청교도가 아니며 c) 기능이 a와 동기화되어 릴리스되지 않기 때문에 Javascript 구현이 따르는 표준, 실제 상황을 반영하지 않을 수 있음 d) 구현이 지속적으로 진행되고있는 새로운 표준</target>
        </trans-unit>
        <trans-unit id="4d7a93787240652e3ef3807b81a2ffaf3238ccbc" translate="yes" xml:space="preserve">
          <source>Today, I played with the &lt;code&gt;toString()&lt;/code&gt; method on the date object and surprisingly it serves the purpose of formatting date to strings.</source>
          <target state="translated">오늘은 날짜 객체에서 &lt;code&gt;toString()&lt;/code&gt; 메소드를 사용하여 놀았으며 놀랍게도 날짜를 문자열로 형식화하는 용도로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9cca2a06072ed86b3ef4044c08648c90cb64abda" translate="yes" xml:space="preserve">
          <source>Unsigned numbers followed by &amp;ldquo;.&amp;rdquo; are interpreted as a &amp;ldquo;time component&amp;rdquo;, and must be followed by milliseconds.</source>
          <target state="translated">부호없는 숫자 다음에 &quot;.&quot; &quot;시간 구성 요소&quot;로 해석되며 밀리 초 뒤에 와야합니다.</target>
        </trans-unit>
        <trans-unit id="90bb8d3361b9be7ae20fc165a26d87b0981cc9b3" translate="yes" xml:space="preserve">
          <source>Unsigned numbers followed by &amp;ldquo;:&amp;rdquo; are interpreted as a &amp;ldquo;time component&amp;rdquo;.</source>
          <target state="translated">부호없는 숫자와 &quot;:&quot;은 &quot;시간 구성 요소&quot;로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="6607c7302bc8217c3b42cb642de1fd4147489ff5" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;.getDate()&lt;/code&gt;, &lt;code&gt;.getMonth()&lt;/code&gt; and &lt;code&gt;.getFullYear()&lt;/code&gt; to get respectively the day, month and year</source>
          <target state="translated">&lt;code&gt;.getDate()&lt;/code&gt; , &lt;code&gt;.getMonth()&lt;/code&gt; 및 &lt;code&gt;.getFullYear()&lt;/code&gt; 를 사용하여 각각 일, 월 및 연도를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="c29fa67948f9ddc5a07ce5664647a414272a0185" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;new Date()&lt;/code&gt; to create a &lt;code&gt;Date&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;new Date()&lt;/code&gt; 를 사용하여 &lt;code&gt;Date&lt;/code&gt; 객체를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="a2adc5b2cc4cb736c2deebb465f776af14085c11" translate="yes" xml:space="preserve">
          <source>Using a library that uses the same format strings as something I already know is easier for me, and the manual containing all of the format string possibilities for the date function is of course online at php.net</source>
          <target state="translated">내가 이미 알고있는 것과 같은 형식 문자열을 사용하는 라이브러리를 사용하는 것이 더 쉬우 며 날짜 함수에 대한 모든 형식 문자열 가능성을 포함하는 매뉴얼은 php.net에서 온라인으로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="e7e6bcb81a5b22becadef925db0d07360474064f" translate="yes" xml:space="preserve">
          <source>When a single argument is passed to new Date(), it casts this function prototype:</source>
          <target state="translated">단일 인수가 new Date ()에 전달되면이 함수 프로토 타입을 캐스트합니다.</target>
        </trans-unit>
        <trans-unit id="114a642f495b826aea7acbe33edb7cc2dbe8b1d5" translate="yes" xml:space="preserve">
          <source>When declaring the hour and minute, you can use either &amp;ldquo;hh:mm&amp;rdquo; or &amp;ldquo;hhmm&amp;rdquo;.</source>
          <target state="translated">시간과 분을 선언 할 때&amp;ldquo;hh : mm&amp;rdquo;또는&amp;ldquo;hhmm&amp;rdquo;을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aca9dbbb303c77c0807a01bd36cfa2c2d2e3bd75" translate="yes" xml:space="preserve">
          <source>When two or more arguments are passed to new Date(), it casts this function prototype:</source>
          <target state="translated">둘 이상의 인수가 new Date ()에 전달되면이 함수 프로토 타입을 캐스트합니다.</target>
        </trans-unit>
        <trans-unit id="22e96b4636d40dc7f5e0cabec086fa1703c0cf1d" translate="yes" xml:space="preserve">
          <source>Where can I find documentation on formatting a date in JavaScript</source>
          <target state="translated">JavaScript에서 날짜 형식에 대한 설명서를 어디서 찾을 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="579d59444a2404e66748881c19a9d372f4ecfc33" translate="yes" xml:space="preserve">
          <source>Where is the documentation which lists the format specifiers supported by the &lt;code&gt;Date()&lt;/code&gt; object?</source>
          <target state="translated">&lt;code&gt;Date()&lt;/code&gt; 객체가 지원하는 형식 지정자를 나열한 설명서는 어디에 있습니까?</target>
        </trans-unit>
        <trans-unit id="4db2ac4b37938d9c0ad295c19c67c827344d41d3" translate="yes" xml:space="preserve">
          <source>Where is the documentation which lists the format specifiers supported by the Date() object?</source>
          <target state="translated">Date () 객체가 지원하는 형식 지정자를 나열한 설명서는 어디에 있습니까?</target>
        </trans-unit>
        <trans-unit id="cb82d60c39346039f6cb4bfadc10677edda44f48" translate="yes" xml:space="preserve">
          <source>Words before the first number that are unknown to the parser are ignored.</source>
          <target state="translated">파서에 알려지지 않은 첫 번째 숫자 앞의 단어는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="8a68842cfe408a71879376c0a3a9390db314dd5d" translate="yes" xml:space="preserve">
          <source>Words that indicate a time zone are interpreted as a time zone.</source>
          <target state="translated">시간대를 나타내는 단어는 시간대로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="547dd53a0f9d977db148a27feb921a694997de56" translate="yes" xml:space="preserve">
          <source>You can also use the built-in &lt;code&gt;.toLocaleDateString&lt;/code&gt; method to do the formatting for you. You just need pass along the proper locale and options to match the right format, which unfortunately is only supported by modern browsers &lt;strong&gt;(*)&lt;/strong&gt; :</source>
          <target state="translated">내장 된 &lt;code&gt;.toLocaleDateString&lt;/code&gt; 메서드를 사용하여 서식을 지정할 수도 있습니다. 안타깝게도 최신 브라우저에서만 지원되는 올바른 형식에 맞는 적절한 로케일과 옵션을 전달하면됩니다 &lt;strong&gt;(*)&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="1edfc250c68ac34350b49739add4361fe59c9d57" translate="yes" xml:space="preserve">
          <source>You can define minutes and hours together in either of the two formats: &amp;ldquo;hh:mm&amp;rdquo; or &amp;ldquo;hhmm&amp;rdquo;.</source>
          <target state="translated">&quot;hh : mm&quot;또는 &quot;hhmm&quot;의 두 가지 형식 중 하나로 분과 시간을 함께 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="df104a6b1e018c302f37170ba0592e5f729d2f0d" translate="yes" xml:space="preserve">
          <source>You can just expand the &lt;code&gt;Date&lt;/code&gt; Object with a new &lt;code&gt;format&lt;/code&gt; method as noted by &lt;a href=&quot;http://huahun.iteye.com/blog/197367&quot;&gt;meizz&lt;/a&gt;, below is the code given by the author.  And
here is a &lt;a href=&quot;http://jsfiddle.net/gongzhitaao/G5kEQ/1/&quot;&gt;jsfiddle&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://huahun.iteye.com/blog/197367&quot;&gt;meizz&lt;/a&gt; 에서 언급 한대로 새 &lt;code&gt;format&lt;/code&gt; 메서드를 사용하여 &lt;code&gt;Date&lt;/code&gt; Object를 확장하면됩니다. 아래는 작성자가 제공 한 코드입니다. 그리고 여기 &lt;a href=&quot;http://jsfiddle.net/gongzhitaao/G5kEQ/1/&quot;&gt;jsfiddle이&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0ae8828fb30e6e7019eefb01ea7d8d7ac98d13d" translate="yes" xml:space="preserve">
          <source>You can use d1.getTime() instead of valueOf() if you want, they do the same thing.</source>
          <target state="translated">원하는 경우 valueOf () 대신 d1.getTime ()을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff13e1c8fd8336958ef291a9514961baa58f134b" translate="yes" xml:space="preserve">
          <source>You may find useful this modification of date object, which is smaller than any library and is easily extendable to support different formats:</source>
          <target state="translated">라이브러리보다 작고 다양한 형식을 지원하도록 쉽게 확장 할 수있는이 날짜 오브젝트 수정이 유용하다는 것을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca63f7a5bd9921e1329c4339c34719e751faf668" translate="yes" xml:space="preserve">
          <source>You simply include the date.js file in your HTML using your preferred method then call it like this:</source>
          <target state="translated">선호하는 메소드를 사용하여 HTML에 date.js 파일을 포함시킨 후 다음과 같이 호출하면됩니다.</target>
        </trans-unit>
        <trans-unit id="5e9b496a0935b15e72709835275b0a4dd4c2a1c6" translate="yes" xml:space="preserve">
          <source>etc...</source>
          <target state="translated">etc...</target>
        </trans-unit>
        <trans-unit id="7d88322d3416a52a199b5e9071e67685eaa08ec2" translate="yes" xml:space="preserve">
          <source>refer below link for more details
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&lt;/a&gt;</source>
          <target state="translated">자세한 내용은 아래 링크를 참조하십시오 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4e44c86a4dc7a8a41f3d48c50474209e8485023b" translate="yes" xml:space="preserve">
          <source>use this functions</source>
          <target state="translated">이 기능을 사용하십시오</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
