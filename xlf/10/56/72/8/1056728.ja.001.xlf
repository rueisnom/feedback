<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/1056728">
    <body>
      <group id="1056728">
        <trans-unit id="8ebe5c00c9152c2a29452c0429ebce7224a6a0fa" translate="yes" xml:space="preserve">
          <source>&quot;The contents of the String are implementation-dependent&quot;</source>
          <target state="translated">&quot;文字列の内容は実装に依存します&quot;</target>
        </trans-unit>
        <trans-unit id="58d3fd1405412176e917bcb2f9418f496041f179" translate="yes" xml:space="preserve">
          <source>(See also &lt;a href=&quot;https://jsfiddle.net/az0ab0Lm/1/&quot;&gt;&lt;strong&gt;this Fiddle&lt;/strong&gt;&lt;/a&gt;).</source>
          <target state="translated">（ &lt;a href=&quot;https://jsfiddle.net/az0ab0Lm/1/&quot;&gt;&lt;strong&gt;このフィドル&lt;/strong&gt;&lt;/a&gt;も参照してください）。</target>
        </trans-unit>
        <trans-unit id="ac98b31ad2f5eb41b7075765db2403e374944e82" translate="yes" xml:space="preserve">
          <source>(See also &lt;a href=&quot;https://jsfiddle.net/az0ab0Lm/2/&quot;&gt;&lt;strong&gt;this Fiddle&lt;/strong&gt;&lt;/a&gt;).</source>
          <target state="translated">（ &lt;a href=&quot;https://jsfiddle.net/az0ab0Lm/2/&quot;&gt;&lt;strong&gt;このフィドル&lt;/strong&gt;&lt;/a&gt;も参照してください）。</target>
        </trans-unit>
        <trans-unit id="394f25fa51d18c1ef08249a77940691c429c71f9" translate="yes" xml:space="preserve">
          <source>09 August 2013</source>
          <target state="translated">2013年8月9日</target>
        </trans-unit>
        <trans-unit id="a08b9de555d871c1fbf1d22c6f872de2c90d486c" translate="yes" xml:space="preserve">
          <source>2013 9 Aug</source>
          <target state="translated">2013年8月9日</target>
        </trans-unit>
        <trans-unit id="e1808e038d73a2e67b2c73caad1366ea6792c7b4" translate="yes" xml:space="preserve">
          <source>2013 Aug 09</source>
          <target state="translated">2013年8月09日</target>
        </trans-unit>
        <trans-unit id="9f9d758f0400cb85f5531b7ed462464405c2feb1" translate="yes" xml:space="preserve">
          <source>2013 August 09</source>
          <target state="translated">2013年8月09日</target>
        </trans-unit>
        <trans-unit id="86984c19e3d33e2abd749dd3be71d242a57aaaa1" translate="yes" xml:space="preserve">
          <source>2013/Aug/09</source>
          <target state="translated">2013/Aug/09</target>
        </trans-unit>
        <trans-unit id="4911b625eb5e48c162c0244fd0170d28558f5170" translate="yes" xml:space="preserve">
          <source>2013/Aug/9</source>
          <target state="translated">2013/Aug/9</target>
        </trans-unit>
        <trans-unit id="8370ff8837ccd8498c3b5c7e99863985e62e0191" translate="yes" xml:space="preserve">
          <source>2013/August/09</source>
          <target state="translated">2013/August/09</target>
        </trans-unit>
        <trans-unit id="f0520d97800f21976c30eed254fb557da8ed11aa" translate="yes" xml:space="preserve">
          <source>2013/August/9</source>
          <target state="translated">2013/August/9</target>
        </trans-unit>
        <trans-unit id="ccb8622f1509ced8bcfd055c92497186bd209379" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.javascriptsource.com/repository/javascripts/2009/03/880961/JS_Simple_Date_Format.zip&quot;&gt;JsSimpleDateFormat&lt;/a&gt; is a library that can format the date object and parse the formatted string back to Date object. It uses the Java format (SimpleDateFormat class). The name of months and days can be localized.</source>
          <target state="translated">&lt;a href=&quot;http://www.javascriptsource.com/repository/javascripts/2009/03/880961/JS_Simple_Date_Format.zip&quot;&gt;JsSimpleDateFormat&lt;/a&gt;は、日付オブジェクトをフォーマットし、フォーマットされた文字列を解析して日付オブジェクトに戻すことができるライブラリです。 Java形式（SimpleDateFormatクラス）を使用します。 月と日の名前はローカライズできます。</target>
        </trans-unit>
        <trans-unit id="69c1646795cc29f6118a2086f12bb8d3f9dc29a2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(*) lightweight meaning 9.3KB minified + gzipped in the smallest possible setup (feb 2014)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（*）軽量ということは、9.3KBを縮小+最小のセットアップでgzip圧縮したことを意味します（2014年2月）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="43aa3117c1a2cc592f1cf2d1a383b7fe843ba4ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;(*)&lt;/strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString&quot;&gt;&lt;strong&gt;According to the MDN&lt;/strong&gt;&lt;/a&gt;, &quot;Modern browsers&quot; means Chrome 24+, Firefox 29+, IE11, Edge12+, Opera 15+ &amp;amp; Safari &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/56490/what-does-nightly-builds-mean&quot;&gt;&lt;strong&gt;nightly build&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;（*）&lt;/strong&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString&quot;&gt;&lt;strong&gt;MDN&lt;/strong&gt;&lt;/a&gt;に&lt;strong&gt;よれば&lt;/strong&gt; 、「最新のブラウザ」とは、Chrome 24以降、Firefox 29以降、IE11、Edge12以降、Opera 15以降、Safari &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/56490/what-does-nightly-builds-mean&quot;&gt;&lt;strong&gt;ナイトリービルドを&lt;/strong&gt;&lt;/a&gt;意味します</target>
        </trans-unit>
        <trans-unit id="abbfb636aafdc4e967f6266a371cccd6e4c348a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;http://momentjs.com&quot;&gt;Moment.js&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;http://momentjs.com&quot;&gt;Moment.js&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="56bdf945673a85a98139128a373da6cbd2c4e554" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Any combination of [Full Year], [Month Name] and [Date Number] separated by spaces&lt;/strong&gt; - Month name can be in either short or long format, and date number can be with or without a leading zero.</source>
          <target state="translated">&lt;strong&gt;スペースで区切られた[通年]、[月名]、および[日付番号]の任意の組み合わせ&lt;/strong&gt; -月名は短い形式でも長い形式でもかまいません。日付番号には、先行ゼロがあってもなくてもかまいません。</target>
        </trans-unit>
        <trans-unit id="19acc1433de180fc96c6335d7425c88ea1387ff9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;CODE&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;CODE&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c1211658cdfed6d835b9c05999e42df3a7d43cf1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT&lt;/strong&gt;: Tyler Forsythe points out, that datejs is outdated. I use it in my current project and hadn't any trouble with it, however you should be aware of this and consider alternatives.</source>
          <target state="translated">&lt;strong&gt;編集&lt;/strong&gt; ：タイラー・フォーサイスが指摘する、そのdatejsは時代遅れです。 私は現在のプロジェクトでそれを使用しており、問題はありませんでしたが、これを認識し、代替案を検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="9184099b9d5087267394bbc23a30d1c5015b359d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Editor's note:&lt;/strong&gt; The following approach is the asker's attempt that worked on a particular browser but does &lt;em&gt;not&lt;/em&gt; work in general; &lt;strong&gt;see the answers on this page&lt;/strong&gt; to see some actual solutions.</source>
          <target state="translated">&lt;strong&gt;編集者注：&lt;/strong&gt;次のアプローチは、特定のブラウザでは機能したが一般には機能し&lt;em&gt;ない&lt;/em&gt;質問者の試みです。 &lt;strong&gt;このページの回答&lt;/strong&gt;を見て、実際の解決策をいくつか見てください。</target>
        </trans-unit>
        <trans-unit id="f35097e2b1b38de5ec88177ea2b0967e5b0e99a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;NOTE:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="762b0b987efcf101541560526e8d90e402907514" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;References&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;References&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aa09b1a3058d56edd04f134fd7c48d7c250cde5f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Resources&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Resources&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1cb021c737f247e65e724f7eb367810088853454" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sample usage:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;使用例：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d8d97e3f2670d27077e8554771499c964d22ac6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;USE&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;USE&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cb036d47b4951903b72f01d8ef22e8a73e6f8858" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using month names:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;月名を使用する：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1e87bd8086b97bf28f63ffc82c1ce23a55a2e6de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[Full Year]-[Month Number]-[Date Number]&lt;/strong&gt; - Month and Date Number must include leading zeros (this is the format that the &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.1/en/datetime.html&quot;&gt;MySQL Date type&lt;/a&gt; uses)</source>
          <target state="translated">&lt;strong&gt;[通年]-[月番号]-[日付番号]&lt;/strong&gt; -月と日付番号には先行ゼロを含める必要があります（これは&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.1/en/datetime.html&quot;&gt;MySQLの日付タイプが&lt;/a&gt;使用する形式です）</target>
        </trans-unit>
        <trans-unit id="f8c65f77ac21681d72033298bc24d458cb9c2f37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[Full Year]/[Month]/[Date number]&lt;/strong&gt; - Month can be either the number with or without a leading zero or the month name in short or long format, and date number can be with or without a leading zero.</source>
          <target state="translated">&lt;strong&gt;[通年] / [月] / [日付番号]&lt;/strong&gt; -月は、先行ゼロの有無の数字、または短い形式または長い形式の月の名前のいずれかで、 &lt;strong&gt;日付番号&lt;/strong&gt;は先行ゼロの有無のどちらでもかまいません。</target>
        </trans-unit>
        <trans-unit id="6503e0b877945cc606ecb61795423f721a3b085b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[Month]/[Full Year]/[Date Number]&lt;/strong&gt; - Month can be either the number with or without a leading zero or the month name in short or long format, and date number can be with or without a leading zero.</source>
          <target state="translated">&lt;strong&gt;[月] / [通年] / [日付番号]&lt;/strong&gt; -月は、先行ゼロの有無の数字、または短い形式または長い形式の月の名前のいずれかで、 &lt;strong&gt;日付番号&lt;/strong&gt;は先行ゼロの有無のいずれでもかまいません。</target>
        </trans-unit>
        <trans-unit id="cf114a4079c245b58c7eb276a64c660d62431b03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toDateString&lt;/strong&gt;: Implementation dependent, show only the date.</source>
          <target state="translated">&lt;strong&gt;toDateString&lt;/strong&gt; ：実装に依存し、日付のみを表示します。</target>
        </trans-unit>
        <trans-unit id="d449150196f8a97c5dac501ab0afe7927c86bc84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toISOString&lt;/strong&gt;: Show ISO 8601 date and time.</source>
          <target state="translated">&lt;strong&gt;toISOString&lt;/strong&gt; ：ISO 8601の日付と時刻を表示します。</target>
        </trans-unit>
        <trans-unit id="b87d940c1a7d4428305f8d57f4f8bbfb41f83210" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toJSON&lt;/strong&gt;: Stringifier for JSON.</source>
          <target state="translated">&lt;strong&gt;toJSON&lt;/strong&gt; ：JSONの文字列指定子。</target>
        </trans-unit>
        <trans-unit id="d62776092ec81e94bb95c1a60a1bbba485a1a55a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toLocaleDateString&lt;/strong&gt;: Implementation dependent, a date in locale format.</source>
          <target state="translated">&lt;strong&gt;toLocaleDateString&lt;/strong&gt; ：実装に依存する、ロケール形式の日付。</target>
        </trans-unit>
        <trans-unit id="15af5141cf91c453da4dadd2030192f75f52710e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toLocaleString&lt;/strong&gt;: Implementation dependent, a date&amp;amp;time in locale format.</source>
          <target state="translated">&lt;strong&gt;toLocaleString&lt;/strong&gt; ：実装に依存し、ロケール形式の日付と時刻。</target>
        </trans-unit>
        <trans-unit id="cc4bd4e71898a87ae28ace2a736a913a4237affe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toLocaleTimeString&lt;/strong&gt;: Implementation dependent, a time in locale format.</source>
          <target state="translated">&lt;strong&gt;toLocaleTimeString&lt;/strong&gt; ：実装に依存し、ロケール形式の時刻。</target>
        </trans-unit>
        <trans-unit id="88bd54e450e605aba3b2ad14b3cd0037df5ac04d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toString&lt;/strong&gt;: Generic toString for Date.</source>
          <target state="translated">&lt;strong&gt;toString&lt;/strong&gt; ：日付の一般的なtoString。</target>
        </trans-unit>
        <trans-unit id="3a3fc6fb939e0085074cefc8e6d65d3381d91750" translate="yes" xml:space="preserve">
          <source>A few examples:</source>
          <target state="translated">いくつかの例を紹介します。</target>
        </trans-unit>
        <trans-unit id="81283a532c4be641711c15d68082ba6a383e838e" translate="yes" xml:space="preserve">
          <source>A more advanced function could generate configurable output based on a format parameter. There are a couple of good examples in this same page.</source>
          <target state="translated">より高度な関数は、フォーマットパラメータに基づいて設定可能な出力を生成することができます。同じページにいくつかの良い例があります。</target>
        </trans-unit>
        <trans-unit id="3e48d3ff441b037822ac67e234117e44abc2fd9c" translate="yes" xml:space="preserve">
          <source>AFAIK, pure JavaScript doesn't support format specifiers &lt;strong&gt;the way you have indicated you'd like to use them&lt;/strong&gt;.  But it does support methods for formatting dates and/or times, such as &lt;code&gt;.toLocaleDateString()&lt;/code&gt;, &lt;code&gt;.toLocaleTimeString()&lt;/code&gt;, and &lt;code&gt;.toUTCString()&lt;/code&gt;.</source>
          <target state="translated">申し訳ありませんが、純粋なJavaScriptは、フォーマット指定子&lt;strong&gt;を使用したいという&lt;/strong&gt;指定&lt;strong&gt;の方法を&lt;/strong&gt;サポートしていません。 ただし、 &lt;code&gt;.toLocaleTimeString()&lt;/code&gt; &lt;code&gt;.toLocaleDateString()&lt;/code&gt; など、日付や時刻をフォーマットするためのメソッドはサポートしています。</target>
        </trans-unit>
        <trans-unit id="319b6bedfe935439fc96568d7d71290d45517b52" translate="yes" xml:space="preserve">
          <source>All browsers</source>
          <target state="translated">すべてのブラウザ</target>
        </trans-unit>
        <trans-unit id="6b134d179c1e5ebb6ed2eb728129655503743071" translate="yes" xml:space="preserve">
          <source>All other numbers are interpreted as &amp;ldquo;date components&amp;rdquo;.</source>
          <target state="translated">他のすべての数値は「日付コンポーネント」として解釈されます。</target>
        </trans-unit>
        <trans-unit id="24191b53350478480af9945bba50a31b32c847a0" translate="yes" xml:space="preserve">
          <source>All words that start with the first three digits of a month are interpreted as the month.</source>
          <target state="translated">月の最初の3桁から始まる単語はすべてその月と解釈します。</target>
        </trans-unit>
        <trans-unit id="a835db62a4378918567ec54b8551ec58e9a13d4b" translate="yes" xml:space="preserve">
          <source>Also here I couldn't find any documentation on all the ways we can format the date object into a string.</source>
          <target state="translated">また、ここでは日付オブジェクトを文字列にフォーマットする方法についてのドキュメントを見つけることができませんでした。</target>
        </trans-unit>
        <trans-unit id="d6c603d37d9fc02df74f9c7e73a29f2ed402f555" translate="yes" xml:space="preserve">
          <source>Also note that the &lt;strong&gt;Date Object Properties&lt;/strong&gt; section provides a link to &lt;a href=&quot;http://www.w3schools.com/jsref/jsref_prototype_date.asp&quot;&gt;&lt;code&gt;prototype&lt;/code&gt;&lt;/a&gt;, which illustrates some ways you can extend the Date object with custom methods.  There has been &lt;a href=&quot;http://perfectionkills.com/extending-built-in-native-objects-evil-or-not/&quot;&gt;some debate&lt;/a&gt; in the JavaScript community over the years about whether or not this is best practice, and I am not advocating for or against it, just pointing out its existence.</source>
          <target state="translated">また、 &lt;strong&gt;Dateオブジェクトのプロパティ&lt;/strong&gt;セクションには&lt;a href=&quot;http://www.w3schools.com/jsref/jsref_prototype_date.asp&quot;&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;/a&gt;へのリンクがあり、カスタムメソッドを使用してDateオブジェクトを拡張する方法がいくつか示されています。 これがベストプラクティスであるかどうかについて、JavaScriptコミュニティでは長年にわたって&lt;a href=&quot;http://perfectionkills.com/extending-built-in-native-objects-evil-or-not/&quot;&gt;いくつかの議論&lt;/a&gt;があり、私はその存在を指摘するだけで、それについて賛成または反対することはしません。</target>
        </trans-unit>
        <trans-unit id="d2eb98bd0de830f5731a65b846e8e483046f2f58" translate="yes" xml:space="preserve">
          <source>Also valid in &quot;modern browsers&quot; (or in other words all browsers except IE9 and below)</source>
          <target state="translated">最新のブラウザ」(つまりIE9以下を除くすべてのブラウザ)でも有効です。</target>
        </trans-unit>
        <trans-unit id="237bdf333911975e526f9262114e5dad917509d2" translate="yes" xml:space="preserve">
          <source>And we can further infer that dates are expected to be in a modified ISO 8601 Extended Format, as specified here:</source>
          <target state="translated">そして、ここで指定されているように、日付は修正されたISO 8601拡張フォーマットであることが予想されることをさらに推論することができる。</target>
        </trans-unit>
        <trans-unit id="5d1af9943967d40553a9297a8b384a35122f8d34" translate="yes" xml:space="preserve">
          <source>Aug 9 2013</source>
          <target state="translated">2013年8月9日</target>
        </trans-unit>
        <trans-unit id="fd105e2bf900d5f1b4c39161809ab24b76edfd94" translate="yes" xml:space="preserve">
          <source>Aug/2013/09</source>
          <target state="translated">Aug/2013/09</target>
        </trans-unit>
        <trans-unit id="d510a20c1b95f9648c28ce9937e220b9b7243991" translate="yes" xml:space="preserve">
          <source>Aug/2013/9</source>
          <target state="translated">Aug/2013/9</target>
        </trans-unit>
        <trans-unit id="12372c7bb2acb7b6362bf3ffaa48f57cc35610af" translate="yes" xml:space="preserve">
          <source>August 2013 09</source>
          <target state="translated">2013年8月09日</target>
        </trans-unit>
        <trans-unit id="b623a37f638b2241cbb33bdc9588b286daecad49" translate="yes" xml:space="preserve">
          <source>August/2013/09</source>
          <target state="translated">August/2013/09</target>
        </trans-unit>
        <trans-unit id="adb64d3866f80cf9591aa1582c085f8a232265b3" translate="yes" xml:space="preserve">
          <source>August/2013/9</source>
          <target state="translated">August/2013/9</target>
        </trans-unit>
        <trans-unit id="461e78e221d0c01f168ee4d775ec261a544a1652" translate="yes" xml:space="preserve">
          <source>Basically, you have three methods and you have to combine the strings for yourself:</source>
          <target state="translated">基本的には3つの方法があり、自分で紐を組み合わせていくことになります。</target>
        </trans-unit>
        <trans-unit id="156939da701f32e70e53db07bd4d6fc51b4bc587" translate="yes" xml:space="preserve">
          <source>Both of those functions should look familiar, but this does not immediately answer your question and what quantifies as an acceptable &amp;ldquo;date format&amp;rdquo; requires further explanation. When you pass a string to new Date(), it will call the prototype (note that I'm using the word &lt;em&gt;prototype&lt;/em&gt; loosely; the versions may be individual functions, or it may be part of a conditional statement in a single function) for &lt;strong&gt;new Date(value)&lt;/strong&gt; with your string as the argument for the &amp;ldquo;value&amp;rdquo; parameter. This function will first check whether it is a number or a string. The documentation for this function can be found here:</source>
          <target state="translated">これらの関数はどちらも見慣れたものに見えるはずですが、これはあなたの質問にすぐには答えません。許容できる「日付形式」として数値化するものには、さらに説明が必要です。 文字列をnew Date（）に渡すと、プロトタイプが呼び出されます（私は&lt;em&gt;プロトタイプ&lt;/em&gt;という単語を大まかに使用していることに注意してください。バージョンは個別の関数である場合もあれば、単一の関数の条件ステートメントの一部である場合もあります）。 「値」パラメーターの引数として文字列を含む&lt;strong&gt;新しいDate（value）&lt;/strong&gt; 。 この関数は、最初にそれが数値か文字列かをチェックします。 この関数のドキュメントはここにあります：</target>
        </trans-unit>
        <trans-unit id="df17feb52ee10a0b2b083f6cd0c801c1948f59bb" translate="yes" xml:space="preserve">
          <source>Custom formatting function:</source>
          <target state="translated">カスタムフォーマット機能。</target>
        </trans-unit>
        <trans-unit id="215fe7d89c494c03c175f31265f32bb1c7ec5e2b" translate="yes" xml:space="preserve">
          <source>DP_DateExtensions Library</source>
          <target state="translated">DP_DateExtensions ライブラリ</target>
        </trans-unit>
        <trans-unit id="9224d74f25db171b77441c2783969d67515b2aea" translate="yes" xml:space="preserve">
          <source>DateJS is certainly full-featured, but I'd recommend &lt;a href=&quot;http://blog.stevenlevithan.com/archives/date-time-format&quot;&gt;this MUCH simpler lib (JavaScript Date Format)&lt;/a&gt; which I prefer  simply because it's only 120 lines or so.</source>
          <target state="translated">DateJSは確かにフル機能を備えていますが、120行程度しかないという理由で私が好む&lt;a href=&quot;http://blog.stevenlevithan.com/archives/date-time-format&quot;&gt;この&lt;/a&gt;非常にシンプルなlib（JavaScript日付形式）をお勧めします。</target>
        </trans-unit>
        <trans-unit id="afba89d9308eb3bee8421b4a271b91b7c7e36cae" translate="yes" xml:space="preserve">
          <source>Essentially, when dealing with javascript, you&amp;rsquo;re dealing with a derivative (javascript specific to the browser) of an implementation (javascript itself). Google&amp;rsquo;s V8, for example, implements ECMAScript 5.0, but Internet Explorer&amp;rsquo;s JScript doesn&amp;rsquo;t attempt to conform to any ECMAScript standard, yet Internet&amp;nbsp;Explorer&amp;nbsp;9 does conform to ECMAScript 5.0.</source>
          <target state="translated">基本的に、JavaScriptを扱う場合は、実装（JavaScript自体）の派生物（ブラウザー固有のJavaScript）を扱います。 たとえば、GoogleのV8はECMAScript 5.0を実装していますが、Internet ExplorerのJScriptはECMAScript標準に準拠していませんが、Internet Explorer 9はECMAScript 5.0に準拠しています。</target>
        </trans-unit>
        <trans-unit id="0483beb1135269908e7a45fb455b6f6963675242" translate="yes" xml:space="preserve">
          <source>Example :</source>
          <target state="translated">例.</target>
        </trans-unit>
        <trans-unit id="1fabb1683d22d0469c9e9cac437dfd3fa193ab75" translate="yes" xml:space="preserve">
          <source>Example code:</source>
          <target state="translated">コード例。</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">使用例。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">スニペットを展開</target>
        </trans-unit>
        <trans-unit id="89ab4e92b02edbfc12ec7c3cbc134c5834677c24" translate="yes" xml:space="preserve">
          <source>For fixed formats, a simple function make the job. Following example generate the international format YYYY-MM-DD:</source>
          <target state="translated">固定フォーマットの場合は、簡単な関数を使用することができます。以下の例では、国際フォーマットのYYYY-MM-DDを生成しています。</target>
        </trans-unit>
        <trans-unit id="6b3c835fe3e86a3e2fa59918b389b2620cd398f0" translate="yes" xml:space="preserve">
          <source>Formatting and especially parsing dates in JavaScript can be a bit of a headache. Not all browsers handle dates in the same way. So while it's useful to know the base methods, its more practical to use a helper library.</source>
          <target state="translated">JavaScript で日付をフォーマットしたり、特にパースしたりするのはちょっとした頭痛の種です。すべてのブラウザが同じように日付を扱うわけではありません。そのため、基本的なメソッドを知っておくのは便利ですが、ヘルパーライブラリを使うのがより実用的です。</target>
        </trans-unit>
        <trans-unit id="5e20b191436ba78d6a13b6ff78b42967d24bb3c6" translate="yes" xml:space="preserve">
          <source>Framework free, limited but light</source>
          <target state="translated">フレームワーク無料、限定的だが軽い</target>
        </trans-unit>
        <trans-unit id="22cab2219190e6ad9eb54540338877c187dc078c" translate="yes" xml:space="preserve">
          <source>From this you can expect basic functionality, but what &amp;ldquo;ought&amp;rdquo; to be is not inherently what &amp;ldquo;is&amp;rdquo;. I&amp;rsquo;m going to go a little in depth with this procedurally though, as it appears only three people actually answered the question (Scott, goofballLogic, and peller namely) which, to me, suggests most people are unaware of what actually happens when you create a Date object.</source>
          <target state="translated">これからは基本的な機能が期待できますが、本来あるべき「本来あるべきもの」ではありません。 私はこれを手続き的に少し詳しく説明しますが、実際に質問に答えたのは3人（Scott、goofballLogic、およびpellerのみ）なので、ほとんどの人はあなたが実際に何が起こるか気づいていないようですDateオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="797ded1cb074fdfadda99abfcd54257663d72435" translate="yes" xml:space="preserve">
          <source>From this, we can deduce that to get the string formatting allowed for new Date(value), we have to look at the method Date.parse(string). The documentation for this method can be found here:</source>
          <target state="translated">このことから、新しい Date(value)に許可されている文字列フォーマットを取得するには、 Date.parse(string)メソッドを見なければならないことがわかります。このメソッドのドキュメントはここにあります。</target>
        </trans-unit>
        <trans-unit id="c1ed5866b4b0020cb1fe4b7cf51bf48fa489826b" translate="yes" xml:space="preserve">
          <source>Functions such as the samples below could be used to accomplish formatting fairly easily.</source>
          <target state="translated">以下のサンプルのような関数を使用すると、かなり簡単に書式設定を行うことができます。</target>
        </trans-unit>
        <trans-unit id="94b126616ecade2ae2606a5fd2ba3d2b7b6ff56f" translate="yes" xml:space="preserve">
          <source>Google&amp;rsquo;s V8, date.js, DateConstructor</source>
          <target state="translated">GoogleのV8、date.js、DateConstructor</target>
        </trans-unit>
        <trans-unit id="b22dc0cb06620e63bb33dd9f96d926eaf027c323" translate="yes" xml:space="preserve">
          <source>Google&amp;rsquo;s V8, date.js, DateParse</source>
          <target state="translated">GoogleのV8、date.js、DateParse</target>
        </trans-unit>
        <trans-unit id="15f24e286a9a678cb2ba3e5c226eae1005009b21" translate="yes" xml:space="preserve">
          <source>Google&amp;rsquo;s V8, runtime.cc, %DateParseString</source>
          <target state="translated">GoogleのV8、runtime.cc、％DateParseString</target>
        </trans-unit>
        <trans-unit id="b6133ba61c3e572cccbbdf2b89341728a1c0f187" translate="yes" xml:space="preserve">
          <source>Google's V8, dateparser-inl.h, DateParser::Parse</source>
          <target state="translated">Google の V8、dateparser-inl.h、DateParser::Parse</target>
        </trans-unit>
        <trans-unit id="9a49d653b56cf99344b3fdd68c872aae5b737771" translate="yes" xml:space="preserve">
          <source>Have a look at &lt;a href=&quot;http://docs.jquery.com/UI/Datepicker/formatDate&quot;&gt;jQuery UI datepicker formatDate&lt;/a&gt;, the examples.</source>
          <target state="translated">&lt;a href=&quot;http://docs.jquery.com/UI/Datepicker/formatDate&quot;&gt;jQuery UIのdatepicker formatDate&lt;/a&gt;の例をご覧ください 。</target>
        </trans-unit>
        <trans-unit id="b6417d0ed712ddb7d0b22551a01de7cc0ed38ec4" translate="yes" xml:space="preserve">
          <source>Having looked through several of the options provided in other answers, I decided to write my own limited but simple solution that others may also find useful.</source>
          <target state="translated">他の回答で提供されたいくつかの選択肢に目を通した結果、他の人も役に立つと思うような、限定的ではありますがシンプルな解決策を自分で書くことにしました。</target>
        </trans-unit>
        <trans-unit id="c36ef013f2a88dc8907e59aa3361eb63f3bd8dd8" translate="yes" xml:space="preserve">
          <source>Here's a function I use a lot. The result is yyyy-mm-dd hh:mm:ss.nnn.</source>
          <target state="translated">私がよく使う関数を紹介します。結果はyyyy-mm-dd hh:mm:ss.nnnです。</target>
        </trans-unit>
        <trans-unit id="a460d0df0162832679dedc7cafe8979e7acac7fc" translate="yes" xml:space="preserve">
          <source>However, the datepicker only formats dates, and cannot format times.</source>
          <target state="translated">しかし、データピッカーは日付をフォーマットするだけで、時間をフォーマットすることはできません。</target>
        </trans-unit>
        <trans-unit id="c9d7a7c12f2adc466e804e068645892b51e580b0" translate="yes" xml:space="preserve">
          <source>However, we can recognize from experience that javascript&amp;rsquo;s Date object accepts other formats (enforced by the existence of this question in the first place), and this is okay because ECMAScript allows for implementation specific formats. However, that still doesn&amp;rsquo;t answer the question of what documentation is available on the available formats, nor what formats are actually allowed. We&amp;rsquo;re going to look at Google&amp;rsquo;s javascript implementation, V8; please note I&amp;rsquo;m not suggesting this is the &amp;ldquo;best&amp;rdquo; javascript engine (how can one define &amp;ldquo;best&amp;rdquo; or even &amp;ldquo;good&amp;rdquo;) and one cannot assume that the formats allowed in V8 represent all formats available today, but I think it&amp;rsquo;s fair to assume they do follow modern expectations.</source>
          <target state="translated">ただし、JavaScriptのDateオブジェクトは他の形式（最初にこの質問が存在することで強制される）を受け入れることを経験から認識できます。ECMAScriptでは特定の形式の実装が許可されているため、これは問題ありません。 ただし、それでも、利用可能な形式で利用可能なドキュメントや、実際に許可されている形式についての質問には答えません。 ここでは、GoogleのJavaScript実装V8を見ていきます。 これが「最良の」JavaScriptエンジンであることを示唆しているわけではないことに注意してください（「最良の」または「良い」を定義するにはどうすればよいですか）。彼らが現代の期待に従っていると仮定する。</target>
        </trans-unit>
        <trans-unit id="df17521fdb77be395fc191a49ea603cf9f753c47" translate="yes" xml:space="preserve">
          <source>I could not find documentation anywhere showing all the valid string formats while calling &lt;code&gt;new Date()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;new Date()&lt;/code&gt; 関数を呼び出しているときに、すべての有効な文字列形式を示すドキュメントをどこにも見つけることができませんでした。</target>
        </trans-unit>
        <trans-unit id="c31759a3d8424f9ea9e6642c8f160fd4294ef2d9" translate="yes" xml:space="preserve">
          <source>I love &lt;em&gt;&lt;a href=&quot;https://www.webdevelopersnotes.com/10-ways-to-format-time-and-date-using-javascript&quot;&gt;10 ways to format time and date using JavaScript&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href=&quot;http://www.elated.com/articles/working-with-dates/&quot;&gt;Working with Dates&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://www.webdevelopersnotes.com/10-ways-to-format-time-and-date-using-javascript&quot;&gt;JavaScript&lt;/a&gt;&lt;/em&gt;と&lt;em&gt;日付の操作を使用して時刻と日付をフォーマットする10の方法が&lt;/em&gt;大好きです。</target>
        </trans-unit>
        <trans-unit id="ffaa4c3a0de427e532067ad206544c297c53abaf" translate="yes" xml:space="preserve">
          <source>I made this very simple formatter, it's cut/n/pastable (Updated with neater version):</source>
          <target state="translated">シンプルなフォーマッタを作ってみました。</target>
        </trans-unit>
        <trans-unit id="6611357bea8f62dbbc5da8da06517924dcc25f51" translate="yes" xml:space="preserve">
          <source>I noticed that JavaScript's &lt;code&gt;new Date()&lt;/code&gt; function is very smart in accepting dates in several formats.</source>
          <target state="translated">JavaScriptの &lt;code&gt;new Date()&lt;/code&gt; 関数は、いくつかの形式の日付を受け入れる点で非常に優れていることに気付きました。</target>
        </trans-unit>
        <trans-unit id="e2b072e3133413cb47898dc670481a1957ae2633" translate="yes" xml:space="preserve">
          <source>I stumbled across this today and was quite surprised that no one took the time to answer this simple question.  True, there are many libraries out there to help with date manipulation.  Some are better than others.  But that wasn't the question asked.</source>
          <target state="translated">今日これに偶然出くわしたのですが、誰もこの素朴な疑問に答えるために時間を割いてくれなかったことに非常に驚きました。確かに、日付操作を助けるためのライブラリはたくさんあります。いくつかは他のものよりも優れています。しかし、それは質問ではありませんでした。</target>
        </trans-unit>
        <trans-unit id="f26176545d2d73fecac09ec100bebc27ffa99a69" translate="yes" xml:space="preserve">
          <source>I was unable to find any definitive documentation on valid date formats so I wrote my own test to see what is supported in various browsers.</source>
          <target state="translated">有効な日付フォーマットに関する決定的なドキュメントを見つけることができなかったので、様々なブラウザで何がサポートされているかを確認するために自分でテストを書いてみました。</target>
        </trans-unit>
        <trans-unit id="ff2c642683d153adf11406f5bced4f1383f52db5" translate="yes" xml:space="preserve">
          <source>If to write a formatting function is too long, there are plenty of libraries around which does it. Some other answers already enumerate them. But increasing dependencies also has it counter-part.</source>
          <target state="translated">書式化関数を書くのが面倒な場合は、それを行うライブラリがたくさんあります。他の回答の中には、すでにそれらを列挙しているものもあります。しかし、依存関係を増やすことは、それに対抗するものもあります。</target>
        </trans-unit>
        <trans-unit id="f961fbd962ecbfce00d3cd719d73fca366f1d8cf" translate="yes" xml:space="preserve">
          <source>If you are already using &lt;a href=&quot;http://en.wikipedia.org/wiki/JQuery_UI&quot;&gt;jQuery UI&lt;/a&gt; in your project, you can use the built-in datepicker method for formatting your date object:</source>
          <target state="translated">プロジェクトですでに&lt;a href=&quot;http://en.wikipedia.org/wiki/JQuery_UI&quot;&gt;jQuery UI&lt;/a&gt;を使用している場合は、組み込みのdatepickerメソッドを使用して日付オブジェクトをフォーマットできます。</target>
        </trans-unit>
        <trans-unit id="4c8f8108b5237dee81b175d9ed4d82650b5e56a6" translate="yes" xml:space="preserve">
          <source>If you don't need all the features that a library like &lt;a href=&quot;http://momentjs.com/&quot;&gt;Moment.js&lt;/a&gt; provides, then you can use my port of &lt;a href=&quot;http://man7.org/linux/man-pages/man3/strftime.3.html&quot;&gt;strftime&lt;/a&gt;. It's lightweight (1.35 KB vs. 57.9 KB minified compared to Moment.js 2.15.0) and provides most of the functionality of &lt;code&gt;strftime()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://momentjs.com/&quot;&gt;Moment.jsの&lt;/a&gt;ようなライブラリが提供するすべての機能が必要ない場合は、 &lt;a href=&quot;http://man7.org/linux/man-pages/man3/strftime.3.html&quot;&gt;strftimeの&lt;/a&gt;私のポートを使用できます。 軽量で（Moment.js 2.15.0と比較して1.35 KBと57.9 KBを縮小）、 &lt;code&gt;strftime()&lt;/code&gt; のほとんどの機能を提供します。</target>
        </trans-unit>
        <trans-unit id="22aff460a9167708273c07351e5616027269234b" translate="yes" xml:space="preserve">
          <source>If you want to show only time with &lt;strong&gt;two&lt;/strong&gt; digits, this may helps you:</source>
          <target state="translated">&lt;strong&gt;2&lt;/strong&gt;桁の時間のみを表示する場合は、次のように役立ちます。</target>
        </trans-unit>
        <trans-unit id="710aeb2a7dc5514d4f010c9ceeef5446ab41ad87" translate="yes" xml:space="preserve">
          <source>In addition to this, there is a second standard set forward by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Engineering_Task_Force&quot;&gt;IETF&lt;/a&gt; that browsers tend to follow as well, which is the definition for timestamps made in the RFC 2822. Actual documentation can be found in the references list at the bottom.</source>
          <target state="translated">これに加えて、ブラウザが従う傾向がある&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Engineering_Task_Force&quot;&gt;IETF&lt;/a&gt;によって転送される2番目の標準があります。これは、RFC 2822で作成されたタイムスタンプの定義です。実際のドキュメントは、下部の参照リストにあります。</target>
        </trans-unit>
        <trans-unit id="53f5d1f9ef5fa567eb91d6bcee19878cc9a173b9" translate="yes" xml:space="preserve">
          <source>In any case, this should aid in highlighting that there is no &quot;documentation&quot; that universally represents all implementations of javascript, but there is still enough documentation available to make reasonable sense of what strings are acceptable for a Date object. Quite the loaded question when you think about it, yes? :P</source>
          <target state="translated">いずれにしても、これはjavascriptのすべての実装を普遍的に表現する「ドキュメント」は存在しないことを強調するのに役立つはずですが、Dateオブジェクトに許容される文字列の意味を合理的に理解するのに十分なドキュメントはまだ存在します。考えてみれば、かなり難しい質問ですよね?</target>
        </trans-unit>
        <trans-unit id="a8b51096d048c4e95d01b50fbf008933f958f287" translate="yes" xml:space="preserve">
          <source>Interestingly, when using month names I discovered that only the first 3 characters of the month name are ever used so all the of the following are perfectly valid:</source>
          <target state="translated">興味深いことに、月の名前を使用するとき、私は月の名前の最初の3文字だけが使用されていることを発見したので、以下のすべてが完全に有効です。</target>
        </trans-unit>
        <trans-unit id="17a5ba31c784e8cf40aae28024d8f4c4ada4f7e9" translate="yes" xml:space="preserve">
          <source>It is a (lightweight)* JavaScript date library for parsing, manipulating, and formatting dates.</source>
          <target state="translated">日付の解析、操作、書式設定を行うための(軽量)*JavaScript 日付ライブラリです。</target>
        </trans-unit>
        <trans-unit id="f5d115279f70dbc882e63025cc30de4149b7c25b" translate="yes" xml:space="preserve">
          <source>It uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;Object.keys()&lt;/a&gt; which is undefined in older browsers so you may need implement polyfill from given link.</source>
          <target state="translated">古いブラウザでは定義されていない&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;Object.keys（）&lt;/a&gt;を使用しているため、特定のリンクからポリフィルを実装する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="db8e74eb464018f7742f85205c4907c910613e62" translate="yes" xml:space="preserve">
          <source>Items that match multiple formats (e.g. 1970-01-01) are processed as a standard compliant EMCAScript 5.0 ISO 8601 string.</source>
          <target state="translated">複数のフォーマット(1970-01-01など)に一致する項目は、標準準拠のEMCAScript 5.0 ISO 8601文字列として処理されます。</target>
        </trans-unit>
        <trans-unit id="35e8d3da12c5512106244c4805a83ed372be85c2" translate="yes" xml:space="preserve">
          <source>Just another option, which I wrote:</source>
          <target state="translated">ただの別の選択肢で、私が書いただけです。</target>
        </trans-unit>
        <trans-unit id="61e0891acda5196c701c4069bfab5ec127258538" translate="yes" xml:space="preserve">
          <source>Just to continue gongzhitaao's solid answer - this handles AM/PM</source>
          <target state="translated">ちょうどgongzhitaaoの確固たる答えを続けるために-これはAMPMを処理します。</target>
        </trans-unit>
        <trans-unit id="6ead88c04f35aa5703ee4b194af590049b41f827" translate="yes" xml:space="preserve">
          <source>Link to changing the locale strings: &lt;a href=&quot;https://gist.github.com/1221376&quot;&gt;https://gist.github.com/1221376&lt;/a&gt;</source>
          <target state="translated">ロケール文字列の変更へのリンク： &lt;a href=&quot;https://gist.github.com/1221376&quot;&gt;https&lt;/a&gt; : //gist.github.com/1221376</target>
        </trans-unit>
        <trans-unit id="d9aec26094de82b27ee47b6b58066eac935231a5" translate="yes" xml:space="preserve">
          <source>Looking at the DateConstructor function, we can deduce we need to find the DateParse function; however, note that &amp;ldquo;year&amp;rdquo; is not the actual year and is only a reference to the &amp;ldquo;year&amp;rdquo; parameter.</source>
          <target state="translated">DateConstructor関数を見ると、DateParse関数を見つける必要があると推測できます。 ただし、「年」は実際の年ではなく、「年」パラメータへの参照にすぎないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="645a33c68f34de07fcdb035049e28802d0c3928b" translate="yes" xml:space="preserve">
          <source>Make sure you checkout &lt;a href=&quot;http://www.datejs.com/&quot;&gt;Datejs&lt;/a&gt; when dealing with dates in JavaScript. It's quite impressive and well documented as you can see in case of the &lt;a href=&quot;http://code.google.com/p/datejs/wiki/APIDocumentation#toString&quot;&gt;toString function&lt;/a&gt;.</source>
          <target state="translated">JavaScriptで日付を扱う場合は、必ず&lt;a href=&quot;http://www.datejs.com/&quot;&gt;Datejs&lt;/a&gt;をチェックアウトしてください。 &lt;a href=&quot;http://code.google.com/p/datejs/wiki/APIDocumentation#toString&quot;&gt;toString関数の&lt;/a&gt;場合に見られるように、それは非常に印象的で十分に文書化されています。</target>
        </trans-unit>
        <trans-unit id="c08bf5434568b6d819143126966cb6c329517266" translate="yes" xml:space="preserve">
          <source>Modern browsers only</source>
          <target state="translated">モダンブラウザのみ</target>
        </trans-unit>
        <trans-unit id="44ef0a0c5c2c4d04666563418da2fbc86eae2dea" translate="yes" xml:space="preserve">
          <source>My results concluded the following formats are valid in all browsers that I tested (examples use the date &quot;9th August 2013&quot;):</source>
          <target state="translated">私の結果は、私がテストしたすべてのブラウザで以下の形式が有効であるという結論に達しました(例では「2013年8月9日」という日付を使用しています)。</target>
        </trans-unit>
        <trans-unit id="5984a869d38cc1793c9591d03820fabba3dcfd3d" translate="yes" xml:space="preserve">
          <source>No reason to consider it if you're already using a framework (they're all capable), but if you just need to quickly add date manipulation to a project give it a chance.</source>
          <target state="translated">すでにフレームワークを使用している場合には考慮する理由はありませんが (フレームワークはすべて可能です)、プロジェクトに日付操作を素早く追加する必要がある場合にはチャンスを与えてください。</target>
        </trans-unit>
        <trans-unit id="0a2ba271ef9c79b3df9517d20a87f07aa8719568" translate="yes" xml:space="preserve">
          <source>Not sure if it'll help, but I've found it useful in several projects - looks like it'll do what you need.</source>
          <target state="translated">役に立つかどうかはわかりませんが、いくつかのプロジェクトで便利なことがわかりました。</target>
        </trans-unit>
        <trans-unit id="8bb7e2992a7f187e98c466141e8d68757fa57d45" translate="yes" xml:space="preserve">
          <source>Note: It is, however, usually not a good idea to extend the Javascript standard libraries (e.g. by adding this function to the prototype of Date).</source>
          <target state="translated">注意:しかし、通常、Javascript標準ライブラリを拡張することは良い考えではありません (例えば、Dateのプロトタイプにこの関数を追加するなど)。</target>
        </trans-unit>
        <trans-unit id="f8e0bb8fd74a60e7662c2922a1ca8ec1a4e31fb0" translate="yes" xml:space="preserve">
          <source>Note: it is possible to generate custom output out of those formatting functions:</source>
          <target state="translated">注意:これらの書式設定関数からカスタム出力を生成することができます。</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="546ca3e57a581b385f3731a50d1011d161cf2cea" translate="yes" xml:space="preserve">
          <source>Parenthesized text are ignored.</source>
          <target state="translated">括弧で囲まれたテキストは無視されます。</target>
        </trans-unit>
        <trans-unit id="df9f379161c233d12b62504d684bf2a89535c58c" translate="yes" xml:space="preserve">
          <source>Paste the pieces together according to your target format</source>
          <target state="translated">目的のフォーマットに合わせて貼り合わせる</target>
        </trans-unit>
        <trans-unit id="495908be539a7c150597912922f8549215a765aa" translate="yes" xml:space="preserve">
          <source>Personally, because I use both PHP and jQuery/javascript in equal measures, I use the date function from php.js &lt;a href=&quot;http://phpjs.org/functions/date/&quot;&gt;http://phpjs.org/functions/date/&lt;/a&gt;</source>
          <target state="translated">個人的には、PHPとjQuery / javascriptの両方を同等に使用しているため、php.jsの日付関数&lt;a href=&quot;http://phpjs.org/functions/date/&quot;&gt;http://phpjs.org/functions/date/&lt;/a&gt;を使用しています</target>
        </trans-unit>
        <trans-unit id="8992beb0ddb8597071fe787737b4a332cd5d7403" translate="yes" xml:space="preserve">
          <source>Several libraries provide routines to parameterize this, some with extensive localization support.  You can also check out the methods in &lt;a href=&quot;http://dojotoolkit.org/api/?qs=1.3/dojo.date.locale&quot;&gt;dojo.date.locale&lt;/a&gt;.</source>
          <target state="translated">いくつかのライブラリは、これをパラメータ化するルーチンを提供し、一部は広範なローカリゼーションサポートを備えています。 &lt;a href=&quot;http://dojotoolkit.org/api/?qs=1.3/dojo.date.locale&quot;&gt;dojo.date.locale&lt;/a&gt;のメソッドも確認できます。</target>
        </trans-unit>
        <trans-unit id="632f9f269685ebdbf3950204c25d20e189268211" translate="yes" xml:space="preserve">
          <source>Signed numbers followed by the hour or hour minute (e.g. +5:15 or +0515) are interpreted as the timezone.</source>
          <target state="translated">時または時分に続く符号付きの数字(例:+5:15や+0515)は、タイムゾーンとして解釈されます。</target>
        </trans-unit>
        <trans-unit id="e246126e46317b507ad8695fe2a3d9e7e77549d1" translate="yes" xml:space="preserve">
          <source>Since more recent versions of ECMAscript, the &lt;code&gt;Date&lt;/code&gt; class has some specific formatting functions:</source>
          <target state="translated">ECMAscriptの最新バージョン以降、 &lt;code&gt;Date&lt;/code&gt; クラスには特定のフォーマット関数がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="4f5e5390bb2f05f3426be2d9113575f9da131f3b" translate="yes" xml:space="preserve">
          <source>So this should be enough to give you a basic idea of what to expect when it comes to passing a string into a Date object. You can further expand upon this by looking at the following specification that Mozilla points to on the Mozilla Developer Network (compliant to the IETF RFC 2822 timestamps):</source>
          <target state="translated">これだけで、Date オブジェクトに文字列を渡すときに何を期待するかの基本的なアイデアは十分に得られるはずです。Mozilla Developer Network で Mozilla が指摘している以下の仕様 (IETF RFC 2822 timestamps に準拠しています)を見ることで、これをさらに発展させることができます。</target>
        </trans-unit>
        <trans-unit id="362ba4f79ecd3d6b8188ca1c6338d84d7d9d137f" translate="yes" xml:space="preserve">
          <source>Standard ECMAScript formatting functions:</source>
          <target state="translated">ECMAScriptの標準的な書式設定機能。</target>
        </trans-unit>
        <trans-unit id="fc260ca4fff84e241646a28bf161bd0d2a785031" translate="yes" xml:space="preserve">
          <source>Sugar gives the Date class much love starting with the Date.create
  method which can understand dates in just about any format in 15 major
  languages, including relative formats like &quot;1 hour ago&quot;. Dates can
  also be output in any format or language using an easy to understand
  syntax, with shortcuts to commonly used date formats. Complex date
  comparison is also possible with methods like is, which understand any
  format and apply built in precision.</source>
          <target state="translated">このメソッドは、&quot;1 時間前&quot; のような相対形式を含む、15 の主要な言語のほぼすべての形式の日付を理解することができます。また、一般的に使用される日付フォーマットへのショートカットを使用して、理解しやすい構文を使用して、任意のフォーマットまたは言語で日付を出力することができます。isのようなメソッドを使用して複雑な日付比較も可能で、あらゆる形式を理解し、内蔵の精度を適用します。</target>
        </trans-unit>
        <trans-unit id="f29981eb711a34385f3a8c3369941b1acb944227" translate="yes" xml:space="preserve">
          <source>Supports date/time formatting, date math (add/subtract date parts), date compare, date parsing, etc. It's liberally open sourced.</source>
          <target state="translated">日付時刻の書式設定、日付計算(日付部分の加算減算)、日付比較、日付解析などをサポートしています。自由にオープンソースです。</target>
        </trans-unit>
        <trans-unit id="bde303b779bf944e66997dd5072e542fef0bc54a" translate="yes" xml:space="preserve">
          <source>Symbols like &amp;ldquo;+&amp;rdquo;, &amp;ldquo;-&amp;ldquo; and unmatched &amp;ldquo;)&amp;rdquo; are not allowed after a number has been processed.</source>
          <target state="translated">「+」、「-」、一致しない「）」などの記号は、数値が処理された後は許可されません。</target>
        </trans-unit>
        <trans-unit id="c0970dca1dd4c1fa0ffdec75be5345150b8cc7a4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://arshaw.com/xdate/&quot;&gt;XDate javascript library&lt;/a&gt; by &lt;a href=&quot;https://github.com/arshaw&quot;&gt;Adam Shaw&lt;/a&gt; has been around since mid-2011 and is still under active development. It has fantastic documentation, a great API, formatting, tries to remain backwards-compatible and even supports localized strings.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/arshaw&quot;&gt;Adam Shawに&lt;/a&gt;よる&lt;a href=&quot;http://arshaw.com/xdate/&quot;&gt;XDate JavaScriptライブラリは&lt;/a&gt; 、2011年半ばから存在し、現在も活発に開発が進んでいます。 素晴らしいドキュメント、優れたAPI、フォーマットがあり、下位互換性を維持しようとし、ローカライズされた文字列もサポートします。</target>
        </trans-unit>
        <trans-unit id="9a31a1d75771606068b0e21585d78fa3a68201a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Date&lt;/code&gt; object reference I use most frequently is on the &lt;a href=&quot;http://www.w3schools.com/jsref/jsref_obj_date.asp&quot;&gt;w3schools.com website&lt;/a&gt; (but &lt;a href=&quot;https://www.google.com/search?q=javascript%20date%20object%20reference&quot;&gt;a quick Google search&lt;/a&gt; will reveal many more that may better meet your needs).</source>
          <target state="translated">私が最も頻繁に使用する &lt;code&gt;Date&lt;/code&gt; オブジェクト参照は、 &lt;a href=&quot;http://www.w3schools.com/jsref/jsref_obj_date.asp&quot;&gt;w3schools.comのWebサイトにあります&lt;/a&gt; （しかし&lt;a href=&quot;https://www.google.com/search?q=javascript%20date%20object%20reference&quot;&gt;、Googleをすばやく検索&lt;/a&gt;すると、ニーズに合う可能性のある多くの項目が明らかになります）。</target>
        </trans-unit>
        <trans-unit id="c313a2f758973e99a7ac1efe394d3aa15368d95c" translate="yes" xml:space="preserve">
          <source>The Long Answer</source>
          <target state="translated">ロングアンサー</target>
        </trans-unit>
        <trans-unit id="74eb4fbb4455194adbd83215435ba76c2ca91924" translate="yes" xml:space="preserve">
          <source>The Microsoft Developer Network additionally mentions an additional standard for the Date object: ECMA-402, the ECMAScript Internationalization API Specification, which is complementary to the ECMAScript 5.1 standard (and future ones). That can be found here:</source>
          <target state="translated">Microsoft Developer Network では、Date オブジェクトの追加規格についても言及しています。ECMA-402、ECMAScript 国際化 API 仕様は、ECMAScript 5.1 標準(および将来の標準)を補完するものです。これは ECMAScript 5.1 標準(および将来の標準)を補完するものです。</target>
        </trans-unit>
        <trans-unit id="4d8764c6013c43b06ebc1ddd6b77dfb3eca5fddf" translate="yes" xml:space="preserve">
          <source>The Short Answer</source>
          <target state="translated">短い答え</target>
        </trans-unit>
        <trans-unit id="ff6913229ad05d770a476ed2ac4b8e61031fa129" translate="yes" xml:space="preserve">
          <source>The answer is &quot;nowhere&quot; since the date formatting is proprietary functionality. I don't think the toString functions are intended to conform to a specific format. e.g. in the ECMAScript 5.1 spec (&lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf&quot;&gt;http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf&lt;/a&gt;, 2/8/2013, page 173), the &lt;em&gt;toString&lt;/em&gt; function is documented as follows:</source>
          <target state="translated">日付のフォーマットは独自の機能であるため、答えは「どこにもない」です。 toString関数が特定のフォーマットに準拠することを意図しているとは思いません。 たとえばECMAScript 5.1仕様（ &lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf&quot;&gt;http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf、2/8/2013&lt;/a&gt; 、ページ173）では、 &lt;em&gt;toString&lt;/em&gt;関数は次のようにドキュメント化されています：</target>
        </trans-unit>
        <trans-unit id="83316fbc622f5c1d7fe0d9f842cc4f9dde008b02" translate="yes" xml:space="preserve">
          <source>The correct way to format a date to return &quot;2012-12-29&quot; is with the script from &lt;em&gt;&lt;a href=&quot;http://blog.stevenlevithan.com/archives/date-time-format&quot;&gt;JavaScript Date Format&lt;/a&gt;&lt;/em&gt;:</source>
          <target state="translated">&quot;2012-12-29&quot;を返すように日付をフォーマットする正しい方法は、 &lt;em&gt;&lt;a href=&quot;http://blog.stevenlevithan.com/archives/date-time-format&quot;&gt;JavaScript日付フォーマットの&lt;/a&gt;&lt;/em&gt;スクリプトを&lt;em&gt;使用すること&lt;/em&gt;です：</target>
        </trans-unit>
        <trans-unit id="58a5df2329d2012661d2a190ba533636ba8bfa70" translate="yes" xml:space="preserve">
          <source>The divide by 1000 of the javascript timestamp is because a javascript timestamp is in miliseconds but a PHP timestamp is in seconds.</source>
          <target state="translated">javascriptのタイムスタンプを1000で割るのは、javascriptのタイムスタンプはミリ秒単位ですが、PHPのタイムスタンプは秒単位だからです。</target>
        </trans-unit>
        <trans-unit id="208fb032494a5398f27cb359bed6be16e0680185" translate="yes" xml:space="preserve">
          <source>The function call we&amp;rsquo;re concerned with in this function is for DateParser::Parse(); ignore the logic surrounding those function calls, these are just checks to conform to the encoding type (ASCII and UC16). DateParser::Parse is defined here:</source>
          <target state="translated">この関数で関係する関数呼び出しは、DateParser :: Parse（）;に対するものです。 これらの関数呼び出しを取り巻くロジックは無視してください。これらは、エンコーディングタイプ（ASCIIおよびUC16）に準拠するためのチェックにすぎません。 DateParser :: Parseはここで定義されています。</target>
        </trans-unit>
        <trans-unit id="ff24516955ea914e95d2683b9fdde659134819ef" translate="yes" xml:space="preserve">
          <source>The functionality you cite is not standard Javascript, not likely to be portable across browsers and therefore not good practice.  The &lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-262.htm&quot;&gt;ECMAScript 3 spec&lt;/a&gt; leaves the parse and output formats function up to the Javascript implementation.  &lt;a href=&quot;http://www.ecma-international.org/publications/files/drafts/tc39-2009-025.pdf&quot;&gt;ECMAScript 5&lt;/a&gt; adds a subset of ISO8601 support.  I believe the toString() function you mention is an innovation in one browser (Mozilla?)</source>
          <target state="translated">引用する機能は標準のJavascriptではないため、ブラウザ間での移植性が低いため、適切な方法ではありません。 &lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-262.htm&quot;&gt;ECMAScript 3仕様で&lt;/a&gt;は、解析および出力フォーマット機能をJavascript実装に任せています。 &lt;a href=&quot;http://www.ecma-international.org/publications/files/drafts/tc39-2009-025.pdf&quot;&gt;ECMAScript 5&lt;/a&gt;は、ISO8601サポートのサブセットを追加します。 あなたが言及するtoString（）関数は1つのブラウザー（Mozilla？）</target>
        </trans-unit>
        <trans-unit id="fb5132a5f296f9e26eaafe57c951c9d7d57ac063" translate="yes" xml:space="preserve">
          <source>The latest code is available here: &lt;a href=&quot;https://github.com/thdoan/strftime&quot;&gt;https://github.com/thdoan/strftime&lt;/a&gt;</source>
          <target state="translated">最新のコードはこちらから入手できます： &lt;a href=&quot;https://github.com/thdoan/strftime&quot;&gt;https&lt;/a&gt; : //github.com/thdoan/strftime</target>
        </trans-unit>
        <trans-unit id="926c36400232ffe8358479fbc62d0ec264e1e3c7" translate="yes" xml:space="preserve">
          <source>The library &lt;a href=&quot;http://sugarjs.com/&quot;&gt;sugar.js&lt;/a&gt; has some great functionality for working with dates in JavaScript. And it is very well &lt;a href=&quot;http://sugarjs.com/dates&quot;&gt;documented&lt;/a&gt;.</source>
          <target state="translated">ライブラリ&lt;a href=&quot;http://sugarjs.com/&quot;&gt;sugar.jsに&lt;/a&gt;は、JavaScriptで日付を操作するための優れた機能がいくつかあります。 そして、それは非常によく&lt;a href=&quot;http://sugarjs.com/dates&quot;&gt;文書化されて&lt;/a&gt;います 。</target>
        </trans-unit>
        <trans-unit id="ce22ecbbee5303a0c5bb16b1eb00e066062f22ae" translate="yes" xml:space="preserve">
          <source>The most reliable way to format a date with the source format you're using, is to apply the following steps :</source>
          <target state="translated">使用しているソース形式で日付をフォーマットする最も確実な方法は、次の手順を適用することです。</target>
        </trans-unit>
        <trans-unit id="21fbd3fdb82c16c9be3dcb4d68a57b8cebd0c23a" translate="yes" xml:space="preserve">
          <source>There is no &amp;ldquo;universal&amp;rdquo; documentation that javascript caters to; every browser that has javascript is really an implementation. However, there is a standard that most modern browsers tend to follow, and that&amp;rsquo;s the EMCAScript standard; the ECMAScript standard strings would take, minimally, a modified implementation of the ISO 8601 definition.</source>
          <target state="translated">JavaScriptが対応する「ユニバーサル」ドキュメントはありません。 JavaScriptを備えたすべてのブラウザーは、実際の実装です。 ただし、最近のほとんどのブラウザーが従う傾向がある標準があり、それがEMCAScript標準です。 ECMAScript標準文字列は、ISO 8601定義の変更された実装を最低限必要とします。</target>
        </trans-unit>
        <trans-unit id="b65719efe6459ff12eb557c8094dcc84f302078f" translate="yes" xml:space="preserve">
          <source>This calls %DateParseString, which is actually a run-time function reference for a C++ function. It refers to the following code:</source>
          <target state="translated">これは、実際には C++関数の実行時関数参照である %DateParseString を呼び出します。以下のコードを参照しています。</target>
        </trans-unit>
        <trans-unit id="3f8ae4a76e37e1e76d35b274e44fd80da79587f6" translate="yes" xml:space="preserve">
          <source>This code does NOT work:</source>
          <target state="translated">このコードは動作しません。</target>
        </trans-unit>
        <trans-unit id="15b9c3a43393ea4622514204e0c4f0eeefff406c" translate="yes" xml:space="preserve">
          <source>This is for converting a string to a date. If we look at the opposite side, that is, converting a date object to a string, until now I was under the impression that JavaScript doesn't have a built-in API to format a date object into a string.</source>
          <target state="translated">これは文字列を日付に変換するためのものです。反対側、つまり日付オブジェクトを文字列に変換する側に目を向けると、今まではJavaScriptには日付オブジェクトを文字列に整形するAPIが組み込まれていないという印象でしたが、今回は日付オブジェクトを文字列に変換するためのAPIが組み込まれています。</target>
        </trans-unit>
        <trans-unit id="665ccf906c485674418efbf561bb0fad18bcbd73" translate="yes" xml:space="preserve">
          <source>This is the function that actually defines what formats it accepts. Essentially, it checks for the EMCAScript 5.0 ISO 8601 standard and if it is not standards compliant, then it will attempt to build the date based on legacy formats. A few key points based on the comments:</source>
          <target state="translated">これは実際に受け入れるフォーマットを定義する関数です。基本的には、EMCAScript 5.0 ISO 8601規格をチェックし、規格に準拠していない場合は、レガシーフォーマットに基づいて日付を構築しようとします。コメントに基づいていくつかの重要なポイントを紹介します。</target>
        </trans-unit>
        <trans-unit id="deabbc82fac39505ed6ac9afea320e8a4ad748ed" translate="yes" xml:space="preserve">
          <source>To answer the question, or typically even look for the answer to this question, you need to know that javascript is not a novel language; it&amp;rsquo;s actually an implementation of ECMAScript, and follows the ECMAScript standards (but note, javascript also actually pre-dated those standards; EMCAScript standards are built off the early implementation of LiveScript/JavaScript). The current ECMAScript standard is 5.1 (2011); at the time that the question was originally asked (June &amp;rsquo;09), the standard was 3 (4 was abandoned), but 5 was released shortly after the post at the end of 2009. This should outline one problem; what standard a javascript implementation may follow, may not reflect what is actually in place, because a) it&amp;rsquo;s an implementation of a given standard, b) not all implementations of a standard are puritan, and c) functionality is not released in synchronization with a new standard as d) an implementation is a constant work in progress</source>
          <target state="translated">質問に答えたり、通常はこの質問への答えを探したりするには、JavaScriptが新しい言語ではないことを知っている必要があります。 これは実際にはECMAScriptの実装であり、ECMAScript標準に従います（ただし、JavaScriptは実際にはこれらの標準よりも古いものです。EMCAScript標準は、LiveScript / JavaScriptの初期の実装に基づいて構築されています）。 現在のECMAScript標準は5.1（2011）です。 質問が最初に行われたとき（2009年6月）、標準は3（4は放棄されました）でしたが、2009年末の投稿の直後に5がリリースされました。これは1つの問題の概要です。 JavaScriptの実装が従う可能性のある標準、実際に何が配置されているかを反映していない可能性があります。これは、a）特定の標準の実装であるため、b）標準のすべての実装が純粋なわけではないため、c）機能がd）としての新しい標準実装は常に進行中の作業です</target>
        </trans-unit>
        <trans-unit id="4d7a93787240652e3ef3807b81a2ffaf3238ccbc" translate="yes" xml:space="preserve">
          <source>Today, I played with the &lt;code&gt;toString()&lt;/code&gt; method on the date object and surprisingly it serves the purpose of formatting date to strings.</source>
          <target state="translated">今日、日付オブジェクトで &lt;code&gt;toString()&lt;/code&gt; メソッドを試してみましたが、驚くべきことに、日付を文字列にフォーマットする目的に役立ちます。</target>
        </trans-unit>
        <trans-unit id="9cca2a06072ed86b3ef4044c08648c90cb64abda" translate="yes" xml:space="preserve">
          <source>Unsigned numbers followed by &amp;ldquo;.&amp;rdquo; are interpreted as a &amp;ldquo;time component&amp;rdquo;, and must be followed by milliseconds.</source>
          <target state="translated">符号なしの数字の後に「。」 「時間コンポーネント」と解釈され、その後にミリ秒が続く必要があります。</target>
        </trans-unit>
        <trans-unit id="90bb8d3361b9be7ae20fc165a26d87b0981cc9b3" translate="yes" xml:space="preserve">
          <source>Unsigned numbers followed by &amp;ldquo;:&amp;rdquo; are interpreted as a &amp;ldquo;time component&amp;rdquo;.</source>
          <target state="translated">「：」が後に続く符号なしの数値は、「時間コンポーネント」として解釈されます。</target>
        </trans-unit>
        <trans-unit id="6607c7302bc8217c3b42cb642de1fd4147489ff5" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;.getDate()&lt;/code&gt;, &lt;code&gt;.getMonth()&lt;/code&gt; and &lt;code&gt;.getFullYear()&lt;/code&gt; to get respectively the day, month and year</source>
          <target state="translated">&lt;code&gt;.getDate()&lt;/code&gt; 、.getMonth()、.getFullYear()を使用して、それぞれ日、月、年を取得します</target>
        </trans-unit>
        <trans-unit id="c29fa67948f9ddc5a07ce5664647a414272a0185" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;new Date()&lt;/code&gt; to create a &lt;code&gt;Date&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;new Date()&lt;/code&gt; を使用して &lt;code&gt;Date&lt;/code&gt; オブジェクトを作成する</target>
        </trans-unit>
        <trans-unit id="a2adc5b2cc4cb736c2deebb465f776af14085c11" translate="yes" xml:space="preserve">
          <source>Using a library that uses the same format strings as something I already know is easier for me, and the manual containing all of the format string possibilities for the date function is of course online at php.net</source>
          <target state="translated">すでに知っているものと同じフォーマット文字列を使用するライブラリを使用する方が私にとっては簡単ですし、date関数のフォーマット文字列の可能性をすべて含んだマニュアルはもちろんオンラインのphp.netにあります。</target>
        </trans-unit>
        <trans-unit id="e7e6bcb81a5b22becadef925db0d07360474064f" translate="yes" xml:space="preserve">
          <source>When a single argument is passed to new Date(), it casts this function prototype:</source>
          <target state="translated">new Date()に1つの引数が渡されると、この関数のプロトタイプをキャストします。</target>
        </trans-unit>
        <trans-unit id="114a642f495b826aea7acbe33edb7cc2dbe8b1d5" translate="yes" xml:space="preserve">
          <source>When declaring the hour and minute, you can use either &amp;ldquo;hh:mm&amp;rdquo; or &amp;ldquo;hhmm&amp;rdquo;.</source>
          <target state="translated">時間と分を宣言する場合、「hh：mm」または「hhmm」のいずれかを使用できます。</target>
        </trans-unit>
        <trans-unit id="aca9dbbb303c77c0807a01bd36cfa2c2d2e3bd75" translate="yes" xml:space="preserve">
          <source>When two or more arguments are passed to new Date(), it casts this function prototype:</source>
          <target state="translated">2つ以上の引数がnew Date()に渡されると、この関数のプロトタイプをキャストします。</target>
        </trans-unit>
        <trans-unit id="22e96b4636d40dc7f5e0cabec086fa1703c0cf1d" translate="yes" xml:space="preserve">
          <source>Where can I find documentation on formatting a date in JavaScript</source>
          <target state="translated">JavaScript での日付の書式設定に関するドキュメントはどこにありますか?</target>
        </trans-unit>
        <trans-unit id="579d59444a2404e66748881c19a9d372f4ecfc33" translate="yes" xml:space="preserve">
          <source>Where is the documentation which lists the format specifiers supported by the &lt;code&gt;Date()&lt;/code&gt; object?</source>
          <target state="translated">&lt;code&gt;Date()&lt;/code&gt; オブジェクトでサポートされているフォーマット指定子をリストしたドキュメントはどこにありますか？</target>
        </trans-unit>
        <trans-unit id="4db2ac4b37938d9c0ad295c19c67c827344d41d3" translate="yes" xml:space="preserve">
          <source>Where is the documentation which lists the format specifiers supported by the Date() object?</source>
          <target state="translated">Date()オブジェクトがサポートする書式指定子の一覧はどこにありますか?</target>
        </trans-unit>
        <trans-unit id="cb82d60c39346039f6cb4bfadc10677edda44f48" translate="yes" xml:space="preserve">
          <source>Words before the first number that are unknown to the parser are ignored.</source>
          <target state="translated">パーサが不明な最初の数字の前の単語は無視されます。</target>
        </trans-unit>
        <trans-unit id="8a68842cfe408a71879376c0a3a9390db314dd5d" translate="yes" xml:space="preserve">
          <source>Words that indicate a time zone are interpreted as a time zone.</source>
          <target state="translated">時間帯を示す言葉は、時間帯と解釈します。</target>
        </trans-unit>
        <trans-unit id="547dd53a0f9d977db148a27feb921a694997de56" translate="yes" xml:space="preserve">
          <source>You can also use the built-in &lt;code&gt;.toLocaleDateString&lt;/code&gt; method to do the formatting for you. You just need pass along the proper locale and options to match the right format, which unfortunately is only supported by modern browsers &lt;strong&gt;(*)&lt;/strong&gt; :</source>
          <target state="translated">組み込みの &lt;code&gt;.toLocaleDateString&lt;/code&gt; メソッドを使用してフォーマットを行うこともできます。 適切なロケールとオプションを渡して、正しい形式に一致させる必要があります。残念ながら、これは最新のブラウザーでのみサポートされています&lt;strong&gt;（*）&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="1edfc250c68ac34350b49739add4361fe59c9d57" translate="yes" xml:space="preserve">
          <source>You can define minutes and hours together in either of the two formats: &amp;ldquo;hh:mm&amp;rdquo; or &amp;ldquo;hhmm&amp;rdquo;.</source>
          <target state="translated">「hh：mm」または「hhmm」の2つの形式のいずれかで分と時間を一緒に定義できます。</target>
        </trans-unit>
        <trans-unit id="df104a6b1e018c302f37170ba0592e5f729d2f0d" translate="yes" xml:space="preserve">
          <source>You can just expand the &lt;code&gt;Date&lt;/code&gt; Object with a new &lt;code&gt;format&lt;/code&gt; method as noted by &lt;a href=&quot;http://huahun.iteye.com/blog/197367&quot;&gt;meizz&lt;/a&gt;, below is the code given by the author.  And
here is a &lt;a href=&quot;http://jsfiddle.net/gongzhitaao/G5kEQ/1/&quot;&gt;jsfiddle&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Date&lt;/code&gt; オブジェクトは、 &lt;a href=&quot;http://huahun.iteye.com/blog/197367&quot;&gt;meizz&lt;/a&gt;で述べられているように、新しい &lt;code&gt;format&lt;/code&gt; メソッドで拡張することができます。以下は、作成者が指定したコードです。 そして、これが&lt;a href=&quot;http://jsfiddle.net/gongzhitaao/G5kEQ/1/&quot;&gt;jsfiddle&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="f0ae8828fb30e6e7019eefb01ea7d8d7ac98d13d" translate="yes" xml:space="preserve">
          <source>You can use d1.getTime() instead of valueOf() if you want, they do the same thing.</source>
          <target state="translated">必要であれば、valueOf()の代わりに d1.getTime()を使用しても同じことができます。</target>
        </trans-unit>
        <trans-unit id="ff13e1c8fd8336958ef291a9514961baa58f134b" translate="yes" xml:space="preserve">
          <source>You may find useful this modification of date object, which is smaller than any library and is easily extendable to support different formats:</source>
          <target state="translated">どのライブラリよりも小さく、異なるフォーマットをサポートするために簡単に拡張可能である日付オブジェクトのこの変更が有用であることを見つけるかもしれません。</target>
        </trans-unit>
        <trans-unit id="ca63f7a5bd9921e1329c4339c34719e751faf668" translate="yes" xml:space="preserve">
          <source>You simply include the date.js file in your HTML using your preferred method then call it like this:</source>
          <target state="translated">date.jsファイルをお好みの方法でHTMLにインクルードし、以下のように呼び出します。</target>
        </trans-unit>
        <trans-unit id="5e9b496a0935b15e72709835275b0a4dd4c2a1c6" translate="yes" xml:space="preserve">
          <source>etc...</source>
          <target state="translated">etc...</target>
        </trans-unit>
        <trans-unit id="7d88322d3416a52a199b5e9071e67685eaa08ec2" translate="yes" xml:space="preserve">
          <source>refer below link for more details
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&lt;/a&gt;</source>
          <target state="translated">詳細については、以下のリンクを参照して&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&quot;&gt;くださいhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4e44c86a4dc7a8a41f3d48c50474209e8485023b" translate="yes" xml:space="preserve">
          <source>use this functions</source>
          <target state="translated">この関数を使う</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
