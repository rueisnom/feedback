<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/1056728">
    <body>
      <group id="1056728">
        <trans-unit id="8ebe5c00c9152c2a29452c0429ebce7224a6a0fa" translate="yes" xml:space="preserve">
          <source>&quot;The contents of the String are implementation-dependent&quot;</source>
          <target state="translated">&quot;字符串的内容取决于执行情况&quot;</target>
        </trans-unit>
        <trans-unit id="58d3fd1405412176e917bcb2f9418f496041f179" translate="yes" xml:space="preserve">
          <source>(See also &lt;a href=&quot;https://jsfiddle.net/az0ab0Lm/1/&quot;&gt;&lt;strong&gt;this Fiddle&lt;/strong&gt;&lt;/a&gt;).</source>
          <target state="translated">（另请参阅&lt;a href=&quot;https://jsfiddle.net/az0ab0Lm/1/&quot;&gt;&lt;strong&gt;此小提琴&lt;/strong&gt;&lt;/a&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ac98b31ad2f5eb41b7075765db2403e374944e82" translate="yes" xml:space="preserve">
          <source>(See also &lt;a href=&quot;https://jsfiddle.net/az0ab0Lm/2/&quot;&gt;&lt;strong&gt;this Fiddle&lt;/strong&gt;&lt;/a&gt;).</source>
          <target state="translated">（另请参阅&lt;a href=&quot;https://jsfiddle.net/az0ab0Lm/2/&quot;&gt;&lt;strong&gt;此小提琴&lt;/strong&gt;&lt;/a&gt; ）。</target>
        </trans-unit>
        <trans-unit id="394f25fa51d18c1ef08249a77940691c429c71f9" translate="yes" xml:space="preserve">
          <source>09 August 2013</source>
          <target state="translated">2013年8月9日</target>
        </trans-unit>
        <trans-unit id="a08b9de555d871c1fbf1d22c6f872de2c90d486c" translate="yes" xml:space="preserve">
          <source>2013 9 Aug</source>
          <target state="translated">2013年8月9日</target>
        </trans-unit>
        <trans-unit id="e1808e038d73a2e67b2c73caad1366ea6792c7b4" translate="yes" xml:space="preserve">
          <source>2013 Aug 09</source>
          <target state="translated">2013年8月9日</target>
        </trans-unit>
        <trans-unit id="9f9d758f0400cb85f5531b7ed462464405c2feb1" translate="yes" xml:space="preserve">
          <source>2013 August 09</source>
          <target state="translated">2013年8月09日</target>
        </trans-unit>
        <trans-unit id="86984c19e3d33e2abd749dd3be71d242a57aaaa1" translate="yes" xml:space="preserve">
          <source>2013/Aug/09</source>
          <target state="translated">2013/Aug/09</target>
        </trans-unit>
        <trans-unit id="4911b625eb5e48c162c0244fd0170d28558f5170" translate="yes" xml:space="preserve">
          <source>2013/Aug/9</source>
          <target state="translated">2013/Aug/9</target>
        </trans-unit>
        <trans-unit id="8370ff8837ccd8498c3b5c7e99863985e62e0191" translate="yes" xml:space="preserve">
          <source>2013/August/09</source>
          <target state="translated">2013/August/09</target>
        </trans-unit>
        <trans-unit id="f0520d97800f21976c30eed254fb557da8ed11aa" translate="yes" xml:space="preserve">
          <source>2013/August/9</source>
          <target state="translated">2013/August/9</target>
        </trans-unit>
        <trans-unit id="ccb8622f1509ced8bcfd055c92497186bd209379" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.javascriptsource.com/repository/javascripts/2009/03/880961/JS_Simple_Date_Format.zip&quot;&gt;JsSimpleDateFormat&lt;/a&gt; is a library that can format the date object and parse the formatted string back to Date object. It uses the Java format (SimpleDateFormat class). The name of months and days can be localized.</source>
          <target state="translated">&lt;a href=&quot;http://www.javascriptsource.com/repository/javascripts/2009/03/880961/JS_Simple_Date_Format.zip&quot;&gt;JsSimpleDateFormat&lt;/a&gt;是一个库，可以格式化日期对象并将已格式化的字符串解析回Date对象。 它使用Java格式（SimpleDateFormat类）。 月份和日期的名称可以本地化。</target>
        </trans-unit>
        <trans-unit id="69c1646795cc29f6118a2086f12bb8d3f9dc29a2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(*) lightweight meaning 9.3KB minified + gzipped in the smallest possible setup (feb 2014)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（*）轻巧，意味着在最小的设置中缩小了9.3KB并压缩了文件（2014年2月）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="43aa3117c1a2cc592f1cf2d1a383b7fe843ba4ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;(*)&lt;/strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString&quot;&gt;&lt;strong&gt;According to the MDN&lt;/strong&gt;&lt;/a&gt;, &quot;Modern browsers&quot; means Chrome 24+, Firefox 29+, IE11, Edge12+, Opera 15+ &amp;amp; Safari &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/56490/what-does-nightly-builds-mean&quot;&gt;&lt;strong&gt;nightly build&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;（*）&lt;/strong&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString&quot;&gt;&lt;strong&gt;根据MDN的说法&lt;/strong&gt;&lt;/a&gt; ，&amp;ldquo;现代浏览器&amp;rdquo;是指Chrome 24 +，Firefox 29 +，IE11，Edge12 +，Opera 15+和Safari &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/56490/what-does-nightly-builds-mean&quot;&gt;&lt;strong&gt;每晚构建的版本&lt;/strong&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="abbfb636aafdc4e967f6266a371cccd6e4c348a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;http://momentjs.com&quot;&gt;Moment.js&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;http://momentjs.com&quot;&gt;Moment.js&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="56bdf945673a85a98139128a373da6cbd2c4e554" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Any combination of [Full Year], [Month Name] and [Date Number] separated by spaces&lt;/strong&gt; - Month name can be in either short or long format, and date number can be with or without a leading zero.</source>
          <target state="translated">&lt;strong&gt;[全年]，[月份名称]和[日期编号]的任意组合，以空格分隔&lt;/strong&gt; -月份名称可以采用短格式或长格式，日期编号可以带有或不带有前导零。</target>
        </trans-unit>
        <trans-unit id="19acc1433de180fc96c6335d7425c88ea1387ff9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;CODE&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;CODE&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c1211658cdfed6d835b9c05999e42df3a7d43cf1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT&lt;/strong&gt;: Tyler Forsythe points out, that datejs is outdated. I use it in my current project and hadn't any trouble with it, however you should be aware of this and consider alternatives.</source>
          <target state="translated">&lt;strong&gt;编辑&lt;/strong&gt; ：泰勒&amp;middot;福赛斯指出，datejs已过时。 我在当前项目中使用了它，但没有任何问题，但是您应该意识到这一点并考虑替代方法。</target>
        </trans-unit>
        <trans-unit id="9184099b9d5087267394bbc23a30d1c5015b359d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Editor's note:&lt;/strong&gt; The following approach is the asker's attempt that worked on a particular browser but does &lt;em&gt;not&lt;/em&gt; work in general; &lt;strong&gt;see the answers on this page&lt;/strong&gt; to see some actual solutions.</source>
          <target state="translated">&lt;strong&gt;编者注：&lt;/strong&gt;以下方法是询问者的尝试，该尝试在特定的浏览器上有效，但通常不起作用。 &lt;strong&gt;请参阅本页上的答案&lt;/strong&gt;以查看一些实际解决方案。</target>
        </trans-unit>
        <trans-unit id="f35097e2b1b38de5ec88177ea2b0967e5b0e99a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;NOTE:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="762b0b987efcf101541560526e8d90e402907514" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;References&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;References&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aa09b1a3058d56edd04f134fd7c48d7c250cde5f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Resources&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Resources&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1cb021c737f247e65e724f7eb367810088853454" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sample usage:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;用法示例：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d8d97e3f2670d27077e8554771499c964d22ac6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;USE&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;USE&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cb036d47b4951903b72f01d8ef22e8a73e6f8858" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using month names:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;使用月份名称：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1e87bd8086b97bf28f63ffc82c1ce23a55a2e6de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[Full Year]-[Month Number]-[Date Number]&lt;/strong&gt; - Month and Date Number must include leading zeros (this is the format that the &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.1/en/datetime.html&quot;&gt;MySQL Date type&lt;/a&gt; uses)</source>
          <target state="translated">&lt;strong&gt;[全年]-[月号]-[日期号]&lt;/strong&gt; -月和日期号必须包含前导零（这是&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.1/en/datetime.html&quot;&gt;MySQL日期类型&lt;/a&gt;使用的格式）</target>
        </trans-unit>
        <trans-unit id="f8c65f77ac21681d72033298bc24d458cb9c2f37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[Full Year]/[Month]/[Date number]&lt;/strong&gt; - Month can be either the number with or without a leading zero or the month name in short or long format, and date number can be with or without a leading zero.</source>
          <target state="translated">&lt;strong&gt;[Full Year] / [Month] / [Date number]&lt;/strong&gt; -月可以是带或不带前导零的数字，也可以是短或长格式的月名称，日期可以带或不带前导零。</target>
        </trans-unit>
        <trans-unit id="6503e0b877945cc606ecb61795423f721a3b085b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[Month]/[Full Year]/[Date Number]&lt;/strong&gt; - Month can be either the number with or without a leading zero or the month name in short or long format, and date number can be with or without a leading zero.</source>
          <target state="translated">&lt;strong&gt;[Month] / [Full Year] / [Date Number]&lt;/strong&gt; -月可以是带或不带前导零的数字，也可以是短或长格式的月名称，日期可以带或不带前导零。</target>
        </trans-unit>
        <trans-unit id="cf114a4079c245b58c7eb276a64c660d62431b03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toDateString&lt;/strong&gt;: Implementation dependent, show only the date.</source>
          <target state="translated">&lt;strong&gt;toDateString&lt;/strong&gt; ：与实现有关，仅显示日期。</target>
        </trans-unit>
        <trans-unit id="d449150196f8a97c5dac501ab0afe7927c86bc84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toISOString&lt;/strong&gt;: Show ISO 8601 date and time.</source>
          <target state="translated">&lt;strong&gt;toISOString&lt;/strong&gt; ：显示ISO 8601日期和时间。</target>
        </trans-unit>
        <trans-unit id="b87d940c1a7d4428305f8d57f4f8bbfb41f83210" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toJSON&lt;/strong&gt;: Stringifier for JSON.</source>
          <target state="translated">&lt;strong&gt;toJSON&lt;/strong&gt; ：JSON的字符串化器。</target>
        </trans-unit>
        <trans-unit id="d62776092ec81e94bb95c1a60a1bbba485a1a55a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toLocaleDateString&lt;/strong&gt;: Implementation dependent, a date in locale format.</source>
          <target state="translated">&lt;strong&gt;toLocaleDateString&lt;/strong&gt; ：与实现有关，以区域设置格式显示日期。</target>
        </trans-unit>
        <trans-unit id="15af5141cf91c453da4dadd2030192f75f52710e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toLocaleString&lt;/strong&gt;: Implementation dependent, a date&amp;amp;time in locale format.</source>
          <target state="translated">&lt;strong&gt;toLocaleString&lt;/strong&gt; ：与实现有关，日期和时间为区域设置格式。</target>
        </trans-unit>
        <trans-unit id="cc4bd4e71898a87ae28ace2a736a913a4237affe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toLocaleTimeString&lt;/strong&gt;: Implementation dependent, a time in locale format.</source>
          <target state="translated">&lt;strong&gt;toLocaleTimeString&lt;/strong&gt; ：与实现有关，以语言环境格式显示。</target>
        </trans-unit>
        <trans-unit id="88bd54e450e605aba3b2ad14b3cd0037df5ac04d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;toString&lt;/strong&gt;: Generic toString for Date.</source>
          <target state="translated">&lt;strong&gt;toString&lt;/strong&gt; ：日期的通用toString。</target>
        </trans-unit>
        <trans-unit id="3a3fc6fb939e0085074cefc8e6d65d3381d91750" translate="yes" xml:space="preserve">
          <source>A few examples:</source>
          <target state="translated">举几个例子:</target>
        </trans-unit>
        <trans-unit id="81283a532c4be641711c15d68082ba6a383e838e" translate="yes" xml:space="preserve">
          <source>A more advanced function could generate configurable output based on a format parameter. There are a couple of good examples in this same page.</source>
          <target state="translated">一个更高级的函数可以根据格式参数生成可配置的输出。在这个页面中,有几个很好的例子。</target>
        </trans-unit>
        <trans-unit id="3e48d3ff441b037822ac67e234117e44abc2fd9c" translate="yes" xml:space="preserve">
          <source>AFAIK, pure JavaScript doesn't support format specifiers &lt;strong&gt;the way you have indicated you'd like to use them&lt;/strong&gt;.  But it does support methods for formatting dates and/or times, such as &lt;code&gt;.toLocaleDateString()&lt;/code&gt;, &lt;code&gt;.toLocaleTimeString()&lt;/code&gt;, and &lt;code&gt;.toUTCString()&lt;/code&gt;.</source>
          <target state="translated">AFAIK，纯JavaScript不支持&lt;strong&gt;您&lt;/strong&gt;指定&lt;strong&gt;要使用的&lt;/strong&gt;格式说明符。 但是它确实支持格式化日期和/或时间的方法，例如 &lt;code&gt;.toLocaleDateString()&lt;/code&gt; &lt;code&gt;.toLocaleTimeString()&lt;/code&gt; 和 &lt;code&gt;.toUTCString()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="319b6bedfe935439fc96568d7d71290d45517b52" translate="yes" xml:space="preserve">
          <source>All browsers</source>
          <target state="translated">所有浏览器</target>
        </trans-unit>
        <trans-unit id="6b134d179c1e5ebb6ed2eb728129655503743071" translate="yes" xml:space="preserve">
          <source>All other numbers are interpreted as &amp;ldquo;date components&amp;rdquo;.</source>
          <target state="translated">所有其他数字均被解释为&amp;ldquo;日期成分&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="24191b53350478480af9945bba50a31b32c847a0" translate="yes" xml:space="preserve">
          <source>All words that start with the first three digits of a month are interpreted as the month.</source>
          <target state="translated">凡是以月的前三位数开头的字都解释为月。</target>
        </trans-unit>
        <trans-unit id="a835db62a4378918567ec54b8551ec58e9a13d4b" translate="yes" xml:space="preserve">
          <source>Also here I couldn't find any documentation on all the ways we can format the date object into a string.</source>
          <target state="translated">在这里我也找不到任何关于我们可以将日期对象格式化为字符串的所有方法的文档。</target>
        </trans-unit>
        <trans-unit id="d6c603d37d9fc02df74f9c7e73a29f2ed402f555" translate="yes" xml:space="preserve">
          <source>Also note that the &lt;strong&gt;Date Object Properties&lt;/strong&gt; section provides a link to &lt;a href=&quot;http://www.w3schools.com/jsref/jsref_prototype_date.asp&quot;&gt;&lt;code&gt;prototype&lt;/code&gt;&lt;/a&gt;, which illustrates some ways you can extend the Date object with custom methods.  There has been &lt;a href=&quot;http://perfectionkills.com/extending-built-in-native-objects-evil-or-not/&quot;&gt;some debate&lt;/a&gt; in the JavaScript community over the years about whether or not this is best practice, and I am not advocating for or against it, just pointing out its existence.</source>
          <target state="translated">还要注意，&amp;ldquo; &lt;strong&gt;日期对象属性&amp;rdquo;&lt;/strong&gt;部分提供了指向&lt;a href=&quot;http://www.w3schools.com/jsref/jsref_prototype_date.asp&quot;&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;/a&gt;的链接，该链接说明了使用自定义方法扩展Date对象的一些方法。 多年来，JavaScript社区一直在&lt;a href=&quot;http://perfectionkills.com/extending-built-in-native-objects-evil-or-not/&quot;&gt;争论&lt;/a&gt;这是否是最佳做法，我并不主张或反对它，只是指出它的存在。</target>
        </trans-unit>
        <trans-unit id="d2eb98bd0de830f5731a65b846e8e483046f2f58" translate="yes" xml:space="preserve">
          <source>Also valid in &quot;modern browsers&quot; (or in other words all browsers except IE9 and below)</source>
          <target state="translated">同样适用于 &quot;现代浏览器&quot;(或换句话说,除IE9及以下的所有浏览器外,其他浏览器都有效</target>
        </trans-unit>
        <trans-unit id="237bdf333911975e526f9262114e5dad917509d2" translate="yes" xml:space="preserve">
          <source>And we can further infer that dates are expected to be in a modified ISO 8601 Extended Format, as specified here:</source>
          <target state="translated">而且我们可以进一步推断,预计日期应采用修改后的ISO 8601扩展格式,在此说明。</target>
        </trans-unit>
        <trans-unit id="5d1af9943967d40553a9297a8b384a35122f8d34" translate="yes" xml:space="preserve">
          <source>Aug 9 2013</source>
          <target state="translated">2013年8月9日</target>
        </trans-unit>
        <trans-unit id="fd105e2bf900d5f1b4c39161809ab24b76edfd94" translate="yes" xml:space="preserve">
          <source>Aug/2013/09</source>
          <target state="translated">Aug/2013/09</target>
        </trans-unit>
        <trans-unit id="d510a20c1b95f9648c28ce9937e220b9b7243991" translate="yes" xml:space="preserve">
          <source>Aug/2013/9</source>
          <target state="translated">Aug/2013/9</target>
        </trans-unit>
        <trans-unit id="12372c7bb2acb7b6362bf3ffaa48f57cc35610af" translate="yes" xml:space="preserve">
          <source>August 2013 09</source>
          <target state="translated">2013年8月09日</target>
        </trans-unit>
        <trans-unit id="b623a37f638b2241cbb33bdc9588b286daecad49" translate="yes" xml:space="preserve">
          <source>August/2013/09</source>
          <target state="translated">August/2013/09</target>
        </trans-unit>
        <trans-unit id="adb64d3866f80cf9591aa1582c085f8a232265b3" translate="yes" xml:space="preserve">
          <source>August/2013/9</source>
          <target state="translated">August/2013/9</target>
        </trans-unit>
        <trans-unit id="461e78e221d0c01f168ee4d775ec261a544a1652" translate="yes" xml:space="preserve">
          <source>Basically, you have three methods and you have to combine the strings for yourself:</source>
          <target state="translated">基本上,你有三种方法,你要结合自己的串联起来。</target>
        </trans-unit>
        <trans-unit id="156939da701f32e70e53db07bd4d6fc51b4bc587" translate="yes" xml:space="preserve">
          <source>Both of those functions should look familiar, but this does not immediately answer your question and what quantifies as an acceptable &amp;ldquo;date format&amp;rdquo; requires further explanation. When you pass a string to new Date(), it will call the prototype (note that I'm using the word &lt;em&gt;prototype&lt;/em&gt; loosely; the versions may be individual functions, or it may be part of a conditional statement in a single function) for &lt;strong&gt;new Date(value)&lt;/strong&gt; with your string as the argument for the &amp;ldquo;value&amp;rdquo; parameter. This function will first check whether it is a number or a string. The documentation for this function can be found here:</source>
          <target state="translated">这两个函数应该看起来很熟悉，但这并不能立即回答您的问题，量化为可接受的&amp;ldquo;日期格式&amp;rdquo;的内容需要进一步说明。 当您将字符串传递给new Date（）时，它将调用原型（请注意，我宽松地使用了&lt;em&gt;原型&lt;/em&gt;一词；版本可能是单个函数，也可能是单个函数中条件语句的一部分）您的字符串作为&amp;ldquo; value&amp;rdquo;参数的参数的&lt;strong&gt;新Date（value）&lt;/strong&gt; 。 此函数将首先检查它是数字还是字符串。 可以在以下位置找到此功能的文档：</target>
        </trans-unit>
        <trans-unit id="df17feb52ee10a0b2b083f6cd0c801c1948f59bb" translate="yes" xml:space="preserve">
          <source>Custom formatting function:</source>
          <target state="translated">自定义格式化功能。</target>
        </trans-unit>
        <trans-unit id="215fe7d89c494c03c175f31265f32bb1c7ec5e2b" translate="yes" xml:space="preserve">
          <source>DP_DateExtensions Library</source>
          <target state="translated">DP_DateExtensions库</target>
        </trans-unit>
        <trans-unit id="9224d74f25db171b77441c2783969d67515b2aea" translate="yes" xml:space="preserve">
          <source>DateJS is certainly full-featured, but I'd recommend &lt;a href=&quot;http://blog.stevenlevithan.com/archives/date-time-format&quot;&gt;this MUCH simpler lib (JavaScript Date Format)&lt;/a&gt; which I prefer  simply because it's only 120 lines or so.</source>
          <target state="translated">DateJS当然功能齐全，但是我建议使用&lt;a href=&quot;http://blog.stevenlevithan.com/archives/date-time-format&quot;&gt;这种更简单的lib（JavaScript日期格式）&lt;/a&gt; ，我更喜欢它是因为它只有120行左右。</target>
        </trans-unit>
        <trans-unit id="afba89d9308eb3bee8421b4a271b91b7c7e36cae" translate="yes" xml:space="preserve">
          <source>Essentially, when dealing with javascript, you&amp;rsquo;re dealing with a derivative (javascript specific to the browser) of an implementation (javascript itself). Google&amp;rsquo;s V8, for example, implements ECMAScript 5.0, but Internet Explorer&amp;rsquo;s JScript doesn&amp;rsquo;t attempt to conform to any ECMAScript standard, yet Internet&amp;nbsp;Explorer&amp;nbsp;9 does conform to ECMAScript 5.0.</source>
          <target state="translated">本质上，在处理javascript时，您正在处理实现（JavaScript本身）的派生类（特定于浏览器的javascript）。 以Google的V8为例，它实现了ECMAScript 5.0，但是Internet Explorer的JScript并未尝试遵循任何ECMAScript标准，而Internet Explorer 9却遵循了ECMAScript 5.0。</target>
        </trans-unit>
        <trans-unit id="0483beb1135269908e7a45fb455b6f6963675242" translate="yes" xml:space="preserve">
          <source>Example :</source>
          <target state="translated">例子 :</target>
        </trans-unit>
        <trans-unit id="1fabb1683d22d0469c9e9cac437dfd3fa193ab75" translate="yes" xml:space="preserve">
          <source>Example code:</source>
          <target state="translated">示例代码。</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">用例:</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">扩展片段</target>
        </trans-unit>
        <trans-unit id="89ab4e92b02edbfc12ec7c3cbc134c5834677c24" translate="yes" xml:space="preserve">
          <source>For fixed formats, a simple function make the job. Following example generate the international format YYYY-MM-DD:</source>
          <target state="translated">对于固定格式,一个简单的函数就可以完成工作。下面的例子生成国际格式YYY-MM-DD。</target>
        </trans-unit>
        <trans-unit id="6b3c835fe3e86a3e2fa59918b389b2620cd398f0" translate="yes" xml:space="preserve">
          <source>Formatting and especially parsing dates in JavaScript can be a bit of a headache. Not all browsers handle dates in the same way. So while it's useful to know the base methods, its more practical to use a helper library.</source>
          <target state="translated">在JavaScript中格式化,尤其是解析日期的格式化,可能会让人有点头疼。不是所有的浏览器处理日期的方式都是一样的。因此,虽然知道基本的方法很有用,但使用辅助库更实用。</target>
        </trans-unit>
        <trans-unit id="5e20b191436ba78d6a13b6ff78b42967d24bb3c6" translate="yes" xml:space="preserve">
          <source>Framework free, limited but light</source>
          <target state="translated">无框架、有限但轻巧</target>
        </trans-unit>
        <trans-unit id="22cab2219190e6ad9eb54540338877c187dc078c" translate="yes" xml:space="preserve">
          <source>From this you can expect basic functionality, but what &amp;ldquo;ought&amp;rdquo; to be is not inherently what &amp;ldquo;is&amp;rdquo;. I&amp;rsquo;m going to go a little in depth with this procedurally though, as it appears only three people actually answered the question (Scott, goofballLogic, and peller namely) which, to me, suggests most people are unaware of what actually happens when you create a Date object.</source>
          <target state="translated">由此您可以期待基本功能，但是&amp;ldquo;应该&amp;rdquo;本质上不是&amp;ldquo;是&amp;rdquo;。 不过，我将在此过程中进行更深入的介绍，因为似乎只有三个人实际回答了这个问题（分别是Scott，goofballLogic和peller），对我来说，这表明大多数人都不知道当您遇到什么实际情况创建一个Date对象。</target>
        </trans-unit>
        <trans-unit id="797ded1cb074fdfadda99abfcd54257663d72435" translate="yes" xml:space="preserve">
          <source>From this, we can deduce that to get the string formatting allowed for new Date(value), we have to look at the method Date.parse(string). The documentation for this method can be found here:</source>
          <target state="translated">从这一点,我们可以推断出,要获得新的Date(value)允许的字符串格式化,我们必须查看Date.parse(string)方法。这个方法的文档可以在这里找到。</target>
        </trans-unit>
        <trans-unit id="c1ed5866b4b0020cb1fe4b7cf51bf48fa489826b" translate="yes" xml:space="preserve">
          <source>Functions such as the samples below could be used to accomplish formatting fairly easily.</source>
          <target state="translated">像下面这样的功能,可以用来相当容易地完成格式化。</target>
        </trans-unit>
        <trans-unit id="94b126616ecade2ae2606a5fd2ba3d2b7b6ff56f" translate="yes" xml:space="preserve">
          <source>Google&amp;rsquo;s V8, date.js, DateConstructor</source>
          <target state="translated">Google的V8，date.js，DateConstructor</target>
        </trans-unit>
        <trans-unit id="b22dc0cb06620e63bb33dd9f96d926eaf027c323" translate="yes" xml:space="preserve">
          <source>Google&amp;rsquo;s V8, date.js, DateParse</source>
          <target state="translated">Google的V8，date.js，DateParse</target>
        </trans-unit>
        <trans-unit id="15f24e286a9a678cb2ba3e5c226eae1005009b21" translate="yes" xml:space="preserve">
          <source>Google&amp;rsquo;s V8, runtime.cc, %DateParseString</source>
          <target state="translated">Google的V8，runtime.cc，％DateParseString</target>
        </trans-unit>
        <trans-unit id="b6133ba61c3e572cccbbdf2b89341728a1c0f187" translate="yes" xml:space="preserve">
          <source>Google's V8, dateparser-inl.h, DateParser::Parse</source>
          <target state="translated">Google的V8,dateparser-inl.h,DateParser:::Parse</target>
        </trans-unit>
        <trans-unit id="9a49d653b56cf99344b3fdd68c872aae5b737771" translate="yes" xml:space="preserve">
          <source>Have a look at &lt;a href=&quot;http://docs.jquery.com/UI/Datepicker/formatDate&quot;&gt;jQuery UI datepicker formatDate&lt;/a&gt;, the examples.</source>
          <target state="translated">看一下&lt;a href=&quot;http://docs.jquery.com/UI/Datepicker/formatDate&quot;&gt;jQuery UI datepicker formatDate&lt;/a&gt;的示例。</target>
        </trans-unit>
        <trans-unit id="b6417d0ed712ddb7d0b22551a01de7cc0ed38ec4" translate="yes" xml:space="preserve">
          <source>Having looked through several of the options provided in other answers, I decided to write my own limited but simple solution that others may also find useful.</source>
          <target state="translated">在查看了其他答案中提供的几个选项后,我决定写出自己的有限但简单的解决方案,别人可能也会觉得有用。</target>
        </trans-unit>
        <trans-unit id="c36ef013f2a88dc8907e59aa3361eb63f3bd8dd8" translate="yes" xml:space="preserve">
          <source>Here's a function I use a lot. The result is yyyy-mm-dd hh:mm:ss.nnn.</source>
          <target state="translated">这里有一个我经常使用的函数。结果是yyyyy-mm-dd hh:mm:ss.nnn。</target>
        </trans-unit>
        <trans-unit id="a460d0df0162832679dedc7cafe8979e7acac7fc" translate="yes" xml:space="preserve">
          <source>However, the datepicker only formats dates, and cannot format times.</source>
          <target state="translated">但是,数据采集器只能格式化日期,不能格式化时间。</target>
        </trans-unit>
        <trans-unit id="c9d7a7c12f2adc466e804e068645892b51e580b0" translate="yes" xml:space="preserve">
          <source>However, we can recognize from experience that javascript&amp;rsquo;s Date object accepts other formats (enforced by the existence of this question in the first place), and this is okay because ECMAScript allows for implementation specific formats. However, that still doesn&amp;rsquo;t answer the question of what documentation is available on the available formats, nor what formats are actually allowed. We&amp;rsquo;re going to look at Google&amp;rsquo;s javascript implementation, V8; please note I&amp;rsquo;m not suggesting this is the &amp;ldquo;best&amp;rdquo; javascript engine (how can one define &amp;ldquo;best&amp;rdquo; or even &amp;ldquo;good&amp;rdquo;) and one cannot assume that the formats allowed in V8 represent all formats available today, but I think it&amp;rsquo;s fair to assume they do follow modern expectations.</source>
          <target state="translated">但是，我们可以从经验中认识到javascript的Date对象接受其他格式（首先存在此问题，这是强制性的），这是可以的，因为ECMAScript允许实现特定的格式。 但是，这仍然无法回答以下问题：可用格式提供了哪些文档，实际上没有允许使用哪种格式。 我们将研究Google的javascript实现V8； 请注意，我并不是在暗示这是&amp;ldquo;最佳&amp;rdquo;的javascript引擎（如何定义&amp;ldquo;最佳&amp;rdquo;甚至是&amp;ldquo;良好&amp;rdquo;），并且不能假设V8允许的格式代表了当今所有可用的格式，但是我认为这很公平假设他们确实遵循现代期望。</target>
        </trans-unit>
        <trans-unit id="df17521fdb77be395fc191a49ea603cf9f753c47" translate="yes" xml:space="preserve">
          <source>I could not find documentation anywhere showing all the valid string formats while calling &lt;code&gt;new Date()&lt;/code&gt; function.</source>
          <target state="translated">在调用 &lt;code&gt;new Date()&lt;/code&gt; 函数时，找不到任何显示所有有效字符串格式的文档。</target>
        </trans-unit>
        <trans-unit id="c31759a3d8424f9ea9e6642c8f160fd4294ef2d9" translate="yes" xml:space="preserve">
          <source>I love &lt;em&gt;&lt;a href=&quot;https://www.webdevelopersnotes.com/10-ways-to-format-time-and-date-using-javascript&quot;&gt;10 ways to format time and date using JavaScript&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href=&quot;http://www.elated.com/articles/working-with-dates/&quot;&gt;Working with Dates&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">我喜欢&lt;em&gt;&lt;a href=&quot;https://www.webdevelopersnotes.com/10-ways-to-format-time-and-date-using-javascript&quot;&gt;使用JavaScript&lt;/a&gt;&lt;/em&gt;和&lt;em&gt;&lt;a href=&quot;http://www.elated.com/articles/working-with-dates/&quot;&gt;&amp;ldquo;使用日期&amp;rdquo;&lt;/a&gt;&lt;/em&gt; &lt;em&gt;格式化时间和日期的10种方法&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="ffaa4c3a0de427e532067ad206544c297c53abaf" translate="yes" xml:space="preserve">
          <source>I made this very simple formatter, it's cut/n/pastable (Updated with neater version):</source>
          <target state="translated">我做了这个非常简单的格式化器,它是可以切割的(更新后的版本更整洁)。</target>
        </trans-unit>
        <trans-unit id="6611357bea8f62dbbc5da8da06517924dcc25f51" translate="yes" xml:space="preserve">
          <source>I noticed that JavaScript's &lt;code&gt;new Date()&lt;/code&gt; function is very smart in accepting dates in several formats.</source>
          <target state="translated">我注意到JavaScript的 &lt;code&gt;new Date()&lt;/code&gt; 函数非常聪明，可以接受多种格式的日期。</target>
        </trans-unit>
        <trans-unit id="e2b072e3133413cb47898dc670481a1957ae2633" translate="yes" xml:space="preserve">
          <source>I stumbled across this today and was quite surprised that no one took the time to answer this simple question.  True, there are many libraries out there to help with date manipulation.  Some are better than others.  But that wasn't the question asked.</source>
          <target state="translated">我今天偶然发现了这个问题,很惊讶没有人花时间回答这个简单的问题。的确,有很多库可以帮助进行日期操作。有些是比其他的好。但这个问题不是问这个问题。</target>
        </trans-unit>
        <trans-unit id="f26176545d2d73fecac09ec100bebc27ffa99a69" translate="yes" xml:space="preserve">
          <source>I was unable to find any definitive documentation on valid date formats so I wrote my own test to see what is supported in various browsers.</source>
          <target state="translated">我无法找到任何关于有效日期格式的明确文档,所以我自己写了一个测试,看看各种浏览器都支持什么。</target>
        </trans-unit>
        <trans-unit id="ff2c642683d153adf11406f5bced4f1383f52db5" translate="yes" xml:space="preserve">
          <source>If to write a formatting function is too long, there are plenty of libraries around which does it. Some other answers already enumerate them. But increasing dependencies also has it counter-part.</source>
          <target state="translated">如果要写一个格式化函数太长,周围有很多库可以做到这一点。其他一些答案已经列举了。但增加依赖性也有它的反面。</target>
        </trans-unit>
        <trans-unit id="f961fbd962ecbfce00d3cd719d73fca366f1d8cf" translate="yes" xml:space="preserve">
          <source>If you are already using &lt;a href=&quot;http://en.wikipedia.org/wiki/JQuery_UI&quot;&gt;jQuery UI&lt;/a&gt; in your project, you can use the built-in datepicker method for formatting your date object:</source>
          <target state="translated">如果您已经在项目中使用&lt;a href=&quot;http://en.wikipedia.org/wiki/JQuery_UI&quot;&gt;jQuery UI&lt;/a&gt; ，则可以使用内置的datepicker方法来格式化日期对象：</target>
        </trans-unit>
        <trans-unit id="4c8f8108b5237dee81b175d9ed4d82650b5e56a6" translate="yes" xml:space="preserve">
          <source>If you don't need all the features that a library like &lt;a href=&quot;http://momentjs.com/&quot;&gt;Moment.js&lt;/a&gt; provides, then you can use my port of &lt;a href=&quot;http://man7.org/linux/man-pages/man3/strftime.3.html&quot;&gt;strftime&lt;/a&gt;. It's lightweight (1.35 KB vs. 57.9 KB minified compared to Moment.js 2.15.0) and provides most of the functionality of &lt;code&gt;strftime()&lt;/code&gt;.</source>
          <target state="translated">如果不需要&lt;a href=&quot;http://momentjs.com/&quot;&gt;Moment.js之&lt;/a&gt;类的库提供的所有功能，则可以使用我的&lt;a href=&quot;http://man7.org/linux/man-pages/man3/strftime.3.html&quot;&gt;strftime&lt;/a&gt;端口。 它是轻量级的（与Moment.js 2.15.0相比，最小化为1.35 KB与57.9 KB），并提供了 &lt;code&gt;strftime()&lt;/code&gt; 的大部分功能。</target>
        </trans-unit>
        <trans-unit id="22aff460a9167708273c07351e5616027269234b" translate="yes" xml:space="preserve">
          <source>If you want to show only time with &lt;strong&gt;two&lt;/strong&gt; digits, this may helps you:</source>
          <target state="translated">如果您只想显示两位数的时间，则可以帮助您：</target>
        </trans-unit>
        <trans-unit id="710aeb2a7dc5514d4f010c9ceeef5446ab41ad87" translate="yes" xml:space="preserve">
          <source>In addition to this, there is a second standard set forward by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Engineering_Task_Force&quot;&gt;IETF&lt;/a&gt; that browsers tend to follow as well, which is the definition for timestamps made in the RFC 2822. Actual documentation can be found in the references list at the bottom.</source>
          <target state="translated">除此之外， &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Engineering_Task_Force&quot;&gt;IETF还&lt;/a&gt;提出了浏览器倾向于遵循的第二个标准，这是RFC 2822中对时间戳的定义。实际的文档可以在底部的引用列表中找到。</target>
        </trans-unit>
        <trans-unit id="53f5d1f9ef5fa567eb91d6bcee19878cc9a173b9" translate="yes" xml:space="preserve">
          <source>In any case, this should aid in highlighting that there is no &quot;documentation&quot; that universally represents all implementations of javascript, but there is still enough documentation available to make reasonable sense of what strings are acceptable for a Date object. Quite the loaded question when you think about it, yes? :P</source>
          <target state="translated">不管怎么说,这应该有助于强调,没有任何 &quot;文档 &quot;可以普遍代表所有的javascript实现,但仍然有足够的文档可以让人们合理地理解Date对象可以接受哪些字符串。仔细想想,这问题还真是个问题,是吗?</target>
        </trans-unit>
        <trans-unit id="a8b51096d048c4e95d01b50fbf008933f958f287" translate="yes" xml:space="preserve">
          <source>Interestingly, when using month names I discovered that only the first 3 characters of the month name are ever used so all the of the following are perfectly valid:</source>
          <target state="translated">有趣的是,在使用月名的时候,我发现只有月名的前3个字是用过的,所以以下所有的月名都是完全有效的。</target>
        </trans-unit>
        <trans-unit id="17a5ba31c784e8cf40aae28024d8f4c4ada4f7e9" translate="yes" xml:space="preserve">
          <source>It is a (lightweight)* JavaScript date library for parsing, manipulating, and formatting dates.</source>
          <target state="translated">它是一个(轻量级)*的JavaScript日期库,用于解析,操作和格式化日期。</target>
        </trans-unit>
        <trans-unit id="f5d115279f70dbc882e63025cc30de4149b7c25b" translate="yes" xml:space="preserve">
          <source>It uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;Object.keys()&lt;/a&gt; which is undefined in older browsers so you may need implement polyfill from given link.</source>
          <target state="translated">它使用在旧版浏览器中未定义的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;Object.keys（）&lt;/a&gt; ，因此您可能需要从给定的链接实现polyfill。</target>
        </trans-unit>
        <trans-unit id="db8e74eb464018f7742f85205c4907c910613e62" translate="yes" xml:space="preserve">
          <source>Items that match multiple formats (e.g. 1970-01-01) are processed as a standard compliant EMCAScript 5.0 ISO 8601 string.</source>
          <target state="translated">匹配多种格式的项目(如1970-01-01-01)会作为符合标准的EMCAScript 5.0 ISO 8601字符串处理。</target>
        </trans-unit>
        <trans-unit id="35e8d3da12c5512106244c4805a83ed372be85c2" translate="yes" xml:space="preserve">
          <source>Just another option, which I wrote:</source>
          <target state="translated">只是另一个选项,这是我写的。</target>
        </trans-unit>
        <trans-unit id="61e0891acda5196c701c4069bfab5ec127258538" translate="yes" xml:space="preserve">
          <source>Just to continue gongzhitaao's solid answer - this handles AM/PM</source>
          <target state="translated">只是为了继续gongzhitaao的回答----这样处理AMPM的问题。</target>
        </trans-unit>
        <trans-unit id="6ead88c04f35aa5703ee4b194af590049b41f827" translate="yes" xml:space="preserve">
          <source>Link to changing the locale strings: &lt;a href=&quot;https://gist.github.com/1221376&quot;&gt;https://gist.github.com/1221376&lt;/a&gt;</source>
          <target state="translated">链接到更改区域设置字符串： &lt;a href=&quot;https://gist.github.com/1221376&quot;&gt;https&lt;/a&gt; : //gist.github.com/1221376</target>
        </trans-unit>
        <trans-unit id="d9aec26094de82b27ee47b6b58066eac935231a5" translate="yes" xml:space="preserve">
          <source>Looking at the DateConstructor function, we can deduce we need to find the DateParse function; however, note that &amp;ldquo;year&amp;rdquo; is not the actual year and is only a reference to the &amp;ldquo;year&amp;rdquo; parameter.</source>
          <target state="translated">查看DateConstructor函数，我们可以推断出需要找到DateParse函数。 但是，请注意，&amp;ldquo;年&amp;rdquo;不是实际的年，而只是对&amp;ldquo;年&amp;rdquo;参数的引用。</target>
        </trans-unit>
        <trans-unit id="645a33c68f34de07fcdb035049e28802d0c3928b" translate="yes" xml:space="preserve">
          <source>Make sure you checkout &lt;a href=&quot;http://www.datejs.com/&quot;&gt;Datejs&lt;/a&gt; when dealing with dates in JavaScript. It's quite impressive and well documented as you can see in case of the &lt;a href=&quot;http://code.google.com/p/datejs/wiki/APIDocumentation#toString&quot;&gt;toString function&lt;/a&gt;.</source>
          <target state="translated">确保在JavaScript中处理日期时签出&lt;a href=&quot;http://www.datejs.com/&quot;&gt;Datejs&lt;/a&gt; 。 在&lt;a href=&quot;http://code.google.com/p/datejs/wiki/APIDocumentation#toString&quot;&gt;toString函数的&lt;/a&gt;情况下，它令人印象深刻且有据可查。</target>
        </trans-unit>
        <trans-unit id="c08bf5434568b6d819143126966cb6c329517266" translate="yes" xml:space="preserve">
          <source>Modern browsers only</source>
          <target state="translated">仅适用于现代浏览器</target>
        </trans-unit>
        <trans-unit id="44ef0a0c5c2c4d04666563418da2fbc86eae2dea" translate="yes" xml:space="preserve">
          <source>My results concluded the following formats are valid in all browsers that I tested (examples use the date &quot;9th August 2013&quot;):</source>
          <target state="translated">我的测试结果认为,以下格式在我测试的所有浏览器中都是有效的(示例中使用了 &quot;2013年8月9日 &quot;的日期)。</target>
        </trans-unit>
        <trans-unit id="5984a869d38cc1793c9591d03820fabba3dcfd3d" translate="yes" xml:space="preserve">
          <source>No reason to consider it if you're already using a framework (they're all capable), but if you just need to quickly add date manipulation to a project give it a chance.</source>
          <target state="translated">如果你已经在使用一个框架,没有理由考虑它(它们都有能力),但如果你只是需要在项目中快速添加日期操作,给它一个机会。</target>
        </trans-unit>
        <trans-unit id="0a2ba271ef9c79b3df9517d20a87f07aa8719568" translate="yes" xml:space="preserve">
          <source>Not sure if it'll help, but I've found it useful in several projects - looks like it'll do what you need.</source>
          <target state="translated">不知道它是否会有帮助,但我发现它在几个项目中都很有用--看来它能满足你的需求。</target>
        </trans-unit>
        <trans-unit id="8bb7e2992a7f187e98c466141e8d68757fa57d45" translate="yes" xml:space="preserve">
          <source>Note: It is, however, usually not a good idea to extend the Javascript standard libraries (e.g. by adding this function to the prototype of Date).</source>
          <target state="translated">注意:但是,通常情况下,扩展Javascript标准库并不是一个好主意(例如,在Date的原型中加入这个函数)。</target>
        </trans-unit>
        <trans-unit id="f8e0bb8fd74a60e7662c2922a1ca8ec1a4e31fb0" translate="yes" xml:space="preserve">
          <source>Note: it is possible to generate custom output out of those formatting functions:</source>
          <target state="translated">注意:可以从这些格式化函数中生成自定义输出。</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="546ca3e57a581b385f3731a50d1011d161cf2cea" translate="yes" xml:space="preserve">
          <source>Parenthesized text are ignored.</source>
          <target state="translated">忽略括号化的文字。</target>
        </trans-unit>
        <trans-unit id="df9f379161c233d12b62504d684bf2a89535c58c" translate="yes" xml:space="preserve">
          <source>Paste the pieces together according to your target format</source>
          <target state="translated">按照你的目标格式粘贴在一起。</target>
        </trans-unit>
        <trans-unit id="495908be539a7c150597912922f8549215a765aa" translate="yes" xml:space="preserve">
          <source>Personally, because I use both PHP and jQuery/javascript in equal measures, I use the date function from php.js &lt;a href=&quot;http://phpjs.org/functions/date/&quot;&gt;http://phpjs.org/functions/date/&lt;/a&gt;</source>
          <target state="translated">就我个人而言，因为我以同等的方式使用PHP和jQuery / javascript，所以我使用php.js &lt;a href=&quot;http://phpjs.org/functions/date/&quot;&gt;http://phpjs.org/functions/date/中&lt;/a&gt;的date函数</target>
        </trans-unit>
        <trans-unit id="8992beb0ddb8597071fe787737b4a332cd5d7403" translate="yes" xml:space="preserve">
          <source>Several libraries provide routines to parameterize this, some with extensive localization support.  You can also check out the methods in &lt;a href=&quot;http://dojotoolkit.org/api/?qs=1.3/dojo.date.locale&quot;&gt;dojo.date.locale&lt;/a&gt;.</source>
          <target state="translated">一些库提供了用于对此参数化的例程，其中一些具有广泛的本地化支持。 您也可以在&lt;a href=&quot;http://dojotoolkit.org/api/?qs=1.3/dojo.date.locale&quot;&gt;dojo.date.locale中&lt;/a&gt;检出方法。</target>
        </trans-unit>
        <trans-unit id="632f9f269685ebdbf3950204c25d20e189268211" translate="yes" xml:space="preserve">
          <source>Signed numbers followed by the hour or hour minute (e.g. +5:15 or +0515) are interpreted as the timezone.</source>
          <target state="translated">有符号的数字后面是小时或小时分(如+5:15或+0515),解释为时区。</target>
        </trans-unit>
        <trans-unit id="e246126e46317b507ad8695fe2a3d9e7e77549d1" translate="yes" xml:space="preserve">
          <source>Since more recent versions of ECMAscript, the &lt;code&gt;Date&lt;/code&gt; class has some specific formatting functions:</source>
          <target state="translated">由于ECMAscript是最新版本，因此 &lt;code&gt;Date&lt;/code&gt; 类具有一些特定的格式设置功能：</target>
        </trans-unit>
        <trans-unit id="4f5e5390bb2f05f3426be2d9113575f9da131f3b" translate="yes" xml:space="preserve">
          <source>So this should be enough to give you a basic idea of what to expect when it comes to passing a string into a Date object. You can further expand upon this by looking at the following specification that Mozilla points to on the Mozilla Developer Network (compliant to the IETF RFC 2822 timestamps):</source>
          <target state="translated">因此,这应该足够让你对传递字符串到Date对象时的基本概念有了基本的了解。你可以通过查看Mozilla在Mozilla开发者网络上的以下规范来进一步扩展这一点 (符合IETF RFC 2822时间戳)。</target>
        </trans-unit>
        <trans-unit id="362ba4f79ecd3d6b8188ca1c6338d84d7d9d137f" translate="yes" xml:space="preserve">
          <source>Standard ECMAScript formatting functions:</source>
          <target state="translated">标准的ECMAScript格式化功能。</target>
        </trans-unit>
        <trans-unit id="fc260ca4fff84e241646a28bf161bd0d2a785031" translate="yes" xml:space="preserve">
          <source>Sugar gives the Date class much love starting with the Date.create
  method which can understand dates in just about any format in 15 major
  languages, including relative formats like &quot;1 hour ago&quot;. Dates can
  also be output in any format or language using an easy to understand
  syntax, with shortcuts to commonly used date formats. Complex date
  comparison is also possible with methods like is, which understand any
  format and apply built in precision.</source>
          <target state="translated">Sugar给了Date类很多爱,从Date.create方法开始,它可以理解15种主要语言中的任何格式的日期,包括像 &quot;1小时前 &quot;这样的相对格式。日期也可以使用简单易懂的语法以任何格式或语言输出,并提供了常用日期格式的快捷方式。复杂的日期比较也可以用像is这样的方法来进行,它可以理解任何格式并应用内置的精度。</target>
        </trans-unit>
        <trans-unit id="f29981eb711a34385f3a8c3369941b1acb944227" translate="yes" xml:space="preserve">
          <source>Supports date/time formatting, date math (add/subtract date parts), date compare, date parsing, etc. It's liberally open sourced.</source>
          <target state="translated">支持日期时间格式化、日期数学(加减法日期部分)、日期比较、日期解析等。它是自由开放源代码的。</target>
        </trans-unit>
        <trans-unit id="bde303b779bf944e66997dd5072e542fef0bc54a" translate="yes" xml:space="preserve">
          <source>Symbols like &amp;ldquo;+&amp;rdquo;, &amp;ldquo;-&amp;ldquo; and unmatched &amp;ldquo;)&amp;rdquo; are not allowed after a number has been processed.</source>
          <target state="translated">处理数字后，不允许使用诸如&amp;ldquo; +&amp;rdquo;，&amp;ldquo;-&amp;rdquo;和不匹配的&amp;ldquo;）&amp;rdquo;之类的符号。</target>
        </trans-unit>
        <trans-unit id="c0970dca1dd4c1fa0ffdec75be5345150b8cc7a4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://arshaw.com/xdate/&quot;&gt;XDate javascript library&lt;/a&gt; by &lt;a href=&quot;https://github.com/arshaw&quot;&gt;Adam Shaw&lt;/a&gt; has been around since mid-2011 and is still under active development. It has fantastic documentation, a great API, formatting, tries to remain backwards-compatible and even supports localized strings.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/arshaw&quot;&gt;Adam Shaw&lt;/a&gt;的&lt;a href=&quot;http://arshaw.com/xdate/&quot;&gt;XDate javascript库&lt;/a&gt;自2011年中期以来一直存在，并且仍在积极开发中。 它具有出色的文档，出色的API，格式，试图保持向后兼容，甚至支持本地化字符串。</target>
        </trans-unit>
        <trans-unit id="9a31a1d75771606068b0e21585d78fa3a68201a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Date&lt;/code&gt; object reference I use most frequently is on the &lt;a href=&quot;http://www.w3schools.com/jsref/jsref_obj_date.asp&quot;&gt;w3schools.com website&lt;/a&gt; (but &lt;a href=&quot;https://www.google.com/search?q=javascript%20date%20object%20reference&quot;&gt;a quick Google search&lt;/a&gt; will reveal many more that may better meet your needs).</source>
          <target state="translated">我最常使用的 &lt;code&gt;Date&lt;/code&gt; 对象引用位于&lt;a href=&quot;http://www.w3schools.com/jsref/jsref_obj_date.asp&quot;&gt;w3schools.com网站上&lt;/a&gt; （但是&lt;a href=&quot;https://www.google.com/search?q=javascript%20date%20object%20reference&quot;&gt;Google的快速搜索&lt;/a&gt;将显示更多可以更好地满足您的需求的对象）。</target>
        </trans-unit>
        <trans-unit id="c313a2f758973e99a7ac1efe394d3aa15368d95c" translate="yes" xml:space="preserve">
          <source>The Long Answer</source>
          <target state="translated">漫长的答案</target>
        </trans-unit>
        <trans-unit id="74eb4fbb4455194adbd83215435ba76c2ca91924" translate="yes" xml:space="preserve">
          <source>The Microsoft Developer Network additionally mentions an additional standard for the Date object: ECMA-402, the ECMAScript Internationalization API Specification, which is complementary to the ECMAScript 5.1 standard (and future ones). That can be found here:</source>
          <target state="translated">微软开发者网还提到了一个额外的Date对象标准。ECMA-402,ECMAScript国际化API规范,它是对ECMAScript 5.1标准(以及未来的标准)的补充。可以在这里找到。</target>
        </trans-unit>
        <trans-unit id="4d8764c6013c43b06ebc1ddd6b77dfb3eca5fddf" translate="yes" xml:space="preserve">
          <source>The Short Answer</source>
          <target state="translated">简答</target>
        </trans-unit>
        <trans-unit id="ff6913229ad05d770a476ed2ac4b8e61031fa129" translate="yes" xml:space="preserve">
          <source>The answer is &quot;nowhere&quot; since the date formatting is proprietary functionality. I don't think the toString functions are intended to conform to a specific format. e.g. in the ECMAScript 5.1 spec (&lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf&quot;&gt;http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf&lt;/a&gt;, 2/8/2013, page 173), the &lt;em&gt;toString&lt;/em&gt; function is documented as follows:</source>
          <target state="translated">答案是&amp;ldquo;无处&amp;rdquo;，因为日期格式是专有功能。 我不认为toString函数旨在符合特定格式。 例如，在ECMAScript 5.1规范（ &lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf&quot;&gt;http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf，2013年2月8&lt;/a&gt;日，第173页）中， &lt;em&gt;toString&lt;/em&gt;函数的说明如下： ：</target>
        </trans-unit>
        <trans-unit id="83316fbc622f5c1d7fe0d9f842cc4f9dde008b02" translate="yes" xml:space="preserve">
          <source>The correct way to format a date to return &quot;2012-12-29&quot; is with the script from &lt;em&gt;&lt;a href=&quot;http://blog.stevenlevithan.com/archives/date-time-format&quot;&gt;JavaScript Date Format&lt;/a&gt;&lt;/em&gt;:</source>
          <target state="translated">格式化日期以返回&amp;ldquo; 2012-12-29&amp;rdquo;的正确方法是使用&lt;em&gt;&lt;a href=&quot;http://blog.stevenlevithan.com/archives/date-time-format&quot;&gt;JavaScript Date Format中&lt;/a&gt;&lt;/em&gt;的脚本：</target>
        </trans-unit>
        <trans-unit id="58a5df2329d2012661d2a190ba533636ba8bfa70" translate="yes" xml:space="preserve">
          <source>The divide by 1000 of the javascript timestamp is because a javascript timestamp is in miliseconds but a PHP timestamp is in seconds.</source>
          <target state="translated">javascript的时间戳除以1000是因为javascript的时间戳是以miliseconds为单位,而PHP的时间戳是以秒为单位。</target>
        </trans-unit>
        <trans-unit id="208fb032494a5398f27cb359bed6be16e0680185" translate="yes" xml:space="preserve">
          <source>The function call we&amp;rsquo;re concerned with in this function is for DateParser::Parse(); ignore the logic surrounding those function calls, these are just checks to conform to the encoding type (ASCII and UC16). DateParser::Parse is defined here:</source>
          <target state="translated">我们在此函数中涉及的函数调用是针对DateParser :: Parse（）;的。 忽略围绕这些函数调用的逻辑，这些只是检查是否符合编码类型（ASCII和UC16）。 DateParser :: Parse在这里定义：</target>
        </trans-unit>
        <trans-unit id="ff24516955ea914e95d2683b9fdde659134819ef" translate="yes" xml:space="preserve">
          <source>The functionality you cite is not standard Javascript, not likely to be portable across browsers and therefore not good practice.  The &lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-262.htm&quot;&gt;ECMAScript 3 spec&lt;/a&gt; leaves the parse and output formats function up to the Javascript implementation.  &lt;a href=&quot;http://www.ecma-international.org/publications/files/drafts/tc39-2009-025.pdf&quot;&gt;ECMAScript 5&lt;/a&gt; adds a subset of ISO8601 support.  I believe the toString() function you mention is an innovation in one browser (Mozilla?)</source>
          <target state="translated">您引用的功能不是标准Javascript，不太可能跨浏览器移植，因此不是很好的做法。 &lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-262.htm&quot;&gt;ECMAScript 3规范&lt;/a&gt;将解析和输出格式功能保留给Javascript实现。 &lt;a href=&quot;http://www.ecma-international.org/publications/files/drafts/tc39-2009-025.pdf&quot;&gt;ECMAScript 5&lt;/a&gt;添加了一部分ISO8601支持。 我相信您提到的toString（）函数是一种浏览器（Mozilla？）的创新。</target>
        </trans-unit>
        <trans-unit id="fb5132a5f296f9e26eaafe57c951c9d7d57ac063" translate="yes" xml:space="preserve">
          <source>The latest code is available here: &lt;a href=&quot;https://github.com/thdoan/strftime&quot;&gt;https://github.com/thdoan/strftime&lt;/a&gt;</source>
          <target state="translated">最新的代码在这里可用： &lt;a href=&quot;https://github.com/thdoan/strftime&quot;&gt;https&lt;/a&gt; : //github.com/thdoan/strftime</target>
        </trans-unit>
        <trans-unit id="926c36400232ffe8358479fbc62d0ec264e1e3c7" translate="yes" xml:space="preserve">
          <source>The library &lt;a href=&quot;http://sugarjs.com/&quot;&gt;sugar.js&lt;/a&gt; has some great functionality for working with dates in JavaScript. And it is very well &lt;a href=&quot;http://sugarjs.com/dates&quot;&gt;documented&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://sugarjs.com/&quot;&gt;sugar.js&lt;/a&gt;库具有使用JavaScript处理日期的一些强大功能。 并且它有很好的&lt;a href=&quot;http://sugarjs.com/dates&quot;&gt;记录&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="ce22ecbbee5303a0c5bb16b1eb00e066062f22ae" translate="yes" xml:space="preserve">
          <source>The most reliable way to format a date with the source format you're using, is to apply the following steps :</source>
          <target state="translated">使用你所使用的源格式来格式化一个日期,最可靠的方法是应用以下步骤。</target>
        </trans-unit>
        <trans-unit id="21fbd3fdb82c16c9be3dcb4d68a57b8cebd0c23a" translate="yes" xml:space="preserve">
          <source>There is no &amp;ldquo;universal&amp;rdquo; documentation that javascript caters to; every browser that has javascript is really an implementation. However, there is a standard that most modern browsers tend to follow, and that&amp;rsquo;s the EMCAScript standard; the ECMAScript standard strings would take, minimally, a modified implementation of the ISO 8601 definition.</source>
          <target state="translated">没有javascript可以满足的&amp;ldquo;通用&amp;rdquo;文档。 每个具有javascript的浏览器实际上都是一种实现。 但是，大多数现代浏览器都倾向于遵循一个标准，那就是EMCAScript标准。 ECMAScript标准字符串将至少采用ISO 8601定义的修改实现。</target>
        </trans-unit>
        <trans-unit id="b65719efe6459ff12eb557c8094dcc84f302078f" translate="yes" xml:space="preserve">
          <source>This calls %DateParseString, which is actually a run-time function reference for a C++ function. It refers to the following code:</source>
          <target state="translated">这个调用%DateParseString,实际上是一个C++函数的运行时函数引用。它指的是下面的代码。</target>
        </trans-unit>
        <trans-unit id="3f8ae4a76e37e1e76d35b274e44fd80da79587f6" translate="yes" xml:space="preserve">
          <source>This code does NOT work:</source>
          <target state="translated">此代码无法工作。</target>
        </trans-unit>
        <trans-unit id="15b9c3a43393ea4622514204e0c4f0eeefff406c" translate="yes" xml:space="preserve">
          <source>This is for converting a string to a date. If we look at the opposite side, that is, converting a date object to a string, until now I was under the impression that JavaScript doesn't have a built-in API to format a date object into a string.</source>
          <target state="translated">这是用于将字符串转换为日期对象。如果我们反过来看,也就是把一个日期对象转换为字符串,直到现在我的印象中,JavaScript还没有一个内置的API来将日期对象格式化为字符串。</target>
        </trans-unit>
        <trans-unit id="665ccf906c485674418efbf561bb0fad18bcbd73" translate="yes" xml:space="preserve">
          <source>This is the function that actually defines what formats it accepts. Essentially, it checks for the EMCAScript 5.0 ISO 8601 standard and if it is not standards compliant, then it will attempt to build the date based on legacy formats. A few key points based on the comments:</source>
          <target state="translated">这个函数实际定义了它接受什么格式。本质上,它检查EMCAScript 5.0 ISO 8601标准,如果不符合标准,那么它将尝试基于传统格式建立日期。基于评论的几个关键点。</target>
        </trans-unit>
        <trans-unit id="deabbc82fac39505ed6ac9afea320e8a4ad748ed" translate="yes" xml:space="preserve">
          <source>To answer the question, or typically even look for the answer to this question, you need to know that javascript is not a novel language; it&amp;rsquo;s actually an implementation of ECMAScript, and follows the ECMAScript standards (but note, javascript also actually pre-dated those standards; EMCAScript standards are built off the early implementation of LiveScript/JavaScript). The current ECMAScript standard is 5.1 (2011); at the time that the question was originally asked (June &amp;rsquo;09), the standard was 3 (4 was abandoned), but 5 was released shortly after the post at the end of 2009. This should outline one problem; what standard a javascript implementation may follow, may not reflect what is actually in place, because a) it&amp;rsquo;s an implementation of a given standard, b) not all implementations of a standard are puritan, and c) functionality is not released in synchronization with a new standard as d) an implementation is a constant work in progress</source>
          <target state="translated">要回答该问题，或者通常甚至寻找该问题的答案，您需要知道javascript不是一种新颖的语言； 它实际上是ECMAScript的实现，并且遵循ECMAScript标准（但请注意，JavaScript实际上也早于这些标准； EMCAScript标准是在LiveScript / JavaScript的早期实现基础上构建的）。 当前的ECMAScript标准为5.1（2011）； 在最初提出问题时（'09年6月），标准是3（放弃了4个），但在2009年底该职位发布后不久发布了5个。 javascript实现可能遵循的标准，可能无法反映实际的标准，因为a）它是给定标准的实现，b）并非该标准的所有实现都是纯净的，并且c）功能未与a同步发布d）实施是一项持续不断的工作</target>
        </trans-unit>
        <trans-unit id="4d7a93787240652e3ef3807b81a2ffaf3238ccbc" translate="yes" xml:space="preserve">
          <source>Today, I played with the &lt;code&gt;toString()&lt;/code&gt; method on the date object and surprisingly it serves the purpose of formatting date to strings.</source>
          <target state="translated">今天，我在date对象上使用 &lt;code&gt;toString()&lt;/code&gt; 方法，令人惊讶的是，它用于将日期格式化为字符串的目的。</target>
        </trans-unit>
        <trans-unit id="9cca2a06072ed86b3ef4044c08648c90cb64abda" translate="yes" xml:space="preserve">
          <source>Unsigned numbers followed by &amp;ldquo;.&amp;rdquo; are interpreted as a &amp;ldquo;time component&amp;rdquo;, and must be followed by milliseconds.</source>
          <target state="translated">无符号数字后跟&amp;ldquo;。&amp;rdquo; 被解释为&amp;ldquo;时间成分&amp;rdquo;，并且必须以毫秒为单位。</target>
        </trans-unit>
        <trans-unit id="90bb8d3361b9be7ae20fc165a26d87b0981cc9b3" translate="yes" xml:space="preserve">
          <source>Unsigned numbers followed by &amp;ldquo;:&amp;rdquo; are interpreted as a &amp;ldquo;time component&amp;rdquo;.</source>
          <target state="translated">无符号数字后跟&amp;ldquo;：&amp;rdquo;被解释为&amp;ldquo;时间成分&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="6607c7302bc8217c3b42cb642de1fd4147489ff5" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;.getDate()&lt;/code&gt;, &lt;code&gt;.getMonth()&lt;/code&gt; and &lt;code&gt;.getFullYear()&lt;/code&gt; to get respectively the day, month and year</source>
          <target state="translated">使用 &lt;code&gt;.getDate()&lt;/code&gt; &lt;code&gt;.getMonth()&lt;/code&gt; 和 &lt;code&gt;.getFullYear()&lt;/code&gt; 分别获取日，月和年</target>
        </trans-unit>
        <trans-unit id="c29fa67948f9ddc5a07ce5664647a414272a0185" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;new Date()&lt;/code&gt; to create a &lt;code&gt;Date&lt;/code&gt; object</source>
          <target state="translated">使用 &lt;code&gt;new Date()&lt;/code&gt; 创建一个 &lt;code&gt;Date&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="a2adc5b2cc4cb736c2deebb465f776af14085c11" translate="yes" xml:space="preserve">
          <source>Using a library that uses the same format strings as something I already know is easier for me, and the manual containing all of the format string possibilities for the date function is of course online at php.net</source>
          <target state="translated">使用一个与我已经知道的格式字符串相同的库对我来说更容易,当然,包含所有日期函数的格式字符串的手册可以在php.net上找到。</target>
        </trans-unit>
        <trans-unit id="e7e6bcb81a5b22becadef925db0d07360474064f" translate="yes" xml:space="preserve">
          <source>When a single argument is passed to new Date(), it casts this function prototype:</source>
          <target state="translated">当一个参数被传递给new Date()时,它就会铸造这个函数的原型。</target>
        </trans-unit>
        <trans-unit id="114a642f495b826aea7acbe33edb7cc2dbe8b1d5" translate="yes" xml:space="preserve">
          <source>When declaring the hour and minute, you can use either &amp;ldquo;hh:mm&amp;rdquo; or &amp;ldquo;hhmm&amp;rdquo;.</source>
          <target state="translated">声明小时和分钟时，可以使用&amp;ldquo; hh：mm&amp;rdquo;或&amp;ldquo; hhmm&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="aca9dbbb303c77c0807a01bd36cfa2c2d2e3bd75" translate="yes" xml:space="preserve">
          <source>When two or more arguments are passed to new Date(), it casts this function prototype:</source>
          <target state="translated">当两个或两个以上的参数被传递给new Date()时,它会将这个函数的原型进行铸造。</target>
        </trans-unit>
        <trans-unit id="22e96b4636d40dc7f5e0cabec086fa1703c0cf1d" translate="yes" xml:space="preserve">
          <source>Where can I find documentation on formatting a date in JavaScript</source>
          <target state="translated">我在哪里可以找到关于用JavaScript格式化日期的文档?</target>
        </trans-unit>
        <trans-unit id="579d59444a2404e66748881c19a9d372f4ecfc33" translate="yes" xml:space="preserve">
          <source>Where is the documentation which lists the format specifiers supported by the &lt;code&gt;Date()&lt;/code&gt; object?</source>
          <target state="translated">列出 &lt;code&gt;Date()&lt;/code&gt; 对象支持的格式说明符的文档在哪里？</target>
        </trans-unit>
        <trans-unit id="4db2ac4b37938d9c0ad295c19c67c827344d41d3" translate="yes" xml:space="preserve">
          <source>Where is the documentation which lists the format specifiers supported by the Date() object?</source>
          <target state="translated">哪里有列出Date()对象支持的格式指定器的文档?</target>
        </trans-unit>
        <trans-unit id="cb82d60c39346039f6cb4bfadc10677edda44f48" translate="yes" xml:space="preserve">
          <source>Words before the first number that are unknown to the parser are ignored.</source>
          <target state="translated">第一个数字前的单词如果是解析器不知道的,则会被忽略。</target>
        </trans-unit>
        <trans-unit id="8a68842cfe408a71879376c0a3a9390db314dd5d" translate="yes" xml:space="preserve">
          <source>Words that indicate a time zone are interpreted as a time zone.</source>
          <target state="translated">表示时区的词语被解释为时区。</target>
        </trans-unit>
        <trans-unit id="547dd53a0f9d977db148a27feb921a694997de56" translate="yes" xml:space="preserve">
          <source>You can also use the built-in &lt;code&gt;.toLocaleDateString&lt;/code&gt; method to do the formatting for you. You just need pass along the proper locale and options to match the right format, which unfortunately is only supported by modern browsers &lt;strong&gt;(*)&lt;/strong&gt; :</source>
          <target state="translated">您也可以使用内置的 &lt;code&gt;.toLocaleDateString&lt;/code&gt; 方法为您进行格式化。 您只需要传递正确的语言环境和选项以匹配正确的格式，不幸的是，只有现代浏览器&lt;strong&gt;（*）&lt;/strong&gt;支持这种格式：</target>
        </trans-unit>
        <trans-unit id="1edfc250c68ac34350b49739add4361fe59c9d57" translate="yes" xml:space="preserve">
          <source>You can define minutes and hours together in either of the two formats: &amp;ldquo;hh:mm&amp;rdquo; or &amp;ldquo;hhmm&amp;rdquo;.</source>
          <target state="translated">您可以使用以下两种格式之一来定义分钟和小时：&amp;ldquo; hh：mm&amp;rdquo;或&amp;ldquo; hhmm&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="df104a6b1e018c302f37170ba0592e5f729d2f0d" translate="yes" xml:space="preserve">
          <source>You can just expand the &lt;code&gt;Date&lt;/code&gt; Object with a new &lt;code&gt;format&lt;/code&gt; method as noted by &lt;a href=&quot;http://huahun.iteye.com/blog/197367&quot;&gt;meizz&lt;/a&gt;, below is the code given by the author.  And
here is a &lt;a href=&quot;http://jsfiddle.net/gongzhitaao/G5kEQ/1/&quot;&gt;jsfiddle&lt;/a&gt;.</source>
          <target state="translated">您可以使用&lt;a href=&quot;http://huahun.iteye.com/blog/197367&quot;&gt;meizz&lt;/a&gt;指出的新 &lt;code&gt;format&lt;/code&gt; 方法来扩展 &lt;code&gt;Date&lt;/code&gt; 对象，以下是作者提供的代码。 这是一个&lt;a href=&quot;http://jsfiddle.net/gongzhitaao/G5kEQ/1/&quot;&gt;jsfiddle&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="f0ae8828fb30e6e7019eefb01ea7d8d7ac98d13d" translate="yes" xml:space="preserve">
          <source>You can use d1.getTime() instead of valueOf() if you want, they do the same thing.</source>
          <target state="translated">如果你愿意,你可以用d1.getTime()代替valueOf(),它们的作用是一样的。</target>
        </trans-unit>
        <trans-unit id="ff13e1c8fd8336958ef291a9514961baa58f134b" translate="yes" xml:space="preserve">
          <source>You may find useful this modification of date object, which is smaller than any library and is easily extendable to support different formats:</source>
          <target state="translated">你可能会发现这种修改日期对象的方法很有用,它比任何库都要小,而且很容易扩展到支持不同的格式。</target>
        </trans-unit>
        <trans-unit id="ca63f7a5bd9921e1329c4339c34719e751faf668" translate="yes" xml:space="preserve">
          <source>You simply include the date.js file in your HTML using your preferred method then call it like this:</source>
          <target state="translated">你只需使用你喜欢的方法在你的HTML中包含date.js文件,然后像这样调用它。</target>
        </trans-unit>
        <trans-unit id="5e9b496a0935b15e72709835275b0a4dd4c2a1c6" translate="yes" xml:space="preserve">
          <source>etc...</source>
          <target state="translated">etc...</target>
        </trans-unit>
        <trans-unit id="7d88322d3416a52a199b5e9071e67685eaa08ec2" translate="yes" xml:space="preserve">
          <source>refer below link for more details
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&lt;/a&gt;</source>
          <target state="translated">请参阅下面的链接以获取更多详细信息&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4e44c86a4dc7a8a41f3d48c50474209e8485023b" translate="yes" xml:space="preserve">
          <source>use this functions</source>
          <target state="translated">使用此功能</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
