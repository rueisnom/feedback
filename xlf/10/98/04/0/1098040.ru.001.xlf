<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/1098040">
    <body>
      <group id="1098040">
        <trans-unit id="519517a217d707547400fa92b3393d52b8dc528e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt; is the primitive value that represents the intentional absence of any object value, or in short terms, the &lt;strong&gt;confirmed&lt;/strong&gt; lack of value. On the other hand, &lt;code&gt;undefined&lt;/code&gt; is unknown value (not defined). If there is a property that will be used later with a &lt;em&gt;proper&lt;/em&gt; value consider use &lt;code&gt;null&lt;/code&gt; reference instead of &lt;code&gt;undefined&lt;/code&gt; because in the initial moment the property is &lt;strong&gt;confirmed&lt;/strong&gt; to lack a value.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; - это примитивное значение, которое представляет намеренное отсутствие какого-либо значения объекта или, в краткосрочной перспективе, &lt;strong&gt;подтвержденное&lt;/strong&gt; отсутствие значения. С другой стороны, &lt;code&gt;undefined&lt;/code&gt; - это неизвестное значение (не определено). Если есть свойство, которое будет использоваться позже с &lt;em&gt;правильным&lt;/em&gt; значением, рассмотрите использование &lt;code&gt;null&lt;/code&gt; ссылки вместо &lt;code&gt;undefined&lt;/code&gt; поскольку в начальный момент &lt;strong&gt;подтверждается,&lt;/strong&gt; что у свойства отсутствует значение.</target>
        </trans-unit>
        <trans-unit id="c6cee3e35e1acd88bad0f9680a837b208eed84d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt; is a special constant value.  So you can say, e.g.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; - это специальное постоянное значение. Так что вы можете сказать, например,</target>
        </trans-unit>
        <trans-unit id="7dd5e72bc3dd8230f447b9dc531cd7a08e403a64" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;false&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;false&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2383eb2bd66a87e2a4cd5c348c55493d9bb4a5ac" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;in&lt;/em&gt; operator and &lt;em&gt;hasOwnProperty&lt;/em&gt; are &quot;methods&quot; that use Property Descriptor mechanism in Javascript (similar to Java reflection in the Java language).</source>
          <target state="translated">&lt;em&gt;in&lt;/em&gt; operator и &lt;em&gt;hasOwnProperty&lt;/em&gt; являются &amp;laquo;методами&amp;raquo;, которые используют механизм дескриптора свойства в Javascript (аналогично отражению Java в языке Java).</target>
        </trans-unit>
        <trans-unit id="40c4e2aba6f20ef3054aa9f6652924532338589f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;true&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;true&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c6f3be30363beecac276101c94086e2fdd56bca2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;!!obj.theProperty&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;!!obj.theProperty&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ad6fb95c81adc0b04b875d53f3bb20e51a78f1f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;'theProperty' in obj&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;'theProperty' в объекте&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c332061cf4bd899460b0a4c0a7eaa14bdb27b163" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Answer:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Answer:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a9108ede24ec6135336892fdeecab45ae62e7a84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Explanation:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Explanation:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b1f16ac208823b9ad05420eced587aea51038d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Results&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Results&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8f3bb088e67323c8d8b4d2f82d6f9c75e019ea6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;obj.hasOwnProperty('theProperty')&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;obj.hasOwnProperty('theProperty')&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e95b6137b1dc26d6257a673e19d7ec8280859c7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;yourArray.indexOf(yourArrayKeyName) &amp;gt; -1&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;yourArray.indexOf (yourArrayKeyName)&amp;gt; -1&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d33250a5fbfa20daee602816ee62705f3a74f3f9" translate="yes" xml:space="preserve">
          <source>Accessing directly a missing property using (associative) array style or object style will return an &lt;em&gt;undefined&lt;/em&gt; constant.</source>
          <target state="translated">Прямой доступ к отсутствующему свойству с использованием (ассоциативного) стиля массива или стиля объекта вернет &lt;em&gt;неопределенную&lt;/em&gt; константу.</target>
        </trans-unit>
        <trans-unit id="dab954de02cc8e3adeae87ce15894f88ae50d047" translate="yes" xml:space="preserve">
          <source>Accessing elements directly (brackets style)</source>
          <target state="translated">Непосредственный доступ к элементам (стиль кронштейнов)</target>
        </trans-unit>
        <trans-unit id="cac0f8526d8eeeaf1e88a433c142248c239182ba" translate="yes" xml:space="preserve">
          <source>Accessing elements directly (object style)</source>
          <target state="translated">Прямой доступ к элементам (стиль объекта)</target>
        </trans-unit>
        <trans-unit id="9580e1f866b8cb810efbd1a60075d21c9b12406d" translate="yes" xml:space="preserve">
          <source>Advise</source>
          <target state="translated">Advise</target>
        </trans-unit>
        <trans-unit id="116d162e5036a6d9038509356dbf204094e3a269" translate="yes" xml:space="preserve">
          <source>Also see this NPM package: &lt;a href=&quot;https://www.npmjs.com/package/has-deep-value&quot;&gt;https://www.npmjs.com/package/has-deep-value&lt;/a&gt;</source>
          <target state="translated">Также посмотрите этот пакет NPM: &lt;a href=&quot;https://www.npmjs.com/package/has-deep-value&quot;&gt;https://www.npmjs.com/package/has-deep-value&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="484c6818ac76d11234ebfe88349071d160a86b4f" translate="yes" xml:space="preserve">
          <source>As people have already mentioned here, you could have an object with a property associated with an &quot;undefined&quot; constant.</source>
          <target state="translated">Как уже упоминалось здесь,вы можете иметь объект со свойством,связанным с &quot;неопределенной&quot; константой.</target>
        </trans-unit>
        <trans-unit id="c2025e17a6d8b0ceb50c575a22468de823cc41ed" translate="yes" xml:space="preserve">
          <source>As people have commented, modern versions of the Javascript engines (with firefox exception) has changed the approach for access properties. Current implementation is slower than the previous one for this particular case but difference between access key and object are neglectable.</source>
          <target state="translated">Как прокомментировали люди,современные версии движков Javascript (с исключением Firefox)изменили подход к свойствам доступа.Текущая реализация для данного случая медленнее,чем предыдущая,но разница между ключом доступа и объектом пренебрежимо мала.</target>
        </trans-unit>
        <trans-unit id="19802860ccafd0790484da9e938a84df5e02dc56" translate="yes" xml:space="preserve">
          <source>Avoid objects with &lt;code&gt;undefined&lt;/code&gt; values. Check directly whenever possible and use &lt;code&gt;null&lt;/code&gt; to initialize property values. Otherwise, use the slow &lt;code&gt;in&lt;/code&gt; operator or &lt;code&gt;hasOwnProperty()&lt;/code&gt; method.</source>
          <target state="translated">Избегайте объектов с &lt;code&gt;undefined&lt;/code&gt; значениями. Проверяйте напрямую, когда это возможно, и используйте &lt;code&gt;null&lt;/code&gt; для инициализации значений свойств. В противном случае используйте оператор slow &lt;code&gt;in&lt;/code&gt; или &lt;code&gt;hasOwnProperty()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="547eb5add296d7dae2f7db9f812265ad081246ec" translate="yes" xml:space="preserve">
          <source>But,</source>
          <target state="translated">But,</target>
        </trans-unit>
        <trans-unit id="0becfe2c4668960d0e296880fc0a116e615ed692" translate="yes" xml:space="preserve">
          <source>Checking for undefined-ness is not an accurate way of testing whether a key exists. What if the key exists but the value is actually &lt;code&gt;undefined&lt;/code&gt;?</source>
          <target state="translated">Проверка на неопределенность не является точным способом проверить, существует ли ключ. Что если ключ существует, но значение на самом деле &lt;code&gt;undefined&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="bb97f78198e080fa51dc96e31746177d0a1b7395" translate="yes" xml:space="preserve">
          <source>Checking if a key exists in a JavaScript object</source>
          <target state="translated">Проверка наличия ключа в объекте JavaScript.</target>
        </trans-unit>
        <trans-unit id="ab6b4e896ea7eaaed3d3b7bd63695ed61f2bc666" translate="yes" xml:space="preserve">
          <source>Compare:</source>
          <target state="translated">Compare:</target>
        </trans-unit>
        <trans-unit id="bac41fa8996acdea0eeac7071146e860d4a300a4" translate="yes" xml:space="preserve">
          <source>Do check &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;other use of JavaScript Destructuring&lt;/a&gt;</source>
          <target state="translated">Проверяйте &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;другое использование JavaScript Destructuring&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8c98edbeeae1cf8ff6b929a6a0f7e4b52a617468" translate="yes" xml:space="preserve">
          <source>Does not check the prototype chain. (since all objects have the 'toString' method, 1 and 2 will return true on it, while 3 can return false on it.)</source>
          <target state="translated">Не проверяет прототип цепи.(так как все объекты имеют метод 'toString',1 и 2 вернут true,а 3 могут вернуть false).</target>
        </trans-unit>
        <trans-unit id="272b1b749b29175ccd8be91a3cef72f36a2988da" translate="yes" xml:space="preserve">
          <source>EDIT: 12/04/2018 - NOT RELEVANT ANYMORE</source>
          <target state="translated">РЕДАКТИРОВАНИЕ:12042018-БОЛЬШЕ НЕ АКТУАЛЬНО</target>
        </trans-unit>
        <trans-unit id="91842c0c3845e129051833509aa3157536fe9516" translate="yes" xml:space="preserve">
          <source>EDIT: What is the reason to assign to a property the &lt;code&gt;undefined&lt;/code&gt; value?</source>
          <target state="translated">РЕДАКТИРОВАТЬ: По какой причине присваивать свойству &lt;code&gt;undefined&lt;/code&gt; значение?</target>
        </trans-unit>
        <trans-unit id="e507eb360663726b7ec803640c593cbacb792539" translate="yes" xml:space="preserve">
          <source>ES6 solution</source>
          <target state="translated">решение ES6</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Расширить фрагмент</target>
        </trans-unit>
        <trans-unit id="d255f10a635b9aa2777665c01d1e6f11ad8653a0" translate="yes" xml:space="preserve">
          <source>For performance comparison between the methods that are &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;hasOwnProperty&lt;/code&gt; and key is &lt;code&gt;undefined&lt;/code&gt;, see this &lt;a href=&quot;http://jsben.ch/#/WqlIl&quot;&gt;&lt;strong&gt;benchmark&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">Для сравнения производительности между методами, &lt;code&gt;in&lt;/code&gt; &lt;code&gt;hasOwnProperty&lt;/code&gt; и ключ не &lt;code&gt;undefined&lt;/code&gt; , см. Этот &lt;a href=&quot;http://jsben.ch/#/WqlIl&quot;&gt;&lt;strong&gt;тест&lt;/strong&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6a51d9e151f799cc8f82b96b8bf564cca524cb7d" translate="yes" xml:space="preserve">
          <source>For that reason, it is much better practice to first use the &lt;code&gt;in&lt;/code&gt; operator and then compare the value that is inside the key once you already know it exists.</source>
          <target state="translated">По этой причине гораздо лучше сначала использовать оператор &lt;code&gt;in&lt;/code&gt; , а затем сравнивать значение, находящееся внутри ключа, когда вы уже знаете, что оно существует.</target>
        </trans-unit>
        <trans-unit id="c1b286568b766db19804151d364239b2983a4693" translate="yes" xml:space="preserve">
          <source>For those which have &lt;code&gt;lodash&lt;/code&gt; included in their project:</source>
          <target state="translated">Для тех, &lt;code&gt;lodash&lt;/code&gt; включил в свой проект lodash :</target>
        </trans-unit>
        <trans-unit id="b01e8d047367be0b116d5989292452861f000c2d" translate="yes" xml:space="preserve">
          <source>Gets the value at path of object. If the resolved value is undefined,
  the defaultValue is returned in its place.</source>
          <target state="translated">Получает значение на пути объекта.Если разрешенное значение не определено,на его место возвращается значение по умолчаниюValue.</target>
        </trans-unit>
        <trans-unit id="dabeae73ffa9b82898fbf2e0ae896b13572bd7b0" translate="yes" xml:space="preserve">
          <source>Here's a helper function I find quite useful</source>
          <target state="translated">Вот вспомогательная функция,которую я нахожу весьма полезной.</target>
        </trans-unit>
        <trans-unit id="64344cbf98de8af9deafcc5544f6215efff6a838" translate="yes" xml:space="preserve">
          <source>How do I check if a particular key exists in a JavaScript object or array?</source>
          <target state="translated">Как проверить,существует ли определенный ключ в объекте JavaScript или массиве?</target>
        </trans-unit>
        <trans-unit id="c6ff6c8ba9a89e1910cf47b19f592b919ca2e438" translate="yes" xml:space="preserve">
          <source>How do I check if a particular key exists in a JavaScript object or array?
  If a key doesn't exist and I try to access it, will it return false? Or throw an error?</source>
          <target state="translated">Как проверить,существует ли определенный ключ в объекте JavaScript или массиве? Если ключа не существует и я пытаюсь получить к нему доступ,будет ли он возвращать false? Или выкинет ошибку?</target>
        </trans-unit>
        <trans-unit id="3aa399fdccae569ce9bd6caafa430ca0222b02ac" translate="yes" xml:space="preserve">
          <source>If a key doesn't exist, and I try to access it, will it return false? Or throw an error?</source>
          <target state="translated">Если ключа не существует,и я пытаюсь получить к нему доступ,он вернётся ложным? Или выкинет ошибку?</target>
        </trans-unit>
        <trans-unit id="e3aba7203af978b71d93f08471a4c062b1c41459" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;http://underscorejs.org/&quot;&gt;underscore.js&lt;/a&gt; library then object/array operations become simple.</source>
          <target state="translated">Если вы используете библиотеку &lt;a href=&quot;http://underscorejs.org/&quot;&gt;underscore.js,&lt;/a&gt; то операции с объектами / массивами становятся простыми.</target>
        </trans-unit>
        <trans-unit id="506421cbb0a189ba09225b28b78467347bc22072" translate="yes" xml:space="preserve">
          <source>If you want to check for any key at any depth on an object and account for falsey values consider this line for a utility function:</source>
          <target state="translated">Если вы хотите проверить любой ключ на любой глубине на объекте и учесть ложные значения,то рассмотрите эту строку для функции утилиты:</target>
        </trans-unit>
        <trans-unit id="197ebcc04461504aff342802b90c68b67fff9715" translate="yes" xml:space="preserve">
          <source>If you want to check if a key doesn't exist, remember to use parenthesis:</source>
          <target state="translated">Если вы хотите проверить,нет ли ключа,не забудьте использовать скобки:</target>
        </trans-unit>
        <trans-unit id="4767ea50f8d0dea7df79893a955afb013861529c" translate="yes" xml:space="preserve">
          <source>If you want to check if the object has at least one property in es2015</source>
          <target state="translated">Если вы хотите проверить,имеет ли объект хотя бы один объект в es2015</target>
        </trans-unit>
        <trans-unit id="1a6d289d515efa919b3ce78998706215aea08f0b" translate="yes" xml:space="preserve">
          <source>In 'array' world we can look on indexes as some kind of keys. What is surprising the &lt;code&gt;in&lt;/code&gt; operator (which is good choice for object) also works with arrays. The returned value for non-existed key is &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">В мире &amp;laquo;массивов&amp;raquo; мы можем рассматривать индексы как некие ключи. Что удивительно, оператор &lt;code&gt;in&lt;/code&gt; (который является хорошим выбором для объекта) также работает с массивами. Возвращаемое значение для несуществующего ключа не &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="635b76f22d1af237405169ff52f18ea5b7ed34a8" translate="yes" xml:space="preserve">
          <source>In that case, you will have to use &lt;em&gt;hasOwnProperty&lt;/em&gt; or &lt;em&gt;in&lt;/em&gt; operator to know if the key is really there. But, &lt;em&gt;but at what price?&lt;/em&gt;</source>
          <target state="translated">В этом случае вам придется использовать &lt;em&gt;hasOwnProperty&lt;/em&gt; или оператор, чтобы узнать, действительно ли ключ существует. Но, &lt;em&gt;но по какой цене?&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a59812f97ddc03dd9bb7022b5e6ae1cf75fd5899" translate="yes" xml:space="preserve">
          <source>In your case _.has method can be used. Example:</source>
          <target state="translated">В вашем случае _.has метод может быть использован.Пример:</target>
        </trans-unit>
        <trans-unit id="ace4bca3b2e92937347af125445ffa35cd48f497" translate="yes" xml:space="preserve">
          <source>Is likely testing only object attribute values that are very different from array keys</source>
          <target state="translated">Скорее всего,проверяются только те значения атрибутов объектов,которые сильно отличаются от ключей массива.</target>
        </trans-unit>
        <trans-unit id="fd900217e9a325799924409fce65745b93f07e07" translate="yes" xml:space="preserve">
          <source>It will return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">Он вернет &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="efab43bf9bd925e569fa55a920f20efac0786ae3" translate="yes" xml:space="preserve">
          <source>It's been pretty reliable and works well cross-browser.</source>
          <target state="translated">Он был довольно надежным и хорошо работает кросс-браузером.</target>
        </trans-unit>
        <trans-unit id="a115e1cc35fc96c77cd0dfa0142628a4bee3b3fd" translate="yes" xml:space="preserve">
          <source>Just pass it the key you want to find, and search obj (the object or array) you want to find it in.</source>
          <target state="translated">Просто передайте ему ключ,который вы хотите найти,и поищите объект (объект или массив),в котором вы хотите его найти.</target>
        </trans-unit>
        <trans-unit id="dd830936b2f315c1e71b7c0eb4843062f657ba39" translate="yes" xml:space="preserve">
          <source>New awesome solution with &lt;strong&gt;JavaScript Destructuring&lt;/strong&gt;:</source>
          <target state="translated">Новое потрясающее решение с &lt;strong&gt;JavaScript Destructuring&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="d582670184eb20dfbec6b2b998f2713d8292f0af" translate="yes" xml:space="preserve">
          <source>On the other hand, calling an object method or key will use Javascript [[Get]] mechanism. That is far way faster!</source>
          <target state="translated">С другой стороны,вызов метода или ключа объекта будет использовать механизм Javascript [[Get]].Это намного быстрее!</target>
        </trans-unit>
        <trans-unit id="745da0edfda252ba9371e9761d85c7c48246c395" translate="yes" xml:space="preserve">
          <source>One-line example.</source>
          <target state="translated">Пример из одной строки.</target>
        </trans-unit>
        <trans-unit id="b8132bff5731b0efdde9faa2931be30d76521970" translate="yes" xml:space="preserve">
          <source>Or, if you want to particularly test for properties of the object instance (and not inherited properties), use &lt;code&gt;hasOwnProperty&lt;/code&gt;:</source>
          <target state="translated">Или, если вы хотите особенно проверить свойства экземпляра объекта (а не наследуемые свойства), используйте &lt;code&gt;hasOwnProperty&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="45c3dc1c7731c6185824876ed514e54f71bacb64" translate="yes" xml:space="preserve">
          <source>Reference:</source>
          <target state="translated">Reference:</target>
        </trans-unit>
        <trans-unit id="d4143b60adcc66e93b5641fa050f5ed81f7b6f54" translate="yes" xml:space="preserve">
          <source>Return value as &lt;strong&gt;true&lt;/strong&gt; implies that key exists in the object.</source>
          <target state="translated">Возвращаемое значение как &lt;strong&gt;true&lt;/strong&gt; подразумевает, что ключ существует в объекте.</target>
        </trans-unit>
        <trans-unit id="6bfe3a0c55e0873dec8f263aaed2bba9ddfd3bc5" translate="yes" xml:space="preserve">
          <source>That question puzzles me. In Javascript, there are at least two references for absent objects to avoid problems like this: &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">Этот вопрос озадачивает меня. В Javascript есть по крайней мере две ссылки на отсутствующие объекты, чтобы избежать таких проблем: &lt;code&gt;null&lt;/code&gt; и &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7fe9ba2a314f95863f81184d3c1efed1b4071915" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://underscorejs.org/#has&quot;&gt;underscore.js&lt;/a&gt; way -</source>
          <target state="translated">Способ &lt;a href=&quot;http://underscorejs.org/#has&quot;&gt;underscore.js&lt;/a&gt; -</target>
        </trans-unit>
        <trans-unit id="eb4d6aecd13e672a16a35097398454e1cd50dfcb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://stackoverflow.com/a/1098955/1619432&quot;&gt;accepted answer&lt;/a&gt; refers to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;Object&lt;/a&gt;. Beware using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt; on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array&lt;/a&gt; to find data instead of keys:</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/1098955/1619432&quot;&gt;Принятый ответ&lt;/a&gt; относится к &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;объекту&lt;/a&gt; . Остерегайтесь использования &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in&quot;&gt;оператора &lt;code&gt;in&lt;/code&gt; &lt;/a&gt; для &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array&lt;/a&gt; для поиска данных вместо ключей:</target>
        </trans-unit>
        <trans-unit id="a153cd380c4fb21f0dff2341fcc0edac0aed61c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in&lt;/code&gt; operator will check if the key exists in the object. If you checked if the value was undefined: &lt;code&gt;if (myObj[&quot;key&quot;] === 'undefined')&lt;/code&gt;, you could run into problems because a key could possibly exist in your object with the &lt;code&gt;undefined&lt;/code&gt; value.</source>
          <target state="translated">Оператор &lt;code&gt;in&lt;/code&gt; проверит, существует ли ключ в объекте. Если вы проверили, было ли значение неопределенным: &lt;code&gt;if (myObj[&quot;key&quot;] === 'undefined')&lt;/code&gt; , вы можете столкнуться с проблемами, поскольку ключ может существовать в вашем объекте с &lt;code&gt;undefined&lt;/code&gt; значением.</target>
        </trans-unit>
        <trans-unit id="d5241f8e79bfc2410d2beaaf9730f6e0fc49c440" translate="yes" xml:space="preserve">
          <source>The Property Descriptor type is used to explain the manipulation and reification of named property attributes. Values of the Property Descriptor type are records composed of named fields where each field&amp;rsquo;s name is an attribute name and its value is a corresponding attribute value as specified in 8.6.1. In addition, any field may be present or absent.</source>
          <target state="translated">Тип дескриптора свойства используется для объяснения манипулирования и повторного использования атрибутов именованных свойств. Значения типа дескриптора свойства представляют собой записи, состоящие из именованных полей, где каждое имя поля является именем атрибута, а его значение является соответствующим значением атрибута, как указано в 8.6.1. Кроме того, любое поле может присутствовать или отсутствовать.</target>
        </trans-unit>
        <trans-unit id="cf30e904462e4aae8cdd7b168aacd1ad1e066096" translate="yes" xml:space="preserve">
          <source>The easiest way to check is</source>
          <target state="translated">Самый простой способ проверить</target>
        </trans-unit>
        <trans-unit id="eccfaf4f159b6f103e4ed08f52dc3742db4aa864" translate="yes" xml:space="preserve">
          <source>The result was</source>
          <target state="translated">В результате</target>
        </trans-unit>
        <trans-unit id="13f099e05e978962ca2336adeefe3db61eaeaba5" translate="yes" xml:space="preserve">
          <source>The slow and reliable &lt;em&gt;in&lt;/em&gt; operator and &lt;em&gt;hasOwnProperty&lt;/em&gt; method</source>
          <target state="translated">Медленный и надежный &lt;em&gt;в&lt;/em&gt; операторе и метод &lt;em&gt;hasOwnProperty&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="67aceb7888201fdd507d61a20469d552462e5be5" translate="yes" xml:space="preserve">
          <source>There is a lodash &lt;a href=&quot;https://lodash.com/docs/4.17.4#get&quot;&gt;_.get&lt;/a&gt; method  which tries to get &quot;deep&quot; keys:</source>
          <target state="translated">Существует метод lodash &lt;a href=&quot;https://lodash.com/docs/4.17.4#get&quot;&gt;_.get,&lt;/a&gt; который пытается получить &amp;laquo;глубокие&amp;raquo; ключи:</target>
        </trans-unit>
        <trans-unit id="a7279aec2d48ec0145befa61c75ba5a2e06f1c8d" translate="yes" xml:space="preserve">
          <source>These example can demonstrate the differences between defferent ways. Hope it will help you to pick the right one for your needs:</source>
          <target state="translated">Этот пример может продемонстрировать различия между разными способами.Надеюсь,он поможет вам выбрать подходящий для ваших нужд:</target>
        </trans-unit>
        <trans-unit id="f2a7ad11aaa38430987a75a278719d32b9fbc4f7" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;keyExists(key, search)&lt;/code&gt; can be used to easily lookup a key within  objects or arrays!</source>
          <target state="translated">Этот &lt;code&gt;keyExists(key, search)&lt;/code&gt; может быть использован для простого поиска ключа в объектах или массивах!</target>
        </trans-unit>
        <trans-unit id="e217f557ce364dce64998b7b407800bcc32871e5" translate="yes" xml:space="preserve">
          <source>This is probably the best way to check for missing keys.  However, as is pointed out in a comment below, it's theoretically possible that you'd want to have the actual value be &lt;code&gt;undefined&lt;/code&gt;.  I've never needed to do this and can't think of a reason offhand why I'd ever want to, but just for the sake of completeness, you can use the &lt;code&gt;in&lt;/code&gt; operator</source>
          <target state="translated">Это, вероятно, лучший способ проверить отсутствие ключей. Однако, как указано в комментарии ниже, теоретически возможно, что вы хотите, чтобы фактическое значение было &lt;code&gt;undefined&lt;/code&gt; . Мне никогда не нужно было этого делать, и я не могу придумать причину, почему я бы этого хотел, но ради полноты вы можете использовать оператор &lt;code&gt;in&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c8e3604f695a9f8b1fa5584d30b0d91c334f5116" translate="yes" xml:space="preserve">
          <source>This solution works best for me because I use typescript, and using strings like so &lt;code&gt;'foo' in obj&lt;/code&gt; or &lt;code&gt;obj.hasOwnProperty('foo')&lt;/code&gt; 
  to check whether a key exists or not does not provide me with intellisense.</source>
          <target state="translated">Это решение работает лучше всего для меня, потому что я использую машинописный текст и использую строки типа &lt;code&gt;'foo' in obj&lt;/code&gt; или &lt;code&gt;obj.hasOwnProperty('foo')&lt;/code&gt; чтобы проверить, существует ли ключ или нет, и не предоставляет мне intellisense.</target>
        </trans-unit>
        <trans-unit id="0b44bcd403c32099bee3e6a3d6ebd539f0d28337" translate="yes" xml:space="preserve">
          <source>This will effectively check if that key, however &lt;strong&gt;deep&lt;/strong&gt;, is defined and &lt;em&gt;will not&lt;/em&gt; throw an error which might harm the flow of your program if that key is not defined.</source>
          <target state="translated">Это эффективно проверит, определен ли этот ключ, сколь бы &lt;strong&gt;глубоким он ни был&lt;/strong&gt; , и &lt;em&gt;не&lt;/em&gt; выдаст ошибку, которая может повредить потоку вашей программы, если этот ключ не определен.</target>
        </trans-unit>
        <trans-unit id="04a17a364ca132f362dfda3ce086d3904a604016" translate="yes" xml:space="preserve">
          <source>Three ways to check if a property is present in a javascript object:</source>
          <target state="translated">Три способа проверить наличие свойства в объекте javascript:</target>
        </trans-unit>
        <trans-unit id="f99da6036e454edfd993c0213467c52e9cfe7c5f" translate="yes" xml:space="preserve">
          <source>To test existing elements in an Array: &lt;a href=&quot;https://stackoverflow.com/questions/143847/best-way-to-find-an-item-in-a-javascript-array&quot;&gt;Best way to find if an item is in a JavaScript array?&lt;/a&gt;</source>
          <target state="translated">Чтобы проверить существующие элементы в массиве: &lt;a href=&quot;https://stackoverflow.com/questions/143847/best-way-to-find-an-item-in-a-javascript-array&quot;&gt;лучший способ узнать, находится ли элемент в массиве JavaScript?&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d3123a22dd221942534d6208cb1e60c6c71d8ffa" translate="yes" xml:space="preserve">
          <source>Using &lt;em&gt;in&lt;/em&gt; operator</source>
          <target state="translated">Использование &lt;em&gt;в&lt;/em&gt; операторе</target>
        </trans-unit>
        <trans-unit id="f86614f10a31f1f570d64c3b5a17bf9cca50d526" translate="yes" xml:space="preserve">
          <source>Using hasOwnProperty</source>
          <target state="translated">Использование hasOwnProperty</target>
        </trans-unit>
        <trans-unit id="2eec541a006f6b09e686f7436683abe3e6d845ad" translate="yes" xml:space="preserve">
          <source>We can use - &lt;code&gt;hasOwnProperty.call(obj, key);&lt;/code&gt;</source>
          <target state="translated">Мы можем использовать - &lt;code&gt;hasOwnProperty.call(obj, key);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a067fe8a55b6144d51f2d530845ff0dc8ca6d704" translate="yes" xml:space="preserve">
          <source>While this doesn't necessarily check if a key exists, it does check for the truthiness of a value. Which &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; fall under.</source>
          <target state="translated">Хотя это не обязательно проверяет, существует ли ключ, оно проверяет правильность значения. Которые &lt;code&gt;undefined&lt;/code&gt; и подпадают под &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="457bff231268164f32510ef666da9107b349ede2" translate="yes" xml:space="preserve">
          <source>Will convert value to bool. returns TRUE for all but the 'false' value</source>
          <target state="translated">Преобразовывает значение в bool.возвращает TRUE для всех,кроме значения 'false'.</target>
        </trans-unit>
        <trans-unit id="2fed6708a323c378f4a3a12917f1c5363d03d335" translate="yes" xml:space="preserve">
          <source>Will return true if the property exists, no matter its value (even empty)</source>
          <target state="translated">Возвращает true,если свойство существует,независимо от его значения (даже пустое).</target>
        </trans-unit>
        <trans-unit id="eac56352850ccb3acbc7e16d5bf1803ccf3abb1e" translate="yes" xml:space="preserve">
          <source>You should instead use the &lt;code&gt;in&lt;/code&gt; operator:</source>
          <target state="translated">Вместо этого вы должны использовать оператор &lt;code&gt;in&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="fc38e4aeb7a5b66c5616d1fa21a41af646fb7594" translate="yes" xml:space="preserve">
          <source>benchmark</source>
          <target state="translated">benchmark</target>
        </trans-unit>
        <trans-unit id="07d20acd3d6d3a65dab86aac1963f8fc7266dde3" translate="yes" xml:space="preserve">
          <source>for example:</source>
          <target state="translated">Например:</target>
        </trans-unit>
        <trans-unit id="a1389338d08e6248cae8a563fa79ff7a162f904f" translate="yes" xml:space="preserve">
          <source>quick answer</source>
          <target state="translated">быстрый ответ</target>
        </trans-unit>
        <trans-unit id="2591d4a035f0e656adc70efd7854b78cb4e0c7b1" translate="yes" xml:space="preserve">
          <source>returns &lt;strong&gt;false&lt;/strong&gt;</source>
          <target state="translated">возвращает &lt;strong&gt;ложь&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9faec3bddf2b4f017257e503cfb75e48f2fc3027" translate="yes" xml:space="preserve">
          <source>returns &lt;strong&gt;true&lt;/strong&gt;</source>
          <target state="translated">возвращает &lt;strong&gt;истину&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ad0b98958a31a215cba31be4bf81cc9aebb12feb" translate="yes" xml:space="preserve">
          <source>so, I tell you...</source>
          <target state="translated">так что,говорю тебе...</target>
        </trans-unit>
        <trans-unit id="0a9c48942216c4967e64d4915aacd84115cacc3b" translate="yes" xml:space="preserve">
          <source>using &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/pl/docs/Web/JavaScript/Referencje/Obiekty/Array/some&quot;&gt;&lt;code&gt;Array#some&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;. It will return &lt;strong&gt;true&lt;/strong&gt; if given key exists in the object or &lt;strong&gt;false&lt;/strong&gt; if it doesn't.</source>
          <target state="translated">используя &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/pl/docs/Web/JavaScript/Referencje/Obiekty/Array/some&quot;&gt; &lt;code&gt;Array#some&lt;/code&gt; &lt;/a&gt;&lt;/strong&gt; и &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/a&gt;&lt;/strong&gt; . Он вернет &lt;strong&gt;true,&lt;/strong&gt; если данный ключ существует в объекте, или &lt;strong&gt;false,&lt;/strong&gt; если его нет.</target>
        </trans-unit>
        <trans-unit id="16b8e8b30c3eb529dc4b9960c99b9ecbb67dd4c9" translate="yes" xml:space="preserve">
          <source>vanila js</source>
          <target state="translated">ванила дикс</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
