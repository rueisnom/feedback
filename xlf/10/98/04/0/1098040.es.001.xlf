<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/1098040">
    <body>
      <group id="1098040">
        <trans-unit id="519517a217d707547400fa92b3393d52b8dc528e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt; is the primitive value that represents the intentional absence of any object value, or in short terms, the &lt;strong&gt;confirmed&lt;/strong&gt; lack of value. On the other hand, &lt;code&gt;undefined&lt;/code&gt; is unknown value (not defined). If there is a property that will be used later with a &lt;em&gt;proper&lt;/em&gt; value consider use &lt;code&gt;null&lt;/code&gt; reference instead of &lt;code&gt;undefined&lt;/code&gt; because in the initial moment the property is &lt;strong&gt;confirmed&lt;/strong&gt; to lack a value.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; es el valor primitivo que representa la ausencia intencional de cualquier valor de objeto, o en t&amp;eacute;rminos cortos, la falta de valor &lt;strong&gt;confirmada&lt;/strong&gt; . Por otro lado, &lt;code&gt;undefined&lt;/code&gt; es un valor desconocido (no definido). Si hay una propiedad que se usar&amp;aacute; m&amp;aacute;s tarde con un valor &lt;em&gt;adecuado&lt;/em&gt; , considere usar una referencia &lt;code&gt;null&lt;/code&gt; lugar de &lt;code&gt;undefined&lt;/code&gt; porque en el momento inicial se &lt;strong&gt;confirma&lt;/strong&gt; que la propiedad carece de un valor.</target>
        </trans-unit>
        <trans-unit id="c6cee3e35e1acd88bad0f9680a837b208eed84d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt; is a special constant value.  So you can say, e.g.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; es un valor constante especial. Entonces puedes decir, por ejemplo</target>
        </trans-unit>
        <trans-unit id="7dd5e72bc3dd8230f447b9dc531cd7a08e403a64" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;false&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;false&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2383eb2bd66a87e2a4cd5c348c55493d9bb4a5ac" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;in&lt;/em&gt; operator and &lt;em&gt;hasOwnProperty&lt;/em&gt; are &quot;methods&quot; that use Property Descriptor mechanism in Javascript (similar to Java reflection in the Java language).</source>
          <target state="translated">&lt;em&gt;en&lt;/em&gt; operator y &lt;em&gt;hasOwnProperty&lt;/em&gt; son &quot;m&amp;eacute;todos&quot; que utilizan el mecanismo Descriptor de propiedades en Javascript (similar a la reflexi&amp;oacute;n de Java en el lenguaje Java).</target>
        </trans-unit>
        <trans-unit id="40c4e2aba6f20ef3054aa9f6652924532338589f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;true&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;true&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c6f3be30363beecac276101c94086e2fdd56bca2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;!!obj.theProperty&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;!!obj.theProperty&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ad6fb95c81adc0b04b875d53f3bb20e51a78f1f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;'theProperty' in obj&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;'theProperty' en obj&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c332061cf4bd899460b0a4c0a7eaa14bdb27b163" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Answer:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Answer:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a9108ede24ec6135336892fdeecab45ae62e7a84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Explanation:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Explanation:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b1f16ac208823b9ad05420eced587aea51038d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Results&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Results&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8f3bb088e67323c8d8b4d2f82d6f9c75e019ea6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;obj.hasOwnProperty('theProperty')&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;obj.hasOwnProperty('theProperty')&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e95b6137b1dc26d6257a673e19d7ec8280859c7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;yourArray.indexOf(yourArrayKeyName) &amp;gt; -1&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;yourArray.indexOf (yourArrayKeyName)&amp;gt; -1&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d33250a5fbfa20daee602816ee62705f3a74f3f9" translate="yes" xml:space="preserve">
          <source>Accessing directly a missing property using (associative) array style or object style will return an &lt;em&gt;undefined&lt;/em&gt; constant.</source>
          <target state="translated">Acceder directamente a una propiedad faltante utilizando el estilo de matriz (asociativo) o el estilo de objeto devolver&amp;aacute; una constante &lt;em&gt;indefinida&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="dab954de02cc8e3adeae87ce15894f88ae50d047" translate="yes" xml:space="preserve">
          <source>Accessing elements directly (brackets style)</source>
          <target state="translated">Acceder a los elementos directamente (estilo paréntesis)</target>
        </trans-unit>
        <trans-unit id="cac0f8526d8eeeaf1e88a433c142248c239182ba" translate="yes" xml:space="preserve">
          <source>Accessing elements directly (object style)</source>
          <target state="translated">Acceder a los elementos directamente (estilo de objeto)</target>
        </trans-unit>
        <trans-unit id="9580e1f866b8cb810efbd1a60075d21c9b12406d" translate="yes" xml:space="preserve">
          <source>Advise</source>
          <target state="translated">Advise</target>
        </trans-unit>
        <trans-unit id="116d162e5036a6d9038509356dbf204094e3a269" translate="yes" xml:space="preserve">
          <source>Also see this NPM package: &lt;a href=&quot;https://www.npmjs.com/package/has-deep-value&quot;&gt;https://www.npmjs.com/package/has-deep-value&lt;/a&gt;</source>
          <target state="translated">Consulte tambi&amp;eacute;n este paquete NPM: &lt;a href=&quot;https://www.npmjs.com/package/has-deep-value&quot;&gt;https://www.npmjs.com/package/has-deep-value&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="484c6818ac76d11234ebfe88349071d160a86b4f" translate="yes" xml:space="preserve">
          <source>As people have already mentioned here, you could have an object with a property associated with an &quot;undefined&quot; constant.</source>
          <target state="translated">Como ya se ha mencionado aquí,se podría tener un objeto con una propiedad asociada a una constante &quot;indefinida&quot;.</target>
        </trans-unit>
        <trans-unit id="c2025e17a6d8b0ceb50c575a22468de823cc41ed" translate="yes" xml:space="preserve">
          <source>As people have commented, modern versions of the Javascript engines (with firefox exception) has changed the approach for access properties. Current implementation is slower than the previous one for this particular case but difference between access key and object are neglectable.</source>
          <target state="translated">Como se ha comentado,las versiones modernas de los motores de Javascript (con la excepción de Firefox)han cambiado el enfoque de las propiedades de acceso.La implementación actual es más lenta que la anterior para este caso en particular,pero la diferencia entre la clave de acceso y el objeto es insignificante.</target>
        </trans-unit>
        <trans-unit id="19802860ccafd0790484da9e938a84df5e02dc56" translate="yes" xml:space="preserve">
          <source>Avoid objects with &lt;code&gt;undefined&lt;/code&gt; values. Check directly whenever possible and use &lt;code&gt;null&lt;/code&gt; to initialize property values. Otherwise, use the slow &lt;code&gt;in&lt;/code&gt; operator or &lt;code&gt;hasOwnProperty()&lt;/code&gt; method.</source>
          <target state="translated">Evite objetos con valores &lt;code&gt;undefined&lt;/code&gt; . Verifique directamente siempre que sea posible y use &lt;code&gt;null&lt;/code&gt; para inicializar los valores de propiedad. De lo contrario, use el operador slow &lt;code&gt;in&lt;/code&gt; o el m&amp;eacute;todo &lt;code&gt;hasOwnProperty()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="547eb5add296d7dae2f7db9f812265ad081246ec" translate="yes" xml:space="preserve">
          <source>But,</source>
          <target state="translated">But,</target>
        </trans-unit>
        <trans-unit id="0becfe2c4668960d0e296880fc0a116e615ed692" translate="yes" xml:space="preserve">
          <source>Checking for undefined-ness is not an accurate way of testing whether a key exists. What if the key exists but the value is actually &lt;code&gt;undefined&lt;/code&gt;?</source>
          <target state="translated">Comprobar la indefinici&amp;oacute;n no es una forma precisa de comprobar si existe una clave. &amp;iquest;Qu&amp;eacute; pasa si la clave existe pero el valor en realidad &lt;code&gt;undefined&lt;/code&gt; est&amp;aacute; definido ?</target>
        </trans-unit>
        <trans-unit id="bb97f78198e080fa51dc96e31746177d0a1b7395" translate="yes" xml:space="preserve">
          <source>Checking if a key exists in a JavaScript object</source>
          <target state="translated">Comprobar si existe una clave en un objeto de JavaScript</target>
        </trans-unit>
        <trans-unit id="ab6b4e896ea7eaaed3d3b7bd63695ed61f2bc666" translate="yes" xml:space="preserve">
          <source>Compare:</source>
          <target state="translated">Compare:</target>
        </trans-unit>
        <trans-unit id="bac41fa8996acdea0eeac7071146e860d4a300a4" translate="yes" xml:space="preserve">
          <source>Do check &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;other use of JavaScript Destructuring&lt;/a&gt;</source>
          <target state="translated">Verifique &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;otro uso de la Desestructuraci&amp;oacute;n de JavaScript&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8c98edbeeae1cf8ff6b929a6a0f7e4b52a617468" translate="yes" xml:space="preserve">
          <source>Does not check the prototype chain. (since all objects have the 'toString' method, 1 and 2 will return true on it, while 3 can return false on it.)</source>
          <target state="translated">No comprueba la cadena del prototipo.(ya que todos los objetos tienen el método de &quot;toString&quot;,1 y 2 devolverán verdadero en ella,mientras que 3 puede devolver falso en ella).</target>
        </trans-unit>
        <trans-unit id="272b1b749b29175ccd8be91a3cef72f36a2988da" translate="yes" xml:space="preserve">
          <source>EDIT: 12/04/2018 - NOT RELEVANT ANYMORE</source>
          <target state="translated">EDICIÓN:12042018-YA NO ES RELEVANTE</target>
        </trans-unit>
        <trans-unit id="91842c0c3845e129051833509aa3157536fe9516" translate="yes" xml:space="preserve">
          <source>EDIT: What is the reason to assign to a property the &lt;code&gt;undefined&lt;/code&gt; value?</source>
          <target state="translated">EDITAR: &amp;iquest;Cu&amp;aacute;l es la raz&amp;oacute;n para asignar a una propiedad el valor &lt;code&gt;undefined&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="e507eb360663726b7ec803640c593cbacb792539" translate="yes" xml:space="preserve">
          <source>ES6 solution</source>
          <target state="translated">Solución ES6</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Ampliar fragmento</target>
        </trans-unit>
        <trans-unit id="d255f10a635b9aa2777665c01d1e6f11ad8653a0" translate="yes" xml:space="preserve">
          <source>For performance comparison between the methods that are &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;hasOwnProperty&lt;/code&gt; and key is &lt;code&gt;undefined&lt;/code&gt;, see this &lt;a href=&quot;http://jsben.ch/#/WqlIl&quot;&gt;&lt;strong&gt;benchmark&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">Para la comparaci&amp;oacute;n de rendimiento entre los m&amp;eacute;todos que se encuentran, &lt;code&gt;hasOwnProperty&lt;/code&gt; y la clave &lt;code&gt;undefined&lt;/code&gt; est&amp;aacute; definida , consulte este &lt;a href=&quot;http://jsben.ch/#/WqlIl&quot;&gt;&lt;strong&gt;punto de referencia&lt;/strong&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6a51d9e151f799cc8f82b96b8bf564cca524cb7d" translate="yes" xml:space="preserve">
          <source>For that reason, it is much better practice to first use the &lt;code&gt;in&lt;/code&gt; operator and then compare the value that is inside the key once you already know it exists.</source>
          <target state="translated">Por esa raz&amp;oacute;n, es una pr&amp;aacute;ctica mucho mejor usar primero el operador &lt;code&gt;in&lt;/code&gt; y luego comparar el valor que est&amp;aacute; dentro de la clave una vez que ya sabe que existe.</target>
        </trans-unit>
        <trans-unit id="c1b286568b766db19804151d364239b2983a4693" translate="yes" xml:space="preserve">
          <source>For those which have &lt;code&gt;lodash&lt;/code&gt; included in their project:</source>
          <target state="translated">Para aquellos que han incluido &lt;code&gt;lodash&lt;/code&gt; en su proyecto:</target>
        </trans-unit>
        <trans-unit id="b01e8d047367be0b116d5989292452861f000c2d" translate="yes" xml:space="preserve">
          <source>Gets the value at path of object. If the resolved value is undefined,
  the defaultValue is returned in its place.</source>
          <target state="translated">Obtiene el valor en la trayectoria del objeto.Si el valor resuelto no está definido,el valor por defecto se devuelve en su lugar.</target>
        </trans-unit>
        <trans-unit id="dabeae73ffa9b82898fbf2e0ae896b13572bd7b0" translate="yes" xml:space="preserve">
          <source>Here's a helper function I find quite useful</source>
          <target state="translated">Aquí hay una función de ayuda que encuentro bastante útil</target>
        </trans-unit>
        <trans-unit id="64344cbf98de8af9deafcc5544f6215efff6a838" translate="yes" xml:space="preserve">
          <source>How do I check if a particular key exists in a JavaScript object or array?</source>
          <target state="translated">¿Cómo puedo comprobar si una clave en particular existe en un objeto o matriz de JavaScript?</target>
        </trans-unit>
        <trans-unit id="c6ff6c8ba9a89e1910cf47b19f592b919ca2e438" translate="yes" xml:space="preserve">
          <source>How do I check if a particular key exists in a JavaScript object or array?
  If a key doesn't exist and I try to access it, will it return false? Or throw an error?</source>
          <target state="translated">¿Cómo puedo comprobar si una clave en particular existe en un objeto o matriz de JavaScript? Si una clave no existe e intento acceder a ella,¿volverá a ser falsa? ¿O arrojará un error?</target>
        </trans-unit>
        <trans-unit id="3aa399fdccae569ce9bd6caafa430ca0222b02ac" translate="yes" xml:space="preserve">
          <source>If a key doesn't exist, and I try to access it, will it return false? Or throw an error?</source>
          <target state="translated">Si una llave no existe,y trato de acceder a ella,¿volverá falsa? ¿O arrojará un error?</target>
        </trans-unit>
        <trans-unit id="e3aba7203af978b71d93f08471a4c062b1c41459" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;http://underscorejs.org/&quot;&gt;underscore.js&lt;/a&gt; library then object/array operations become simple.</source>
          <target state="translated">Si est&amp;aacute; utilizando la biblioteca &lt;a href=&quot;http://underscorejs.org/&quot;&gt;underscore.js, las&lt;/a&gt; operaciones de objeto / matriz se vuelven simples.</target>
        </trans-unit>
        <trans-unit id="506421cbb0a189ba09225b28b78467347bc22072" translate="yes" xml:space="preserve">
          <source>If you want to check for any key at any depth on an object and account for falsey values consider this line for a utility function:</source>
          <target state="translated">Si quieres comprobar si hay alguna llave a cualquier profundidad en un objeto y tener en cuenta los valores de Falsey considera esta línea para una función de utilidad:</target>
        </trans-unit>
        <trans-unit id="197ebcc04461504aff342802b90c68b67fff9715" translate="yes" xml:space="preserve">
          <source>If you want to check if a key doesn't exist, remember to use parenthesis:</source>
          <target state="translated">Si quieres comprobar si una clave no existe,recuerda usar paréntesis:</target>
        </trans-unit>
        <trans-unit id="4767ea50f8d0dea7df79893a955afb013861529c" translate="yes" xml:space="preserve">
          <source>If you want to check if the object has at least one property in es2015</source>
          <target state="translated">Si quieres comprobar si el objeto tiene al menos una propiedad en es2015</target>
        </trans-unit>
        <trans-unit id="1a6d289d515efa919b3ce78998706215aea08f0b" translate="yes" xml:space="preserve">
          <source>In 'array' world we can look on indexes as some kind of keys. What is surprising the &lt;code&gt;in&lt;/code&gt; operator (which is good choice for object) also works with arrays. The returned value for non-existed key is &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">En el mundo 'array' podemos ver los &amp;iacute;ndices como alg&amp;uacute;n tipo de claves. Lo sorprendente del operador &lt;code&gt;in&lt;/code&gt; (que es una buena opci&amp;oacute;n para el objeto) tambi&amp;eacute;n funciona con matrices. El valor devuelto para la clave no existente &lt;code&gt;undefined&lt;/code&gt; est&amp;aacute; definido</target>
        </trans-unit>
        <trans-unit id="635b76f22d1af237405169ff52f18ea5b7ed34a8" translate="yes" xml:space="preserve">
          <source>In that case, you will have to use &lt;em&gt;hasOwnProperty&lt;/em&gt; or &lt;em&gt;in&lt;/em&gt; operator to know if the key is really there. But, &lt;em&gt;but at what price?&lt;/em&gt;</source>
          <target state="translated">En ese caso, tendr&amp;aacute; que usar &lt;em&gt;hasOwnProperty&lt;/em&gt; o &lt;em&gt;en&lt;/em&gt; operator para saber si la clave est&amp;aacute; realmente all&amp;iacute;. Pero, &lt;em&gt;pero a qu&amp;eacute; precio?&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a59812f97ddc03dd9bb7022b5e6ae1cf75fd5899" translate="yes" xml:space="preserve">
          <source>In your case _.has method can be used. Example:</source>
          <target state="translated">En su caso se puede utilizar el método _.has.Ejemplo:</target>
        </trans-unit>
        <trans-unit id="ace4bca3b2e92937347af125445ffa35cd48f497" translate="yes" xml:space="preserve">
          <source>Is likely testing only object attribute values that are very different from array keys</source>
          <target state="translated">Es probable que probar sólo valores de atributos de objetos que son muy diferentes de las claves de la matriz</target>
        </trans-unit>
        <trans-unit id="fd900217e9a325799924409fce65745b93f07e07" translate="yes" xml:space="preserve">
          <source>It will return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">Volver&amp;aacute; &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="efab43bf9bd925e569fa55a920f20efac0786ae3" translate="yes" xml:space="preserve">
          <source>It's been pretty reliable and works well cross-browser.</source>
          <target state="translated">Ha sido bastante fiable y funciona bien con un navegador cruzado.</target>
        </trans-unit>
        <trans-unit id="a115e1cc35fc96c77cd0dfa0142628a4bee3b3fd" translate="yes" xml:space="preserve">
          <source>Just pass it the key you want to find, and search obj (the object or array) you want to find it in.</source>
          <target state="translated">Sólo pásale la llave que quieres encontrar,y busca el objeto (el objeto o matriz)en el que quieres encontrarlo.</target>
        </trans-unit>
        <trans-unit id="dd830936b2f315c1e71b7c0eb4843062f657ba39" translate="yes" xml:space="preserve">
          <source>New awesome solution with &lt;strong&gt;JavaScript Destructuring&lt;/strong&gt;:</source>
          <target state="translated">Nueva soluci&amp;oacute;n incre&amp;iacute;ble con &lt;strong&gt;JavaScript Destructuring&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="d582670184eb20dfbec6b2b998f2713d8292f0af" translate="yes" xml:space="preserve">
          <source>On the other hand, calling an object method or key will use Javascript [[Get]] mechanism. That is far way faster!</source>
          <target state="translated">Por otro lado,llamar a un método o clave de un objeto usará el mecanismo de Javascript [[Get]].¡Eso es mucho más rápido!</target>
        </trans-unit>
        <trans-unit id="745da0edfda252ba9371e9761d85c7c48246c395" translate="yes" xml:space="preserve">
          <source>One-line example.</source>
          <target state="translated">Un ejemplo de una línea.</target>
        </trans-unit>
        <trans-unit id="b8132bff5731b0efdde9faa2931be30d76521970" translate="yes" xml:space="preserve">
          <source>Or, if you want to particularly test for properties of the object instance (and not inherited properties), use &lt;code&gt;hasOwnProperty&lt;/code&gt;:</source>
          <target state="translated">O, si desea probar particularmente las propiedades de la instancia del objeto (y no las propiedades heredadas), use &lt;code&gt;hasOwnProperty&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="45c3dc1c7731c6185824876ed514e54f71bacb64" translate="yes" xml:space="preserve">
          <source>Reference:</source>
          <target state="translated">Reference:</target>
        </trans-unit>
        <trans-unit id="d4143b60adcc66e93b5641fa050f5ed81f7b6f54" translate="yes" xml:space="preserve">
          <source>Return value as &lt;strong&gt;true&lt;/strong&gt; implies that key exists in the object.</source>
          <target state="translated">El valor de retorno como &lt;strong&gt;verdadero&lt;/strong&gt; implica que la clave existe en el objeto.</target>
        </trans-unit>
        <trans-unit id="6bfe3a0c55e0873dec8f263aaed2bba9ddfd3bc5" translate="yes" xml:space="preserve">
          <source>That question puzzles me. In Javascript, there are at least two references for absent objects to avoid problems like this: &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">Esa pregunta me desconcierta. En Javascript, hay al menos dos referencias de objetos ausentes para evitar problemas como este: &lt;code&gt;null&lt;/code&gt; e &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7fe9ba2a314f95863f81184d3c1efed1b4071915" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://underscorejs.org/#has&quot;&gt;underscore.js&lt;/a&gt; way -</source>
          <target state="translated">La forma de &lt;a href=&quot;http://underscorejs.org/#has&quot;&gt;subrayar.js&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="eb4d6aecd13e672a16a35097398454e1cd50dfcb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://stackoverflow.com/a/1098955/1619432&quot;&gt;accepted answer&lt;/a&gt; refers to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;Object&lt;/a&gt;. Beware using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt; on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array&lt;/a&gt; to find data instead of keys:</source>
          <target state="translated">La &lt;a href=&quot;https://stackoverflow.com/a/1098955/1619432&quot;&gt;respuesta aceptada se&lt;/a&gt; refiere al &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;objeto&lt;/a&gt; . Tenga cuidado al usar el &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in&quot;&gt;operador &lt;code&gt;in&lt;/code&gt; &lt;/a&gt; en &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array&lt;/a&gt; para buscar datos en lugar de claves:</target>
        </trans-unit>
        <trans-unit id="a153cd380c4fb21f0dff2341fcc0edac0aed61c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in&lt;/code&gt; operator will check if the key exists in the object. If you checked if the value was undefined: &lt;code&gt;if (myObj[&quot;key&quot;] === 'undefined')&lt;/code&gt;, you could run into problems because a key could possibly exist in your object with the &lt;code&gt;undefined&lt;/code&gt; value.</source>
          <target state="translated">El operador &lt;code&gt;in&lt;/code&gt; verificar&amp;aacute; si la clave existe en el objeto. Si comprob&amp;oacute; si el valor no estaba definido: &lt;code&gt;if (myObj[&quot;key&quot;] === 'undefined')&lt;/code&gt; , podr&amp;iacute;a encontrarse con problemas porque podr&amp;iacute;a existir una clave en su objeto con el valor &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d5241f8e79bfc2410d2beaaf9730f6e0fc49c440" translate="yes" xml:space="preserve">
          <source>The Property Descriptor type is used to explain the manipulation and reification of named property attributes. Values of the Property Descriptor type are records composed of named fields where each field&amp;rsquo;s name is an attribute name and its value is a corresponding attribute value as specified in 8.6.1. In addition, any field may be present or absent.</source>
          <target state="translated">El tipo de descriptor de propiedad se utiliza para explicar la manipulaci&amp;oacute;n y la reificaci&amp;oacute;n de los atributos de propiedad con nombre. Los valores del tipo Descriptor de propiedad son registros compuestos de campos con nombre donde el nombre de cada campo es un nombre de atributo y su valor es un valor de atributo correspondiente como se especifica en 8.6.1. Adem&amp;aacute;s, cualquier campo puede estar presente o ausente.</target>
        </trans-unit>
        <trans-unit id="cf30e904462e4aae8cdd7b168aacd1ad1e066096" translate="yes" xml:space="preserve">
          <source>The easiest way to check is</source>
          <target state="translated">La forma más fácil de comprobarlo es</target>
        </trans-unit>
        <trans-unit id="eccfaf4f159b6f103e4ed08f52dc3742db4aa864" translate="yes" xml:space="preserve">
          <source>The result was</source>
          <target state="translated">El resultado fue</target>
        </trans-unit>
        <trans-unit id="13f099e05e978962ca2336adeefe3db61eaeaba5" translate="yes" xml:space="preserve">
          <source>The slow and reliable &lt;em&gt;in&lt;/em&gt; operator and &lt;em&gt;hasOwnProperty&lt;/em&gt; method</source>
          <target state="translated">El operador lento y confiable &lt;em&gt;en el&lt;/em&gt; m&amp;eacute;todo &lt;em&gt;hasOwnProperty&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="67aceb7888201fdd507d61a20469d552462e5be5" translate="yes" xml:space="preserve">
          <source>There is a lodash &lt;a href=&quot;https://lodash.com/docs/4.17.4#get&quot;&gt;_.get&lt;/a&gt; method  which tries to get &quot;deep&quot; keys:</source>
          <target state="translated">Hay un m&amp;eacute;todo lodash &lt;a href=&quot;https://lodash.com/docs/4.17.4#get&quot;&gt;_.get&lt;/a&gt; que intenta obtener claves &quot;profundas&quot;:</target>
        </trans-unit>
        <trans-unit id="a7279aec2d48ec0145befa61c75ba5a2e06f1c8d" translate="yes" xml:space="preserve">
          <source>These example can demonstrate the differences between defferent ways. Hope it will help you to pick the right one for your needs:</source>
          <target state="translated">Estos ejemplos pueden demostrar las diferencias entre las diferentes formas.Espero que te ayude a elegir la correcta para tus necesidades:</target>
        </trans-unit>
        <trans-unit id="f2a7ad11aaa38430987a75a278719d32b9fbc4f7" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;keyExists(key, search)&lt;/code&gt; can be used to easily lookup a key within  objects or arrays!</source>
          <target state="translated">&amp;iexcl;Este &lt;code&gt;keyExists(key, search)&lt;/code&gt; se puede usar para buscar f&amp;aacute;cilmente una clave dentro de objetos o matrices!</target>
        </trans-unit>
        <trans-unit id="e217f557ce364dce64998b7b407800bcc32871e5" translate="yes" xml:space="preserve">
          <source>This is probably the best way to check for missing keys.  However, as is pointed out in a comment below, it's theoretically possible that you'd want to have the actual value be &lt;code&gt;undefined&lt;/code&gt;.  I've never needed to do this and can't think of a reason offhand why I'd ever want to, but just for the sake of completeness, you can use the &lt;code&gt;in&lt;/code&gt; operator</source>
          <target state="translated">Esta es probablemente la mejor manera de verificar si faltan claves. Sin embargo, como se se&amp;ntilde;ala en un comentario a continuaci&amp;oacute;n, es te&amp;oacute;ricamente posible que desee que el valor real sea &lt;code&gt;undefined&lt;/code&gt; . Nunca he necesitado hacer esto y no puedo pensar en una raz&amp;oacute;n por la cual quisiera hacerlo, pero solo por razones de integridad, puede usar el operador &lt;code&gt;in&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c8e3604f695a9f8b1fa5584d30b0d91c334f5116" translate="yes" xml:space="preserve">
          <source>This solution works best for me because I use typescript, and using strings like so &lt;code&gt;'foo' in obj&lt;/code&gt; or &lt;code&gt;obj.hasOwnProperty('foo')&lt;/code&gt; 
  to check whether a key exists or not does not provide me with intellisense.</source>
          <target state="translated">Esta soluci&amp;oacute;n funciona mejor para m&amp;iacute; porque uso el mecanografiado, y el uso de cadenas como &lt;code&gt;'foo' in obj&lt;/code&gt; u &lt;code&gt;obj.hasOwnProperty('foo')&lt;/code&gt; para verificar si existe una clave o no me proporciona inteligencia.</target>
        </trans-unit>
        <trans-unit id="0b44bcd403c32099bee3e6a3d6ebd539f0d28337" translate="yes" xml:space="preserve">
          <source>This will effectively check if that key, however &lt;strong&gt;deep&lt;/strong&gt;, is defined and &lt;em&gt;will not&lt;/em&gt; throw an error which might harm the flow of your program if that key is not defined.</source>
          <target state="translated">Esto verificar&amp;aacute; efectivamente si esa clave, por &lt;strong&gt;profunda que sea&lt;/strong&gt; , est&amp;eacute; definida y &lt;em&gt;no&lt;/em&gt; arrojar&amp;aacute; un error que podr&amp;iacute;a da&amp;ntilde;ar el flujo de su programa si esa clave no est&amp;aacute; definida.</target>
        </trans-unit>
        <trans-unit id="04a17a364ca132f362dfda3ce086d3904a604016" translate="yes" xml:space="preserve">
          <source>Three ways to check if a property is present in a javascript object:</source>
          <target state="translated">Tres formas de comprobar si una propiedad está presente en un objeto javascript:</target>
        </trans-unit>
        <trans-unit id="f99da6036e454edfd993c0213467c52e9cfe7c5f" translate="yes" xml:space="preserve">
          <source>To test existing elements in an Array: &lt;a href=&quot;https://stackoverflow.com/questions/143847/best-way-to-find-an-item-in-a-javascript-array&quot;&gt;Best way to find if an item is in a JavaScript array?&lt;/a&gt;</source>
          <target state="translated">Para probar elementos existentes en una matriz: &amp;iquest;La &lt;a href=&quot;https://stackoverflow.com/questions/143847/best-way-to-find-an-item-in-a-javascript-array&quot;&gt;mejor manera de encontrar si un elemento est&amp;aacute; en una matriz de JavaScript?&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d3123a22dd221942534d6208cb1e60c6c71d8ffa" translate="yes" xml:space="preserve">
          <source>Using &lt;em&gt;in&lt;/em&gt; operator</source>
          <target state="translated">Utilizando &lt;em&gt;en&lt;/em&gt; operador</target>
        </trans-unit>
        <trans-unit id="f86614f10a31f1f570d64c3b5a17bf9cca50d526" translate="yes" xml:space="preserve">
          <source>Using hasOwnProperty</source>
          <target state="translated">Usando hasOwnProperty</target>
        </trans-unit>
        <trans-unit id="2eec541a006f6b09e686f7436683abe3e6d845ad" translate="yes" xml:space="preserve">
          <source>We can use - &lt;code&gt;hasOwnProperty.call(obj, key);&lt;/code&gt;</source>
          <target state="translated">Podemos usar - &lt;code&gt;hasOwnProperty.call(obj, key);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a067fe8a55b6144d51f2d530845ff0dc8ca6d704" translate="yes" xml:space="preserve">
          <source>While this doesn't necessarily check if a key exists, it does check for the truthiness of a value. Which &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; fall under.</source>
          <target state="translated">Si bien esto no necesariamente verifica si existe una clave, s&amp;iacute; verifica la veracidad de un valor. Que &lt;code&gt;undefined&lt;/code&gt; y &lt;code&gt;null&lt;/code&gt; caen bajo.</target>
        </trans-unit>
        <trans-unit id="457bff231268164f32510ef666da9107b349ede2" translate="yes" xml:space="preserve">
          <source>Will convert value to bool. returns TRUE for all but the 'false' value</source>
          <target state="translated">Convertirá el valor en bool.Devuelve VERDADERO para todos menos el valor 'falso'.</target>
        </trans-unit>
        <trans-unit id="2fed6708a323c378f4a3a12917f1c5363d03d335" translate="yes" xml:space="preserve">
          <source>Will return true if the property exists, no matter its value (even empty)</source>
          <target state="translated">Volverá verdadero si la propiedad existe,sin importar su valor (incluso vacío)</target>
        </trans-unit>
        <trans-unit id="eac56352850ccb3acbc7e16d5bf1803ccf3abb1e" translate="yes" xml:space="preserve">
          <source>You should instead use the &lt;code&gt;in&lt;/code&gt; operator:</source>
          <target state="translated">En su lugar, debe usar el operador &lt;code&gt;in&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="fc38e4aeb7a5b66c5616d1fa21a41af646fb7594" translate="yes" xml:space="preserve">
          <source>benchmark</source>
          <target state="translated">benchmark</target>
        </trans-unit>
        <trans-unit id="07d20acd3d6d3a65dab86aac1963f8fc7266dde3" translate="yes" xml:space="preserve">
          <source>for example:</source>
          <target state="translated">por ejemplo:</target>
        </trans-unit>
        <trans-unit id="a1389338d08e6248cae8a563fa79ff7a162f904f" translate="yes" xml:space="preserve">
          <source>quick answer</source>
          <target state="translated">respuesta rápida</target>
        </trans-unit>
        <trans-unit id="2591d4a035f0e656adc70efd7854b78cb4e0c7b1" translate="yes" xml:space="preserve">
          <source>returns &lt;strong&gt;false&lt;/strong&gt;</source>
          <target state="translated">devuelve &lt;strong&gt;falso&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9faec3bddf2b4f017257e503cfb75e48f2fc3027" translate="yes" xml:space="preserve">
          <source>returns &lt;strong&gt;true&lt;/strong&gt;</source>
          <target state="translated">devuelve &lt;strong&gt;verdadero&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ad0b98958a31a215cba31be4bf81cc9aebb12feb" translate="yes" xml:space="preserve">
          <source>so, I tell you...</source>
          <target state="translated">así que,te digo...</target>
        </trans-unit>
        <trans-unit id="0a9c48942216c4967e64d4915aacd84115cacc3b" translate="yes" xml:space="preserve">
          <source>using &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/pl/docs/Web/JavaScript/Referencje/Obiekty/Array/some&quot;&gt;&lt;code&gt;Array#some&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;. It will return &lt;strong&gt;true&lt;/strong&gt; if given key exists in the object or &lt;strong&gt;false&lt;/strong&gt; if it doesn't.</source>
          <target state="translated">usando &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/pl/docs/Web/JavaScript/Referencje/Obiekty/Array/some&quot;&gt; &lt;code&gt;Array#some&lt;/code&gt; &lt;/a&gt;&lt;/strong&gt; y &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/a&gt;&lt;/strong&gt; . Devolver&amp;aacute; &lt;strong&gt;verdadero&lt;/strong&gt; si la clave dada existe en el objeto o &lt;strong&gt;falso&lt;/strong&gt; si no existe.</target>
        </trans-unit>
        <trans-unit id="16b8e8b30c3eb529dc4b9960c99b9ecbb67dd4c9" translate="yes" xml:space="preserve">
          <source>vanila js</source>
          <target state="translated">vanila js</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
