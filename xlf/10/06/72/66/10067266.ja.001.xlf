<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/10067266">
    <body>
      <group id="10067266">
        <trans-unit id="29fd3f854b887de70c267ec7c5f6d62874f253e1" translate="yes" xml:space="preserve">
          <source>(Of course, this also happens if the URL is in an unquoted variable.) For a static string, single quotes make the most sense, although any form of quoting or escaping works here.</source>
          <target state="translated">(もちろん、これは URL が引用符で囲まれていない変数にある場合にも起こります。)静的な文字列の場合は、シングルクォートが最も意味を持ちますが、ここではどのような形式の引用符やエスケープも機能します。</target>
        </trans-unit>
        <trans-unit id="e75e43676033b8825952394396f0bdb6b34f9132" translate="yes" xml:space="preserve">
          <source>(The loop is completely superfluous in the latter example; &lt;code&gt;printf&lt;/code&gt; specifically works fine with multiple arguments. &lt;code&gt;stat&lt;/code&gt; too.  But looping over a wildcard match is a common problem, and frequently done incorrectly.)</source>
          <target state="translated">（後者の例ではループは完全に不要です &lt;code&gt;printf&lt;/code&gt; 特に複数の引数で正常に機能します &lt;code&gt;stat&lt;/code&gt; も同様です。ただし、ワイルドカードの一致でのループは一般的な問題であり、しばしば正しく行われません。）</target>
        </trans-unit>
        <trans-unit id="b3b5b7a51be079d9e32c2b061011fd5033a272d3" translate="yes" xml:space="preserve">
          <source>(The loop only runs once, over the literal single-quoted string.)</source>
          <target state="translated">(ループはリテラルのシングルクォート文字列に対して一度だけ実行されます)</target>
        </trans-unit>
        <trans-unit id="a62e7a96f381e21c77f5f03189a31cb8761fb2d2" translate="yes" xml:space="preserve">
          <source>(The loop only runs once, over the single, quoted string.)</source>
          <target state="translated">(ループは引用符で囲まれた単一の文字列に対して一度だけ実行されます)</target>
        </trans-unit>
        <trans-unit id="e14130d7ea68f1fbe59aa0abc0d1fa4083bc5b1b" translate="yes" xml:space="preserve">
          <source>(There is no file named &lt;code&gt;$pattern&lt;/code&gt;, either!)</source>
          <target state="translated">（ &lt;code&gt;$pattern&lt;/code&gt; という名前のファイルもありません！）</target>
        </trans-unit>
        <trans-unit id="d675d362f86f01512076207502a183a15503624a" translate="yes" xml:space="preserve">
          <source>(There is no file named literally &lt;code&gt;file*.txt&lt;/code&gt;.)</source>
          <target state="translated">（文字通り &lt;code&gt;file*.txt&lt;/code&gt; という名前のファイルはありません。）</target>
        </trans-unit>
        <trans-unit id="29898fff78243cab08dc3cc8940f533c439e0d0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$?&lt;/code&gt; doesn't need quotes since it's a numeric value. Whether &lt;code&gt;$URL&lt;/code&gt; needs it depends on what you allow in there and whether you still want an argument if it's empty.</source>
          <target state="translated">&lt;code&gt;$?&lt;/code&gt; 数値なので、引用符は必要ありません。 &lt;code&gt;$URL&lt;/code&gt; がそれを必要とするかどうかは 、そこで許可するものと、空の場合でも引数が必要かどうかによって異なります。</target>
        </trans-unit>
        <trans-unit id="27df154497c68d91d87683896cfc44fea7cea1e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Double quotes&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;二重引用符&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5c3d140c8e464f134cec3b0eebd38bf683f55d62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Examples&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Examples&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c5864f833f59c5a8a0137c4d2afe109235f6656" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No quotes&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;引用なし&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b557581d58744e25e1f1ff2a2f625fe4c2d3b5ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Single quotes&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;単一引用符&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c13ac318dfb25d9609eaabd5136933f8f64cd210" translate="yes" xml:space="preserve">
          <source>A variable containing a list of tokens to loop over or a wildcard to expand is less frequently seen, so we sometimes abbreviate to &quot;quote everything unless you know precisely what you are doing&quot;.</source>
          <target state="translated">ループオーバーするトークンのリストを含む変数や、展開するワイルドカードを含む変数はあまり見かけないので、「何をしているのか正確にわからない限り、すべてを引用する」と略すこともあります。</target>
        </trans-unit>
        <trans-unit id="3222f0efe19396bc34dc4ae8d1cb67a63216d6c6" translate="yes" xml:space="preserve">
          <source>And if so, why?</source>
          <target state="translated">そうだとしたら、なぜ?</target>
        </trans-unit>
        <trans-unit id="3785a2a188704d23953a5659e27c337b1d1de4b3" translate="yes" xml:space="preserve">
          <source>As an aside, scripts &lt;a href=&quot;http://mywiki.wooledge.org/ParsingLs&quot;&gt;should usually not use &lt;code&gt;ls&lt;/code&gt; for anything.&lt;/a&gt;  To expand a wildcard, just ... use it.</source>
          <target state="translated">余談ですが、スクリプト&lt;a href=&quot;http://mywiki.wooledge.org/ParsingLs&quot;&gt;は通常 &lt;code&gt;ls&lt;/code&gt; を使用しないでください。&lt;/a&gt; ワイルドカードを展開するには、単に...使用します。</target>
        </trans-unit>
        <trans-unit id="0a3b82194ee5f88012f978f13a9f48b8293490ae" translate="yes" xml:space="preserve">
          <source>Bash parameter expansion (&lt;code&gt;&quot;${filename##*/}&quot;&lt;/code&gt;)</source>
          <target state="translated">Bashパラメータ展開（ &lt;code&gt;&quot;${filename##*/}&quot;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="57758dc45638caa5df2bbed2cb6a9858858010c4" translate="yes" xml:space="preserve">
          <source>By contrast:</source>
          <target state="translated">対照的に</target>
        </trans-unit>
        <trans-unit id="b04f4a7fc53a3b1cd276b55f41b73ecb06f580ea" translate="yes" xml:space="preserve">
          <source>Could someone tell me whether or not I should wrap quotes around variables in a shell script?</source>
          <target state="translated">誰かシェルスクリプトで変数を引用符で囲むべきかどうか教えてください。</target>
        </trans-unit>
        <trans-unit id="62c11a34294e0f0be58f971653b654ab56174a59" translate="yes" xml:space="preserve">
          <source>Difference between single and double quotes in Bash</source>
          <target state="translated">Bashでのシングルクォートとダブルクォートの違い</target>
        </trans-unit>
        <trans-unit id="d17352112f221c89ded84084a22cdb430e8a3ce0" translate="yes" xml:space="preserve">
          <source>Double quotes are suitable when variable interpolation is required.  With suitable adaptations, it is also a good workaround when you need single quotes in the string.  (There is no straightforward way to escape a single quote between single quotes, because there is no escape mechanism inside single quotes -- if there was, they would not quote completely verbatim.)</source>
          <target state="translated">二重引用符は、可変補間が必要な場合に適しています。また、文字列の中に単一引用符が必要な場合にも、適切に適応させれば良い回避策となります。(シングルクォートの間にシングルクォートをエスケープする簡単な方法はありません。シングルクォートの内部にはエスケープ機構がないからです。)</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="c9cb1bd3a0f4351c0c8efb774a478ff510fec2bf" translate="yes" xml:space="preserve">
          <source>For example, is the following correct:</source>
          <target state="translated">例えば、次のようなものが正しいでしょうか。</target>
        </trans-unit>
        <trans-unit id="151056fa0605d3905394b3928a4f6252ee33612c" translate="yes" xml:space="preserve">
          <source>For using the variables in the shell script use &quot; &quot; quoted variables as the quoted one means that the variable may contain spaces or special character which won't affect the execution of your shell script. Else if you are sure of not having any spaces or special character in your variable name then you may use them without &quot; &quot;.</source>
          <target state="translated">シェルスクリプトで変数を使用する場合は、&quot; &quot;で囲んだ変数を使用してください。引用符で囲んだ変数は、その変数にスペースや特殊文字が含まれていてもシェルスクリプトの実行に影響を及ぼさないことを意味します。もし、変数名にスペースや特殊文字が含まれていないことが確実であれば、&quot; &quot;を使わずに変数を使用しても構いません。</target>
        </trans-unit>
        <trans-unit id="dad12a999af9dd77c56aef7ff53113954aad61e3" translate="yes" xml:space="preserve">
          <source>General rule: quote it if it can either be empty or contain spaces (or any whitespace really) or special characters (wildcards). Not quoting strings with spaces often leads to the shell breaking apart a single argument into many.</source>
          <target state="translated">一般的なルール:空であるか、スペース(または空白)や特殊文字(ワイルドカード)が含まれている場合は引用符で囲みます。スペースを含む文字列をクォートしないと、シェルが一つの引数を多くの引数に分解してしまうことがよくあります。</target>
        </trans-unit>
        <trans-unit id="f5a242201e6b18c260832b69054eb43c8fbc2aba" translate="yes" xml:space="preserve">
          <source>Here is a three-point formula for quotes in general:</source>
          <target state="translated">一般的な相場の3点式をご紹介します。</target>
        </trans-unit>
        <trans-unit id="d089f893e07ab81bae1415dc085018dee0e09dbc" translate="yes" xml:space="preserve">
          <source>I do use &lt;code&gt;$var&lt;/code&gt; as a simple way to join lines:</source>
          <target state="translated">行を結合する簡単な方法として &lt;code&gt;$var&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="d5e34758580d5c070bff9a648e9fdbe239ea46e4" translate="yes" xml:space="preserve">
          <source>I generally use quoted like &lt;code&gt;&quot;$var&quot;&lt;/code&gt; for safe, unless I am sure that &lt;code&gt;$var&lt;/code&gt; does not contain space.</source>
          <target state="translated">&lt;code&gt;$var&lt;/code&gt; スペースが含まれていないことが確実でない限り、私は通常、安全のために &lt;code&gt;&quot;$var&quot;&lt;/code&gt; ような引用符を使用します。</target>
        </trans-unit>
        <trans-unit id="06b17da92223ef3ce239ff6ab88770fe677ad1de" translate="yes" xml:space="preserve">
          <source>I tend to always quote strings just out of habit since it's safer that way.</source>
          <target state="translated">その方が安全なので、私はいつも癖で文字列を引用する傾向があります。</target>
        </trans-unit>
        <trans-unit id="ec439701c2466909be80a27184c5571e88afefb3" translate="yes" xml:space="preserve">
          <source>In contexts where we are absolutely sure that there are no word splitting or globbing issues or we &lt;em&gt;do want word splitting and globbing&lt;/em&gt;.</source>
          <target state="translated">単語の分割やグロビングの問題がないことが確実であるか、単語の分割やグロビングが必要な場合。</target>
        </trans-unit>
        <trans-unit id="3b59209984bb16c283fcc6e7768175ac0fd17063" translate="yes" xml:space="preserve">
          <source>In contexts where we want to suppress word splitting and globbing. Also in contexts where we want the literal to be treated as a string, not a regex.</source>
          <target state="translated">単語の分割やグロブ化を抑制したい場合に使用します。また、リテラルを正規表現ではなく文字列として扱いたい場合にも使用します。</target>
        </trans-unit>
        <trans-unit id="f939321e88ed3abfa39a256aa72ba3960b7cb7a2" translate="yes" xml:space="preserve">
          <source>In more concrete terms, anything containing a filename should usually be quoted (because filenames can contain whitespace and other shell metacharacters).  Anything containing a URL should usually be quoted (because many URLs contain shell metacharacters like &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;&amp;amp;&lt;/code&gt;).  Anything containing a regex should usually be quoted (ditto ditto).  Anything containing significant whitespace other than single spaces between non-whitespace characters needs to be quoted (because otherwise, the shell will munge the whitespace into, effectively, single spaces, and trim any leading or trailing whitespace).</source>
          <target state="translated">具体的には、ファイル名を含むものは通常引用符で囲む必要があります（ファイル名には空白やその他のシェルメタ文字を含めることができるため）。 通常、URLを含むものはすべて引用符で囲む必要があります（多くのURLには &lt;code&gt;?&lt;/code&gt; や &lt;code&gt;&amp;amp;&lt;/code&gt; などのシェルメタ文字が含まれているため）。 正規表現を含むものは通常、引用符で囲む必要があります（同上）。 空白以外の文字間の単一の空白以外の重要な空白を含むものは引用符で囲む必要があります（そうしないと、シェルは空白を効果的に単一の空白に変換し、先頭または末尾の空白を削除します）。</target>
        </trans-unit>
        <trans-unit id="59a3873fba3332922756bc32b3c13b44d0217b04" translate="yes" xml:space="preserve">
          <source>In short, quote everything where you do not require the shell to perform token splitting and wildcard expansion.</source>
          <target state="translated">要するに、シェルがトークン分割やワイルドカード展開を行う必要がない場合は、すべて引用符で囲んでください。</target>
        </trans-unit>
        <trans-unit id="f4d6c9aa733db1b4d38cbcf25cc20311f87dd5bd" translate="yes" xml:space="preserve">
          <source>In string literals where we want to suppress interpolation and special treatment of backslashes. In other words, situations where using double quotes would be inappropriate.</source>
          <target state="translated">文字列リテラルにおいて、補間やバックスラッシュの特別な扱いを抑制したい場合に使用します。言い換えれば、二重引用符の使用が不適切な場合です。</target>
        </trans-unit>
        <trans-unit id="84af93e8bce1ae5fb2260de3492df002a2a4f03c" translate="yes" xml:space="preserve">
          <source>No quotes are suitable when you specifically require the shell to perform token splitting and/or wildcard expansion.</source>
          <target state="translated">シェルがトークン分割やワイルドカード展開を行う必要がある場合は、引用符は使用しません。</target>
        </trans-unit>
        <trans-unit id="9fa884c8c5bdc62d4775d1d0d104d5d6c681dd89" translate="yes" xml:space="preserve">
          <source>Quotes and escaping - Bash Hackers' Wiki</source>
          <target state="translated">引用と逃避-Bash Hackers' Wiki</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="bcabae38fbf5e1055fdfb65c2272617889d7c092" translate="yes" xml:space="preserve">
          <source>Single quotes protect the text between them verbatim.  It is the proper tool when you need to ensure that the shell does not touch the string at all.  Typically, it is the quoting mechanism of choice when you do not require variable interpolation.</source>
          <target state="translated">単一引用符は、それらの間のテキストを逐語的に保護します。シェルが文字列に全く触れないようにする必要がある場合に適したツールです。一般的に、可変補間を必要としない場合には、これは引用符のメカニズムとして選択されます。</target>
        </trans-unit>
        <trans-unit id="2e161335e1f8eeaacb87546a6509dbdaab9d2fe2" translate="yes" xml:space="preserve">
          <source>The last example also suggests another useful concept, which I like to call &quot;seesaw quoting&quot;. If you need to mix single and double quotes, you can use them adjacent to each other. For example, the following quoted strings</source>
          <target state="translated">最後の例は、私が「シーソー引用」と呼んでいるもう一つの便利な概念を示唆しています。シングルクォートとダブルクォートを混在させる必要がある場合は、隣接して使用することができます。例えば、以下の引用符で囲まれた文字列</target>
        </trans-unit>
        <trans-unit id="9e76dcfe4eb30da618b643dcc3d5d0d277cf14c1" translate="yes" xml:space="preserve">
          <source>This isn't awfully legible, but it's a common technique and thus good to know.</source>
          <target state="translated">これはあまり読みやすくはありませんが、一般的なテクニックなので、知っておくと良いでしょう。</target>
        </trans-unit>
        <trans-unit id="5572ec42cf62f2e7a9cd4ada274dc621586474d2" translate="yes" xml:space="preserve">
          <source>Token splitting;</source>
          <target state="translated">トークン分割。</target>
        </trans-unit>
        <trans-unit id="b4e32ab8b1dec3cfd10f9a7c2386e171cf06f28b" translate="yes" xml:space="preserve">
          <source>Values which are not variables basically follow the same rules, though you could then also escape any metacharacters instead of quoting them. For a common example, a URL with a &lt;code&gt;&amp;amp;&lt;/code&gt; in it will be parsed by the shell as a background command unless the metacharacter is escaped or quoted:</source>
          <target state="translated">変数ではない値は基本的に同じルールに従いますが、メタ文字を引用する代わりにエスケープすることもできます。 一般的な例として、メタ文字がエスケープまたは引用符で囲まれていない限り、 &lt;code&gt;&amp;amp;&lt;/code&gt; を含むURLはシェルによってバックグラウンドコマンドとして解析されます。</target>
        </trans-unit>
        <trans-unit id="d0a268b7f726857d85b69c3da170c0e07d632e94" translate="yes" xml:space="preserve">
          <source>What are the special dollar sign shell variables?</source>
          <target state="translated">特殊なドル記号シェル変数とは?</target>
        </trans-unit>
        <trans-unit id="f53c17e29d0f0b4bf9ec0df6f70ec391904d6877" translate="yes" xml:space="preserve">
          <source>When is double quoting necessary?</source>
          <target state="translated">ダブルクォートが必要なのはいつですか?</target>
        </trans-unit>
        <trans-unit id="c2c0d9510460feeeeb5e7d81b6f01442f6bb1b61" translate="yes" xml:space="preserve">
          <source>When to wrap quotes around a shell variable</source>
          <target state="translated">シェル変数を引用符で囲む場合</target>
        </trans-unit>
        <trans-unit id="aba4621454c4be08c79d5714683b0614786c9e85" translate="yes" xml:space="preserve">
          <source>When you know that a variable can only contain a value which contains no shell metacharacters, quoting is optional.  Thus, an unquoted &lt;code&gt;$?&lt;/code&gt; is basically fine, because this variable can only ever contain a single number.  However, &lt;code&gt;&quot;$?&quot;&lt;/code&gt; is also correct, and recommended for general consistency and correctness (though this is my personal recommendation, not a widely recognized policy).</source>
          <target state="translated">変数にシェルのメタ文字を含まない値のみを含めることができることがわかっている場合、引用符は省略可能です。 したがって、引用符で囲まれていない &lt;code&gt;$?&lt;/code&gt; この変数は1つの数値しか含むことができないため、基本的には問題ありません。 ただし、 &lt;code&gt;&quot;$?&quot;&lt;/code&gt; も正しく、一般的な一貫性と正確さのために推奨されています（これは私の個人的な推奨事項であり、広く認知されているポリシーではありません）。</target>
        </trans-unit>
        <trans-unit id="4fa8325b049d6a079d3e5f8128091f49749ffbd7" translate="yes" xml:space="preserve">
          <source>Wildcard expansion:</source>
          <target state="translated">ワイルドカード展開。</target>
        </trans-unit>
        <trans-unit id="85ad4c94f8320e804977d9adc1bae6f86de1921a" translate="yes" xml:space="preserve">
          <source>around standard numeric variables (&lt;code&gt;$$&lt;/code&gt;, &lt;code&gt;$?&lt;/code&gt;, &lt;code&gt;$#&lt;/code&gt; etc.)</source>
          <target state="translated">標準数値変数の周り（ &lt;code&gt;$$&lt;/code&gt; 、 &lt;code&gt;$?&lt;/code&gt; 、 &lt;code&gt;$#&lt;/code&gt; など）</target>
        </trans-unit>
        <trans-unit id="9348a580f1e89ae695aee7326f94273b8c218efc" translate="yes" xml:space="preserve">
          <source>can be pasted together back to back, forming a single long string after tokenization and quote removal.</source>
          <target state="translated">は、トークン化と引用符除去の後に、1つの長い文字列を形成するために、後ろから後ろに貼り付けることができます。</target>
        </trans-unit>
        <trans-unit id="7eca7cf51e8bce5bf586b8b2a42970e21dce9728" translate="yes" xml:space="preserve">
          <source>command names and arguments that have whitespace in them</source>
          <target state="translated">ホワイトスペースを含むコマンド名と引数</target>
        </trans-unit>
        <trans-unit id="1c92a162d04b1909da4b43f55844bab9f286483e" translate="yes" xml:space="preserve">
          <source>command substitutions (&lt;code&gt;&quot;$(ls)&quot;&lt;/code&gt;, &lt;code&gt;&quot;`ls`&quot;&lt;/code&gt;)</source>
          <target state="translated">コマンド置換（ &lt;code&gt;&quot;$(ls)&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;`ls`&quot;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="cc7c42e3356a925dec68daa8d37620f9445d8fc3" translate="yes" xml:space="preserve">
          <source>echo &quot;$url name&quot;  --  ( Cannot be used at such situations so take precaution before using it )</source>
          <target state="translated">echo &quot;$url名&quot; --(こういう時には使えないので注意してください)</target>
        </trans-unit>
        <trans-unit id="99b231f14cbc77242a56e3332e58018f67ab0832" translate="yes" xml:space="preserve">
          <source>echo &quot;$url name&quot;  -- ( Can be used at all times )</source>
          <target state="translated">echo &quot;$url名&quot; --(いつでも使用可能)</target>
        </trans-unit>
        <trans-unit id="4eb1a73b2bfdcb3cfef0c6c93b604815ec5303d7" translate="yes" xml:space="preserve">
          <source>globs where directory path or file name part includes spaces (&lt;code&gt;&quot;/my dir/&quot;*&lt;/code&gt;)</source>
          <target state="translated">ディレクトリパスまたはファイル名の部分にスペースが含まれるグロブ（ &lt;code&gt;&quot;/my dir/&quot;*&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="431657c47eea42a005d52a4986263ae27098fba8" translate="yes" xml:space="preserve">
          <source>in arithmetic contexts like &lt;code&gt;((count++))&lt;/code&gt;, &lt;code&gt;&quot;${arr[idx]}&quot;&lt;/code&gt;, &lt;code&gt;&quot;${string:start:length}&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;((count++))&lt;/code&gt; 、 &lt;code&gt;&quot;${arr[idx]}&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;${string:start:length}&quot;&lt;/code&gt; ような算術コンテキスト</target>
        </trans-unit>
        <trans-unit id="00c8bf297bc8ae6bd9a198204ec1be2d51af7f94" translate="yes" xml:space="preserve">
          <source>inside &lt;code&gt;[[ ]]&lt;/code&gt; expression which is free from word splitting and globbing issues (this is a matter of style and opinions can vary widely)</source>
          <target state="translated">内部 &lt;code&gt;[[ ]]&lt;/code&gt; 式（単語の分割やグロビングの問題がない）（これはスタイルの問題であり、意見は大きく異なる場合があります）</target>
        </trans-unit>
        <trans-unit id="c4d6e9627c34eb58a1eea6d1992d6b74937dfd97" translate="yes" xml:space="preserve">
          <source>literal strings that need interpolation to be suppressed ( &lt;code&gt;'Really costs $$!'&lt;/code&gt;, &lt;code&gt;'just a backslash followed by a t: \t'&lt;/code&gt;)</source>
          <target state="translated">補間を抑制する必要のあるリテラル文字列（ &lt;code&gt;'Really costs $$!'&lt;/code&gt; 、 &lt;code&gt;'just a backslash followed by a t: \t'&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="5acf883ec1db9dead0c49352f4358c26aeb815fe" translate="yes" xml:space="preserve">
          <source>literal strings with whitespace (&lt;code&gt;&quot;StackOverflow rocks!&quot;&lt;/code&gt;, &lt;code&gt;&quot;Steve's Apple&quot;&lt;/code&gt;)</source>
          <target state="translated">空白を含むリテラル文字列（ &lt;code&gt;&quot;StackOverflow rocks!&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;Steve's Apple&quot;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="1190a37ac3e7e62b6dc2927f0c581dd1b0cc2c4a" translate="yes" xml:space="preserve">
          <source>regex literals that need interpolation to be suppressed</source>
          <target state="translated">抑圧するために補間を必要とする正規表現リテラル</target>
        </trans-unit>
        <trans-unit id="7afcbc7133a9bfa9f7695cf3ed6ea8f923559126" translate="yes" xml:space="preserve">
          <source>to protect double quotes (&lt;code&gt;'The &quot;crux&quot;'&lt;/code&gt;)</source>
          <target state="translated">二重引用符を保護する（ &lt;code&gt;'The &quot;crux&quot;'&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="5a427cc565039cdb9848ceddca07212cb2ac6aa5" translate="yes" xml:space="preserve">
          <source>to protect single quotes (&lt;code&gt;&quot;single'quote'delimited'string&quot;&lt;/code&gt;)</source>
          <target state="translated">単一引用符を保護する（ &lt;code&gt;&quot;single'quote'delimited'string&quot;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="88e68764b2cd68e45dbca11e7896feabad14a64e" translate="yes" xml:space="preserve">
          <source>use shell quoting for literals involving special characters (&lt;code&gt;$'\n\t'&lt;/code&gt;)</source>
          <target state="translated">特殊文字を含むリテラル（ &lt;code&gt;$'\n\t'&lt;/code&gt; ）にはシェル引用を使用します</target>
        </trans-unit>
        <trans-unit id="054395cc1a9331195a21aa9529f181c98fef1dc2" translate="yes" xml:space="preserve">
          <source>use shell quoting where we need to protect several single and double quotes (&lt;code&gt;$'{&quot;table&quot;: &quot;users&quot;, &quot;where&quot;: &quot;first_name&quot;=\'Steve\'}'&lt;/code&gt;)</source>
          <target state="translated">複数の単一引用符と二重引用符を保護する必要がある場合は、シェル引用を使用します（ &lt;code&gt;$'{&quot;table&quot;: &quot;users&quot;, &quot;where&quot;: &quot;first_name&quot;=\'Steve\'}'&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="cef7889538529bccee6ed683f5e9ceaa3cc8a566" translate="yes" xml:space="preserve">
          <source>variable expansions (&lt;code&gt;&quot;$var&quot;&lt;/code&gt;, &lt;code&gt;&quot;${arr[@]}&quot;&lt;/code&gt;)</source>
          <target state="translated">変数展開（ &lt;code&gt;&quot;$var&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;${arr[@]}&quot;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="96f338e51dda580c323e3544dc476fee880b6a1a" translate="yes" xml:space="preserve">
          <source>where we want &lt;code&gt;~&lt;/code&gt; to be interpreted as &lt;code&gt;$HOME&lt;/code&gt; (&lt;code&gt;~/&quot;some dir&quot;&lt;/code&gt; but not &lt;code&gt;&quot;~/some dir&quot;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;~&lt;/code&gt; を &lt;code&gt;$HOME&lt;/code&gt; として解釈したい場合（ &lt;code&gt;~/&quot;some dir&quot;&lt;/code&gt; ではなく &lt;code&gt;&quot;~/some dir&quot;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="e8a753b52738ba5d0807eef6dbde281e8f3d225e" translate="yes" xml:space="preserve">
          <source>where we want globbing (&lt;code&gt;for txtfile in *.txt; do ...&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;for txtfile in *.txt; do ...&lt;/code&gt; 必要な場所（ * .txtのtxtfileの場合、実行... ）</target>
        </trans-unit>
        <trans-unit id="f673e3859c82d5187c762a06882bc0f49d37ddef" translate="yes" xml:space="preserve">
          <source>where we want word splitting (&lt;code&gt;for word in $words&lt;/code&gt;)</source>
          <target state="translated">単語分割が必要な場所（ &lt;code&gt;for word in $words&lt;/code&gt; ）</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
