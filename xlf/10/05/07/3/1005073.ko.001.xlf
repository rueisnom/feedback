<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/1005073">
    <body>
      <group id="1005073">
        <trans-unit id="56ec0b1a7fd14df4b96fb67153c52ba1add9abdb" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;ll&lt;/code&gt;&quot; stands for &quot;literal list&quot;.</source>
          <target state="translated">&quot; &lt;code&gt;ll&lt;/code&gt; &quot;은 &quot;literal list&quot;를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2cda416852be201e905e8bdba5fd3fbb00ce251f" translate="yes" xml:space="preserve">
          <source>(Should be a comment, but too long, so new reply).  As others have mentioned, the &lt;code&gt;Arrays.asList&lt;/code&gt; method is fixed size, but that's not the only issue with it.  It also doesn't handle inheritance very well.  For instance, suppose you have the following:</source>
          <target state="translated">(댓글이지만 너무 길어서 새로운 답글이어야 함). 다른 사람들이 언급했듯이 &lt;code&gt;Arrays.asList&lt;/code&gt; 메서드는 고정 크기이지만 이것이 유일한 문제는 아닙니다. 또한 상속을 잘 처리하지 못합니다. 예를 들어 다음이 있다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="64eb86db4b22824230f5e6f0e811018032d4b628" translate="yes" xml:space="preserve">
          <source>(You probably don't.)</source>
          <target state="translated">(아마도 아닐 것입니다.)</target>
        </trans-unit>
        <trans-unit id="6cab0ddd87f0d3c319929df63d5236ca0dd5da4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List.of&lt;/code&gt; is already short enough and reads well.</source>
          <target state="translated">&lt;code&gt;List.of&lt;/code&gt; 는 이미 충분히 짧고 잘 읽 힙니다.</target>
        </trans-unit>
        <trans-unit id="1a7fbc08e693d7e9bb96a9ac8613bd810dcc087e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Collections&lt;/em&gt; is from &lt;em&gt;java.util&lt;/em&gt; package.</source>
          <target state="translated">&lt;em&gt;컬렉션&lt;/em&gt; 은 &lt;em&gt;java.util&lt;/em&gt; 패키지에서 가져온 것입니다.</target>
        </trans-unit>
        <trans-unit id="0efc8bd899f2cc0b12dd362533fd170ec7b6e217" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;interestingly no one-liner with the other overloaded&lt;/em&gt;&lt;code&gt;Stream::collect&lt;/code&gt;&lt;em&gt;method is listed&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;흥미롭게도 다른 오버로드 된&lt;/em&gt; &lt;code&gt;Stream::collect&lt;/code&gt; &lt;em&gt;메소드가&lt;/em&gt; &lt;em&gt;있는 하나의 라이너&lt;/em&gt; &lt;em&gt;가 나열되지 않습니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9cedf480140b7fd99a88233a9cb257f263de29d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Alternatives&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Alternatives&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cb33563a72610ed34b6b91ac165e4604be35ec62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; I am a committer for Eclipse Collections.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 저는 Eclipse Collections의 커미터입니다.</target>
        </trans-unit>
        <trans-unit id="64ed263eedc1081c0f11cb69072bc2c98263ea96" translate="yes" xml:space="preserve">
          <source>A similar approach would apply to &lt;code&gt;Map&lt;/code&gt; as well -</source>
          <target state="translated">비슷한 접근 방식이 &lt;code&gt;Map&lt;/code&gt; 에도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="71a8126708466d7f2a248bf5e2f2d583ae8c3781" translate="yes" xml:space="preserve">
          <source>About the most compact way to do this is:</source>
          <target state="translated">가장 간단한 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bd4d12d2120ea16122816d5d4aa240d11947d5ce" translate="yes" xml:space="preserve">
          <source>Actually, it's possible to do it in one line:</source>
          <target state="translated">실제로 한 줄로 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c0df0fe59677cc90036d4e5e0e021923691bff22" translate="yes" xml:space="preserve">
          <source>Actually, probably the &quot;best&quot; way to initialize the &lt;code&gt;ArrayList&lt;/code&gt; is the method you wrote, as it does not need to create a new &lt;code&gt;List&lt;/code&gt; in any way:</source>
          <target state="translated">실제로 &lt;code&gt;ArrayList&lt;/code&gt; 를 초기화하는 &quot;가장 좋은&quot;방법은 어떤 방식 으로든 새 &lt;code&gt;List&lt;/code&gt; 를 만들 필요가 없기 때문에 작성한 방법입니다.</target>
        </trans-unit>
        <trans-unit id="64e340ed5a78167a541af91ef02198569768144e" translate="yes" xml:space="preserve">
          <source>Also according to javadoc you should be able to do this:</source>
          <target state="translated">또한 javadoc에 따르면 다음을 수행 할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="2453317b85568650b062b4c5eb5195a81655105e" translate="yes" xml:space="preserve">
          <source>Alternatively you can do</source>
          <target state="translated">또는 당신은 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="a61f572fa91f377dcc72c5161a3a76d6e9348668" translate="yes" xml:space="preserve">
          <source>Although, that might make you complain of 'performance'.</source>
          <target state="translated">그러나 그것은 '성능'에 대해 불평하게 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="71d41e823be64a91ab03308379fcbea28a969e64" translate="yes" xml:space="preserve">
          <source>Another example would be always declaring variable an &lt;code&gt;InputStream&lt;/code&gt; even though it is usually a &lt;code&gt;FileInputStream&lt;/code&gt; or a &lt;code&gt;BufferedInputStream&lt;/code&gt;, because one day soon you or somebody else will want to use some other kind of &lt;code&gt;InputStream&lt;/code&gt;.</source>
          <target state="translated">또 다른 예는 보통 &lt;code&gt;FileInputStream&lt;/code&gt; 또는 &lt;code&gt;BufferedInputStream&lt;/code&gt; 인 경우에도 항상 &lt;code&gt;InputStream&lt;/code&gt; 변수를 선언하는 것입니다. 언젠가 당신이나 다른 누군가가 다른 종류의 &lt;code&gt;InputStream&lt;/code&gt; 을 사용하기를 원하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="fc9191520f87e909f6b51a0bb781b4bb3b6bc352" translate="yes" xml:space="preserve">
          <source>As was pointed out, you'd need to do a double brace initialization:</source>
          <target state="translated">지적했듯이 이중 중괄호 초기화를 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="2a3057ce4cb7bb4fef9fb605694c3cb7dde8c225" translate="yes" xml:space="preserve">
          <source>But I'm not able to get it to compile with JDK 1.6.</source>
          <target state="translated">그러나 JDK 1.6으로 컴파일 할 수는 없습니다.</target>
        </trans-unit>
        <trans-unit id="71bacba4e63720fc812489bf0cd92832ecf75d06" translate="yes" xml:space="preserve">
          <source>But again, it's better to just use the &lt;code&gt;Stream&lt;/code&gt; directly instead of collecting it to a &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">그러나 다시 &lt;code&gt;Stream&lt;/code&gt; 을 &lt;code&gt;List&lt;/code&gt; 에 수집하는 대신 직접 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="e4bb8f6a4e650c58576b360c92fc7b28cb59ef5c" translate="yes" xml:space="preserve">
          <source>But it's not much better than your first refactoring.</source>
          <target state="translated">그러나 첫 번째 리팩토링보다 낫지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="c7e4c7ddb42fb9d6c7a416f732233873f56dc3c6" translate="yes" xml:space="preserve">
          <source>But preferably, just use the &lt;code&gt;Stream&lt;/code&gt; without collecting it to a &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">그러나 바람직하게는 &lt;code&gt;Stream&lt;/code&gt; 을 &lt;code&gt;List&lt;/code&gt; 로 수집하지 않고 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="96f66557ee99a2e4139b47e10a44a33bcf52697b" translate="yes" xml:space="preserve">
          <source>But since you complained of wanting an ArrayList, you should firstly know that ArrayList is a subclass of List and you could simply add this line:</source>
          <target state="translated">그러나 ArrayList를 원한다고 불평했기 때문에 먼저 ArrayList가 List의 하위 클래스이며 다음 행을 추가 할 수 있다는 것을 알아야합니다.</target>
        </trans-unit>
        <trans-unit id="c83eb5f20e65636eee11043b7da59db10c95c68b" translate="yes" xml:space="preserve">
          <source>But this may force you into adding an annotation &lt;code&gt;@SuppressWarnings(&quot;serial&quot;)&lt;/code&gt; or generate a serial UUID which is annoying. Also most code formatters will unwrap that into multiple statements/lines.</source>
          <target state="translated">그러나 이로 인해 &lt;code&gt;@SuppressWarnings(&quot;serial&quot;)&lt;/code&gt; 주석을 추가하거나 성가신 직렬 UUID를 생성 할 수 있습니다. 또한 대부분의 코드 포맷터는이를 여러 명령문 / 라인으로 랩핑 해제합니다.</target>
        </trans-unit>
        <trans-unit id="475f72467e5c66317bb6de486b4bd97e0035a5da" translate="yes" xml:space="preserve">
          <source>But you can call &lt;code&gt;List.set&lt;/code&gt;, so it's still &lt;em&gt;mutable&lt;/em&gt;.</source>
          <target state="translated">그러나 &lt;code&gt;List.set&lt;/code&gt; 을 호출 할 수 있으므로 여전히 &lt;em&gt;변경 가능&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="c161343d24997ae14063155d4fc6541162e58207" translate="yes" xml:space="preserve">
          <source>Code Snippet:</source>
          <target state="translated">코드 스 니펫 :</target>
        </trans-unit>
        <trans-unit id="a3bda458f7ad4885dc3918062aaa41e00e1775c4" translate="yes" xml:space="preserve">
          <source>Collection literals didn't make it into Java 8, but it is possible to use the Stream API to initialize a list in one rather long line:</source>
          <target state="translated">컬렉션 리터럴은 Java 8로 만들지 않았지만 Stream API를 사용하여 하나의 긴 줄로 목록을 초기화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb30e19eb1dba1e4fc4a9e0d117a6dbc5fed76ef" translate="yes" xml:space="preserve">
          <source>Declaration： I'm the developer of AbacusUtil.</source>
          <target state="translated">선언 ： 저는 AbacusUtil의 개발자입니다.</target>
        </trans-unit>
        <trans-unit id="10e6fdf16b35c2923b57beaac15410a527e66ddd" translate="yes" xml:space="preserve">
          <source>Enum's have a static &lt;code&gt;values&lt;/code&gt; method that returns an array containing all of the values of the enum in the order they are declared, e.g.:</source>
          <target state="translated">열거 형에는 선언 된 순서대로 열거 형의 모든 값을 포함하는 배열을 반환하는 정적 &lt;code&gt;values&lt;/code&gt; 메서드가 있습니다. 예 :</target>
        </trans-unit>
        <trans-unit id="a2c8b175972a72f732becd21cd60482bad9e52ac" translate="yes" xml:space="preserve">
          <source>For example in IntelliJ IDEA you press &lt;code&gt;Alt+Enter&lt;/code&gt; and select &lt;code&gt;Static import method...&lt;/code&gt;.</source>
          <target state="translated">예를 들어 IntelliJ IDEA에서 &lt;code&gt;Alt+Enter&lt;/code&gt; 를 누르고 &lt;code&gt;Static import method...&lt;/code&gt; 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="0a6c109134fd0f897e3e03fca15b77fe2cfbc309" translate="yes" xml:space="preserve">
          <source>For example, if you're passing an &lt;code&gt;ArrayList&lt;/code&gt; to a &lt;code&gt;void method(...)&lt;/code&gt;:</source>
          <target state="translated">예를 들어, &lt;code&gt;ArrayList&lt;/code&gt; 를 &lt;code&gt;void method(...)&lt;/code&gt; 전달하는 경우 :</target>
        </trans-unit>
        <trans-unit id="ee4b1417c88ae81bc6b74af0201e1bb995bcaed7" translate="yes" xml:space="preserve">
          <source>For greater flexibility, it can be generic:</source>
          <target state="translated">유연성을 높이기 위해 다음과 같은 것이 일반적 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="593ba839ec6f98d8c50f77ccae2a7c45739ee49a" translate="yes" xml:space="preserve">
          <source>For me Arrays.asList() is the best and convenient one. I always like to initialize that way.
If you are a beginner into Java Collections then I would like you to refer &lt;a href=&quot;http://www.gitarani.com/classified.htm?classifiedId=3011&quot;&gt;ArrayList initialization&lt;/a&gt;</source>
          <target state="translated">나에게 Arrays.asList ()는 가장 편리하고 편리합니다. 나는 항상 그런 식으로 초기화하고 싶습니다. Java Collections 초보자라면 &lt;a href=&quot;http://www.gitarani.com/classified.htm?classifiedId=3011&quot;&gt;ArrayList 초기화&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="cbbd62438703210ba4113cf77bfd04ffb3ec1aa2" translate="yes" xml:space="preserve">
          <source>Here is another way:</source>
          <target state="translated">다른 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3dbc3e49f97a0f26c2d5c0f614e919d574affa59" translate="yes" xml:space="preserve">
          <source>Here is code by &lt;a href=&quot;https://github.com/landawn/AbacusUtil&quot;&gt;AbacusUtil&lt;/a&gt;</source>
          <target state="translated">다음은 &lt;a href=&quot;https://github.com/landawn/AbacusUtil&quot;&gt;AbacusUtil의&lt;/a&gt; 코드입니다 .</target>
        </trans-unit>
        <trans-unit id="27adac0249320a1409e9f3cae67b43df453e8a85" translate="yes" xml:space="preserve">
          <source>However, I'm not too fond of that method because what you end up with is a subclass of &lt;code&gt;ArrayList&lt;/code&gt; which has an instance initializer, and that class is created just to create one object -- that just seems like a little bit overkill to me.</source>
          <target state="translated">그러나, 당신이 끝내는 것은 인스턴스 이니셜 라이저가있는 &lt;code&gt;ArrayList&lt;/code&gt; 의 서브 클래스이며, 그 클래스는 하나의 객체를 만들기 위해 만들어지기 때문에 너무 좋아하지 않습니다. .</target>
        </trans-unit>
        <trans-unit id="9e0c3c23d4e6276e2dd03fe8f909eb61cd1da80d" translate="yes" xml:space="preserve">
          <source>However, i don't recommend shortening the &lt;code&gt;List.of&lt;/code&gt; method to &lt;code&gt;of&lt;/code&gt;, because that becomes confusing.</source>
          <target state="translated">그러나 &lt;code&gt;List.of&lt;/code&gt; 메서드를 &lt;code&gt;of&lt;/code&gt; 로 줄이는 것은 혼동되기 때문에 권장하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="47920951b896dd080c05a99fef9592f7f1b73bde" translate="yes" xml:space="preserve">
          <source>I wanted to create a list of options for testing purposes. At first, I did this:</source>
          <target state="translated">테스트 목적으로 옵션 목록을 만들고 싶었습니다. 처음에 나는 이것을했다 :</target>
        </trans-unit>
        <trans-unit id="3b12625ffc0e01524f8f535c14d770759bd8d84e" translate="yes" xml:space="preserve">
          <source>If you &lt;em&gt;really&lt;/em&gt; specifically need a &lt;code&gt;java.util.ArrayList&lt;/code&gt;</source>
          <target state="translated">&lt;em&gt;실제로&lt;/em&gt; &lt;code&gt;java.util.ArrayList&lt;/code&gt; 가 필요한 경우</target>
        </trans-unit>
        <trans-unit id="07cad2b7475e54f475f594e2d238b2d673befb81" translate="yes" xml:space="preserve">
          <source>If you need a list of several objects:</source>
          <target state="translated">여러 객체의 목록이 필요한 경우 :</target>
        </trans-unit>
        <trans-unit id="bcbe10baa513f81e95867a4622adcb43af46f0b4" translate="yes" xml:space="preserve">
          <source>If you need a simple list of size 1:</source>
          <target state="translated">간단한 크기 목록 1이 필요한 경우 :</target>
        </trans-unit>
        <trans-unit id="e8f8c3ee562d4440f7a6ca0a070f15f6c7db4e51" translate="yes" xml:space="preserve">
          <source>If you need to ensure that your &lt;code&gt;List&lt;/code&gt; is an &lt;code&gt;ArrayList&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 가 &lt;code&gt;ArrayList&lt;/code&gt; 인지 확인 해야하는 경우 :</target>
        </trans-unit>
        <trans-unit id="5ad480b32191c755b5c66aaf6ba154c561c8d58e" translate="yes" xml:space="preserve">
          <source>If you want to &lt;em&gt;both&lt;/em&gt; prepopulate an &lt;code&gt;ArrayList&lt;/code&gt;&lt;em&gt;and&lt;/em&gt; add to it afterwards (why?), use</source>
          <target state="translated">&lt;code&gt;ArrayList&lt;/code&gt; 를 미리 채우고 나중에 추가하려면 (왜?)</target>
        </trans-unit>
        <trans-unit id="7787224f15721dde6a49b8dc5ce3877974d6779c" translate="yes" xml:space="preserve">
          <source>If you'd need to have a list of &lt;strong&gt;one item&lt;/strong&gt;!</source>
          <target state="translated">당신은 &lt;strong&gt;하나의 항목&lt;/strong&gt; 의 목록이 필요합니다!</target>
        </trans-unit>
        <trans-unit id="70af22099196223b8485c95684bbf8824a9afa2b" translate="yes" xml:space="preserve">
          <source>Immutability</source>
          <target state="translated">Immutability</target>
        </trans-unit>
        <trans-unit id="cdcf755340de2249810aa42b0048040f7de39957" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;Java 9&lt;/strong&gt; or later, after &lt;code&gt;List.of()&lt;/code&gt; was added:</source>
          <target state="translated">&lt;strong&gt;Java 9&lt;/strong&gt; 이상에서 &lt;code&gt;List.of()&lt;/code&gt; 가 추가 된 후 :</target>
        </trans-unit>
        <trans-unit id="83989159cc62de9f84851c1c218edaa1ceab59af" translate="yes" xml:space="preserve">
          <source>In Guava there are also other useful static constructors. You can read about them &lt;a href=&quot;https://github.com/google/guava/wiki/CollectionUtilitiesExplained&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">구아바에는 다른 유용한 정적 생성자도 있습니다. 당신은 &lt;a href=&quot;https://github.com/google/guava/wiki/CollectionUtilitiesExplained&quot;&gt;여기&lt;/a&gt; 에 대해 읽을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a5acdbb1df46463d18d6ccf100acb6dd8e103222" translate="yes" xml:space="preserve">
          <source>In Java 9 we can easily initialize an &lt;code&gt;ArrayList&lt;/code&gt; in a single line:</source>
          <target state="translated">Java 9에서는 한 줄로 &lt;code&gt;ArrayList&lt;/code&gt; 를 쉽게 초기화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="15ce2f8fbef77036544f95ac7d0f29baa8419bd0" translate="yes" xml:space="preserve">
          <source>In Java, you can't do</source>
          <target state="translated">Java에서는 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="2a2ace2fba3250601746f1bd5949233bca714675" translate="yes" xml:space="preserve">
          <source>In case you don't care of the minor performance differences then you can also copy an array to an ArrayList very simply:</source>
          <target state="translated">약간의 성능 차이를 신경 쓰지 않는 경우 배열을 ArrayList에 매우 간단하게 복사 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc75a5e1657ed58347995f5dc2e097429ed2cdef" translate="yes" xml:space="preserve">
          <source>In that case I guess you wouldn't need your ArrayList.</source>
          <target state="translated">이 경우 ArrayList가 필요하지 않은 것 같습니다.</target>
        </trans-unit>
        <trans-unit id="eb41f0ed2bee961ea0f4d0513beb5c55cd57cd5d" translate="yes" xml:space="preserve">
          <source>In that case it doesn't make sense to me, why, since your list is predefined it wasn't defined as an array (since the size is known at time of initialisation). And if that's an option for you:</source>
          <target state="translated">이 경우 나에게 이해가되지 않습니다. 왜 목록이 미리 정의되어 있기 때문에 (초기화 할 때 크기가 알려져 있기 때문에) 배열로 정의되지 않았습니다. 그리고 그것이 당신을위한 옵션이라면 :</target>
        </trans-unit>
        <trans-unit id="1578bf43b3be3bb922f301d83eb33195f580bee1" translate="yes" xml:space="preserve">
          <source>Initialization of an ArrayList in one line</source>
          <target state="translated">한 줄로 ArrayList 초기화</target>
        </trans-unit>
        <trans-unit id="af6f049079d351361113682d3285bfe7c586a4e0" translate="yes" xml:space="preserve">
          <source>Is there a better way to do this?</source>
          <target state="translated">더 좋은 방법이 있습니까?</target>
        </trans-unit>
        <trans-unit id="086a4fe3047b3d5bc4c4223b684e6694ce62688e" translate="yes" xml:space="preserve">
          <source>It would be simpler if you were to just declare it as a &lt;code&gt;List&lt;/code&gt; - does it have to be an ArrayList?</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 로 선언하면 더 간단합니다. ArrayList 여야합니까?</target>
        </trans-unit>
        <trans-unit id="252f160a8676ebc15acf2bfb2585dd985b71a7c1" translate="yes" xml:space="preserve">
          <source>JEP 186 discussion on lambda-dev, January-March 2014</source>
          <target state="translated">2014 년 1 월 -3 월, lambda-dev에 대한 JEP 186 토론</target>
        </trans-unit>
        <trans-unit id="aaf28d5ab16980ca3f6dc1aef578a8121f9d871a" translate="yes" xml:space="preserve">
          <source>Java 8 or earlier:</source>
          <target state="translated">Java 8 이하 :</target>
        </trans-unit>
        <trans-unit id="a674bb106f3a757c49582f18225d695a3138c1f5" translate="yes" xml:space="preserve">
          <source>Java 9 has the following method to create an &lt;em&gt;immutable&lt;/em&gt; list:</source>
          <target state="translated">Java 9에는 &lt;em&gt;변경 불가능한&lt;/em&gt; 목록을 작성하는 다음 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="c01fe57ca87e0fc1639be3ac0070eb44a12a43b4" translate="yes" xml:space="preserve">
          <source>Just create a function that can have as many elements as you want and call it to add them in one line.</source>
          <target state="translated">원하는만큼 요소를 가질 수있는 함수를 만들고 한 줄에 추가하기 위해 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="59d0c48ff21ec42a86e69e9ed68621ba2719dfec" translate="yes" xml:space="preserve">
          <source>Language changes have been considered several times, and rejected:</source>
          <target state="translated">언어 변경이 여러 번 고려되어 거부되었습니다.</target>
        </trans-unit>
        <trans-unit id="732900a880cd3d5255400f3f49401c5752087b22" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;https://stackoverflow.com/a/1005089/1031312&quot;&gt;Tom said&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/1005089/1031312&quot;&gt;톰이 말한&lt;/a&gt; 것처럼 :</target>
        </trans-unit>
        <trans-unit id="d30a295814705ec0993426e514645a21b33b2df0" translate="yes" xml:space="preserve">
          <source>Okay, but in future you need a bit more than just the place name, you need a country code too. Assuming this is still a predefined list which will never change during run-time, then it's fitting to use an &lt;code&gt;enum&lt;/code&gt; set, which would require re-compilation if the list needed to be changed in the future.</source>
          <target state="translated">좋습니다.하지만 나중에는 장소 이름보다 조금 더 많은 것이 필요하며 국가 코드도 필요합니다. 이 목록이 여전히 런타임 동안 변경되지 않는 사전 정의 된 목록이라고 가정하면 열거 목록을 사용하는 것이 적합합니다. &lt;code&gt;enum&lt;/code&gt; 목록을 사용하면 나중에 목록을 변경해야 할 경우 다시 컴파일해야합니다.</target>
        </trans-unit>
        <trans-unit id="fed49588cb60a2fdf075c5c1cb61ba72de97270c" translate="yes" xml:space="preserve">
          <source>Or if you have only one element:</source>
          <target state="translated">또는 하나의 요소 만있는 경우 :</target>
        </trans-unit>
        <trans-unit id="760f74c178f697a91e2a984891840dc78f9bfda1" translate="yes" xml:space="preserve">
          <source>Or you can go from a &lt;code&gt;Stream&lt;/code&gt; to a &lt;code&gt;List&lt;/code&gt;:</source>
          <target state="translated">또는 &lt;code&gt;Stream&lt;/code&gt; 에서 &lt;code&gt;List&lt;/code&gt; 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cba444a1fbeb711843d2fa26102445c184efa105" translate="yes" xml:space="preserve">
          <source>Otherwise you're limiting your code to that specific type, and it'll be harder to change when you want to.</source>
          <target state="translated">그렇지 않으면 코드를 특정 유형으로 제한하고 있으므로 원할 때 변경하기가 더 어려워집니다.</target>
        </trans-unit>
        <trans-unit id="9ebc8b13f98ab9e588d6c10af86e037e6c835afd" translate="yes" xml:space="preserve">
          <source>P.S. &lt;a href=&quot;https://stackoverflow.com/a/7238739/1031312&quot;&gt;Randyaa demonstrated&lt;/a&gt; another nice way using the static utility method &lt;a href=&quot;http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Collections.html&quot;&gt;Collections.addAll&lt;/a&gt;.</source>
          <target state="translated">PS &lt;a href=&quot;https://stackoverflow.com/a/7238739/1031312&quot;&gt;Randyaa&lt;/a&gt; 는 정적 유틸리티 메소드 &lt;a href=&quot;http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Collections.html&quot;&gt;Collections.addAll을&lt;/a&gt; 사용하여 또 다른 좋은 방법을 시연했습니다 .</target>
        </trans-unit>
        <trans-unit id="afeb39640bcb26b5d6cdf92410bbd752a3722fbb" translate="yes" xml:space="preserve">
          <source>Program to interfaces, not to implementations</source>
          <target state="translated">구현이 아닌 인터페이스에 대한 프로그램</target>
        </trans-unit>
        <trans-unit id="6aa5b97f3bb9d230f115636d8e55fd98c48c4b6b" translate="yes" xml:space="preserve">
          <source>Project Coin Proposal, 29 March 2009</source>
          <target state="translated">프로젝트 코인 제안, 2009 년 3 월 29 일</target>
        </trans-unit>
        <trans-unit id="fa7eef680f9460477c783d26d22b69ecaf2100b5" translate="yes" xml:space="preserve">
          <source>Project Coin Proposal, 30 March 2009</source>
          <target state="translated">프로젝트 코인 제안, 2009 년 3 월 30 일</target>
        </trans-unit>
        <trans-unit id="45855ce383212ce7b311e9d7c4680ab6c2660d0e" translate="yes" xml:space="preserve">
          <source>Related: &lt;a href=&quot;https://stackoverflow.com/questions/41918934/what-is-the-point-of-overloaded-convenience-factory-methods-for-collections-in-j/41918976#41918976&quot;&gt;What is the point of overloaded Convenience Factory Methods for Collections in Java 9&lt;/a&gt;</source>
          <target state="translated">관련 : &lt;a href=&quot;https://stackoverflow.com/questions/41918934/what-is-the-point-of-overloaded-convenience-factory-methods-for-collections-in-j/41918976#41918976&quot;&gt;Java 9에서 콜렉션에 대해 오버로드 된 편의 팩토리 메소드의 요점은 무엇입니까?&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="361fdda7d27928c81534804592bb2030c180faf2" translate="yes" xml:space="preserve">
          <source>See this post for more details -&amp;gt; &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/46579074/what-is-the-difference-between-list-of-and-arrays-aslist&quot;&gt;What is the difference between List.of and Arrays.asList?&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">자세한 내용은이 게시물을 참조하십시오-&amp;gt; &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/46579074/what-is-the-difference-between-list-of-and-arrays-aslist&quot;&gt;List.of와 Arrays.asList의 차이점은 무엇입니까?&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8968c89994be5c4f4228796381b8363120a5822a" translate="yes" xml:space="preserve">
          <source>Similar methods are available for &lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;Map&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; 및 &lt;code&gt;Map&lt;/code&gt; 에 대해 비슷한 방법을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6199331505bbfc0819fc04f3ade084ec72d352cd" translate="yes" xml:space="preserve">
          <source>Simply use below code as follows.</source>
          <target state="translated">아래 코드를 다음과 같이 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f03af1f33ef25549b34440d101a4394cc8c55cf2" translate="yes" xml:space="preserve">
          <source>Space Efficiency</source>
          <target state="translated">공간 효율</target>
        </trans-unit>
        <trans-unit id="4e002298c697d7cc81d5426eca7c1bb4ff43d176" translate="yes" xml:space="preserve">
          <source>The above results in a compiler error, because &lt;code&gt;List&amp;lt;B&amp;gt;&lt;/code&gt;(which is what is returned by Arrays.asList) is not a subclass of &lt;code&gt;List&amp;lt;A&amp;gt;&lt;/code&gt;, even though you can add Objects of type B to a &lt;code&gt;List&amp;lt;A&amp;gt;&lt;/code&gt; object.  To get around this, you need to do something like:</source>
          <target state="translated">&lt;code&gt;List&amp;lt;A&amp;gt;&lt;/code&gt; 객체에 B 유형의 객체를 추가 할 수 있지만 &lt;code&gt;List&amp;lt;B&amp;gt;&lt;/code&gt; (Arrays.asList에 의해 반환되는 것)가 List &amp;lt;A&amp;gt; 의 하위 클래스가 아니기 때문에 위의 결과로 인해 컴파일러 오류가 발생합니다. . 이 문제를 해결하려면 다음과 같은 작업을 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="7e5c9c2a63a765a7903f244db15951457a781e08" translate="yes" xml:space="preserve">
          <source>The best way to do it:</source>
          <target state="translated">가장 좋은 방법은 :</target>
        </trans-unit>
        <trans-unit id="6d19d1caaf800a838d88e5c756e8e6b8c128a070" translate="yes" xml:space="preserve">
          <source>The catch is that there is quite a bit of typing required to refer to that &lt;code&gt;list&lt;/code&gt; instance.</source>
          <target state="translated">그 &lt;code&gt;list&lt;/code&gt; 인스턴스를 참조하려면 약간의 타이핑이 필요하다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="fc3a1aa98b9251d777b950a3d768121c4ab7eb8e" translate="yes" xml:space="preserve">
          <source>The language
  proposals were set aside in preference to a library-based proposal as
  summarized in this &lt;a href=&quot;http://mail.openjdk.java.net/pipermail/lambda-dev/2014-March/011938.html&quot;&gt;message.&lt;/a&gt;</source>
          <target state="translated">언어 제안은이 &lt;a href=&quot;http://mail.openjdk.java.net/pipermail/lambda-dev/2014-March/011938.html&quot;&gt;메시지에&lt;/a&gt; 요약 된대로 라이브러리 기반 제안보다 우선적으로 제정되었습니다 .</target>
        </trans-unit>
        <trans-unit id="dce1df393ceba33d6fc2d898c0d150ea123edac2" translate="yes" xml:space="preserve">
          <source>The simple answer</source>
          <target state="translated">간단한 대답</target>
        </trans-unit>
        <trans-unit id="a01b20ee2acf8f1aa70d706b468a29bea1502284" translate="yes" xml:space="preserve">
          <source>The static import:</source>
          <target state="translated">정적 가져 오기 :</target>
        </trans-unit>
        <trans-unit id="470c4010f58ab69db4f11c88dc6635d662a20059" translate="yes" xml:space="preserve">
          <source>Then, I refactored the code as follows:</source>
          <target state="translated">그런 다음 코드를 다음과 같이 리팩터링했습니다.</target>
        </trans-unit>
        <trans-unit id="6374dfd70d9d4056f72eba8a1923de801d409e62" translate="yes" xml:space="preserve">
          <source>There are alternatives, such as making an anonymous inner class with an instance initializer (also known as an &quot;double brace initialization&quot;):</source>
          <target state="translated">인스턴스 이니셜 라이저 ( &quot;중괄호 초기화&quot;라고도 함)를 사용하여 익명의 내부 클래스를 만드는 것과 같은 대안이 있습니다.</target>
        </trans-unit>
        <trans-unit id="585e23cf519065f499c845e9fbfb7516be5060ba" translate="yes" xml:space="preserve">
          <source>There is a &lt;strong&gt;small set&lt;/strong&gt; of use cases for initializing a mutable collection instance with a predefined set of values. It's usually preferable to have those predefined values be in an immutable collection, and then to initialize the mutable collection via a copy constructor.</source>
          <target state="translated">사전 정의 된 값 세트로 변경 가능한 콜렉션 인스턴스를 초기화하기위한 &lt;strong&gt;작은&lt;/strong&gt; 사용 사례 세트가 있습니다. 일반적으로 사전 정의 된 값을 변경할 수없는 콜렉션에두고 복사 생성자를 통해 변경 가능한 콜렉션을 초기화하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="72984b6b0e0dcd40fd00e8ec67e6198619539098" translate="yes" xml:space="preserve">
          <source>This is probably the best way to go about doing this, esp. if you need an unbounded list or need to use inheritance.</source>
          <target state="translated">이것은 아마도 이것을하는 가장 좋은 방법 일 것입니다. 무제한 목록이 필요하거나 상속을 사용해야하는 경우</target>
        </trans-unit>
        <trans-unit id="824af5a6f096e0be677aa31f737c1c782e66bdde" translate="yes" xml:space="preserve">
          <source>This new approach of Java 9 has many advantages over the previous ones:</source>
          <target state="translated">Java 9의이 새로운 접근 방식은 이전 방법에 비해 많은 장점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="21635656cf4c6d24ed677688c001ff01bd5a9840" translate="yes" xml:space="preserve">
          <source>This will give you a &lt;code&gt;List&lt;/code&gt; backed by an array, so it cannot change length.</source>
          <target state="translated">이것은 배열에 의해 지원되는 &lt;code&gt;List&lt;/code&gt; 를 제공하므로 길이를 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c116a36f56fc1976c541d1e16c2753149b4b383e" translate="yes" xml:space="preserve">
          <source>This will give you an &lt;em&gt;immutable&lt;/em&gt;&lt;code&gt;List&lt;/code&gt;, so it cannot be changed.</source>
          <target state="translated">이것은 당신에게 &lt;em&gt;불변의&lt;/em&gt; &lt;code&gt;List&lt;/code&gt; 을 줄 것이므로 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="d33763f9cd92f1e1f817d76a1a7aa24280def11d" translate="yes" xml:space="preserve">
          <source>This would mean that &lt;code&gt;places&lt;/code&gt; is &lt;strong&gt;immutable&lt;/strong&gt; (trying to change it will cause an &lt;code&gt;UnsupportedOperationException&lt;/code&gt; exception to be thrown).</source>
          <target state="translated">이는 &lt;code&gt;places&lt;/code&gt; 를 &lt;strong&gt;변경할&lt;/strong&gt; 수 없음을 의미합니다 (변경을 시도하면 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; 예외가 발생 함).</target>
        </trans-unit>
        <trans-unit id="a296f5b91c80ba482b78548c800efb77600e735a" translate="yes" xml:space="preserve">
          <source>Thread Safe</source>
          <target state="translated">스레드 안전</target>
        </trans-unit>
        <trans-unit id="4ae85037897f0059dbf869eb55a84fd1f2a36439" translate="yes" xml:space="preserve">
          <source>To make a mutable list that is a concrete &lt;code&gt;ArrayList&lt;/code&gt; you can create an &lt;code&gt;ArrayList&lt;/code&gt; from the immutable list:</source>
          <target state="translated">구체적인 &lt;code&gt;ArrayList&lt;/code&gt; 인 가변 목록을 만들려면 불변 목록에서 &lt;code&gt;ArrayList&lt;/code&gt; 를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="959206a198e8a676ed2920739822c1319714081c" translate="yes" xml:space="preserve">
          <source>To quote &lt;a href=&quot;http://openjdk.java.net/jeps/269&quot;&gt;JEP 269&lt;/a&gt; (emphasis mine):</source>
          <target state="translated">&lt;a href=&quot;http://openjdk.java.net/jeps/269&quot;&gt;JEP 269&lt;/a&gt; (강조 광산)를 인용하려면 :</target>
        </trans-unit>
        <trans-unit id="0676ca3b3f32a37556f22bb9bb39ad84434befad" translate="yes" xml:space="preserve">
          <source>Try with this code line:</source>
          <target state="translated">이 코드 라인을 사용해보십시오 :</target>
        </trans-unit>
        <trans-unit id="af67c53839f1a7f4a6cd1fda384c6c3f6ab05447" translate="yes" xml:space="preserve">
          <source>Unfortunately it won't help you here, as it will initialize an immutable &lt;code&gt;List&lt;/code&gt; rather than an &lt;code&gt;ArrayList&lt;/code&gt;, and furthermore, it's not available yet, if it ever will be.</source>
          <target state="translated">불행히도 &lt;code&gt;ArrayList&lt;/code&gt; 가 아닌 불변의 &lt;code&gt;List&lt;/code&gt; 를 초기화 할 것이므로 여기에서는 도움이되지 않으며, 더 이상 사용할 수 없다면 아직 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="ab3ec2dd24a912b7ee44dea510cfc728fdc460e4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Stream&lt;/code&gt;s</source>
          <target state="translated">&lt;code&gt;Stream&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="edf272a4e42d3f24b71da23fd332452881a0211c" translate="yes" xml:space="preserve">
          <source>Usually you should just declare variables by the most general interface that you are going to use (e.g. &lt;code&gt;Iterable&lt;/code&gt;, &lt;code&gt;Collection&lt;/code&gt;, or &lt;code&gt;List&lt;/code&gt;), and initialize them with the specific implementation (e.g. &lt;code&gt;ArrayList&lt;/code&gt;, &lt;code&gt;LinkedList&lt;/code&gt; or &lt;code&gt;Arrays.asList()&lt;/code&gt;).</source>
          <target state="translated">일반적으로 사용할 가장 일반적인 인터페이스 (예 : &lt;code&gt;Iterable&lt;/code&gt; , &lt;code&gt;Collection&lt;/code&gt; 또는 &lt;code&gt;List&lt;/code&gt; )로 변수를 선언하고 특정 구현 (예 : &lt;code&gt;ArrayList&lt;/code&gt; , &lt;code&gt;LinkedList&lt;/code&gt; 또는 &lt;code&gt;Arrays.asList()&lt;/code&gt; )으로 초기화해야합니다.</target>
        </trans-unit>
        <trans-unit id="48dea6c9e21d80c7705a1b661fc6222e0b19a081" translate="yes" xml:space="preserve">
          <source>What would have been nice was if the &lt;a href=&quot;http://mail.openjdk.java.net/pipermail/coin-dev/2009-March/001193.html&quot;&gt;Collection Literals proposal&lt;/a&gt; for &lt;a href=&quot;http://openjdk.java.net/projects/coin&quot;&gt;Project Coin&lt;/a&gt; was accepted (it was slated to be introduced in Java 7, but it's not likely to be part of Java 8 either.):</source>
          <target state="translated">좋은 점은 &lt;a href=&quot;http://openjdk.java.net/projects/coin&quot;&gt;Project Coin&lt;/a&gt; 에 대한 &lt;a href=&quot;http://mail.openjdk.java.net/pipermail/coin-dev/2009-March/001193.html&quot;&gt;Collection Literals 제안&lt;/a&gt; 이 수락 된 경우였습니다 (Java 7에서 도입 될 예정이지만 Java 8에도 포함될 가능성은 없습니다).</target>
        </trans-unit>
        <trans-unit id="7057ae39ccc68ef410e38f2dac4f5e725dc5bb1f" translate="yes" xml:space="preserve">
          <source>Which any modern IDE will suggest and automatically do for you.</source>
          <target state="translated">최신 IDE가 자동으로 제안하고 자동으로 수행합니다.</target>
        </trans-unit>
        <trans-unit id="3f9aae185d5fd73ac41c81b5a6b942e8ca0caf7b" translate="yes" xml:space="preserve">
          <source>Which is what you want in most cases where you're prepopulating it.</source>
          <target state="translated">당신이 그것을 미리 채우는 대부분의 경우에 당신이 원하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="10bbe897df15db81fa095f5ca9fda801e7304ec3" translate="yes" xml:space="preserve">
          <source>Which you are most likely not doing.</source>
          <target state="translated">당신이하지 않을 가능성이 가장 높습니다.</target>
        </trans-unit>
        <trans-unit id="f08b09a56085d82702eefac26e41bf9ad590adfe" translate="yes" xml:space="preserve">
          <source>Why does it have to be a &lt;code&gt;List&lt;/code&gt;?</source>
          <target state="translated">왜 &lt;code&gt;List&lt;/code&gt; 여야합니까?</target>
        </trans-unit>
        <trans-unit id="975bacb2afa9f2745543b8fb771f8bcfb44e8960" translate="yes" xml:space="preserve">
          <source>Why not make a simple utility function that does this?</source>
          <target state="translated">이것을하는 간단한 유틸리티 함수를 만들어 보시겠습니까?</target>
        </trans-unit>
        <trans-unit id="bcdccdb47fef3d92288947087321c671678c5f20" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;/questions/tagged/java-9&quot;&gt;java-9&lt;/a&gt; and above, as suggested in &lt;a href=&quot;http://openjdk.java.net/jeps/269&quot;&gt;JDK Enhancement Proposal - 269&lt;/a&gt;, this could be achieved using &lt;em&gt;collection literals&lt;/em&gt; now with -</source>
          <target state="translated">&lt;a href=&quot;http://openjdk.java.net/jeps/269&quot;&gt;JDK Enhancement Proposal-269&lt;/a&gt; 에서 제안한 바와 같이 &lt;a href=&quot;/questions/tagged/java-9&quot;&gt;java-9&lt;/a&gt; 이상에서는 &lt;em&gt;컬렉션 리터럴을&lt;/em&gt; 사용하여-</target>
        </trans-unit>
        <trans-unit id="4bedfaecd6bf6c39bb530e65537dde74279d47c4" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Guava&quot;&gt;Guava&lt;/a&gt; you can write:</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Guava&quot;&gt;구아바&lt;/a&gt; 를 사용하면 다음과 같이 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be540c5ba930e7ba97b8287c64504f75c6f74941" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;Eclipse Collections&lt;/a&gt; you can write the following:</source>
          <target state="translated">&lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;Eclipse Collections&lt;/a&gt; 를 사용하면 다음을 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="47ce7cd7170c77d356893b4a061231cf7ae35f68" translate="yes" xml:space="preserve">
          <source>With &lt;strong&gt;Java 10&lt;/strong&gt; or later, this can be shortened with the &lt;code&gt;var&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;strong&gt;Java 10&lt;/strong&gt; 이상에서는 &lt;code&gt;var&lt;/code&gt; 키워드를 사용하여 단축 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b88d8a340b6a0a895f6cdca934ef3f65f36a774e" translate="yes" xml:space="preserve">
          <source>With Java 8 or later you can use a &lt;code&gt;Stream&lt;/code&gt; which is more flexible:</source>
          <target state="translated">Java 8 이상에서는 더 유연한 &lt;code&gt;Stream&lt;/code&gt; 을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="21d17c70ca49dd6b99626a7c4b790d8fcd1c8fe3" translate="yes" xml:space="preserve">
          <source>Yes with the help of Arrays you can initialize array list in one line,</source>
          <target state="translated">예, Arrays의 도움으로 한 줄에 배열 목록을 초기화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3026d57b333e2cfccaab5d152ab6c02dde05fe4e" translate="yes" xml:space="preserve">
          <source>You can also be more specific about the types and whether they are Mutable or Immutable.</source>
          <target state="translated">유형과 변경 가능 여부 또는 불변 여부에 대해 더 구체적으로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e11fbd5da63912d50f746e5f2408089dea59e087" translate="yes" xml:space="preserve">
          <source>You can also do the same with Sets and Bags:</source>
          <target state="translated">세트와 가방에서도 동일한 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8b2581855b7f671e12499c5bc02ae0d74ebedcf" translate="yes" xml:space="preserve">
          <source>You can concatenate &lt;code&gt;Stream&lt;/code&gt;s:</source>
          <target state="translated">&lt;code&gt;Stream&lt;/code&gt; 을 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="43e37c99695a3f295fd5d6fa8ebddd91e96b273b" translate="yes" xml:space="preserve">
          <source>You can make &lt;code&gt;Arrays.asList&lt;/code&gt; even shorter with a static import:</source>
          <target state="translated">정적 가져 오기로 &lt;code&gt;Arrays.asList&lt;/code&gt; 를 더 짧게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7504f2d226217613b4681a79469a16175bc56a6e" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;StickyList&lt;/code&gt; from &lt;a href=&quot;http://www.cactoos.org&quot;&gt;Cactoos&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;StickyList&lt;/code&gt; 에서 &lt;a href=&quot;http://www.cactoos.org&quot;&gt;StickyList를&lt;/a&gt; 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="827fa3838bdc345dc679a9e867cf1226e6b8eac3" translate="yes" xml:space="preserve">
          <source>You can use the below statements:</source>
          <target state="translated">아래 진술을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="419c9fa7ecd4d939c55bac85e90184727c9e4e11" translate="yes" xml:space="preserve">
          <source>You could create a factory method:</source>
          <target state="translated">팩토리 메소드를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="901ae3945d2c28746ddcaa542c4f1b819cffbf87" translate="yes" xml:space="preserve">
          <source>You said you've declared the list as an &lt;code&gt;ArrayList&lt;/code&gt; in your code, but you should only do that if you're using some member of &lt;code&gt;ArrayList&lt;/code&gt; that's not in &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">코드에서 목록을 &lt;code&gt;ArrayList&lt;/code&gt; 로 선언했다고 말했지만 &lt;code&gt;ArrayList&lt;/code&gt; 에없는 ArrayList 멤버를 사용하는 경우에만해야합니다.</target>
        </trans-unit>
        <trans-unit id="2e5f6c722a68207c5d8a2ae16584826fa4c5ab96" translate="yes" xml:space="preserve">
          <source>but then you may want to do a &lt;code&gt;@SuppressWarnings(&quot;unchecked&quot;)&lt;/code&gt;.</source>
          <target state="translated">그러나 &lt;code&gt;@SuppressWarnings(&quot;unchecked&quot;)&lt;/code&gt; 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="8b174becb33fa5312e2a553fe2a5f2950acdfcb3" translate="yes" xml:space="preserve">
          <source>or in Java 8 or earlier:</source>
          <target state="translated">또는 Java 8 이하에서 :</target>
        </trans-unit>
        <trans-unit id="9dd834e2f6cf9110f59154309870f5e06f9a2052" translate="yes" xml:space="preserve">
          <source>or using &lt;code&gt;Stream&lt;/code&gt;:</source>
          <target state="translated">또는 &lt;code&gt;Stream&lt;/code&gt; 사용 :</target>
        </trans-unit>
        <trans-unit id="85dd1bacb3d83f88fed6056f8b7e7690797529cc" translate="yes" xml:space="preserve">
          <source>which is easily adapted to create a mutable list, if required:</source>
          <target state="translated">필요한 경우 변경 가능한 목록을 쉽게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="852f28ab72384f006e65d484501112a5cc3d8ea9" translate="yes" xml:space="preserve">
          <source>which is similar to &lt;a href=&quot;http://mail.openjdk.java.net/pipermail/coin-dev/2009-March/001193.html&quot;&gt;Collection Literals proposal&lt;/a&gt; as stated by @coobird. Further clarified in the JEP as well -</source>
          <target state="translated">이는 @coobird가 명시한 &lt;a href=&quot;http://mail.openjdk.java.net/pipermail/coin-dev/2009-March/001193.html&quot;&gt;Collection Literals 제안&lt;/a&gt; 과 유사합니다. JEP에서 더 명확히-</target>
        </trans-unit>
        <trans-unit id="ee71ebda44e2dc671943d14d6333655aa8766836" translate="yes" xml:space="preserve">
          <source>would become:</source>
          <target state="translated">될 것입니다 :</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
