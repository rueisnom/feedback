<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/10057671">
    <body>
      <group id="10057671">
        <trans-unit id="431a49cdeeb4d9cc84db522a2a5c3a2cdef9de47" translate="yes" xml:space="preserve">
          <source>(*) Incrementing the &lt;code&gt;refcount&lt;/code&gt; here sounds innocuous, but violates copy-on-write (COW) semantics: This means that we are going to modify the IAP of a refcount=2 array, while COW dictates that modifications can only be performed on refcount=1 values. This violation results in user-visible behavior change (while a COW is normally transparent) because the IAP change on the iterated array will be observable -- but only until the first non-IAP modification on the array. Instead, the three &quot;valid&quot; options would have been a) to always duplicate, b) do not increment the &lt;code&gt;refcount&lt;/code&gt; and thus allowing the iterated array to be arbitrarily modified in the loop or c) don't use the IAP at all (the PHP 7 solution).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（*）在&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;此处&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;增加&lt;/font&gt;&lt;/font&gt; &lt;code&gt;refcount&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;听起来无害，但违反了写时复制（COW）语义：这意味着我们将修改refcount = 2数组的IAP，而COW规定只能在refcount上执行修改= 1个值。这种违反会导致用户可见的行为更改（而COW通常是透明的），因为可以观察到迭代阵列上的IAP更改-但仅在阵列上进行首次非IAP修改之前。取而代之的是，三个&amp;ldquo;有效&amp;rdquo;选项是：a）始终重复，b）不增加&lt;/font&gt;&lt;/font&gt; &lt;code&gt;refcount&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，因此允许在循环中随意修改迭代数组，或者c）根本不使用IAP（ PHP 7解决方案）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0d2e82db9cb7a24724aefb22e69a8ef395189a72" translate="yes" xml:space="preserve">
          <source>...nothing that unexpected there, in fact it seems to support the &quot;copy of source&quot; theory.</source>
          <target state="translated">............没有什么出乎意料的,事实上,这似乎支持 &quot;复制源头 &quot;理论。</target>
        </trans-unit>
        <trans-unit id="f4497a3a12ac079d6abeb450ebe7f0a4fed04110" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://codepad.org/6n20ooMy&quot;&gt;Test case 3&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://codepad.org/6n20ooMy&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;测试用例3&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b69a24985ff01a40a778deb19291c02020c185b8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://codepad.org/7DIeObk9&quot;&gt;Test case 1&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://codepad.org/7DIeObk9&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;测试用例1&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b296351ad09fc5da5b353a825af3c80241645fce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://codepad.org/IfwJyTCL&quot;&gt;Test case 5&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://codepad.org/IfwJyTCL&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;测试用例5&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3e9f341ef07206e6d5fe4744f7d24db0a9be7420" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://codepad.org/JJp79xSd&quot;&gt;Test case 4&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://codepad.org/JJp79xSd&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;测试用例4&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4dfe8c8ddf3994b7c27afe0d0d0c0df19fe1f5ef" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://codepad.org/nirz6Ufh&quot;&gt;Test case 2&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://codepad.org/nirz6Ufh&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;测试用例2&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="92450a86cebc52bf0c89fb24add8360ca746b9b4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://php.net/Traversable&quot;&gt;&lt;code&gt;Traversable&lt;/code&gt;&lt;/a&gt; objects</source>
          <target state="translated">&lt;a href=&quot;http://php.net/Traversable&quot;&gt; &lt;code&gt;Traversable&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="908655cd3ea9b530395773a64ca419f237ea537f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$array&lt;/code&gt; have only single element, so as per the foreach execution, 1 assign to &lt;code&gt;$v&lt;/code&gt; and it don't have any other element to move pointer</source>
          <target state="translated">&lt;code&gt;$array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仅具有单个元素，因此按照foreach执行，将1分配给&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$v&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，并且没有其他元素可移动指针&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="938010d83c888eb8143f06ce28fb347711f9b87f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$array&lt;/code&gt; have two element, so now $array evaluate the zero indices and move the pointer by one. For first iteration of loop, added &lt;code&gt;$array['baz']=3;&lt;/code&gt; as pass by reference.</source>
          <target state="translated">&lt;code&gt;$array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有两个元素，所以现在$ array计算零索引并将指针移一。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于循环的第一次迭代，添加了&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$array['baz']=3;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;作为参考。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d1affd49fa1fb528431442ca255c166508d81d55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foreach&lt;/code&gt; supports iteration over three different kinds of values:</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;支持对三种不同类型的值进行迭代：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="abb2ca0c1e4616efa3f2efd4269ebebd90ad1322" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Explanation (quote from &lt;a href=&quot;http://www.php.net/manual/en/control-structures.foreach.php&quot;&gt;php.net&lt;/a&gt;):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;说明（引自&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.php.net/manual/en/control-structures.foreach.php&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;php.net&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1a4d3bc1f85063b4a7a1f3955f1173eaa16593fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE FOR PHP 7&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PHP 7的注意事项&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f1fb7fa83cec2cb2b2385d7b48d3c6aa0f897abb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It does not allow &lt;code&gt;original array indexes&lt;/code&gt; to be used as &lt;code&gt;references&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注意：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不允许将&lt;/font&gt;&lt;/font&gt; &lt;code&gt;original array indexes&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;用作&lt;/font&gt;&lt;/font&gt; &lt;code&gt;references&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3ccfff51da82250c6945871fe29c0806ff574c48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Output:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Output:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e390762dc699d870f965a304fb7cfab2643240d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Test case&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;测试用例&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="064c7a4ed7767e83cfb50fc272e79514ccda566e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Question&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;问题&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8eaecf9e823bcd133564dce45ba4540f14164da4" translate="yes" xml:space="preserve">
          <source>A good way to show the various duplication behaviors is to observe the behavior of the  &lt;code&gt;current()&lt;/code&gt; function inside a &lt;code&gt;foreach&lt;/code&gt; loop. Consider this example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;显示各种复制行为的一个好方法是观察&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;循环中&lt;/font&gt;&lt;/font&gt; &lt;code&gt;current()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的行为 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;考虑以下示例：&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="236e1d04f916381e46584894a84e93c220049445" translate="yes" xml:space="preserve">
          <source>Another consequence of the &lt;code&gt;HashPointer&lt;/code&gt; backup+restore mechanism is that changes to the IAP through &lt;code&gt;reset()&lt;/code&gt; etc. usually do not impact &lt;code&gt;foreach&lt;/code&gt;. For example, the following code executes as if the &lt;code&gt;reset()&lt;/code&gt; were not present at all:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;HashPointer&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;备份+还原机制的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;另一个结果&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是，通过&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reset()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;等&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对IAP的更改&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通常不会影响&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如，执行以下代码，就好像&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;根本不存在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reset()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一样：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea6e6c9833112d231a15e75686626599f59cf2f4" translate="yes" xml:space="preserve">
          <source>Another important change between PHP 5 and PHP 7 relates to array duplication. Now that the IAP is no longer used, by-value array iteration will only do a &lt;code&gt;refcount&lt;/code&gt; increment (instead of duplication the array) in all cases. If the array is modified during the &lt;code&gt;foreach&lt;/code&gt; loop, at that point a duplication will occur (according to copy-on-write) and &lt;code&gt;foreach&lt;/code&gt; will keep working on the old array.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PHP 5和PHP 7之间的另一个重要变化涉及数组复制。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在，不再使用IAP，按值数组迭代将&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在所有情况下&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仅&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;增加&lt;/font&gt;&lt;/font&gt; &lt;code&gt;refcount&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（而不是复制数组）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;循环中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;修改了数组&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，则将发生复制（根据写时复制），并且&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将继续在旧数组上工作。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30f8495f70ccc77cad7c101cec7ef97f79d5b290" translate="yes" xml:space="preserve">
          <source>Another small variation, this time we'll assign the array to another variable:</source>
          <target state="translated">另一个小变化,这一次我们将把数组分配给另一个变量。</target>
        </trans-unit>
        <trans-unit id="6061b59ca687ed0aca907a08cf7627241a0b0ecc" translate="yes" xml:space="preserve">
          <source>Another weird edge case that is fixed now, is the odd effect you get when you remove and add elements that happen to have the same hash:</source>
          <target state="translated">另一个奇怪的边缘情况现在已经被修复了,那就是当你删除和添加的元素刚好有相同的哈希时,你会得到奇怪的效果。</target>
        </trans-unit>
        <trans-unit id="7b3c4b65d9376f8f346fae1a7e1f345e86a60260" translate="yes" xml:space="preserve">
          <source>Any changes from the original can't be notices, actually there are no changes from the original, even though you clearly assigned a value to $item. This is because you are operating on $item as it appears in the copy of $set being worked on. You can override this by grabbing $item by reference, like so:</source>
          <target state="translated">任何从原始的变化都不能被通知,实际上,即使你明确地给$item分配了一个值,也没有从原始的变化。这是因为你是在$item上操作的,因为它出现在$set的副本中。你可以通过引用抓取$item来覆盖这一点,就像这样。</target>
        </trans-unit>
        <trans-unit id="35db9b2dbbaebbc8cf821369cbcf483b3bfde43a" translate="yes" xml:space="preserve">
          <source>Array duplication</source>
          <target state="translated">阵列复制</target>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="823c6eac545f4e9f53730659ec02d448a1a05736" translate="yes" xml:space="preserve">
          <source>Arrays in PHP 5 have one dedicated &quot;internal array pointer&quot; (IAP), which properly supports modifications: Whenever an element is removed, there will be a check whether the IAP points to this element. If it does, it is advanced to the next element instead.</source>
          <target state="translated">在PHP 5中,数组有一个专门的 &quot;内部数组指针&quot;(IAP),它可以正确地支持修改。每当一个元素被删除时,就会检查IAP是否指向这个元素。如果指向这个元素,则会被推进到下一个元素。</target>
        </trans-unit>
        <trans-unit id="f75e47ce74e53d29a3f08bdad31252a7f301d27e" translate="yes" xml:space="preserve">
          <source>As a last preliminary, it should be noted that PHP uses reference counting and copy-on-write to manage memory. This means that if you &quot;copy&quot; a value, you actually just reuse the old value and increment its reference count (refcount). Only once you perform some kind of modification a real copy (called a &quot;duplication&quot;) will be done. See &lt;a href=&quot;http://blog.golemon.com/2007/01/youre-being-lied-to.html&quot;&gt;You're being lied to&lt;/a&gt; for a more extensive introduction on this topic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最后，应该注意的是PHP使用引用计数和写时复制来管理内存。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这意味着，如果您&amp;ldquo;复制&amp;rdquo;一个值，则实际上只是重用旧值并增加其引用计数（refcount）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仅当您执行某种修改后，才会完成真实副本（称为&amp;ldquo;复制&amp;rdquo;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请参阅&amp;ldquo; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blog.golemon.com/2007/01/youre-being-lied-to.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您被骗了&amp;rdquo;，以&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;获取有关此主题的更广泛的介绍。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="542892a9365ec273fecd375c7e489fa48476131d" translate="yes" xml:space="preserve">
          <source>As foreach relies on the internal array pointer changing it within the loop may lead to unexpected behavior.</source>
          <target state="translated">因为foreach依赖于内部数组指针,在循环中改变它可能会导致意外的行为。</target>
        </trans-unit>
        <trans-unit id="baa3dd2721745beae2d7d04883df796d03dc88ac" translate="yes" xml:space="preserve">
          <source>As it is shown in the example, PHP copied $set and used it to loop over, but when $set was used inside the loop, PHP added the variables to the original array, not the copied array. Basically, PHP is only using the copied array for the execution of the loop and the assignment of $item. Because of this, the loop above only executes 3 times, and each time it appends another value to the end of the original $set, leaving the original $set with 6 elements, but never entering an infinite loop.</source>
          <target state="translated">从例子中可以看出,PHP复制了$set,然后用它来循环,但是当$set在循环内部使用时,PHP将变量添加到原来的数组中,而不是复制的数组。基本上,PHP在执行循环时,只使用复制的数组来执行循环,并对$item进行赋值。正因为如此,上面的循环只执行了3次,每次循环都会在原$set的末尾再追加一个值,使原$set只剩下6个元素,但从未进入无限循环。</target>
        </trans-unit>
        <trans-unit id="ab66544e20bcc6d22c26b016a5bf97297360d4e1" translate="yes" xml:space="preserve">
          <source>As per the documentation provided by PHP manual.</source>
          <target state="translated">根据PHP手册提供的文档,。</target>
        </trans-unit>
        <trans-unit id="9e594b71f6bced954d7ae590b3a25fb57f21e1c4" translate="yes" xml:space="preserve">
          <source>As you can see in this case PHP will just start iterating the other entity from the start once the substitution has happened.</source>
          <target state="translated">在这种情况下,你可以看到,在这种情况下,一旦发生了替换,PHP就会直接开始迭代其他实体。</target>
        </trans-unit>
        <trans-unit id="20f262f66c271e4ab3c91dc621f3473494822a99" translate="yes" xml:space="preserve">
          <source>As you can see, the outer loop no longer aborts after the first iteration. The reason is that both loops now have entirely separate hashtable iterators, and there is no longer any cross-contamination of both loops through a shared IAP.</source>
          <target state="translated">如你所见,外循环在第一次迭代后不再中止。原因在于,现在两个循环都有完全独立的hashtable迭代器,而且两个循环之间不再存在通过共享IAP的交叉污染。</target>
        </trans-unit>
        <trans-unit id="a96acebafe34ace0cbf6ab97e41de8fa2b59af23" translate="yes" xml:space="preserve">
          <source>Besides this, php does allow to use &lt;code&gt;iterated values as a reference to the original array value&lt;/code&gt; as well. This is demonstrated below:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;除此之外，php确实允许使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;iterated values as a reference to the original array value&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如下所示：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9c1322fef9f585e5e7154becbb7d1228383785b9" translate="yes" xml:space="preserve">
          <source>But in your second example:</source>
          <target state="translated">但在你的第二个例子中。</target>
        </trans-unit>
        <trans-unit id="61cf77a4a315dd7e9e2390f03668bfecb9f6a3df" translate="yes" xml:space="preserve">
          <source>But, those examples are still sane. The real fun starts if you remember that the &lt;code&gt;HashPointer&lt;/code&gt; restore uses a pointer to the element and its hash to determine whether it still exists. But: Hashes have collisions, and pointers can be reused! This means that, with a careful choice of array keys, we can make &lt;code&gt;foreach&lt;/code&gt; believe that an element that has been removed still exists, so it will jump directly to it. An example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，那些例子仍然很理智。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您还记得&lt;/font&gt;&lt;/font&gt; &lt;code&gt;HashPointer&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;还原使用指向该元素的指针及其哈希来确定其是否仍然存在&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，那么真正的乐趣就开始了&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是：哈希有冲突，并且指针可以重用！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这意味着，通过谨慎选择数组键，我们可以让&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;相信已删除的元素仍然存在，因此它将直接跳转到该元素。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一个例子：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a873ee1119a94396aced11abeb0cd2d2207ad6e6" translate="yes" xml:space="preserve">
          <source>Coming back to your test cases, you can easily imagine that &lt;code&gt;foreach&lt;/code&gt; creates some kind of iterator with a reference to the array. This reference works exactly like the variable &lt;code&gt;$b&lt;/code&gt; in my example. However, the iterator along with the reference live only during the loop and then, they are both discarded. Now you can see that, in all cases but 3, the array is modified during the loop, while this extra reference is alive. This triggers a clone, and that explains what's going on here!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;回到测试用例，您可以轻松地想象到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;创建了一种对数组的引用的迭代器。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该引用的工作方式与&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;示例中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的变量&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$b&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完全相同&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，迭代器和引用仅在循环期间存在，然后都被丢弃。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在您可以看到，在除3之外的所有情况下，在循环期间都将修改数组，而该额外引用仍然有效。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这会触发一个克隆，这说明了这里发生了什么！&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cd1908e73fa068ba357e7b95d943c7ecfbd21234" translate="yes" xml:space="preserve">
          <source>Consider these nested loops over the same array (where by-ref iteration is used to make sure it really is the same one):</source>
          <target state="translated">考虑这些在同一个数组上的嵌套循环(其中通过反推迭代来确定它真的是同一个数组)。</target>
        </trans-unit>
        <trans-unit id="befcb9dd75c6dd0a10f8bd95a14d34e8993a4204" translate="yes" xml:space="preserve">
          <source>Consider this code as an example where duplication occurs:</source>
          <target state="translated">以此代码为例,将其视为发生重复的例子。</target>
        </trans-unit>
        <trans-unit id="57d82a24fd4de958c3356e0910b2308cb05d3c6e" translate="yes" xml:space="preserve">
          <source>Detailed explanation can be read at &lt;a href=&quot;https://stackoverflow.com/questions/10057671/how-foreach-actually-works&quot;&gt;How does PHP 'foreach' actually work?&lt;/a&gt; which explains the internals behind this behaviour.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有关详细说明，请&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/10057671/how-foreach-actually-works&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参见PHP'foreach'实际如何工作？&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这解释了此行为背后的内部原理。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="7ec6a83aa93501181bc76d815fd97e699db2e256" translate="yes" xml:space="preserve">
          <source>Examples: Effects of &lt;code&gt;current&lt;/code&gt; in foreach</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;示例：&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;foreach &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中&lt;/font&gt;&lt;/font&gt; &lt;code&gt;current&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;影响&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d80b3f40876bd05acd5f02160f3241ab742c26e" translate="yes" xml:space="preserve">
          <source>Examples: Modification during iteration</source>
          <target state="translated">举例说明。迭代期间的修改</target>
        </trans-unit>
        <trans-unit id="7014583239968e6f988f3c793a9d2a3bc8292bd9" translate="yes" xml:space="preserve">
          <source>Examples: Your test cases</source>
          <target state="translated">举例说明。你的测试用例</target>
        </trans-unit>
        <trans-unit id="eaf82d3114000fbe7543dd6911539ba662528cba" translate="yes" xml:space="preserve">
          <source>For a long time I assumed that &lt;code&gt;foreach&lt;/code&gt; worked with the array itself. Then I found many references to the fact that it works with a &lt;em&gt;copy&lt;/em&gt; of the array, and I have since assumed this to be the end of the story. But I recently got into a discussion on the matter, and after a little experimentation found that this was not in fact 100% true.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;很长时间以来，我一直认为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与数组本身一起工作。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;然后，我发现了很多关于它可以与&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数组&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;副本&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一起使用的事实的引用，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从那时起，我一直以为这是故事的结尾。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是我最近对此事进行了讨论，经过一番实验后发现这实际上并非100％正确。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="99743dc1e1b371509b02b41756d7ef22f8ef3712" translate="yes" xml:space="preserve">
          <source>For internal classes, actual method calls are avoided by using an internal API that essentially just mirrors the &lt;code&gt;Iterator&lt;/code&gt; interface on the C level.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于内部类，通过使用实质上只是&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在C级别上&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;镜像&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;接口&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的内部API，可以避免实际的方法调用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="96beb39c41bbc50dd98ec331cb5f6ba16ae93074" translate="yes" xml:space="preserve">
          <source>Great question, because many developers, even experienced ones, are confused by the way PHP handles arrays in foreach loops. In the standard foreach loop, PHP makes a copy of the array that is used in the loop. The copy is discarded immediately after the loop finishes. This is transparent in the operation of a simple foreach loop. 
For example:</source>
          <target state="translated">很好的问题,因为很多开发者,甚至是有经验的开发者,都对PHP在foreach循环中处理数组的方式感到困惑。在标准的foreach循环中,PHP会对循环中使用的数组进行复制。循环结束后,这个副本会立即被丢弃。这在简单的foreach循环的操作中是透明的。比如说。</target>
        </trans-unit>
        <trans-unit id="75618f2aca443a65c28cb788bdb7a31c7622b2b8" translate="yes" xml:space="preserve">
          <source>Hashtable iterators</source>
          <target state="translated">Hashtable迭代器</target>
        </trans-unit>
        <trans-unit id="540ee2aaf7182c6dfc449b18e5accb694e3b0894" translate="yes" xml:space="preserve">
          <source>Here is an example:</source>
          <target state="translated">这里有一个例子。</target>
        </trans-unit>
        <trans-unit id="58bc8215af40743629373e4bc4e87df55c794abe" translate="yes" xml:space="preserve">
          <source>Here is an excellent article for another side effect of this copy-on-write behaviour: &lt;a href=&quot;http://fabien.potencier.org/article/48/the-php-ternary-operator-fast-or-not&quot;&gt;The PHP Ternary Operator: Fast or not?&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是一篇出色的文章，说明了这种写时复制行为的另一个副作用：&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://fabien.potencier.org/article/48/the-php-ternary-operator-fast-or-not&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PHP三元运算符：速度快与否？&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="06fc87efa1fa8d9ad8f989a7e8c9d55bd7acc20f" translate="yes" xml:space="preserve">
          <source>Here the important part is that foreach will make &lt;code&gt;$array&lt;/code&gt; an is_ref=1 when it is iterated by reference, so basically you have the same situation as above.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这里重要的是，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在通过引用进行迭代时&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，foreach将使&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;成为is_ref = 1，因此基本上您具有与上述相同的情况。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="10ef31c0a3f93f77487b87c511286a358a48ee73" translate="yes" xml:space="preserve">
          <source>Here the refcount of the &lt;code&gt;$array&lt;/code&gt; is 2 when the loop is started, so for once we actually have to do the duplication upfront. Thus &lt;code&gt;$array&lt;/code&gt; and the array used by foreach will be completely separate from the outset. That's why you get the position of the IAP wherever it was before the loop (in this case it was at the first position).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;开始循环时，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这里&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的引用计数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为2，因此实际上一次必须做一次复制。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和foreach所使用的数组将从一开始就完全分开。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这就是为什么要获得IAP在循环之前的位置的原因（在这种情况下，它位于第一个位置）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9320a0e42c4e40c9d72e4f533951976eb7d6cedf" translate="yes" xml:space="preserve">
          <source>Here we have the is_ref=1 case, so the array is not copied (just like above). But now that it is a reference, the array no longer has to be duplicated when passing to the by-ref &lt;code&gt;current()&lt;/code&gt; function. Thus &lt;code&gt;current()&lt;/code&gt; and &lt;code&gt;foreach&lt;/code&gt; work on the same array. You still see the off-by-one behavior though, due to the way &lt;code&gt;foreach&lt;/code&gt; advances the pointer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这里有is_ref = 1的情况，因此不复制数组（就像上面一样）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，既然它是一个引用，则在传递给by-ref &lt;/font&gt;&lt;/font&gt; &lt;code&gt;current()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;时，不再需要复制该数组&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;current()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在同一数组上工作。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，由于&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;前进指针&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的方式，您仍然看到偏离行为&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c78f9c618fca247dc03a5d8ccd4502643dd21c69" translate="yes" xml:space="preserve">
          <source>Here we should normally expect the output &lt;code&gt;1, 1, 3, 4&lt;/code&gt; according to the previous rules. How what happens is that &lt;code&gt;'FYFY'&lt;/code&gt; has the same hash as the removed element &lt;code&gt;'EzFY'&lt;/code&gt;, and the allocator happens to reuse the same memory location to store the element. So foreach ends up directly jumping to the newly inserted element, thus short-cutting the loop.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这里，我们应该通常期望的输出&lt;/font&gt;&lt;/font&gt; &lt;code&gt;1, 1, 3, 4&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，根据以往的规则。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;发生什么情况是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;'FYFY'&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;具有与删除的元素&lt;/font&gt;&lt;/font&gt; &lt;code&gt;'EzFY'&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;相同的哈希&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，并且分配器恰巧重用了相同的内存位置来存储该元素。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，foreach最终直接跳转到新插入的元素，从而缩短了循环。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b09c9e6cdc88c66a96f4f93e25e90ddea554a4e6" translate="yes" xml:space="preserve">
          <source>Here you should know that &lt;code&gt;current()&lt;/code&gt; is a by-ref function (actually: prefer-ref), even though it does not modify the array. It has to be in order to play nice with all the other functions like &lt;code&gt;next&lt;/code&gt; which are all by-ref. By-reference passing implies that the array has to be separated and thus &lt;code&gt;$array&lt;/code&gt; and the &lt;code&gt;foreach-array&lt;/code&gt; will be different. The reason you get &lt;code&gt;2&lt;/code&gt; instead of &lt;code&gt;1&lt;/code&gt; is also mentioned above: &lt;code&gt;foreach&lt;/code&gt; advances the array pointer &lt;em&gt;before&lt;/em&gt; running the user code, not after. So even though the code is at the first element, &lt;code&gt;foreach&lt;/code&gt; already advanced the pointer to the second.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这里，您应该知道&lt;/font&gt;&lt;/font&gt; &lt;code&gt;current()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是一个by-ref函数（实际上是：referr-ref），即使它不修改数组也是如此。必须与所有其他功能（如&lt;/font&gt;&lt;/font&gt; &lt;code&gt;next&lt;/code&gt; )一起使用&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，它们都是by-ref。通过引用传递意味着必须将数组分开，因此&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach-array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将不同。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上面还提到了&lt;/font&gt;&lt;/font&gt; &lt;code&gt;2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而不是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的原因&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;运行用户代码&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;之前&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（而不是之后）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;推进数组指针&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。因此，即使代码位于第一个元素，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; 也&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;已将指针前进到第二个&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;元素&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1e2c11296f52e3c33b435c41a2c9058141794dda" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;$arr&lt;/code&gt; will be duplicated to prevent IAP changes on &lt;code&gt;$arr&lt;/code&gt; from leaking to &lt;code&gt;$outerArr&lt;/code&gt;. In terms of the conditions above, the array is not a reference (is_ref=0) and is used in two places (refcount=2). This requirement is unfortunate and an artifact of the suboptimal implementation (there is no concern of modification during iteration here, so we don't really need to use the IAP in the first place).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这里，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将复制&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$arr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以防止&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$arr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上的IAP更改&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;泄漏到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$outerArr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;根据上述条件，该数组不是引用（is_ref = 0），并且在两个地方使用（refcount = 2）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不幸的是，此要求是次佳实现的产物（这里没有考虑迭代过程中的修改，因此我们实际上并不需要首先使用IAP）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71f26286c42873f72392d673b048fc981f68e484" translate="yes" xml:space="preserve">
          <source>How does PHP 'foreach' actually work</source>
          <target state="translated">PHP的 &quot;foreach &quot;究竟是如何工作的</target>
        </trans-unit>
        <trans-unit id="4d7dd5b09fef4fbc13b52490cc8353aa7c961d78" translate="yes" xml:space="preserve">
          <source>However &lt;code&gt;foreach&lt;/code&gt;, being a rather special snowflake, chooses to do things slightly differently:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是一个非常特殊的雪花，它选择做的事情略有不同：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a31efb1a52d63389e065a96d4038859b40f71b1e" translate="yes" xml:space="preserve">
          <source>However, we get some interesting changes when considering modifications during iteration. I hope you will find the new behavior saner. The first example:</source>
          <target state="translated">然而,在迭代过程中考虑修改时,我们会得到一些有趣的变化。我希望你会发现新的行为更理智。第一个例子。</target>
        </trans-unit>
        <trans-unit id="a61c4d96bcc3da5af6ed31ee756e7c946152cca3" translate="yes" xml:space="preserve">
          <source>However, what if we had used $item by reference, as I mentioned before? A single character added to the above test:</source>
          <target state="translated">然而,如果我们像我之前提到的那样,用$item by reference,那该怎么办?在上面的测试中加入了一个字符。</target>
        </trans-unit>
        <trans-unit id="c00ef429043163e498185705691978c68ce29357" translate="yes" xml:space="preserve">
          <source>I believe that this is all consequence of &lt;strong&gt;On each iteration&lt;/strong&gt; part of the explanation in the documentation, which probably means that &lt;code&gt;foreach&lt;/code&gt; does all logic before it calls the code in &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我相信，这都是&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;文档中说明的&amp;ldquo; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;每次迭代&amp;rdquo;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;部分的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;全部结果&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，这可能意味着&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在调用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;{}&lt;/code&gt; 中&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的代码之前先进行所有逻辑&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b4697e7e52d5799d87464f9e9fddb553071695d6" translate="yes" xml:space="preserve">
          <source>If not, what is it really doing?</source>
          <target state="translated">如果不是,它到底在做什么?</target>
        </trans-unit>
        <trans-unit id="2a829325bc6b57c4325ab8e0937f30c13ff8ee66" translate="yes" xml:space="preserve">
          <source>If the array is not duplicated (is_ref=0, refcount=1), then only its &lt;code&gt;refcount&lt;/code&gt; will be incremented (*). Additionally, if &lt;code&gt;foreach&lt;/code&gt; by reference is used, then the (potentially duplicated) array will be turned into a reference.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果数组不重复（is_ref = 0，refcount = 1），则仅其&lt;/font&gt;&lt;/font&gt; &lt;code&gt;refcount&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将递增（*）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;此外，如果&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用按引用的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，则（可能重复的）数组将变为引用。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="78dc274491d6ca8054a1f088bedca2ccdc345189" translate="yes" xml:space="preserve">
          <source>If we look in the &lt;a href=&quot;http://php.net/manual/en/control-structures.foreach.php&quot;&gt;manual&lt;/a&gt;, we find this statement:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果查看&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://php.net/manual/en/control-structures.foreach.php&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;手册&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，则会发现以下语句：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e55a1d14766bac174bfd5d5e0ed5c6eddea5d0fd" translate="yes" xml:space="preserve">
          <source>If you iterate by reference using &lt;code&gt;foreach ($arr as &amp;amp;$v)&lt;/code&gt; then &lt;code&gt;$arr&lt;/code&gt; is turned into a reference and you can change it during iteration.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach ($arr as &amp;amp;$v)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通过引用进行迭代，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;则&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$arr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将变为引用，您可以在迭代期间进行更改。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6f6bafee81d8af7c1d8fe3a7d35b1e1d5276370d" translate="yes" xml:space="preserve">
          <source>If you run this:</source>
          <target state="translated">如果你运行这个。</target>
        </trans-unit>
        <trans-unit id="f1c3d02b13b81fde5e463b3c1e3481a89c040f02" translate="yes" xml:space="preserve">
          <source>If you still remember, the main problem with array iteration was how to handle removal of elements mid-iteration. PHP 5 used a single internal array pointer (IAP) for this purpose, which was somewhat suboptimal, as one array pointer had to be stretched to support multiple simultaneous foreach loops &lt;em&gt;and&lt;/em&gt; interaction with &lt;code&gt;reset()&lt;/code&gt; etc. on top of that.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您还记得，数组迭代的主要问题是如何处理中间迭代中的元素删除。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为此，PHP 5使用了一个内部数组指针（IAP），这有些次优，因为必须扩展一个数组指针以支持多个同时的foreach循环&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以及&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reset()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;等的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;交互&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="02f297f5905381c7400f2b6935063eab3c3035ae" translate="yes" xml:space="preserve">
          <source>In PHP 5 the same applies even if you iterate by value, but the array was a reference beforehand: &lt;code&gt;$ref =&amp;amp; $arr; foreach ($ref as $v)&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在PHP 5中，即使您按值进行迭代也是如此，但是该数组是预先引用的：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$ref =&amp;amp; $arr; foreach ($ref as $v)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c31012f51272cbd314bdcd5bbcfff2fc3b76f9e3" translate="yes" xml:space="preserve">
          <source>In example 3 you don't modify the array. In all other examples you modify either the contents or the internal array pointer. This is important when it comes to &lt;a href=&quot;http://en.wikipedia.org/wiki/PHP&quot;&gt;PHP&lt;/a&gt; arrays because of the semantics of the assignment operator.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在示例3中，您无需修改​​数组。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在所有其他示例中，您将修改内容或内部数组指针。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;由于赋值运算符的语义，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这在涉及&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/PHP&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PHP&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数组&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;时非常重要&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="22ede99ce8e51107137227faf74df0b592c69a53" translate="yes" xml:space="preserve">
          <source>In foreach loop, the first thing php does is that it creates a copy of the array which is to be iterated over. PHP then iterates over this new &lt;code&gt;copy&lt;/code&gt; of the array rather than the original one. This is demonstrated in the below example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在foreach循环中，php要做的第一件事是它创建要迭代的数组副本。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;然后，PHP遍历此&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数组的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新&lt;/font&gt;&lt;/font&gt; &lt;code&gt;copy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，而不是原始&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;副本&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在以下示例中对此进行了演示：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="134677d03213db70953d47c1bffdab544c9f93e4" translate="yes" xml:space="preserve">
          <source>In most cases, this change is transparent and has no other effect than better performance. However, there is one occasion where it results in different behavior, namely the case where the array was a reference beforehand:</source>
          <target state="translated">在大多数情况下,这种改变是透明的,除了性能更好之外,没有其他影响。但是,有一种情况下,它导致了不同的行为,那就是数组之前是参考的情况。</target>
        </trans-unit>
        <trans-unit id="8d13b49c0d0dcf6c67a637aa73c5a0309f5ed373" translate="yes" xml:space="preserve">
          <source>In test case 3, once again the array is not duplicated, thus &lt;code&gt;foreach&lt;/code&gt; will be modifying the IAP of the &lt;code&gt;$array&lt;/code&gt; variable. At the end of the iteration, the IAP is NULL (meaning iteration has done), which &lt;code&gt;each&lt;/code&gt; indicates by returning &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在测试用例3中，数组不再重复，因此&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将修改&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;变量&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的IAP &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在迭代结束时，IAP为NULL（表示迭代已完成），&lt;/font&gt;&lt;/font&gt; &lt;code&gt;each&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通过返回&lt;/font&gt;&lt;/font&gt; &lt;code&gt;false&lt;/code&gt; 来&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指示&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="33d269e7a4a764b049b79e9cb1f9e20dc83243c4" translate="yes" xml:space="preserve">
          <source>In test cases 1 and 2 &lt;code&gt;$array&lt;/code&gt; starts off with refcount=1, so it will not be duplicated by &lt;code&gt;foreach&lt;/code&gt;: Only the &lt;code&gt;refcount&lt;/code&gt; is incremented. When the loop body subsequently modifies the array (which has refcount=2 at that point), the duplication will occur at that point. Foreach will continue working on an unmodified copy of &lt;code&gt;$array&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在测试用例1和2中，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从refcount = 1开始，因此它不会被&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;复制&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：仅&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;增加&lt;/font&gt;&lt;/font&gt; &lt;code&gt;refcount&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当循环体随后修改数组时（此时refcount = 2），复制将在该点进行。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Foreach将继续处理&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的未修改副本&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1dbfb1adb9e84f34a26cf1ef4549ca5fdf33e6ac" translate="yes" xml:space="preserve">
          <source>In test cases 4 and 5 both &lt;code&gt;each&lt;/code&gt; and &lt;code&gt;reset&lt;/code&gt; are by-reference functions. The &lt;code&gt;$array&lt;/code&gt; has a &lt;code&gt;refcount=2&lt;/code&gt; when it is passed to them, so it has to be duplicated. As such &lt;code&gt;foreach&lt;/code&gt; will be working on a separate array again.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在测试用例4和5中，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;each&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reset&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;都是参考功能。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;具有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;refcount=2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;时它被传递给它们，所以它必须被重复。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这样，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将再次在单独的数组上工作。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6ed0a58bec9d6612b04799a17cd5f6d6fef8450f" translate="yes" xml:space="preserve">
          <source>In the following, I will try to explain precisely how iteration works in different cases. By far the simplest case is &lt;code&gt;Traversable&lt;/code&gt; objects, as for these &lt;code&gt;foreach&lt;/code&gt; is essentially only syntax sugar for code along these lines:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在下文中，我将尝试精确地解释迭代在不同情况下的工作方式。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;到目前为止，最简单的情况是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Traversable&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象，因为这些&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;本质上仅是沿着这些行的代码的语法糖：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c7339506450bbac19831889ae44122066b7fe107" translate="yes" xml:space="preserve">
          <source>In your second example, you start with two elements, and foreach loop is not at the last element so it evaluates the array on the next iteration and thus realises that there is new element in the array.</source>
          <target state="translated">在你的第二个例子中,你从两个元素开始,foreach循环不在最后一个元素处,所以它在下一次迭代时对数组进行评估,从而意识到数组中存在新的元素。</target>
        </trans-unit>
        <trans-unit id="fde8dd98d7e3c5d285a56193ed177dd2ac066399" translate="yes" xml:space="preserve">
          <source>Internal array pointer and HashPointer</source>
          <target state="translated">内部数组指针和HashPointer</target>
        </trans-unit>
        <trans-unit id="55351291e1c5fef6a45bef8efd585915f3bd479a" translate="yes" xml:space="preserve">
          <source>Is there any situation where using functions that adjust the array pointer (&lt;code&gt;each()&lt;/code&gt;, &lt;code&gt;reset()&lt;/code&gt; et al.) during a &lt;code&gt;foreach&lt;/code&gt; could affect the outcome of the loop?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是否有任何情况在&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;期间&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用调整数组指针的函数（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;each()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reset()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;等）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;会影响循环的结果？&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bfb1d36860bfa186a30dd861585a17c395ef9f61" translate="yes" xml:space="preserve">
          <source>Is this correct and the whole story?</source>
          <target state="translated">这是正确的,也是整个故事的真相吗?</target>
        </trans-unit>
        <trans-unit id="7bb8345349d5d2faf3d2e667f6fed8801fadc203" translate="yes" xml:space="preserve">
          <source>It seems to me that &lt;code&gt;foreach&lt;/code&gt; works with a &lt;em&gt;copy&lt;/em&gt; of the array, but sets the array pointer of the source array to the end of the array after the loop.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在我看来，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数组&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;副本&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，但是在循环之后将源数组的数组指针设置为数组的末尾。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d2d00199b28cd212143ebd236537b2023ca47451" translate="yes" xml:space="preserve">
          <source>Iteration of arrays and plain objects is significantly more complicated. First of all, it should be noted that in PHP &quot;arrays&quot; are really ordered dictionaries and they will be traversed according to this order (which matches the insertion order as long as you didn't use something like &lt;code&gt;sort&lt;/code&gt;). This is opposed to iterating by the natural order of the keys (how lists in other languages often work) or having no defined order at all (how dictionaries in other languages often work).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数组和普通对象的迭代要复杂得多。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;首先，应该指出的是，在PHP中，&amp;ldquo;数组&amp;rdquo;实际上是有序的字典，它们将根据此顺序遍历（只要您不使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;sort&lt;/code&gt; 等&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;东西，它们就与插入顺序匹配&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这与通过键的自然顺序（其他语言的列表通常如何工作）或根本没有定义的顺序（其他语言的词典通常如何工作）进行迭代相反。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c0d7e336b7b454ce37f9f414661d83e60fed3826" translate="yes" xml:space="preserve">
          <source>Let me prefix this by saying that I know what &lt;code&gt;foreach&lt;/code&gt; is, does and how to use it. This question concerns how it works under the bonnet, and I don't want any answers along the lines of &quot;this is how you loop an array with &lt;code&gt;foreach&lt;/code&gt;&quot;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;首先，我要说一下我知道&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;什么&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，做&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;什么&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以及如何使用它。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这个问题关系到它在引擎盖下如何工作，我不希望&amp;ldquo;这就是使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;循环数组的方式&amp;rdquo;的任何答案&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b63928b527f92fb71f4104a7bd7acfb52f9d816d" translate="yes" xml:space="preserve">
          <source>Let me show what I mean. For the following test cases, we will be working with the following array:</source>
          <target state="translated">让我展示一下我的意思。在下面的测试用例中,我们将使用下面的数组。</target>
        </trans-unit>
        <trans-unit id="f751c6687bfd848ca5a2e2261174f789d8ab95d8" translate="yes" xml:space="preserve">
          <source>Let's consider a few examples, starting with your test cases:</source>
          <target state="translated">让我们考虑几个例子,从你的测试用例开始。</target>
        </trans-unit>
        <trans-unit id="3097fd5b0d5d815f05c7fe33aaa245060a3bf92e" translate="yes" xml:space="preserve">
          <source>Namely, the array pointer is already moved forward &lt;em&gt;before&lt;/em&gt; the loop body runs. This means that while the loop body is working on element &lt;code&gt;$i&lt;/code&gt;, the IAP is already at element &lt;code&gt;$i+1&lt;/code&gt;. This is the reason why code samples showing modification during iteration will always &lt;code&gt;unset&lt;/code&gt; the &lt;em&gt;next&lt;/em&gt; element, rather than the current one.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;即，在&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;循环体运行&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;之前&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，数组指针已经向前移动&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这意味着，当循环体在元素&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上工作时&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，IAP已在元素&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$i+1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这就是为什么表示迭代期间修改代码样本将一直原因&lt;/font&gt;&lt;/font&gt; &lt;code&gt;unset&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;下一个&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;元件，而不是当前的。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="40a05dbc2f0a8aa4f92fc60f38c31f2f5d423ec4" translate="yes" xml:space="preserve">
          <source>Normal objects</source>
          <target state="translated">普通对象</target>
        </trans-unit>
        <trans-unit id="e08a5016973ce24d28ac18e9fdb6932843bef710" translate="yes" xml:space="preserve">
          <source>Now lets try a small modification:</source>
          <target state="translated">现在,让我们试着做个小修改。</target>
        </trans-unit>
        <trans-unit id="5656010570fbcc2ba537a9c5378cc92d8408d098" translate="yes" xml:space="preserve">
          <source>Objects have by-handle passing semantics, which for most practical purposes means that they behave like references. So objects can always be changed during iteration.</source>
          <target state="translated">对象具有by-handle传递语义,对于大多数实际目的来说,这意味着它们的行为就像引用一样。所以在迭代过程中,对象总是可以被改变。</target>
        </trans-unit>
        <trans-unit id="7c216b53de040b00d089894dd8ddbc5bde03d966" translate="yes" xml:space="preserve">
          <source>On each iteration, the value of the current element is assigned to $v and the internal</source>
          <target state="translated">在每次迭代时,当前元素的值被分配给$v,内部的</target>
        </trans-unit>
        <trans-unit id="a4f99d71c5a8b263015886cdb2f907d0ce4d1a2e" translate="yes" xml:space="preserve">
          <source>One last odd case that I'd like to mention, it is that PHP allows you to substitute the iterated entity during the loop. So you can start iterating on one array and then replace it with another array halfway through. Or start iterating on an array and then replace it with an object:</source>
          <target state="translated">最后我想提一个奇怪的情况,那就是PHP允许你在循环中替换迭代实体。所以你可以在一个数组上开始迭代,然后中途用另一个数组替换。或者在一个数组上开始迭代,然后用一个对象替换。</target>
        </trans-unit>
        <trans-unit id="c242255b4e20b8454762a9c1cfc23f3f6bb8f097" translate="yes" xml:space="preserve">
          <source>PHP 5</source>
          <target state="translated">PHP 5</target>
        </trans-unit>
        <trans-unit id="084c3eec12a7ea0542a27183c70a323878c7d71b" translate="yes" xml:space="preserve">
          <source>PHP 7</source>
          <target state="translated">PHP 7</target>
        </trans-unit>
        <trans-unit id="5845f09d0ec80f31277ff6f4551cfaec806397d0" translate="yes" xml:space="preserve">
          <source>PHP 7 uses a different approach, namely, it supports creating an arbitrary amount of external, safe hashtable iterators. These iterators have to be registered in the array, from which point on they have the same semantics as the IAP: If an array element is removed, all hashtable iterators pointing to that element will be advanced to the next element.</source>
          <target state="translated">PHP 7使用了一种不同的方法,即支持创建任意数量的外部安全的哈希特able迭代器。这些迭代器必须在数组中注册,从这一点上看,它们具有与IAP相同的语义。如果一个数组元素被删除,所有指向该元素的hashhtable迭代器将被推进到下一个元素。</target>
        </trans-unit>
        <trans-unit id="34259c10ebcccdc96f1a84d84d17eb2f067ddea9" translate="yes" xml:space="preserve">
          <source>PHP foreach loop can be used with &lt;code&gt;Indexed arrays&lt;/code&gt;, &lt;code&gt;Associative arrays&lt;/code&gt; and &lt;code&gt;Object public variables&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PHP foreach循环可与&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Indexed arrays&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Associative arrays&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object public variables&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1c0047e404d6d99d4b1d7ddc87de51f778964b06" translate="yes" xml:space="preserve">
          <source>Position advancement order</source>
          <target state="translated">职位晋升顺序</target>
        </trans-unit>
        <trans-unit id="758faebc57cf11a657355347e9e4d05b49a43dde" translate="yes" xml:space="preserve">
          <source>Previously by-value iteration of reference-arrays was special cases. In this case, no duplication occurred, so all modifications of the array during iteration would be reflected by the loop. In PHP 7 this special case is gone: A by-value iteration of an array will &lt;strong&gt;always&lt;/strong&gt; keep working on the original elements, disregarding any modifications during the loop.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以前，引用数组的按值迭代是特殊情况。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这种情况下，不会发生重复，因此循环期间对阵列的所有修改都将由循环反映出来。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在PHP 7中，这种特殊情况不复存在：数组的按值迭代将&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;始终&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对原始元素进行处理，而无需考虑循环中的任何修改。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d0b70ce3dfe944d7a532ef64d990426ece003306" translate="yes" xml:space="preserve">
          <source>Previously the HashPointer restore mechanism jumped right to the new element because it &quot;looked&quot; like it's the same as the removed element (due to colliding hash and pointer). As we no longer rely on the element hash for anything, this is no longer an issue.</source>
          <target state="translated">以前,HashPointer还原机制会直接跳转到新元素,因为它 &quot;看起来 &quot;和被删除的元素是一样的(由于哈希和指针的碰撞)。由于我们不再依赖元素的哈希来做任何事情,这已经不是问题了。</target>
        </trans-unit>
        <trans-unit id="b2fef7d7e527879e31aa00e11336ca35080be717" translate="yes" xml:space="preserve">
          <source>Results in an infinite loop. Note this actually is an infinite loop, you&amp;rsquo;ll have to either kill the script yourself or wait for your OS to run out of memory. I added the following line to my script so PHP would run out of memory very quickly, I suggest you do the same if you&amp;rsquo;re going to be running these infinite loop tests:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;导致无限循环。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请注意，这实际上是一个无限循环，您必须自己杀死脚本或等待操作系统内存不足。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我将以下行添加到脚本中，以便PHP很快就会耗尽内存，如果您要运行这些无限循环测试，建议您这样做：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2f485176e25715d83c8d06eb7fb74f9a075ad672" translate="yes" xml:space="preserve">
          <source>Right... this seems to suggest that &lt;code&gt;foreach&lt;/code&gt; relies on the array pointer of the source array. But we've just proved that we're &lt;em&gt;not working with the source array&lt;/em&gt;, right? Well, not entirely.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对...这似乎表明，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依赖于源数组的数组指针。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是我们刚刚证明我们&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不使用源数组&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，对吗？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;好吧，不完全是。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="26851422c5fa9895c974ae2a35d04d45be56bf30" translate="yes" xml:space="preserve">
          <source>So as per your first example:</source>
          <target state="translated">所以按照你的第一个例子,</target>
        </trans-unit>
        <trans-unit id="a118c312dcc816d78542af9b056c14047650c765" translate="yes" xml:space="preserve">
          <source>So far, so good. Iterating over a dictionary can't be too hard, right? The problems begin when you realize that an array/object can change during iteration. There are multiple ways this can happen:</source>
          <target state="translated">到目前为止,还不错。迭代一个字典不会太难吧?当你意识到数组对象在迭代过程中会发生变化时,问题就开始了。有多种方式可以发生这种情况。</target>
        </trans-unit>
        <trans-unit id="22767625f947aff65dabcdc777a951ea58e15915" translate="yes" xml:space="preserve">
          <source>So in this previous example with the infinite loop, we see the reason why PHP was written to create a copy of the array to loop over. When a copy is created and used only by the structure of the loop construct itself, the array stays static throughout the execution of the loop, so you&amp;rsquo;ll never run into issues.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，在上一个带有无限循环的示例中，我们看到了编写PHP来创建要循环复制的数组的原因。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当创建副本并仅由循环结构本身的结构使用副本时，数组在整个循环执行过程中保持静态，因此您永远不会遇到问题。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a4810d33897e930efe44a50f6d87f8ce4b8c4edb" translate="yes" xml:space="preserve">
          <source>So it is evident and observable, when $item is operated on by-reference, the changes made to $item are made to the members of the original $set. Using $item by reference also prevents PHP from creating the array copy. To test this, first we&amp;rsquo;ll show a quick script demonstrating the copy:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，显而易见的是，当$ item通过引用操作时，对$ item所做的更改将对原始$ set的成员进行。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通过引用使用$ item还可以防止PHP创建数组副本。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为了测试这一点，首先我们将展示一个演示该副本的快速脚本：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e1a42e1f249741b6b1505dd1fe7c48630ed823c6" translate="yes" xml:space="preserve">
          <source>So the copy is created but the developer doesn't notice, because the original array isn&amp;rsquo;t referenced within the loop or after the loop finishes. However, when you attempt to modify the items in a loop, you find that they are unmodified when you finish:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此创建了副本，但开发人员没有注意到，因为在循环内或循环结束后未引用原始数组。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，当您尝试修改循环中的项目时，发现完成后它们没有被修改：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8607657ed5ac59972cd210308aab7916fb222409" translate="yes" xml:space="preserve">
          <source>So, despite the fact that we are not working directly with the source array, we are working directly with the source array pointer - the fact that the pointer is at the end of the array at the end of the loop shows this. Except this can't be true - if it was, then &lt;a href=&quot;http://codepad.org/7DIeObk9&quot;&gt;test case 1&lt;/a&gt; would loop forever.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，尽管事实上我们没有直接使用源数组，但我们直接使用了源数组指针-指针在循环末尾位于数组的末尾这一事实表明了这一点。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;除非这不是真的-如果是这样，那么&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://codepad.org/7DIeObk9&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;测试用例1&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将永远循环。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7620823db465a8213cdba392c149d0cffe8cba72" translate="yes" xml:space="preserve">
          <source>So, in your first example you only have one element in the array, and when the pointer is moved the next element does not exist, so after you add new element foreach ends because it already &quot;decided&quot; that it it as the last element.</source>
          <target state="translated">所以,在你的第一个例子中,你的数组中只有一个元素,当指针被移动时,下一个元素不存在,所以在你添加新的元素foreach后结束,因为它已经 &quot;决定 &quot;它作为最后一个元素。</target>
        </trans-unit>
        <trans-unit id="35d0be98ccd23d238ffd883d44c8e1a3bba9053a" translate="yes" xml:space="preserve">
          <source>Some points to note when working with &lt;code&gt;foreach()&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;时需要注意的几点&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="57120796a80a08ef6aa8f16cb423a7f2ab9f0a14" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;http://dwellupper.io/post/47/understanding-php-foreach-loop-with-examples&quot;&gt;http://dwellupper.io/post/47/understanding-php-foreach-loop-with-examples&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;资料来源：&lt;/font&gt;&lt;a href=&quot;http://dwellupper.io/post/47/understanding-php-foreach-loop-with-examples&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//dwellupper.io/post/47/understanding-php-foreach-loop-with-examples&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c75dc3f330b31a50042d85df76b4fbc730b896f9" translate="yes" xml:space="preserve">
          <source>Stack&amp;nbsp;Overflow question &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2728709&quot;&gt;How to make sure the value is reset in a 'foreach' loop in PHP?&lt;/a&gt;&lt;/em&gt; addresses the cases (3,4,5) of your question.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;堆栈溢出问题&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2728709&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如何确保在PHP的&amp;ldquo; foreach&amp;rdquo;循环中重置该值？&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解决您的问题的情况（3,4,5）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="43ee53a8fd3dd8f60f02f4016979d5c8131c4a41" translate="yes" xml:space="preserve">
          <source>Substituting the iterated entity during the loop</source>
          <target state="translated">在循环中替换迭代的实体</target>
        </trans-unit>
        <trans-unit id="799e1f85c65dc059f75f6566ee59feb5cfae8d0f" translate="yes" xml:space="preserve">
          <source>Test case 3 changes: &lt;code&gt;Foreach&lt;/code&gt; no longer uses the IAP, so &lt;code&gt;each()&lt;/code&gt; is not affected by the loop. It will have the same output before and after.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;测试用例3进行了更改：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不再使用IAP，因此&lt;/font&gt;&lt;/font&gt; &lt;code&gt;each()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不受循环的影响。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;前后会有相同的输出。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cd92aadc08b97ed5f3daa2ae99864416eaa8183a" translate="yes" xml:space="preserve">
          <source>Test cases 1 and 2 retain the same output: By-value array iteration always keep working on the original elements. (In this case, even &lt;code&gt;refcounting&lt;/code&gt; and duplication behavior is exactly the same between PHP 5 and PHP 7).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;测试用例1和2保留相同的输出：按值数组迭代始终对原始元素起作用。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（在这种情况下，即使&lt;/font&gt;&lt;/font&gt; &lt;code&gt;refcounting&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和复制行为在PHP 5和PHP 7之间也完全相同）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b5302152a206d4acde3103ec9c65b3fc49d9cde5" translate="yes" xml:space="preserve">
          <source>Test cases 4 and 5 stay the same: &lt;code&gt;each()&lt;/code&gt; and &lt;code&gt;reset()&lt;/code&gt; will duplicate the array before changing the IAP, while &lt;code&gt;foreach&lt;/code&gt; still uses the original array. (Not that the IAP change would have mattered, even if the array was shared.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;测试用例4和5保持不变：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;each()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reset()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将在更改IAP之前复制阵列，而&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仍使用原始阵列。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（即使阵列是共享的，IAP更改也不会很重要。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a9e56b636d04a99b97687e1513e0cfbb1be220f5" translate="yes" xml:space="preserve">
          <source>The IAP is a visible feature of an array (exposed through the &lt;code&gt;current&lt;/code&gt; family of functions), as such changes to the IAP count as modifications under copy-on-write semantics. This, unfortunately, means that &lt;code&gt;foreach&lt;/code&gt; is in many cases forced to duplicate the array it is iterating over. The precise conditions are:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IAP是数组的一个可见功能（通过&lt;/font&gt;&lt;/font&gt; &lt;code&gt;current&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的函数系列&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;公开&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;），因此对IAP计数的更改是写时复制语义下的修改。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不幸的是，这意味着&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在许多情况下&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;被迫复制正在迭代的数组。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;精确的条件是：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fdc4e3aeface141ed50ea2f3a5bb834802fbbc54" translate="yes" xml:space="preserve">
          <source>The PHP manual also states:</source>
          <target state="translated">PHP手册中还指出。</target>
        </trans-unit>
        <trans-unit id="e2744babbe5f6a155ba4b49e4f30afc0e91f850e" translate="yes" xml:space="preserve">
          <source>The array has refcount&amp;gt;1. If &lt;code&gt;refcount&lt;/code&gt; is 1, then the array is not shared and we're free to modify it directly.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数组的引用计数&amp;gt; 1。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果&lt;/font&gt;&lt;/font&gt; &lt;code&gt;refcount&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为1，则不共享该数组，我们可以自由地直接对其进行修改。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6b7837793519155ae58510c7f461d7624338cf8e" translate="yes" xml:space="preserve">
          <source>The array is not a reference (is_ref=0). If it's a reference, then changes to it are &lt;em&gt;supposed&lt;/em&gt; to propagate, so it should not be duplicated.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该数组不是引用（is_ref = 0）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果是参考，则&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;应该&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;传播&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对其的更改&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，因此不应重复。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9f59618d362ad66a77e6991b447adba9675635b9" translate="yes" xml:space="preserve">
          <source>The assignment operator for the arrays in PHP works more like a lazy clone. Assigning one variable to another that contains an array will clone the array, unlike most languages. However, the actual cloning will not be done unless it is needed. This means that the clone will take place only when either of the variables is modified (copy-on-write).</source>
          <target state="translated">在PHP中,数组的赋值操作符的工作原理更像是一个懒惰的克隆。将一个变量赋值给另一个包含数组的变量,就会克隆出这个数组,这与大多数语言不同。但是,除非需要,否则不会进行实际的克隆。这意味着,只有在变量被修改时,克隆才会发生(copy-on-write)。</target>
        </trans-unit>
        <trans-unit id="14fa8ff0cf5d61c850805b6e5fb983b36b041d68" translate="yes" xml:space="preserve">
          <source>The behavior of your test cases is simple to explain at this point:</source>
          <target state="translated">在这一点上,你的测试用例的行为是很简单的,在这一点上解释一下。</target>
        </trans-unit>
        <trans-unit id="915873c4a3ce154fb4090c25aea28f3a43b43480" translate="yes" xml:space="preserve">
          <source>The expected part here is that &lt;code&gt;(1, 2)&lt;/code&gt; is missing from the output because element &lt;code&gt;1&lt;/code&gt; was removed. What's probably unexpected is that the outer loop stops after the first element. Why is that?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;此处的预期部分是，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;由于元素&lt;/font&gt; &lt;code&gt;1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;被删除&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，输出中缺少&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(1, 2)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;出乎意料的是，外循环在第一个元素之后停止。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是为什么？&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="565256f6d92b66af02eea962561abc18319450cb" translate="yes" xml:space="preserve">
          <source>The first form loops over the array given by array_expression. On each
  iteration, the value of the current element is assigned to $value and
  the internal array pointer is advanced by one (so on the next
  iteration, you'll be looking at the next element).</source>
          <target state="translated">第一个形式在数组中循环运行由array_expression给出的数组。在每次迭代时,当前元素的值被赋值到$value,并且内部数组指针前进一个(所以在下一次迭代时,你会看到下一个元素)。</target>
        </trans-unit>
        <trans-unit id="93a9acd0a95da182c6b4c513a8110aeb3ca36d0e" translate="yes" xml:space="preserve">
          <source>The following example shows that each() and reset() DOES NOT affect &lt;code&gt;SENTINEL&lt;/code&gt; variables
&lt;code&gt;(for example, the current index variable)&lt;/code&gt; of the &lt;code&gt;foreach()&lt;/code&gt; iterator.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;下面的示例示出了每个（）和复位（）不影响&lt;/font&gt;&lt;/font&gt; &lt;code&gt;SENTINEL&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;变量 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(for example, the current index variable)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;所述的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;迭代器。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="87247b8d9ab9cc6541ded942f6c651cfc9dcd41e" translate="yes" xml:space="preserve">
          <source>The problem with allowing modifications during iteration is the case where the element you are currently on is removed. Say you use a pointer to keep track of which array element you are currently at. If this element is now freed, you are left with a dangling pointer (usually resulting in a segfault).</source>
          <target state="translated">在迭代过程中允许修改的问题是,你当前所在的元素被删除的情况。假设你用一个指针来跟踪你当前所在的数组元素。如果这个元素现在被释放了,你就会留下一个悬空的指针(通常会导致segfault)。</target>
        </trans-unit>
        <trans-unit id="9656b1e147952d098aeb672618e2c2a5d55eeaf8" translate="yes" xml:space="preserve">
          <source>The reason behind this is the nested-loop hack described above: Before the loop body runs, the current IAP position and hash is backed up into a &lt;code&gt;HashPointer&lt;/code&gt;. After the loop body it will be restored, but only if the element still exists, otherwise the current IAP position (whatever it may be) is used instead. In the example above this is exactly the case: The current element of the outer loop has been removed, so it will use the IAP, which has already been marked as finished by the inner loop!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;其背后的原因是上述的嵌套循环hack：在循环主体运行之前，将当前IAP位置和哈希值备份到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;HashPointer&lt;/code&gt; 中&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在循环体之后，它将被恢复，但是仅当元素仍然存在时才恢复，否则将使用当前IAP位置（无论它可能是什么）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在上面的示例中，情况确实如此：外循环的当前元素已被删除，因此它将使用IAP，该IAP已被内循环标记为完成！&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba05429027cb017f1644ed283db2a59b07a096cf" translate="yes" xml:space="preserve">
          <source>The reason is that, while &lt;code&gt;reset()&lt;/code&gt; temporarily modifies the IAP, it will be restored to the current foreach element after the loop body. To force &lt;code&gt;reset()&lt;/code&gt; to make an effect on the loop, you have to additionally remove the current element, so that the backup/restore mechanism fails:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;原因是，尽管&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reset()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;临时修改了IAP，但它将在循环体之后恢复为当前的foreach元素。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要强制&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reset()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对循环起作用，您必须另外删除当前元素，以使备份/还原机制失败：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63f9f02be33a648c748f491f47a14295cc7acb13" translate="yes" xml:space="preserve">
          <source>The same also applies to objects, as the object properties can be seen as another (ordered) dictionary mapping property names to their values, plus some visibility handling. In the majority of cases, the object properties are not actually stored in this rather inefficient way. However, if you start iterating over an object, the packed representation that is normally used will be converted to a real dictionary. At that point, iteration of plain objects becomes very similar to iteration of arrays (which is why I'm not discussing plain-object iteration much in here).</source>
          <target state="translated">同样的道理也适用于对象,因为对象属性可以看作是另一个(有序的)字典,将属性名映射到它们的值,再加上一些可见性处理。在大多数情况下,对象属性实际上并没有以这种相当低效的方式存储。但是,如果开始迭代一个对象,通常使用的打包表示法将被转换为真正的字典。这时,纯对象的迭代就会变得和数组的迭代非常相似(这就是为什么我在这里不多讨论纯对象迭代的原因)。</target>
        </trans-unit>
        <trans-unit id="1a0968550b75fdd5a4eacffc8fd75cfc37aab8f9" translate="yes" xml:space="preserve">
          <source>The second set of examples was related to the behavior of &lt;code&gt;current()&lt;/code&gt; under different &lt;code&gt;reference/refcounting&lt;/code&gt; configurations. This no longer makes sense, as &lt;code&gt;current()&lt;/code&gt; is completely unaffected by the loop, so its return value always stays the same.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;第二组示例与&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在不同&lt;/font&gt; &lt;code&gt;reference/refcounting&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;配置&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;下&lt;/font&gt;&lt;/font&gt; &lt;code&gt;current()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的行为有关&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这不再有意义，因为&lt;/font&gt; &lt;code&gt;current()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;完全不受循环影响，因此其返回值始终保持不变。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4db5d7598394dc4efaf2ebddee1152d9a2cb947f" translate="yes" xml:space="preserve">
          <source>The three aspects described above should provide you with a mostly complete impression of the idiosyncrasies of the &lt;code&gt;foreach&lt;/code&gt; implementation and we can move on to discuss some examples.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上面描述的三个方面应该为您大致了解一下&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实现&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的特质，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我们可以继续讨论一些示例。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="20a766900138d9e9e26f7eb059f6b2414363bea0" translate="yes" xml:space="preserve">
          <source>There are different ways of solving this issue. PHP 5 and PHP 7 differ significantly in this regard and I'll describe both behaviors in the following. The summary is that PHP 5's approach was rather dumb and lead to all kinds of weird edge-case issues, while PHP 7's more involved approach results in more predictable and consistent behavior.</source>
          <target state="translated">解决这个问题有不同的方法。PHP 5和PHP 7在这方面有很大的区别,下面我就来介绍一下这两种行为。总结起来就是,PHP 5的方法比较笨,导致了各种奇怪的边缘问题,而PHP 7的方法更多的涉及到的是导致了更多的可预测性和一致性的行为。</target>
        </trans-unit>
        <trans-unit id="1f629149a2bff5b4f1c466133ca920bd33974cdf" translate="yes" xml:space="preserve">
          <source>There is one last implementation detail that you have to be aware of to properly understand the code samples below. The &quot;normal&quot; way of looping through some data structure would look something like this in pseudocode:</source>
          <target state="translated">为了正确理解下面的代码示例,你必须注意最后一个实现细节。在伪代码中,通过一些数据结构循环的 &quot;正常 &quot;方式看起来是这样的。</target>
        </trans-unit>
        <trans-unit id="b91dabc2f851c9c172de2f74b35ab48cd0251a75" translate="yes" xml:space="preserve">
          <source>This backs up our initial conclusion, we are working with a copy of the source array during the loop, otherwise we would see the modified values during the loop. &lt;em&gt;But...&lt;/em&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这支持了我们的初始结论，我们在循环期间正在使用源数组的副本，否则将在循环期间看到修改后的值。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但...&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fe1b089bdce204bf49714d0cd96aee6fb5deb45f" translate="yes" xml:space="preserve">
          <source>This clearly shows that we are not working directly with the source array - otherwise the loop would continue forever, since we are constantly pushing items onto the array during the loop. But just to be sure this is the case:</source>
          <target state="translated">这清楚地表明我们并没有直接与源数组一起工作--否则循环将永远持续下去,因为在循环过程中我们不断地将项目推送到数组上。但是,只是为了确定是这样的情况。</target>
        </trans-unit>
        <trans-unit id="bd5628afe1d31ff01bbe9de9e91da9996b858397" translate="yes" xml:space="preserve">
          <source>This means that &lt;code&gt;foreach&lt;/code&gt; will no longer use the IAP &lt;strong&gt;at all&lt;/strong&gt;. The &lt;code&gt;foreach&lt;/code&gt; loop will be absolutely no effect on the results of &lt;code&gt;current()&lt;/code&gt; etc. and its own behavior will never be influenced by functions like  &lt;code&gt;reset()&lt;/code&gt; etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这意味着&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将不再使用IAP &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可言&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;循环都会对结果毫无影响&lt;/font&gt;&lt;/font&gt; &lt;code&gt;current()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;等，以及其自己的行为绝不会由像功能的影响 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reset()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;等。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f91d4073e1806ac4e46d9be9407b7439ade530c5" translate="yes" xml:space="preserve">
          <source>This outputs:</source>
          <target state="translated">这个输出。</target>
        </trans-unit>
        <trans-unit id="3d273d739b2b7205fdf68170c768084c1fcdfbc4" translate="yes" xml:space="preserve">
          <source>This reflects the by-handle semantics of objects (i.e. they behave reference-like even in by-value contexts).</source>
          <target state="translated">这反映了对象的by-handle语义(也就是说,即使在by-value上下文中,它们的行为也是类似于引用的)。</target>
        </trans-unit>
        <trans-unit id="c95f478c775abdcfe2b0089734af8e18efb1ae85" translate="yes" xml:space="preserve">
          <source>This, of course, does not apply to by-reference iteration. If you iterate by-reference all modifications will be reflected by the loop. Interestingly, the same is true for by-value iteration of plain objects:</source>
          <target state="translated">当然,这并不适用于通过引用迭代。如果你通过引用进行迭代,所有的修改都会被循环反映出来。有趣的是,对于纯对象的by-value迭代也是如此。</target>
        </trans-unit>
        <trans-unit id="9baca8009051358845df552bcda06556e6c99b61" translate="yes" xml:space="preserve">
          <source>To support two simultaneous loops with only one internal array pointer, &lt;code&gt;foreach&lt;/code&gt; performs the following shenanigans: Before the loop body is executed, &lt;code&gt;foreach&lt;/code&gt; will back up a pointer to the current element and its hash into a per-foreach &lt;code&gt;HashPointer&lt;/code&gt;. After the loop body runs, the IAP will be set back to this element if it still exists. If however the element has been removed, we'll just use wherever the IAP is currently at. This scheme mostly-kinda-sort of works, but there's a lot of weird behavior you can get out of it, some of which I'll demonstrate below.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为了仅使用一个内部数组指针支持两个同时循环，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; 将&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;执行以下操作：在执行循环主体之前，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将指向当前元素的指针及其哈希值&lt;/font&gt;&lt;/font&gt; &lt;code&gt;HashPointer&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;到每个&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;for HeachPointer中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。循环主体运行后，如果IAP仍然存在，则将其设置回该元素。但是，如果该元素已删除，我们将仅使用IAP当前所在的位置。这个方案主要是某种类型的作品，但是您可以摆脱很多奇怪的行为，下面将对其中的一些进行演示。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1c7e385d1086d82869c2eb01e2cb254a41ea968b" translate="yes" xml:space="preserve">
          <source>To update on this answer as it has gained some popularity: This answer no longer applies as of PHP 7. As explained in the &quot;&lt;a href=&quot;https://secure.php.net/manual/en/migration70.incompatible.php&quot;&gt;Backward incompatible changes&lt;/a&gt;&quot;, in PHP 7 foreach works on copy of the array, so any changes on the array itself are not reflected on foreach loop. More details at the link.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要更新此答案，因为它已经很流行：从PHP 7开始，此答案不再适用。如&amp;ldquo; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://secure.php.net/manual/en/migration70.incompatible.php&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;向后不兼容的更改&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;rdquo;中所述，PHP 7中的foreach可以在数组副本上使用，因此数组本身的任何更改没有反映在foreach循环上。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;链接中有更多详细信息。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dde4e161f740b1bd3e90639d3dbf341a1b517450" translate="yes" xml:space="preserve">
          <source>Trying to account for modifications during iteration is where all our foreach troubles originated, so it serves to consider some examples for this case.</source>
          <target state="translated">试图在迭代过程中对修改进行核算是我们所有的foreach麻烦的根源,所以我们可以考虑一些例子来解决这个问题。</target>
        </trans-unit>
        <trans-unit id="b7169fdc663586782ea538bce150905ae47564ed" translate="yes" xml:space="preserve">
          <source>Well, let's find out what that &quot;unexpected behavior&quot; is (technically, any behavior is unexpected since I no longer know what to expect).</source>
          <target state="translated">那么,让我们来看看这个 &quot;意想不到的行为 &quot;是什么(严格来说,任何行为都是意想不到的,因为我已经不知道该期待什么了)。</target>
        </trans-unit>
        <trans-unit id="1ab0b9b999b26475829ef83e1f0b570dd0b5e77b" translate="yes" xml:space="preserve">
          <source>What is going on here? My C-fu is not good enough for me to able to extract a proper conclusion simply by looking at the PHP source code, I would appreciate it if someone could translate it into English for me.</source>
          <target state="translated">这到底是怎么回事?我的C-fu不够好,仅仅看了PHP源代码就能得出正确的结论,如果有人能把它翻译成英文,我将不胜感激。</target>
        </trans-unit>
        <trans-unit id="95561907a33364750b2b8e1516364f240bfb03a0" translate="yes" xml:space="preserve">
          <source>When foreach first starts executing, the internal array pointer is automatically reset to the first element of the array.</source>
          <target state="translated">当foreach第一次开始执行时,内部数组指针自动重置为数组的第一个元素。</target>
        </trans-unit>
        <trans-unit id="7a3890dc8a14c3affcfff7a3e17e38a070766491" translate="yes" xml:space="preserve">
          <source>Which means that array was modified, but since we modified it when the &lt;code&gt;foreach&lt;/code&gt; already was at the last element of the array, it &quot;decided&quot; not to loop anymore, and even though we added new element, we added it &quot;too late&quot; and it was not looped through.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这意味着该数组已被修改，但是由于我们在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;已经位于数组的最后一个元素时对其进行了修改，因此它&amp;ldquo;决定&amp;rdquo;不再循环，即使我们添加了新元素，我们也将其添加为&amp;ldquo;太晚了&amp;rdquo;，它没有循环通过。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="65702a1e70c39355a68fb6833461fd85241d87ae" translate="yes" xml:space="preserve">
          <source>Which means that it accepted the modification and went through it because it was modified &quot;in time&quot;. But if you do this:</source>
          <target state="translated">也就是说,它接受了修改,并通过了修改,因为它是 &quot;及时 &quot;修改的。但是,如果你这样做的话。</target>
        </trans-unit>
        <trans-unit id="1fd1a4f9962695956b5a0b896fb6ce6683a6dc0f" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;foreach&lt;/code&gt; does make use of the IAP, there is an additional complication: There is only one IAP, but one array can be part of multiple &lt;code&gt;foreach&lt;/code&gt; loops:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;尽管&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;确实使用了IAP，但还有一个复杂之处：只有一个IAP，但是一个数组可以成为多个&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;循环的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一部分&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="18462cb77b79fe84dcfd1b92f599337e091e34e5" translate="yes" xml:space="preserve">
          <source>You get the same behavior when doing by-ref iteration:</source>
          <target state="translated">你在进行反推迭代时,会得到同样的行为。</target>
        </trans-unit>
        <trans-unit id="e6a2c66c5caf519fd3145fb125a072e560e5ed25" translate="yes" xml:space="preserve">
          <source>You will get this output:</source>
          <target state="translated">你会得到这样的输出。</target>
        </trans-unit>
        <trans-unit id="3fc54bd7f5ebfc024ec5a1d4f9148e3802ccdaea" translate="yes" xml:space="preserve">
          <source>You will get:</source>
          <target state="translated">你会得到。</target>
        </trans-unit>
        <trans-unit id="9e5ce9453caf5a9d5d4ebea4a03dcac1ad968aa6" translate="yes" xml:space="preserve">
          <source>a) &lt;code&gt;foreach&lt;/code&gt; works on the &lt;strong&gt;prospected copy&lt;/strong&gt; of the original array.
    It means &lt;code&gt;foreach()&lt;/code&gt; will have SHARED data storage until or unless a &lt;code&gt;prospected copy&lt;/code&gt; is
    not created &lt;a href=&quot;http://php.net/manual/en/control-structures.foreach.php&quot;&gt;foreach Notes/User comments&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a）&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在原始数组&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;预期副本&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上工作。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这意味着&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将共享数据存储，直到或除非&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;未为&lt;/font&gt;&lt;a href=&quot;http://php.net/manual/en/control-structures.foreach.php&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;foreach Notes / User comments&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;创建&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prospected copy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b6d778baf7de3191914dd29582064f66af60c2ed" translate="yes" xml:space="preserve">
          <source>array pointer is advanced by one (so on the next iteration, you'll be looking at the next element).</source>
          <target state="translated">数组指针前进了一个(所以在下一次迭代时,你会看到下一个元素)。</target>
        </trans-unit>
        <trans-unit id="31d1af7d4fa62aceb0ae76a9d0de0910cca5e3b6" translate="yes" xml:space="preserve">
          <source>b) What triggers a &lt;strong&gt;prospected copy&lt;/strong&gt;?
    A prospected copy is created based on the policy of &lt;code&gt;copy-on-write&lt;/code&gt;, that is, whenever
    an array passed to &lt;code&gt;foreach()&lt;/code&gt; is changed, a clone of the original array is created.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;b）是什么触发了&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;预期的复制&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;根据&lt;/font&gt;&lt;/font&gt; &lt;code&gt;copy-on-write&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;时&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;复制&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的策略创建预期的副本&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，也就是说，每当&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更改&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;传递给&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的数组时，都会创建原始数组的副本。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8e5bef131b548d431cca88634055bf7723f0fe7b" translate="yes" xml:space="preserve">
          <source>c) The original array and &lt;code&gt;foreach()&lt;/code&gt; iterator will have &lt;code&gt;DISTINCT SENTINEL VARIABLES&lt;/code&gt;, that is, one for the original array and other for &lt;code&gt;foreach&lt;/code&gt;; see the test code below. &lt;a href=&quot;http://php.net/manual/en/book.spl.php&quot;&gt;SPL&lt;/a&gt; , &lt;a href=&quot;http://www.php.net/manual/en/spl.iterators.php&quot;&gt;Iterators&lt;/a&gt;, and &lt;a href=&quot;http://www.php.net/manual/en/class.arrayiterator.php&quot;&gt;Array Iterator&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;c）原始数组和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;迭代器将具有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;DISTINCT SENTINEL VARIABLES&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，即，一个用于原始数组，另一个用于&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foreach&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;；&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请参阅下面的测试代码。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://php.net/manual/en/book.spl.php&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SPL&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.php.net/manual/en/spl.iterators.php&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;迭代器&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.php.net/manual/en/class.arrayiterator.php&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数组迭代器&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
