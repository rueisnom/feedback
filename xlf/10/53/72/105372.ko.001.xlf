<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/105372">
    <body>
      <group id="105372">
        <trans-unit id="204ee29d33b6243e0190c07dfb5eab1bae58afc9" translate="yes" xml:space="preserve">
          <source>'Suit' is a 'type' but is used like a 'variable'</source>
          <target state="translated">'정장'은 '유형'이지만 '변수'처럼 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f2bf7d31a04dc34e0b6fb75921211d6512b3f1cc" translate="yes" xml:space="preserve">
          <source>(Actually, that's a bit more complicated than that - enum types are considered to have an &quot;underlying&quot; integer type, which means each enum value corresponds to an integer value (this is typically implicit, but can be manually specified). C# was designed in a way so that you could stuff &lt;em&gt;any&lt;/em&gt; integer of that type into the enum variable, even if it isn't a &quot;named&quot; value.)</source>
          <target state="translated">(실제로, 그것은 그보다 조금 더 복잡합니다-열거 형은 &quot;기본&quot;정수 유형을 갖는 것으로 간주됩니다. 즉, 각 열거 값은 정수 값에 해당합니다 (이는 일반적으로 암시 적이지만 수동으로 지정할 수 있음). &quot;이름이없는&quot;값이 아니더라도 해당 유형의 정수를 열거 형 변수에 넣을 수있는 방식으로)</target>
        </trans-unit>
        <trans-unit id="75c4d4b0e176e2184304b63994d713b095b617ae" translate="yes" xml:space="preserve">
          <source>(The current accepted answer has a cast that I don't think 
is needed (although I may be wrong).)</source>
          <target state="translated">(현재 허용되는 답변에는 내가 필요하지 않다고 생각되는 캐스트가 있습니다 (잘못되었을지라도).)</target>
        </trans-unit>
        <trans-unit id="ea0e98176aee6ddc771dbf3b53048227666d5df4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Language_Integrated_Query&quot;&gt;LINQ&lt;/a&gt; Generic Way:</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Language_Integrated_Query&quot;&gt;LINQ&lt;/a&gt; 일반적인 방법 :</target>
        </trans-unit>
        <trans-unit id="eff6af42e717cf5361127d9a29beed5d256a0098" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://web.archive.org/web/20101105013136/http://www.dolittle.no/blogs/einar/archive/2008/01/13/missing-enum-getvalues-when-doing-silverlight-for-instance.aspx&quot;&gt;Original Blog Post by Einar Ingebrigtsen&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://web.archive.org/web/20101105013136/http://www.dolittle.no/blogs/einar/archive/2008/01/13/missing-enum-getvalues-when-doing-silverlight-for-instance.aspx&quot;&gt;Einar Ingebrigtsen의 원본 블로그 게시물&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="628b003cff860c93265eccaec110cd80fc03d7d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Enum.GetValues(type)&lt;/code&gt; // Since .NET 1.1, not in Silverlight or .NET Compact Framework</source>
          <target state="translated">&lt;code&gt;Enum.GetValues(type)&lt;/code&gt; // Silverlight 또는 .NET Compact Framework가 아닌 .NET 1.1 이후</target>
        </trans-unit>
        <trans-unit id="c85e52b3b4353211b223e1d52ac1fdf07f1068e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EnumLoop&lt;/code&gt; has this completely generic definition:</source>
          <target state="translated">&lt;code&gt;EnumLoop&lt;/code&gt; 에는 다음과 같은 일반적인 정의가 있습니다.</target>
        </trans-unit>
        <trans-unit id="bfbf23c79144694d3391307903f4e52ac2d39f99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enum&lt;/code&gt; types are called &quot;enumeration types&quot; not because they are containers that &quot;enumerate&quot; values (which they aren't), but because they are defined by &lt;em&gt;enumerating&lt;/em&gt; the possible values for a variable of that type.</source>
          <target state="translated">&lt;code&gt;enum&lt;/code&gt; 형은 값을 &quot;열거하는&quot;컨테이너가 아니기 때문에 해당 유형의 변수에 가능한 값을 &lt;em&gt;열거&lt;/em&gt; 하여 정의되기 때문에 &quot;열거 형&quot;이라고합니다.</target>
        </trans-unit>
        <trans-unit id="e5c45b1afb733bf0b290d4865898a9aa1a4607d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type.GetEnumValues()&lt;/code&gt; // Only on .NET 4 and above</source>
          <target state="translated">&lt;code&gt;type.GetEnumValues()&lt;/code&gt; // .NET 4 이상에서만</target>
        </trans-unit>
        <trans-unit id="5ec027cd63787fc63ff00a1d7f39f02a465ad222" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type.GetFields().Where(x =&amp;gt; x.IsLiteral).Select(x =&amp;gt; x.GetValue(null))&lt;/code&gt; // Works everywhere</source>
          <target state="translated">&lt;code&gt;type.GetFields().Where(x =&amp;gt; x.IsLiteral).Select(x =&amp;gt; x.GetValue(null))&lt;/code&gt; // 모든 곳에서 작동</target>
        </trans-unit>
        <trans-unit id="8e4a67312cef01f89b813f460218af4e618c5098" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;I am not sure why &lt;code&gt;GetEnumValues&lt;/code&gt; was introduced on type instances. It isn't very readable at all for me.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;왜 &lt;code&gt;GetEnumValues&lt;/code&gt; 가 형식 인스턴스에 도입되었는지 잘 모르겠습니다.&lt;/em&gt; &lt;em&gt;그것은 나에게 전혀 읽을 수있는 것이 아닙니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f22550b58f5408cd4a7789a3f168d48edeb08400" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The cast to &lt;code&gt;(Suit[])&lt;/code&gt; is not strictly necessary, &lt;a href=&quot;https://gist.github.com/bartoszkp/9e059c3edccc07a5e588#gistcomment-2625454&quot;&gt;but it does make the code 0.5 ns faster&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : &lt;code&gt;(Suit[])&lt;/code&gt; 캐스트 할 필요는 &lt;a href=&quot;https://gist.github.com/bartoszkp/9e059c3edccc07a5e588#gistcomment-2625454&quot;&gt;없지만 코드를 0.5ns 더 빠르게&lt;/a&gt; 만듭니다.</target>
        </trans-unit>
        <trans-unit id="b10049e3c204f7b966f11b4223add60fd0a0dff9" translate="yes" xml:space="preserve">
          <source>A call would look like this:</source>
          <target state="translated">전화는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b8278d6fa198e09d50fbbd6937ff32e3b20545e9" translate="yes" xml:space="preserve">
          <source>A simple and generic way to convert an enum to something you can interact:</source>
          <target state="translated">열거 형을 상호 작용할 수있는 것으로 변환하는 간단하고 일반적인 방법 :</target>
        </trans-unit>
        <trans-unit id="489a98e4905ac18f73bdcd16377405cbf983f47f" translate="yes" xml:space="preserve">
          <source>Add method &lt;code&gt;public static IEnumerable&amp;lt;T&amp;gt; GetValues&amp;lt;T&amp;gt;()&lt;/code&gt; to your class, like:</source>
          <target state="translated">다음과 같이 &lt;code&gt;public static IEnumerable&amp;lt;T&amp;gt; GetValues&amp;lt;T&amp;gt;()&lt;/code&gt; 메소드를 클래스에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="9adfddcd92a71b3bc6564c2c5d83a45f949ebce5" translate="yes" xml:space="preserve">
          <source>Also you can bind to the public static members of the enum directly by using reflection:</source>
          <target state="translated">또한 리플렉션을 사용하여 열거 형의 공개 정적 멤버에 직접 바인딩 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5185077a60357f56c044d96e3e9c27f0dcfed475" translate="yes" xml:space="preserve">
          <source>And it gives the following compile-time error:</source>
          <target state="translated">그리고 다음과 같은 컴파일 타임 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a65c6aab9ccb89445d5895ed004afd6ead95252c" translate="yes" xml:space="preserve">
          <source>And then:</source>
          <target state="translated">그리고:</target>
        </trans-unit>
        <trans-unit id="9fbda980a4e6671aa89af76a1ac43b0bd5a659b2" translate="yes" xml:space="preserve">
          <source>And you can use it like below:</source>
          <target state="translated">그리고 당신은 아래와 같이 그것을 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="2c8a83e8900192b4b50deba69a1aba7d1d83c362" translate="yes" xml:space="preserve">
          <source>As with any code that involves &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/reflection&quot;&gt;reflection&lt;/a&gt;, you should take steps to ensure it runs only once and results are cached.</source>
          <target state="translated">&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/reflection&quot;&gt;리플렉션&lt;/a&gt; 과 관련된 코드와 마찬가지로 코드가 한 번만 실행되고 결과가 캐시되도록 조치를 취해야합니다.</target>
        </trans-unit>
        <trans-unit id="01488da0f2c695215e3c263c1b0a620cdb5ef987" translate="yes" xml:space="preserve">
          <source>But that's not strictly enumerating, just looping. The second method is much faster than any other approach though...</source>
          <target state="translated">그러나 그것은 엄격하게 열거되지는 않고 반복됩니다. 두 번째 방법은 다른 접근법보다 훨씬 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="b777c1f71b046ec9e2702c289bcdaf42a8b05a32" translate="yes" xml:space="preserve">
          <source>By the way, incrementing the value is not a good way to enumerate the values of an enum. You should do this instead.</source>
          <target state="translated">그건 그렇고, 값을 증가시키는 것은 열거 형의 값을 열거하는 좋은 방법이 아닙니다. 대신이 작업을 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="e1b0a5a3ca314c0e37db1c2351ee79f4bdd02a1b" translate="yes" xml:space="preserve">
          <source>Call and pass your enum. Now you can iterate through it using &lt;code&gt;foreach&lt;/code&gt;:</source>
          <target state="translated">열거 형을 부르고 전달하십시오. 이제 &lt;code&gt;foreach&lt;/code&gt; 를 사용하여 반복 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="130e344783d4105439d699f40125c5715cbf222e" translate="yes" xml:space="preserve">
          <source>E.g. the following code does not compile:</source>
          <target state="translated">예를 들어 다음 코드는 컴파일되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bfcf41711c45f4d582e1d7496ffdb987c0c718e9" translate="yes" xml:space="preserve">
          <source>EDIT: Should have suggested the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.enum.getvalues(v=vs.110).aspx&quot;&gt;System.Enum.GetValues&lt;/a&gt; method instead. Oops.</source>
          <target state="translated">편집 : &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.enum.getvalues(v=vs.110).aspx&quot;&gt;System.Enum.GetValues&lt;/a&gt; 메서드를 대신 제안해야합니다. 죄송합니다.</target>
        </trans-unit>
        <trans-unit id="488d755bd3034f031474bb24d86a52e629556d9e" translate="yes" xml:space="preserve">
          <source>For getting a list of int from an enum, use the following. It works!</source>
          <target state="translated">열거 형에서 int 목록을 얻으려면 다음을 사용하십시오. 효과가있다!</target>
        </trans-unit>
        <trans-unit id="36444104581e368e6494a254b78ef4c4bdba70fa" translate="yes" xml:space="preserve">
          <source>Having a helper class like &lt;code&gt;Enum&amp;lt;T&amp;gt;&lt;/code&gt; is what is most readable and memorable for me:</source>
          <target state="translated">&lt;code&gt;Enum&amp;lt;T&amp;gt;&lt;/code&gt; 와 같은 도우미 클래스를 갖는 것이 가장 읽기 쉽고 기억에 남는 것입니다.</target>
        </trans-unit>
        <trans-unit id="4d987bf9b5c596c8a548ba1557b0eb1909241d54" translate="yes" xml:space="preserve">
          <source>Here is a working example of creating select options for a &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_definition_language&quot;&gt;DDL&lt;/a&gt;:</source>
          <target state="translated">다음은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_definition_language&quot;&gt;DDL에&lt;/a&gt; 대한 선택 옵션을 작성하는 실제 예입니다.</target>
        </trans-unit>
        <trans-unit id="e75161fd8733bf32d8db574b4afe41d157fb02e8" translate="yes" xml:space="preserve">
          <source>How can you enumerate an &lt;code&gt;enum&lt;/code&gt; in C#?</source>
          <target state="translated">C #에서 열거 형을 어떻게 열거 할 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="c84443bbee6468fa570fcd4ddd774034fc4262fb" translate="yes" xml:space="preserve">
          <source>How to enumerate an enum</source>
          <target state="translated">열거 형을 열거하는 방법</target>
        </trans-unit>
        <trans-unit id="f71295e846abf2ebf66206d4e52f2c2e37af5217" translate="yes" xml:space="preserve">
          <source>I do not hold the opinion this is better, or even good. I am just stating yet another solution.</source>
          <target state="translated">나는 이것이 더 낫거나 심지어 좋은 의견을 가지고 있지 않습니다. 방금 또 다른 해결책을 말하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="d695e5bed90c7a43ad6dc3f50817744cdf7c56ad" translate="yes" xml:space="preserve">
          <source>I know it is a bit messy, but if you are fan of one-liners, here is one:</source>
          <target state="translated">조금 지저분하다는 것을 알고 있지만 한 줄짜리 팬이라면 여기에 하나가 있습니다.</target>
        </trans-unit>
        <trans-unit id="47435f3e3d1517a85d9c8156dd62f2793656b5a2" translate="yes" xml:space="preserve">
          <source>I made some extensions for easy enum usage. Maybe someone can use it...</source>
          <target state="translated">쉬운 열거 형 사용을 위해 몇 가지 확장을 만들었습니다. 누군가가 그것을 사용할 수 있습니다 ...</target>
        </trans-unit>
        <trans-unit id="f706da7a8ed272d2a138924d9e5f8c1acccb9734" translate="yes" xml:space="preserve">
          <source>I think caching the array would speed it up considerably.  It looks like you're getting a new array (through reflection) every time.  Rather:</source>
          <target state="translated">어레이를 캐싱하면 속도가 상당히 빨라질 것이라고 생각합니다. 매번 (반사를 통해) 새로운 배열을 얻는 것처럼 보입니다. 차라리:</target>
        </trans-unit>
        <trans-unit id="aef4593fde75c927e239b1d9aeaba5fe6fa96721" translate="yes" xml:space="preserve">
          <source>I think this is more efficient than other suggestions because &lt;code&gt;GetValues()&lt;/code&gt; is not called each time you have a loop. It is also more concise. And you get a compile-time error, not a runtime exception if &lt;code&gt;Suit&lt;/code&gt; is not an &lt;code&gt;enum&lt;/code&gt;.</source>
          <target state="translated">루프가있을 때마다 &lt;code&gt;GetValues()&lt;/code&gt; 가 호출되지 않기 때문에 이것이 다른 제안보다 효율적이라고 생각합니다. 더 간결합니다. &lt;code&gt;Suit&lt;/code&gt; 가 &lt;code&gt;enum&lt;/code&gt; 이 아닌 경우 런타임 예외가 아니라 컴파일 타임 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="08426ede7845024ec8363a327be63a416a6c495d" translate="yes" xml:space="preserve">
          <source>I think you can use</source>
          <target state="translated">나는 당신이 사용할 수 있다고 생각</target>
        </trans-unit>
        <trans-unit id="c71fe08aa4ab3025b3712ce5ed439b295b73dc54" translate="yes" xml:space="preserve">
          <source>I tried many ways and got the result from this code:</source>
          <target state="translated">나는 여러 가지 방법을 시도 했고이 코드에서 결과를 얻었습니다.</target>
        </trans-unit>
        <trans-unit id="5754c8aaf063971e507315c385218c84d323b198" translate="yes" xml:space="preserve">
          <source>I use ToString() then split and parse the spit array in flags.</source>
          <target state="translated">ToString ()을 사용하고 spit 배열을 플래그로 분할하고 구문 분석합니다.</target>
        </trans-unit>
        <trans-unit id="0f65a7c0c8aabd73dcf605c5708aad1685be6eaf" translate="yes" xml:space="preserve">
          <source>I would use &lt;code&gt;Enum.GetValues(typeof(Suit))&lt;/code&gt; instead.</source>
          <target state="translated">대신 &lt;code&gt;Enum.GetValues(typeof(Suit))&lt;/code&gt; 사용합니다.</target>
        </trans-unit>
        <trans-unit id="7d3eeef3663d9af4d6b31c62a690bda6aa657080" translate="yes" xml:space="preserve">
          <source>I've heard vague rumours that this is
  terifically slow. Anyone know? &amp;ndash; Orion
  Edwards Oct 15 '08 at 1:31 7</source>
          <target state="translated">나는 이것이 상당히 느리다는 모호한 소문을 들었다. 누구 알아? &amp;ndash; Orion Edwards 2008 년 10 월 15 일 1시 31 분 7</target>
        </trans-unit>
        <trans-unit id="ce164deb41b4ac66b3fc10c0ed18762860a83ba4" translate="yes" xml:space="preserve">
          <source>If anyone knows how to get rid of the &lt;code&gt;T valueType = new T()&lt;/code&gt;, I'd be happy to see a solution.</source>
          <target state="translated">누구든지 &lt;code&gt;T valueType = new T()&lt;/code&gt; 제거하는 방법을 알고 있다면 해결책을 보게되어 기쁩니다.</target>
        </trans-unit>
        <trans-unit id="b7989ee216e55942bc73f30b10d14df8440aeb1c" translate="yes" xml:space="preserve">
          <source>If enum values are contiguous and you can provide the first and last element of the enum, then:</source>
          <target state="translated">열거 형 값이 연속적이고 열거 형의 첫 번째 요소와 마지막 요소를 제공 할 수있는 경우 :</target>
        </trans-unit>
        <trans-unit id="4e5ec090707deff327e609b2e64c69fb0fa67593" translate="yes" xml:space="preserve">
          <source>If enum values range strictly from 0 to n - 1, a generic alternative is:</source>
          <target state="translated">열거 형 값의 범위가 0에서 n-1 사이 인 경우 일반적인 대안은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="39889263d487079852bb1c20c0aa134d99325643" translate="yes" xml:space="preserve">
          <source>If you have:</source>
          <target state="translated">당신이 가지고 있다면:</target>
        </trans-unit>
        <trans-unit id="02553c0e65d89d3e34617306e8ef88aabf22574d" translate="yes" xml:space="preserve">
          <source>If you need speed and type checking at build and run time, this helper method is better than using LINQ to cast each element:</source>
          <target state="translated">빌드 및 런타임시 속도 및 유형 검사가 필요한 경우이 도우미 방법은 LINQ를 사용하여 각 요소를 캐스팅하는 것보다 낫습니다.</target>
        </trans-unit>
        <trans-unit id="50ce5a98656192c5eb253b5a488e358888162aa7" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;Suit&lt;/code&gt; and &lt;code&gt;Value&lt;/code&gt; are both enumerations:</source>
          <target state="translated">이 경우 &lt;code&gt;Suit&lt;/code&gt; 와 &lt;code&gt;Value&lt;/code&gt; 는 모두 열거입니다.</target>
        </trans-unit>
        <trans-unit id="084b05b7f5b1b1bcec12c207bc96765dbf9581aa" translate="yes" xml:space="preserve">
          <source>It fails on the &lt;code&gt;Suit&lt;/code&gt; keyword, the second one.</source>
          <target state="translated">두 번째 키워드 인 &lt;code&gt;Suit&lt;/code&gt; 키워드에서는 실패합니다.</target>
        </trans-unit>
        <trans-unit id="1537656a85cf3bdee1b6d6f52c4a3f226a4c4538" translate="yes" xml:space="preserve">
          <source>It is clean, simple, and, by @Jeppe-Stig-Nielsen's comment, fast.</source>
          <target state="translated">깨끗하고 간단하며 @ Jeppe-Stig-Nielsen의 의견에 따르면 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="fd3e08d7f38c4afc0cf631122546a28964fd62c7" translate="yes" xml:space="preserve">
          <source>It looks to me like you really want to print out the names of each enum, rather than the values. In which case &lt;code&gt;Enum.GetNames()&lt;/code&gt; seems to be the right approach.</source>
          <target state="translated">값이 아닌 각 열거 형의 이름을 실제로 인쇄하려는 것처럼 보입니다. 이 경우 &lt;code&gt;Enum.GetNames()&lt;/code&gt; 가 올바른 접근 방식 인 것 같습니다.</target>
        </trans-unit>
        <trans-unit id="360a6b89e50ba4bd210cc51e591971ee1f69294c" translate="yes" xml:space="preserve">
          <source>Just by combining the top answers, I threw together a very simple extension:</source>
          <target state="translated">최고의 답변을 결합하여 매우 간단한 확장을 함께 던졌습니다.</target>
        </trans-unit>
        <trans-unit id="10a092cb98eb6837964bf5134343571d1daf40dd" translate="yes" xml:space="preserve">
          <source>My solution works in &lt;a href=&quot;https://en.wikipedia.org/wiki/.NET_Compact_Framework&quot;&gt;.NET Compact Framework&lt;/a&gt; (3.5) and supports type checking &lt;strong&gt;at compile time&lt;/strong&gt;:</source>
          <target state="translated">내 솔루션은 &lt;a href=&quot;https://en.wikipedia.org/wiki/.NET_Compact_Framework&quot;&gt;.NET Compact Framework&lt;/a&gt; (3.5)에서 작동 &lt;strong&gt;하며 컴파일 타임에&lt;/strong&gt; 유형 검사 &lt;strong&gt;를&lt;/strong&gt; 지원합니다.</target>
        </trans-unit>
        <trans-unit id="e37b0b483215648e142c8ca2c80b58e28804d64a" translate="yes" xml:space="preserve">
          <source>Now you call:</source>
          <target state="translated">이제 전화하십시오 :</target>
        </trans-unit>
        <trans-unit id="2f412be11b8b6e2fdd3aeed2275fcb0a44143bcf" translate="yes" xml:space="preserve">
          <source>Of course you can return &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;, but that buys you nothing here.</source>
          <target state="translated">물론 &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; 반환 할 수는 있지만 여기서는 아무것도 사지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c48ca7dddfe2d112cac0be14ca0611658d437c22" translate="yes" xml:space="preserve">
          <source>One can also use some sort of caching if performance matters, but I don't expect this to be an issue at all.</source>
          <target state="translated">성능이 중요한 경우 일종의 캐싱을 사용할 수도 있지만 이것이 전혀 문제가되지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="82da7dfc583a0e4fe4bb642d8fab3b6d854e977c" translate="yes" xml:space="preserve">
          <source>Some versions of the .NET framework do not support &lt;code&gt;Enum.GetValues&lt;/code&gt;. Here's a good workaround from &lt;a href=&quot;https://web.archive.org/web/20100530072822/http://ideas.dalezak.ca/2008/11/enumgetvalues-in-compact-framework.html&quot;&gt;Ideas 2.0: Enum.GetValues in Compact Framework&lt;/a&gt;:</source>
          <target state="translated">.NET 프레임 워크의 일부 버전은 &lt;code&gt;Enum.GetValues&lt;/code&gt; 를 지원하지 않습니다. 다음은 &lt;a href=&quot;https://web.archive.org/web/20100530072822/http://ideas.dalezak.ca/2008/11/enumgetvalues-in-compact-framework.html&quot;&gt;Ideas 2.0&lt;/a&gt; 의 좋은 해결 방법 입니다. Compact Framework의 Enum.GetValues :</target>
        </trans-unit>
        <trans-unit id="749ad7c6ceddd06a44a6cc8eda059e33ad78e6e0" translate="yes" xml:space="preserve">
          <source>That's at least a little faster, ja?</source>
          <target state="translated">조금 더 빠릅니다, ja?</target>
        </trans-unit>
        <trans-unit id="5ea366c0157b9d18b4275a7ff3221c90cd637a68" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.enum.getnames(v=vs.110).aspx&quot;&gt;System.Enum.GetNames method&lt;/a&gt; can be used to retrieve an array of strings which are the names of the enum values, as the name suggests.</source>
          <target state="translated">&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.enum.getnames(v=vs.110).aspx&quot;&gt;System.Enum.GetNames 메서드&lt;/a&gt; 를 사용하면 이름에서 알 수 있듯이 열거 형 값의 이름 인 문자열 배열을 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9454a0d96d98fe3891e37f1a5902de10e403389c" translate="yes" xml:space="preserve">
          <source>The author uses a double for-loop to iterate through a pair of Enumerators (to create a full deck of cards):</source>
          <target state="translated">저자는 이중 for 루프를 사용하여 한 쌍의 열거자를 반복합니다 (전체 카드 데크 만들기).</target>
        </trans-unit>
        <trans-unit id="d9ceb8e1cff9691037ef71f5e6ef12dffd8981d8" translate="yes" xml:space="preserve">
          <source>The enum itself must be decorated with the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.flagsattribute.aspx&quot;&gt;FlagsAttribute&lt;/a&gt;:</source>
          <target state="translated">열거 형 자체는 &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.flagsattribute.aspx&quot;&gt;FlagsAttribute&lt;/a&gt; 로 장식되어야합니다.</target>
        </trans-unit>
        <trans-unit id="31f80d82d321cecc7a18a82ce47aae20ea4c6a29" translate="yes" xml:space="preserve">
          <source>The first will give you values in form on an array of **&lt;code&gt;object&lt;/code&gt;**s, and the second will give you values in form of an array of **&lt;code&gt;String&lt;/code&gt;**s.</source>
          <target state="translated">첫 번째는 ** &lt;code&gt;object&lt;/code&gt; ** 배열에 값을 제공하고 두 번째는 ** &lt;code&gt;String&lt;/code&gt; ** 배열에 값을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="a3c00a868093bad7c9671d53272d539a2466a64d" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;getListOfEnum&lt;/code&gt; uses reflection to take any enum type and returns an &lt;code&gt;IEnumerable&lt;/code&gt; of all enum values.</source>
          <target state="translated">&lt;code&gt;getListOfEnum&lt;/code&gt; 메소드는 리플렉션을 사용하여 열거 형을 가져오고 모든 열거 형 값의 &lt;code&gt;IEnumerable&lt;/code&gt; 을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="55f11269620118a0c51541b00ccb10c4cded0769" translate="yes" xml:space="preserve">
          <source>There are two ways to iterate an &lt;code&gt;Enum&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Enum&lt;/code&gt; 을 반복하는 두 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="b4b1865dc4a7fd39f1b8aa8db86d453dcc081bf2" translate="yes" xml:space="preserve">
          <source>There you go, &lt;code&gt;IEnumerable&amp;lt;Suit&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;IEnumerable&amp;lt;Suit&amp;gt;&lt;/code&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="39a561dadc1177d56df15e8441fdf0e4446cfa83" translate="yes" xml:space="preserve">
          <source>This question appears in Chapter 10 of &quot;&lt;a href=&quot;http://www.amazon.ca/Microsoft-Visual-2013-Step/dp/073568183X&quot;&gt;C# Step by Step 2013&lt;/a&gt;&quot;</source>
          <target state="translated">이 질문은 &quot; &lt;a href=&quot;http://www.amazon.ca/Microsoft-Visual-2013-Step/dp/073568183X&quot;&gt;C # Step by Step 2013&lt;/a&gt; &quot;의 10 장에 나타납니다.</target>
        </trans-unit>
        <trans-unit id="cf5b7c750a4b16617dfd7cff20be48990a9d7985" translate="yes" xml:space="preserve">
          <source>This:</source>
          <target state="translated">This:</target>
        </trans-unit>
        <trans-unit id="089ebedeb2803ff4e74259ec02f9b991ccf33afb" translate="yes" xml:space="preserve">
          <source>Three ways:</source>
          <target state="translated">세 가지 방법 :</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="33b5900dd65f1fd3618f19573c76c63e4674e21f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Cast&amp;lt;T&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Cast&amp;lt;T&amp;gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d00d002ca2e26a173c65238f0c1b8c6432fbf90d" translate="yes" xml:space="preserve">
          <source>Use it in a &lt;code&gt;foreach&lt;/code&gt; loop as below:</source>
          <target state="translated">아래와 같이 &lt;code&gt;foreach&lt;/code&gt; 루프에서 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="644d8c6b477119eaf658031f82a7cb1c621f1d00" translate="yes" xml:space="preserve">
          <source>What if you know the type will be an &lt;code&gt;enum&lt;/code&gt;, but you don't know what the exact type is at compile time?</source>
          <target state="translated">형식이 &lt;code&gt;enum&lt;/code&gt; 것을 알고 있지만 컴파일 타임에 정확한 형식이 무엇인지 모르는 경우 어떻게해야합니까?</target>
        </trans-unit>
        <trans-unit id="d713ca8d870cdfeb112abd654479d42242f3e918" translate="yes" xml:space="preserve">
          <source>Will output:</source>
          <target state="translated">출력합니다 :</target>
        </trans-unit>
        <trans-unit id="e747aad7bee356ac10c009028151f40094025583" translate="yes" xml:space="preserve">
          <source>You won't get &lt;code&gt;Enum.GetValues()&lt;/code&gt; in &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Silverlight&quot;&gt;Silverlight&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Silverlight&quot;&gt;Silverlight&lt;/a&gt; 에서는 &lt;code&gt;Enum.GetValues()&lt;/code&gt; 를 얻지 못합니다.</target>
        </trans-unit>
        <trans-unit id="26393ee27fab3122bc1d86c27587f0ca6510073c" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;PlayingCard&lt;/code&gt; is a card object with a defined &lt;code&gt;Suit&lt;/code&gt; and &lt;code&gt;Value&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;PlayingCard&lt;/code&gt; 는 &lt;code&gt;Suit&lt;/code&gt; 와 &lt;code&gt;Value&lt;/code&gt; 가 정의 된 카드 객체입니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
