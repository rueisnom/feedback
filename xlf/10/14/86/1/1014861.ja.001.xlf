<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/1014861">
    <body>
      <group id="1014861">
        <trans-unit id="7b397ba52ee94766842947b88cacc5d7c45eb414" translate="yes" xml:space="preserve">
          <source>(Copy and pasted from the URL above).</source>
          <target state="translated">上記URLからコピー&amp;ペースト)。</target>
        </trans-unit>
        <trans-unit id="705bae603e7f65e8924343357e7788723ac06749" translate="yes" xml:space="preserve">
          <source>(compare the two lists on the left styled with standard selectors and the two lists on the right styled with axe selectors)</source>
          <target state="translated">(左の2つのリストは標準セレクタでスタイルを整え、右の2つのリストは斧セレクタでスタイルを整えたものを比較してください)</target>
        </trans-unit>
        <trans-unit id="d27f20f24403a2ee408f76161810e65b625ac349" translate="yes" xml:space="preserve">
          <source>... I'm hoping that there is some sort of workaround that exists native to CSS Level 2...</source>
          <target state="translated">...CSS Level2にネイティブに存在する何らかの回避策があるといいのですが・・・。</target>
        </trans-unit>
        <trans-unit id="82e0198d7fb554ce11dda78b7187f808521eff94" translate="yes" xml:space="preserve">
          <source>... but for things like &lt;code&gt;::after&lt;/code&gt; and &lt;code&gt;:hover&lt;/code&gt;, I'm not at all certain in which CSS version those first appeared.</source>
          <target state="translated">...しかし、 &lt;code&gt;::after&lt;/code&gt; や &lt;code&gt;:hover&lt;/code&gt; などの場合、最初に表示されたCSSのバージョンがまったくわかりません。</target>
        </trans-unit>
        <trans-unit id="eddc39850fc9dfc650c1fd65c41dbbc827922439" translate="yes" xml:space="preserve">
          <source>... pretty &lt;em&gt;gross&lt;/em&gt;, but with just CSS and HTML it is possible to touch and re-touch anything but the &lt;code&gt;body&lt;/code&gt; and &lt;code&gt;:root&lt;/code&gt; from just about anywhere by linking the &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; properties of &lt;code&gt;radio&lt;/code&gt;/&lt;code&gt;checkbox&lt;/code&gt;&lt;em&gt;&lt;code&gt;input&lt;/code&gt;s&lt;/em&gt; and &lt;code&gt;label&lt;/code&gt;&lt;em&gt;triggers&lt;/em&gt;; likely someone'll show how to re-touch those at some point.</source>
          <target state="translated">...かなり&lt;em&gt;大まか&lt;/em&gt;ですが、CSSとHTMLだけで、 &lt;code&gt;id&lt;/code&gt; をリンクし、 &lt;code&gt;radio&lt;/code&gt; / &lt;code&gt;checkbox&lt;/code&gt; &lt;em&gt; &lt;code&gt;input&lt;/code&gt; &lt;/em&gt;と &lt;code&gt;label&lt;/code&gt; &lt;em&gt;トリガー&lt;/em&gt; &lt;em&gt;の&lt;/em&gt;プロパティを指定 &lt;code&gt;for&lt;/code&gt; ことで、ほぼどこからでも &lt;code&gt;body&lt;/code&gt; と &lt;code&gt;:root&lt;/code&gt; 以外のものをタッチして再タッチすることができ&lt;em&gt;ます&lt;/em&gt; 。 おそらく誰かがいつかそれらを修正する方法を示すでしょう。</target>
        </trans-unit>
        <trans-unit id="8b043cba9ff6a55d3381955a4bd58a718bc7edc7" translate="yes" xml:space="preserve">
          <source>3.2. The Nesting At-Rule: @nest</source>
          <target state="translated">3.2.ネスティング・アットルール。ネスティング</target>
        </trans-unit>
        <trans-unit id="3da93df5d2b54ef90c349bf508b3a08d5eddf8b2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://css-tricks.com/parent-selectors-in-css/&quot;&gt;Chris Coyier on the talks of Parent selector&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://css-tricks.com/parent-selectors-in-css/&quot;&gt;親セレクターの話についてのクリス・コイエ&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="f6ec4d61fd9ab8aae629c7bd115d45fe7e27e7b9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://csswizardry.com/2011/09/writing-efficient-css-selectors/&quot;&gt;Harry Roberts again on writing efficient CSS selectors&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://csswizardry.com/2011/09/writing-efficient-css-selectors/&quot;&gt;効率的なCSSセレクターの作成について、ハリーロバーツ氏は再度述べてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="38a1f468f30c6d5ab191612fbceaee120b26a668" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://elementqueries.com/demos/parent.html&quot;&gt;Here's a demo of &lt;code&gt;$parent&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://staticresource.com/parent.html&quot;&gt;another &lt;code&gt;$parent&lt;/code&gt; demo that works in Internet&amp;nbsp;Explorer&amp;nbsp;8&lt;/a&gt;, as well as &lt;a href=&quot;https://i.imgur.com/QyVAj2u.png&quot;&gt;a screenshot in case you don't have Internet&amp;nbsp;Explorer&amp;nbsp;8 around to test with&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://elementqueries.com/demos/parent.html&quot;&gt;これは、&lt;/a&gt; &lt;a href=&quot;http://staticresource.com/parent.html&quot;&gt; &lt;code&gt;$parent&lt;/code&gt; デモと、Internet Explorer 8&lt;/a&gt;で動作する別の$ parentデモ、および&lt;a href=&quot;https://i.imgur.com/QyVAj2u.png&quot;&gt;Internet Explorer 8を使用してテストできない場合のスクリーンショットです&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="2f14858af83fb794e7da625e0923603d47a5ac8b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://snook.ca/archives/html_and_css/css-parent-selectors&quot;&gt;Jonathan Snook explains how CSS is evaluated&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://snook.ca/archives/html_and_css/css-parent-selectors&quot;&gt;Jonathan SnookがCSSの評価方法を説明しています&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef35928c432b9c4253e81fbd92a966eae480f52c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://jsfiddle.net/ilyabogdanov/o4fkL7kv/&quot;&gt;Another example&lt;/a&gt; how to use it with text-inputs - select parent fieldset</source>
          <target state="translated">テキスト入力でそれを使用する&lt;a href=&quot;https://jsfiddle.net/ilyabogdanov/o4fkL7kv/&quot;&gt;別の例&lt;/a&gt; -親フィールドセットを選択する</target>
        </trans-unit>
        <trans-unit id="bce3f4a409dc0c67054a7e806ad3eecf69f742f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="59126bc4b62e268cb8bfd989e38d43eaba68ba53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;axe&lt;/strong&gt; is presently in a relatively early BETA stage of development.</source>
          <target state="translated">&lt;strong&gt;ax&lt;/strong&gt;は現在、開発の比較的初期のベータ段階にあります。</target>
        </trans-unit>
        <trans-unit id="0a33cff9020a55fa3185256ec7c4be09e6bf6115" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jQuery&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;jQuery&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="581b2a4bc4f69b824674b1fafce3cebe87835ff7" translate="yes" xml:space="preserve">
          <source>Although there is no parent selector in standard CSS at present, I am working on a (personal) project called &lt;strong&gt;axe&lt;/strong&gt; (ie. &lt;em&gt;Augmented CSS Selector Syntax / ACSSSS&lt;/em&gt;) which, among its 7 new selectors, includes both:</source>
          <target state="translated">現在、標準CSSには親セレクターはありませんが、 &lt;strong&gt;ax&lt;/strong&gt; （つまり、 &lt;em&gt;拡張CSSセレクター構文/ ACSSSS&lt;/em&gt; ）と呼ばれる（個人的な）プロジェクトに取り組んでおり、7つの新しいセレクターの中に次の両方が含まれています。</target>
        </trans-unit>
        <trans-unit id="cd78f2ac716d2cda34f6ca00275c12ae8f213f6e" translate="yes" xml:space="preserve">
          <source>An element can be focused if it has a &lt;code&gt;tabindex&lt;/code&gt; attribute.</source>
          <target state="translated">要素は、 &lt;code&gt;tabindex&lt;/code&gt; 属性がある場合にフォーカスできます。</target>
        </trans-unit>
        <trans-unit id="69ad4e17d87b7e2b85b003e0a8823937ee0cb2eb" translate="yes" xml:space="preserve">
          <source>And then simply:</source>
          <target state="translated">そして、単純に</target>
        </trans-unit>
        <trans-unit id="c87d339dfeeb0ffcb18ef3ea996bc725cc487ee7" translate="yes" xml:space="preserve">
          <source>Any ideas?</source>
          <target state="translated">何かアイデアは?</target>
        </trans-unit>
        <trans-unit id="46da08d1043ad879cdcc45e6f65a18f2928a64da" translate="yes" xml:space="preserve">
          <source>As an example, my CSS would be something like this:</source>
          <target state="translated">例として、私のCSSは次のようになります。</target>
        </trans-unit>
        <trans-unit id="f30ffa0dd6e130ff96540648031fcd83f6808c90" translate="yes" xml:space="preserve">
          <source>As mentioned by a couple of others, there isn't a way to style an element's parent/s using just CSS but the following works with &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;:</source>
          <target state="translated">他のカップルが述べたように、CSSだけを使用して要素の親をスタイルする方法はありませんが、以下は&lt;a href=&quot;http://jquery.com/&quot;&gt;jQueryで&lt;/a&gt;機能します。</target>
        </trans-unit>
        <trans-unit id="ad5b8a09eccf6abdc58ead5f76417e9e20fb8e36" translate="yes" xml:space="preserve">
          <source>At least up to and including CSS&amp;nbsp;3 you cannot select like that.
But it can be done pretty easily nowadays in JavaScript, you just need to add a bit of vanilla JavaScript, notice that the code is pretty short.</source>
          <target state="translated">少なくともCSS 3までは、そのように選択することはできません。 しかし、最近のJavaScriptではかなり簡単に実行できます。ごく簡単なJavaScriptを少し追加するだけで、コードがかなり短いことに注意してください。</target>
        </trans-unit>
        <trans-unit id="43449dc9ba2bd2b62b86c3428241f7e4790aaf86" translate="yes" xml:space="preserve">
          <source>BTW, it works in Internet&amp;nbsp;Explorer.</source>
          <target state="translated">ところで、それはInternet Explorerで動作します。</target>
        </trans-unit>
        <trans-unit id="fb13078eac3f8b09b86d5eef2f091a49b9e6bc9b" translate="yes" xml:space="preserve">
          <source>Browser support for focus-within</source>
          <target state="translated">ブラウザでフォーカス内をサポート</target>
        </trans-unit>
        <trans-unit id="2aee8f3ddcd99c50c0e1366c2789e0a30beb2659" translate="yes" xml:space="preserve">
          <source>Browser support: &lt;a href=&quot;https://caniuse.com/#feat=css-has&quot;&gt;none&lt;/a&gt;</source>
          <target state="translated">ブラウザーサポート： &lt;a href=&quot;https://caniuse.com/#feat=css-has&quot;&gt;なし&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a3e5d0dc70b9f32887f6a06fe04c38bba9810f51" translate="yes" xml:space="preserve">
          <source>But &lt;a href=&quot;http://calendar.perfplanet.com/2011/css-selector-performance-has-changed-for-the-better/&quot;&gt;Nicole Sullivan has some interesting facts on positive trends&lt;/a&gt;.</source>
          <target state="translated">しかし、 &lt;a href=&quot;http://calendar.perfplanet.com/2011/css-selector-performance-has-changed-for-the-better/&quot;&gt;ニコール・サリバンは、前向きな傾向についていくつかの興味深い事実を持っています&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="6effa79c887dd8d50614b8719d9ff351118d26aa" translate="yes" xml:space="preserve">
          <source>But as you already seem to have an &lt;code&gt;.active&lt;/code&gt; class, it would be easier to move that class to the &lt;code&gt;li&lt;/code&gt; (instead of the &lt;code&gt;a&lt;/code&gt;). That way you can access both the &lt;code&gt;li&lt;/code&gt; and the &lt;code&gt;a&lt;/code&gt; via CSS only.</source>
          <target state="translated">しかし、すでに &lt;code&gt;.active&lt;/code&gt; クラスがあるように見えるので、そのクラスを（ &lt;code&gt;a&lt;/code&gt; の代わりに） &lt;code&gt;li&lt;/code&gt; に移動する方が簡単です。 そうすれば &lt;code&gt;a&lt;/code&gt; CSS経由でのみ &lt;code&gt;li&lt;/code&gt; とaの両方にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="6f6985a9d0eb315212432208d6414fa92b4733f0" translate="yes" xml:space="preserve">
          <source>But we have to wait for browsers' implementation :(</source>
          <target state="translated">しかし、ブラウザの実装を待たなければなりません。</target>
        </trans-unit>
        <trans-unit id="61681cfa05004a759407afbe83568d2e0493d3f2" translate="yes" xml:space="preserve">
          <source>CSS 2.1 Selectors Spec</source>
          <target state="translated">CSS 2.1 セレクタ仕様</target>
        </trans-unit>
        <trans-unit id="1dccedaba4e0a58fadb2e33c024826e8f5a099f0" translate="yes" xml:space="preserve">
          <source>CSS 4 will be fancy if it adds some &lt;em&gt;hooks&lt;/em&gt; into &lt;em&gt;walking backwards&lt;/em&gt;. Till then it is possible (though &lt;strong&gt;not&lt;/strong&gt; advisable) to use &lt;code&gt;checkbox&lt;/code&gt; and/or &lt;code&gt;radio&lt;/code&gt;&lt;em&gt;&lt;code&gt;input&lt;/code&gt;s&lt;/em&gt; to &lt;em&gt;break&lt;/em&gt; the usual way that things are connected, and through that also allow CSS to operate outside of its normal scope...</source>
          <target state="translated">CSS 4は、 &lt;em&gt;後ろ向き&lt;/em&gt;に&lt;em&gt;歩くための&lt;/em&gt; &lt;em&gt;フック&lt;/em&gt;を追加するのであれば、ファンシーになります。 それまでは、（推奨され&lt;strong&gt;ませんが&lt;/strong&gt; ） &lt;code&gt;checkbox&lt;/code&gt; や &lt;code&gt;radio&lt;/code&gt; &lt;em&gt; &lt;code&gt;input&lt;/code&gt; &lt;/em&gt;を使用して、通常の接続方法を&lt;em&gt;破る&lt;/em&gt;ことができます。これにより、CSSが通常のスコープ外で動作することも可能になります...</target>
        </trans-unit>
        <trans-unit id="dab33d9e23d7eb31831e879a062b7f5917762fda" translate="yes" xml:space="preserve">
          <source>CSS output:</source>
          <target state="translated">CSSを出力します。</target>
        </trans-unit>
        <trans-unit id="3b5005583c3ac04422c049fe373d867e888072be" translate="yes" xml:space="preserve">
          <source>Changing parent element based on child element can currently only happen when we have an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element inside the parent element. When an input gets focus, its corresponding parent element can get affected using CSS.</source>
          <target state="translated">子要素に基づく親要素の変更は、現在、親要素内に &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素がある場合にのみ発生します。 入力がフォーカスを取得すると、対応する親要素がCSSを使用して影響を受ける可能性があります。</target>
        </trans-unit>
        <trans-unit id="18556e9ea9f9b7f6726983bf605220880f25984b" translate="yes" xml:space="preserve">
          <source>Check out this HTML:</source>
          <target state="translated">このHTMLをチェックしてみてください。</target>
        </trans-unit>
        <trans-unit id="c5bb43480ad4b78749fb66e153d30232a52d93b0" translate="yes" xml:space="preserve">
          <source>Currently there is no parent selector &amp;amp; it is not even being discussed in any of the talks of W3C. You need to understand how CSS is evaluated by the browser to actually understand if we need it or not.</source>
          <target state="translated">現在、親セレクターはなく、W3Cのどの講演でも議論されていません。 CSSがブラウザーでどのように評価されるかを理解して、必要かどうかを実際に理解する必要があります。</target>
        </trans-unit>
        <trans-unit id="4eef675c1b4319602fca50d2de01a62cb4a97177" translate="yes" xml:space="preserve">
          <source>EQCSS also includes &lt;a href=&quot;http://elementqueries.com/#meta-selectors&quot;&gt;meta-selectors&lt;/a&gt;: &lt;code&gt;$prev&lt;/code&gt; for the element before a selected element and &lt;code&gt;$this&lt;/code&gt; for only those elements that match an element query, and more.</source>
          <target state="translated">EQCSSには、 &lt;a href=&quot;http://elementqueries.com/#meta-selectors&quot;&gt;メタセレクター&lt;/a&gt;も含まれています。選択されたエレメントの前のエレメントには &lt;code&gt;$prev&lt;/code&gt; 、エレメントクエリに一致するエレメントのみに &lt;code&gt;$this&lt;/code&gt; などがあります。</target>
        </trans-unit>
        <trans-unit id="3b640aba86fcca65dec1908b6e5c562b31f87dc5" translate="yes" xml:space="preserve">
          <source>Example of valid selectors under this specification:</source>
          <target state="translated">本仕様で有効なセレクタの例。</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">スニペットを展開</target>
        </trans-unit>
        <trans-unit id="464ccf1905e87e5a95c6748de2f236f1f89e0a98" translate="yes" xml:space="preserve">
          <source>Following example will help you understand using &lt;code&gt;:focus-within&lt;/code&gt; in CSS.</source>
          <target state="translated">次の例は、CSSでの &lt;code&gt;:focus-within&lt;/code&gt; の使用を理解するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="f50f072fe39c030829e35c9b8a3624078bf644d8" translate="yes" xml:space="preserve">
          <source>Here's a hack using &lt;code&gt;pointer-events&lt;/code&gt; with &lt;code&gt;hover&lt;/code&gt;:</source>
          <target state="translated">以下は、 &lt;code&gt;pointer-events&lt;/code&gt; と &lt;code&gt;hover&lt;/code&gt; を使用したハックです。</target>
        </trans-unit>
        <trans-unit id="b611322ac06e504df2ce1ba1df17c7e673e24596" translate="yes" xml:space="preserve">
          <source>How do I select the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element that is a direct parent of the anchor element?</source>
          <target state="translated">アンカー要素の直接の親である &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素を選択するにはどうすればよいですか？</target>
        </trans-unit>
        <trans-unit id="6ffd2b70834f91480e84a36fbbcb343068436409" translate="yes" xml:space="preserve">
          <source>However, you can do something like this as well.</source>
          <target state="translated">しかし、こんなこともできます。</target>
        </trans-unit>
        <trans-unit id="a5bd05eb13e3214b3adc618685843351edaf7a3e" translate="yes" xml:space="preserve">
          <source>I am not sure about the other &lt;code&gt;:&lt;/code&gt; selectors, but I &lt;code&gt;:checked&lt;/code&gt; for pre-CSS&amp;nbsp;3. If I remember correctly, it was something like &lt;code&gt;[checked]&lt;/code&gt; which is why you may find it in the above code, for example,</source>
          <target state="translated">他のセレクターについてはわかりませんが、CSS以前3を &lt;code&gt;:checked&lt;/code&gt; ました。覚えていれば、 &lt;code&gt;[checked]&lt;/code&gt; ようなものでした。そのため、上記のコードで見つけることができます。たとえば、</target>
        </trans-unit>
        <trans-unit id="196213724285ce38a731fd4d44cc552e824831f8" translate="yes" xml:space="preserve">
          <source>I don&amp;rsquo;t think you can select the parent in CSS only.</source>
          <target state="translated">CSSだけで親を選択できるとは思いません。</target>
        </trans-unit>
        <trans-unit id="16c4776cbb70e04fad7c494fb5241e5d112347a8" translate="yes" xml:space="preserve">
          <source>I know the OP was looking for a CSS solution but it is simple to achieve using jQuery. In my case I needed to find the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; parent tag for a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tag contained in the child &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;. jQuery has the &lt;code&gt;:has&lt;/code&gt; selector so it's possible to identify a parent by the children it contains:</source>
          <target state="translated">OPがCSSソリューションを探していたのは知っていますが、jQueryを使用して簡単に実現できます。 私の場合、子 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; に含まれる &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; タグの &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 親タグを見つける必要がありました。 jQueryには &lt;code&gt;:has&lt;/code&gt; セレクターがあるため、それに含まれる子によって親を識別することができます。</target>
        </trans-unit>
        <trans-unit id="dfe5220200994dbee3e70035d15507704322a597" translate="yes" xml:space="preserve">
          <source>I'd hire some JavaScript code to do that. For example, in React when you iterate over an array, add another class to the parent component, which indicates it contains your children:</source>
          <target state="translated">そのためにJavaScriptのコードをいくつか雇うことにします。例えば、Reactで配列を反復処理するときに、親コンポーネントに別のクラスを追加して、それが子を含んでいることを示します。</target>
        </trans-unit>
        <trans-unit id="70662a08d8251062a3671c0306a258aefc83c674" translate="yes" xml:space="preserve">
          <source>If there was a way to do it, it would be in either of the current CSS selectors specs:</source>
          <target state="translated">もし方法があるとしたら、現在のCSSセレクターの仕様のどちらかにあると思います。</target>
        </trans-unit>
        <trans-unit id="6f922b4a2d0b8bb48f6cf2ff662f85897aeb2004" translate="yes" xml:space="preserve">
          <source>If you want to achieve this using jQuery here is the reference for the &lt;a href=&quot;http://www.snoopcode.com/jquery/jquery-parent-selector&quot;&gt;jQuery parent selector&lt;/a&gt;.</source>
          <target state="translated">jQueryを使用してこれを実現したい場合は、ここに&lt;a href=&quot;http://www.snoopcode.com/jquery/jquery-parent-selector&quot;&gt;jQuery親セレクターの&lt;/a&gt;リファレンスがあります。</target>
        </trans-unit>
        <trans-unit id="d65e5da9c83a072af4ee2b07ecb88b8f0f120074" translate="yes" xml:space="preserve">
          <source>In the meantime, you'll have to resort to JavaScript if you need to select a parent element.</source>
          <target state="translated">その間、親要素を選択する必要がある場合は JavaScript に頼らなければなりません。</target>
        </trans-unit>
        <trans-unit id="f16c306ee15fdd03dfd636b9bce7c73b96e2dda9" translate="yes" xml:space="preserve">
          <source>Is there a CSS parent selector</source>
          <target state="translated">CSSの親セレクタはありますか?</target>
        </trans-unit>
        <trans-unit id="13ec5a3a448276a5a42986cd1ef56bef5b48f756" translate="yes" xml:space="preserve">
          <source>It's now 2019, and the &lt;a href=&quot;https://drafts.csswg.org/css-nesting-1/&quot;&gt;latest draft of the CSS Nesting Module&lt;/a&gt; actually has something like this. Introducing &lt;code&gt;@nest&lt;/code&gt; at-rules.</source>
          <target state="translated">現在は2019年です&lt;a href=&quot;https://drafts.csswg.org/css-nesting-1/&quot;&gt;。CSSネスティングモジュールの最新のドラフトには、&lt;/a&gt;実際には次のようなものがあります。 &lt;code&gt;@nest&lt;/code&gt; at-rulesの紹介。</target>
        </trans-unit>
        <trans-unit id="4b931fd1efc1773a431641d534b7304ded42decc" translate="yes" xml:space="preserve">
          <source>It's possible with ampersand in &lt;a href=&quot;http://en.wikipedia.org/wiki/Sass_%28stylesheet_language%29&quot;&gt;Sass&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Sass_%28stylesheet_language%29&quot;&gt;Sassの&lt;/a&gt;アンパサンドで可能です：</target>
        </trans-unit>
        <trans-unit id="74301d932f63fc4e123ec9936b949e5886c20f87" translate="yes" xml:space="preserve">
          <source>Just an idea for horizontal menu...</source>
          <target state="translated">横長メニューのアイデアだけで...。</target>
        </trans-unit>
        <trans-unit id="47023b4c7e50240fc29adb73ee5120bc8d7e6ed8" translate="yes" xml:space="preserve">
          <source>No, you cannot select the parent in CSS only.</source>
          <target state="translated">いいえ、CSSだけでは親を選択することはできません。</target>
        </trans-unit>
        <trans-unit id="20e18f525ed9580c55fc072a10875e2a19f1cdef" translate="yes" xml:space="preserve">
          <source>Not in CSS 2 as far as I'm aware.  CSS 3 has more robust selectors but is not consistently implemented across all browsers.  Even with the improved selectors, I don't believe it will accomplish exactly what you've specified in your example.</source>
          <target state="translated">私の知る限り、CSS 2 にはありません。CSS 3 はより堅牢なセレクタを持っていますが、すべてのブラウザに一貫して実装されているわけではありません。セレクタが改善されたとしても、あなたの例で指定したことを正確に達成できるとは思えません。</target>
        </trans-unit>
        <trans-unit id="8c22cb9ba25f96a44e36262373ee0c19158feb75" translate="yes" xml:space="preserve">
          <source>Obviously there are ways of doing this with JavaScript, but I'm hoping that there is some sort of workaround that exists native to CSS Level 2.</source>
          <target state="translated">JavaScriptでこれを行う方法があるのは明らかですが、CSS Level 2にネイティブに存在する何らかの回避策があることを期待しています。</target>
        </trans-unit>
        <trans-unit id="234c99c2581b8c6536fb11fe85dcb8d8997ba0cb" translate="yes" xml:space="preserve">
          <source>One additional caveat is that only &lt;strong&gt;one&lt;/strong&gt;&lt;code&gt;input&lt;/code&gt; of a specific &lt;code&gt;id&lt;/code&gt; maybe used, first &lt;code&gt;checkbox&lt;/code&gt;/&lt;code&gt;radio&lt;/code&gt;&lt;em&gt;wins&lt;/em&gt; a toggled state in other words... &lt;strong&gt;But&lt;/strong&gt; multiple labels can all point to the same &lt;code&gt;input&lt;/code&gt;, though that would make both the HTML and CSS look even grosser.</source>
          <target state="translated">追加の注意点の&lt;strong&gt;1つ&lt;/strong&gt;は、特定の &lt;code&gt;id&lt;/code&gt; &lt;strong&gt;1つの&lt;/strong&gt; &lt;code&gt;input&lt;/code&gt; のみが使用される可能性があることです。つまり、最初の &lt;code&gt;checkbox&lt;/code&gt; / &lt;code&gt;radio&lt;/code&gt; がトグル状態になります... &lt;strong&gt;しかし&lt;/strong&gt; 、HTMLとCSSの両方が見えるようになりますが、複数のラベルはすべて同じ &lt;code&gt;input&lt;/code&gt; 指すことができますより粗い。</target>
        </trans-unit>
        <trans-unit id="dad84c76aa649120afe0f6e800a2dd0ebf6d391f" translate="yes" xml:space="preserve">
          <source>One of the things EQCSS adds is a parent selector. It works in all browsers, Internet&amp;nbsp;Explorer&amp;nbsp;8 and up. Here's the format:</source>
          <target state="translated">EQCSSが追加するものの1つは、親セレクターです。 Internet Explorer 8以降のすべてのブラウザーで動作します。 形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a02dc6e19f4de7ac398851a48b96aa66b7230018" translate="yes" xml:space="preserve">
          <source>Or a shorter way if you use &lt;strong&gt;jQuery&lt;/strong&gt; in your application:</source>
          <target state="translated">または、アプリケーションで&lt;strong&gt;jQuery&lt;/strong&gt;を使用する場合の短い方法：</target>
        </trans-unit>
        <trans-unit id="43800482e3beb106c88c7aaf358738953555e1f3" translate="yes" xml:space="preserve">
          <source>Or select it when it's active:</source>
          <target state="translated">またはアクティブなときに選択してください。</target>
        </trans-unit>
        <trans-unit id="ca5bd20a655a2bc4968ade970397decdfd873fd9" translate="yes" xml:space="preserve">
          <source>Part of CSS</source>
          <target state="translated">CSSの一部</target>
        </trans-unit>
        <trans-unit id="f2cdaf3876200e6785af9542210009f91d3480c1" translate="yes" xml:space="preserve">
          <source>Part of HTML</source>
          <target state="translated">HTMLの一部</target>
        </trans-unit>
        <trans-unit id="01da1613b2040aa32ee1cde9b1a6656ac4994461" translate="yes" xml:space="preserve">
          <source>See a demo here:</source>
          <target state="translated">デモはこちらからご覧ください。</target>
        </trans-unit>
        <trans-unit id="0b82b256a797a7919f29e1212ab0fa27a680b419" translate="yes" xml:space="preserve">
          <source>Selectors Level 3 Spec</source>
          <target state="translated">セレクタレベル3仕様</target>
        </trans-unit>
        <trans-unit id="fd5cee2f3389e51c22f44f6ab1db6f1e89aebf1f" translate="yes" xml:space="preserve">
          <source>So here we've opened an element query on every element &lt;code&gt;a.active&lt;/code&gt;, and for the styles inside that query, things like &lt;code&gt;$parent&lt;/code&gt; make sense, because there's a reference point. The browser can find the parent, because it's very similar to &lt;code&gt;parentNode&lt;/code&gt; in JavaScript.</source>
          <target state="translated">したがって、ここではすべての要素 &lt;code&gt;a.active&lt;/code&gt; で要素クエリを開いています。そのクエリ内のスタイルでは、参照ポイントがあるため、 &lt;code&gt;$parent&lt;/code&gt; ことは理にかなっています。 JavaScriptの &lt;code&gt;parentNode&lt;/code&gt; とよく似ているため、ブラウザーは親を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="52a2c95be3c108c186043953d9e9e35ce7f66497" translate="yes" xml:space="preserve">
          <source>Tabindex</source>
          <target state="translated">Tabindex</target>
        </trans-unit>
        <trans-unit id="9bd7792b2744f0d1b786cf5d8d866a187ed9a7c0" translate="yes" xml:space="preserve">
          <source>Technically there is no direct way to do this. However, you can sort that out with either jQuery or JavaScript.</source>
          <target state="translated">技術的には直接的な方法はありません。しかし、jQueryかJavaScriptのどちらかを使用して整理することができます。</target>
        </trans-unit>
        <trans-unit id="4eaef36c3573d5075574bb5d85ee107c8ad1986a" translate="yes" xml:space="preserve">
          <source>That all stated, please don't ever use this in production, not even in anger. As a joke sure, or in other words just because something &lt;em&gt;can&lt;/em&gt; be done does not always mean it &lt;em&gt;should&lt;/em&gt;.</source>
          <target state="translated">つまり、怒りでさえも、これを本番で使用しないでください。 冗談で、つまり何かを実行&lt;em&gt;できるから&lt;/em&gt;といって、必ずしもそうであると&lt;em&gt;は&lt;/em&gt;限りません。</target>
        </trans-unit>
        <trans-unit id="a629de3f83fd6a1d08af4cc79dae0063f03bb926" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://dev.w3.org/csswg/selectors4/#relational&quot;&gt;Selectors Level 4 Working Draft&lt;/a&gt; includes a &lt;code&gt;:has()&lt;/code&gt; pseudo-class that works the same as the &lt;a href=&quot;https://api.jquery.com/has-selector/&quot;&gt;jQuery implementation&lt;/a&gt;. As of 2019, &lt;strong&gt;&lt;a href=&quot;https://caniuse.com/#feat=css-has&quot;&gt;this is still not supported by any browser&lt;/a&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://dev.w3.org/csswg/selectors4/#relational&quot;&gt;セレクターレベル4草案に&lt;/a&gt;は、 &lt;a href=&quot;https://api.jquery.com/has-selector/&quot;&gt;jQuery実装&lt;/a&gt;と同じように機能する &lt;code&gt;:has()&lt;/code&gt; 疑似クラスが含まれています。 2019年&lt;strong&gt;&lt;a href=&quot;https://caniuse.com/#feat=css-has&quot;&gt;現在&lt;/a&gt;&lt;/strong&gt; 、 &lt;strong&gt;これはどのブラウザでもまだサポートされていません&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="28e1654c9ed1b1cc0caadd43d65e06ae4949ab6f" translate="yes" xml:space="preserve">
          <source>The @nest rule functions identically to a style rule: it starts with a selector, and contains declarations that apply to the elements the selector matches. The only difference is that the selector used in a @nest rule must be nest-containing, which means it contains a nesting selector in it somewhere. A list of selectors is nest-containing if all of its individual complex selectors are nest-containing.</source>
          <target state="translated">それはセレクタで始まり、セレクタがマッチする要素に適用される宣言を含みます。唯一の違いは、@nestルールで使用されるセレクタは入れ子を含んでいなければならないこと、つまり、どこかに入れ子セレクタが含まれていることです。セレクタのリストは、その個々の複合セレクタのすべてがネストを含む場合、ネストを含むものとします。</target>
        </trans-unit>
        <trans-unit id="18e42931d9416cdf818b4232a0135af47f2e5f6b" translate="yes" xml:space="preserve">
          <source>The CSS selector &amp;ldquo;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/General_sibling_selectors&quot;&gt;General Sibling Combinator&lt;/a&gt;&amp;rdquo; could maybe used for what you want:</source>
          <target state="translated">CSSセレクター「 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/General_sibling_selectors&quot;&gt;General Sibling Combinator&lt;/a&gt; 」は、必要に応じて使用できます。</target>
        </trans-unit>
        <trans-unit id="b018e3bf2d2a2a0a6d77db0e353a74d400c77660" translate="yes" xml:space="preserve">
          <source>The W3C excluded such a selector because of the huge performance impact it would have on a browser.</source>
          <target state="translated">W3Cは、このようなセレクタがブラウザに与えるパフォーマンスへの影響が大きいため、このようなセレクタを除外しました。</target>
        </trans-unit>
        <trans-unit id="b456d9cbdcf9b8cd585766201d57b3476c428074" translate="yes" xml:space="preserve">
          <source>The article &lt;em&gt;&lt;a href=&quot;http://snook.ca/archives/html_and_css/css-parent-selectors&quot;&gt;Why we don't have a parent selector&lt;/a&gt;&lt;/em&gt; explains it in detail.</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;http://snook.ca/archives/html_and_css/css-parent-selectors&quot;&gt;親セレクターがない理由&lt;/a&gt;&lt;/em&gt;の記事で詳細を説明しています。</target>
        </trans-unit>
        <trans-unit id="801acbc757fcb57499e82fcad44f7ba6ab312dfc" translate="yes" xml:space="preserve">
          <source>The menu that I am trying to style is being spewed out by a CMS, so I can't move the active element to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element... (unless I theme the menu creation module which I'd rather not do).</source>
          <target state="translated">スタイルを設定しようとしているメニューがCMSによって吐き出されているため、アクティブな要素を &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素に移動できません...（メニュー作成モジュールにテーマを設定しない限り、やりたくない） 。</target>
        </trans-unit>
        <trans-unit id="7795ddddbd1162f3d3bf7ad4e15c37d50aa7a07a" translate="yes" xml:space="preserve">
          <source>The pseudo element &lt;code&gt;:focus-within&lt;/code&gt; allows a parent to be selected if a descendent has focus.</source>
          <target state="translated">疑似要素 &lt;code&gt;:focus-within&lt;/code&gt; を使用すると、子孫にフォーカスがある場合に親を選択できます。</target>
        </trans-unit>
        <trans-unit id="6871a464234ef2e2de2e8af814ef8a3bdbc58428" translate="yes" xml:space="preserve">
          <source>The short answer is &lt;strong&gt;NO&lt;/strong&gt;; we don't have a &lt;code&gt;parent selector&lt;/code&gt; at this stage in CSS, but if you don't have to swap the elements or classes anyway, the second option is using JavaScript. Something like this:</source>
          <target state="translated">短い答えは&lt;strong&gt;NO&lt;/strong&gt;です。 CSSのこの段階では &lt;code&gt;parent selector&lt;/code&gt; はありませんが、要素またはクラスを交換する必要がない場合は、2番目のオプションはJavaScriptを使用します。 このようなもの：</target>
        </trans-unit>
        <trans-unit id="71729e03cfb9f3fd601d1a7ab83c941bcfc92b47" translate="yes" xml:space="preserve">
          <source>Then the browser will have to wait until it has loaded and parsed everything until the &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; to determine if the page should be red or not.</source>
          <target state="translated">次に、ブラウザは、 &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; が読み込まれるまですべてを解析して、ページを赤にするかどうかを判断するまで待機する必要があります。</target>
        </trans-unit>
        <trans-unit id="d00d805d268185840395c641e28b3bc5add4b860" translate="yes" xml:space="preserve">
          <source>There are many more capabilities; just check out the documentation of the plugin.</source>
          <target state="translated">他にも多くの機能があります。</target>
        </trans-unit>
        <trans-unit id="e67cea1b2a161c6681e116a6774619d3f84b1bd3" translate="yes" xml:space="preserve">
          <source>There is a lot of technical explanation here.</source>
          <target state="translated">ここでは技術的な説明が多いです。</target>
        </trans-unit>
        <trans-unit id="afc3a63e369a4fed52f8738f4589c056fb25ee8d" translate="yes" xml:space="preserve">
          <source>There is currently no way to select the parent of an element in CSS.</source>
          <target state="translated">現在、CSSでは要素の親を選択する方法がありません。</target>
        </trans-unit>
        <trans-unit id="64126c1f70e0ad510ec815dd95643cda6db57054" translate="yes" xml:space="preserve">
          <source>There is no parent selector; just the way there is no previous sibling selector. One good reason for not having these selectors is because the browser has to traverse through all children of an element to determine whether or not a class should be applied. For example, if you wrote:</source>
          <target state="translated">前の兄弟セレクタがないのと同じように、親セレクタはありません。これらのセレクタを持たない理由の一つは、あるクラスを適用すべきかどうかを判断するために、ブラウザが要素のすべての子要素を横断しなければならないからです。例えば、以下のように書いたとします。</target>
        </trans-unit>
        <trans-unit id="b4ca2e90f6a7c0b5a95dec74a07e5bdd9c96f44e" translate="yes" xml:space="preserve">
          <source>There isn't a way to do this in CSS&amp;nbsp;2. You could add the class to the &lt;code&gt;li&lt;/code&gt; and reference the &lt;code&gt;a&lt;/code&gt;:</source>
          <target state="translated">CSS 2でこれを行う方法はありません。クラスを &lt;code&gt;li&lt;/code&gt; に追加して、 &lt;code&gt;a&lt;/code&gt; を参照できます。</target>
        </trans-unit>
        <trans-unit id="2a34e62954344c0300972e93384773fea6391d93" translate="yes" xml:space="preserve">
          <source>There no css (and therefore in css preprocessors) parent selector due to &quot;The major reasons for the CSS Working Group previously rejecting proposals for parent selectors are related to browser performance and incremental rendering issues.&quot;</source>
          <target state="translated">css (したがって css プリプロセッサ内)の親セレクタはありません。&quot;CSS ワーキンググループが以前に親セレクタの提案を拒否した主な理由は、ブラウザのパフォーマンスとインクリメンタルレンダリングの問題に関連しています。&quot;</target>
        </trans-unit>
        <trans-unit id="18d3bacd368887644309231e77445d8201da133f" translate="yes" xml:space="preserve">
          <source>There's a plugin that extends CSS to include some non-standard features that can really help when designing websites. It's called &lt;a href=&quot;http://elementqueries.com&quot;&gt;EQCSS&lt;/a&gt;.</source>
          <target state="translated">CSSを拡張して、Webサイトの設計時に本当に役立ついくつかの非標準機能を組み込むプラグインがあります。 &lt;a href=&quot;http://elementqueries.com&quot;&gt;EQCSS&lt;/a&gt;と呼ばれます 。</target>
        </trans-unit>
        <trans-unit id="ebd3737a340ed903c39226bcb7604071a5298840" translate="yes" xml:space="preserve">
          <source>These people are all top class in the field of front end development.</source>
          <target state="translated">この人たちはフロントエンド開発の分野ではトップクラスです。</target>
        </trans-unit>
        <trans-unit id="60157f44e253a7ae7ce43a373250de2567d3b3e7" translate="yes" xml:space="preserve">
          <source>This is the most discussed aspect of the &lt;strong&gt;Selectors Level 4&lt;/strong&gt; specification.
With this, a selector will be able to style an element according to its child by using an exclamation mark after the given selector (!).</source>
          <target state="translated">これは、 &lt;strong&gt;セレクターレベル4&lt;/strong&gt;仕様で最も議論されている側面です。 これにより、セレクターは、指定されたセレクター（！）の後に感嘆符を使用して、その子に従って要素のスタイルを設定できます。</target>
        </trans-unit>
        <trans-unit id="a3377bca324d82054b28ed12a562d840cb5ba6ee" translate="yes" xml:space="preserve">
          <source>This matches any &lt;code&gt;F&lt;/code&gt; element that is preceded by an &lt;code&gt;E&lt;/code&gt; element.</source>
          <target state="translated">これは、 &lt;code&gt;E&lt;/code&gt; 要素の後に続く &lt;code&gt;F&lt;/code&gt; 要素と一致します。</target>
        </trans-unit>
        <trans-unit id="ade13046564c9f73c7d23a1d0201e5b601d80cff" translate="yes" xml:space="preserve">
          <source>This way you can change the style in multiple inner tags, based on the rollover of the parent element.</source>
          <target state="translated">このように、親要素のロールオーバーに基づいて、複数のインナータグのスタイルを変更することができます。</target>
        </trans-unit>
        <trans-unit id="a2ae2524fa82d3b6ca48d01699e987c240ed2e95" translate="yes" xml:space="preserve">
          <source>This will select any parent of a text input. But wait, there's still much more. If you want, you can select a specified parent:</source>
          <target state="translated">これはテキスト入力の任意の親を選択します。しかし、待ってください、まだ他にもたくさんあります。必要であれば、指定した親を選択することができます。</target>
        </trans-unit>
        <trans-unit id="6bf4a3263761c784d37c158220ed791d196fdd9e" translate="yes" xml:space="preserve">
          <source>To aid in all these issues, this specification defines the @nest rule, which imposes fewer restrictions on how to validly nest style rules. Its syntax is:</source>
          <target state="translated">これらすべての問題を支援するために、この仕様では@nestルールを定義しており、スタイルルールを有効にネストする方法についてより少ない制限を課しています。構文は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="a1376a8f7898599fd7de6e615cc6b7beba746b37" translate="yes" xml:space="preserve">
          <source>Try to switch &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;block&lt;/code&gt; display, and then use any style you want. The &lt;code&gt;a&lt;/code&gt; element will fill the &lt;code&gt;li&lt;/code&gt; element, and you will be able to modify its look as you want. Don't forget to set &lt;code&gt;li&lt;/code&gt; padding to 0.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; を切り替えて表示を &lt;code&gt;block&lt;/code&gt; てから、必要なスタイルを使用してください。 &lt;code&gt;a&lt;/code&gt; 要素は &lt;code&gt;li&lt;/code&gt; 要素を満たし、必要に応じてその外観を変更できます。 &lt;code&gt;li&lt;/code&gt; パディングを0に設定することを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="24975ca5508ea9851cec97364cf5dabca8f5a370" translate="yes" xml:space="preserve">
          <source>Updated demo and the rest of code</source>
          <target state="translated">デモと残りのコードを更新</target>
        </trans-unit>
        <trans-unit id="afe653ce0b85079b9bb98d11a41b5e77b2f6340a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;:has()&lt;/code&gt; the original question could be solved with this:</source>
          <target state="translated">&lt;code&gt;:has()&lt;/code&gt; を使用すると、元の質問はこれで解決できます：</target>
        </trans-unit>
        <trans-unit id="60034bec0808b20e41b05d45e963a29c8888458e" translate="yes" xml:space="preserve">
          <source>While direct nesting looks nice, it is somewhat fragile. Some valid nesting selectors, like .foo &amp;amp;, are disallowed, and editing the selector in certain ways can make the rule invalid unexpectedly. As well, some people find the nesting challenging to distinguish visually from the surrounding declarations.</source>
          <target state="translated">直接の入れ子は見栄えは良いですが、やや壊れやすいです。 .foo＆などの一部の有効なネストセレクターは許可されておらず、セレクターを特定の方法で編集すると、ルールが予期せず無効になる可能性があります。 同様に、一部の人々は、入れ子が周囲の宣言と視覚的に区別するのが難しいと感じています。</target>
        </trans-unit>
        <trans-unit id="dbb5d3a24caf372a638b498419bfe0d5936fdb36" translate="yes" xml:space="preserve">
          <source>Yes: &lt;a href=&quot;https://developer.mozilla.org//docs/Web/CSS/:has&quot;&gt;&lt;code&gt;:has()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">はい：： &lt;a href=&quot;https://developer.mozilla.org//docs/Web/CSS/:has&quot;&gt; &lt;code&gt;:has()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b4becc4185bc33bcd14acd7a5c4a3c162b49aff0" translate="yes" xml:space="preserve">
          <source>You can select that &lt;code&gt;span.help&lt;/code&gt; when the &lt;code&gt;input&lt;/code&gt; is active and show it:</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; がアクティブなときにその &lt;code&gt;span.help&lt;/code&gt; を選択して表示できます。</target>
        </trans-unit>
        <trans-unit id="19eac2928591c549608327e2a7b6ea1dbfb4196b" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;https://github.com/Idered/cssParentSelector&quot;&gt;this script&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/Idered/cssParentSelector&quot;&gt;次のスクリプト&lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="86a4aaca88668f11e33e1f945825696dbcae43cc" translate="yes" xml:space="preserve">
          <source>You might try to use hyperlink as the parent, and then change the inner elements on hover. Like this:</source>
          <target state="translated">hyperlinkを親にして、hover時に内側の要素を変更してみるといいかもしれません。こんな感じで。</target>
        </trans-unit>
        <trans-unit id="d481d1b33f51732b9c2e5434d7c91e77a6a5dc0a" translate="yes" xml:space="preserve">
          <source>an &lt;em&gt;any ancestor selector&lt;/em&gt;&lt;code&gt;^&lt;/code&gt; (which enables the opposite selection to &lt;code&gt;[SPACE]&lt;/code&gt;)</source>
          <target state="translated">&lt;em&gt;任意の祖先セレクター&lt;/em&gt; &lt;code&gt;^&lt;/code&gt; （ &lt;code&gt;[SPACE]&lt;/code&gt; と逆の選択が可能になります）</target>
        </trans-unit>
        <trans-unit id="03b96edb4dca056d15b356bd25000fefadf68769" translate="yes" xml:space="preserve">
          <source>an &lt;em&gt;immediate parent&lt;/em&gt; selector &lt;code&gt;&amp;lt;&lt;/code&gt; (which enables the opposite selection to &lt;code&gt;&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;em&gt;直接の親&lt;/em&gt;セレクター &lt;code&gt;&amp;lt;&lt;/code&gt; （これにより、 &lt;code&gt;&amp;gt;&lt;/code&gt; に対する反対の選択が可能になります）</target>
        </trans-unit>
        <trans-unit id="c0cd0fa5b431f90d6f44d53fb95437bc7b01360c" translate="yes" xml:space="preserve">
          <source>will select the &lt;code&gt;ul&lt;/code&gt; element that has a child element with id &lt;em&gt;someId&lt;/em&gt;. Or to answer the original question, something like the following should do the trick (untested):</source>
          <target state="translated">id &lt;em&gt;someIdの&lt;/em&gt;子要素を持つ &lt;code&gt;ul&lt;/code&gt; 要素を選択します。 または、元の質問に答えるには、次のようなものがトリック（試されていない）を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="dac52e037e129a40e9eab87f2da23d1eab4ce701" translate="yes" xml:space="preserve">
          <source>will set a red background-color if the user hovers over any anchor.</source>
          <target state="translated">は、ユーザーがアンカーの上にカーソルを置いたときに赤い背景色を設定します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
