<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/401656">
    <body>
      <group id="401656">
        <trans-unit id="4bd6398b6ec50d16e0ba8b718869fa0726943b47" translate="yes" xml:space="preserve">
          <source>(Emphasis mine.)</source>
          <target state="translated">(Énfasis mío.)</target>
        </trans-unit>
        <trans-unit id="d54e60153602d914878e89e59608b8d75275ed9e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://php.net/sha1&quot;&gt;SHA1&lt;/a&gt; and a salt should suffice (depending, naturally, on whether you are coding something for &lt;a href=&quot;http://en.wikipedia.org/wiki/United_States_Bullion_Depository&quot;&gt;Fort Knox&lt;/a&gt; or a login system for your shopping list) for the foreseeable future. If SHA1 isn't good enough for you, use &lt;a href=&quot;http://php.net/manual/en/function.hash.php&quot;&gt;SHA256&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://php.net/sha1&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SHA1&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y una sal deber&amp;iacute;an ser suficientes (dependiendo, naturalmente, de si est&amp;aacute; codificando algo para &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/United_States_Bullion_Depository&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Fort Knox&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o un sistema de inicio de sesi&amp;oacute;n para su lista de compras) en el futuro previsible. Si SHA1 no es lo suficientemente bueno para usted, use &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://php.net/manual/en/function.hash.php&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SHA256&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a49d7ecc7c611924a2bdc550b87beda1e36e7adf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://xkcd.com/936/&quot;&gt;Entropy&lt;/a&gt;. (Not that I fully subscribe to Randall's viewpoint.)</source>
          <target state="translated">&lt;a href=&quot;http://xkcd.com/936/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entrop&amp;iacute;a&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(No es que me suscriba completamente al punto de vista de Randall).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="331904e34fbc8be8527a2f2cc0ab551951a291a0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/questions/1581610/how-can-i-store-my-users-passwords-safely/1581919#1581919&quot;&gt;excellent answer&lt;/a&gt; with more about why &lt;code&gt;password_hash()&lt;/code&gt; or &lt;code&gt;phpass&lt;/code&gt; are the best way to go.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/1581610/how-can-i-store-my-users-passwords-safely/1581919#1581919&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Excelente respuesta&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con m&amp;aacute;s informaci&amp;oacute;n sobre por qu&amp;eacute; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;password_hash()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;phpass&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son la mejor manera de hacerlo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f6f914dd88be09eb21067092dec3c341a6e91895" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2015/march/enough-with-the-salts-updates-on-secure-password-schemes/&quot;&gt;good blog article&lt;/a&gt; giving recommmended 'work factors' (number of iterations) for main algorithms including bcrypt, scrypt and PBKDF2.</source>
          <target state="translated">&lt;a href=&quot;https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2015/march/enough-with-the-salts-updates-on-secure-password-schemes/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;buen art&amp;iacute;culo de blog que&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ofrece &quot;factores de trabajo&quot; recomendados (n&amp;uacute;mero de iteraciones) para los algoritmos principales, incluidos bcrypt, scrypt y PBKDF2.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="55f55510afeb77726e0d50b49639b6d98210693b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;password_get_info()&lt;/code&gt; - returns information about the given hash</source>
          <target state="translated">&lt;code&gt;password_get_info()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - devuelve informaci&amp;oacute;n sobre el hash dado&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="511d82aef08cd670da59b1470aced89fce228ed6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;password_hash()&lt;/code&gt; - creates a password hash</source>
          <target state="translated">&lt;code&gt;password_hash()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - crea un hash de contrase&amp;ntilde;a&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e53608eb6b90132ef76064ce05e5793fc484cd3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;password_needs_rehash()&lt;/code&gt; - checks if the given hash matches the given options. Useful to check if the hash conforms to your current technique/cost scheme allowing you to rehash if necessary</source>
          <target state="translated">&lt;code&gt;password_needs_rehash()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : comprueba si el hash dado coincide con las opciones dadas. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;Uacute;til para verificar si el hash se ajusta a su esquema actual de t&amp;eacute;cnica / costo, lo que le permite volver a repetir si es necesario&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab3126d5de685d9c71a7a339b3efcf5bed455a42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;password_verify()&lt;/code&gt; - verifies that a password matches a hash</source>
          <target state="translated">&lt;code&gt;password_verify()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : verifica que una contrase&amp;ntilde;a coincida con un hash&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b4b45af4d94ab99b5074596633ad5d1dd429fc9d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;HASHING&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;HASHING&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ae35617fc2a3e929f057c2ac76f291842cfc1b34" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;PASSWORD&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;PASSWORD&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1cc85735d6d4bc3f8eb14617d7b3510366c3c30c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;PORTS&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;PORTS&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9f14c91feaf4967ef247273e68b9a406a2c8c581" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Related questions that don't quite cover my question:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Preguntas relacionadas que no cubren mi pregunta:&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ed1c080c450a82285e50d7a816ddc03a0863f19a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;SALTING&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;SALTING&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5977b0e7ee94c66e337dded2dd5bbe8a4ad8b2cb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;SERVER&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;SERVER&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="23118db0e558706fb2facd763d94ae2dcff3c884" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;USER&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;USER&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="603ff9cd887ac389320761a219db9bf3b57244d7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;USERNAME&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;USERNAME&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1f77d76027e0db3dd25ad0ea328da229ae899dcd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;USERS CREATING PASSWORDS&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;USUARIOS QUE CREAN CONTRASE&amp;Ntilde;AS&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="896fefe79b5f0b7a660920e0a621a010a9b8870b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DATABASE&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;DATABASE&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d67cf51a25a2a4dbc01f9a24286e1ab97db82f1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DISCLAIMER&lt;/strong&gt;: This answer was written in 2008.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DESCARGO DE RESPONSABILIDAD&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Esta respuesta fue escrita en 2008.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c0ea0dc97baa1d4c675361104fa844e8cea6bf02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PHP&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;PHP&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ff333e7b1ff670b7f3dc5b40367c60de2baedb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Quick self-test:&lt;/strong&gt; what is password stretching and how many iterations should you use?  If you don't know the answer, you should use &lt;code&gt;password_hash()&lt;/code&gt;, as password stretching is now a critical feature of password mechanisms due to much faster CPUs and the use of &lt;a href=&quot;http://blog.crackpassword.com/2012/07/accelerating-password-recovery-the-addition-of-fpga/&quot;&gt;GPUs and FPGAs&lt;/a&gt; to crack passwords at rates of &lt;a href=&quot;http://en.wikipedia.org/wiki/Password_cracking#Time_needed_for_password_searches&quot;&gt;billions of guesses per second&lt;/a&gt; (with GPUs).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Autocomprobaci&amp;oacute;n r&amp;aacute;pida:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;iquest;qu&amp;eacute; es el estiramiento de contrase&amp;ntilde;a y cu&amp;aacute;ntas iteraciones debe usar? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si no sabe la respuesta, debe usar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;password_hash()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , ya que el estiramiento de contrase&amp;ntilde;a ahora es una caracter&amp;iacute;stica cr&amp;iacute;tica de los mecanismos de contrase&amp;ntilde;a debido a CPU mucho m&amp;aacute;s r&amp;aacute;pidas y el uso de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blog.crackpassword.com/2012/07/accelerating-password-recovery-the-addition-of-fpga/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;GPU y FPGA&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para descifrar contrase&amp;ntilde;as a tasas de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Password_cracking#Time_needed_for_password_searches&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;miles de millones de conjeturas por segundo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (con GPU).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aed0191173d72ecf54d46939a34acf7570a79ca0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SERVER&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;SERVER&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="551e0b7660ec60a1ba024654ebf85dd6e11ea8a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ver tambi&amp;eacute;n:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ead3f7341c29026742f5a4b0dd3a0003a1ebcb6c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;THINGS TO REMEMBER&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;COSAS PARA RECORDAR&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2e902296e6d584c43a7b6d565ce2461560a6e091" translate="yes" xml:space="preserve">
          <source>A lot has been said about Password encryption for PHP, most of which is very good advice, but before you even start the process of using PHP for password encryption make sure you have the following implemented or ready to be implemented.</source>
          <target state="translated">Se ha hablado mucho sobre la encriptación de contraseñas para PHP,la mayoría de las cuales son muy buenos consejos,pero antes de empezar el proceso de usar PHP para la encriptación de contraseñas asegúrese de tener lo siguiente implementado o listo para ser implementado.</target>
        </trans-unit>
        <trans-unit id="d338f3026e67ebbe13c96fce36d81cb026d9f87c" translate="yes" xml:space="preserve">
          <source>A much shorter and safer answer - &lt;strong&gt;don't write your own password mechanism at all&lt;/strong&gt;, use a tried and tested mechanism.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una respuesta mucho m&amp;aacute;s corta y segura: &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no escriba su propio mecanismo de contrase&amp;ntilde;a&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , use un mecanismo probado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4dd080286c78745102f80f80549cafcb94e6e124" translate="yes" xml:space="preserve">
          <source>Also make the user create a secure password, it is simple and should always be done, the user will be grateful for it in the end.</source>
          <target state="translated">También hacer que el usuario cree una contraseña segura,es simple y debe hacerse siempre,el usuario lo agradecerá al final.</target>
        </trans-unit>
        <trans-unit id="9a29f79b84bf18b505a34d003c5ea678dd34f78a" translate="yes" xml:space="preserve">
          <source>Also, double-hashing is generally regarded as bad method, because it diminishes the result space. All popular hashes are fixed-length. Thus, you can have only a finite values of this fixed length, and the results become less varied. This &lt;em&gt;could&lt;/em&gt; be regarded as another form of salting, but I wouldn't recommend it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, el doble hashing generalmente se considera un mal m&amp;eacute;todo, ya que disminuye el espacio resultante. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Todos los hashes populares son de longitud fija. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, solo puede tener valores finitos de esta longitud fija, y los resultados se vuelven menos variados. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;podr&amp;iacute;a&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; considerarse como otra forma de salaz&amp;oacute;n, pero no lo recomendar&amp;iacute;a.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="47b974489931634025c710e17d5db41c06e42742" translate="yes" xml:space="preserve">
          <source>Also, should I store two fields in the database (one using MD5 and another one using SHA, for example)? Would it make it safer or unsafer?</source>
          <target state="translated">Además,¿debo almacenar dos campos en la base de datos (uno usando MD5 y otro usando SHA,por ejemplo)? ¿Lo haría más seguro o inseguro?</target>
        </trans-unit>
        <trans-unit id="7689b604462baa981c885266a977b157013806aa" translate="yes" xml:space="preserve">
          <source>Always have your application have its own account to access the DB, and only give it the privileges it will need.</source>
          <target state="translated">Siempre que su aplicación tenga su propia cuenta para acceder a la BD,y sólo le dé los privilegios que necesitará.</target>
        </trans-unit>
        <trans-unit id="3b1bb0601fe6d9e262b3597a1689b03d4b982615" translate="yes" xml:space="preserve">
          <source>Another reason that you want a good, robust hash on a user accounts is to give you enough time to change all the passwords in the system. If your database is compromised you will need enough time to at &lt;em&gt;least&lt;/em&gt; lock the system down, if not change every password in the database.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Otra raz&amp;oacute;n por la que desea un hash bueno y robusto en las cuentas de un usuario es para darle tiempo suficiente para cambiar todas las contrase&amp;ntilde;as en el sistema. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si su base de datos se ve comprometida, necesitar&amp;aacute; tiempo suficiente para al &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;menos&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; bloquear el sistema, si no cambia cada contrase&amp;ntilde;a en la base de datos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fc8b9b7b7e69aecc8d6210a0592328219dceab04" translate="yes" xml:space="preserve">
          <source>As of PHP 5.5, PHP has simple, secure functions for hashing and verifying passwords, &lt;a href=&quot;http://php.net/manual/en/function.password-hash.php&quot;&gt;password_hash()&lt;/a&gt; and &lt;a href=&quot;http://php.net/manual/en/function.password-verify.php&quot;&gt;password_verify()&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A partir de PHP 5.5, PHP tiene funciones simples y seguras para cifrar y verificar contrase&amp;ntilde;as, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://php.net/manual/en/function.password-hash.php&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;password_hash ()&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://php.net/manual/en/function.password-verify.php&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;password_verify ()&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6ea99ddf0910092b785f4db900f1d1881fb27c6a" translate="yes" xml:space="preserve">
          <source>At the moment these functions accept the PASSWORD_BCRYPT and PASSWORD_DEFAULT password constants, which are synonymous at the moment, the difference being that PASSWORD_DEFAULT &quot;may change in newer PHP releases when newer, stronger hashing algorithms are supported.&quot; Using PASSWORD_DEFAULT and password_needs_rehash() on login (and rehashing if necessary) should ensure that your hashes are reasonably resilient to brute-force attacks with little to no work for you.</source>
          <target state="translated">Por el momento estas funciones aceptan las constantes de contraseña PASSWORD_BCRYPT y PASSWORD_DEFAULT,que son sinónimos por el momento,la diferencia es que PASSWORD_DEFAULT &quot;puede cambiar en nuevas versiones de PHP cuando se soportan algoritmos de hashing más nuevos y más fuertes&quot;.Usar PASSWORD_DEFAULT y password_needs_rehash()en el inicio de sesión (y el rehashecho si es necesario)debería asegurar que sus hashes son razonablemente resistentes a los ataques de fuerza bruta con poco o ningún trabajo para usted.</target>
        </trans-unit>
        <trans-unit id="8bc33659ae93746ba57bab9705cc4dea91e1472b" translate="yes" xml:space="preserve">
          <source>Average practices</source>
          <target state="translated">Prácticas promedio</target>
        </trans-unit>
        <trans-unit id="f6015c3a8cc452ac75b47eabd9579dadfdb0ffe6" translate="yes" xml:space="preserve">
          <source>Bcrypt and &lt;a href=&quot;http://www.tarsnap.com/scrypt.html&quot;&gt;scrypt&lt;/a&gt; are the current best practices. &lt;a href=&quot;http://www.tarsnap.com/scrypt.html&quot;&gt;Scrypt&lt;/a&gt; will be better than bcrypt in time, but it hasn't seen adoption as a standard by Linux/Unix or by webservers, and hasn't had in-depth reviews of its algorithm posted yet. But still, the future of the algorithm does look promising. If you are working with Ruby there is an &lt;a href=&quot;http://rubygems.org/gems/scrypt&quot;&gt;scrypt gem&lt;/a&gt; that will help you out, and Node.js now has its own &lt;a href=&quot;https://npmjs.org/package/scrypt&quot;&gt;scrypt&lt;/a&gt; package. You can use Scrypt in PHP either via the &lt;a href=&quot;https://pecl.php.net/package/scrypt&quot;&gt;Scrypt&lt;/a&gt; extension or the &lt;a href=&quot;https://paragonie.com/book/pecl-libsodium/read/07-password-hashing.md&quot;&gt;Libsodium&lt;/a&gt; extension (both are available in PECL).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Bcrypt y &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.tarsnap.com/scrypt.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;scrypt&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son las mejores pr&amp;aacute;cticas actuales. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.tarsnap.com/scrypt.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Scrypt&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ser&amp;aacute; mejor que bcrypt a tiempo, pero no ha visto la adopci&amp;oacute;n como est&amp;aacute;ndar por Linux / Unix o por servidores web, y a&amp;uacute;n no ha publicado revisiones en profundidad de su algoritmo. Pero a&amp;uacute;n as&amp;iacute;, el futuro del algoritmo parece prometedor. Si est&amp;aacute; trabajando con Ruby, hay una &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://rubygems.org/gems/scrypt&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;gema de scrypt&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que lo ayudar&amp;aacute;, y Node.js ahora tiene su propio &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;paquete de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://npmjs.org/package/scrypt&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;scrypt&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Puede usar Scrypt en PHP a trav&amp;eacute;s de la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;extensi&amp;oacute;n &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://pecl.php.net/package/scrypt&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Scrypt&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;extensi&amp;oacute;n &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://paragonie.com/book/pecl-libsodium/read/07-password-hashing.md&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Libsodium&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (ambos est&amp;aacute;n disponibles en PECL).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eb8de9ce8757ee3c542141ac80ff3b33dc04edff" translate="yes" xml:space="preserve">
          <source>Best practices</source>
          <target state="translated">Las mejores prácticas</target>
        </trans-unit>
        <trans-unit id="2de241bdf77a55e27f8fca0e42659620a7b0aefe" translate="yes" xml:space="preserve">
          <source>But suppose that you cannot use bcrypt or PHPASS at all. What then?</source>
          <target state="translated">Pero supongamos que no puedes usar bcrypt o PHPASS en absoluto.¿Entonces qué?</target>
        </trans-unit>
        <trans-unit id="117f2a5735e534774bb47e831d678f2aadc64e41" translate="yes" xml:space="preserve">
          <source>By default it used strongest available encryption that is implemented in Phpass, which is &lt;code&gt;bcrypt&lt;/code&gt; and falls back to other encryptions down to MD5 to provide backward compatibility to frameworks like Wordpress.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por defecto, utiliz&amp;oacute; el cifrado m&amp;aacute;s fuerte disponible que se implementa en Phpass, que es &lt;/font&gt;&lt;/font&gt; &lt;code&gt;bcrypt&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;recurre &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a otros cifrados hasta MD5 para proporcionar compatibilidad con versiones anteriores de marcos como Wordpress.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b633fdfaff7ad5fc7b721447cc8831c42591c4bc" translate="yes" xml:space="preserve">
          <source>Coming in PHP 5.5 is a &lt;a href=&quot;http://php.net/manual/en/ref.password.php&quot;&gt;full password protection library&lt;/a&gt; that abstracts away any pains of working with bcrypt. While most of us are stuck with PHP 5.2 and 5.3 in most common environments, especially shared hosts, @ircmaxell has built a &lt;a href=&quot;https://github.com/ircmaxell/password_compat&quot;&gt;compatibility layer&lt;/a&gt; for the coming API that is backward compatible to PHP 5.3.7.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pr&amp;oacute;ximamente en PHP 5.5 hay una &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://php.net/manual/en/ref.password.php&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;biblioteca de protecci&amp;oacute;n de contrase&amp;ntilde;a completa&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que abstrae cualquier molestia de trabajar con bcrypt. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si bien la mayor&amp;iacute;a de nosotros estamos atrapados con PHP 5.2 y 5.3 en los entornos m&amp;aacute;s comunes, especialmente los hosts compartidos, @ircmaxell ha creado una &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/ircmaxell/password_compat&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;capa de compatibilidad&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para la pr&amp;oacute;xima API que es compatible con PHP 5.3.7.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="af9cf1efb4bd36a869c85c6db68040652b17d4ae" translate="yes" xml:space="preserve">
          <source>Cryptography Recap &amp;amp; Disclaimer</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Resumen de criptograf&amp;iacute;a y descargo de responsabilidad&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2ef42ffab4aacba15da77cf466976e72bd80c6f0" translate="yes" xml:space="preserve">
          <source>Don't limit the length of a password. If your users want a sentence with supercalifragilisticexpialidocious in it, don't prevent them from using it.</source>
          <target state="translated">No limite la longitud de una contraseña.Si sus usuarios quieren una frase con supercalifragilisticexpialidocious en ella,no les impida usarla.</target>
        </trans-unit>
        <trans-unit id="b6a9c3be345b95b031149b5d719b84262d749a02" translate="yes" xml:space="preserve">
          <source>Don't limit what characters users can enter for passwords. Only idiots do this.</source>
          <target state="translated">No limite los caracteres que los usuarios pueden introducir para las contraseñas.Sólo los idiotas hacen esto.</target>
        </trans-unit>
        <trans-unit id="57b8188ffa4f6ec3553dfe244191b42014f16984" translate="yes" xml:space="preserve">
          <source>Don't mix &lt;a href=&quot;http://blog.ircmaxell.com/2015/03/security-issue-combining-bcrypt-with.html&quot;&gt;bcrypt and with the &lt;em&gt;raw&lt;/em&gt; output of hash()&lt;/a&gt;, either use hex output or base64_encode it. (This applies to any input that may have a rogue &lt;code&gt;\0&lt;/code&gt; in it, which can seriously weaken security.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No mezcle &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blog.ircmaxell.com/2015/03/security-issue-combining-bcrypt-with.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;bcrypt y con la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;salida sin &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;procesar&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de hash ()&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , use la salida hexadecimal o base64_encode. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Esto se aplica a cualquier entrada que pueda tener un p&amp;iacute;caro &lt;/font&gt;&lt;/font&gt; &lt;code&gt;\0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , lo que puede debilitar seriamente la seguridad).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b14bcf13287ceb3241fed3d968a38802da7cb034" translate="yes" xml:space="preserve">
          <source>Don't strip or escape HTML and special characters in the password.</source>
          <target state="translated">No elimine o escape el HTML y los caracteres especiales de la contraseña.</target>
        </trans-unit>
        <trans-unit id="093743f90c366f3346a4626e0147ea26113350c4" translate="yes" xml:space="preserve">
          <source>Don'ts</source>
          <target state="translated">Don'ts</target>
        </trans-unit>
        <trans-unit id="586c15c6fd8448116ae5a0f2e995d41e36f153b8" translate="yes" xml:space="preserve">
          <source>Dos</source>
          <target state="translated">Dos</target>
        </trans-unit>
        <trans-unit id="951e25161bf6bbd8580e18709c3c792954ee12e4" translate="yes" xml:space="preserve">
          <source>EDIT: I just realised that this is mentioned briefly in Robert K's answer. I'll leave this answer here since I think it provides a bit more information about how it works and the ease of use it provides for those who don't know security.</source>
          <target state="translated">Me acabo de dar cuenta de que esto se menciona brevemente en la respuesta de Robert K.Dejaré esta respuesta aquí ya que creo que proporciona un poco más de información sobre cómo funciona y la facilidad de uso que ofrece a los que no conocen la seguridad.</target>
        </trans-unit>
        <trans-unit id="5aed566d3e7f4533ea18f62aa39f7cec10ce35f6" translate="yes" xml:space="preserve">
          <source>Finally, no matter the security measures you take nothing is 100% secure, the more advanced the technology to protect becomes the more advanced the attacks become. But following these steps will make your site more secure and far less desirable for attackers to go after.</source>
          <target state="translated">Finalmente,no importa las medidas de seguridad que tomes,nada es 100% seguro,cuanto más avanzada sea la tecnología para proteger,más avanzados serán los ataques.Pero seguir estos pasos hará que su sitio sea más seguro y mucho menos deseable para los atacantes.</target>
        </trans-unit>
        <trans-unit id="bfdae5a79adfab1e18ea1d0102894a2dccc076bf" translate="yes" xml:space="preserve">
          <source>Follow the same guidelines as with all good passwords. Also don't reuse the same password on any SERVER or DB accounts on the same system.</source>
          <target state="translated">Sigue las mismas pautas que con todas las buenas contraseñas.Tampoco reutilices la misma contraseña en ninguna cuenta de SERVIDOR o BD en el mismo sistema.</target>
        </trans-unit>
        <trans-unit id="f46f0816adc340442cfbcc816c79aadee7d62c1c" translate="yes" xml:space="preserve">
          <source>For all that is good in the world do not use the username admin, root or something similar. Also if you are on a unix based system DO NOT make the root account login accessible, it should always be sudo only.</source>
          <target state="translated">Por todo lo que es bueno en el mundo no uses el nombre de usuario admin,root o algo similar.También si estás en un sistema basado en Unix NO hagas accesible el acceso a la cuenta de root,siempre debe ser sólo sudo.</target>
        </trans-unit>
        <trans-unit id="d9ea1176666f5e2cfe77b291548afa7d1dd3e910" translate="yes" xml:space="preserve">
          <source>For example, you can &lt;a href=&quot;http://arstechnica.com/security/2012/12/25-gpu-cluster-cracks-every-standard-windows-password-in-6-hours/&quot;&gt;crack all 8-character Windows passwords in 6 hours&lt;/a&gt; using 25 GPUs installed in 5 desktop PCs.  This is brute-forcing i.e. enumerating and checking &lt;em&gt;every 8-character Windows password&lt;/em&gt;, including special characters, and is not a dictionary attack. That was in 2012, as of 2018 you could use fewer GPUs, or crack faster with 25 GPUs.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, puede &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://arstechnica.com/security/2012/12/25-gpu-cluster-cracks-every-standard-windows-password-in-6-hours/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;descifrar todas las contrase&amp;ntilde;as de Windows de 8 caracteres en 6 horas&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; usando 25 GPU instaladas en 5 PC de escritorio. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto es forzado, es decir, enumerar y verificar &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cada contrase&amp;ntilde;a de Windows de 8 caracteres&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , incluidos los caracteres especiales, y no es un ataque de diccionario. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Eso fue en 2012, a partir de 2018, podr&amp;iacute;a usar menos GPU o agrietarse m&amp;aacute;s r&amp;aacute;pido con 25 GPU.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5638ccd08221ca60e74b51eedce8f8691850aa0d" translate="yes" xml:space="preserve">
          <source>Future Practices</source>
          <target state="translated">Prácticas futuras</target>
        </trans-unit>
        <trans-unit id="8cdb7a0b3b6ace5e886174a72b1782806543e80f" translate="yes" xml:space="preserve">
          <source>Google says SHA256 is available to PHP.</source>
          <target state="translated">Google dice que SHA256 está disponible para PHP.</target>
        </trans-unit>
        <trans-unit id="6dfd63230af2892f2f367f0290c4dfd849f7dc6a" translate="yes" xml:space="preserve">
          <source>Here is a PHP class that creates a hash and salt for a password easily</source>
          <target state="translated">Aquí hay una clase PHP que crea un hash y sal para una contraseña fácilmente</target>
        </trans-unit>
        <trans-unit id="d3de020d4de5c9ec8acb08596101993264195d55" translate="yes" xml:space="preserve">
          <source>How would you implement salted passwords in Tomcat 5.5</source>
          <target state="translated">¿Cómo implementarías las contraseñas saladas en Tomcat 5.5</target>
        </trans-unit>
        <trans-unit id="094dfed6a03363f271cb6e9eb1fbbe95ffe3f66b" translate="yes" xml:space="preserve">
          <source>I almost can't imagine this situation anymore. &lt;a href=&quot;http://www.openwall.com/phpass/&quot;&gt;PHPASS&lt;/a&gt; supports PHP 3.0.18 through 5.3, so it is usable on almost every installation imaginable&amp;mdash;and should be used if you don't &lt;em&gt;know for certain&lt;/em&gt; that your environment supports bcrypt.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ya casi no puedo imaginar esta situaci&amp;oacute;n. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.openwall.com/phpass/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PHPASS es&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; compatible con PHP 3.0.18 a 5.3, por lo que se puede utilizar en casi todas las instalaciones imaginables, y debe usarse si no &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sabe con certeza&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que su entorno es compatible con bcrypt.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7427fce65bccc8329b93c08c2c177aa8d900929" translate="yes" xml:space="preserve">
          <source>I changed my mind about using bcrypt when I learned that bcrypt only uses blowfish's key schedule, with a variable cost mechanism. The latter lets you increase the cost to brute-force a password by increasing blowfish's already expensive key schedule.</source>
          <target state="translated">Cambié de opinión sobre el uso de bcrypt cuando me enteré de que bcrypt sólo utiliza el programa clave de blowfish,con un mecanismo de costo variable.Este último te permite aumentar el costo de forzar una contraseña incrementando la ya costosa programación de claves de blowfish.</target>
        </trans-unit>
        <trans-unit id="74d1dec78ea1f0d88fb883d96450938d3cd9d96d" translate="yes" xml:space="preserve">
          <source>I found perfect topic on this matter here: &lt;a href=&quot;https://crackstation.net/hashing-security.htm&quot;&gt;https://crackstation.net/hashing-security.htm&lt;/a&gt;, I wanted you to get benefit from it, here is source code also that provided prevention against time-based attack also.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Encontr&amp;eacute; un tema perfecto sobre este asunto aqu&amp;iacute;: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://crackstation.net/hashing-security.htm&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://crackstation.net/hashing-security.htm&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , quer&amp;iacute;a que se beneficiara de &amp;eacute;l, aqu&amp;iacute; tambi&amp;eacute;n est&amp;aacute; el c&amp;oacute;digo fuente que tambi&amp;eacute;n proporciona prevenci&amp;oacute;n contra ataques basados ​​en el tiempo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="878b969cae5ef5b116676174f4bba610ac895913" translate="yes" xml:space="preserve">
          <source>I highly suggest reading the documentation for the &lt;a href=&quot;http://us.php.net/crypt&quot;&gt;crypt function&lt;/a&gt; if you want to understand how to use bcrypt, or finding yourself a &lt;a href=&quot;https://stackoverflow.com/questions/4795385/how-do-you-use-bcrypt-for-hashing-passwords-in-php/6337021#6337021&quot;&gt;good&lt;/a&gt;&lt;a href=&quot;https://gist.github.com/1070401&quot;&gt;wrapper&lt;/a&gt; or use something like &lt;a href=&quot;http://www.openwall.com/phpass/&quot;&gt;PHPASS&lt;/a&gt; for a more legacy implementation. I recommend a minimum of 12 rounds of bcrypt, if not 15 to 18.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Le recomiendo leer la documentaci&amp;oacute;n de la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://us.php.net/crypt&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funci&amp;oacute;n cripta&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; si desea comprender c&amp;oacute;mo usar bcrypt, o encontrar un &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4795385/how-do-you-use-bcrypt-for-hashing-passwords-in-php/6337021#6337021&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;buen &lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;a href=&quot;https://gist.github.com/1070401&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;contenedor&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o usar algo como &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.openwall.com/phpass/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PHPASS&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para una implementaci&amp;oacute;n m&amp;aacute;s heredada. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Recomiendo un m&amp;iacute;nimo de 12 rondas de bcrypt, si no de 15 a 18.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3acd6228038caf8487300f27ba32f185e5efc8f9" translate="yes" xml:space="preserve">
          <source>I just want to point out that PHP 5.5 includes a &lt;a href=&quot;http://www.php.net/manual/en/ref.password.php&quot;&gt;password hashing API&lt;/a&gt; that provides a wrapper around &lt;code&gt;crypt()&lt;/code&gt;. This API significantly simplifies the task of hashing, verifying and rehashing password hashes. The author has also released a &lt;a href=&quot;https://github.com/ircmaxell/password_compat&quot;&gt;compatibility pack&lt;/a&gt; (in the form of a single password.php file that you simply &lt;code&gt;require&lt;/code&gt; to use), for those using PHP 5.3.7 and later and want to use this right now.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Solo quiero se&amp;ntilde;alar que PHP 5.5 incluye una &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.php.net/manual/en/ref.password.php&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;API de hash de contrase&amp;ntilde;a&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que proporciona un contenedor alrededor de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;crypt()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta API simplifica significativamente la tarea de hash, verificaci&amp;oacute;n y rehash hashes de contrase&amp;ntilde;as. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El autor tambi&amp;eacute;n ha lanzado un &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/ircmaxell/password_compat&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;paquete de compatibilidad&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (en forma de un &amp;uacute;nico archivo password.php que simplemente &lt;/font&gt;&lt;/font&gt; &lt;code&gt;require&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; usar), para aquellos que usan PHP 5.3.7 y versiones posteriores y desean usarlo ahora mismo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="021bc86837c1cf4ede09646fe8929f5646deb92f" translate="yes" xml:space="preserve">
          <source>I usually use SHA1 and salt with the user ID (or some other user-specific piece of information), and sometimes I additionally use a constant salt (so I have 2 parts to the salt).</source>
          <target state="translated">Normalmente utilizo SHA1 y sal con la identificación del usuario (o algún otro dato específico del usuario),y a veces utilizo adicionalmente una sal constante (por lo que tengo 2 partes de la sal).</target>
        </trans-unit>
        <trans-unit id="1bc7ca4a9003d758e3158a03983889340d7b0ef9" translate="yes" xml:space="preserve">
          <source>I would not store the password hashed in two different ways, because then the system is at least as weak as the weakest of the hash algorithms in use.</source>
          <target state="translated">No almacenaría el hash de la contraseña de dos maneras diferentes,porque entonces el sistema es al menos tan débil como el más débil de los algoritmos de hash en uso.</target>
        </trans-unit>
        <trans-unit id="462230903f4568427872db9e53f5786cbc3b5e7d" translate="yes" xml:space="preserve">
          <source>I'm using &lt;a href=&quot;http://www.openwall.com/phpass/&quot;&gt;Phpass&lt;/a&gt; which is a simple one-file PHP class that could be implemented very easily in nearly every PHP project. See also &lt;a href=&quot;http://www.h-online.com/security/features/Storing-passwords-in-uncrackable-form-1255576.html?page=4&quot;&gt;The H&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Estoy usando &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.openwall.com/phpass/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Phpass,&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que es una clase PHP simple de un archivo que podr&amp;iacute;a implementarse muy f&amp;aacute;cilmente en casi todos los proyectos PHP. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ver tambi&amp;eacute;n &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.h-online.com/security/features/Storing-passwords-in-uncrackable-form-1255576.html?page=4&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El H&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2e7956166ff653d061a0f1fee8e6d1f242bac81e" translate="yes" xml:space="preserve">
          <source>I'm using PHP. I want a safe and fast password encryption system. Hashing a password a million times may be safer, but also slower. How to achieve a good balance between speed and safety? Also, I'd prefer the result to have a constant number of characters.</source>
          <target state="translated">Estoy usando PHP.Quiero un sistema de cifrado de contraseñas seguro y rápido.Tener una contraseña un millón de veces puede ser más seguro,pero también más lento.¿Cómo lograr un buen equilibrio entre velocidad y seguridad? Además,prefiero que el resultado tenga un número constante de caracteres.</target>
        </trans-unit>
        <trans-unit id="6ff2c27f72547e5d2b06a5581aa37280ccb6a8db" translate="yes" xml:space="preserve">
          <source>Ideally you want your DB and APPLICATION on separate servers. This is not always possible due to cost, but it does allow for some safety as the attacker will have to go through two steps to fully access the system.</source>
          <target state="translated">Lo ideal sería que su BD y su APLICACIÓN estuvieran en servidores separados.Esto no siempre es posible debido al costo,pero permite cierta seguridad ya que el atacante tendrá que pasar por dos pasos para acceder completamente al sistema.</target>
        </trans-unit>
        <trans-unit id="3a9162bbf805570c30c3008fac626548ad008226" translate="yes" xml:space="preserve">
          <source>If the user is creating a password through the frontend that means it has to be sent to the server. This opens up a security issue because that means the unencrypted password is being sent to the server and if a attacker is able to listen and access that all your security in PHP is worthless. ALWAYS transmit the data SECURELY, this is done through SSL, but be weary even SSL is not flawless (OpenSSL's Heartbleed flaw is an example of this).</source>
          <target state="translated">Si el usuario está creando una contraseña a través del frontend eso significa que tiene que ser enviada al servidor.Esto abre un problema de seguridad porque eso significa que la contraseña no encriptada está siendo enviada al servidor y si un atacante es capaz de escuchar y acceder que toda su seguridad en PHP no vale nada.SIEMPRE transmite los datos de forma SEGURA,esto se hace a través de SSL,pero ten cuidado,incluso el SSL no es perfecto (la falla de Heartbleed de OpenSSL es un ejemplo de esto).</target>
        </trans-unit>
        <trans-unit id="bfdaf953c79a7a6b68bb4199d7beacdee227846d" translate="yes" xml:space="preserve">
          <source>Implement a reasonable 8-10 character minimum length, plus require at least 1 upper case letter, 1 lower case letter, a number, and a symbol. This will improve the entropy of the password, in turn making it harder to crack. (See the &quot;What makes a good password?&quot; section for some debate.)</source>
          <target state="translated">Implementar una longitud mínima razonable de 8-10 caracteres,además de requerir al menos 1 letra mayúscula,1 letra minúscula,un número y un símbolo.Esto mejorará la entropía de la contraseña,a su vez haciendo más difícil de descifrar.(Véase la sección &quot;¿Qué hace que una contraseña sea buena?&quot; para algún debate).</target>
        </trans-unit>
        <trans-unit id="db36d1a15c2eff2b9e586d75be21da1c305b8b6a" translate="yes" xml:space="preserve">
          <source>In case I wasn't clear enough, I want to know which hashing function(s) to use and how to pick a good salt in order to have a safe and fast password protection mechanism.</source>
          <target state="translated">En caso de que no haya sido lo suficientemente claro,quiero saber qué función(es)de hash para usar y cómo escoger una buena sal para tener un mecanismo de protección de contraseña seguro y rápido.</target>
        </trans-unit>
        <trans-unit id="4d685a0e94f3eab6cfef426e115b55c6d2ecd20c" translate="yes" xml:space="preserve">
          <source>In short, entropy is how much variation is within the password. When a password is only lowercase roman letters, that's only 26 characters. That isn't much variation. Alpha-numeric passwords are better, with 36 characters. But allowing upper and lower case, with symbols, is roughly 96 characters. That's a lot better than just letters. One problem is, to make our passwords memorable we insert patterns&amp;mdash;which reduces entropy. Oops!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En resumen, la entrop&amp;iacute;a es la cantidad de variaci&amp;oacute;n dentro de la contrase&amp;ntilde;a. Cuando una contrase&amp;ntilde;a solo tiene letras romanas en min&amp;uacute;sculas, solo tiene 26 caracteres. Eso no es mucha variaci&amp;oacute;n. Las contrase&amp;ntilde;as alfanum&amp;eacute;ricas son mejores, con 36 caracteres. Pero permitir may&amp;uacute;sculas y min&amp;uacute;sculas, con s&amp;iacute;mbolos, tiene aproximadamente 96 caracteres. Eso es mucho mejor que solo letras. Un problema es que, para que nuestras contrase&amp;ntilde;as sean memorables, insertamos patrones, lo que reduce la entrop&amp;iacute;a. &amp;iexcl;Uy!&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f5c756bd1a76be361873a30bd1bd4190227c361c" translate="yes" xml:space="preserve">
          <source>In the comments I talked with @popnoodles, who pointed out that &lt;em&gt;enforcing&lt;/em&gt; a password policy of X length with X many letters, numbers, symbols, etc, can actually reduce entropy by making the password scheme more predictable. I do agree. Randomess, as truly random as possible, is always the safest but least memorable solution.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En los comentarios que habl&amp;eacute; con @popnoodles, quienes se&amp;ntilde;alaron que &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aplicar&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; una pol&amp;iacute;tica de contrase&amp;ntilde;a de longitud X con X muchas letras, n&amp;uacute;meros, s&amp;iacute;mbolos, etc., en realidad puede reducir la entrop&amp;iacute;a al hacer que el esquema de contrase&amp;ntilde;a sea m&amp;aacute;s predecible. Estoy de acuerdo. La aleatoriedad, lo m&amp;aacute;s aleatoria posible, es siempre la soluci&amp;oacute;n m&amp;aacute;s segura pero menos memorable.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b0a50c178288b0e09504dc0a677b514cf240abd4" translate="yes" xml:space="preserve">
          <source>In the end, double-hashing, mathematically, provides no benefit.  In practice, however, it is useful for preventing rainbow table-based attacks.  In other words, it is of no more benefit than hashing with a salt, which takes far less processor time in your application or on your server.</source>
          <target state="translated">Al final,el doble golpe,matemáticamente,no proporciona ningún beneficio.En la práctica,sin embargo,es útil para prevenir los ataques de la tabla del arco iris.En otras palabras,no es más beneficioso que el &quot;hashing&quot; con una sal,que requiere mucho menos tiempo de procesador en su aplicación o en su servidor.</target>
        </trans-unit>
        <trans-unit id="7d25865b4d6182316faf089b42e9c22a190d279b" translate="yes" xml:space="preserve">
          <source>Increasing cost (which defaults to 10) makes the hash harder to brute-force but also means generating hashes and verifying passwords against them will be more work for your server's CPU.</source>
          <target state="translated">El aumento del coste (que por defecto es de 10)hace que el hash sea más difícil de forzar,pero también significa que la generación de hashes y la verificación de las contraseñas contra ellos será más trabajo para la CPU de su servidor.</target>
        </trans-unit>
        <trans-unit id="3819c766e1a237afa339d1b32fb8107d612fcdd2" translate="yes" xml:space="preserve">
          <source>Interestingly, in living out this nightmare, I learned A LOT I didn&amp;rsquo;t know about password cracking, storage, and complexity. &lt;em&gt;I&amp;rsquo;ve come to appreciate why password storage is ever so much more important than password complexity. If you don&amp;rsquo;t know how your password is stored, then all you really can depend upon is complexity.&lt;/em&gt; This might be common knowledge to password and crypto pros, but for the average InfoSec or Web Security expert, I highly doubt it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Curiosamente, al vivir esta pesadilla, aprend&amp;iacute; MUCHO que no sab&amp;iacute;a sobre el descifrado de contrase&amp;ntilde;as, el almacenamiento y la complejidad. &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;He llegado a apreciar por qu&amp;eacute; el almacenamiento de contrase&amp;ntilde;as es mucho m&amp;aacute;s importante que la complejidad de las contrase&amp;ntilde;as. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si no sabe c&amp;oacute;mo se almacena su contrase&amp;ntilde;a, entonces todo de lo que realmente puede depender es de la complejidad. &lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto podr&amp;iacute;a ser de conocimiento com&amp;uacute;n para contrase&amp;ntilde;as y profesionales de cifrado, pero para el experto promedio de InfoSec o Web Security, lo dudo mucho.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="32aace1e6bd9db8789604b5d77b5b357f1a03eeb" translate="yes" xml:space="preserve">
          <source>It can use salt (in this case, are all salts equally good? Is there any way to generate good salts?)</source>
          <target state="translated">Puede usar sal (en este caso,¿todas las sales son igualmente buenas? ¿Hay alguna manera de generar sales buenas?)</target>
        </trans-unit>
        <trans-unit id="76532b90f399c161d14466cd2bb1c1a7e08c404d" translate="yes" xml:space="preserve">
          <source>It is currently said that MD5 is partially unsafe. Taking this into consideration, I'd like to know which mechanism to use for password protection.</source>
          <target state="translated">Actualmente se dice que el MD5 es parcialmente inseguro.Teniendo esto en cuenta,me gustaría saber qué mecanismo utilizar para la protección de la contraseña.</target>
        </trans-unit>
        <trans-unit id="ec687b6fd5c605eabd26943ffe28b1856e82a532" translate="yes" xml:space="preserve">
          <source>It must be safe</source>
          <target state="translated">Debe ser seguro</target>
        </trans-unit>
        <trans-unit id="2deed719274cbd038881d457f177804efb08bba8" translate="yes" xml:space="preserve">
          <source>It only supports BCRYPT for now, but it aims to be easily extended to include other password hashing techniques and because the technique and cost is stored as part of the hash, changes to your prefered hashing technique/cost will not invalidate current hashes, the framework will automagically, use the correct technique/cost when validating. It also handles generating a &quot;secure&quot; salt if you do not explicitly define your own.</source>
          <target state="translated">Por ahora sólo soporta BCRYPT,pero pretende ser fácilmente ampliado para incluir otras técnicas de hash de contraseñas y debido a que la técnica y el coste se almacenan como parte del hash,los cambios en su técnica de hash preferida no invalidarán los hashes actuales,el marco utilizará automáticamente el coste técnico correcto al validar.También se encarga de generar una sal &quot;segura&quot; si no define explícitamente la suya propia.</target>
        </trans-unit>
        <trans-unit id="fbfb86f18fa274ab0a5bfb0be1ee04f715779f9f" translate="yes" xml:space="preserve">
          <source>Jeremiah Grossman, CTO of Whitehat Security, &lt;a href=&quot;https://www.whitehatsec.com/blog/cracking-aes-256-dmgs-and-epic-self-pwnage/&quot;&gt;stated on White Hat Security blog&lt;/a&gt; after a recent password recovery that required brute-force breaking of his password protection:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Jeremiah Grossman, CTO de Whitehat Security, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.whitehatsec.com/blog/cracking-aes-256-dmgs-and-epic-self-pwnage/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;declar&amp;oacute; en el blog de White Hat Security&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; despu&amp;eacute;s de una reciente recuperaci&amp;oacute;n de contrase&amp;ntilde;a que requiri&amp;oacute; la ruptura de su protecci&amp;oacute;n de contrase&amp;ntilde;a por fuerza bruta:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a1b0239b75a0a79e1923e96b83331042b6c1cfea" translate="yes" xml:space="preserve">
          <source>Lastly: I am not a cryptographer. Whatever I've said is my opinion, but I happen to think it's based on good ol' common sense ... and lots of reading. Remember, be as paranoid as possible, make things as hard to intrude as possible, and then, if you are still worried, contact a white-hat hacker or cryptographer to see what they say about your code/system.</source>
          <target state="translated">Por último:no soy un criptógrafo.Lo que he dicho es mi opinión,pero creo que se basa en el viejo sentido común...y en mucha lectura.Recuerda,sé lo más paranoico posible,haz las cosas lo más difícil de entrometerte,y luego,si todavía estás preocupado,contacta con un hacker o criptógrafo de sombrero blanco para ver qué dicen de tu sistema de códigos.</target>
        </trans-unit>
        <trans-unit id="c3fdfe95f7d84ea072335ae939def14083cede1e" translate="yes" xml:space="preserve">
          <source>Like always DO NOT make this root or something similar.</source>
          <target state="translated">Como siempre NO HAGA esta raíz o algo similar.</target>
        </trans-unit>
        <trans-unit id="8272783154610ed637003d484b1ab9e70499174f" translate="yes" xml:space="preserve">
          <source>More explanation is available at- &lt;a href=&quot;http://www.pivotalsecurity.com/blog/password-hashing-salt-should-it-be-random/&quot;&gt;http://www.pivotalsecurity.com/blog/password-hashing-salt-should-it-be-random/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hay m&amp;aacute;s explicaciones disponibles en: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.pivotalsecurity.com/blog/password-hashing-salt-should-it-be-random/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://www.pivotalsecurity.com/blog/password-hashing-salt-should-it-be-random/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ccbd82ab1462c38ff0a96c985a99ed1447b09ef0" translate="yes" xml:space="preserve">
          <source>Most programmers just don't have the expertise to write crypto related code safely without introducing vulnerabilities.</source>
          <target state="translated">La mayoría de los programadores no tienen la experiencia para escribir código relacionado con el cifrado de forma segura sin introducir vulnerabilidades.</target>
        </trans-unit>
        <trans-unit id="f4b758984e383af744fd6b70d1a44453fe5d02d5" translate="yes" xml:space="preserve">
          <source>NEVER EVER store a password in your DB, instead store the hash and unique salt, I will explain why later.</source>
          <target state="translated">NUNCA guardes una contraseña en tu base de datos,en su lugar guarda el hachís y la sal única,te explicaré por qué más tarde.</target>
        </trans-unit>
        <trans-unit id="b668a4bf2c2b13fda6ea44b2604e7cb52f134d07" translate="yes" xml:space="preserve">
          <source>Never email a password to your user &lt;em&gt;except when they have lost theirs, and you sent a temporary one.&lt;/em&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Nunca env&amp;iacute;e una contrase&amp;ntilde;a por correo electr&amp;oacute;nico a su usuario, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;excepto cuando haya perdido la suya, y usted haya enviado una temporal.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a05bf77552bc683c933754926449ac35cd64a670" translate="yes" xml:space="preserve">
          <source>Never hash passwords with &lt;a href=&quot;http://arstechnica.com/security/2012/12/oh-great-new-attack-makes-some-password-cracking-faster-easier-than-ever/&quot;&gt;SHA1&lt;/a&gt; or MD5 or even SHA256! &lt;a href=&quot;http://securityledger.com/new-25-gpu-monster-devours-passwords-in-seconds/&quot;&gt;Modern crackers&lt;/a&gt; can exceed 60 and 180 billion hashes/second (respectively).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iexcl;Nunca hash contrase&amp;ntilde;as con &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://arstechnica.com/security/2012/12/oh-great-new-attack-makes-some-password-cracking-faster-easier-than-ever/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SHA1&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o MD5 o incluso SHA256! &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://securityledger.com/new-25-gpu-monster-devours-passwords-in-seconds/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las galletas modernas&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; pueden superar los 60 y 180 mil millones de hashes / segundo (respectivamente).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f8ba9091576887aa8ba6c61d6c8d8e6d54342993" translate="yes" xml:space="preserve">
          <source>Never store your user's password in plain-text.</source>
          <target state="translated">Nunca almacene la contraseña de su usuario en texto plano.</target>
        </trans-unit>
        <trans-unit id="e583d29870e1092a65f27803157c2c1944f2e8dd" translate="yes" xml:space="preserve">
          <source>Never, ever log passwords in any manner.</source>
          <target state="translated">Nunca,nunca registres las contraseñas de ninguna manera.</target>
        </trans-unit>
        <trans-unit id="b0dd8e37f7458d33cf378742fcb833eb6f03eaa4" translate="yes" xml:space="preserve">
          <source>No matter how good your encryption is if you don't properly secure the server that runs the PHP and DB all your efforts are worthless. Most servers function relatively the same way, they have ports assigned to allow you to access them remotely either through ftp or shell. Make sure that you change the default port of which ever remote connection you have active. By not doing this you in effect have made the attacker do one less step in accessing your system.</source>
          <target state="translated">No importa lo buena que sea tu encriptación si no aseguras adecuadamente el servidor que ejecuta el PHP y la DB,todos tus esfuerzos son inútiles.La mayoría de los servidores funcionan relativamente de la misma manera,tienen puertos asignados para permitirte acceder a ellos remotamente ya sea a través de ftp o shell.Asegúrate de cambiar el puerto por defecto de cualquier conexión remota que tengas activa.Al no hacer esto,en efecto,has hecho que el atacante haga un paso menos para acceder a tu sistema.</target>
        </trans-unit>
        <trans-unit id="a0316a87f5c5e013f52649e477f4e70dd3e0acba" translate="yes" xml:space="preserve">
          <source>Note that even though the default hashing algorithm may change, old hashes will continue to verify just fine because the algorithm used is stored in the hash and &lt;code&gt;password_verify()&lt;/code&gt; picks up on it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que a pesar de que el algoritmo de hash predeterminado puede cambiar, los hashes antiguos continuar&amp;aacute;n verific&amp;aacute;ndose bien porque el algoritmo utilizado se almacena en el hash y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;password_verify()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; detecta.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2008200dd1969bed81cd881c21332864a96d99ae" translate="yes" xml:space="preserve">
          <source>ONE WAY HASHING!!!!!!!, Never hash a password in a way that it can be reversed, Hashes should be one way, meaning you don't reverse them and compare them to the password, you instead hash the entered password the same way and compare the two hashes. This means that even if an attacker gets access to the DB he doesn't know what the actually password is, just its resulting hash. Which means more security for your users in the worst possible scenario.</source>
          <target state="translated">Nunca hagas un hash de una contraseña de manera que pueda ser revertida,los hash deben ser de una manera,lo que significa que no los inviertas y los compares con la contraseña,sino que hagas un hash de la contraseña introducida de la misma manera y compares los dos hash.Esto significa que aunque un atacante acceda a la base de datos,no sabe cuál es la contraseña real,sólo el hash resultante.Lo que significa más seguridad para sus usuarios en el peor de los casos.</target>
        </trans-unit>
        <trans-unit id="702aaf71948af0b0b28598e8e00fec24cf4962f6" translate="yes" xml:space="preserve">
          <source>Older PHP versions: OpenWall's &lt;a href=&quot;http://www.openwall.com/phpass/&quot;&gt;phpass&lt;/a&gt; library is much better than most custom code - used in WordPress, Drupal, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Versiones PHP m&amp;aacute;s antiguas: la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;biblioteca &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;phpass de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.openwall.com/phpass/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;OpenWall&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es mucho mejor que la mayor&amp;iacute;a de los c&amp;oacute;digos personalizados, utilizados en WordPress, Drupal, etc.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bc886b63ca3b0eb383c458da407e533fe3d56755" translate="yes" xml:space="preserve">
          <source>One of the most common mistakes in hashing is that hashes are not unique to the users. This is mainly because salts are not uniquely generated.</source>
          <target state="translated">Uno de los errores más comunes en el hash es que el hash no es exclusivo de los usuarios.Esto se debe principalmente a que las sales no se generan de forma exclusiva.</target>
        </trans-unit>
        <trans-unit id="c2385fa123d6a9984b6b1eddc74522697f2d9f20" translate="yes" xml:space="preserve">
          <source>P.s. for last 2 steps you can use your own algorithm...
but be sure that you can generate this hashed password in the future 
when you need to authorize user...</source>
          <target state="translated">P.D.para los últimos 2 pasos puedes usar tu propio algoritmo...pero asegúrate de que puedes generar esta contraseña hashada en el futuro cuando necesites autorizar al usuario...</target>
        </trans-unit>
        <trans-unit id="7d080faa12a8ba859c71e8cfa04be086436076bf" translate="yes" xml:space="preserve">
          <source>PHP 5.5 or higher: &lt;a href=&quot;http://php.net/manual/en/function.password-hash.php&quot;&gt;password_hash()&lt;/a&gt; is good quality and part of PHP core.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PHP 5.5 o superior: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://php.net/manual/en/function.password-hash.php&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;password_hash ()&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es de buena calidad y forma parte del n&amp;uacute;cleo de PHP.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e441ae84ae0663d1c0b2f38792b0dada2e5cf183" translate="yes" xml:space="preserve">
          <source>Password entropy is &lt;a href=&quot;https://ritcyberselfdefense.wordpress.com/2011/09/24/how-to-calculate-password-entropy/&quot;&gt;approximated&lt;/a&gt; easily. Using the full range of ascii characters (roughly 96 typeable characters) yields an entropy of 6.6 per character, which at 8 characters for a password is still too low (52.679 bits of entropy) for future security. But the good news is: longer passwords, and passwords with unicode characters, really increase the entropy of a password and make it harder to crack.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La entrop&amp;iacute;a de contrase&amp;ntilde;a se &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://ritcyberselfdefense.wordpress.com/2011/09/24/how-to-calculate-password-entropy/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aproxima&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; f&amp;aacute;cilmente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El uso de la gama completa de caracteres ascii (aproximadamente 96 caracteres que se pueden escribir) produce una entrop&amp;iacute;a de 6.6 por car&amp;aacute;cter, que con 8 caracteres para una contrase&amp;ntilde;a sigue siendo demasiado baja (52.679 bits de entrop&amp;iacute;a) para seguridad futura. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero la buena noticia es que las contrase&amp;ntilde;as m&amp;aacute;s largas y las contrase&amp;ntilde;as con caracteres Unicode realmente aumentan la entrop&amp;iacute;a de una contrase&amp;ntilde;a y hacen que sea m&amp;aacute;s dif&amp;iacute;cil descifrarla.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6f90138bce65ffdcace9e2bb19f7963c1bd536d2" translate="yes" xml:space="preserve">
          <source>Passwords should always be salted before hashed. Salting adds a random string to the password so similar passwords don't appear the same in the DB. However if the salt is not unique to each user (ie: you use a hard coded salt) than you pretty much have made your salt worthless. Because once an attacker figures out one password salt he has the salt for all of them.</source>
          <target state="translated">Las contraseñas siempre deben ser saladas antes de ser lavadas.La saladura añade una cadena aleatoria a la contraseña para que no aparezcan contraseñas similares en la base de datos.Sin embargo,si la sal no es única para cada usuario (es decir,si usas una sal con código duro),entonces prácticamente no tienes valor para la sal.Porque una vez que un atacante descubre una contraseña de sal,tiene la sal para todas ellas.</target>
        </trans-unit>
        <trans-unit id="48845b9c00008f76810e059c640d17fa100ba624" translate="yes" xml:space="preserve">
          <source>Providing the &lt;code&gt;PASSWORD_DEFAULT&lt;/code&gt; instructs PHP to use the default hashing algorithm of the installed version of PHP. Exactly which algorithm that means is intended to change over time in future versions, so that it will always be one of the strongest available algorithms.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Proporcionar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;PASSWORD_DEFAULT&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; indica a PHP que use el algoritmo de hash predeterminado de la versi&amp;oacute;n instalada de PHP. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Exactamente qu&amp;eacute; algoritmo significa que est&amp;aacute; destinado a cambiar con el tiempo en futuras versiones, por lo que siempre ser&amp;aacute; uno de los algoritmos m&amp;aacute;s fuertes disponibles.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd1d5612b63f3e6527355deb1eb2e9ab4b7c8d4c" translate="yes" xml:space="preserve">
          <source>Recently I had a discussion whether password hashes salted with random
  bits are more secure than the one salted with guessable or known
  salts. Let&amp;rsquo;s see: If the system storing password is compromised as
  well as the system which stores the random salt, the attacker will
  have access to hash as well as salt, so whether the salt is random or
  not, doesn&amp;rsquo;t matter. The attacker will can generate pre-computed
  rainbow tables to crack the hash. Here comes the interesting part- it
  is not so trivial to generate pre-computed tables. Let us take example
  of WPA security model. Your WPA password is actually never sent to
  Wireless Access Point. Instead, it is hashed with your SSID (the
  network name- like Linksys, Dlink etc). A very good explanation of how
  this works is here. In order to retrieve password from hash, you will
  need to know the password as well as salt (network name). Church of
  Wifi has already pre-computed hash tables which has top 1000 SSIDs and
  about 1 million passwords. The size is of all tables is about 40 GB.
  As you can read on their site, someone used 15 FGPA arrays for 3 days
  to generate  these tables. Assuming victim is using the SSID as
  &amp;ldquo;a387csf3&amp;Prime; and password as &amp;ldquo;123456&amp;Prime;, will it be cracked by those
  tables? No! .. it cannot. Even if the password is weak, the tables
  don&amp;rsquo;t have hashes for SSID a387csf3.  This is the beauty of having
  random salt. It will deter crackers who thrive upon pre-computed
  tables. Can it stop a determined hacker? Probably not. But using
  random salts does provide additional layer of defense. While we are on
  this topic, let us discuss additional advantage of storing random
  salts on a separate system. Scenario #1 : Password hashes are stored
  on system X and salt values used for hashing are stored on system Y.
  These salt values are guessable or known (e.g. username) Scenario#2 :
  Password hashes are stored on system X and salt values used for
  hashing are stored on system Y. These salt values are random. In case
  system X has been compromised, as you can guess, there is a huge
  advantage of using random salt on a separate system (Scenario #2) .
  The attacker will need to guess addition values to be able to crack
  hashes. If a 32 bit salt is used, 2^32= 4,294,967,296 (about 4.2
  billion) iterations will can be required for each password guessed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Recientemente tuve una discusi&amp;oacute;n sobre si los hashes de contrase&amp;ntilde;as salados con bits aleatorios son m&amp;aacute;s seguros que el que se ha salado con sales adivinables o conocidas. Veamos: si el sistema que almacena la contrase&amp;ntilde;a se ve comprometido y el sistema que almacena la sal aleatoria, el atacante tendr&amp;aacute; acceso a hash y sal, por lo que no importa si la sal es aleatoria o no. El atacante puede generar tablas de arco iris precalculadas para descifrar el hash. Aqu&amp;iacute; viene la parte interesante: no es tan trivial generar tablas precalculadas. Tomemos un ejemplo del modelo de seguridad WPA. Su contrase&amp;ntilde;a WPA nunca se env&amp;iacute;a al punto de acceso inal&amp;aacute;mbrico. En cambio, est&amp;aacute; codificado con su SSID (el nombre de la red como Linksys, Dlink, etc.). Una muy buena explicaci&amp;oacute;n de c&amp;oacute;mo funciona esto est&amp;aacute; aqu&amp;iacute;. Para recuperar la contrase&amp;ntilde;a del hash,Necesitar&amp;aacute; conocer la contrase&amp;ntilde;a y la sal (nombre de la red). Church of Wifi ya ha precalculado las tablas hash que tienen los mejores 1000 SSID y aproximadamente 1 mill&amp;oacute;n de contrase&amp;ntilde;as. El tama&amp;ntilde;o de todas las tablas es de unos 40 GB. Como puede leer en su sitio, alguien us&amp;oacute; 15 matrices FGPA durante 3 d&amp;iacute;as para generar estas tablas. Suponiendo que la v&amp;iacute;ctima est&amp;eacute; usando el SSID como &quot;a387csf3&quot; y la contrase&amp;ntilde;a como &quot;123456&quot;, &amp;iquest;ser&amp;aacute;n descifradas por esas tablas? &amp;iexcl;No! .. no puede. Incluso si la contrase&amp;ntilde;a es d&amp;eacute;bil, las tablas no tienen hashes para SSID a387csf3. Esta es la belleza de tener sal al azar. Disuadir&amp;aacute; a los crackers que prosperan en tablas precalculadas. &amp;iquest;Puede detener a un hacker determinado? Probablemente no. Pero el uso de sales aleatorias proporciona una capa adicional de defensa. Mientras estamos en este tema,Discutamos una ventaja adicional de almacenar sales aleatorias en un sistema separado. Escenario n. &amp;deg; 1: los valores hash de contrase&amp;ntilde;a se almacenan en el sistema X y los valores de sal utilizados para el hash se almacenan en el sistema Y. Estos valores de sal son adivinables o conocidos (por ejemplo, nombre de usuario) Escenario n. &amp;deg; 2: los valores hash de contrase&amp;ntilde;a se almacenan en el sistema X y los valores sal se utilizan para el hash se almacena en el sistema Y. Estos valores de sal son aleatorios. En caso de que el sistema X se haya visto comprometido, como puede adivinar, existe una gran ventaja de usar sal aleatoria en un sistema separado (Escenario # 2). El atacante deber&amp;aacute; adivinar los valores de suma para poder descifrar los hash. Si se usa una sal de 32 bits, se requerir&amp;aacute;n 2 ^ 32 = 4,294,967,296 (aproximadamente 4,2 mil millones) de iteraciones para cada contrase&amp;ntilde;a adivinada.Los valores de contrase&amp;ntilde;a se almacenan en el sistema X y los valores de sal utilizados para el hash se almacenan en el sistema Y. Estos valores de sal son adivinables o conocidos (por ejemplo, nombre de usuario) Escenario # 2: Los valores de contrase&amp;ntilde;a se almacenan en el sistema X y los valores de sal utilizados para el hash se almacenan en sistema Y. Estos valores de sal son aleatorios. En caso de que el sistema X se haya visto comprometido, como puede adivinar, existe una gran ventaja de usar sal aleatoria en un sistema separado (Escenario # 2). El atacante deber&amp;aacute; adivinar los valores de suma para poder descifrar los hash. Si se usa una sal de 32 bits, se requerir&amp;aacute;n 2 ^ 32 = 4,294,967,296 (aproximadamente 4,2 mil millones) de iteraciones para cada contrase&amp;ntilde;a adivinada.Los valores de contrase&amp;ntilde;a se almacenan en el sistema X y los valores de sal utilizados para el hash se almacenan en el sistema Y. Estos valores de sal son adivinables o conocidos (por ejemplo, nombre de usuario) Escenario # 2: Los valores de contrase&amp;ntilde;a se almacenan en el sistema X y los valores de sal utilizados para el hash se almacenan en sistema Y. Estos valores de sal son aleatorios. En caso de que el sistema X se haya visto comprometido, como puede adivinar, existe una gran ventaja de usar sal aleatoria en un sistema separado (Escenario # 2). El atacante deber&amp;aacute; adivinar los valores de suma para poder descifrar los hash. Si se usa una sal de 32 bits, se requerir&amp;aacute;n 2 ^ 32 = 4,294,967,296 (aproximadamente 4,2 mil millones) de iteraciones para cada contrase&amp;ntilde;a adivinada.Estos valores de sal son aleatorios. En caso de que el sistema X se haya visto comprometido, como puede adivinar, existe una gran ventaja de usar sal aleatoria en un sistema separado (Escenario # 2). El atacante deber&amp;aacute; adivinar los valores de suma para poder descifrar los hash. Si se usa una sal de 32 bits, se requerir&amp;aacute;n 2 ^ 32 = 4,294,967,296 (aproximadamente 4,2 mil millones) de iteraciones para cada contrase&amp;ntilde;a adivinada.Estos valores de sal son aleatorios. En caso de que el sistema X se haya visto comprometido, como puede adivinar, existe una gran ventaja de usar sal aleatoria en un sistema separado (Escenario # 2). El atacante deber&amp;aacute; adivinar los valores de suma para poder descifrar los hash. Si se usa una sal de 32 bits, se requerir&amp;aacute;n 2 ^ 32 = 4,294,967,296 (aproximadamente 4,2 mil millones) de iteraciones para cada contrase&amp;ntilde;a adivinada.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29cf51326e60ca7639ae8d61993a3e6af0924dbd" translate="yes" xml:space="preserve">
          <source>Reset everyone's passwords when the database is compromised.</source>
          <target state="translated">Restablecer las contraseñas de todos cuando la base de datos se vea comprometida.</target>
        </trans-unit>
        <trans-unit id="99aba45ee7f729f62087c2a073d856536cd76908" translate="yes" xml:space="preserve">
          <source>SHA1 is now also considered somewhat compromised, but to a far lesser degree than MD5.  By using a salt (any salt), you're preventing the use of a generic &lt;a href=&quot;http://en.wikipedia.org/wiki/Rainbow_table&quot;&gt;rainbow table&lt;/a&gt; to attack your hashes (some people have even had success using Google as a sort of rainbow table by searching for the hash).  An attacker could conceivably generate a rainbow table using your salt, so that's why you should include a user-specific salt.  That way, they will have to generate a rainbow table for each and every record in your system, not just one for your entire system!  With that type of salting, even MD5 is decently secure.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SHA1 ahora tambi&amp;eacute;n se considera algo comprometido, pero en un grado mucho menor que MD5. Al usar una sal (cualquier sal), evitas el uso de una &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Rainbow_table&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tabla de arco iris&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; gen&amp;eacute;rica &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;para atacar tus hashes (algunas personas incluso han tenido &amp;eacute;xito al usar Google como una especie de tabla de arco iris al buscar el hash). Un atacante podr&amp;iacute;a generar una tabla de arco iris usando su sal, por eso debe incluir una sal espec&amp;iacute;fica del usuario. De esa manera, tendr&amp;aacute;n que generar una tabla de arco iris para todos y cada uno de los registros de su sistema, &amp;iexcl;no solo uno para todo el sistema! Con ese tipo de salaz&amp;oacute;n, incluso el MD5 es decentemente seguro.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4eda4093b78a303b74d4192d587dca2314fa4169" translate="yes" xml:space="preserve">
          <source>Secure hash and salt for PHP passwords</source>
          <target state="translated">Asegurar el hash y la sal para las contraseñas PHP</target>
        </trans-unit>
        <trans-unit id="f11fa153ab1a9133bcbd4157363d3c3c13723b94" translate="yes" xml:space="preserve">
          <source>Secure methods of storing keys, passwords for asp.net</source>
          <target state="translated">Métodos seguros de almacenamiento de claves,contraseñas para asp.net</target>
        </trans-unit>
        <trans-unit id="ff41ccecb888661f5547c2d4b885e0c114d66f5f" translate="yes" xml:space="preserve">
          <source>Simple Password Encryption</source>
          <target state="translated">Cifrado con contraseña simple</target>
        </trans-unit>
        <trans-unit id="02d7e2181d283624db40fc6185be390dccef0f3e" translate="yes" xml:space="preserve">
          <source>Since then, PHP has given us &lt;a href=&quot;http://php.net/manual/en/function.password-hash.php&quot;&gt;&lt;code&gt;password_hash&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://php.net/manual/en/function.password-verify.php&quot;&gt;&lt;code&gt;password_verify&lt;/code&gt;&lt;/a&gt; and, since their introduction, they are the recommended password hashing &amp;amp; checking method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Desde entonces, PHP nos ha proporcionado &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://php.net/manual/en/function.password-hash.php&quot;&gt; &lt;code&gt;password_hash&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://php.net/manual/en/function.password-verify.php&quot;&gt; &lt;code&gt;password_verify&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y, desde su introducci&amp;oacute;n, son el m&amp;eacute;todo recomendado de comprobaci&amp;oacute;n y comprobaci&amp;oacute;n de contrase&amp;ntilde;as.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6dd6c021f508c0340ebfdf5945ac1810408566d3" translate="yes" xml:space="preserve">
          <source>So far as I've been able to tell, making the world's best password is a Catch-22. Either its not memorable, too predictable, too short, too many unicode characters (hard to type on a Windows/Mobile device), too long, etc. No password is truly good enough for our purposes, so we must protect them as though they were in Fort Knox.</source>
          <target state="translated">Por lo que he podido ver,hacer la mejor contraseña del mundo es un Catch-22.O bien no es memorable,es demasiado predecible,es demasiado corta,tiene demasiados caracteres unicode (difíciles de escribir en un dispositivo WindowsMobile),es demasiado larga,etc.Ninguna contraseña es lo suficientemente buena para nuestros propósitos,así que debemos protegerlas como si estuvieran en Fort Knox.</target>
        </trans-unit>
        <trans-unit id="5ff57f4185e884322f43c9c59da60f12f41285ea" translate="yes" xml:space="preserve">
          <source>TL;DR</source>
          <target state="translated">TL;DR</target>
        </trans-unit>
        <trans-unit id="abc469ca9e1e32aad49a7fa70322810e433fbc73" translate="yes" xml:space="preserve">
          <source>The API exposes four functions:</source>
          <target state="translated">El API expone cuatro funciones:</target>
        </trans-unit>
        <trans-unit id="d1e5cbc852e92edf4f983cd9843ad840d31e7b05" translate="yes" xml:space="preserve">
          <source>The computational power required to actually &lt;em&gt;crack&lt;/em&gt; a hashed password doesn't exist. The only way for computers to &quot;crack&quot; a password is to recreate it and simulate the hashing algorithm used to secure it. The speed of the hash is linearly related to its ability to be brute-forced. Worse still, most hash algorithms can be easily parallelized to perform even faster. This is why costly schemes like bcrypt and scrypt are so important.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La potencia de c&amp;aacute;lculo requerida para &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;descifrar&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; una contrase&amp;ntilde;a hash no existe. La &amp;uacute;nica forma en que las computadoras pueden &quot;descifrar&quot; una contrase&amp;ntilde;a es recrearla y simular el algoritmo de hash utilizado para protegerla. La velocidad del hash est&amp;aacute; relacionada linealmente con su capacidad de ser forzado por la fuerza bruta. Peor a&amp;uacute;n, la mayor&amp;iacute;a de los algoritmos hash se pueden paralelizar f&amp;aacute;cilmente para funcionar a&amp;uacute;n m&amp;aacute;s r&amp;aacute;pido. Es por eso que los esquemas costosos como bcrypt y scrypt son tan importantes.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc82bec66b732bb33be65e32feee97dde8331a13" translate="yes" xml:space="preserve">
          <source>The hashing mechanism must be available in PHP</source>
          <target state="translated">El mecanismo de hashing debe estar disponible en PHP</target>
        </trans-unit>
        <trans-unit id="c967b55b3de7e43262a5ec3a53dd313fc5714961" translate="yes" xml:space="preserve">
          <source>The idea of a salt is to throw the hashing results off balance, so to say. It is known, for example, that the MD5-hash of an empty string is &lt;code&gt;d41d8cd98f00b204e9800998ecf8427e&lt;/code&gt;. So, if someone with good enough a memory would see that hash and know that it's the hash of an empty string. But if the string is salted (say, with the string &quot;&lt;code&gt;MY_PERSONAL_SALT&lt;/code&gt;&quot;), the hash for the 'empty string' (i.e. &quot;&lt;code&gt;MY_PERSONAL_SALT&lt;/code&gt;&quot;) becomes &lt;code&gt;aeac2612626724592271634fb14d3ea6&lt;/code&gt;, hence non-obvious to backtrace. What I'm trying to say, that it's better to use &lt;em&gt;any&lt;/em&gt; salt, than not to. Therefore, it's not too much of an importance to know &lt;em&gt;which&lt;/em&gt; salt to use.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La idea de una sal es desequilibrar los resultados del hash, por as&amp;iacute; decirlo. Se sabe, por ejemplo, que el hash MD5 de una cadena vac&amp;iacute;a es &lt;/font&gt;&lt;/font&gt; &lt;code&gt;d41d8cd98f00b204e9800998ecf8427e&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Entonces, si alguien con una memoria lo suficientemente buena ver&amp;iacute;a ese hash y sabr&amp;iacute;a que es el hash de una cadena vac&amp;iacute;a. Pero si la cadena est&amp;aacute; salada (digamos, con la cadena &quot; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MY_PERSONAL_SALT&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;), el hash para la 'cadena vac&amp;iacute;a' (es decir, &quot; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MY_PERSONAL_SALT&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;) se convierte en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;aeac2612626724592271634fb14d3ea6&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , por lo tanto, no es obvio para retroceder. Lo que estoy tratando de decir, que es mejor usar &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cualquier&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sal, de no hacerlo. Por lo tanto, no es demasiado importante saber &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;qu&amp;eacute;&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sal usar.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3e93c44acff31ed1b16a3be79f5aaf860521be39" translate="yes" xml:space="preserve">
          <source>The objective behind hashing passwords is simple: preventing malicious access to user accounts by compromising the database. So the goal of password hashing is to deter a hacker or cracker by costing them too much time or money to calculate the plain-text passwords. And time/cost are the best deterrents in your arsenal.</source>
          <target state="translated">El objetivo de las contraseñas hash es simple:prevenir el acceso malicioso a las cuentas de los usuarios comprometiendo la base de datos.Así que el objetivo del hashing de contraseñas es disuadir a un hacker o cracker costándole demasiado tiempo o dinero para calcular las contraseñas de texto plano.Y el coste del tiempo es el mejor elemento disuasorio de su arsenal.</target>
        </trans-unit>
        <trans-unit id="ca15458b1f6023e826d9e6c9d269e5b8847c24ab" translate="yes" xml:space="preserve">
          <source>The returned hash could be stored in database as it is. Sample use for generating hash is:</source>
          <target state="translated">El hachís devuelto podría almacenarse en la base de datos tal como está.El uso de la muestra para generar el hash es:</target>
        </trans-unit>
        <trans-unit id="9336b71741fbd4b0fc7ebef42b5f931ca05fe080" translate="yes" xml:space="preserve">
          <source>The theory of the answer is still a good read though.</source>
          <target state="translated">Sin embargo,la teoría de la respuesta sigue siendo una buena lectura.</target>
        </trans-unit>
        <trans-unit id="72fe41d63bb494eee2544c08c337e299e480e6db" translate="yes" xml:space="preserve">
          <source>Then have a separate user account for you that is not stored anywhere on the server, not even in the application.</source>
          <target state="translated">Entonces tenga una cuenta de usuario separada para usted que no esté almacenada en ningún lugar del servidor,ni siquiera en la aplicación.</target>
        </trans-unit>
        <trans-unit id="a80224d4f8511d86bc794896685456f1282e0a56" translate="yes" xml:space="preserve">
          <source>There are a lot of good hashing functions out there (&lt;code&gt;password_hash&lt;/code&gt;, &lt;code&gt;hash&lt;/code&gt;, etc...) but you need to select a good algorithm for the hash to be effective. (bcrypt and ones similar to it are decent algorithms.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hay muchas buenas funciones de hash ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;password_hash&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;hash&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , etc.), pero debe seleccionar un buen algoritmo para que el hash sea efectivo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(bcrypt y otros similares son algoritmos decentes).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83d2f507ea07e3720cda34bd2cd662536b85bf9a" translate="yes" xml:space="preserve">
          <source>There are actually &lt;a href=&quot;http://gdataonline.com/seekhash.php&quot;&gt;websites that do just this&lt;/a&gt; - you can feed it a (md5) hash, and it spits out a known plaintext that generates that particular hash. If you would get access to a database that stores plain md5-hashes, it would be trivial for you to enter the hash for the admin to such a service, and log in. But, if the passwords were salted, such a service would become ineffective.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En realidad, hay &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://gdataonline.com/seekhash.php&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sitios web que hacen exactamente esto&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : puede alimentarlo con un hash (md5), y escupe un texto plano conocido que genera ese hash en particular. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si tuviera acceso a una base de datos que almacena hash md5 simples, ser&amp;iacute;a trivial que ingrese el hash para el administrador de dicho servicio e inicie sesi&amp;oacute;n. Pero, si las contrase&amp;ntilde;as fueran saladas, dicho servicio se convertir&amp;iacute;a ineficaz.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94dc7fd1014b141fac002eb97bbbe1edb127d32d" translate="yes" xml:space="preserve">
          <source>There are also many rainbow table attacks on Windows passwords that run on ordinary CPUs and are very fast.  All this is because Windows &lt;em&gt;still&lt;/em&gt;&lt;a href=&quot;https://superuser.com/a/118279/90231&quot;&gt;doesn't salt or stretch&lt;/a&gt; its passwords, &lt;a href=&quot;https://www.guidingtech.com/61991/cracking-windows-10-password-prevent/&quot;&gt;even in Windows 10&lt;/a&gt; - don't make the same mistake as Microsoft did!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n hay muchos ataques de tabla de arco iris en las contrase&amp;ntilde;as de Windows que se ejecutan en CPU normales y son muy r&amp;aacute;pidos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Todo esto se debe a que Windows &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;todav&amp;iacute;a &lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;a href=&quot;https://superuser.com/a/118279/90231&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no le da sal ni estira&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sus contrase&amp;ntilde;as, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.guidingtech.com/61991/cracking-windows-10-password-prevent/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;incluso en Windows 10&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &amp;iexcl;no cometa el mismo error que Microsoft!&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d78de6e30f57b4b7d0c6241b43daf6efe33858b" translate="yes" xml:space="preserve">
          <source>There's a longer discussion of password entropy on the &lt;a href=&quot;https://crypto.stackexchange.com/questions/374/how-should-i-calculate-the-entropy-of-a-password&quot;&gt;Crypto StackExchange&lt;/a&gt; site. A good Google search will also turn up a lot of results.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hay una discusi&amp;oacute;n m&amp;aacute;s larga sobre la entrop&amp;iacute;a de contrase&amp;ntilde;as en el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sitio &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://crypto.stackexchange.com/questions/374/how-should-i-calculate-the-entropy-of-a-password&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Crypto StackExchange&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una buena b&amp;uacute;squeda en Google tambi&amp;eacute;n arrojar&amp;aacute; muchos resultados.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eb3552eb4e3ab442dc5e9548665b050d60219300" translate="yes" xml:space="preserve">
          <source>This question, &lt;a href=&quot;https://stackoverflow.com/questions/348109/is-double-hashing-a-password-less-secure-than-just-hashing-it-once&quot;&gt;Is &amp;ldquo;double hashing&amp;rdquo; a password less secure than just hashing it once?&lt;/a&gt; 
suggests that hashing multiple times may be a good idea, whereas &lt;a href=&quot;https://stackoverflow.com/questions/55862/how-to-implement-password-protection-for-individual-files#55904&quot;&gt;How to implement password protection for individual files?&lt;/a&gt; suggests using salt.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta pregunta, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/348109/is-double-hashing-a-password-less-secure-than-just-hashing-it-once&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;es &quot;doble hashing&quot; una contrase&amp;ntilde;a menos segura que simplemente hacerlo una vez? &lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sugiere que el hashing varias veces puede ser una buena idea, mientras que &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/55862/how-to-implement-password-protection-for-individual-files#55904&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;C&amp;oacute;mo implementar la protecci&amp;oacute;n con contrase&amp;ntilde;a para archivos individuales? &lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sugiere usar sal.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="957441673ad43072032f00a3b5118222b26b20f1" translate="yes" xml:space="preserve">
          <source>Though the question has been answered, I just want to reiterate that salts used for hashing should be random and not like email address as suggested in first answer.</source>
          <target state="translated">Aunque la pregunta ya ha sido respondida,sólo quiero reiterar que las sales utilizadas para el hashing deben ser aleatorias y no como la dirección de correo electrónico como se sugiere en la primera respuesta.</target>
        </trans-unit>
        <trans-unit id="0cf0236983335ce525d178c161a3dac43b40ad44" translate="yes" xml:space="preserve">
          <source>To verify password, one can use:</source>
          <target state="translated">Para verificar la contraseña,se puede usar:</target>
        </trans-unit>
        <trans-unit id="ae24b36e98b286448b8f32e9eb9c4f5faa046188" translate="yes" xml:space="preserve">
          <source>Try an implementation of &lt;a href=&quot;http://www.itnewb.com/tutorial/Encrypting-Passwords-with-PHP-for-Storage-Using-the-RSA-PBKDF2-Standard&quot;&gt;PDKBF2&lt;/a&gt; with the &lt;a href=&quot;https://security.stackexchange.com/questions/3959/recommended-of-iterations-when-using-pkbdf2-sha256&quot;&gt;maximum number of rounds&lt;/a&gt; that your environment/application/user-perception can tolerate. The lowest number I'd recommend is 2500 rounds. Also, make sure to use &lt;a href=&quot;http://php.net/hash_hmac&quot;&gt;hash_hmac()&lt;/a&gt; if it is available to make the operation harder to reproduce.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pruebe una implementaci&amp;oacute;n de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.itnewb.com/tutorial/Encrypting-Passwords-with-PHP-for-Storage-Using-the-RSA-PBKDF2-Standard&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PDKBF2&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://security.stackexchange.com/questions/3959/recommended-of-iterations-when-using-pkbdf2-sha256&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;n&amp;uacute;mero m&amp;aacute;ximo de rondas&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que su entorno / aplicaci&amp;oacute;n / percepci&amp;oacute;n del usuario puede tolerar. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El n&amp;uacute;mero m&amp;aacute;s bajo que recomendar&amp;iacute;a es de 2500 rondas. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, aseg&amp;uacute;rese de usar &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://php.net/hash_hmac&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;hash_hmac ()&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; si est&amp;aacute; disponible para hacer que la operaci&amp;oacute;n sea m&amp;aacute;s dif&amp;iacute;cil de reproducir.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="068a6272a632b944b53a381b4d5400b18d5eafc9" translate="yes" xml:space="preserve">
          <source>Use PBKDF2 if you cannot use either bcrypt or scrypt, with SHA2 hashes.</source>
          <target state="translated">Usa PBKDF2 si no puedes usar ni bcrypt ni scrypt,con hashes SHA2.</target>
        </trans-unit>
        <trans-unit id="3438f0875ced99f75e760bc602d283a350f5c224" translate="yes" xml:space="preserve">
          <source>Use scrypt when you can; bcrypt if you cannot.</source>
          <target state="translated">Use scrypt cuando pueda;bcrypt si no puede.</target>
        </trans-unit>
        <trans-unit id="8a40715ff9e4ad938469f5e938fbc3461e5c29de" translate="yes" xml:space="preserve">
          <source>What makes a &lt;em&gt;good&lt;/em&gt; password anyway?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Qu&amp;eacute; hace una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;buena&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; contrase&amp;ntilde;a de todos modos?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d324dbbd000686026c12d8aac03bc6761752e7ae" translate="yes" xml:space="preserve">
          <source>What's the difference between SHA and MD5 in PHP</source>
          <target state="translated">¿Cuál es la diferencia entre SHA y MD5 en PHP</target>
        </trans-unit>
        <trans-unit id="3273a0f907bb9b658a5b510bdc764fef8f6fd55f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;password_hash()&lt;/code&gt; is used, it generates a random salt and includes it in the outputted hash (along with the the cost and algorithm used.) &lt;code&gt;password_verify()&lt;/code&gt; then reads that hash and determines the salt and encryption method used, and verifies it against the provided plaintext password.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se utiliza &lt;/font&gt;&lt;/font&gt; &lt;code&gt;password_hash()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , genera una sal aleatoria y la incluye en el hash de salida (junto con el costo y el algoritmo utilizado). &lt;/font&gt;&lt;/font&gt; &lt;code&gt;password_verify()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; lee ese hash y determina el m&amp;eacute;todo de sal y cifrado utilizado, y lo verifica contra la contrase&amp;ntilde;a de texto sin formato proporcionada.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cdf0e49369640a78f1b0481bc29357ba77ff4067" translate="yes" xml:space="preserve">
          <source>When hashing speed is the key, the slower the more resistant to Brute Force attacks.</source>
          <target state="translated">Cuando la clave está en la velocidad,cuanto más lenta,más resistente a los ataques de la Fuerza Bruta.</target>
        </trans-unit>
        <trans-unit id="0ea7792c8765a8cc7d08846130a9f07954560526" translate="yes" xml:space="preserve">
          <source>When you create a salt make sure it is unique to the password it is salting, then store both the completed hash and salt in your DB. What this will do is make it so that an attacker will have to individually crack each salt and hash before they can gain access. This means a lot more work and time for the attacker.</source>
          <target state="translated">Cuando crees una sal,asegúrate de que es única para la contraseña que está salando,luego guarda tanto el hash completo como la sal en tu base de datos.Lo que esto hará es que un atacante tendrá que romper individualmente cada sal y hachís antes de poder acceder.Esto significa mucho más trabajo y tiempo para el atacante.</target>
        </trans-unit>
        <trans-unit id="4bcfb1507fa18c5813bf98587194789dfd7fc9fa" translate="yes" xml:space="preserve">
          <source>Why hash passwords anyway?</source>
          <target state="translated">¿Por qué tienes contraseñas de todos modos?</target>
        </trans-unit>
        <trans-unit id="d9c509de30c734b1fbd267c99263e20b0ac2f8d4" translate="yes" xml:space="preserve">
          <source>You cannot possibly foresee all threats or avenues of attack, and so you must make your best effort to protect your users &lt;strong&gt;up front&lt;/strong&gt;. If you do not, then you might even miss the fact that you were attacked until it's too late... &lt;em&gt;and you're liable&lt;/em&gt;. To avoid that situation, act paranoid to begin with. Attack your own software (internally) and attempt to steal user credentials, or modify other user's accounts or access their data. If you don't test the security of your system, then you cannot blame anyone but yourself.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No es posible prever todas las amenazas o v&amp;iacute;as de ataque, por lo que debe hacer su mejor esfuerzo para proteger a sus usuarios &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;por adelantado&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si no lo hace, incluso podr&amp;iacute;a perderse el hecho de que fue atacado hasta que sea demasiado tarde ... &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;y usted es responsable&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para evitar esa situaci&amp;oacute;n, act&amp;uacute;a paranoico para empezar. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ataque su propio software (internamente) e intente robar credenciales de usuario, o modificar las cuentas de otros usuarios o acceder a sus datos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si no prueba la seguridad de su sistema, no puede culpar a nadie m&amp;aacute;s que a usted mismo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6ecc62ca116f09be2ac8ccbf2dd2a17934a3f97a" translate="yes" xml:space="preserve">
          <source>You should definitely use a salt. I'd recommend using random bytes (and not restrict yourself to characters and numbers). As usually, the longer you choose, the safer, slower it gets. 64 bytes ought to be fine, i guess.</source>
          <target state="translated">Definitivamente deberías usar una sal.Recomendaría usar bytes aleatorios (y no restringirse a caracteres y números).Como siempre,cuanto más tiempo elijas,más seguro y lento será.64 bytes deberían estar bien,supongo.</target>
        </trans-unit>
        <trans-unit id="250c2ad56e4e9ddde57caded620862fba3c804d9" translate="yes" xml:space="preserve">
          <source>You tell your users to make good passwords to avoid getting hacked, do the same. What is the point in going through all the effort of locking your front door when you have the backdoor wide open.</source>
          <target state="translated">Dile a tus usuarios que hagan buenas contraseñas para evitar ser hackeados,haz lo mismo.¿Qué sentido tiene hacer el esfuerzo de cerrar la puerta principal cuando tienes la puerta trasera abierta de par en par?</target>
        </trans-unit>
        <trans-unit id="65de4781939078acdc51b27007cb200ec4c437c0" translate="yes" xml:space="preserve">
          <source>also we need the hash
I`m using sha512
it is the best and it is in php</source>
          <target state="translated">También necesitamos el hachís.Estoy usando sha512,es el mejor y está en php.</target>
        </trans-unit>
        <trans-unit id="28edb5e4d9749f27a128acb260e84492ffdd3323" translate="yes" xml:space="preserve">
          <source>and for authorize we will use same steps...</source>
          <target state="translated">y para autorizarlo usaremos los mismos pasos...</target>
        </trans-unit>
        <trans-unit id="44c7073fa2fab130499078fde7b90431453ca675" translate="yes" xml:space="preserve">
          <source>it is the best way to safe our clients passwords...</source>
          <target state="translated">...es la mejor manera de asegurar las contraseñas de nuestros clientes...</target>
        </trans-unit>
        <trans-unit id="66f5061855cb204f427143765390a0e15cb4bb02" translate="yes" xml:space="preserve">
          <source>now we need to save in database our $hash_psw variable value and $salt variable</source>
          <target state="translated">ahora necesitamos guardar en la base de datos nuestro valor de la variable $hash_psw y la variable $salt</target>
        </trans-unit>
        <trans-unit id="65b1ca7c9f59ee04049ba7f7cac979ffa197ee6a" translate="yes" xml:space="preserve">
          <source>ok
in the fitsy we need salt
salt must be unique
so let generate it</source>
          <target state="translated">ok en el fitsy necesitamos la sal debe ser única así que dejemos que se genere</target>
        </trans-unit>
        <trans-unit id="83813ad92f95972794914dc4459ac7d1fb05a12a" translate="yes" xml:space="preserve">
          <source>so now we can use this functions to generate safe password</source>
          <target state="translated">así que ahora podemos usar estas funciones para generar una contraseña segura</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
