<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/40730">
    <body>
      <group id="40730">
        <trans-unit id="714e23cefc2e2c4e15d341e680dbcaf0530eb447" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.defaultvalueattribute?view=netframework-4.8&quot;&gt;&lt;code&gt;DefaultValueAttribute&lt;/code&gt;&lt;/a&gt; is intended to be used by the VS designer (or any other consumer) to specify a default value, not an initial value. (Even if in designed object, initial value is the default value).</source>
          <target state="translated">&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.defaultvalueattribute?view=netframework-4.8&quot;&gt; &lt;code&gt;DefaultValueAttribute&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; предназначен для использования конструктором VS (или любым другим потребителем) для указания значения по умолчанию, а не начального значения. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Даже если в проектируемом объекте начальное значение является значением по умолчанию).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="91842727647d30c8647d83eb1dbf9308f4db7931" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; Using the Constructor:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Использование конструктора:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="da10f12617f9bec055d9b4ccac1cc16f87520df2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C# 5 and below&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C # 5 и ниже&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a6ce186c51205303005da54e527d8acd63e4a19" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C# 6&lt;/strong&gt; :</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C # 6&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="90a18f397ed6c6e8a27d3edbfd5d9d95f744e446" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edited on 1/2/15&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Отредактировано 1/2/15&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e7509bc8dcc7e153bb827962523c606fa13d6bec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For Readonly properties&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для Readonly свойств&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="33b80ebb07d3fbca29ac0d15f8c2311c9d67b4ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For both Writable &amp;amp; Readable properties&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для обоих записываемых и читаемых свойств&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d77461559aa347ae48d83005e2901613b5f71aa4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Starting with C# 6.0&lt;/strong&gt;, We can assign default value to auto-implemented properties.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Начиная с C # 6.0&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , мы можем назначить значение по умолчанию для автоматически реализуемых свойств.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f3a926a3213825a97af03fdf67a6cec6845034df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using normal property syntax&lt;/strong&gt;  (with an initial value)</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Использование нормального синтаксиса свойств&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (с начальным значением)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9118205298b983e6310161824394e853c61f8c58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You can simple put like this&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы можете просто поставить как это&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="818427766702b1db479e9fd15cd05b94417964ec" translate="yes" xml:space="preserve">
          <source>@Darren Kopp - good answer, clean, and correct.  And to reiterate, you CAN write constructors for Abstract methods.  You just need to access them from the base class when writing the constructor:</source>
          <target state="translated">@Darren Kopp-хороший ответ,чистый и правильный.И еще раз повторюсь,вы CAN пишете конструкторы для абстрактных методов.При написании конструктора достаточно получить доступ к ним из базового класса:</target>
        </trans-unit>
        <trans-unit id="c0bd4be029e7bf1974649a54feb60cd9efa26eb9" translate="yes" xml:space="preserve">
          <source>As of C#6 there is a new way:</source>
          <target state="translated">С C#6 есть новый способ:</target>
        </trans-unit>
        <trans-unit id="b91018ede0c5c2b781446e479554a284a8f85d77" translate="yes" xml:space="preserve">
          <source>As this gives you clear control of the order values are assigned.</source>
          <target state="translated">Так как это дает Вам четкий контроль над значениями заказов,они назначаются.</target>
        </trans-unit>
        <trans-unit id="7fd2fc4fdbbfd55e9459e6c92366521e68f2b3e7" translate="yes" xml:space="preserve">
          <source>At compile time &lt;code&gt;DefaultValueAttribute&lt;/code&gt; will not impact the generated IL and it will not be read to initialize the property to that value (see &lt;a href=&quot;https://stackoverflow.com/questions/1980520/defaultvalue-attribute-is-not-working-with-my-auto-property&quot;&gt;DefaultValue attribute is not working with my Auto Property&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Во время компиляции &lt;/font&gt;&lt;/font&gt; &lt;code&gt;DefaultValueAttribute&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не повлияет на сгенерированный IL, и он не будет считан для инициализации свойства этим значением (см. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1980520/defaultvalue-attribute-is-not-working-with-my-auto-property&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Атрибут DefaultValue не работает с моим автоматическим свойством&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ad560ce299dc32f1b789984854c98f49f8027bf6" translate="yes" xml:space="preserve">
          <source>Constructor at Base Class:</source>
          <target state="translated">Конструктор базового класса:</target>
        </trans-unit>
        <trans-unit id="64e3d768483703c127e3347f2d07542b52db2543" translate="yes" xml:space="preserve">
          <source>Constructor at Derived / Concrete / Sub-Class:</source>
          <target state="translated">Конструктор на подклассе &quot;Производный бетон&quot;:</target>
        </trans-unit>
        <trans-unit id="81c1a5f25e1ffcc8fbcad8254b14fe40037ab92c" translate="yes" xml:space="preserve">
          <source>Details on &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/x9fsa0sw.aspx&quot;&gt;MSDN&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Подробности на &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/x9fsa0sw.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MSDN&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3e78a156db6ecbed17e0e062fd60e26d6115b348" translate="yes" xml:space="preserve">
          <source>Example of attributes that impact the IL are &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.threadstaticattribute?view=netframework-4.8&quot;&gt;&lt;code&gt;ThreadStaticAttribute&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callermembernameattribute?view=netframework-4.8&quot;&gt;&lt;code&gt;CallerMemberNameAttribute&lt;/code&gt;&lt;/a&gt;, ...</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Примером атрибутов, которые влияют на IL, являются &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.threadstaticattribute?view=netframework-4.8&quot;&gt; &lt;code&gt;ThreadStaticAttribute&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callermembernameattribute?view=netframework-4.8&quot;&gt; &lt;code&gt;CallerMemberNameAttribute&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , ...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="72a72fc0587dbd7b54f70217f6f0bb56d5026639" translate="yes" xml:space="preserve">
          <source>Have you tried using the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.defaultvalueattribute.aspx&quot;&gt;DefaultValueAttribute&lt;/a&gt; or &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/53b8022e%28VS.71%29.aspx&quot;&gt;ShouldSerialize and Reset methods&lt;/a&gt; in conjunction with the constructor?  I feel like one of these two methods is necessary if you're making a class that might show up on the designer surface or in a property grid.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы пытались использовать &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.defaultvalueattribute.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;методы DefaultValueAttribute&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; или &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/53b8022e%28VS.71%29.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ShouldSerialize и Reset&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вместе с конструктором? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Мне кажется, что один из этих двух методов необходим, если вы создаете класс, который может отображаться на поверхности конструктора или в сетке свойств.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9ffcb42672def6cb234f448a552018f2b802fa4e" translate="yes" xml:space="preserve">
          <source>Hmm... maybe this will be the subject of it's own question later</source>
          <target state="translated">Хм...может быть,это будет предметом собственного вопроса позже.</target>
        </trans-unit>
        <trans-unit id="bb1cc6a87045d53086bd7c6363212085e878e92d" translate="yes" xml:space="preserve">
          <source>Hope that helps!</source>
          <target state="translated">Надеюсь,это поможет!</target>
        </trans-unit>
        <trans-unit id="cc5160f1f43c6af1b685486a44a3df63bfb710c7" translate="yes" xml:space="preserve">
          <source>How do you give a C# auto-property an initial value?</source>
          <target state="translated">Как присвоить авто-свойство C#первоначальную стоимость?</target>
        </trans-unit>
        <trans-unit id="30f1eac29f8fadccf9e9ea2f92599614c1a524ef" translate="yes" xml:space="preserve">
          <source>I either use the constructor, or revert to the old syntax.</source>
          <target state="translated">Я либо использую конструктор,либо возвращаюсь к старому синтаксису.</target>
        </trans-unit>
        <trans-unit id="294a19adc842bd40c122613a4bf38fcafd45e131" translate="yes" xml:space="preserve">
          <source>I think this would do it for ya givng SomeFlag a default of false.</source>
          <target state="translated">Я думаю,что это сработает,если вы дадите SomeFlag по умолчанию ложь.</target>
        </trans-unit>
        <trans-unit id="e3e16819c3e1e3a7fc5d692d2c867b961f8d0f77" translate="yes" xml:space="preserve">
          <source>I would argue that this syntax was best practice in C# up to 5:</source>
          <target state="translated">Я бы поспорил,что этот синтаксис был лучшей практикой на C#до 5:</target>
        </trans-unit>
        <trans-unit id="7d1da389e3d408009426ff5f0bc9e48b657d3427" translate="yes" xml:space="preserve">
          <source>I'd avoid adding a default to the constructor; leave that for dynamic assignments and avoid having two points at which the variable is assigned (i.e. the type default and in the constructor). Typically I'd simply write a normal property in such cases.</source>
          <target state="translated">Я бы не стал добавлять в конструктор значение по умолчанию;оставил бы это для динамических присваиваний и не имел бы двух точек,в которых присваивается переменная (т.е.тип по умолчанию и в конструкторе).Обычно в таких случаях я бы просто написал нормальное свойство.</target>
        </trans-unit>
        <trans-unit id="ba44dec5e099eae52109afed430816c62175ba10" translate="yes" xml:space="preserve">
          <source>In C# 5 and earlier, to give auto implemented properties an initial value, you have to do it in a constructor.</source>
          <target state="translated">В C#5 и более ранних версиях,для того,чтобы придать автореализованным свойствам начальное значение,необходимо сделать это в конструкторе.</target>
        </trans-unit>
        <trans-unit id="66210d0d26b5f4286f5559b26b20d16dcd2e307b" translate="yes" xml:space="preserve">
          <source>In C# 6 and above you can simply use the syntax:</source>
          <target state="translated">В C#6 и выше можно просто использовать синтаксис:</target>
        </trans-unit>
        <trans-unit id="7101bf65be0d5524bb0ea25e418d4e3d845db035" translate="yes" xml:space="preserve">
          <source>In C# 6.0 this is a breeze!</source>
          <target state="translated">В C#6.0 это ветер!</target>
        </trans-unit>
        <trans-unit id="b5d68322ad4675fc0f70d7107c9320d74b1ea8de" translate="yes" xml:space="preserve">
          <source>In Version of &lt;em&gt;C# (6.0) &amp;amp; greater&lt;/em&gt;, you can do :</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В версии &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C # (6.0) и выше&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вы можете сделать:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="60401e067e3786ee3e16d62f9950ef4f7ed81104" translate="yes" xml:space="preserve">
          <source>In addition to the answer already accepted, for the scenario when you want to define a default property as a &lt;em&gt;function&lt;/em&gt; of other properties you can use &lt;strong&gt;&lt;em&gt;expression body notation&lt;/em&gt;&lt;/strong&gt; on C#6.0 (and higher) for even more elegant and concise constructs like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В дополнение к уже принятому ответу, для сценария, когда вы хотите определить свойство по умолчанию как &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;функцию&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; других свойств, вы можете использовать &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;нотацию тела выражения&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; на C # 6.0 (и выше) для еще более элегантных и лаконичных конструкций, таких как:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5cd6d774f5a030e671b23830fab91011d48ee807" translate="yes" xml:space="preserve">
          <source>In current Version of &lt;em&gt;C# (7.0)&lt;/em&gt;, you can do : (The snippet rather displays how you can use expression bodied get/set accessors to make is more compact when using with backing fields)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В текущей версии &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C # (7.0)&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вы можете сделать: (Фрагмент скорее показывает, как вы можете использовать методы get / set выражений с выражениями, чтобы сделать их более компактными при использовании с опорными полями)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="794fb949df187b39811af6d7644259ba7e4660c7" translate="yes" xml:space="preserve">
          <source>In order to be able to use the above &quot;=&amp;gt;&quot; notation, the property must be read only, and you do not use the get accessor keyword.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Чтобы использовать вышеуказанную нотацию &quot;=&amp;gt;&quot;, свойство должно быть доступно только для чтения, и вы не используете ключевое слово get accessor.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d54a7be1c5622cb4ea0a8043a79e2217d9ebf59" translate="yes" xml:space="preserve">
          <source>In the constructor.  The constructor's purpose is to initialized it's data members.</source>
          <target state="translated">В конструкторе.Назначение конструктора-инициализировать его члены данных.</target>
        </trans-unit>
        <trans-unit id="ba65ad098f85ce8e0fcd83fdc5b9cf9c3fab4426" translate="yes" xml:space="preserve">
          <source>Is there a better way?</source>
          <target state="translated">Есть способ получше?</target>
        </trans-unit>
        <trans-unit id="11a986f617d07e6dbee601ec64a3f0b8c88b33ad" translate="yes" xml:space="preserve">
          <source>My solution is to use a custom attribute that provides default value property initialization by constant or using property type initializer.</source>
          <target state="translated">Мое решение заключается в использовании пользовательского атрибута,который обеспечивает инициализацию свойства по умолчанию с помощью константы или с помощью инициализатора типа свойства.</target>
        </trans-unit>
        <trans-unit id="8d717461faef04d94163ab001c93419cd0902fef" translate="yes" xml:space="preserve">
          <source>Note that to have a &lt;code&gt;readonly&lt;/code&gt; property simply omit the set, as so:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Обратите внимание, что для того, чтобы иметь &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;свойство только &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;для &lt;/font&gt;&lt;/font&gt; &lt;code&gt;readonly&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; просто опустите набор, как показано ниже:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="45f49c79ea5cc5e16b0d4619b13d5c736cdd7f8e" translate="yes" xml:space="preserve">
          <source>Obviously if it's not a string then I might make the object nullable ( double?, int? ) and check if it's null, return a default, or return the value it's set to.</source>
          <target state="translated">Очевидно,что если это не строка,то я могу сделать объект нулевым(double?,int?)и проверить,нулевой ли он,вернуть значение по умолчанию,или вернуть значение,которому он соответствует.</target>
        </trans-unit>
        <trans-unit id="467b26f52af02e8a2806378b66e8797a53065fab" translate="yes" xml:space="preserve">
          <source>One other option is to do what ASP.Net does and define defaults via an attribute:</source>
          <target state="translated">Еще один вариант-сделать то,что делает ASP.Net и определить настройки по умолчанию через атрибут:</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="b3a5cb824ff9aadde5b30af03d3dbb2b5f994af4" translate="yes" xml:space="preserve">
          <source>Personally, I don't see the point of making it a property at all if you're not going to do  anything at all beyond the auto-property.  Just leave it as a field.  The encapsulation benefit for these item are just red herrings, because there's nothing behind them to encapsulate.  If you ever need to change the underlying implementation you're still free to refactor them as properties without breaking any dependent code.</source>
          <target state="translated">Лично я не вижу смысла превращать его в собственность,если вы не собираетесь делать ничего,что выходит за рамки авто-приобретения.Просто оставь это как поле.Преимущество инкапсуляции для этих объектов-просто красная селедка,потому что за ней нет ничего,что можно было бы инкапсулировать.Если вам когда-нибудь понадобится изменить базовую реализацию,вы все равно сможете рефакторизовать их как свойства,не взламывая никакого зависимого кода.</target>
        </trans-unit>
        <trans-unit id="ceb09e6d8bf290034dd33caa29f2f4530d4bcf27" translate="yes" xml:space="preserve">
          <source>Prior to this I responded as below.</source>
          <target state="translated">До этого я ответил,как указано ниже.</target>
        </trans-unit>
        <trans-unit id="930b3b23cff0eb68b2882853b258c5a52353c09b" translate="yes" xml:space="preserve">
          <source>See: &lt;a href=&quot;http://blogs.msmvps.com/jonskeet/2014/04/04/c-6-first-reactions/&quot;&gt;C# 6: First reactions , Initializers for automatically implemented properties - By Jon Skeet&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;См .: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.msmvps.com/jonskeet/2014/04/04/c-6-first-reactions/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C # 6: Первые реакции, Инициализаторы для автоматически реализованных свойств - Джон Скит&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ae9966c7d7daf8ce67ffe3300908a118efbb770e" translate="yes" xml:space="preserve">
          <source>Since C# 6.0, you can specify initial value in-line. The syntax is:</source>
          <target state="translated">Начиная с C#6.0,вы можете указать начальное значение в строке.Синтаксис таков:</target>
        </trans-unit>
        <trans-unit id="7e43a357d3a0c38b1a995cd068429d833232155f" translate="yes" xml:space="preserve">
          <source>Sometimes I use this, if I don't want it to be actually set and persisted in my db:</source>
          <target state="translated">Иногда я использую это,если не хочу,чтобы оно было настроено и сохранялось в моем db:</target>
        </trans-unit>
        <trans-unit id="20fc53e44f54098334182398215f384c4ffc06da" translate="yes" xml:space="preserve">
          <source>The point here is that the instance variable drawn from the base class may bury your base field name.  Setting the current instantiated object value using &quot;this.&quot; will allow you to correctly form your object with respect to the current instance and required permission levels (access modifiers) where you are instantiating it.</source>
          <target state="translated">Дело в том,что переменная экземпляра,взятая из базового класса,может похоронить имя вашего базового поля.Установка текущего значения инстанцированного объекта с помощью &quot;this&quot; позволит вам правильно сформировать ваш объект относительно текущего экземпляра и требуемых уровней прав (модификаторов доступа),где вы его инстанцируете.</target>
        </trans-unit>
        <trans-unit id="b85aa3eee23d0718bceae9396501c0c468d1fbef" translate="yes" xml:space="preserve">
          <source>Then I can make a check in my repository to see if it's my default and not persist, or make a backdoor check in to see the true status of the backing value, before saving.</source>
          <target state="translated">Затем я могу сделать проверку в моем репозитории,чтобы проверить,не является ли это значение моим по умолчанию и не сохраняется ли оно,или сделать проверку черного хода,чтобы увидеть истинное состояние значения резервного копирования,перед сохранением.</target>
        </trans-unit>
        <trans-unit id="51d0c44fe22f09c90e085c9e3757dd10e83ef1de" translate="yes" xml:space="preserve">
          <source>Though the intended use of the attribute is not to actually set the values of the properties, you can use reflection to always set them anyway...</source>
          <target state="translated">Хотя целевое использование атрибута не заключается в фактической установке значений свойств,вы все равно можете использовать рефлексию,чтобы всегда устанавливать их...</target>
        </trans-unit>
        <trans-unit id="d057a1a916d855d00d2f4f9dbf3b8e67e04d7ff6" translate="yes" xml:space="preserve">
          <source>To clarify, yes, you need to set default values in the constructor for class derived objects.  You will need to ensure the constructor exists with the proper access modifier for construction where used.  If the object is not instantiated, e.g. it has no constructor (e.g. static methods) then the default value can be set by the field.  The reasoning here is that the object itself will be created only once and you do not instantiate it.</source>
          <target state="translated">Для пояснения,да,необходимо задать в конструкторе значения по умолчанию для объектов,производных от классов.Вам нужно будет убедиться,что конструктор существует с правильным модификатором доступа для построения,где он используется.Если объект не инстанцирован,например,он не имеет конструктора (например,статические методы),то значение по умолчанию может быть задано полем.Причина здесь в том,что сам объект будет создан только один раз и вы не инстанцируете его.</target>
        </trans-unit>
        <trans-unit id="6dcc6663115112d3b2ea940d2425b20386b0f4dc" translate="yes" xml:space="preserve">
          <source>To use this attribute it's necessary to inherit a class from special base class-initializer or use a static helper method:</source>
          <target state="translated">Для использования данного атрибута необходимо наследовать класс от специального базового класса-инициализатора или использовать статический метод-помощник:</target>
        </trans-unit>
        <trans-unit id="fec43ce445f974147bd0eb223a50147e7fb7202d" translate="yes" xml:space="preserve">
          <source>Usage example:</source>
          <target state="translated">Пример использования:</target>
        </trans-unit>
        <trans-unit id="324d1df68a2a46d27e8d85317d55003c4831e2cf" translate="yes" xml:space="preserve">
          <source>Use the constructor because &quot;When the constructor is finished, Construction should be finished&quot;. properties are like states your classes hold, if you had to initialize a default state, you would do that in your constructor.</source>
          <target state="translated">Используйте конструктор,потому что &quot;Когда конструктор закончен,то сборка должна быть закончена&quot;.Свойства подобны состояниям,которые хранятся в ваших классах,если бы вам пришлось инициализировать состояние по умолчанию,вы бы сделали это в вашем конструкторе.</target>
        </trans-unit>
        <trans-unit id="8a7394bd66ec0dce7553b773603f227220dada72" translate="yes" xml:space="preserve">
          <source>We can also create read-only auto implemented property like:</source>
          <target state="translated">Мы также можем создать автоматическое свойство,реализованное только для чтения,например:</target>
        </trans-unit>
        <trans-unit id="2a081ef4ca8b1b23e21bbb4bca004ca4172051c0" translate="yes" xml:space="preserve">
          <source>What is the best way to give a C# auto-property an initial value</source>
          <target state="translated">Какой лучший способ придать авто-свойству C#начальное значение?</target>
        </trans-unit>
        <trans-unit id="29a9336308d4fedeca1f9c87d1abe7a51487dbc0" translate="yes" xml:space="preserve">
          <source>When you inline an initial value for a variable it will be done implicitly in the constructor anyway.</source>
          <target state="translated">Когда вы вставляете в строку начальное значение для переменной,это все равно будет сделано неявно в конструкторе.</target>
        </trans-unit>
        <trans-unit id="85fba9a98cbb523590e8691a9c6900b1aa9233bb" translate="yes" xml:space="preserve">
          <source>With C# 6 you can initialize auto-properties directly (finally!), there are now other answers in the thread that describe that.</source>
          <target state="translated">С помощью C#6 вы можете инициализировать авто-свойства напрямую (наконец!),теперь в потоке есть и другие ответы,которые описывают это.</target>
        </trans-unit>
        <trans-unit id="450c27608618b95b7f54a7e888cad79a09a79fbb" translate="yes" xml:space="preserve">
          <source>You can also assign &lt;code&gt;readonly&lt;/code&gt; auto-properties from the constructor.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы также можете назначить только &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;авто-свойства для &lt;/font&gt;&lt;/font&gt; &lt;code&gt;readonly&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; из конструктора.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="43ef8484820fc9fd0489207cfa17de705c94f53c" translate="yes" xml:space="preserve">
          <source>You can do it in the &lt;code&gt;Class&lt;/code&gt; declaration itself, in the property declaration statements.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы можете сделать это в самом &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;объявлении &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , в заявлениях объявления свойства.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f6b49685c242a4eaa3cdb8af7ed7923149df4ae6" translate="yes" xml:space="preserve">
          <source>You can use the above in the following fashion</source>
          <target state="translated">Вы можете использовать вышеперечисленное следующим образом</target>
        </trans-unit>
        <trans-unit id="6335bceb1baad72e8a610cc0144ed8bef27a988d" translate="yes" xml:space="preserve">
          <source>little complete sample:</source>
          <target state="translated">маленький полный образец:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
