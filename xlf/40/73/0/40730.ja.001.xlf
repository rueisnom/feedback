<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/40730">
    <body>
      <group id="40730">
        <trans-unit id="714e23cefc2e2c4e15d341e680dbcaf0530eb447" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.defaultvalueattribute?view=netframework-4.8&quot;&gt;&lt;code&gt;DefaultValueAttribute&lt;/code&gt;&lt;/a&gt; is intended to be used by the VS designer (or any other consumer) to specify a default value, not an initial value. (Even if in designed object, initial value is the default value).</source>
          <target state="translated">&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.defaultvalueattribute?view=netframework-4.8&quot;&gt; &lt;code&gt;DefaultValueAttribute&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、VSデザイナー（またはその他のコンシューマー）が、初期値ではなくデフォルト値を指定するために使用することを目的としています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（設計されたオブジェクトであっても、初期値はデフォルト値です）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="91842727647d30c8647d83eb1dbf9308f4db7931" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; Using the Constructor:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; コンストラクターの使用：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="da10f12617f9bec055d9b4ccac1cc16f87520df2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C# 5 and below&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃5以下&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a6ce186c51205303005da54e527d8acd63e4a19" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C# 6&lt;/strong&gt; :</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃6&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="90a18f397ed6c6e8a27d3edbfd5d9d95f744e446" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edited on 1/2/15&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1/2/15に編集&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e7509bc8dcc7e153bb827962523c606fa13d6bec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For Readonly properties&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;読み取り専用プロパティの場合&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="33b80ebb07d3fbca29ac0d15f8c2311c9d67b4ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For both Writable &amp;amp; Readable properties&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;書き込み可能なプロパティと読み取り可能なプロパティの両方&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d77461559aa347ae48d83005e2901613b5f71aa4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Starting with C# 6.0&lt;/strong&gt;, We can assign default value to auto-implemented properties.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃6.0&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以降、自動実装されたプロパティにデフォルト値を割り当てることができます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f3a926a3213825a97af03fdf67a6cec6845034df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using normal property syntax&lt;/strong&gt;  (with an initial value)</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通常のプロパティ構文の使用&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; （初期値あり）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9118205298b983e6310161824394e853c61f8c58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You can simple put like this&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このように簡単に置くことができます&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="818427766702b1db479e9fd15cd05b94417964ec" translate="yes" xml:space="preserve">
          <source>@Darren Kopp - good answer, clean, and correct.  And to reiterate, you CAN write constructors for Abstract methods.  You just need to access them from the base class when writing the constructor:</source>
          <target state="translated">@Darren Kopp-良い答えで、きれいで、正しい。繰り返しになりますが、抽象メソッドのコンストラクタを書くことができます。コンストラクタを書くときにベースクラスからアクセスする必要があるだけです。</target>
        </trans-unit>
        <trans-unit id="c0bd4be029e7bf1974649a54feb60cd9efa26eb9" translate="yes" xml:space="preserve">
          <source>As of C#6 there is a new way:</source>
          <target state="translated">C#6のように、新しい方法があります。</target>
        </trans-unit>
        <trans-unit id="b91018ede0c5c2b781446e479554a284a8f85d77" translate="yes" xml:space="preserve">
          <source>As this gives you clear control of the order values are assigned.</source>
          <target state="translated">これにより、値の割り当て順序を明確に制御することができます。</target>
        </trans-unit>
        <trans-unit id="7fd2fc4fdbbfd55e9459e6c92366521e68f2b3e7" translate="yes" xml:space="preserve">
          <source>At compile time &lt;code&gt;DefaultValueAttribute&lt;/code&gt; will not impact the generated IL and it will not be read to initialize the property to that value (see &lt;a href=&quot;https://stackoverflow.com/questions/1980520/defaultvalue-attribute-is-not-working-with-my-auto-property&quot;&gt;DefaultValue attribute is not working with my Auto Property&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンパイル時に、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;DefaultValueAttribute&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は生成されたILに影響を与えず、プロパティをその値に初期化するために読み取られません（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1980520/defaultvalue-attribute-is-not-working-with-my-auto-property&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DefaultValue属性が自動プロパティで機能しないを&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ad560ce299dc32f1b789984854c98f49f8027bf6" translate="yes" xml:space="preserve">
          <source>Constructor at Base Class:</source>
          <target state="translated">基底クラスのコンストラクタです。</target>
        </trans-unit>
        <trans-unit id="64e3d768483703c127e3347f2d07542b52db2543" translate="yes" xml:space="preserve">
          <source>Constructor at Derived / Concrete / Sub-Class:</source>
          <target state="translated">派生コンクリートサブクラスのコンストラクタです。</target>
        </trans-unit>
        <trans-unit id="81c1a5f25e1ffcc8fbcad8254b14fe40037ab92c" translate="yes" xml:space="preserve">
          <source>Details on &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/x9fsa0sw.aspx&quot;&gt;MSDN&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/x9fsa0sw.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MSDNの&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;詳細&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3e78a156db6ecbed17e0e062fd60e26d6115b348" translate="yes" xml:space="preserve">
          <source>Example of attributes that impact the IL are &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.threadstaticattribute?view=netframework-4.8&quot;&gt;&lt;code&gt;ThreadStaticAttribute&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callermembernameattribute?view=netframework-4.8&quot;&gt;&lt;code&gt;CallerMemberNameAttribute&lt;/code&gt;&lt;/a&gt;, ...</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ILに影響を与える属性の例は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.threadstaticattribute?view=netframework-4.8&quot;&gt; &lt;code&gt;ThreadStaticAttribute&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callermembernameattribute?view=netframework-4.8&quot;&gt; &lt;code&gt;CallerMemberNameAttribute&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;などです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="72a72fc0587dbd7b54f70217f6f0bb56d5026639" translate="yes" xml:space="preserve">
          <source>Have you tried using the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.defaultvalueattribute.aspx&quot;&gt;DefaultValueAttribute&lt;/a&gt; or &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/53b8022e%28VS.71%29.aspx&quot;&gt;ShouldSerialize and Reset methods&lt;/a&gt; in conjunction with the constructor?  I feel like one of these two methods is necessary if you're making a class that might show up on the designer surface or in a property grid.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは使ってみました&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.defaultvalueattribute.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DefaultValueAttribute&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/53b8022e%28VS.71%29.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ShouldSerializeとリセット方法を&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、コンストラクタと一緒に？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デザイナー画面またはプロパティグリッドに表示される可能性のあるクラスを作成する場合は、これら2つのメソッドのいずれかが必要だと思います。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9ffcb42672def6cb234f448a552018f2b802fa4e" translate="yes" xml:space="preserve">
          <source>Hmm... maybe this will be the subject of it's own question later</source>
          <target state="translated">うーん...これは後になってからの質問になるかもしれませんね。</target>
        </trans-unit>
        <trans-unit id="bb1cc6a87045d53086bd7c6363212085e878e92d" translate="yes" xml:space="preserve">
          <source>Hope that helps!</source>
          <target state="translated">役に立つことを願っています</target>
        </trans-unit>
        <trans-unit id="cc5160f1f43c6af1b685486a44a3df63bfb710c7" translate="yes" xml:space="preserve">
          <source>How do you give a C# auto-property an initial value?</source>
          <target state="translated">C#のオートプロパティに初期値を与えるには?</target>
        </trans-unit>
        <trans-unit id="30f1eac29f8fadccf9e9ea2f92599614c1a524ef" translate="yes" xml:space="preserve">
          <source>I either use the constructor, or revert to the old syntax.</source>
          <target state="translated">コンストラクタを使うか、古い構文に戻すかのどちらかです。</target>
        </trans-unit>
        <trans-unit id="294a19adc842bd40c122613a4bf38fcafd45e131" translate="yes" xml:space="preserve">
          <source>I think this would do it for ya givng SomeFlag a default of false.</source>
          <target state="translated">SomeFlagのデフォルトをfalseにすることで、これができるようになると思います。</target>
        </trans-unit>
        <trans-unit id="e3e16819c3e1e3a7fc5d692d2c867b961f8d0f77" translate="yes" xml:space="preserve">
          <source>I would argue that this syntax was best practice in C# up to 5:</source>
          <target state="translated">私はこの構文が5までのC#ではベストプラクティスだったと主張します。</target>
        </trans-unit>
        <trans-unit id="7d1da389e3d408009426ff5f0bc9e48b657d3427" translate="yes" xml:space="preserve">
          <source>I'd avoid adding a default to the constructor; leave that for dynamic assignments and avoid having two points at which the variable is assigned (i.e. the type default and in the constructor). Typically I'd simply write a normal property in such cases.</source>
          <target state="translated">コンストラクタにデフォルトを追加するのは避けたいです。動的な代入のためにそれを残し、変数が代入される2つのポイント(すなわち、デフォルト型とコンストラクタ)を持つのは避けたいです。通常、このような場合は通常のプロパティを書くだけです。</target>
        </trans-unit>
        <trans-unit id="ba44dec5e099eae52109afed430816c62175ba10" translate="yes" xml:space="preserve">
          <source>In C# 5 and earlier, to give auto implemented properties an initial value, you have to do it in a constructor.</source>
          <target state="translated">C#5以前のC#では、自動実装されたプロパティに初期値を与えるには、コンストラクタで行う必要があります。</target>
        </trans-unit>
        <trans-unit id="66210d0d26b5f4286f5559b26b20d16dcd2e307b" translate="yes" xml:space="preserve">
          <source>In C# 6 and above you can simply use the syntax:</source>
          <target state="translated">C#6以上では、単純に構文を使うことができます。</target>
        </trans-unit>
        <trans-unit id="7101bf65be0d5524bb0ea25e418d4e3d845db035" translate="yes" xml:space="preserve">
          <source>In C# 6.0 this is a breeze!</source>
          <target state="translated">C#6.0では、これが楽勝です。</target>
        </trans-unit>
        <trans-unit id="b5d68322ad4675fc0f70d7107c9320d74b1ea8de" translate="yes" xml:space="preserve">
          <source>In Version of &lt;em&gt;C# (6.0) &amp;amp; greater&lt;/em&gt;, you can do :</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃（6.0）以降の&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バージョンでは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、次のことができます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="60401e067e3786ee3e16d62f9950ef4f7ed81104" translate="yes" xml:space="preserve">
          <source>In addition to the answer already accepted, for the scenario when you want to define a default property as a &lt;em&gt;function&lt;/em&gt; of other properties you can use &lt;strong&gt;&lt;em&gt;expression body notation&lt;/em&gt;&lt;/strong&gt; on C#6.0 (and higher) for even more elegant and concise constructs like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;既に受け入れられている答えに加えて、デフォルトのプロパティ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を他のプロパティの&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として定義するシナリオでは、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃6.0（およびそれ以上）で&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;式本体表記&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;して、次のようなよりエレガントで簡潔な構造を作成できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5cd6d774f5a030e671b23830fab91011d48ee807" translate="yes" xml:space="preserve">
          <source>In current Version of &lt;em&gt;C# (7.0)&lt;/em&gt;, you can do : (The snippet rather displays how you can use expression bodied get/set accessors to make is more compact when using with backing fields)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;現在のバージョンの&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃（7.0）&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では、次のことを実行できます（スニペットでは、バッキングフィールドを使用する場合に、式のボディを持つget / setアクセサーを使用してよりコンパクトにする方法が表示されます）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="794fb949df187b39811af6d7644259ba7e4660c7" translate="yes" xml:space="preserve">
          <source>In order to be able to use the above &quot;=&amp;gt;&quot; notation, the property must be read only, and you do not use the get accessor keyword.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記の「=&amp;gt;」表記を使用できるようにするには、プロパティを読み取り専用にする必要があり、getアクセサキーワードを使用しません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d54a7be1c5622cb4ea0a8043a79e2217d9ebf59" translate="yes" xml:space="preserve">
          <source>In the constructor.  The constructor's purpose is to initialized it's data members.</source>
          <target state="translated">コンストラクタで コンストラクタの目的は、そのデータメンバーを初期化することです。</target>
        </trans-unit>
        <trans-unit id="ba65ad098f85ce8e0fcd83fdc5b9cf9c3fab4426" translate="yes" xml:space="preserve">
          <source>Is there a better way?</source>
          <target state="translated">もっと良い方法はないのか?</target>
        </trans-unit>
        <trans-unit id="11a986f617d07e6dbee601ec64a3f0b8c88b33ad" translate="yes" xml:space="preserve">
          <source>My solution is to use a custom attribute that provides default value property initialization by constant or using property type initializer.</source>
          <target state="translated">私の解決策は、定数によるデフォルト値のプロパティの初期化を提供するカスタム属性を使用するか、プロパティタイプのイニシャライザを使用することです。</target>
        </trans-unit>
        <trans-unit id="8d717461faef04d94163ab001c93419cd0902fef" translate="yes" xml:space="preserve">
          <source>Note that to have a &lt;code&gt;readonly&lt;/code&gt; property simply omit the set, as so:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次のように、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;readonly&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティを設定するには、セットを省略し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="45f49c79ea5cc5e16b0d4619b13d5c736cdd7f8e" translate="yes" xml:space="preserve">
          <source>Obviously if it's not a string then I might make the object nullable ( double?, int? ) and check if it's null, return a default, or return the value it's set to.</source>
          <target state="translated">明らかに文字列でない場合は、オブジェクトをnullable (double? int?)にして、nullかどうかをチェックし、デフォルトを返すか、設定されている値を返すことになります。</target>
        </trans-unit>
        <trans-unit id="467b26f52af02e8a2806378b66e8797a53065fab" translate="yes" xml:space="preserve">
          <source>One other option is to do what ASP.Net does and define defaults via an attribute:</source>
          <target state="translated">もう一つの選択肢は、ASP.Netと同じように、属性を使ってデフォルトを定義することです。</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="b3a5cb824ff9aadde5b30af03d3dbb2b5f994af4" translate="yes" xml:space="preserve">
          <source>Personally, I don't see the point of making it a property at all if you're not going to do  anything at all beyond the auto-property.  Just leave it as a field.  The encapsulation benefit for these item are just red herrings, because there's nothing behind them to encapsulate.  If you ever need to change the underlying implementation you're still free to refactor them as properties without breaking any dependent code.</source>
          <target state="translated">個人的には、オートプロパティ以上のことを全くしないのであれば、プロパティにする意味は全くないと思います。フィールドとして残しておけばいいだけです。これらの項目のカプセル化の恩恵は、カプセル化するための背後には何もないので、ただのレッドヘリングに過ぎません。もし基本的な実装を変更する必要があっても、依存するコードを壊すことなくプロパティとしてリファクタリングすることができます。</target>
        </trans-unit>
        <trans-unit id="ceb09e6d8bf290034dd33caa29f2f4530d4bcf27" translate="yes" xml:space="preserve">
          <source>Prior to this I responded as below.</source>
          <target state="translated">これに先立ち、私は以下のように回答しました。</target>
        </trans-unit>
        <trans-unit id="930b3b23cff0eb68b2882853b258c5a52353c09b" translate="yes" xml:space="preserve">
          <source>See: &lt;a href=&quot;http://blogs.msmvps.com/jonskeet/2014/04/04/c-6-first-reactions/&quot;&gt;C# 6: First reactions , Initializers for automatically implemented properties - By Jon Skeet&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照：&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.msmvps.com/jonskeet/2014/04/04/c-6-first-reactions/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃6：最初の反応、自動的に実装されるプロパティの初期化子-Jon Skeet&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ae9966c7d7daf8ce67ffe3300908a118efbb770e" translate="yes" xml:space="preserve">
          <source>Since C# 6.0, you can specify initial value in-line. The syntax is:</source>
          <target state="translated">C#6.0からはインラインで初期値を指定できるようになりました。構文は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="7e43a357d3a0c38b1a995cd068429d833232155f" translate="yes" xml:space="preserve">
          <source>Sometimes I use this, if I don't want it to be actually set and persisted in my db:</source>
          <target state="translated">実際に設定されていて、自分のdbに保持されていることを望まない場合には、これを使うこともあります。</target>
        </trans-unit>
        <trans-unit id="20fc53e44f54098334182398215f384c4ffc06da" translate="yes" xml:space="preserve">
          <source>The point here is that the instance variable drawn from the base class may bury your base field name.  Setting the current instantiated object value using &quot;this.&quot; will allow you to correctly form your object with respect to the current instance and required permission levels (access modifiers) where you are instantiating it.</source>
          <target state="translated">ここでのポイントは、ベースクラスから引き出されたインスタンス変数が、あなたのベースフィールド名を埋める可能性があるということです。&quot;this.&quot;を使って現在のインスタンス化されたオブジェクトの値を設定することで、現在のインスタンスと、インスタンス化している場所に必要なパーミッションレベル(アクセス修飾子)を基準にして、正しくオブジェクトを形成することができます。</target>
        </trans-unit>
        <trans-unit id="b85aa3eee23d0718bceae9396501c0c468d1fbef" translate="yes" xml:space="preserve">
          <source>Then I can make a check in my repository to see if it's my default and not persist, or make a backdoor check in to see the true status of the backing value, before saving.</source>
          <target state="translated">そうすれば、リポジトリにチェックを入れて、それが自分のデフォルトで永続化されていないかどうかを確認したり、保存する前にバックドアチェックを入れて、バック値の真の状態を確認したりすることができます。</target>
        </trans-unit>
        <trans-unit id="51d0c44fe22f09c90e085c9e3757dd10e83ef1de" translate="yes" xml:space="preserve">
          <source>Though the intended use of the attribute is not to actually set the values of the properties, you can use reflection to always set them anyway...</source>
          <target state="translated">属性の使用目的は、実際にプロパティの値を設定することではありませんが、反射を使用して常にプロパティを設定することができます。</target>
        </trans-unit>
        <trans-unit id="d057a1a916d855d00d2f4f9dbf3b8e67e04d7ff6" translate="yes" xml:space="preserve">
          <source>To clarify, yes, you need to set default values in the constructor for class derived objects.  You will need to ensure the constructor exists with the proper access modifier for construction where used.  If the object is not instantiated, e.g. it has no constructor (e.g. static methods) then the default value can be set by the field.  The reasoning here is that the object itself will be created only once and you do not instantiate it.</source>
          <target state="translated">明確にするためには、クラス派生オブジェクトのコンストラクタでデフォルト値を設定する必要があります。コンストラクタを使用する場合は、適切なアクセス修飾子を使用してコンストラクタが存在することを確認する必要があります。オブジェクトがインスタンス化されていない場合、例えばコンストラクタを持たない場合 (静的メソッドなど)、デフォルト値はフィールドで設定することができます。ここでの理由は、オブジェクト自体は一度だけ作成され、インスタンス化されないからです。</target>
        </trans-unit>
        <trans-unit id="6dcc6663115112d3b2ea940d2425b20386b0f4dc" translate="yes" xml:space="preserve">
          <source>To use this attribute it's necessary to inherit a class from special base class-initializer or use a static helper method:</source>
          <target state="translated">この属性を使用するには、特別な基底クラスイニシャライザからクラスを継承するか、静的ヘルパーメソッドを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="fec43ce445f974147bd0eb223a50147e7fb7202d" translate="yes" xml:space="preserve">
          <source>Usage example:</source>
          <target state="translated">使用例。</target>
        </trans-unit>
        <trans-unit id="324d1df68a2a46d27e8d85317d55003c4831e2cf" translate="yes" xml:space="preserve">
          <source>Use the constructor because &quot;When the constructor is finished, Construction should be finished&quot;. properties are like states your classes hold, if you had to initialize a default state, you would do that in your constructor.</source>
          <target state="translated">コンストラクタを使うのは、「コンストラクタが終了したら、コンストラクタは終了しているはず」だからです。</target>
        </trans-unit>
        <trans-unit id="8a7394bd66ec0dce7553b773603f227220dada72" translate="yes" xml:space="preserve">
          <source>We can also create read-only auto implemented property like:</source>
          <target state="translated">のような読み取り専用の自動実装プロパティを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="2a081ef4ca8b1b23e21bbb4bca004ca4172051c0" translate="yes" xml:space="preserve">
          <source>What is the best way to give a C# auto-property an initial value</source>
          <target state="translated">C#のオートプロパティに初期値を与える最良の方法は何ですか?</target>
        </trans-unit>
        <trans-unit id="29a9336308d4fedeca1f9c87d1abe7a51487dbc0" translate="yes" xml:space="preserve">
          <source>When you inline an initial value for a variable it will be done implicitly in the constructor anyway.</source>
          <target state="translated">変数の初期値をインライン化すると、いずれにせよコンストラクタで暗黙のうちに行われます。</target>
        </trans-unit>
        <trans-unit id="85fba9a98cbb523590e8691a9c6900b1aa9233bb" translate="yes" xml:space="preserve">
          <source>With C# 6 you can initialize auto-properties directly (finally!), there are now other answers in the thread that describe that.</source>
          <target state="translated">C#6では、オートプロパティを直接初期化することができます(ついに!)、今ではそのことを説明するスレッドに他の回答があります。</target>
        </trans-unit>
        <trans-unit id="450c27608618b95b7f54a7e888cad79a09a79fbb" translate="yes" xml:space="preserve">
          <source>You can also assign &lt;code&gt;readonly&lt;/code&gt; auto-properties from the constructor.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンストラクタから&lt;/font&gt;&lt;/font&gt; &lt;code&gt;readonly&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;自動プロパティを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;割り当てることもでき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="43ef8484820fc9fd0489207cfa17de705c94f53c" translate="yes" xml:space="preserve">
          <source>You can do it in the &lt;code&gt;Class&lt;/code&gt; declaration itself, in the property declaration statements.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;宣言自体、プロパティ宣言ステートメントで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;行うことができます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f6b49685c242a4eaa3cdb8af7ed7923149df4ae6" translate="yes" xml:space="preserve">
          <source>You can use the above in the following fashion</source>
          <target state="translated">上記のような使い方ができます。</target>
        </trans-unit>
        <trans-unit id="6335bceb1baad72e8a610cc0144ed8bef27a988d" translate="yes" xml:space="preserve">
          <source>little complete sample:</source>
          <target state="translated">少し完全なサンプル。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
