<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/409784">
    <body>
      <group id="409784">
        <trans-unit id="c7d3bb79fa4082e57682c1c571d2145c51fe9871" translate="yes" xml:space="preserve">
          <source>(This works in 1.5+ too, of course.)</source>
          <target state="translated">当然,这在1.5+中也可以使用)。</target>
        </trans-unit>
        <trans-unit id="519889b776c0c7ac9977984aaef5700240cf769c" translate="yes" xml:space="preserve">
          <source>--since I was concentrating on the type of myarray to see how to do this. I didn't want to have to iterate through the thing: I wanted an easy call to make it come out similar to what I see in the Eclipse debugger and myarray.toString() just wasn't doing it.</source>
          <target state="translated">--因为我当时正专注于myarray的类型,想看看怎么做。我不希望迭代这个东西:我希望有一个简单的调用,让它像Eclipse调试器中看到的那样,简单的调用出来,而myarray.toString()并没有做到这一点。</target>
        </trans-unit>
        <trans-unit id="356a192b7913b04c54574d18c28d46e6395428ab" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>
        </trans-unit>
        <trans-unit id="17ba0791499db908433b80f37c5fbc89b870084b" translate="yes" xml:space="preserve">
          <source>11</source>
          <target state="translated">11</target>
        </trans-unit>
        <trans-unit id="7b52009b64fd0a2a49e6d8a939753077792b0554" translate="yes" xml:space="preserve">
          <source>12</source>
          <target state="translated">12</target>
        </trans-unit>
        <trans-unit id="da4b9237bacccdf19c0760cab7aec4a8359010b0" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>
        </trans-unit>
        <trans-unit id="472b07b9fcf2c2451e8781e944bf5f77cd8457c8" translate="yes" xml:space="preserve">
          <source>21</source>
          <target state="translated">21</target>
        </trans-unit>
        <trans-unit id="12c6fc06c99a462375eeb3f43dfd832b08ca9e17" translate="yes" xml:space="preserve">
          <source>22</source>
          <target state="translated">22</target>
        </trans-unit>
        <trans-unit id="77de68daecd823babbb58edb1c8e14d7106e83bb" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>
        </trans-unit>
        <trans-unit id="632667547e7cd3e0466547863e1207a8c0c0c549" translate="yes" xml:space="preserve">
          <source>31</source>
          <target state="translated">31</target>
        </trans-unit>
        <trans-unit id="cb4e5208b4cd87268b208e49452ed6e89a68e0b8" translate="yes" xml:space="preserve">
          <source>32</source>
          <target state="translated">32</target>
        </trans-unit>
        <trans-unit id="b6692ea5df920cad691c20319a6fffd7a4a766b8" translate="yes" xml:space="preserve">
          <source>33</source>
          <target state="translated">33</target>
        </trans-unit>
        <trans-unit id="1b6453892473a467d07372d45eb05abc2031647a" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>
        </trans-unit>
        <trans-unit id="ac3478d69a3c81fa62e60f5c3696165a4e5e6ac4" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="translated">5</target>
        </trans-unit>
        <trans-unit id="ba5fb66b44e0063c2d30845cb56a3b6be43941de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt; only prints on one line.</source>
          <target state="translated">&lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt; 仅打印一行。</target>
        </trans-unit>
        <trans-unit id="112df8b383b1ff6cc4f1623f84e479c15101de11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;double&lt;/code&gt; Array:</source>
          <target state="translated">&lt;code&gt;double&lt;/code&gt; 数组：</target>
        </trans-unit>
        <trans-unit id="6826eaf5d4ef1999fe6732634c42a3aed642b46c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int&lt;/code&gt; Array:</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 数组：</target>
        </trans-unit>
        <trans-unit id="35d0df4889e03258ecf157668bfbdc2a439e0db2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Different Ways to Print Arrays in Java:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;用Java打印数组的不同方法：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9241faeabb4276c314c2c17fa3b23f2618cf82e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Please note, this is not a permanent fix by any means. Just a hack that can make debugging simpler.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;请注意，无论如何，这不是永久性解决方案。&lt;/strong&gt; &lt;strong&gt;只是一种可以使调试更简单的技巧。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a582b40fdede388a197945e40cfe5c749611ae7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Printing Multi-dimensional Array&lt;/strong&gt;
Just in case we want to print multi-dimensional array we can use &lt;code&gt;Arrays.deepToString(array)&lt;/code&gt; as:</source>
          <target state="translated">&lt;strong&gt;打印多维数组&lt;/strong&gt;以防万一我们要打印多维数组，可以使用 &lt;code&gt;Arrays.deepToString(array)&lt;/code&gt; 作为：</target>
        </trans-unit>
        <trans-unit id="b97688b7ca98b614ae426213943b44d8b8935e93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Printing One dimensional Array:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;打印一维数组：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0ef4704ecf8d0a452f55c0f808fc6caeec82031c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;There Are Following way to print Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;有以下方式打印数组&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d716572b2f64fbb13750ad581a162fb23061b0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;更新：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b8f79fcd0e5a3c01e25ecddae14aac1086989f9" translate="yes" xml:space="preserve">
          <source>A simplified shortcut I've tried is this:</source>
          <target state="translated">我尝试过的一个简化的快捷方式是这样的。</target>
        </trans-unit>
        <trans-unit id="21c9fe1515f035c1cc921a6968c28f37871d2b85" translate="yes" xml:space="preserve">
          <source>Always check the standard libraries first.  Try:</source>
          <target state="translated">一定要先检查标准库。试试。</target>
        </trans-unit>
        <trans-unit id="1717ee58b3b576d7c7e821380e5ff80b5c61039d" translate="yes" xml:space="preserve">
          <source>Another way without method reference just use:</source>
          <target state="translated">另一种方法不用方法参考,只需使用。</target>
        </trans-unit>
        <trans-unit id="d2c42bd55bea87023525655b158258a11e88deb4" translate="yes" xml:space="preserve">
          <source>Arrays.toString</source>
          <target state="translated">Arrays.toString</target>
        </trans-unit>
        <trans-unit id="517858f0582a429624d59b97393978403548bad2" translate="yes" xml:space="preserve">
          <source>As a direct answer, &lt;a href=&quot;https://www.google.com/search?client=safari&amp;amp;rls=en&amp;amp;q=html+jump+to+anchor&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&quot;&gt;the solution provided by several, including @Esko&lt;/a&gt;, using the &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#toString%28java.lang.Object[]%29&quot;&gt;&lt;code&gt;Arrays.toString&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#deepToString%28java.lang.Object[]%29&quot;&gt;&lt;code&gt;Arrays.deepToString&lt;/code&gt;&lt;/a&gt; methods, is simply the best.</source>
          <target state="translated">作为直接答案， &lt;a href=&quot;https://www.google.com/search?client=safari&amp;amp;rls=en&amp;amp;q=html+jump+to+anchor&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&quot;&gt;包括@Esko在内的多个公司&lt;/a&gt;使用&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#toString%28java.lang.Object[]%29&quot;&gt; &lt;code&gt;Arrays.toString&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#deepToString%28java.lang.Object[]%29&quot;&gt; &lt;code&gt;Arrays.deepToString&lt;/code&gt; &lt;/a&gt;方法提供的解决方案就是最好的。</target>
        </trans-unit>
        <trans-unit id="ba696b856a4f3b4099b93759f7d7dd86a712709e" translate="yes" xml:space="preserve">
          <source>At the same time , Using two for loops ,2D elements can be printed..Thank you !</source>
          <target state="translated">同时,使用两个for循环,可以打印出2D元素。</target>
        </trans-unit>
        <trans-unit id="ba3771197a0b88f3155b21607ef43985a6e45402" translate="yes" xml:space="preserve">
          <source>Below I try to list some of the other methods suggested, attempting to improve a little, with the most notable addition being the use of the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#collect-java.util.stream.Collector-&quot;&gt;&lt;code&gt;Stream.collect&lt;/code&gt;&lt;/a&gt; operator, using a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#joining-java.lang.CharSequence-&quot;&gt;&lt;code&gt;joining&lt;/code&gt;&lt;/a&gt;&lt;code&gt;Collector&lt;/code&gt;, to mimic what the &lt;code&gt;String.join&lt;/code&gt; is doing.</source>
          <target state="translated">下面，我尝试列出一些建议的其他方法，尝试进行一些改进，最值得注意的是使用&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#collect-java.util.stream.Collector-&quot;&gt; &lt;code&gt;Stream.collect&lt;/code&gt; &lt;/a&gt;运算符，并使用Joinor来模仿 &lt;code&gt;String.join&lt;/code&gt; 的功能。</target>
        </trans-unit>
        <trans-unit id="da6645f6e22bf5f75974dc7eed5fcd6160d6b51e" translate="yes" xml:space="preserve">
          <source>Bob</source>
          <target state="translated">Bob</target>
        </trans-unit>
        <trans-unit id="f8b83dde53d52771dda7582ed1b5f5928dec9b2f" translate="yes" xml:space="preserve">
          <source>Bravo</source>
          <target state="translated">Bravo</target>
        </trans-unit>
        <trans-unit id="7f7f7bbfc8b9ba064837294db5b7f6a352b078f7" translate="yes" xml:space="preserve">
          <source>But usually, we'd actually want something more like &lt;code&gt;[1, 2, 3, 4, 5]&lt;/code&gt;. What's the simplest way of doing that? Here are some example inputs and outputs:</source>
          <target state="translated">但是通常情况下，我们实际上更想要 &lt;code&gt;[1, 2, 3, 4, 5]&lt;/code&gt; 。 最简单的方法是什么？ 以下是一些示例输入和输出：</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="b347e75184a62e0c87de3c3ea43ab302ac2b8d6e" translate="yes" xml:space="preserve">
          <source>For-each loop can also be used to print elements of array:</source>
          <target state="translated">For-each循环也可以用来打印数组的元素。</target>
        </trans-unit>
        <trans-unit id="2e722736b8d4d15687c1f2bf022a1a4a6c2feaa2" translate="yes" xml:space="preserve">
          <source>I came across this post in &lt;a href=&quot;http://vanillajava.blogspot.com/2016/03/printing-arrays-by-hacking-jvm.html&quot;&gt;Vanilla #Java&lt;/a&gt; recently. It's not very convenient writing &lt;code&gt;Arrays.toString(arr);&lt;/code&gt;, then importing &lt;code&gt;java.util.Arrays;&lt;/code&gt; all the time.</source>
          <target state="translated">我最近在&lt;a href=&quot;http://vanillajava.blogspot.com/2016/03/printing-arrays-by-hacking-jvm.html&quot;&gt;Vanilla #Java上&lt;/a&gt;遇到了这篇文章。 编写 &lt;code&gt;Arrays.toString(arr);&lt;/code&gt; 不是很方便； ，然后导入 &lt;code&gt;java.util.Arrays;&lt;/code&gt; 。 每时每刻。</target>
        </trans-unit>
        <trans-unit id="4787db0357545dba8df8207125b5b0028a8907b6" translate="yes" xml:space="preserve">
          <source>I found this to be a quite useful hack and it would be great if Java could simply add this. I understand potential issues with having very large arrays since the string representations could be problematic. Maybe pass something like a &lt;code&gt;System.out&lt;/code&gt;or a &lt;code&gt;PrintWriter&lt;/code&gt; for such eventualities.</source>
          <target state="translated">我发现这是一个非常有用的技巧，如果Java可以简单地添加它，那就太好了。 我理解具有非常大的数组的潜在问题，因为字符串表示形式可能会出现问题。 可能会传递诸如 &lt;code&gt;System.out&lt;/code&gt; 或 &lt;code&gt;PrintWriter&lt;/code&gt; 之类的信息来处理此类事件。</target>
        </trans-unit>
        <trans-unit id="a119c9847c6580b4ea7713935efb4bfa23869fd7" translate="yes" xml:space="preserve">
          <source>I used the following dependency</source>
          <target state="translated">我使用了以下的依赖关系</target>
        </trans-unit>
        <trans-unit id="f6e3cfabb1c0053d6d70e55c729646b1690d2c41" translate="yes" xml:space="preserve">
          <source>If using &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/&quot;&gt;Commons.Lang library&lt;/a&gt;, we could do:</source>
          <target state="translated">如果使用&lt;a href=&quot;https://commons.apache.org/proper/commons-lang/&quot;&gt;Commons.Lang库&lt;/a&gt; ，我们可以这样做：</target>
        </trans-unit>
        <trans-unit id="b589ce72f57aa25a43f4ff08ca92dd48e13fba65" translate="yes" xml:space="preserve">
          <source>If you want to print all elements in the array in the same line, then just use &lt;code&gt;print&lt;/code&gt; instead of &lt;code&gt;println&lt;/code&gt; i.e.</source>
          <target state="translated">如果要在同一行中 &lt;code&gt;print&lt;/code&gt; 数组中的所有元素，则只需使用print而不是 &lt;code&gt;println&lt;/code&gt; 即</target>
        </trans-unit>
        <trans-unit id="a1a78b3ea66f093234172ac080069ccd29d4af13" translate="yes" xml:space="preserve">
          <source>If you want to print, evaluate Array content like that you can use &lt;code&gt;Arrays.toString&lt;/code&gt;</source>
          <target state="translated">如果要打印，请评估数组内容，就像可以使用 &lt;code&gt;Arrays.toString&lt;/code&gt; 一样。</target>
        </trans-unit>
        <trans-unit id="11c3ad955eba6ebc9eebe8353e2e3f699831f45d" translate="yes" xml:space="preserve">
          <source>If you're using Java 1.4, you can instead do:</source>
          <target state="translated">如果你使用的是Java 1.4,你可以用它来代替。</target>
        </trans-unit>
        <trans-unit id="07bc7192befcc026e21876d327eef75a6926f493" translate="yes" xml:space="preserve">
          <source>In JDK1.8 you can use aggregate operations and a lambda expression:</source>
          <target state="translated">在JDK1.8中,你可以使用聚合操作和lambda表达式。</target>
        </trans-unit>
        <trans-unit id="4e18704a5e78b8fdf6de5af59ef4a97a2d1e173f" translate="yes" xml:space="preserve">
          <source>In Java, arrays don't override &lt;code&gt;toString()&lt;/code&gt;, so if you try to print one directly, you get the &lt;code&gt;className&lt;/code&gt; + '@' + the hex of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_hashCode()&quot;&gt;&lt;code&gt;hashCode&lt;/code&gt;&lt;/a&gt; of the array, as defined by &lt;code&gt;Object.toString()&lt;/code&gt;:</source>
          <target state="translated">在Java中，数组不会覆盖 &lt;code&gt;toString()&lt;/code&gt; ，因此，如果尝试直接打印一个，则将得到 &lt;code&gt;className&lt;/code&gt; +'@'+数组的&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_hashCode()&quot;&gt; &lt;code&gt;hashCode&lt;/code&gt; &lt;/a&gt;的十六进制，如 &lt;code&gt;Object.toString()&lt;/code&gt; 所定义：</target>
        </trans-unit>
        <trans-unit id="2790e4d06f9911fdd0f86768ea2a68af1dd023a0" translate="yes" xml:space="preserve">
          <source>In java 8 :</source>
          <target state="translated">在java 8中。</target>
        </trans-unit>
        <trans-unit id="4ff5ec2da1b8e1b73e9710ebc28f583245bbc7f5" translate="yes" xml:space="preserve">
          <source>In java 8 it is easy. there are two keywords</source>
          <target state="translated">在java 8中很简单,有两个关键词</target>
        </trans-unit>
        <trans-unit id="bd8ac2f5b326be16d1215abbd52cd4d8b6f174c6" translate="yes" xml:space="preserve">
          <source>It gives output as yours
    1, 2, 3, 4, 5</source>
          <target state="translated">它的输出是你的1、2、3、4、5。</target>
        </trans-unit>
        <trans-unit id="d319cdeaf2df60f2a6391c09005e558c8d9f9907" translate="yes" xml:space="preserve">
          <source>It seems like the &lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt; method should take a separator string, but unfortunately it doesn't.</source>
          <target state="translated">似乎 &lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt; 方法应该使用分隔符字符串，但不幸的是，它没有。</target>
        </trans-unit>
        <trans-unit id="c662295fc37155af3fc61c22d1ac1ae13a41b9a8" translate="yes" xml:space="preserve">
          <source>It should always work whichever JDK version you use:</source>
          <target state="translated">无论你使用的是哪个版本的JDK,它应该总是可以工作的。</target>
        </trans-unit>
        <trans-unit id="68c0ba97282d2cfb631e09b1c1cf4d6fc75e1ed3" translate="yes" xml:space="preserve">
          <source>It will print</source>
          <target state="translated">它将打印</target>
        </trans-unit>
        <trans-unit id="d23c2e36ea28640bb106420d052479e3ebbca2bc" translate="yes" xml:space="preserve">
          <source>It will work if the &lt;code&gt;Array&lt;/code&gt; contains Objects. If the &lt;code&gt;Array&lt;/code&gt; contains primitive types, you can use wrapper classes instead storing the primitive directly as..</source>
          <target state="translated">如果 &lt;code&gt;Array&lt;/code&gt; 包含对象，它将起作用。 如果 &lt;code&gt;Array&lt;/code&gt; 包含基本类型，则可以使用包装器类，而不是直接将基本存储为.。</target>
        </trans-unit>
        <trans-unit id="c287a1bbff0a047aa1cc86cd23da90c9abec2a7c" translate="yes" xml:space="preserve">
          <source>Java 8</source>
          <target state="translated">Java 8</target>
        </trans-unit>
        <trans-unit id="b25e132b536a1f41f4e4b527a70dbdf951e3d944" translate="yes" xml:space="preserve">
          <source>Java 8 - Stream.collect(joining()), Stream.forEach</source>
          <target state="translated">Java 8-Stream.collect(joining()),Stream.forEach</target>
        </trans-unit>
        <trans-unit id="5753a498f025464d72e088a9d5d6e872592d5f91" translate="yes" xml:space="preserve">
          <source>John</source>
          <target state="translated">John</target>
        </trans-unit>
        <trans-unit id="9b616394a7d221a125aba2abf2a86be0466505d9" translate="yes" xml:space="preserve">
          <source>Johnson</source>
          <target state="translated">Johnson</target>
        </trans-unit>
        <trans-unit id="4beb46d36a8d0d77bfa696083bfeab4b6ee156d4" translate="yes" xml:space="preserve">
          <source>Lee</source>
          <target state="translated">Lee</target>
        </trans-unit>
        <trans-unit id="94f85995c7492eec546c321821aa4beca9a3e2b1" translate="yes" xml:space="preserve">
          <source>Mary</source>
          <target state="translated">Mary</target>
        </trans-unit>
        <trans-unit id="c1f66004c365e345d8d378e6ca38a458fda42d50" translate="yes" xml:space="preserve">
          <source>Nested Array:</source>
          <target state="translated">嵌套阵列。</target>
        </trans-unit>
        <trans-unit id="3c0b65ceb1f454f14ae61f054010ba3a559cd546" translate="yes" xml:space="preserve">
          <source>No loops required in this approach and it is best for small arrays only</source>
          <target state="translated">这种方法不需要循环,只适用于小数组。</target>
        </trans-unit>
        <trans-unit id="687892b18a7d1eb11494bb8705e411c1b3c05ff6" translate="yes" xml:space="preserve">
          <source>Now look at the output,</source>
          <target state="translated">现在再看一下输出。</target>
        </trans-unit>
        <trans-unit id="597be0e35e54ff0205dab0fee148dd4a3ac0d2f5" translate="yes" xml:space="preserve">
          <source>Now the point to observe is that the method &lt;code&gt;Arrays.stream(T[])&lt;/code&gt;, which in case of &lt;code&gt;int[]&lt;/code&gt; returns us &lt;code&gt;Stream&amp;lt;int[]&amp;gt;&lt;/code&gt; and then method &lt;code&gt;flatMapToInt()&lt;/code&gt; maps each element of stream with the contents of a mapped stream produced by applying the provided mapping function to each element.</source>
          <target state="translated">现在需要观察的是方法 &lt;code&gt;Arrays.stream(T[])&lt;/code&gt; ，在 &lt;code&gt;int[]&lt;/code&gt; 情况下返回 &lt;code&gt;Stream&amp;lt;int[]&amp;gt;&lt;/code&gt; ，然后 &lt;code&gt;flatMapToInt()&lt;/code&gt; 方法将流的每个元素与已映射的内容进行映射通过将提供的映射功能应用于每个元素而产生的流。</target>
        </trans-unit>
        <trans-unit id="8b4a23b8c7bd9b3e4547be1de44372e859eaddbb" translate="yes" xml:space="preserve">
          <source>Now we have got the option of &lt;code&gt;Stream&lt;/code&gt; and &lt;code&gt;lambda&lt;/code&gt; to print the array.</source>
          <target state="translated">现在我们有了 &lt;code&gt;Stream&lt;/code&gt; 和 &lt;code&gt;lambda&lt;/code&gt; 的选项来打印数组。</target>
        </trans-unit>
        <trans-unit id="e2c6d8d8ac3b49337bb23a4956a7a6ebc76ae471" translate="yes" xml:space="preserve">
          <source>Now, with the availability of &lt;code&gt;deepToString(..)&lt;/code&gt; since Java 5, the &lt;code&gt;toString(..)&lt;/code&gt; can easily be changed to &lt;code&gt;deepToString(..)&lt;/code&gt; to add support for arrays that contain other arrays.</source>
          <target state="translated">现在，自Java 5开始使用 &lt;code&gt;deepToString(..)&lt;/code&gt; ， &lt;code&gt;toString(..)&lt;/code&gt; 可以轻松更改为 &lt;code&gt;deepToString(..)&lt;/code&gt; ,以增加对包含其他数组的数组的支持。</target>
        </trans-unit>
        <trans-unit id="70bc6f21044b66c617660a7782f6d24733f982f4" translate="yes" xml:space="preserve">
          <source>Ok, I'll create an array like this,</source>
          <target state="translated">好吧,我会创建一个像这样的数组。</target>
        </trans-unit>
        <trans-unit id="0f02e8aab8d519daf8e2e623848e44ca43888070" translate="yes" xml:space="preserve">
          <source>Ok,Successfully printed elements of one dimension  array..Now I am going to consider two dimension array..I'll declare two dimension array as &quot;number2&quot; and print the elements using &quot;Arrays.deepToString()&quot; keyword.Before using that You will have to import 'java.util.Arrays' library.</source>
          <target state="translated">好了,成功地打印了一维数组的元素,现在我要考虑二维数组,我将声明二维数组为 &quot;number2&quot;,并使用 &quot;Arrays.deepToString()&quot;关键字打印元素。</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="824ad0fb86f6007a2f70521bd5894b51d8acf93e" translate="yes" xml:space="preserve">
          <source>Output:
      [One, Two, Three, Four]</source>
          <target state="translated">输出:[一、二、三、四][一、二、三、四]</target>
        </trans-unit>
        <trans-unit id="f27c2ad0a1d24168345a5dd873ca769ece5bb794" translate="yes" xml:space="preserve">
          <source>Output: [[Ljava.lang.String;@1ad086a [[Ljava.lang.String;@10385c1,
  [Ljava.lang.String;@42719c] [[Fifth, Sixth], [Seventh, Eighth]]</source>
          <target state="translated">输出。[[[[Ljava.lang.String;@1ad086a][[[Ljava.lang.String;@10385c1,[Ljava.lang.String;@42719c][[[第五、六]、[第七、八]]</target>
        </trans-unit>
        <trans-unit id="6c2ea13dbe48ff9ca1112cfa24befc8d436781ca" translate="yes" xml:space="preserve">
          <source>Printing Array of Arrays</source>
          <target state="translated">打印阵列的阵列</target>
        </trans-unit>
        <trans-unit id="c099ece4a9cff9afbf4e6b1317b5161a62c105e9" translate="yes" xml:space="preserve">
          <source>Printing an array directly gives the internal representation and the hashCode. Now, all classes have &lt;code&gt;Object&lt;/code&gt; as the parent-type. So, why not hack the &lt;code&gt;Object.toString()&lt;/code&gt;? Without modification, the Object class looks like this:</source>
          <target state="translated">直接打印数组会给出内部表示形式和hashCode。 现在，所有类都将 &lt;code&gt;Object&lt;/code&gt; 作为父类型。 那么，为什么不破解 &lt;code&gt;Object.toString()&lt;/code&gt; 呢？ 未经修改，Object类如下所示：</target>
        </trans-unit>
        <trans-unit id="6254c5e5127a2f5f7703cf8c8ee57b1f794206d3" translate="yes" xml:space="preserve">
          <source>Prior to Java 8</source>
          <target state="translated">在Java 8之前</target>
        </trans-unit>
        <trans-unit id="96e3b26e9e57d3d91145d7e033c84d8f1c6b266b" translate="yes" xml:space="preserve">
          <source>Replace it with:</source>
          <target state="translated">替换为:</target>
        </trans-unit>
        <trans-unit id="2f878fbd9984022cb9ba452f49ad29031f620135" translate="yes" xml:space="preserve">
          <source>Resource: &lt;a href=&quot;http://howtodoinjava.com/core-java/collections/how-to-print-the-content-of-array-in-java/&quot;&gt;Access An Array&lt;/a&gt;</source>
          <target state="translated">资源： &lt;a href=&quot;http://howtodoinjava.com/core-java/collections/how-to-print-the-content-of-array-in-java/&quot;&gt;访问数组&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9b44386cf4328b7daa745585ee2cac35c4013d68" translate="yes" xml:space="preserve">
          <source>Simple Array:</source>
          <target state="translated">简单的阵列。</target>
        </trans-unit>
        <trans-unit id="7041ff941a75e3c0465e616f5c947900678abe9d" translate="yes" xml:space="preserve">
          <source>Simple Way</source>
          <target state="translated">简单的方法</target>
        </trans-unit>
        <trans-unit id="a034f47aed35d1d6fabce1fbdc829f45ed62f90f" translate="yes" xml:space="preserve">
          <source>Since Java 5 you can use &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html#toString-int:A-&quot;&gt;&lt;code&gt;Arrays.toString(arr)&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html#deepToString-java.lang.Object:A-&quot;&gt;&lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt;&lt;/a&gt; for arrays within arrays. Note that the &lt;code&gt;Object[]&lt;/code&gt; version calls &lt;code&gt;.toString()&lt;/code&gt; on each object in the array. The output is even decorated in the exact way you're asking.</source>
          <target state="translated">从Java 5开始，您可以将&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html#toString-int:A-&quot;&gt; &lt;code&gt;Arrays.toString(arr)&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html#deepToString-java.lang.Object:A-&quot;&gt; &lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt; &lt;/a&gt;用于数组中的数组。 请注意， &lt;code&gt;Object[]&lt;/code&gt; 版本在数组中的每个对象上调用 &lt;code&gt;.toString()&lt;/code&gt; 。 输出甚至按照您的要求进行修饰。</target>
        </trans-unit>
        <trans-unit id="2d1030308576676c67cc41933974f28a7965ce0a" translate="yes" xml:space="preserve">
          <source>So only for printing purpose, It should not be used. we can make a function which takes an array as parameter and prints the desired format as</source>
          <target state="translated">我们可以制作一个函数,将一个数组作为参数,并将所需的格式打印出来。</target>
        </trans-unit>
        <trans-unit id="534b5033d11e8fd7e5cbbc2aabd4e5fcb567a652" translate="yes" xml:space="preserve">
          <source>Starting with Java 8, one could also take advantage of the &lt;code&gt;join()&lt;/code&gt; method provided by the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#join-java.lang.CharSequence-java.lang.CharSequence...-&quot;&gt;String class&lt;/a&gt; to print out array elements, without the brackets, and separated by a delimiter of choice (which is the space character for the example shown below):</source>
          <target state="translated">从Java 8开始，还可以利用&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#join-java.lang.CharSequence-java.lang.CharSequence...-&quot;&gt;String类&lt;/a&gt;提供的 &lt;code&gt;join()&lt;/code&gt; 方法来打印出数组元素，不带方括号，并用选择的定界符将其分隔开（下面示例中的空格字符） ：</target>
        </trans-unit>
        <trans-unit id="b74ff8ee45b0b8f3cea227a5cb8b0ca2512e0fa1" translate="yes" xml:space="preserve">
          <source>The output is:</source>
          <target state="translated">输出是:</target>
        </trans-unit>
        <trans-unit id="0dcf4009680e635e8a0023f5c4553f57298eac1d" translate="yes" xml:space="preserve">
          <source>The output will be &quot;Hey there amigo!&quot;.</source>
          <target state="translated">输出将是 &quot;嘿,阿米哥!&quot;。</target>
        </trans-unit>
        <trans-unit id="d84687faa71501a6668f654312ac37f28a2fd621" translate="yes" xml:space="preserve">
          <source>There are several ways to print an array elements.First of all,  I'll explain that, what is an array?..Array is a simple data structure for storing data..When you define an array , Allocate set of ancillary memory blocks in RAM.Those memory blocks are taken  one unit ..</source>
          <target state="translated">有几种打印数组元素的方法,首先,我给大家介绍一下,什么是数组? 数组是一个简单的数据结构,用于存储数据。</target>
        </trans-unit>
        <trans-unit id="e19e9155c59565321a95749d81868a9243f1d05c" translate="yes" xml:space="preserve">
          <source>There's one additional way if your array is of type char[]:</source>
          <target state="translated">如果你的数组是char[]类型的数组,还有一种方法。</target>
        </trans-unit>
        <trans-unit id="7993cfb9fd392436c6ec51109ca06cd41fd8f710" translate="yes" xml:space="preserve">
          <source>This is marked as a duplicate for &lt;a href=&quot;https://stackoverflow.com/questions/50977959/cannot-see-the-contents-of-the-array-printed-in-console&quot;&gt;printing a byte[]&lt;/a&gt;. Note: for a byte array there are additional methods which may be appropriate.</source>
          <target state="translated">这被标记为重复&lt;a href=&quot;https://stackoverflow.com/questions/50977959/cannot-see-the-contents-of-the-array-printed-in-console&quot;&gt;打印字节[]&lt;/a&gt; 。 注意：对于字节数组，可能还有其他适当的方法。</target>
        </trans-unit>
        <trans-unit id="5c163c926aa35bae6c567394fbe71027decfc73a" translate="yes" xml:space="preserve">
          <source>This is nice to know, however, as for &quot;always check the standard libraries first&quot; I'd never have stumbled upon the trick of &lt;code&gt;Arrays.toString( myarray )&lt;/code&gt;</source>
          <target state="translated">但是，这很高兴知道，因为&amp;ldquo;总是先检查标准库&amp;rdquo;，我永远不会偶然发现 &lt;code&gt;Arrays.toString( myarray )&lt;/code&gt; 的技巧</target>
        </trans-unit>
        <trans-unit id="b14cd3d2def946959d8c5716918e2bf48e8aa0a5" translate="yes" xml:space="preserve">
          <source>This modded class may simply be added to the class path by adding the following to the command line: &lt;code&gt;-Xbootclasspath/p:target/classes&lt;/code&gt;.</source>
          <target state="translated">通过将以下内容添加到命令行，可以简单地将此修改后的类添加到类路径： &lt;code&gt;-Xbootclasspath/p:target/classes&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d309698f8a876adc5e29e77b6c3bb74c5fe4bf62" translate="yes" xml:space="preserve">
          <source>To actually get a table to print as a two dimensional table, I had to do this:</source>
          <target state="translated">为了真正让一个表打印成二维表,我必须这样做。</target>
        </trans-unit>
        <trans-unit id="3f75044d8fcbcf76082f6fdd1e568d324d0f2ff6" translate="yes" xml:space="preserve">
          <source>To add to all the answers, printing the object as a JSON string is also an option.</source>
          <target state="translated">为了补充所有答案,将对象打印为JSON字符串也是一个选项。</target>
        </trans-unit>
        <trans-unit id="26707be6a4605838ae17c3ffd6b40dddf5d01b75" translate="yes" xml:space="preserve">
          <source>Using &lt;strong&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">使用&lt;strong&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e472dee0de7298fd954ee16094a91c1146e8952a" translate="yes" xml:space="preserve">
          <source>Using Gson:</source>
          <target state="translated">使用Gson。</target>
        </trans-unit>
        <trans-unit id="755abe972323938cf07f1ed1b0193cd0d3f6fda9" translate="yes" xml:space="preserve">
          <source>Using Jackson:</source>
          <target state="translated">利用杰克逊。</target>
        </trans-unit>
        <trans-unit id="85b2f5e4914d6b674e9206d27ff61ae691a03a1f" translate="yes" xml:space="preserve">
          <source>Using org.apache.commons.lang3.StringUtils.join(*) methods can be an option</source>
          <target state="translated">使用org.apache.commons.lang3.StringUtils.join(*)方法可以是一种选择。</target>
        </trans-unit>
        <trans-unit id="d6f7cc73a09435a5cd2343c500bc2faf8d932177" translate="yes" xml:space="preserve">
          <source>Using regular &lt;strong&gt;for&lt;/strong&gt; loop is the simplest way of printing array in my opinion.
Here you have a sample code based on your intArray</source>
          <target state="translated">在我看来，使用常规的&lt;strong&gt;for&lt;/strong&gt;循环是打印数组的最简单方法。 这里有一个基于intArray的示例代码</target>
        </trans-unit>
        <trans-unit id="7b57cba17de43e5637224bc8c1b1612a3580acd4" translate="yes" xml:space="preserve">
          <source>We could have used &lt;code&gt;Arrays.toString(array)&lt;/code&gt; to print one dimensional array and &lt;code&gt;Arrays.deepToString(array)&lt;/code&gt; for multi-dimensional arrays.</source>
          <target state="translated">我们本来可以使用 &lt;code&gt;Arrays.toString(array)&lt;/code&gt; 来打印一维数组，而使用Arrays.deepToString（array）来打印多维数组。</target>
        </trans-unit>
        <trans-unit id="7ec15bf1270fd45d20c153b4db5279a3486b8ab1" translate="yes" xml:space="preserve">
          <source>What if this is changed to:</source>
          <target state="translated">如果把这个改成:</target>
        </trans-unit>
        <trans-unit id="a7c7c0662626b754d0f5cd8fc78c7b4927f0bbe9" translate="yes" xml:space="preserve">
          <source>What's the simplest way to print a Java array</source>
          <target state="translated">打印Java数组的最简单方法是什么?</target>
        </trans-unit>
        <trans-unit id="15d434ae557f9fe2f0a3ba6c895c136c2069a8d8" translate="yes" xml:space="preserve">
          <source>Yes ! this is to be mention that converting an array to an object array OR to use the Object's array is costly and may slow the execution. it happens by the nature of java called autoboxing.</source>
          <target state="translated">是的!这是要提到的,将数组转换为对象数组或使用对象数组是很费钱的,而且可能会导致执行速度变慢。</target>
        </trans-unit>
        <trans-unit id="f40829b819419f44add42c9cbafbad1de89647fa" translate="yes" xml:space="preserve">
          <source>You can print it as a String if it contains ISO-8859-1 chars.</source>
          <target state="translated">如果包含ISO-8859-1字符,可以将其打印为字符串。</target>
        </trans-unit>
        <trans-unit id="dd5b924df9a81e2f09f2761b6d9d30e45955cd41" translate="yes" xml:space="preserve">
          <source>You can see an unknown string printed..As I mentioned before, the memory address whose array(number array) declared is printed.If you want to display elements in the array, you can use &quot;for loop &quot; , like this..</source>
          <target state="translated">你可以看到一个未知的字符串被打印出来...........正如我之前提到的那样,声明的数组(数组)的内存地址被打印出来。</target>
        </trans-unit>
        <trans-unit id="9fed954a9e726fe03f447dd176722825e3c9b4dc" translate="yes" xml:space="preserve">
          <source>You could loop through the array,  printing out each item, as you loop. For example:</source>
          <target state="translated">你可以在数组中循环,在循环过程中打印出每个项目。比如说</target>
        </trans-unit>
        <trans-unit id="e37647f70228083d5a926c2d60fcc5b254e9bd61" translate="yes" xml:space="preserve">
          <source>[1, 2, 3, 4, 5]</source>
          <target state="translated">[1,2,3,4,5]</target>
        </trans-unit>
        <trans-unit id="4e45bbf09541ae8c0fab1d988a7e86b2e530aced" translate="yes" xml:space="preserve">
          <source>[John, Mary, Bob]</source>
          <target state="translated">[约翰,玛丽,鲍勃]</target>
        </trans-unit>
        <trans-unit id="bdf9578b3393f4abf80ac72d4e7dc954b8a28fa7" translate="yes" xml:space="preserve">
          <source>[[11, 12], [21, 22], [31, 32, 33]]</source>
          <target state="translated">[[11,12],[21,22],[31,32,33]]</target>
        </trans-unit>
        <trans-unit id="7fb10e42ae0946593a743e033e7e1d51f59167ba" translate="yes" xml:space="preserve">
          <source>[[John, Bravo], [Mary, Lee], [Bob, Johnson]]</source>
          <target state="translated">[[John,Bravo],[Mary,Lee],[Bob,Johnson]]</target>
        </trans-unit>
        <trans-unit id="3d519ef0b72852126c11d09ebfa9adcbf7ea615c" translate="yes" xml:space="preserve">
          <source>consider the output,</source>
          <target state="translated">考虑产出。</target>
        </trans-unit>
        <trans-unit id="27b815fff712571b0ec449863db184e6c590b0e1" translate="yes" xml:space="preserve">
          <source>if you are running jdk 8.</source>
          <target state="translated">如果你运行的是JDK 8。</target>
        </trans-unit>
        <trans-unit id="2cf7fd8824eef3dc4957081088ce6a5e7ebfba6f" translate="yes" xml:space="preserve">
          <source>method reference: &lt;code&gt;::println&lt;/code&gt;</source>
          <target state="translated">方法参考 &lt;code&gt;::println&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68d7f21a46bf0b2430ac2477d05889100b5a66e4" translate="yes" xml:space="preserve">
          <source>or if it contains a UTF-8 string</source>
          <target state="translated">或如果它包含一个UTF-8字符串</target>
        </trans-unit>
        <trans-unit id="af04ba8a1e01a39a573d0f514cc8c20d598658af" translate="yes" xml:space="preserve">
          <source>or if you want print it as base64.</source>
          <target state="translated">或者,如果你想把它打印成base64格式。</target>
        </trans-unit>
        <trans-unit id="0ba2ff3813c9ee3f2b3cb861a5c0a4237d737fd0" translate="yes" xml:space="preserve">
          <source>or if you want print it as hexadecimal.</source>
          <target state="translated">或者,如果你想把它打印成十六进制。</target>
        </trans-unit>
        <trans-unit id="70f1f10cce4516b4517151f329c908a5ffdf9ba4" translate="yes" xml:space="preserve">
          <source>or if you want to print an array of signed byte values</source>
          <target state="translated">或者如果你想打印一个有签名的字节值的数组</target>
        </trans-unit>
        <trans-unit id="5d40d2e0a943cbc570c435b156bb2caf6e49ba7b" translate="yes" xml:space="preserve">
          <source>or if you want to print an array of unsigned byte values</source>
          <target state="translated">或如果你想打印一个无符号字节值的数组</target>
        </trans-unit>
        <trans-unit id="2beed02c5f2676e26bfb97b0571a3e46e51ad82a" translate="yes" xml:space="preserve">
          <source>or if your array contains other arrays as elements:</source>
          <target state="translated">或如果你的数组包含其他数组作为元素。</target>
        </trans-unit>
        <trans-unit id="27806062493e422e06f1adc0af3df9590689c118" translate="yes" xml:space="preserve">
          <source>output:</source>
          <target state="translated">output:</target>
        </trans-unit>
        <trans-unit id="b024f8c2bfa6dbc6442cb571d5d5d6243c0ca744" translate="yes" xml:space="preserve">
          <source>prints</source>
          <target state="translated">prints</target>
        </trans-unit>
        <trans-unit id="2e295d39a771cef5966691621c656644f14763c2" translate="yes" xml:space="preserve">
          <source>stream: &lt;code&gt;Arrays.stream(intArray).forEach&lt;/code&gt;</source>
          <target state="translated">流： &lt;code&gt;Arrays.stream(intArray).forEach&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
