<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/409784">
    <body>
      <group id="409784">
        <trans-unit id="c7d3bb79fa4082e57682c1c571d2145c51fe9871" translate="yes" xml:space="preserve">
          <source>(This works in 1.5+ too, of course.)</source>
          <target state="translated">(もちろんこれは1.5+でも動作します)。</target>
        </trans-unit>
        <trans-unit id="519889b776c0c7ac9977984aaef5700240cf769c" translate="yes" xml:space="preserve">
          <source>--since I was concentrating on the type of myarray to see how to do this. I didn't want to have to iterate through the thing: I wanted an easy call to make it come out similar to what I see in the Eclipse debugger and myarray.toString() just wasn't doing it.</source>
          <target state="translated">--これをどうするかを確認するために myarray の型に集中していたからです。これを反復処理する必要はありませんでした。Eclipse デバッガで見るのと同じようなものを簡単に呼び出せるようにしたかったのですが、myarray.toString()ではそれができませんでした。</target>
        </trans-unit>
        <trans-unit id="356a192b7913b04c54574d18c28d46e6395428ab" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>
        </trans-unit>
        <trans-unit id="17ba0791499db908433b80f37c5fbc89b870084b" translate="yes" xml:space="preserve">
          <source>11</source>
          <target state="translated">11</target>
        </trans-unit>
        <trans-unit id="7b52009b64fd0a2a49e6d8a939753077792b0554" translate="yes" xml:space="preserve">
          <source>12</source>
          <target state="translated">12</target>
        </trans-unit>
        <trans-unit id="da4b9237bacccdf19c0760cab7aec4a8359010b0" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>
        </trans-unit>
        <trans-unit id="472b07b9fcf2c2451e8781e944bf5f77cd8457c8" translate="yes" xml:space="preserve">
          <source>21</source>
          <target state="translated">21</target>
        </trans-unit>
        <trans-unit id="12c6fc06c99a462375eeb3f43dfd832b08ca9e17" translate="yes" xml:space="preserve">
          <source>22</source>
          <target state="translated">22</target>
        </trans-unit>
        <trans-unit id="77de68daecd823babbb58edb1c8e14d7106e83bb" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>
        </trans-unit>
        <trans-unit id="632667547e7cd3e0466547863e1207a8c0c0c549" translate="yes" xml:space="preserve">
          <source>31</source>
          <target state="translated">31</target>
        </trans-unit>
        <trans-unit id="cb4e5208b4cd87268b208e49452ed6e89a68e0b8" translate="yes" xml:space="preserve">
          <source>32</source>
          <target state="translated">32</target>
        </trans-unit>
        <trans-unit id="b6692ea5df920cad691c20319a6fffd7a4a766b8" translate="yes" xml:space="preserve">
          <source>33</source>
          <target state="translated">33</target>
        </trans-unit>
        <trans-unit id="1b6453892473a467d07372d45eb05abc2031647a" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>
        </trans-unit>
        <trans-unit id="ac3478d69a3c81fa62e60f5c3696165a4e5e6ac4" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="translated">5</target>
        </trans-unit>
        <trans-unit id="ba5fb66b44e0063c2d30845cb56a3b6be43941de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt; only prints on one line.</source>
          <target state="translated">&lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt; は1行でのみ印刷されます。</target>
        </trans-unit>
        <trans-unit id="112df8b383b1ff6cc4f1623f84e479c15101de11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;double&lt;/code&gt; Array:</source>
          <target state="translated">&lt;code&gt;double&lt;/code&gt; 配列：</target>
        </trans-unit>
        <trans-unit id="6826eaf5d4ef1999fe6732634c42a3aed642b46c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int&lt;/code&gt; Array:</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 配列：</target>
        </trans-unit>
        <trans-unit id="35d0df4889e03258ecf157668bfbdc2a439e0db2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Different Ways to Print Arrays in Java:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Javaで配列を出力するさまざまな方法：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9241faeabb4276c314c2c17fa3b23f2618cf82e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Please note, this is not a permanent fix by any means. Just a hack that can make debugging simpler.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;これは決して恒久的な修正ではありません。&lt;/strong&gt; &lt;strong&gt;デバッグを簡単にするハックだけです。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a582b40fdede388a197945e40cfe5c749611ae7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Printing Multi-dimensional Array&lt;/strong&gt;
Just in case we want to print multi-dimensional array we can use &lt;code&gt;Arrays.deepToString(array)&lt;/code&gt; as:</source>
          <target state="translated">多次元配列の印刷多次元配列を印刷する場合に備えて、 &lt;code&gt;Arrays.deepToString(array)&lt;/code&gt; を次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="b97688b7ca98b614ae426213943b44d8b8935e93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Printing One dimensional Array:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1次元配列の印刷：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0ef4704ecf8d0a452f55c0f808fc6caeec82031c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;There Are Following way to print Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;配列を印刷するには次の方法があります&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d716572b2f64fbb13750ad581a162fb23061b0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;更新：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b8f79fcd0e5a3c01e25ecddae14aac1086989f9" translate="yes" xml:space="preserve">
          <source>A simplified shortcut I've tried is this:</source>
          <target state="translated">私が試した簡易的なショートカットはこれです。</target>
        </trans-unit>
        <trans-unit id="21c9fe1515f035c1cc921a6968c28f37871d2b85" translate="yes" xml:space="preserve">
          <source>Always check the standard libraries first.  Try:</source>
          <target state="translated">必ず最初に標準ライブラリをチェックしてください。試してみてください。</target>
        </trans-unit>
        <trans-unit id="1717ee58b3b576d7c7e821380e5ff80b5c61039d" translate="yes" xml:space="preserve">
          <source>Another way without method reference just use:</source>
          <target state="translated">メソッド参照なしの別の方法は、単に使用します。</target>
        </trans-unit>
        <trans-unit id="d2c42bd55bea87023525655b158258a11e88deb4" translate="yes" xml:space="preserve">
          <source>Arrays.toString</source>
          <target state="translated">Arrays.toString</target>
        </trans-unit>
        <trans-unit id="517858f0582a429624d59b97393978403548bad2" translate="yes" xml:space="preserve">
          <source>As a direct answer, &lt;a href=&quot;https://www.google.com/search?client=safari&amp;amp;rls=en&amp;amp;q=html+jump+to+anchor&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&quot;&gt;the solution provided by several, including @Esko&lt;/a&gt;, using the &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#toString%28java.lang.Object[]%29&quot;&gt;&lt;code&gt;Arrays.toString&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#deepToString%28java.lang.Object[]%29&quot;&gt;&lt;code&gt;Arrays.deepToString&lt;/code&gt;&lt;/a&gt; methods, is simply the best.</source>
          <target state="translated">直接的な答えとして、 &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#toString%28java.lang.Object[]%29&quot;&gt; &lt;code&gt;Arrays.toString&lt;/code&gt; &lt;/a&gt;など、 &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#deepToString%28java.lang.Object[]%29&quot;&gt; &lt;code&gt;Arrays.deepToString&lt;/code&gt; &lt;/a&gt;メソッドとArrays.deepToStringメソッドを使用&lt;a href=&quot;https://www.google.com/search?client=safari&amp;amp;rls=en&amp;amp;q=html+jump+to+anchor&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&quot;&gt;するいくつかのソリューション&lt;/a&gt;が最善です。</target>
        </trans-unit>
        <trans-unit id="ba696b856a4f3b4099b93759f7d7dd86a712709e" translate="yes" xml:space="preserve">
          <source>At the same time , Using two for loops ,2D elements can be printed..Thank you !</source>
          <target state="translated">同時に、2つのループを使って、2D要素を印刷することができます。</target>
        </trans-unit>
        <trans-unit id="ba3771197a0b88f3155b21607ef43985a6e45402" translate="yes" xml:space="preserve">
          <source>Below I try to list some of the other methods suggested, attempting to improve a little, with the most notable addition being the use of the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#collect-java.util.stream.Collector-&quot;&gt;&lt;code&gt;Stream.collect&lt;/code&gt;&lt;/a&gt; operator, using a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#joining-java.lang.CharSequence-&quot;&gt;&lt;code&gt;joining&lt;/code&gt;&lt;/a&gt;&lt;code&gt;Collector&lt;/code&gt;, to mimic what the &lt;code&gt;String.join&lt;/code&gt; is doing.</source>
          <target state="translated">以下に、他のいくつかの提案されたメソッドをリストし、少し改善しようと試みます。最も注目すべき追加は、 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#collect-java.util.stream.Collector-&quot;&gt; &lt;code&gt;Stream.collect&lt;/code&gt; &lt;/a&gt;を模倣するために&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#joining-java.lang.CharSequence-&quot;&gt; &lt;code&gt;joining&lt;/code&gt; &lt;/a&gt; &lt;code&gt;Collector&lt;/code&gt; を使用して、 Stream.collectオペレーターを使用することです。</target>
        </trans-unit>
        <trans-unit id="da6645f6e22bf5f75974dc7eed5fcd6160d6b51e" translate="yes" xml:space="preserve">
          <source>Bob</source>
          <target state="translated">Bob</target>
        </trans-unit>
        <trans-unit id="f8b83dde53d52771dda7582ed1b5f5928dec9b2f" translate="yes" xml:space="preserve">
          <source>Bravo</source>
          <target state="translated">Bravo</target>
        </trans-unit>
        <trans-unit id="7f7f7bbfc8b9ba064837294db5b7f6a352b078f7" translate="yes" xml:space="preserve">
          <source>But usually, we'd actually want something more like &lt;code&gt;[1, 2, 3, 4, 5]&lt;/code&gt;. What's the simplest way of doing that? Here are some example inputs and outputs:</source>
          <target state="translated">しかし、通常、実際には &lt;code&gt;[1, 2, 3, 4, 5]&lt;/code&gt; 1、2、3、4、5]のようなものが必要です。 それを行う最も簡単な方法は何ですか？ 入力と出力の例をいくつか示します。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="b347e75184a62e0c87de3c3ea43ab302ac2b8d6e" translate="yes" xml:space="preserve">
          <source>For-each loop can also be used to print elements of array:</source>
          <target state="translated">For-each ループは、配列の要素を表示するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="2e722736b8d4d15687c1f2bf022a1a4a6c2feaa2" translate="yes" xml:space="preserve">
          <source>I came across this post in &lt;a href=&quot;http://vanillajava.blogspot.com/2016/03/printing-arrays-by-hacking-jvm.html&quot;&gt;Vanilla #Java&lt;/a&gt; recently. It's not very convenient writing &lt;code&gt;Arrays.toString(arr);&lt;/code&gt;, then importing &lt;code&gt;java.util.Arrays;&lt;/code&gt; all the time.</source>
          <target state="translated">最近、 &lt;a href=&quot;http://vanillajava.blogspot.com/2016/03/printing-arrays-by-hacking-jvm.html&quot;&gt;バニラ#Java&lt;/a&gt;でこの投稿を見つけました。 &lt;code&gt;Arrays.toString(arr);&lt;/code&gt; を書くのはあまり便利ではありません。 、次に &lt;code&gt;java.util.Arrays;&lt;/code&gt; をインポートします。 いつも。</target>
        </trans-unit>
        <trans-unit id="4787db0357545dba8df8207125b5b0028a8907b6" translate="yes" xml:space="preserve">
          <source>I found this to be a quite useful hack and it would be great if Java could simply add this. I understand potential issues with having very large arrays since the string representations could be problematic. Maybe pass something like a &lt;code&gt;System.out&lt;/code&gt;or a &lt;code&gt;PrintWriter&lt;/code&gt; for such eventualities.</source>
          <target state="translated">これは非常に便利なハックであることがわかりました。Javaが単純にこれを追加できればすばらしいと思います。 文字列表現が問題になる可能性があるため、非常に大きな配列を使用する場合の潜在的な問題を理解しています。 そのような事態に備えて、 &lt;code&gt;System.out&lt;/code&gt; や &lt;code&gt;PrintWriter&lt;/code&gt; のようなものを渡すかもしれません。</target>
        </trans-unit>
        <trans-unit id="a119c9847c6580b4ea7713935efb4bfa23869fd7" translate="yes" xml:space="preserve">
          <source>I used the following dependency</source>
          <target state="translated">私は以下の依存関係を使用しました。</target>
        </trans-unit>
        <trans-unit id="f6e3cfabb1c0053d6d70e55c729646b1690d2c41" translate="yes" xml:space="preserve">
          <source>If using &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/&quot;&gt;Commons.Lang library&lt;/a&gt;, we could do:</source>
          <target state="translated">&lt;a href=&quot;https://commons.apache.org/proper/commons-lang/&quot;&gt;Commons.Langライブラリ&lt;/a&gt;を使用している場合、次のことができます。</target>
        </trans-unit>
        <trans-unit id="b589ce72f57aa25a43f4ff08ca92dd48e13fba65" translate="yes" xml:space="preserve">
          <source>If you want to print all elements in the array in the same line, then just use &lt;code&gt;print&lt;/code&gt; instead of &lt;code&gt;println&lt;/code&gt; i.e.</source>
          <target state="translated">配列内のすべての要素を同じ行に出力する場合は、 &lt;code&gt;println&lt;/code&gt; の代わりに &lt;code&gt;print&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="a1a78b3ea66f093234172ac080069ccd29d4af13" translate="yes" xml:space="preserve">
          <source>If you want to print, evaluate Array content like that you can use &lt;code&gt;Arrays.toString&lt;/code&gt;</source>
          <target state="translated">印刷したい場合は、 &lt;code&gt;Arrays.toString&lt;/code&gt; を使用できるように配列の内容を評価します</target>
        </trans-unit>
        <trans-unit id="11c3ad955eba6ebc9eebe8353e2e3f699831f45d" translate="yes" xml:space="preserve">
          <source>If you're using Java 1.4, you can instead do:</source>
          <target state="translated">Java 1.4を使用している場合は、その代わりに</target>
        </trans-unit>
        <trans-unit id="07bc7192befcc026e21876d327eef75a6926f493" translate="yes" xml:space="preserve">
          <source>In JDK1.8 you can use aggregate operations and a lambda expression:</source>
          <target state="translated">JDK1.8では、集約演算とラムダ式を使用することができます。</target>
        </trans-unit>
        <trans-unit id="4e18704a5e78b8fdf6de5af59ef4a97a2d1e173f" translate="yes" xml:space="preserve">
          <source>In Java, arrays don't override &lt;code&gt;toString()&lt;/code&gt;, so if you try to print one directly, you get the &lt;code&gt;className&lt;/code&gt; + '@' + the hex of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_hashCode()&quot;&gt;&lt;code&gt;hashCode&lt;/code&gt;&lt;/a&gt; of the array, as defined by &lt;code&gt;Object.toString()&lt;/code&gt;:</source>
          <target state="translated">Javaでは、配列は &lt;code&gt;toString()&lt;/code&gt; をオーバーライドしないため、直接出力しようとすると、 &lt;code&gt;Object.toString()&lt;/code&gt; で定義されているように、 &lt;code&gt;className&lt;/code&gt; + '@' +配列の&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_hashCode()&quot;&gt; &lt;code&gt;hashCode&lt;/code&gt; &lt;/a&gt;の16進数が取得されます。</target>
        </trans-unit>
        <trans-unit id="2790e4d06f9911fdd0f86768ea2a68af1dd023a0" translate="yes" xml:space="preserve">
          <source>In java 8 :</source>
          <target state="translated">java 8では。</target>
        </trans-unit>
        <trans-unit id="4ff5ec2da1b8e1b73e9710ebc28f583245bbc7f5" translate="yes" xml:space="preserve">
          <source>In java 8 it is easy. there are two keywords</source>
          <target state="translated">java 8では簡単です。</target>
        </trans-unit>
        <trans-unit id="bd8ac2f5b326be16d1215abbd52cd4d8b6f174c6" translate="yes" xml:space="preserve">
          <source>It gives output as yours
    1, 2, 3, 4, 5</source>
          <target state="translated">それはあなたの1,2,3,4,5のように出力を与えます</target>
        </trans-unit>
        <trans-unit id="d319cdeaf2df60f2a6391c09005e558c8d9f9907" translate="yes" xml:space="preserve">
          <source>It seems like the &lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt; method should take a separator string, but unfortunately it doesn't.</source>
          <target state="translated">&lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt; メソッドはセパレーター文字列を受け取る必要があるようですが、残念ながら受け取りません。</target>
        </trans-unit>
        <trans-unit id="c662295fc37155af3fc61c22d1ac1ae13a41b9a8" translate="yes" xml:space="preserve">
          <source>It should always work whichever JDK version you use:</source>
          <target state="translated">使用しているJDKのバージョンに関わらず、常に動作するはずです。</target>
        </trans-unit>
        <trans-unit id="68c0ba97282d2cfb631e09b1c1cf4d6fc75e1ed3" translate="yes" xml:space="preserve">
          <source>It will print</source>
          <target state="translated">それは印刷されます</target>
        </trans-unit>
        <trans-unit id="d23c2e36ea28640bb106420d052479e3ebbca2bc" translate="yes" xml:space="preserve">
          <source>It will work if the &lt;code&gt;Array&lt;/code&gt; contains Objects. If the &lt;code&gt;Array&lt;/code&gt; contains primitive types, you can use wrapper classes instead storing the primitive directly as..</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; にオブジェクトが含まれている場合に機能します。 &lt;code&gt;Array&lt;/code&gt; にプリミティブ型が含まれている場合は、プリミティブを直接保存する代わりにラッパークラスを使用できます。</target>
        </trans-unit>
        <trans-unit id="c287a1bbff0a047aa1cc86cd23da90c9abec2a7c" translate="yes" xml:space="preserve">
          <source>Java 8</source>
          <target state="translated">ジャバハチ</target>
        </trans-unit>
        <trans-unit id="b25e132b536a1f41f4e4b527a70dbdf951e3d944" translate="yes" xml:space="preserve">
          <source>Java 8 - Stream.collect(joining()), Stream.forEach</source>
          <target state="translated">Java 8-Stream.collect(joining()),Stream.forEach</target>
        </trans-unit>
        <trans-unit id="5753a498f025464d72e088a9d5d6e872592d5f91" translate="yes" xml:space="preserve">
          <source>John</source>
          <target state="translated">John</target>
        </trans-unit>
        <trans-unit id="9b616394a7d221a125aba2abf2a86be0466505d9" translate="yes" xml:space="preserve">
          <source>Johnson</source>
          <target state="translated">Johnson</target>
        </trans-unit>
        <trans-unit id="4beb46d36a8d0d77bfa696083bfeab4b6ee156d4" translate="yes" xml:space="preserve">
          <source>Lee</source>
          <target state="translated">Lee</target>
        </trans-unit>
        <trans-unit id="94f85995c7492eec546c321821aa4beca9a3e2b1" translate="yes" xml:space="preserve">
          <source>Mary</source>
          <target state="translated">Mary</target>
        </trans-unit>
        <trans-unit id="c1f66004c365e345d8d378e6ca38a458fda42d50" translate="yes" xml:space="preserve">
          <source>Nested Array:</source>
          <target state="translated">入れ子になった配列。</target>
        </trans-unit>
        <trans-unit id="3c0b65ceb1f454f14ae61f054010ba3a559cd546" translate="yes" xml:space="preserve">
          <source>No loops required in this approach and it is best for small arrays only</source>
          <target state="translated">このアプローチではループは不要で、小さなアレイのみに最適です。</target>
        </trans-unit>
        <trans-unit id="687892b18a7d1eb11494bb8705e411c1b3c05ff6" translate="yes" xml:space="preserve">
          <source>Now look at the output,</source>
          <target state="translated">では、出力を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="597be0e35e54ff0205dab0fee148dd4a3ac0d2f5" translate="yes" xml:space="preserve">
          <source>Now the point to observe is that the method &lt;code&gt;Arrays.stream(T[])&lt;/code&gt;, which in case of &lt;code&gt;int[]&lt;/code&gt; returns us &lt;code&gt;Stream&amp;lt;int[]&amp;gt;&lt;/code&gt; and then method &lt;code&gt;flatMapToInt()&lt;/code&gt; maps each element of stream with the contents of a mapped stream produced by applying the provided mapping function to each element.</source>
          <target state="translated">ここで &lt;code&gt;Arrays.stream(T[])&lt;/code&gt; すべき点は、 Arrays.stream（T []）メソッドです 。これは、 &lt;code&gt;int[]&lt;/code&gt; 場合、 &lt;code&gt;Stream&amp;lt;int[]&amp;gt;&lt;/code&gt; を返し、 &lt;code&gt;flatMapToInt()&lt;/code&gt; メソッドは、ストリームの各要素をマップされたコンテンツにマップします。提供されたマッピング関数を各要素に適用することによって生成されたストリーム。</target>
        </trans-unit>
        <trans-unit id="8b4a23b8c7bd9b3e4547be1de44372e859eaddbb" translate="yes" xml:space="preserve">
          <source>Now we have got the option of &lt;code&gt;Stream&lt;/code&gt; and &lt;code&gt;lambda&lt;/code&gt; to print the array.</source>
          <target state="translated">これで、配列を出力するための &lt;code&gt;Stream&lt;/code&gt; と &lt;code&gt;lambda&lt;/code&gt; オプションが手に入りました。</target>
        </trans-unit>
        <trans-unit id="e2c6d8d8ac3b49337bb23a4956a7a6ebc76ae471" translate="yes" xml:space="preserve">
          <source>Now, with the availability of &lt;code&gt;deepToString(..)&lt;/code&gt; since Java 5, the &lt;code&gt;toString(..)&lt;/code&gt; can easily be changed to &lt;code&gt;deepToString(..)&lt;/code&gt; to add support for arrays that contain other arrays.</source>
          <target state="translated">Java 5以降、 &lt;code&gt;deepToString(..)&lt;/code&gt; が利用できるようになったため、 &lt;code&gt;toString(..)&lt;/code&gt; を簡単に &lt;code&gt;deepToString(..)&lt;/code&gt; に変更して、他の配列を含む配列のサポートを追加できます。</target>
        </trans-unit>
        <trans-unit id="70bc6f21044b66c617660a7782f6d24733f982f4" translate="yes" xml:space="preserve">
          <source>Ok, I'll create an array like this,</source>
          <target state="translated">よし、こんな感じの配列を作ってみよう。</target>
        </trans-unit>
        <trans-unit id="0f02e8aab8d519daf8e2e623848e44ca43888070" translate="yes" xml:space="preserve">
          <source>Ok,Successfully printed elements of one dimension  array..Now I am going to consider two dimension array..I'll declare two dimension array as &quot;number2&quot; and print the elements using &quot;Arrays.deepToString()&quot; keyword.Before using that You will have to import 'java.util.Arrays' library.</source>
          <target state="translated">2次元配列を &quot;number2 &quot;と宣言し、&quot;Arrays.deepToString()&quot;キーワードを使って要素を表示します。</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="824ad0fb86f6007a2f70521bd5894b51d8acf93e" translate="yes" xml:space="preserve">
          <source>Output:
      [One, Two, Three, Four]</source>
          <target state="translated">出力します。1,2,3,4]</target>
        </trans-unit>
        <trans-unit id="f27c2ad0a1d24168345a5dd873ca769ece5bb794" translate="yes" xml:space="preserve">
          <source>Output: [[Ljava.lang.String;@1ad086a [[Ljava.lang.String;@10385c1,
  [Ljava.lang.String;@42719c] [[Fifth, Sixth], [Seventh, Eighth]]</source>
          <target state="translated">出力されます。[[Ljava.lang.String;@1ad086a [[Ljava.lang.String;@10385c1,[Ljava.lang.String;@42719c][[第5、第6],[第7、第8]][[Ljava.lang.String;@42719c</target>
        </trans-unit>
        <trans-unit id="6c2ea13dbe48ff9ca1112cfa24befc8d436781ca" translate="yes" xml:space="preserve">
          <source>Printing Array of Arrays</source>
          <target state="translated">配列の配列を印刷する</target>
        </trans-unit>
        <trans-unit id="c099ece4a9cff9afbf4e6b1317b5161a62c105e9" translate="yes" xml:space="preserve">
          <source>Printing an array directly gives the internal representation and the hashCode. Now, all classes have &lt;code&gt;Object&lt;/code&gt; as the parent-type. So, why not hack the &lt;code&gt;Object.toString()&lt;/code&gt;? Without modification, the Object class looks like this:</source>
          <target state="translated">配列を出力すると、内部表現とハッシュコードが直接提供されます。 現在、すべてのクラスは親タイプとして &lt;code&gt;Object&lt;/code&gt; を持っています。 それでは、なぜ &lt;code&gt;Object.toString()&lt;/code&gt; をハックしないのですか？ 変更しない場合、Objectクラスは次のようになります。</target>
        </trans-unit>
        <trans-unit id="6254c5e5127a2f5f7703cf8c8ee57b1f794206d3" translate="yes" xml:space="preserve">
          <source>Prior to Java 8</source>
          <target state="translated">Java 8の前に</target>
        </trans-unit>
        <trans-unit id="96e3b26e9e57d3d91145d7e033c84d8f1c6b266b" translate="yes" xml:space="preserve">
          <source>Replace it with:</source>
          <target state="translated">と交換してください。</target>
        </trans-unit>
        <trans-unit id="2f878fbd9984022cb9ba452f49ad29031f620135" translate="yes" xml:space="preserve">
          <source>Resource: &lt;a href=&quot;http://howtodoinjava.com/core-java/collections/how-to-print-the-content-of-array-in-java/&quot;&gt;Access An Array&lt;/a&gt;</source>
          <target state="translated">リソース： &lt;a href=&quot;http://howtodoinjava.com/core-java/collections/how-to-print-the-content-of-array-in-java/&quot;&gt;配列にアクセスする&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9b44386cf4328b7daa745585ee2cac35c4013d68" translate="yes" xml:space="preserve">
          <source>Simple Array:</source>
          <target state="translated">シンプルな配列。</target>
        </trans-unit>
        <trans-unit id="7041ff941a75e3c0465e616f5c947900678abe9d" translate="yes" xml:space="preserve">
          <source>Simple Way</source>
          <target state="translated">シンプルな方法</target>
        </trans-unit>
        <trans-unit id="a034f47aed35d1d6fabce1fbdc829f45ed62f90f" translate="yes" xml:space="preserve">
          <source>Since Java 5 you can use &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html#toString-int:A-&quot;&gt;&lt;code&gt;Arrays.toString(arr)&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html#deepToString-java.lang.Object:A-&quot;&gt;&lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt;&lt;/a&gt; for arrays within arrays. Note that the &lt;code&gt;Object[]&lt;/code&gt; version calls &lt;code&gt;.toString()&lt;/code&gt; on each object in the array. The output is even decorated in the exact way you're asking.</source>
          <target state="translated">Java 5以降では、配列内の配列に&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html#toString-int:A-&quot;&gt; &lt;code&gt;Arrays.toString(arr)&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html#deepToString-java.lang.Object:A-&quot;&gt; &lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt; &lt;/a&gt;を使用できます。 &lt;code&gt;Object[]&lt;/code&gt; バージョンは、配列内の各オブジェクトで &lt;code&gt;.toString()&lt;/code&gt; を呼び出すことに注意してください。 出力は、要求したとおりの方法で装飾されています。</target>
        </trans-unit>
        <trans-unit id="2d1030308576676c67cc41933974f28a7965ce0a" translate="yes" xml:space="preserve">
          <source>So only for printing purpose, It should not be used. we can make a function which takes an array as parameter and prints the desired format as</source>
          <target state="translated">そのため、印刷のためだけに使うべきではありません。</target>
        </trans-unit>
        <trans-unit id="534b5033d11e8fd7e5cbbc2aabd4e5fcb567a652" translate="yes" xml:space="preserve">
          <source>Starting with Java 8, one could also take advantage of the &lt;code&gt;join()&lt;/code&gt; method provided by the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#join-java.lang.CharSequence-java.lang.CharSequence...-&quot;&gt;String class&lt;/a&gt; to print out array elements, without the brackets, and separated by a delimiter of choice (which is the space character for the example shown below):</source>
          <target state="translated">Java 8以降では、 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#join-java.lang.CharSequence-java.lang.CharSequence...-&quot;&gt;Stringクラス&lt;/a&gt;によって提供される &lt;code&gt;join()&lt;/code&gt; メソッドを利用して、括弧なしで配列要素を出力し、選択した区切り文字（以下の例ではスペース文字）で区切ることもできます。 ：</target>
        </trans-unit>
        <trans-unit id="b74ff8ee45b0b8f3cea227a5cb8b0ca2512e0fa1" translate="yes" xml:space="preserve">
          <source>The output is:</source>
          <target state="translated">出力されます。</target>
        </trans-unit>
        <trans-unit id="0dcf4009680e635e8a0023f5c4553f57298eac1d" translate="yes" xml:space="preserve">
          <source>The output will be &quot;Hey there amigo!&quot;.</source>
          <target state="translated">出力されるのは「Hey there amigo!</target>
        </trans-unit>
        <trans-unit id="d84687faa71501a6668f654312ac37f28a2fd621" translate="yes" xml:space="preserve">
          <source>There are several ways to print an array elements.First of all,  I'll explain that, what is an array?..Array is a simple data structure for storing data..When you define an array , Allocate set of ancillary memory blocks in RAM.Those memory blocks are taken  one unit ..</source>
          <target state="translated">配列のelements.First of allを印刷するにはいくつかの方法がありますが、私はそれを説明しますが、配列とは何ですか?</target>
        </trans-unit>
        <trans-unit id="e19e9155c59565321a95749d81868a9243f1d05c" translate="yes" xml:space="preserve">
          <source>There's one additional way if your array is of type char[]:</source>
          <target state="translated">配列の型がchar[]の場合、もう一つの方法があります。</target>
        </trans-unit>
        <trans-unit id="7993cfb9fd392436c6ec51109ca06cd41fd8f710" translate="yes" xml:space="preserve">
          <source>This is marked as a duplicate for &lt;a href=&quot;https://stackoverflow.com/questions/50977959/cannot-see-the-contents-of-the-array-printed-in-console&quot;&gt;printing a byte[]&lt;/a&gt;. Note: for a byte array there are additional methods which may be appropriate.</source>
          <target state="translated">これは&lt;a href=&quot;https://stackoverflow.com/questions/50977959/cannot-see-the-contents-of-the-array-printed-in-console&quot;&gt;、byte []&lt;/a&gt;を印刷するための複製としてマークされます。 注：バイト配列の場合、適切なメソッドが他にもあります。</target>
        </trans-unit>
        <trans-unit id="5c163c926aa35bae6c567394fbe71027decfc73a" translate="yes" xml:space="preserve">
          <source>This is nice to know, however, as for &quot;always check the standard libraries first&quot; I'd never have stumbled upon the trick of &lt;code&gt;Arrays.toString( myarray )&lt;/code&gt;</source>
          <target state="translated">ただし、これは知っておくと便利です。「常に最初に標準ライブラリを確認する」ので、 &lt;code&gt;Arrays.toString( myarray )&lt;/code&gt; トリックに遭遇したことはありません。</target>
        </trans-unit>
        <trans-unit id="b14cd3d2def946959d8c5716918e2bf48e8aa0a5" translate="yes" xml:space="preserve">
          <source>This modded class may simply be added to the class path by adding the following to the command line: &lt;code&gt;-Xbootclasspath/p:target/classes&lt;/code&gt;.</source>
          <target state="translated">この変更されたクラスは、コマンド行に &lt;code&gt;-Xbootclasspath/p:target/classes&lt;/code&gt; を追加するだけで、クラスパスに追加できます 。</target>
        </trans-unit>
        <trans-unit id="d309698f8a876adc5e29e77b6c3bb74c5fe4bf62" translate="yes" xml:space="preserve">
          <source>To actually get a table to print as a two dimensional table, I had to do this:</source>
          <target state="translated">実際に二次元の表として印刷してもらうためには、こんなことをしなければなりませんでした。</target>
        </trans-unit>
        <trans-unit id="3f75044d8fcbcf76082f6fdd1e568d324d0f2ff6" translate="yes" xml:space="preserve">
          <source>To add to all the answers, printing the object as a JSON string is also an option.</source>
          <target state="translated">すべての回答に追加するには、オブジェクトをJSON文字列として印刷することもオプションです。</target>
        </trans-unit>
        <trans-unit id="26707be6a4605838ae17c3ffd6b40dddf5d01b75" translate="yes" xml:space="preserve">
          <source>Using &lt;strong&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;toString()&lt;/code&gt; の&lt;/strong&gt;使用</target>
        </trans-unit>
        <trans-unit id="e472dee0de7298fd954ee16094a91c1146e8952a" translate="yes" xml:space="preserve">
          <source>Using Gson:</source>
          <target state="translated">Gsonを使う。</target>
        </trans-unit>
        <trans-unit id="755abe972323938cf07f1ed1b0193cd0d3f6fda9" translate="yes" xml:space="preserve">
          <source>Using Jackson:</source>
          <target state="translated">ジャクソンを使って</target>
        </trans-unit>
        <trans-unit id="85b2f5e4914d6b674e9206d27ff61ae691a03a1f" translate="yes" xml:space="preserve">
          <source>Using org.apache.commons.lang3.StringUtils.join(*) methods can be an option</source>
          <target state="translated">org.apache.commons.lang3.StringUtils.join(*)メソッドを使用することはオプションです。</target>
        </trans-unit>
        <trans-unit id="d6f7cc73a09435a5cd2343c500bc2faf8d932177" translate="yes" xml:space="preserve">
          <source>Using regular &lt;strong&gt;for&lt;/strong&gt; loop is the simplest way of printing array in my opinion.
Here you have a sample code based on your intArray</source>
          <target state="translated">通常の&lt;strong&gt;for&lt;/strong&gt;ループを使用することは、私の考えでは配列を出力する最も簡単な方法です。 ここにあなたのintArrayに基づいたサンプルコードがあります</target>
        </trans-unit>
        <trans-unit id="7b57cba17de43e5637224bc8c1b1612a3580acd4" translate="yes" xml:space="preserve">
          <source>We could have used &lt;code&gt;Arrays.toString(array)&lt;/code&gt; to print one dimensional array and &lt;code&gt;Arrays.deepToString(array)&lt;/code&gt; for multi-dimensional arrays.</source>
          <target state="translated">&lt;code&gt;Arrays.toString(array)&lt;/code&gt; を使用して1次元配列を &lt;code&gt;Arrays.deepToString(array)&lt;/code&gt; 、 Arrays.deepToString（array）を使用して多次元配列を出力することもできます。</target>
        </trans-unit>
        <trans-unit id="7ec15bf1270fd45d20c153b4db5279a3486b8ab1" translate="yes" xml:space="preserve">
          <source>What if this is changed to:</source>
          <target state="translated">これが変更されたらどうしよう。</target>
        </trans-unit>
        <trans-unit id="a7c7c0662626b754d0f5cd8fc78c7b4927f0bbe9" translate="yes" xml:space="preserve">
          <source>What's the simplest way to print a Java array</source>
          <target state="translated">Javaの配列を印刷する最も簡単な方法は何ですか?</target>
        </trans-unit>
        <trans-unit id="15d434ae557f9fe2f0a3ba6c895c136c2069a8d8" translate="yes" xml:space="preserve">
          <source>Yes ! this is to be mention that converting an array to an object array OR to use the Object's array is costly and may slow the execution. it happens by the nature of java called autoboxing.</source>
          <target state="translated">はい!これは、配列をオブジェクト配列に変換したり、オブジェクトの配列を使用したりするのはコストがかかり、実行が遅くなる可能性があることに触れておきます。</target>
        </trans-unit>
        <trans-unit id="f40829b819419f44add42c9cbafbad1de89647fa" translate="yes" xml:space="preserve">
          <source>You can print it as a String if it contains ISO-8859-1 chars.</source>
          <target state="translated">ISO-8859-1文字を含む場合は、文字列として印刷することができます。</target>
        </trans-unit>
        <trans-unit id="dd5b924df9a81e2f09f2761b6d9d30e45955cd41" translate="yes" xml:space="preserve">
          <source>You can see an unknown string printed..As I mentioned before, the memory address whose array(number array) declared is printed.If you want to display elements in the array, you can use &quot;for loop &quot; , like this..</source>
          <target state="translated">先に述べたように、配列(配列数)が宣言されているメモリアドレスが表示されています。</target>
        </trans-unit>
        <trans-unit id="9fed954a9e726fe03f447dd176722825e3c9b4dc" translate="yes" xml:space="preserve">
          <source>You could loop through the array,  printing out each item, as you loop. For example:</source>
          <target state="translated">配列をループしながら、各項目をプリントアウトしていくことができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="e37647f70228083d5a926c2d60fcc5b254e9bd61" translate="yes" xml:space="preserve">
          <source>[1, 2, 3, 4, 5]</source>
          <target state="translated">[1,2,3,4,5]</target>
        </trans-unit>
        <trans-unit id="4e45bbf09541ae8c0fab1d988a7e86b2e530aced" translate="yes" xml:space="preserve">
          <source>[John, Mary, Bob]</source>
          <target state="translated">ジョン メアリー ボブ</target>
        </trans-unit>
        <trans-unit id="bdf9578b3393f4abf80ac72d4e7dc954b8a28fa7" translate="yes" xml:space="preserve">
          <source>[[11, 12], [21, 22], [31, 32, 33]]</source>
          <target state="translated">[[11,12],[21,22],[31,32,33]]</target>
        </trans-unit>
        <trans-unit id="7fb10e42ae0946593a743e033e7e1d51f59167ba" translate="yes" xml:space="preserve">
          <source>[[John, Bravo], [Mary, Lee], [Bob, Johnson]]</source>
          <target state="translated">ジョン、ブラボー],[メアリー、リー],[ボブ、ジョンソン]</target>
        </trans-unit>
        <trans-unit id="3d519ef0b72852126c11d09ebfa9adcbf7ea615c" translate="yes" xml:space="preserve">
          <source>consider the output,</source>
          <target state="translated">アウトプットを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="27b815fff712571b0ec449863db184e6c590b0e1" translate="yes" xml:space="preserve">
          <source>if you are running jdk 8.</source>
          <target state="translated">jdk 8 を実行している場合。</target>
        </trans-unit>
        <trans-unit id="2cf7fd8824eef3dc4957081088ce6a5e7ebfba6f" translate="yes" xml:space="preserve">
          <source>method reference: &lt;code&gt;::println&lt;/code&gt;</source>
          <target state="translated">メソッドリファレンス &lt;code&gt;::println&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68d7f21a46bf0b2430ac2477d05889100b5a66e4" translate="yes" xml:space="preserve">
          <source>or if it contains a UTF-8 string</source>
          <target state="translated">または UTF-8 文字列を含む場合</target>
        </trans-unit>
        <trans-unit id="af04ba8a1e01a39a573d0f514cc8c20d598658af" translate="yes" xml:space="preserve">
          <source>or if you want print it as base64.</source>
          <target state="translated">または、base64で印刷したい場合には、このようにします。</target>
        </trans-unit>
        <trans-unit id="0ba2ff3813c9ee3f2b3cb861a5c0a4237d737fd0" translate="yes" xml:space="preserve">
          <source>or if you want print it as hexadecimal.</source>
          <target state="translated">または、16進数で表示したい場合は</target>
        </trans-unit>
        <trans-unit id="70f1f10cce4516b4517151f329c908a5ffdf9ba4" translate="yes" xml:space="preserve">
          <source>or if you want to print an array of signed byte values</source>
          <target state="translated">符号付きバイト値の配列を表示したい場合は</target>
        </trans-unit>
        <trans-unit id="5d40d2e0a943cbc570c435b156bb2caf6e49ba7b" translate="yes" xml:space="preserve">
          <source>or if you want to print an array of unsigned byte values</source>
          <target state="translated">または、符号なしバイト値の配列を表示したい場合は</target>
        </trans-unit>
        <trans-unit id="2beed02c5f2676e26bfb97b0571a3e46e51ad82a" translate="yes" xml:space="preserve">
          <source>or if your array contains other arrays as elements:</source>
          <target state="translated">または、配列に他の配列が要素として含まれている場合。</target>
        </trans-unit>
        <trans-unit id="27806062493e422e06f1adc0af3df9590689c118" translate="yes" xml:space="preserve">
          <source>output:</source>
          <target state="translated">output:</target>
        </trans-unit>
        <trans-unit id="b024f8c2bfa6dbc6442cb571d5d5d6243c0ca744" translate="yes" xml:space="preserve">
          <source>prints</source>
          <target state="translated">prints</target>
        </trans-unit>
        <trans-unit id="2e295d39a771cef5966691621c656644f14763c2" translate="yes" xml:space="preserve">
          <source>stream: &lt;code&gt;Arrays.stream(intArray).forEach&lt;/code&gt;</source>
          <target state="translated">ストリーム： &lt;code&gt;Arrays.stream(intArray).forEach&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
