<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/409784">
    <body>
      <group id="409784">
        <trans-unit id="c7d3bb79fa4082e57682c1c571d2145c51fe9871" translate="yes" xml:space="preserve">
          <source>(This works in 1.5+ too, of course.)</source>
          <target state="translated">(물론 1.5 이상에서도 작동합니다.)</target>
        </trans-unit>
        <trans-unit id="519889b776c0c7ac9977984aaef5700240cf769c" translate="yes" xml:space="preserve">
          <source>--since I was concentrating on the type of myarray to see how to do this. I didn't want to have to iterate through the thing: I wanted an easy call to make it come out similar to what I see in the Eclipse debugger and myarray.toString() just wasn't doing it.</source>
          <target state="translated">-이 작업을 수행하는 방법을보기 위해 myarray 유형에 집중하고 있기 때문에. 이 일을 반복하고 싶지는 않았습니다 .Eclipse 디버거에서 볼 수있는 것과 비슷하게하기 위해 쉬운 호출을 원했고 myarray.toString () 은하 지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="356a192b7913b04c54574d18c28d46e6395428ab" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>
        </trans-unit>
        <trans-unit id="17ba0791499db908433b80f37c5fbc89b870084b" translate="yes" xml:space="preserve">
          <source>11</source>
          <target state="translated">11</target>
        </trans-unit>
        <trans-unit id="7b52009b64fd0a2a49e6d8a939753077792b0554" translate="yes" xml:space="preserve">
          <source>12</source>
          <target state="translated">12</target>
        </trans-unit>
        <trans-unit id="da4b9237bacccdf19c0760cab7aec4a8359010b0" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>
        </trans-unit>
        <trans-unit id="472b07b9fcf2c2451e8781e944bf5f77cd8457c8" translate="yes" xml:space="preserve">
          <source>21</source>
          <target state="translated">21</target>
        </trans-unit>
        <trans-unit id="12c6fc06c99a462375eeb3f43dfd832b08ca9e17" translate="yes" xml:space="preserve">
          <source>22</source>
          <target state="translated">22</target>
        </trans-unit>
        <trans-unit id="77de68daecd823babbb58edb1c8e14d7106e83bb" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>
        </trans-unit>
        <trans-unit id="632667547e7cd3e0466547863e1207a8c0c0c549" translate="yes" xml:space="preserve">
          <source>31</source>
          <target state="translated">31</target>
        </trans-unit>
        <trans-unit id="cb4e5208b4cd87268b208e49452ed6e89a68e0b8" translate="yes" xml:space="preserve">
          <source>32</source>
          <target state="translated">32</target>
        </trans-unit>
        <trans-unit id="b6692ea5df920cad691c20319a6fffd7a4a766b8" translate="yes" xml:space="preserve">
          <source>33</source>
          <target state="translated">33</target>
        </trans-unit>
        <trans-unit id="1b6453892473a467d07372d45eb05abc2031647a" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>
        </trans-unit>
        <trans-unit id="ac3478d69a3c81fa62e60f5c3696165a4e5e6ac4" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="translated">5</target>
        </trans-unit>
        <trans-unit id="ba5fb66b44e0063c2d30845cb56a3b6be43941de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt; only prints on one line.</source>
          <target state="translated">&lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt; 은 한 줄에만 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="112df8b383b1ff6cc4f1623f84e479c15101de11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;double&lt;/code&gt; Array:</source>
          <target state="translated">&lt;code&gt;double&lt;/code&gt; 배열 :</target>
        </trans-unit>
        <trans-unit id="6826eaf5d4ef1999fe6732634c42a3aed642b46c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int&lt;/code&gt; Array:</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 배열 :</target>
        </trans-unit>
        <trans-unit id="35d0df4889e03258ecf157668bfbdc2a439e0db2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Different Ways to Print Arrays in Java:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Java로 배열을 인쇄하는 다른 방법 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9241faeabb4276c314c2c17fa3b23f2618cf82e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Please note, this is not a permanent fix by any means. Just a hack that can make debugging simpler.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;이것은 영구적으로 수정 된 것이 아닙니다.&lt;/strong&gt; &lt;strong&gt;디버깅을 더 간단하게 만들 수있는 해킹 일뿐입니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a582b40fdede388a197945e40cfe5c749611ae7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Printing Multi-dimensional Array&lt;/strong&gt;
Just in case we want to print multi-dimensional array we can use &lt;code&gt;Arrays.deepToString(array)&lt;/code&gt; as:</source>
          <target state="translated">&lt;strong&gt;다차원 배열 인쇄 다차원 배열&lt;/strong&gt; 을 인쇄하려는 경우 &lt;code&gt;Arrays.deepToString(array)&lt;/code&gt; 을 다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b97688b7ca98b614ae426213943b44d8b8935e93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Printing One dimensional Array:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1 차원 배열 인쇄 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0ef4704ecf8d0a452f55c0f808fc6caeec82031c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;There Are Following way to print Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;배열을 인쇄하는 방법은 다음과 같습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d716572b2f64fbb13750ad581a162fb23061b0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;업데이트 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b8f79fcd0e5a3c01e25ecddae14aac1086989f9" translate="yes" xml:space="preserve">
          <source>A simplified shortcut I've tried is this:</source>
          <target state="translated">내가 시도한 간단한 단축키는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="21c9fe1515f035c1cc921a6968c28f37871d2b85" translate="yes" xml:space="preserve">
          <source>Always check the standard libraries first.  Try:</source>
          <target state="translated">항상 표준 라이브러리를 먼저 확인하십시오. 시험:</target>
        </trans-unit>
        <trans-unit id="1717ee58b3b576d7c7e821380e5ff80b5c61039d" translate="yes" xml:space="preserve">
          <source>Another way without method reference just use:</source>
          <target state="translated">메소드 참조가없는 다른 방법은 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="d2c42bd55bea87023525655b158258a11e88deb4" translate="yes" xml:space="preserve">
          <source>Arrays.toString</source>
          <target state="translated">Arrays.toString</target>
        </trans-unit>
        <trans-unit id="517858f0582a429624d59b97393978403548bad2" translate="yes" xml:space="preserve">
          <source>As a direct answer, &lt;a href=&quot;https://www.google.com/search?client=safari&amp;amp;rls=en&amp;amp;q=html+jump+to+anchor&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&quot;&gt;the solution provided by several, including @Esko&lt;/a&gt;, using the &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#toString%28java.lang.Object[]%29&quot;&gt;&lt;code&gt;Arrays.toString&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#deepToString%28java.lang.Object[]%29&quot;&gt;&lt;code&gt;Arrays.deepToString&lt;/code&gt;&lt;/a&gt; methods, is simply the best.</source>
          <target state="translated">직접적인 대답으로 &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#toString%28java.lang.Object[]%29&quot;&gt; &lt;code&gt;Arrays.toString&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#deepToString%28java.lang.Object[]%29&quot;&gt; &lt;code&gt;Arrays.deepToString&lt;/code&gt; &lt;/a&gt; 메소드를 사용 &lt;a href=&quot;https://www.google.com/search?client=safari&amp;amp;rls=en&amp;amp;q=html+jump+to+anchor&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&quot;&gt;하여 @Esko를 포함한 여러 솔루션이 제공하는 솔루션&lt;/a&gt; 이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="ba696b856a4f3b4099b93759f7d7dd86a712709e" translate="yes" xml:space="preserve">
          <source>At the same time , Using two for loops ,2D elements can be printed..Thank you !</source>
          <target state="translated">동시에 두 개의 for 루프를 사용하면 2D 요소를 인쇄 할 수 있습니다. 감사합니다!</target>
        </trans-unit>
        <trans-unit id="ba3771197a0b88f3155b21607ef43985a6e45402" translate="yes" xml:space="preserve">
          <source>Below I try to list some of the other methods suggested, attempting to improve a little, with the most notable addition being the use of the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#collect-java.util.stream.Collector-&quot;&gt;&lt;code&gt;Stream.collect&lt;/code&gt;&lt;/a&gt; operator, using a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#joining-java.lang.CharSequence-&quot;&gt;&lt;code&gt;joining&lt;/code&gt;&lt;/a&gt;&lt;code&gt;Collector&lt;/code&gt;, to mimic what the &lt;code&gt;String.join&lt;/code&gt; is doing.</source>
          <target state="translated">아래에는 제안 된 다른 방법 중 일부를 나열하려고합니다. 가장 주목할만한 추가 &lt;code&gt;String.join&lt;/code&gt; 은 String.join 이 수행하는 작업을 모방하기 위해 Joining &lt;code&gt;Collector&lt;/code&gt; 를 사용하여 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#collect-java.util.stream.Collector-&quot;&gt; &lt;code&gt;Stream.collect&lt;/code&gt; &lt;/a&gt; 연산자를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="da6645f6e22bf5f75974dc7eed5fcd6160d6b51e" translate="yes" xml:space="preserve">
          <source>Bob</source>
          <target state="translated">Bob</target>
        </trans-unit>
        <trans-unit id="f8b83dde53d52771dda7582ed1b5f5928dec9b2f" translate="yes" xml:space="preserve">
          <source>Bravo</source>
          <target state="translated">Bravo</target>
        </trans-unit>
        <trans-unit id="7f7f7bbfc8b9ba064837294db5b7f6a352b078f7" translate="yes" xml:space="preserve">
          <source>But usually, we'd actually want something more like &lt;code&gt;[1, 2, 3, 4, 5]&lt;/code&gt;. What's the simplest way of doing that? Here are some example inputs and outputs:</source>
          <target state="translated">그러나 일반적으로 실제로 &lt;code&gt;[1, 2, 3, 4, 5]&lt;/code&gt; 와 같은 것을 원할 것입니다. 가장 간단한 방법은 무엇입니까? 다음은 입력 및 출력의 예입니다.</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b347e75184a62e0c87de3c3ea43ab302ac2b8d6e" translate="yes" xml:space="preserve">
          <source>For-each loop can also be used to print elements of array:</source>
          <target state="translated">For-each 루프를 사용하여 배열 요소를 인쇄 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e722736b8d4d15687c1f2bf022a1a4a6c2feaa2" translate="yes" xml:space="preserve">
          <source>I came across this post in &lt;a href=&quot;http://vanillajava.blogspot.com/2016/03/printing-arrays-by-hacking-jvm.html&quot;&gt;Vanilla #Java&lt;/a&gt; recently. It's not very convenient writing &lt;code&gt;Arrays.toString(arr);&lt;/code&gt;, then importing &lt;code&gt;java.util.Arrays;&lt;/code&gt; all the time.</source>
          <target state="translated">최근 &lt;a href=&quot;http://vanillajava.blogspot.com/2016/03/printing-arrays-by-hacking-jvm.html&quot;&gt;Vanilla #Java&lt;/a&gt; 에서이 게시물을 보았습니다 . &lt;code&gt;Arrays.toString(arr);&lt;/code&gt; 그런 다음 &lt;code&gt;java.util.Arrays;&lt;/code&gt; 가져 오기 ; 항상.</target>
        </trans-unit>
        <trans-unit id="4787db0357545dba8df8207125b5b0028a8907b6" translate="yes" xml:space="preserve">
          <source>I found this to be a quite useful hack and it would be great if Java could simply add this. I understand potential issues with having very large arrays since the string representations could be problematic. Maybe pass something like a &lt;code&gt;System.out&lt;/code&gt;or a &lt;code&gt;PrintWriter&lt;/code&gt; for such eventualities.</source>
          <target state="translated">나는 이것이 매우 유용한 핵임을 발견했으며 Java가 단순히 이것을 추가 할 수 있다면 좋을 것입니다. 문자열 표현이 문제가 될 수 있기 때문에 매우 큰 배열을 갖는 잠재적 문제를 이해합니다. 이러한 상황에 대해서는 &lt;code&gt;System.out&lt;/code&gt; 또는 &lt;code&gt;PrintWriter&lt;/code&gt; 와 같은 것을 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a119c9847c6580b4ea7713935efb4bfa23869fd7" translate="yes" xml:space="preserve">
          <source>I used the following dependency</source>
          <target state="translated">나는 다음과 같은 의존성을 사용했다</target>
        </trans-unit>
        <trans-unit id="f6e3cfabb1c0053d6d70e55c729646b1690d2c41" translate="yes" xml:space="preserve">
          <source>If using &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/&quot;&gt;Commons.Lang library&lt;/a&gt;, we could do:</source>
          <target state="translated">&lt;a href=&quot;https://commons.apache.org/proper/commons-lang/&quot;&gt;Commons.Lang 라이브러리를&lt;/a&gt; 사용하는 경우 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b589ce72f57aa25a43f4ff08ca92dd48e13fba65" translate="yes" xml:space="preserve">
          <source>If you want to print all elements in the array in the same line, then just use &lt;code&gt;print&lt;/code&gt; instead of &lt;code&gt;println&lt;/code&gt; i.e.</source>
          <target state="translated">배열의 모든 요소를 ​​같은 줄에 &lt;code&gt;print&lt;/code&gt; 하려면 &lt;code&gt;println&lt;/code&gt; 대신 print 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a1a78b3ea66f093234172ac080069ccd29d4af13" translate="yes" xml:space="preserve">
          <source>If you want to print, evaluate Array content like that you can use &lt;code&gt;Arrays.toString&lt;/code&gt;</source>
          <target state="translated">인쇄하려면 &lt;code&gt;Arrays.toString&lt;/code&gt; 을 사용할 수있는 것처럼 Array 내용을 평가하십시오.</target>
        </trans-unit>
        <trans-unit id="11c3ad955eba6ebc9eebe8353e2e3f699831f45d" translate="yes" xml:space="preserve">
          <source>If you're using Java 1.4, you can instead do:</source>
          <target state="translated">Java 1.4를 사용하는 경우 대신 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="07bc7192befcc026e21876d327eef75a6926f493" translate="yes" xml:space="preserve">
          <source>In JDK1.8 you can use aggregate operations and a lambda expression:</source>
          <target state="translated">JDK1.8에서는 집계 연산과 람다 식을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4e18704a5e78b8fdf6de5af59ef4a97a2d1e173f" translate="yes" xml:space="preserve">
          <source>In Java, arrays don't override &lt;code&gt;toString()&lt;/code&gt;, so if you try to print one directly, you get the &lt;code&gt;className&lt;/code&gt; + '@' + the hex of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_hashCode()&quot;&gt;&lt;code&gt;hashCode&lt;/code&gt;&lt;/a&gt; of the array, as defined by &lt;code&gt;Object.toString()&lt;/code&gt;:</source>
          <target state="translated">Java에서 배열은 &lt;code&gt;toString()&lt;/code&gt; 재정의하지 않으므로 직접 인쇄하려고하면 &lt;code&gt;Object.toString()&lt;/code&gt; 정의 된대로 &lt;code&gt;className&lt;/code&gt; + '@'+ 배열의 &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_hashCode()&quot;&gt; &lt;code&gt;hashCode&lt;/code&gt; &lt;/a&gt; 16 진수를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="2790e4d06f9911fdd0f86768ea2a68af1dd023a0" translate="yes" xml:space="preserve">
          <source>In java 8 :</source>
          <target state="translated">자바 8에서 :</target>
        </trans-unit>
        <trans-unit id="4ff5ec2da1b8e1b73e9710ebc28f583245bbc7f5" translate="yes" xml:space="preserve">
          <source>In java 8 it is easy. there are two keywords</source>
          <target state="translated">Java 8에서는 쉽습니다. 두 개의 키워드가 있습니다</target>
        </trans-unit>
        <trans-unit id="bd8ac2f5b326be16d1215abbd52cd4d8b6f174c6" translate="yes" xml:space="preserve">
          <source>It gives output as yours
    1, 2, 3, 4, 5</source>
          <target state="translated">1, 2, 3, 4, 5로 출력합니다.</target>
        </trans-unit>
        <trans-unit id="d319cdeaf2df60f2a6391c09005e558c8d9f9907" translate="yes" xml:space="preserve">
          <source>It seems like the &lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt; method should take a separator string, but unfortunately it doesn't.</source>
          <target state="translated">&lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt; 메소드는 구분자 문자열을 가져야하지만 불행히도 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c662295fc37155af3fc61c22d1ac1ae13a41b9a8" translate="yes" xml:space="preserve">
          <source>It should always work whichever JDK version you use:</source>
          <target state="translated">어떤 JDK 버전을 사용하든 항상 작동해야합니다.</target>
        </trans-unit>
        <trans-unit id="68c0ba97282d2cfb631e09b1c1cf4d6fc75e1ed3" translate="yes" xml:space="preserve">
          <source>It will print</source>
          <target state="translated">인쇄합니다</target>
        </trans-unit>
        <trans-unit id="d23c2e36ea28640bb106420d052479e3ebbca2bc" translate="yes" xml:space="preserve">
          <source>It will work if the &lt;code&gt;Array&lt;/code&gt; contains Objects. If the &lt;code&gt;Array&lt;/code&gt; contains primitive types, you can use wrapper classes instead storing the primitive directly as..</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; 에 객체가 포함되어 있으면 작동합니다. &lt;code&gt;Array&lt;/code&gt; 에 프리미티브 유형이 포함 된 경우 래퍼 클래스를 사용하여 프리미티브를 직접 저장합니다.</target>
        </trans-unit>
        <trans-unit id="c287a1bbff0a047aa1cc86cd23da90c9abec2a7c" translate="yes" xml:space="preserve">
          <source>Java 8</source>
          <target state="translated">자바 8</target>
        </trans-unit>
        <trans-unit id="b25e132b536a1f41f4e4b527a70dbdf951e3d944" translate="yes" xml:space="preserve">
          <source>Java 8 - Stream.collect(joining()), Stream.forEach</source>
          <target state="translated">Java 8-Stream.collect (joining ()), Stream.forEach</target>
        </trans-unit>
        <trans-unit id="5753a498f025464d72e088a9d5d6e872592d5f91" translate="yes" xml:space="preserve">
          <source>John</source>
          <target state="translated">John</target>
        </trans-unit>
        <trans-unit id="9b616394a7d221a125aba2abf2a86be0466505d9" translate="yes" xml:space="preserve">
          <source>Johnson</source>
          <target state="translated">Johnson</target>
        </trans-unit>
        <trans-unit id="4beb46d36a8d0d77bfa696083bfeab4b6ee156d4" translate="yes" xml:space="preserve">
          <source>Lee</source>
          <target state="translated">Lee</target>
        </trans-unit>
        <trans-unit id="94f85995c7492eec546c321821aa4beca9a3e2b1" translate="yes" xml:space="preserve">
          <source>Mary</source>
          <target state="translated">Mary</target>
        </trans-unit>
        <trans-unit id="c1f66004c365e345d8d378e6ca38a458fda42d50" translate="yes" xml:space="preserve">
          <source>Nested Array:</source>
          <target state="translated">중첩 배열 :</target>
        </trans-unit>
        <trans-unit id="3c0b65ceb1f454f14ae61f054010ba3a559cd546" translate="yes" xml:space="preserve">
          <source>No loops required in this approach and it is best for small arrays only</source>
          <target state="translated">이 방법에는 루프가 필요하지 않으며 작은 배열에만 적합합니다.</target>
        </trans-unit>
        <trans-unit id="687892b18a7d1eb11494bb8705e411c1b3c05ff6" translate="yes" xml:space="preserve">
          <source>Now look at the output,</source>
          <target state="translated">이제 출력을보십시오.</target>
        </trans-unit>
        <trans-unit id="597be0e35e54ff0205dab0fee148dd4a3ac0d2f5" translate="yes" xml:space="preserve">
          <source>Now the point to observe is that the method &lt;code&gt;Arrays.stream(T[])&lt;/code&gt;, which in case of &lt;code&gt;int[]&lt;/code&gt; returns us &lt;code&gt;Stream&amp;lt;int[]&amp;gt;&lt;/code&gt; and then method &lt;code&gt;flatMapToInt()&lt;/code&gt; maps each element of stream with the contents of a mapped stream produced by applying the provided mapping function to each element.</source>
          <target state="translated">이제 관찰해야 할 점은 &lt;code&gt;int[]&lt;/code&gt; 경우 우리에게 &lt;code&gt;Stream&amp;lt;int[]&amp;gt;&lt;/code&gt; 반환하고 &lt;code&gt;flatMapToInt()&lt;/code&gt; 메소드는 스트림의 각 요소를 매핑 된 내용으로 매핑하는 &lt;code&gt;Arrays.stream(T[])&lt;/code&gt; 메서드입니다. 제공된 맵핑 기능을 각 요소에 적용하여 생성 된 스트림.</target>
        </trans-unit>
        <trans-unit id="8b4a23b8c7bd9b3e4547be1de44372e859eaddbb" translate="yes" xml:space="preserve">
          <source>Now we have got the option of &lt;code&gt;Stream&lt;/code&gt; and &lt;code&gt;lambda&lt;/code&gt; to print the array.</source>
          <target state="translated">이제 &lt;code&gt;Stream&lt;/code&gt; 및 &lt;code&gt;lambda&lt;/code&gt; 옵션을 사용하여 배열을 인쇄했습니다.</target>
        </trans-unit>
        <trans-unit id="e2c6d8d8ac3b49337bb23a4956a7a6ebc76ae471" translate="yes" xml:space="preserve">
          <source>Now, with the availability of &lt;code&gt;deepToString(..)&lt;/code&gt; since Java 5, the &lt;code&gt;toString(..)&lt;/code&gt; can easily be changed to &lt;code&gt;deepToString(..)&lt;/code&gt; to add support for arrays that contain other arrays.</source>
          <target state="translated">이제 Java 5부터 &lt;code&gt;deepToString(..)&lt;/code&gt; 사용할 수 있으므로 &lt;code&gt;toString(..)&lt;/code&gt; 을 &lt;code&gt;deepToString(..)&lt;/code&gt; 으로 쉽게 변경하여 다른 배열을 포함하는 배열에 대한 지원을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="70bc6f21044b66c617660a7782f6d24733f982f4" translate="yes" xml:space="preserve">
          <source>Ok, I'll create an array like this,</source>
          <target state="translated">좋아, 나는 이런 배열을 만들 것이다.</target>
        </trans-unit>
        <trans-unit id="0f02e8aab8d519daf8e2e623848e44ca43888070" translate="yes" xml:space="preserve">
          <source>Ok,Successfully printed elements of one dimension  array..Now I am going to consider two dimension array..I'll declare two dimension array as &quot;number2&quot; and print the elements using &quot;Arrays.deepToString()&quot; keyword.Before using that You will have to import 'java.util.Arrays' library.</source>
          <target state="translated">Ok, 성공적으로 1 차원 배열의 요소를 인쇄했습니다. 이제 2 차원 배열을 고려하겠습니다. 2 차원 배열을 &quot;number2&quot;로 선언하고 &quot;Arrays.deepToString ()&quot;키워드를 사용하여 요소를 인쇄합니다. 'java.util.Arrays'라이브러리를 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="824ad0fb86f6007a2f70521bd5894b51d8acf93e" translate="yes" xml:space="preserve">
          <source>Output:
      [One, Two, Three, Four]</source>
          <target state="translated">출력 : [하나, 둘, 셋, 넷]</target>
        </trans-unit>
        <trans-unit id="f27c2ad0a1d24168345a5dd873ca769ece5bb794" translate="yes" xml:space="preserve">
          <source>Output: [[Ljava.lang.String;@1ad086a [[Ljava.lang.String;@10385c1,
  [Ljava.lang.String;@42719c] [[Fifth, Sixth], [Seventh, Eighth]]</source>
          <target state="translated">출력 : [[Ljava.lang.String; @ 1ad086a [[Ljava.lang.String; @ 10385c1, [Ljava.lang.String; @ 42719c] [[Fifth, Sixth], [Seventh, 8]]]</target>
        </trans-unit>
        <trans-unit id="6c2ea13dbe48ff9ca1112cfa24befc8d436781ca" translate="yes" xml:space="preserve">
          <source>Printing Array of Arrays</source>
          <target state="translated">배열 배열 인쇄</target>
        </trans-unit>
        <trans-unit id="c099ece4a9cff9afbf4e6b1317b5161a62c105e9" translate="yes" xml:space="preserve">
          <source>Printing an array directly gives the internal representation and the hashCode. Now, all classes have &lt;code&gt;Object&lt;/code&gt; as the parent-type. So, why not hack the &lt;code&gt;Object.toString()&lt;/code&gt;? Without modification, the Object class looks like this:</source>
          <target state="translated">배열을 직접 인쇄하면 내부 표현과 해시 코드가 제공됩니다. 이제 모든 클래스에는 &lt;code&gt;Object&lt;/code&gt; 가 상위 유형으로 있습니다. 그렇다면 왜 &lt;code&gt;Object.toString()&lt;/code&gt; 해킹하지 않습니까? 수정하지 않으면 Object 클래스는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6254c5e5127a2f5f7703cf8c8ee57b1f794206d3" translate="yes" xml:space="preserve">
          <source>Prior to Java 8</source>
          <target state="translated">Java 8 이전</target>
        </trans-unit>
        <trans-unit id="96e3b26e9e57d3d91145d7e033c84d8f1c6b266b" translate="yes" xml:space="preserve">
          <source>Replace it with:</source>
          <target state="translated">다음으로 교체하십시오.</target>
        </trans-unit>
        <trans-unit id="2f878fbd9984022cb9ba452f49ad29031f620135" translate="yes" xml:space="preserve">
          <source>Resource: &lt;a href=&quot;http://howtodoinjava.com/core-java/collections/how-to-print-the-content-of-array-in-java/&quot;&gt;Access An Array&lt;/a&gt;</source>
          <target state="translated">리소스 : &lt;a href=&quot;http://howtodoinjava.com/core-java/collections/how-to-print-the-content-of-array-in-java/&quot;&gt;배열에 액세스&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9b44386cf4328b7daa745585ee2cac35c4013d68" translate="yes" xml:space="preserve">
          <source>Simple Array:</source>
          <target state="translated">간단한 배열 :</target>
        </trans-unit>
        <trans-unit id="7041ff941a75e3c0465e616f5c947900678abe9d" translate="yes" xml:space="preserve">
          <source>Simple Way</source>
          <target state="translated">간단한 방법</target>
        </trans-unit>
        <trans-unit id="a034f47aed35d1d6fabce1fbdc829f45ed62f90f" translate="yes" xml:space="preserve">
          <source>Since Java 5 you can use &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html#toString-int:A-&quot;&gt;&lt;code&gt;Arrays.toString(arr)&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html#deepToString-java.lang.Object:A-&quot;&gt;&lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt;&lt;/a&gt; for arrays within arrays. Note that the &lt;code&gt;Object[]&lt;/code&gt; version calls &lt;code&gt;.toString()&lt;/code&gt; on each object in the array. The output is even decorated in the exact way you're asking.</source>
          <target state="translated">Java 5부터 배열 내의 배열에 &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html#toString-int:A-&quot;&gt; &lt;code&gt;Arrays.toString(arr)&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html#deepToString-java.lang.Object:A-&quot;&gt; &lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt; &lt;/a&gt; 사용할 수 있습니다. &lt;code&gt;Object[]&lt;/code&gt; 버전은 배열의 각 객체에서 &lt;code&gt;.toString()&lt;/code&gt; 을 호출합니다. 원하는 방식으로 결과물이 꾸며져 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d1030308576676c67cc41933974f28a7965ce0a" translate="yes" xml:space="preserve">
          <source>So only for printing purpose, It should not be used. we can make a function which takes an array as parameter and prints the desired format as</source>
          <target state="translated">따라서 인쇄 목적으로 만 사용해서는 안됩니다. 배열을 매개 변수로 사용하고 원하는 형식을 다음과 같이 인쇄하는 함수를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="534b5033d11e8fd7e5cbbc2aabd4e5fcb567a652" translate="yes" xml:space="preserve">
          <source>Starting with Java 8, one could also take advantage of the &lt;code&gt;join()&lt;/code&gt; method provided by the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#join-java.lang.CharSequence-java.lang.CharSequence...-&quot;&gt;String class&lt;/a&gt; to print out array elements, without the brackets, and separated by a delimiter of choice (which is the space character for the example shown below):</source>
          <target state="translated">Java 8부터는 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#join-java.lang.CharSequence-java.lang.CharSequence...-&quot;&gt;String 클래스&lt;/a&gt; 에서 제공하는 &lt;code&gt;join()&lt;/code&gt; 메소드를 사용하여 대괄호없이 배열 요소를 인쇄하고 선택 구분 기호로 구분할 수 있습니다 (이 예제의 공백 문자 임). :</target>
        </trans-unit>
        <trans-unit id="b74ff8ee45b0b8f3cea227a5cb8b0ca2512e0fa1" translate="yes" xml:space="preserve">
          <source>The output is:</source>
          <target state="translated">출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0dcf4009680e635e8a0023f5c4553f57298eac1d" translate="yes" xml:space="preserve">
          <source>The output will be &quot;Hey there amigo!&quot;.</source>
          <target state="translated">결과는 &quot;Hey there amigo!&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="d84687faa71501a6668f654312ac37f28a2fd621" translate="yes" xml:space="preserve">
          <source>There are several ways to print an array elements.First of all,  I'll explain that, what is an array?..Array is a simple data structure for storing data..When you define an array , Allocate set of ancillary memory blocks in RAM.Those memory blocks are taken  one unit ..</source>
          <target state="translated">배열 요소를 인쇄하는 방법에는 여러 가지가 있습니다. 먼저 배열이란 무엇입니까?. 어레이는 데이터를 저장하는 간단한 데이터 구조입니다. 어레이를 정의 할 때 보조 메모리 블록 세트를 할당하십시오 메모리 블록은 하나의 단위로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e19e9155c59565321a95749d81868a9243f1d05c" translate="yes" xml:space="preserve">
          <source>There's one additional way if your array is of type char[]:</source>
          <target state="translated">배열이 char [] 유형 인 경우 한 가지 추가 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="7993cfb9fd392436c6ec51109ca06cd41fd8f710" translate="yes" xml:space="preserve">
          <source>This is marked as a duplicate for &lt;a href=&quot;https://stackoverflow.com/questions/50977959/cannot-see-the-contents-of-the-array-printed-in-console&quot;&gt;printing a byte[]&lt;/a&gt;. Note: for a byte array there are additional methods which may be appropriate.</source>
          <target state="translated">이것은 &lt;a href=&quot;https://stackoverflow.com/questions/50977959/cannot-see-the-contents-of-the-array-printed-in-console&quot;&gt;byte [] 인쇄&lt;/a&gt; 를 위해 중복으로 표시됩니다. 참고 : 바이트 배열의 경우 적절한 추가 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c163c926aa35bae6c567394fbe71027decfc73a" translate="yes" xml:space="preserve">
          <source>This is nice to know, however, as for &quot;always check the standard libraries first&quot; I'd never have stumbled upon the trick of &lt;code&gt;Arrays.toString( myarray )&lt;/code&gt;</source>
          <target state="translated">그러나 &quot;항상 표준 라이브러리를 먼저 확인하십시오&quot;에 관해서는 &lt;code&gt;Arrays.toString( myarray )&lt;/code&gt; 의 트릭을 우연히 발견 한 적이 없기 때문에 이것은 알아 두는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="b14cd3d2def946959d8c5716918e2bf48e8aa0a5" translate="yes" xml:space="preserve">
          <source>This modded class may simply be added to the class path by adding the following to the command line: &lt;code&gt;-Xbootclasspath/p:target/classes&lt;/code&gt;.</source>
          <target state="translated">이 수정 된 클래스는 명령 행에 &lt;code&gt;-Xbootclasspath/p:target/classes&lt;/code&gt; 를 추가하여 클래스 경로에 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d309698f8a876adc5e29e77b6c3bb74c5fe4bf62" translate="yes" xml:space="preserve">
          <source>To actually get a table to print as a two dimensional table, I had to do this:</source>
          <target state="translated">실제로 테이블을 2 차원 테이블로 인쇄하려면이 작업을 수행해야했습니다.</target>
        </trans-unit>
        <trans-unit id="3f75044d8fcbcf76082f6fdd1e568d324d0f2ff6" translate="yes" xml:space="preserve">
          <source>To add to all the answers, printing the object as a JSON string is also an option.</source>
          <target state="translated">모든 답변에 추가하려면 객체를 JSON 문자열로 인쇄하는 것도 옵션입니다.</target>
        </trans-unit>
        <trans-unit id="26707be6a4605838ae17c3ffd6b40dddf5d01b75" translate="yes" xml:space="preserve">
          <source>Using &lt;strong&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e472dee0de7298fd954ee16094a91c1146e8952a" translate="yes" xml:space="preserve">
          <source>Using Gson:</source>
          <target state="translated">Gson 사용하기 :</target>
        </trans-unit>
        <trans-unit id="755abe972323938cf07f1ed1b0193cd0d3f6fda9" translate="yes" xml:space="preserve">
          <source>Using Jackson:</source>
          <target state="translated">Jackson 사용하기 :</target>
        </trans-unit>
        <trans-unit id="85b2f5e4914d6b674e9206d27ff61ae691a03a1f" translate="yes" xml:space="preserve">
          <source>Using org.apache.commons.lang3.StringUtils.join(*) methods can be an option</source>
          <target state="translated">org.apache.commons.lang3.StringUtils.join (*) 메소드를 사용하는 것은 옵션이 될 수 있습니다</target>
        </trans-unit>
        <trans-unit id="d6f7cc73a09435a5cd2343c500bc2faf8d932177" translate="yes" xml:space="preserve">
          <source>Using regular &lt;strong&gt;for&lt;/strong&gt; loop is the simplest way of printing array in my opinion.
Here you have a sample code based on your intArray</source>
          <target state="translated">정기적 인 &lt;strong&gt;for&lt;/strong&gt; 루프를 사용하는 것이 배열을 인쇄하는 가장 간단한 방법입니다. 여기에 intArray를 기반으로 한 샘플 코드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="7b57cba17de43e5637224bc8c1b1612a3580acd4" translate="yes" xml:space="preserve">
          <source>We could have used &lt;code&gt;Arrays.toString(array)&lt;/code&gt; to print one dimensional array and &lt;code&gt;Arrays.deepToString(array)&lt;/code&gt; for multi-dimensional arrays.</source>
          <target state="translated">&lt;code&gt;Arrays.toString(array)&lt;/code&gt; 을 사용하여 1 차원 배열을 인쇄하고 &lt;code&gt;Arrays.deepToString(array)&lt;/code&gt; 을 다차원 배열에 인쇄 할 수있었습니다.</target>
        </trans-unit>
        <trans-unit id="7ec15bf1270fd45d20c153b4db5279a3486b8ab1" translate="yes" xml:space="preserve">
          <source>What if this is changed to:</source>
          <target state="translated">이것이 다음으로 변경되면 어떻게됩니까?</target>
        </trans-unit>
        <trans-unit id="a7c7c0662626b754d0f5cd8fc78c7b4927f0bbe9" translate="yes" xml:space="preserve">
          <source>What's the simplest way to print a Java array</source>
          <target state="translated">Java 배열을 인쇄하는 가장 간단한 방법은 무엇입니까</target>
        </trans-unit>
        <trans-unit id="15d434ae557f9fe2f0a3ba6c895c136c2069a8d8" translate="yes" xml:space="preserve">
          <source>Yes ! this is to be mention that converting an array to an object array OR to use the Object's array is costly and may slow the execution. it happens by the nature of java called autoboxing.</source>
          <target state="translated">예 ! 이것은 배열을 객체 배열로 변환하거나 객체의 배열을 사용하기 위해 비용이 많이 들고 실행 속도가 느려질 수 있습니다. 그것은 autoboxing이라는 자바의 특성에 의해 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f40829b819419f44add42c9cbafbad1de89647fa" translate="yes" xml:space="preserve">
          <source>You can print it as a String if it contains ISO-8859-1 chars.</source>
          <target state="translated">ISO-8859-1 문자가 포함되어 있으면 문자열로 인쇄 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd5b924df9a81e2f09f2761b6d9d30e45955cd41" translate="yes" xml:space="preserve">
          <source>You can see an unknown string printed..As I mentioned before, the memory address whose array(number array) declared is printed.If you want to display elements in the array, you can use &quot;for loop &quot; , like this..</source>
          <target state="translated">알 수없는 문자열이 인쇄 된 것을 볼 수 있습니다. 앞에서 언급했듯이 array (number array)가 선언 된 메모리 주소가 인쇄됩니다. 배열에 요소를 표시하려면 &quot;for loop&quot;를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9fed954a9e726fe03f447dd176722825e3c9b4dc" translate="yes" xml:space="preserve">
          <source>You could loop through the array,  printing out each item, as you loop. For example:</source>
          <target state="translated">반복하면서 배열을 반복하여 각 항목을 인쇄 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e37647f70228083d5a926c2d60fcc5b254e9bd61" translate="yes" xml:space="preserve">
          <source>[1, 2, 3, 4, 5]</source>
          <target state="translated">[1, 2, 3, 4, 5]</target>
        </trans-unit>
        <trans-unit id="4e45bbf09541ae8c0fab1d988a7e86b2e530aced" translate="yes" xml:space="preserve">
          <source>[John, Mary, Bob]</source>
          <target state="translated">[존, 메리, 밥]</target>
        </trans-unit>
        <trans-unit id="bdf9578b3393f4abf80ac72d4e7dc954b8a28fa7" translate="yes" xml:space="preserve">
          <source>[[11, 12], [21, 22], [31, 32, 33]]</source>
          <target state="translated">[[11, 12], [21, 22], [31, 32, 33]]</target>
        </trans-unit>
        <trans-unit id="7fb10e42ae0946593a743e033e7e1d51f59167ba" translate="yes" xml:space="preserve">
          <source>[[John, Bravo], [Mary, Lee], [Bob, Johnson]]</source>
          <target state="translated">[[John, Bravo], [Mary, Lee], [밥, 존슨]]</target>
        </trans-unit>
        <trans-unit id="3d519ef0b72852126c11d09ebfa9adcbf7ea615c" translate="yes" xml:space="preserve">
          <source>consider the output,</source>
          <target state="translated">출력을 고려하고</target>
        </trans-unit>
        <trans-unit id="27b815fff712571b0ec449863db184e6c590b0e1" translate="yes" xml:space="preserve">
          <source>if you are running jdk 8.</source>
          <target state="translated">jdk 8을 실행중인 경우</target>
        </trans-unit>
        <trans-unit id="2cf7fd8824eef3dc4957081088ce6a5e7ebfba6f" translate="yes" xml:space="preserve">
          <source>method reference: &lt;code&gt;::println&lt;/code&gt;</source>
          <target state="translated">방법 참조 : &lt;code&gt;::println&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68d7f21a46bf0b2430ac2477d05889100b5a66e4" translate="yes" xml:space="preserve">
          <source>or if it contains a UTF-8 string</source>
          <target state="translated">또는 UTF-8 문자열을 포함하는 경우</target>
        </trans-unit>
        <trans-unit id="af04ba8a1e01a39a573d0f514cc8c20d598658af" translate="yes" xml:space="preserve">
          <source>or if you want print it as base64.</source>
          <target state="translated">또는 base64로 인쇄하려는 경우.</target>
        </trans-unit>
        <trans-unit id="0ba2ff3813c9ee3f2b3cb861a5c0a4237d737fd0" translate="yes" xml:space="preserve">
          <source>or if you want print it as hexadecimal.</source>
          <target state="translated">또는 16 진수로 인쇄하려는 경우.</target>
        </trans-unit>
        <trans-unit id="70f1f10cce4516b4517151f329c908a5ffdf9ba4" translate="yes" xml:space="preserve">
          <source>or if you want to print an array of signed byte values</source>
          <target state="translated">또는 부호있는 바이트 값의 배열을 인쇄하려는 경우</target>
        </trans-unit>
        <trans-unit id="5d40d2e0a943cbc570c435b156bb2caf6e49ba7b" translate="yes" xml:space="preserve">
          <source>or if you want to print an array of unsigned byte values</source>
          <target state="translated">또는 부호없는 바이트 값의 배열을 인쇄하려는 경우</target>
        </trans-unit>
        <trans-unit id="2beed02c5f2676e26bfb97b0571a3e46e51ad82a" translate="yes" xml:space="preserve">
          <source>or if your array contains other arrays as elements:</source>
          <target state="translated">또는 배열에 다른 배열이 요소로 포함 된 경우 :</target>
        </trans-unit>
        <trans-unit id="27806062493e422e06f1adc0af3df9590689c118" translate="yes" xml:space="preserve">
          <source>output:</source>
          <target state="translated">output:</target>
        </trans-unit>
        <trans-unit id="b024f8c2bfa6dbc6442cb571d5d5d6243c0ca744" translate="yes" xml:space="preserve">
          <source>prints</source>
          <target state="translated">prints</target>
        </trans-unit>
        <trans-unit id="2e295d39a771cef5966691621c656644f14763c2" translate="yes" xml:space="preserve">
          <source>stream: &lt;code&gt;Arrays.stream(intArray).forEach&lt;/code&gt;</source>
          <target state="translated">스트림 : &lt;code&gt;Arrays.stream(intArray).forEach&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
