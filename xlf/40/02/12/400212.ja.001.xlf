<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/400212">
    <body>
      <group id="400212">
        <trans-unit id="e96265ca08352edfa32340b6268ab393f44a98ab" translate="yes" xml:space="preserve">
          <source>(When you attempt to do this outside of a system cut, copy, or paste event, however, IE will prompt the user to grant the web application clipboard permission.)</source>
          <target state="translated">(ただし、システムの切り取り、コピー、貼り付けイベント以外でこれを行おうとすると、IE はユーザーにウェブアプリケーションのクリップボードの許可を求めるメッセージを表示します)。</target>
        </trans-unit>
        <trans-unit id="e75d4528da466a3f3a6b52f228adf83ca40595a4" translate="yes" xml:space="preserve">
          <source>(codepen.io example may not work, read &quot;important&quot; note above)
Note that this snippet is not working well in Stack Overflow's embedded preview you can try it here: &lt;a href=&quot;https://codepen.io/DeanMarkTaylor/pen/RMRaJX?editors=1011&quot;&gt;https://codepen.io/DeanMarkTaylor/pen/RMRaJX?editors=1011&lt;/a&gt;</source>
          <target state="translated">（codepen.ioの例は機能しない可能性があります。上記の「重要な」注意をお読みください）このスニペットはStack Overflowの埋め込みプレビューではうまく機能しないことに注意してください： &lt;a href=&quot;https://codepen.io/DeanMarkTaylor/pen/RMRaJX?editors=1011&quot;&gt;https&lt;/a&gt; ://codepen.io/DeanMarkTaylor/pen/RMRaJX?editors = 1011</target>
        </trans-unit>
        <trans-unit id="1fb518efe4067aac236903a3806a7cd6e532e917" translate="yes" xml:space="preserve">
          <source>(may not work embedded in this site, read &quot;important&quot; note above)</source>
          <target state="translated">(このサイトに組み込まれていない場合があります。上記の「重要な注意事項」をお読みください)</target>
        </trans-unit>
        <trans-unit id="6e1d86c4f47dc109e9dc3341481977c9eb0c4f4d" translate="yes" xml:space="preserve">
          <source>(to close the box) -- and voila!</source>
          <target state="translated">(箱を閉じる)--そしてボイル!</target>
        </trans-unit>
        <trans-unit id="dcda7580dd706e3a97aa3af104c1ceef61336907" translate="yes" xml:space="preserve">
          <source>) and select the whole text.</source>
          <target state="translated">)をクリックして、テキスト全体を選択します。</target>
        </trans-unit>
        <trans-unit id="a979ef10cc6f6a36df6b8a323307ee3bb2e2db9c" translate="yes" xml:space="preserve">
          <source>+</source>
          <target state="translated">+</target>
        </trans-unit>
        <trans-unit id="6e59b1e479a3507b1b429a7a5ca97870076d4c70" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.npmjs.com/package/clipboard-js&quot;&gt;clipboard.js&lt;/a&gt; is a small, non-Flash, utility that allows copying of text or HTML data to the clipboard. It's very easy to use, just include the .js and use something like this:</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/clipboard-js&quot;&gt;clipboard.js&lt;/a&gt;は、Flash以外の小さなユーティリティで、テキストまたはHTMLデータをクリップボードにコピーできます。 非常に使いやすく、.jsをインクルードして、次のようなものを使用するだけです。</target>
        </trans-unit>
        <trans-unit id="21d27b63ba67cbc2ef3a06687792bd29f5d3beb5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.w3.org/TR/clipboard-apis/#async-clipboard-api&quot;&gt;Async Clipboard API&lt;/a&gt;&lt;code&gt;[navigator.clipboard.writeText]&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;https://www.w3.org/TR/clipboard-apis/#async-clipboard-api&quot;&gt;非同期クリップボードAPI&lt;/a&gt; &lt;code&gt;[navigator.clipboard.writeText]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b17956a95dc62ccc551f30b9bde03106544a715" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;document.queryCommandSupported('copy')&lt;/code&gt; should return &lt;code&gt;true&lt;/code&gt; if the command &quot;is supported by the browser&quot;.</source>
          <target state="translated">&lt;code&gt;document.queryCommandSupported('copy')&lt;/code&gt; は、コマンドが「ブラウザでサポートされている」場合、 &lt;code&gt;true&lt;/code&gt; を返す必要があります 。</target>
        </trans-unit>
        <trans-unit id="9dee8f56e317d9e1f26e426598fce6c9643776e6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2018/03/clipboardapi&quot;&gt;Unblocking Clipboard Access&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2018/03/clipboardapi&quot;&gt;クリップボードアクセスのブロック解除&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5ba9a7d3abc89a175ca501248abe55ef2e6cad77" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Warning&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Warning&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="491f65549f02309068c86c19484bdf480ea8414b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IMPORTANT&lt;/strong&gt; (noted here 2020/02/20)</source>
          <target state="translated">&lt;strong&gt;重要&lt;/strong&gt; （ここに注記2020/02/20）</target>
        </trans-unit>
        <trans-unit id="fcf52df4659a40030c57b9de8fc95a86ebb7b90b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This has been deprecated now. Migrate to &lt;a href=&quot;https://github.com/lgarron/clipboard-polyfill&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;これは現在非推奨になっています。 &lt;a href=&quot;https://github.com/lgarron/clipboard-polyfill&quot;&gt;ここに&lt;/a&gt;移行します 。</target>
        </trans-unit>
        <trans-unit id="cb2dad28be75fee151e85e9c1acf1490c5cc8584" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;em&gt;The &lt;code&gt;document.execCommand()&lt;/code&gt; method is not supported in Internet Explorer 9 and earlier.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;em&gt; &lt;code&gt;document.execCommand()&lt;/code&gt; メソッドは、Internet Explorer 9以前ではサポートされていません。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="73c0cf44d26fb97edb64bb0aca4fb18f4ec6dde8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Source&lt;/strong&gt;: &lt;a href=&quot;https://www.w3schools.com/howto/howto_js_copy_clipboard.asp&quot;&gt;W3Schools - &lt;em&gt;Copy Text to Clipboard&lt;/em&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;ソース&lt;/strong&gt; ： &lt;a href=&quot;https://www.w3schools.com/howto/howto_js_copy_clipboard.asp&quot;&gt;W3Schools- &lt;em&gt;テキストをクリップボードにコピー&lt;/em&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5b55b3f305d5787fd2eb96ce9506e83fb2dfad23" translate="yes" xml:space="preserve">
          <source>@korayem: Note that using html &lt;code&gt;input&lt;/code&gt; field won't respect line breaks &lt;code&gt;\n&lt;/code&gt; and will flatten any text into a single line.</source>
          <target state="translated">@korayem：html &lt;code&gt;input&lt;/code&gt; フィールドを使用しても改行は考慮されず、 &lt;code&gt;\n&lt;/code&gt; テキストは1行にフラット化されます。</target>
        </trans-unit>
        <trans-unit id="67c421ebd761fa59a8235480e325252af646a300" translate="yes" xml:space="preserve">
          <source>A nice trick without flash: &lt;a href=&quot;https://stackoverflow.com/questions/17527870/how-does-trello-access-the-users-clipboard&quot;&gt;How does Trello access the user's clipboard?&lt;/a&gt;</source>
          <target state="translated">フラッシュなしの素敵なトリック： &lt;a href=&quot;https://stackoverflow.com/questions/17527870/how-does-trello-access-the-users-clipboard&quot;&gt;Trelloはどのようにユーザーのクリップボードにアクセスしますか？&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="856d306566ddd4dcad729102f7f41d26f5f71ec0" translate="yes" xml:space="preserve">
          <source>Access is asynchronous and uses &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/promises&quot;&gt;JavaScript Promises&lt;/a&gt;, can be written so security user prompts (if displayed) don't interrupt the JavaScript in page.</source>
          <target state="translated">アクセスは非同期で、 &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/promises&quot;&gt;JavaScript Promise&lt;/a&gt;を使用します。セキュリティユーザープロンプト（表示されている場合）がページ内のJavaScriptを中断しないように記述できます。</target>
        </trans-unit>
        <trans-unit id="32d6539eb3cb225eaaf1c2f918ecde419feaed0c" translate="yes" xml:space="preserve">
          <source>Access is synchronous, i.e. stops JavaScript in the page until complete including displaying and user interacting with any security prompts.</source>
          <target state="translated">アクセスは同期的に行われます。つまり、セキュリティプロンプトの表示やユーザーとのやりとりを含めて、ページ内のJavaScriptは完了するまで停止されます。</target>
        </trans-unit>
        <trans-unit id="41b5f2e6aebc43182a4eee3c33dbf7e657d4ea1a" translate="yes" xml:space="preserve">
          <source>Additional notes</source>
          <target state="translated">追加の注意事項</target>
        </trans-unit>
        <trans-unit id="8225c019b26f4a9de1e9728e509c5133a235f100" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;document.execCommand('copy')&lt;/code&gt; calls must take place as a direct result of a user action, e.g. click event handler. This is a measure to prevent messing with the user's clipboard when they don't expect it.</source>
          <target state="translated">すべての &lt;code&gt;document.execCommand('copy')&lt;/code&gt; 呼び出しは、クリックイベントハンドラーなどのユーザーアクションの直接の結果として実行する必要があります。 これは、ユーザーが予期しないときにユーザーのクリップボードをいじるのを防ぐための手段です。</target>
        </trans-unit>
        <trans-unit id="acf1ba18187e59703bde0e9bdb9a34c3dc35dea0" translate="yes" xml:space="preserve">
          <source>Allows you to modify what appears on the clipboard from any copy event, can include other formats of data other than plain text.</source>
          <target state="translated">コピーイベントからクリップボードに表示されるものを変更できます。</target>
        </trans-unit>
        <trans-unit id="c385ea5eb927cc1c6219db7ea47412df630f7933" translate="yes" xml:space="preserve">
          <source>And also on &lt;a href=&quot;https://bower.io/&quot;&gt;Bower&lt;/a&gt;</source>
          <target state="translated">また、 &lt;a href=&quot;https://bower.io/&quot;&gt;バウアーについて&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="55bc94285ac46dcaf58b2bbefd041e1746065f58" translate="yes" xml:space="preserve">
          <source>And if you need you may be set the timeout for function for restoring previous selection. My implementation on Mootools:</source>
          <target state="translated">また、必要であれば、前の選択範囲を復元する関数のタイムアウトを設定することもできます。Mootoolsでの実装です。</target>
        </trans-unit>
        <trans-unit id="32f881cc6ba6e48100b4e5da0aa60f8169934e6b" translate="yes" xml:space="preserve">
          <source>Any call to &lt;code&gt;document.execCommand&lt;/code&gt;, &lt;code&gt;document.queryCommandSupported&lt;/code&gt; or &lt;code&gt;document.queryCommandEnabled&lt;/code&gt; should be wrapped in a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;document.execCommand&lt;/code&gt; 、 &lt;code&gt;document.queryCommandSupported&lt;/code&gt; 、または &lt;code&gt;document.queryCommandEnabled&lt;/code&gt; の呼び出しは、 &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; ブロックでラップする必要があります。</target>
        </trans-unit>
        <trans-unit id="26d0e98fe2bcb7cc7b175d7915bc8309e4ca7ff5" translate="yes" xml:space="preserve">
          <source>Append the textarea to the DOM.</source>
          <target state="translated">textareaをDOMに追加します。</target>
        </trans-unit>
        <trans-unit id="68bcd8b744e2ec804f09412a959f90b18b569ca8" translate="yes" xml:space="preserve">
          <source>As mentioned by @nikksan in the comments, using &lt;code&gt;textarea&lt;/code&gt; will fix the problem as follows:</source>
          <target state="translated">コメントで@nikksanが述べたように、textareaを使用すると、次のように問題が修正されます。</target>
        </trans-unit>
        <trans-unit id="a1598e8aed758a6728c7fb478f53b10ad524fd2b" translate="yes" xml:space="preserve">
          <source>As of Flash 10, you can only copy to clipboard if the action originates from user interaction with a Flash object. (&lt;a href=&quot;http://www.adobe.com/devnet/flashplayer/articles/fplayer10_security_changes_02.html#head31&quot;&gt;Read related section from Adobe's Flash 10 announcement&lt;/a&gt;)</source>
          <target state="translated">Flash 10以降、クリップボードにコピーできるのは、アクションがFlashオブジェクトとのユーザーインタラクションから発生した場合のみです。 （ &lt;a href=&quot;http://www.adobe.com/devnet/flashplayer/articles/fplayer10_security_changes_02.html#head31&quot;&gt;AdobeのFlash 10の発表から関連セクションをお読みください&lt;/a&gt; ）</target>
        </trans-unit>
        <trans-unit id="9834bc520e4a3d79cdacd2836542d974b65eea37" translate="yes" xml:space="preserve">
          <source>Async + Fallback</source>
          <target state="translated">非同期+フォールバック</target>
        </trans-unit>
        <trans-unit id="e8982a208f6308653ea4601ca5affa8f4edada81" translate="yes" xml:space="preserve">
          <source>Async Clipboard API</source>
          <target state="translated">非同期クリップボード API</target>
        </trans-unit>
        <trans-unit id="5a1033034be2c962601239fa8b9fad424724f57e" translate="yes" xml:space="preserve">
          <source>Auto copy to clipboard</source>
          <target state="translated">クリップボードへの自動コピー</target>
        </trans-unit>
        <trans-unit id="d970c27652652d6344e43e1ae8089db42550a170" translate="yes" xml:space="preserve">
          <source>Automatic copying to clipboard may be dangerous, therefore most browsers (except IE) make it very difficult. Personally, I use the following simple trick:</source>
          <target state="translated">クリップボードへの自動コピーは危険なので、ほとんどのブラウザ(IEを除く)では非常に難しくなっています。個人的には、以下のような簡単なトリックを使っています。</target>
        </trans-unit>
        <trans-unit id="2464a46af3bc6def3dfe2724b5e3fac23922690b" translate="yes" xml:space="preserve">
          <source>Browser Compatibility Detail</source>
          <target state="translated">ブラウザの互換性の詳細</target>
        </trans-unit>
        <trans-unit id="02a8c960030f2f9457b2f49cecd3b0e346163641" translate="yes" xml:space="preserve">
          <source>Browser Support</source>
          <target state="translated">ブラウザのサポート</target>
        </trans-unit>
        <trans-unit id="32096c2e0eff33d844ee6d675407ace18289357d" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="translated">C</target>
        </trans-unit>
        <trans-unit id="fc1ddd1fa4e0d9b8931e660ae31c11ef1c1f8999" translate="yes" xml:space="preserve">
          <source>Call document.execCommand(&quot;copy&quot;)</source>
          <target state="translated">document.execCommand(&quot;copy&quot;)を呼び出す</target>
        </trans-unit>
        <trans-unit id="f0eeff0d8b325dfbf6d9acdbe62d0b35dfc87061" translate="yes" xml:space="preserve">
          <source>Chrome 66 announcement post (March 2018)</source>
          <target state="translated">Chrome 66の発表ポスト(2018年3月</target>
        </trans-unit>
        <trans-unit id="e048451cc6753ab456b5e3b1a7c4bc5d5e7bb3ff" translate="yes" xml:space="preserve">
          <source>Clipboard API</source>
          <target state="translated">クリップボード API</target>
        </trans-unit>
        <trans-unit id="560a5acaae3a950849068f68836522e4b60eca5e" translate="yes" xml:space="preserve">
          <source>Code from GitHub:</source>
          <target state="translated">コードはGitHubから。</target>
        </trans-unit>
        <trans-unit id="1e9fe90b0108a403efdb3d5753637abb2eddc389" translate="yes" xml:space="preserve">
          <source>Complex Example: Copy to clipboard without displaying input</source>
          <target state="translated">複雑な例。入力を表示せずにクリップボードにコピー</target>
        </trans-unit>
        <trans-unit id="1f9fd959c733298081d99378186853f50833c3ea" translate="yes" xml:space="preserve">
          <source>Copy text from HTML input to the clipboard:</source>
          <target state="translated">HTML入力のテキストをクリップボードにコピーします。</target>
        </trans-unit>
        <trans-unit id="c9e1ab00b00b8f1d4ade2421d1366b3384e9274f" translate="yes" xml:space="preserve">
          <source>Copying plain text to the clipboard is relatively simple, assuming you want to do it during a system copy event (user presses</source>
          <target state="translated">プレーンテキストをクリップボードにコピーするのは比較的簡単です。</target>
        </trans-unit>
        <trans-unit id="3421219dee9df20a58e105115b618942d922a453" translate="yes" xml:space="preserve">
          <source>Create a textarea and set its contents to the text you want copied to the clipboard.</source>
          <target state="translated">テキストエリアを作成し、その内容をクリップボードにコピーしたいテキストに設定します。</target>
        </trans-unit>
        <trans-unit id="dd6a02a553da4cb247f914011dd67c37487ec082" translate="yes" xml:space="preserve">
          <source>Ctrl</source>
          <target state="translated">Ctrl</target>
        </trans-unit>
        <trans-unit id="aed5b4d8e351ae74e3ace403f868fc20762ffdcc" translate="yes" xml:space="preserve">
          <source>Different browser implementations and browser versions throw differing types of exceptions when called instead of returning &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">ブラウザの実装やブラウザのバージョンが異なると、呼び出されたときに &lt;code&gt;false&lt;/code&gt; を返す代わりに、異なるタイプの例外がスローされます 。</target>
        </trans-unit>
        <trans-unit id="5a226ccf6af51fb95b675284c85897bb89775745" translate="yes" xml:space="preserve">
          <source>Different browser implementations are still in flux and the &lt;a href=&quot;https://w3c.github.io/clipboard-apis/&quot;&gt;Clipboard API&lt;/a&gt; is still in draft, so remember to do your testing.</source>
          <target state="translated">さまざまなブラウザーの実装はまだ流動的で、 &lt;a href=&quot;https://w3c.github.io/clipboard-apis/&quot;&gt;Clipboard API&lt;/a&gt;はまだドラフトであるため、 必ずテストを行ってください。</target>
        </trans-unit>
        <trans-unit id="28740c6842d7eb88bad092a74e279396ffcd3536" translate="yes" xml:space="preserve">
          <source>Don't expect clipboard related commands to work whilst you are testing code in the console. Generally the page is required to be active (Async Clipboard API) or requires user interaction (e.g. a user click) to allow (&lt;code&gt;document.execCommand('copy')&lt;/code&gt;) to access the clipboard see below for more detail.</source>
          <target state="translated">コンソールでコードをテストしている間は、クリップボード関連のコマンドが機能することを期待しないでください。 通常、ページはアクティブである必要があります（非同期クリップボードAPI）、または（ &lt;code&gt;document.execCommand('copy')&lt;/code&gt; ）がクリップボードにアクセスできるようにするには、ユーザーの操作（たとえば、ユーザーのクリック）が必要です。詳細については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="9a1d594eb2d8591a4d909166f374bda0554437bb" translate="yes" xml:space="preserve">
          <source>Due to the level of browser support for the new Async Clipboard API you will likely want to fallback to the &lt;code&gt;document.execCommand('copy')&lt;/code&gt; method to get good browser coverage.</source>
          <target state="translated">新しいAsync Clipboard APIのブラウザーサポートのレベルにより、適切なブラウザーカバレッジを取得するために、 &lt;code&gt;document.execCommand('copy')&lt;/code&gt; メソッドにフォールバックすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5a22dc9f176d880860261392386d3fa4eee3c704" translate="yes" xml:space="preserve">
          <source>During testing ~April 2015 only Internet Explorer was noted as displaying permissions prompts whilst writing to the clipboard.</source>
          <target state="translated">テスト中~2015年4月の間、Internet Explorerのみ、クリップボードへの書き込み中に許可のプロンプトが表示されることが指摘されていました。</target>
        </trans-unit>
        <trans-unit id="2b9eceb7a86a9f577ef80586c5c1d7fde9ff493d" translate="yes" xml:space="preserve">
          <source>Enter</source>
          <target state="translated">Enter</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">スニペットを展開</target>
        </trans-unit>
        <trans-unit id="92098df6a3dbfbc7a91d4337f6c353653b8dddf1" translate="yes" xml:space="preserve">
          <source>For security reasons, this can only called from an event handler such as click (Just as with opening windows).</source>
          <target state="translated">セキュリティ上の理由から、クリックなどのイベントハンドラからのみ呼び出すことができます(ウィンドウを開くときと同じように)。</target>
        </trans-unit>
        <trans-unit id="ca83a58af2fa61f2776c5410eefb27139675814c" translate="yes" xml:space="preserve">
          <source>From one of the projects I've been working on, a jQuery copy-to-clipboard plugin that utilizes the &lt;a href=&quot;https://github.com/patricklodder/jquery-zclip&quot;&gt;Zero Clipboard&lt;/a&gt; library.</source>
          <target state="translated">私が取り組んできたプロジェクトの1つである、 &lt;a href=&quot;https://github.com/patricklodder/jquery-zclip&quot;&gt;ゼロクリップボード&lt;/a&gt;ライブラリを利用するjQuery copy-to-clipboardプラグイン。</target>
        </trans-unit>
        <trans-unit id="ec15b457aaa9f705d48240bfff948700326decbe" translate="yes" xml:space="preserve">
          <source>General development notes</source>
          <target state="translated">一般的な開発ノート</target>
        </trans-unit>
        <trans-unit id="de606c275ead21eb18671a59a0197493aa4e6707" translate="yes" xml:space="preserve">
          <source>Google Chrome 43+ (~April 2015)</source>
          <target state="translated">Google Chrome 43+(~2015年4月</target>
        </trans-unit>
        <trans-unit id="6cd83e1c00736c966907a051dca51ccecd49dd23" translate="yes" xml:space="preserve">
          <source>Has a workaround for iOS so that it actually works as it normally blocks execCommand.</source>
          <target state="translated">iOSでは通常execCommandをブロックしているため、実際に動作するように回避策があります。</target>
        </trans-unit>
        <trans-unit id="027e4d51af3a2706d15e492657818f5ff727db7d" translate="yes" xml:space="preserve">
          <source>Here is a simple example (may not work embedded in this site, read &quot;important&quot; note above):</source>
          <target state="translated">ここでは簡単な例を紹介します(このサイトに埋め込まれていない場合がありますので、上記の「重要」メモをお読みください)。</target>
        </trans-unit>
        <trans-unit id="ff28e34c7b269519a1250c40752aa30a3f526707" translate="yes" xml:space="preserve">
          <source>Here is a test/demo page which demonstrates the code working:
&lt;a href=&quot;https://deanmarktaylor.github.io/clipboard-test/&quot;&gt;https://deanmarktaylor.github.io/clipboard-test/&lt;/a&gt;</source>
          <target state="translated">これは、コードが機能することを示すテスト/デモページです&lt;a href=&quot;https://deanmarktaylor.github.io/clipboard-test/&quot;&gt;。https&lt;/a&gt; ： //deanmarktaylor.github.io/clipboard-test/</target>
        </trans-unit>
        <trans-unit id="b1e57f745fbd5cae8d9184892ad97542e92eeb37" translate="yes" xml:space="preserve">
          <source>Here is my take on that one...</source>
          <target state="translated">これが私の見解です...</target>
        </trans-unit>
        <trans-unit id="5ef0e3e404407e991996a23ad4564c3121299baa" translate="yes" xml:space="preserve">
          <source>Here it is:</source>
          <target state="translated">ここにあります。</target>
        </trans-unit>
        <trans-unit id="dd1e3d1c363e66eba074ecf268f04fd481a7afa3" translate="yes" xml:space="preserve">
          <source>Here's yet another way to copy text:</source>
          <target state="translated">ここにもテキストをコピーする方法があります。</target>
        </trans-unit>
        <trans-unit id="dd25b1528c9013edbcd817487ed6b4308279b170" translate="yes" xml:space="preserve">
          <source>How do I copy to the clipboard in JavaScript</source>
          <target state="translated">JavaScriptでクリップボードにコピーする方法</target>
        </trans-unit>
        <trans-unit id="de2f217cb34a22e24f2bffb160103b608e9bc84f" translate="yes" xml:space="preserve">
          <source>However as an example of browser compatibility issues, Google Chrome from ~April to ~October 2015 only returned &lt;code&gt;true&lt;/code&gt; from &lt;code&gt;document.queryCommandSupported('copy')&lt;/code&gt; if the command was called from a user-initiated thread.</source>
          <target state="translated">ただし、ブラウザーの互換性の問題の例として、2015年4月から10月までのGoogle Chromeは、ユーザーが開始したスレッドからコマンドが呼び出された場合にのみ &lt;code&gt;document.queryCommandSupported('copy')&lt;/code&gt; から &lt;code&gt;true&lt;/code&gt; を返しました。</target>
        </trans-unit>
        <trans-unit id="6e1dffcce04f8999377bb8326748a74053499dcb" translate="yes" xml:space="preserve">
          <source>I can't paste an example (commercial project), but you get the idea.</source>
          <target state="translated">例(商業プロジェクト)は貼り付けられませんが、お分かりになると思います。</target>
        </trans-unit>
        <trans-unit id="f4cfd5a7996a41f2b20dd8a8092cf36b01c950c6" translate="yes" xml:space="preserve">
          <source>I do realize this code will show a 1-pixel wide component visibly on the screen for a millisecond, but decided not to worry about that, which is something that others can address if a real problem.</source>
          <target state="translated">私はこのコードが画面上で目に見える形で 1 ピクセル幅のコンポーネントをミリ秒表示することを認識していますが、実際の問題が発生した場合、他の人が対処できるものであることを気にしないことにしました。</target>
        </trans-unit>
        <trans-unit id="966d38c44a502d4b0016776551e4db97e6a2ed53" translate="yes" xml:space="preserve">
          <source>I found the following solution:</source>
          <target state="translated">以下のような解決策を見つけました。</target>
        </trans-unit>
        <trans-unit id="ce5daa652636410cf2a6d446548fd88417b8875d" translate="yes" xml:space="preserve">
          <source>I had the same problem building a custom grid edit from (something like Excel) and compatibility with Excel. I had to support selecting multiple cells, copying and pasting.</source>
          <target state="translated">私は、(Excelのようなもの)とExcelとの互換性からカスタムグリッド編集を構築するのと同じ問題を抱えていました。私は複数のセルを選択し、コピーとペーストをサポートしなければなりませんでした。</target>
        </trans-unit>
        <trans-unit id="c1505e7216dbf9bc253cc27dac1792b424a2ddf7" translate="yes" xml:space="preserve">
          <source>I have recently written a &lt;a href=&quot;https://www.lucidchart.com/techblog/2014/12/02/definitive-guide-copying-pasting-javascript/&quot;&gt;technical blog post&lt;/a&gt; on this very problem (I work at Lucidchart and we recently did an overhaul on our clipboard).</source>
          <target state="translated">私は最近、まさにこの問題について&lt;a href=&quot;https://www.lucidchart.com/techblog/2014/12/02/definitive-guide-copying-pasting-javascript/&quot;&gt;テクニカルブログの投稿&lt;/a&gt;を書いています（私はLucidchartで働いており、最近、クリップボードのオーバーホールを行いました）。</target>
        </trans-unit>
        <trans-unit id="23c9189db1ff6e2cb688c016c58d203404607422" translate="yes" xml:space="preserve">
          <source>I have the text in a hidden input. Because &lt;code&gt;setSelectionRange&lt;/code&gt; doesn't work on hidden inputs, I changed temporarily the type to text, copied the text, and then made it hidden again. If you want to copy the text from an element, you can pass it to the function and save its content in the target variable.</source>
          <target state="translated">非表示の入力にテキストがあります。 &lt;code&gt;setSelectionRange&lt;/code&gt; は非表示の入力では機能しないため、一時的にタイプをテキストに変更し、テキストをコピーしてから、もう一度非表示にしました。 要素からテキストをコピーする場合は、それを関数に渡し、その内容をターゲット変数に保存できます。</target>
        </trans-unit>
        <trans-unit id="f481599de8d99219c663f80ada085d861d69693b" translate="yes" xml:space="preserve">
          <source>I have tried:</source>
          <target state="translated">試してみました。</target>
        </trans-unit>
        <trans-unit id="64142f87f6143dab6c09288596e96559aa538097" translate="yes" xml:space="preserve">
          <source>I have used clipboard.js.</source>
          <target state="translated">clipboard.jsを使ってみました。</target>
        </trans-unit>
        <trans-unit id="9b29eb5b35b06915e3d30e952d28183777874ef9" translate="yes" xml:space="preserve">
          <source>I use this very successfully (&lt;strong&gt;without&lt;/strong&gt; jQuery or any other framework).</source>
          <target state="translated">私はこれを非常にうまく使用しています（jQueryまたは他のフレームワークなしで）。</target>
        </trans-unit>
        <trans-unit id="86507cb1f625e6ba89de2744cb4e96b28a353d90" translate="yes" xml:space="preserve">
          <source>I've put together what I think is the best one.</source>
          <target state="translated">私が一番いいと思うものをまとめてみました。</target>
        </trans-unit>
        <trans-unit id="4df3900a6902efb269b256f49cc9d0d373811b00" translate="yes" xml:space="preserve">
          <source>If I pass in a string, it copies it. If nothing, it copies the page's URL.</source>
          <target state="translated">文字列を渡すと、それがコピーされます。何もなければ、ページのURLをコピーします。</target>
        </trans-unit>
        <trans-unit id="a7bd28b63858fcaef5224254159907ac6e11fdcb" translate="yes" xml:space="preserve">
          <source>If you need non-flash support for iOS you just add a fall-back:</source>
          <target state="translated">iOSの非フラッシュサポートが必要な場合はフォールバックを追加するだけです。</target>
        </trans-unit>
        <trans-unit id="9abe680fe97b16c6e82c89dff562f3400328d404" translate="yes" xml:space="preserve">
          <source>If you want a really simple solution (takes less than 5 minutes to integrate) and looks good right out of the box, then &lt;a href=&quot;http://github.com/mojombo/clippy&quot;&gt;Clippy&lt;/a&gt; is a nice alternative to some of the more complex solutions.</source>
          <target state="translated">本当にシンプルなソリューション（統合に5分もかからない）が必要で、箱から出してすぐに見栄えが良い場合は、より複雑ないくつかのソリューションの代わりに&lt;a href=&quot;http://github.com/mojombo/clippy&quot;&gt;Clippy&lt;/a&gt;が適しています。</target>
        </trans-unit>
        <trans-unit id="4396c7460b71e5e545861f3498efc7f2eb5bbcab" translate="yes" xml:space="preserve">
          <source>In 2018, here's how you can go about it:</source>
          <target state="translated">2018年はこんな感じです。</target>
        </trans-unit>
        <trans-unit id="0fedc44c66a04946bf8e28caa225fdb62cd5f049" translate="yes" xml:space="preserve">
          <source>In Chrome 66 pages in active tabs can write to the clipboard without a permissions prompt.</source>
          <target state="translated">Chromeでは、アクティブなタブの66ページがパーミッションプロンプトなしでクリップボードに書き込めるようになりました。</target>
        </trans-unit>
        <trans-unit id="73b010066e6f44a5460adad9f3979ad8675fd165" translate="yes" xml:space="preserve">
          <source>In Chrome, you can create a Chrome extension that will give you &lt;a href=&quot;https://developer.chrome.com/extensions/declare_permissions&quot;&gt;clipboard permissions&lt;/a&gt; (this is what we do for Lucidchart). Then for users with your extension installed you'll just need to fire the system event yourself:</source>
          <target state="translated">Chromeでは、 &lt;a href=&quot;https://developer.chrome.com/extensions/declare_permissions&quot;&gt;クリップボードの権限&lt;/a&gt;を付与するChrome拡張機能を作成できます（これはLucidchartのために行うものです）。 次に、拡張機能がインストールされているユーザーは、システムイベントを自分で発生させる必要があります。</target>
        </trans-unit>
        <trans-unit id="49f262928b98e36cd63398cec562fecf01d84221" translate="yes" xml:space="preserve">
          <source>In Internet Explorer system administrators can disable the clipboard API.</source>
          <target state="translated">Internet Explorerのシステム管理者は、クリップボードAPIを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="83ff207cfb83713fb2ef2b79ffb028407adfdd8e" translate="yes" xml:space="preserve">
          <source>In browsers other than IE you need to use a small flash object to manipulate the clipboard, e.g.</source>
          <target state="translated">IE以外のブラウザでは、クリップボードを操作するために小さなフラッシュオブジェクトを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="68ac2ff338f18b8b5638d72d2d2203e5b3e4bccf" translate="yes" xml:space="preserve">
          <source>In some cases you might wish to copy text to the clipboard without displaying an &lt;code&gt;input&lt;/code&gt; / &lt;code&gt;textarea&lt;/code&gt; element. This is one example of a way to work around this (basically insert element, copy to clipboard, remove element):</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; / &lt;code&gt;textarea&lt;/code&gt; 要素を表示せずにテキストをクリップボードにコピーしたい場合があります。 これは、これを回避する方法の1つの例です（基本的に要素の挿入、クリップボードへのコピー、要素の削除）。</target>
        </trans-unit>
        <trans-unit id="8ecb52c26a6938186a46b1d9150c2a5dd74c9795" translate="yes" xml:space="preserve">
          <source>In your code:</source>
          <target state="translated">あなたのコードで</target>
        </trans-unit>
        <trans-unit id="27a69b4385439a997a62e9cb23e586860f6223ea" translate="yes" xml:space="preserve">
          <source>Internet Explorer 10+ (although &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms537834(v=vs.85).aspx&quot;&gt;this document&lt;/a&gt; indicates some support was there from Internet Explorer 5.5+).</source>
          <target state="translated">Internet Explorer 10以降（ただし、 &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms537834(v=vs.85).aspx&quot;&gt;このドキュメントで&lt;/a&gt;は、Internet Explorer 5.5以降で一部のサポートがあったことを示しています）。</target>
        </trans-unit>
        <trans-unit id="7e997557e991caeb301608c9fda59641c80d4330" translate="yes" xml:space="preserve">
          <source>Internet Explorer will show a permission dialog the first time the clipboard is updated.</source>
          <target state="translated">Internet Explorerでは、クリップボードが初めて更新されたときに許可ダイアログが表示されます。</target>
        </trans-unit>
        <trans-unit id="728327ee84bb45dd11d26a1df620614852b5525d" translate="yes" xml:space="preserve">
          <source>Internet Explorer, and Edge will scroll when the textarea is focused.</source>
          <target state="translated">Internet ExplorerやEdgeでは、テキストエリアにフォーカスを当てるとスクロールします。</target>
        </trans-unit>
        <trans-unit id="441ff165a02d4e7f3eb647afcb7398332b18c655" translate="yes" xml:space="preserve">
          <source>Is it supported?</source>
          <target state="translated">対応しているのでしょうか?</target>
        </trans-unit>
        <trans-unit id="e74e3a7cc7789c6f3d7604c48dc36fdee9238c62" translate="yes" xml:space="preserve">
          <source>It is easier to use than the native Zero Clipboard plugin if you're a heavy jQuery user.</source>
          <target state="translated">jQueryのヘビーユーザーであれば、ネイティブのZero Clipboardプラグインよりも使いやすいと思います。</target>
        </trans-unit>
        <trans-unit id="226c7fa1748f131d84f8d07c57ea3bdff356c116" translate="yes" xml:space="preserve">
          <source>It is used in my Angular 6+ code like so:</source>
          <target state="translated">私のAngular 6+のコードではこんな感じで使っています。</target>
        </trans-unit>
        <trans-unit id="5dfdac7976c65268a5fb891b4e5959cf4425c7ea" translate="yes" xml:space="preserve">
          <source>It looks like Firefox has &lt;a href=&quot;http://kb.mozillazine.org/Granting_JavaScript_access_to_the_clipboard&quot;&gt;some options&lt;/a&gt; that allow users to grant permissions to certain sites to access the clipboard, but I haven't tried any of these personally.</source>
          <target state="translated">Firefoxには、ユーザーが特定のサイトにクリップボードへのアクセスを許可する&lt;a href=&quot;http://kb.mozillazine.org/Granting_JavaScript_access_to_the_clipboard&quot;&gt;オプション&lt;/a&gt;がいくつかあるようですが、私はこれらのいずれも個人的に試していません。</target>
        </trans-unit>
        <trans-unit id="edc927f430f24f6f35f3e4a7227a3084dedfccfd" translate="yes" xml:space="preserve">
          <source>It seems I misread the question, but for reference, you can extract a range of the DOM (not to clipboard; compatible with all modern browsers), and combine it with the oncopy and onpaste and onbeforepaste events to get clipboard behaviour. Here's the code to achieve this:</source>
          <target state="translated">質問を読み違えたようですが、参考までに、DOM の範囲を抽出して(クリップボードにではなく)、oncopy イベント、onpaste イベント、onbeforepaste イベントと組み合わせてクリップボードの動作を得ることができます。これを実現するコードは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="9d8f3a46c7fca6b1daabdc13d2f6d760d93b3dd1" translate="yes" xml:space="preserve">
          <source>It uses jQuery, but it doesn't have to of course. You can change that if you want. I just had jQuery to my disposal. You can also add some CSS to make sure the input doesn't show. For instance something like:</source>
          <target state="translated">jQueryを使っていますが、もちろん使わなくても大丈夫です。変えたければ変えればいいんです。私はjQueryを自由に使えるようにしただけです。入力が表示されないようにCSSを追加することもできます。例えばこんな感じ。</target>
        </trans-unit>
        <trans-unit id="a4bd86a7c3a15079063de885c80184a6dee56820" translate="yes" xml:space="preserve">
          <source>It was written by a co-founder of GitHub. Example Flash embed code below:</source>
          <target state="translated">GitHubの共同創業者が書いたものです。以下にFlashの埋め込みコードの例を示します。</target>
        </trans-unit>
        <trans-unit id="441ae2489be0504cddd656371b3fb468ee094840" translate="yes" xml:space="preserve">
          <source>More gymnastics to the clipboard stuff can be done too. See more information here:</source>
          <target state="translated">クリップボードネタへの体操ももっとできます。詳しくはこちらをご覧ください。</target>
        </trans-unit>
        <trans-unit id="613745a19c347fa2918416da66368874d3291283" translate="yes" xml:space="preserve">
          <source>Most browsers support this as of ~April 2015 (see Browser Support below).</source>
          <target state="translated">2015年4月現在、ほとんどのブラウザがこれをサポートしています(下記のブラウザサポートを参照)。</target>
        </trans-unit>
        <trans-unit id="84555820fbed1808e740204d9805dcd4ba8631d3" translate="yes" xml:space="preserve">
          <source>Mozilla Firefox 41+ (shipping ~September 2015)</source>
          <target state="translated">Mozilla Firefox 41+(出荷~2015年9月)</target>
        </trans-unit>
        <trans-unit id="fb59b73ab89aa6fcc2a6a665e9fafa20988a3e9c" translate="yes" xml:space="preserve">
          <source>My bad. This only works in IE.</source>
          <target state="translated">私が悪かった。これはIEでしか動作しません。</target>
        </trans-unit>
        <trans-unit id="b6bb6bb9992b6ac79a47b50009a23dab447749b3" translate="yes" xml:space="preserve">
          <source>NOTE: This code will only work when executed as direct synchronous code to something like an 'onClick' method. If you call in an asynchronous response to Ajax or in any other asynchronous way it will not work.</source>
          <target state="translated">注意:このコードは、'onClick' メソッドのようなものに直接同期コードとして実行された場合にのみ動作します。Ajax への非同期レスポンスやその他の非同期な方法で呼び出した場合は動作しません。</target>
        </trans-unit>
        <trans-unit id="7113c6cd944b357a68fb150c1b8d2ab7d55ee8a6" translate="yes" xml:space="preserve">
          <source>Newlines and tabs can get swallowed unless you use a textarea. (Most articles seem to recommend using a div)</source>
          <target state="translated">改行やタブはtextareaを使わないと飲み込まれてしまいます。(ほとんどの記事ではdivを使うことを推奨しているようです)</target>
        </trans-unit>
        <trans-unit id="dc1ff63f306cbf40cda95e11831244d5ad29aef3" translate="yes" xml:space="preserve">
          <source>Not covered here as it doesn't directly answer the question.</source>
          <target state="translated">質問に直接答えていないので、ここでは取り上げていません。</target>
        </trans-unit>
        <trans-unit id="507551cf40759bea0c3e8450706b180596ff4384" translate="yes" xml:space="preserve">
          <source>Note compatibility detail below.</source>
          <target state="translated">以下に互換性の詳細を記載します。</target>
        </trans-unit>
        <trans-unit id="0ac312cbf7d21f2a877d3d921532b8a51b38d7e3" translate="yes" xml:space="preserve">
          <source>Note that since this post was originally written &lt;a href=&quot;https://sites.google.com/a/chromium.org/dev/Home/chromium-security/deprecating-permissions-in-cross-origin-iframes&quot;&gt;deprecation of permissions in cross-origin IFRAMEs&lt;/a&gt; and other &lt;a href=&quot;https://blog.chromium.org/2010/05/security-in-depth-html5s-sandbox.html&quot;&gt;IFRAME &quot;sandboxing&quot;&lt;/a&gt; prevents the embedded demos &quot;Run code snippet&quot; buttons and &quot;codepen.io example&quot; from working in some browsers (including Chrome and Microsoft Edge).</source>
          <target state="translated">この投稿は元々 &lt;a href=&quot;https://sites.google.com/a/chromium.org/dev/Home/chromium-security/deprecating-permissions-in-cross-origin-iframes&quot;&gt;、クロスオリジン&lt;/a&gt;の&lt;a href=&quot;https://blog.chromium.org/2010/05/security-in-depth-html5s-sandbox.html&quot;&gt;IFRAME&lt;/a&gt;と他のIFRAMEの「サンドボックス化」 での権限の非推奨のため書かれていたため、埋め込みデモの「コードスニペットの実行」ボタンと「codepen.ioの例」が一部のブラウザー（ChromeとMicrosoft Edgeを含む）で機能しないことに注意してください。 ）。</target>
        </trans-unit>
        <trans-unit id="09828435c936cfcb5084dcd64aa12bee70f98413" translate="yes" xml:space="preserve">
          <source>Note that there is an ability to &quot;request permission&quot; and test for access to the clipboard via the permissions API in Chrome 66.</source>
          <target state="translated">Chrome 66では、権限APIを介してクリップボードへのアクセスを「許可を要求」してテストする機能があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="601f2a5ad2b8b2eabbb300f2a9c49908f8729821" translate="yes" xml:space="preserve">
          <source>Note the full Clipboard API draft specification can be found here:
&lt;a href=&quot;https://w3c.github.io/clipboard-apis/&quot;&gt;https://w3c.github.io/clipboard-apis/&lt;/a&gt;</source>
          <target state="translated">完全なクリップボードAPIドラフト仕様は、 &lt;a href=&quot;https://w3c.github.io/clipboard-apis/&quot;&gt;https&lt;/a&gt; ： //w3c.github.io/clipboard-apis/にあります。</target>
        </trans-unit>
        <trans-unit id="1724bc61bec938c298ab72b89792982749c08955" translate="yes" xml:space="preserve">
          <source>Note: you will not see the textarea, as it is added and removed within the same synchronous invocation of Javascript code.</source>
          <target state="translated">注意:テキストエリアは、Javascriptコードの同じ同期呼び出し内で追加と削除が行われるため、表示されません。</target>
        </trans-unit>
        <trans-unit id="4e0b45197aee7fa10a7b6954f08be2be44cf4e16" translate="yes" xml:space="preserve">
          <source>Now the clipboard copy operation is SAFE, because the user does it manually (but in a pretty straightforward way). Of course, works in all browsers.</source>
          <target state="translated">これでクリップボードのコピー操作は、ユーザーが手動で行うのでセーフです(ただし、かなりわかりやすい方法で)。もちろん、すべてのブラウザで動作します。</target>
        </trans-unit>
        <trans-unit id="2585fb3016c95ff7aeb8916dd1ebf51ad2062e9b" translate="yes" xml:space="preserve">
          <source>On key down handler creates &quot;pre&quot; tag. We set the content to copy to this tag, then make a selection on this tag and return true in handler. This calls standard handler of chrome and copies selected text.</source>
          <target state="translated">キーを押すとハンドラは pre タグを作成します。このタグにコピーする内容を設定し、このタグ上で選択を行い、ハンドラでtrueを返します。これはクロームの標準ハンドラを呼び出し、選択されたテキストをコピーします。</target>
        </trans-unit>
        <trans-unit id="b1a133a9ad7ca178ad4930dcdeec6fc3fe0602d5" translate="yes" xml:space="preserve">
          <source>On paste it creates textarea and works the same way.</source>
          <target state="translated">ペーストするとテキストエリアが作成され、同じように動作します。</target>
        </trans-unit>
        <trans-unit id="c1007c17f6dc10dab2e3ea8f3a5784f767a6245c" translate="yes" xml:space="preserve">
          <source>Only supported on pages served over HTTPS.</source>
          <target state="translated">HTTPS で提供されるページでのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="0ed1055849b20d70dc2ed4193b22de29e88836df" translate="yes" xml:space="preserve">
          <source>Only works if the user takes an action</source>
          <target state="translated">ユーザーがアクションを起こした場合にのみ動作します。</target>
        </trans-unit>
        <trans-unit id="a7afa2821b7787ebaf599441badb8b1df7aae2aa" translate="yes" xml:space="preserve">
          <source>Opera 29+ (based on Chromium 42, ~April 2015)</source>
          <target state="translated">Opera 29+(Chromium 42をベースにしたもの、〜2015年4月</target>
        </trans-unit>
        <trans-unit id="8ed17881879518d1be4e7fea88c90c20a9ea713e" translate="yes" xml:space="preserve">
          <source>Or of course you could also do some inline styling</source>
          <target state="translated">もちろんインラインでのスタイリングも可能です。</target>
        </trans-unit>
        <trans-unit id="986c083d75d6e86c5f64dcf0876f7daff3af314b" translate="yes" xml:space="preserve">
          <source>Other than that, there are some options on a browser-by-browser basis.</source>
          <target state="translated">それ以外にも、ブラウザごとにいくつかのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="6606a3209277f2145cdabd7418aa62d5f3a3957e" translate="yes" xml:space="preserve">
          <source>Overriding the copy event</source>
          <target state="translated">コピーイベントをオーバーライドする</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="cdb12b3325a10ea3e26fdd906fdb66610b511d6f" translate="yes" xml:space="preserve">
          <source>PS may be this solution can be used for creating fully cross-browser solution without flash. Its works in FF and Chrome.</source>
          <target state="translated">PSは、このソリューションはフラッシュなしで完全なクロスブラウザソリューションを作成するために使用することができるかもしれません。FFとChromeで動作します。</target>
        </trans-unit>
        <trans-unit id="b977e67f26c9373cea5fc3c8d5791d14b0282a49" translate="yes" xml:space="preserve">
          <source>Pasting - you could do same like this (differs on your target) - keep focus on textarea and catch paste events using onpaste (in my project I use textareas in cells to edit).</source>
          <target state="translated">貼り付け-以下のようなことができます(ターゲットによって異なります)-テキストエリアにフォーカスして、onpasteを使って貼り付けイベントをキャッチします(私のプロジェクトでは、セル内のテキストエリアを使って編集しています)。</target>
        </trans-unit>
        <trans-unit id="bc617eddef5808a05fa13304523293335138e8a9" translate="yes" xml:space="preserve">
          <source>Putting text on the clipboard not during a system copy event is much more difficult. It looks like some of these other answers reference ways to do it via Flash, which is the only cross-browser way to do it (so far as I understand).</source>
          <target state="translated">システムコピーイベント中ではなく、クリップボード上にテキストを置くのはもっと難しいです。他の回答の中には、Flashを介して行う方法を参照しているものもあるようですが、これはクロスブラウザで行う唯一の方法です(私が理解している限りでは)。</target>
        </trans-unit>
        <trans-unit id="7ec8f1a665fd8b69db741b7ffd946d7d0344fb65" translate="yes" xml:space="preserve">
          <source>Reading and modifying the clipboard from a webpage raises security and privacy concerns. However, in Internet&amp;nbsp;Explorer, it is possible to do it. I found this &lt;a href=&quot;http://www.sajithmr.com/onclick-select-all-and-copy-to-clipboard-javascript/&quot;&gt;example snippet&lt;/a&gt;:</source>
          <target state="translated">Webページからクリップボードを読み取って変更すると、セキュリティとプライバシーの問題が発生します。 ただし、Internet Explorerでは可能です。 私はこの&lt;a href=&quot;http://www.sajithmr.com/onclick-select-all-and-copy-to-clipboard-javascript/&quot;&gt;例のスニペット&lt;/a&gt;を見つけました：</target>
        </trans-unit>
        <trans-unit id="6132b1e7bd98981e34c215e72361efa4a2b6bcff" translate="yes" xml:space="preserve">
          <source>Reference &lt;a href=&quot;https://www.w3.org/TR/clipboard-apis/#async-clipboard-api&quot;&gt;Async Clipboard API&lt;/a&gt; draft documentation</source>
          <target state="translated">&lt;a href=&quot;https://www.w3.org/TR/clipboard-apis/#async-clipboard-api&quot;&gt;非同期クリップボードAPI&lt;/a&gt;ドラフトドキュメントの参照</target>
        </trans-unit>
        <trans-unit id="bed2e12478c21d156c18cb0c4bde0904d90484aa" translate="yes" xml:space="preserve">
          <source>Remember to replace &lt;code&gt;#{text}&lt;/code&gt; with the text you need copied, and &lt;code&gt;#{bgcolor}&lt;/code&gt; with a color.</source>
          <target state="translated">&lt;code&gt;#{text}&lt;/code&gt; はコピーする必要のあるテキストに、 &lt;code&gt;#{bgcolor}&lt;/code&gt; は色に置き換えてください。</target>
        </trans-unit>
        <trans-unit id="9fe24af2a1a161e47e3f8895c3b2f12e0826984f" translate="yes" xml:space="preserve">
          <source>Remove the textarea from the dom.</source>
          <target state="translated">ドムからtextareaを削除します。</target>
        </trans-unit>
        <trans-unit id="d68c3601eb81dc5cf99c8da938d16b2d048b0131" translate="yes" xml:space="preserve">
          <source>Restores selection if there was one</source>
          <target state="translated">選択肢があった場合に選択を復元します。</target>
        </trans-unit>
        <trans-unit id="747f1ecccad6b2a084f6c678d408f86946e1e113" translate="yes" xml:space="preserve">
          <source>See Clipboard API documentation on &lt;a href=&quot;https://w3c.github.io/clipboard-apis/#override-copy&quot;&gt;Overriding the copy event&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://w3c.github.io/clipboard-apis/#override-copy&quot;&gt;コピーイベントのオーバーライド&lt;/a&gt;については、クリップボードAPIのドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="fc0fe9c56b8fc9f864a0f6dc096e14c1c8158387" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://developers.google.com/web/updates/2015/04/cut-and-copy-commands?hl=en&quot;&gt;Google Developers post here&lt;/a&gt; for more info.</source>
          <target state="translated">詳しくは、こちらの&lt;a href=&quot;https://developers.google.com/web/updates/2015/04/cut-and-copy-commands?hl=en&quot;&gt;Google Developersの投稿&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="e88631214c45040d1409550aaaf82c5a9d10e6f8" translate="yes" xml:space="preserve">
          <source>Select the text in the textarea.</source>
          <target state="translated">テキストエリア内のテキストを選択します。</target>
        </trans-unit>
        <trans-unit id="fdc1cd394cbb1374f1ef102987329fec493a4f9a" translate="yes" xml:space="preserve">
          <source>Sets readonly so keyboard doesn't come up on mobile devices</source>
          <target state="translated">携帯端末でキーボードが出てこないように読み取り専用に設定する</target>
        </trans-unit>
        <trans-unit id="c15fa4b758d35cc97d9959bcc45edd294156d605" translate="yes" xml:space="preserve">
          <source>Simple Example</source>
          <target state="translated">簡単な例</target>
        </trans-unit>
        <trans-unit id="8135c235c31a98216defa8fbb8f938c86e13ef37" translate="yes" xml:space="preserve">
          <source>Since Chrome 42+ and Firefox 41+ now support the &lt;strong&gt;document.execCommand('copy')&lt;/strong&gt; command. So I created a couple of functions for a cross-browser copy-to-clipboard ability using a combination of &lt;a href=&quot;https://stackoverflow.com/a/8024509/4307527&quot;&gt;Tim Down's old answer&lt;/a&gt; and &lt;a href=&quot;https://developers.google.com/web/updates/2015/04/cut-and-copy-commands?hl=en&quot;&gt;Google Developer's answer&lt;/a&gt;:</source>
          <target state="translated">Chrome 42以降とFirefox 41以降では、 &lt;strong&gt;document.execCommand（ 'copy'）&lt;/strong&gt;コマンドがサポートされるようになりました。 そこで、 &lt;a href=&quot;https://stackoverflow.com/a/8024509/4307527&quot;&gt;Tim Downの以前の回答&lt;/a&gt;と&lt;a href=&quot;https://developers.google.com/web/updates/2015/04/cut-and-copy-commands?hl=en&quot;&gt;Google Developerの回答&lt;/a&gt; の組み合わせを使用して、クロスブラウザーコピーからクリップボードへの機能用にいくつかの関数を作成しました。</target>
        </trans-unit>
        <trans-unit id="c8078f72c2940b8113477cd71feeca2d02b12354" translate="yes" xml:space="preserve">
          <source>So, when the user hit</source>
          <target state="translated">そのため、ユーザーが</target>
        </trans-unit>
        <trans-unit id="32f78d4e0fdf53e7c927fcaaa0dbc582004ccba3" translate="yes" xml:space="preserve">
          <source>Solution: create a textarea where you will be inserting data for the user to copy (for me when the user is selecting cells), set focus on it (for example, when user press</source>
          <target state="translated">解決策:テキストエリアを作成して、ユーザがコピーするためのデータを挿入する場所(私の場合はユーザがセルを選択しているとき)を作成し、そこにフォーカスを設定します(例えば、ユーザが</target>
        </trans-unit>
        <trans-unit id="72627fc713699d0a267314a9ad6ac17847b218d9" translate="yes" xml:space="preserve">
          <source>Some things to watch out for if you are implementing this yourself:</source>
          <target state="translated">自分で実施する場合に気をつけるべきことをいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="60f4d295332d2122f5d508b59a4671e7697b6d56" translate="yes" xml:space="preserve">
          <source>Tabs are converted to spaces (at least in Chrome).</source>
          <target state="translated">タブはスペースに変換されます(少なくともChromeでは)。</target>
        </trans-unit>
        <trans-unit id="ae5d7f403f0699079fdb21de9b538eae649a06c0" translate="yes" xml:space="preserve">
          <source>Tested with Google Chrome 44, Firefox 42.0a1 and Internet Explorer 11.0.8600.17814.</source>
          <target state="translated">Google Chrome 44、Firefox 42.0a1、Internet Explorer 11.0.8600.17814でテストしました。</target>
        </trans-unit>
        <trans-unit id="9386753d3626e0e79d3472cf71af89387e43c1cb" translate="yes" xml:space="preserve">
          <source>Text can be copied to the clipboard directly from a variable.</source>
          <target state="translated">変数から直接クリップボードにテキストをコピーすることができます。</target>
        </trans-unit>
        <trans-unit id="bc77d6ce85abd20c078b3651ccabfe7a1c44f6ce" translate="yes" xml:space="preserve">
          <source>Text is read from the DOM and placed on the clipboard.</source>
          <target state="translated">テキストは DOM から読み込まれ、クリップボードに配置されます。</target>
        </trans-unit>
        <trans-unit id="2bf84f1c589fa0e64d18fad37a18f439b0ffc3ae" translate="yes" xml:space="preserve">
          <source>Text-focused portion available in &lt;a href=&quot;https://developers.google.com/web/updates/2018/03/clipboardapi&quot;&gt;Chrome 66 (March 2018)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://developers.google.com/web/updates/2018/03/clipboardapi&quot;&gt;Chrome 66（2018年3月）で&lt;/a&gt;テキストに焦点を当てた部分が利用可能</target>
        </trans-unit>
        <trans-unit id="508dbcc82c35b0a2d3417deeb2456de3548adefb" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand&quot;&gt;&lt;code&gt;document.execCommand('copy')&lt;/code&gt;&lt;/a&gt; support has grown, see the links below for browser updates:</source>
          <target state="translated">JavaScriptの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand&quot;&gt; &lt;code&gt;document.execCommand('copy')&lt;/code&gt; &lt;/a&gt;サポートが拡大しました。ブラウザーの更新については、以下のリンクを参照してください。</target>
        </trans-unit>
        <trans-unit id="d8bbd68d529d00d4053d53061389f1306fe9736c" translate="yes" xml:space="preserve">
          <source>The above simple example works great if there is a &lt;code&gt;textarea&lt;/code&gt; or &lt;code&gt;input&lt;/code&gt; element visible on screen.</source>
          <target state="translated">上記の簡単な例は、 &lt;code&gt;textarea&lt;/code&gt; または &lt;code&gt;input&lt;/code&gt; 要素が画面に表示されている場合に最適です。</target>
        </trans-unit>
        <trans-unit id="15906d76c75f558b48333733c2480be23e8817c2" translate="yes" xml:space="preserve">
          <source>The following approach works in Chrome, Firefox, Internet Explorer and Edge, and in recent versions of Safari (copy support was added in version 10 which was released Oct 2016).</source>
          <target state="translated">以下のアプローチは、Chrome、Firefox、Internet Explorer、Edge、および最近のバージョンのSafariで動作します(2016年10月にリリースされたバージョン10ではコピーサポートが追加されました)。</target>
        </trans-unit>
        <trans-unit id="8b67de39df34127a60b5e61678de7d1ad2da8b79" translate="yes" xml:space="preserve">
          <source>The function below should handle all of the following issues as cleanly as possible. Please leave a comment if you find any problems or have any suggestions for improving it.</source>
          <target state="translated">以下の機能では、以下のような問題点をできるだけきれいに処理してください。何か問題点を見つけたり、改善のための提案があればコメントを残してください。</target>
        </trans-unit>
        <trans-unit id="8f442eece98029b4afac29d398c7570cd2ac0fae" translate="yes" xml:space="preserve">
          <source>The other methods will copy plain text to the clipboard. To copy HTML (ie, you can paste results into a WSIWYG editor), you can do the following in &lt;strong&gt;IE ONLY&lt;/strong&gt;. This is is fundamentally different from the other methods, as the browser actually visibly selects the content.</source>
          <target state="translated">他のメソッドはプレーンテキストをクリップボードにコピーします。 HTMLをコピーするには（つまり、結果をWSIWYGエディターに貼り付けることができます）、 &lt;strong&gt;IEでのみ&lt;/strong&gt;以下を実行できます。 ブラウザは実際に目に見える形でコンテンツを選択するため、これは他の方法とは根本的に異なります。</target>
        </trans-unit>
        <trans-unit id="b8e1994f9cc3b72a15f33aa0f25f3a5e041f7cbf" translate="yes" xml:space="preserve">
          <source>The rest of this post goes into the nuances and detail of the &lt;code&gt;document.execCommand('copy')&lt;/code&gt; API.</source>
          <target state="translated">この投稿の残りの部分では、 &lt;code&gt;document.execCommand('copy')&lt;/code&gt; APIのニュアンスと詳細について説明します。</target>
        </trans-unit>
        <trans-unit id="ebc63cf665aa02bf5e804dad09fafdcd5901b71f" translate="yes" xml:space="preserve">
          <source>The solution is to overly a flash object above the Copy button, or whatever element initiates the copy. Zero Clipboard is currently the best library with this implementation. Experienced Flash developers may just want to make their own library.</source>
          <target state="translated">解決策は、コピーボタンの上にフラッシュオブジェクトを過剰に配置したり、コピーを開始する要素が何であれ、その上にフラッシュオブジェクトを配置したりすることです。Zero Clipboardが現在のところこの実装を持つ最高のライブラリです。経験豊富なFlash開発者は、独自のライブラリを作りたいだけかもしれません。</target>
        </trans-unit>
        <trans-unit id="4c825b892ef628587c4987a6d89570fad751f926" translate="yes" xml:space="preserve">
          <source>The textarea will be visible while the Internet Explorer dialog is shown, you either need to hide it, or use the Internet Explorer specific clipboardData API.</source>
          <target state="translated">Internet Explorerダイアログが表示されている間はテキストエリアが表示されますので、テキストエリアを非表示にするか、Internet Explorer固有のclipboardData APIを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="c6c429f2097e26821cf68086962d8263a67b50c9" translate="yes" xml:space="preserve">
          <source>The user is presented with the prompt box, where the text to be copied is already selected. Now it's enough to press</source>
          <target state="translated">ユーザーは、コピーするテキストがすでに選択されているプロンプトボックスが表示されます。ここで</target>
        </trans-unit>
        <trans-unit id="d5d9a9c73c2b7750c0eb54a396cc46a0c85fc19b" translate="yes" xml:space="preserve">
          <source>There are many answers already, however like to add one (jQuery). Works great on any browser, also mobile ones (i.e., prompts about security, but when you accept it just works fine).</source>
          <target state="translated">すでに多くの答えがありますが、しかし、1つ(jQuery)を追加したい。どのようなブラウザでも動作し、また、モバイルのもの(すなわち、セキュリティについてのプロンプトが表示されますが、あなたが受け入れるとき、それはちょうどうまく動作します)。</target>
        </trans-unit>
        <trans-unit id="f72dba8dec71e6aa36c0d357f3e56e593d830816" translate="yes" xml:space="preserve">
          <source>There are three primary browser APIs for copying to the clipboard:</source>
          <target state="translated">クリップボードにコピーするための主要なブラウザAPIは3つあります。</target>
        </trans-unit>
        <trans-unit id="4723f87aee0ab1683356a1aa853597e1dae53825" translate="yes" xml:space="preserve">
          <source>This is a bit of a combination between the other answers.</source>
          <target state="translated">これは他の回答との兼ね合いもありますね。</target>
        </trans-unit>
        <trans-unit id="7e0d0403fb6e441244b5a78579484dce4a04ef34" translate="yes" xml:space="preserve">
          <source>This is an expansion of @Chase's answer, with the advantage that it will work for IMAGE and TABLE elements, not just DIVs on IE9.</source>
          <target state="translated">これは@Chaseさんの回答を拡張したもので、IE9のDIVだけでなく、IMAGEやTABLE要素でも動作するという利点があります。</target>
        </trans-unit>
        <trans-unit id="27b64e569ebd1c2b5923ac49b03c5f5a2d9369dd" translate="yes" xml:space="preserve">
          <source>This is the most simple in IE, where you can access the clipboardData object at anytime from JavaScript via:</source>
          <target state="translated">これはIEでは一番シンプルで、JavaScriptからいつでもclipboardDataオブジェクトにアクセスできるようになっています。</target>
        </trans-unit>
        <trans-unit id="f4a2e16c9979f1f5b053b7555cbc434f9551aeaf" translate="yes" xml:space="preserve">
          <source>This was the only thing I ever got working, after looking up various ways all around the Internet. This is a messy topic. There are lots of solutions posted around the world and most of them do &lt;em&gt;not&lt;/em&gt; work. This worked for me:</source>
          <target state="translated">これは、インターネット全体でさまざまな方法を調べた後、私がこれまでに作業した唯一のものでした。 これは厄介なトピックです。 世界中に多数のソリューションが投稿されており、それらのほとんどは機能しませ&lt;em&gt;ん&lt;/em&gt; 。 これは私のために働きました：</target>
        </trans-unit>
        <trans-unit id="a05967935c50ad730650f42dda5b40885cafa8f9" translate="yes" xml:space="preserve">
          <source>To copy a selected text ('Text To Copy') to your clipboard, create a Bookmarklet (browser bookmark that executes JavaScript) and execute it (click on it). It will create a temporary textarea.</source>
          <target state="translated">選択したテキスト(「テキストをコピーする」)をクリップボードにコピーするには、ブックマークレット(JavaScriptを実行するブラウザのブックマーク)を作成して実行します(クリックしてください)。一時的なテキストエリアが作成されます。</target>
        </trans-unit>
        <trans-unit id="eb5880b39bfefd35310fd92b9ec3b91268199751" translate="yes" xml:space="preserve">
          <source>To develop create your own web page, serve that page over HTTPS connection to test and develop against.</source>
          <target state="translated">独自のウェブページを開発するには、HTTPS接続を介してそのページをテストして開発するために提供しています。</target>
        </trans-unit>
        <trans-unit id="4d9f2128a20a0c320cec0e36ba3b5138c7f697e5" translate="yes" xml:space="preserve">
          <source>Usage &amp;amp; examples are at &lt;a href=&quot;https://zenorocha.github.io/clipboard.js/&quot;&gt;https://zenorocha.github.io/clipboard.js/&lt;/a&gt;.</source>
          <target state="translated">使用法と例は&lt;a href=&quot;https://zenorocha.github.io/clipboard.js/&quot;&gt;https://zenorocha.github.io/clipboard.js/にあります&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="1156a1c9a8d87e54a6af37927cd1b5b00937db3d" translate="yes" xml:space="preserve">
          <source>Usage: &lt;code&gt;copyToClipboard('some text')&lt;/code&gt;</source>
          <target state="translated">使用法： &lt;code&gt;copyToClipboard('some text')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="39fd3332ce20ebc85822b1a117a4705328b2806f" translate="yes" xml:space="preserve">
          <source>Uses cssText to avoid exceptions in Internet&amp;nbsp;Explorer as opposed to style directly.</source>
          <target state="translated">直接スタイルを設定するのではなく、cssTextを使用してInternet Explorerの例外を回避します。</target>
        </trans-unit>
        <trans-unit id="75eb7a68828d4e8cb80b6749b235c1a598e8fc74" translate="yes" xml:space="preserve">
          <source>We can get it on npm:</source>
          <target state="translated">npmで取得できます。</target>
        </trans-unit>
        <trans-unit id="a049d6da97830a21b630abe9c8de5f32fdb468ec" translate="yes" xml:space="preserve">
          <source>What is the best way to copy text to the clipboard? (multi-browser)</source>
          <target state="translated">テキストをクリップボードにコピーする最適な方法は?(マルチブラウザ)</target>
        </trans-unit>
        <trans-unit id="4273378585f392a795e93da5cbd3c51d633af541" translate="yes" xml:space="preserve">
          <source>Whilst a simple call to &lt;code&gt;document.execCommand('copy')&lt;/code&gt; wrapped in a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; block called as a result of a user click will get you the most compatibility use the following has some provisos:</source>
          <target state="translated">ユーザーのクリックの結果として呼び出される &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; ブロックにラップされた &lt;code&gt;document.execCommand('copy')&lt;/code&gt; への単純な呼び出しで、最も互換性のある方法が得られますが、以下の条件があります。</target>
        </trans-unit>
        <trans-unit id="1f7ba45752ccdc6a13661633b09ac1ba6c77fa69" translate="yes" xml:space="preserve">
          <source>ZeroClipboard is the best cross-browser solution I've found:</source>
          <target state="translated">ZeroClipboardは、私が見つけた中で最高のクロスブラウザソリューションです。</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="332e94c9515c242af1486fca7150abe944335f1c" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;document.queryCommandEnabled('copy')&lt;/code&gt; return &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;document.execCommand('copy')&lt;/code&gt; will succeed if called now. Checking to ensure the command was called from a user-initiated thread and other requirements are met.</source>
          <target state="translated">&lt;code&gt;document.execCommand('copy')&lt;/code&gt; が今呼び出されて成功した場合、 document.queryCommandEnabled（ 'copy'）は &lt;code&gt;true&lt;/code&gt; を返します 。 ユーザーが開始したスレッドからコマンドが呼び出され、他の要件が満たされていることを確認するためのチェック。</target>
        </trans-unit>
        <trans-unit id="390cc0729a1e15ac403e88d49c76a495778dfb20" translate="yes" xml:space="preserve">
          <source>but in Internet Explorer it gives a syntax error. In Firefox, it says &lt;code&gt;unsafeWindow is not defined&lt;/code&gt;.</source>
          <target state="translated">しかし、Internet Explorerでは、構文エラーが発生します。 Firefoxでは、 &lt;code&gt;unsafeWindow is not defined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c82ae62f59b07f9377d33b857781fbc0462e3e9" translate="yes" xml:space="preserve">
          <source>clipboard.js is also on &lt;a href=&quot;https://github.com/lgarron/clipboard.js&quot;&gt;GitHub&lt;/a&gt;.</source>
          <target state="translated">clipboard.jsも&lt;a href=&quot;https://github.com/lgarron/clipboard.js&quot;&gt;GitHubにあります&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="506de0e2e3e9145a78cd5152e58c530f2478a6df" translate="yes" xml:space="preserve">
          <source>document.execCommand('copy')</source>
          <target state="translated">document.execCommand('copy')</target>
        </trans-unit>
        <trans-unit id="e100de9d38a3f62eeca5021fb664afcfdce1a12a" translate="yes" xml:space="preserve">
          <source>execCommand() may throw in some cases.</source>
          <target state="translated">execCommand()がスローされる場合があります。</target>
        </trans-unit>
        <trans-unit id="4d662d0f04bc742c958f773b286715d45788cd96" translate="yes" xml:space="preserve">
          <source>he/she gets copied cells he/she selected. After testing just resizing the textarea to one pixel (I didn't test if it will be working on display:none). It works nicely on all browsers, and it is transparent to the user.</source>
          <target state="translated">選択したセルがコピーされてしまいます。テストの後、テキストエリアのサイズを1ピクセルに変更しただけです(display:noneで動作するかどうかはテストしていません)。これはすべてのブラウザでうまく動作し、ユーザには透過的です。</target>
        </trans-unit>
        <trans-unit id="24040123f74614cf029df86ab2a4e90e958b5bb9" translate="yes" xml:space="preserve">
          <source>or uses the browser's menu).</source>
          <target state="translated">またはブラウザのメニューを使用します)。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
