<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/400212">
    <body>
      <group id="400212">
        <trans-unit id="e96265ca08352edfa32340b6268ab393f44a98ab" translate="yes" xml:space="preserve">
          <source>(When you attempt to do this outside of a system cut, copy, or paste event, however, IE will prompt the user to grant the web application clipboard permission.)</source>
          <target state="translated">(当你试图在系统剪切、复制或粘贴事件之外进行此操作时,IE会提示用户授予Web应用程序剪贴板权限)。</target>
        </trans-unit>
        <trans-unit id="e75d4528da466a3f3a6b52f228adf83ca40595a4" translate="yes" xml:space="preserve">
          <source>(codepen.io example may not work, read &quot;important&quot; note above)
Note that this snippet is not working well in Stack Overflow's embedded preview you can try it here: &lt;a href=&quot;https://codepen.io/DeanMarkTaylor/pen/RMRaJX?editors=1011&quot;&gt;https://codepen.io/DeanMarkTaylor/pen/RMRaJX?editors=1011&lt;/a&gt;</source>
          <target state="translated">（codepen.io示例可能无法正常工作，请阅读上面的&amp;ldquo;重要&amp;rdquo;注释）请注意，此代码段在Stack Overflow的嵌入式预览中效果不佳，您可以在此处尝试： &lt;a href=&quot;https://codepen.io/DeanMarkTaylor/pen/RMRaJX?editors=1011&quot;&gt;https&lt;/a&gt; ://codepen.io/DeanMarkTaylor/pen/RMRaJX?editors = 1011</target>
        </trans-unit>
        <trans-unit id="1fb518efe4067aac236903a3806a7cd6e532e917" translate="yes" xml:space="preserve">
          <source>(may not work embedded in this site, read &quot;important&quot; note above)</source>
          <target state="translated">(可能无法在本网站中嵌入工作,请阅读上面的 &quot;重要 &quot;说明)</target>
        </trans-unit>
        <trans-unit id="6e1d86c4f47dc109e9dc3341481977c9eb0c4f4d" translate="yes" xml:space="preserve">
          <source>(to close the box) -- and voila!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcda7580dd706e3a97aa3af104c1ceef61336907" translate="yes" xml:space="preserve">
          <source>) and select the whole text.</source>
          <target state="translated">)并选择全文。</target>
        </trans-unit>
        <trans-unit id="a979ef10cc6f6a36df6b8a323307ee3bb2e2db9c" translate="yes" xml:space="preserve">
          <source>+</source>
          <target state="translated">+</target>
        </trans-unit>
        <trans-unit id="6e59b1e479a3507b1b429a7a5ca97870076d4c70" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.npmjs.com/package/clipboard-js&quot;&gt;clipboard.js&lt;/a&gt; is a small, non-Flash, utility that allows copying of text or HTML data to the clipboard. It's very easy to use, just include the .js and use something like this:</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/clipboard-js&quot;&gt;剪贴板.js&lt;/a&gt;是一个小型的非Flash实用程序，允许将文本或HTML数据复制到剪贴板。 它非常易于使用，只需添加.js并使用如下代码：</target>
        </trans-unit>
        <trans-unit id="21d27b63ba67cbc2ef3a06687792bd29f5d3beb5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.w3.org/TR/clipboard-apis/#async-clipboard-api&quot;&gt;Async Clipboard API&lt;/a&gt;&lt;code&gt;[navigator.clipboard.writeText]&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;https://www.w3.org/TR/clipboard-apis/#async-clipboard-api&quot;&gt;异步剪贴板API&lt;/a&gt; &lt;code&gt;[navigator.clipboard.writeText]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b17956a95dc62ccc551f30b9bde03106544a715" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;document.queryCommandSupported('copy')&lt;/code&gt; should return &lt;code&gt;true&lt;/code&gt; if the command &quot;is supported by the browser&quot;.</source>
          <target state="translated">如果命令&amp;ldquo;受浏览器支持&amp;rdquo;，则 &lt;code&gt;document.queryCommandSupported('copy')&lt;/code&gt; 应返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9dee8f56e317d9e1f26e426598fce6c9643776e6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2018/03/clipboardapi&quot;&gt;Unblocking Clipboard Access&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2018/03/clipboardapi&quot;&gt;解锁剪贴板访问&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5ba9a7d3abc89a175ca501248abe55ef2e6cad77" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Warning&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Warning&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="491f65549f02309068c86c19484bdf480ea8414b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IMPORTANT&lt;/strong&gt; (noted here 2020/02/20)</source>
          <target state="translated">&lt;strong&gt;重要事项&lt;/strong&gt; （在此注明2020/02/20）</target>
        </trans-unit>
        <trans-unit id="fcf52df4659a40030c57b9de8fc95a86ebb7b90b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This has been deprecated now. Migrate to &lt;a href=&quot;https://github.com/lgarron/clipboard-polyfill&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;现在不建议使用。 移到&lt;a href=&quot;https://github.com/lgarron/clipboard-polyfill&quot;&gt;这里&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb2dad28be75fee151e85e9c1acf1490c5cc8584" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;em&gt;The &lt;code&gt;document.execCommand()&lt;/code&gt; method is not supported in Internet Explorer 9 and earlier.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt; &lt;em&gt;Internet Explorer 9和更早版本不支持 &lt;code&gt;document.execCommand()&lt;/code&gt; 方法。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="73c0cf44d26fb97edb64bb0aca4fb18f4ec6dde8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Source&lt;/strong&gt;: &lt;a href=&quot;https://www.w3schools.com/howto/howto_js_copy_clipboard.asp&quot;&gt;W3Schools - &lt;em&gt;Copy Text to Clipboard&lt;/em&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;来源&lt;/strong&gt; ： &lt;a href=&quot;https://www.w3schools.com/howto/howto_js_copy_clipboard.asp&quot;&gt;W3Schools- &lt;em&gt;将文本复制到剪贴板&lt;/em&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5b55b3f305d5787fd2eb96ce9506e83fb2dfad23" translate="yes" xml:space="preserve">
          <source>@korayem: Note that using html &lt;code&gt;input&lt;/code&gt; field won't respect line breaks &lt;code&gt;\n&lt;/code&gt; and will flatten any text into a single line.</source>
          <target state="translated">@korayem：请注意，使用html &lt;code&gt;input&lt;/code&gt; 字段将不遵守换行符 &lt;code&gt;\n&lt;/code&gt; 并且会将所有文本拼合为一行。</target>
        </trans-unit>
        <trans-unit id="67c421ebd761fa59a8235480e325252af646a300" translate="yes" xml:space="preserve">
          <source>A nice trick without flash: &lt;a href=&quot;https://stackoverflow.com/questions/17527870/how-does-trello-access-the-users-clipboard&quot;&gt;How does Trello access the user's clipboard?&lt;/a&gt;</source>
          <target state="translated">一个没有Flash的好窍门： &lt;a href=&quot;https://stackoverflow.com/questions/17527870/how-does-trello-access-the-users-clipboard&quot;&gt;Trello如何访问用户的剪贴板？&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="856d306566ddd4dcad729102f7f41d26f5f71ec0" translate="yes" xml:space="preserve">
          <source>Access is asynchronous and uses &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/promises&quot;&gt;JavaScript Promises&lt;/a&gt;, can be written so security user prompts (if displayed) don't interrupt the JavaScript in page.</source>
          <target state="translated">访问是异步的，并且使用&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/promises&quot;&gt;JavaScript Promises&lt;/a&gt; ，可以编写，因此安全用户提示（如果显示）不会中断页面​​中的JavaScript。</target>
        </trans-unit>
        <trans-unit id="32d6539eb3cb225eaaf1c2f918ecde419feaed0c" translate="yes" xml:space="preserve">
          <source>Access is synchronous, i.e. stops JavaScript in the page until complete including displaying and user interacting with any security prompts.</source>
          <target state="translated">访问是同步的,即停止页面中的JavaScript,直到完成包括显示和用户与任何安全提示的交互。</target>
        </trans-unit>
        <trans-unit id="41b5f2e6aebc43182a4eee3c33dbf7e657d4ea1a" translate="yes" xml:space="preserve">
          <source>Additional notes</source>
          <target state="translated">补充说明</target>
        </trans-unit>
        <trans-unit id="8225c019b26f4a9de1e9728e509c5133a235f100" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;document.execCommand('copy')&lt;/code&gt; calls must take place as a direct result of a user action, e.g. click event handler. This is a measure to prevent messing with the user's clipboard when they don't expect it.</source>
          <target state="translated">所有 &lt;code&gt;document.execCommand('copy')&lt;/code&gt; 调用必须直接作为用户操作（例如，单击事件处理程序）的结果而发生。 这是一种防止在用户不期望的时候弄乱用户剪贴板的措施。</target>
        </trans-unit>
        <trans-unit id="acf1ba18187e59703bde0e9bdb9a34c3dc35dea0" translate="yes" xml:space="preserve">
          <source>Allows you to modify what appears on the clipboard from any copy event, can include other formats of data other than plain text.</source>
          <target state="translated">允许你从任何复制事件中修改剪贴板上出现的内容,可以包括纯文本以外的其他格式的数据。</target>
        </trans-unit>
        <trans-unit id="c385ea5eb927cc1c6219db7ea47412df630f7933" translate="yes" xml:space="preserve">
          <source>And also on &lt;a href=&quot;https://bower.io/&quot;&gt;Bower&lt;/a&gt;</source>
          <target state="translated">还有&lt;a href=&quot;https://bower.io/&quot;&gt;鲍尔&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="55bc94285ac46dcaf58b2bbefd041e1746065f58" translate="yes" xml:space="preserve">
          <source>And if you need you may be set the timeout for function for restoring previous selection. My implementation on Mootools:</source>
          <target state="translated">如果你需要的话,你可以设置超时功能来恢复之前的选择。我在Mootools上的实现。</target>
        </trans-unit>
        <trans-unit id="32f881cc6ba6e48100b4e5da0aa60f8169934e6b" translate="yes" xml:space="preserve">
          <source>Any call to &lt;code&gt;document.execCommand&lt;/code&gt;, &lt;code&gt;document.queryCommandSupported&lt;/code&gt; or &lt;code&gt;document.queryCommandEnabled&lt;/code&gt; should be wrapped in a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; block.</source>
          <target state="translated">任何对 &lt;code&gt;document.execCommand&lt;/code&gt; ， &lt;code&gt;document.queryCommandSupported&lt;/code&gt; 或 &lt;code&gt;document.queryCommandEnabled&lt;/code&gt; 的调用都应包装在 &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; 块中。</target>
        </trans-unit>
        <trans-unit id="26d0e98fe2bcb7cc7b175d7915bc8309e4ca7ff5" translate="yes" xml:space="preserve">
          <source>Append the textarea to the DOM.</source>
          <target state="translated">将textarea附加到DOM中。</target>
        </trans-unit>
        <trans-unit id="68bcd8b744e2ec804f09412a959f90b18b569ca8" translate="yes" xml:space="preserve">
          <source>As mentioned by @nikksan in the comments, using &lt;code&gt;textarea&lt;/code&gt; will fix the problem as follows:</source>
          <target state="translated">正如@nikksan在评论中提到的那样，使用 &lt;code&gt;textarea&lt;/code&gt; 可以解决以下问题：</target>
        </trans-unit>
        <trans-unit id="a1598e8aed758a6728c7fb478f53b10ad524fd2b" translate="yes" xml:space="preserve">
          <source>As of Flash 10, you can only copy to clipboard if the action originates from user interaction with a Flash object. (&lt;a href=&quot;http://www.adobe.com/devnet/flashplayer/articles/fplayer10_security_changes_02.html#head31&quot;&gt;Read related section from Adobe's Flash 10 announcement&lt;/a&gt;)</source>
          <target state="translated">从Flash 10开始，如果操作源自用户与Flash对象的交互，则只能复制到剪贴板。 （ &lt;a href=&quot;http://www.adobe.com/devnet/flashplayer/articles/fplayer10_security_changes_02.html#head31&quot;&gt;阅读Adobe Flash 10公告中的相关部分&lt;/a&gt; ）</target>
        </trans-unit>
        <trans-unit id="9834bc520e4a3d79cdacd2836542d974b65eea37" translate="yes" xml:space="preserve">
          <source>Async + Fallback</source>
          <target state="translated">异步+回退</target>
        </trans-unit>
        <trans-unit id="e8982a208f6308653ea4601ca5affa8f4edada81" translate="yes" xml:space="preserve">
          <source>Async Clipboard API</source>
          <target state="translated">Async Clipboard API</target>
        </trans-unit>
        <trans-unit id="5a1033034be2c962601239fa8b9fad424724f57e" translate="yes" xml:space="preserve">
          <source>Auto copy to clipboard</source>
          <target state="translated">自动复制到剪贴板</target>
        </trans-unit>
        <trans-unit id="d970c27652652d6344e43e1ae8089db42550a170" translate="yes" xml:space="preserve">
          <source>Automatic copying to clipboard may be dangerous, therefore most browsers (except IE) make it very difficult. Personally, I use the following simple trick:</source>
          <target state="translated">自动复制到剪贴板上可能是很危险的,因此大多数浏览器(IE除外)都会让它变得非常困难。就我个人而言,我用的是下面这个简单的技巧。</target>
        </trans-unit>
        <trans-unit id="2464a46af3bc6def3dfe2724b5e3fac23922690b" translate="yes" xml:space="preserve">
          <source>Browser Compatibility Detail</source>
          <target state="translated">浏览器兼容性详情</target>
        </trans-unit>
        <trans-unit id="02a8c960030f2f9457b2f49cecd3b0e346163641" translate="yes" xml:space="preserve">
          <source>Browser Support</source>
          <target state="translated">浏览器支持</target>
        </trans-unit>
        <trans-unit id="32096c2e0eff33d844ee6d675407ace18289357d" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="translated">C</target>
        </trans-unit>
        <trans-unit id="fc1ddd1fa4e0d9b8931e660ae31c11ef1c1f8999" translate="yes" xml:space="preserve">
          <source>Call document.execCommand(&quot;copy&quot;)</source>
          <target state="translated">调用document.execCommand(&quot;copy&quot;)</target>
        </trans-unit>
        <trans-unit id="f0eeff0d8b325dfbf6d9acdbe62d0b35dfc87061" translate="yes" xml:space="preserve">
          <source>Chrome 66 announcement post (March 2018)</source>
          <target state="translated">铬66公告帖(2018年3月)</target>
        </trans-unit>
        <trans-unit id="e048451cc6753ab456b5e3b1a7c4bc5d5e7bb3ff" translate="yes" xml:space="preserve">
          <source>Clipboard API</source>
          <target state="translated">剪贴板API</target>
        </trans-unit>
        <trans-unit id="560a5acaae3a950849068f68836522e4b60eca5e" translate="yes" xml:space="preserve">
          <source>Code from GitHub:</source>
          <target state="translated">代码来自GitHub。</target>
        </trans-unit>
        <trans-unit id="1e9fe90b0108a403efdb3d5753637abb2eddc389" translate="yes" xml:space="preserve">
          <source>Complex Example: Copy to clipboard without displaying input</source>
          <target state="translated">复杂的例子。复制到剪贴板而不显示输入</target>
        </trans-unit>
        <trans-unit id="1f9fd959c733298081d99378186853f50833c3ea" translate="yes" xml:space="preserve">
          <source>Copy text from HTML input to the clipboard:</source>
          <target state="translated">将HTML输入的文本复制到剪贴板上。</target>
        </trans-unit>
        <trans-unit id="c9e1ab00b00b8f1d4ade2421d1366b3384e9274f" translate="yes" xml:space="preserve">
          <source>Copying plain text to the clipboard is relatively simple, assuming you want to do it during a system copy event (user presses</source>
          <target state="translated">复制纯文本到剪贴板相对简单,假设你想在系统复制事件中进行复制(用户按下</target>
        </trans-unit>
        <trans-unit id="3421219dee9df20a58e105115b618942d922a453" translate="yes" xml:space="preserve">
          <source>Create a textarea and set its contents to the text you want copied to the clipboard.</source>
          <target state="translated">创建一个文本区域,并将其内容设置为你想要复制到剪贴板的文本。</target>
        </trans-unit>
        <trans-unit id="dd6a02a553da4cb247f914011dd67c37487ec082" translate="yes" xml:space="preserve">
          <source>Ctrl</source>
          <target state="translated">Ctrl</target>
        </trans-unit>
        <trans-unit id="aed5b4d8e351ae74e3ace403f868fc20762ffdcc" translate="yes" xml:space="preserve">
          <source>Different browser implementations and browser versions throw differing types of exceptions when called instead of returning &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">调用时，不同的浏览器实现和浏览器版本会引发不同类型的异常，而不是返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5a226ccf6af51fb95b675284c85897bb89775745" translate="yes" xml:space="preserve">
          <source>Different browser implementations are still in flux and the &lt;a href=&quot;https://w3c.github.io/clipboard-apis/&quot;&gt;Clipboard API&lt;/a&gt; is still in draft, so remember to do your testing.</source>
          <target state="translated">各种浏览器实现仍在不断发展，而&lt;a href=&quot;https://w3c.github.io/clipboard-apis/&quot;&gt;Clipboard API&lt;/a&gt;仍在起草阶段，因此请记住进行测试。</target>
        </trans-unit>
        <trans-unit id="28740c6842d7eb88bad092a74e279396ffcd3536" translate="yes" xml:space="preserve">
          <source>Don't expect clipboard related commands to work whilst you are testing code in the console. Generally the page is required to be active (Async Clipboard API) or requires user interaction (e.g. a user click) to allow (&lt;code&gt;document.execCommand('copy')&lt;/code&gt;) to access the clipboard see below for more detail.</source>
          <target state="translated">在控制台中测试代码时，不要期望剪贴板相关的命令能够正常工作。 通常，页面需要处于活动状态（异步剪贴板API）或需要用户交互（例如，用户单击）才能允许（ &lt;code&gt;document.execCommand('copy')&lt;/code&gt; ）访问剪贴板，有关更多详细信息，请参见下文。</target>
        </trans-unit>
        <trans-unit id="9a1d594eb2d8591a4d909166f374bda0554437bb" translate="yes" xml:space="preserve">
          <source>Due to the level of browser support for the new Async Clipboard API you will likely want to fallback to the &lt;code&gt;document.execCommand('copy')&lt;/code&gt; method to get good browser coverage.</source>
          <target state="translated">由于浏览器对新的Async Clipboard API的支持水平，您可能希望回退到 &lt;code&gt;document.execCommand('copy')&lt;/code&gt; 方法以获得良好的浏览器覆盖率。</target>
        </trans-unit>
        <trans-unit id="5a22dc9f176d880860261392386d3fa4eee3c704" translate="yes" xml:space="preserve">
          <source>During testing ~April 2015 only Internet Explorer was noted as displaying permissions prompts whilst writing to the clipboard.</source>
          <target state="translated">在2015年4月的测试中,只有Internet Explorer在向剪贴板书写时显示权限提示。</target>
        </trans-unit>
        <trans-unit id="2b9eceb7a86a9f577ef80586c5c1d7fde9ff493d" translate="yes" xml:space="preserve">
          <source>Enter</source>
          <target state="translated">Enter</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">扩展片段</target>
        </trans-unit>
        <trans-unit id="92098df6a3dbfbc7a91d4337f6c353653b8dddf1" translate="yes" xml:space="preserve">
          <source>For security reasons, this can only called from an event handler such as click (Just as with opening windows).</source>
          <target state="translated">出于安全考虑,这只能从事件处理程序中调用(就像打开窗口一样)。</target>
        </trans-unit>
        <trans-unit id="ca83a58af2fa61f2776c5410eefb27139675814c" translate="yes" xml:space="preserve">
          <source>From one of the projects I've been working on, a jQuery copy-to-clipboard plugin that utilizes the &lt;a href=&quot;https://github.com/patricklodder/jquery-zclip&quot;&gt;Zero Clipboard&lt;/a&gt; library.</source>
          <target state="translated">在我正在从事的项目之一中，一个使用&lt;a href=&quot;https://github.com/patricklodder/jquery-zclip&quot;&gt;零剪贴板&lt;/a&gt;库的jQuery复制到剪贴板插件。</target>
        </trans-unit>
        <trans-unit id="ec15b457aaa9f705d48240bfff948700326decbe" translate="yes" xml:space="preserve">
          <source>General development notes</source>
          <target state="translated">一般发展说明</target>
        </trans-unit>
        <trans-unit id="de606c275ead21eb18671a59a0197493aa4e6707" translate="yes" xml:space="preserve">
          <source>Google Chrome 43+ (~April 2015)</source>
          <target state="translated">谷歌浏览器43+(~2015年4月)</target>
        </trans-unit>
        <trans-unit id="6cd83e1c00736c966907a051dca51ccecd49dd23" translate="yes" xml:space="preserve">
          <source>Has a workaround for iOS so that it actually works as it normally blocks execCommand.</source>
          <target state="translated">有一个iOS系统的变通方法,这样它就可以像正常情况下阻止execCommand一样,实际工作。</target>
        </trans-unit>
        <trans-unit id="027e4d51af3a2706d15e492657818f5ff727db7d" translate="yes" xml:space="preserve">
          <source>Here is a simple example (may not work embedded in this site, read &quot;important&quot; note above):</source>
          <target state="translated">这里有一个简单的例子(可能在本网站中不一定能嵌入,请阅读上面的 &quot;重要 &quot;说明)。</target>
        </trans-unit>
        <trans-unit id="ff28e34c7b269519a1250c40752aa30a3f526707" translate="yes" xml:space="preserve">
          <source>Here is a test/demo page which demonstrates the code working:
&lt;a href=&quot;https://deanmarktaylor.github.io/clipboard-test/&quot;&gt;https://deanmarktaylor.github.io/clipboard-test/&lt;/a&gt;</source>
          <target state="translated">这是一个测试/演示页面，演示了代码的工作原理： &lt;a href=&quot;https://deanmarktaylor.github.io/clipboard-test/&quot;&gt;https&lt;/a&gt; : //deanmarktaylor.github.io/clipboard-test/</target>
        </trans-unit>
        <trans-unit id="b1e57f745fbd5cae8d9184892ad97542e92eeb37" translate="yes" xml:space="preserve">
          <source>Here is my take on that one...</source>
          <target state="translated">这是我的看法......</target>
        </trans-unit>
        <trans-unit id="5ef0e3e404407e991996a23ad4564c3121299baa" translate="yes" xml:space="preserve">
          <source>Here it is:</source>
          <target state="translated">就在这里。</target>
        </trans-unit>
        <trans-unit id="dd1e3d1c363e66eba074ecf268f04fd481a7afa3" translate="yes" xml:space="preserve">
          <source>Here's yet another way to copy text:</source>
          <target state="translated">这里是另一种复制文本的方法。</target>
        </trans-unit>
        <trans-unit id="dd25b1528c9013edbcd817487ed6b4308279b170" translate="yes" xml:space="preserve">
          <source>How do I copy to the clipboard in JavaScript</source>
          <target state="translated">如何在JavaScript中复制到剪贴板?</target>
        </trans-unit>
        <trans-unit id="de2f217cb34a22e24f2bffb160103b608e9bc84f" translate="yes" xml:space="preserve">
          <source>However as an example of browser compatibility issues, Google Chrome from ~April to ~October 2015 only returned &lt;code&gt;true&lt;/code&gt; from &lt;code&gt;document.queryCommandSupported('copy')&lt;/code&gt; if the command was called from a user-initiated thread.</source>
          <target state="translated">但是，作为浏览器兼容性问题的一个示例，如果从用户启动的线程中调用了命令，则从〜April到〜October 2015年的Google Chrome仅从 &lt;code&gt;document.queryCommandSupported('copy')&lt;/code&gt; 返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6e1dffcce04f8999377bb8326748a74053499dcb" translate="yes" xml:space="preserve">
          <source>I can't paste an example (commercial project), but you get the idea.</source>
          <target state="translated">我无法粘贴一个例子(商业项目),但你明白了。</target>
        </trans-unit>
        <trans-unit id="f4cfd5a7996a41f2b20dd8a8092cf36b01c950c6" translate="yes" xml:space="preserve">
          <source>I do realize this code will show a 1-pixel wide component visibly on the screen for a millisecond, but decided not to worry about that, which is something that others can address if a real problem.</source>
          <target state="translated">我确实意识到这段代码会在屏幕上明显地显示1像素宽的分量一毫秒,但决定不担心这个问题,如果真的有问题的话,其他人可以解决。</target>
        </trans-unit>
        <trans-unit id="966d38c44a502d4b0016776551e4db97e6a2ed53" translate="yes" xml:space="preserve">
          <source>I found the following solution:</source>
          <target state="translated">我找到了以下解决方案。</target>
        </trans-unit>
        <trans-unit id="ce5daa652636410cf2a6d446548fd88417b8875d" translate="yes" xml:space="preserve">
          <source>I had the same problem building a custom grid edit from (something like Excel) and compatibility with Excel. I had to support selecting multiple cells, copying and pasting.</source>
          <target state="translated">我遇到了同样的问题,建立一个自定义网格编辑(类似于Excel的东西)和与Excel的兼容性。我不得不支持选择多个单元格,复制和粘贴。</target>
        </trans-unit>
        <trans-unit id="c1505e7216dbf9bc253cc27dac1792b424a2ddf7" translate="yes" xml:space="preserve">
          <source>I have recently written a &lt;a href=&quot;https://www.lucidchart.com/techblog/2014/12/02/definitive-guide-copying-pasting-javascript/&quot;&gt;technical blog post&lt;/a&gt; on this very problem (I work at Lucidchart and we recently did an overhaul on our clipboard).</source>
          <target state="translated">我最近写了&lt;a href=&quot;https://www.lucidchart.com/techblog/2014/12/02/definitive-guide-copying-pasting-javascript/&quot;&gt;一篇&lt;/a&gt;有关此问题的技术博客文章 （我在Lucidchart工作，最近我们对剪贴板进行了大修）。</target>
        </trans-unit>
        <trans-unit id="23c9189db1ff6e2cb688c016c58d203404607422" translate="yes" xml:space="preserve">
          <source>I have the text in a hidden input. Because &lt;code&gt;setSelectionRange&lt;/code&gt; doesn't work on hidden inputs, I changed temporarily the type to text, copied the text, and then made it hidden again. If you want to copy the text from an element, you can pass it to the function and save its content in the target variable.</source>
          <target state="translated">我在隐藏输入中输入了文字。 因为 &lt;code&gt;setSelectionRange&lt;/code&gt; 不适用于隐藏的输入，所以我暂时将类型更改为文本，复制了文本，然后再次将其隐藏。 如果要复制元素中的文本，则可以将其传递给函数并将其内容保存在目标变量中。</target>
        </trans-unit>
        <trans-unit id="f481599de8d99219c663f80ada085d861d69693b" translate="yes" xml:space="preserve">
          <source>I have tried:</source>
          <target state="translated">我试过了。</target>
        </trans-unit>
        <trans-unit id="64142f87f6143dab6c09288596e96559aa538097" translate="yes" xml:space="preserve">
          <source>I have used clipboard.js.</source>
          <target state="translated">我用过cipboard.js。</target>
        </trans-unit>
        <trans-unit id="9b29eb5b35b06915e3d30e952d28183777874ef9" translate="yes" xml:space="preserve">
          <source>I use this very successfully (&lt;strong&gt;without&lt;/strong&gt; jQuery or any other framework).</source>
          <target state="translated">我非常成功地使用了它（ &lt;strong&gt;没有&lt;/strong&gt; jQuery或任何其他框架）。</target>
        </trans-unit>
        <trans-unit id="86507cb1f625e6ba89de2744cb4e96b28a353d90" translate="yes" xml:space="preserve">
          <source>I've put together what I think is the best one.</source>
          <target state="translated">我把我认为最好的一个放在一起。</target>
        </trans-unit>
        <trans-unit id="4df3900a6902efb269b256f49cc9d0d373811b00" translate="yes" xml:space="preserve">
          <source>If I pass in a string, it copies it. If nothing, it copies the page's URL.</source>
          <target state="translated">如果我传入一个字符串,它就会复制它。如果没有,它会复制页面的URL。</target>
        </trans-unit>
        <trans-unit id="a7bd28b63858fcaef5224254159907ac6e11fdcb" translate="yes" xml:space="preserve">
          <source>If you need non-flash support for iOS you just add a fall-back:</source>
          <target state="translated">如果你需要iOS系统的非flash支持,你只需添加一个回落。</target>
        </trans-unit>
        <trans-unit id="9abe680fe97b16c6e82c89dff562f3400328d404" translate="yes" xml:space="preserve">
          <source>If you want a really simple solution (takes less than 5 minutes to integrate) and looks good right out of the box, then &lt;a href=&quot;http://github.com/mojombo/clippy&quot;&gt;Clippy&lt;/a&gt; is a nice alternative to some of the more complex solutions.</source>
          <target state="translated">如果您想要一个非常简单的解决方案（集成时间少于5分钟）并且看起来开箱即用，那么&lt;a href=&quot;http://github.com/mojombo/clippy&quot;&gt;Clippy&lt;/a&gt;是一些更复杂的解决方案的不错选择。</target>
        </trans-unit>
        <trans-unit id="4396c7460b71e5e545861f3498efc7f2eb5bbcab" translate="yes" xml:space="preserve">
          <source>In 2018, here's how you can go about it:</source>
          <target state="translated">2018年,以下是你的方法。</target>
        </trans-unit>
        <trans-unit id="0fedc44c66a04946bf8e28caa225fdb62cd5f049" translate="yes" xml:space="preserve">
          <source>In Chrome 66 pages in active tabs can write to the clipboard without a permissions prompt.</source>
          <target state="translated">在Chrome浏览器中,活动标签页中的66页可以在没有权限提示的情况下写入剪贴板。</target>
        </trans-unit>
        <trans-unit id="73b010066e6f44a5460adad9f3979ad8675fd165" translate="yes" xml:space="preserve">
          <source>In Chrome, you can create a Chrome extension that will give you &lt;a href=&quot;https://developer.chrome.com/extensions/declare_permissions&quot;&gt;clipboard permissions&lt;/a&gt; (this is what we do for Lucidchart). Then for users with your extension installed you'll just need to fire the system event yourself:</source>
          <target state="translated">在Chrome中，您可以创建一个Chrome扩展程序，该扩展程序将为您提供&lt;a href=&quot;https://developer.chrome.com/extensions/declare_permissions&quot;&gt;剪贴板权限&lt;/a&gt; （这是我们对Lucidchart所做的工作）。 然后，对于安装了扩展程序的用户，您只需要自己触发系统事件即可：</target>
        </trans-unit>
        <trans-unit id="49f262928b98e36cd63398cec562fecf01d84221" translate="yes" xml:space="preserve">
          <source>In Internet Explorer system administrators can disable the clipboard API.</source>
          <target state="translated">在Internet Explorer系统管理员可以禁用剪贴板API。</target>
        </trans-unit>
        <trans-unit id="83ff207cfb83713fb2ef2b79ffb028407adfdd8e" translate="yes" xml:space="preserve">
          <source>In browsers other than IE you need to use a small flash object to manipulate the clipboard, e.g.</source>
          <target state="translated">在IE以外的浏览器中,你需要使用一个小的Flash对象来操作剪贴板,例如</target>
        </trans-unit>
        <trans-unit id="68ac2ff338f18b8b5638d72d2d2203e5b3e4bccf" translate="yes" xml:space="preserve">
          <source>In some cases you might wish to copy text to the clipboard without displaying an &lt;code&gt;input&lt;/code&gt; / &lt;code&gt;textarea&lt;/code&gt; element. This is one example of a way to work around this (basically insert element, copy to clipboard, remove element):</source>
          <target state="translated">在某些情况下，您可能希望将文本复制到剪贴板而不显示 &lt;code&gt;input&lt;/code&gt; / &lt;code&gt;textarea&lt;/code&gt; 元素。 这是解决此问题的一种方式（基本上是插入元素，复制到剪贴板，删除元素）：</target>
        </trans-unit>
        <trans-unit id="8ecb52c26a6938186a46b1d9150c2a5dd74c9795" translate="yes" xml:space="preserve">
          <source>In your code:</source>
          <target state="translated">在你的代码中。</target>
        </trans-unit>
        <trans-unit id="27a69b4385439a997a62e9cb23e586860f6223ea" translate="yes" xml:space="preserve">
          <source>Internet Explorer 10+ (although &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms537834(v=vs.85).aspx&quot;&gt;this document&lt;/a&gt; indicates some support was there from Internet Explorer 5.5+).</source>
          <target state="translated">Internet Explorer 10+（尽管&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms537834(v=vs.85).aspx&quot;&gt;此文档&lt;/a&gt;表明Internet Explorer 5.5+ 对此提供了一些支持）。</target>
        </trans-unit>
        <trans-unit id="7e997557e991caeb301608c9fda59641c80d4330" translate="yes" xml:space="preserve">
          <source>Internet Explorer will show a permission dialog the first time the clipboard is updated.</source>
          <target state="translated">Internet Explorer在第一次更新剪贴板时,会显示一个权限对话框。</target>
        </trans-unit>
        <trans-unit id="728327ee84bb45dd11d26a1df620614852b5525d" translate="yes" xml:space="preserve">
          <source>Internet Explorer, and Edge will scroll when the textarea is focused.</source>
          <target state="translated">Internet Explorer和Edge会在文本区域被聚焦时滚动。</target>
        </trans-unit>
        <trans-unit id="441ff165a02d4e7f3eb647afcb7398332b18c655" translate="yes" xml:space="preserve">
          <source>Is it supported?</source>
          <target state="translated">是否支持?</target>
        </trans-unit>
        <trans-unit id="e74e3a7cc7789c6f3d7604c48dc36fdee9238c62" translate="yes" xml:space="preserve">
          <source>It is easier to use than the native Zero Clipboard plugin if you're a heavy jQuery user.</source>
          <target state="translated">如果你是一个重度jQuery用户,它比原生的Zero Clipboard插件更容易使用。</target>
        </trans-unit>
        <trans-unit id="226c7fa1748f131d84f8d07c57ea3bdff356c116" translate="yes" xml:space="preserve">
          <source>It is used in my Angular 6+ code like so:</source>
          <target state="translated">它在我的Angular 6+代码中是这样使用的。</target>
        </trans-unit>
        <trans-unit id="5dfdac7976c65268a5fb891b4e5959cf4425c7ea" translate="yes" xml:space="preserve">
          <source>It looks like Firefox has &lt;a href=&quot;http://kb.mozillazine.org/Granting_JavaScript_access_to_the_clipboard&quot;&gt;some options&lt;/a&gt; that allow users to grant permissions to certain sites to access the clipboard, but I haven't tried any of these personally.</source>
          <target state="translated">Firefox似乎具有&lt;a href=&quot;http://kb.mozillazine.org/Granting_JavaScript_access_to_the_clipboard&quot;&gt;一些选项&lt;/a&gt; ，允许用户向某些站点授予访问剪贴板的权限，但是我个人没有尝试过这些选项。</target>
        </trans-unit>
        <trans-unit id="edc927f430f24f6f35f3e4a7227a3084dedfccfd" translate="yes" xml:space="preserve">
          <source>It seems I misread the question, but for reference, you can extract a range of the DOM (not to clipboard; compatible with all modern browsers), and combine it with the oncopy and onpaste and onbeforepaste events to get clipboard behaviour. Here's the code to achieve this:</source>
          <target state="translated">看来我看错了问题,但作为参考,你可以提取DOM的一个范围(不是提取到剪贴板;兼容所有现代浏览器),并将其与oncopy和onpaste和onbeforepaste事件结合起来,得到剪贴板行为。下面是实现这个目的的代码。</target>
        </trans-unit>
        <trans-unit id="9d8f3a46c7fca6b1daabdc13d2f6d760d93b3dd1" translate="yes" xml:space="preserve">
          <source>It uses jQuery, but it doesn't have to of course. You can change that if you want. I just had jQuery to my disposal. You can also add some CSS to make sure the input doesn't show. For instance something like:</source>
          <target state="translated">它使用了jQuery,但当然不一定非要用。如果你想的话,你可以改一下。我只是用了jQuery来处理。你也可以添加一些CSS来确保输入不显示。比如说像这样的东西。</target>
        </trans-unit>
        <trans-unit id="a4bd86a7c3a15079063de885c80184a6dee56820" translate="yes" xml:space="preserve">
          <source>It was written by a co-founder of GitHub. Example Flash embed code below:</source>
          <target state="translated">它是由GitHub的联合创始人之一写的。下面的Flash嵌入代码示例。</target>
        </trans-unit>
        <trans-unit id="441ae2489be0504cddd656371b3fb468ee094840" translate="yes" xml:space="preserve">
          <source>More gymnastics to the clipboard stuff can be done too. See more information here:</source>
          <target state="translated">更多体操到剪贴板的东西也可以做。更多信息请看这里。</target>
        </trans-unit>
        <trans-unit id="613745a19c347fa2918416da66368874d3291283" translate="yes" xml:space="preserve">
          <source>Most browsers support this as of ~April 2015 (see Browser Support below).</source>
          <target state="translated">从2015年4月起,大多数浏览器都支持这个功能(见下面的浏览器支持)。</target>
        </trans-unit>
        <trans-unit id="84555820fbed1808e740204d9805dcd4ba8631d3" translate="yes" xml:space="preserve">
          <source>Mozilla Firefox 41+ (shipping ~September 2015)</source>
          <target state="translated">Mozilla Firefox 41+(2015年9月出货~2015年9月)</target>
        </trans-unit>
        <trans-unit id="fb59b73ab89aa6fcc2a6a665e9fafa20988a3e9c" translate="yes" xml:space="preserve">
          <source>My bad. This only works in IE.</source>
          <target state="translated">我的错 这只在IE中有效。</target>
        </trans-unit>
        <trans-unit id="b6bb6bb9992b6ac79a47b50009a23dab447749b3" translate="yes" xml:space="preserve">
          <source>NOTE: This code will only work when executed as direct synchronous code to something like an 'onClick' method. If you call in an asynchronous response to Ajax or in any other asynchronous way it will not work.</source>
          <target state="translated">注意:这段代码只有作为直接的同步代码执行到像 &quot;onClick &quot;方法时才会工作。如果你在Ajax的异步响应或其他任何异步方式调用,它将无法工作。</target>
        </trans-unit>
        <trans-unit id="7113c6cd944b357a68fb150c1b8d2ab7d55ee8a6" translate="yes" xml:space="preserve">
          <source>Newlines and tabs can get swallowed unless you use a textarea. (Most articles seem to recommend using a div)</source>
          <target state="translated">除非你使用textarea,否则Newlines和tabs会被吞噬。(大多数文章似乎建议使用一个div)</target>
        </trans-unit>
        <trans-unit id="dc1ff63f306cbf40cda95e11831244d5ad29aef3" translate="yes" xml:space="preserve">
          <source>Not covered here as it doesn't directly answer the question.</source>
          <target state="translated">这里不涉及,因为它并没有直接回答问题。</target>
        </trans-unit>
        <trans-unit id="507551cf40759bea0c3e8450706b180596ff4384" translate="yes" xml:space="preserve">
          <source>Note compatibility detail below.</source>
          <target state="translated">下面注意兼容性的细节。</target>
        </trans-unit>
        <trans-unit id="0ac312cbf7d21f2a877d3d921532b8a51b38d7e3" translate="yes" xml:space="preserve">
          <source>Note that since this post was originally written &lt;a href=&quot;https://sites.google.com/a/chromium.org/dev/Home/chromium-security/deprecating-permissions-in-cross-origin-iframes&quot;&gt;deprecation of permissions in cross-origin IFRAMEs&lt;/a&gt; and other &lt;a href=&quot;https://blog.chromium.org/2010/05/security-in-depth-html5s-sandbox.html&quot;&gt;IFRAME &quot;sandboxing&quot;&lt;/a&gt; prevents the embedded demos &quot;Run code snippet&quot; buttons and &quot;codepen.io example&quot; from working in some browsers (including Chrome and Microsoft Edge).</source>
          <target state="translated">请注意，由于此帖子最初是&lt;a href=&quot;https://sites.google.com/a/chromium.org/dev/Home/chromium-security/deprecating-permissions-in-cross-origin-iframes&quot;&gt;在跨域&lt;/a&gt; &lt;a href=&quot;https://blog.chromium.org/2010/05/security-in-depth-html5s-sandbox.html&quot;&gt;IFRAME&lt;/a&gt;和其他IFRAME&amp;ldquo;沙盒&amp;rdquo;中编写的，因此权限的弃用会阻止嵌入式演示&amp;ldquo;运行代码段&amp;rdquo;按钮和&amp;ldquo; codepen.io示例&amp;rdquo;在某些浏览器（包括Chrome和Microsoft Edge）中运行）。</target>
        </trans-unit>
        <trans-unit id="09828435c936cfcb5084dcd64aa12bee70f98413" translate="yes" xml:space="preserve">
          <source>Note that there is an ability to &quot;request permission&quot; and test for access to the clipboard via the permissions API in Chrome 66.</source>
          <target state="translated">请注意,在Chrome 66中,有一个 &quot;请求权限 &quot;的功能,可以通过权限API测试对剪贴板的访问。</target>
        </trans-unit>
        <trans-unit id="601f2a5ad2b8b2eabbb300f2a9c49908f8729821" translate="yes" xml:space="preserve">
          <source>Note the full Clipboard API draft specification can be found here:
&lt;a href=&quot;https://w3c.github.io/clipboard-apis/&quot;&gt;https://w3c.github.io/clipboard-apis/&lt;/a&gt;</source>
          <target state="translated">注意完整的Clipboard API草案规范可以在以下位置找到： &lt;a href=&quot;https://w3c.github.io/clipboard-apis/&quot;&gt;https&lt;/a&gt; : //w3c.github.io/clipboard-apis/</target>
        </trans-unit>
        <trans-unit id="1724bc61bec938c298ab72b89792982749c08955" translate="yes" xml:space="preserve">
          <source>Note: you will not see the textarea, as it is added and removed within the same synchronous invocation of Javascript code.</source>
          <target state="translated">注意:你不会看到textarea,因为它是在同一个Javascript代码的同步调用中添加和删除的。</target>
        </trans-unit>
        <trans-unit id="4e0b45197aee7fa10a7b6954f08be2be44cf4e16" translate="yes" xml:space="preserve">
          <source>Now the clipboard copy operation is SAFE, because the user does it manually (but in a pretty straightforward way). Of course, works in all browsers.</source>
          <target state="translated">现在剪贴板复制操作是安全的,因为用户手动操作(但方式相当直接)。当然,在所有浏览器中都可以使用。</target>
        </trans-unit>
        <trans-unit id="2585fb3016c95ff7aeb8916dd1ebf51ad2062e9b" translate="yes" xml:space="preserve">
          <source>On key down handler creates &quot;pre&quot; tag. We set the content to copy to this tag, then make a selection on this tag and return true in handler. This calls standard handler of chrome and copies selected text.</source>
          <target state="translated">在下键处理程序中创建 &quot;pre &quot;标签。我们设置内容复制到这个标签,然后在这个标签上进行选择,并在句柄中返回true。这样就会调用chrome的标准处理程序,复制选中的文本。</target>
        </trans-unit>
        <trans-unit id="b1a133a9ad7ca178ad4930dcdeec6fc3fe0602d5" translate="yes" xml:space="preserve">
          <source>On paste it creates textarea and works the same way.</source>
          <target state="translated">在粘贴时,它创建了 textarea,工作原理相同。</target>
        </trans-unit>
        <trans-unit id="c1007c17f6dc10dab2e3ea8f3a5784f767a6245c" translate="yes" xml:space="preserve">
          <source>Only supported on pages served over HTTPS.</source>
          <target state="translated">只支持通过HTTPS服务的页面。</target>
        </trans-unit>
        <trans-unit id="0ed1055849b20d70dc2ed4193b22de29e88836df" translate="yes" xml:space="preserve">
          <source>Only works if the user takes an action</source>
          <target state="translated">只有当用户采取某种行动时才会生效</target>
        </trans-unit>
        <trans-unit id="a7afa2821b7787ebaf599441badb8b1df7aae2aa" translate="yes" xml:space="preserve">
          <source>Opera 29+ (based on Chromium 42, ~April 2015)</source>
          <target state="translated">Opera 29+(基于 Chromium 42,~2015年4月)</target>
        </trans-unit>
        <trans-unit id="8ed17881879518d1be4e7fea88c90c20a9ea713e" translate="yes" xml:space="preserve">
          <source>Or of course you could also do some inline styling</source>
          <target state="translated">当然,你也可以做一些内嵌式造型</target>
        </trans-unit>
        <trans-unit id="986c083d75d6e86c5f64dcf0876f7daff3af314b" translate="yes" xml:space="preserve">
          <source>Other than that, there are some options on a browser-by-browser basis.</source>
          <target state="translated">别的,在浏览器的基础上还有一些选项。</target>
        </trans-unit>
        <trans-unit id="6606a3209277f2145cdabd7418aa62d5f3a3957e" translate="yes" xml:space="preserve">
          <source>Overriding the copy event</source>
          <target state="translated">覆盖复制事件</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="cdb12b3325a10ea3e26fdd906fdb66610b511d6f" translate="yes" xml:space="preserve">
          <source>PS may be this solution can be used for creating fully cross-browser solution without flash. Its works in FF and Chrome.</source>
          <target state="translated">PS可能是这个解决方案可以用来创建完全跨浏览器的解决方案,不需要Flash。它可以在FF和Chrome中工作。</target>
        </trans-unit>
        <trans-unit id="b977e67f26c9373cea5fc3c8d5791d14b0282a49" translate="yes" xml:space="preserve">
          <source>Pasting - you could do same like this (differs on your target) - keep focus on textarea and catch paste events using onpaste (in my project I use textareas in cells to edit).</source>
          <target state="translated">粘贴--你可以这样做(根据你的目标不同)--保持对textarea的关注,并使用onpaste捕捉粘贴事件(在我的项目中,我在单元格中使用textareas来编辑)。</target>
        </trans-unit>
        <trans-unit id="bc617eddef5808a05fa13304523293335138e8a9" translate="yes" xml:space="preserve">
          <source>Putting text on the clipboard not during a system copy event is much more difficult. It looks like some of these other answers reference ways to do it via Flash, which is the only cross-browser way to do it (so far as I understand).</source>
          <target state="translated">将文本放到剪贴板上,而不是在系统复制事件中,难度要大得多。看起来这些其他的答案中,有一些提到了通过Flash的方法,这是唯一的跨浏览器的方法(据我所知)。</target>
        </trans-unit>
        <trans-unit id="7ec8f1a665fd8b69db741b7ffd946d7d0344fb65" translate="yes" xml:space="preserve">
          <source>Reading and modifying the clipboard from a webpage raises security and privacy concerns. However, in Internet&amp;nbsp;Explorer, it is possible to do it. I found this &lt;a href=&quot;http://www.sajithmr.com/onclick-select-all-and-copy-to-clipboard-javascript/&quot;&gt;example snippet&lt;/a&gt;:</source>
          <target state="translated">从网页上读取和修改剪贴板会引发安全性和隐私问题。 但是，在Internet Explorer中可以这样做。 我发现了这个&lt;a href=&quot;http://www.sajithmr.com/onclick-select-all-and-copy-to-clipboard-javascript/&quot;&gt;示例片段&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="6132b1e7bd98981e34c215e72361efa4a2b6bcff" translate="yes" xml:space="preserve">
          <source>Reference &lt;a href=&quot;https://www.w3.org/TR/clipboard-apis/#async-clipboard-api&quot;&gt;Async Clipboard API&lt;/a&gt; draft documentation</source>
          <target state="translated">参考&lt;a href=&quot;https://www.w3.org/TR/clipboard-apis/#async-clipboard-api&quot;&gt;异步剪贴板API&lt;/a&gt;草案文档</target>
        </trans-unit>
        <trans-unit id="bed2e12478c21d156c18cb0c4bde0904d90484aa" translate="yes" xml:space="preserve">
          <source>Remember to replace &lt;code&gt;#{text}&lt;/code&gt; with the text you need copied, and &lt;code&gt;#{bgcolor}&lt;/code&gt; with a color.</source>
          <target state="translated">请记住将 &lt;code&gt;#{text}&lt;/code&gt; 替换为您需要复制的文本，并将 &lt;code&gt;#{bgcolor}&lt;/code&gt; 替换为颜色。</target>
        </trans-unit>
        <trans-unit id="9fe24af2a1a161e47e3f8895c3b2f12e0826984f" translate="yes" xml:space="preserve">
          <source>Remove the textarea from the dom.</source>
          <target state="translated">从 dom 中删除 textarea。</target>
        </trans-unit>
        <trans-unit id="d68c3601eb81dc5cf99c8da938d16b2d048b0131" translate="yes" xml:space="preserve">
          <source>Restores selection if there was one</source>
          <target state="translated">如果有选择,则恢复选择</target>
        </trans-unit>
        <trans-unit id="747f1ecccad6b2a084f6c678d408f86946e1e113" translate="yes" xml:space="preserve">
          <source>See Clipboard API documentation on &lt;a href=&quot;https://w3c.github.io/clipboard-apis/#override-copy&quot;&gt;Overriding the copy event&lt;/a&gt;.</source>
          <target state="translated">请参阅剪贴板API文档中有关&lt;a href=&quot;https://w3c.github.io/clipboard-apis/#override-copy&quot;&gt;覆盖复制事件的信息&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc0fe9c56b8fc9f864a0f6dc096e14c1c8158387" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://developers.google.com/web/updates/2015/04/cut-and-copy-commands?hl=en&quot;&gt;Google Developers post here&lt;/a&gt; for more info.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;https://developers.google.com/web/updates/2015/04/cut-and-copy-commands?hl=en&quot;&gt;此处&lt;/a&gt;的Google Developers帖子 。</target>
        </trans-unit>
        <trans-unit id="e88631214c45040d1409550aaaf82c5a9d10e6f8" translate="yes" xml:space="preserve">
          <source>Select the text in the textarea.</source>
          <target state="translated">选择文本区域中的文本。</target>
        </trans-unit>
        <trans-unit id="fdc1cd394cbb1374f1ef102987329fec493a4f9a" translate="yes" xml:space="preserve">
          <source>Sets readonly so keyboard doesn't come up on mobile devices</source>
          <target state="translated">设置只读,所以键盘不会在移动设备上出现。</target>
        </trans-unit>
        <trans-unit id="c15fa4b758d35cc97d9959bcc45edd294156d605" translate="yes" xml:space="preserve">
          <source>Simple Example</source>
          <target state="translated">简单的例子</target>
        </trans-unit>
        <trans-unit id="8135c235c31a98216defa8fbb8f938c86e13ef37" translate="yes" xml:space="preserve">
          <source>Since Chrome 42+ and Firefox 41+ now support the &lt;strong&gt;document.execCommand('copy')&lt;/strong&gt; command. So I created a couple of functions for a cross-browser copy-to-clipboard ability using a combination of &lt;a href=&quot;https://stackoverflow.com/a/8024509/4307527&quot;&gt;Tim Down's old answer&lt;/a&gt; and &lt;a href=&quot;https://developers.google.com/web/updates/2015/04/cut-and-copy-commands?hl=en&quot;&gt;Google Developer's answer&lt;/a&gt;:</source>
          <target state="translated">由于Chrome 42+和Firefox 41+现在支持&lt;strong&gt;document.execCommand（'copy'）&lt;/strong&gt;命令。 因此，我结合了&lt;a href=&quot;https://stackoverflow.com/a/8024509/4307527&quot;&gt;Tim Down的旧答案&lt;/a&gt;和&lt;a href=&quot;https://developers.google.com/web/updates/2015/04/cut-and-copy-commands?hl=en&quot;&gt;Google Developer的答案&lt;/a&gt; ，为跨浏览器复制到剪贴板的功能创建了几个函数：</target>
        </trans-unit>
        <trans-unit id="c8078f72c2940b8113477cd71feeca2d02b12354" translate="yes" xml:space="preserve">
          <source>So, when the user hit</source>
          <target state="translated">所以,当用户点击</target>
        </trans-unit>
        <trans-unit id="32f78d4e0fdf53e7c927fcaaa0dbc582004ccba3" translate="yes" xml:space="preserve">
          <source>Solution: create a textarea where you will be inserting data for the user to copy (for me when the user is selecting cells), set focus on it (for example, when user press</source>
          <target state="translated">解决方案:创建一个文本区域,在其中插入数据供用户复制(对我来说,当用户在选择单元格时),将焦点设置在其上(例如,当用户按下</target>
        </trans-unit>
        <trans-unit id="72627fc713699d0a267314a9ad6ac17847b218d9" translate="yes" xml:space="preserve">
          <source>Some things to watch out for if you are implementing this yourself:</source>
          <target state="translated">如果你要自己实施这个,要注意一些事情。</target>
        </trans-unit>
        <trans-unit id="60f4d295332d2122f5d508b59a4671e7697b6d56" translate="yes" xml:space="preserve">
          <source>Tabs are converted to spaces (at least in Chrome).</source>
          <target state="translated">标签转换为空间(至少在Chrome中是这样)。</target>
        </trans-unit>
        <trans-unit id="ae5d7f403f0699079fdb21de9b538eae649a06c0" translate="yes" xml:space="preserve">
          <source>Tested with Google Chrome 44, Firefox 42.0a1 and Internet Explorer 11.0.8600.17814.</source>
          <target state="translated">用Google Chrome 44、Firefox 42.0a1和Internet Explorer 11.0.8600.17814测试。</target>
        </trans-unit>
        <trans-unit id="9386753d3626e0e79d3472cf71af89387e43c1cb" translate="yes" xml:space="preserve">
          <source>Text can be copied to the clipboard directly from a variable.</source>
          <target state="translated">文本可以直接从一个变量中复制到剪贴板上。</target>
        </trans-unit>
        <trans-unit id="bc77d6ce85abd20c078b3651ccabfe7a1c44f6ce" translate="yes" xml:space="preserve">
          <source>Text is read from the DOM and placed on the clipboard.</source>
          <target state="translated">文本从DOM中读出并放置在剪贴板上。</target>
        </trans-unit>
        <trans-unit id="2bf84f1c589fa0e64d18fad37a18f439b0ffc3ae" translate="yes" xml:space="preserve">
          <source>Text-focused portion available in &lt;a href=&quot;https://developers.google.com/web/updates/2018/03/clipboardapi&quot;&gt;Chrome 66 (March 2018)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://developers.google.com/web/updates/2018/03/clipboardapi&quot;&gt;Chrome 66中&lt;/a&gt;提供了以文本为中心的部分（2018年3月）</target>
        </trans-unit>
        <trans-unit id="508dbcc82c35b0a2d3417deeb2456de3548adefb" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand&quot;&gt;&lt;code&gt;document.execCommand('copy')&lt;/code&gt;&lt;/a&gt; support has grown, see the links below for browser updates:</source>
          <target state="translated">对JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand&quot;&gt; &lt;code&gt;document.execCommand('copy')&lt;/code&gt; 的&lt;/a&gt;支持已经增长，请参阅下面的链接以获取浏览器更新：</target>
        </trans-unit>
        <trans-unit id="d8bbd68d529d00d4053d53061389f1306fe9736c" translate="yes" xml:space="preserve">
          <source>The above simple example works great if there is a &lt;code&gt;textarea&lt;/code&gt; or &lt;code&gt;input&lt;/code&gt; element visible on screen.</source>
          <target state="translated">如果屏幕上可见 &lt;code&gt;textarea&lt;/code&gt; 或 &lt;code&gt;input&lt;/code&gt; 元素，则上面的简单示例非常有用 。</target>
        </trans-unit>
        <trans-unit id="15906d76c75f558b48333733c2480be23e8817c2" translate="yes" xml:space="preserve">
          <source>The following approach works in Chrome, Firefox, Internet Explorer and Edge, and in recent versions of Safari (copy support was added in version 10 which was released Oct 2016).</source>
          <target state="translated">下面的方法在Chrome、Firefox、Internet Explorer和Edge以及最近的Safari等版本中都可以使用(在2016年10月发布的10号版本中加入了复制支持)。</target>
        </trans-unit>
        <trans-unit id="8b67de39df34127a60b5e61678de7d1ad2da8b79" translate="yes" xml:space="preserve">
          <source>The function below should handle all of the following issues as cleanly as possible. Please leave a comment if you find any problems or have any suggestions for improving it.</source>
          <target state="translated">下面的功能应该会尽可能干净利落地处理以下所有问题。如发现问题或有任何改进建议,请留下意见。</target>
        </trans-unit>
        <trans-unit id="8f442eece98029b4afac29d398c7570cd2ac0fae" translate="yes" xml:space="preserve">
          <source>The other methods will copy plain text to the clipboard. To copy HTML (ie, you can paste results into a WSIWYG editor), you can do the following in &lt;strong&gt;IE ONLY&lt;/strong&gt;. This is is fundamentally different from the other methods, as the browser actually visibly selects the content.</source>
          <target state="translated">其他方法会将纯文本复制到剪贴板。 要复制HTML（即，您可以将结果粘贴到WSIWYG编辑器中），则可以在&lt;strong&gt;IE&lt;/strong&gt; Only中执行以下操作。 这从根本上不同于其他方法，因为浏览器实际上是在选择内容。</target>
        </trans-unit>
        <trans-unit id="b8e1994f9cc3b72a15f33aa0f25f3a5e041f7cbf" translate="yes" xml:space="preserve">
          <source>The rest of this post goes into the nuances and detail of the &lt;code&gt;document.execCommand('copy')&lt;/code&gt; API.</source>
          <target state="translated">本文的其余部分深入介绍 &lt;code&gt;document.execCommand('copy')&lt;/code&gt; API的细微差别和细节。</target>
        </trans-unit>
        <trans-unit id="ebc63cf665aa02bf5e804dad09fafdcd5901b71f" translate="yes" xml:space="preserve">
          <source>The solution is to overly a flash object above the Copy button, or whatever element initiates the copy. Zero Clipboard is currently the best library with this implementation. Experienced Flash developers may just want to make their own library.</source>
          <target state="translated">解决的办法是在复制按钮上方的flash对象,或者说是什么元素发起复制,都是过多的。Zero Clipboard是目前这个实现最好的库。有经验的Flash开发者可能只是想做自己的库。</target>
        </trans-unit>
        <trans-unit id="4c825b892ef628587c4987a6d89570fad751f926" translate="yes" xml:space="preserve">
          <source>The textarea will be visible while the Internet Explorer dialog is shown, you either need to hide it, or use the Internet Explorer specific clipboardData API.</source>
          <target state="translated">当Internet Explorer对话框显示的时候,文本区域将是可见的,你需要隐藏它,或者使用Internet Explorer特定的剪贴板数据API。</target>
        </trans-unit>
        <trans-unit id="c6c429f2097e26821cf68086962d8263a67b50c9" translate="yes" xml:space="preserve">
          <source>The user is presented with the prompt box, where the text to be copied is already selected. Now it's enough to press</source>
          <target state="translated">用户会看到一个提示框,其中要复制的文本已经被选中。现在只需按</target>
        </trans-unit>
        <trans-unit id="d5d9a9c73c2b7750c0eb54a396cc46a0c85fc19b" translate="yes" xml:space="preserve">
          <source>There are many answers already, however like to add one (jQuery). Works great on any browser, also mobile ones (i.e., prompts about security, but when you accept it just works fine).</source>
          <target state="translated">已经有很多答案了,但是喜欢添加一个(jQuery)。在任何浏览器上都很好用,手机上也是如此(也就是说,有安全问题的提示,但当你接受的时候,它就可以正常工作了)。</target>
        </trans-unit>
        <trans-unit id="f72dba8dec71e6aa36c0d357f3e56e593d830816" translate="yes" xml:space="preserve">
          <source>There are three primary browser APIs for copying to the clipboard:</source>
          <target state="translated">复制到剪贴板的浏览器API主要有三个。</target>
        </trans-unit>
        <trans-unit id="4723f87aee0ab1683356a1aa853597e1dae53825" translate="yes" xml:space="preserve">
          <source>This is a bit of a combination between the other answers.</source>
          <target state="translated">这是在其他答案之间的结合点。</target>
        </trans-unit>
        <trans-unit id="7e0d0403fb6e441244b5a78579484dce4a04ef34" translate="yes" xml:space="preserve">
          <source>This is an expansion of @Chase's answer, with the advantage that it will work for IMAGE and TABLE elements, not just DIVs on IE9.</source>
          <target state="translated">这是对@Chase的答案的一个扩展,其优点是它将适用于IMAGE和TABLE元素,而不仅仅是IE9上的DIV。</target>
        </trans-unit>
        <trans-unit id="27b64e569ebd1c2b5923ac49b03c5f5a2d9369dd" translate="yes" xml:space="preserve">
          <source>This is the most simple in IE, where you can access the clipboardData object at anytime from JavaScript via:</source>
          <target state="translated">这在IE中是最简单的,在IE中,你可以通过JavaScript随时访问 clipboardData对象。</target>
        </trans-unit>
        <trans-unit id="f4a2e16c9979f1f5b053b7555cbc434f9551aeaf" translate="yes" xml:space="preserve">
          <source>This was the only thing I ever got working, after looking up various ways all around the Internet. This is a messy topic. There are lots of solutions posted around the world and most of them do &lt;em&gt;not&lt;/em&gt; work. This worked for me:</source>
          <target state="translated">在遍历Internet的各种方式之后，这是我唯一要做的事情。 这是一个混乱的话题。 世界各地发布了许多解决方案，其中大多数都不起作用。 这为我工作：</target>
        </trans-unit>
        <trans-unit id="a05967935c50ad730650f42dda5b40885cafa8f9" translate="yes" xml:space="preserve">
          <source>To copy a selected text ('Text To Copy') to your clipboard, create a Bookmarklet (browser bookmark that executes JavaScript) and execute it (click on it). It will create a temporary textarea.</source>
          <target state="translated">要复制一个选定的文本(&quot;要复制的文本&quot;)到剪贴板上,请创建一个书签(浏览器书签可以执行JavaScript)并执行它(点击它)。它将创建一个临时文本区域。</target>
        </trans-unit>
        <trans-unit id="eb5880b39bfefd35310fd92b9ec3b91268199751" translate="yes" xml:space="preserve">
          <source>To develop create your own web page, serve that page over HTTPS connection to test and develop against.</source>
          <target state="translated">要创建自己的网页,通过HTTPS连接来测试和开发。</target>
        </trans-unit>
        <trans-unit id="4d9f2128a20a0c320cec0e36ba3b5138c7f697e5" translate="yes" xml:space="preserve">
          <source>Usage &amp;amp; examples are at &lt;a href=&quot;https://zenorocha.github.io/clipboard.js/&quot;&gt;https://zenorocha.github.io/clipboard.js/&lt;/a&gt;.</source>
          <target state="translated">用法和示例位于&lt;a href=&quot;https://zenorocha.github.io/clipboard.js/&quot;&gt;https://zenorocha.github.io/clipboard.js/&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="1156a1c9a8d87e54a6af37927cd1b5b00937db3d" translate="yes" xml:space="preserve">
          <source>Usage: &lt;code&gt;copyToClipboard('some text')&lt;/code&gt;</source>
          <target state="translated">用法： &lt;code&gt;copyToClipboard('some text')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="39fd3332ce20ebc85822b1a117a4705328b2806f" translate="yes" xml:space="preserve">
          <source>Uses cssText to avoid exceptions in Internet&amp;nbsp;Explorer as opposed to style directly.</source>
          <target state="translated">使用cssText避免Internet Explorer中的异常，而不是直接使用样式。</target>
        </trans-unit>
        <trans-unit id="75eb7a68828d4e8cb80b6749b235c1a598e8fc74" translate="yes" xml:space="preserve">
          <source>We can get it on npm:</source>
          <target state="translated">我们可以在npm上得到它。</target>
        </trans-unit>
        <trans-unit id="a049d6da97830a21b630abe9c8de5f32fdb468ec" translate="yes" xml:space="preserve">
          <source>What is the best way to copy text to the clipboard? (multi-browser)</source>
          <target state="translated">复制文本到剪贴板的最佳方法是什么?(多浏览器)</target>
        </trans-unit>
        <trans-unit id="4273378585f392a795e93da5cbd3c51d633af541" translate="yes" xml:space="preserve">
          <source>Whilst a simple call to &lt;code&gt;document.execCommand('copy')&lt;/code&gt; wrapped in a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; block called as a result of a user click will get you the most compatibility use the following has some provisos:</source>
          <target state="translated">尽管通过单击用户调用而在 &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; 块中包装的 &lt;code&gt;document.execCommand('copy')&lt;/code&gt; 的简单调用将使您获得最大的兼容性，但下面的一些规定适用于此：</target>
        </trans-unit>
        <trans-unit id="1f7ba45752ccdc6a13661633b09ac1ba6c77fa69" translate="yes" xml:space="preserve">
          <source>ZeroClipboard is the best cross-browser solution I've found:</source>
          <target state="translated">ZeroClipboard是我发现的最好的跨浏览器解决方案。</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="332e94c9515c242af1486fca7150abe944335f1c" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;document.queryCommandEnabled('copy')&lt;/code&gt; return &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;document.execCommand('copy')&lt;/code&gt; will succeed if called now. Checking to ensure the command was called from a user-initiated thread and other requirements are met.</source>
          <target state="translated">如果 &lt;code&gt;document.execCommand('copy')&lt;/code&gt; 立即调用成功，则 &lt;code&gt;document.queryCommandEnabled('copy')&lt;/code&gt; 返回 &lt;code&gt;true&lt;/code&gt; 。 检查以确保从用户启动的线程调用了该命令，并且满足其他要求。</target>
        </trans-unit>
        <trans-unit id="390cc0729a1e15ac403e88d49c76a495778dfb20" translate="yes" xml:space="preserve">
          <source>but in Internet Explorer it gives a syntax error. In Firefox, it says &lt;code&gt;unsafeWindow is not defined&lt;/code&gt;.</source>
          <target state="translated">但是在Internet Explorer中，它会给出语法错误。 在Firefox中，它说 &lt;code&gt;unsafeWindow is not defined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c82ae62f59b07f9377d33b857781fbc0462e3e9" translate="yes" xml:space="preserve">
          <source>clipboard.js is also on &lt;a href=&quot;https://github.com/lgarron/clipboard.js&quot;&gt;GitHub&lt;/a&gt;.</source>
          <target state="translated">Clipboard.js也位于&lt;a href=&quot;https://github.com/lgarron/clipboard.js&quot;&gt;GitHub上&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="506de0e2e3e9145a78cd5152e58c530f2478a6df" translate="yes" xml:space="preserve">
          <source>document.execCommand('copy')</source>
          <target state="translated">document.execCommand('copy')</target>
        </trans-unit>
        <trans-unit id="e100de9d38a3f62eeca5021fb664afcfdce1a12a" translate="yes" xml:space="preserve">
          <source>execCommand() may throw in some cases.</source>
          <target state="translated">execCommand()在某些情况下可能会抛出。</target>
        </trans-unit>
        <trans-unit id="4d662d0f04bc742c958f773b286715d45788cd96" translate="yes" xml:space="preserve">
          <source>he/she gets copied cells he/she selected. After testing just resizing the textarea to one pixel (I didn't test if it will be working on display:none). It works nicely on all browsers, and it is transparent to the user.</source>
          <target state="translated">heshehe得到复制的单元格 heshe选择。经过测试,只是将textarea的大小调整为一个像素(我没有测试它是否会在display:none上工作)。它在所有浏览器上都能很好的工作,而且对用户来说是透明的。</target>
        </trans-unit>
        <trans-unit id="24040123f74614cf029df86ab2a4e90e958b5bb9" translate="yes" xml:space="preserve">
          <source>or uses the browser's menu).</source>
          <target state="translated">或使用浏览器的菜单)。)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
