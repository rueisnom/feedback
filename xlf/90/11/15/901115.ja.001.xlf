<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/901115">
    <body>
      <group id="901115">
        <trans-unit id="e0d02f69bfab290bf1f501ff1a5082d271e75385" translate="yes" xml:space="preserve">
          <source>(URI.js also &quot;fixes&quot; bad querystrings like &lt;code&gt;?&amp;amp;foo&amp;amp;&amp;amp;bar=baz&amp;amp;&lt;/code&gt; to &lt;code&gt;?foo&amp;amp;bar=baz&lt;/code&gt;)</source>
          <target state="translated">（URI.jsも &lt;code&gt;?&amp;amp;foo&amp;amp;&amp;amp;bar=baz&amp;amp;&lt;/code&gt; ような不正なクエリ文字列を &lt;code&gt;?foo&amp;amp;bar=baz&lt;/code&gt; に 「修正」します ）</target>
        </trans-unit>
        <trans-unit id="c33bf3988dc284bca985201a791bf293ac167541" translate="yes" xml:space="preserve">
          <source>...jQuery BBQ provides a full &lt;code&gt;.deparam()&lt;/code&gt; method, along with both hash state management, and fragment / query string parse and merge utility methods.</source>
          <target state="translated">... jQuery BBQは、完全な &lt;code&gt;.deparam()&lt;/code&gt; メソッドを、ハッシュ状態の管理と、フラグメント/クエリ文字列の解析およびマージユーティリティメソッドの両方とともに提供します。</target>
        </trans-unit>
        <trans-unit id="79c0e20f0a22c1356012c1d3381c34dd2e441471" translate="yes" xml:space="preserve">
          <source>...making it into an object that looks like...</source>
          <target state="translated">...のようなオブジェクトにして...</target>
        </trans-unit>
        <trans-unit id="11f6482ce9f388b216bfc419e445a6c77c8d7dbd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://jsperf.com/querystring-with-javascript&quot;&gt;Performance test (split method against regex method)&lt;/a&gt; (&lt;a href=&quot;http://jsperf.com/&quot;&gt;jsPerf&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;http://jsperf.com/querystring-with-javascript&quot;&gt;パフォーマンステスト（正規表現メソッドに対する分割メソッド）&lt;/a&gt; （ &lt;a href=&quot;http://jsperf.com/&quot;&gt;jsPerf&lt;/a&gt; ）</target>
        </trans-unit>
        <trans-unit id="47be74a6372dd1484c8ce49a9b412e5d8f655945" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;IMPORTANT!&lt;/b&gt; The parameter for that function in the last line is different. It's just an example of how one can pass an arbitrary URL to it. You can use last line from Bruno's answer to parse the current URL.</source>
          <target state="translated">&lt;b&gt;重要！&lt;/b&gt; 最後の行のその関数のパラメーターは異なります。 これは、任意のURLを渡す方法の単なる例です。 Brunoの回答の最後の行を使用して、現在のURLを解析できます。</target>
        </trans-unit>
        <trans-unit id="d139bec92ab703c3930b72ed0bcca93c86a4a024" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/q/476436/985454&quot;&gt;&quot;null-coalescing&quot;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Short-Circuit_Evaluation&quot;&gt;short-circuit evaluation&lt;/a&gt;&lt;br/&gt;
ES6 &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;Destructuring assignments&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;Arrow functions&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals&quot;&gt;Template strings&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/q/476436/985454&quot;&gt;&quot;null-coalescing&quot;&lt;/a&gt; 、 &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Short-Circuit_Evaluation&quot;&gt;短絡評価&lt;/a&gt;&lt;/em&gt; &lt;em&gt;&lt;br/&gt;&lt;/em&gt; &lt;em&gt;ES6解体&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;代入&lt;/a&gt; 、 &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;アロー関数&lt;/a&gt; 、 &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals&quot;&gt;テンプレート文字列&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a25782e4816475a2a0901c6ec5632570b52f9639" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Or&lt;/em&gt; if you have control of the querystring and can guarantee that a value you are trying to get will never contain any URL encoded
  characters (having these in a value would be a bad idea) - you can use
  the following slightly more simplified and readable version of the 1st option:</source>
          <target state="translated">&lt;em&gt;または&lt;/em&gt; 、クエリ文字列を制御していて、取得しようとしている値にURLエンコードされた文字が含まれないことを保証できる場合（これらの値を値に含めることはお勧めできません）-次のわずかに簡略化された読みやすいバージョンを使用できます最初のオプションの：</target>
        </trans-unit>
        <trans-unit id="fcdbaa597bdf669b6d3a9aadfd0cd07941c33e3f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;To access different parts of a URL use &lt;code&gt;location.(search|hash)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;URLのさまざまな部分にアクセスするには、 &lt;code&gt;location.(search|hash)&lt;/code&gt; 使用します。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0f83b351211abc22c16148d75edebd637f29484a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;tl;dr&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;tl;dr&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dd30aeb848f043e7bc0780ef8335c1edf1e6569c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;*!!!&lt;/strong&gt; Please note, that &lt;code&gt;decodeURIComponent(undefined)&lt;/code&gt; returns string &lt;code&gt;&quot;undefined&quot;&lt;/code&gt;. The solution lies in a simple usage of &lt;a href=&quot;https://stackoverflow.com/a/476445/985454&quot;&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/a&gt;, which ensures that &lt;code&gt;decodeURIComponent()&lt;/code&gt; is not called on undefined values. &lt;em&gt;(See the &quot;complete solution&quot; at the top.)&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;* !!!&lt;/strong&gt; &lt;code&gt;decodeURIComponent(undefined)&lt;/code&gt; は文字列 &lt;code&gt;&quot;undefined&quot;&lt;/code&gt; を返すことに注意してください。 解決策は&lt;a href=&quot;https://stackoverflow.com/a/476445/985454&quot;&gt; &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; の&lt;/a&gt;単純な使用法にあります。これにより、未定義の値で &lt;code&gt;decodeURIComponent()&lt;/code&gt; が呼び出されないようになります。 &lt;em&gt;（上部の「完全なソリューション」を参照してください。）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="82c314ef57c4ae062d211ee17efada8e14fe8e6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT:&lt;/strong&gt; You can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URL&quot;&gt;URL&lt;/a&gt; interface, its quite widely adopted in almost all the new browser and if the code is going to run on an old browser you can use a &lt;a href=&quot;https://github.com/lifaon74/url-polyfill&quot;&gt;polyfill like this one&lt;/a&gt;. Here's a code example on how to use URL interface to get query parameters (aka search parameters)</source>
          <target state="translated">&lt;strong&gt;編集：&lt;/strong&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URL&quot;&gt;URL&lt;/a&gt;インターフェイスを使用できます。これは、ほとんどすべての新しいブラウザーで広く採用されており、コードを古いブラウザーで実行する場合は、 &lt;a href=&quot;https://github.com/lifaon74/url-polyfill&quot;&gt;このようなポリフィル&lt;/a&gt;を使用できます。 URLインターフェイスを使用してクエリパラメータ（別名検索パラメータ）を取得する方法のコード例を次に示します</target>
        </trans-unit>
        <trans-unit id="37368c978ce40b2560ff00ceca4687bf96ce3bd6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Original&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Original&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ecbafbd59fd4570e44f14117a16a5c61451c4624" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Regex method&lt;/strong&gt;: 13,891 &amp;plusmn;0.85% | 90% slower</source>
          <target state="translated">&lt;strong&gt;正規表現法&lt;/strong&gt; ：13,891&amp;plusmn;0.85％| 90％遅い</target>
        </trans-unit>
        <trans-unit id="8c4b9a8b2c4a548fd785efb0cd2f4af2a0428753" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Split method&lt;/strong&gt;: 144,780 &amp;plusmn;2.17% fastest</source>
          <target state="translated">&lt;strong&gt;スプリット方式&lt;/strong&gt; ：144,780&amp;plusmn;2.17％最速</target>
        </trans-unit>
        <trans-unit id="ded3fa0b81b76721beedb6dd8bacd027baf396b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Testing in Firefox 4.0 x86 on Windows Server 2008 R2 / 7 x64&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Windows Server 2008 R2 / 7 x64上のFirefox 4.0 x86でのテスト&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4ce2743b8a6431574045a5cfe76049b2e91dcb70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The code:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;コード：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="86ebb9137b90947e20c42d0c415e605c6404bfd8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update: Sep-2018&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;更新：2018年9月&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9188873b53a0860b8d45c86992acf0ce33ebbec3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Usage:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="010fef2051f010223d5ab89db7012657390a7a99" translate="yes" xml:space="preserve">
          <source>?test=Hello&amp;amp;person=neek&amp;amp;person[]=jeff&amp;amp;person[]=jim&amp;amp;person[extra]=john&amp;amp;test3&amp;amp;nocache=1398914891264</source>
          <target state="translated">?test=Hello&amp;amp;person=neek&amp;amp;person[]=jeff&amp;amp;person[]=jim&amp;amp;person[extra]=john&amp;amp;test3&amp;amp;nocache=1398914891264</target>
        </trans-unit>
        <trans-unit id="534cddb6555e003cb4cf2ec54774ae6f0433e539" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://trac.webkit.org/browser/trunk/Source/WebCore/platform/URLParser.cpp&quot;&gt;reference implementation&lt;/a&gt; and a &lt;a href=&quot;https://googlechrome.github.io/samples/urlsearchparams/&quot;&gt;sample page&lt;/a&gt; are available for auditing and testing.</source>
          <target state="translated">&lt;a href=&quot;https://trac.webkit.org/browser/trunk/Source/WebCore/platform/URLParser.cpp&quot;&gt;参照実装&lt;/a&gt;とサンプルページは、監査とテストに使用できます。</target>
        </trans-unit>
        <trans-unit id="fb75f43caf20568ea5a54475c53588e0025cecd3" translate="yes" xml:space="preserve">
          <source>A URL like &lt;code&gt;this.htm?hello=world&amp;amp;foo=bar&lt;/code&gt; will create:</source>
          <target state="translated">&lt;code&gt;this.htm?hello=world&amp;amp;foo=bar&lt;/code&gt; のようなURLは以下を作成します：</target>
        </trans-unit>
        <trans-unit id="8f5555c4a56365aa3ceeaecad41c3ccc587f60d8" translate="yes" xml:space="preserve">
          <source>A new capability would be to retrieve repeated params as following &lt;code&gt;myparam=1&amp;amp;myparam=2&lt;/code&gt;. There is not a &lt;em&gt;specification&lt;/em&gt;, however, most of the current approaches follow the generation of an array.</source>
          <target state="translated">新しい機能は、 &lt;code&gt;myparam=1&amp;amp;myparam=2&lt;/code&gt; のように、繰り返されるパラメーターを取得することです。 &lt;em&gt;仕様&lt;/em&gt;はありませんが、現在のアプローチのほとんどは配列の生成に従います。</target>
        </trans-unit>
        <trans-unit id="ec6d389db41af6d8c6899bbe593461bce3cc1e03" translate="yes" xml:space="preserve">
          <source>A quick, &lt;strong&gt;complete solution&lt;/strong&gt;, which handles &lt;strong&gt;multivalued keys&lt;/strong&gt; and &lt;strong&gt;encoded characters&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;複数の値を持つキー&lt;/strong&gt;と&lt;strong&gt;エンコードされた文字&lt;/strong&gt;を処理する迅速で&lt;strong&gt;完全なソリューション&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="ae3d1e955993bf7fcabbb2a74e77168edf22f3bb" translate="yes" xml:space="preserve">
          <source>Access values by &lt;code&gt;qd.key[index]&lt;/code&gt; or &lt;code&gt;qd[key][index]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;qd.key[index]&lt;/code&gt; または &lt;code&gt;qd[key][index]&lt;/code&gt; によって値にアクセスする</target>
        </trans-unit>
        <trans-unit id="800134e33649d3e10c5322da5156cfc33ce3a91e" translate="yes" xml:space="preserve">
          <source>Also, as pointed out in the comments, &lt;code&gt;;&lt;/code&gt; is a legal delimiter for &lt;code&gt;key=value&lt;/code&gt; pairs.  It would require a more complicated regex to handle &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;&amp;amp;&lt;/code&gt;, which I think is unnecessary because it's rare that &lt;code&gt;;&lt;/code&gt; is used and I would say even more unlikely that both would be used.  If you need to support &lt;code&gt;;&lt;/code&gt; instead of &lt;code&gt;&amp;amp;&lt;/code&gt;, just swap them in the regex.</source>
          <target state="translated">また、コメントで指摘されているように &lt;code&gt;;&lt;/code&gt; &lt;code&gt;key=value&lt;/code&gt; ペアの有効な区切り文字です。 処理するには、より複雑な正規表現が必要です &lt;code&gt;;&lt;/code&gt; または &lt;code&gt;&amp;amp;&lt;/code&gt; 、それはめったにないので不要だと思う &lt;code&gt;;&lt;/code&gt; が使用され、両方が使用される可能性はさらに低くなります。 あなたがサポートする必要がある場合 &lt;code&gt;;&lt;/code&gt; &lt;code&gt;&amp;amp;&lt;/code&gt; の代わりに、正規表現でそれらを交換するだけです。</target>
        </trans-unit>
        <trans-unit id="9b1a5e46c3df8cde62fe9534b0b22f5e679a96f9" translate="yes" xml:space="preserve">
          <source>And this is how you can use this function assuming the URL is</source>
          <target state="translated">そして、この関数を使用するには、URLが</target>
        </trans-unit>
        <trans-unit id="e4f0914b742d0ac7630df445c3d78b67b44b0c97" translate="yes" xml:space="preserve">
          <source>As you can see above, this version handles some measure of &quot;malformed&quot; arrays, i.e. - &lt;code&gt;person=neek&amp;amp;person[]=jeff&amp;amp;person[]=jim&lt;/code&gt; or &lt;code&gt;person=neek&amp;amp;person=jeff&amp;amp;person=jim&lt;/code&gt; as the key is identifiable and valid (at least in dotNet's &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/xsc9a449.aspx&quot;&gt;NameValueCollection.Add&lt;/a&gt;):</source>
          <target state="translated">上記からわかるように、このバージョンは「不正な」配列の一部のメジャーを処理します。つまり、 &lt;code&gt;person=neek&amp;amp;person[]=jeff&amp;amp;person[]=jim&lt;/code&gt; または &lt;code&gt;person=neek&amp;amp;person=jeff&amp;amp;person=jim&lt;/code&gt; キーは識別可能で有効であるため（少なくともdotNetの場合） &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/xsc9a449.aspx&quot;&gt;NameValueCollection.Add&lt;/a&gt; ）：</target>
        </trans-unit>
        <trans-unit id="dec8ec77346ed7b7f3ff2bbef25f1a0c8db47ed4" translate="yes" xml:space="preserve">
          <source>Because of the new HTML History API and specifically &lt;code&gt;history.pushState()&lt;/code&gt; and &lt;code&gt;history.replaceState()&lt;/code&gt;, the URL can change which will invalidate the cache of parameters and their values.</source>
          <target state="translated">新しいHTML History API、特に &lt;code&gt;history.pushState()&lt;/code&gt; と &lt;code&gt;history.replaceState()&lt;/code&gt; により、URLが変更され、パラメーターとその値のキャッシュが無効になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="c7601f69db91e2da68e2759e88ab4423df8b842b" translate="yes" xml:space="preserve">
          <source>Best of both worlds!</source>
          <target state="translated">両方の世界の最高のもの!</target>
        </trans-unit>
        <trans-unit id="f6ef567d34982fb629b48eb155de70a91ca42847" translate="yes" xml:space="preserve">
          <source>Call it from anywhere in the JavaScript code:</source>
          <target state="translated">JavaScriptのコード内のどこからでも呼び出してください。</target>
        </trans-unit>
        <trans-unit id="127bd0758aa89190daf4785aa8fd97c348d7c230" translate="yes" xml:space="preserve">
          <source>Chrome Announcement and details</source>
          <target state="translated">クロームのお知らせと詳細</target>
        </trans-unit>
        <trans-unit id="d620b778592cbeb4a5b4ac786c6c65d353236122" translate="yes" xml:space="preserve">
          <source>Code golf:</source>
          <target state="translated">コードゴルフ。</target>
        </trans-unit>
        <trans-unit id="9432d6874c07d2479fb03ed9dbee612f9529e8fd" translate="yes" xml:space="preserve">
          <source>Display it!</source>
          <target state="translated">それを表示してください!</target>
        </trans-unit>
        <trans-unit id="e3af59b16940b2e81235ebbcb74c7f1a75b7e5e5" translate="yes" xml:space="preserve">
          <source>ES2015 (ES6)</source>
          <target state="translated">ES2015(ES6</target>
        </trans-unit>
        <trans-unit id="7dd6c14524660a8e5e3f2fd6bd31287be3272a9e" translate="yes" xml:space="preserve">
          <source>Easiest (dummy) solution</source>
          <target state="translated">最も簡単な(ダミーの)解決策</target>
        </trans-unit>
        <trans-unit id="c57e24e3995bb2633119f0608031092da0dd2d9f" translate="yes" xml:space="preserve">
          <source>Edit: Adding Deparam Example:</source>
          <target state="translated">編集:デパラムの例を追加しました。</target>
        </trans-unit>
        <trans-unit id="18c8be8be42a7df2abdc4caecc8e7f222e85b9a8" translate="yes" xml:space="preserve">
          <source>Encoded characters?</source>
          <target state="translated">暗号化された文字?</target>
        </trans-unit>
        <trans-unit id="ebccf9f9cb0a1762288f48f17418ac002bad85c9" translate="yes" xml:space="preserve">
          <source>Enjoy.</source>
          <target state="translated">Enjoy.</target>
        </trans-unit>
        <trans-unit id="d926fe0cd38e03484b26bb76cf16c4faacb42966" translate="yes" xml:space="preserve">
          <source>Example querystring:</source>
          <target state="translated">querystringの例。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">スニペットを展開</target>
        </trans-unit>
        <trans-unit id="42fdd8556452808645f749a3a8ccd315a6af2bb6" translate="yes" xml:space="preserve">
          <source>Firefox 44+, Opera 36+, Edge 17+, Safari 10.3+ and Chrome 49+ support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams&quot;&gt;URLSearchParams&lt;/a&gt; API:</source>
          <target state="translated">Firefox 44以降、Opera 36以降、Edge 17以降、Safari 10.3以降、Chrome 49以降では、 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams&quot;&gt;URLSearchParams&lt;/a&gt; APIをサポートしています。</target>
        </trans-unit>
        <trans-unit id="d9b7c07a3c5cfdfa9c5d333af605afc4ff1a78c7" translate="yes" xml:space="preserve">
          <source>Firefox Announcement and details</source>
          <target state="translated">Firefoxのお知らせと詳細</target>
        </trans-unit>
        <trans-unit id="673187c6b35ad0483874d48860fc835cb81a3f10" translate="yes" xml:space="preserve">
          <source>For a URL like &lt;code&gt;http://domain.com?param1=val1&amp;amp;param2=val2&lt;/code&gt; you can get their value later in your code as &lt;code&gt;search.param1&lt;/code&gt; and &lt;code&gt;search.param2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;http://domain.com?param1=val1&amp;amp;param2=val2&lt;/code&gt; のようなURLの場合、後でコード内で &lt;code&gt;search.param1&lt;/code&gt; および &lt;code&gt;search.param2&lt;/code&gt; として値を取得できます。</target>
        </trans-unit>
        <trans-unit id="c5726643ceb6991d5c7b82f8641d91a3dc21160e" translate="yes" xml:space="preserve">
          <source>For more information on improvement see: &lt;a href=&quot;http://james.padolsey.com/javascript/bujs-1-getparameterbyname/&quot;&gt;http://james.padolsey.com/javascript/bujs-1-getparameterbyname/&lt;/a&gt;</source>
          <target state="translated">改善の詳細については、 &lt;a href=&quot;http://james.padolsey.com/javascript/bujs-1-getparameterbyname/&quot;&gt;http&lt;/a&gt; ： //james.padolsey.com/javascript/bujs-1-getparameterbyname/を参照してください。</target>
        </trans-unit>
        <trans-unit id="4d35a0dbe25664b0c8564dcb259681703f89b719" translate="yes" xml:space="preserve">
          <source>For the query string &lt;code&gt;x=5&amp;amp;y&amp;amp;z=hello&amp;amp;x=6&lt;/code&gt; this returns the object:</source>
          <target state="translated">クエリ文字列 &lt;code&gt;x=5&amp;amp;y&amp;amp;z=hello&amp;amp;x=6&lt;/code&gt; の場合、これはオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="f99deb5ac65fb0c436f3dcae122f670bf5d9ffad" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLUtils/search#Get_the_value_of_a_single_search_param&quot;&gt;the MDN&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLUtils/search#Get_the_value_of_a_single_search_param&quot;&gt;MDN&lt;/a&gt;から：</target>
        </trans-unit>
        <trans-unit id="45672054ed2b5911b360ccdb67dac8cdb4183687" translate="yes" xml:space="preserve">
          <source>From comments</source>
          <target state="translated">コメントより</target>
        </trans-unit>
        <trans-unit id="4d88cc2da8e2cd7a42dedeacdd26424dc86ef5aa" translate="yes" xml:space="preserve">
          <source>Further reading: &lt;a href=&quot;http://nodejs.org/api/url.html&quot;&gt;&lt;strong&gt;URL Node.js v0.12.2 Manual &amp;amp; Documentation&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://nodejs.org/api/url.html&quot;&gt;&lt;strong&gt;参考資料&lt;/strong&gt;&lt;/a&gt; ： &lt;strong&gt;URL Node.js v0.12.2 Manual＆Documentation&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6d2adeea390c506ae0e2b890266a2fe434806983" translate="yes" xml:space="preserve">
          <source>Google method</source>
          <target state="translated">グーグル方式</target>
        </trans-unit>
        <trans-unit id="9f297fcf463a0430a0271e161a011ae8210e5605" translate="yes" xml:space="preserve">
          <source>Handles &lt;b&gt;empty keys&lt;/b&gt; correctly.</source>
          <target state="translated">&lt;b&gt;空のキーを&lt;/b&gt;正しく処理し&lt;b&gt;ます&lt;/b&gt; 。</target>
        </trans-unit>
        <trans-unit id="b5551916943663f301e56840062b0bb752e1e600" translate="yes" xml:space="preserve">
          <source>Here is a fast way to get an object similar to the PHP &lt;a href=&quot;http://php.net/manual/en/reserved.variables.get.php&quot;&gt;$_GET&lt;/a&gt; array:</source>
          <target state="translated">PHPの&lt;a href=&quot;http://php.net/manual/en/reserved.variables.get.php&quot;&gt;$ _GET&lt;/a&gt;配列に似たオブジェクトをすばやく取得する方法を次に示します。</target>
        </trans-unit>
        <trans-unit id="122778d5e10d1916b1623e116cd8efae6700365a" translate="yes" xml:space="preserve">
          <source>Here's an extended version of Andy E's linked &quot;Handle array-style query strings&quot;-version. Fixed a bug (&lt;code&gt;?key=1&amp;amp;key[]=2&amp;amp;key[]=3&lt;/code&gt;; &lt;code&gt;1&lt;/code&gt; is lost and replaced with &lt;code&gt;[2,3]&lt;/code&gt;), made a few minor performance improvements (re-decoding of values, recalculating &quot;[&quot; position, etc.) and added a number of improvements (functionalized, support for &lt;code&gt;?key=1&amp;amp;key=2&lt;/code&gt;, support for &lt;code&gt;;&lt;/code&gt; delimiters). I left the variables annoyingly short, but added comments galore to make them readable (oh, and I reused &lt;code&gt;v&lt;/code&gt; within the local functions, sorry if that is confusing ;).</source>
          <target state="translated">以下は、Andy Eのリンクされた「配列スタイルのクエリ文字列を処理する」バージョンの拡張バージョンです。 バグを修正しました（ &lt;code&gt;?key=1&amp;amp;key[]=2&amp;amp;key[]=3&lt;/code&gt; ; &lt;code&gt;1&lt;/code&gt; が失われ、 &lt;code&gt;[2,3]&lt;/code&gt; に置き換えられました）、いくつかのマイナーなパフォーマンスの改善（値の再デコード、 &quot;[&quot;位置の再計算など） 。）といくつかの改善を追加しました（機能化、 &lt;code&gt;?key=1&amp;amp;key=2&lt;/code&gt; のサポート、 &lt;code&gt;;&lt;/code&gt; 区切り文字のサポート）。 変数をわずらわしいほど短くしましたが、読みやすくするためにコメントを追加しました（ああ、ローカル関数内で &lt;code&gt;v&lt;/code&gt; を再利用しましたが、混乱を招くのでごめんなさい;）。</target>
        </trans-unit>
        <trans-unit id="132d69cbab8386e3ea447358de1a826cd93d8b77" translate="yes" xml:space="preserve">
          <source>Here's my edit to &lt;a href=&quot;https://stackoverflow.com/questions/901115/get-query-string-values-in-javascript/3855394#3855394&quot;&gt;this excellent answer&lt;/a&gt; - with added ability to parse query strings with keys without values.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/901115/get-query-string-values-in-javascript/3855394#3855394&quot;&gt;これがこの優れた答えに対する&lt;/a&gt;私の編集です。値のないキーを使用してクエリ文字列を解析する機能が追加されています。</target>
        </trans-unit>
        <trans-unit id="a2f72514d5af613c8a1343fa75d1ec41c2228bf1" translate="yes" xml:space="preserve">
          <source>Here's my stab at making Andy E's excellent solution into a full fledged jQuery plugin:</source>
          <target state="translated">アンディ・Eの優れたソリューションを本格的なjQueryプラグインにしてみました。</target>
        </trans-unit>
        <trans-unit id="da311a8a6a1110d5a8a74129d07303d78a225d20" translate="yes" xml:space="preserve">
          <source>Here's the gist:</source>
          <target state="translated">ここに要点があります。</target>
        </trans-unit>
        <trans-unit id="57d64c7cce2ed91ce4593b1967b05e88d8c4e52b" translate="yes" xml:space="preserve">
          <source>How can I get query string values in JavaScript</source>
          <target state="translated">JavaScriptでクエリ文字列の値を取得するには</target>
        </trans-unit>
        <trans-unit id="073e456c905ecba1929fe8e5a12e47b31e6e1796" translate="yes" xml:space="preserve">
          <source>However, as of Nov 11, 2014, Purl is no longer maintained and the author recommends using &lt;a href=&quot;https://github.com/medialize/URI.js&quot;&gt;URI.js&lt;/a&gt; instead.  The jQuery plugin is different in that it focuses on elements - for usage with strings, just use &lt;code&gt;URI&lt;/code&gt; directly, with or without jQuery.  Similar code would look as such, fuller docs &lt;a href=&quot;http://medialize.github.io/URI.js/docs.html&quot;&gt;here&lt;/a&gt;:</source>
          <target state="translated">ただし、2014年11月11日以降、Purlは維持されなくなったため、代わりに&lt;a href=&quot;https://github.com/medialize/URI.js&quot;&gt;URI.js&lt;/a&gt;を使用することをお勧めします。 jQueryプラグインは、要素に重点を置いている点が異なります。文字列で使用する場合は、jQueryの有無にかかわらず、直接 &lt;code&gt;URI&lt;/code&gt; を使用します。 同様のコードは次のようになります。詳細なドキュメント&lt;a href=&quot;http://medialize.github.io/URI.js/docs.html&quot;&gt;は&lt;/a&gt;次のとおりです 。</target>
        </trans-unit>
        <trans-unit id="bd67f1c87683773cb062fb7cdf71a5ccf1913a73" translate="yes" xml:space="preserve">
          <source>I like &lt;a href=&quot;http://jquery-howto.blogspot.co.uk/2009/09/get-url-parameters-values-with-jquery.html&quot;&gt;this one&lt;/a&gt; (taken from jquery-howto.blogspot.co.uk):</source>
          <target state="translated">私は&lt;a href=&quot;http://jquery-howto.blogspot.co.uk/2009/09/get-url-parameters-values-with-jquery.html&quot;&gt;これが&lt;/a&gt;好きです（jquery-howto.blogspot.co.ukから取得）：</target>
        </trans-unit>
        <trans-unit id="363bb9f49518fc8ecdacdffd5ca86ac45604b3df" translate="yes" xml:space="preserve">
          <source>I like &lt;a href=&quot;https://stackoverflow.com/a/3867610/632117&quot;&gt;Ryan Phelan's solution&lt;/a&gt;. But I don't see any point of extending jQuery for that? There is no usage of jQuery functionality.</source>
          <target state="translated">私は&lt;a href=&quot;https://stackoverflow.com/a/3867610/632117&quot;&gt;Ryan Phelanのソリューションが&lt;/a&gt;好きです。 しかし、そのためにjQueryを拡張する意味はないと思いますか？ jQuery機能の使用はありません。</target>
        </trans-unit>
        <trans-unit id="2ed3ababc0bcc06aaefdf15cc635cc6c6267e8ac" translate="yes" xml:space="preserve">
          <source>I modified the answer to let it parse a full query string with a hash sign also:</source>
          <target state="translated">私は、ハッシュ記号付きの完全なクエリ文字列を解析できるように答えを修正しました。</target>
        </trans-unit>
        <trans-unit id="f78977c2a64a76e65be51eb67323404b211ae0f6" translate="yes" xml:space="preserve">
          <source>I needed an object from the query string, and I hate lots of code. It may not be the most robust in the universe, but it's just a few lines of code.</source>
          <target state="translated">私はクエリ文字列からオブジェクトが必要で、コードがたくさんあるのが嫌いでした。宇宙で最も堅牢なものではないかもしれませんが たった数行のコードです</target>
        </trans-unit>
        <trans-unit id="79c201c11a4f3050ad47703f2c293359df401745" translate="yes" xml:space="preserve">
          <source>I use a compressed version of this. I'm posting uncompressed for the novice types to better explain what's going on.</source>
          <target state="translated">私は圧縮したものを使っています。初心者タイプの方にはよりよく説明するために 非圧縮で投稿しています</target>
        </trans-unit>
        <trans-unit id="fe807fc0749fd0c20c3a71dfe31c14bd36f7f7f4" translate="yes" xml:space="preserve">
          <source>I use regular expressions a lot, but not for that.</source>
          <target state="translated">正規表現はよく使うけど、それには使わない。</target>
        </trans-unit>
        <trans-unit id="000fb25af51395f0a84800bb15d10c9c841933b1" translate="yes" xml:space="preserve">
          <source>I was reading all the previous and more complete answers. But I think that is the simplest and faster method. You can check in this jsPerf &lt;a href=&quot;http://jsperf.com/querystring-with-javascript/9&quot;&gt;benchmark&lt;/a&gt;</source>
          <target state="translated">私は以前のより完全な答えをすべて読んでいました。 しかし、私はそれが最も簡単で速い方法だと思います。 あなたはこのjsPerf &lt;a href=&quot;http://jsperf.com/querystring-with-javascript/9&quot;&gt;ベンチマークで&lt;/a&gt;チェックすることができます</target>
        </trans-unit>
        <trans-unit id="81709ba36cdb825aca04763013dd5dda37e07d80" translate="yes" xml:space="preserve">
          <source>I'm sure this could be optimized or done differently to work faster, but it's always worked great for what I need.</source>
          <target state="translated">これを最適化したり、別の方法で高速化することもできると思いますが、私が必要としているものにはいつも素晴らしい働きをしてくれています。</target>
        </trans-unit>
        <trans-unit id="7e323860901e9b0b914295e6322a313c21df6b2a" translate="yes" xml:space="preserve">
          <source>If so, how? If not, is there a plugin which can do so?</source>
          <target state="translated">もしそうなら、どのようにして?そうでない場合は、それができるプラグインはありますか?</target>
        </trans-unit>
        <trans-unit id="87aba79e8f11e4b4acd477862634759b75fb2167" translate="yes" xml:space="preserve">
          <source>If the querystring is empty (&lt;code&gt;location.search == &quot;&quot;&lt;/code&gt;), the result is somewhat misleading &lt;code&gt;qd == {&quot;&quot;: undefined}&lt;/code&gt;. It is suggested to check the querystring before launching the parsing function likeso:</source>
          <target state="translated">クエリ文字列が空の場合（ &lt;code&gt;location.search == &quot;&quot;&lt;/code&gt; ）、結果はやや誤解を招く &lt;code&gt;qd == {&quot;&quot;: undefined}&lt;/code&gt; です。 次のように解析関数を起動する前に、クエリ文字列を確認することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5aca1f5b15e8c5d7b1cb2718573d533ad324f54f" translate="yes" xml:space="preserve">
          <source>If the specified key already exists in the target NameValueCollection
  instance, the specified value is added to the existing comma-separated
  list of values in the form &quot;value1,value2,value3&quot;.</source>
          <target state="translated">指定されたキーが対象の NameValueCollection インスタンスに既に存在する場合、指定された値は、&quot;value1,value2,value3&quot; の形式でカンマで区切られた既存の値のリストに追加されます。</target>
        </trans-unit>
        <trans-unit id="0d0ec74a4bd389a70f2b8e1935ba62040b6af4fd" translate="yes" xml:space="preserve">
          <source>If you are using Browserify, you can use the &lt;code&gt;url&lt;/code&gt; module from &lt;em&gt;Node.js&lt;/em&gt;:</source>
          <target state="translated">Browserifyを使用している場合は、 &lt;em&gt;Node.jsの&lt;/em&gt; &lt;code&gt;url&lt;/code&gt; モジュールを使用できます。</target>
        </trans-unit>
        <trans-unit id="a08d83cae1fd213bd82c23598b693c45b55526ff" translate="yes" xml:space="preserve">
          <source>If you want to just use plain JavaScript, you could use...</source>
          <target state="translated">プレーンなJavaScriptだけを使いたい場合は</target>
        </trans-unit>
        <trans-unit id="6f0ffeb6654f3a7ffee450af8c3ae2d36b6c0f96" translate="yes" xml:space="preserve">
          <source>If you're doing more URL manipulation than simply parsing the querystring, you may find &lt;a href=&quot;http://medialize.github.com/URI.js/&quot;&gt;URI.js&lt;/a&gt; helpful. It is a library for manipulating URLs - and comes with all the bells and whistles. (Sorry for self-advertising here)</source>
          <target state="translated">単にクエリ文字列を解析するだけではなく、より多くのURL操作を行う場合は、 &lt;a href=&quot;http://medialize.github.com/URI.js/&quot;&gt;URI.jsが&lt;/a&gt;役立つことがあります。 これは、URLを操作するためのライブラリであり、すべての付属品が付属しています。 （ここで自己宣伝して申し訳ありません）</target>
        </trans-unit>
        <trans-unit id="7996f9d8b0383e2d7a8670d2db775c6478909055" translate="yes" xml:space="preserve">
          <source>If you're using a server-side preprocessing language, you might want to use its native JSON functions to do the heavy lifting for you.  For example, in PHP you can write:</source>
          <target state="translated">サーバーサイドの前処理言語を使用している場合は、ネイティブのJSON関数を使用した方が良いでしょう。たとえば、PHPでは次のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="39c12b406e4e97742d8a76681a2e11ac2c322406" translate="yes" xml:space="preserve">
          <source>If you're using jQuery, you can use a library, such as &lt;a href=&quot;http://benalman.com/projects/jquery-bbq-plugin/&quot;&gt;jQuery BBQ: Back Button &amp;amp; Query Library&lt;/a&gt;.</source>
          <target state="translated">jQueryを使用している場合は、 &lt;a href=&quot;http://benalman.com/projects/jquery-bbq-plugin/&quot;&gt;jQuery BBQ：Back Button＆Query Library&lt;/a&gt;などのライブラリを使用できます。</target>
        </trans-unit>
        <trans-unit id="3b9f279ab9b93c15e7732d7f6d0361b677684684" translate="yes" xml:space="preserve">
          <source>Improved version of &lt;a href=&quot;https://stackoverflow.com/questions/901115/get-querystring-values-with-jquery/901144#901144&quot;&gt;Artem Barger's answer&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/901115/get-querystring-values-with-jquery/901144#901144&quot;&gt;Artem Bargerの回答の&lt;/a&gt;改良版：</target>
        </trans-unit>
        <trans-unit id="939c1360971f05361232aa1dfc51bcd0c83027a3" translate="yes" xml:space="preserve">
          <source>In the end the object &lt;code&gt;d&lt;/code&gt; is returned, handling escaping and the &lt;code&gt;+&lt;/code&gt; sign. This object is just like mine, it has the same behavior.</source>
          <target state="translated">最後に、オブジェクト &lt;code&gt;d&lt;/code&gt; が返され、エスケープと &lt;code&gt;+&lt;/code&gt; 記号が処理されます。 このオブジェクトは私のものと同じで、動作は同じです。</target>
        </trans-unit>
        <trans-unit id="0a3a442417df5b0f3e26ff5302d80065b36fef84" translate="yes" xml:space="preserve">
          <source>Is there a plugin-less way of retrieving &lt;a href=&quot;http://en.wikipedia.org/wiki/Query_string&quot;&gt;query string&lt;/a&gt; values via jQuery (or without)?</source>
          <target state="translated">jQueryを介して（またはせずに） &lt;a href=&quot;http://en.wikipedia.org/wiki/Query_string&quot;&gt;クエリ文字列&lt;/a&gt;値を取得するプラグインなしの方法はありますか？</target>
        </trans-unit>
        <trans-unit id="c942434e52be1941f81f456d259d83650c2fc586" translate="yes" xml:space="preserve">
          <source>It can be used with or without jQuery.</source>
          <target state="translated">jQueryの有無に関わらず使用できます。</target>
        </trans-unit>
        <trans-unit id="06449a1fc73d65df535617b5ae6f0aea504907b9" translate="yes" xml:space="preserve">
          <source>It is a simple library method that does dissection and manipulation of URL parameters. The static method has the following sub methods that can be called on the subject URL:</source>
          <target state="translated">これは、URLパラメータの分解と操作を行うシンプルなライブラリメソッドです。staticメソッドには以下のサブメソッドがあり、Subject URL上で呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="e11c918dadbe3781578fcc20c66a0f1e853ea947" translate="yes" xml:space="preserve">
          <source>It is not standardized by &lt;a href=&quot;https://www.w3.org/TR/2014/WD-url-1-20141209/#interface-urlsearchparams&quot;&gt;W3C&lt;/a&gt;, but it is a living standard by &lt;a href=&quot;https://url.spec.whatwg.org&quot;&gt;WhatWG&lt;/a&gt;.</source>
          <target state="translated">これは&lt;a href=&quot;https://www.w3.org/TR/2014/WD-url-1-20141209/#interface-urlsearchparams&quot;&gt;W3C&lt;/a&gt;によって標準化されていませんが、 &lt;a href=&quot;https://url.spec.whatwg.org&quot;&gt;WhatWG&lt;/a&gt;による生きた標準です 。</target>
        </trans-unit>
        <trans-unit id="11cddc7dd95111cd35e184f50fed79b8c617b9c9" translate="yes" xml:space="preserve">
          <source>It is obfuscated, but it is understandable. It does not work because some variables are undefined.</source>
          <target state="translated">難読化されていますが、理解できます。一部の変数が未定義なので動作しません。</target>
        </trans-unit>
        <trans-unit id="8e5326ea293b648dfb498c4737b71c49593fa53a" translate="yes" xml:space="preserve">
          <source>It seems &lt;a href=&quot;https://stackoverflow.com/questions/1746507/authoritative-position-of-duplicate-http-get-query-keys&quot;&gt;the jury is somewhat out&lt;/a&gt; on repeated keys as there is no spec. In this case, multiple keys are stored as an (fake)array. But do note that I &lt;strong&gt;do not&lt;/strong&gt; process values based on commas into arrays.</source>
          <target state="translated">仕様がない&lt;a href=&quot;https://stackoverflow.com/questions/1746507/authoritative-position-of-duplicate-http-get-query-keys&quot;&gt;ため、審査員は&lt;/a&gt;キーの繰り返しについていくぶん外れているようです。 この場合、複数のキーが（偽の）配列として格納されます。 ただし、コンマに基づく値を配列に処理&lt;strong&gt;しない&lt;/strong&gt;ことに注意して&lt;strong&gt;ください&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="5bc0d0c64bbf99b1a4ec89d5518cf19ec4b55828" translate="yes" xml:space="preserve">
          <source>It seems easier and more efficient to me to read the query string once in my application, and build an object from all the key/value pairs like:</source>
          <target state="translated">私にとっては、アプリケーションで一度クエリ文字列を読み込んで、以下のようにすべてのキーと値のペアからオブジェクトを構築する方が、より簡単で効率的に思えます。</target>
        </trans-unit>
        <trans-unit id="0d9e0072af909d8f1dbe2a8be04403380e6913da" translate="yes" xml:space="preserve">
          <source>It will handle the following querystring...</source>
          <target state="translated">次のようなquerystringを処理します...</target>
        </trans-unit>
        <trans-unit id="e57f582326a196e279b0369debf208ce142e0c47" translate="yes" xml:space="preserve">
          <source>Just added that capability also while adding in  the return statement</source>
          <target state="translated">return文で追加している間に、その機能も追加しました。</target>
        </trans-unit>
        <trans-unit id="5e57982a4f0bbf6468c5fe9a3ecd05a947ccd049" translate="yes" xml:space="preserve">
          <source>Just another recommendation. The plugin &lt;em&gt;&lt;a href=&quot;https://github.com/allmarkedup/jQuery-URL-Parser&quot;&gt;Purl&lt;/a&gt;&lt;/em&gt; allows to retrieve all parts of URL, including anchor, host, etc.</source>
          <target state="translated">ちょうど別の推奨事項。 プラグイン&lt;em&gt;&lt;a href=&quot;https://github.com/allmarkedup/jQuery-URL-Parser&quot;&gt;Purlを&lt;/a&gt;&lt;/em&gt;使用すると、アンカー、ホストなど、URLのすべての部分を取得できます。</target>
        </trans-unit>
        <trans-unit id="39775219f019850e5b5d67c91544fdf0f2873408" translate="yes" xml:space="preserve">
          <source>Just call &lt;code&gt;var langval = $.urlParam('lang');&lt;/code&gt;, and you've got it.</source>
          <target state="translated">&lt;code&gt;var langval = $.urlParam('lang');&lt;/code&gt; 呼び出すだけです。 、あなたはそれを手に入れました。</target>
        </trans-unit>
        <trans-unit id="f7157d509275674f6d5ecbec37fbd08893a281d2" translate="yes" xml:space="preserve">
          <source>Just use two &lt;strong&gt;splits&lt;/strong&gt;:</source>
          <target state="translated">2つの&lt;strong&gt;スプリットを&lt;/strong&gt;使用するだけです。</target>
        </trans-unit>
        <trans-unit id="f207b9e49068d57e814e520cfce9889714432e57" translate="yes" xml:space="preserve">
          <source>Keep it simple in plain JavaScript code:</source>
          <target state="translated">シンプルなJavaScriptコードでシンプルに。</target>
        </trans-unit>
        <trans-unit id="41d3f0ba4eb4a4f6a8f2357e3f45a9724879b4b6" translate="yes" xml:space="preserve">
          <source>Much simpler!</source>
          <target state="translated">もっとシンプルに!</target>
        </trans-unit>
        <trans-unit id="c31c16bf28a87dd39c0cc7ceabf8f26f194b95d5" translate="yes" xml:space="preserve">
          <source>Multi-lined:</source>
          <target state="translated">Multi-lined:</target>
        </trans-unit>
        <trans-unit id="7a470436b960c7bdafbae4ddd2230b6507d78309" translate="yes" xml:space="preserve">
          <source>Multi-valued keys</source>
          <target state="translated">多値キー</target>
        </trans-unit>
        <trans-unit id="1a2c48fe1b52e0d77aca5bf7ab544676b4a8ef74" translate="yes" xml:space="preserve">
          <source>My method as a &lt;strong&gt;jQuery plugin&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;jQueryプラグイン&lt;/strong&gt;としての私のメソッド</target>
        </trans-unit>
        <trans-unit id="ffe0cab36ad398551d537199d563d31ff53d5e3b" translate="yes" xml:space="preserve">
          <source>NOTE: The function is case-sensitive. If you prefer case-insensitive parameter name, &lt;a href=&quot;https://stackoverflow.com/questions/3939715/case-insensitive-regex-in-javascript&quot;&gt;add 'i' modifier to RegExp&lt;/a&gt;</source>
          <target state="translated">注：関数では大文字と小文字が区別されます。 大文字と小文字を区別しないパラメータ名を使用&lt;a href=&quot;https://stackoverflow.com/questions/3939715/case-insensitive-regex-in-javascript&quot;&gt;する&lt;/a&gt;場合は、RegExpに「i」修飾子を追加します</target>
        </trans-unit>
        <trans-unit id="e342d9ceee97455375446a33c725d14171eb5e6e" translate="yes" xml:space="preserve">
          <source>Note: If a parameter is present several times (&lt;code&gt;?foo=lorem&amp;amp;foo=ipsum&lt;/code&gt;), you will get the first value (&lt;code&gt;lorem&lt;/code&gt;). There is no standard about this and usages vary, see for example this question: &lt;a href=&quot;https://stackoverflow.com/questions/1746507/authoritative-position-of-duplicate-http-get-query-keys&quot;&gt;Authoritative position of duplicate HTTP GET query keys&lt;/a&gt;.</source>
          <target state="translated">注：パラメータが複数回存在する場合（ &lt;code&gt;?foo=lorem&amp;amp;foo=ipsum&lt;/code&gt; ）、最初の値（ &lt;code&gt;lorem&lt;/code&gt; ）を取得します。 これに関する標準はなく、使用方法はさまざまです。たとえば、次の質問を参照してください。 &lt;a href=&quot;https://stackoverflow.com/questions/1746507/authoritative-position-of-duplicate-http-get-query-keys&quot;&gt;重複するHTTP GETクエリキーの権限のある位置&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="43c7a3ea7253466a37057cb8334c7958806eb6df" translate="yes" xml:space="preserve">
          <source>Now returns &lt;b&gt;arrays&lt;/b&gt; instead.</source>
          <target state="translated">代わりに&lt;b&gt;配列&lt;/b&gt;を返すようになりました。</target>
        </trans-unit>
        <trans-unit id="c2471f4da04fb01da16baeda4a33cd4ee040e3f0" translate="yes" xml:space="preserve">
          <source>Now you can find the updated gist:</source>
          <target state="translated">これで更新された要点がわかるようになりました。</target>
        </trans-unit>
        <trans-unit id="3c9422d5c4a86cebd5de145afc04796575bbd229" translate="yes" xml:space="preserve">
          <source>On my Mac: &lt;code&gt;test.htm?i=can&amp;amp;has=cheezburger&lt;/code&gt; displays</source>
          <target state="translated">Mac： &lt;code&gt;test.htm?i=can&amp;amp;has=cheezburger&lt;/code&gt; が表示されます</target>
        </trans-unit>
        <trans-unit id="537ef0f2a672534b79397686a0f2fa1d74fc14bd" translate="yes" xml:space="preserve">
          <source>On the other hand, I like the built-in function in Google Chrome: window.location.getParameter.</source>
          <target state="translated">一方、私はGoogle Chromeの組み込み関数が好きです:window.location.getParameter.</target>
        </trans-unit>
        <trans-unit id="c052a09c90643f5d3c0aaba27402c7eb0eada351" translate="yes" xml:space="preserve">
          <source>Opera Announcement and details</source>
          <target state="translated">オペラのお知らせと詳細</target>
        </trans-unit>
        <trans-unit id="cca8e52d510a96977a45bd9f72c787c66c876e61" translate="yes" xml:space="preserve">
          <source>Or of course on any URL:</source>
          <target state="translated">もちろんどんなURLでも。</target>
        </trans-unit>
        <trans-unit id="10f363b735c302f44ed620411c0930ff6b35fe62" translate="yes" xml:space="preserve">
          <source>Overrides &lt;b&gt;multi-keys&lt;/b&gt; with &lt;b&gt;last&lt;/b&gt; value found.</source>
          <target state="translated">&lt;b&gt;最後に&lt;/b&gt;見つかった値で&lt;b&gt;マルチキー&lt;/b&gt;を上書きし&lt;b&gt;ます&lt;/b&gt; 。</target>
        </trans-unit>
        <trans-unit id="7557ddf49eda41f29918181441555cb4d277e0a3" translate="yes" xml:space="preserve">
          <source>Preparation code: methods declaration</source>
          <target state="translated">準備コード:メソッド宣言</target>
        </trans-unit>
        <trans-unit id="3c53c636d12f95e9beeb95725e1c43c7ac0031f3" translate="yes" xml:space="preserve">
          <source>Read more... about the Vanilla JavaScript solution.</source>
          <target state="translated">続きを読む...バニラJavaScriptのソリューションについて。</target>
        </trans-unit>
        <trans-unit id="4752dd2f39ea7d253016f5d35abab9eaeb1d3de4" translate="yes" xml:space="preserve">
          <source>Regex test code</source>
          <target state="translated">正規表現テストコード</target>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="9be8504a8f678e5d59f7566150005d5cb3768376" translate="yes" xml:space="preserve">
          <source>Roshambo jQuery method wasn't taking care of decode URL</source>
          <target state="translated">RoshamboのjQueryメソッドがURLのデコードに気を使っていなかった</target>
        </trans-unit>
        <trans-unit id="8bb4d1b06e6b852b3d6f7e8520515eddd31556bc" translate="yes" xml:space="preserve">
          <source>Roshambo on snipplr.com has a simple script to achieve this described in &lt;em&gt;&lt;a href=&quot;http://snipplr.com/view/26662/get-url-parameters-with-jquery--improved/&quot;&gt;Get URL Parameters with jQuery | Improved&lt;/a&gt;&lt;/em&gt;. With his script you also easily get to pull out just the parameters you want.</source>
          <target state="translated">snipplr.comのRoshamboには、 &lt;em&gt;&lt;a href=&quot;http://snipplr.com/view/26662/get-url-parameters-with-jquery--improved/&quot;&gt;jQueryを使用してURLパラメータを取得&lt;/a&gt;&lt;/em&gt;するで説明されているこれを実現する簡単なスクリプトがあり&lt;em&gt;ます。&lt;/em&gt; &lt;em&gt;改善された&lt;/em&gt; 。 彼のスクリプトを使用すると、必要なパラメーターだけを簡単に引き出すこともできます。</target>
        </trans-unit>
        <trans-unit id="08ac9fbbc9dc3ce88122248070ff14cced35c8d0" translate="yes" xml:space="preserve">
          <source>Simple key check &lt;code&gt;(item in dict) ? dict.item.push(val) : dict.item = [val]&lt;/code&gt;</source>
          <target state="translated">単純なキーチェック &lt;code&gt;(item in dict) ? dict.item.push(val) : dict.item = [val]&lt;/code&gt; dict.item.push（val）：dict.item = [val]</target>
        </trans-unit>
        <trans-unit id="8aa02fb18be713e7da4cba6773249b7b4dff0f2d" translate="yes" xml:space="preserve">
          <source>So if the URL/query string was &lt;code&gt;xyz.com/index.html?lang=de&lt;/code&gt;.</source>
          <target state="translated">したがって、URL /クエリ文字列が &lt;code&gt;xyz.com/index.html?lang=de&lt;/code&gt; であった場合 。</target>
        </trans-unit>
        <trans-unit id="27c01f6d15e1f792a4740307f0513b452fa04ff4" translate="yes" xml:space="preserve">
          <source>So if you know you won't run into Rup's counter-case, this wins. Otherwise, regexp.</source>
          <target state="translated">ルプのカウンターケースに出くわすことがないと分かっているなら これは勝ちです そうでなければ再正規表現してください</target>
        </trans-unit>
        <trans-unit id="8436af2669db42bebb74a68489289c5b91e668ca" translate="yes" xml:space="preserve">
          <source>So what exactly changed? With url &lt;code&gt;http://sb.com/reg/step1?param=&lt;/code&gt; results will be same. But with url &lt;code&gt;http://sb.com/reg/step1?param&lt;/code&gt; Bruno's solution returns an object without keys, while mine returns an object with key &lt;code&gt;param&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; value.</source>
          <target state="translated">では、正確に何が変わったのでしょうか？ URL &lt;code&gt;http://sb.com/reg/step1?param=&lt;/code&gt; を使用すると、結果は同じになります。 しかし、URL &lt;code&gt;http://sb.com/reg/step1?param&lt;/code&gt; を使用すると、Brunoのソリューションはキーなしのオブジェクトを返しますが、私のものはキー &lt;code&gt;param&lt;/code&gt; および &lt;code&gt;undefined&lt;/code&gt; 値を持つオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="9759c5e93ea70521574ed63522a86d62feb12cfd" translate="yes" xml:space="preserve">
          <source>So why not to use this? Okay, other browsers don't have. So let's create this function if it does not exist:</source>
          <target state="translated">では、なぜこれを使わないのか?さて、他のブラウザにはありません。ということで、存在しない場合はこの機能を作ってみましょう。</target>
        </trans-unit>
        <trans-unit id="a0f08300b4e6c071a2da3c87dc7c8ab283896891" translate="yes" xml:space="preserve">
          <source>So, this is the approach to manage it:</source>
          <target state="translated">ということで、これが管理するためのアプローチです。</target>
        </trans-unit>
        <trans-unit id="275598542ca0a399c37db60c2c8233f7564d0237" translate="yes" xml:space="preserve">
          <source>Some of the solutions posted here are inefficient. Repeating the regular expression search every time the script needs to access a parameter is completely unnecessary, one single function to split up the parameters into an associative-array style object is enough. If you're not working with the HTML 5 History API, this is only necessary once per page load.  The other suggestions here also fail to decode the URL correctly.</source>
          <target state="translated">ここに投稿されている解決策の中には、非効率的なものもあります。スクリプトがパラメータにアクセスする必要があるたびに正規表現検索を繰り返すのは完全に不要で、パラメータを連想配列スタイルのオブジェクトに分割する関数が1つあれば十分です。HTML 5 History API を使用していない場合は、ページの読み込みごとに一度だけ必要になります。ここでの他の提案もまた、URL を正しくデコードすることに失敗します。</target>
        </trans-unit>
        <trans-unit id="62669f1c0f3a400a1cdf3d2361e05585135d5429" translate="yes" xml:space="preserve">
          <source>Split test code</source>
          <target state="translated">スプリットテストコード</target>
        </trans-unit>
        <trans-unit id="cae4ef2c7ff69f37950b90d84019dc33390b37e0" translate="yes" xml:space="preserve">
          <source>Tearing Google's code I found the method they use: &lt;code&gt;getUrlParameters&lt;/code&gt;</source>
          <target state="translated">グーグルのコードを引き裂く私は彼らが使用するメソッドを見つけました： &lt;code&gt;getUrlParameters&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="49c72239751b2e412597c78b117d3a3b7483ac0c" translate="yes" xml:space="preserve">
          <source>The problem with the top answer on that question is that it's not-supported parameters placed after #, but sometimes it's needed to get this value also.</source>
          <target state="translated">その質問の一番上の答えの問題は、#の後に配置された非サポートのパラメータですが、この値を取得するためにも必要な場合があります。</target>
        </trans-unit>
        <trans-unit id="869d833f9b3336891a11a67fcd142e1caac2f566" translate="yes" xml:space="preserve">
          <source>The syntax is:</source>
          <target state="translated">構文は</target>
        </trans-unit>
        <trans-unit id="cf7022789844fe203ac43cfc1a2b12c5aefad738" translate="yes" xml:space="preserve">
          <source>Then just get your parameters from the query string.</source>
          <target state="translated">あとは、クエリ文字列からパラメータを取得するだけです。</target>
        </trans-unit>
        <trans-unit id="638840f34b22b5ae9b66bd9c24c447b9e15dd740" translate="yes" xml:space="preserve">
          <source>There is a google-suggested &lt;strong&gt;&lt;a href=&quot;https://github.com/WebReflection/url-search-params&quot;&gt;URLSearchParams polyfill&lt;/a&gt;&lt;/strong&gt; for the stable versions of IE.</source>
          <target state="translated">IEの安定バージョンには、Googleが推奨する&lt;strong&gt;&lt;a href=&quot;https://github.com/WebReflection/url-search-params&quot;&gt;URLSearchParamsポリフィル&lt;/a&gt;&lt;/strong&gt;があります。</target>
        </trans-unit>
        <trans-unit id="e886cc5a12cf11b6338ae8af68acdfe43fdead94" translate="yes" xml:space="preserve">
          <source>These are all great answers, but I needed something a bit more robust, and thought you all might like to have what I created.</source>
          <target state="translated">これらはすべて素晴らしい答えですが、私はもう少ししっかりしたものが必要で、私が作ったものを皆さんに持ってもらいたいと思っていました。</target>
        </trans-unit>
        <trans-unit id="a843b1bdd4230f8b19e0d45e0269d3d8533abf96" translate="yes" xml:space="preserve">
          <source>They start to look for parameters on the url from &lt;code&gt;?&lt;/code&gt; and also from the hash &lt;code&gt;#&lt;/code&gt;. Then for each parameter they split in the equal sign &lt;code&gt;b[f][p](&quot;=&quot;)&lt;/code&gt; (which looks like &lt;code&gt;indexOf&lt;/code&gt;, they use the position of the char to get the key/value). Having it split they check whether the parameter has a value or not, if it has then they store the value of &lt;code&gt;d&lt;/code&gt;, otherwise they just continue.</source>
          <target state="translated">彼らはからURLのパラメータを探し始めます &lt;code&gt;?&lt;/code&gt; また、ハッシュから &lt;code&gt;#&lt;/code&gt; 。 次に、パラメーターごとに等号 &lt;code&gt;b[f][p](&quot;=&quot;)&lt;/code&gt; に分割します（これは &lt;code&gt;indexOf&lt;/code&gt; のように見えますが、charの位置を使用してキー/値を取得します）。 分割すると、パラメーターに値があるかどうかがチェックされ、値がある場合は &lt;code&gt;d&lt;/code&gt; の値が格納されます。それ以外の場合は続行されます。</target>
        </trans-unit>
        <trans-unit id="e5f177b7dc70f30062b86a2e4b48e1574fe4fe3b" translate="yes" xml:space="preserve">
          <source>This could easily be improved upon to handle array-style query strings too.  An example of this is &lt;a href=&quot;http://jsbin.com/adali3/2&quot;&gt;here&lt;/a&gt;, but since array-style parameters aren't defined in &lt;a href=&quot;http://tools.ietf.org/html/rfc3986&quot;&gt;RFC 3986&lt;/a&gt; I won't pollute this answer with the source code. &lt;a href=&quot;https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript/23401756#23401756&quot;&gt;For those interested in a &quot;polluted&quot; version, look at campbeln's answer below&lt;/a&gt;.</source>
          <target state="translated">これは、配列スタイルのクエリ文字列を処理するためにも簡単に改善できます。 これの例は&lt;a href=&quot;http://jsbin.com/adali3/2&quot;&gt;こちら&lt;/a&gt;ですが、配列スタイルのパラメーターは&lt;a href=&quot;http://tools.ietf.org/html/rfc3986&quot;&gt;RFC 3986で&lt;/a&gt;定義されていないため、この回答をソースコードで汚染することはありません。 &lt;a href=&quot;https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript/23401756#23401756&quot;&gt;「汚染された」バージョンに興味がある人は、以下のCampbelnの答えを見てください&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="785fbe088ab7b929831fb85238315c9b070e6dd2" translate="yes" xml:space="preserve">
          <source>This function is more or less from Ryan Phelan, but it is wrapped differently: clear name and no dependencies of other javascript libraries. &lt;a href=&quot;http://sharepointkunskap.wordpress.com/2012/01/11/get-url-parameters-with-javascript/&quot;&gt;More about this function on my blog&lt;/a&gt;.</source>
          <target state="translated">この関数は、Ryan Phelanとほぼ同じですが、ラップ方法が異なります。明確な名前で、他のJavaScriptライブラリの依存関係はありません。 &lt;a href=&quot;http://sharepointkunskap.wordpress.com/2012/01/11/get-url-parameters-with-javascript/&quot;&gt;この機能の詳細については、私のブログをご覧ください&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="70ce98195ff8aa37fd7abebc93e808753cb4ebbd" translate="yes" xml:space="preserve">
          <source>This is a function I created a while back and I'm quite happy with. It is not case sensitive - which is handy. Also, if the requested QS doesn't exist, it just returns an empty string.</source>
          <target state="translated">これはしばらく前に作った機能で、かなり満足しています。大文字小文字を区別しません-これは便利です。また、要求されたQSが存在しない場合は空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="880f4163a15c8a19d4b57d0b69c2302c39bea48a" translate="yes" xml:space="preserve">
          <source>This is an update based on the new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams&quot;&gt;URLSearchParams specs&lt;/a&gt; to achieve the same result more succinctly. See answer titled &quot;&lt;a href=&quot;https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript/901144#12151322&quot;&gt;URLSearchParams&lt;/a&gt;&quot; below.</source>
          <target state="translated">これは、同じ結果をより簡潔に達成するための、新しい&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams&quot;&gt;URLSearchParams仕様&lt;/a&gt;に基づく更新です。 以下の「 &lt;a href=&quot;https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript/901144#12151322&quot;&gt;URLSearchParams&lt;/a&gt; 」というタイトルの回答を参照してください。</target>
        </trans-unit>
        <trans-unit id="b9db0bc0a8c58c3017b8ec738697d3bd06ce2780" translate="yes" xml:space="preserve">
          <source>This version will update its internal cache of parameters each time the history changes.</source>
          <target state="translated">このバージョンでは、履歴が変更されるたびにパラメータの内部キャッシュが更新されます。</target>
        </trans-unit>
        <trans-unit id="0e7fc00961b74dd24ca9653ed04641900be663c2" translate="yes" xml:space="preserve">
          <source>To solve the problem in Rup's comment, add a conditional split by changing the first line to the two below. But absolute accuracy means it's now slower than regexp (see &lt;a href=&quot;http://jsperf.com/querystring-with-javascript/10&quot;&gt;jsPerf&lt;/a&gt;).</source>
          <target state="translated">Rupのコメントの問題を解決するには、最初の行を以下の2行に変更して、条件付き分割を追加します。 ただし、絶対精度とは、正規表現よりも遅いことを意味します（ &lt;a href=&quot;http://jsperf.com/querystring-with-javascript/10&quot;&gt;jsPerfを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="47b23b39759a1908e680a0a3b5cb3c99d6de735e" translate="yes" xml:space="preserve">
          <source>UPDATED</source>
          <target state="translated">UPDATED</target>
        </trans-unit>
        <trans-unit id="b19e8d66e7f004e226c44a75766dadab7d09911a" translate="yes" xml:space="preserve">
          <source>URLSearchParams</source>
          <target state="translated">URLSearchParams</target>
        </trans-unit>
        <trans-unit id="5a8cd4a189f53053616ff5571c7cf39afe0885c1" translate="yes" xml:space="preserve">
          <source>UZBEKJON has a great blog post on this as well, &lt;em&gt;&lt;a href=&quot;http://jquery-howto.blogspot.com/2009/09/get-url-parameters-values-with-jquery.html&quot;&gt;Get URL parameters &amp;amp; values with jQuery&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">UZBEKJONにも、 &lt;em&gt;&lt;a href=&quot;http://jquery-howto.blogspot.com/2009/09/get-url-parameters-values-with-jquery.html&quot;&gt;jQueryを使用してURLパラメータと値を取得&lt;/a&gt;&lt;/em&gt;するという素晴らしいブログ投稿があり&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="b93fb7a6a3be201a9ffddb0c9abd27f858aee537" translate="yes" xml:space="preserve">
          <source>Usage is very simple and cool:</source>
          <target state="translated">使い方はとてもシンプルでかっこいいです。</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="392df2a166f2f52393355ae22d0307f078b54728" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;decodeURIComponent()&lt;/code&gt; for the second &lt;em&gt;or both&lt;/em&gt; splits.</source>
          <target state="translated">2番目&lt;em&gt;または両方の&lt;/em&gt;分割には、 &lt;code&gt;decodeURIComponent()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="ff3e16b2ce3562cdd238525776f9c4ebc2eef93c" translate="yes" xml:space="preserve">
          <source>We've just released &lt;a href=&quot;https://github.com/stretchr/arg.js&quot;&gt;arg.js&lt;/a&gt;, a project aimed at solving this problem once and for all.  It's traditionally been so difficult but now you can do:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/stretchr/arg.js&quot;&gt;arg.jsを&lt;/a&gt;リリースしました。これは、この問題を一度だけ解決することを目的としたプロジェクトです。 これまでは非常に困難でしたが、次のことが可能になりました。</target>
        </trans-unit>
        <trans-unit id="c3804ffce841dd1b7f21366c2ef0fdde6c5bf130" translate="yes" xml:space="preserve">
          <source>What is all this code...</source>
          <target state="translated">このコードは何だ...</target>
        </trans-unit>
        <trans-unit id="e49acedde6c2da878b9e79c1a9d7df57c479b9c3" translate="yes" xml:space="preserve">
          <source>With an URL like &lt;code&gt;?topic=123&amp;amp;name=query+string&lt;/code&gt;, the following will return:</source>
          <target state="translated">&lt;code&gt;?topic=123&amp;amp;name=query+string&lt;/code&gt; のようなURLを使用すると、次のコードが返されます。</target>
        </trans-unit>
        <trans-unit id="0c0a59fb074de0fc1fd7cee2f49870f337cc9102" translate="yes" xml:space="preserve">
          <source>Without jQuery</source>
          <target state="translated">jQueryを使わずに</target>
        </trans-unit>
        <trans-unit id="3ae633fca7fc3cfcefb10e9095e623c1e577d05b" translate="yes" xml:space="preserve">
          <source>Works great for me.</source>
          <target state="translated">私のために素晴らしい仕事をしています。</target>
        </trans-unit>
        <trans-unit id="dffd535ef0186fa22439ec59e86712413ad1b9a1" translate="yes" xml:space="preserve">
          <source>You can also use URLSearchParams for it, here's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams#Example&quot;&gt;an example from MDN&lt;/a&gt; to do it with URLSearchParams:</source>
          <target state="translated">URLSearchParamsを使用することもできます。URLSearchParamsで実行するための&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams#Example&quot;&gt;MDNの例を次に示し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4ede7842007a910025b46477a4c81da92b054e8c" translate="yes" xml:space="preserve">
          <source>You can get params also using a shorthand &lt;code&gt;.searchParams&lt;/code&gt; property on the URL object, like this:</source>
          <target state="translated">次のように、URLオブジェクトの &lt;code&gt;.searchParams&lt;/code&gt; プロパティを使用してパラメータを取得することもできます。</target>
        </trans-unit>
        <trans-unit id="bec4d2ce8c312b81ed4ea34a1fa6877786b84da0" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams#Browser_compatibility&quot;&gt;URLSearchParams&lt;/a&gt; which is simple and has &lt;a href=&quot;https://caniuse.com/#feat=urlsearchparams&quot;&gt;decent (but not complete) browser support&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams#Browser_compatibility&quot;&gt;URLSearchParams&lt;/a&gt;を使用できます。これはシンプルで、 &lt;a href=&quot;https://caniuse.com/#feat=urlsearchparams&quot;&gt;適切な（ただし完全ではない）ブラウザサポートがあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="5a2e5e1b0d7dd97f755e9e72aa22014f827c6086" translate="yes" xml:space="preserve">
          <source>You can use it on &lt;code&gt;location&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;location&lt;/code&gt; 使用できます：</target>
        </trans-unit>
        <trans-unit id="95636b19872bae2965f8a7b844f3b33edcc8ab4d" translate="yes" xml:space="preserve">
          <source>You don't need jQuery for that purpose. You can use just some pure JavaScript:</source>
          <target state="translated">そのためにはjQueryは必要ありません。純粋なJavaScriptを使えばいいのです。</target>
        </trans-unit>
        <trans-unit id="a4deb33adf10380e08f4a933d326aeb7a6b90323" translate="yes" xml:space="preserve">
          <source>You read/set parameters through the &lt;code&gt;get(KEY)&lt;/code&gt;, &lt;code&gt;set(KEY, VALUE)&lt;/code&gt;, &lt;code&gt;append(KEY, VALUE)&lt;/code&gt; API. You can also iterate over all values &lt;code&gt;for (let p of params) {}&lt;/code&gt;.</source>
          <target state="translated">パラメータの読み取り/設定は、 &lt;code&gt;get(KEY)&lt;/code&gt; 、 &lt;code&gt;set(KEY, VALUE)&lt;/code&gt; 、 &lt;code&gt;append(KEY, VALUE)&lt;/code&gt; APIを使用して行います。 &lt;code&gt;for (let p of params) {}&lt;/code&gt; すべての値を反復処理することもできます。</target>
        </trans-unit>
        <trans-unit id="838bd1bcefa13f29010a286f1eadbaf9c144650a" translate="yes" xml:space="preserve">
          <source>and if you care about the difference between &lt;code&gt;?query=true&lt;/code&gt; and &lt;code&gt;#hash=true&lt;/code&gt; then you can use the &lt;code&gt;Arg.query()&lt;/code&gt; and &lt;code&gt;Arg.hash()&lt;/code&gt; methods.</source>
          <target state="translated">また、 &lt;code&gt;?query=true&lt;/code&gt; と &lt;code&gt;Arg.query()&lt;/code&gt; = trueの違いを気にする場合は、 &lt;code&gt;Arg.hash()&lt;/code&gt; メソッドとArg.hash（）メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="d063002e0b1cd2adbddcbf212619985781f96479" translate="yes" xml:space="preserve">
          <source>getHash</source>
          <target state="translated">getHash</target>
        </trans-unit>
        <trans-unit id="be7ccc1402c4ef7b03a97cb983978c3793e26812" translate="yes" xml:space="preserve">
          <source>getHost</source>
          <target state="translated">getHost</target>
        </trans-unit>
        <trans-unit id="b5a5fe44454826c283f4f56097f59524379aa727" translate="yes" xml:space="preserve">
          <source>getParam</source>
          <target state="translated">getParam</target>
        </trans-unit>
        <trans-unit id="403e8e0a2033d5412408c1b64b782d5f1c1d95be" translate="yes" xml:space="preserve">
          <source>getParams</source>
          <target state="translated">getParams</target>
        </trans-unit>
        <trans-unit id="bc119b82b82560bad5a3f6cf69db9444b34ebfb6" translate="yes" xml:space="preserve">
          <source>getPath</source>
          <target state="translated">getPath</target>
        </trans-unit>
        <trans-unit id="3bd6d0bd1635786a7175c813be113edac076e2e1" translate="yes" xml:space="preserve">
          <source>getQuery</source>
          <target state="translated">getQuery</target>
        </trans-unit>
        <trans-unit id="3fd57351e3f02a8a8053535c9bdee5b0fa524726" translate="yes" xml:space="preserve">
          <source>hasParam</source>
          <target state="translated">hasParam</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="e325bd97642094b3751758dabdc4840b6401c0ea" translate="yes" xml:space="preserve">
          <source>or getting the whole lot:</source>
          <target state="translated">それとも全部を手に入れるか</target>
        </trans-unit>
        <trans-unit id="97a8e0547c911e89290749777617372f2ee2216a" translate="yes" xml:space="preserve">
          <source>removeParam</source>
          <target state="translated">removeParam</target>
        </trans-unit>
        <trans-unit id="2a01642660f3da69300df25564329261a463dac4" translate="yes" xml:space="preserve">
          <source>setHash</source>
          <target state="translated">setHash</target>
        </trans-unit>
        <trans-unit id="8abd850531e327fb74f340d4cef8d080c94e5580" translate="yes" xml:space="preserve">
          <source>setParam</source>
          <target state="translated">setParam</target>
        </trans-unit>
        <trans-unit id="b2407cb2215024ae653dbf5a158744f770da9e61" translate="yes" xml:space="preserve">
          <source>to convert your querystring into a map:</source>
          <target state="translated">を使用して、クエリ文字列をマップに変換します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
