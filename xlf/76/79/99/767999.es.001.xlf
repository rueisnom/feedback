<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/767999">
    <body>
      <group id="767999">
        <trans-unit id="4a854acb264c640bad8b85ad2804f32ea02e1ded" translate="yes" xml:space="preserve">
          <source>1) As Marc Gravell said, try to use ONE random-generator. It's always cool to add this to the constructor: System.Environment.TickCount.</source>
          <target state="translated">1)Como dijo Marc Gravell,intenta usar UN generador aleatorio.Siempre es genial añadir esto al constructor:Sistema.Entorno.TickCount.</target>
        </trans-unit>
        <trans-unit id="5f865b448736b0cfbbf3130df374f213ebc7de02" translate="yes" xml:space="preserve">
          <source>2) One tip. Let's say you want to create 100 objects and suppose each of them should have its-own random-generator (handy if you calculate LOADS of random numbers in a very short period of time). If you would do this in a loop (generation of 100 objects), you could do this like that (to assure fully-randomness):</source>
          <target state="translated">2)Un consejo.Digamos que quieres crear 100 objetos y supongamos que cada uno de ellos debe tener su propio generador aleatorio (útil si calculas Cargas de números aleatorios en un período de tiempo muy corto).Si lo hicieras en un bucle (generación de 100 objetos),podrías hacerlo así (para asegurar la total aleatoriedad):</target>
        </trans-unit>
        <trans-unit id="f288b7308c1b6ccf17b7ba15a6dbe5654dc26537" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;It's going to be a wee bit slower, but can be much more random&lt;/em&gt; than &lt;code&gt;Random.Next&lt;/code&gt;, at least from my experience.</source>
          <target state="translated">&lt;em&gt;Va a ser un poco m&amp;aacute;s lento, pero puede ser mucho m&amp;aacute;s aleatorio&lt;/em&gt; que &lt;code&gt;Random.Next&lt;/code&gt; . A continuaci&amp;oacute;n , al menos desde mi experiencia.</target>
        </trans-unit>
        <trans-unit id="9cd2fb0e26bd324270042f00a02a39f5d6a0fad0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If you strictly need a true stateless static method&lt;/strong&gt; to generate random numbers, you can rely on a &lt;code&gt;Guid&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Si necesita estrictamente un verdadero m&amp;eacute;todo est&amp;aacute;tico sin estado&lt;/strong&gt; para generar n&amp;uacute;meros aleatorios, puede confiar en un &lt;code&gt;Guid&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8678c60f067b0302a61703d8729ac91bea3b16d0" translate="yes" xml:space="preserve">
          <source>And &lt;strong&gt;never&lt;/strong&gt;:</source>
          <target state="translated">Y &lt;strong&gt;nunca&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="397dbbdfa117a47c87fd889b4b1236c0001cba41" translate="yes" xml:space="preserve">
          <source>Basically, &lt;code&gt;Next&lt;/code&gt; is going to change the internal state of the &lt;code&gt;Random&lt;/code&gt; instance. If we do that at the same time from multiple threads, you &lt;em&gt;could&lt;/em&gt; argue &quot;we've just made the outcome even more random&quot;, but what we are &lt;em&gt;actually&lt;/em&gt; doing is potentially breaking the internal implementation, and we could also start getting the same numbers from different threads, which &lt;em&gt;might&lt;/em&gt; be a problem - and might not. The guarantee of what happens internally is the bigger issue, though; since &lt;code&gt;Random&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; make any guarantees of thread-safety. Thus there are two valid approaches:</source>
          <target state="translated">B&amp;aacute;sicamente, &lt;code&gt;Next&lt;/code&gt; va a cambiar el estado interno de la instancia &lt;code&gt;Random&lt;/code&gt; . Si hacemos eso al mismo tiempo desde m&amp;uacute;ltiples hilos, &lt;em&gt;podr&amp;iacute;a&lt;/em&gt; argumentar &quot;acabamos de hacer que el resultado sea a&amp;uacute;n m&amp;aacute;s aleatorio&quot;, pero lo que &lt;em&gt;realmente&lt;/em&gt; estamos haciendo es potencialmente romper la implementaci&amp;oacute;n interna, y tambi&amp;eacute;n podr&amp;iacute;amos comenzar a obtener los mismos n&amp;uacute;meros de diferentes hilos, lo que &lt;em&gt;podr&amp;iacute;a&lt;/em&gt; ser un problema, y ​​podr&amp;iacute;a no serlo. Sin embargo, la garant&amp;iacute;a de lo que sucede internamente es el problema m&amp;aacute;s importante; ya que &lt;code&gt;Random&lt;/code&gt; no garantiza la seguridad del hilo. Por lo tanto, hay dos enfoques v&amp;aacute;lidos:</target>
        </trans-unit>
        <trans-unit id="2ca257d36379ffcd8184cb7cb326bb1e48fb915e" translate="yes" xml:space="preserve">
          <source>But &lt;strong&gt;not&lt;/strong&gt;:</source>
          <target state="translated">Pero &lt;strong&gt;no&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="f8eb3248811492e79afeba88e2112b19fd5e3085" translate="yes" xml:space="preserve">
          <source>Cheers.</source>
          <target state="translated">Cheers.</target>
        </trans-unit>
        <trans-unit id="fed398803d64816e344ed17a150bf0de6ebc2107" translate="yes" xml:space="preserve">
          <source>Each time by declaring &lt;code&gt;Random r = new Random()&lt;/code&gt; once.</source>
          <target state="translated">Cada vez declarando &lt;code&gt;Random r = new Random()&lt;/code&gt; una vez.</target>
        </trans-unit>
        <trans-unit id="b1b66a5e2cc17580541e17ae5055c33718d48b2e" translate="yes" xml:space="preserve">
          <source>Edit (see comments): why do we need a &lt;code&gt;lock&lt;/code&gt; here?</source>
          <target state="translated">Editar (ver comentarios): &amp;iquest;por qu&amp;eacute; necesitamos un &lt;code&gt;lock&lt;/code&gt; aqu&amp;iacute;?</target>
        </trans-unit>
        <trans-unit id="8d388ca2f605af32f365a40e0692f43c61df4b09" translate="yes" xml:space="preserve">
          <source>Either can be fine; but mutexing a &lt;strong&gt;single&lt;/strong&gt; instance from multiple callers at the same time is just asking for trouble.</source>
          <target state="translated">Cualquiera puede estar bien; pero eliminar una &lt;strong&gt;sola&lt;/strong&gt; instancia de varias personas que llaman al mismo tiempo solo es un problema.</target>
        </trans-unit>
        <trans-unit id="c6bd12a6b28fab995ae459e75aa4c00e6c6da89a" translate="yes" xml:space="preserve">
          <source>Every time you do &lt;code&gt;new Random()&lt;/code&gt; it is initialized using the clock. This means that in a tight loop you get the same value lots of times. You should keep a single &lt;code&gt;Random&lt;/code&gt; instance and keep using &lt;code&gt;Next&lt;/code&gt; on the &lt;strong&gt;same&lt;/strong&gt; instance.</source>
          <target state="translated">Cada vez que haces un &lt;code&gt;new Random()&lt;/code&gt; se inicializa usando el reloj. Esto significa que en un ciclo cerrado obtienes el mismo valor muchas veces. Debe mantener una &amp;uacute;nica instancia &lt;code&gt;Random&lt;/code&gt; y seguir usando &lt;code&gt;Next&lt;/code&gt; en la &lt;strong&gt;misma&lt;/strong&gt; instancia.</target>
        </trans-unit>
        <trans-unit id="c9b145920c802ff4d92706e6ab4fad1e6d818ab7" translate="yes" xml:space="preserve">
          <source>Every time you execute</source>
          <target state="translated">Cada vez que ejecutas</target>
        </trans-unit>
        <trans-unit id="ebca7d9a98ec5a331125ea641e474de0b50a48b1" translate="yes" xml:space="preserve">
          <source>For ease of re-use throughout your application a static class may help.</source>
          <target state="translated">Para facilitar la reutilización en toda la aplicación,una clase estática puede ayudar.</target>
        </trans-unit>
        <trans-unit id="82f14ed230b6fc4f0264b0217480af66d1254eeb" translate="yes" xml:space="preserve">
          <source>How I call it:</source>
          <target state="translated">Como yo lo llamo:</target>
        </trans-unit>
        <trans-unit id="ace1f27e6cdd380c9d9833987d0b8f04654e97c6" translate="yes" xml:space="preserve">
          <source>I have the following function:</source>
          <target state="translated">Tengo la siguiente función:</target>
        </trans-unit>
        <trans-unit id="c924c3e27261c2bccd38a423ace280f75d0519d6" translate="yes" xml:space="preserve">
          <source>I would rather use the following class to generate random numbers:</source>
          <target state="translated">Preferiría usar la siguiente clase para generar números aleatorios:</target>
        </trans-unit>
        <trans-unit id="62c15f68a0c263e558fb112afe1f1465b117baf1" translate="yes" xml:space="preserve">
          <source>If I step that loop with the debugger during runtime I get different values (which is what I want).
However, if I put a breakpoint two lines below that code, all members of the &lt;code&gt;mac&lt;/code&gt; array have equal value.</source>
          <target state="translated">Si paso ese bucle con el depurador durante el tiempo de ejecuci&amp;oacute;n obtengo valores diferentes (que es lo que quiero). Sin embargo, si pongo un punto de interrupci&amp;oacute;n dos l&amp;iacute;neas debajo de ese c&amp;oacute;digo, todos los miembros de la matriz de &lt;code&gt;mac&lt;/code&gt; tienen el mismo valor.</target>
        </trans-unit>
        <trans-unit id="f0388fc1051c0220fd283c15a9df548dd7e38c79" translate="yes" xml:space="preserve">
          <source>If you need safe random numbers you must use the class</source>
          <target state="translated">Si necesitas números aleatorios seguros debes usar la clase</target>
        </trans-unit>
        <trans-unit id="41fb10bf832524090b9ab05176d0ed5567a508f5" translate="yes" xml:space="preserve">
          <source>If you use</source>
          <target state="translated">Si usas</target>
        </trans-unit>
        <trans-unit id="d32559c7e6154e0ea310550867a04a3c350d6535" translate="yes" xml:space="preserve">
          <source>It does not matter if you execute it millions of times, you will always use the same seed.</source>
          <target state="translated">No importa si lo ejecutas millones de veces,siempre usarás la misma semilla.</target>
        </trans-unit>
        <trans-unit id="65c9dead558ae9c58caeaac160b46c342e8ac841" translate="yes" xml:space="preserve">
          <source>Just reiterating &lt;strong&gt;the right solution&lt;/strong&gt;:</source>
          <target state="translated">Solo reiterando &lt;strong&gt;la soluci&amp;oacute;n correcta&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="9ef9ab9dbab2e8ec85ab5ade3a63fcb6d8313b05" translate="yes" xml:space="preserve">
          <source>Mark's solution can be quite expensive since it needs to synchronize everytime.</source>
          <target state="translated">La solución de Mark puede ser bastante cara ya que necesita sincronizarse cada vez.</target>
        </trans-unit>
        <trans-unit id="19e93b55d9a8b7476b26c3dcc1e1fc2a216210ee" translate="yes" xml:space="preserve">
          <source>Measure the two implementations and you should see a significant difference.</source>
          <target state="translated">Mide las dos implementaciones y deberías ver una diferencia significativa.</target>
        </trans-unit>
        <trans-unit id="7c51e0b1fa97b6bb02af2037046a4eb6cfbd13a1" translate="yes" xml:space="preserve">
          <source>My answer from &lt;a href=&quot;https://stackoverflow.com/a/15729385/661933&quot;&gt;here&lt;/a&gt;:</source>
          <target state="translated">Mi respuesta desde &lt;a href=&quot;https://stackoverflow.com/a/15729385/661933&quot;&gt;aqu&amp;iacute;&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="d50300ff8266f5d8a7099c3db551ce788b886323" translate="yes" xml:space="preserve">
          <source>Not only it's slower (inside a loop), its randomness is... well not really good according to me..</source>
          <target state="translated">No sólo es más lento (dentro de un bucle),su aleatoriedad es...bueno no es realmente bueno según yo..</target>
        </trans-unit>
        <trans-unit id="f6b0fc0ce02a5e4d965d5c07c3861d1f368cc58a" translate="yes" xml:space="preserve">
          <source>Random number generator only generating one random number</source>
          <target state="translated">El generador de números aleatorios sólo genera un número aleatorio</target>
        </trans-unit>
        <trans-unit id="1abccb7b9a9594277dd9dea4b2764336885cbde6" translate="yes" xml:space="preserve">
          <source>So you can call:</source>
          <target state="translated">Así que puedes llamar:</target>
        </trans-unit>
        <trans-unit id="c1f116a542144543cfd4c1ad2f1419276c6ad1a4" translate="yes" xml:space="preserve">
          <source>Synchronize so that we don't access it at the same time from different threads</source>
          <target state="translated">Sincronizar para que no accedamos a ella al mismo tiempo desde diferentes hilos</target>
        </trans-unit>
        <trans-unit id="14d4808d6267a01d9bb38132900a90ca7a75c642" translate="yes" xml:space="preserve">
          <source>System.Security.Cryptography.RNGCryptoServiceProvider</source>
          <target state="translated">System.Security.Cryptography.RNGCryptoServiceProvider</target>
        </trans-unit>
        <trans-unit id="52c8db0f9121292ccb0a64a7a7d58d6903465bee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lock&lt;/code&gt; achieves the first (and simpler) of these approaches; however, another approach might be:</source>
          <target state="translated">La &lt;code&gt;lock&lt;/code&gt; logra el primero (y m&amp;aacute;s simple) de estos enfoques; Sin embargo, otro enfoque podr&amp;iacute;a ser:</target>
        </trans-unit>
        <trans-unit id="95d59715ee962deed722b5e2be5a7098005bd63c" translate="yes" xml:space="preserve">
          <source>The unnecessary object creation is going to make it slower especially under a loop.</source>
          <target state="translated">La creación innecesaria de objetos va a hacer que sea más lenta,especialmente bajo un bucle.</target>
        </trans-unit>
        <trans-unit id="fe1a0536d60dc84767d2fa47e48fbf67d3f9007f" translate="yes" xml:space="preserve">
          <source>There are a lot of solutions, here one: if you want only number erase the letters and the method receives a random and the result length.</source>
          <target state="translated">Hay muchas soluciones,aquí una:si quieres sólo un número borra las letras y el método recibe una aleatoria y la longitud del resultado.</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="28aa344daf73822a6d7905baf5322ae3974f6e54" translate="yes" xml:space="preserve">
          <source>Use different &lt;code&gt;Random&lt;/code&gt; instances per thread</source>
          <target state="translated">Use diferentes instancias &lt;code&gt;Random&lt;/code&gt; por hilo</target>
        </trans-unit>
        <trans-unit id="65635588fd87538680a9895c3c69adfa27733f06" translate="yes" xml:space="preserve">
          <source>We can get around the need for synchronization by using the thread-specific storage pattern:</source>
          <target state="translated">Podemos evitar la necesidad de sincronización usando el patrón de almacenamiento específico del hilo:</target>
        </trans-unit>
        <trans-unit id="e1975024bdca5200036c0551672ee84de0ab2fa4" translate="yes" xml:space="preserve">
          <source>Why does that happen?</source>
          <target state="translated">¿Por qué sucede eso?</target>
        </trans-unit>
        <trans-unit id="6fca0b3aa6c3546fbf1c0d3bac45eb9be08fa6d6" translate="yes" xml:space="preserve">
          <source>You can use then use static random instance with code such as</source>
          <target state="translated">Se puede utilizar entonces una instancia aleatoria estática con un código como</target>
        </trans-unit>
        <trans-unit id="dffb6c35930116ef407c2c8344bb41caaf589d18" translate="yes" xml:space="preserve">
          <source>You get different random number sequence, if a hacker guesses the seed and your algorithm is related to the security of your system - your algorithm is broken. I you execute mult. In this constructor the seed is specified by the system clock and if several instances are created in a very short period of time (milliseconds) it is possible that they may have the same seed.</source>
          <target state="translated">Obtienes una secuencia numérica aleatoria diferente,si un hacker adivina la semilla y tu algoritmo está relacionado con la seguridad de tu sistema-tu algoritmo se rompe.Si ejecutas mult.En este constructor la semilla es especificada por el reloj del sistema y si se crean varias instancias en un período de tiempo muy corto (milisegundos)es posible que tengan la misma semilla.</target>
        </trans-unit>
        <trans-unit id="33bba3d019e29cf97612c5dd97ca157cbe5b5be9" translate="yes" xml:space="preserve">
          <source>all throughout.</source>
          <target state="translated">a lo largo de todo.</target>
        </trans-unit>
        <trans-unit id="d11e620e252ce2d1a794942e391977743f703ad0" translate="yes" xml:space="preserve">
          <source>if you want to get different random number each time from your list then use</source>
          <target state="translated">si quieres obtener un número aleatorio diferente cada vez de tu lista,entonces usa</target>
        </trans-unit>
        <trans-unit id="4081ba82df8b4cdc1ee838fbb899c4972dc2b05f" translate="yes" xml:space="preserve">
          <source>just declare the Random class variable like this:</source>
          <target state="translated">sólo declare la variable de clase aleatoria de esta manera:</target>
        </trans-unit>
        <trans-unit id="33347abd47c2c65cccbef23156a5acdbb9a9883f" translate="yes" xml:space="preserve">
          <source>this is then per-thread, so you don't need to synchronize.</source>
          <target state="translated">esto es entonces por hilo,así que no necesitas sincronizar.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
