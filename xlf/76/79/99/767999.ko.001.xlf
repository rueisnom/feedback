<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/767999">
    <body>
      <group id="767999">
        <trans-unit id="4a854acb264c640bad8b85ad2804f32ea02e1ded" translate="yes" xml:space="preserve">
          <source>1) As Marc Gravell said, try to use ONE random-generator. It's always cool to add this to the constructor: System.Environment.TickCount.</source>
          <target state="translated">1) Marc Gravell이 말했듯이 ONE random-generator를 사용해보십시오. 생성자에 System.Environment.TickCount를 추가하는 것이 항상 좋습니다.</target>
        </trans-unit>
        <trans-unit id="5f865b448736b0cfbbf3130df374f213ebc7de02" translate="yes" xml:space="preserve">
          <source>2) One tip. Let's say you want to create 100 objects and suppose each of them should have its-own random-generator (handy if you calculate LOADS of random numbers in a very short period of time). If you would do this in a loop (generation of 100 objects), you could do this like that (to assure fully-randomness):</source>
          <target state="translated">2) 하나의 팁. 100 개의 객체를 만들고 각 객체에 자체 랜덤 생성기가 있어야한다고 가정합니다 (매우 짧은 기간에 임의의 숫자의 LOADS를 계산하는 경우 유용합니다). 루프 (100 개의 객체 생성)에서이 작업을 수행하면 다음과 같이 수행 할 수 있습니다 (완전한 임의성을 보장하기 위해).</target>
        </trans-unit>
        <trans-unit id="f288b7308c1b6ccf17b7ba15a6dbe5654dc26537" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;It's going to be a wee bit slower, but can be much more random&lt;/em&gt; than &lt;code&gt;Random.Next&lt;/code&gt;, at least from my experience.</source>
          <target state="translated">적어도 &lt;em&gt;조금 느리지 만&lt;/em&gt; , 적어도 내 경험으로는 &lt;code&gt;Random.Next&lt;/code&gt; 보다 &lt;em&gt;훨씬 더 무작위 일 수 있습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="9cd2fb0e26bd324270042f00a02a39f5d6a0fad0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If you strictly need a true stateless static method&lt;/strong&gt; to generate random numbers, you can rely on a &lt;code&gt;Guid&lt;/code&gt;.</source>
          <target state="translated">난수를 생성 &lt;strong&gt;하기&lt;/strong&gt; 위해 &lt;strong&gt;진정한 stateless 정적 메소드가 꼭 필요한 경우&lt;/strong&gt; &lt;code&gt;Guid&lt;/code&gt; 에 의존 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8678c60f067b0302a61703d8729ac91bea3b16d0" translate="yes" xml:space="preserve">
          <source>And &lt;strong&gt;never&lt;/strong&gt;:</source>
          <target state="translated">그리고 &lt;strong&gt;결코&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="397dbbdfa117a47c87fd889b4b1236c0001cba41" translate="yes" xml:space="preserve">
          <source>Basically, &lt;code&gt;Next&lt;/code&gt; is going to change the internal state of the &lt;code&gt;Random&lt;/code&gt; instance. If we do that at the same time from multiple threads, you &lt;em&gt;could&lt;/em&gt; argue &quot;we've just made the outcome even more random&quot;, but what we are &lt;em&gt;actually&lt;/em&gt; doing is potentially breaking the internal implementation, and we could also start getting the same numbers from different threads, which &lt;em&gt;might&lt;/em&gt; be a problem - and might not. The guarantee of what happens internally is the bigger issue, though; since &lt;code&gt;Random&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; make any guarantees of thread-safety. Thus there are two valid approaches:</source>
          <target state="translated">기본적으로 &lt;code&gt;Next&lt;/code&gt; 는 &lt;code&gt;Random&lt;/code&gt; 인스턴스의 내부 상태를 변경합니다. 여러 스레드에서 동시에 그렇게하면 &quot;결과를 더욱 무작위로 만들었습니다&quot;라고 주장 할 &lt;em&gt;수&lt;/em&gt; 는 있지만 &lt;em&gt;실제로&lt;/em&gt; 수행중인 작업은 잠재적으로 내부 구현을 중단하고 동일한 숫자를 얻을 수 있습니다. 다른 스레드에서 문제 &lt;em&gt;가&lt;/em&gt; 될 &lt;em&gt;수도&lt;/em&gt; 있고 &lt;em&gt;아닐 수도&lt;/em&gt; 있습니다. 내부적으로 일어나는 일에 대한 보장은 더 큰 문제입니다. &lt;code&gt;Random&lt;/code&gt; 은 스레드 안전성을 보장하지 &lt;strong&gt;않기&lt;/strong&gt; 때문입니다. 따라서 두 가지 유효한 접근 방식이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ca257d36379ffcd8184cb7cb326bb1e48fb915e" translate="yes" xml:space="preserve">
          <source>But &lt;strong&gt;not&lt;/strong&gt;:</source>
          <target state="translated">그러나 &lt;strong&gt;아닙니다&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="f8eb3248811492e79afeba88e2112b19fd5e3085" translate="yes" xml:space="preserve">
          <source>Cheers.</source>
          <target state="translated">Cheers.</target>
        </trans-unit>
        <trans-unit id="fed398803d64816e344ed17a150bf0de6ebc2107" translate="yes" xml:space="preserve">
          <source>Each time by declaring &lt;code&gt;Random r = new Random()&lt;/code&gt; once.</source>
          <target state="translated">&lt;code&gt;Random r = new Random()&lt;/code&gt; 한 번 선언하여 매번.</target>
        </trans-unit>
        <trans-unit id="b1b66a5e2cc17580541e17ae5055c33718d48b2e" translate="yes" xml:space="preserve">
          <source>Edit (see comments): why do we need a &lt;code&gt;lock&lt;/code&gt; here?</source>
          <target state="translated">편집 (댓글 참조) : 왜 여기에 &lt;code&gt;lock&lt;/code&gt; 가 필요한가요?</target>
        </trans-unit>
        <trans-unit id="8d388ca2f605af32f365a40e0692f43c61df4b09" translate="yes" xml:space="preserve">
          <source>Either can be fine; but mutexing a &lt;strong&gt;single&lt;/strong&gt; instance from multiple callers at the same time is just asking for trouble.</source>
          <target state="translated">어느 쪽이든 괜찮을 수 있습니다. 그러나 동시에 여러 호출자의 &lt;strong&gt;단일&lt;/strong&gt; 인스턴스를 뮤텍스 화하는 것은 문제를 요구합니다.</target>
        </trans-unit>
        <trans-unit id="c6bd12a6b28fab995ae459e75aa4c00e6c6da89a" translate="yes" xml:space="preserve">
          <source>Every time you do &lt;code&gt;new Random()&lt;/code&gt; it is initialized using the clock. This means that in a tight loop you get the same value lots of times. You should keep a single &lt;code&gt;Random&lt;/code&gt; instance and keep using &lt;code&gt;Next&lt;/code&gt; on the &lt;strong&gt;same&lt;/strong&gt; instance.</source>
          <target state="translated">&lt;code&gt;new Random()&lt;/code&gt; 을 할 때마다 시계를 사용하여 초기화됩니다. 이것은 타이트한 루프에서 같은 값을 여러 번 얻는다는 것을 의미합니다. 단일 &lt;code&gt;Random&lt;/code&gt; 인스턴스를 유지하고 &lt;strong&gt;동일한&lt;/strong&gt; 인스턴스에서 &lt;code&gt;Next&lt;/code&gt; 을 계속 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="c9b145920c802ff4d92706e6ab4fad1e6d818ab7" translate="yes" xml:space="preserve">
          <source>Every time you execute</source>
          <target state="translated">실행할 때마다</target>
        </trans-unit>
        <trans-unit id="ebca7d9a98ec5a331125ea641e474de0b50a48b1" translate="yes" xml:space="preserve">
          <source>For ease of re-use throughout your application a static class may help.</source>
          <target state="translated">응용 프로그램 전체에서 쉽게 재사용 할 수 있도록 정적 클래스가 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="82f14ed230b6fc4f0264b0217480af66d1254eeb" translate="yes" xml:space="preserve">
          <source>How I call it:</source>
          <target state="translated">내가 그것을 부르는 방법 :</target>
        </trans-unit>
        <trans-unit id="ace1f27e6cdd380c9d9833987d0b8f04654e97c6" translate="yes" xml:space="preserve">
          <source>I have the following function:</source>
          <target state="translated">다음과 같은 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="c924c3e27261c2bccd38a423ace280f75d0519d6" translate="yes" xml:space="preserve">
          <source>I would rather use the following class to generate random numbers:</source>
          <target state="translated">차라리 다음 클래스를 사용하여 난수를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="62c15f68a0c263e558fb112afe1f1465b117baf1" translate="yes" xml:space="preserve">
          <source>If I step that loop with the debugger during runtime I get different values (which is what I want).
However, if I put a breakpoint two lines below that code, all members of the &lt;code&gt;mac&lt;/code&gt; array have equal value.</source>
          <target state="translated">런타임 동안 디버거와 함께 루프를 수행하면 다른 값을 얻습니다 (원하는 값). 그러나 중단 점을 해당 코드 아래에 두 줄 놓으면 &lt;code&gt;mac&lt;/code&gt; 배열의 모든 멤버는 동일한 값을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="f0388fc1051c0220fd283c15a9df548dd7e38c79" translate="yes" xml:space="preserve">
          <source>If you need safe random numbers you must use the class</source>
          <target state="translated">안전한 임의의 숫자가 필요한 경우 클래스를 사용해야합니다</target>
        </trans-unit>
        <trans-unit id="41fb10bf832524090b9ab05176d0ed5567a508f5" translate="yes" xml:space="preserve">
          <source>If you use</source>
          <target state="translated">당신이 사용하는 경우</target>
        </trans-unit>
        <trans-unit id="d32559c7e6154e0ea310550867a04a3c350d6535" translate="yes" xml:space="preserve">
          <source>It does not matter if you execute it millions of times, you will always use the same seed.</source>
          <target state="translated">수백만 번 실행해도 중요하지 않으며 항상 동일한 시드를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="65c9dead558ae9c58caeaac160b46c342e8ac841" translate="yes" xml:space="preserve">
          <source>Just reiterating &lt;strong&gt;the right solution&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;올바른 솔루션을&lt;/strong&gt; 반복 &lt;strong&gt;하십시오&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="9ef9ab9dbab2e8ec85ab5ade3a63fcb6d8313b05" translate="yes" xml:space="preserve">
          <source>Mark's solution can be quite expensive since it needs to synchronize everytime.</source>
          <target state="translated">Mark의 솔루션은 매번 동기화해야하기 때문에 상당히 비쌀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="19e93b55d9a8b7476b26c3dcc1e1fc2a216210ee" translate="yes" xml:space="preserve">
          <source>Measure the two implementations and you should see a significant difference.</source>
          <target state="translated">두 가지 구현을 측정하면 큰 차이가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="7c51e0b1fa97b6bb02af2037046a4eb6cfbd13a1" translate="yes" xml:space="preserve">
          <source>My answer from &lt;a href=&quot;https://stackoverflow.com/a/15729385/661933&quot;&gt;here&lt;/a&gt;:</source>
          <target state="translated">내 대답은 &lt;a href=&quot;https://stackoverflow.com/a/15729385/661933&quot;&gt;여기에서&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="d50300ff8266f5d8a7099c3db551ce788b886323" translate="yes" xml:space="preserve">
          <source>Not only it's slower (inside a loop), its randomness is... well not really good according to me..</source>
          <target state="translated">속도가 느릴뿐만 아니라 (루프 내에서) 무작위성은 ... 나에게 따르면 좋지 않습니다 ..</target>
        </trans-unit>
        <trans-unit id="f6b0fc0ce02a5e4d965d5c07c3861d1f368cc58a" translate="yes" xml:space="preserve">
          <source>Random number generator only generating one random number</source>
          <target state="translated">난수 생성기는 하나의 난수 만 생성</target>
        </trans-unit>
        <trans-unit id="1abccb7b9a9594277dd9dea4b2764336885cbde6" translate="yes" xml:space="preserve">
          <source>So you can call:</source>
          <target state="translated">그래서 당신은 전화 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="c1f116a542144543cfd4c1ad2f1419276c6ad1a4" translate="yes" xml:space="preserve">
          <source>Synchronize so that we don't access it at the same time from different threads</source>
          <target state="translated">다른 스레드에서 동시에 액세스하지 못하도록 동기화</target>
        </trans-unit>
        <trans-unit id="14d4808d6267a01d9bb38132900a90ca7a75c642" translate="yes" xml:space="preserve">
          <source>System.Security.Cryptography.RNGCryptoServiceProvider</source>
          <target state="translated">System.Security.Cryptography.RNGCryptoServiceProvider</target>
        </trans-unit>
        <trans-unit id="52c8db0f9121292ccb0a64a7a7d58d6903465bee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lock&lt;/code&gt; achieves the first (and simpler) of these approaches; however, another approach might be:</source>
          <target state="translated">&lt;code&gt;lock&lt;/code&gt; 는 이러한 접근 방식 중 첫 번째 (그리고 더 간단한) 기능을 수행합니다. 그러나 다른 접근 방식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="95d59715ee962deed722b5e2be5a7098005bd63c" translate="yes" xml:space="preserve">
          <source>The unnecessary object creation is going to make it slower especially under a loop.</source>
          <target state="translated">불필요한 객체 생성은 특히 루프에서 느리게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="fe1a0536d60dc84767d2fa47e48fbf67d3f9007f" translate="yes" xml:space="preserve">
          <source>There are a lot of solutions, here one: if you want only number erase the letters and the method receives a random and the result length.</source>
          <target state="translated">많은 해결책이 있습니다. 여기서 하나 : 숫자 만 지우고 싶을 때 메소드는 무작위와 결과 길이를받습니다.</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="28aa344daf73822a6d7905baf5322ae3974f6e54" translate="yes" xml:space="preserve">
          <source>Use different &lt;code&gt;Random&lt;/code&gt; instances per thread</source>
          <target state="translated">스레드 당 다른 &lt;code&gt;Random&lt;/code&gt; 인스턴스 사용</target>
        </trans-unit>
        <trans-unit id="65635588fd87538680a9895c3c69adfa27733f06" translate="yes" xml:space="preserve">
          <source>We can get around the need for synchronization by using the thread-specific storage pattern:</source>
          <target state="translated">스레드 별 스토리지 패턴을 사용하여 동기화 필요성을 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e1975024bdca5200036c0551672ee84de0ab2fa4" translate="yes" xml:space="preserve">
          <source>Why does that happen?</source>
          <target state="translated">왜 그런 일이 발생합니까?</target>
        </trans-unit>
        <trans-unit id="6fca0b3aa6c3546fbf1c0d3bac45eb9be08fa6d6" translate="yes" xml:space="preserve">
          <source>You can use then use static random instance with code such as</source>
          <target state="translated">그런 다음 정적 랜덤 인스턴스를 다음과 같은 코드와 함께 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="dffb6c35930116ef407c2c8344bb41caaf589d18" translate="yes" xml:space="preserve">
          <source>You get different random number sequence, if a hacker guesses the seed and your algorithm is related to the security of your system - your algorithm is broken. I you execute mult. In this constructor the seed is specified by the system clock and if several instances are created in a very short period of time (milliseconds) it is possible that they may have the same seed.</source>
          <target state="translated">해커가 시드를 추측하고 알고리즘이 시스템의 보안과 관련되어 있으면 알고리즘이 손상되면 다른 임의의 숫자 시퀀스를 얻습니다. 당신은 복수를 실행합니다. 이 생성자에서 시드는 시스템 시계에 의해 지정되며 매우 짧은 시간 (밀리 초) 내에 여러 인스턴스가 생성되면 동일한 시드를 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="33bba3d019e29cf97612c5dd97ca157cbe5b5be9" translate="yes" xml:space="preserve">
          <source>all throughout.</source>
          <target state="translated">전체적으로.</target>
        </trans-unit>
        <trans-unit id="d11e620e252ce2d1a794942e391977743f703ad0" translate="yes" xml:space="preserve">
          <source>if you want to get different random number each time from your list then use</source>
          <target state="translated">목록에서 매번 다른 난수를 얻으려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="4081ba82df8b4cdc1ee838fbb899c4972dc2b05f" translate="yes" xml:space="preserve">
          <source>just declare the Random class variable like this:</source>
          <target state="translated">다음과 같이 Random 클래스 변수를 선언하십시오.</target>
        </trans-unit>
        <trans-unit id="33347abd47c2c65cccbef23156a5acdbb9a9883f" translate="yes" xml:space="preserve">
          <source>this is then per-thread, so you don't need to synchronize.</source>
          <target state="translated">그러면 스레드 별이므로 동기화 할 필요가 없습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
