<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/208105">
    <body>
      <group id="208105">
        <trans-unit id="d0c785d16c2347fee547f3127b424f77909312a7" translate="yes" xml:space="preserve">
          <source>(Destructuring + Spread operator)</source>
          <target state="translated">(–î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è+–æ–ø–µ—Ä–∞—Ç–æ—Ä Spread)</target>
        </trans-unit>
        <trans-unit id="63d63c34165213cae85c0283076b58a13c886dbf" translate="yes" xml:space="preserve">
          <source>(ES6)</source>
          <target state="translated">(ES6)</target>
        </trans-unit>
        <trans-unit id="7d50cf7543cd430338fe6fd7172b5d7ec7565f89" translate="yes" xml:space="preserve">
          <source>* &lt;em&gt;&lt;code&gt;foo&lt;/code&gt; will be a new variable with the value of &lt;code&gt;a&lt;/code&gt; (which is 1).&lt;/em&gt;</source>
          <target state="translated">* &lt;em&gt; &lt;code&gt;foo&lt;/code&gt; –±—É–¥–µ—Ç –Ω–æ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º &lt;code&gt;a&lt;/code&gt; (–∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–≤–Ω–æ 1).&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b8aa44c32c47930ef0f4bc07bf1b584a5b6b0e2f" translate="yes" xml:space="preserve">
          <source>...It's stupid, I know.</source>
          <target state="translated">...—ç—Ç–æ –≥–ª—É–ø–æ,—è –∑–Ω–∞—é.</target>
        </trans-unit>
        <trans-unit id="ff34d7bfb44f74504dbcecb1c791e02877f620e3" translate="yes" xml:space="preserve">
          <source>1.With explicit prop key:</source>
          <target state="translated">1.–° —è–≤–Ω—ã–º –∫–ª—é—á–æ–º –∫ –æ–ø–æ—Ä–µ:</target>
        </trans-unit>
        <trans-unit id="145f4a070da96e31a48d8d444babf929a09a782a" translate="yes" xml:space="preserve">
          <source>2.With variable prop key:</source>
          <target state="translated">2.–° –∫–ª–∞–≤–∏—à–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç–æ–π–∫–∏:</target>
        </trans-unit>
        <trans-unit id="75c350f4599bd395c8e57950299bcd4efdaca57e" translate="yes" xml:space="preserve">
          <source>3.Cool arrow function üòé:</source>
          <target state="translated">3.Cool arrow —Ñ—É–Ω–∫—Ü–∏—è üòé:</target>
        </trans-unit>
        <trans-unit id="b31d7d6cbd9fc3e49f4feaeef410e7cee592b5fa" translate="yes" xml:space="preserve">
          <source>4. For multiple properties</source>
          <target state="translated">4.–î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤</target>
        </trans-unit>
        <trans-unit id="cecf2bde461c486918fed98467ea58414d0dd173" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze&quot;&gt;Object.freeze()&lt;/a&gt; makes all properties of object not configurable (besides other things). &lt;code&gt;deleteProperty&lt;/code&gt; function (as well as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete&quot;&gt;delete operator&lt;/a&gt;) returns &lt;code&gt;false&lt;/code&gt; when tries to delete any of it's properties. If property is configurable it returns &lt;code&gt;true&lt;/code&gt;, even if property does not exist.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze&quot;&gt;Object.freeze ()&lt;/a&gt; –¥–µ–ª–∞–µ—Ç –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–º–∏ (–∫—Ä–æ–º–µ –ø—Ä–æ—á–µ–≥–æ). –§—É–Ω–∫—Ü–∏—è &lt;code&gt;deleteProperty&lt;/code&gt; (–∞ —Ç–∞–∫–∂–µ &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete&quot;&gt;–æ–ø–µ—Ä–∞—Ç–æ—Ä delete&lt;/a&gt; ) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç &lt;code&gt;false&lt;/code&gt; , –∫–æ–≥–¥–∞ –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –ª—é–±–æ–µ –∏–∑ —Å–≤–æ–∏—Ö —Å–≤–æ–π—Å—Ç–≤. –ï—Å–ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º, –æ–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç &lt;code&gt;true&lt;/code&gt; , –¥–∞–∂–µ –µ—Å–ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</target>
        </trans-unit>
        <trans-unit id="d2f5341f96365af83c99b7c7d47dba6c4b1a96cb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;Spread Syntax&lt;/a&gt; (ES6)</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;–°–∏–Ω—Ç–∞–∫—Å–∏—Å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è&lt;/a&gt; (ES6)</target>
        </trans-unit>
        <trans-unit id="e4d9e924d09e0b750a05547c2f0bf5fa2c195878" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.slice()&lt;/code&gt; is non-destructive and returns a new array containing the indicated indices from &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt;. If &lt;code&gt;end&lt;/code&gt; is left unspecified, the behavior is the same as &lt;code&gt;.splice()&lt;/code&gt; (&lt;code&gt;end = array.length&lt;/code&gt;). The behavior is a bit tricky since, for some reason, &lt;code&gt;end&lt;/code&gt; indexes from 1 instead of 0. I don't know why it does this, but that's how it is. Also, if &lt;code&gt;end &amp;lt;= start&lt;/code&gt;, the result is an empty array.</source>
          <target state="translated">&lt;code&gt;.slice()&lt;/code&gt; —è–≤–ª—è–µ—Ç—Å—è –Ω–µ—Ä–∞–∑—Ä—É—à–∞—é—â–∏–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –æ—Ç &lt;code&gt;start&lt;/code&gt; –¥–æ &lt;code&gt;end&lt;/code&gt; . –ï—Å–ª–∏ &lt;code&gt;end&lt;/code&gt; –Ω–µ &lt;code&gt;.splice()&lt;/code&gt; , –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ .splice () ( &lt;code&gt;end = array.length&lt;/code&gt; ). –ü–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–µ–º–Ω–æ–≥–æ —Å–ª–æ–∂–Ω–µ–µ, —Ç–∞–∫ –∫–∞–∫ –ø–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏—á–∏–Ω–∞–º &lt;code&gt;end&lt;/code&gt; –∏–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1 –≤–º–µ—Å—Ç–æ 0. –Ø –Ω–µ –∑–Ω–∞—é, –ø–æ—á–µ–º—É —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –Ω–æ —Ç–∞–∫ –æ–Ω–æ –∏ –µ—Å—Ç—å. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –µ—Å–ª–∏ &lt;code&gt;end &amp;lt;= start&lt;/code&gt; , —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.</target>
        </trans-unit>
        <trans-unit id="da2a0c1e98a822064cc6b913222774a91ac62044" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.splice()&lt;/code&gt; mutates the array, and returns the removed indices. The array is sliced starting from the index, &lt;code&gt;start&lt;/code&gt;, and &lt;code&gt;n&lt;/code&gt; elements are sliced out. If n is unspecified, the entire array after &lt;code&gt;start&lt;/code&gt; is sliced out (&lt;code&gt;n = array.length - start&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;.splice()&lt;/code&gt; –º—É—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã. –ú–∞—Å—Å–∏–≤ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —á–∞—Å—Ç–∏, –Ω–∞—á–∏–Ω–∞—è —Å –∏–Ω–¥–µ–∫—Å–∞, &lt;code&gt;start&lt;/code&gt; –∏ &lt;code&gt;n&lt;/code&gt; —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ï—Å–ª–∏ n –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –≤–µ—Å—å –º–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ &lt;code&gt;start&lt;/code&gt; &lt;code&gt;n = array.length - start&lt;/code&gt; ( n = array.length - start ).</target>
        </trans-unit>
        <trans-unit id="578e0d997316ced94b2f7c292e4269507a0730b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Delete Operator&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;–û–ø–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω–∏—è&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="10a7b7e3a95023fb9f5d4f97bbeb1e856756bc60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;EXTENDED ANSWER&lt;/em&gt;&lt;/strong&gt; üòá</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;–†–ê–°–®–ò–†–ï–ù–ù–´–ô –û–¢–í–ï–¢&lt;/em&gt;&lt;/strong&gt; üòá</target>
        </trans-unit>
        <trans-unit id="3393b3743a22fd0193ab2fa39735ae2f646b06ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Or&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Or&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="710a4e957cc23ae95eb9aa6e13030731ab1c9d56" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Reassignment&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Reassignment&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e590196d99e29b0fb26cc981e8c241732f76e4ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Spread Operator&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;–û–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="64d050dff57dceee4d758cc0912b8d402b405b10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5fbf4a00d6a882121a802d2725d98940aaaeb108" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Edit:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b02479449faf2e3a74dc8a9ef6000bfbe7ea1f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In other words, a JavaScript object gets killed as soon as there is no reference left in your code pointed to that object.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;–î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –æ–±—ä–µ–∫—Ç JavaScript —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ –Ω–µ –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ecc8000feff4d7f65f5786df06cc101796ac4edd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To clone object without property:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;–ß—Ç–æ–±—ã –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç –±–µ–∑ —Å–≤–æ–π—Å—Ç–≤–∞:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ca5c58827bf40e3a97a098228081f1f64d66b7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update 2018-07-21:&lt;/strong&gt; For a long time, I have felt embarrassed about this answer, so I think it's time that I touch it up a little bit. Just a little commentary, clarification, and formatting to help expedite the reading of the needlessly long and convoluted parts of this answer.</source>
          <target state="translated">&lt;strong&gt;–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 2018-07-21:&lt;/strong&gt; –í —Ç–µ—á–µ–Ω–∏–µ –¥–æ–ª–≥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —è —á—É–≤—Å—Ç–≤–æ–≤–∞–ª —Å–º—É—â–µ–Ω–∏–µ –ø–æ –ø–æ–≤–æ–¥—É —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø–æ—ç—Ç–æ–º—É —è –¥—É–º–∞—é, —á—Ç–æ –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –Ω–µ–º–Ω–æ–≥–æ –µ–≥–æ –ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å. –ü—Ä–æ—Å—Ç–æ –Ω–µ–±–æ–ª—å—à–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —É—Å–∫–æ—Ä–∏—Ç—å —á—Ç–µ–Ω–∏–µ –∏–∑–ª–∏—à–Ω–µ –¥–ª–∏–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.</target>
        </trans-unit>
        <trans-unit id="c099f37767111dc60103bd8696ed4fcf3e7a64d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update:&lt;/strong&gt;
Thanks to @AgentME:</source>
          <target state="translated">&lt;strong&gt;–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:&lt;/strong&gt; –±–ª–∞–≥–æ–¥–∞—Ä—è @AgentME:</target>
        </trans-unit>
        <trans-unit id="cd7c415e1d4039a5febeafd32c836a75f6b919e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use &lt;code&gt;delete&lt;/code&gt;,&lt;/strong&gt; when you are passing the result object to the code on which you don't have control (or when you are not sure about your team or yourself).</source>
          <target state="translated">&lt;strong&gt;–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ &lt;code&gt;delete&lt;/code&gt; ,&lt;/strong&gt; –∫–æ–≥–¥–∞ –≤—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ –æ–±—ä–µ–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∫–æ–¥, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º —É –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è (–∏–ª–∏ –∫–æ–≥–¥–∞ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –≤ —Å–µ–±–µ).</target>
        </trans-unit>
        <trans-unit id="0af0c0606dbb967654f58c35fa2988459afb9a19" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use setting to &lt;code&gt;undefined&lt;/code&gt;,&lt;/strong&gt; when you care about performance. It can give a serious boost to your code.</source>
          <target state="translated">&lt;strong&gt;–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∞ &lt;code&gt;undefined&lt;/code&gt; ,&lt;/strong&gt; –∫–æ–≥–¥–∞ –≤—ã –∑–∞–±–æ—Ç–∏—Ç–µ—Å—å –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –¥–∞—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–π –∏–º–ø—É–ª—å—Å –≤–∞—à–µ–º—É –∫–æ–¥—É.</target>
        </trans-unit>
        <trans-unit id="9dfe20a67d61ae6b75beddf80cff0434cb3f7a9f" translate="yes" xml:space="preserve">
          <source>A live example to show:</source>
          <target state="translated">–ñ–∏–≤–æ–π –ø—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞:</target>
        </trans-unit>
        <trans-unit id="aabd2b7839024463c3c18626551d6893b70879bd" translate="yes" xml:space="preserve">
          <source>About now, you're at your wit's end. This guy has been complaining non-stop about your app, and you want to tell him to shut up and go get a better computer.</source>
          <target state="translated">–ü—Ä–∏–º–µ—Ä–Ω–æ —Å–µ–π—á–∞—Å,—Ç—ã –≤ –∫–æ–Ω—Ü–µ —Å–≤–æ–µ–≥–æ –æ—Å—Ç—Ä–æ—É–º–∏—è.–≠—Ç–æ—Ç –ø–∞—Ä–µ–Ω—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∂–∞–ª–æ–≤–∞–ª—Å—è –Ω–∞ —Ç–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ,–∏ —Ç—ã —Ö–æ—á–µ—à—å —Å–∫–∞–∑–∞—Ç—å –µ–º—É,—á—Ç–æ–±—ã –æ–Ω –∑–∞—Ç–∫–Ω—É–ª—Å—è –∏ –∫—É–ø–∏–ª –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–ª—É—á—à–µ.</target>
        </trans-unit>
        <trans-unit id="692f82b2a7574a467099a421e634c28a19087f50" translate="yes" xml:space="preserve">
          <source>Alternatively, you could also do this:</source>
          <target state="translated">–ò–ª–∏ —Ç—ã —Ç–æ–∂–µ –º–æ–∂–µ—à—å —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å:</target>
        </trans-unit>
        <trans-unit id="8dd6b6a5cb398077b2e61b33860df5233162a369" translate="yes" xml:space="preserve">
          <source>An object may be seen as a set of key-value pairs. What I call a 'value' is a primitive or a reference to other object, connected to that 'key'.</source>
          <target state="translated">–û–±—ä–µ–∫—Ç –º–æ–∂–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –∫–∞–∫ –Ω–∞–±–æ—Ä –ø–∞—Ä –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ.–¢–æ,—á—Ç–æ —è –Ω–∞–∑—ã–≤–∞—é &quot;–∑–Ω–∞—á–µ–Ω–∏–µ–º&quot;-—ç—Ç–æ –ø—Ä–∏–º–∏—Ç–∏–≤ –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç,—Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —ç—Ç–∏–º &quot;–∫–ª—é—á–æ–º&quot;.</target>
        </trans-unit>
        <trans-unit id="97f362e729192c077ada3f5241fec0dea0e6f9ad" translate="yes" xml:space="preserve">
          <source>And just like that, you've pleased Mr. PDP-11. Hooray! &lt;sub&gt;(I'd still tell him off, though...)&lt;/sub&gt;</source>
          <target state="translated">–ò –∏–º–µ–Ω–Ω–æ —Ç–∞–∫ –≤—ã –ø–æ—Ä–∞–¥–æ–≤–∞–ª–∏ –º–∏—Å—Ç–µ—Ä–∞ PDP-11. –£—Ä–∞! &lt;sub&gt;(–Ø –±—ã –≤—Å–µ –∂–µ –æ—Ç—á–∏—Ç–∞–ª –µ–≥–æ, —Ö–æ—Ç—è ...)&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="38fedc2f5a59cd30ac658c92ac34226c9870e485" translate="yes" xml:space="preserve">
          <source>And we need to delete 'a'.</source>
          <target state="translated">–ò –Ω–∞–º –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å &quot;–∞&quot;.</target>
        </trans-unit>
        <trans-unit id="15728408349a51726fa4d7a495f586b8e25e36f1" translate="yes" xml:space="preserve">
          <source>Another alternative is to use the &lt;a href=&quot;https://underscorejs.org&quot;&gt;Underscore.js&lt;/a&gt; library.</source>
          <target state="translated">–î—Ä—É–≥–æ–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–æ–π —è–≤–ª—è–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ &lt;a href=&quot;https://underscorejs.org&quot;&gt;Underscore.js&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="130c3bce337f7ed92461a0af093bf0dd8b4d970c" translate="yes" xml:space="preserve">
          <source>Another solution, using &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt;&lt;code&gt;Array#reduce&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;.</source>
          <target state="translated">–î—Ä—É–≥–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–µ &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt; &lt;code&gt;Array#reduce&lt;/code&gt; &lt;/a&gt;&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="75aa366398b31b18c07d678c84ff7223a1b76dbe" translate="yes" xml:space="preserve">
          <source>Any property declared with let or const cannot be deleted from the scope  within which they were defined. Non-configurable properties cannot be removed. This includes properties of built-in objects like Math, Array, Object and properties that are created as non-configurable with methods like Object.defineProperty().</source>
          <target state="translated">–õ—é–±–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ,–æ–±—ä—è–≤–ª–µ–Ω–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é lett –∏–ª–∏ const,–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ –∏–∑ –æ–±–ª–∞—Å—Ç–∏,–≤ –∫–æ—Ç–æ—Ä–æ–π –æ–Ω–æ –±—ã–ª–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ.–ù–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã.–°—é–¥–∞ –æ—Ç–Ω–æ—Å—è—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤,—Ç–∞–∫–∏—Ö –∫–∞–∫ Math,Array,Object –∏ —Å–≤–æ–π—Å—Ç–≤–∞,–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–∞–∫ –Ω–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–µ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–æ–≤ —Ç–∏–ø–∞ Object.defineProperty().</target>
        </trans-unit>
        <trans-unit id="b2ecb35283325b0622c879acc81ba757d7accad0" translate="yes" xml:space="preserve">
          <source>Any property declared with var cannot be deleted from the global scope
  or from a function's scope.</source>
          <target state="translated">–õ—é–±–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ,–æ–±—ä—è–≤–ª–µ–Ω–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é var,–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏.</target>
        </trans-unit>
        <trans-unit id="6c333dd9449a548b822691fcab373abce8f8f850" translate="yes" xml:space="preserve">
          <source>Are you looking to achieve this in pure JavaScript or are you willing &amp;amp; able to use a 3rd-party library?</source>
          <target state="translated">–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∏—Ç—å—Å—è —ç—Ç–æ–≥–æ –≤ —á–∏—Å—Ç–æ–º JavaScript –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–æ—Ä–æ–Ω–Ω—é—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É?</target>
        </trans-unit>
        <trans-unit id="1fea0155471c15e540c5b31c3594a45754e6cc6c" translate="yes" xml:space="preserve">
          <source>Array equivalent</source>
          <target state="translated">–ú–∞—Å—Å–∏–≤–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç</target>
        </trans-unit>
        <trans-unit id="10f82eff0fb408011ffeabc374c6234764312dea" translate="yes" xml:space="preserve">
          <source>Array.prototype.slice(start, end)</source>
          <target state="translated">–ú–∞—Å—Å–∏–≤.–ø—Ä–æ—Ç–æ—Ç–∏–ø.–ª–æ–º—Ç–∏–∫(–Ω–∞—á–∞–ª–æ,–∫–æ–Ω–µ—Ü)</target>
        </trans-unit>
        <trans-unit id="dfe829210c0c25d8779de7fe65fb3158cefd4290" translate="yes" xml:space="preserve">
          <source>Array.prototype.splice vs Array.prototype.slice</source>
          <target state="translated">Array.prototype.splice vs Array.prototype.slice</target>
        </trans-unit>
        <trans-unit id="99ba4898ce91c3e3945c33ecd292283940427b38" translate="yes" xml:space="preserve">
          <source>Array.prototype.splice(start, n)</source>
          <target state="translated">Array.prototype.splice(start,n)</target>
        </trans-unit>
        <trans-unit id="bc85e8ead32cd6185d2f6ca2b34c7fbc94aadd58" translate="yes" xml:space="preserve">
          <source>As others have said, you can use &lt;code&gt;delete&lt;/code&gt;.</source>
          <target state="translated">–ö–∞–∫ —É–∂–µ –≥–æ–≤–æ—Ä–∏–ª–∏ –¥—Ä—É–≥–∏–µ, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å &lt;code&gt;delete&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fc6de88f57fe2bcbd39aa2ddf8ca667c26f222a3" translate="yes" xml:space="preserve">
          <source>As seen in the above code snippet, there are some rare appropriate use cases for the &lt;code&gt;delete&lt;/code&gt; operator. However, do not worry about this problem too much. This will only become a problem with long-lifespan objects that get new keys constantly added to them. In any other case (which is almost every case in real-world programming), it is most appropriate to use &lt;code&gt;obj[prop] = undefined&lt;/code&gt;. The main purpose of this section is just to bring this to your attention so that in the rare chance that this does become a problem in your code, then you can more easily understand the problem and thus not have to waste hours dissecting your code to locate and understand this problem.</source>
          <target state="translated">–ö–∞–∫ –≤–∏–¥–Ω–æ –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—ã—à–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –∫–æ–¥–∞, –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–¥–∫–∏—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ &lt;code&gt;delete&lt;/code&gt; . –¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, –Ω–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å –æ–± —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ. –≠—Ç–æ —Å—Ç–∞–Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º–æ–π —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å –¥–ª–∏—Ç–µ–ª—å–Ω—ã–º —Å—Ä–æ–∫–æ–º —Å–ª—É–∂–±—ã, –∫–æ—Ç–æ—Ä—ã–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ –∫–ª—é—á–∏. –í –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —Å–ª—É—á–∞–µ (–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –º–∏—Ä–µ) –Ω–∞–∏–±–æ–ª–µ–µ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å &lt;code&gt;obj[prop] = undefined&lt;/code&gt; . –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ - –ø—Ä–æ—Å—Ç–æ –¥–æ–≤–µ—Å—Ç–∏ —ç—Ç–æ –¥–æ –≤–∞—à–µ–≥–æ —Å–≤–µ–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –≤ —Ä–µ–¥–∫–∏—Ö —Å–ª—É—á–∞—è—Ö, –∫–æ–≥–¥–∞ —ç—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å –ø—Ä–æ–±–ª–µ–º–æ–π –≤ –≤–∞—à–µ–º –∫–æ–¥–µ, –≤—ã –º–æ–≥–ª–∏ –ª–µ–≥—á–µ –ø–æ–Ω—è—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∏, —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å —á–∞—Å—ã –Ω–∞ —Ä–∞–∑–±–æ—Ä –∫–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–Ω—è—Ç—å —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É.</target>
        </trans-unit>
        <trans-unit id="0a1a7281b5e3e0adcbcee6c0378231475ce1d077" translate="yes" xml:space="preserve">
          <source>As such, delete cannot delete any functions in the global scope (whether this is part from a function definition or a function  (expression).</source>
          <target state="translated">–ö–∞–∫ —Ç–∞–∫–æ–≤–æ–µ,delete –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –Ω–∏–∫–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –º–∞—Å—à—Ç–∞–±–µ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ,—è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ (–≤—ã—Ä–∞–∂–µ–Ω–∏—è).</target>
        </trans-unit>
        <trans-unit id="19292906404cfee69ce728ffea847a3cb5d23580" translate="yes" xml:space="preserve">
          <source>As you can see, &lt;code&gt;delete&lt;/code&gt; doesn't always work as one might expect. The value is overwritten, but the memory is not reallocated. That is to say, &lt;code&gt;array[4]&lt;/code&gt; isn't relocated to &lt;code&gt;array[3]&lt;/code&gt;. Which is in contrast to &lt;code&gt;Array.prototype.unshift&lt;/code&gt;, which inserts an element at the beginning of the array and shifts everything up (&lt;code&gt;array[0]&lt;/code&gt; becomes &lt;code&gt;array[1]&lt;/code&gt;, etc.)</source>
          <target state="translated">–ö–∞–∫ –≤–∏–¥–∏—Ç–µ, &lt;code&gt;delete&lt;/code&gt; –Ω–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫, –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–∂–∏–¥–∞—Ç—å. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è, –Ω–æ –ø–∞–º—è—Ç—å –Ω–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è. –¢–æ –µ—Å—Ç—å &lt;code&gt;array[4]&lt;/code&gt; –Ω–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ &lt;code&gt;array[3]&lt;/code&gt; . –ß—Ç–æ –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç &lt;code&gt;Array.prototype.unshift&lt;/code&gt; , –∫–æ—Ç–æ—Ä—ã–π –≤—Å—Ç–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞ –∏ —Å–¥–≤–∏–≥–∞–µ—Ç –≤—Å–µ –≤–≤–µ—Ä—Ö ( &lt;code&gt;array[0]&lt;/code&gt; —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è &lt;code&gt;array[1]&lt;/code&gt; –∏ —Ç. –î.)</target>
        </trans-unit>
        <trans-unit id="2c856c5e5c5be4265462b9644119ace1784d98d0" translate="yes" xml:space="preserve">
          <source>Beware Of Memory Leaks!</source>
          <target state="translated">–û—Å—Ç–µ—Ä–µ–≥–∞–π—Ç–µ—Å—å —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏!</target>
        </trans-unit>
        <trans-unit id="76829795257d4b98172b51f389192e4a9f633cf6" translate="yes" xml:space="preserve">
          <source>But if the property of the object is not configurable it cannot be deleted neither with deleteProperty function nor delete operator:</source>
          <target state="translated">–ù–æ –µ—Å–ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è,—Ç–æ –µ–≥–æ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –Ω–∏ —Ñ—É–Ω–∫—Ü–∏–µ–π deleteProperty,–Ω–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º delete:</target>
        </trans-unit>
        <trans-unit id="5d2ae2c0c3d231052d20df4bc0d378c5068295e8" translate="yes" xml:space="preserve">
          <source>But the point is if you care about memory and you want to whole the object gets removed from the memory, it is recommended to set it to null before you delete the key:</source>
          <target state="translated">–ù–æ –¥–µ–ª–æ –≤ —Ç–æ–º,—á—Ç–æ –µ—Å–ª–∏ –≤—ã –∑–∞–±–æ—Ç–∏—Ç–µ—Å—å –æ –ø–∞–º—è—Ç–∏ –∏ —Ö–æ—Ç–∏—Ç–µ,—á—Ç–æ–±—ã –≤–µ—Å—å –æ–±—ä–µ–∫—Ç —É–¥–∞–ª—è–ª—Å—è –∏–∑ –ø–∞–º—è—Ç–∏,—Ç–æ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–ª—é—á–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –≤ –Ω–æ–ª—å:</target>
        </trans-unit>
        <trans-unit id="083882684bcd539a61f754c832b4192934d833e3" translate="yes" xml:space="preserve">
          <source>But, how does a drug trip analogy relate to the &lt;code&gt;delete&lt;/code&gt; operation? The answer inheres the last line of code in the snippet above. Thus let it be reexamined, this time with a twist.</source>
          <target state="translated">–ù–æ, –∫–∞–∫ –∞–Ω–∞–ª–æ–≥–∏—è –ø–æ–µ–∑–¥–∫–∏ —Å –Ω–∞—Ä–∫–æ—Ç–∏–∫–∞–º–∏ —Å–≤—è–∑–∞–Ω–∞ —Å –æ–ø–µ—Ä–∞—Ü–∏–µ–π &lt;code&gt;delete&lt;/code&gt; ? –û—Ç–≤–µ—Ç –∑–∞–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±–µ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –≤–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ –≤—ã—à–µ. –¢–∞–∫ –ø—É—Å—Ç—å —ç—Ç–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ–Ω–æ, –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑ —Å –∏–∑—é–º–∏–Ω–∫–æ–π.</target>
        </trans-unit>
        <trans-unit id="0eb16d4b50dbacc8475f57ed2dfb88409bd56da6" translate="yes" xml:space="preserve">
          <source>Consider creating a new object without the &lt;code&gt;&quot;regex&quot;&lt;/code&gt; property because the original object could always be referenced by other parts of your program. Thus you should avoid manipulating it.</source>
          <target state="translated">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –±–µ–∑ —Å–≤–æ–π—Å—Ç–≤–∞ &lt;code&gt;&quot;regex&quot;&lt;/code&gt; –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤—Å–µ–≥–¥–∞ –º–æ–≥—É—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–µ —á–∞—Å—Ç–∏ –≤–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –≤—ã –¥–æ–ª–∂–Ω—ã –∏–∑–±–µ–≥–∞—Ç—å –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º.</target>
        </trans-unit>
        <trans-unit id="1b8bae88ce3f716fc88f086ba5df71aa742b0ee5" translate="yes" xml:space="preserve">
          <source>Dan's assertion that 'delete' is very slow and the benchmark he posted were doubted. So I carried out the test myself in Chrome 59. It does seem that 'delete' is about 30 times slower:</source>
          <target state="translated">–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –î—ç–Ω–∞ –æ —Ç–æ–º,—á—Ç–æ &quot;—É–¥–∞–ª–∏—Ç—å&quot; –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ,–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–π –∏–º —ç—Ç–∞–ª–æ–Ω –±—ã–ª —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–º.–ü–æ—ç—Ç–æ–º—É —è —Å–∞–º –ø—Ä–æ–≤–µ–ª —Ç–µ—Å—Ç –≤ Chrome 59.–ü–æ—Ö–æ–∂–µ,—á—Ç–æ 'delete' –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ 30 —Ä–∞–∑ –º–µ–¥–ª–µ–Ω–Ω–µ–µ:</target>
        </trans-unit>
        <trans-unit id="d8b13a816456ec85d6f3ace2de0c50288edaa6ea" translate="yes" xml:space="preserve">
          <source>Delete is the only true way to remove object's properties without any leftovers, but it works &lt;strong&gt;~ 100 times slower&lt;/strong&gt;, 
compared to its &quot;alternative&quot;, setting &lt;code&gt;object[key] = undefined&lt;/code&gt;.</source>
          <target state="translated">Delete - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Ä–Ω—ã–π —Å–ø–æ—Å–æ–± —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞ –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –æ—Å—Ç–∞—Ç–∫–æ–≤, –Ω–æ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç &lt;strong&gt;–ø—Ä–∏–º–µ—Ä–Ω–æ –≤ 100 —Ä–∞–∑ –º–µ–¥–ª–µ–Ω–Ω–µ–µ&lt;/strong&gt; , —á–µ–º –µ–≥–æ &amp;laquo;–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞&amp;raquo;, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è &lt;code&gt;object[key] = undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="45dc7ea9ea6f9f47fa401db4115a5eee26a4be14" translate="yes" xml:space="preserve">
          <source>Deleting an array index</source>
          <target state="translated">–£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å–∏–≤–∞</target>
        </trans-unit>
        <trans-unit id="42034d05fb5ec8b92965ea89f328c840dc4a3ac4" translate="yes" xml:space="preserve">
          <source>Deleting an object property</source>
          <target state="translated">–£–¥–∞–ª–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞</target>
        </trans-unit>
        <trans-unit id="e52c854d5631eec7468ba4727b4c77eb745f2965" translate="yes" xml:space="preserve">
          <source>Demo</source>
          <target state="translated">Demo</target>
        </trans-unit>
        <trans-unit id="0298196b206bc7b4a96725653dbc77fafc2e7815" translate="yes" xml:space="preserve">
          <source>Do Not Always Set To &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">–ù–µ –≤—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e813a63a91f53696f818ac595a5fddc09cb30338" translate="yes" xml:space="preserve">
          <source>Don't &lt;code&gt;delete&lt;/code&gt; from an array. Use &lt;code&gt;Array.prototype.splice&lt;/code&gt; instead.</source>
          <target state="translated">–ù–µ &lt;code&gt;delete&lt;/code&gt; –∏–∑ –º–∞—Å—Å–∏–≤–∞. &lt;code&gt;Array.prototype.splice&lt;/code&gt; —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Array.prototype.splice .</target>
        </trans-unit>
        <trans-unit id="9cff8f35d333fc23fef816a20f879c35c001ee7e" translate="yes" xml:space="preserve">
          <source>Due to the dynamic nature of JavaScript there are often cases where you simply don't know if the property exists or not. Checking if obj exists before the &amp;amp;&amp;amp; also makes sure you don't throw an error due to calling the hasOwnProperty() function on an undefined object.</source>
          <target state="translated">–ò–∑-–∑–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø—Ä–∏—Ä–æ–¥—ã JavaScript —á–∞—Å—Ç–æ –±—ã–≤–∞—é—Ç —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ –≤—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ –∏–ª–∏ –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è obj –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ &amp;amp;&amp;amp; —Ç–∞–∫–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—ã –Ω–µ –≤—ã–¥–∞–¥–∏—Ç–µ –æ—à–∏–±–∫—É –∏–∑-–∑–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ hasOwnProperty () –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.</target>
        </trans-unit>
        <trans-unit id="f30ca853155d96f4ff4a7523ad41da4989438529" translate="yes" xml:space="preserve">
          <source>E.g</source>
          <target state="translated">E.g</target>
        </trans-unit>
        <trans-unit id="48886c6e98adf5c4a9c9282a2441dfe3015faacb" translate="yes" xml:space="preserve">
          <source>ECMAScript 2015 (or ES6) came with built-in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect&quot;&gt;Reflect&lt;/a&gt; object. It is possible to delete object property by calling &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty&quot;&gt;Reflect.deleteProperty()&lt;/a&gt; function with target object and property key as parameters:</source>
          <target state="translated">ECMAScript 2015 (–∏–ª–∏ ES6) –ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect&quot;&gt;Reflect&lt;/a&gt; . –£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–∞ –º–æ–∂–Ω–æ, –≤—ã–∑–≤–∞–≤ &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty&quot;&gt;—Ñ—É–Ω–∫—Ü–∏—é Reflect.deleteProperty ()&lt;/a&gt; —Å —Ü–µ–ª–µ–≤—ã–º –æ–±—ä–µ–∫—Ç–æ–º –∏ –∫–ª—é—á–æ–º —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:</target>
        </trans-unit>
        <trans-unit id="4c2dbb36a3a214bec101207bfb72cd18b86e453e" translate="yes" xml:space="preserve">
          <source>Each one has it's own pros and cons (&lt;a href=&quot;https://jsperf.com/delete-vs-undefined-vs-null/16&quot;&gt;check this performance comparison&lt;/a&gt;):</source>
          <target state="translated">–£ –∫–∞–∂–¥–æ–≥–æ –µ—Å—Ç—å —Å–≤–æ–∏ –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã ( &lt;a href=&quot;https://jsperf.com/delete-vs-undefined-vs-null/16&quot;&gt;–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">–†–∞—Å—à–∏—Ä–∏—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç</target>
        </trans-unit>
        <trans-unit id="5cb7b7c35055238b90a33971ff368cff01dd0bbb" translate="yes" xml:space="preserve">
          <source>For anyone interested in reading more about it, Stack Overflow user &lt;a href=&quot;https://stackoverflow.com/users/130652/kangax&quot;&gt;kangax&lt;/a&gt; has written an incredibly in-depth blog post about the &lt;code&gt;delete&lt;/code&gt; statement on their blog, &lt;em&gt;&lt;a href=&quot;http://perfectionkills.com/understanding-delete/&quot;&gt;Understanding delete&lt;/a&gt;&lt;/em&gt;. It is highly recommended.</source>
          <target state="translated">–î–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –±–æ–ª—å—à–µ &lt;a href=&quot;https://stackoverflow.com/users/130652/kangax&quot;&gt;—É–∑–Ω–∞—Ç—å&lt;/a&gt; –æ–± —ç—Ç–æ–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Stack Overflow kangax –Ω–∞–ø–∏—Å–∞–ª –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–ª–æ–≥–µ –æ–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ &lt;code&gt;delete&lt;/code&gt; –≤ —Å–≤–æ–µ–º –±–ª–æ–≥–µ, &lt;em&gt;&lt;a href=&quot;http://perfectionkills.com/understanding-delete/&quot;&gt;–ü–æ–Ω–∏–º–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è&lt;/a&gt;&lt;/em&gt; . –ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è.</target>
        </trans-unit>
        <trans-unit id="7de0c8678ad3582ef48a786c2a12849c95f613d2" translate="yes" xml:space="preserve">
          <source>For arrays, &lt;code&gt;_.filter()&lt;/code&gt; and &lt;code&gt;_.reject()&lt;/code&gt; can be used in a similar manner.</source>
          <target state="translated">–î–ª—è –º–∞—Å—Å–∏–≤–æ–≤ &lt;code&gt;_.filter()&lt;/code&gt; –∏ &lt;code&gt;_.reject()&lt;/code&gt; –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.</target>
        </trans-unit>
        <trans-unit id="ae20664549d9e3ccd77991be79f76a86f10d159f" translate="yes" xml:space="preserve">
          <source>For example, say you are creating a webapp that uses JSON-serialization to store an array used for 'tabs' in a string (in this case, &lt;code&gt;localStorage&lt;/code&gt;). Let's also say that the code uses the numerical indices of the array's members to &quot;title&quot; them when drawing to the screen. Why are you doing this rather than just storing the &quot;title&quot; as well? Because... &lt;em&gt;reasons&lt;/em&gt;.</source>
          <target state="translated">–ù–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–ø—É—Å—Ç–∏–º, –≤—ã —Å–æ–∑–¥–∞–µ—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –¥–ª—è &amp;laquo;–≤–∫–ª–∞–¥–æ–∫&amp;raquo; –≤ —Å—Ç—Ä–æ–∫–µ (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ &lt;code&gt;localStorage&lt;/code&gt; ). –°–∫–∞–∂–µ–º —Ç–∞–∫–∂–µ, —á—Ç–æ –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –¥–ª—è &amp;laquo;–∑–∞–≥–æ–ª–æ–≤–∫–∞&amp;raquo; –∏—Ö –ø—Ä–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ. –ü–æ—á–µ–º—É –≤—ã –¥–µ–ª–∞–µ—Ç–µ —ç—Ç–æ, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ &amp;laquo;–∑–∞–≥–æ–ª–æ–≤–æ–∫&amp;raquo;? –ü–æ—Ç–æ–º—É —á—Ç–æ ... &lt;em&gt;–ø—Ä–∏—á–∏–Ω—ã&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">–ù–∞–ø—Ä–∏–º–µ—Ä:</target>
        </trans-unit>
        <trans-unit id="cdad74d0486512dc3bc4f850907cd467e5fc5e3c" translate="yes" xml:space="preserve">
          <source>For more info about and seeing more example, visit the link below:</source>
          <target state="translated">–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞,–ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:</target>
        </trans-unit>
        <trans-unit id="3053a4eaab6ecc9daa630f23887af0a663b64dcc" translate="yes" xml:space="preserve">
          <source>Functions which are part of an object (apart from the</source>
          <target state="translated">–§—É–Ω–∫—Ü–∏–∏,–∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é –æ–±—ä–µ–∫—Ç–∞ (–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º</target>
        </trans-unit>
        <trans-unit id="a355b0b1f78d396cf69cf859538e8172e1e8345c" translate="yes" xml:space="preserve">
          <source>Hello You Can try this simple an sort</source>
          <target state="translated">–ü—Ä–∏–≤–µ—Ç –¢—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ—Å—Ç–æ–π –≤–∏–¥</target>
        </trans-unit>
        <trans-unit id="ca27c0a83d24961b91d263af64d922d82a55909c" translate="yes" xml:space="preserve">
          <source>Honestly, aside from setting to &lt;code&gt;null&lt;/code&gt; rather than &lt;code&gt;undefined&lt;/code&gt;--which is legitimately weird--this behavior &lt;em&gt;shouldn't&lt;/em&gt; be surprising, since &lt;code&gt;delete&lt;/code&gt; is a unary operator, like &lt;code&gt;typeof&lt;/code&gt;, that is hard-boiled into the language and is not supposed to care about the &lt;em&gt;type&lt;/em&gt; of object it's being used on, whereas &lt;code&gt;Array&lt;/code&gt; is a subclass of &lt;code&gt;Object&lt;/code&gt; with methods &lt;em&gt;specifically designed for&lt;/em&gt; working with arrays. So there's no good reason for &lt;code&gt;delete&lt;/code&gt; to have a special case cooked in for re-shifting the array, as that would just slow things down with unnecessary work. In retrospect, my expectations were unrealistic.</source>
          <target state="translated">–ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è, –ø–æ–º–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ &lt;code&gt;null&lt;/code&gt; –∞ –Ω–µ –Ω–∞ &lt;code&gt;undefined&lt;/code&gt; —Å–∞–º–æ–º –¥–µ–ª–µ —Å—Ç—Ä–∞–Ω–Ω–æ - —Ç–∞–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ &lt;em&gt;–Ω–µ –¥–æ–ª–∂–Ω–æ&lt;/em&gt; –≤—ã–∑—ã–≤–∞—Ç—å —É–¥–∏–≤–ª–µ–Ω–∏—è, –ø–æ—Å–∫–æ–ª—å–∫—É &lt;code&gt;delete&lt;/code&gt; - —ç—Ç–æ —É–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä, —Ç–∞–∫–æ–π –∫–∞–∫ &lt;code&gt;typeof&lt;/code&gt; , –∫–æ—Ç–æ—Ä—ã–π –≤–∫—Ä—É—Ç–∏—Ç—Å—è –≤ —è–∑—ã–∫ –∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ &lt;em&gt;—Ç–∏–ø–µ&lt;/em&gt; –æ–±—ä–µ–∫—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–æ–≥–¥–∞ –∫–∞–∫ &lt;code&gt;Array&lt;/code&gt; —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–∫–ª–∞—Å—Å–æ–º &lt;code&gt;Object&lt;/code&gt; —Å –º–µ—Ç–æ–¥–∞–º–∏, &lt;em&gt;—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –¥–ª—è&lt;/em&gt; —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –¥–ª—è &lt;code&gt;delete&lt;/code&gt; –Ω–µ—Ç –≤–µ—Å–∫–∏—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞, –ø–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–¥–ª–∏—Ç —Ä–∞–±–æ—Ç—É —Å –Ω–µ–Ω—É–∂–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π. –û–≥–ª—è–¥—ã–≤–∞—è—Å—å –Ω–∞–∑–∞–¥, –º–æ–∏ –æ–∂–∏–¥–∞–Ω–∏—è –±—ã–ª–∏ –Ω–µ—Ä–µ–∞–ª—å–Ω—ã–º–∏.</target>
        </trans-unit>
        <trans-unit id="dc3989e98834042a9457a0de8b90b5c9f3024f13" translate="yes" xml:space="preserve">
          <source>How do I remove a property from a JavaScript object</source>
          <target state="translated">–ö–∞–∫ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ JavaScript</target>
        </trans-unit>
        <trans-unit id="b47475af69db5ae110b477abd31ec35a3c7d497a" translate="yes" xml:space="preserve">
          <source>However, be mindful! Do not suddenly start doing this with all your preexisting code now as it would likely break such preexisting code and/or introduce strange bugs. Rather, such an efficient practice needs to be implemented from the start, and when converting preexisting code, it is recommended that you double, triple, quadruple check all the lines relating to that as trying to upgrade old code to this new practice can be as risky as it is rewarding.</source>
          <target state="translated">–û–¥–Ω–∞–∫–æ,–±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã! –ù–µ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –≤–Ω–µ–∑–∞–ø–Ω–æ –¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–æ –≤—Å–µ–º –≤–∞—à–∏–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º —Å–µ–π—á–∞—Å,—Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ,—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ,—Å–ª–æ–º–∞–µ—Ç —Ç–∞–∫–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –∏–ª–∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ—è–≤–ª–µ–Ω–∏—é —Å—Ç—Ä–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫.–°–∫–æ—Ä–µ–µ,—Ç–∞–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞,–∏ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–≤–∞–∂–¥—ã,—Ç—Ä–∏–∂–¥—ã,—á–µ—Ç—ã—Ä–µ–∂–¥—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏,–æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —ç—Ç–æ–º—É,—Ç–∞–∫ –∫–∞–∫ –ø–æ–ø—ã—Ç–∫–∞ –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π –∫–æ–¥ –¥–æ —ç—Ç–æ–π –Ω–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç–æ–ª—å –∂–µ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ–π,—Å–∫–æ–ª—å –∏ –ø–æ–ª–µ–∑–Ω–æ–π.</target>
        </trans-unit>
        <trans-unit id="491f0bae14ec381e286ea282ba5b10bae8f240b9" translate="yes" xml:space="preserve">
          <source>However, it will &lt;strong&gt;mutate&lt;/strong&gt; the original object. If you want to create a new object &lt;strong&gt;without&lt;/strong&gt; the specified key, just assign the reduce function to a new variable, e.g.:</source>
          <target state="translated">–¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, –æ–Ω –±—É–¥–µ—Ç &lt;strong&gt;–º—É—Ç–∏—Ä–æ–≤–∞—Ç—å&lt;/strong&gt; –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç &lt;strong&gt;–±–µ–∑&lt;/strong&gt; —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é Reduce –Ω–æ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:</target>
        </trans-unit>
        <trans-unit id="b18c3a88c501a6c91766f406a1e129e6aaa98cea" translate="yes" xml:space="preserve">
          <source>However, there are two major unfixable problems with polymorphic arrays:</source>
          <target state="translated">–û–¥–Ω–∞–∫–æ —Å –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–≤–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ—Ä–∞–∑—Ä–µ—à–∏–º—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</target>
        </trans-unit>
        <trans-unit id="3486394d0c7c983de3c5268328e537d9b15cb8f7" translate="yes" xml:space="preserve">
          <source>However, this code:</source>
          <target state="translated">–û–¥–Ω–∞–∫–æ,—ç—Ç–æ—Ç –∫–æ–¥:</target>
        </trans-unit>
        <trans-unit id="4a71f7845929b0f0df07acdfaf7d379b182e9259" translate="yes" xml:space="preserve">
          <source>I feel it's important to point out the difference between these two similarly-named functions, as they are both very useful.</source>
          <target state="translated">–Ø —Å—á–∏—Ç–∞—é –≤–∞–∂–Ω—ã–º –æ—Ç–º–µ—Ç–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —ç—Ç–∏–º–∏ –¥–≤—É–º—è –æ–¥–Ω–æ–∏–º–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏,—Ç–∞–∫ –∫–∞–∫ –æ–±–µ –æ–Ω–∏ –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω—ã.</target>
        </trans-unit>
        <trans-unit id="459a68f17b246b077cb24b6614e54636e1f0783c" translate="yes" xml:space="preserve">
          <source>I personally use &lt;a href=&quot;https://en.wikipedia.org/wiki/Underscore.js&quot;&gt;Underscore.js&lt;/a&gt; or &lt;a href=&quot;https://lodash.com&quot;&gt;Lodash&lt;/a&gt; for object and array manipulation:</source>
          <target state="translated">–Ø –ª–∏—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é &lt;a href=&quot;https://en.wikipedia.org/wiki/Underscore.js&quot;&gt;Underscore.js&lt;/a&gt; –∏–ª–∏ &lt;a href=&quot;https://lodash.com&quot;&gt;Lodash&lt;/a&gt; –¥–ª—è –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ –º–∞—Å—Å–∏–≤–∞–º–∏:</target>
        </trans-unit>
        <trans-unit id="a8613a5b1880d971e632b3352e4bfe554f971c46" translate="yes" xml:space="preserve">
          <source>If a property with the same name exists on the object's prototype
  chain, then, after deletion, the object will use the property from the
  prototype chain (in other words, delete only has an effect on own
  properties).</source>
          <target state="translated">–ï—Å–ª–∏ –≤ —Ü–µ–ø–æ—á–∫–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º,—Ç–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ –∏–∑ —Ü–µ–ø–æ—á–∫–∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤ (–¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏,—É–¥–∞–ª–µ–Ω–∏–µ –≤–ª–∏—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞).</target>
        </trans-unit>
        <trans-unit id="1e20c9e61654d816a6093dde8b64312b7bd4779b" translate="yes" xml:space="preserve">
          <source>If the property which you are trying to delete does not exist, delete
  will not have any effect and will return true</source>
          <target state="translated">–ï—Å–ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ,–∫–æ—Ç–æ—Ä–æ–µ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å,–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –Ω–∏–∫–∞–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏ –≤–µ—Ä–Ω–µ—Ç true</target>
        </trans-unit>
        <trans-unit id="28ec183a3184d93a675028a4e725a85c94f1f649" translate="yes" xml:space="preserve">
          <source>If you do not know the index, you'll also have to do an index search:</source>
          <target state="translated">–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ –∏–Ω–¥–µ–∫—Å–∞,–≤–∞–º —Ç–∞–∫–∂–µ –ø—Ä–∏–¥–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∏–Ω–¥–µ–∫—Å—É:</target>
        </trans-unit>
        <trans-unit id="3204a3a58282102b99263134aa04e4bbd9031c97" translate="yes" xml:space="preserve">
          <source>If you do:</source>
          <target state="translated">–ï—Å–ª–∏ —Ç—ã —ç—Ç–æ —Å–¥–µ–ª–∞–µ—à—å:</target>
        </trans-unit>
        <trans-unit id="3204f4d5aa25757c4ed3063f2b869d5fde0626d5" translate="yes" xml:space="preserve">
          <source>If you know the index of your staff member, you could simply do this:</source>
          <target state="translated">–ï—Å–ª–∏ –≤—ã –∑–Ω–∞–µ—Ç–µ –∏–Ω–¥–µ–∫—Å –≤–∞—à–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞,–≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ:</target>
        </trans-unit>
        <trans-unit id="9b546f76f9301b299e7ed78305baf0ef1addfe1c" translate="yes" xml:space="preserve">
          <source>If you want to delete a property deeply nested in the object then you can use the following recursive function with path to the property as the second argument:</source>
          <target state="translated">–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ,–≥–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–µ –≤ –æ–±—ä–µ–∫—Ç,—Ç–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤—Ç–æ—Ä–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É—Ç–∏ –∫ —ç—Ç–æ–º—É —Å–≤–æ–π—Å—Ç–≤—É:</target>
        </trans-unit>
        <trans-unit id="506bf20b873a7a4cd476c438c371ecd4bcca65fc" translate="yes" xml:space="preserve">
          <source>If you want to experiment with this, you can use &lt;a href=&quot;http://jsfiddle.net/cb57dusv/46/&quot;&gt;&lt;strong&gt;this Fiddle&lt;/strong&gt;&lt;/a&gt; as a starting point.</source>
          <target state="translated">–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å &lt;a href=&quot;http://jsfiddle.net/cb57dusv/46/&quot;&gt;&lt;strong&gt;—ç—Ç—É —Å–∫—Ä–∏–ø–∫—É&lt;/strong&gt;&lt;/a&gt; –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–ø—Ä–∞–≤–Ω–æ–π —Ç–æ—á–∫–∏.</target>
        </trans-unit>
        <trans-unit id="a4e72696da1b895cd7644dbb4f08034ae76c1836" translate="yes" xml:space="preserve">
          <source>If you want to use the entire &lt;code&gt;staff&lt;/code&gt; array, the proper way to do this, would be to do this:</source>
          <target state="translated">–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ—Å—å –º–∞—Å—Å–∏–≤ &lt;code&gt;staff&lt;/code&gt; , –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ:</target>
        </trans-unit>
        <trans-unit id="43cf8d099321d601790e8b3431ad74fdf17809c0" translate="yes" xml:space="preserve">
          <source>Ignoring the dangers and problems inherent in &lt;code&gt;null&lt;/code&gt;, and the space wasted, this can be problematic if the array needs to be precise.</source>
          <target state="translated">–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–æ–±–ª–µ–º, –ø—Ä–∏—Å—É—â–∏—Ö &lt;code&gt;null&lt;/code&gt; , –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –≤–ø—É—Å—Ç—É—é, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—á–Ω—ã–º.</target>
        </trans-unit>
        <trans-unit id="c138b726889b4f8045cc8db17ba22f8faa709ac8" translate="yes" xml:space="preserve">
          <source>In addition, while mutating objects in-place isn't stateless, you can use the functional nature of &lt;code&gt;Reflect.deleteProperty&lt;/code&gt; to do partial application and other functional techniques that aren't possible with &lt;code&gt;delete&lt;/code&gt; statements.</source>
          <target state="translated">–ö—Ä–æ–º–µ —Ç–æ–≥–æ, —Ö–æ—Ç—è –∏–∑–º–µ–Ω—è—é—â–∏–µ—Å—è –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–∏—Ä–æ–¥—É &lt;code&gt;Reflect.deleteProperty&lt;/code&gt; –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã —Å –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ &lt;code&gt;delete&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5b114aff6680bfc75db078ff75477b94c1c576aa" translate="yes" xml:space="preserve">
          <source>In arrays, unlike plain old objects, using &lt;code&gt;delete&lt;/code&gt; leaves behind garbage in the form of &lt;code&gt;null&lt;/code&gt;, creating a &quot;hole&quot; in the array.</source>
          <target state="translated">–í –º–∞—Å—Å–∏–≤–∞—Ö, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö —Å—Ç–∞—Ä—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ &lt;code&gt;delete&lt;/code&gt; –æ—Å—Ç–∞–≤–ª—è–µ—Ç –º—É—Å–æ—Ä –≤ –≤–∏–¥–µ &lt;code&gt;null&lt;/code&gt; , —Å–æ–∑–¥–∞–≤–∞—è &amp;laquo;–¥—ã—Ä—É&amp;raquo; –≤ –º–∞—Å—Å–∏–≤–µ.</target>
        </trans-unit>
        <trans-unit id="acf20d554a4832d04b9fb4c2dfc6cc9d34eda721" translate="yes" xml:space="preserve">
          <source>In the code above, simply doing &lt;code&gt;nodeRecords[i][lastTime] = undefined;&lt;/code&gt; will cause a massive memory leak because each animation frame. Each frame, all 65536 DOM elements will take up another 65536 individual slots, but the previous 65536 slots will only be set to undefined which leaves them hanging in the memory. Go ahead, try to run the above code in the console and see for yourself. After forcing an out-of-memory error, attempt to run it again except with the following version of the code that uses the &lt;code&gt;delete&lt;/code&gt; operator instead.</source>
          <target state="translated">–í –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–º –≤—ã—à–µ –∫–æ–¥–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ &lt;code&gt;nodeRecords[i][lastTime] = undefined;&lt;/code&gt; –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –º–∞—Å—Å–æ–≤–æ–π —É—Ç–µ—á–∫–µ –ø–∞–º—è—Ç–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä –∞–Ω–∏–º–∞—Ü–∏–∏. –ö–∞–∂–¥—ã–π –∫–∞–¥—Ä, –≤—Å–µ 65536 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM –±—É–¥—É—Ç –∑–∞–Ω–∏–º–∞—Ç—å –µ—â–µ 65536 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤, –Ω–æ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö 65536 —Å–ª–æ—Ç–æ–≤ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ undefined, —á—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –∏—Ö –∑–∞–≤–∏—Å–∞–Ω–∏—é –≤ –ø–∞–º—è—Ç–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –≤—ã—à–µ –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —Å–∞–º–∏. –ü–æ—Å–ª–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –ø–∞–º—è—Ç–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–µ —Å–Ω–æ–≤–∞, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏ –∫–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä &lt;code&gt;delete&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="271f117734d63131f8d6a45f399a766357be7419" translate="yes" xml:space="preserve">
          <source>Increasingly stupid edge-case scenario aside, using &lt;code&gt;delete&lt;/code&gt; on said array will result in &lt;code&gt;null&lt;/code&gt; polluting the array, and probably causing bugs in the app later on. And if you check for &lt;code&gt;null&lt;/code&gt;, it would straight up skip the numbers resulting in the tabs being rendered like &lt;code&gt;[1] [2] [4] [5] ...&lt;/code&gt;.</source>
          <target state="translated">–ó–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –≤—Å–µ –±–æ–ª–µ–µ –∏ –±–æ–ª–µ–µ –≥–ª—É–ø–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∫—Ä–∞–π–Ω–µ–≥–æ —Å–ª—É—á–∞—è, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ &lt;code&gt;delete&lt;/code&gt; –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ &lt;code&gt;null&lt;/code&gt; –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—é –º–∞—Å—Å–∏–≤–∞ –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–∑–∂–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ—à–∏–±–∫–∞–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –ò –µ—Å–ª–∏ –≤—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç–µ –¥–ª—è &lt;code&gt;null&lt;/code&gt; , –æ–Ω –ø—Ä–æ–ø—É—Å—Ç–∏–ª –±—ã —á–∏—Å–ª–∞ –≤–≤–µ—Ä—Ö, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —á–µ–≥–æ –≤–∫–ª–∞–¥–∫–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ &lt;code&gt;[1] [2] [4] [5] ...&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="67a2e0451ade99e58384dc55f1327e29e5977c70" translate="yes" xml:space="preserve">
          <source>It &lt;strong&gt;deletes the key from the hashmap&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;–£–¥–∞–ª—è–µ—Ç –∫–ª—é—á –∏–∑ —Ö—ç—à-–∫–∞—Ä—Ç—ã&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="593fba807066e533a5fe4a2443019f46d7ca31da" translate="yes" xml:space="preserve">
          <source>JavaScript is an OOP Language, so everything is an object, including &lt;em&gt;arrays&lt;/em&gt;. Thus, I feel it necessary to point out a particular caveat.</source>
          <target state="translated">JavaScript - —ç—Ç–æ —è–∑—ã–∫ –û–û–ü, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º, –≤–∫–ª—é—á–∞—è &lt;em&gt;–º–∞—Å—Å–∏–≤—ã&lt;/em&gt; . –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —è —Å—á–∏—Ç–∞—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º —É–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ–≥–æ–≤–æ—Ä–∫—É.</target>
        </trans-unit>
        <trans-unit id="b86b332c3f3aa1433f370f7189813a6381eb2178" translate="yes" xml:space="preserve">
          <source>Library-based property omission</source>
          <target state="translated">–ë–∏–±–ª–∏–æ—Ç–µ—á–Ω–æ–µ —É–ø—É—â–µ–Ω–∏–µ</target>
        </trans-unit>
        <trans-unit id="59b86486aed4edafd59a372a9da15c32460385f0" translate="yes" xml:space="preserve">
          <source>Like this:</source>
          <target state="translated">–í–æ—Ç —Ç–∞–∫:</target>
        </trans-unit>
        <trans-unit id="23ee237b458378f4f66052abb7c903c28cbb18e4" translate="yes" xml:space="preserve">
          <source>Look at the &lt;strong&gt;&lt;a href=&quot;http://jsperf.com/delete-vs-undefined-vs-null/16&quot;&gt;benchmark&lt;/a&gt;&lt;/strong&gt;.</source>
          <target state="translated">–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ &lt;strong&gt;&lt;a href=&quot;http://jsperf.com/delete-vs-undefined-vs-null/16&quot;&gt;—Ç–µ—Å—Ç&lt;/a&gt;&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="d0447456284f7feabbe03be15bd344b6f319890b" translate="yes" xml:space="preserve">
          <source>Luckily, arrays &lt;em&gt;do&lt;/em&gt; have a specialized method for deleting indices and reallocating memory: &lt;code&gt;Array.prototype.splice()&lt;/code&gt;. You could write something like this:</source>
          <target state="translated">–ö —Å—á–∞—Å—Ç—å—é, —É –º–∞—Å—Å–∏–≤–æ–≤ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: &lt;code&gt;Array.prototype.splice()&lt;/code&gt; . –í—ã –º–æ–≥–ª–∏ –±—ã –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ —ç—Ç–æ–≥–æ:</target>
        </trans-unit>
        <trans-unit id="098d9f24825c866c84675902efcb46bcadb54327" translate="yes" xml:space="preserve">
          <source>More than 2X faster than &lt;code&gt;delete&lt;/code&gt;, however the property is &lt;strong&gt;not&lt;/strong&gt; deleted and can be iterated.</source>
          <target state="translated">–ë–æ–ª–µ–µ —á–µ–º –≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º &lt;code&gt;delete&lt;/code&gt; , –æ–¥–Ω–∞–∫–æ —Å–≤–æ–π—Å—Ç–≤–æ &lt;strong&gt;–Ω–µ&lt;/strong&gt; —É–¥–∞–ª—è–µ—Ç—Å—è –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–æ.</target>
        </trans-unit>
        <trans-unit id="ccc762c5d3373bf8a3cde8b635c9825605d01c63" translate="yes" xml:space="preserve">
          <source>Mutative object property deletion, safe</source>
          <target state="translated">–ú—É—Ç–∞—Ç–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞,–±–µ–∑–æ–ø–∞—Å–Ω–æ</target>
        </trans-unit>
        <trans-unit id="9ce68ac5a3111b339ada2a12dd8cc6eea0e45ffa" translate="yes" xml:space="preserve">
          <source>Mutative object property deletion, unsafe</source>
          <target state="translated">–ú—É—Ç–∞—Ç–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ –æ–±—ä–µ–∫—Ç–∞,–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="089de7283699cfb1ed6d519cb14e7b0cf6326b5b" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;_.pick()&lt;/code&gt; and &lt;code&gt;_.omit()&lt;/code&gt; both return a copy of the object and don't directly modify the original object. Assigning the result to the original object should do the trick (not shown).</source>
          <target state="translated">–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ &lt;code&gt;_.pick()&lt;/code&gt; –∏ &lt;code&gt;_.omit()&lt;/code&gt; –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞ –∏ –Ω–∞–ø—Ä—è–º—É—é –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç. –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏—Å—Ö–æ–¥–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É –¥–æ–ª–∂–Ω–æ –ø–æ–º–æ—á—å (–Ω–µ –ø–æ–∫–∞–∑–∞–Ω–æ).</target>
        </trans-unit>
        <trans-unit id="74d18dd16f1da3ac16685fb7e2b20e82dd3d4708" translate="yes" xml:space="preserve">
          <source>Note that I purposedly carried out more than one 'delete' operations in one loop cycle to minimize the effect caused by the other operations.</source>
          <target state="translated">–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ,—á—Ç–æ —è –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–ª –±–æ–ª–µ–µ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ &quot;—É–¥–∞–ª–µ–Ω–∏—è&quot; –≤ –æ–¥–Ω–æ–º —Ü–∏–∫–ª–µ,—á—Ç–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç,–≤—ã–∑–≤–∞–Ω–Ω—ã–π –¥—Ä—É–≥–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏.</target>
        </trans-unit>
        <trans-unit id="cbc78d0538f8d0b1ea57d6e615c0173c54cc2f85" translate="yes" xml:space="preserve">
          <source>Note that the wrapper function is designed to be very strict about types, and will return &lt;code&gt;null&lt;/code&gt; if anything is off. That includes putting in a string like &lt;code&gt;&quot;3&quot;&lt;/code&gt;. It is left up to the programmer to be diligent about his types. This is to encourage good programming practice.</source>
          <target state="translated">–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—á–µ–Ω—å —Å—Ç—Ä–æ–≥–æ –∫ —Ç–∏–ø–∞–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç &lt;code&gt;null&lt;/code&gt; , –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –≤—Å—Ç–∞–≤–∫—É —Å—Ç—Ä–æ–∫–∏, –∫–∞–∫ &lt;code&gt;&quot;3&quot;&lt;/code&gt; . –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–µ—Ä–¥–Ω—ã–º –≤ —Å–≤–æ–∏—Ö —Ç–∏–ø–∞—Ö. –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ø–æ–æ—â—Ä—è—Ç—å —Ö–æ—Ä–æ—à—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.</target>
        </trans-unit>
        <trans-unit id="0cd1e1c286ff1b960d2aa87f0e85fe9bd6a35fdd" translate="yes" xml:space="preserve">
          <source>Now, if you want to remove a single staff member or student, the procedure is a bit different, because both properties are arrays themselves.</source>
          <target state="translated">–¢–µ–ø–µ—Ä—å,–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ —É—á–µ–Ω–∏–∫–∞,–ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è,–ø–æ—Ç–æ–º—É —á—Ç–æ –æ–±–∞ —Å–≤–æ–π—Å—Ç–≤–∞ —Å–∞–º–∏ –ø–æ —Å–µ–±–µ –º–∞—Å—Å–∏–≤—ã.</target>
        </trans-unit>
        <trans-unit id="e14273e8bb73415bec8db17e1b9d548211a7aed0" translate="yes" xml:space="preserve">
          <source>Now, you &lt;em&gt;could&lt;/em&gt; keep a second iterator, like &lt;code&gt;j&lt;/code&gt;, to increment only when valid values are read from the array. But that wouldn't exactly solve the &lt;code&gt;null&lt;/code&gt; issue, and you still have to please that &lt;s&gt;troll&lt;/s&gt; PDP-11 user. Alas, his computer just &lt;em&gt;doesn't&lt;/em&gt; have enough memory to hold that last integer &lt;sub&gt;(don't ask how he manages to handle a variable-width array...)&lt;/sub&gt;.</source>
          <target state="translated">–¢–µ–ø–µ—Ä—å –≤—ã &lt;em&gt;–º–æ–∂–µ—Ç–µ&lt;/em&gt; –æ—Å—Ç–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, &lt;code&gt;j&lt;/code&gt; , —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –µ–≥–æ, —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ù–æ —ç—Ç–æ —Ç–æ—á–Ω–æ –Ω–µ —Ä–µ—à–∏—Ç &lt;code&gt;null&lt;/code&gt; –ø—Ä–æ–±–ª–µ–º—É, –∏ –≤–∞–º –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ &lt;s&gt;—Ç—Ä–æ–ª–ª—è&lt;/s&gt; PDP-11. –£–≤—ã, –µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä—É –ø—Ä–æ—Å—Ç–æ &lt;em&gt;–Ω–µ&lt;/em&gt; —Ö–≤–∞—Ç–∞–µ—Ç –ø–∞–º—è—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ &lt;sub&gt;(–Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ, –∫–∞–∫ –µ–º—É —É–¥–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã ...)&lt;/sub&gt; .</target>
        </trans-unit>
        <trans-unit id="e28b55f542be9cce84f1cc3f1bdb29e2a2eb72e0" translate="yes" xml:space="preserve">
          <source>Object.assign() &amp;amp; Object.keys() &amp;amp; Array.map()</source>
          <target state="translated">Object.assign () &amp;amp; Object.keys () &amp;amp; Array.map ()</target>
        </trans-unit>
        <trans-unit id="c643fe374f1dfb8aa281ee046c5ea254b1b7b942" translate="yes" xml:space="preserve">
          <source>Observe. &lt;code&gt;bar[1] = &quot;&quot;&lt;/code&gt; does not coerce polymorphism whereas &lt;code&gt;bar[1] = undefined&lt;/code&gt; does. Therefore, one should always, whenever possible use the corresponding type for their objects so as to not accidentally cause polymorphism. One such person may use the following list as a general reference to get them going. However, please do not explicitly use the below ideas. Instead, use whatever works well for your code.</source>
          <target state="translated">–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ. &lt;code&gt;bar[1] = &quot;&quot;&lt;/code&gt; –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º, —Ç–æ–≥–¥–∞ –∫–∞–∫ &lt;code&gt;bar[1] = undefined&lt;/code&gt; –¥–µ–ª–∞–µ—Ç. –ü–æ—ç—Ç–æ–º—É –≤—Å–µ–≥–¥–∞ —Å–ª–µ–¥—É–µ—Ç –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø –¥–ª—è —Å–≤–æ–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤, —á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –≤—ã–∑–≤–∞—Ç—å –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º. –û–¥–∏–Ω —Ç–∞–∫–æ–π —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—â–µ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞, —á—Ç–æ–±—ã –∑–∞—Å—Ç–∞–≤–∏—Ç—å –∏—Ö —Ä–∞–±–æ—Ç–∞—Ç—å. –û–¥–Ω–∞–∫–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —è–≤–Ω–æ —Å–ª–µ–¥—É—é—â–∏–µ –∏–¥–µ–∏. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–¥–∞.</target>
        </trans-unit>
        <trans-unit id="e583eed26b5bb4eb2fe3ea98e3d4481f60fbfae9" translate="yes" xml:space="preserve">
          <source>Of course, it &lt;em&gt;did&lt;/em&gt; surprise me. Because I wrote this to justify my crusade against &quot;null garbage&quot;:</source>
          <target state="translated">–ö–æ–Ω–µ—á–Ω–æ, —ç—Ç–æ –º–µ–Ω—è —É–¥–∏–≤–∏–ª–æ. –ü–æ—Ç–æ–º—É —á—Ç–æ —è –Ω–∞–ø–∏—Å–∞–ª —ç—Ç–æ, —á—Ç–æ–±—ã –æ–ø—Ä–∞–≤–¥–∞—Ç—å —Å–≤–æ–π –∫—Ä–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ &quot;–Ω—É–ª–µ–≤–æ–≥–æ –º—É—Å–æ—Ä–∞&quot;:</target>
        </trans-unit>
        <trans-unit id="9d008b07517f4d9dbae6df29270e3dfc66dcea5d" translate="yes" xml:space="preserve">
          <source>Okay, let's just say that you're trying to save memory at the request of this &lt;em&gt;one&lt;/em&gt; user who runs a PDP-11 minicomputer from the 1960's running UNIX and wrote his own Elinks-based, JavaScript-compliant, line-printer-friendly browser because X11 is &lt;em&gt;out of the question&lt;/em&gt;.</source>
          <target state="translated">–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–µ–º, —á—Ç–æ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –ø–∞–º—è—Ç—å –ø–æ –∑–∞–ø—Ä–æ—Å—É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–Ω–∏-–∫–æ–º–ø—å—é—Ç–µ—Ä PDP-11 –∏–∑ 1960-—Ö –≥–æ–¥–æ–≤ –ø–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º UNIX –∏ –Ω–∞–ø–∏—Å–∞–ª —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ Elinks, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å JavaScript –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –ª–∏–Ω–µ–π–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ—Ç–æ–º—É —á—Ç–æ X11 –Ω–µ –º–æ–∂–µ—Ç &lt;em&gt;–±—ã—Ç—å –∏ —Ä–µ—á–∏&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="0746b7ec72e10adab007597141d3dddd2450c60e" translate="yes" xml:space="preserve">
          <source>Old question, modern answer. Using object destructuring, an &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript&amp;nbsp;6&lt;/a&gt; feature, it's as simple as:</source>
          <target state="translated">–°—Ç–∞—Ä—ã–π –≤–æ–ø—Ä–æ—Å, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É—è –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤, —Ñ—É–Ω–∫—Ü–∏—é &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript 6&lt;/a&gt; , —ç—Ç–æ —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ, –∫–∞–∫:</target>
        </trans-unit>
        <trans-unit id="88891f47a253aa57bb1cb91937b9715b281db53b" translate="yes" xml:space="preserve">
          <source>Once polymorphic, always polymorphic. When an array is made polymorphic, the polymorphism cannot be undone in Webkit browsers. So, even if you restore a polymorphic array to being non-polymorphic, it will still be stored by the browser as a polymorphic array.</source>
          <target state="translated">–ö–æ–≥–¥–∞-—Ç–æ –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π,–≤—Å–µ–≥–¥–∞ –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π.–ö–æ–≥–¥–∞ –º–∞—Å—Å–∏–≤ —Å–¥–µ–ª–∞–Ω –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–º,–ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω –≤ –±—Ä–∞—É–∑–µ—Ä–∞—Ö Webkit.–ü–æ—ç—Ç–æ–º—É,–¥–∞–∂–µ –µ—Å–ª–∏ –≤—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π –º–∞—Å—Å–∏–≤ –∫–∞–∫ –Ω–µ–ø–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π,–æ–Ω –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º –∫–∞–∫ –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π –º–∞—Å—Å–∏–≤.</target>
        </trans-unit>
        <trans-unit id="b248f1b8652c2d4ab474434fceed81458cb94383" translate="yes" xml:space="preserve">
          <source>Once those four queries have been answered, there are essentially four categories of &quot;property removal&quot; in JavaScript to chose from in order to meet your goals. They are:</source>
          <target state="translated">–ü–æ—Å–ª–µ —Ç–æ–≥–æ,–∫–∞–∫ —ç—Ç–∏ —á–µ—Ç—ã—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ –±—ã–ª–∏ —Ä–µ—à–µ–Ω—ã,–µ—Å—Ç—å,–ø–æ —Å—É—Ç–∏,—á–µ—Ç—ã—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ &quot;—É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏&quot; –≤ JavaScript,–∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π.–¢–∞–∫ –∏ –µ—Å—Ç—å:</target>
        </trans-unit>
        <trans-unit id="547c95266578e4dba22f41101c7fbe880f75e156" translate="yes" xml:space="preserve">
          <source>One aspect of Javascript that is important to consider is polymorphism. Polymorphism is when assigning the same variable/slot-in-an-object different types as seen below.</source>
          <target state="translated">–û–¥–Ω–∏–º –∏–∑ –∞—Å–ø–µ–∫—Ç–æ–≤ –Ø–≤–∞—Å–∫—Ä–∏–ø—Ç–∞,–∫–æ—Ç–æ—Ä—ã–π –≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å,—è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º.–ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º-—ç—Ç–æ –∫–æ–≥–¥–∞ –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞—é—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã,–∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∏–∂–µ.</target>
        </trans-unit>
        <trans-unit id="d59804a9108998189135354633d8b85aa6ac9872" translate="yes" xml:space="preserve">
          <source>One may liken polymorphism to a drug addiction. At first glance, it seems awesomely lucrative: nice pretty fluffy code. Then, the coder introduces their array to the drug of polymorphism. Instantly, the polymorphic array becomes less efficient, and it can never become as efficient as it was before since it is drugged. To correlate such circumstance to real life, someone on cocaine might not even be capable of operating a simple door handle, much less be able to calculate digits of PI. Likewise, an array on the drug of polymorphism cannot ever be as efficient as a monomorphic array.</source>
          <target state="translated">–ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º –º–æ–∂–Ω–æ —É–ø–æ–¥–æ–±–∏—Ç—å –Ω–∞—Ä–∫–æ–º–∞–Ω–∏–∏.–ù–∞ –ø–µ—Ä–≤—ã–π –≤–∑–≥–ª—è–¥,—ç—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ—Ç—Ä—è—Å–∞—é—â–µ –≤—ã–≥–æ–¥–Ω–æ:–∫—Ä–∞—Å–∏–≤—ã–π,–¥–æ–≤–æ–ª—å–Ω–æ –ø—É—à–∏—Å—Ç—ã–π –∫–æ–¥.–ü–æ—Ç–æ–º —à–∏—Ñ—Ä–æ–≤–∞–ª—å—â–∏–∫ –≤–≤–æ–¥–∏—Ç –∏—Ö –º–∞—Å—Å–∏–≤ –≤ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –æ—Ç –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞.–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º,–∏ –æ–Ω –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Ç–∞–∫–∏–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º,–∫–∞–∫ —Ä–∞–Ω—å—à–µ,—Å —Ç–µ—Ö –ø–æ—Ä,–∫–∞–∫ –µ–≥–æ –Ω–∞–∫–∞—á–∞–ª–∏ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∞–º–∏.–ß—Ç–æ–±—ã —Å–æ–æ—Ç–Ω–µ—Å—Ç–∏ —Ç–∞–∫–æ–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–æ —Å —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω—å—é,–∫—Ç–æ-—Ç–æ,—É–ø–æ—Ç—Ä–µ–±–ª—è—é—â–∏–π –∫–æ–∫–∞–∏–Ω,–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–∞–∂–µ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ—Å—Ç–æ–π –¥–≤–µ—Ä–Ω–æ–π —Ä—É—á–∫–æ–π,—Ç–µ–º –±–æ–ª–µ–µ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã—á–∏—Å–ª–∏—Ç—å —Ü–∏—Ñ—Ä—ã –ü–ò.–ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º –æ–±—Ä–∞–∑–æ–º,–º–∞—Å—Å–∏–≤ –Ω–∞ –Ω–∞—Ä–∫–æ—Ç–∏–∫–µ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç–æ–ª—å –∂–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º,–∫–∞–∫ –º–æ–Ω–æ–º–æ—Ä—Ñ–Ω—ã–π –º–∞—Å—Å–∏–≤.</target>
        </trans-unit>
        <trans-unit id="81ec1a879d1bcac8eaeb3bcd6cca8f51d459b6e9" translate="yes" xml:space="preserve">
          <source>Operator &lt;code&gt;delete&lt;/code&gt; is unexpectedly slow!</source>
          <target state="translated">–û–ø–µ—Ä–∞—Ç–æ—Ä &lt;code&gt;delete&lt;/code&gt; –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ!</target>
        </trans-unit>
        <trans-unit id="b0213d049275e53829195e4fb176386bc570f98e" translate="yes" xml:space="preserve">
          <source>Or add it as a new pointer to another object like:</source>
          <target state="translated">–ò–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –∫–∞–∫ –Ω–æ–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç:</target>
        </trans-unit>
        <trans-unit id="b02fc9813af3fdbb140c9b950f4bb96861bf726a" translate="yes" xml:space="preserve">
          <source>Or with the questions sample:</source>
          <target state="translated">–ò–ª–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤:</target>
        </trans-unit>
        <trans-unit id="e9b0d0e32654faf6fc06ca2ce8663172c501d507" translate="yes" xml:space="preserve">
          <source>Or you can also use array-like notation:</source>
          <target state="translated">–ò–ª–∏ –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é:</target>
        </trans-unit>
        <trans-unit id="040435ad5191a6323d4b61a949b35014d90fb332" translate="yes" xml:space="preserve">
          <source>Or you can dynamically exclude properties like this,</source>
          <target state="translated">–ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏—Å–∫–ª—é—á–∞—Ç—å —Ç–∞–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞,</target>
        </trans-unit>
        <trans-unit id="a7ca816fcb165b225c5a6969cca6cd3afa101c70" translate="yes" xml:space="preserve">
          <source>Properties can be removed using &lt;strong&gt;destructuring&lt;/strong&gt; in combination with the &lt;strong&gt;rest operator&lt;/strong&gt;. In your example regex is destructured out (ignored) and the rest of the properties are returned as rest.</source>
          <target state="translated">–°–≤–æ–π—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é &lt;strong&gt;—Ä–∞–∑—Ä—É—à–µ–Ω–∏—è&lt;/strong&gt; –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å &lt;strong&gt;–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –æ—Ç–¥—ã—Ö–∞&lt;/strong&gt; . –í –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è), –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∫–∞–∫ –æ—Å—Ç–∞–ª—å–Ω—ã–µ.</target>
        </trans-unit>
        <trans-unit id="257bb222f1c06e8c1d8edf559d64e06deb75f2f0" translate="yes" xml:space="preserve">
          <source>Property Removal in JavaScript</source>
          <target state="translated">–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ JavaScript</target>
        </trans-unit>
        <trans-unit id="83a4727bcff27e1d95598a97b2a871336f59a8c8" translate="yes" xml:space="preserve">
          <source>Readable and short, however, it might not be the best choice if you are operating on a large number of objects as its performance is not optimized.</source>
          <target state="translated">–ß–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –∏ –∫–æ—Ä–æ—Ç–∫–∏–π,–æ–¥–Ω–∞–∫–æ,–æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ª—É—á—à–∏–º –≤—ã–±–æ—Ä–æ–º,–µ—Å–ª–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤,—Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.</target>
        </trans-unit>
        <trans-unit id="ce7827682ca4a098e50c7905bb13aa7c7e60006c" translate="yes" xml:space="preserve">
          <source>Ref: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete&quot;&gt;MDN&lt;/a&gt;.</source>
          <target state="translated">–°—Å—ã–ª–∫–∞: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete&quot;&gt;MDN&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f02218cedd8e4fd7e585302dc05d8d0a5833d5f0" translate="yes" xml:space="preserve">
          <source>Reference: &lt;a href=&quot;http://underscorejs.org/#omit&quot;&gt;link&lt;/a&gt;&lt;strong&gt;_.omit(object, *keys)&lt;/strong&gt;</source>
          <target state="translated">–°—Å—ã–ª–∫–∞: &lt;a href=&quot;http://underscorejs.org/#omit&quot;&gt;—Å—Å—ã–ª–∫–∞&lt;/a&gt; &lt;strong&gt;_.omit (–æ–±—ä–µ–∫—Ç, * –∫–ª—é—á–∏)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a3c1aeff97f5a6d2ba0a975a623e96c949b36be" translate="yes" xml:space="preserve">
          <source>Reference: &lt;a href=&quot;http://underscorejs.org/#pick&quot;&gt;link&lt;/a&gt;&lt;strong&gt;_.pick(object, *keys)&lt;/strong&gt;</source>
          <target state="translated">–°—Å—ã–ª–∫–∞: &lt;a href=&quot;http://underscorejs.org/#pick&quot;&gt;—Å—Å—ã–ª–∫–∞&lt;/a&gt; &lt;strong&gt;_.pick (–æ–±—ä–µ–∫—Ç, * –∫–ª—é—á–∏)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5817e749619edf322d60f85b86cab9c7f83094af" translate="yes" xml:space="preserve">
          <source>Rest-based string property omission</source>
          <target state="translated">–ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è</target>
        </trans-unit>
        <trans-unit id="ab303515578a450fdf614933afe415b6528c01d1" translate="yes" xml:space="preserve">
          <source>Return a copy of the object, filtered to omit the 
blacklisted keys (or array of keys).</source>
          <target state="translated">–í–µ—Ä–Ω—É—Ç—å –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞,–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ,—á—Ç–æ–±—ã –æ–ø—É—Å—Ç–∏—Ç—å –∫–ª—é—á–∏ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–∏–ª–∏ –º–∞—Å—Å–∏–≤–∞ –∫–ª—é—á–µ–π).</target>
        </trans-unit>
        <trans-unit id="011a1cad4539d30348ba24adcd37dceade1f93c1" translate="yes" xml:space="preserve">
          <source>Return a copy of the object, filtered to only have values for the 
whitelisted keys (or array of valid keys).</source>
          <target state="translated">–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞,–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ,—á—Ç–æ–±—ã –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª—é—á–µ–π –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–∏–ª–∏ –º–∞—Å—Å–∏–≤–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π).</target>
        </trans-unit>
        <trans-unit id="650045349baef87a1fa74815eb1e6653f73e4e45" translate="yes" xml:space="preserve">
          <source>Say I create an object as follows:</source>
          <target state="translated">–°–∫–∞–∂–µ–º,—è —Å–æ–∑–¥–∞—é –æ–±—ä–µ–∫—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:</target>
        </trans-unit>
        <trans-unit id="f5d2829fcf8f71f8331358342fe9021d00422606" translate="yes" xml:space="preserve">
          <source>Setting a property to null before deleting it doesn't accomplish
  anything (unless the object has been sealed by Object.seal and the
  delete fails. That's not usually the case unless you specifically
  try).</source>
          <target state="translated">–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–π—Å—Ç–≤–∞ null –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç (–µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç –Ω–µ –±—ã–ª –æ–ø–µ—á–∞—Ç–∞–Ω Object.seal –∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.–û–±—ã—á–Ω–æ —ç—Ç–æ –Ω–µ —Ç–∞–∫,–µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –≤—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –Ω–µ –ø–æ–ø—Ä–æ–±—É–µ—Ç–µ).</target>
        </trans-unit>
        <trans-unit id="a1aeff6040cbaf4a052232c94541c2b536b4a1f3" translate="yes" xml:space="preserve">
          <source>Similarly, removing the entire students array would be done by calling &lt;code&gt;delete Hogwarts.students;&lt;/code&gt; or &lt;code&gt;delete Hogwarts['students'];&lt;/code&gt;.</source>
          <target state="translated">–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é –≤—ã–∑–æ–≤–∞ &lt;code&gt;delete Hogwarts.students;&lt;/code&gt; –∏–ª–∏ &lt;code&gt;delete Hogwarts['students'];&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="fd410e78d809f27ec1e3bdad4ee5576324a4212e" translate="yes" xml:space="preserve">
          <source>So as it turns out, there actually IS a built-in way to tell if an array is truly an array, and that is &lt;code&gt;Array.isArray()&lt;/code&gt;, introduced in ECMAScript 5 (December 2009). I found this while looking to see if there was a question asking about telling arrays from objects, to see if there was either a better solution than mine, or to add mine if there were none. So, if you're using a version of JavaScript that is earlier than ECMA 5, there's your polyfill. However, I strongly recommend against using my &lt;code&gt;is_array()&lt;/code&gt; function, as continuing to support old versions of JavaScript means continuing to support the old browsers that implement them, which means encouraging the use of insecure software and putting users at risk for malware. So please, use &lt;code&gt;Array.isArray()&lt;/code&gt;. Use &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;. Use the new features that get added to the language. &lt;em&gt;Don't&lt;/em&gt; use vendor prefixes. &lt;em&gt;Delete&lt;/em&gt; that IE polyfill crap from your website. Delete that XHTML &lt;code&gt;&amp;lt;!CDATA[[...&lt;/code&gt; crap, too--we moved to HTML5 back in 2014. The sooner everybody withdraws support for those old/esoteric browsers, the sooner the browser vendors will actually follow the web standard and embrace the new technology, and the sooner we can move on to a more secure web.</source>
          <target state="translated">–ö–∞–∫ –æ–∫–∞–∑–∞–ª–æ—Å—å, –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –µ—Å—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Å—Å–∏–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–∞—Å—Å–∏–≤–æ–º, –∏ —ç—Ç–æ &lt;code&gt;Array.isArray()&lt;/code&gt; , –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤ ECMAScript 5 (–¥–µ–∫–∞–±—Ä—å 2009 –≥.). –Ø –Ω–∞—à–µ–ª —ç—Ç–æ, –∫–æ–≥–¥–∞ —Å–º–æ—Ç—Ä–µ–ª, –Ω–µ—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ —Ç–æ–º, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–∞—Å—Å–∏–≤—ã –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –µ—Å—Ç—å –ª–∏ –ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ, —á–µ–º —É –º–µ–Ω—è, –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç. –¢–∞–∫ —á—Ç–æ, –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤–µ—Ä—Å–∏—é JavaScript, –±–æ–ª–µ–µ —Ä–∞–Ω–Ω—é—é, —á–µ–º ECMA 5, –µ—Å—Ç—å –≤–∞—à polyfill. –¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, —è –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ—é &lt;code&gt;is_array()&lt;/code&gt; , –ø–æ—Å–∫–æ–ª—å–∫—É –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ JavaScript –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Ö —Ä–µ–∞–ª–∏–∑—É—é—Ç, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ–æ—â—Ä–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏ –ø–æ–¥–≤–µ—Ä–≥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∏—Å–∫—É –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û. –ü–æ—ç—Ç–æ–º—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ &lt;code&gt;Array.isArray()&lt;/code&gt; . –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ &lt;code&gt;let&lt;/code&gt; –∏ &lt;code&gt;const&lt;/code&gt; . –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ —è–∑—ã–∫. &lt;em&gt;–ù–µ&lt;/em&gt; –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤. &lt;em&gt;–£–¥–∞–ª–∏—Ç–µ&lt;/em&gt; —ç—Ç–æ –¥–µ—Ä—å–º–æ IE polyfill —Å –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞. –£–¥–∞–ª–∏—Ç–µ —ç—Ç–æ—Ç XHTML &lt;code&gt;&amp;lt;!CDATA[[...&lt;/code&gt; –¥–µ—Ä—å–º–æ —Ç–æ–∂–µ] - –º—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ HTML5 –µ—â–µ –≤ 2014 –≥–æ–¥—É. –ß–µ–º —Ä–∞–Ω—å—à–µ –≤—Å–µ –æ—Ç–∫–∞–∂—É—Ç—Å—è –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —ç—Ç–∏—Ö —Å—Ç–∞—Ä—ã—Ö / —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤, —Ç–µ–º —Å–∫–æ—Ä–µ–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—É–¥—É—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –≤–µ–±-—Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –∏ –ø—Ä–∏–Ω—è—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏ —á–µ–º —Ä–∞–Ω—å—à–µ –º—ã —Å–º–æ–∂–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–µ—Ç–∏.</target>
        </trans-unit>
        <trans-unit id="c1074a68b7264ece395e8476f70ae784fc36b406" translate="yes" xml:space="preserve">
          <source>So, he sends you an email in anger:</source>
          <target state="translated">–ò—Ç–∞–∫,–æ–Ω –ø–æ—Å—ã–ª–∞–µ—Ç —Ç–µ–±–µ –ø–∏—Å—å–º–æ –≤ –≥–Ω–µ–≤–µ:</target>
        </trans-unit>
        <trans-unit id="1c63c8fdc7a32a45814f6f70f31838cecabdb16b" translate="yes" xml:space="preserve">
          <source>So, when deleting values from an object, always first consider whether you're dealing with object properties or whether you're dealing with array values, and choose the appropriate strategy based on that.</source>
          <target state="translated">–ü–æ—ç—Ç–æ–º—É,–ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –æ–±—ä–µ–∫—Ç–∞,–≤—Å–µ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥—É–º–∞–π—Ç–µ,–∏–º–µ–µ—Ç–µ –ª–∏ –≤—ã –¥–µ–ª–æ —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –º–∞—Å—Å–∏–≤–∞,–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é,–∏—Å—Ö–æ–¥—è –∏–∑ —ç—Ç–æ–≥–æ.</target>
        </trans-unit>
        <trans-unit id="da5db28dd16264310f46eacb87a0cb2b9ceef675" translate="yes" xml:space="preserve">
          <source>Sorry if this didn't add to your specific use case but I believe this to be a good design to adapt when managing objects and their properties.</source>
          <target state="translated">–ò–∑–≤–∏–Ω–∏—Ç–µ,–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–æ –∫ –≤–∞—à–µ–º—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–ª—É—á–∞—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è,–Ω–æ —è —Å—á–∏—Ç–∞—é,—á—Ç–æ —ç—Ç–æ —Ö–æ—Ä–æ—à–∏–π –¥–∏–∑–∞–π–Ω,—á—Ç–æ–±—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞–º–∏.</target>
        </trans-unit>
        <trans-unit id="ace92799b8ad9dc2af653b95d2a4f16910423d4b" translate="yes" xml:space="preserve">
          <source>Suppose you have an object that looks like this:</source>
          <target state="translated">–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º,—É –≤–∞—Å –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç,–∫–æ—Ç–æ—Ä—ã–π –≤—ã–≥–ª—è–¥–∏—Ç –≤–æ—Ç —Ç–∞–∫:</target>
        </trans-unit>
        <trans-unit id="c5229642bf5961f2b277471727e88e647035ac9e" translate="yes" xml:space="preserve">
          <source>Syntax-based string property omission</source>
          <target state="translated">–ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞</target>
        </trans-unit>
        <trans-unit id="07c468c127104c88b077c6e07b9d9ec7d4fdbf7d" translate="yes" xml:space="preserve">
          <source>THE LONG VERSION</source>
          <target state="translated">–£–î–õ–ò–ù–Å–ù–ù–ê–Ø –í–ï–†–°–ò–Ø</target>
        </trans-unit>
        <trans-unit id="11405ca028271229b8731c4ce6c20d04dc54cc92" translate="yes" xml:space="preserve">
          <source>THE SHORT VERSION</source>
          <target state="translated">–£–ö–û–†–û–ß–ï–ù–ù–´–ô –í–ê–†–ò–ê–ù–¢</target>
        </trans-unit>
        <trans-unit id="39fdec1194d94212b871a28b2aa04a73cd40fce1" translate="yes" xml:space="preserve">
          <source>Tests</source>
          <target state="translated">Tests</target>
        </trans-unit>
        <trans-unit id="748beb2ad7204d2997b5d2a12f2e0bc89bcc8e5e" translate="yes" xml:space="preserve">
          <source>That actually isn't what's happening, but it's easier to think of that way. According to MDN, here's what's actually happening:</source>
          <target state="translated">–ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ,—ç—Ç–æ –Ω–µ —Ç–æ,—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç,–Ω–æ –æ–± —ç—Ç–æ–º –ª–µ–≥—á–µ –¥—É–º–∞—Ç—å.–°–æ–≥–ª–∞—Å–Ω–æ MDN,–≤–æ—Ç —á—Ç–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:</target>
        </trans-unit>
        <trans-unit id="cf85fec62dde51f1637af10a625442c3baea4c48" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete&quot;&gt;delete operator&lt;/a&gt; is the best way to do so.</source>
          <target state="translated">–û–ø–µ—Ä–∞—Ç–æ—Ä &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete&quot;&gt;—É–¥–∞–ª–µ–Ω–∏—è&lt;/a&gt; - –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ.</target>
        </trans-unit>
        <trans-unit id="881ea24ac20b3a2b7bbbd8208c871ee412db982f" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;key remains on its place in the hashmap&lt;/strong&gt;, only the value is replaced with &lt;code&gt;undefined&lt;/code&gt;. Understand, that &lt;code&gt;for..in&lt;/code&gt; loop will still iterate over that key.</source>
          <target state="translated">&lt;strong&gt;–ö–ª—é—á –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ –≤ hashmap&lt;/strong&gt; , —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ &lt;code&gt;undefined&lt;/code&gt; . –ü–æ–π–º–∏—Ç–µ, —á—Ç–æ —Ü–∏–∫–ª &lt;code&gt;for..in&lt;/code&gt; –±—É–¥–µ—Ç –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á.</target>
        </trans-unit>
        <trans-unit id="edc38116420d64a21ebfee30ed9c7476267110df" translate="yes" xml:space="preserve">
          <source>The Solution: &lt;code&gt;Array.prototype.splice&lt;/code&gt;</source>
          <target state="translated">–†–µ—à–µ–Ω–∏–µ: &lt;code&gt;Array.prototype.splice&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="071cbdf7a24a78eb243d7c493b80aadba4657908" translate="yes" xml:space="preserve">
          <source>The actual answer to the question</source>
          <target state="translated">–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å</target>
        </trans-unit>
        <trans-unit id="c0ec14910cf4674ceea7f9ad991e964445d6c9ac" translate="yes" xml:space="preserve">
          <source>The answer would be to &lt;strong&gt;delete all the references you have in your code, pointed to that very object&lt;/strong&gt; and also &lt;strong&gt;not use &lt;code&gt;var&lt;/code&gt; statements to create new references to that object&lt;/strong&gt;. This last point regarding &lt;code&gt;var&lt;/code&gt; statements, is one of the most crucial issues that we are usually faced with, because using &lt;code&gt;var&lt;/code&gt; statements would prevent the created object from getting removed.</source>
          <target state="translated">–û—Ç–≤–µ—Ç –±—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –≤ —Ç–æ–º, —á—Ç–æ–±—ã &lt;strong&gt;—É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç,&lt;/strong&gt; –∞ —Ç–∞–∫–∂–µ &lt;strong&gt;–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã &lt;code&gt;var&lt;/code&gt; –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç&lt;/strong&gt; . –≠—Ç–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É–Ω–∫—Ç, –∫–∞—Å–∞—é—â–∏–π—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ &lt;code&gt;var&lt;/code&gt; , —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–æ–π –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º—ã –æ–±—ã—á–Ω–æ —Å—Ç–∞–ª–∫–∏–≤–∞–µ–º—Å—è, –ø–æ—Å–∫–æ–ª—å–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ &lt;code&gt;var&lt;/code&gt; –±—É–¥–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏—é —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.</target>
        </trans-unit>
        <trans-unit id="c25007fa1063a6b669074a068e8e0d9c200dbaad" translate="yes" xml:space="preserve">
          <source>The contrived and long-winded PDP-11 scenario</source>
          <target state="translated">–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –¥–ª–∏–Ω–Ω–æ–≤–æ–ª–æ—Å—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ù–î–ü-11.</target>
        </trans-unit>
        <trans-unit id="f621835acbbff87822c037f614ae8feebd84f7e5" translate="yes" xml:space="preserve">
          <source>The delete operator removes a given property from an object. On
  successful deletion, it will return true, else false will be returned.
  However, it is important to consider the following scenarios:</source>
          <target state="translated">–û–ø–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω–∏—è —É–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –∏–∑ –æ–±—ä–µ–∫—Ç–∞.–ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true,–≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ false.–û–¥–Ω–∞–∫–æ,–≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:</target>
        </trans-unit>
        <trans-unit id="88d438bbfeb05c4266f6e27b90dcb851c6f60ce6" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;delete&lt;/code&gt; and &lt;code&gt;deleteProperty&lt;/code&gt; is when using strict mode:</source>
          <target state="translated">–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É &lt;code&gt;delete&lt;/code&gt; –∏ &lt;code&gt;deleteProperty&lt;/code&gt; –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–æ–≥–æ–≥–æ —Ä–µ–∂–∏–º–∞:</target>
        </trans-unit>
        <trans-unit id="efccd6cd704a79d07bccddefc3adbae94e968c39" translate="yes" xml:space="preserve">
          <source>The following snippet gives another simple example:</source>
          <target state="translated">–°–ª–µ–¥—É—é—â–∏–π –æ—Ç—Ä—ã–≤–æ–∫ –¥–∞–µ—Ç –µ—â–µ –æ–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä:</target>
        </trans-unit>
        <trans-unit id="bf8a2a946389853c6d0799bf61400c9d604dd48d" translate="yes" xml:space="preserve">
          <source>The index specified by &lt;code&gt;end&lt;/code&gt; is simply excluded from the slice. The parenthesized indices indicate what gets sliced. Either way, the behavior is not intuitive and it's bound to cause its fair share of off-by-one errors, so you might find it useful to make a wrapper function to more closely emulate the behavior of &lt;code&gt;.splice()&lt;/code&gt;:</source>
          <target state="translated">–£–∫–∞–∑–∞–Ω–Ω—ã–π –≤ &lt;code&gt;end&lt;/code&gt; –∏–Ω–¥–µ–∫—Å –ø—Ä–æ—Å—Ç–æ –∏—Å–∫–ª—é—á–∞–µ—Ç—Å—è –∏–∑ —Å—Ä–µ–∑–∞. –ò–Ω–¥–µ–∫—Å—ã –≤ —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –≤—ã—Ä–µ–∑–∞–Ω–æ. –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–º, –∏ –æ–Ω–æ –Ω–µ–∏–∑–±–µ–∂–Ω–æ –≤—ã–∑–æ–≤–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é –¥–æ–ª—é –æ—à–∏–±–æ–∫ &amp;laquo;–æ–¥–∏–Ω –Ω–∞ –æ–¥–∏–Ω&amp;raquo;, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è –ø–æ–ª–µ–∑–Ω—ã–º —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é-–æ–±–µ—Ä—Ç–∫—É, —á—Ç–æ–±—ã –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ &lt;code&gt;.splice()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="367c08658a0eaac4d7f551272d9531077bdd6a38" translate="yes" xml:space="preserve">
          <source>The other important point here is to be careful about your other references to the same object. For instance, if you create a variable like:</source>
          <target state="translated">–î—Ä—É–≥–æ–π –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–¥–µ—Å—å –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º,—á—Ç–æ–±—ã –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º —Å –¥—Ä—É–≥–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π –æ–±—ä–µ–∫—Ç.–ù–∞–ø—Ä–∏–º–µ—Ä,–µ—Å–ª–∏ –≤—ã —Å–æ–∑–¥–∞–µ—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞:</target>
        </trans-unit>
        <trans-unit id="556ff37bb94e5cbb3dd116d5ddf709d4c4f7ed56" translate="yes" xml:space="preserve">
          <source>The programming ethos/patterns you and your team use. Do you favor functional approaches and mutation is verboten on your team, or do you employ wild west mutative object-oriented techniques?</source>
          <target state="translated">–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ—Å–ø–µ—Ç—Ç–µ—Ä–∏—è,–∫–æ—Ç–æ—Ä—É—é –≤—ã –∏ –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ.–í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∏ –º—É—Ç–∞—Ü–∏—é –≥–ª–∞–≥–æ–ª–æ–≤ –≤ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ,–∏–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–∏–∫–æ–≥–æ –∑–∞–ø–∞–¥–∞?</target>
        </trans-unit>
        <trans-unit id="6357292b24fba94284af6389041f255b8a00f04f" translate="yes" xml:space="preserve">
          <source>The range of object types you want to remove properties on and the type of property names you need to be able to omit (Strings only? Symbols? Weak references mapped from arbitrary objects? These have all been types of property pointers in JavaScript for years now)</source>
          <target state="translated">–î–∏–∞–ø–∞–∑–æ–Ω —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤,–Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞,–∏ —Ç–∏–ø—ã –∏–º–µ–Ω —Å–≤–æ–π—Å—Ç–≤,–∫–æ—Ç–æ—Ä—ã–µ –≤—ã –¥–æ–ª–∂–Ω—ã —É–º–µ—Ç—å –æ–ø—É—Å–∫–∞—Ç—å (–¢–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏? –°–∏–º–≤–æ–ª—ã? –°–ª–∞–±—ã–µ —Å—Å—ã–ª–∫–∏,–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–Ω—ã–µ –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤? –í—Å–µ —ç—Ç–æ –±—ã–ª–æ —É–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –Ω–∞ —Ç–∏–ø—ã —Å–≤–æ–π—Å—Ç–≤ –≤ JavaScript –≤ —Ç–µ—á–µ–Ω–∏–µ –º–Ω–æ–≥–∏—Ö –ª–µ—Ç).</target>
        </trans-unit>
        <trans-unit id="3fea2fb86e2276224dff32e33243b1e22287ed2d" translate="yes" xml:space="preserve">
          <source>The reason for writing this new &lt;code&gt;unset&lt;/code&gt; function, is to keep the index of all other variables in this hash_map. Look at the following example, and see how the index of &quot;test2&quot; did not change after removing a value from the hash_map.</source>
          <target state="translated">–ü—Ä–∏—á–∏–Ω–æ–π –Ω–∞–ø–∏—Å–∞–Ω–∏—è —ç—Ç–æ–π –Ω–æ–≤–æ–π &lt;code&gt;unset&lt;/code&gt; —Ñ—É–Ω–∫—Ü–∏–∏ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–º hash_map. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ –∏–Ω–¥–µ–∫—Å &amp;laquo;test2&amp;raquo; –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ hash_map.</target>
        </trans-unit>
        <trans-unit id="e16825f749b4e5fb7d1fecf43d4e6b653061e2e8" translate="yes" xml:space="preserve">
          <source>The result would be &lt;code&gt;false&lt;/code&gt;, which means that your delete statement haven't been executed as you expected. But if you had not created that variable before, and you only had &lt;code&gt;myOtherObject[&quot;regex&quot;]&lt;/code&gt; as your last existing reference, you could have done this just by removing it like:</source>
          <target state="translated">–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç &lt;code&gt;false&lt;/code&gt; , —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —Ç–∞–∫, –∫–∞–∫ –≤—ã –æ–∂–∏–¥–∞–ª–∏. –ù–æ –µ—Å–ª–∏ –≤—ã —Ä–∞–Ω–µ–µ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–∞—à–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Å—ã–ª–∫–∏ –±—ã–ª —Ç–æ–ª—å–∫–æ &lt;code&gt;myOtherObject[&quot;regex&quot;]&lt;/code&gt; , –≤—ã –º–æ–≥–ª–∏ –±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏–≤ –µ–µ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:</target>
        </trans-unit>
        <trans-unit id="f6481accf44872d4ef8745c055193c2829ccd3cb" translate="yes" xml:space="preserve">
          <source>The term you have used in your question title &lt;code&gt;Remove a property from a JavaScript object&lt;/code&gt;, can be interpreted in some different ways. The one is to remove it for whole the memory and the list of object keys or the other is just to remove it from your object. As it has been mentioned in some other answers, the &lt;code&gt;delete&lt;/code&gt; keyword is the main part. Let's say you have your object like:</source>
          <target state="translated">–¢–µ—Ä–º–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ &amp;laquo; &lt;code&gt;Remove a property from a JavaScript object&lt;/code&gt; , –º–æ–∂–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É. –û–¥–∏–Ω –∏–∑ –Ω–∏—Ö - —É–¥–∞–ª–∏—Ç—å –≤—Å—é –ø–∞–º—è—Ç—å –∏ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –æ–±—ä–µ–∫—Ç–∞, –∞ –¥—Ä—É–≥–æ–π - –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ –≤–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞. –ö–∞–∫ —É–∂–µ —É–ø–æ–º–∏–Ω–∞–ª–æ—Å—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä—É–≥–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö, –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ &lt;code&gt;delete&lt;/code&gt; —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç—å—é. –î–æ–ø—É—Å—Ç–∏–º, —É –≤–∞—Å –µ—Å—Ç—å –≤–∞—à –æ–±—ä–µ–∫—Ç, –∫–∞–∫:</target>
        </trans-unit>
        <trans-unit id="d7c42d645c208dfd4e3c38a50db94ab5a07bdf03" translate="yes" xml:space="preserve">
          <source>The version of ECMAScript you're targeting</source>
          <target state="translated">–í–µ—Ä—Å–∏—è ECMAScript,–Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –Ω–∞—Ü–µ–ª–µ–Ω—ã.</target>
        </trans-unit>
        <trans-unit id="2d17e745883099706ab5b904d19b87cebce1764f" translate="yes" xml:space="preserve">
          <source>Then even if you remove it from your object &lt;code&gt;myJSONObject&lt;/code&gt;, that specific object won't get deleted from the memory, since the &lt;code&gt;regex&lt;/code&gt; variable and &lt;code&gt;myOtherObject[&quot;regex&quot;]&lt;/code&gt; still have their values. Then how could we remove the object from the memory for sure?</source>
          <target state="translated">–¢–æ–≥–¥–∞ –¥–∞–∂–µ –µ—Å–ª–∏ –≤—ã —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ &lt;code&gt;myJSONObject&lt;/code&gt; , —ç—Ç–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏, –ø–æ—Å–∫–æ–ª—å–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è &lt;code&gt;regex&lt;/code&gt; –∏ &lt;code&gt;myOtherObject[&quot;regex&quot;]&lt;/code&gt; –≤—Å–µ –µ—â–µ –∏–º–µ—é—Ç —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è. –¢–æ–≥–¥–∞ –∫–∞–∫ –º—ã –º–æ–∂–µ–º —Ç–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç –∏–∑ –ø–∞–º—è—Ç–∏?</target>
        </trans-unit>
        <trans-unit id="9f315ff9ba259ec4af4aad477da9caf99c783595" translate="yes" xml:space="preserve">
          <source>Then your objects key using &lt;code&gt;Object.keys(myJSONObject)&lt;/code&gt; would be:</source>
          <target state="translated">–¢–æ–≥–¥–∞ –∫–ª—é—á –≤–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º &lt;code&gt;Object.keys(myJSONObject)&lt;/code&gt; –±—É–¥–µ—Ç:</target>
        </trans-unit>
        <trans-unit id="950ba1d1f6aad6e3258d15bc7f08a5e034f6a816" translate="yes" xml:space="preserve">
          <source>There are a lot of good answers here but I just want to chime in that when using delete to remove a property in JavaScript, it is often wise to first check if that property exists to prevent errors.</source>
          <target state="translated">–ó–¥–µ—Å—å –µ—Å—Ç—å –º–Ω–æ–≥–æ —Ö–æ—Ä–æ—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤,–Ω–æ —è –ø—Ä–æ—Å—Ç–æ —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å,—á—Ç–æ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞ –≤ JavaScript,—á–∞—Å—Ç–æ –±—ã–≤–∞–µ—Ç —Ä–∞–∑—É–º–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å,—Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ,—á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ—à–∏–±–∫–∏.</target>
        </trans-unit>
        <trans-unit id="57100a7adc73f2ac8fb1259dcb31d2cae8056822" translate="yes" xml:space="preserve">
          <source>There are few common ways to remove a property from an object.</source>
          <target state="translated">–°—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞.</target>
        </trans-unit>
        <trans-unit id="8604def9bd3e30573031d5be629fb2bb0c18ca39" translate="yes" xml:space="preserve">
          <source>There are many different options presented on this page, not because most of the options are wrong&amp;mdash;or because the answers are duplicates&amp;mdash;but because the appropriate technique depends on the situation you're in and the goals of the tasks you and/or you team are trying to fulfill. To answer you question unequivocally, one needs to know:</source>
          <target state="translated">–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –æ–ø—Ü–∏–π –Ω–µ –ø–æ—Ç–æ–º—É, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ–ø—Ü–∏–π –Ω–µ–≤–µ—Ä–Ω—ã - –∏–ª–∏ –ø–æ—Ç–æ–º—É —á—Ç–æ –æ—Ç–≤–µ—Ç—ã —è–≤–ª—è—é—Ç—Å—è –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏, –∞ –ø–æ—Ç–æ–º—É, —á—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, –∏ —Ü–µ–ª–µ–π –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∏ / –∏–ª–∏ –≤—ã –ö–æ–º–∞–Ω–¥–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å. –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ, –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å:</target>
        </trans-unit>
        <trans-unit id="5f1efa2f9fb405d638f74fe5349dbabb89e0514a" translate="yes" xml:space="preserve">
          <source>They are slow &amp;amp; memory inefficient. When accessing a specific index, instead of just getting the global type for the array, the browser instead has to get the type on a per-index basis whereby each index stores the additional metadata of its type.</source>
          <target state="translated">–û–Ω–∏ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∏ –ø–∞–º—è—Ç—å –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞. –ü—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –º–∞—Å—Å–∏–≤–∞, –±—Ä–∞—É–∑–µ—Ä –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–µ–∫—Å–∞, –ø—Ä–∏—á–µ–º –∫–∞–∂–¥—ã–π –∏–Ω–¥–µ–∫—Å —Ö—Ä–∞–Ω–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–≤–æ–µ–≥–æ —Ç–∏–ø–∞.</target>
        </trans-unit>
        <trans-unit id="afa3b2f30890db447e4cf00d9f2dcec7b332b01b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;ES6&lt;/code&gt; operator allows us to return a brand new object, excluding any properties, without mutating the existing object. The downside is that it has the worse performance out of the above and not suggested to be used when you need to remove many properties at a time.</source>
          <target state="translated">–≠—Ç–æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä &lt;code&gt;ES6&lt;/code&gt; –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–º –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç, –∏—Å–∫–ª—é—á–∞—è –ª—é–±—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞, –Ω–µ –∏–∑–º–µ–Ω—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç. –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º —è–≤–ª—è–µ—Ç—Å—è —Ç–æ, —á—Ç–æ –æ–Ω –∏–º–µ–µ—Ç —Ö—É–¥—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∏ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –∫–æ–≥–¥–∞ –≤–∞–º –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –º–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.</target>
        </trans-unit>
        <trans-unit id="9e7248bc6c7cf17aeb43a8906d8cc8e3b531512b" translate="yes" xml:space="preserve">
          <source>This alternative is not the correct answer to this question! But, if you use it with care, you can dramatically speed up some algorithms. If you are using &lt;code&gt;delete&lt;/code&gt; in loops and you have problems with performance, read the verbose explanation.</source>
          <target state="translated">–≠—Ç–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å! –ù–æ, –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —ç—Ç–æ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é, –≤—ã –º–æ–∂–µ—Ç–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã. –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ &lt;code&gt;delete&lt;/code&gt; –≤ —Ü–∏–∫–ª–∞—Ö –∏ —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, –ø—Ä–æ—á—Ç–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.</target>
        </trans-unit>
        <trans-unit id="d2696a11c056f55fc8c70ea4ff94e4f5922248e1" translate="yes" xml:space="preserve">
          <source>This category is for operating on object literals or object instances when you want to retain/continue to use the original reference and aren't using stateless functional principles in your code. An example piece of syntax in this category:</source>
          <target state="translated">–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏—Ç–µ—Ä–∞–ª–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤,–∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤ —Å–≤–æ–µ–º –∫–æ–¥–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã &quot;–±–µ–∑ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞&quot;.–ü—Ä–∏–º–µ—Ä —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</target>
        </trans-unit>
        <trans-unit id="1f8c0c20dd501470cb117b73c855e583ae2e0193" translate="yes" xml:space="preserve">
          <source>This category is for operating on object literals or object instances when you want to retain/continue to use the original reference while guarding against exceptions being thrown on unconfigurable properties:</source>
          <target state="translated">–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏—Ç–µ—Ä–∞–ª–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤,–∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é —Å—Å—ã–ª–∫—É,–∑–∞—â–∏—â–∞—è –ø—Ä–∏ —ç—Ç–æ–º,—á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –±—Ä–æ—Å–∞–ª–∏—Å—å –≤ –Ω–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:</target>
        </trans-unit>
        <trans-unit id="94bdb987c00caa2e598854f97ea3c6de4e30eedf" translate="yes" xml:space="preserve">
          <source>This category is for operating on plain object or array instances in newer ECMAScript flavors when a non-mutative approach is desired and you don't need to account for Symbol keys:</source>
          <target state="translated">–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ã—á–Ω—ã–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–≤ –≤ –±–æ–ª–µ–µ –Ω–æ–≤—ã—Ö ECMAScript-–∞–ø–ø–ª–∏–∫–∞—Ü–∏—è—Ö,–∫–æ–≥–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º –Ω–µ –º–Ω–∏–º—ã–π –ø–æ–¥—Ö–æ–¥ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—á–µ—Ç —Å–∏–º–≤–æ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π:</target>
        </trans-unit>
        <trans-unit id="aba34382b27aca74b69be04c741119ab744a49b9" translate="yes" xml:space="preserve">
          <source>This category is generally allows for greater functional flexibility, including accounting for Symbols &amp;amp; omitting more than one property in one statement:</source>
          <target state="translated">–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—ã—á–Ω–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–æ–ª—å—à—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –≥–∏–±–∫–æ—Å—Ç—å, –≤–∫–ª—é—á–∞—è —É—á–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–ø—É—Å–∫ –±–æ–ª–µ–µ —á–µ–º –æ–¥–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –æ–¥–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏:</target>
        </trans-unit>
        <trans-unit id="17ff7f9c0c298023ffef1288d23c2efc74ebdf5c" translate="yes" xml:space="preserve">
          <source>This category is the oldest, most straightforward &amp;amp; most widely supported category of property removal. It supports &lt;code&gt;Symbol&lt;/code&gt; &amp;amp; array indexes in addition to strings and works in every version of JavaScript except for the very first release. However, it's mutative which violates some programming principles and has performance implications. It also can result in uncaught exceptions when used on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete&quot;&gt;non-configurable properties in strict mode&lt;/a&gt;.</source>
          <target state="translated">–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π, –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∏ —à–∏—Ä–æ–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π —É–¥–∞–ª–µ–Ω–∏—è –∏–º—É—â–µ—Å—Ç–≤–∞. –û–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã &lt;code&gt;Symbol&lt;/code&gt; –∏ –º–∞—Å—Å–∏–≤–æ–≤ –≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —Å—Ç—Ä–æ–∫–∞–º –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–æ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏—è—Ö JavaScript, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–ø—É—Å–∫–∞. –û–¥–Ω–∞–∫–æ —ç—Ç–æ –º—É—Ç–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ä—É—à–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –≠—Ç–æ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–µ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã—Ö &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete&quot;&gt;—Å–≤–æ–π—Å—Ç–≤ –≤ —Å—Ç—Ä–æ–≥–æ–º —Ä–µ–∂–∏–º–µ&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4ad77472ac7767c23050851eada92d065c2bd943" translate="yes" xml:space="preserve">
          <source>This is in regard to this (now-removed) snippet:</source>
          <target state="translated">–≠—Ç–æ –≤ —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º (—Å–µ–π—á–∞—Å —É–¥–∞–ª–µ–Ω–Ω—ã–º)—Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–º:</target>
        </trans-unit>
        <trans-unit id="21292c660408d1ff92d4a1c2c4eafdd76c276e51" translate="yes" xml:space="preserve">
          <source>This post is very old and I find it very helpful so I decided to share the unset function I wrote in case someone else see this post and think why it's not so simple as it in PHP unset function.</source>
          <target state="translated">–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—á–µ–Ω—å —Å—Ç–∞—Ä–æ–µ –∏ —è –Ω–∞—Ö–æ–∂—É –µ–≥–æ –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω—ã–º,–ø–æ—ç—Ç–æ–º—É —è —Ä–µ—à–∏–ª –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π unset,–∫–æ—Ç–æ—Ä—É—é —è –Ω–∞–ø–∏—Å–∞–ª,–Ω–∞ —Ç–æ—Ç —Å–ª—É—á–∞–π,–µ—Å–ª–∏ –∫—Ç–æ-–Ω–∏–±—É–¥—å —É–≤–∏–¥–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–¥—É–º–∞–µ—Ç,–ø–æ—á–µ–º—É –æ–Ω–æ –Ω–µ —Ç–∞–∫–æ–µ –ø—Ä–æ—Å—Ç–æ–µ,–∫–∞–∫ –≤ PHP unset function.</target>
        </trans-unit>
        <trans-unit id="9603916ceb02f62ecad35613c65fb5ceed83b60d" translate="yes" xml:space="preserve">
          <source>This works in Firefox and Internet&amp;nbsp;Explorer, and I think it works in all others.</source>
          <target state="translated">–≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Firefox –∏ Internet Explorer, –∏ —è –¥—É–º–∞—é, —á—Ç–æ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.</target>
        </trans-unit>
        <trans-unit id="c685cc94e2b05416a2b9215116753bb12c7af729" translate="yes" xml:space="preserve">
          <source>To complete @Koen answer in this thread, in case you want to remove dynamic variable using the spread syntax, you can do it like so:</source>
          <target state="translated">–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–≤–µ—Ç @Koen –≤ —ç—Ç–æ–º –ø–æ—Ç–æ–∫–µ,–≤ —Å–ª—É—á–∞–µ,–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é,–∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å–ø—Ä–µ–¥–∞,–≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Ç–∞–∫:</target>
        </trans-unit>
        <trans-unit id="a792292997434d58f8b1d7da4af78863ac5e4684" translate="yes" xml:space="preserve">
          <source>To get more info on &lt;code&gt;Object.seal&lt;/code&gt;: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal&quot;&gt;Object.seal()&lt;/a&gt;</source>
          <target state="translated">–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ &lt;code&gt;Object.seal&lt;/code&gt; : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal&quot;&gt;Object.seal ()&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="96589c0ac9acf3a6b58f6928336639e582088ee3" translate="yes" xml:space="preserve">
          <source>To reassign to the same variable, use a &lt;code&gt;let&lt;/code&gt;:</source>
          <target state="translated">–ß—Ç–æ–±—ã –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –æ–¥–Ω—É –∏ —Ç—É –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ &lt;code&gt;let&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="21af806df3feb60911002a77c4380b2b484f7bbf" translate="yes" xml:space="preserve">
          <source>To remove any property, say &lt;code&gt;key1&lt;/code&gt;, use the &lt;code&gt;delete&lt;/code&gt; keyword like this:</source>
          <target state="translated">–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ª—é–±–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ, —Å–∫–∞–∂–µ–º, &lt;code&gt;key1&lt;/code&gt; , –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ &lt;code&gt;delete&lt;/code&gt; , –Ω–∞–ø—Ä–∏–º–µ—Ä:</target>
        </trans-unit>
        <trans-unit id="fa15c129befde7656ac754122a25210685ef2188" translate="yes" xml:space="preserve">
          <source>To summarize, differences are all about ways of determining the property existence, and about &lt;code&gt;for..in&lt;/code&gt; loop.</source>
          <target state="translated">–ü–æ–¥–≤–æ–¥—è –∏—Ç–æ–≥, –º–æ–∂–Ω–æ &lt;code&gt;for..in&lt;/code&gt; , —á—Ç–æ —Ä–∞–∑–ª–∏—á–∏—è –∑–∞–∫–ª—é—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Å–ø–æ—Å–æ–±–∞—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –≤ —Ü–∏–∫–ª–µ for..in .</target>
        </trans-unit>
        <trans-unit id="87501fb0e92ec552bdf306c07f48852286e9c8c8" translate="yes" xml:space="preserve">
          <source>To whoever needs it...</source>
          <target state="translated">–ö—Ç–æ –±—ã –Ω–∏ –Ω—É–∂–¥–∞–ª—Å—è –≤ —ç—Ç–æ–º...</target>
        </trans-unit>
        <trans-unit id="b7ff74710b25d787ff3d518b1667a655a5936c78" translate="yes" xml:space="preserve">
          <source>Try the following method. Assign the &lt;code&gt;Object&lt;/code&gt; property value to &lt;code&gt;undefined&lt;/code&gt;. Then &lt;code&gt;stringify&lt;/code&gt; the object and &lt;code&gt;parse&lt;/code&gt;.</source>
          <target state="translated">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Ç–æ–¥. –ü—Ä–∏—Å–≤–æ–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ &lt;code&gt;Object&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt; . –ó–∞—Ç–µ–º &lt;code&gt;stringify&lt;/code&gt; –æ–±—ä–µ–∫—Ç –∏ &lt;code&gt;parse&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3d82a9f15156c36519fc72f9af221c32d7422e29" translate="yes" xml:space="preserve">
          <source>Try this</source>
          <target state="translated">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–æ</target>
        </trans-unit>
        <trans-unit id="828f97e6c91f157ecd45fc8183a07ca7b4e95e6f" translate="yes" xml:space="preserve">
          <source>Update regarding &lt;code&gt;is_array()&lt;/code&gt;</source>
          <target state="translated">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ &lt;code&gt;is_array()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d45aa1f9d8100f951a216d7ce715ec8d99477eb3" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;http://ramdajs.com/docs/#dissoc&quot;&gt;ramda#dissoc&lt;/a&gt; you will get a new object without the attribute &lt;code&gt;regex&lt;/code&gt;:</source>
          <target state="translated">–ò—Å–ø–æ–ª—å–∑—É—è &lt;a href=&quot;http://ramdajs.com/docs/#dissoc&quot;&gt;ramda # disococ,&lt;/a&gt; –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ &lt;code&gt;regex&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="930151a2e26bf074e4b81d244de5799b750be707" translate="yes" xml:space="preserve">
          <source>Using &lt;strong&gt;delete&lt;/strong&gt; method is the best way to do that, as per MDN description, the delete operator removes a property from an object. So you can simply write:</source>
          <target state="translated">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ &lt;strong&gt;—É–¥–∞–ª–µ–Ω–∏—è&lt;/strong&gt; - –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ, —Å–æ–≥–ª–∞—Å–Ω–æ –æ–ø–∏—Å–∞–Ω–∏—é MDN, –æ–ø–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω–∏—è —É–¥–∞–ª—è–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ –∏–∑ –æ–±—ä–µ–∫—Ç–∞. –¢–∞–∫ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å:</target>
        </trans-unit>
        <trans-unit id="855d634ee489e4e0a2c811671f665628a0a0df6f" translate="yes" xml:space="preserve">
          <source>Using ES6:</source>
          <target state="translated">–ò—Å–ø–æ–ª—å–∑—É—è ES6:</target>
        </trans-unit>
        <trans-unit id="9fb406e463a70799e2a3db3cb0956dde6058516c" translate="yes" xml:space="preserve">
          <source>Using this method, not all &lt;a href=&quot;https://stackoverflow.com/questions/1894792/determining-if-a-javascript-object-has-a-given-property&quot;&gt;ways of determining property existence&lt;/a&gt; will work as expected.</source>
          <target state="translated">–ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ—Ç –º–µ—Ç–æ–¥, –Ω–µ –≤—Å–µ &lt;a href=&quot;https://stackoverflow.com/questions/1894792/determining-if-a-javascript-object-has-a-given-property&quot;&gt;—Å–ø–æ—Å–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞&lt;/a&gt; –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å.</target>
        </trans-unit>
        <trans-unit id="7d56ccd01dc2c25715aa91cc5c3b3239162d1db4" translate="yes" xml:space="preserve">
          <source>What follows is a contrived scenario that gets pretty long-winded, so you can skip to the section, &lt;strong&gt;The Solution&lt;/strong&gt;, if you want. The only reason I leave this section it is that I think some people probably think it's funny, and I don't want to be &quot;that guy&quot; who posts a &quot;funny&quot; answer and then deletes all the &quot;funny&quot; from it later on.</source>
          <target state="translated">–î–∞–ª–µ–µ —Å–ª–µ–¥—É–µ—Ç –¥–æ–≤–æ–ª—å–Ω–æ —Å–ª–æ–∂–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π, –ø–æ—ç—Ç–æ–º—É –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–¥–µ–ª—É &lt;strong&gt;&amp;laquo;–†–µ—à–µ–Ω–∏–µ&amp;raquo;&lt;/strong&gt; , –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ. –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —è –ø–æ–∫–∏–¥–∞—é —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª, –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ —è –¥—É–º–∞—é, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ª—é–¥–∏, –≤–µ—Ä–æ—è—Ç–Ω–æ, —Å—á–∏—Ç–∞—é—Ç —ç—Ç–æ —Å–º–µ—à–Ω—ã–º, –∏ —è –Ω–µ —Ö–æ—á—É –±—ã—Ç—å &amp;laquo;—Ç–µ–º –ø–∞—Ä–Ω–µ–º&amp;raquo;, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç &amp;laquo;—Å–º–µ—à–Ω–æ–π&amp;raquo; –æ—Ç–≤–µ—Ç, –∞ –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ—Ç –∏–∑ –Ω–µ–≥–æ –≤—Å–µ &amp;laquo;—Å–º–µ—à–Ω—ã–µ&amp;raquo; ,</target>
        </trans-unit>
        <trans-unit id="e8a0f3d5fef79ddff6c740f20faf1841e9c8a913" translate="yes" xml:space="preserve">
          <source>What is the best way to remove the property &lt;code&gt;regex&lt;/code&gt; to end up with new &lt;code&gt;myObject&lt;/code&gt; as follows?</source>
          <target state="translated">–ö–∞–∫–æ–≤ –Ω–∞–∏–ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ &lt;code&gt;regex&lt;/code&gt; –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ &lt;code&gt;myObject&lt;/code&gt; —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º?</target>
        </trans-unit>
        <trans-unit id="269ad8f4ba0c959d755966ae84263f7c06ef0a98" translate="yes" xml:space="preserve">
          <source>When should one use &lt;code&gt;delete&lt;/code&gt; and when set value to &lt;code&gt;undefined&lt;/code&gt; ?</source>
          <target state="translated">–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å &lt;code&gt;delete&lt;/code&gt; –∏ –∫–æ–≥–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ &lt;code&gt;undefined&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="f73054e5169db0bc5c2ed5932270c4a709d901aa" translate="yes" xml:space="preserve">
          <source>When using a Symbol, wait, why are you using a Symbol?!?! Symbols are bad  juju for performance. Everything programmed to use Symbols can be reprogrammed to not use Symbols, resulting in a faster code without Symbols. Symbols are really just super inefficient meta-sugar.</source>
          <target state="translated">–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –°–∏–º–≤–æ–ª,–ø–æ–¥–æ–∂–¥–∏,–ø–æ—á–µ–º—É —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –°–∏–º–≤–æ–ª?!?! –°–∏–º–≤–æ–ª—ã-—ç—Ç–æ –ø–ª–æ—Ö–æ–π –¥–∂—É-–¥–∂—É –¥–ª—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è.–í—Å–µ,—á—Ç–æ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤,–º–æ–∂–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å,—á—Ç–æ–±—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã,–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —á–µ–≥–æ –∫–æ–¥ –±—É–¥–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤.–°–∏–º–≤–æ–ª—ã –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä-–Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–∞-—Å–∞—Ö–∞—Ä–∞.</target>
        </trans-unit>
        <trans-unit id="602ae3083b5ceb94cfa5bb3b6f0e1f19f1f16418" translate="yes" xml:space="preserve">
          <source>When using an array/variable typed to the boolean primitive, use either &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; as the empty value. While avoiding unnecessary polymorphism is good, rewriting all your code to explicitly forbid it will likely actually result in a decrease in performance. Use common judgement!</source>
          <target state="translated">–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–∞—Å—Å–∏–≤–∞ / –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫ –ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –ø—Ä–∏–º–∏—Ç–∏–≤—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏–±–æ &lt;code&gt;false&lt;/code&gt; , –ª–∏–±–æ &lt;code&gt;undefined&lt;/code&gt; –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è. –•–æ—Ç—è –∏–∑–±–µ–≥–∞—Ç—å –Ω–µ–Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞ - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ –∫–æ–¥–∞ —Å —è–≤–Ω—ã–º –∑–∞–ø—Ä–µ—Ç–æ–º, –≤–µ—Ä–æ—è—Ç–Ω–æ, –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —Å–Ω–∏–∂–µ–Ω–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–¥—Ä–∞–≤—ã–π —Å–º—ã—Å–ª!</target>
        </trans-unit>
        <trans-unit id="97e2c329b633d1758a70203709d67ea5a41bbc86" translate="yes" xml:space="preserve">
          <source>When using an array/variable typed to the number primitive, use &lt;code&gt;0&lt;/code&gt; as the empty value. Note that internally, there are two types of numbers: fast integers (2147483647 to -2147483648 inclusive) and slow floating point doubles (anything other than that including &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;Infinity&lt;/code&gt;). When an integer is demoted to a double, it cannot be promoted back to an integer.</source>
          <target state="translated">–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–∞—Å—Å–∏–≤–∞ / –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫ —á–∏—Å–ª–æ–≤–æ–º—É –ø—Ä–∏–º–∏—Ç–∏–≤—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ &lt;code&gt;0&lt;/code&gt; –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ –µ—Å—Ç—å –¥–≤–∞ —Ç–∏–ø–∞ —á–∏—Å–µ–ª: –±—ã—Å—Ç—Ä—ã–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ (–æ—Ç 2147483647 –¥–æ -2147483648 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) –∏ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–≤–æ–π–Ω—ã–µ —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π (—á—Ç–æ —É–≥–æ–¥–Ω–æ, –∫—Ä–æ–º–µ &lt;code&gt;NaN&lt;/code&gt; –∏ &lt;code&gt;Infinity&lt;/code&gt; ). –ö–æ–≥–¥–∞ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ø–æ–Ω–∏–∂–∞–µ—Ç—Å—è –¥–æ –¥–≤–æ–π–Ω–æ–≥–æ, –æ–Ω–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.</target>
        </trans-unit>
        <trans-unit id="363e06ebcbb46e5d020be755b34062c111648564" translate="yes" xml:space="preserve">
          <source>When using an array/variable typed to the string primitive, use &lt;code&gt;&quot;&quot;&lt;/code&gt; as the empty value.</source>
          <target state="translated">–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–∞—Å—Å–∏–≤–∞ / –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–∏–º–∏—Ç–∏–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ &lt;code&gt;&quot;&quot;&lt;/code&gt; –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.</target>
        </trans-unit>
        <trans-unit id="2daf2d7377c143fd1982ce05f553ab2ba4bd19a7" translate="yes" xml:space="preserve">
          <source>When using anything else, use &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —á–µ–≥–æ-–ª–∏–±–æ –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="99129be375514e4d040c762996086e2002e66f2e" translate="yes" xml:space="preserve">
          <source>Which is a terrible justification for getting rid of the &lt;code&gt;null&lt;/code&gt;s--&lt;code&gt;null&lt;/code&gt; is only dangerous if used improperly, and it has nothing to do with &quot;precision&quot;. The real reason you shouldn't &lt;code&gt;delete&lt;/code&gt; from an array is that leaving garbage-filled and messy data structures around is sloppy and bug-prone.</source>
          <target state="translated">–ß—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —É–∂–∞—Å–Ω—ã–º –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–µ–º –¥–ª—è –∏–∑–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç &lt;code&gt;null&lt;/code&gt; s - &lt;code&gt;null&lt;/code&gt; –æ–ø–∞—Å–Ω–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏ –æ–Ω–æ –Ω–µ –∏–º–µ–µ—Ç –Ω–∏—á–µ–≥–æ –æ–±—â–µ–≥–æ —Å &amp;laquo;—Ç–æ—á–Ω–æ—Å—Ç—å—é&amp;raquo;. –ò—Å—Ç–∏–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –Ω–µ –¥–æ–ª–∂–Ω—ã &lt;code&gt;delete&lt;/code&gt; –∏–∑ –º–∞—Å—Å–∏–≤–∞, –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º—É—Å–æ—Ä–æ–º –∏ –≥—Ä—è–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö –≤–æ–∫—Ä—É–≥ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–±—Ä–µ–∂–Ω—ã–º –∏ –ø–æ–¥–≤–µ—Ä–∂–µ–Ω–Ω—ã–º –æ—à–∏–±–∫–∞–º.</target>
        </trans-unit>
        <trans-unit id="1f5947457b95655f5329f1cfd08d1b56c64dd6e7" translate="yes" xml:space="preserve">
          <source>Which means in this case you won't be able to remove that object because you have created the &lt;code&gt;regex&lt;/code&gt; variable via a &lt;code&gt;var&lt;/code&gt; statement, and if you do:</source>
          <target state="translated">–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã —Å–æ–∑–¥–∞–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é &lt;code&gt;regex&lt;/code&gt; —Å –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ &lt;code&gt;var&lt;/code&gt; , –∏ –µ—Å–ª–∏ –≤—ã —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç–µ:</target>
        </trans-unit>
        <trans-unit id="4f17f120087f0ca40e417b064249125802d82ec5" translate="yes" xml:space="preserve">
          <source>While using &lt;code&gt;obj[prop] = undefined&lt;/code&gt; is faster than doing &lt;code&gt;delete obj[prop]&lt;/code&gt;, another important consideration is that &lt;code&gt;obj[prop] = undefined&lt;/code&gt; may not always be appropriate. &lt;code&gt;delete obj[prop]&lt;/code&gt; removes &lt;code&gt;prop&lt;/code&gt; from &lt;code&gt;obj&lt;/code&gt; and erases it from memory whereas &lt;code&gt;obj[prop] = undefined&lt;/code&gt; simply sets the value of &lt;code&gt;prop&lt;/code&gt; to &lt;code&gt;undefined&lt;/code&gt; which leaves &lt;code&gt;prop&lt;/code&gt; still in memory. Therefore, in circumstances where there are many keys being created and deleted, using &lt;code&gt;obj[prop] = undefined&lt;/code&gt; can force expensive memory reconciliation (causing the page to freeze up) and potentially an out-of-memory error. Examine the following code.</source>
          <target state="translated">–•–æ—Ç—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ &lt;code&gt;obj[prop] = undefined&lt;/code&gt; –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º &lt;code&gt;delete obj[prop]&lt;/code&gt; , –µ—â–µ –æ–¥–Ω–æ –≤–∞–∂–Ω–æ–µ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ &lt;code&gt;obj[prop] = undefined&lt;/code&gt; –Ω–µ –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–º. &lt;code&gt;delete obj[prop]&lt;/code&gt; —É–¥–∞–ª—è–µ—Ç &lt;code&gt;prop&lt;/code&gt; –∏–∑ &lt;code&gt;obj&lt;/code&gt; –∏ —Å—Ç–∏—Ä–∞–µ—Ç –µ–≥–æ –∏–∑ –ø–∞–º—è—Ç–∏, —Ç–æ–≥–¥–∞ –∫–∞–∫ &lt;code&gt;obj[prop] = undefined&lt;/code&gt; –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ &lt;code&gt;prop&lt;/code&gt; –≤ &lt;code&gt;undefined&lt;/code&gt; , —á—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ—Ç &lt;code&gt;prop&lt;/code&gt; –≤—Å–µ –µ—â–µ –≤ –ø–∞–º—è—Ç–∏. –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –≤ —Å–∏—Ç—É–∞—Ü–∏—è—Ö, –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏ —É–¥–∞–ª—è–µ—Ç—Å—è –º–Ω–æ–≥–æ –∫–ª—é—á–µ–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ &lt;code&gt;obj[prop] = undefined&lt;/code&gt; –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–µ–º—É —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é –ø–∞–º—è—Ç–∏ (–≤—ã–∑—ã–≤–∞—è –∑–∞–≤–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã) –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –∫ –æ—à–∏–±–∫–µ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –ø–∞–º—è—Ç–∏. –ò–∑—É—á–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥.</target>
        </trans-unit>
        <trans-unit id="9fc668854fffc36979144c2d4415e9f9721712c0" translate="yes" xml:space="preserve">
          <source>While you technically can use &lt;code&gt;delete&lt;/code&gt; for an array, using it would result in getting incorrect results when calling for example &lt;code&gt;Hogwarts.staff.length&lt;/code&gt; later on. In other words, &lt;code&gt;delete&lt;/code&gt; would remove the element, but it wouldn't update the value of &lt;code&gt;length&lt;/code&gt; property. Using &lt;code&gt;delete&lt;/code&gt; would also mess up your indexing.</source>
          <target state="translated">–•–æ—Ç—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å &lt;code&gt;delete&lt;/code&gt; –¥–ª—è –º–∞—Å—Å–∏–≤–∞, –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–∏ –≤—ã–∑–æ–≤–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, &lt;code&gt;Hogwarts.staff.length&lt;/code&gt; –ø–æ–∑–∂–µ. –î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, &lt;code&gt;delete&lt;/code&gt; —É–¥–∞–ª–∏—Ç —ç–ª–µ–º–µ–Ω—Ç, –Ω–æ –Ω–µ –æ–±–Ω–æ–≤–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ &lt;code&gt;length&lt;/code&gt; . –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ &lt;code&gt;delete&lt;/code&gt; —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ—Ä—Ç–∏—Ç—å –≤–∞—à—É –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é.</target>
        </trans-unit>
        <trans-unit id="4be2ecd11ba0e212cafbe9f3ed4567f70ea3cc57" translate="yes" xml:space="preserve">
          <source>Yeah, that's definitely not what you wanted.</source>
          <target state="translated">–î–∞,—ç—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –Ω–µ —Ç–æ,—á–µ–≥–æ —Ç—ã —Ö–æ—Ç–µ–ª.</target>
        </trans-unit>
        <trans-unit id="02c5f4541ba087fe996da9eb1271ebfb81156d83" translate="yes" xml:space="preserve">
          <source>You can also use other functions to achieve the same effect - omit, pick, ...</source>
          <target state="translated">–î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–æ–≥–æ –∂–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–ø—É—Å–∫–∞—Ç—å,–≤—ã–±–∏—Ä–∞—Ç—å,...</target>
        </trans-unit>
        <trans-unit id="95e9a3221d0ebd0cc77f374d7ddfa95d905aef6a" translate="yes" xml:space="preserve">
          <source>You can delete that specific key from your object keys like:</source>
          <target state="translated">–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –æ–±—ä–µ–∫—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π,–Ω–∞–ø—Ä–∏–º–µ—Ä:</target>
        </trans-unit>
        <trans-unit id="df5ae996f80ec18df6459baf979a058b543794dd" translate="yes" xml:space="preserve">
          <source>You can see it in action in the Babel try-out editor.</source>
          <target state="translated">–í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ –≤ –¥–µ–π—Å—Ç–≤–∏–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –í–∞–≤–∏–ª–æ–Ω—Å–∫–æ–π –ø—Ä–æ–±—ã.</target>
        </trans-unit>
        <trans-unit id="ba4ef71e846efa414e359524a525c5bda890d6bb" translate="yes" xml:space="preserve">
          <source>You can simply delete any property of an object using the &lt;code&gt;delete&lt;/code&gt; keyword.</source>
          <target state="translated">–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å –ª—é–±–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ &lt;code&gt;delete&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6902cdb7c6341debc4ec1b8c5eaf6794e483c684" translate="yes" xml:space="preserve">
          <source>You can use ES6 destructuring with rest operator.</source>
          <target state="translated">–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ES6-–¥–µ—Å—Ç—Ä—É–∫—Ü–∏—é —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º rest.</target>
        </trans-unit>
        <trans-unit id="121a5978b1bee631af70ab1aaec00b53de7645b2" translate="yes" xml:space="preserve">
          <source>global scope) can be deleted with delete.</source>
          <target state="translated">–≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞)–º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è.</target>
        </trans-unit>
        <trans-unit id="5be9ceecc2f03bc42e4d234aec808162f9c2f9d1" translate="yes" xml:space="preserve">
          <source>the result would be:</source>
          <target state="translated">—Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª –±—ã:</target>
        </trans-unit>
        <trans-unit id="cc81a06a417041080d93a2378641c20ac0ef4865" translate="yes" xml:space="preserve">
          <source>which is equivalent to:</source>
          <target state="translated">—á—Ç–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ:</target>
        </trans-unit>
        <trans-unit id="b9a0331930f5ae83ac7b458124a7b5021f44ea5d" translate="yes" xml:space="preserve">
          <source>will behave equivalently for both methods.</source>
          <target state="translated">–±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ —Å–µ–±—è —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ –¥–ª—è –æ–±–æ–∏—Ö –º–µ—Ç–æ–¥–æ–≤.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
