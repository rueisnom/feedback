<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/208105">
    <body>
      <group id="208105">
        <trans-unit id="d0c785d16c2347fee547f3127b424f77909312a7" translate="yes" xml:space="preserve">
          <source>(Destructuring + Spread operator)</source>
          <target state="translated">(Operador de DesestructuraciÃ³n+Spread)</target>
        </trans-unit>
        <trans-unit id="63d63c34165213cae85c0283076b58a13c886dbf" translate="yes" xml:space="preserve">
          <source>(ES6)</source>
          <target state="translated">(ES6)</target>
        </trans-unit>
        <trans-unit id="7d50cf7543cd430338fe6fd7172b5d7ec7565f89" translate="yes" xml:space="preserve">
          <source>* &lt;em&gt;&lt;code&gt;foo&lt;/code&gt; will be a new variable with the value of &lt;code&gt;a&lt;/code&gt; (which is 1).&lt;/em&gt;</source>
          <target state="translated">* &lt;em&gt; &lt;code&gt;foo&lt;/code&gt; ser&amp;aacute; una nueva variable con el valor de &lt;code&gt;a&lt;/code&gt; (que es 1).&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b8aa44c32c47930ef0f4bc07bf1b584a5b6b0e2f" translate="yes" xml:space="preserve">
          <source>...It's stupid, I know.</source>
          <target state="translated">...Es estÃºpido,lo sÃ©.</target>
        </trans-unit>
        <trans-unit id="ff34d7bfb44f74504dbcecb1c791e02877f620e3" translate="yes" xml:space="preserve">
          <source>1.With explicit prop key:</source>
          <target state="translated">1.Con clave de apoyo explÃ­cita:</target>
        </trans-unit>
        <trans-unit id="145f4a070da96e31a48d8d444babf929a09a782a" translate="yes" xml:space="preserve">
          <source>2.With variable prop key:</source>
          <target state="translated">2.Con llave de apoyo variable:</target>
        </trans-unit>
        <trans-unit id="75c350f4599bd395c8e57950299bcd4efdaca57e" translate="yes" xml:space="preserve">
          <source>3.Cool arrow function ðŸ˜Ž:</source>
          <target state="translated">3.FunciÃ³n de flecha frÃ­a ðŸ˜Ž:</target>
        </trans-unit>
        <trans-unit id="b31d7d6cbd9fc3e49f4feaeef410e7cee592b5fa" translate="yes" xml:space="preserve">
          <source>4. For multiple properties</source>
          <target state="translated">4.Para mÃºltiples propiedades</target>
        </trans-unit>
        <trans-unit id="cecf2bde461c486918fed98467ea58414d0dd173" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze&quot;&gt;Object.freeze()&lt;/a&gt; makes all properties of object not configurable (besides other things). &lt;code&gt;deleteProperty&lt;/code&gt; function (as well as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete&quot;&gt;delete operator&lt;/a&gt;) returns &lt;code&gt;false&lt;/code&gt; when tries to delete any of it's properties. If property is configurable it returns &lt;code&gt;true&lt;/code&gt;, even if property does not exist.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze&quot;&gt;Object.freeze ()&lt;/a&gt; hace que todas las propiedades del objeto no sean configurables (adem&amp;aacute;s de otras cosas). &lt;code&gt;deleteProperty&lt;/code&gt; funci&amp;oacute;n deleteProperty (as&amp;iacute; como el &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete&quot;&gt;operador delete&lt;/a&gt; ) devuelve &lt;code&gt;false&lt;/code&gt; cuando intenta eliminar cualquiera de sus propiedades. Si la propiedad es configurable, devuelve &lt;code&gt;true&lt;/code&gt; , incluso si la propiedad no existe.</target>
        </trans-unit>
        <trans-unit id="d2f5341f96365af83c99b7c7d47dba6c4b1a96cb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;Spread Syntax&lt;/a&gt; (ES6)</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;Sintaxis extendida&lt;/a&gt; (ES6)</target>
        </trans-unit>
        <trans-unit id="e4d9e924d09e0b750a05547c2f0bf5fa2c195878" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.slice()&lt;/code&gt; is non-destructive and returns a new array containing the indicated indices from &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt;. If &lt;code&gt;end&lt;/code&gt; is left unspecified, the behavior is the same as &lt;code&gt;.splice()&lt;/code&gt; (&lt;code&gt;end = array.length&lt;/code&gt;). The behavior is a bit tricky since, for some reason, &lt;code&gt;end&lt;/code&gt; indexes from 1 instead of 0. I don't know why it does this, but that's how it is. Also, if &lt;code&gt;end &amp;lt;= start&lt;/code&gt;, the result is an empty array.</source>
          <target state="translated">&lt;code&gt;.slice()&lt;/code&gt; no es destructivo y devuelve una nueva matriz que contiene los &amp;iacute;ndices indicados de &lt;code&gt;start&lt;/code&gt; a &lt;code&gt;end&lt;/code&gt; . Si &lt;code&gt;end&lt;/code&gt; no se especifica, el comportamiento es el mismo que &lt;code&gt;.splice()&lt;/code&gt; ( &lt;code&gt;end = array.length&lt;/code&gt; ). El comportamiento es un poco complicado ya que, por alguna raz&amp;oacute;n, &lt;code&gt;end&lt;/code&gt; &amp;iacute;ndices desde 1 en lugar de 0. No s&amp;eacute; por qu&amp;eacute; hace esto, pero as&amp;iacute; es como es. Adem&amp;aacute;s, si &lt;code&gt;end &amp;lt;= start&lt;/code&gt; , el resultado es una matriz vac&amp;iacute;a.</target>
        </trans-unit>
        <trans-unit id="da2a0c1e98a822064cc6b913222774a91ac62044" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.splice()&lt;/code&gt; mutates the array, and returns the removed indices. The array is sliced starting from the index, &lt;code&gt;start&lt;/code&gt;, and &lt;code&gt;n&lt;/code&gt; elements are sliced out. If n is unspecified, the entire array after &lt;code&gt;start&lt;/code&gt; is sliced out (&lt;code&gt;n = array.length - start&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;.splice()&lt;/code&gt; muta la matriz y devuelve los &amp;iacute;ndices eliminados. La matriz se divide a partir del &amp;iacute;ndice, &lt;code&gt;start&lt;/code&gt; y &lt;code&gt;n&lt;/code&gt; elementos se dividen. Si n no se especifica, se &lt;code&gt;n = array.length - start&lt;/code&gt; toda la matriz despu&amp;eacute;s del &lt;code&gt;start&lt;/code&gt; ( n = array.length - start ).</target>
        </trans-unit>
        <trans-unit id="578e0d997316ced94b2f7c292e4269507a0730b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Delete Operator&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Eliminar operador&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="10a7b7e3a95023fb9f5d4f97bbeb1e856756bc60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;EXTENDED ANSWER&lt;/em&gt;&lt;/strong&gt; ðŸ˜‡</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;RESPUESTA EXTENDIDA&lt;/em&gt;&lt;/strong&gt; ðŸ˜‡</target>
        </trans-unit>
        <trans-unit id="3393b3743a22fd0193ab2fa39735ae2f646b06ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Or&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Or&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="710a4e957cc23ae95eb9aa6e13030731ab1c9d56" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Reassignment&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Reassignment&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e590196d99e29b0fb26cc981e8c241732f76e4ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Spread Operator&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Operador extendido&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="64d050dff57dceee4d758cc0912b8d402b405b10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5fbf4a00d6a882121a802d2725d98940aaaeb108" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Edit:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b02479449faf2e3a74dc8a9ef6000bfbe7ea1f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In other words, a JavaScript object gets killed as soon as there is no reference left in your code pointed to that object.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;En otras palabras, un objeto JavaScript se elimina tan pronto como no quede ninguna referencia en su c&amp;oacute;digo que apunte a ese objeto.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ecc8000feff4d7f65f5786df06cc101796ac4edd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To clone object without property:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Para clonar objeto sin propiedad:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ca5c58827bf40e3a97a098228081f1f64d66b7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update 2018-07-21:&lt;/strong&gt; For a long time, I have felt embarrassed about this answer, so I think it's time that I touch it up a little bit. Just a little commentary, clarification, and formatting to help expedite the reading of the needlessly long and convoluted parts of this answer.</source>
          <target state="translated">&lt;strong&gt;Actualizaci&amp;oacute;n 2018-07-21:&lt;/strong&gt; Durante mucho tiempo, me sent&amp;iacute; avergonzado por esta respuesta, por lo que creo que es hora de que la retoque un poco. Solo un peque&amp;ntilde;o comentario, aclaraci&amp;oacute;n y formato para ayudar a acelerar la lectura de las partes innecesariamente largas y complicadas de esta respuesta.</target>
        </trans-unit>
        <trans-unit id="c099f37767111dc60103bd8696ed4fcf3e7a64d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update:&lt;/strong&gt;
Thanks to @AgentME:</source>
          <target state="translated">&lt;strong&gt;Actualizaci&amp;oacute;n:&lt;/strong&gt; Gracias a @AgentME:</target>
        </trans-unit>
        <trans-unit id="cd7c415e1d4039a5febeafd32c836a75f6b919e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use &lt;code&gt;delete&lt;/code&gt;,&lt;/strong&gt; when you are passing the result object to the code on which you don't have control (or when you are not sure about your team or yourself).</source>
          <target state="translated">&lt;strong&gt;Use &lt;code&gt;delete&lt;/code&gt; &lt;/strong&gt; cuando pase el objeto de resultado al c&amp;oacute;digo sobre el que no tiene control (o cuando no est&amp;eacute; seguro de su equipo o de usted mismo).</target>
        </trans-unit>
        <trans-unit id="0af0c0606dbb967654f58c35fa2988459afb9a19" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use setting to &lt;code&gt;undefined&lt;/code&gt;,&lt;/strong&gt; when you care about performance. It can give a serious boost to your code.</source>
          <target state="translated">&lt;strong&gt;Use la configuraci&amp;oacute;n en &lt;code&gt;undefined&lt;/code&gt; ,&lt;/strong&gt; cuando le importa el rendimiento. Puede dar un gran impulso a su c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="9dfe20a67d61ae6b75beddf80cff0434cb3f7a9f" translate="yes" xml:space="preserve">
          <source>A live example to show:</source>
          <target state="translated">Un ejemplo vivo para mostrar:</target>
        </trans-unit>
        <trans-unit id="aabd2b7839024463c3c18626551d6893b70879bd" translate="yes" xml:space="preserve">
          <source>About now, you're at your wit's end. This guy has been complaining non-stop about your app, and you want to tell him to shut up and go get a better computer.</source>
          <target state="translated">En este momento,estÃ¡s al lÃ­mite de tu ingenio.Este tipo se ha estado quejando sin parar de tu aplicaciÃ³n,y tÃº quieres decirle que se calle y que se busque un ordenador mejor.</target>
        </trans-unit>
        <trans-unit id="692f82b2a7574a467099a421e634c28a19087f50" translate="yes" xml:space="preserve">
          <source>Alternatively, you could also do this:</source>
          <target state="translated">Alternativamente,tambiÃ©n podrÃ­as hacer esto:</target>
        </trans-unit>
        <trans-unit id="8dd6b6a5cb398077b2e61b33860df5233162a369" translate="yes" xml:space="preserve">
          <source>An object may be seen as a set of key-value pairs. What I call a 'value' is a primitive or a reference to other object, connected to that 'key'.</source>
          <target state="translated">Un objeto puede ser visto como un conjunto de pares clave-valor.Lo que yo llamo un &quot;valor&quot; es una primitiva o una referencia a otro objeto,conectado a esa &quot;llave&quot;.</target>
        </trans-unit>
        <trans-unit id="97f362e729192c077ada3f5241fec0dea0e6f9ad" translate="yes" xml:space="preserve">
          <source>And just like that, you've pleased Mr. PDP-11. Hooray! &lt;sub&gt;(I'd still tell him off, though...)&lt;/sub&gt;</source>
          <target state="translated">Y as&amp;iacute;, has complacido al Sr. PDP-11. &amp;iexcl;Hurra! &lt;sub&gt;(Sin embargo, a&amp;uacute;n lo rega&amp;ntilde;ar&amp;iacute;a ...)&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="38fedc2f5a59cd30ac658c92ac34226c9870e485" translate="yes" xml:space="preserve">
          <source>And we need to delete 'a'.</source>
          <target state="translated">Y tenemos que borrar la 'a'.</target>
        </trans-unit>
        <trans-unit id="15728408349a51726fa4d7a495f586b8e25e36f1" translate="yes" xml:space="preserve">
          <source>Another alternative is to use the &lt;a href=&quot;https://underscorejs.org&quot;&gt;Underscore.js&lt;/a&gt; library.</source>
          <target state="translated">Otra alternativa es usar la biblioteca &lt;a href=&quot;https://underscorejs.org&quot;&gt;Underscore.js&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="130c3bce337f7ed92461a0af093bf0dd8b4d970c" translate="yes" xml:space="preserve">
          <source>Another solution, using &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt;&lt;code&gt;Array#reduce&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;.</source>
          <target state="translated">Otra soluci&amp;oacute;n, usando &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt; &lt;code&gt;Array#reduce&lt;/code&gt; &lt;/a&gt;&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="75aa366398b31b18c07d678c84ff7223a1b76dbe" translate="yes" xml:space="preserve">
          <source>Any property declared with let or const cannot be deleted from the scope  within which they were defined. Non-configurable properties cannot be removed. This includes properties of built-in objects like Math, Array, Object and properties that are created as non-configurable with methods like Object.defineProperty().</source>
          <target state="translated">Cualquier propiedad declarada con letargo o constancia no puede ser eliminada del Ã¡mbito en el que fueron definidos.Las propiedades no configurables no pueden ser eliminadas.Esto incluye propiedades de objetos incorporados como Math,Array,Object y propiedades que son creadas como no configurables con mÃ©todos como Object.defineProperty().</target>
        </trans-unit>
        <trans-unit id="b2ecb35283325b0622c879acc81ba757d7accad0" translate="yes" xml:space="preserve">
          <source>Any property declared with var cannot be deleted from the global scope
  or from a function's scope.</source>
          <target state="translated">Cualquier propiedad declarada con var no puede ser eliminada del Ã¡mbito global o del Ã¡mbito de una funciÃ³n.</target>
        </trans-unit>
        <trans-unit id="6c333dd9449a548b822691fcab373abce8f8f850" translate="yes" xml:space="preserve">
          <source>Are you looking to achieve this in pure JavaScript or are you willing &amp;amp; able to use a 3rd-party library?</source>
          <target state="translated">&amp;iquest;Est&amp;aacute; buscando lograr esto en JavaScript puro o est&amp;aacute; dispuesto y puede usar una biblioteca de terceros?</target>
        </trans-unit>
        <trans-unit id="1fea0155471c15e540c5b31c3594a45754e6cc6c" translate="yes" xml:space="preserve">
          <source>Array equivalent</source>
          <target state="translated">Equivalente de la matriz</target>
        </trans-unit>
        <trans-unit id="10f82eff0fb408011ffeabc374c6234764312dea" translate="yes" xml:space="preserve">
          <source>Array.prototype.slice(start, end)</source>
          <target state="translated">Array.prototipo.rebanada(inicio,fin)</target>
        </trans-unit>
        <trans-unit id="dfe829210c0c25d8779de7fe65fb3158cefd4290" translate="yes" xml:space="preserve">
          <source>Array.prototype.splice vs Array.prototype.slice</source>
          <target state="translated">Empalme.del.prototipo.de.la.matriz.contra.el.trozo.del.prototipo.de.la.matriz.</target>
        </trans-unit>
        <trans-unit id="99ba4898ce91c3e3945c33ecd292283940427b38" translate="yes" xml:space="preserve">
          <source>Array.prototype.splice(start, n)</source>
          <target state="translated">Array.prototipo.de.empalme(inicio,n)</target>
        </trans-unit>
        <trans-unit id="bc85e8ead32cd6185d2f6ca2b34c7fbc94aadd58" translate="yes" xml:space="preserve">
          <source>As others have said, you can use &lt;code&gt;delete&lt;/code&gt;.</source>
          <target state="translated">Como han dicho otros, puede usar &lt;code&gt;delete&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fc6de88f57fe2bcbd39aa2ddf8ca667c26f222a3" translate="yes" xml:space="preserve">
          <source>As seen in the above code snippet, there are some rare appropriate use cases for the &lt;code&gt;delete&lt;/code&gt; operator. However, do not worry about this problem too much. This will only become a problem with long-lifespan objects that get new keys constantly added to them. In any other case (which is almost every case in real-world programming), it is most appropriate to use &lt;code&gt;obj[prop] = undefined&lt;/code&gt;. The main purpose of this section is just to bring this to your attention so that in the rare chance that this does become a problem in your code, then you can more easily understand the problem and thus not have to waste hours dissecting your code to locate and understand this problem.</source>
          <target state="translated">Como se ve en el fragmento de c&amp;oacute;digo anterior, hay algunos casos de uso apropiados raros para el operador de &lt;code&gt;delete&lt;/code&gt; . Sin embargo, no se preocupe demasiado por este problema. Esto solo se convertir&amp;aacute; en un problema con los objetos de larga duraci&amp;oacute;n que reciben constantemente nuevas claves. En cualquier otro caso (que es casi todos los casos en la programaci&amp;oacute;n del mundo real), es m&amp;aacute;s apropiado usar &lt;code&gt;obj[prop] = undefined&lt;/code&gt; . El objetivo principal de esta secci&amp;oacute;n es llamar su atenci&amp;oacute;n para que, en la rara posibilidad de que esto se convierta en un problema en su c&amp;oacute;digo, pueda comprender m&amp;aacute;s f&amp;aacute;cilmente el problema y, por lo tanto, no tenga que perder horas diseccionando su c&amp;oacute;digo para localizar y entiendo este problema</target>
        </trans-unit>
        <trans-unit id="0a1a7281b5e3e0adcbcee6c0378231475ce1d077" translate="yes" xml:space="preserve">
          <source>As such, delete cannot delete any functions in the global scope (whether this is part from a function definition or a function  (expression).</source>
          <target state="translated">Como tal,la supresiÃ³n no puede suprimir ninguna funciÃ³n del Ã¡mbito global (ya sea que forme parte de una definiciÃ³n de funciÃ³n o de una funciÃ³n (expresiÃ³n).</target>
        </trans-unit>
        <trans-unit id="19292906404cfee69ce728ffea847a3cb5d23580" translate="yes" xml:space="preserve">
          <source>As you can see, &lt;code&gt;delete&lt;/code&gt; doesn't always work as one might expect. The value is overwritten, but the memory is not reallocated. That is to say, &lt;code&gt;array[4]&lt;/code&gt; isn't relocated to &lt;code&gt;array[3]&lt;/code&gt;. Which is in contrast to &lt;code&gt;Array.prototype.unshift&lt;/code&gt;, which inserts an element at the beginning of the array and shifts everything up (&lt;code&gt;array[0]&lt;/code&gt; becomes &lt;code&gt;array[1]&lt;/code&gt;, etc.)</source>
          <target state="translated">Como puede ver, &lt;code&gt;delete&lt;/code&gt; no siempre funciona como cabr&amp;iacute;a esperar. El valor se sobrescribe, pero la memoria no se reasigna. Es decir, la &lt;code&gt;array[4]&lt;/code&gt; no se reubica en la &lt;code&gt;array[3]&lt;/code&gt; . Lo que contrasta con &lt;code&gt;Array.prototype.unshift&lt;/code&gt; , que inserta un elemento al comienzo de la matriz y desplaza todo hacia arriba ( &lt;code&gt;array[0]&lt;/code&gt; convierte en &lt;code&gt;array[1]&lt;/code&gt; , etc.)</target>
        </trans-unit>
        <trans-unit id="2c856c5e5c5be4265462b9644119ace1784d98d0" translate="yes" xml:space="preserve">
          <source>Beware Of Memory Leaks!</source>
          <target state="translated">Â¡Cuidado con las fugas de memoria!</target>
        </trans-unit>
        <trans-unit id="76829795257d4b98172b51f389192e4a9f633cf6" translate="yes" xml:space="preserve">
          <source>But if the property of the object is not configurable it cannot be deleted neither with deleteProperty function nor delete operator:</source>
          <target state="translated">Pero si la propiedad del objeto no es configurable no se puede borrar ni con la funciÃ³n borrarPropiedad ni con el operador de borrado:</target>
        </trans-unit>
        <trans-unit id="5d2ae2c0c3d231052d20df4bc0d378c5068295e8" translate="yes" xml:space="preserve">
          <source>But the point is if you care about memory and you want to whole the object gets removed from the memory, it is recommended to set it to null before you delete the key:</source>
          <target state="translated">Pero el punto es que si te preocupas por la memoria y quieres que el objeto entero sea eliminado de la memoria,se recomienda ponerlo en nulo antes de eliminar la llave:</target>
        </trans-unit>
        <trans-unit id="083882684bcd539a61f754c832b4192934d833e3" translate="yes" xml:space="preserve">
          <source>But, how does a drug trip analogy relate to the &lt;code&gt;delete&lt;/code&gt; operation? The answer inheres the last line of code in the snippet above. Thus let it be reexamined, this time with a twist.</source>
          <target state="translated">Pero, &amp;iquest;c&amp;oacute;mo se relaciona una analog&amp;iacute;a de viaje de drogas con la operaci&amp;oacute;n de &lt;code&gt;delete&lt;/code&gt; ? La respuesta es la &amp;uacute;ltima l&amp;iacute;nea de c&amp;oacute;digo en el fragmento de arriba. Por lo tanto, que se vuelva a examinar, esta vez con un giro.</target>
        </trans-unit>
        <trans-unit id="0eb16d4b50dbacc8475f57ed2dfb88409bd56da6" translate="yes" xml:space="preserve">
          <source>Consider creating a new object without the &lt;code&gt;&quot;regex&quot;&lt;/code&gt; property because the original object could always be referenced by other parts of your program. Thus you should avoid manipulating it.</source>
          <target state="translated">Considere crear un nuevo objeto sin la propiedad &lt;code&gt;&quot;regex&quot;&lt;/code&gt; porque el objeto original siempre puede ser referenciado por otras partes de su programa. Por lo tanto, debe evitar manipularlo.</target>
        </trans-unit>
        <trans-unit id="1b8bae88ce3f716fc88f086ba5df71aa742b0ee5" translate="yes" xml:space="preserve">
          <source>Dan's assertion that 'delete' is very slow and the benchmark he posted were doubted. So I carried out the test myself in Chrome 59. It does seem that 'delete' is about 30 times slower:</source>
          <target state="translated">La afirmaciÃ³n de Dan de que &quot;borrar&quot; es muy lento y el punto de referencia que publicÃ³ fue dudoso.AsÃ­ que hice la prueba yo mismo en el Cromo 59.Parece que 'borrar' es unas 30 veces mÃ¡s lento:</target>
        </trans-unit>
        <trans-unit id="d8b13a816456ec85d6f3ace2de0c50288edaa6ea" translate="yes" xml:space="preserve">
          <source>Delete is the only true way to remove object's properties without any leftovers, but it works &lt;strong&gt;~ 100 times slower&lt;/strong&gt;, 
compared to its &quot;alternative&quot;, setting &lt;code&gt;object[key] = undefined&lt;/code&gt;.</source>
          <target state="translated">Eliminar es la &amp;uacute;nica forma verdadera de eliminar las propiedades del objeto sin restos, pero funciona &lt;strong&gt;~ 100 veces m&amp;aacute;s lento&lt;/strong&gt; , en comparaci&amp;oacute;n con su &quot;alternativa&quot;, estableciendo &lt;code&gt;object[key] = undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="45dc7ea9ea6f9f47fa401db4115a5eee26a4be14" translate="yes" xml:space="preserve">
          <source>Deleting an array index</source>
          <target state="translated">Borrar un Ã­ndice de matriz</target>
        </trans-unit>
        <trans-unit id="42034d05fb5ec8b92965ea89f328c840dc4a3ac4" translate="yes" xml:space="preserve">
          <source>Deleting an object property</source>
          <target state="translated">Borrar una propiedad del objeto</target>
        </trans-unit>
        <trans-unit id="e52c854d5631eec7468ba4727b4c77eb745f2965" translate="yes" xml:space="preserve">
          <source>Demo</source>
          <target state="translated">Demo</target>
        </trans-unit>
        <trans-unit id="0298196b206bc7b4a96725653dbc77fafc2e7815" translate="yes" xml:space="preserve">
          <source>Do Not Always Set To &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">No siempre se establece en &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e813a63a91f53696f818ac595a5fddc09cb30338" translate="yes" xml:space="preserve">
          <source>Don't &lt;code&gt;delete&lt;/code&gt; from an array. Use &lt;code&gt;Array.prototype.splice&lt;/code&gt; instead.</source>
          <target state="translated">No &lt;code&gt;delete&lt;/code&gt; de una matriz. Utilice &lt;code&gt;Array.prototype.splice&lt;/code&gt; en su lugar.</target>
        </trans-unit>
        <trans-unit id="9cff8f35d333fc23fef816a20f879c35c001ee7e" translate="yes" xml:space="preserve">
          <source>Due to the dynamic nature of JavaScript there are often cases where you simply don't know if the property exists or not. Checking if obj exists before the &amp;amp;&amp;amp; also makes sure you don't throw an error due to calling the hasOwnProperty() function on an undefined object.</source>
          <target state="translated">Debido a la naturaleza din&amp;aacute;mica de JavaScript, a menudo hay casos en los que simplemente no sabe si la propiedad existe o no. Comprobar si existe obj antes de &amp;amp;&amp;amp; tambi&amp;eacute;n asegura que no arroje un error debido a llamar a la funci&amp;oacute;n hasOwnProperty () en un objeto indefinido.</target>
        </trans-unit>
        <trans-unit id="f30ca853155d96f4ff4a7523ad41da4989438529" translate="yes" xml:space="preserve">
          <source>E.g</source>
          <target state="translated">E.g</target>
        </trans-unit>
        <trans-unit id="48886c6e98adf5c4a9c9282a2441dfe3015faacb" translate="yes" xml:space="preserve">
          <source>ECMAScript 2015 (or ES6) came with built-in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect&quot;&gt;Reflect&lt;/a&gt; object. It is possible to delete object property by calling &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty&quot;&gt;Reflect.deleteProperty()&lt;/a&gt; function with target object and property key as parameters:</source>
          <target state="translated">ECMAScript 2015 (o ES6) vino con un objeto &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect&quot;&gt;Reflect&lt;/a&gt; incorporado. Es posible eliminar la propiedad del objeto llamando a la funci&amp;oacute;n &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty&quot;&gt;Reflect.deleteProperty ()&lt;/a&gt; con el objeto de destino y la clave de propiedad como par&amp;aacute;metros:</target>
        </trans-unit>
        <trans-unit id="4c2dbb36a3a214bec101207bfb72cd18b86e453e" translate="yes" xml:space="preserve">
          <source>Each one has it's own pros and cons (&lt;a href=&quot;https://jsperf.com/delete-vs-undefined-vs-null/16&quot;&gt;check this performance comparison&lt;/a&gt;):</source>
          <target state="translated">Cada uno tiene sus propios pros y contras ( &lt;a href=&quot;https://jsperf.com/delete-vs-undefined-vs-null/16&quot;&gt;consulte esta comparaci&amp;oacute;n de rendimiento&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Ampliar fragmento</target>
        </trans-unit>
        <trans-unit id="5cb7b7c35055238b90a33971ff368cff01dd0bbb" translate="yes" xml:space="preserve">
          <source>For anyone interested in reading more about it, Stack Overflow user &lt;a href=&quot;https://stackoverflow.com/users/130652/kangax&quot;&gt;kangax&lt;/a&gt; has written an incredibly in-depth blog post about the &lt;code&gt;delete&lt;/code&gt; statement on their blog, &lt;em&gt;&lt;a href=&quot;http://perfectionkills.com/understanding-delete/&quot;&gt;Understanding delete&lt;/a&gt;&lt;/em&gt;. It is highly recommended.</source>
          <target state="translated">Para cualquier persona interesada en leer m&amp;aacute;s al respecto, el usuario de Stack Overflow &lt;a href=&quot;https://stackoverflow.com/users/130652/kangax&quot;&gt;kangax&lt;/a&gt; ha escrito una publicaci&amp;oacute;n de blog incre&amp;iacute;blemente profunda sobre la declaraci&amp;oacute;n de &lt;code&gt;delete&lt;/code&gt; en su blog, &lt;em&gt;&lt;a href=&quot;http://perfectionkills.com/understanding-delete/&quot;&gt;Comprender la eliminaci&amp;oacute;n&lt;/a&gt;&lt;/em&gt; . Es muy recomendable</target>
        </trans-unit>
        <trans-unit id="7de0c8678ad3582ef48a786c2a12849c95f613d2" translate="yes" xml:space="preserve">
          <source>For arrays, &lt;code&gt;_.filter()&lt;/code&gt; and &lt;code&gt;_.reject()&lt;/code&gt; can be used in a similar manner.</source>
          <target state="translated">Para las matrices, &lt;code&gt;_.filter()&lt;/code&gt; y &lt;code&gt;_.reject()&lt;/code&gt; se pueden usar de manera similar.</target>
        </trans-unit>
        <trans-unit id="ae20664549d9e3ccd77991be79f76a86f10d159f" translate="yes" xml:space="preserve">
          <source>For example, say you are creating a webapp that uses JSON-serialization to store an array used for 'tabs' in a string (in this case, &lt;code&gt;localStorage&lt;/code&gt;). Let's also say that the code uses the numerical indices of the array's members to &quot;title&quot; them when drawing to the screen. Why are you doing this rather than just storing the &quot;title&quot; as well? Because... &lt;em&gt;reasons&lt;/em&gt;.</source>
          <target state="translated">Por ejemplo, supongamos que est&amp;aacute; creando una aplicaci&amp;oacute;n web que utiliza la serializaci&amp;oacute;n JSON para almacenar una matriz utilizada para 'pesta&amp;ntilde;as' en una cadena (en este caso, &lt;code&gt;localStorage&lt;/code&gt; ). Supongamos tambi&amp;eacute;n que el c&amp;oacute;digo utiliza los &amp;iacute;ndices num&amp;eacute;ricos de los miembros de la matriz para &quot;titularlos&quot; al dibujar en la pantalla. &amp;iquest;Por qu&amp;eacute; haces esto en lugar de solo almacenar el &quot;t&amp;iacute;tulo&quot; tambi&amp;eacute;n? Porque ... &lt;em&gt;razones&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="cdad74d0486512dc3bc4f850907cd467e5fc5e3c" translate="yes" xml:space="preserve">
          <source>For more info about and seeing more example, visit the link below:</source>
          <target state="translated">Para obtener mÃ¡s informaciÃ³n y ver mÃ¡s ejemplos,visite el siguiente enlace:</target>
        </trans-unit>
        <trans-unit id="3053a4eaab6ecc9daa630f23887af0a663b64dcc" translate="yes" xml:space="preserve">
          <source>Functions which are part of an object (apart from the</source>
          <target state="translated">Las funciones que forman parte de un objeto (aparte de la</target>
        </trans-unit>
        <trans-unit id="a355b0b1f78d396cf69cf859538e8172e1e8345c" translate="yes" xml:space="preserve">
          <source>Hello You Can try this simple an sort</source>
          <target state="translated">Hola.Puedes probar este simple tipo de...</target>
        </trans-unit>
        <trans-unit id="ca27c0a83d24961b91d263af64d922d82a55909c" translate="yes" xml:space="preserve">
          <source>Honestly, aside from setting to &lt;code&gt;null&lt;/code&gt; rather than &lt;code&gt;undefined&lt;/code&gt;--which is legitimately weird--this behavior &lt;em&gt;shouldn't&lt;/em&gt; be surprising, since &lt;code&gt;delete&lt;/code&gt; is a unary operator, like &lt;code&gt;typeof&lt;/code&gt;, that is hard-boiled into the language and is not supposed to care about the &lt;em&gt;type&lt;/em&gt; of object it's being used on, whereas &lt;code&gt;Array&lt;/code&gt; is a subclass of &lt;code&gt;Object&lt;/code&gt; with methods &lt;em&gt;specifically designed for&lt;/em&gt; working with arrays. So there's no good reason for &lt;code&gt;delete&lt;/code&gt; to have a special case cooked in for re-shifting the array, as that would just slow things down with unnecessary work. In retrospect, my expectations were unrealistic.</source>
          <target state="translated">Honestamente, aparte de establecer como &lt;code&gt;null&lt;/code&gt; lugar de &lt;code&gt;undefined&lt;/code&gt; es leg&amp;iacute;timamente extra&amp;ntilde;o, este comportamiento &lt;em&gt;no&lt;/em&gt; deber&amp;iacute;a sorprender, ya que &lt;code&gt;delete&lt;/code&gt; es un operador unario, como &lt;code&gt;typeof&lt;/code&gt; , que est&amp;aacute; duro en el lenguaje y no se supone que le importe sobre el &lt;em&gt;tipo&lt;/em&gt; de objeto en el que se est&amp;aacute; utilizando, mientras que &lt;code&gt;Array&lt;/code&gt; es una subclase de &lt;code&gt;Object&lt;/code&gt; con m&amp;eacute;todos &lt;em&gt;dise&amp;ntilde;ados espec&amp;iacute;ficamente para&lt;/em&gt; trabajar con matrices. Por lo tanto, no hay una buena raz&amp;oacute;n para &lt;code&gt;delete&lt;/code&gt; para tener un caso especial preparado para volver a cambiar la matriz, ya que eso solo ralentizar&amp;iacute;a las cosas con un trabajo innecesario. En retrospectiva, mis expectativas no eran realistas.</target>
        </trans-unit>
        <trans-unit id="dc3989e98834042a9457a0de8b90b5c9f3024f13" translate="yes" xml:space="preserve">
          <source>How do I remove a property from a JavaScript object</source>
          <target state="translated">Â¿CÃ³mo elimino una propiedad de un objeto de JavaScript</target>
        </trans-unit>
        <trans-unit id="b47475af69db5ae110b477abd31ec35a3c7d497a" translate="yes" xml:space="preserve">
          <source>However, be mindful! Do not suddenly start doing this with all your preexisting code now as it would likely break such preexisting code and/or introduce strange bugs. Rather, such an efficient practice needs to be implemented from the start, and when converting preexisting code, it is recommended that you double, triple, quadruple check all the lines relating to that as trying to upgrade old code to this new practice can be as risky as it is rewarding.</source>
          <target state="translated">Sin embargo,Â¡tenga en cuenta! No empieces a hacer esto de repente con todo tu cÃ³digo preexistente ahora,ya que probablemente romperÃ­a dicho cÃ³digo preexistente y/o introducirÃ­a bichos extraÃ±os.MÃ¡s bien,una prÃ¡ctica tan eficiente necesita ser implementada desde el principio,y cuando se convierte cÃ³digo preexistente,se recomienda que compruebe doble,triple y cuÃ¡druplemente todas las lÃ­neas relacionadas con eso,ya que tratar de actualizar el cÃ³digo antiguo a esta nueva prÃ¡ctica puede ser tan arriesgado como gratificante.</target>
        </trans-unit>
        <trans-unit id="491f0bae14ec381e286ea282ba5b10bae8f240b9" translate="yes" xml:space="preserve">
          <source>However, it will &lt;strong&gt;mutate&lt;/strong&gt; the original object. If you want to create a new object &lt;strong&gt;without&lt;/strong&gt; the specified key, just assign the reduce function to a new variable, e.g.:</source>
          <target state="translated">Sin embargo, &lt;strong&gt;mutar&amp;aacute;&lt;/strong&gt; el objeto original. Si desea crear un nuevo objeto &lt;strong&gt;sin&lt;/strong&gt; la clave especificada, simplemente asigne la funci&amp;oacute;n reducir a una nueva variable, por ejemplo:</target>
        </trans-unit>
        <trans-unit id="b18c3a88c501a6c91766f406a1e129e6aaa98cea" translate="yes" xml:space="preserve">
          <source>However, there are two major unfixable problems with polymorphic arrays:</source>
          <target state="translated">Sin embargo,hay dos problemas importantes e inamovibles con las matrices polimÃ³rficas:</target>
        </trans-unit>
        <trans-unit id="3486394d0c7c983de3c5268328e537d9b15cb8f7" translate="yes" xml:space="preserve">
          <source>However, this code:</source>
          <target state="translated">Sin embargo,este cÃ³digo:</target>
        </trans-unit>
        <trans-unit id="4a71f7845929b0f0df07acdfaf7d379b182e9259" translate="yes" xml:space="preserve">
          <source>I feel it's important to point out the difference between these two similarly-named functions, as they are both very useful.</source>
          <target state="translated">Creo que es importante seÃ±alar la diferencia entre estas dos funciones de nombre similar,ya que ambas son muy Ãºtiles.</target>
        </trans-unit>
        <trans-unit id="459a68f17b246b077cb24b6614e54636e1f0783c" translate="yes" xml:space="preserve">
          <source>I personally use &lt;a href=&quot;https://en.wikipedia.org/wiki/Underscore.js&quot;&gt;Underscore.js&lt;/a&gt; or &lt;a href=&quot;https://lodash.com&quot;&gt;Lodash&lt;/a&gt; for object and array manipulation:</source>
          <target state="translated">Personalmente uso &lt;a href=&quot;https://en.wikipedia.org/wiki/Underscore.js&quot;&gt;Underscore.js&lt;/a&gt; o &lt;a href=&quot;https://lodash.com&quot;&gt;Lodash&lt;/a&gt; para la manipulaci&amp;oacute;n de objetos y matrices:</target>
        </trans-unit>
        <trans-unit id="a8613a5b1880d971e632b3352e4bfe554f971c46" translate="yes" xml:space="preserve">
          <source>If a property with the same name exists on the object's prototype
  chain, then, after deletion, the object will use the property from the
  prototype chain (in other words, delete only has an effect on own
  properties).</source>
          <target state="translated">Si existe una propiedad con el mismo nombre en la cadena del prototipo del objeto,entonces,despuÃ©s de la supresiÃ³n,el objeto utilizarÃ¡ la propiedad de la cadena del prototipo (en otras palabras,la supresiÃ³n sÃ³lo tiene efecto sobre las propiedades propias).</target>
        </trans-unit>
        <trans-unit id="1e20c9e61654d816a6093dde8b64312b7bd4779b" translate="yes" xml:space="preserve">
          <source>If the property which you are trying to delete does not exist, delete
  will not have any effect and will return true</source>
          <target state="translated">Si la propiedad que estÃ¡ tratando de eliminar no existe,la eliminaciÃ³n no tendrÃ¡ ningÃºn efecto y volverÃ¡ a ser verdadera</target>
        </trans-unit>
        <trans-unit id="28ec183a3184d93a675028a4e725a85c94f1f649" translate="yes" xml:space="preserve">
          <source>If you do not know the index, you'll also have to do an index search:</source>
          <target state="translated">Si no conoces el Ã­ndice,tambiÃ©n tendrÃ¡s que hacer una bÃºsqueda en el Ã­ndice:</target>
        </trans-unit>
        <trans-unit id="3204a3a58282102b99263134aa04e4bbd9031c97" translate="yes" xml:space="preserve">
          <source>If you do:</source>
          <target state="translated">Si lo haces:</target>
        </trans-unit>
        <trans-unit id="3204f4d5aa25757c4ed3063f2b869d5fde0626d5" translate="yes" xml:space="preserve">
          <source>If you know the index of your staff member, you could simply do this:</source>
          <target state="translated">Si conoce el Ã­ndice de su empleado,podrÃ­a simplemente hacer esto:</target>
        </trans-unit>
        <trans-unit id="9b546f76f9301b299e7ed78305baf0ef1addfe1c" translate="yes" xml:space="preserve">
          <source>If you want to delete a property deeply nested in the object then you can use the following recursive function with path to the property as the second argument:</source>
          <target state="translated">Si desea eliminar una propiedad profundamente anidada en el objeto,puede utilizar la siguiente funciÃ³n recursiva con la ruta a la propiedad como segundo argumento:</target>
        </trans-unit>
        <trans-unit id="506bf20b873a7a4cd476c438c371ecd4bcca65fc" translate="yes" xml:space="preserve">
          <source>If you want to experiment with this, you can use &lt;a href=&quot;http://jsfiddle.net/cb57dusv/46/&quot;&gt;&lt;strong&gt;this Fiddle&lt;/strong&gt;&lt;/a&gt; as a starting point.</source>
          <target state="translated">Si quieres experimentar con esto, puedes usar &lt;a href=&quot;http://jsfiddle.net/cb57dusv/46/&quot;&gt;&lt;strong&gt;este Fiddle&lt;/strong&gt;&lt;/a&gt; como punto de partida.</target>
        </trans-unit>
        <trans-unit id="a4e72696da1b895cd7644dbb4f08034ae76c1836" translate="yes" xml:space="preserve">
          <source>If you want to use the entire &lt;code&gt;staff&lt;/code&gt; array, the proper way to do this, would be to do this:</source>
          <target state="translated">Si desea utilizar toda la matriz de &lt;code&gt;staff&lt;/code&gt; , la forma correcta de hacerlo ser&amp;iacute;a hacerlo:</target>
        </trans-unit>
        <trans-unit id="43cf8d099321d601790e8b3431ad74fdf17809c0" translate="yes" xml:space="preserve">
          <source>Ignoring the dangers and problems inherent in &lt;code&gt;null&lt;/code&gt;, and the space wasted, this can be problematic if the array needs to be precise.</source>
          <target state="translated">Ignorando los peligros y problemas inherentes a &lt;code&gt;null&lt;/code&gt; , y el espacio desperdiciado, esto puede ser problem&amp;aacute;tico si la matriz necesita ser precisa.</target>
        </trans-unit>
        <trans-unit id="c138b726889b4f8045cc8db17ba22f8faa709ac8" translate="yes" xml:space="preserve">
          <source>In addition, while mutating objects in-place isn't stateless, you can use the functional nature of &lt;code&gt;Reflect.deleteProperty&lt;/code&gt; to do partial application and other functional techniques that aren't possible with &lt;code&gt;delete&lt;/code&gt; statements.</source>
          <target state="translated">Adem&amp;aacute;s, aunque la mutaci&amp;oacute;n de objetos en el lugar no es ap&amp;aacute;trida, puede usar la naturaleza funcional de &lt;code&gt;Reflect.deleteProperty&lt;/code&gt; para realizar aplicaciones parciales y otras t&amp;eacute;cnicas funcionales que no son posibles con las declaraciones de &lt;code&gt;delete&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5b114aff6680bfc75db078ff75477b94c1c576aa" translate="yes" xml:space="preserve">
          <source>In arrays, unlike plain old objects, using &lt;code&gt;delete&lt;/code&gt; leaves behind garbage in the form of &lt;code&gt;null&lt;/code&gt;, creating a &quot;hole&quot; in the array.</source>
          <target state="translated">En las matrices, a diferencia de los objetos antiguos simples, el uso de &lt;code&gt;delete&lt;/code&gt; deja basura detr&amp;aacute;s en forma de &lt;code&gt;null&lt;/code&gt; , creando un &quot;agujero&quot; en la matriz.</target>
        </trans-unit>
        <trans-unit id="acf20d554a4832d04b9fb4c2dfc6cc9d34eda721" translate="yes" xml:space="preserve">
          <source>In the code above, simply doing &lt;code&gt;nodeRecords[i][lastTime] = undefined;&lt;/code&gt; will cause a massive memory leak because each animation frame. Each frame, all 65536 DOM elements will take up another 65536 individual slots, but the previous 65536 slots will only be set to undefined which leaves them hanging in the memory. Go ahead, try to run the above code in the console and see for yourself. After forcing an out-of-memory error, attempt to run it again except with the following version of the code that uses the &lt;code&gt;delete&lt;/code&gt; operator instead.</source>
          <target state="translated">En el c&amp;oacute;digo anterior, simplemente haciendo &lt;code&gt;nodeRecords[i][lastTime] = undefined;&lt;/code&gt; causar&amp;aacute; una p&amp;eacute;rdida masiva de memoria porque cada cuadro de animaci&amp;oacute;n. Cada cuadro, todos los elementos DOM del 65536 ocupar&amp;aacute;n otros 65536 espacios individuales, pero los espacios del 65536 anteriores solo se establecer&amp;aacute;n en indefinidos, lo que los dejar&amp;aacute; colgados en la memoria. Siga adelante, intente ejecutar el c&amp;oacute;digo anterior en la consola y compru&amp;eacute;belo usted mismo. Despu&amp;eacute;s de forzar un error de falta de memoria, intente ejecutarlo nuevamente, excepto con la siguiente versi&amp;oacute;n del c&amp;oacute;digo que utiliza el operador de &lt;code&gt;delete&lt;/code&gt; lugar.</target>
        </trans-unit>
        <trans-unit id="271f117734d63131f8d6a45f399a766357be7419" translate="yes" xml:space="preserve">
          <source>Increasingly stupid edge-case scenario aside, using &lt;code&gt;delete&lt;/code&gt; on said array will result in &lt;code&gt;null&lt;/code&gt; polluting the array, and probably causing bugs in the app later on. And if you check for &lt;code&gt;null&lt;/code&gt;, it would straight up skip the numbers resulting in the tabs being rendered like &lt;code&gt;[1] [2] [4] [5] ...&lt;/code&gt;.</source>
          <target state="translated">Dejando a un lado el escenario de borde cada vez m&amp;aacute;s est&amp;uacute;pido, el uso de &lt;code&gt;delete&lt;/code&gt; en dicha matriz resultar&amp;aacute; en una contaminaci&amp;oacute;n &lt;code&gt;null&lt;/code&gt; la matriz y probablemente causar&amp;aacute; errores en la aplicaci&amp;oacute;n m&amp;aacute;s adelante. Y si verifica si es &lt;code&gt;null&lt;/code&gt; , saltar&amp;aacute; directamente los n&amp;uacute;meros, lo que dar&amp;aacute; como resultado que las pesta&amp;ntilde;as se muestren como &lt;code&gt;[1] [2] [4] [5] ...&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="67a2e0451ade99e58384dc55f1327e29e5977c70" translate="yes" xml:space="preserve">
          <source>It &lt;strong&gt;deletes the key from the hashmap&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;Elimina la clave del hashmap&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="593fba807066e533a5fe4a2443019f46d7ca31da" translate="yes" xml:space="preserve">
          <source>JavaScript is an OOP Language, so everything is an object, including &lt;em&gt;arrays&lt;/em&gt;. Thus, I feel it necessary to point out a particular caveat.</source>
          <target state="translated">JavaScript es un lenguaje OOP, por lo que todo es un objeto, incluidas las &lt;em&gt;matrices&lt;/em&gt; . Por lo tanto, siento que es necesario se&amp;ntilde;alar una advertencia particular.</target>
        </trans-unit>
        <trans-unit id="b86b332c3f3aa1433f370f7189813a6381eb2178" translate="yes" xml:space="preserve">
          <source>Library-based property omission</source>
          <target state="translated">OmisiÃ³n de propiedad en la biblioteca</target>
        </trans-unit>
        <trans-unit id="59b86486aed4edafd59a372a9da15c32460385f0" translate="yes" xml:space="preserve">
          <source>Like this:</source>
          <target state="translated">AsÃ­:</target>
        </trans-unit>
        <trans-unit id="23ee237b458378f4f66052abb7c903c28cbb18e4" translate="yes" xml:space="preserve">
          <source>Look at the &lt;strong&gt;&lt;a href=&quot;http://jsperf.com/delete-vs-undefined-vs-null/16&quot;&gt;benchmark&lt;/a&gt;&lt;/strong&gt;.</source>
          <target state="translated">Mira el &lt;strong&gt;&lt;a href=&quot;http://jsperf.com/delete-vs-undefined-vs-null/16&quot;&gt;punto de referencia&lt;/a&gt;&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="d0447456284f7feabbe03be15bd344b6f319890b" translate="yes" xml:space="preserve">
          <source>Luckily, arrays &lt;em&gt;do&lt;/em&gt; have a specialized method for deleting indices and reallocating memory: &lt;code&gt;Array.prototype.splice()&lt;/code&gt;. You could write something like this:</source>
          <target state="translated">Afortunadamente, las matrices tienen un m&amp;eacute;todo especializado para eliminar &amp;iacute;ndices y reasignar memoria: &lt;code&gt;Array.prototype.splice()&lt;/code&gt; . Podr&amp;iacute;as escribir algo como esto:</target>
        </trans-unit>
        <trans-unit id="098d9f24825c866c84675902efcb46bcadb54327" translate="yes" xml:space="preserve">
          <source>More than 2X faster than &lt;code&gt;delete&lt;/code&gt;, however the property is &lt;strong&gt;not&lt;/strong&gt; deleted and can be iterated.</source>
          <target state="translated">M&amp;aacute;s de 2 veces m&amp;aacute;s r&amp;aacute;pido que &lt;code&gt;delete&lt;/code&gt; , sin embargo, la propiedad &lt;strong&gt;no se&lt;/strong&gt; elimina y se puede iterar.</target>
        </trans-unit>
        <trans-unit id="ccc762c5d3373bf8a3cde8b635c9825605d01c63" translate="yes" xml:space="preserve">
          <source>Mutative object property deletion, safe</source>
          <target state="translated">EliminaciÃ³n de la propiedad del objeto mutativo,seguro</target>
        </trans-unit>
        <trans-unit id="9ce68ac5a3111b339ada2a12dd8cc6eea0e45ffa" translate="yes" xml:space="preserve">
          <source>Mutative object property deletion, unsafe</source>
          <target state="translated">La eliminaciÃ³n de la propiedad del objeto mutativo,insegura</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="089de7283699cfb1ed6d519cb14e7b0cf6326b5b" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;_.pick()&lt;/code&gt; and &lt;code&gt;_.omit()&lt;/code&gt; both return a copy of the object and don't directly modify the original object. Assigning the result to the original object should do the trick (not shown).</source>
          <target state="translated">Tenga en cuenta que &lt;code&gt;_.pick()&lt;/code&gt; y &lt;code&gt;_.omit()&lt;/code&gt; devuelven una copia del objeto y no modifican directamente el objeto original. Asignar el resultado al objeto original deber&amp;iacute;a hacer el truco (no se muestra).</target>
        </trans-unit>
        <trans-unit id="74d18dd16f1da3ac16685fb7e2b20e82dd3d4708" translate="yes" xml:space="preserve">
          <source>Note that I purposedly carried out more than one 'delete' operations in one loop cycle to minimize the effect caused by the other operations.</source>
          <target state="translated">ObsÃ©rvese que he realizado a propÃ³sito mÃ¡s de una operaciÃ³n de &quot;borrado&quot; en un ciclo de bucle para minimizar el efecto causado por las otras operaciones.</target>
        </trans-unit>
        <trans-unit id="cbc78d0538f8d0b1ea57d6e615c0173c54cc2f85" translate="yes" xml:space="preserve">
          <source>Note that the wrapper function is designed to be very strict about types, and will return &lt;code&gt;null&lt;/code&gt; if anything is off. That includes putting in a string like &lt;code&gt;&quot;3&quot;&lt;/code&gt;. It is left up to the programmer to be diligent about his types. This is to encourage good programming practice.</source>
          <target state="translated">Tenga en cuenta que la funci&amp;oacute;n de envoltura est&amp;aacute; dise&amp;ntilde;ada para ser muy estricta con los tipos y devolver&amp;aacute; &lt;code&gt;null&lt;/code&gt; si algo est&amp;aacute; desactivado. Eso incluye poner una cadena como &lt;code&gt;&quot;3&quot;&lt;/code&gt; . Le corresponde al programador ser diligente con sus tipos. Esto es para fomentar una buena pr&amp;aacute;ctica de programaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="0cd1e1c286ff1b960d2aa87f0e85fe9bd6a35fdd" translate="yes" xml:space="preserve">
          <source>Now, if you want to remove a single staff member or student, the procedure is a bit different, because both properties are arrays themselves.</source>
          <target state="translated">Ahora,si quieres quitar a un solo miembro del personal o estudiante,el procedimiento es un poco diferente,porque ambas propiedades son arreglos en sÃ­ mismas.</target>
        </trans-unit>
        <trans-unit id="e14273e8bb73415bec8db17e1b9d548211a7aed0" translate="yes" xml:space="preserve">
          <source>Now, you &lt;em&gt;could&lt;/em&gt; keep a second iterator, like &lt;code&gt;j&lt;/code&gt;, to increment only when valid values are read from the array. But that wouldn't exactly solve the &lt;code&gt;null&lt;/code&gt; issue, and you still have to please that &lt;s&gt;troll&lt;/s&gt; PDP-11 user. Alas, his computer just &lt;em&gt;doesn't&lt;/em&gt; have enough memory to hold that last integer &lt;sub&gt;(don't ask how he manages to handle a variable-width array...)&lt;/sub&gt;.</source>
          <target state="translated">Ahora, &lt;em&gt;podr&amp;iacute;a&lt;/em&gt; mantener un segundo iterador, como &lt;code&gt;j&lt;/code&gt; , para incrementar solo cuando se lean valores v&amp;aacute;lidos de la matriz. Pero eso no resolver&amp;iacute;a exactamente el problema &lt;code&gt;null&lt;/code&gt; , y a&amp;uacute;n debe complacer a ese usuario &lt;s&gt;troll&lt;/s&gt; PDP-11. Por desgracia, su computadora simplemente &lt;em&gt;no&lt;/em&gt; tiene suficiente memoria para contener ese &amp;uacute;ltimo entero &lt;sub&gt;(no pregunte c&amp;oacute;mo se las arregla para manejar una matriz de ancho variable ...)&lt;/sub&gt; .</target>
        </trans-unit>
        <trans-unit id="e28b55f542be9cce84f1cc3f1bdb29e2a2eb72e0" translate="yes" xml:space="preserve">
          <source>Object.assign() &amp;amp; Object.keys() &amp;amp; Array.map()</source>
          <target state="translated">Object.assign () y Object.keys () y Array.map ()</target>
        </trans-unit>
        <trans-unit id="c643fe374f1dfb8aa281ee046c5ea254b1b7b942" translate="yes" xml:space="preserve">
          <source>Observe. &lt;code&gt;bar[1] = &quot;&quot;&lt;/code&gt; does not coerce polymorphism whereas &lt;code&gt;bar[1] = undefined&lt;/code&gt; does. Therefore, one should always, whenever possible use the corresponding type for their objects so as to not accidentally cause polymorphism. One such person may use the following list as a general reference to get them going. However, please do not explicitly use the below ideas. Instead, use whatever works well for your code.</source>
          <target state="translated">Observar. &lt;code&gt;bar[1] = &quot;&quot;&lt;/code&gt; no coacciona el polimorfismo mientras que &lt;code&gt;bar[1] = undefined&lt;/code&gt; s&amp;iacute;. Por lo tanto, uno siempre debe, siempre que sea posible, usar el tipo correspondiente para sus objetos para no causar accidentalmente polimorfismo. Una de esas personas puede usar la siguiente lista como referencia general para ponerla en marcha. Sin embargo, no utilice expl&amp;iacute;citamente las siguientes ideas. En su lugar, use lo que funcione bien para su c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="e583eed26b5bb4eb2fe3ea98e3d4481f60fbfae9" translate="yes" xml:space="preserve">
          <source>Of course, it &lt;em&gt;did&lt;/em&gt; surprise me. Because I wrote this to justify my crusade against &quot;null garbage&quot;:</source>
          <target state="translated">Por supuesto, me sorprendi&amp;oacute;. Porque escrib&amp;iacute; esto para justificar mi cruzada contra la &quot;basura nula&quot;:</target>
        </trans-unit>
        <trans-unit id="9d008b07517f4d9dbae6df29270e3dfc66dcea5d" translate="yes" xml:space="preserve">
          <source>Okay, let's just say that you're trying to save memory at the request of this &lt;em&gt;one&lt;/em&gt; user who runs a PDP-11 minicomputer from the 1960's running UNIX and wrote his own Elinks-based, JavaScript-compliant, line-printer-friendly browser because X11 is &lt;em&gt;out of the question&lt;/em&gt;.</source>
          <target state="translated">De acuerdo, digamos que est&amp;aacute; tratando de ahorrar memoria a petici&amp;oacute;n de este usuario que ejecuta una minicomputadora PDP-11 de la d&amp;eacute;cada de 1960 con UNIX y escribi&amp;oacute; su propio navegador basado en Elinks, compatible con JavaScript y compatible con impresoras de l&amp;iacute;nea. porque X11 est&amp;aacute; &lt;em&gt;fuera de la cuesti&amp;oacute;n&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="0746b7ec72e10adab007597141d3dddd2450c60e" translate="yes" xml:space="preserve">
          <source>Old question, modern answer. Using object destructuring, an &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript&amp;nbsp;6&lt;/a&gt; feature, it's as simple as:</source>
          <target state="translated">Vieja pregunta, respuesta moderna. Usando la desestructuraci&amp;oacute;n de objetos, una caracter&amp;iacute;stica &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;de ECMAScript 6&lt;/a&gt; , es tan simple como:</target>
        </trans-unit>
        <trans-unit id="88891f47a253aa57bb1cb91937b9715b281db53b" translate="yes" xml:space="preserve">
          <source>Once polymorphic, always polymorphic. When an array is made polymorphic, the polymorphism cannot be undone in Webkit browsers. So, even if you restore a polymorphic array to being non-polymorphic, it will still be stored by the browser as a polymorphic array.</source>
          <target state="translated">Una vez polimÃ³rfico,siempre polimÃ³rfico.Cuando una matriz se hace polimÃ³rfica,el polimorfismo no puede deshacerse en los navegadores Webkit.AsÃ­ que,incluso si se restaura una matriz polimÃ³rfica a ser no polimÃ³rfica,el navegador seguirÃ¡ almacenÃ¡ndola como una matriz polimÃ³rfica.</target>
        </trans-unit>
        <trans-unit id="b248f1b8652c2d4ab474434fceed81458cb94383" translate="yes" xml:space="preserve">
          <source>Once those four queries have been answered, there are essentially four categories of &quot;property removal&quot; in JavaScript to chose from in order to meet your goals. They are:</source>
          <target state="translated">Una vez que esas cuatro preguntas han sido respondidas,hay esencialmente cuatro categorÃ­as de &quot;remociÃ³n de propiedad&quot; en JavaScript para elegir para cumplir con sus objetivos.Lo son:</target>
        </trans-unit>
        <trans-unit id="547c95266578e4dba22f41101c7fbe880f75e156" translate="yes" xml:space="preserve">
          <source>One aspect of Javascript that is important to consider is polymorphism. Polymorphism is when assigning the same variable/slot-in-an-object different types as seen below.</source>
          <target state="translated">Un aspecto de Javascript que es importante considerar es el polimorfismo.El polimorfismo es cuando se asignan a las mismas variables lotes en un objeto diferentes tipos como se ve a continuaciÃ³n.</target>
        </trans-unit>
        <trans-unit id="d59804a9108998189135354633d8b85aa6ac9872" translate="yes" xml:space="preserve">
          <source>One may liken polymorphism to a drug addiction. At first glance, it seems awesomely lucrative: nice pretty fluffy code. Then, the coder introduces their array to the drug of polymorphism. Instantly, the polymorphic array becomes less efficient, and it can never become as efficient as it was before since it is drugged. To correlate such circumstance to real life, someone on cocaine might not even be capable of operating a simple door handle, much less be able to calculate digits of PI. Likewise, an array on the drug of polymorphism cannot ever be as efficient as a monomorphic array.</source>
          <target state="translated">Uno puede comparar el polimorfismo con una adicciÃ³n a las drogas.A primera vista,parece increÃ­blemente lucrativo:un cÃ³digo bonito y esponjoso.Luego,el codificador introduce su conjunto a la droga del polimorfismo.InstantÃ¡neamente,la matriz polimÃ³rfica se vuelve menos eficiente,y nunca puede llegar a ser tan eficiente como lo fue antes,ya que estÃ¡ drogada.Para correlacionar esta circunstancia con la vida real,alguien que consume cocaÃ­na puede no ser capaz de operar una simple manija de puerta,y mucho menos ser capaz de calcular los dÃ­gitos del IP.De la misma manera,un conjunto de la droga del polimorfismo nunca puede ser tan eficiente como un conjunto monomÃ³rfico.</target>
        </trans-unit>
        <trans-unit id="81ec1a879d1bcac8eaeb3bcd6cca8f51d459b6e9" translate="yes" xml:space="preserve">
          <source>Operator &lt;code&gt;delete&lt;/code&gt; is unexpectedly slow!</source>
          <target state="translated">&amp;iexcl;La &lt;code&gt;delete&lt;/code&gt; operador es inesperadamente lenta!</target>
        </trans-unit>
        <trans-unit id="b0213d049275e53829195e4fb176386bc570f98e" translate="yes" xml:space="preserve">
          <source>Or add it as a new pointer to another object like:</source>
          <target state="translated">O agregarlo como un nuevo puntero a otro objeto como:</target>
        </trans-unit>
        <trans-unit id="b02fc9813af3fdbb140c9b950f4bb96861bf726a" translate="yes" xml:space="preserve">
          <source>Or with the questions sample:</source>
          <target state="translated">O con la muestra de preguntas:</target>
        </trans-unit>
        <trans-unit id="e9b0d0e32654faf6fc06ca2ce8663172c501d507" translate="yes" xml:space="preserve">
          <source>Or you can also use array-like notation:</source>
          <target state="translated">O tambiÃ©n puedes usar una notaciÃ³n tipo &quot;array&quot;:</target>
        </trans-unit>
        <trans-unit id="040435ad5191a6323d4b61a949b35014d90fb332" translate="yes" xml:space="preserve">
          <source>Or you can dynamically exclude properties like this,</source>
          <target state="translated">O puedes excluir dinÃ¡micamente propiedades como esta,</target>
        </trans-unit>
        <trans-unit id="a7ca816fcb165b225c5a6969cca6cd3afa101c70" translate="yes" xml:space="preserve">
          <source>Properties can be removed using &lt;strong&gt;destructuring&lt;/strong&gt; in combination with the &lt;strong&gt;rest operator&lt;/strong&gt;. In your example regex is destructured out (ignored) and the rest of the properties are returned as rest.</source>
          <target state="translated">Las propiedades se pueden eliminar mediante la &lt;strong&gt;desestructuraci&amp;oacute;n&lt;/strong&gt; en combinaci&amp;oacute;n con el &lt;strong&gt;operador de descanso&lt;/strong&gt; . En su ejemplo, la expresi&amp;oacute;n regular se desestructura (se ignora) y el resto de las propiedades se devuelven como descanso.</target>
        </trans-unit>
        <trans-unit id="257bb222f1c06e8c1d8edf559d64e06deb75f2f0" translate="yes" xml:space="preserve">
          <source>Property Removal in JavaScript</source>
          <target state="translated">EliminaciÃ³n de la propiedad en JavaScript</target>
        </trans-unit>
        <trans-unit id="83a4727bcff27e1d95598a97b2a871336f59a8c8" translate="yes" xml:space="preserve">
          <source>Readable and short, however, it might not be the best choice if you are operating on a large number of objects as its performance is not optimized.</source>
          <target state="translated">Legible y corto,sin embargo,podrÃ­a no ser la mejor opciÃ³n si se estÃ¡ operando en un gran nÃºmero de objetos ya que su rendimiento no estÃ¡ optimizado.</target>
        </trans-unit>
        <trans-unit id="ce7827682ca4a098e50c7905bb13aa7c7e60006c" translate="yes" xml:space="preserve">
          <source>Ref: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete&quot;&gt;MDN&lt;/a&gt;.</source>
          <target state="translated">Ref: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete&quot;&gt;MDN&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f02218cedd8e4fd7e585302dc05d8d0a5833d5f0" translate="yes" xml:space="preserve">
          <source>Reference: &lt;a href=&quot;http://underscorejs.org/#omit&quot;&gt;link&lt;/a&gt;&lt;strong&gt;_.omit(object, *keys)&lt;/strong&gt;</source>
          <target state="translated">Referencia: &lt;a href=&quot;http://underscorejs.org/#omit&quot;&gt;link&lt;/a&gt; &lt;strong&gt;_.omit (objeto, * teclas)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a3c1aeff97f5a6d2ba0a975a623e96c949b36be" translate="yes" xml:space="preserve">
          <source>Reference: &lt;a href=&quot;http://underscorejs.org/#pick&quot;&gt;link&lt;/a&gt;&lt;strong&gt;_.pick(object, *keys)&lt;/strong&gt;</source>
          <target state="translated">Referencia: &lt;a href=&quot;http://underscorejs.org/#pick&quot;&gt;enlace&lt;/a&gt; &lt;strong&gt;_.pick (objeto, * teclas)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5817e749619edf322d60f85b86cab9c7f83094af" translate="yes" xml:space="preserve">
          <source>Rest-based string property omission</source>
          <target state="translated">OmisiÃ³n de la propiedad de las cuerdas en reposo</target>
        </trans-unit>
        <trans-unit id="ab303515578a450fdf614933afe415b6528c01d1" translate="yes" xml:space="preserve">
          <source>Return a copy of the object, filtered to omit the 
blacklisted keys (or array of keys).</source>
          <target state="translated">Devuelve una copia del objeto,filtrada para omitir las teclas de la lista negra (o la matriz de teclas).</target>
        </trans-unit>
        <trans-unit id="011a1cad4539d30348ba24adcd37dceade1f93c1" translate="yes" xml:space="preserve">
          <source>Return a copy of the object, filtered to only have values for the 
whitelisted keys (or array of valid keys).</source>
          <target state="translated">Devuelve una copia del objeto,filtrada para tener sÃ³lo valores para las claves de la lista blanca (o matriz de claves vÃ¡lidas).</target>
        </trans-unit>
        <trans-unit id="650045349baef87a1fa74815eb1e6653f73e4e45" translate="yes" xml:space="preserve">
          <source>Say I create an object as follows:</source>
          <target state="translated">Digamos que creo un objeto de la siguiente manera:</target>
        </trans-unit>
        <trans-unit id="f5d2829fcf8f71f8331358342fe9021d00422606" translate="yes" xml:space="preserve">
          <source>Setting a property to null before deleting it doesn't accomplish
  anything (unless the object has been sealed by Object.seal and the
  delete fails. That's not usually the case unless you specifically
  try).</source>
          <target state="translated">Poner una propiedad en nulo antes de borrarla no logra nada (a menos que el objeto haya sido sellado por Object.seal y la eliminaciÃ³n falle.No suele ser el caso a menos que lo intente especÃ­ficamente).</target>
        </trans-unit>
        <trans-unit id="a1aeff6040cbaf4a052232c94541c2b536b4a1f3" translate="yes" xml:space="preserve">
          <source>Similarly, removing the entire students array would be done by calling &lt;code&gt;delete Hogwarts.students;&lt;/code&gt; or &lt;code&gt;delete Hogwarts['students'];&lt;/code&gt;.</source>
          <target state="translated">Del mismo modo, la eliminaci&amp;oacute;n de toda la matriz de estudiantes se har&amp;iacute;a llamando a &lt;code&gt;delete Hogwarts.students;&lt;/code&gt; o &lt;code&gt;delete Hogwarts['students'];&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fd410e78d809f27ec1e3bdad4ee5576324a4212e" translate="yes" xml:space="preserve">
          <source>So as it turns out, there actually IS a built-in way to tell if an array is truly an array, and that is &lt;code&gt;Array.isArray()&lt;/code&gt;, introduced in ECMAScript 5 (December 2009). I found this while looking to see if there was a question asking about telling arrays from objects, to see if there was either a better solution than mine, or to add mine if there were none. So, if you're using a version of JavaScript that is earlier than ECMA 5, there's your polyfill. However, I strongly recommend against using my &lt;code&gt;is_array()&lt;/code&gt; function, as continuing to support old versions of JavaScript means continuing to support the old browsers that implement them, which means encouraging the use of insecure software and putting users at risk for malware. So please, use &lt;code&gt;Array.isArray()&lt;/code&gt;. Use &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;. Use the new features that get added to the language. &lt;em&gt;Don't&lt;/em&gt; use vendor prefixes. &lt;em&gt;Delete&lt;/em&gt; that IE polyfill crap from your website. Delete that XHTML &lt;code&gt;&amp;lt;!CDATA[[...&lt;/code&gt; crap, too--we moved to HTML5 back in 2014. The sooner everybody withdraws support for those old/esoteric browsers, the sooner the browser vendors will actually follow the web standard and embrace the new technology, and the sooner we can move on to a more secure web.</source>
          <target state="translated">Resulta que, en realidad, hay una forma integrada de saber si una matriz es realmente una matriz, y esa es &lt;code&gt;Array.isArray()&lt;/code&gt; , presentada en ECMAScript 5 (diciembre de 2009). Encontr&amp;eacute; esto mientras miraba para ver si hab&amp;iacute;a una pregunta sobre c&amp;oacute;mo distinguir las matrices de los objetos, para ver si hab&amp;iacute;a una soluci&amp;oacute;n mejor que la m&amp;iacute;a o para agregar la m&amp;iacute;a si no hab&amp;iacute;a ninguna. Entonces, si est&amp;aacute; utilizando una versi&amp;oacute;n de JavaScript anterior a ECMA 5, est&amp;aacute; su polyfill. Sin embargo, recomiendo no usar mi funci&amp;oacute;n &lt;code&gt;is_array()&lt;/code&gt; , ya que continuar admitiendo versiones antiguas de JavaScript significa continuar admitiendo los navegadores antiguos que los implementan, lo que significa alentar el uso de software inseguro y poner a los usuarios en riesgo de malware. Entonces, por favor, use &lt;code&gt;Array.isArray()&lt;/code&gt; . Use &lt;code&gt;let&lt;/code&gt; y &lt;code&gt;const&lt;/code&gt; . Use las nuevas funciones que se agregan al idioma. &lt;em&gt;No&lt;/em&gt; use prefijos de proveedor. &lt;em&gt;Elimine&lt;/em&gt; esa basura de IE polyfill de su sitio web. Elimine esa basura XHTML &lt;code&gt;&amp;lt;!CDATA[[...&lt;/code&gt; tambi&amp;eacute;n, nos mudamos a HTML5 en 2014. Cuanto antes todos retiren el soporte para esos navegadores antiguos / esot&amp;eacute;ricos, m&amp;aacute;s pronto los proveedores de navegadores seguir&amp;aacute;n el est&amp;aacute;ndar web y adoptar&amp;aacute;n el nueva tecnolog&amp;iacute;a, y cuanto antes podamos pasar a una web m&amp;aacute;s segura.</target>
        </trans-unit>
        <trans-unit id="c1074a68b7264ece395e8476f70ae784fc36b406" translate="yes" xml:space="preserve">
          <source>So, he sends you an email in anger:</source>
          <target state="translated">AsÃ­ que,te envÃ­a un correo electrÃ³nico con ira:</target>
        </trans-unit>
        <trans-unit id="1c63c8fdc7a32a45814f6f70f31838cecabdb16b" translate="yes" xml:space="preserve">
          <source>So, when deleting values from an object, always first consider whether you're dealing with object properties or whether you're dealing with array values, and choose the appropriate strategy based on that.</source>
          <target state="translated">Por lo tanto,cuando se eliminan valores de un objeto,siempre hay que considerar primero si se trata de propiedades del objeto o si se trata de valores de matriz,y elegir la estrategia apropiada en base a eso.</target>
        </trans-unit>
        <trans-unit id="da5db28dd16264310f46eacb87a0cb2b9ceef675" translate="yes" xml:space="preserve">
          <source>Sorry if this didn't add to your specific use case but I believe this to be a good design to adapt when managing objects and their properties.</source>
          <target state="translated">Lo siento si esto no se aÃ±adiÃ³ a su caso de uso especÃ­fico,pero creo que este es un buen diseÃ±o para adaptar cuando se manejan los objetos y sus propiedades.</target>
        </trans-unit>
        <trans-unit id="ace92799b8ad9dc2af653b95d2a4f16910423d4b" translate="yes" xml:space="preserve">
          <source>Suppose you have an object that looks like this:</source>
          <target state="translated">Supongamos que tienes un objeto que se parece a esto:</target>
        </trans-unit>
        <trans-unit id="c5229642bf5961f2b277471727e88e647035ac9e" translate="yes" xml:space="preserve">
          <source>Syntax-based string property omission</source>
          <target state="translated">OmisiÃ³n de la propiedad de la cadena basada en la sintaxis</target>
        </trans-unit>
        <trans-unit id="07c468c127104c88b077c6e07b9d9ec7d4fdbf7d" translate="yes" xml:space="preserve">
          <source>THE LONG VERSION</source>
          <target state="translated">LA VERSIÃ“N LARGA</target>
        </trans-unit>
        <trans-unit id="11405ca028271229b8731c4ce6c20d04dc54cc92" translate="yes" xml:space="preserve">
          <source>THE SHORT VERSION</source>
          <target state="translated">LA VERSIÃ“N CORTA</target>
        </trans-unit>
        <trans-unit id="39fdec1194d94212b871a28b2aa04a73cd40fce1" translate="yes" xml:space="preserve">
          <source>Tests</source>
          <target state="translated">Tests</target>
        </trans-unit>
        <trans-unit id="748beb2ad7204d2997b5d2a12f2e0bc89bcc8e5e" translate="yes" xml:space="preserve">
          <source>That actually isn't what's happening, but it's easier to think of that way. According to MDN, here's what's actually happening:</source>
          <target state="translated">Eso no es lo que realmente estÃ¡ pasando,pero es mÃ¡s fÃ¡cil pensar de esa manera.De acuerdo con el MDN,esto es lo que realmente estÃ¡ pasando:</target>
        </trans-unit>
        <trans-unit id="cf85fec62dde51f1637af10a625442c3baea4c48" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete&quot;&gt;delete operator&lt;/a&gt; is the best way to do so.</source>
          <target state="translated">El &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete&quot;&gt;operador de eliminaci&amp;oacute;n&lt;/a&gt; es la mejor manera de hacerlo.</target>
        </trans-unit>
        <trans-unit id="881ea24ac20b3a2b7bbbd8208c871ee412db982f" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;key remains on its place in the hashmap&lt;/strong&gt;, only the value is replaced with &lt;code&gt;undefined&lt;/code&gt;. Understand, that &lt;code&gt;for..in&lt;/code&gt; loop will still iterate over that key.</source>
          <target state="translated">La &lt;strong&gt;clave permanece en su lugar en el hashmap&lt;/strong&gt; , solo el valor se reemplaza por &lt;code&gt;undefined&lt;/code&gt; . Comprenda que &lt;code&gt;for..in&lt;/code&gt; loop seguir&amp;aacute; iterando sobre esa clave.</target>
        </trans-unit>
        <trans-unit id="edc38116420d64a21ebfee30ed9c7476267110df" translate="yes" xml:space="preserve">
          <source>The Solution: &lt;code&gt;Array.prototype.splice&lt;/code&gt;</source>
          <target state="translated">La soluci&amp;oacute;n: &lt;code&gt;Array.prototype.splice&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="071cbdf7a24a78eb243d7c493b80aadba4657908" translate="yes" xml:space="preserve">
          <source>The actual answer to the question</source>
          <target state="translated">La respuesta real a la pregunta</target>
        </trans-unit>
        <trans-unit id="c0ec14910cf4674ceea7f9ad991e964445d6c9ac" translate="yes" xml:space="preserve">
          <source>The answer would be to &lt;strong&gt;delete all the references you have in your code, pointed to that very object&lt;/strong&gt; and also &lt;strong&gt;not use &lt;code&gt;var&lt;/code&gt; statements to create new references to that object&lt;/strong&gt;. This last point regarding &lt;code&gt;var&lt;/code&gt; statements, is one of the most crucial issues that we are usually faced with, because using &lt;code&gt;var&lt;/code&gt; statements would prevent the created object from getting removed.</source>
          <target state="translated">La respuesta ser&amp;iacute;a &lt;strong&gt;eliminar todas las referencias que tiene en su c&amp;oacute;digo, apuntado a ese mismo objeto&lt;/strong&gt; y tambi&amp;eacute;n &lt;strong&gt;no usar declaraciones &lt;code&gt;var&lt;/code&gt; para crear nuevas referencias a ese objeto&lt;/strong&gt; . Este &amp;uacute;ltimo punto con respecto a las declaraciones &lt;code&gt;var&lt;/code&gt; , es uno de los problemas m&amp;aacute;s cruciales que generalmente enfrentamos, porque el uso de las declaraciones &lt;code&gt;var&lt;/code&gt; evitar&amp;iacute;a que el objeto creado se elimine.</target>
        </trans-unit>
        <trans-unit id="c25007fa1063a6b669074a068e8e0d9c200dbaad" translate="yes" xml:space="preserve">
          <source>The contrived and long-winded PDP-11 scenario</source>
          <target state="translated">El escenario del PDP-11,artificial y de larga duraciÃ³n...</target>
        </trans-unit>
        <trans-unit id="f621835acbbff87822c037f614ae8feebd84f7e5" translate="yes" xml:space="preserve">
          <source>The delete operator removes a given property from an object. On
  successful deletion, it will return true, else false will be returned.
  However, it is important to consider the following scenarios:</source>
          <target state="translated">El operador de eliminaciÃ³n elimina una propiedad determinada de un objeto.Si se borra con Ã©xito,devolverÃ¡ true,si no,devolverÃ¡ false.Sin embargo,es importante considerar los siguientes escenarios:</target>
        </trans-unit>
        <trans-unit id="88d438bbfeb05c4266f6e27b90dcb851c6f60ce6" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;delete&lt;/code&gt; and &lt;code&gt;deleteProperty&lt;/code&gt; is when using strict mode:</source>
          <target state="translated">La diferencia entre &lt;code&gt;delete&lt;/code&gt; y &lt;code&gt;deleteProperty&lt;/code&gt; es cuando se usa el modo estricto:</target>
        </trans-unit>
        <trans-unit id="efccd6cd704a79d07bccddefc3adbae94e968c39" translate="yes" xml:space="preserve">
          <source>The following snippet gives another simple example:</source>
          <target state="translated">El siguiente fragmento da otro ejemplo sencillo:</target>
        </trans-unit>
        <trans-unit id="bf8a2a946389853c6d0799bf61400c9d604dd48d" translate="yes" xml:space="preserve">
          <source>The index specified by &lt;code&gt;end&lt;/code&gt; is simply excluded from the slice. The parenthesized indices indicate what gets sliced. Either way, the behavior is not intuitive and it's bound to cause its fair share of off-by-one errors, so you might find it useful to make a wrapper function to more closely emulate the behavior of &lt;code&gt;.splice()&lt;/code&gt;:</source>
          <target state="translated">El &amp;iacute;ndice especificado por &lt;code&gt;end&lt;/code&gt; simplemente se excluye del segmento. Los &amp;iacute;ndices entre par&amp;eacute;ntesis indican lo que se corta. De cualquier manera, el comportamiento no es intuitivo y est&amp;aacute; destinado a causar una buena cantidad de errores, por lo que puede ser &amp;uacute;til hacer una funci&amp;oacute;n de envoltura para emular m&amp;aacute;s estrechamente el comportamiento de &lt;code&gt;.splice()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="367c08658a0eaac4d7f551272d9531077bdd6a38" translate="yes" xml:space="preserve">
          <source>The other important point here is to be careful about your other references to the same object. For instance, if you create a variable like:</source>
          <target state="translated">El otro punto importante aquÃ­ es ser cuidadoso con sus otras referencias al mismo objeto.Por ejemplo,si creas una variable como:</target>
        </trans-unit>
        <trans-unit id="556ff37bb94e5cbb3dd116d5ddf709d4c4f7ed56" translate="yes" xml:space="preserve">
          <source>The programming ethos/patterns you and your team use. Do you favor functional approaches and mutation is verboten on your team, or do you employ wild west mutative object-oriented techniques?</source>
          <target state="translated">Los patrones de programaciÃ³n que usted y su equipo utilizan.Â¿EstÃ¡ a favor de los enfoques funcionales y la mutaciÃ³n estÃ¡ verboten en su equipo,o emplea tÃ©cnicas orientadas a objetos mutativos del salvaje oeste?</target>
        </trans-unit>
        <trans-unit id="6357292b24fba94284af6389041f255b8a00f04f" translate="yes" xml:space="preserve">
          <source>The range of object types you want to remove properties on and the type of property names you need to be able to omit (Strings only? Symbols? Weak references mapped from arbitrary objects? These have all been types of property pointers in JavaScript for years now)</source>
          <target state="translated">El rango de tipos de objetos en los que desea eliminar las propiedades y el tipo de nombres de propiedades que necesita poder omitir (Â¿SÃ³lo cadenas? Â¿SÃ­mbolos? Â¿Referencias dÃ©biles mapeadas de objetos arbitrarios? Todos estos han sido tipos de punteros de propiedades en JavaScript desde hace aÃ±os)</target>
        </trans-unit>
        <trans-unit id="3fea2fb86e2276224dff32e33243b1e22287ed2d" translate="yes" xml:space="preserve">
          <source>The reason for writing this new &lt;code&gt;unset&lt;/code&gt; function, is to keep the index of all other variables in this hash_map. Look at the following example, and see how the index of &quot;test2&quot; did not change after removing a value from the hash_map.</source>
          <target state="translated">La raz&amp;oacute;n para escribir esta nueva funci&amp;oacute;n no establecida es mantener el &amp;iacute;ndice de todas las dem&amp;aacute;s variables en este hash_map. Mire el siguiente ejemplo y vea c&amp;oacute;mo el &amp;iacute;ndice de &quot;test2&quot; no cambi&amp;oacute; despu&amp;eacute;s de eliminar un valor de hash_map.</target>
        </trans-unit>
        <trans-unit id="e16825f749b4e5fb7d1fecf43d4e6b653061e2e8" translate="yes" xml:space="preserve">
          <source>The result would be &lt;code&gt;false&lt;/code&gt;, which means that your delete statement haven't been executed as you expected. But if you had not created that variable before, and you only had &lt;code&gt;myOtherObject[&quot;regex&quot;]&lt;/code&gt; as your last existing reference, you could have done this just by removing it like:</source>
          <target state="translated">El resultado ser&amp;iacute;a &lt;code&gt;false&lt;/code&gt; , lo que significa que su declaraci&amp;oacute;n de eliminaci&amp;oacute;n no se ha ejecutado como esperaba. Pero si no hab&amp;iacute;a creado esa variable antes, y solo ten&amp;iacute;a &lt;code&gt;myOtherObject[&quot;regex&quot;]&lt;/code&gt; como su &amp;uacute;ltima referencia existente, podr&amp;iacute;a haberlo hecho simplemente elimin&amp;aacute;ndolo como:</target>
        </trans-unit>
        <trans-unit id="f6481accf44872d4ef8745c055193c2829ccd3cb" translate="yes" xml:space="preserve">
          <source>The term you have used in your question title &lt;code&gt;Remove a property from a JavaScript object&lt;/code&gt;, can be interpreted in some different ways. The one is to remove it for whole the memory and the list of object keys or the other is just to remove it from your object. As it has been mentioned in some other answers, the &lt;code&gt;delete&lt;/code&gt; keyword is the main part. Let's say you have your object like:</source>
          <target state="translated">El t&amp;eacute;rmino que ha utilizado en el t&amp;iacute;tulo de su pregunta &lt;code&gt;Remove a property from a JavaScript object&lt;/code&gt; puede interpretarse de diferentes maneras. El primero es eliminarlo por completo de la memoria y la lista de claves de objeto o el otro es simplemente eliminarlo de su objeto. Como se ha mencionado en algunas otras respuestas, la palabra clave &lt;code&gt;delete&lt;/code&gt; es la parte principal. Digamos que tienes tu objeto como:</target>
        </trans-unit>
        <trans-unit id="d7c42d645c208dfd4e3c38a50db94ab5a07bdf03" translate="yes" xml:space="preserve">
          <source>The version of ECMAScript you're targeting</source>
          <target state="translated">La versiÃ³n de ECMAScript a la que estÃ¡s apuntando</target>
        </trans-unit>
        <trans-unit id="2d17e745883099706ab5b904d19b87cebce1764f" translate="yes" xml:space="preserve">
          <source>Then even if you remove it from your object &lt;code&gt;myJSONObject&lt;/code&gt;, that specific object won't get deleted from the memory, since the &lt;code&gt;regex&lt;/code&gt; variable and &lt;code&gt;myOtherObject[&quot;regex&quot;]&lt;/code&gt; still have their values. Then how could we remove the object from the memory for sure?</source>
          <target state="translated">Luego, incluso si lo elimina de su objeto &lt;code&gt;myJSONObject&lt;/code&gt; , ese objeto espec&amp;iacute;fico no se eliminar&amp;aacute; de la memoria, ya que la variable &lt;code&gt;regex&lt;/code&gt; y &lt;code&gt;myOtherObject[&quot;regex&quot;]&lt;/code&gt; todav&amp;iacute;a tienen sus valores. Entonces, &amp;iquest;c&amp;oacute;mo podr&amp;iacute;amos eliminar el objeto de la memoria con seguridad?</target>
        </trans-unit>
        <trans-unit id="9f315ff9ba259ec4af4aad477da9caf99c783595" translate="yes" xml:space="preserve">
          <source>Then your objects key using &lt;code&gt;Object.keys(myJSONObject)&lt;/code&gt; would be:</source>
          <target state="translated">Entonces su clave de objetos usando &lt;code&gt;Object.keys(myJSONObject)&lt;/code&gt; ser&amp;iacute;a:</target>
        </trans-unit>
        <trans-unit id="950ba1d1f6aad6e3258d15bc7f08a5e034f6a816" translate="yes" xml:space="preserve">
          <source>There are a lot of good answers here but I just want to chime in that when using delete to remove a property in JavaScript, it is often wise to first check if that property exists to prevent errors.</source>
          <target state="translated">Hay muchas buenas respuestas aquÃ­,pero sÃ³lo quiero decir que cuando se usa borrar para eliminar una propiedad en JavaScript,a menudo es prudente comprobar primero si esa propiedad existe para evitar errores.</target>
        </trans-unit>
        <trans-unit id="57100a7adc73f2ac8fb1259dcb31d2cae8056822" translate="yes" xml:space="preserve">
          <source>There are few common ways to remove a property from an object.</source>
          <target state="translated">Hay pocas maneras comunes de quitar una propiedad de un objeto.</target>
        </trans-unit>
        <trans-unit id="8604def9bd3e30573031d5be629fb2bb0c18ca39" translate="yes" xml:space="preserve">
          <source>There are many different options presented on this page, not because most of the options are wrong&amp;mdash;or because the answers are duplicates&amp;mdash;but because the appropriate technique depends on the situation you're in and the goals of the tasks you and/or you team are trying to fulfill. To answer you question unequivocally, one needs to know:</source>
          <target state="translated">Hay muchas opciones diferentes que se presentan en esta p&amp;aacute;gina, no porque la mayor&amp;iacute;a de las opciones sean incorrectas o porque las respuestas sean duplicadas, sino porque la t&amp;eacute;cnica adecuada depende de la situaci&amp;oacute;n en la que se encuentre y de los objetivos de las tareas que usted y / o usted El equipo est&amp;aacute; tratando de cumplir. Para responder su pregunta inequ&amp;iacute;vocamente, uno necesita saber:</target>
        </trans-unit>
        <trans-unit id="5f1efa2f9fb405d638f74fe5349dbabb89e0514a" translate="yes" xml:space="preserve">
          <source>They are slow &amp;amp; memory inefficient. When accessing a specific index, instead of just getting the global type for the array, the browser instead has to get the type on a per-index basis whereby each index stores the additional metadata of its type.</source>
          <target state="translated">Son lentos y la memoria es ineficiente. Al acceder a un &amp;iacute;ndice espec&amp;iacute;fico, en lugar de obtener el tipo global para la matriz, el navegador debe obtener el tipo por &amp;iacute;ndice, por lo que cada &amp;iacute;ndice almacena los metadatos adicionales de su tipo.</target>
        </trans-unit>
        <trans-unit id="afa3b2f30890db447e4cf00d9f2dcec7b332b01b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;ES6&lt;/code&gt; operator allows us to return a brand new object, excluding any properties, without mutating the existing object. The downside is that it has the worse performance out of the above and not suggested to be used when you need to remove many properties at a time.</source>
          <target state="translated">Este operador &lt;code&gt;ES6&lt;/code&gt; nos permite devolver un objeto nuevo, excluyendo cualquier propiedad, sin mutar el objeto existente. La desventaja es que tiene el peor rendimiento de lo anterior y no se sugiere su uso cuando necesita eliminar muchas propiedades a la vez.</target>
        </trans-unit>
        <trans-unit id="9e7248bc6c7cf17aeb43a8906d8cc8e3b531512b" translate="yes" xml:space="preserve">
          <source>This alternative is not the correct answer to this question! But, if you use it with care, you can dramatically speed up some algorithms. If you are using &lt;code&gt;delete&lt;/code&gt; in loops and you have problems with performance, read the verbose explanation.</source>
          <target state="translated">&amp;iexcl;Esta alternativa no es la respuesta correcta a esta pregunta! Pero, si lo usa con cuidado, puede acelerar dr&amp;aacute;sticamente algunos algoritmos. Si est&amp;aacute; utilizando &lt;code&gt;delete&lt;/code&gt; en bucles y tiene problemas con el rendimiento, lea la explicaci&amp;oacute;n detallada.</target>
        </trans-unit>
        <trans-unit id="d2696a11c056f55fc8c70ea4ff94e4f5922248e1" translate="yes" xml:space="preserve">
          <source>This category is for operating on object literals or object instances when you want to retain/continue to use the original reference and aren't using stateless functional principles in your code. An example piece of syntax in this category:</source>
          <target state="translated">Esta categorÃ­a es para operar en literales de objetos o instancias de objetos cuando se desea retener,continuar usando la referencia original y no se estÃ¡n usando principios funcionales apÃ¡tridas en su cÃ³digo.Un ejemplo de sintaxis en esta categorÃ­a:</target>
        </trans-unit>
        <trans-unit id="1f8c0c20dd501470cb117b73c855e583ae2e0193" translate="yes" xml:space="preserve">
          <source>This category is for operating on object literals or object instances when you want to retain/continue to use the original reference while guarding against exceptions being thrown on unconfigurable properties:</source>
          <target state="translated">Esta categorÃ­a es para operar sobre literales de objetos o instancias de objetos cuando se desea retener,seguir utilizando la referencia original y al mismo tiempo evitar que las excepciones se lancen sobre propiedades no configurables:</target>
        </trans-unit>
        <trans-unit id="94bdb987c00caa2e598854f97ea3c6de4e30eedf" translate="yes" xml:space="preserve">
          <source>This category is for operating on plain object or array instances in newer ECMAScript flavors when a non-mutative approach is desired and you don't need to account for Symbol keys:</source>
          <target state="translated">Esta categorÃ­a es para operar en instancias de objetos simples o arreglos en los nuevos sabores de ECMAScript cuando se desea un enfoque no conmutable y no es necesario tener en cuenta las claves de los sÃ­mbolos:</target>
        </trans-unit>
        <trans-unit id="aba34382b27aca74b69be04c741119ab744a49b9" translate="yes" xml:space="preserve">
          <source>This category is generally allows for greater functional flexibility, including accounting for Symbols &amp;amp; omitting more than one property in one statement:</source>
          <target state="translated">Esta categor&amp;iacute;a generalmente permite una mayor flexibilidad funcional, incluida la contabilidad de s&amp;iacute;mbolos y la omisi&amp;oacute;n de m&amp;aacute;s de una propiedad en una declaraci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="17ff7f9c0c298023ffef1288d23c2efc74ebdf5c" translate="yes" xml:space="preserve">
          <source>This category is the oldest, most straightforward &amp;amp; most widely supported category of property removal. It supports &lt;code&gt;Symbol&lt;/code&gt; &amp;amp; array indexes in addition to strings and works in every version of JavaScript except for the very first release. However, it's mutative which violates some programming principles and has performance implications. It also can result in uncaught exceptions when used on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete&quot;&gt;non-configurable properties in strict mode&lt;/a&gt;.</source>
          <target state="translated">Esta categor&amp;iacute;a es la categor&amp;iacute;a m&amp;aacute;s antigua, m&amp;aacute;s directa y m&amp;aacute;s ampliamente admitida de eliminaci&amp;oacute;n de propiedades. Admite &amp;iacute;ndices de &lt;code&gt;Symbol&lt;/code&gt; y matrices adem&amp;aacute;s de cadenas y funciona en todas las versiones de JavaScript, excepto en la primera versi&amp;oacute;n. Sin embargo, es mutante, lo que viola algunos principios de programaci&amp;oacute;n y tiene implicaciones de rendimiento. Tambi&amp;eacute;n puede dar lugar a excepciones no detectadas cuando se usa en &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete&quot;&gt;propiedades no configurables en modo estricto&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4ad77472ac7767c23050851eada92d065c2bd943" translate="yes" xml:space="preserve">
          <source>This is in regard to this (now-removed) snippet:</source>
          <target state="translated">Esto se refiere a este fragmento (ahora eliminado):</target>
        </trans-unit>
        <trans-unit id="21292c660408d1ff92d4a1c2c4eafdd76c276e51" translate="yes" xml:space="preserve">
          <source>This post is very old and I find it very helpful so I decided to share the unset function I wrote in case someone else see this post and think why it's not so simple as it in PHP unset function.</source>
          <target state="translated">Este post es muy antiguo y lo encuentro muy Ãºtil,asÃ­ que decidÃ­ compartir la funciÃ³n unset que escribÃ­ en caso de que alguien mÃ¡s vea este post y piense por quÃ© no es tan simple como en la funciÃ³n unset de PHP.</target>
        </trans-unit>
        <trans-unit id="9603916ceb02f62ecad35613c65fb5ceed83b60d" translate="yes" xml:space="preserve">
          <source>This works in Firefox and Internet&amp;nbsp;Explorer, and I think it works in all others.</source>
          <target state="translated">Esto funciona en Firefox e Internet Explorer, y creo que funciona en todos los dem&amp;aacute;s.</target>
        </trans-unit>
        <trans-unit id="c685cc94e2b05416a2b9215116753bb12c7af729" translate="yes" xml:space="preserve">
          <source>To complete @Koen answer in this thread, in case you want to remove dynamic variable using the spread syntax, you can do it like so:</source>
          <target state="translated">Para completar la respuesta @Koen en este hilo,en caso de que quieras eliminar la variable dinÃ¡mica usando la sintaxis de difusiÃ³n,puedes hacerlo asÃ­:</target>
        </trans-unit>
        <trans-unit id="a792292997434d58f8b1d7da4af78863ac5e4684" translate="yes" xml:space="preserve">
          <source>To get more info on &lt;code&gt;Object.seal&lt;/code&gt;: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal&quot;&gt;Object.seal()&lt;/a&gt;</source>
          <target state="translated">Para obtener m&amp;aacute;s informaci&amp;oacute;n sobre &lt;code&gt;Object.seal&lt;/code&gt; : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal&quot;&gt;Object.seal ()&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="96589c0ac9acf3a6b58f6928336639e582088ee3" translate="yes" xml:space="preserve">
          <source>To reassign to the same variable, use a &lt;code&gt;let&lt;/code&gt;:</source>
          <target state="translated">Para reasignar a la misma variable, use &lt;code&gt;let&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="21af806df3feb60911002a77c4380b2b484f7bbf" translate="yes" xml:space="preserve">
          <source>To remove any property, say &lt;code&gt;key1&lt;/code&gt;, use the &lt;code&gt;delete&lt;/code&gt; keyword like this:</source>
          <target state="translated">Para eliminar cualquier propiedad, digamos &lt;code&gt;key1&lt;/code&gt; , use la palabra clave &lt;code&gt;delete&lt;/code&gt; como esta:</target>
        </trans-unit>
        <trans-unit id="fa15c129befde7656ac754122a25210685ef2188" translate="yes" xml:space="preserve">
          <source>To summarize, differences are all about ways of determining the property existence, and about &lt;code&gt;for..in&lt;/code&gt; loop.</source>
          <target state="translated">Para resumir, las diferencias tienen que ver con las formas de determinar la existencia de la propiedad, y con respecto a &lt;code&gt;for..in&lt;/code&gt; bucle.</target>
        </trans-unit>
        <trans-unit id="87501fb0e92ec552bdf306c07f48852286e9c8c8" translate="yes" xml:space="preserve">
          <source>To whoever needs it...</source>
          <target state="translated">A quien lo necesite...</target>
        </trans-unit>
        <trans-unit id="b7ff74710b25d787ff3d518b1667a655a5936c78" translate="yes" xml:space="preserve">
          <source>Try the following method. Assign the &lt;code&gt;Object&lt;/code&gt; property value to &lt;code&gt;undefined&lt;/code&gt;. Then &lt;code&gt;stringify&lt;/code&gt; the object and &lt;code&gt;parse&lt;/code&gt;.</source>
          <target state="translated">Prueba el siguiente m&amp;eacute;todo. Asigne el valor de la propiedad &lt;code&gt;Object&lt;/code&gt; a &lt;code&gt;undefined&lt;/code&gt; . Luego &lt;code&gt;stringify&lt;/code&gt; el objeto y analice .</target>
        </trans-unit>
        <trans-unit id="3d82a9f15156c36519fc72f9af221c32d7422e29" translate="yes" xml:space="preserve">
          <source>Try this</source>
          <target state="translated">Pruebe esto.</target>
        </trans-unit>
        <trans-unit id="828f97e6c91f157ecd45fc8183a07ca7b4e95e6f" translate="yes" xml:space="preserve">
          <source>Update regarding &lt;code&gt;is_array()&lt;/code&gt;</source>
          <target state="translated">Actualizaci&amp;oacute;n sobre &lt;code&gt;is_array()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d45aa1f9d8100f951a216d7ce715ec8d99477eb3" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;http://ramdajs.com/docs/#dissoc&quot;&gt;ramda#dissoc&lt;/a&gt; you will get a new object without the attribute &lt;code&gt;regex&lt;/code&gt;:</source>
          <target state="translated">Usando &lt;a href=&quot;http://ramdajs.com/docs/#dissoc&quot;&gt;ramda # dissoc&lt;/a&gt; obtendr&amp;aacute;s un nuevo objeto sin el atributo &lt;code&gt;regex&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="930151a2e26bf074e4b81d244de5799b750be707" translate="yes" xml:space="preserve">
          <source>Using &lt;strong&gt;delete&lt;/strong&gt; method is the best way to do that, as per MDN description, the delete operator removes a property from an object. So you can simply write:</source>
          <target state="translated">El uso del m&amp;eacute;todo de &lt;strong&gt;eliminaci&amp;oacute;n&lt;/strong&gt; es la mejor manera de hacerlo, seg&amp;uacute;n la descripci&amp;oacute;n de MDN, el operador de eliminaci&amp;oacute;n elimina una propiedad de un objeto. Entonces simplemente puedes escribir:</target>
        </trans-unit>
        <trans-unit id="855d634ee489e4e0a2c811671f665628a0a0df6f" translate="yes" xml:space="preserve">
          <source>Using ES6:</source>
          <target state="translated">Usando ES6:</target>
        </trans-unit>
        <trans-unit id="9fb406e463a70799e2a3db3cb0956dde6058516c" translate="yes" xml:space="preserve">
          <source>Using this method, not all &lt;a href=&quot;https://stackoverflow.com/questions/1894792/determining-if-a-javascript-object-has-a-given-property&quot;&gt;ways of determining property existence&lt;/a&gt; will work as expected.</source>
          <target state="translated">Con este m&amp;eacute;todo, no todas las &lt;a href=&quot;https://stackoverflow.com/questions/1894792/determining-if-a-javascript-object-has-a-given-property&quot;&gt;formas de determinar la existencia de propiedades&lt;/a&gt; funcionar&amp;aacute;n como se espera.</target>
        </trans-unit>
        <trans-unit id="7d56ccd01dc2c25715aa91cc5c3b3239162d1db4" translate="yes" xml:space="preserve">
          <source>What follows is a contrived scenario that gets pretty long-winded, so you can skip to the section, &lt;strong&gt;The Solution&lt;/strong&gt;, if you want. The only reason I leave this section it is that I think some people probably think it's funny, and I don't want to be &quot;that guy&quot; who posts a &quot;funny&quot; answer and then deletes all the &quot;funny&quot; from it later on.</source>
          <target state="translated">Lo que sigue es un escenario artificial que se alarga bastante, por lo que puede saltar a la secci&amp;oacute;n, &lt;strong&gt;La Soluci&amp;oacute;n&lt;/strong&gt; , si lo desea. La &amp;uacute;nica raz&amp;oacute;n por la que dejo esta secci&amp;oacute;n es porque creo que algunas personas probablemente piensan que es gracioso, y no quiero ser &quot;ese tipo&quot; que publica una respuesta &quot;graciosa&quot; y luego borra todos los &quot;graciosos&quot; m&amp;aacute;s adelante. .</target>
        </trans-unit>
        <trans-unit id="e8a0f3d5fef79ddff6c740f20faf1841e9c8a913" translate="yes" xml:space="preserve">
          <source>What is the best way to remove the property &lt;code&gt;regex&lt;/code&gt; to end up with new &lt;code&gt;myObject&lt;/code&gt; as follows?</source>
          <target state="translated">&amp;iquest;Cu&amp;aacute;l es la mejor manera de eliminar la &lt;code&gt;regex&lt;/code&gt; propiedad para terminar con &lt;code&gt;myObject&lt;/code&gt; nuevo de la siguiente manera?</target>
        </trans-unit>
        <trans-unit id="269ad8f4ba0c959d755966ae84263f7c06ef0a98" translate="yes" xml:space="preserve">
          <source>When should one use &lt;code&gt;delete&lt;/code&gt; and when set value to &lt;code&gt;undefined&lt;/code&gt; ?</source>
          <target state="translated">&amp;iquest;Cu&amp;aacute;ndo se debe usar &lt;code&gt;delete&lt;/code&gt; y establecer el valor en &lt;code&gt;undefined&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="f73054e5169db0bc5c2ed5932270c4a709d901aa" translate="yes" xml:space="preserve">
          <source>When using a Symbol, wait, why are you using a Symbol?!?! Symbols are bad  juju for performance. Everything programmed to use Symbols can be reprogrammed to not use Symbols, resulting in a faster code without Symbols. Symbols are really just super inefficient meta-sugar.</source>
          <target state="translated">Cuando se usa un SÃ­mbolo,espera,Â¡Â¿por quÃ© estÃ¡s usando un SÃ­mbolo?!? Los sÃ­mbolos son un mal juju para la actuaciÃ³n.Todo lo programado para usar sÃ­mbolos puede ser reprogramado para no usarlos,resultando en un cÃ³digo mÃ¡s rÃ¡pido sin sÃ­mbolos.Los sÃ­mbolos son realmente sÃ³lo meta-azÃºcar sÃºper ineficiente.</target>
        </trans-unit>
        <trans-unit id="602ae3083b5ceb94cfa5bb3b6f0e1f19f1f16418" translate="yes" xml:space="preserve">
          <source>When using an array/variable typed to the boolean primitive, use either &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; as the empty value. While avoiding unnecessary polymorphism is good, rewriting all your code to explicitly forbid it will likely actually result in a decrease in performance. Use common judgement!</source>
          <target state="translated">Cuando use una matriz / variable escrita en la primitiva booleana, use &lt;code&gt;false&lt;/code&gt; o &lt;code&gt;undefined&lt;/code&gt; como el valor vac&amp;iacute;o. Si bien evitar el polimorfismo innecesario es bueno, reescribir todo el c&amp;oacute;digo para prohibirlo expl&amp;iacute;citamente probablemente resulte en una disminuci&amp;oacute;n del rendimiento. Use el juicio com&amp;uacute;n!</target>
        </trans-unit>
        <trans-unit id="97e2c329b633d1758a70203709d67ea5a41bbc86" translate="yes" xml:space="preserve">
          <source>When using an array/variable typed to the number primitive, use &lt;code&gt;0&lt;/code&gt; as the empty value. Note that internally, there are two types of numbers: fast integers (2147483647 to -2147483648 inclusive) and slow floating point doubles (anything other than that including &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;Infinity&lt;/code&gt;). When an integer is demoted to a double, it cannot be promoted back to an integer.</source>
          <target state="translated">Cuando use una matriz / variable escrita en la primitiva num&amp;eacute;rica, use &lt;code&gt;0&lt;/code&gt; como valor vac&amp;iacute;o. Tenga en cuenta que internamente, hay dos tipos de n&amp;uacute;meros: enteros r&amp;aacute;pidos (2147483647 a -2147483648 inclusive) y dobles de coma flotante lenta (cualquier cosa que no sea &lt;code&gt;NaN&lt;/code&gt; e &lt;code&gt;Infinity&lt;/code&gt; ). Cuando un entero se degrada a un doble, no se puede volver a promocionar a un entero.</target>
        </trans-unit>
        <trans-unit id="363e06ebcbb46e5d020be755b34062c111648564" translate="yes" xml:space="preserve">
          <source>When using an array/variable typed to the string primitive, use &lt;code&gt;&quot;&quot;&lt;/code&gt; as the empty value.</source>
          <target state="translated">Cuando use una matriz / variable escrita en la cadena primitiva, use &lt;code&gt;&quot;&quot;&lt;/code&gt; como el valor vac&amp;iacute;o.</target>
        </trans-unit>
        <trans-unit id="2daf2d7377c143fd1982ce05f553ab2ba4bd19a7" translate="yes" xml:space="preserve">
          <source>When using anything else, use &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">Cuando use cualquier otra cosa, use &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="99129be375514e4d040c762996086e2002e66f2e" translate="yes" xml:space="preserve">
          <source>Which is a terrible justification for getting rid of the &lt;code&gt;null&lt;/code&gt;s--&lt;code&gt;null&lt;/code&gt; is only dangerous if used improperly, and it has nothing to do with &quot;precision&quot;. The real reason you shouldn't &lt;code&gt;delete&lt;/code&gt; from an array is that leaving garbage-filled and messy data structures around is sloppy and bug-prone.</source>
          <target state="translated">Lo cual es una justificaci&amp;oacute;n terrible para deshacerse del &lt;code&gt;null&lt;/code&gt; s-- &lt;code&gt;null&lt;/code&gt; solo es peligroso si se usa incorrectamente, y no tiene nada que ver con la &quot;precisi&amp;oacute;n&quot;. La verdadera raz&amp;oacute;n por la que no debe &lt;code&gt;delete&lt;/code&gt; de una matriz es que dejar estructuras de datos llenas de basura y desordenadas es descuidado y propenso a errores.</target>
        </trans-unit>
        <trans-unit id="1f5947457b95655f5329f1cfd08d1b56c64dd6e7" translate="yes" xml:space="preserve">
          <source>Which means in this case you won't be able to remove that object because you have created the &lt;code&gt;regex&lt;/code&gt; variable via a &lt;code&gt;var&lt;/code&gt; statement, and if you do:</source>
          <target state="translated">Lo que significa que en este caso no podr&amp;aacute; eliminar ese objeto porque ha creado la variable &lt;code&gt;regex&lt;/code&gt; a trav&amp;eacute;s de una instrucci&amp;oacute;n &lt;code&gt;var&lt;/code&gt; , y si lo hace:</target>
        </trans-unit>
        <trans-unit id="4f17f120087f0ca40e417b064249125802d82ec5" translate="yes" xml:space="preserve">
          <source>While using &lt;code&gt;obj[prop] = undefined&lt;/code&gt; is faster than doing &lt;code&gt;delete obj[prop]&lt;/code&gt;, another important consideration is that &lt;code&gt;obj[prop] = undefined&lt;/code&gt; may not always be appropriate. &lt;code&gt;delete obj[prop]&lt;/code&gt; removes &lt;code&gt;prop&lt;/code&gt; from &lt;code&gt;obj&lt;/code&gt; and erases it from memory whereas &lt;code&gt;obj[prop] = undefined&lt;/code&gt; simply sets the value of &lt;code&gt;prop&lt;/code&gt; to &lt;code&gt;undefined&lt;/code&gt; which leaves &lt;code&gt;prop&lt;/code&gt; still in memory. Therefore, in circumstances where there are many keys being created and deleted, using &lt;code&gt;obj[prop] = undefined&lt;/code&gt; can force expensive memory reconciliation (causing the page to freeze up) and potentially an out-of-memory error. Examine the following code.</source>
          <target state="translated">Si bien usar &lt;code&gt;obj[prop] = undefined&lt;/code&gt; es m&amp;aacute;s r&amp;aacute;pido que &lt;code&gt;delete obj[prop]&lt;/code&gt; , otra consideraci&amp;oacute;n importante es que &lt;code&gt;obj[prop] = undefined&lt;/code&gt; no siempre es apropiado. &lt;code&gt;delete obj[prop]&lt;/code&gt; elimina &lt;code&gt;prop&lt;/code&gt; de &lt;code&gt;obj&lt;/code&gt; y lo borra de la memoria, mientras que &lt;code&gt;obj[prop] = undefined&lt;/code&gt; simplemente establece el valor de &lt;code&gt;prop&lt;/code&gt; en &lt;code&gt;undefined&lt;/code&gt; ,lo que deja &lt;code&gt;prop&lt;/code&gt; en memoria. Por lo tanto, en circunstancias en las que se crean y eliminan muchas claves, el uso de &lt;code&gt;obj[prop] = undefined&lt;/code&gt; puede forzar una costosa reconciliaci&amp;oacute;n de memoria (haciendo que la p&amp;aacute;gina se congele) y potencialmente un error de falta de memoria. Examina el siguiente c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="9fc668854fffc36979144c2d4415e9f9721712c0" translate="yes" xml:space="preserve">
          <source>While you technically can use &lt;code&gt;delete&lt;/code&gt; for an array, using it would result in getting incorrect results when calling for example &lt;code&gt;Hogwarts.staff.length&lt;/code&gt; later on. In other words, &lt;code&gt;delete&lt;/code&gt; would remove the element, but it wouldn't update the value of &lt;code&gt;length&lt;/code&gt; property. Using &lt;code&gt;delete&lt;/code&gt; would also mess up your indexing.</source>
          <target state="translated">Si bien t&amp;eacute;cnicamente puede usar &lt;code&gt;delete&lt;/code&gt; para una matriz, usarla dar&amp;iacute;a como resultado resultados incorrectos al llamar, por ejemplo, a &lt;code&gt;Hogwarts.staff.length&lt;/code&gt; m&amp;aacute;s adelante. En otras palabras, &lt;code&gt;delete&lt;/code&gt; eliminar&amp;iacute;a el elemento, pero no actualizar&amp;iacute;a el valor de la propiedad de &lt;code&gt;length&lt;/code&gt; . Usar &lt;code&gt;delete&lt;/code&gt; tambi&amp;eacute;n arruinar&amp;iacute;a tu indexaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="4be2ecd11ba0e212cafbe9f3ed4567f70ea3cc57" translate="yes" xml:space="preserve">
          <source>Yeah, that's definitely not what you wanted.</source>
          <target state="translated">SÃ­,definitivamente no es lo que querÃ­as.</target>
        </trans-unit>
        <trans-unit id="02c5f4541ba087fe996da9eb1271ebfb81156d83" translate="yes" xml:space="preserve">
          <source>You can also use other functions to achieve the same effect - omit, pick, ...</source>
          <target state="translated">TambiÃ©n puedes usar otras funciones para lograr el mismo efecto:omitir,elegir,...</target>
        </trans-unit>
        <trans-unit id="95e9a3221d0ebd0cc77f374d7ddfa95d905aef6a" translate="yes" xml:space="preserve">
          <source>You can delete that specific key from your object keys like:</source>
          <target state="translated">Puedes borrar esa tecla especÃ­fica de tus teclas de objeto como:</target>
        </trans-unit>
        <trans-unit id="df5ae996f80ec18df6459baf979a058b543794dd" translate="yes" xml:space="preserve">
          <source>You can see it in action in the Babel try-out editor.</source>
          <target state="translated">Puedes verlo en acciÃ³n en el editor de pruebas de Babel.</target>
        </trans-unit>
        <trans-unit id="ba4ef71e846efa414e359524a525c5bda890d6bb" translate="yes" xml:space="preserve">
          <source>You can simply delete any property of an object using the &lt;code&gt;delete&lt;/code&gt; keyword.</source>
          <target state="translated">Simplemente puede eliminar cualquier propiedad de un objeto usando la palabra clave &lt;code&gt;delete&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6902cdb7c6341debc4ec1b8c5eaf6794e483c684" translate="yes" xml:space="preserve">
          <source>You can use ES6 destructuring with rest operator.</source>
          <target state="translated">Puedes usar la desestructuraciÃ³n del ES6 con el operador de descanso.</target>
        </trans-unit>
        <trans-unit id="121a5978b1bee631af70ab1aaec00b53de7645b2" translate="yes" xml:space="preserve">
          <source>global scope) can be deleted with delete.</source>
          <target state="translated">alcance global)puede eliminarse con la supresiÃ³n.</target>
        </trans-unit>
        <trans-unit id="5be9ceecc2f03bc42e4d234aec808162f9c2f9d1" translate="yes" xml:space="preserve">
          <source>the result would be:</source>
          <target state="translated">el resultado serÃ­a:</target>
        </trans-unit>
        <trans-unit id="cc81a06a417041080d93a2378641c20ac0ef4865" translate="yes" xml:space="preserve">
          <source>which is equivalent to:</source>
          <target state="translated">que es equivalente a:</target>
        </trans-unit>
        <trans-unit id="b9a0331930f5ae83ac7b458124a7b5021f44ea5d" translate="yes" xml:space="preserve">
          <source>will behave equivalently for both methods.</source>
          <target state="translated">se comportarÃ¡ de manera equivalente para ambos mÃ©todos.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
