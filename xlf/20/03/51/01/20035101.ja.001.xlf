<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/20035101">
    <body>
      <group id="20035101">
        <trans-unit id="7f18be38a68c628c3f20fa0089c9d834c28ec0ab" translate="yes" xml:space="preserve">
          <source>(The header &lt;code&gt;Referer&lt;/code&gt; has the same value as &lt;code&gt;Origin&lt;/code&gt;). And now in Chrome's &lt;em&gt;Console &amp;amp; Networks&lt;/em&gt; tab you will see:</source>
          <target state="translated">（ヘッダーの &lt;code&gt;Referer&lt;/code&gt; 値は &lt;code&gt;Origin&lt;/code&gt; と同じです）。 Chromeの[ &lt;em&gt;コンソールとネットワーク&lt;/em&gt; ]タブに次のように表示されます。</target>
        </trans-unit>
        <trans-unit id="1cde63b90ae7bf63cf746f1c1e0d7fb3519452e8" translate="yes" xml:space="preserve">
          <source>3rd party services that allow a request to circumvent CORS</source>
          <target state="translated">リクエストがCORSを回避することを可能にするサードパーティサービス</target>
        </trans-unit>
        <trans-unit id="9a3ebbdf20ffce164f3dfeb7fdcfbed385251741" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Origin=null&lt;/code&gt; is set when you open HTML content from a local directory, and it sends a request. The same situation is when you send a request inside an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;, like in the below snippet (but here the &lt;code&gt;Host&lt;/code&gt; header is not set at all) - in general, everywhere the HTML specification says opaque origin, you can translate that to &lt;code&gt;Origin=null&lt;/code&gt;. More information about this you can find &lt;a href=&quot;https://stackoverflow.com/questions/42239643/when-do-browsers-send-the-origin-header-when-do-browsers-set-the-origin-to-null/42242802#42242802&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Origin=null&lt;/code&gt; は、ローカルディレクトリからHTMLコンテンツを開いたときに設定され、リクエストを送信します。 以下のスニペットのように &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 内でリクエストを送信する場合も同じ状況です（ただし、ここでは &lt;code&gt;Host&lt;/code&gt; ヘッダーはまったく設定されていません）-一般に、HTML仕様で不透明な原点が示されている場合は、それを &lt;code&gt;Origin=null&lt;/code&gt; 変換できます= null 。 この詳細については、 &lt;a href=&quot;https://stackoverflow.com/questions/42239643/when-do-browsers-send-the-origin-header-when-do-browsers-set-the-origin-to-null/42242802#42242802&quot;&gt;こちらをご覧ください&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="6ec492510b3d97552a936d07588cba810b258893" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$.ajax({type: &quot;POST&quot;&lt;/strong&gt; - calls &lt;strong&gt;OPTIONS&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;$ .ajax（{type： &quot;POST&quot;&lt;/strong&gt; &lt;strong&gt;-OPTIONSを&lt;/strong&gt;呼び出します</target>
        </trans-unit>
        <trans-unit id="3580fafd0e7477a9a0bbd30504967645497262f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$.post(&lt;/strong&gt; - Calls &lt;strong&gt;POST&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;$ .post（-POSTを&lt;/strong&gt;呼び出す</target>
        </trans-unit>
        <trans-unit id="81317f7a6dcb1785f348c7e570f1d34f43cc9e93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For C# web services - &lt;a href=&quot;https://en.wikipedia.org/wiki/ASP.NET_MVC_Framework#Apache_License_2.0_release&quot;&gt;Web API&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;C＃Webサービスの場合&lt;a href=&quot;https://en.wikipedia.org/wiki/ASP.NET_MVC_Framework#Apache_License_2.0_release&quot;&gt;-Web API&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="89fe4aabf84d90fe558c36be0bbf89d63f71f291" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Mod note&lt;/strong&gt;: This question is about why Postman is not subject to CORS restrictions in the same way an XMLHttpRequest is. This question is &lt;strong&gt;not&lt;/strong&gt; about how to fix a &quot;No 'Access-Control-Allow-Origin'...&quot; error.</source>
          <target state="translated">&lt;strong&gt;Mod注&lt;/strong&gt; ：この質問は、なぜPostmanがXMLHttpRequestと同じようにCORS制限を受けない理由についてです。 この質問は、「No 'Access-Control-Allow-Origin' ...」エラーを修正する方法に関するものではありません。</target>
        </trans-unit>
        <trans-unit id="93b6dcdfad5129b101e0b36472161f5fa1bd8d51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you are looking for downloading content &lt;strong&gt;from a third-party website&lt;/strong&gt; then &lt;strong&gt;this will not help you&lt;/strong&gt;.  You can try the following code, but not JavaScript.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;strong&gt;サードパーティのウェブサイトから&lt;/strong&gt;コンテンツをダウンロードすることを探している場合、 &lt;strong&gt;これは役に立ちません&lt;/strong&gt; 。 次のコードを試すことはできますが、JavaScriptを試すことはできません。</target>
        </trans-unit>
        <trans-unit id="36297858886c52a535b06f7007e6ac095e3ac042" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Please stop posting&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;投稿を停止してください&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="5221213f5f9722f0a74d0702a45ab2ba3f95d811" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution:&lt;/strong&gt; Add &lt;strong&gt;@CrossOrigin(&quot;*&quot;)&lt;/strong&gt; annotation on top of respective Controller Class.</source>
          <target state="translated">&lt;strong&gt;解決策：&lt;/strong&gt;それぞれのコントローラークラスの上に&lt;strong&gt;@CrossOrigin（ &quot;*&quot;）&lt;/strong&gt;アノテーションを追加します。</target>
        </trans-unit>
        <trans-unit id="3308305126ca2adc7b3fc97432f169edc681911e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING:&lt;/strong&gt; Using &lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt; can make your API/website vulnerable to &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_request_forgery&quot;&gt;cross-site request forgery&lt;/a&gt; (CSRF) attacks. Make certain you &lt;a href=&quot;https://stackoverflow.com/questions/43154170/is-it-safe-to-enable-cors-to-for-a-public-and-readonly-webservice&quot;&gt;understand the risks&lt;/a&gt; before using this code.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt; &lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt; を使用すると、 * API /ウェブサイトが&lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_request_forgery&quot;&gt;クロスサイトリクエストフォージェリ&lt;/a&gt; （CSRF）攻撃に対して脆弱になる可能性があります。 このコードを使用&lt;a href=&quot;https://stackoverflow.com/questions/43154170/is-it-safe-to-enable-cors-to-for-a-public-and-readonly-webservice&quot;&gt;する&lt;/a&gt;前に、リスクを確実に理解してください。</target>
        </trans-unit>
        <trans-unit id="c4329bc47369886f8c0a42fd18a223508cda8394" translate="yes" xml:space="preserve">
          <source>A simple application will look like:</source>
          <target state="translated">簡単なアプリだとこんな感じになります。</target>
        </trans-unit>
        <trans-unit id="366363d0204b6ef62f7b0c67752b489e8b1c9f87" translate="yes" xml:space="preserve">
          <source>Angular 4 issue - please refer to &lt;a href=&quot;http://www.hubfly.com/blog/solutions/how-to-fix-angular-4-api-call-issues/&quot;&gt;http://www.hubfly.com/blog/solutions/how-to-fix-angular-4-api-call-issues/&lt;/a&gt;</source>
          <target state="translated">Angular 4の問題-http://www.hubfly.com/blog/solutions/how-to-fix-angular-4-api-call-issues/を参照して&lt;a href=&quot;http://www.hubfly.com/blog/solutions/how-to-fix-angular-4-api-call-issues/&quot;&gt;ください&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="13100e65066097463de30b1e0b82fb643a8b0ee8" translate="yes" xml:space="preserve">
          <source>Applying a CORS restriction is a security feature defined by a server and implemented by a &lt;strong&gt;browser&lt;/strong&gt;.</source>
          <target state="translated">CORS制限の適用は、サーバーによって定義され、 &lt;strong&gt;ブラウザ&lt;/strong&gt;によって実装されるセキュリティ機能&lt;strong&gt;です&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="eaebe47425c9f545a41d705608612a34bef824ca" translate="yes" xml:space="preserve">
          <source>Because</source>
          <target state="translated">Because</target>
        </trans-unit>
        <trans-unit id="994d277213fbaedc06ba5d5acca67d3a4a9e3947" translate="yes" xml:space="preserve">
          <source>Both are different. Postman calls &quot;POST&quot; properly, but when we call it, it will be &quot;OPTIONS&quot;.</source>
          <target state="translated">どちらも違います。Postmanは「post」をきちんと呼んでいますが、呼ぶときは「options」になります。</target>
        </trans-unit>
        <trans-unit id="09bbd3ec34de2817c9d7530531d8c8c8e431db9d" translate="yes" xml:space="preserve">
          <source>CORS configurations for every language/framework under the sun. Instead &lt;a href=&quot;https://stackoverflow.com/search?q=how+to+enable+CORS+is%3Aquestion&amp;amp;mixed=1&quot;&gt;find your relevant language/framework's question&lt;/a&gt;.</source>
          <target state="translated">太陽の下でのすべての言語/フレームワークのCORS構成。 代わりに&lt;a href=&quot;https://stackoverflow.com/search?q=how+to+enable+CORS+is%3Aquestion&amp;amp;mixed=1&quot;&gt;、関連する言語/フレームワークの質問を見つけてください&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="3299a6a9db6304c13811b0ecaa80b420b0dc118d" translate="yes" xml:space="preserve">
          <source>Command line options for turning off CORS for various browsers</source>
          <target state="translated">各種ブラウザでCORSをオフにするためのコマンドラインオプション</target>
        </trans-unit>
        <trans-unit id="066ca298b0e32c2e6232f49c0e71a156a52c5d32" translate="yes" xml:space="preserve">
          <source>Encountered the same error in chrome when tried to call Spring &lt;strong&gt;REST&lt;/strong&gt; end point in angular.</source>
          <target state="translated">AngularでSpring &lt;strong&gt;REST&lt;/strong&gt;エンドポイントを呼び出そうとすると、Chromeで同じエラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">スニペットを展開</target>
        </trans-unit>
        <trans-unit id="12c867a185b69e0a08ca220ffbb01f5ffe2acad2" translate="yes" xml:space="preserve">
          <source>Fixed it by this,</source>
          <target state="translated">これで修正しました。</target>
        </trans-unit>
        <trans-unit id="69168c91caa0996d6431d7c72030165f886a95e2" translate="yes" xml:space="preserve">
          <source>For more details, you can check the &lt;a href=&quot;https://flask-cors.readthedocs.io/en/latest/&quot;&gt;Flask documentation&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;https://flask-cors.readthedocs.io/en/latest/&quot;&gt;Flaskのドキュメントを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="a8e7e0e211692db48ee9a987542edfaf88bbf464" translate="yes" xml:space="preserve">
          <source>Here is an example configuration which turns on &lt;strong&gt;CORS on Apache&lt;/strong&gt; (.htaccess file)</source>
          <target state="translated">&lt;strong&gt;Apache&lt;/strong&gt; （.htaccessファイル）で&lt;strong&gt;CORSを有効に&lt;/strong&gt;する設定例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="6afb2f09c7b0ebcbd06abce9088333a6fc2c12f1" translate="yes" xml:space="preserve">
          <source>Here is an example configuration which turns on &lt;strong&gt;CORS on nginx&lt;/strong&gt; (nginx.conf file) - be very careful with setting &lt;code&gt;always/&quot;$http_origin&quot;&lt;/code&gt; for nginx and &lt;code&gt;&quot;*&quot;&lt;/code&gt; for Apache - this will unblock CORS from any domain.</source>
          <target state="translated">&lt;strong&gt;nginx&lt;/strong&gt; （nginx.confファイル）で&lt;strong&gt;CORSをオンに&lt;/strong&gt;する設定例は次のとおりです-nginxの &lt;code&gt;always/&quot;$http_origin&quot;&lt;/code&gt; およびApacheの &lt;code&gt;&quot;*&quot;&lt;/code&gt; の設定には十分注意してください-これにより、どのドメインからでもCORSのブロックが解除されます。</target>
        </trans-unit>
        <trans-unit id="93311a176a43532fa9eb1fe759745fb39c5e3c94" translate="yes" xml:space="preserve">
          <source>However, the Postman tool does not bother about the CORS policy of the server.</source>
          <target state="translated">しかし、PostmanツールはサーバーのCORSポリシーを気にすることはありません。</target>
        </trans-unit>
        <trans-unit id="ec0d166a01cbf17a24a9d94014b3e22929526452" translate="yes" xml:space="preserve">
          <source>I am trying to do authorization using &lt;a href=&quot;http://en.wikipedia.org/wiki/JavaScript&quot;&gt;JavaScript&lt;/a&gt; by connecting to the &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services&quot;&gt;RESTful&lt;/a&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Application_programming_interface&quot;&gt;API&lt;/a&gt; built-in &lt;a href=&quot;https://en.wikipedia.org/wiki/Flask_%28web_framework%29&quot;&gt;Flask&lt;/a&gt;. However, when I make the request, I get the following error:</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services&quot;&gt;RESTful&lt;/a&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Application_programming_interface&quot;&gt;API&lt;/a&gt;組み込み&lt;a href=&quot;https://en.wikipedia.org/wiki/Flask_%28web_framework%29&quot;&gt;Flaskに&lt;/a&gt;接続することにより、 &lt;a href=&quot;http://en.wikipedia.org/wiki/JavaScript&quot;&gt;JavaScript&lt;/a&gt;を使用して認証を実行しようとしています 。 しかし、リクエストを行うと、次のエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="4e4af274f3f2a3d95e4301b8554417a52a656b0c" translate="yes" xml:space="preserve">
          <source>I assume that your page is on &lt;a href=&quot;http://my-site.local:8088&quot;&gt;http://my-site.local:8088&lt;/a&gt;&lt;a href=&quot;https://stackoverflow.com/a/55584963/860099&quot;&gt;.&lt;/a&gt;</source>
          <target state="translated">あなたのページは&lt;a href=&quot;http://my-site.local:8088&quot;&gt;http：//my-site.local：8088&lt;/a&gt;にあると思います&lt;a href=&quot;https://stackoverflow.com/a/55584963/860099&quot;&gt;。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f6d69aae080b651ef69381996fbdae2ab50b5328" translate="yes" xml:space="preserve">
          <source>I had issue when it was like this,</source>
          <target state="translated">こんな時に問題があった。</target>
        </trans-unit>
        <trans-unit id="d809e47a1533d81ff90cc2d62946559dcbf79c70" translate="yes" xml:space="preserve">
          <source>I know that the API or remote resource must set the header, but why did it work when I made the request via the Chrome extension &lt;a href=&quot;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop&quot;&gt;Postman&lt;/a&gt;?</source>
          <target state="translated">APIまたはリモートリソースでヘッダーを設定する必要があることはわかっていますが、Chrome拡張機能&lt;a href=&quot;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop&quot;&gt;Postmanを&lt;/a&gt;介してリクエストを送信したときに、なぜそれが機能したのですか？</target>
        </trans-unit>
        <trans-unit id="c8db4dc2f3f359a28a54b421afd6aff0b3e832a3" translate="yes" xml:space="preserve">
          <source>If I understood it right you are doing an &lt;a href=&quot;http://en.wikipedia.org/wiki/XMLHttpRequest&quot;&gt;XMLHttpRequest&lt;/a&gt; to a different domain than your page is on. So the browser is blocking it as it usually allows a request in the same origin for security reasons. You need to do something different when you want to do a cross-domain request. A tutorial about how to achieve that is &lt;em&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/cors/&quot;&gt;Using CORS&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">私が正しく理解していれば、ページが表示されているドメインとは異なるドメインに対して&lt;a href=&quot;http://en.wikipedia.org/wiki/XMLHttpRequest&quot;&gt;XMLHttpRequest&lt;/a&gt;を実行しています。 したがって、セキュリティ上の理由から、通常は同じオリジンでリクエストを許可するため、ブラウザはそれをブロックしています。 クロスドメインリクエストを行う場合は、別のことを行う必要があります。 それを達成する方法についてのチュートリアルは&lt;em&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/cors/&quot;&gt;CORSの使用&lt;/a&gt;&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="6c919f4b271e87353b0936831c001166cc4dd9a0" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask&lt;/a&gt; same as the question; you have first to install &lt;code&gt;flask-cors&lt;/code&gt;</source>
          <target state="translated">質問と同じ&lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask&lt;/a&gt;を使用している場合; 最初に &lt;code&gt;flask-cors&lt;/code&gt; をインストールする必要があります</target>
        </trans-unit>
        <trans-unit id="23af7582108b8a3e72ef90b408e5a3b34d2f0a9a" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;https://en.wikipedia.org/wiki/Node-RED&quot;&gt;Node-red&lt;/a&gt; you have to allow &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt;CORS&lt;/a&gt; in the &lt;code&gt;node-red/settings.js&lt;/code&gt; file by un-commenting the following lines:</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Node-RED&quot;&gt;Node-red&lt;/a&gt;を使用している場合は、次の行のコメントを&lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt;外し&lt;/a&gt;て、 &lt;code&gt;node-red/settings.js&lt;/code&gt; ファイルでCORSを許可する必要があります。</target>
        </trans-unit>
        <trans-unit id="c472094fc999b9b983abd9ff44ee50228eb35dfc" translate="yes" xml:space="preserve">
          <source>If you do not use a simple CORS request, usually the browser automatically also sends an OPTIONS request before sending the main request - more information is &lt;a href=&quot;https://stackoverflow.com/questions/10093053/access-control-request-headers-is-added-to-header-in-ajax-request-with-jquery/55584963#55584963&quot;&gt;here&lt;/a&gt;. The snippet below shows it:</source>
          <target state="translated">単純なCORSリクエストを使用しない場合、通常、ブラウザはメインリクエストを送信する前にOPTIONSリクエストも自動的に送信し&lt;a href=&quot;https://stackoverflow.com/questions/10093053/access-control-request-headers-is-added-to-header-in-ajax-request-with-jquery/55584963#55584963&quot;&gt;ます&lt;/a&gt; 。詳細はこちらです。 以下のスニペットはそれを示しています：</target>
        </trans-unit>
        <trans-unit id="c95d2dc319aad55480a96e16ce2a4e75b6092483" translate="yes" xml:space="preserve">
          <source>If you use .NET as your middle tier, check the route attribute clearly, for example,</source>
          <target state="translated">.NETをミドルティアとして使用している場合は、例えばルート属性を明確に確認してください。</target>
        </trans-unit>
        <trans-unit id="bd77cf61e05b719b34266825c92780dd5395eabf" translate="yes" xml:space="preserve">
          <source>In the below investigation as API, I use &lt;a href=&quot;http://example.com&quot;&gt;http://example.com&lt;/a&gt; instead of &lt;a href=&quot;http://myApiUrl/login&quot;&gt;http://myApiUrl/login&lt;/a&gt; from your question, because this first one working.</source>
          <target state="translated">以下のAPIとしての調査では、質問の&lt;a href=&quot;http://myApiUrl/login&quot;&gt;http：// myApiUrl / loginの&lt;/a&gt;代わりに&lt;a href=&quot;http://example.com&quot;&gt;http://example.com&lt;/a&gt;を使用しています。</target>
        </trans-unit>
        <trans-unit id="07b964a821a7d6c9866d76a77f4f2054fb79e7ab" translate="yes" xml:space="preserve">
          <source>It's very simple to solve if you are using &lt;a href=&quot;http://en.wikipedia.org/wiki/PHP&quot;&gt;PHP&lt;/a&gt;. Just add the following script in the beginning of your PHP page which handles the request:</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/PHP&quot;&gt;PHP&lt;/a&gt;を使用している場合は、非常に簡単に解決できます。 リクエストを処理する次のスクリプトをPHPページの先頭に追加するだけです。</target>
        </trans-unit>
        <trans-unit id="496e79e21999f75da13376232d0bcec34d30646d" translate="yes" xml:space="preserve">
          <source>NOT set header &lt;code&gt;Origin&lt;/code&gt;</source>
          <target state="translated">ヘッダーの &lt;code&gt;Origin&lt;/code&gt; 設定しない</target>
        </trans-unit>
        <trans-unit id="3b8865f9b8bf3cd47d8c1f71f0935d60d6ab345a" translate="yes" xml:space="preserve">
          <source>Please add the following code in your &lt;em&gt;web.config&lt;/em&gt; file under &amp;lt;system.webServer&amp;gt; tag. This will work:</source>
          <target state="translated">&amp;lt;system.webServer&amp;gt;タグの下の&lt;em&gt;web.config&lt;/em&gt;ファイルに次のコードを追加してください。 これは動作します：</target>
        </trans-unit>
        <trans-unit id="97d00f573c920c63457e98c492dd13cefa12cbc6" translate="yes" xml:space="preserve">
          <source>Please make sure you are not doing any mistake in the Ajax call</source>
          <target state="translated">Ajaxの呼び出しを間違えていないか確認してください。</target>
        </trans-unit>
        <trans-unit id="021e956b23cdac052c1f487373fd0a87b2ab7042" translate="yes" xml:space="preserve">
          <source>Regular web pages can use the XMLHttpRequest object to send and receive data from remote servers, but they're limited by the same origin policy. Extensions aren't so limited. An extension can talk to remote servers outside of its origin, as long as it first requests cross-origin permissions.</source>
          <target state="translated">通常のWebページはXMLHttpRequestオブジェクトを使ってリモートサーバからデータを送受信できますが、同じオリジンポリシーによって制限されます。拡張機能はそれほど制限されていません。拡張機能は、最初にクロスオリジンパーミッションを要求する限り、オリジン以外のリモートサーバと通信することができます。</target>
        </trans-unit>
        <trans-unit id="4bcb4e163bf193fe874c35e7a1a754e4ed2bd51c" translate="yes" xml:space="preserve">
          <source>Show code snippet</source>
          <target state="translated">コードスニペットを表示</target>
        </trans-unit>
        <trans-unit id="0dffc8fd53d7404ab229dd02adc93e11952b1553" translate="yes" xml:space="preserve">
          <source>That is why the CORS error appears in the browser, but not in Postman.</source>
          <target state="translated">そのため、ブラウザではCORSエラーが表示されるが、Postmanでは表示されない。</target>
        </trans-unit>
        <trans-unit id="5bf8dbcda182cc4b0bda73960f1a9cf8c381cda6" translate="yes" xml:space="preserve">
          <source>The browser looks at the CORS policy of the server and respects it.</source>
          <target state="translated">ブラウザはサーバーのCORSポリシーを見て、それを尊重します。</target>
        </trans-unit>
        <trans-unit id="ceed6cae063bc7c92b7b6af8b6c8d7ab1a2cdb1e" translate="yes" xml:space="preserve">
          <source>The reason why you see different results is that Postman:</source>
          <target state="translated">結果が違うのは、ポストマンが原因です。</target>
        </trans-unit>
        <trans-unit id="1c81ea373f3abf10fd0ecdc714ad26a38f77aee4" translate="yes" xml:space="preserve">
          <source>Then include the Flask cors in your application.</source>
          <target state="translated">その後、アプリケーションにFlask corsをインクルードします。</target>
        </trans-unit>
        <trans-unit id="fb38f9f526b23438c5be0b9fe8dd336f8889a15b" translate="yes" xml:space="preserve">
          <source>This is similar to browsers' way of sending requests when the site and API has the same domain (browsers also set the header item &lt;code&gt;Referer=http://my-site.local:8088&lt;/code&gt;, however I don't see it in Postman). &lt;strong&gt;When &lt;code&gt;Origin&lt;/code&gt; header is &lt;em&gt;not&lt;/em&gt; set, usually servers allow such requests by default.&lt;/strong&gt;</source>
          <target state="translated">これは、サイトとAPIが同じドメインの場合にブラウザーがリクエストを送信する方法に似ています（ブラウザーもヘッダーアイテム &lt;code&gt;Referer=http://my-site.local:8088&lt;/code&gt; を設定しますが、Postmanには表示されません） 。 &lt;strong&gt; &lt;code&gt;Origin&lt;/code&gt; ヘッダーが設定されて&lt;em&gt;いない&lt;/em&gt;場合、通常、サーバーはデフォルトでそのようなリクエストを許可します。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="99c788a5af33f9b7a75a594e048e63aba719cbae" translate="yes" xml:space="preserve">
          <source>This is the request code:</source>
          <target state="translated">これがリクエストコードです。</target>
        </trans-unit>
        <trans-unit id="bda958ded39c4d740b32c0bb520243b452ff89c2" translate="yes" xml:space="preserve">
          <source>This is the standard way how Postman sends requests. But a browser sends requests differently when &lt;strong&gt;your site and API have different domains&lt;/strong&gt;, and then &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;CORS&lt;/a&gt; occurs and the browser automatically:</source>
          <target state="translated">これは、Postmanがリクエストを送信する標準的な方法です。 ただし、 &lt;strong&gt;サイトとAPIのドメインが&lt;/strong&gt;異なる場合、ブラウザはリクエストを異なる&lt;strong&gt;方法で&lt;/strong&gt;送信し、次に&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;CORS&lt;/a&gt;が発生してブラウザが自動的に実行されます。</target>
        </trans-unit>
        <trans-unit id="ad4f53fa26c9f6a889bbca07ed67dcecdcfd7a9f" translate="yes" xml:space="preserve">
          <source>When you are using postman they are not restricted by this policy. Quoted from &lt;em&gt;&lt;a href=&quot;http://developer.chrome.com/extensions/xhr.html&quot;&gt;Cross-Origin XMLHttpRequest&lt;/a&gt;&lt;/em&gt;:</source>
          <target state="translated">郵便配達員を使用している場合、このポリシーによる制限はありません。 &lt;em&gt;&lt;a href=&quot;http://developer.chrome.com/extensions/xhr.html&quot;&gt;Cross-Origin XMLHttpRequest&lt;/a&gt;&lt;/em&gt;から引用：</target>
        </trans-unit>
        <trans-unit id="59b847a02c2a444746c032c10e079b2f8a3e7bf2" translate="yes" xml:space="preserve">
          <source>When you have &lt;strong&gt;&lt;code&gt;Host != Origin&lt;/code&gt;&lt;/strong&gt; this is CORS, and when the server detects such a request, it usually &lt;strong&gt;blocks it by default&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Host != Origin&lt;/code&gt; &lt;/strong&gt;がある場合、これはCORSであり、サーバーがそのような要求を検出すると、通常&lt;strong&gt;、デフォルトでそれをブロックします&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="cf2d78176bba778097ef5ea01d5433e0527e3e1c" translate="yes" xml:space="preserve">
          <source>Why doesn’t Postman get a “No 'Access-Control-Allow-Origin' header is present on the requested resource” error when my JavaScript code does</source>
          <target state="translated">JavaScriptコードでは「No Access-Control-Allow-Origin header is present on the requested resource」というエラーが出るのに、Postmanでエラーが出ないのはなぜか？</target>
        </trans-unit>
        <trans-unit id="02e7efd96db1e35b08ca4366b80785593d0bb81a" translate="yes" xml:space="preserve">
          <source>XMLHttpRequest cannot load &lt;a href=&quot;http://myApiUrl/login&quot;&gt;http://myApiUrl/login&lt;/a&gt;. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access.</source>
          <target state="translated">XMLHttpRequestが&lt;a href=&quot;http://myApiUrl/login&quot;&gt;http：// myApiUrl / loginを読み込め&lt;/a&gt;ません。 要求されたリソースに「Access-Control-Allow-Origin」ヘッダーがありません。 したがって、Origin 'null'はアクセスを許可されません。</target>
        </trans-unit>
        <trans-unit id="55c75d004d391d6d7d71b8391da244a7a0f9a08a" translate="yes" xml:space="preserve">
          <source>You can change the configuration of your server to allow CORS requests.</source>
          <target state="translated">サーバーの設定を変更して、CORS リクエストを許可することができます。</target>
        </trans-unit>
        <trans-unit id="00853d73f19844948fadbc48d500f997c46f7ee4" translate="yes" xml:space="preserve">
          <source>jQuery</source>
          <target state="translated">jQuery</target>
        </trans-unit>
        <trans-unit id="2bcbd7795ccef91bb67421f2b45b07248383009c" translate="yes" xml:space="preserve">
          <source>set header &lt;code&gt;Host=example.com&lt;/code&gt; (your API)</source>
          <target state="translated">ヘッダー &lt;code&gt;Host=example.com&lt;/code&gt; （あなたのAPI）を設定します</target>
        </trans-unit>
        <trans-unit id="83a837ce9e0f1b47cb54f8bcb25031ed581631cd" translate="yes" xml:space="preserve">
          <source>sets header &lt;code&gt;Host=example.com&lt;/code&gt; (yours as API)</source>
          <target state="translated">ヘッダー &lt;code&gt;Host=example.com&lt;/code&gt; を設定します （あなたのAPIとして）</target>
        </trans-unit>
        <trans-unit id="976589067a06ceb2e03d9b17f2fe35455220be7b" translate="yes" xml:space="preserve">
          <source>sets header &lt;code&gt;Origin=http://my-site.local:8088&lt;/code&gt; (your site)</source>
          <target state="translated">ヘッダー &lt;code&gt;Origin=http://my-site.local:8088&lt;/code&gt; （あなたのサイト）を設定します</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
