<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/2091465">
    <body>
      <group id="2091465">
        <trans-unit id="eace538f61f4330b00f11561afaebe804172f96b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/HodeCode/Vapor-API/blob/80e64900f429e515dd2fe045a33cd0b5d21396c5/content/VaporSharedPreferences.java&quot;&gt;&lt;code&gt;VaporSharedPreferences&lt;/code&gt;&lt;/a&gt; is implemented as Singleton so that is one option, and in Vapor API it has a heavily overloaded &lt;code&gt;.put(...)&lt;/code&gt; method so you don't have to explicitly worry about the datatype you are committing - providing it is supported. It is also fluent, so you can chain calls:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/HodeCode/Vapor-API/blob/80e64900f429e515dd2fe045a33cd0b5d21396c5/content/VaporSharedPreferences.java&quot;&gt; &lt;code&gt;VaporSharedPreferences&lt;/code&gt; &lt;/a&gt;はシングルトンとして実装されているため、1つのオプションであり、Vapor APIでは &lt;code&gt;.put(...)&lt;/code&gt; メソッドが大幅にオーバーロードされているため、コミットするデータ型を明示的に心配する必要はありません（サポートされている場合）。 また、流暢なので、呼び出しを連鎖させることができます。</target>
        </trans-unit>
        <trans-unit id="38790b229d6c237dbf858f9dd4a9b1d7875f2c72" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;First activity:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;最初のアクティビティ：&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6acf3e29108fa8d58e7baff5f3d4de4585862e17" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;First activity&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;最初の活動&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="39e1674645aa01413b88359487ff6ea8adba4fb2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;If you are getting failed binder transaction, this means you are exceeding the binder transaction buffer by transferring large element from one activity to another activity.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;失敗したバインダートランザクションを取得している場合、これは、1つのアクティビティから別のアクティビティに大きな要素を転送することにより、バインダートランザクションバッファーを超えていることを意味します。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9afc98d022ebc63f4dcf34e3b7d8b161a9c1b42d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;MainActivity.java&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;MainActivity.java&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="19eeb4e0632f4386c13857b6de431c6767bb9935" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Second activity:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;2番目のアクティビティ：&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="63f6e2302853eb9d8ce800854945872d5df07cb1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Second activity&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;2番目のアクティビティ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="555ecf463f6d3c52dbe9e3b2ab151934ef17cc69" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;SecondActivity.java&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;SecondActivity.java&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b88994dcb0ff4558235d8d79e36859234b737ccb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;strings.xml&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;strings.xml&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="691a2156dd4988ab500a5a905a41a8f16bdff38e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;And in the Activity class&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;そしてActivityクラスで&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="27bcc51b753067e8af837025a51fcfa452cc9b30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;And in the SecondActivity&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;そしてSecondActivityで&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="27134c5bfda7d9d4aa7d14adbe68e072f6cd8416" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;If you want to tranfer bitmap between Activites/Fragments&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;アクティビティ/フラグメント間でビットマップを転送する場合&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b3eac2d4a64d5e2ffe70bc12f8c686a554c1e8e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;In the FirstActivity&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;FirstActivityで&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1905e2b21bb347526d3ff901e85d66b2e927e00f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;To pass a bitmap between Activites&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;アクティビティ間でビットマップを渡すには&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6fdbf1785aeec3fcbfb98aaeb04abcb9ce852bc5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;To pass a bitmap between Fragments&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;フラグメント間でビットマップを渡すには&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3ecac0bb1246942b157e9b16f4b2d35305d7b80d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;To receive inside the SecondFragment&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;SecondFragment内で受け取るには&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a4aa2296c8bffcd9423ca75cfe63bc7b336832c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Activity&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Activity&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c8e67f0d4bf4ab03078ffd2f8de789d70fca9525" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 1: Using &lt;code&gt;Intent.EXTRA_*&lt;/code&gt; keys&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;例1： &lt;code&gt;Intent.EXTRA_*&lt;/code&gt; キーの使用&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="69cfd154eff97431a561fee77f5618594f4ae83d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2: Defining your own &lt;code&gt;static final&lt;/code&gt; key&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;例2：独自の &lt;code&gt;static final&lt;/code&gt; キーを定義する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="311b72f33173de524c819743d2623be2cb742774" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 3: Using a String resource key&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;例3：文字列リソースキーの使用&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ec627ec6cb461477a94dafc6780798262baaa5b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fragment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Fragment&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bf48843a9605b137af95830499c33e2a529a8f22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;From Activity&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;アクティビティから&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="736a84272cf65397c83d2de3d2e7bb47743fce05" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Get in Second Activity&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2番目のアクティビティに入る&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1b1923c4e38512c0fc4d0f96e220b6dec64d767c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If the value you sent was a &lt;code&gt;Boolean&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;送信した値が &lt;code&gt;Boolean&lt;/code&gt; 値の場合&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="c4c69cdcc14d787c09cf7d75bc2231db77bcc4e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If the value you sent was a &lt;code&gt;String&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;送信した値が &lt;code&gt;String&lt;/code&gt; &lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="c1c9042e010402f76cc80e23ee8a8816f6fe7334" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If the value you sent was in &lt;code&gt;long&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;送信した値が &lt;code&gt;long&lt;/code&gt; &lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="bd9681ecbab6ab8ea5f060fdf77ccc765e0069a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pass from First Activity&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;最初のアクティビティから渡す&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7983976e2a6f752e532f1acc994e3bdcc74a0af6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;So in that case you have to compress the bitmap as an byte's array and then uncompress it in another activity&lt;/strong&gt;, like this</source>
          <target state="translated">&lt;strong&gt;その場合、ビットマップをバイトの配列として圧縮し&lt;/strong&gt; 、次のよう&lt;strong&gt;に別のアクティビティ&lt;/strong&gt;で&lt;strong&gt;解凍する必要があり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a54f2112c920bf0d77b777cb56fe3e60fd22212f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Suggestion&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Suggestion&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8ef6fc835c83c1df6fceecba68ec10a056baef08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To Activity&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;活動へ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="261ad0fce2799021541af1b0b30957234c88dd17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Transfering Large Bitmaps&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;大きなビットマップの転送&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ae5cad52db928bcf5d4ecd6057abe6932105fa02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Updated&lt;/strong&gt; Note that I had mentioned the use of &lt;a href=&quot;http://developer.android.com/reference/android/content/SharedPreferences.html&quot;&gt;SharedPreference&lt;/a&gt;. It has a simple API and is accessible across an application's activities. But this is a clumsy solution, and is a security risk if you pass around sensitive data. It's best to use intents. It has an extensive list of overloaded methods that can be used to better transfer many different data types between activities. Have a look at &lt;a href=&quot;http://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20double[])&quot;&gt;intent.putExtra&lt;/a&gt;. This &lt;a href=&quot;https://www.raywenderlich.com/160019/android-intents-tutorial-2&quot;&gt;link&lt;/a&gt; presents the use of putExtra quite well.</source>
          <target state="translated">&lt;a href=&quot;http://developer.android.com/reference/android/content/SharedPreferences.html&quot;&gt;SharedPreference&lt;/a&gt;の使用について述べたことを注記を&lt;strong&gt;更新しました&lt;/strong&gt; 。 シンプルなAPIがあり、アプリケーションのアクティビティ全体からアクセスできます。 しかし、これは扱いにくいソリューションであり、機密データを迂回する場合のセキュリティリスクです。 インテントを使用するのが最善です。 アクティビティ間で多くの異なるデータ型をより適切に転送するために使用できるオーバーロードされたメソッドの広範なリストがあります。 &lt;a href=&quot;http://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20double[])&quot;&gt;intent.putExtraをご覧ください&lt;/a&gt; 。 この&lt;a href=&quot;https://www.raywenderlich.com/160019/android-intents-tutorial-2&quot;&gt;リンク&lt;/a&gt;はputExtraの使用を非常によく表しています。</target>
        </trans-unit>
        <trans-unit id="6a4330ad66ac90dbf88538aac5323059df6e85ef" translate="yes" xml:space="preserve">
          <source>A simple example where I use a main activity from another activity instance.</source>
          <target state="translated">別のアクティビティインスタンスからメインアクティビティを使用する簡単な例です。</target>
        </trans-unit>
        <trans-unit id="cddde32a6142e4c31e1ec987adf9255d51ab628d" translate="yes" xml:space="preserve">
          <source>Access that intent on next activity:</source>
          <target state="translated">次の活動に向けて、その意図にアクセスします。</target>
        </trans-unit>
        <trans-unit id="8b3cfb77f4a4633ade9ca7fae2d9b4ac1d036ce4" translate="yes" xml:space="preserve">
          <source>Also keep in mind that other approaches you might see, like statics, can be problematic because they &lt;a href=&quot;http://android-developers.blogspot.com/2009/01/avoiding-memory-leaks.html&quot;&gt;can lead to memory leaks&lt;/a&gt;. Application helps solve this too.</source>
          <target state="translated">また、静的など、 &lt;a href=&quot;http://android-developers.blogspot.com/2009/01/avoiding-memory-leaks.html&quot;&gt;メモリリークを引き起こす可能性&lt;/a&gt;があるため、他のアプローチが問題になる可能性があることにも注意してください。 アプリケーションもこれを解決するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="f5af3a3106ff12444958cf40465d0fca35196123" translate="yes" xml:space="preserve">
          <source>Alternatively you could use an &lt;code&gt;Intent&lt;/code&gt;. In Vapor API you can also use the chainable overloaded &lt;code&gt;.put(...)&lt;/code&gt; method on a &lt;a href=&quot;https://github.com/HodeCode/Vapor-API/blob/80e64900f429e515dd2fe045a33cd0b5d21396c5/content/VaporIntent.java&quot;&gt;&lt;code&gt;VaporIntent&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">または、 &lt;code&gt;Intent&lt;/code&gt; 使用することもできます。 Vapor APIでは、VaporIntentでチェーン可能なオーバーロードされた &lt;code&gt;.put(...)&lt;/code&gt; メソッドを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="00134ba544f0105569635190e35f5e02b4d47b45" translate="yes" xml:space="preserve">
          <source>Although not mentioned in the documentation, &lt;a href=&quot;https://stackoverflow.com/a/4433843/3681880&quot;&gt;this answer&lt;/a&gt; recommends using a String resource to avoid dependencies between activities.</source>
          <target state="translated">ドキュメントでは言及されていませんが、 &lt;a href=&quot;https://stackoverflow.com/a/4433843/3681880&quot;&gt;この回答で&lt;/a&gt;は、アクティビティ間の依存関係を回避するために文字列リソースを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6766c76f225354ab4408ce0b8fa5e5d69bc48fbd" translate="yes" xml:space="preserve">
          <source>Always put keys in constant file for more managed way.</source>
          <target state="translated">より管理された方法のために、常に一定のファイルにキーを配置します。</target>
        </trans-unit>
        <trans-unit id="d031df1412d19860296b9e9df7309415acc0642a" translate="yes" xml:space="preserve">
          <source>And pass it as an extra, as mentioned in the other answers. You can retrieve extras from your &lt;code&gt;Activity&lt;/code&gt;, and furthermore if you are using &lt;a href=&quot;https://github.com/HodeCode/Vapor-API/blob/80e64900f429e515dd2fe045a33cd0b5d21396c5/app/VaporActivity.java&quot;&gt;&lt;code&gt;VaporActivity&lt;/code&gt;&lt;/a&gt; this is done for you automatically so you can use:</source>
          <target state="translated">そして、他の回答で述べたように、それをエキストラとして渡します。 あなたはあなたの &lt;code&gt;Activity&lt;/code&gt; から余分なものを取得することができ、さらに&lt;a href=&quot;https://github.com/HodeCode/Vapor-API/blob/80e64900f429e515dd2fe045a33cd0b5d21396c5/app/VaporActivity.java&quot;&gt; &lt;code&gt;VaporActivity&lt;/code&gt; &lt;/a&gt;を使用している場合、これはあなたのために自動的に行われるので、あなたは使用することができます：</target>
        </trans-unit>
        <trans-unit id="c3b81a4dfb415495243f035799ec9b60004adf11" translate="yes" xml:space="preserve">
          <source>And send this Intent. In the target Activity your field will be available as:</source>
          <target state="translated">そして、このIntentを送信します。ターゲットアクティビティでは、あなたのフィールドは次のように利用可能になります。</target>
        </trans-unit>
        <trans-unit id="97443e4703452552473d2b439394d7e200ef0046" translate="yes" xml:space="preserve">
          <source>Another way could be using &lt;em&gt;singleton pattern&lt;/em&gt; also:</source>
          <target state="translated">別の方法として、 &lt;em&gt;シングルトンパターン&lt;/em&gt;を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="eb96d2a6585fc602380bbf18c7aad2634249d8dc" translate="yes" xml:space="preserve">
          <source>Another way is to use a public static field in which you store data, i.e.:</source>
          <target state="translated">もう一つの方法は、データを保存するパブリックスタティックフィールドを使用することです。</target>
        </trans-unit>
        <trans-unit id="114836ee60fb21e3a68d7850e9974c9898c3277e" translate="yes" xml:space="preserve">
          <source>Any alternative to this case</source>
          <target state="translated">この場合の代替案</target>
        </trans-unit>
        <trans-unit id="b291beb8793f4f3308c463951165dad483715a6c" translate="yes" xml:space="preserve">
          <source>Application</source>
          <target state="translated">Application</target>
        </trans-unit>
        <trans-unit id="e3cb9dab4ff412c0200893c4191f894a0f6d1b21" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;finish()&lt;/code&gt; to close the Second Activity.</source>
          <target state="translated">2番目のアクティビティを閉じるには、 &lt;code&gt;finish()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="c6d1bdc6847d371342d0a21b50fdb8f6beced719" translate="yes" xml:space="preserve">
          <source>Charlie Collins gave me a perfect &lt;a href=&quot;https://stackoverflow.com/a/2098936/1885518&quot;&gt;answer&lt;/a&gt; using the &lt;code&gt;Application.class&lt;/code&gt;. I was not aware that we could subclass it that easily. Here is a simplified example using a custom application class.</source>
          <target state="translated">チャーリー・コリンズは、 &lt;code&gt;Application.class&lt;/code&gt; を使用して完璧な&lt;a href=&quot;https://stackoverflow.com/a/2098936/1885518&quot;&gt;答え&lt;/a&gt;をくれました。 それを簡単にサブクラス化できることは知りませんでした。 以下は、カスタムアプリケーションクラスを使用した簡単な例です。</target>
        </trans-unit>
        <trans-unit id="68c0c94e8cab9aae78ffeaa106c25093aedbd70a" translate="yes" xml:space="preserve">
          <source>Create a simple &quot;helper&quot; class (factory for your Intents), like this:</source>
          <target state="translated">以下のようなシンプルな「ヘルパー」クラス(インテント用のファクトリ)を作成します。</target>
        </trans-unit>
        <trans-unit id="6e4aaabd92f2e99034820908067ae0295de8273f" translate="yes" xml:space="preserve">
          <source>Destination Class (NewActivity class):</source>
          <target state="translated">宛先クラス(NewActivityクラス)。</target>
        </trans-unit>
        <trans-unit id="2d137f2f8e86a9a23937d462edb718787219d5e4" translate="yes" xml:space="preserve">
          <source>Done! Cool :) I just want to share my experience. If you working on small project this shouldn't be the big problem. But when your working on big project, it really pain when you want to do refactoring or fixing bugs.</source>
          <target state="translated">終わった!かっこいい :)私はただ私の経験を共有したいと思います。小規模なプロジェクトであれば大きな問題ではありませんが、大きなプロジェクトでは、リファクタリングやバグ修正をしたいときには、本当につらいものです。しかし、大きなプロジェクトでは、リファクタリングやバグ修正をしたいときには、本当につらいです。</target>
        </trans-unit>
        <trans-unit id="f4c193bf1771d10531bdb7934817cbeed35a9c79" translate="yes" xml:space="preserve">
          <source>E.g.
&lt;code&gt;bundle.getString(&quot;key&quot;)&lt;/code&gt;,&lt;code&gt;bundle.getDouble(&quot;key&quot;)&lt;/code&gt; ,&lt;code&gt;bundle.getInt(&quot;key&quot;)&lt;/code&gt; etc.</source>
          <target state="translated">たとえば &lt;code&gt;bundle.getString(&quot;key&quot;)&lt;/code&gt; 、 &lt;code&gt;bundle.getDouble(&quot;key&quot;)&lt;/code&gt; 、 &lt;code&gt;bundle.getInt(&quot;key&quot;)&lt;/code&gt; など。</target>
        </trans-unit>
        <trans-unit id="f936b1aa74e65dae1cd7181e26c0eefa89758507" translate="yes" xml:space="preserve">
          <source>Extract the data you got from the return &lt;code&gt;Intent&lt;/code&gt;. The data is extracted using a key-value pair. I could use any string for the key but I'll use the predefined &lt;code&gt;Intent.EXTRA_TEXT&lt;/code&gt; since I'm sending text.</source>
          <target state="translated">戻り &lt;code&gt;Intent&lt;/code&gt; から取得したデータを抽出します。 データは、キーと値のペアを使用して抽出されます。 キーには任意の文字列を使用できますが、テキストを送信するため、定義済みの &lt;code&gt;Intent.EXTRA_TEXT&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="1b7a10721937a8ed747927220149c6e4fface761" translate="yes" xml:space="preserve">
          <source>Extract the data&amp;hellip;</source>
          <target state="translated">データを抽出&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="cff6c60591921aa0e2cccb5fd250074f999dea20" translate="yes" xml:space="preserve">
          <source>Final step, here is how I receive the data in &lt;code&gt;HomeActivity&lt;/code&gt;</source>
          <target state="translated">最後のステップは、 &lt;code&gt;HomeActivity&lt;/code&gt; でデータを受け取る方法です。</target>
        </trans-unit>
        <trans-unit id="6dadbc1ed9272b3f7f01909a232ff72dce25a0f7" translate="yes" xml:space="preserve">
          <source>First Activity:</source>
          <target state="translated">最初の活動。</target>
        </trans-unit>
        <trans-unit id="e13f3df986bafc200ac632a3e6c7a38520b661be" translate="yes" xml:space="preserve">
          <source>First you have to attach the data to the intent object with the use of the &lt;code&gt;Bundle&lt;/code&gt; class. Then call the activity using either &lt;code&gt;startActivity()&lt;/code&gt; or &lt;code&gt;startActivityForResult()&lt;/code&gt; methods.</source>
          <target state="translated">まず、 &lt;code&gt;Bundle&lt;/code&gt; クラスを使用して、データをインテントオブジェクトにアタッチする必要があります。 次に、 &lt;code&gt;startActivity()&lt;/code&gt; または &lt;code&gt;startActivityForResult()&lt;/code&gt; メソッドを使用してアクティビティを呼び出します。</target>
        </trans-unit>
        <trans-unit id="482e938c66c57260d4f901ca7a5543edf6b0970a" translate="yes" xml:space="preserve">
          <source>First, I create my &lt;code&gt;HomeIntent&lt;/code&gt;</source>
          <target state="translated">まず、 &lt;code&gt;HomeIntent&lt;/code&gt; を作成します</target>
        </trans-unit>
        <trans-unit id="add87083a5b763c0765ea0575fe36883dbd13425" translate="yes" xml:space="preserve">
          <source>For getting a value, use this in an Activity:</source>
          <target state="translated">値を取得する場合は、アクティビティで使用します。</target>
        </trans-unit>
        <trans-unit id="b13e70feeda4eb238eb4b0fbe89d2e5a7ff1e83f" translate="yes" xml:space="preserve">
          <source>For setting a value:</source>
          <target state="translated">値を設定するためのものです。</target>
        </trans-unit>
        <trans-unit id="ba35b2e13fe575cc0708ee2dbee1e0f2499d621c" translate="yes" xml:space="preserve">
          <source>From your FirstActivity</source>
          <target state="translated">FirstActivityから</target>
        </trans-unit>
        <trans-unit id="f5fa9b68f74a45552a5cbaec95a2c01f74e574ce" translate="yes" xml:space="preserve">
          <source>Get the bundle</source>
          <target state="translated">束を手に入れる</target>
        </trans-unit>
        <trans-unit id="e7cbde1028495db5b93c103455fedcb762499c55" translate="yes" xml:space="preserve">
          <source>Give the &lt;code&gt;android:name&lt;/code&gt; attribute to use your own application class.</source>
          <target state="translated">&lt;code&gt;android:name&lt;/code&gt; 属性を指定して、独自のアプリケーションクラスを使用します。</target>
        </trans-unit>
        <trans-unit id="9507a4524ce07b08a50f4e1acac31fc03694bfa6" translate="yes" xml:space="preserve">
          <source>Here is how I pass the data in my LoginActivity</source>
          <target state="translated">以下は、LoginActivityのデータを渡す方法です。</target>
        </trans-unit>
        <trans-unit id="37a9d2da1c6f8e2c0f57a7140ce9571a1d80a48f" translate="yes" xml:space="preserve">
          <source>Here is my best practice and it helps a lot when the project is huge and complex.</source>
          <target state="translated">ここに私のベストプラクティスがあり、プロジェクトが巨大で複雑な場合に大いに役立ちます。</target>
        </trans-unit>
        <trans-unit id="1a002890bd5f1f4bc93ae7047a72cbe3902b000a" translate="yes" xml:space="preserve">
          <source>Here we have Employee Model</source>
          <target state="translated">ここでは、従業員モデル</target>
        </trans-unit>
        <trans-unit id="62d036c6a0573038b63a65addf92989132051df6" translate="yes" xml:space="preserve">
          <source>Hope that is of interest to some :)</source>
          <target state="translated">それはいくつかの興味のあることであることを願っています :)</target>
        </trans-unit>
        <trans-unit id="6c2d547761d122b2cc8a9fa76b1c8042490af5c3" translate="yes" xml:space="preserve">
          <source>How do I pass data between Activities in Android application</source>
          <target state="translated">Androidアプリのアクティビティ間でデータを渡す方法</target>
        </trans-unit>
        <trans-unit id="801c441e0fce738efc88d096d30fc58b2eec1079" translate="yes" xml:space="preserve">
          <source>I have a scenario where, after logging in through a login page, there will be a sign-out &lt;code&gt;button&lt;/code&gt; on each &lt;code&gt;activity&lt;/code&gt;.</source>
          <target state="translated">ログインページからログインした後、各 &lt;code&gt;activity&lt;/code&gt; サインアウト &lt;code&gt;button&lt;/code&gt; があるシナリオがあります 。</target>
        </trans-unit>
        <trans-unit id="191f6a0efd6c49e211bc872f83c865ebaebc0119" translate="yes" xml:space="preserve">
          <source>I recently released &lt;a href=&quot;https://github.com/HodeCode/Vapor-API&quot;&gt;Vapor API&lt;/a&gt;, a jQuery flavored Android framework that makes all sorts of tasks like this simpler. As mentioned, &lt;code&gt;SharedPreferences&lt;/code&gt; is one way you could do this.</source>
          <target state="translated">最近、 &lt;a href=&quot;https://github.com/HodeCode/Vapor-API&quot;&gt;Vapor APIを&lt;/a&gt;リリースしました。これは、jQuery風のAndroidフレームワークで、このようなあらゆる種類のタスクをより簡単にします。 前述のように、 &lt;code&gt;SharedPreferences&lt;/code&gt; は、これを実行できる1つの方法です。</target>
        </trans-unit>
        <trans-unit id="e9166f055a5c3d20ca12ccbe2cafd74e4e778a01" translate="yes" xml:space="preserve">
          <source>I use static fields in a class, and get/set them:</source>
          <target state="translated">クラス内でスタティックフィールドを使用して、それを取得しています。</target>
        </trans-unit>
        <trans-unit id="6efbf4da853c756fa16beab23c3a3d9877713c64" translate="yes" xml:space="preserve">
          <source>If one of the &lt;code&gt;Intent.EXTRA_*&lt;/code&gt; Strings does not suit your needs, you can define your own at the beginning of the first activity.</source>
          <target state="translated">&lt;code&gt;Intent.EXTRA_*&lt;/code&gt; 文字列の 1つがニーズに合わない場合は、最初のアクティビティの最初に独自の文字列を定義できます。</target>
        </trans-unit>
        <trans-unit id="74648e19c0596322112fdcf1454b1d38d1fc715b" translate="yes" xml:space="preserve">
          <source>If you don't have the required session id, then remove sharedpreferences:</source>
          <target state="translated">必要なセッションIDを持っていない場合は、sharedpreferencesを削除してください。</target>
        </trans-unit>
        <trans-unit id="87c6f0dc9e80304ed1a75ca2d3e6a678aaa57702" translate="yes" xml:space="preserve">
          <source>In passing data between activities, my preferred approach is to create a static method for the relevant activity that includes the required parameters launch the intent. Which then provides easily setup and retrieve parameters. So it can look like this</source>
          <target state="translated">アクティビティ間のデータを渡すには、私の好ましいアプローチは、必要なパラメータが含まれている関連するアクティビティの静的メソッドを作成することですインテントを起動します。これは、簡単にセットアップとパラメータの取得を提供します。そのため、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="958f356615e03ef90e3a2299cb30cd18b6353ef2" translate="yes" xml:space="preserve">
          <source>In your activity. When you want to &quot;save&quot; some data in a &quot;session&quot; just use the following:</source>
          <target state="translated">あなたの活動の中で。セッション」でいくつかのデータを「保存」したいときは、次のようにすればいいだけです。</target>
        </trans-unit>
        <trans-unit id="9397e38b5c64340e87a78c545a1a95a8c8b789f8" translate="yes" xml:space="preserve">
          <source>In your current Activity, create a new &lt;code&gt;Intent&lt;/code&gt;:</source>
          <target state="translated">現在のアクティビティで、新しい &lt;code&gt;Intent&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="0fb801c75f878ef442515ab91d7964613f280d92" translate="yes" xml:space="preserve">
          <source>Including the package name is just a convention if you are only using the key in your own app. But it is a necessity to avoid naming conflicts if you are creating some sort of service that other apps can call with an Intent.</source>
          <target state="translated">パッケージ名を含めるのは、自分のアプリでのみキーを使用する場合の慣例に過ぎません。しかし、他のアプリが Intent で呼び出すことができるサービスを作成している場合は、名前の競合を避けるために必要です。</target>
        </trans-unit>
        <trans-unit id="91a39811c53cdcbaa0c30d603017f5b26cfd4ed6" translate="yes" xml:space="preserve">
          <source>Inside FirstActivity:</source>
          <target state="translated">FirstActivityの内部。</target>
        </trans-unit>
        <trans-unit id="c9396634ef6b99aaa973957f25c24a34cb81738b" translate="yes" xml:space="preserve">
          <source>Inside SecondActivity</source>
          <target state="translated">SecondActivityの内部</target>
        </trans-unit>
        <trans-unit id="9c6e80ee327688adf9a36d80f51295270fd0a69a" translate="yes" xml:space="preserve">
          <source>Intent</source>
          <target state="translated">Intent</target>
        </trans-unit>
        <trans-unit id="5ffce4d389a1fb0ccb543e4f148c3863eadc53cf" translate="yes" xml:space="preserve">
          <source>It also optionally autosaves changes, and unifies the reading and writing process under-the-hood so you don't need to explicitly retrieve an Editor like you do in standard Android.</source>
          <target state="translated">また、オプションで変更を自動保存し、標準のAndroidのように明示的にエディタを取得する必要がないように、読み込みと書き込みのプロセスをアンダーザフッドに統一します。</target>
        </trans-unit>
        <trans-unit id="1c52378e370c18b7f3c8c47d053a5baa705a5ce8" translate="yes" xml:space="preserve">
          <source>It helps me to see things in context. Here are two examples.</source>
          <target state="translated">物事の文脈で物事を見るのに役立ちます。ここでは二つの例を紹介します</target>
        </trans-unit>
        <trans-unit id="4b97a1cc4cde2d848838f0605a552d5704eea24b" translate="yes" xml:space="preserve">
          <source>Kotlin</source>
          <target state="translated">Kotlin</target>
        </trans-unit>
        <trans-unit id="59b86486aed4edafd59a372a9da15c32460385f0" translate="yes" xml:space="preserve">
          <source>Like this:</source>
          <target state="translated">こんな感じで。</target>
        </trans-unit>
        <trans-unit id="a707aa190f760150c8ff8256bff3171e748227a0" translate="yes" xml:space="preserve">
          <source>Like:</source>
          <target state="translated">Like:</target>
        </trans-unit>
        <trans-unit id="38ae06db9b3ef1579976cbac1a32d2b2cc1f26ea" translate="yes" xml:space="preserve">
          <source>Logging. Time store session id in &lt;code&gt;SharedPreferences&lt;/code&gt;</source>
          <target state="translated">ロギング。 &lt;code&gt;SharedPreferences&lt;/code&gt; のタイムストアセッションID</target>
        </trans-unit>
        <trans-unit id="2b13150bb59eb875dca701727cc38c9ccd731a0b" translate="yes" xml:space="preserve">
          <source>Main Activity</source>
          <target state="translated">主な活動</target>
        </trans-unit>
        <trans-unit id="3d3a69f803d148023e594571872c5358024dc784" translate="yes" xml:space="preserve">
          <source>Now in your second activity retrieve your data from the bundle:</source>
          <target state="translated">2つ目のアクティビティでは、バンドルからデータを取得してください。</target>
        </trans-unit>
        <trans-unit id="b9107a134a7d28c961183694b53efaa7c56f90ab" translate="yes" xml:space="preserve">
          <source>Now on the &lt;code&gt;OnCreate&lt;/code&gt; method of your &lt;code&gt;SecondActivity&lt;/code&gt; you can fetch the extras like this.</source>
          <target state="translated">&lt;code&gt;SecondActivity&lt;/code&gt; の &lt;code&gt;OnCreate&lt;/code&gt; メソッドで、 次のようにエクストラをフェッチできます。</target>
        </trans-unit>
        <trans-unit id="0eb3a03b1d0787ff4da11702ea6504e55d1bb88a" translate="yes" xml:space="preserve">
          <source>Now you can simply use the &lt;strong&gt;foo&lt;/strong&gt; object like you would have used.</source>
          <target state="translated">これで、これまでと同じように&lt;strong&gt;foo&lt;/strong&gt;オブジェクトを使用できます。</target>
        </trans-unit>
        <trans-unit id="7b325c769b45cd93a413e7302e481b4d2920cddf" translate="yes" xml:space="preserve">
          <source>Now you can use different bundle class methods to get values passed from FirstActivity  by Key.</source>
          <target state="translated">これで、異なるバンドルクラスのメソッドを使って、FirstActivityからKeyで渡された値を取得することができるようになりました。</target>
        </trans-unit>
        <trans-unit id="38541e5b930d05d749fd33f24234be704e643f1e" translate="yes" xml:space="preserve">
          <source>On SecondActivity</source>
          <target state="translated">On SecondActivity</target>
        </trans-unit>
        <trans-unit id="4c24e75dffeb92e9f8892cb139f4a3a313270433" translate="yes" xml:space="preserve">
          <source>On clicking &lt;code&gt;sign-out&lt;/code&gt;, I will be passing the &lt;code&gt;session id&lt;/code&gt; of the signed in user to sign-out. Can anyone guide me on how to keep &lt;code&gt;session id&lt;/code&gt; available to all &lt;code&gt;activities&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;sign-out&lt;/code&gt; クリックすると、 サインインしているユーザーの &lt;code&gt;session id&lt;/code&gt; がサインアウトに渡されます。 誰でも &lt;code&gt;session id&lt;/code&gt; をすべての &lt;code&gt;activities&lt;/code&gt; 利用できるようにする方法を教えてもらえますか？</target>
        </trans-unit>
        <trans-unit id="ea1475c8ef70f849a139f26984abc6ea59ea104c" translate="yes" xml:space="preserve">
          <source>Override &lt;code&gt;onActivityResult&lt;/code&gt;. This is called when the Second Activity finishes. You can make sure that it is actually the Second Activity by checking the result code. (This is useful when you are starting multiple different activities from the same main activity.)</source>
          <target state="translated">&lt;code&gt;onActivityResult&lt;/code&gt; をオーバーライドします。 これは、2番目のアクティビティが終了したときに呼び出されます。 結果コードを確認することで、それが実際に2番目のアクティビティであることを確認できます。 （これは、同じメインアクティビティから複数の異なるアクティビティを開始するときに便利です。）</target>
        </trans-unit>
        <trans-unit id="4d47579c705e3ce0308b6333fc5e0b8b02f1f541" translate="yes" xml:space="preserve">
          <source>Passing &lt;a href=&quot;http://developer.android.com/reference/android/content/Intent.html&quot;&gt;Intent&lt;/a&gt; extras is a good approach as Erich noted.</source>
          <target state="translated">Erichが指摘したように、 &lt;a href=&quot;http://developer.android.com/reference/android/content/Intent.html&quot;&gt;Intent&lt;/a&gt;エキストラを渡すことは良いアプローチです。</target>
        </trans-unit>
        <trans-unit id="d775144a55bf7e91ef7cfbccf4a2c1def79bcdaf" translate="yes" xml:space="preserve">
          <source>Passing Data Back</source>
          <target state="translated">データの受け渡し</target>
        </trans-unit>
        <trans-unit id="d247479c4b162f22e1950a95a4522e7d7381bf58" translate="yes" xml:space="preserve">
          <source>Passing Data Forward</source>
          <target state="translated">データの転送</target>
        </trans-unit>
        <trans-unit id="b0dae3fb81b164e0468db006efad889258446e01" translate="yes" xml:space="preserve">
          <source>Put the data that you want to send back to the previous activity into an &lt;code&gt;Intent&lt;/code&gt;. The data is stored in the &lt;code&gt;Intent&lt;/code&gt; using a key-value pair. I chose to use &lt;code&gt;Intent.EXTRA_TEXT&lt;/code&gt; for my key.</source>
          <target state="translated">前のアクティビティに送り返すデータを &lt;code&gt;Intent&lt;/code&gt; に入れます。 データは、キーと値のペアを使用して &lt;code&gt;Intent&lt;/code&gt; 格納されます。 私のキーには &lt;code&gt;Intent.EXTRA_TEXT&lt;/code&gt; を使用することにしました 。</target>
        </trans-unit>
        <trans-unit id="25e7fb992e005e9c97de619e6b44b45fbf813349" translate="yes" xml:space="preserve">
          <source>Put the data you want to send in an Intent with a key-value pair. See &lt;a href=&quot;https://stackoverflow.com/a/40569184/3681880&quot;&gt;this answer&lt;/a&gt; for naming conventions for the key.</source>
          <target state="translated">送信するデータを、キーと値のペアを使用してインテントに配置します。 キーの命名規則については、 &lt;a href=&quot;https://stackoverflow.com/a/40569184/3681880&quot;&gt;この回答&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0ecb891025ed958ae1cfa0fae9f5abe54061b725" translate="yes" xml:space="preserve">
          <source>Retrieve on another activity (YourActivity)</source>
          <target state="translated">別のアクティビティで取得する (YourActivity)</target>
        </trans-unit>
        <trans-unit id="f79292c43430eff2892fbe0b4612e2f1abff30de" translate="yes" xml:space="preserve">
          <source>Second Activity</source>
          <target state="translated">第二の活動</target>
        </trans-unit>
        <trans-unit id="2071c51814f63287592870a47bb93b53c1905601" translate="yes" xml:space="preserve">
          <source>Second Activity:</source>
          <target state="translated">第二の活動。</target>
        </trans-unit>
        <trans-unit id="d9df9a715cab4190727861808315534cdf9cfd68" translate="yes" xml:space="preserve">
          <source>Set the global &quot;singleton&quot; reference to the application instance.</source>
          <target state="translated">アプリケーション インスタンスへのグローバルな &quot;シングルトン&quot; 参照を設定します。</target>
        </trans-unit>
        <trans-unit id="1aa7f83614192aff8dc68b59fa386f302f46ff75" translate="yes" xml:space="preserve">
          <source>Set the result to &lt;code&gt;RESULT_OK&lt;/code&gt; and add the intent holding your data.</source>
          <target state="translated">結果を &lt;code&gt;RESULT_OK&lt;/code&gt; に設定し、データを保持するインテントを追加します。</target>
        </trans-unit>
        <trans-unit id="c4e1ba9d729248f07fa31c3f3d01905cf916087a" translate="yes" xml:space="preserve">
          <source>SharedPreferences</source>
          <target state="translated">SharedPreferences</target>
        </trans-unit>
        <trans-unit id="0bb28b62756d75c03361a9f59a817230be3c1f62" translate="yes" xml:space="preserve">
          <source>Signout. Time fetch session id in sharedpreferences</source>
          <target state="translated">サインアウト。時間は共有環境設定のセッションIDをフェッチします。</target>
        </trans-unit>
        <trans-unit id="469e016b6eb19825cd15bafcfacb243a09ada917" translate="yes" xml:space="preserve">
          <source>So now we can use Intent like same old session (like in servlets or &lt;a href=&quot;http://en.wikipedia.org/wiki/JavaServer_Pages&quot;&gt;JSP&lt;/a&gt;).</source>
          <target state="translated">これで、同じ古いセッション（サーブレットや&lt;a href=&quot;http://en.wikipedia.org/wiki/JavaServer_Pages&quot;&gt;JSPなど&lt;/a&gt; ）のようにIntentを使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="b4d613ac1e81c9ecc35efd7cfeba0c6091ed9739" translate="yes" xml:space="preserve">
          <source>Source class:</source>
          <target state="translated">ソースクラス。</target>
        </trans-unit>
        <trans-unit id="c60e0d7bb2198c66f6989cf45e7f174b8d89578d" translate="yes" xml:space="preserve">
          <source>Start another activity from this activity pass parameters via Bundle Object</source>
          <target state="translated">このアクティビティから別のアクティビティを開始し、Bundle Object経由でパラメータを渡します。</target>
        </trans-unit>
        <trans-unit id="5d97bbcba68a9bbf264a554dfe9d1ca7c1f6c210" translate="yes" xml:space="preserve">
          <source>Start the Second Activity with &lt;code&gt;startActivity&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;startActivity&lt;/code&gt; で 2番目のアクティビティを開始します 。</target>
        </trans-unit>
        <trans-unit id="1e3db86445cd5f29ef46da20cbcdc4a448f3f404" translate="yes" xml:space="preserve">
          <source>Start the Second Activity with &lt;code&gt;startActivityForResult&lt;/code&gt;, providing it an arbitrary result code.</source>
          <target state="translated">&lt;code&gt;startActivityForResult&lt;/code&gt; を使用して2番目のアクティビティを開始し、任意の結果コードを提供します。</target>
        </trans-unit>
        <trans-unit id="3c8287afb3483e919b879650e03e1552a21cd6ef" translate="yes" xml:space="preserve">
          <source>Supplemental Answer: Naming Conventions for the Key String</source>
          <target state="translated">補足的な回答。キー文字列の命名規則</target>
        </trans-unit>
        <trans-unit id="aef05c1679d24fb346f19fd0cb257fefe73aa8cc" translate="yes" xml:space="preserve">
          <source>Suppose that I have 2 activities, &lt;code&gt;LoginActivity&lt;/code&gt; and &lt;code&gt;HomeActivity&lt;/code&gt;.
I want to pass 2 parameters (username &amp;amp; password) from &lt;code&gt;LoginActivity&lt;/code&gt; to &lt;code&gt;HomeActivity&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LoginActivity&lt;/code&gt; と &lt;code&gt;HomeActivity&lt;/code&gt; の 2つのアクティビティがあるとします 。 &lt;code&gt;LoginActivity&lt;/code&gt; から &lt;code&gt;HomeActivity&lt;/code&gt; に 2つのパラメーター（ユーザー名とパスワード）を渡したいのですが。</target>
        </trans-unit>
        <trans-unit id="7ceed2a0698eb712e10202a2506bc17dcfbc9926" translate="yes" xml:space="preserve">
          <source>That is very useful, because one time you save the value and then retrieve anywhere of activity.</source>
          <target state="translated">それはあなたが値を保存してから、活動のどこかを取得する1つの時間のため、非常に便利です。</target>
        </trans-unit>
        <trans-unit id="d6e5f3ce9be6985f80525dcf45bd128616a8cd29" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://developer.android.com/guide/topics/intents/intents-filters.html&quot;&gt;docs&lt;/a&gt; for Intents has more information (look at the section titled &quot;Extras&quot;).</source>
          <target state="translated">インテントの&lt;a href=&quot;http://developer.android.com/guide/topics/intents/intents-filters.html&quot;&gt;ドキュメント&lt;/a&gt;に詳細情報があります（「その他」というタイトルのセクションをご覧ください）。</target>
        </trans-unit>
        <trans-unit id="57f6a542d7f9d1ed69ddff25fa604f10b9777f77" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://developer.android.com/reference/android/app/Application.html&quot;&gt;Application&lt;/a&gt; object is another way though, and it is sometimes easier when dealing with the same state across multiple activities (as opposed to having to get/put it everywhere), or objects more complex than primitives and Strings.</source>
          <target state="translated">&lt;a href=&quot;http://developer.android.com/reference/android/app/Application.html&quot;&gt;Application&lt;/a&gt;オブジェクトは別の方法ですが、複数のアクティビティで同じ状態を処理する場合（どこでも取得/出力する必要があるのではなく）、またはプリミティブや文字列よりも複雑なオブジェクトを処理する方が簡単な場合があります。</target>
        </trans-unit>
        <trans-unit id="8563a4d0c62edcc0ff48c0d840253718a507e933" translate="yes" xml:space="preserve">
          <source>The actual process of passing data has already been answered, however most of the answers use hard coded strings for the key name in the Intent. This is usually fine when used only within your app. However, the &lt;a href=&quot;https://developer.android.com/guide/components/intents-filters.html#Building&quot;&gt;documentation recommends&lt;/a&gt; using the &lt;code&gt;EXTRA_*&lt;/code&gt; constants for standardized data types.</source>
          <target state="translated">データを渡す実際のプロセスはすでに回答されていますが、ほとんどの回答は、インテントのキー名にハードコードされた文字列を使用しています。 これは通常、アプリ内でのみ使用する場合は問題ありません。 ただし、 &lt;a href=&quot;https://developer.android.com/guide/components/intents-filters.html#Building&quot;&gt;ドキュメントでは&lt;/a&gt; 、標準化されたデータ型には &lt;code&gt;EXTRA_*&lt;/code&gt; 定数を使用することを推奨しています。</target>
        </trans-unit>
        <trans-unit id="0bb152b293a5bb95cafe440f8ab477d51c208ed9" translate="yes" xml:space="preserve">
          <source>The easiest way to do this would be to pass the session id to the signout activity in the &lt;code&gt;Intent&lt;/code&gt; you're using to start the activity:</source>
          <target state="translated">これを行う最も簡単な方法は、アクティビティを開始するために使用している &lt;code&gt;Intent&lt;/code&gt; サインアウトアクティビティにセッションIDを渡すことです。</target>
        </trans-unit>
        <trans-unit id="f3f680ce6c4918b4e5cc224292a73f39c98f4860" translate="yes" xml:space="preserve">
          <source>The most convenient way to pass data between activities is by passing intents. In the first activity from where you want to send data, you should add code,</source>
          <target state="translated">アクティビティ間でデータを渡す最も便利な方法は、インテントを渡すことです。データを送りたい最初のアクティビティでは、コードを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="d7196e38e5b82ea6fea703cfb7e0dbbb169bffdc" translate="yes" xml:space="preserve">
          <source>The passing of data between activities is mainly by means of an intent object.</source>
          <target state="translated">アクティビティ間のデータの受け渡しは、主にインテントオブジェクトによって行われます。</target>
        </trans-unit>
        <trans-unit id="8bd6bd2f6253d4628da08bc08615bfbcc13697a3" translate="yes" xml:space="preserve">
          <source>The second way is:</source>
          <target state="translated">2つ目の方法は</target>
        </trans-unit>
        <trans-unit id="4d90f3c07992925129698958691c7cdda4e4e5cf" translate="yes" xml:space="preserve">
          <source>The standard approach.</source>
          <target state="translated">標準的なアプローチ。</target>
        </trans-unit>
        <trans-unit id="fbe87168b33c862c9cf5cb66145c061b41f2a787" translate="yes" xml:space="preserve">
          <source>Then in the new Activity, retrieve those values:</source>
          <target state="translated">次に、新しいアクティビティで、これらの値を取得します。</target>
        </trans-unit>
        <trans-unit id="d533ddf48e5578bbafd980adc1e07588473500c4" translate="yes" xml:space="preserve">
          <source>Then in the next Acitvity(SecondActivity), you should retrieve the data from the intent using the following code.</source>
          <target state="translated">そして、次のAcitvity(SecondActivity)では、以下のコードを使ってインテントからデータを取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="4040f653da1dadefa439c9e7b5682e650a4df748" translate="yes" xml:space="preserve">
          <source>Then you can create an intent for the intended activity and ensure you have all the parameters. You can adapt for fragments to. A simple example above, but you get the idea.</source>
          <target state="translated">その後、意図した活動のためのインテントを作成し、すべてのパラメータを持っていることを確認することができます。フラグメントに適応させることができます。上記の簡単な例ですが、アイデアを得ることができます。</target>
        </trans-unit>
        <trans-unit id="b3b8012beb23f20a279f37d5c48ec30d9a2294da" translate="yes" xml:space="preserve">
          <source>This is ok for simple kind data type.
But if u want to pass complex data in between activity u need to serialize it first.</source>
          <target state="translated">これは単純な種類のデータ型であれば問題ありません。しかし、アクティビティの間に複雑なデータを渡したい場合は、最初にシリアライズする必要があります。</target>
        </trans-unit>
        <trans-unit id="b5d453a61067b8e839a65e9063fc1f191d87c8e1" translate="yes" xml:space="preserve">
          <source>This will be the factory for all your Intents. Everytime you need a new Intent, create a static factory method in IntentHelper. To create a new Intent you should just say it like this:</source>
          <target state="translated">これがすべてのインテントのファクトリとなります。新しいインテントが必要になるたびに、IntentHelperで静的なファクトリメソッドを作成してください。新しいインテントを作成するには、次のように言えばいいのです。</target>
        </trans-unit>
        <trans-unit id="f3a5c2caaa47ec3ba54eccc20b7bf9b06dfc9977" translate="yes" xml:space="preserve">
          <source>To get them -</source>
          <target state="translated">彼らを捕まえるために</target>
        </trans-unit>
        <trans-unit id="0c088e371dd51b2e9ebdfbfc7c8793968913939b" translate="yes" xml:space="preserve">
          <source>To retrieve them at the other end in the &lt;code&gt;Activity&lt;/code&gt; you switch to.</source>
          <target state="translated">切り替える &lt;code&gt;Activity&lt;/code&gt; 反対側でそれらを取得するには。</target>
        </trans-unit>
        <trans-unit id="76ee038703849ccda45bce276e1c6e099de57a9e" translate="yes" xml:space="preserve">
          <source>To save session id -</source>
          <target state="translated">セッションIDを保存するには</target>
        </trans-unit>
        <trans-unit id="f86eb23d52b2d11cbca7332577e0c2e98a3cfced" translate="yes" xml:space="preserve">
          <source>Try to do the following:</source>
          <target state="translated">以下のようにしてみてください。</target>
        </trans-unit>
        <trans-unit id="a01be5506ad7701dad3213733f7ab8f0b08a9c65" translate="yes" xml:space="preserve">
          <source>Use this as a global reference holder. It works fine within a same process.</source>
          <target state="translated">グローバル参照ホルダーとして使用します。同一プロセス内では問題なく動作します。</target>
        </trans-unit>
        <trans-unit id="9279a1523198a64bb952468120e769f35ae24749" translate="yes" xml:space="preserve">
          <source>Use this technique to pass variables from one Activity to the other.</source>
          <target state="translated">このテクニックを使って、あるアクティビティから他のアクティビティに変数を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="d205e2ff8e3de9a60315420aa52c74c6a6cbff9f" translate="yes" xml:space="preserve">
          <source>Using Intent:</source>
          <target state="translated">意図を利用して</target>
        </trans-unit>
        <trans-unit id="8977cc576439126e69df1d9bddc6e708ed2920fb" translate="yes" xml:space="preserve">
          <source>You can also pass custom class objects by making a &lt;strong&gt;parcelable&lt;/strong&gt; class. Best way to make it parcelable is to write your class and then simply paste it to a site like &lt;a href=&quot;http://www.parcelabler.com/&quot;&gt;http://www.parcelabler.com/&lt;/a&gt;. Click on build and you will get new code. Copy all of this and replace the original class contents. 
Then-</source>
          <target state="translated">&lt;strong&gt;パーセル化可能な&lt;/strong&gt;クラスを作成して、カスタムクラスオブジェクトを渡すこともできます。 パーセル化するための最良の方法は、クラスを記述して、単純に&lt;a href=&quot;http://www.parcelabler.com/&quot;&gt;http://www.parcelabler.com/の&lt;/a&gt;ようなサイトに貼り付けることです。 ビルドをクリックすると、新しいコードが取得されます。 これをすべてコピーして、元のクラスの内容を置き換えます。 その後-</target>
        </trans-unit>
        <trans-unit id="afac6faa4c2dc162d062b42e4b5df3044d73fec5" translate="yes" xml:space="preserve">
          <source>You can extend Application, and then set/get whatever you want there and access it from any Activity (in the same application) with &lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#getApplication%28%29&quot;&gt;getApplication()&lt;/a&gt;.</source>
          <target state="translated">アプリケーションを拡張し、そこに必要なものを設定/取得し、 &lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#getApplication%28%29&quot;&gt;getApplication（）を&lt;/a&gt;使用して（同じアプリケーション内の）アクティビティからアクセスできます。</target>
        </trans-unit>
        <trans-unit id="04247b5714a670781a9d184de4f930238f56c18b" translate="yes" xml:space="preserve">
          <source>You can find more information about it, with an example from the blog post &lt;em&gt;&lt;a href=&quot;http://codeglympse.blogspot.in/2012/10/passing-data-to-activity.html&quot;&gt;Passing data to an Activity&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">ブログ投稿&lt;em&gt;&lt;a href=&quot;http://codeglympse.blogspot.in/2012/10/passing-data-to-activity.html&quot;&gt;Passing data to a Activityの&lt;/a&gt;&lt;/em&gt;例を使用して、それに関する詳細情報を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="2c6268214eaac767578cc1e5b385b6d4337bb868" translate="yes" xml:space="preserve">
          <source>You can pass data between activities in application in 3 ways</source>
          <target state="translated">アプリケーション内のアクティビティ間でデータを渡すには、以下の3つの方法があります。</target>
        </trans-unit>
        <trans-unit id="2c21295f9dbf853539df97edd8ad87f7adcb08e6" translate="yes" xml:space="preserve">
          <source>You can retrieve it in another activity. Two ways:</source>
          <target state="translated">別のアクティビティで取得することができます。2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="d586e993f0eefa58c86cbfc8ce479bd15cd6b5a9" translate="yes" xml:space="preserve">
          <source>You can send data between activities using intent object.
Consider you have two activities namely &lt;code&gt;FirstActivity&lt;/code&gt; and &lt;code&gt;SecondActivity&lt;/code&gt;.</source>
          <target state="translated">インテントオブジェクトを使用して、アクティビティ間でデータを送信できます。 &lt;code&gt;FirstActivity&lt;/code&gt; と &lt;code&gt;SecondActivity&lt;/code&gt; という2つのアクティビティがあるとします 。</target>
        </trans-unit>
        <trans-unit id="5a5cf318cde3137074d5c2b0aee4d1376771b882" translate="yes" xml:space="preserve">
          <source>You can try Shared Preference, it may be a good alternative for sharing data between the activities</source>
          <target state="translated">共有環境設定を試してみてください。</target>
        </trans-unit>
        <trans-unit id="47dc9c970bda05aca7077b755ea158737f519601" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;Intent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Intent&lt;/code&gt; を使用できます</target>
        </trans-unit>
        <trans-unit id="38769364ae30ab998c9e5527482c36982885adc1" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;SharedPreferences&lt;/code&gt;...</source>
          <target state="translated">&lt;code&gt;SharedPreferences&lt;/code&gt; を使用できます...</target>
        </trans-unit>
        <trans-unit id="825a74e3e07a638da4e7186611592595b37d4552" translate="yes" xml:space="preserve">
          <source>You can use Gson lib provided by google to serialize the complex data 
like this</source>
          <target state="translated">このような複雑なデータをシリアライズするには、googleが提供しているGson libを使うことができます。</target>
        </trans-unit>
        <trans-unit id="dd8c1085a4c8ab4dc979ce6ba4e8f6a70946930a" translate="yes" xml:space="preserve">
          <source>You just have to send extras while calling your intent.</source>
          <target state="translated">意図を呼びながらエキストラを送ればいいだけです。</target>
        </trans-unit>
        <trans-unit id="8dfce03149d43cf7b293ce21f2fcbdd498068c26" translate="yes" xml:space="preserve">
          <source>You should also import</source>
          <target state="translated">また</target>
        </trans-unit>
        <trans-unit id="c400be3a2201ae1d77652bb6cf80cac53065ec7b" translate="yes" xml:space="preserve">
          <source>You use &lt;code&gt;getIntent()&lt;/code&gt; to get the &lt;code&gt;Intent&lt;/code&gt; that started the second activity. Then you can extract the data with &lt;code&gt;getExtras()&lt;/code&gt; and the key you defined in the first activity. Since our data is a String we will just use &lt;code&gt;getStringExtra&lt;/code&gt; here.</source>
          <target state="translated">&lt;code&gt;getIntent()&lt;/code&gt; を使用して、2番目のアクティビティを開始した &lt;code&gt;Intent&lt;/code&gt; を取得します。 次に、 &lt;code&gt;getExtras()&lt;/code&gt; と最初のアクティビティで定義したキーを使用してデータを抽出できます。 データは文字列なので、ここでは &lt;code&gt;getStringExtra&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="b273febd3a27dcb081c3db547b2b1e5a29e64a0f" translate="yes" xml:space="preserve">
          <source>and get the result in NextActivity like-</source>
          <target state="translated">のように、NextActivityで結果を取得します。</target>
        </trans-unit>
        <trans-unit id="3a6338382cf8c0a31f7c639a5d031bdb4feb2553" translate="yes" xml:space="preserve">
          <source>passing data in intent have some limit. For large amount of data you can use Application level data sharing and by storing it in SharedPreference makes your app size increase</source>
          <target state="translated">インテントでデータを渡すことには制限があります。データ量が多い場合はアプリケーションレベルのデータ共有を使用し、SharedPreferenceに保存することでアプリのサイズを大きくすることができます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
