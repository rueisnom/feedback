<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/2056">
    <body>
      <group id="2056">
        <trans-unit id="ca519aa8f232477ca6fb4d7b413bfb8ff28e4d3f" translate="yes" xml:space="preserve">
          <source>( &lt;em&gt;Model&lt;/em&gt; is making a query to the movie database &amp;hellip; ) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이 영화 데이터베이스에 쿼리하는 중&amp;hellip;) [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b196c782085e0f289a857424f8d3cd8dbdb5b897" translate="yes" xml:space="preserve">
          <source>( &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt; is calling the &lt;em&gt;Model&lt;/em&gt; &amp;hellip; ) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;발표자&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델을&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 부릅니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;hellip;) [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11738dac3b131594904e3da34a1f722da38d33c0" translate="yes" xml:space="preserve">
          <source>( &lt;em&gt;View&lt;/em&gt; calling the &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt; &amp;hellip; ) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 호출 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;발표자&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ...) [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="617662bb70662b4ee51904f6a182010f0a37b584" translate="yes" xml:space="preserve">
          <source>( After a while ... )</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( 잠시 후 ... )&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9d4ae30232c39e1b37db57f07c414ae602ebff4d" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt; thanks &lt;em&gt;Model&lt;/em&gt; and gets back to the &lt;em&gt;View&lt;/em&gt;) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;발표자&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 감사 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 다시 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3eebbce0b57244ba6f4264a8083b8a2123c286b7" translate="yes" xml:space="preserve">
          <source>(The &lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;article&lt;/a&gt; also matches what Uncle Bob Martin said in his one of his talks: that MVC was originally designed for the small UI components, not for the architecture of the system)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(이 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;기사&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 밥 마틴 (Bob Martin) 삼촌이 말한 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;내용과&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 도 일치합니다. MVC는 원래 시스템 아키텍처가 아닌 작은 UI 구성 요소를 위해 설계되었습니다)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d69c0eadbc92a3002b2d562fc52edc9adb877fe" translate="yes" xml:space="preserve">
          <source>-------------- This is where MVP and MVC start to diverge ---------------</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-------------- MVP와 MVC가 분기되기 시작하는 곳입니다 ---------------&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f856f715b52ee9433e2a04ef7470396b0b845d81" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;/questions/tagged/mvc&quot;&gt;mvc&lt;/a&gt;&lt;a href=&quot;/questions/tagged/adr&quot;&gt;adr&lt;/a&gt;&lt;a href=&quot;/questions/tagged/model-view-controller&quot;&gt;model-view-controller&lt;/a&gt;&lt;a href=&quot;/questions/tagged/action-domain-responder&quot;&gt;action-domain-responder&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;/questions/tagged/mvc&quot;&gt;mvc&lt;/a&gt;&lt;a href=&quot;/questions/tagged/adr&quot;&gt;adr&lt;/a&gt;&lt;a href=&quot;/questions/tagged/model-view-controller&quot;&gt;model-view-controller&lt;/a&gt;&lt;a href=&quot;/questions/tagged/action-domain-responder&quot;&gt;action-domain-responder&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e0805a8ce705f2ac6ed5d15de6da21d7712a490e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Controller&lt;/em&gt;: Thanks for waiting &lt;em&gt;View&lt;/em&gt;, I have asked &lt;em&gt;Model&lt;/em&gt; about your search query. It says it has found a list of matching results and stored them in a variable named &quot;searchResultsList&quot; inside its instance. You can get it from there. Also please hide the progress bar now [&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 감사 대기에 대한 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기를&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , 나는 물었다 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델을&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 검색 쿼리에 대해. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;일치하는 결과 목록을 찾아서 인스턴스 내부의 &quot;searchResultsList&quot;라는 변수에 저장했다고합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;거기에서 얻을 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 진행률 표시 줄을 숨기십시오 [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b3983f1cbfa0649c26418f734f0aa0db26b0cf43" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Model&lt;/em&gt;: Hey &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;, let me check &amp;hellip; [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Hey &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Presenter&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , 점검하겠습니다&amp;hellip; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="02d626ea6ebf4c56bf4694025a75488aeb3fb7b6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Model&lt;/em&gt;: I found a list for you, &lt;em&gt;Presenter&lt;/em&gt;, here it is in JSON &amp;ldquo;[{&quot;name&quot;:&quot;Piano Teacher&quot;,&quot;year&quot;:2001},{&quot;name&quot;:&quot;Piano&quot;,&quot;year&quot;:1993}]&amp;rdquo; [&lt;strong&gt;MVP&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Presenter&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 목록을 찾았습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. 여기는 JSON &quot;[{&quot;name &quot;:&quot;Piano Teacher &quot;,&quot;year &quot;: 2001}, {&quot;name &quot;:&quot;Piano &quot;,&quot;year &quot;: 1993}에 있습니다. ]&amp;rdquo;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0d97a0f826ee560a8f304f5306f99eaeaa2a6e7b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Model&lt;/em&gt;: There is some result available, &lt;em&gt;Controller&lt;/em&gt;. I have created a field variable in my instance and filled it with the result. It's name is &quot;searchResultsList&quot; [&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 사용 가능한 결과가 있습니다 ( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러)&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;인스턴스에서 필드 변수를 만들고 결과로 채웠습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이름은 &quot;searchResultsList&quot;입니다. [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d1026820b8637534d3e5c387c58a14d35c2462bd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;: Thanks &lt;em&gt;View&lt;/em&gt;,&amp;hellip; meanwhile I&amp;rsquo;m looking up the search term on the &lt;em&gt;Model&lt;/em&gt;, please show him/her a progress bar [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;발표자&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 감사합니다. &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;hellip; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 검색어를 찾는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;중 진행률 표시 줄을 표시하십시오 [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="082d8aab0e7355bce1f34dab98698fc6bde07fa5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;: Thanks for waiting &lt;em&gt;View&lt;/em&gt;, I found a list of matching results for you and arranged them in a presentable format: [&quot;Piano Teacher 2001&quot;,&quot;Piano 1993&quot;]. Please show it to the user in a vertical list. Also please hide the progress bar now [&lt;strong&gt;MVP&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;발표자&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;View&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 기다려 주셔서 감사합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;일치하는 결과 목록을 찾아서 &quot;&quot;Piano Teacher 2001 &quot;,&quot;Piano 1993 &quot;]과 같은 형식으로 정렬했습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;세로 목록으로 사용자에게 보여주세요. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 진행률 표시 줄을 숨기십시오 [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6f82c8e2cb67e54724775d8eb3d6c9f1896844a8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;: Hey &lt;em&gt;Model&lt;/em&gt;, Do you have any match for this search term?: &amp;ldquo;piano&amp;rdquo; [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;발표자&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controller&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Hey &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ,이 검색어와 일치하는 것이 있습니까? : &quot;piano&quot;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="28df57da3132198350a38fc4a4fbecf2b3251bfa" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;: Hey &lt;em&gt;View&lt;/em&gt;, is there any search term on that page? [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;발표자&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 이봐 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , 해당 페이지에 어떤 검색어가? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a100e4ba21f44ff5d7a8afa346a7c0b100dbb45" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Hey &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;, a User has just clicked on the search button, what shall I do? [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Hey &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Presenter&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controller&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용자가 방금 검색 버튼을 클릭했습니다. 어떻게해야합니까? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f60206b05d7120cef3963992fd371e891b6b71e5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Ok, hold on a sec &amp;hellip; . [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 좋아, 잠깐만&amp;hellip; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82646e9011ff1bbbb2fc937dd69582393ccd56b3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Thank you &quot;Controller&quot; [&lt;strong&gt;MVC&lt;/strong&gt;]
(Now the &lt;em&gt;View&lt;/em&gt; is questioning itself: How should I present the results I get from the &lt;em&gt;Model&lt;/em&gt; to the user? Should the production year of the movie come first or last...? Should it be in a vertical or horizontal list? ...)</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 감사합니다 &quot;컨트롤러&quot;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ] (이제 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 자체에 의문을 제기합니다. &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 얻은 결과 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;를 사용자에게 어떻게 제시해야합니까? 영화 제작 연도가 가장 먼저 또는 마지막에 있어야합니까 ...? 수직 또는 수평 목록에 있습니까? ...)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9bb2ab8bc9f3d5a17d0e1d54691cea402a029772" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Thank you very much &lt;em&gt;Presenter&lt;/em&gt; [&lt;strong&gt;MVP&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 감사합니다. &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;발표자&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d0e8539215ad94c8625100b6f44cd2b22541d2d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Who&amp;rsquo;s that? [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 누구입니까? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4138a03bcc30a87317df02669cb3494beed2d551" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Yes,&amp;hellip; here it is &amp;hellip; &amp;ldquo;piano&amp;rdquo; [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 예, 여기 있습니다&amp;hellip; &quot;피아노&quot;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e10b3aa3f3ca649918786d0ac1c826d2957375b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cons:&lt;/strong&gt;
    Bit complex and more work when implementing event bindings</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단점 :&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이벤트 바인딩을 구현할 때 약간 복잡하고 더 많은 작업&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a172147501124e022228068f6941ed911ff4b0b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cons:&lt;/strong&gt;
  Sometimes too much workload for Controllers, if try to render multiple views in same controller.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단점 :&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 동일한 컨트롤러에서 여러보기를 렌더링하려는 경우 컨트롤러에 대한 작업량이 너무 많은 경우가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="156a0cb080027a6ff6d0542b61a78c2d3d218d41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Controllers&lt;/strong&gt; for handling the user interface and application</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용자 인터페이스 및 애플리케이션을 처리하기위한 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러&lt;/font&gt;&lt;/strong&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5e7f66068af168e4fc082d8dc01cb848b92a46b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC (Model View Controller)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC (모델 뷰 컨트롤러)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="608a28a38a1824ff63d31dcd52439b72ddf63906" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC Pattern&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC 패턴&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d8bc00d019fd0a2f99238073aef9a2d4311db18e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;MVC&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f784873573ecd0397295d7afa60e2c45bfc5eb7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC&lt;/strong&gt; is a pattern for the architecture of a software application. It separate the application logic into three separate parts, promoting modularity and ease of collaboration and reuse. It also makes applications more flexible and welcoming to iterations.It separates an application into the following components:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 소프트웨어 응용 프로그램 아키텍처의 패턴입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;애플리케이션 로직을 3 개의 개별 파트로 분리하여 모듈화 및 협업 및 재사용 용이성을 촉진합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 응용 프로그램을보다 유연하고 반복적으로 환영하며 응용 프로그램을 다음 구성 요소로 분리합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0a3d14652eb4344ee36a149498b3d4cb34487a0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVP (Model View Presenter)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP (모델보기 발표자)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e9c824c237d99d678e99ddbc760e821f4ee9deb8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVP Pattern&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP 패턴&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f94476ec169490b00a853ca7228940e69d66e2c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVP&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;MVP&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3b088ec128ecc3c454c0327d87d024496300247c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Model-View-Controller&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Model-View-Controller&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b145e8a37e9509a1eda7ea52157c5fbe04d0896" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Model-View-Presenter&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Model-View-Presenter&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="48291acc891f6b0d52b30c232b8856c19deaefa7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Models&lt;/strong&gt; for handling data and business logic</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;데이터 및 비즈니스 로직 처리를위한 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델&lt;/font&gt;&lt;/strong&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2033eab462915f68e8f6d27646bea6775e2f24d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Wikipedia states that &quot;&lt;em&gt;Each ADR action, however, is represented by separate classes or closures.&lt;/em&gt;&quot;. This is &lt;strong&gt;not&lt;/strong&gt; necessarily true. Several Actions can be in the same Controller, and the pattern is still the same.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;참고 :&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Wikipedia에서는 &quot; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;각 ADR 작업은 별도의 클래스 또는 클로저로 표시됩니다.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;라고 말합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;반드시 그런 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;것은 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;아닙니다&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여러 동작이 동일한 컨트롤러에있을 수 있으며 패턴은 여전히 ​​동일합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b20bafb875f0d0613a38122493b645665486924b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passive View:&lt;/strong&gt; The View is as dumb as possible and contains almost zero logic. The Presenter is a middle man that talks to the View and the Model. The View and Model are completely shielded from one another. The Model may raise events, but the Presenter subscribes to them for updating the View. In Passive View there is no direct data binding, instead the View exposes setter properties which the Presenter uses to set the data. All state is managed in the Presenter and not the View.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;패시브 뷰 :&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 뷰는 가능한 한 바보이며 거의 제로 로직을 포함합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;발표자는보기 및 모델과 대화하는 중간 사람입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰와 모델은 서로 완전히 차폐되어 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델은 이벤트를 발생시킬 수 있지만 발표자는 뷰를 업데이트하기 위해 구독합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;패시브 뷰에는 직접 데이터 바인딩이 없으며, 대신보기는 발표자가 데이터를 설정하는 데 사용하는 세터 속성을 노출합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 상태는보기가 아닌 발표자에서 관리됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34a5a86c8422d6c1567946698cd503d40967adf7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pros:&lt;/strong&gt;
    The view is having only  UI not any logics
    High level of testability</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;장점 :&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 보기에는 로직이 아닌 UI 만 있습니다. 높은 수준의 테스트 가능성&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e01f9565bf9defd5471edf6632bc1687db7b76d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pros:&lt;/strong&gt;
  Emphasis on Single Responsibility Principle
  High level of testability</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;장점 :&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 단일 책임 원칙에 대한 강조 높은 수준의 테스트 가능성&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="afb437faf2ed73f1dd6b1528a681eedce26744ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Supervising Controller:&lt;/strong&gt; The Presenter handles user gestures. The View binds to the Model directly through data binding. In this case it's the Presenter's job to pass off the Model to the View so that it can bind to it. The Presenter will also contain logic for gestures like pressing a button, navigation, etc.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;감독 컨트롤러 :&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 발표자는 사용자 제스처를 처리합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰는 데이터 바인딩을 통해 모델에 직접 바인딩됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 경우 모델을 뷰에 전달하여 바인딩 할 수있는 발표자의 작업입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;발표자에는 버튼 누르기, 탐색 등의 제스처에 대한 논리도 포함됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e8e51727d49d4f883cc1a5618583a1730a3423cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Views&lt;/strong&gt; for handling graphical user interface objects and presentation</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그래픽 사용자 인터페이스 객체 및 프리젠 테이션 처리를위한 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰&lt;/font&gt;&lt;/strong&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="add0cc6a4a79ac095cd7622623adfbac7b346164" translate="yes" xml:space="preserve">
          <source>A concrete workflow of querying and displaying a list of users from a database could work like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;데이터베이스에서 사용자 목록을 쿼리하고 표시하는 구체적인 워크 플로는 다음과 같이 작동 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1ee2af540a4b66e2e49393871786d070776e55fd" translate="yes" xml:space="preserve">
          <source>A great article on the differences is &lt;a href=&quot;http://www.infragistics.com/community/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;here&lt;/a&gt;.  Most notable is that MVC pattern has the Model updating the View.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;차이점에 대한 훌륭한 기사가 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.infragistics.com/community/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기에 있습니다&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;가장 주목할만한 것은 MVC 패턴에 모델이 뷰를 업데이트한다는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7480795899c308541ed6768ff447271305dc003" translate="yes" xml:space="preserve">
          <source>A presenter is acting as a supervisory role in MVP which binding View events and business logic from models.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;발표자는 모델에서 View 이벤트와 비즈니스 로직을 바인딩하는 MVP의 감독 역할을 수행합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1f788974cbeb29212645f28d4349b64ddc799a8" translate="yes" xml:space="preserve">
          <source>Also worth remembering is that there are different types of MVPs as well. Fowler has broken the pattern into two - Passive View and Supervising Controller.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 다른 유형의 MVP도 있다는 점을 기억해야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Fowler는이 패턴을 수동보기와 감시 컨트롤러의 두 가지로 나누었습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="18f0b68ee7609a444a8d9a6033eb2ae6e263c776" translate="yes" xml:space="preserve">
          <source>And so, you can look on MVP as an evolution of MVC.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 MVP를 MVC의 진화로 볼 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="07cdb35e36e9c49bf40e639443ef77de2afbca7d" translate="yes" xml:space="preserve">
          <source>Architecturally, MVP is Page Controller based approach where MVC is Front Controller based approach. 
That means that in MVP standard web form page life cycle is just enhanced by extracting the business logic from code behind. In other words, page is the one servicing http request. In other words, MVP IMHO is web form evolutionary type of enhancement.
MVC on other hand changes completely the game because the request gets intercepted by controller class before page is loaded, the business logic is executed there and then at the end result of controller processing the data just dumped to the page (&quot;view&quot;)
In that sense, MVC looks (at least to me) a lot to Supervising Controller flavor of MVP enhanced with routing engine</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;구조적으로 MVP는 MVC가 Front Controller 기반 접근 방식 인 Page Controller 기반 접근 방식입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;즉, MVP 표준 웹 양식 페이지 수명주기는 코드 뒤에서 비즈니스 로직을 추출하여 향상됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;즉, page는 http 서비스를 제공하는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;즉, MVP IMHO는 웹 양식 진화 유형의 향상입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;반면에 MVC는 요청이 페이지가로드되기 전에 컨트롤러 클래스에 의해 가로 채기 때문에 비즈니스 로직이 실행 된 후 컨트롤러가 페이지에 덤프 된 데이터를 처리 한 최종 결과 ( &quot;보기&quot;) 때문에 게임을 완전히 변경합니다. MVC는 라우팅 엔진으로 강화 된 MVP의 Supervising Controller의 풍미를 많이 보여줍니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7900b35c8f8f0559bbd47d5e988ed320a97b09a9" translate="yes" xml:space="preserve">
          <source>As explained in some graphics above, there's a direct relation/link between the &lt;strong&gt;Model&lt;/strong&gt; and the &lt;strong&gt;View&lt;/strong&gt; in MVC.
An action is performed on the &lt;strong&gt;Controller&lt;/strong&gt;, which will execute an action on the &lt;strong&gt;Model&lt;/strong&gt;. That action in the &lt;strong&gt;Model&lt;/strong&gt;, &lt;strong&gt;will trigger a reaction&lt;/strong&gt; in the &lt;strong&gt;View&lt;/strong&gt;.
The &lt;strong&gt;View&lt;/strong&gt;, is always updated when the &lt;strong&gt;Model&lt;/strong&gt;'s state changes.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위의 일부 그래픽에서 설명했듯이 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 과 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사이에는 직접적인 관계 / 링크가 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있습니다. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;작업이 수행되고 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 작업이 실행됩니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에서 그 행동 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;반응 트리거&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기는&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 때, 항상 업데이트 된 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 상태가 변경됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a1a531af64742c2e545bfca92ada8c68ab0f969" translate="yes" xml:space="preserve">
          <source>Because we use web frameworks (&lt;em&gt;eg:. Laravel&lt;/em&gt;) that still use the same naming conventions (&lt;em&gt;model-view-controller&lt;/em&gt;), we tend to think that it must be MVC, but it's actually something else.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우리 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;는 여전히 동일한 명명 규칙 ( &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;model-view-controller&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;을 사용하는 웹 프레임 워크 ( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예 : Laravel&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )를 사용하기 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;때문에 MVC 여야한다고 생각하는 경향이 있지만 실제로는 다른 것입니다.&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c683c3c42c4cd8715c9521a1ca053a3971db3040" translate="yes" xml:space="preserve">
          <source>Both are patterns trying to separate presentation and business logic, decoupling business logic from UI aspects</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;둘 다 프리젠 테이션과 비즈니스 로직을 분리하려고하는 패턴으로, 비즈니스 로직을 UI 측면에서 분리합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c6fd44fcf9a87b472af5d303c81d0de0302f74aa" translate="yes" xml:space="preserve">
          <source>Both of them enable TDD and have downsides and upsides.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;둘 다 TDD를 가능하게하며 단점과 단점이 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a2fe14e6a8b913548e0224385c96a940a1ab537f" translate="yes" xml:space="preserve">
          <source>Both of these frameworks aim to seperate concerns - for instance, interaction with a data source (model), application logic (or turning this data into useful information) (Controller/Presenter) and display code (View).  In some cases the model can also be used to turn a data source into a higher level abstraction as well.  A good example of this is the &lt;a href=&quot;http://blog.wekeroad.com/mvc-storefront/&quot;&gt;MVC Storefront project&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 두 프레임 워크는 데이터 소스 (모델), 응용 프로그램 논리 (또는이 데이터를 유용한 정보로 변환) (컨트롤러 / 발표자) 및 표시 코드 (보기)와의 상호 작용과 같은 우려를 분리하는 것을 목표로합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;경우에 따라 모델을 사용하여 데이터 소스를 더 높은 수준의 추상화로 변환 할 수도 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이에 대한 좋은 예는 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blog.wekeroad.com/mvc-storefront/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC Storefront 프로젝트&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4883d883e11f6be5048f16fc28a04c5642fc6323" translate="yes" xml:space="preserve">
          <source>Both presentation patterns.  They separate the dependencies between a Model (think Domain objects), your screen/web page (the View), and how your UI is supposed to behave (Presenter/Controller)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;두 프리젠 테이션 패턴. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델 (도메인 객체 생각), 화면 / 웹 페이지 (보기) 및 UI 작동 방식 (발표자 / 컨트롤러) 간의 종속성을 구분합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7db23f637ba3aad5f36394f1c2f821f44340dc90" translate="yes" xml:space="preserve">
          <source>Can be responsible for determining which view to display</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;표시 할보기를 결정할 책임이 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f59f787c0c1f783c7964e0e7231384d7c6999d75" translate="yes" xml:space="preserve">
          <source>Can be responsible for determining which view to display (Front Controller Pattern)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;표시 할보기 결정을 담당 할 수 있습니다 (전면 컨트롤러 패턴)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7375c53b3b9ebcc70a87ca2788a6bb5126518c27" translate="yes" xml:space="preserve">
          <source>Con: more work (for example all the setter properties) as you are doing all the data binding yourself.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단점 : 모든 데이터 바인딩을 직접 수행함에 따라 더 많은 작업 (예 : 모든 세터 속성)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f7d3bb72a6caa8d05eddbf6498df612a214d40a0" translate="yes" xml:space="preserve">
          <source>Con: there's less testable surface (because of data binding), and there's less encapsulation in the View since it talks directly to the Model.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단점 : 데이터 바인딩으로 인해 테스트 할 수있는 표면이 적고 모델과 직접 통신하기 때문에 View에서 캡슐화가 적습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eab32874de4f2687be749f41491e594cb1d82fc7" translate="yes" xml:space="preserve">
          <source>Conclusion - MVP and MVC are both decouple of UI patterns, but MVP usually uses a bindings framework which is MVC underneath. THUS MVP is at a higher architectural level than MVC and a wrapper pattern above of MVC.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;결론-MVP와 MVC는 모두 UI 패턴을 분리하지만 MVP는 일반적으로 아래에 MVC 인 바인딩 프레임 워크를 사용합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;THUS MVP는 MVC보다 아키텍처 수준이 높으며 MVC 이상의 래퍼 패턴입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="80ec6fa88a532e57d985374bcc69a69ba3949d2c" translate="yes" xml:space="preserve">
          <source>Consider &lt;a href=&quot;https://lostechies.com/derekgreer/2007/08/25/interactive-application-architecture/&quot;&gt;this&lt;/a&gt; highly exciting article that comprehensively lists a number of these differing implementations. 
You may note that they're all basically doing the same thing but slightly differently.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이러한 다양한 구현을 종합적으로 나열한 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://lostechies.com/derekgreer/2007/08/25/interactive-application-architecture/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 흥미로운 기사를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;고려하십시오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그것들은 모두 기본적으로 동일한 일을하지만 약간 다르게 작동한다는 것을 알 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0370c4db503c7f19467ccbfbd5f1b2695c83c0c8" translate="yes" xml:space="preserve">
          <source>Controller are based on behaviors and can be shared across views</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러는 동작을 기반으로하며 여러 뷰에서 공유 할 수 있습니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2cab38a568d9155fb3cc8caa5166e589d7c1e307" translate="yes" xml:space="preserve">
          <source>Controller is the initiator and it decides which view to render.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controller는 초 기자이며 렌더링 할보기를 결정합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0f0cac48c1eaf1076d16c7f442e6fb6f16e850e1" translate="yes" xml:space="preserve">
          <source>Decision on how to choose one of them IMHO should be based on how much time one invested in ASP NET web form type of web development. 
If one would consider himself good in web forms, I would suggest MVP. 
If one would feel not so comfortable in things such as page life cycle etc MVC could be a way to go here.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그들 중 하나를 선택하는 방법에 대한 결정 IMHO는 ASP NET 웹 양식 유형의 웹 개발에 얼마나 많은 시간을 투자했는지에 근거해야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;웹 양식에 능숙하다고 생각되면 MVP를 추천합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;페이지 수명주기 등과 같은 것들에서 너무 편안하지 않다면 MVC가 여기에 갈 수있는 방법 일 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a2b447c22214c841c979d8d26240ed2438d50a64" translate="yes" xml:space="preserve">
          <source>Easier to unit test because interaction with the view is through an interface</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰와의 상호 작용이 인터페이스를 통해 이루어지기 때문에 단위 테스트가 더 쉬움&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f68548bd19b6038792cfbed16937610ee0a1067c" translate="yes" xml:space="preserve">
          <source>For more &lt;a href=&quot;http://geekswithblogs.net/dlussier/archive/2009/11/21/136454.aspx&quot;&gt;Reference&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;자세한 내용은 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://geekswithblogs.net/dlussier/archive/2009/11/21/136454.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;참조&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eed30dbb7348a447a272cc33a07f00c86a07d0c3" translate="yes" xml:space="preserve">
          <source>Having said that, ASP.NET MVC is by these definitions an MVP framework because the Controller accesses the Model to populate the View which is meant to have no logic (just  displays the variables provided by the Controller).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 ASP.NET MVC는 이러한 정의에 따라 컨트롤러가 모델에 액세스하여 로직을 갖지 않는 뷰를 채 웁니다 (컨트롤러가 제공 한 변수 만 표시).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="10718b2650bdd7d40cdaf7c2f35682e59070f0d1" translate="yes" xml:space="preserve">
          <source>Here are illustrations which represent communication flow</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음은 통신 흐름을 나타내는 그림입니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab0f6e9f65e0dabff8c8e9d94199d95b90198921" translate="yes" xml:space="preserve">
          <source>Here are the key differences between
  the patterns:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;패턴 간의 주요 차이점은 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="23fb19bb0fae2989c392271f0e4532d29c366749" translate="yes" xml:space="preserve">
          <source>Here's yet another blog post link giving a little bit more details on this topic</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 주제에 대해 좀 더 자세한 내용을 제공하는 또 다른 블로그 게시물 링크가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a90c388214ce036e2cda7ca7a1beee59ef3deae1" translate="yes" xml:space="preserve">
          <source>How are they different?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그것들은 어떻게 다릅니 까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="697947ce28dd90b01db12e3c405bdc08838f4195" translate="yes" xml:space="preserve">
          <source>How are they similar?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그것들은 어떻게 비슷합니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c5691bc0007eee09d5e34fc2592d5bd59ebb6ad" translate="yes" xml:space="preserve">
          <source>I blogged about this a while back, quoting on &lt;a href=&quot;http://blogs.infragistics.com/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;Todd Snyder's excellent post on the difference between the two&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 이것에 대해 얼마 전에 블로그를 작성하여 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.infragistics.com/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Todd Snyder의 두 게시물의 차이점에 대한 훌륭한 게시물을&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 인용했습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="25982e196977ef10b7d392b37ae8877db51a1842" translate="yes" xml:space="preserve">
          <source>I find it unfortunate that people are still preaching this as a pattern (View in charge) as opposed to an anti-pattern as it contradicts &quot;It's just a view&quot; (Pragmatic Programmer). &quot;It's just a view&quot; states that the final view shown to the user is a secondary concern of the application. Microsoft's MVP pattern renders re-use of Views much more difficult and &lt;em&gt;conveniently&lt;/em&gt; excuses Microsoft's designer from encouraging bad practice.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;불행히도 사람들은 &quot;그저보기 일뿐&quot;(Pragmatic Programmer)과 모순되기 때문에 반 패턴과는 반대로 패턴 (담당자)으로 이것을 설교하고 있다는 것은 불행한 일입니다. &quot;그냥보기 일뿐입니다&quot;는 사용자에게 표시되는 최종보기가 응용 프로그램의 두 번째 관심사임을 나타냅니다. Microsoft의 MVP 패턴은 뷰 재사용을 훨씬 더 어렵게 만들고 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;편리하게&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Microsoft 디자이너가 잘못된 연습을 장려하지 못하게합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="617c09cbfe565552af42069b17032c053c0073d9" translate="yes" xml:space="preserve">
          <source>I have also blogged about the Model-View-ViewModel pattern in the context of Silverlight over at &lt;em&gt;&lt;a href=&quot;http://jonas.follesoe.no/2008/07/19/youcard-re-visited-implementing-the-viewmodel-pattern&quot;&gt;YouCard Re-visited: Implementing the ViewModel pattern&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;a href=&quot;http://jonas.follesoe.no/2008/07/19/youcard-re-visited-implementing-the-viewmodel-pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;YouCard Re-visited : ViewModel 패턴 구현&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 Silverlight와 관련하여 Model-View-ViewModel 패턴에 대해 블로그를 작성했습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="52cf88109ce249187c1207e73bc21232ed04270e" translate="yes" xml:space="preserve">
          <source>I have used both MVP and MVC and although we as developers tend to focus on the technical differences of both patterns the point for MVP in IMHO is much more related to ease of adoption than anything else.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP와 MVC를 모두 사용했지만 개발자가 두 패턴의 기술적 차이점에 중점을 두는 경향이 있지만 IMHO의 MVP의 요점은 다른 것보다 채택의 용이성과 관련이 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bb50a9cb6d28245cb89b00d7267f2ac0489d11de" translate="yes" xml:space="preserve">
          <source>I hope this helps better.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것이 더 도움이되기를 바랍니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="042f19d6cbe76666e2c4e9ce7cc57222d9fa609e" translate="yes" xml:space="preserve">
          <source>I leave here a link to a series of articles a friend of mine has published about MVP and MVC.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기에 내 친구가 MVP 및 MVC에 대해 게시 한 일련의 기사에 대한 링크가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc0f2d6d3263af56b02cbd8885ff46c2faad91fe" translate="yes" xml:space="preserve">
          <source>I personally think MVP has only been recently re-introduced as a catchy term to either reduce arguments between semantic bigots who argue whether something is truly MVC or not or to justify Microsofts Rapid Application Development tools. Neither of these reasons in my books justify its existence as a separate design pattern.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;필자는 개인적으로 MVP가 최근 MVC인지 아닌지를 주장하는 의미 론적 비고 사이의 논쟁을 줄이거 나 Microsoft의 신속한 응용 프로그램 개발 도구를 정당화하기 위해 최근에 다시 소개 된 것이라고 생각합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;내 책에서 이러한 이유 중 어느 것도 별도의 디자인 패턴으로 존재한다는 것을 정당화하지 못합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b13c436ba56a339968c458a3f31dad8b43483d6d" translate="yes" xml:space="preserve">
          <source>I think the best resource I've found to UI architecture is the series of blog posts done by Jeremy Miller over at &lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/07/25/the-build-your-own-cab-series-table-of-contents.aspx&quot;&gt;The Build Your Own CAB Series Table of Contents&lt;/a&gt;. He covered all the flavors of MVP and showed C# code to implement them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;UI 아키텍처에서 찾은 최고의 리소스는 Jeremy Miller가 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/07/25/the-build-your-own-cab-series-table-of-contents.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;The Your Your Own CAB Series Table of Contents&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 수행 한 일련의 블로그 게시물이라고 생각합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그는 MVP의 모든 취향을 다루고 C # 코드를 구현하여 보여주었습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5c241da24a69fbe9adc16bb3eef4db68da44938c" translate="yes" xml:space="preserve">
          <source>I think this image by Erwin Vandervalk (and the accompanying &lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;article&lt;/a&gt;) is the best explanation of MVC, MVP, and MVVM, their similarities, and their differences. The &lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;article&lt;/a&gt; does not show up in search engine results for queries on &quot;MVC, MVP, and MVVM&quot; because the title of the article does not contain the words &quot;MVC&quot; and &quot;MVP&quot;; but it is the best explanation, I think.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Erwin Vandervalk (및 첨부 된 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;기사&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의이 이미지 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;는 MVC, MVP 및 MVVM에 대한 최고의 설명, 유사점 및 차이점에 대한 것입니다. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;기사는&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 기사의 제목은 단어 &quot;MVC&quot;와 &quot;MVP&quot;를 포함하지 않기 때문에 &quot;MVC, MVP 및 MVVM&quot;에 대한 조회 검색 엔진 결과에 표시되지 않습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;가장 좋은 설명이라고 생각합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="922f8a21f3de48e180ca529ef6809b6f6eace184" translate="yes" xml:space="preserve">
          <source>IMO, MVP is an improved version of MVC where you basically separate the concern of what you're gonna show (the data) from how you're gonna show (the view). The presenter includes kinda the business logic of your UI, implicitly imposes what data should be presented and gives you a list of dumb view models. And when the time comes to show the data, you simply plug your view (probably includes the same id's) into your adapter and set the relevant view fields using those view models with a minimum amount of code being introduced (just using setters). Its main benefit is you can test your UI business logic against many/various views like showing items in a horizontal list or vertical list.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IMO, MVP는 MVC의 개선 된 버전으로 기본적으로 표시 할 내용 (데이터)과 표시 방법 (뷰)을 구분합니다. 발표자는 UI의 비즈니스 로직을 포함하고 어떤 데이터를 표시해야하는지 암시 적으로 표시하며 바보보기 모델 목록을 제공합니다. 그리고 데이터를 보여줄 때가되면 뷰 (어쩌면 동일한 ID를 포함 할 것)를 어댑터에 꽂고 최소한의 코드 만 도입 된 뷰 모델을 사용하여 관련 뷰 필드를 설정하기 만하면됩니다 (세터 만 사용). 주요 이점은 가로 목록 또는 세로 목록에 항목을 표시하는 것과 같이 많은 / 다양한보기에 대해 UI 비즈니스 로직을 테스트 할 수 있다는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f9cccd67f2542ff5fc1b213379d523acfb8fc112" translate="yes" xml:space="preserve">
          <source>If I&amp;rsquo;m working in a team that already as a good background on web forms development style it&amp;rsquo;s far easier to introduce MVP than MVC. I would say that MVP in this scenario is a quick win.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이미 웹 양식 개발 스타일에 대한 좋은 배경을 가진 팀에서 일하고 있다면 MVC보다 MVP를 소개하는 것이 훨씬 쉽습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 시나리오에서 MVP는 빠른 승리라고 말할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6558f723fbe4fed38574748b2f5302f711c7b446" translate="yes" xml:space="preserve">
          <source>If you want to see a sample with simple implementation please check
  &lt;a href=&quot;https://github.com/rahulabrol/Messanger&quot;&gt;this&lt;/a&gt; GitHub post</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;간단한 구현으로 샘플을 보려면 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/rahulabrol/Messanger&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; GitHub 게시물을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;확인하십시오 &lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ff98f23bff189ce3ed1260b7af476ccdf802ce2b" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;MVP&lt;/strong&gt;, the Presenter contains the UI business logic for the View. All invocations from the View delegate directly to Presenter. The Presenter is also decoupled directly from the View and talks to it through an interface. This is to allow mocking of the View in a unit test. One common attribute of MVP is that there has to be a lot of two-way dispatching. For example, when someone clicks the &quot;Save&quot; button, the event handler delegates to the Presenter's &quot;OnSave&quot; method. Once the save is completed, the Presenter will then call back the View through its interface so that the View can display that the save has completed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에서 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , 발표자보기위한 UI 비즈니스 로직이 포함되어 있습니다. View에서 모든 호출은 발표자로 직접 위임됩니다. 발표자는 또한보기에서 직접 분리되어 인터페이스를 통해 대화합니다. 단위 테스트에서 뷰를 조롱 할 수 있습니다. MVP의 일반적인 특징 중 하나는 양방향 디스패치가 많이 필요하다는 것입니다. 예를 들어, 누군가 &quot;저장&quot;단추를 클릭하면 이벤트 핸들러가 발표자의 &quot;OnSave&quot;메소드에 위임됩니다. 저장이 완료되면 발표자는 인터페이스를 통해보기를 다시 호출하여보기가 저장이 완료되었음을 표시 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4898bac1b812a0b26c28dd47383904e1b95ee622" translate="yes" xml:space="preserve">
          <source>In MVC, View has the UI part, controller is the mediator between view and model &amp;amp; model contains the business logic .</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC에서 View에는 UI 부분이 있고 컨트롤러는 view와 model 사이의 중재자이며 비즈니스 모델은 비즈니스 로직을 포함합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="caecc0e801c5a72f71f7c171cabd84f782e9cfa3" translate="yes" xml:space="preserve">
          <source>In MVC, we talk through interfaces (boundaries) to glue different layers. A controller is a plug-in to our architecture but it has no such a restriction to impose what to show. In that sense, MVP is kind of an MVC with a concept of views being pluggable to the controller over adapters.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC에서는 인터페이스 (경계)를 통해 서로 다른 레이어를 접착합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러는 우리 아키텍처의 플러그인이지만 보여줄 것을 강요하는 데 제한이 없습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그런 의미에서 MVP는 어댑터를 통해 컨트롤러에 뷰를 연결할 수있는 개념을 가진 일종의 MVC입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4aa9d0ac4aa811604ba2904ebe7265f0d26b5e42" translate="yes" xml:space="preserve">
          <source>In MVP the view draws data from the presenter which draws and prepares/normalizes data from the model while in MVC the controller draws data from the model and set, by push in the view.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP에서보기는 프리젠터에서 데이터를 가져 오며 MVC에서는 컨트롤러가보기에서 푸시하여 모델에서 데이터를 가져와 설정하는 동안 모델에서 데이터를 가져오고 준비 / 정규화합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ad4b0748ab0354e78964e5f9aeeced463b697404" translate="yes" xml:space="preserve">
          <source>In MVP you can have a single view working with multiple types of presenters and a single presenter working with different multiple views.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP에서는 여러 유형의 발표자와 작업하는 단일보기와 다른 여러 시점과 작업하는 단일 발표자를 가질 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b9a8f65c70c9330d2e4e7ba75b8180257b99ea2d" translate="yes" xml:space="preserve">
          <source>In MVP, View contains both UI and implementation of the presenter since here the presenter is just an interface &amp;amp; model is the same i.e contains business logic .</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP에서보기에는 UI와 발표자의 구현이 모두 포함됩니다. 여기서 발표자는 인터페이스 및 모델이 동일하므로 비즈니스 논리가 포함됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="753aca984485212d4969261a40a0ecdd95c56195" translate="yes" xml:space="preserve">
          <source>In case you're interested, I have been writing a series of articles dealing with app architectural patterns (MVC, MVP, MVVP, clean architecture, ...) accompanied by a Github repo &lt;a href=&quot;http://www.digigene.com/android-architecture-wolfkcats&quot;&gt;here&lt;/a&gt;. Even though the sample is written for android, the underlying principles can be applied to any medium.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;관심이 있으시다면 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.digigene.com/android-architecture-wolfkcats&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Github 저장소와 함께 앱 아키텍처 패턴 (MVC, MVP, MVVP, 클린 아키텍처 등)을 다루는 일련의 기사를 작성했습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;샘플이 Android 용으로 작성되었지만 기본 원칙을 모든 매체에 적용 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9dd58705a824f4c7cd55ad599bf82c53e303f903" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;MVC&lt;/strong&gt;, the Controller is responsible for determining which View to display in response to any action including when the application loads. This differs from MVP where actions route through the View to the Presenter. In MVC, every action in the View correlates with a call to a Controller along with an action. In the web each action involves a call to a URL on the other side of which there is a Controller who responds. Once that Controller has completed its processing, it will return the correct View. The sequence continues in that manner throughout the life of the application:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에서 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , 컨트롤러보기 응용 프로그램이로드 될 때를 포함하여 어떤 행동에 대한 응답으로 표시 할 결정하기위한 책임이 있습니다. 동작이보기를 통해 발표자로 라우팅되는 MVP와 다릅니다. MVC에서 View의 모든 작업은 작업에 대한 컨트롤러 호출과 관련이 있습니다. 웹에서 각 작업에는 상대방이 응답하는 컨트롤러가있는 URL에 대한 호출이 포함됩니다. 해당 컨트롤러가 처리를 완료하면 올바른보기를 반환합니다. 이 순서는 응용 프로그램 수명 동안 계속 유지됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9aa9b9e508319acacb670f8c7e75d029ce538b29" translate="yes" xml:space="preserve">
          <source>In those frameworks, the UI/HTML5/XAML, is aware of what property of the presenter each UI element displays, so when you bind a view to a presenter, the view looks for the properties and knows how to draw data from them and how to set them when a value is changed in the UI by the user.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이러한 프레임 워크에서 UI / HTML5 / XAML은 각 UI 요소가 표시하는 발표자의 속성을 알고 있으므로보기를 발표자에 바인딩 할 때보기는 속성을 찾고 해당 속성에서 데이터를 그리는 방법과 방법을 알고 있습니다. 사용자가 UI에서 값을 변경할 때 설정합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c01cde1f4d24cec2a304f26abfafadee545f5a75" translate="yes" xml:space="preserve">
          <source>Instead, have a look at &lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;Action-Domain-Responder&lt;/a&gt;.
In ADR, the &lt;strong&gt;Controller&lt;/strong&gt; gets an &lt;strong&gt;Action&lt;/strong&gt;, which will perform an operation in the &lt;strong&gt;Model/Domain&lt;/strong&gt;. So far, the same.
The difference is, it then collects that operation's response/data, and pass it to a &lt;strong&gt;Responder&lt;/strong&gt; (&lt;em&gt;eg:. &lt;code&gt;view()&lt;/code&gt;&lt;/em&gt;) for rendering.
When a new action is requested on the same component, the &lt;strong&gt;Controller&lt;/strong&gt; is called again, and the cycle repeats itself.
In ADR, there's &lt;strong&gt;no connection&lt;/strong&gt; between the Model/Domain and the View (&lt;em&gt;Reponser's response&lt;/em&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;대신 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Action-Domain-Responder를&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 살펴보십시오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. ADR에서 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델 / 도메인&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 작업을 수행하는 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Action을&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가져 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;옵니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. 지금까지 동일합니다. 차이점은 작업의 응답 / 데이터를 수집 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하여 렌더링 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;을 위해 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;응답자&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ( &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예 : &lt;/font&gt;&lt;/em&gt;&lt;em&gt; &lt;code&gt;view()&lt;/code&gt; &lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )에 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;전달한다는 것 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;입니다. 동일한 구성 요소에서 새 조치가 요청되면 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controller&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 다시 호출되고주기 자체가 반복됩니다. ADR에서는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델 / 도메인과보기 ( &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;응답자 응답&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;간에 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;연결&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;없습니다&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6bf0642feeed5b037f39e4a3637221ff5a6fd72a" translate="yes" xml:space="preserve">
          <source>It is the best explanation on the web I could find.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;내가 찾은 웹에서 가장 좋은 설명입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c0e59ffc55e85fc20e92dbecba004d8fe98d71a0" translate="yes" xml:space="preserve">
          <source>MVC = Model-View-Controller</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC = 모델 뷰 컨트롤러&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a43b3b072a5b6199b18f294ed1df5f2594545ac" translate="yes" xml:space="preserve">
          <source>MVC is great, but the problem is that usually its controller per view. Controller A knows how to set fields of View A. If now, you want View A to display data of model B, you need Controller A to know model B, or you need Controller A to receive an object with an interface - which is like MVP only without the bindings, or you need to rewrite the UI set code in Controller B.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC는 훌륭하지만 문제는 일반적으로 뷰 당 컨트롤러입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러 A는 뷰 A의 필드를 설정하는 방법을 알고 있습니다. 이제 뷰 A가 모델 B의 데이터를 표시하도록하려면 모델 A를 알기 위해 컨트롤러 A가 필요하거나 인터페이스가있는 객체를 수신하려면 컨트롤러 A가 필요합니다. 바인딩이없는 MVP 만 또는 컨트롤러 B에서 UI 세트 코드를 다시 작성해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1a1de6da1e685269460dfb990c3cd363bf1bf525" translate="yes" xml:space="preserve">
          <source>MVC stands for Model-View-Controller. Controller is responsible for creating models and rendering views with binding models.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC는 Model-View-Controller를 나타냅니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controller는 모델을 작성하고 바인딩 모델을 사용하여 뷰를 렌더링합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2d7472c153b90e4439c448216cb3bca8ac60031b" translate="yes" xml:space="preserve">
          <source>MVC: the controller is in charge.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC : 컨트롤러가 담당합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="666e13a62670ef5dd9c954b6ed8731d40b354b51" translate="yes" xml:space="preserve">
          <source>MVP = Model-View-Presenter</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP = 모델 뷰 프리젠터&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="423ff2c6133e25b75601b0a4f1c6920983fb465b" translate="yes" xml:space="preserve">
          <source>MVP designs have the Presenter access the model and interact with the view.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP 디자인은 발표자가 모델에 액세스하고 뷰와 상호 작용하도록합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0a13bcb6d62230c45fda925e5f2e54e195a1d9eb" translate="yes" xml:space="preserve">
          <source>MVP is &lt;em&gt;not&lt;/em&gt; necessarily a scenario where the View is in charge (see Taligent's MVP for example).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP가 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;반드시 뷰를 담당하는 시나리오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;는 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;아닙니다&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (예 : Taligent의 MVP 참조).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="153e761e5f1c4625aab1927ce95ce39495fe46af" translate="yes" xml:space="preserve">
          <source>MVP stands for Model - View- Presenter. This came to a picture in early 2007 where Microsoft introduced Smart Client windows applications.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP는 Model-View- Presenter의 약자입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 2007 년 초에 Microsoft가 Smart Client Windows 응용 프로그램을 도입 한 그림에 대한 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="593ddaf257dbd344ef6de1239417c3856337fd25" translate="yes" xml:space="preserve">
          <source>MVP tends to be a very natural pattern for achieving separated presentation in Web Forms. The reason is that the View is always created first by the ASP.NET runtime. You can &lt;a href=&quot;http://www.codeplex.com/websf/Wiki/View.aspx?title=MVPDocumentation&amp;amp;referringTitle=bundles&quot;&gt;find out more about both variants&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP는 Web Forms에서 분리 된 프리젠 테이션을 달성하는 데 매우 자연스러운 패턴 인 경향이 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그 이유는 항상 ASP.NET 런타임에 의해 뷰가 먼저 생성되기 때문입니다. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.codeplex.com/websf/Wiki/View.aspx?title=MVPDocumentation&amp;amp;referringTitle=bundles&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;두 변종에 대한 자세한 내용을 확인할&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8adb32e4dfc525bd9ed5519dd43628cdd9231191" translate="yes" xml:space="preserve">
          <source>MVP usually uses some sort of a binding framework, such as Microsoft WPF binding framework or various binding frameworks for HTML5 and Java.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP는 일반적으로 Microsoft WPF 바인딩 프레임 워크 또는 HTML5 및 Java에 대한 다양한 바인딩 프레임 워크와 같은 일종의 바인딩 프레임 워크를 사용합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="025ddd6c85eddf626d74a15567c91fb5750cadaf" translate="yes" xml:space="preserve">
          <source>MVP: the view is in charge.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP : 뷰가 담당합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9a44ef615916a4fab8a8e8aac039ef0308295c8d" translate="yes" xml:space="preserve">
          <source>Model-View-Controller</source>
          <target state="translated">Model-View-Controller</target>
        </trans-unit>
        <trans-unit id="4d0814805419c9f47f02998803c65a41d83dd0cf" translate="yes" xml:space="preserve">
          <source>Model-View-Presenter</source>
          <target state="translated">Model-View-Presenter</target>
        </trans-unit>
        <trans-unit id="f9731cd9f1b7c0cad88b11ca9a0dfbb97b762976" translate="yes" xml:space="preserve">
          <source>My experience tells me that moving  a team from web forms to MVP and then from MVP to MVC is relatively easy; moving from web forms to MVC is more difficult.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;내 경험에 따르면 팀을 웹 양식에서 MVP로 이동 한 다음 MVP에서 MVC로 이동하는 것은 상대적으로 쉽습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;웹 양식에서 MVC로 이동하는 것이 더 어렵습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9a7dad07badf4ed27fd0ee61735b1ffe44f86426" translate="yes" xml:space="preserve">
          <source>My humble short view: MVP is for large scales, and MVC for tiny scales. With MVC, I sometime feel the V and the C may be seen a two sides of a single indivisible component rather directly bound to M, and one inevitably falls to this when going down‑to shorter scales, like UI controls and base widgets. At this level of granularity, MVP makes little sense. When one on the contrary go to larger scales, proper interface becomes more important, the same with unambiguous assignment of responsibilities, and here comes MVP.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;내 소소한 짧은 견해 : MVP는 대규모 용이고 MVC는 소규모 용입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC를 사용하면 언젠가 V와 C가 M에 직접 바인딩되지 않고 단일 불가분의 구성 요소의 양면을 볼 수 있으며 UI 컨트롤 및 기본 위젯과 같이 더 짧은 스케일로 내려갈 때 필연적 으로이 부분에 빠질 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 세분화 수준에서 MVP는 의미가 없습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;반대로 하나가 더 큰 규모로 갈 때, 책임을 할당하는 것과 동일하게 적절한 인터페이스가 더 중요 해지고 여기에 MVP가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d6398b6228fc97ad6cbcd6c4e420ab540fdc39c" translate="yes" xml:space="preserve">
          <source>On the other hand, this scale rule of a thumb, may weight very little when the platform characteristics favours some kind of relations between the components, like with the web, where it seems to be easier to implement MVC, more than MVP.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 한편으로, 엄지 손가락의이 척도 규칙은 플랫폼 특성이 웹과 같이 구성 요소들 사이에서 MVP보다 MVC를 구현하는 것이 더 쉬운 것처럼 보이는 구성 요소들간에 어떤 종류의 관계를 선호 할 때 가중치가 거의 없을 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8f3b62032d27bb14f7876f375a718a8b1bd1b65d" translate="yes" xml:space="preserve">
          <source>One other big difference about MVC is that the View does not directly bind to the Model. The view simply renders, and is completely stateless. In implementations of MVC the View usually will not have any logic in the code behind. This is contrary to MVP where it is absolutely necessary because, if the View does not delegate to the Presenter, it will never get called.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC의 또 다른 큰 차이점은 뷰가 모델에 직접 바인딩되지 않는다는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰는 단순히 렌더링되며 완전히 상태 비 저장입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC의 구현에서 View는 일반적으로 코드 뒤에 로직이 없습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기가 발표자에게 위임되지 않으면 절대로 호출되지 않기 때문에 절대적으로 필요한 MVP와 반대입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9d85e7cc0708b67b551018cc07382f91d292f50e" translate="yes" xml:space="preserve">
          <source>One other pattern to look at is the &lt;strong&gt;Presentation Model&lt;/strong&gt; pattern. In this pattern there is no Presenter. Instead the View binds directly to a Presentation Model. The Presentation Model is a Model crafted specifically for the View. This means this Model can expose properties that one would never put on a domain model as it would be a violation of separation-of-concerns. In this case, the Presentation Model binds to the domain model, and may subscribe to events coming from that Model. The View then subscribes to events coming from the Presentation Model and updates itself accordingly. The Presentation Model can expose commands which the view uses for invoking actions. The advantage of this approach is that you can essentially remove the code-behind altogether as the PM completely encapsulates all of the behaviour for the view. This pattern is a very strong candidate for use in WPF applications and is also called &lt;a href=&quot;http://msdn.microsoft.com/en-us/magazine/dd419663.aspx&quot;&gt;Model-View-ViewModel&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;살펴볼 또 다른 패턴은 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프레젠테이션 모델입니다.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;무늬. 이 패턴에는 발표자가 없습니다. 대신보기가 프레젠테이션 모델에 직접 바인딩됩니다. 프레젠테이션 모델은보기 전용으로 만들어진 모델입니다. 즉,이 모델은 도메인 분리에 대한 속성을 노출 할 수 있습니다. 이는 도메인 분리를 위반할 수 있기 때문입니다. 이 경우 프레젠테이션 모델은 도메인 모델에 바인딩되며 해당 모델에서 오는 이벤트를 구독 할 수 있습니다. 그런 다음보기는 프리젠 테이션 모델에서 오는 이벤트를 구독하고 그에 따라 자체적으로 업데이트됩니다. 프리젠 테이션 모델은 뷰가 조치 호출에 사용하는 명령을 노출 할 수 있습니다. 이 접근 방식의 장점은 PM이 뷰의 모든 동작을 완전히 캡슐화하므로 코드 숨김을 근본적으로 제거 할 수 있다는 것입니다.이 패턴은 WPF 응용 프로그램에서 사용할 수있는 매우 강력한 후보이며&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/magazine/dd419663.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model-View-ViewModel&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed38d909f58dd9ee16876dc1d8c2b62c011b11f7" translate="yes" xml:space="preserve">
          <source>Presentation Model</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프리젠 테이션 모델&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea4498215d645ab272e3b3846196223e2f0768f4" translate="yes" xml:space="preserve">
          <source>Pro: by leveraging databinding the amount of code is reduced.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;장점 : 데이터 바인딩을 활용하면 코드 양이 줄어 듭니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2f71b21ad625425383fdafcef7b1c6b4b973b516" translate="yes" xml:space="preserve">
          <source>Pro: maximum testability surface; clean separation of the View and Model</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;장점 : 최대 시험 성 표면; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰와 모델의 깔끔한 분리&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c61fe2f6ea22910c80db69971f026c3b36b9e979" translate="yes" xml:space="preserve">
          <source>So, if for example, the model is a car, then the presenter is some sort of a car presenter, exposes the car properties (year, maker, seats, etc.) to the view. The view knows that the text field called 'car maker' needs to display the presenter Maker property.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어 모델이 자동차 인 경우 발표자는 일종의 자동차 발표자이며 자동차 속성 (연도, 제작자, 좌석 등)을보기에 노출합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰에는 'car maker'라는 텍스트 필드에 발표자 메이커 속성이 표시되어야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3653a3200fb622278cb1e5b02db6ae3aff3eaf82" translate="yes" xml:space="preserve">
          <source>Some people keep forgetting, that MVC &lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller#History&quot;&gt;was created in the late 70&quot;&lt;/a&gt;, and that the Web was only created in late 80&quot;/early 90&quot;.
MVC wasn't originally created for the Web, but for Desktop applications instead, where the Controller, Model and View would co-exist together.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;일부 사람들은 MVC &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller#History&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;가 70 인치 후반에 만들어졌으며&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 웹이 80 인치 후반 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에 생성 된&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 것임을 잊어 버렸 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;습니다. MVC는 원래 웹용이 아니라 데스크탑 응용 프로그램 용으로 만들어졌습니다. , 모델과 뷰가 함께 공존합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b036d150ca2081e3f49a7a021ebf2382e3cd9bbe" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Presenter&lt;/strong&gt; is the &amp;ldquo;middle-man&amp;rdquo; (played by the controller in MVC) and has references to both, view and model. &lt;strong&gt;Please note that the word &amp;ldquo;Model&amp;rdquo;&lt;/strong&gt; is misleading. It should rather be &lt;strong&gt;business logic that retrieves or manipulates a Model&lt;/strong&gt;. For instance: If you have a database storing User in a database table and your View wants to display a list of users, then the Presenter would have a reference to your database business logic (like a DAO) from where the Presenter will query a list of Users.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;발표자&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (MVC에서 컨트롤러에 의해 연주)은 &quot;중간 사람&quot;이고, 뷰와 모델 모두에 대한 참조를 가지고있다. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;ldquo;모델&amp;rdquo;이라는 단어&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 오해의 소지가 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;오히려 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델을 검색하거나 조작하는 비즈니스 로직&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이어야합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어 : 데이터베이스 테이블에 사용자를 저장하는 데이터베이스가 있고보기에서 사용자 목록을 표시하려는 경우 발표자는 발표자가 목록을 쿼리 할 데이터베이스 비즈니스 로직 (예 : DAO)에 대한 참조를 갖습니다. 사용자 수&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7ce9069d0933040f65e27892dbc1478ccd50468c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;model&lt;/strong&gt; is the data that will be displayed in the view (user interface).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모델&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 뷰 (사용자 인터페이스)에 표시되는 데이터이다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9538b9f662cea4b1498ce78dfd7271b9bce9d9d9" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;view&lt;/strong&gt; is an interface that displays data (the model) and routes user commands (events) to the Presenter to act upon that data. The view usually has a reference to its Presenter.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 발표자로 데이터를 표시 (모델) 및 경로의 사용자 명령 (이벤트) 데이터에 따라 행동 할 것을 인터페이스입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기에는 일반적으로 발표자에 대한 참조가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f8cadfc7a7df940200c9941e44f92d7dc05189bb" translate="yes" xml:space="preserve">
          <source>The controller is created or accessed based on some event/request. The controller then creates the appropriate view and interacts with the model to further configure the view. It boils down to: the controller creates and manages the view; the view is slave to the controller. The view does not know about the controller.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러는 일부 이벤트 / 요청에 따라 작성되거나 액세스됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그런 다음 컨트롤러는 적절한 뷰를 생성하고 모델과 상호 작용하여 뷰를 추가로 구성합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러는보기를 작성하고 관리합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰는 컨트롤러의 슬레이브입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기는 컨트롤러에 대해 알지 못합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8bcabe0f3f82d13b623b2c7d77f164d767970a86" translate="yes" xml:space="preserve">
          <source>The distinction made is that in an MVC application traditionally has the view and the controller interact with the model, but not with each other.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;차이점은 MVC 애플리케이션에서 전통적으로 뷰와 컨트롤러가 모델과 상호 작용하지만 서로 상호 작용하지 않는다는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="45d8959b50e1ab78500a4af2828aefe5ad3a0d55" translate="yes" xml:space="preserve">
          <source>The input begins with the View, not the Presenter.
There is a one-to-one mapping between the View and the associated Presenter.
The View holds a reference to the Presenter. The Presenter is also reacting to events being triggered from the View, so its aware of the View its associated with.
The Presenter updates the View based on the requested actions it performs on the Model, but the View is not Model aware.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;입력은 발표자가 아닌보기로 시작합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기와 관련 발표자간에 일대일 매핑이 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기에는 발표자에 대한 참조가 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;발표자는 View에서 트리거되는 이벤트에 반응하므로 View와 관련된 View를 인식합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;발표자는 모델에서 수행 한 요청 된 작업에 따라보기를 업데이트하지만보기는 모델을 인식하지 못합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="301ad9ee0376a5983043321774e9445004e67361" translate="yes" xml:space="preserve">
          <source>The input is directed at the Controller first, not the view. That input might be coming from a user interacting with a page, but it could also be from simply entering a specific url into a browser. In either case, its a Controller that is interfaced with to kick off some functionality.
There is a many-to-one relationship between the Controller and the View. That&amp;rsquo;s because a single controller may select different views to be rendered based on the operation being executed.
Note the one way arrow from Controller to View. This is because the View doesn&amp;rsquo;t have any knowledge of or reference to the controller.
The Controller does pass back the Model, so there is knowledge between the View and the expected Model being passed into it, but not the Controller serving it up.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;입력은보기가 아닌 컨트롤러로 먼저 향합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 입력은 페이지와 상호 작용하는 사용자가 올 수도 있지만 브라우저에 특정 URL을 입력하는 것일 수도 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;두 경우 모두 일부 기능을 시작하기 위해 인터페이스되는 컨트롤러입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controller와 View 사이에는 다 대일 관계가 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단일 컨트롤러가 실행중인 작업에 따라 렌더링 할 다른보기를 선택할 수 있기 때문입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러에서 보기로의 단방향 화살표를 참고하십시오. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이는 View에 컨트롤러에 대한 지식이나 참조가 없기 때문입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤러는 모델을 다시 전달하므로 뷰와 모델로 전달되는 예상 모델 사이에는 지식이 있지만이를 제공하는 컨트롤러는 아닙니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b13f6ab6d7ad93ea600a87ab843ab5508280a401" translate="yes" xml:space="preserve">
          <source>The second flavor of MVP is the Supervising Controller. In that case your View might have a property called Customer, which then again is databound to the UI widgets. You don't have to think about synchronizing and micro-manage the view, and the Supervising Controller can step in and help when needed, for instance with compled interaction logic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP의 두 번째 특징은 Supervising Controller입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 경우 View에는 Customer라는 속성이있을 수 있으며이 속성은 다시 UI 위젯에 데이터 바인딩됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰 동기화 및 미세 관리에 대해 생각할 필요가 없으며 Supervising Controller는 필요한 경우 (예 : 복잡한 상호 작용 논리) 개입하여 도움을 줄 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a64b0bdd2b3ea781381907e13e2c0da16747d45" translate="yes" xml:space="preserve">
          <source>The simplest answer is how the view interacts with the model. In MVP the view is updated by the presenter, which acts as as intermediary between the view and the model. The presenter takes the input from the view, which retrieves the data from the model and then performs any business logic required and then updates the view. In MVC the model updates the view directly rather than going back through the controller.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;가장 간단한 대답은 뷰가 모델과 상호 작용하는 방식입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP에서 뷰는 발표자에 의해 업데이트되며 뷰와 모델 사이의 중개자 역할을합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;발표자는 뷰에서 입력을 가져와 모델에서 데이터를 검색 한 다음 필요한 비즈니스 로직을 수행 한 다음 뷰를 업데이트합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC에서 모델은 컨트롤러를 거치지 않고 뷰를 직접 업데이트합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6a970a3299eb9cfc3156b88ba470bccec8c0ca28" translate="yes" xml:space="preserve">
          <source>The third &quot;flavor&quot; of MVP (or someone would perhaps call it a separate pattern) is the Presentation Model (or sometimes referred to Model-View-ViewModel). Compared to the MVP you &quot;merge&quot; the M and the P into one class. You have your customer object which your UI widgets is data bound to, but you also have additional UI-spesific fields like &quot;IsButtonEnabled&quot;, or &quot;IsReadOnly&quot;, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP의 세 번째 &quot;맛&quot;(또는 다른 패턴이라고도 함)은 프레젠테이션 모델 (또는 때때로 Model-View-ViewModel이라고 함)입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP와 비교하여 M과 P를 하나의 클래스로 &quot;병합&quot;합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;UI 위젯이 데이터 바인딩 된 고객 오브젝트가 있지만 &quot;IsButtonEnabled&quot;또는 &quot;IsReadOnly&quot;등과 같은 추가 UI 관련 필드도 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f669265be325235de5f4cc1ec139e56287acf4e4" translate="yes" xml:space="preserve">
          <source>The view is the initiator for user inputs and then delegates the events to the Presenter and the presenter handles event bindings and gets data from models.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기는 사용자 입력의 개시 자이며 이벤트를 발표자에게 위임하고 발표자는 이벤트 바인딩을 처리하고 모델에서 데이터를 가져옵니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d39997851ece3fcb75c76f9050d8a0121c1ecce4" translate="yes" xml:space="preserve">
          <source>The view, in most cases, creates its presenter. The presenter will interact with the model and manipulate the view through an interface. The view will sometimes interact with the presenter, usually through some interface.  This comes down to implementation; do you want the view to call methods on the presenter or do you want the view to have events the presenter listens to? It boils down to this: The view knows about the presenter. The view delegates to the presenter.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;대부분의 경우보기는 발표자를 만듭니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;발표자는 모델과 상호 작용하고 인터페이스를 통해보기를 조작합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기는 때때로 일부 인터페이스를 통해 발표자와 상호 작용합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 구현으로 귀착됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기가 발표자에서 메소드를 호출하도록 하시겠습니까, 아니면보기가 발표자가 청취하는 이벤트를 갖기를 원하십니까? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것으로 요약됩니다.보기는 발표자에 대해 알고 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;보기는 발표자에게 위임됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="27757769008ceb477f7e05a0cce8b21ba034600f" translate="yes" xml:space="preserve">
          <source>There are many answers to the question, but I felt there is a need for some really simple answer clearly comparing the two. Here's the discussion I made up when a user searches for a movie name in an MVP and MVC app:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;질문에 대한 많은 답변이 있지만, 두 가지를 명확하게 비교하는 정말 간단한 답변이 필요하다고 느꼈습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP 및 MVC 앱에서 사용자가 영화 이름을 검색 할 때 구성한 내용은 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a92db89ca0249089c13b11f20ed6580da41fbc47" translate="yes" xml:space="preserve">
          <source>There are many versions of MVC, this answer is about the original MVC in Smalltalk. In brief, it is</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC에는 여러 버전이 있으며이 답변은 Smalltalk의 원래 MVC에 대한 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;간단히 말해&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82ed275cafa23c2ea8e8869eeae8eea58c31d287" translate="yes" xml:space="preserve">
          <source>There is &lt;a href=&quot;https://www.youtube.com/watch?v=WpkDN78P884&amp;amp;feature=youtu.be&amp;amp;t=29m1s&quot;&gt;this&lt;/a&gt; nice video from Uncle Bob where he briefly explains &lt;strong&gt;MVC&lt;/strong&gt; &amp;amp; &lt;strong&gt;MVP&lt;/strong&gt; at the end.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=WpkDN78P884&amp;amp;feature=youtu.be&amp;amp;t=29m1s&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 그가 간단히 설명 삼촌 밥에서 좋은 비디오 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP를&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 말은.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2387b03e9c36c2f329fc383807a6d7fc068372d9" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff921080.aspx&quot;&gt;MSDN article about the Presentation Model&lt;/a&gt; and a section in the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707819.aspx&quot;&gt;Composite Application Guidance for WPF&lt;/a&gt; (former Prism) about &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707862.aspx&quot;&gt;Separated Presentation Patterns&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff921080.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프리젠 테이션 모델에 대한 MSDN 문서&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와의 섹션 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707819.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;WPF에 대한 복합 응용 프로그램 지침&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에 대한 (전 프리즘) &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707862.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;로 구분 된 프리젠 테이션 패턴&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7ee276ebb5fe1caeea00a1b1761430f0ba014210" translate="yes" xml:space="preserve">
          <source>There is a discussion &lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/10/31/development-trivial-pursuit-the-difference-between-mvc-and-the-different-flavors-of-mvp.aspx&quot;&gt;here&lt;/a&gt; regarding the differences between MVC vs MVP.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC와 MVP의 차이점에 대한 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;논의가 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/10/31/development-trivial-pursuit-the-difference-between-mvc-and-the-different-flavors-of-mvp.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있습니다&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7699ceb8018ddb15756349dc26c7ea4e42bd17a7" translate="yes" xml:space="preserve">
          <source>There is also &lt;a href=&quot;http://gexiaoguo.github.io/MVC,-MVP-and-MVVM/&quot;&gt;a complete comparison of MVC, MVP and MVVM here&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;a href=&quot;http://gexiaoguo.github.io/MVC,-MVP-and-MVVM/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC, MVP 및 MVVM에 대한 완벽한 비교&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 도 &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="732e33e57cc89c110727e2ee01bc05e383b35a3b" translate="yes" xml:space="preserve">
          <source>They are fairly similar in concept, folks initialize the Presenter/Controller differently depending on taste.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그것들은 개념 상 상당히 유사하며, 사람들은 취향에 따라 발표자 / 컨트롤러를 다르게 초기화합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9e06241d8aa910ec172be9a0d74cc298f0b8f2e2" translate="yes" xml:space="preserve">
          <source>They each addresses different problems and can even be combined together to have something like below</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그것들은 각각 다른 문제를 해결하고 아래처럼 만들 수 있습니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="47cadcbcc9b8934f4ae08c3f71c0a82e97d39b6a" translate="yes" xml:space="preserve">
          <source>This binding framework, if you strip it down, it's actually the controller :-)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 바인딩 프레임 워크는 스트립하면 실제로 컨트롤러입니다 :-)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="38e65116cea7797e3e3b184268328e27c9889ae8" translate="yes" xml:space="preserve">
          <source>This is an oversimplification of the many variants of these design patterns, but this is how I like to think about the differences between the two.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 이러한 디자인 패턴의 많은 변형을 지나치게 단순화 한 것이지만 이것이 두 가지 차이점에 대해 생각하는 방식입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f38b8d429e873aab62370e55b7446e42b7d50843" translate="yes" xml:space="preserve">
          <source>This talk &lt;a href=&quot;https://www.youtube.com/watch?v=i1-7S-RxfvQ&quot;&gt;droidcon NYC 2017 - Clean app design with Architecture Components&lt;/a&gt; clarifies it</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 이야기 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=i1-7S-RxfvQ&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;NYC 2017 droidcon - 클린 응용 프로그램 설계 아키텍처 구성 요소와 함께&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 그것을 명확히&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="545847bd273b1f49941092ff8d1fdbab224676c5" translate="yes" xml:space="preserve">
          <source>To be perfectly frank, I think the underlying concerns of MVC hold true for any MVP implementation and the differences are almost entirely semantic. As long as you are following separation of concerns between the view (that displays the data), the controller (that initialises and controls user interaction) and the model (the underlying data and/or services)) then you are achieving the benefits of MVC. If you are achieving the benefits then who really cares whether your pattern is MVC, MVP or Supervising Controller? The only &lt;em&gt;real&lt;/em&gt; pattern remains as MVC, the rest are just differing flavours of it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;완벽하게 솔직히 말해서, MVC의 근본적인 관심사는 MVP 구현에 적용되며 그 차이는 거의 의미 론적이라고 생각합니다. 뷰 (데이터를 표시하는), 컨트롤러 (사용자 상호 작용을 초기화하고 제어하는 ​​컨트롤러) 및 모델 (기본 데이터 및 / 또는 서비스)간에 우려를 분리하는 한 MVC의 이점을 얻을 수 있습니다 . 당신이 이점을 달성하고 있다면 누가 당신의 패턴이 MVC, MVP 또는 Supervising Controller인지 정말 걱정합니까? 유일한 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;실제&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 패턴은 MVC로 남아 있으며 나머지는 그 맛이 다릅니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="482730aa6dd38ce89c84c44cdb10a85967c85887" translate="yes" xml:space="preserve">
          <source>To make this a little more clear, let's imagine a simple shopping list app. All we want is a list of the name, quantity and price of each item we need to buy this week. Below we'll describe how we could implement some of this functionality using MVC.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;좀 더 명확하게하기 위해 간단한 쇼핑 목록 앱을 상상해 봅시다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우리가 원하는 것은 이번 주에 구매해야하는 각 품목의 이름, 수량 및 가격 목록입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;아래에서는 MVC를 사용하여이 기능 중 일부를 구현하는 방법에 대해 설명합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="36881632660b34cfeb60c442c72bb50a89a4b94b" translate="yes" xml:space="preserve">
          <source>To perhaps get an idea of the ASP.NET MVC distinction from MVP, check out &lt;a href=&quot;http://www.hanselman.com/blog/ASPNETMVCSessionAtMix08TDDAndMvcMockHelpers.aspx&quot;&gt;this MIX presentation&lt;/a&gt; by Scott Hanselman.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP와 ASP.NET MVC의 차이점에 대한 아이디어를 얻으려면 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Scott Hanselman의 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.hanselman.com/blog/ASPNETMVCSessionAtMix08TDDAndMvcMockHelpers.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MIX 프레젠테이션&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;확인하십시오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f0d5780f10eb00de3194e1ce64c16ffa7b1a215a" translate="yes" xml:space="preserve">
          <source>Two primary variations</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;두 가지 주요 변형&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d8e5a17a94be3110a5c8a6cb2926e409bcfdd2cb" translate="yes" xml:space="preserve">
          <source>User: Click click &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용자 : 클릭&amp;hellip;을 클릭하십시오&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e2022cac9d87c721fd2ffcf2c90cf08cfbdf0777" translate="yes" xml:space="preserve">
          <source>User: I just clicked on the search button &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용자 : 방금 검색 버튼을 클릭했습니다&amp;hellip;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="caf99ef190bd9af7d81997674d54ae10c2d41178" translate="yes" xml:space="preserve">
          <source>Usually view to presenter map one to one. Complex views may have multi presenters.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;일반적으로 발표자에게 일대일로 표시합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;복잡한보기에는 여러 발표자가있을 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="95de390211342cdae2c03da39ba48cd824c0d405" translate="yes" xml:space="preserve">
          <source>View event binding will be implemented in the Presenter from a view interface.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;View 이벤트 바인딩은 Presenter에서보기 인터페이스에서 구현됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bfb597da495d126f84a30cf8e12a2f5a5589ec42" translate="yes" xml:space="preserve">
          <source>View is more loosely coupled to the model. The presenter is responsible for binding the model to the view.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰가 모델에 더 느슨하게 결합됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;발표자는 모델을 뷰에 바인딩해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0c4a2a610d14eb9943f32d71e4084d55a3fc4f4c" translate="yes" xml:space="preserve">
          <source>What are MVP and MVC and what is the difference</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP 및 MVC 란 무엇이며 차이점은 무엇입니까&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b87b976f1b7223ebb2c16be5928ce8f2d8c3707b" translate="yes" xml:space="preserve">
          <source>What is the &lt;strong&gt;difference&lt;/strong&gt; between &lt;strong&gt;MVC&lt;/strong&gt; and &lt;strong&gt;MVP&lt;/strong&gt; patterns?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 패턴 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;차이점&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;무엇입니까 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;?&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="986d2dd63e33a810f964fed17c9a33c11b99c6f1" translate="yes" xml:space="preserve">
          <source>What issues do these patterns address?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이러한 패턴은 어떤 문제를 해결합니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4015b37baf62151fb930c9a9d0fd14a4a901d977" translate="yes" xml:space="preserve">
          <source>When looking beyond the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rapid_application_development&quot;&gt;RAD&lt;/a&gt; (drag-drop and configure) way of building user interfaces that many tools encourage you are likely to come across three design patterns called &lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;Model-View-Controller&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter&quot;&gt;Model-View-Presenter&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Model_View_ViewModel&quot;&gt;Model-View-ViewModel&lt;/a&gt;. My question has three parts to it:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;많은 도구에서 권장 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하는 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Rapid_application_development&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;RAD&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (드래그 앤 드롭) 방식의 사용자 인터페이스를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;넘어 서면 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model-View-Controller&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model-View-Presenter&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Model_View_ViewModel&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model-View-ViewModel&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이라는 세 가지 디자인 패턴을 보게 될 것 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;내 질문에는 세 부분이 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eaf99e74a9572f632c4513afb3ddf3f4b76892ce" translate="yes" xml:space="preserve">
          <source>When using Passive View, your View typically implement a fine-grained interface with properties mapping more or less directly to the underlaying UI widget. For instance, you might have a ICustomerView with properties like Name and Address.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;수동보기를 사용하는 경우 일반적으로 View는 기본 UI 위젯에 직접 또는 거의 맵핑되는 특성으로 세분화 된 인터페이스를 구현합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어 이름 및 주소와 같은 속성을 가진 ICustomerView가있을 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1b6eedfb17289a07676cf342f01265dd1b006b7d" translate="yes" xml:space="preserve">
          <source>You can then bind to the view many different types of presenter, all must have Maker property - it can be of a plane, train or what ever , the view doesn't care. The view draws data from the presenter - no matter which - as long as it implements an agreed interface.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그런 다음 많은 다른 유형의 발표자에게 뷰에 바인딩 할 수 있으며 모두 메이커 속성이 있어야합니다. 평면, 기차 또는 뷰가 중요하지 않은 뷰일 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뷰는 합의 된 인터페이스를 구현하는 한 발표자로부터 데이터를 가져옵니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fe22486aea6886979af6e1aace2f38d65cce7f51" translate="yes" xml:space="preserve">
          <source>You forgot about &lt;strong&gt;Action-Domain-Responder&lt;/strong&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;ADR&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ADR&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ( &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Action-Domain-Responder)을&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 잊었습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11e7697e759021e33983122c07fc8fc869e0b0da" translate="yes" xml:space="preserve">
          <source>Your Presenter class will talk to the model and &quot;map&quot; it to the view. This approach is called the &quot;Passive View&quot;. The benefit is that the view is easy to test, and it is easier to move between UI platforms (Web, Windows/XAML, etc.). The disadvantage is that you can't leverage things like databinding (which is &lt;em&gt;really&lt;/em&gt; powerful in frameworks like &lt;a href=&quot;http://en.wikipedia.org/wiki/Windows_Presentation_Foundation&quot;&gt;WPF&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Silverlight&quot;&gt;Silverlight&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Presenter 클래스는 모델과 대화하고 뷰에 &quot;매핑&quot;합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 접근 방식을 &quot;패시브 뷰&quot;라고합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이점은 뷰를 테스트하기 쉽고 UI 플랫폼 (웹, Windows / XAML 등)간에 쉽게 이동할 수 있다는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단점은 &lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Windows_Presentation_Foundation&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;WPF&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Silverlight&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Silverlight&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;같은 프레임 워크에서 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;실제로&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 강력한 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;데이터 바인딩과 같은 것을 활용할 수 없다는 것 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;입니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34235fb0fc29596b8a27e0699f118207159cd0e5" translate="yes" xml:space="preserve">
          <source>Your implementation might look something like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;구현은 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
