<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/2056">
    <body>
      <group id="2056">
        <trans-unit id="ca519aa8f232477ca6fb4d7b413bfb8ff28e4d3f" translate="yes" xml:space="preserve">
          <source>( &lt;em&gt;Model&lt;/em&gt; is making a query to the movie database &amp;hellip; ) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模型&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;正在查询电影数据库...）[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b196c782085e0f289a857424f8d3cd8dbdb5b897" translate="yes" xml:space="preserve">
          <source>( &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt; is calling the &lt;em&gt;Model&lt;/em&gt; &amp;hellip; ) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演示者&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制器&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;正在调用&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模型&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;hellip;）[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11738dac3b131594904e3da34a1f722da38d33c0" translate="yes" xml:space="preserve">
          <source>( &lt;em&gt;View&lt;/em&gt; calling the &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt; &amp;hellip; ) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;查看&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼叫&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Presenter&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controller的&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;hellip;）[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="617662bb70662b4ee51904f6a182010f0a37b584" translate="yes" xml:space="preserve">
          <source>( After a while ... )</source>
          <target state="translated">(过了一会儿......)</target>
        </trans-unit>
        <trans-unit id="9d4ae30232c39e1b37db57f07c414ae602ebff4d" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt; thanks &lt;em&gt;Model&lt;/em&gt; and gets back to the &lt;em&gt;View&lt;/em&gt;) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演示者&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制器&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;感谢&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模型&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;并返回到&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3eebbce0b57244ba6f4264a8083b8a2123c286b7" translate="yes" xml:space="preserve">
          <source>(The &lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;article&lt;/a&gt; also matches what Uncle Bob Martin said in his one of his talks: that MVC was originally designed for the small UI components, not for the architecture of the system)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;本文&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;还与鲍勃&amp;middot;马丁叔叔在他的一次演讲中所说的相吻合：MVC最初是为小型UI组件而不是为系统体系结构设计的）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d69c0eadbc92a3002b2d562fc52edc9adb877fe" translate="yes" xml:space="preserve">
          <source>-------------- This is where MVP and MVC start to diverge ---------------</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f856f715b52ee9433e2a04ef7470396b0b845d81" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;/questions/tagged/mvc&quot;&gt;mvc&lt;/a&gt;&lt;a href=&quot;/questions/tagged/adr&quot;&gt;adr&lt;/a&gt;&lt;a href=&quot;/questions/tagged/model-view-controller&quot;&gt;model-view-controller&lt;/a&gt;&lt;a href=&quot;/questions/tagged/action-domain-responder&quot;&gt;action-domain-responder&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;/questions/tagged/mvc&quot;&gt;mvc&lt;/a&gt;&lt;a href=&quot;/questions/tagged/adr&quot;&gt;adr&lt;/a&gt;&lt;a href=&quot;/questions/tagged/model-view-controller&quot;&gt;model-view-controller&lt;/a&gt;&lt;a href=&quot;/questions/tagged/action-domain-responder&quot;&gt;action-domain-responder&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e0805a8ce705f2ac6ed5d15de6da21d7712a490e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Controller&lt;/em&gt;: Thanks for waiting &lt;em&gt;View&lt;/em&gt;, I have asked &lt;em&gt;Model&lt;/em&gt; about your search query. It says it has found a list of matching results and stored them in a variable named &quot;searchResultsList&quot; inside its instance. You can get it from there. Also please hide the progress bar now [&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制器&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：感谢您等待&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;View&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，我已经询问&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有关您的搜索查询。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它说已经找到了匹配结果的列表，并将它们存储在其实例内部名为&amp;ldquo; searchResultsList&amp;rdquo;的变量中。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可以从那里得到它。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;还请现在隐藏进度条[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b3983f1cbfa0649c26418f734f0aa0db26b0cf43" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Model&lt;/em&gt;: Hey &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;, let me check &amp;hellip; [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模特&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：嘿&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;主持人&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制器&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，让我检查一下... [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="02d626ea6ebf4c56bf4694025a75488aeb3fb7b6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Model&lt;/em&gt;: I found a list for you, &lt;em&gt;Presenter&lt;/em&gt;, here it is in JSON &amp;ldquo;[{&quot;name&quot;:&quot;Piano Teacher&quot;,&quot;year&quot;:2001},{&quot;name&quot;:&quot;Piano&quot;,&quot;year&quot;:1993}]&amp;rdquo; [&lt;strong&gt;MVP&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模特&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：我为您找到了一个&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演示者Presenter&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;列表&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，它在JSON中[&amp;ldquo; {{&amp;rdquo; name&amp;ldquo;：&amp;rdquo; Piano Teacher&amp;ldquo;，&amp;rdquo; year&amp;ldquo;：2001}，{&amp;rdquo; name&amp;ldquo;：&amp;rdquo; Piano&amp;ldquo;，&amp;rdquo; year&amp;ldquo;：1993} ]&amp;rdquo; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0d97a0f826ee560a8f304f5306f99eaeaa2a6e7b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Model&lt;/em&gt;: There is some result available, &lt;em&gt;Controller&lt;/em&gt;. I have created a field variable in my instance and filled it with the result. It's name is &quot;searchResultsList&quot; [&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;型号&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：有一些结果可用，&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制器&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我在实例中创建了一个字段变量，并用结果填充了它。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它的名称是&amp;ldquo; searchResultsList&amp;rdquo; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d1026820b8637534d3e5c387c58a14d35c2462bd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;: Thanks &lt;em&gt;View&lt;/em&gt;,&amp;hellip; meanwhile I&amp;rsquo;m looking up the search term on the &lt;em&gt;Model&lt;/em&gt;, please show him/her a progress bar [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;主持人&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：感谢&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;View&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&amp;hellip;同时我正在查找&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上的搜索字词&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，请向他/她显示进度条[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="082d8aab0e7355bce1f34dab98698fc6bde07fa5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;: Thanks for waiting &lt;em&gt;View&lt;/em&gt;, I found a list of matching results for you and arranged them in a presentable format: [&quot;Piano Teacher 2001&quot;,&quot;Piano 1993&quot;]. Please show it to the user in a vertical list. Also please hide the progress bar now [&lt;strong&gt;MVP&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;主持人&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：感谢&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;View&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的等待&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，我为您找到了一个匹配的结果列表，并以合适的格式排列它们：[&amp;ldquo; Piano Teacher 2001&amp;rdquo;，&amp;ldquo; Piano 1993&amp;rdquo;]。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请在垂直列表中向用户显示。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;另外，请立即隐藏进度栏[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6f82c8e2cb67e54724775d8eb3d6c9f1896844a8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;: Hey &lt;em&gt;Model&lt;/em&gt;, Do you have any match for this search term?: &amp;ldquo;piano&amp;rdquo; [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;主持人&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;管理员&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：嗨，&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模特儿&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，您对此搜索词有任何匹配吗？：&amp;ldquo; piano&amp;rdquo; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="28df57da3132198350a38fc4a4fbecf2b3251bfa" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;: Hey &lt;em&gt;View&lt;/em&gt;, is there any search term on that page? [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;主持人&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制器&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：嘿&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;查看&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，是否有任何网页上的搜索字词？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a100e4ba21f44ff5d7a8afa346a7c0b100dbb45" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Hey &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;, a User has just clicked on the search button, what shall I do? [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;查看&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：嘿&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演示&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制器&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，一个用户刚刚单击搜索按钮，我该怎么办？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f60206b05d7120cef3963992fd371e891b6b71e5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Ok, hold on a sec &amp;hellip; . [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：好的，稍等片刻&amp;hellip;&amp;hellip;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82646e9011ff1bbbb2fc937dd69582393ccd56b3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Thank you &quot;Controller&quot; [&lt;strong&gt;MVC&lt;/strong&gt;]
(Now the &lt;em&gt;View&lt;/em&gt; is questioning itself: How should I present the results I get from the &lt;em&gt;Model&lt;/em&gt; to the user? Should the production year of the movie come first or last...? Should it be in a vertical or horizontal list? ...)</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：谢谢&amp;ldquo;控制器&amp;rdquo; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]（现在&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;正在质疑：我应该如何&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;向用户展示&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模型&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;获得的结果&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;？电影的制作年份是第一还是最后一年？？是垂直列表还是水平列表？...）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9bb2ab8bc9f3d5a17d0e1d54691cea402a029772" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Thank you very much &lt;em&gt;Presenter&lt;/em&gt; [&lt;strong&gt;MVP&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：非常感谢&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;主持人&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d0e8539215ad94c8625100b6f44cd2b22541d2d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Who&amp;rsquo;s that? [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：那是谁？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4138a03bcc30a87317df02669cb3494beed2d551" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Yes,&amp;hellip; here it is &amp;hellip; &amp;ldquo;piano&amp;rdquo; [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：是的，这里是&amp;hellip;&amp;ldquo;钢琴&amp;rdquo; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e10b3aa3f3ca649918786d0ac1c826d2957375b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cons:&lt;/strong&gt;
    Bit complex and more work when implementing event bindings</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;缺点：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 实现事件绑定时有点复杂，需要更多工作&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a172147501124e022228068f6941ed911ff4b0b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cons:&lt;/strong&gt;
  Sometimes too much workload for Controllers, if try to render multiple views in same controller.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;缺点：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 如果尝试在同一控制器中呈现多个视图，则有时对于Controllers来说工作量过多。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="156a0cb080027a6ff6d0542b61a78c2d3d218d41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Controllers&lt;/strong&gt; for handling the user interface and application</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;用于处理用户界面和应用程序的&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制器&lt;/font&gt;&lt;/strong&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5e7f66068af168e4fc082d8dc01cb848b92a46b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC (Model View Controller)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC（模型视图控制器）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="608a28a38a1824ff63d31dcd52439b72ddf63906" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC Pattern&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC模式&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d8bc00d019fd0a2f99238073aef9a2d4311db18e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;MVC&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f784873573ecd0397295d7afa60e2c45bfc5eb7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC&lt;/strong&gt; is a pattern for the architecture of a software application. It separate the application logic into three separate parts, promoting modularity and ease of collaboration and reuse. It also makes applications more flexible and welcoming to iterations.It separates an application into the following components:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是软件应用程序体系结构的一种模式。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它将应用程序逻辑分为三个独立的部分，从而提高了模块化，并简化了协作和重用。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它还使应用程序更加灵活并欢迎迭代，并将应用程序分为以下组件：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0a3d14652eb4344ee36a149498b3d4cb34487a0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVP (Model View Presenter)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP（模型视图演示者）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e9c824c237d99d678e99ddbc760e821f4ee9deb8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVP Pattern&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP模式&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f94476ec169490b00a853ca7228940e69d66e2c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVP&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;MVP&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3b088ec128ecc3c454c0327d87d024496300247c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Model-View-Controller&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Model-View-Controller&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b145e8a37e9509a1eda7ea52157c5fbe04d0896" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Model-View-Presenter&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Model-View-Presenter&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="48291acc891f6b0d52b30c232b8856c19deaefa7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Models&lt;/strong&gt; for handling data and business logic</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;处理数据和业务逻辑的&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模型&lt;/font&gt;&lt;/strong&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2033eab462915f68e8f6d27646bea6775e2f24d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Wikipedia states that &quot;&lt;em&gt;Each ADR action, however, is represented by separate classes or closures.&lt;/em&gt;&quot;. This is &lt;strong&gt;not&lt;/strong&gt; necessarily true. Several Actions can be in the same Controller, and the pattern is still the same.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注意：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Wikipedia指出&amp;ldquo; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，每个ADR操作均由单独的类或闭包表示。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;rdquo;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完全正确。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;多个动作可以在同一Controller中，并且模式仍然相同。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b20bafb875f0d0613a38122493b645665486924b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passive View:&lt;/strong&gt; The View is as dumb as possible and contains almost zero logic. The Presenter is a middle man that talks to the View and the Model. The View and Model are completely shielded from one another. The Model may raise events, but the Presenter subscribes to them for updating the View. In Passive View there is no direct data binding, instead the View exposes setter properties which the Presenter uses to set the data. All state is managed in the Presenter and not the View.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;被动视图：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图尽可能愚蠢，并且包含几乎为零的逻辑。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演示者是与视图和模型对话的中间人。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图和模型完全相互屏蔽。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该模型可能引发事件，但是演示者订阅了这些事件以更新视图。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在Passive View中，没有直接的数据绑定，而是View公开了Presenter用于设置数据的setter属性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;所有状态都在Presenter中管理，而不是在View中管理。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34a5a86c8422d6c1567946698cd503d40967adf7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pros:&lt;/strong&gt;
    The view is having only  UI not any logics
    High level of testability</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;优点：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 视图仅具有UI，没有任何逻辑高可测试性&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e01f9565bf9defd5471edf6632bc1687db7b76d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pros:&lt;/strong&gt;
  Emphasis on Single Responsibility Principle
  High level of testability</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;优点：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 强调单一责任原则高水平的可测试性&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="afb437faf2ed73f1dd6b1528a681eedce26744ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Supervising Controller:&lt;/strong&gt; The Presenter handles user gestures. The View binds to the Model directly through data binding. In this case it's the Presenter's job to pass off the Model to the View so that it can bind to it. The Presenter will also contain logic for gestures like pressing a button, navigation, etc.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;监督控制器：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演示者处理用户手势。视图通过数据绑定直接绑定到模型。在这种情况下，演示者的职责是将模型传递给视图，以便可以绑定到视图。演示者还将包含手势的逻辑，例如按下按钮，导航等。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e8e51727d49d4f883cc1a5618583a1730a3423cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Views&lt;/strong&gt; for handling graphical user interface objects and presentation</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;用于处理图形用户界面对象和演示的&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图&lt;/font&gt;&lt;/strong&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="add0cc6a4a79ac095cd7622623adfbac7b346164" translate="yes" xml:space="preserve">
          <source>A concrete workflow of querying and displaying a list of users from a database could work like this:</source>
          <target state="translated">从数据库中查询和显示用户列表的具体工作流程可以是这样的。</target>
        </trans-unit>
        <trans-unit id="1ee2af540a4b66e2e49393871786d070776e55fd" translate="yes" xml:space="preserve">
          <source>A great article on the differences is &lt;a href=&quot;http://www.infragistics.com/community/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;here&lt;/a&gt;.  Most notable is that MVC pattern has the Model updating the View.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关于差异的一篇很棒的文章在&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.infragistics.com/community/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这里&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最值得注意的是，MVC模式具有更新视图的模型。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7480795899c308541ed6768ff447271305dc003" translate="yes" xml:space="preserve">
          <source>A presenter is acting as a supervisory role in MVP which binding View events and business logic from models.</source>
          <target state="translated">主持人在MVP中担任监督角色,从模型中绑定View事件和业务逻辑。</target>
        </trans-unit>
        <trans-unit id="f1f788974cbeb29212645f28d4349b64ddc799a8" translate="yes" xml:space="preserve">
          <source>Also worth remembering is that there are different types of MVPs as well. Fowler has broken the pattern into two - Passive View and Supervising Controller.</source>
          <target state="translated">另外值得注意的是,MVP也有不同的类型。Fowler将模式分为两种--被动视图和监督控制器。</target>
        </trans-unit>
        <trans-unit id="18f0b68ee7609a444a8d9a6033eb2ae6e263c776" translate="yes" xml:space="preserve">
          <source>And so, you can look on MVP as an evolution of MVC.</source>
          <target state="translated">所以,你可以把MVP看成是MVC的进化。</target>
        </trans-unit>
        <trans-unit id="07cdb35e36e9c49bf40e639443ef77de2afbca7d" translate="yes" xml:space="preserve">
          <source>Architecturally, MVP is Page Controller based approach where MVC is Front Controller based approach. 
That means that in MVP standard web form page life cycle is just enhanced by extracting the business logic from code behind. In other words, page is the one servicing http request. In other words, MVP IMHO is web form evolutionary type of enhancement.
MVC on other hand changes completely the game because the request gets intercepted by controller class before page is loaded, the business logic is executed there and then at the end result of controller processing the data just dumped to the page (&quot;view&quot;)
In that sense, MVC looks (at least to me) a lot to Supervising Controller flavor of MVP enhanced with routing engine</source>
          <target state="translated">在架构上,MVP是基于页面控制器的方法,而MVC是基于前台控制器的方法。这意味着,在MVP标准的web表单中,页面的生命周期只是通过从后面的代码中提取业务逻辑来增强。换句话说,页面就是服务于http请求的那个页面。换句话说,MVP IMHO是web表单的进化型增强。另一方面,MVC完全改变了游戏,因为在页面加载之前,请求被控制器类拦截,业务逻辑在那里被执行,然后在控制器处理的最终结果是将数据转储到页面(&quot;视图&quot;)。</target>
        </trans-unit>
        <trans-unit id="7900b35c8f8f0559bbd47d5e988ed320a97b09a9" translate="yes" xml:space="preserve">
          <source>As explained in some graphics above, there's a direct relation/link between the &lt;strong&gt;Model&lt;/strong&gt; and the &lt;strong&gt;View&lt;/strong&gt; in MVC.
An action is performed on the &lt;strong&gt;Controller&lt;/strong&gt;, which will execute an action on the &lt;strong&gt;Model&lt;/strong&gt;. That action in the &lt;strong&gt;Model&lt;/strong&gt;, &lt;strong&gt;will trigger a reaction&lt;/strong&gt; in the &lt;strong&gt;View&lt;/strong&gt;.
The &lt;strong&gt;View&lt;/strong&gt;, is always updated when the &lt;strong&gt;Model&lt;/strong&gt;'s state changes.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如上图所示，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模型&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;之间存在直接关系/链接&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controller&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上执行一个动作，该&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controller&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将在&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上执行一个动作&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这一行动&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模式&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将触发反应&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的时候总是更新&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;型号&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的状态发生改变。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a1a531af64742c2e545bfca92ada8c68ab0f969" translate="yes" xml:space="preserve">
          <source>Because we use web frameworks (&lt;em&gt;eg:. Laravel&lt;/em&gt;) that still use the same naming conventions (&lt;em&gt;model-view-controller&lt;/em&gt;), we tend to think that it must be MVC, but it's actually something else.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因为我们使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仍然使用相同命名约定（&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;model-view-controller&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Web框架（&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如：。Laravel&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，所以我们倾向于认为它必须是MVC，但实际上是其他东西。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c683c3c42c4cd8715c9521a1ca053a3971db3040" translate="yes" xml:space="preserve">
          <source>Both are patterns trying to separate presentation and business logic, decoupling business logic from UI aspects</source>
          <target state="translated">这两种模式都是试图将表现形式和业务逻辑分开,将业务逻辑与UI方面解耦的模式。</target>
        </trans-unit>
        <trans-unit id="c6fd44fcf9a87b472af5d303c81d0de0302f74aa" translate="yes" xml:space="preserve">
          <source>Both of them enable TDD and have downsides and upsides.</source>
          <target state="translated">两者都能实现TDD,而且都有弊端和上风。</target>
        </trans-unit>
        <trans-unit id="a2fe14e6a8b913548e0224385c96a940a1ab537f" translate="yes" xml:space="preserve">
          <source>Both of these frameworks aim to seperate concerns - for instance, interaction with a data source (model), application logic (or turning this data into useful information) (Controller/Presenter) and display code (View).  In some cases the model can also be used to turn a data source into a higher level abstraction as well.  A good example of this is the &lt;a href=&quot;http://blog.wekeroad.com/mvc-storefront/&quot;&gt;MVC Storefront project&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这两个框架的目的都是分开关注，例如，与数据源（模型）的交互，应用程序逻辑（或将这些数据转换为有用的信息）（控制器/演示器）和显示代码（视图）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在某些情况下，该模型还可以用于将数据源转换为更高级别的抽象。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blog.wekeroad.com/mvc-storefront/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC Storefront项目&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;就是一个很好的例子&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4883d883e11f6be5048f16fc28a04c5642fc6323" translate="yes" xml:space="preserve">
          <source>Both presentation patterns.  They separate the dependencies between a Model (think Domain objects), your screen/web page (the View), and how your UI is supposed to behave (Presenter/Controller)</source>
          <target state="translated">这两种展现模式。它们分离了模型(认为域对象)、你的屏幕网页(视图)和你的UI应该如何表现(PresenterController)之间的依赖关系。</target>
        </trans-unit>
        <trans-unit id="7db23f637ba3aad5f36394f1c2f821f44340dc90" translate="yes" xml:space="preserve">
          <source>Can be responsible for determining which view to display</source>
          <target state="translated">可负责决定显示哪个视图</target>
        </trans-unit>
        <trans-unit id="f59f787c0c1f783c7964e0e7231384d7c6999d75" translate="yes" xml:space="preserve">
          <source>Can be responsible for determining which view to display (Front Controller Pattern)</source>
          <target state="translated">可负责决定显示哪个视图(前部控制器模式)。</target>
        </trans-unit>
        <trans-unit id="7375c53b3b9ebcc70a87ca2788a6bb5126518c27" translate="yes" xml:space="preserve">
          <source>Con: more work (for example all the setter properties) as you are doing all the data binding yourself.</source>
          <target state="translated">Con:更多的工作(例如所有的setter属性),因为你要自己做所有的数据绑定。</target>
        </trans-unit>
        <trans-unit id="f7d3bb72a6caa8d05eddbf6498df612a214d40a0" translate="yes" xml:space="preserve">
          <source>Con: there's less testable surface (because of data binding), and there's less encapsulation in the View since it talks directly to the Model.</source>
          <target state="translated">Con:可测试的面较少(因为数据绑定),而且View中的封装较少,因为它直接与Model对话。</target>
        </trans-unit>
        <trans-unit id="eab32874de4f2687be749f41491e594cb1d82fc7" translate="yes" xml:space="preserve">
          <source>Conclusion - MVP and MVC are both decouple of UI patterns, but MVP usually uses a bindings framework which is MVC underneath. THUS MVP is at a higher architectural level than MVC and a wrapper pattern above of MVC.</source>
          <target state="translated">总结--MVP和MVC都是UI模式的解耦,但MVP通常使用的是绑定框架,绑定框架下面是MVC。THUS MVP比MVC处于更高的架构层面,是MVC之上的一个封装模式。</target>
        </trans-unit>
        <trans-unit id="80ec6fa88a532e57d985374bcc69a69ba3949d2c" translate="yes" xml:space="preserve">
          <source>Consider &lt;a href=&quot;https://lostechies.com/derekgreer/2007/08/25/interactive-application-architecture/&quot;&gt;this&lt;/a&gt; highly exciting article that comprehensively lists a number of these differing implementations. 
You may note that they're all basically doing the same thing but slightly differently.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;考虑一下&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://lostechies.com/derekgreer/2007/08/25/interactive-application-architecture/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这篇&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;激动人心的文章，它全面列出了许多这些不同的实现。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可能会注意到，他们基本上都在做相同的事情，但略有不同。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0370c4db503c7f19467ccbfbd5f1b2695c83c0c8" translate="yes" xml:space="preserve">
          <source>Controller are based on behaviors and can be shared across views</source>
          <target state="translated">控制器以行为为基础,可以跨视图共享。</target>
        </trans-unit>
        <trans-unit id="2cab38a568d9155fb3cc8caa5166e589d7c1e307" translate="yes" xml:space="preserve">
          <source>Controller is the initiator and it decides which view to render.</source>
          <target state="translated">控制器是发起者,它决定了要呈现的视图。</target>
        </trans-unit>
        <trans-unit id="0f0cac48c1eaf1076d16c7f442e6fb6f16e850e1" translate="yes" xml:space="preserve">
          <source>Decision on how to choose one of them IMHO should be based on how much time one invested in ASP NET web form type of web development. 
If one would consider himself good in web forms, I would suggest MVP. 
If one would feel not so comfortable in things such as page life cycle etc MVC could be a way to go here.</source>
          <target state="translated">如何选择其中一个,IMHO应该根据一个人在ASP.NET web form类型的web开发中投入了多少时间来决定。如果一个人认为自己在web表单方面很擅长,我会建议选择MVP。如果一个人觉得自己在页面生命周期等方面不那么自如,那么MVC可能是一个不错的选择。</target>
        </trans-unit>
        <trans-unit id="a2b447c22214c841c979d8d26240ed2438d50a64" translate="yes" xml:space="preserve">
          <source>Easier to unit test because interaction with the view is through an interface</source>
          <target state="translated">更容易进行单元测试,因为与视图的交互是通过接口进行的。</target>
        </trans-unit>
        <trans-unit id="f68548bd19b6038792cfbed16937610ee0a1067c" translate="yes" xml:space="preserve">
          <source>For more &lt;a href=&quot;http://geekswithblogs.net/dlussier/archive/2009/11/21/136454.aspx&quot;&gt;Reference&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更多&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://geekswithblogs.net/dlussier/archive/2009/11/21/136454.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参考&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eed30dbb7348a447a272cc33a07f00c86a07d0c3" translate="yes" xml:space="preserve">
          <source>Having said that, ASP.NET MVC is by these definitions an MVP framework because the Controller accesses the Model to populate the View which is meant to have no logic (just  displays the variables provided by the Controller).</source>
          <target state="translated">话虽如此,ASP.NET MVC按照这些定义是一个MVP框架,因为Controller访问Model来填充View,而View是没有逻辑的(只是显示Controller提供的变量)。</target>
        </trans-unit>
        <trans-unit id="10718b2650bdd7d40cdaf7c2f35682e59070f0d1" translate="yes" xml:space="preserve">
          <source>Here are illustrations which represent communication flow</source>
          <target state="translated">以下是代表通信流程的插图</target>
        </trans-unit>
        <trans-unit id="ab0f6e9f65e0dabff8c8e9d94199d95b90198921" translate="yes" xml:space="preserve">
          <source>Here are the key differences between
  the patterns:</source>
          <target state="translated">以下是这两种模式的主要区别。</target>
        </trans-unit>
        <trans-unit id="23fb19bb0fae2989c392271f0e4532d29c366749" translate="yes" xml:space="preserve">
          <source>Here's yet another blog post link giving a little bit more details on this topic</source>
          <target state="translated">这里是另一篇博文的链接,给大家介绍一下这个话题的细节。</target>
        </trans-unit>
        <trans-unit id="a90c388214ce036e2cda7ca7a1beee59ef3deae1" translate="yes" xml:space="preserve">
          <source>How are they different?</source>
          <target state="translated">他们有什么不同?</target>
        </trans-unit>
        <trans-unit id="697947ce28dd90b01db12e3c405bdc08838f4195" translate="yes" xml:space="preserve">
          <source>How are they similar?</source>
          <target state="translated">他们有什么相似之处?</target>
        </trans-unit>
        <trans-unit id="7c5691bc0007eee09d5e34fc2592d5bd59ebb6ad" translate="yes" xml:space="preserve">
          <source>I blogged about this a while back, quoting on &lt;a href=&quot;http://blogs.infragistics.com/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;Todd Snyder's excellent post on the difference between the two&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不久前，我写了一篇有关这方面的博文，并引用了&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.infragistics.com/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;托德&amp;middot;斯奈德（Todd Snyder）的出色文章，介绍了两者之间的区别&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="25982e196977ef10b7d392b37ae8877db51a1842" translate="yes" xml:space="preserve">
          <source>I find it unfortunate that people are still preaching this as a pattern (View in charge) as opposed to an anti-pattern as it contradicts &quot;It's just a view&quot; (Pragmatic Programmer). &quot;It's just a view&quot; states that the final view shown to the user is a secondary concern of the application. Microsoft's MVP pattern renders re-use of Views much more difficult and &lt;em&gt;conveniently&lt;/em&gt; excuses Microsoft's designer from encouraging bad practice.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我发现不幸的是，人们仍然将其作为一种模式（负责视图）而不是反模式来进行讲道，因为它与&amp;ldquo;这只是一个视图&amp;rdquo;（实用程序员）相矛盾。 &amp;ldquo;这只是一个视图&amp;rdquo;指出向用户显示的最终视图是该应用程序的第二要务。微软的MVP模式使视图的重用变得更加困难，并且为&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;微软的设计师鼓励不良做法提供了&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;便利&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="617c09cbfe565552af42069b17032c053c0073d9" translate="yes" xml:space="preserve">
          <source>I have also blogged about the Model-View-ViewModel pattern in the context of Silverlight over at &lt;em&gt;&lt;a href=&quot;http://jonas.follesoe.no/2008/07/19/youcard-re-visited-implementing-the-viewmodel-pattern&quot;&gt;YouCard Re-visited: Implementing the ViewModel pattern&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我还在&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;a href=&quot;http://jonas.follesoe.no/2008/07/19/youcard-re-visited-implementing-the-viewmodel-pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;重新访问YouCard时&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在Silverlight的上下文中写了有关Model-View-ViewModel模式的博客&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：重新实现ViewModel模式&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="52cf88109ce249187c1207e73bc21232ed04270e" translate="yes" xml:space="preserve">
          <source>I have used both MVP and MVC and although we as developers tend to focus on the technical differences of both patterns the point for MVP in IMHO is much more related to ease of adoption than anything else.</source>
          <target state="translated">我同时使用过MVP和MVC,虽然我们作为开发者往往会关注这两种模式的技术差异,但在IMHO中,MVP的要点更多的是与采用的难易程度有关。</target>
        </trans-unit>
        <trans-unit id="bb50a9cb6d28245cb89b00d7267f2ac0489d11de" translate="yes" xml:space="preserve">
          <source>I hope this helps better.</source>
          <target state="translated">希望对你有更好的帮助。</target>
        </trans-unit>
        <trans-unit id="042f19d6cbe76666e2c4e9ce7cc57222d9fa609e" translate="yes" xml:space="preserve">
          <source>I leave here a link to a series of articles a friend of mine has published about MVP and MVC.</source>
          <target state="translated">我在这里留下了我一个朋友发表的关于MVP和MVC的系列文章的链接。</target>
        </trans-unit>
        <trans-unit id="cc0f2d6d3263af56b02cbd8885ff46c2faad91fe" translate="yes" xml:space="preserve">
          <source>I personally think MVP has only been recently re-introduced as a catchy term to either reduce arguments between semantic bigots who argue whether something is truly MVC or not or to justify Microsofts Rapid Application Development tools. Neither of these reasons in my books justify its existence as a separate design pattern.</source>
          <target state="translated">我个人认为,MVP只是最近才被重新引入,作为一个琅琅上口的名词,要么是为了减少语义偏激者之间的争论,因为他们争论某事是否是真正的MVC,要么是为了证明Microsofts Rapid Application Development工具的合理性。在我的书中,这两个理由都不足以证明它作为一个独立的设计模式存在。</target>
        </trans-unit>
        <trans-unit id="b13c436ba56a339968c458a3f31dad8b43483d6d" translate="yes" xml:space="preserve">
          <source>I think the best resource I've found to UI architecture is the series of blog posts done by Jeremy Miller over at &lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/07/25/the-build-your-own-cab-series-table-of-contents.aspx&quot;&gt;The Build Your Own CAB Series Table of Contents&lt;/a&gt;. He covered all the flavors of MVP and showed C# code to implement them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我认为，我发现有关UI体系结构的最佳资源是Jeremy Miller在&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/07/25/the-build-your-own-cab-series-table-of-contents.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;ldquo;构建自己的CAB系列目录&amp;rdquo;中&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;撰写的一系列博客文章&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他介绍了MVP的所有方面，并展示了实现它们的C＃代码。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5c241da24a69fbe9adc16bb3eef4db68da44938c" translate="yes" xml:space="preserve">
          <source>I think this image by Erwin Vandervalk (and the accompanying &lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;article&lt;/a&gt;) is the best explanation of MVC, MVP, and MVVM, their similarities, and their differences. The &lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;article&lt;/a&gt; does not show up in search engine results for queries on &quot;MVC, MVP, and MVVM&quot; because the title of the article does not contain the words &quot;MVC&quot; and &quot;MVP&quot;; but it is the best explanation, I think.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我认为Erwin Vandervalk（及其随附的&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;文章&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）提供的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这张图像&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是MVC，MVP和MVVM及其相似之处和差异的最好解释。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;文章&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;未出现在搜索引擎结果中的&amp;ldquo; MVC，MVP和MVVM&amp;rdquo;查询中，因为该文章的标题不包含单词&amp;ldquo; MVC&amp;rdquo;和&amp;ldquo; MVP&amp;rdquo;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但我认为这是最好的解释。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="922f8a21f3de48e180ca529ef6809b6f6eace184" translate="yes" xml:space="preserve">
          <source>IMO, MVP is an improved version of MVC where you basically separate the concern of what you're gonna show (the data) from how you're gonna show (the view). The presenter includes kinda the business logic of your UI, implicitly imposes what data should be presented and gives you a list of dumb view models. And when the time comes to show the data, you simply plug your view (probably includes the same id's) into your adapter and set the relevant view fields using those view models with a minimum amount of code being introduced (just using setters). Its main benefit is you can test your UI business logic against many/various views like showing items in a horizontal list or vertical list.</source>
          <target state="translated">IMO,MVP是MVC的改进版,你基本上把你要展示什么(数据)和如何展示(视图)的问题分开了。介绍者包括了你的UI的业务逻辑,隐含了应该展示什么数据,并给你提供了一个愚蠢的视图模型列表。而当显示数据的时候,你只需将你的视图(可能包括相同的id)插入到你的适配器中,然后使用这些视图模型设置相关的视图字段,只需引入最少的代码量(只需使用设置器)。它的主要好处是,你可以用许多不同的视图来测试你的UI业务逻辑,比如在水平列表或垂直列表中显示项目。</target>
        </trans-unit>
        <trans-unit id="f9cccd67f2542ff5fc1b213379d523acfb8fc112" translate="yes" xml:space="preserve">
          <source>If I&amp;rsquo;m working in a team that already as a good background on web forms development style it&amp;rsquo;s far easier to introduce MVP than MVC. I would say that MVP in this scenario is a quick win.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果我正在一个已经具有Web表单开发风格的良好背景的团队中工作，那么介绍MVP比MVC要容易得多。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我想说，在这种情况下，MVP是一个快速的胜利。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6558f723fbe4fed38574748b2f5302f711c7b446" translate="yes" xml:space="preserve">
          <source>If you want to see a sample with simple implementation please check
  &lt;a href=&quot;https://github.com/rahulabrol/Messanger&quot;&gt;this&lt;/a&gt; GitHub post</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您想查看具有简单实现的示例，请查看 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/rahulabrol/Messanger&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;此&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; GitHub帖子&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ff98f23bff189ce3ed1260b7af476ccdf802ce2b" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;MVP&lt;/strong&gt;, the Presenter contains the UI business logic for the View. All invocations from the View delegate directly to Presenter. The Presenter is also decoupled directly from the View and talks to it through an interface. This is to allow mocking of the View in a unit test. One common attribute of MVP is that there has to be a lot of two-way dispatching. For example, when someone clicks the &quot;Save&quot; button, the event handler delegates to the Presenter's &quot;OnSave&quot; method. Once the save is completed, the Presenter will then call back the View through its interface so that the View can display that the save has completed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP中&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，Presenter包含视图的UI业务逻辑。 View委托的所有调用均直接传递给Presenter。演示者也直接从视图中分离出来，并通过界面与之对话。这是为了在单元测试中模拟View。 MVP的一个共同属性是必须有很多双向分配。例如，当某人单击&amp;ldquo;保存&amp;rdquo;按钮时，事件处理程序将委托给演示者的&amp;ldquo; OnSave&amp;rdquo;方法。保存完成后，演示者将通过其界面回调视图，以便视图可以显示保存已完成。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4898bac1b812a0b26c28dd47383904e1b95ee622" translate="yes" xml:space="preserve">
          <source>In MVC, View has the UI part, controller is the mediator between view and model &amp;amp; model contains the business logic .</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在MVC中，View具有UI部分，控制器是视图与模型之间的中介，而模型则包含业务逻辑。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="caecc0e801c5a72f71f7c171cabd84f782e9cfa3" translate="yes" xml:space="preserve">
          <source>In MVC, we talk through interfaces (boundaries) to glue different layers. A controller is a plug-in to our architecture but it has no such a restriction to impose what to show. In that sense, MVP is kind of an MVC with a concept of views being pluggable to the controller over adapters.</source>
          <target state="translated">在MVC中,我们通过接口(边界)来粘合不同的层,通过接口(边界)来说话。控制器是我们架构的一个插件,但它没有这样的限制,可以强加什么显示。从这个意义上说,MVP有点像MVC,视图是可以通过适配器对控制器进行插件的概念。</target>
        </trans-unit>
        <trans-unit id="4aa9d0ac4aa811604ba2904ebe7265f0d26b5e42" translate="yes" xml:space="preserve">
          <source>In MVP the view draws data from the presenter which draws and prepares/normalizes data from the model while in MVC the controller draws data from the model and set, by push in the view.</source>
          <target state="translated">在MVP中,视图从预设者中绘制数据,预设者从模型中绘制并准备好数据,而在MVC中,控制器通过视图中的推送,从模型中绘制数据并设置。</target>
        </trans-unit>
        <trans-unit id="ad4b0748ab0354e78964e5f9aeeced463b697404" translate="yes" xml:space="preserve">
          <source>In MVP you can have a single view working with multiple types of presenters and a single presenter working with different multiple views.</source>
          <target state="translated">在MVP中,你可以让一个视图与多种类型的演示者一起工作,也可以让一个演示者与不同的多视图一起工作。</target>
        </trans-unit>
        <trans-unit id="b9a8f65c70c9330d2e4e7ba75b8180257b99ea2d" translate="yes" xml:space="preserve">
          <source>In MVP, View contains both UI and implementation of the presenter since here the presenter is just an interface &amp;amp; model is the same i.e contains business logic .</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在MVP中，View包含演示者的UI和实现，因为在这里，演示者只是一个接口，模型是相同的，即包含业务逻辑。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="753aca984485212d4969261a40a0ecdd95c56195" translate="yes" xml:space="preserve">
          <source>In case you're interested, I have been writing a series of articles dealing with app architectural patterns (MVC, MVP, MVVP, clean architecture, ...) accompanied by a Github repo &lt;a href=&quot;http://www.digigene.com/android-architecture-wolfkcats&quot;&gt;here&lt;/a&gt;. Even though the sample is written for android, the underlying principles can be applied to any medium.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果你有兴趣，我一直在写了一系列的处理应用架构模式的文章（MVC，MVP，MVVP，干净的架构，...）伴随着一个GitHub库&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.digigene.com/android-architecture-wolfkcats&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这里&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;即使该示例是为android编写的，其基本原理也可以应用于任何媒介。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9dd58705a824f4c7cd55ad599bf82c53e303f903" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;MVC&lt;/strong&gt;, the Controller is responsible for determining which View to display in response to any action including when the application loads. This differs from MVP where actions route through the View to the Presenter. In MVC, every action in the View correlates with a call to a Controller along with an action. In the web each action involves a call to a URL on the other side of which there is a Controller who responds. Once that Controller has completed its processing, it will return the correct View. The sequence continues in that manner throughout the life of the application:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC中&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，控制器负责确定响应于任何操作（包括应用程序何时加载）显示哪个视图。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这与MVP不同，在MVP中，操作通过视图路由到演示者。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在MVC中，视图中的每个动作都与对Controller的调用以及一个动作相关联。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在网络中，每个动作都涉及对URL的调用，在该URL的另一侧有一个Controller响应。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该控制器完成处理后，将返回正确的视图。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该序列在应用程序的整个生命周期中都以这种方式继续：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9aa9b9e508319acacb670f8c7e75d029ce538b29" translate="yes" xml:space="preserve">
          <source>In those frameworks, the UI/HTML5/XAML, is aware of what property of the presenter each UI element displays, so when you bind a view to a presenter, the view looks for the properties and knows how to draw data from them and how to set them when a value is changed in the UI by the user.</source>
          <target state="translated">在那些框架中,UIHTML5XAML,是知道每个UI元素显示的presenter的什么属性的,所以当你把视图绑定到presenter上时,视图就会寻找这些属性,并知道如何从这些属性中引出数据,以及当用户在UI中改变一个值时,如何设置这些属性。</target>
        </trans-unit>
        <trans-unit id="c01cde1f4d24cec2a304f26abfafadee545f5a75" translate="yes" xml:space="preserve">
          <source>Instead, have a look at &lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;Action-Domain-Responder&lt;/a&gt;.
In ADR, the &lt;strong&gt;Controller&lt;/strong&gt; gets an &lt;strong&gt;Action&lt;/strong&gt;, which will perform an operation in the &lt;strong&gt;Model/Domain&lt;/strong&gt;. So far, the same.
The difference is, it then collects that operation's response/data, and pass it to a &lt;strong&gt;Responder&lt;/strong&gt; (&lt;em&gt;eg:. &lt;code&gt;view()&lt;/code&gt;&lt;/em&gt;) for rendering.
When a new action is requested on the same component, the &lt;strong&gt;Controller&lt;/strong&gt; is called again, and the cycle repeats itself.
In ADR, there's &lt;strong&gt;no connection&lt;/strong&gt; between the Model/Domain and the View (&lt;em&gt;Reponser's response&lt;/em&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;相反，请查看&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Action-Domain-Responder&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。在ADR中，&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制器&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;获得一个&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Action&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，它将在&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model / Domain中&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;执行操作&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。到目前为止，都一样。不同之处在于，它随后收集了该操作的响应/数据，并将其传递给&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Responder&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如：。view &lt;/font&gt;&lt;/font&gt; &lt;code&gt;view()&lt;/code&gt; &lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）以进行渲染。当在同一组件上请求执行新操作时，将&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;再次调用&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controller&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，并且循环会重复进行。在ADR中，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模型/域与视图（&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;响应者的响应&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;之间&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;没有联系&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6bf0642feeed5b037f39e4a3637221ff5a6fd72a" translate="yes" xml:space="preserve">
          <source>It is the best explanation on the web I could find.</source>
          <target state="translated">这是我在网上能找到的最好的解释。</target>
        </trans-unit>
        <trans-unit id="c0e59ffc55e85fc20e92dbecba004d8fe98d71a0" translate="yes" xml:space="preserve">
          <source>MVC = Model-View-Controller</source>
          <target state="translated">MVC=模型-视图-控制器</target>
        </trans-unit>
        <trans-unit id="8a43b3b072a5b6199b18f294ed1df5f2594545ac" translate="yes" xml:space="preserve">
          <source>MVC is great, but the problem is that usually its controller per view. Controller A knows how to set fields of View A. If now, you want View A to display data of model B, you need Controller A to know model B, or you need Controller A to receive an object with an interface - which is like MVP only without the bindings, or you need to rewrite the UI set code in Controller B.</source>
          <target state="translated">MVC很好,但问题是,通常它的控制器是每个视图的控制器。Controller A知道如何设置View A的字段,如果现在想让View A显示模型B的数据,需要Controller A知道模型B的数据,或者需要Controller A接收一个接口的对象--这就像MVP只是没有绑定,或者需要在Controller B中重写UI设置代码。</target>
        </trans-unit>
        <trans-unit id="1a1de6da1e685269460dfb990c3cd363bf1bf525" translate="yes" xml:space="preserve">
          <source>MVC stands for Model-View-Controller. Controller is responsible for creating models and rendering views with binding models.</source>
          <target state="translated">MVC是Model-View-Controller的缩写。Controller负责创建模型,并通过绑定模型渲染视图。</target>
        </trans-unit>
        <trans-unit id="2d7472c153b90e4439c448216cb3bca8ac60031b" translate="yes" xml:space="preserve">
          <source>MVC: the controller is in charge.</source>
          <target state="translated">MVC:控制者说了算。</target>
        </trans-unit>
        <trans-unit id="666e13a62670ef5dd9c954b6ed8731d40b354b51" translate="yes" xml:space="preserve">
          <source>MVP = Model-View-Presenter</source>
          <target state="translated">MVP=Model View Presenter</target>
        </trans-unit>
        <trans-unit id="423ff2c6133e25b75601b0a4f1c6920983fb465b" translate="yes" xml:space="preserve">
          <source>MVP designs have the Presenter access the model and interact with the view.</source>
          <target state="translated">MVP设计让Presenter访问模型并与视图交互。</target>
        </trans-unit>
        <trans-unit id="0a13bcb6d62230c45fda925e5f2e54e195a1d9eb" translate="yes" xml:space="preserve">
          <source>MVP is &lt;em&gt;not&lt;/em&gt; necessarily a scenario where the View is in charge (see Taligent's MVP for example).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP是&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不是&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一定是这样一个场景，查看负责（见Taligent公司的例如MVP）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="153e761e5f1c4625aab1927ce95ce39495fe46af" translate="yes" xml:space="preserve">
          <source>MVP stands for Model - View- Presenter. This came to a picture in early 2007 where Microsoft introduced Smart Client windows applications.</source>
          <target state="translated">MVP是Model-View-Presenter的缩写。这是2007年年初微软推出智能客户端窗口应用的图片。</target>
        </trans-unit>
        <trans-unit id="593ddaf257dbd344ef6de1239417c3856337fd25" translate="yes" xml:space="preserve">
          <source>MVP tends to be a very natural pattern for achieving separated presentation in Web Forms. The reason is that the View is always created first by the ASP.NET runtime. You can &lt;a href=&quot;http://www.codeplex.com/websf/Wiki/View.aspx?title=MVPDocumentation&amp;amp;referringTitle=bundles&quot;&gt;find out more about both variants&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP往往是在Web窗体中实现独立表示的一种非常自然的模式。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;原因是View总是首先由ASP.NET运行时创建。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可以&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.codeplex.com/websf/Wiki/View.aspx?title=MVPDocumentation&amp;amp;referringTitle=bundles&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;找到有关这两种变体的更多信息&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8adb32e4dfc525bd9ed5519dd43628cdd9231191" translate="yes" xml:space="preserve">
          <source>MVP usually uses some sort of a binding framework, such as Microsoft WPF binding framework or various binding frameworks for HTML5 and Java.</source>
          <target state="translated">MVP通常使用某种绑定框架,如Microsoft WPF绑定框架或HTML5和Java的各种绑定框架。</target>
        </trans-unit>
        <trans-unit id="025ddd6c85eddf626d74a15567c91fb5750cadaf" translate="yes" xml:space="preserve">
          <source>MVP: the view is in charge.</source>
          <target state="translated">MVP:景言说了算。</target>
        </trans-unit>
        <trans-unit id="9a44ef615916a4fab8a8e8aac039ef0308295c8d" translate="yes" xml:space="preserve">
          <source>Model-View-Controller</source>
          <target state="translated">Model-View-Controller</target>
        </trans-unit>
        <trans-unit id="4d0814805419c9f47f02998803c65a41d83dd0cf" translate="yes" xml:space="preserve">
          <source>Model-View-Presenter</source>
          <target state="translated">Model-View-Presenter</target>
        </trans-unit>
        <trans-unit id="f9731cd9f1b7c0cad88b11ca9a0dfbb97b762976" translate="yes" xml:space="preserve">
          <source>My experience tells me that moving  a team from web forms to MVP and then from MVP to MVC is relatively easy; moving from web forms to MVC is more difficult.</source>
          <target state="translated">我的经验告诉我,把一个团队从web表单转到MVP,再从MVP转到MVC,相对来说比较容易;从web表单转到MVC,难度比较大。</target>
        </trans-unit>
        <trans-unit id="9a7dad07badf4ed27fd0ee61735b1ffe44f86426" translate="yes" xml:space="preserve">
          <source>My humble short view: MVP is for large scales, and MVC for tiny scales. With MVC, I sometime feel the V and the C may be seen a two sides of a single indivisible component rather directly bound to M, and one inevitably falls to this when going down‑to shorter scales, like UI controls and base widgets. At this level of granularity, MVP makes little sense. When one on the contrary go to larger scales, proper interface becomes more important, the same with unambiguous assignment of responsibilities, and here comes MVP.</source>
          <target state="translated">鄙人的短见。MVP是针对大尺度的,MVC是针对小尺度的。对于MVC,我有时会觉得V和C可能会被看作是一个不可分割的组件的两面,而不是直接和M绑定在一起,而当往下走到更小的尺度,比如UI控件和基础小部件,就不可避免地会落到这个层面。在这个级别的粒度上,MVP没有什么意义。相反,当一个人去到更大的规模时,适当的接口就会变得更加重要,同样的,不明确的责任分配也是如此,这时MVP就来了。</target>
        </trans-unit>
        <trans-unit id="7d6398b6228fc97ad6cbcd6c4e420ab540fdc39c" translate="yes" xml:space="preserve">
          <source>On the other hand, this scale rule of a thumb, may weight very little when the platform characteristics favours some kind of relations between the components, like with the web, where it seems to be easier to implement MVC, more than MVP.</source>
          <target state="translated">另一方面,这种规模化的经验法则,当平台特性偏向于组件之间的某种关系时,可能权重会非常小,就像web一样,在这里似乎更容易实现MVC,比MVP更容易。</target>
        </trans-unit>
        <trans-unit id="8f3b62032d27bb14f7876f375a718a8b1bd1b65d" translate="yes" xml:space="preserve">
          <source>One other big difference about MVC is that the View does not directly bind to the Model. The view simply renders, and is completely stateless. In implementations of MVC the View usually will not have any logic in the code behind. This is contrary to MVP where it is absolutely necessary because, if the View does not delegate to the Presenter, it will never get called.</source>
          <target state="translated">关于MVC还有一个很大的区别,就是View并不直接绑定到Model。视图只是简单地进行渲染,并且是完全无状态的。在MVC的实现中,View通常在后面的代码中不会有任何逻辑。这与MVP相反,MVP是绝对必要的,因为如果View不委托给Presenter,它永远不会被调用。</target>
        </trans-unit>
        <trans-unit id="9d85e7cc0708b67b551018cc07382f91d292f50e" translate="yes" xml:space="preserve">
          <source>One other pattern to look at is the &lt;strong&gt;Presentation Model&lt;/strong&gt; pattern. In this pattern there is no Presenter. Instead the View binds directly to a Presentation Model. The Presentation Model is a Model crafted specifically for the View. This means this Model can expose properties that one would never put on a domain model as it would be a violation of separation-of-concerns. In this case, the Presentation Model binds to the domain model, and may subscribe to events coming from that Model. The View then subscribes to events coming from the Presentation Model and updates itself accordingly. The Presentation Model can expose commands which the view uses for invoking actions. The advantage of this approach is that you can essentially remove the code-behind altogether as the PM completely encapsulates all of the behaviour for the view. This pattern is a very strong candidate for use in WPF applications and is also called &lt;a href=&quot;http://msdn.microsoft.com/en-us/magazine/dd419663.aspx&quot;&gt;Model-View-ViewModel&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;另一个要看的模式是&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演示模型&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;图案。在这种模式下，没有演示者。相反，视图直接绑定到演示模型。 Presentation Model是专门为View设计的模型。这意味着该模型可以公开一个永远不会放在域模型上的属性，因为这将违反关注点分离。在这种情况下，表示模型绑定到域模型，并且可以订阅来自该模型的事件。然后，View订阅来自Presentation Model的事件并相应地更新自身。 Presentation Model可以公开视图用于调用动作的命令。这种方法的优点是，由于PM完全封装了视图的所有行为，因此您基本上可以完全删除后面的代码。此模式非常适合在WPF应用程序中使用，也称为&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/magazine/dd419663.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模型-视图-视图模型&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed38d909f58dd9ee16876dc1d8c2b62c011b11f7" translate="yes" xml:space="preserve">
          <source>Presentation Model</source>
          <target state="translated">展示模式</target>
        </trans-unit>
        <trans-unit id="ea4498215d645ab272e3b3846196223e2f0768f4" translate="yes" xml:space="preserve">
          <source>Pro: by leveraging databinding the amount of code is reduced.</source>
          <target state="translated">Pro:通过利用数据库绑定,减少了代码量。</target>
        </trans-unit>
        <trans-unit id="2f71b21ad625425383fdafcef7b1c6b4b973b516" translate="yes" xml:space="preserve">
          <source>Pro: maximum testability surface; clean separation of the View and Model</source>
          <target state="translated">优点:最大限度的可测试面;视图和模型的干净分离。</target>
        </trans-unit>
        <trans-unit id="c61fe2f6ea22910c80db69971f026c3b36b9e979" translate="yes" xml:space="preserve">
          <source>So, if for example, the model is a car, then the presenter is some sort of a car presenter, exposes the car properties (year, maker, seats, etc.) to the view. The view knows that the text field called 'car maker' needs to display the presenter Maker property.</source>
          <target state="translated">所以,比如说,如果模型是一辆汽车,那么presenter是某种汽车的presenter,将汽车的属性(年份、制造商、座位等)暴露给视图。视图知道,名为 &quot;汽车制造商 &quot;的文本字段需要显示presenter Maker属性。</target>
        </trans-unit>
        <trans-unit id="3653a3200fb622278cb1e5b02db6ae3aff3eaf82" translate="yes" xml:space="preserve">
          <source>Some people keep forgetting, that MVC &lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller#History&quot;&gt;was created in the late 70&quot;&lt;/a&gt;, and that the Web was only created in late 80&quot;/early 90&quot;.
MVC wasn't originally created for the Web, but for Desktop applications instead, where the Controller, Model and View would co-exist together.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有些人忘了，MVC &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller#History&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是在70年代后期创建的&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，而Web只在80英寸/ 90年代初创建的。MVC最初不是为Web创建的，而是为桌面应用程序创建的，而Controller是，模型和视图将并存。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b036d150ca2081e3f49a7a021ebf2382e3cd9bbe" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Presenter&lt;/strong&gt; is the &amp;ldquo;middle-man&amp;rdquo; (played by the controller in MVC) and has references to both, view and model. &lt;strong&gt;Please note that the word &amp;ldquo;Model&amp;rdquo;&lt;/strong&gt; is misleading. It should rather be &lt;strong&gt;business logic that retrieves or manipulates a Model&lt;/strong&gt;. For instance: If you have a database storing User in a database table and your View wants to display a list of users, then the Presenter would have a reference to your database business logic (like a DAO) from where the Presenter will query a list of Users.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演示&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是&amp;ldquo;中间人&amp;rdquo;（由控制器在MVC饰演），并具有两个，视图和模型引用。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请注意，&amp;ldquo;模型&amp;rdquo;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一词具有误导性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;相反，应该是&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;检索或操作Model的业务逻辑&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如：如果您有一个在数据库表中存储User的数据库，并且View要显示用户列表，那么Presenter将引用您的数据库业务逻辑（例如DAO），Presenter将在该数据库中查询列表的用户。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7ce9069d0933040f65e27892dbc1478ccd50468c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;model&lt;/strong&gt; is the data that will be displayed in the view (user interface).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模型&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是将在视图（用户界面）显示的数据。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9538b9f662cea4b1498ce78dfd7271b9bce9d9d9" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;view&lt;/strong&gt; is an interface that displays data (the model) and routes user commands (events) to the Presenter to act upon that data. The view usually has a reference to its Presenter.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视图&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是一个界面，用于显示数据（模型）并将用户命令（事件）路由到Presenter以对该数据进行操作。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该视图通常引用其Presenter。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f8cadfc7a7df940200c9941e44f92d7dc05189bb" translate="yes" xml:space="preserve">
          <source>The controller is created or accessed based on some event/request. The controller then creates the appropriate view and interacts with the model to further configure the view. It boils down to: the controller creates and manages the view; the view is slave to the controller. The view does not know about the controller.</source>
          <target state="translated">控制器是根据一些 eventrequest 创建或访问控制器。然后,控制器创建相应的视图,并与模型交互以进一步配置视图。这归结为:控制器创建并管理视图;视图是控制器的从属。视图不知道控制器。</target>
        </trans-unit>
        <trans-unit id="8bcabe0f3f82d13b623b2c7d77f164d767970a86" translate="yes" xml:space="preserve">
          <source>The distinction made is that in an MVC application traditionally has the view and the controller interact with the model, but not with each other.</source>
          <target state="translated">区别在于,在传统的MVC应用中,视图和控制器与模型交互,而不是相互之间。</target>
        </trans-unit>
        <trans-unit id="45d8959b50e1ab78500a4af2828aefe5ad3a0d55" translate="yes" xml:space="preserve">
          <source>The input begins with the View, not the Presenter.
There is a one-to-one mapping between the View and the associated Presenter.
The View holds a reference to the Presenter. The Presenter is also reacting to events being triggered from the View, so its aware of the View its associated with.
The Presenter updates the View based on the requested actions it performs on the Model, but the View is not Model aware.</source>
          <target state="translated">输入从视图开始,而不是从Presenter开始。视图和相关的Presenter之间有一个一对一的映射。视图持有对Presenter的引用。Presenter也在对View触发的事件做出反应,所以它意识到与之相关联的View。Presenter根据它在模型上执行的请求操作更新视图,但视图不知道模型。</target>
        </trans-unit>
        <trans-unit id="301ad9ee0376a5983043321774e9445004e67361" translate="yes" xml:space="preserve">
          <source>The input is directed at the Controller first, not the view. That input might be coming from a user interacting with a page, but it could also be from simply entering a specific url into a browser. In either case, its a Controller that is interfaced with to kick off some functionality.
There is a many-to-one relationship between the Controller and the View. That&amp;rsquo;s because a single controller may select different views to be rendered based on the operation being executed.
Note the one way arrow from Controller to View. This is because the View doesn&amp;rsquo;t have any knowledge of or reference to the controller.
The Controller does pass back the Model, so there is knowledge between the View and the expected Model being passed into it, but not the Controller serving it up.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;输入首先指向控制器，而不是视图。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该输入可能来自与页面交互的用户，但也可能来自简单地在浏览器中输入特定的URL。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在任何一种情况下，它都是与Controller相连以启动某些功能的控制器。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制器和视图之间存在多对一的关系。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是因为单个控制器可以根据正在执行的操作选择要渲染的不同视图。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请注意从控制器到视图的单向箭头。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是因为视图不了解控制器或对该控制器没有任何参考。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controller确实会传回模型，因此在视图和传递给它的预期模型之间有知识，但Controller没有提供知识。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b13f6ab6d7ad93ea600a87ab843ab5508280a401" translate="yes" xml:space="preserve">
          <source>The second flavor of MVP is the Supervising Controller. In that case your View might have a property called Customer, which then again is databound to the UI widgets. You don't have to think about synchronizing and micro-manage the view, and the Supervising Controller can step in and help when needed, for instance with compled interaction logic.</source>
          <target state="translated">MVP的第二种风味是监督控制器。在这种情况下,你的View可能会有一个名为Customer的属性,而这个属性又被数据绑定到UI小部件上。你不需要考虑同步和微观管理视图,监督控制器可以在需要的时候介入并提供帮助,比如说,使用复杂的交互逻辑。</target>
        </trans-unit>
        <trans-unit id="5a64b0bdd2b3ea781381907e13e2c0da16747d45" translate="yes" xml:space="preserve">
          <source>The simplest answer is how the view interacts with the model. In MVP the view is updated by the presenter, which acts as as intermediary between the view and the model. The presenter takes the input from the view, which retrieves the data from the model and then performs any business logic required and then updates the view. In MVC the model updates the view directly rather than going back through the controller.</source>
          <target state="translated">最简单的答案是视图如何与模型交互。在MVP中,视图由presenter更新,presenter作为视图和模型之间的中介。预设者从视图中获取输入,视图从模型中获取数据,然后执行任何需要的业务逻辑,然后更新视图。在MVC中,模型直接更新视图,而不是通过控制器返回视图。</target>
        </trans-unit>
        <trans-unit id="6a970a3299eb9cfc3156b88ba470bccec8c0ca28" translate="yes" xml:space="preserve">
          <source>The third &quot;flavor&quot; of MVP (or someone would perhaps call it a separate pattern) is the Presentation Model (or sometimes referred to Model-View-ViewModel). Compared to the MVP you &quot;merge&quot; the M and the P into one class. You have your customer object which your UI widgets is data bound to, but you also have additional UI-spesific fields like &quot;IsButtonEnabled&quot;, or &quot;IsReadOnly&quot;, etc.</source>
          <target state="translated">MVP的第三种 &quot;味道&quot;(或许有人会称它为单独的模式)是演示模型(或有时被称为Model-View-ViewModel)。与MVP相比,你将M和P &quot;合并 &quot;成一个类。你有你的客户对象,你的UI widgets是数据绑定到的,但你也有额外的UI-spesific字段,如 &quot;IsButtonEnabled&quot;,或 &quot;IsReadOnly &quot;等。</target>
        </trans-unit>
        <trans-unit id="f669265be325235de5f4cc1ec139e56287acf4e4" translate="yes" xml:space="preserve">
          <source>The view is the initiator for user inputs and then delegates the events to the Presenter and the presenter handles event bindings and gets data from models.</source>
          <target state="translated">视图是用户输入的发起者,然后将事件委托给陈述者,陈述者处理事件绑定并从模型中获取数据。</target>
        </trans-unit>
        <trans-unit id="d39997851ece3fcb75c76f9050d8a0121c1ecce4" translate="yes" xml:space="preserve">
          <source>The view, in most cases, creates its presenter. The presenter will interact with the model and manipulate the view through an interface. The view will sometimes interact with the presenter, usually through some interface.  This comes down to implementation; do you want the view to call methods on the presenter or do you want the view to have events the presenter listens to? It boils down to this: The view knows about the presenter. The view delegates to the presenter.</source>
          <target state="translated">视图,在大多数情况下,视图会创建它的presenter。预设者将与模型进行交互,并通过一个接口来操作视图。视图有时会与presenter进行交互,通常是通过一些接口进行交互。这归结为实现;你想让视图调用presenter上的方法,还是想让视图有事件被presenter监听?归结起来就是这样。视图知道关于presenter的事情。视图委托给presenter。</target>
        </trans-unit>
        <trans-unit id="27757769008ceb477f7e05a0cce8b21ba034600f" translate="yes" xml:space="preserve">
          <source>There are many answers to the question, but I felt there is a need for some really simple answer clearly comparing the two. Here's the discussion I made up when a user searches for a movie name in an MVP and MVC app:</source>
          <target state="translated">这个问题的答案有很多,但我觉得需要一些真正简单的答案来清楚地对比一下这两者。下面是我在用户在MVP和MVC应用中搜索电影名称时,我做的讨论。</target>
        </trans-unit>
        <trans-unit id="a92db89ca0249089c13b11f20ed6580da41fbc47" translate="yes" xml:space="preserve">
          <source>There are many versions of MVC, this answer is about the original MVC in Smalltalk. In brief, it is</source>
          <target state="translated">MVC有很多版本,这个答案是关于Smalltalk中的MVC原版。简单来说,就是</target>
        </trans-unit>
        <trans-unit id="82ed275cafa23c2ea8e8869eeae8eea58c31d287" translate="yes" xml:space="preserve">
          <source>There is &lt;a href=&quot;https://www.youtube.com/watch?v=WpkDN78P884&amp;amp;feature=youtu.be&amp;amp;t=29m1s&quot;&gt;this&lt;/a&gt; nice video from Uncle Bob where he briefly explains &lt;strong&gt;MVC&lt;/strong&gt; &amp;amp; &lt;strong&gt;MVP&lt;/strong&gt; at the end.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=WpkDN78P884&amp;amp;feature=youtu.be&amp;amp;t=29m1s&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这种&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从Bob大叔不错的视频，他简要介绍了&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;底。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2387b03e9c36c2f329fc383807a6d7fc068372d9" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff921080.aspx&quot;&gt;MSDN article about the Presentation Model&lt;/a&gt; and a section in the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707819.aspx&quot;&gt;Composite Application Guidance for WPF&lt;/a&gt; (former Prism) about &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707862.aspx&quot;&gt;Separated Presentation Patterns&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff921080.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MSDN上&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关于表示模型的文章，在&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707819.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;WPF&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（前棱镜）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;复合应用指南中有&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关于&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707862.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;单独的表示模式的部分&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7ee276ebb5fe1caeea00a1b1761430f0ba014210" translate="yes" xml:space="preserve">
          <source>There is a discussion &lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/10/31/development-trivial-pursuit-the-difference-between-mvc-and-the-different-flavors-of-mvp.aspx&quot;&gt;here&lt;/a&gt; regarding the differences between MVC vs MVP.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有一个讨论，&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/10/31/development-trivial-pursuit-the-difference-between-mvc-and-the-different-flavors-of-mvp.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这里&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;就VS MVP MVC之间的差异。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7699ceb8018ddb15756349dc26c7ea4e42bd17a7" translate="yes" xml:space="preserve">
          <source>There is also &lt;a href=&quot;http://gexiaoguo.github.io/MVC,-MVP-and-MVVM/&quot;&gt;a complete comparison of MVC, MVP and MVVM here&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这里也&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://gexiaoguo.github.io/MVC,-MVP-and-MVVM/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有MVC，MVP和MVVM的完整比较&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="732e33e57cc89c110727e2ee01bc05e383b35a3b" translate="yes" xml:space="preserve">
          <source>They are fairly similar in concept, folks initialize the Presenter/Controller differently depending on taste.</source>
          <target state="translated">它们在概念上相当相似,人们初始化PresenterController的方式根据口味不同而不同。</target>
        </trans-unit>
        <trans-unit id="9e06241d8aa910ec172be9a0d74cc298f0b8f2e2" translate="yes" xml:space="preserve">
          <source>They each addresses different problems and can even be combined together to have something like below</source>
          <target state="translated">它们各自解决了不同的问题,甚至可以组合在一起,有下面这样的东西。</target>
        </trans-unit>
        <trans-unit id="47cadcbcc9b8934f4ae08c3f71c0a82e97d39b6a" translate="yes" xml:space="preserve">
          <source>This binding framework, if you strip it down, it's actually the controller :-)</source>
          <target state="translated">这个绑定框架,如果你把它剥掉,其实就是控制器:-)</target>
        </trans-unit>
        <trans-unit id="38e65116cea7797e3e3b184268328e27c9889ae8" translate="yes" xml:space="preserve">
          <source>This is an oversimplification of the many variants of these design patterns, but this is how I like to think about the differences between the two.</source>
          <target state="translated">这是对这些设计模式的众多变体的过度简化,但我喜欢这样思考两者之间的区别。</target>
        </trans-unit>
        <trans-unit id="f38b8d429e873aab62370e55b7446e42b7d50843" translate="yes" xml:space="preserve">
          <source>This talk &lt;a href=&quot;https://www.youtube.com/watch?v=i1-7S-RxfvQ&quot;&gt;droidcon NYC 2017 - Clean app design with Architecture Components&lt;/a&gt; clarifies it</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这篇演讲&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=i1-7S-RxfvQ&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;droidcon NYC 2017-使用Architecture Components进行的干净应用程序设计&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;澄清了它&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="545847bd273b1f49941092ff8d1fdbab224676c5" translate="yes" xml:space="preserve">
          <source>To be perfectly frank, I think the underlying concerns of MVC hold true for any MVP implementation and the differences are almost entirely semantic. As long as you are following separation of concerns between the view (that displays the data), the controller (that initialises and controls user interaction) and the model (the underlying data and/or services)) then you are achieving the benefits of MVC. If you are achieving the benefits then who really cares whether your pattern is MVC, MVP or Supervising Controller? The only &lt;em&gt;real&lt;/em&gt; pattern remains as MVC, the rest are just differing flavours of it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;坦率地说，我认为MVC的根本问题对于任何MVP实现都是正确的，并且差异几乎完全是语义上的。只要您遵循视图（显示数据），控制器（初始化和控制用户交互）和模型（基础数据和/或服务）之间的关注点分离，那么您就可以实现MVC的好处。如果您正在获得收益，那么谁真正在乎您的模式是MVC，MVP还是监督控制器？唯一的&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;真实&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模式仍然是MVC，其余的只是它的不同风格。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="482730aa6dd38ce89c84c44cdb10a85967c85887" translate="yes" xml:space="preserve">
          <source>To make this a little more clear, let's imagine a simple shopping list app. All we want is a list of the name, quantity and price of each item we need to buy this week. Below we'll describe how we could implement some of this functionality using MVC.</source>
          <target state="translated">为了让大家更清楚一点,让我们想象一个简单的购物清单APP。我们想要的是一个列表,里面有我们本周需要购买的每个商品的名称、数量和价格。下面我们将描述一下我们如何使用MVC来实现其中的一些功能。</target>
        </trans-unit>
        <trans-unit id="36881632660b34cfeb60c442c72bb50a89a4b94b" translate="yes" xml:space="preserve">
          <source>To perhaps get an idea of the ASP.NET MVC distinction from MVP, check out &lt;a href=&quot;http://www.hanselman.com/blog/ASPNETMVCSessionAtMix08TDDAndMvcMockHelpers.aspx&quot;&gt;this MIX presentation&lt;/a&gt; by Scott Hanselman.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要想了解ASP.NET MVC与MVP的区别，请查看&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Scott Hanselman的&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.hanselman.com/blog/ASPNETMVCSessionAtMix08TDDAndMvcMockHelpers.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MIX演示&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f0d5780f10eb00de3194e1ce64c16ffa7b1a215a" translate="yes" xml:space="preserve">
          <source>Two primary variations</source>
          <target state="translated">两种主要变化</target>
        </trans-unit>
        <trans-unit id="d8e5a17a94be3110a5c8a6cb2926e409bcfdd2cb" translate="yes" xml:space="preserve">
          <source>User: Click click &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;用户：单击单击&amp;hellip;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e2022cac9d87c721fd2ffcf2c90cf08cfbdf0777" translate="yes" xml:space="preserve">
          <source>User: I just clicked on the search button &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;用户：我只是点击了搜索按钮...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="caf99ef190bd9af7d81997674d54ae10c2d41178" translate="yes" xml:space="preserve">
          <source>Usually view to presenter map one to one. Complex views may have multi presenters.</source>
          <target state="translated">一般视图到演示者图一对一。复杂的视图可能有多个演示者。</target>
        </trans-unit>
        <trans-unit id="95de390211342cdae2c03da39ba48cd824c0d405" translate="yes" xml:space="preserve">
          <source>View event binding will be implemented in the Presenter from a view interface.</source>
          <target state="translated">视图事件绑定将在Presenter中从视图接口实现。</target>
        </trans-unit>
        <trans-unit id="bfb597da495d126f84a30cf8e12a2f5a5589ec42" translate="yes" xml:space="preserve">
          <source>View is more loosely coupled to the model. The presenter is responsible for binding the model to the view.</source>
          <target state="translated">视图与模型的绑定比较松散。主持人负责将模型与视图进行绑定。</target>
        </trans-unit>
        <trans-unit id="0c4a2a610d14eb9943f32d71e4084d55a3fc4f4c" translate="yes" xml:space="preserve">
          <source>What are MVP and MVC and what is the difference</source>
          <target state="translated">什么是MVP和MVC,有什么区别?</target>
        </trans-unit>
        <trans-unit id="b87b976f1b7223ebb2c16be5928ce8f2d8c3707b" translate="yes" xml:space="preserve">
          <source>What is the &lt;strong&gt;difference&lt;/strong&gt; between &lt;strong&gt;MVC&lt;/strong&gt; and &lt;strong&gt;MVP&lt;/strong&gt; patterns?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模式&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;之间有&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;什么&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;区别&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;？&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="986d2dd63e33a810f964fed17c9a33c11b99c6f1" translate="yes" xml:space="preserve">
          <source>What issues do these patterns address?</source>
          <target state="translated">这些模式能解决哪些问题?</target>
        </trans-unit>
        <trans-unit id="4015b37baf62151fb930c9a9d0fd14a4a901d977" translate="yes" xml:space="preserve">
          <source>When looking beyond the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rapid_application_development&quot;&gt;RAD&lt;/a&gt; (drag-drop and configure) way of building user interfaces that many tools encourage you are likely to come across three design patterns called &lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;Model-View-Controller&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter&quot;&gt;Model-View-Presenter&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Model_View_ViewModel&quot;&gt;Model-View-ViewModel&lt;/a&gt;. My question has three parts to it:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当超越&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Rapid_application_development&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;RAD&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（拖放和配置）构建用户界面的方式时，许多工具鼓励您使用三种设计模式，分别称为&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model-View-Controller&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model-View-Presenter&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Model_View_ViewModel&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model-View-ViewModel&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。我的问题包括三个部分：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eaf99e74a9572f632c4513afb3ddf3f4b76892ce" translate="yes" xml:space="preserve">
          <source>When using Passive View, your View typically implement a fine-grained interface with properties mapping more or less directly to the underlaying UI widget. For instance, you might have a ICustomerView with properties like Name and Address.</source>
          <target state="translated">当使用被动视图时,你的视图通常会实现一个精细的接口,其属性或多或少直接映射到下层UI小部件。例如,你可能有一个ICustomerView,它的属性是Name和Address。</target>
        </trans-unit>
        <trans-unit id="1b6eedfb17289a07676cf342f01265dd1b006b7d" translate="yes" xml:space="preserve">
          <source>You can then bind to the view many different types of presenter, all must have Maker property - it can be of a plane, train or what ever , the view doesn't care. The view draws data from the presenter - no matter which - as long as it implements an agreed interface.</source>
          <target state="translated">然后,你可以将许多不同类型的presenter绑定到视图中,所有的presenter必须具有Maker属性--可以是飞机、火车或其他什么的,视图并不关心。视图从预设器中提取数据,不管是哪种类型的,只要它实现了一个约定的接口,就可以从预设器中提取数据。</target>
        </trans-unit>
        <trans-unit id="fe22486aea6886979af6e1aace2f38d65cce7f51" translate="yes" xml:space="preserve">
          <source>You forgot about &lt;strong&gt;Action-Domain-Responder&lt;/strong&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;ADR&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您忘记了&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Action-Domain-Responder&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ADR&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11e7697e759021e33983122c07fc8fc869e0b0da" translate="yes" xml:space="preserve">
          <source>Your Presenter class will talk to the model and &quot;map&quot; it to the view. This approach is called the &quot;Passive View&quot;. The benefit is that the view is easy to test, and it is easier to move between UI platforms (Web, Windows/XAML, etc.). The disadvantage is that you can't leverage things like databinding (which is &lt;em&gt;really&lt;/em&gt; powerful in frameworks like &lt;a href=&quot;http://en.wikipedia.org/wiki/Windows_Presentation_Foundation&quot;&gt;WPF&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Silverlight&quot;&gt;Silverlight&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Presenter类将与模型对话，并将其&amp;ldquo;映射&amp;rdquo;到视图。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这种方法称为&amp;ldquo;被动视图&amp;rdquo;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;好处是视图易于测试，并且更易于在UI平台（Web，Windows / XAML等）之间移动。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;缺点是您不能利用数据绑定之类的东西（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Windows_Presentation_Foundation&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;WPF&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Silverlight&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Silverlight之&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类的框架中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;确实很&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;强大&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34235fb0fc29596b8a27e0699f118207159cd0e5" translate="yes" xml:space="preserve">
          <source>Your implementation might look something like this:</source>
          <target state="translated">你的实现可能看起来像这样。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
