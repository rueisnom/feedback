<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/2056">
    <body>
      <group id="2056">
        <trans-unit id="ca519aa8f232477ca6fb4d7b413bfb8ff28e4d3f" translate="yes" xml:space="preserve">
          <source>( &lt;em&gt;Model&lt;/em&gt; is making a query to the movie database &amp;hellip; ) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデル&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は映画データベースにクエリを作成しています&amp;hellip;）[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b196c782085e0f289a857424f8d3cd8dbdb5b897" translate="yes" xml:space="preserve">
          <source>( &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt; is calling the &lt;em&gt;Model&lt;/em&gt; &amp;hellip; ) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンター&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントローラー&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデルを&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出してい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&amp;hellip;）[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11738dac3b131594904e3da34a1f722da38d33c0" translate="yes" xml:space="preserve">
          <source>( &lt;em&gt;View&lt;/em&gt; calling the &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt; &amp;hellip; ) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンターの&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出しを&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントローラー&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;hellip;）[ &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="617662bb70662b4ee51904f6a182010f0a37b584" translate="yes" xml:space="preserve">
          <source>( After a while ... )</source>
          <target state="translated">(しばらくして・・・)</target>
        </trans-unit>
        <trans-unit id="9d4ae30232c39e1b37db57f07c414ae602ebff4d" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt; thanks &lt;em&gt;Model&lt;/em&gt; and gets back to the &lt;em&gt;View&lt;/em&gt;) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンター&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントローラの&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;おかげで&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデル&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とに戻って取得する&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビュー&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3eebbce0b57244ba6f4264a8083b8a2123c286b7" translate="yes" xml:space="preserve">
          <source>(The &lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;article&lt;/a&gt; also matches what Uncle Bob Martin said in his one of his talks: that MVC was originally designed for the small UI components, not for the architecture of the system)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（この&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;記事&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、ボブマーティンおじさんが彼の講演の1つで言った内容にも一致します。MVCは元々、システムのアーキテクチャー用ではなく、小さなUIコンポーネント用に設計されたものです）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d69c0eadbc92a3002b2d562fc52edc9adb877fe" translate="yes" xml:space="preserve">
          <source>-------------- This is where MVP and MVC start to diverge ---------------</source>
          <target state="translated">--------------MVPとMVCが乖離し始めるのはここからです。</target>
        </trans-unit>
        <trans-unit id="f856f715b52ee9433e2a04ef7470396b0b845d81" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;/questions/tagged/mvc&quot;&gt;mvc&lt;/a&gt;&lt;a href=&quot;/questions/tagged/adr&quot;&gt;adr&lt;/a&gt;&lt;a href=&quot;/questions/tagged/model-view-controller&quot;&gt;model-view-controller&lt;/a&gt;&lt;a href=&quot;/questions/tagged/action-domain-responder&quot;&gt;action-domain-responder&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;/questions/tagged/mvc&quot;&gt;mvc&lt;/a&gt;&lt;a href=&quot;/questions/tagged/adr&quot;&gt;adr&lt;/a&gt;&lt;a href=&quot;/questions/tagged/model-view-controller&quot;&gt;model-view-controller&lt;/a&gt;&lt;a href=&quot;/questions/tagged/action-domain-responder&quot;&gt;action-domain-responder&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e0805a8ce705f2ac6ed5d15de6da21d7712a490e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Controller&lt;/em&gt;: Thanks for waiting &lt;em&gt;View&lt;/em&gt;, I have asked &lt;em&gt;Model&lt;/em&gt; about your search query. It says it has found a list of matching results and stored them in a variable named &quot;searchResultsList&quot; inside its instance. You can get it from there. Also please hide the progress bar now [&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controller&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;View&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を待ってくれてありがとう&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、私は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Modelに&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;検索クエリについて&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;尋ねました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一致する結果のリストが見つかり、インスタンス内の「searchResultsList」という名前の変数に保存されたと述べています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そこから入手できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、進行状況バーを非表示にしてください[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b3983f1cbfa0649c26418f734f0aa0db26b0cf43" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Model&lt;/em&gt;: Hey &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;, let me check &amp;hellip; [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデル&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：Hey &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Presenter&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントローラー&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、確認させて&amp;hellip;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="02d626ea6ebf4c56bf4694025a75488aeb3fb7b6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Model&lt;/em&gt;: I found a list for you, &lt;em&gt;Presenter&lt;/em&gt;, here it is in JSON &amp;ldquo;[{&quot;name&quot;:&quot;Piano Teacher&quot;,&quot;year&quot;:2001},{&quot;name&quot;:&quot;Piano&quot;,&quot;year&quot;:1993}]&amp;rdquo; [&lt;strong&gt;MVP&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデル&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：私はあなたのためのリストを見つけました。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンター&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、ここではJSON &quot;[{&quot; name &quot;：&quot; Piano Teacher &quot;、&quot; year &quot;：2001}、{&quot; name &quot;：&quot; Piano &quot;、&quot; year &quot;：1993}です。 ]」[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0d97a0f826ee560a8f304f5306f99eaeaa2a6e7b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Model&lt;/em&gt;: There is some result available, &lt;em&gt;Controller&lt;/em&gt;. I have created a field variable in my instance and filled it with the result. It's name is &quot;searchResultsList&quot; [&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデル&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：利用可能な結果がいくつかあります、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントローラー&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インスタンスにフィールド変数を作成し、結果を入力しました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;名前は &quot;searchResultsList&quot; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d1026820b8637534d3e5c387c58a14d35c2462bd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;: Thanks &lt;em&gt;View&lt;/em&gt;,&amp;hellip; meanwhile I&amp;rsquo;m looking up the search term on the &lt;em&gt;Model&lt;/em&gt;, please show him/her a progress bar [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンター&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：おかげで&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビュー&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&amp;hellip;その間、私は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデル&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;検索語を調べていますが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、プログレスバーを見せてください[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="082d8aab0e7355bce1f34dab98698fc6bde07fa5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;: Thanks for waiting &lt;em&gt;View&lt;/em&gt;, I found a list of matching results for you and arranged them in a presentable format: [&quot;Piano Teacher 2001&quot;,&quot;Piano 1993&quot;]. Please show it to the user in a vertical list. Also please hide the progress bar now [&lt;strong&gt;MVP&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンター&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;View&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を待っていただきありがとうござい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。一致する結果のリストを見つけて、表示可能な形式で並べました：[&quot;Piano Teacher 2001&quot;、 &quot;Piano 1993&quot;]。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;縦のリストでユーザーに示してください。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、進行状況バーを非表示にしてください[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6f82c8e2cb67e54724775d8eb3d6c9f1896844a8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;: Hey &lt;em&gt;Model&lt;/em&gt;, Do you have any match for this search term?: &amp;ldquo;piano&amp;rdquo; [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンター&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントローラー&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：ねえ&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデル&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、この検索キーワードに一致するものはありますか？：「ピアノ」[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="28df57da3132198350a38fc4a4fbecf2b3251bfa" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;: Hey &lt;em&gt;View&lt;/em&gt;, is there any search term on that page? [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンター&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントローラー&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：ね&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Viewビュー&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、そのページに検索用語はありますか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a100e4ba21f44ff5d7a8afa346a7c0b100dbb45" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Hey &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;, a User has just clicked on the search button, what shall I do? [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：ちょっと&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンター&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントローラー&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、ユーザーが検索ボタンをクリックしただけですが、どうすればよいですか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f60206b05d7120cef3963992fd371e891b6b71e5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Ok, hold on a sec &amp;hellip; . [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：わかりました、しばらくお待ちください... &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82646e9011ff1bbbb2fc937dd69582393ccd56b3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Thank you &quot;Controller&quot; [&lt;strong&gt;MVC&lt;/strong&gt;]
(Now the &lt;em&gt;View&lt;/em&gt; is questioning itself: How should I present the results I get from the &lt;em&gt;Model&lt;/em&gt; to the user? Should the production year of the movie come first or last...? Should it be in a vertical or horizontal list? ...)</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：ありがとう「コントローラ」[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]（&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビュー&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は問題を投げかけています：&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデル&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;得た結果を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ユーザーに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どのように提示する必要&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がありますか？映画の製作年は最初にするべきですか、それとも最後にするべきですか？縦または横のリストにありますか？...）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9bb2ab8bc9f3d5a17d0e1d54691cea402a029772" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Thank you very much &lt;em&gt;Presenter&lt;/em&gt; [&lt;strong&gt;MVP&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：ありがとうございました&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンター&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d0e8539215ad94c8625100b6f44cd2b22541d2d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Who&amp;rsquo;s that? [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：それは誰ですか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4138a03bcc30a87317df02669cb3494beed2d551" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Yes,&amp;hellip; here it is &amp;hellip; &amp;ldquo;piano&amp;rdquo; [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：はい、&amp;hellip;ここに&amp;hellip;「ピアノ」[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e10b3aa3f3ca649918786d0ac1c826d2957375b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cons:&lt;/strong&gt;
    Bit complex and more work when implementing event bindings</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;短所：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; イベントバインディングを実装するときに少し複雑で作業が増える&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a172147501124e022228068f6941ed911ff4b0b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cons:&lt;/strong&gt;
  Sometimes too much workload for Controllers, if try to render multiple views in same controller.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;短所：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 同じコントローラーで複数のビューをレンダリングしようとすると、コントローラーのワークロードが多すぎる場合があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="156a0cb080027a6ff6d0542b61a78c2d3d218d41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Controllers&lt;/strong&gt; for handling the user interface and application</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ユーザーインターフェイスとアプリケーションを処理するための&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントローラー&lt;/font&gt;&lt;/strong&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5e7f66068af168e4fc082d8dc01cb848b92a46b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC (Model View Controller)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC（Model View Controller）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="608a28a38a1824ff63d31dcd52439b72ddf63906" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC Pattern&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVCパターン&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d8bc00d019fd0a2f99238073aef9a2d4311db18e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;MVC&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f784873573ecd0397295d7afa60e2c45bfc5eb7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC&lt;/strong&gt; is a pattern for the architecture of a software application. It separate the application logic into three separate parts, promoting modularity and ease of collaboration and reuse. It also makes applications more flexible and welcoming to iterations.It separates an application into the following components:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、ソフトウェアアプリケーションのアーキテクチャのパターンです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アプリケーションロジックを3つの別々の部分に分離し、モジュール性を促進し、コラボレーションと再利用の容易さを促進します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、アプリケーションをより柔軟にし、反復を歓迎します。アプリケーションを次のコンポーネントに分割します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0a3d14652eb4344ee36a149498b3d4cb34487a0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVP (Model View Presenter)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP（モデルビュープレゼンター）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e9c824c237d99d678e99ddbc760e821f4ee9deb8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVP Pattern&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVPパターン&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f94476ec169490b00a853ca7228940e69d66e2c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVP&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;MVP&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3b088ec128ecc3c454c0327d87d024496300247c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Model-View-Controller&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Model-View-Controller&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b145e8a37e9509a1eda7ea52157c5fbe04d0896" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Model-View-Presenter&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Model-View-Presenter&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="48291acc891f6b0d52b30c232b8856c19deaefa7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Models&lt;/strong&gt; for handling data and business logic</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;データとビジネスロジックを処理するための&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデル&lt;/font&gt;&lt;/strong&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2033eab462915f68e8f6d27646bea6775e2f24d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Wikipedia states that &quot;&lt;em&gt;Each ADR action, however, is represented by separate classes or closures.&lt;/em&gt;&quot;. This is &lt;strong&gt;not&lt;/strong&gt; necessarily true. Several Actions can be in the same Controller, and the pattern is still the same.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ウィキペディアでは、「&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、各ADRアクションは個別のクラスまたはクロージャーによって表されます。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」と述べています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必ずしも本当で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はあり&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;複数のアクションを同じコントローラーに含めることができ、パターンは同じです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b20bafb875f0d0613a38122493b645665486924b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passive View:&lt;/strong&gt; The View is as dumb as possible and contains almost zero logic. The Presenter is a middle man that talks to the View and the Model. The View and Model are completely shielded from one another. The Model may raise events, but the Presenter subscribes to them for updating the View. In Passive View there is no direct data binding, instead the View exposes setter properties which the Presenter uses to set the data. All state is managed in the Presenter and not the View.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パッシブビュー：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビューは可能な限り単純で、ロジックはほとんど含まれていません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンターは、ビューとモデルに話しかける仲介者です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビューとモデルは互いに完全にシールドされています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデルはイベントを発生させる可能性がありますが、プレゼンターはビューを更新するためにそれらをサブスクライブします。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パッシブビューでは、直接のデータバインディングはありません。代わりに、ビューは、プレゼンターがデータを設定するために使用するセッタープロパティを公開します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての状態はビューではなくプレゼンターで管理されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34a5a86c8422d6c1567946698cd503d40967adf7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pros:&lt;/strong&gt;
    The view is having only  UI not any logics
    High level of testability</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;長所：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ビューにはUIのみがあり、ロジックはありません。高レベルのテスト容易性&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e01f9565bf9defd5471edf6632bc1687db7b76d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pros:&lt;/strong&gt;
  Emphasis on Single Responsibility Principle
  High level of testability</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;長所：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 単一の責任の原則の強調高いテスト容易性&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="afb437faf2ed73f1dd6b1528a681eedce26744ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Supervising Controller:&lt;/strong&gt; The Presenter handles user gestures. The View binds to the Model directly through data binding. In this case it's the Presenter's job to pass off the Model to the View so that it can bind to it. The Presenter will also contain logic for gestures like pressing a button, navigation, etc.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;監督コントローラー：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンターはユーザーのジェスチャーを処理します。ビューは、データバインディングを介してモデルに直接バインドします。この場合、モデルをバインドしてビューに渡すのはプレゼンターの仕事です。プレゼンターには、ボタンを押す、ナビゲーションなどのジェスチャーのロジックも含まれます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e8e51727d49d4f883cc1a5618583a1730a3423cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Views&lt;/strong&gt; for handling graphical user interface objects and presentation</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;グラフィカルユーザーインターフェイスオブジェクトとプレゼンテーションを処理するための&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビュー&lt;/font&gt;&lt;/strong&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="add0cc6a4a79ac095cd7622623adfbac7b346164" translate="yes" xml:space="preserve">
          <source>A concrete workflow of querying and displaying a list of users from a database could work like this:</source>
          <target state="translated">データベースからユーザーのリストを照会して表示する具体的なワークフローは次のようになります。</target>
        </trans-unit>
        <trans-unit id="1ee2af540a4b66e2e49393871786d070776e55fd" translate="yes" xml:space="preserve">
          <source>A great article on the differences is &lt;a href=&quot;http://www.infragistics.com/community/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;here&lt;/a&gt;.  Most notable is that MVC pattern has the Model updating the View.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;違いに関するすばらしい記事は&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.infragistics.com/community/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;こちら&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最も注目すべきは、MVCパターンがビューを更新するモデルを持っていることです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7480795899c308541ed6768ff447271305dc003" translate="yes" xml:space="preserve">
          <source>A presenter is acting as a supervisory role in MVP which binding View events and business logic from models.</source>
          <target state="translated">プレゼンターは、モデルからViewイベントやビジネスロジックをバインディングするMVPの中で、監督的な役割を担っています。</target>
        </trans-unit>
        <trans-unit id="f1f788974cbeb29212645f28d4349b64ddc799a8" translate="yes" xml:space="preserve">
          <source>Also worth remembering is that there are different types of MVPs as well. Fowler has broken the pattern into two - Passive View and Supervising Controller.</source>
          <target state="translated">また、MVPにも種類があることも覚えておきましょう。Fowlerはそのパターンをパッシブビューとスーパーバイジングコントローラの2つに分解しています。</target>
        </trans-unit>
        <trans-unit id="18f0b68ee7609a444a8d9a6033eb2ae6e263c776" translate="yes" xml:space="preserve">
          <source>And so, you can look on MVP as an evolution of MVC.</source>
          <target state="translated">そして、MVPはMVCの進化として見ることができます。</target>
        </trans-unit>
        <trans-unit id="07cdb35e36e9c49bf40e639443ef77de2afbca7d" translate="yes" xml:space="preserve">
          <source>Architecturally, MVP is Page Controller based approach where MVC is Front Controller based approach. 
That means that in MVP standard web form page life cycle is just enhanced by extracting the business logic from code behind. In other words, page is the one servicing http request. In other words, MVP IMHO is web form evolutionary type of enhancement.
MVC on other hand changes completely the game because the request gets intercepted by controller class before page is loaded, the business logic is executed there and then at the end result of controller processing the data just dumped to the page (&quot;view&quot;)
In that sense, MVC looks (at least to me) a lot to Supervising Controller flavor of MVP enhanced with routing engine</source>
          <target state="translated">アーキテクチャ的には、MVP がページコントローラベースのアプローチであるのに対し、MVC はフロントコントローラベースのアプローチです。つまり、MVPの標準的なWebフォームでは、ページのライフサイクルは、後ろのコードからビジネスロジックを抽出することで強化されているに過ぎません。言い換えれば、ページはhttpリクエストを処理するものです。言い換えれば、MVP IMHOはWebフォームの進化型の強化です。一方、MVCはページがロードされる前にコントローラクラスによってリクエストがインターセプトされ、ビジネスロジックがそこで実行され、コントローラの最終的な処理結果でデータがページにダンプされる(「ビュー」)ので、ゲームを完全に変えてしまいます。</target>
        </trans-unit>
        <trans-unit id="7900b35c8f8f0559bbd47d5e988ed320a97b09a9" translate="yes" xml:space="preserve">
          <source>As explained in some graphics above, there's a direct relation/link between the &lt;strong&gt;Model&lt;/strong&gt; and the &lt;strong&gt;View&lt;/strong&gt; in MVC.
An action is performed on the &lt;strong&gt;Controller&lt;/strong&gt;, which will execute an action on the &lt;strong&gt;Model&lt;/strong&gt;. That action in the &lt;strong&gt;Model&lt;/strong&gt;, &lt;strong&gt;will trigger a reaction&lt;/strong&gt; in the &lt;strong&gt;View&lt;/strong&gt;.
The &lt;strong&gt;View&lt;/strong&gt;, is always updated when the &lt;strong&gt;Model&lt;/strong&gt;'s state changes.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記のいくつかのグラフィックで説明したように、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデル&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビューの&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;間に直接的な関係/リンクが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あり&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アクションは&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントローラー&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行され、&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントローラー&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデルで&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アクションを実行し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデル&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;での&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのアクションは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビューでの&lt;/font&gt;&lt;/strong&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;反応を引き起こし&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビューを&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する場合、常に更新され、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデル&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の状態が変化します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a1a531af64742c2e545bfca92ada8c68ab0f969" translate="yes" xml:space="preserve">
          <source>Because we use web frameworks (&lt;em&gt;eg:. Laravel&lt;/em&gt;) that still use the same naming conventions (&lt;em&gt;model-view-controller&lt;/em&gt;), we tend to think that it must be MVC, but it's actually something else.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;引き続き同じ命名規則（&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;model-view-controller&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用するWebフレームワーク（&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例：Laravel&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）を使用しているため、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVCである必要があると思われがちですが、実際には別のものです。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c683c3c42c4cd8715c9521a1ca053a3971db3040" translate="yes" xml:space="preserve">
          <source>Both are patterns trying to separate presentation and business logic, decoupling business logic from UI aspects</source>
          <target state="translated">どちらもプレゼンテーションとビジネスロジックを分離しようとするパターンで、ビジネスロジックをUI面から切り離そうとしています。</target>
        </trans-unit>
        <trans-unit id="c6fd44fcf9a87b472af5d303c81d0de0302f74aa" translate="yes" xml:space="preserve">
          <source>Both of them enable TDD and have downsides and upsides.</source>
          <target state="translated">どちらもTDDを有効にして、マイナス面とプラス面があります。</target>
        </trans-unit>
        <trans-unit id="a2fe14e6a8b913548e0224385c96a940a1ab537f" translate="yes" xml:space="preserve">
          <source>Both of these frameworks aim to seperate concerns - for instance, interaction with a data source (model), application logic (or turning this data into useful information) (Controller/Presenter) and display code (View).  In some cases the model can also be used to turn a data source into a higher level abstraction as well.  A good example of this is the &lt;a href=&quot;http://blog.wekeroad.com/mvc-storefront/&quot;&gt;MVC Storefront project&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらのフレームワークはどちらも、たとえばデータソース（モデル）、アプリケーションロジック（またはこのデータを有用な情報に変換する）（コントローラー/プレゼンター）との相互作用、および表示コード（ビュー）などの懸念を分離することを目的としています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合によっては、モデルを使用して、データソースをより高いレベルの抽象化に変えることもできます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この良い例が&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blog.wekeroad.com/mvc-storefront/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVCストアフロントプロジェクト&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4883d883e11f6be5048f16fc28a04c5642fc6323" translate="yes" xml:space="preserve">
          <source>Both presentation patterns.  They separate the dependencies between a Model (think Domain objects), your screen/web page (the View), and how your UI is supposed to behave (Presenter/Controller)</source>
          <target state="translated">どちらもプレゼンテーションのパターンです。これらのパターンは、モデル(ドメインオブジェクトを考える)、スクリーンウェブページ(ビュー)、UIの動作(PresenterController)の間の依存関係を分離します。</target>
        </trans-unit>
        <trans-unit id="7db23f637ba3aad5f36394f1c2f821f44340dc90" translate="yes" xml:space="preserve">
          <source>Can be responsible for determining which view to display</source>
          <target state="translated">どのビューを表示するかを決定することができます。</target>
        </trans-unit>
        <trans-unit id="f59f787c0c1f783c7964e0e7231384d7c6999d75" translate="yes" xml:space="preserve">
          <source>Can be responsible for determining which view to display (Front Controller Pattern)</source>
          <target state="translated">表示するビューを決定することができます(フロントコントローラパターン</target>
        </trans-unit>
        <trans-unit id="7375c53b3b9ebcc70a87ca2788a6bb5126518c27" translate="yes" xml:space="preserve">
          <source>Con: more work (for example all the setter properties) as you are doing all the data binding yourself.</source>
          <target state="translated">Con:すべてのデータバインディングを自分で行っているため、より多くの作業(例えば、すべてのセッターのプロパティなど)が必要になります。</target>
        </trans-unit>
        <trans-unit id="f7d3bb72a6caa8d05eddbf6498df612a214d40a0" translate="yes" xml:space="preserve">
          <source>Con: there's less testable surface (because of data binding), and there's less encapsulation in the View since it talks directly to the Model.</source>
          <target state="translated">欠点:(データバインディングのため)テスト可能なサーフェスが少なく、ビューはモデルと直接対話するためカプセル化が少ない。</target>
        </trans-unit>
        <trans-unit id="eab32874de4f2687be749f41491e594cb1d82fc7" translate="yes" xml:space="preserve">
          <source>Conclusion - MVP and MVC are both decouple of UI patterns, but MVP usually uses a bindings framework which is MVC underneath. THUS MVP is at a higher architectural level than MVC and a wrapper pattern above of MVC.</source>
          <target state="translated">結論-MVPとMVCはどちらもUIパターンのデカップリングですが、MVPは通常バインディングフレームワークを使用しており、その下にMVCがあります。そのため、MVPはMVCよりも高いアーキテクチャーレベルにあり、MVCの上にあるラッパーパターンである。</target>
        </trans-unit>
        <trans-unit id="80ec6fa88a532e57d985374bcc69a69ba3949d2c" translate="yes" xml:space="preserve">
          <source>Consider &lt;a href=&quot;https://lostechies.com/derekgreer/2007/08/25/interactive-application-architecture/&quot;&gt;this&lt;/a&gt; highly exciting article that comprehensively lists a number of these differing implementations. 
You may note that they're all basically doing the same thing but slightly differently.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらのさまざまな実装の多くを包括的にリストしている&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://lostechies.com/derekgreer/2007/08/25/interactive-application-architecture/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;非常にエキサイティングな記事を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;検討してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらはすべて基本的に同じことをしているが、少し異なることに注意してください。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0370c4db503c7f19467ccbfbd5f1b2695c83c0c8" translate="yes" xml:space="preserve">
          <source>Controller are based on behaviors and can be shared across views</source>
          <target state="translated">コントローラはビヘイビアに基づいており、ビュー間で共有することができます。</target>
        </trans-unit>
        <trans-unit id="2cab38a568d9155fb3cc8caa5166e589d7c1e307" translate="yes" xml:space="preserve">
          <source>Controller is the initiator and it decides which view to render.</source>
          <target state="translated">コントローラはイニシエータであり、どのビューをレンダリングするかを決定します。</target>
        </trans-unit>
        <trans-unit id="0f0cac48c1eaf1076d16c7f442e6fb6f16e850e1" translate="yes" xml:space="preserve">
          <source>Decision on how to choose one of them IMHO should be based on how much time one invested in ASP NET web form type of web development. 
If one would consider himself good in web forms, I would suggest MVP. 
If one would feel not so comfortable in things such as page life cycle etc MVC could be a way to go here.</source>
          <target state="translated">IMHOはそれらのいずれかを選択する方法を決定するには、ウェブ開発のASP NETウェブフォームタイプにどれだけの時間を投資したかに基づいている必要があります。もしウェブフォームが得意だと思うなら、MVPをお勧めします。ページのライフサイクルなどのようなものはあまり快適ではないと感じるのであれば、MVCはここに行くための方法かもしれません。</target>
        </trans-unit>
        <trans-unit id="a2b447c22214c841c979d8d26240ed2438d50a64" translate="yes" xml:space="preserve">
          <source>Easier to unit test because interaction with the view is through an interface</source>
          <target state="translated">ビューとのインタラクションがインターフェイスを介して行われるため、ユニットテストが容易になります。</target>
        </trans-unit>
        <trans-unit id="f68548bd19b6038792cfbed16937610ee0a1067c" translate="yes" xml:space="preserve">
          <source>For more &lt;a href=&quot;http://geekswithblogs.net/dlussier/archive/2009/11/21/136454.aspx&quot;&gt;Reference&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;より多くのための&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://geekswithblogs.net/dlussier/archive/2009/11/21/136454.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リファレンス&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eed30dbb7348a447a272cc33a07f00c86a07d0c3" translate="yes" xml:space="preserve">
          <source>Having said that, ASP.NET MVC is by these definitions an MVP framework because the Controller accesses the Model to populate the View which is meant to have no logic (just  displays the variables provided by the Controller).</source>
          <target state="translated">とはいえ、ASP.NET MVCはこれらの定義からするとMVPフレームワークです。なぜなら、コントローラがモデルにアクセスしてロジックを持たない(コントローラが提供する変数を表示するだけの)ビューを表示するからです。</target>
        </trans-unit>
        <trans-unit id="10718b2650bdd7d40cdaf7c2f35682e59070f0d1" translate="yes" xml:space="preserve">
          <source>Here are illustrations which represent communication flow</source>
          <target state="translated">通信の流れを表現したイラストです。</target>
        </trans-unit>
        <trans-unit id="ab0f6e9f65e0dabff8c8e9d94199d95b90198921" translate="yes" xml:space="preserve">
          <source>Here are the key differences between
  the patterns:</source>
          <target state="translated">ここでは、そのパターンの主な違いをご紹介します。</target>
        </trans-unit>
        <trans-unit id="23fb19bb0fae2989c392271f0e4532d29c366749" translate="yes" xml:space="preserve">
          <source>Here's yet another blog post link giving a little bit more details on this topic</source>
          <target state="translated">ここでは、まだ別のブログ記事のリンクは、このトピックについてのもう少し詳細を与える</target>
        </trans-unit>
        <trans-unit id="a90c388214ce036e2cda7ca7a1beee59ef3deae1" translate="yes" xml:space="preserve">
          <source>How are they different?</source>
          <target state="translated">どう違うの?</target>
        </trans-unit>
        <trans-unit id="697947ce28dd90b01db12e3c405bdc08838f4195" translate="yes" xml:space="preserve">
          <source>How are they similar?</source>
          <target state="translated">どうやって似てるの?</target>
        </trans-unit>
        <trans-unit id="7c5691bc0007eee09d5e34fc2592d5bd59ebb6ad" translate="yes" xml:space="preserve">
          <source>I blogged about this a while back, quoting on &lt;a href=&quot;http://blogs.infragistics.com/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;Todd Snyder's excellent post on the difference between the two&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私はこれについてしばらく前にブログに&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.infragistics.com/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;投稿し、2つの違い&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に関する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Todd Snyderの優れた投稿を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;引用してい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="25982e196977ef10b7d392b37ae8877db51a1842" translate="yes" xml:space="preserve">
          <source>I find it unfortunate that people are still preaching this as a pattern (View in charge) as opposed to an anti-pattern as it contradicts &quot;It's just a view&quot; (Pragmatic Programmer). &quot;It's just a view&quot; states that the final view shown to the user is a secondary concern of the application. Microsoft's MVP pattern renders re-use of Views much more difficult and &lt;em&gt;conveniently&lt;/em&gt; excuses Microsoft's designer from encouraging bad practice.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「ただの見方だ」（プラグマティック・プログラマー）と矛盾するアンチパターンとは対照的に、人々がまだこれをパターン（担当の見方）として説教しているのは残念です。 「それは単なるビューです」とは、ユーザーに表示される最後のビューがアプリケーションの二次的な問題であることを示しています。 MicrosoftのMVPパターンは、ビューの再利用をはるかに困難にし、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Microsoftのデザイナーが悪い習慣を奨励する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことを&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;都合よく&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;許します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="617c09cbfe565552af42069b17032c053c0073d9" translate="yes" xml:space="preserve">
          <source>I have also blogged about the Model-View-ViewModel pattern in the context of Silverlight over at &lt;em&gt;&lt;a href=&quot;http://jonas.follesoe.no/2008/07/19/youcard-re-visited-implementing-the-viewmodel-pattern&quot;&gt;YouCard Re-visited: Implementing the ViewModel pattern&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、SilverlightのコンテキストでのModel-View-ViewModelパターンについて、YouCardでブログを&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;a href=&quot;http://jonas.follesoe.no/2008/07/19/youcard-re-visited-implementing-the-viewmodel-pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;再訪しました：Implementing the ViewModel pattern&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="52cf88109ce249187c1207e73bc21232ed04270e" translate="yes" xml:space="preserve">
          <source>I have used both MVP and MVC and although we as developers tend to focus on the technical differences of both patterns the point for MVP in IMHO is much more related to ease of adoption than anything else.</source>
          <target state="translated">私はMVPとMVCの両方を使ったことがありますが、開発者としては両方のパターンの技術的な違いに注目する傾向がありますが、IMHOにおけるMVPのポイントは何よりも採用のしやすさに関係しています。</target>
        </trans-unit>
        <trans-unit id="bb50a9cb6d28245cb89b00d7267f2ac0489d11de" translate="yes" xml:space="preserve">
          <source>I hope this helps better.</source>
          <target state="translated">これで少しでもお役に立てれば幸いです。</target>
        </trans-unit>
        <trans-unit id="042f19d6cbe76666e2c4e9ce7cc57222d9fa609e" translate="yes" xml:space="preserve">
          <source>I leave here a link to a series of articles a friend of mine has published about MVP and MVC.</source>
          <target state="translated">私の友人がMVPとMVCについて公開している一連の記事へのリンクをここに残しておきます。</target>
        </trans-unit>
        <trans-unit id="cc0f2d6d3263af56b02cbd8885ff46c2faad91fe" translate="yes" xml:space="preserve">
          <source>I personally think MVP has only been recently re-introduced as a catchy term to either reduce arguments between semantic bigots who argue whether something is truly MVC or not or to justify Microsofts Rapid Application Development tools. Neither of these reasons in my books justify its existence as a separate design pattern.</source>
          <target state="translated">個人的には、MVPがキャッチーな言葉として再導入されたのは、何かが本当にMVCかどうかを議論するセマンティックな偏屈者の間での議論を減らすためか、あるいはMicrosoftsのラピッドアプリケーション開発ツールを正当化するためかのどちらかだと思っています。私の本では、これらの理由のどちらも、MVPが別個のデザインパターンとして存在することを正当化するものではありません。</target>
        </trans-unit>
        <trans-unit id="b13c436ba56a339968c458a3f31dad8b43483d6d" translate="yes" xml:space="preserve">
          <source>I think the best resource I've found to UI architecture is the series of blog posts done by Jeremy Miller over at &lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/07/25/the-build-your-own-cab-series-table-of-contents.aspx&quot;&gt;The Build Your Own CAB Series Table of Contents&lt;/a&gt;. He covered all the flavors of MVP and showed C# code to implement them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;UIアーキテクチャで見つけた最高のリソースは、Jeremy Millerが&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/07/25/the-build-your-own-cab-series-table-of-contents.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;The Build Your Own CAB Series Table of Contents&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で行った一連のブログ投稿&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;彼はMVPのすべてのフレーバーをカバーし、それらを実装するためのC＃コードを示しました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5c241da24a69fbe9adc16bb3eef4db68da44938c" translate="yes" xml:space="preserve">
          <source>I think this image by Erwin Vandervalk (and the accompanying &lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;article&lt;/a&gt;) is the best explanation of MVC, MVP, and MVVM, their similarities, and their differences. The &lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;article&lt;/a&gt; does not show up in search engine results for queries on &quot;MVC, MVP, and MVVM&quot; because the title of the article does not contain the words &quot;MVC&quot; and &quot;MVP&quot;; but it is the best explanation, I think.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Erwin Vandervalk（および付随する&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;記事&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;によるこの画像&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、MVC、MVP、およびMVVM、それらの類似点、および相違点を最もよく説明している&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と思います&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;記事は、&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;記事のタイトルは、言葉「MVC」と「MVP」が含まれていないため、「MVC、MVP、およびMVVM」のクエリの検索エンジンの検索結果には表示されません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でもそれが一番いい説明だと思います。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="922f8a21f3de48e180ca529ef6809b6f6eace184" translate="yes" xml:space="preserve">
          <source>IMO, MVP is an improved version of MVC where you basically separate the concern of what you're gonna show (the data) from how you're gonna show (the view). The presenter includes kinda the business logic of your UI, implicitly imposes what data should be presented and gives you a list of dumb view models. And when the time comes to show the data, you simply plug your view (probably includes the same id's) into your adapter and set the relevant view fields using those view models with a minimum amount of code being introduced (just using setters). Its main benefit is you can test your UI business logic against many/various views like showing items in a horizontal list or vertical list.</source>
          <target state="translated">IMO的には、MVPはMVCの改良版であり、何を表示するか(データ)とどのように表示するか(ビュー)という問題を基本的に切り離しています。プレゼンターはUIのビジネスロジックのようなものを含み、どのようなデータを表示すべきかを暗黙のうちに要求し、おぼろげなビューモデルのリストを提供します。そして、データを表示する時が来たら、アダプタにビュー (おそらく同じ ID を含む)を差し込んで、それらのビューモデルを使って関連するビューフィールドを設定するだけです。主な利点は、水平リストや垂直リストの項目を表示するなど、さまざまなビューに対して UI ビジネスロジックをテストできることです。</target>
        </trans-unit>
        <trans-unit id="f9cccd67f2542ff5fc1b213379d523acfb8fc112" translate="yes" xml:space="preserve">
          <source>If I&amp;rsquo;m working in a team that already as a good background on web forms development style it&amp;rsquo;s far easier to introduce MVP than MVC. I would say that MVP in this scenario is a quick win.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私が既にWebフォーム開発スタイルの優れた背景を持つチームで働いている場合、MVCよりもMVPを導入する方がはるかに簡単です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このシナリオでのMVPはすぐに勝ちます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6558f723fbe4fed38574748b2f5302f711c7b446" translate="yes" xml:space="preserve">
          <source>If you want to see a sample with simple implementation please check
  &lt;a href=&quot;https://github.com/rahulabrol/Messanger&quot;&gt;this&lt;/a&gt; GitHub post</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;簡単な実装のサンプルを見たい場合は、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/rahulabrol/Messanger&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; GitHubの投稿&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を確認&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;て&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ください &lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ff98f23bff189ce3ed1260b7af476ccdf802ce2b" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;MVP&lt;/strong&gt;, the Presenter contains the UI business logic for the View. All invocations from the View delegate directly to Presenter. The Presenter is also decoupled directly from the View and talks to it through an interface. This is to allow mocking of the View in a unit test. One common attribute of MVP is that there has to be a lot of two-way dispatching. For example, when someone clicks the &quot;Save&quot; button, the event handler delegates to the Presenter's &quot;OnSave&quot; method. Once the save is completed, the Presenter will then call back the View through its interface so that the View can display that the save has completed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、プレゼンターは、表示のためのUIのビジネスロジックが含まれています。ビューからのすべての呼び出しは、プレゼンターに直接委任します。プレゼンターはビューから直接切り離され、インターフェースを介してビューと通信します。これは、単体テストでビューのモックを可能にするためです。 MVPの一般的な属性の1つは、多くの双方向ディスパッチが必要になることです。たとえば、誰かが「保存」ボタンをクリックすると、イベントハンドラーはPresenterの「OnSave」メソッドに委譲します。保存が完了すると、プレゼンターはインターフェイスを介してビューをコールバックし、ビューに保存が完了したことを表示できるようにします。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4898bac1b812a0b26c28dd47383904e1b95ee622" translate="yes" xml:space="preserve">
          <source>In MVC, View has the UI part, controller is the mediator between view and model &amp;amp; model contains the business logic .</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVCでは、ビューにはUIパーツがあり、コントローラーはビューとモデル間の仲介者であり、モデルにはビジネスロジックが含まれます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="caecc0e801c5a72f71f7c171cabd84f782e9cfa3" translate="yes" xml:space="preserve">
          <source>In MVC, we talk through interfaces (boundaries) to glue different layers. A controller is a plug-in to our architecture but it has no such a restriction to impose what to show. In that sense, MVP is kind of an MVC with a concept of views being pluggable to the controller over adapters.</source>
          <target state="translated">MVCでは、インターフェイス(境界線)を介して異なるレイヤーを接着するために話をします。コントローラは我々のアーキテクチャのプラグインですが、何を表示するかという制約はありません。その意味で、MVP は MVC の一種で、アダプタを介してコントローラにプラグイン可能なビューの概念を持っています。</target>
        </trans-unit>
        <trans-unit id="4aa9d0ac4aa811604ba2904ebe7265f0d26b5e42" translate="yes" xml:space="preserve">
          <source>In MVP the view draws data from the presenter which draws and prepares/normalizes data from the model while in MVC the controller draws data from the model and set, by push in the view.</source>
          <target state="translated">MVPでは、MVPではビューがプレゼンターからデータを描画し、モデルからデータを描画して正規化準備を行うのに対し、MVCではコントローラがモデルからデータを描画して設定し、ビュー内でプッシュすることでデータを描画します。</target>
        </trans-unit>
        <trans-unit id="ad4b0748ab0354e78964e5f9aeeced463b697404" translate="yes" xml:space="preserve">
          <source>In MVP you can have a single view working with multiple types of presenters and a single presenter working with different multiple views.</source>
          <target state="translated">MVPでは、1つのビューで複数のタイプのプレゼンターを操作し、1つのプレゼンターで異なる複数のビューを操作することができます。</target>
        </trans-unit>
        <trans-unit id="b9a8f65c70c9330d2e4e7ba75b8180257b99ea2d" translate="yes" xml:space="preserve">
          <source>In MVP, View contains both UI and implementation of the presenter since here the presenter is just an interface &amp;amp; model is the same i.e contains business logic .</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVPでは、ビューにはプレゼンターのUIと実装の両方が含まれます。プレゼンターは単なるインターフェイスであり、モデルは同じである、つまりビジネスロジックが含まれているためです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="753aca984485212d4969261a40a0ecdd95c56195" translate="yes" xml:space="preserve">
          <source>In case you're interested, I have been writing a series of articles dealing with app architectural patterns (MVC, MVP, MVVP, clean architecture, ...) accompanied by a Github repo &lt;a href=&quot;http://www.digigene.com/android-architecture-wolfkcats&quot;&gt;here&lt;/a&gt;. Even though the sample is written for android, the underlying principles can be applied to any medium.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;興味がある方のために、私は&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.digigene.com/android-architecture-wolfkcats&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここに&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Githubリポジトリを伴うアプリアーキテクチャパターン（MVC、MVP、MVVP、クリーンアーキテクチャなど）に関する一連の記事を書いてい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サンプルはAndroid用に作成されていますが、基本的な原則はどのメディアにも適用できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9dd58705a824f4c7cd55ad599bf82c53e303f903" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;MVC&lt;/strong&gt;, the Controller is responsible for determining which View to display in response to any action including when the application loads. This differs from MVP where actions route through the View to the Presenter. In MVC, every action in the View correlates with a call to a Controller along with an action. In the web each action involves a call to a URL on the other side of which there is a Controller who responds. Once that Controller has completed its processing, it will return the correct View. The sequence continues in that manner throughout the life of the application:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、コントローラは、ビューは、アプリケーションの負荷を含む任意のアクションに応じて表示するかを決定する責任があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、アクションがビューを介してプレゼンターにルーティングされるMVPとは異なります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVCでは、ビュー内のすべてのアクションは、アクションとともにコントローラーへの呼び出しと相関します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Webでは、各アクションには、反対側のコントローラーが応答するURLへの呼び出しが含まれます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントローラーが処理を完了すると、正しいビューが返されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シーケンスは、アプリケーションの存続期間中、そのように続きます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9aa9b9e508319acacb670f8c7e75d029ce538b29" translate="yes" xml:space="preserve">
          <source>In those frameworks, the UI/HTML5/XAML, is aware of what property of the presenter each UI element displays, so when you bind a view to a presenter, the view looks for the properties and knows how to draw data from them and how to set them when a value is changed in the UI by the user.</source>
          <target state="translated">それらのフレームワークでは、UIHTML5XAMLは、各UI要素が表示するプレゼンターのどのようなプロパティを認識しているので、ビューをプレゼンターにバインドすると、ビューはプロパティを探して、そこからデータを描画する方法や、ユーザーがUI内で値を変更したときにどのように設定するかを知っています。</target>
        </trans-unit>
        <trans-unit id="c01cde1f4d24cec2a304f26abfafadee545f5a75" translate="yes" xml:space="preserve">
          <source>Instead, have a look at &lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;Action-Domain-Responder&lt;/a&gt;.
In ADR, the &lt;strong&gt;Controller&lt;/strong&gt; gets an &lt;strong&gt;Action&lt;/strong&gt;, which will perform an operation in the &lt;strong&gt;Model/Domain&lt;/strong&gt;. So far, the same.
The difference is, it then collects that operation's response/data, and pass it to a &lt;strong&gt;Responder&lt;/strong&gt; (&lt;em&gt;eg:. &lt;code&gt;view()&lt;/code&gt;&lt;/em&gt;) for rendering.
When a new action is requested on the same component, the &lt;strong&gt;Controller&lt;/strong&gt; is called again, and the cycle repeats itself.
In ADR, there's &lt;strong&gt;no connection&lt;/strong&gt; between the Model/Domain and the View (&lt;em&gt;Reponser's response&lt;/em&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Action-Domain-Responderをご覧ください&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。 ADRでは、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントローラー&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Actionを&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;取得&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model / Domainで&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;操作を実行します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。これまでのところ、同じです。違いは、その操作の応答/データを収集し、それを&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;レスポンダー&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;view()&lt;/code&gt; &lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;渡して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;レンダリングすることです。同じコンポーネントで新しいアクションが要求されると、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントローラー&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が再度呼び出され、サイクルが繰り返されます。 ADRでは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、モデル/ドメインとビュー（&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Reponserの応答&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;間に&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関係&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はあり&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6bf0642feeed5b037f39e4a3637221ff5a6fd72a" translate="yes" xml:space="preserve">
          <source>It is the best explanation on the web I could find.</source>
          <target state="translated">ウェブ上で見つけた中では最高の説明だと思います。</target>
        </trans-unit>
        <trans-unit id="c0e59ffc55e85fc20e92dbecba004d8fe98d71a0" translate="yes" xml:space="preserve">
          <source>MVC = Model-View-Controller</source>
          <target state="translated">MVC=モデルビューコントローラ</target>
        </trans-unit>
        <trans-unit id="8a43b3b072a5b6199b18f294ed1df5f2594545ac" translate="yes" xml:space="preserve">
          <source>MVC is great, but the problem is that usually its controller per view. Controller A knows how to set fields of View A. If now, you want View A to display data of model B, you need Controller A to know model B, or you need Controller A to receive an object with an interface - which is like MVP only without the bindings, or you need to rewrite the UI set code in Controller B.</source>
          <target state="translated">MVCは素晴らしいですが、問題は通常はビューごとにコントローラがあるということです。コントローラAはビューAのフィールドを設定する方法を知っています。もし今、ビューAにモデルBのデータを表示させたい場合、コントローラAがモデルBを知っている必要があります。</target>
        </trans-unit>
        <trans-unit id="1a1de6da1e685269460dfb990c3cd363bf1bf525" translate="yes" xml:space="preserve">
          <source>MVC stands for Model-View-Controller. Controller is responsible for creating models and rendering views with binding models.</source>
          <target state="translated">MVCとは、Model-View-Controllerの略です。コントローラはモデルを作成し、バインディングモデルでビューをレンダリングする役割を担っています。</target>
        </trans-unit>
        <trans-unit id="2d7472c153b90e4439c448216cb3bca8ac60031b" translate="yes" xml:space="preserve">
          <source>MVC: the controller is in charge.</source>
          <target state="translated">MVC:コントローラーが担当しています。</target>
        </trans-unit>
        <trans-unit id="666e13a62670ef5dd9c954b6ed8731d40b354b51" translate="yes" xml:space="preserve">
          <source>MVP = Model-View-Presenter</source>
          <target state="translated">MVP=モデルビュー・プレゼンター</target>
        </trans-unit>
        <trans-unit id="423ff2c6133e25b75601b0a4f1c6920983fb465b" translate="yes" xml:space="preserve">
          <source>MVP designs have the Presenter access the model and interact with the view.</source>
          <target state="translated">MVPデザインでは、プレゼンターがモデルにアクセスして、ビューと対話できるようにしています。</target>
        </trans-unit>
        <trans-unit id="0a13bcb6d62230c45fda925e5f2e54e195a1d9eb" translate="yes" xml:space="preserve">
          <source>MVP is &lt;em&gt;not&lt;/em&gt; necessarily a scenario where the View is in charge (see Taligent's MVP for example).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVPは&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必ずしもビューが責任を負うシナリオで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はあり&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（たとえば、TaligentのMVPを参照してください）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="153e761e5f1c4625aab1927ce95ce39495fe46af" translate="yes" xml:space="preserve">
          <source>MVP stands for Model - View- Presenter. This came to a picture in early 2007 where Microsoft introduced Smart Client windows applications.</source>
          <target state="translated">MVPはModel-View-Presenterの略です。これは2007年の初めにMicrosoftがSmart ClientのWindowsアプリケーションを導入した時の写真です。</target>
        </trans-unit>
        <trans-unit id="593ddaf257dbd344ef6de1239417c3856337fd25" translate="yes" xml:space="preserve">
          <source>MVP tends to be a very natural pattern for achieving separated presentation in Web Forms. The reason is that the View is always created first by the ASP.NET runtime. You can &lt;a href=&quot;http://www.codeplex.com/websf/Wiki/View.aspx?title=MVPDocumentation&amp;amp;referringTitle=bundles&quot;&gt;find out more about both variants&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVPは、Webフォームで個別のプレゼンテーションを実現するための非常に自然なパターンになる傾向があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その理由は、ASP.NETランタイムによって常に最初にビューが作成されるためです。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.codeplex.com/websf/Wiki/View.aspx?title=MVPDocumentation&amp;amp;referringTitle=bundles&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;両方の亜種について詳しく知る&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことができ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8adb32e4dfc525bd9ed5519dd43628cdd9231191" translate="yes" xml:space="preserve">
          <source>MVP usually uses some sort of a binding framework, such as Microsoft WPF binding framework or various binding frameworks for HTML5 and Java.</source>
          <target state="translated">MVPは通常、MicrosoftのWPFバインディングフレームワークやHTML5やJavaの各種バインディングフレームワークなど、何らかのバインディングフレームワークを使用しています。</target>
        </trans-unit>
        <trans-unit id="025ddd6c85eddf626d74a15567c91fb5750cadaf" translate="yes" xml:space="preserve">
          <source>MVP: the view is in charge.</source>
          <target state="translated">MVP:ビューが担当しています。</target>
        </trans-unit>
        <trans-unit id="9a44ef615916a4fab8a8e8aac039ef0308295c8d" translate="yes" xml:space="preserve">
          <source>Model-View-Controller</source>
          <target state="translated">Model-View-Controller</target>
        </trans-unit>
        <trans-unit id="4d0814805419c9f47f02998803c65a41d83dd0cf" translate="yes" xml:space="preserve">
          <source>Model-View-Presenter</source>
          <target state="translated">Model-View-Presenter</target>
        </trans-unit>
        <trans-unit id="f9731cd9f1b7c0cad88b11ca9a0dfbb97b762976" translate="yes" xml:space="preserve">
          <source>My experience tells me that moving  a team from web forms to MVP and then from MVP to MVC is relatively easy; moving from web forms to MVC is more difficult.</source>
          <target state="translated">私の経験では、チームをウェブフォームからMVPに移動し、MVPからMVCに移動するのは比較的簡単ですが、ウェブフォームからMVCに移動するのはもっと難しいと思います。</target>
        </trans-unit>
        <trans-unit id="9a7dad07badf4ed27fd0ee61735b1ffe44f86426" translate="yes" xml:space="preserve">
          <source>My humble short view: MVP is for large scales, and MVC for tiny scales. With MVC, I sometime feel the V and the C may be seen a two sides of a single indivisible component rather directly bound to M, and one inevitably falls to this when going down‑to shorter scales, like UI controls and base widgets. At this level of granularity, MVP makes little sense. When one on the contrary go to larger scales, proper interface becomes more important, the same with unambiguous assignment of responsibilities, and here comes MVP.</source>
          <target state="translated">謙虚な私の近景。MVP は大規模なスケールのためのものであり、MVC は微小なスケールのためのものである。MVCでは、VとCがMに直接結びついているというよりも、一つの不可分なコンポーネントの表裏一体に見えてしまうことがあり、UIコントロールやベースウィジェットのように、もっと小さなスケールに行くと、どうしてもこれに陥ってしまうのです。このレベルの粒度では、MVPはほとんど意味を持ちません。逆にスケールが大きくなると、適切なインターフェイスが重要になってきて、責任の所在を明確にすることと同じように、MVPの登場です。</target>
        </trans-unit>
        <trans-unit id="7d6398b6228fc97ad6cbcd6c4e420ab540fdc39c" translate="yes" xml:space="preserve">
          <source>On the other hand, this scale rule of a thumb, may weight very little when the platform characteristics favours some kind of relations between the components, like with the web, where it seems to be easier to implement MVC, more than MVP.</source>
          <target state="translated">一方で、このスケールの親指のルールは、プラットフォームの特性がコンポーネント間の関係のいくつかの種類を好む場合には、非常に小さな重みがあります、ウェブのように、MVPよりもMVCを実装する方が簡単なようです。</target>
        </trans-unit>
        <trans-unit id="8f3b62032d27bb14f7876f375a718a8b1bd1b65d" translate="yes" xml:space="preserve">
          <source>One other big difference about MVC is that the View does not directly bind to the Model. The view simply renders, and is completely stateless. In implementations of MVC the View usually will not have any logic in the code behind. This is contrary to MVP where it is absolutely necessary because, if the View does not delegate to the Presenter, it will never get called.</source>
          <target state="translated">MVCのもう一つの大きな違いは、ビューがモデルに直接バインドしないことです。ビューは単にレンダリングするだけで、完全にステートレスです。MVC の実装では、通常、ビューはコードの後ろにロジックを持ちません。これは MVP とは対照的に、ビューがプレゼンターに委譲しなければ呼び出されることがないため、絶対に必要なのです。</target>
        </trans-unit>
        <trans-unit id="9d85e7cc0708b67b551018cc07382f91d292f50e" translate="yes" xml:space="preserve">
          <source>One other pattern to look at is the &lt;strong&gt;Presentation Model&lt;/strong&gt; pattern. In this pattern there is no Presenter. Instead the View binds directly to a Presentation Model. The Presentation Model is a Model crafted specifically for the View. This means this Model can expose properties that one would never put on a domain model as it would be a violation of separation-of-concerns. In this case, the Presentation Model binds to the domain model, and may subscribe to events coming from that Model. The View then subscribes to events coming from the Presentation Model and updates itself accordingly. The Presentation Model can expose commands which the view uses for invoking actions. The advantage of this approach is that you can essentially remove the code-behind altogether as the PM completely encapsulates all of the behaviour for the view. This pattern is a very strong candidate for use in WPF applications and is also called &lt;a href=&quot;http://msdn.microsoft.com/en-us/magazine/dd419663.aspx&quot;&gt;Model-View-ViewModel&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もう1つの注目すべきパターンは、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンテーションモデルです。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パターン。このパターンでは、プレゼンターは存在しません。代わりに、ビューはプレゼンテーションモデルに直接バインドします。プレゼンテーションモデルは、ビュー専用に作成されたモデルです。つまり、このモデルは、関心の分離に違反することになるため、ドメインモデルに配置することのないプロパティを公開できるということです。この場合、プレゼンテーションモデルはドメインモデルにバインドし、そのモデルからのイベントにサブスクライブする場合があります。次に、ビューはプレゼンテーションモデルからのイベントをサブスクライブし、それに応じて自身を更新します。プレゼンテーションモデルは、ビューがアクションの呼び出しに使用するコマンドを公開できます。このアプローチの利点は、PMがビューのすべての動作を完全にカプセル化するため、コードビハインドを本質的に完全に削除できることです。このパターンは、WPFアプリケーションで使用する非常に強力な候補であり、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/magazine/dd419663.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model-View-ViewModel&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed38d909f58dd9ee16876dc1d8c2b62c011b11f7" translate="yes" xml:space="preserve">
          <source>Presentation Model</source>
          <target state="translated">プレゼンテーションモデル</target>
        </trans-unit>
        <trans-unit id="ea4498215d645ab272e3b3846196223e2f0768f4" translate="yes" xml:space="preserve">
          <source>Pro: by leveraging databinding the amount of code is reduced.</source>
          <target state="translated">プロ:データバインディングを活用することで、コードの量を減らすことができます。</target>
        </trans-unit>
        <trans-unit id="2f71b21ad625425383fdafcef7b1c6b4b973b516" translate="yes" xml:space="preserve">
          <source>Pro: maximum testability surface; clean separation of the View and Model</source>
          <target state="translated">プロ:最大のテスト可能なサーフェス、ビューとモデルのクリーンな分離</target>
        </trans-unit>
        <trans-unit id="c61fe2f6ea22910c80db69971f026c3b36b9e979" translate="yes" xml:space="preserve">
          <source>So, if for example, the model is a car, then the presenter is some sort of a car presenter, exposes the car properties (year, maker, seats, etc.) to the view. The view knows that the text field called 'car maker' needs to display the presenter Maker property.</source>
          <target state="translated">つまり、例えばモデルが車であれば、プレゼンターが車のプロパティ(年式、メーカー、シートなど)をビューに公開します。ビューは、'car maker'というテキストフィールドにプレゼンターのMakerプロパティを表示する必要があることを知っています。</target>
        </trans-unit>
        <trans-unit id="3653a3200fb622278cb1e5b02db6ae3aff3eaf82" translate="yes" xml:space="preserve">
          <source>Some people keep forgetting, that MVC &lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller#History&quot;&gt;was created in the late 70&quot;&lt;/a&gt;, and that the Web was only created in late 80&quot;/early 90&quot;.
MVC wasn't originally created for the Web, but for Desktop applications instead, where the Controller, Model and View would co-exist together.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一部の人々は、MVC &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller#History&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が70 &quot;後半に作成された&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;こと、およびWebが80&quot;後半/ 90 &quot;初めにのみ作成された&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことを忘れがち&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。MVCは元々Web用に作成されたのではなく、デスクトップアプリケーション用に作成されました。 、モデルとビューは共存します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b036d150ca2081e3f49a7a021ebf2382e3cd9bbe" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Presenter&lt;/strong&gt; is the &amp;ldquo;middle-man&amp;rdquo; (played by the controller in MVC) and has references to both, view and model. &lt;strong&gt;Please note that the word &amp;ldquo;Model&amp;rdquo;&lt;/strong&gt; is misleading. It should rather be &lt;strong&gt;business logic that retrieves or manipulates a Model&lt;/strong&gt;. For instance: If you have a database storing User in a database table and your View wants to display a list of users, then the Presenter would have a reference to your database business logic (like a DAO) from where the Presenter will query a list of Users.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンターは&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（MVCコントローラによって果たされる）「仲介人」であり、ビューとモデルの両方への参照を有します。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「モデル」という言葉&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は誤解を招くものである&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことに注意してください&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それはむしろ&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、Modelを取得または操作するビジネスロジックである&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必要&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;があります&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例：データベーステーブルにユーザーを格納するデータベースがあり、ビューがユーザーのリストを表示したい場合、プレゼンターはリストからクエリを行うデータベースビジネスロジック（DAOなど）への参照を持ちます。ユーザーの。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7ce9069d0933040f65e27892dbc1478ccd50468c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;model&lt;/strong&gt; is the data that will be displayed in the view (user interface).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モデルは、&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビュー（ユーザーインターフェース）に表示されるデータです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9538b9f662cea4b1498ce78dfd7271b9bce9d9d9" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;view&lt;/strong&gt; is an interface that displays data (the model) and routes user commands (events) to the Presenter to act upon that data. The view usually has a reference to its Presenter.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビューは&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンターに表示データ（モデル）とルートユーザコマンド（イベント）がそのデータに作用することのインタフェースです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通常、ビューにはプレゼンターへの参照があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f8cadfc7a7df940200c9941e44f92d7dc05189bb" translate="yes" xml:space="preserve">
          <source>The controller is created or accessed based on some event/request. The controller then creates the appropriate view and interacts with the model to further configure the view. It boils down to: the controller creates and manages the view; the view is slave to the controller. The view does not know about the controller.</source>
          <target state="translated">コントローラは、イベントリクエストに基づいて作成またはアクセスされます。そして、コントローラは適切なビューを作成し、モデルと対話してビューをさらに設定します。要するに、コントローラがビューを作成して管理し、ビューはコントローラのスレーブとなります。ビューはコントローラのスレーブである。</target>
        </trans-unit>
        <trans-unit id="8bcabe0f3f82d13b623b2c7d77f164d767970a86" translate="yes" xml:space="preserve">
          <source>The distinction made is that in an MVC application traditionally has the view and the controller interact with the model, but not with each other.</source>
          <target state="translated">この区別は、MVCアプリケーションでは伝統的にビューとコントローラがモデルと相互作用していますが、お互いにそうではないということです。</target>
        </trans-unit>
        <trans-unit id="45d8959b50e1ab78500a4af2828aefe5ad3a0d55" translate="yes" xml:space="preserve">
          <source>The input begins with the View, not the Presenter.
There is a one-to-one mapping between the View and the associated Presenter.
The View holds a reference to the Presenter. The Presenter is also reacting to events being triggered from the View, so its aware of the View its associated with.
The Presenter updates the View based on the requested actions it performs on the Model, but the View is not Model aware.</source>
          <target state="translated">入力は Presenter ではなく View から始まります。ビューと関連するプレゼンターの間には、1 対 1 のマッピングがあります。ビューは Presenter への参照を保持しています。Presenter は、ビューからトリガーされたイベントにも反応するため、関連付けられたビューを認識しています。このような場合は、モデル上で実行される要求されたアクションに基づいて Presenter がビューを更新しますが、ビューはモデルを認識しません。</target>
        </trans-unit>
        <trans-unit id="301ad9ee0376a5983043321774e9445004e67361" translate="yes" xml:space="preserve">
          <source>The input is directed at the Controller first, not the view. That input might be coming from a user interacting with a page, but it could also be from simply entering a specific url into a browser. In either case, its a Controller that is interfaced with to kick off some functionality.
There is a many-to-one relationship between the Controller and the View. That&amp;rsquo;s because a single controller may select different views to be rendered based on the operation being executed.
Note the one way arrow from Controller to View. This is because the View doesn&amp;rsquo;t have any knowledge of or reference to the controller.
The Controller does pass back the Model, so there is knowledge between the View and the expected Model being passed into it, but not the Controller serving it up.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;入力は、ビューではなく、最初にコントローラーに向けられます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その入力は、ページを操作しているユーザーからのものである可能性がありますが、特定のURLをブラウザに入力しただけの場合もあります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どちらの場合も、一部の機能を開始するためにインターフェースされるコントローラーです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントローラとビューの間には多対1の関係があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、単一のコントローラーが、実行中の操作に基づいてレンダリングされる異なるビューを選択する可能性があるためです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントローラからビューへの一方向の矢印に注意してください。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、ビューがコントローラーに関する知識や参照を持たないためです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントローラはモデルをパスバックするので、ビューとそれに渡される予想モデルとの間には知識がありますが、それを提供するコントローラには知識がありません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b13f6ab6d7ad93ea600a87ab843ab5508280a401" translate="yes" xml:space="preserve">
          <source>The second flavor of MVP is the Supervising Controller. In that case your View might have a property called Customer, which then again is databound to the UI widgets. You don't have to think about synchronizing and micro-manage the view, and the Supervising Controller can step in and help when needed, for instance with compled interaction logic.</source>
          <target state="translated">MVP の 2 つ目のフレーバーは Supervising Controller です。この場合、ビューに Customer というプロパティがあるかもしれません。ビューの同期化やマイクロ管理について考える必要はなく、必要に応じてスーパーバイジングコントローラが介入し、例えば複雑なインタラクションロジックなどで支援することができます。</target>
        </trans-unit>
        <trans-unit id="5a64b0bdd2b3ea781381907e13e2c0da16747d45" translate="yes" xml:space="preserve">
          <source>The simplest answer is how the view interacts with the model. In MVP the view is updated by the presenter, which acts as as intermediary between the view and the model. The presenter takes the input from the view, which retrieves the data from the model and then performs any business logic required and then updates the view. In MVC the model updates the view directly rather than going back through the controller.</source>
          <target state="translated">最も単純な答えは、ビューがモデルとどのように相互作用するかということです。MVPでは、ビューはプレゼンターによって更新され、ビューとモデルの間の仲介者として機能します。プレゼンターはビューからの入力を受け取り、モデルからデータを取得し、必要なビジネスロジックを実行してビューを更新します。MVCでは、コントローラを経由するのではなく、モデルが直接ビューを更新します。</target>
        </trans-unit>
        <trans-unit id="6a970a3299eb9cfc3156b88ba470bccec8c0ca28" translate="yes" xml:space="preserve">
          <source>The third &quot;flavor&quot; of MVP (or someone would perhaps call it a separate pattern) is the Presentation Model (or sometimes referred to Model-View-ViewModel). Compared to the MVP you &quot;merge&quot; the M and the P into one class. You have your customer object which your UI widgets is data bound to, but you also have additional UI-spesific fields like &quot;IsButtonEnabled&quot;, or &quot;IsReadOnly&quot;, etc.</source>
          <target state="translated">MVPの3番目の「フレーバー」は、プレゼンテーションモデル(またはModel-View-ViewModelと呼ばれることもあります)です。MVPと比較して、MとPを1つのクラスに「マージ」します。UIウィジェットのデータがバインドされている顧客オブジェクトがありますが、&quot;IsButtonEnabled &quot;や &quot;IsReadOnly &quot;などの追加のUI-spesificフィールドも持っています。</target>
        </trans-unit>
        <trans-unit id="f669265be325235de5f4cc1ec139e56287acf4e4" translate="yes" xml:space="preserve">
          <source>The view is the initiator for user inputs and then delegates the events to the Presenter and the presenter handles event bindings and gets data from models.</source>
          <target state="translated">ビューはユーザー入力のイニシエーターであり、イベントをプレゼンターに委譲し、プレゼンターはイベントバインディングを処理し、モデルからデータを取得します。</target>
        </trans-unit>
        <trans-unit id="d39997851ece3fcb75c76f9050d8a0121c1ecce4" translate="yes" xml:space="preserve">
          <source>The view, in most cases, creates its presenter. The presenter will interact with the model and manipulate the view through an interface. The view will sometimes interact with the presenter, usually through some interface.  This comes down to implementation; do you want the view to call methods on the presenter or do you want the view to have events the presenter listens to? It boils down to this: The view knows about the presenter. The view delegates to the presenter.</source>
          <target state="translated">ビューは、ほとんどの場合、プレゼンターを作成します。プレゼンターはモデルと対話し、インターフェースを通じてビューを操作します。ビューは、通常は何らかのインターフェイスを介してプリメンターと対話することもあります。これは、ビューがプリメンター上でメソッドを呼び出すようにしたいのか、それともプリメンターがリッスンするイベントをビューに持たせたいのか、という実装の問題になります。要するに、次のようなことです。ビューはプレゼンターについて知っています。ビューはプレゼンターに委任します。</target>
        </trans-unit>
        <trans-unit id="27757769008ceb477f7e05a0cce8b21ba034600f" translate="yes" xml:space="preserve">
          <source>There are many answers to the question, but I felt there is a need for some really simple answer clearly comparing the two. Here's the discussion I made up when a user searches for a movie name in an MVP and MVC app:</source>
          <target state="translated">この質問に対する回答はたくさんありますが、明確に比較した本当にシンプルな回答が必要だと感じました。ここでは、MVPとMVCアプリでユーザーがムービー名を検索したときの議論をまとめてみました。</target>
        </trans-unit>
        <trans-unit id="a92db89ca0249089c13b11f20ed6580da41fbc47" translate="yes" xml:space="preserve">
          <source>There are many versions of MVC, this answer is about the original MVC in Smalltalk. In brief, it is</source>
          <target state="translated">MVCには多くのバージョンがありますが、この回答はSmalltalkのオリジナルのMVCについてのものです。簡単に言うと</target>
        </trans-unit>
        <trans-unit id="82ed275cafa23c2ea8e8869eeae8eea58c31d287" translate="yes" xml:space="preserve">
          <source>There is &lt;a href=&quot;https://www.youtube.com/watch?v=WpkDN78P884&amp;amp;feature=youtu.be&amp;amp;t=29m1s&quot;&gt;this&lt;/a&gt; nice video from Uncle Bob where he briefly explains &lt;strong&gt;MVC&lt;/strong&gt; &amp;amp; &lt;strong&gt;MVP&lt;/strong&gt; at the end.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アンクルボブからの&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=WpkDN78P884&amp;amp;feature=youtu.be&amp;amp;t=29m1s&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;素晴らしいビデオ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、最後&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に彼が&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;について簡単に説明&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2387b03e9c36c2f329fc383807a6d7fc068372d9" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff921080.aspx&quot;&gt;MSDN article about the Presentation Model&lt;/a&gt; and a section in the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707819.aspx&quot;&gt;Composite Application Guidance for WPF&lt;/a&gt; (former Prism) about &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707862.aspx&quot;&gt;Separated Presentation Patterns&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff921080.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プレゼンテーションモデルについてのMSDNの記事&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;やセクション&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707819.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;WPF用コンポジットアプリケーションのガイダンス&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;について（旧プリズム）&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707862.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;分離プレゼンテーションパターンは、&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7ee276ebb5fe1caeea00a1b1761430f0ba014210" translate="yes" xml:space="preserve">
          <source>There is a discussion &lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/10/31/development-trivial-pursuit-the-difference-between-mvc-and-the-different-flavors-of-mvp.aspx&quot;&gt;here&lt;/a&gt; regarding the differences between MVC vs MVP.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVCとMVPの違いについて&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/10/31/development-trivial-pursuit-the-difference-between-mvc-and-the-different-flavors-of-mvp.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;議論があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7699ceb8018ddb15756349dc26c7ea4e42bd17a7" translate="yes" xml:space="preserve">
          <source>There is also &lt;a href=&quot;http://gexiaoguo.github.io/MVC,-MVP-and-MVVM/&quot;&gt;a complete comparison of MVC, MVP and MVVM here&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;a href=&quot;http://gexiaoguo.github.io/MVC,-MVP-and-MVVM/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC、MVP、MVVMの完全な比較&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;も&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここにあります&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="732e33e57cc89c110727e2ee01bc05e383b35a3b" translate="yes" xml:space="preserve">
          <source>They are fairly similar in concept, folks initialize the Presenter/Controller differently depending on taste.</source>
          <target state="translated">概念的にはかなり似ていますが、PresenterController の初期化は好みによって異なります。</target>
        </trans-unit>
        <trans-unit id="9e06241d8aa910ec172be9a0d74cc298f0b8f2e2" translate="yes" xml:space="preserve">
          <source>They each addresses different problems and can even be combined together to have something like below</source>
          <target state="translated">それぞれが異なる問題に対応しており、組み合わせて以下のようなものを持つこともできます。</target>
        </trans-unit>
        <trans-unit id="47cadcbcc9b8934f4ae08c3f71c0a82e97d39b6a" translate="yes" xml:space="preserve">
          <source>This binding framework, if you strip it down, it's actually the controller :-)</source>
          <target state="translated">このバインディングのフレームワークは、それを剥ぎ取ると、実際にはコントローラになります :-)</target>
        </trans-unit>
        <trans-unit id="38e65116cea7797e3e3b184268328e27c9889ae8" translate="yes" xml:space="preserve">
          <source>This is an oversimplification of the many variants of these design patterns, but this is how I like to think about the differences between the two.</source>
          <target state="translated">これは、これらのデザインパターンの多くの亜種を簡略化しすぎたものですが、私はこのように2つの違いを考えるのが好きです。</target>
        </trans-unit>
        <trans-unit id="f38b8d429e873aab62370e55b7446e42b7d50843" translate="yes" xml:space="preserve">
          <source>This talk &lt;a href=&quot;https://www.youtube.com/watch?v=i1-7S-RxfvQ&quot;&gt;droidcon NYC 2017 - Clean app design with Architecture Components&lt;/a&gt; clarifies it</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このトーク&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=i1-7S-RxfvQ&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;droidcon NYC 2017-アーキテクチャコンポーネントを使用&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;した&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クリーンなアプリデザインで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;明らかに&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="545847bd273b1f49941092ff8d1fdbab224676c5" translate="yes" xml:space="preserve">
          <source>To be perfectly frank, I think the underlying concerns of MVC hold true for any MVP implementation and the differences are almost entirely semantic. As long as you are following separation of concerns between the view (that displays the data), the controller (that initialises and controls user interaction) and the model (the underlying data and/or services)) then you are achieving the benefits of MVC. If you are achieving the benefits then who really cares whether your pattern is MVC, MVP or Supervising Controller? The only &lt;em&gt;real&lt;/em&gt; pattern remains as MVC, the rest are just differing flavours of it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;率直に言って、MVCの根本的な懸念はどのMVP実装にも当てはまり、その違いはほぼ完全にセマンティックです。ビュー（データを表示する）、コントローラー（ユーザーの操作を初期化および制御する）、およびモデル（基になるデータやサービス）の間の関心の分離に従っている限り、MVCの利点を達成できます。 。あなたが利益を達成しているなら、あなたのパターンがMVC、MVP、または監督コントローラーであるかどうかを本当に気にする人は誰ですか？唯一の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;本当の&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パターンはMVCのままですが、残りは単に異なるフレーバーです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="482730aa6dd38ce89c84c44cdb10a85967c85887" translate="yes" xml:space="preserve">
          <source>To make this a little more clear, let's imagine a simple shopping list app. All we want is a list of the name, quantity and price of each item we need to buy this week. Below we'll describe how we could implement some of this functionality using MVC.</source>
          <target state="translated">これをもう少しわかりやすくするために、簡単な買い物リストアプリを想像してみましょう。欲しいのは、今週買わなければならない商品の名前、数量、価格のリストです。以下では、MVCを使ってこの機能の一部を実装する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="36881632660b34cfeb60c442c72bb50a89a4b94b" translate="yes" xml:space="preserve">
          <source>To perhaps get an idea of the ASP.NET MVC distinction from MVP, check out &lt;a href=&quot;http://www.hanselman.com/blog/ASPNETMVCSessionAtMix08TDDAndMvcMockHelpers.aspx&quot;&gt;this MIX presentation&lt;/a&gt; by Scott Hanselman.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ASP.NET MVCとMVPの違いを理解するには、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Scott Hanselmanによる&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.hanselman.com/blog/ASPNETMVCSessionAtMix08TDDAndMvcMockHelpers.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このMIXプレゼンテーション&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をご覧ください。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f0d5780f10eb00de3194e1ce64c16ffa7b1a215a" translate="yes" xml:space="preserve">
          <source>Two primary variations</source>
          <target state="translated">2つの主要なバリエーション</target>
        </trans-unit>
        <trans-unit id="d8e5a17a94be3110a5c8a6cb2926e409bcfdd2cb" translate="yes" xml:space="preserve">
          <source>User: Click click &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ユーザー：クリッククリック&amp;hellip;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e2022cac9d87c721fd2ffcf2c90cf08cfbdf0777" translate="yes" xml:space="preserve">
          <source>User: I just clicked on the search button &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ユーザー：検索ボタンをクリックしただけで&amp;hellip;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="caf99ef190bd9af7d81997674d54ae10c2d41178" translate="yes" xml:space="preserve">
          <source>Usually view to presenter map one to one. Complex views may have multi presenters.</source>
          <target state="translated">通常、ビューからプレゼンターへのマップは1対1になります。複雑なビューは複数のプレゼンターを持つ場合があります。</target>
        </trans-unit>
        <trans-unit id="95de390211342cdae2c03da39ba48cd824c0d405" translate="yes" xml:space="preserve">
          <source>View event binding will be implemented in the Presenter from a view interface.</source>
          <target state="translated">ビューのイベントバインディングは、ビューインターフェイスからPresenterに実装されます。</target>
        </trans-unit>
        <trans-unit id="bfb597da495d126f84a30cf8e12a2f5a5589ec42" translate="yes" xml:space="preserve">
          <source>View is more loosely coupled to the model. The presenter is responsible for binding the model to the view.</source>
          <target state="translated">ビューはモデルとより緩やかに結合されています。プレゼンターはモデルをビューに結合する責任があります。</target>
        </trans-unit>
        <trans-unit id="0c4a2a610d14eb9943f32d71e4084d55a3fc4f4c" translate="yes" xml:space="preserve">
          <source>What are MVP and MVC and what is the difference</source>
          <target state="translated">MVPとMVCとは何か、何が違うのか</target>
        </trans-unit>
        <trans-unit id="b87b976f1b7223ebb2c16be5928ce8f2d8c3707b" translate="yes" xml:space="preserve">
          <source>What is the &lt;strong&gt;difference&lt;/strong&gt; between &lt;strong&gt;MVC&lt;/strong&gt; and &lt;strong&gt;MVP&lt;/strong&gt; patterns?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;何が&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;違い&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;間の&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パターンは？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="986d2dd63e33a810f964fed17c9a33c11b99c6f1" translate="yes" xml:space="preserve">
          <source>What issues do these patterns address?</source>
          <target state="translated">これらのパターンは、どのような問題に対処しているのでしょうか?</target>
        </trans-unit>
        <trans-unit id="4015b37baf62151fb930c9a9d0fd14a4a901d977" translate="yes" xml:space="preserve">
          <source>When looking beyond the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rapid_application_development&quot;&gt;RAD&lt;/a&gt; (drag-drop and configure) way of building user interfaces that many tools encourage you are likely to come across three design patterns called &lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;Model-View-Controller&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter&quot;&gt;Model-View-Presenter&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Model_View_ViewModel&quot;&gt;Model-View-ViewModel&lt;/a&gt;. My question has three parts to it:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ユーザーインターフェイスを構築&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Rapid_application_development&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;RAD&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（ドラッグアンドドロップおよび構成）の方法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を超えて検討する場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、多くのツールは、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model-View-Controller&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model-View-Presenter&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、および&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Model_View_ViewModel&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model-View-ViewModel&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼ばれる3つの設計パターンに出くわす可能性が高いと考えています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。私の質問には3つの部分があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eaf99e74a9572f632c4513afb3ddf3f4b76892ce" translate="yes" xml:space="preserve">
          <source>When using Passive View, your View typically implement a fine-grained interface with properties mapping more or less directly to the underlaying UI widget. For instance, you might have a ICustomerView with properties like Name and Address.</source>
          <target state="translated">パッシブビューを使用する場合、ビューは通常、下にあるUIウィジェットに多かれ少なかれ直接マッピングされたプロパティを持つきめ細かなインターフェースを実装します。例えば、名前や住所のようなプロパティを持つICustomerViewがあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="1b6eedfb17289a07676cf342f01265dd1b006b7d" translate="yes" xml:space="preserve">
          <source>You can then bind to the view many different types of presenter, all must have Maker property - it can be of a plane, train or what ever , the view doesn't care. The view draws data from the presenter - no matter which - as long as it implements an agreed interface.</source>
          <target state="translated">そして、多くの異なるタイプのプレゼンターをビューにバインドすることができます。ビューは、合意されたインターフェースを実装している限り、プリゼンタからデータを描画します。</target>
        </trans-unit>
        <trans-unit id="fe22486aea6886979af6e1aace2f38d65cce7f51" translate="yes" xml:space="preserve">
          <source>You forgot about &lt;strong&gt;Action-Domain-Responder&lt;/strong&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;ADR&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Action-Domain-Responder&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ADR&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;忘れました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11e7697e759021e33983122c07fc8fc869e0b0da" translate="yes" xml:space="preserve">
          <source>Your Presenter class will talk to the model and &quot;map&quot; it to the view. This approach is called the &quot;Passive View&quot;. The benefit is that the view is easy to test, and it is easier to move between UI platforms (Web, Windows/XAML, etc.). The disadvantage is that you can't leverage things like databinding (which is &lt;em&gt;really&lt;/em&gt; powerful in frameworks like &lt;a href=&quot;http://en.wikipedia.org/wiki/Windows_Presentation_Foundation&quot;&gt;WPF&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Silverlight&quot;&gt;Silverlight&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Presenterクラスはモデルに話しかけ、それをビューに「マッピング」します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このアプローチは、「パッシブビュー」と呼ばれます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;利点は、ビューのテストが容易であり、UIプラットフォーム（Web、Windows / XAMLなど）間を移動するのが簡単であることです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;欠点は、データバインディング（&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Windows_Presentation_Foundation&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;WPF&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;や&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Silverlight&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Silverlight&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;などのフレームワーク&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;非常に&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;強力&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です）などを利用できないことです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34235fb0fc29596b8a27e0699f118207159cd0e5" translate="yes" xml:space="preserve">
          <source>Your implementation might look something like this:</source>
          <target state="translated">あなたの実装は以下のようになるかもしれません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
