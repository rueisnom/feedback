<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/2056">
    <body>
      <group id="2056">
        <trans-unit id="ca519aa8f232477ca6fb4d7b413bfb8ff28e4d3f" translate="yes" xml:space="preserve">
          <source>( &lt;em&gt;Model&lt;/em&gt; is making a query to the movie database &amp;hellip; ) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модель&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; делает запрос к базе данных фильмов&amp;hellip;) [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b196c782085e0f289a857424f8d3cd8dbdb5b897" translate="yes" xml:space="preserve">
          <source>( &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt; is calling the &lt;em&gt;Model&lt;/em&gt; &amp;hellip; ) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ведущий&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Контроллер&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вызывает &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;модель&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;hellip;) [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11738dac3b131594904e3da34a1f722da38d33c0" translate="yes" xml:space="preserve">
          <source>( &lt;em&gt;View&lt;/em&gt; calling the &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt; &amp;hellip; ) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Просмотр&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вызова &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ведущего&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;контроллера&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ...) [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="617662bb70662b4ee51904f6a182010f0a37b584" translate="yes" xml:space="preserve">
          <source>( After a while ... )</source>
          <target state="translated">(Через некоторое время...)</target>
        </trans-unit>
        <trans-unit id="9d4ae30232c39e1b37db57f07c414ae602ebff4d" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt; thanks &lt;em&gt;Model&lt;/em&gt; and gets back to the &lt;em&gt;View&lt;/em&gt;) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ведущий&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Контроллер&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; благодарит &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модель&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и возвращается к &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Представлению&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3eebbce0b57244ba6f4264a8083b8a2123c286b7" translate="yes" xml:space="preserve">
          <source>(The &lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;article&lt;/a&gt; also matches what Uncle Bob Martin said in his one of his talks: that MVC was originally designed for the small UI components, not for the architecture of the system)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Статья&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; также соответствует тому, что дядя Боб Мартин сказал в одном из своих выступлений: что MVC изначально был разработан для небольших компонентов пользовательского интерфейса, а не для архитектуры системы)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d69c0eadbc92a3002b2d562fc52edc9adb877fe" translate="yes" xml:space="preserve">
          <source>-------------- This is where MVP and MVC start to diverge ---------------</source>
          <target state="translated">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------.</target>
        </trans-unit>
        <trans-unit id="f856f715b52ee9433e2a04ef7470396b0b845d81" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;/questions/tagged/mvc&quot;&gt;mvc&lt;/a&gt;&lt;a href=&quot;/questions/tagged/adr&quot;&gt;adr&lt;/a&gt;&lt;a href=&quot;/questions/tagged/model-view-controller&quot;&gt;model-view-controller&lt;/a&gt;&lt;a href=&quot;/questions/tagged/action-domain-responder&quot;&gt;action-domain-responder&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;/questions/tagged/mvc&quot;&gt;mvc&lt;/a&gt;&lt;a href=&quot;/questions/tagged/adr&quot;&gt;adr&lt;/a&gt;&lt;a href=&quot;/questions/tagged/model-view-controller&quot;&gt;model-view-controller&lt;/a&gt;&lt;a href=&quot;/questions/tagged/action-domain-responder&quot;&gt;action-domain-responder&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e0805a8ce705f2ac6ed5d15de6da21d7712a490e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Controller&lt;/em&gt;: Thanks for waiting &lt;em&gt;View&lt;/em&gt;, I have asked &lt;em&gt;Model&lt;/em&gt; about your search query. It says it has found a list of matching results and stored them in a variable named &quot;searchResultsList&quot; inside its instance. You can get it from there. Also please hide the progress bar now [&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Контроллер&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Спасибо за ожидание &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;просмотра&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , я спросил &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;модель&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; о вашем поисковом запросе. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Он говорит, что нашел список совпадающих результатов и сохранил их в переменной с именем &quot;searchResultsList&quot; внутри своего экземпляра. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы можете получить это оттуда. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Также, пожалуйста, скройте индикатор прогресса сейчас [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b3983f1cbfa0649c26418f734f0aa0db26b0cf43" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Model&lt;/em&gt;: Hey &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;, let me check &amp;hellip; [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модель&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Эй, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ведущий&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Контроллер&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , дай мне проверить&amp;hellip; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="02d626ea6ebf4c56bf4694025a75488aeb3fb7b6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Model&lt;/em&gt;: I found a list for you, &lt;em&gt;Presenter&lt;/em&gt;, here it is in JSON &amp;ldquo;[{&quot;name&quot;:&quot;Piano Teacher&quot;,&quot;year&quot;:2001},{&quot;name&quot;:&quot;Piano&quot;,&quot;year&quot;:1993}]&amp;rdquo; [&lt;strong&gt;MVP&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модель&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Я нашел для вас список, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ведущий&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , вот он в формате JSON &amp;laquo;[{&quot; name &quot;:&quot; Piano Teacher &quot;,&quot; year &quot;: 2001}, {&quot; name &quot;:&quot; Piano &quot;,&quot; year &quot;: 1993} ] &amp;raquo;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0d97a0f826ee560a8f304f5306f99eaeaa2a6e7b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Model&lt;/em&gt;: There is some result available, &lt;em&gt;Controller&lt;/em&gt;. I have created a field variable in my instance and filled it with the result. It's name is &quot;searchResultsList&quot; [&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модель&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : есть некоторый результат, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;контроллер&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я создал переменную поля в моем экземпляре и заполнил ее результатом. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это имя &quot;searchResultsList&quot; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d1026820b8637534d3e5c387c58a14d35c2462bd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;: Thanks &lt;em&gt;View&lt;/em&gt;,&amp;hellip; meanwhile I&amp;rsquo;m looking up the search term on the &lt;em&gt;Model&lt;/em&gt;, please show him/her a progress bar [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Докладчик&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Спасибо, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;View&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ... пока я ищу поисковый запрос по &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;модели&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , пожалуйста, покажите ему / ей индикатор выполнения [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="082d8aab0e7355bce1f34dab98698fc6bde07fa5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;: Thanks for waiting &lt;em&gt;View&lt;/em&gt;, I found a list of matching results for you and arranged them in a presentable format: [&quot;Piano Teacher 2001&quot;,&quot;Piano 1993&quot;]. Please show it to the user in a vertical list. Also please hide the progress bar now [&lt;strong&gt;MVP&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ведущий&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Спасибо за ожидание &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;View&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , я нашел для вас список подходящих результатов и расположил их в презентабельном формате: [&quot;Piano Teacher 2001&quot;, &quot;Piano 1993&quot;]. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Пожалуйста, покажите это пользователю в вертикальном списке. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Также, пожалуйста, скройте индикатор прогресса сейчас [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6f82c8e2cb67e54724775d8eb3d6c9f1896844a8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;: Hey &lt;em&gt;Model&lt;/em&gt;, Do you have any match for this search term?: &amp;ldquo;piano&amp;rdquo; [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ведущий&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Контроллер&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Эй, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;модель&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , у тебя есть совпадение по этому поисковому запросу: &amp;laquo;фортепиано&amp;raquo; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="28df57da3132198350a38fc4a4fbecf2b3251bfa" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;: Hey &lt;em&gt;View&lt;/em&gt;, is there any search term on that page? [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ведущий&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Контролер&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Привет, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;вид&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , есть ли поисковый запрос на этой странице? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a100e4ba21f44ff5d7a8afa346a7c0b100dbb45" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Hey &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;, a User has just clicked on the search button, what shall I do? [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вид&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Эй, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ведущий&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Контроллер&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , Пользователь только что нажал на кнопку поиска, что мне делать? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f60206b05d7120cef3963992fd371e891b6b71e5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Ok, hold on a sec &amp;hellip; . [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вид&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Хорошо, подожди секунду ... &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82646e9011ff1bbbb2fc937dd69582393ccd56b3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Thank you &quot;Controller&quot; [&lt;strong&gt;MVC&lt;/strong&gt;]
(Now the &lt;em&gt;View&lt;/em&gt; is questioning itself: How should I present the results I get from the &lt;em&gt;Model&lt;/em&gt; to the user? Should the production year of the movie come first or last...? Should it be in a vertical or horizontal list? ...)</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вид&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Спасибо &amp;laquo;Controller&amp;raquo; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ] (Теперь &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;View&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; спрашивает себя: Как я должен представить результаты , которые &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;я получаю от &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;модели&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ? Чтобы пользователь должен год производства фильма пришел первый или последний ... Должен ли &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;это? быть в вертикальном или горизонтальном списке? ...)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9bb2ab8bc9f3d5a17d0e1d54691cea402a029772" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Thank you very much &lt;em&gt;Presenter&lt;/em&gt; [&lt;strong&gt;MVP&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Просмотр&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Большое спасибо &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ведущий&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d0e8539215ad94c8625100b6f44cd2b22541d2d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Who&amp;rsquo;s that? [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вид&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Кто это? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4138a03bcc30a87317df02669cb3494beed2d551" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Yes,&amp;hellip; here it is &amp;hellip; &amp;ldquo;piano&amp;rdquo; [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вид&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Да,&amp;hellip; вот оно&amp;hellip; &amp;laquo;пианино&amp;raquo; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e10b3aa3f3ca649918786d0ac1c826d2957375b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cons:&lt;/strong&gt;
    Bit complex and more work when implementing event bindings</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Минусы:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; немного сложнее и больше работы при реализации привязки событий&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a172147501124e022228068f6941ed911ff4b0b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cons:&lt;/strong&gt;
  Sometimes too much workload for Controllers, if try to render multiple views in same controller.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Минусы:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; иногда слишком большая рабочая нагрузка для контроллеров, если попытаться отобразить несколько представлений в одном контроллере.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="156a0cb080027a6ff6d0542b61a78c2d3d218d41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Controllers&lt;/strong&gt; for handling the user interface and application</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Контроллеры&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для обработки пользовательского интерфейса и приложения&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5e7f66068af168e4fc082d8dc01cb848b92a46b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC (Model View Controller)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC (модель просмотра контроллера)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="608a28a38a1824ff63d31dcd52439b72ddf63906" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC Pattern&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC Pattern&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d8bc00d019fd0a2f99238073aef9a2d4311db18e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;MVC&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f784873573ecd0397295d7afa60e2c45bfc5eb7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC&lt;/strong&gt; is a pattern for the architecture of a software application. It separate the application logic into three separate parts, promoting modularity and ease of collaboration and reuse. It also makes applications more flexible and welcoming to iterations.It separates an application into the following components:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - это образец архитектуры программного приложения. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Он разделяет логику приложения на три отдельные части, способствуя модульности и простоте совместной работы и повторного использования. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это также делает приложения более гибкими и приветливыми к итерациям. Оно разделяет приложение на следующие компоненты:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0a3d14652eb4344ee36a149498b3d4cb34487a0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVP (Model View Presenter)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP (ведущий модельного представления)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e9c824c237d99d678e99ddbc760e821f4ee9deb8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVP Pattern&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP Pattern&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f94476ec169490b00a853ca7228940e69d66e2c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVP&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;MVP&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3b088ec128ecc3c454c0327d87d024496300247c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Model-View-Controller&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Model-View-Controller&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b145e8a37e9509a1eda7ea52157c5fbe04d0896" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Model-View-Presenter&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Model-View-Presenter&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="48291acc891f6b0d52b30c232b8856c19deaefa7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Models&lt;/strong&gt; for handling data and business logic</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модели&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для обработки данных и бизнес-логики&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2033eab462915f68e8f6d27646bea6775e2f24d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Wikipedia states that &quot;&lt;em&gt;Each ADR action, however, is represented by separate classes or closures.&lt;/em&gt;&quot;. This is &lt;strong&gt;not&lt;/strong&gt; necessarily true. Several Actions can be in the same Controller, and the pattern is still the same.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Примечание:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Википедия утверждает, что &amp;laquo; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Каждое действие ADR, однако, представлено отдельными классами или замыканиями&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;raquo;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;не&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; обязательно правда. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Несколько действий могут быть в одном контроллере, и шаблон остается тем же.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b20bafb875f0d0613a38122493b645665486924b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passive View:&lt;/strong&gt; The View is as dumb as possible and contains almost zero logic. The Presenter is a middle man that talks to the View and the Model. The View and Model are completely shielded from one another. The Model may raise events, but the Presenter subscribes to them for updating the View. In Passive View there is no direct data binding, instead the View exposes setter properties which the Presenter uses to set the data. All state is managed in the Presenter and not the View.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Пассивное представление:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; представление настолько глупо, насколько это возможно, и содержит практически нулевую логику. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ведущий - посредник, который говорит с Видом и Моделью. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вид и Модель полностью защищены друг от друга. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модель может вызывать события, но докладчик подписывается на них для обновления представления. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В пассивном просмотре нет прямой привязки данных, вместо этого вид предоставляет свойства сеттера, которые Presenter использует для установки данных. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Все состояние управляется в Presenter, а не View.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34a5a86c8422d6c1567946698cd503d40967adf7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pros:&lt;/strong&gt;
    The view is having only  UI not any logics
    High level of testability</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Плюсы: в&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; представлении есть только пользовательский интерфейс, а не логика. Высокий уровень тестируемости.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e01f9565bf9defd5471edf6632bc1687db7b76d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pros:&lt;/strong&gt;
  Emphasis on Single Responsibility Principle
  High level of testability</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Плюсы:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; акцент на принципе единой ответственности Высокий уровень тестируемости&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="afb437faf2ed73f1dd6b1528a681eedce26744ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Supervising Controller:&lt;/strong&gt; The Presenter handles user gestures. The View binds to the Model directly through data binding. In this case it's the Presenter's job to pass off the Model to the View so that it can bind to it. The Presenter will also contain logic for gestures like pressing a button, navigation, etc.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Контролирующий контроллер:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ведущий обрабатывает жесты пользователя. Представление привязывается к модели напрямую через привязку данных. В этом случае работа докладчика заключается в том, чтобы передать модель представлению, чтобы она могла с ней связываться. Ведущий также будет содержать логику для таких жестов, как нажатие кнопки, навигация и т. Д.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e8e51727d49d4f883cc1a5618583a1730a3423cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Views&lt;/strong&gt; for handling graphical user interface objects and presentation</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Представления&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для обработки объектов графического интерфейса пользователя и представления&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="add0cc6a4a79ac095cd7622623adfbac7b346164" translate="yes" xml:space="preserve">
          <source>A concrete workflow of querying and displaying a list of users from a database could work like this:</source>
          <target state="translated">Конкретный рабочий процесс запроса и отображения списка пользователей из базы данных может работать подобным образом:</target>
        </trans-unit>
        <trans-unit id="1ee2af540a4b66e2e49393871786d070776e55fd" translate="yes" xml:space="preserve">
          <source>A great article on the differences is &lt;a href=&quot;http://www.infragistics.com/community/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;here&lt;/a&gt;.  Most notable is that MVC pattern has the Model updating the View.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Отличная статья о различиях &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.infragistics.com/community/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;здесь&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Наиболее примечательным является то, что шаблон MVC имеет модель, обновляющую представление.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7480795899c308541ed6768ff447271305dc003" translate="yes" xml:space="preserve">
          <source>A presenter is acting as a supervisory role in MVP which binding View events and business logic from models.</source>
          <target state="translated">Ведущий выступает в качестве контролирующей роли в MVP,которая связывает события View и бизнес-логику из моделей.</target>
        </trans-unit>
        <trans-unit id="f1f788974cbeb29212645f28d4349b64ddc799a8" translate="yes" xml:space="preserve">
          <source>Also worth remembering is that there are different types of MVPs as well. Fowler has broken the pattern into two - Passive View and Supervising Controller.</source>
          <target state="translated">Также стоит помнить,что существуют различные типы MVP.Фаулер разбил шаблон на два-Passive View и Supervising Controller.</target>
        </trans-unit>
        <trans-unit id="18f0b68ee7609a444a8d9a6033eb2ae6e263c776" translate="yes" xml:space="preserve">
          <source>And so, you can look on MVP as an evolution of MVC.</source>
          <target state="translated">Таким образом,вы можете рассматривать MVP как эволюцию MVC.</target>
        </trans-unit>
        <trans-unit id="07cdb35e36e9c49bf40e639443ef77de2afbca7d" translate="yes" xml:space="preserve">
          <source>Architecturally, MVP is Page Controller based approach where MVC is Front Controller based approach. 
That means that in MVP standard web form page life cycle is just enhanced by extracting the business logic from code behind. In other words, page is the one servicing http request. In other words, MVP IMHO is web form evolutionary type of enhancement.
MVC on other hand changes completely the game because the request gets intercepted by controller class before page is loaded, the business logic is executed there and then at the end result of controller processing the data just dumped to the page (&quot;view&quot;)
In that sense, MVC looks (at least to me) a lot to Supervising Controller flavor of MVP enhanced with routing engine</source>
          <target state="translated">С архитектурной точки зрения MVP-это подход,основанный на контроллере страницы,где MVC-подход,основанный на контроллере передней панели.Это означает,что в стандартной веб-форме MVP жизненный цикл страницы просто увеличивается за счет извлечения бизнес-логики из кода позади.Другими словами,страница-это та,которая обслуживает http запрос.Другими словами,MVP IMHO-это эволюционный тип усовершенствования веб-формы.MVC,напротив,полностью меняет игру,потому что запрос перехватывается классом контроллера перед загрузкой страницы,там выполняется бизнес-логика,а затем в конечном результате обработки контроллером данных,только что выброшенных на страницу (&quot;view&quot;).В этом смысле MVC много смотрит (по крайней мере,на меня)на аромат контроллера Supervising Controller расширенного с помощью движка маршрутизации MVP</target>
        </trans-unit>
        <trans-unit id="7900b35c8f8f0559bbd47d5e988ed320a97b09a9" translate="yes" xml:space="preserve">
          <source>As explained in some graphics above, there's a direct relation/link between the &lt;strong&gt;Model&lt;/strong&gt; and the &lt;strong&gt;View&lt;/strong&gt; in MVC.
An action is performed on the &lt;strong&gt;Controller&lt;/strong&gt;, which will execute an action on the &lt;strong&gt;Model&lt;/strong&gt;. That action in the &lt;strong&gt;Model&lt;/strong&gt;, &lt;strong&gt;will trigger a reaction&lt;/strong&gt; in the &lt;strong&gt;View&lt;/strong&gt;.
The &lt;strong&gt;View&lt;/strong&gt;, is always updated when the &lt;strong&gt;Model&lt;/strong&gt;'s state changes.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Как объяснено на некоторых графиках выше, существует прямая связь / связь между &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;моделью&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;представлением&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в MVC. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Действие выполняется на &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;контроллере&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , который будет выполнять действие на &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;модели&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это действие в &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;модели&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;будет вызывать реакцию&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;View&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;View&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , постоянно обновляется , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;когда &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;модель&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; изменяется состояние &amp;laquo;s.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a1a531af64742c2e545bfca92ada8c68ab0f969" translate="yes" xml:space="preserve">
          <source>Because we use web frameworks (&lt;em&gt;eg:. Laravel&lt;/em&gt;) that still use the same naming conventions (&lt;em&gt;model-view-controller&lt;/em&gt;), we tend to think that it must be MVC, but it's actually something else.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Поскольку мы используем веб-фреймворки ( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;например, Laravel&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), которые все еще используют те же соглашения об именах ( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;модель-представление-контроллер&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), мы склонны думать, что это должен быть MVC, но на самом деле это что-то другое.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c683c3c42c4cd8715c9521a1ca053a3971db3040" translate="yes" xml:space="preserve">
          <source>Both are patterns trying to separate presentation and business logic, decoupling business logic from UI aspects</source>
          <target state="translated">Обе модели пытаются отделить презентацию от бизнес-логики,отделяя бизнес-логику от аспектов пользовательского интерфейса.</target>
        </trans-unit>
        <trans-unit id="c6fd44fcf9a87b472af5d303c81d0de0302f74aa" translate="yes" xml:space="preserve">
          <source>Both of them enable TDD and have downsides and upsides.</source>
          <target state="translated">Оба они включают TDD и имеют отрицательные и положительные стороны.</target>
        </trans-unit>
        <trans-unit id="a2fe14e6a8b913548e0224385c96a940a1ab537f" translate="yes" xml:space="preserve">
          <source>Both of these frameworks aim to seperate concerns - for instance, interaction with a data source (model), application logic (or turning this data into useful information) (Controller/Presenter) and display code (View).  In some cases the model can also be used to turn a data source into a higher level abstraction as well.  A good example of this is the &lt;a href=&quot;http://blog.wekeroad.com/mvc-storefront/&quot;&gt;MVC Storefront project&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Обе эти структуры стремятся разделить проблемы - например, взаимодействие с источником данных (модель), логику приложения (или превращение этих данных в полезную информацию) (Controller / Presenter) и код отображения (View). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В некоторых случаях модель также может использоваться для превращения источника данных в абстракцию более высокого уровня. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Хорошим примером этого является проект &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blog.wekeroad.com/mvc-storefront/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC Storefront&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4883d883e11f6be5048f16fc28a04c5642fc6323" translate="yes" xml:space="preserve">
          <source>Both presentation patterns.  They separate the dependencies between a Model (think Domain objects), your screen/web page (the View), and how your UI is supposed to behave (Presenter/Controller)</source>
          <target state="translated">Оба шаблона презентации.Они разделяют зависимости между Моделью (думаю,объектами домена),вашей страницей скринсвеба (Вид),и тем,как должен вести себя ваш пользовательский интерфейс (PresenterController).</target>
        </trans-unit>
        <trans-unit id="7db23f637ba3aad5f36394f1c2f821f44340dc90" translate="yes" xml:space="preserve">
          <source>Can be responsible for determining which view to display</source>
          <target state="translated">Может отвечать за определение того,какой вид отображения</target>
        </trans-unit>
        <trans-unit id="f59f787c0c1f783c7964e0e7231384d7c6999d75" translate="yes" xml:space="preserve">
          <source>Can be responsible for determining which view to display (Front Controller Pattern)</source>
          <target state="translated">Может отвечать за определение того,какой вид отображения (схема фронтального контроллера).</target>
        </trans-unit>
        <trans-unit id="7375c53b3b9ebcc70a87ca2788a6bb5126518c27" translate="yes" xml:space="preserve">
          <source>Con: more work (for example all the setter properties) as you are doing all the data binding yourself.</source>
          <target state="translated">Con:больше работы (например,все свойства сеттера)по мере того,как вы сами выполняете привязку всех данных.</target>
        </trans-unit>
        <trans-unit id="f7d3bb72a6caa8d05eddbf6498df612a214d40a0" translate="yes" xml:space="preserve">
          <source>Con: there's less testable surface (because of data binding), and there's less encapsulation in the View since it talks directly to the Model.</source>
          <target state="translated">Con:меньше тестируемой поверхности (из-за привязки данных),и меньше инкапсуляции во Видении,так как оно напрямую взаимодействует с Моделью.</target>
        </trans-unit>
        <trans-unit id="eab32874de4f2687be749f41491e594cb1d82fc7" translate="yes" xml:space="preserve">
          <source>Conclusion - MVP and MVC are both decouple of UI patterns, but MVP usually uses a bindings framework which is MVC underneath. THUS MVP is at a higher architectural level than MVC and a wrapper pattern above of MVC.</source>
          <target state="translated">Вывод-MVP и MVC являются развязкой шаблонов пользовательского интерфейса,но MVP обычно использует фреймворк привязки,под которым находится MVC.Это MVP находится на более высоком архитектурном уровне,чем MVC,а оберточная структура выше MVC.</target>
        </trans-unit>
        <trans-unit id="80ec6fa88a532e57d985374bcc69a69ba3949d2c" translate="yes" xml:space="preserve">
          <source>Consider &lt;a href=&quot;https://lostechies.com/derekgreer/2007/08/25/interactive-application-architecture/&quot;&gt;this&lt;/a&gt; highly exciting article that comprehensively lists a number of these differing implementations. 
You may note that they're all basically doing the same thing but slightly differently.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Рассмотрим &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://lostechies.com/derekgreer/2007/08/25/interactive-application-architecture/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;эту&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; чрезвычайно захватывающую статью, в которой подробно перечислен ряд этих различных реализаций. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы можете заметить, что все они в основном делают одно и то же, но немного по-другому.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0370c4db503c7f19467ccbfbd5f1b2695c83c0c8" translate="yes" xml:space="preserve">
          <source>Controller are based on behaviors and can be shared across views</source>
          <target state="translated">Контроллер основан на поведении и может быть использован для обмена мнениями.</target>
        </trans-unit>
        <trans-unit id="2cab38a568d9155fb3cc8caa5166e589d7c1e307" translate="yes" xml:space="preserve">
          <source>Controller is the initiator and it decides which view to render.</source>
          <target state="translated">Контроллер является инициатором и решает,какой вид визуализировать.</target>
        </trans-unit>
        <trans-unit id="0f0cac48c1eaf1076d16c7f442e6fb6f16e850e1" translate="yes" xml:space="preserve">
          <source>Decision on how to choose one of them IMHO should be based on how much time one invested in ASP NET web form type of web development. 
If one would consider himself good in web forms, I would suggest MVP. 
If one would feel not so comfortable in things such as page life cycle etc MVC could be a way to go here.</source>
          <target state="translated">Решение о выборе одного из них IMHO должно быть основано на количестве времени,вложенного в веб-форму ASP NET типа веб-разработки.Если бы человек считал себя хорошим в веб-формах,я бы предложил MVP.Если вы чувствуете себя не очень комфортно в таких вещах,как жизненный цикл страницы и т.д.,то MVC может стать для вас подходящим вариантом.</target>
        </trans-unit>
        <trans-unit id="a2b447c22214c841c979d8d26240ed2438d50a64" translate="yes" xml:space="preserve">
          <source>Easier to unit test because interaction with the view is through an interface</source>
          <target state="translated">Проще в модульном тестировании,потому что взаимодействие с видом осуществляется через интерфейс.</target>
        </trans-unit>
        <trans-unit id="f68548bd19b6038792cfbed16937610ee0a1067c" translate="yes" xml:space="preserve">
          <source>For more &lt;a href=&quot;http://geekswithblogs.net/dlussier/archive/2009/11/21/136454.aspx&quot;&gt;Reference&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для получения дополнительной &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://geekswithblogs.net/dlussier/archive/2009/11/21/136454.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ссылки&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eed30dbb7348a447a272cc33a07f00c86a07d0c3" translate="yes" xml:space="preserve">
          <source>Having said that, ASP.NET MVC is by these definitions an MVP framework because the Controller accesses the Model to populate the View which is meant to have no logic (just  displays the variables provided by the Controller).</source>
          <target state="translated">Сказав это,ASP.NET MVC по этим определениям является MVP фреймворком,потому что Контроллер обращается к Модели,чтобы заполнить представление,которое не имеет логики (просто отображает переменные,предоставленные Контроллером).</target>
        </trans-unit>
        <trans-unit id="10718b2650bdd7d40cdaf7c2f35682e59070f0d1" translate="yes" xml:space="preserve">
          <source>Here are illustrations which represent communication flow</source>
          <target state="translated">Ниже приведены иллюстрации,представляющие коммуникационный поток</target>
        </trans-unit>
        <trans-unit id="ab0f6e9f65e0dabff8c8e9d94199d95b90198921" translate="yes" xml:space="preserve">
          <source>Here are the key differences between
  the patterns:</source>
          <target state="translated">Вот основные различия между шаблонами:</target>
        </trans-unit>
        <trans-unit id="23fb19bb0fae2989c392271f0e4532d29c366749" translate="yes" xml:space="preserve">
          <source>Here's yet another blog post link giving a little bit more details on this topic</source>
          <target state="translated">Вот еще одна ссылка на пост в блоге,дающая немного больше подробностей по этой теме.</target>
        </trans-unit>
        <trans-unit id="a90c388214ce036e2cda7ca7a1beee59ef3deae1" translate="yes" xml:space="preserve">
          <source>How are they different?</source>
          <target state="translated">Чем они отличаются?</target>
        </trans-unit>
        <trans-unit id="697947ce28dd90b01db12e3c405bdc08838f4195" translate="yes" xml:space="preserve">
          <source>How are they similar?</source>
          <target state="translated">Как они похожи?</target>
        </trans-unit>
        <trans-unit id="7c5691bc0007eee09d5e34fc2592d5bd59ebb6ad" translate="yes" xml:space="preserve">
          <source>I blogged about this a while back, quoting on &lt;a href=&quot;http://blogs.infragistics.com/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;Todd Snyder's excellent post on the difference between the two&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Некоторое время назад я писал об этом, цитируя &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.infragistics.com/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;превосходный пост Тодда Снайдера о разнице между ними&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="25982e196977ef10b7d392b37ae8877db51a1842" translate="yes" xml:space="preserve">
          <source>I find it unfortunate that people are still preaching this as a pattern (View in charge) as opposed to an anti-pattern as it contradicts &quot;It's just a view&quot; (Pragmatic Programmer). &quot;It's just a view&quot; states that the final view shown to the user is a secondary concern of the application. Microsoft's MVP pattern renders re-use of Views much more difficult and &lt;em&gt;conveniently&lt;/em&gt; excuses Microsoft's designer from encouraging bad practice.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я сожалею, что люди все еще проповедуют это как шаблон (&amp;laquo;Представление во главе&amp;raquo;) в противоположность анти-шаблону, поскольку он противоречит &amp;laquo;Это просто представление&amp;raquo; (Pragmatic Programmer). &amp;laquo;Это просто представление&amp;raquo; гласит, что окончательное представление, отображаемое для пользователя, является второстепенной задачей приложения. Шаблон MVP от Microsoft значительно затрудняет повторное использование Views и &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;удобно&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; освобождает дизайнера Microsoft от поощрения плохой практики.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="617c09cbfe565552af42069b17032c053c0073d9" translate="yes" xml:space="preserve">
          <source>I have also blogged about the Model-View-ViewModel pattern in the context of Silverlight over at &lt;em&gt;&lt;a href=&quot;http://jonas.follesoe.no/2008/07/19/youcard-re-visited-implementing-the-viewmodel-pattern&quot;&gt;YouCard Re-visited: Implementing the ViewModel pattern&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я также писал в блоге о модели Model-View-ViewModel в контексте Silverlight на &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;a href=&quot;http://jonas.follesoe.no/2008/07/19/youcard-re-visited-implementing-the-viewmodel-pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;YouCard. Повторное посещение: Реализация шаблона ViewModel&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="52cf88109ce249187c1207e73bc21232ed04270e" translate="yes" xml:space="preserve">
          <source>I have used both MVP and MVC and although we as developers tend to focus on the technical differences of both patterns the point for MVP in IMHO is much more related to ease of adoption than anything else.</source>
          <target state="translated">Я использовал и MVP,и MVC,и хотя мы,как разработчики,склонны сосредотачиваться на технических различиях обоих паттернов,точка зрения MVP в IMHO гораздо больше связана с простотой принятия,чем с чем-либо другим.</target>
        </trans-unit>
        <trans-unit id="bb50a9cb6d28245cb89b00d7267f2ac0489d11de" translate="yes" xml:space="preserve">
          <source>I hope this helps better.</source>
          <target state="translated">Надеюсь,это поможет лучше.</target>
        </trans-unit>
        <trans-unit id="042f19d6cbe76666e2c4e9ce7cc57222d9fa609e" translate="yes" xml:space="preserve">
          <source>I leave here a link to a series of articles a friend of mine has published about MVP and MVC.</source>
          <target state="translated">Я оставляю здесь ссылку на серию статей,опубликованных моим другом о MVP и MVC.</target>
        </trans-unit>
        <trans-unit id="cc0f2d6d3263af56b02cbd8885ff46c2faad91fe" translate="yes" xml:space="preserve">
          <source>I personally think MVP has only been recently re-introduced as a catchy term to either reduce arguments between semantic bigots who argue whether something is truly MVC or not or to justify Microsofts Rapid Application Development tools. Neither of these reasons in my books justify its existence as a separate design pattern.</source>
          <target state="translated">Лично я думаю,что MVP только недавно был вновь введен как броский термин,чтобы либо уменьшить споры между семантическими фанатиками,которые спорят,действительно ли что-то MVC или нет,либо оправдать средства быстрой разработки приложений Microsofts Rapid.Ни одна из этих причин в моих книгах не оправдывает его существование в качестве отдельного шаблона проектирования.</target>
        </trans-unit>
        <trans-unit id="b13c436ba56a339968c458a3f31dad8b43483d6d" translate="yes" xml:space="preserve">
          <source>I think the best resource I've found to UI architecture is the series of blog posts done by Jeremy Miller over at &lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/07/25/the-build-your-own-cab-series-table-of-contents.aspx&quot;&gt;The Build Your Own CAB Series Table of Contents&lt;/a&gt;. He covered all the flavors of MVP and showed C# code to implement them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я думаю, что лучший ресурс, который я нашел в архитектуре пользовательского интерфейса, - это серия постов в блоге, сделанных Джереми Миллером на &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/07/25/the-build-your-own-cab-series-table-of-contents.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;оглавлении &amp;laquo;Построй свою собственную серию CAB&amp;raquo;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Он рассмотрел все варианты MVP и показал код C # для их реализации.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5c241da24a69fbe9adc16bb3eef4db68da44938c" translate="yes" xml:space="preserve">
          <source>I think this image by Erwin Vandervalk (and the accompanying &lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;article&lt;/a&gt;) is the best explanation of MVC, MVP, and MVVM, their similarities, and their differences. The &lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;article&lt;/a&gt; does not show up in search engine results for queries on &quot;MVC, MVP, and MVVM&quot; because the title of the article does not contain the words &quot;MVC&quot; and &quot;MVP&quot;; but it is the best explanation, I think.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я думаю, что это изображение Эрвина Вандервалька (и сопровождающая &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;статья&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) является лучшим объяснением MVC, MVP и MVVM, их сходства и различий. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Статья&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не отображается в результатах поиска по запросам на &amp;laquo;MVC, MVP и MVVM&amp;raquo; , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;потому что название статьи не содержит слова &amp;laquo;MVC&amp;raquo; и &amp;laquo;MVP&amp;raquo;; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;но это лучшее объяснение, я думаю.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="922f8a21f3de48e180ca529ef6809b6f6eace184" translate="yes" xml:space="preserve">
          <source>IMO, MVP is an improved version of MVC where you basically separate the concern of what you're gonna show (the data) from how you're gonna show (the view). The presenter includes kinda the business logic of your UI, implicitly imposes what data should be presented and gives you a list of dumb view models. And when the time comes to show the data, you simply plug your view (probably includes the same id's) into your adapter and set the relevant view fields using those view models with a minimum amount of code being introduced (just using setters). Its main benefit is you can test your UI business logic against many/various views like showing items in a horizontal list or vertical list.</source>
          <target state="translated">IMO,MVP является улучшенной версией MVC,где вы в основном отделяете заботу о том,что вы собираетесь показать (данные)от того,как вы собираетесь показать (вид).Докладчик включает в себя вроде как бизнес-логику вашего пользовательского интерфейса,неявно навязывает,какие данные должны быть представлены,и дает вам список немых моделей представления.И когда приходит время показать данные,вы просто подключаете ваше представление (вероятно,включает те же самые идентификаторы)к вашему адаптеру и устанавливаете соответствующие поля представления,используя эти модели представления с минимальным количеством вводимого кода (просто используя сеттеры).Его основное преимущество заключается в том,что вы можете протестировать вашу бизнес-логику пользовательского интерфейса против множества разнообразных представлений,таких как показ элементов в горизонтальном или вертикальном списке.</target>
        </trans-unit>
        <trans-unit id="f9cccd67f2542ff5fc1b213379d523acfb8fc112" translate="yes" xml:space="preserve">
          <source>If I&amp;rsquo;m working in a team that already as a good background on web forms development style it&amp;rsquo;s far easier to introduce MVP than MVC. I would say that MVP in this scenario is a quick win.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если я работаю в команде, которая уже хорошо разбирается в стиле разработки веб-форм, гораздо проще представить MVP, чем MVC. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я бы сказал, что MVP в этом сценарии - быстрая победа.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6558f723fbe4fed38574748b2f5302f711c7b446" translate="yes" xml:space="preserve">
          <source>If you want to see a sample with simple implementation please check
  &lt;a href=&quot;https://github.com/rahulabrol/Messanger&quot;&gt;this&lt;/a&gt; GitHub post</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если вы хотите увидеть пример с простой реализацией, пожалуйста, проверьте &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/rahulabrol/Messanger&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;этот&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; пост на GitHub&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ff98f23bff189ce3ed1260b7af476ccdf802ce2b" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;MVP&lt;/strong&gt;, the Presenter contains the UI business logic for the View. All invocations from the View delegate directly to Presenter. The Presenter is also decoupled directly from the View and talks to it through an interface. This is to allow mocking of the View in a unit test. One common attribute of MVP is that there has to be a lot of two-way dispatching. For example, when someone clicks the &quot;Save&quot; button, the event handler delegates to the Presenter's &quot;OnSave&quot; method. Once the save is completed, the Presenter will then call back the View through its interface so that the View can display that the save has completed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Presenter содержит бизнес-логику пользовательского интерфейса для представления. Все вызовы из View делегируются непосредственно в Presenter. Ведущий также отделен непосредственно от представления и общается с ним через интерфейс. Это делается для того, чтобы разрешить насмешку над видом в модульном тесте. Одним из общих атрибутов MVP является то, что должно быть много двусторонней диспетчеризации. Например, когда кто-то нажимает кнопку &amp;laquo;Сохранить&amp;raquo;, обработчик события делегирует методу &amp;laquo;OnSave&amp;raquo; докладчика. Как только сохранение завершено, докладчик затем перезвонит представлению через его интерфейс, чтобы представление могло отобразить, что сохранение завершено.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4898bac1b812a0b26c28dd47383904e1b95ee622" translate="yes" xml:space="preserve">
          <source>In MVC, View has the UI part, controller is the mediator between view and model &amp;amp; model contains the business logic .</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В MVC View имеет часть пользовательского интерфейса, контроллер является посредником между представлением и моделью, а модель содержит бизнес-логику.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="caecc0e801c5a72f71f7c171cabd84f782e9cfa3" translate="yes" xml:space="preserve">
          <source>In MVC, we talk through interfaces (boundaries) to glue different layers. A controller is a plug-in to our architecture but it has no such a restriction to impose what to show. In that sense, MVP is kind of an MVC with a concept of views being pluggable to the controller over adapters.</source>
          <target state="translated">В MVC мы говорим через интерфейсы (границы)для склеивания различных слоев.Контроллер-это плагин к нашей архитектуре,но у него нет такого ограничения на то,что показывать.В этом смысле MVP-это что-то вроде MVC с концепцией подключения представлений к контроллеру через адаптеры.</target>
        </trans-unit>
        <trans-unit id="4aa9d0ac4aa811604ba2904ebe7265f0d26b5e42" translate="yes" xml:space="preserve">
          <source>In MVP the view draws data from the presenter which draws and prepares/normalizes data from the model while in MVC the controller draws data from the model and set, by push in the view.</source>
          <target state="translated">В MVP представление черпает данные из ведущего,который черпает и подготавливаетснормализует данные из модели,в то время как в MVC контроллер черпает данные из модели и устанавливает,путем нажатия на представление.</target>
        </trans-unit>
        <trans-unit id="ad4b0748ab0354e78964e5f9aeeced463b697404" translate="yes" xml:space="preserve">
          <source>In MVP you can have a single view working with multiple types of presenters and a single presenter working with different multiple views.</source>
          <target state="translated">В MVP вы можете иметь один вид,работающий с несколькими типами ведущих,и один ведущий,работающий с разными множественными видами.</target>
        </trans-unit>
        <trans-unit id="b9a8f65c70c9330d2e4e7ba75b8180257b99ea2d" translate="yes" xml:space="preserve">
          <source>In MVP, View contains both UI and implementation of the presenter since here the presenter is just an interface &amp;amp; model is the same i.e contains business logic .</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В MVP View содержит как пользовательский интерфейс, так и реализацию презентатора, поскольку здесь презентатор представляет собой просто интерфейс, а модель - то же самое, то есть содержит бизнес-логику.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="753aca984485212d4969261a40a0ecdd95c56195" translate="yes" xml:space="preserve">
          <source>In case you're interested, I have been writing a series of articles dealing with app architectural patterns (MVC, MVP, MVVP, clean architecture, ...) accompanied by a Github repo &lt;a href=&quot;http://www.digigene.com/android-architecture-wolfkcats&quot;&gt;here&lt;/a&gt;. Even though the sample is written for android, the underlying principles can be applied to any medium.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В случае , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;если вы заинтересованы, я пишу серию статей , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;посвященных приложения архитектурных паттернов (MVC, MVP, MVVP, чистая архитектуру, ...) сопровождается Github репо &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.digigene.com/android-architecture-wolfkcats&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;здесь&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Несмотря на то, что образец написан для Android, основные принципы могут быть применены к любому носителю.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9dd58705a824f4c7cd55ad599bf82c53e303f903" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;MVC&lt;/strong&gt;, the Controller is responsible for determining which View to display in response to any action including when the application loads. This differs from MVP where actions route through the View to the Presenter. In MVC, every action in the View correlates with a call to a Controller along with an action. In the web each action involves a call to a URL on the other side of which there is a Controller who responds. Once that Controller has completed its processing, it will return the correct View. The sequence continues in that manner throughout the life of the application:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; контроллер отвечает за определение того, какое представление отображать в ответ на любое действие, в том числе при загрузке приложения. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это отличается от MVP, где действия направляются через представление к докладчику. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В MVC каждое действие в представлении соотносится с вызовом контроллера и действием. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В сети каждое действие включает в себя вызов URL-адреса, на другой стороне которого находится контроллер, который отвечает. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Как только этот Контроллер завершит свою обработку, он вернет правильный Вид. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Последовательность продолжается таким образом на протяжении всей жизни приложения:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9aa9b9e508319acacb670f8c7e75d029ce538b29" translate="yes" xml:space="preserve">
          <source>In those frameworks, the UI/HTML5/XAML, is aware of what property of the presenter each UI element displays, so when you bind a view to a presenter, the view looks for the properties and knows how to draw data from them and how to set them when a value is changed in the UI by the user.</source>
          <target state="translated">В этих фреймворках UIHTML5XAML знает,какое свойство отображает каждый элемент пользовательского интерфейса,поэтому при привязке представления к ведущему,представление ищет свойства и знает,как отрисовывать данные из них и как устанавливать их,когда значение изменяется пользователем в пользовательском интерфейсе.</target>
        </trans-unit>
        <trans-unit id="c01cde1f4d24cec2a304f26abfafadee545f5a75" translate="yes" xml:space="preserve">
          <source>Instead, have a look at &lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;Action-Domain-Responder&lt;/a&gt;.
In ADR, the &lt;strong&gt;Controller&lt;/strong&gt; gets an &lt;strong&gt;Action&lt;/strong&gt;, which will perform an operation in the &lt;strong&gt;Model/Domain&lt;/strong&gt;. So far, the same.
The difference is, it then collects that operation's response/data, and pass it to a &lt;strong&gt;Responder&lt;/strong&gt; (&lt;em&gt;eg:. &lt;code&gt;view()&lt;/code&gt;&lt;/em&gt;) for rendering.
When a new action is requested on the same component, the &lt;strong&gt;Controller&lt;/strong&gt; is called again, and the cycle repeats itself.
In ADR, there's &lt;strong&gt;no connection&lt;/strong&gt; between the Model/Domain and the View (&lt;em&gt;Reponser's response&lt;/em&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вместо этого взгляните на &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Action-Domain-Responder&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . В ADR &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Контроллер&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; получает &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;действие&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , которое будет выполнять операцию в &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;модели / домене&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Пока что тоже самое. Разница в том, что он затем собирает ответ / данные этой операции и передает их &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ответчику&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;например, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;view()&lt;/code&gt; &lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) для рендеринга. Когда новое действие запрашивается в том же компоненте, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;контроллер&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вызывается снова, и цикл повторяется. В ADR &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;нет связи&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; между моделью / доменом и представлением ( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ответ Reponser&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6bf0642feeed5b037f39e4a3637221ff5a6fd72a" translate="yes" xml:space="preserve">
          <source>It is the best explanation on the web I could find.</source>
          <target state="translated">Это лучшее объяснение в сети,которое я смог найти.</target>
        </trans-unit>
        <trans-unit id="c0e59ffc55e85fc20e92dbecba004d8fe98d71a0" translate="yes" xml:space="preserve">
          <source>MVC = Model-View-Controller</source>
          <target state="translated">MVC=Модель-Вид-контроллер</target>
        </trans-unit>
        <trans-unit id="8a43b3b072a5b6199b18f294ed1df5f2594545ac" translate="yes" xml:space="preserve">
          <source>MVC is great, but the problem is that usually its controller per view. Controller A knows how to set fields of View A. If now, you want View A to display data of model B, you need Controller A to know model B, or you need Controller A to receive an object with an interface - which is like MVP only without the bindings, or you need to rewrite the UI set code in Controller B.</source>
          <target state="translated">MVC это здорово,но проблема в том,что обычно его контроллер на вид.Контроллер A знает,как устанавливать поля вида A.Если теперь вы хотите,чтобы вид A отображал данные модели B,вам нужен контроллер A,чтобы знать модель B,или вам нужен контроллер A,чтобы получать объект с интерфейсом-который похож на MVP только без привязки,или вам нужно переписать код набора пользовательского интерфейса в контроллере B.</target>
        </trans-unit>
        <trans-unit id="1a1de6da1e685269460dfb990c3cd363bf1bf525" translate="yes" xml:space="preserve">
          <source>MVC stands for Model-View-Controller. Controller is responsible for creating models and rendering views with binding models.</source>
          <target state="translated">MVC означает Model-View-Controller (Модель-Контроллер Вида).Контроллер отвечает за создание моделей и рендеринг представлений с привязкой моделей.</target>
        </trans-unit>
        <trans-unit id="2d7472c153b90e4439c448216cb3bca8ac60031b" translate="yes" xml:space="preserve">
          <source>MVC: the controller is in charge.</source>
          <target state="translated">MVC:контроллер заряжен.</target>
        </trans-unit>
        <trans-unit id="666e13a62670ef5dd9c954b6ed8731d40b354b51" translate="yes" xml:space="preserve">
          <source>MVP = Model-View-Presenter</source>
          <target state="translated">MVP=ведущий просмотра модели</target>
        </trans-unit>
        <trans-unit id="423ff2c6133e25b75601b0a4f1c6920983fb465b" translate="yes" xml:space="preserve">
          <source>MVP designs have the Presenter access the model and interact with the view.</source>
          <target state="translated">Проекты MVP имеют доступ ведущего к модели и взаимодействуют с видом.</target>
        </trans-unit>
        <trans-unit id="0a13bcb6d62230c45fda925e5f2e54e195a1d9eb" translate="yes" xml:space="preserve">
          <source>MVP is &lt;em&gt;not&lt;/em&gt; necessarily a scenario where the View is in charge (see Taligent's MVP for example).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP - это &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;не&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; обязательно сценарий, когда представление является ответственным (см., Например, MVP Taligent).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="153e761e5f1c4625aab1927ce95ce39495fe46af" translate="yes" xml:space="preserve">
          <source>MVP stands for Model - View- Presenter. This came to a picture in early 2007 where Microsoft introduced Smart Client windows applications.</source>
          <target state="translated">MVP означает Модель-Вид-Ведущий.Это пришло к картине в начале 2007 года,когда компания Microsoft представила оконные приложения Smart Client.</target>
        </trans-unit>
        <trans-unit id="593ddaf257dbd344ef6de1239417c3856337fd25" translate="yes" xml:space="preserve">
          <source>MVP tends to be a very natural pattern for achieving separated presentation in Web Forms. The reason is that the View is always created first by the ASP.NET runtime. You can &lt;a href=&quot;http://www.codeplex.com/websf/Wiki/View.aspx?title=MVPDocumentation&amp;amp;referringTitle=bundles&quot;&gt;find out more about both variants&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP имеет тенденцию быть очень естественной моделью для достижения отдельного представления в веб-формах. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Причина в том, что представление всегда сначала создается средой выполнения ASP.NET. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы можете &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.codeplex.com/websf/Wiki/View.aspx?title=MVPDocumentation&amp;amp;referringTitle=bundles&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;узнать больше об обоих вариантах&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8adb32e4dfc525bd9ed5519dd43628cdd9231191" translate="yes" xml:space="preserve">
          <source>MVP usually uses some sort of a binding framework, such as Microsoft WPF binding framework or various binding frameworks for HTML5 and Java.</source>
          <target state="translated">MVP обычно использует какой-нибудь связующий фреймворк,например,Microsoft WPF связующий фреймворк или различные связующие фреймворки для HTML5 и Java.</target>
        </trans-unit>
        <trans-unit id="025ddd6c85eddf626d74a15567c91fb5750cadaf" translate="yes" xml:space="preserve">
          <source>MVP: the view is in charge.</source>
          <target state="translated">MVP:вид во главе.</target>
        </trans-unit>
        <trans-unit id="9a44ef615916a4fab8a8e8aac039ef0308295c8d" translate="yes" xml:space="preserve">
          <source>Model-View-Controller</source>
          <target state="translated">Model-View-Controller</target>
        </trans-unit>
        <trans-unit id="4d0814805419c9f47f02998803c65a41d83dd0cf" translate="yes" xml:space="preserve">
          <source>Model-View-Presenter</source>
          <target state="translated">Model-View-Presenter</target>
        </trans-unit>
        <trans-unit id="f9731cd9f1b7c0cad88b11ca9a0dfbb97b762976" translate="yes" xml:space="preserve">
          <source>My experience tells me that moving  a team from web forms to MVP and then from MVP to MVC is relatively easy; moving from web forms to MVC is more difficult.</source>
          <target state="translated">Мой опыт подсказывает мне,что перевести команду из веб-форм в MVP,а затем из MVP в MVC относительно просто;перейти из веб-форм в MVC сложнее.</target>
        </trans-unit>
        <trans-unit id="9a7dad07badf4ed27fd0ee61735b1ffe44f86426" translate="yes" xml:space="preserve">
          <source>My humble short view: MVP is for large scales, and MVC for tiny scales. With MVC, I sometime feel the V and the C may be seen a two sides of a single indivisible component rather directly bound to M, and one inevitably falls to this when going down‑to shorter scales, like UI controls and base widgets. At this level of granularity, MVP makes little sense. When one on the contrary go to larger scales, proper interface becomes more important, the same with unambiguous assignment of responsibilities, and here comes MVP.</source>
          <target state="translated">Мой скромный короткий взгляд:MVP-для больших весов,а MVC-для крошечных.С MVC,я иногда чувствую,что V и C можно увидеть две стороны одного неделимого компонента довольно непосредственно связаны с M,и один неизбежно падает на это при переходе к более коротким масштабам,как управление пользовательским интерфейсом и базовые виджеты.На этом уровне детализации MVP имеет мало смысла.Когда один,напротив,переходит на большие масштабы,правильный интерфейс становится более важным,то же самое с однозначным распределением обязанностей,и вот приходит MVP.</target>
        </trans-unit>
        <trans-unit id="7d6398b6228fc97ad6cbcd6c4e420ab540fdc39c" translate="yes" xml:space="preserve">
          <source>On the other hand, this scale rule of a thumb, may weight very little when the platform characteristics favours some kind of relations between the components, like with the web, where it seems to be easier to implement MVC, more than MVP.</source>
          <target state="translated">С другой стороны,это эмпирическое правило шкалы,может очень мало весить,когда характеристики платформы благоприятствуют неким отношениям между компонентами,например,с сетью,где,кажется,легче реализовать MVC,чем MVP.</target>
        </trans-unit>
        <trans-unit id="8f3b62032d27bb14f7876f375a718a8b1bd1b65d" translate="yes" xml:space="preserve">
          <source>One other big difference about MVC is that the View does not directly bind to the Model. The view simply renders, and is completely stateless. In implementations of MVC the View usually will not have any logic in the code behind. This is contrary to MVP where it is absolutely necessary because, if the View does not delegate to the Presenter, it will never get called.</source>
          <target state="translated">Еще одно большое отличие MVC в том,что View не привязывается напрямую к Модели.Вид просто визуализирует,и является полностью апатридом.В реализациях MVC View обычно не имеет никакой логики в коде.Это противоречит MVP,где это абсолютно необходимо,потому что,если Вид не делегируется ведущему,он никогда не будет вызван.</target>
        </trans-unit>
        <trans-unit id="9d85e7cc0708b67b551018cc07382f91d292f50e" translate="yes" xml:space="preserve">
          <source>One other pattern to look at is the &lt;strong&gt;Presentation Model&lt;/strong&gt; pattern. In this pattern there is no Presenter. Instead the View binds directly to a Presentation Model. The Presentation Model is a Model crafted specifically for the View. This means this Model can expose properties that one would never put on a domain model as it would be a violation of separation-of-concerns. In this case, the Presentation Model binds to the domain model, and may subscribe to events coming from that Model. The View then subscribes to events coming from the Presentation Model and updates itself accordingly. The Presentation Model can expose commands which the view uses for invoking actions. The advantage of this approach is that you can essentially remove the code-behind altogether as the PM completely encapsulates all of the behaviour for the view. This pattern is a very strong candidate for use in WPF applications and is also called &lt;a href=&quot;http://msdn.microsoft.com/en-us/magazine/dd419663.aspx&quot;&gt;Model-View-ViewModel&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Еще один шаблон, на который стоит обратить внимание, - это &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;модель представления.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;шаблон. В этом шаблоне нет предъявителя. Вместо этого представление напрямую связывается с моделью представления. Модель презентации - это модель, созданная специально для просмотра. Это означает, что эта Модель может раскрывать свойства, которые никогда не наденут на модель предметной области, поскольку это будет нарушением разделения интересов. В этом случае модель представления связывается с моделью предметной области и может подписываться на события, поступающие из этой модели. Затем представление подписывается на события, поступающие из модели презентации, и обновляется соответствующим образом. Модель представления может предоставлять команды, которые представление использует для вызова действий. Преимущество этого подхода состоит в том, что вы можете по существу полностью удалить выделенный код, поскольку PM полностью инкапсулирует все поведение представления.Этот шаблон является очень сильным кандидатом для использования в приложениях WPF и также называется&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/magazine/dd419663.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модель-Вид-ВидМодель&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed38d909f58dd9ee16876dc1d8c2b62c011b11f7" translate="yes" xml:space="preserve">
          <source>Presentation Model</source>
          <target state="translated">Презентационная модель</target>
        </trans-unit>
        <trans-unit id="ea4498215d645ab272e3b3846196223e2f0768f4" translate="yes" xml:space="preserve">
          <source>Pro: by leveraging databinding the amount of code is reduced.</source>
          <target state="translated">Pro:за счет использования базы данных уменьшается количество кода.</target>
        </trans-unit>
        <trans-unit id="2f71b21ad625425383fdafcef7b1c6b4b973b516" translate="yes" xml:space="preserve">
          <source>Pro: maximum testability surface; clean separation of the View and Model</source>
          <target state="translated">Pro:максимальная поверхность испытания;чистое разделение вида и модели.</target>
        </trans-unit>
        <trans-unit id="c61fe2f6ea22910c80db69971f026c3b36b9e979" translate="yes" xml:space="preserve">
          <source>So, if for example, the model is a car, then the presenter is some sort of a car presenter, exposes the car properties (year, maker, seats, etc.) to the view. The view knows that the text field called 'car maker' needs to display the presenter Maker property.</source>
          <target state="translated">Так,если,к примеру,модель автомобиля,то ведущий-это некий ведущий,выставляющий на обозрение свойства автомобиля (год выпуска,производитель,сиденья и т.д.).Вид знает,что текстовое поле под названием &quot;автопроизводитель&quot; должно отображать свойства ведущего Maker.</target>
        </trans-unit>
        <trans-unit id="3653a3200fb622278cb1e5b02db6ae3aff3eaf82" translate="yes" xml:space="preserve">
          <source>Some people keep forgetting, that MVC &lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller#History&quot;&gt;was created in the late 70&quot;&lt;/a&gt;, and that the Web was only created in late 80&quot;/early 90&quot;.
MVC wasn't originally created for the Web, but for Desktop applications instead, where the Controller, Model and View would co-exist together.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Некоторые люди постоянно забывают, что MVC &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller#History&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;был создан в конце 70 &quot;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , и что Интернет был создан только в конце 80&quot; / начале 90 &quot;. MVC изначально создавался не для Интернета, а для настольных приложений, где контроллер Модель и Вид будут сосуществовать вместе.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b036d150ca2081e3f49a7a021ebf2382e3cd9bbe" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Presenter&lt;/strong&gt; is the &amp;ldquo;middle-man&amp;rdquo; (played by the controller in MVC) and has references to both, view and model. &lt;strong&gt;Please note that the word &amp;ldquo;Model&amp;rdquo;&lt;/strong&gt; is misleading. It should rather be &lt;strong&gt;business logic that retrieves or manipulates a Model&lt;/strong&gt;. For instance: If you have a database storing User in a database table and your View wants to display a list of users, then the Presenter would have a reference to your database business logic (like a DAO) from where the Presenter will query a list of Users.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ведущий&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; является &amp;laquo;средним человеком&amp;raquo; ( в &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;исполнении контроллера в MVC) и имеют ссылки на оба, вид и модель. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Обратите внимание, что слово &amp;laquo;Модель&amp;raquo;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вводит в заблуждение. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Скорее, это должна быть &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;бизнес-логика, которая извлекает или манипулирует моделью&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Например: если у вас есть база данных, хранящая пользователя в таблице базы данных, и ваше представление хочет отобразить список пользователей, тогда у докладчика будет ссылка на бизнес-логику вашей базы данных (например, DAO), откуда докладчик будет запрашивать список пользователей.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7ce9069d0933040f65e27892dbc1478ccd50468c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;model&lt;/strong&gt; is the data that will be displayed in the view (user interface).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модель&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; представляет собой данные , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;которые будут отображаться в окне просмотра (пользовательского интерфейса).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9538b9f662cea4b1498ce78dfd7271b9bce9d9d9" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;view&lt;/strong&gt; is an interface that displays data (the model) and routes user commands (events) to the Presenter to act upon that data. The view usually has a reference to its Presenter.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вид&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; представляет собой интерфейс , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;который отображает данные (модель) и команды маршрутов пользователей (события) к выступающему действовать в &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;соответствии с &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;этими данными. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Представление обычно имеет ссылку на своего докладчика.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f8cadfc7a7df940200c9941e44f92d7dc05189bb" translate="yes" xml:space="preserve">
          <source>The controller is created or accessed based on some event/request. The controller then creates the appropriate view and interacts with the model to further configure the view. It boils down to: the controller creates and manages the view; the view is slave to the controller. The view does not know about the controller.</source>
          <target state="translated">Контроллер создается или доступ к нему осуществляется на основе запроса на какое-либо событие.Затем контроллер создает соответствующий вид и взаимодействует с моделью для дальнейшей настройки вида.Все сводится к следующему:контроллер создает вид и управляет им;вид является ведомым для контроллера.Вид не знает о контроллере.</target>
        </trans-unit>
        <trans-unit id="8bcabe0f3f82d13b623b2c7d77f164d767970a86" translate="yes" xml:space="preserve">
          <source>The distinction made is that in an MVC application traditionally has the view and the controller interact with the model, but not with each other.</source>
          <target state="translated">Различие состоит в том,что в приложении MVC традиционно есть вид и контроллер взаимодействуют с моделью,но не друг с другом.</target>
        </trans-unit>
        <trans-unit id="45d8959b50e1ab78500a4af2828aefe5ad3a0d55" translate="yes" xml:space="preserve">
          <source>The input begins with the View, not the Presenter.
There is a one-to-one mapping between the View and the associated Presenter.
The View holds a reference to the Presenter. The Presenter is also reacting to events being triggered from the View, so its aware of the View its associated with.
The Presenter updates the View based on the requested actions it performs on the Model, but the View is not Model aware.</source>
          <target state="translated">Вход начинается с &quot;Вид&quot;,а не с &quot;Ведущий&quot;.Между видом и соответствующим ведущим существует сопоставление один к одному.Вид содержит ссылку на докладчика.Ведущий также реагирует на события,вызываемые видом,поэтому он знает о виде,с которым он связан.Ведущий обновляет вид,основываясь на запрошенных действиях,которые он выполняет над Моделью,но вид не знает Модель.</target>
        </trans-unit>
        <trans-unit id="301ad9ee0376a5983043321774e9445004e67361" translate="yes" xml:space="preserve">
          <source>The input is directed at the Controller first, not the view. That input might be coming from a user interacting with a page, but it could also be from simply entering a specific url into a browser. In either case, its a Controller that is interfaced with to kick off some functionality.
There is a many-to-one relationship between the Controller and the View. That&amp;rsquo;s because a single controller may select different views to be rendered based on the operation being executed.
Note the one way arrow from Controller to View. This is because the View doesn&amp;rsquo;t have any knowledge of or reference to the controller.
The Controller does pass back the Model, so there is knowledge between the View and the expected Model being passed into it, but not the Controller serving it up.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Сначала вход направлен на контроллер, а не на вид. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Этот ввод может исходить от пользователя, взаимодействующего со страницей, но это также может быть просто ввод определенного URL в браузер. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В любом случае, это Контроллер, который связан с некоторыми функциональными возможностями. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Между контроллером и представлением существует отношение многие-к-одному. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это связано с тем, что один контроллер может выбирать различные представления для визуализации в зависимости от выполняемой операции. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Обратите внимание на одностороннюю стрелку от контроллера к представлению. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это связано с тем, что представление не имеет каких-либо знаний или ссылок на контроллер. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Контроллер действительно передает Модель обратно, поэтому существует знание между Представлением и ожидаемой Моделью, передаваемой в него, но не Контроллер, подающий его.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b13f6ab6d7ad93ea600a87ab843ab5508280a401" translate="yes" xml:space="preserve">
          <source>The second flavor of MVP is the Supervising Controller. In that case your View might have a property called Customer, which then again is databound to the UI widgets. You don't have to think about synchronizing and micro-manage the view, and the Supervising Controller can step in and help when needed, for instance with compled interaction logic.</source>
          <target state="translated">Вторым вкусом MVP является Контроллер управления.В этом случае у вашего View может быть свойство под названием Customer (Клиент),которое,опять же,является базой данных виджетов пользовательского интерфейса.Вам не нужно думать о синхронизации и микро-управлении видом,а контролирующий контроллер может вмешаться и помочь при необходимости,например,с помощью усложненной логики взаимодействия.</target>
        </trans-unit>
        <trans-unit id="5a64b0bdd2b3ea781381907e13e2c0da16747d45" translate="yes" xml:space="preserve">
          <source>The simplest answer is how the view interacts with the model. In MVP the view is updated by the presenter, which acts as as intermediary between the view and the model. The presenter takes the input from the view, which retrieves the data from the model and then performs any business logic required and then updates the view. In MVC the model updates the view directly rather than going back through the controller.</source>
          <target state="translated">Самый простой ответ-как вид взаимодействует с моделью.В MVP представление обновляется ведущим,который действует как посредник между представлением и моделью.Докладчик берет входные данные из представления,которое извлекает данные из модели,а затем выполняет любую необходимую бизнес-логику и затем обновляет представление.В MVC модель обновляет представление напрямую,а не через контроллер.</target>
        </trans-unit>
        <trans-unit id="6a970a3299eb9cfc3156b88ba470bccec8c0ca28" translate="yes" xml:space="preserve">
          <source>The third &quot;flavor&quot; of MVP (or someone would perhaps call it a separate pattern) is the Presentation Model (or sometimes referred to Model-View-ViewModel). Compared to the MVP you &quot;merge&quot; the M and the P into one class. You have your customer object which your UI widgets is data bound to, but you also have additional UI-spesific fields like &quot;IsButtonEnabled&quot;, or &quot;IsReadOnly&quot;, etc.</source>
          <target state="translated">Третьим &quot;вкусом&quot; MVP (или,возможно,кто-то назвал бы его отдельным шаблоном)является Модель представления (или иногда упоминается как Model-View-ViewModel).По сравнению с MVP вы &quot;объединяете&quot; M и P в один класс.У вас есть объект клиента,к которому привязаны данные ваших виджетов пользовательского интерфейса,но у вас также есть дополнительные поля UI,такие как &quot;IsButtonEnabled&quot;,&quot;IsReadOnly&quot; и т.п.</target>
        </trans-unit>
        <trans-unit id="f669265be325235de5f4cc1ec139e56287acf4e4" translate="yes" xml:space="preserve">
          <source>The view is the initiator for user inputs and then delegates the events to the Presenter and the presenter handles event bindings and gets data from models.</source>
          <target state="translated">Вид является инициатором пользовательских входов,а затем делегирует события ведущему,а ведущий обрабатывает привязки событий и получает данные из моделей.</target>
        </trans-unit>
        <trans-unit id="d39997851ece3fcb75c76f9050d8a0121c1ecce4" translate="yes" xml:space="preserve">
          <source>The view, in most cases, creates its presenter. The presenter will interact with the model and manipulate the view through an interface. The view will sometimes interact with the presenter, usually through some interface.  This comes down to implementation; do you want the view to call methods on the presenter or do you want the view to have events the presenter listens to? It boils down to this: The view knows about the presenter. The view delegates to the presenter.</source>
          <target state="translated">Вид,в большинстве случаев,создает своего ведущего.Ведущий будет взаимодействовать с моделью и манипулировать представлением через интерфейс.Иногда представление взаимодействует с ведущим,обычно через какой-то интерфейс.Это сводится к реализации;хотите ли вы,чтобы представление вызывало методы ведущего,или вы хотите,чтобы представление имело события,которые ведущий будет слушать? Все сводится к этому:Вид знает о ведущем.Вид делегирует ведущему.</target>
        </trans-unit>
        <trans-unit id="27757769008ceb477f7e05a0cce8b21ba034600f" translate="yes" xml:space="preserve">
          <source>There are many answers to the question, but I felt there is a need for some really simple answer clearly comparing the two. Here's the discussion I made up when a user searches for a movie name in an MVP and MVC app:</source>
          <target state="translated">Ответов на вопрос много,но я почувствовал,что есть необходимость в действительно простом ответе,четко сравнивающем эти два.Вот дискуссия,которую я придумал,когда пользователь ищет название фильма в приложении MVP и MVC:</target>
        </trans-unit>
        <trans-unit id="a92db89ca0249089c13b11f20ed6580da41fbc47" translate="yes" xml:space="preserve">
          <source>There are many versions of MVC, this answer is about the original MVC in Smalltalk. In brief, it is</source>
          <target state="translated">Существует множество версий MVC,этот ответ касается оригинальной MVC в Smalltalk.Вкратце,это</target>
        </trans-unit>
        <trans-unit id="82ed275cafa23c2ea8e8869eeae8eea58c31d287" translate="yes" xml:space="preserve">
          <source>There is &lt;a href=&quot;https://www.youtube.com/watch?v=WpkDN78P884&amp;amp;feature=youtu.be&amp;amp;t=29m1s&quot;&gt;this&lt;/a&gt; nice video from Uncle Bob where he briefly explains &lt;strong&gt;MVC&lt;/strong&gt; &amp;amp; &lt;strong&gt;MVP&lt;/strong&gt; at the end.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Есть &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=WpkDN78P884&amp;amp;feature=youtu.be&amp;amp;t=29m1s&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;это&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; хорошее видео от дяди Боба, где он кратко объясняет &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в конце.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2387b03e9c36c2f329fc383807a6d7fc068372d9" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff921080.aspx&quot;&gt;MSDN article about the Presentation Model&lt;/a&gt; and a section in the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707819.aspx&quot;&gt;Composite Application Guidance for WPF&lt;/a&gt; (former Prism) about &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707862.aspx&quot;&gt;Separated Presentation Patterns&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff921080.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MSDN есть статья о модели представления&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и раздел в &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707819.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Руководстве по составным приложениям для WPF&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (прежняя призма) об &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707862.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;отдельных шаблонах представления.&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7ee276ebb5fe1caeea00a1b1761430f0ba014210" translate="yes" xml:space="preserve">
          <source>There is a discussion &lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/10/31/development-trivial-pursuit-the-difference-between-mvc-and-the-different-flavors-of-mvp.aspx&quot;&gt;here&lt;/a&gt; regarding the differences between MVC vs MVP.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Существует дискуссия &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/10/31/development-trivial-pursuit-the-difference-between-mvc-and-the-different-flavors-of-mvp.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;здесь&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; о различиях между MVC против MVP.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7699ceb8018ddb15756349dc26c7ea4e42bd17a7" translate="yes" xml:space="preserve">
          <source>There is also &lt;a href=&quot;http://gexiaoguo.github.io/MVC,-MVP-and-MVVM/&quot;&gt;a complete comparison of MVC, MVP and MVVM here&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Здесь также &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://gexiaoguo.github.io/MVC,-MVP-and-MVVM/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;есть полное сравнение MVC, MVP и MVVM.&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="732e33e57cc89c110727e2ee01bc05e383b35a3b" translate="yes" xml:space="preserve">
          <source>They are fairly similar in concept, folks initialize the Presenter/Controller differently depending on taste.</source>
          <target state="translated">Они довольно похожи по концепции,люди инициализируют PresenterController по-разному в зависимости от вкуса.</target>
        </trans-unit>
        <trans-unit id="9e06241d8aa910ec172be9a0d74cc298f0b8f2e2" translate="yes" xml:space="preserve">
          <source>They each addresses different problems and can even be combined together to have something like below</source>
          <target state="translated">Каждый из них решает различные проблемы и даже может быть объединен,чтобы иметь что-то вроде ниже.</target>
        </trans-unit>
        <trans-unit id="47cadcbcc9b8934f4ae08c3f71c0a82e97d39b6a" translate="yes" xml:space="preserve">
          <source>This binding framework, if you strip it down, it's actually the controller :-)</source>
          <target state="translated">Этот связующий фреймворк,если его убрать,на самом деле это контроллер :-).</target>
        </trans-unit>
        <trans-unit id="38e65116cea7797e3e3b184268328e27c9889ae8" translate="yes" xml:space="preserve">
          <source>This is an oversimplification of the many variants of these design patterns, but this is how I like to think about the differences between the two.</source>
          <target state="translated">Это является чрезмерным упрощением многих вариантов этих шаблонов дизайна,но именно так мне нравится думать о различиях между ними.</target>
        </trans-unit>
        <trans-unit id="f38b8d429e873aab62370e55b7446e42b7d50843" translate="yes" xml:space="preserve">
          <source>This talk &lt;a href=&quot;https://www.youtube.com/watch?v=i1-7S-RxfvQ&quot;&gt;droidcon NYC 2017 - Clean app design with Architecture Components&lt;/a&gt; clarifies it</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Этот доклад &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=i1-7S-RxfvQ&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;droidcon NYC 2017 - Чистый дизайн приложения с помощью компонентов архитектуры&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; разъясняет это&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="545847bd273b1f49941092ff8d1fdbab224676c5" translate="yes" xml:space="preserve">
          <source>To be perfectly frank, I think the underlying concerns of MVC hold true for any MVP implementation and the differences are almost entirely semantic. As long as you are following separation of concerns between the view (that displays the data), the controller (that initialises and controls user interaction) and the model (the underlying data and/or services)) then you are achieving the benefits of MVC. If you are achieving the benefits then who really cares whether your pattern is MVC, MVP or Supervising Controller? The only &lt;em&gt;real&lt;/em&gt; pattern remains as MVC, the rest are just differing flavours of it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Чтобы быть совершенно откровенным, я думаю, что основные проблемы MVC справедливы для любой реализации MVP, и различия почти полностью семантические. Пока вы следите за разделением интересов между представлением (которое отображает данные), контроллером (который инициализирует и контролирует взаимодействие с пользователем) и моделью (базовые данные и / или службы)), вы получаете преимущества MVC , Если вы добиваетесь преимуществ, то кого действительно волнует, является ли ваш паттерн MVC, MVP или Supervising Controller? Единственный &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;реальный&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; образец остается как MVC, остальные - только различные ароматы этого.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="482730aa6dd38ce89c84c44cdb10a85967c85887" translate="yes" xml:space="preserve">
          <source>To make this a little more clear, let's imagine a simple shopping list app. All we want is a list of the name, quantity and price of each item we need to buy this week. Below we'll describe how we could implement some of this functionality using MVC.</source>
          <target state="translated">Чтобы все прояснить,давайте представим себе простое приложение со списком покупок.Все,что нам нужно,это список с названием,количеством и ценой каждого товара,который мы должны купить на этой неделе.Ниже мы опишем,как мы могли бы реализовать часть этой функциональности с помощью MVC.</target>
        </trans-unit>
        <trans-unit id="36881632660b34cfeb60c442c72bb50a89a4b94b" translate="yes" xml:space="preserve">
          <source>To perhaps get an idea of the ASP.NET MVC distinction from MVP, check out &lt;a href=&quot;http://www.hanselman.com/blog/ASPNETMVCSessionAtMix08TDDAndMvcMockHelpers.aspx&quot;&gt;this MIX presentation&lt;/a&gt; by Scott Hanselman.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Чтобы, возможно, получить представление об отличии ASP.NET MVC от MVP, посмотрите &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.hanselman.com/blog/ASPNETMVCSessionAtMix08TDDAndMvcMockHelpers.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;эту презентацию MIX&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Скотта Хансельмана.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f0d5780f10eb00de3194e1ce64c16ffa7b1a215a" translate="yes" xml:space="preserve">
          <source>Two primary variations</source>
          <target state="translated">Два основных варианта</target>
        </trans-unit>
        <trans-unit id="d8e5a17a94be3110a5c8a6cb2926e409bcfdd2cb" translate="yes" xml:space="preserve">
          <source>User: Click click &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Пользователь: Нажмите, нажмите ...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e2022cac9d87c721fd2ffcf2c90cf08cfbdf0777" translate="yes" xml:space="preserve">
          <source>User: I just clicked on the search button &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Пользователь: Я только что нажал на кнопку поиска ...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="caf99ef190bd9af7d81997674d54ae10c2d41178" translate="yes" xml:space="preserve">
          <source>Usually view to presenter map one to one. Complex views may have multi presenters.</source>
          <target state="translated">Обычно просмотр карты ведущего один на один.Сложные виды могут иметь несколько ведущих.</target>
        </trans-unit>
        <trans-unit id="95de390211342cdae2c03da39ba48cd824c0d405" translate="yes" xml:space="preserve">
          <source>View event binding will be implemented in the Presenter from a view interface.</source>
          <target state="translated">Привязка событий просмотра будет реализована в Ведущем из интерфейса просмотра.</target>
        </trans-unit>
        <trans-unit id="bfb597da495d126f84a30cf8e12a2f5a5589ec42" translate="yes" xml:space="preserve">
          <source>View is more loosely coupled to the model. The presenter is responsible for binding the model to the view.</source>
          <target state="translated">Вид более свободно связан с моделью.Ведущий отвечает за привязку модели к виду.</target>
        </trans-unit>
        <trans-unit id="0c4a2a610d14eb9943f32d71e4084d55a3fc4f4c" translate="yes" xml:space="preserve">
          <source>What are MVP and MVC and what is the difference</source>
          <target state="translated">Что такое MVP и MVC,и в чем разница.</target>
        </trans-unit>
        <trans-unit id="b87b976f1b7223ebb2c16be5928ce8f2d8c3707b" translate="yes" xml:space="preserve">
          <source>What is the &lt;strong&gt;difference&lt;/strong&gt; between &lt;strong&gt;MVC&lt;/strong&gt; and &lt;strong&gt;MVP&lt;/strong&gt; patterns?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В чем &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;разница&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; между &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;шаблонами &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="986d2dd63e33a810f964fed17c9a33c11b99c6f1" translate="yes" xml:space="preserve">
          <source>What issues do these patterns address?</source>
          <target state="translated">Какие проблемы решаются этими моделями?</target>
        </trans-unit>
        <trans-unit id="4015b37baf62151fb930c9a9d0fd14a4a901d977" translate="yes" xml:space="preserve">
          <source>When looking beyond the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rapid_application_development&quot;&gt;RAD&lt;/a&gt; (drag-drop and configure) way of building user interfaces that many tools encourage you are likely to come across three design patterns called &lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;Model-View-Controller&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter&quot;&gt;Model-View-Presenter&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Model_View_ViewModel&quot;&gt;Model-View-ViewModel&lt;/a&gt;. My question has three parts to it:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если взглянуть за пределы &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Rapid_application_development&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;RAD&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (перетаскивания и настройки) способа создания пользовательских интерфейсов, который многие инструменты поощряют, вы, скорее всего, натолкнетесь на три модели проектирования, которые называются &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model-View-Controller&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model-View-Presenter&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Model_View_ViewModel&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model-View-ViewModel&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Мой вопрос состоит из трех частей:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eaf99e74a9572f632c4513afb3ddf3f4b76892ce" translate="yes" xml:space="preserve">
          <source>When using Passive View, your View typically implement a fine-grained interface with properties mapping more or less directly to the underlaying UI widget. For instance, you might have a ICustomerView with properties like Name and Address.</source>
          <target state="translated">При использовании пассивного вида,ваш вид обычно реализует мелкозернистый интерфейс с отображением свойств более или менее непосредственно в подложке виджета пользовательского интерфейса.Например,у вас может быть ICustomerView со свойствами,такими как Имя и Адрес.</target>
        </trans-unit>
        <trans-unit id="1b6eedfb17289a07676cf342f01265dd1b006b7d" translate="yes" xml:space="preserve">
          <source>You can then bind to the view many different types of presenter, all must have Maker property - it can be of a plane, train or what ever , the view doesn't care. The view draws data from the presenter - no matter which - as long as it implements an agreed interface.</source>
          <target state="translated">Вы можете затем привязать к виду много различных типов ведущего,все должны иметь свойство Maker-это может быть самолет,поезд или что угодно,вид не заботит.Вид черпает данные из ведущего-независимо от того,какой-до тех пор,пока он реализует согласованный интерфейс.</target>
        </trans-unit>
        <trans-unit id="fe22486aea6886979af6e1aace2f38d65cce7f51" translate="yes" xml:space="preserve">
          <source>You forgot about &lt;strong&gt;Action-Domain-Responder&lt;/strong&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;ADR&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы забыли про &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Action-Domain-Responder&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ( &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ADR&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11e7697e759021e33983122c07fc8fc869e0b0da" translate="yes" xml:space="preserve">
          <source>Your Presenter class will talk to the model and &quot;map&quot; it to the view. This approach is called the &quot;Passive View&quot;. The benefit is that the view is easy to test, and it is easier to move between UI platforms (Web, Windows/XAML, etc.). The disadvantage is that you can't leverage things like databinding (which is &lt;em&gt;really&lt;/em&gt; powerful in frameworks like &lt;a href=&quot;http://en.wikipedia.org/wiki/Windows_Presentation_Foundation&quot;&gt;WPF&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Silverlight&quot;&gt;Silverlight&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ваш класс Presenter будет говорить с моделью и &amp;laquo;сопоставлять&amp;raquo; ее с представлением. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Этот подход называется &amp;laquo;пассивным представлением&amp;raquo;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Преимущество заключается в том, что представление легко тестировать, и его легче перемещать между платформами пользовательского интерфейса (Web, Windows / XAML и т. Д.). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Недостатком является то, что вы не можете использовать такие вещи, как привязка данных (что &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;действительно&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; полезно в таких &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Windows_Presentation_Foundation&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;средах,&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; как &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;WPF&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Silverlight&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Silverlight&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34235fb0fc29596b8a27e0699f118207159cd0e5" translate="yes" xml:space="preserve">
          <source>Your implementation might look something like this:</source>
          <target state="translated">Твоя имплементация может выглядеть вот так:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
