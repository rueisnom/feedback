<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/20563772">
    <body>
      <group id="20563772">
        <trans-unit id="04c55724768058d5a9709a1afac88b7e9e8c36de" translate="yes" xml:space="preserve">
          <source>&quot;Pretty links&quot; is an often requested topic, but it is rarely fully explained. &lt;a href=&quot;https://en.wikipedia.org/wiki/URL_redirection#Apache_HTTP_Server_mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt; is one way to make &quot;pretty links&quot;, but it's complex and its syntax is very terse, hard to grok, and the documentation assumes a certain level of proficiency in HTTP. Can someone explain in simple terms how &quot;pretty links&quot; work and how mod_rewrite can be used to create them?</source>
          <target state="translated">&amp;laquo;Красивые ссылки&amp;raquo; - часто запрашиваемая тема, но она редко полностью объясняется. &lt;a href=&quot;https://en.wikipedia.org/wiki/URL_redirection#Apache_HTTP_Server_mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt; - это один из способов создания &amp;laquo;симпатичных ссылок&amp;raquo;, но он сложный и его синтаксис очень лаконичен, его сложно найти, а документация предполагает определенный уровень владения HTTP. Может кто-нибудь объяснить простыми словами, как работают &quot;красивые ссылки&quot; и как mod_rewrite может использоваться для их создания?</target>
        </trans-unit>
        <trans-unit id="a0144ea22bd63e090c9a57002ef4dca43f06244e" translate="yes" xml:space="preserve">
          <source>&quot;Removing&quot; the PHP extension</source>
          <target state="translated">&quot;Удаление&quot; расширения PHP</target>
        </trans-unit>
        <trans-unit id="597d8e063a87f940aba17a58c3d20ee1aa29b5aa" translate="yes" xml:space="preserve">
          <source>&amp;larr;&amp;rarr;</source>
          <target state="translated">&amp;larr;&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="b5513ad1a21d7a31373a546022f3c58ec77d271b" translate="yes" xml:space="preserve">
          <source>&amp;middot; &lt;a href=&quot;https://stackoverflow.com/questions/234723/generic-htaccess-redirect-www-to-non-www&quot;&gt;Generic htaccess redirect www to non-www&lt;/a&gt;</source>
          <target state="translated">&amp;middot; &lt;a href=&quot;https://stackoverflow.com/questions/234723/generic-htaccess-redirect-www-to-non-www&quot;&gt;Общий htaccess перенаправить www на не-www&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9e9d10a73898648b0aedc5f97de4fe51653ebbb0" translate="yes" xml:space="preserve">
          <source>&amp;middot; &lt;a href=&quot;https://stackoverflow.com/questions/3634101/url-rewriting-for-different-protocols-in-htaccess&quot;&gt;URL rewriting for different protocols in .htaccess&lt;/a&gt;</source>
          <target state="translated">&amp;middot; &lt;a href=&quot;https://stackoverflow.com/questions/3634101/url-rewriting-for-different-protocols-in-htaccess&quot;&gt;Перезапись URL для разных протоколов в .htaccess&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="11664097a8ffb0d8f28dc915df0128cf941e154f" translate="yes" xml:space="preserve">
          <source>&amp;middot; &lt;a href=&quot;https://stackoverflow.com/questions/4916222/htaccess-how-to-force-www-in-a-generic-way&quot;&gt;.htaccess - how to force &quot;www.&quot; in a generic way?&lt;/a&gt;</source>
          <target state="translated">&amp;middot; &lt;a href=&quot;https://stackoverflow.com/questions/4916222/htaccess-how-to-force-www-in-a-generic-way&quot;&gt;.Htaccess - как заставить &quot;www.&quot;&lt;/a&gt; в общем?</target>
        </trans-unit>
        <trans-unit id="49874443e813166bc4fdbfa82a1bbca93286ff6a" translate="yes" xml:space="preserve">
          <source>&amp;middot; &lt;a href=&quot;https://stackoverflow.com/questions/9153262/tips-for-debugging-htaccess-rewrite-rules&quot;&gt;Tips for debugging .htaccess rewrite rules&lt;/a&gt;</source>
          <target state="translated">&amp;middot; &lt;a href=&quot;https://stackoverflow.com/questions/9153262/tips-for-debugging-htaccess-rewrite-rules&quot;&gt;Советы по отладке правил перезаписи .htaccess&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="23f298a47c3d469e691054bf2fb011ca932d6db4" translate="yes" xml:space="preserve">
          <source>&amp;middot; &lt;a href=&quot;https://stackoverflow.com/questions/945047/htaccess-not-working-mod-rewrite&quot;&gt;.htaccess not working (mod_rewrite)&lt;/a&gt;</source>
          <target state="translated">&amp;middot; &lt;a href=&quot;https://stackoverflow.com/questions/945047/htaccess-not-working-mod-rewrite&quot;&gt;.Htaccess не работает (mod_rewrite)&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="90b7f713187e69c77adcad3d9680fb1827b33af5" translate="yes" xml:space="preserve">
          <source>&amp;middot; Note that the leading slash is still correct in &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; sections though. Which is why you often see it &lt;code&gt;^/?&lt;/code&gt; optionalized for rule parity.</source>
          <target state="translated">&amp;middot; Обратите внимание, что начальная косая черта все еще корректна в разделах &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; . Вот почему вы часто видите это &lt;code&gt;^/?&lt;/code&gt; необязательный для паритета правила.</target>
        </trans-unit>
        <trans-unit id="cbe50ec46e66e9fc50014beb0301950e6ccf42b2" translate="yes" xml:space="preserve">
          <source>&amp;middot; Or when using a &lt;code&gt;RewriteCond %{REQUEST_URI}&lt;/code&gt; you'd still match for a leading &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">&amp;middot; Или при использовании &lt;code&gt;RewriteCond %{REQUEST_URI}&lt;/code&gt; вы все равно подходите для ведущего &lt;code&gt;/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="751229f868612475f9aa274c27c6748c3d39d97a" translate="yes" xml:space="preserve">
          <source>&amp;middot; See also &lt;a href=&quot;https://webmasters.stackexchange.com/questions/27118/when-is-the-leading-slash-needed-in-mod-rewrite-patterns&quot;&gt;Webmaster.SE: When is the leading slash (/) needed in mod_rewrite patterns?&lt;/a&gt;</source>
          <target state="translated">&amp;middot; См. Также &lt;a href=&quot;https://webmasters.stackexchange.com/questions/27118/when-is-the-leading-slash-needed-in-mod-rewrite-patterns&quot;&gt;Webmaster.SE: когда требуется начальная косая черта (/) в шаблонах mod_rewrite?&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">,</target>
        </trans-unit>
        <trans-unit id="09ff1d5e4b8bdd76ba405a3bed899d1c8bef75b6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_alias.html#scriptaliasmatch&quot;&gt;&lt;code&gt;ScriptAliasMatch&lt;/code&gt;&lt;/a&gt; is primarily for CGI scripts, but also ought to works for PHP. It allows regexps just like any &lt;code&gt;RewriteRule&lt;/code&gt;. In fact it's perhaps the most robust option to configurate a catch-all front controller.</source>
          <target state="translated">&lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_alias.html#scriptaliasmatch&quot;&gt; &lt;code&gt;ScriptAliasMatch&lt;/code&gt; &lt;/a&gt; предназначен в первую очередь для CGI-скриптов, но также должен работать для PHP. Это позволяет регулярные выражения, как и любой &lt;code&gt;RewriteRule&lt;/code&gt; . На самом деле это, пожалуй, самый надежный вариант для настройки универсального фронт-контроллера.</target>
        </trans-unit>
        <trans-unit id="9a549849bbb01109ba011c5521c50e9b4dab2ca6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html#rewritecond&quot;&gt;Rewrite conditions&lt;/a&gt; make rewrites even more powerful, allowing you to specify rewrites for more specific situations. There are a lot of conditions which you can read about in &lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html#rewritecond&quot;&gt;the documentation&lt;/a&gt;, but I'll touch on a few common examples and explain them:</source>
          <target state="translated">&lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html#rewritecond&quot;&gt;Условия&lt;/a&gt; перезаписи делают переписывание еще более мощным, позволяя вам задавать перезаписи для более конкретных ситуаций. Есть много условий, о которых вы можете прочитать в &lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html#rewritecond&quot;&gt;документации&lt;/a&gt; , но я затрону несколько общих примеров и объясню их:</target>
        </trans-unit>
        <trans-unit id="dabf9d101070ea48e2e85c726ecf5e80fe0caccb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$&lt;/code&gt; indicates this is the end of the string we want to match</source>
          <target state="translated">&lt;code&gt;$&lt;/code&gt; указывает, что это конец строки, которую мы хотим сопоставить</target>
        </trans-unit>
        <trans-unit id="3841678c9eead3827e8ffd336e806cea70870cfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%{REQUEST_FILENAME} !-d&lt;/code&gt; will check to see if the file exists on the current server, and only execute the rewrite if it doesn't</source>
          <target state="translated">&lt;code&gt;%{REQUEST_FILENAME} !-d&lt;/code&gt; проверит, существует ли файл на текущем сервере, и выполнит перезапись только в том случае, если его нет</target>
        </trans-unit>
        <trans-unit id="52ef5672eb064f0ebc113e70140ea1eadd1d8617" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%{REQUEST_FILENAME} !-f&lt;/code&gt; will check to see if the file exists on the current server, and only execute the rewrite if it doesn't</source>
          <target state="translated">&lt;code&gt;%{REQUEST_FILENAME} !-f&lt;/code&gt; проверит, существует ли файл на текущем сервере, и выполнит перезапись, только если его нет</target>
        </trans-unit>
        <trans-unit id="b5f7869488f52b18660937317e48137ddb57255d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%{REQUEST_URI} \.(jpg|jpeg|gif|png)$ [NC]&lt;/code&gt; will only execute the rewrite for files with a file extension of jpg, jpeg, gif or png (case insensitive).</source>
          <target state="translated">&lt;code&gt;%{REQUEST_URI} \.(jpg|jpeg|gif|png)$ [NC]&lt;/code&gt; будет выполнять перезапись только для файлов с расширением jpg, jpeg, gif или png (без учета регистра).</target>
        </trans-unit>
        <trans-unit id="84f88a1c5e685a84649de8e1bb782d50117ee3d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;IfModule *&amp;gt;&lt;/code&gt; wrappers begone!</source>
          <target state="translated">&lt;code&gt;&amp;lt;IfModule *&amp;gt;&lt;/code&gt; упаковщики</target>
        </trans-unit>
        <trans-unit id="740e3c6f83451b565f345cfff88bed98503f3438" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.*&lt;/code&gt; matches anything, even an empty string. You don't want to use this pattern everywhere, but often in the last fallback rule.</source>
          <target state="translated">&lt;code&gt;.*&lt;/code&gt; соответствует чему угодно, даже пустой строке. Вы не хотите использовать этот шаблон везде, но часто в последнем запасном правиле.</target>
        </trans-unit>
        <trans-unit id="57a8bb9a55be2beb96f900e52fa775ececf4eb4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.htaccess&lt;/code&gt; vs. &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.htaccess&lt;/code&gt; vs. &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd8275fe29a7eea617f1c546405e782cf8821462" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;?&lt;/code&gt; means that the preceding character is optional, so in this case both &lt;code&gt;/blog/1/foo/&lt;/code&gt; and &lt;code&gt;/blog/1/foo&lt;/code&gt; would rewrite to the same place</source>
          <target state="translated">&lt;code&gt;?&lt;/code&gt; означает, что предыдущий символ является необязательным, поэтому в этом случае и &lt;code&gt;/blog/1/foo/&lt;/code&gt; и &lt;code&gt;/blog/1/foo&lt;/code&gt; переписывают в одно и то же место</target>
        </trans-unit>
        <trans-unit id="53ff5984a739c16e5b086e2a03847c8c36b495a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RewriteRule&lt;/code&gt; - starts the rewrite rule</source>
          <target state="translated">&lt;code&gt;RewriteRule&lt;/code&gt; - запускает правило перезаписи</target>
        </trans-unit>
        <trans-unit id="f6bc4be5b28507c8732dee618da29f11552edf76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[NC,L,QSA]&lt;/code&gt; are flags for the rewrite rule, separated by a comma, which I will explain more on later</source>
          <target state="translated">&lt;code&gt;[NC,L,QSA]&lt;/code&gt; - это флаги для правила перезаписи, разделенные запятой, о которых я расскажу позже.</target>
        </trans-unit>
        <trans-unit id="7f10bfcb87252edf50ae9c562e503f26dba99880" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[\w\-.,]+&lt;/code&gt; adds periods and commas. Prefer an escaped &lt;code&gt;\-&lt;/code&gt; dash in &lt;code&gt;[&amp;hellip;]&lt;/code&gt; charclasses.</source>
          <target state="translated">&lt;code&gt;[\w\-.,]+&lt;/code&gt; добавляет точки и запятые. Предпочитайте экранированную черту в &lt;code&gt;[&amp;hellip;]&lt;/code&gt; классах.</target>
        </trans-unit>
        <trans-unit id="652e235ffc34df09e53fb0c478bb6569c2f6220f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[\w\-]+&lt;/code&gt; for &quot;slug&quot;-style path segments, using letters, numbers, dash &lt;code&gt;-&lt;/code&gt;&lt;em&gt;and&lt;/em&gt;&lt;code&gt;_&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;[\w\-]+&lt;/code&gt; для сегментов пути в стиле &amp;laquo;slug&amp;raquo;, используя буквы, цифры, тире &lt;code&gt;-&lt;/code&gt; &lt;em&gt;и&lt;/em&gt; &lt;code&gt;_&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eefc1f169daf6dd207f047f1eca8ec66ccf23d21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[^/]+&lt;/code&gt; is more often used for path segments. It matches anything but the forward slash.</source>
          <target state="translated">&lt;code&gt;[^/]+&lt;/code&gt; чаще используется для сегментов пути. Это соответствует чему угодно, кроме косой черты.</target>
        </trans-unit>
        <trans-unit id="007f7af81afda692adf95fb0f0ea88501e1bf3b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\.&lt;/code&gt; denotes a literal period. Otherwise &lt;code&gt;.&lt;/code&gt; outside of &lt;code&gt;[&amp;hellip;]&lt;/code&gt; is placeholder for any symbol.</source>
          <target state="translated">&lt;code&gt;\.&lt;/code&gt; обозначает буквальный период. В противном случае &lt;code&gt;.&lt;/code&gt; за пределами &lt;code&gt;[&amp;hellip;]&lt;/code&gt; является заполнителем для любого символа.</target>
        </trans-unit>
        <trans-unit id="5a4fb0ae48ecd50b05579d0b16175b9faa2f9145" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\d+&lt;/code&gt; only matches numeric strings.</source>
          <target state="translated">&lt;code&gt;\d+&lt;/code&gt; только числовым строкам.</target>
        </trans-unit>
        <trans-unit id="88dd17205e1d1eb1880a3862d44c47469b59bc65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w+&lt;/code&gt; matches alphanumeric characters. It's basically shorthand for &lt;code&gt;[A-Za-z0-9_]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;\w+&lt;/code&gt; соответствует буквенно-цифровым символам. Это в основном сокращение для &lt;code&gt;[A-Za-z0-9_]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ecd5b35217c81c63b4a74c2649897e0738e78196" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;^&lt;/code&gt; indicates the start of the page name - so it will rewrite &lt;code&gt;example.com/blog/...&lt;/code&gt; but not &lt;code&gt;example.com/foo/blog/...&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; обозначает начало имени страницы - поэтому он переписывает &lt;code&gt;example.com/blog/...&lt;/code&gt; но не &lt;code&gt;example.com/foo/blog/...&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="76c35aed0c9b66dedf952907da4ac7c5d1e91082" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;^blog/([0-9]+)/([A-Za-z0-9-\+]+)/?$&lt;/code&gt; - This is called the pattern, however I'll just refer to it as the left hand side of the rule - what you want to rewrite from</source>
          <target state="translated">&lt;code&gt;^blog/([0-9]+)/([A-Za-z0-9-\+]+)/?$&lt;/code&gt; - это называется шаблоном, однако я просто буду называть его левой стороной правила - с чего вы хотите переписать</target>
        </trans-unit>
        <trans-unit id="3c3e47bd9da371a8d996ad9238fb7d0a846ed34f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blog/index.php?id=$1&amp;amp;title=$2&lt;/code&gt; - called the substitution, or right hand side of a rewrite rule - what you want to rewrite to</source>
          <target state="translated">&lt;code&gt;blog/index.php?id=$1&amp;amp;title=$2&lt;/code&gt; - называется заменой или правой частью правила перезаписи - то, что вы хотите переписать</target>
        </trans-unit>
        <trans-unit id="c018111bc70724dcfa8cb1f7668165f1f8338ea1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(One could use &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_substitute.html&quot;&gt;&lt;code&gt;mod_substitute&lt;/code&gt;&lt;/a&gt; in conjunction to transform outgoing HTML pages and their contained links. Though this is usally more effort than just updating your HTML resources.)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;(Можно использовать &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_substitute.html&quot;&gt; &lt;code&gt;mod_substitute&lt;/code&gt; &lt;/a&gt; совместно для преобразования исходящих HTML-страниц и содержащихся в них ссылок. Хотя обычно это больше усилий, чем просто обновление ваших HTML-ресурсов.)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="13b7ff54bd60680e79ae5fbe5d410830c1d4ba46" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Disclaimer: Just a pet peeve.&lt;/em&gt; You often hear pretty URL rewriting schemes referred to as &quot;SEO&quot; links or something. While this is useful for googling examples, it's a dated misnomer.</source>
          <target state="translated">&lt;em&gt;Отказ от ответственности: просто любимая мозоль.&lt;/em&gt; Вы часто слышите красивые схемы перезаписи URL, называемые ссылками &amp;laquo;SEO&amp;raquo; или что-то в этом роде Хотя это полезно для примеров поиска в Google, это устаревшее неправильное название.</target>
        </trans-unit>
        <trans-unit id="eac2e867209bf4cc7ac3e6c6c4fa20816e1a9de4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Frequent duplicates:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Частые дубликаты:&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="97e1889f04dc3ae76733cf1c73e291e1aa7e9fa0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Before asking your own question&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Прежде чем задать свой вопрос&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c93e3a38d537bf6691059af6469a46eaab5ed161" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Compare &lt;code&gt;access.log&lt;/code&gt; and &lt;code&gt;error.log&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Сравните &lt;code&gt;access.log&lt;/code&gt; и &lt;code&gt;error.log&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2eb684fba0d3ae631715207143e21b416e87c173" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Enable the RewriteLog&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Включить RewriteLog&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9ad2c732c9574e224486865e3a43750bf1d28e9c" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;* &lt;em&gt;If&lt;/em&gt; allowed by the primary Apache configuration file; it's optional, but often enabled.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;* &lt;em&gt;Если это&lt;/em&gt; разрешено основным файлом конфигурации Apache;&lt;/sub&gt; &lt;sub&gt;это необязательно, но часто включено.&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="2ac572067e403e7daf793fe6e0ac4b75ec0f146e" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;(Keep in mind to remove the slash in &lt;code&gt;^/&lt;/code&gt; pattern prefixes for &lt;code&gt;.htaccess&lt;/code&gt; usage.)&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;(Не забудьте удалить косую черту в префиксах &lt;code&gt;^/&lt;/code&gt; pattern для использования &lt;code&gt;.htaccess&lt;/code&gt; .)&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="1d70018b10d872204ec89158898067f937b2f3f7" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/intro.html&quot;&gt;Apache manual - mod_rewrite intro&lt;/a&gt;, Copyright 2015 The Apache Software Foundation, AL-2.0&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;&lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/intro.html&quot;&gt;Руководство по Apache - введение в mod_rewrite&lt;/a&gt; , Copyright 2015 Фонд программного обеспечения Apache, AL-2.0&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="21606782c65e44cac7afbb90977d8b6f82140e76" translate="yes" xml:space="preserve">
          <source>=</source>
          <target state="translated">=</target>
        </trans-unit>
        <trans-unit id="3bb0577c12be030ceb402e055b81983cbc559dc7" translate="yes" xml:space="preserve">
          <source>A common misinterpetation is that a RewriteCond blocks multiple RewriteRules (because they're visually arranged together):</source>
          <target state="translated">Обычная ошибка заключается в том,что RewriteCond блокирует несколько RewriteRules (потому что они визуально расположены вместе):</target>
        </trans-unit>
        <trans-unit id="d6fc1b11df2a64cfc4257b5e2e334dcee5fdb582" translate="yes" xml:space="preserve">
          <source>A common variation is to have optional prefixes &lt;em&gt;within&lt;/em&gt; a rule. This usually makes sense if you have static strings or more constrained placeholders around:</source>
          <target state="translated">Распространенным вариантом является наличие необязательных префиксов &lt;em&gt;в&lt;/em&gt; правиле. Обычно это имеет смысл, если у вас есть статические строки или более ограниченные заполнители:</target>
        </trans-unit>
        <trans-unit id="b7d27b8628cafc228ce03267fced905dd8074078" translate="yes" xml:space="preserve">
          <source>A more directed approach to avoid carrying around &lt;code&gt;.php&lt;/code&gt; suffixes in URLs is &lt;a href=&quot;http://php.net/manual/en/security.hiding.php&quot;&gt;configuring the PHP handler&lt;/a&gt; for other file schemes. The simplest option is overriding the default MIME/handler type via &lt;code&gt;.htaccess&lt;/code&gt;:</source>
          <target state="translated">Более направленным подходом, позволяющим избежать переноса суффиксов &lt;code&gt;.php&lt;/code&gt; в URL, является &lt;a href=&quot;http://php.net/manual/en/security.hiding.php&quot;&gt;настройка обработчика PHP&lt;/a&gt; для других схем файлов. Самый простой вариант - переопределить тип MIME / обработчика по умолчанию через &lt;code&gt;.htaccess&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="20fc23c4cb699185bba8ced01fc05186ba75a0a1" translate="yes" xml:space="preserve">
          <source>A more practical use of alternative lists are mapping request paths to distinct scripts. For example to provide uniform URLs for an older and a newer web application based on dates:</source>
          <target state="translated">Более практичным использованием альтернативных списков является сопоставление путей запроса с отдельными сценариями.Например,для предоставления единообразных URL для старого и более нового веб-приложения на основе дат:</target>
        </trans-unit>
        <trans-unit id="124f0e78269a525e3a84a54aeffe59146bd971ec" translate="yes" xml:space="preserve">
          <source>A request for &lt;code&gt;/article/123&lt;/code&gt; for example could map to &lt;code&gt;article.php&lt;/code&gt; with a &lt;code&gt;/123&lt;/code&gt; PATH_INFO implicitly. You'd either have to guard your rules then with the commonplace &lt;code&gt;RewriteCond&lt;/code&gt;&lt;code&gt;!-f&lt;/code&gt;+&lt;code&gt;!-d&lt;/code&gt;, and/or disable PATH_INFO support, or perhaps just disable &lt;code&gt;Options -MultiViews&lt;/code&gt;.</source>
          <target state="translated">Например, запрос для &lt;code&gt;/article/123&lt;/code&gt; может отображаться в &lt;code&gt;article.php&lt;/code&gt; с неявным значением &lt;code&gt;/123&lt;/code&gt; PATH_INFO. Тогда вам придется либо защищать свои правила с помощью обычного &lt;code&gt;RewriteCond&lt;/code&gt; &lt;code&gt;!-f&lt;/code&gt; + &lt;code&gt;!-d&lt;/code&gt; и / или отключить поддержку PATH_INFO, либо, возможно, просто отключить &lt;code&gt;Options -MultiViews&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="433be67f13d6a6039d826a3ae6dabfa87aeb67b2" translate="yes" xml:space="preserve">
          <source>Again take note that such settings propagate from one &lt;code&gt;.htaccess&lt;/code&gt; to subfolders. You always should disable script execution (&lt;code&gt;SetHandler None&lt;/code&gt; and &lt;code&gt;Options -Exec&lt;/code&gt; or &lt;code&gt;php_flag engine off&lt;/code&gt; etc.) for static resources, and upload/ directories etc.</source>
          <target state="translated">Снова обратите внимание, что такие настройки распространяются из одного &lt;code&gt;.htaccess&lt;/code&gt; в подпапки. Вы всегда должны отключить выполнение скрипта ( &lt;code&gt;SetHandler None&lt;/code&gt; и &lt;code&gt;Options -Exec&lt;/code&gt; или &lt;code&gt;php_flag engine off&lt;/code&gt; и т. Д.) Для статических ресурсов, а также для загрузки / каталогов и т. Д.</target>
        </trans-unit>
        <trans-unit id="6c86f75fe82e60b09e41ad6e136753d057e4146d" translate="yes" xml:space="preserve">
          <source>Aliasing old .html paths to .php scripts</source>
          <target state="translated">Псевдонизирование старых .html-путей к .php-скриптам.</target>
        </trans-unit>
        <trans-unit id="11b618e5bc8ecbd76c5f38a2fe95c312ffdef55a" translate="yes" xml:space="preserve">
          <source>All of the below examples assume that you have already included &lt;code&gt;RewriteEngine On&lt;/code&gt; in your &lt;code&gt;.htaccess&lt;/code&gt; file.</source>
          <target state="translated">Все приведенные ниже примеры предполагают, что вы уже включили &lt;code&gt;RewriteEngine On&lt;/code&gt; в свой файл &lt;code&gt;.htaccess&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="27a22e164a7b422c5235f0d0b21b0dc4423cefeb" translate="yes" xml:space="preserve">
          <source>Alternatively you can utilize PHPs array parameters via &lt;code&gt;?p[]=$1&amp;amp;p[]=$2&amp;amp;p[]=3&lt;/code&gt; query string here - if your script merely prefers them pre-split.
(Though it's more common to just use a catch-all rule, and let the script itself expand the segments out of the REQUEST_URI.)</source>
          <target state="translated">В качестве альтернативы вы можете использовать параметры массива PHP через &lt;code&gt;?p[]=$1&amp;amp;p[]=$2&amp;amp;p[]=3&lt;/code&gt; строки запроса здесь - если ваш скрипт просто предпочитает их предварительно разделить. (Хотя более распространенным является использование правила перехвата всех и позволить самому сценарию расширять сегменты из REQUEST_URI.)</target>
        </trans-unit>
        <trans-unit id="e47f4e5a309adcf1b040c5210b5bc773d2eb8468" translate="yes" xml:space="preserve">
          <source>Alternatives to mod_rewrite</source>
          <target state="translated">Альтернативы mod_rewrite</target>
        </trans-unit>
        <trans-unit id="a2ff10145ba39fbaf7ef21bb614d55aaa77793a9" translate="yes" xml:space="preserve">
          <source>Among its many options, Apache provides &lt;code&gt;mod_alias&lt;/code&gt; features - which sometimes work just as well as &lt;code&gt;mod_rewrite&lt;/code&gt;s RewriteRules. Note that most of those must be set up in a &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; section however, not in per-directory &lt;code&gt;.htaccess&lt;/code&gt; config files.</source>
          <target state="translated">Среди множества опций Apache предоставляет функции &lt;code&gt;mod_alias&lt;/code&gt; , которые иногда работают так же хорошо, как и &lt;code&gt;mod_rewrite&lt;/code&gt; s RewriteRules. Обратите внимание, что большинство из них должны быть настроены в разделе &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; , но не в конфигурационных файлах &lt;code&gt;.htaccess&lt;/code&gt; для каждого каталога.</target>
        </trans-unit>
        <trans-unit id="af99096848ed8cb0eea299166a097937fc97e50b" translate="yes" xml:space="preserve">
          <source>An excerpt from your &lt;code&gt;access.log&lt;/code&gt; and &lt;code&gt;error.log&lt;/code&gt; to verify what the existing rules resolved to. Better yet, a &lt;code&gt;rewrite.log&lt;/code&gt; summary.</source>
          <target state="translated">Выдержка из вашего &lt;code&gt;access.log&lt;/code&gt; и &lt;code&gt;error.log&lt;/code&gt; , чтобы проверить, к чему разрешают существующие правила. Еще лучше, резюме &lt;code&gt;rewrite.log&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ba6a9ee04d540d46321a6a706abef24c659c81df" translate="yes" xml:space="preserve">
          <source>And a plain &lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_alias.html#alias&quot;&gt;&lt;code&gt;Alias&lt;/code&gt;&lt;/a&gt; helps with a few simple rewriting schemes as well.</source>
          <target state="translated">И простой &lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_alias.html#alias&quot;&gt; &lt;code&gt;Alias&lt;/code&gt; &lt;/a&gt; помогает с несколькими простыми схемами переписывания.</target>
        </trans-unit>
        <trans-unit id="ef9d8db5d3dfaf745489b854e4b254c552aab203" translate="yes" xml:space="preserve">
          <source>And it's commonly distributed for default &lt;code&gt;.htaccess&lt;/code&gt; rulesets with many open source projects. There it's just meant as fallback, and keeps &quot;ugly&quot; URLs work as default.</source>
          <target state="translated">И он обычно распространяется для наборов правил &lt;code&gt;.htaccess&lt;/code&gt; по умолчанию со многими проектами с открытым исходным кодом. Там он просто подразумевается как запасной вариант и по умолчанию сохраняет &amp;laquo;некрасивые&amp;raquo; URL-адреса.</target>
        </trans-unit>
        <trans-unit id="86da803ab52102ad28a3f8ecce52c7d4a8621043" translate="yes" xml:space="preserve">
          <source>And newcomer-friendly regex overviews even:</source>
          <target state="translated">И даже удобные для новичков регекс-обзоры:</target>
        </trans-unit>
        <trans-unit id="9d30c141612d532ddc9ac96890f3f30fd7097b62" translate="yes" xml:space="preserve">
          <source>And the &lt;a href=&quot;/questions/tagged/mod-rewrite&quot;&gt;mod-rewrite&lt;/a&gt;&lt;a href=&quot;https://stackoverflow.com/tags/mod-rewrite/info&quot;&gt;tag wiki references&lt;/a&gt;.</source>
          <target state="translated">И &lt;a href=&quot;/questions/tagged/mod-rewrite&quot;&gt;мод-переписать&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/tags/mod-rewrite/info&quot;&gt;теги вики-ссылок&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fe62757cd069906fac22465f642c8b25e045beee" translate="yes" xml:space="preserve">
          <source>And the short &lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/intro.html#regex&quot;&gt;Apache regex summary&lt;/a&gt;.</source>
          <target state="translated">И краткое &lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/intro.html#regex&quot;&gt;резюме по Apache&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5408edd8784686bb03f95bd3cfbf8d5c4d025f1b" translate="yes" xml:space="preserve">
          <source>Another often encountered rule is this:</source>
          <target state="translated">Другое часто встречающееся правило:</target>
        </trans-unit>
        <trans-unit id="bf5c556e294b25711a0b5a44327bf833cd3e101a" translate="yes" xml:space="preserve">
          <source>Apache &lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/remapping.html&quot;&gt;redirecting and remapping&lt;/a&gt; guide.</source>
          <target state="translated">Руководство по &lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/remapping.html&quot;&gt;перенаправлению и переназначению&lt;/a&gt; Apache.</target>
        </trans-unit>
        <trans-unit id="284ef6600e99697d0d7d8d2957a4e47dd26fa3af" translate="yes" xml:space="preserve">
          <source>Apache and PHP versions, OS type, filesystem, DOCUMENT_ROOT, and PHPs &lt;code&gt;$_SERVER&lt;/code&gt; environment if it's about a parameter mismatch.</source>
          <target state="translated">Версии Apache и PHP, тип ОС, файловая система, DOCUMENT_ROOT и среда PHPs &lt;code&gt;$_SERVER&lt;/code&gt; если речь идет о несоответствии параметров.</target>
        </trans-unit>
        <trans-unit id="cfe353f8853a9f04a5bdabbcdc53ebd267952363" translate="yes" xml:space="preserve">
          <source>As said before, you don't often want too generic rewrite patterns. It does however make sense to combine static and specific comparisons with a &lt;code&gt;.*&lt;/code&gt; sometimes.</source>
          <target state="translated">Как уже говорилось ранее, вам не часто нужны слишком общие шаблоны перезаписи. Однако иногда имеет смысл комбинировать статические и специфические сравнения с &lt;code&gt;.*&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d76c15ceb6076c092e88bddbb37d48859289c9a8" translate="yes" xml:space="preserve">
          <source>As you might know, Stack Overflow is very suitable for asking questions on mod_rewrite. Make them &lt;a href=&quot;https://stackoverflow.com/help/on-topic&quot;&gt;on-topic&lt;/a&gt;
by including prior research and attempts (avoid redundant answers), demonstrate basic &lt;a href=&quot;/questions/tagged/regex&quot;&gt;regex&lt;/a&gt; understanding, and:</source>
          <target state="translated">Как вы, возможно, знаете, Stack Overflow очень подходит для того, чтобы задавать вопросы по mod_rewrite. Сделайте их &lt;a href=&quot;https://stackoverflow.com/help/on-topic&quot;&gt;тематическими&lt;/a&gt; , включив предыдущие исследования и попытки (избегайте лишних ответов), продемонстрируйте базовое понимание &lt;a href=&quot;/questions/tagged/regex&quot;&gt;регулярных выражений&lt;/a&gt; и:</target>
        </trans-unit>
        <trans-unit id="dff94f3ae82bd649b875179b762ba9d36b194992" translate="yes" xml:space="preserve">
          <source>AskApache &lt;a href=&quot;http://www.askapache.com/htaccess/htaccess.html&quot;&gt;ultimate .htaccess guide&lt;/a&gt;</source>
          <target state="translated">AskApache &lt;a href=&quot;http://www.askapache.com/htaccess/htaccess.html&quot;&gt;Ultimate .htaccess руководство&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="84507ed5b78e9f12ea3e3bf7c3287d27ecaf1074" translate="yes" xml:space="preserve">
          <source>Capture the remainder</source>
          <target state="translated">Захватить остальное</target>
        </trans-unit>
        <trans-unit id="bc24e00f0d506c472f2be3ee5fbfbf1041e1d18a" translate="yes" xml:space="preserve">
          <source>Catch-all for a &lt;a href=&quot;https://stackoverflow.com/questions/8595964/redirect-all-traffic-to-index-php-using-mod-rewrite&quot;&gt;central dispatcher&lt;/a&gt; / front-controller script</source>
          <target state="translated">Catch-all для сценария &lt;a href=&quot;https://stackoverflow.com/questions/8595964/redirect-all-traffic-to-index-php-using-mod-rewrite&quot;&gt;центрального диспетчера&lt;/a&gt; / фронт-контроллера</target>
        </trans-unit>
        <trans-unit id="d5e664288f7b3dfc0c3af90aa9c7fec3210b2112" translate="yes" xml:space="preserve">
          <source>Change the link to a pretty link:</source>
          <target state="translated">Измените ссылку на симпатичную:</target>
        </trans-unit>
        <trans-unit id="edb59b056b2f75d0d2c02a13ae36b3214b3072e9" translate="yes" xml:space="preserve">
          <source>Check that your server has &lt;a href=&quot;https://stackoverflow.com/questions/9234289/verify-if-htaccess-file-is-running&quot;&gt;&lt;code&gt;AllowOverride All&lt;/code&gt; enabled&lt;/a&gt;. Otherwise your per-directory &lt;code&gt;.htaccess&lt;/code&gt; directives will go ignored, and RewriteRules won't work.</source>
          <target state="translated">Убедитесь, что на вашем сервере &lt;a href=&quot;https://stackoverflow.com/questions/9234289/verify-if-htaccess-file-is-running&quot;&gt;включена &lt;code&gt;AllowOverride All&lt;/code&gt; &lt;/a&gt; . В противном случае ваши директивы &lt;code&gt;.htaccess&lt;/code&gt; для каждого каталога будут игнорироваться, а RewriteRules не будет работать.</target>
        </trans-unit>
        <trans-unit id="43e02a0b48e4866d690b1c507a06fd483627e959" translate="yes" xml:space="preserve">
          <source>Clients serialize URLs with &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;%20&lt;/code&gt; for spaces. Yet in RewriteRules they're interpreted with literal characters for all relative path segments.</source>
          <target state="translated">Клиенты сериализуют URL-адреса с &lt;code&gt;+&lt;/code&gt; или &lt;code&gt;%20&lt;/code&gt; для пробелов. Тем не менее в RewriteRules они интерпретируются буквальными символами для всех относительных сегментов пути.</target>
        </trans-unit>
        <trans-unit id="46769ed18c1d5803b546e2a6cb333b52cf026f52" translate="yes" xml:space="preserve">
          <source>Comment your &lt;code&gt;.htaccess&lt;/code&gt;</source>
          <target state="translated">Прокомментируйте ваш &lt;code&gt;.htaccess&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2596cd693395e24245479f2e31c3c578dd845a59" translate="yes" xml:space="preserve">
          <source>Disable &lt;code&gt;MultiViews&lt;/code&gt; when virtual paths overlap</source>
          <target state="translated">Отключить &lt;code&gt;MultiViews&lt;/code&gt; , когда виртуальные пути перекрываются</target>
        </trans-unit>
        <trans-unit id="36883655179b6ab85d480c08f87d30869c5f79e2" translate="yes" xml:space="preserve">
          <source>Dispatching related URLs to different backends</source>
          <target state="translated">Отправка связанных URL-адресов на различные бэкэнды</target>
        </trans-unit>
        <trans-unit id="e0840dbd1ccf3f820f75b9f6644ac7b4d5be4bb3" translate="yes" xml:space="preserve">
          <source>Do's and Dont's in &lt;a href=&quot;https://stackoverflow.com/questions/286004/hidden-features-of-mod-rewrite&quot;&gt;Hidden features of mod_rewrite&lt;/a&gt;.</source>
          <target state="translated">Что можно и нельзя делать в &lt;a href=&quot;https://stackoverflow.com/questions/286004/hidden-features-of-mod-rewrite&quot;&gt;скрытых функциях mod_rewrite&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="834ed7f21faa963f6520622a494bfc3b58b1ba55" translate="yes" xml:space="preserve">
          <source>Don't use &lt;code&gt;RewriteBase&lt;/code&gt; unless needed</source>
          <target state="translated">Не используйте &lt;code&gt;RewriteBase&lt;/code&gt; без необходимости</target>
        </trans-unit>
        <trans-unit id="21f659d7912dac24fb0f151d94dc06f47abae6ad" translate="yes" xml:space="preserve">
          <source>Each of these placeholders is usually wrapped in &lt;code&gt;(&amp;hellip;)&lt;/code&gt; parentheses as capture group. And the whole pattern often in &lt;code&gt;^&amp;hellip;&amp;hellip;&amp;hellip;$&lt;/code&gt; start + end markers. Quoting &quot;patterns&quot; is optional.</source>
          <target state="translated">Каждый из этих заполнителей обычно заключен в &lt;code&gt;(&amp;hellip;)&lt;/code&gt; скобки как группа захвата. И весь паттерн часто в маркерах &lt;code&gt;^&amp;hellip;&amp;hellip;&amp;hellip;$&lt;/code&gt; start + end. Цитировать &amp;laquo;шаблоны&amp;raquo; необязательно.</target>
        </trans-unit>
        <trans-unit id="9b7029c092a10a71829815573236b3eb076aec29" translate="yes" xml:space="preserve">
          <source>Each set of &lt;code&gt;(&amp;hellip;)&lt;/code&gt; parentheses represents a regular expression that we can capture as a variable in the right hand side of the rule. In this example:</source>
          <target state="translated">Каждый набор &lt;code&gt;(&amp;hellip;)&lt;/code&gt; скобок представляет регулярное выражение, которое мы можем записать в виде переменной в правой части правила. В этом примере:</target>
        </trans-unit>
        <trans-unit id="db48663f832a68a6cc97ff86160706f75f79b09e" translate="yes" xml:space="preserve">
          <source>Else &lt;a href=&quot;http://www.regular-expressions.info/quickstart.html&quot;&gt;regexp.info&lt;/a&gt; for easy-to-understand basics.</source>
          <target state="translated">&lt;a href=&quot;http://www.regular-expressions.info/quickstart.html&quot;&gt;Еще regexp.info&lt;/a&gt; для простых для понимания основ.</target>
        </trans-unit>
        <trans-unit id="d919900346eee940f930da58592f8601027964df" translate="yes" xml:space="preserve">
          <source>Enable &lt;a href=&quot;http://httpd.apache.org/docs/2.4/mod/mod_negotiation.html&quot;&gt;MultiViews&lt;/a&gt; to hide the &lt;code&gt;.php&lt;/code&gt; extension</source>
          <target state="translated">Включить &lt;a href=&quot;http://httpd.apache.org/docs/2.4/mod/mod_negotiation.html&quot;&gt;MultiViews,&lt;/a&gt; чтобы скрыть расширение &lt;code&gt;.php&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d89cfbe7e9590212bd8db77d7953dd70c27090a7" translate="yes" xml:space="preserve">
          <source>Enable &lt;code&gt;mod_rewrite&lt;/code&gt; and &lt;code&gt;.htaccess&lt;/code&gt;</source>
          <target state="translated">Включить &lt;code&gt;mod_rewrite&lt;/code&gt; и &lt;code&gt;.htaccess&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="67f47d9d91b10c7848ba3ab2eb234427fa6f3b4d" translate="yes" xml:space="preserve">
          <source>Ensuring URLs are long-lived (AKA &lt;a href=&quot;https://en.wikipedia.org/wiki/Permalink&quot;&gt;permalinks&lt;/a&gt;).</source>
          <target state="translated">Обеспечение того, чтобы URL-адреса были долгоживущими ( &lt;a href=&quot;https://en.wikipedia.org/wiki/Permalink&quot;&gt;постоянные ссылки&lt;/a&gt; AKA).</target>
        </trans-unit>
        <trans-unit id="0d77e818c790de6920af7153aa064da2c1e29276" translate="yes" xml:space="preserve">
          <source>Even a plain &lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/core.html#errordocument&quot;&gt;&lt;code&gt;ErrorDocument&lt;/code&gt;&lt;/a&gt; directive could be used to let a PHP script handle virtual paths. Note that this is a kludgy workaround however, prohibits anything but GET requests, and floods the error.log by definition.</source>
          <target state="translated">Даже простая директива &lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/core.html#errordocument&quot;&gt; &lt;code&gt;ErrorDocument&lt;/code&gt; &lt;/a&gt; может использоваться, чтобы позволить PHP-скрипту обрабатывать виртуальные пути. Обратите внимание, что это хитрый обходной путь, однако он запрещает все, кроме запросов GET, и по определению создает файл error.log.</target>
        </trans-unit>
        <trans-unit id="83ec6145cb84f0dee900769119e35d59b3e7d752" translate="yes" xml:space="preserve">
          <source>Firstly, mod_rewrite does not randomly disengage. (If it did, you'd have bigger problems).</source>
          <target state="translated">Во-первых,mod_rewrite не отключается случайным образом.(Если бы это было так,у вас были бы проблемы посерьезнее).</target>
        </trans-unit>
        <trans-unit id="5d728758adcdd5154d3be55552c1c061ef1489b2" translate="yes" xml:space="preserve">
          <source>Flags</source>
          <target state="translated">Flags</target>
        </trans-unit>
        <trans-unit id="b6f02d776f09f6cec4c828de71faf43799655041" translate="yes" xml:space="preserve">
          <source>Flexible segments for virtual paths</source>
          <target state="translated">Гибкие сегменты для виртуальных путей</target>
        </trans-unit>
        <trans-unit id="09583105ba9e06aa15f198d86b54559183928403" translate="yes" xml:space="preserve">
          <source>For the also common</source>
          <target state="translated">Для тех,кто также часто</target>
        </trans-unit>
        <trans-unit id="8ca49966ea1f0234f7d955d0b2e1ff4363d986f2" translate="yes" xml:space="preserve">
          <source>Fret not.</source>
          <target state="translated">Не волнуйся.</target>
        </trans-unit>
        <trans-unit id="8f0e67b093d5ce42b53747a234dad6c49e986688" translate="yes" xml:space="preserve">
          <source>Having readable and obvious resource schemes.</source>
          <target state="translated">Имея читабельные и очевидные схемы ресурсов.</target>
        </trans-unit>
        <trans-unit id="10aa48f30ba9eb1d996b4bdcdaa78b540e6ae835" translate="yes" xml:space="preserve">
          <source>However don't sacrifice unique requirements for conformism.</source>
          <target state="translated">Однако не жертвуйте уникальными требованиями для конформизма.</target>
        </trans-unit>
        <trans-unit id="1fba90fa899b377cb4751fbd5881d6c42e5b6ba4" translate="yes" xml:space="preserve">
          <source>However you &lt;strong&gt;don't want&lt;/strong&gt; that usually in your own &lt;code&gt;.htaccess&lt;/code&gt; files.</source>
          <target state="translated">Однако обычно вы &lt;strong&gt;этого не хотите&lt;/strong&gt; в своих собственных файлах &lt;code&gt;.htaccess&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="daa5192ba9695ec4caf7b9bc31881436591ba4e2" translate="yes" xml:space="preserve">
          <source>If you copy examples from somewhere, take care to include a &lt;code&gt;# comment and origin link&lt;/code&gt;. While it's merely bad manners to omit attribution,
it often really hurts maintenance later. Document any code or tutorial source. In particular while unversed you should be
all the more interested in not treating them like magic blackboxes.</source>
          <target state="translated">Если вы копируете примеры откуда-то, постарайтесь включить &lt;code&gt;# comment and origin link&lt;/code&gt; . Несмотря на то, что пренебрегать атрибуцией просто нехорошо, это часто наносит ущерб обслуживанию. Документирование любого кода или учебного источника. В частности, когда вы не обращаете внимания, вы должны быть заинтересованы в том, чтобы не относиться к ним как к волшебным черным ящикам.</target>
        </trans-unit>
        <trans-unit id="7bc07c648dc6661d82cf032a6a1256aa5c8a86f1" translate="yes" xml:space="preserve">
          <source>If you have similar rules for multiple virtual page paths, then you can match and compact them with &lt;code&gt;|&lt;/code&gt; alternative lists. And again just reassign them to internal GET parameters:</source>
          <target state="translated">Если у вас есть похожие правила для нескольких путей к виртуальным страницам, вы можете сопоставить и сжать их с помощью &lt;code&gt;|&lt;/code&gt; альтернативные списки. И снова просто переназначить их на внутренние параметры GET:</target>
        </trans-unit>
        <trans-unit id="40f9b2a7a4a9787f861888f20e6f6fee7c69fed5" translate="yes" xml:space="preserve">
          <source>If you need up to five path segments, then copy this scheme along into five rules. You can of course use a more specific &lt;code&gt;[^/]+&lt;/code&gt; placeholder each.
Here the ordering isn't as important, as neither overlaps. So having the most frequently used paths first is okay.</source>
          <target state="translated">Если вам нужно до пяти сегментов пути, скопируйте эту схему в пять правил. Конечно, вы можете использовать более конкретный &lt;code&gt;[^/]+&lt;/code&gt; заполнитель каждый. Здесь порядок не так важен, так как ни один не перекрывается. Так что иметь наиболее часто используемые пути в первую очередь хорошо.</target>
        </trans-unit>
        <trans-unit id="f71191a5e264cb63bd6f631ed5e3481ceef06433" translate="yes" xml:space="preserve">
          <source>If you're using RewriteRules in a per-directory config file, then worrying about regex performance is pointless. Apache retains
compiled PCRE patterns longer than a PHP process with a common routing framework. For high-traffic sites you should however consider
moving rulesets into the vhost server configuration, once they've been battle-tested.</source>
          <target state="translated">Если вы используете RewriteRules в конфигурационном файле для каждой директории,то бессмысленно беспокоиться о производительности regex.Apache сохраняет скомпилированные шаблоны PCRE дольше,чем PHP-процесс с общим фреймворком маршрутизации.Для сайтов с высоким трафиком,однако,следует подумать о переносе наборов правил в конфигурацию сервера vhost,после того,как они будут протестированы в битве.</target>
        </trans-unit>
        <trans-unit id="273b2c2b5a292ce481ed96ebfa83369d2f85daa8" translate="yes" xml:space="preserve">
          <source>In this case, prefer the optionalized &lt;code&gt;^/?&lt;/code&gt; directory separator prefix. This allows to move RewriteRules freely between PerDir and server
config files.</source>
          <target state="translated">В этом случае предпочтите необязательный &lt;code&gt;^/?&lt;/code&gt; префикс разделителя каталогов. Это позволяет свободно перемещать RewriteRules между PerDir и файлами конфигурации сервера.</target>
        </trans-unit>
        <trans-unit id="aef9108cecb21bfcd735b644678196233a16cf35" translate="yes" xml:space="preserve">
          <source>Include &lt;em&gt;full&lt;/em&gt; examples of input URLs, falsly rewritten target paths, your real directory structure.</source>
          <target state="translated">Включите &lt;em&gt;полные&lt;/em&gt; примеры входных URL-адресов, ошибочно переписанных целевых путей, вашей реальной структуры каталогов.</target>
        </trans-unit>
        <trans-unit id="f296f7312d86d0df48d961f47b8c11e9d5bcef5b" translate="yes" xml:space="preserve">
          <source>Introducing shortcuts like &lt;code&gt;http://example.com/article/531&lt;/code&gt; to existing PHP scripts is also easy. The numeric placeholder can just be remapped to a &lt;code&gt;$_GET&lt;/code&gt; parameter:</source>
          <target state="translated">Введение ярлыков, таких как &lt;code&gt;http://example.com/article/531&lt;/code&gt; , в существующие сценарии PHP также очень просто. Числовой заполнитель можно просто переназначить на параметр &lt;code&gt;$_GET&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="deccb5a329125b3a2543074f3d0db866e73f9a4d" translate="yes" xml:space="preserve">
          <source>It &lt;em&gt;does&lt;/em&gt; make sense in &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; sections - if it was combined with another fallback option, such as ScriptAliasMatch. (But nobody ever does that).</source>
          <target state="translated">Это &lt;em&gt;имеет&lt;/em&gt; смысл в разделах &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; - если он был объединен с другой альтернативной опцией, такой как ScriptAliasMatch. (Но никто никогда не делает это).</target>
        </trans-unit>
        <trans-unit id="0301879fb32bdc77402f7413db66117a874fb2e3" translate="yes" xml:space="preserve">
          <source>It makes sense to use with individual web applications in deeper subdirectories. It can shorten RewriteRule patterns in such cases. Generally it's best to prefer relative path specifiers in per-directory rule sets.</source>
          <target state="translated">Это имеет смысл использовать с отдельными веб-приложениями в более глубоких подкаталогах.В таких случаях он может сократить шаблоны RewriteRule.Обычно лучше всего предпочитать относительные спецификаторы путей в наборах правил для каждой директории.</target>
        </trans-unit>
        <trans-unit id="5f40de2ca60f034f9b89abc054587e9fe0b8a168" translate="yes" xml:space="preserve">
          <source>It's meant to prevent HTTP &lt;code&gt;500&lt;/code&gt; errors. What it usually accomplishes is gracing your users with HTTP &lt;code&gt;404&lt;/code&gt; errors instead. (Not &lt;em&gt;so much&lt;/em&gt; more user-friendly if you think about it.)</source>
          <target state="translated">Он предназначен для предотвращения ошибок HTTP &lt;code&gt;500&lt;/code&gt; . Обычно это дает вашим пользователям ошибки HTTP &lt;code&gt;404&lt;/code&gt; . (Не &lt;em&gt;намного&lt;/em&gt; удобнее, если подумать.)</target>
        </trans-unit>
        <trans-unit id="fe7d59926a852a088beeaaee3db79063e7eb9f5e" translate="yes" xml:space="preserve">
          <source>It's not &quot;SEO&quot;-URLs</source>
          <target state="translated">Это не &quot;SEO&quot; -URLs.</target>
        </trans-unit>
        <trans-unit id="60cd4fcec9f18f17da87abdc46607c7a489cd1f3" translate="yes" xml:space="preserve">
          <source>It's not &lt;em&gt;that pretty&lt;/em&gt; in browser address bars, but you can use spaces in URLs. For rewrite patterns use backslash-escaped &lt;code&gt;\␣&lt;/code&gt; spaces.
Else just &lt;code&gt;&quot;&lt;/code&gt;-quote the whole pattern or substitution:</source>
          <target state="translated">Это не так &lt;em&gt;красиво&lt;/em&gt; в адресной строке браузера, но вы можете использовать пробелы в URL. Для перезаписи шаблонов используйте пробелы с обратной косой чертой &lt;code&gt;\␣&lt;/code&gt; Остальное просто &lt;code&gt;&quot;&lt;/code&gt; - процитируйте весь шаблон или подстановку:</target>
        </trans-unit>
        <trans-unit id="bfc7e888699007054c60bf571793536b40294c92" translate="yes" xml:space="preserve">
          <source>Left hand side of the rule</source>
          <target state="translated">Левая сторона правила</target>
        </trans-unit>
        <trans-unit id="6bee440a86949e7ccce05e9ca4299268e30a2049" translate="yes" xml:space="preserve">
          <source>Lets take this example:</source>
          <target state="translated">Давайте возьмем этот пример:</target>
        </trans-unit>
        <trans-unit id="3d960efa71adf65b880313cd6447fa5c5f98e928" translate="yes" xml:space="preserve">
          <source>Look through our &lt;a href=&quot;https://stackoverflow.com/questions/tagged/mod-rewrite?sort=frequent&quot;&gt;most popular mod-rewrite&lt;/a&gt; questions and answers.</source>
          <target state="translated">Посмотрите наши &lt;a href=&quot;https://stackoverflow.com/questions/tagged/mod-rewrite?sort=frequent&quot;&gt;самые популярные моды переписать&lt;/a&gt; вопросы и ответы.</target>
        </trans-unit>
        <trans-unit id="fe7bfd847a60a74d96670220635ed35de8d744bc" translate="yes" xml:space="preserve">
          <source>Many basic virtual URL schemes can be achieved without using RewriteRules. Apache allows PHP scripts to be invoked without &lt;code&gt;.php&lt;/code&gt; extension, and with a virtual &lt;code&gt;PATH_INFO&lt;/code&gt; argument.</source>
          <target state="translated">Многие базовые схемы виртуальных URL могут быть реализованы без использования RewriteRules. Apache позволяет вызывать сценарии PHP без расширения &lt;code&gt;.php&lt;/code&gt; и с виртуальным аргументом &lt;code&gt;PATH_INFO&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2488526091aa3f6c4f0c336210e3a1890b4fed46" translate="yes" xml:space="preserve">
          <source>Many copy+paste examples contain a &lt;code&gt;RewriteBase /&lt;/code&gt; directive. Which happens to be the implicit default anyway. So you don't actually need this. It's a workaround for fancy VirtualHost rewriting schemes, and misguessed DOCUMENT_ROOT paths for some shared hosters.</source>
          <target state="translated">Многие примеры копирования + вставки содержат директиву &lt;code&gt;RewriteBase /&lt;/code&gt; . Что в любом случае оказывается неявным значением по умолчанию. Так что вам на самом деле это не нужно. Это обходной путь для причудливых схем перезаписи VirtualHost и неправильных путей DOCUMENT_ROOT для некоторых общих хостеров.</target>
        </trans-unit>
        <trans-unit id="b6ec4f0b45ba608dc99259ba104501c3006e2b98" translate="yes" xml:space="preserve">
          <source>Most rules you'll encounter map a constrained set of &lt;code&gt;/&amp;hellip;/&lt;/code&gt; resource path segments to individual GET parameters. Some scripts &lt;a href=&quot;https://stackoverflow.com/q/3655893&quot;&gt;handle a variable number of options&lt;/a&gt; however.
The Apache regexp engine doesn't allow optionalizing an arbitrary number of them. But you can easily expand it into a rule block yourself:</source>
          <target state="translated">Большинство правил, с которыми вы столкнетесь, отображают ограниченный набор сегментов пути &lt;code&gt;/&amp;hellip;/&lt;/code&gt; resource на отдельные параметры GET. Однако некоторые сценарии &lt;a href=&quot;https://stackoverflow.com/q/3655893&quot;&gt;обрабатывают переменное количество параметров&lt;/a&gt; . Движок регулярных выражений Apache не позволяет произвольно выбирать их число. Но вы можете легко развернуть его в блок правил самостоятельно:</target>
        </trans-unit>
        <trans-unit id="91486619ecb50e8edbf96d3a9061ef481aa26b8d" translate="yes" xml:space="preserve">
          <source>Mostly just output &lt;code&gt;[^/]+&lt;/code&gt; generic placeholders, but likely suffices for trivial sites.</source>
          <target state="translated">В основном просто выводим &lt;code&gt;[^/]+&lt;/code&gt; общие заполнители, но, скорее всего, достаточно для тривиальных сайтов.</target>
        </trans-unit>
        <trans-unit id="1d74e7db0e0fdb1eefe36a8b715de7d180085193" translate="yes" xml:space="preserve">
          <source>None of the modern search engines are really disturbed by &lt;code&gt;.html&lt;/code&gt; and &lt;code&gt;.php&lt;/code&gt; in path segments, or &lt;code&gt;?id=123&lt;/code&gt; query strings for that matter. Search engines of old, such as AltaVista, &lt;em&gt;did&lt;/em&gt; avoid crawling websites with potentially ambigious access paths. Modern crawlers are often even craving for deep web resources.</source>
          <target state="translated">Ни одна из современных поисковых систем действительно не обеспокоена &lt;code&gt;.html&lt;/code&gt; и &lt;code&gt;.php&lt;/code&gt; в сегментах пути или &lt;code&gt;?id=123&lt;/code&gt; строк запроса в этом отношении. Старые поисковые системы, такие как AltaVista, избегали сканирования веб-сайтов с потенциально неоднозначными путями доступа. Современные сканеры часто даже жаждут глубоких веб-ресурсов.</target>
        </trans-unit>
        <trans-unit id="f315ee6a0a369040aac7c320f6906f7802ad2aa3" translate="yes" xml:space="preserve">
          <source>Note how this example just uses &lt;code&gt;[END]&lt;/code&gt; instead of &lt;code&gt;[L]&lt;/code&gt; to safely alternate. For older Apache 2.2 versions you can use other workarounds, besides also remapping
query string parameters for example:
&lt;a href=&quot;https://stackoverflow.com/questions/11629896/mod-rewrite-redirect-url-with-query-string-to-pretty-url&quot;&gt;Redirect ugly to pretty URL, remap  back to the ugly path, without infinite loops&lt;/a&gt;</source>
          <target state="translated">Обратите внимание, что этот пример просто использует &lt;code&gt;[END]&lt;/code&gt; вместо &lt;code&gt;[L]&lt;/code&gt; для безопасного чередования. В более старых версиях Apache 2.2 вы можете использовать другие обходные пути, кроме того, например, переназначение параметров строки запроса, например: &lt;a href=&quot;https://stackoverflow.com/questions/11629896/mod-rewrite-redirect-url-with-query-string-to-pretty-url&quot;&gt;перенаправить некрасиво на симпатичный URL, переназначить обратно на некрасивый путь без бесконечных циклов&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dc7223f3c5a01865151b0532dd2483e959ec3aa6" translate="yes" xml:space="preserve">
          <source>Note that &lt;em&gt;your script&lt;/em&gt;&lt;strong&gt;must&lt;/strong&gt; be able (or be adapted) to map those titles back to database-ids. RewriteRules alone can't create or guess information out of thin air.</source>
          <target state="translated">Обратите внимание, что &lt;em&gt;ваш скрипт&lt;/em&gt; &lt;strong&gt;должен&lt;/strong&gt; иметь возможность (или быть адаптирован) для сопоставления этих заголовков с идентификаторами базы данных. Только RewriteRules не может создавать или угадывать информацию из воздуха.</target>
        </trans-unit>
        <trans-unit id="0c2965817441b972dd6422436654a2df9f92c29e" translate="yes" xml:space="preserve">
          <source>Note that MultiViews has a different/broader purpose though. It incurs a &lt;em&gt;very minor&lt;/em&gt; performance penalty, because Apache always looks for other files with matching basenames. It's actually meant for &lt;a href=&quot;https://en.wikipedia.org/wiki/Content_negotiation&quot;&gt;Content-Negotiation&lt;/a&gt;, so browsers receive the best alternative among available resources (such as &lt;code&gt;article.en.php&lt;/code&gt;, &lt;code&gt;article.fr.php&lt;/code&gt;, &lt;code&gt;article.jp.mp4&lt;/code&gt;).</source>
          <target state="translated">Обратите внимание, что MultiViews имеет другое / более широкое назначение. Это приводит к &lt;em&gt;очень незначительным потерям&lt;/em&gt; производительности, потому что Apache всегда ищет другие файлы с соответствующими базовыми именами. На самом деле он предназначен для &lt;a href=&quot;https://en.wikipedia.org/wiki/Content_negotiation&quot;&gt;Content-Negotiation&lt;/a&gt; , поэтому браузеры получают лучшую альтернативу среди доступных ресурсов (таких как &lt;code&gt;article.en.php&lt;/code&gt; , &lt;code&gt;article.fr.php&lt;/code&gt; , &lt;code&gt;article.jp.mp4&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="421dacfb060756bed4005a3f4a19279a8d0a45ad" translate="yes" xml:space="preserve">
          <source>Note that RewriteCond/RewriteRule combos can be more complex, with matches (&lt;code&gt;%1&lt;/code&gt; and &lt;code&gt;$1&lt;/code&gt;) interacting in both directions even:</source>
          <target state="translated">Обратите внимание, что комбинации RewriteCond / RewriteRule могут быть более сложными, при этом совпадения ( &lt;code&gt;%1&lt;/code&gt; и &lt;code&gt;$1&lt;/code&gt; ) взаимодействуют даже в обоих направлениях:</target>
        </trans-unit>
        <trans-unit id="ed12e6e43435545c959aae1c59102e543bb2d305" translate="yes" xml:space="preserve">
          <source>Note that this doesn't copy a query string along, etc.</source>
          <target state="translated">Обратите внимание,что при этом не копируется строка запроса и т.д.</target>
        </trans-unit>
        <trans-unit id="8965d98cc2645af0da6247a2206e79a972c91350" translate="yes" xml:space="preserve">
          <source>Now take this with a grain of salt. Not every advise can be generalized to all contexts.
This is just a simple summary of well-known and a few unobvious stumbling blocks:</source>
          <target state="translated">Теперь возьми это с зерном соли.Не каждый совет можно обобщить во всех контекстах.Это всего лишь краткое изложение хорошо известных и нескольких неочевидных камней преткновения:</target>
        </trans-unit>
        <trans-unit id="d1728adec405a6b225772abbd6bd1fd0974106ab" translate="yes" xml:space="preserve">
          <source>Now the more complex pattern &lt;code&gt;(?:/([^/])+)?&lt;/code&gt; there simply wraps a &lt;em&gt;non-capturing&lt;/em&gt;&lt;code&gt;(?:&amp;hellip;)&lt;/code&gt; group, and makes it optional &lt;code&gt;)?&lt;/code&gt;. The contained
placeholder &lt;code&gt;([^/]+)&lt;/code&gt; would be substitution pattern &lt;code&gt;$2&lt;/code&gt;, but be empty if there's no middle &lt;code&gt;/&amp;hellip;/&lt;/code&gt; path.</source>
          <target state="translated">Теперь более сложный шаблон &lt;code&gt;(?:/([^/])+)?&lt;/code&gt; там просто оборачивает &lt;em&gt;незаписывающую&lt;/em&gt; &lt;code&gt;(?:&amp;hellip;)&lt;/code&gt; группу и делает ее необязательной &lt;code&gt;)?&lt;/code&gt; , Содержащийся заполнитель &lt;code&gt;([^/]+)&lt;/code&gt; будет шаблоном подстановки &lt;code&gt;$2&lt;/code&gt; , но будет пустым, если нет среднего пути &lt;code&gt;/&amp;hellip;/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="45683ef59f00892047993aca6b972c98e9a0ee43" translate="yes" xml:space="preserve">
          <source>Now this &lt;code&gt;/virtual/path&lt;/code&gt; shows up in PHP as &lt;a href=&quot;https://secure.php.net/manual/en/reserved.variables.server.php#~PATH_INFO&quot;&gt;&lt;code&gt;$_SERVER[&quot;PATH_INFO&quot;]&lt;/code&gt;&lt;/a&gt; where you can handle any extra arguments however you like.</source>
          <target state="translated">Теперь этот &lt;code&gt;/virtual/path&lt;/code&gt; отображается в PHP как &lt;a href=&quot;https://secure.php.net/manual/en/reserved.variables.server.php#~PATH_INFO&quot;&gt; &lt;code&gt;$_SERVER[&quot;PATH_INFO&quot;]&lt;/code&gt; &lt;/a&gt; где вы можете обрабатывать любые дополнительные аргументы так, как вам нравится.</target>
        </trans-unit>
        <trans-unit id="f37afffd1053ca926ca822a035ccdafe43d5cba9" translate="yes" xml:space="preserve">
          <source>Now this can have some security and performance implications, because all extensionless files would be piped through PHP now. Therefore you can alternatively set this behaviour for individual files only:</source>
          <target state="translated">Теперь это может иметь некоторые последствия для безопасности и производительности,потому что все файлы без расширений теперь будут проходить через PHP.Поэтому вы можете альтернативно установить такое поведение только для отдельных файлов:</target>
        </trans-unit>
        <trans-unit id="7867d100537d9098a99e4b192ff17b1002e490bb" translate="yes" xml:space="preserve">
          <source>Now this handles both &lt;code&gt;http://example.com/blog/123&lt;/code&gt; and &lt;code&gt;/blog/123/&lt;/code&gt;. And the</source>
          <target state="translated">Теперь это обрабатывает как &lt;code&gt;http://example.com/blog/123&lt;/code&gt; ,так и &lt;code&gt;/blog/123/&lt;/code&gt; . И</target>
        </trans-unit>
        <trans-unit id="b48064afbe59853d0a5c42248122b5a14e1f1c10" translate="yes" xml:space="preserve">
          <source>Now you could just skip passing the &lt;code&gt;title=$2&lt;/code&gt; anyway, because your script will typically rely on the database-id anyway. The &lt;code&gt;-title-slug&lt;/code&gt; has become arbitrary URL decoration.</source>
          <target state="translated">Теперь вы можете просто пропустить передачу &lt;code&gt;title=$2&lt;/code&gt; любом случае, потому что ваш скрипт в любом случае будет полагаться на идентификатор базы данных. &lt;code&gt;-title-slug&lt;/code&gt; стал произвольным украшением URL.</target>
        </trans-unit>
        <trans-unit id="ed748a9515391cfb1af34a967ee70140171d18c6" translate="yes" xml:space="preserve">
          <source>Nowadays &lt;a href=&quot;http://httpd.apache.org/docs/2.4/en/mod/core.html#acceptpathinfo&quot;&gt;&lt;code&gt;AcceptPathInfo On&lt;/code&gt;&lt;/a&gt; is often enabled by default. Which basically allows &lt;code&gt;.php&lt;/code&gt; and other resource URLs to carry a virtual argument:</source>
          <target state="translated">В настоящее время &lt;a href=&quot;http://httpd.apache.org/docs/2.4/en/mod/core.html#acceptpathinfo&quot;&gt; &lt;code&gt;AcceptPathInfo On&lt;/code&gt; &lt;/a&gt; часто включен по умолчанию. Что в основном позволяет URL-адресам &lt;code&gt;.php&lt;/code&gt; и других ресурсов содержать виртуальный аргумент:</target>
        </trans-unit>
        <trans-unit id="0afd56482356096622a5660a16723100cd4fa634" translate="yes" xml:space="preserve">
          <source>Numeric identifiers</source>
          <target state="translated">Числовые идентификаторы</target>
        </trans-unit>
        <trans-unit id="5f378de1046672c4099905b347e55ac91af76926" translate="yes" xml:space="preserve">
          <source>Obviously &lt;a href=&quot;https://stackoverflow.com/questions/869092/how-to-enable-mod-rewrite-for-apache-2-2&quot;&gt;have &lt;code&gt;mod_rewrite&lt;/code&gt; enabled&lt;/a&gt; in your &lt;code&gt;httpd.conf&lt;/code&gt; modules section.</source>
          <target state="translated">Очевидно, &lt;a href=&quot;https://stackoverflow.com/questions/869092/how-to-enable-mod-rewrite-for-apache-2-2&quot;&gt;что &lt;code&gt;mod_rewrite&lt;/code&gt; включен&lt;/a&gt; в разделе модулей &lt;code&gt;httpd.conf&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5ddb71358a682b6ae3c886c00e05b6ee0351e570" translate="yes" xml:space="preserve">
          <source>Occasionally it's suitable to alternate between &lt;code&gt;/&lt;/code&gt;-delimiters and &lt;code&gt;:&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; in the same rule even. Or have two RewriteRules again to map variants onto different scripts.</source>
          <target state="translated">Иногда целесообразно чередовать &lt;code&gt;/&lt;/code&gt; -delimiters и &lt;code&gt;:&lt;/code&gt; или &lt;code&gt;.&lt;/code&gt; в том же правиле даже. Или снова используйте два RewriteRules для сопоставления вариантов с разными сценариями.</target>
        </trans-unit>
        <trans-unit id="382738c5157f5ee201cf389409adf7a1a5d95f2c" translate="yes" xml:space="preserve">
          <source>Oft-used placeholders</source>
          <target state="translated">Часто используемые пайщики</target>
        </trans-unit>
        <trans-unit id="a4d4b59e499759015fe91837364116829ea9c319" translate="yes" xml:space="preserve">
          <source>Often simply by adding &lt;code&gt;&amp;lt;base href=&quot;/index&quot;&amp;gt;&lt;/code&gt; into your HTML &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section.
This implicitly rebinds relative references to what they were before.</source>
          <target state="translated">Часто просто добавив &lt;code&gt;&amp;lt;base href=&quot;/index&quot;&amp;gt;&lt;/code&gt; в раздел HTML &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; . Это косвенно связывает относительные ссылки на то, что они были раньше.</target>
        </trans-unit>
        <trans-unit id="64dd841b1c90885ac80fd0d55f39f4aa949aefcb" translate="yes" xml:space="preserve">
          <source>Often you can figure out how a RewriteRule misbehaves just from looking at your &lt;code&gt;error.log&lt;/code&gt; and &lt;code&gt;access.log&lt;/code&gt;.
Correlate access times to see which request path originally came in, and which path/file Apache couldn't resolve to (error 404/500).</source>
          <target state="translated">Часто вы можете понять, как RewriteRule ведет себя неправильно, просто взглянув на свои &lt;code&gt;error.log&lt;/code&gt; и &lt;code&gt;access.log&lt;/code&gt; . Соотнесите время доступа, чтобы увидеть, какой путь запроса был изначально введен, и какой путь / файл не удалось разрешить Apache (ошибка 404/500).</target>
        </trans-unit>
        <trans-unit id="0df724c30480f21eaa050c58057282993948b80e" translate="yes" xml:space="preserve">
          <source>Only using server-absolute references &lt;code&gt;href=&quot;/old.html&quot;&lt;/code&gt; or &lt;code&gt;src=&quot;/logo.png&quot;&lt;/code&gt;</source>
          <target state="translated">Только с использованием серверных абсолютных ссылок &lt;code&gt;href=&quot;/old.html&quot;&lt;/code&gt; или &lt;code&gt;src=&quot;/logo.png&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="154c95281c3d555dc7266790046d6d0c55b5ef77" translate="yes" xml:space="preserve">
          <source>Optional segments</source>
          <target state="translated">Дополнительные сегменты</target>
        </trans-unit>
        <trans-unit id="bf0dfa52ba48f0808d587223064703f75f816c3a" translate="yes" xml:space="preserve">
          <source>Optional trailing &lt;code&gt;/&lt;/code&gt; slash</source>
          <target state="translated">Дополнительный трейлинг &lt;code&gt;/&lt;/code&gt; косая черта</target>
        </trans-unit>
        <trans-unit id="bd4bedf42533e868451f1a4c9022eac830c1394e" translate="yes" xml:space="preserve">
          <source>Ordering is important</source>
          <target state="translated">Заказ важен</target>
        </trans-unit>
        <trans-unit id="ed609198a95c9be6f04ce9d1d822a9807996d79c" translate="yes" xml:space="preserve">
          <source>Other Apache rewriting schemes</source>
          <target state="translated">Другие схемы переписывания Apache</target>
        </trans-unit>
        <trans-unit id="81af1ba5d512fd109cf684ae0943af6787277fa0" translate="yes" xml:space="preserve">
          <source>Other common names, aliases, terms for clean URLs: &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services&quot;&gt;RESTful&lt;/a&gt; URLs, user-friendly URLs, &lt;a href=&quot;http://en.wikipedia.org/wiki/Search_engine_optimization&quot;&gt;SEO&lt;/a&gt;-friendly URLs, &lt;a href=&quot;https://en.wikipedia.org/wiki/Clean_URL#Slug&quot;&gt;slugging&lt;/a&gt;, and MVC URLs (probably a misnomer)</source>
          <target state="translated">Другие распространенные имена, псевдонимы, термины для чистых URL-адресов: &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services&quot;&gt;RESTful-&lt;/a&gt; URL-адреса, удобные для пользователя URL-адреса, оптимизированные для &lt;a href=&quot;http://en.wikipedia.org/wiki/Search_engine_optimization&quot;&gt;SEO&lt;/a&gt; URL-адреса, &lt;a href=&quot;https://en.wikipedia.org/wiki/Clean_URL#Slug&quot;&gt;блокировка&lt;/a&gt; и URL-адреса MVC (вероятно, неправильно)</target>
        </trans-unit>
        <trans-unit id="a2d1e8d66be83edd5b4bb78c85706e2242b6ca4d" translate="yes" xml:space="preserve">
          <source>Other common uses are remapping obsolete &lt;code&gt;.html&lt;/code&gt; paths to newer &lt;code&gt;.php&lt;/code&gt; handlers, or just aliasing directory names only for individual (actual/real) files.</source>
          <target state="translated">Другим распространенным применением является переназначение устаревших путей &lt;code&gt;.html&lt;/code&gt; в новые обработчики &lt;code&gt;.php&lt;/code&gt; или просто наложение имен каталогов только для отдельных (реальных / реальных) файлов.</target>
        </trans-unit>
        <trans-unit id="e22c6117eec085066b8864ee86848a7fc70b8391" translate="yes" xml:space="preserve">
          <source>Other delimiters than just &lt;code&gt;/&lt;/code&gt; path slashes</source>
          <target state="translated">Другие разделители, кроме косых черт</target>
        </trans-unit>
        <trans-unit id="ad8bf9cefe3a521ea2a0949d248eaeec3191518a" translate="yes" xml:space="preserve">
          <source>Our &lt;a href=&quot;/questions/tagged/regex&quot;&gt;regex&lt;/a&gt;&lt;a href=&quot;https://stackoverflow.com/tags/regex/info&quot;&gt;tag wiki&lt;/a&gt; for a syntax compendium.</source>
          <target state="translated">Наш &lt;a href=&quot;https://stackoverflow.com/tags/regex/info&quot;&gt;тег&lt;/a&gt; &lt;a href=&quot;/questions/tagged/regex&quot;&gt;регулярного выражения&lt;/a&gt; вики для синтаксического сборника.</target>
        </trans-unit>
        <trans-unit id="ed7ce6a62d983c526aa157e7a48cda050f92f59e" translate="yes" xml:space="preserve">
          <source>Ping-Pong (redirects and rewrites in unison)</source>
          <target state="translated">Пинг-понг (перенаправляет и переписывает в унисон)</target>
        </trans-unit>
        <trans-unit id="735003089a236c0d060fcfb96e6c5c0337f5d272" translate="yes" xml:space="preserve">
          <source>Practically it just suppresses the more useful log entries, or server notification mails. You'd be &lt;strong&gt;none the wiser&lt;/strong&gt; as to why your RewriteRules never work.</source>
          <target state="translated">Практически это просто подавляет более полезные записи журнала или почтовые уведомления сервера. Вы не будете &lt;strong&gt;знать,&lt;/strong&gt; почему ваши RewriteRules никогда не работают.</target>
        </trans-unit>
        <trans-unit id="62b88add85f24690a5fdaa48492419bf137450cf" translate="yes" xml:space="preserve">
          <source>Prepend each list of rules with &lt;code&gt;RewriteEngine On&lt;/code&gt; still. While mod_rewrite is implicitly active in &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Directory&amp;gt;&lt;/code&gt; sections,
the per-directory &lt;code&gt;.htaccess&lt;/code&gt; files need it individually summoned.</source>
          <target state="translated">Предварительно добавьте каждый список правил с помощью &lt;code&gt;RewriteEngine On&lt;/code&gt; . Хотя mod_rewrite неявно активен в разделах &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; и &lt;code&gt;&amp;lt;Directory&amp;gt;&lt;/code&gt; , для каждого каталога &lt;code&gt;.htaccess&lt;/code&gt; файлы должны вызываться по отдельности.</target>
        </trans-unit>
        <trans-unit id="0d460c402637ee80e5cbe8fb8827d4a768e09bd5" translate="yes" xml:space="preserve">
          <source>Prevalent &lt;code&gt;.htaccess&lt;/code&gt; pitfalls</source>
          <target state="translated">Распространенные подводные камни &lt;code&gt;.htaccess&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="20511274c0bc24f9a1ab6b20592c13f82d99001b" translate="yes" xml:space="preserve">
          <source>Primarily you put these rewrite rules into your &lt;em&gt;web server configuration file&lt;/em&gt;. Apache also allows* you to put them into a file called &lt;code&gt;.htaccess&lt;/code&gt; within your document root (i.e. next to your .php files).</source>
          <target state="translated">Прежде всего, вы помещаете эти правила перезаписи в &lt;em&gt;файл конфигурации&lt;/em&gt; вашего &lt;em&gt;веб-сервера&lt;/em&gt; . Apache также позволяет * помещать их в файл с именем &lt;code&gt;.htaccess&lt;/code&gt; в корневом каталоге вашего документа (то есть рядом с вашими файлами .php).</target>
        </trans-unit>
        <trans-unit id="06be8bc5c902a2c2133ad9c03a3c1779b99bf463" translate="yes" xml:space="preserve">
          <source>Providing discoverability through &lt;code&gt;/common/tree/nesting&lt;/code&gt;.</source>
          <target state="translated">Обеспечение возможности обнаружения посредством &lt;code&gt;/common/tree/nesting&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e64b81cf93d82d98226806bc2fc8bb197ca884ba" translate="yes" xml:space="preserve">
          <source>QUERY_STRING exempt from RewriteRules</source>
          <target state="translated">QUERY_STRING исключен из правил перезаписи</target>
        </trans-unit>
        <trans-unit id="4d404d57141e26e7d22d02e55784084ff540a4ad" translate="yes" xml:space="preserve">
          <source>Redirect subdomain to a folder</source>
          <target state="translated">Перенаправление вложенного домена в папку</target>
        </trans-unit>
        <trans-unit id="063e567c28ac61d9564af15349713acbb573d5e8" translate="yes" xml:space="preserve">
          <source>Redirect to &lt;code&gt;HTTPS://&lt;/code&gt;</source>
          <target state="translated">Перенаправление на &lt;code&gt;HTTPS://&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="722b8910bdb4f2c78164bcda5bd90f374a6c66ef" translate="yes" xml:space="preserve">
          <source>Reference: mod_rewrite, URL rewriting and “pretty links” explained</source>
          <target state="translated">Ссылка:mod_rewrite,переписывание URL и объяснение &quot;красивых ссылок&quot;.</target>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="b3a5d38cea5644b9e304ef62096e6a606a4a0fc6" translate="yes" xml:space="preserve">
          <source>Remove &lt;code&gt;www.&lt;/code&gt; from hostname</source>
          <target state="translated">Удалить &lt;code&gt;www.&lt;/code&gt; от имени хоста</target>
        </trans-unit>
        <trans-unit id="8dc518c3281af6a76845d45893812e8170cd0c54" translate="yes" xml:space="preserve">
          <source>Rewrite Conditions</source>
          <target state="translated">Переписать условия</target>
        </trans-unit>
        <trans-unit id="0415eb50a540339c28aa38e25535d693e139d107" translate="yes" xml:space="preserve">
          <source>Rewrite Example</source>
          <target state="translated">Перезапись Пример</target>
        </trans-unit>
        <trans-unit id="87715289f6fd0761155779b729e2b1ef1f55f404" translate="yes" xml:space="preserve">
          <source>Rewrite from URL like &quot;/page&quot; to a script such as &quot;/index.php/page&quot;</source>
          <target state="translated">Перезапись с URL типа &quot;страница&quot; на скрипт типа &quot;index.phppage&quot;.</target>
        </trans-unit>
        <trans-unit id="54ae8a2bb1e1e0463d622aac404cc75b66ddf407" translate="yes" xml:space="preserve">
          <source>RewriteConds just mask one RewriteRule</source>
          <target state="translated">RewriteConds просто замаскируйте один RewriteRule.</target>
        </trans-unit>
        <trans-unit id="243d3756aea59bb3aca4be6b1c289ef6f5eac31f" translate="yes" xml:space="preserve">
          <source>RewriteRules</source>
          <target state="translated">RewriteRules</target>
        </trans-unit>
        <trans-unit id="6f3c0b0fa9441f73d1225a5ad3aebf8aa68e29c8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://httpd.apache.org/docs/2.2/urlmapping.html&quot;&gt;http://httpd.apache.org/docs/2.2/urlmapping.html&lt;/a&gt; for further tips.</source>
          <target state="translated">См. &lt;a href=&quot;http://httpd.apache.org/docs/2.2/urlmapping.html&quot;&gt;Http://httpd.apache.org/docs/2.2/urlmapping.html&lt;/a&gt; для получения дополнительных советов.</target>
        </trans-unit>
        <trans-unit id="7734994bbf366e6199ab98306f2955556acb72dc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://serverfault.com/questions/214512/redirect-change-urls-or-redirect-http-to-https-in-apache-everything-you-ever&quot;&gt;Everything you ever wanted to know about mod_rewrite&lt;/a&gt;
if you haven't already. Combining multiple RewriteRules often leads to interaction. This isn't something to prevent habitually per &lt;code&gt;[L]&lt;/code&gt; flag, but a scheme you'll embrace once versed.
You &lt;strong&gt;can &lt;em&gt;re-re-re&lt;/em&gt;write&lt;/strong&gt; virtual paths from one rule to another, until it reaches an actual target handler.</source>
          <target state="translated">Посмотрите &lt;a href=&quot;https://serverfault.com/questions/214512/redirect-change-urls-or-redirect-http-to-https-in-apache-everything-you-ever&quot;&gt;все, что вы когда-либо хотели знать о mod_rewrite,&lt;/a&gt; если вы еще этого не сделали. Объединение нескольких RewriteRules часто приводит к взаимодействию. Это не то, что обычно мешает использованию флага &lt;code&gt;[L]&lt;/code&gt; , а схема, которую вы примете однажды. Вы &lt;strong&gt;можете &lt;em&gt;переписать&lt;/em&gt;&lt;/strong&gt; виртуальные пути из одного правила в другое, пока оно не достигнет фактического целевого обработчика.</target>
        </trans-unit>
        <trans-unit id="769cf2ef46bdfff4b362894473e1b5713284e118" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://stackoverflow.com/q/265898&quot;&gt;mod_rewrite, php and the .htaccess file&lt;/a&gt;</source>
          <target state="translated">Смотрите &lt;a href=&quot;https://stackoverflow.com/q/265898&quot;&gt;mod_rewrite, php и файл .htaccess&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="22c8fcf96a97b6e5abcdae84c4db3db1d01058d9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://stackoverflow.com/questions/2978907/how-can-i-get-my-htaccess-to-work-subdomains&quot;&gt;How can i get my htaccess to work (subdomains)?&lt;/a&gt;</source>
          <target state="translated">См. &lt;a href=&quot;https://stackoverflow.com/questions/2978907/how-can-i-get-my-htaccess-to-work-subdomains&quot;&gt;Как я могу заставить свой htaccess работать (субдомены)?&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="006a84e14e20a75e524061fa1fe8dba5660bdff1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://wiki.apache.org/httpd/RewriteLog&quot;&gt;Apache RewriteLog&lt;/a&gt; docs. For debugging you can enable it in the vhost sections:</source>
          <target state="translated">См. Документы &lt;a href=&quot;https://wiki.apache.org/httpd/RewriteLog&quot;&gt;Apache RewriteLog&lt;/a&gt; . Для отладки вы можете включить его в разделах vhost:</target>
        </trans-unit>
        <trans-unit id="9cd936e48a20e2da69c8f25159cd8cbee422363f" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://stackoverflow.com/questions/2252238/how-can-i-match-query-string-variables-with-mod-rewrite&quot;&gt;How can I match query string variables with mod_rewrite?&lt;/a&gt;</source>
          <target state="translated">Смотрите также &lt;a href=&quot;https://stackoverflow.com/questions/2252238/how-can-i-match-query-string-variables-with-mod-rewrite&quot;&gt;Как я могу сопоставить переменные строки запроса с mod_rewrite?&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ef15dc12c82e77842eafff393a8434759690e4c5" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://stackoverflow.com/questions/704102/how-does-rewritebase-work-in-htaccess&quot;&gt;How does RewriteBase work in .htaccess&lt;/a&gt;</source>
          <target state="translated">Смотрите также &lt;a href=&quot;https://stackoverflow.com/questions/704102/how-does-rewritebase-work-in-htaccess&quot;&gt;Как RewriteBase работает в .htaccess&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">См.также:</target>
        </trans-unit>
        <trans-unit id="8de810eb4c19512b1bcf1333a62369476c4d7c77" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;https://stackoverflow.com/questions/27744603/css-js-and-images-do-not-display-with-pretty-url&quot;&gt;CSS, JS and images do not display with pretty url&lt;/a&gt;</source>
          <target state="translated">Смотрите также: &lt;a href=&quot;https://stackoverflow.com/questions/27744603/css-js-and-images-do-not-display-with-pretty-url&quot;&gt;CSS, JS и изображения не отображаются с красивым URL&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c3db13cb00377ed34be5480543c7e55ed4f98496" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;https://stackoverflow.com/questions/3655893&quot;&gt;How do I transform my URL path segments into query string key-value pairs?&lt;/a&gt;</source>
          <target state="translated">См. Также: &lt;a href=&quot;https://stackoverflow.com/questions/3655893&quot;&gt;Как преобразовать сегменты пути URL-адреса в пары ключ-значение строки запроса?&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5b77f4be08babffac9435d191760ac9736013dd5" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;https://stackoverflow.com/questions/4908122/removing-the-php-extension-with-mod-rewrite&quot;&gt;Removing the .php extension with mod_rewrite&lt;/a&gt;</source>
          <target state="translated">Смотрите также: &lt;a href=&quot;https://stackoverflow.com/questions/4908122/removing-the-php-extension-with-mod-rewrite&quot;&gt;Удаление расширения .php с помощью mod_rewrite&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="566b13b8f401ee2428d3cd8f11f3c6fe104dc463" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;https://wiki.apache.org/httpd/RewriteHTTPToHTTPS&quot;&gt;https://wiki.apache.org/httpd/RewriteHTTPToHTTPS&lt;/a&gt;</source>
          <target state="translated">Смотрите также: &lt;a href=&quot;https://wiki.apache.org/httpd/RewriteHTTPToHTTPS&quot;&gt;https://wiki.apache.org/httpd/RewriteHTTPToHTTPS&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8f1913e2533a26bdd25c26d90fab7cc90bd95e2a" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_rewrite.html&quot;&gt;official documentation&lt;/a&gt; for all the possible flags and options.</source>
          <target state="translated">Смотрите &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_rewrite.html&quot;&gt;официальную документацию&lt;/a&gt; для всех возможных флагов и опций.</target>
        </trans-unit>
        <trans-unit id="9fa04c4d408fbb4f618dc13714c5ebc1ab770915" translate="yes" xml:space="preserve">
          <source>See: &lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/remapping.html#backward-compatibility&quot;&gt;http://httpd.apache.org/docs/2.4/rewrite/remapping.html#backward-compatibility&lt;/a&gt;</source>
          <target state="translated">Смотрите: &lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/remapping.html#backward-compatibility&quot;&gt;http://httpd.apache.org/docs/2.4/rewrite/remapping.html#backward-compatibility&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="99e6a073ff5e6c011154a5c38d8a47d031eb6740" translate="yes" xml:space="preserve">
          <source>Serverfault: &lt;strong&gt;Everything you ever wanted to know about mod_rewrite&lt;/strong&gt;</source>
          <target state="translated">Ошибка сервера: &lt;strong&gt;все, что вы когда-либо хотели знать о mod_rewrite&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="153142254f89758d473a9ea12c5e164444dc53cf" translate="yes" xml:space="preserve">
          <source>SetType or SetHandler for extensionless &lt;code&gt;.php&lt;/code&gt; scripts</source>
          <target state="translated">SetType или SetHandler для сценариев без расширения &lt;code&gt;.php&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5a864b80ff234f7cae642c6501bfd4c017e44fd0" translate="yes" xml:space="preserve">
          <source>Shortening a few page names to internal file schemes is most simple:</source>
          <target state="translated">Сокращение нескольких имен страниц до внутренних файловых схем является наиболее простым:</target>
        </trans-unit>
        <trans-unit id="0b832bc70477bdef81bfff11de849565e3c94623" translate="yes" xml:space="preserve">
          <source>Since Apache 2.4 you can also use the &lt;code&gt;[END]&lt;/code&gt; flag. A matching rule with it will &lt;em&gt;completely&lt;/em&gt; terminate further alias/rewrite processing. (Whereas the &lt;code&gt;[L]&lt;/code&gt; flag can oftentimes trigger a second round, for example when rewriting into or out of subdirectories.)</source>
          <target state="translated">Начиная с Apache 2.4 вы также можете использовать флаг &lt;code&gt;[END]&lt;/code&gt; . Соответствующее ему правило &lt;em&gt;полностью&lt;/em&gt; прекратит дальнейшую обработку псевдонима / перезаписи. (Принимая во внимание, что флаг &lt;code&gt;[L]&lt;/code&gt; часто может инициировать второй раунд, например, при перезаписи в или из подкаталогов.)</target>
        </trans-unit>
        <trans-unit id="0b205cd34e49d99ca6bc4b7cfdc75f4c82118ad9" translate="yes" xml:space="preserve">
          <source>Slug-style placeholders</source>
          <target state="translated">Слизняки-плательщики</target>
        </trans-unit>
        <trans-unit id="0126c12f6cbf075a76cababf0457921f8420def3" translate="yes" xml:space="preserve">
          <source>Slugs with numeric prefixes</source>
          <target state="translated">Пули с цифровыми префиксами</target>
        </trans-unit>
        <trans-unit id="ecebb061edd3e7bf58aa5e1134401163d6e5ea2c" translate="yes" xml:space="preserve">
          <source>So at some point you're rewriting your HTML pages to carry only pretty links, as &lt;a href=&quot;https://stackoverflow.com/a/20563773#~What+mod_rewrite+does+not+do&quot;&gt;outlined by deceze&lt;/a&gt;.
Meanwhile you'll still receive requests for the &lt;em&gt;old&lt;/em&gt; paths, sometimes even from bookmarks. As &lt;em&gt;workaround&lt;/em&gt;, you can ping-pong browsers to display/establish
the new URLs.</source>
          <target state="translated">Так что в какой-то момент вы переписываете свои HTML-страницы, чтобы содержать только красивые ссылки, как &lt;a href=&quot;https://stackoverflow.com/a/20563773#~What+mod_rewrite+does+not+do&quot;&gt;обрисовано&lt;/a&gt; в общих чертах deceze . Между тем вы все равно будете получать запросы на &lt;em&gt;старые&lt;/em&gt; пути, иногда даже из закладок. В качестве &lt;em&gt;обходного пути&lt;/em&gt; вы можете пинг-понг браузеры для отображения / установки новых URL-адресов.</target>
        </trans-unit>
        <trans-unit id="9b584b52b28402594628cea231d8d1cd0eb03d50" translate="yes" xml:space="preserve">
          <source>Spaces</source>
          <target state="translated">Spaces</target>
        </trans-unit>
        <trans-unit id="85e989878c716e36b051efddbe0395a8c643d71a" translate="yes" xml:space="preserve">
          <source>Stack Overflow has &lt;em&gt;many&lt;/em&gt; other great resources to get started:</source>
          <target state="translated">Stack Overflow имеет &lt;em&gt;много&lt;/em&gt; других полезных ресурсов для начала:</target>
        </trans-unit>
        <trans-unit id="48fc570e8e866f7f574a291b7bacd57b75c6ab5b" translate="yes" xml:space="preserve">
          <source>Static mapping</source>
          <target state="translated">Статическое картирование</target>
        </trans-unit>
        <trans-unit id="8001a2b0ee6473dba8f8f19c9bcf26b8ca6205c1" translate="yes" xml:space="preserve">
          <source>Still you'd &lt;em&gt;often&lt;/em&gt; want to have the most specific rules (fixed string &lt;code&gt;/forum/&amp;hellip;&lt;/code&gt; patterns, or more restrictive placeholders &lt;code&gt;[^/.]+&lt;/code&gt;) in the &lt;em&gt;early&lt;/em&gt; rules.
Generic slurp-all rules (&lt;code&gt;.*&lt;/code&gt;) are better left to the &lt;em&gt;later&lt;/em&gt; ones. (An exception is a &lt;code&gt;RewriteCond -f/-d&lt;/code&gt; guard as primary block.)</source>
          <target state="translated">Тем не менее, в &lt;em&gt;ранних&lt;/em&gt; правилах вы &lt;em&gt;часто&lt;/em&gt; хотели бы иметь самые конкретные правила (шаблоны с фиксированной строкой &lt;code&gt;/forum/&amp;hellip;&lt;/code&gt; или более ограничительные заполнители &lt;code&gt;[^/.]+&lt;/code&gt; ). Обычные правила slurp-all ( &lt;code&gt;.*&lt;/code&gt; ) Лучше оставить более &lt;em&gt;поздним&lt;/em&gt; . (Исключением является защита &lt;code&gt;RewriteCond -f/-d&lt;/code&gt; в качестве основного блока.)</target>
        </trans-unit>
        <trans-unit id="e88877188929b587a6202b5d626e2de4ef74c025" translate="yes" xml:space="preserve">
          <source>Stylesheets and images stop working</source>
          <target state="translated">Таблицы стилей и изображения перестают работать</target>
        </trans-unit>
        <trans-unit id="1a378406d18f6750149ae24909a93a9ccb6fc19e" translate="yes" xml:space="preserve">
          <source>That yields a detailed summary of how incoming request paths get modified by each rule:</source>
          <target state="translated">Это дает детальную информацию о том,как входящие пути запросов изменяются каждым правилом:</target>
        </trans-unit>
        <trans-unit id="6d6fab96ebe243a8ed7f16439ab504edd8a35174" translate="yes" xml:space="preserve">
          <source>The above rewrite would allow you to link to something like &lt;code&gt;/blog/1/foo/&lt;/code&gt; and it would actually load &lt;code&gt;/blog/index.php?id=1&amp;amp;title=foo&lt;/code&gt;.</source>
          <target state="translated">Переписанное выше позволит вам сделать ссылку на что-то вроде &lt;code&gt;/blog/1/foo/&lt;/code&gt; и на самом деле загрузит &lt;code&gt;/blog/index.php?id=1&amp;amp;title=foo&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3ba4a51130ff56537f6d3a9055715230bfef9e5f" translate="yes" xml:space="preserve">
          <source>The complete RewriteRule set, but &lt;em&gt;also&lt;/em&gt; single out the presumed defective one.</source>
          <target state="translated">Полный набор RewriteRule, но &lt;em&gt;также&lt;/em&gt; и предполагаемый дефектный.</target>
        </trans-unit>
        <trans-unit id="e228ac5b8f8d575c20a15333bcfad05518e80ac0" translate="yes" xml:space="preserve">
          <source>The default configuration of most web servers is to look for a file that matches the URL on the hard disk. If the &lt;em&gt;document root&lt;/em&gt; of the server is set to, say, &lt;code&gt;/var/www&lt;/code&gt;, it may look whether the file &lt;code&gt;/var/www/foo/bar.html&lt;/code&gt; exists and serve it if so. If the file ends in &quot;.php&quot; it will invoke the PHP interpreter and &lt;em&gt;then&lt;/em&gt; return the result. All this association is completely configurable; a file doesn't have to end in &quot;.php&quot; for the web server to run it through the PHP interpreter, and the URL doesn't have to match any particular file on disk for something to happen.</source>
          <target state="translated">Конфигурация по умолчанию для большинства веб-серверов заключается в поиске файла, соответствующего URL-адресу на жестком диске. Если &lt;em&gt;корневым&lt;/em&gt; каталогом сервера является, скажем, &lt;code&gt;/var/www&lt;/code&gt; , он может посмотреть, существует ли файл &lt;code&gt;/var/www/foo/bar.html&lt;/code&gt; , и обработать его, если это так. Если файл оканчивается на &amp;laquo;.php&amp;raquo;, он вызовет интерпретатор PHP, а &lt;em&gt;затем&lt;/em&gt; вернет результат. Вся эта ассоциация полностью настраивается; файл не должен заканчиваться на &amp;laquo;.php&amp;raquo;, чтобы веб-сервер мог запустить его через интерпретатор PHP, а URL-адрес не должен совпадать с каким-либо конкретным файлом на диске, чтобы что-то произошло.</target>
        </trans-unit>
        <trans-unit id="46df60a282712a506bc72414500b3830c3f7622b" translate="yes" xml:space="preserve">
          <source>The first set of brackets - &lt;code&gt;([0-9]+)&lt;/code&gt; - matches a string with a minimum of 1 character in length and with only numeric values (i.e. 0-9). This can be referenced with &lt;code&gt;$1&lt;/code&gt; in the right hand side of the rule</source>
          <target state="translated">Первый набор скобок - &lt;code&gt;([0-9]+)&lt;/code&gt; - соответствует строке длиной не менее 1 символа и только числовыми значениями (т. Е. 0-9). На это можно сослаться с &lt;code&gt;$1&lt;/code&gt; в правой части правила</target>
        </trans-unit>
        <trans-unit id="7ac23b9ac3e8ebb020e1a5fab826fbe6cccd47f8" translate="yes" xml:space="preserve">
          <source>The following examples are PHP-centric and a bit more incremental, easier to adapt for similar cases.
They're just summaries, often link to more variations or detailed Q&amp;amp;As.</source>
          <target state="translated">Следующие примеры ориентированы на PHP и немного более инкрементны, их легче адаптировать для подобных случаев. Это просто резюме, часто ссылающиеся на дополнительные варианты или подробные вопросы и ответы.</target>
        </trans-unit>
        <trans-unit id="a54a48205d3f14912b7eeff2751a1df039b641ef" translate="yes" xml:space="preserve">
          <source>The last flag indicates that this is the last rule that should be processed. This means that if and only if this rule matches, no further rules will be evaluated in the current rewrite processing run. If the rule does not match, all other rules will be tried in order as usual. If you do not set the &lt;code&gt;L&lt;/code&gt; flag, all following rules will be applied to the &lt;em&gt;rewritten&lt;/em&gt; URL afterwards.</source>
          <target state="translated">Последний флаг указывает, что это последнее правило, которое должно быть обработано. Это означает, что если и только если это правило совпадает, никакие дальнейшие правила не будут оцениваться в текущем прогоне обработки перезаписи. Если правило не совпадает, все остальные правила будут опробованы в обычном порядке. Если вы не установите флаг &lt;code&gt;L&lt;/code&gt; , все последующие правила будут применены к &lt;em&gt;переписанному&lt;/em&gt; URL после этого.</target>
        </trans-unit>
        <trans-unit id="e2dcea71d18770c2097f41c39eae9392bca0c8a4" translate="yes" xml:space="preserve">
          <source>The leading slash &lt;code&gt;^/&lt;/code&gt; won't match</source>
          <target state="translated">Начальная косая черта &lt;code&gt;^/&lt;/code&gt; не будет совпадать</target>
        </trans-unit>
        <trans-unit id="549c3e4d9d2e3d169f232931ea8636c3d1480369" translate="yes" xml:space="preserve">
          <source>The no case flag means that the rewrite rule is case insensitive, so for the example rule above this would mean that both &lt;code&gt;/blog/1/foo/&lt;/code&gt; and &lt;code&gt;/BLOG/1/foo/&lt;/code&gt; (or any variation of this) would be matched.</source>
          <target state="translated">Флаг отсутствия регистра означает, что правило перезаписи нечувствительно к регистру, поэтому для приведенного выше примера правила это будет означать, что оба &lt;code&gt;/blog/1/foo/&lt;/code&gt; и &lt;code&gt;/BLOG/1/foo/&lt;/code&gt; (или любой другой вариант этого) будут сопоставлены.</target>
        </trans-unit>
        <trans-unit id="83c803d5174f2e1e70b82894f7bc34cb1d99cf98" translate="yes" xml:space="preserve">
          <source>The query string append flag allows us to pass in extra variables to the specified URL which will get added to the original get parameters. For our example this means that something like &lt;code&gt;/blog/1/foo/?comments=15&lt;/code&gt; would load &lt;code&gt;/blog/index.php?id=1&amp;amp;title=foo&amp;amp;comments=15&lt;/code&gt;</source>
          <target state="translated">Флаг добавления строки запроса позволяет нам передавать дополнительные переменные по указанному URL, которые будут добавлены к исходным параметрам получения. Для нашего примера это означает, что что-то вроде &lt;code&gt;/blog/1/foo/?comments=15&lt;/code&gt; &lt;code&gt;/blog/index.php?id=1&amp;amp;title=foo&amp;amp;comments=15&lt;/code&gt; = 15 загрузит /blog/index.php?id=1&amp;amp;title=foo&amp;amp;comments=15</target>
        </trans-unit>
        <trans-unit id="1a75416b595fbf14696df582ef4381352dbaaade" translate="yes" xml:space="preserve">
          <source>The rewrite will attempt to load the same file on another domain</source>
          <target state="translated">При перезаписи будет сделана попытка загрузить этот же файл в другой домен.</target>
        </trans-unit>
        <trans-unit id="833afbd5f1f23c47a97009c28e05f47b2667d6ea" translate="yes" xml:space="preserve">
          <source>The rule is split into 4 sections:</source>
          <target state="translated">Правило разделено на 4 секции:</target>
        </trans-unit>
        <trans-unit id="7aebe4dbf5a75928bd1986451a2093d287864dbd" translate="yes" xml:space="preserve">
          <source>The second set of parentheses matches a string with a minimum of 1 character in length, containing only alphanumeric characters (A-Z, a-z, or 0-9) or &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt; (note &lt;code&gt;+&lt;/code&gt; is escaped with a backslash as without escaping it this will execute as a &lt;a href=&quot;http://www.regular-expressions.info/repeat.html&quot;&gt;regex repetition character&lt;/a&gt;). This can be referenced with &lt;code&gt;$2&lt;/code&gt; in the right hand side of the rule</source>
          <target state="translated">Второй набор скобок соответствует строке длиной не менее 1 символа, содержащей только буквенно-цифровые символы (AZ, az или 0-9) или &lt;code&gt;-&lt;/code&gt; или &lt;code&gt;+&lt;/code&gt; (note &lt;code&gt;+&lt;/code&gt; экранируется с обратной косой чертой, поскольку без экранирования он будет выполнен в качестве &lt;a href=&quot;http://www.regular-expressions.info/repeat.html&quot;&gt;символа повторения регулярных выражений&lt;/a&gt; ). На это можно сослаться с &lt;code&gt;$2&lt;/code&gt; в правой части правила</target>
        </trans-unit>
        <trans-unit id="04c8e0a990ad304eb54df5972cfebfc98f757529" translate="yes" xml:space="preserve">
          <source>The simplest option to also eschew &lt;code&gt;.php&lt;/code&gt; &quot;file extensions&quot; in URLs is enabling:</source>
          <target state="translated">Простейшая опция, позволяющая также избегать &lt;code&gt;.php&lt;/code&gt; &amp;laquo;расширений файлов&amp;raquo; в URL, включает:</target>
        </trans-unit>
        <trans-unit id="0e2f7a407bd6041b3f1f32b83f940cec25221f9b" translate="yes" xml:space="preserve">
          <source>The web server is an application listening on a port, accepting HTTP requests coming in on that port and returning a response. A web server is entirely free to respond to any request in any way it sees fit/in any way you have configured it to respond. This response is not a file, it's an &lt;em&gt;HTTP response&lt;/em&gt; which may or may not have anything to do with physical files on any disk. A web server doesn't have to be Apache, there are many other web servers which are all just programs which run persistently and are attached to a port which respond to HTTP requests. You can write one yourself. This paragraph was intended to divorce you from any notion that URLs directly equal files, which is really important to understand. :)</source>
          <target state="translated">Веб-сервер - это приложение, которое прослушивает порт, принимает HTTP-запросы, поступающие на этот порт, и возвращает ответ. Веб-сервер полностью свободен отвечать на любой запрос любым способом, который он сочтет нужным / любым способом, которым вы настроили его для ответа. Этот ответ не является файлом, это &lt;em&gt;ответ HTTP,&lt;/em&gt; который может иметь или не иметь никакого отношения к физическим файлам на любом диске. Веб-сервер не обязательно должен быть Apache, есть много других веб-серверов, которые являются просто программами, которые работают постоянно и подключены к порту, который отвечает на HTTP-запросы. Вы можете написать один самостоятельно. Этот абзац был призван отделить вас от любых представлений о том, что URL-адреса напрямую совпадают с файлами, что действительно важно понять. :)</target>
        </trans-unit>
        <trans-unit id="159c459f715b62a82d49181a2596095e72ac845a" translate="yes" xml:space="preserve">
          <source>There are various online tools to generate RewriteRules for most GET-parameterish URLs:</source>
          <target state="translated">Существуют различные онлайн-инструменты для генерации RewriteRules для большинства GET-параметрических URL:</target>
        </trans-unit>
        <trans-unit id="c82a2f0ef8ac4ecf1da9d191346d5140c761cc14" translate="yes" xml:space="preserve">
          <source>There's a lot mod_rewrite can do and very complex matching rules you can create, including chaining several rewrites, proxying requests to a completely different service or machine, returning specific HTTP status codes as responses, redirecting requests etc. It's very powerful and can be used to great good if you understand the fundamental HTTP request-response mechanism. It does &lt;em&gt;not&lt;/em&gt; automatically make your links pretty.</source>
          <target state="translated">Mod_rewrite может многое сделать, и вы можете создать очень сложные правила сопоставления, включая цепочку нескольких переписываний, передачу запросов на совершенно другой сервис или компьютер, возврат определенных кодов состояния HTTP в виде ответов, перенаправление запросов и т. Д. Это очень мощный инструмент, который можно использовать для очень хорошо, если вы понимаете фундаментальный механизм HTTP-запроса-ответа. Это не делает ваши ссылки красивыми.</target>
        </trans-unit>
        <trans-unit id="c9ba3f02e7e2d45a3c1fdc93f62d6055d0ba77ad" translate="yes" xml:space="preserve">
          <source>Therefore you'll often see mixed &lt;code&gt;/article/529-title-slug&lt;/code&gt; paths used in practice:</source>
          <target state="translated">Поэтому вы часто будете видеть смешанные пути &lt;code&gt;/article/529-title-slug&lt;/code&gt; , используемые на практике:</target>
        </trans-unit>
        <trans-unit id="cb15bb19b67a700556e5d4e90ad59605ca293dde" translate="yes" xml:space="preserve">
          <source>These are options that are added in square brackets at the end of your rewrite rule to specify certain conditions. Again, there are a lot of different flags which you can read up on in &lt;a href=&quot;http://httpd.apache.org/docs/2.2/rewrite/flags.html&quot;&gt;the documentation&lt;/a&gt;, but I'll go through some of the more common flags:</source>
          <target state="translated">Это параметры, которые добавляются в квадратные скобки в конце правила перезаписи для указания определенных условий. Опять же, есть много различных флагов, о которых вы можете прочитать в &lt;a href=&quot;http://httpd.apache.org/docs/2.2/rewrite/flags.html&quot;&gt;документации&lt;/a&gt; , но я рассмотрю некоторые из наиболее распространенных флагов:</target>
        </trans-unit>
        <trans-unit id="7cb52ffb24a80ad734695950723670b446fd208a" translate="yes" xml:space="preserve">
          <source>This common trick involves sending a 30x/Location &lt;em&gt;redirect&lt;/em&gt; whenever an incoming URL follows the obsolete/ugly naming scheme.
Browsers will then &lt;em&gt;rerequest&lt;/em&gt; the new/pretty URL, which afterwards is rewritten (just internally) to the original or new location.</source>
          <target state="translated">Эта распространенная хитрость заключается в отправке &lt;em&gt;перенаправления&lt;/em&gt; 30x / Location всякий раз, когда входящий URL-адрес следует устаревшей / уродливой схеме именования. Браузеры затем &lt;em&gt;запросят&lt;/em&gt; новый / красивый URL, который впоследствии будет переписан (только внутри) в исходное или новое местоположение.</target>
        </trans-unit>
        <trans-unit id="eac456246f01a69b6fa960c525f4d3493e5955b6" translate="yes" xml:space="preserve">
          <source>This doesn't tell you which RewriteRule is the culprit. But inaccessible final paths like &lt;code&gt;/docroot/21-.itle?index.php&lt;/code&gt; may give away where to inspect further.
Otherwise disable rules until you get some predictable paths.</source>
          <target state="translated">Это не говорит вам, какой RewriteRule является виновником. Но недоступные конечные пути, такие как &lt;code&gt;/docroot/21-.itle?index.php&lt;/code&gt; , могут указывать , где проводить дальнейшую проверку. В противном случае отключите правила, пока не получите предсказуемые пути.</target>
        </trans-unit>
        <trans-unit id="126b9d7dfbd968a54edaca8a4d158902a1949796" translate="yes" xml:space="preserve">
          <source>This flag isn't one I used in the example above, but is one I thought is worth mentioning. This allows you to specify a http redirect, with the option to include a status code (e.g. &lt;code&gt;R=301&lt;/code&gt;). For example if you wanted to do a 301 redirect on /myblog/ to /blog/ you would simply write a rule something like this:</source>
          <target state="translated">Этот флаг не тот, который я использовал в приведенном выше примере, но я думаю, стоит упомянуть. Это позволяет вам указать перенаправление http с возможностью включения кода состояния (например, &lt;code&gt;R=301&lt;/code&gt; ). Например, если вы хотите сделать редирект 301 в / myblog / to / blog /, вы просто напишите правило примерно так:</target>
        </trans-unit>
        <trans-unit id="37b731c00b0df987bf9c1b533cd5f5cce0e31a8d" translate="yes" xml:space="preserve">
          <source>This has Apache select &lt;code&gt;article.php&lt;/code&gt; for HTTP requests on &lt;code&gt;/article&lt;/code&gt; due to the matching basename. And this works well together with the aforementioned PATH_INFO feature. So you can just use URLs like &lt;code&gt;http://example.com/article/virtual/title&lt;/code&gt;. Which makes sense if you have a traditional web application with multiple PHP invocation points/scripts.</source>
          <target state="translated">При этом Apache выбирает &lt;code&gt;article.php&lt;/code&gt; для HTTP-запросов на &lt;code&gt;/article&lt;/code&gt; из-за совпадения базового имени. И это хорошо работает вместе с вышеупомянутой функцией PATH_INFO. Таким образом, вы можете просто использовать URL-адреса, такие как &lt;code&gt;http://example.com/article/virtual/title&lt;/code&gt; . Что имеет смысл, если у вас есть традиционное веб-приложение с несколькими точками вызова / сценариями PHP.</target>
        </trans-unit>
        <trans-unit id="7821c92c23729c6e3b5d689391cb1070c9721c06" translate="yes" xml:space="preserve">
          <source>This is a very common practice, which will prepend your domain with &lt;code&gt;www.&lt;/code&gt; (if it isn't there already) and execute a 301 redirect. For example, loading up &lt;code&gt;http://example.com/blog/&lt;/code&gt; it would redirect you to &lt;code&gt;http://www.example.com/blog/&lt;/code&gt;</source>
          <target state="translated">Это очень распространенная практика, которая добавляет ваш домен к &lt;code&gt;www.&lt;/code&gt; (если его там еще нет) и выполните перенаправление 301. Например, при загрузке &lt;code&gt;http://example.com/blog/&lt;/code&gt; он перенаправит вас на &lt;code&gt;http://www.example.com/blog/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9d80c4ef1a166355292a1990b7a7af44ad9122e8" translate="yes" xml:space="preserve">
          <source>This is just as valid a request for a URL, and it has more obviously nothing to do with files.</source>
          <target state="translated">Это такой же правильный запрос на URL,и,что более очевидно,он не имеет никакого отношения к файлам.</target>
        </trans-unit>
        <trans-unit id="c69886ec55e1ba20b0fa5f101a1225eaf0019fd1" translate="yes" xml:space="preserve">
          <source>This is often seen in old tutorials. And it used to be correct for ancient Apache 1.x versions. Nowadays request paths are conveniently &lt;em&gt;fully &lt;strong&gt;directory-relative&lt;/strong&gt;&lt;/em&gt; in &lt;code&gt;.htaccess&lt;/code&gt; RewriteRules. Just leave the leading &lt;code&gt;/&lt;/code&gt; out.</source>
          <target state="translated">Это часто встречается в старых уроках. И это было правильно для древних версий Apache 1.x. В настоящее время пути запросов удобно &lt;em&gt;полностью &lt;strong&gt;относительны к каталогам&lt;/strong&gt;&lt;/em&gt; в &lt;code&gt;.htaccess&lt;/code&gt; RewriteRules. Просто оставьте ведущий &lt;code&gt;/&lt;/code&gt; выход.</target>
        </trans-unit>
        <trans-unit id="52a895915ec9566af7e25dd82c968182fc5c0f3e" translate="yes" xml:space="preserve">
          <source>This is slightly less common, but is a good example of a rule that doesn't execute if the filename is a directory or file that exists on the server.</source>
          <target state="translated">Это немного менее распространено,но является хорошим примером правила,которое не выполняется,если имя файла является каталогом или файлом,который существует на сервере.</target>
        </trans-unit>
        <trans-unit id="77620a284d982bf7c67daa1601fbd5c8de86c151" translate="yes" xml:space="preserve">
          <source>This is somewhat dependent on your server setup and the used PHP SAPI. Common alternatives include &lt;code&gt;ForceType application/x-httpd-php&lt;/code&gt; or &lt;code&gt;AddHandler php5-script&lt;/code&gt;.</source>
          <target state="translated">Это в некоторой степени зависит от настроек вашего сервера и используемого PHP SAPI. Распространенные альтернативы включают &lt;code&gt;ForceType application/x-httpd-php&lt;/code&gt; или &lt;code&gt;AddHandler php5-script&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e43a1df57f3dcef1bda106987332480923a8e7b2" translate="yes" xml:space="preserve">
          <source>This is the simple request of a browser to a web server requesting the &lt;em&gt;URL&lt;/em&gt;&lt;code&gt;/foo/bar.html&lt;/code&gt; from it. It is important to stress that it does not request a &lt;em&gt;file&lt;/em&gt;, it requests just some arbitrary URL. The request may also look like this:</source>
          <target state="translated">Это простой запрос браузера к веб-серверу с запросом &lt;em&gt;URL&lt;/em&gt; &lt;code&gt;/foo/bar.html&lt;/code&gt; . Важно подчеркнуть, что он не запрашивает &lt;em&gt;файл&lt;/em&gt; , он запрашивает только какой-то произвольный URL. Запрос также может выглядеть так:</target>
        </trans-unit>
        <trans-unit id="01e466565580b17decbd9ff474a0fe27c298e507" translate="yes" xml:space="preserve">
          <source>This isn't as convenient as having Apache separate input path segments into &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, &lt;code&gt;$3&lt;/code&gt; and passing them as distinct &lt;code&gt;$_GET&lt;/code&gt; variables to PHP. It's merely emulating &quot;pretty URLs&quot; with less configuration effort.</source>
          <target state="translated">Это не так удобно, как разделять Apache сегменты входного пути на &lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; , &lt;code&gt;$3&lt;/code&gt; и передавать их в виде отдельных переменных &lt;code&gt;$_GET&lt;/code&gt; в PHP. Он просто эмулирует &amp;laquo;красивые URL&amp;raquo; с меньшими усилиями по настройке.</target>
        </trans-unit>
        <trans-unit id="678cdd0d663cc49ab66acef486598ae2d96c6601" translate="yes" xml:space="preserve">
          <source>This nets quicker and more exact answers, and makes them more useful to others.</source>
          <target state="translated">Эти сети дают более быстрые и точные ответы и делают их более полезными для других.</target>
        </trans-unit>
        <trans-unit id="f16dfc9b713dca91d180a83ddd93a12f0f5f49f9" translate="yes" xml:space="preserve">
          <source>This optionalized any &lt;code&gt;/&amp;hellip;/&amp;hellip;/&amp;hellip;&lt;/code&gt; trailing path segments. Which then of course requires the handling script to split them up, and &lt;em&gt;variabl-ify&lt;/em&gt; extracted parameters
itself (which is what &lt;em&gt;Web-&quot;MVC&quot;&lt;/em&gt; frameworks do).</source>
          <target state="translated">Это позволяет произвольно использовать любые &lt;code&gt;/&amp;hellip;/&amp;hellip;/&amp;hellip;&lt;/code&gt; конечные сегменты пути. Что, конечно же, требует, чтобы скрипт обработки разделял их, и &lt;em&gt;переменные&lt;/em&gt; извлекали параметры сами (что и делают &lt;em&gt;веб-&lt;/em&gt; фреймворки &lt;em&gt;MVC&lt;/em&gt; ).</target>
        </trans-unit>
        <trans-unit id="4f0a25ea5b6c1efa50d189b93b865b7cd7502f46" translate="yes" xml:space="preserve">
          <source>This rule matches anything (&lt;code&gt;.*&lt;/code&gt;) and &lt;em&gt;captures&lt;/em&gt; it (&lt;code&gt;(..)&lt;/code&gt;), then rewrites it to append &quot;.html&quot;. In other words, if &lt;code&gt;/foo/bar&lt;/code&gt; was the requested URL, it will be handled as if &lt;code&gt;/foo/bar.html&lt;/code&gt; had been requested. See &lt;a href=&quot;http://regular-expressions.info&quot;&gt;http://regular-expressions.info&lt;/a&gt; for more information about regular expression matching, capturing and replacements.</source>
          <target state="translated">Это правило соответствует чему-либо ( &lt;code&gt;.*&lt;/code&gt; ) И &lt;em&gt;захватывает&lt;/em&gt; его ( &lt;code&gt;(..)&lt;/code&gt; ), а затем переписывает его, добавляя &amp;laquo;.html&amp;raquo;. Другими словами, если &lt;code&gt;/foo/bar&lt;/code&gt; был запрошенным URL, он будет обрабатываться так, как если бы был запрошен &lt;code&gt;/foo/bar.html&lt;/code&gt; . Смотрите &lt;a href=&quot;http://regular-expressions.info&quot;&gt;http://regular-expressions.info&lt;/a&gt; для получения дополнительной информации о сопоставлении регулярных выражений, захвате и заменах.</target>
        </trans-unit>
        <trans-unit id="3b2ea9bc6efb3aff08b2c67c59e0c49c40b9a8b9" translate="yes" xml:space="preserve">
          <source>This rule says &lt;em&gt;whenever a request matches &quot;/foo/bar&quot;, rewrite it to &quot;/foo/baz&quot;.&lt;/em&gt; The request will then be handled as if &lt;code&gt;/foo/baz&lt;/code&gt; had been requested instead. This can be used for various effects, for example:</source>
          <target state="translated">Это правило гласит: &lt;em&gt;всякий раз, когда запрос соответствует &amp;laquo;/ foo / bar&amp;raquo;, переписывайте его в &amp;laquo;/ foo / baz&amp;raquo;.&lt;/em&gt; Запрос будет обработан так, как если бы вместо него был запрошен &lt;code&gt;/foo/baz&lt;/code&gt; . Это может быть использовано для различных эффектов, например:</target>
        </trans-unit>
        <trans-unit id="f6e5c51f6d07a6fda3f35853c7cbc032504a01a3" translate="yes" xml:space="preserve">
          <source>This simply remaps 2009-2011 posts onto one script, and all other years implicitly to another handler.
Note the &lt;em&gt;more specific rule coming first&lt;/em&gt;. Each script might use different GET params.</source>
          <target state="translated">Это просто переназначает записи 2009-2011 годов в один сценарий, а все остальные годы неявно - в другой обработчик. Обратите внимание, что &lt;em&gt;более конкретное правило будет первым&lt;/em&gt; . Каждый скрипт может использовать разные параметры GET.</target>
        </trans-unit>
        <trans-unit id="a1c37412960d01550e537eeede8eb49d03ce4cc9" translate="yes" xml:space="preserve">
          <source>This way you could just rename your &lt;code&gt;article.php&lt;/code&gt; script to just &lt;code&gt;article&lt;/code&gt; (without extension), but still have it processed as PHP script.</source>
          <target state="translated">Таким образом, вы можете просто переименовать ваш скрипт &lt;code&gt;article.php&lt;/code&gt; в просто &lt;code&gt;article&lt;/code&gt; (без расширения), но все равно обработать его как PHP-скрипт.</target>
        </trans-unit>
        <trans-unit id="211b69704ff35b0a39c4be33762622ae6379f372" translate="yes" xml:space="preserve">
          <source>This, again, matches anything and rewrites it to the file index.php with the originally requested URL appended in the &lt;code&gt;url&lt;/code&gt; query parameter. I.e., for any and all requests coming in, the file index.php is executed and this file will have access to the original request in &lt;code&gt;$_GET['url']&lt;/code&gt;, so it can do anything it wants with it.</source>
          <target state="translated">Это снова сопоставляет что-либо и переписывает его в файл index.php с первоначально запрошенным URL-адресом, добавленным в параметр запроса &lt;code&gt;url&lt;/code&gt; . Т.е. для всех поступающих запросов исполняется файл index.php, и этот файл будет иметь доступ к исходному запросу в &lt;code&gt;$_GET['url']&lt;/code&gt; , поэтому он может делать с ним все, что захочет.</target>
        </trans-unit>
        <trans-unit id="a8c5fe091e3cffc8b0c5e5c2b1598310dff0e558" translate="yes" xml:space="preserve">
          <source>To actually use RewriteRules in per-directory configuration files you must:</source>
          <target state="translated">Для фактического использования RewriteRules в конфигурационных файлах каждой директории необходимо:</target>
        </trans-unit>
        <trans-unit id="302e8c9231b475103b1b38d200a19d9417800479" translate="yes" xml:space="preserve">
          <source>To expand on &lt;a href=&quot;https://stackoverflow.com/a/20563773/1011145&quot;&gt;deceze's answer&lt;/a&gt;, I wanted to provide a few examples and explanation of some other mod_rewrite functionality.</source>
          <target state="translated">Чтобы расширить &lt;a href=&quot;https://stackoverflow.com/a/20563773/1011145&quot;&gt;ответ Десезе&lt;/a&gt; , я хотел бы привести несколько примеров и объяснение некоторых других функций mod_rewrite.</target>
        </trans-unit>
        <trans-unit id="e0bb75b10308d21179997cfdc7b880808864c79a" translate="yes" xml:space="preserve">
          <source>To understand what mod_rewrite does you first need to understand how a web server works. A web server responds to &lt;a href=&quot;http://en.wikipedia.org/wiki/Http&quot;&gt;&lt;em&gt;HTTP requests&lt;/em&gt;&lt;/a&gt;. An HTTP request at its most basic level looks like this:</source>
          <target state="translated">Чтобы понять, что делает mod_rewrite, вам сначала нужно понять, как работает веб-сервер. Веб-сервер отвечает на &lt;a href=&quot;http://en.wikipedia.org/wiki/Http&quot;&gt;&lt;em&gt;запросы HTTP&lt;/em&gt;&lt;/a&gt; . HTTP-запрос на самом базовом уровне выглядит следующим образом:</target>
        </trans-unit>
        <trans-unit id="4fa8cc860c52b268dc6a3adcde7305e9415db5bb" translate="yes" xml:space="preserve">
          <source>Tools</source>
          <target state="translated">Tools</target>
        </trans-unit>
        <trans-unit id="58245d2ae3eef010b5b66c0f91d98d0ced9ae5a7" translate="yes" xml:space="preserve">
          <source>Trailing file &quot;extensions&quot;</source>
          <target state="translated">Трейлинговый файл &quot;расширения&quot;</target>
        </trans-unit>
        <trans-unit id="42c250d9422aa8b9548f27e829e74fff8a6655de" translate="yes" xml:space="preserve">
          <source>URL rewriting is primarily used for supporting &lt;em&gt;virtual&lt;/em&gt; incoming paths. Commonly you just have one dispatcher script (&lt;code&gt;index.php&lt;/code&gt;) or a few individual handlers (&lt;code&gt;articles.php&lt;/code&gt;, &lt;code&gt;blog.php&lt;/code&gt;, &lt;code&gt;wiki.php&lt;/code&gt;, &amp;hellip;). The latter &lt;a href=&quot;https://stackoverflow.com/a/1298917&quot;&gt;might clash&lt;/a&gt; with similar virtual RewriteRule paths.</source>
          <target state="translated">Перезапись URL в основном используется для поддержки &lt;em&gt;виртуальных&lt;/em&gt; входящих путей. Обычно у вас есть только один диспетчерский скрипт ( &lt;code&gt;index.php&lt;/code&gt; ) или несколько отдельных обработчиков ( &lt;code&gt;blog.php&lt;/code&gt; , &lt;code&gt;wiki.php&lt;/code&gt; , wiki.php ,&amp;hellip;). Последние &lt;a href=&quot;https://stackoverflow.com/a/1298917&quot;&gt;могут конфликтовать&lt;/a&gt; с похожими виртуальными путями RewriteRule.</target>
        </trans-unit>
        <trans-unit id="936c1eadd423e11d0419edc5c0a50907603bcf5b" translate="yes" xml:space="preserve">
          <source>URLs don't really have file extensions. Which is what this entire reference is about (= URLs are virtual locators, not necessarily a direct filesystem image).
However if you had a 1:1 file mapping before, you &lt;em&gt;can&lt;/em&gt; craft simpler rules:</source>
          <target state="translated">URL-адреса не имеют расширений файлов. Вот о чем вся эта ссылка (= URL-адреса являются виртуальными локаторами, не обязательно прямым образом файловой системы). Однако, если у вас раньше было отображение файла 1: 1, вы &lt;em&gt;можете&lt;/em&gt; создать более простые правила:</target>
        </trans-unit>
        <trans-unit id="748dcaf65cc260bb40913050765500212f87a4c3" translate="yes" xml:space="preserve">
          <source>Uniformity with alternative lists</source>
          <target state="translated">Единообразие с альтернативными списками</target>
        </trans-unit>
        <trans-unit id="171f5f83a5e1cc88faf76682f9ab5dec103babb8" translate="yes" xml:space="preserve">
          <source>Use mod_rewrite on the server to handle the request to the URL &lt;code&gt;/my/pretty/link&lt;/code&gt; using any one of the methods described above.</source>
          <target state="translated">Используйте mod_rewrite на сервере для обработки запроса по &lt;code&gt;/my/pretty/link&lt;/code&gt; URL / my / pretty /, используя любой из методов, описанных выше.</target>
        </trans-unit>
        <trans-unit id="314b923c11804470bedda27a5e010368e52f966a" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://stackoverflow.com/questions/2261951/what-exactly-is-path-info-in-php&quot;&gt;PATH_INFO&lt;/a&gt;, Luke</source>
          <target state="translated">Используйте &lt;a href=&quot;https://stackoverflow.com/questions/2261951/what-exactly-is-path-info-in-php&quot;&gt;PATH_INFO&lt;/a&gt; , Люк</target>
        </trans-unit>
        <trans-unit id="b06ad5cb5d4d5adc3d4c61b06b4b81b4e2fc280c" translate="yes" xml:space="preserve">
          <source>Were it really be disabled, your RewriteRules still wouldn't work anyway.</source>
          <target state="translated">Если бы он действительно был отключен,твои правила переписывания все равно бы не сработали.</target>
        </trans-unit>
        <trans-unit id="d0cbc1290725122d94fb5a18b92c5702e6822572" translate="yes" xml:space="preserve">
          <source>What &quot;pretty&quot; URLs should conceptionally be used for is making websites &lt;strong&gt;&lt;em&gt;user-friendly&lt;/em&gt;&lt;/strong&gt;.</source>
          <target state="translated">То, для чего &amp;laquo;концептуально&amp;raquo; должны быть использованы концептуально, - это сделать сайты &lt;strong&gt;&lt;em&gt;удобными для пользователей&lt;/em&gt;&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="09b7efa758045019b58e1428653c1f860a31dcd6" translate="yes" xml:space="preserve">
          <source>What mod_rewrite does &lt;em&gt;not&lt;/em&gt; do</source>
          <target state="translated">Что не делает mod_rewrite</target>
        </trans-unit>
        <trans-unit id="360f3bc410da35a3cfaf91a34475047f7d1fbd2b" translate="yes" xml:space="preserve">
          <source>What seems enticing as generalized safeguard, often turns out to be an obstacle in practice.</source>
          <target state="translated">То,что кажется заманчивым как обобщенная мера предосторожности,часто оказывается препятствием на практике.</target>
        </trans-unit>
        <trans-unit id="60ab540d4d5fa82c04683e07b642ce0708dabbf4" translate="yes" xml:space="preserve">
          <source>When opting for directory-style paths, you can make it reachable with and without a final</source>
          <target state="translated">При выборе режиссерских дорожек,вы можете сделать его доступным с и без окончательной</target>
        </trans-unit>
        <trans-unit id="c5b3b194631676b25d479ba8960b569223e4c363" translate="yes" xml:space="preserve">
          <source>When you introduce virtual directory structures &lt;code&gt;/blog/article/123&lt;/code&gt; this impacts relative resource references in HTML (such as &lt;code&gt;&amp;lt;img src=mouse.png&amp;gt;&lt;/code&gt;).
Which can be solved by:</source>
          <target state="translated">Когда вы вводите структуры виртуальных каталогов &lt;code&gt;/blog/article/123&lt;/code&gt; , это влияет на относительные ссылки на ресурсы в HTML (например, &lt;code&gt;&amp;lt;img src=mouse.png&amp;gt;&lt;/code&gt; ). Что может быть решено путем:</target>
        </trans-unit>
        <trans-unit id="22eb5ad30eff3a83a982c487a7eeafa78266307c" translate="yes" xml:space="preserve">
          <source>Whenever something &lt;em&gt;doesn't work&lt;/em&gt;</source>
          <target state="translated">Всякий раз, когда что-то &lt;em&gt;не работает&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="73279bd5b2034996f948348aaf4405c0d1d8ebfc" translate="yes" xml:space="preserve">
          <source>Which helps to narrow down overly generic rules and regex mishaps.</source>
          <target state="translated">Что помогает сузить круг чрезмерно общих правил и регрессных неудач.</target>
        </trans-unit>
        <trans-unit id="ef42d9dca7c76ff93fcf4f46cc65e5e50e1ea14b" translate="yes" xml:space="preserve">
          <source>Which is not to say you always &lt;em&gt;have to&lt;/em&gt;. Content-Negotiation is just an automatism to virtual resources.</source>
          <target state="translated">Что не означает, что вы всегда &lt;em&gt;должны&lt;/em&gt; . Content-Negotiation - это просто автоматизация виртуальных ресурсов.</target>
        </trans-unit>
        <trans-unit id="8178d60b1be6e325d969a1f01cbe50a62bca55c9" translate="yes" xml:space="preserve">
          <source>Which is often used by PHP frameworks or WebCMS / portal scripts. The actual path splitting then is handled in PHP using &lt;code&gt;$_SERVER[&quot;REQUEST_URI&quot;]&lt;/code&gt;. So conceptionally it's pretty much the opposite of URL handling &quot;per mod_rewrite&quot;. (Just use &lt;a href=&quot;https://httpd.apache.org/docs/2.4/rewrite/remapping.html#fallback-resource&quot;&gt;&lt;code&gt;FallBackResource&lt;/code&gt;&lt;/a&gt; instead.)</source>
          <target state="translated">Который часто используется PHP-фреймворками или скриптами WebCMS / portal. Фактическое разбиение пути затем обрабатывается в PHP с использованием &lt;code&gt;$_SERVER[&quot;REQUEST_URI&quot;]&lt;/code&gt; . Таким образом, концептуально это в значительной степени противоположно обработке URL &quot;per mod_rewrite&quot;. (Просто используйте &lt;a href=&quot;https://httpd.apache.org/docs/2.4/rewrite/remapping.html#fallback-resource&quot;&gt; &lt;code&gt;FallBackResource&lt;/code&gt; &lt;/a&gt; .)</target>
        </trans-unit>
        <trans-unit id="66300ff1c036bd0e881fe379dec2cb88970a4d4c" translate="yes" xml:space="preserve">
          <source>Which it doesn't per default. You can &lt;a href=&quot;https://stackoverflow.com/questions/7218164/multiple-rewriterules-for-single-rewritecond-in-htaccess&quot;&gt;chain them&lt;/a&gt; using the &lt;code&gt;[S=2]&lt;/code&gt; flag. Else you'll have to repeat them. While sometimes you can craft an &quot;inverted&quot; primary rule to [END] the rewrite processing early.</source>
          <target state="translated">Что это не по умолчанию. Вы можете &lt;a href=&quot;https://stackoverflow.com/questions/7218164/multiple-rewriterules-for-single-rewritecond-in-htaccess&quot;&gt;связать их,&lt;/a&gt; используя флаг &lt;code&gt;[S=2]&lt;/code&gt; . Иначе вам придется их повторять. Хотя иногда вы можете создать &amp;laquo;перевернутое&amp;raquo; первичное правило для [END] обработки перезаписи на ранней стадии.</target>
        </trans-unit>
        <trans-unit id="dfa0314a5be793cf2743f125195fe1bfb6a4399d" translate="yes" xml:space="preserve">
          <source>You can easily extend that rule to allow for &lt;code&gt;/article/title-string&lt;/code&gt; placeholders:</source>
          <target state="translated">Вы можете легко расширить это правило, чтобы включить заполнители &lt;code&gt;/article/title-string&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="6a6877229f800cd4d7bb88f9850b271d0487be6f" translate="yes" xml:space="preserve">
          <source>You can split them out into individual &lt;code&gt;RewriteRule&lt;/code&gt;s should this get too complex.</source>
          <target state="translated">Вы можете разделить их на отдельные &lt;code&gt;RewriteRule&lt;/code&gt; , если это станет слишком сложным.</target>
        </trans-unit>
        <trans-unit id="8585e0db233781f56ebd06de62c7eb1f8f5b3a5a" translate="yes" xml:space="preserve">
          <source>You can't match &lt;code&gt;RewriteRule index.php\?x=y&lt;/code&gt;, because mod_rewrite compares just against relative paths per default. You can match them separately however via:</source>
          <target state="translated">Вы не можете сопоставить &lt;code&gt;RewriteRule index.php\?x=y&lt;/code&gt; , потому что mod_rewrite сравнивает только относительные пути по умолчанию. Вы можете сопоставить их отдельно, однако через:</target>
        </trans-unit>
        <trans-unit id="d222b87fbace9b84595f1388716086c2a42d24b7" translate="yes" xml:space="preserve">
          <source>You could alternatively craft further RewriteRules to rebind &lt;code&gt;.css&lt;/code&gt; or &lt;code&gt;.png&lt;/code&gt; paths to their original locations.
But that's both unneeded, or incurs extra redirects and hampers caching.</source>
          <target state="translated">В качестве альтернативы вы можете создать дополнительные RewriteRules, чтобы привязать пути &lt;code&gt;.css&lt;/code&gt; или &lt;code&gt;.png&lt;/code&gt; к их исходным местоположениям. Но это и не нужно, или влечет за собой дополнительные перенаправления и затрудняет кеширование.</target>
        </trans-unit>
        <trans-unit id="44a6fa9efc666a65a1bd62ec9dc5ea3f7942e480" translate="yes" xml:space="preserve">
          <source>You shouldn't start your &lt;code&gt;.htaccess&lt;/code&gt; RewriteRule patterns with &lt;code&gt;^/&lt;/code&gt; normally:</source>
          <target state="translated">Вы не должны начинать свои шаблоны &lt;code&gt;.htaccess&lt;/code&gt; RewriteRule с &lt;code&gt;^/&lt;/code&gt; обычно:</target>
        </trans-unit>
        <trans-unit id="815d892a020c87eb8dcd1e707d7e6e98c8c8c3ca" translate="yes" xml:space="preserve">
          <source>You're most commonly seeing RewriteRules to simulate a virtual directory structure. But you're not forced to be uncreative. You can as well use &lt;code&gt;-&lt;/code&gt; hyphens for segmenting or structure.</source>
          <target state="translated">Вы чаще всего видите RewriteRules для имитации структуры виртуальных каталогов. Но вы не обязаны быть нетворческими. Вы также можете использовать дефисы для сегментации или структуры.</target>
        </trans-unit>
        <trans-unit id="d0f0d732863ee895a309758e84227312d39f3171" translate="yes" xml:space="preserve">
          <source>You've probably seen this in many examples:</source>
          <target state="translated">Вы,наверное,видели это во многих примерах:</target>
        </trans-unit>
        <trans-unit id="a8f5998b0f4e9bd3bbc4db8f81b5de80b7f6c2ed" translate="yes" xml:space="preserve">
          <source>approach is easy to append onto any other RewriteRule.</source>
          <target state="translated">Подход легко добавляется к любому другому RewriteRule.</target>
        </trans-unit>
        <trans-unit id="6ec7f782439e58bed3a8696b026c30a1d9093ec8" translate="yes" xml:space="preserve">
          <source>in patterns</source>
          <target state="translated">по схемам</target>
        </trans-unit>
        <trans-unit id="a56c70ab2c290c7937cb7e100dd4b3b8f2b82d94" translate="yes" xml:space="preserve">
          <source>mod_rewrite does not magically make all your URLs &quot;pretty&quot;. This is a common misunderstanding. If you have this link in your web site:</source>
          <target state="translated">mod_rewrite волшебным образом не делает все ваши URL &quot;красивыми&quot;.Это распространенное недоразумение.Если у вас есть эта ссылка на вашем сайте:</target>
        </trans-unit>
        <trans-unit id="043d0819e92bf8f0d7f33ab50480ff32c04dd7c1" translate="yes" xml:space="preserve">
          <source>mod_rewrite is a way to &lt;em&gt;rewrite&lt;/em&gt; the internal request handling. When the web server receives a request for the URL &lt;code&gt;/foo/bar&lt;/code&gt;, you can &lt;em&gt;rewrite&lt;/em&gt; that URL into something else before the web server will look for a file on disk to match it. Simple example:</source>
          <target state="translated">mod_rewrite - это способ &lt;em&gt;переписать&lt;/em&gt; внутреннюю обработку запросов. Когда веб-сервер получает запрос на URL &lt;code&gt;/foo/bar&lt;/code&gt; , вы можете &lt;em&gt;переписать&lt;/em&gt; этот URL-адрес во что-то еще, прежде чем веб-сервер будет искать файл на диске, чтобы соответствовать ему. Простой пример:</target>
        </trans-unit>
        <trans-unit id="c838466232ea0f7c751192a9afce76a1b060ebe8" translate="yes" xml:space="preserve">
          <source>scheme:</source>
          <target state="translated">scheme:</target>
        </trans-unit>
        <trans-unit id="f37e25064bedecaffcd022221184a14425448ecb" translate="yes" xml:space="preserve">
          <source>there's nothing mod_rewrite can do to make that pretty. In order to make this a pretty link, you have to:</source>
          <target state="translated">нет ничего,что может сделать mod_rewrite,чтобы сделать это красивым.Чтобы сделать это красивой ссылкой,вы должны:</target>
        </trans-unit>
        <trans-unit id="72bba5fd6da4f8012e901d27e8f7631e871b0922" translate="yes" xml:space="preserve">
          <source>␣</source>
          <target state="translated">␣</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
