<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/20563772">
    <body>
      <group id="20563772">
        <trans-unit id="04c55724768058d5a9709a1afac88b7e9e8c36de" translate="yes" xml:space="preserve">
          <source>&quot;Pretty links&quot; is an often requested topic, but it is rarely fully explained. &lt;a href=&quot;https://en.wikipedia.org/wiki/URL_redirection#Apache_HTTP_Server_mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt; is one way to make &quot;pretty links&quot;, but it's complex and its syntax is very terse, hard to grok, and the documentation assumes a certain level of proficiency in HTTP. Can someone explain in simple terms how &quot;pretty links&quot; work and how mod_rewrite can be used to create them?</source>
          <target state="translated">「かわいらしいリンク」は頻繁に要求されるトピックですが、完全に説明されることはほとんどありません。 &lt;a href=&quot;https://en.wikipedia.org/wiki/URL_redirection#Apache_HTTP_Server_mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;は「かわいらしいリンク」を作成する1つの方法ですが、複雑で、構文は非常に簡潔であり、理解するのが難しく、ドキュメントはHTTPのある程度の熟練度を前提としています。 「きれいなリンク」がどのように機能し、mod_rewriteを使用してリンクを作成できるかを誰かが簡単に説明できますか？</target>
        </trans-unit>
        <trans-unit id="a0144ea22bd63e090c9a57002ef4dca43f06244e" translate="yes" xml:space="preserve">
          <source>&quot;Removing&quot; the PHP extension</source>
          <target state="translated">&quot;PHPの拡張機能を削除する&quot;</target>
        </trans-unit>
        <trans-unit id="597d8e063a87f940aba17a58c3d20ee1aa29b5aa" translate="yes" xml:space="preserve">
          <source>&amp;larr;&amp;rarr;</source>
          <target state="translated">&amp;larr;&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="b5513ad1a21d7a31373a546022f3c58ec77d271b" translate="yes" xml:space="preserve">
          <source>&amp;middot; &lt;a href=&quot;https://stackoverflow.com/questions/234723/generic-htaccess-redirect-www-to-non-www&quot;&gt;Generic htaccess redirect www to non-www&lt;/a&gt;</source>
          <target state="translated">・&lt;a href=&quot;https://stackoverflow.com/questions/234723/generic-htaccess-redirect-www-to-non-www&quot;&gt;一般的なhtaccessはwwwをwww以外にリダイレクトします&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9e9d10a73898648b0aedc5f97de4fe51653ebbb0" translate="yes" xml:space="preserve">
          <source>&amp;middot; &lt;a href=&quot;https://stackoverflow.com/questions/3634101/url-rewriting-for-different-protocols-in-htaccess&quot;&gt;URL rewriting for different protocols in .htaccess&lt;/a&gt;</source>
          <target state="translated">・&lt;a href=&quot;https://stackoverflow.com/questions/3634101/url-rewriting-for-different-protocols-in-htaccess&quot;&gt;.htaccessのさまざまなプロトコルのURL書き換え&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="11664097a8ffb0d8f28dc915df0128cf941e154f" translate="yes" xml:space="preserve">
          <source>&amp;middot; &lt;a href=&quot;https://stackoverflow.com/questions/4916222/htaccess-how-to-force-www-in-a-generic-way&quot;&gt;.htaccess - how to force &quot;www.&quot; in a generic way?&lt;/a&gt;</source>
          <target state="translated">・&lt;a href=&quot;https://stackoverflow.com/questions/4916222/htaccess-how-to-force-www-in-a-generic-way&quot;&gt;.htaccess-「www」を強制する方法&lt;/a&gt; 一般的な方法で？</target>
        </trans-unit>
        <trans-unit id="49874443e813166bc4fdbfa82a1bbca93286ff6a" translate="yes" xml:space="preserve">
          <source>&amp;middot; &lt;a href=&quot;https://stackoverflow.com/questions/9153262/tips-for-debugging-htaccess-rewrite-rules&quot;&gt;Tips for debugging .htaccess rewrite rules&lt;/a&gt;</source>
          <target state="translated">・&lt;a href=&quot;https://stackoverflow.com/questions/9153262/tips-for-debugging-htaccess-rewrite-rules&quot;&gt;.htaccess書き換えルールをデバッグするためのヒント&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="23f298a47c3d469e691054bf2fb011ca932d6db4" translate="yes" xml:space="preserve">
          <source>&amp;middot; &lt;a href=&quot;https://stackoverflow.com/questions/945047/htaccess-not-working-mod-rewrite&quot;&gt;.htaccess not working (mod_rewrite)&lt;/a&gt;</source>
          <target state="translated">・&lt;a href=&quot;https://stackoverflow.com/questions/945047/htaccess-not-working-mod-rewrite&quot;&gt;.htaccessが機能しない（mod_rewrite）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="90b7f713187e69c77adcad3d9680fb1827b33af5" translate="yes" xml:space="preserve">
          <source>&amp;middot; Note that the leading slash is still correct in &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; sections though. Which is why you often see it &lt;code&gt;^/?&lt;/code&gt; optionalized for rule parity.</source>
          <target state="translated">・ただし、 &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; セクションの先頭のスラッシュは引き続き正しいことに注意してください。 よく見かけるのはこのためです &lt;code&gt;^/?&lt;/code&gt; ルールのパリティのためにオプション化されました。</target>
        </trans-unit>
        <trans-unit id="cbe50ec46e66e9fc50014beb0301950e6ccf42b2" translate="yes" xml:space="preserve">
          <source>&amp;middot; Or when using a &lt;code&gt;RewriteCond %{REQUEST_URI}&lt;/code&gt; you'd still match for a leading &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">・または、 &lt;code&gt;RewriteCond %{REQUEST_URI}&lt;/code&gt; を使用する場合でも、先頭の &lt;code&gt;/&lt;/code&gt; と一致します。</target>
        </trans-unit>
        <trans-unit id="751229f868612475f9aa274c27c6748c3d39d97a" translate="yes" xml:space="preserve">
          <source>&amp;middot; See also &lt;a href=&quot;https://webmasters.stackexchange.com/questions/27118/when-is-the-leading-slash-needed-in-mod-rewrite-patterns&quot;&gt;Webmaster.SE: When is the leading slash (/) needed in mod_rewrite patterns?&lt;/a&gt;</source>
          <target state="translated">・&lt;a href=&quot;https://webmasters.stackexchange.com/questions/27118/when-is-the-leading-slash-needed-in-mod-rewrite-patterns&quot;&gt;Webmaster.SE&lt;/a&gt;も参照してください：mod_rewriteパターンで先頭のスラッシュ（/）が必要になるのはいつですか？</target>
        </trans-unit>
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">,</target>
        </trans-unit>
        <trans-unit id="09ff1d5e4b8bdd76ba405a3bed899d1c8bef75b6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_alias.html#scriptaliasmatch&quot;&gt;&lt;code&gt;ScriptAliasMatch&lt;/code&gt;&lt;/a&gt; is primarily for CGI scripts, but also ought to works for PHP. It allows regexps just like any &lt;code&gt;RewriteRule&lt;/code&gt;. In fact it's perhaps the most robust option to configurate a catch-all front controller.</source>
          <target state="translated">&lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_alias.html#scriptaliasmatch&quot;&gt; &lt;code&gt;ScriptAliasMatch&lt;/code&gt; &lt;/a&gt;は主にCGIスクリプト用ですが、PHPでも機能するはずです。 RewriteRuleと同じように正規表現を使用できます。 実際、それはおそらく、すべてを網羅するフロントコントローラーを構成するための最も堅牢なオプションでしょう。</target>
        </trans-unit>
        <trans-unit id="9a549849bbb01109ba011c5521c50e9b4dab2ca6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html#rewritecond&quot;&gt;Rewrite conditions&lt;/a&gt; make rewrites even more powerful, allowing you to specify rewrites for more specific situations. There are a lot of conditions which you can read about in &lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html#rewritecond&quot;&gt;the documentation&lt;/a&gt;, but I'll touch on a few common examples and explain them:</source>
          <target state="translated">&lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html#rewritecond&quot;&gt;書き換え条件&lt;/a&gt;により、書き換えがさらに強力になり、特定の状況で書き換えを指定できるようになります。 &lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html#rewritecond&quot;&gt;ドキュメント&lt;/a&gt;で読むことができる多くの条件がありますが、いくつかの一般的な例に触れて説明します。</target>
        </trans-unit>
        <trans-unit id="dabf9d101070ea48e2e85c726ecf5e80fe0caccb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$&lt;/code&gt; indicates this is the end of the string we want to match</source>
          <target state="translated">&lt;code&gt;$&lt;/code&gt; は、これが照合する文字列の終わりであることを示します</target>
        </trans-unit>
        <trans-unit id="3841678c9eead3827e8ffd336e806cea70870cfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%{REQUEST_FILENAME} !-d&lt;/code&gt; will check to see if the file exists on the current server, and only execute the rewrite if it doesn't</source>
          <target state="translated">&lt;code&gt;%{REQUEST_FILENAME} !-d&lt;/code&gt; は、ファイルが現在のサーバーに存在するかどうかを確認し、存在しない場合にのみ書き換えを実行します</target>
        </trans-unit>
        <trans-unit id="52ef5672eb064f0ebc113e70140ea1eadd1d8617" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%{REQUEST_FILENAME} !-f&lt;/code&gt; will check to see if the file exists on the current server, and only execute the rewrite if it doesn't</source>
          <target state="translated">&lt;code&gt;%{REQUEST_FILENAME} !-f&lt;/code&gt; は、現在のサーバーにファイルが存在するかどうかを確認し、存在しない場合にのみ書き換えを実行します</target>
        </trans-unit>
        <trans-unit id="b5f7869488f52b18660937317e48137ddb57255d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%{REQUEST_URI} \.(jpg|jpeg|gif|png)$ [NC]&lt;/code&gt; will only execute the rewrite for files with a file extension of jpg, jpeg, gif or png (case insensitive).</source>
          <target state="translated">&lt;code&gt;%{REQUEST_URI} \.(jpg|jpeg|gif|png)$ [NC]&lt;/code&gt; は、ファイル拡張子がjpg、jpeg、gif、またはpng（大文字と小文字を区別しない）のファイルに対してのみ書き換えを実行します。</target>
        </trans-unit>
        <trans-unit id="84f88a1c5e685a84649de8e1bb782d50117ee3d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;IfModule *&amp;gt;&lt;/code&gt; wrappers begone!</source>
          <target state="translated">&lt;code&gt;&amp;lt;IfModule *&amp;gt;&lt;/code&gt; ラッパーがなくなりました！</target>
        </trans-unit>
        <trans-unit id="740e3c6f83451b565f345cfff88bed98503f3438" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.*&lt;/code&gt; matches anything, even an empty string. You don't want to use this pattern everywhere, but often in the last fallback rule.</source>
          <target state="translated">&lt;code&gt;.*&lt;/code&gt; 、空の文字列であっても、すべてに一致します。 このパターンをどこでも使用する必要はありませんが、多くの場合、最後のフォールバックルールで使用します。</target>
        </trans-unit>
        <trans-unit id="57a8bb9a55be2beb96f900e52fa775ececf4eb4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.htaccess&lt;/code&gt; vs. &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.htaccess&lt;/code&gt; 対 &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd8275fe29a7eea617f1c546405e782cf8821462" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;?&lt;/code&gt; means that the preceding character is optional, so in this case both &lt;code&gt;/blog/1/foo/&lt;/code&gt; and &lt;code&gt;/blog/1/foo&lt;/code&gt; would rewrite to the same place</source>
          <target state="translated">&lt;code&gt;?&lt;/code&gt; 前の文字はオプションであるため、この場合、 &lt;code&gt;/blog/1/foo/&lt;/code&gt; と &lt;code&gt;/blog/1/foo&lt;/code&gt; の両方が同じ場所に書き換えられます</target>
        </trans-unit>
        <trans-unit id="53ff5984a739c16e5b086e2a03847c8c36b495a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RewriteRule&lt;/code&gt; - starts the rewrite rule</source>
          <target state="translated">&lt;code&gt;RewriteRule&lt;/code&gt; -書き換えルールを開始します</target>
        </trans-unit>
        <trans-unit id="f6bc4be5b28507c8732dee618da29f11552edf76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[NC,L,QSA]&lt;/code&gt; are flags for the rewrite rule, separated by a comma, which I will explain more on later</source>
          <target state="translated">&lt;code&gt;[NC,L,QSA]&lt;/code&gt; は、コンマで区切られた書き換えルールのフラグです。これについては、後で詳しく説明します</target>
        </trans-unit>
        <trans-unit id="7f10bfcb87252edf50ae9c562e503f26dba99880" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[\w\-.,]+&lt;/code&gt; adds periods and commas. Prefer an escaped &lt;code&gt;\-&lt;/code&gt; dash in &lt;code&gt;[&amp;hellip;]&lt;/code&gt; charclasses.</source>
          <target state="translated">&lt;code&gt;[\w\-.,]+&lt;/code&gt; はピリオドとコンマを追加します。 &lt;code&gt;[&amp;hellip;]&lt;/code&gt; 文字クラスではエスケープされた &lt;code&gt;\-&lt;/code&gt; ダッシュを優先します。</target>
        </trans-unit>
        <trans-unit id="652e235ffc34df09e53fb0c478bb6569c2f6220f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[\w\-]+&lt;/code&gt; for &quot;slug&quot;-style path segments, using letters, numbers, dash &lt;code&gt;-&lt;/code&gt;&lt;em&gt;and&lt;/em&gt;&lt;code&gt;_&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;[\w\-]+&lt;/code&gt; &quot;スラッグ&quot;スタイルのパスセグメントの場合、文字、数字、ダッシュ &lt;code&gt;-&lt;/code&gt; &lt;em&gt;および&lt;/em&gt; &lt;code&gt;_&lt;/code&gt; を使用</target>
        </trans-unit>
        <trans-unit id="eefc1f169daf6dd207f047f1eca8ec66ccf23d21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[^/]+&lt;/code&gt; is more often used for path segments. It matches anything but the forward slash.</source>
          <target state="translated">&lt;code&gt;[^/]+&lt;/code&gt; はパスセグメントによく使用されます。 スラッシュ以外のすべてと一致します。</target>
        </trans-unit>
        <trans-unit id="007f7af81afda692adf95fb0f0ea88501e1bf3b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\.&lt;/code&gt; denotes a literal period. Otherwise &lt;code&gt;.&lt;/code&gt; outside of &lt;code&gt;[&amp;hellip;]&lt;/code&gt; is placeholder for any symbol.</source>
          <target state="translated">&lt;code&gt;\.&lt;/code&gt; 文字通りのピリオドを示します。 それ以外の場合 &lt;code&gt;.&lt;/code&gt; &lt;code&gt;[&amp;hellip;]&lt;/code&gt; の外側は、任意のシンボルのプレースホルダーです。</target>
        </trans-unit>
        <trans-unit id="5a4fb0ae48ecd50b05579d0b16175b9faa2f9145" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\d+&lt;/code&gt; only matches numeric strings.</source>
          <target state="translated">&lt;code&gt;\d+&lt;/code&gt; は数値文字列のみに一致します。</target>
        </trans-unit>
        <trans-unit id="88dd17205e1d1eb1880a3862d44c47469b59bc65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w+&lt;/code&gt; matches alphanumeric characters. It's basically shorthand for &lt;code&gt;[A-Za-z0-9_]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;\w+&lt;/code&gt; 英数字に一致します。 基本的には &lt;code&gt;[A-Za-z0-9_]&lt;/code&gt; の省略形です。</target>
        </trans-unit>
        <trans-unit id="ecd5b35217c81c63b4a74c2649897e0738e78196" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;^&lt;/code&gt; indicates the start of the page name - so it will rewrite &lt;code&gt;example.com/blog/...&lt;/code&gt; but not &lt;code&gt;example.com/foo/blog/...&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; はページ名の開始を示します-したがって、 &lt;code&gt;example.com/blog/...&lt;/code&gt; は書き換えられますが、 &lt;code&gt;example.com/foo/blog/...&lt;/code&gt; blog / ...は書き換えられません。</target>
        </trans-unit>
        <trans-unit id="76c35aed0c9b66dedf952907da4ac7c5d1e91082" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;^blog/([0-9]+)/([A-Za-z0-9-\+]+)/?$&lt;/code&gt; - This is called the pattern, however I'll just refer to it as the left hand side of the rule - what you want to rewrite from</source>
          <target state="translated">&lt;code&gt;^blog/([0-9]+)/([A-Za-z0-9-\+]+)/?$&lt;/code&gt; -これはパターンと呼ばれますが、左側と呼ぶだけにしますルールの-書き換え元</target>
        </trans-unit>
        <trans-unit id="3c3e47bd9da371a8d996ad9238fb7d0a846ed34f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blog/index.php?id=$1&amp;amp;title=$2&lt;/code&gt; - called the substitution, or right hand side of a rewrite rule - what you want to rewrite to</source>
          <target state="translated">&lt;code&gt;blog/index.php?id=$1&amp;amp;title=$2&lt;/code&gt; 置換と呼ばれる、または書き換えルールの右側-書き換え先</target>
        </trans-unit>
        <trans-unit id="c018111bc70724dcfa8cb1f7668165f1f8338ea1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(One could use &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_substitute.html&quot;&gt;&lt;code&gt;mod_substitute&lt;/code&gt;&lt;/a&gt; in conjunction to transform outgoing HTML pages and their contained links. Though this is usally more effort than just updating your HTML resources.)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（ &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_substitute.html&quot;&gt; &lt;code&gt;mod_substitute&lt;/code&gt; &lt;/a&gt;を組み合わせて使用​​して、送信されるHTMLページとそこに含まれるリンクを変換できます。 ただし 、これは通常、HTMLリソースを更新するだけではありません。）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="13b7ff54bd60680e79ae5fbe5d410830c1d4ba46" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Disclaimer: Just a pet peeve.&lt;/em&gt; You often hear pretty URL rewriting schemes referred to as &quot;SEO&quot; links or something. While this is useful for googling examples, it's a dated misnomer.</source>
          <target state="translated">&lt;em&gt;免責事項：ただの不満。&lt;/em&gt; 「SEO」リンクなどと呼ばれるかなりのURL書き換えスキームをよく耳にします。 これはグーグルの例には役立ちますが、日付が誤っているためです。</target>
        </trans-unit>
        <trans-unit id="eac2e867209bf4cc7ac3e6c6c4fa20816e1a9de4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Frequent duplicates:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;頻繁な重複：&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="97e1889f04dc3ae76733cf1c73e291e1aa7e9fa0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Before asking your own question&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;質問する前に&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c93e3a38d537bf6691059af6469a46eaab5ed161" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Compare &lt;code&gt;access.log&lt;/code&gt; and &lt;code&gt;error.log&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;access.log&lt;/code&gt; と &lt;code&gt;error.log&lt;/code&gt; を比較する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2eb684fba0d3ae631715207143e21b416e87c173" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Enable the RewriteLog&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;RewriteLogを有効にする&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9ad2c732c9574e224486865e3a43750bf1d28e9c" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;* &lt;em&gt;If&lt;/em&gt; allowed by the primary Apache configuration file; it's optional, but often enabled.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;*プライマリApache構成ファイルで許可されている&lt;em&gt;場合&lt;/em&gt; 。&lt;/sub&gt; &lt;sub&gt;これはオプションですが、多くの場合有効になっています。&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="2ac572067e403e7daf793fe6e0ac4b75ec0f146e" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;(Keep in mind to remove the slash in &lt;code&gt;^/&lt;/code&gt; pattern prefixes for &lt;code&gt;.htaccess&lt;/code&gt; usage.)&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;（ &lt;code&gt;.htaccess&lt;/code&gt; を使用する場合は、 &lt;code&gt;^/&lt;/code&gt; パターン接頭辞のスラッシュを削除することを忘れないでください。）&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="1d70018b10d872204ec89158898067f937b2f3f7" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/intro.html&quot;&gt;Apache manual - mod_rewrite intro&lt;/a&gt;, Copyright 2015 The Apache Software Foundation, AL-2.0&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;&lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/intro.html&quot;&gt;Apacheマニュアル-mod_rewrite intro&lt;/a&gt; 、Copyright 2015 The Apache Software Foundation、AL-2.0&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="21606782c65e44cac7afbb90977d8b6f82140e76" translate="yes" xml:space="preserve">
          <source>=</source>
          <target state="translated">=</target>
        </trans-unit>
        <trans-unit id="3bb0577c12be030ceb402e055b81983cbc559dc7" translate="yes" xml:space="preserve">
          <source>A common misinterpetation is that a RewriteCond blocks multiple RewriteRules (because they're visually arranged together):</source>
          <target state="translated">よくある誤解は、RewriteCondが複数のRewriteRuleをブロックしているということです(視覚的に一緒に配置されているため)。</target>
        </trans-unit>
        <trans-unit id="d6fc1b11df2a64cfc4257b5e2e334dcee5fdb582" translate="yes" xml:space="preserve">
          <source>A common variation is to have optional prefixes &lt;em&gt;within&lt;/em&gt; a rule. This usually makes sense if you have static strings or more constrained placeholders around:</source>
          <target state="translated">一般的なバリエーションは、オプションのプレフィックス&lt;em&gt;を&lt;/em&gt;ルール&lt;em&gt;内に&lt;/em&gt;含めることです。 これは通常、静的な文字列や制約されたプレースホルダーがある場合に意味があります。</target>
        </trans-unit>
        <trans-unit id="b7d27b8628cafc228ce03267fced905dd8074078" translate="yes" xml:space="preserve">
          <source>A more directed approach to avoid carrying around &lt;code&gt;.php&lt;/code&gt; suffixes in URLs is &lt;a href=&quot;http://php.net/manual/en/security.hiding.php&quot;&gt;configuring the PHP handler&lt;/a&gt; for other file schemes. The simplest option is overriding the default MIME/handler type via &lt;code&gt;.htaccess&lt;/code&gt;:</source>
          <target state="translated">URLで &lt;code&gt;.php&lt;/code&gt; サフィックスの持ち越しを回避するためのより直接的なアプローチは、他のファイルスキーム用に&lt;a href=&quot;http://php.net/manual/en/security.hiding.php&quot;&gt;PHPハンドラー&lt;/a&gt;を構成することです。 最も簡単なオプションは、デフォルトのMIME /ハンドラタイプを &lt;code&gt;.htaccess&lt;/code&gt; でオーバーライドすることです。</target>
        </trans-unit>
        <trans-unit id="20fc23c4cb699185bba8ced01fc05186ba75a0a1" translate="yes" xml:space="preserve">
          <source>A more practical use of alternative lists are mapping request paths to distinct scripts. For example to provide uniform URLs for an older and a newer web application based on dates:</source>
          <target state="translated">代替リストのより実用的な使い方としては、リクエストパスを別個のスクリプトにマッピングすることがあります。例えば、古いウェブアプリケーションと新しいウェブアプリケーションのために、日付に基づいて統一されたURLを提供することができます。</target>
        </trans-unit>
        <trans-unit id="124f0e78269a525e3a84a54aeffe59146bd971ec" translate="yes" xml:space="preserve">
          <source>A request for &lt;code&gt;/article/123&lt;/code&gt; for example could map to &lt;code&gt;article.php&lt;/code&gt; with a &lt;code&gt;/123&lt;/code&gt; PATH_INFO implicitly. You'd either have to guard your rules then with the commonplace &lt;code&gt;RewriteCond&lt;/code&gt;&lt;code&gt;!-f&lt;/code&gt;+&lt;code&gt;!-d&lt;/code&gt;, and/or disable PATH_INFO support, or perhaps just disable &lt;code&gt;Options -MultiViews&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/article/123&lt;/code&gt; のリクエストは、暗黙的に &lt;code&gt;/123&lt;/code&gt; PATH_INFOを使用して &lt;code&gt;article.php&lt;/code&gt; にマップできます。 次に、一般的な &lt;code&gt;RewriteCond&lt;/code&gt; &lt;code&gt;!-f&lt;/code&gt; + &lt;code&gt;!-d&lt;/code&gt; でルールを保護するか、PATH_INFOサポートを無効にするか、単に &lt;code&gt;Options -MultiViews&lt;/code&gt; を無効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="433be67f13d6a6039d826a3ae6dabfa87aeb67b2" translate="yes" xml:space="preserve">
          <source>Again take note that such settings propagate from one &lt;code&gt;.htaccess&lt;/code&gt; to subfolders. You always should disable script execution (&lt;code&gt;SetHandler None&lt;/code&gt; and &lt;code&gt;Options -Exec&lt;/code&gt; or &lt;code&gt;php_flag engine off&lt;/code&gt; etc.) for static resources, and upload/ directories etc.</source>
          <target state="translated">このような設定は、1つの &lt;code&gt;.htaccess&lt;/code&gt; からサブフォルダに伝達されることに注意してください。 静的リソース、アップロード/ディレクトリなどに対しては、スクリプトの実行を常に無効にする必要があります（ &lt;code&gt;SetHandler None&lt;/code&gt; や &lt;code&gt;Options -Exec&lt;/code&gt; またはphp_flag &lt;code&gt;php_flag engine off&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="6c86f75fe82e60b09e41ad6e136753d057e4146d" translate="yes" xml:space="preserve">
          <source>Aliasing old .html paths to .php scripts</source>
          <target state="translated">古い .html パスを .php スクリプトにエイリアスする</target>
        </trans-unit>
        <trans-unit id="11b618e5bc8ecbd76c5f38a2fe95c312ffdef55a" translate="yes" xml:space="preserve">
          <source>All of the below examples assume that you have already included &lt;code&gt;RewriteEngine On&lt;/code&gt; in your &lt;code&gt;.htaccess&lt;/code&gt; file.</source>
          <target state="translated">以下の例はすべて、 &lt;code&gt;.htaccess&lt;/code&gt; ファイルに &lt;code&gt;RewriteEngine On&lt;/code&gt; がすでに含まれていることを前提としています。</target>
        </trans-unit>
        <trans-unit id="27a22e164a7b422c5235f0d0b21b0dc4423cefeb" translate="yes" xml:space="preserve">
          <source>Alternatively you can utilize PHPs array parameters via &lt;code&gt;?p[]=$1&amp;amp;p[]=$2&amp;amp;p[]=3&lt;/code&gt; query string here - if your script merely prefers them pre-split.
(Though it's more common to just use a catch-all rule, and let the script itself expand the segments out of the REQUEST_URI.)</source>
          <target state="translated">あるいは、ここで &lt;code&gt;?p[]=$1&amp;amp;p[]=$2&amp;amp;p[]=3&lt;/code&gt; クエリ文字列を介してPHPの配列パラメーターを利用することもできます-スクリプトが単に事前分割することを好む場合。 （キャッチオールルールを使用し、スクリプト自体がREQUEST_URIからセグメントを拡張することが一般的ですが）。</target>
        </trans-unit>
        <trans-unit id="e47f4e5a309adcf1b040c5210b5bc773d2eb8468" translate="yes" xml:space="preserve">
          <source>Alternatives to mod_rewrite</source>
          <target state="translated">mod_rewrite の代替</target>
        </trans-unit>
        <trans-unit id="a2ff10145ba39fbaf7ef21bb614d55aaa77793a9" translate="yes" xml:space="preserve">
          <source>Among its many options, Apache provides &lt;code&gt;mod_alias&lt;/code&gt; features - which sometimes work just as well as &lt;code&gt;mod_rewrite&lt;/code&gt;s RewriteRules. Note that most of those must be set up in a &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; section however, not in per-directory &lt;code&gt;.htaccess&lt;/code&gt; config files.</source>
          <target state="translated">その多くのオプションの中で、Apacheは &lt;code&gt;mod_alias&lt;/code&gt; 機能を提供します-これは &lt;code&gt;mod_rewrite&lt;/code&gt; のRewriteRulesと同じように機能する場合があります。 ただし、これらのほとんどは &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; セクションで設定する必要がありますが、ディレクトリごとの &lt;code&gt;.htaccess&lt;/code&gt; 構成ファイルでは設定しないでください。</target>
        </trans-unit>
        <trans-unit id="af99096848ed8cb0eea299166a097937fc97e50b" translate="yes" xml:space="preserve">
          <source>An excerpt from your &lt;code&gt;access.log&lt;/code&gt; and &lt;code&gt;error.log&lt;/code&gt; to verify what the existing rules resolved to. Better yet, a &lt;code&gt;rewrite.log&lt;/code&gt; summary.</source>
          <target state="translated">既存のルールが解決した内容を確認するための &lt;code&gt;access.log&lt;/code&gt; および &lt;code&gt;error.log&lt;/code&gt; からの抜粋。 さらに良いのは、 &lt;code&gt;rewrite.log&lt;/code&gt; の概要です。</target>
        </trans-unit>
        <trans-unit id="ba6a9ee04d540d46321a6a706abef24c659c81df" translate="yes" xml:space="preserve">
          <source>And a plain &lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_alias.html#alias&quot;&gt;&lt;code&gt;Alias&lt;/code&gt;&lt;/a&gt; helps with a few simple rewriting schemes as well.</source>
          <target state="translated">プレーンな&lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_alias.html#alias&quot;&gt; &lt;code&gt;Alias&lt;/code&gt; &lt;/a&gt;は、いくつかの簡単な書き換えスキーマにも役立ちます。</target>
        </trans-unit>
        <trans-unit id="ef9d8db5d3dfaf745489b854e4b254c552aab203" translate="yes" xml:space="preserve">
          <source>And it's commonly distributed for default &lt;code&gt;.htaccess&lt;/code&gt; rulesets with many open source projects. There it's just meant as fallback, and keeps &quot;ugly&quot; URLs work as default.</source>
          <target state="translated">また、多くのオープンソースプロジェクトでデフォルトの &lt;code&gt;.htaccess&lt;/code&gt; ルールセットに配布されます。 そこでは単にフォールバックとして意図されており、「醜い」URLをデフォルトとして機能させ続けます。</target>
        </trans-unit>
        <trans-unit id="86da803ab52102ad28a3f8ecce52c7d4a8621043" translate="yes" xml:space="preserve">
          <source>And newcomer-friendly regex overviews even:</source>
          <target state="translated">そして、新参者に優しい正規表現の概要まで。</target>
        </trans-unit>
        <trans-unit id="9d30c141612d532ddc9ac96890f3f30fd7097b62" translate="yes" xml:space="preserve">
          <source>And the &lt;a href=&quot;/questions/tagged/mod-rewrite&quot;&gt;mod-rewrite&lt;/a&gt;&lt;a href=&quot;https://stackoverflow.com/tags/mod-rewrite/info&quot;&gt;tag wiki references&lt;/a&gt;.</source>
          <target state="translated">そして、 &lt;a href=&quot;/questions/tagged/mod-rewrite&quot;&gt;mod-rewrite&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/tags/mod-rewrite/info&quot;&gt;タグのwiki参照&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="fe62757cd069906fac22465f642c8b25e045beee" translate="yes" xml:space="preserve">
          <source>And the short &lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/intro.html#regex&quot;&gt;Apache regex summary&lt;/a&gt;.</source>
          <target state="translated">そして、短い&lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/intro.html#regex&quot;&gt;Apache正規表現の要約&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="5408edd8784686bb03f95bd3cfbf8d5c4d025f1b" translate="yes" xml:space="preserve">
          <source>Another often encountered rule is this:</source>
          <target state="translated">もう一つよく遭遇するルールがこれです。</target>
        </trans-unit>
        <trans-unit id="bf5c556e294b25711a0b5a44327bf833cd3e101a" translate="yes" xml:space="preserve">
          <source>Apache &lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/remapping.html&quot;&gt;redirecting and remapping&lt;/a&gt; guide.</source>
          <target state="translated">Apache &lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/remapping.html&quot;&gt;リダイレクトおよび再マッピング&lt;/a&gt;ガイド。</target>
        </trans-unit>
        <trans-unit id="284ef6600e99697d0d7d8d2957a4e47dd26fa3af" translate="yes" xml:space="preserve">
          <source>Apache and PHP versions, OS type, filesystem, DOCUMENT_ROOT, and PHPs &lt;code&gt;$_SERVER&lt;/code&gt; environment if it's about a parameter mismatch.</source>
          <target state="translated">ApacheとPHPのバージョン、OSタイプ、ファイルシステム、DOCUMENT_ROOT、およびパラメーターの不一致に関するPHPの &lt;code&gt;$_SERVER&lt;/code&gt; 環境。</target>
        </trans-unit>
        <trans-unit id="cfe353f8853a9f04a5bdabbcdc53ebd267952363" translate="yes" xml:space="preserve">
          <source>As said before, you don't often want too generic rewrite patterns. It does however make sense to combine static and specific comparisons with a &lt;code&gt;.*&lt;/code&gt; sometimes.</source>
          <target state="translated">前に述べたように、あまりにも一般的な書き換えパターンを必要とすることはあまりありません。 ただし、静的な比較と特定の比較を &lt;code&gt;.*&lt;/code&gt; と組み合わせることは意味があります。</target>
        </trans-unit>
        <trans-unit id="d76c15ceb6076c092e88bddbb37d48859289c9a8" translate="yes" xml:space="preserve">
          <source>As you might know, Stack Overflow is very suitable for asking questions on mod_rewrite. Make them &lt;a href=&quot;https://stackoverflow.com/help/on-topic&quot;&gt;on-topic&lt;/a&gt;
by including prior research and attempts (avoid redundant answers), demonstrate basic &lt;a href=&quot;/questions/tagged/regex&quot;&gt;regex&lt;/a&gt; understanding, and:</source>
          <target state="translated">ご存知かもしれませんが、Stack Overflowはmod_rewriteに関する質問に非常に適しています。 以前の調査と試行を含めて（冗長な回答を避けて） &lt;a href=&quot;https://stackoverflow.com/help/on-topic&quot;&gt;トピックをオントピックに&lt;/a&gt;し、基本的な&lt;a href=&quot;/questions/tagged/regex&quot;&gt;正規表現の&lt;/a&gt;理解を示し、次のようにします。</target>
        </trans-unit>
        <trans-unit id="dff94f3ae82bd649b875179b762ba9d36b194992" translate="yes" xml:space="preserve">
          <source>AskApache &lt;a href=&quot;http://www.askapache.com/htaccess/htaccess.html&quot;&gt;ultimate .htaccess guide&lt;/a&gt;</source>
          <target state="translated">AskApache &lt;a href=&quot;http://www.askapache.com/htaccess/htaccess.html&quot;&gt;究極の.htaccessガイド&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="84507ed5b78e9f12ea3e3bf7c3287d27ecaf1074" translate="yes" xml:space="preserve">
          <source>Capture the remainder</source>
          <target state="translated">残りをキャプチャする</target>
        </trans-unit>
        <trans-unit id="bc24e00f0d506c472f2be3ee5fbfbf1041e1d18a" translate="yes" xml:space="preserve">
          <source>Catch-all for a &lt;a href=&quot;https://stackoverflow.com/questions/8595964/redirect-all-traffic-to-index-php-using-mod-rewrite&quot;&gt;central dispatcher&lt;/a&gt; / front-controller script</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/8595964/redirect-all-traffic-to-index-php-using-mod-rewrite&quot;&gt;中央のディスパッチャー&lt;/a&gt; /フロントコントローラーのスクリプトのキャッチオール</target>
        </trans-unit>
        <trans-unit id="d5e664288f7b3dfc0c3af90aa9c7fec3210b2112" translate="yes" xml:space="preserve">
          <source>Change the link to a pretty link:</source>
          <target state="translated">可愛いリンクに変更します。</target>
        </trans-unit>
        <trans-unit id="edb59b056b2f75d0d2c02a13ae36b3214b3072e9" translate="yes" xml:space="preserve">
          <source>Check that your server has &lt;a href=&quot;https://stackoverflow.com/questions/9234289/verify-if-htaccess-file-is-running&quot;&gt;&lt;code&gt;AllowOverride All&lt;/code&gt; enabled&lt;/a&gt;. Otherwise your per-directory &lt;code&gt;.htaccess&lt;/code&gt; directives will go ignored, and RewriteRules won't work.</source>
          <target state="translated">サーバーで&lt;a href=&quot;https://stackoverflow.com/questions/9234289/verify-if-htaccess-file-is-running&quot;&gt; &lt;code&gt;AllowOverride All&lt;/code&gt; が有効になっ&lt;/a&gt;ていることを確認します。 そうしないと、ディレクトリごとの &lt;code&gt;.htaccess&lt;/code&gt; ディレクティブが無視され、RewriteRulesが機能しません。</target>
        </trans-unit>
        <trans-unit id="43e02a0b48e4866d690b1c507a06fd483627e959" translate="yes" xml:space="preserve">
          <source>Clients serialize URLs with &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;%20&lt;/code&gt; for spaces. Yet in RewriteRules they're interpreted with literal characters for all relative path segments.</source>
          <target state="translated">クライアントは、スペースに &lt;code&gt;+&lt;/code&gt; または &lt;code&gt;%20&lt;/code&gt; を使用してURLをシリアル化します。 しかし、RewriteRulesでは、すべての相対パスセグメントに対してリテラル文字で解釈されます。</target>
        </trans-unit>
        <trans-unit id="46769ed18c1d5803b546e2a6cb333b52cf026f52" translate="yes" xml:space="preserve">
          <source>Comment your &lt;code&gt;.htaccess&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.htaccess&lt;/code&gt; にコメントする</target>
        </trans-unit>
        <trans-unit id="2596cd693395e24245479f2e31c3c578dd845a59" translate="yes" xml:space="preserve">
          <source>Disable &lt;code&gt;MultiViews&lt;/code&gt; when virtual paths overlap</source>
          <target state="translated">仮想パスが重複する場合は &lt;code&gt;MultiViews&lt;/code&gt; 無効にする</target>
        </trans-unit>
        <trans-unit id="36883655179b6ab85d480c08f87d30869c5f79e2" translate="yes" xml:space="preserve">
          <source>Dispatching related URLs to different backends</source>
          <target state="translated">異なるバックエンドへの関連URLのディスパッチ</target>
        </trans-unit>
        <trans-unit id="e0840dbd1ccf3f820f75b9f6644ac7b4d5be4bb3" translate="yes" xml:space="preserve">
          <source>Do's and Dont's in &lt;a href=&quot;https://stackoverflow.com/questions/286004/hidden-features-of-mod-rewrite&quot;&gt;Hidden features of mod_rewrite&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/286004/hidden-features-of-mod-rewrite&quot;&gt;mod_rewriteの非表示機能にす&lt;/a&gt;べきこととすべきでないこと。</target>
        </trans-unit>
        <trans-unit id="834ed7f21faa963f6520622a494bfc3b58b1ba55" translate="yes" xml:space="preserve">
          <source>Don't use &lt;code&gt;RewriteBase&lt;/code&gt; unless needed</source>
          <target state="translated">必要な場合 &lt;code&gt;RewriteBase&lt;/code&gt; 使用しないでください</target>
        </trans-unit>
        <trans-unit id="21f659d7912dac24fb0f151d94dc06f47abae6ad" translate="yes" xml:space="preserve">
          <source>Each of these placeholders is usually wrapped in &lt;code&gt;(&amp;hellip;)&lt;/code&gt; parentheses as capture group. And the whole pattern often in &lt;code&gt;^&amp;hellip;&amp;hellip;&amp;hellip;$&lt;/code&gt; start + end markers. Quoting &quot;patterns&quot; is optional.</source>
          <target state="translated">これらの各プレースホルダーは通常、キャプチャグループとして &lt;code&gt;(&amp;hellip;)&lt;/code&gt; 括弧で囲まれます。 そして、パターン全体はしばしば &lt;code&gt;^&amp;hellip;&amp;hellip;&amp;hellip;$&lt;/code&gt; 開始+終了マーカーで示されます。 「パターン」の引用はオプションです。</target>
        </trans-unit>
        <trans-unit id="9b7029c092a10a71829815573236b3eb076aec29" translate="yes" xml:space="preserve">
          <source>Each set of &lt;code&gt;(&amp;hellip;)&lt;/code&gt; parentheses represents a regular expression that we can capture as a variable in the right hand side of the rule. In this example:</source>
          <target state="translated">&lt;code&gt;(&amp;hellip;)&lt;/code&gt; 括弧の各セットは、ルールの右側で変数としてキャプチャできる正規表現を表します。 この例では：</target>
        </trans-unit>
        <trans-unit id="db48663f832a68a6cc97ff86160706f75f79b09e" translate="yes" xml:space="preserve">
          <source>Else &lt;a href=&quot;http://www.regular-expressions.info/quickstart.html&quot;&gt;regexp.info&lt;/a&gt; for easy-to-understand basics.</source>
          <target state="translated">その他、 &lt;a href=&quot;http://www.regular-expressions.info/quickstart.html&quot;&gt;理解&lt;/a&gt;しやすい基本的なregexp.info 。</target>
        </trans-unit>
        <trans-unit id="d919900346eee940f930da58592f8601027964df" translate="yes" xml:space="preserve">
          <source>Enable &lt;a href=&quot;http://httpd.apache.org/docs/2.4/mod/mod_negotiation.html&quot;&gt;MultiViews&lt;/a&gt; to hide the &lt;code&gt;.php&lt;/code&gt; extension</source>
          <target state="translated">&lt;a href=&quot;http://httpd.apache.org/docs/2.4/mod/mod_negotiation.html&quot;&gt;マルチビュー&lt;/a&gt;を有効にして &lt;code&gt;.php&lt;/code&gt; 拡張子を非表示にする</target>
        </trans-unit>
        <trans-unit id="d89cfbe7e9590212bd8db77d7953dd70c27090a7" translate="yes" xml:space="preserve">
          <source>Enable &lt;code&gt;mod_rewrite&lt;/code&gt; and &lt;code&gt;.htaccess&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mod_rewrite&lt;/code&gt; と &lt;code&gt;.htaccess&lt;/code&gt; を有効にする</target>
        </trans-unit>
        <trans-unit id="67f47d9d91b10c7848ba3ab2eb234427fa6f3b4d" translate="yes" xml:space="preserve">
          <source>Ensuring URLs are long-lived (AKA &lt;a href=&quot;https://en.wikipedia.org/wiki/Permalink&quot;&gt;permalinks&lt;/a&gt;).</source>
          <target state="translated">URLが長期間有効であることを確認します（別名&lt;a href=&quot;https://en.wikipedia.org/wiki/Permalink&quot;&gt;パーマリンク&lt;/a&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0d77e818c790de6920af7153aa064da2c1e29276" translate="yes" xml:space="preserve">
          <source>Even a plain &lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/core.html#errordocument&quot;&gt;&lt;code&gt;ErrorDocument&lt;/code&gt;&lt;/a&gt; directive could be used to let a PHP script handle virtual paths. Note that this is a kludgy workaround however, prohibits anything but GET requests, and floods the error.log by definition.</source>
          <target state="translated">単純な&lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/core.html#errordocument&quot;&gt; &lt;code&gt;ErrorDocument&lt;/code&gt; &lt;/a&gt;ディレクティブを使用しても、PHPスクリプトに仮想パスを処理させることができます。 これは扱いにくい回避策ですが、GETリクエスト以外は何も禁止し、定義によりerror.logをフラッディングすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="83ec6145cb84f0dee900769119e35d59b3e7d752" translate="yes" xml:space="preserve">
          <source>Firstly, mod_rewrite does not randomly disengage. (If it did, you'd have bigger problems).</source>
          <target state="translated">まず、mod_rewrite はランダムに解除されません。(もしそうだとしたら、より大きな問題を抱えることになるでしょう)。</target>
        </trans-unit>
        <trans-unit id="5d728758adcdd5154d3be55552c1c061ef1489b2" translate="yes" xml:space="preserve">
          <source>Flags</source>
          <target state="translated">Flags</target>
        </trans-unit>
        <trans-unit id="b6f02d776f09f6cec4c828de71faf43799655041" translate="yes" xml:space="preserve">
          <source>Flexible segments for virtual paths</source>
          <target state="translated">仮想パス用の柔軟なセグメント</target>
        </trans-unit>
        <trans-unit id="09583105ba9e06aa15f198d86b54559183928403" translate="yes" xml:space="preserve">
          <source>For the also common</source>
          <target state="translated">また、一般的な</target>
        </trans-unit>
        <trans-unit id="8ca49966ea1f0234f7d955d0b2e1ff4363d986f2" translate="yes" xml:space="preserve">
          <source>Fret not.</source>
          <target state="translated">気にするな</target>
        </trans-unit>
        <trans-unit id="8f0e67b093d5ce42b53747a234dad6c49e986688" translate="yes" xml:space="preserve">
          <source>Having readable and obvious resource schemes.</source>
          <target state="translated">読みやすく、わかりやすいリソーススキームを持つこと。</target>
        </trans-unit>
        <trans-unit id="10aa48f30ba9eb1d996b4bdcdaa78b540e6ae835" translate="yes" xml:space="preserve">
          <source>However don't sacrifice unique requirements for conformism.</source>
          <target state="translated">しかし、適合性のために独自の要件を犠牲にしてはいけません。</target>
        </trans-unit>
        <trans-unit id="1fba90fa899b377cb4751fbd5881d6c42e5b6ba4" translate="yes" xml:space="preserve">
          <source>However you &lt;strong&gt;don't want&lt;/strong&gt; that usually in your own &lt;code&gt;.htaccess&lt;/code&gt; files.</source>
          <target state="translated">ただし、通常は自分の &lt;code&gt;.htaccess&lt;/code&gt; ファイルにそれを入れ&lt;strong&gt;たくありません&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="daa5192ba9695ec4caf7b9bc31881436591ba4e2" translate="yes" xml:space="preserve">
          <source>If you copy examples from somewhere, take care to include a &lt;code&gt;# comment and origin link&lt;/code&gt;. While it's merely bad manners to omit attribution,
it often really hurts maintenance later. Document any code or tutorial source. In particular while unversed you should be
all the more interested in not treating them like magic blackboxes.</source>
          <target state="translated">どこかから例をコピーする場合は、 &lt;code&gt;# comment and origin link&lt;/code&gt; を含めるように注意してください 。 アトリビューションを省略するのは単にマナーが悪いだけですが、後でメンテナンスをするのはしばしば大変です。 コードまたはチュートリアルのソースを文書化します。 特に、理解していない間は、魔法のブラックボックスのように扱ってはいけないことに、もっともっと関心を持つべきです。</target>
        </trans-unit>
        <trans-unit id="7bc07c648dc6661d82cf032a6a1256aa5c8a86f1" translate="yes" xml:space="preserve">
          <source>If you have similar rules for multiple virtual page paths, then you can match and compact them with &lt;code&gt;|&lt;/code&gt; alternative lists. And again just reassign them to internal GET parameters:</source>
          <target state="translated">複数の仮想ページパスに同様のルールがある場合は、 &lt;code&gt;|&lt;/code&gt; を使用してそれらを一致させて圧縮できます。 代替リスト。 そして再び、それらを内部GETパラメータに再割り当てします。</target>
        </trans-unit>
        <trans-unit id="40f9b2a7a4a9787f861888f20e6f6fee7c69fed5" translate="yes" xml:space="preserve">
          <source>If you need up to five path segments, then copy this scheme along into five rules. You can of course use a more specific &lt;code&gt;[^/]+&lt;/code&gt; placeholder each.
Here the ordering isn't as important, as neither overlaps. So having the most frequently used paths first is okay.</source>
          <target state="translated">最大5つのパスセグメントが必要な場合は、このスキームを5つのルールにコピーします。 もちろん、それぞれより具体的な &lt;code&gt;[^/]+&lt;/code&gt; プレースホルダーを使用できます。 ここでは、どちらも重複していないため、順序はそれほど重要ではありません。 したがって、最も頻繁に使用されるパスを最初に持つことは問題ありません。</target>
        </trans-unit>
        <trans-unit id="f71191a5e264cb63bd6f631ed5e3481ceef06433" translate="yes" xml:space="preserve">
          <source>If you're using RewriteRules in a per-directory config file, then worrying about regex performance is pointless. Apache retains
compiled PCRE patterns longer than a PHP process with a common routing framework. For high-traffic sites you should however consider
moving rulesets into the vhost server configuration, once they've been battle-tested.</source>
          <target state="translated">RewriteRules をディレクトリ単位の設定ファイルで使用しているのであれば、 regex のパフォーマンスを心配することは無意味です。Apache は、一般的なルーティングフレームワークを持つ PHP プロセスよりもコンパイルされた PCRE パターンを長く保持します。しかし、トラフィックの多いサイトでは、一度テストされたルールセットを vhost サーバの設定に移動させることを検討すべきです。</target>
        </trans-unit>
        <trans-unit id="273b2c2b5a292ce481ed96ebfa83369d2f85daa8" translate="yes" xml:space="preserve">
          <source>In this case, prefer the optionalized &lt;code&gt;^/?&lt;/code&gt; directory separator prefix. This allows to move RewriteRules freely between PerDir and server
config files.</source>
          <target state="translated">この場合、オプションの &lt;code&gt;^/?&lt;/code&gt; ディレクトリセパレータプレフィックス。 これにより、PerDirとサーバー構成ファイルの間でRewriteRulesを自由に移動できます。</target>
        </trans-unit>
        <trans-unit id="aef9108cecb21bfcd735b644678196233a16cf35" translate="yes" xml:space="preserve">
          <source>Include &lt;em&gt;full&lt;/em&gt; examples of input URLs, falsly rewritten target paths, your real directory structure.</source>
          <target state="translated">入力URL、改ざんされたターゲットパス、実際のディレクトリ構造の&lt;em&gt;完全&lt;/em&gt;な例を含めます。</target>
        </trans-unit>
        <trans-unit id="f296f7312d86d0df48d961f47b8c11e9d5bcef5b" translate="yes" xml:space="preserve">
          <source>Introducing shortcuts like &lt;code&gt;http://example.com/article/531&lt;/code&gt; to existing PHP scripts is also easy. The numeric placeholder can just be remapped to a &lt;code&gt;$_GET&lt;/code&gt; parameter:</source>
          <target state="translated">&lt;code&gt;http://example.com/article/531&lt;/code&gt; のようなショートカットを既存のPHPスクリプトに導入することも簡単です。 数値プレースホルダーは、 &lt;code&gt;$_GET&lt;/code&gt; パラメーターに再マッピングすることができます。</target>
        </trans-unit>
        <trans-unit id="deccb5a329125b3a2543074f3d0db866e73f9a4d" translate="yes" xml:space="preserve">
          <source>It &lt;em&gt;does&lt;/em&gt; make sense in &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; sections - if it was combined with another fallback option, such as ScriptAliasMatch. (But nobody ever does that).</source>
          <target state="translated">&lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; セクションで意味があります-ScriptAliasMatchなどの別のフォールバックオプションと組み合わせた場合。 （しかし、誰もそれをしません）。</target>
        </trans-unit>
        <trans-unit id="0301879fb32bdc77402f7413db66117a874fb2e3" translate="yes" xml:space="preserve">
          <source>It makes sense to use with individual web applications in deeper subdirectories. It can shorten RewriteRule patterns in such cases. Generally it's best to prefer relative path specifiers in per-directory rule sets.</source>
          <target state="translated">より深いサブディレクトリにある個々のウェブアプリケーションで使用するのは理にかなっています。このような場合、RewriteRule パターンを短縮することができます。一般的には、ディレクトリ単位のルールセットで相対パス指定子を使うのがベストです。</target>
        </trans-unit>
        <trans-unit id="5f40de2ca60f034f9b89abc054587e9fe0b8a168" translate="yes" xml:space="preserve">
          <source>It's meant to prevent HTTP &lt;code&gt;500&lt;/code&gt; errors. What it usually accomplishes is gracing your users with HTTP &lt;code&gt;404&lt;/code&gt; errors instead. (Not &lt;em&gt;so much&lt;/em&gt; more user-friendly if you think about it.)</source>
          <target state="translated">HTTP &lt;code&gt;500&lt;/code&gt; エラーを防ぐためのものです。 通常は、代わりにHTTP &lt;code&gt;404&lt;/code&gt; エラーでユーザーを監視します。 （考えれば&lt;em&gt;、それほど&lt;/em&gt;ユーザーフレンドリーではありません。）</target>
        </trans-unit>
        <trans-unit id="fe7d59926a852a088beeaaee3db79063e7eb9f5e" translate="yes" xml:space="preserve">
          <source>It's not &quot;SEO&quot;-URLs</source>
          <target state="translated">それは「SEO」ではなく「URL」です。</target>
        </trans-unit>
        <trans-unit id="60cd4fcec9f18f17da87abdc46607c7a489cd1f3" translate="yes" xml:space="preserve">
          <source>It's not &lt;em&gt;that pretty&lt;/em&gt; in browser address bars, but you can use spaces in URLs. For rewrite patterns use backslash-escaped &lt;code&gt;\␣&lt;/code&gt; spaces.
Else just &lt;code&gt;&quot;&lt;/code&gt;-quote the whole pattern or substitution:</source>
          <target state="translated">ブラウザのアドレスバーではそれほど&lt;em&gt;きれい&lt;/em&gt;ではありません&lt;em&gt;が&lt;/em&gt; 、URLでスペースを使用できます。 書き換えパターンには、バックスラッシュでエスケープした &lt;code&gt;\␣&lt;/code&gt; スペースを使用します。 または、パターン全体または置換全体を引用します。</target>
        </trans-unit>
        <trans-unit id="bfc7e888699007054c60bf571793536b40294c92" translate="yes" xml:space="preserve">
          <source>Left hand side of the rule</source>
          <target state="translated">ルールの左手側</target>
        </trans-unit>
        <trans-unit id="6bee440a86949e7ccce05e9ca4299268e30a2049" translate="yes" xml:space="preserve">
          <source>Lets take this example:</source>
          <target state="translated">この例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="3d960efa71adf65b880313cd6447fa5c5f98e928" translate="yes" xml:space="preserve">
          <source>Look through our &lt;a href=&quot;https://stackoverflow.com/questions/tagged/mod-rewrite?sort=frequent&quot;&gt;most popular mod-rewrite&lt;/a&gt; questions and answers.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/tagged/mod-rewrite?sort=frequent&quot;&gt;最も人気のあるmod-rewriteの&lt;/a&gt;質問と回答をご覧ください。</target>
        </trans-unit>
        <trans-unit id="fe7bfd847a60a74d96670220635ed35de8d744bc" translate="yes" xml:space="preserve">
          <source>Many basic virtual URL schemes can be achieved without using RewriteRules. Apache allows PHP scripts to be invoked without &lt;code&gt;.php&lt;/code&gt; extension, and with a virtual &lt;code&gt;PATH_INFO&lt;/code&gt; argument.</source>
          <target state="translated">RewriteRulesを使用しなくても、多くの基本的な仮想URLスキームを実現できます。 Apacheでは、 &lt;code&gt;.php&lt;/code&gt; 拡張子なしで、仮想 &lt;code&gt;PATH_INFO&lt;/code&gt; 引数を使用してPHPスクリプトを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="2488526091aa3f6c4f0c336210e3a1890b4fed46" translate="yes" xml:space="preserve">
          <source>Many copy+paste examples contain a &lt;code&gt;RewriteBase /&lt;/code&gt; directive. Which happens to be the implicit default anyway. So you don't actually need this. It's a workaround for fancy VirtualHost rewriting schemes, and misguessed DOCUMENT_ROOT paths for some shared hosters.</source>
          <target state="translated">多くのコピーと貼り付けの例には、 &lt;code&gt;RewriteBase /&lt;/code&gt; ディレクティブが含まれています。 とにかく、これは暗黙のデフォルトです。 したがって、実際にはこれは必要ありません。 これは、派手なVirtualHostリライティングスキームの回避策であり、一部の共有ホスティング事業者のDOCUMENT_ROOTパスを誤解しています。</target>
        </trans-unit>
        <trans-unit id="b6ec4f0b45ba608dc99259ba104501c3006e2b98" translate="yes" xml:space="preserve">
          <source>Most rules you'll encounter map a constrained set of &lt;code&gt;/&amp;hellip;/&lt;/code&gt; resource path segments to individual GET parameters. Some scripts &lt;a href=&quot;https://stackoverflow.com/q/3655893&quot;&gt;handle a variable number of options&lt;/a&gt; however.
The Apache regexp engine doesn't allow optionalizing an arbitrary number of them. But you can easily expand it into a rule block yourself:</source>
          <target state="translated">遭遇するほとんどのルールは、制約付きの &lt;code&gt;/&amp;hellip;/&lt;/code&gt; リソースパスセグメントのセットを個々のGETパラメータにマッピングします。 ただし&lt;a href=&quot;https://stackoverflow.com/q/3655893&quot;&gt;、&lt;/a&gt;一部のスクリプトは可変数のオプションを処理します 。 Apache regexpエンジンでは、それらの任意の数をオプションにすることはできません。 ただし、自分で簡単にルールブロックに拡張できます。</target>
        </trans-unit>
        <trans-unit id="91486619ecb50e8edbf96d3a9061ef481aa26b8d" translate="yes" xml:space="preserve">
          <source>Mostly just output &lt;code&gt;[^/]+&lt;/code&gt; generic placeholders, but likely suffices for trivial sites.</source>
          <target state="translated">ほとんどの場合、出力は &lt;code&gt;[^/]+&lt;/code&gt; 一般的なプレースホルダーだけですが、ささいなサイトではおそらく十分です。</target>
        </trans-unit>
        <trans-unit id="1d74e7db0e0fdb1eefe36a8b715de7d180085193" translate="yes" xml:space="preserve">
          <source>None of the modern search engines are really disturbed by &lt;code&gt;.html&lt;/code&gt; and &lt;code&gt;.php&lt;/code&gt; in path segments, or &lt;code&gt;?id=123&lt;/code&gt; query strings for that matter. Search engines of old, such as AltaVista, &lt;em&gt;did&lt;/em&gt; avoid crawling websites with potentially ambigious access paths. Modern crawlers are often even craving for deep web resources.</source>
          <target state="translated">最新の検索エンジンはどれも、パスセグメントの &lt;code&gt;.html&lt;/code&gt; と &lt;code&gt;.php&lt;/code&gt; によって実際に邪魔されることはありません。 AltaVistaなどの古い検索エンジンは、潜在的にあいまいなアクセスパスを持つWebサイトのクロールを回避しました。 最近のクローラーは、多くの場合、深いWebリソースを欲しがっています。</target>
        </trans-unit>
        <trans-unit id="f315ee6a0a369040aac7c320f6906f7802ad2aa3" translate="yes" xml:space="preserve">
          <source>Note how this example just uses &lt;code&gt;[END]&lt;/code&gt; instead of &lt;code&gt;[L]&lt;/code&gt; to safely alternate. For older Apache 2.2 versions you can use other workarounds, besides also remapping
query string parameters for example:
&lt;a href=&quot;https://stackoverflow.com/questions/11629896/mod-rewrite-redirect-url-with-query-string-to-pretty-url&quot;&gt;Redirect ugly to pretty URL, remap  back to the ugly path, without infinite loops&lt;/a&gt;</source>
          <target state="translated">この例では、安全に切り替えるために &lt;code&gt;[L]&lt;/code&gt; ではなく &lt;code&gt;[END]&lt;/code&gt; を使用していることに注意してください。 古いApache 2.2バージョンの場合、クエリ文字列パラメーターの再マッピングに加えて、他の回避策を使用できます。たとえば&lt;a href=&quot;https://stackoverflow.com/questions/11629896/mod-rewrite-redirect-url-with-query-string-to-pretty-url&quot;&gt;、醜いURLにリダイレクトし、無限ループなしで醜いパスに再マップします。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dc7223f3c5a01865151b0532dd2483e959ec3aa6" translate="yes" xml:space="preserve">
          <source>Note that &lt;em&gt;your script&lt;/em&gt;&lt;strong&gt;must&lt;/strong&gt; be able (or be adapted) to map those titles back to database-ids. RewriteRules alone can't create or guess information out of thin air.</source>
          <target state="translated">&lt;em&gt;スクリプト&lt;/em&gt; &lt;strong&gt;は&lt;/strong&gt; 、これらのタイトルをデータベースIDにマップできるようにする（または適合させる） &lt;strong&gt;必要&lt;/strong&gt;があることに注意して&lt;em&gt;ください&lt;/em&gt; 。 RewriteRulesだけでは、薄い空気から情報を作成したり推測したりすることはできません。</target>
        </trans-unit>
        <trans-unit id="0c2965817441b972dd6422436654a2df9f92c29e" translate="yes" xml:space="preserve">
          <source>Note that MultiViews has a different/broader purpose though. It incurs a &lt;em&gt;very minor&lt;/em&gt; performance penalty, because Apache always looks for other files with matching basenames. It's actually meant for &lt;a href=&quot;https://en.wikipedia.org/wiki/Content_negotiation&quot;&gt;Content-Negotiation&lt;/a&gt;, so browsers receive the best alternative among available resources (such as &lt;code&gt;article.en.php&lt;/code&gt;, &lt;code&gt;article.fr.php&lt;/code&gt;, &lt;code&gt;article.jp.mp4&lt;/code&gt;).</source>
          <target state="translated">ただし、MultiViewsには別の目的や幅広い目的があります。 Apacheは常に一致するベース名を持つ他のファイルを検索するため、パフォーマンスは&lt;em&gt;非常にわずかに&lt;/em&gt;低下します。 これは実際には&lt;a href=&quot;https://en.wikipedia.org/wiki/Content_negotiation&quot;&gt;Content-Negotiationを対象&lt;/a&gt;としているため、ブラウザーは利用可能なリソース（ &lt;code&gt;article.en.php&lt;/code&gt; 、 &lt;code&gt;article.fr.php&lt;/code&gt; 、 &lt;code&gt;article.jp.mp4&lt;/code&gt; など ）の中で最良の選択肢を受け取ります。</target>
        </trans-unit>
        <trans-unit id="421dacfb060756bed4005a3f4a19279a8d0a45ad" translate="yes" xml:space="preserve">
          <source>Note that RewriteCond/RewriteRule combos can be more complex, with matches (&lt;code&gt;%1&lt;/code&gt; and &lt;code&gt;$1&lt;/code&gt;) interacting in both directions even:</source>
          <target state="translated">RewriteCond / RewriteRuleコンボはより複雑になる可能性があることに注意してください。一致（ &lt;code&gt;%1&lt;/code&gt; と &lt;code&gt;$1&lt;/code&gt; ）は両方向で相互作用します。</target>
        </trans-unit>
        <trans-unit id="ed12e6e43435545c959aae1c59102e543bb2d305" translate="yes" xml:space="preserve">
          <source>Note that this doesn't copy a query string along, etc.</source>
          <target state="translated">これは、クエリ文字列をコピーしないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="8965d98cc2645af0da6247a2206e79a972c91350" translate="yes" xml:space="preserve">
          <source>Now take this with a grain of salt. Not every advise can be generalized to all contexts.
This is just a simple summary of well-known and a few unobvious stumbling blocks:</source>
          <target state="translated">今は、塩分を含んだ状態で受け止めてください。すべてのアドバイスがすべての文脈に一般化できるわけではありません。これは、よく知られていることと、いくつかの明らかでない躓きを簡単にまとめたものです。</target>
        </trans-unit>
        <trans-unit id="d1728adec405a6b225772abbd6bd1fd0974106ab" translate="yes" xml:space="preserve">
          <source>Now the more complex pattern &lt;code&gt;(?:/([^/])+)?&lt;/code&gt; there simply wraps a &lt;em&gt;non-capturing&lt;/em&gt;&lt;code&gt;(?:&amp;hellip;)&lt;/code&gt; group, and makes it optional &lt;code&gt;)?&lt;/code&gt;. The contained
placeholder &lt;code&gt;([^/]+)&lt;/code&gt; would be substitution pattern &lt;code&gt;$2&lt;/code&gt;, but be empty if there's no middle &lt;code&gt;/&amp;hellip;/&lt;/code&gt; path.</source>
          <target state="translated">次に、より複雑なパターン &lt;code&gt;(?:/([^/])+)?&lt;/code&gt; 単に&lt;em&gt;非キャプチャ&lt;/em&gt; &lt;code&gt;(?:&amp;hellip;)&lt;/code&gt; グループをラップし、それをオプションにします &lt;code&gt;)?&lt;/code&gt; 。 含まれるプレースホルダー &lt;code&gt;([^/]+)&lt;/code&gt; は置換パターン &lt;code&gt;$2&lt;/code&gt; ですが、中間の &lt;code&gt;/&amp;hellip;/&lt;/code&gt; パスがない場合は空になります。</target>
        </trans-unit>
        <trans-unit id="45683ef59f00892047993aca6b972c98e9a0ee43" translate="yes" xml:space="preserve">
          <source>Now this &lt;code&gt;/virtual/path&lt;/code&gt; shows up in PHP as &lt;a href=&quot;https://secure.php.net/manual/en/reserved.variables.server.php#~PATH_INFO&quot;&gt;&lt;code&gt;$_SERVER[&quot;PATH_INFO&quot;]&lt;/code&gt;&lt;/a&gt; where you can handle any extra arguments however you like.</source>
          <target state="translated">これで、この &lt;code&gt;/virtual/path&lt;/code&gt; はPHPでは&lt;a href=&quot;https://secure.php.net/manual/en/reserved.variables.server.php#~PATH_INFO&quot;&gt; &lt;code&gt;$_SERVER[&quot;PATH_INFO&quot;]&lt;/code&gt; &lt;/a&gt;として表示され、追加の引数を好きなように処理できます。</target>
        </trans-unit>
        <trans-unit id="f37afffd1053ca926ca822a035ccdafe43d5cba9" translate="yes" xml:space="preserve">
          <source>Now this can have some security and performance implications, because all extensionless files would be piped through PHP now. Therefore you can alternatively set this behaviour for individual files only:</source>
          <target state="translated">これは、セキュリティやパフォーマンスに影響を与える可能性があります。そのため、個々のファイルに対してのみこの動作を設定することもできます。</target>
        </trans-unit>
        <trans-unit id="7867d100537d9098a99e4b192ff17b1002e490bb" translate="yes" xml:space="preserve">
          <source>Now this handles both &lt;code&gt;http://example.com/blog/123&lt;/code&gt; and &lt;code&gt;/blog/123/&lt;/code&gt;. And the</source>
          <target state="translated">これで &lt;code&gt;http://example.com/blog/123&lt;/code&gt; と &lt;code&gt;/blog/123/&lt;/code&gt; 両方が処理されます。 そしてその</target>
        </trans-unit>
        <trans-unit id="b48064afbe59853d0a5c42248122b5a14e1f1c10" translate="yes" xml:space="preserve">
          <source>Now you could just skip passing the &lt;code&gt;title=$2&lt;/code&gt; anyway, because your script will typically rely on the database-id anyway. The &lt;code&gt;-title-slug&lt;/code&gt; has become arbitrary URL decoration.</source>
          <target state="translated">スクリプトは通常、とにかくdatabase-idに依存しているため、とにかく、 &lt;code&gt;title=$2&lt;/code&gt; を渡すことをスキップできます。 &lt;code&gt;-title-slug&lt;/code&gt; は任意のURL装飾になりました。</target>
        </trans-unit>
        <trans-unit id="ed748a9515391cfb1af34a967ee70140171d18c6" translate="yes" xml:space="preserve">
          <source>Nowadays &lt;a href=&quot;http://httpd.apache.org/docs/2.4/en/mod/core.html#acceptpathinfo&quot;&gt;&lt;code&gt;AcceptPathInfo On&lt;/code&gt;&lt;/a&gt; is often enabled by default. Which basically allows &lt;code&gt;.php&lt;/code&gt; and other resource URLs to carry a virtual argument:</source>
          <target state="translated">現在、 &lt;a href=&quot;http://httpd.apache.org/docs/2.4/en/mod/core.html#acceptpathinfo&quot;&gt; &lt;code&gt;AcceptPathInfo On&lt;/code&gt; &lt;/a&gt;は多くの場合、デフォルトで有効になっています。 これは基本的に &lt;code&gt;.php&lt;/code&gt; と他のリソースURLが仮想引数を運ぶことを可能にします：</target>
        </trans-unit>
        <trans-unit id="0afd56482356096622a5660a16723100cd4fa634" translate="yes" xml:space="preserve">
          <source>Numeric identifiers</source>
          <target state="translated">数値識別子</target>
        </trans-unit>
        <trans-unit id="5f378de1046672c4099905b347e55ac91af76926" translate="yes" xml:space="preserve">
          <source>Obviously &lt;a href=&quot;https://stackoverflow.com/questions/869092/how-to-enable-mod-rewrite-for-apache-2-2&quot;&gt;have &lt;code&gt;mod_rewrite&lt;/code&gt; enabled&lt;/a&gt; in your &lt;code&gt;httpd.conf&lt;/code&gt; modules section.</source>
          <target state="translated">&lt;code&gt;httpd.conf&lt;/code&gt; モジュールセクションで&lt;a href=&quot;https://stackoverflow.com/questions/869092/how-to-enable-mod-rewrite-for-apache-2-2&quot;&gt; &lt;code&gt;mod_rewrite&lt;/code&gt; が有効になっていること&lt;/a&gt;は明らかです。</target>
        </trans-unit>
        <trans-unit id="5ddb71358a682b6ae3c886c00e05b6ee0351e570" translate="yes" xml:space="preserve">
          <source>Occasionally it's suitable to alternate between &lt;code&gt;/&lt;/code&gt;-delimiters and &lt;code&gt;:&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; in the same rule even. Or have two RewriteRules again to map variants onto different scripts.</source>
          <target state="translated">&lt;code&gt;/&lt;/code&gt; -delimitersと &lt;code&gt;:&lt;/code&gt; またはを交互に使用するのが適切な場合があり &lt;code&gt;.&lt;/code&gt; 同じルールでさえ。 または、2つのRewriteRulesを再度使用して、バリアントを異なるスクリプトにマップします。</target>
        </trans-unit>
        <trans-unit id="382738c5157f5ee201cf389409adf7a1a5d95f2c" translate="yes" xml:space="preserve">
          <source>Oft-used placeholders</source>
          <target state="translated">よく使われるプレースホルダ</target>
        </trans-unit>
        <trans-unit id="a4d4b59e499759015fe91837364116829ea9c319" translate="yes" xml:space="preserve">
          <source>Often simply by adding &lt;code&gt;&amp;lt;base href=&quot;/index&quot;&amp;gt;&lt;/code&gt; into your HTML &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section.
This implicitly rebinds relative references to what they were before.</source>
          <target state="translated">多くの場合、HTMLの &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; セクションに &lt;code&gt;&amp;lt;base href=&quot;/index&quot;&amp;gt;&lt;/code&gt; を追加するだけです。 これにより、相対的な参照が以前のものに暗黙的に再バインドされます。</target>
        </trans-unit>
        <trans-unit id="64dd841b1c90885ac80fd0d55f39f4aa949aefcb" translate="yes" xml:space="preserve">
          <source>Often you can figure out how a RewriteRule misbehaves just from looking at your &lt;code&gt;error.log&lt;/code&gt; and &lt;code&gt;access.log&lt;/code&gt;.
Correlate access times to see which request path originally came in, and which path/file Apache couldn't resolve to (error 404/500).</source>
          <target state="translated">多くの場合、 &lt;code&gt;error.log&lt;/code&gt; と &lt;code&gt;access.log&lt;/code&gt; を確認するだけで、RewriteRuleの動作が正しくないことがわかります。 アクセス時間を相互に関連付けて、最初に着信したリクエストパスと、Apacheが解決できなかったパス/ファイルを確認します（エラー404/500）。</target>
        </trans-unit>
        <trans-unit id="0df724c30480f21eaa050c58057282993948b80e" translate="yes" xml:space="preserve">
          <source>Only using server-absolute references &lt;code&gt;href=&quot;/old.html&quot;&lt;/code&gt; or &lt;code&gt;src=&quot;/logo.png&quot;&lt;/code&gt;</source>
          <target state="translated">サーバー絶対参照 &lt;code&gt;href=&quot;/old.html&quot;&lt;/code&gt; または &lt;code&gt;src=&quot;/logo.png&quot;&lt;/code&gt; のみを使用</target>
        </trans-unit>
        <trans-unit id="154c95281c3d555dc7266790046d6d0c55b5ef77" translate="yes" xml:space="preserve">
          <source>Optional segments</source>
          <target state="translated">オプションセグメント</target>
        </trans-unit>
        <trans-unit id="bf0dfa52ba48f0808d587223064703f75f816c3a" translate="yes" xml:space="preserve">
          <source>Optional trailing &lt;code&gt;/&lt;/code&gt; slash</source>
          <target state="translated">オプションの末尾 &lt;code&gt;/&lt;/code&gt; スラッシュ</target>
        </trans-unit>
        <trans-unit id="bd4bedf42533e868451f1a4c9022eac830c1394e" translate="yes" xml:space="preserve">
          <source>Ordering is important</source>
          <target state="translated">注文が重要</target>
        </trans-unit>
        <trans-unit id="ed609198a95c9be6f04ce9d1d822a9807996d79c" translate="yes" xml:space="preserve">
          <source>Other Apache rewriting schemes</source>
          <target state="translated">他の Apache の書き換えスキーム</target>
        </trans-unit>
        <trans-unit id="81af1ba5d512fd109cf684ae0943af6787277fa0" translate="yes" xml:space="preserve">
          <source>Other common names, aliases, terms for clean URLs: &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services&quot;&gt;RESTful&lt;/a&gt; URLs, user-friendly URLs, &lt;a href=&quot;http://en.wikipedia.org/wiki/Search_engine_optimization&quot;&gt;SEO&lt;/a&gt;-friendly URLs, &lt;a href=&quot;https://en.wikipedia.org/wiki/Clean_URL#Slug&quot;&gt;slugging&lt;/a&gt;, and MVC URLs (probably a misnomer)</source>
          <target state="translated">その他の一般的な名前、エイリアス、クリーンなURLの用語： &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services&quot;&gt;RESTful&lt;/a&gt; URL、ユーザーフレンドリーなURL、 &lt;a href=&quot;http://en.wikipedia.org/wiki/Search_engine_optimization&quot;&gt;SEO&lt;/a&gt;フレンドリーなURL、 &lt;a href=&quot;https://en.wikipedia.org/wiki/Clean_URL#Slug&quot;&gt;slugging&lt;/a&gt; 、MVC URL（おそらく誤った名称）</target>
        </trans-unit>
        <trans-unit id="a2d1e8d66be83edd5b4bb78c85706e2242b6ca4d" translate="yes" xml:space="preserve">
          <source>Other common uses are remapping obsolete &lt;code&gt;.html&lt;/code&gt; paths to newer &lt;code&gt;.php&lt;/code&gt; handlers, or just aliasing directory names only for individual (actual/real) files.</source>
          <target state="translated">他の一般的な用途は、古い &lt;code&gt;.html&lt;/code&gt; パスを新しい &lt;code&gt;.php&lt;/code&gt; ハンドラーに再マッピングすること、または個々の（実際の/実際の）ファイルに対してのみディレクトリ名をエイリアスすることです。</target>
        </trans-unit>
        <trans-unit id="e22c6117eec085066b8864ee86848a7fc70b8391" translate="yes" xml:space="preserve">
          <source>Other delimiters than just &lt;code&gt;/&lt;/code&gt; path slashes</source>
          <target state="translated">&lt;code&gt;/&lt;/code&gt; スラッシュ以外の区切り文字</target>
        </trans-unit>
        <trans-unit id="ad8bf9cefe3a521ea2a0949d248eaeec3191518a" translate="yes" xml:space="preserve">
          <source>Our &lt;a href=&quot;/questions/tagged/regex&quot;&gt;regex&lt;/a&gt;&lt;a href=&quot;https://stackoverflow.com/tags/regex/info&quot;&gt;tag wiki&lt;/a&gt; for a syntax compendium.</source>
          <target state="translated">構文の概要に関する&lt;a href=&quot;/questions/tagged/regex&quot;&gt;正規表現&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/tags/regex/info&quot;&gt;タグwiki&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed7ce6a62d983c526aa157e7a48cda050f92f59e" translate="yes" xml:space="preserve">
          <source>Ping-Pong (redirects and rewrites in unison)</source>
          <target state="translated">ピンポン(リダイレクトとリライトが一体となったもの</target>
        </trans-unit>
        <trans-unit id="735003089a236c0d060fcfb96e6c5c0337f5d272" translate="yes" xml:space="preserve">
          <source>Practically it just suppresses the more useful log entries, or server notification mails. You'd be &lt;strong&gt;none the wiser&lt;/strong&gt; as to why your RewriteRules never work.</source>
          <target state="translated">実際には、より有用なログエントリまたはサーバー通知メールを抑制します。 RewriteRulesが機能しない理由について、あなた&lt;strong&gt;は賢明で&lt;/strong&gt;はあり&lt;strong&gt;ません&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="62b88add85f24690a5fdaa48492419bf137450cf" translate="yes" xml:space="preserve">
          <source>Prepend each list of rules with &lt;code&gt;RewriteEngine On&lt;/code&gt; still. While mod_rewrite is implicitly active in &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Directory&amp;gt;&lt;/code&gt; sections,
the per-directory &lt;code&gt;.htaccess&lt;/code&gt; files need it individually summoned.</source>
          <target state="translated">ルールの各リストの &lt;code&gt;RewriteEngine On&lt;/code&gt; を追加します。 mod_rewriteは &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;Directory&amp;gt;&lt;/code&gt; セクションで暗黙的にアクティブですが、ディレクトリごとの &lt;code&gt;.htaccess&lt;/code&gt; ファイルは個別に呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="0d460c402637ee80e5cbe8fb8827d4a768e09bd5" translate="yes" xml:space="preserve">
          <source>Prevalent &lt;code&gt;.htaccess&lt;/code&gt; pitfalls</source>
          <target state="translated">普及している &lt;code&gt;.htaccess&lt;/code&gt; の落とし穴</target>
        </trans-unit>
        <trans-unit id="20511274c0bc24f9a1ab6b20592c13f82d99001b" translate="yes" xml:space="preserve">
          <source>Primarily you put these rewrite rules into your &lt;em&gt;web server configuration file&lt;/em&gt;. Apache also allows* you to put them into a file called &lt;code&gt;.htaccess&lt;/code&gt; within your document root (i.e. next to your .php files).</source>
          <target state="translated">主に、これらの書き換えルールを&lt;em&gt;Webサーバー構成ファイルに配置します&lt;/em&gt; 。 Apacheを使用すると、ドキュメントルート内の &lt;code&gt;.htaccess&lt;/code&gt; というファイル（つまり、.phpファイルの横）にファイルを配置することもできます*。</target>
        </trans-unit>
        <trans-unit id="06be8bc5c902a2c2133ad9c03a3c1779b99bf463" translate="yes" xml:space="preserve">
          <source>Providing discoverability through &lt;code&gt;/common/tree/nesting&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;/common/tree/nesting&lt;/code&gt; を通じて発見可能性を提供します 。</target>
        </trans-unit>
        <trans-unit id="e64b81cf93d82d98226806bc2fc8bb197ca884ba" translate="yes" xml:space="preserve">
          <source>QUERY_STRING exempt from RewriteRules</source>
          <target state="translated">QUERY_STRING は RewriteRules から除外されます。</target>
        </trans-unit>
        <trans-unit id="4d404d57141e26e7d22d02e55784084ff540a4ad" translate="yes" xml:space="preserve">
          <source>Redirect subdomain to a folder</source>
          <target state="translated">サブドメインをフォルダにリダイレクト</target>
        </trans-unit>
        <trans-unit id="063e567c28ac61d9564af15349713acbb573d5e8" translate="yes" xml:space="preserve">
          <source>Redirect to &lt;code&gt;HTTPS://&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HTTPS://&lt;/code&gt; にリダイレクトします</target>
        </trans-unit>
        <trans-unit id="722b8910bdb4f2c78164bcda5bd90f374a6c66ef" translate="yes" xml:space="preserve">
          <source>Reference: mod_rewrite, URL rewriting and “pretty links” explained</source>
          <target state="translated">参考:mod_rewrite、URLの書き換えと「きれいなリンク」の説明</target>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="b3a5d38cea5644b9e304ef62096e6a606a4a0fc6" translate="yes" xml:space="preserve">
          <source>Remove &lt;code&gt;www.&lt;/code&gt; from hostname</source>
          <target state="translated">&lt;code&gt;www.&lt;/code&gt; 削除します。 ホスト名から</target>
        </trans-unit>
        <trans-unit id="8dc518c3281af6a76845d45893812e8170cd0c54" translate="yes" xml:space="preserve">
          <source>Rewrite Conditions</source>
          <target state="translated">書き換え条件</target>
        </trans-unit>
        <trans-unit id="0415eb50a540339c28aa38e25535d693e139d107" translate="yes" xml:space="preserve">
          <source>Rewrite Example</source>
          <target state="translated">リライトの例</target>
        </trans-unit>
        <trans-unit id="87715289f6fd0761155779b729e2b1ef1f55f404" translate="yes" xml:space="preserve">
          <source>Rewrite from URL like &quot;/page&quot; to a script such as &quot;/index.php/page&quot;</source>
          <target state="translated">page」のようなURLから「index.phppage」のようなスクリプトに書き換える</target>
        </trans-unit>
        <trans-unit id="54ae8a2bb1e1e0463d622aac404cc75b66ddf407" translate="yes" xml:space="preserve">
          <source>RewriteConds just mask one RewriteRule</source>
          <target state="translated">RewriteConds は単に 1 つの RewriteRule をマスクするだけです。</target>
        </trans-unit>
        <trans-unit id="243d3756aea59bb3aca4be6b1c289ef6f5eac31f" translate="yes" xml:space="preserve">
          <source>RewriteRules</source>
          <target state="translated">RewriteRules</target>
        </trans-unit>
        <trans-unit id="6f3c0b0fa9441f73d1225a5ad3aebf8aa68e29c8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://httpd.apache.org/docs/2.2/urlmapping.html&quot;&gt;http://httpd.apache.org/docs/2.2/urlmapping.html&lt;/a&gt; for further tips.</source>
          <target state="translated">その他のヒントについては、 &lt;a href=&quot;http://httpd.apache.org/docs/2.2/urlmapping.html&quot;&gt;http：//httpd.apache.org/docs/2.2/urlmapping.html&lt;/a&gt;を参照してください 。</target>
        </trans-unit>
        <trans-unit id="7734994bbf366e6199ab98306f2955556acb72dc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://serverfault.com/questions/214512/redirect-change-urls-or-redirect-http-to-https-in-apache-everything-you-ever&quot;&gt;Everything you ever wanted to know about mod_rewrite&lt;/a&gt;
if you haven't already. Combining multiple RewriteRules often leads to interaction. This isn't something to prevent habitually per &lt;code&gt;[L]&lt;/code&gt; flag, but a scheme you'll embrace once versed.
You &lt;strong&gt;can &lt;em&gt;re-re-re&lt;/em&gt;write&lt;/strong&gt; virtual paths from one rule to another, until it reaches an actual target handler.</source>
          <target state="translated">&lt;a href=&quot;https://serverfault.com/questions/214512/redirect-change-urls-or-redirect-http-to-https-in-apache-everything-you-ever&quot;&gt;mod_rewriteについて&lt;/a&gt;まだ知りたくない場合は、すべてを参照してください。 複数のRewriteRulesを組み合わせると、多くの場合、相互作用が発生します。 これは、 &lt;code&gt;[L]&lt;/code&gt; フラグごとに習慣的に防止するものではありませんが、一度精通すれば採用できるスキームです。 実際のターゲットハンドラーに到達するまで、1つのルールから別のルールへの仮想パスを&lt;strong&gt;書き直す&lt;/strong&gt;こと&lt;strong&gt;ができ&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="769cf2ef46bdfff4b362894473e1b5713284e118" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://stackoverflow.com/q/265898&quot;&gt;mod_rewrite, php and the .htaccess file&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/q/265898&quot;&gt;mod_rewrite、php、および.htaccessファイルを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="22c8fcf96a97b6e5abcdae84c4db3db1d01058d9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://stackoverflow.com/questions/2978907/how-can-i-get-my-htaccess-to-work-subdomains&quot;&gt;How can i get my htaccess to work (subdomains)?&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/2978907/how-can-i-get-my-htaccess-to-work-subdomains&quot;&gt;htaccessを機能させるにはどうすればよいですか（サブドメイン）を&lt;/a&gt;参照してください？</target>
        </trans-unit>
        <trans-unit id="006a84e14e20a75e524061fa1fe8dba5660bdff1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://wiki.apache.org/httpd/RewriteLog&quot;&gt;Apache RewriteLog&lt;/a&gt; docs. For debugging you can enable it in the vhost sections:</source>
          <target state="translated">&lt;a href=&quot;https://wiki.apache.org/httpd/RewriteLog&quot;&gt;Apache RewriteLogの&lt;/a&gt;ドキュメントを参照してください。 デバッグの場合は、vhostセクションで有効にできます。</target>
        </trans-unit>
        <trans-unit id="9cd936e48a20e2da69c8f25159cd8cbee422363f" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://stackoverflow.com/questions/2252238/how-can-i-match-query-string-variables-with-mod-rewrite&quot;&gt;How can I match query string variables with mod_rewrite?&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/2252238/how-can-i-match-query-string-variables-with-mod-rewrite&quot;&gt;クエリ文字列変数をmod_rewriteと一致させるに&lt;/a&gt;はどうすればよいですか？もご覧ください。</target>
        </trans-unit>
        <trans-unit id="ef15dc12c82e77842eafff393a8434759690e4c5" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://stackoverflow.com/questions/704102/how-does-rewritebase-work-in-htaccess&quot;&gt;How does RewriteBase work in .htaccess&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/704102/how-does-rewritebase-work-in-htaccess&quot;&gt;RewriteBaseが.htaccessでどのように機能するかも&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="8de810eb4c19512b1bcf1333a62369476c4d7c77" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;https://stackoverflow.com/questions/27744603/css-js-and-images-do-not-display-with-pretty-url&quot;&gt;CSS, JS and images do not display with pretty url&lt;/a&gt;</source>
          <target state="translated">参照： &lt;a href=&quot;https://stackoverflow.com/questions/27744603/css-js-and-images-do-not-display-with-pretty-url&quot;&gt;CSS、JS、画像がきれいなURLで表示されない&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c3db13cb00377ed34be5480543c7e55ed4f98496" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;https://stackoverflow.com/questions/3655893&quot;&gt;How do I transform my URL path segments into query string key-value pairs?&lt;/a&gt;</source>
          <target state="translated">参照： &lt;a href=&quot;https://stackoverflow.com/questions/3655893&quot;&gt;URLパスセグメントをクエリ文字列のキーと値のペアに変換するにはどうすればよいですか？&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5b77f4be08babffac9435d191760ac9736013dd5" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;https://stackoverflow.com/questions/4908122/removing-the-php-extension-with-mod-rewrite&quot;&gt;Removing the .php extension with mod_rewrite&lt;/a&gt;</source>
          <target state="translated">参照： &lt;a href=&quot;https://stackoverflow.com/questions/4908122/removing-the-php-extension-with-mod-rewrite&quot;&gt;mod_rewriteによる.php拡張子の削除&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="566b13b8f401ee2428d3cd8f11f3c6fe104dc463" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;https://wiki.apache.org/httpd/RewriteHTTPToHTTPS&quot;&gt;https://wiki.apache.org/httpd/RewriteHTTPToHTTPS&lt;/a&gt;</source>
          <target state="translated">参照： &lt;a href=&quot;https://wiki.apache.org/httpd/RewriteHTTPToHTTPS&quot;&gt;https&lt;/a&gt; : //wiki.apache.org/httpd/RewriteHTTPToHTTPS</target>
        </trans-unit>
        <trans-unit id="8f1913e2533a26bdd25c26d90fab7cc90bd95e2a" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_rewrite.html&quot;&gt;official documentation&lt;/a&gt; for all the possible flags and options.</source>
          <target state="translated">可能なすべてのフラグとオプションについては、 &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_rewrite.html&quot;&gt;公式ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9fa04c4d408fbb4f618dc13714c5ebc1ab770915" translate="yes" xml:space="preserve">
          <source>See: &lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/remapping.html#backward-compatibility&quot;&gt;http://httpd.apache.org/docs/2.4/rewrite/remapping.html#backward-compatibility&lt;/a&gt;</source>
          <target state="translated">参照： &lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/remapping.html#backward-compatibility&quot;&gt;http&lt;/a&gt; : //httpd.apache.org/docs/2.4/rewrite/remapping.html#backward-compatibility</target>
        </trans-unit>
        <trans-unit id="99e6a073ff5e6c011154a5c38d8a47d031eb6740" translate="yes" xml:space="preserve">
          <source>Serverfault: &lt;strong&gt;Everything you ever wanted to know about mod_rewrite&lt;/strong&gt;</source>
          <target state="translated">Serverfault： &lt;strong&gt;mod_rewriteについて知りたいことすべて&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="153142254f89758d473a9ea12c5e164444dc53cf" translate="yes" xml:space="preserve">
          <source>SetType or SetHandler for extensionless &lt;code&gt;.php&lt;/code&gt; scripts</source>
          <target state="translated">拡張子のない &lt;code&gt;.php&lt;/code&gt; スクリプトのSetTypeまたはSetHandler</target>
        </trans-unit>
        <trans-unit id="5a864b80ff234f7cae642c6501bfd4c017e44fd0" translate="yes" xml:space="preserve">
          <source>Shortening a few page names to internal file schemes is most simple:</source>
          <target state="translated">いくつかのページ名を内部ファイルスキームに短縮するのが最も簡単です。</target>
        </trans-unit>
        <trans-unit id="0b832bc70477bdef81bfff11de849565e3c94623" translate="yes" xml:space="preserve">
          <source>Since Apache 2.4 you can also use the &lt;code&gt;[END]&lt;/code&gt; flag. A matching rule with it will &lt;em&gt;completely&lt;/em&gt; terminate further alias/rewrite processing. (Whereas the &lt;code&gt;[L]&lt;/code&gt; flag can oftentimes trigger a second round, for example when rewriting into or out of subdirectories.)</source>
          <target state="translated">Apache 2.4以降では、 &lt;code&gt;[END]&lt;/code&gt; フラグも使用できます。 それと一致するルールは、以降のエイリアス/書き換え処理を&lt;em&gt;完全に&lt;/em&gt;終了します。 （たとえば、 &lt;code&gt;[L]&lt;/code&gt; フラグは、たとえばサブディレクトリの内外に書き換えるときなどに、2回目のラウンドをトリガーすることがよくあります。）</target>
        </trans-unit>
        <trans-unit id="0b205cd34e49d99ca6bc4b7cfdc75f4c82118ad9" translate="yes" xml:space="preserve">
          <source>Slug-style placeholders</source>
          <target state="translated">スラッグスタイルのプレースホルダ</target>
        </trans-unit>
        <trans-unit id="0126c12f6cbf075a76cababf0457921f8420def3" translate="yes" xml:space="preserve">
          <source>Slugs with numeric prefixes</source>
          <target state="translated">数字の接頭辞を持つナメクジ</target>
        </trans-unit>
        <trans-unit id="ecebb061edd3e7bf58aa5e1134401163d6e5ea2c" translate="yes" xml:space="preserve">
          <source>So at some point you're rewriting your HTML pages to carry only pretty links, as &lt;a href=&quot;https://stackoverflow.com/a/20563773#~What+mod_rewrite+does+not+do&quot;&gt;outlined by deceze&lt;/a&gt;.
Meanwhile you'll still receive requests for the &lt;em&gt;old&lt;/em&gt; paths, sometimes even from bookmarks. As &lt;em&gt;workaround&lt;/em&gt;, you can ping-pong browsers to display/establish
the new URLs.</source>
          <target state="translated">したがって、 &lt;a href=&quot;https://stackoverflow.com/a/20563773#~What+mod_rewrite+does+not+do&quot;&gt;decezeで概説されているように&lt;/a&gt; 、ある時点でHTMLページを書き直して、きれいなリンクのみを運ぶようにします 。 その間、まだブックマークから、 &lt;em&gt;古い&lt;/em&gt;パスのリクエストを受け取ることもあります。 &lt;em&gt;回避策&lt;/em&gt;として、ブラウザにピンポンして新しいURLを表示/確立できます。</target>
        </trans-unit>
        <trans-unit id="9b584b52b28402594628cea231d8d1cd0eb03d50" translate="yes" xml:space="preserve">
          <source>Spaces</source>
          <target state="translated">Spaces</target>
        </trans-unit>
        <trans-unit id="85e989878c716e36b051efddbe0395a8c643d71a" translate="yes" xml:space="preserve">
          <source>Stack Overflow has &lt;em&gt;many&lt;/em&gt; other great resources to get started:</source>
          <target state="translated">Stack Overflowには&lt;em&gt;、&lt;/em&gt;他にも&lt;em&gt;多く&lt;/em&gt;の優れたリソースがあります。</target>
        </trans-unit>
        <trans-unit id="48fc570e8e866f7f574a291b7bacd57b75c6ab5b" translate="yes" xml:space="preserve">
          <source>Static mapping</source>
          <target state="translated">静的マッピング</target>
        </trans-unit>
        <trans-unit id="8001a2b0ee6473dba8f8f19c9bcf26b8ca6205c1" translate="yes" xml:space="preserve">
          <source>Still you'd &lt;em&gt;often&lt;/em&gt; want to have the most specific rules (fixed string &lt;code&gt;/forum/&amp;hellip;&lt;/code&gt; patterns, or more restrictive placeholders &lt;code&gt;[^/.]+&lt;/code&gt;) in the &lt;em&gt;early&lt;/em&gt; rules.
Generic slurp-all rules (&lt;code&gt;.*&lt;/code&gt;) are better left to the &lt;em&gt;later&lt;/em&gt; ones. (An exception is a &lt;code&gt;RewriteCond -f/-d&lt;/code&gt; guard as primary block.)</source>
          <target state="translated">それでも、 &lt;em&gt;多くの場合&lt;/em&gt; 、 &lt;em&gt;初期の&lt;/em&gt;ルールに最も具体的なルール（固定文字列 &lt;code&gt;/forum/&amp;hellip;&lt;/code&gt; パターン、またはより限定的なプレースホルダー &lt;code&gt;[^/.]+&lt;/code&gt; ）を&lt;em&gt;含める必要があり&lt;/em&gt;ます。 一般的なスラップオールルール（ &lt;code&gt;.*&lt;/code&gt; ）は、 &lt;em&gt;後の&lt;/em&gt;ルールに任せた方がよいでしょう。 （例外は、プライマリブロックとしての &lt;code&gt;RewriteCond -f/-d&lt;/code&gt; ガードです。）</target>
        </trans-unit>
        <trans-unit id="e88877188929b587a6202b5d626e2de4ef74c025" translate="yes" xml:space="preserve">
          <source>Stylesheets and images stop working</source>
          <target state="translated">スタイルシートと画像が動かなくなる</target>
        </trans-unit>
        <trans-unit id="1a378406d18f6750149ae24909a93a9ccb6fc19e" translate="yes" xml:space="preserve">
          <source>That yields a detailed summary of how incoming request paths get modified by each rule:</source>
          <target state="translated">これにより、各ルールによってどのようにリクエストパスが変更されるかの詳細な要約が得られます。</target>
        </trans-unit>
        <trans-unit id="6d6fab96ebe243a8ed7f16439ab504edd8a35174" translate="yes" xml:space="preserve">
          <source>The above rewrite would allow you to link to something like &lt;code&gt;/blog/1/foo/&lt;/code&gt; and it would actually load &lt;code&gt;/blog/index.php?id=1&amp;amp;title=foo&lt;/code&gt;.</source>
          <target state="translated">上記の書き換えにより、 &lt;code&gt;/blog/1/foo/&lt;/code&gt; ようなものにリンクでき、実際には &lt;code&gt;/blog/index.php?id=1&amp;amp;title=foo&lt;/code&gt; がロードされます 。</target>
        </trans-unit>
        <trans-unit id="3ba4a51130ff56537f6d3a9055715230bfef9e5f" translate="yes" xml:space="preserve">
          <source>The complete RewriteRule set, but &lt;em&gt;also&lt;/em&gt; single out the presumed defective one.</source>
          <target state="translated">完全なRewriteRuleセットですが、推定欠陥のあるもの&lt;em&gt;も&lt;/em&gt;選択されます。</target>
        </trans-unit>
        <trans-unit id="e228ac5b8f8d575c20a15333bcfad05518e80ac0" translate="yes" xml:space="preserve">
          <source>The default configuration of most web servers is to look for a file that matches the URL on the hard disk. If the &lt;em&gt;document root&lt;/em&gt; of the server is set to, say, &lt;code&gt;/var/www&lt;/code&gt;, it may look whether the file &lt;code&gt;/var/www/foo/bar.html&lt;/code&gt; exists and serve it if so. If the file ends in &quot;.php&quot; it will invoke the PHP interpreter and &lt;em&gt;then&lt;/em&gt; return the result. All this association is completely configurable; a file doesn't have to end in &quot;.php&quot; for the web server to run it through the PHP interpreter, and the URL doesn't have to match any particular file on disk for something to happen.</source>
          <target state="translated">ほとんどのWebサーバーのデフォルト構成では、ハードディスク上のURLと一致するファイルを探します。 サーバーの&lt;em&gt;ドキュメントルート&lt;/em&gt;が &lt;code&gt;/var/www&lt;/code&gt; に設定されている場合、ファイル &lt;code&gt;/var/www/foo/bar.html&lt;/code&gt; が存在するかどうかを調べ、存在する場合はそれを提供します。 ファイルが「.php」で終わる場合は、PHPインタープリターが呼び出され、結果が返されます。 この関連付けはすべて完全に構成可能です。 WebサーバーがPHPインタープリターを介してファイルを実行するために、ファイルの末尾が「.php」である必要はありません。URLは、何かが発生するためにディスク上の特定のファイルと一致する必要はありません。</target>
        </trans-unit>
        <trans-unit id="46df60a282712a506bc72414500b3830c3f7622b" translate="yes" xml:space="preserve">
          <source>The first set of brackets - &lt;code&gt;([0-9]+)&lt;/code&gt; - matches a string with a minimum of 1 character in length and with only numeric values (i.e. 0-9). This can be referenced with &lt;code&gt;$1&lt;/code&gt; in the right hand side of the rule</source>
          <target state="translated">大括弧の最初のセット- &lt;code&gt;([0-9]+)&lt;/code&gt; -は、長さが1文字以上で数値のみ（つまり0-9）のストリングと一致します。 これは、ルールの右側にある &lt;code&gt;$1&lt;/code&gt; で参照できます</target>
        </trans-unit>
        <trans-unit id="7ac23b9ac3e8ebb020e1a5fab826fbe6cccd47f8" translate="yes" xml:space="preserve">
          <source>The following examples are PHP-centric and a bit more incremental, easier to adapt for similar cases.
They're just summaries, often link to more variations or detailed Q&amp;amp;As.</source>
          <target state="translated">次の例はPHP中心であり、少しずつ増分されており、同様のケースに適応しやすくなっています。 これらは単なる要約であり、多くの場合、より多くのバリエーションや詳細なQ＆Aにリンクしています。</target>
        </trans-unit>
        <trans-unit id="a54a48205d3f14912b7eeff2751a1df039b641ef" translate="yes" xml:space="preserve">
          <source>The last flag indicates that this is the last rule that should be processed. This means that if and only if this rule matches, no further rules will be evaluated in the current rewrite processing run. If the rule does not match, all other rules will be tried in order as usual. If you do not set the &lt;code&gt;L&lt;/code&gt; flag, all following rules will be applied to the &lt;em&gt;rewritten&lt;/em&gt; URL afterwards.</source>
          <target state="translated">最後のフラグは、これが処理する必要がある最後のルールであることを示します。 これは、このルールが一致する場合にのみ、現在の書き換え処理の実行でそれ以上のルールが評価されないことを意味します。 ルールが一致しない場合、他のすべてのルールが通常どおり順番に試行されます。 &lt;code&gt;L&lt;/code&gt; フラグを設定しない場合、以降のすべてのルールが、 &lt;em&gt;書き換えられた&lt;/em&gt; URLに後で適用さ&lt;em&gt;れ&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e2dcea71d18770c2097f41c39eae9392bca0c8a4" translate="yes" xml:space="preserve">
          <source>The leading slash &lt;code&gt;^/&lt;/code&gt; won't match</source>
          <target state="translated">先頭のスラッシュ &lt;code&gt;^/&lt;/code&gt; が一致しません</target>
        </trans-unit>
        <trans-unit id="549c3e4d9d2e3d169f232931ea8636c3d1480369" translate="yes" xml:space="preserve">
          <source>The no case flag means that the rewrite rule is case insensitive, so for the example rule above this would mean that both &lt;code&gt;/blog/1/foo/&lt;/code&gt; and &lt;code&gt;/BLOG/1/foo/&lt;/code&gt; (or any variation of this) would be matched.</source>
          <target state="translated">no caseフラグは、書き換えルールが大文字と小文字を区別しないことを意味します。したがって、上記の例のルールの場合、これは &lt;code&gt;/blog/1/foo/&lt;/code&gt; と &lt;code&gt;/BLOG/1/foo/&lt;/code&gt; （またはこれのバリエーション）の両方が一致することを意味します。</target>
        </trans-unit>
        <trans-unit id="83c803d5174f2e1e70b82894f7bc34cb1d99cf98" translate="yes" xml:space="preserve">
          <source>The query string append flag allows us to pass in extra variables to the specified URL which will get added to the original get parameters. For our example this means that something like &lt;code&gt;/blog/1/foo/?comments=15&lt;/code&gt; would load &lt;code&gt;/blog/index.php?id=1&amp;amp;title=foo&amp;amp;comments=15&lt;/code&gt;</source>
          <target state="translated">クエリ文字列の追加フラグを使用すると、追加の変数を指定されたURLに渡して、元の取得パラメーターに追加することができます。 この例では、これは &lt;code&gt;/blog/1/foo/?comments=15&lt;/code&gt; ようなものが &lt;code&gt;/blog/index.php?id=1&amp;amp;title=foo&amp;amp;comments=15&lt;/code&gt; をロードすることを意味します</target>
        </trans-unit>
        <trans-unit id="1a75416b595fbf14696df582ef4381352dbaaade" translate="yes" xml:space="preserve">
          <source>The rewrite will attempt to load the same file on another domain</source>
          <target state="translated">書き換えは、別のドメインで同じファイルをロードしようとします。</target>
        </trans-unit>
        <trans-unit id="833afbd5f1f23c47a97009c28e05f47b2667d6ea" translate="yes" xml:space="preserve">
          <source>The rule is split into 4 sections:</source>
          <target state="translated">ルールは4つのセクションに分かれています。</target>
        </trans-unit>
        <trans-unit id="7aebe4dbf5a75928bd1986451a2093d287864dbd" translate="yes" xml:space="preserve">
          <source>The second set of parentheses matches a string with a minimum of 1 character in length, containing only alphanumeric characters (A-Z, a-z, or 0-9) or &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt; (note &lt;code&gt;+&lt;/code&gt; is escaped with a backslash as without escaping it this will execute as a &lt;a href=&quot;http://www.regular-expressions.info/repeat.html&quot;&gt;regex repetition character&lt;/a&gt;). This can be referenced with &lt;code&gt;$2&lt;/code&gt; in the right hand side of the rule</source>
          <target state="translated">括弧の2番目のセットは、英数字（AZ、az、または0-9）または &lt;code&gt;-&lt;/code&gt; または &lt;code&gt;+&lt;/code&gt; （ &lt;code&gt;+&lt;/code&gt; はエスケープせずにエスケープされないため、バックスラッシュでエスケープされることに注意）のみを含む、長さが1文字以上の文字列と一致します。 &lt;a href=&quot;http://www.regular-expressions.info/repeat.html&quot;&gt;正規表現の繰り返し文字&lt;/a&gt;として）。 これは、ルールの右側にある &lt;code&gt;$2&lt;/code&gt; で参照できます</target>
        </trans-unit>
        <trans-unit id="04c8e0a990ad304eb54df5972cfebfc98f757529" translate="yes" xml:space="preserve">
          <source>The simplest option to also eschew &lt;code&gt;.php&lt;/code&gt; &quot;file extensions&quot; in URLs is enabling:</source>
          <target state="translated">URLで &lt;code&gt;.php&lt;/code&gt; &quot;ファイル拡張子&quot;も回避する最も簡単なオプションは、次のようにします。</target>
        </trans-unit>
        <trans-unit id="0e2f7a407bd6041b3f1f32b83f940cec25221f9b" translate="yes" xml:space="preserve">
          <source>The web server is an application listening on a port, accepting HTTP requests coming in on that port and returning a response. A web server is entirely free to respond to any request in any way it sees fit/in any way you have configured it to respond. This response is not a file, it's an &lt;em&gt;HTTP response&lt;/em&gt; which may or may not have anything to do with physical files on any disk. A web server doesn't have to be Apache, there are many other web servers which are all just programs which run persistently and are attached to a port which respond to HTTP requests. You can write one yourself. This paragraph was intended to divorce you from any notion that URLs directly equal files, which is really important to understand. :)</source>
          <target state="translated">Webサーバーは、ポートでリッスンするアプリケーションであり、そのポートで着信するHTTPリクエストを受け入れ、応答を返します。 Webサーバーは、適切に見える方法で、または応答するように構成した方法で、要求に完全に自由に応答できます。 この応答はファイルではなく、 &lt;em&gt;HTTP応答&lt;/em&gt;であり、ディスク上の物理ファイルとは関係ない場合があります。 WebサーバーはApacheである必要はありません。永続的に実行され、HTTP要求に応答するポートに接続されている単なるプログラムである他の多くのWebサーバーがあります。 自分で書くことができます。 この段落は、URLがファイルと直接等しいという概念から離れることを目的としており、理解することが非常に重要です。 :)</target>
        </trans-unit>
        <trans-unit id="159c459f715b62a82d49181a2596095e72ac845a" translate="yes" xml:space="preserve">
          <source>There are various online tools to generate RewriteRules for most GET-parameterish URLs:</source>
          <target state="translated">ほとんどの GET-parameterish URL 用の RewriteRules を生成するための様々なオンラインツールがあります。</target>
        </trans-unit>
        <trans-unit id="c82a2f0ef8ac4ecf1da9d191346d5140c761cc14" translate="yes" xml:space="preserve">
          <source>There's a lot mod_rewrite can do and very complex matching rules you can create, including chaining several rewrites, proxying requests to a completely different service or machine, returning specific HTTP status codes as responses, redirecting requests etc. It's very powerful and can be used to great good if you understand the fundamental HTTP request-response mechanism. It does &lt;em&gt;not&lt;/em&gt; automatically make your links pretty.</source>
          <target state="translated">mod_rewriteでできることはたくさんあり、非常に複雑なマッチングルールを作成できます。たとえば、複数の書き換えのチェーン、完全に異なるサービスまたはマシンへのリクエストのプロキシ、特定のHTTPステータスコードをレスポンスとして返す、リクエストのリダイレクトなどです。これは非常に強力で、基本的なHTTP要求/応答メカニズムを理解している場合は非常に便利です。 リンクが自動的にきれいになるわけではありませ&lt;em&gt;ん&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="c9ba3f02e7e2d45a3c1fdc93f62d6055d0ba77ad" translate="yes" xml:space="preserve">
          <source>Therefore you'll often see mixed &lt;code&gt;/article/529-title-slug&lt;/code&gt; paths used in practice:</source>
          <target state="translated">したがって、実際に使用される &lt;code&gt;/article/529-title-slug&lt;/code&gt; パスが混在することがよくあります。</target>
        </trans-unit>
        <trans-unit id="cb15bb19b67a700556e5d4e90ad59605ca293dde" translate="yes" xml:space="preserve">
          <source>These are options that are added in square brackets at the end of your rewrite rule to specify certain conditions. Again, there are a lot of different flags which you can read up on in &lt;a href=&quot;http://httpd.apache.org/docs/2.2/rewrite/flags.html&quot;&gt;the documentation&lt;/a&gt;, but I'll go through some of the more common flags:</source>
          <target state="translated">これらは、特定の条件を指定するために、書き換えルールの最後に角かっこで追加されるオプションです。 繰り返しになりますが&lt;a href=&quot;http://httpd.apache.org/docs/2.2/rewrite/flags.html&quot;&gt;、ドキュメント&lt;/a&gt;で確認できるさまざまなフラグがたくさんありますが、より一般的なフラグのいくつかについて説明します。</target>
        </trans-unit>
        <trans-unit id="7cb52ffb24a80ad734695950723670b446fd208a" translate="yes" xml:space="preserve">
          <source>This common trick involves sending a 30x/Location &lt;em&gt;redirect&lt;/em&gt; whenever an incoming URL follows the obsolete/ugly naming scheme.
Browsers will then &lt;em&gt;rerequest&lt;/em&gt; the new/pretty URL, which afterwards is rewritten (just internally) to the original or new location.</source>
          <target state="translated">この一般的なトリックには、着信URLが廃止された/醜い命名スキームに従う場合は常に、30x / Location &lt;em&gt;リダイレクト&lt;/em&gt;を送信することが含まれます。 その後、 &lt;em&gt;ブラウザー&lt;/em&gt;は新しい/かなりのURLを&lt;em&gt;再要求&lt;/em&gt;します。このURLは、後で（内部的にのみ）元の場所または新しい場所に書き換えられます。</target>
        </trans-unit>
        <trans-unit id="eac456246f01a69b6fa960c525f4d3493e5955b6" translate="yes" xml:space="preserve">
          <source>This doesn't tell you which RewriteRule is the culprit. But inaccessible final paths like &lt;code&gt;/docroot/21-.itle?index.php&lt;/code&gt; may give away where to inspect further.
Otherwise disable rules until you get some predictable paths.</source>
          <target state="translated">これは、どのRewriteRuleが原因かはわかりません。 しかし、 &lt;code&gt;/docroot/21-.itle?index.php&lt;/code&gt; のようなアクセスできない最終パスは、どこをさらに調査するかを与える可能性があります。 それ以外の場合は、予測可能なパスが得られるまでルールを無効にします。</target>
        </trans-unit>
        <trans-unit id="126b9d7dfbd968a54edaca8a4d158902a1949796" translate="yes" xml:space="preserve">
          <source>This flag isn't one I used in the example above, but is one I thought is worth mentioning. This allows you to specify a http redirect, with the option to include a status code (e.g. &lt;code&gt;R=301&lt;/code&gt;). For example if you wanted to do a 301 redirect on /myblog/ to /blog/ you would simply write a rule something like this:</source>
          <target state="translated">このフラグは上の例で使用したものではありませんが、言及する価値があると思いました。 これにより、ステータスコード（例： &lt;code&gt;R=301&lt;/code&gt; ）を含めるオプションを使用して、httpリダイレクトを指定できます。 たとえば、/ myblog /を/ blog /に301リダイレクトする場合は、次のようなルールを記述します。</target>
        </trans-unit>
        <trans-unit id="37b731c00b0df987bf9c1b533cd5f5cce0e31a8d" translate="yes" xml:space="preserve">
          <source>This has Apache select &lt;code&gt;article.php&lt;/code&gt; for HTTP requests on &lt;code&gt;/article&lt;/code&gt; due to the matching basename. And this works well together with the aforementioned PATH_INFO feature. So you can just use URLs like &lt;code&gt;http://example.com/article/virtual/title&lt;/code&gt;. Which makes sense if you have a traditional web application with multiple PHP invocation points/scripts.</source>
          <target state="translated">これには、ベース名が一致するため、 &lt;code&gt;/article&lt;/code&gt; の HTTPリクエスト用にApache select &lt;code&gt;article.php&lt;/code&gt; があります。 そして、これは前述のPATH_INFO機能と一緒にうまく機能します。 したがって、 &lt;code&gt;http://example.com/article/virtual/title&lt;/code&gt; //example.com/article/virtual/titleのようなURLを使用できます。 これは、複数のPHP呼び出しポイント/スクリプトを持つ従来のWebアプリケーションがある場合に意味があります。</target>
        </trans-unit>
        <trans-unit id="7821c92c23729c6e3b5d689391cb1070c9721c06" translate="yes" xml:space="preserve">
          <source>This is a very common practice, which will prepend your domain with &lt;code&gt;www.&lt;/code&gt; (if it isn't there already) and execute a 301 redirect. For example, loading up &lt;code&gt;http://example.com/blog/&lt;/code&gt; it would redirect you to &lt;code&gt;http://www.example.com/blog/&lt;/code&gt;</source>
          <target state="translated">これは非常に一般的な方法であり、ドメインの &lt;code&gt;www.&lt;/code&gt; が付加されます。 （まだ存在しない場合）、301リダイレクトを実行します。 たとえば、 &lt;code&gt;http://example.com/blog/&lt;/code&gt; をロードすると、 http：//www.example.com/blog/にリダイレクトされ &lt;code&gt;http://www.example.com/blog/&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d80c4ef1a166355292a1990b7a7af44ad9122e8" translate="yes" xml:space="preserve">
          <source>This is just as valid a request for a URL, and it has more obviously nothing to do with files.</source>
          <target state="translated">これはURLへのリクエストと同様に有効であり、ファイルとはより明らかに何の関係もありません。</target>
        </trans-unit>
        <trans-unit id="c69886ec55e1ba20b0fa5f101a1225eaf0019fd1" translate="yes" xml:space="preserve">
          <source>This is often seen in old tutorials. And it used to be correct for ancient Apache 1.x versions. Nowadays request paths are conveniently &lt;em&gt;fully &lt;strong&gt;directory-relative&lt;/strong&gt;&lt;/em&gt; in &lt;code&gt;.htaccess&lt;/code&gt; RewriteRules. Just leave the leading &lt;code&gt;/&lt;/code&gt; out.</source>
          <target state="translated">これは古いチュートリアルでよく見られます。 かつては、Apache 1.xの古いバージョンでは適切でした。 現在、リクエストパスは &lt;code&gt;.htaccess&lt;/code&gt; RewriteRulesで&lt;em&gt;完全に&lt;strong&gt;ディレクトリ相対&lt;/strong&gt;&lt;/em&gt;になっています。 先導する &lt;code&gt;/&lt;/code&gt; 外すだけです。</target>
        </trans-unit>
        <trans-unit id="52a895915ec9566af7e25dd82c968182fc5c0f3e" translate="yes" xml:space="preserve">
          <source>This is slightly less common, but is a good example of a rule that doesn't execute if the filename is a directory or file that exists on the server.</source>
          <target state="translated">これは少し一般的ではありませんが、ファイル名がサーバ上に存在するディレクトリやファイルの場合には実行されないルールの良い例です。</target>
        </trans-unit>
        <trans-unit id="77620a284d982bf7c67daa1601fbd5c8de86c151" translate="yes" xml:space="preserve">
          <source>This is somewhat dependent on your server setup and the used PHP SAPI. Common alternatives include &lt;code&gt;ForceType application/x-httpd-php&lt;/code&gt; or &lt;code&gt;AddHandler php5-script&lt;/code&gt;.</source>
          <target state="translated">これは、サーバーの設定と使用されているPHP SAPIによって多少異なります。 一般的な代替手段には、 &lt;code&gt;ForceType application/x-httpd-php&lt;/code&gt; または &lt;code&gt;AddHandler php5-script&lt;/code&gt; があります 。</target>
        </trans-unit>
        <trans-unit id="e43a1df57f3dcef1bda106987332480923a8e7b2" translate="yes" xml:space="preserve">
          <source>This is the simple request of a browser to a web server requesting the &lt;em&gt;URL&lt;/em&gt;&lt;code&gt;/foo/bar.html&lt;/code&gt; from it. It is important to stress that it does not request a &lt;em&gt;file&lt;/em&gt;, it requests just some arbitrary URL. The request may also look like this:</source>
          <target state="translated">これは、 &lt;code&gt;/foo/bar.html&lt;/code&gt; という&lt;em&gt;URL&lt;/em&gt;を要求するWebサーバーへのブラウザーの単純な要求です。 &lt;em&gt;ファイルを&lt;/em&gt;要求するのではなく、任意のURLを要求するだけであることを強調することが重要です。 リクエストは次のようになります。</target>
        </trans-unit>
        <trans-unit id="01e466565580b17decbd9ff474a0fe27c298e507" translate="yes" xml:space="preserve">
          <source>This isn't as convenient as having Apache separate input path segments into &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, &lt;code&gt;$3&lt;/code&gt; and passing them as distinct &lt;code&gt;$_GET&lt;/code&gt; variables to PHP. It's merely emulating &quot;pretty URLs&quot; with less configuration effort.</source>
          <target state="translated">これは、Apacheが個別の入力パスセグメントを &lt;code&gt;$1&lt;/code&gt; 、 &lt;code&gt;$2&lt;/code&gt; 、 &lt;code&gt;$3&lt;/code&gt; 分け、それらを個別の &lt;code&gt;$_GET&lt;/code&gt; 変数としてPHPに渡すほど便利ではありません。 構成作業を少なくして、「きれいなURL」をエミュレートするだけです。</target>
        </trans-unit>
        <trans-unit id="678cdd0d663cc49ab66acef486598ae2d96c6601" translate="yes" xml:space="preserve">
          <source>This nets quicker and more exact answers, and makes them more useful to others.</source>
          <target state="translated">これにより、より迅速かつ正確な回答が得られ、他の人にとってより有用なものになります。</target>
        </trans-unit>
        <trans-unit id="f16dfc9b713dca91d180a83ddd93a12f0f5f49f9" translate="yes" xml:space="preserve">
          <source>This optionalized any &lt;code&gt;/&amp;hellip;/&amp;hellip;/&amp;hellip;&lt;/code&gt; trailing path segments. Which then of course requires the handling script to split them up, and &lt;em&gt;variabl-ify&lt;/em&gt; extracted parameters
itself (which is what &lt;em&gt;Web-&quot;MVC&quot;&lt;/em&gt; frameworks do).</source>
          <target state="translated">これにより、任意の &lt;code&gt;/&amp;hellip;/&amp;hellip;/&amp;hellip;&lt;/code&gt; 後続パスセグメントがオプション化されました。 もちろん、それらを分割するための処理スクリプトと、抽出されたパラメーター自体を&lt;em&gt;variabl-ify&lt;/em&gt;する必要があります（これは&lt;em&gt;Web- &quot;MVC&quot;&lt;/em&gt;フレームワークが行うことです）。</target>
        </trans-unit>
        <trans-unit id="4f0a25ea5b6c1efa50d189b93b865b7cd7502f46" translate="yes" xml:space="preserve">
          <source>This rule matches anything (&lt;code&gt;.*&lt;/code&gt;) and &lt;em&gt;captures&lt;/em&gt; it (&lt;code&gt;(..)&lt;/code&gt;), then rewrites it to append &quot;.html&quot;. In other words, if &lt;code&gt;/foo/bar&lt;/code&gt; was the requested URL, it will be handled as if &lt;code&gt;/foo/bar.html&lt;/code&gt; had been requested. See &lt;a href=&quot;http://regular-expressions.info&quot;&gt;http://regular-expressions.info&lt;/a&gt; for more information about regular expression matching, capturing and replacements.</source>
          <target state="translated">このルールは、あらゆるもの（ &lt;code&gt;.*&lt;/code&gt; ）に一致し、それを&lt;em&gt;キャプチャー&lt;/em&gt; （ &lt;code&gt;(..)&lt;/code&gt; ）してから、「。html」を追加するように書き換えます。 つまり、 &lt;code&gt;/foo/bar&lt;/code&gt; が要求されたURLであった場合、 / foo / &lt;code&gt;/foo/bar.html&lt;/code&gt; が要求された場合と同様に処理されます。 正規表現の一致、キャプチャ、および置換の詳細については、 &lt;a href=&quot;http://regular-expressions.info&quot;&gt;http：//regular-expressions.info&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3b2ea9bc6efb3aff08b2c67c59e0c49c40b9a8b9" translate="yes" xml:space="preserve">
          <source>This rule says &lt;em&gt;whenever a request matches &quot;/foo/bar&quot;, rewrite it to &quot;/foo/baz&quot;.&lt;/em&gt; The request will then be handled as if &lt;code&gt;/foo/baz&lt;/code&gt; had been requested instead. This can be used for various effects, for example:</source>
          <target state="translated">このルールは&lt;em&gt;、リクエストが「/ foo / bar」に一致するたびに、それを「/ foo / baz」に書き換えます。&lt;/em&gt; 要求は、 &lt;code&gt;/foo/baz&lt;/code&gt; が代わりに要求された場合と同様に処理されます。 これは、たとえば次のようなさまざまな効果に使用できます。</target>
        </trans-unit>
        <trans-unit id="f6e5c51f6d07a6fda3f35853c7cbc032504a01a3" translate="yes" xml:space="preserve">
          <source>This simply remaps 2009-2011 posts onto one script, and all other years implicitly to another handler.
Note the &lt;em&gt;more specific rule coming first&lt;/em&gt;. Each script might use different GET params.</source>
          <target state="translated">これは単に2009-2011の投稿を1つのスクリプトに再マッピングし、その他すべての年は暗黙的に別のハンドラーに再マッピングします。 &lt;em&gt;より具体的なルールが最初に来ることに&lt;/em&gt;注意してください。 スクリプトごとに異なるGETパラメータを使用する場合があります。</target>
        </trans-unit>
        <trans-unit id="a1c37412960d01550e537eeede8eb49d03ce4cc9" translate="yes" xml:space="preserve">
          <source>This way you could just rename your &lt;code&gt;article.php&lt;/code&gt; script to just &lt;code&gt;article&lt;/code&gt; (without extension), but still have it processed as PHP script.</source>
          <target state="translated">この方法では、 &lt;code&gt;article.php&lt;/code&gt; スクリプトの名前を単に（拡張子なしの） &lt;code&gt;article&lt;/code&gt; に変更するだけで、PHPスクリプトとして処理することができます。</target>
        </trans-unit>
        <trans-unit id="211b69704ff35b0a39c4be33762622ae6379f372" translate="yes" xml:space="preserve">
          <source>This, again, matches anything and rewrites it to the file index.php with the originally requested URL appended in the &lt;code&gt;url&lt;/code&gt; query parameter. I.e., for any and all requests coming in, the file index.php is executed and this file will have access to the original request in &lt;code&gt;$_GET['url']&lt;/code&gt;, so it can do anything it wants with it.</source>
          <target state="translated">これもまた、すべてに一致し、最初に要求された &lt;code&gt;url&lt;/code&gt; クエリパラメータに追加して、ファイルindex.phpに書き換えます。 つまり、入ってくるすべてのリクエストに対して、ファイルindex.phpが実行され、このファイルは &lt;code&gt;$_GET['url']&lt;/code&gt; 内の元のリクエストにアクセスできるため、それを使用して何でも実行できます。</target>
        </trans-unit>
        <trans-unit id="a8c5fe091e3cffc8b0c5e5c2b1598310dff0e558" translate="yes" xml:space="preserve">
          <source>To actually use RewriteRules in per-directory configuration files you must:</source>
          <target state="translated">実際にディレクトリ単位の設定ファイルで RewriteRules を使用するには、以下のようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="302e8c9231b475103b1b38d200a19d9417800479" translate="yes" xml:space="preserve">
          <source>To expand on &lt;a href=&quot;https://stackoverflow.com/a/20563773/1011145&quot;&gt;deceze's answer&lt;/a&gt;, I wanted to provide a few examples and explanation of some other mod_rewrite functionality.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/20563773/1011145&quot;&gt;decezeの答え&lt;/a&gt;を拡張するために、いくつかの他のmod_rewrite機能の例と説明を提供したいと思いました。</target>
        </trans-unit>
        <trans-unit id="e0bb75b10308d21179997cfdc7b880808864c79a" translate="yes" xml:space="preserve">
          <source>To understand what mod_rewrite does you first need to understand how a web server works. A web server responds to &lt;a href=&quot;http://en.wikipedia.org/wiki/Http&quot;&gt;&lt;em&gt;HTTP requests&lt;/em&gt;&lt;/a&gt;. An HTTP request at its most basic level looks like this:</source>
          <target state="translated">mod_rewriteの内容を理解するには、まずWebサーバーの動作を理解する必要があります。 Webサーバーは&lt;a href=&quot;http://en.wikipedia.org/wiki/Http&quot;&gt;&lt;em&gt;HTTPリクエストに&lt;/em&gt;&lt;/a&gt;応答し&lt;em&gt;ます&lt;/em&gt; 。 最も基本的なレベルのHTTPリクエストは次のようになります。</target>
        </trans-unit>
        <trans-unit id="4fa8cc860c52b268dc6a3adcde7305e9415db5bb" translate="yes" xml:space="preserve">
          <source>Tools</source>
          <target state="translated">Tools</target>
        </trans-unit>
        <trans-unit id="58245d2ae3eef010b5b66c0f91d98d0ced9ae5a7" translate="yes" xml:space="preserve">
          <source>Trailing file &quot;extensions&quot;</source>
          <target state="translated">後続のファイルの「拡張子</target>
        </trans-unit>
        <trans-unit id="42c250d9422aa8b9548f27e829e74fff8a6655de" translate="yes" xml:space="preserve">
          <source>URL rewriting is primarily used for supporting &lt;em&gt;virtual&lt;/em&gt; incoming paths. Commonly you just have one dispatcher script (&lt;code&gt;index.php&lt;/code&gt;) or a few individual handlers (&lt;code&gt;articles.php&lt;/code&gt;, &lt;code&gt;blog.php&lt;/code&gt;, &lt;code&gt;wiki.php&lt;/code&gt;, &amp;hellip;). The latter &lt;a href=&quot;https://stackoverflow.com/a/1298917&quot;&gt;might clash&lt;/a&gt; with similar virtual RewriteRule paths.</source>
          <target state="translated">URL書き換えは、主に&lt;em&gt;仮想&lt;/em&gt;着信パスをサポートするために使用されます。 通常、1つのディスパッチャスクリプト（ &lt;code&gt;index.php&lt;/code&gt; ）またはいくつかの個別のハンドラ（ &lt;code&gt;articles.php&lt;/code&gt; 、 &lt;code&gt;blog.php&lt;/code&gt; 、 &lt;code&gt;wiki.php&lt;/code&gt; 、&amp;hellip;） しかありません。 後者&lt;a href=&quot;https://stackoverflow.com/a/1298917&quot;&gt;は&lt;/a&gt; 、同様の仮想RewriteRuleパスと競合する可能性があります。</target>
        </trans-unit>
        <trans-unit id="936c1eadd423e11d0419edc5c0a50907603bcf5b" translate="yes" xml:space="preserve">
          <source>URLs don't really have file extensions. Which is what this entire reference is about (= URLs are virtual locators, not necessarily a direct filesystem image).
However if you had a 1:1 file mapping before, you &lt;em&gt;can&lt;/em&gt; craft simpler rules:</source>
          <target state="translated">URLにはファイル拡張子がありません。 これは、この参照全体に関するものです（= URLは仮想ロケーターであり、必ずしも直接のファイルシステムイメージではありません）。 ただし、以前に1：1のファイルマッピングがあった場合は、より簡単なルールを作成&lt;em&gt;でき&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="748dcaf65cc260bb40913050765500212f87a4c3" translate="yes" xml:space="preserve">
          <source>Uniformity with alternative lists</source>
          <target state="translated">代替リストによる統一性</target>
        </trans-unit>
        <trans-unit id="171f5f83a5e1cc88faf76682f9ab5dec103babb8" translate="yes" xml:space="preserve">
          <source>Use mod_rewrite on the server to handle the request to the URL &lt;code&gt;/my/pretty/link&lt;/code&gt; using any one of the methods described above.</source>
          <target state="translated">サーバーでmod_rewriteを使用して、上記のいずれかの方法でURL &lt;code&gt;/my/pretty/link&lt;/code&gt; へのリクエストを処理します。</target>
        </trans-unit>
        <trans-unit id="314b923c11804470bedda27a5e010368e52f966a" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://stackoverflow.com/questions/2261951/what-exactly-is-path-info-in-php&quot;&gt;PATH_INFO&lt;/a&gt;, Luke</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/2261951/what-exactly-is-path-info-in-php&quot;&gt;PATH_INFOを&lt;/a&gt;使用して、Luke</target>
        </trans-unit>
        <trans-unit id="b06ad5cb5d4d5adc3d4c61b06b4b81b4e2fc280c" translate="yes" xml:space="preserve">
          <source>Were it really be disabled, your RewriteRules still wouldn't work anyway.</source>
          <target state="translated">それが本当に無効化されていたとしても、あなたのRewriteRulesはいずれにしても動作しません。</target>
        </trans-unit>
        <trans-unit id="d0cbc1290725122d94fb5a18b92c5702e6822572" translate="yes" xml:space="preserve">
          <source>What &quot;pretty&quot; URLs should conceptionally be used for is making websites &lt;strong&gt;&lt;em&gt;user-friendly&lt;/em&gt;&lt;/strong&gt;.</source>
          <target state="translated">「きれいな」URLを概念的に使用する必要があるのは、Webサイトを&lt;strong&gt;&lt;em&gt;ユーザーフレンドリーにすること&lt;/em&gt;&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="09b7efa758045019b58e1428653c1f860a31dcd6" translate="yes" xml:space="preserve">
          <source>What mod_rewrite does &lt;em&gt;not&lt;/em&gt; do</source>
          <target state="translated">mod_rewriteが&lt;em&gt;行わない&lt;/em&gt;こと</target>
        </trans-unit>
        <trans-unit id="360f3bc410da35a3cfaf91a34475047f7d1fbd2b" translate="yes" xml:space="preserve">
          <source>What seems enticing as generalized safeguard, often turns out to be an obstacle in practice.</source>
          <target state="translated">一般的な安全装置として魅力的に見えるものは、実際には障害となることが多い。</target>
        </trans-unit>
        <trans-unit id="60ab540d4d5fa82c04683e07b642ce0708dabbf4" translate="yes" xml:space="preserve">
          <source>When opting for directory-style paths, you can make it reachable with and without a final</source>
          <target state="translated">ディレクトリ形式のパスを選択する場合、最終的な</target>
        </trans-unit>
        <trans-unit id="c5b3b194631676b25d479ba8960b569223e4c363" translate="yes" xml:space="preserve">
          <source>When you introduce virtual directory structures &lt;code&gt;/blog/article/123&lt;/code&gt; this impacts relative resource references in HTML (such as &lt;code&gt;&amp;lt;img src=mouse.png&amp;gt;&lt;/code&gt;).
Which can be solved by:</source>
          <target state="translated">仮想ディレクトリ構造 &lt;code&gt;/blog/article/123&lt;/code&gt; を導入すると、これはHTMLの相対リソース参照（ &lt;code&gt;&amp;lt;img src=mouse.png&amp;gt;&lt;/code&gt; など ）に影響します。 これは次の方法で解決できます。</target>
        </trans-unit>
        <trans-unit id="22eb5ad30eff3a83a982c487a7eeafa78266307c" translate="yes" xml:space="preserve">
          <source>Whenever something &lt;em&gt;doesn't work&lt;/em&gt;</source>
          <target state="translated">何か&lt;em&gt;がうまくいかない&lt;/em&gt;ときはいつでも</target>
        </trans-unit>
        <trans-unit id="73279bd5b2034996f948348aaf4405c0d1d8ebfc" translate="yes" xml:space="preserve">
          <source>Which helps to narrow down overly generic rules and regex mishaps.</source>
          <target state="translated">これは、過度に一般的なルールや正規表現のミスを絞り込むのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="ef42d9dca7c76ff93fcf4f46cc65e5e50e1ea14b" translate="yes" xml:space="preserve">
          <source>Which is not to say you always &lt;em&gt;have to&lt;/em&gt;. Content-Negotiation is just an automatism to virtual resources.</source>
          <target state="translated">常にそうし&lt;em&gt;なけれ&lt;/em&gt;ばならないということではありません。 コンテンツネゴシエーションは、仮想リソースの単なる自動化です。</target>
        </trans-unit>
        <trans-unit id="8178d60b1be6e325d969a1f01cbe50a62bca55c9" translate="yes" xml:space="preserve">
          <source>Which is often used by PHP frameworks or WebCMS / portal scripts. The actual path splitting then is handled in PHP using &lt;code&gt;$_SERVER[&quot;REQUEST_URI&quot;]&lt;/code&gt;. So conceptionally it's pretty much the opposite of URL handling &quot;per mod_rewrite&quot;. (Just use &lt;a href=&quot;https://httpd.apache.org/docs/2.4/rewrite/remapping.html#fallback-resource&quot;&gt;&lt;code&gt;FallBackResource&lt;/code&gt;&lt;/a&gt; instead.)</source>
          <target state="translated">これは、PHPフレームワークまたはWebCMS /ポータルスクリプトでよく使用されます。 その後、実際のパス分割は &lt;code&gt;$_SERVER[&quot;REQUEST_URI&quot;]&lt;/code&gt; を使用してPHPで処理されます。 つまり、概念的には、「mod_rewriteごと」のURL処理とは正反対です。 （代わりに&lt;a href=&quot;https://httpd.apache.org/docs/2.4/rewrite/remapping.html#fallback-resource&quot;&gt; &lt;code&gt;FallBackResource&lt;/code&gt; &lt;/a&gt;を使用してください 。）</target>
        </trans-unit>
        <trans-unit id="66300ff1c036bd0e881fe379dec2cb88970a4d4c" translate="yes" xml:space="preserve">
          <source>Which it doesn't per default. You can &lt;a href=&quot;https://stackoverflow.com/questions/7218164/multiple-rewriterules-for-single-rewritecond-in-htaccess&quot;&gt;chain them&lt;/a&gt; using the &lt;code&gt;[S=2]&lt;/code&gt; flag. Else you'll have to repeat them. While sometimes you can craft an &quot;inverted&quot; primary rule to [END] the rewrite processing early.</source>
          <target state="translated">デフォルトではありません。 &lt;code&gt;[S=2]&lt;/code&gt; フラグを使用して&lt;a href=&quot;https://stackoverflow.com/questions/7218164/multiple-rewriterules-for-single-rewritecond-in-htaccess&quot;&gt;それら&lt;/a&gt;を連鎖させることができます。 そうでなければ、それらを繰り返す必要があります。 場合によっては、「逆」のプライマリルールを作成して、書き換え処理を早く[終了]することもできます。</target>
        </trans-unit>
        <trans-unit id="dfa0314a5be793cf2743f125195fe1bfb6a4399d" translate="yes" xml:space="preserve">
          <source>You can easily extend that rule to allow for &lt;code&gt;/article/title-string&lt;/code&gt; placeholders:</source>
          <target state="translated">このルールを簡単に拡張して、 &lt;code&gt;/article/title-string&lt;/code&gt; プレースホルダーを許可できます 。</target>
        </trans-unit>
        <trans-unit id="6a6877229f800cd4d7bb88f9850b271d0487be6f" translate="yes" xml:space="preserve">
          <source>You can split them out into individual &lt;code&gt;RewriteRule&lt;/code&gt;s should this get too complex.</source>
          <target state="translated">複雑すぎる場合は、個別の &lt;code&gt;RewriteRule&lt;/code&gt; に分割できます。</target>
        </trans-unit>
        <trans-unit id="8585e0db233781f56ebd06de62c7eb1f8f5b3a5a" translate="yes" xml:space="preserve">
          <source>You can't match &lt;code&gt;RewriteRule index.php\?x=y&lt;/code&gt;, because mod_rewrite compares just against relative paths per default. You can match them separately however via:</source>
          <target state="translated">&lt;code&gt;RewriteRule index.php\?x=y&lt;/code&gt; と一致させることはできません。これは、mod_rewriteがデフォルトで相対パスと比較するだけだからです。 あなたはそれらを別々に一致させることができます：</target>
        </trans-unit>
        <trans-unit id="d222b87fbace9b84595f1388716086c2a42d24b7" translate="yes" xml:space="preserve">
          <source>You could alternatively craft further RewriteRules to rebind &lt;code&gt;.css&lt;/code&gt; or &lt;code&gt;.png&lt;/code&gt; paths to their original locations.
But that's both unneeded, or incurs extra redirects and hampers caching.</source>
          <target state="translated">または、RewriteRulesをさらに作成して、 &lt;code&gt;.css&lt;/code&gt; または &lt;code&gt;.png&lt;/code&gt; パスを元の場所に再バインドすることもできます。 しかし、それはどちらも不要であるか、余分なリダイレクトが発生し、キャッシングが妨げられます。</target>
        </trans-unit>
        <trans-unit id="44a6fa9efc666a65a1bd62ec9dc5ea3f7942e480" translate="yes" xml:space="preserve">
          <source>You shouldn't start your &lt;code&gt;.htaccess&lt;/code&gt; RewriteRule patterns with &lt;code&gt;^/&lt;/code&gt; normally:</source>
          <target state="translated">通常、 &lt;code&gt;.htaccess&lt;/code&gt; RewriteRuleパターンを &lt;code&gt;^/&lt;/code&gt; 開始しないでください。</target>
        </trans-unit>
        <trans-unit id="815d892a020c87eb8dcd1e707d7e6e98c8c8c3ca" translate="yes" xml:space="preserve">
          <source>You're most commonly seeing RewriteRules to simulate a virtual directory structure. But you're not forced to be uncreative. You can as well use &lt;code&gt;-&lt;/code&gt; hyphens for segmenting or structure.</source>
          <target state="translated">最も一般的には、仮想ディレクトリ構造をシミュレートするためにRewriteRulesが表示されます。 しかし、あなたは創造的である必要はありません。 セグメント化または構造化のために &lt;code&gt;-&lt;/code&gt; ハイフンを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="d0f0d732863ee895a309758e84227312d39f3171" translate="yes" xml:space="preserve">
          <source>You've probably seen this in many examples:</source>
          <target state="translated">いろんな例で見たことがあるでしょう。</target>
        </trans-unit>
        <trans-unit id="a8f5998b0f4e9bd3bbc4db8f81b5de80b7f6c2ed" translate="yes" xml:space="preserve">
          <source>approach is easy to append onto any other RewriteRule.</source>
          <target state="translated">アプローチは、他の RewriteRule に簡単に追加することができます。</target>
        </trans-unit>
        <trans-unit id="6ec7f782439e58bed3a8696b026c30a1d9093ec8" translate="yes" xml:space="preserve">
          <source>in patterns</source>
          <target state="translated">模様的に</target>
        </trans-unit>
        <trans-unit id="a56c70ab2c290c7937cb7e100dd4b3b8f2b82d94" translate="yes" xml:space="preserve">
          <source>mod_rewrite does not magically make all your URLs &quot;pretty&quot;. This is a common misunderstanding. If you have this link in your web site:</source>
          <target state="translated">mod_rewrite は魔法のようにすべての URL を &quot;きれい&quot; にするわけではありません。これはよくある誤解です。もしあなたのウェブサイトにこのリンクがあれば</target>
        </trans-unit>
        <trans-unit id="043d0819e92bf8f0d7f33ab50480ff32c04dd7c1" translate="yes" xml:space="preserve">
          <source>mod_rewrite is a way to &lt;em&gt;rewrite&lt;/em&gt; the internal request handling. When the web server receives a request for the URL &lt;code&gt;/foo/bar&lt;/code&gt;, you can &lt;em&gt;rewrite&lt;/em&gt; that URL into something else before the web server will look for a file on disk to match it. Simple example:</source>
          <target state="translated">mod_rewriteは、内部リクエスト処理を&lt;em&gt;書き換える&lt;/em&gt;方法です。 WebサーバーがURL &lt;code&gt;/foo/bar&lt;/code&gt; のリクエストを受信した場合、Webサーバーが一致するディスク上のファイルを探す前に、そのURLを別のURLに&lt;em&gt;書き換える&lt;/em&gt;ことができます。 簡単な例：</target>
        </trans-unit>
        <trans-unit id="c838466232ea0f7c751192a9afce76a1b060ebe8" translate="yes" xml:space="preserve">
          <source>scheme:</source>
          <target state="translated">scheme:</target>
        </trans-unit>
        <trans-unit id="f37e25064bedecaffcd022221184a14425448ecb" translate="yes" xml:space="preserve">
          <source>there's nothing mod_rewrite can do to make that pretty. In order to make this a pretty link, you have to:</source>
          <target state="translated">これをきれいにするために mod_rewrite ができることは何もありません。これをきれいなリンクにするためには</target>
        </trans-unit>
        <trans-unit id="72bba5fd6da4f8012e901d27e8f7631e871b0922" translate="yes" xml:space="preserve">
          <source>␣</source>
          <target state="translated">␣</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
