<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/2056">
    <body>
      <group id="2056">
        <trans-unit id="ca519aa8f232477ca6fb4d7b413bfb8ff28e4d3f" translate="yes" xml:space="preserve">
          <source>( &lt;em&gt;Model&lt;/em&gt; is making a query to the movie database &amp;hellip; ) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(El &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;modelo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; est&amp;aacute; haciendo una consulta a la base de datos de pel&amp;iacute;culas ...) [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b196c782085e0f289a857424f8d3cd8dbdb5b897" translate="yes" xml:space="preserve">
          <source>( &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt; is calling the &lt;em&gt;Model&lt;/em&gt; &amp;hellip; ) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Presentador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | El &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;controlador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; est&amp;aacute; llamando al &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Modelo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ...) [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11738dac3b131594904e3da34a1f722da38d33c0" translate="yes" xml:space="preserve">
          <source>( &lt;em&gt;View&lt;/em&gt; calling the &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt; &amp;hellip; ) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ver&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; llamar al &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;presentador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controlador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ...) [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="617662bb70662b4ee51904f6a182010f0a37b584" translate="yes" xml:space="preserve">
          <source>( After a while ... )</source>
          <target state="translated">(Despu√©s de un tiempo ...)</target>
        </trans-unit>
        <trans-unit id="9d4ae30232c39e1b37db57f07c414ae602ebff4d" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt; thanks &lt;em&gt;Model&lt;/em&gt; and gets back to the &lt;em&gt;View&lt;/em&gt;) [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Presentador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controlador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; agradece al &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Modelo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y vuelve a la &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vista&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3eebbce0b57244ba6f4264a8083b8a2123c286b7" translate="yes" xml:space="preserve">
          <source>(The &lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;article&lt;/a&gt; also matches what Uncle Bob Martin said in his one of his talks: that MVC was originally designed for the small UI components, not for the architecture of the system)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(El &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;art&amp;iacute;culo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tambi&amp;eacute;n coincide con lo que dijo el t&amp;iacute;o Bob Martin en una de sus charlas: que MVC fue dise&amp;ntilde;ado originalmente para los peque&amp;ntilde;os componentes de la interfaz de usuario, no para la arquitectura del sistema)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d69c0eadbc92a3002b2d562fc52edc9adb877fe" translate="yes" xml:space="preserve">
          <source>-------------- This is where MVP and MVC start to diverge ---------------</source>
          <target state="translated">--------------Aqu√≠ es donde el MVP y el MVC comienzan a divergir...</target>
        </trans-unit>
        <trans-unit id="f856f715b52ee9433e2a04ef7470396b0b845d81" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;/questions/tagged/mvc&quot;&gt;mvc&lt;/a&gt;&lt;a href=&quot;/questions/tagged/adr&quot;&gt;adr&lt;/a&gt;&lt;a href=&quot;/questions/tagged/model-view-controller&quot;&gt;model-view-controller&lt;/a&gt;&lt;a href=&quot;/questions/tagged/action-domain-responder&quot;&gt;action-domain-responder&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;/questions/tagged/mvc&quot;&gt;mvc&lt;/a&gt;&lt;a href=&quot;/questions/tagged/adr&quot;&gt;adr&lt;/a&gt;&lt;a href=&quot;/questions/tagged/model-view-controller&quot;&gt;model-view-controller&lt;/a&gt;&lt;a href=&quot;/questions/tagged/action-domain-responder&quot;&gt;action-domain-responder&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e0805a8ce705f2ac6ed5d15de6da21d7712a490e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Controller&lt;/em&gt;: Thanks for waiting &lt;em&gt;View&lt;/em&gt;, I have asked &lt;em&gt;Model&lt;/em&gt; about your search query. It says it has found a list of matching results and stored them in a variable named &quot;searchResultsList&quot; inside its instance. You can get it from there. Also please hide the progress bar now [&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controlador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Gracias por esperar &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vista&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , le he preguntado a &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sobre su consulta de b&amp;uacute;squeda. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dice que ha encontrado una lista de resultados coincidentes y los ha almacenado en una variable llamada &quot;searchResultsList&quot; dentro de su instancia. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puedes conseguirlo desde all&amp;iacute;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n oculta la barra de progreso ahora [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b3983f1cbfa0649c26418f734f0aa0db26b0cf43" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Model&lt;/em&gt;: Hey &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;, let me check &amp;hellip; [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Modelo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Hola &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;presentador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controlador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , d&amp;eacute;jame comprobar ... [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="02d626ea6ebf4c56bf4694025a75488aeb3fb7b6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Model&lt;/em&gt;: I found a list for you, &lt;em&gt;Presenter&lt;/em&gt;, here it is in JSON &amp;ldquo;[{&quot;name&quot;:&quot;Piano Teacher&quot;,&quot;year&quot;:2001},{&quot;name&quot;:&quot;Piano&quot;,&quot;year&quot;:1993}]&amp;rdquo; [&lt;strong&gt;MVP&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Modelo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Encontr&amp;eacute; una lista para usted, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Presentador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , aqu&amp;iacute; est&amp;aacute; en JSON &amp;ldquo;[{&quot; name &quot;:&quot; Piano Teacher &quot;,&quot; year &quot;: 2001}, {&quot; name &quot;:&quot; Piano &quot;,&quot; year &quot;: 1993} ] &amp;rdquo;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0d97a0f826ee560a8f304f5306f99eaeaa2a6e7b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Model&lt;/em&gt;: There is some result available, &lt;em&gt;Controller&lt;/em&gt;. I have created a field variable in my instance and filled it with the result. It's name is &quot;searchResultsList&quot; [&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Modelo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : hay algunos resultados disponibles, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;controlador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cre&amp;eacute; una variable de campo en mi instancia y la rellen&amp;eacute; con el resultado. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Su nombre es &quot;searchResultsList&quot; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d1026820b8637534d3e5c387c58a14d35c2462bd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;: Thanks &lt;em&gt;View&lt;/em&gt;,&amp;hellip; meanwhile I&amp;rsquo;m looking up the search term on the &lt;em&gt;Model&lt;/em&gt;, please show him/her a progress bar [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Presentador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Gracias &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ver&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , ... mientras busco el t&amp;eacute;rmino de b&amp;uacute;squeda en el &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Modelo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , mu&amp;eacute;strele una barra de progreso [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="082d8aab0e7355bce1f34dab98698fc6bde07fa5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;: Thanks for waiting &lt;em&gt;View&lt;/em&gt;, I found a list of matching results for you and arranged them in a presentable format: [&quot;Piano Teacher 2001&quot;,&quot;Piano 1993&quot;]. Please show it to the user in a vertical list. Also please hide the progress bar now [&lt;strong&gt;MVP&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Presentador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Gracias por esperar &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vista&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , encontr&amp;eacute; una lista de resultados coincidentes para usted y los arregl&amp;eacute; en un formato presentable: [&quot;Profesor de piano 2001&quot;, &quot;Piano 1993&quot;]. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Mu&amp;eacute;stralo al usuario en una lista vertical. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n oculta la barra de progreso ahora [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6f82c8e2cb67e54724775d8eb3d6c9f1896844a8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;: Hey &lt;em&gt;Model&lt;/em&gt;, Do you have any match for this search term?: &amp;ldquo;piano&amp;rdquo; [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Presentador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controlador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Hola &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Modelo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &amp;iquest;Tiene alguna coincidencia para este t&amp;eacute;rmino de b&amp;uacute;squeda ?: &amp;ldquo;piano&amp;rdquo; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="28df57da3132198350a38fc4a4fbecf2b3251bfa" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;: Hey &lt;em&gt;View&lt;/em&gt;, is there any search term on that page? [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Presentador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controlador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Hey &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vista&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &amp;iquest;hay alg&amp;uacute;n t&amp;eacute;rmino de b&amp;uacute;squeda en esa p&amp;aacute;gina? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a100e4ba21f44ff5d7a8afa346a7c0b100dbb45" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Hey &lt;em&gt;Presenter&lt;/em&gt;|&lt;em&gt;Controller&lt;/em&gt;, a User has just clicked on the search button, what shall I do? [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ver&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Hola &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;presentador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controlador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , un usuario acaba de hacer clic en el bot&amp;oacute;n de b&amp;uacute;squeda, &amp;iquest;qu&amp;eacute; debo hacer? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f60206b05d7120cef3963992fd371e891b6b71e5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Ok, hold on a sec &amp;hellip; . [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ver&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Ok, espera un segundo ... &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82646e9011ff1bbbb2fc937dd69582393ccd56b3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Thank you &quot;Controller&quot; [&lt;strong&gt;MVC&lt;/strong&gt;]
(Now the &lt;em&gt;View&lt;/em&gt; is questioning itself: How should I present the results I get from the &lt;em&gt;Model&lt;/em&gt; to the user? Should the production year of the movie come first or last...? Should it be in a vertical or horizontal list? ...)</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vista&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Gracias &quot;Controlador&quot; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ] (Ahora la &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vista&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se cuestiona a s&amp;iacute; misma: &amp;iquest;C&amp;oacute;mo debo presentar los resultados que obtengo del &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Modelo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; al usuario? &amp;iquest;Deber&amp;iacute;a el a&amp;ntilde;o de producci&amp;oacute;n de la pel&amp;iacute;cula ser el primero o el &amp;uacute;ltimo ...? &amp;iquest;Deber&amp;iacute;a estar en una lista vertical u horizontal? ...)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9bb2ab8bc9f3d5a17d0e1d54691cea402a029772" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Thank you very much &lt;em&gt;Presenter&lt;/em&gt; [&lt;strong&gt;MVP&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ver&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Muchas gracias &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Presentador&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d0e8539215ad94c8625100b6f44cd2b22541d2d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Who&amp;rsquo;s that? [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ver&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &amp;iquest;Qui&amp;eacute;n es ese? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4138a03bcc30a87317df02669cb3494beed2d551" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;View&lt;/em&gt;: Yes,&amp;hellip; here it is &amp;hellip; &amp;ldquo;piano&amp;rdquo; [&lt;strong&gt;MVP&lt;/strong&gt;|&lt;strong&gt;MVC&lt;/strong&gt;]</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ver&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : S&amp;iacute;, ... aqu&amp;iacute; est&amp;aacute; ... &quot;piano&quot; [ &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; | &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e10b3aa3f3ca649918786d0ac1c826d2957375b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cons:&lt;/strong&gt;
    Bit complex and more work when implementing event bindings</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Contras:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; poco complejo y m&amp;aacute;s trabajo al implementar enlaces de eventos&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a172147501124e022228068f6941ed911ff4b0b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cons:&lt;/strong&gt;
  Sometimes too much workload for Controllers, if try to render multiple views in same controller.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Contras: a&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; veces demasiada carga de trabajo para los Controladores, si intenta renderizar m&amp;uacute;ltiples vistas en el mismo controlador.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="156a0cb080027a6ff6d0542b61a78c2d3d218d41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Controllers&lt;/strong&gt; for handling the user interface and application</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controladores&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para manejar la interfaz de usuario y la aplicaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5e7f66068af168e4fc082d8dc01cb848b92a46b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC (Model View Controller)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC (controlador de vista de modelo)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="608a28a38a1824ff63d31dcd52439b72ddf63906" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC Pattern&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Patr&amp;oacute;n MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d8bc00d019fd0a2f99238073aef9a2d4311db18e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;MVC&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f784873573ecd0397295d7afa60e2c45bfc5eb7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVC&lt;/strong&gt; is a pattern for the architecture of a software application. It separate the application logic into three separate parts, promoting modularity and ease of collaboration and reuse. It also makes applications more flexible and welcoming to iterations.It separates an application into the following components:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un patr&amp;oacute;n para la arquitectura de una aplicaci&amp;oacute;n de software. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Separa la l&amp;oacute;gica de la aplicaci&amp;oacute;n en tres partes separadas, promoviendo la modularidad y la facilidad de colaboraci&amp;oacute;n y reutilizaci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n hace que las aplicaciones sean m&amp;aacute;s flexibles y acogedoras para las iteraciones. Separa una aplicaci&amp;oacute;n en los siguientes componentes:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0a3d14652eb4344ee36a149498b3d4cb34487a0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVP (Model View Presenter)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP (Presentador de vista de modelo)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e9c824c237d99d678e99ddbc760e821f4ee9deb8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVP Pattern&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Patr&amp;oacute;n MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f94476ec169490b00a853ca7228940e69d66e2c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MVP&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;MVP&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3b088ec128ecc3c454c0327d87d024496300247c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Model-View-Controller&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Model-View-Controller&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b145e8a37e9509a1eda7ea52157c5fbe04d0896" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Model-View-Presenter&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Model-View-Presenter&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="48291acc891f6b0d52b30c232b8856c19deaefa7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Models&lt;/strong&gt; for handling data and business logic</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Modelos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para el manejo de datos y l&amp;oacute;gica de negocios.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2033eab462915f68e8f6d27646bea6775e2f24d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Wikipedia states that &quot;&lt;em&gt;Each ADR action, however, is represented by separate classes or closures.&lt;/em&gt;&quot;. This is &lt;strong&gt;not&lt;/strong&gt; necessarily true. Several Actions can be in the same Controller, and the pattern is still the same.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Nota:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Wikipedia establece que &quot; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, cada acci&amp;oacute;n de ADR est&amp;aacute; representada por clases o cierres separados&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;necesariamente cierto. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Varias acciones pueden estar en el mismo controlador, y el patr&amp;oacute;n sigue siendo el mismo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b20bafb875f0d0613a38122493b645665486924b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passive View:&lt;/strong&gt; The View is as dumb as possible and contains almost zero logic. The Presenter is a middle man that talks to the View and the Model. The View and Model are completely shielded from one another. The Model may raise events, but the Presenter subscribes to them for updating the View. In Passive View there is no direct data binding, instead the View exposes setter properties which the Presenter uses to set the data. All state is managed in the Presenter and not the View.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vista pasiva:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; la vista es lo m&amp;aacute;s tonta posible y contiene casi cero l&amp;oacute;gica. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El presentador es un intermediario que habla con la vista y el modelo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La vista y el modelo est&amp;aacute;n completamente protegidos el uno del otro. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El Modelo puede generar eventos, pero el Presentador se suscribe a ellos para actualizar la Vista. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En la Vista pasiva no hay enlace de datos directo, en cambio, la Vista expone las propiedades del configurador que el Presentador utiliza para establecer los datos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Todo el estado se administra en el Presentador y no en la Vista.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34a5a86c8422d6c1567946698cd503d40967adf7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pros:&lt;/strong&gt;
    The view is having only  UI not any logics
    High level of testability</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pros:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; La vista solo tiene IU, no ninguna l&amp;oacute;gica. Alto nivel de comprobabilidad.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e01f9565bf9defd5471edf6632bc1687db7b76d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pros:&lt;/strong&gt;
  Emphasis on Single Responsibility Principle
  High level of testability</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pros:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;Eacute;nfasis en el principio de responsabilidad &amp;uacute;nica. Alto nivel de comprobabilidad.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="afb437faf2ed73f1dd6b1528a681eedce26744ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Supervising Controller:&lt;/strong&gt; The Presenter handles user gestures. The View binds to the Model directly through data binding. In this case it's the Presenter's job to pass off the Model to the View so that it can bind to it. The Presenter will also contain logic for gestures like pressing a button, navigation, etc.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controlador supervisor:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; el presentador maneja los gestos del usuario. La vista se une al modelo directamente a trav&amp;eacute;s del enlace de datos. En este caso, el trabajo del presentador es pasar el modelo a la vista para que pueda vincularse a &amp;eacute;l. El presentador tambi&amp;eacute;n contendr&amp;aacute; l&amp;oacute;gica para gestos como presionar un bot&amp;oacute;n, navegaci&amp;oacute;n, etc.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e8e51727d49d4f883cc1a5618583a1730a3423cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Views&lt;/strong&gt; for handling graphical user interface objects and presentation</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vistas&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para manejar objetos de interfaz gr&amp;aacute;fica de usuario y presentaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="add0cc6a4a79ac095cd7622623adfbac7b346164" translate="yes" xml:space="preserve">
          <source>A concrete workflow of querying and displaying a list of users from a database could work like this:</source>
          <target state="translated">Un flujo de trabajo concreto de consulta y visualizaci√≥n de una lista de usuarios de una base de datos podr√≠a funcionar as√≠:</target>
        </trans-unit>
        <trans-unit id="1ee2af540a4b66e2e49393871786d070776e55fd" translate="yes" xml:space="preserve">
          <source>A great article on the differences is &lt;a href=&quot;http://www.infragistics.com/community/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;here&lt;/a&gt;.  Most notable is that MVC pattern has the Model updating the View.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un gran art&amp;iacute;culo sobre las diferencias est&amp;aacute; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.infragistics.com/community/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aqu&amp;iacute;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo m&amp;aacute;s notable es que el patr&amp;oacute;n MVC tiene el Modelo actualizando la Vista.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7480795899c308541ed6768ff447271305dc003" translate="yes" xml:space="preserve">
          <source>A presenter is acting as a supervisory role in MVP which binding View events and business logic from models.</source>
          <target state="translated">Un presentador est√° actuando como un papel de supervisi√≥n en MVP que vinculante Ver los eventos y la l√≥gica de negocio de los modelos.</target>
        </trans-unit>
        <trans-unit id="f1f788974cbeb29212645f28d4349b64ddc799a8" translate="yes" xml:space="preserve">
          <source>Also worth remembering is that there are different types of MVPs as well. Fowler has broken the pattern into two - Passive View and Supervising Controller.</source>
          <target state="translated">Tambi√©n vale la pena recordar que tambi√©n hay diferentes tipos de MVP.Fowler ha dividido el patr√≥n en dos:Vista pasiva y Controlador supervisor.</target>
        </trans-unit>
        <trans-unit id="18f0b68ee7609a444a8d9a6033eb2ae6e263c776" translate="yes" xml:space="preserve">
          <source>And so, you can look on MVP as an evolution of MVC.</source>
          <target state="translated">Y as√≠,puedes ver el MVP como una evoluci√≥n del MVC.</target>
        </trans-unit>
        <trans-unit id="07cdb35e36e9c49bf40e639443ef77de2afbca7d" translate="yes" xml:space="preserve">
          <source>Architecturally, MVP is Page Controller based approach where MVC is Front Controller based approach. 
That means that in MVP standard web form page life cycle is just enhanced by extracting the business logic from code behind. In other words, page is the one servicing http request. In other words, MVP IMHO is web form evolutionary type of enhancement.
MVC on other hand changes completely the game because the request gets intercepted by controller class before page is loaded, the business logic is executed there and then at the end result of controller processing the data just dumped to the page (&quot;view&quot;)
In that sense, MVC looks (at least to me) a lot to Supervising Controller flavor of MVP enhanced with routing engine</source>
          <target state="translated">Arquitect√≥nicamente,MVP es un enfoque basado en el Controlador de P√°gina donde MVC es un enfoque basado en el Controlador Frontal.Eso significa que en el MVP el ciclo de vida de la p√°gina web est√°ndar s√≥lo se mejora extrayendo la l√≥gica de negocio del c√≥digo que hay detr√°s.En otras palabras,la p√°gina es la que sirve a la petici√≥n http.En otras palabras,MVP IMHO es un tipo de mejora evolutiva de la forma web.MVC por otro lado cambia completamente el juego porque la petici√≥n es interceptada por la clase de controlador antes de que la p√°gina se cargue,la l√≥gica de negocio se ejecuta all√≠ y luego en el resultado final del procesamiento del controlador los datos acaban de ser volcados a la p√°gina (&quot;view&quot;)En ese sentido,MVC se parece mucho (al menos para m√≠)al sabor de Supervisor de Controlador de MVP mejorado con el motor de enrutamiento</target>
        </trans-unit>
        <trans-unit id="7900b35c8f8f0559bbd47d5e988ed320a97b09a9" translate="yes" xml:space="preserve">
          <source>As explained in some graphics above, there's a direct relation/link between the &lt;strong&gt;Model&lt;/strong&gt; and the &lt;strong&gt;View&lt;/strong&gt; in MVC.
An action is performed on the &lt;strong&gt;Controller&lt;/strong&gt;, which will execute an action on the &lt;strong&gt;Model&lt;/strong&gt;. That action in the &lt;strong&gt;Model&lt;/strong&gt;, &lt;strong&gt;will trigger a reaction&lt;/strong&gt; in the &lt;strong&gt;View&lt;/strong&gt;.
The &lt;strong&gt;View&lt;/strong&gt;, is always updated when the &lt;strong&gt;Model&lt;/strong&gt;'s state changes.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como se explica en algunos gr&amp;aacute;ficos anteriores, hay una relaci&amp;oacute;n / v&amp;iacute;nculo directo entre el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Modelo&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y la &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vista&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en MVC. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Se realiza una acci&amp;oacute;n en el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;controlador&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que ejecutar&amp;aacute; una acci&amp;oacute;n en el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;modelo&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esa acci&amp;oacute;n en el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Modelo&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;desencadenar&amp;aacute; una reacci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en la &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vista&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vista&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , siempre se actualiza cuando &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cambia el estado &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;del &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Modelo&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a1a531af64742c2e545bfca92ada8c68ab0f969" translate="yes" xml:space="preserve">
          <source>Because we use web frameworks (&lt;em&gt;eg:. Laravel&lt;/em&gt;) that still use the same naming conventions (&lt;em&gt;model-view-controller&lt;/em&gt;), we tend to think that it must be MVC, but it's actually something else.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Debido a que usamos frameworks web ( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;por ejemplo: Laravel&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) que a&amp;uacute;n usan las mismas convenciones de nomenclatura ( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;model-view-controller&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), tendemos a pensar que debe ser MVC, pero en realidad es algo m&amp;aacute;s.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c683c3c42c4cd8715c9521a1ca053a3971db3040" translate="yes" xml:space="preserve">
          <source>Both are patterns trying to separate presentation and business logic, decoupling business logic from UI aspects</source>
          <target state="translated">Ambos son patrones que tratan de separar la presentaci√≥n y la l√≥gica de negocios,desacoplando la l√≥gica de negocios de los aspectos de la interfaz de usuario</target>
        </trans-unit>
        <trans-unit id="c6fd44fcf9a87b472af5d303c81d0de0302f74aa" translate="yes" xml:space="preserve">
          <source>Both of them enable TDD and have downsides and upsides.</source>
          <target state="translated">Ambos permiten la TDD y tienen sus ventajas y desventajas.</target>
        </trans-unit>
        <trans-unit id="a2fe14e6a8b913548e0224385c96a940a1ab537f" translate="yes" xml:space="preserve">
          <source>Both of these frameworks aim to seperate concerns - for instance, interaction with a data source (model), application logic (or turning this data into useful information) (Controller/Presenter) and display code (View).  In some cases the model can also be used to turn a data source into a higher level abstraction as well.  A good example of this is the &lt;a href=&quot;http://blog.wekeroad.com/mvc-storefront/&quot;&gt;MVC Storefront project&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ambos marcos tienen como objetivo separar las preocupaciones, por ejemplo, la interacci&amp;oacute;n con una fuente de datos (modelo), la l&amp;oacute;gica de la aplicaci&amp;oacute;n (o convertir estos datos en informaci&amp;oacute;n &amp;uacute;til) (Controlador / Presentador) y mostrar el c&amp;oacute;digo (Ver). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En algunos casos, el modelo tambi&amp;eacute;n se puede utilizar para convertir una fuente de datos en una abstracci&amp;oacute;n de nivel superior. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un buen ejemplo de esto es el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blog.wekeroad.com/mvc-storefront/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;proyecto MVC Storefront&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4883d883e11f6be5048f16fc28a04c5642fc6323" translate="yes" xml:space="preserve">
          <source>Both presentation patterns.  They separate the dependencies between a Model (think Domain objects), your screen/web page (the View), and how your UI is supposed to behave (Presenter/Controller)</source>
          <target state="translated">Ambos patrones de presentaci√≥n.Separan las dependencias entre un Modelo (piensa en los objetos del Dominio),tu p√°gina web (la Vista),y c√≥mo se supone que se debe comportar tu UI (PresenterController)</target>
        </trans-unit>
        <trans-unit id="7db23f637ba3aad5f36394f1c2f821f44340dc90" translate="yes" xml:space="preserve">
          <source>Can be responsible for determining which view to display</source>
          <target state="translated">Puede ser responsable de determinar qu√© vista mostrar</target>
        </trans-unit>
        <trans-unit id="f59f787c0c1f783c7964e0e7231384d7c6999d75" translate="yes" xml:space="preserve">
          <source>Can be responsible for determining which view to display (Front Controller Pattern)</source>
          <target state="translated">Puede ser responsable de determinar qu√© vista mostrar (Patr√≥n del Controlador Frontal)</target>
        </trans-unit>
        <trans-unit id="7375c53b3b9ebcc70a87ca2788a6bb5126518c27" translate="yes" xml:space="preserve">
          <source>Con: more work (for example all the setter properties) as you are doing all the data binding yourself.</source>
          <target state="translated">Con:m√°s trabajo (por ejemplo,todas las propiedades del configurador)ya que est√°s haciendo todos los datos vincul√°ndote a ti mismo.</target>
        </trans-unit>
        <trans-unit id="f7d3bb72a6caa8d05eddbf6498df612a214d40a0" translate="yes" xml:space="preserve">
          <source>Con: there's less testable surface (because of data binding), and there's less encapsulation in the View since it talks directly to the Model.</source>
          <target state="translated">Con:hay menos superficie comprobable (debido a la uni√≥n de datos),y hay menos encapsulaci√≥n en la Vista ya que habla directamente con el Modelo.</target>
        </trans-unit>
        <trans-unit id="eab32874de4f2687be749f41491e594cb1d82fc7" translate="yes" xml:space="preserve">
          <source>Conclusion - MVP and MVC are both decouple of UI patterns, but MVP usually uses a bindings framework which is MVC underneath. THUS MVP is at a higher architectural level than MVC and a wrapper pattern above of MVC.</source>
          <target state="translated">Conclusi√≥n-El MVP y el MVC est√°n ambos desacoplados de los patrones de UI,pero el MVP utiliza generalmente un marco de uni√≥n que es MVC por debajo.As√≠ que el MVP est√° a un nivel arquitect√≥nico m√°s alto que el MVC y un patr√≥n de envoltura por encima del MVC.</target>
        </trans-unit>
        <trans-unit id="80ec6fa88a532e57d985374bcc69a69ba3949d2c" translate="yes" xml:space="preserve">
          <source>Consider &lt;a href=&quot;https://lostechies.com/derekgreer/2007/08/25/interactive-application-architecture/&quot;&gt;this&lt;/a&gt; highly exciting article that comprehensively lists a number of these differing implementations. 
You may note that they're all basically doing the same thing but slightly differently.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Considere &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://lostechies.com/derekgreer/2007/08/25/interactive-application-architecture/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;este&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; art&amp;iacute;culo altamente emocionante que enumera exhaustivamente varias de estas implementaciones diferentes. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede notar que todos est&amp;aacute;n b&amp;aacute;sicamente haciendo lo mismo pero de manera ligeramente diferente.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0370c4db503c7f19467ccbfbd5f1b2695c83c0c8" translate="yes" xml:space="preserve">
          <source>Controller are based on behaviors and can be shared across views</source>
          <target state="translated">Los controladores se basan en comportamientos y pueden ser compartidos a trav√©s de puntos de vista</target>
        </trans-unit>
        <trans-unit id="2cab38a568d9155fb3cc8caa5166e589d7c1e307" translate="yes" xml:space="preserve">
          <source>Controller is the initiator and it decides which view to render.</source>
          <target state="translated">El controlador es el iniciador y decide qu√© vista mostrar.</target>
        </trans-unit>
        <trans-unit id="0f0cac48c1eaf1076d16c7f442e6fb6f16e850e1" translate="yes" xml:space="preserve">
          <source>Decision on how to choose one of them IMHO should be based on how much time one invested in ASP NET web form type of web development. 
If one would consider himself good in web forms, I would suggest MVP. 
If one would feel not so comfortable in things such as page life cycle etc MVC could be a way to go here.</source>
          <target state="translated">La decisi√≥n de c√≥mo elegir uno de ellos IMHO debe basarse en el tiempo que se ha invertido en el desarrollo de la web de tipo ASP NET.Si uno se considerara bueno en los formularios web,yo sugerir√≠a MVP.Si uno no se siente tan c√≥modo en cosas como el ciclo de vida de la p√°gina,etc.,MVC podr√≠a ser un camino a seguir.</target>
        </trans-unit>
        <trans-unit id="a2b447c22214c841c979d8d26240ed2438d50a64" translate="yes" xml:space="preserve">
          <source>Easier to unit test because interaction with the view is through an interface</source>
          <target state="translated">Es m√°s f√°cil de probar la unidad porque la interacci√≥n con la vista es a trav√©s de una interfaz</target>
        </trans-unit>
        <trans-unit id="f68548bd19b6038792cfbed16937610ee0a1067c" translate="yes" xml:space="preserve">
          <source>For more &lt;a href=&quot;http://geekswithblogs.net/dlussier/archive/2009/11/21/136454.aspx&quot;&gt;Reference&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para m&amp;aacute;s &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://geekswithblogs.net/dlussier/archive/2009/11/21/136454.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;referencia&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eed30dbb7348a447a272cc33a07f00c86a07d0c3" translate="yes" xml:space="preserve">
          <source>Having said that, ASP.NET MVC is by these definitions an MVP framework because the Controller accesses the Model to populate the View which is meant to have no logic (just  displays the variables provided by the Controller).</source>
          <target state="translated">Dicho esto,ASP.NET MVC es por estas definiciones un marco de MVP porque el Controlador accede al Modelo para poblar la Vista que se supone no tiene l√≥gica (s√≥lo muestra las variables proporcionadas por el Controlador).</target>
        </trans-unit>
        <trans-unit id="10718b2650bdd7d40cdaf7c2f35682e59070f0d1" translate="yes" xml:space="preserve">
          <source>Here are illustrations which represent communication flow</source>
          <target state="translated">Aqu√≠ est√°n las ilustraciones que representan el flujo de comunicaci√≥n</target>
        </trans-unit>
        <trans-unit id="ab0f6e9f65e0dabff8c8e9d94199d95b90198921" translate="yes" xml:space="preserve">
          <source>Here are the key differences between
  the patterns:</source>
          <target state="translated">Aqu√≠ est√°n las diferencias clave entre los patrones:</target>
        </trans-unit>
        <trans-unit id="23fb19bb0fae2989c392271f0e4532d29c366749" translate="yes" xml:space="preserve">
          <source>Here's yet another blog post link giving a little bit more details on this topic</source>
          <target state="translated">Aqu√≠ hay otro enlace de entrada al blog que da un poco m√°s de detalles sobre este tema</target>
        </trans-unit>
        <trans-unit id="a90c388214ce036e2cda7ca7a1beee59ef3deae1" translate="yes" xml:space="preserve">
          <source>How are they different?</source>
          <target state="translated">¬øEn qu√© se diferencian?</target>
        </trans-unit>
        <trans-unit id="697947ce28dd90b01db12e3c405bdc08838f4195" translate="yes" xml:space="preserve">
          <source>How are they similar?</source>
          <target state="translated">¬øEn qu√© se parecen?</target>
        </trans-unit>
        <trans-unit id="7c5691bc0007eee09d5e34fc2592d5bd59ebb6ad" translate="yes" xml:space="preserve">
          <source>I blogged about this a while back, quoting on &lt;a href=&quot;http://blogs.infragistics.com/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;Todd Snyder's excellent post on the difference between the two&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hice un blog sobre esto hace un tiempo, citando &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.infragistics.com/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la excelente publicaci&amp;oacute;n de Todd Snyder sobre la diferencia entre los dos&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="25982e196977ef10b7d392b37ae8877db51a1842" translate="yes" xml:space="preserve">
          <source>I find it unfortunate that people are still preaching this as a pattern (View in charge) as opposed to an anti-pattern as it contradicts &quot;It's just a view&quot; (Pragmatic Programmer). &quot;It's just a view&quot; states that the final view shown to the user is a secondary concern of the application. Microsoft's MVP pattern renders re-use of Views much more difficult and &lt;em&gt;conveniently&lt;/em&gt; excuses Microsoft's designer from encouraging bad practice.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Me parece lamentable que la gente siga predicando esto como un patr&amp;oacute;n (Vista a cargo) en lugar de un antipatr&amp;oacute;n, ya que contradice &quot;Es solo una vista&quot; (Programador pragm&amp;aacute;tico). &quot;Es solo una vista&quot; indica que la vista final que se muestra al usuario es una preocupaci&amp;oacute;n secundaria de la aplicaci&amp;oacute;n. El patr&amp;oacute;n MVP de Microsoft hace que la reutilizaci&amp;oacute;n de Vistas sea mucho m&amp;aacute;s dif&amp;iacute;cil y &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;convenientemente&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; excusa al dise&amp;ntilde;ador de Microsoft de alentar las malas pr&amp;aacute;cticas.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="617c09cbfe565552af42069b17032c053c0073d9" translate="yes" xml:space="preserve">
          <source>I have also blogged about the Model-View-ViewModel pattern in the context of Silverlight over at &lt;em&gt;&lt;a href=&quot;http://jonas.follesoe.no/2008/07/19/youcard-re-visited-implementing-the-viewmodel-pattern&quot;&gt;YouCard Re-visited: Implementing the ViewModel pattern&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n he blogueado sobre el patr&amp;oacute;n Model-View-ViewModel en el contexto de Silverlight en &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;a href=&quot;http://jonas.follesoe.no/2008/07/19/youcard-re-visited-implementing-the-viewmodel-pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;YouCard Re-visited: Implementaci&amp;oacute;n del patr&amp;oacute;n ViewModel&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="52cf88109ce249187c1207e73bc21232ed04270e" translate="yes" xml:space="preserve">
          <source>I have used both MVP and MVC and although we as developers tend to focus on the technical differences of both patterns the point for MVP in IMHO is much more related to ease of adoption than anything else.</source>
          <target state="translated">He utilizado tanto el MVP como el MVC y aunque como desarrolladores tendemos a centrarnos en las diferencias t√©cnicas de ambos patrones,el punto para el MVP en la IMHO est√° mucho m√°s relacionado con la facilidad de adopci√≥n que con cualquier otra cosa.</target>
        </trans-unit>
        <trans-unit id="bb50a9cb6d28245cb89b00d7267f2ac0489d11de" translate="yes" xml:space="preserve">
          <source>I hope this helps better.</source>
          <target state="translated">Espero que esto ayude a mejorar.</target>
        </trans-unit>
        <trans-unit id="042f19d6cbe76666e2c4e9ce7cc57222d9fa609e" translate="yes" xml:space="preserve">
          <source>I leave here a link to a series of articles a friend of mine has published about MVP and MVC.</source>
          <target state="translated">Dejo aqu√≠ un enlace a una serie de art√≠culos que un amigo m√≠o ha publicado sobre MVP y MVC.</target>
        </trans-unit>
        <trans-unit id="cc0f2d6d3263af56b02cbd8885ff46c2faad91fe" translate="yes" xml:space="preserve">
          <source>I personally think MVP has only been recently re-introduced as a catchy term to either reduce arguments between semantic bigots who argue whether something is truly MVC or not or to justify Microsofts Rapid Application Development tools. Neither of these reasons in my books justify its existence as a separate design pattern.</source>
          <target state="translated">Personalmente creo que MVP s√≥lo ha sido reintroducido recientemente como un t√©rmino pegadizo para reducir los argumentos entre los fan√°ticos sem√°nticos que argumentan si algo es realmente MVC o no,o para justificar las herramientas de Desarrollo R√°pido de Aplicaciones de Microsofts.Ninguna de estas razones en mis libros justifica su existencia como un patr√≥n de dise√±o separado.</target>
        </trans-unit>
        <trans-unit id="b13c436ba56a339968c458a3f31dad8b43483d6d" translate="yes" xml:space="preserve">
          <source>I think the best resource I've found to UI architecture is the series of blog posts done by Jeremy Miller over at &lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/07/25/the-build-your-own-cab-series-table-of-contents.aspx&quot;&gt;The Build Your Own CAB Series Table of Contents&lt;/a&gt;. He covered all the flavors of MVP and showed C# code to implement them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Creo que el mejor recurso que he encontrado para la arquitectura de la interfaz de usuario es la serie de publicaciones de blog realizadas por Jeremy Miller en &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/07/25/the-build-your-own-cab-series-table-of-contents.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;The Build Your Own CAB Series Table of Contents&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cubri&amp;oacute; todos los sabores de MVP y mostr&amp;oacute; el c&amp;oacute;digo C # para implementarlos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5c241da24a69fbe9adc16bb3eef4db68da44938c" translate="yes" xml:space="preserve">
          <source>I think this image by Erwin Vandervalk (and the accompanying &lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;article&lt;/a&gt;) is the best explanation of MVC, MVP, and MVVM, their similarities, and their differences. The &lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;article&lt;/a&gt; does not show up in search engine results for queries on &quot;MVC, MVP, and MVVM&quot; because the title of the article does not contain the words &quot;MVC&quot; and &quot;MVP&quot;; but it is the best explanation, I think.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Creo que esta imagen de Erwin Vandervalk (y el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;art&amp;iacute;culo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; adjunto &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;) es la mejor explicaci&amp;oacute;n de MVC, MVP y MVVM, sus similitudes y sus diferencias. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/erwinvandervalk/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;art&amp;iacute;culo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no aparece en los resultados del motor de b&amp;uacute;squeda para consultas sobre &quot;MVC, MVP y MVVM&quot; porque el t&amp;iacute;tulo del art&amp;iacute;culo no contiene las palabras &quot;MVC&quot; y &quot;MVP&quot;; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pero es la mejor explicaci&amp;oacute;n, creo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="922f8a21f3de48e180ca529ef6809b6f6eace184" translate="yes" xml:space="preserve">
          <source>IMO, MVP is an improved version of MVC where you basically separate the concern of what you're gonna show (the data) from how you're gonna show (the view). The presenter includes kinda the business logic of your UI, implicitly imposes what data should be presented and gives you a list of dumb view models. And when the time comes to show the data, you simply plug your view (probably includes the same id's) into your adapter and set the relevant view fields using those view models with a minimum amount of code being introduced (just using setters). Its main benefit is you can test your UI business logic against many/various views like showing items in a horizontal list or vertical list.</source>
          <target state="translated">IMO,MVP es una versi√≥n mejorada de MVC donde b√°sicamente separas la preocupaci√≥n de lo que vas a mostrar (los datos)de c√≥mo vas a mostrar (la vista).El presentador incluye una especie de l√≥gica de negocios de su UI,impone impl√≠citamente qu√© datos deben ser presentados y le da una lista de modelos de vista tontos.Y cuando llega el momento de mostrar los datos,simplemente se conecta la vista (probablemente incluye las mismas identificaciones)en el adaptador y se configuran los campos de vista relevantes usando esos modelos de vista con una cantidad m√≠nima de c√≥digo que se introduce (s√≥lo usando configuradores).Su principal beneficio es que puede probar su l√≥gica de negocio de la interfaz de usuario contra muchas vistas diversas,como la de mostrar los elementos en una lista horizontal o una lista vertical.</target>
        </trans-unit>
        <trans-unit id="f9cccd67f2542ff5fc1b213379d523acfb8fc112" translate="yes" xml:space="preserve">
          <source>If I&amp;rsquo;m working in a team that already as a good background on web forms development style it&amp;rsquo;s far easier to introduce MVP than MVC. I would say that MVP in this scenario is a quick win.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si estoy trabajando en un equipo que ya tiene una buena experiencia en el estilo de desarrollo de formularios web, es mucho m&amp;aacute;s f&amp;aacute;cil presentar MVP que MVC. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Yo dir&amp;iacute;a que MVP en este escenario es una victoria r&amp;aacute;pida.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6558f723fbe4fed38574748b2f5302f711c7b446" translate="yes" xml:space="preserve">
          <source>If you want to see a sample with simple implementation please check
  &lt;a href=&quot;https://github.com/rahulabrol/Messanger&quot;&gt;this&lt;/a&gt; GitHub post</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si desea ver una muestra con una implementaci&amp;oacute;n simple, consulte &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/rahulabrol/Messanger&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esta&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; publicaci&amp;oacute;n de GitHub&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ff98f23bff189ce3ed1260b7af476ccdf802ce2b" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;MVP&lt;/strong&gt;, the Presenter contains the UI business logic for the View. All invocations from the View delegate directly to Presenter. The Presenter is also decoupled directly from the View and talks to it through an interface. This is to allow mocking of the View in a unit test. One common attribute of MVP is that there has to be a lot of two-way dispatching. For example, when someone clicks the &quot;Save&quot; button, the event handler delegates to the Presenter's &quot;OnSave&quot; method. Once the save is completed, the Presenter will then call back the View through its interface so that the View can display that the save has completed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , el presentador contiene la l&amp;oacute;gica de negocios de la interfaz de usuario para la vista. Todas las invocaciones del delegado Ver directamente al Presentador. El presentador tambi&amp;eacute;n se desacopla directamente de la vista y se comunica con &amp;eacute;l a trav&amp;eacute;s de una interfaz. Esto es para permitir la burla de la Vista en una prueba unitaria. Un atributo com&amp;uacute;n de MVP es que tiene que haber mucho despacho bidireccional. Por ejemplo, cuando alguien hace clic en el bot&amp;oacute;n &quot;Guardar&quot;, el controlador de eventos delega al m&amp;eacute;todo &quot;OnSave&quot; del presentador. Una vez que se completa el guardado, el Presentador volver&amp;aacute; a llamar a la Vista a trav&amp;eacute;s de su interfaz para que la Vista pueda mostrar que el guardado se ha completado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4898bac1b812a0b26c28dd47383904e1b95ee622" translate="yes" xml:space="preserve">
          <source>In MVC, View has the UI part, controller is the mediator between view and model &amp;amp; model contains the business logic .</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En MVC, View tiene la parte de la interfaz de usuario, el controlador es el mediador entre view y model &amp;amp; model contiene la l&amp;oacute;gica empresarial.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="caecc0e801c5a72f71f7c171cabd84f782e9cfa3" translate="yes" xml:space="preserve">
          <source>In MVC, we talk through interfaces (boundaries) to glue different layers. A controller is a plug-in to our architecture but it has no such a restriction to impose what to show. In that sense, MVP is kind of an MVC with a concept of views being pluggable to the controller over adapters.</source>
          <target state="translated">En MVC,hablamos a trav√©s de interfaces (l√≠mites)para pegar diferentes capas.Un controlador es un plug-in para nuestra arquitectura pero no tiene tal restricci√≥n para imponer qu√© mostrar.En ese sentido,MVP es una especie de MVC con un concepto de vistas que se pueden conectar al controlador a trav√©s de adaptadores.</target>
        </trans-unit>
        <trans-unit id="4aa9d0ac4aa811604ba2904ebe7265f0d26b5e42" translate="yes" xml:space="preserve">
          <source>In MVP the view draws data from the presenter which draws and prepares/normalizes data from the model while in MVC the controller draws data from the model and set, by push in the view.</source>
          <target state="translated">En MVP la vista extrae datos del presentador que dibuja y prepara los datos del modelo mientras que en MVC el controlador extrae datos del modelo y establece,por empuje en la vista.</target>
        </trans-unit>
        <trans-unit id="ad4b0748ab0354e78964e5f9aeeced463b697404" translate="yes" xml:space="preserve">
          <source>In MVP you can have a single view working with multiple types of presenters and a single presenter working with different multiple views.</source>
          <target state="translated">En MVP se puede tener una sola vista trabajando con m√∫ltiples tipos de presentadores y un solo presentador trabajando con diferentes vistas m√∫ltiples.</target>
        </trans-unit>
        <trans-unit id="b9a8f65c70c9330d2e4e7ba75b8180257b99ea2d" translate="yes" xml:space="preserve">
          <source>In MVP, View contains both UI and implementation of the presenter since here the presenter is just an interface &amp;amp; model is the same i.e contains business logic .</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En MVP, View contiene tanto la interfaz de usuario como la implementaci&amp;oacute;n del presentador, ya que aqu&amp;iacute; el presentador es solo una interfaz y el modelo es el mismo, es decir, contiene l&amp;oacute;gica de negocios.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="753aca984485212d4969261a40a0ecdd95c56195" translate="yes" xml:space="preserve">
          <source>In case you're interested, I have been writing a series of articles dealing with app architectural patterns (MVC, MVP, MVVP, clean architecture, ...) accompanied by a Github repo &lt;a href=&quot;http://www.digigene.com/android-architecture-wolfkcats&quot;&gt;here&lt;/a&gt;. Even though the sample is written for android, the underlying principles can be applied to any medium.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En caso de que le interese, he estado escribiendo una serie de art&amp;iacute;culos que tratan sobre patrones arquitect&amp;oacute;nicos de aplicaciones (MVC, MVP, MVVP, arquitectura limpia, ...) acompa&amp;ntilde;ados por un repositorio de Github &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.digigene.com/android-architecture-wolfkcats&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aqu&amp;iacute;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aunque la muestra est&amp;aacute; escrita para Android, los principios subyacentes se pueden aplicar a cualquier medio.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9dd58705a824f4c7cd55ad599bf82c53e303f903" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;MVC&lt;/strong&gt;, the Controller is responsible for determining which View to display in response to any action including when the application loads. This differs from MVP where actions route through the View to the Presenter. In MVC, every action in the View correlates with a call to a Controller along with an action. In the web each action involves a call to a URL on the other side of which there is a Controller who responds. Once that Controller has completed its processing, it will return the correct View. The sequence continues in that manner throughout the life of the application:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , el controlador es responsable de determinar qu&amp;eacute; vista mostrar en respuesta a cualquier acci&amp;oacute;n, incluso cuando se carga la aplicaci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto difiere de MVP, donde las acciones se enrutan a trav&amp;eacute;s de la Vista al Presentador. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En MVC, cada acci&amp;oacute;n en la Vista se correlaciona con una llamada a un Controlador junto con una acci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En la web, cada acci&amp;oacute;n implica una llamada a una URL en el otro lado del cual hay un controlador que responde. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una vez que el controlador haya completado su procesamiento, devolver&amp;aacute; la vista correcta. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La secuencia contin&amp;uacute;a de esa manera a lo largo de la vida de la aplicaci&amp;oacute;n:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9aa9b9e508319acacb670f8c7e75d029ce538b29" translate="yes" xml:space="preserve">
          <source>In those frameworks, the UI/HTML5/XAML, is aware of what property of the presenter each UI element displays, so when you bind a view to a presenter, the view looks for the properties and knows how to draw data from them and how to set them when a value is changed in the UI by the user.</source>
          <target state="translated">En esos marcos,el UIHTML5XAML,es consciente de qu√© propiedad del presentador muestra cada elemento de la interfaz de usuario,de modo que cuando vincula una vista a un presentador,la vista busca las propiedades y sabe c√≥mo extraer datos de ellas y c√≥mo configurarlas cuando el usuario cambia un valor en la interfaz de usuario.</target>
        </trans-unit>
        <trans-unit id="c01cde1f4d24cec2a304f26abfafadee545f5a75" translate="yes" xml:space="preserve">
          <source>Instead, have a look at &lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;Action-Domain-Responder&lt;/a&gt;.
In ADR, the &lt;strong&gt;Controller&lt;/strong&gt; gets an &lt;strong&gt;Action&lt;/strong&gt;, which will perform an operation in the &lt;strong&gt;Model/Domain&lt;/strong&gt;. So far, the same.
The difference is, it then collects that operation's response/data, and pass it to a &lt;strong&gt;Responder&lt;/strong&gt; (&lt;em&gt;eg:. &lt;code&gt;view()&lt;/code&gt;&lt;/em&gt;) for rendering.
When a new action is requested on the same component, the &lt;strong&gt;Controller&lt;/strong&gt; is called again, and the cycle repeats itself.
In ADR, there's &lt;strong&gt;no connection&lt;/strong&gt; between the Model/Domain and the View (&lt;em&gt;Reponser's response&lt;/em&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En cambio, eche un vistazo a &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Action-Domain-Responder&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . En ADR, el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Controlador&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; obtiene una &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Acci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que realizar&amp;aacute; una operaci&amp;oacute;n en el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Modelo / Dominio&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Hasta ahora, lo mismo. La diferencia es que luego recopila la respuesta / datos de esa operaci&amp;oacute;n y la pasa a un &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Respondedor&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;por ejemplo: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;view()&lt;/code&gt; &lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) para su representaci&amp;oacute;n. Cuando se solicita una nueva acci&amp;oacute;n en el mismo componente, &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se llama nuevamente &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;al &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;controlador&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y el ciclo se repite. En ADR, no &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;hay conexi&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; entre el Modelo / Dominio y la Vista ( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;respuesta del respondedor&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6bf0642feeed5b037f39e4a3637221ff5a6fd72a" translate="yes" xml:space="preserve">
          <source>It is the best explanation on the web I could find.</source>
          <target state="translated">Es la mejor explicaci√≥n que he podido encontrar en la web.</target>
        </trans-unit>
        <trans-unit id="c0e59ffc55e85fc20e92dbecba004d8fe98d71a0" translate="yes" xml:space="preserve">
          <source>MVC = Model-View-Controller</source>
          <target state="translated">MVC=Modelo-Vista-Controlador</target>
        </trans-unit>
        <trans-unit id="8a43b3b072a5b6199b18f294ed1df5f2594545ac" translate="yes" xml:space="preserve">
          <source>MVC is great, but the problem is that usually its controller per view. Controller A knows how to set fields of View A. If now, you want View A to display data of model B, you need Controller A to know model B, or you need Controller A to receive an object with an interface - which is like MVP only without the bindings, or you need to rewrite the UI set code in Controller B.</source>
          <target state="translated">El MVC es genial,pero el problema es que normalmente su controlador por vista.El controlador A sabe c√≥mo establecer los campos de la Vista A.Si ahora quiere que la Vista A muestre datos del modelo B,necesita el controlador A para conocer el modelo B,o necesita el controlador A para recibir un objeto con una interfaz,que es como MVP s√≥lo que sin los enlaces,o necesita reescribir el c√≥digo del conjunto de UI en el controlador B.</target>
        </trans-unit>
        <trans-unit id="1a1de6da1e685269460dfb990c3cd363bf1bf525" translate="yes" xml:space="preserve">
          <source>MVC stands for Model-View-Controller. Controller is responsible for creating models and rendering views with binding models.</source>
          <target state="translated">MVC significa Modelo-Vista-Controlador.El controlador es responsable de crear modelos y renderizar vistas con modelos vinculantes.</target>
        </trans-unit>
        <trans-unit id="2d7472c153b90e4439c448216cb3bca8ac60031b" translate="yes" xml:space="preserve">
          <source>MVC: the controller is in charge.</source>
          <target state="translated">El controlador est√° a cargo.</target>
        </trans-unit>
        <trans-unit id="666e13a62670ef5dd9c954b6ed8731d40b354b51" translate="yes" xml:space="preserve">
          <source>MVP = Model-View-Presenter</source>
          <target state="translated">MVP=Model View Presenter</target>
        </trans-unit>
        <trans-unit id="423ff2c6133e25b75601b0a4f1c6920983fb465b" translate="yes" xml:space="preserve">
          <source>MVP designs have the Presenter access the model and interact with the view.</source>
          <target state="translated">Los dise√±os del MVP hacen que el Presentador acceda al modelo e interact√∫e con la vista.</target>
        </trans-unit>
        <trans-unit id="0a13bcb6d62230c45fda925e5f2e54e195a1d9eb" translate="yes" xml:space="preserve">
          <source>MVP is &lt;em&gt;not&lt;/em&gt; necessarily a scenario where the View is in charge (see Taligent's MVP for example).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;necesariamente un escenario donde la Vista est&amp;aacute; a cargo (ver MVP de Taligent, por ejemplo).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="153e761e5f1c4625aab1927ce95ce39495fe46af" translate="yes" xml:space="preserve">
          <source>MVP stands for Model - View- Presenter. This came to a picture in early 2007 where Microsoft introduced Smart Client windows applications.</source>
          <target state="translated">MVP significa Modelo-Vista-Presentador.Esto lleg√≥ a una imagen a principios de 2007 donde Microsoft introdujo las aplicaciones de Windows Smart Client.</target>
        </trans-unit>
        <trans-unit id="593ddaf257dbd344ef6de1239417c3856337fd25" translate="yes" xml:space="preserve">
          <source>MVP tends to be a very natural pattern for achieving separated presentation in Web Forms. The reason is that the View is always created first by the ASP.NET runtime. You can &lt;a href=&quot;http://www.codeplex.com/websf/Wiki/View.aspx?title=MVPDocumentation&amp;amp;referringTitle=bundles&quot;&gt;find out more about both variants&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP tiende a ser un patr&amp;oacute;n muy natural para lograr presentaciones separadas en formularios web. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La raz&amp;oacute;n es que la Vista siempre se crea primero mediante el tiempo de ejecuci&amp;oacute;n ASP.NET. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.codeplex.com/websf/Wiki/View.aspx?title=MVPDocumentation&amp;amp;referringTitle=bundles&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;encontrar m&amp;aacute;s informaci&amp;oacute;n sobre ambas variantes&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8adb32e4dfc525bd9ed5519dd43628cdd9231191" translate="yes" xml:space="preserve">
          <source>MVP usually uses some sort of a binding framework, such as Microsoft WPF binding framework or various binding frameworks for HTML5 and Java.</source>
          <target state="translated">MVP suele utilizar alg√∫n tipo de marco vinculante,como el marco vinculante de Microsoft WPF o varios marcos vinculantes para HTML5 y Java.</target>
        </trans-unit>
        <trans-unit id="025ddd6c85eddf626d74a15567c91fb5750cadaf" translate="yes" xml:space="preserve">
          <source>MVP: the view is in charge.</source>
          <target state="translated">MVP:la vista est√° a cargo.</target>
        </trans-unit>
        <trans-unit id="9a44ef615916a4fab8a8e8aac039ef0308295c8d" translate="yes" xml:space="preserve">
          <source>Model-View-Controller</source>
          <target state="translated">Model-View-Controller</target>
        </trans-unit>
        <trans-unit id="4d0814805419c9f47f02998803c65a41d83dd0cf" translate="yes" xml:space="preserve">
          <source>Model-View-Presenter</source>
          <target state="translated">Model-View-Presenter</target>
        </trans-unit>
        <trans-unit id="f9731cd9f1b7c0cad88b11ca9a0dfbb97b762976" translate="yes" xml:space="preserve">
          <source>My experience tells me that moving  a team from web forms to MVP and then from MVP to MVC is relatively easy; moving from web forms to MVC is more difficult.</source>
          <target state="translated">Mi experiencia me dice que pasar un equipo de formularios web a MVP y luego de MVP a MVC es relativamente f√°cil;pasar de formularios web a MVC es m√°s dif√≠cil.</target>
        </trans-unit>
        <trans-unit id="9a7dad07badf4ed27fd0ee61735b1ffe44f86426" translate="yes" xml:space="preserve">
          <source>My humble short view: MVP is for large scales, and MVC for tiny scales. With MVC, I sometime feel the V and the C may be seen a two sides of a single indivisible component rather directly bound to M, and one inevitably falls to this when going down‚Äëto shorter scales, like UI controls and base widgets. At this level of granularity, MVP makes little sense. When one on the contrary go to larger scales, proper interface becomes more important, the same with unambiguous assignment of responsibilities, and here comes MVP.</source>
          <target state="translated">Mi humilde visi√≥n corta:MVP es para las grandes escalas,y MVC para las escalas peque√±as.Con MVC,a veces siento que la V y la C pueden verse como dos lados de un √∫nico componente indivisible,m√°s bien directamente ligados a la M,y uno inevitablemente cae en esto cuando se baja a escalas m√°s cortas,como los controles de UI y los widgets de base.A este nivel de granularidad,el MVP tiene poco sentido.Cuando uno por el contrario va a escalas m√°s grandes,la interfaz adecuada se vuelve m√°s importante,lo mismo con la asignaci√≥n inequ√≠voca de responsabilidades,y aqu√≠ viene MVP.</target>
        </trans-unit>
        <trans-unit id="7d6398b6228fc97ad6cbcd6c4e420ab540fdc39c" translate="yes" xml:space="preserve">
          <source>On the other hand, this scale rule of a thumb, may weight very little when the platform characteristics favours some kind of relations between the components, like with the web, where it seems to be easier to implement MVC, more than MVP.</source>
          <target state="translated">Por otra parte,esta regla de la balanza,puede pesar muy poco cuando las caracter√≠sticas de la plataforma favorecen alg√∫n tipo de relaci√≥n entre los componentes,como con la red,donde parece ser m√°s f√°cil implementar MVC,m√°s que MVP.</target>
        </trans-unit>
        <trans-unit id="8f3b62032d27bb14f7876f375a718a8b1bd1b65d" translate="yes" xml:space="preserve">
          <source>One other big difference about MVC is that the View does not directly bind to the Model. The view simply renders, and is completely stateless. In implementations of MVC the View usually will not have any logic in the code behind. This is contrary to MVP where it is absolutely necessary because, if the View does not delegate to the Presenter, it will never get called.</source>
          <target state="translated">Otra gran diferencia de MVC es que la Vista no se une directamente al Modelo.La Vista simplemente se representa,y es completamente ap√°trida.En las implementaciones de MVC,la Vista no suele tener ninguna l√≥gica en el c√≥digo que hay detr√°s.Esto es contrario a MVP donde es absolutamente necesario porque,si la Vista no delega en el Presentador,nunca ser√° llamada.</target>
        </trans-unit>
        <trans-unit id="9d85e7cc0708b67b551018cc07382f91d292f50e" translate="yes" xml:space="preserve">
          <source>One other pattern to look at is the &lt;strong&gt;Presentation Model&lt;/strong&gt; pattern. In this pattern there is no Presenter. Instead the View binds directly to a Presentation Model. The Presentation Model is a Model crafted specifically for the View. This means this Model can expose properties that one would never put on a domain model as it would be a violation of separation-of-concerns. In this case, the Presentation Model binds to the domain model, and may subscribe to events coming from that Model. The View then subscribes to events coming from the Presentation Model and updates itself accordingly. The Presentation Model can expose commands which the view uses for invoking actions. The advantage of this approach is that you can essentially remove the code-behind altogether as the PM completely encapsulates all of the behaviour for the view. This pattern is a very strong candidate for use in WPF applications and is also called &lt;a href=&quot;http://msdn.microsoft.com/en-us/magazine/dd419663.aspx&quot;&gt;Model-View-ViewModel&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Otro patr&amp;oacute;n a tener en cuenta es el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Modelo de presentaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;modelo. En este patr&amp;oacute;n no hay presentador. En cambio, la vista se une directamente a un modelo de presentaci&amp;oacute;n. El modelo de presentaci&amp;oacute;n es un modelo dise&amp;ntilde;ado espec&amp;iacute;ficamente para la vista. Esto significa que este modelo puede exponer propiedades que uno nunca pondr&amp;iacute;a en un modelo de dominio, ya que ser&amp;iacute;a una violaci&amp;oacute;n de la separaci&amp;oacute;n de preocupaciones. En este caso, el modelo de presentaci&amp;oacute;n se une al modelo de dominio y puede suscribirse a eventos provenientes de ese modelo. Luego, la Vista se suscribe a los eventos que provienen del Modelo de presentaci&amp;oacute;n y se actualiza en consecuencia. El Modelo de presentaci&amp;oacute;n puede exponer comandos que la vista utiliza para invocar acciones. La ventaja de este enfoque es que esencialmente puede eliminar el c&amp;oacute;digo subyacente por completo ya que el PM encapsula completamente todo el comportamiento de la vista.Este patr&amp;oacute;n es un candidato muy fuerte para su uso en aplicaciones WPF y tambi&amp;eacute;n se llama&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/magazine/dd419663.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Modelo-Vista-VistaModelo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed38d909f58dd9ee16876dc1d8c2b62c011b11f7" translate="yes" xml:space="preserve">
          <source>Presentation Model</source>
          <target state="translated">Modelo de presentaci√≥n</target>
        </trans-unit>
        <trans-unit id="ea4498215d645ab272e3b3846196223e2f0768f4" translate="yes" xml:space="preserve">
          <source>Pro: by leveraging databinding the amount of code is reduced.</source>
          <target state="translated">Pro:al apalancar la base de datos la cantidad de c√≥digo se reduce.</target>
        </trans-unit>
        <trans-unit id="2f71b21ad625425383fdafcef7b1c6b4b973b516" translate="yes" xml:space="preserve">
          <source>Pro: maximum testability surface; clean separation of the View and Model</source>
          <target state="translated">Pro:superficie de prueba m√°xima;separaci√≥n limpia de la Vista y el Modelo</target>
        </trans-unit>
        <trans-unit id="c61fe2f6ea22910c80db69971f026c3b36b9e979" translate="yes" xml:space="preserve">
          <source>So, if for example, the model is a car, then the presenter is some sort of a car presenter, exposes the car properties (year, maker, seats, etc.) to the view. The view knows that the text field called 'car maker' needs to display the presenter Maker property.</source>
          <target state="translated">As√≠,si por ejemplo,el modelo es un coche,entonces el presentador es una especie de presentador de coches,expone las propiedades del coche (a√±o,fabricante,asientos,etc.)a la vista.La vista sabe que el campo de texto llamado &quot;fabricante de coches&quot; necesita mostrar la propiedad del fabricante del presentador.</target>
        </trans-unit>
        <trans-unit id="3653a3200fb622278cb1e5b02db6ae3aff3eaf82" translate="yes" xml:space="preserve">
          <source>Some people keep forgetting, that MVC &lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller#History&quot;&gt;was created in the late 70&quot;&lt;/a&gt;, and that the Web was only created in late 80&quot;/early 90&quot;.
MVC wasn't originally created for the Web, but for Desktop applications instead, where the Controller, Model and View would co-exist together.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Algunas personas se olvidan de que MVC &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller#History&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se cre&amp;oacute; a fines de los 70 &quot;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y que la Web solo se cre&amp;oacute; a fines de los 80&quot; / principios de los 90 &quot;. MVC no se cre&amp;oacute; originalmente para la Web, sino para aplicaciones de escritorio, donde el controlador , Modelo y Vista coexistir&amp;iacute;an juntos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b036d150ca2081e3f49a7a021ebf2382e3cd9bbe" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Presenter&lt;/strong&gt; is the &amp;ldquo;middle-man&amp;rdquo; (played by the controller in MVC) and has references to both, view and model. &lt;strong&gt;Please note that the word &amp;ldquo;Model&amp;rdquo;&lt;/strong&gt; is misleading. It should rather be &lt;strong&gt;business logic that retrieves or manipulates a Model&lt;/strong&gt;. For instance: If you have a database storing User in a database table and your View wants to display a list of users, then the Presenter would have a reference to your database business logic (like a DAO) from where the Presenter will query a list of Users.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;presentador&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es el &quot;intermediario&quot; (interpretado por el controlador en MVC) y tiene referencias tanto a la vista como al modelo. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que la palabra &quot;Modelo&quot;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es enga&amp;ntilde;osa. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;M&amp;aacute;s bien deber&amp;iacute;a ser &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la l&amp;oacute;gica de negocios que recupera o manipula un modelo&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo: si tiene una base de datos que almacena al Usuario en una tabla de base de datos y su Vista desea mostrar una lista de usuarios, entonces el Presentador tendr&amp;aacute; una referencia a la l&amp;oacute;gica comercial de su base de datos (como un DAO) desde donde el Presentador consultar&amp;aacute; una lista de usuarios.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7ce9069d0933040f65e27892dbc1478ccd50468c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;model&lt;/strong&gt; is the data that will be displayed in the view (user interface).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;modelo&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son los datos que se mostrar&amp;aacute;n en la vista (interfaz de usuario).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9538b9f662cea4b1498ce78dfd7271b9bce9d9d9" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;view&lt;/strong&gt; is an interface that displays data (the model) and routes user commands (events) to the Presenter to act upon that data. The view usually has a reference to its Presenter.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;vista&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una interfaz que muestra datos (el modelo) y enruta los comandos del usuario (eventos) al Presentador para actuar sobre esos datos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La vista generalmente tiene una referencia a su presentador.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f8cadfc7a7df940200c9941e44f92d7dc05189bb" translate="yes" xml:space="preserve">
          <source>The controller is created or accessed based on some event/request. The controller then creates the appropriate view and interacts with the model to further configure the view. It boils down to: the controller creates and manages the view; the view is slave to the controller. The view does not know about the controller.</source>
          <target state="translated">El controlador es creado o accedido en base a alguna petici√≥n de evento.El controlador crea entonces la vista apropiada e interact√∫a con el modelo para configurar a√∫n m√°s la vista.Todo se reduce a:el controlador crea y gestiona la vista;la vista es esclava del controlador.La vista no conoce al controlador.</target>
        </trans-unit>
        <trans-unit id="8bcabe0f3f82d13b623b2c7d77f164d767970a86" translate="yes" xml:space="preserve">
          <source>The distinction made is that in an MVC application traditionally has the view and the controller interact with the model, but not with each other.</source>
          <target state="translated">La distinci√≥n que se hace es que en una aplicaci√≥n MVC tradicionalmente tiene la vista y el controlador interact√∫an con el modelo,pero no entre s√≠.</target>
        </trans-unit>
        <trans-unit id="45d8959b50e1ab78500a4af2828aefe5ad3a0d55" translate="yes" xml:space="preserve">
          <source>The input begins with the View, not the Presenter.
There is a one-to-one mapping between the View and the associated Presenter.
The View holds a reference to the Presenter. The Presenter is also reacting to events being triggered from the View, so its aware of the View its associated with.
The Presenter updates the View based on the requested actions it performs on the Model, but the View is not Model aware.</source>
          <target state="translated">La entrada comienza con la Vista,no con el Presentador.Hay un mapeo uno a uno entre la Vista y el Presentador asociado.La Vista contiene una referencia al Presentador.El Presentador tambi√©n reacciona a los eventos que se activan desde la Vista,por lo que es consciente de la Vista a la que est√° asociado.El Presentador actualiza la Vista en base a las acciones solicitadas que realiza en el Modelo,pero la Vista no es consciente del Modelo.</target>
        </trans-unit>
        <trans-unit id="301ad9ee0376a5983043321774e9445004e67361" translate="yes" xml:space="preserve">
          <source>The input is directed at the Controller first, not the view. That input might be coming from a user interacting with a page, but it could also be from simply entering a specific url into a browser. In either case, its a Controller that is interfaced with to kick off some functionality.
There is a many-to-one relationship between the Controller and the View. That&amp;rsquo;s because a single controller may select different views to be rendered based on the operation being executed.
Note the one way arrow from Controller to View. This is because the View doesn&amp;rsquo;t have any knowledge of or reference to the controller.
The Controller does pass back the Model, so there is knowledge between the View and the expected Model being passed into it, but not the Controller serving it up.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La entrada se dirige primero al controlador, no a la vista. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esa entrada podr&amp;iacute;a provenir de un usuario que interact&amp;uacute;a con una p&amp;aacute;gina, pero tambi&amp;eacute;n podr&amp;iacute;a ser simplemente ingresando una URL espec&amp;iacute;fica en un navegador. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En cualquier caso, es un controlador con el que se conecta para iniciar algunas funciones. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Existe una relaci&amp;oacute;n de muchos a uno entre el Controlador y la Vista. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto se debe a que un solo controlador puede seleccionar diferentes vistas para representar en funci&amp;oacute;n de la operaci&amp;oacute;n que se ejecuta. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta la flecha unidireccional del controlador a la vista. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto se debe a que la Vista no tiene ning&amp;uacute;n conocimiento o referencia del controlador. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El Controlador devuelve el Modelo, por lo que hay conocimiento entre la Vista y el Modelo esperado que se le pasa, pero no el Controlador que lo sirve.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b13f6ab6d7ad93ea600a87ab843ab5508280a401" translate="yes" xml:space="preserve">
          <source>The second flavor of MVP is the Supervising Controller. In that case your View might have a property called Customer, which then again is databound to the UI widgets. You don't have to think about synchronizing and micro-manage the view, and the Supervising Controller can step in and help when needed, for instance with compled interaction logic.</source>
          <target state="translated">El segundo sabor de MVP es el Controlador Supervisor.En ese caso,su vista puede tener una propiedad llamada Cliente,que a su vez es la base de datos de los widgets de la interfaz de usuario.No tienes que pensar en sincronizar y microgestionar la vista,y el Controlador Supervisor puede intervenir y ayudar cuando sea necesario,por ejemplo con la l√≥gica de interacci√≥n complicada.</target>
        </trans-unit>
        <trans-unit id="5a64b0bdd2b3ea781381907e13e2c0da16747d45" translate="yes" xml:space="preserve">
          <source>The simplest answer is how the view interacts with the model. In MVP the view is updated by the presenter, which acts as as intermediary between the view and the model. The presenter takes the input from the view, which retrieves the data from the model and then performs any business logic required and then updates the view. In MVC the model updates the view directly rather than going back through the controller.</source>
          <target state="translated">La respuesta m√°s simple es c√≥mo la vista interact√∫a con el modelo.En MVP la vista es actualizada por el presentador,que act√∫a como intermediario entre la vista y el modelo.El presentador toma la entrada de la vista,que recupera los datos del modelo y luego realiza cualquier l√≥gica de negocio necesaria y luego actualiza la vista.En MVC el modelo actualiza la vista directamente en lugar de volver a trav√©s del controlador.</target>
        </trans-unit>
        <trans-unit id="6a970a3299eb9cfc3156b88ba470bccec8c0ca28" translate="yes" xml:space="preserve">
          <source>The third &quot;flavor&quot; of MVP (or someone would perhaps call it a separate pattern) is the Presentation Model (or sometimes referred to Model-View-ViewModel). Compared to the MVP you &quot;merge&quot; the M and the P into one class. You have your customer object which your UI widgets is data bound to, but you also have additional UI-spesific fields like &quot;IsButtonEnabled&quot;, or &quot;IsReadOnly&quot;, etc.</source>
          <target state="translated">El tercer &quot;sabor&quot; del MVP (o alguien quiz√°s lo llamar√≠a un patr√≥n separado)es el Modelo de Presentaci√≥n (o a veces referido a Model-View-ViewModel).Comparado con el MVP &quot;fusiona&quot; la M y la P en una sola clase.Tiene su objeto de cliente al que sus widgets de interfaz de usuario est√°n vinculados por datos,pero tambi√©n tiene campos adicionales espec√≠ficos de interfaz de usuario como &quot;IsButtonEnabled&quot;,o &quot;IsReadOnly&quot;,etc.</target>
        </trans-unit>
        <trans-unit id="f669265be325235de5f4cc1ec139e56287acf4e4" translate="yes" xml:space="preserve">
          <source>The view is the initiator for user inputs and then delegates the events to the Presenter and the presenter handles event bindings and gets data from models.</source>
          <target state="translated">La vista es el iniciador de las entradas del usuario y luego delega los eventos al Presentador y el presentador se encarga de la vinculaci√≥n de los eventos y obtiene datos de los modelos.</target>
        </trans-unit>
        <trans-unit id="d39997851ece3fcb75c76f9050d8a0121c1ecce4" translate="yes" xml:space="preserve">
          <source>The view, in most cases, creates its presenter. The presenter will interact with the model and manipulate the view through an interface. The view will sometimes interact with the presenter, usually through some interface.  This comes down to implementation; do you want the view to call methods on the presenter or do you want the view to have events the presenter listens to? It boils down to this: The view knows about the presenter. The view delegates to the presenter.</source>
          <target state="translated">La vista,en la mayor√≠a de los casos,crea su presentador.El presentador interactuar√° con el modelo y manipular√° la vista a trav√©s de una interfaz.La vista a veces interactuar√° con el presentador,generalmente a trav√©s de alguna interfaz.Esto se reduce a la implementaci√≥n;¬øquieres que la vista llame m√©todos al presentador o quieres que la vista tenga eventos que el presentador escuche? Todo se reduce a esto:La vista conoce al presentador.La vista delega en el presentador.</target>
        </trans-unit>
        <trans-unit id="27757769008ceb477f7e05a0cce8b21ba034600f" translate="yes" xml:space="preserve">
          <source>There are many answers to the question, but I felt there is a need for some really simple answer clearly comparing the two. Here's the discussion I made up when a user searches for a movie name in an MVP and MVC app:</source>
          <target state="translated">Hay muchas respuestas a la pregunta,pero sent√≠ que se necesitaba una respuesta realmente simple que comparara claramente las dos.Esta es la discusi√≥n que invent√© cuando un usuario busca el nombre de una pel√≠cula en una aplicaci√≥n MVP y MVC:</target>
        </trans-unit>
        <trans-unit id="a92db89ca0249089c13b11f20ed6580da41fbc47" translate="yes" xml:space="preserve">
          <source>There are many versions of MVC, this answer is about the original MVC in Smalltalk. In brief, it is</source>
          <target state="translated">Hay muchas versiones de MVC,esta respuesta es sobre el MVC original en Smalltalk.En resumen,es</target>
        </trans-unit>
        <trans-unit id="82ed275cafa23c2ea8e8869eeae8eea58c31d287" translate="yes" xml:space="preserve">
          <source>There is &lt;a href=&quot;https://www.youtube.com/watch?v=WpkDN78P884&amp;amp;feature=youtu.be&amp;amp;t=29m1s&quot;&gt;this&lt;/a&gt; nice video from Uncle Bob where he briefly explains &lt;strong&gt;MVC&lt;/strong&gt; &amp;amp; &lt;strong&gt;MVP&lt;/strong&gt; at the end.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No es &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=WpkDN78P884&amp;amp;feature=youtu.be&amp;amp;t=29m1s&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;este&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; bonito v&amp;iacute;deo del T&amp;iacute;o Bob donde explica brevemente &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; al final.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2387b03e9c36c2f329fc383807a6d7fc068372d9" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff921080.aspx&quot;&gt;MSDN article about the Presentation Model&lt;/a&gt; and a section in the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707819.aspx&quot;&gt;Composite Application Guidance for WPF&lt;/a&gt; (former Prism) about &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707862.aspx&quot;&gt;Separated Presentation Patterns&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hay un &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff921080.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;art&amp;iacute;culo de MSDN sobre el Modelo de presentaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y una secci&amp;oacute;n en la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707819.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Gu&amp;iacute;a de aplicaci&amp;oacute;n compuesta para WPF&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (antiguo Prisma) sobre &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc707862.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Patrones de presentaci&amp;oacute;n separados&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7ee276ebb5fe1caeea00a1b1761430f0ba014210" translate="yes" xml:space="preserve">
          <source>There is a discussion &lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/10/31/development-trivial-pursuit-the-difference-between-mvc-and-the-different-flavors-of-mvp.aspx&quot;&gt;here&lt;/a&gt; regarding the differences between MVC vs MVP.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hay una discusi&amp;oacute;n &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://codebetter.com/blogs/jeremy.miller/archive/2007/10/31/development-trivial-pursuit-the-difference-between-mvc-and-the-different-flavors-of-mvp.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aqu&amp;iacute;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con respecto a las diferencias entre MVC vs MVP.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7699ceb8018ddb15756349dc26c7ea4e42bd17a7" translate="yes" xml:space="preserve">
          <source>There is also &lt;a href=&quot;http://gexiaoguo.github.io/MVC,-MVP-and-MVVM/&quot;&gt;a complete comparison of MVC, MVP and MVVM here&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n hay &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://gexiaoguo.github.io/MVC,-MVP-and-MVVM/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;una comparaci&amp;oacute;n completa de MVC, MVP y MVVM aqu&amp;iacute;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="732e33e57cc89c110727e2ee01bc05e383b35a3b" translate="yes" xml:space="preserve">
          <source>They are fairly similar in concept, folks initialize the Presenter/Controller differently depending on taste.</source>
          <target state="translated">Son bastante similares en concepto,la gente inicializa el PresentadorControlador de manera diferente dependiendo del gusto.</target>
        </trans-unit>
        <trans-unit id="9e06241d8aa910ec172be9a0d74cc298f0b8f2e2" translate="yes" xml:space="preserve">
          <source>They each addresses different problems and can even be combined together to have something like below</source>
          <target state="translated">Cada uno de ellos aborda diferentes problemas e incluso pueden combinarse para tener algo como lo siguiente</target>
        </trans-unit>
        <trans-unit id="47cadcbcc9b8934f4ae08c3f71c0a82e97d39b6a" translate="yes" xml:space="preserve">
          <source>This binding framework, if you strip it down, it's actually the controller :-)</source>
          <target state="translated">Este marco de encuadernaci√≥n,si lo desmontas,es en realidad el controlador :-)</target>
        </trans-unit>
        <trans-unit id="38e65116cea7797e3e3b184268328e27c9889ae8" translate="yes" xml:space="preserve">
          <source>This is an oversimplification of the many variants of these design patterns, but this is how I like to think about the differences between the two.</source>
          <target state="translated">Esta es una simplificaci√≥n excesiva de las muchas variantes de estos patrones de dise√±o,pero as√≠ es como me gusta pensar en las diferencias entre los dos.</target>
        </trans-unit>
        <trans-unit id="f38b8d429e873aab62370e55b7446e42b7d50843" translate="yes" xml:space="preserve">
          <source>This talk &lt;a href=&quot;https://www.youtube.com/watch?v=i1-7S-RxfvQ&quot;&gt;droidcon NYC 2017 - Clean app design with Architecture Components&lt;/a&gt; clarifies it</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta charla &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=i1-7S-RxfvQ&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;droidcon NYC 2017: el dise&amp;ntilde;o limpio de la aplicaci&amp;oacute;n con componentes de arquitectura lo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; aclara&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="545847bd273b1f49941092ff8d1fdbab224676c5" translate="yes" xml:space="preserve">
          <source>To be perfectly frank, I think the underlying concerns of MVC hold true for any MVP implementation and the differences are almost entirely semantic. As long as you are following separation of concerns between the view (that displays the data), the controller (that initialises and controls user interaction) and the model (the underlying data and/or services)) then you are achieving the benefits of MVC. If you are achieving the benefits then who really cares whether your pattern is MVC, MVP or Supervising Controller? The only &lt;em&gt;real&lt;/em&gt; pattern remains as MVC, the rest are just differing flavours of it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para ser completamente franco, creo que las preocupaciones subyacentes de MVC son ciertas para cualquier implementaci&amp;oacute;n de MVP y las diferencias son casi completamente sem&amp;aacute;nticas. Mientras est&amp;eacute; siguiendo la separaci&amp;oacute;n de preocupaciones entre la vista (que muestra los datos), el controlador (que inicializa y controla la interacci&amp;oacute;n del usuario) y el modelo (los datos y / o servicios subyacentes), entonces est&amp;aacute; logrando los beneficios de MVC . Si est&amp;aacute; logrando los beneficios, &amp;iquest;a qui&amp;eacute;n le importa realmente si su patr&amp;oacute;n es MVC, MVP o Supervising Controller? El &amp;uacute;nico &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;patr&amp;oacute;n &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;real&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sigue siendo MVC, el resto son solo sabores diferentes.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="482730aa6dd38ce89c84c44cdb10a85967c85887" translate="yes" xml:space="preserve">
          <source>To make this a little more clear, let's imagine a simple shopping list app. All we want is a list of the name, quantity and price of each item we need to buy this week. Below we'll describe how we could implement some of this functionality using MVC.</source>
          <target state="translated">Para que esto quede un poco m√°s claro,imaginemos una simple aplicaci√≥n de lista de compras.Todo lo que queremos es una lista con el nombre,la cantidad y el precio de cada art√≠culo que necesitamos comprar esta semana.A continuaci√≥n describiremos c√≥mo podr√≠amos implementar algunas de estas funcionalidades usando MVC.</target>
        </trans-unit>
        <trans-unit id="36881632660b34cfeb60c442c72bb50a89a4b94b" translate="yes" xml:space="preserve">
          <source>To perhaps get an idea of the ASP.NET MVC distinction from MVP, check out &lt;a href=&quot;http://www.hanselman.com/blog/ASPNETMVCSessionAtMix08TDDAndMvcMockHelpers.aspx&quot;&gt;this MIX presentation&lt;/a&gt; by Scott Hanselman.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para tener una idea de la distinci&amp;oacute;n ASP.NET MVC de MVP, consulte &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.hanselman.com/blog/ASPNETMVCSessionAtMix08TDDAndMvcMockHelpers.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esta presentaci&amp;oacute;n MIX&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de Scott Hanselman.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f0d5780f10eb00de3194e1ce64c16ffa7b1a215a" translate="yes" xml:space="preserve">
          <source>Two primary variations</source>
          <target state="translated">Dos variaciones primarias</target>
        </trans-unit>
        <trans-unit id="d8e5a17a94be3110a5c8a6cb2926e409bcfdd2cb" translate="yes" xml:space="preserve">
          <source>User: Click click &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Usuario: Haga clic, haga clic ...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e2022cac9d87c721fd2ffcf2c90cf08cfbdf0777" translate="yes" xml:space="preserve">
          <source>User: I just clicked on the search button &amp;hellip;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Usuario: Acabo de hacer clic en el bot&amp;oacute;n de b&amp;uacute;squeda ...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="caf99ef190bd9af7d81997674d54ae10c2d41178" translate="yes" xml:space="preserve">
          <source>Usually view to presenter map one to one. Complex views may have multi presenters.</source>
          <target state="translated">Por lo general,ver al presentador mapa uno a uno.Las vistas complejas pueden tener m√∫ltiples presentadores.</target>
        </trans-unit>
        <trans-unit id="95de390211342cdae2c03da39ba48cd824c0d405" translate="yes" xml:space="preserve">
          <source>View event binding will be implemented in the Presenter from a view interface.</source>
          <target state="translated">La vinculaci√≥n de eventos de visualizaci√≥n se implementar√° en el Presentador desde una interfaz de visualizaci√≥n.</target>
        </trans-unit>
        <trans-unit id="bfb597da495d126f84a30cf8e12a2f5a5589ec42" translate="yes" xml:space="preserve">
          <source>View is more loosely coupled to the model. The presenter is responsible for binding the model to the view.</source>
          <target state="translated">La vista est√° m√°s libremente acoplada al modelo.El presentador es responsable de unir el modelo a la vista.</target>
        </trans-unit>
        <trans-unit id="0c4a2a610d14eb9943f32d71e4084d55a3fc4f4c" translate="yes" xml:space="preserve">
          <source>What are MVP and MVC and what is the difference</source>
          <target state="translated">¬øQu√© son MVP y MVC y cu√°l es la diferencia</target>
        </trans-unit>
        <trans-unit id="b87b976f1b7223ebb2c16be5928ce8f2d8c3707b" translate="yes" xml:space="preserve">
          <source>What is the &lt;strong&gt;difference&lt;/strong&gt; between &lt;strong&gt;MVC&lt;/strong&gt; and &lt;strong&gt;MVP&lt;/strong&gt; patterns?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Cu&amp;aacute;l es la &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;diferencia&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; entre los &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;patrones &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="986d2dd63e33a810f964fed17c9a33c11b99c6f1" translate="yes" xml:space="preserve">
          <source>What issues do these patterns address?</source>
          <target state="translated">¬øQu√© cuestiones abordan estas pautas?</target>
        </trans-unit>
        <trans-unit id="4015b37baf62151fb930c9a9d0fd14a4a901d977" translate="yes" xml:space="preserve">
          <source>When looking beyond the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rapid_application_development&quot;&gt;RAD&lt;/a&gt; (drag-drop and configure) way of building user interfaces that many tools encourage you are likely to come across three design patterns called &lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;Model-View-Controller&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter&quot;&gt;Model-View-Presenter&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Model_View_ViewModel&quot;&gt;Model-View-ViewModel&lt;/a&gt;. My question has three parts to it:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Al mirar m&amp;aacute;s all&amp;aacute; de la forma &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Rapid_application_development&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;RAD&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (arrastrar, soltar y configurar) de construir interfaces de usuario, muchas herramientas le alientan a encontrar tres patrones de dise&amp;ntilde;o llamados &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model-View-Controller&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model-View-Presenter&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Model_View_ViewModel&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Model-View-ViewModel&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Mi pregunta tiene tres partes:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eaf99e74a9572f632c4513afb3ddf3f4b76892ce" translate="yes" xml:space="preserve">
          <source>When using Passive View, your View typically implement a fine-grained interface with properties mapping more or less directly to the underlaying UI widget. For instance, you might have a ICustomerView with properties like Name and Address.</source>
          <target state="translated">Cuando se utiliza la Vista pasiva,la Vista suele implementar una interfaz de grano fino con mapeo de propiedades m√°s o menos directo al widget de interfaz de usuario subyacente.Por ejemplo,puedes tener una ICustomerView con propiedades como Nombre y Direcci√≥n.</target>
        </trans-unit>
        <trans-unit id="1b6eedfb17289a07676cf342f01265dd1b006b7d" translate="yes" xml:space="preserve">
          <source>You can then bind to the view many different types of presenter, all must have Maker property - it can be of a plane, train or what ever , the view doesn't care. The view draws data from the presenter - no matter which - as long as it implements an agreed interface.</source>
          <target state="translated">Entonces puedes vincular a la vista muchos tipos diferentes de presentador,todos deben tener la propiedad del Creador-puede ser de un avi√≥n,tren o lo que sea,a la vista no le importa.La vista obtiene datos del presentador-no importa cu√°l-siempre y cuando implemente una interfaz acordada.</target>
        </trans-unit>
        <trans-unit id="fe22486aea6886979af6e1aace2f38d65cce7f51" translate="yes" xml:space="preserve">
          <source>You forgot about &lt;strong&gt;Action-Domain-Responder&lt;/strong&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;ADR&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Se olvid&amp;oacute; de &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Action-Domain-Responder&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ( &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ADR&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11e7697e759021e33983122c07fc8fc869e0b0da" translate="yes" xml:space="preserve">
          <source>Your Presenter class will talk to the model and &quot;map&quot; it to the view. This approach is called the &quot;Passive View&quot;. The benefit is that the view is easy to test, and it is easier to move between UI platforms (Web, Windows/XAML, etc.). The disadvantage is that you can't leverage things like databinding (which is &lt;em&gt;really&lt;/em&gt; powerful in frameworks like &lt;a href=&quot;http://en.wikipedia.org/wiki/Windows_Presentation_Foundation&quot;&gt;WPF&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Silverlight&quot;&gt;Silverlight&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Su clase de presentador hablar&amp;aacute; con el modelo y lo &quot;asignar&amp;aacute;&quot; a la vista. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Este enfoque se denomina &quot;Vista pasiva&quot;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El beneficio es que la vista es f&amp;aacute;cil de probar y es m&amp;aacute;s f&amp;aacute;cil moverse entre plataformas de interfaz de usuario (Web, Windows / XAML, etc.). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La desventaja es que no puede aprovechar cosas como el enlace de datos (que es &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;realmente&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; poderoso en marcos como &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Windows_Presentation_Foundation&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;WPF&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Silverlight&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Silverlight&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34235fb0fc29596b8a27e0699f118207159cd0e5" translate="yes" xml:space="preserve">
          <source>Your implementation might look something like this:</source>
          <target state="translated">Su implementaci√≥n podr√≠a parecerse a algo como esto:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
