<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/204476">
    <body>
      <group id="204476">
        <trans-unit id="839e4a2006b278a93c4dc0f1936567078302c3f3" translate="yes" xml:space="preserve">
          <source>&amp;hellip;</source>
          <target state="translated">&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="f63367f1516d04e6d4576f54a6d715fa5519616b" translate="yes" xml:space="preserve">
          <source>&amp;mdash; a function of () returning int and</source>
          <target state="translated">- una funci&amp;oacute;n de () que devuelve int y</target>
        </trans-unit>
        <trans-unit id="e3f10b4fa0118c5d90b758f3a7a22ecd6eddcb20" translate="yes" xml:space="preserve">
          <source>&amp;mdash; a function of (int, pointer to pointer to char) returning int</source>
          <target state="translated">- una funci&amp;oacute;n de (int, puntero a puntero a char) que devuelve int</target>
        </trans-unit>
        <trans-unit id="de2b84f7b4965ccad1f31acc3adcae74954902d4" translate="yes" xml:space="preserve">
          <source>&amp;para;1 A program shall contain a global function called main, which is the designated start of the program. [...]</source>
          <target state="translated">&amp;para;1 Un programa contendr&amp;aacute; una funci&amp;oacute;n global llamada main, que es el inicio designado del programa. [...]</target>
        </trans-unit>
        <trans-unit id="fba079ec46d6590faa38ad6852c15693de356522" translate="yes" xml:space="preserve">
          <source>&amp;para;1 In a hosted environment, the main function receives a third argument, &lt;code&gt;char *envp[]&lt;/code&gt;,
  that points to a null-terminated array of pointers to &lt;code&gt;char&lt;/code&gt;, each of which points to a string
  that provides information about the environment for this execution of the program (5.1.2.2.1).</source>
          <target state="translated">&amp;para;1 En un entorno alojado, la funci&amp;oacute;n principal recibe un tercer argumento, &lt;code&gt;char *envp[]&lt;/code&gt; , que apunta a una matriz de punteros terminados en nulo a &lt;code&gt;char&lt;/code&gt; , cada uno de los cuales apunta a una cadena que proporciona informaci&amp;oacute;n sobre el entorno para esta ejecuci&amp;oacute;n del programa (5.1.2.2.1).</target>
        </trans-unit>
        <trans-unit id="268bf348aa4cc2e0b88457c3f6e444329c666667" translate="yes" xml:space="preserve">
          <source>&amp;para;2 An implementation shall not predefine the main function. This function shall not be overloaded. It shall
  have a return type of type int, but otherwise its type is implementation defined.
  All implementations
  shall allow both of the following definitions of main:</source>
          <target state="translated">&amp;para;2 Una implementaci&amp;oacute;n no predefinir&amp;aacute; la funci&amp;oacute;n principal. Esta funci&amp;oacute;n no se sobrecargar&amp;aacute;. Tendr&amp;aacute; un tipo de retorno de tipo int, pero de lo contrario su tipo est&amp;aacute; definido de implementaci&amp;oacute;n. Todas las implementaciones deber&amp;aacute;n permitir las dos definiciones siguientes de main:</target>
        </trans-unit>
        <trans-unit id="f725c7d6a718deeff027d0b7dca43053111038cf" translate="yes" xml:space="preserve">
          <source>&amp;para;3 The function &lt;code&gt;main&lt;/code&gt; shall not be used within a program. The linkage (3.5) of &lt;code&gt;main&lt;/code&gt; is implementation-defined. [...]</source>
          <target state="translated">&amp;para;3 La funci&amp;oacute;n &lt;code&gt;main&lt;/code&gt; no se utilizar&amp;aacute; dentro de un programa. El enlace (3.5) de &lt;code&gt;main&lt;/code&gt; est&amp;aacute; definido por la implementaci&amp;oacute;n. [...]</target>
        </trans-unit>
        <trans-unit id="6b25271533fe3e52213549f62d7343ca3360fd44" translate="yes" xml:space="preserve">
          <source>&amp;para;5 A &lt;em&gt;strictly conforming program&lt;/em&gt; shall use only those features of the language and library specified in this International Standard.&lt;sup&gt;3)&lt;/sup&gt; It shall not produce output dependent on any unspecified, undefined, or implementation-defined behavior, and shall not exceed any minimum implementation limit.</source>
          <target state="translated">&amp;para;5 Un &lt;em&gt;programa estrictamente conforme&lt;/em&gt; utilizar&amp;aacute; solo aquellas caracter&amp;iacute;sticas del idioma y la biblioteca especificadas en esta Norma Internacional. &lt;sup&gt;3)&lt;/sup&gt; No producir&amp;aacute; resultados dependientes de ning&amp;uacute;n comportamiento no especificado, indefinido o definido por la implementaci&amp;oacute;n, y no deber&amp;aacute; exceder ning&amp;uacute;n l&amp;iacute;mite m&amp;iacute;nimo de implementaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="faf3a7ecabef70212bf778ca2245ba160daae386" translate="yes" xml:space="preserve">
          <source>&amp;para;5 A return statement in main has the effect of leaving the main function (destroying any objects with automatic
  storage duration) and calling &lt;code&gt;std::exit&lt;/code&gt; with the return value as the argument. If control reaches the end
  of main without encountering a return statement, the effect is that of executing</source>
          <target state="translated">&amp;para;5 Una declaraci&amp;oacute;n return en main tiene el efecto de abandonar la funci&amp;oacute;n main (destruir cualquier objeto con duraci&amp;oacute;n de almacenamiento autom&amp;aacute;tica) y llamar a &lt;code&gt;std::exit&lt;/code&gt; con el valor de retorno como argumento. Si el control llega al final de main sin encontrar una declaraci&amp;oacute;n de retorno, el efecto es el de ejecutar</target>
        </trans-unit>
        <trans-unit id="cd52c684e5038903c8d7058be01e2ecabbdecb17" translate="yes" xml:space="preserve">
          <source>&amp;para;5 Finally, control is returned to the host environment. If the value of &lt;code&gt;status&lt;/code&gt; is zero or &lt;code&gt;EXIT_SUCCESS&lt;/code&gt;, an implementation-defined form of the status &lt;em&gt;successful termination&lt;/em&gt; is returned. If the value of &lt;code&gt;status&lt;/code&gt; is &lt;code&gt;EXIT_FAILURE&lt;/code&gt;, an implementation-defined form of the status &lt;em&gt;unsuccessful termination&lt;/em&gt; is returned. Otherwise the status returned is implementation-defined.</source>
          <target state="translated">&amp;para;5 Finalmente, el control se devuelve al entorno del host. Si el valor del &lt;code&gt;status&lt;/code&gt; es cero o &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; , se devuelve una forma definida por la implementaci&amp;oacute;n de la &lt;em&gt;terminaci&amp;oacute;n exitosa&lt;/em&gt; del estado. Si el valor del &lt;code&gt;status&lt;/code&gt; es &lt;code&gt;EXIT_FAILURE&lt;/code&gt; , se devuelve una forma definida por la implementaci&amp;oacute;n de la &lt;em&gt;terminaci&amp;oacute;n fallida&lt;/em&gt; del estado. De lo contrario, el estado devuelto est&amp;aacute; definido por la implementaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="75b067a9183eb49f341e4cb9b8899302c2bf5c32" translate="yes" xml:space="preserve">
          <source>&amp;para;6 The two forms of conforming implementation are &lt;em&gt;hosted&lt;/em&gt; and &lt;em&gt;freestanding&lt;/em&gt;. A &lt;em&gt;conforming hosted implementation&lt;/em&gt; shall accept any strictly conforming program. A &lt;em&gt;conforming freestanding implementation&lt;/em&gt; shall accept any strictly conforming program in which the use of the features specified in the library clause (clause 7) is confined to the contents of the standard headers &lt;code&gt;&amp;lt;float.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;iso646.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;limits.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;stdalign.h&amp;gt;&lt;/code&gt;,
  &lt;code&gt;&amp;lt;stdarg.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;stdbool.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt;, and
  &lt;code&gt;&amp;lt;stdnoreturn.h&amp;gt;&lt;/code&gt;. A conforming implementation may have extensions (including
  additional library functions), provided they do not alter the behavior of any strictly conforming program.&lt;sup&gt;4)&lt;/sup&gt;</source>
          <target state="translated">&amp;para;6 Las dos formas de implementaci&amp;oacute;n conforme son &lt;em&gt;alojadas&lt;/em&gt; e &lt;em&gt;independientes&lt;/em&gt; . Una &lt;em&gt;implementaci&amp;oacute;n hospedada conforme&lt;/em&gt; deber&amp;aacute; aceptar cualquier programa estrictamente conforme. Una &lt;em&gt;implementaci&amp;oacute;n independiente conforme&lt;/em&gt; deber&amp;aacute; aceptar cualquier programa estrictamente conforme en el que el uso de las caracter&amp;iacute;sticas especificadas en la cl&amp;aacute;usula de la biblioteca (cl&amp;aacute;usula 7) se limite al contenido de los encabezados est&amp;aacute;ndar &lt;code&gt;&amp;lt;float.h&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;iso646.h&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;limits.h&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;stdalign.h&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;stdarg.h&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;stdbool.h&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt; y &lt;code&gt;&amp;lt;stdnoreturn.h&amp;gt;&lt;/code&gt; . Una implementaci&amp;oacute;n conforme puede tener extensiones (incluidas funciones de biblioteca adicionales), siempre que no alteren el comportamiento de ning&amp;uacute;n programa estrictamente conforme. &lt;sup&gt;4)&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="80e12995965674219f63848c639631125cf40efd" translate="yes" xml:space="preserve">
          <source>&amp;para;7 A &lt;em&gt;conforming program&lt;/em&gt; is one that is acceptable to a conforming implementation.&lt;sup&gt;5)&lt;/sup&gt;</source>
          <target state="translated">&amp;para;7 Un &lt;em&gt;programa conforme&lt;/em&gt; es uno que es aceptable para una implementaci&amp;oacute;n conforme. &lt;sup&gt;5)&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="ca1e412dcdcb69f2e17aed105715050d1052b4ce" translate="yes" xml:space="preserve">
          <source>&amp;para;7 Two kinds of implementations are defined: a &lt;em&gt;hosted implementation&lt;/em&gt; and a &lt;em&gt;freestanding implementation&lt;/em&gt;. For a hosted implementation, this International Standard defines the set of available libraries. A freestanding
  implementation is one in which execution may take place without the benefit of an operating system, and has an implementation-defined set of libraries that includes certain language-support libraries (17.6.1.3).</source>
          <target state="translated">&amp;para;7 Se definen dos tipos de implementaciones: una &lt;em&gt;implementaci&amp;oacute;n alojada&lt;/em&gt; y una &lt;em&gt;implementaci&amp;oacute;n independiente&lt;/em&gt; . Para una implementaci&amp;oacute;n alojada, esta Norma Internacional define el conjunto de bibliotecas disponibles. Una implementaci&amp;oacute;n independiente es aquella en la que la ejecuci&amp;oacute;n puede tener lugar sin el beneficio de un sistema operativo, y tiene un conjunto de bibliotecas definidas por la implementaci&amp;oacute;n que incluye ciertas bibliotecas compatibles con el lenguaje (17.6.1.3).</target>
        </trans-unit>
        <trans-unit id="d7dc9283f7b16f5ee420119dfbaa6363dac4ba08" translate="yes" xml:space="preserve">
          <source>&amp;para;8 A conforming implementation may have extensions (including additional library functions), provided they do not alter the behavior of any well-formed program. Implementations are required to diagnose programs that
  use such extensions that are ill-formed according to this International Standard. Having done so, however, they can compile and execute such programs.</source>
          <target state="translated">&amp;para;8 Una implementaci&amp;oacute;n conforme puede tener extensiones (incluidas funciones de biblioteca adicionales), siempre que no alteren el comportamiento de ning&amp;uacute;n programa bien formado. Se requieren implementaciones para diagnosticar programas que usan tales extensiones que est&amp;aacute;n mal formadas de acuerdo con esta Norma Internacional. Una vez hecho esto, sin embargo, pueden compilar y ejecutar dichos programas.</target>
        </trans-unit>
        <trans-unit id="aee57d8b42fa45a9c62d786d87e4e51641c9817b" translate="yes" xml:space="preserve">
          <source>&amp;para;8 EXAMPLE 3 In this example, the size of a variable length array is computed and returned from a function:</source>
          <target state="translated">&amp;para;8 EJEMPLO 3 En este ejemplo, el tama&amp;ntilde;o de una matriz de longitud variable se calcula y se devuelve desde una funci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="7375209cbdea44802996e1ba4bfbb7ebf8bcffc8" translate="yes" xml:space="preserve">
          <source>&amp;para;9 Each implementation shall include documentation that identifies all conditionally-supported constructs that it does not support and defines all locale-specific characteristics.&lt;sup&gt;3&lt;/sup&gt;</source>
          <target state="translated">&amp;para;9 Cada implementaci&amp;oacute;n incluir&amp;aacute; documentaci&amp;oacute;n que identifique todas las construcciones soportadas condicionalmente que no admite y define todas las caracter&amp;iacute;sticas espec&amp;iacute;ficas de la localidad. &lt;sup&gt;3&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="f8c0fd5dd6b6ab8b703b27f9f230f0a90552ad70" translate="yes" xml:space="preserve">
          <source>0 for success, nonzero for failure.  Again, not something you need to (or get to) pick: it's defined by the interface you're supposed to be conforming to.</source>
          <target state="translated">0 para el éxito,no cero para el fracaso.De nuevo,no es algo que tengas que elegir (o que puedas elegir):está definido por la interfaz a la que se supone que te conformas.</target>
        </trans-unit>
        <trans-unit id="bc9b8d3e781ce73dbb246a75ec5a09339f47b503" translate="yes" xml:space="preserve">
          <source>1 If the return type of the &lt;code&gt;main&lt;/code&gt; function is a type compatible with &lt;code&gt;int&lt;/code&gt;, a return from the
  initial call to the &lt;code&gt;main&lt;/code&gt; function is equivalent to calling the &lt;code&gt;exit&lt;/code&gt; function with the value
  returned by the &lt;code&gt;main&lt;/code&gt; function as its argument;&lt;sup&gt;11)&lt;/sup&gt; reaching the &lt;code&gt;}&lt;/code&gt; that terminates the
  &lt;code&gt;main&lt;/code&gt; function returns a value of 0. If the return type is not compatible with &lt;code&gt;int&lt;/code&gt;, the
  termination status returned to the host environment is unspecified.</source>
          <target state="translated">1 Si el tipo de retorno de la funci&amp;oacute;n &lt;code&gt;main&lt;/code&gt; es un tipo compatible con &lt;code&gt;int&lt;/code&gt; , un retorno de la llamada inicial a la funci&amp;oacute;n &lt;code&gt;main&lt;/code&gt; es equivalente a llamar a la funci&amp;oacute;n de &lt;code&gt;exit&lt;/code&gt; con el valor devuelto por la funci&amp;oacute;n &lt;code&gt;main&lt;/code&gt; como argumento; &lt;sup&gt;11)&lt;/sup&gt; alcanzar el &lt;code&gt;}&lt;/code&gt; que finaliza la funci&amp;oacute;n &lt;code&gt;main&lt;/code&gt; devuelve un valor de 0. Si el tipo de retorno no es compatible con &lt;code&gt;int&lt;/code&gt; , el estado de terminaci&amp;oacute;n devuelto al entorno host no est&amp;aacute; especificado.</target>
        </trans-unit>
        <trans-unit id="9f3fffa3327d3ba52b48bca6ea15dcebe78e227a" translate="yes" xml:space="preserve">
          <source>1.4 Implementation compliance [intro.compliance]</source>
          <target state="translated">1.4 Cumplimiento de la aplicación [intro.cumplimiento]</target>
        </trans-unit>
        <trans-unit id="c6764c018e0ee51831b7edf8ba43133716139970" translate="yes" xml:space="preserve">
          <source>17.6.1.3 Freestanding implementations [compliance]</source>
          <target state="translated">17.6.1.3 Implementaciones autónomas [cumplimiento]</target>
        </trans-unit>
        <trans-unit id="c625fb551848e2eda9b2bcd7f1fbfbeae2205afb" translate="yes" xml:space="preserve">
          <source>3.6.1 Main function [basic.start.main]</source>
          <target state="translated">3.6.1 Función principal [inicio.principal.básico]</target>
        </trans-unit>
        <trans-unit id="74939d480b030b4d0aca4a62a78baefa0b305245" translate="yes" xml:space="preserve">
          <source>5.1.2 Execution environments</source>
          <target state="translated">5.1.2 Entornos de ejecución</target>
        </trans-unit>
        <trans-unit id="a10709d6042407d378ae63fb597e3cb0c35f37a4" translate="yes" xml:space="preserve">
          <source>5.1.2.1 Freestanding environment</source>
          <target state="translated">5.1.2.1 Entorno independiente</target>
        </trans-unit>
        <trans-unit id="421d09a1018436b2d8a5dd11587decfcfcd9ac51" translate="yes" xml:space="preserve">
          <source>5.1.2.2.1 Program startup</source>
          <target state="translated">5.1.2.2.1 Programa de inicio</target>
        </trans-unit>
        <trans-unit id="bf97d5d45eb7bf179cd39bc7a3476106465bd537" translate="yes" xml:space="preserve">
          <source>5.1.2.2.3 Program termination</source>
          <target state="translated">5.1.2.2.3 Terminación del programa</target>
        </trans-unit>
        <trans-unit id="aaeb27114e23ee14710f683d375b03fdb9b9be98" translate="yes" xml:space="preserve">
          <source>6.11.6 Function declarators</source>
          <target state="translated">6.11.6 Declaradores de la función</target>
        </trans-unit>
        <trans-unit id="fa42bbaed1d0a660afc0222443686a157a0e6ebd" translate="yes" xml:space="preserve">
          <source>6.5.3.4 The &lt;code&gt;sizeof&lt;/code&gt; and &lt;code&gt;_Alignof&lt;/code&gt; operators</source>
          <target state="translated">6.5.3.4 Los operadores &lt;code&gt;sizeof&lt;/code&gt; y &lt;code&gt;_Alignof&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af39c61a22e5f25a61be3c526a6c974cd1ea404d" translate="yes" xml:space="preserve">
          <source>7.22.4.4 The &lt;code&gt;exit&lt;/code&gt; function</source>
          <target state="translated">7.22.4.4 La funci&amp;oacute;n de &lt;code&gt;exit&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2259a4ab4a2439d3610778ec870b765036afd221" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/questions/4207134/what-is-the-proper-declaration-of-main&quot;&gt;What is the proper declaration of &lt;code&gt;main()&lt;/code&gt;?&lt;/a&gt; &amp;mdash; For C++, with a very good answer indeed.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/4207134/what-is-the-proper-declaration-of-main&quot;&gt;&amp;iquest;Cu&amp;aacute;l es la declaraci&amp;oacute;n adecuada de &lt;code&gt;main()&lt;/code&gt; ?&lt;/a&gt; - Para C ++, con una muy buena respuesta.</target>
        </trans-unit>
        <trans-unit id="e29bc9e2848992cf6548652af8a5be14a9249467" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;argv[argc]&lt;/code&gt; shall be a null pointer.</source>
          <target state="translated">&lt;code&gt;argv[argc]&lt;/code&gt; ser&amp;aacute; un puntero nulo.</target>
        </trans-unit>
        <trans-unit id="4a37fed8f5445c4993b8c5da80701807ea9a23fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int main()&lt;/code&gt; vs &lt;code&gt;void main()&lt;/code&gt; in C</source>
          <target state="translated">&lt;code&gt;int main()&lt;/code&gt; vs &lt;code&gt;void main()&lt;/code&gt; en C</target>
        </trans-unit>
        <trans-unit id="f8f60346f2e6dc9ec649d50698ae28dc37e9103d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;main()&lt;/code&gt; in C89 and K&amp;amp;R C unspecified return types default to &amp;rsquo;int`.</source>
          <target state="translated">&lt;code&gt;main()&lt;/code&gt; en C89 y K&amp;amp;R C los tipos de retorno no especificados tienen el valor predeterminado 'int'.</target>
        </trans-unit>
        <trans-unit id="77a0a2cbf7bad637f5c880daeb2e835a409f5011" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;main()&lt;/code&gt; should be declared as either:</source>
          <target state="translated">&lt;code&gt;main()&lt;/code&gt; debe declararse como:</target>
        </trans-unit>
        <trans-unit id="a99a4351928aa53be892994d830351307ef971d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;main()&lt;/code&gt;'s signature in C++</source>
          <target state="translated">Firma de &lt;code&gt;main()&lt;/code&gt; en C ++</target>
        </trans-unit>
        <trans-unit id="3389bce9434a3b56c3264af85cd3f1e622526831" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return 0&lt;/code&gt; or &lt;code&gt;return 1&lt;/code&gt; will be received by the parent process. In a shell it goes into a shell variable, and if you are running your program form a shell and not using that variable then you need not worry about the return value of &lt;code&gt;main()&lt;/code&gt;.</source>
          <target state="translated">el proceso padre recibir&amp;aacute; el &lt;code&gt;return 0&lt;/code&gt; o el &lt;code&gt;return 1&lt;/code&gt; . En un shell, entra en una variable de shell, y si est&amp;aacute; ejecutando su programa desde un shell y no usa esa variable, entonces no necesita preocuparse por el valor de retorno de &lt;code&gt;main()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9357defb5f570731b5b1bc998cafabdff46afe41" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;There are numerous duplicates of this question, including:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Existen numerosos duplicados de esta pregunta, que incluyen:&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="24c37500e1d6539a78a2997986f25d358e54ee71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C++03 freestanding environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;C ++ 03 entorno independiente&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ca7c7ddff5ac442add7172c71909b660ede292c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C++03 hosted environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Entorno alojado C ++ 03&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="82a7ebec217d66e8b8c2d24ab3e3f5b1cacef4f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C++11 freestanding environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Entorno independiente C ++ 11&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a2b3cabf96f4ea44d63a24449dabea2a53cf0512" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C++11 hosted environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Entorno alojado C ++ 11&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="09f98f8248303be464d553d71fb5cf58e90f51b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C11 freestanding environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Entorno independiente C11&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5b60f1d79fd4fb894543c08e1c03275903168a46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C11 hosted environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Entorno alojado C11&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6f08ea5864b7e3a0f044a93ec2f7398ca698c40b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C90 freestanding environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Entorno independiente C90&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d214f0511b5d0b5572547a7e70a1324e68f71d7f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C90 hosted environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Entorno alojado C90&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="100ce1f0e56996aa7562559f1b8a172eabbb3b20" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C99 freestanding environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Entorno independiente C99&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9aced90d316248fd18e7f601285666ee9656c0b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C99 hosted environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Entorno alojado C99&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="39941c674be35df5a1e78497af6e5aefcc124f65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; when I make this suggestion, it's almost invariably followed by one of two kinds of comments:  &quot;I didn't know that.&quot; or &quot;That's bad advice!&quot;  My rationale is that it's safe and useful to rely on compiler behavior explicitly supported by the standard.  For C, since C99; see ISO/IEC 9899:1999 section 5.1.2.2.3:</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; cuando hago esta sugerencia, casi siempre es seguida por uno de dos tipos de comentarios: &quot;No lo sab&amp;iacute;a&quot;. o &quot;&amp;iexcl;Eso es un mal consejo!&quot; Mi razonamiento es que es seguro y &amp;uacute;til confiar en el comportamiento del compilador respaldado expl&amp;iacute;citamente por el est&amp;aacute;ndar. Para C, desde C99; ver ISO / IEC 9899: 1999 secci&amp;oacute;n 5.1.2.2.3:</target>
        </trans-unit>
        <trans-unit id="762b0b987efcf101541560526e8d90e402907514" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;References&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;References&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ede2f6abb3f054287bbb931649c2f245bcaa1f0" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;10)&lt;/sup&gt; Thus, &lt;code&gt;int&lt;/code&gt; can be replaced by a typedef name defined as &lt;code&gt;int&lt;/code&gt;, or the type of &lt;code&gt;argv&lt;/code&gt; can be written as
  &lt;code&gt;char **argv&lt;/code&gt;, and so on.</source>
          <target state="translated">&lt;sup&gt;10)&lt;/sup&gt; Por lo tanto, &lt;code&gt;int&lt;/code&gt; puede reemplazarse por un nombre typedef definido como &lt;code&gt;int&lt;/code&gt; , o el tipo de &lt;code&gt;argv&lt;/code&gt; puede escribirse como &lt;code&gt;char **argv&lt;/code&gt; , y as&amp;iacute; sucesivamente.</target>
        </trans-unit>
        <trans-unit id="011ebdf423d0eeaeb00bbe1f5e9f73f7e03f1379" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;11)&lt;/sup&gt; In accordance with 6.2.4, the lifetimes of objects with automatic storage duration declared in &lt;code&gt;main&lt;/code&gt;
  will have ended in the former case, even where they would not have in the latter.</source>
          <target state="translated">&lt;sup&gt;11)&lt;/sup&gt; De conformidad con 6.2.4, la vida &amp;uacute;til de los objetos con una duraci&amp;oacute;n de almacenamiento autom&amp;aacute;tica declarada en &lt;code&gt;main&lt;/code&gt; habr&amp;aacute; finalizado en el primer caso, incluso cuando no lo hubieran hecho en el segundo.</target>
        </trans-unit>
        <trans-unit id="a58a7471bfb0770dd6b5ffe6f2124853a918a6d6" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;3)&lt;/sup&gt; A strictly conforming program can use conditional features (see 6.10.8.3) provided the use is guarded by an appropriate conditional inclusion preprocessing directive using the related macro. For example:</source>
          <target state="translated">&lt;sup&gt;3)&lt;/sup&gt; Un programa estrictamente conforme puede usar caracter&amp;iacute;sticas condicionales (ver 6.10.8.3) siempre que el uso est&amp;eacute; protegido por una directiva de preprocesamiento de inclusi&amp;oacute;n condicional apropiada usando la macro relacionada. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="2a0e8c9db9d88c7fc9a217ed3b840fdfca0ad4c9" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;3)&lt;/sup&gt; This documentation also defines implementation-defined behavior; see 1.9.</source>
          <target state="translated">&lt;sup&gt;3)&lt;/sup&gt; Esta documentaci&amp;oacute;n tambi&amp;eacute;n define el comportamiento definido por la implementaci&amp;oacute;n; ver 1.9.</target>
        </trans-unit>
        <trans-unit id="60f63bd67cf9699a2930ead7ef8840e496fb4919" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;4)&lt;/sup&gt; This implies that a conforming implementation reserves no identifiers other than those explicitly reserved in this International Standard.</source>
          <target state="translated">&lt;sup&gt;4)&lt;/sup&gt; Esto implica que una implementaci&amp;oacute;n conforme no reserva identificadores distintos a los expl&amp;iacute;citamente reservados en esta Norma Internacional.</target>
        </trans-unit>
        <trans-unit id="df6a402d9d62f5a27a627e0839825b19422b9ff0" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;5)&lt;/sup&gt; Strictly conforming programs are intended to be maximally portable among conforming implementations. Conforming programs may depend upon non-portable features of a conforming implementation.</source>
          <target state="translated">&lt;sup&gt;5) Los&lt;/sup&gt; programas estrictamente conformes est&amp;aacute;n destinados a ser m&amp;aacute;ximamente port&amp;aacute;tiles entre las implementaciones conformes. Los programas conformes pueden depender de caracter&amp;iacute;sticas no port&amp;aacute;tiles de una implementaci&amp;oacute;n conforme.</target>
        </trans-unit>
        <trans-unit id="181254e8f9b948c18cf54289fc472931f4bcaf8c" translate="yes" xml:space="preserve">
          <source>A freestanding implementation has an implementation-defined set of headers. This set shall include at least the headers shown in Table 16.</source>
          <target state="translated">Una implementación autónoma tiene un conjunto de encabezados definidos por la implementación.Este conjunto incluirá al menos los encabezados que se muestran en el cuadro 16.</target>
        </trans-unit>
        <trans-unit id="80e91a530ec3d2ff8b86717bc9074b128cbda6a4" translate="yes" xml:space="preserve">
          <source>A strange, ambiguous sentence &quot;or in some other implementation-defined manner&quot; has been introduced. This can either be interpreted as &quot;the parameters to &lt;code&gt;int main()&lt;/code&gt; may vary&quot; or as &quot;main can have any implementation-defined form&quot;.</source>
          <target state="translated">Se ha introducido una oraci&amp;oacute;n extra&amp;ntilde;a y ambigua &quot;o de alguna otra manera definida por la implementaci&amp;oacute;n&quot;. Esto puede interpretarse como &quot;los par&amp;aacute;metros para &lt;code&gt;int main()&lt;/code&gt; pueden variar&quot; o como &quot;main puede tener cualquier forma definida por la implementaci&amp;oacute;n&quot;.</target>
        </trans-unit>
        <trans-unit id="2ca23b0779eeca695d782b5b96f1577207241984" translate="yes" xml:space="preserve">
          <source>ANSI X3.159-1989 2.1.2.1 Freestanding environment:</source>
          <target state="translated">ANSI X3.159-1989 2.1.2.1 Ambiente autónomo:</target>
        </trans-unit>
        <trans-unit id="57a7155ea831c7e0d4282c280f1bb112dfa1e288" translate="yes" xml:space="preserve">
          <source>ANSI X3.159-1989 2.1.2.2 Hosted environment. &quot;Program startup&quot;</source>
          <target state="translated">ANSI X3.159-1989 2.1.2.2 Entorno alojado.&quot;Inicio del programa&quot;</target>
        </trans-unit>
        <trans-unit id="24cf3c85b055a0c58ef221fc468e8f9b43b2c027" translate="yes" xml:space="preserve">
          <source>Additionally, the &lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md&quot;&gt;C++ Core Guidelines&lt;/a&gt; contains multiple instances of omitting &lt;code&gt;return 0;&lt;/code&gt; at the end of &lt;code&gt;main&lt;/code&gt; and no instances in which an explicit return is written.  Although there is not yet a specific guideline on this particular topic in that document, that seems at least a tacit endorsement of the practice.</source>
          <target state="translated">Adem&amp;aacute;s, las &lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md&quot;&gt;Pautas principales de C ++&lt;/a&gt; contienen m&amp;uacute;ltiples instancias de omisi&amp;oacute;n del &lt;code&gt;return 0;&lt;/code&gt; al final de &lt;code&gt;main&lt;/code&gt; y en ninguna instancia en la que se escribe un retorno expl&amp;iacute;cito. Aunque todav&amp;iacute;a no hay una directriz espec&amp;iacute;fica sobre este tema en particular en ese documento, eso parece al menos un respaldo t&amp;aacute;cito de la pr&amp;aacute;ctica.</target>
        </trans-unit>
        <trans-unit id="23e493e83a229c8a646ea40b97b496511adb8337" translate="yes" xml:space="preserve">
          <source>After the second line nothing is printed to the terminal since &quot;foo&quot; made grep return 1 and we check if the return code of grep was equal to 0. The second conditional statement echoes its message in the last line since it is true due to CHECK == 1.</source>
          <target state="translated">Después de la segunda línea no se imprime nada a la terminal ya que &quot;foo&quot; hizo que el grep retornara 1 y comprobamos si el código de retorno del grep era igual a 0.La segunda declaración condicional hace eco de su mensaje en la última línea ya que es verdadero debido a CHECK ==1.</target>
        </trans-unit>
        <trans-unit id="09933d4decfafb0faf055a060f94f61bcf140364" translate="yes" xml:space="preserve">
          <source>All versions of both standards since then (C99 and C++98) have maintained the same idea.  We rely on automatically generated member functions in C++, and few people write explicit &lt;code&gt;return;&lt;/code&gt; statements at the end of a &lt;code&gt;void&lt;/code&gt; function.  Reasons against omitting seem to boil down to &lt;a href=&quot;https://stackoverflow.com/questions/2581993/what-the-reasons-for-against-returning-0-from-main-in-iso-c/2582015#2582015&quot;&gt;&quot;it looks weird&quot;&lt;/a&gt;.  If, like me, you're curious about the rationale for the change to the C standard &lt;a href=&quot;https://stackoverflow.com/questions/31394171/what-was-the-rationale-for-making-return-0-at-the-end-of-main-optional&quot;&gt;read this question&lt;/a&gt;.  Also note that in the early 1990s this was considered &quot;sloppy practice&quot; because it was undefined behavior (although widely supported) at the time.</source>
          <target state="translated">Todas las versiones de ambos est&amp;aacute;ndares desde entonces (C99 y C ++ 98) han mantenido la misma idea. Confiamos en funciones miembro generadas autom&amp;aacute;ticamente en C ++, y pocas personas escriben &lt;code&gt;return;&lt;/code&gt; expl&amp;iacute;cito ; declaraciones al final de una funci&amp;oacute;n &lt;code&gt;void&lt;/code&gt; . Las razones contra la omisi&amp;oacute;n parecen reducirse a &lt;a href=&quot;https://stackoverflow.com/questions/2581993/what-the-reasons-for-against-returning-0-from-main-in-iso-c/2582015#2582015&quot;&gt;&quot;se ve raro&quot;&lt;/a&gt; . Si, como yo, tiene curiosidad sobre la justificaci&amp;oacute;n del cambio al est&amp;aacute;ndar C, &lt;a href=&quot;https://stackoverflow.com/questions/31394171/what-was-the-rationale-for-making-return-0-at-the-end-of-main-optional&quot;&gt;lea esta pregunta&lt;/a&gt; . Tambi&amp;eacute;n tenga en cuenta que a principios de la d&amp;eacute;cada de 1990 esto se consideraba una &quot;pr&amp;aacute;ctica descuidada&quot; porque era un comportamiento indefinido (aunque ampliamente respaldado) en ese momento.</target>
        </trans-unit>
        <trans-unit id="83ff694899e1d845ab60582f3b73ef06850d2d34" translate="yes" xml:space="preserve">
          <source>Allowed forms &lt;sup&gt;11&lt;/sup&gt;:</source>
          <target state="translated">Formularios permitidos &lt;sup&gt;11&lt;/sup&gt; :</target>
        </trans-unit>
        <trans-unit id="1ffdd2e9d11e5e754b0a9cf96f132585a0112b4d" translate="yes" xml:space="preserve">
          <source>Allowed forms &lt;sup&gt;1&lt;/sup&gt;:</source>
          <target state="translated">Formas permitidas &lt;sup&gt;1&lt;/sup&gt; :</target>
        </trans-unit>
        <trans-unit id="531b9bfacbabbde3a9ef0944158dd8da7569c421" translate="yes" xml:space="preserve">
          <source>Allowed forms &lt;sup&gt;3&lt;/sup&gt;:</source>
          <target state="translated">Formas permitidas &lt;sup&gt;3&lt;/sup&gt; :</target>
        </trans-unit>
        <trans-unit id="75815e021134ec0eba7ed2c0d9c5a844701da1d0" translate="yes" xml:space="preserve">
          <source>Allowed forms &lt;sup&gt;7&lt;/sup&gt;:</source>
          <target state="translated">Formularios permitidos &lt;sup&gt;7&lt;/sup&gt; :</target>
        </trans-unit>
        <trans-unit id="4679a6ba8a0d1ca4986d60983e12b4e750ecdae5" translate="yes" xml:space="preserve">
          <source>Allowed forms &lt;sup&gt;9&lt;/sup&gt;:</source>
          <target state="translated">Formularios permitidos &lt;sup&gt;9&lt;/sup&gt; :</target>
        </trans-unit>
        <trans-unit id="8ce86355d96de776927a38cfc34a124933831922" translate="yes" xml:space="preserve">
          <source>Alternatively, the &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;wmain&lt;/code&gt; functions can be declared as returning &lt;code&gt;void&lt;/code&gt; (no return value). If you declare &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;wmain&lt;/code&gt; as returning void, you cannot return an exit code to the parent process or operating system by using a return statement. To return an exit code when &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;wmain&lt;/code&gt; is declared as &lt;code&gt;void&lt;/code&gt;, you must use the &lt;code&gt;exit&lt;/code&gt; function.</source>
          <target state="translated">Alternativamente, las funciones &lt;code&gt;main&lt;/code&gt; y &lt;code&gt;wmain&lt;/code&gt; pueden declararse como &lt;code&gt;void&lt;/code&gt; retorno (sin valor de retorno). Si declara que &lt;code&gt;main&lt;/code&gt; o &lt;code&gt;wmain&lt;/code&gt; devuelven nulo, no puede devolver un c&amp;oacute;digo de salida al proceso principal o al sistema operativo utilizando una declaraci&amp;oacute;n de devoluci&amp;oacute;n. Para devolver un c&amp;oacute;digo de salida cuando &lt;code&gt;main&lt;/code&gt; o &lt;code&gt;wmain&lt;/code&gt; se declaran como &lt;code&gt;void&lt;/code&gt; , debe usar la funci&amp;oacute;n de &lt;code&gt;exit&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="108ea3b40bdac1fa932e2881ce8b590bb80462aa" translate="yes" xml:space="preserve">
          <source>An implementation shall not predefine the main function. This function shall not be overloaded. It shall have a return type of type int, but otherwise its type is implementation-defined. All implementations shall
  allow both</source>
          <target state="translated">La aplicación no predefinirá la función principal.Esta función no se sobrecargará.Tendrá un tipo de retorno de tipo int,pero por lo demás su tipo está definido por la implementación.Todas las implementaciones permitirán tanto</target>
        </trans-unit>
        <trans-unit id="cceddadf6ec36d3e334ec1453776d68f0a30b419" translate="yes" xml:space="preserve">
          <source>An implementation shall not predefine the main function. This function shall not be overloaded. It shall have a return type of type int, but otherwise its type is implementation-defined. All implementations shall allow both of the following definitions of main:</source>
          <target state="translated">La aplicación no predefinirá la función principal.Esta función no se sobrecargará.Tendrá un tipo de retorno de tipo int,pero por lo demás su tipo está definido por la implementación.Todas las implementaciones permitirán las dos siguientes definiciones de main:</target>
        </trans-unit>
        <trans-unit id="abe62c12cbd384f011ace9ca713b8616f65c4574" translate="yes" xml:space="preserve">
          <source>Any form or name of main is allowed &lt;sup&gt;2&lt;/sup&gt;.</source>
          <target state="translated">Se permite cualquier forma o nombre de main &lt;sup&gt;2&lt;/sup&gt; .</target>
        </trans-unit>
        <trans-unit id="f259d290cdcbc9bbec44ad4bd545c173c869cb9a" translate="yes" xml:space="preserve">
          <source>Any form or name of main is allowed &lt;sup&gt;6&lt;/sup&gt;.</source>
          <target state="translated">Cualquier forma o nombre de main est&amp;aacute; permitido &lt;sup&gt;6&lt;/sup&gt; .</target>
        </trans-unit>
        <trans-unit id="e2314c2dd97eecb4a3e772641c44c357495c2a73" translate="yes" xml:space="preserve">
          <source>Any form or name of main is allowed &lt;sup&gt;8&lt;/sup&gt;.</source>
          <target state="translated">Se permite cualquier forma o nombre de main &lt;sup&gt;8&lt;/sup&gt; .</target>
        </trans-unit>
        <trans-unit id="ef855fa906d52778c2fb1c45f521ea626f5689c2" translate="yes" xml:space="preserve">
          <source>As noted early on, the requirements above apply to hosted environments. If you are working with a freestanding environment (which is the alternative to a hosted environment), then the standard has much less to say. For a freestanding environment, the function called at program startup need not be called &lt;code&gt;main&lt;/code&gt; and there are no constraints on its return type.  The standard says:</source>
          <target state="translated">Como se se&amp;ntilde;al&amp;oacute; anteriormente, los requisitos anteriores se aplican a los entornos alojados. Si est&amp;aacute; trabajando con un entorno independiente (que es la alternativa a un entorno alojado), entonces el est&amp;aacute;ndar tiene mucho menos que decir. Para un entorno independiente, la funci&amp;oacute;n llamada al inicio del programa no necesita llamarse &lt;code&gt;main&lt;/code&gt; y no hay restricciones en su tipo de retorno. El est&amp;aacute;ndar dice:</target>
        </trans-unit>
        <trans-unit id="6a69258566146688a6c3902485cea9ec71efe8ed" translate="yes" xml:space="preserve">
          <source>As you can see if you are calling this and that process it is sometimes essential to see what it has returned (by the return value of main()).</source>
          <target state="translated">Como puedes ver si estás llamando a este y aquel proceso,a veces es esencial ver lo que ha devuelto (por el valor de retorno de main()).</target>
        </trans-unit>
        <trans-unit id="e46f165c0590a92b13364a7c8042f058136f6322" translate="yes" xml:space="preserve">
          <source>C++ &amp;mdash; &lt;code&gt;int main(int argc, char **argv)&lt;/code&gt;</source>
          <target state="translated">C ++ - &lt;code&gt;int main(int argc, char **argv)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="76311ff27f1cf5e0babcefff7edb17a402c58861" translate="yes" xml:space="preserve">
          <source>C++ &amp;mdash; &lt;code&gt;int main(int argc, char *argv[])&lt;/code&gt;</source>
          <target state="translated">C ++ - &lt;code&gt;int main(int argc, char *argv[])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d70b6b60e0f24927bc4538fb0ceb71184d06bef0" translate="yes" xml:space="preserve">
          <source>C99 removed &quot;implicit int&quot; so &lt;code&gt;main()&lt;/code&gt; is no longer valid.</source>
          <target state="translated">C99 elimin&amp;oacute; &quot;impl&amp;iacute;cita int&quot;, por lo que &lt;code&gt;main()&lt;/code&gt; ya no es v&amp;aacute;lido.</target>
        </trans-unit>
        <trans-unit id="6c8395748074b451b2f55b5c5e4c263a6bbe2bef" translate="yes" xml:space="preserve">
          <source>Classically, Unix systems support a third variant:</source>
          <target state="translated">Clásicamente,los sistemas Unix soportan una tercera variante:</target>
        </trans-unit>
        <trans-unit id="e4ed7f96515dbdbe5f5d0ecace105efe68e6c3ec" translate="yes" xml:space="preserve">
          <source>Comments:</source>
          <target state="translated">Comments:</target>
        </trans-unit>
        <trans-unit id="cf3f840e63764cb35ea2eae778010a42f50e1375" translate="yes" xml:space="preserve">
          <source>Difference between &lt;code&gt;void main()&lt;/code&gt; and &lt;code&gt;int main()&lt;/code&gt;?</source>
          <target state="translated">&amp;iquest;Diferencia entre &lt;code&gt;void main()&lt;/code&gt; e &lt;code&gt;int main()&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="8dd79bfba982dc335f30bf0edc8ada5d88da4914" translate="yes" xml:space="preserve">
          <source>Efficiency is not an issue with the &lt;code&gt;main&lt;/code&gt; function. It can only be entered and left once (marking the program's start and termination) according to the C++ standard. For C, re-entering &lt;code&gt;main()&lt;/code&gt; is allowed, but should be avoided.</source>
          <target state="translated">La eficiencia no es un problema con la funci&amp;oacute;n &lt;code&gt;main&lt;/code&gt; . Solo se puede ingresar y dejar una vez (marcando el inicio y la finalizaci&amp;oacute;n del programa) de acuerdo con el est&amp;aacute;ndar C ++. Para C, se permite volver a ingresar &lt;code&gt;main()&lt;/code&gt; , pero se debe evitar.</target>
        </trans-unit>
        <trans-unit id="3fd215cf12ba7569beb5b6db1ee04c9f3d5989a2" translate="yes" xml:space="preserve">
          <source>Finally, there is nothing wrong from a standards point of view with calling &lt;code&gt;main()&lt;/code&gt; from a program.</source>
          <target state="translated">Finalmente, no hay nada malo desde el punto de vista de los est&amp;aacute;ndares al llamar a &lt;code&gt;main()&lt;/code&gt; desde un programa.</target>
        </trans-unit>
        <trans-unit id="62b8c7d7dfd45c5f3d50a3d0e74887793a303162" translate="yes" xml:space="preserve">
          <source>For C++, since the first standard in 1998; see ISO/IEC 14882:1998 section 3.6.1:</source>
          <target state="translated">Para C++,desde la primera norma en 1998;véase ISOIEC 14882:1998 sección 3.6.1:</target>
        </trans-unit>
        <trans-unit id="3500093e0edf7d6f4a566c3f4b7efdebecf64c37" translate="yes" xml:space="preserve">
          <source>For C99, everything is the same as above except:</source>
          <target state="translated">Para el C99,todo es igual a lo anterior excepto..:</target>
        </trans-unit>
        <trans-unit id="fc184e779fe2b354b692cb83c96360ac6578836a" translate="yes" xml:space="preserve">
          <source>For a hosted environment (that's the normal one), the C11 standard (ISO/IEC 9899:2011) says:</source>
          <target state="translated">Para un entorno alojado (ese es el normal),la norma C11 (ISOIEC 9899:2011)dice:</target>
        </trans-unit>
        <trans-unit id="2c578db723c70cb97ef0753314ddb79e6ca46de7" translate="yes" xml:space="preserve">
          <source>Here is a small demonstration of the usage of return codes...</source>
          <target state="translated">Aquí hay una pequeña demostración del uso de los códigos de retorno...</target>
        </trans-unit>
        <trans-unit id="d082866f80f3c7b776d5b28ecd6c0bcbdc809faf" translate="yes" xml:space="preserve">
          <source>However I usually return 0.</source>
          <target state="translated">Sin embargo,por lo general regreso 0.</target>
        </trans-unit>
        <trans-unit id="bcc235a17e919b6165ee1c9df15ea0527e83ab84" translate="yes" xml:space="preserve">
          <source>However, to allow completely wild forms of &lt;code&gt;main()&lt;/code&gt; was probably(?) not the intention of this new sentence. The C99 rationale (not normative) implies that the sentence refers to additional parameters to &lt;code&gt;int main&lt;/code&gt;&lt;sup&gt;4&lt;/sup&gt;.</source>
          <target state="translated">Sin embargo, permitir formas completamente salvajes de &lt;code&gt;main()&lt;/code&gt; probablemente no era (?) La intenci&amp;oacute;n de esta nueva oraci&amp;oacute;n. La l&amp;oacute;gica de C99 (no normativa) implica que la oraci&amp;oacute;n se refiere a par&amp;aacute;metros adicionales a &lt;code&gt;int main&lt;/code&gt; &lt;sup&gt;4&lt;/sup&gt; .</target>
        </trans-unit>
        <trans-unit id="d1b1ad3f3ac01aeb1f1aa57b42231bc5e931e4f0" translate="yes" xml:space="preserve">
          <source>I believe that &lt;code&gt;main()&lt;/code&gt; should return either &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; or &lt;code&gt;EXIT_FAILURE&lt;/code&gt;. They are defined in &lt;code&gt;stdlib.h&lt;/code&gt;</source>
          <target state="translated">Creo que &lt;code&gt;main()&lt;/code&gt; deber&amp;iacute;a devolver &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; o &lt;code&gt;EXIT_FAILURE&lt;/code&gt; . Se definen en &lt;code&gt;stdlib.h&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2c8ab38f22cccd2931145ee6336eedf191f6b30f" translate="yes" xml:space="preserve">
          <source>I was under the impression that standard specifies that main doesn't need a return value as a successful return was OS based (zero in one could be either a success or a failure in another), therefore the absence of return was a cue for the compiler to insert the successful return itself.</source>
          <target state="translated">Tenía la impresión de que la norma especifica que la principal no necesita un valor de retorno,ya que un retorno exitoso se basaba en el sistema operativo (cero en uno podría ser un éxito o un fracaso en otro),por lo tanto la ausencia de retorno era una señal para que el compilador insertara el retorno exitoso en sí mismo.</target>
        </trans-unit>
        <trans-unit id="4fb16fcf1d38904d79af7bbdd1699672a66ac59e" translate="yes" xml:space="preserve">
          <source>ISO 14882:2003 3.6.1 Main function</source>
          <target state="translated">ISO 14882:2003 3.6.1 Función principal</target>
        </trans-unit>
        <trans-unit id="6fcc9ab167f456cff52beb58f8604705b44e2080" translate="yes" xml:space="preserve">
          <source>ISO 14882:2011 3.6.1 Main function</source>
          <target state="translated">ISO 14882:2011 3.6.1 Función principal</target>
        </trans-unit>
        <trans-unit id="072f40f89924efb24c9c0d91ec69c1b477accc60" translate="yes" xml:space="preserve">
          <source>ISO 9899:1999 5.1.2.1 Freestanding environment</source>
          <target state="translated">ISO 9899:1999 5.1.2.1 Entorno independiente</target>
        </trans-unit>
        <trans-unit id="6cb748bf92ce81daeb76259fcdc696d6d4a84f98" translate="yes" xml:space="preserve">
          <source>ISO 9899:1999 5.1.2.2 Hosted environment -&amp;gt; 5.1.2.2.1 Program startup</source>
          <target state="translated">ISO 9899: 1999 5.1.2.2 Entorno alojado -&amp;gt; 5.1.2.2.1 Inicio del programa</target>
        </trans-unit>
        <trans-unit id="c570e7967aeae8d218c9500d8af0ccbb2c0999ed" translate="yes" xml:space="preserve">
          <source>ISO 9899:1999 5.1.2.2 Hosted environment --&amp;gt; 5.1.2.2.3 Program termination</source>
          <target state="translated">ISO 9899: 1999 5.1.2.2 Entorno alojado -&amp;gt; 5.1.2.2.3 Finalizaci&amp;oacute;n del programa</target>
        </trans-unit>
        <trans-unit id="5adf9fbb580920fe4e8bdb0b93849057aa5eaef0" translate="yes" xml:space="preserve">
          <source>ISO 9899:2011 5.1.2.2 Hosted environment -&amp;gt; 5.1.2.2.1 Program startup</source>
          <target state="translated">ISO 9899: 2011 5.1.2.2 Entorno alojado -&amp;gt; 5.1.2.2.1 Inicio del programa</target>
        </trans-unit>
        <trans-unit id="c026b51c24ee5003420193d6a1c30eba041e8812" translate="yes" xml:space="preserve">
          <source>ISO/IEC 9899:1989 (C90):</source>
          <target state="translated">ISOIEC 9899:1989 (C90):</target>
        </trans-unit>
        <trans-unit id="7738b221c80b5304b0ca9410b351937992dbdba2" translate="yes" xml:space="preserve">
          <source>ISO/IEC 9899:1999 (C99):</source>
          <target state="translated">ISOIEC 9899:1999 (C99):</target>
        </trans-unit>
        <trans-unit id="0dff1e972d7a65190eb694ffe563008167981bd6" translate="yes" xml:space="preserve">
          <source>If an implementation permits it, &lt;code&gt;main()&lt;/code&gt; can be declared in other ways, but this makes the program implementation defined, and no longer strictly conforming.</source>
          <target state="translated">Si una implementaci&amp;oacute;n lo permite, &lt;code&gt;main()&lt;/code&gt; puede declararse de otras maneras, pero esto hace que la implementaci&amp;oacute;n del programa sea definida y ya no se ajuste estrictamente.</target>
        </trans-unit>
        <trans-unit id="36650763e12f75f89b51f84868ae093852daf601" translate="yes" xml:space="preserve">
          <source>If control reaches the end of main without encountering a return statement, the effect is that of executing return 0;</source>
          <target state="translated">Si el control llega al final del principal sin encontrar una declaración de retorno,el efecto es el de ejecutar el retorno 0;</target>
        </trans-unit>
        <trans-unit id="f306c8b2bb84020137c0b44d4df475b5a3dfaf8b" translate="yes" xml:space="preserve">
          <source>If int main() then return 1 or return 0?</source>
          <target state="translated">Si int main()entonces devuelve 1 o devuelve 0?</target>
        </trans-unit>
        <trans-unit id="bbe13bc0ccc90c42b104135b14e3c3f18c8e40da" translate="yes" xml:space="preserve">
          <source>If the return type of the main function is a type compatible with int, a return from the initial call to the main function is equivalent to calling the exit function with the value returned by the main function as its argument;11) reaching the &lt;code&gt;}&lt;/code&gt; that terminates the main function returns a value of 0. If the return type is not compatible with int, the termination status returned to the host environment is unspecified.</source>
          <target state="translated">Si el tipo de retorno de la funci&amp;oacute;n principal es un tipo compatible con int, un retorno de la llamada inicial a la funci&amp;oacute;n principal es equivalente a llamar a la funci&amp;oacute;n de salida con el valor devuelto por la funci&amp;oacute;n principal como argumento; 11) llegar al &lt;code&gt;}&lt;/code&gt; que termina la funci&amp;oacute;n principal devuelve un valor de 0. Si el tipo de retorno no es compatible con int, el estado de terminaci&amp;oacute;n devuelto al entorno host no est&amp;aacute; especificado.</target>
        </trans-unit>
        <trans-unit id="80d38b087bcd0bf8f8ae646ae8cfc61a04ed675e" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;argc&lt;/code&gt; is greater than zero, the array members &lt;code&gt;argv[0]&lt;/code&gt; through
  &lt;code&gt;argv[argc-1]&lt;/code&gt; inclusive shall contain pointers to strings, which are given
  implementation-defined values by the host environment prior to program startup. The
  intent is to supply to the program information determined prior to program startup
  from elsewhere in the hosted environment. If the host environment is not capable of
  supplying strings with letters in both uppercase and lowercase, the implementation
  shall ensure that the strings are received in lowercase.</source>
          <target state="translated">Si el valor de &lt;code&gt;argc&lt;/code&gt; es mayor que cero, los miembros de la matriz &lt;code&gt;argv[0]&lt;/code&gt; a &lt;code&gt;argv[argc-1]&lt;/code&gt; inclusive contendr&amp;aacute;n punteros a las cadenas, a los que el entorno host les da valores definidos por la implementaci&amp;oacute;n antes del inicio del programa. La intenci&amp;oacute;n es proporcionar al programa informaci&amp;oacute;n determinada antes del inicio del programa desde cualquier otra parte del entorno alojado. Si el entorno host no es capaz de suministrar cadenas con letras en may&amp;uacute;sculas y min&amp;uacute;sculas, la implementaci&amp;oacute;n garantizar&amp;aacute; que las cadenas se reciban en min&amp;uacute;sculas.</target>
        </trans-unit>
        <trans-unit id="5477192590999db427c7b99a724d15f14138992a" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;argc&lt;/code&gt; is greater than zero, the string pointed to by &lt;code&gt;argv[0]&lt;/code&gt;
  represents the program name; &lt;code&gt;argv[0][0]&lt;/code&gt; shall be the null character if the
  program name is not available from the host environment. If the value of &lt;code&gt;argc&lt;/code&gt; is
  greater than one, the strings pointed to by &lt;code&gt;argv[1]&lt;/code&gt; through &lt;code&gt;argv[argc-1]&lt;/code&gt;
  represent the program parameters.</source>
          <target state="translated">Si el valor de &lt;code&gt;argc&lt;/code&gt; es mayor que cero, la cadena a la que apunta &lt;code&gt;argv[0]&lt;/code&gt; representa el nombre del programa; &lt;code&gt;argv[0][0]&lt;/code&gt; ser&amp;aacute; el car&amp;aacute;cter nulo si el nombre del programa no est&amp;aacute; disponible en el entorno del host. Si el valor de &lt;code&gt;argc&lt;/code&gt; es mayor que uno, las cadenas a las que apunta &lt;code&gt;argv[1]&lt;/code&gt; trav&amp;eacute;s de &lt;code&gt;argv[argc-1]&lt;/code&gt; representan los par&amp;aacute;metros del programa.</target>
        </trans-unit>
        <trans-unit id="83b323b3be8c3ef77aecb667889dc3dd68d116df" translate="yes" xml:space="preserve">
          <source>If they are declared, the parameters to the main function shall obey the following
  constraints:</source>
          <target state="translated">Si se declaran,los parámetros de la función principal obedecerán a las siguientes restricciones:</target>
        </trans-unit>
        <trans-unit id="d1a5b964a486551cab1f4315aeb05a3560a45f00" translate="yes" xml:space="preserve">
          <source>If you are doing this (call a process so many times), you should find a way to put your logic directly inside the caller, or in a DLL file, without allocate a specific process for each call; the multiple process allocations bring you the relevant efficiency problem in this case.</source>
          <target state="translated">Si está haciendo esto (llamar a un proceso tantas veces),debería encontrar la manera de poner su lógica directamente dentro de la persona que llama,o en un archivo DLL,sin asignar un proceso específico para cada llamada;las asignaciones de procesos múltiples le traen el problema de eficiencia pertinente en este caso.</target>
        </trans-unit>
        <trans-unit id="43d56dedc7192e637755e1fdcd48fbf68cbff70a" translate="yes" xml:space="preserve">
          <source>If you do</source>
          <target state="translated">Si lo haces...</target>
        </trans-unit>
        <trans-unit id="483a23176183f6c1305e90f13f59c790a7cd8b33" translate="yes" xml:space="preserve">
          <source>If you do not write a return statement in &lt;code&gt;int main()&lt;/code&gt;, the closing &lt;code&gt;{&lt;/code&gt; will return 0 by default.</source>
          <target state="translated">Si no escribe una declaraci&amp;oacute;n de devoluci&amp;oacute;n en &lt;code&gt;int main()&lt;/code&gt; , el cierre &lt;code&gt;{&lt;/code&gt; devolver&amp;aacute; 0 por defecto.</target>
        </trans-unit>
        <trans-unit id="850185e652bcc3094867daff9db6c1960eaf3346" translate="yes" xml:space="preserve">
          <source>If you really have issues related to efficiency of returning an integer from a process, you should probably avoid to call that process so many times that this return value becomes an issue.</source>
          <target state="translated">Si realmente tiene problemas relacionados con la eficiencia de la devolución de un entero de un proceso,probablemente debería evitar llamar a ese proceso tantas veces que este valor de devolución se convierta en un problema.</target>
        </trans-unit>
        <trans-unit id="52092fcdfb7b4fbe87c5392e56ec14ab62dfac60" translate="yes" xml:space="preserve">
          <source>In C89 (and hence in Microsoft C), there is no statement about what happens if the &lt;code&gt;main()&lt;/code&gt; function returns but does not specify a return value; it therefore leads to undefined behaviour.</source>
          <target state="translated">En C89 (y, por lo tanto, en Microsoft C), no hay una declaraci&amp;oacute;n sobre lo que sucede si la funci&amp;oacute;n &lt;code&gt;main()&lt;/code&gt; regresa pero no especifica un valor de retorno; Por lo tanto, conduce a un comportamiento indefinido.</target>
        </trans-unit>
        <trans-unit id="c87cc4b10f829842d58cbb57cfa34ee20cb520f0" translate="yes" xml:space="preserve">
          <source>In Unix and DOS scripting, &lt;code&gt;return 0&lt;/code&gt; on success and non-zero for error are usually returned. This is the standard used by Unix and DOS scripting to find out what happened with your program and controlling the whole flow.</source>
          <target state="translated">En las secuencias de comandos Unix y DOS, generalmente se &lt;code&gt;return 0&lt;/code&gt; en caso de &amp;eacute;xito y no cero para error. Este es el est&amp;aacute;ndar utilizado por las secuencias de comandos Unix y DOS para averiguar qu&amp;eacute; sucedi&amp;oacute; con su programa y controlar todo el flujo.</target>
        </trans-unit>
        <trans-unit id="8eaed3f6bd24cf0c2bf1a5f18894bccff46da0ac" translate="yes" xml:space="preserve">
          <source>In a freestanding environment (in which C program execution may take
  place without any benefit of an operating system), the name and type
  of the function called at program startup are implementation-defined.</source>
          <target state="translated">En un entorno autónomo (en el que la ejecución del programa C puede tener lugar sin el beneficio de un sistema operativo),el nombre y el tipo de la función llamada al inicio del programa están definidos por la implementación.</target>
        </trans-unit>
        <trans-unit id="e8f9653053b16c99b1cfc10e334bf69a6adf9d71" translate="yes" xml:space="preserve">
          <source>In a freestanding environment (in which C program execution may take place without any benefit of an operating system), the name and type of the function called at program startup are implementation-defined. Any library facilities available to a freestanding program, other than the minimal set required by clause 4, are implementation-defined.</source>
          <target state="translated">En un entorno autónomo (en el que la ejecución del programa C puede tener lugar sin el beneficio de un sistema operativo),el nombre y el tipo de la función llamada al inicio del programa están definidos por la implementación.Se define la implementación de cualquier servicio de biblioteca disponible para un programa autónomo,que no sea el conjunto mínimo requerido por la cláusula 4.</target>
        </trans-unit>
        <trans-unit id="7e3919889d260828538ebba4f914ae5c8021bc7c" translate="yes" xml:space="preserve">
          <source>In detail, if you only want to know if returning 0 is more or less efficient than returning 1, it could depend from the compiler in some cases, but generically, assuming they are read from the same source (local, field, constant, embedded in the code, function result, etc.) it requires exactly the same number of clock cycles.</source>
          <target state="translated">En detalle,si sólo se quiere saber si devolver 0 es más o menos eficiente que devolver 1,podría depender del compilador en algunos casos,pero genéricamente,suponiendo que se lean de la misma fuente (local,campo,constante,incrustado en el código,resultado de la función,etc.)requiere exactamente el mismo número de ciclos de reloj.</target>
        </trans-unit>
        <trans-unit id="77bca36b5e136be0307abf4a901e487488fb4541" translate="yes" xml:space="preserve">
          <source>In the latter form &lt;code&gt;argc&lt;/code&gt; shall be the number of arguments passed to the program from the environment
  in which the program is run. If &lt;code&gt;argc&lt;/code&gt; is nonzero these arguments shall be supplied in &lt;code&gt;argv[0]&lt;/code&gt;
  through &lt;code&gt;argv[argc-1]&lt;/code&gt; as pointers to the initial characters of null-terminated multibyte strings (NTMBSs) (17.5.2.1.4.2) and &lt;code&gt;argv[0]&lt;/code&gt; shall be the pointer to the initial character of a NTMBS that represents the
  name used to invoke the program or &lt;code&gt;&quot;&quot;&lt;/code&gt;. The value of &lt;code&gt;argc&lt;/code&gt; shall be non-negative. The value of &lt;code&gt;argv[argc]&lt;/code&gt;
  shall be 0. [ Note: It is recommended that any further (optional) parameters be added after &lt;code&gt;argv&lt;/code&gt;. &amp;mdash;end
  note ]</source>
          <target state="translated">En la &amp;uacute;ltima forma, &lt;code&gt;argc&lt;/code&gt; ser&amp;aacute; el n&amp;uacute;mero de argumentos pasados ​​al programa desde el entorno en el que se ejecuta el programa. Si &lt;code&gt;argc&lt;/code&gt; no es cero, estos argumentos se proporcionar&amp;aacute;n en &lt;code&gt;argv[0]&lt;/code&gt; trav&amp;eacute;s de &lt;code&gt;argv[argc-1]&lt;/code&gt; como punteros a los caracteres iniciales de las cadenas multibyte terminadas en nulo (NTMBS) (17.5.2.1.4.2) y &lt;code&gt;argv[0]&lt;/code&gt; ser&amp;aacute; el puntero al car&amp;aacute;cter inicial de un NTMBS que representa el nombre utilizado para invocar el programa o &lt;code&gt;&quot;&quot;&lt;/code&gt; . El valor de &lt;code&gt;argc&lt;/code&gt; no ser&amp;aacute; negativo. El valor de &lt;code&gt;argv[argc]&lt;/code&gt; ser&amp;aacute; 0. [Nota: Se recomienda agregar cualquier par&amp;aacute;metro adicional (opcional) despu&amp;eacute;s de &lt;code&gt;argv&lt;/code&gt; . &amp;mdash;Final nota]</target>
        </trans-unit>
        <trans-unit id="edd6065f0058ea6d8f4719347b7def37199e2a44" translate="yes" xml:space="preserve">
          <source>Interestingly, MS does not prescribe the two-argument version of &lt;code&gt;main()&lt;/code&gt; that the C and C++ standards require. It only prescribes a three argument form where the third argument is &lt;code&gt;char **envp&lt;/code&gt;, a pointer to a list of environment variables.</source>
          <target state="translated">Curiosamente, MS no prescribe la versi&amp;oacute;n de dos argumentos de &lt;code&gt;main()&lt;/code&gt; que requieren los est&amp;aacute;ndares C y C ++. Solo prescribe una forma de tres argumentos donde el tercer argumento es &lt;code&gt;char **envp&lt;/code&gt; , un puntero a una lista de variables de entorno.</target>
        </trans-unit>
        <trans-unit id="067bd54d24cbf0d635c159524fc85653cf8d1376" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;char *envp[]&lt;/code&gt; as a third argument to &lt;code&gt;main()&lt;/code&gt; portable?</source>
          <target state="translated">&amp;iquest; &lt;code&gt;char *envp[]&lt;/code&gt; es un tercer argumento para &lt;code&gt;main()&lt;/code&gt; portable?</target>
        </trans-unit>
        <trans-unit id="01cfa03c02ebf6b8044d17ebc260a7a7e23f1bc7" translate="yes" xml:space="preserve">
          <source>It also can be checked when you call a process yourself, and see if the program exited and finished properly.</source>
          <target state="translated">También se puede comprobar cuando usted mismo llama a un proceso,y ver si el programa salió y terminó correctamente.</target>
        </trans-unit>
        <trans-unit id="743cc09a1d17dd8e6d9ef3423b452c2f4c20a21e" translate="yes" xml:space="preserve">
          <source>It is also worth noting that in C++, &lt;code&gt;int main()&lt;/code&gt; can be left without a return-statement, at which point it defaults to returning 0. This is also true with a C99 program. Whether &lt;code&gt;return 0;&lt;/code&gt; should be omitted or not is open to debate. The range of valid C program main signatures is much greater.</source>
          <target state="translated">Tambi&amp;eacute;n vale la pena se&amp;ntilde;alar que en C ++, &lt;code&gt;int main()&lt;/code&gt; se puede dejar sin una declaraci&amp;oacute;n de retorno, en cuyo punto el valor predeterminado es devolver 0. Esto tambi&amp;eacute;n es cierto con un programa C99. Si &lt;code&gt;return 0;&lt;/code&gt; debe omitirse o no est&amp;aacute; abierto a debate. El rango de firmas principales del programa C v&amp;aacute;lido es mucho mayor.</target>
        </trans-unit>
        <trans-unit id="eba4f3e259ceb0adf19ace0c32c1391d84cbfe54" translate="yes" xml:space="preserve">
          <source>It is implementation-defined whether a program in a freestanding environment is required to define a main function.</source>
          <target state="translated">Se define la implementación si se requiere un programa en un entorno independiente para definir una función principal.</target>
        </trans-unit>
        <trans-unit id="3d63d53707bc8469db68ce1f74c203b133e06b93" translate="yes" xml:space="preserve">
          <source>It is not clear to me what happens (what exit code is returned to the parent or OS) when a program with &lt;code&gt;void main()&lt;/code&gt; does exit &amp;mdash; and the MS web site is silent too.</source>
          <target state="translated">No me queda claro qu&amp;eacute; sucede (qu&amp;eacute; c&amp;oacute;digo de salida se devuelve al padre o al sistema operativo) cuando un programa con &lt;code&gt;void main()&lt;/code&gt; se cierra, y el sitio web de MS tambi&amp;eacute;n permanece en silencio.</target>
        </trans-unit>
        <trans-unit id="d1b1f744a8f0f327fd7f8ac8646e483671c5281c" translate="yes" xml:space="preserve">
          <source>It is noticeable that the only header required of a freestanding environment that actually defines any functions is &lt;code&gt;&amp;lt;stdarg.h&amp;gt;&lt;/code&gt; (and even those may be &amp;mdash; and often are &amp;mdash; just macros).</source>
          <target state="translated">Es notable que el &amp;uacute;nico encabezado requerido de un entorno independiente que realmente define cualquier funci&amp;oacute;n es &lt;code&gt;&amp;lt;stdarg.h&amp;gt;&lt;/code&gt; (e incluso esas pueden ser, y a menudo son, solo macros).</target>
        </trans-unit>
        <trans-unit id="f0d85260bc0a36b034db5734d9715240a02623e7" translate="yes" xml:space="preserve">
          <source>It's &lt;strong&gt;NOT&lt;/strong&gt; just a programming convention.</source>
          <target state="translated">&lt;strong&gt;NO es&lt;/strong&gt; solo una convenci&amp;oacute;n de programaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="777237599abc671bc567b78dd552b08e24fe0ff7" translate="yes" xml:space="preserve">
          <source>It's not what &lt;em&gt;should&lt;/em&gt;&lt;code&gt;main()&lt;/code&gt; return, it's what &lt;em&gt;does&lt;/em&gt;&lt;code&gt;main()&lt;/code&gt; return.  &lt;code&gt;main()&lt;/code&gt; is, of course, a function that someone else calls.  You don't have any control over the code that calls &lt;code&gt;main()&lt;/code&gt;.  Therefore, you must declare &lt;code&gt;main()&lt;/code&gt; with a type-correct signature to match its caller.  You simply don't have any choice in the matter.  You don't have to ask yourself what's more or less efficient, or what's better or worse style, or anything like that, because the answer is already perfectly well defined, for you, by the C and C+ standards.  Just follow them.</source>
          <target state="translated">No es lo que &lt;em&gt;deber&amp;iacute;a&lt;/em&gt; devolver &lt;code&gt;main()&lt;/code&gt; , es lo &lt;em&gt;que&lt;/em&gt; devuelve &lt;code&gt;main()&lt;/code&gt; . &lt;code&gt;main()&lt;/code&gt; es, por supuesto, una funci&amp;oacute;n que alguien m&amp;aacute;s llama. No tienes ning&amp;uacute;n control sobre el c&amp;oacute;digo que llama a &lt;code&gt;main()&lt;/code&gt; . Por lo tanto, debe declarar &lt;code&gt;main()&lt;/code&gt; con una firma de tipo correcto para que coincida con la persona que llama. Simplemente no tienes otra opci&amp;oacute;n en el asunto. No tiene que preguntarse qu&amp;eacute; es m&amp;aacute;s o menos eficiente, o qu&amp;eacute; es mejor o peor estilo, ni nada de eso, porque la respuesta ya est&amp;aacute; perfectamente bien definida, para usted, seg&amp;uacute;n los est&amp;aacute;ndares C y C +. Solo s&amp;iacute;guelos.</target>
        </trans-unit>
        <trans-unit id="ceda7d6ce3400641cfc2d2b305e73a181d717c83" translate="yes" xml:space="preserve">
          <source>J.5.1 Environment arguments</source>
          <target state="translated">J.5.1 Argumentos sobre el medio ambiente</target>
        </trans-unit>
        <trans-unit id="4646a05e59e1cdcc72d17eecf0ad0e9d72001305" translate="yes" xml:space="preserve">
          <source>Just as the C standard recognizes both hosted and freestanding environment, so too does the C++ standard. (Quotes from ISO/IEC 14882:2011.)</source>
          <target state="translated">Así como el estándar C reconoce tanto el entorno alojado como el independiente,también lo hace el estándar C++.(Citas de ISOIEC 14882:2011.)</target>
        </trans-unit>
        <trans-unit id="1cf33a289910a38b27ccf6fc406b6febbdf1f1a7" translate="yes" xml:space="preserve">
          <source>Keep in mind that,even though you're returning an int, some OSes (Windows) truncate the returned value to a single byte (0-255).</source>
          <target state="translated">Ten en cuenta que,aunque estés devolviendo un int,algunos sistemas operativos (Windows)truncan el valor devuelto a un solo byte (0-255).</target>
        </trans-unit>
        <trans-unit id="52e3d5ebdbc06938d8f3e9175e5789910e8284cc" translate="yes" xml:space="preserve">
          <source>Legal definitions of &lt;code&gt;main()&lt;/code&gt; in C++14?</source>
          <target state="translated">&amp;iquest;Definiciones legales de &lt;code&gt;main()&lt;/code&gt; en C ++ 14?</target>
        </trans-unit>
        <trans-unit id="82be7a55804dc08de0168f6f592f149c8a430e44" translate="yes" xml:space="preserve">
          <source>Microsoft C</source>
          <target state="translated">Microsoft C</target>
        </trans-unit>
        <trans-unit id="73d9e90f1eeed7db4c1746200a40ba2e4ac70074" translate="yes" xml:space="preserve">
          <source>Must the &lt;code&gt;int main()&lt;/code&gt; function return a value in all compilers?</source>
          <target state="translated">&amp;iquest;Debe la funci&amp;oacute;n &lt;code&gt;int main()&lt;/code&gt; devolver un valor en todos los compiladores?</target>
        </trans-unit>
        <trans-unit id="2e35d4f77f18bcad3aefd139f948af15aa758b72" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;0&lt;/code&gt; is mandated as 'success'. You can use &lt;code&gt;EXIT_FAILURE&lt;/code&gt; and &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; from &lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt; if you prefer, but 0 is well established, and so is 1. See also &lt;a href=&quot;https://stackoverflow.com/questions/179565/exitcodes-bigger-than-255-possible/&quot;&gt;Exit codes greater than 255 &amp;mdash; possible?&lt;/a&gt;.</source>
          <target state="translated">Tenga en cuenta que &lt;code&gt;0&lt;/code&gt; es obligatorio como '&amp;eacute;xito'. Puede usar &lt;code&gt;EXIT_FAILURE&lt;/code&gt; y &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; de &lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt; si lo prefiere, pero 0 est&amp;aacute; bien establecido y tambi&amp;eacute;n lo es 1. Vea tambi&amp;eacute;n &lt;a href=&quot;https://stackoverflow.com/questions/179565/exitcodes-bigger-than-255-possible/&quot;&gt;C&amp;oacute;digos de salida mayores que 255 - &amp;iquest;posible?&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bc19499ce0cd6befeb6d4ac0455d6a31e63efae2" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;int main()&lt;/code&gt; was never listed as a valid form for any hosted implementation of C in any of the above versions. In C, unlike C++, &lt;code&gt;()&lt;/code&gt; and &lt;code&gt;(void)&lt;/code&gt; have different meanings. The former is an obsolescent feature which may be removed from the language. See C11 future language directions:</source>
          <target state="translated">Tenga en cuenta que &lt;code&gt;int main()&lt;/code&gt; nunca se incluy&amp;oacute; como una forma v&amp;aacute;lida para ninguna implementaci&amp;oacute;n alojada de C en ninguna de las versiones anteriores. En C, a diferencia de C ++, &lt;code&gt;()&lt;/code&gt; y &lt;code&gt;(void)&lt;/code&gt; tienen significados diferentes. La primera es una caracter&amp;iacute;stica obsoleta que puede eliminarse del idioma. Consulte las instrucciones futuras del lenguaje C11:</target>
        </trans-unit>
        <trans-unit id="2a43cb795cc790685cb419ee571a160ade1ccb63" translate="yes" xml:space="preserve">
          <source>Note that the C and C++ standards define two kinds of implementations: freestanding and hosted.</source>
          <target state="translated">Nótese que los estándares C y C++definen dos tipos de implementaciones:autónoma y alojada.</target>
        </trans-unit>
        <trans-unit id="99eaa646b7b6e0082dbd4a6adae2c494f9eec0c8" translate="yes" xml:space="preserve">
          <source>Note the empty parenthesis in the first form. C++ and C are different in this case, because in C++ this means that the function takes no parameters. But in C it means that it may take any parameter.</source>
          <target state="translated">Observe el paréntesis vacío en la primera forma.C++y C son diferentes en este caso,porque en C++esto significa que la función no toma parámetros.Pero en C significa que puede tomar cualquier parámetro.</target>
        </trans-unit>
        <trans-unit id="546cad710ccd581eadc450a0c74833e5bcaa545e" translate="yes" xml:space="preserve">
          <source>Now the following bash script (simply type it in a Linux terminal) although very basic should give some idea of error handling:</source>
          <target state="translated">Ahora el siguiente script bash (simplemente escríbelo en una terminal Linux)aunque muy básico debería dar alguna idea del manejo de errores:</target>
        </trans-unit>
        <trans-unit id="bb080a0718df6542d4433b03a9323560b055bb4d" translate="yes" xml:space="preserve">
          <source>Omit &lt;code&gt;return 0&lt;/code&gt;</source>
          <target state="translated">Omitir &lt;code&gt;return 0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="71453973d6cd4b7d6dce02765e1aeb2c794927d7" translate="yes" xml:space="preserve">
          <source>Or equivalent. For example, &lt;code&gt;int main(int argc, char *argv[])&lt;/code&gt; is equivalent to the second one. Further, the &lt;code&gt;int&lt;/code&gt; return type can be omitted as it is a default.</source>
          <target state="translated">O equivalente. Por ejemplo, &lt;code&gt;int main(int argc, char *argv[])&lt;/code&gt; es equivalente al segundo. Adem&amp;aacute;s, el tipo de retorno &lt;code&gt;int&lt;/code&gt; puede omitirse ya que es un valor predeterminado.</target>
        </trans-unit>
        <trans-unit id="1b4a599777a8efd1033fda40d60a3ac6da68728f" translate="yes" xml:space="preserve">
          <source>Program termination in C99 or C11</source>
          <target state="translated">Terminación del programa en C99 o C11</target>
        </trans-unit>
        <trans-unit id="663f993e9b4f3d44ef4c0329debae8aeebbf12e3" translate="yes" xml:space="preserve">
          <source>Rationale for International Standard &amp;mdash; Programming Languages &amp;mdash; C, Revision 5.10. 5.1.2.2 Hosted environment --&amp;gt; 5.1.2.2.1 Program startup</source>
          <target state="translated">Justificaci&amp;oacute;n de la Norma Internacional - Lenguajes de programaci&amp;oacute;n - C, Revisi&amp;oacute;n 5.10. 5.1.2.2 Entorno alojado -&amp;gt; 5.1.2.2.1 Inicio del programa</target>
        </trans-unit>
        <trans-unit id="39c788876858d9fdd3ed2ab494830cb7baca1db1" translate="yes" xml:space="preserve">
          <source>Related:</source>
          <target state="translated">Related:</target>
        </trans-unit>
        <trans-unit id="06951cda41c4c25e07384cc2d791df8051ddc4f0" translate="yes" xml:space="preserve">
          <source>Return 0 on success and non-zero for error. This is the standard used by UNIX and DOS scripting to find out what happened with your program.</source>
          <target state="translated">Devolución 0 en el éxito y no cero en el error.Este es el estándar usado por los scripts de UNIX y DOS para averiguar qué pasó con su programa.</target>
        </trans-unit>
        <trans-unit id="c25bf9ecf87e37204aff4b7cbc681350ca825d5e" translate="yes" xml:space="preserve">
          <source>Return type of &lt;code&gt;main()&lt;/code&gt; method in C</source>
          <target state="translated">Tipo de retorno del m&amp;eacute;todo &lt;code&gt;main()&lt;/code&gt; en C</target>
        </trans-unit>
        <trans-unit id="3675c5cbc8a91d96194988edd341f2880e76b8d4" translate="yes" xml:space="preserve">
          <source>Return value 0 usually means OK in most operating systems (the ones I can think of anyway).</source>
          <target state="translated">El valor de retorno 0 normalmente significa OK en la mayoría de los sistemas operativos (los que se me ocurren de todos modos).</target>
        </trans-unit>
        <trans-unit id="7e87f801e2a286959cf6dbceaaf5200c563638ca" translate="yes" xml:space="preserve">
          <source>Returning 0 should tell the programmer that the program has successfully finished the job.</source>
          <target state="translated">Devolver 0 debería decirle al programador que el programa ha terminado el trabajo con éxito.</target>
        </trans-unit>
        <trans-unit id="d0d3720869171e755af6d0b0e9c8fa9c47bded55" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://stackoverflow.com/q/8626109/775964&quot;&gt;How can I get what my main function has returned?&lt;/a&gt;.</source>
          <target state="translated">Consulte &lt;a href=&quot;https://stackoverflow.com/q/8626109/775964&quot;&gt;&amp;iquest;C&amp;oacute;mo puedo obtener lo que ha devuelto mi funci&amp;oacute;n principal?&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="58c7663db54efd33586550979f6f35585936911c" translate="yes" xml:space="preserve">
          <source>Since grep failed to match the token &quot;foo&quot; with the content of our file the return code is 1 (this is the usual case when a failure occurs but as stated above you have plenty of values to choose from).</source>
          <target state="translated">Dado que el grep no consiguió hacer coincidir la ficha &quot;foo&quot; con el contenido de nuestro archivo,el código de retorno es 1 (este es el caso habitual cuando se produce un fallo pero,como ya se ha dicho,tiene muchos valores para elegir).</target>
        </trans-unit>
        <trans-unit id="58e729ae862197d2b4b8edf3be6c045cd942acef" translate="yes" xml:space="preserve">
          <source>So I advocate omitting it; others disagree (often vehemently!)  In any case, if you encounter code that omits it, you'll know that it's explicitly supported by the standard and you'll know what it means.</source>
          <target state="translated">Así que abogo por omitirlo;otros no están de acuerdo (¡a menudo con vehemencia!)En cualquier caso,si te encuentras con un código que lo omite,sabrás que está explícitamente apoyado por la norma y sabrás lo que significa.</target>
        </trans-unit>
        <trans-unit id="191c9d7581d1bc67cbc4954e3995712f84c74941" translate="yes" xml:space="preserve">
          <source>Some compilers have chosen to interpret the standard in the latter way. Arguably, one cannot easily state that they are not strictly conforming by citing the standard in itself, since it is is ambiguous.</source>
          <target state="translated">Algunos compiladores han optado por interpretar la norma de esta última manera.Se puede argumentar que no se puede afirmar fácilmente que no están estrictamente conformes citando la norma en sí misma,ya que es ambigua.</target>
        </trans-unit>
        <trans-unit id="f98b7a7fbe66aa30604d46c9c186df5e7d476f7a" translate="yes" xml:space="preserve">
          <source>Standard C &amp;mdash; Common Extension</source>
          <target state="translated">Est&amp;aacute;ndar C - Extensi&amp;oacute;n com&amp;uacute;n</target>
        </trans-unit>
        <trans-unit id="559fce21984836e0b4c09f404ccadb796a238608" translate="yes" xml:space="preserve">
          <source>Standard C &amp;mdash; Freestanding Environment</source>
          <target state="translated">Est&amp;aacute;ndar C - Entorno independiente</target>
        </trans-unit>
        <trans-unit id="bf0058befe2fe0784752a61367cd774b2170e902" translate="yes" xml:space="preserve">
          <source>Standard C &amp;mdash; Hosted Environment</source>
          <target state="translated">Est&amp;aacute;ndar C - Entorno alojado</target>
        </trans-unit>
        <trans-unit id="ead9983c448c82a4bc2e4fa329267dd58510e74c" translate="yes" xml:space="preserve">
          <source>Standard C++ &amp;mdash; Freestanding Environment</source>
          <target state="translated">Est&amp;aacute;ndar C ++ - Entorno independiente</target>
        </trans-unit>
        <trans-unit id="17c880ba258c61c1f081e4f92072401258328c3f" translate="yes" xml:space="preserve">
          <source>Standard C++ &amp;mdash; Hosted Environment</source>
          <target state="translated">Standard C ++ - Entorno alojado</target>
        </trans-unit>
        <trans-unit id="9e9bfc97678e1deb8fecca963cb28baa3742ac8f" translate="yes" xml:space="preserve">
          <source>Styles of &lt;code&gt;main()&lt;/code&gt; functions in C</source>
          <target state="translated">Estilos de funciones &lt;code&gt;main()&lt;/code&gt; en C</target>
        </trans-unit>
        <trans-unit id="c32251a4dd807171928d97ccdcdf5412b6e1b584" translate="yes" xml:space="preserve">
          <source>Table 16 &amp;mdash; C++ headers for freestanding implementations</source>
          <target state="translated">Tabla 16 - Encabezados de C ++ para implementaciones independientes</target>
        </trans-unit>
        <trans-unit id="0b88a0ea077a1c835e53dcb3e5afe37a4a6880f1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/6wd819wh%28v=vs.100%29.aspx&quot;&gt;Microsoft VS 2010&lt;/a&gt; compiler is interesting. The web site says:</source>
          <target state="translated">El compilador de &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/6wd819wh%28v=vs.100%29.aspx&quot;&gt;Microsoft VS 2010&lt;/a&gt; es interesante. El sitio web dice:</target>
        </trans-unit>
        <trans-unit id="8364d6bdc8c6440426e1ae40049191ae42429996" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; return type may not be omitted.</source>
          <target state="translated">El tipo de retorno &lt;code&gt;int&lt;/code&gt; no puede omitirse.</target>
        </trans-unit>
        <trans-unit id="1cf16e3e7d80a6df169adb6cfe5d5a70bd761eb9" translate="yes" xml:space="preserve">
          <source>The C++ standard explicitly says &quot;It [the main function] shall have a return type of type &lt;code&gt;int&lt;/code&gt;, but otherwise its type is implementation defined&quot;, and requires the same two signatures as the C standard to be supported as options. So a 'void main()' is directly not allowed by the C++ standard, though there's nothing it can do to stop a non-standard implementation allowing alternatives.  Note that C++ forbids the user from calling &lt;code&gt;main&lt;/code&gt; (but the C standard does not).</source>
          <target state="translated">El est&amp;aacute;ndar C ++ dice expl&amp;iacute;citamente &quot;[la funci&amp;oacute;n principal] tendr&amp;aacute; un tipo de retorno de tipo &lt;code&gt;int&lt;/code&gt; , pero de lo contrario su tipo est&amp;aacute; definido por la implementaci&amp;oacute;n&quot;, y requiere las mismas dos firmas que el est&amp;aacute;ndar C para ser admitido como opciones. Por lo tanto, el est&amp;aacute;ndar C ++ no permite directamente 'void main ()', aunque no hay nada que pueda hacer para detener una implementaci&amp;oacute;n no est&amp;aacute;ndar que permita alternativas. Tenga en cuenta que C ++ proh&amp;iacute;be que el usuario llame a &lt;code&gt;main&lt;/code&gt; (pero el est&amp;aacute;ndar C no).</target>
        </trans-unit>
        <trans-unit id="8ffaebd7ec7fa463926f599cf1254982eb713376" translate="yes" xml:space="preserve">
          <source>The C++11 standard (ISO/IEC 14882:2011) says:</source>
          <target state="translated">El estándar C++11 (ISOIEC 14882:2011)dice:</target>
        </trans-unit>
        <trans-unit id="4a496911a1450193efc097e191321a84e102d3d2" translate="yes" xml:space="preserve">
          <source>The Microsoft &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Visual_Studio_2005&quot;&gt;Visual&amp;nbsp;Studio&amp;nbsp;2005&lt;/a&gt; version of &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/6wd819wh%28v=vs.80%29.aspx&quot;&gt;this page&lt;/a&gt; does not list &lt;code&gt;void main()&lt;/code&gt; as an alternative.  The &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/6wd819wh%28v=vs.90%29.aspx&quot;&gt;versions&lt;/a&gt; from Microsoft &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Visual_Studio_2008&quot;&gt;Visual&amp;nbsp;Studio&amp;nbsp;2008&lt;/a&gt; onwards do.</source>
          <target state="translated">La versi&amp;oacute;n de Microsoft &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Visual_Studio_2005&quot;&gt;Visual Studio 2005&lt;/a&gt; de &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/6wd819wh%28v=vs.80%29.aspx&quot;&gt;esta p&amp;aacute;gina&lt;/a&gt; no incluye &lt;code&gt;void main()&lt;/code&gt; como alternativa. Las &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/6wd819wh%28v=vs.90%29.aspx&quot;&gt;versiones&lt;/a&gt; de Microsoft &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Visual_Studio_2008&quot;&gt;Visual Studio 2008 en&lt;/a&gt; adelante s&amp;iacute;.</target>
        </trans-unit>
        <trans-unit id="33cca83a9e2b339c3446cbab746394360baf8d65" translate="yes" xml:space="preserve">
          <source>The Microsoft page also lists some other alternatives &amp;mdash; &lt;code&gt;wmain()&lt;/code&gt; which takes wide character strings, and some more.</source>
          <target state="translated">La p&amp;aacute;gina de Microsoft tambi&amp;eacute;n enumera algunas otras alternativas: &lt;code&gt;wmain()&lt;/code&gt; que toma cadenas de caracteres anchas, y algunas m&amp;aacute;s.</target>
        </trans-unit>
        <trans-unit id="7b0070d4ea6e95a967d24e8102c2d33f422b3fe2" translate="yes" xml:space="preserve">
          <source>The accepted answer appears to be targetted for C++, so I thought I'd add an answer that pertains to C, and this differs in a few ways.</source>
          <target state="translated">La respuesta aceptada parece estar dirigida a C++,así que pensé en añadir una respuesta que se refiere a C,y esto difiere en algunos aspectos.</target>
        </trans-unit>
        <trans-unit id="546b26c20b5018e8e91b597a6abc305d7ad960ec" translate="yes" xml:space="preserve">
          <source>The behavior of the arguments to main, and of the interaction of exit, main and atexit
  (see &amp;sect;7.20.4.2) has been codified to curb some unwanted variety in the representation of argv
  strings, and in the meaning of values returned by main.</source>
          <target state="translated">El comportamiento de los argumentos a main, y de la interacci&amp;oacute;n de exit, main y atexit (ver &amp;sect;7.20.4.2) se ha codificado para frenar alguna variedad no deseada en la representaci&amp;oacute;n de cadenas argv y en el significado de los valores devueltos por main.</target>
        </trans-unit>
        <trans-unit id="a1332b3e9a470eb6ea2ea721bb6e42f19fd7ef60" translate="yes" xml:space="preserve">
          <source>The cross-reference to clause 4 Conformance refers to this:</source>
          <target state="translated">La referencia cruzada a la cláusula 4 Conformidad se refiere a esto:</target>
        </trans-unit>
        <trans-unit id="dc11d899a2bbef6b7ca7ebc05f3a76f63e6b3145" translate="yes" xml:space="preserve">
          <source>The declaration syntax for main is</source>
          <target state="translated">La sintaxis de la declaración para el principal es</target>
        </trans-unit>
        <trans-unit id="54d077d6bc220b344cc0c2c98d6bff99a69286f5" translate="yes" xml:space="preserve">
          <source>The effect of program termination in a freestanding environment is implementation-defined.</source>
          <target state="translated">El efecto de la terminación del programa en un entorno independiente está definido por la implementación.</target>
        </trans-unit>
        <trans-unit id="d7cf7c56944bc0e60c66b4dd6a3630c1023a7db0" translate="yes" xml:space="preserve">
          <source>The former two are explicitly stated as the allowed forms, the others are implicitly allowed because C90 allowed &quot;implicit int&quot; for return type and function parameters. No other form is allowed.</source>
          <target state="translated">Las dos primeras se indican explícitamente como las formas permitidas,las otras están permitidas implícitamente porque el C90 permitía &quot;int implícita&quot; para los parámetros de tipo y función de retorno.No se permite ninguna otra forma.</target>
        </trans-unit>
        <trans-unit id="026f98c964de0d94f5fb9b6a1e303e50bcc1cdd6" translate="yes" xml:space="preserve">
          <source>The function called at program startup is named &lt;code&gt;main&lt;/code&gt;. The implementation declares no
  prototype for this function. It shall be defined with a return type of &lt;code&gt;int&lt;/code&gt; and with no
  parameters:</source>
          <target state="translated">La funci&amp;oacute;n llamada al inicio del programa se llama &lt;code&gt;main&lt;/code&gt; . La implementaci&amp;oacute;n no declara ning&amp;uacute;n prototipo para esta funci&amp;oacute;n. Se definir&amp;aacute; con un tipo de retorno de &lt;code&gt;int&lt;/code&gt; y sin par&amp;aacute;metros:</target>
        </trans-unit>
        <trans-unit id="ca5968af6b9e074a35418f4f286474743cccbd2c" translate="yes" xml:space="preserve">
          <source>The function called at program startup is named main. The
  implementation declares no prototype for this function. It shall be
  defined with a return type of int and with no parameters:</source>
          <target state="translated">La función llamada al inicio del programa se llama principal.La implementación no declara ningún prototipo para esta función.Se definirá con un tipo de retorno de int y sin parámetros:</target>
        </trans-unit>
        <trans-unit id="0ae03504835ac4c96ab05373731aeafea22c07c0" translate="yes" xml:space="preserve">
          <source>The name of the function called at startup is implementation-defined. If it is named &lt;code&gt;main()&lt;/code&gt; it must follow the stated forms &lt;sup&gt;10&lt;/sup&gt;:</source>
          <target state="translated">El nombre de la funci&amp;oacute;n llamada al inicio est&amp;aacute; definido por la implementaci&amp;oacute;n. Si se llama &lt;code&gt;main()&lt;/code&gt; , debe seguir los formularios indicados &lt;sup&gt;10&lt;/sup&gt; :</target>
        </trans-unit>
        <trans-unit id="42cedb16b5fd329909d8d618d881e9149d7c8ddf" translate="yes" xml:space="preserve">
          <source>The name of the function called at startup is implementation-defined. If it is named &lt;code&gt;main()&lt;/code&gt; it must follow the stated forms &lt;sup&gt;12&lt;/sup&gt;:</source>
          <target state="translated">El nombre de la funci&amp;oacute;n llamada al inicio est&amp;aacute; definido por la implementaci&amp;oacute;n. Si se llama &lt;code&gt;main()&lt;/code&gt; , debe seguir los formularios indicados &lt;sup&gt;12&lt;/sup&gt; :</target>
        </trans-unit>
        <trans-unit id="f411eabfea18f4d722bb32c090c81895998e01e5" translate="yes" xml:space="preserve">
          <source>The parameters &lt;code&gt;argc&lt;/code&gt; and &lt;code&gt;argv&lt;/code&gt; and the strings pointed to by the &lt;code&gt;argv&lt;/code&gt; array shall
  be modifiable by the program, and retain their last-stored values between program
  startup and program termination.</source>
          <target state="translated">Los par&amp;aacute;metros &lt;code&gt;argc&lt;/code&gt; y &lt;code&gt;argv&lt;/code&gt; y las cadenas se&amp;ntilde;aladas por la matriz &lt;code&gt;argv&lt;/code&gt; ser&amp;aacute;n modificables por el programa y conservar&amp;aacute;n sus &amp;uacute;ltimos valores almacenados entre el inicio y la finalizaci&amp;oacute;n del programa.</target>
        </trans-unit>
        <trans-unit id="71f2b4381bd48e53fc5bf7bb37600cda30ef7a72" translate="yes" xml:space="preserve">
          <source>The return type of &lt;code&gt;main()&lt;/code&gt; function</source>
          <target state="translated">El tipo de retorno de la funci&amp;oacute;n &lt;code&gt;main()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30c22afa61a69f090f04a4b51d6f0da94397dc2d" translate="yes" xml:space="preserve">
          <source>The return value can be used by the operating system to check how the program was closed.</source>
          <target state="translated">El valor de retorno puede ser usado por el sistema operativo para comprobar cómo se cerró el programa.</target>
        </trans-unit>
        <trans-unit id="ba1f12ca047f8d89e6d47cc78475d9dc71642ebe" translate="yes" xml:space="preserve">
          <source>The return value for &lt;code&gt;main&lt;/code&gt; indicates how the program exited. Normal exit is represented by a 0 return value from &lt;code&gt;main&lt;/code&gt;. Abnormal exit is signaled by a non-zero return, but there is no standard for how non-zero codes are interpreted. As noted by others, &lt;code&gt;void main()&lt;/code&gt; is prohibited by the C++ standard and should not be used. The valid C++ &lt;code&gt;main&lt;/code&gt; signatures are:</source>
          <target state="translated">El valor de retorno de &lt;code&gt;main&lt;/code&gt; indica c&amp;oacute;mo sali&amp;oacute; el programa. La salida normal est&amp;aacute; representada por un valor de retorno 0 de &lt;code&gt;main&lt;/code&gt; . La salida anormal se indica mediante un retorno distinto de cero, pero no existe un est&amp;aacute;ndar sobre c&amp;oacute;mo se interpretan los c&amp;oacute;digos distintos de cero. Como han se&amp;ntilde;alado otros, &lt;code&gt;void main()&lt;/code&gt; est&amp;aacute; prohibido por el est&amp;aacute;ndar C ++ y no debe usarse. Las firmas &lt;code&gt;main&lt;/code&gt; v&amp;aacute;lidas de C ++ son:</target>
        </trans-unit>
        <trans-unit id="22dbe4ab7277e0bacb463020855fe29f4a135940" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;main()&lt;/code&gt; shows how the program exited. If the return value is &lt;code&gt;zero&lt;/code&gt; it means that the execution was successful while any non-zero value will represent that something went bad in the execution.</source>
          <target state="translated">El valor de retorno de &lt;code&gt;main()&lt;/code&gt; muestra c&amp;oacute;mo sali&amp;oacute; el programa. Si el valor de retorno es &lt;code&gt;zero&lt;/code&gt; , significa que la ejecuci&amp;oacute;n fue exitosa, mientras que cualquier valor distinto de cero representar&amp;aacute; que algo sali&amp;oacute; mal en la ejecuci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="e22ad7a310bc1d275667315bd2dea731a9a4ebdc" translate="yes" xml:space="preserve">
          <source>The specification of argc and argv as arguments to main recognizes extensive prior practice.
  argv[argc] is required to be a null pointer to provide a redundant check for the end of the list, also on the basis of common practice.</source>
          <target state="translated">La especificación de argc y argv como argumentos a principal reconoce una amplia práctica previa.argv[argc]debe ser un puntero nulo para proporcionar una comprobación redundante para el final de la lista,también sobre la base de la práctica común.</target>
        </trans-unit>
        <trans-unit id="8e2e310f8d276bce8425174414a371db8d39f43f" translate="yes" xml:space="preserve">
          <source>The standard &amp;sect;5.1.2.2.1 of the C11 standard shows the preferred notation &amp;mdash;&amp;nbsp;&lt;code&gt;int main(void)&lt;/code&gt; &amp;mdash; but there are also two examples in the standard which show &lt;code&gt;int main()&lt;/code&gt;: &lt;a href=&quot;https://port70.net/~nsz/c/c11/n1570.html#6.5.3.4p8&quot;&gt;&amp;sect;6.5.3.4 &amp;para;8&lt;/a&gt; and &lt;a href=&quot;https://port70.net/~nsz/c/c11/n1570.html#6.7.6.3p20&quot;&gt;&amp;sect;6.7.6.3 &amp;para;20&lt;/a&gt;.  Now, it is important to note that examples are not 'normative'; they are only illustrative.  If there are bugs in the examples, they do not directly affect the main text of the standard.  That said, they are strongly indicative of expected behaviour, so if the standard includes &lt;code&gt;int main()&lt;/code&gt; in an example, it suggests that &lt;code&gt;int main()&lt;/code&gt; is not forbidden, even if it is not the preferred notation.</source>
          <target state="translated">El est&amp;aacute;ndar &amp;sect;5.1.2.2.1 del est&amp;aacute;ndar C11 muestra la notaci&amp;oacute;n preferida - &lt;code&gt;int main(void)&lt;/code&gt; - pero tambi&amp;eacute;n hay dos ejemplos en el est&amp;aacute;ndar que muestran &lt;code&gt;int main()&lt;/code&gt; : &lt;a href=&quot;https://port70.net/~nsz/c/c11/n1570.html#6.5.3.4p8&quot;&gt;&amp;sect;6.5.3.4 &amp;para;8&lt;/a&gt; y &lt;a href=&quot;https://port70.net/~nsz/c/c11/n1570.html#6.7.6.3p20&quot;&gt;&amp;sect;6.7.6.3 &amp;para;20&lt;/a&gt; . Ahora, es importante tener en cuenta que los ejemplos no son 'normativos'; son solo ilustrativos. Si hay errores en los ejemplos, no afectan directamente el texto principal del est&amp;aacute;ndar. Dicho esto, son muy indicativos del comportamiento esperado, por lo que si el est&amp;aacute;ndar incluye &lt;code&gt;int main()&lt;/code&gt; en un ejemplo, sugiere que &lt;code&gt;int main()&lt;/code&gt; no est&amp;aacute; prohibido, incluso si no es la notaci&amp;oacute;n preferida.</target>
        </trans-unit>
        <trans-unit id="21097dd912cf311cfdb6f22df1d0503ba8d3b181" translate="yes" xml:space="preserve">
          <source>The standard defines 3 values for returning that are strictly conforming (that is, does not rely on implementation defined behaviour): &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; for a successful termination, and &lt;code&gt;EXIT_FAILURE&lt;/code&gt; for an unsuccessful termination. Any other values are non-standard and implementation defined. &lt;code&gt;main()&lt;/code&gt; must have an explicit &lt;code&gt;return&lt;/code&gt; statement at the end to avoid undefined behaviour.</source>
          <target state="translated">El est&amp;aacute;ndar define 3 valores para el retorno que son estrictamente conformes (es decir, no se basa en el comportamiento definido por la implementaci&amp;oacute;n): &lt;code&gt;0&lt;/code&gt; y &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; para una terminaci&amp;oacute;n exitosa, y &lt;code&gt;EXIT_FAILURE&lt;/code&gt; para una terminaci&amp;oacute;n fallida. Cualquier otro valor no es est&amp;aacute;ndar y su implementaci&amp;oacute;n est&amp;aacute; definida. &lt;code&gt;main()&lt;/code&gt; debe tener una declaraci&amp;oacute;n de &lt;code&gt;return&lt;/code&gt; expl&amp;iacute;cita al final para evitar un comportamiento indefinido.</target>
        </trans-unit>
        <trans-unit id="04c357fe47330fd474b14115ca9a3a38ddbd2e54" translate="yes" xml:space="preserve">
          <source>The supplied version of the header &lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt; shall declare at least the functions &lt;code&gt;abort&lt;/code&gt;, &lt;code&gt;atexit&lt;/code&gt;, &lt;code&gt;at_quick_exit&lt;/code&gt;, &lt;code&gt;exit&lt;/code&gt;, and &lt;code&gt;quick_exit&lt;/code&gt; (18.5). The other headers listed in this table shall meet the same requirements as for a hosted implementation.</source>
          <target state="translated">La versi&amp;oacute;n suministrada del encabezado &lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt; declarar&amp;aacute; al menos las funciones &lt;code&gt;abort&lt;/code&gt; , &lt;code&gt;atexit&lt;/code&gt; , &lt;code&gt;at_quick_exit&lt;/code&gt; , &lt;code&gt;exit&lt;/code&gt; y &lt;code&gt;quick_exit&lt;/code&gt; (18.5). Los otros encabezados enumerados en esta tabla deber&amp;aacute;n cumplir los mismos requisitos que para una implementaci&amp;oacute;n hospedada.</target>
        </trans-unit>
        <trans-unit id="215b83b15446fc6e768d7de47de3d64d6250e81c" translate="yes" xml:space="preserve">
          <source>The text of the standard has been changed but it has the same meaning.</source>
          <target state="translated">El texto de la norma ha sido cambiado pero tiene el mismo significado.</target>
        </trans-unit>
        <trans-unit id="3a96141f4a269d89eae9927fca95e222c0774ce2" translate="yes" xml:space="preserve">
          <source>The third argument is a null-terminated list of pointers to strings, each of which is an environment variable which has a name, an equals sign, and a value (possibly empty).  If you do not use this, you can still get at the environment via '&lt;code&gt;extern char **environ;&lt;/code&gt;'.  This global variable is unique among those in POSIX in that it does not have a header that declares it.</source>
          <target state="translated">El tercer argumento es una lista terminada en nulo de punteros a cadenas, cada una de las cuales es una variable de entorno que tiene un nombre, un signo de igual y un valor (posiblemente vac&amp;iacute;o). Si no usa esto, a&amp;uacute;n puede acceder al medio ambiente a trav&amp;eacute;s de ' &lt;code&gt;extern char **environ;&lt;/code&gt; '. Esta variable global es &amp;uacute;nica entre aquellos en POSIX en que no tiene un encabezado que la declare.</target>
        </trans-unit>
        <trans-unit id="f1917f923748d24954167ac87cbedac4efe8c562" translate="yes" xml:space="preserve">
          <source>The use of function declarators with empty parentheses (not prototype-format parameter type declarators) is an obsolescent feature.</source>
          <target state="translated">El uso de declaradores de funciones con paréntesis vacíos (no declaradores de parámetros de formato prototipo)es una característica obsoleta.</target>
        </trans-unit>
        <trans-unit id="1e1d1d4c80a34abbd78d532e533e8e32a26baa46" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;argc&lt;/code&gt; shall be nonnegative.</source>
          <target state="translated">El valor de &lt;code&gt;argc&lt;/code&gt; no ser&amp;aacute; negativo.</target>
        </trans-unit>
        <trans-unit id="3b6837137519a235145649ca26f22f77d0ac5ffc" translate="yes" xml:space="preserve">
          <source>The value returned from &lt;code&gt;main()&lt;/code&gt; is transmitted to the 'environment' in an implementation-defined way.</source>
          <target state="translated">El valor devuelto por &lt;code&gt;main()&lt;/code&gt; se transmite al 'entorno' de una manera definida por la implementaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="ca8a9e03a294ed095d6a449285082fc38a13cce6" translate="yes" xml:space="preserve">
          <source>There's a paragraph of &amp;sect;18.5 &lt;strong&gt;Start and termination&lt;/strong&gt; in the C++11 standard that is identical to the paragraph from &amp;sect;7.22.4.4 &lt;strong&gt;The &lt;code&gt;exit&lt;/code&gt; function&lt;/strong&gt; in the C11 standard (quoted above), apart from a footnote (which simply documents that &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; and &lt;code&gt;EXIT_FAILURE&lt;/code&gt; are defined in &lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">Hay un p&amp;aacute;rrafo de &amp;sect;18.5 &lt;strong&gt;Inicio y terminaci&amp;oacute;n&lt;/strong&gt; en el est&amp;aacute;ndar C ++ 11 que es id&amp;eacute;ntico al p&amp;aacute;rrafo de &amp;sect;7.22.4.4 &lt;strong&gt;La funci&amp;oacute;n de &lt;code&gt;exit&lt;/code&gt; &lt;/strong&gt; en el est&amp;aacute;ndar C11 (citado anteriormente), aparte de una nota al pie (que simplemente documenta que &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; y &lt;code&gt;EXIT_FAILURE&lt;/code&gt; se definen en &lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="8878897f94a88e2eb0a72b92a1a8eea14341dd7c" translate="yes" xml:space="preserve">
          <source>This is recognized by the C standard as a common extension, documented in Annex J:</source>
          <target state="translated">Esto se reconoce en la norma C como una extensión común,documentada en el Anexo J:</target>
        </trans-unit>
        <trans-unit id="90c926db372e34ff57f910bfc2a6bb307fd78475" translate="yes" xml:space="preserve">
          <source>This is some example in order to check how grep works.</source>
          <target state="translated">Este es un ejemplo para comprobar cómo funciona el grep.</target>
        </trans-unit>
        <trans-unit id="d9135e4649a5add9899348971cdf27790adec503" translate="yes" xml:space="preserve">
          <source>This section is identical to the C++03 one cited above.</source>
          <target state="translated">Esta sección es idéntica a la de C++03 citada anteriormente.</target>
        </trans-unit>
        <trans-unit id="aff26f54c08ac6a220e320cf88a1cc85885f4a3d" translate="yes" xml:space="preserve">
          <source>This section is identical to the C99 one cited above.</source>
          <target state="translated">Esta sección es idéntica a la del C99 citada anteriormente.</target>
        </trans-unit>
        <trans-unit id="492f852c402b8701a3d8ac1e786125fd366f3983" translate="yes" xml:space="preserve">
          <source>This way you can see that it is the variable &lt;code&gt;$?&lt;/code&gt; which receives the least significant byte of the return value of &lt;code&gt;main()&lt;/code&gt;.</source>
          <target state="translated">De esta manera puedes ver que es la variable &lt;code&gt;$?&lt;/code&gt; que recibe el byte menos significativo del valor de retorno de &lt;code&gt;main()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="083f523a48b50dec805c4b80d1381d0a4f4fa86b" translate="yes" xml:space="preserve">
          <source>Those words &quot;(most efficient)&quot; don't change the question.  Unless you're in a freestanding environment, there is one universally correct way to declare &lt;code&gt;main()&lt;/code&gt;, and that's as returning int.</source>
          <target state="translated">Esas palabras &quot;(m&amp;aacute;s eficiente)&quot; no cambian la pregunta. A menos que se encuentre en un entorno independiente, hay una forma universalmente correcta de declarar &lt;code&gt;main()&lt;/code&gt; , y es como regresar int.</target>
        </trans-unit>
        <trans-unit id="dd1d619c61e03e7c3983d9cf6e51c9a460b55ae1" translate="yes" xml:space="preserve">
          <source>Two execution environments are defined: freestanding and hosted. In both cases,
  program startup occurs when a designated C function is called by the execution
  environment. All objects with static storage duration shall be initialized (set to their initial values) before program startup. The manner and timing of such initialization are otherwise unspecified. Program termination returns control to the execution environment.</source>
          <target state="translated">Se definen dos entornos de ejecución:autónomo y alojado.En ambos casos,el inicio del programa se produce cuando el entorno de ejecución llama a una función C designada.Todos los objetos con una duración de almacenamiento estático se inicializarán (se ajustarán a sus valores iniciales)antes del inicio del programa.Por lo demás,no se especifica la forma y el momento de dicha inicialización.La terminación del programa devuelve el control al entorno de ejecución.</target>
        </trans-unit>
        <trans-unit id="7e6d901cc3741eac5e0d54d5f5f6b0f0c7091f78" translate="yes" xml:space="preserve">
          <source>Two kinds of implementations are defined: hosted and freestanding (1.4). For a hosted implementation, this International Standard describes the set of available headers.</source>
          <target state="translated">Se definen dos tipos de implementaciones:alojadas y autónomas (1.4).En el caso de una implementación alojada,esta Norma Internacional describe el conjunto de encabezamientos disponibles.</target>
        </trans-unit>
        <trans-unit id="c8ffe25090b0726f102193ed465ce10faae40214" translate="yes" xml:space="preserve">
          <source>What about using &lt;code&gt;int main()&lt;/code&gt; in C?</source>
          <target state="translated">&amp;iquest;Qu&amp;eacute; pasa con el uso de &lt;code&gt;int main()&lt;/code&gt; en C?</target>
        </trans-unit>
        <trans-unit id="8db9388f551bf79763f6d366a53d00645a18b452" translate="yes" xml:space="preserve">
          <source>What are the valid signatures for C's &lt;code&gt;main()&lt;/code&gt; function?</source>
          <target state="translated">&amp;iquest;Cu&amp;aacute;les son las firmas v&amp;aacute;lidas para la funci&amp;oacute;n &lt;code&gt;main()&lt;/code&gt; C?</target>
        </trans-unit>
        <trans-unit id="e375a0bb38b5733f5e33aea178300914bf1fc13b" translate="yes" xml:space="preserve">
          <source>What is the correct (most efficient) way to define the &lt;code&gt;main()&lt;/code&gt; function in C and C++ &amp;mdash; &lt;code&gt;int main()&lt;/code&gt; or &lt;code&gt;void main()&lt;/code&gt; &amp;mdash; and why? 
If &lt;code&gt;int main()&lt;/code&gt; then &lt;code&gt;return 1&lt;/code&gt; or &lt;code&gt;return 0&lt;/code&gt;?</source>
          <target state="translated">&amp;iquest;Cu&amp;aacute;l es la forma correcta (m&amp;aacute;s eficiente) de definir la funci&amp;oacute;n &lt;code&gt;main()&lt;/code&gt; en C y C ++ - &lt;code&gt;int main()&lt;/code&gt; o &lt;code&gt;void main()&lt;/code&gt; - y por qu&amp;eacute;? Si &lt;code&gt;int main()&lt;/code&gt; entonces &lt;code&gt;return 1&lt;/code&gt; o &lt;code&gt;return 0&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="ac7910d8738d0f6edbbbc837537320cc7243db50" translate="yes" xml:space="preserve">
          <source>What is the correct (most efficient) way to define the main() function in C and C++ &amp;mdash; int main() or void main() &amp;mdash; and why?</source>
          <target state="translated">&amp;iquest;Cu&amp;aacute;l es la forma correcta (m&amp;aacute;s eficiente) de definir la funci&amp;oacute;n main () en C y C ++ - int main () o void main () - y por qu&amp;eacute;?</target>
        </trans-unit>
        <trans-unit id="b6fa6e7eb3c56c5443ca329d417a88f4f68960be" translate="yes" xml:space="preserve">
          <source>What should &lt;code&gt;main()&lt;/code&gt; return in C and C++?</source>
          <target state="translated">&amp;iquest;Qu&amp;eacute; deber&amp;iacute;a devolver &lt;code&gt;main()&lt;/code&gt; en C y C ++?</target>
        </trans-unit>
        <trans-unit id="486019aa245ddcb5e5499f2b26db2df46e934c65" translate="yes" xml:space="preserve">
          <source>What should main() return in C and C++</source>
          <target state="translated">Lo que debería devolver main()en C y C++</target>
        </trans-unit>
        <trans-unit id="30ef05539959ff243c4e180d8cd581aaf97379b0" translate="yes" xml:space="preserve">
          <source>What to return depends on what you want to do with the executable. For example if you are using your program with a command line shell, then you need to return 0 for a success and a non zero for failure. Then you would be able to use the program in shells with conditional processing depending on the outcome of your code. Also you can assign any nonzero value as per your interpretation, for example for critical errors different program exit points could terminate a program with different exit values , and which is available to the calling shell which can decide what to do by inspecting the value returned.
If the code is not intended for use with shells and the returned value does not bother anybody then it might be omitted. I personally use the signature &lt;code&gt;int main (void) { .. return 0; .. }&lt;/code&gt;</source>
          <target state="translated">Qu&amp;eacute; devolver depende de lo que desee hacer con el ejecutable. Por ejemplo, si est&amp;aacute; utilizando su programa con un shell de l&amp;iacute;nea de comandos, debe devolver 0 para un &amp;eacute;xito y un valor distinto de cero para el fracaso. Entonces podr&amp;aacute; utilizar el programa en shells con procesamiento condicional dependiendo del resultado de su c&amp;oacute;digo. Tambi&amp;eacute;n puede asignar cualquier valor distinto de cero seg&amp;uacute;n su interpretaci&amp;oacute;n, por ejemplo, para errores cr&amp;iacute;ticos, diferentes puntos de salida del programa podr&amp;iacute;an terminar un programa con diferentes valores de salida, y que est&amp;aacute; disponible para el shell de llamada que puede decidir qu&amp;eacute; hacer al inspeccionar el valor devuelto. Si el c&amp;oacute;digo no est&amp;aacute; destinado a usarse con shells y el valor devuelto no molesta a nadie, entonces podr&amp;iacute;a omitirse. Yo personalmente uso la firma &lt;code&gt;int main (void) { .. return 0; .. }&lt;/code&gt; ..}</target>
        </trans-unit>
        <trans-unit id="23877bc0573cb6974d91820ac2c5704526b909c4" translate="yes" xml:space="preserve">
          <source>When a C or C++ program reaches the end of &lt;code&gt;main&lt;/code&gt; the compiler will automatically generate code to return 0, so there is no need to put &lt;code&gt;return 0;&lt;/code&gt; explicitly at the end of &lt;code&gt;main&lt;/code&gt;.</source>
          <target state="translated">Cuando un programa C o C ++ llega al final de &lt;code&gt;main&lt;/code&gt; , el compilador generar&amp;aacute; autom&amp;aacute;ticamente c&amp;oacute;digo para devolver 0, por lo que no es necesario poner &lt;code&gt;return 0;&lt;/code&gt; expl&amp;iacute;citamente al final de &lt;code&gt;main&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c0ff9c6d19528fc5ecbf1d4fd6390af8df49063b" translate="yes" xml:space="preserve">
          <source>When using the various tools that the Linux terminal provides one can use the return code for example for error handling after the process has been completed. Imagine that the following text file myfile is present:</source>
          <target state="translated">Cuando se utilizan las diversas herramientas que proporciona la terminal de Linux se puede utilizar el código de retorno,por ejemplo,para el tratamiento de errores después de que el proceso haya finalizado.Imagine que el siguiente archivo de texto myfile está presente:</target>
        </trans-unit>
        <trans-unit id="1ed64c1ea746c88bec38d149c99f20765bec153b" translate="yes" xml:space="preserve">
          <source>When you execute the grep command a process is created. Once it is through (and didn't break) it returns some code between 0 and 255. For example:</source>
          <target state="translated">Cuando ejecutas el comando grep se crea un proceso.Una vez que ha terminado (y no se ha roto)devuelve algún código entre 0 y 255.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="96e3de3e6bf17276eac99869ea88fc0e71150b83" translate="yes" xml:space="preserve">
          <source>Why does &lt;code&gt;int main(){}&lt;/code&gt; compile?</source>
          <target state="translated">&amp;iquest;Por qu&amp;eacute; compila &lt;code&gt;int main(){}&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="51b0c9e4f517672dab551e3f0c8fb3a773467020" translate="yes" xml:space="preserve">
          <source>Why is the type of the &lt;code&gt;main()&lt;/code&gt; function in C and C++ left to the user to define?</source>
          <target state="translated">&amp;iquest;Por qu&amp;eacute; el tipo de la funci&amp;oacute;n &lt;code&gt;main()&lt;/code&gt; en C y C ++ se deja al usuario para definir?</target>
        </trans-unit>
        <trans-unit id="2a862fb41af52a34873a9b301706a972cab7022b" translate="yes" xml:space="preserve">
          <source>Yet the section for hosted environment program termination then goes on arguing about the case where main does not return int &lt;sup&gt;5&lt;/sup&gt;. Although that section is not normative for how main should be declared, it definitely implies that main might be declared in a completely implementation-defined way even on hosted systems.</source>
          <target state="translated">Sin embargo, la secci&amp;oacute;n para la finalizaci&amp;oacute;n del programa de entorno alojado contin&amp;uacute;a discutiendo sobre el caso en el que main no devuelve int &lt;sup&gt;5&lt;/sup&gt; . Aunque esa secci&amp;oacute;n no es normativa sobre c&amp;oacute;mo debe declararse main, definitivamente implica que main podr&amp;iacute;a declararse de una manera completamente definida por la implementaci&amp;oacute;n, incluso en sistemas alojados.</target>
        </trans-unit>
        <trans-unit id="922180965ea438bfff3906a2def9f2352b5adb9b" translate="yes" xml:space="preserve">
          <source>You may omit the return statement from &lt;code&gt;main()&lt;/code&gt;. If you do, and &lt;code&gt;main()&lt;/code&gt; finished, there is an implicit &lt;code&gt;return 0&lt;/code&gt;.</source>
          <target state="translated">Puede omitir la declaraci&amp;oacute;n de devoluci&amp;oacute;n de &lt;code&gt;main()&lt;/code&gt; . Si lo hace, y &lt;code&gt;main()&lt;/code&gt; finaliza, hay un &lt;code&gt;return 0&lt;/code&gt; impl&amp;iacute;cito 0 .</target>
        </trans-unit>
        <trans-unit id="ab226733ba35ae01df11c0190457de2d507d24e6" translate="yes" xml:space="preserve">
          <source>[...] a return from the initial call to the &lt;code&gt;main&lt;/code&gt; function is equivalent to calling the &lt;code&gt;exit&lt;/code&gt; function with the value returned by the &lt;code&gt;main&lt;/code&gt; function as its argument; reaching the &lt;code&gt;}&lt;/code&gt; that terminates the &lt;code&gt;main&lt;/code&gt; function returns a value of 0.</source>
          <target state="translated">[...] un retorno de la llamada inicial a la funci&amp;oacute;n &lt;code&gt;main&lt;/code&gt; es equivalente a llamar a la funci&amp;oacute;n de &lt;code&gt;exit&lt;/code&gt; con el valor devuelto por la funci&amp;oacute;n &lt;code&gt;main&lt;/code&gt; como argumento; alcanzar el &lt;code&gt;}&lt;/code&gt; que termina la funci&amp;oacute;n &lt;code&gt;main&lt;/code&gt; devuelve un valor de 0.</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="121d20b5045a7b17be1953b2f4b5b7d1193aba4f" translate="yes" xml:space="preserve">
          <source>as the type of main (8.3.5).</source>
          <target state="translated">como el tipo de principal (8.3.5).</target>
        </trans-unit>
        <trans-unit id="8b4ea7908f3a8fca63af0e6ad2f61e8268c4885d" translate="yes" xml:space="preserve">
          <source>main is the only function that may portably be declared either with zero or two arguments. (The number of other functions&amp;rsquo; arguments must match exactly between invocation and definition.)
  This special case simply recognizes the widespread practice of leaving off the arguments to main when the program does not access the program argument strings. While many implementations support more than two arguments to main, such practice is neither blessed nor forbidden by the Standard; a program that defines main with three arguments is not strictly conforming (see &amp;sect;J.5.1.).</source>
          <target state="translated">main es la &amp;uacute;nica funci&amp;oacute;n que se puede declarar de forma port&amp;aacute;til con cero o dos argumentos. (El n&amp;uacute;mero de argumentos de otras funciones debe coincidir exactamente entre invocaci&amp;oacute;n y definici&amp;oacute;n). Este caso especial simplemente reconoce la pr&amp;aacute;ctica generalizada de dejar los argumentos a main cuando el programa no accede a las cadenas de argumentos del programa. Si bien muchas implementaciones admiten m&amp;aacute;s de dos argumentos para main, dicha pr&amp;aacute;ctica no es bendecida ni prohibida por el Est&amp;aacute;ndar; un programa que define main con tres argumentos no es estrictamente conforme (ver &amp;sect;J.5.1.).</target>
        </trans-unit>
        <trans-unit id="622f82e8c075ada716a1cc9582aedc7d512d29d9" translate="yes" xml:space="preserve">
          <source>or equivalent;9) or in some other implementation-defined
  manner.</source>
          <target state="translated">o equivalente9)o de alguna otra manera definida por la aplicación.</target>
        </trans-unit>
        <trans-unit id="1afe888428199267b8fb21832c373dab7f683445" translate="yes" xml:space="preserve">
          <source>or equivalent;&lt;sup&gt;10)&lt;/sup&gt; or in some other implementation-defined manner.</source>
          <target state="translated">o equivalente; &lt;sup&gt;10)&lt;/sup&gt; o de alguna otra manera definida por la implementaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="6270e8159f1807e121f60a87d982221f41402076" translate="yes" xml:space="preserve">
          <source>or with two parameters (referred to here as
  argc and argv, though any names may be used, as they are local to the
  function in which they are declared):</source>
          <target state="translated">o con dos parámetros (denominados aquí argc y argv,aunque se puede utilizar cualquier nombre,ya que son locales a la función en la que se declaran):</target>
        </trans-unit>
        <trans-unit id="c5dae6252c11ab5b0df3caf711c397701d6124cd" translate="yes" xml:space="preserve">
          <source>or with two parameters (referred to here as &lt;code&gt;argc&lt;/code&gt; and &lt;code&gt;argv&lt;/code&gt;, though any names may be
  used, as they are local to the function in which they are declared):</source>
          <target state="translated">o con dos par&amp;aacute;metros (referidos aqu&amp;iacute; como &lt;code&gt;argc&lt;/code&gt; y &lt;code&gt;argv&lt;/code&gt; , aunque se pueden usar cualquier nombre, ya que son locales para la funci&amp;oacute;n en la que se declaran):</target>
        </trans-unit>
        <trans-unit id="f8a458ef7b858ad564adb1ed9a5adbf1c78ddb73" translate="yes" xml:space="preserve">
          <source>or, optionally,</source>
          <target state="translated">o,opcionalmente,</target>
        </trans-unit>
        <trans-unit id="04c6ac4120301d7049af98011b0e572414db64b0" translate="yes" xml:space="preserve">
          <source>which is equivalent to</source>
          <target state="translated">que es equivalente a</target>
        </trans-unit>
        <trans-unit id="e7bb9db27381610dba7df259669ffd179effc729" translate="yes" xml:space="preserve">
          <source>you will get a 0. Why? Because &lt;a href=&quot;http://en.wikipedia.org/wiki/Grep&quot;&gt;grep&lt;/a&gt; found a match and returned an exit code 0, which is the usual value for exiting with a success. Let's check it out again but with something that is not inside our text file and thus no match will be found:</source>
          <target state="translated">obtendr&amp;aacute;s un 0. &amp;iquest;Por qu&amp;eacute;? Porque &lt;a href=&quot;http://en.wikipedia.org/wiki/Grep&quot;&gt;grep&lt;/a&gt; encontr&amp;oacute; una coincidencia y devolvi&amp;oacute; un c&amp;oacute;digo de salida 0, que es el valor habitual para salir con &amp;eacute;xito. Vamos a verlo de nuevo pero con algo que no est&amp;aacute; dentro de nuestro archivo de texto y, por lo tanto, no se encontrar&amp;aacute;n coincidencias:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
