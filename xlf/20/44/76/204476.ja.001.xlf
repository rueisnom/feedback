<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/204476">
    <body>
      <group id="204476">
        <trans-unit id="839e4a2006b278a93c4dc0f1936567078302c3f3" translate="yes" xml:space="preserve">
          <source>&amp;hellip;</source>
          <target state="translated">&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="f63367f1516d04e6d4576f54a6d715fa5519616b" translate="yes" xml:space="preserve">
          <source>&amp;mdash; a function of () returning int and</source>
          <target state="translated">&amp;mdash;（）の関数がintを返す</target>
        </trans-unit>
        <trans-unit id="e3f10b4fa0118c5d90b758f3a7a22ecd6eddcb20" translate="yes" xml:space="preserve">
          <source>&amp;mdash; a function of (int, pointer to pointer to char) returning int</source>
          <target state="translated">&amp;mdash;（int、charへのポインタへのポインタ）の関数がintを返す</target>
        </trans-unit>
        <trans-unit id="de2b84f7b4965ccad1f31acc3adcae74954902d4" translate="yes" xml:space="preserve">
          <source>&amp;para;1 A program shall contain a global function called main, which is the designated start of the program. [...]</source>
          <target state="translated">&amp;para;1プログラムには、プログラムの指定された開始点であるmainと呼ばれるグローバル関数が含まれます。 [...]</target>
        </trans-unit>
        <trans-unit id="fba079ec46d6590faa38ad6852c15693de356522" translate="yes" xml:space="preserve">
          <source>&amp;para;1 In a hosted environment, the main function receives a third argument, &lt;code&gt;char *envp[]&lt;/code&gt;,
  that points to a null-terminated array of pointers to &lt;code&gt;char&lt;/code&gt;, each of which points to a string
  that provides information about the environment for this execution of the program (5.1.2.2.1).</source>
          <target state="translated">&amp;para;1ホストされた環境では、メイン関数は3番目の引数 &lt;code&gt;char *envp[]&lt;/code&gt; を受け取ります。この引数は、この実行の環境に関する情報を提供する文字列を指す &lt;code&gt;char&lt;/code&gt; へのポインターのnullで終わる配列を指します。プログラムの（5.1.2.2.1）。</target>
        </trans-unit>
        <trans-unit id="268bf348aa4cc2e0b88457c3f6e444329c666667" translate="yes" xml:space="preserve">
          <source>&amp;para;2 An implementation shall not predefine the main function. This function shall not be overloaded. It shall
  have a return type of type int, but otherwise its type is implementation defined.
  All implementations
  shall allow both of the following definitions of main:</source>
          <target state="translated">&amp;para;2実装はmain関数を事前定義してはならない。 この関数はオーバーロードしないでください。 戻り型はint型ですが、それ以外の場合はその型は実装定義です。 すべての実装は、以下のメインの定義の両方を許可するものとします。</target>
        </trans-unit>
        <trans-unit id="f725c7d6a718deeff027d0b7dca43053111038cf" translate="yes" xml:space="preserve">
          <source>&amp;para;3 The function &lt;code&gt;main&lt;/code&gt; shall not be used within a program. The linkage (3.5) of &lt;code&gt;main&lt;/code&gt; is implementation-defined. [...]</source>
          <target state="translated">&amp;para;3プログラム内で関数 &lt;code&gt;main&lt;/code&gt; を使用しないでください。 &lt;code&gt;main&lt;/code&gt; のリンケージ（3.5）は実装定義です。 [...]</target>
        </trans-unit>
        <trans-unit id="6b25271533fe3e52213549f62d7343ca3360fd44" translate="yes" xml:space="preserve">
          <source>&amp;para;5 A &lt;em&gt;strictly conforming program&lt;/em&gt; shall use only those features of the language and library specified in this International Standard.&lt;sup&gt;3)&lt;/sup&gt; It shall not produce output dependent on any unspecified, undefined, or implementation-defined behavior, and shall not exceed any minimum implementation limit.</source>
          <target state="translated">&amp;para;5 &lt;em&gt;厳密に準拠するプログラム&lt;/em&gt;は、この国際標準で指定されている言語およびライブラリの機能のみを使用するものとします。 &lt;sup&gt;3）&lt;/sup&gt;未指定、未定義、または実装定義の動作に依存する出力を生成せず、最小実装制限を超えてはなりません。</target>
        </trans-unit>
        <trans-unit id="faf3a7ecabef70212bf778ca2245ba160daae386" translate="yes" xml:space="preserve">
          <source>&amp;para;5 A return statement in main has the effect of leaving the main function (destroying any objects with automatic
  storage duration) and calling &lt;code&gt;std::exit&lt;/code&gt; with the return value as the argument. If control reaches the end
  of main without encountering a return statement, the effect is that of executing</source>
          <target state="translated">&amp;para;5mainのreturnステートメントは、main関数を終了し（自動保存期間を持つオブジェクトを破棄）、戻り値を引数として &lt;code&gt;std::exit&lt;/code&gt; を呼び出す効果があります。 returnステートメントに遭遇せずに制御がメインの終わりに到達した場合、結果は実行の効果です。</target>
        </trans-unit>
        <trans-unit id="cd52c684e5038903c8d7058be01e2ecabbdecb17" translate="yes" xml:space="preserve">
          <source>&amp;para;5 Finally, control is returned to the host environment. If the value of &lt;code&gt;status&lt;/code&gt; is zero or &lt;code&gt;EXIT_SUCCESS&lt;/code&gt;, an implementation-defined form of the status &lt;em&gt;successful termination&lt;/em&gt; is returned. If the value of &lt;code&gt;status&lt;/code&gt; is &lt;code&gt;EXIT_FAILURE&lt;/code&gt;, an implementation-defined form of the status &lt;em&gt;unsuccessful termination&lt;/em&gt; is returned. Otherwise the status returned is implementation-defined.</source>
          <target state="translated">&amp;para;5最後に、制御はホスト環境に戻ります。 &lt;code&gt;status&lt;/code&gt; の値がゼロまたは &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; の場合、ステータスが&lt;em&gt;正常に終了し&lt;/em&gt;たことの実装定義形式が返されます。 &lt;code&gt;status&lt;/code&gt; の値が &lt;code&gt;EXIT_FAILURE&lt;/code&gt; の場合、実装が定義した形式のステータスの&lt;em&gt;失敗した終了&lt;/em&gt;が返されます。 それ以外の場合、返されるステータスは実装定義です。</target>
        </trans-unit>
        <trans-unit id="75b067a9183eb49f341e4cb9b8899302c2bf5c32" translate="yes" xml:space="preserve">
          <source>&amp;para;6 The two forms of conforming implementation are &lt;em&gt;hosted&lt;/em&gt; and &lt;em&gt;freestanding&lt;/em&gt;. A &lt;em&gt;conforming hosted implementation&lt;/em&gt; shall accept any strictly conforming program. A &lt;em&gt;conforming freestanding implementation&lt;/em&gt; shall accept any strictly conforming program in which the use of the features specified in the library clause (clause 7) is confined to the contents of the standard headers &lt;code&gt;&amp;lt;float.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;iso646.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;limits.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;stdalign.h&amp;gt;&lt;/code&gt;,
  &lt;code&gt;&amp;lt;stdarg.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;stdbool.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt;, and
  &lt;code&gt;&amp;lt;stdnoreturn.h&amp;gt;&lt;/code&gt;. A conforming implementation may have extensions (including
  additional library functions), provided they do not alter the behavior of any strictly conforming program.&lt;sup&gt;4)&lt;/sup&gt;</source>
          <target state="translated">&amp;para;6適合実装の2つの形式は、 &lt;em&gt;ホスト&lt;/em&gt; &lt;em&gt;型&lt;/em&gt;と&lt;em&gt;独立型&lt;/em&gt;です。 &lt;em&gt;準拠するホストされた実装&lt;/em&gt;は、厳密に準拠するプログラムを受け入れます。 &lt;em&gt;適合自立型実装&lt;/em&gt;は、ライブラリ句（第7節）で指定された機能の使用が標準ヘッダー &lt;code&gt;&amp;lt;float.h&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;iso646.h&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;limits.h&amp;gt;&lt;/code&gt; のコンテンツに限定されている厳密に適合したプログラムを受け入れます。 h&amp;gt; 、 &lt;code&gt;&amp;lt;stdalign.h&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;stdarg.h&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;stdbool.h&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;lt;stdnoreturn.h&amp;gt;&lt;/code&gt; 。 厳密に準拠するプログラムの動作を変更しない限り、準拠する実装に拡張機能（追加のライブラリ関数を含む）が含まれる場合があります。 &lt;sup&gt;4）&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="80e12995965674219f63848c639631125cf40efd" translate="yes" xml:space="preserve">
          <source>&amp;para;7 A &lt;em&gt;conforming program&lt;/em&gt; is one that is acceptable to a conforming implementation.&lt;sup&gt;5)&lt;/sup&gt;</source>
          <target state="translated">&amp;para;7 &lt;em&gt;適合プログラム&lt;/em&gt;は、適合実装に受け入れられる&lt;em&gt;プログラム&lt;/em&gt;です。 &lt;sup&gt;5）&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="ca1e412dcdcb69f2e17aed105715050d1052b4ce" translate="yes" xml:space="preserve">
          <source>&amp;para;7 Two kinds of implementations are defined: a &lt;em&gt;hosted implementation&lt;/em&gt; and a &lt;em&gt;freestanding implementation&lt;/em&gt;. For a hosted implementation, this International Standard defines the set of available libraries. A freestanding
  implementation is one in which execution may take place without the benefit of an operating system, and has an implementation-defined set of libraries that includes certain language-support libraries (17.6.1.3).</source>
          <target state="translated">&amp;para;72種類の実装が定義されています： &lt;em&gt;ホストされた実装&lt;/em&gt;と&lt;em&gt;独立した実装&lt;/em&gt;です。 ホストされた実装の場合、この国際標準は利用可能なライブラリのセットを定義します。 独立した実装とは、オペレーティングシステムの利点なしに実行が行われる可能性がある実装であり、特定の言語サポートライブラリ（17.6.1.3）を含む実装定義のライブラリセットがあります。</target>
        </trans-unit>
        <trans-unit id="d7dc9283f7b16f5ee420119dfbaa6363dac4ba08" translate="yes" xml:space="preserve">
          <source>&amp;para;8 A conforming implementation may have extensions (including additional library functions), provided they do not alter the behavior of any well-formed program. Implementations are required to diagnose programs that
  use such extensions that are ill-formed according to this International Standard. Having done so, however, they can compile and execute such programs.</source>
          <target state="translated">&amp;para;8準拠した実装は、整形式プログラムの動作を変更しない限り、拡張機能（追加のライブラリ関数を含む）を持つ場合があります。 この国際標準に従って不適切な形式の拡張機能を使用するプログラムを診断するには、実装が必要です。 ただし、そうすることで、そのようなプログラムをコンパイルして実行できます。</target>
        </trans-unit>
        <trans-unit id="aee57d8b42fa45a9c62d786d87e4e51641c9817b" translate="yes" xml:space="preserve">
          <source>&amp;para;8 EXAMPLE 3 In this example, the size of a variable length array is computed and returned from a function:</source>
          <target state="translated">&amp;para;8例3この例では、可変長配列のサイズが計算され、関数から返されます。</target>
        </trans-unit>
        <trans-unit id="7375209cbdea44802996e1ba4bfbb7ebf8bcffc8" translate="yes" xml:space="preserve">
          <source>&amp;para;9 Each implementation shall include documentation that identifies all conditionally-supported constructs that it does not support and defines all locale-specific characteristics.&lt;sup&gt;3&lt;/sup&gt;</source>
          <target state="translated">&amp;para;9各実装は、それがサポートしないすべての条件付きでサポートされる構成を識別し、すべてのロケール固有の特性を定義するドキュメントを含むものとします。 &lt;sup&gt;３&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="f8c0fd5dd6b6ab8b703b27f9f230f0a90552ad70" translate="yes" xml:space="preserve">
          <source>0 for success, nonzero for failure.  Again, not something you need to (or get to) pick: it's defined by the interface you're supposed to be conforming to.</source>
          <target state="translated">成功すれば0、失敗すれば0ではありません。繰り返しになりますが、選択する必要はありません (あるいは選択しなければならない)。</target>
        </trans-unit>
        <trans-unit id="bc9b8d3e781ce73dbb246a75ec5a09339f47b503" translate="yes" xml:space="preserve">
          <source>1 If the return type of the &lt;code&gt;main&lt;/code&gt; function is a type compatible with &lt;code&gt;int&lt;/code&gt;, a return from the
  initial call to the &lt;code&gt;main&lt;/code&gt; function is equivalent to calling the &lt;code&gt;exit&lt;/code&gt; function with the value
  returned by the &lt;code&gt;main&lt;/code&gt; function as its argument;&lt;sup&gt;11)&lt;/sup&gt; reaching the &lt;code&gt;}&lt;/code&gt; that terminates the
  &lt;code&gt;main&lt;/code&gt; function returns a value of 0. If the return type is not compatible with &lt;code&gt;int&lt;/code&gt;, the
  termination status returned to the host environment is unspecified.</source>
          <target state="translated">1 &lt;code&gt;main&lt;/code&gt; 関数の戻りの型が &lt;code&gt;int&lt;/code&gt; と互換性のある型である場合、 メイン関数への最初の呼び出しからの戻りは、引数として &lt;code&gt;main&lt;/code&gt; 関数によって返された値を使用して &lt;code&gt;exit&lt;/code&gt; 関数を呼び出すことと同じです。 &lt;sup&gt;11）&lt;/sup&gt; &lt;code&gt;main&lt;/code&gt; 関数を終了する &lt;code&gt;}&lt;/code&gt; に到達すると、値0が返されます。戻り値の型が &lt;code&gt;int&lt;/code&gt; と互換性がない場合、ホスト環境に返される終了ステータスは指定されていません。</target>
        </trans-unit>
        <trans-unit id="9f3fffa3327d3ba52b48bca6ea15dcebe78e227a" translate="yes" xml:space="preserve">
          <source>1.4 Implementation compliance [intro.compliance]</source>
          <target state="translated">1.4 実装コンプライアンス [intro.compliance]</target>
        </trans-unit>
        <trans-unit id="c6764c018e0ee51831b7edf8ba43133716139970" translate="yes" xml:space="preserve">
          <source>17.6.1.3 Freestanding implementations [compliance]</source>
          <target state="translated">17.6.1.3 フリースタンディング実装 [準拠]</target>
        </trans-unit>
        <trans-unit id="c625fb551848e2eda9b2bcd7f1fbfbeae2205afb" translate="yes" xml:space="preserve">
          <source>3.6.1 Main function [basic.start.main]</source>
          <target state="translated">3.6.1 メイン機能 [basic.start.main]</target>
        </trans-unit>
        <trans-unit id="74939d480b030b4d0aca4a62a78baefa0b305245" translate="yes" xml:space="preserve">
          <source>5.1.2 Execution environments</source>
          <target state="translated">5.1.2 実行環境</target>
        </trans-unit>
        <trans-unit id="a10709d6042407d378ae63fb597e3cb0c35f37a4" translate="yes" xml:space="preserve">
          <source>5.1.2.1 Freestanding environment</source>
          <target state="translated">5.1.2.1 独立型環境</target>
        </trans-unit>
        <trans-unit id="421d09a1018436b2d8a5dd11587decfcfcd9ac51" translate="yes" xml:space="preserve">
          <source>5.1.2.2.1 Program startup</source>
          <target state="translated">5.1.2.2.2.1 スタートアッププログラム</target>
        </trans-unit>
        <trans-unit id="bf97d5d45eb7bf179cd39bc7a3476106465bd537" translate="yes" xml:space="preserve">
          <source>5.1.2.2.3 Program termination</source>
          <target state="translated">5.1.2.2.2.3 プログラムの終了</target>
        </trans-unit>
        <trans-unit id="aaeb27114e23ee14710f683d375b03fdb9b9be98" translate="yes" xml:space="preserve">
          <source>6.11.6 Function declarators</source>
          <target state="translated">6.11.6 関数宣言子</target>
        </trans-unit>
        <trans-unit id="fa42bbaed1d0a660afc0222443686a157a0e6ebd" translate="yes" xml:space="preserve">
          <source>6.5.3.4 The &lt;code&gt;sizeof&lt;/code&gt; and &lt;code&gt;_Alignof&lt;/code&gt; operators</source>
          <target state="translated">6.5.3.4 &lt;code&gt;sizeof&lt;/code&gt; および &lt;code&gt;_Alignof&lt;/code&gt; 演算子</target>
        </trans-unit>
        <trans-unit id="af39c61a22e5f25a61be3c526a6c974cd1ea404d" translate="yes" xml:space="preserve">
          <source>7.22.4.4 The &lt;code&gt;exit&lt;/code&gt; function</source>
          <target state="translated">7.22.4.4 &lt;code&gt;exit&lt;/code&gt; 関数</target>
        </trans-unit>
        <trans-unit id="2259a4ab4a2439d3610778ec870b765036afd221" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/questions/4207134/what-is-the-proper-declaration-of-main&quot;&gt;What is the proper declaration of &lt;code&gt;main()&lt;/code&gt;?&lt;/a&gt; &amp;mdash; For C++, with a very good answer indeed.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/4207134/what-is-the-proper-declaration-of-main&quot;&gt; &lt;code&gt;main()&lt;/code&gt; の適切な宣言は何ですか？&lt;/a&gt; &amp;mdash; C ++の場合、確かに非常に良い答えがあります。</target>
        </trans-unit>
        <trans-unit id="e29bc9e2848992cf6548652af8a5be14a9249467" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;argv[argc]&lt;/code&gt; shall be a null pointer.</source>
          <target state="translated">&lt;code&gt;argv[argc]&lt;/code&gt; はnullポインターです。</target>
        </trans-unit>
        <trans-unit id="4a37fed8f5445c4993b8c5da80701807ea9a23fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int main()&lt;/code&gt; vs &lt;code&gt;void main()&lt;/code&gt; in C</source>
          <target state="translated">&lt;code&gt;int main()&lt;/code&gt; と &lt;code&gt;void main()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f8f60346f2e6dc9ec649d50698ae28dc37e9103d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;main()&lt;/code&gt; in C89 and K&amp;amp;R C unspecified return types default to &amp;rsquo;int`.</source>
          <target state="translated">C89およびK＆R Cの &lt;code&gt;main()&lt;/code&gt; の未指定の戻り値の型はデフォルトで 'int`です。</target>
        </trans-unit>
        <trans-unit id="77a0a2cbf7bad637f5c880daeb2e835a409f5011" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;main()&lt;/code&gt; should be declared as either:</source>
          <target state="translated">&lt;code&gt;main()&lt;/code&gt; は次のいずれかとして宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="a99a4351928aa53be892994d830351307ef971d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;main()&lt;/code&gt;'s signature in C++</source>
          <target state="translated">C ++での &lt;code&gt;main()&lt;/code&gt; のシグネチャ</target>
        </trans-unit>
        <trans-unit id="3389bce9434a3b56c3264af85cd3f1e622526831" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return 0&lt;/code&gt; or &lt;code&gt;return 1&lt;/code&gt; will be received by the parent process. In a shell it goes into a shell variable, and if you are running your program form a shell and not using that variable then you need not worry about the return value of &lt;code&gt;main()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;return 0&lt;/code&gt; または &lt;code&gt;return 1&lt;/code&gt; は、親プロセスによって受信されます。 シェルでは、シェル変数に入ります。プログラムをシェルから実行していて、その変数を使用していない場合は、 &lt;code&gt;main()&lt;/code&gt; の戻り値を気にする必要はありません。</target>
        </trans-unit>
        <trans-unit id="9357defb5f570731b5b1bc998cafabdff46afe41" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;There are numerous duplicates of this question, including:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;この質問には、次のような多数の重複があります。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="24c37500e1d6539a78a2997986f25d358e54ee71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C++03 freestanding environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;C ++ 03自立環境&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ca7c7ddff5ac442add7172c71909b660ede292c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C++03 hosted environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;C ++ 03ホスト環境&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="82a7ebec217d66e8b8c2d24ab3e3f5b1cacef4f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C++11 freestanding environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;C ++ 11自立環境&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a2b3cabf96f4ea44d63a24449dabea2a53cf0512" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C++11 hosted environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;C ++ 11ホスト環境&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="09f98f8248303be464d553d71fb5cf58e90f51b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C11 freestanding environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;C11自立型環境&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5b60f1d79fd4fb894543c08e1c03275903168a46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C11 hosted environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;C11ホスト環境&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6f08ea5864b7e3a0f044a93ec2f7398ca698c40b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C90 freestanding environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;C90自立型環境&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d214f0511b5d0b5572547a7e70a1324e68f71d7f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C90 hosted environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;C90ホスト環境&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="100ce1f0e56996aa7562559f1b8a172eabbb3b20" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C99 freestanding environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;C99自立型環境&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9aced90d316248fd18e7f601285666ee9656c0b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C99 hosted environment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;C99ホスト環境&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="39941c674be35df5a1e78497af6e5aefcc124f65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; when I make this suggestion, it's almost invariably followed by one of two kinds of comments:  &quot;I didn't know that.&quot; or &quot;That's bad advice!&quot;  My rationale is that it's safe and useful to rely on compiler behavior explicitly supported by the standard.  For C, since C99; see ISO/IEC 9899:1999 section 5.1.2.2.3:</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;私がこの提案をすると、ほぼ常に2種類のコメントのうちの1つが続きます：「私はそれを知りませんでした。」 または「それは悪いアドバイスです！」 私の理論的根拠は、標準で明示的にサポートされているコンパイラの動作に依存することが安全で便利だということです。 Cの場合、C99以降。 ISO / IEC 9899：1999セクション5.1.2.2.3を参照してください。</target>
        </trans-unit>
        <trans-unit id="762b0b987efcf101541560526e8d90e402907514" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;References&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;References&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ede2f6abb3f054287bbb931649c2f245bcaa1f0" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;10)&lt;/sup&gt; Thus, &lt;code&gt;int&lt;/code&gt; can be replaced by a typedef name defined as &lt;code&gt;int&lt;/code&gt;, or the type of &lt;code&gt;argv&lt;/code&gt; can be written as
  &lt;code&gt;char **argv&lt;/code&gt;, and so on.</source>
          <target state="translated">&lt;sup&gt;10）&lt;/sup&gt;したがって、 &lt;code&gt;int&lt;/code&gt; は、 intとして定義されたtypedef名で置き換えることができます。または、 &lt;code&gt;argv&lt;/code&gt; のタイプは、 &lt;code&gt;char **argv&lt;/code&gt; のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="011ebdf423d0eeaeb00bbe1f5e9f73f7e03f1379" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;11)&lt;/sup&gt; In accordance with 6.2.4, the lifetimes of objects with automatic storage duration declared in &lt;code&gt;main&lt;/code&gt;
  will have ended in the former case, even where they would not have in the latter.</source>
          <target state="translated">&lt;sup&gt;11）&lt;/sup&gt; 6.2.4に従って、 &lt;code&gt;main&lt;/code&gt; 宣言された自動ストレージ期間を持つオブジェクトのライフタイムは、前者の場合、後者の場合ではなくても終了します。</target>
        </trans-unit>
        <trans-unit id="a58a7471bfb0770dd6b5ffe6f2124853a918a6d6" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;3)&lt;/sup&gt; A strictly conforming program can use conditional features (see 6.10.8.3) provided the use is guarded by an appropriate conditional inclusion preprocessing directive using the related macro. For example:</source>
          <target state="translated">&lt;sup&gt;3）&lt;/sup&gt;関連するマクロを使用する適切な条件付き包含前処理ディレクティブによって使用が保護されている場合、厳密に準拠するプログラムは条件付き機能（6.10.8.3を参照）を使用できます。 例えば：</target>
        </trans-unit>
        <trans-unit id="2a0e8c9db9d88c7fc9a217ed3b840fdfca0ad4c9" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;3)&lt;/sup&gt; This documentation also defines implementation-defined behavior; see 1.9.</source>
          <target state="translated">&lt;sup&gt;3）&lt;/sup&gt;このドキュメントは、実装定義の動作も定義しています。 1.9を参照してください。</target>
        </trans-unit>
        <trans-unit id="60f63bd67cf9699a2930ead7ef8840e496fb4919" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;4)&lt;/sup&gt; This implies that a conforming implementation reserves no identifiers other than those explicitly reserved in this International Standard.</source>
          <target state="translated">&lt;sup&gt;4）&lt;/sup&gt;これは、準拠する実装がこの国際規格で明示的に予約されている識別子以外の識別子を予約しないことを意味します。</target>
        </trans-unit>
        <trans-unit id="df6a402d9d62f5a27a627e0839825b19422b9ff0" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;5)&lt;/sup&gt; Strictly conforming programs are intended to be maximally portable among conforming implementations. Conforming programs may depend upon non-portable features of a conforming implementation.</source>
          <target state="translated">&lt;sup&gt;5）&lt;/sup&gt;厳密に準拠するプログラムは、準拠する実装間で最大限に移植できるように意図されています。 適合プログラムは、適合実装の非移植機能に依存する場合があります。</target>
        </trans-unit>
        <trans-unit id="181254e8f9b948c18cf54289fc472931f4bcaf8c" translate="yes" xml:space="preserve">
          <source>A freestanding implementation has an implementation-defined set of headers. This set shall include at least the headers shown in Table 16.</source>
          <target state="translated">独立した実装は、実装定義のヘッダのセットを持つ。このセットは,少なくとも表16に示すヘッダを含まなければならない。</target>
        </trans-unit>
        <trans-unit id="80e91a530ec3d2ff8b86717bc9074b128cbda6a4" translate="yes" xml:space="preserve">
          <source>A strange, ambiguous sentence &quot;or in some other implementation-defined manner&quot; has been introduced. This can either be interpreted as &quot;the parameters to &lt;code&gt;int main()&lt;/code&gt; may vary&quot; or as &quot;main can have any implementation-defined form&quot;.</source>
          <target state="translated">「またはその他の実装定義の方法で」奇妙で曖昧な文が導入されました。 これは、「 &lt;code&gt;int main()&lt;/code&gt; へのパラメータは変化する可能性がある」、または「mainは実装定義の形式を持つことができる」と解釈できます。</target>
        </trans-unit>
        <trans-unit id="2ca23b0779eeca695d782b5b96f1577207241984" translate="yes" xml:space="preserve">
          <source>ANSI X3.159-1989 2.1.2.1 Freestanding environment:</source>
          <target state="translated">ANSI X3.159-1989 2.1.2.1 独立した環境。</target>
        </trans-unit>
        <trans-unit id="57a7155ea831c7e0d4282c280f1bb112dfa1e288" translate="yes" xml:space="preserve">
          <source>ANSI X3.159-1989 2.1.2.2 Hosted environment. &quot;Program startup&quot;</source>
          <target state="translated">ANSI X3.159-1989 2.1.2.2 ホスト環境。&quot;プログラムの起動&quot;</target>
        </trans-unit>
        <trans-unit id="24cf3c85b055a0c58ef221fc468e8f9b43b2c027" translate="yes" xml:space="preserve">
          <source>Additionally, the &lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md&quot;&gt;C++ Core Guidelines&lt;/a&gt; contains multiple instances of omitting &lt;code&gt;return 0;&lt;/code&gt; at the end of &lt;code&gt;main&lt;/code&gt; and no instances in which an explicit return is written.  Although there is not yet a specific guideline on this particular topic in that document, that seems at least a tacit endorsement of the practice.</source>
          <target state="translated">さらに、 &lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md&quot;&gt;C ++コアガイドラインに&lt;/a&gt;は、 &lt;code&gt;return 0;&lt;/code&gt; を省略した複数のインスタンスが含まれています。 &lt;code&gt;main&lt;/code&gt; の終わり、明示的なリターンが書き込まれるインスタンスはありません。 その文書のこの特定のトピックに関する特定のガイドラインはまだありませんが、それは少なくとも実践の暗黙の裏書と思われます。</target>
        </trans-unit>
        <trans-unit id="23e493e83a229c8a646ea40b97b496511adb8337" translate="yes" xml:space="preserve">
          <source>After the second line nothing is printed to the terminal since &quot;foo&quot; made grep return 1 and we check if the return code of grep was equal to 0. The second conditional statement echoes its message in the last line since it is true due to CHECK == 1.</source>
          <target state="translated">2行目以降は、&quot;foo &quot;でgrepが1を返すようになっているので、端末には何も表示されません。 2行目の条件文は、CHECK ==1で真なので、最後の行でそのメッセージをエコーしています。</target>
        </trans-unit>
        <trans-unit id="09933d4decfafb0faf055a060f94f61bcf140364" translate="yes" xml:space="preserve">
          <source>All versions of both standards since then (C99 and C++98) have maintained the same idea.  We rely on automatically generated member functions in C++, and few people write explicit &lt;code&gt;return;&lt;/code&gt; statements at the end of a &lt;code&gt;void&lt;/code&gt; function.  Reasons against omitting seem to boil down to &lt;a href=&quot;https://stackoverflow.com/questions/2581993/what-the-reasons-for-against-returning-0-from-main-in-iso-c/2582015#2582015&quot;&gt;&quot;it looks weird&quot;&lt;/a&gt;.  If, like me, you're curious about the rationale for the change to the C standard &lt;a href=&quot;https://stackoverflow.com/questions/31394171/what-was-the-rationale-for-making-return-0-at-the-end-of-main-optional&quot;&gt;read this question&lt;/a&gt;.  Also note that in the early 1990s this was considered &quot;sloppy practice&quot; because it was undefined behavior (although widely supported) at the time.</source>
          <target state="translated">それ以降の両方の標準のすべてのバージョン（C99およびC ++ 98）は同じ考えを維持しています。 私たちはC ++で自動的に生成されるメンバー関数に依存しており、明示的な &lt;code&gt;return;&lt;/code&gt; 書く人はほとんどいません。 &lt;code&gt;void&lt;/code&gt; 関数の最後のステートメント。 省略しない理由は、 &lt;a href=&quot;https://stackoverflow.com/questions/2581993/what-the-reasons-for-against-returning-0-from-main-in-iso-c/2582015#2582015&quot;&gt;「奇妙に見える」&lt;/a&gt;に要約されるようです。 私のように、C標準への変更の根拠に興味があるなら、 &lt;a href=&quot;https://stackoverflow.com/questions/31394171/what-was-the-rationale-for-making-return-0-at-the-end-of-main-optional&quot;&gt;この質問を読んでください&lt;/a&gt; 。 また、1990年代の初めには、これは（未だ広くサポートされていましたが）未定義の動作であったため、「だらしない習慣」と見なされていたことにも注意してください。</target>
        </trans-unit>
        <trans-unit id="83ff694899e1d845ab60582f3b73ef06850d2d34" translate="yes" xml:space="preserve">
          <source>Allowed forms &lt;sup&gt;11&lt;/sup&gt;:</source>
          <target state="translated">許可されるフォーム&lt;sup&gt;11&lt;/sup&gt; ：</target>
        </trans-unit>
        <trans-unit id="1ffdd2e9d11e5e754b0a9cf96f132585a0112b4d" translate="yes" xml:space="preserve">
          <source>Allowed forms &lt;sup&gt;1&lt;/sup&gt;:</source>
          <target state="translated">許可されるフォーム&lt;sup&gt;1&lt;/sup&gt; ：</target>
        </trans-unit>
        <trans-unit id="531b9bfacbabbde3a9ef0944158dd8da7569c421" translate="yes" xml:space="preserve">
          <source>Allowed forms &lt;sup&gt;3&lt;/sup&gt;:</source>
          <target state="translated">許可されるフォーム&lt;sup&gt;3&lt;/sup&gt; ：</target>
        </trans-unit>
        <trans-unit id="75815e021134ec0eba7ed2c0d9c5a844701da1d0" translate="yes" xml:space="preserve">
          <source>Allowed forms &lt;sup&gt;7&lt;/sup&gt;:</source>
          <target state="translated">許可されるフォーム&lt;sup&gt;7&lt;/sup&gt; ：</target>
        </trans-unit>
        <trans-unit id="4679a6ba8a0d1ca4986d60983e12b4e750ecdae5" translate="yes" xml:space="preserve">
          <source>Allowed forms &lt;sup&gt;9&lt;/sup&gt;:</source>
          <target state="translated">許可されるフォーム&lt;sup&gt;9&lt;/sup&gt; ：</target>
        </trans-unit>
        <trans-unit id="8ce86355d96de776927a38cfc34a124933831922" translate="yes" xml:space="preserve">
          <source>Alternatively, the &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;wmain&lt;/code&gt; functions can be declared as returning &lt;code&gt;void&lt;/code&gt; (no return value). If you declare &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;wmain&lt;/code&gt; as returning void, you cannot return an exit code to the parent process or operating system by using a return statement. To return an exit code when &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;wmain&lt;/code&gt; is declared as &lt;code&gt;void&lt;/code&gt;, you must use the &lt;code&gt;exit&lt;/code&gt; function.</source>
          <target state="translated">または、 &lt;code&gt;wmain&lt;/code&gt; 関数とwmain関数は、 &lt;code&gt;void&lt;/code&gt; を返す（戻り値なし）と宣言できます。 &lt;code&gt;main&lt;/code&gt; または &lt;code&gt;wmain&lt;/code&gt; をvoidを返すように宣言した場合、returnステートメントを使用して親プロセスまたはオペレーティングシステムに終了コードを返すことはできません。 &lt;code&gt;main&lt;/code&gt; または &lt;code&gt;wmain&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; として宣言されているときに終了コードを返すには、 &lt;code&gt;exit&lt;/code&gt; 関数を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="108ea3b40bdac1fa932e2881ce8b590bb80462aa" translate="yes" xml:space="preserve">
          <source>An implementation shall not predefine the main function. This function shall not be overloaded. It shall have a return type of type int, but otherwise its type is implementation-defined. All implementations shall
  allow both</source>
          <target state="translated">実装は,主関数を事前に定義してはならない。この関数は,オーバーロードされてはならない。この関数の戻り値の型は,int型でなければならないが,それ以外の型は実装で定義される。すべての実装は,両方の</target>
        </trans-unit>
        <trans-unit id="cceddadf6ec36d3e334ec1453776d68f0a30b419" translate="yes" xml:space="preserve">
          <source>An implementation shall not predefine the main function. This function shall not be overloaded. It shall have a return type of type int, but otherwise its type is implementation-defined. All implementations shall allow both of the following definitions of main:</source>
          <target state="translated">実装は,主関数を事前に定義してはならない。この関数は,オーバーロードされてはならない。戻り値の型は int でなければならないが,それ以外の場合は実装で定義される。すべての実装は,以下の両方の定義を許可しなければならない。</target>
        </trans-unit>
        <trans-unit id="abe62c12cbd384f011ace9ca713b8616f65c4574" translate="yes" xml:space="preserve">
          <source>Any form or name of main is allowed &lt;sup&gt;2&lt;/sup&gt;.</source>
          <target state="translated">mainの任意の形式または名前を使用できます&lt;sup&gt;2&lt;/sup&gt; 。</target>
        </trans-unit>
        <trans-unit id="f259d290cdcbc9bbec44ad4bd545c173c869cb9a" translate="yes" xml:space="preserve">
          <source>Any form or name of main is allowed &lt;sup&gt;6&lt;/sup&gt;.</source>
          <target state="translated">mainの任意の形式または名前を使用できます&lt;sup&gt;6&lt;/sup&gt; 。</target>
        </trans-unit>
        <trans-unit id="e2314c2dd97eecb4a3e772641c44c357495c2a73" translate="yes" xml:space="preserve">
          <source>Any form or name of main is allowed &lt;sup&gt;8&lt;/sup&gt;.</source>
          <target state="translated">mainの任意の形式または名前を使用できます&lt;sup&gt;8&lt;/sup&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef855fa906d52778c2fb1c45f521ea626f5689c2" translate="yes" xml:space="preserve">
          <source>As noted early on, the requirements above apply to hosted environments. If you are working with a freestanding environment (which is the alternative to a hosted environment), then the standard has much less to say. For a freestanding environment, the function called at program startup need not be called &lt;code&gt;main&lt;/code&gt; and there are no constraints on its return type.  The standard says:</source>
          <target state="translated">前述のとおり、上記の要件はホスト環境に適用されます。 （ホストされた環境の代替となる）独立した環境で作業している場合、標準は言うことはほとんどありません。 独立した環境の場合、プログラムの起動時に呼び出される関数を &lt;code&gt;main&lt;/code&gt; で呼び出す必要はなく、その戻り値の型に制約はありません。 標準は言う：</target>
        </trans-unit>
        <trans-unit id="6a69258566146688a6c3902485cea9ec71efe8ed" translate="yes" xml:space="preserve">
          <source>As you can see if you are calling this and that process it is sometimes essential to see what it has returned (by the return value of main()).</source>
          <target state="translated">このプロセスとそのプロセスを呼び出しているかどうかを見ることができるように、(main()の戻り値によって)そのプロセスが何を返したのかを見ることが不可欠な場合があります。</target>
        </trans-unit>
        <trans-unit id="e46f165c0590a92b13364a7c8042f058136f6322" translate="yes" xml:space="preserve">
          <source>C++ &amp;mdash; &lt;code&gt;int main(int argc, char **argv)&lt;/code&gt;</source>
          <target state="translated">C ++ &amp;mdash; &lt;code&gt;int main(int argc, char **argv)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="76311ff27f1cf5e0babcefff7edb17a402c58861" translate="yes" xml:space="preserve">
          <source>C++ &amp;mdash; &lt;code&gt;int main(int argc, char *argv[])&lt;/code&gt;</source>
          <target state="translated">C ++ &amp;mdash; &lt;code&gt;int main(int argc, char *argv[])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d70b6b60e0f24927bc4538fb0ceb71184d06bef0" translate="yes" xml:space="preserve">
          <source>C99 removed &quot;implicit int&quot; so &lt;code&gt;main()&lt;/code&gt; is no longer valid.</source>
          <target state="translated">C99は「暗黙のint」を削除したため、 &lt;code&gt;main()&lt;/code&gt; は無効になりました。</target>
        </trans-unit>
        <trans-unit id="6c8395748074b451b2f55b5c5e4c263a6bbe2bef" translate="yes" xml:space="preserve">
          <source>Classically, Unix systems support a third variant:</source>
          <target state="translated">古典的には、Unix システムは第三のバリアントをサポートしています。</target>
        </trans-unit>
        <trans-unit id="e4ed7f96515dbdbe5f5d0ecace105efe68e6c3ec" translate="yes" xml:space="preserve">
          <source>Comments:</source>
          <target state="translated">Comments:</target>
        </trans-unit>
        <trans-unit id="cf3f840e63764cb35ea2eae778010a42f50e1375" translate="yes" xml:space="preserve">
          <source>Difference between &lt;code&gt;void main()&lt;/code&gt; and &lt;code&gt;int main()&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;void main()&lt;/code&gt; と &lt;code&gt;int main()&lt;/code&gt; の違いは？</target>
        </trans-unit>
        <trans-unit id="8dd79bfba982dc335f30bf0edc8ada5d88da4914" translate="yes" xml:space="preserve">
          <source>Efficiency is not an issue with the &lt;code&gt;main&lt;/code&gt; function. It can only be entered and left once (marking the program's start and termination) according to the C++ standard. For C, re-entering &lt;code&gt;main()&lt;/code&gt; is allowed, but should be avoided.</source>
          <target state="translated">効率は &lt;code&gt;main&lt;/code&gt; 機能の問題ではありません。 これは、C ++標準に従って、1回だけ（プログラムの開始と終了をマークして）入力および終了できます。 Cの場合、 &lt;code&gt;main()&lt;/code&gt; の再入力は許可されていますが、回避する必要があります。</target>
        </trans-unit>
        <trans-unit id="3fd215cf12ba7569beb5b6db1ee04c9f3d5989a2" translate="yes" xml:space="preserve">
          <source>Finally, there is nothing wrong from a standards point of view with calling &lt;code&gt;main()&lt;/code&gt; from a program.</source>
          <target state="translated">最後に、プログラムから &lt;code&gt;main()&lt;/code&gt; を呼び出すことに関して、標準の観点からは何も問題はありません。</target>
        </trans-unit>
        <trans-unit id="62b8c7d7dfd45c5f3d50a3d0e74887793a303162" translate="yes" xml:space="preserve">
          <source>For C++, since the first standard in 1998; see ISO/IEC 14882:1998 section 3.6.1:</source>
          <target state="translated">C++については、1998 年の最初の規格以降、ISOIEC 14882:1998 の 3.6.1 節を参照。</target>
        </trans-unit>
        <trans-unit id="3500093e0edf7d6f4a566c3f4b7efdebecf64c37" translate="yes" xml:space="preserve">
          <source>For C99, everything is the same as above except:</source>
          <target state="translated">C99の場合は、それ以外は全て上記と同じです。</target>
        </trans-unit>
        <trans-unit id="fc184e779fe2b354b692cb83c96360ac6578836a" translate="yes" xml:space="preserve">
          <source>For a hosted environment (that's the normal one), the C11 standard (ISO/IEC 9899:2011) says:</source>
          <target state="translated">ホストされた環境(それが当たり前の環境)の場合、C11規格(ISOIEC 9899:2011)によると</target>
        </trans-unit>
        <trans-unit id="2c578db723c70cb97ef0753314ddb79e6ca46de7" translate="yes" xml:space="preserve">
          <source>Here is a small demonstration of the usage of return codes...</source>
          <target state="translated">ここでは、リターンコードの使用法を少しだけデモンストレーションしてみます...</target>
        </trans-unit>
        <trans-unit id="d082866f80f3c7b776d5b28ecd6c0bcbdc809faf" translate="yes" xml:space="preserve">
          <source>However I usually return 0.</source>
          <target state="translated">しかし、通常は0を返します。</target>
        </trans-unit>
        <trans-unit id="bcc235a17e919b6165ee1c9df15ea0527e83ab84" translate="yes" xml:space="preserve">
          <source>However, to allow completely wild forms of &lt;code&gt;main()&lt;/code&gt; was probably(?) not the intention of this new sentence. The C99 rationale (not normative) implies that the sentence refers to additional parameters to &lt;code&gt;int main&lt;/code&gt;&lt;sup&gt;4&lt;/sup&gt;.</source>
          <target state="translated">ただし、完全にワイルドな形式の &lt;code&gt;main()&lt;/code&gt; を許可することは、おそらくこの新しい文の意図ではありません（？）。 C99の理論的根拠（規範的ではない）は、この文が &lt;code&gt;int main&lt;/code&gt; &lt;sup&gt;4の&lt;/sup&gt;追加パラメーターを参照していることを意味します。</target>
        </trans-unit>
        <trans-unit id="d1b1ad3f3ac01aeb1f1aa57b42231bc5e931e4f0" translate="yes" xml:space="preserve">
          <source>I believe that &lt;code&gt;main()&lt;/code&gt; should return either &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; or &lt;code&gt;EXIT_FAILURE&lt;/code&gt;. They are defined in &lt;code&gt;stdlib.h&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;main()&lt;/code&gt; は &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; または &lt;code&gt;EXIT_FAILURE&lt;/code&gt; を返す必要があると思います。 それらは &lt;code&gt;stdlib.h&lt;/code&gt; で定義されています</target>
        </trans-unit>
        <trans-unit id="2c8ab38f22cccd2931145ee6336eedf191f6b30f" translate="yes" xml:space="preserve">
          <source>I was under the impression that standard specifies that main doesn't need a return value as a successful return was OS based (zero in one could be either a success or a failure in another), therefore the absence of return was a cue for the compiler to insert the successful return itself.</source>
          <target state="translated">私は、標準ではmainは戻り値を必要としないと規定されているという印象を受けていましたが、それは成功した戻り値はOSベースのものであり(一方では0が成功でも他方では失敗でもよい)、そのため戻り値がないことはコンパイラが成功した戻り値自体を挿入するための合図だったからです。</target>
        </trans-unit>
        <trans-unit id="4fb16fcf1d38904d79af7bbdd1699672a66ac59e" translate="yes" xml:space="preserve">
          <source>ISO 14882:2003 3.6.1 Main function</source>
          <target state="translated">ISO 14882:2003 3.6.1 主な機能</target>
        </trans-unit>
        <trans-unit id="6fcc9ab167f456cff52beb58f8604705b44e2080" translate="yes" xml:space="preserve">
          <source>ISO 14882:2011 3.6.1 Main function</source>
          <target state="translated">ISO 14882:2011 3.6.1 主な機能</target>
        </trans-unit>
        <trans-unit id="072f40f89924efb24c9c0d91ec69c1b477accc60" translate="yes" xml:space="preserve">
          <source>ISO 9899:1999 5.1.2.1 Freestanding environment</source>
          <target state="translated">ISO 9899:1999 5.1.2.1 独立した環境</target>
        </trans-unit>
        <trans-unit id="6cb748bf92ce81daeb76259fcdc696d6d4a84f98" translate="yes" xml:space="preserve">
          <source>ISO 9899:1999 5.1.2.2 Hosted environment -&amp;gt; 5.1.2.2.1 Program startup</source>
          <target state="translated">ISO 9899：1999 5.1.2.2ホスト環境-&amp;gt; 5.1.2.2.1プログラムの起動</target>
        </trans-unit>
        <trans-unit id="c570e7967aeae8d218c9500d8af0ccbb2c0999ed" translate="yes" xml:space="preserve">
          <source>ISO 9899:1999 5.1.2.2 Hosted environment --&amp;gt; 5.1.2.2.3 Program termination</source>
          <target state="translated">ISO 9899：1999 5.1.2.2ホスト環境-&amp;gt; 5.1.2.2.3プログラムの終了</target>
        </trans-unit>
        <trans-unit id="5adf9fbb580920fe4e8bdb0b93849057aa5eaef0" translate="yes" xml:space="preserve">
          <source>ISO 9899:2011 5.1.2.2 Hosted environment -&amp;gt; 5.1.2.2.1 Program startup</source>
          <target state="translated">ISO 9899：2011 5.1.2.2ホスト環境-&amp;gt; 5.1.2.2.1プログラムの起動</target>
        </trans-unit>
        <trans-unit id="c026b51c24ee5003420193d6a1c30eba041e8812" translate="yes" xml:space="preserve">
          <source>ISO/IEC 9899:1989 (C90):</source>
          <target state="translated">isoiec 9899:1989 (c90)。</target>
        </trans-unit>
        <trans-unit id="7738b221c80b5304b0ca9410b351937992dbdba2" translate="yes" xml:space="preserve">
          <source>ISO/IEC 9899:1999 (C99):</source>
          <target state="translated">ISOIEC 9899:1999(C99)。</target>
        </trans-unit>
        <trans-unit id="0dff1e972d7a65190eb694ffe563008167981bd6" translate="yes" xml:space="preserve">
          <source>If an implementation permits it, &lt;code&gt;main()&lt;/code&gt; can be declared in other ways, but this makes the program implementation defined, and no longer strictly conforming.</source>
          <target state="translated">実装で許可されている場合、 &lt;code&gt;main()&lt;/code&gt; は他の方法で宣言できますが、これによりプログラムの実装が定義され、厳密に準拠しなくなります。</target>
        </trans-unit>
        <trans-unit id="36650763e12f75f89b51f84868ae093852daf601" translate="yes" xml:space="preserve">
          <source>If control reaches the end of main without encountering a return statement, the effect is that of executing return 0;</source>
          <target state="translated">return文に遭遇せずに制御がmainの最後に到達した場合は、return 0を実行したことになります。</target>
        </trans-unit>
        <trans-unit id="f306c8b2bb84020137c0b44d4df475b5a3dfaf8b" translate="yes" xml:space="preserve">
          <source>If int main() then return 1 or return 0?</source>
          <target state="translated">int main()ならば1を返すか、0を返すか?</target>
        </trans-unit>
        <trans-unit id="bbe13bc0ccc90c42b104135b14e3c3f18c8e40da" translate="yes" xml:space="preserve">
          <source>If the return type of the main function is a type compatible with int, a return from the initial call to the main function is equivalent to calling the exit function with the value returned by the main function as its argument;11) reaching the &lt;code&gt;}&lt;/code&gt; that terminates the main function returns a value of 0. If the return type is not compatible with int, the termination status returned to the host environment is unspecified.</source>
          <target state="translated">メイン関数の戻りの型がintと互換性のある型である場合、メイン関数への最初の呼び出しからの戻りは、引数としてメイン関数によって返された値を使用して出口関数を呼び出すことと同等です; 11） &lt;code&gt;}&lt;/code&gt; に到達するmain関数を終了すると、値0が返されます。戻りの型がintと互換性がない場合、ホスト環境に返される終了ステータスは指定されていません。</target>
        </trans-unit>
        <trans-unit id="80d38b087bcd0bf8f8ae646ae8cfc61a04ed675e" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;argc&lt;/code&gt; is greater than zero, the array members &lt;code&gt;argv[0]&lt;/code&gt; through
  &lt;code&gt;argv[argc-1]&lt;/code&gt; inclusive shall contain pointers to strings, which are given
  implementation-defined values by the host environment prior to program startup. The
  intent is to supply to the program information determined prior to program startup
  from elsewhere in the hosted environment. If the host environment is not capable of
  supplying strings with letters in both uppercase and lowercase, the implementation
  shall ensure that the strings are received in lowercase.</source>
          <target state="translated">&lt;code&gt;argc&lt;/code&gt; の値がゼロより大きい場合、配列メンバー &lt;code&gt;argv[0]&lt;/code&gt; から &lt;code&gt;argv[argc-1]&lt;/code&gt; までは、プログラムの起動前にホスト環境によって実装定義の値が与えられる文字列へのポインターを含む必要があります。 その意図は、ホスト環境の他の場所からプログラムを起動する前に決定されたプログラム情報を提供することです。 ホスト環境が文字列を大文字と小文字の両方で提供できない場合、実装は文字列が小文字で受信されることを保証する必要があります。</target>
        </trans-unit>
        <trans-unit id="5477192590999db427c7b99a724d15f14138992a" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;argc&lt;/code&gt; is greater than zero, the string pointed to by &lt;code&gt;argv[0]&lt;/code&gt;
  represents the program name; &lt;code&gt;argv[0][0]&lt;/code&gt; shall be the null character if the
  program name is not available from the host environment. If the value of &lt;code&gt;argc&lt;/code&gt; is
  greater than one, the strings pointed to by &lt;code&gt;argv[1]&lt;/code&gt; through &lt;code&gt;argv[argc-1]&lt;/code&gt;
  represent the program parameters.</source>
          <target state="translated">&lt;code&gt;argc&lt;/code&gt; の値がゼロより大きい場合、 &lt;code&gt;argv[0]&lt;/code&gt; 指す文字列はプログラム名を表します。 &lt;code&gt;argv[0][0]&lt;/code&gt; は、ホスト環境からプログラム名を取得できない場合はnull文字になります。 &lt;code&gt;argc&lt;/code&gt; の値が1より大きい場合、 &lt;code&gt;argv[1]&lt;/code&gt; から &lt;code&gt;argv[argc-1]&lt;/code&gt; 指す文字列はプログラムパラメータを表します。</target>
        </trans-unit>
        <trans-unit id="83b323b3be8c3ef77aecb667889dc3dd68d116df" translate="yes" xml:space="preserve">
          <source>If they are declared, the parameters to the main function shall obey the following
  constraints:</source>
          <target state="translated">それらが宣言されている場合、主関数のパラメータは以下の制約に従わなければならない。</target>
        </trans-unit>
        <trans-unit id="d1a5b964a486551cab1f4315aeb05a3560a45f00" translate="yes" xml:space="preserve">
          <source>If you are doing this (call a process so many times), you should find a way to put your logic directly inside the caller, or in a DLL file, without allocate a specific process for each call; the multiple process allocations bring you the relevant efficiency problem in this case.</source>
          <target state="translated">このような場合 (プロセスを何度も呼び出す場合)、呼び出しごとに特定のプロセスを割り当てずに、呼び出し元の内部や DLL ファイルに直接ロジックを配置する方法を見つける必要があります。</target>
        </trans-unit>
        <trans-unit id="43d56dedc7192e637755e1fdcd48fbf68cbff70a" translate="yes" xml:space="preserve">
          <source>If you do</source>
          <target state="translated">もし、あなたが</target>
        </trans-unit>
        <trans-unit id="483a23176183f6c1305e90f13f59c790a7cd8b33" translate="yes" xml:space="preserve">
          <source>If you do not write a return statement in &lt;code&gt;int main()&lt;/code&gt;, the closing &lt;code&gt;{&lt;/code&gt; will return 0 by default.</source>
          <target state="translated">&lt;code&gt;int main()&lt;/code&gt; でreturnステートメントを記述しない場合、デフォルトで終了 &lt;code&gt;{&lt;/code&gt; は0を返します。</target>
        </trans-unit>
        <trans-unit id="850185e652bcc3094867daff9db6c1960eaf3346" translate="yes" xml:space="preserve">
          <source>If you really have issues related to efficiency of returning an integer from a process, you should probably avoid to call that process so many times that this return value becomes an issue.</source>
          <target state="translated">もし本当にプロセスから整数を返す効率性に問題があるのであれば、この戻り値が問題になるほど何度もそのプロセスを呼び出すのは避けるべきでしょう。</target>
        </trans-unit>
        <trans-unit id="52092fcdfb7b4fbe87c5392e56ec14ab62dfac60" translate="yes" xml:space="preserve">
          <source>In C89 (and hence in Microsoft C), there is no statement about what happens if the &lt;code&gt;main()&lt;/code&gt; function returns but does not specify a return value; it therefore leads to undefined behaviour.</source>
          <target state="translated">C89（およびMicrosoft C）では、 &lt;code&gt;main()&lt;/code&gt; 関数が戻ったが戻り値を指定しなかった場合に何が起こるかについての記述はありません。 したがって、未定義の動作につながります。</target>
        </trans-unit>
        <trans-unit id="c87cc4b10f829842d58cbb57cfa34ee20cb520f0" translate="yes" xml:space="preserve">
          <source>In Unix and DOS scripting, &lt;code&gt;return 0&lt;/code&gt; on success and non-zero for error are usually returned. This is the standard used by Unix and DOS scripting to find out what happened with your program and controlling the whole flow.</source>
          <target state="translated">UnixおよびDOSスクリプトでは、成功した場合は0を返し、エラーの場合は通常ゼロ以外を返します。 これは、プログラムで何が起こったかを調べ、フロー全体を制御するためにUnixおよびDOSスクリプトで使用される標準です。</target>
        </trans-unit>
        <trans-unit id="8eaed3f6bd24cf0c2bf1a5f18894bccff46da0ac" translate="yes" xml:space="preserve">
          <source>In a freestanding environment (in which C program execution may take
  place without any benefit of an operating system), the name and type
  of the function called at program startup are implementation-defined.</source>
          <target state="translated">フリースタンディング環境(オペレーティングシステムの恩恵を受けずにC言語のプログラムを実行できる環境)では、プログラム起動時に呼び出される関数の名前と種類は実装で定義されています。</target>
        </trans-unit>
        <trans-unit id="e8f9653053b16c99b1cfc10e334bf69a6adf9d71" translate="yes" xml:space="preserve">
          <source>In a freestanding environment (in which C program execution may take place without any benefit of an operating system), the name and type of the function called at program startup are implementation-defined. Any library facilities available to a freestanding program, other than the minimal set required by clause 4, are implementation-defined.</source>
          <target state="translated">フリースタンディング環境(オペレーティングシステムの恩恵を受けずにC言語のプログラムを実行できる環境)では、プログラム起動時に呼び出される関数の名前と型は実装定義されている。自立型プログラムで利用可能なライブラリ機能は、第4節で必要とされる最小限のものを除いて、すべて実装定義されている。</target>
        </trans-unit>
        <trans-unit id="7e3919889d260828538ebba4f914ae5c8021bc7c" translate="yes" xml:space="preserve">
          <source>In detail, if you only want to know if returning 0 is more or less efficient than returning 1, it could depend from the compiler in some cases, but generically, assuming they are read from the same source (local, field, constant, embedded in the code, function result, etc.) it requires exactly the same number of clock cycles.</source>
          <target state="translated">詳細には、0 を返す方が 1 を返すよりも効率が良いか悪いかだけを知りたい場合は、場合によってはコンパイラに依存しますが、一般的には、同じソース(ローカル、フィールド、定数、コードに埋め込まれたもの、関数の結果など)から読み込まれると仮定すると、全く同じクロックサイクル数が必要になります。</target>
        </trans-unit>
        <trans-unit id="77bca36b5e136be0307abf4a901e487488fb4541" translate="yes" xml:space="preserve">
          <source>In the latter form &lt;code&gt;argc&lt;/code&gt; shall be the number of arguments passed to the program from the environment
  in which the program is run. If &lt;code&gt;argc&lt;/code&gt; is nonzero these arguments shall be supplied in &lt;code&gt;argv[0]&lt;/code&gt;
  through &lt;code&gt;argv[argc-1]&lt;/code&gt; as pointers to the initial characters of null-terminated multibyte strings (NTMBSs) (17.5.2.1.4.2) and &lt;code&gt;argv[0]&lt;/code&gt; shall be the pointer to the initial character of a NTMBS that represents the
  name used to invoke the program or &lt;code&gt;&quot;&quot;&lt;/code&gt;. The value of &lt;code&gt;argc&lt;/code&gt; shall be non-negative. The value of &lt;code&gt;argv[argc]&lt;/code&gt;
  shall be 0. [ Note: It is recommended that any further (optional) parameters be added after &lt;code&gt;argv&lt;/code&gt;. &amp;mdash;end
  note ]</source>
          <target state="translated">後者の形式では、 &lt;code&gt;argc&lt;/code&gt; は、プログラムが実行される環境からプログラムに渡される引数の数になります。 &lt;code&gt;argc&lt;/code&gt; がゼロ以外の場合、これらの引数は、ヌル終了マルチバイト文字列（NTMBS）（17.5.2.1.4.2）の最初の文字へのポインタとして &lt;code&gt;argv[0]&lt;/code&gt; から &lt;code&gt;argv[argc-1]&lt;/code&gt; れ、 &lt;code&gt;argv[0]&lt;/code&gt; はプログラムを呼び出すために使用される名前を表すNTMBSの最初の文字へのポインターまたは &lt;code&gt;&quot;&quot;&lt;/code&gt; 。 &lt;code&gt;argc&lt;/code&gt; の値は負ではありません。 &lt;code&gt;argv[argc]&lt;/code&gt; の値は0でなければなりません。[注： &lt;code&gt;argv&lt;/code&gt; の後に、さらに（オプションの）パラメーターを追加することをお勧めします。 &amp;mdash;エンドノート]</target>
        </trans-unit>
        <trans-unit id="edd6065f0058ea6d8f4719347b7def37199e2a44" translate="yes" xml:space="preserve">
          <source>Interestingly, MS does not prescribe the two-argument version of &lt;code&gt;main()&lt;/code&gt; that the C and C++ standards require. It only prescribes a three argument form where the third argument is &lt;code&gt;char **envp&lt;/code&gt;, a pointer to a list of environment variables.</source>
          <target state="translated">興味深いことに、MSは、CおよびC ++標準が必要とする2引数バージョンの &lt;code&gt;main()&lt;/code&gt; を規定していません。 3番目の引数が環境変数のリストへのポインタである &lt;code&gt;char **envp&lt;/code&gt; である3つの引数の形式のみを規定しています。</target>
        </trans-unit>
        <trans-unit id="067bd54d24cbf0d635c159524fc85653cf8d1376" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;char *envp[]&lt;/code&gt; as a third argument to &lt;code&gt;main()&lt;/code&gt; portable?</source>
          <target state="translated">&lt;code&gt;char *envp[]&lt;/code&gt; は &lt;code&gt;main()&lt;/code&gt; の 3番目の引数として移植可能ですか？</target>
        </trans-unit>
        <trans-unit id="01cfa03c02ebf6b8044d17ebc260a7a7e23f1bc7" translate="yes" xml:space="preserve">
          <source>It also can be checked when you call a process yourself, and see if the program exited and finished properly.</source>
          <target state="translated">また、自分で処理を呼び出したときに、プログラムが終了してきちんと終了しているかどうかを確認することもできます。</target>
        </trans-unit>
        <trans-unit id="743cc09a1d17dd8e6d9ef3423b452c2f4c20a21e" translate="yes" xml:space="preserve">
          <source>It is also worth noting that in C++, &lt;code&gt;int main()&lt;/code&gt; can be left without a return-statement, at which point it defaults to returning 0. This is also true with a C99 program. Whether &lt;code&gt;return 0;&lt;/code&gt; should be omitted or not is open to debate. The range of valid C program main signatures is much greater.</source>
          <target state="translated">また、C ++では、 &lt;code&gt;int main()&lt;/code&gt; はreturn-statementなしで残すことができ、その時点ではデフォルトで0を返すことに注意してください。これは、C99プログラムでも当てはまります。 &lt;code&gt;return 0;&lt;/code&gt; かどうか。 省略するか、議論の余地があります。 有効なCプログラムのメインシグネチャの範囲ははるかに広いです。</target>
        </trans-unit>
        <trans-unit id="eba4f3e259ceb0adf19ace0c32c1391d84cbfe54" translate="yes" xml:space="preserve">
          <source>It is implementation-defined whether a program in a freestanding environment is required to define a main function.</source>
          <target state="translated">独立した環境のプログラムが主関数を定義する必要があるかどうかは実装で定義されています。</target>
        </trans-unit>
        <trans-unit id="3d63d53707bc8469db68ce1f74c203b133e06b93" translate="yes" xml:space="preserve">
          <source>It is not clear to me what happens (what exit code is returned to the parent or OS) when a program with &lt;code&gt;void main()&lt;/code&gt; does exit &amp;mdash; and the MS web site is silent too.</source>
          <target state="translated">&lt;code&gt;void main()&lt;/code&gt; を使用したプログラムが終了したときに何が起こるか（どの終了コードが親またはOSに返されるか）は明確ではありませんが、MS Webサイトもサイレントです。</target>
        </trans-unit>
        <trans-unit id="d1b1f744a8f0f327fd7f8ac8646e483671c5281c" translate="yes" xml:space="preserve">
          <source>It is noticeable that the only header required of a freestanding environment that actually defines any functions is &lt;code&gt;&amp;lt;stdarg.h&amp;gt;&lt;/code&gt; (and even those may be &amp;mdash; and often are &amp;mdash; just macros).</source>
          <target state="translated">関数を実際に定義する自立型環境に必要なヘッダーは &lt;code&gt;&amp;lt;stdarg.h&amp;gt;&lt;/code&gt; だけであることに注意してください（それらもマクロである場合があります）。</target>
        </trans-unit>
        <trans-unit id="f0d85260bc0a36b034db5734d9715240a02623e7" translate="yes" xml:space="preserve">
          <source>It's &lt;strong&gt;NOT&lt;/strong&gt; just a programming convention.</source>
          <target state="translated">これは単なるプログラミング規約ではあり&lt;strong&gt;ません&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="777237599abc671bc567b78dd552b08e24fe0ff7" translate="yes" xml:space="preserve">
          <source>It's not what &lt;em&gt;should&lt;/em&gt;&lt;code&gt;main()&lt;/code&gt; return, it's what &lt;em&gt;does&lt;/em&gt;&lt;code&gt;main()&lt;/code&gt; return.  &lt;code&gt;main()&lt;/code&gt; is, of course, a function that someone else calls.  You don't have any control over the code that calls &lt;code&gt;main()&lt;/code&gt;.  Therefore, you must declare &lt;code&gt;main()&lt;/code&gt; with a type-correct signature to match its caller.  You simply don't have any choice in the matter.  You don't have to ask yourself what's more or less efficient, or what's better or worse style, or anything like that, because the answer is already perfectly well defined, for you, by the C and C+ standards.  Just follow them.</source>
          <target state="translated">それ&lt;em&gt;は&lt;/em&gt; &lt;code&gt;main()&lt;/code&gt; が返すもので&lt;em&gt;は&lt;/em&gt;なく、 &lt;code&gt;main()&lt;/code&gt; が返すものです。 &lt;code&gt;main()&lt;/code&gt; はもちろん、他の誰かが呼び出す関数です。 &lt;code&gt;main()&lt;/code&gt; を呼び出すコードを制御することはできません。 したがって、 &lt;code&gt;main()&lt;/code&gt; は、呼び出し元と一致するようにタイプが正しいシグニチャーで宣言する必要があります。 あなたは単にその問題について何の選択肢もありません。 CとC +の標準によって答えがすでに完全に明確に定義されているため、効率の良し悪し、スタイルの良し悪し、またはそのようなものを自問する必要はありません。 それらに従ってください。</target>
        </trans-unit>
        <trans-unit id="ceda7d6ce3400641cfc2d2b305e73a181d717c83" translate="yes" xml:space="preserve">
          <source>J.5.1 Environment arguments</source>
          <target state="translated">J.5.1 環境引数</target>
        </trans-unit>
        <trans-unit id="4646a05e59e1cdcc72d17eecf0ad0e9d72001305" translate="yes" xml:space="preserve">
          <source>Just as the C standard recognizes both hosted and freestanding environment, so too does the C++ standard. (Quotes from ISO/IEC 14882:2011.)</source>
          <target state="translated">C標準がホスト型環境と自立型環境の両方を認識しているように、C++標準も同様に認識しています。(ISOIEC 14882:2011より引用)</target>
        </trans-unit>
        <trans-unit id="1cf33a289910a38b27ccf6fc406b6febbdf1f1a7" translate="yes" xml:space="preserve">
          <source>Keep in mind that,even though you're returning an int, some OSes (Windows) truncate the returned value to a single byte (0-255).</source>
          <target state="translated">intを返しているにもかかわらず、一部のOS(Windows)では、返された値を1バイト(0-255)に切り捨ててしまうことを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="52e3d5ebdbc06938d8f3e9175e5789910e8284cc" translate="yes" xml:space="preserve">
          <source>Legal definitions of &lt;code&gt;main()&lt;/code&gt; in C++14?</source>
          <target state="translated">C ++ 14での &lt;code&gt;main()&lt;/code&gt; の法的定義？</target>
        </trans-unit>
        <trans-unit id="82be7a55804dc08de0168f6f592f149c8a430e44" translate="yes" xml:space="preserve">
          <source>Microsoft C</source>
          <target state="translated">マイクロソフトC</target>
        </trans-unit>
        <trans-unit id="73d9e90f1eeed7db4c1746200a40ba2e4ac70074" translate="yes" xml:space="preserve">
          <source>Must the &lt;code&gt;int main()&lt;/code&gt; function return a value in all compilers?</source>
          <target state="translated">&lt;code&gt;int main()&lt;/code&gt; 関数はすべてのコンパイラで値を返す必要がありますか？</target>
        </trans-unit>
        <trans-unit id="2e35d4f77f18bcad3aefd139f948af15aa758b72" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;0&lt;/code&gt; is mandated as 'success'. You can use &lt;code&gt;EXIT_FAILURE&lt;/code&gt; and &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; from &lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt; if you prefer, but 0 is well established, and so is 1. See also &lt;a href=&quot;https://stackoverflow.com/questions/179565/exitcodes-bigger-than-255-possible/&quot;&gt;Exit codes greater than 255 &amp;mdash; possible?&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;0&lt;/code&gt; は「成功」として必須であることに注意してください。 必要に応じて、 &lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt; の &lt;code&gt;EXIT_FAILURE&lt;/code&gt; および &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; を使用できますが、0は十分に確立され、1も確立されます&lt;a href=&quot;https://stackoverflow.com/questions/179565/exitcodes-bigger-than-255-possible/&quot;&gt;。255より大きい終了コード&lt;/a&gt;も参照してください&amp;mdash;可能ですか？ 。</target>
        </trans-unit>
        <trans-unit id="bc19499ce0cd6befeb6d4ac0455d6a31e63efae2" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;int main()&lt;/code&gt; was never listed as a valid form for any hosted implementation of C in any of the above versions. In C, unlike C++, &lt;code&gt;()&lt;/code&gt; and &lt;code&gt;(void)&lt;/code&gt; have different meanings. The former is an obsolescent feature which may be removed from the language. See C11 future language directions:</source>
          <target state="translated">上記のバージョンのいずれにおいても、 &lt;code&gt;int main()&lt;/code&gt; がCのホストされた実装の有効な形式としてリストされたことはありません。 Cでは、C ++とは異なり、 &lt;code&gt;()&lt;/code&gt; と &lt;code&gt;(void)&lt;/code&gt; の意味が異なります。 前者は廃止された機能であり、言語から削除される可能性があります。 C11の将来の言語指示を参照してください。</target>
        </trans-unit>
        <trans-unit id="2a43cb795cc790685cb419ee571a160ade1ccb63" translate="yes" xml:space="preserve">
          <source>Note that the C and C++ standards define two kinds of implementations: freestanding and hosted.</source>
          <target state="translated">C および C++標準では、自立型とホスト型の 2 種類の実装が定義されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="99eaa646b7b6e0082dbd4a6adae2c494f9eec0c8" translate="yes" xml:space="preserve">
          <source>Note the empty parenthesis in the first form. C++ and C are different in this case, because in C++ this means that the function takes no parameters. But in C it means that it may take any parameter.</source>
          <target state="translated">最初の形式の空の括弧に注意してください。C++とC言語では、この場合は違うのですが、C++ではこれは関数がパラメータを取らないことを意味しています。しかし、C言語では任意のパラメータを取ることができることを意味しています。</target>
        </trans-unit>
        <trans-unit id="546cad710ccd581eadc450a0c74833e5bcaa545e" translate="yes" xml:space="preserve">
          <source>Now the following bash script (simply type it in a Linux terminal) although very basic should give some idea of error handling:</source>
          <target state="translated">さて、非常に基本的なことですが、次の bash スクリプト (単に Linux 端末でそれを入力します)は、エラー処理のいくつかのアイデアを与える必要があります。</target>
        </trans-unit>
        <trans-unit id="bb080a0718df6542d4433b03a9323560b055bb4d" translate="yes" xml:space="preserve">
          <source>Omit &lt;code&gt;return 0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;return 0&lt;/code&gt; 省略</target>
        </trans-unit>
        <trans-unit id="71453973d6cd4b7d6dce02765e1aeb2c794927d7" translate="yes" xml:space="preserve">
          <source>Or equivalent. For example, &lt;code&gt;int main(int argc, char *argv[])&lt;/code&gt; is equivalent to the second one. Further, the &lt;code&gt;int&lt;/code&gt; return type can be omitted as it is a default.</source>
          <target state="translated">または同等。 たとえば、 &lt;code&gt;int main(int argc, char *argv[])&lt;/code&gt; は2番目のものと同等です。 また、 &lt;code&gt;int&lt;/code&gt; の戻り値の型はデフォルトなので省略できます。</target>
        </trans-unit>
        <trans-unit id="1b4a599777a8efd1033fda40d60a3ac6da68728f" translate="yes" xml:space="preserve">
          <source>Program termination in C99 or C11</source>
          <target state="translated">C99またはC11でのプログラム終了</target>
        </trans-unit>
        <trans-unit id="663f993e9b4f3d44ef4c0329debae8aeebbf12e3" translate="yes" xml:space="preserve">
          <source>Rationale for International Standard &amp;mdash; Programming Languages &amp;mdash; C, Revision 5.10. 5.1.2.2 Hosted environment --&amp;gt; 5.1.2.2.1 Program startup</source>
          <target state="translated">国際標準の根拠&amp;mdash;プログラミング言語&amp;mdash; C、リビジョン5.10。 5.1.2.2ホスト環境-&amp;gt; 5.1.2.2.1プログラムの起動</target>
        </trans-unit>
        <trans-unit id="39c788876858d9fdd3ed2ab494830cb7baca1db1" translate="yes" xml:space="preserve">
          <source>Related:</source>
          <target state="translated">Related:</target>
        </trans-unit>
        <trans-unit id="06951cda41c4c25e07384cc2d791df8051ddc4f0" translate="yes" xml:space="preserve">
          <source>Return 0 on success and non-zero for error. This is the standard used by UNIX and DOS scripting to find out what happened with your program.</source>
          <target state="translated">成功した場合は 0、エラーの場合は 0 以外を返します。これは、プログラムで何が起こったかを調べるためにUNIXやDOSスクリプトで使用される標準的なものです。</target>
        </trans-unit>
        <trans-unit id="c25bf9ecf87e37204aff4b7cbc681350ca825d5e" translate="yes" xml:space="preserve">
          <source>Return type of &lt;code&gt;main()&lt;/code&gt; method in C</source>
          <target state="translated">Cの &lt;code&gt;main()&lt;/code&gt; メソッドの戻り型</target>
        </trans-unit>
        <trans-unit id="3675c5cbc8a91d96194988edd341f2880e76b8d4" translate="yes" xml:space="preserve">
          <source>Return value 0 usually means OK in most operating systems (the ones I can think of anyway).</source>
          <target state="translated">返り値 0 は通常、ほとんどのオペレーティングシステムでは OK を意味します (私が思いつく限りでは)。</target>
        </trans-unit>
        <trans-unit id="7e87f801e2a286959cf6dbceaaf5200c563638ca" translate="yes" xml:space="preserve">
          <source>Returning 0 should tell the programmer that the program has successfully finished the job.</source>
          <target state="translated">0を返すと、プログラムが正常にジョブを終了したことをプログラマーに伝える必要があります。</target>
        </trans-unit>
        <trans-unit id="d0d3720869171e755af6d0b0e9c8fa9c47bded55" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://stackoverflow.com/q/8626109/775964&quot;&gt;How can I get what my main function has returned?&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/q/8626109/775964&quot;&gt;メイン関数が返したもの&lt;/a&gt;をどのように取得できますか？を参照してください。 。</target>
        </trans-unit>
        <trans-unit id="58c7663db54efd33586550979f6f35585936911c" translate="yes" xml:space="preserve">
          <source>Since grep failed to match the token &quot;foo&quot; with the content of our file the return code is 1 (this is the usual case when a failure occurs but as stated above you have plenty of values to choose from).</source>
          <target state="translated">grepがトークン &quot;foo &quot;とファイルの内容を一致させるのに失敗したので、リターンコードは1になります(これは失敗したときの通常のケースですが、上で述べたように、あなたはたくさんの値から選ぶことができます)。</target>
        </trans-unit>
        <trans-unit id="58e729ae862197d2b4b8edf3be6c045cd942acef" translate="yes" xml:space="preserve">
          <source>So I advocate omitting it; others disagree (often vehemently!)  In any case, if you encounter code that omits it, you'll know that it's explicitly supported by the standard and you'll know what it means.</source>
          <target state="translated">ですから、私はこれを省略することを提唱していますが、他の人は(しばしば激しく反対しています!)いずれにしても、これを省略したコードに遭遇した場合、それが標準で明示的にサポートされていることを知ることができ、それが何を意味するのかを知ることができるでしょう。</target>
        </trans-unit>
        <trans-unit id="191c9d7581d1bc67cbc4954e3995712f84c74941" translate="yes" xml:space="preserve">
          <source>Some compilers have chosen to interpret the standard in the latter way. Arguably, one cannot easily state that they are not strictly conforming by citing the standard in itself, since it is is ambiguous.</source>
          <target state="translated">いくつかのコンパイラは後者の方法で標準を解釈しています。議論の余地なく、標準は曖昧なので、標準を引用して厳密に準拠していないことを簡単に表明することはできません。</target>
        </trans-unit>
        <trans-unit id="f98b7a7fbe66aa30604d46c9c186df5e7d476f7a" translate="yes" xml:space="preserve">
          <source>Standard C &amp;mdash; Common Extension</source>
          <target state="translated">標準C &amp;mdash;共通拡張</target>
        </trans-unit>
        <trans-unit id="559fce21984836e0b4c09f404ccadb796a238608" translate="yes" xml:space="preserve">
          <source>Standard C &amp;mdash; Freestanding Environment</source>
          <target state="translated">標準C &amp;mdash;独立型環境</target>
        </trans-unit>
        <trans-unit id="bf0058befe2fe0784752a61367cd774b2170e902" translate="yes" xml:space="preserve">
          <source>Standard C &amp;mdash; Hosted Environment</source>
          <target state="translated">標準C &amp;mdash;ホスト環境</target>
        </trans-unit>
        <trans-unit id="ead9983c448c82a4bc2e4fa329267dd58510e74c" translate="yes" xml:space="preserve">
          <source>Standard C++ &amp;mdash; Freestanding Environment</source>
          <target state="translated">標準C ++ &amp;mdash;独立型環境</target>
        </trans-unit>
        <trans-unit id="17c880ba258c61c1f081e4f92072401258328c3f" translate="yes" xml:space="preserve">
          <source>Standard C++ &amp;mdash; Hosted Environment</source>
          <target state="translated">標準C ++ &amp;mdash;ホスト環境</target>
        </trans-unit>
        <trans-unit id="9e9bfc97678e1deb8fecca963cb28baa3742ac8f" translate="yes" xml:space="preserve">
          <source>Styles of &lt;code&gt;main()&lt;/code&gt; functions in C</source>
          <target state="translated">Cの &lt;code&gt;main()&lt;/code&gt; 関数のスタイル</target>
        </trans-unit>
        <trans-unit id="c32251a4dd807171928d97ccdcdf5412b6e1b584" translate="yes" xml:space="preserve">
          <source>Table 16 &amp;mdash; C++ headers for freestanding implementations</source>
          <target state="translated">表16 &amp;mdash;独立型実装のC ++ヘッダー</target>
        </trans-unit>
        <trans-unit id="0b88a0ea077a1c835e53dcb3e5afe37a4a6880f1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/6wd819wh%28v=vs.100%29.aspx&quot;&gt;Microsoft VS 2010&lt;/a&gt; compiler is interesting. The web site says:</source>
          <target state="translated">&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/6wd819wh%28v=vs.100%29.aspx&quot;&gt;Microsoft VS 2010&lt;/a&gt;コンパイラーは興味深いものです。 ウェブサイトは言う：</target>
        </trans-unit>
        <trans-unit id="8364d6bdc8c6440426e1ae40049191ae42429996" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; return type may not be omitted.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 戻り型は省略できません。</target>
        </trans-unit>
        <trans-unit id="1cf16e3e7d80a6df169adb6cfe5d5a70bd761eb9" translate="yes" xml:space="preserve">
          <source>The C++ standard explicitly says &quot;It [the main function] shall have a return type of type &lt;code&gt;int&lt;/code&gt;, but otherwise its type is implementation defined&quot;, and requires the same two signatures as the C standard to be supported as options. So a 'void main()' is directly not allowed by the C++ standard, though there's nothing it can do to stop a non-standard implementation allowing alternatives.  Note that C++ forbids the user from calling &lt;code&gt;main&lt;/code&gt; (but the C standard does not).</source>
          <target state="translated">C ++標準では、「[メイン関数]の戻り値の型は &lt;code&gt;int&lt;/code&gt; 型である必要がありますが、それ以外の場合はその型は実装で定義されています」と明記されており、C標準と同じ2つの署名をオプションとしてサポートする必要があります。 したがって、「void main（）」はC ++標準では直接許可されていませんが、非標準の実装を停止して代替を許可する方法はありません。 C ++はユーザーが &lt;code&gt;main&lt;/code&gt; を呼び出すことを禁止していることに注意してください（ただし、C標準では禁止されていません）。</target>
        </trans-unit>
        <trans-unit id="8ffaebd7ec7fa463926f599cf1254982eb713376" translate="yes" xml:space="preserve">
          <source>The C++11 standard (ISO/IEC 14882:2011) says:</source>
          <target state="translated">C++11規格(ISOIEC 14882:2011)によると</target>
        </trans-unit>
        <trans-unit id="4a496911a1450193efc097e191321a84e102d3d2" translate="yes" xml:space="preserve">
          <source>The Microsoft &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Visual_Studio_2005&quot;&gt;Visual&amp;nbsp;Studio&amp;nbsp;2005&lt;/a&gt; version of &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/6wd819wh%28v=vs.80%29.aspx&quot;&gt;this page&lt;/a&gt; does not list &lt;code&gt;void main()&lt;/code&gt; as an alternative.  The &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/6wd819wh%28v=vs.90%29.aspx&quot;&gt;versions&lt;/a&gt; from Microsoft &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Visual_Studio_2008&quot;&gt;Visual&amp;nbsp;Studio&amp;nbsp;2008&lt;/a&gt; onwards do.</source>
          <target state="translated">&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/6wd819wh%28v=vs.80%29.aspx&quot;&gt;このページ&lt;/a&gt;のMicrosoft &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Visual_Studio_2005&quot;&gt;Visual Studio 2005&lt;/a&gt;バージョンでは、代替として &lt;code&gt;void main()&lt;/code&gt; がリストされていません。 Microsoft &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Visual_Studio_2008&quot;&gt;Visual Studio 2008&lt;/a&gt;以降の&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/6wd819wh%28v=vs.90%29.aspx&quot;&gt;バージョンで対応&lt;/a&gt;しています。</target>
        </trans-unit>
        <trans-unit id="33cca83a9e2b339c3446cbab746394360baf8d65" translate="yes" xml:space="preserve">
          <source>The Microsoft page also lists some other alternatives &amp;mdash; &lt;code&gt;wmain()&lt;/code&gt; which takes wide character strings, and some more.</source>
          <target state="translated">Microsoftのページには、ワイド文字列をとる &lt;code&gt;wmain()&lt;/code&gt; など、その他の選択肢もいくつかリストされています。</target>
        </trans-unit>
        <trans-unit id="7b0070d4ea6e95a967d24e8102c2d33f422b3fe2" translate="yes" xml:space="preserve">
          <source>The accepted answer appears to be targetted for C++, so I thought I'd add an answer that pertains to C, and this differs in a few ways.</source>
          <target state="translated">受け入れられた回答はC++を対象としているようなので、Cに関係する回答を付け加えようと思いましたが、これはいくつかの点で異なっています。</target>
        </trans-unit>
        <trans-unit id="546b26c20b5018e8e91b597a6abc305d7ad960ec" translate="yes" xml:space="preserve">
          <source>The behavior of the arguments to main, and of the interaction of exit, main and atexit
  (see &amp;sect;7.20.4.2) has been codified to curb some unwanted variety in the representation of argv
  strings, and in the meaning of values returned by main.</source>
          <target state="translated">mainへの引数の動作と、exit、main、およびatexit（&amp;sect;7.20.4.2を参照）の相互作用の動作は、argv文字列の表現とmainから返される値の意味の不要な多様性を抑制するために体系化されました。</target>
        </trans-unit>
        <trans-unit id="a1332b3e9a470eb6ea2ea721bb6e42f19fd7ef60" translate="yes" xml:space="preserve">
          <source>The cross-reference to clause 4 Conformance refers to this:</source>
          <target state="translated">第4節適合性の相互参照は、これを指している。</target>
        </trans-unit>
        <trans-unit id="dc11d899a2bbef6b7ca7ebc05f3a76f63e6b3145" translate="yes" xml:space="preserve">
          <source>The declaration syntax for main is</source>
          <target state="translated">main の宣言構文は</target>
        </trans-unit>
        <trans-unit id="54d077d6bc220b344cc0c2c98d6bff99a69286f5" translate="yes" xml:space="preserve">
          <source>The effect of program termination in a freestanding environment is implementation-defined.</source>
          <target state="translated">フリースタンディング環境でのプログラム終了の効果は、実装で定義されています。</target>
        </trans-unit>
        <trans-unit id="d7cf7c56944bc0e60c66b4dd6a3630c1023a7db0" translate="yes" xml:space="preserve">
          <source>The former two are explicitly stated as the allowed forms, the others are implicitly allowed because C90 allowed &quot;implicit int&quot; for return type and function parameters. No other form is allowed.</source>
          <target state="translated">前者の2つは許可される形式として明示的に記述されていますが、他の形式はC90が戻り値の型と関数のパラメータに「暗黙のint」を許可しているため、暗黙のうちに許可されています。他の形式は許可されていません。</target>
        </trans-unit>
        <trans-unit id="026f98c964de0d94f5fb9b6a1e303e50bcc1cdd6" translate="yes" xml:space="preserve">
          <source>The function called at program startup is named &lt;code&gt;main&lt;/code&gt;. The implementation declares no
  prototype for this function. It shall be defined with a return type of &lt;code&gt;int&lt;/code&gt; and with no
  parameters:</source>
          <target state="translated">プログラムの起動時に呼び出される関数の名前は &lt;code&gt;main&lt;/code&gt; です。 実装は、この関数のプロトタイプを宣言していません。 これは、戻り値の型 &lt;code&gt;int&lt;/code&gt; で定義され、パラメーターはありません。</target>
        </trans-unit>
        <trans-unit id="ca5968af6b9e074a35418f4f286474743cccbd2c" translate="yes" xml:space="preserve">
          <source>The function called at program startup is named main. The
  implementation declares no prototype for this function. It shall be
  defined with a return type of int and with no parameters:</source>
          <target state="translated">プログラム起動時に呼び出される関数はmainと名付けられる。実装では,この関数のプロトタイプは宣言しない。戻り値の型は int であり、パラメータを持たないものとする。</target>
        </trans-unit>
        <trans-unit id="0ae03504835ac4c96ab05373731aeafea22c07c0" translate="yes" xml:space="preserve">
          <source>The name of the function called at startup is implementation-defined. If it is named &lt;code&gt;main()&lt;/code&gt; it must follow the stated forms &lt;sup&gt;10&lt;/sup&gt;:</source>
          <target state="translated">起動時に呼び出される関数の名前は実装定義です。 &lt;code&gt;main()&lt;/code&gt; という名前の場合、指定された形式&lt;sup&gt;10に&lt;/sup&gt;従う必要があります。</target>
        </trans-unit>
        <trans-unit id="42cedb16b5fd329909d8d618d881e9149d7c8ddf" translate="yes" xml:space="preserve">
          <source>The name of the function called at startup is implementation-defined. If it is named &lt;code&gt;main()&lt;/code&gt; it must follow the stated forms &lt;sup&gt;12&lt;/sup&gt;:</source>
          <target state="translated">起動時に呼び出される関数の名前は実装定義です。 &lt;code&gt;main()&lt;/code&gt; という名前の場合、指定された形式&lt;sup&gt;12に&lt;/sup&gt;従う必要があります。</target>
        </trans-unit>
        <trans-unit id="f411eabfea18f4d722bb32c090c81895998e01e5" translate="yes" xml:space="preserve">
          <source>The parameters &lt;code&gt;argc&lt;/code&gt; and &lt;code&gt;argv&lt;/code&gt; and the strings pointed to by the &lt;code&gt;argv&lt;/code&gt; array shall
  be modifiable by the program, and retain their last-stored values between program
  startup and program termination.</source>
          <target state="translated">パラメータ &lt;code&gt;argc&lt;/code&gt; と &lt;code&gt;argv&lt;/code&gt; 、および &lt;code&gt;argv&lt;/code&gt; 配列が指す文字列は、プログラムによって変更可能であり、プログラムの起動とプログラムの終了の間、最後に格納された値を保持します。</target>
        </trans-unit>
        <trans-unit id="71f2b4381bd48e53fc5bf7bb37600cda30ef7a72" translate="yes" xml:space="preserve">
          <source>The return type of &lt;code&gt;main()&lt;/code&gt; function</source>
          <target state="translated">&lt;code&gt;main()&lt;/code&gt; 関数の戻りの型</target>
        </trans-unit>
        <trans-unit id="30c22afa61a69f090f04a4b51d6f0da94397dc2d" translate="yes" xml:space="preserve">
          <source>The return value can be used by the operating system to check how the program was closed.</source>
          <target state="translated">この戻り値は、オペレーティングシステムがプログラムがどのように閉じられたかを確認するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="ba1f12ca047f8d89e6d47cc78475d9dc71642ebe" translate="yes" xml:space="preserve">
          <source>The return value for &lt;code&gt;main&lt;/code&gt; indicates how the program exited. Normal exit is represented by a 0 return value from &lt;code&gt;main&lt;/code&gt;. Abnormal exit is signaled by a non-zero return, but there is no standard for how non-zero codes are interpreted. As noted by others, &lt;code&gt;void main()&lt;/code&gt; is prohibited by the C++ standard and should not be used. The valid C++ &lt;code&gt;main&lt;/code&gt; signatures are:</source>
          <target state="translated">&lt;code&gt;main&lt;/code&gt; の戻り値は、プログラムがどのように終了したかを示します。 通常の終了は、 &lt;code&gt;main&lt;/code&gt; からの0の戻り値で表されます。 異常終了は、ゼロ以外の戻りによって通知されますが、ゼロ以外のコードの解釈方法に関する標準はありません。 他の人が指摘したように、 &lt;code&gt;void main()&lt;/code&gt; はC ++標準で禁止されており、使用しないでください。 有効なC ++ &lt;code&gt;main&lt;/code&gt; シグネチャは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="22dbe4ab7277e0bacb463020855fe29f4a135940" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;main()&lt;/code&gt; shows how the program exited. If the return value is &lt;code&gt;zero&lt;/code&gt; it means that the execution was successful while any non-zero value will represent that something went bad in the execution.</source>
          <target state="translated">&lt;code&gt;main()&lt;/code&gt; の戻り値は、プログラムがどのように終了したかを示します。 戻り値が &lt;code&gt;zero&lt;/code&gt; 場合は、実行が成功したことを意味します。0以外の値は、実行中に問題が発生したことを表します。</target>
        </trans-unit>
        <trans-unit id="e22ad7a310bc1d275667315bd2dea731a9a4ebdc" translate="yes" xml:space="preserve">
          <source>The specification of argc and argv as arguments to main recognizes extensive prior practice.
  argv[argc] is required to be a null pointer to provide a redundant check for the end of the list, also on the basis of common practice.</source>
          <target state="translated">argcとargvをmainへの引数として指定することは、広範な先行プラクティスを認識しています。 argv[argc]は、リストの末尾の冗長なチェックを提供するためにNULLポインタであることが要求されます。</target>
        </trans-unit>
        <trans-unit id="8e2e310f8d276bce8425174414a371db8d39f43f" translate="yes" xml:space="preserve">
          <source>The standard &amp;sect;5.1.2.2.1 of the C11 standard shows the preferred notation &amp;mdash;&amp;nbsp;&lt;code&gt;int main(void)&lt;/code&gt; &amp;mdash; but there are also two examples in the standard which show &lt;code&gt;int main()&lt;/code&gt;: &lt;a href=&quot;https://port70.net/~nsz/c/c11/n1570.html#6.5.3.4p8&quot;&gt;&amp;sect;6.5.3.4 &amp;para;8&lt;/a&gt; and &lt;a href=&quot;https://port70.net/~nsz/c/c11/n1570.html#6.7.6.3p20&quot;&gt;&amp;sect;6.7.6.3 &amp;para;20&lt;/a&gt;.  Now, it is important to note that examples are not 'normative'; they are only illustrative.  If there are bugs in the examples, they do not directly affect the main text of the standard.  That said, they are strongly indicative of expected behaviour, so if the standard includes &lt;code&gt;int main()&lt;/code&gt; in an example, it suggests that &lt;code&gt;int main()&lt;/code&gt; is not forbidden, even if it is not the preferred notation.</source>
          <target state="translated">C11標準の標準&amp;sect;5.1.2.2.1は、推奨される表記法 &lt;code&gt;int main(void)&lt;/code&gt; 示していますが、標準には、 &lt;code&gt;int main()&lt;/code&gt; を示す2つの例もあります&lt;a href=&quot;https://port70.net/~nsz/c/c11/n1570.html#6.5.3.4p8&quot;&gt;。&amp;sect;6.5.3.4&amp;para;8&lt;/a&gt;および&lt;a href=&quot;https://port70.net/~nsz/c/c11/n1570.html#6.7.6.3p20&quot;&gt;&amp;sect;6.7.6.3 &amp;para;20&lt;/a&gt; 。 ここで、例は「規範的」ではないことに注意することが重要です。 これらは単なる例示です。 例にバグがあっても、標準の本文には直接影響しません。 とは言っても、それらは予想される動作を強く示しているため、標準に例の &lt;code&gt;int main()&lt;/code&gt; が含まれている場合、優先表記でなくてもint main（）が禁止されていないことを示しています。</target>
        </trans-unit>
        <trans-unit id="21097dd912cf311cfdb6f22df1d0503ba8d3b181" translate="yes" xml:space="preserve">
          <source>The standard defines 3 values for returning that are strictly conforming (that is, does not rely on implementation defined behaviour): &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; for a successful termination, and &lt;code&gt;EXIT_FAILURE&lt;/code&gt; for an unsuccessful termination. Any other values are non-standard and implementation defined. &lt;code&gt;main()&lt;/code&gt; must have an explicit &lt;code&gt;return&lt;/code&gt; statement at the end to avoid undefined behaviour.</source>
          <target state="translated">この規格では、厳密に準拠する（つまり、実装で定義された動作に依存しない）戻り値を3つ定義しています &lt;code&gt;0&lt;/code&gt; と &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; は正常終了、 &lt;code&gt;EXIT_FAILURE&lt;/code&gt; は異常終了です。 その他の値はすべて非標準であり、実装が定義されています。 &lt;code&gt;main()&lt;/code&gt; は、未定義の動作を回避するために、末尾に明示的な &lt;code&gt;return&lt;/code&gt; ステートメントが必要です。</target>
        </trans-unit>
        <trans-unit id="04c357fe47330fd474b14115ca9a3a38ddbd2e54" translate="yes" xml:space="preserve">
          <source>The supplied version of the header &lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt; shall declare at least the functions &lt;code&gt;abort&lt;/code&gt;, &lt;code&gt;atexit&lt;/code&gt;, &lt;code&gt;at_quick_exit&lt;/code&gt;, &lt;code&gt;exit&lt;/code&gt;, and &lt;code&gt;quick_exit&lt;/code&gt; (18.5). The other headers listed in this table shall meet the same requirements as for a hosted implementation.</source>
          <target state="translated">提供されたバージョンのヘッダー &lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt; は、少なくとも関数 &lt;code&gt;abort&lt;/code&gt; 、 &lt;code&gt;atexit&lt;/code&gt; 、 &lt;code&gt;at_quick_exit&lt;/code&gt; 、 &lt;code&gt;exit&lt;/code&gt; 、および &lt;code&gt;quick_exit&lt;/code&gt; （18.5）を宣言します。 この表にリストされている他のヘッダーは、ホストされる実装の場合と同じ要件を満たしている必要があります。</target>
        </trans-unit>
        <trans-unit id="215b83b15446fc6e768d7de47de3d64d6250e81c" translate="yes" xml:space="preserve">
          <source>The text of the standard has been changed but it has the same meaning.</source>
          <target state="translated">規格の本文は変更されていますが、意味は同じです。</target>
        </trans-unit>
        <trans-unit id="3a96141f4a269d89eae9927fca95e222c0774ce2" translate="yes" xml:space="preserve">
          <source>The third argument is a null-terminated list of pointers to strings, each of which is an environment variable which has a name, an equals sign, and a value (possibly empty).  If you do not use this, you can still get at the environment via '&lt;code&gt;extern char **environ;&lt;/code&gt;'.  This global variable is unique among those in POSIX in that it does not have a header that declares it.</source>
          <target state="translated">3番目の引数は、nullで終了する文字列へのポインターのリストです。それぞれのポインターは、名前、等号、および値（場合によっては空）を持つ環境変数です。 これを使用しない場合でも、 ' &lt;code&gt;extern char **environ;&lt;/code&gt; で環境を取得できます。 '。 このグローバル変数は、それを宣言するヘッダーがないという点でPOSIXのグローバル変数の中で一意です。</target>
        </trans-unit>
        <trans-unit id="f1917f923748d24954167ac87cbedac4efe8c562" translate="yes" xml:space="preserve">
          <source>The use of function declarators with empty parentheses (not prototype-format parameter type declarators) is an obsolescent feature.</source>
          <target state="translated">空の括弧付きの関数宣言子(プロトタイプ形式のパラメータ型宣言子ではありません)を使用することは、時代遅れの機能です。</target>
        </trans-unit>
        <trans-unit id="1e1d1d4c80a34abbd78d532e533e8e32a26baa46" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;argc&lt;/code&gt; shall be nonnegative.</source>
          <target state="translated">&lt;code&gt;argc&lt;/code&gt; の値は負ではありません。</target>
        </trans-unit>
        <trans-unit id="3b6837137519a235145649ca26f22f77d0ac5ffc" translate="yes" xml:space="preserve">
          <source>The value returned from &lt;code&gt;main()&lt;/code&gt; is transmitted to the 'environment' in an implementation-defined way.</source>
          <target state="translated">&lt;code&gt;main()&lt;/code&gt; から返された値は、実装で定義された方法で「環境」に送信されます。</target>
        </trans-unit>
        <trans-unit id="ca8a9e03a294ed095d6a449285082fc38a13cce6" translate="yes" xml:space="preserve">
          <source>There's a paragraph of &amp;sect;18.5 &lt;strong&gt;Start and termination&lt;/strong&gt; in the C++11 standard that is identical to the paragraph from &amp;sect;7.22.4.4 &lt;strong&gt;The &lt;code&gt;exit&lt;/code&gt; function&lt;/strong&gt; in the C11 standard (quoted above), apart from a footnote (which simply documents that &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; and &lt;code&gt;EXIT_FAILURE&lt;/code&gt; are defined in &lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">C ++ 11標準には、&amp;sect;7.22.4.4 &lt;strong&gt;の&lt;/strong&gt;段落と同じである&amp;sect;18.5の&lt;strong&gt;開始と終了の&lt;/strong&gt;段落があり、脚注（ &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; および &lt;code&gt;EXIT_FAILURE&lt;/code&gt; は &lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt; で定義されています ）。</target>
        </trans-unit>
        <trans-unit id="8878897f94a88e2eb0a72b92a1a8eea14341dd7c" translate="yes" xml:space="preserve">
          <source>This is recognized by the C standard as a common extension, documented in Annex J:</source>
          <target state="translated">これは,附属書Jで文書化されている共通拡張としてC標準で認識されている。</target>
        </trans-unit>
        <trans-unit id="90c926db372e34ff57f910bfc2a6bb307fd78475" translate="yes" xml:space="preserve">
          <source>This is some example in order to check how grep works.</source>
          <target state="translated">grepがどのように動作するかを確認するための例です。</target>
        </trans-unit>
        <trans-unit id="d9135e4649a5add9899348971cdf27790adec503" translate="yes" xml:space="preserve">
          <source>This section is identical to the C++03 one cited above.</source>
          <target state="translated">このセクションは、上で引用した C++03 と同じです。</target>
        </trans-unit>
        <trans-unit id="aff26f54c08ac6a220e320cf88a1cc85885f4a3d" translate="yes" xml:space="preserve">
          <source>This section is identical to the C99 one cited above.</source>
          <target state="translated">この部分は、上記で引用したC99と同一である。</target>
        </trans-unit>
        <trans-unit id="492f852c402b8701a3d8ac1e786125fd366f3983" translate="yes" xml:space="preserve">
          <source>This way you can see that it is the variable &lt;code&gt;$?&lt;/code&gt; which receives the least significant byte of the return value of &lt;code&gt;main()&lt;/code&gt;.</source>
          <target state="translated">このようにして、変数 &lt;code&gt;$?&lt;/code&gt; あることがわかりますか？ &lt;code&gt;main()&lt;/code&gt; の戻り値の最下位バイトを受け取ります。</target>
        </trans-unit>
        <trans-unit id="083f523a48b50dec805c4b80d1381d0a4f4fa86b" translate="yes" xml:space="preserve">
          <source>Those words &quot;(most efficient)&quot; don't change the question.  Unless you're in a freestanding environment, there is one universally correct way to declare &lt;code&gt;main()&lt;/code&gt;, and that's as returning int.</source>
          <target state="translated">「（最も効率的）」という言葉は問題を変えません。 あなたが独立した環境にいない限り、 &lt;code&gt;main()&lt;/code&gt; を宣言する普遍的に正しい方法が1つあり、それはintを返すことです。</target>
        </trans-unit>
        <trans-unit id="dd1d619c61e03e7c3983d9cf6e51c9a460b55ae1" translate="yes" xml:space="preserve">
          <source>Two execution environments are defined: freestanding and hosted. In both cases,
  program startup occurs when a designated C function is called by the execution
  environment. All objects with static storage duration shall be initialized (set to their initial values) before program startup. The manner and timing of such initialization are otherwise unspecified. Program termination returns control to the execution environment.</source>
          <target state="translated">実行環境には、自立型とホスト型の2種類が定義されています。いずれの場合も、プログラムの起動は、指定されたC関数が実行環境から呼び出されたときに発生する。静的記憶期間を持つ全てのオブジェクトは、プログラム起動前に初期化(初期値に設定)されなければならない。このような初期化の方法とタイミングは特に規定しない。プログラムの終了は実行環境に制御を戻す。</target>
        </trans-unit>
        <trans-unit id="7e6d901cc3741eac5e0d54d5f5f6b0f0c7091f78" translate="yes" xml:space="preserve">
          <source>Two kinds of implementations are defined: hosted and freestanding (1.4). For a hosted implementation, this International Standard describes the set of available headers.</source>
          <target state="translated">2種類の実装が定義されています:ホスト型と自立型(1.4)です。ホスト型の実装については、この国際標準規格では、利用可能なヘッダのセットを記述しています。</target>
        </trans-unit>
        <trans-unit id="c8ffe25090b0726f102193ed465ce10faae40214" translate="yes" xml:space="preserve">
          <source>What about using &lt;code&gt;int main()&lt;/code&gt; in C?</source>
          <target state="translated">Cでの &lt;code&gt;int main()&lt;/code&gt; の使用についてはどうですか？</target>
        </trans-unit>
        <trans-unit id="8db9388f551bf79763f6d366a53d00645a18b452" translate="yes" xml:space="preserve">
          <source>What are the valid signatures for C's &lt;code&gt;main()&lt;/code&gt; function?</source>
          <target state="translated">Cの &lt;code&gt;main()&lt;/code&gt; 関数の有効なシグネチャは何ですか？</target>
        </trans-unit>
        <trans-unit id="e375a0bb38b5733f5e33aea178300914bf1fc13b" translate="yes" xml:space="preserve">
          <source>What is the correct (most efficient) way to define the &lt;code&gt;main()&lt;/code&gt; function in C and C++ &amp;mdash; &lt;code&gt;int main()&lt;/code&gt; or &lt;code&gt;void main()&lt;/code&gt; &amp;mdash; and why? 
If &lt;code&gt;int main()&lt;/code&gt; then &lt;code&gt;return 1&lt;/code&gt; or &lt;code&gt;return 0&lt;/code&gt;?</source>
          <target state="translated">CおよびC ++で &lt;code&gt;main()&lt;/code&gt; 関数を定義する正しい（最も効率的な）方法は何ですか&amp;mdash; &lt;code&gt;int main()&lt;/code&gt; または &lt;code&gt;void main()&lt;/code&gt; &amp;mdash;なぜですか？ &lt;code&gt;int main()&lt;/code&gt; の場合、 &lt;code&gt;return 1&lt;/code&gt; &lt;code&gt;return 0&lt;/code&gt; か、 0を返しますか？</target>
        </trans-unit>
        <trans-unit id="ac7910d8738d0f6edbbbc837537320cc7243db50" translate="yes" xml:space="preserve">
          <source>What is the correct (most efficient) way to define the main() function in C and C++ &amp;mdash; int main() or void main() &amp;mdash; and why?</source>
          <target state="translated">CおよびC ++でmain（）関数を定義する正しい（最も効率的な）方法は何ですか&amp;mdash; int main（）またはvoid main（）&amp;mdash;なぜですか？</target>
        </trans-unit>
        <trans-unit id="b6fa6e7eb3c56c5443ca329d417a88f4f68960be" translate="yes" xml:space="preserve">
          <source>What should &lt;code&gt;main()&lt;/code&gt; return in C and C++?</source>
          <target state="translated">&lt;code&gt;main()&lt;/code&gt; はCおよびC ++で何を返す必要がありますか？</target>
        </trans-unit>
        <trans-unit id="486019aa245ddcb5e5499f2b26db2df46e934c65" translate="yes" xml:space="preserve">
          <source>What should main() return in C and C++</source>
          <target state="translated">C と C++で main()は何を返すべきか?</target>
        </trans-unit>
        <trans-unit id="30ef05539959ff243c4e180d8cd581aaf97379b0" translate="yes" xml:space="preserve">
          <source>What to return depends on what you want to do with the executable. For example if you are using your program with a command line shell, then you need to return 0 for a success and a non zero for failure. Then you would be able to use the program in shells with conditional processing depending on the outcome of your code. Also you can assign any nonzero value as per your interpretation, for example for critical errors different program exit points could terminate a program with different exit values , and which is available to the calling shell which can decide what to do by inspecting the value returned.
If the code is not intended for use with shells and the returned value does not bother anybody then it might be omitted. I personally use the signature &lt;code&gt;int main (void) { .. return 0; .. }&lt;/code&gt;</source>
          <target state="translated">何を返すかは、実行可能ファイルで何をしたいかによって異なります。 たとえば、プログラムをコマンドラインシェルで使用している場合、成功した場合は0を返し、失敗した場合は0以外を返す必要があります。 次に、コードの結果に応じて、条件付き処理を伴うシェルでプログラムを使用できます。 また、解釈に応じてゼロ以外の値を割り当てることもできます。たとえば、重大なエラーの場合、さまざまなプログラムの終了ポイントがさまざまな終了値でプログラムを終了させる可能性があり、返された値を検査することによって何を行うかを決定できる呼び出し側シェルで使用できます。 コードがシェルでの使用を目的としておらず、戻り値がだれも気にしない場合は、省略される可能性があります。 私は個人的に &lt;code&gt;int main (void) { .. return 0; .. }&lt;/code&gt; という署名を使用しています。 ..}</target>
        </trans-unit>
        <trans-unit id="23877bc0573cb6974d91820ac2c5704526b909c4" translate="yes" xml:space="preserve">
          <source>When a C or C++ program reaches the end of &lt;code&gt;main&lt;/code&gt; the compiler will automatically generate code to return 0, so there is no need to put &lt;code&gt;return 0;&lt;/code&gt; explicitly at the end of &lt;code&gt;main&lt;/code&gt;.</source>
          <target state="translated">CまたはC ++プログラムが &lt;code&gt;main&lt;/code&gt; の終わりに到達すると、コンパイラーは自動的に0を返すコードを生成するため、 &lt;code&gt;return 0;&lt;/code&gt; を配置する必要はありません。 &lt;code&gt;main&lt;/code&gt; の最後に明示的に。</target>
        </trans-unit>
        <trans-unit id="c0ff9c6d19528fc5ecbf1d4fd6390af8df49063b" translate="yes" xml:space="preserve">
          <source>When using the various tools that the Linux terminal provides one can use the return code for example for error handling after the process has been completed. Imagine that the following text file myfile is present:</source>
          <target state="translated">Linux 端末が提供する様々なツールを使用する場合、プロセスが完了した後のエラー処理などにリターンコードを使用することができます。以下のテキストファイル myfile が存在すると想像してください。</target>
        </trans-unit>
        <trans-unit id="1ed64c1ea746c88bec38d149c99f20765bec153b" translate="yes" xml:space="preserve">
          <source>When you execute the grep command a process is created. Once it is through (and didn't break) it returns some code between 0 and 255. For example:</source>
          <target state="translated">grepコマンドを実行するとプロセスが作成されます。一旦プロセスが生成されると(壊れていないのに)、0から255の間のコードが返されます。例えば</target>
        </trans-unit>
        <trans-unit id="96e3de3e6bf17276eac99869ea88fc0e71150b83" translate="yes" xml:space="preserve">
          <source>Why does &lt;code&gt;int main(){}&lt;/code&gt; compile?</source>
          <target state="translated">&lt;code&gt;int main(){}&lt;/code&gt; がコンパイルされるのはなぜですか？</target>
        </trans-unit>
        <trans-unit id="51b0c9e4f517672dab551e3f0c8fb3a773467020" translate="yes" xml:space="preserve">
          <source>Why is the type of the &lt;code&gt;main()&lt;/code&gt; function in C and C++ left to the user to define?</source>
          <target state="translated">CおよびC ++の &lt;code&gt;main()&lt;/code&gt; 関数のタイプが、ユーザーが定義する必要があるのはなぜですか？</target>
        </trans-unit>
        <trans-unit id="2a862fb41af52a34873a9b301706a972cab7022b" translate="yes" xml:space="preserve">
          <source>Yet the section for hosted environment program termination then goes on arguing about the case where main does not return int &lt;sup&gt;5&lt;/sup&gt;. Although that section is not normative for how main should be declared, it definitely implies that main might be declared in a completely implementation-defined way even on hosted systems.</source>
          <target state="translated">それでも、ホスト環境プログラムの終了に関するセクションでは、mainがint &lt;sup&gt;5を&lt;/sup&gt;返さない場合について議論を続けています。 このセクションはmainの宣言方法の規範ではありませんが、ホストシステムでもmainが完全に実装定義の方法で宣言される可能性があることを明確に意味します。</target>
        </trans-unit>
        <trans-unit id="922180965ea438bfff3906a2def9f2352b5adb9b" translate="yes" xml:space="preserve">
          <source>You may omit the return statement from &lt;code&gt;main()&lt;/code&gt;. If you do, and &lt;code&gt;main()&lt;/code&gt; finished, there is an implicit &lt;code&gt;return 0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;main()&lt;/code&gt; からreturnステートメントを省略できます。 その場合、 &lt;code&gt;main()&lt;/code&gt; が終了すると、暗黙的 &lt;code&gt;return 0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ab226733ba35ae01df11c0190457de2d507d24e6" translate="yes" xml:space="preserve">
          <source>[...] a return from the initial call to the &lt;code&gt;main&lt;/code&gt; function is equivalent to calling the &lt;code&gt;exit&lt;/code&gt; function with the value returned by the &lt;code&gt;main&lt;/code&gt; function as its argument; reaching the &lt;code&gt;}&lt;/code&gt; that terminates the &lt;code&gt;main&lt;/code&gt; function returns a value of 0.</source>
          <target state="translated">[...] &lt;code&gt;main&lt;/code&gt; 関数への最初の呼び出しからの戻りは、 &lt;code&gt;main&lt;/code&gt; 関数から返された値を引数として使用して &lt;code&gt;exit&lt;/code&gt; 関数を呼び出すことと同じです。 &lt;code&gt;main&lt;/code&gt; 関数を終了する &lt;code&gt;}&lt;/code&gt; に到達すると、値0が返されます。</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="121d20b5045a7b17be1953b2f4b5b7d1193aba4f" translate="yes" xml:space="preserve">
          <source>as the type of main (8.3.5).</source>
          <target state="translated">をメインのタイプとして使用します(8.3.5)。</target>
        </trans-unit>
        <trans-unit id="8b4ea7908f3a8fca63af0e6ad2f61e8268c4885d" translate="yes" xml:space="preserve">
          <source>main is the only function that may portably be declared either with zero or two arguments. (The number of other functions&amp;rsquo; arguments must match exactly between invocation and definition.)
  This special case simply recognizes the widespread practice of leaving off the arguments to main when the program does not access the program argument strings. While many implementations support more than two arguments to main, such practice is neither blessed nor forbidden by the Standard; a program that defines main with three arguments is not strictly conforming (see &amp;sect;J.5.1.).</source>
          <target state="translated">mainは、ゼロまたは2つの引数を使用して移植可能に宣言できる唯一の関数です。 （他の関数の引数の数は、呼び出しと定義の間で正確に一致する必要があります。）この特別なケースは、プログラムがプログラムの引数文字列にアクセスしない場合に、引数をmainに渡さないという広範な慣行を単に認識しています。 多くの実装はmainへの3つ以上の引数をサポートしますが、そのような慣行は規格によって祝福されたり禁止されたりしていません。 mainを3つの引数で定義するプログラムは厳密に準拠していません（&amp;sect;J.5.1を参照）。</target>
        </trans-unit>
        <trans-unit id="622f82e8c075ada716a1cc9582aedc7d512d29d9" translate="yes" xml:space="preserve">
          <source>or equivalent;9) or in some other implementation-defined
  manner.</source>
          <target state="translated">または同等のもの9)またはその他の実装で定義された方法である。</target>
        </trans-unit>
        <trans-unit id="1afe888428199267b8fb21832c373dab7f683445" translate="yes" xml:space="preserve">
          <source>or equivalent;&lt;sup&gt;10)&lt;/sup&gt; or in some other implementation-defined manner.</source>
          <target state="translated">または同等のもの; &lt;sup&gt;10）&lt;/sup&gt;または他の実装定義の方法で。</target>
        </trans-unit>
        <trans-unit id="6270e8159f1807e121f60a87d982221f41402076" translate="yes" xml:space="preserve">
          <source>or with two parameters (referred to here as
  argc and argv, though any names may be used, as they are local to the
  function in which they are declared):</source>
          <target state="translated">または2つのパラメータ(ここではargcとargvと呼ばれていますが、それらが宣言されている関数のローカルなものであるため、どのような名前を使っても構いません)を指定しても構いません。</target>
        </trans-unit>
        <trans-unit id="c5dae6252c11ab5b0df3caf711c397701d6124cd" translate="yes" xml:space="preserve">
          <source>or with two parameters (referred to here as &lt;code&gt;argc&lt;/code&gt; and &lt;code&gt;argv&lt;/code&gt;, though any names may be
  used, as they are local to the function in which they are declared):</source>
          <target state="translated">または2つのパラメーター（ここでは &lt;code&gt;argc&lt;/code&gt; および &lt;code&gt;argv&lt;/code&gt; と呼ばれますが、宣言されている関数に対してローカルであるため、どのような名前でも使用できます）：</target>
        </trans-unit>
        <trans-unit id="f8a458ef7b858ad564adb1ed9a5adbf1c78ddb73" translate="yes" xml:space="preserve">
          <source>or, optionally,</source>
          <target state="translated">または、オプションで</target>
        </trans-unit>
        <trans-unit id="04c6ac4120301d7049af98011b0e572414db64b0" translate="yes" xml:space="preserve">
          <source>which is equivalent to</source>
          <target state="translated">に相当する</target>
        </trans-unit>
        <trans-unit id="e7bb9db27381610dba7df259669ffd179effc729" translate="yes" xml:space="preserve">
          <source>you will get a 0. Why? Because &lt;a href=&quot;http://en.wikipedia.org/wiki/Grep&quot;&gt;grep&lt;/a&gt; found a match and returned an exit code 0, which is the usual value for exiting with a success. Let's check it out again but with something that is not inside our text file and thus no match will be found:</source>
          <target state="translated">あなたは0を取得します。なぜですか？ &lt;a href=&quot;http://en.wikipedia.org/wiki/Grep&quot;&gt;grep&lt;/a&gt;が一致を検出して終了コード0を返したため、成功して終了するための通常の値です。 もう一度確認してみましょう。ただし、テキストファイル内にないため、一致するものが見つかりません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
