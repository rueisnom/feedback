<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/20279484">
    <body>
      <group id="20279484">
        <trans-unit id="6a8bdb6458ccb5bee9b822332a5b4827ca338428" translate="yes" xml:space="preserve">
          <source>1. Use &lt;code&gt;bind()&lt;/code&gt; function</source>
          <target state="translated">1. Use la funci&amp;oacute;n &lt;code&gt;bind()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="17e4c8055d53b1988a8d696bb3defb11a904859e" translate="yes" xml:space="preserve">
          <source>2 Store reference to context/this inside another variable</source>
          <target state="translated">2 Almacenar la referencia al contexto dentro de otra variable</target>
        </trans-unit>
        <trans-unit id="092b15ab8b05a52dd3f21d6ea8b19b812165c04c" translate="yes" xml:space="preserve">
          <source>3 Arrow function</source>
          <target state="translated">3 Funci√≥n de la flecha</target>
        </trans-unit>
        <trans-unit id="b83860e42609c8a7378127f94f739d0cfea363d4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.oxforddictionaries.com/definition/english/context&quot;&gt;&quot;Context&quot;&lt;/a&gt; means the circumstances surrounding something that adds meaning, or some preceding and following information that gives extra meaning. The term &quot;context&quot; is used in ECMAScript to refer to &lt;a href=&quot;http://ecma-international.org/ecma-262/5.1/#sec-10.3&quot;&gt;&lt;em&gt;execution context&lt;/em&gt;&lt;/a&gt;, which is all the parameters, scope and &lt;em&gt;this&lt;/em&gt; within the  scope of some executing code.</source>
          <target state="translated">&lt;a href=&quot;http://www.oxforddictionaries.com/definition/english/context&quot;&gt;&quot;Contexto&quot; se&lt;/a&gt; refiere a las circunstancias que rodean algo que agrega significado, o alguna informaci&amp;oacute;n anterior y siguiente que da un significado adicional. El t&amp;eacute;rmino &quot;contexto&quot; se usa en ECMAScript para referirse al &lt;a href=&quot;http://ecma-international.org/ecma-262/5.1/#sec-10.3&quot;&gt;&lt;em&gt;contexto de ejecuci&amp;oacute;n&lt;/em&gt;&lt;/a&gt; , que es todos los par&amp;aacute;metros, alcance y &lt;em&gt;esto&lt;/em&gt; dentro del alcance de alg&amp;uacute;n c&amp;oacute;digo de ejecuci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="c5df195d0650fc0ca42b314ce0b5ccb5491d11fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sayNameVersion1&lt;/code&gt; and &lt;code&gt;sayNameVersion2&lt;/code&gt; use bind to manipulate &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; of the callback function.</source>
          <target state="translated">&lt;code&gt;sayNameVersion1&lt;/code&gt; y &lt;code&gt;sayNameVersion2&lt;/code&gt; usan bind para manipular &lt;strong&gt; &lt;code&gt;this&lt;/code&gt; &lt;/strong&gt; de la funci&amp;oacute;n de devoluci&amp;oacute;n de llamada.</target>
        </trans-unit>
        <trans-unit id="37b5b9961687599e81572e5c3967bd024409b075" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sayNameVersion3&lt;/code&gt; uses  &lt;strong&gt;&lt;code&gt;call&lt;/code&gt;&lt;/strong&gt; to manipulate the &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; to refer to the person object that we created, instead of the window object.</source>
          <target state="translated">&lt;code&gt;sayNameVersion3&lt;/code&gt; usa &lt;strong&gt; &lt;code&gt;call&lt;/code&gt; &lt;/strong&gt; para manipular &lt;strong&gt; &lt;code&gt;this&lt;/code&gt; &lt;/strong&gt; para referirse al objeto de persona que creamos, en lugar del objeto de ventana.</target>
        </trans-unit>
        <trans-unit id="25633ebfee31e03761dfa090994b8a4d62111b9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sayNameVersion4&lt;/code&gt; uses &lt;strong&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/strong&gt; to manipulate &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; to refer to person object</source>
          <target state="translated">&lt;code&gt;sayNameVersion4&lt;/code&gt; utiliza &lt;strong&gt; &lt;code&gt;apply&lt;/code&gt; &lt;/strong&gt; para manipular &lt;strong&gt; &lt;code&gt;this&lt;/code&gt; &lt;/strong&gt; para referirse al objeto persona</target>
        </trans-unit>
        <trans-unit id="b18e527b1d07b3c750775dd0acd1239988f2f430" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; (aka &quot;the context&quot;) is a special keyword inside each function and its value only depends on &lt;em&gt;how&lt;/em&gt; the function was called, not how/when/where it was defined. It is not affected by lexical scopes like other variables (except for arrow functions, see below). Here are some examples:</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; (tambi&amp;eacute;n conocido como &quot;el contexto&quot;) es una palabra clave especial dentro de cada funci&amp;oacute;n y su valor solo depende de &lt;em&gt;c&amp;oacute;mo&lt;/em&gt; se llam&amp;oacute; a la funci&amp;oacute;n, no c&amp;oacute;mo / cu&amp;aacute;ndo / d&amp;oacute;nde se defini&amp;oacute;. No se ve afectado por &amp;aacute;mbitos l&amp;eacute;xicos como otras variables (a excepci&amp;oacute;n de las funciones de flecha, ver m&amp;aacute;s abajo). Aqu&amp;iacute; hay unos ejemplos:</target>
        </trans-unit>
        <trans-unit id="7ccbb9142cbc877fcba507f098664bac50d55d51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;this&lt;/code&gt; &amp;amp; &lt;code&gt;scope&lt;/code&gt; :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;this&lt;/code&gt; y &lt;code&gt;scope&lt;/code&gt; :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="28d3e08a8329d2bf94877b367b5e9b6728015b6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;As per my view you can implement &quot;this&quot; in three ways&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;(Self/Arrow function/Bind Method)&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Seg&amp;uacute;n mi punto de vista, puede implementar &quot;esto&quot; de tres maneras&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;(Self / Funci&amp;oacute;n de flecha / M&amp;eacute;todo de enlace)&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e5ea14bd8172aaf9a6ba506e6e7ada4b00f6c5bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Different ways to manipulate &lt;code&gt;this&lt;/code&gt; inside callback functions:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Diferentes formas de manipular &lt;code&gt;this&lt;/code&gt; dentro de las funciones de devoluci&amp;oacute;n de llamada:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9807c7820d8498af9fd8b0f569eda762bd110fbb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Google clearly recommends to use lambdas rather than bind or &lt;code&gt;const self = this&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Google recomienda claramente usar lambdas en lugar de bind o &lt;code&gt;const self = this&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c9b836312f9b07af99edfd6d3c86fcf82d71366d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Method1:&lt;/strong&gt; Self - Self is being used to maintain a reference to the original this even as the context is changing. It's a technique often used in event handlers (especially in closures).</source>
          <target state="translated">&lt;strong&gt;M&amp;eacute;todo 1:&lt;/strong&gt; Self - Self se est&amp;aacute; utilizando para mantener una referencia al original, incluso cuando el contexto est&amp;aacute; cambiando. Es una t&amp;eacute;cnica de uso frecuente en los controladores de eventos (especialmente en cierres).</target>
        </trans-unit>
        <trans-unit id="58ee73240b34336c1698b25bbcce84697a17df3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Method2&lt;/strong&gt;: Arrow function - An arrow function expression is a syntactically compact alternative to a regular function expression,</source>
          <target state="translated">&lt;strong&gt;M&amp;eacute;todo 2&lt;/strong&gt; : Funci&amp;oacute;n de flecha: una expresi&amp;oacute;n de funci&amp;oacute;n de flecha es una alternativa sint&amp;aacute;cticamente compacta a una expresi&amp;oacute;n de funci&amp;oacute;n regular,</target>
        </trans-unit>
        <trans-unit id="83807288d0c69591208b62be684605dc13b0d1ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Method3&lt;/strong&gt;:Bind- The bind() method creates a new function that,</source>
          <target state="translated">&lt;strong&gt;M&amp;eacute;todo 3&lt;/strong&gt; : &lt;strong&gt;Bind&lt;/strong&gt; : el m&amp;eacute;todo bind () crea una nueva funci&amp;oacute;n que,</target>
        </trans-unit>
        <trans-unit id="fbff03a5b9cb0d04b7b2cf5d21c576fe76193276" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When binding context for jQuery, use &lt;a href=&quot;http://api.jquery.com/jQuery.proxy/&quot;&gt;&lt;code&gt;jQuery.proxy&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[docs]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; instead. The reason to do this is so that you don't need to store the reference to the function when unbinding an event callback. jQuery handles that internally.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Al vincular el contexto para jQuery, use &lt;a href=&quot;http://api.jquery.com/jQuery.proxy/&quot;&gt; &lt;code&gt;jQuery.proxy&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[docs] en su&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; lugar. La raz&amp;oacute;n para hacerlo es para que no necesite almacenar la referencia a la funci&amp;oacute;n al desvincular una devoluci&amp;oacute;n de llamada de evento. jQuery maneja eso internamente.</target>
        </trans-unit>
        <trans-unit id="7cddf8e8a39596a43c3943dc0b2a259074ff6e5b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Whether or not you can pass a value for &lt;code&gt;this&lt;/code&gt; is usually mentioned in the documentation of that function/method. For example, &lt;a href=&quot;http://api.jquery.com/jQuery.ajax/&quot;&gt;jQuery's &lt;code&gt;$.ajax&lt;/code&gt; method &lt;em&gt;&lt;sup&gt;[docs]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; describes an option called &lt;code&gt;context&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Si puede o no pasar un valor para &lt;code&gt;this&lt;/code&gt; generalmente se menciona en la documentaci&amp;oacute;n de esa funci&amp;oacute;n / m&amp;eacute;todo. Por ejemplo, &lt;a href=&quot;http://api.jquery.com/jQuery.ajax/&quot;&gt;el m&amp;eacute;todo &lt;code&gt;$.ajax&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[docs] de&lt;/sup&gt;&lt;/em&gt; jQuery&lt;/a&gt; describe una opci&amp;oacute;n llamada &lt;code&gt;context&lt;/code&gt; o :</target>
        </trans-unit>
        <trans-unit id="207736ea8962167a3fa8bad382e8a76878d9f7be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reference:&lt;/strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Reference:&lt;/strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="75fdbb27ede9220d3d16fc78ac8586f0b59a2045" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reference&lt;/strong&gt; : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Referencia&lt;/strong&gt; : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fc72ecd613eabb84943e85b3ada223948245ddd3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reference&lt;/strong&gt;: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Referencia&lt;/strong&gt; : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ad22017702d23a420c03692bfa75469cbd587279" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The solution&lt;/strong&gt; is the same as mentioned above: If available, use &lt;code&gt;.bind&lt;/code&gt; to explicitly bind &lt;code&gt;this&lt;/code&gt; to a specific value</source>
          <target state="translated">&lt;strong&gt;La soluci&amp;oacute;n&lt;/strong&gt; es la misma que se mencion&amp;oacute; anteriormente: si est&amp;aacute; disponible, use &lt;code&gt;.bind&lt;/code&gt; para vincular expl&amp;iacute;citamente &lt;code&gt;this&lt;/code&gt; a un valor espec&amp;iacute;fico</target>
        </trans-unit>
        <trans-unit id="cf2a3ebd0bb3eb43331c09c74be73028c7ea8561" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You Should know about &quot;this&quot; Keyword.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Debe saber sobre &quot;esta&quot; palabra clave.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="33851166d311aa4e76eff3f3efc9621355eca157" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;apply :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;aplicar :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="77695723b8f02b1b09ad8e9f4c42690237d82c6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bind :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;enlace:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e912e07305889ea58d8fde64c857c9a3fff38f53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;call :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;llamada :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="29532e96f632af398dba50619e57e074313b2fdd" translate="yes" xml:space="preserve">
          <source>A function's this keyword behaves a little differently in JavaScript compared to other languages.</source>
          <target state="translated">Una funci√≥n es que esta palabra clave se comporta un poco diferente en JavaScript en comparaci√≥n con otros idiomas.</target>
        </trans-unit>
        <trans-unit id="912cdfca5e5ce094d53ff3186f01991ddc662fc7" translate="yes" xml:space="preserve">
          <source>Alter code/function design/architecture - for this you should have command over  &lt;a href=&quot;https://addyosmani.com/resources/essentialjsdesignpatterns/book/&quot;&gt;design patterns&lt;/a&gt; in javascript.</source>
          <target state="translated">Alterar el c&amp;oacute;digo / dise&amp;ntilde;o de la funci&amp;oacute;n / arquitectura: para esto debe tener el comando sobre &lt;a href=&quot;https://addyosmani.com/resources/essentialjsdesignpatterns/book/&quot;&gt;los patrones de dise&amp;ntilde;o&lt;/a&gt; en JavaScript</target>
        </trans-unit>
        <trans-unit id="52caaec3fba5f872647197877f4e4dd86e6a438a" translate="yes" xml:space="preserve">
          <source>An execution context provides the surrounding information that adds meaning to code that is being executed. It includes much more information than just the &lt;a href=&quot;http://ecma-international.org/ecma-262/5.1/#sec-11.1.1&quot;&gt;&lt;em&gt;thisBinding&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">Un contexto de ejecuci&amp;oacute;n proporciona la informaci&amp;oacute;n circundante que agrega significado al c&amp;oacute;digo que se est&amp;aacute; ejecutando. Incluye mucha m&amp;aacute;s informaci&amp;oacute;n que solo &lt;a href=&quot;http://ecma-international.org/ecma-262/5.1/#sec-11.1.1&quot;&gt;&lt;em&gt;thisBinding&lt;/em&gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="44d98e8b0d43f360e36798f40afed6e98237427a" translate="yes" xml:space="preserve">
          <source>Another approach, which is &lt;strong&gt;the standard way since DOM2&lt;/strong&gt; to bind &lt;code&gt;this&lt;/code&gt; within the event listener, that &lt;strong&gt;let you always remove the listener&lt;/strong&gt; (among other benefits), is the &lt;code&gt;handleEvent(evt)&lt;/code&gt;method from the &lt;code&gt;EventListener&lt;/code&gt; interface:</source>
          <target state="translated">Otro enfoque, que es &lt;strong&gt;la forma est&amp;aacute;ndar desde DOM2&lt;/strong&gt; para vincular &lt;code&gt;this&lt;/code&gt; dentro del detector de eventos, que le &lt;strong&gt;permite eliminar siempre el detector&lt;/strong&gt; (entre otros beneficios), es el &lt;code&gt;handleEvent(evt)&lt;/code&gt; de la interfaz &lt;code&gt;EventListener&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c7c7a67c1c463a52b508675c2a4fbcd7bd499c42" translate="yes" xml:space="preserve">
          <source>Another common manifestation of this problem is when an object method is used as callback/event handler. Functions are first-class citizens in JavaScript and the term &quot;method&quot; is just a colloquial term for a function that is a value of an object property. But that function doesn't have a specific link to its &quot;containing&quot; object.</source>
          <target state="translated">Otra manifestaci√≥n com√∫n de este problema es cuando se utiliza un m√©todo de objeto como manejador de eventos de retrollamada.Las funciones son ciudadanos de primera clase en JavaScript y el t√©rmino &quot;m√©todo&quot; es s√≥lo un t√©rmino coloquial para una funci√≥n que es un valor de una propiedad del objeto.Pero esa funci√≥n no tiene un v√≠nculo espec√≠fico con su objeto &quot;contenedor&quot;.</target>
        </trans-unit>
        <trans-unit id="e5ca476aa209b8908ea0f9b7b407ec4efd27c9d0" translate="yes" xml:space="preserve">
          <source>Arrow Functions don&amp;rsquo;t bind &lt;code&gt;this&lt;/code&gt;‚Ää&amp;mdash;‚Ääinstead, &lt;code&gt;this&lt;/code&gt; is bound lexically (i.e. based on the original context)</source>
          <target state="translated">Las funciones de flecha no vinculan &lt;code&gt;this&lt;/code&gt; ; en cambio, &lt;code&gt;this&lt;/code&gt; se vincula l&amp;eacute;xicamente (es decir, seg&amp;uacute;n el contexto original)</target>
        </trans-unit>
        <trans-unit id="ab65dda1433ac3a4a44f2e5a043e4ea34a973af0" translate="yes" xml:space="preserve">
          <source>Arrow function expressions are ill suited as methods, and they cannot be used as constructors.</source>
          <target state="translated">Las expresiones de la funci√≥n de las flechas no son adecuadas como m√©todos,y no pueden utilizarse como constructores.</target>
        </trans-unit>
        <trans-unit id="68bb09850cf0694061b593eb35c2d88f9e91ba2c" translate="yes" xml:space="preserve">
          <source>As already mentioned at the beginning, what &lt;code&gt;this&lt;/code&gt; refers to depends on how the function is &lt;strong&gt;called&lt;/strong&gt;, not how it is &lt;strong&gt;defined&lt;/strong&gt;.</source>
          <target state="translated">Como ya se mencion&amp;oacute; al principio, a qu&amp;eacute; se refiere &lt;code&gt;this&lt;/code&gt; depende de c&amp;oacute;mo se &lt;strong&gt;llama&lt;/strong&gt; la funci&amp;oacute;n, no de c&amp;oacute;mo se &lt;strong&gt;define&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="8d2777b1eb41d0d72d449a11bc7ca8e6e5012319" translate="yes" xml:space="preserve">
          <source>As most of the answers suggest, we can use &lt;strong&gt;Arrow function or &lt;code&gt;bind()&lt;/code&gt; Method or Self&lt;/strong&gt; var. I would quote a point about lambdas (Arrow function) from &lt;a href=&quot;https://google.github.io/styleguide/jsguide.html#features-functions-arrow-functions&quot;&gt;Google JavaScript Style Guide&lt;/a&gt;</source>
          <target state="translated">Como la mayor&amp;iacute;a de las respuestas sugieren, podemos usar la &lt;strong&gt;funci&amp;oacute;n de flecha o el m&amp;eacute;todo &lt;code&gt;bind()&lt;/code&gt; o Self&lt;/strong&gt; var. Citar&amp;iacute;a un punto sobre lambdas (funci&amp;oacute;n de flecha) de la &lt;a href=&quot;https://google.github.io/styleguide/jsguide.html#features-functions-arrow-functions&quot;&gt;Gu&amp;iacute;a de estilo de JavaScript de Google&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e4a87be3685258b72d713f79d1bfa977f3e36674" translate="yes" xml:space="preserve">
          <source>Common problem: Using object methods as callbacks/event handlers</source>
          <target state="translated">Problema com√∫n:Usar m√©todos de objetos como manejadores de eventos de llamada de retorno</target>
        </trans-unit>
        <trans-unit id="d7f69e049d11cfea430a186ac01ffac1bca0cfc8" translate="yes" xml:space="preserve">
          <source>Consider the following example:</source>
          <target state="translated">Considere el siguiente ejemplo:</target>
        </trans-unit>
        <trans-unit id="19baede9f95837656d71c40468e696396b8ec0b8" translate="yes" xml:space="preserve">
          <source>Currently there is another approach possible if classes are used in code.</source>
          <target state="translated">Actualmente hay otro enfoque posible si las clases se usan en c√≥digo.</target>
        </trans-unit>
        <trans-unit id="cbefe4b8aa228c45cb38892ce584258768af1d79" translate="yes" xml:space="preserve">
          <source>Detailed information about using &lt;code&gt;handleEvent&lt;/code&gt; can be found here: &lt;a href=&quot;https://medium.com/@WebReflection/dom-handleevent-a-cross-platform-standard-since-year-2000-5bf17287fd38&quot;&gt;https://medium.com/@WebReflection/dom-handleevent-a-cross-platform-standard-since-year-2000-5bf17287fd38&lt;/a&gt;</source>
          <target state="translated">Puede encontrar informaci&amp;oacute;n detallada sobre el uso de &lt;code&gt;handleEvent&lt;/code&gt; aqu&amp;iacute;: &lt;a href=&quot;https://medium.com/@WebReflection/dom-handleevent-a-cross-platform-standard-since-year-2000-5bf17287fd38&quot;&gt;https://medium.com/@WebReflection/dom-handleevent-a-cross-platform-standard-since-year-2000-5bf17287fd38&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8141d62fd2995e418997f9206b5101ba5385986d" translate="yes" xml:space="preserve">
          <source>Don't use &lt;code&gt;this&lt;/code&gt;</source>
          <target state="translated">No uses &lt;code&gt;this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4a2aba802819fc19a867deee3901f548f1feb051" translate="yes" xml:space="preserve">
          <source>ECMAScript 6 introduces &lt;em&gt;arrow functions&lt;/em&gt;, which can be thought of as lambda functions. They don't have their own &lt;code&gt;this&lt;/code&gt; binding. Instead, &lt;code&gt;this&lt;/code&gt; is looked up in scope just like a normal variable. That means you don't have to call &lt;code&gt;.bind&lt;/code&gt;. That's not the only special behaviour they have, please refer to the MDN documentation for more information.</source>
          <target state="translated">ECMAScript 6 introduce &lt;em&gt;funciones de flecha&lt;/em&gt; , que pueden considerarse funciones lambda. No tienen su propio enlace. En cambio, &lt;code&gt;this&lt;/code&gt; se busca en el alcance al igual que una variable normal. Eso significa que no tienes que llamar a &lt;code&gt;.bind&lt;/code&gt; . Ese no es el &amp;uacute;nico comportamiento especial que tienen, consulte la documentaci&amp;oacute;n de MDN para obtener m&amp;aacute;s informaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="6dbdc8171942a3d0dbd97de271857afd19174994" translate="yes" xml:space="preserve">
          <source>ECMAScript 6: Use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow functions&lt;/a&gt;</source>
          <target state="translated">ECMAScript 6: Usar &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;funciones de flecha&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3ce4cc15e461303a1b469af49c17a030b2eaa449" translate="yes" xml:space="preserve">
          <source>ES5 introduced the bind() method to set the value of a function's this regardless of how it's called,</source>
          <target state="translated">ES5 introdujo el m√©todo bind()para establecer el valor de una funci√≥n,independientemente de c√≥mo se llame,</target>
        </trans-unit>
        <trans-unit id="3d92706e10419b5bc1277c566852681d2d948da0" translate="yes" xml:space="preserve">
          <source>Every function has the method &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;&lt;code&gt;.bind&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[docs]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt;, which returns a new function with &lt;code&gt;this&lt;/code&gt; bound to a value. The function has exactly the same behaviour as the one you called &lt;code&gt;.bind&lt;/code&gt; on, only that &lt;code&gt;this&lt;/code&gt; was set by you. No matter how or when that function is called, &lt;code&gt;this&lt;/code&gt; will always refer to the passed value.</source>
          <target state="translated">Cada funci&amp;oacute;n tiene el m&amp;eacute;todo &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt; &lt;code&gt;.bind&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[docs]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; , que devuelve una nueva funci&amp;oacute;n con &lt;code&gt;this&lt;/code&gt; vinculada a un valor. La funci&amp;oacute;n tiene exactamente el mismo comportamiento que el que llam&amp;oacute; &lt;code&gt;.bind&lt;/code&gt; , solo que &lt;code&gt;this&lt;/code&gt; fue establecido por usted. No importa c&amp;oacute;mo o cu&amp;aacute;ndo se llame a esa funci&amp;oacute;n, &lt;code&gt;this&lt;/code&gt; siempre se referir&amp;aacute; al valor pasado.</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Ampliar fragmento</target>
        </trans-unit>
        <trans-unit id="e9d6a485740427854045937df49a40853c402a69" translate="yes" xml:space="preserve">
          <source>Explicitly set &lt;code&gt;this&lt;/code&gt; of the callback - part 1</source>
          <target state="translated">Establezca expl&amp;iacute;citamente &lt;code&gt;this&lt;/code&gt; de la devoluci&amp;oacute;n de llamada - parte 1</target>
        </trans-unit>
        <trans-unit id="1126dd24f176d2a0b58861d9f7a6fa519f9c04cf" translate="yes" xml:space="preserve">
          <source>First, you need to have a clear understanding of &lt;strong&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/strong&gt; and behaviour of &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; keyword in the context of &lt;strong&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">Primero, debe tener una comprensi&amp;oacute;n clara del &lt;strong&gt; &lt;code&gt;scope&lt;/code&gt; &lt;/strong&gt; y el comportamiento de &lt;strong&gt; &lt;code&gt;this&lt;/code&gt; &lt;/strong&gt; palabra clave en el contexto del &lt;strong&gt; &lt;code&gt;scope&lt;/code&gt; &lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="b98161925d8109b3e8a4d33cba64ddeafed7b359" translate="yes" xml:space="preserve">
          <source>For sure under the hood it's all old good arrow function that bind context but in this form it looks much more clear that explicit binding.</source>
          <target state="translated">Seguro que bajo el cap√≥ es toda la vieja funci√≥n de la flecha buena la que vincula el contexto,pero en esta forma parece mucho m√°s claro que la vinculaci√≥n expl√≠cita.</target>
        </trans-unit>
        <trans-unit id="e61e7a281fa5c383fee31613c5a0509a8533e6d5" translate="yes" xml:space="preserve">
          <source>Here I have a constructor function called Person. It has a property called &lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt; and four method called &lt;strong&gt;&lt;code&gt;sayNameVersion1&lt;/code&gt;&lt;/strong&gt;,&lt;strong&gt;&lt;code&gt;sayNameVersion2&lt;/code&gt;&lt;/strong&gt;,&lt;strong&gt;&lt;code&gt;sayNameVersion3&lt;/code&gt;&lt;/strong&gt;,&lt;strong&gt;&lt;code&gt;sayNameVersion4&lt;/code&gt;&lt;/strong&gt;. All four of them has one specific task.Accept a callback and invoke it.The callback has a specific task which is to log the name property of an instance of Person constructor function.</source>
          <target state="translated">Aqu&amp;iacute; tengo una funci&amp;oacute;n constructora llamada Persona. Tiene una propiedad llamada &lt;strong&gt; &lt;code&gt;name&lt;/code&gt; &lt;/strong&gt; y cuatro m&amp;eacute;todos llamados &lt;strong&gt; &lt;code&gt;sayNameVersion1&lt;/code&gt; &lt;/strong&gt; , &lt;strong&gt; &lt;code&gt;sayNameVersion2&lt;/code&gt; &lt;/strong&gt; , &lt;strong&gt; &lt;code&gt;sayNameVersion3&lt;/code&gt; &lt;/strong&gt; , &lt;strong&gt; &lt;code&gt;sayNameVersion4&lt;/code&gt; &lt;/strong&gt; . Los cuatro tienen una tarea espec&amp;iacute;fica. Aceptar una devoluci&amp;oacute;n de llamada e invocarla. La devoluci&amp;oacute;n de llamada tiene una tarea espec&amp;iacute;fica que es registrar la propiedad de nombre de una instancia de la funci&amp;oacute;n de constructor de Persona.</target>
        </trans-unit>
        <trans-unit id="4acb81ac127a3601d53820d4d0f45171677e988c" translate="yes" xml:space="preserve">
          <source>Here are several ways to access parent context inside child context -</source>
          <target state="translated">Aqu√≠ hay varias maneras de acceder al contexto de los padres dentro del contexto del ni√±o -</target>
        </trans-unit>
        <trans-unit id="85e2143fbc09476ddf872285e4ee8305918dc1ef" translate="yes" xml:space="preserve">
          <source>How can I access the correct object?</source>
          <target state="translated">¬øC√≥mo puedo acceder al objeto correcto?</target>
        </trans-unit>
        <trans-unit id="ae2ce4ed9d749ac553a5952af8ed485252570f3f" translate="yes" xml:space="preserve">
          <source>How to access the correct `this` inside a callback</source>
          <target state="translated">C√≥mo acceder al &quot;esto&quot; correcto dentro de una devoluci√≥n de llamada</target>
        </trans-unit>
        <trans-unit id="6f908c89120425f927f214344354c0aca40f8b35" translate="yes" xml:space="preserve">
          <source>How to refer to the correct &lt;code&gt;this&lt;/code&gt;</source>
          <target state="translated">C&amp;oacute;mo referirse al correcto &lt;code&gt;this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5ed5328abf66e902733b964229b89a9e88ccb98f" translate="yes" xml:space="preserve">
          <source>However, I'm not able to access the &lt;code&gt;data&lt;/code&gt; property of the created object inside the callback. It looks like &lt;code&gt;this&lt;/code&gt; does not refer to the object that was created but to an other one.</source>
          <target state="translated">Sin embargo, no puedo acceder a la propiedad de &lt;code&gt;data&lt;/code&gt; del objeto creado dentro de la devoluci&amp;oacute;n de llamada. Parece que &lt;code&gt;this&lt;/code&gt; no se refiere al objeto que se cre&amp;oacute;, sino a otro.</target>
        </trans-unit>
        <trans-unit id="323833fe30e701dd0afbe644972c8297131ffd00" translate="yes" xml:space="preserve">
          <source>I also tried to use an object method instead of an anonymous function:</source>
          <target state="translated">Tambi√©n intent√© usar un m√©todo de objetos en lugar de una funci√≥n an√≥nima:</target>
        </trans-unit>
        <trans-unit id="eaec236d744509e537cc8f03f2dea9ad53761954" translate="yes" xml:space="preserve">
          <source>I have a constructor function which registers an event handler:</source>
          <target state="translated">Tengo una funci√≥n de constructor que registra un manejador de eventos:</target>
        </trans-unit>
        <trans-unit id="5b371a6ae052214f7818ec3deaed3e9b738646dd" translate="yes" xml:space="preserve">
          <source>If strict mode is enabled for any function then the value of &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt; as in strict mode, global object refers to &lt;code&gt;undefined&lt;/code&gt; in place of the &lt;code&gt;window&lt;/code&gt; object.</source>
          <target state="translated">Si el modo estricto est&amp;aacute; habilitado para cualquier funci&amp;oacute;n, el valor de &lt;code&gt;this&lt;/code&gt; ser&amp;aacute; &lt;code&gt;undefined&lt;/code&gt; como en el modo estricto, el objeto global se refiere a &lt;code&gt;undefined&lt;/code&gt; en lugar del objeto de &lt;code&gt;window&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="97f3987d7dc7237e2cfee6a8dbacca0a0a502d88" translate="yes" xml:space="preserve">
          <source>If the code was like the following, it might be more obvious that the function doesn't have an implicit reference to the object:</source>
          <target state="translated">Si el c√≥digo fuera como el siguiente,podr√≠a ser m√°s obvio que la funci√≥n no tiene una referencia impl√≠cita al objeto:</target>
        </trans-unit>
        <trans-unit id="44286d5d725e24975302df95630b6a88edcc2bf7" translate="yes" xml:space="preserve">
          <source>If you are using &lt;code&gt;underscore.js&lt;/code&gt; - &lt;a href=&quot;http://underscorejs.org/#bind&quot;&gt;http://underscorejs.org/#bind&lt;/a&gt;</source>
          <target state="translated">Si est&amp;aacute; utilizando &lt;code&gt;underscore.js&lt;/code&gt; - &lt;a href=&quot;http://underscorejs.org/#bind&quot;&gt;http://underscorejs.org/#bind&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fde7334616f0dd164f29fddbf11acc809feee752" translate="yes" xml:space="preserve">
          <source>If you are using jQuery you should use the &lt;code&gt;$.proxy&lt;/code&gt; method instead, as &lt;code&gt;bind&lt;/code&gt; is not supported in all browsers:</source>
          <target state="translated">Si est&amp;aacute; utilizando jQuery, debe utilizar el m&amp;eacute;todo &lt;code&gt;$.proxy&lt;/code&gt; , ya que &lt;code&gt;bind&lt;/code&gt; no es compatible con todos los navegadores:</target>
        </trans-unit>
        <trans-unit id="13d3e294e950b7f4ab84cf9acca0ccd56c984cff" translate="yes" xml:space="preserve">
          <source>In most cases, the value of this is determined by how a function is called.</source>
          <target state="translated">En la mayor√≠a de los casos,el valor de esto est√° determinado por la forma en que se llama una funci√≥n.</target>
        </trans-unit>
        <trans-unit id="fa250ce283226ff53d868b2d334cd5e88dff4429" translate="yes" xml:space="preserve">
          <source>In the global scope, &lt;code&gt;this&lt;/code&gt; refers to the global object (the &lt;code&gt;window&lt;/code&gt; object).</source>
          <target state="translated">En el &amp;aacute;mbito global, &lt;code&gt;this&lt;/code&gt; refiere al objeto global (el objeto de &lt;code&gt;window&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="84cfc4df2cedf0a396870ba012ed9bfc0f2b3c6c" translate="yes" xml:space="preserve">
          <source>In this case, we are binding the callback's &lt;code&gt;this&lt;/code&gt; to the value of &lt;code&gt;MyConstructor&lt;/code&gt;'s &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">En este caso, estamos vinculando la devoluci&amp;oacute;n de llamada &lt;code&gt;this&lt;/code&gt; al valor de &lt;code&gt;MyConstructor&lt;/code&gt; 's &lt;code&gt;this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="30b4b861a818b8aa39958b98513130afef359643" translate="yes" xml:space="preserve">
          <source>It also has some differences between strict mode and non-strict mode.</source>
          <target state="translated">Tambi√©n tiene algunas diferencias entre el modo estricto y el no estricto.</target>
        </trans-unit>
        <trans-unit id="b5a4468c39b48f1e066f8525bae2767e24645b5a" translate="yes" xml:space="preserve">
          <source>It can't be set by assignment during execution, and it may be different each time the function is called.</source>
          <target state="translated">No se puede establecer por asignaci√≥n durante la ejecuci√≥n,y puede ser diferente cada vez que se llama a la funci√≥n.</target>
        </trans-unit>
        <trans-unit id="c856cf98c012850bf9e871b799e02d2f89139d0f" translate="yes" xml:space="preserve">
          <source>It might look like you have no control over the value of &lt;code&gt;this&lt;/code&gt; because its value is set automatically, but that is actually not the case.</source>
          <target state="translated">Puede parecer que no tiene control sobre el valor de &lt;code&gt;this&lt;/code&gt; porque su valor se establece autom&amp;aacute;ticamente, pero ese no es el caso.</target>
        </trans-unit>
        <trans-unit id="3a5c614e4a858c76be5f61117786c7f01782da3a" translate="yes" xml:space="preserve">
          <source>It's all in the &quot;magic&quot; syntax of calling a method:</source>
          <target state="translated">Todo est√° en la sintaxis &quot;m√°gica&quot; de llamar a un m√©todo:</target>
        </trans-unit>
        <trans-unit id="d212c8aab88e3b2c631bdfa314a2c158284a9689" translate="yes" xml:space="preserve">
          <source>Now let's create an instance from person constructor and invoke different versions of &lt;strong&gt;&lt;code&gt;sayNameVersionX&lt;/code&gt;&lt;/strong&gt; ( X refers to 1,2,3,4 ) method with &lt;strong&gt;&lt;code&gt;niceCallback&lt;/code&gt;&lt;/strong&gt; to see how many ways we can manipulate the &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; inside callback to refer to the &lt;strong&gt;&lt;code&gt;person&lt;/code&gt;&lt;/strong&gt; instance.</source>
          <target state="translated">Ahora &lt;strong&gt; &lt;code&gt;sayNameVersionX&lt;/code&gt; &lt;/strong&gt; una instancia desde el constructor de personas e &lt;strong&gt;invoquemos&lt;/strong&gt; diferentes versiones del &lt;strong&gt;m&amp;eacute;todo sayNameVersionX&lt;/strong&gt; (X se refiere a 1,2,3,4) con &lt;strong&gt; &lt;code&gt;niceCallback&lt;/code&gt; &lt;/strong&gt; para ver cu&amp;aacute;ntas formas podemos manipular la devoluci&amp;oacute;n de llamada dentro de &lt;strong&gt; &lt;code&gt;this&lt;/code&gt; &lt;/strong&gt; para referirse a la instancia de &lt;strong&gt; &lt;code&gt;person&lt;/code&gt; a&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="bd382a556e0627a895f9d61c9e039efe9520f3a7" translate="yes" xml:space="preserve">
          <source>Prefer using arrow functions over f.bind(this), and especially over
  goog.bind(f, this). Avoid writing const self = this. Arrow functions
  are particularly useful for callbacks, which sometimes pass unexpected
  additional arguments.</source>
          <target state="translated">Prefiero usar las funciones de flecha sobre f.bind(esto),y especialmente sobre goog.bind(f,esto).Evita escribir const self=this.Las funciones de flecha son particularmente √∫tiles para las llamadas de retorno,que a veces pasan argumentos adicionales inesperados.</target>
        </trans-unit>
        <trans-unit id="9d1e4e7d27b519b1da3d7266c9c87d7861741080" translate="yes" xml:space="preserve">
          <source>References:</source>
          <target state="translated">References:</target>
        </trans-unit>
        <trans-unit id="0659a76d505497879be6cfbe39c059f2d61df867" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;this&lt;/code&gt; of the callback - part 2</source>
          <target state="translated">Establezca &lt;code&gt;this&lt;/code&gt; de la devoluci&amp;oacute;n de llamada - parte 2</target>
        </trans-unit>
        <trans-unit id="56be075e48deed785dc54c97a107dbdfab73da93" translate="yes" xml:space="preserve">
          <source>Set the ThisBinding to the same value as the ThisBinding of the
  calling execution context</source>
          <target state="translated">Ponga el ThisBinding al mismo valor que el ThisBinding del contexto de ejecuci√≥n de la llamada</target>
        </trans-unit>
        <trans-unit id="1e9e29d4637f7cebd0369d655eda5c71d09b9233" translate="yes" xml:space="preserve">
          <source>Similar to &lt;strong&gt;&lt;code&gt;call&lt;/code&gt;&lt;/strong&gt;, first argument of &lt;strong&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/strong&gt; refers to the object that will be indicated by &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; keyword.</source>
          <target state="translated">Similar a &lt;strong&gt; &lt;code&gt;call&lt;/code&gt; &lt;/strong&gt; , el primer argumento de &lt;strong&gt; &lt;code&gt;apply&lt;/code&gt; se&lt;/strong&gt; refiere al objeto que se indicar&amp;aacute; con &lt;strong&gt; &lt;code&gt;this&lt;/code&gt; &lt;/strong&gt; palabra clave.</target>
        </trans-unit>
        <trans-unit id="15dc5824306174e1163181b6492db3027e7184ba" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;self&lt;/code&gt; is a normal variable, it obeys lexical scope rules and is accessible inside the callback. This also has the advantage that you can access the &lt;code&gt;this&lt;/code&gt; value of the callback itself.</source>
          <target state="translated">Como &lt;code&gt;self&lt;/code&gt; es una variable normal, obedece las reglas de alcance l&amp;eacute;xico y es accesible dentro de la devoluci&amp;oacute;n de llamada. Esto tambi&amp;eacute;n tiene la ventaja de que puede acceder al valor de &lt;code&gt;this&lt;/code&gt; de la devoluci&amp;oacute;n de llamada en s&amp;iacute;.</target>
        </trans-unit>
        <trans-unit id="841ea9b7a24ab9b0a4a11eb3d639efba860efaaa" translate="yes" xml:space="preserve">
          <source>Since it's Stage 3 Proposal you will need babel and appropriate &lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-proposal-class-properties&quot;&gt;babel plugin&lt;/a&gt; to process it as for now(08/2018).</source>
          <target state="translated">Dado que es la Propuesta de la Etapa 3, necesitar&amp;aacute; babel y el &lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-proposal-class-properties&quot;&gt;complemento de babel&lt;/a&gt; apropiado para procesarlo por ahora (08/2018).</target>
        </trans-unit>
        <trans-unit id="cdbe775fb45eb5ef2d2e6ce73eeeb4fd35368bf8" translate="yes" xml:space="preserve">
          <source>So the best solution would be to use lambdas as below,</source>
          <target state="translated">Por lo tanto,la mejor soluci√≥n ser√≠a utilizar las lambdas como se indica a continuaci√≥n,</target>
        </trans-unit>
        <trans-unit id="744d624b35c5c9839f7ef2f10dd23136a872cd13" translate="yes" xml:space="preserve">
          <source>So the value of &lt;em&gt;this&lt;/em&gt; isn't &quot;context&quot;, it's just one part of an execution context. It's essentially a local variable that can be set by the call to any object and in strict mode, to any value at all.</source>
          <target state="translated">Entonces el valor de &lt;em&gt;esto&lt;/em&gt; no es &quot;contexto&quot;, es solo una parte de un contexto de ejecuci&amp;oacute;n. Es esencialmente una variable local que puede establecerse mediante la llamada a cualquier objeto y, en modo estricto, a cualquier valor.</target>
        </trans-unit>
        <trans-unit id="08e7c0641502b25341ef35ff01a6e8bc40419c8b" translate="yes" xml:space="preserve">
          <source>Some functions/methods which accept callbacks also accept a value to which the callback's &lt;code&gt;this&lt;/code&gt; should refer to. This is basically the same as binding it yourself, but the function/method does it for you. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&quot;&gt;&lt;code&gt;Array#map&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[docs]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; is such a method. Its signature is:</source>
          <target state="translated">Algunas funciones / m&amp;eacute;todos que aceptan devoluciones de llamada tambi&amp;eacute;n aceptan un valor al que debe referirse la devoluci&amp;oacute;n de llamada. Esto es b&amp;aacute;sicamente lo mismo que vincularlo usted mismo, pero la funci&amp;oacute;n / m&amp;eacute;todo lo hace por usted. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&quot;&gt; &lt;code&gt;Array#map&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[docs]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; es un m&amp;eacute;todo de este tipo. Su firma es:</target>
        </trans-unit>
        <trans-unit id="d98f29032871395567d10fa9475d0524189b4f4b" translate="yes" xml:space="preserve">
          <source>Store reference to context/this inside another variable(see below example).</source>
          <target state="translated">Guarda la referencia al contexto dentro de otra variable (v√©ase el ejemplo a continuaci√≥n).</target>
        </trans-unit>
        <trans-unit id="46ccc3ce57128d895c43982bc51d536f065ddef4" translate="yes" xml:space="preserve">
          <source>That's where you would bind the context to the function:</source>
          <target state="translated">Ah√≠ es donde se vincular√≠a el contexto a la funci√≥n:</target>
        </trans-unit>
        <trans-unit id="8ea6ca42490b74de48fe8ae9a2bd9ccd3e0033f6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;&lt;code&gt;first argument&lt;/code&gt;&lt;/strong&gt; of the &lt;strong&gt;&lt;code&gt;call&lt;/code&gt;&lt;/strong&gt; method is used as &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; inside the function that is invoked with &lt;strong&gt;&lt;code&gt;call&lt;/code&gt;&lt;/strong&gt; attached to it.</source>
          <target state="translated">El &lt;strong&gt; &lt;code&gt;first argument&lt;/code&gt; &lt;/strong&gt; del m&amp;eacute;todo de &lt;strong&gt; &lt;code&gt;call&lt;/code&gt; &lt;/strong&gt; se usa como &lt;strong&gt; &lt;code&gt;this&lt;/code&gt; &lt;/strong&gt; dentro de la funci&amp;oacute;n que se invoca con la &lt;strong&gt; &lt;code&gt;call&lt;/code&gt; &lt;/strong&gt; adjunta.</target>
        </trans-unit>
        <trans-unit id="55ff58898b5dfe7076511fbcd2d228ee39265388" translate="yes" xml:space="preserve">
          <source>The first argument is the callback and the second argument is the value &lt;code&gt;this&lt;/code&gt; should refer to. Here is a contrived example:</source>
          <target state="translated">El primer argumento es la devoluci&amp;oacute;n de llamada y el segundo argumento es el valor al que deber&amp;iacute;a referirse. Aqu&amp;iacute; hay un ejemplo artificial:</target>
        </trans-unit>
        <trans-unit id="67a37244ad69c52151f22e62ecb8e655636407eb" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;this.method&lt;/code&gt; is assigned as click event handler, but if the &lt;code&gt;document.body&lt;/code&gt; is clicked, the value logged will be &lt;code&gt;undefined&lt;/code&gt;, because inside the event handler, &lt;code&gt;this&lt;/code&gt; refers to the &lt;code&gt;document.body&lt;/code&gt;, not the instance of &lt;code&gt;Foo&lt;/code&gt;.</source>
          <target state="translated">La funci&amp;oacute;n &lt;code&gt;this.method&lt;/code&gt; se asigna como controlador de eventos click, pero si se hace clic en &lt;code&gt;document.body&lt;/code&gt; , el valor registrado ser&amp;aacute; &lt;code&gt;undefined&lt;/code&gt; , porque dentro del controlador de eventos, &lt;code&gt;this&lt;/code&gt; refiere al &lt;code&gt;document.body&lt;/code&gt; , no a la instancia de &lt;code&gt;Foo&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b0f83deeb19c855f6e5e7fd4353ef35b56f82a60" translate="yes" xml:space="preserve">
          <source>The object that is standing before the dot is what the this keyword will be bound to.</source>
          <target state="translated">El objeto que est√° delante del punto es a lo que la palabra clave estar√° ligada.</target>
        </trans-unit>
        <trans-unit id="fc3b4ab1171b67adb539b65128c31a6fe985a69d" translate="yes" xml:space="preserve">
          <source>The question revolves around how &lt;code&gt;this&lt;/code&gt; keyword behaves in javascript. &lt;code&gt;this&lt;/code&gt; behaves differently as below,</source>
          <target state="translated">La pregunta gira en torno a c&amp;oacute;mo se comporta &lt;code&gt;this&lt;/code&gt; palabra clave en javascript. &lt;code&gt;this&lt;/code&gt; comporta de manera diferente como a continuaci&amp;oacute;n,</target>
        </trans-unit>
        <trans-unit id="4f5bf601799b4826496754deacc27d88b45812b9" translate="yes" xml:space="preserve">
          <source>The term &quot;context&quot; is sometimes used to refer to the object referenced by &lt;em&gt;this&lt;/em&gt;. Its use is inappropriate because it doesn't fit either semantically or technically with &lt;a href=&quot;http://ecma-international.org/ecma-262/5.1/#sec-10.3&quot;&gt;ECMAScript's &lt;em&gt;this&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">El t&amp;eacute;rmino &quot;contexto&quot; a veces se usa para referirse al objeto al que hace referencia. Su uso es inapropiado porque no encaja sem&amp;aacute;ntica o t&amp;eacute;cnicamente con &lt;a href=&quot;http://ecma-international.org/ecma-262/5.1/#sec-10.3&quot;&gt;ECMAScript's &lt;em&gt;this&lt;/em&gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="29e596611ce94c8c6c1da3cd4238c2debd6a73d7" translate="yes" xml:space="preserve">
          <source>The trouble with &quot;context&quot;</source>
          <target state="translated">El problema con el &quot;contexto&quot;</target>
        </trans-unit>
        <trans-unit id="5f6b0d54cfa64916d991e3233dd9a414d112f53d" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; is usually determined by a functions execution context.</source>
          <target state="translated">El valor de &lt;code&gt;this&lt;/code&gt; generalmente est&amp;aacute; determinado por un contexto de ejecuci&amp;oacute;n de funciones.</target>
        </trans-unit>
        <trans-unit id="2c07ebf251b294d81ec44d6e5bd3eb7a7dcfbcd1" translate="yes" xml:space="preserve">
          <source>This is shown in &lt;a href=&quot;http://ecma-international.org/ecma-262/5.1/#sec-10.4.2&quot;&gt;ECMA-262 section 10.4.2&lt;/a&gt;:</source>
          <target state="translated">Esto se muestra en &lt;a href=&quot;http://ecma-international.org/ecma-262/5.1/#sec-10.4.2&quot;&gt;ECMA-262 secci&amp;oacute;n 10.4.2&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="15626ab66ea3225794d92a6db19166a07fbc59dc" translate="yes" xml:space="preserve">
          <source>This object will be made the context of all Ajax-related callbacks.</source>
          <target state="translated">Este objeto ser√° el contexto de todas las llamadas relacionadas con Ajax.</target>
        </trans-unit>
        <trans-unit id="e589b5b7cd7e785bbedfd119fb0e0f15604df60b" translate="yes" xml:space="preserve">
          <source>To learn more about &lt;code&gt;this&lt;/code&gt;, have a look at the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;MDN documentation&lt;/a&gt;.</source>
          <target state="translated">Para obtener m&amp;aacute;s informaci&amp;oacute;n sobre &lt;code&gt;this&lt;/code&gt; , consulte la &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;documentaci&amp;oacute;n de MDN&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7a019c43e711ee20b2a34f1b9e376cf74602d468" translate="yes" xml:space="preserve">
          <source>Use ES6 &lt;a href=&quot;https://derickbailey.com/2015/09/28/do-es6-arrow-functions-really-solve-this-in-javascript/&quot;&gt;Arrow&lt;/a&gt; functions.</source>
          <target state="translated">Utilice las funciones de &lt;a href=&quot;https://derickbailey.com/2015/09/28/do-es6-arrow-functions-really-solve-this-in-javascript/&quot;&gt;flecha&lt;/a&gt; ES6.</target>
        </trans-unit>
        <trans-unit id="20ff1eb2976d955300bd8cf852c3e8f0f9f77d7f" translate="yes" xml:space="preserve">
          <source>We can not bind this to &lt;code&gt;setTimeout()&lt;/code&gt;, as it always execute with &lt;strong&gt;global object (Window)&lt;/strong&gt;, if you want to access &lt;code&gt;this&lt;/code&gt; context in the callback function then by using &lt;code&gt;bind()&lt;/code&gt; to the callback function we can achieve as:</source>
          <target state="translated">No podemos vincular esto a &lt;code&gt;setTimeout()&lt;/code&gt; , ya que siempre se ejecuta con &lt;strong&gt;el objeto global (Ventana)&lt;/strong&gt; , si desea acceder a &lt;code&gt;this&lt;/code&gt; contexto en la funci&amp;oacute;n de devoluci&amp;oacute;n de llamada, entonces utilizando &lt;code&gt;bind()&lt;/code&gt; a la funci&amp;oacute;n de devoluci&amp;oacute;n de llamada podemos lograrlo como:</target>
        </trans-unit>
        <trans-unit id="f0b2e61844178ceed95f0cf3e0781840c230c85f" translate="yes" xml:space="preserve">
          <source>We can set the value of this explicitly with &lt;code&gt;call()&lt;/code&gt;, &lt;code&gt;bind()&lt;/code&gt;, and &lt;code&gt;apply()&lt;/code&gt;</source>
          <target state="translated">Podemos establecer el valor de esto expl&amp;iacute;citamente con &lt;code&gt;call()&lt;/code&gt; , &lt;code&gt;bind()&lt;/code&gt; y &lt;code&gt;apply()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a300d1f4446b37c0b75e60ce04944773b10b001e" translate="yes" xml:space="preserve">
          <source>What bind do is to create a new function with the &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; keyword set to the provided value.</source>
          <target state="translated">Lo que hace bind es crear una nueva funci&amp;oacute;n con &lt;strong&gt; &lt;code&gt;this&lt;/code&gt; &lt;/strong&gt; palabra clave establecida en el valor proporcionado.</target>
        </trans-unit>
        <trans-unit id="4774184c662135228fe2eca5b4143a4243962322" translate="yes" xml:space="preserve">
          <source>What you should know about &lt;code&gt;this&lt;/code&gt;</source>
          <target state="translated">Lo que debes saber sobre &lt;code&gt;this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="97fd1730e7a467b4a6d822e1e3a3cb3729262c7c" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;new&lt;/code&gt; keyword is used (a constructor), this is bound to the new object being created.</source>
          <target state="translated">Cuando se usa la &lt;code&gt;new&lt;/code&gt; palabra clave (un constructor), est&amp;aacute; vinculada al nuevo objeto que se est&amp;aacute; creando.</target>
        </trans-unit>
        <trans-unit id="2ce6733786b30aaf931173ecc812b54c22cceb1f" translate="yes" xml:space="preserve">
          <source>When you get the property from the object and call it in one go, the object will be the context for the method. If you call the same method, but in separate steps, the context is the global scope (window) instead:</source>
          <target state="translated">Cuando se obtiene la propiedad del objeto y se llama de una sola vez,el objeto ser√° el contexto del m√©todo.Si llamas al mismo m√©todo,pero en pasos separados,el contexto es el √°mbito global (ventana)en su lugar:</target>
        </trans-unit>
        <trans-unit id="e25fd97d359cb9f70c917d4a8fc8aaa38d0af671" translate="yes" xml:space="preserve">
          <source>When you get the reference of a method, it's no longer attached to the object, it's just a reference to a plain function. The same happens when you get the reference to use as a callback:</source>
          <target state="translated">Cuando se obtiene la referencia de un m√©todo,ya no est√° unido al objeto,es s√≥lo una referencia a una funci√≥n simple.Lo mismo ocurre cuando obtienes la referencia para usarla como una llamada de retorno:</target>
        </trans-unit>
        <trans-unit id="b2ab3b5c803ea2983f02f151826822393ffb5bb0" translate="yes" xml:space="preserve">
          <source>With support of &lt;a href=&quot;https://github.com/tc39/proposal-class-fields&quot;&gt;class fields&lt;/a&gt;  it's possible to make it next way:</source>
          <target state="translated">Con soporte de &lt;a href=&quot;https://github.com/tc39/proposal-class-fields&quot;&gt;campos&lt;/a&gt; de clase , es posible hacerlo de la siguiente manera:</target>
        </trans-unit>
        <trans-unit id="f2a8ca667cc08ea85fc32a97b825a84dd7f067f0" translate="yes" xml:space="preserve">
          <source>You actually don't want to access &lt;code&gt;this&lt;/code&gt; in particular, but &lt;em&gt;the object it refers to&lt;/em&gt;. That's why an easy solution is to simply create a new variable that also refers to that object. The variable can have any name, but common ones are &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;that&lt;/code&gt;.</source>
          <target state="translated">En realidad, no desea acceder a &lt;code&gt;this&lt;/code&gt; en particular, sino &lt;em&gt;al objeto al que se refiere&lt;/em&gt; . Es por eso que una soluci&amp;oacute;n f&amp;aacute;cil es simplemente crear una nueva variable que tambi&amp;eacute;n se refiera a ese objeto. La variable puede tener cualquier nombre, pero los comunes son &lt;code&gt;self&lt;/code&gt; y &lt;code&gt;that&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eebe4cba4c37d26de7bca202344e49cbf52db06f" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind&quot;&gt;bind&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">Puede usar la funci&amp;oacute;n &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind&quot;&gt;bind&lt;/a&gt;()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c82ed2eb7f8fe82e1cc5eaa133924e42112028ac" translate="yes" xml:space="preserve">
          <source>although without its own bindings to the this, arguments, super, or new.target keywords.</source>
          <target state="translated">aunque sin sus propias ataduras a las palabras clave this,arguments,super,or new.target.</target>
        </trans-unit>
        <trans-unit id="f4b8f7b7d10494d345f58339c67f09da7c068fce" translate="yes" xml:space="preserve">
          <source>and ES2015 introduced arrow functions which don't provide their own this binding (it retains the this value of the enclosing lexical context).</source>
          <target state="translated">y ES2015 introdujeron funciones de flecha que no proporcionan por s√≠ mismas esta vinculaci√≥n (conserva el valor de este contexto l√©xico adjunto).</target>
        </trans-unit>
        <trans-unit id="e367339213aec025c0797185e727419061a64dcf" translate="yes" xml:space="preserve">
          <source>and it is called like the following :</source>
          <target state="translated">y se llama as√≠:</target>
        </trans-unit>
        <trans-unit id="066df75b17918161da47216d637d594ae709c370" translate="yes" xml:space="preserve">
          <source>and it is called like the following.Simply the callback is passed,</source>
          <target state="translated">y se llama as√≠.Simplemente se pasa la llamada,</target>
        </trans-unit>
        <trans-unit id="a93f4cff86a4e5446eb5a9aa9d39d95ac9dc9bb1" translate="yes" xml:space="preserve">
          <source>arrow-functions-vs-bind</source>
          <target state="translated">arrow-functions-vs-bind</target>
        </trans-unit>
        <trans-unit id="4a5199c7966224c5b4cc141786e8e79f22d8eb27" translate="yes" xml:space="preserve">
          <source>but it exhibits the same problems.</source>
          <target state="translated">pero muestra los mismos problemas.</target>
        </trans-unit>
        <trans-unit id="24f2046f2ac57b0086fb1167486679211880885d" translate="yes" xml:space="preserve">
          <source>first one bind &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; with callback inside the method itself.And for the second one callback is passed with the object bound to it.</source>
          <target state="translated">el primero vincula &lt;strong&gt; &lt;code&gt;this&lt;/code&gt; &lt;/strong&gt; con la devoluci&amp;oacute;n de llamada dentro del propio m&amp;eacute;todo. Y para el segundo, la devoluci&amp;oacute;n de llamada se pasa con el objeto vinculado a &amp;eacute;l.</target>
        </trans-unit>
        <trans-unit id="722fdafbf37a84106f8a486d49b288bc874e5f69" translate="yes" xml:space="preserve">
          <source>in short, global scope refers to the window object.Variables declared in a global scope are accessible from anywhere.On the other hand function scope resides inside of a function.variable  declared inside a function cannot be accessed from outside world normally.&lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; keyword in global scope refers to the window object.&lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; inside function also refers to the window object.So &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; will always refer to the window until we find a way to manipulate &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; to indicate a context of our own choosing.</source>
          <target state="translated">en resumen, el alcance global se refiere al objeto de ventana. Las variables declaradas en un alcance global son accesibles desde cualquier lugar. Por otro lado, el alcance de la funci&amp;oacute;n reside dentro de una funci&amp;oacute;n. Normalmente no se puede acceder a la variable declarada dentro de una funci&amp;oacute;n desde el mundo exterior. &lt;strong&gt; &lt;code&gt;this&lt;/code&gt; &lt;/strong&gt; palabra clave en el &amp;aacute;mbito global se refiere al objeto de ventana. &lt;strong&gt; &lt;code&gt;this&lt;/code&gt; &lt;/strong&gt; funci&amp;oacute;n interna tambi&amp;eacute;n se refiere al objeto de la ventana, por &lt;strong&gt; &lt;code&gt;this&lt;/code&gt; &lt;/strong&gt; que siempre se referir&amp;aacute; a la ventana hasta que encontremos una manera de manipular &lt;strong&gt; &lt;code&gt;this&lt;/code&gt; &lt;/strong&gt; para indicar un contexto de nuestra propia elecci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="274c09237e0f83abe388f09d3de9e024fb90b62c" translate="yes" xml:space="preserve">
          <source>or explicitly call the function as a &quot;method&quot; of the object, by using an anonymous function as callback / event handler and assign the object (&lt;code&gt;this&lt;/code&gt;) to another variable:</source>
          <target state="translated">o llame expl&amp;iacute;citamente a la funci&amp;oacute;n como un &quot;m&amp;eacute;todo&quot; del objeto, utilizando una funci&amp;oacute;n an&amp;oacute;nima como devoluci&amp;oacute;n de llamada / controlador de eventos y asigne el objeto ( &lt;code&gt;this&lt;/code&gt; ) a otra variable:</target>
        </trans-unit>
        <trans-unit id="e42a701e964de93b244d1ecb51d0a90fadefe1a9" translate="yes" xml:space="preserve">
          <source>or use an arrow function:</source>
          <target state="translated">o usar una funci√≥n de flecha:</target>
        </trans-unit>
        <trans-unit id="ded874b7c351a41a7abac69562389b93ebef4a29" translate="yes" xml:space="preserve">
          <source>when called, has its this keyword set to the provided value,</source>
          <target state="translated">cuando se le llama,tiene su esta palabra clave establecida en el valor proporcionado,</target>
        </trans-unit>
        <trans-unit id="f6875ad9393de98b36793855e7a2d1181c8d5274" translate="yes" xml:space="preserve">
          <source>which clearly indicates that &lt;em&gt;this&lt;/em&gt; is part of an execution context.</source>
          <target state="translated">que indica claramente que &lt;em&gt;esto&lt;/em&gt; es parte de un contexto de ejecuci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="9dd2f6e1d0f1041fbeb21cc91e6a5ddf5ebb1c62" translate="yes" xml:space="preserve">
          <source>with a given sequence of arguments preceding any provided when the new function is called.</source>
          <target state="translated">con una determinada secuencia de argumentos que preceden a los proporcionados cuando se llama a la nueva funci√≥n.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
