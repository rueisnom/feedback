<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/2090033">
    <body>
      <group id="2090033">
        <trans-unit id="3f5055b14089b21b81e159dcd107bbec2d3ae37d" translate="yes" xml:space="preserve">
          <source>Alternatively you can enclose the JSF page in an &lt;code&gt;f:view&lt;/code&gt; tag</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あるいは、JSFページを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;f:view&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タグ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で囲むこともできます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="59c78efa37151c4593ba8b52817dcca5dbe0b202" translate="yes" xml:space="preserve">
          <source>Below, you will see that PageNavigationController.getGmapsAutoComplete() is a HOT SPOT (performance issue) in Java Visual VM. If you look further down, on the screen capture, you will see that getLazyModel(), PrimeFaces lazy datatable getter method, is a hot spot too, only when enduser is doing a lot of 'lazy datatable' type of stuff/operations/tasks in the app. :)</source>
          <target state="translated">下を見ると、Java Visual VMではPageNavigationController.getGmapsAutoComplete()がホットスポット(パフォーマンスの問題)になっていることがわかります。さらに下を見てみると、PrimeFacesの遅延データ可能なゲッターメソッドであるgetLazyModel()もホットスポットとなっていますが、エンドユーザがアプリ内で「遅延データ可能な」タイプのstuffoperationstasksを大量に行っている場合に限ります。)</target>
        </trans-unit>
        <trans-unit id="262d0044006a2394b9b42a99ce49adb163c099fc" translate="yes" xml:space="preserve">
          <source>Defining and reusing an EL variable in JSF page</source>
          <target state="translated">JSFページでのEL変数の定義と再利用</target>
        </trans-unit>
        <trans-unit id="80cba9babc8e98dde2867e36e4f7ed2af0b2928a" translate="yes" xml:space="preserve">
          <source>Display dynamic image from database with p:graphicImage and StreamedContent</source>
          <target state="translated">データベースからp:graphicImageとStreamedContentを使って動的な画像を表示します。</target>
        </trans-unit>
        <trans-unit id="ba7019fe78bf03a5aa80517d9b3ccdfa446376ee" translate="yes" xml:space="preserve">
          <source>Evaluating an EL expression and invoking a getter method is a very cheap operation, so you should generally not worry about this at all. However, the story changes when you're performing expensive DB/business logic in the getter method for some reason. This would be re-executed everytime!</source>
          <target state="translated">EL式を評価してゲッターメソッドを呼び出すのは非常に安価な操作なので、一般的には全く気にする必要はありません。しかし、なぜかゲッターメソッドで高価なDBbusinessロジックを実行していると話が変わってきます。これでは毎回再実行されてしまう!</target>
        </trans-unit>
        <trans-unit id="bcdec0415fc0ff067c91a65bba8ca99404babdb4" translate="yes" xml:space="preserve">
          <source>Getter method:</source>
          <target state="translated">ゲッターメソッド。</target>
        </trans-unit>
        <trans-unit id="7b35067cd2fdf4d3f48cfa0bfb3e64da6f91f25f" translate="yes" xml:space="preserve">
          <source>Getter methods in JSF backing beans should be designed that way that they solely &lt;strong&gt;return&lt;/strong&gt; the already-prepared property and nothing more, exactly as per the &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html&quot;&gt;Javabeans specification&lt;/a&gt;. They should not do any expensive DB/business logic at all. For that the bean's &lt;code&gt;@PostConstruct&lt;/code&gt; and/or (action)listener methods should be used. They are executed &lt;strong&gt;only once&lt;/strong&gt; at some point of request-based JSF lifecycle and that's exactly what you want.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JSFバッキングBeanのゲッターメソッドは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Javabeans仕様&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とまったく同じように、すでに準備されているプロパティ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のみを&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;返す&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ように設計する必要があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;高価なDB /ビジネスロジックをまったく実行すべきではありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのためには、Beanの&lt;/font&gt; &lt;code&gt;@PostConstruct&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;および/または（アクション）リスナーメソッドを使用する必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、リクエストベースのJSFライフサイクルのある時点で&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1回だけ&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、まさにそれが望みどおりです。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e807ee4bcdf7e080bebc2d111d3e88d72a676691" translate="yes" xml:space="preserve">
          <source>Here is a summary of all different &lt;em&gt;right&lt;/em&gt; ways to preset/load a property.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティをプリセット/ロードするための&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;正しい&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての要約を以下に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;示します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0c4758c9329935a893fbbf4f3ebbb18bbf67a5d1" translate="yes" xml:space="preserve">
          <source>Hope it will help!</source>
          <target state="translated">役に立つことを願っています</target>
        </trans-unit>
        <trans-unit id="1bd85a7410ffdc0ff224adf6a83c2d59c42b1363" translate="yes" xml:space="preserve">
          <source>How and when should I load the model from database for h:dataTable</source>
          <target state="translated">h:dataTableのデータベースからモデルをいつ、どのようにロードすればよいでしょうか?</target>
        </trans-unit>
        <trans-unit id="d6d663d4aaef9917a0b29a75859ceb4a09e7ac5e" translate="yes" xml:space="preserve">
          <source>How to populate options of h:selectOneMenu from database?</source>
          <target state="translated">データベースからh:selectOneMenuのオプションを生成するには?</target>
        </trans-unit>
        <trans-unit id="ca90114bf3e86e9a67807e99c2fff2022c233ee3" translate="yes" xml:space="preserve">
          <source>I create a simple &lt;code&gt;MethodInterceptor&lt;/code&gt; which intercepts all methods annotated with a special annotation:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特別なアノテーションが付けられたすべてのメソッドをインターセプト&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する単純な&lt;/font&gt;&lt;/font&gt; &lt;code&gt;MethodInterceptor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を作成します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3e4845d677a53c83d3b952db9db86592066cf0c8" translate="yes" xml:space="preserve">
          <source>I googled a bit and figured this is a known issue. One workaround was to include a check and see if it had already been calculated:</source>
          <target state="translated">私は少しググってみて、これは既知の問題だと考えました。一つの回避策は、チェックを入れて、それがすでに計算されているかどうかを確認することでした。</target>
        </trans-unit>
        <trans-unit id="e690a7375a9ab3e5c9e358fe2192827c498c948c" translate="yes" xml:space="preserve">
          <source>I have written an &lt;a href=&quot;http://java.dzone.com/articles/how-cache-jsf-beans-getter&quot;&gt;article&lt;/a&gt; about how to cache JSF beans getter with Spring AOP.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring AOPでJSF Beanゲッターをキャッシュする方法について&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://java.dzone.com/articles/how-cache-jsf-beans-getter&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;記事&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を書きました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="27d12e8e755f76ef4a0ac061674b57eb54f6f2b8" translate="yes" xml:space="preserve">
          <source>I would also advice using such Framework as Primefaces instead of stock JSF,  they address such issues before JSF team e. g in primefaces you can set partial submit. Otherwise BalusC has explained it well.</source>
          <target state="translated">私はまた、標準のJSFではなく、Primefacesのようなフレームワークを使うことをアドバイスします。それ以外はBalusCがよく説明してくれています。</target>
        </trans-unit>
        <trans-unit id="4f9c7f8c172867d9c1f9b07a69cddf54459d397c" translate="yes" xml:space="preserve">
          <source>Ich think JSF must implement here some extensions to avoid multiple calls (e.g annotation &lt;code&gt;@Phase(RENDER_RESPONSE)&lt;/code&gt; calle this method only once after &lt;code&gt;RENDER_RESPONSE&lt;/code&gt; phase...)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JSFはここで複数の呼び出しを回避するためにいくつかの拡張機能を実装する必要があると思います（たとえば、アノテーション&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Phase(RENDER_RESPONSE)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;RENDER_RESPONSE&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;フェーズの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;後でこのメソッドを1回だけ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます...）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d3b99b8399689412b180fee6c1d049ced22af2b9" translate="yes" xml:space="preserve">
          <source>If I print a log message when the getter for &lt;code&gt;someProperty&lt;/code&gt; is called and load the page, it is trivial to notice that the getter is being called more than once per request (twice or three times is what happened in my case):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;someProperty&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のゲッター&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が呼び出されてページをロードする&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ときにログメッセージを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;出力&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すると、ゲッターがリクエストごとに複数回呼び出されていることに気付くのは簡単です（私の場合は2回または3回発生したことです）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2034f37633b7566c1ce9a9001c902ee8f615d76a" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;someProperty&lt;/code&gt; is expensive to calculate, this can potentially be a problem.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;someProperty&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の値の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;計算にコストがかかる場合、これが問題になる可能性があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="505c9d2c6b9842fcfbc518bcb7df2c089d098024" translate="yes" xml:space="preserve">
          <source>If the value of someProperty is
  expensive to calculate, this can
  potentially be a problem.</source>
          <target state="translated">いくつかのPropertyの値が計算するのに高価な場合、これは潜在的に問題になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="2a5283fc598ecad619a2a248f53556bdfea5b985" translate="yes" xml:space="preserve">
          <source>If there are for you really no other ways, due to some restrictive design requirements, then you should introduce lazy loading inside the getter method. I.e. if the property is &lt;code&gt;null&lt;/code&gt;, then load and assign it to the property, else return it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;制限のある設計要件のために本当に他に方法がない場合は、getterメソッド内に遅延読み込みを導入する必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、プロパティが&lt;/font&gt;&lt;/font&gt; &lt;code&gt;null&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、ロードしてプロパティに割り当て、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そうでない場合は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それを返します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71a56fd89d53814fb7a7a19a2c18f5440870bf4c" translate="yes" xml:space="preserve">
          <source>If you are using CDI, you can use Producers methods.
It will be called many times, but the result of first call is cached in scope of the bean and is efficient for getters that are computing or initializing heavy objects!
See &lt;a href=&quot;https://stackoverflow.com/questions/8592583/is-produces-more-efficient-that-a-getter-in-an-el-expression&quot;&gt;here&lt;/a&gt;, for more info.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CDIを使用している場合は、Producersメソッドを使用できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;何度も呼び出されますが、最初の呼び出しの結果はBeanのスコープにキャッシュされ、重いオブジェクトを計算または初期化するゲッターにとって効率的です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;詳細について&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/8592583/is-produces-more-efficient-that-a-getter-in-an-el-expression&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;こちら&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をご覧ください。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fcb16856ac55449edac16518822d01fe5c1acb87" translate="yes" xml:space="preserve">
          <source>Invoke JSF managed bean action on page load</source>
          <target state="translated">ページロード時にJSF管理のビーンアクションを呼び出す</target>
        </trans-unit>
        <trans-unit id="44a97c51fe7dd41a11caf550ac160cf60a053897" translate="yes" xml:space="preserve">
          <source>It still big problem in JSF. Fo example if you have a method &lt;code&gt;isPermittedToBlaBla&lt;/code&gt; for security checks and in your view you have &lt;code&gt;rendered=&quot;#{bean.isPermittedToBlaBla}&lt;/code&gt; then the method will be called multiple times.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JSFには依然として大きな問題があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、セキュリティチェック用の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッド&lt;/font&gt;&lt;/font&gt; &lt;code&gt;isPermittedToBlaBla&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;があり、ビューで&lt;/font&gt;&lt;/font&gt; &lt;code&gt;rendered=&quot;#{bean.isPermittedToBlaBla}&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;レンダリング&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;している場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、そのメソッドは複数回呼び出されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8121f31289a48750b7db026e7756d2a391fa0155" translate="yes" xml:space="preserve">
          <source>Let's say I specify an outputText component like this:</source>
          <target state="translated">このようにoutputTextコンポーネントを指定したとします。</target>
        </trans-unit>
        <trans-unit id="ac4fbb80264008b5935712485023714cf83667c8" translate="yes" xml:space="preserve">
          <source>Measure the render time of a JSF view after a server request</source>
          <target state="translated">サーバーからのリクエスト後のJSFビューのレンダリング時間を測定します。</target>
        </trans-unit>
        <trans-unit id="ddf85b285ceae40e28e798a8c71dd8e53572870b" translate="yes" xml:space="preserve">
          <source>Note that you should &lt;strong&gt;not&lt;/strong&gt; use bean's constructor or initialization block for the job because it may be invoked multiple times if you're using a bean management framework which uses proxies, such as CDI.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたがすべきことを注意&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは、このようなCDIなどのプロキシを使用し、豆の管理フレームワークを使用している場合、それが複数回呼び出される可能性があるため、仕事のために、Beanのコンストラクタまたは初期化ブロックを使用しています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b877e85ed4c8e7abc3bc897d72173e81749c9b77" translate="yes" xml:space="preserve">
          <source>Originally posted in PrimeFaces forum @ &lt;a href=&quot;http://forum.primefaces.org/viewtopic.php?f=3&amp;amp;t=29546&quot;&gt;http://forum.primefaces.org/viewtopic.php?f=3&amp;amp;t=29546&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もともとPrimeFacesフォーラム@ &lt;/font&gt;&lt;a href=&quot;http://forum.primefaces.org/viewtopic.php?f=3&amp;amp;t=29546&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://forum.primefaces.org/viewtopic.php?f=3&amp;amp;t=29546に&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;投稿されました&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="58c930e5a9b1b5df5bea02609bf811bc7d49433d" translate="yes" xml:space="preserve">
          <source>Recently, I have been obsessed evaluating the performance of my app, tuning JPA queries, replacing dynamic SQL queries with named queries, and just this morning, I recognized that a getter method was more of a HOT SPOT in Java Visual VM than the rest of my code (or majority of my code).</source>
          <target state="translated">最近、私は自分のアプリのパフォーマンスを評価したり、JPA クエリをチューニングしたり、動的 SQL クエリを名前付きクエリに置き換えたりすることに夢中になっていましたが、ちょうど今朝、ゲッターメソッドが自分の残りのコード(または自分のコードの大部分)よりも Java Visual VM の HOT SPOT であることに気づきました。</target>
        </trans-unit>
        <trans-unit id="96ccf19352fe02f99ae9d2ab0c7a067f3c2015ab" translate="yes" xml:space="preserve">
          <source>Referenced by the following in index.xhtml:</source>
          <target state="translated">index.xhtmlでは以下のように参照されています。</target>
        </trans-unit>
        <trans-unit id="47e748c1a38868fda1ef28fcd15787e6b9fcd010" translate="yes" xml:space="preserve">
          <source>Referenced by ui:include in  in index.xhtml</source>
          <target state="translated">index.xhtml の ui:include で参照されます。</target>
        </trans-unit>
        <trans-unit id="2fff1f8561229827835123bd5018e786bbc3e875" translate="yes" xml:space="preserve">
          <source>See (original) code below.</source>
          <target state="translated">以下の(元の)コードを参照してください。</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="c231a79e3c6219442c7d26e20594cf705344d372" translate="yes" xml:space="preserve">
          <source>Sharing this topic, since many of the expert users have advised junior JSF developers to NOT add code in 'getter' methods. :)</source>
          <target state="translated">このトピックを共有するのは、多くのエキスパートユーザがジュニアJSF開発者に 'ゲッター'メソッドにコードを追加しないようにアドバイスしているからです。)</target>
        </trans-unit>
        <trans-unit id="adf6900386a41b0ca2c17b224e3e87e56b38cf10" translate="yes" xml:space="preserve">
          <source>Solution: since this is a 'getter' method, move code and assign value to gmapsAutoComplete prior to method being called; see code below.</source>
          <target state="translated">解決策:これは「ゲッター」メソッドなので、メソッドが呼ばれる前にコードを移動してgmapsAutoCompleteに値を代入してください。</target>
        </trans-unit>
        <trans-unit id="84e62dea94b47f63ad38177c48bae87d51bf53fd" translate="yes" xml:space="preserve">
          <source>Test results: PageNavigationController.getGmapsAutoComplete() is no longer a HOT SPOT in Java Visual VM (doesn't even show up anymore)</source>
          <target state="translated">テスト結果です。PageNavigationController.getGmapsAutoComplete()がJava Visual VMのHOT SPOTではなくなった(表示されなくなった)</target>
        </trans-unit>
        <trans-unit id="81923481f931acab00406f593b874de8ede89d0b" translate="yes" xml:space="preserve">
          <source>Thanks for your input!</source>
          <target state="translated">ご意見ありがとうございます</target>
        </trans-unit>
        <trans-unit id="d2615c31b3f54eff5c3af62034844eea7dc49480" translate="yes" xml:space="preserve">
          <source>The main problem with this is that you get loads of boilerplate code, not to mention private variables that you might not need.</source>
          <target state="translated">これの主な問題は、必要ないかもしれないプライベート変数は言うまでもなく、ボイラープレートコードの負荷を取得することです。</target>
        </trans-unit>
        <trans-unit id="4402e9cd98d25e9250596e1dfb3913730d56b6c5" translate="yes" xml:space="preserve">
          <source>The security check could be complicated e.g . LDAP query etc. So you must avoid that with</source>
          <target state="translated">セキュリティチェックは複雑になる可能性があります。LDAPクエリなど。そのため</target>
        </trans-unit>
        <trans-unit id="fb7418f245a167afb63fa9a878421478f9e1901c" translate="yes" xml:space="preserve">
          <source>This interceptor is used in a spring configuration file:</source>
          <target state="translated">このインターセプターは、スプリングの設定ファイルで使用されます。</target>
        </trans-unit>
        <trans-unit id="a40bcb3df677eb2456cc2ee867092b774fb2002e" translate="yes" xml:space="preserve">
          <source>This is caused by the nature of deferred expressions &lt;code&gt;#{}&lt;/code&gt; (note that &quot;legacy&quot; standard expressions &lt;code&gt;${}&lt;/code&gt; behave exactly the same when Facelets is used instead of JSP). The deferred expression is not &lt;em&gt;immediately&lt;/em&gt; evaluated, but created as a &lt;a href=&quot;http://docs.oracle.com/javaee/6/api/javax/el/ValueExpression.html&quot;&gt;&lt;code&gt;ValueExpression&lt;/code&gt;&lt;/a&gt; object and the getter method behind the expression is executed everytime when the code calls &lt;a href=&quot;http://docs.oracle.com/javaee/6/api/javax/el/ValueExpression.html#getValue%28javax.el.ELContext%29&quot;&gt;&lt;code&gt;ValueExpression#getValue()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、遅延式&lt;/font&gt;&lt;/font&gt; &lt;code&gt;#{}&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の性質が原因で発生し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（「レガシー」標準式&lt;/font&gt;&lt;/font&gt; &lt;code&gt;${}&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、JSPの代わりにFaceletsを使用した場合もまったく同じように動作します）。遅延式は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すぐには&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;評価され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.oracle.com/javaee/6/api/javax/el/ValueExpression.html&quot;&gt; &lt;code&gt;ValueExpression&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクト&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として作成され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、式の背後にあるゲッターメソッドは、コードが&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.oracle.com/javaee/6/api/javax/el/ValueExpression.html#getValue%28javax.el.ELContext%29&quot;&gt; &lt;code&gt;ValueExpression#getValue()&lt;/code&gt; を&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たびに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="597dfae2a4b4d72aba852e7b0ee7f211915913e9" translate="yes" xml:space="preserve">
          <source>This is what we call a premature optimization. In the rare case that a profiler tells you that the calculation of a property is so extraordinarily expensive that calling it three times rather than once has a significant performance impact, you add caching as you describe. But unless you do something really stupid like factoring primes or accessing a databse in a getter, your code most likely has a dozen worse inefficiencies in places you've never thought about.</source>
          <target state="translated">これを「早期最適化」と呼んでいます。まれにプロファイラがプロパティの計算が非常に高価で、1回ではなく3回呼び出してもパフォーマンスに大きな影響があると判断した場合は、あなたが説明したようにキャッシングを追加します。しかし、素数をファクタリングしたり、ゲッターでデータベースにアクセスしたりするような馬鹿げたことをしない限り、あなたのコードは、あなたが考えたこともないような場所にもっと悪い非効率性を持っている可能性が高いです。</target>
        </trans-unit>
        <trans-unit id="ea96c5b628fdcd6c959756d54bbfe17889d8d2ad" translate="yes" xml:space="preserve">
          <source>This way the expensive DB/business logic won't unnecessarily be executed on every single getter call.</source>
          <target state="translated">これにより、高価なDBbusinessロジックがゲッターコールのたびに不必要に実行されることはありません。</target>
        </trans-unit>
        <trans-unit id="a846b0964a711281775691c71723e1a3e68155b5" translate="yes" xml:space="preserve">
          <source>This will normally be invoked one or two times per JSF request-response cycle, depending on whether the component is an input or output component (&lt;a href=&quot;http://balusc.blogspot.com/2006/09/debug-jsf-lifecycle.html&quot;&gt;learn it here&lt;/a&gt;). However, this count can get up (much) higher when used in iterating JSF components (such as &lt;code&gt;&amp;lt;h:dataTable&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;ui:repeat&amp;gt;&lt;/code&gt;), or here and there in a boolean expression like the &lt;code&gt;rendered&lt;/code&gt; attribute. JSF (specifically, EL) won't cache the evaluated result of the EL expression at all as it &lt;em&gt;may&lt;/em&gt; return different values on each call (for example, when it's dependent on the currently iterated datatable row).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは通常、コンポーネントが入力コンポーネントであるか出力コンポーネントであるかに応じて、JSF要求/応答サイクルごとに1回または2回呼び出されます（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://balusc.blogspot.com/2006/09/debug-jsf-lifecycle.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;こちらをご覧ください&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。ただし、この数は、JSFコンポーネント（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;h:dataTable&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;や&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;ui:repeat&amp;gt;&lt;/code&gt; など&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;反復で使用した場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;rendered&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ようなブール式のあちこちにある場合、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（はるかに）高くなる可能性が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。 JSF（具体的には、EL）はEL式の評価結果をキャッシュしません。これ&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、呼び出しごとに異なる値&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;返さ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れる&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可能性がある&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ためです（たとえば、現在反復されているデータテーブル行に依存している場合）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3c3d22202d40714d5667b68faa4eaaad8688a8d2" translate="yes" xml:space="preserve">
          <source>What are the alternatives to this approach? Is there a  way to achieve this without so much unnecessary code? Is there a way to stop JSF from behaving in this way?</source>
          <target state="translated">このアプローチの代替案は何かありますか?不必要なコードをあまり使わずに実現する方法はあるのでしょうか?JSFがこのような振る舞いをしないようにする方法はありますか?</target>
        </trans-unit>
        <trans-unit id="ede13fa471c63ba5074e8ba6b3aec0b392c4bed3" translate="yes" xml:space="preserve">
          <source>Why JSF calls getters multiple times</source>
          <target state="translated">JSFがゲッターを複数回呼び出す理由</target>
        </trans-unit>
        <trans-unit id="17fe50920c2b5d2158f84c3d4b3c01cbf8de978e" translate="yes" xml:space="preserve">
          <source>Why is the getter called so many times by the rendered attribute?</source>
          <target state="translated">レンダリングされた属性によってゲッターが何度も呼び出されるのはなぜですか?</target>
        </trans-unit>
        <trans-unit id="69647d41c731d69fede75d9cdfc11cf00c218ec6" translate="yes" xml:space="preserve">
          <source>With JSF 2.0 you can attach a listener to a system event</source>
          <target state="translated">JSF 2.0では、システムイベントにリスナーをアタッチすることができます。</target>
        </trans-unit>
        <trans-unit id="fd030d62257e7fcea5da4741c1b297abf14615c4" translate="yes" xml:space="preserve">
          <source>You could probably use AOP to create some sort of Aspect that cached the results of our getters for a configurable amount of time. This would prevent you from needing to copy-and-paste boilerplate code in dozens of accessors.</source>
          <target state="translated">AOPを使って、ゲッターの結果を設定可能な時間だけキャッシュするようなアスペクトを作ることができるかもしれません。これにより、何十ものアクセサでボイラプレートコードをコピー&amp;ペーストする必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="6d386e19f40d2c7bceaba543120ab578c0f1c860" translate="yes" xml:space="preserve">
          <source>and you must ensure within a session bean this per request.</source>
          <target state="translated">で、セッション内でこれをリクエストごとに確認する必要があります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
