<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/323972">
    <body>
      <group id="323972">
        <trans-unit id="7499887d098c99ea897596a63e36d7e74ca23c6b" translate="yes" xml:space="preserve">
          <source>(Based on &lt;a href=&quot;http://tomerfiliba.com/recipes/Thread2/&quot;&gt;Killable Threads&lt;/a&gt; by Tomer Filiba. The quote about the return value of &lt;code&gt;PyThreadState_SetAsyncExc&lt;/code&gt; appears to be from an &lt;a href=&quot;https://svn.python.org/projects/stackless/Python-2.4.3/dev/Python/pystate.c&quot;&gt;old version of Python&lt;/a&gt;.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（に基づいて&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://tomerfiliba.com/recipes/Thread2/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Killableスレッド&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Tomer Filibaによる。の戻り値について引用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;PyThreadState_SetAsyncExc&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;からのように見える&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://svn.python.org/projects/stackless/Python-2.4.3/dev/Python/pystate.c&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のPythonの古いバージョン&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1e65ee590bd907c63c09a2f7b81934bd3a8493de" translate="yes" xml:space="preserve">
          <source>(Only tested on Windows/Eclipse/Python3.3)</source>
          <target state="translated">(WindowsEclipsePython3.3でのみ動作確認済み)</target>
        </trans-unit>
        <trans-unit id="b889a55dcfba693237d3023457bd4a92c28f55fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;例えば：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eb6c574d45f729178a2de94e32661492f7bb7dab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is a bad answer, see the comments&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは悪い答えです、コメントを見てください&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="83836245ced07f09a600e24b1699107d2b7e0a40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;t&lt;/strong&gt; is your &lt;code&gt;Thread&lt;/code&gt; object.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;t&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Thread&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="533ffebc3e3edeeb64695bd9c1d135c0186a35cf" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://docs.python.org/library/multiprocessing.html#multiprocessing.Process&quot;&gt;&lt;code&gt;multiprocessing.Process&lt;/code&gt;&lt;/a&gt; can &lt;a href=&quot;https://docs.python.org/library/multiprocessing.html#multiprocessing.Process.terminate&quot;&gt;&lt;code&gt;p.terminate()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/library/multiprocessing.html#multiprocessing.Process&quot;&gt; &lt;code&gt;multiprocessing.Process&lt;/code&gt; が&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;できる&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/library/multiprocessing.html#multiprocessing.Process.terminate&quot;&gt; &lt;code&gt;p.terminate()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bdea397bd56ffa2f25ab2edfcbc515975377e732" translate="yes" xml:space="preserve">
          <source>A good usage pattern of this code is to have the thread catch a specific exception and perform the cleanup. That way, you can interrupt a task and still have proper cleanup.</source>
          <target state="translated">このコードの良い使用法は、スレッドが特定の例外をキャッチしてクリーンアップを実行することです。この方法では、タスクを中断しても適切なクリーンアップを行うことができます。</target>
        </trans-unit>
        <trans-unit id="01b3347aad13eb412669d2822899a4da8c245fa1" translate="yes" xml:space="preserve">
          <source>A little module that extends the threading's module functionality --
  allows one thread to raise exceptions in the context of another
  thread. By raising &lt;code&gt;SystemExit&lt;/code&gt;, you can finally kill python threads.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スレッディングのモジュール機能を拡張する小さなモジュール-あるスレッドが別のスレッドのコンテキストで例外を発生させることができます。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;SystemExit&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を発生させることで、最終的にPythonスレッド&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;強制終了&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5f61c357307a67de5a542e66f7bda51cbeb4d5c5" translate="yes" xml:space="preserve">
          <source>And always remember that if you have &quot;live threads&quot;, the Python interpreter will be running for wait them. (Because of this daemonic can help you if don't matter abruptly ends).</source>
          <target state="translated">そして、常にあなたが &quot;ライブスレッド &quot;を持っている場合は、Pythonインタプリタは、それらを待つために実行されることを覚えておいてください。(このデーモニックはあなたを助けることができるので、突然終了する問題ではない場合)。</target>
        </trans-unit>
        <trans-unit id="135502d0c81b5fd516f0835f59bd96d7e49ff135" translate="yes" xml:space="preserve">
          <source>As noted in the documentation, this is not a magic bullet because if the thread is busy outside the Python interpreter, it will not catch the interruption.</source>
          <target state="translated">ドキュメントに書いてあるように、これは魔法の弾丸ではありません。 なぜなら、スレッドがPythonインタープリタの外でビジー状態になった場合、割り込みをキャッチできないからです。</target>
        </trans-unit>
        <trans-unit id="a5e81a364a431b35e422e8c6f50ce7e72469f2c0" translate="yes" xml:space="preserve">
          <source>As others have mentioned, the norm is to set a stop flag. For something lightweight (no subclassing of Thread, no global variable), a lambda callback is an option. (Note the parentheses in &lt;code&gt;if stop()&lt;/code&gt;.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他の人が述べたように、標準は停止フラグを設定することです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;軽量なもの（スレッドのサブクラス化なし、グローバル変数なし）の場合、ラムダコールバックはオプションです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;if stop()&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;括弧に注意してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d84f70e4a652d63c2a072aaa9b7f02f91313ec6f" translate="yes" xml:space="preserve">
          <source>Asuming, that you want to have multiple threads of the same function, this is IMHO the easiest implementation to stop one by id:</source>
          <target state="translated">同じ関数の複数のスレッドを持つことを想定すると、これが最も簡単な実装であり、一つのスレッドを id で止めることができます。</target>
        </trans-unit>
        <trans-unit id="0ffb483f813286370fe57d5a5a2067479b9eb85c" translate="yes" xml:space="preserve">
          <source>Daemon threads are abruptly stopped at shutdown. Their resources (such as open files, database transactions, etc.) may not be released properly. If you want your threads to stop gracefully, make them non-daemonic and use a suitable signaling mechanism such as an Event.</source>
          <target state="translated">シャットダウン時にデーモンスレッドが突然停止する。そのリソース (開いているファイルやデータベーストランザクションなど)は適切に解放されないかもしれません。スレッドを優雅に停止させたい場合は、デーモニックではないものにして、イベントのような適切なシグナリングメカニズムを使用してください。</target>
        </trans-unit>
        <trans-unit id="3b3a10953e650178a593e9acbfb4a25c82e58bf9" translate="yes" xml:space="preserve">
          <source>E.g. this comes in handy to easily terminate helper &quot;threads&quot; which execute blocking I/O</source>
          <target state="translated">例えば、これは、ブロッキング IO を実行するヘルパー &quot;スレッド&quot; を簡単に終了させるのに便利です。</target>
        </trans-unit>
        <trans-unit id="37e76af44e0f25e0f2b75aab24ff290a576c6068" translate="yes" xml:space="preserve">
          <source>Finally, please, note that &lt;code&gt;sys.exit()&lt;/code&gt; and &lt;code&gt;os.kill()&lt;/code&gt; are not choices.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最後に、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;sys.exit()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;os.kill()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は選択できない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことに注意してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="54b6a1adf0dcc9e91cb44c50e073315dec966b6c" translate="yes" xml:space="preserve">
          <source>Following workaround can be used to kill a thread:</source>
          <target state="translated">以下の回避策を使用してスレッドを終了させることができます。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="53167916d482ed70e07e2dc768809307bdff0485" translate="yes" xml:space="preserve">
          <source>For example: t1.raise_exc(TypeError) and    not t1.raise_exc(TypeError(&quot;blah&quot;)).</source>
          <target state="translated">例:t1.raise_exc(TypeError)であって、t1.raise_exc(TypeError(&quot;blah&quot;))ではありません。</target>
        </trans-unit>
        <trans-unit id="eee51933ce68164fc4c946881c9ab7417bddcd40" translate="yes" xml:space="preserve">
          <source>From official documentation:</source>
          <target state="translated">公式文書から。</target>
        </trans-unit>
        <trans-unit id="7cdabf14013cc3270dedd1ad770014cd92a6b5c1" translate="yes" xml:space="preserve">
          <source>Give it a few seconds then your thread should be stopped. Check also the &lt;code&gt;thread._Thread__delete()&lt;/code&gt; method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数秒待ってから、スレッドを停止してください。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;thread._Thread__delete()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッド&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;も確認してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="000ce415269e3dd7a8c11765a3e96de2697e64ea" translate="yes" xml:space="preserve">
          <source>Here's how to do it:</source>
          <target state="translated">その方法をご紹介します。</target>
        </trans-unit>
        <trans-unit id="80deba264c25233db4a6c452127ad39f7cf7527c" translate="yes" xml:space="preserve">
          <source>However, according to its &lt;a href=&quot;http://tomerfiliba.com/recipes/Thread2/&quot;&gt;original source&lt;/a&gt;, there are some issues with this code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://tomerfiliba.com/recipes/Thread2/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;元のソース&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;によると、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このコードにはいくつかの問題があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="65392610f524e0142d69c85c5517ed6f476b93f8" translate="yes" xml:space="preserve">
          <source>I asked to expose this function in the built-in thread module, but    since ctypes has become a standard library (as of 2.5), and this</source>
          <target state="translated">この関数を組み込みスレッドモジュールで公開してほしいとお願いしたのですが、ctypesが標準ライブラリになってから(2.5時点)、この</target>
        </trans-unit>
        <trans-unit id="57bfe0c0f6e5f280276dff8c1742d56ca9221798" translate="yes" xml:space="preserve">
          <source>I think that creating daemonic threads depends of your application, but in general (and in my opinion) it's better to avoid killing them or making them daemonic. In multiprocessing you can use &lt;code&gt;is_alive()&lt;/code&gt; to check process status  and &quot;terminate&quot; for finish them (Also you avoid GIL problems). But you can find more problems, sometimes, when you execute your code in Windows.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デーモンスレッドの作成はアプリケーションに依存すると思いますが、一般的に（そして私の意見では）、スレッドを強制終了したりデーモンにしたりすることは避けた方が良いでしょう。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;マルチプロセッシングでは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;is_alive()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用してプロセスのステータスをチェックし、プロセスを終了するために「終了」できます（GILの問題も回避できます）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、Windowsでコードを実行すると、さらに多くの問題が見つかることがあります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="81d51f3ae5cc800bb27d9912e62d3da2dc578097" translate="yes" xml:space="preserve">
          <source>I usually use this to terminate all the threads at the program exit. This might not be the perfect way to terminate thread/s but could help.</source>
          <target state="translated">私は通常、プログラムの終了時にすべてのスレッドを終了させるためにこれを使用しています。これはスレッドを終了させるための完璧な方法ではないかもしれませんが、助けになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="9a3a2924ab1b1ee0728b7c19280005c6a1cd722a" translate="yes" xml:space="preserve">
          <source>I'd recommend a &lt;code&gt;thread.quit()&lt;/code&gt; method for convenience. For example if you have a socket in your thread, I'd recommend creating a &lt;code&gt;quit()&lt;/code&gt; method in your socket-handle class, terminate the socket, then run a &lt;code&gt;thread._Thread__stop()&lt;/code&gt; inside of your &lt;code&gt;quit()&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;便宜上&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;thread.quit()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;お勧め&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたのスレッドでソケットを持っている場合たとえば、私が作成をお勧めしたい&lt;/font&gt;&lt;/font&gt; &lt;code&gt;quit()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、その後、ソケットを終了し、あなたのソケットハンドルクラスのメソッドを実行し&lt;/font&gt;&lt;/font&gt; &lt;code&gt;thread._Thread__stop()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の内部をあなたの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;quit()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="876fa16023330ab848a18f32e0edea89e8b4cf7c" translate="yes" xml:space="preserve">
          <source>I'm way late to this game, but I've been wrestling with &lt;a href=&quot;https://stackoverflow.com/q/50473309/2123176&quot;&gt;a similar question&lt;/a&gt; and the following appears to both resolve the issue perfectly for me AND lets me do some basic thread state checking and cleanup when the daemonized sub-thread exits:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私はこのゲームにかなり遅れていますが&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/q/50473309/2123176&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、同様の質問&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に取り組んできまし&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;た。次のように問題を完全に解決し、デーモン化されたサブスレッドが終了したときに基本的なスレッド状態のチェックとクリーンアップを実行できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a16ad26f71a5c64230f6d98646c1ae3bd98895f3" translate="yes" xml:space="preserve">
          <source>IMHO it's a bug, and I reported it as one. For more info,    &lt;a href=&quot;http://mail.python.org/pipermail/python-dev/2006-August/068158.html&quot;&gt;http://mail.python.org/pipermail/python-dev/2006-August/068158.html&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私見それはバグであり、私はそれを1つとして報告しました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;詳細については、 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://mail.python.org/pipermail/python-dev/2006-August/068158.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http：//mail.python.org/pipermail/python-dev/2006-August/068158.html&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3b7feb23b16645a86e3c3901e1027abb2121562b" translate="yes" xml:space="preserve">
          <source>If you REALLY need to use a Thread, there is no way to kill it directly. What you can do, however, is to use a &lt;em&gt;&quot;daemon thread&quot;&lt;/em&gt;. In fact, in Python, a Thread can be flagged as &lt;em&gt;daemon&lt;/em&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;本当にスレッドを使用する必要がある場合、直接それを殺す方法はありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、できることは、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「デーモンスレッド」&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用することです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際、Pythonでは、スレッドに&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デーモンの&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;フラグを立てることができ&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2eb57e0bc96b5805d2297619a264cb8b76f871f2" translate="yes" xml:space="preserve">
          <source>If you are explicitly calling &lt;code&gt;time.sleep()&lt;/code&gt; as part of your thread (say polling some external service), an improvement upon Phillipe's method is to use the timeout in the &lt;code&gt;event&lt;/code&gt;'s &lt;code&gt;wait()&lt;/code&gt; method wherever you &lt;code&gt;sleep()&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スレッドの一部として&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;明示的に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;time.sleep()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出す場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（たとえば、いくつかの外部サービスをポーリングする場合）、Phillipeのメソッドの改善点は、&lt;/font&gt; &lt;code&gt;sleep()&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どこにいても&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;event&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;wait()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タイムアウトを使用する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことです。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d0309cdc3016580b03db61147c8d3abb9cad658" translate="yes" xml:space="preserve">
          <source>If you are trying to terminate the whole program you can set the thread as a &quot;daemon&quot;. see
&lt;a href=&quot;http://docs.python.org/library/threading.html#threading.Thread.daemon&quot;&gt;Thread.daemon&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プログラム全体を終了しようとしている場合は、スレッドを「デーモン」として設定できます。&lt;/font&gt;&lt;a href=&quot;http://docs.python.org/library/threading.html#threading.Thread.daemon&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Thread.daemonを&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照 &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce89e39e0e2bb35c1782a68143995d4acac734c4" translate="yes" xml:space="preserve">
          <source>If you do NOT really need to have a Thread (!), what you can do, instead of using the &lt;a href=&quot;http://docs.python.org/2/library/threading.html&quot;&gt;&lt;em&gt;threading&lt;/em&gt; package &lt;/a&gt;, is to use the 
&lt;a href=&quot;http://docs.python.org/2/library/multiprocessing.html&quot;&gt;&lt;em&gt;multiprocessing&lt;/em&gt; package &lt;/a&gt;. Here, to kill a process, you can simply call the method:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スレッド（！）が本当に必要ない場合は、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.python.org/2/library/threading.html&quot;&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スレッド&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パッケージ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用する代わりに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.python.org/2/library/multiprocessing.html&quot;&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;マルチプロセッシング&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パッケージ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用する &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことができ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで、プロセスを強制終了するには、メソッドを呼び出すだけです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c13c6937990bd60a8f3b72c72720d0cc393be267" translate="yes" xml:space="preserve">
          <source>If you really need the ability to kill a sub-task, use an alternate implementation. &lt;code&gt;multiprocessing&lt;/code&gt; and &lt;code&gt;gevent&lt;/code&gt; both support indiscriminately killing a &quot;thread&quot;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サブタスクを強制終了する機能が本当に必要な場合は、別の実装を使用してください。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;multiprocessing&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;gevent&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どちらも「スレッド」の無差別&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;終了を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サポートしています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3ca30e78bf8584a854ce42a0e8f96d98ae6baaa6" translate="yes" xml:space="preserve">
          <source>If you want to have only one thread of the function then you don't need to remember the id. Just stop, if &lt;code&gt;doit.stop&lt;/code&gt; &amp;gt; 0.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数のスレッドを1つだけにする場合は、IDを覚えておく必要はありません。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;doit.stop&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;gt; 0の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合は停止し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="41a042c4afd16b5fa837f1f61be17c796d4c1b5d" translate="yes" xml:space="preserve">
          <source>In Python, you simply cannot kill a Thread directly.</source>
          <target state="translated">Pythonでは、スレッドを直接殺すことはできません。</target>
        </trans-unit>
        <trans-unit id="d7bbebde22a389645109ae0ceee4f1c30cf471da" translate="yes" xml:space="preserve">
          <source>In the cases where I want to kill a thread, but do not want to use flags/locks/signals/semaphores/events/whatever, I promote the threads to full blown processes. For code that makes use of just a few threads the overhead is not that bad.</source>
          <target state="translated">スレッドを kill したいが flagslockssignalssemaphoreseventswhatever を使用したくない場合、私はスレッドを完全なプロセスに昇格させます。わずか数個のスレッドを利用するコードでは、オーバーヘッドはそれほど悪くありません。</target>
        </trans-unit>
        <trans-unit id="df24871dec1a94cda82eb27d59336d9daaff18c7" translate="yes" xml:space="preserve">
          <source>In this code, you should call &lt;code&gt;stop()&lt;/code&gt; on the thread when you want it to exit, and wait for the thread to exit properly using &lt;code&gt;join()&lt;/code&gt;. The thread should check the stop flag at regular intervals.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このコードで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、スレッドを終了するときに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;stop()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、スレッドが&lt;/font&gt;&lt;/font&gt; &lt;code&gt;join()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して適切に終了するまで待機する必要があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スレッドは、定期的に停止フラグをチェックする必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b5389750dc6e75032caa27b223e6a3c9e571d8f6" translate="yes" xml:space="preserve">
          <source>Is it possible to terminate a running thread without setting/checking any flags/semaphores/etc.?</source>
          <target state="translated">flagssemaphoresetc.を設定せずに実行中のスレッドを終了させることは可能ですか?</target>
        </trans-unit>
        <trans-unit id="df0e7bfdfe5011729ab75fd0ea9d69ab5e6ff6d9" translate="yes" xml:space="preserve">
          <source>Is there any way to kill a Thread</source>
          <target state="translated">スレッドを殺す方法はありますか?</target>
        </trans-unit>
        <trans-unit id="40271a92e1b25a91ce28cb52a9125037fb90042d" translate="yes" xml:space="preserve">
          <source>It is better if you don't kill a thread.
A way could be to introduce a &quot;try&quot; block into the thread's cycle and to throw an exception when you want to stop the thread (for example a break/return/... that stops your for/while/...). 
I've used this on my app and it works...</source>
          <target state="translated">スレッドを殺さない方が良いでしょう。スレッドのサイクルに &quot;try &quot;ブロックを導入して、スレッドを停止したいときに例外をスローする方法があります(例えば、breakreturn...forwhileを停止する...)。私のアプリでこれを使ってみましたが、うまくいきました。</target>
        </trans-unit>
        <trans-unit id="79cf010595520c83a59326da8b11077ae262a3f1" translate="yes" xml:space="preserve">
          <source>It is definitely possible to implement a &lt;code&gt;Thread.stop&lt;/code&gt; method as shown in the following example code:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次のコード例に示すように、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Thread.stop&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッド&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を実装することは間違いなく可能&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b48aba3fe80ddcb770002981183273e3289d7353" translate="yes" xml:space="preserve">
          <source>It is generally a bad pattern to kill a thread abruptly, in Python and in any language. Think of the following cases:</source>
          <target state="translated">Pythonでも、どの言語でも、突然スレッドを殺してしまうのは、一般的には悪いパターンです。以下のケースを考えてみてください。</target>
        </trans-unit>
        <trans-unit id="838739e7e1b8444a4c050dce5aca9ade75aa0ebb" translate="yes" xml:space="preserve">
          <source>Just to build up on @SCB's idea (which was exactly what I needed) to create a KillableThread  subclass with a customized function:</source>
          <target state="translated">ちょうど @SCB のアイデア(これはまさに私が必要としていたものでした)を構築するために、カスタマイズされた関数を持つ KillableThread サブクラスを作成しました。</target>
        </trans-unit>
        <trans-unit id="5acde7748f2498c35a672ea06f06db1613bd0021" translate="yes" xml:space="preserve">
          <source>Kill a thread in Python</source>
          <target state="translated">Pythonでスレッドを殺す</target>
        </trans-unit>
        <trans-unit id="f4303c0b9782c8743385e9a996b17de4960ec52f" translate="yes" xml:space="preserve">
          <source>Killing a thread removes any guarantees that try/finally blocks set up so you might leave locks locked, files open, etc.</source>
          <target state="translated">スレッドを殺すことで、tryfinallyがセットアップをブロックする保証がなくなるので、ロックされたままになったり、ファイルが開いたままになったりする可能性があります。</target>
        </trans-unit>
        <trans-unit id="c8e9b66b73c7aaf5b931c4164168fced42391b1b" translate="yes" xml:space="preserve">
          <source>Naturally, like with @SBC, the thread doesn't wait to run a new loop to stop. In this example, you would see the &quot;Killing Thread&quot; message printed right after the &quot;About to kill thread&quot; instead of waiting for 4 more seconds for the thread to complete (since we have slept for 6 seconds already).</source>
          <target state="translated">当然のことながら、@SBC のように、スレッドは新しいループを実行して停止するのを待ちません。この例では、スレッドが完了するまであと4秒待つのではなく、&quot;スレッドを殺す &quot;というメッセージが &quot;About to kill thread &quot;の直後に表示されます (すでに6秒間眠っているので)。</target>
        </trans-unit>
        <trans-unit id="353fdfea7f34feafa1d75c617f537a38460255f5" translate="yes" xml:space="preserve">
          <source>Note that it is necessary to set a Thread as &lt;code&gt;daemon&lt;/code&gt; before the &lt;code&gt;start()&lt;/code&gt; method is called!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;start()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドが呼び出される&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;前に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スレッドを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;daemon&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として設定する必要があることに注意してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;！&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5f184fd942f59085c4d9afb5d55db9d66f947c8b" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;multiprocessing.Event&lt;/code&gt; and the &lt;code&gt;multiprocessing.Semaphore&lt;/code&gt; work exactly in the same way of the &lt;code&gt;threading.Event&lt;/code&gt; and the &lt;code&gt;threading.Semaphore&lt;/code&gt; respectively. In fact, the first ones are clones of the latters.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なお&lt;/font&gt;&lt;/font&gt; &lt;code&gt;multiprocessing.Event&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;multiprocessing.Semaphore&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と同じ方法で正確に仕事&lt;/font&gt;&lt;/font&gt; &lt;code&gt;threading.Event&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;threading.Semaphore&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それぞれ。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際、最初のものは後者のクローンです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="98eb6e9676159deb20a9c7614dbb5e30c2686e03" translate="yes" xml:space="preserve">
          <source>Notice that this is inherently unsafe. It will likely lead to uncollectable garbage (from local variables of the stack frames that become garbage), and may lead to deadlocks, if the thread being killed has the GIL at the point when it is killed.</source>
          <target state="translated">これは本質的に安全ではないことに注意してください。(スタックフレームのローカル変数がゴミになることで)収集不可能なゴミが発生する可能性が高く、殺されるスレッドが殺された時点で GIL を持っている場合、デッドロックにつながる可能性があります。</target>
        </trans-unit>
        <trans-unit id="a269d9a12f08eed68c90d0706b60e6a762f7f078" translate="yes" xml:space="preserve">
          <source>Of course you can, and should, use &lt;code&gt;daemon&lt;/code&gt; even with &lt;code&gt;multiprocessing&lt;/code&gt;. Here, when the main process exits, it attempts to terminate all of its daemonic child processes.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もちろん&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;multiprocessing&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;も&lt;/font&gt;&lt;/font&gt; &lt;code&gt;daemon&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用でき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ますし&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、そうすべき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで、メインプロセスが終了すると、そのデーモンプロセスのすべての子プロセスを終了しようとします。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a2b65360a42d1bc2ba92d97dc8438b5161f8f0c" translate="yes" xml:space="preserve">
          <source>One thing I want to add is that if you read official documentation in &lt;a href=&quot;https://docs.python.org/2/library/threading.html&quot;&gt;threading lib Python&lt;/a&gt;, it's recommended to avoid use of &quot;demonic&quot; threads, when you don't want threads end abruptly, with the flag that Paolo Rovelli &lt;a href=&quot;https://stackoverflow.com/a/15185771&quot;&gt;mentioned&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;追加したいことの1つは、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/2/library/threading.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スレッドPythonの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;公式ドキュメントを読んだ場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、Paolo Rovelliが&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/15185771&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;言及&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したフラグを使用してスレッドを突然終了させたくない場合は、「悪魔的」スレッドの使用を避けることをお勧めします&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0421c613eac8b7d974eb8d6f6d4c4cfa721cf595" translate="yes" xml:space="preserve">
          <source>Only exception types can be raised    safely. Exception instances are likely to cause unexpected behavior,    and are thus restricted.</source>
          <target state="translated">例外型のみが安全に発生させることができます。例外インスタンスは予期せぬ動作を引き起こす可能性が高いため、制限されています。</target>
        </trans-unit>
        <trans-unit id="632eb633bc9cec992880c9324816c7e5d9092ec8" translate="yes" xml:space="preserve">
          <source>Pieter Hintjens -- one of the founders of the &lt;a href=&quot;http://zguide.zeromq.org/py:all&quot;&gt;&amp;Oslash;MQ&lt;/a&gt;-project -- says, using &amp;Oslash;MQ and avoiding synchronization primitives like locks, mutexes, events etc., is the sanest and securest way to write multi-threaded programs:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ピエター・ヒントジェンズ-の創始者の一&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://zguide.zeromq.org/py:all&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;Oslash;MQが&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -project - &amp;Oslash;MQを使用して、と言うとロック、ミューテックス、イベントなどのような同期プリミティブを避け、マルチスレッドプログラムを書くためのsanestとsecurest方法です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a1090a2b64b218b31613428fa3dcc48e4d76b8a" translate="yes" xml:space="preserve">
          <source>Python will kill your process (on Unix through the SIGTERM signal, while on Windows through the &lt;code&gt;TerminateProcess()&lt;/code&gt; call). Pay attention to use it while using a Queue or a Pipe! (it may corrupt the data in the Queue/Pipe)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pythonはプロセスを強制&lt;/font&gt;&lt;/font&gt; &lt;code&gt;TerminateProcess()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます（UNIXではSIGTERMシグナルを使用し、Windowsでは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;TerminateProcess（）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出しを使用）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キューまたはパイプを使用するときは注意してください。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（キュー/パイプ内のデータが破損する可能性があります）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2d8b9bf32bf27d18f4aea0ebed049168e59b722f" translate="yes" xml:space="preserve">
          <source>Python's threading does not support cancellation. Do not even try. Your code is very likely to deadlock, corrupt or leak memory, or have other unintended &quot;interesting&quot; hard-to-debug effects which happen rarely and nondeterministically.</source>
          <target state="translated">Pythonのスレッドはキャンセルをサポートしていません。試してみてはいけません。あなたのコードはデッドロックしたり、メモリを破損したりリークしたり、意図しない &quot;興味深い &quot;デバッグしづらい影響を与える可能性が非常に高くなります。</target>
        </trans-unit>
        <trans-unit id="bc549132ea7368326e4c41a503b933bf05d41f86" translate="yes" xml:space="preserve">
          <source>Read the python source (&lt;code&gt;Modules/threadmodule.c&lt;/code&gt; and &lt;code&gt;Python/thread_pthread.h&lt;/code&gt;) you can see the &lt;code&gt;Thread.ident&lt;/code&gt; is an &lt;code&gt;pthread_t&lt;/code&gt; type, so you can do anything &lt;code&gt;pthread&lt;/code&gt; can do in python use &lt;code&gt;libpthread&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pythonソース（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Modules/threadmodule.c&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Python/thread_pthread.h&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Thread.ident&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Thread.ident&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;pthread_t&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タイプであることが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;わかり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これにより、Pythonで&lt;/font&gt; &lt;code&gt;libpthread&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;して&lt;/font&gt;&lt;/font&gt; &lt;code&gt;pthread&lt;/code&gt; で&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行できることをすべて実行できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="56e218e6db5a19fcfd7ec9340175bdc08a065efe" translate="yes" xml:space="preserve">
          <source>Replacing &lt;code&gt;print()&lt;/code&gt; with a &lt;code&gt;pr()&lt;/code&gt; function that always flushes (&lt;code&gt;sys.stdout.flush()&lt;/code&gt;) may improve the precision of the shell output.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;print()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;常にフラッシュ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する&lt;/font&gt;&lt;/font&gt; &lt;code&gt;pr()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;sys.stdout.flush()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;置き換える&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と、シェル出力の精度が向上する場合があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fcd70e72304e8f7b76b072ea0ca586b45459925e" translate="yes" xml:space="preserve">
          <source>Second argument in KillableThread constructor is your custom function (print_msg here). Args argument are the arguments that will be used when calling the function ((&quot;hello world&quot;)) here.</source>
          <target state="translated">KillableThread のコンストラクタの第二引数は、カスタム関数(ここでは print_msg)です。Args 引数は、ここで関数((&quot;hello world&quot;)を呼び出す際に使用される引数です。</target>
        </trans-unit>
        <trans-unit id="c47beb861db5f720e70700312f8ed32a5f01593d" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://docs.python.org/library/multiprocessing.html&quot;&gt;Python documentation for &lt;code&gt;multiprocessing&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;a href=&quot;https://docs.python.org/library/multiprocessing.html&quot;&gt; &lt;code&gt;multiprocessing&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;については、&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pythonのドキュメントを&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ご覧ください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a8f60e1773bc5e8ba4e0edccda080754e7a79fca" translate="yes" xml:space="preserve">
          <source>So, it allows a &quot;thread to raise exceptions in the context of another thread&quot; and in this way, the terminated thread can handle the termination without regularly checking an abort flag.</source>
          <target state="translated">つまり、「別のスレッドのコンテキストで例外を発生させるスレッド」を可能にし、このようにして、終了したスレッドは定期的にアボートフラグをチェックすることなく、終了処理を行うことができるようになります。</target>
        </trans-unit>
        <trans-unit id="b8da80974f16fb3bda44dc765f34519316244840" translate="yes" xml:space="preserve">
          <source>Start the sub thread with setDaemon(True).</source>
          <target state="translated">setDaemon(True)でサブスレッドを起動します。</target>
        </trans-unit>
        <trans-unit id="ce822c6af302b4fb91cb1d0d9f0b1d345667b6c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Thread3&lt;/code&gt; class appears to run code approximately 33% faster than the &lt;code&gt;Thread2&lt;/code&gt; class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;Thread3&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスは、約33％より速いコードを実行するために、表示された&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Thread2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラス。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bdb742594535c89dd1d2824b6f16bb1e741f3962" translate="yes" xml:space="preserve">
          <source>The advantage of using &lt;code&gt;wait()&lt;/code&gt; instead of &lt;code&gt;sleep()&lt;/code&gt;ing and regularly checking the event is that you can program in longer intervals of sleep, the thread is stopped almost immediately (when you would otherwise be &lt;code&gt;sleep()&lt;/code&gt;ing) and in my opinion, the code for handling exit is significantly simpler.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;sleep()&lt;/code&gt; &lt;/font&gt; &lt;code&gt;wait()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;wait（）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;てイベントを定期的にチェックすること&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の利点は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、より長いスリープ間隔でプログラムを作成できることであり、スレッドはほぼ即座に停止します（そうで&lt;/font&gt; &lt;code&gt;sleep()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sleep（）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ingになる）。 、exitを処理するためのコードは大幅に単純です。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="755bfd3f36a5a72457c8ea731429b020680b3c45" translate="yes" xml:space="preserve">
          <source>The conversion is trivial: In related code replace all &lt;code&gt;threading.Thread&lt;/code&gt; with &lt;code&gt;multiprocessing.Process&lt;/code&gt; and all &lt;code&gt;queue.Queue&lt;/code&gt; with &lt;code&gt;multiprocessing.Queue&lt;/code&gt; and add the required calls of &lt;code&gt;p.terminate()&lt;/code&gt; to your parent process which wants to kill its child &lt;code&gt;p&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変換は簡単です：関連するコードで、すべての&lt;/font&gt;&lt;/font&gt; &lt;code&gt;threading.Thread&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;multiprocessing.Process&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、すべての&lt;/font&gt;&lt;/font&gt; &lt;code&gt;queue.Queue&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;multiprocessing.Queue&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;置き換え&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、必要な&lt;/font&gt;&lt;/font&gt; &lt;code&gt;p.terminate()&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出しを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;子プロセス&lt;/font&gt; &lt;code&gt;p&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;強制終了&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する親プロセスに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;追加&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;します&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4f754de7a178fa906a96d54bd3bdb5f92c8e80ce" translate="yes" xml:space="preserve">
          <source>The exception will be raised only when executing python bytecode. If    your thread calls a native/built-in blocking function, the
  exception    will be raised only when execution returns to the python
  code.</source>
          <target state="translated">この例外は、Python バイトコードを実行したときにのみ発生します。スレッドがネイティブビルトインのブロッキング関数を呼び出した場合、例外は実行が python コードに戻ったときにのみ発生します。</target>
        </trans-unit>
        <trans-unit id="ecbe460ea84d679935bbe296fe1bc226b6e06dec" translate="yes" xml:space="preserve">
          <source>The following code allows (with some restrictions) to raise an Exception in a Python thread:</source>
          <target state="translated">以下のコードでは、Pythonスレッドで例外を発生させることができます (いくつかの制限があります)。</target>
        </trans-unit>
        <trans-unit id="170069c968da7b8b7f217e7a2bad649f4a487fa2" translate="yes" xml:space="preserve">
          <source>The link also provides an example on multi-threaded python code with &amp;Oslash;MQ.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このリンクは、&amp;Oslash;MQを使用したマルチスレッドPythonコードの例も提供します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fd88401d2559d07c0c08640b3cf7bb962ea81e78" translate="yes" xml:space="preserve">
          <source>The main program will exit when no alive non-daemon threads are left. In other words, when your main thread (which is, of course, a non-daemon thread) will finish its operations, the program will exit even if there are still some daemon threads working.</source>
          <target state="translated">メインプログラムは、生きている非デーモンスレッドが残っていない場合に終了します。言い換えれば、メインスレッド(もちろん非デーモンスレッドです)がその操作を終了するときには、たとえいくつかのデーモンスレッドが残っていてもプログラムは終了します。</target>
        </trans-unit>
        <trans-unit id="ac462e709fc52b753b1ce03ec4e7321ea58091c6" translate="yes" xml:space="preserve">
          <source>The nice thing is here, you can have multiple of same and different functions, and stop them all by &lt;code&gt;functionname.stop&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここでのいいところは、同じ関数と異なる関数を複数持つことができ、それらをすべてfunctionname.stopで停止すること&lt;/font&gt;&lt;/font&gt; &lt;code&gt;functionname.stop&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="480182ddd48d7afcdac2fa66d5e9c3902e473a51" translate="yes" xml:space="preserve">
          <source>The nice way of handling this if you can afford it (if you are managing your own threads) is to have an exit_request flag that each threads checks on regular interval to see if it is time for it to exit.</source>
          <target state="translated">もし余裕があれば(自分のスレッドを管理しているのであれば)これを処理する良い方法は exit_request フラグを持っていて、各スレッドが終了する時間かどうかを定期的にチェックすることです。</target>
        </trans-unit>
        <trans-unit id="27a9fce92f3a474f52d4b4e4f977b79f655e24ff" translate="yes" xml:space="preserve">
          <source>The only time you can argue that forcibly killing threads is a good idea is to kill a program fast, but never single threads.</source>
          <target state="translated">スレッドを強制的に殺すのが良いと主張できるのは、プログラムを高速に殺す時だけであって、決してシングルスレッドを殺す時ではありません。</target>
        </trans-unit>
        <trans-unit id="f5495953fecadb24185aa3538211f58511b5f98f" translate="yes" xml:space="preserve">
          <source>Then to run it</source>
          <target state="translated">そして、それを実行するために</target>
        </trans-unit>
        <trans-unit id="90dd9c78e04867bb94e0abf10022e599112d7bd8" translate="yes" xml:space="preserve">
          <source>There are cases however when you really need to kill a thread. An example is when you are wrapping an external library that is busy for long calls and you want to interrupt it.</source>
          <target state="translated">しかし、本当にスレッドを kill しなければならない場合もあります。例えば、長時間の呼び出しでビジー状態になっている外部ライブラリをラップしていて、それを割り込みたい場合などです。</target>
        </trans-unit>
        <trans-unit id="d6f565645f3315a2c65aa50a22eec314e40991d3" translate="yes" xml:space="preserve">
          <source>There is a library built for this purpose, &lt;a href=&quot;https://pypi.org/project/stopit/&quot;&gt;stopit&lt;/a&gt;. Although some of the same cautions listed herein still apply, at least this library presents a regular, repeatable technique for achieving the stated goal.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この目的のために構築されたライブラリ&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://pypi.org/project/stopit/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;stopitがあり&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここに記載されているものと同じ注意事項の一部が依然として適用されますが、少なくともこのライブラリは、指定された目標を達成するための定期的で反復可能な手法を提供します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="faf7f52f2c184d50587b002b9d0a183d850f7589" translate="yes" xml:space="preserve">
          <source>There is also an issue if the built-in function internally calls    PyErr_Clear(), which would effectively cancel your pending exception. 
  You can try to raise it again.</source>
          <target state="translated">また、組み込み関数が内部的に PyErr_Clear()を呼び出すと、保留中の例外が事実上キャンセルされてしまうという問題もあります。その場合は、再度例外を発生させてみてください。</target>
        </trans-unit>
        <trans-unit id="e7bc9392b829027405d6a890488a9945514127cc" translate="yes" xml:space="preserve">
          <source>There is no official API to do that, no.</source>
          <target state="translated">それを行うための公式APIはありません、ありません。</target>
        </trans-unit>
        <trans-unit id="a3e562fc9b5c1f280609ce74f85faaf1fc4f850f" translate="yes" xml:space="preserve">
          <source>This can be used even for terminating threads, whose code is written in another module, from main thread. We can declare a global variable in that module and use it to terminate thread/s spawned in that module.</source>
          <target state="translated">これは、別のモジュールで書かれたコードを持つスレッドをメインスレッドから終了させる場合にも使えます。そのモジュールでグローバル変数を宣言して、そのモジュールでスポーンされたスレッドを終了させるために使うことができます。</target>
        </trans-unit>
        <trans-unit id="eaccc67be5f40c89a1ac45a4c48d8a1fb5c6f2d8" translate="yes" xml:space="preserve">
          <source>This has only been tested on Python 2.7.3, but it is likely to work with other recent 2.x releases.</source>
          <target state="translated">これはPython 2.7.3でしかテストされていませんが、最近リリースされた他の2.xでも動作する可能性があります。</target>
        </trans-unit>
        <trans-unit id="76566f2ff0fe3e75d118f3dafc4f529332339a6e" translate="yes" xml:space="preserve">
          <source>This includes telling a child thread, that it should cancel its work. This would be done by equipping the thread with a &amp;Oslash;MQ-socket and polling on that socket for a message saying that it should cancel.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これには、子スレッドに作業をキャンセルするように伝えることが含まれます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、スレッドに&amp;Oslash;MQソケットを装備し、そのソケットをポーリングして、キャンセルする必要があることを示すメッセージを取得することによって行われます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a10bd4a5c998219b8a98ec15379ab526b0a35728" translate="yes" xml:space="preserve">
          <source>This is based on &lt;a href=&quot;http://code.activestate.com/recipes/496960-thread2-killable-threads/&quot;&gt;thread2 -- killable threads (Python recipe)&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは&lt;/font&gt;&lt;a href=&quot;http://code.activestate.com/recipes/496960-thread2-killable-threads/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;thread2-killableスレッド（Pythonレシピ）に&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基づいてい&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6ab6b366f415658ac8d88501ece80edeca4655c6" translate="yes" xml:space="preserve">
          <source>This seems to work with pywin32 on windows 7</source>
          <target state="translated">Windows 7 の pywin32 で動作するようです。</target>
        </trans-unit>
        <trans-unit id="f8bc61dc2847f4e7bdf59b32007bbfdf2afdb21e" translate="yes" xml:space="preserve">
          <source>While it's rather old, &lt;a href=&quot;http://code.activestate.com/recipes/496960-thread2-killable-threads/&quot;&gt;this&lt;/a&gt; might be a handy solution for some:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それはかなり古いですが、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://code.activestate.com/recipes/496960-thread2-killable-threads/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は一部にとって便利な解決策かもしれません：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c970e3f1e790a2a4cd28b40401902501b9bc2d74" translate="yes" xml:space="preserve">
          <source>Yields:</source>
          <target state="translated">Yields:</target>
        </trans-unit>
        <trans-unit id="54054b7ec21f1bc432221cc15ca2392f790d379c" translate="yes" xml:space="preserve">
          <source>You can execute your command in a process and then kill it using the process id.
I needed to sync between two thread one of which  doesn&amp;rsquo;t return by itself.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロセスでコマンドを実行してから、プロセスIDを使用してコマンドを強制終了できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は2つのスレッド間で同期する必要があり、そのうちの1つはそれ自体では戻りません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9ac1d0c3a9998447cbdf16eab376996f0c960d1a" translate="yes" xml:space="preserve">
          <source>You can kill a thread by installing trace into the thread that will exit the thread.   See attached link for one possible implementation.</source>
          <target state="translated">スレッドを終了させるスレッドにトレースをインストールすることでスレッドを終了させることができます。一つの可能性のある実装については、添付のリンクを参照してください。</target>
        </trans-unit>
        <trans-unit id="9867180f299010f3a0ed3ab8bf23b87620c1552e" translate="yes" xml:space="preserve">
          <source>You need to call PyThreadState_SetasyncExc(), which is only available through ctypes.</source>
          <target state="translated">PyThreadState_SetasyncExc()を呼び出す必要がありますが、これは ctypes でしか使えません。</target>
        </trans-unit>
        <trans-unit id="14cacb8130c7d15f6cde829762f0a7a57a0ff85b" translate="yes" xml:space="preserve">
          <source>You need to use platform API to kill the thread, e.g. pthread_kill, or TerminateThread. You can access such API e.g. through pythonwin, or through ctypes.</source>
          <target state="translated">スレッドを終了させるには、pthread_kill や TerminateThread などのプラットフォームAPIを使用する必要があります。このような API には pythonwin や ctypes などからアクセスできます。</target>
        </trans-unit>
        <trans-unit id="54a2323ca3f1403ff9862ddd6155a2d6114cdefb" translate="yes" xml:space="preserve">
          <source>You should never forcibly kill a thread without cooperating with it.</source>
          <target state="translated">スレッドに協力せずに無理矢理殺してはいけません。</target>
        </trans-unit>
        <trans-unit id="0c86a2475abe5a68071a33a6ebdc653e781595a1" translate="yes" xml:space="preserve">
          <source>feature is not likely to be implementation-agnostic, it may be kept</source>
          <target state="translated">機能は実装に依存しない可能性が高いので</target>
        </trans-unit>
        <trans-unit id="50599d91b1d45822f8b67127b1242b698375527b" translate="yes" xml:space="preserve">
          <source>the thread has created several other threads that must be killed as well.</source>
          <target state="translated">このスレッドは他にも殺されなければならないスレッドをいくつか作っています。</target>
        </trans-unit>
        <trans-unit id="7779d4406ada96130c9c6c83e03357cabafb7a9f" translate="yes" xml:space="preserve">
          <source>the thread is holding a critical resource that must be closed properly</source>
          <target state="translated">スレッドが重要なリソースを保持しており、適切に閉じなければならない</target>
        </trans-unit>
        <trans-unit id="51dd05c04a11fcb88c8356f9f6d5b755bfbc45db" translate="yes" xml:space="preserve">
          <source>unexposed.</source>
          <target state="translated">unexposed.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
