<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/3010840">
    <body>
      <group id="3010840">
        <trans-unit id="71a94b16709bbf4aa3c32acb86f39f9864156150" translate="yes" xml:space="preserve">
          <source>(Directly answering your question: now you can!)</source>
          <target state="translated">(Respondiendo directamente a tu pregunta:¡ahora puedes!)</target>
        </trans-unit>
        <trans-unit id="ec51a3dc7ea6a2a72bde5feaa9c8672035a07a39" translate="yes" xml:space="preserve">
          <source>(The variable &lt;code&gt;s&lt;/code&gt; is different on each iteration, but can still be declared &lt;code&gt;const&lt;/code&gt; inside the loop body as long as it isn't modified there.)</source>
          <target state="translated">(La variable &lt;code&gt;s&lt;/code&gt; es diferente en cada iteraci&amp;oacute;n, pero a&amp;uacute;n se puede declarar &lt;code&gt;const&lt;/code&gt; ante dentro del cuerpo del bucle siempre que no se modifique all&amp;iacute;).</target>
        </trans-unit>
        <trans-unit id="244801924519c2f465f969ec90a3aa5fd9d346b3" translate="yes" xml:space="preserve">
          <source>... with the added benefit of also knowing about the current index inside the loop</source>
          <target state="translated">...con el beneficio añadido de conocer también el índice actual dentro del bucle</target>
        </trans-unit>
        <trans-unit id="ec1bc5f8b9989f3244f9ead64e5db9328413aaec" translate="yes" xml:space="preserve">
          <source>...or this one...</source>
          <target state="translated">...o este...</target>
        </trans-unit>
        <trans-unit id="8d2614ef79acce87f4e8df94e0a87325e712b550" translate="yes" xml:space="preserve">
          <source>...or this one:</source>
          <target state="translated">...o éste:</target>
        </trans-unit>
        <trans-unit id="346ff56be0af3dfc4cf74b13b4f1a9723c7e753b" translate="yes" xml:space="preserve">
          <source>1. Just loop through an array</source>
          <target state="translated">1.Sólo tienes que hacer un bucle a través de una matriz</target>
        </trans-unit>
        <trans-unit id="555d744b1f77d61c7e32ae7f1a90aff8db853562" translate="yes" xml:space="preserve">
          <source>1. Sequential &lt;code&gt;for&lt;/code&gt; loop:</source>
          <target state="translated">1. Secuencial &lt;code&gt;for&lt;/code&gt; bucle:</target>
        </trans-unit>
        <trans-unit id="fa1164fabc473c60d9122565248be869d4644b2f" translate="yes" xml:space="preserve">
          <source>2. Array.prototype.forEach</source>
          <target state="translated">2.Prototipo.de.matriz.para.cada.uno</target>
        </trans-unit>
        <trans-unit id="6e8d1647574b4505b85422943502e4260626b5e9" translate="yes" xml:space="preserve">
          <source>2. Check if any of the elements in an array pass a test</source>
          <target state="translated">2.Comprobar si alguno de los elementos de una matriz pasa una prueba</target>
        </trans-unit>
        <trans-unit id="c6f4890b5c42211a8b71fa93fd4dc466a147e440" translate="yes" xml:space="preserve">
          <source>3. ES6 &lt;code&gt;for-of&lt;/code&gt; statement</source>
          <target state="translated">3. Declaraci&amp;oacute;n a &lt;code&gt;for-of&lt;/code&gt; ES6</target>
        </trans-unit>
        <trans-unit id="170ca03f86983ae059350f3d39d8357d3c86d88a" translate="yes" xml:space="preserve">
          <source>3. Transform to a new array</source>
          <target state="translated">3.Transformar a un nuevo conjunto</target>
        </trans-unit>
        <trans-unit id="29c50fb048ccffde9b75eeb5c873696dc6fad375" translate="yes" xml:space="preserve">
          <source>4. Sum up a particular property, and calculate its average</source>
          <target state="translated">4.Resumir una propiedad particular,y calcular su promedio</target>
        </trans-unit>
        <trans-unit id="2dee4a4a056e6ed1617861aec6829069d797515e" translate="yes" xml:space="preserve">
          <source>5. Create a new array based on the original but without modifying it</source>
          <target state="translated">5.Crear un nuevo arreglo basado en el original pero sin modificarlo</target>
        </trans-unit>
        <trans-unit id="60379d930daa877950b8a02d7df63a9f9158547b" translate="yes" xml:space="preserve">
          <source>6. Count the number of each category</source>
          <target state="translated">6.Cuente el número de cada categoría</target>
        </trans-unit>
        <trans-unit id="97078bd3f052e4a50a879e4f327d30b3bb437cb1" translate="yes" xml:space="preserve">
          <source>7. Retrieve a subset of an array based on particular criteria</source>
          <target state="translated">7.Recuperar un subconjunto de un conjunto basado en criterios particulares</target>
        </trans-unit>
        <trans-unit id="40b895b551e1a8bf16b710f73aad346b0750062e" translate="yes" xml:space="preserve">
          <source>8. Sort an array</source>
          <target state="translated">8.Ordenar una matriz</target>
        </trans-unit>
        <trans-unit id="944b4287e667dd3dc76140f392ce6f74b5e943d8" translate="yes" xml:space="preserve">
          <source>9. Find an element in an array</source>
          <target state="translated">9.Encontrar un elemento en una matriz</target>
        </trans-unit>
        <trans-unit id="f0b6e9ad3ee35377fad2b98e91e4addf653f72fa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://api.jquery.com/jquery.each/&quot;&gt;&lt;strong&gt;&lt;code&gt;jQuery.each()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, in &lt;a href=&quot;https://jquery.com/&quot;&gt;&lt;strong&gt;jQuery&lt;/strong&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://api.jquery.com/jquery.each/&quot;&gt;&lt;strong&gt; &lt;code&gt;jQuery.each()&lt;/code&gt; &lt;/strong&gt;&lt;/a&gt; , en &lt;a href=&quot;https://jquery.com/&quot;&gt;&lt;strong&gt;jQuery&lt;/strong&gt;&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="b261c82cdd26f431b814a6f9436b4fd59a1deb22" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://underscorejs.org/#each&quot;&gt;&lt;strong&gt;&lt;code&gt;_.each()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, in &lt;a href=&quot;http://underscorejs.org/&quot;&gt;&lt;strong&gt;Underscore.js&lt;/strong&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://underscorejs.org/#each&quot;&gt;&lt;strong&gt; &lt;code&gt;_.each()&lt;/code&gt; &lt;/strong&gt;&lt;/a&gt; , en &lt;a href=&quot;http://underscorejs.org/&quot;&gt;&lt;strong&gt;Underscore.js&lt;/strong&gt;&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="c58511caaca6df233bc2182e3ec4036cfee42ef7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://lodash.com/docs#forEach&quot;&gt;&lt;strong&gt;&lt;code&gt;_.forEach()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, in &lt;a href=&quot;https://lodash.com/&quot;&gt;&lt;strong&gt;Lodash.js&lt;/strong&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://lodash.com/docs#forEach&quot;&gt;&lt;strong&gt; &lt;code&gt;_.forEach()&lt;/code&gt; &lt;/strong&gt;&lt;/a&gt; , en &lt;a href=&quot;https://lodash.com/&quot;&gt;&lt;strong&gt;Lodash.js&lt;/strong&gt;&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="52ca60a94f206d4eac02b402c38bb25a86fa23d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.prototype.forEach()&lt;/code&gt; is supported by all modern browsers, as well as Internet&amp;nbsp;Explorer&amp;nbsp;9 and later.</source>
          <target state="translated">&lt;code&gt;Array.prototype.forEach()&lt;/code&gt; es compatible con todos los navegadores modernos, as&amp;iacute; como con Internet Explorer 9 y versiones posteriores.</target>
        </trans-unit>
        <trans-unit id="d3bfa9adc07d603c481ef7db3fa023766d732441" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;For...in&lt;/code&gt; and &lt;code&gt;for...of&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;For...in&lt;/code&gt; y &lt;code&gt;for...of&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7a54271474b32241db54533f0e2686f548830428" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for&lt;/code&gt;...&lt;code&gt;of&lt;/code&gt; doesn't give you the index associated with each object, but as long as the object you're iterating over is actually an &lt;code&gt;Array&lt;/code&gt; (&lt;code&gt;for&lt;/code&gt;..&lt;code&gt;of&lt;/code&gt; works for other iterable types which may not have this method), you can use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries&quot;&gt;Array#entries&lt;/a&gt; method to change it to an array of [index, item] pairs, and then iterate over that:</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; ... &lt;code&gt;of&lt;/code&gt; no le da el &amp;iacute;ndice asociado con cada objeto, pero siempre y cuando el objeto sobre el que est&amp;aacute; iterando sea en realidad un &lt;code&gt;Array&lt;/code&gt; ( &lt;code&gt;for&lt;/code&gt; ... &lt;code&gt;of&lt;/code&gt; trabajos para otros tipos iterables que pueden no tener este m&amp;eacute;todo), puede usar el m&amp;eacute;todo de &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries&quot;&gt;entradas Array #&lt;/a&gt; para cambiarlo a una matriz de pares [index, item] y luego iterar sobre eso:</target>
        </trans-unit>
        <trans-unit id="7bb38035ceb1c396d3e7996795df8bf4c249f876" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(example extracted from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&lt;/a&gt;)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;(ejemplo extra&amp;iacute;do de &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&lt;/a&gt; )&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bf37ae0f080f8d39b2aaaf060b6cdeb79a3c67db" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;Array.prototype.forEach()&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;Array.prototype.forEach()&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="26e2ad632edf81fb7e89bc1c9c05201ffd6e306d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Compatibility table:&lt;/em&gt;&lt;a href=&quot;http://kangax.github.io/es5-compat-table/es6/&quot;&gt;http://kangax.github.io/es5-compat-table/es6/#For..of loops&lt;/a&gt;</source>
          <target state="translated">&lt;em&gt;Tabla de compatibilidad:&lt;/em&gt; &lt;a href=&quot;http://kangax.github.io/es5-compat-table/es6/&quot;&gt;http://kangax.github.io/es5-compat-table/es6/#For..of bucles&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ee6ae84753dccfa00cebeada5ae7c3e21d1273a3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Spec:&lt;/em&gt;&lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:iterators&quot;&gt;http://wiki.ecmascript.org/doku.php?id=harmony:iterators&lt;/a&gt;</source>
          <target state="translated">&lt;em&gt;Spec:&lt;/em&gt;&lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:iterators&quot;&gt;http://wiki.ecmascript.org/doku.php?id=harmony:iterators&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="064b427011b9e17b9e8c52d0c2639ac7a841e64e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1) For loop&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1) para bucle&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b51f60a16cebef810392106138bdb5ad294a4367" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2) While loop&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2) Mientras bucle&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3a4c5db10da9d3be2f8b682db7a9e9d2f7183bdc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;3) Do while&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;3) Hacer mientras&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eef54d6b0a77c28db0f845a27fb46e78a54e93ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;jQuery.each( collection, callback(indexInArray, valueOfElement) )&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;jQuery.each( collection, callback(indexInArray, valueOfElement) )&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="daf1d3da9a9639317a8275f5459ed1e0ddfaa92a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Anti-pattern:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Anti-pattern:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="caf1f7a722c982dbd57c57da6fb19a30c4de09b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cons&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Cons&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="704e3b0291568ed9b2c317a548493efb74047033" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;em&gt;A generic iterator function, which can be used to
  seamlessly iterate over both objects and arrays. Arrays and array-like
  objects with a length property (such as a function's arguments object)
  are iterated by numeric index, from 0 to length-1. Other objects are
  iterated via their named properties.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;Descripci&amp;oacute;n:&lt;/strong&gt; &lt;em&gt;una funci&amp;oacute;n iteradora gen&amp;eacute;rica, que se puede utilizar para iterar sin problemas sobre objetos y matrices.&lt;/em&gt; &lt;em&gt;Las matrices y los objetos en forma de matriz con una propiedad de longitud (como el objeto de argumentos de una funci&amp;oacute;n) se repiten por &amp;iacute;ndice num&amp;eacute;rico, de 0 a longitud-1.&lt;/em&gt; &lt;em&gt;Otros objetos se iteran a trav&amp;eacute;s de sus propiedades con nombre.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="048e1c2143e4ceda5b814a601b1c670466d18b12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ES5's forEach:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ES5 para cada uno:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="54f593ac46043f8cd9b8b5cf07af22c51c808d96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Generic loop:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Bucle gen&amp;eacute;rico:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f79071ea203b44120a777b7df731ac7eeaca3df3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Iterating a generator:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Iterando un generador:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="45c6df2e8979bcdde42829f806f00107ff130204" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Iterating an array of objects&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Iterando una matriz de objetos&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee4457fb819a5b4a1c45f33c6d9277e095252e99" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Iterating an array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Iterando una matriz&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d0724a44cc225daaa925fdc5f4076cd6a8e137b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Preparation:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Preparation:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4679141d2baf9da770b2677b4605d0925bd20b32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Proper use case of &lt;em&gt;map&lt;/em&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Caso de uso apropiado del &lt;em&gt;mapa&lt;/em&gt; :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="83a9ba38fb48160c9afd7eb56731a2e28460dc89" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Proper use of &lt;em&gt;reduce&lt;/em&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Uso adecuado de &lt;em&gt;reducir&lt;/em&gt; :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="364d4fdee3e0bca52971cff9ce11bfd5c1cd8d29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pros&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Pros&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6c74addec8c64f7706a870355eb69d171e4ffada" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Returns:&lt;/strong&gt;&lt;em&gt;Object&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;Returns:&lt;/strong&gt;&lt;em&gt;Object&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f9e855f63e3c1e56f1a45077526fe3d067eab2a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tests:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Tests:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8a921ab2d2c8f22b4e62a469b18c3138401c9585" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The afterthought:&lt;/strong&gt; performed every time after the loop block is executed</source>
          <target state="translated">&lt;strong&gt;La idea de &amp;uacute;ltimo momento: se&lt;/strong&gt; realiza cada vez que se ejecuta el bloque de bucle</target>
        </trans-unit>
        <trans-unit id="0841879c44f870229f18babbbb28a4ed0218e63d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The condition:&lt;/strong&gt; checks a condition every time before the loop block is executed, and quits the loop if false</source>
          <target state="translated">&lt;strong&gt;La condici&amp;oacute;n:&lt;/strong&gt; comprueba una condici&amp;oacute;n cada vez antes de que se ejecute el bloque de bucle y abandona el bucle si es falso</target>
        </trans-unit>
        <trans-unit id="ef6b1bf0d5160d7392a2ec56a57142f8de0324e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The initialization:&lt;/strong&gt; executed before the look block is executed the first time</source>
          <target state="translated">&lt;strong&gt;La inicializaci&amp;oacute;n:&lt;/strong&gt; ejecutada antes de que el bloque de b&amp;uacute;squeda se ejecute por primera vez</target>
        </trans-unit>
        <trans-unit id="83b0f4ed7f0a0bdf74518f2b95d2dc1099b984c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yes&lt;/strong&gt;, you can do the same in JavaScript using a loop, but &lt;strong&gt;not limited&lt;/strong&gt; to that, there are many ways to do a loop over arrays in JavaScript. Imagine you have this array below, and you'd like to do a loop over it:</source>
          <target state="translated">&lt;strong&gt;S&amp;iacute;&lt;/strong&gt; , puede hacer lo mismo en JavaScript usando un bucle, pero &lt;strong&gt;no se limita&lt;/strong&gt; a eso, hay muchas maneras de hacer un bucle sobre matrices en JavaScript. Imagine que tiene esta matriz a continuaci&amp;oacute;n, y le gustar&amp;iacute;a hacer un ciclo sobre ella:</target>
        </trans-unit>
        <trans-unit id="f841e3cc81531c69c584f7487ed89ea2ccac79f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;every&lt;/strong&gt; returns true if every array member passes the test.</source>
          <target state="translated">&lt;strong&gt;cada&lt;/strong&gt; devuelve verdadero si cada miembro de la matriz pasa la prueba.</target>
        </trans-unit>
        <trans-unit id="ae5396154ba12f2cbc9b6fb60697228d099a6bfb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;filter&lt;/strong&gt; returns an array of items that satisfy some condition or test.</source>
          <target state="translated">&lt;strong&gt;filter&lt;/strong&gt; devuelve una matriz de elementos que satisfacen alguna condici&amp;oacute;n o prueba.</target>
        </trans-unit>
        <trans-unit id="bdef08e47d03473e002381b0b85e4c365db03f3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;forEach&lt;/strong&gt; runs a function on each array member and doesn't return anything.</source>
          <target state="translated">&lt;strong&gt;forEach&lt;/strong&gt; ejecuta una funci&amp;oacute;n en cada miembro de la matriz y no devuelve nada.</target>
        </trans-unit>
        <trans-unit id="4e0ee97333a8174d8fa7c7379cd31d5d7b455eb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;indexOf&lt;/strong&gt; and &lt;strong&gt;lastIndexOf&lt;/strong&gt; find the appropriate position of the first or last element that matches its argument exactly.</source>
          <target state="translated">&lt;strong&gt;indexOf&lt;/strong&gt; y &lt;strong&gt;lastIndexOf&lt;/strong&gt; encuentran la posici&amp;oacute;n adecuada del primer o &amp;uacute;ltimo elemento que coincide exactamente con su argumento.</target>
        </trans-unit>
        <trans-unit id="89bb2ea399853abc85cd80df1635dcb485fff8de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jQuery.each:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;jQuery.each:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1a7285fa826c294da33df813b34b34a49e92f76c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;map&lt;/strong&gt; is like forEach, but it returns an array of the results of the operation for each element.</source>
          <target state="translated">&lt;strong&gt;map&lt;/strong&gt; es como forEach, pero devuelve una matriz de los resultados de la operaci&amp;oacute;n para cada elemento.</target>
        </trans-unit>
        <trans-unit id="05b320d00a006bb181f7dc73f11bce756fd386ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;some&lt;/strong&gt; returns true if any pass the test.</source>
          <target state="translated">&lt;strong&gt;algunos&lt;/strong&gt; devuelve verdadero si alguno pasa la prueba.</target>
        </trans-unit>
        <trans-unit id="3b932bd9e58e3f9ce0d4b89f0f0f9034a0636581" translate="yes" xml:space="preserve">
          <source>@zipcodeman suggests the use of the &lt;code&gt;for...in&lt;/code&gt; statement, but for iterating arrays &lt;code&gt;for-in&lt;/code&gt; should be avoided, that statement is meant to &lt;strong&gt;enumerate&lt;/strong&gt; object properties.</source>
          <target state="translated">@zipcodeman sugiere el uso de la declaraci&amp;oacute;n &lt;code&gt;for...in&lt;/code&gt; , pero para iterar matrices &lt;code&gt;for-in&lt;/code&gt; debe evitarse, esa declaraci&amp;oacute;n est&amp;aacute; destinada a &lt;strong&gt;enumerar las&lt;/strong&gt; propiedades del objeto.</target>
        </trans-unit>
        <trans-unit id="cc59d14dbd8a74031257140af343c1de66fa1c7e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;do while&lt;/code&gt; is doing the same thing as &lt;code&gt;while&lt;/code&gt; with some syntax difference as below:</source>
          <target state="translated">Un &lt;code&gt;do while&lt;/code&gt; hace lo mismo que &lt;code&gt;while&lt;/code&gt; con alguna diferencia de sintaxis como se muestra a continuaci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="7ba0e7db2ec388ee16e982710586d5dcd4505fa1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;for&lt;/code&gt; loop is a common way looping through arrays in JavaScript, but no considered as the fastest solutions for large arrays:</source>
          <target state="translated">Un bucle &lt;code&gt;for&lt;/code&gt; es una forma com&amp;uacute;n de recorrer matrices en JavaScript, pero no se considera la soluci&amp;oacute;n m&amp;aacute;s r&amp;aacute;pida para matrices grandes:</target>
        </trans-unit>
        <trans-unit id="a2e0ff643ee538083545089d13416135913cd236" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;while&lt;/code&gt; loop</source>
          <target state="translated">Un bucle while</target>
        </trans-unit>
        <trans-unit id="8138b8bf38e6eb381685855e53355dab4069f576" translate="yes" xml:space="preserve">
          <source>A lot cleaner...</source>
          <target state="translated">Mucho más limpio...</target>
        </trans-unit>
        <trans-unit id="208b5e319042638896984a55881d0d0b48f1809f" translate="yes" xml:space="preserve">
          <source>A note on sparse arrays: an array in JavaScript may not actually store as many items as reported by its &lt;code&gt;length&lt;/code&gt;; that reported number is simply one greater than the highest index at which a value is stored. If the array holds fewer elements than indicated by its length, its said to be &lt;em&gt;sparse&lt;/em&gt;. For example, it's perfectly legitimate to have an array with items only at indexes 3, 12, and 247; the &lt;code&gt;length&lt;/code&gt; of such an array is reported as 248, though it is only actually storing 3 values.  If you try to access an item at any other index, the array will appear to have the &lt;code&gt;undefined&lt;/code&gt; value there. So when you want to &quot;loop through&quot; an array, you have a question to answer: do you want to loop over the full range indicated by its length and process &lt;code&gt;undefined&lt;/code&gt;s for any missing elements, or do you only want to process the elements actually present? There are plenty of applications for both approaches; it just depends on what you're using the array for.</source>
          <target state="translated">Una nota sobre matrices dispersas: una matriz en JavaScript puede no almacenar tantos elementos como se informa por su &lt;code&gt;length&lt;/code&gt; ; ese n&amp;uacute;mero reportado es simplemente uno mayor que el &amp;iacute;ndice m&amp;aacute;s alto en el que se almacena un valor. Si la matriz contiene menos elementos que los indicados por su longitud, se dice que es &lt;em&gt;escasa&lt;/em&gt; . Por ejemplo, es perfectamente leg&amp;iacute;timo tener una matriz con elementos solo en los &amp;iacute;ndices 3, 12 y 247; la &lt;code&gt;length&lt;/code&gt; de dicha matriz se informa como 248, aunque en realidad solo almacena 3 valores. Si intenta acceder a un elemento en cualquier otro &amp;iacute;ndice, la matriz parecer&amp;aacute; tener el valor &lt;code&gt;undefined&lt;/code&gt; all&amp;iacute;. Entonces, cuando desea &quot;recorrer&quot; una matriz, tiene una pregunta que responder: &amp;iquest;desea recorrer el rango completo indicado por su longitud y procesar s &lt;code&gt;undefined&lt;/code&gt; para cualquier elemento faltante, o solo desea procesar los elementos en realidad presente? Hay muchas aplicaciones para ambos enfoques; solo depende de para qu&amp;eacute; est&amp;eacute; usando la matriz.</target>
        </trans-unit>
        <trans-unit id="1c8bc2da7ace60c25491e4b45d72527b6904edf7" translate="yes" xml:space="preserve">
          <source>A traditional &lt;code&gt;for&lt;/code&gt; loop has three components:</source>
          <target state="translated">Un bucle &lt;code&gt;for&lt;/code&gt; tradicional tiene tres componentes:</target>
        </trans-unit>
        <trans-unit id="93369b398d50b7aaab7d717bce714a497353f9a1" translate="yes" xml:space="preserve">
          <source>A traditional &lt;code&gt;for&lt;/code&gt;-loop</source>
          <target state="translated">Un tradicional &lt;code&gt;for&lt;/code&gt; bucle</target>
        </trans-unit>
        <trans-unit id="96d8cabd7458880b5703e2b2959e3cbf91d9b07e" translate="yes" xml:space="preserve">
          <source>A while loop is considered as the fastest way to loop through long arrays, but it is usually less used in the JavaScript code:</source>
          <target state="translated">El bucle de un rato se considera la forma más rápida de hacer un bucle a través de arreglos largos,pero normalmente se usa menos en el código JavaScript:</target>
        </trans-unit>
        <trans-unit id="1bab4365e2766b395817dc81f2821118ea4e8b6d" translate="yes" xml:space="preserve">
          <source>A working jsFiddle example:
&lt;a href=&quot;https://jsfiddle.net/workingClassHacker/pxpv2dh5/7/&quot;&gt;https://jsfiddle.net/workingClassHacker/pxpv2dh5/7/&lt;/a&gt;</source>
          <target state="translated">Un ejemplo de trabajo de jsFiddle: &lt;a href=&quot;https://jsfiddle.net/workingClassHacker/pxpv2dh5/7/&quot;&gt;https://jsfiddle.net/workingClassHacker/pxpv2dh5/7/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="87989326732077c33a82222d4512a023029ffac3" translate="yes" xml:space="preserve">
          <source>Additionally, you need to consider that no version of Internet Explorer supports &lt;code&gt;for...of&lt;/code&gt; (&lt;a href=&quot;https://www.microsoft.com/en-us/windows/microsoft-edge&quot;&gt;&lt;strong&gt;Edge 12+&lt;/strong&gt;&lt;/a&gt; does) and that &lt;code&gt;for...in&lt;/code&gt; requires at least Internet&amp;nbsp;Explorer&amp;nbsp;10.</source>
          <target state="translated">Adem&amp;aacute;s, debe tener en cuenta que ninguna versi&amp;oacute;n de Internet Explorer admite &lt;code&gt;for...of&lt;/code&gt; ( &lt;a href=&quot;https://www.microsoft.com/en-us/windows/microsoft-edge&quot;&gt;&lt;strong&gt;Edge 12+ lo&lt;/strong&gt;&lt;/a&gt; hace) y que &lt;code&gt;for...in&lt;/code&gt; requiere al menos Internet Explorer 10.</target>
        </trans-unit>
        <trans-unit id="7bdea304f3832a9d1bee7adfb3ce1b3900b31457" translate="yes" xml:space="preserve">
          <source>Also look at the &lt;code&gt;map()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;reduce()&lt;/code&gt;, etc. functions on an Array in JavaScript. They may do things much faster and better than using &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt;.</source>
          <target state="translated">Observe tambi&amp;eacute;n las funciones &lt;code&gt;map()&lt;/code&gt; , &lt;code&gt;filter()&lt;/code&gt; , &lt;code&gt;reduce()&lt;/code&gt; , etc. en una matriz en JavaScript. Pueden hacer las cosas mucho m&amp;aacute;s r&amp;aacute;pido y mejor que usar &lt;code&gt;while&lt;/code&gt; y &lt;code&gt;for&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9d7962bb439dccc6fd05184547a30773438f73c3" translate="yes" xml:space="preserve">
          <source>Also we use a &lt;code&gt;for in&lt;/code&gt; loop for looping over objects in JavaScript.</source>
          <target state="translated">Tambi&amp;eacute;n usamos un bucle &lt;code&gt;for in&lt;/code&gt; para recorrer objetos en JavaScript.</target>
        </trans-unit>
        <trans-unit id="41378cebb50d920582b6d22c47f75d416ff10194" translate="yes" xml:space="preserve">
          <source>Also, as CMS mentions in a comment below, you can only use this on arrays that don't contain any falsish values. The array of strings from the example works, but if you have empty strings, or numbers that are 0 or NaN, etc. the loop will break off prematurely. Again in practice this is hardly ever a problem for me, but it is something to keep in mind, which makes this a loop to think about before you use it... That may disqualify it for some people :)</source>
          <target state="translated">Además,como menciona el CMS en un comentario a continuación,sólo puede utilizarlo en matrices que no contengan valores falsos.La matriz de cadenas del ejemplo funciona,pero si tienes cadenas vacías,o números que son 0 o NaN,etc.el bucle se romperá prematuramente.De nuevo en la práctica esto casi nunca es un problema para mí,pero es algo que hay que tener en cuenta,lo que hace que sea un bucle en el que pensar antes de usarlo...Eso puede descalificarlo para algunas personas :)</target>
        </trans-unit>
        <trans-unit id="ee77eebe99af67ab08f84860fed6f896852d7c5f" translate="yes" xml:space="preserve">
          <source>Also, if you are trying to &lt;em&gt;reduce&lt;/em&gt; the array to a value, for example, you want to sum an array of numbers, you should use the &lt;em&gt;reduce&lt;/em&gt; method.</source>
          <target state="translated">Adem&amp;aacute;s, si est&amp;aacute; intentando &lt;em&gt;reducir&lt;/em&gt; la matriz a un valor, por ejemplo, desea sumar una matriz de n&amp;uacute;meros, debe usar el m&amp;eacute;todo de &lt;em&gt;reducci&amp;oacute;n&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="14295abe04b6e2a7de39a9d704b37a8979113366" translate="yes" xml:space="preserve">
          <source>Also, note that every while loop can be rewritten as a &lt;code&gt;for&lt;/code&gt; loop. For example, the &lt;code&gt;while&lt;/code&gt; loop hereabove behaves the exact same way as this &lt;code&gt;for&lt;/code&gt;-loop:</source>
          <target state="translated">Adem&amp;aacute;s, tenga en cuenta que cada ciclo while se puede reescribir como un ciclo &lt;code&gt;for&lt;/code&gt; . Por ejemplo, el bucle while aqu&amp;iacute; arriba se comporta exactamente de la misma manera que esto &lt;code&gt;for&lt;/code&gt; -loop:</target>
        </trans-unit>
        <trans-unit id="d4c7b480881659d668d6e1c838c1bbd6f2357af6" translate="yes" xml:space="preserve">
          <source>An alternative to &lt;code&gt;for&lt;/code&gt;-loops is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;&lt;strong&gt;&lt;code&gt;Array.prototype.forEach()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, which uses the following syntax:</source>
          <target state="translated">Una alternativa a &lt;code&gt;for&lt;/code&gt; -loops es &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;&lt;strong&gt; &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; &lt;/strong&gt;&lt;/a&gt; , que utiliza la siguiente sintaxis:</target>
        </trans-unit>
        <trans-unit id="7608e4a05c083f0749c3b00ef49e63f9bb0d59f7" translate="yes" xml:space="preserve">
          <source>And for the reverse order, an even more efficient loop</source>
          <target state="translated">Y para el orden inverso,un bucle aún más eficiente</target>
        </trans-unit>
        <trans-unit id="ea3c12f54f03b3157d901d7ecb01d0c6e8c6314b" translate="yes" xml:space="preserve">
          <source>And now x is &lt;code&gt;[10,20,30,40]&lt;/code&gt;.</source>
          <target state="translated">Y ahora x es &lt;code&gt;[10,20,30,40]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b16c84749f0eea7f146f4aab53c2350db832cc15" translate="yes" xml:space="preserve">
          <source>And with the ES6 arrow function syntax, it's even more succinct:</source>
          <target state="translated">Y con la sintaxis de la función de la flecha ES6,es aún más sucinta:</target>
        </trans-unit>
        <trans-unit id="9aee1dfe4cd64107cde999301ba98e4228ffd0ba" translate="yes" xml:space="preserve">
          <source>Array loop:</source>
          <target state="translated">Un bucle de la matriz:</target>
        </trans-unit>
        <trans-unit id="59df7171edff63098689b1d4cbcde62b62c5c672" translate="yes" xml:space="preserve">
          <source>Array objects are by definition built-in iterables in ES6, so you can use this statement on them:</source>
          <target state="translated">Los objetos de la matriz son por definición iterables incorporados en el ES6,así que puedes usar esta declaración en ellos:</target>
        </trans-unit>
        <trans-unit id="9b48533ed470f313be2a50e6f04cca823d741861" translate="yes" xml:space="preserve">
          <source>Array.prototype.filter()</source>
          <target state="translated">Array.prototype.filter()</target>
        </trans-unit>
        <trans-unit id="a71dca401c8bb6c1ba8a6a85b489323db0aded15" translate="yes" xml:space="preserve">
          <source>Array.prototype.find()</source>
          <target state="translated">Array.prototype.find()</target>
        </trans-unit>
        <trans-unit id="4cb3cae1053ce2bb98a5b83b932f46c25e31ba9b" translate="yes" xml:space="preserve">
          <source>Array.prototype.forEach()</source>
          <target state="translated">Array.prototype.forEach()</target>
        </trans-unit>
        <trans-unit id="119e13f09e922be9e6bae1b2eb26f44372c5447b" translate="yes" xml:space="preserve">
          <source>Array.prototype.map()</source>
          <target state="translated">Array.prototype.map()</target>
        </trans-unit>
        <trans-unit id="4e64033432afb4813d9f7c316c2ce7cc3e7a8ccd" translate="yes" xml:space="preserve">
          <source>Array.prototype.some()</source>
          <target state="translated">Array.prototype.some()</target>
        </trans-unit>
        <trans-unit id="7038dcb1eaea94f778a783fcd9d69b9aa89101f4" translate="yes" xml:space="preserve">
          <source>Array.prototype.sort()</source>
          <target state="translated">Array.prototype.sort()</target>
        </trans-unit>
        <trans-unit id="a34e33465f051a1d48b1d51dd13cef09aa81c0c5" translate="yes" xml:space="preserve">
          <source>Arrow functions are also widely implemented unless you plan to support ancient platforms (e.g., IE11); you are also safe to go.</source>
          <target state="translated">Las funciones de las flechas también se implementan ampliamente a menos que planees apoyar plataformas antiguas (por ejemplo,IE11);también es seguro ir.</target>
        </trans-unit>
        <trans-unit id="966cddcbaa10c67096f934e4803322a1c2ad7ec2" translate="yes" xml:space="preserve">
          <source>As an alternative to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt;&lt;strong&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, there's now also for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;&lt;strong&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;. The following example shows the difference between a &lt;code&gt;for...of&lt;/code&gt; loop and a &lt;code&gt;for...in&lt;/code&gt; loop:</source>
          <target state="translated">Como alternativa a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt;&lt;strong&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/strong&gt;&lt;/a&gt; , ahora tambi&amp;eacute;n hay for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;&lt;strong&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/strong&gt;&lt;/a&gt; . El siguiente ejemplo muestra la diferencia entre un bucle &lt;code&gt;for...of&lt;/code&gt; y un bucle &lt;code&gt;for...in&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="47221220436db2e97d5585cd374547abd2cdc928" translate="yes" xml:space="preserve">
          <source>As long as your JavaScript implementation is compliant with the &lt;em&gt;previous&lt;/em&gt; edition of the ECMAScript specification (which rules out, for example, versions of Internet Explorer before 9), then you can use the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.foreach&quot;&gt;&lt;code&gt;Array#forEach&lt;/code&gt;&lt;/a&gt; iterator method instead of a loop. In that case, you pass a function to be called on each item in the array:</source>
          <target state="translated">Mientras su implementaci&amp;oacute;n de JavaScript cumpla con la edici&amp;oacute;n &lt;em&gt;anterior&lt;/em&gt; de la especificaci&amp;oacute;n ECMAScript (que descarta, por ejemplo, las versiones de Internet Explorer anteriores a la 9), puede usar el m&amp;eacute;todo de iterador &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.foreach&quot;&gt; &lt;code&gt;Array#forEach&lt;/code&gt; en&lt;/a&gt; lugar de un bucle. En ese caso, pasa una funci&amp;oacute;n a invocar en cada elemento de la matriz:</target>
        </trans-unit>
        <trans-unit id="cc57a09cc87a254c6e7c0cd906743181aa3a7326" translate="yes" xml:space="preserve">
          <source>Assigning the length value to the local variable (as opposed to including the full &lt;code&gt;myStringArray.length&lt;/code&gt; expression in the loop condition) can make a significant difference in performance since it skips a property lookup each time through; using Rhino on my machine, the speedup is 43%.</source>
          <target state="translated">Asignar el valor de longitud a la variable local (en lugar de incluir la expresi&amp;oacute;n completa &lt;code&gt;myStringArray.length&lt;/code&gt; en la condici&amp;oacute;n del bucle) puede hacer una diferencia significativa en el rendimiento ya que omite una b&amp;uacute;squeda de propiedades cada vez; usando Rhino en mi m&amp;aacute;quina, la aceleraci&amp;oacute;n es del 43%.</target>
        </trans-unit>
        <trans-unit id="f3274f27a722ba9623d1b3c45014647813c3ad0d" translate="yes" xml:space="preserve">
          <source>Being almost ten years as the time of writing that the ES5 specification was released (Dec. 2009), it has been implemented by nearly all modern engines in the desktop, server, and mobile environments, so it's safe to use them.</source>
          <target state="translated">Siendo casi diez años el momento de escribir que la especificación ES5 fue liberada (Dic.2009),ha sido implementada por casi todos los motores modernos en los ambientes de escritorio,servidores y móviles,por lo que es seguro usarlos.</target>
        </trans-unit>
        <trans-unit id="2dd3bc0add58e1c1a3bae79831bd75535ddcea2a" translate="yes" xml:space="preserve">
          <source>Can use normal flow control statements (&lt;code&gt;break&lt;/code&gt; / &lt;code&gt;continue&lt;/code&gt;).</source>
          <target state="translated">Puede usar declaraciones de control de flujo normales ( &lt;code&gt;break&lt;/code&gt; / &lt;code&gt;continue&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="738f7a02d196b0ea75cd3e9615801f4654f464c6" translate="yes" xml:space="preserve">
          <source>Can you do the same in JavaScript?</source>
          <target state="translated">¿Puedes hacer lo mismo en JavaScript?</target>
        </trans-unit>
        <trans-unit id="bb89c713f3058705a62ca86f844888cbdaec51e9" translate="yes" xml:space="preserve">
          <source>Cannot use &lt;code&gt;break&lt;/code&gt; / &lt;code&gt;continue&lt;/code&gt;</source>
          <target state="translated">No se puede usar &lt;code&gt;break&lt;/code&gt; / &lt;code&gt;continue&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b36f8d07e1ebb98db02a451f012dc4e52c8f57bf" translate="yes" xml:space="preserve">
          <source>Combines very naturally with array.push and array.splice to use arrays like lists/stacks</source>
          <target state="translated">Se combina muy naturalmente con array.push y array.splice para usar arrays como liststacks</target>
        </trans-unit>
        <trans-unit id="0867c816fed31b5dc07fa208e04fcb8489f13b48" translate="yes" xml:space="preserve">
          <source>Comparing methods for looping through an array of 100000 items and do a minimal operation with the new value each time.</source>
          <target state="translated">Comparar los métodos para hacer un bucle a través de un conjunto de 100000 elementos y hacer una operación mínima con el nuevo valor cada vez.</target>
        </trans-unit>
        <trans-unit id="3484c6fcb53ac09a3fead481f71e452bc3f9e097" translate="yes" xml:space="preserve">
          <source>Declarative</source>
          <target state="translated">Declarative</target>
        </trans-unit>
        <trans-unit id="4effb93b81a160f681429d60f84b0435de4c8948" translate="yes" xml:space="preserve">
          <source>Do not use &lt;code&gt;for...in&lt;/code&gt;</source>
          <target state="translated">No utilizar &lt;code&gt;for...in&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7a327a1024dd4bfffdf3d3e9c43606dd74e3c14b" translate="yes" xml:space="preserve">
          <source>Easy to have &lt;a href=&quot;https://en.wikipedia.org/wiki/Off-by-one_error#Looping_over_arrays&quot;&gt;off-by-one errors&lt;/a&gt; (sometimes also called a &lt;em&gt;fence post error&lt;/em&gt;)</source>
          <target state="translated">F&amp;aacute;cil de tener &lt;a href=&quot;https://en.wikipedia.org/wiki/Off-by-one_error#Looping_over_arrays&quot;&gt;errores off-by-one&lt;/a&gt; (a veces tambi&amp;eacute;n llamado &lt;em&gt;error de publicaci&amp;oacute;n de valla&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="792e26d9ee80b19650012b8e1685b5090c7185da" translate="yes" xml:space="preserve">
          <source>Edited (because I was wrong)</source>
          <target state="translated">Editado (porque me equivoqué)</target>
        </trans-unit>
        <trans-unit id="a69fa90f2006d689445d656a40e7e8de54b4823e" translate="yes" xml:space="preserve">
          <source>Enumeration VS Iteration</source>
          <target state="translated">Enumeración VS Iteración</target>
        </trans-unit>
        <trans-unit id="2e71f7108ada8318088ac69ef4919973105c6a36" translate="yes" xml:space="preserve">
          <source>Except you don't get the &lt;code&gt;new_list&lt;/code&gt;.</source>
          <target state="translated">Excepto que no obtienes la &lt;code&gt;new_list&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Ampliar fragmento</target>
        </trans-unit>
        <trans-unit id="5952055811aee2e799c8aba3a69449f3348a23fc" translate="yes" xml:space="preserve">
          <source>Finally, many utility libraries also have their own &lt;code&gt;foreach&lt;/code&gt; variation. AFAIK, the three most popular ones are these:</source>
          <target state="translated">Finalmente, muchas bibliotecas de utilidades tambi&amp;eacute;n tienen su propia variaci&amp;oacute;n &lt;code&gt;foreach&lt;/code&gt; . AFAIK, los tres m&amp;aacute;s populares son estos:</target>
        </trans-unit>
        <trans-unit id="69464752c7da492f7d32ce20b9cb8b32ed093960" translate="yes" xml:space="preserve">
          <source>For example, I used in a Firefox console:</source>
          <target state="translated">Por ejemplo,lo usé en una consola de Firefox:</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="abc897209b2f98b7966665fa36a5eddbbc44f66d" translate="yes" xml:space="preserve">
          <source>For instance:</source>
          <target state="translated">Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="4b130c10bf2374ee6a7bc0052bacfac69fa72cc6" translate="yes" xml:space="preserve">
          <source>For me, this construct most closely emulates the Java 5 syntax that I love:</source>
          <target state="translated">Para mí,esta construcción emula muy de cerca la sintaxis de Java 5 que me encanta:</target>
        </trans-unit>
        <trans-unit id="332ea3a31e79d47a90b9a3ccec9c1cdfdbaa5829" translate="yes" xml:space="preserve">
          <source>From the documentation:</source>
          <target state="translated">De la documentación:</target>
        </trans-unit>
        <trans-unit id="d8f88d3b1d0ba856a7a6feeeff6fceeb8172f54f" translate="yes" xml:space="preserve">
          <source>Functional programming has been making quite a splash in the
  development world these days. And for good reason: Functional
  techniques can help you write more declarative code that is easier to
  understand at a glance, refactor, and test.</source>
          <target state="translated">La programación funcional ha estado causando un gran revuelo en el mundo del desarrollo en estos días.Y por una buena razón:Las técnicas funcionales pueden ayudar a escribir un código más declarativo que es más fácil de entender de un vistazo,refactorizar y probar.</target>
        </trans-unit>
        <trans-unit id="1dd7c2693b617aa4bf3153d763983796bfb81010" translate="yes" xml:space="preserve">
          <source>Given an array:</source>
          <target state="translated">Dada una matriz:</target>
        </trans-unit>
        <trans-unit id="71f5b35dbf42c10acd92d892d5a9a39d98b97a52" translate="yes" xml:space="preserve">
          <source>Have a look &lt;a href=&quot;https://stackoverflow.com/questions/3943494/how-to-loop-through-array-in-jquery&quot;&gt;this&lt;/a&gt; for detailed information or you can also check &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt;MDN&lt;/a&gt; for looping through an array in JavaScript &amp;amp; using jQuery check &lt;a href=&quot;http://api.jquery.com/jquery.each/&quot;&gt;jQuery for each&lt;/a&gt;.</source>
          <target state="translated">Eche un vistazo a &lt;a href=&quot;https://stackoverflow.com/questions/3943494/how-to-loop-through-array-in-jquery&quot;&gt;esto&lt;/a&gt; para obtener informaci&amp;oacute;n detallada o tambi&amp;eacute;n puede verificar &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt;MDN&lt;/a&gt; para recorrer una matriz en JavaScript y usar jQuery, verifique &lt;a href=&quot;http://api.jquery.com/jquery.each/&quot;&gt;jQuery para cada uno&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8a275f06b64b792994a2bea49ec5edd99e73a997" translate="yes" xml:space="preserve">
          <source>Hence:</source>
          <target state="translated">Hence:</target>
        </trans-unit>
        <trans-unit id="36fb22ec3194ab597f2415160001e28b55136fda" translate="yes" xml:space="preserve">
          <source>I did not yet see this variation, which I personally like the best:</source>
          <target state="translated">Aún no he visto esta variación,que personalmente me gusta más:</target>
        </trans-unit>
        <trans-unit id="bc84262abb174c9f0e38f36c626a6768b31337c7" translate="yes" xml:space="preserve">
          <source>I would recommend you to read the following article:</source>
          <target state="translated">Le recomiendo que lea el siguiente artículo:</target>
        </trans-unit>
        <trans-unit id="eaec00891170c602b86758588121582f9cc77f86" translate="yes" xml:space="preserve">
          <source>I would thoroughly recommend making use of the &lt;a href=&quot;http://documentcloud.github.com/underscore&quot;&gt;underscore.js&lt;/a&gt; library. It provides you with various functions that you can use to iterate over arrays/collections.</source>
          <target state="translated">Recomiendo encarecidamente hacer uso de la biblioteca &lt;a href=&quot;http://documentcloud.github.com/underscore&quot;&gt;underscore.js&lt;/a&gt; . Le proporciona varias funciones que puede usar para iterar sobre matrices / colecciones.</target>
        </trans-unit>
        <trans-unit id="680e5f2fe4669cc64fca6d0dce2445fc1aba9665" translate="yes" xml:space="preserve">
          <source>If anybody is interested in the performance side of the multiple mechanisms available for Array iterations, I've prepared the following JSPerf tests:</source>
          <target state="translated">Si alguien está interesado en el lado del rendimiento de los múltiples mecanismos disponibles para las iteraciones del Array,he preparado las siguientes pruebas JSPerf:</target>
        </trans-unit>
        <trans-unit id="fb3e18a35d3138a4789c20ff08015dcd8a81b50b" translate="yes" xml:space="preserve">
          <source>If one wants to iterate over sparsed array, &lt;code&gt;for (var i = 0; i &amp;lt; array.length; i++) if (i in array)&lt;/code&gt; or &lt;code&gt;array.forEach&lt;/code&gt; with &lt;code&gt;es5shim&lt;/code&gt; should be used.</source>
          <target state="translated">Si se quiere iterar sobre una matriz &lt;code&gt;es5shim&lt;/code&gt; debe usar &lt;code&gt;for (var i = 0; i &amp;lt; array.length; i++) if (i in array)&lt;/code&gt; o &lt;code&gt;array.forEach&lt;/code&gt; with es5shim .</target>
        </trans-unit>
        <trans-unit id="e7c24db9c43e39fc71182c2e8052375e6c248727" translate="yes" xml:space="preserve">
          <source>If order of iteration does not matter than you should try reversed loop, it is fastest as it reduce overhead condition testing and decrement is in one statement:</source>
          <target state="translated">Si el orden de la iteración no importa,entonces debería probar el bucle invertido,es más rápido ya que reduce la prueba de condición de sobrecarga y el decrecimiento está en una declaración:</target>
        </trans-unit>
        <trans-unit id="02757283e37586df6bb23c4f4ba9f10dab95d8e4" translate="yes" xml:space="preserve">
          <source>If you are targeting older browsers, the transpiled output &lt;a href=&quot;https://babeljs.io/repl#?babili=false&amp;amp;browsers=&amp;amp;build=&amp;amp;builtIns=false&amp;amp;spec=false&amp;amp;loose=false&amp;amp;code_lz=GYewTgBAFAxiB2BnALhOAbcETDSTYiAlAN4BQEeS-ApgHSYDms-4RA3GQL5A&amp;amp;debug=false&amp;amp;forceAllTransforms=false&amp;amp;shippedProposals=false&amp;amp;circleciRepo=&amp;amp;evaluate=true&amp;amp;fileSize=false&amp;amp;timeTravel=false&amp;amp;sourceType=module&amp;amp;lineWrap=false&amp;amp;presets=es2015&amp;amp;prettier=false&amp;amp;targets=&amp;amp;version=7.4.4&amp;amp;externalPlugins=&quot;&gt;might surprise you&lt;/a&gt;.</source>
          <target state="translated">Si est&amp;aacute; apuntando a navegadores antiguos, la salida recopilada &lt;a href=&quot;https://babeljs.io/repl#?babili=false&amp;amp;browsers=&amp;amp;build=&amp;amp;builtIns=false&amp;amp;spec=false&amp;amp;loose=false&amp;amp;code_lz=GYewTgBAFAxiB2BnALhOAbcETDSTYiAlAN4BQEeS-ApgHSYDms-4RA3GQL5A&amp;amp;debug=false&amp;amp;forceAllTransforms=false&amp;amp;shippedProposals=false&amp;amp;circleciRepo=&amp;amp;evaluate=true&amp;amp;fileSize=false&amp;amp;timeTravel=false&amp;amp;sourceType=module&amp;amp;lineWrap=false&amp;amp;presets=es2015&amp;amp;prettier=false&amp;amp;targets=&amp;amp;version=7.4.4&amp;amp;externalPlugins=&quot;&gt;puede sorprenderlo&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f829a0689ccf713644890b1c3b1a4cfc8ad34e87" translate="yes" xml:space="preserve">
          <source>If you iterate over an array with &lt;code&gt;for&lt;/code&gt;..&lt;code&gt;of&lt;/code&gt;, the body of the loop is executed &lt;code&gt;length&lt;/code&gt; times, and the loop control variable is set to &lt;code&gt;undefined&lt;/code&gt; for any items not actually present in the array. Depending on the details of your &quot;do something with&quot; code, that behavior may be what you want, but if not, you should use a different approach.</source>
          <target state="translated">Si itera sobre una matriz con &lt;code&gt;for&lt;/code&gt; .. &lt;code&gt;of&lt;/code&gt; , el cuerpo del bucle se ejecuta veces, y la variable de control de bucle se establece como &lt;code&gt;undefined&lt;/code&gt; para cualquier elemento que no est&amp;eacute; realmente presente en la matriz. Dependiendo de los detalles de su c&amp;oacute;digo de &quot;hacer algo con&quot;, ese comportamiento puede ser lo que desea, pero si no, debe usar un enfoque diferente.</target>
        </trans-unit>
        <trans-unit id="6b16cc5e544f97e4c2c7404c40a6b88137b3439b" translate="yes" xml:space="preserve">
          <source>If you want a terse way to write a fast loop &lt;em&gt;and&lt;/em&gt; you can iterate in reverse:</source>
          <target state="translated">Si desea una forma concisa de escribir un bucle r&amp;aacute;pido &lt;em&gt;y&lt;/em&gt; puede iterar en reversa:</target>
        </trans-unit>
        <trans-unit id="436e7053c19b3557bdfbc7e2a4a3f788195af7aa" translate="yes" xml:space="preserve">
          <source>If you want to use jQuery, it has a nice example in its documentation:</source>
          <target state="translated">Si quieres usar jQuery,tiene un buen ejemplo en su documentación:</target>
        </trans-unit>
        <trans-unit id="bc55dbfa6cee82874054cf5092582433ac1060f8" translate="yes" xml:space="preserve">
          <source>If you're using the jQuery library, consider using 
&lt;a href=&quot;http://api.jquery.com/jQuery.each/&quot;&gt;http://api.jquery.com/jQuery.each/&lt;/a&gt;</source>
          <target state="translated">Si est&amp;aacute; utilizando la biblioteca jQuery, considere usar &lt;a href=&quot;http://api.jquery.com/jQuery.each/&quot;&gt;http://api.jquery.com/jQuery.each/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e36ebcd66de4bbd012f26e5f05e31de1189ca804" translate="yes" xml:space="preserve">
          <source>Ignore it until you need it.</source>
          <target state="translated">Ignóralo hasta que lo necesites.</target>
        </trans-unit>
        <trans-unit id="810e4fa4821d4188cefc7672710f24bed2a3c1d5" translate="yes" xml:space="preserve">
          <source>Imperative</source>
          <target state="translated">Imperative</target>
        </trans-unit>
        <trans-unit id="583ae6d68b9b829162aa0ace11f35929d9bb4712" translate="yes" xml:space="preserve">
          <source>In Java you can use a &lt;code&gt;for&lt;/code&gt; loop to traverse objects in an array as follows:</source>
          <target state="translated">En Java puede usar un bucle &lt;code&gt;for&lt;/code&gt; para atravesar objetos en una matriz de la siguiente manera:</target>
        </trans-unit>
        <trans-unit id="f6d0674a47d5e4c6ee7188e8d56862dcbd6ae33a" translate="yes" xml:space="preserve">
          <source>In JavaScript any custom property could be assigned to any object, including an array.</source>
          <target state="translated">En JavaScript cualquier propiedad personalizada puede ser asignada a cualquier objeto,incluyendo una matriz.</target>
        </trans-unit>
        <trans-unit id="ee17c9f5432f037f208458ad5d51fc6145640287" translate="yes" xml:space="preserve">
          <source>In JavaScript it's not advisable to loop through an Array with a for-in loop, but it's better to use a &lt;code&gt;for&lt;/code&gt; loop such as:</source>
          <target state="translated">En JavaScript no es recomendable recorrer un Array con un ciclo for-in, pero es mejor usar un ciclo &lt;code&gt;for&lt;/code&gt; como:</target>
        </trans-unit>
        <trans-unit id="1affd76d51cbc1ab4da5924b815463734ac0f427" translate="yes" xml:space="preserve">
          <source>In JavaScript, there are so many solutions to loop an array.</source>
          <target state="translated">En JavaScript,hay tantas soluciones para hacer un bucle en una matriz.</target>
        </trans-unit>
        <trans-unit id="509626629442545fa142bc6b90e393ef90bfd1d2" translate="yes" xml:space="preserve">
          <source>In JavaScript, you can also do this:</source>
          <target state="translated">En JavaScript,también puedes hacer esto:</target>
        </trans-unit>
        <trans-unit id="bc5977a0c215f5a97db26f12ccd984993cb76e07" translate="yes" xml:space="preserve">
          <source>In a browser console, you can see something like &quot;element1&quot;, &quot;element2&quot;, etc., printed.</source>
          <target state="translated">En la consola de un navegador,se puede ver algo como &quot;elemento1&quot;,&quot;elemento2&quot;,etc.,impreso.</target>
        </trans-unit>
        <trans-unit id="f8cdbcc1ec9b2f241eea1c7f52b02c03840b2a13" translate="yes" xml:space="preserve">
          <source>In general &lt;code&gt;func&lt;/code&gt; would take one parameter, which is an item of the array. But in the case of JavaScript, it can take a second parameter which is the item's index, and a third parameter which is the array itself.</source>
          <target state="translated">En general, &lt;code&gt;func&lt;/code&gt; tomar&amp;iacute;a un par&amp;aacute;metro, que es un elemento de la matriz. Pero en el caso de JavaScript, puede tomar un segundo par&amp;aacute;metro, que es el &amp;iacute;ndice del elemento, y un tercer par&amp;aacute;metro, que es la matriz misma.</target>
        </trans-unit>
        <trans-unit id="fd0e1873da03f1238cdcd8d46e69b571337886d4" translate="yes" xml:space="preserve">
          <source>In the above example, the &lt;code&gt;hasOwnProperty&lt;/code&gt; method allows you to enumerate only &lt;em&gt;own properties&lt;/em&gt;, that's it, only the properties that the object physically has, no inherited properties.</source>
          <target state="translated">En el ejemplo anterior, el m&amp;eacute;todo &lt;code&gt;hasOwnProperty&lt;/code&gt; le permite enumerar solo &lt;em&gt;propiedades propias&lt;/em&gt; , es decir, solo las propiedades que tiene f&amp;iacute;sicamente el objeto, sin propiedades heredadas.</target>
        </trans-unit>
        <trans-unit id="731f9b52cf3864b4e845afc26f5823a015b6f718" translate="yes" xml:space="preserve">
          <source>Inherited properties are also enumerated.</source>
          <target state="translated">También se enumeran las propiedades heredadas.</target>
        </trans-unit>
        <trans-unit id="b4e6a310890f62289340d7802703b8c2586c6d86" translate="yes" xml:space="preserve">
          <source>Intro</source>
          <target state="translated">Intro</target>
        </trans-unit>
        <trans-unit id="6371b79462d66a07f6e9b72523ff8fb46bd76993" translate="yes" xml:space="preserve">
          <source>It also means you'll never have to write a for loop again.</source>
          <target state="translated">También significa que nunca tendrás que escribir un bucle de nuevo.</target>
        </trans-unit>
        <trans-unit id="4d5482c75593dd4638959de0178a2d6ee6f654e4" translate="yes" xml:space="preserve">
          <source>It also works on Node (I tested it on version 0.12.0).</source>
          <target state="translated">También funciona en el Nodo (lo probé en la versión 0.12.0).</target>
        </trans-unit>
        <trans-unit id="c7afdd2fab1fe4c50035aa8b7a97f2ca3d7a8fe9" translate="yes" xml:space="preserve">
          <source>It can iterate over a large variety of objects.</source>
          <target state="translated">Puede iterar sobre una gran variedad de objetos.</target>
        </trans-unit>
        <trans-unit id="f5e0298a8f63b40bf1dbd95d72b4565988c2bb43" translate="yes" xml:space="preserve">
          <source>It currently works with Firefox 13+, Chrome 37+ and it does not natively work with other browsers (see browser compatibility below). Luckily we have JS compilers (such as &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt;) that allow us to use next-generation features today.</source>
          <target state="translated">Actualmente funciona con Firefox 13+, Chrome 37+ y no funciona de forma nativa con otros navegadores (consulte la compatibilidad del navegador a continuaci&amp;oacute;n). Afortunadamente, tenemos compiladores JS (como &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; ) que nos permiten usar las caracter&amp;iacute;sticas de la pr&amp;oacute;xima generaci&amp;oacute;n hoy.</target>
        </trans-unit>
        <trans-unit id="b7f1e474a3cbb522e7737b4c41a0e6c6aa40d314" translate="yes" xml:space="preserve">
          <source>It shouldn't be used for array-like objects because:</source>
          <target state="translated">No debería ser usado para objetos de tipo &quot;array&quot; porque:</target>
        </trans-unit>
        <trans-unit id="618aee3ec871071cafa5f2c415e6c3ad428f6c63" translate="yes" xml:space="preserve">
          <source>It works like this:</source>
          <target state="translated">Funciona así:</target>
        </trans-unit>
        <trans-unit id="729fd72bc10f5b53441cfd34a43c99d234bed82b" translate="yes" xml:space="preserve">
          <source>It's not 100% identical, but similar:</source>
          <target state="translated">No es 100% idéntico,pero sí similar:</target>
        </trans-unit>
        <trans-unit id="d2c98a7efcec06920db9cb117bd433708798538f" translate="yes" xml:space="preserve">
          <source>It's optimized as well (&quot;caching&quot; the array length). If you'd like to learn more, &lt;a href=&quot;http://blog.sebarmeli.com/2010/12/06/best-way-to-loop-through-an-array-in-javascript/&quot;&gt;read my post on the subject&lt;/a&gt;.</source>
          <target state="translated">Tambi&amp;eacute;n est&amp;aacute; optimizado (&quot;almacenamiento en cach&amp;eacute;&quot; de la longitud de la matriz). Si desea obtener m&amp;aacute;s informaci&amp;oacute;n, &lt;a href=&quot;http://blog.sebarmeli.com/2010/12/06/best-way-to-loop-through-an-array-in-javascript/&quot;&gt;lea mi publicaci&amp;oacute;n sobre el tema&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="46a98fc5f1adbc9ced665ed928468799beb685aa" translate="yes" xml:space="preserve">
          <source>It's short to write</source>
          <target state="translated">Es corto de escribir</target>
        </trans-unit>
        <trans-unit id="b67411757f4baa65933449ae3c433b43e33a3bec" translate="yes" xml:space="preserve">
          <source>Keep in mind if you are iterating an array &lt;em&gt;to build another array from it&lt;/em&gt;, you should use &lt;code&gt;map&lt;/code&gt;, I've seen this anti-pattern so many times.</source>
          <target state="translated">Tenga en cuenta que si est&amp;aacute; iterando una matriz &lt;em&gt;para construir otra matriz a partir de ella&lt;/em&gt; , debe usar &lt;code&gt;map&lt;/code&gt; , he visto este antipatr&amp;oacute;n tantas veces.</target>
        </trans-unit>
        <trans-unit id="27c968e6692b41bf6e1a241b870dc41ff1a51b17" translate="yes" xml:space="preserve">
          <source>Libraries</source>
          <target state="translated">Libraries</target>
        </trans-unit>
        <trans-unit id="a3c5490fc48c1e07b7f4efa147aa56f508ce53b0" translate="yes" xml:space="preserve">
          <source>Like traditional &lt;code&gt;for&lt;/code&gt; loops, &lt;code&gt;while&lt;/code&gt; loops are supported by even the oldest of browsers.</source>
          <target state="translated">Al igual que los bucles tradicionales, &lt;code&gt;while&lt;/code&gt; bucles son compatibles incluso con los navegadores m&amp;aacute;s antiguos.</target>
        </trans-unit>
        <trans-unit id="cead623be3ff7a811535895bde64a1c14f83edd4" translate="yes" xml:space="preserve">
          <source>Loop through an array in JavaScript</source>
          <target state="translated">El bucle a través de una matriz en JavaScript</target>
        </trans-unit>
        <trans-unit id="43395e0915b2f80810ff1d9bf284e72478f3a7d9" translate="yes" xml:space="preserve">
          <source>Modern browsers all support iterator methods &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt; and a host of other methods on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array?redirectlocale=en-US&amp;amp;redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray&quot;&gt;Array prototype&lt;/a&gt;.</source>
          <target state="translated">Todos los navegadores modernos admiten m&amp;eacute;todos iteradores para cada &lt;code&gt;forEach&lt;/code&gt; , &lt;code&gt;map&lt;/code&gt; , &lt;code&gt;reduce&lt;/code&gt; , &lt;code&gt;filter&lt;/code&gt; y una gran cantidad de otros m&amp;eacute;todos en el &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array?redirectlocale=en-US&amp;amp;redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray&quot;&gt;prototipo de matriz&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="413b0f0902d335e117f52bb6f630c916500b39e6" translate="yes" xml:space="preserve">
          <source>Most other answers are right, but they do not mention (as of this writing) that &lt;strong&gt;&lt;em&gt;ECMA Script &lt;strike&gt;&amp;nbsp;6&amp;nbsp;&lt;/strike&gt; 2015&lt;/em&gt;&lt;/strong&gt; is bringing a new mechanism for doing iteration, the &lt;strong&gt;&lt;code&gt;for..of&lt;/code&gt;&lt;/strong&gt; loop.</source>
          <target state="translated">La mayor&amp;iacute;a de las otras respuestas son correctas, pero no mencionan (a partir de este escrito) que &lt;strong&gt;&lt;em&gt;ECMA Script &lt;strike&gt;6&lt;/strike&gt; 2015&lt;/em&gt;&lt;/strong&gt; est&amp;aacute; trayendo un nuevo mecanismo para hacer la iteraci&amp;oacute;n, el bucle &lt;strong&gt; &lt;code&gt;for..of&lt;/code&gt; &lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="5aa5faa92650187f67128950cd34998418f5d033" translate="yes" xml:space="preserve">
          <source>Mozilla Labs published the algorithms they and &lt;a href=&quot;http://en.wikipedia.org/wiki/WebKit&quot;&gt;WebKit&lt;/a&gt; both use, so that you can add them yourself.</source>
          <target state="translated">Mozilla Labs public&amp;oacute; los algoritmos que ellos y &lt;a href=&quot;http://en.wikipedia.org/wiki/WebKit&quot;&gt;WebKit&lt;/a&gt; usan, para que pueda agregarlos usted mismo.</target>
        </trans-unit>
        <trans-unit id="6bbeedb096ad8a164494e42f681d03f151eee20a" translate="yes" xml:space="preserve">
          <source>No need to access (let alone cache) the length property</source>
          <target state="translated">No hay necesidad de acceder (y mucho menos de almacenar)a la propiedad de longitud</target>
        </trans-unit>
        <trans-unit id="b43994d34a5fafb7a2888982d67dca097a47a6e9" translate="yes" xml:space="preserve">
          <source>Normally, you can replace the need to &lt;code&gt;break&lt;/code&gt; out of imperative loops by filtering the array elements before iterating them, for example:</source>
          <target state="translated">Normalmente, puede reemplazar la necesidad de &lt;code&gt;break&lt;/code&gt; los bucles imperativos filtrando los elementos de la matriz antes de iterarlos, por ejemplo:</target>
        </trans-unit>
        <trans-unit id="2db2fe69d40d3ac34eb0e35f52345d0c2815a956" translate="yes" xml:space="preserve">
          <source>Note that each of these variations is supported by all browsers, including very very old ones!</source>
          <target state="translated">Tenga en cuenta que cada una de estas variaciones es soportada por todos los navegadores,¡incluyendo los muy muy antiguos!</target>
        </trans-unit>
        <trans-unit id="6c66070e97cce40670c4441191c44bf18838f842" translate="yes" xml:space="preserve">
          <source>Note: Array.prototype.forEach() is not a functional way strictly speaking, as the function it takes as the input parameter is not supposed to return a value, which thus cannot be regarded as a pure function.</source>
          <target state="translated">Nota:Array.prototype.forEach()no es una forma funcional propiamente dicha,ya que la función que toma como parámetro de entrada no se supone que devuelva un valor,por lo que no puede considerarse como una función pura.</target>
        </trans-unit>
        <trans-unit id="48c966f09aa17b29b9fe064c727a02146da0e40e" translate="yes" xml:space="preserve">
          <source>Note: The filter() method creates a new array with all elements that pass the test implemented by the provided function.</source>
          <target state="translated">Nota:El método filter()crea un nuevo arreglo con todos los elementos que pasan la prueba implementada por la función proporcionada.</target>
        </trans-unit>
        <trans-unit id="f1ea81216c8103826ec20066099e66d7123126d6" translate="yes" xml:space="preserve">
          <source>Note: The map() method creates a new array with the results of calling a provided function on every element in the calling array.</source>
          <target state="translated">Nota:El método map()crea una nueva matriz con el resultado de llamar a una función proporcionada en cada elemento de la matriz de llamada.</target>
        </trans-unit>
        <trans-unit id="8bd4bead091ec61c5177a79b36d340f39f2358e7" translate="yes" xml:space="preserve">
          <source>Object loop:</source>
          <target state="translated">El bucle del objeto:</target>
        </trans-unit>
        <trans-unit id="56974c9d7b50d25064ed413fbfe2b4b0f72cd469" translate="yes" xml:space="preserve">
          <source>Of course, some developers have no choice but to use a different approach anyway, because for whatever reason they're targeting a version of JavaScript that doesn't yet support &lt;code&gt;for&lt;/code&gt;...&lt;code&gt;of&lt;/code&gt;.</source>
          <target state="translated">Por supuesto, algunos desarrolladores no tienen m&amp;aacute;s remedio que usar un enfoque diferente de todos modos, porque por cualquier raz&amp;oacute;n est&amp;aacute;n apuntando a una versi&amp;oacute;n de JavaScript que a&amp;uacute;n no es compatible &lt;code&gt;for&lt;/code&gt; ... &lt;code&gt;of&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6f7be3080abd7fd806f8e09c93803d1cd5f9c625" translate="yes" xml:space="preserve">
          <source>Of course, you will need to include an &lt;code&gt;if(condition === true) { break; }&lt;/code&gt;  or an &lt;code&gt;if(condition === true) { return; }&lt;/code&gt; somewhere inside that &lt;code&gt;for&lt;/code&gt;-loop to get it to stop running.</source>
          <target state="translated">Por supuesto, deber&amp;aacute; incluir un &lt;code&gt;if(condition === true) { break; }&lt;/code&gt; } o un &lt;code&gt;if(condition === true) { return; }&lt;/code&gt; } en alg&amp;uacute;n lugar dentro de ese bucle para que deje de funcionar.</target>
        </trans-unit>
        <trans-unit id="f2fe9d42eb2f2a746517eaff1ec734422f1cc4c5" translate="yes" xml:space="preserve">
          <source>One advantage of this approach is that you can choose how to handle sparse arrays; the above code will run the body of the loop the full &lt;code&gt;length&lt;/code&gt; times, with &lt;code&gt;s&lt;/code&gt; set to &lt;code&gt;undefined&lt;/code&gt; for any missing elements, just like &lt;code&gt;for&lt;/code&gt;..&lt;code&gt;of&lt;/code&gt;. If you instead want to handle only the actually-present elements of a sparse array, like &lt;code&gt;.forEach&lt;/code&gt;, you can add a simple &lt;code&gt;in&lt;/code&gt; test on the index:</source>
          <target state="translated">Una ventaja de este enfoque es que puede elegir c&amp;oacute;mo manejar matrices dispersas; el c&amp;oacute;digo anterior ejecutar&amp;aacute; el cuerpo del bucle las veces completas, con &lt;code&gt;s&lt;/code&gt; establecido en &lt;code&gt;undefined&lt;/code&gt; para cualquier elemento faltante, al igual que &lt;code&gt;for&lt;/code&gt; ... &lt;code&gt;of&lt;/code&gt; . Si, en cambio, desea manejar solo los elementos realmente presentes de una matriz dispersa, como &lt;code&gt;.forEach&lt;/code&gt; , puede agregar una prueba simple &lt;code&gt;in&lt;/code&gt; el &amp;iacute;ndice:</target>
        </trans-unit>
        <trans-unit id="53e75cdb29c5599821ebe5805040c469e93077fc" translate="yes" xml:space="preserve">
          <source>One alternative to a &lt;code&gt;for&lt;/code&gt; loop is a &lt;code&gt;while&lt;/code&gt; loop. To loop through an array, you could do this:</source>
          <target state="translated">Una alternativa a un bucle &lt;code&gt;for&lt;/code&gt; es un bucle while. Para recorrer una matriz, puede hacer esto:</target>
        </trans-unit>
        <trans-unit id="4b514468264056e4b37a5ab372a4a7f951732f97" translate="yes" xml:space="preserve">
          <source>One of the cornerstones of functional programming is its special use
  of lists and list operations. And those things are exactly what the
  sound like they are: arrays of things, and the stuff you do to them.
  But the functional mindset treats them a bit differently than you
  might expect.</source>
          <target state="translated">Una de las piedras angulares de la programación funcional es su uso especial de listas y operaciones de listas.Y esas cosas son exactamente como suenan:matrices de cosas,y las cosas que les haces.Pero la mentalidad funcional las trata un poco diferente de lo que se podría esperar.</target>
        </trans-unit>
        <trans-unit id="d921e30036a4651e6d150723a2bd7418fc2d461a" translate="yes" xml:space="preserve">
          <source>Opera, Safari, Firefox and Chrome now all share a set of enhanced Array methods for optimizing many common loops.</source>
          <target state="translated">Opera,Safari,Firefox y Chrome comparten ahora un conjunto de métodos mejorados de Array para optimizar muchos bucles comunes.</target>
        </trans-unit>
        <trans-unit id="ca8a7183a1dbcea77d8631814b5189f7eab564fd" translate="yes" xml:space="preserve">
          <source>Or &lt;code&gt;Array.prototype.map(...)&lt;/code&gt;:</source>
          <target state="translated">O &lt;code&gt;Array.prototype.map(...)&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="005deeedccad31f3cb0e80bfb7abb31fa65ed57a" translate="yes" xml:space="preserve">
          <source>Or better yet, since ECMAScript 2015 also provides block-scoped variables:</source>
          <target state="translated">O mejor aún,ya que ECMAScript 2015 también proporciona variables en bloque:</target>
        </trans-unit>
        <trans-unit id="3b1a4912a2f639abf4e7d8c472de81016ac92f24" translate="yes" xml:space="preserve">
          <source>Or if you really want to get the id and have a really classical &lt;code&gt;for&lt;/code&gt; loop:</source>
          <target state="translated">O si realmente desea obtener la identificaci&amp;oacute;n y tener un bucle &lt;code&gt;for&lt;/code&gt; cl&amp;aacute;sico:</target>
        </trans-unit>
        <trans-unit id="79c19d1215e0ee61dae1d54feb9eb528038ad845" translate="yes" xml:space="preserve">
          <source>Or the classical &lt;code&gt;for&lt;/code&gt; loop</source>
          <target state="translated">O el cl&amp;aacute;sico &lt;code&gt;for&lt;/code&gt; loop</target>
        </trans-unit>
        <trans-unit id="32ccf4631124f74fd174f7f90959d3e3a755fb56" translate="yes" xml:space="preserve">
          <source>Or the jquery or for loop ways previously mentioned.</source>
          <target state="translated">O el jquery o para las formas de bucle mencionadas anteriormente.</target>
        </trans-unit>
        <trans-unit id="6adbea7e0ac9ed37ed0deb0bb73dcd3e28cf819b" translate="yes" xml:space="preserve">
          <source>Or, if you prefer to loop backwards, you do this:</source>
          <target state="translated">O,si prefieres hacer un bucle al revés,haces esto:</target>
        </trans-unit>
        <trans-unit id="ae203c504aa70b4f28a5fcf1b9fe9229ed76072b" translate="yes" xml:space="preserve">
          <source>Read more&amp;gt;&amp;gt; &lt;a href=&quot;https://code.tutsplus.com/tutorials/how-to-use-map-filter-reduce-in-javascript--cms-26209&quot;&gt;here&lt;/a&gt;:</source>
          <target state="translated">Leer m&amp;aacute;s &amp;gt;&amp;gt; &lt;a href=&quot;https://code.tutsplus.com/tutorials/how-to-use-map-filter-reduce-in-javascript--cms-26209&quot;&gt;aqu&amp;iacute;&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="e609697c319d4d3a9d1b473f48e1e2bd07f35c6e" translate="yes" xml:space="preserve">
          <source>Reference:
&lt;a href=&quot;http://www.sitepoint.com/google-closure-how-not-to-write-javascript/&quot;&gt;http://www.sitepoint.com/google-closure-how-not-to-write-javascript/&lt;/a&gt;</source>
          <target state="translated">Reference:
&lt;a href=&quot;http://www.sitepoint.com/google-closure-how-not-to-write-javascript/&quot;&gt;http://www.sitepoint.com/google-closure-how-not-to-write-javascript/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="fd19e6d6cb4b26b0ef86cb95d8b5872a311f4828" translate="yes" xml:space="preserve">
          <source>Results:</source>
          <target state="translated">Results:</target>
        </trans-unit>
        <trans-unit id="335e1e090424cc3a93596596d66cb2973f851a68" translate="yes" xml:space="preserve">
          <source>See this JsFiddle demonstrating that: &lt;a href=&quot;http://jsfiddle.net/prvzk/&quot;&gt;http://jsfiddle.net/prvzk/&lt;/a&gt;</source>
          <target state="translated">Vea este JsFiddle que demuestra que: &lt;a href=&quot;http://jsfiddle.net/prvzk/&quot;&gt;http://jsfiddle.net/prvzk/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a5dda3b31ff4955adf83bd52382ef45bc3ffb11e" translate="yes" xml:space="preserve">
          <source>Short answer: yes. You can do with this:</source>
          <target state="translated">Respuesta corta:sí.Puedes hacer con esto:</target>
        </trans-unit>
        <trans-unit id="548e1e621f5c9ad33722194d1a9b4a9c024a7f02" translate="yes" xml:space="preserve">
          <source>Since my time in college, I've programmed in Java, JavaScript, Pascal, &lt;a href=&quot;https://en.wikipedia.org/wiki/ABAP&quot;&gt;ABAP&lt;/a&gt;, PHP, Progress 4GL, C/C++ and possibly a few other languages I can't think of right now.</source>
          <target state="translated">Desde mi tiempo en la universidad, he programado en Java, JavaScript, Pascal, &lt;a href=&quot;https://en.wikipedia.org/wiki/ABAP&quot;&gt;ABAP&lt;/a&gt; , PHP, Progress 4GL, C / C ++ y posiblemente en algunos otros idiomas que no puedo pensar en este momento.</target>
        </trans-unit>
        <trans-unit id="b22093b0b2c9e3acc2f551744f9b589053dde63a" translate="yes" xml:space="preserve">
          <source>So as others has suggested, this is almost always what you want:</source>
          <target state="translated">Así que como otros han sugerido,esto es casi siempre lo que quieres:</target>
        </trans-unit>
        <trans-unit id="47218d7f66b567477c470edc472c6fd416fbed47" translate="yes" xml:space="preserve">
          <source>Some use cases of looping through an array in &lt;strong&gt;the functional programming way&lt;/strong&gt; in JavaScript:</source>
          <target state="translated">Algunos usan casos de bucle a trav&amp;eacute;s de una matriz en &lt;strong&gt;la forma de programaci&amp;oacute;n funcional&lt;/strong&gt; en JavaScript:</target>
        </trans-unit>
        <trans-unit id="432979a6e491e22397882fad2d457b66217225b1" translate="yes" xml:space="preserve">
          <source>Spread syntax</source>
          <target state="translated">Sintaxis de propagación</target>
        </trans-unit>
        <trans-unit id="df9af125634fddcfa421be704540115f6f1acfd0" translate="yes" xml:space="preserve">
          <source>That be particularly a problem if you use some library that relies heavily on native prototypes augmentation (such as MooTools, for example).</source>
          <target state="translated">Esto es particularmente problemático si se utiliza alguna biblioteca que se basa en gran medida en el aumento de prototipos nativos (como MooTools,por ejemplo).</target>
        </trans-unit>
        <trans-unit id="54be33a5edebe447d19ad8769464cdbc36772505" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.each()&lt;/code&gt; function is not the same as &lt;code&gt;$(selector).each()&lt;/code&gt;, which is
  used to iterate, exclusively, over a jQuery object. The &lt;code&gt;$.each()&lt;/code&gt;
  function can be used to iterate over any collection, whether it is a
  map (JavaScript object) or an array. In the case of an array, the
  callback is passed an array index and a corresponding array value each
  time. (The value can also be accessed through the &lt;code&gt;this&lt;/code&gt; keyword, but
  Javascript will always wrap the &lt;code&gt;this&lt;/code&gt; value as an &lt;code&gt;Object&lt;/code&gt; even if it is
  a simple string or number value.) The method returns its first
  argument, the object that was iterated.</source>
          <target state="translated">La funci&amp;oacute;n &lt;code&gt;$.each()&lt;/code&gt; no es lo mismo que &lt;code&gt;$(selector).each()&lt;/code&gt; , que se usa para iterar, exclusivamente, sobre un objeto jQuery. La funci&amp;oacute;n &lt;code&gt;$.each()&lt;/code&gt; se puede usar para iterar sobre cualquier colecci&amp;oacute;n, ya sea un mapa (objeto JavaScript) o una matriz. En el caso de una matriz, la devoluci&amp;oacute;n de llamada se pasa un &amp;iacute;ndice de matriz y un valor de matriz correspondiente cada vez. (Tambi&amp;eacute;n se puede acceder al valor a trav&amp;eacute;s de la palabra clave &lt;code&gt;this&lt;/code&gt; , pero Javascript siempre envolver&amp;aacute; &lt;code&gt;this&lt;/code&gt; valor como un &lt;code&gt;Object&lt;/code&gt; incluso si es una cadena simple o un valor num&amp;eacute;rico). El m&amp;eacute;todo devuelve su primer argumento, el objeto que fue iterado.</target>
        </trans-unit>
        <trans-unit id="8ea2d26897d80b2a11e7991048566fdf9f71aa64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; and the &lt;code&gt;Array.prototype.map()&lt;/code&gt; methods are the slowest approximations, probably as a consequence of the &lt;strong&gt;function call overhead&lt;/strong&gt;.</source>
          <target state="translated">Los m&amp;eacute;todos &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; y &lt;code&gt;Array.prototype.map()&lt;/code&gt; son las aproximaciones m&amp;aacute;s lentas, probablemente como consecuencia de la &lt;strong&gt;sobrecarga de la llamada a&lt;/strong&gt; la &lt;strong&gt;funci&amp;oacute;n&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="fda48303e825923d88d3e1a5954e2f9a8d32ffe0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for-in&lt;/code&gt; statement as I said before is there to &lt;em&gt;enumerate&lt;/em&gt; object properties, for example:</source>
          <target state="translated">La declaraci&amp;oacute;n &lt;code&gt;for-in&lt;/code&gt; como dije antes est&amp;aacute; ah&amp;iacute; para &lt;em&gt;enumerar las&lt;/em&gt; propiedades del objeto, por ejemplo:</target>
        </trans-unit>
        <trans-unit id="152a30a782355db0c98586aa6609e918220ba9f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for&lt;/code&gt;...&lt;code&gt;in&lt;/code&gt; syntax mentioned by others is for looping over an object's properties; since an Array in JavaScript is just an object with numeric property names (and an automatically-updated &lt;code&gt;length&lt;/code&gt; property), you can theoretically loop over an Array with it.  But the problem is that it doesn't restrict itself to the numeric property values (remember that even methods are actually just properties whose value is a closure), nor is it guaranteed to iterate over those in numeric order. Therefore, the &lt;code&gt;for&lt;/code&gt;...&lt;code&gt;in&lt;/code&gt; syntax should &lt;em&gt;not&lt;/em&gt; be used for looping through Arrays.</source>
          <target state="translated">La sintaxis &lt;code&gt;for&lt;/code&gt; ... mencionada por otros es para recorrer las propiedades de un objeto; Dado que una matriz en JavaScript es solo un objeto con nombres de propiedades num&amp;eacute;ricas (y una propiedad de &lt;code&gt;length&lt;/code&gt; actualizada autom&amp;aacute;ticamente), te&amp;oacute;ricamente puede recorrer una matriz con ella. Pero el problema es que no se limita a los valores de las propiedades num&amp;eacute;ricas (recuerde que incluso los m&amp;eacute;todos son en realidad solo propiedades cuyo valor es un cierre), ni se garantiza que se repitan en orden num&amp;eacute;rico. Por lo tanto, la sintaxis &lt;code&gt;for&lt;/code&gt; ... &lt;code&gt;in&lt;/code&gt; &lt;em&gt;no&lt;/em&gt; debe usarse para recorrer las matrices.</target>
        </trans-unit>
        <trans-unit id="a23f5eb2e341872f8d38000e5c4b5bc2354d1e00" translate="yes" xml:space="preserve">
          <source>The Array.prototype.find() method returns the value of the first element in the array that satisfies the provided testing function.</source>
          <target state="translated">El método Array.prototype.find()devuelve el valor del primer elemento del array que satisface la función de prueba proporcionada.</target>
        </trans-unit>
        <trans-unit id="9449fcbdbeae06e7e3bf08650fe52c6575a5e23e" translate="yes" xml:space="preserve">
          <source>The ES5 specification introduced a lot of beneficial array methods, one of them, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;&lt;code&gt;Array.prototype.forEach&lt;/code&gt;&lt;/a&gt; and it gives us a concise way to iterate over an array:</source>
          <target state="translated">La especificaci&amp;oacute;n ES5 introdujo muchos m&amp;eacute;todos de matriz beneficiosos, uno de ellos, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt; &lt;code&gt;Array.prototype.forEach&lt;/code&gt; &lt;/a&gt; y nos brinda una forma concisa de iterar sobre una matriz:</target>
        </trans-unit>
        <trans-unit id="7a8e9910c4deb87c8767f0cacf582f5a16708e6e" translate="yes" xml:space="preserve">
          <source>The ES6 standard introduces the concept of iterable objects and defines a new construct for traversing data, the &lt;code&gt;for...of&lt;/code&gt; statement.</source>
          <target state="translated">El est&amp;aacute;ndar ES6 introduce el concepto de objetos iterables y define una nueva construcci&amp;oacute;n para atravesar datos, la declaraci&amp;oacute;n &lt;code&gt;for...of&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1460f02e0a3102d7e55e91533998fc51f18928be" translate="yes" xml:space="preserve">
          <source>The above code will console log &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, and &quot;foo!&quot;.</source>
          <target state="translated">El código anterior consolará el registro &quot;a&quot;,&quot;b&quot;,&quot;c&quot; y &quot;foo!&quot;.</target>
        </trans-unit>
        <trans-unit id="20e7432fb4c054b1e1c467a38410fe6525f14155" translate="yes" xml:space="preserve">
          <source>The best way in my opinion is to use the Array.forEach function. If you cannot use that I would suggest to get the polyfill from MDN. To make it available, it is certainly the safest way to iterate over an array in JavaScript.</source>
          <target state="translated">La mejor manera,en mi opinión,es usar la función Array.forEach.Si no puede usarla,le sugiero que obtenga el polifluoruro de MDN.Para hacerlo disponible,es ciertamente la forma más segura de iterar sobre un array en JavaScript.</target>
        </trans-unit>
        <trans-unit id="e56ca3c4eed21e096e43d29badb2c6a655f1f880" translate="yes" xml:space="preserve">
          <source>The code below are popular ones</source>
          <target state="translated">Los siguientes códigos son los más populares</target>
        </trans-unit>
        <trans-unit id="120e5e39e34ca15870d8e9947bbcca2f43399e04" translate="yes" xml:space="preserve">
          <source>The explicit counting loop also means you have access to the index of each value, should you want it. The index is also passed as an extra parameter to the function you pass to &lt;code&gt;forEach&lt;/code&gt;, so you can access it that way as well:</source>
          <target state="translated">El ciclo de conteo expl&amp;iacute;cito tambi&amp;eacute;n significa que tiene acceso al &amp;iacute;ndice de cada valor, si lo desea. El &amp;iacute;ndice tambi&amp;eacute;n se pasa como un par&amp;aacute;metro adicional a la funci&amp;oacute;n que pasa a &lt;code&gt;forEach&lt;/code&gt; , por lo que tambi&amp;eacute;n puede acceder a &amp;eacute;l de esa manera:</target>
        </trans-unit>
        <trans-unit id="0926024be90fc3c5c58f79ca38b539c92713c68c" translate="yes" xml:space="preserve">
          <source>The final option, which works in &lt;em&gt;all&lt;/em&gt; versions of JavaScript, is &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-for-statement&quot;&gt;an explicit counting loop&lt;/a&gt;. You simply count from 0 up to one less than the length and use the counter as an index. The basic loop looks like this:</source>
          <target state="translated">La &amp;uacute;ltima opci&amp;oacute;n, que funciona en &lt;em&gt;todas las&lt;/em&gt; versiones de JavaScript, es &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-for-statement&quot;&gt;un ciclo de conteo expl&amp;iacute;cito&lt;/a&gt; . Simplemente cuente desde 0 hasta uno menos que la longitud y use el contador como &amp;iacute;ndice. El bucle b&amp;aacute;sico se ve as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="60de89b60699f6e1c50c9980fe4030ebfed381c1" translate="yes" xml:space="preserve">
          <source>The general syntax is:</source>
          <target state="translated">La sintaxis general es:</target>
        </trans-unit>
        <trans-unit id="17c0c8958009504035837eb96e313e38d6db28cb" translate="yes" xml:space="preserve">
          <source>The item to access is automatically defined within the loop
body under the name you pick.</source>
          <target state="translated">El elemento a acceder se define automáticamente dentro del cuerpo del bucle bajo el nombre que elijas.</target>
        </trans-unit>
        <trans-unit id="cc1a1ebcb7c44366d847d9e53142c469f5d9c912" translate="yes" xml:space="preserve">
          <source>The most elegant and fast way</source>
          <target state="translated">La manera más elegante y rápida</target>
        </trans-unit>
        <trans-unit id="92bc9c3030690e8975c93e43b9783b47f78cf220" translate="yes" xml:space="preserve">
          <source>The optimized approach is to cache the length of array and using single var pattern initializing all variables with single var keyword.</source>
          <target state="translated">El enfoque optimizado consiste en almacenar en caché la longitud de la matriz y utilizar un patrón de varilla única inicializando todas las variables con una sola palabra clave var.</target>
        </trans-unit>
        <trans-unit id="2c0c58f394bd4d6864165f51bcf38373ab49434a" translate="yes" xml:space="preserve">
          <source>The order of iteration is not guaranteed; the array indexes may not be visited in numeric order.</source>
          <target state="translated">El orden de iteración no está garantizado;los índices de la matriz no pueden ser visitados en orden numérico.</target>
        </trans-unit>
        <trans-unit id="012e8483413b382c220340edf31b6450777efdd6" translate="yes" xml:space="preserve">
          <source>The reason this works is that the array specification mandates that when you read an item from an index &amp;gt;= the array's length, it will return undefined. When you write to such a location it will actually update the length.</source>
          <target state="translated">La raz&amp;oacute;n por la que esto funciona es que la especificaci&amp;oacute;n de la matriz exige que cuando lea un elemento de un &amp;iacute;ndice&amp;gt; = la longitud de la matriz, regrese indefinido. Cuando escribe en una ubicaci&amp;oacute;n de este tipo, se actualizar&amp;aacute; la longitud.</target>
        </trans-unit>
        <trans-unit id="ef3a7c0b59ad4734159dbd0581cc34ca59a58ff9" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;array.map&lt;/code&gt; is another array, so you can use it like this:</source>
          <target state="translated">El valor de retorno de &lt;code&gt;array.map&lt;/code&gt; es otra matriz, por lo que puede usarlo as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="b97bcfaafee942ef6523ce737efbb4b975437cc7" translate="yes" xml:space="preserve">
          <source>The second point is that it can give you a lot of problems, for example, if you extend the &lt;code&gt;Array.prototype&lt;/code&gt; object to include a method there, that property will also be enumerated.</source>
          <target state="translated">El segundo punto es que puede darle muchos problemas, por ejemplo, si extiende el objeto &lt;code&gt;Array.prototype&lt;/code&gt; para incluir un m&amp;eacute;todo all&amp;iacute;, esa propiedad tambi&amp;eacute;n se enumerar&amp;aacute;.</target>
        </trans-unit>
        <trans-unit id="2f3b6cf1d6f0a6bbd74a70887a856a51c87bff3f" translate="yes" xml:space="preserve">
          <source>The traditional &lt;code&gt;for()&lt;/code&gt; iterator, is by far the fastest method, especially when used with the &lt;strong&gt;array length cached&lt;/strong&gt;.</source>
          <target state="translated">El iterador tradicional &lt;code&gt;for()&lt;/code&gt; es, con mucho, el m&amp;eacute;todo m&amp;aacute;s r&amp;aacute;pido, especialmente cuando se usa con la &lt;strong&gt;longitud de&lt;/strong&gt; la &lt;strong&gt;matriz en cach&amp;eacute;&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="50fbe4e2839ad6f44353c11db5662956a1245813" translate="yes" xml:space="preserve">
          <source>The traditional way to loop through an array, is this:</source>
          <target state="translated">La forma tradicional de hacer un bucle a través de una matriz,es esta:</target>
        </trans-unit>
        <trans-unit id="bb52b2247ddc21d02d48c2330829d7a1e4b3b066" translate="yes" xml:space="preserve">
          <source>There are a couple of ways to do it in JavaScript. The first two examples are JavaScript samples. The third one makes use of a JavaScript library, that is, jQuery making use of the &lt;code&gt;.each()&lt;/code&gt; function.</source>
          <target state="translated">Hay un par de formas de hacerlo en JavaScript. Los primeros dos ejemplos son ejemplos de JavaScript. El tercero hace uso de una biblioteca de JavaScript, es decir, jQuery hace uso de la funci&amp;oacute;n &lt;code&gt;.each()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="821b43d0758dd02be5cc2c03df6009934ba6b2d6" translate="yes" xml:space="preserve">
          <source>There are even some times when you ought to iterate in reverse, such as when iterating over a &lt;a href=&quot;https://developer.mozilla.org/En/DOM/NodeList#A_.22live.22_collection&quot;&gt;live NodeList&lt;/a&gt; where you plan on removing items from the DOM during iteration.</source>
          <target state="translated">Incluso hay algunas ocasiones en las que debe iterar en reversa, como cuando itera sobre una &lt;a href=&quot;https://developer.mozilla.org/En/DOM/NodeList#A_.22live.22_collection&quot;&gt;NodeList en vivo&lt;/a&gt; donde planea eliminar elementos del DOM durante la iteraci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="42b051646813473214bb6d4ec6b04940890f97b1" translate="yes" xml:space="preserve">
          <source>There are various way to loop through array in JavaScript.</source>
          <target state="translated">Hay varias maneras de hacer un bucle a través de la matriz en JavaScript.</target>
        </trans-unit>
        <trans-unit id="9a2a3b9ff7b68f4ca1407027573f3d1e36d2a264" translate="yes" xml:space="preserve">
          <source>There are, however, many variations possible, like for example this one:</source>
          <target state="translated">Sin embargo,hay muchas variaciones posibles,como por ejemplo ésta:</target>
        </trans-unit>
        <trans-unit id="3b17947ce13f291d24a94bf37cd447dbd1a3770b" translate="yes" xml:space="preserve">
          <source>There is a way to do it where you have very little implicit scope in your loop and do away with extra variables.</source>
          <target state="translated">Hay una forma de hacerlo donde tienes muy poco alcance implícito en tu bucle y eliminar las variables extra.</target>
        </trans-unit>
        <trans-unit id="9a66ce7f5fe432814094ad577cba1eca94e88388" translate="yes" xml:space="preserve">
          <source>There's a method to iterate over only own object properties, not including prototype's ones:</source>
          <target state="translated">Hay un método para iterar sólo sobre las propiedades de los objetos propios,sin incluir las de los prototipos:</target>
        </trans-unit>
        <trans-unit id="3d2f0aa297c7272c064273bd7ad8226e3a64443e" translate="yes" xml:space="preserve">
          <source>These are the main ways to do JavaScript loops, but there are a few more ways to do that.</source>
          <target state="translated">Estas son las principales formas de hacer bucles de JavaScript,pero hay algunas formas más de hacerlo.</target>
        </trans-unit>
        <trans-unit id="a685720d851d92a20d19c2df920471064cf168c9" translate="yes" xml:space="preserve">
          <source>These are the solutions:</source>
          <target state="translated">Estas son las soluciones:</target>
        </trans-unit>
        <trans-unit id="71b65affe9fa82e82de8abd8e0d75c26d06af598" translate="yes" xml:space="preserve">
          <source>These methods all take a function for their first argument and have an optional second argument, which is an object whose scope you want to impose on the array members as they loop through the function.</source>
          <target state="translated">Todos estos métodos toman una función para su primer argumento y tienen un segundo argumento opcional,que es un objeto cuyo alcance se quiere imponer a los miembros de la matriz a medida que pasan en bucle por la función.</target>
        </trans-unit>
        <trans-unit id="80ad30aab31c43f396831f915032145053204ac5" translate="yes" xml:space="preserve">
          <source>These three components are separated from each other by a &lt;code&gt;;&lt;/code&gt; symbol. Content for each of these three components is optional, which means that the following is the most minimal &lt;code&gt;for&lt;/code&gt; loop possible:</source>
          <target state="translated">Estos tres componentes est&amp;aacute;n separados entre s&amp;iacute; por a &lt;code&gt;;&lt;/code&gt; s&amp;iacute;mbolo. El contenido para cada uno de estos tres componentes es opcional, lo que significa que lo siguiente es el m&amp;aacute;s m&amp;iacute;nimo posible &lt;code&gt;for&lt;/code&gt; bucle:</target>
        </trans-unit>
        <trans-unit id="f566944d88f81152109f1bbf9e52d01bb54137da" translate="yes" xml:space="preserve">
          <source>This article will take a close look at what I like to call the &quot;big
  three&quot; list operations: map, filter, and reduce. Wrapping your head
  around these three functions is an important step towards being able
  to write clean functional code, and opens the doors to the vastly
  powerful techniques of functional and reactive programming.</source>
          <target state="translated">En este artículo se examinarán de cerca lo que me gusta llamar las operaciones de las &quot;tres grandes&quot; listas:mapear,filtrar y reducir.El hecho de que te concentres en estas tres funciones es un paso importante para poder escribir un código funcional limpio,y abre las puertas a las poderosas técnicas de programación funcional y reactiva.</target>
        </trans-unit>
        <trans-unit id="6a07602d0b647fe22e2fcaac7f41bf7fd5c06746" translate="yes" xml:space="preserve">
          <source>This ensures that anything you need in the scope of processing the array stays within that scope, and that you are only processing the values of the array, not the object properties and other members, which is what &lt;code&gt;for ..&lt;/code&gt; in does.</source>
          <target state="translated">Esto garantiza que todo lo que necesite en el &amp;aacute;mbito de procesamiento de la matriz permanezca dentro de ese &amp;aacute;mbito, y que solo est&amp;eacute; procesando los valores de la matriz, no las propiedades del objeto y otros miembros, que es lo que &lt;code&gt;for ..&lt;/code&gt; en.</target>
        </trans-unit>
        <trans-unit id="858c7fa76e864ce71e5b610d49e037963d073b9e" translate="yes" xml:space="preserve">
          <source>This has the benefit of caching the length (similar to &lt;code&gt;for (var i=0, len=myArray.length; i&amp;lt;len; ++i)&lt;/code&gt; and unlike &lt;code&gt;for (var i=0; i&amp;lt;myArray.length; ++i)&lt;/code&gt;) while being fewer characters to type.</source>
          <target state="translated">Esto tiene el beneficio de almacenar en cach&amp;eacute; la longitud (similar a &lt;code&gt;for (var i=0, len=myArray.length; i&amp;lt;len; ++i)&lt;/code&gt; y a diferencia de &lt;code&gt;for (var i=0; i&amp;lt;myArray.length; ++i)&lt;/code&gt; ) mientras hay menos caracteres para escribir.</target>
        </trans-unit>
        <trans-unit id="190958324e44a9b320dec6a0655dbfd941bed1b5" translate="yes" xml:space="preserve">
          <source>This is a good article if you like to learn more about the asynchronous functions over arrays in JavaScript.</source>
          <target state="translated">Este es un buen artículo si quieres aprender más sobre las funciones asincrónicas sobre arreglos en JavaScript.</target>
        </trans-unit>
        <trans-unit id="147518e25e35d186bb4ca7645b5e7a356fd8dd30" translate="yes" xml:space="preserve">
          <source>This new syntax is the most elegant way to iterate an array in javascript (as long you don't need the iteration index), but it is not yet widely supported by the browsers.</source>
          <target state="translated">Esta nueva sintaxis es la forma más elegante de iterar una matriz en javascript (siempre y cuando no se necesite el índice de iteración),pero aún no está ampliamente soportada por los navegadores.</target>
        </trans-unit>
        <trans-unit id="c7b121c2303f93e6b2a2d7db925a526f50850ae3" translate="yes" xml:space="preserve">
          <source>This only works for arrays that are &lt;em&gt;not&lt;/em&gt; sparse. Meaning that there actually is a value at each index in the array. However, I found that in practice I hardly ever use sparse arrays in JavaScript... In such cases it's usually a lot easier to use an object as a map/hashtable. If you do have a sparse array, and want to loop over 0 .. length-1, you need the for (var i=0; i&amp;lt;someArray.length; ++i) construct, but you still need an &lt;code&gt;if&lt;/code&gt; inside the loop to check whether the element at the current index is actually defined.</source>
          <target state="translated">Esto solo funciona para matrices que &lt;em&gt;no&lt;/em&gt; son dispersas. Lo que significa que en realidad hay un valor en cada &amp;iacute;ndice de la matriz. Sin embargo, descubr&amp;iacute; que en la pr&amp;aacute;ctica casi nunca uso matrices dispersas en JavaScript ... En tales casos, generalmente es mucho m&amp;aacute;s f&amp;aacute;cil usar un objeto como mapa / tabla hash. Si tiene una matriz dispersa y desea recorrer 0 .. longitud-1, necesita la construcci&amp;oacute;n for (var i = 0; i &amp;lt;someArray.length; ++ i), pero a&amp;uacute;n necesita un &lt;code&gt;if&lt;/code&gt; dentro de bucle para verificar si el elemento en el &amp;iacute;ndice actual est&amp;aacute; realmente definido.</target>
        </trans-unit>
        <trans-unit id="0d1a92190b4273c4dedb4a6ff5c33b8b8e248e48" translate="yes" xml:space="preserve">
          <source>This should be used with care, however, as it doesn't behave the same as a traditional &lt;code&gt;for&lt;/code&gt; loop in all cases, and there are potential side-effects that need to be considered. See &lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-such-a-bad-idea&quot;&gt;Why is using &quot;for...in&quot; with array iteration a bad idea?&lt;/a&gt;&lt;/strong&gt; for more details.</source>
          <target state="translated">Sin embargo, esto debe usarse con cuidado, ya que no se comporta de la misma manera que un bucle &lt;code&gt;for&lt;/code&gt; tradicional en todos los casos, y hay posibles efectos secundarios que deben considerarse. Vea &lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-such-a-bad-idea&quot;&gt;&amp;iquest;Por qu&amp;eacute; usar &quot;for ... in&quot; con iteraci&amp;oacute;n de matriz es una mala idea?&lt;/a&gt;&lt;/strong&gt; para m&amp;aacute;s detalles.</target>
        </trans-unit>
        <trans-unit id="472b9cc884c8efe330967ffcc40284ca272d82d6" translate="yes" xml:space="preserve">
          <source>This statement works for any kind of iterable object and also for generators (any object that has a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator&quot;&gt;&lt;code&gt;[Symbol.iterator]&lt;/code&gt;&lt;/a&gt; property).</source>
          <target state="translated">Esta declaraci&amp;oacute;n funciona para cualquier tipo de objeto iterable y tambi&amp;eacute;n para generadores (cualquier objeto que tenga una propiedad &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator&quot;&gt; &lt;code&gt;[Symbol.iterator]&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="ac9bb5e0ca9aef826594b177b1c57b42d63efd12" translate="yes" xml:space="preserve">
          <source>Too verbose</source>
          <target state="translated">Demasiado verboso</target>
        </trans-unit>
        <trans-unit id="0e44efea277e112b800b020b7f1ce9f2e1b5bdd7" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;for&lt;/code&gt;...&lt;code&gt;of&lt;/code&gt;, &lt;code&gt;.forEach&lt;/code&gt; only calls the function for elements that are actually present in the array. If passed our hypothetical array with three elements and a length of 248, it will only call the function three times, not 248 times. It also distinguishes between missing elements and elements that are actually set to &lt;code&gt;undefined&lt;/code&gt;; for the latter, it will still call the function, passing &lt;code&gt;undefined&lt;/code&gt; as the argument. If this is how you want to handle sparse arrays, &lt;code&gt;.forEach&lt;/code&gt; may be the way to go even if your interpreter supports &lt;code&gt;for&lt;/code&gt;...&lt;code&gt;of&lt;/code&gt;.</source>
          <target state="translated">A diferencia &lt;code&gt;for&lt;/code&gt; ... &lt;code&gt;of&lt;/code&gt; , &lt;code&gt;.forEach&lt;/code&gt; solo llama a la funci&amp;oacute;n para elementos que est&amp;aacute;n realmente presentes en la matriz. Si se pasa nuestra matriz hipot&amp;eacute;tica con tres elementos y una longitud de 248, solo llamar&amp;aacute; a la funci&amp;oacute;n tres veces, no 248 veces. Tambi&amp;eacute;n distingue entre elementos faltantes y elementos que en realidad est&amp;aacute;n configurados como &lt;code&gt;undefined&lt;/code&gt; ; para este &amp;uacute;ltimo, seguir&amp;aacute; llamando a la funci&amp;oacute;n, pasando &lt;code&gt;undefined&lt;/code&gt; como argumento. Si as&amp;iacute; es como desea manejar matrices dispersas, &lt;code&gt;.forEach&lt;/code&gt; puede ser el camino a seguir, incluso si su int&amp;eacute;rprete admite ... &lt;code&gt;of&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fb5ad6ba3a246c28f628695455346d1d1358b358" translate="yes" xml:space="preserve">
          <source>Use the while loop...</source>
          <target state="translated">Usa el bucle while...</target>
        </trans-unit>
        <trans-unit id="acf02fdaa5e1a7884f09bb5330b18f85aa765a24" translate="yes" xml:space="preserve">
          <source>Useful to iterate serially asynchronous values.</source>
          <target state="translated">Útil para iterar valores asíncronos en serie.</target>
        </trans-unit>
        <trans-unit id="11f8f11632acf347b589a3d67d8c21511e0c9bf6" translate="yes" xml:space="preserve">
          <source>Using a regular C-style &lt;code&gt;for&lt;/code&gt; loop works in most cases. It is just important to remember that everything within the loop shares its scope with the rest of your program, the { } does not create a new scope.</source>
          <target state="translated">El uso de un estilo C regular &lt;code&gt;for&lt;/code&gt; loop funciona en la mayor&amp;iacute;a de los casos. Es importante recordar que todo lo que est&amp;aacute; dentro del ciclo comparte su alcance con el resto de su programa, el {} no crea un nuevo alcance.</target>
        </trans-unit>
        <trans-unit id="6e8369a5a266e94f593d9eeea846e02aa77149e0" translate="yes" xml:space="preserve">
          <source>Using a traditional &lt;code&gt;for&lt;/code&gt; loop to loop through an array</source>
          <target state="translated">Usar un bucle &lt;code&gt;for&lt;/code&gt; tradicional para recorrer una matriz</target>
        </trans-unit>
        <trans-unit id="85df58774c5491ec2a1dff116625289a4b51fe96" translate="yes" xml:space="preserve">
          <source>Usually, though, the initialization is used to declare an index, the condition is used to compare that index with a minimum or maximum value, and the afterthought is used to increment the index:</source>
          <target state="translated">Sin embargo,por lo general,la inicialización se utiliza para declarar un índice,la condición se utiliza para comparar ese índice con un valor mínimo o máximo,y el pensamiento posterior se utiliza para incrementar el índice:</target>
        </trans-unit>
        <trans-unit id="38a3899f8605deb1a119719c4e634478608e868c" translate="yes" xml:space="preserve">
          <source>Very short and succinct.</source>
          <target state="translated">Muy corto y sucinto.</target>
        </trans-unit>
        <trans-unit id="c2806e463dca64608139609ed71eec7bf1af0fcd" translate="yes" xml:space="preserve">
          <source>What I like about this loop is:</source>
          <target state="translated">Lo que me gusta de este bucle es:</target>
        </trans-unit>
        <trans-unit id="16ce81c4539b95557096d4ee3982368acb60bb76" translate="yes" xml:space="preserve">
          <source>Whichever works best is largely a matter of both personal taste and the specific use case you're implementing.</source>
          <target state="translated">Lo que funcione mejor es en gran medida una cuestión tanto de gusto personal como del caso de uso específico que esté implementando.</target>
        </trans-unit>
        <trans-unit id="3eaca1cb6c3a5c7b0653cdc5c205c5570f3bcd75" translate="yes" xml:space="preserve">
          <source>While they all have their own linguistic idiosyncrasies, each of these languages share many of the same basic concepts. Such concepts include procedures / functions, &lt;code&gt;IF&lt;/code&gt;-statements, &lt;code&gt;FOR&lt;/code&gt;-loops, and &lt;code&gt;WHILE&lt;/code&gt;-loops.</source>
          <target state="translated">Si bien todos tienen sus propias idiosincrasias ling&amp;uuml;&amp;iacute;sticas, cada uno de estos idiomas comparte muchos de los mismos conceptos b&amp;aacute;sicos. Dichos conceptos incluyen procedimientos / funciones, declaraciones &lt;code&gt;IF&lt;/code&gt; , bucles &lt;code&gt;FOR&lt;/code&gt; y bucles &lt;code&gt;WHILE&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8244adf2c17ba7cc3bdea8eada041642ab1c86cf" translate="yes" xml:space="preserve">
          <source>Works on every environment</source>
          <target state="translated">Funciona en todos los entornos</target>
        </trans-unit>
        <trans-unit id="a1b7a89f3b73a87140f7d4b8e01a03ed839c9203" translate="yes" xml:space="preserve">
          <source>Yes, assuming your implementation includes the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-for-in-and-for-of-statements&quot;&gt;&lt;code&gt;for&lt;/code&gt;...&lt;code&gt;of&lt;/code&gt;&lt;/a&gt; feature introduced in &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/&quot;&gt;ECMAScript 2015&lt;/a&gt; (the &quot;Harmony&quot; release)... which is a pretty safe assumption these days.</source>
          <target state="translated">S&amp;iacute;, suponiendo que su implementaci&amp;oacute;n incluya el &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-for-in-and-for-of-statements&quot;&gt;... &lt;code&gt;of&lt;/code&gt; &lt;/a&gt; caracter&amp;iacute;stica introducida en &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/&quot;&gt;ECMAScript 2015&lt;/a&gt; (la versi&amp;oacute;n &quot;Harmony&quot;) ... lo cual es una suposici&amp;oacute;n bastante segura en estos d&amp;iacute;as.</target>
        </trans-unit>
        <trans-unit id="65c39770604a63372cf38469a45e9aad0b608cfa" translate="yes" xml:space="preserve">
          <source>You can either use &lt;code&gt;Array.prototype.forEach(...)&lt;/code&gt;:</source>
          <target state="translated">Puede usar &lt;code&gt;Array.prototype.forEach(...)&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="55d53dbec6820aa52a0e39445d08dc7a9bac4eb5" translate="yes" xml:space="preserve">
          <source>You can loop over it without ever accessing the length property:</source>
          <target state="translated">Puedes hacer un bucle sobre él sin tener acceso a la propiedad de longitud:</target>
        </trans-unit>
        <trans-unit id="b3f6f0955f94bb72fe3f0ae7cac303e447b46c4f" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; flow control statements</source>
          <target state="translated">Puede usar las declaraciones de control de flujo de &lt;code&gt;break&lt;/code&gt; y &lt;code&gt;continue&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="667729f11316fb106cabbaf8f7679345003c82dc" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;map&lt;/code&gt;, which is a functional programming technique that's also available in other languages like &lt;a href=&quot;http://en.wikipedia.org/wiki/Python_%28programming_language%29&quot;&gt;Python&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Haskell_%28programming_language%29&quot;&gt;Haskell&lt;/a&gt;.</source>
          <target state="translated">Puede usar &lt;code&gt;map&lt;/code&gt; , que es una t&amp;eacute;cnica de programaci&amp;oacute;n funcional que tambi&amp;eacute;n est&amp;aacute; disponible en otros lenguajes como &lt;a href=&quot;http://en.wikipedia.org/wiki/Python_%28programming_language%29&quot;&gt;Python&lt;/a&gt; y &lt;a href=&quot;http://en.wikipedia.org/wiki/Haskell_%28programming_language%29&quot;&gt;Haskell&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7a4b18372164e1ad74d80e376ae54cd4abd6e783" translate="yes" xml:space="preserve">
          <source>You don't have to write the function inline. It could be a separate function.</source>
          <target state="translated">No tienes que escribir la función en línea.Podría ser una función separada.</target>
        </trans-unit>
        <trans-unit id="04e20c98a9f172e8338b0b1b84b15442bffed6db" translate="yes" xml:space="preserve">
          <source>You have several options:</source>
          <target state="translated">Tienes varias opciones:</target>
        </trans-unit>
        <trans-unit id="c18eca76acfa486b5f4dcface2dd20167b170206" translate="yes" xml:space="preserve">
          <source>You may not need all of them, but they can be very useful, or would be if every browser supported them.</source>
          <target state="translated">Puede que no los necesites todos,pero pueden ser muy útiles,o lo serían si todos los navegadores los soportaran.</target>
        </trans-unit>
        <trans-unit id="d0197dfcf1833d20eadc2e44df6cf7b17edfb6e7" translate="yes" xml:space="preserve">
          <source>You may see the length caching done in the loop initialization clause, like this:</source>
          <target state="translated">Puedes ver la longitud del cacheo hecho en la cláusula de inicialización del bucle,así:</target>
        </trans-unit>
        <trans-unit id="8b04966caa69c26f8b04bd68edaf4ae602d48951" translate="yes" xml:space="preserve">
          <source>but it still will iterate over custom-defined properties.</source>
          <target state="translated">pero aún así iterará sobre las propiedades definidas por el cliente.</target>
        </trans-unit>
        <trans-unit id="0f1caa03a8a9833b96860b4c667bbe37793f5874" translate="yes" xml:space="preserve">
          <source>for (var s of myStringArray) {</source>
          <target state="translated">para (var s de myStringArray){</target>
        </trans-unit>
        <trans-unit id="8c120f4720ec425aef81f42a20fa2bc703fd8e57" translate="yes" xml:space="preserve">
          <source>logs: 'one','two','three'</source>
          <target state="translated">troncos:&quot;uno&quot;,&quot;dos&quot;,&quot;tres</target>
        </trans-unit>
        <trans-unit id="3601240b074c10fa007af1eff93ad808fd4ff1ab" translate="yes" xml:space="preserve">
          <source>logs: 'three','two','one'</source>
          <target state="translated">troncos:&quot;tres&quot;,&quot;dos&quot;,&quot;uno</target>
        </trans-unit>
        <trans-unit id="cf8d12fbc60f1b20dd0631d9a744f6b45587b6be" translate="yes" xml:space="preserve">
          <source>or better and cleaner to use while loop:</source>
          <target state="translated">o mejor y más limpio para usar mientras se hace un bucle:</target>
        </trans-unit>
        <trans-unit id="50b545a5758f3ce6da5a104b5dfa5a80cee70094" translate="yes" xml:space="preserve">
          <source>which would be sort-of equivalent to:</source>
          <target state="translated">que sería más o menos equivalente a:</target>
        </trans-unit>
        <trans-unit id="afb20d799b4203b1e14e9210429f20b6ff061fc3" translate="yes" xml:space="preserve">
          <source>will output &quot;11&quot; - which may or may not be what you want.</source>
          <target state="translated">dará como resultado el &quot;11&quot;,que puede o no ser lo que usted quiere.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
