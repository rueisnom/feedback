<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/3076414">
    <body>
      <group id="3076414">
        <trans-unit id="b7833e2a423077d8f5e6c590b2a45f83ae467e2f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.w3.org/TR/access-control/&quot;&gt;Cross-Origin Resource Sharing&lt;/a&gt; (CORS) is a W3C Working Draft that defines how the browser and server must communicate when accessing sources across origins. The basic idea behind CORS is to use custom HTTP headers to allow both the browser and the server to know enough about each other to determine if the request or response should succeed or fail.</source>
          <target state="translated">&lt;a href=&quot;http://www.w3.org/TR/access-control/&quot;&gt;クロスオリジンリソースシェアリング&lt;/a&gt; （CORS）は、W3Cワーキングドラフトであり、 オリジン全体でソースにアクセスするときにブラウザとサーバーが通信する方法を定義しています。 CORSの背後にある基本的な考え方は、カスタムHTTPヘッダーを使用して、ブラウザーとサーバーの両方が互いについて十分に認識し、要求または応答が成功するか失敗するかを判断できるようにすることです。</target>
        </trans-unit>
        <trans-unit id="6c1949e65910c6d04b0c0a03a3c9483687d13f8f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/ripper234/Whatever-Origin&quot;&gt;Code on github&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/ripper234/Whatever-Origin&quot;&gt;githubのコード&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee0a89efee82cede3b7d0ed3c2e7c50b576c1f04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;window.postMessage&lt;/code&gt;, when called, causes a &lt;code&gt;MessageEvent&lt;/code&gt; to be dispatched at the target window when any pending script that must be executed completes (e.g. remaining event handlers if &lt;code&gt;window.postMessage&lt;/code&gt; is called from an event handler, previously-set pending timeouts, etc.). The &lt;code&gt;MessageEvent&lt;/code&gt; has the type message, a &lt;code&gt;data&lt;/code&gt; property which is set to the string value of the first argument provided to &lt;code&gt;window.postMessage&lt;/code&gt;, an &lt;code&gt;origin&lt;/code&gt; property corresponding to the origin of the main document in the window calling &lt;code&gt;window.postMessage&lt;/code&gt; at the time &lt;code&gt;window.postMessage&lt;/code&gt; was called, and a &lt;code&gt;source&lt;/code&gt; property which is the window from which &lt;code&gt;window.postMessage&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;window.postMessage&lt;/code&gt; が呼び出されると、実行する必要のある保留中のスクリプトが完了すると、ターゲットウィンドウで &lt;code&gt;MessageEvent&lt;/code&gt; が送出されます（たとえば、イベントハンドラーから &lt;code&gt;window.postMessage&lt;/code&gt; が呼び出された場合の残りのイベントハンドラー、以前に設定された保留中のタイムアウトなど）。 ）。 &lt;code&gt;MessageEvent&lt;/code&gt; にはメッセージタイプ、 &lt;code&gt;window.postMessage&lt;/code&gt; に提供される最初の引数の文字列値に設定される &lt;code&gt;data&lt;/code&gt; プロパティ、タイム &lt;code&gt;window.postMessage&lt;/code&gt; &lt;code&gt;window.postMessage&lt;/code&gt; を呼び出すウィンドウのメインドキュメントの起点に対応する &lt;code&gt;origin&lt;/code&gt; プロパティがあります。 postMessageが呼び出され、 window.postMessageが呼び出されたウィンドウである &lt;code&gt;source&lt;/code&gt; プロパティ。</target>
        </trans-unit>
        <trans-unit id="a7ad2378548934906f4054b49078fa539f244659" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Reverse Proxy method&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;リバースプロキシ方式&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="852da2d726c809645e72eb48229d39be07b8fae6" translate="yes" xml:space="preserve">
          <source>After that statement executes, the page would pass the origin check with &lt;code&gt;http://company.com/dir/page.html&lt;/code&gt;. However, by the same reasoning, company.com could not set &lt;code&gt;document.domain&lt;/code&gt;  to &lt;code&gt;othercompany.com&lt;/code&gt;.</source>
          <target state="translated">そのステートメントが実行された後、ページは &lt;code&gt;http://company.com/dir/page.html&lt;/code&gt; でオリジンチェックに合格します 。 ただし、同じ理由で、company.comは &lt;code&gt;document.domain&lt;/code&gt; を &lt;code&gt;othercompany.com&lt;/code&gt; に設定できませんでした。</target>
        </trans-unit>
        <trans-unit id="f2aa3cd77cfc29f75dd036615866f4750568d3ef" translate="yes" xml:space="preserve">
          <source>And a &lt;code&gt;receiveMessage&lt;/code&gt; function must be declared:</source>
          <target state="translated">そして &lt;code&gt;receiveMessage&lt;/code&gt; 関数を宣言する必要があります：</target>
        </trans-unit>
        <trans-unit id="a140c5ee37bfe6b024477d0131a34026e855fe06" translate="yes" xml:space="preserve">
          <source>Any window may access this method on any other window, at any time, regardless of the location of the document in the window, to send it a message. Consequently, any event listener used to receive messages must  first check the identity of the sender of the message, using the origin  and possibly source properties. This cannot be understated: &lt;strong&gt;Failure to check the &lt;code&gt;origin&lt;/code&gt; and possibly &lt;code&gt;source&lt;/code&gt; properties enables cross-site scripting attacks.&lt;/strong&gt;</source>
          <target state="translated">ウィンドウは、ウィンドウ内のドキュメントの場所に関係なく、いつでも他のウィンドウのこのメソッドにアクセスしてメッセージを送信できます。 したがって、メッセージの受信に使用されるイベントリスナーは、最初に、起点とソースのプロパティを使用して、メッセージの送信者のIDを確認する必要があります。 これは控えめに&lt;strong&gt;言って&lt;/strong&gt;も過言ではありません。 &lt;strong&gt; &lt;code&gt;origin&lt;/code&gt; と &lt;code&gt;source&lt;/code&gt; プロパティを確認&lt;/strong&gt;できないと&lt;strong&gt;、クロスサイトスクリプティング攻撃が可能になります。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="10a4c9065bf6e4b334fe844fd761eb45017a9a23" translate="yes" xml:space="preserve">
          <source>AnyOrigin didn't function well with some https sites, so I just wrote an open source alternative called &lt;a href=&quot;http://whateverorigin.org&quot;&gt;whateverorigin.org&lt;/a&gt; that seems to work well with https.</source>
          <target state="translated">AnyOriginは一部のhttpsサイトでは適切に機能しなかったため、httpsで適切に機能するように見える&lt;a href=&quot;http://whateverorigin.org&quot;&gt;whateverorigin.org&lt;/a&gt;というオープンソースの代替を作成しました。</target>
        </trans-unit>
        <trans-unit id="5cfb29d97319e1c11297db533a66383b0cf24be8" translate="yes" xml:space="preserve">
          <source>Basically, you add</source>
          <target state="translated">基本的には追加します。</target>
        </trans-unit>
        <trans-unit id="c925158355cef0b501627fc58bee773199306382" translate="yes" xml:space="preserve">
          <source>For a simple request, one that uses either &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;POST&lt;/code&gt; with no custom headers and whose body is &lt;code&gt;text/plain&lt;/code&gt;, the request is sent with an extra header called &lt;code&gt;Origin&lt;/code&gt;. The Origin  header contains the origin (protocol, domain name, and port) of the requesting page so that the server can easily determine whether or not it should serve a response. An example &lt;code&gt;Origin&lt;/code&gt; header might look like this:</source>
          <target state="translated">単純な要求の場合、カスタムヘッダーなしで &lt;code&gt;GET&lt;/code&gt; または &lt;code&gt;POST&lt;/code&gt; を使用し、本文が &lt;code&gt;text/plain&lt;/code&gt; である要求の場合、要求は &lt;code&gt;Origin&lt;/code&gt; という追加のヘッダーと共に送信されます。 Originヘッダーには、要求元ページの起点（プロトコル、ドメイン名、およびポート）が含まれているため、サーバーは応答を提供する必要があるかどうかを簡単に判断できます。 &lt;code&gt;Origin&lt;/code&gt; ヘッダーの例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="3b1e301acde443e6a3529e0987def0e7f264ce09" translate="yes" xml:space="preserve">
          <source>For postMessage solution take a look to:</source>
          <target state="translated">ポストメッセージのソリューションについては、こちらをご覧ください。</target>
        </trans-unit>
        <trans-unit id="53e8475662e93dba88421445f46ad6c63933d3ec" translate="yes" xml:space="preserve">
          <source>Here are some workarounds and explanation of same-origin-policy:</source>
          <target state="translated">ここでは、同一オリジンポリシーの回避策と説明をしています。</target>
        </trans-unit>
        <trans-unit id="3e6b094c0445f22c160924768c1e7ab7f2ab31f7" translate="yes" xml:space="preserve">
          <source>Here is the javascript that makes the call to the PHP file</source>
          <target state="translated">PHPファイルへの呼び出しを行うjavascriptは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="537caecf2ec6ad1c68d699677791ce8433c9fb7a" translate="yes" xml:space="preserve">
          <source>Here's some example javascript code from anyorigin:</source>
          <target state="translated">ここでは、anyoriginのjavascriptのコード例を紹介します。</target>
        </trans-unit>
        <trans-unit id="3278a912757a0d6e80e30697203ac1e8cafe560f" translate="yes" xml:space="preserve">
          <source>I can't claim credit for this image, but it matches everything I know on this subject and offers a bit of humor at the same time.</source>
          <target state="translated">私はこの画像のクレジットを主張することはできませんが、このテーマについて私が知っているすべてのものと一致しており、同時に少しのユーモアを提供しています。</target>
        </trans-unit>
        <trans-unit id="74c377ed5d488a0f2fa67627324bdc55383950d3" translate="yes" xml:space="preserve">
          <source>I use JSONP.</source>
          <target state="translated">JSONPを使っています。</target>
        </trans-unit>
        <trans-unit id="aedea270bebebbb6df92ec87e80f61f22f17c4a8" translate="yes" xml:space="preserve">
          <source>I wanted to make a community wiki regarding HTML/JS &lt;strong&gt;same-origin policies&lt;/strong&gt; to hopefully help anyone searching for this topic. This is one of the most searched-for topics on SO and there is no consolidated wiki for it so here I go :)</source>
          <target state="translated">HTML / JSの&lt;strong&gt;同一生成元ポリシー&lt;/strong&gt;に関するコミュニティーWikiを作成して、このトピックを検索する人を助けたいと思っています。 これは、SOで最も検索されているトピックの1つであり、統合されたWikiはありません。</target>
        </trans-unit>
        <trans-unit id="22c5475470c98c78fca56cdbe0c4a8fe32dc678d" translate="yes" xml:space="preserve">
          <source>I've found it pretty useful :)</source>
          <target state="translated">私はそれがかなり有用であることを発見しました :)</target>
        </trans-unit>
        <trans-unit id="ec716be49a189dc96ebedce425b2a3743464479e" translate="yes" xml:space="preserve">
          <source>If the server decides that the request should be allowed, it sends a &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; header echoing back the same origin that was sent or &lt;code&gt;*&lt;/code&gt; if it&amp;rsquo;s a public resource. For example:</source>
          <target state="translated">サーバーがリクエストを許可する必要があると判断した場合、サーバーは &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; ヘッダーを送信して、送信されたのと同じオリジンをエコーバックするか、 &lt;code&gt;*&lt;/code&gt; パブリックリソースの場合。 例えば：</target>
        </trans-unit>
        <trans-unit id="84dc7308e5f2df5426df8cd061732eb7a35d1815" translate="yes" xml:space="preserve">
          <source>If this header is missing, or the origins don&amp;rsquo;t match, then the browser disallows the request. If all is well, then the browser processes the request. Note that neither the requests nor responses include cookie information.</source>
          <target state="translated">このヘッダーがない場合、またはオリジンが一致しない場合、ブラウザはリクエストを拒否します。 すべてが順調であれば、ブラウザがリクエストを処理します。 リクエストにもレスポンスにもCookie情報が含まれていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="0893afbcb9175e0c3093ac7ce7fbcc9d22c724f2" translate="yes" xml:space="preserve">
          <source>If using &lt;a href=&quot;http://httpd.apache.org/docs/2.0/mod/mod_proxy.html&quot;&gt;mod_proxy&lt;/a&gt; in Apache, the fundamental configuration directive to set up a reverse proxy is the &lt;code&gt;ProxyPass&lt;/code&gt;. It is typically used as follows:</source>
          <target state="translated">Apacheで&lt;a href=&quot;http://httpd.apache.org/docs/2.0/mod/mod_proxy.html&quot;&gt;mod_proxy&lt;/a&gt;を使用する場合、リバースプロキシを設定するための基本的な設定ディレクティブは &lt;code&gt;ProxyPass&lt;/code&gt; です。 通常、次のように使用されます。</target>
        </trans-unit>
        <trans-unit id="4d0b0e596e666c3682ea6ce8c5834cb97678e6a8" translate="yes" xml:space="preserve">
          <source>In this case, the browser would be able to request &lt;code&gt;/ajax/web_service.xml&lt;/code&gt; as a relative URL, but the server would serve this by acting as a proxy to &lt;code&gt;http://other-domain.com/ajax/web_service.xml&lt;/code&gt;.</source>
          <target state="translated">この場合、ブラウザは &lt;code&gt;/ajax/web_service.xml&lt;/code&gt; を相対URLとして要求できますが、サーバーは &lt;code&gt;http://other-domain.com/ajax/web_service.xml&lt;/code&gt; へのプロキシとして機能することでこれを処理します。</target>
        </trans-unit>
        <trans-unit id="1cf0c7a6464ec5af7080886da26a725c3bebd7d2" translate="yes" xml:space="preserve">
          <source>JSONP or &quot;JSON with padding&quot; is a
  complement to the base JSON data
  format, a usage pattern that allows a
  page to request and more meaningfully
  use JSON from a server other than the
  primary server. JSONP is an
  alternative to a more recent method
  called Cross-Origin Resource Sharing.</source>
          <target state="translated">JSONPまたは &quot;JSON with padding &quot;は、基本JSONデータフォーマットを補完するもので、ページがプライマリサーバー以外のサーバーからJSONをリクエストして、より有意義に利用することを可能にする利用パターンです。JSONPは、Cross-Origin Resource Sharingと呼ばれる最近の方法に代わるものです。</target>
        </trans-unit>
        <trans-unit id="09dccb5e5a575215454d5f9da06e105c43ecfdbb" translate="yes" xml:space="preserve">
          <source>Method type: &lt;strong&gt;AJAX&lt;/strong&gt;.</source>
          <target state="translated">メソッドタイプ： &lt;strong&gt;AJAX&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="907f7c116f69ced23985092a5b2e3d22c7acb042" translate="yes" xml:space="preserve">
          <source>Method type: &lt;strong&gt;Ajax&lt;/strong&gt;</source>
          <target state="translated">メソッドタイプ： &lt;strong&gt;Ajax&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4fbf1ad12572390549ddc5c26f71f279ddda6d0f" translate="yes" xml:space="preserve">
          <source>Method type: &lt;strong&gt;iframe&lt;/strong&gt;.</source>
          <target state="translated">メソッドタイプ： &lt;strong&gt;iframe&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="8b3b0f762f88c92e5b3b5ca264c31491540c1a12" translate="yes" xml:space="preserve">
          <source>My HTML runs on WAMP in port 80. So there we go, same origin policy has been circumvented :-)</source>
          <target state="translated">私のHTMLはポート80のWAMPで動作しています。これで、同じオリジンポリシーが回避されたことになります。)</target>
        </trans-unit>
        <trans-unit id="5c37d34677892604750e43403dd242ddcda9e50a" translate="yes" xml:space="preserve">
          <source>Note that for the CORS method to work, you need to have access to any type of server header mechanic and can't simply access any third-party resource.</source>
          <target state="translated">CORS メソッドが機能するためには、あらゆるタイプのサーバヘッダメカニックにアクセスする必要があり、サードパーティのリソースに単純にアクセスすることはできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="297330829250decdea3becdfca147b5237d622b4" translate="yes" xml:space="preserve">
          <source>Note that this is an iframe method that sets the value of document.domain to a suffix of the current domain. If it does so, the shorter domain is used for subsequent origin checks. For example, assume a script in the document at &lt;code&gt;http://store.company.com/dir/other.html&lt;/code&gt; executes the following statement:</source>
          <target state="translated">これは、document.domainの値を現在のドメインのサフィックスに設定するiframeメソッドであることに注意してください。 その場合は、後続のオリジンチェックに短いドメインが使用されます。 たとえば、 &lt;code&gt;http://store.company.com/dir/other.html&lt;/code&gt; にあるドキュメントのスクリプトが次のステートメントを実行するとします。</target>
        </trans-unit>
        <trans-unit id="7f5bfd284b16b8d3f023263d127e61641d6ec0dc" translate="yes" xml:space="preserve">
          <source>One interesting feature of the this method is that the reverse proxy can easily distribute requests towards multiple back-ends, thus acting as a &lt;a href=&quot;http://en.wikipedia.org/wiki/Load_balancer&quot;&gt;load balancer&lt;/a&gt;.</source>
          <target state="translated">このメソッドの興味深い機能の1つは、リバースプロキシが複数のバックエンドに向けてリクエストを簡単に分散できるため、 &lt;a href=&quot;http://en.wikipedia.org/wiki/Load_balancer&quot;&gt;ロードバランサー&lt;/a&gt;として機能することです。</target>
        </trans-unit>
        <trans-unit id="869f0a4f9fce0fe0b3af59add061945aec7fb4f1" translate="yes" xml:space="preserve">
          <source>Personally, &lt;code&gt;window.postMessage&lt;/code&gt; is the most reliable way that I've found for modern browsers. You do have to do a slight bit more work to make sure you're not leaving yourself open to XSS attacks, but it's a reasonable tradeoff.</source>
          <target state="translated">個人的には、 &lt;code&gt;window.postMessage&lt;/code&gt; は私が最近のブラウザーで見つけた最も信頼できる方法です。 XSS攻撃にさらされないようにするためにもう少し作業を行う必要がありますが、それは妥当なトレードオフです。</target>
        </trans-unit>
        <trans-unit id="f4e6f4d41791e659c854c6249a7b09790ac689a0" translate="yes" xml:space="preserve">
          <source>Please keep examples verbose and preferably also link your sources.</source>
          <target state="translated">例文は冗長にして、できればソースにもリンクを張ってください。</target>
        </trans-unit>
        <trans-unit id="8736c3943f7bf4b7da63a83f3f7c60afb357b61b" translate="yes" xml:space="preserve">
          <source>Setting up a simple &lt;a href=&quot;http://en.wikipedia.org/wiki/Reverse_proxy&quot;&gt;reverse proxy&lt;/a&gt; on the server, will allow the browser to use relative paths for the Ajax requests, while the server would be acting as a proxy to any remote location.</source>
          <target state="translated">サーバー上に単純な&lt;a href=&quot;http://en.wikipedia.org/wiki/Reverse_proxy&quot;&gt;リバースプロキシ&lt;/a&gt;を設定すると、ブラウザーがAjaxリクエストに相対パスを使用できるようになりますが、サーバーはリモートの場所へのプロキシとして機能します。</target>
        </trans-unit>
        <trans-unit id="b46f66f80cab9ee3b4442b834d73077fbe37f2a8" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;http://www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/&quot;&gt;http://www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/&lt;/a&gt;</source>
          <target state="translated">出典： &lt;a href=&quot;http://www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/&quot;&gt;http&lt;/a&gt; : //www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/</target>
        </trans-unit>
        <trans-unit id="fc483353f3db4b944ba18bd3f21809c0cfacb7d8" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;https://developer.mozilla.org/en/DOM/window.postMessage&quot;&gt;https://developer.mozilla.org/en/DOM/window.postMessage&lt;/a&gt;</source>
          <target state="translated">ソース： &lt;a href=&quot;https://developer.mozilla.org/en/DOM/window.postMessage&quot;&gt;https&lt;/a&gt; : //developer.mozilla.org/en/DOM/window.postMessage</target>
        </trans-unit>
        <trans-unit id="979ea5480a63480709b36bc4edd879419602f3a5" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;https://developer.mozilla.org/en/Same_origin_policy_for_JavaScript&quot;&gt;https://developer.mozilla.org/en/Same_origin_policy_for_JavaScript&lt;/a&gt;</source>
          <target state="translated">ソース： &lt;a href=&quot;https://developer.mozilla.org/en/Same_origin_policy_for_JavaScript&quot;&gt;https&lt;/a&gt; : //developer.mozilla.org/en/Same_origin_policy_for_JavaScript</target>
        </trans-unit>
        <trans-unit id="74286614b143e09d028a4e766f86db1b08364ea4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://en.wikipedia.org/wiki/JSON#JSONP&quot;&gt;JSONP&lt;/a&gt; comes to mind:</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/JSON#JSONP&quot;&gt;JSONP&lt;/a&gt;が思い浮かびます：</target>
        </trans-unit>
        <trans-unit id="14a41185d93ce77e80328ae9d8965fee99bf9b62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;document.domain&lt;/code&gt; method</source>
          <target state="translated">&lt;code&gt;document.domain&lt;/code&gt; メソッド</target>
        </trans-unit>
        <trans-unit id="d68a25f0367e3c7ffe299c9f97c6a07bba80c8d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;window.postMessage&lt;/code&gt; method</source>
          <target state="translated">&lt;code&gt;window.postMessage&lt;/code&gt; メソッド</target>
        </trans-unit>
        <trans-unit id="1508350d43cb22e9a9282cfae9df46c0cac493e9" translate="yes" xml:space="preserve">
          <source>The Cross-Origin Resource Sharing method</source>
          <target state="translated">クロスオリジンリソースシェアリング方式</target>
        </trans-unit>
        <trans-unit id="a153aec24165ab6f16cd35e9fb9410a9ca407ef6" translate="yes" xml:space="preserve">
          <source>The Mozilla team suggests in &lt;a href=&quot;http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/&quot;&gt;their post about CORS&lt;/a&gt; that you should check for the existence of the &lt;code&gt;withCredentials&lt;/code&gt;  property to determine if the browser supports CORS via XHR. You can then couple with the existence of the &lt;code&gt;XDomainRequest&lt;/code&gt; object to cover all browsers:</source>
          <target state="translated">Mozillaチームは、 &lt;a href=&quot;http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/&quot;&gt;CORSに関する投稿&lt;/a&gt;で、 &lt;code&gt;withCredentials&lt;/code&gt; プロパティの存在を確認して、ブラウザーがXHR経由でCORSをサポートしているかどうかを判断することを推奨しています。 次に、 &lt;code&gt;XDomainRequest&lt;/code&gt; オブジェクトの存在と組み合わせて 、すべてのブラウザーをカバーできます。</target>
        </trans-unit>
        <trans-unit id="120d0116d0ed894a0af16411bd0ada6a659dd1d6" translate="yes" xml:space="preserve">
          <source>The most recent way of overcoming the same-origin policy that I've found is &lt;a href=&quot;http://anyorigin.com/&quot;&gt;http://anyorigin.com/&lt;/a&gt;</source>
          <target state="translated">私が見つけた同じ起源のポリシーを克服する最新の方法は&lt;a href=&quot;http://anyorigin.com/&quot;&gt;http://anyorigin.com/です。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="06d8513c2bc78d391624461ec6c5778704342b09" translate="yes" xml:space="preserve">
          <source>The off-site iframe must also send events properly via &lt;code&gt;postMessage&lt;/code&gt;:</source>
          <target state="translated">オフサイトのiframeも &lt;code&gt;postMessage&lt;/code&gt; を介してイベントを適切に送信する必要があります。</target>
        </trans-unit>
        <trans-unit id="4174bdccc2aef6dfeda65a9a1fb9e2fdeddde0a2" translate="yes" xml:space="preserve">
          <source>The same origin policy</source>
          <target state="translated">同一のオリジンポリシー</target>
        </trans-unit>
        <trans-unit id="0e59c06659312e32500fac955df844aceb0808bc" translate="yes" xml:space="preserve">
          <source>The same origin policy prevents a
  document or script loaded from one
  origin from getting or setting
  properties of a document from another
  origin. This policy dates all the way
  back to Netscape Navigator 2.0.</source>
          <target state="translated">同一オリジンポリシーは、あるオリジンから読み込まれたドキュメントやスクリプトが、別のオリジンからドキュメントのプロパティを取得したり設定したりすることを防ぎます。このポリシーは Netscape Navigator 2.0 までさかのぼります。</target>
        </trans-unit>
        <trans-unit id="d66d1e4aa6d0d0ba8fa6587d7fafeb3d7278c581" translate="yes" xml:space="preserve">
          <source>The site's made so that you just give it any url and it generates javascript/jquery code for you that lets you get the html/data, regardless of it's origin.  In other words, it makes any url or webpage a JSONP request.</source>
          <target state="translated">このサイトは、任意のURLを与えれば、そのURLの由来に関係なく、htmldataを取得することができるjavascriptjqueryコードを生成するように作られています。言い換えれば、任意のURLやウェブページをJSONPリクエストにします。</target>
        </trans-unit>
        <trans-unit id="89fadbd32a13cd64dd32536d6240abcb8dc752cc" translate="yes" xml:space="preserve">
          <source>There are also several plugins for the popular Javascript toolkits out there that wrap &lt;code&gt;window.postMessage&lt;/code&gt; that provide similar functionality to older browsers using the other methods discussed above.</source>
          <target state="translated">また、上で説明した他のメソッドを使用して古いブラウザと同様の機能を提供する &lt;code&gt;window.postMessage&lt;/code&gt; をラップする人気のあるJavaScriptツールキット用のプラグインもいくつかあります。</target>
        </trans-unit>
        <trans-unit id="ea48f87a2f0787ebb1b20c6926a34bcce3956552" translate="yes" xml:space="preserve">
          <source>Thiru's Blog - Browser same origin policy workaround</source>
          <target state="translated">Thiru's Blog-ブラウザの同一オリジンポリシーの回避策</target>
        </trans-unit>
        <trans-unit id="23825bcf186dd918555cf7fad89c855273b38ca8" translate="yes" xml:space="preserve">
          <source>This analyze pretty much what is available out there: &lt;a href=&quot;http://www.slideshare.net/SlexAxton/breaking-the-cross-domain-barrier&quot;&gt;http://www.slideshare.net/SlexAxton/breaking-the-cross-domain-barrier&lt;/a&gt;</source>
          <target state="translated">これは、そこで利用できるものをかなり分析します： &lt;a href=&quot;http://www.slideshare.net/SlexAxton/breaking-the-cross-domain-barrier&quot;&gt;http&lt;/a&gt; : //www.slideshare.net/SlexAxton/breaking-the-cross-domain-barrier</target>
        </trans-unit>
        <trans-unit id="97c06c41f0555296935972082306d95bdec710d8" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;window.postMessage&lt;/code&gt;, an event listener must be attached:</source>
          <target state="translated">&lt;code&gt;window.postMessage&lt;/code&gt; を使用するには、イベントリスナーをアタッチする必要があります。</target>
        </trans-unit>
        <trans-unit id="2ea9e25e4f9caa440958ade6c97afad1ef7244fa" translate="yes" xml:space="preserve">
          <source>Ways to circumvent the same-origin policy</source>
          <target state="translated">同一起源のポリシーを回避する方法</target>
        </trans-unit>
        <trans-unit id="e782f78ff917519b1ee00c58e7456816e424de14" translate="yes" xml:space="preserve">
          <source>Well, I used curl in PHP to circumvent this. I have a webservice running in port 82.</source>
          <target state="translated">さて、これを回避するためにPHPでcurlを使用しました。82番ポートで動作しているウェブサービスがあります。</target>
        </trans-unit>
        <trans-unit id="81f16516207f35245225c6f2b7a7ff6c0b72408c" translate="yes" xml:space="preserve">
          <source>What are some of your favorite ways to go around same-origin policies?</source>
          <target state="translated">同一起源の政策を回避するためのお気に入りの方法を教えてください。</target>
        </trans-unit>
        <trans-unit id="f703e067a689e111c816ae1d14c37c3ff704cf24" translate="yes" xml:space="preserve">
          <source>With this method, you would be allowed to exectue javascript from an iframe sourced on a subdomain on a page sourced on the main domain. This method is not suited for cross-domain resources as browsers like Firefox will not allow you to change the &lt;code&gt;document.domain&lt;/code&gt; to a completely alien domain.</source>
          <target state="translated">この方法では、メインドメインをソースとするページのサブドメインをソースとするiframeからJavaScriptを除外できます。 Firefoxなどのブラウザでは &lt;code&gt;document.domain&lt;/code&gt; を完全に外部ドメインに変更できないため、この方法はクロスドメインリソースには適していません。</target>
        </trans-unit>
        <trans-unit id="273fa724fa9acf407f810131ac63b502220c802f" translate="yes" xml:space="preserve">
          <source>and a slightly different version:</source>
          <target state="translated">と少し変わったバージョンがあります。</target>
        </trans-unit>
        <trans-unit id="5f335f1bf645229c5ab9c000fc4d135eda85b8f2" translate="yes" xml:space="preserve">
          <source>on your page.</source>
          <target state="translated">をあなたのページに掲載してください。</target>
        </trans-unit>
        <trans-unit id="12d8a79280fc4b634bf500ecfa6d1fb7c6122ddc" translate="yes" xml:space="preserve">
          <source>some_func() should get called so that you are notified that the data is in.</source>
          <target state="translated">some_func()は、データが入っていることを通知するために呼び出されるべきです。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
