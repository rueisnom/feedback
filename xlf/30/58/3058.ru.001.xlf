<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/3058">
    <body>
      <group id="3058">
        <trans-unit id="373c315627044d8114133a9eceb77e35102452b1" translate="yes" xml:space="preserve">
          <source>&quot;Any nontrivial application is made up of two or more classes that
  collaborate with each other to perform some business logic.
  Traditionally, each object is responsible for obtaining its own
  references to the objects it collaborates with (its dependencies).
  When applying DI, the objects are given their dependencies at creation
  time by some external entity that coordinates each object in the
  system. In other words, dependencies are injected into objects.&quot;</source>
          <target state="translated">&quot;Любое нетривиальное приложение состоит из двух или более классов,которые взаимодействуют друг с другом для выполнения некоторой бизнес-логики.Традиционно каждый объект отвечает за получение собственных ссылок на объекты,с которыми он сотрудничает (его зависимости).При применении DI объекты получают свои зависимости во время создания некой внешней сущности,которая координирует каждый объект в системе.Другими словами,зависимости вводятся в объекты&quot;.</target>
        </trans-unit>
        <trans-unit id="1fbd17eb3e2e00cb03e793a913cd5879c46118b0" translate="yes" xml:space="preserve">
          <source>&amp;ndash; from instantiation to destruction through its BeanFactory.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;- от создания экземпляров до уничтожения через BeanFactory.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="068b6ab33b6b4be771ec1212da10f6ec032066f1" translate="yes" xml:space="preserve">
          <source>-Java components that are instantiated by the IoC container are called beans, and the &lt;strong&gt;IoC container manages a bean's scope, lifecycle events, and any AOP features&lt;/strong&gt; for which it has been configured and coded.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Компоненты Java, которые создаются контейнером IoC, называются bean-компонентами, а &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;контейнер IoC управляет областью действия bean-компонента, событиями жизненного цикла и любыми функциями AOP,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для которых он был настроен и закодирован.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="afa4d9b9f6de7b5688061d0997a422f279e431e1" translate="yes" xml:space="preserve">
          <source>3 . It becomes more appropriate the minute you have a medium sized project of somewhat more complexity.  I would say it becomes appropriate the minute you start feeling pain.</source>
          <target state="translated">3.Это становится более уместным в ту минуту,когда у вас есть проект среднего размера несколько более сложного.Я бы сказал,что это становится уместным в ту минуту,когда вы начинаете испытывать боль.</target>
        </trans-unit>
        <trans-unit id="40b8b55e45ad1a598253beb75f7288ba8ba55f1d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;Wikipedia Article&lt;/a&gt;. To me, inversion of control is turning your sequentially written code and turning it into an delegation structure. Instead of your program explicitly controlling everything, your program sets up a class or library with certain functions to be called when certain things happen.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Статья в Википедии&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для меня инверсия контроля превращает ваш последовательно написанный код и превращает его в структуру делегирования. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вместо того, чтобы ваша программа явно контролировала все, ваша программа устанавливает класс или библиотеку с определенными функциями, которые будут вызываться, когда происходят определенные вещи.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b3a6cae60fc41c6d95dc1070dcab2bec94c65c7a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;QUICK EXAMPLE:Inversion of Control is about getting freedom, more flexibility, and less dependency. When you are using a desktop computer, you are slaved (or say, controlled). You have to sit before a screen and look at it. Using keyboard to type and using mouse to navigate. And a bad written software can slave you even more. If you replaced your desktop with a laptop, then you somewhat inverted control. You can easily take it and move around. So now you can control where you are with your computer, instead of computer controlling it&lt;/code&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;QUICK EXAMPLE:Inversion of Control is about getting freedom, more flexibility, and less dependency. When you are using a desktop computer, you are slaved (or say, controlled). You have to sit before a screen and look at it. Using keyboard to type and using mouse to navigate. And a bad written software can slave you even more. If you replaced your desktop with a laptop, then you somewhat inverted control. You can easily take it and move around. So now you can control where you are with your computer, instead of computer controlling it&lt;/code&gt; &lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce6277c62215b72c62f6d7b32405d03e8dab8242" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;After 1 hour...&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;После 1 часа...&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4bf00ad6158c463a4d18359447633037167e612a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;In a technological way of explaining, this is very similar to console/shell/cmd vs GUI interaction. (Which is answer of Mark Harrison above no.2 top answer).
In console, you are dependent on the what is being asked/displayed to you and you can't jump to other menus and features without answering it's question first; following a strict sequential flow. (programmatically this is like a method/function loop).
However with GUI, the menus and features are laid out and the user can select whatever it needs thus having more &lt;strong&gt;control&lt;/strong&gt; and being less restricted. (programmatically, menus have callback when selected and an action takes place).&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;С технологической точки зрения это очень похоже на взаимодействие консоли / оболочки / cmd и GUI. (Что является ответом Марка Харрисона выше № 2 верхний ответ). В консоли вы зависите от того, что вам задают / отображают, и вы не можете перейти к другим меню и функциям, не ответив сначала на их вопрос; после строгого последовательного потока. (программно это похоже на цикл метода / функции). Однако в графическом интерфейсе меню и функции выложены, и пользователь может выбирать все, что ему нужно, что обеспечивает больший &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;контроль&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и меньшие ограничения. (программно, меню имеют обратный вызов, когда выбрано, и действие происходит).&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ed29e8d6239fa919bfe90a1309aaa619ab390e6c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;With this objects tell thier dependencies.
And spring makes it available. &lt;br/&gt;This leads to loosely coupled application development.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;С помощью этих объектов сообщают свои зависимости. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;И весна делает это доступным. &lt;/font&gt;&lt;/font&gt;&lt;br/&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это приводит к слабосвязанной разработке приложений.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="288921ce6b306091d7e29a08f49c763343c42534" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;*Parent&lt;/strong&gt;: You can only speak when I ask you questions and you can only act when I give you permission.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;* Родитель&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Вы можете говорить только тогда, когда я задаю вам вопросы, и вы можете действовать только тогда, когда я даю вам разрешение.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c0849807fdb7fca5c56ad0f55c3e8ce3038f606" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;The control of the dependencies is inverted from one being called to the one calling.&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Управление зависимостями инвертируется от одного вызываемого к другому вызывающему.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1f1651d8874b325c4ed4c493b808a5d27b680253" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: (Wants to play but since there's no question from the parent, the child can't do anything).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ребенок&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : (Хочет играть, но поскольку от родителей нет вопросов, ребенок ничего не может сделать).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba8aa85f4075a8f58fc6dbfbaed6f4e152f4edf4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: (finally is able to play).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ребенок&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : (наконец-то умеет играть).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb2030779c1e6c6a7bb69d41c861abf6968afbcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: No.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ребенок&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Нет.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d4cb53aa68484a8be2e5c3ce16e52da82e925950" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: Yes.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ребенок&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : да.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e948765d7e551575d5bbb9e78278d7dc0f14c8f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Classic code (without Dependency injection)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Классический код (без внедрения зависимостей)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d25c9d64eb9c3856ad367881451af0e0aa609be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Creation Inversion&lt;/strong&gt; 
It can be implemented by the following patterns: Factory Pattern, Service Locator, and Dependency Injection. Creation Inversion helps to eliminate dependencies between types moving the process of dependency objects creation outside of the type that uses these dependency objects. Why dependencies are bad? Here are a couple of examples: direct creation of a new object in your code makes testing harder; it is impossible to change references in assemblies without recompilation (OCP principle violation); you can&amp;rsquo;t easily replace a desktop-UI by a web-UI.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Инверсия создания&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Это может быть реализовано следующими шаблонами: Factory Pattern, Service Locator и Dependency Injection. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Инверсия создания помогает устранить зависимости между типами, перемещая процесс создания объектов зависимостей за пределы типа, который использует эти объекты зависимостей. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Почему зависимости плохие? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вот пара примеров: непосредственное создание нового объекта в вашем коде усложняет тестирование; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;невозможно изменить ссылки в сборках без перекомпиляции (нарушение принципа OCP); &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы не можете легко заменить настольный интерфейс веб-интерфейсом.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="08e78ee2b7c128a89d211a2bf39b2f84466452c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Dependency Injection(DI):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Инъекция зависимости (DI):&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d1b89118884de42df71b6af8b8ea2200c727bc22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:-&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example:-&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="64a28b0eac5fea46185f8873a51b9268bdfe88d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Flow Inversion&lt;/strong&gt; 
Changes control of the flow. For example, you have a console application where you asked to enter many parameters and after each entered parameter you are forced to press Enter. You can apply Flow Inversion here and implement a desktop application where the user can choose the sequence of parameters&amp;rsquo; entering, the user can edit parameters, and at the final step, the user needs to press Enter only once.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Инверсия потока&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Изменяет управление потоком. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Например, у вас есть консольное приложение, в котором вас просят ввести много параметров, и после каждого введенного параметра вы вынуждены нажимать Enter. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Здесь вы можете применить Flow Inversion и внедрить настольное приложение, в котором пользователь может выбрать последовательность ввода параметров, пользователь может редактировать параметры, и на последнем этапе пользователь должен нажать Enter только один раз.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cba09dbb242bc98d15d12a8fef257c90c62924a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I shall write down my simple understanding of this two terms:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я напишу мое простое понимание этих двух терминов:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="38d46125888ee3caad2da28aa8d6aa5a8926b541" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I've read a lot of answers for this but if someone is still confused and needs a plus ultra &quot;laymans term&quot; to explain IoC here is my take:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я прочитал много ответов на этот вопрос, но если кто-то все еще смущен и нуждается в дополнительном &amp;laquo;термине непрофессионалов&amp;raquo;, чтобы объяснить IoC, вот мое мнение:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6bf58eb168559f7cf585397ed5dd09bcc2ca3fba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Interface Inversion&lt;/strong&gt; 
Providers shouldn&amp;rsquo;t define an interface. Instead, the consumer should define the interface and providers must implement it. Interface Inversion allows eliminating the necessity to modify the consumer each time when a new provider added.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Поставщики &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;инверсии интерфейса&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не должны определять интерфейс. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вместо этого потребитель должен определить интерфейс, а провайдеры должны его реализовать. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Инверсия интерфейса позволяет избавиться от необходимости модифицировать потребителя каждый раз, когда добавляется новый провайдер.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed0b7b3bd833a3c6061e7d3d4e4435a418101a66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inversion of Control(IoC) Container:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Контейнер инверсии контроля (IoC):&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c3fde237e686241fd27580469f73cb15114b6b9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inversion of control as a design guideline serves the following purposes:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Инверсия управления в качестве руководства по проектированию служит следующим целям:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a3b6606a4ce50930db11c9d5745c4e9507283a90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inversion of control&lt;/strong&gt; is when you go to the grocery store and your wife gives you the list of products to buy.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Смена контроля&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - это когда вы идете в продуктовый магазин, и ваша жена дает вам список продуктов, которые нужно купить.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1cc610b7deb430a2900463e9ef2e6cade3227cf5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: Do you want to eat?</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Родитель&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : ты хочешь есть?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba949e705d98f2c3b04905c56af2d99f2ae12904" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: I'm back. Do you want to play?</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Родитель&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : я вернулся. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ты хочешь поиграть?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="586ff1c99fde9c623fd38dc89e47f278ee449a8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: Okay, I'll be back. Wait for me.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Родитель&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Хорошо, я вернусь. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Подожди меня.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce4d1c01e2c78cc40a78a655d28a601a32149798" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: Permission granted.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Родитель&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : разрешение предоставлено.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3e6a711eba13c601406802a4b5d24f5f621c30a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: This means, you can't ask me if you can eat, play, go to the bathroom or even sleep if I don't ask you.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Родитель&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Это означает, что вы не можете спросить меня, можете ли вы есть, играть, ходить в ванную или даже спать, если я вас не спрашиваю.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="228fabf1f35817d8a668be417f7bbf490117f1fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Useful links:-&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Полезные ссылки:-&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="21b7eafe7407645083182e0bf75e568a7b1481a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using dependency injection&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Использование внедрения зависимости&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fea0286fee454bd929c61270ce0cea0daaee4e58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What problems does it solve?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Какие проблемы это решает?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c14e5a9c9d9ef0696566b4fb6c19a3faae2a437d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When is it appropriate and when not?&lt;/strong&gt;
In my opinion you use DI when you think there are (or there can be) alternative implementations of a class.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Когда это уместно, а когда нет? &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; По моему мнению, вы используете DI, когда думаете, что есть (или могут быть) альтернативные реализации класса.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="825b03cbbacfbb1b7a19868df499e5872f62c0c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;With IoC:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;С IoC:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bd7ee2632bbdd33b1d9442666a7099f0a028b310" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;With IoC&lt;/strong&gt;: You can ask for &quot;fruit&quot;. You can get different fruits each time you get served. for example, apple, orange, or water melon.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;С IoC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Вы можете попросить &quot;фрукты&quot;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы можете получать разные фрукты каждый раз, когда вас обслуживают. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;например, яблоко, апельсин или арбуз.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba18cb219c6ee97148042cefde5d4632bbb536d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;With IoC&lt;/strong&gt;: You have a &lt;strong&gt;desktop&lt;/strong&gt; computer and you accidentally break the screen. You find you can just grab almost any desktop monitor from the market, and it works well with your desktop.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;С IoC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : у вас есть &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;настольный&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; компьютер, и вы случайно разбиваете экран. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы обнаружите, что можете просто взять практически любой настольный монитор с рынка, и он хорошо работает с вашим рабочим столом.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0a27438b705ef7753d44c454be364c9f0bede393" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Without IoC:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Без IoC:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1d13a77d2a7550cfdb5ca4858f7dcdbc2457d535" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Without IoC&lt;/strong&gt;: You have a &lt;strong&gt;laptop&lt;/strong&gt; computer and you accidentally break the screen. And darn, you find the same model laptop screen is nowhere in the market. So you're stuck.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Без IoC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : у вас есть &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;портативный&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; компьютер, и вы случайно разбиваете экран. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;И, черт возьми, вы найдете такую ​​же модель экрана ноутбука нигде на рынке. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Итак, вы застряли.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="836d4b023c42984531a364fb6c44580d073bca78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Without IoC&lt;/strong&gt;: you ask for &quot;apple&quot;, and you are always served apple when you ask more.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Без IoC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : вы просите &amp;laquo;яблоко&amp;raquo;, и вам всегда подают яблоко, когда вы спрашиваете больше.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="783fb8f1d9a5b79049829582b02390a06e324449" translate="yes" xml:space="preserve">
          <source>A good read with example</source>
          <target state="translated">Хорошее чтиво на примере</target>
        </trans-unit>
        <trans-unit id="1fc99bcac170ae4802f35453c9045f144a0a97f2" translate="yes" xml:space="preserve">
          <source>A real life example would be given here. Suppose, you want to develop a web application. So, you create a framework which will handle all the common things a web application should handle like handling http request, creating application menu, serving pages, managing cookies, triggering events etc.</source>
          <target state="translated">Здесь будет приведен реальный пример.Предположим,вы хотите разработать веб-приложение.Итак,вы создаете фреймворк,который будет обрабатывать все обычные вещи,с которыми веб-приложение должно работать,такие как обработка http-запросов,создание меню приложения,обслуживание страниц,управление куки-фреймворками,запуск событий и т.п.</target>
        </trans-unit>
        <trans-unit id="5b72c852f59e3c77579e7c0c79ad0e52e5d0438f" translate="yes" xml:space="preserve">
          <source>A very simple written explanation can be found here</source>
          <target state="translated">Очень простое письменное объяснение можно найти здесь</target>
        </trans-unit>
        <trans-unit id="03ce18a84ba0139f8b2d282fb731383609571750" translate="yes" xml:space="preserve">
          <source>After hour or something we have a floor covered of plastic cups and water.</source>
          <target state="translated">Через час или что-то вроде того,у нас есть пол,покрытый пластиковыми стаканчиками и водой.</target>
        </trans-unit>
        <trans-unit id="b22ecdbc7467f179e8b80b4a5cb28a7d9453723d" translate="yes" xml:space="preserve">
          <source>Although the workers give the control of managing the project on the top level to the managers (the framework). But it is good to have some professionals help out. This is the concept of IoC truly come from.</source>
          <target state="translated">Хотя работники передают контроль над управлением проектом на верхнем уровне руководителям (рамочная программа).Но хорошо,что некоторые профессионалы помогают.Это концепция IoC действительно пришла из.</target>
        </trans-unit>
        <trans-unit id="00fd8444cad967012a1ae67dd61c70de9a3b11a4" translate="yes" xml:space="preserve">
          <source>And once you get into generics, it gets even better.  Imagine having a message publisher that receives records and publishes messages.  It doesn't care what it publishes, but it needs a mapper to take something from a record to a message.</source>
          <target state="translated">И как только ты увлекаешься дженериками,становится еще лучше.Представьте,что у вас есть издатель сообщений,который получает записи и публикует сообщения.Ему все равно,что он публикует,но ему нужен картограф,чтобы перенести что-то из записи в сообщение.</target>
        </trans-unit>
        <trans-unit id="e69975b42ed25e7f8f28e85f31d62e2a8cb06b1a" translate="yes" xml:space="preserve">
          <source>And then you leave some hooks in your framework where you can put further codes to generate custom menu, pages, cookies or logging some user events etc. On every browser request, your framework will run and executes your custom codes if hooked then serve it back to the browser.</source>
          <target state="translated">А затем вы оставляете несколько крючков в вашем фреймворке,куда вы можете поместить дополнительные коды для генерации пользовательского меню,страниц,куки или записи в журнал некоторых пользовательских событий и т.д.При каждом запросе браузера,ваш фреймворк будет запускаться и выполнять пользовательские коды,если он подключен,а затем передать его обратно в браузер.</target>
        </trans-unit>
        <trans-unit id="b665befe257f7ff25fb720471835afdb3362429f" translate="yes" xml:space="preserve">
          <source>And this is exactly what the Spring (another IoC container, for example: Guice) does. Instead of let to application create what it need using new keyword (taking plastic cup), Spring IoC container all of time offer to application the same instance (singleton) of needed object(glass of water).</source>
          <target state="translated">И это именно то,что делает Spring (другой контейнер IoC,например:Guice).Вместо того,чтобы позволить приложению создавать то,что ему нужно,используя новое ключевое слово (взяв пластиковый стакан),контейнер IoC Spring все время предлагает применить один и тот же экземпляр (однокнопочный)нужного объекта (стакан воды).</target>
        </trans-unit>
        <trans-unit id="d065037b22d578a8d5a62e61105bf2d8ede75c17" translate="yes" xml:space="preserve">
          <source>Answering only the first part.
What is it?</source>
          <target state="translated">Ответы только на первую часть.Что это?</target>
        </trans-unit>
        <trans-unit id="8ae0498fb7e27f3e77d528523d5e9ef00a7a185a" translate="yes" xml:space="preserve">
          <source>Anyway: be reasonable. Design pattern are &lt;strong&gt;good practices&lt;/strong&gt; but not Bible to be preached. Do not stick it everywhere.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В любом случае: будь разумным. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Шаблон дизайна - это &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;хорошая практика,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; но не Библия, которую нужно проповедовать. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Не вставляйте это везде.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a5fc50e3ceaa03d10efa641f9932ed3164ec099" translate="yes" xml:space="preserve">
          <source>Application calls Foo</source>
          <target state="translated">Звонки в приложения Foo</target>
        </trans-unit>
        <trans-unit id="ac42390e19be354858b8262243637ee16d63efc2" translate="yes" xml:space="preserve">
          <source>Application creates Bar and gives it Bim</source>
          <target state="translated">Приложение создает Бар и дает ему Бим</target>
        </trans-unit>
        <trans-unit id="cc24fa2cfa1ade20a4b0568072650d805b3f7a37" translate="yes" xml:space="preserve">
          <source>Application creates Bim</source>
          <target state="translated">Приложение создает Bim</target>
        </trans-unit>
        <trans-unit id="70579284eb400d7297fa45f23e86008434a5dae7" translate="yes" xml:space="preserve">
          <source>Application creates Foo</source>
          <target state="translated">Приложение создает Foo</target>
        </trans-unit>
        <trans-unit id="c0f19361a5c397f8b9f7a8e3a097732fbca45296" translate="yes" xml:space="preserve">
          <source>Application creates Foo and gives it Bar</source>
          <target state="translated">Приложение создает Foo и дает ему Бар</target>
        </trans-unit>
        <trans-unit id="1a435d46695a15e5ef97ebb4802372a00c982aa2" translate="yes" xml:space="preserve">
          <source>Application needs Foo (e.g. a controller), so:</source>
          <target state="translated">Для применения нужен Foo (например,контроллер):</target>
        </trans-unit>
        <trans-unit id="9be6e530a74dcafa45c7b24d7025184525c1bc10" translate="yes" xml:space="preserve">
          <source>Application needs Foo, which needs Bar, which needs Bim, so:</source>
          <target state="translated">Приложению нужен Фу,которому нужен Бар,которому нужен Бим,так что..:</target>
        </trans-unit>
        <trans-unit id="fff41238dbef5b816e589fb9ecf3cbde7896731e" translate="yes" xml:space="preserve">
          <source>Bar creates Bim</source>
          <target state="translated">Бар создает Бим</target>
        </trans-unit>
        <trans-unit id="452099fc339bb9ab1a4137666deb3f1f3b017433" translate="yes" xml:space="preserve">
          <source>Bar does something</source>
          <target state="translated">Бар что-то делает</target>
        </trans-unit>
        <trans-unit id="2b2cfde5abc29f811788f8a477a12b0d271a2ada" translate="yes" xml:space="preserve">
          <source>Bar needs Bim (a service, a repository, &amp;hellip;), so:</source>
          <target state="translated">Бар нужен Bim (сервис, репозиторий,&amp;hellip;), поэтому:</target>
        </trans-unit>
        <trans-unit id="adf15cc582acf54581c37a950b4076c28cebbc7c" translate="yes" xml:space="preserve">
          <source>Basically, &lt;strong&gt;anything&lt;/strong&gt; with an event loop, callbacks, or execute triggers falls into this category.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;По сути, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;все&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;что&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; имеет цикл обработки событий, обратные вызовы или триггеры выполнения, попадает в эту категорию.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c15542d7fcb269ae139c7a7886a1b2613dd14f5d" translate="yes" xml:space="preserve">
          <source>Before using Inversion of Control you should be well aware of the fact that it has its pros and cons and you should know why you use it if you do so.</source>
          <target state="translated">Прежде чем использовать Inversion of Control,вы должны хорошо знать,что она имеет свои плюсы и минусы,и вы должны знать,почему вы используете ее,если вы делаете это.</target>
        </trans-unit>
        <trans-unit id="a75d2762f97d0c2ece2927dafe57eaf0e294409f" translate="yes" xml:space="preserve">
          <source>But I think you have to be very careful with it. If you will overuse this pattern, you will make very complicated design and even more complicated code.</source>
          <target state="translated">Но я думаю,что ты должна быть очень осторожна с этим.Если вы будете злоупотреблять этим шаблоном,вы сделаете очень сложный дизайн и еще более сложный код.</target>
        </trans-unit>
        <trans-unit id="bf33c7e70ae590068b05025538fd39ae51569fdb" translate="yes" xml:space="preserve">
          <source>By extracting an abstract definition of the behavior used by X in Y, illustrated as I below, and letting the consumer X use an instance of that instead of Y it can continue to do what it does without having to know the specifics about Y.</source>
          <target state="translated">Извлекая абстрактное определение поведения,используемого X в Y,проиллюстрированное как I ниже,и позволяя потребителю X использовать экземпляр этого вместо Y,он может продолжать делать то,что он делает,не зная специфики Y.</target>
        </trans-unit>
        <trans-unit id="94d3696bca4e509dbee4b3f2721acf48efbcc91e" translate="yes" xml:space="preserve">
          <source>By implementing Inversion of Control, a software/object consumer get more controls/options over the software/objects, instead of being controlled or having less options.</source>
          <target state="translated">Реализовав Inversion of Control,потребитель программного проекта получает больше возможностей управления программными объектами вместо того,чтобы быть контролируемым или иметь меньше опций.</target>
        </trans-unit>
        <trans-unit id="a765706b39bb310d1815886a85f5790bb5cddfdd" translate="yes" xml:space="preserve">
          <source>By implementing Inversion of Control, a software/object consumer gets more controls/options over the software/objects, instead of being controlled or having fewer options.</source>
          <target state="translated">Реализовав Inversion of Control,потребитель программного проекта получает больше возможностей управления программными объектами вместо того,чтобы быть контролируемым или иметь меньше опций.</target>
        </trans-unit>
        <trans-unit id="afc2b6eb93654fed24d8cce3141c211e0dfdd6a4" translate="yes" xml:space="preserve">
          <source>Cons:</source>
          <target state="translated">Cons:</target>
        </trans-unit>
        <trans-unit id="2ef7bd6d6b0fca27c168920a2f37fcb5d9a9e6e9" translate="yes" xml:space="preserve">
          <source>Creating an object within class is called tight coupling, Spring removes this dependency by following a design pattern(DI/IOC). In which object of class in passed in constructor rather than creating in class. More over we give super class reference variable in constructor to define more general structure.</source>
          <target state="translated">Создание объекта внутри класса называется герметичной связью,пружина устраняет эту зависимость,следуя шаблону проектирования (DIIOC).В каком классе передается объект класса в конструкторе,а не создается в классе.Более того,для определения более общей структуры мы даем в конструкторе опорную переменную суперкласса.</target>
        </trans-unit>
        <trans-unit id="8e0638a769a99fa369ab8513b8f14693372f58e0" translate="yes" xml:space="preserve">
          <source>DI (Dependency Injection) is about how the control flows in the application. Traditional desktop application had control flow from your application(main() method) to other library method calls, but with DI control flow is inverted that's framework takes care of starting your app, initializing it and invoking your methods whenever required.</source>
          <target state="translated">DI (Dependency Injection-Впрыск зависимости)-о том,как проходит управление в приложении.Традиционное настольное приложение имело поток управляющих элементов от вашего приложения (метода main())к другим вызовам методов из библиотеки,но с инвертированным потоком управляющих элементов DI,каркас заботится о запуске приложения,его инициализации и вызове методов,когда это необходимо.</target>
        </trans-unit>
        <trans-unit id="3b1e93f7a994b1c6fa9c849c7f78a08f5f55f101" translate="yes" xml:space="preserve">
          <source>DLL container methods in COM. DllMain, DllCanUnload, etc (what-to-do part) -- COM/OS (when-to-do part)</source>
          <target state="translated">Методы контейнеров DLL в COM.DllMain,DllCanUnload и т.д.(что делать часть)--COMOS (когда делать часть)</target>
        </trans-unit>
        <trans-unit id="4b7dce9ad71ae931cbbdb8069b2f958ba77aca4c" translate="yes" xml:space="preserve">
          <source>Dependency Injection and Inversion of Control are related. Dependency Injection is at the &lt;strong&gt;micro&lt;/strong&gt; level and Inversion of Control is at the &lt;strong&gt;macro&lt;/strong&gt; level. You have to eat every bite (implement DI) in order to finish a meal (implement IoC).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Инъекция зависимостей и инверсия управления взаимосвязаны. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Инъекция зависимости находится на &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;микроуровне,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; а инверсия управления - на &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;макроуровне&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы должны съесть каждый кусочек (внедрить DI), чтобы закончить прием пищи (внедрить IoC).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6ee080601f38ccffcc77ec09e618c93a8a122547" translate="yes" xml:space="preserve">
          <source>Dependency injection generally means &lt;strong&gt;passing an object on which method depends, as a parameter to a method, rather than having the method create the dependent object&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Внедрение зависимостей обычно означает &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;передачу объекта, от которого зависит метод, в качестве параметра метода, а не создание метода зависимым объектом&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4a343e8a0620741fbb66739fd1d46148979f2b5a" translate="yes" xml:space="preserve">
          <source>Dependency injection makes it easy to swap with the different implementation of the injected classes. While unit testing you can inject a dummy implementation, which makes the testing a lot easier.</source>
          <target state="translated">Инъекция зависимостей позволяет легко менять классы инъекций.Во время модульного тестирования можно впрыскивать манекен,что значительно упрощает тестирование.</target>
        </trans-unit>
        <trans-unit id="92ed562037033112d88e7aaf65217d90ffa2423c" translate="yes" xml:space="preserve">
          <source>Detailed explanation</source>
          <target state="translated">Подробное объяснение</target>
        </trans-unit>
        <trans-unit id="2fd22edb8e3ea30eab025ef8f4290ffacde4fb8b" translate="yes" xml:space="preserve">
          <source>Do we really need a name by which to describe the difference between procedural and event driven programming? OK, if we need to, but do we need to pick a brand new &quot;bigger than life&quot; name that confuses more than it solves?</source>
          <target state="translated">Действительно ли нам нужно имя,под которым можно описать разницу между процедурным программированием и программированием на основе событий? Хорошо,если нужно,но нужно ли нам выбрать совершенно новое название &quot;больше,чем жизнь&quot;,которое путает больше,чем решает?</target>
        </trans-unit>
        <trans-unit id="ce8104f0909bbd49f3a87e76b46fd63af7b23865" translate="yes" xml:space="preserve">
          <source>Don't call us, we'll call you</source>
          <target state="translated">Не звони нам,мы позвоним тебе.</target>
        </trans-unit>
        <trans-unit id="5c221fed55ea2a8b9560181babdde0f2e320ba49" translate="yes" xml:space="preserve">
          <source>Ensure that &lt;strong&gt;when&lt;/strong&gt; part knows as &lt;em&gt;little&lt;/em&gt; as possible about &lt;strong&gt;what&lt;/strong&gt; part; and vice versa.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Убедитесь в том, &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;что , &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;когда&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; часть знает , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;как &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Литтл&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , как можно о &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;какой&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; части; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;наоборот.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a357e26edfd850a29c72490b46f8b9e1c7e1c26d" translate="yes" xml:space="preserve">
          <source>Event Handling. Event Handlers (what-to-do part) -- Raising Events (when-to-do part)</source>
          <target state="translated">Обработка событий.Обработчики событий (часть о том,что делать).Поднимать события (часть о том,что делать).</target>
        </trans-unit>
        <trans-unit id="4681308f589fd3db8982d8895f704006c536728b" translate="yes" xml:space="preserve">
          <source>Every module can focus on what it is designed for.</source>
          <target state="translated">Каждый модуль может сосредоточиться на том,для чего он предназначен.</target>
        </trans-unit>
        <trans-unit id="37013689579c8310949d1aaa459fbe78604e94c8" translate="yes" xml:space="preserve">
          <source>Ex: Suppose your application stores the user uploaded file in the Google Drive, with DI your controller code may look like this:</source>
          <target state="translated">Исх.:Предположим,ваше приложение хранит загруженный пользователем файл на Диске Google,при этом код контроллера может выглядеть так:</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="e9044ac31a8995f5ad62b7e9f444f33bf9e08657" translate="yes" xml:space="preserve">
          <source>Foo calls Bar</source>
          <target state="translated">Фу звонит Бар</target>
        </trans-unit>
        <trans-unit id="36a8c8318b6369919a71996fd940aacf3965166d" translate="yes" xml:space="preserve">
          <source>Foo creates Bar</source>
          <target state="translated">Фу создает Бар</target>
        </trans-unit>
        <trans-unit id="c2cfcdd995da76d7e30b4bb8c5a58a247fe77380" translate="yes" xml:space="preserve">
          <source>Foo needs Bar (e.g. a service), so:</source>
          <target state="translated">Фу нуждается в баре (например,в услуге),так что..:</target>
        </trans-unit>
        <trans-unit id="c40a9c4979dbcd08f9143f72f4f97633ba55f56f" translate="yes" xml:space="preserve">
          <source>For example, in an old school menu, you might have:</source>
          <target state="translated">Например,в старом школьном меню:</target>
        </trans-unit>
        <trans-unit id="54513be8dda986f2beeef0cb1d533fbca0652e5b" translate="yes" xml:space="preserve">
          <source>For example, let's say that we have two classes : &lt;strong&gt;Dog&lt;/strong&gt; and &lt;strong&gt;Cat&lt;/strong&gt;.   Both shares the same qualities/states: age, size, weight. So instead of creating a class of service called &lt;strong&gt;DogService&lt;/strong&gt; and &lt;strong&gt;CatService&lt;/strong&gt;, I can create a single one called &lt;strong&gt;AnimalService&lt;/strong&gt; that allows to use Dog and Cat only if they use the interface &lt;strong&gt;IAnimal&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Например, предположим, что у нас есть два класса: &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dog&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cat&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Оба имеют одинаковые качества / состояния: возраст, размер, вес. Таким образом, вместо создания класса обслуживания с &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;именами DogService&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CatService&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , я могу создать один &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;класс с&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; именем &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AnimalService,&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; который позволяет использовать Dog и Cat только в том случае, если они используют интерфейс &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IAnimal&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d60c0cdafbec5fc9cf7874f8725048484c3f63ce" translate="yes" xml:space="preserve">
          <source>For example, say your application has a text editor component and you want to provide spell checking. Your standard code would look something like this:</source>
          <target state="translated">Например,скажем,что в вашем приложении есть компонент текстового редактора,и вы хотите обеспечить проверку орфографии.Ваш стандартный код будет выглядеть примерно так:</target>
        </trans-unit>
        <trans-unit id="b193542666e0549ecc44307cdfa4b9bc29a65958" translate="yes" xml:space="preserve">
          <source>For example, task#1 is to create object.
Without IOC concept, task#1 is supposed to be done by Programmer.But With IOC concept, task#1 would be done by container.</source>
          <target state="translated">Например,задача#1-создать объект.Без концепции МОК задача №1 должна выполняться программистом,но с концепцией МОК задача №1 выполнялась бы контейнером.</target>
        </trans-unit>
        <trans-unit id="4c4257d920e8870617eb7c2a571ea4b4696b4faf" translate="yes" xml:space="preserve">
          <source>For those interested in more depth on Inversion of Control a paper has been published outlining a more complete picture of Inversion of Control as a design pattern (OfficeFloor: using office patterns to improve software design &lt;a href=&quot;http://doi.acm.org/10.1145/2739011.2739013&quot;&gt;http://doi.acm.org/10.1145/2739011.2739013&lt;/a&gt; with a free copy available to download from &lt;a href=&quot;http://www.officefloor.net/about.html&quot;&gt;http://www.officefloor.net/about.html&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для тех, кто заинтересован в более глубоком рассмотрении Inversion of Control, был опубликован документ с изложением более полной картины Inversion of Control как шаблона проектирования (OfficeFloor: использование шаблонов office для улучшения проектирования программного обеспечения &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://doi.acm.org/10.1145/2739011.2739013&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://doi.acm.org/10.1145/ 2739011.2739013&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; с бесплатной копией, доступной для загрузки по &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.officefloor.net/about.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;адресу http://www.officefloor.net/about.html&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="530a5c467b34b9f4477df522b08ee9d842c1a1d7" translate="yes" xml:space="preserve">
          <source>Here is how a code not using DI will roughly work:</source>
          <target state="translated">Вот как примерно будет работать код,не использующий DI:</target>
        </trans-unit>
        <trans-unit id="8feb0cfc564ed6fe998214e0b617510b751cbf33" translate="yes" xml:space="preserve">
          <source>Here is how a code using DI will roughly work:</source>
          <target state="translated">Вот как будет работать код,использующий DI:</target>
        </trans-unit>
        <trans-unit id="60b0beb3f28af92c7fd7dc62953c72cac128a607" translate="yes" xml:space="preserve">
          <source>However, pragmatically speaking, it has some backwards.</source>
          <target state="translated">Однако,с прагматической точки зрения,у него есть и обратная сторона.</target>
        </trans-unit>
        <trans-unit id="fcc6e5b27035a345cfafd067265b9d513f1ff521" translate="yes" xml:space="preserve">
          <source>I agree with &lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#3082&quot;&gt;NilObject&lt;/a&gt;, but I'd like to add to this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я согласен с &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#3082&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;NilObject&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , но я хотел бы добавить к этому:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3bf68460e0fb730dd585b98cc7af3cac3d6aa69c" translate="yes" xml:space="preserve">
          <source>I am definitely loving IoC/DI.</source>
          <target state="translated">Я определенно люблю IoCDI.</target>
        </trans-unit>
        <trans-unit id="82d4b78078a9c52e303c8ecc8ca5f4c8c95fc3bf" translate="yes" xml:space="preserve">
          <source>I found a very clear example &lt;a href=&quot;http://php-di.org/doc/understanding-di.html&quot;&gt;here&lt;/a&gt; which explains how the 'control is inverted'.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я нашел очень яркий пример &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://php-di.org/doc/understanding-di.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;здесь&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , который объясняет , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;как &quot;контроль инвертируется.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b0fb3f858bf2eab2695294bc696e5aa358bf89cd" translate="yes" xml:space="preserve">
          <source>I found one good example &lt;a href=&quot;http://www.goospoos.com/2009/12/inversion-of-control-basics-with-example/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я нашел один хороший пример &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.goospoos.com/2009/12/inversion-of-control-basics-with-example/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;здесь&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c7dd2bab3cb0cd2991bce40ce3201c3f7a535c6f" translate="yes" xml:space="preserve">
          <source>I like this explanation: &lt;a href=&quot;http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&quot;&gt;http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Мне нравится это объяснение: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1aa23d27c2aa025d7ac4285b379874694217b40b" translate="yes" xml:space="preserve">
          <source>I understand that the answer has already been given here. But I still think, some basics about the inversion of control have to be discussed here in length for future readers.</source>
          <target state="translated">Я понимаю,что ответ уже дан.Но я все же думаю,что некоторые основы инверсии управления должны быть подробно обсуждены здесь для будущих читателей.</target>
        </trans-unit>
        <trans-unit id="937f692b34fc2319d608f1cbd292305bff67b729" translate="yes" xml:space="preserve">
          <source>I will keep things abstract here, You can visit following links for detail understanding of the topic.</source>
          <target state="translated">Я буду держать здесь абстрактные вещи,Вы можете посетить следующие ссылки для подробного понимания темы.</target>
        </trans-unit>
        <trans-unit id="33b4f2de83b8d009dfb1e4f0c8f37f73deb35275" translate="yes" xml:space="preserve">
          <source>I wrote it once, but now I can inject many types into this set of code if I publish different types of messages.  I can also write mappers that take a record of the same type and map them to different messages. Using DI with Generics has given me the ability to write very little code to accomplish many tasks.</source>
          <target state="translated">Я писал его однажды,но теперь я могу вставить много типов в этот набор кода,если буду публиковать разные типы сообщений.Также я могу писать мапперы,которые берут запись одного и того же типа и сопоставляют их с разными сообщениями.Использование DI с Generics дало мне возможность писать очень мало кода для выполнения многих задач.</target>
        </trans-unit>
        <trans-unit id="46a53efcdd95296d970c368c25c5a862f47bd55c" translate="yes" xml:space="preserve">
          <source>If you find yourself copying and pasting code around, you're almost always doing &lt;em&gt;something&lt;/em&gt; wrong.  Codified as the design principle &lt;a href=&quot;http://c2.com/xp/OnceAndOnlyOnce.html&quot;&gt;Once and Only Once&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если вы обнаружите, что копируете и вставляете код, вы почти всегда делаете &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;что-то&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не так. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Зашифрован как принцип дизайна &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://c2.com/xp/OnceAndOnlyOnce.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Один раз и только один раз&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29ab9727475a88b2c5d04f24a224b5ff059cd20c" translate="yes" xml:space="preserve">
          <source>If you follow these simple two steps, you have done inversion of control:</source>
          <target state="translated">Если вы выполните эти простые два шага,то выполните инверсию управления:</target>
        </trans-unit>
        <trans-unit id="bf55354f38c64ca9c6750feaf917cc557da9b65e" translate="yes" xml:space="preserve">
          <source>Imagine a parent and child talking to each other.</source>
          <target state="translated">Представьте,что родители и ребенок разговаривают друг с другом.</target>
        </trans-unit>
        <trans-unit id="fddc5beb5789c807e772d70f367d3e0c53630417" translate="yes" xml:space="preserve">
          <source>In IoC the &quot;framework&quot; controls &lt;strong&gt;&lt;em&gt;main()&lt;/em&gt;&lt;/strong&gt; and calls your methods. The &lt;strong&gt;&lt;em&gt;Framework&lt;/em&gt;&lt;/strong&gt; is in control :(</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В IoC &amp;laquo;framework&amp;raquo; управляет &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;main ()&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и вызывает ваши методы. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Framework&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; контролирует :(&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="377410213559b2702c94f0b3b1faeaf157754fdc" translate="yes" xml:space="preserve">
          <source>In a GUI program or somesuch, instead we say:</source>
          <target state="translated">В программе с графическим интерфейсом или вроде того,вместо этого мы говорим:</target>
        </trans-unit>
        <trans-unit id="794ffcb222e8673e69c250708deea7737d00cdd9" translate="yes" xml:space="preserve">
          <source>In normal s/w development, you write the &lt;strong&gt;&lt;em&gt;main()&lt;/em&gt;&lt;/strong&gt; method and call &quot;library&quot; methods.  &lt;strong&gt;&lt;em&gt;You&lt;/em&gt;&lt;/strong&gt; are in control :)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;При обычной разработке программного обеспечения вы пишете метод &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;main ()&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и вызываете &amp;laquo;библиотечные&amp;raquo; методы. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; контролируете :)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3f10d36138f924778c4756832794808cc0e20331" translate="yes" xml:space="preserve">
          <source>In our programming world, &lt;strong&gt;Hollywood&lt;/strong&gt; represent a generic framework (may be written by you or someone else), &lt;strong&gt;you&lt;/strong&gt; represent the user code you wrote and &lt;strong&gt;the task&lt;/strong&gt; represent the thing you want to accomplish with your code. Now you don't ever go to trigger your task by yourself, not in IoC! Rather you have designed everything in such that your framework will trigger your task for you. Thus you have built a reusable framework which can make someone a hero or another one a villain. But that framework is always in charge, it knows when to pick someone and that someone only knows what it wants to be.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В нашем мире программирования &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Голливуд&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; представляет собой общую структуру (может быть написана вами или кем-то еще), &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;вы&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; представляете &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;написанный вами &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;код пользователя, а &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;задача&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; представляет собой то, чего вы хотите достичь с помощью своего кода. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Теперь вы никогда не запускаете свою задачу самостоятельно, а не в IoC! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Скорее вы спроектировали все так, чтобы ваша структура вызывала вашу задачу для вас. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Таким образом, вы создали многоразовую структуру, которая может сделать кого-то героем или другого злодеем. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Но эта структура всегда отвечает, она знает, когда кого-то выбирать, и что кто-то знает только то, кем он хочет быть.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="173b21ccdfbf6f494cf6d1444bbd225f45320e1f" translate="yes" xml:space="preserve">
          <source>In programming terms, she passed a callback function &lt;code&gt;getProductList()&lt;/code&gt; to the function you are executing - &lt;code&gt;doShopping()&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В терминах программирования она передала функцию обратного вызова &lt;/font&gt;&lt;/font&gt; &lt;code&gt;getProductList()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; функции, которую вы выполняете - &lt;/font&gt;&lt;/font&gt; &lt;code&gt;doShopping()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83e763a2dee31b60a814d50a0bf409afb468b761" translate="yes" xml:space="preserve">
          <source>In short Control gets inverted from Programmer to container. So, it is called as inversion of control.</source>
          <target state="translated">Коротко говоря,управление переходит из режима программиста в режим контейнера.Итак,это называется инверсией управления.</target>
        </trans-unit>
        <trans-unit id="8ce30cfb65598251ed25908c4dd40a288377ffb4" translate="yes" xml:space="preserve">
          <source>In the end you always win :)</source>
          <target state="translated">В конце концов,ты всегда выигрываешь :)</target>
        </trans-unit>
        <trans-unit id="415bf701ddc37ec878782b3147762d4c810c9f63" translate="yes" xml:space="preserve">
          <source>In the first code example we are instantiating &lt;code&gt;SpellChecker&lt;/code&gt; (&lt;code&gt;this.checker = new SpellChecker();&lt;/code&gt;), which means the &lt;code&gt;TextEditor&lt;/code&gt; class directly depends on the &lt;code&gt;SpellChecker&lt;/code&gt; class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В первом примере кода мы создаем экземпляр &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this.checker = new SpellChecker();&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), что означает, что &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;класс &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; напрямую зависит от &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;класса &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="02311f7e83fcf777d1f281214c8986231c3912c0" translate="yes" xml:space="preserve">
          <source>In the illustration above Y implements I and X uses an instance of I. While it&amp;rsquo;s quite possible that X still uses Y what&amp;rsquo;s interesting is that X doesn&amp;rsquo;t know that. It just knows that it uses something that implements I.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;На иллюстрации выше Y реализует I, а X использует экземпляр I. Хотя вполне возможно, что X все еще использует Y, интересно то, что X этого не знает. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Он просто знает, что использует то, что реализует I.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="10b6331947724028e6c4d5b46f4ac577504462aa" translate="yes" xml:space="preserve">
          <source>In the second code example we are creating an abstraction by having the &lt;code&gt;SpellChecker&lt;/code&gt; dependency class in &lt;code&gt;TextEditor&lt;/code&gt; constructor signature (not initializing dependency in class). This allows us to call the dependency then pass it to the TextEditor class like so:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Во втором примере кода мы создаем абстракцию, имея &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;класс зависимостей &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;сигнатуре конструктора &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (не инициализируя зависимость в классе). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это позволяет нам вызвать зависимость и затем передать ее в класс TextEditor следующим образом:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="86e9aa47c02eac4bb61f7fcbb0829f0a43930434" translate="yes" xml:space="preserve">
          <source>In using a container like Castle Windsor, it solves maintenance issues even better.  Being able to swap out a component that goes to a database for one that uses file based persistence without changing a line of code is awesome (configuration change, you're done).</source>
          <target state="translated">При использовании такого контейнера,как замок Виндзор,он еще лучше решает проблемы обслуживания.Возможность подмены компонента,который идет в базу данных,на компонент,использующий файловую сохраняемость без изменения строки кода-это просто потрясающе (изменение конфигурации,все готово).</target>
        </trans-unit>
        <trans-unit id="393aff0ab87ccb76f01e199b65f9dfff7969a389" translate="yes" xml:space="preserve">
          <source>Instead if you had the controller class to construct the storage object with the &lt;code&gt;new&lt;/code&gt; keyword like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вместо этого, если у вас был класс контроллера для создания объекта хранения с &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ключевым словом, например:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd2c07da0630be24a7d3559c8b8807776d8cdf48" translate="yes" xml:space="preserve">
          <source>Interfaces. Component client (when-to-do part) -- Component Interface implementation (what-to-do part)</source>
          <target state="translated">Интерфейсы.Клиент компонентов (когда делать часть).Реализация интерфейса компонентов (что делать часть).</target>
        </trans-unit>
        <trans-unit id="85b24615680dc38ffe1f3574074bfc21eff397f1" translate="yes" xml:space="preserve">
          <source>Inversion of Control (IoC) can be quite confusing when it is first encountered.</source>
          <target state="translated">Инверсия управления (IoC)может ввести в заблуждение при первом знакомстве.</target>
        </trans-unit>
        <trans-unit id="7379f00d78c1620733cf4544b441a1c216d8f4b3" translate="yes" xml:space="preserve">
          <source>Inversion of Control (IoC) has been built on a very simple principle called &lt;strong&gt;Hollywood Principle&lt;/strong&gt;. And it says that,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Инверсия контроля (IoC) была построена по очень простому принципу, который называется принцип &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Голливуда&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;И это говорит о том, что&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6e29ef62a3454337d3ef55e638a0463283e61fd7" translate="yes" xml:space="preserve">
          <source>Inversion of Control (IoC) means to create instances of dependencies first and latter instance of a class (optionally injecting them through constructor), instead of creating an instance of the class first and then the class instance creating instances of dependencies.
Thus, inversion of control &lt;strong&gt;inverts&lt;/strong&gt; the &lt;strong&gt;flow of control&lt;/strong&gt; of the program. &lt;strong&gt;Instead of&lt;/strong&gt; the &lt;strong&gt;callee controlling&lt;/strong&gt; the &lt;strong&gt;flow of control&lt;/strong&gt; (while creating dependencies), the &lt;strong&gt;caller controls the flow of control of the program&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Инверсия управления (IoC) означает создание экземпляров зависимостей вначале и последующем экземпляре класса (необязательно внедрение их через конструктор) вместо создания экземпляра класса вначале, а затем экземпляра класса, создающего экземпляры зависимостей. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Таким образом, инверсия управления &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;инвертирует&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; на &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;поток управления&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; программы. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вместо того&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , чтобы на &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;вызываемом управляющем&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;поток управления&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (при создании зависимостей), то &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;вызывающий абонент контролирует поток управления программы&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="447c04d94c54d0ae2f5b843b5618686c41ad12ba" translate="yes" xml:space="preserve">
          <source>Inversion of Control (for methods) = Dependency (state) Injection + Continuation Injection + Thread Injection</source>
          <target state="translated">Инверсия управления (для методов)=зависимость (состояние)инжекция+непрерывная инжекция+инжекция резьбы</target>
        </trans-unit>
        <trans-unit id="3ff7d8358b5e99cc26d5c2e29dcb68ec749052f0" translate="yes" xml:space="preserve">
          <source>Inversion of Control is a generic principle, while Dependency Injection realises this principle as a design pattern for object graph construction (i.e. configuration controls how the objects are referencing each other, rather than the object itself controlling how to get the reference to another object).</source>
          <target state="translated">Инверсия управления является общим принципом,в то время как Dependency Injection реализует этот принцип как шаблон проектирования для построения графа объектов (т.е.конфигурация контролирует,как объекты ссылаются друг на друга,а не сам объект контролирует,как получить ссылку на другой объект).</target>
        </trans-unit>
        <trans-unit id="246abcec0d5f703c2373d287bf72d2bb3f4b4db4" translate="yes" xml:space="preserve">
          <source>Inversion of Control is a pattern that implements the Dependency Inversion Principle (DIP). DIP states the following: 1. High-level modules should not depend on low-level modules. Both should depend on abstractions (e.g. interfaces). 2. Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions.</source>
          <target state="translated">Инверсия управления-это шаблон,реализующий принцип инверсии зависимости (DIP).DIP-запросы состоят из следующего:1.Высокоуровневые модули не должны зависеть от низкоуровневых модулей.Оба должны зависеть от абстракций (например,интерфейсов).2.Абстракции не должны зависеть от деталей.Детали (конкретные реализации)должны зависеть от абстракций.</target>
        </trans-unit>
        <trans-unit id="4270e4151e47f0a6838b48ec9ee467895342deec" translate="yes" xml:space="preserve">
          <source>Inversion of Control is what you get when your program callbacks, e.g. like a gui program.</source>
          <target state="translated">Инверсия управления-это то,что вы получаете,когда ваша программа вызывает обратный вызов,например,как программа Gui.</target>
        </trans-unit>
        <trans-unit id="801b879e0e61fbad9fe20e85dfc6244854d4817e" translate="yes" xml:space="preserve">
          <source>Inversion of Control, (or IoC), is about &lt;strong&gt;getting freedom&lt;/strong&gt; (You get married, you lost freedom and you are being controlled. You divorced, you have just implemented Inversion of Control. That's what we called, &quot;decoupled&quot;. Good computer system discourages some very close relationship.) &lt;strong&gt;more flexibility&lt;/strong&gt; (The kitchen in your office only serves clean tap water, that is your only choice when you want to drink. Your boss implemented Inversion of Control by setting up a new coffee machine. Now you get the flexibility of choosing either tap water or coffee.) and &lt;strong&gt;less dependency&lt;/strong&gt; (Your partner has a job, you don't have a job, you financially depend on your partner, so you are controlled. You find a job, you have implemented Inversion of Control. Good computer system encourages in-dependency.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Инверсия Контроля (или IoC) - это &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;получение свободы&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (Вы женаты, вы потеряли свободу и вас контролируют. Вы развелись, вы только что внедрили Инверсию Контроля. Это то, что мы называли &amp;laquo;разъединенными&amp;raquo;. Хорошая компьютерная система). препятствует некоторым очень близким отношениям.) &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;больше гибкости&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (кухня в вашем офисе подает только чистую водопроводную воду, это ваш единственный выбор, когда вы хотите пить. Ваш босс внедрил Inversion of Control, установив новую кофемашину. Теперь вы получаете гибкость выбора водопроводной воды или кофе.) и &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;меньшая зависимость&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (У вашего партнера есть работа, у вас нет работы, вы финансово зависите от своего партнера, поэтому вы находитесь под контролем. Вы нашли работу, вы внедрили Inversion of Control. Хорошая компьютерная система поощряет независимость.)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="77e5120da94a1f24fb6b60f891876164cb38ce5d" translate="yes" xml:space="preserve">
          <source>Inversion of Controls is about separating concerns.</source>
          <target state="translated">Инверсия элементов управления заключается в разделении проблем.</target>
        </trans-unit>
        <trans-unit id="61d07698e52d02e6e124d9b4a9957fccd5ee55fd" translate="yes" xml:space="preserve">
          <source>Inversion of control is a pattern used for decoupling components and layers in the system. The pattern is implemented through injecting dependencies into a component when it is constructed. These dependences are usually provided as interfaces for further decoupling and to support testability. IoC / DI containers such as Castle Windsor, Unity are tools (libraries) which can be used for providing IoC. These tools provide extended features above and beyond simple dependency management, including lifetime, AOP / Interception, policy, etc.</source>
          <target state="translated">Инверсия управления-это шаблон,используемый для развязки компонентов и слоев в системе.Шаблон реализуется посредством впрыскивания зависимостей в компонент при его построении.Эти зависимости обычно предоставляются в качестве интерфейсов для дальнейшей развязки и поддержки контролепригодности.Контейнеры IoC DI,такие как Castle Windsor,Unity,являются инструментами (библиотеками),которые могут быть использованы для обеспечения IoC.Эти инструменты предоставляют расширенные возможности,выходящие за рамки простого управления зависимостями,включая время жизни,перехват AOP,политику и т.д.</target>
        </trans-unit>
        <trans-unit id="be7841f74b212fbb18a52076953f9299c8fad69a" translate="yes" xml:space="preserve">
          <source>Inversion of control is a practical way to reduce code duplication, and if you find yourself copying an entire method and only changing a small piece of the code, you can consider tackling it with inversion of control. Inversion of control is made easy in many languages through the concept of delegates, interfaces, or even raw function pointers.</source>
          <target state="translated">Инверсия управления-это практический способ сократить дублирование кода,и если вы обнаружите,что копируете весь метод и меняете только маленький кусочек кода,вы можете подумать о том,чтобы справиться с этим с помощью инверсии управления.Инверсия управления упрощается на многих языках благодаря концепции делегатов,интерфейсов или даже необработанных указателей функций.</target>
        </trans-unit>
        <trans-unit id="72a912fb5b76b85605df21e6d9aa08ac3caa58f5" translate="yes" xml:space="preserve">
          <source>Inversion of control is about transferring control from library to the client. It makes more sense when we talk about a client that injects (passes) a function value (lambda expression) into a higher order function (library function) that controls (changes) the behavior of the library function. A client or framework that injects library dependencies (which carry behavior) into libraries may also be considered IoC</source>
          <target state="translated">Инверсия управления заключается в передаче управления из библиотеки клиенту.Это имеет смысл,когда мы говорим о клиенте,который инжектирует (передает)значение функции (выражение лямбда)в функцию более высокого порядка (библиотечную функцию),которая контролирует (изменяет)поведение библиотечной функции.Клиент или фреймворк,который инжектирует библиотечные зависимости (которые несут поведение)в библиотеки,также может рассматриваться как IoC</target>
        </trans-unit>
        <trans-unit id="c6f3380296dd1859cc46056be7e5c7d7d18517b1" translate="yes" xml:space="preserve">
          <source>IoC / DI to me is pushing out dependencies to the calling objects. Super simple.</source>
          <target state="translated">IoC DI для меня выталкивает зависимости от вызывающих объектов.Супер просто.</target>
        </trans-unit>
        <trans-unit id="d01f7e74cc075865246062cbffd169c66a84cace" translate="yes" xml:space="preserve">
          <source>IoC in easy terms: It's the use of Interface as a way of specific something (such a field or a parameter) as a wildcard that can be used by some classes. It allows the re-usability of the code.</source>
          <target state="translated">IoC в простых выражениях:Это использование интерфейса как способа специфического чего-то (такого поля или параметра),как подстановочный символ,который может быть использован некоторыми классами.Это позволяет повторно использовать код.</target>
        </trans-unit>
        <trans-unit id="ecc699e264ec9201c3607773626eecefd4f6379e" translate="yes" xml:space="preserve">
          <source>IoC is about inverting the relationship between your code and third-party code (library/framework):</source>
          <target state="translated">IoC заключается в инверсии отношения между вашим кодом и сторонним кодом (библиотечный фреймворк):</target>
        </trans-unit>
        <trans-unit id="b1a30e451f848d07595af921a316e8fdf04e8200" translate="yes" xml:space="preserve">
          <source>IoC not only inverts the control flow in your program, it also clouds it considerably. This means you can no longer just read your code and jump from one place to another because the connections that would normally be in your code are not in the code anymore. Instead it is in XML configuration files or annotations and in the code of your IoC container that interprets these metadata.</source>
          <target state="translated">IoC не только инвертирует поток управления в Вашей программе,но и значительно затуманивает его.Это означает,что вы больше не можете просто читать свой код и перескакивать с одного места на другое,потому что соединений,которые обычно были бы в вашем коде,больше нет в коде.Вместо этого именно в XML-файлах конфигурации или аннотациях и в коде вашего IoC-контейнера интерпретируются эти метаданные.</target>
        </trans-unit>
        <trans-unit id="129c548401379640498c3bd2d9aeda56d02ded9e" translate="yes" xml:space="preserve">
          <source>Isn&amp;rsquo;t it enough that X knows that it uses something that has the behavior, the methods, properties etc, of Y without knowing who actually implements the behavior?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Разве не достаточно того, что X знает, что использует то, что имеет поведение, методы, свойства и т. Д. Y, не зная, кто на самом деле реализует это поведение?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="13ba932451564a53b11f07d2fc54611618718a48" translate="yes" xml:space="preserve">
          <source>Isolation of code unit, easier testing</source>
          <target state="translated">Изоляция блока кода,облегчение тестирования</target>
        </trans-unit>
        <trans-unit id="f93e3134fbbf3855151cbf5494b8689c1ef262d3" translate="yes" xml:space="preserve">
          <source>It allows user of the function to define some parts of it, making it more flexible.</source>
          <target state="translated">Это позволяет пользователю функции определять некоторые ее части,делая ее более гибкой.</target>
        </trans-unit>
        <trans-unit id="5589f7b0110a12ff8abdfca719dfe54ce07e36dd" translate="yes" xml:space="preserve">
          <source>It is a strong motivator for coding against interfaces instead of implementations</source>
          <target state="translated">Это сильный мотиватор для кодирования против интерфейсов,а не реализаций.</target>
        </trans-unit>
        <trans-unit id="9b77b575dc2b25c7a321384bbb10a36aa6f2e8f2" translate="yes" xml:space="preserve">
          <source>It is not appropriate to use in all cases, because the flow of a program can be harder to follow when written this way. It's a useful way to design methods when writing a library that will be reused, but it should be used sparingly in the core of your own program unless it really solves a code duplication problem.</source>
          <target state="translated">Использовать его не во всех случаях уместно,потому что поток программы может быть сложнее следовать,когда она написана таким образом.Это полезный способ проектирования методов при написании библиотеки,которая будет использоваться повторно,но его следует применять экономно в ядре собственной программы,если только он действительно не решает проблему дублирования кода.</target>
        </trans-unit>
        <trans-unit id="4374f68d4d13a5a1e95989bd83ee0dde411e4897" translate="yes" xml:space="preserve">
          <source>It says -</source>
          <target state="translated">Там написано -</target>
        </trans-unit>
        <trans-unit id="93947b7bcccf2b2a7d648e4a9fb3a6910d74deb6" translate="yes" xml:space="preserve">
          <source>It seems that the most confusing thing about &quot;IoC&quot; the acronym and the name for which it stands is that it's too glamorous of a name - almost a noise name.</source>
          <target state="translated">Кажется,что самое запутанное в &quot;IoC&quot;-аббревиатуре и названии,за которое она стоит,-это то,что название слишком гламурное-почти шумное.</target>
        </trans-unit>
        <trans-unit id="8b85e00dbd5642b617bbba6834a701ce8120f842" translate="yes" xml:space="preserve">
          <source>It solves code duplication. For example, in the old days you would manually write your own event loop, polling the system libraries for new events. Nowadays, most modern APIs you simply tell the system libraries what events you're interested in, and it will let you know when they happen.</source>
          <target state="translated">Это решает проблему дублирования кода.Например,в старые времена Вы вручную писали свой собственный цикл обработки событий,опрашивая системные библиотеки на наличие новых событий.В настоящее время большинство современных API просто сообщают системным библиотекам,какие события вас интересуют,и это даст вам знать,когда они произойдут.</target>
        </trans-unit>
        <trans-unit id="b051475457c0cb9b82c447aa1f4d625e160eb580" translate="yes" xml:space="preserve">
          <source>It start simple and shows code examples as well.</source>
          <target state="translated">Она начинается с простого и также показывает примеры кода.</target>
        </trans-unit>
        <trans-unit id="7cdd8b2cb24570566fcca5c80bc3ce5cdd68603b" translate="yes" xml:space="preserve">
          <source>It's very easy to write unit tests for your code because it depends on nothing else than the objects it accepts in its constructor/setters and you can easily initialize them with the right objects in isolation.</source>
          <target state="translated">Писать юнит-тесты для своего кода очень просто,так как он не зависит ни от чего,кроме объектов,которые он принимает в своих конструкторах,и вы можете легко инициализировать их нужными объектами по отдельности.</target>
        </trans-unit>
        <trans-unit id="e188bfdb88678f850320d1c8300b33308920af0b" translate="yes" xml:space="preserve">
          <source>Laravel and EJB are examples of such a frameworks.</source>
          <target state="translated">Примерами таких рамок являются Ларавел и ИЕБ.</target>
        </trans-unit>
        <trans-unit id="fdff96c467769e0a8335f8e963bf4da65252f786" translate="yes" xml:space="preserve">
          <source>Leaving aside the question of the hygienic, last form of drinking process control is much more effective and economic.</source>
          <target state="translated">Оставляя в стороне вопрос гигиенического,последнего способа управления питьевым процессом,можно сказать,что он гораздо эффективнее и экономичнее.</target>
        </trans-unit>
        <trans-unit id="07c8b84bfa96ba21d9cc3879005aab0b48bbe962" translate="yes" xml:space="preserve">
          <source>Let invert control.</source>
          <target state="translated">Позвольте инвертировать управление.</target>
        </trans-unit>
        <trans-unit id="ad88ff33863680217c647f3d27552b0f563713ae" translate="yes" xml:space="preserve">
          <source>Let to say that we make some meeting in some hotel.</source>
          <target state="translated">Скажем так,мы устроим встречу в каком-нибудь отеле.</target>
        </trans-unit>
        <trans-unit id="7c67342f3bd25bc3faba7eb88fdb1040235adf02" translate="yes" xml:space="preserve">
          <source>Like in this example with TextEditor: if you have only one SpellChecker maybe it is not really necessary to use IoC ? Unless you need to write unit tests or something ...</source>
          <target state="translated">Как в этом примере с TextEditor:если у вас только один SpellChecker,может быть,на самом деле не обязательно использовать IoC ? Если только вам не нужно писать юнит-тесты или что-то в этом роде ...</target>
        </trans-unit>
        <trans-unit id="8c62f1035a8da667e2e44f248499b63934ff87a4" translate="yes" xml:space="preserve">
          <source>Looking at Inversion of Control as a design pattern, we need to look at what we are inverting.  Dependency Injection inverts control of constructing a graph of objects. If told in layman's term, inversion of control implies change in flow of control in the program. Eg. In traditional standalone app, we have main method, from where the control gets passed to other third party libraries(in case, we have used third party library's function), but through inversion of control control gets transferred from third party library code to our code, as we are taking the service of third party library.  But there are other aspects that need to be inverted within a program - e.g. invocation of methods and threads to execute the code.</source>
          <target state="translated">Рассматривая инверсию управления как шаблон проектирования,мы должны смотреть на то,что мы инвертируем.Dependency Injection инвертирует управление построением графика объектов.Если говорить простым языком,то инверсия управления подразумевает изменение потока управления в программе.Eg.В традиционном автономном приложении мы имеем основной метод,откуда управление передаётся в другие сторонние библиотеки (в случае,если мы использовали функцию сторонней библиотеки),но через инверсию управления передаётся из кода сторонней библиотеки в наш код,так как мы пользуемся сервисом сторонней библиотеки.Но есть и другие аспекты,которые необходимо инвертировать внутри программы-например,обращение к методам и потокам для выполнения кода.</target>
        </trans-unit>
        <trans-unit id="b60c725080b624e8208034cd77ad12d11359316b" translate="yes" xml:space="preserve">
          <source>Maintenance is the number one thing it solves for me.  It guarantees I am using interfaces so that two classes are not intimate with each other.</source>
          <target state="translated">Обслуживание-это то,что для меня решается номер один.Это гарантирует,что я использую интерфейсы,чтобы два класса не были близки друг другу.</target>
        </trans-unit>
        <trans-unit id="5816c432181bcebf9594b545acf0e0a8249ac7eb" translate="yes" xml:space="preserve">
          <source>Many people, many carafes of water, many plastic cups.</source>
          <target state="translated">Много людей,много кафе с водой,много пластиковых стаканчиков.</target>
        </trans-unit>
        <trans-unit id="c7cec8240199ab24f4d77dd56821078384a55689" translate="yes" xml:space="preserve">
          <source>Modern Web applications with an MVC architecture depends on the framework to do URL Routing and put Controllers in place for the framework to call.</source>
          <target state="translated">Современные веб-приложения с архитектурой MVC зависят от фреймворка для выполнения маршрутизации URL-адресов и установки контроллеров для вызова фреймворка.</target>
        </trans-unit>
        <trans-unit id="1c2a9ecda48a6efc160875050fa4462dcb9abb1a" translate="yes" xml:space="preserve">
          <source>Modules make no assumptions about what other systems do but rely on their contracts.</source>
          <target state="translated">Модули не делают никаких предположений о том,что делают другие системы,но полагаются на их контракты.</target>
        </trans-unit>
        <trans-unit id="6f982201a39d7ef87a3c876a038f8a4fa0dc564a" translate="yes" xml:space="preserve">
          <source>More flexible, implementation can be decided in runtime</source>
          <target state="translated">Более гибкая,реализация может быть решена во время выполнения.</target>
        </trans-unit>
        <trans-unit id="c63d9dccb6ce34a0f517acb6938ddacea50ee998" translate="yes" xml:space="preserve">
          <source>Now the client creating the &lt;code&gt;TextEditor&lt;/code&gt; class has the control over which &lt;code&gt;SpellChecker&lt;/code&gt; implementation to use because we're injecting the dependency to the &lt;code&gt;TextEditor&lt;/code&gt; signature.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Теперь клиент, создающий &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;класс &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; имеет контроль над тем, какую &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;реализацию &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; использовать, потому что мы внедряем зависимость в &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;сигнатуру &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="13ba27318305b67266dadd1df67822736823650f" translate="yes" xml:space="preserve">
          <source>Now when we discuss about the principle of IoC, we use to forget about the Hollywood. For IoC, there has to be three element, a Hollywood, you and a task like to fulfill your dream.</source>
          <target state="translated">Теперь,когда мы обсуждаем принцип IoC,мы забываем о Голливуде.Для IoC должно быть три элемента,Голливуд,ты и задача,как осуществить свою мечту.</target>
        </trans-unit>
        <trans-unit id="794e86e282511605a39174ab8310c8df0912dd6e" translate="yes" xml:space="preserve">
          <source>Oh yeah, there are testability concerns, but they are secondary to the benefits of IoC/DI.</source>
          <target state="translated">О да,есть проблемы с контролепригодностью,но они вторичны по отношению к преимуществам ИОКДИ.</target>
        </trans-unit>
        <trans-unit id="2a0b2431eb5e9cf2d9dbb360cae6c15a32ebeb86" translate="yes" xml:space="preserve">
          <source>Personally I see the strong points of IoC and I really like them but I tend to avoid IoC whenever possible because it turns your software into a collection of classes that no longer constitute a &quot;real&quot; program but just something that needs to be put together by XML configuration or annotation metadata and would fall (and falls) apart without it.</source>
          <target state="translated">Лично я вижу сильные стороны IoC,и они мне очень нравятся,но я стараюсь избегать IoC,когда это возможно,потому что это превращает ваше программное обеспечение в набор классов,которые больше не представляют собой &quot;настоящую&quot; программу,а просто нечто,что должно быть собрано воедино конфигурацией XML или метаданными аннотаций,и без этого оно бы развалилось (и развалилось)на части.</target>
        </trans-unit>
        <trans-unit id="eb08e7347d828558b092b9e77e0fb5458ce9a2d2" translate="yes" xml:space="preserve">
          <source>Programming speaking</source>
          <target state="translated">Программирование</target>
        </trans-unit>
        <trans-unit id="042aa6d6a63ef4409a0e20afcb0ca7083c68c8af" translate="yes" xml:space="preserve">
          <source>Pros:</source>
          <target state="translated">Pros:</target>
        </trans-unit>
        <trans-unit id="8136f601ed9917039203c9b2cbe0a294c9649438" translate="yes" xml:space="preserve">
          <source>Read article for further info and description of benefits such as:</source>
          <target state="translated">Читайте статью для получения дополнительной информации и описания таких преимуществ:</target>
        </trans-unit>
        <trans-unit id="45c3dc1c7731c6185824876ed514e54f71bacb64" translate="yes" xml:space="preserve">
          <source>Reference:</source>
          <target state="translated">Reference:</target>
        </trans-unit>
        <trans-unit id="7732c541c1ffea8567dc88af68f95f74152053da" translate="yes" xml:space="preserve">
          <source>Replacing modules has no side effect on other modules</source>
          <target state="translated">Замена модулей не оказывает побочного эффекта на другие модули.</target>
        </trans-unit>
        <trans-unit id="bd138957d96ba7b23780bcada6b530b96227fe96" translate="yes" xml:space="preserve">
          <source>Separate &lt;strong&gt;what&lt;/strong&gt;-to-do part from &lt;strong&gt;when&lt;/strong&gt;-to-do part.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Отделите часть &amp;laquo; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;что&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; делать&amp;raquo; от части &amp;laquo; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;когда&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; делать&amp;raquo;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="059afaba1584e036b6791b838c1e68d09e963a7e" translate="yes" xml:space="preserve">
          <source>Since already there are many answers for the question but none of them shows the breakdown of Inversion Control term I see an opportunity to give a more concise and useful answer.</source>
          <target state="translated">Так как на вопрос уже есть много ответов,но ни один из них не показывает разбивку термина Inversion Control,я вижу возможность дать более лаконичный и полезный ответ.</target>
        </trans-unit>
        <trans-unit id="653efab96f1cc6697e2adadee9923a19cc942f75" translate="yes" xml:space="preserve">
          <source>So now control is inverted... instead of the computer accepting user input in a fixed order, the user controls the order in which the data is entered, and when the data is saved in the database.</source>
          <target state="translated">Так что теперь управление инвертируется...вместо компьютера,принимающего ввод данных от пользователя в фиксированном порядке,пользователь управляет порядком ввода данных,а также тем,когда данные сохраняются в базе данных.</target>
        </trans-unit>
        <trans-unit id="3aa6c886ac387801f1748536a5be995d8bda23e6" translate="yes" xml:space="preserve">
          <source>So number 1 &lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;above&lt;/a&gt;. &lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;What is Inversion of Control?&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Итак, номер 1 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;выше&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Что такое инверсия контроля?&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2c1664d150c0110d8aebe5ffd87821f87f62f6c0" translate="yes" xml:space="preserve">
          <source>So, obviously, IoC is preferred when you like the varieties.</source>
          <target state="translated">Очевидно,что IoC предпочтительнее,когда тебе нравятся сорта.</target>
        </trans-unit>
        <trans-unit id="6c2f7d11ffa12a6a2f23dc757f05ff32b8b7451b" translate="yes" xml:space="preserve">
          <source>So, the idea is pretty much simple. Rather than creating a user application which will control everything, first you create a reusable framework which will control everything then write your custom codes and hook it to the framework to execute those in time.</source>
          <target state="translated">Итак,идея довольно проста.Вместо того,чтобы создавать пользовательское приложение,которое будет контролировать все,сначала вы создаете фреймворк многоразового использования,который будет контролировать все,а затем писать свои пользовательские коды и подключить его к фреймворку,чтобы выполнить их вовремя.</target>
        </trans-unit>
        <trans-unit id="17cd0a1fe505e5c89d3f463669d21beac2c45c69" translate="yes" xml:space="preserve">
          <source>Summary of above relationship for Inversion of Control available -  &lt;a href=&quot;http://dzone.com/articles/inversion-of-coupling-control&quot;&gt;http://dzone.com/articles/inversion-of-coupling-control&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Резюме вышеуказанных отношений для Инверсии Контроля доступно - &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://dzone.com/articles/inversion-of-coupling-control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://dzone.com/articles/inversion-of-coupling-control&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5f87445ee9546ceda6f15cc4651858d83a401071" translate="yes" xml:space="preserve">
          <source>Suppose you are an object. And you go to a restaurant:</source>
          <target state="translated">Предположим,что ты-объект.И ты пойдешь в ресторан:</target>
        </trans-unit>
        <trans-unit id="a931c37e5c6a3008d1f1d032d8bc063328c40fe2" translate="yes" xml:space="preserve">
          <source>Suppose your code is a group of workers. They need to build a car. These workers need a place and tools (a software framework) to build the car. A &lt;strong&gt;traditional&lt;/strong&gt; software framework will be like a garage with many tools. So the workers need to make a plan themselves and use the tools to build the car. Building a car is not an easy business, it will be really hard for the workers to plan and cooperate properly. A &lt;strong&gt;modern&lt;/strong&gt; software framework will be like a modern car factory with all the facilities and managers in place. The workers do not have to make any plan, the managers (part of the framework, they are the smartest people and made the most sophisticated plan) will help coordinate so that the workers know when to do their job (framework calls your code). The workers just need to be flexible enough to use any tools the managers give to them (by using Dependency Injection).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Предположим, ваш код представляет собой группу работников. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Им нужно построить машину. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Этим работникам нужно место и инструменты (программная структура) для сборки автомобиля. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Традиционные&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; рамки программного обеспечения будут как гараж с большим количеством инструментов. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Поэтому рабочие должны сами составить план и использовать инструменты для сборки автомобиля. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Создание автомобиля - дело непростое, рабочим будет очень сложно правильно планировать и сотрудничать. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;современный&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Программная структура будет похожа на современный автомобильный завод со всеми необходимыми удобствами и менеджерами. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Рабочим не нужно составлять никакого плана, менеджеры (часть структуры, они самые умные люди и разработали самый сложный план) помогут координировать действия, чтобы работники знали, когда выполнять свою работу (среда называет ваш код). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Рабочие должны быть достаточно гибкими, чтобы использовать любые инструменты, которые им дают менеджеры (используя Dependency Injection).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="819e65d07437a790910bd253a4b815127c82c5c0" translate="yes" xml:space="preserve">
          <source>Template method design pattern. template method when-to-do part -- primitive subclass implementation what-to-do part</source>
          <target state="translated">Шаблонный метод проектирования шаблонного метода.шаблонный метод when-to-do part --реализация подкласса примитивов what-to-do part</target>
        </trans-unit>
        <trans-unit id="072d0efec26d9587c786734676ace0311bad2787" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;inversion&lt;/em&gt; part of the Inversion of Control (IoC) is the confusing thing; because &lt;em&gt;inversion&lt;/em&gt; is the relative term. The best way to understand IoC is to forget about that word!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Инверсия&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; часть Инверсии управления (IoC) является запутанной вещью; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;потому что &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;инверсия&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; это относительный термин. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Лучший способ понять IoC - забыть об этом слове!&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e4f1d9cbbfcaefe232b0b17cdd2fa288e6d29b99" translate="yes" xml:space="preserve">
          <source>The Inversion of Control (IoC) and Dependency Injection (DI) patterns are all about removing dependencies from your code.</source>
          <target state="translated">Шаблоны &quot;Инверсия управления&quot; (IoC)и &quot;Впрыск зависимости&quot; (DI)предназначены для удаления зависимостей из вашего кода.</target>
        </trans-unit>
        <trans-unit id="2c005f107282c342e284d1960e28999a1e57b7a8" translate="yes" xml:space="preserve">
          <source>The child has now the ability to ask questions and the parent can respond with answers and permissions. Simply means the control is inverted!
The child is now free to ask questions anytime and though there is still dependency with the parent regarding permissions, he is not dependent in the means of speaking/asking questions.</source>
          <target state="translated">Теперь ребенок имеет возможность задавать вопросы,а родитель может отвечать на них ответами и разрешениями.Просто означает,что управление инвертировано! Теперь ребёнок может задавать вопросы в любое время и,несмотря на то,что родитель всё ещё зависит от его прав,он не зависит от средств постановки вопросов.</target>
        </trans-unit>
        <trans-unit id="e8d779de32d8b41b513d81e1a6cd345473659bd2" translate="yes" xml:space="preserve">
          <source>The consumer, X, needs the consumed class, Y, to accomplish something. That&amp;rsquo;s all good and natural, but does X really need to know that it uses Y?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Потребителю X нужен потребляемый класс Y, чтобы чего-то достичь. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это все хорошо и естественно, но действительно ли X нужно знать, что он использует Y?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb2cd6c0bbc8de86755315a949691e7759ddbfdb" translate="yes" xml:space="preserve">
          <source>The non-techy answer is being able to swap out an engine in a car right before you turn it on. If everything hooks up right (the interface), you are good.</source>
          <target state="translated">Нетехнический ответ заключается в том,что можно поменять двигатель в машине прямо перед тем,как включить его.Если все будет работать правильно (интерфейс),то все будет хорошо.</target>
        </trans-unit>
        <trans-unit id="7786c0b8ac6345f453b43fa76ea60f8d57e64b53" translate="yes" xml:space="preserve">
          <source>The same meeting in the same place, but instead of plastic cups we have a waiter with one glass cup (Singleton)</source>
          <target state="translated">Та же встреча в том же месте,но вместо пластиковых стаканчиков у нас есть официант с одной стеклянной чашкой (Singleton).</target>
        </trans-unit>
        <trans-unit id="542741f771182eac1541609f892959c01a150bb3" translate="yes" xml:space="preserve">
          <source>There are several techniques possible for each of these steps based on the technology/language you are using for your implementation.</source>
          <target state="translated">Существует несколько методик для каждого из этих этапов,основанных на языке технологии,который вы используете для реализации.</target>
        </trans-unit>
        <trans-unit id="f749eb8ad5cf48a5188523fdc79fab2ce30e58b0" translate="yes" xml:space="preserve">
          <source>There are three types of Inversion of Control:</source>
          <target state="translated">Существует три типа инверсии управления:</target>
        </trans-unit>
        <trans-unit id="968de91a1dce32fc6c7756cc1c5d7baf82ecfcaf" translate="yes" xml:space="preserve">
          <source>There arises a new class of bugs where you get your XML config or your annotations wrong and you can spend a lot of time finding out why your IoC container injects a null reference into one of your objects under certain conditions.</source>
          <target state="translated">Возникает новый класс ошибок,когда вы получаете XML-конфигурацию или ваши аннотации неправильно,и вы можете потратить много времени,чтобы выяснить,почему ваш контейнер IoC впрыскивает нулевую ссылку в один из ваших объектов при определенных условиях.</target>
        </trans-unit>
        <trans-unit id="8ff9d8c5ba3c96f3e004ed255d28c54d0ee2f22d" translate="yes" xml:space="preserve">
          <source>There is a decoupling of the execution of a certain task from implementation.</source>
          <target state="translated">Происходит отделение выполнения определенной задачи от реализации.</target>
        </trans-unit>
        <trans-unit id="bb2f0f107a4127228821c8f74e51b0ece1573141" translate="yes" xml:space="preserve">
          <source>Think about yourself as organizer of such meeting. You need the way to message to hotel administration that</source>
          <target state="translated">Подумайте о себе как об организаторе такой встречи.Вам нужен способ сообщить администрации отеля,что</target>
        </trans-unit>
        <trans-unit id="5c60cb7db906ef638719d0294b506aed4ba3a101" translate="yes" xml:space="preserve">
          <source>This is common characteristic of frameworks,
IOC &lt;strong&gt;manages java objects&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это общая характеристика фреймворков, МОК &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;управляет объектами Java&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba7c35b6e4505275374089e51f124be81a7d7fba" translate="yes" xml:space="preserve">
          <source>This simple scenario explains the control is centered to the parent. The child's freedom is restricted and highly depends on the parent's question. The child can &lt;strong&gt;ONLY&lt;/strong&gt; speak when asked to speak, and can &lt;strong&gt;ONLY&lt;/strong&gt; act when granted permission.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Этот простой сценарий объясняет, что контроль сосредоточен на родителя. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Свобода ребенка ограничена и сильно зависит от вопроса родителей. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ребенок может &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;говорить &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ТОЛЬКО в том&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; случае, если его попросят говорить, и может &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;действовать &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ТОЛЬКО&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; при наличии разрешения&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f867a139d0dbe3e72e634a7554a484922278981e" translate="yes" xml:space="preserve">
          <source>What is Inversion of Control</source>
          <target state="translated">Что такое инверсия управления</target>
        </trans-unit>
        <trans-unit id="6b2120a1856f6091491edc697891105447b78317" translate="yes" xml:space="preserve">
          <source>What is Inversion of Control?</source>
          <target state="translated">Что такое &quot;Инверсия управления&quot;?</target>
        </trans-unit>
        <trans-unit id="cf7391c25fc73fff3e34f8a317b9b44c5d611a45" translate="yes" xml:space="preserve">
          <source>What is identified is the following relationship:</source>
          <target state="translated">Идентифицируются следующие отношения:</target>
        </trans-unit>
        <trans-unit id="89511a76c8cbc174d6fe0018b08443f894e18a4b" translate="yes" xml:space="preserve">
          <source>What is it?</source>
          <target state="translated">Что это?</target>
        </trans-unit>
        <trans-unit id="b4f439cf8dc8207caee2714fe1b467c5ad192100" translate="yes" xml:space="preserve">
          <source>What it means in practice is that the method does not depends directly on a particular implementation; any implementation that meets the requirements can be passed as a parameter.</source>
          <target state="translated">На практике это означает,что метод не зависит напрямую от конкретной реализации;любая реализация,отвечающая требованиям,может быть передана в качестве параметра.</target>
        </trans-unit>
        <trans-unit id="abf52a2348eb59964ab851091350a8d3313ed339" translate="yes" xml:space="preserve">
          <source>What it means is that don't go to the Hollywood to fulfill your dream rather if you are worthy then Hollywood will find you and make your dream comes true. Pretty much inverted, huh?</source>
          <target state="translated">Это означает,что не отправляйтесь в Голливуд,чтобы осуществить свою мечту,а если вы достойны,то Голливуд найдет вас и осуществит вашу мечту.Довольно перевернуто,да?</target>
        </trans-unit>
        <trans-unit id="20de39054338a4c253f3ce11367d13296360d90a" translate="yes" xml:space="preserve">
          <source>What we've done here creates a dependency between the &lt;code&gt;TextEditor&lt;/code&gt; and the &lt;code&gt;SpellChecker&lt;/code&gt;.
In an IoC scenario we would instead do something like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;То, что мы сделали здесь, создает зависимость между &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В сценарии IoC мы бы вместо этого сделали что-то вроде этого:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9ef313862d8b18eb5751f0b6070898cb9d7e33b7" translate="yes" xml:space="preserve">
          <source>When is it appropriate to use and when not?</source>
          <target state="translated">Когда уместно использовать,а когда нет?</target>
        </trans-unit>
        <trans-unit id="e521f0561524653f00013217388d2d5971994008" translate="yes" xml:space="preserve">
          <source>When somebody want to drink, she fill cup, drink and throw cup on the floor.</source>
          <target state="translated">Когда кто-то хочет выпить,она наполняет чашку,пьет и бросает чашку на пол.</target>
        </trans-unit>
        <trans-unit id="0b055b735943d522f8380495fc0b53e141cd9b25" translate="yes" xml:space="preserve">
          <source>When somebody want to drink, she get from waiter glass, drink and return it back to waiter.</source>
          <target state="translated">Когда кто-то хочет выпить,она берет из стакана официанта,пьет и возвращает его официанту.</target>
        </trans-unit>
        <trans-unit id="3313b632cba0a4333c123f9494413a6ee77d024e" translate="yes" xml:space="preserve">
          <source>When you use a desktop computer, you have slaved (or say, controlled). You have to sit before a screen and look at it. Using the keyboard to type and using the mouse to navigate. And a badly written software can slave you even more. If you replace your desktop with a laptop, then you somewhat inverted control. You can easily take it and move around. So now you can control where you are with your computer, instead of your computer controlling it.</source>
          <target state="translated">Когда вы используете настольный компьютер,то вы были рабами (или,скажем,управляемыми).Вы должны сидеть перед экраном и смотреть на него.Используйте клавиатуру для набора текста и навигации с помощью мыши.А плохо написанное программное обеспечение может сделать вас рабом еще больше.Если вы заменили рабочий стол ноутбуком,то вы несколько перевернули управление.Вы можете легко взять его и перемещаться.Так что теперь вы можете контролировать,где вы находитесь,со своим компьютером,вместо того,чтобы управлять им.</target>
        </trans-unit>
        <trans-unit id="1a4624ec0be8f6f66ea2c27b7bf9c47a30790d06" translate="yes" xml:space="preserve">
          <source>When you want to change with the Dropbox implementation you have to replace all the lines where &lt;code&gt;new&lt;/code&gt; GoogleDriveService object is constructed and use the DropboxService. Besides when testing the SomeController class the constructor always expects the GoogleDriveService class and the actual methods of this class are triggered.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Когда вы хотите изменить реализацию Dropbox, вы должны заменить все строки, где &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;создается &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; объект GoogleDriveService, и использовать DropboxService. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Кроме того, при тестировании класса SomeController конструктор всегда ожидает класс GoogleDriveService и срабатывают фактические методы этого класса.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aab7b8a12bd75ba2b9b47803cd1e21b97c48b86c" translate="yes" xml:space="preserve">
          <source>When your requirements change say, instead of GoogleDrive you are asked to use the Dropbox. You only need to write a dropbox implementation for the StorageServiceInterface. You don't have make any changes in the controller as long as Dropbox implementation adheres to the StorageServiceInterface.</source>
          <target state="translated">Когда ваши требования меняются,скажем,вместо GoogleDrive вас попросят использовать папку Dropbox.Вам нужно только написать реализацию дропбокса для StorageServiceInterface.Вам не нужно вносить никаких изменений в контроллер до тех пор,пока реализация Dropbox придерживается StorageServiceInterface.</target>
        </trans-unit>
        <trans-unit id="119b801f84f26b70137a5f640c2eaa28d07fdb9f" translate="yes" xml:space="preserve">
          <source>Which problem does it solve?</source>
          <target state="translated">Какую проблему это решает?</target>
        </trans-unit>
        <trans-unit id="fdfd96244f49069c6524042296c538a51a6739a9" translate="yes" xml:space="preserve">
          <source>While testing you can create the mock for the StorageServiceInterface with the dummy implementation where all the methods return null(or any predefined value as per your testing requirement).</source>
          <target state="translated">В процессе тестирования можно создать имитацию StorageServiceInterface с фиктивной реализацией,где все методы возвращают ноль (или любое предопределенное значение в соответствии с вашим требованием к тестированию).</target>
        </trans-unit>
        <trans-unit id="df530f4bc1a8f211d961ad4e0af76790c047eaa9" translate="yes" xml:space="preserve">
          <source>With the above ideas in mind. We still miss a key part of IoC. In the scenario of IoC, the software/object consumer is a sophisticated framework. That means the code you created is not called by yourself. Now let's explain why this way works better for a web application.</source>
          <target state="translated">Имея в виду вышеперечисленные идеи.Нам все еще не хватает ключевой части IoC.В сценарии IoC,потребитель программного проекта является сложной структурой.Это означает,что созданный вами код не называется самим собой.Теперь давайте объясним,почему этот способ лучше работает для веб-приложений.</target>
        </trans-unit>
        <trans-unit id="1d600b9ba9832d2d39a632cc07fe364489b02235" translate="yes" xml:space="preserve">
          <source>X is not dependent on Y anymore</source>
          <target state="translated">X больше не зависит от Y</target>
        </trans-unit>
        <trans-unit id="c521892a4c82d2426166e25844e7b8aaa13cf0a9" translate="yes" xml:space="preserve">
          <source>Your code gets decoupled so you can easily exchange implementations of an interface with alternative implementations</source>
          <target state="translated">Ваш код развязывается,что позволяет легко обмениваться реализациями интерфейса с альтернативными реализациями.</target>
        </trans-unit>
        <trans-unit id="f9c1a75603cd89b8c4cf5d8e81ab5f55c6d22610" translate="yes" xml:space="preserve">
          <source>Your desktop successfully implements IoC in this case. It accepts a variety type of monitors, while the laptop does not, it needs a specific screen to get fixed.</source>
          <target state="translated">Ваш рабочий стол успешно внедряет IoC в этом случае.Он принимает различные типы мониторов,в то время как ноутбук не принимает,он нуждается в определенном экране,чтобы получить исправление.</target>
        </trans-unit>
        <trans-unit id="3f5ad33ace051da1ec338535b39ff8115145080a" translate="yes" xml:space="preserve">
          <source>a) &lt;strong&gt;Most of the developers don't know how to use it&lt;/strong&gt;.  For example, I can create a class called &lt;strong&gt;Customer&lt;/strong&gt; and &lt;strong&gt;I can create automatically&lt;/strong&gt; (using the tools of the IDE) an interface called &lt;strong&gt;ICustomer&lt;/strong&gt;. So, it's not rare to find a folder filled with classes and interfaces, no matter if the interfaces will be reused or not. It's called BLOATED. Some people could argue that &quot;may be in the future we could use it&quot;.  :-|</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;а) &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Большинство разработчиков не знают, как его использовать&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Например, я могу создать класс с именем &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Customer&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;автоматически&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (с помощью инструментов IDE) создать интерфейс под названием &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ICustomer&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Таким образом, не редко можно найти папку, заполненную классами и интерфейсами, независимо от того, будут ли интерфейсы использоваться повторно или нет. Это называется BLOATED. Некоторые люди могут утверждать, что &amp;laquo;возможно, в будущем мы могли бы использовать это&amp;raquo;. : - |&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a65833fb178f769cbd2a9bc9021c43263c312e48" translate="yes" xml:space="preserve">
          <source>a. Alleviates a component from being responsible for managing it's dependencies.</source>
          <target state="translated">a.освобождает компонент от ответственности за управление его зависимостями.</target>
        </trans-unit>
        <trans-unit id="63ff9730ec57ffeb05ecc06369fb7667129e3bef" translate="yes" xml:space="preserve">
          <source>a. Critical when doing test-driven development. Without IoC it can be difficult to test, because the components under test are highly coupled to the rest of the system.</source>
          <target state="translated">a.Критически важно при разработке на основе тестирования.Без IoC тестирование может быть затруднено,так как тестируемые компоненты тесно связаны с остальной частью системы.</target>
        </trans-unit>
        <trans-unit id="44985c1031c23e77f88374731d5a01d00e2f9eb2" translate="yes" xml:space="preserve">
          <source>and she all of time offers to guests drinking.</source>
          <target state="translated">и она все время предлагает гостям выпить.</target>
        </trans-unit>
        <trans-unit id="54acfe4a62ef1001dcfd19dbc445f3cc5fc3822b" translate="yes" xml:space="preserve">
          <source>b) It has some limitings. For example, let's talk about the case of &lt;strong&gt;Dog&lt;/strong&gt; and &lt;strong&gt;Cat&lt;/strong&gt; and I want to add a new service (functionality) only for dogs.  Let's say that I want to calculate the number of days that I need to train a dog (&lt;strong&gt;&lt;code&gt;trainDays()&lt;/code&gt;&lt;/strong&gt;), for cat it's useless, cats can't be trained (I'm joking).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;б) имеет некоторые ограничения. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Например, давайте поговорим о случае с &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dog&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cat,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и я хочу добавить новый сервис (функциональность) только для собак. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Допустим, я хочу подсчитать количество дней, которое мне нужно для дрессировки собаки ( &lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;trainDays()&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), для кошки это бесполезно, кошек нельзя дрессировать (я шучу).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74856b92af69493420e4b9bc813673dbcf236ce2" translate="yes" xml:space="preserve">
          <source>b. Critical when developing modular systems. A modular system is a system whose components can be replaced without requiring recompilation.</source>
          <target state="translated">b.Критически важно при разработке модульных систем.Модульная система-это система,компоненты которой могут быть заменены без необходимости перекомпиляции.</target>
        </trans-unit>
        <trans-unit id="0ea4ef6079611afe337c0be4dc3a73c339faed98" translate="yes" xml:space="preserve">
          <source>b. Provides the ability to swap dependency implementations in different environments.</source>
          <target state="translated">b.Предоставляет возможность обмена реализациями зависимостей в различных средах.</target>
        </trans-unit>
        <trans-unit id="7ea4a797dcd6b8e84153f539da6ccdf8400ac494" translate="yes" xml:space="preserve">
          <source>b.1) If I add &lt;code&gt;trainDays()&lt;/code&gt; to the Service &lt;strong&gt;AnimalService&lt;/strong&gt; then it also works with cats and it's not valid at all.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;б.1) Если я добавляю &lt;/font&gt;&lt;/font&gt; &lt;code&gt;trainDays()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в Service &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AnimalService,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; он также работает с кошками и вообще не действует.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="95864b278c6a1d49a8369149e67975a2e4799356" translate="yes" xml:space="preserve">
          <source>b.2) I can add a condition in &lt;code&gt;trainDays()&lt;/code&gt; where it evaluates which class is used. But it will break completely the IoC.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;б.2) Я могу добавить условие в &lt;/font&gt;&lt;/font&gt; &lt;code&gt;trainDays()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; где он оценивает, какой класс используется. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Но это полностью сломает IoC.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e1d91394a944977977450e66a7e9e0fe56940820" translate="yes" xml:space="preserve">
          <source>b.3) I can create a new class of service called &lt;strong&gt;DogService&lt;/strong&gt; just for the new functionality. But, it will increase the maintainability of the code because we will have two classes of service (with similar functionality) for &lt;strong&gt;Dog&lt;/strong&gt; and it's bad.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;б.3) Я могу создать новый класс обслуживания под названием &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DogService&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; только для новой функциональности. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Но это повысит удобство сопровождения кода, потому что у нас будет два класса обслуживания (со схожей функциональностью) для &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dog,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и это плохо.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4a4aa0aaf5a477fe08cfc207c3e55741b064206c" translate="yes" xml:space="preserve">
          <source>c. Allows a component be tested through mocking of dependencies.</source>
          <target state="translated">c.Позволяет тестировать компонент путем насмешки над зависимостями.</target>
        </trans-unit>
        <trans-unit id="c4ee524cd2357103632cd711413ed416314da6e5" translate="yes" xml:space="preserve">
          <source>c. Critical if there are many cross-cutting concerns which need to addressed, partilarly in an enterprise application.</source>
          <target state="translated">c.Критически важно,если существует много сквозных проблем,которые необходимо решить,главным образом,в рамках общеорганизационного применения.</target>
        </trans-unit>
        <trans-unit id="f6db05452a6d0e2a2846aef3ed85a00204a3ced3" translate="yes" xml:space="preserve">
          <source>d. Provides a mechanism for sharing resources throughout an application.</source>
          <target state="translated">d.Обеспечивает механизм совместного использования ресурсов в рамках всего приложения.</target>
        </trans-unit>
        <trans-unit id="8c0d44faec42652e00c54838468ee5290bfb4dcf" translate="yes" xml:space="preserve">
          <source>if you find yourself copying an entire method and only changing a small piece of the code, you can consider tackling it with inversion of control</source>
          <target state="translated">если вы обнаружили,что копируете весь метод и меняете только маленький кусочек кода,вы можете подумать о том,чтобы справиться с этим с помощью инверсии управления</target>
        </trans-unit>
        <trans-unit id="859c89047ad8d601ec08028577b1b350e4c0a8b6" translate="yes" xml:space="preserve">
          <source>meeting members will need glass of water but not piece of cake.</source>
          <target state="translated">членам собрания понадобится стакан воды,но не кусок пирога.</target>
        </trans-unit>
        <trans-unit id="ac7e8efc5ef7c1cb26918e697fd6e7efbfcb80be" translate="yes" xml:space="preserve">
          <source>thereby controlling the flow of user interaction.</source>
          <target state="translated">тем самым контролируя поток взаимодействия с пользователем.</target>
        </trans-unit>
        <trans-unit id="b849754aed43b9f2f84d1f0fd912c3a39d7f8783" translate="yes" xml:space="preserve">
          <source>xUnit fixture. Setup and TearDown (what-to-do part) -- xUnit frameworks calls to Setup at the beginning and TearDown at the end (when-to-do part)</source>
          <target state="translated">Приспособление для вязания.Setup и TearDown (часть о том,что делать)--xUnit-фреймворк вызывает Setup в начале и TearDown в конце (часть о том,что делать).</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
