<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/3058">
    <body>
      <group id="3058">
        <trans-unit id="373c315627044d8114133a9eceb77e35102452b1" translate="yes" xml:space="preserve">
          <source>&quot;Any nontrivial application is made up of two or more classes that
  collaborate with each other to perform some business logic.
  Traditionally, each object is responsible for obtaining its own
  references to the objects it collaborates with (its dependencies).
  When applying DI, the objects are given their dependencies at creation
  time by some external entity that coordinates each object in the
  system. In other words, dependencies are injected into objects.&quot;</source>
          <target state="translated">&quot;どんな自明なアプリケーションでも、ビジネスロジックを実行するために互いに協力し合う2つ以上のクラスで構成されています。伝統的に、各オブジェクトは、連携しているオブジェクト(その依存関係)への独自の参照を取得する責任があります。DIを適用する場合、オブジェクトは、システム内の各オブジェクトを調整する何らかの外部エンティティによって、作成時にその依存関係が与えられる。言い換えれば、依存関係がオブジェクトに注入されるということです。&quot;</target>
        </trans-unit>
        <trans-unit id="1fbd17eb3e2e00cb03e793a913cd5879c46118b0" translate="yes" xml:space="preserve">
          <source>&amp;ndash; from instantiation to destruction through its BeanFactory.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;ndash;そのBeanFactoryによるインスタンス化から破棄まで。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="068b6ab33b6b4be771ec1212da10f6ec032066f1" translate="yes" xml:space="preserve">
          <source>-Java components that are instantiated by the IoC container are called beans, and the &lt;strong&gt;IoC container manages a bean's scope, lifecycle events, and any AOP features&lt;/strong&gt; for which it has been configured and coded.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-IoCコンテナーによってインスタンス化されるJavaコンポーネントはBeanと呼ばれ、IoCコンテナーは&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Beanのスコープ、ライフサイクルイベント、および&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それが構成およびコーディングされている&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべてのAOP機能&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;管理し&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="afa4d9b9f6de7b5688061d0997a422f279e431e1" translate="yes" xml:space="preserve">
          <source>3 . It becomes more appropriate the minute you have a medium sized project of somewhat more complexity.  I would say it becomes appropriate the minute you start feeling pain.</source>
          <target state="translated">3.それは、あなたがやや複雑な中規模のプロジェクトを持っているときに、より適切になります。痛みを感じ始めた瞬間に適切になると言ってもいいでしょう。</target>
        </trans-unit>
        <trans-unit id="40b8b55e45ad1a598253beb75f7288ba8ba55f1d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;Wikipedia Article&lt;/a&gt;. To me, inversion of control is turning your sequentially written code and turning it into an delegation structure. Instead of your program explicitly controlling everything, your program sets up a class or library with certain functions to be called when certain things happen.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ウィキペディア記事&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私にとって、制御の反転とは、順番に記述されたコードを委任構造に変えることです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プログラムはすべてを明示的に制御する代わりに、特定のことが発生したときに呼び出される特定の関数を備えたクラスまたはライブラリをセットアップします。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b3a6cae60fc41c6d95dc1070dcab2bec94c65c7a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;QUICK EXAMPLE:Inversion of Control is about getting freedom, more flexibility, and less dependency. When you are using a desktop computer, you are slaved (or say, controlled). You have to sit before a screen and look at it. Using keyboard to type and using mouse to navigate. And a bad written software can slave you even more. If you replaced your desktop with a laptop, then you somewhat inverted control. You can easily take it and move around. So now you can control where you are with your computer, instead of computer controlling it&lt;/code&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;QUICK EXAMPLE:Inversion of Control is about getting freedom, more flexibility, and less dependency. When you are using a desktop computer, you are slaved (or say, controlled). You have to sit before a screen and look at it. Using keyboard to type and using mouse to navigate. And a bad written software can slave you even more. If you replaced your desktop with a laptop, then you somewhat inverted control. You can easily take it and move around. So now you can control where you are with your computer, instead of computer controlling it&lt;/code&gt; &lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce6277c62215b72c62f6d7b32405d03e8dab8242" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;After 1 hour...&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1時間後...&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4bf00ad6158c463a4d18359447633037167e612a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;In a technological way of explaining, this is very similar to console/shell/cmd vs GUI interaction. (Which is answer of Mark Harrison above no.2 top answer).
In console, you are dependent on the what is being asked/displayed to you and you can't jump to other menus and features without answering it's question first; following a strict sequential flow. (programmatically this is like a method/function loop).
However with GUI, the menus and features are laid out and the user can select whatever it needs thus having more &lt;strong&gt;control&lt;/strong&gt; and being less restricted. (programmatically, menus have callback when selected and an action takes place).&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;技術的に説明すると、これはコンソール/シェル/ cmdとGUIの相互作用に非常に似ています。 （これは、マークハリソンの2番目のトップアンサーの回答です）。コンソールでは、何が要求/表示されているかに依存しており、最初に質問に回答しないと他のメニューや機能にジャンプできません。厳密な順次フローに従います。 （プログラム的には、これはメソッド/関数ループのようなものです）。ただし、GUIを使用すると、メニューと機能がレイアウトされ、ユーザーは必要なものをすべて選択できるため、より多くの&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;制御&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が可能になり、制限が緩和されます。 （プログラムでは、メニューを選択するとコールバックが発生し、アクションが実行されます）。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ed29e8d6239fa919bfe90a1309aaa619ab390e6c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;With this objects tell thier dependencies.
And spring makes it available. &lt;br/&gt;This leads to loosely coupled application development.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このオブジェクトを使用すると、依存関係がわかります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして春はそれを利用できるようにします。&lt;/font&gt;&lt;/font&gt;&lt;br/&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、疎結合のアプリケーション開発につながります。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="288921ce6b306091d7e29a08f49c763343c42534" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;*Parent&lt;/strong&gt;: You can only speak when I ask you questions and you can only act when I give you permission.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;*保護者&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：私が質問した場合にのみ発言でき、許可した場合にのみ行動できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c0849807fdb7fca5c56ad0f55c3e8ce3038f606" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;The control of the dependencies is inverted from one being called to the one calling.&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依存関係の制御は、呼び出されているものから呼び出しているものに逆転します。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1f1651d8874b325c4ed4c493b808a5d27b680253" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: (Wants to play but since there's no question from the parent, the child can't do anything).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;子供&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：（遊びたいが、親からの質問がないので、子供は何もできない）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba8aa85f4075a8f58fc6dbfbaed6f4e152f4edf4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: (finally is able to play).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;子供&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：（最終的に遊ぶことができます）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb2030779c1e6c6a7bb69d41c861abf6968afbcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: No.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;子供&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：いいえ。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d4cb53aa68484a8be2e5c3ce16e52da82e925950" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: Yes.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;子供&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：はい。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e948765d7e551575d5bbb9e78278d7dc0f14c8f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Classic code (without Dependency injection)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラシックコード（Dependencyインジェクションなし）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d25c9d64eb9c3856ad367881451af0e0aa609be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Creation Inversion&lt;/strong&gt; 
It can be implemented by the following patterns: Factory Pattern, Service Locator, and Dependency Injection. Creation Inversion helps to eliminate dependencies between types moving the process of dependency objects creation outside of the type that uses these dependency objects. Why dependencies are bad? Here are a couple of examples: direct creation of a new object in your code makes testing harder; it is impossible to change references in assemblies without recompilation (OCP principle violation); you can&amp;rsquo;t easily replace a desktop-UI by a web-UI.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;作成の反転&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; これは、次のパターンで実装できます：ファクトリーパターン、サービスロケーター、および依存性注入。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;作成の反転は、依存関係オブジェクトの作成プロセスを、これらの依存関係オブジェクトを使用するタイプの外に移動する、タイプ間の依存関係を排除するのに役立ちます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依存関係が悪いのはなぜですか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下にいくつかの例を示します。コードに新しいオブジェクトを直接作成すると、テストが難しくなります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;再コンパイルせずにアセンブリの参照を変更することは不可能です（OCP原則違反）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デスクトップUIをWeb UIに簡単に置き換えることはできません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="08e78ee2b7c128a89d211a2bf39b2f84466452c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Dependency Injection(DI):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依存性注入（DI）：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d1b89118884de42df71b6af8b8ea2200c727bc22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:-&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example:-&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="64a28b0eac5fea46185f8873a51b9268bdfe88d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Flow Inversion&lt;/strong&gt; 
Changes control of the flow. For example, you have a console application where you asked to enter many parameters and after each entered parameter you are forced to press Enter. You can apply Flow Inversion here and implement a desktop application where the user can choose the sequence of parameters&amp;rsquo; entering, the user can edit parameters, and at the final step, the user needs to press Enter only once.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;フロー反転フローの&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 制御を変更します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、多くのパラメータを入力するように要求したコンソールアプリケーションがあり、入力した各パラメータの後にEnterキーを押す必要があるとします。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここでフロー反転を適用して、ユーザーがパラメーターの入力シーケンスを選択でき、ユーザーがパラメーターを編集でき、最後のステップでユーザーがEnterキーを1回だけ押す必要があるデスクトップアプリケーションを実装できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cba09dbb242bc98d15d12a8fef257c90c62924a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I shall write down my simple understanding of this two terms:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この2つの用語の簡単な理解を書き留めておきます。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="38d46125888ee3caad2da28aa8d6aa5a8926b541" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I've read a lot of answers for this but if someone is still confused and needs a plus ultra &quot;laymans term&quot; to explain IoC here is my take:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私はこれについて多くの回答を読みましたが、誰かがまだ混乱していて、IoCを説明するためにさらに超「素人用語」が必要な場合は、ここに私の見解があります。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6bf58eb168559f7cf585397ed5dd09bcc2ca3fba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Interface Inversion&lt;/strong&gt; 
Providers shouldn&amp;rsquo;t define an interface. Instead, the consumer should define the interface and providers must implement it. Interface Inversion allows eliminating the necessity to modify the consumer each time when a new provider added.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インターフェース反転&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; プロバイダーはインターフェースを定義すべきではありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに、コンシューマーはインターフェースを定義し、プロバイダーはそれを実装する必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インターフェイスの反転により、新しいプロバイダーが追加されるたびにコンシューマーを変更する必要がなくなります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed0b7b3bd833a3c6061e7d3d4e4435a418101a66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inversion of Control(IoC) Container:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;制御の反転（IoC）コンテナー：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c3fde237e686241fd27580469f73cb15114b6b9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inversion of control as a design guideline serves the following purposes:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;設計ガイドラインとしての制御の反転は、次の目的に役立ちます。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a3b6606a4ce50930db11c9d5745c4e9507283a90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inversion of control&lt;/strong&gt; is when you go to the grocery store and your wife gives you the list of products to buy.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;管理の逆転と&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、食料品店に行き、妻が購入する製品のリストを提供するときです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1cc610b7deb430a2900463e9ef2e6cade3227cf5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: Do you want to eat?</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;保護者&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：食べたいですか？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba949e705d98f2c3b04905c56af2d99f2ae12904" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: I'm back. Do you want to play?</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;保護者&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：帰ってきました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは遊びたいですか？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="586ff1c99fde9c623fd38dc89e47f278ee449a8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: Okay, I'll be back. Wait for me.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;保護者&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：よし、戻ってきます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私を待っててください。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce4d1c01e2c78cc40a78a655d28a601a32149798" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: Permission granted.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;保護者&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：許可が付与されました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3e6a711eba13c601406802a4b5d24f5f621c30a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: This means, you can't ask me if you can eat, play, go to the bathroom or even sleep if I don't ask you.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;保護者&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：これは、食べたり、遊んだり、トイレに行ったり、眠ったりすることができるかどうかを私に尋ねることができないことを意味します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="228fabf1f35817d8a668be417f7bbf490117f1fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Useful links:-&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;便利なリンク：-&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="21b7eafe7407645083182e0bf75e568a7b1481a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using dependency injection&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依存性注入の使用&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fea0286fee454bd929c61270ce0cea0daaee4e58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What problems does it solve?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それはどのような問題を解決しますか？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c14e5a9c9d9ef0696566b4fb6c19a3faae2a437d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When is it appropriate and when not?&lt;/strong&gt;
In my opinion you use DI when you think there are (or there can be) alternative implementations of a class.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いつそれが適切でいつ適切でないのですか？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 私の意見では、クラスの代替実装がある（またはある可能性がある）と考える場合、DIを使用します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="825b03cbbacfbb1b7a19868df499e5872f62c0c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;With IoC:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoCの場合：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bd7ee2632bbdd33b1d9442666a7099f0a028b310" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;With IoC&lt;/strong&gt;: You can ask for &quot;fruit&quot;. You can get different fruits each time you get served. for example, apple, orange, or water melon.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoCの場合&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：「フルーツ」を要求できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたが提供されるたびに、さまざまな果物を得ることができます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、リンゴ、オレンジ、ウォーターメロンなどです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba18cb219c6ee97148042cefde5d4632bbb536d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;With IoC&lt;/strong&gt;: You have a &lt;strong&gt;desktop&lt;/strong&gt; computer and you accidentally break the screen. You find you can just grab almost any desktop monitor from the market, and it works well with your desktop.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoCの場合&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デスクトップ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンピューターを使用していて、誤って画面を壊してしまいます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;市場に出ているほとんどすべてのデスクトップモニターを手に入れることができることがわかり、デスクトップでうまく動作します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0a27438b705ef7753d44c454be364c9f0bede393" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Without IoC:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoCなし：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1d13a77d2a7550cfdb5ca4858f7dcdbc2457d535" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Without IoC&lt;/strong&gt;: You have a &lt;strong&gt;laptop&lt;/strong&gt; computer and you accidentally break the screen. And darn, you find the same model laptop screen is nowhere in the market. So you're stuck.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoCなし&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ラップトップ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンピューターを使用していて、誤って画面を壊してしまいます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ちなみに、同じモデルのノートパソコンの画面はどこにもありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;だからあなたは行き​​詰まっています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="836d4b023c42984531a364fb6c44580d073bca78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Without IoC&lt;/strong&gt;: you ask for &quot;apple&quot;, and you are always served apple when you ask more.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoCがない&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合：「apple」を要求し、さらに要求すると常にappleが提供されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="783fb8f1d9a5b79049829582b02390a06e324449" translate="yes" xml:space="preserve">
          <source>A good read with example</source>
          <target state="translated">実例を交えて読み応えのある一冊</target>
        </trans-unit>
        <trans-unit id="1fc99bcac170ae4802f35453c9045f144a0a97f2" translate="yes" xml:space="preserve">
          <source>A real life example would be given here. Suppose, you want to develop a web application. So, you create a framework which will handle all the common things a web application should handle like handling http request, creating application menu, serving pages, managing cookies, triggering events etc.</source>
          <target state="translated">実際の例を挙げてみましょう。ウェブアプリケーションを開発したいとします。そこで、httpリクエストの処理、アプリケーションメニューの作成、ページの提供、クッキーの管理、イベントのトリガーなど、ウェブアプリケーションが扱うべきすべての一般的なものを扱うフレームワークを作成します。</target>
        </trans-unit>
        <trans-unit id="5b72c852f59e3c77579e7c0c79ad0e52e5d0438f" translate="yes" xml:space="preserve">
          <source>A very simple written explanation can be found here</source>
          <target state="translated">非常に簡単な文章での説明はこちらをご覧ください。</target>
        </trans-unit>
        <trans-unit id="03ce18a84ba0139f8b2d282fb731383609571750" translate="yes" xml:space="preserve">
          <source>After hour or something we have a floor covered of plastic cups and water.</source>
          <target state="translated">時間後とかには床がプラスチックのコップと水で覆われています。</target>
        </trans-unit>
        <trans-unit id="b22ecdbc7467f179e8b80b4a5cb28a7d9453723d" translate="yes" xml:space="preserve">
          <source>Although the workers give the control of managing the project on the top level to the managers (the framework). But it is good to have some professionals help out. This is the concept of IoC truly come from.</source>
          <target state="translated">作業者はトップレベルでのプロジェクト管理のコントロールを管理者(フレームワーク)に委ねていますが。しかし、プロに助けてもらうのは良いことだと思います。これがIoCのコンセプトです。</target>
        </trans-unit>
        <trans-unit id="00fd8444cad967012a1ae67dd61c70de9a3b11a4" translate="yes" xml:space="preserve">
          <source>And once you get into generics, it gets even better.  Imagine having a message publisher that receives records and publishes messages.  It doesn't care what it publishes, but it needs a mapper to take something from a record to a message.</source>
          <target state="translated">そして、ジェネリックに入ると、さらに良いものになります。レコードを受信してメッセージを発行するメッセージパブリッシャーを想像してみてください。何を発行するかは気にしませんが、レコードからメッセージに何かを変換するためのマッパーが必要です。</target>
        </trans-unit>
        <trans-unit id="e69975b42ed25e7f8f28e85f31d62e2a8cb06b1a" translate="yes" xml:space="preserve">
          <source>And then you leave some hooks in your framework where you can put further codes to generate custom menu, pages, cookies or logging some user events etc. On every browser request, your framework will run and executes your custom codes if hooked then serve it back to the browser.</source>
          <target state="translated">そして、カスタムメニュー、ページ、クッキー、ユーザーイベントなどのログを記録するためのコードをさらに置くことができるフレームワークにいくつかのフックを残します。すべてのブラウザのリクエストで、あなたのフレームワークは実行され、フックされている場合は、カスタムコードを実行し、ブラウザに戻ってそれを提供します。</target>
        </trans-unit>
        <trans-unit id="b665befe257f7ff25fb720471835afdb3362429f" translate="yes" xml:space="preserve">
          <source>And this is exactly what the Spring (another IoC container, for example: Guice) does. Instead of let to application create what it need using new keyword (taking plastic cup), Spring IoC container all of time offer to application the same instance (singleton) of needed object(glass of water).</source>
          <target state="translated">そして、これはまさにSpring(別のIoCコンテナ、例えば:Guice)が行うことです。その代わりに、アプリケーションに新しいキーワード(プラスチックカップを取る)を使用して必要なものを作成することを許可するのではなく、Spring IoCコンテナは常にアプリケーションに必要なオブジェクト(水のガラス)の同じインスタンス(シングルトン)を提供しています。</target>
        </trans-unit>
        <trans-unit id="d065037b22d578a8d5a62e61105bf2d8ede75c17" translate="yes" xml:space="preserve">
          <source>Answering only the first part.
What is it?</source>
          <target state="translated">最初の部分だけを答える それは何ですか?</target>
        </trans-unit>
        <trans-unit id="8ae0498fb7e27f3e77d528523d5e9ef00a7a185a" translate="yes" xml:space="preserve">
          <source>Anyway: be reasonable. Design pattern are &lt;strong&gt;good practices&lt;/strong&gt; but not Bible to be preached. Do not stick it everywhere.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とにかく、合理的である。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デザインパターンは&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;良い習慣です&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が、説教する聖書ではありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どこにでも貼り付けないでください。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a5fc50e3ceaa03d10efa641f9932ed3164ec099" translate="yes" xml:space="preserve">
          <source>Application calls Foo</source>
          <target state="translated">アプリケーションはFooを呼び出します。</target>
        </trans-unit>
        <trans-unit id="ac42390e19be354858b8262243637ee16d63efc2" translate="yes" xml:space="preserve">
          <source>Application creates Bar and gives it Bim</source>
          <target state="translated">アプリケーションはBarを作成し、Bimを与えます。</target>
        </trans-unit>
        <trans-unit id="cc24fa2cfa1ade20a4b0568072650d805b3f7a37" translate="yes" xml:space="preserve">
          <source>Application creates Bim</source>
          <target state="translated">アプリケーションはBimを作成します。</target>
        </trans-unit>
        <trans-unit id="70579284eb400d7297fa45f23e86008434a5dae7" translate="yes" xml:space="preserve">
          <source>Application creates Foo</source>
          <target state="translated">アプリケーションはFooを作成します。</target>
        </trans-unit>
        <trans-unit id="c0f19361a5c397f8b9f7a8e3a097732fbca45296" translate="yes" xml:space="preserve">
          <source>Application creates Foo and gives it Bar</source>
          <target state="translated">アプリケーションはFooを作成し、Barを与えます。</target>
        </trans-unit>
        <trans-unit id="1a435d46695a15e5ef97ebb4802372a00c982aa2" translate="yes" xml:space="preserve">
          <source>Application needs Foo (e.g. a controller), so:</source>
          <target state="translated">アプリケーションにはFoo(コントローラなど)が必要なので。</target>
        </trans-unit>
        <trans-unit id="9be6e530a74dcafa45c7b24d7025184525c1bc10" translate="yes" xml:space="preserve">
          <source>Application needs Foo, which needs Bar, which needs Bim, so:</source>
          <target state="translated">アプリケーションはFooを必要とし、それはBimを必要とするBarを必要とするので。</target>
        </trans-unit>
        <trans-unit id="fff41238dbef5b816e589fb9ecf3cbde7896731e" translate="yes" xml:space="preserve">
          <source>Bar creates Bim</source>
          <target state="translated">バーはBimを作成します。</target>
        </trans-unit>
        <trans-unit id="452099fc339bb9ab1a4137666deb3f1f3b017433" translate="yes" xml:space="preserve">
          <source>Bar does something</source>
          <target state="translated">バーは何かをする</target>
        </trans-unit>
        <trans-unit id="2b2cfde5abc29f811788f8a477a12b0d271a2ada" translate="yes" xml:space="preserve">
          <source>Bar needs Bim (a service, a repository, &amp;hellip;), so:</source>
          <target state="translated">BarにはBim（サービス、リポジトリなど）が必要なので、次のようにします。</target>
        </trans-unit>
        <trans-unit id="adf15cc582acf54581c37a950b4076c28cebbc7c" translate="yes" xml:space="preserve">
          <source>Basically, &lt;strong&gt;anything&lt;/strong&gt; with an event loop, callbacks, or execute triggers falls into this category.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本的に、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;イベントループ、コールバック、または実行トリガーを持つ&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ものはすべて&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このカテゴリに分類されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c15542d7fcb269ae139c7a7886a1b2613dd14f5d" translate="yes" xml:space="preserve">
          <source>Before using Inversion of Control you should be well aware of the fact that it has its pros and cons and you should know why you use it if you do so.</source>
          <target state="translated">Inversion of Controlを使用する前に、それには長所と短所があるという事実を十分に認識し、あなたがそれを使用する場合は、なぜそれを使用するのかを知っておく必要があります。</target>
        </trans-unit>
        <trans-unit id="a75d2762f97d0c2ece2927dafe57eaf0e294409f" translate="yes" xml:space="preserve">
          <source>But I think you have to be very careful with it. If you will overuse this pattern, you will make very complicated design and even more complicated code.</source>
          <target state="translated">しかし、これはかなり気をつけないといけないことだと思います。このパターンを使いすぎると、非常に複雑なデザインになってしまい、さらに複雑なコードになってしまいます。</target>
        </trans-unit>
        <trans-unit id="bf33c7e70ae590068b05025538fd39ae51569fdb" translate="yes" xml:space="preserve">
          <source>By extracting an abstract definition of the behavior used by X in Y, illustrated as I below, and letting the consumer X use an instance of that instead of Y it can continue to do what it does without having to know the specifics about Y.</source>
          <target state="translated">以下に説明するように、X が Y で使用する動作の抽象的な定義を抽出し、消費者 X に Y の代わりにそのインスタンスを使用させることで、Y についての詳細を知ることなく、それが行うことを継続することができます。</target>
        </trans-unit>
        <trans-unit id="94d3696bca4e509dbee4b3f2721acf48efbcc91e" translate="yes" xml:space="preserve">
          <source>By implementing Inversion of Control, a software/object consumer get more controls/options over the software/objects, instead of being controlled or having less options.</source>
          <target state="translated">制御の逆転を実装することで、ソフトウェアオブジェクトの消費者は、制御されたり、オプションが少なくなったりする代わりに、ソフトウェアオブジェクトに対してより多くの制御オプションを得ることができます。</target>
        </trans-unit>
        <trans-unit id="a765706b39bb310d1815886a85f5790bb5cddfdd" translate="yes" xml:space="preserve">
          <source>By implementing Inversion of Control, a software/object consumer gets more controls/options over the software/objects, instead of being controlled or having fewer options.</source>
          <target state="translated">制御の逆転を実装することで、ソフトウェアオブジェクトの消費者は、制御されたり、オプションが少なくなったりする代わりに、ソフトウェアオブジェクトに対してより多くの制御オプションを得ることができます。</target>
        </trans-unit>
        <trans-unit id="afc2b6eb93654fed24d8cce3141c211e0dfdd6a4" translate="yes" xml:space="preserve">
          <source>Cons:</source>
          <target state="translated">Cons:</target>
        </trans-unit>
        <trans-unit id="2ef7bd6d6b0fca27c168920a2f37fcb5d9a9e6e9" translate="yes" xml:space="preserve">
          <source>Creating an object within class is called tight coupling, Spring removes this dependency by following a design pattern(DI/IOC). In which object of class in passed in constructor rather than creating in class. More over we give super class reference variable in constructor to define more general structure.</source>
          <target state="translated">クラス内でオブジェクトを作成することをタイトカップリングといいますが、Springはこの依存性をデザインパターン(DIIOC)に従うことで取り除きます。これは、クラス内でオブジェクトを作成するのではなく、コンストラクタでクラスのオブジェクトを渡すというものです。より一般的な構造を定義するために、コンストラクタにスーパークラスの参照変数を与えています。</target>
        </trans-unit>
        <trans-unit id="8e0638a769a99fa369ab8513b8f14693372f58e0" translate="yes" xml:space="preserve">
          <source>DI (Dependency Injection) is about how the control flows in the application. Traditional desktop application had control flow from your application(main() method) to other library method calls, but with DI control flow is inverted that's framework takes care of starting your app, initializing it and invoking your methods whenever required.</source>
          <target state="translated">DI(Dependency Injection)とは、アプリケーション内の制御の流れのことです。従来のデスクトップアプリケーションでは、アプリケーション(main()メソッド)から他のライブラリのメソッド呼び出しへの制御の流れがありましたが、DIでは、アプリの起動、初期化、メソッドの呼び出しまでをフレームワークで行うという制御の流れを逆転させています。</target>
        </trans-unit>
        <trans-unit id="3b1e93f7a994b1c6fa9c849c7f78a08f5f55f101" translate="yes" xml:space="preserve">
          <source>DLL container methods in COM. DllMain, DllCanUnload, etc (what-to-do part) -- COM/OS (when-to-do part)</source>
          <target state="translated">COMのDLLコンテナメソッド DllMain,DllCanUnload など(やるべきこと)--COMOS (やるべきとき)</target>
        </trans-unit>
        <trans-unit id="4b7dce9ad71ae931cbbdb8069b2f958ba77aca4c" translate="yes" xml:space="preserve">
          <source>Dependency Injection and Inversion of Control are related. Dependency Injection is at the &lt;strong&gt;micro&lt;/strong&gt; level and Inversion of Control is at the &lt;strong&gt;macro&lt;/strong&gt; level. You have to eat every bite (implement DI) in order to finish a meal (implement IoC).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依存性注入と制御の反転は関連しています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依存性注入は&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;マイクロ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;レベルであり、制御の反転は&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;マクロ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;レベルです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;食事を終える（IoCを実装する）には、一口（DIを実装する）をすべて食べる必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6ee080601f38ccffcc77ec09e618c93a8a122547" translate="yes" xml:space="preserve">
          <source>Dependency injection generally means &lt;strong&gt;passing an object on which method depends, as a parameter to a method, rather than having the method create the dependent object&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依存関係の注入とは&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通常&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、メソッドが依存するオブジェクトを作成するのではなく、メソッドが依存するオブジェクトをパラメーターとしてメソッドに渡す&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;こと&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;意味し&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4a343e8a0620741fbb66739fd1d46148979f2b5a" translate="yes" xml:space="preserve">
          <source>Dependency injection makes it easy to swap with the different implementation of the injected classes. While unit testing you can inject a dummy implementation, which makes the testing a lot easier.</source>
          <target state="translated">依存関係の注入は、注入されたクラスの異なる実装とのスワップを容易にします。ユニットテストの間にダミーの実装を注入することができます。</target>
        </trans-unit>
        <trans-unit id="92ed562037033112d88e7aaf65217d90ffa2423c" translate="yes" xml:space="preserve">
          <source>Detailed explanation</source>
          <target state="translated">詳しい説明</target>
        </trans-unit>
        <trans-unit id="2fd22edb8e3ea30eab025ef8f4290ffacde4fb8b" translate="yes" xml:space="preserve">
          <source>Do we really need a name by which to describe the difference between procedural and event driven programming? OK, if we need to, but do we need to pick a brand new &quot;bigger than life&quot; name that confuses more than it solves?</source>
          <target state="translated">手続き型プログラミングとイベント駆動型プログラミングの違いを説明するための名前が本当に必要なのでしょうか?必要であればいいのですが、解決するよりも混乱を招くような「人生よりも大きな」新しい名前を選ぶ必要があるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="ce8104f0909bbd49f3a87e76b46fd63af7b23865" translate="yes" xml:space="preserve">
          <source>Don't call us, we'll call you</source>
          <target state="translated">私たちに電話しないで、私たちはあなたに電話します。</target>
        </trans-unit>
        <trans-unit id="5c221fed55ea2a8b9560181babdde0f2e320ba49" translate="yes" xml:space="preserve">
          <source>Ensure that &lt;strong&gt;when&lt;/strong&gt; part knows as &lt;em&gt;little&lt;/em&gt; as possible about &lt;strong&gt;what&lt;/strong&gt; part; and vice versa.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ていることを確認し&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たときに&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一部のように知っている&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;少し&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;について可能な限り&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どのような&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;部分。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;およびその逆。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a357e26edfd850a29c72490b46f8b9e1c7e1c26d" translate="yes" xml:space="preserve">
          <source>Event Handling. Event Handlers (what-to-do part) -- Raising Events (when-to-do part)</source>
          <target state="translated">イベントの処理。イベントハンドラ (何をするかの部分)--イベントの発生 (いつするかの部分)</target>
        </trans-unit>
        <trans-unit id="4681308f589fd3db8982d8895f704006c536728b" translate="yes" xml:space="preserve">
          <source>Every module can focus on what it is designed for.</source>
          <target state="translated">すべてのモジュールは、それが何のために設計されているかに焦点を当てることができます。</target>
        </trans-unit>
        <trans-unit id="37013689579c8310949d1aaa459fbe78604e94c8" translate="yes" xml:space="preserve">
          <source>Ex: Suppose your application stores the user uploaded file in the Google Drive, with DI your controller code may look like this:</source>
          <target state="translated">例:アプリケーションがユーザーがアップロードしたファイルを Google ドライブに保存しているとします。</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="e9044ac31a8995f5ad62b7e9f444f33bf9e08657" translate="yes" xml:space="preserve">
          <source>Foo calls Bar</source>
          <target state="translated">フォーはバーを呼び出します</target>
        </trans-unit>
        <trans-unit id="36a8c8318b6369919a71996fd940aacf3965166d" translate="yes" xml:space="preserve">
          <source>Foo creates Bar</source>
          <target state="translated">FooはBarを作成します。</target>
        </trans-unit>
        <trans-unit id="c2cfcdd995da76d7e30b4bb8c5a58a247fe77380" translate="yes" xml:space="preserve">
          <source>Foo needs Bar (e.g. a service), so:</source>
          <target state="translated">FooはBar(サービスなど)が必要なので。</target>
        </trans-unit>
        <trans-unit id="c40a9c4979dbcd08f9143f72f4f97633ba55f56f" translate="yes" xml:space="preserve">
          <source>For example, in an old school menu, you might have:</source>
          <target state="translated">例えば、昔ながらのメニューであれば、あるかもしれません。</target>
        </trans-unit>
        <trans-unit id="54513be8dda986f2beeef0cb1d533fbca0652e5b" translate="yes" xml:space="preserve">
          <source>For example, let's say that we have two classes : &lt;strong&gt;Dog&lt;/strong&gt; and &lt;strong&gt;Cat&lt;/strong&gt;.   Both shares the same qualities/states: age, size, weight. So instead of creating a class of service called &lt;strong&gt;DogService&lt;/strong&gt; and &lt;strong&gt;CatService&lt;/strong&gt;, I can create a single one called &lt;strong&gt;AnimalService&lt;/strong&gt; that allows to use Dog and Cat only if they use the interface &lt;strong&gt;IAnimal&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、2つのクラス&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dog&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Catがあるとし&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。どちらも、年齢、サイズ、体重など、同じ品質/状態を共有しています。だから、代わりに呼ばれるサービスのクラス作成の&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DogService&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CatServiceを&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、私はと呼ばれる単一のものを作成することができます&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AnimalService&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;彼らはインターフェイスを使用する場合にのみ犬や猫を使用することができます&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IAnimalを&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d60c0cdafbec5fc9cf7874f8725048484c3f63ce" translate="yes" xml:space="preserve">
          <source>For example, say your application has a text editor component and you want to provide spell checking. Your standard code would look something like this:</source>
          <target state="translated">例えば、アプリケーションにテキストエディタコンポーネントがあり、スペルチェックを提供したいとします。標準コードは次のようになります。</target>
        </trans-unit>
        <trans-unit id="b193542666e0549ecc44307cdfa4b9bc29a65958" translate="yes" xml:space="preserve">
          <source>For example, task#1 is to create object.
Without IOC concept, task#1 is supposed to be done by Programmer.But With IOC concept, task#1 would be done by container.</source>
          <target state="translated">例えば、タスク#1はオブジェクトを作成することです。IOCの概念がなければ、タスク#1はプログラマーが行うことになっていますが、IOCの概念があればコンテナが行うことになります。</target>
        </trans-unit>
        <trans-unit id="4c4257d920e8870617eb7c2a571ea4b4696b4faf" translate="yes" xml:space="preserve">
          <source>For those interested in more depth on Inversion of Control a paper has been published outlining a more complete picture of Inversion of Control as a design pattern (OfficeFloor: using office patterns to improve software design &lt;a href=&quot;http://doi.acm.org/10.1145/2739011.2739013&quot;&gt;http://doi.acm.org/10.1145/2739011.2739013&lt;/a&gt; with a free copy available to download from &lt;a href=&quot;http://www.officefloor.net/about.html&quot;&gt;http://www.officefloor.net/about.html&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inversion of Controlの詳細に興味のある方のために、設計パターンとしてのInversion of Controlのより完全な図を概説する論文が公開されました（OfficeFloor：Officeパターンを使用してソフトウェア設計を改善する&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://doi.acm.org/10.1145/2739011.2739013&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://doi.acm.org/10.1145/ 2739011.2739013（&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://www.officefloor.net/about.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://www.officefloor.net/about.html&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;からダウンロードできる無料のコピーを含む&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="530a5c467b34b9f4477df522b08ee9d842c1a1d7" translate="yes" xml:space="preserve">
          <source>Here is how a code not using DI will roughly work:</source>
          <target state="translated">DIを使っていないコードが大まかに動くのはこんな感じです。</target>
        </trans-unit>
        <trans-unit id="8feb0cfc564ed6fe998214e0b617510b751cbf33" translate="yes" xml:space="preserve">
          <source>Here is how a code using DI will roughly work:</source>
          <target state="translated">ここでは、DIを使ったコードがどのように大まかに動くのかを紹介します。</target>
        </trans-unit>
        <trans-unit id="60b0beb3f28af92c7fd7dc62953c72cac128a607" translate="yes" xml:space="preserve">
          <source>However, pragmatically speaking, it has some backwards.</source>
          <target state="translated">しかし、実用的には、多少の後ろめたさがあります。</target>
        </trans-unit>
        <trans-unit id="fcc6e5b27035a345cfafd067265b9d513f1ff521" translate="yes" xml:space="preserve">
          <source>I agree with &lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#3082&quot;&gt;NilObject&lt;/a&gt;, but I'd like to add to this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#3082&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;NilObject&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に同意し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ますが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、これに追加したいと思います。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3bf68460e0fb730dd585b98cc7af3cac3d6aa69c" translate="yes" xml:space="preserve">
          <source>I am definitely loving IoC/DI.</source>
          <target state="translated">IoCDIを絶対に愛しています。</target>
        </trans-unit>
        <trans-unit id="82d4b78078a9c52e303c8ecc8ca5f4c8c95fc3bf" translate="yes" xml:space="preserve">
          <source>I found a very clear example &lt;a href=&quot;http://php-di.org/doc/understanding-di.html&quot;&gt;here&lt;/a&gt; which explains how the 'control is inverted'.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「コントロールが反転する」方法を説明&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する非常に明確な例を&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://php-di.org/doc/understanding-di.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;見つけました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b0fb3f858bf2eab2695294bc696e5aa358bf89cd" translate="yes" xml:space="preserve">
          <source>I found one good example &lt;a href=&quot;http://www.goospoos.com/2009/12/inversion-of-control-basics-with-example/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://www.goospoos.com/2009/12/inversion-of-control-basics-with-example/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 1つの良い例を見つけまし&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;た&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c7dd2bab3cb0cd2991bce40ce3201c3f7a535c6f" translate="yes" xml:space="preserve">
          <source>I like this explanation: &lt;a href=&quot;http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&quot;&gt;http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私はこの説明が好きです：&lt;/font&gt;&lt;a href=&quot;http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1aa23d27c2aa025d7ac4285b379874694217b40b" translate="yes" xml:space="preserve">
          <source>I understand that the answer has already been given here. But I still think, some basics about the inversion of control have to be discussed here in length for future readers.</source>
          <target state="translated">私は、その答えがすでにここで与えられていることを理解しています。しかし、私はまだ思うのですが、制御の逆転に関するいくつかの基本的なことは、今後の読者のために、ここで長々と議論されなければなりません。</target>
        </trans-unit>
        <trans-unit id="937f692b34fc2319d608f1cbd292305bff67b729" translate="yes" xml:space="preserve">
          <source>I will keep things abstract here, You can visit following links for detail understanding of the topic.</source>
          <target state="translated">私はここで抽象的なものを維持します、あなたは、トピックの詳細な理解のために次のリンクを訪問することができます。</target>
        </trans-unit>
        <trans-unit id="33b4f2de83b8d009dfb1e4f0c8f37f73deb35275" translate="yes" xml:space="preserve">
          <source>I wrote it once, but now I can inject many types into this set of code if I publish different types of messages.  I can also write mappers that take a record of the same type and map them to different messages. Using DI with Generics has given me the ability to write very little code to accomplish many tasks.</source>
          <target state="translated">一度書きましたが、異なるタイプのメッセージを公開すれば、このコードのセットに多くのタイプを注入することができるようになりました。また、同じ型のレコードを取って、異なるメッセージにマッピングするマッパーも書けるようになりました。ジェネリックでDIを使うことで、非常に少ないコードで多くのタスクを達成することができるようになりました。</target>
        </trans-unit>
        <trans-unit id="46a53efcdd95296d970c368c25c5a862f47bd55c" translate="yes" xml:space="preserve">
          <source>If you find yourself copying and pasting code around, you're almost always doing &lt;em&gt;something&lt;/em&gt; wrong.  Codified as the design principle &lt;a href=&quot;http://c2.com/xp/OnceAndOnlyOnce.html&quot;&gt;Once and Only Once&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コードをコピーして貼り付けている場合、ほとんどの場合、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;何かが&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;おかしいのです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;設計原則として&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://c2.com/xp/OnceAndOnlyOnce.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1回限りの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コード化&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29ab9727475a88b2c5d04f24a224b5ff059cd20c" translate="yes" xml:space="preserve">
          <source>If you follow these simple two steps, you have done inversion of control:</source>
          <target state="translated">これらの簡単な2つのステップに従っている場合は、制御の反転を行っています。</target>
        </trans-unit>
        <trans-unit id="bf55354f38c64ca9c6750feaf917cc557da9b65e" translate="yes" xml:space="preserve">
          <source>Imagine a parent and child talking to each other.</source>
          <target state="translated">親子で話している姿を想像してみてください。</target>
        </trans-unit>
        <trans-unit id="fddc5beb5789c807e772d70f367d3e0c53630417" translate="yes" xml:space="preserve">
          <source>In IoC the &quot;framework&quot; controls &lt;strong&gt;&lt;em&gt;main()&lt;/em&gt;&lt;/strong&gt; and calls your methods. The &lt;strong&gt;&lt;em&gt;Framework&lt;/em&gt;&lt;/strong&gt; is in control :(</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoCでは、「フレームワーク」が&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;main（）&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;制御し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、メソッドを呼び出します。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;フレームワークは、&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントロールである:(&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="377410213559b2702c94f0b3b1faeaf157754fdc" translate="yes" xml:space="preserve">
          <source>In a GUI program or somesuch, instead we say:</source>
          <target state="translated">GUIプログラムなどでは、代わりに私たちは言います。</target>
        </trans-unit>
        <trans-unit id="794ffcb222e8673e69c250708deea7737d00cdd9" translate="yes" xml:space="preserve">
          <source>In normal s/w development, you write the &lt;strong&gt;&lt;em&gt;main()&lt;/em&gt;&lt;/strong&gt; method and call &quot;library&quot; methods.  &lt;strong&gt;&lt;em&gt;You&lt;/em&gt;&lt;/strong&gt; are in control :)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通常のソフトウェア開発では、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;main（）&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッド&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を記述して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「ライブラリ」メソッドを呼び出します。 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなた&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はコントロールしています:)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3f10d36138f924778c4756832794808cc0e20331" translate="yes" xml:space="preserve">
          <source>In our programming world, &lt;strong&gt;Hollywood&lt;/strong&gt; represent a generic framework (may be written by you or someone else), &lt;strong&gt;you&lt;/strong&gt; represent the user code you wrote and &lt;strong&gt;the task&lt;/strong&gt; represent the thing you want to accomplish with your code. Now you don't ever go to trigger your task by yourself, not in IoC! Rather you have designed everything in such that your framework will trigger your task for you. Thus you have built a reusable framework which can make someone a hero or another one a villain. But that framework is always in charge, it knows when to pick someone and that someone only knows what it wants to be.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私たちのプログラミングの世界では、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ハリウッド&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は一般的なフレームワーク（あなたや他の誰かが作成することもあります）&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表し、あなたが書いたユーザーコードを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表し、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タスク&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はコードで達成したいことを表します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoCではなく、自分でタスクをトリガーすることはありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;むしろ、フレームワークがタスクをトリガーするようにすべてを設計しました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、誰かをヒーローにしたり、別のヒーローを悪役にしたりできる再利用可能なフレームワークを構築しました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、そのフレームワークは常に担当しており、誰かをいつ選ぶかを知っており、誰かがそれが何になりたいかを知っているだけです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="173b21ccdfbf6f494cf6d1444bbd225f45320e1f" translate="yes" xml:space="preserve">
          <source>In programming terms, she passed a callback function &lt;code&gt;getProductList()&lt;/code&gt; to the function you are executing - &lt;code&gt;doShopping()&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プログラミング用語では、彼女はコールバック関数&lt;/font&gt;&lt;/font&gt; &lt;code&gt;getProductList()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を実行中の関数&lt;/font&gt;&lt;/font&gt; &lt;code&gt;doShopping()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83e763a2dee31b60a814d50a0bf409afb468b761" translate="yes" xml:space="preserve">
          <source>In short Control gets inverted from Programmer to container. So, it is called as inversion of control.</source>
          <target state="translated">要するに、プログラマからコンテナへと制御が反転します。そのため、制御の反転と呼ばれています。</target>
        </trans-unit>
        <trans-unit id="8ce30cfb65598251ed25908c4dd40a288377ffb4" translate="yes" xml:space="preserve">
          <source>In the end you always win :)</source>
          <target state="translated">最終的には、あなたはいつも勝っている :)</target>
        </trans-unit>
        <trans-unit id="415bf701ddc37ec878782b3147762d4c810c9f63" translate="yes" xml:space="preserve">
          <source>In the first code example we are instantiating &lt;code&gt;SpellChecker&lt;/code&gt; (&lt;code&gt;this.checker = new SpellChecker();&lt;/code&gt;), which means the &lt;code&gt;TextEditor&lt;/code&gt; class directly depends on the &lt;code&gt;SpellChecker&lt;/code&gt; class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初のコード例では、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をインスタンス化してい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this.checker = new SpellChecker();&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;直接依存してい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="02311f7e83fcf777d1f281214c8986231c3912c0" translate="yes" xml:space="preserve">
          <source>In the illustration above Y implements I and X uses an instance of I. While it&amp;rsquo;s quite possible that X still uses Y what&amp;rsquo;s interesting is that X doesn&amp;rsquo;t know that. It just knows that it uses something that implements I.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上の図では、YがIを実装し、XがIのインスタンスを使用しています。XがYを使用している可能性は十分ありますが、興味深いのは、Xがそれを知らないことです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Iを実装するものを使用していることを知っているだけです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="10b6331947724028e6c4d5b46f4ac577504462aa" translate="yes" xml:space="preserve">
          <source>In the second code example we are creating an abstraction by having the &lt;code&gt;SpellChecker&lt;/code&gt; dependency class in &lt;code&gt;TextEditor&lt;/code&gt; constructor signature (not initializing dependency in class). This allows us to call the dependency then pass it to the TextEditor class like so:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2番目のコード例では&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンストラクターシグネチャに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依存クラスを&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;含める&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことで抽象化を作成して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;います（クラスの依存関係を初期化していません）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これにより、依存関係を呼び出して次のようにTextEditorクラスに渡すことができます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="86e9aa47c02eac4bb61f7fcbb0829f0a43930434" translate="yes" xml:space="preserve">
          <source>In using a container like Castle Windsor, it solves maintenance issues even better.  Being able to swap out a component that goes to a database for one that uses file based persistence without changing a line of code is awesome (configuration change, you're done).</source>
          <target state="translated">Castle Windsor のようなコンテナを使用することで、メンテナンスの問題をより良く解決することができます。データベースに接続するコンポーネントをファイルベースの永続性を使用するコンポーネントとコードの行を変更することなく交換できるのは素晴らしいことです (設定を変更すれば完了です)。</target>
        </trans-unit>
        <trans-unit id="393aff0ab87ccb76f01e199b65f9dfff7969a389" translate="yes" xml:space="preserve">
          <source>Instead if you had the controller class to construct the storage object with the &lt;code&gt;new&lt;/code&gt; keyword like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに、次の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ような&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キーワードで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ストレージオブジェクトを構築するコントローラークラスがある場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd2c07da0630be24a7d3559c8b8807776d8cdf48" translate="yes" xml:space="preserve">
          <source>Interfaces. Component client (when-to-do part) -- Component Interface implementation (what-to-do part)</source>
          <target state="translated">インターフェースです。コンポーネントクライアント(when-to-doの部分)--コンポーネントインタフェースの実装(what-to-doの部分)</target>
        </trans-unit>
        <trans-unit id="85b24615680dc38ffe1f3574074bfc21eff397f1" translate="yes" xml:space="preserve">
          <source>Inversion of Control (IoC) can be quite confusing when it is first encountered.</source>
          <target state="translated">Inversion of Control (IoC)は、最初に遭遇したときには非常に混乱することがあります。</target>
        </trans-unit>
        <trans-unit id="7379f00d78c1620733cf4544b441a1c216d8f4b3" translate="yes" xml:space="preserve">
          <source>Inversion of Control (IoC) has been built on a very simple principle called &lt;strong&gt;Hollywood Principle&lt;/strong&gt;. And it says that,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inversion of Control（IoC）は、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hollywood Principle&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼ばれる非常に単純な原理に基づいて構築されてい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そしてそれは言う、&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6e29ef62a3454337d3ef55e638a0463283e61fd7" translate="yes" xml:space="preserve">
          <source>Inversion of Control (IoC) means to create instances of dependencies first and latter instance of a class (optionally injecting them through constructor), instead of creating an instance of the class first and then the class instance creating instances of dependencies.
Thus, inversion of control &lt;strong&gt;inverts&lt;/strong&gt; the &lt;strong&gt;flow of control&lt;/strong&gt; of the program. &lt;strong&gt;Instead of&lt;/strong&gt; the &lt;strong&gt;callee controlling&lt;/strong&gt; the &lt;strong&gt;flow of control&lt;/strong&gt; (while creating dependencies), the &lt;strong&gt;caller controls the flow of control of the program&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;制御の反転（IoC）は、最初にクラスのインスタンスを作成し、次にクラスインスタンスが依存関係のインスタンスを作成するのではなく、クラスの最初と最後のインスタンスの依存関係のインスタンスを作成することを意味します（オプションでコンストラクターを介してそれらを挿入します）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、制御の&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;反転&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、プログラム&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の制御&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;流れを&lt;/font&gt;&lt;/strong&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;反転&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出し先が制御&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;フローを制御する&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（依存関係を作成している間）の&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出し&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;元がプログラムの制御のフローを制御し&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="447c04d94c54d0ae2f5b843b5618686c41ad12ba" translate="yes" xml:space="preserve">
          <source>Inversion of Control (for methods) = Dependency (state) Injection + Continuation Injection + Thread Injection</source>
          <target state="translated">制御の反転(メソッドの場合)=依存性(状態)注入+継続注入+スレッド注入</target>
        </trans-unit>
        <trans-unit id="3ff7d8358b5e99cc26d5c2e29dcb68ec749052f0" translate="yes" xml:space="preserve">
          <source>Inversion of Control is a generic principle, while Dependency Injection realises this principle as a design pattern for object graph construction (i.e. configuration controls how the objects are referencing each other, rather than the object itself controlling how to get the reference to another object).</source>
          <target state="translated">Inversion of Controlは一般的な原理ですが、Dependency Injectionはこの原理をオブジェクトグラフ構築のデザインパターンとして実現しています(つまり、オブジェクト自体が他のオブジェクトへの参照を取得する方法を制御するのではなく、オブジェクトがどのように相互に参照しているかを設定で制御しています)。</target>
        </trans-unit>
        <trans-unit id="246abcec0d5f703c2373d287bf72d2bb3f4b4db4" translate="yes" xml:space="preserve">
          <source>Inversion of Control is a pattern that implements the Dependency Inversion Principle (DIP). DIP states the following: 1. High-level modules should not depend on low-level modules. Both should depend on abstractions (e.g. interfaces). 2. Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions.</source>
          <target state="translated">制御の逆転は、依存性逆転原理(DIP)を実装したパターンです。DIPは次のように述べています。1.1.高レベルモジュールは低レベルモジュールに依存してはならない。両方とも抽象化されたもの(例えばインターフェース)に依存しているべきである。2.2.抽象化は詳細に依存すべきではありません。詳細(具体的な実装)は抽象化に依存すべきである。</target>
        </trans-unit>
        <trans-unit id="4270e4151e47f0a6838b48ec9ee467895342deec" translate="yes" xml:space="preserve">
          <source>Inversion of Control is what you get when your program callbacks, e.g. like a gui program.</source>
          <target state="translated">Inversion of Controlは、例えばGUIプログラムのようなプログラムのコールバックで得られるものです。</target>
        </trans-unit>
        <trans-unit id="801b879e0e61fbad9fe20e85dfc6244854d4817e" translate="yes" xml:space="preserve">
          <source>Inversion of Control, (or IoC), is about &lt;strong&gt;getting freedom&lt;/strong&gt; (You get married, you lost freedom and you are being controlled. You divorced, you have just implemented Inversion of Control. That's what we called, &quot;decoupled&quot;. Good computer system discourages some very close relationship.) &lt;strong&gt;more flexibility&lt;/strong&gt; (The kitchen in your office only serves clean tap water, that is your only choice when you want to drink. Your boss implemented Inversion of Control by setting up a new coffee machine. Now you get the flexibility of choosing either tap water or coffee.) and &lt;strong&gt;less dependency&lt;/strong&gt; (Your partner has a job, you don't have a job, you financially depend on your partner, so you are controlled. You find a job, you have implemented Inversion of Control. Good computer system encourages in-dependency.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;制御の逆転（またはIoC）は&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;自由を獲得する&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことです（結婚し、自由を失い、制御されています。離婚し、制御の逆転を実装したところです。それが「分離」と呼ばれるものです。優れたコンピューターシステム非常に近い関係はお勧めしません。）&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;柔軟性の向上&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（オフィスのキッチンは、きれいな水道水のみを提供します。これは、飲みたいときに選択できる唯一の選択肢です。上司は、新しいコーヒーマシンをセットアップして、Inversion of Controlを実装しました。これで、水道水かコーヒーのどちらかを選択する柔軟性）そして&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;より少ない依存&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; （あなたのパートナーには仕事があります、あなたには仕事がなく、あなたは経済的にあなたのパートナーに依存しているのであなたはコントロールされています。あなたは仕事を見つけ、あなたはコントロールの反転を実装しました。良いコンピューターシステムは独立を奨励します。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="77e5120da94a1f24fb6b60f891876164cb38ce5d" translate="yes" xml:space="preserve">
          <source>Inversion of Controls is about separating concerns.</source>
          <target state="translated">コントロールの逆転とは、懸念事項を分離することです。</target>
        </trans-unit>
        <trans-unit id="61d07698e52d02e6e124d9b4a9957fccd5ee55fd" translate="yes" xml:space="preserve">
          <source>Inversion of control is a pattern used for decoupling components and layers in the system. The pattern is implemented through injecting dependencies into a component when it is constructed. These dependences are usually provided as interfaces for further decoupling and to support testability. IoC / DI containers such as Castle Windsor, Unity are tools (libraries) which can be used for providing IoC. These tools provide extended features above and beyond simple dependency management, including lifetime, AOP / Interception, policy, etc.</source>
          <target state="translated">制御の逆転は、システム内のコンポーネントとレイヤーをデカップリングするために使用されるパターンです。このパターンは、コンポーネントが構築される際に依存関係を注入することで実装されます。これらの依存関係は、通常、さらにデカップリングを行うためのインターフェースとして提供され、テスト可能性をサポートします。Castle Windsor,UnityなどのIoC DIコンテナは、IoCを提供するために使用できるツール(ライブラリ)です。これらのツールは、ライフタイム、AOP Interception、ポリシーなど、単純な依存関係管理を超えた拡張機能を提供します。</target>
        </trans-unit>
        <trans-unit id="be7841f74b212fbb18a52076953f9299c8fad69a" translate="yes" xml:space="preserve">
          <source>Inversion of control is a practical way to reduce code duplication, and if you find yourself copying an entire method and only changing a small piece of the code, you can consider tackling it with inversion of control. Inversion of control is made easy in many languages through the concept of delegates, interfaces, or even raw function pointers.</source>
          <target state="translated">制御の逆転はコードの重複を減らすための実用的な方法であり、メソッド全体をコピーしてコードの一部だけを変更している場合は、制御の逆転で取り組むことを検討することができます。多くの言語では、デリゲート、インターフェイス、あるいは生の関数ポインタの概念によって、制御の反転を簡単に行うことができます。</target>
        </trans-unit>
        <trans-unit id="72a912fb5b76b85605df21e6d9aa08ac3caa58f5" translate="yes" xml:space="preserve">
          <source>Inversion of control is about transferring control from library to the client. It makes more sense when we talk about a client that injects (passes) a function value (lambda expression) into a higher order function (library function) that controls (changes) the behavior of the library function. A client or framework that injects library dependencies (which carry behavior) into libraries may also be considered IoC</source>
          <target state="translated">制御の逆転とは、ライブラリからクライアントに制御を移すことです。関数値(ラムダ式)を高次の関数(ライブラリ関数)に注入(パス)して、ライブラリ関数の動作を制御(変更)するクライアントの話をすると、より理にかなっています。ライブラリの依存関係(動作を運ぶ)をライブラリに注入するクライアントやフレームワークもIoCとみなされるかもしれません。</target>
        </trans-unit>
        <trans-unit id="c6f3380296dd1859cc46056be7e5c7d7d18517b1" translate="yes" xml:space="preserve">
          <source>IoC / DI to me is pushing out dependencies to the calling objects. Super simple.</source>
          <target state="translated">私にとってのIoC DIは、呼び出したオブジェクトに依存関係を押し出すことです。超シンプルです。</target>
        </trans-unit>
        <trans-unit id="d01f7e74cc075865246062cbffd169c66a84cace" translate="yes" xml:space="preserve">
          <source>IoC in easy terms: It's the use of Interface as a way of specific something (such a field or a parameter) as a wildcard that can be used by some classes. It allows the re-usability of the code.</source>
          <target state="translated">IoCを簡単に言うと 何か(フィールドやパラメータなど)を特定するための手段としてInterfaceをワイルドカードとして使用し、いくつかのクラスで使用することです。コードの再利用性を可能にします。</target>
        </trans-unit>
        <trans-unit id="ecc699e264ec9201c3607773626eecefd4f6379e" translate="yes" xml:space="preserve">
          <source>IoC is about inverting the relationship between your code and third-party code (library/framework):</source>
          <target state="translated">IoCは、自分のコードとサードパーティのコード(ライブラリフレームワーク)の関係を反転させることです。</target>
        </trans-unit>
        <trans-unit id="b1a30e451f848d07595af921a316e8fdf04e8200" translate="yes" xml:space="preserve">
          <source>IoC not only inverts the control flow in your program, it also clouds it considerably. This means you can no longer just read your code and jump from one place to another because the connections that would normally be in your code are not in the code anymore. Instead it is in XML configuration files or annotations and in the code of your IoC container that interprets these metadata.</source>
          <target state="translated">IoCはプログラムの制御フローを逆転させるだけでなく、かなりの曇りをもたらします。これは、通常はコードの中にあるはずの接続がコードの中にないため、コードを読んである場所から別の場所にジャンプすることができなくなったことを意味します。その代わりに、XML 設定ファイルや注釈、そしてこれらのメタデータを解釈する IoC コンテナのコードの中にあります。</target>
        </trans-unit>
        <trans-unit id="129c548401379640498c3bd2d9aeda56d02ded9e" translate="yes" xml:space="preserve">
          <source>Isn&amp;rsquo;t it enough that X knows that it uses something that has the behavior, the methods, properties etc, of Y without knowing who actually implements the behavior?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Xは、だれが実際に動作を実装しているのかを知らずに、Yの動作、メソッド、プロパティなどを持っているものを使用していることを知っていれば十分ではないでしょうか。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="13ba932451564a53b11f07d2fc54611618718a48" translate="yes" xml:space="preserve">
          <source>Isolation of code unit, easier testing</source>
          <target state="translated">コードユニットの分離、簡単なテスト</target>
        </trans-unit>
        <trans-unit id="f93e3134fbbf3855151cbf5494b8689c1ef262d3" translate="yes" xml:space="preserve">
          <source>It allows user of the function to define some parts of it, making it more flexible.</source>
          <target state="translated">これにより、関数の一部を定義することができるようになり、より柔軟性が増します。</target>
        </trans-unit>
        <trans-unit id="5589f7b0110a12ff8abdfca719dfe54ce07e36dd" translate="yes" xml:space="preserve">
          <source>It is a strong motivator for coding against interfaces instead of implementations</source>
          <target state="translated">実装ではなくインターフェースに対してコーディングを行うことは、強い動機付けになります。</target>
        </trans-unit>
        <trans-unit id="9b77b575dc2b25c7a321384bbb10a36aa6f2e8f2" translate="yes" xml:space="preserve">
          <source>It is not appropriate to use in all cases, because the flow of a program can be harder to follow when written this way. It's a useful way to design methods when writing a library that will be reused, but it should be used sparingly in the core of your own program unless it really solves a code duplication problem.</source>
          <target state="translated">このように書くとプログラムの流れがわかりにくくなることがあるので、すべての場合に使うのは適切ではありません。再利用されるライブラリを書くときにメソッドを設計するのには便利な方法ですが、本当にコードの重複問題を解決するのでなければ、自分のプログラムのコア部分では惜しみなく使うべきです。</target>
        </trans-unit>
        <trans-unit id="4374f68d4d13a5a1e95989bd83ee0dde411e4897" translate="yes" xml:space="preserve">
          <source>It says -</source>
          <target state="translated">それは次のように述べています。</target>
        </trans-unit>
        <trans-unit id="93947b7bcccf2b2a7d648e4a9fb3a6910d74deb6" translate="yes" xml:space="preserve">
          <source>It seems that the most confusing thing about &quot;IoC&quot; the acronym and the name for which it stands is that it's too glamorous of a name - almost a noise name.</source>
          <target state="translated">IoC」という頭文字とそれを表す名前が最も紛らわしいのは、あまりにも華やかな名前であることだと思われます-ほとんどノイズの名前です。</target>
        </trans-unit>
        <trans-unit id="8b85e00dbd5642b617bbba6834a701ce8120f842" translate="yes" xml:space="preserve">
          <source>It solves code duplication. For example, in the old days you would manually write your own event loop, polling the system libraries for new events. Nowadays, most modern APIs you simply tell the system libraries what events you're interested in, and it will let you know when they happen.</source>
          <target state="translated">コードの重複を解決します。例えば、昔はシステムライブラリに新しいイベントをポーリングして、独自のイベントループを手動で書いていました。今日では、ほとんどの最新のAPIでは、システムライブラリに興味のあるイベントを伝えるだけで、イベントが発生したときにそれを知らせてくれます。</target>
        </trans-unit>
        <trans-unit id="b051475457c0cb9b82c447aa1f4d625e160eb580" translate="yes" xml:space="preserve">
          <source>It start simple and shows code examples as well.</source>
          <target state="translated">それは簡単に開始し、コード例も示しています。</target>
        </trans-unit>
        <trans-unit id="7cdd8b2cb24570566fcca5c80bc3ce5cdd68603b" translate="yes" xml:space="preserve">
          <source>It's very easy to write unit tests for your code because it depends on nothing else than the objects it accepts in its constructor/setters and you can easily initialize them with the right objects in isolation.</source>
          <target state="translated">コードのユニットテストを書くのは非常に簡単です。</target>
        </trans-unit>
        <trans-unit id="e188bfdb88678f850320d1c8300b33308920af0b" translate="yes" xml:space="preserve">
          <source>Laravel and EJB are examples of such a frameworks.</source>
          <target state="translated">LaravelやEJBはそのようなフレームワークの一例です。</target>
        </trans-unit>
        <trans-unit id="fdff96c467769e0a8335f8e963bf4da65252f786" translate="yes" xml:space="preserve">
          <source>Leaving aside the question of the hygienic, last form of drinking process control is much more effective and economic.</source>
          <target state="translated">衛生的かどうかという問題はさておき、最後の形態の飲料プロセス制御の方がはるかに効果的で経済的である。</target>
        </trans-unit>
        <trans-unit id="07c8b84bfa96ba21d9cc3879005aab0b48bbe962" translate="yes" xml:space="preserve">
          <source>Let invert control.</source>
          <target state="translated">制御を反転させましょう。</target>
        </trans-unit>
        <trans-unit id="ad88ff33863680217c647f3d27552b0f563713ae" translate="yes" xml:space="preserve">
          <source>Let to say that we make some meeting in some hotel.</source>
          <target state="translated">どこかのホテルで打ち合わせをするということにしておきましょう。</target>
        </trans-unit>
        <trans-unit id="7c67342f3bd25bc3faba7eb88fdb1040235adf02" translate="yes" xml:space="preserve">
          <source>Like in this example with TextEditor: if you have only one SpellChecker maybe it is not really necessary to use IoC ? Unless you need to write unit tests or something ...</source>
          <target state="translated">TextEditorを使ったこの例のように:SpellCheckerが1つしかない場合、IoCを使う必要はないのではないでしょうか?ユニットテストか何かを書く必要があるのでなければ</target>
        </trans-unit>
        <trans-unit id="8c62f1035a8da667e2e44f248499b63934ff87a4" translate="yes" xml:space="preserve">
          <source>Looking at Inversion of Control as a design pattern, we need to look at what we are inverting.  Dependency Injection inverts control of constructing a graph of objects. If told in layman's term, inversion of control implies change in flow of control in the program. Eg. In traditional standalone app, we have main method, from where the control gets passed to other third party libraries(in case, we have used third party library's function), but through inversion of control control gets transferred from third party library code to our code, as we are taking the service of third party library.  But there are other aspects that need to be inverted within a program - e.g. invocation of methods and threads to execute the code.</source>
          <target state="translated">制御の反転を設計パターンとして見ると、何を反転させているのかを見る必要があります。依存性注入は、オブジェクトのグラフを構築する制御を反転させます。平たく言えば、制御の反転とは、プログラム内の制御の流れが変わることを意味します。例えば、従来のスタンドアロンアプリでは、メインメソッドがあり、そこから他のサードパーティのライブラリに制御を渡していましたが(サードパーティの関数を使っている場合)、制御の反転によって、サードパーティのライブラリのサービスを利用しているので、サードパーティのライブラリのコードから自分のコードに制御が移ってしまいます。しかし、プログラムの中には、メソッドの呼び出しやコードを実行するためのスレッドなど、制御を反転させなければならない部分もあります。</target>
        </trans-unit>
        <trans-unit id="b60c725080b624e8208034cd77ad12d11359316b" translate="yes" xml:space="preserve">
          <source>Maintenance is the number one thing it solves for me.  It guarantees I am using interfaces so that two classes are not intimate with each other.</source>
          <target state="translated">メンテナンスは、それが私のために解決してくれる一番のものです。それは、2つのクラスが互いに親密ではないように、私がインターフェイスを使用していることを保証してくれます。</target>
        </trans-unit>
        <trans-unit id="5816c432181bcebf9594b545acf0e0a8249ac7eb" translate="yes" xml:space="preserve">
          <source>Many people, many carafes of water, many plastic cups.</source>
          <target state="translated">たくさんの人、たくさんの水のカラフ、たくさんのプラカップ。</target>
        </trans-unit>
        <trans-unit id="c7cec8240199ab24f4d77dd56821078384a55689" translate="yes" xml:space="preserve">
          <source>Modern Web applications with an MVC architecture depends on the framework to do URL Routing and put Controllers in place for the framework to call.</source>
          <target state="translated">MVCアーキテクチャを持つ現代のWebアプリケーションは、URLルーティングを行うフレームワークに依存しており、フレームワークが呼び出すためのコントローラを設置しています。</target>
        </trans-unit>
        <trans-unit id="1c2a9ecda48a6efc160875050fa4462dcb9abb1a" translate="yes" xml:space="preserve">
          <source>Modules make no assumptions about what other systems do but rely on their contracts.</source>
          <target state="translated">モジュールは、他のシステムが何をするかについては何も仮定せず、その契約に依存しています。</target>
        </trans-unit>
        <trans-unit id="6f982201a39d7ef87a3c876a038f8a4fa0dc564a" translate="yes" xml:space="preserve">
          <source>More flexible, implementation can be decided in runtime</source>
          <target state="translated">より柔軟に、実行時に実装を決めることができる</target>
        </trans-unit>
        <trans-unit id="c63d9dccb6ce34a0f517acb6938ddacea50ee998" translate="yes" xml:space="preserve">
          <source>Now the client creating the &lt;code&gt;TextEditor&lt;/code&gt; class has the control over which &lt;code&gt;SpellChecker&lt;/code&gt; implementation to use because we're injecting the dependency to the &lt;code&gt;TextEditor&lt;/code&gt; signature.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;今作成クライアント&lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスは、その上にコントロールがある&lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我々はへの依存性注入しているので、実装は、使用する&lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;署名を。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="13ba27318305b67266dadd1df67822736823650f" translate="yes" xml:space="preserve">
          <source>Now when we discuss about the principle of IoC, we use to forget about the Hollywood. For IoC, there has to be three element, a Hollywood, you and a task like to fulfill your dream.</source>
          <target state="translated">今、IoCの原理を語るとき、私たちはハリウッドのことを忘れています。IoCには、ハリウッド、自分、そして夢を実現するためのタスクの3つの要素が必要です。</target>
        </trans-unit>
        <trans-unit id="794e86e282511605a39174ab8310c8df0912dd6e" translate="yes" xml:space="preserve">
          <source>Oh yeah, there are testability concerns, but they are secondary to the benefits of IoC/DI.</source>
          <target state="translated">そうそう、テスト可能性の懸念はありますが、それはIoCDIの利点の二の次です。</target>
        </trans-unit>
        <trans-unit id="2a0b2431eb5e9cf2d9dbb360cae6c15a32ebeb86" translate="yes" xml:space="preserve">
          <source>Personally I see the strong points of IoC and I really like them but I tend to avoid IoC whenever possible because it turns your software into a collection of classes that no longer constitute a &quot;real&quot; program but just something that needs to be put together by XML configuration or annotation metadata and would fall (and falls) apart without it.</source>
          <target state="translated">個人的にはIoCの長所を理解していますし、本当に好きですが、可能な限りIoCを避ける傾向があります。なぜならば、IoCはソフトウェアをクラスの集合体に変えてしまうからです。</target>
        </trans-unit>
        <trans-unit id="eb08e7347d828558b092b9e77e0fb5458ce9a2d2" translate="yes" xml:space="preserve">
          <source>Programming speaking</source>
          <target state="translated">話すプログラミング</target>
        </trans-unit>
        <trans-unit id="042aa6d6a63ef4409a0e20afcb0ca7083c68c8af" translate="yes" xml:space="preserve">
          <source>Pros:</source>
          <target state="translated">Pros:</target>
        </trans-unit>
        <trans-unit id="8136f601ed9917039203c9b2cbe0a294c9649438" translate="yes" xml:space="preserve">
          <source>Read article for further info and description of benefits such as:</source>
          <target state="translated">さらなる情報や利点の説明などのための記事を読む。</target>
        </trans-unit>
        <trans-unit id="45c3dc1c7731c6185824876ed514e54f71bacb64" translate="yes" xml:space="preserve">
          <source>Reference:</source>
          <target state="translated">Reference:</target>
        </trans-unit>
        <trans-unit id="7732c541c1ffea8567dc88af68f95f74152053da" translate="yes" xml:space="preserve">
          <source>Replacing modules has no side effect on other modules</source>
          <target state="translated">モジュールを交換しても他のモジュールに副作用はありません。</target>
        </trans-unit>
        <trans-unit id="bd138957d96ba7b23780bcada6b530b96227fe96" translate="yes" xml:space="preserve">
          <source>Separate &lt;strong&gt;what&lt;/strong&gt;-to-do part from &lt;strong&gt;when&lt;/strong&gt;-to-do part.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-to-do部分を&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いつ&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -to-do部分&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;分離&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="059afaba1584e036b6791b838c1e68d09e963a7e" translate="yes" xml:space="preserve">
          <source>Since already there are many answers for the question but none of them shows the breakdown of Inversion Control term I see an opportunity to give a more concise and useful answer.</source>
          <target state="translated">すでに質問に対する多くの答えがありますが、どれも逆転制御用語の内訳を示していないので、私はより簡潔で有用な答えを与える機会を参照してください。</target>
        </trans-unit>
        <trans-unit id="653efab96f1cc6697e2adadee9923a19cc942f75" translate="yes" xml:space="preserve">
          <source>So now control is inverted... instead of the computer accepting user input in a fixed order, the user controls the order in which the data is entered, and when the data is saved in the database.</source>
          <target state="translated">つまり、今は制御が逆転しています...コンピュータが一定の順序でユーザーの入力を受け入れるのではなく、ユーザーがデータを入力する順序と、データがデータベースに保存されるタイミングを制御するのです。</target>
        </trans-unit>
        <trans-unit id="3aa6c886ac387801f1748536a5be995d8bda23e6" translate="yes" xml:space="preserve">
          <source>So number 1 &lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;above&lt;/a&gt;. &lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;What is Inversion of Control?&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記の&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 1番&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;制御の反転とは何ですか？&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2c1664d150c0110d8aebe5ffd87821f87f62f6c0" translate="yes" xml:space="preserve">
          <source>So, obviously, IoC is preferred when you like the varieties.</source>
          <target state="translated">だから明らかに、品種が好きな人はIoCが好まれる。</target>
        </trans-unit>
        <trans-unit id="6c2f7d11ffa12a6a2f23dc757f05ff32b8b7451b" translate="yes" xml:space="preserve">
          <source>So, the idea is pretty much simple. Rather than creating a user application which will control everything, first you create a reusable framework which will control everything then write your custom codes and hook it to the framework to execute those in time.</source>
          <target state="translated">ですから、アイデアはとてもシンプルです。すべてを制御するユーザーアプリケーションを作るのではなく、最初にすべてを制御する再利用可能なフレームワークを作り、カスタムコードを書いて、それをフレームワークにフックして実行します。</target>
        </trans-unit>
        <trans-unit id="17cd0a1fe505e5c89d3f463669d21beac2c45c69" translate="yes" xml:space="preserve">
          <source>Summary of above relationship for Inversion of Control available -  &lt;a href=&quot;http://dzone.com/articles/inversion-of-coupling-control&quot;&gt;http://dzone.com/articles/inversion-of-coupling-control&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;利用可能な制御の反転に関する上記の関係の概要 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://dzone.com/articles/inversion-of-coupling-control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-http://dzone.com/articles/inversion-of-coupling-control&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5f87445ee9546ceda6f15cc4651858d83a401071" translate="yes" xml:space="preserve">
          <source>Suppose you are an object. And you go to a restaurant:</source>
          <target state="translated">あなたが物体だとします。そして、あなたはレストランに行きます。</target>
        </trans-unit>
        <trans-unit id="a931c37e5c6a3008d1f1d032d8bc063328c40fe2" translate="yes" xml:space="preserve">
          <source>Suppose your code is a group of workers. They need to build a car. These workers need a place and tools (a software framework) to build the car. A &lt;strong&gt;traditional&lt;/strong&gt; software framework will be like a garage with many tools. So the workers need to make a plan themselves and use the tools to build the car. Building a car is not an easy business, it will be really hard for the workers to plan and cooperate properly. A &lt;strong&gt;modern&lt;/strong&gt; software framework will be like a modern car factory with all the facilities and managers in place. The workers do not have to make any plan, the managers (part of the framework, they are the smartest people and made the most sophisticated plan) will help coordinate so that the workers know when to do their job (framework calls your code). The workers just need to be flexible enough to use any tools the managers give to them (by using Dependency Injection).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コードがワーカーのグループであるとします。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;彼らは車を作る必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらの労働者には、車を組み立てるための場所とツール（ソフトウェアフレームワーク）が必要です。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;伝統的な&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ソフトウェアフレームワークは、多くのツールとガレージのようになります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、労働者は自分で計画を立て、ツールを使って車を組み立てる必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;車を作ることは簡単な仕事ではありません、労働者が適切に計画して協力することは本当に難しいでしょう。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;近代的&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ソフトウェアフレームワークは、すべての設備とマネージャーが配置された現代の自動車工場のようなものです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ワーカーは計画を立てる必要はありません。マネージャー（フレームワークの一部であり、彼らは最も賢い人々であり、最も洗練された計画を立てています）は、ワーカーがいつ仕事をするかを知るために調整を支援します（フレームワークはコードを呼び出します）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ワーカーは、マネージャーが（依存性注入を使用して）提供するツールを使用するのに十分な柔軟性が必要です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="819e65d07437a790910bd253a4b815127c82c5c0" translate="yes" xml:space="preserve">
          <source>Template method design pattern. template method when-to-do part -- primitive subclass implementation what-to-do part</source>
          <target state="translated">テンプレートメソッド設計パターン テンプレートメソッド when-to-do部分 --プリミティブサブクラス実装 what-to-do部分</target>
        </trans-unit>
        <trans-unit id="072d0efec26d9587c786734676ace0311bad2787" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;inversion&lt;/em&gt; part of the Inversion of Control (IoC) is the confusing thing; because &lt;em&gt;inversion&lt;/em&gt; is the relative term. The best way to understand IoC is to forget about that word!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;制御の反転（IoC）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;反転&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;部分は混乱を招くものです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なぜなら、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;反転&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は相対的な用語だからです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoCを理解する最善の方法は、その単語を忘れることです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e4f1d9cbbfcaefe232b0b17cdd2fa288e6d29b99" translate="yes" xml:space="preserve">
          <source>The Inversion of Control (IoC) and Dependency Injection (DI) patterns are all about removing dependencies from your code.</source>
          <target state="translated">Inversion of Control (IoC)パターンと Dependency Injection (DI)パターンは、コードから依存関係を取り除くことを目的としています。</target>
        </trans-unit>
        <trans-unit id="2c005f107282c342e284d1960e28999a1e57b7a8" translate="yes" xml:space="preserve">
          <source>The child has now the ability to ask questions and the parent can respond with answers and permissions. Simply means the control is inverted!
The child is now free to ask questions anytime and though there is still dependency with the parent regarding permissions, he is not dependent in the means of speaking/asking questions.</source>
          <target state="translated">子供は質問できるようになり、親は回答と許可を得て答えることができるようになりました。簡単に言えば、コントロールが逆転しているということです。子供はいつでも質問をすることができるようになり、許可に関する親との依存関係がまだありますが、彼は質問をspeakingaskingの手段に依存していません。</target>
        </trans-unit>
        <trans-unit id="e8d779de32d8b41b513d81e1a6cd345473659bd2" translate="yes" xml:space="preserve">
          <source>The consumer, X, needs the consumed class, Y, to accomplish something. That&amp;rsquo;s all good and natural, but does X really need to know that it uses Y?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;消費者Xは、何かを実行するために消費クラスYを必要とします。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それはすべて自然なことですが、XはYを使用していることを本当に知っている必要がありますか？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb2cd6c0bbc8de86755315a949691e7759ddbfdb" translate="yes" xml:space="preserve">
          <source>The non-techy answer is being able to swap out an engine in a car right before you turn it on. If everything hooks up right (the interface), you are good.</source>
          <target state="translated">非技術的な答えは、電源を入れる直前に車のエンジンを交換できることです。すべてが正しくフックアップされれば(インターフェイス)、問題ありません。</target>
        </trans-unit>
        <trans-unit id="7786c0b8ac6345f453b43fa76ea60f8d57e64b53" translate="yes" xml:space="preserve">
          <source>The same meeting in the same place, but instead of plastic cups we have a waiter with one glass cup (Singleton)</source>
          <target state="translated">同じ場所で同じ会議をしていますが、プラスチックのカップの代わりにガラスのカップを一つ持ったウェイターがいます(シングルトン)</target>
        </trans-unit>
        <trans-unit id="542741f771182eac1541609f892959c01a150bb3" translate="yes" xml:space="preserve">
          <source>There are several techniques possible for each of these steps based on the technology/language you are using for your implementation.</source>
          <target state="translated">実装のために使用している技術言語に基づいて、これらの各ステップにはいくつかの技術が考えられます。</target>
        </trans-unit>
        <trans-unit id="f749eb8ad5cf48a5188523fdc79fab2ce30e58b0" translate="yes" xml:space="preserve">
          <source>There are three types of Inversion of Control:</source>
          <target state="translated">逆転制御には3つのタイプがあります。</target>
        </trans-unit>
        <trans-unit id="968de91a1dce32fc6c7756cc1c5d7baf82ecfcaf" translate="yes" xml:space="preserve">
          <source>There arises a new class of bugs where you get your XML config or your annotations wrong and you can spend a lot of time finding out why your IoC container injects a null reference into one of your objects under certain conditions.</source>
          <target state="translated">XML 設定やアノテーションが間違っていると、IoC コンテナが特定の条件でオブジェクトに NULL 参照を注入してしまうというバグが新たに発生することがあります。</target>
        </trans-unit>
        <trans-unit id="8ff9d8c5ba3c96f3e004ed255d28c54d0ee2f22d" translate="yes" xml:space="preserve">
          <source>There is a decoupling of the execution of a certain task from implementation.</source>
          <target state="translated">あるタスクの実行と実装のデカップリングがあります。</target>
        </trans-unit>
        <trans-unit id="bb2f0f107a4127228821c8f74e51b0ece1573141" translate="yes" xml:space="preserve">
          <source>Think about yourself as organizer of such meeting. You need the way to message to hotel administration that</source>
          <target state="translated">そのような会議の主催者としての自分を考えてみてください。あなたは、ホテルの管理者に以下のことを伝える方法が必要です。</target>
        </trans-unit>
        <trans-unit id="5c60cb7db906ef638719d0294b506aed4ba3a101" translate="yes" xml:space="preserve">
          <source>This is common characteristic of frameworks,
IOC &lt;strong&gt;manages java objects&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これはフレームワークの一般的な特性であり、IOC &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はJavaオブジェクトを管理します&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba7c35b6e4505275374089e51f124be81a7d7fba" translate="yes" xml:space="preserve">
          <source>This simple scenario explains the control is centered to the parent. The child's freedom is restricted and highly depends on the parent's question. The child can &lt;strong&gt;ONLY&lt;/strong&gt; speak when asked to speak, and can &lt;strong&gt;ONLY&lt;/strong&gt; act when granted permission.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この簡単なシナリオは、コントロールが親を中心とすることを説明しています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;子供の自由は制限されており、親の質問に大きく依存しています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;子供は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;話すように求められたときに&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のみ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;話す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことができ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;許可が与えられたときに&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のみ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;行動する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことができ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f867a139d0dbe3e72e634a7554a484922278981e" translate="yes" xml:space="preserve">
          <source>What is Inversion of Control</source>
          <target state="translated">逆転制御とは</target>
        </trans-unit>
        <trans-unit id="6b2120a1856f6091491edc697891105447b78317" translate="yes" xml:space="preserve">
          <source>What is Inversion of Control?</source>
          <target state="translated">逆転制御とは?</target>
        </trans-unit>
        <trans-unit id="cf7391c25fc73fff3e34f8a317b9b44c5d611a45" translate="yes" xml:space="preserve">
          <source>What is identified is the following relationship:</source>
          <target state="translated">識別されるのは、次のような関係です。</target>
        </trans-unit>
        <trans-unit id="89511a76c8cbc174d6fe0018b08443f894e18a4b" translate="yes" xml:space="preserve">
          <source>What is it?</source>
          <target state="translated">それは何ですか?</target>
        </trans-unit>
        <trans-unit id="b4f439cf8dc8207caee2714fe1b467c5ad192100" translate="yes" xml:space="preserve">
          <source>What it means in practice is that the method does not depends directly on a particular implementation; any implementation that meets the requirements can be passed as a parameter.</source>
          <target state="translated">実際には何を意味するかというと、メソッドは特定の実装に直接依存しないということです。</target>
        </trans-unit>
        <trans-unit id="abf52a2348eb59964ab851091350a8d3313ed339" translate="yes" xml:space="preserve">
          <source>What it means is that don't go to the Hollywood to fulfill your dream rather if you are worthy then Hollywood will find you and make your dream comes true. Pretty much inverted, huh?</source>
          <target state="translated">どういうことかというと、夢を叶えるためにハリウッドに行くのではなく、自分に価値があるならば、ハリウッドがあなたを見つけてくれて、夢を叶えてくれるということです。かなり逆の意味ですね。</target>
        </trans-unit>
        <trans-unit id="20de39054338a4c253f3ce11367d13296360d90a" translate="yes" xml:space="preserve">
          <source>What we've done here creates a dependency between the &lt;code&gt;TextEditor&lt;/code&gt; and the &lt;code&gt;SpellChecker&lt;/code&gt;.
In an IoC scenario we would instead do something like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで行ったことにより、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;間に依存関係が作成されます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoCシナリオでは、代わりに次のようなことを行います。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9ef313862d8b18eb5751f0b6070898cb9d7e33b7" translate="yes" xml:space="preserve">
          <source>When is it appropriate to use and when not?</source>
          <target state="translated">どのような時に使うのが適切で、どのような時に使わないのか?</target>
        </trans-unit>
        <trans-unit id="e521f0561524653f00013217388d2d5971994008" translate="yes" xml:space="preserve">
          <source>When somebody want to drink, she fill cup, drink and throw cup on the floor.</source>
          <target state="translated">誰かが飲みたいと思うとき、彼女はコップを満たし、飲み、床の上のコップを投げます。</target>
        </trans-unit>
        <trans-unit id="0b055b735943d522f8380495fc0b53e141cd9b25" translate="yes" xml:space="preserve">
          <source>When somebody want to drink, she get from waiter glass, drink and return it back to waiter.</source>
          <target state="translated">誰かが飲みたいと思った時、彼女はウェイターのグラスを手に入れ、飲んでウェイターに返す。</target>
        </trans-unit>
        <trans-unit id="3313b632cba0a4333c123f9494413a6ee77d024e" translate="yes" xml:space="preserve">
          <source>When you use a desktop computer, you have slaved (or say, controlled). You have to sit before a screen and look at it. Using the keyboard to type and using the mouse to navigate. And a badly written software can slave you even more. If you replace your desktop with a laptop, then you somewhat inverted control. You can easily take it and move around. So now you can control where you are with your computer, instead of your computer controlling it.</source>
          <target state="translated">デスクトップコンピュータを使うとき、あなたは奴隷になっている(というか、コントロールしている)。あなたは、画面の前に座ってそれを見なければなりません。タイプするためにキーボードを使用して、ナビゲートするためにマウスを使用しています。そして、ひどく書かれたソフトウェアは、さらにあなたを奴隷にすることができます。あなたがラップトップとあなたのデスクトップを交換する場合、あなたはやや反転制御します。あなたは簡単にそれを取ると移動することができます。だから今、あなたはあなたのコンピュータではなく、あなたのコンピュータがそれを制御するのではなく、あなたがあなたのコンピュータと一緒にいる場所を制御することができます。</target>
        </trans-unit>
        <trans-unit id="1a4624ec0be8f6f66ea2c27b7bf9c47a30790d06" translate="yes" xml:space="preserve">
          <source>When you want to change with the Dropbox implementation you have to replace all the lines where &lt;code&gt;new&lt;/code&gt; GoogleDriveService object is constructed and use the DropboxService. Besides when testing the SomeController class the constructor always expects the GoogleDriveService class and the actual methods of this class are triggered.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dropbox実装で変更する場合は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; GoogleDriveServiceオブジェクトが作成される&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての行を置き換えて、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DropboxServiceを使用する必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さらに、SomeControllerクラスをテストするとき、コンストラクターは常にGoogleDriveServiceクラスを予期し、このクラスの実際のメソッドがトリガーされます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aab7b8a12bd75ba2b9b47803cd1e21b97c48b86c" translate="yes" xml:space="preserve">
          <source>When your requirements change say, instead of GoogleDrive you are asked to use the Dropbox. You only need to write a dropbox implementation for the StorageServiceInterface. You don't have make any changes in the controller as long as Dropbox implementation adheres to the StorageServiceInterface.</source>
          <target state="translated">GoogleDriveの代わりにDropboxを使用するように要求された場合など、要件が変更された場合には、StorageServiceInterfaceにDropboxの実装を記述するだけで済みます。Dropboxの実装は、StorageServiceInterfaceに対応したものを書くだけです。Dropboxの実装がStorageServiceInterfaceに準拠している限り、コントローラに変更を加える必要はありません。</target>
        </trans-unit>
        <trans-unit id="119b801f84f26b70137a5f640c2eaa28d07fdb9f" translate="yes" xml:space="preserve">
          <source>Which problem does it solve?</source>
          <target state="translated">どの問題を解決するのか?</target>
        </trans-unit>
        <trans-unit id="fdfd96244f49069c6524042296c538a51a6739a9" translate="yes" xml:space="preserve">
          <source>While testing you can create the mock for the StorageServiceInterface with the dummy implementation where all the methods return null(or any predefined value as per your testing requirement).</source>
          <target state="translated">テスト中に、すべてのメソッドがnull(またはテスト要件に応じて定義済みの値)を返すダミー実装でStorageServiceInterface用のモックを作成することができます。</target>
        </trans-unit>
        <trans-unit id="df530f4bc1a8f211d961ad4e0af76790c047eaa9" translate="yes" xml:space="preserve">
          <source>With the above ideas in mind. We still miss a key part of IoC. In the scenario of IoC, the software/object consumer is a sophisticated framework. That means the code you created is not called by yourself. Now let's explain why this way works better for a web application.</source>
          <target state="translated">上記のような考えで 私たちはまだIoCの重要な部分を見逃しています。IoCのシナリオでは、ソフトウェアオブジェクトの消費者は洗練されたフレームワークである。つまり、自分で作成したコードは自分では呼ばれないということです。では、なぜこの方法がウェブアプリケーションに適しているのかを説明しましょう。</target>
        </trans-unit>
        <trans-unit id="1d600b9ba9832d2d39a632cc07fe364489b02235" translate="yes" xml:space="preserve">
          <source>X is not dependent on Y anymore</source>
          <target state="translated">XはYに依存しなくなった</target>
        </trans-unit>
        <trans-unit id="c521892a4c82d2426166e25844e7b8aaa13cf0a9" translate="yes" xml:space="preserve">
          <source>Your code gets decoupled so you can easily exchange implementations of an interface with alternative implementations</source>
          <target state="translated">コードがデカップリングされるので、インターフェイスの実装を別の実装と簡単に交換することができます。</target>
        </trans-unit>
        <trans-unit id="f9c1a75603cd89b8c4cf5d8e81ab5f55c6d22610" translate="yes" xml:space="preserve">
          <source>Your desktop successfully implements IoC in this case. It accepts a variety type of monitors, while the laptop does not, it needs a specific screen to get fixed.</source>
          <target state="translated">あなたのデスクトップは、このケースでは正常にIoCを実装しています。それは様々なタイプのモニターを受け入れますが、ラップトップはそうではないが、それは固定を取得するために特定の画面が必要です。</target>
        </trans-unit>
        <trans-unit id="3f5ad33ace051da1ec338535b39ff8115145080a" translate="yes" xml:space="preserve">
          <source>a) &lt;strong&gt;Most of the developers don't know how to use it&lt;/strong&gt;.  For example, I can create a class called &lt;strong&gt;Customer&lt;/strong&gt; and &lt;strong&gt;I can create automatically&lt;/strong&gt; (using the tools of the IDE) an interface called &lt;strong&gt;ICustomer&lt;/strong&gt;. So, it's not rare to find a folder filled with classes and interfaces, no matter if the interfaces will be reused or not. It's called BLOATED. Some people could argue that &quot;may be in the future we could use it&quot;.  :-|</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a）&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ほとんどの開発者はそれを使用する方法を知りません&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。例えば、私はと呼ばれるクラスを作成することができます&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;お客様を&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私が自動的に作成することができます&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（IDEのツールを使用して）と呼ばれるインターフェース&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ICustomerを&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。したがって、インターフェイスが再利用されるかどうかに関係なく、クラスとインターフェイスで満たされたフォルダを見つけることは珍しくありません。それはBLOATEDと呼ばれています。一部の人々は、「将来的にはそれを使用できるようになるかもしれない」と主張することができます。 ：-|&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a65833fb178f769cbd2a9bc9021c43263c312e48" translate="yes" xml:space="preserve">
          <source>a. Alleviates a component from being responsible for managing it's dependencies.</source>
          <target state="translated">a.コンポーネントの依存関係を管理する責任を軽減します。</target>
        </trans-unit>
        <trans-unit id="63ff9730ec57ffeb05ecc06369fb7667129e3bef" translate="yes" xml:space="preserve">
          <source>a. Critical when doing test-driven development. Without IoC it can be difficult to test, because the components under test are highly coupled to the rest of the system.</source>
          <target state="translated">a.テスト駆動開発を行う際に重要です。IoCがなければ、テスト対象のコンポーネントはシステムの残りの部分と高度に結合されているため、テストが困難になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="44985c1031c23e77f88374731d5a01d00e2f9eb2" translate="yes" xml:space="preserve">
          <source>and she all of time offers to guests drinking.</source>
          <target state="translated">と彼女はすべての時間のゲストに酒を提供しています。</target>
        </trans-unit>
        <trans-unit id="54acfe4a62ef1001dcfd19dbc445f3cc5fc3822b" translate="yes" xml:space="preserve">
          <source>b) It has some limitings. For example, let's talk about the case of &lt;strong&gt;Dog&lt;/strong&gt; and &lt;strong&gt;Cat&lt;/strong&gt; and I want to add a new service (functionality) only for dogs.  Let's say that I want to calculate the number of days that I need to train a dog (&lt;strong&gt;&lt;code&gt;trainDays()&lt;/code&gt;&lt;/strong&gt;), for cat it's useless, cats can't be trained (I'm joking).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;b）いくつかの制限があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;犬&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;猫の&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合について話しましょう&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。犬専用の新しいサービス（機能）を追加したいと思います。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;犬を訓練する必要がある日数を計算したいとしましょう（&lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;trainDays()&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。猫は役に立たないので、猫を訓練することはできません（冗談です）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74856b92af69493420e4b9bc813673dbcf236ce2" translate="yes" xml:space="preserve">
          <source>b. Critical when developing modular systems. A modular system is a system whose components can be replaced without requiring recompilation.</source>
          <target state="translated">b.モジュラーシステムを開発する際に重要なこと モジュラーシステムとは、再コンパイルを必要とせずにコンポーネントを入れ替えることができるシステムのことである。</target>
        </trans-unit>
        <trans-unit id="0ea4ef6079611afe337c0be4dc3a73c339faed98" translate="yes" xml:space="preserve">
          <source>b. Provides the ability to swap dependency implementations in different environments.</source>
          <target state="translated">b.異なる環境で依存関係の実装をスワップする機能を提供します。</target>
        </trans-unit>
        <trans-unit id="7ea4a797dcd6b8e84153f539da6ccdf8400ac494" translate="yes" xml:space="preserve">
          <source>b.1) If I add &lt;code&gt;trainDays()&lt;/code&gt; to the Service &lt;strong&gt;AnimalService&lt;/strong&gt; then it also works with cats and it's not valid at all.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私が追加した場合B.1）&lt;/font&gt;&lt;/font&gt; &lt;code&gt;trainDays()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サービスへの&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AnimalServiceを&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、それも猫で動作し、それがすべてでは有効ではありません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="95864b278c6a1d49a8369149e67975a2e4799356" translate="yes" xml:space="preserve">
          <source>b.2) I can add a condition in &lt;code&gt;trainDays()&lt;/code&gt; where it evaluates which class is used. But it will break completely the IoC.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;b.2）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用するクラスを評価&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する条件を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;trainDays()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;追加でき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、それはIoCを完全に壊します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e1d91394a944977977450e66a7e9e0fe56940820" translate="yes" xml:space="preserve">
          <source>b.3) I can create a new class of service called &lt;strong&gt;DogService&lt;/strong&gt; just for the new functionality. But, it will increase the maintainability of the code because we will have two classes of service (with similar functionality) for &lt;strong&gt;Dog&lt;/strong&gt; and it's bad.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;b.3）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新しい機能のためだけに、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DogService&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;という新しいサービスクラスを作成できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dogに&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は2つのサービスクラス（同様の機能を持つ）が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あり、それが悪い&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、コードの保守性が向上し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4a4aa0aaf5a477fe08cfc207c3e55741b064206c" translate="yes" xml:space="preserve">
          <source>c. Allows a component be tested through mocking of dependencies.</source>
          <target state="translated">c.依存関係をモックしてコンポーネントをテストできるようにします。</target>
        </trans-unit>
        <trans-unit id="c4ee524cd2357103632cd711413ed416314da6e5" translate="yes" xml:space="preserve">
          <source>c. Critical if there are many cross-cutting concerns which need to addressed, partilarly in an enterprise application.</source>
          <target state="translated">c.特にエンタープライズアプリケーションにおいて、対処する必要がある多くの横断的な懸念事項がある場合には、重要です。</target>
        </trans-unit>
        <trans-unit id="f6db05452a6d0e2a2846aef3ed85a00204a3ced3" translate="yes" xml:space="preserve">
          <source>d. Provides a mechanism for sharing resources throughout an application.</source>
          <target state="translated">d.アプリケーション全体でリソースを共有するためのメカニズムを提供する。</target>
        </trans-unit>
        <trans-unit id="8c0d44faec42652e00c54838468ee5290bfb4dcf" translate="yes" xml:space="preserve">
          <source>if you find yourself copying an entire method and only changing a small piece of the code, you can consider tackling it with inversion of control</source>
          <target state="translated">メソッド全体をコピーしてコードの一部だけを変更している場合は、制御の反転を使って対処することを検討してみましょう。</target>
        </trans-unit>
        <trans-unit id="859c89047ad8d601ec08028577b1b350e4c0a8b6" translate="yes" xml:space="preserve">
          <source>meeting members will need glass of water but not piece of cake.</source>
          <target state="translated">ミーティングメンバーには水のグラスが必要ですが、ケーキは必要ありません。</target>
        </trans-unit>
        <trans-unit id="ac7e8efc5ef7c1cb26918e697fd6e7efbfcb80be" translate="yes" xml:space="preserve">
          <source>thereby controlling the flow of user interaction.</source>
          <target state="translated">これにより、ユーザーのインタラクションの流れを制御することができます。</target>
        </trans-unit>
        <trans-unit id="b849754aed43b9f2f84d1f0fd912c3a39d7f8783" translate="yes" xml:space="preserve">
          <source>xUnit fixture. Setup and TearDown (what-to-do part) -- xUnit frameworks calls to Setup at the beginning and TearDown at the end (when-to-do part)</source>
          <target state="translated">xUnit フィクスチャ。Setup と TearDown (what-to-do part)--xUnit フレームワークは、最初に Setup を、最後に TearDown を呼び出す (when-to-do part)--xUnit フレームワークは、最初に Setup を、最後に TearDown を呼び出す (when-to-do part)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
