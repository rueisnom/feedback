<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/3058">
    <body>
      <group id="3058">
        <trans-unit id="373c315627044d8114133a9eceb77e35102452b1" translate="yes" xml:space="preserve">
          <source>&quot;Any nontrivial application is made up of two or more classes that
  collaborate with each other to perform some business logic.
  Traditionally, each object is responsible for obtaining its own
  references to the objects it collaborates with (its dependencies).
  When applying DI, the objects are given their dependencies at creation
  time by some external entity that coordinates each object in the
  system. In other words, dependencies are injected into objects.&quot;</source>
          <target state="translated">&quot;任何非琐碎的应用程序都是由两个或更多的类组成,这些类之间相互协作来执行一些业务逻辑。传统上,每个对象都负责获得自己协作的对象的引用(其依赖关系)。当应用DI时,对象在创建时被一些外部实体赋予了它们的依赖关系,这些外部实体协调着系统中的每个对象。换句话说,依赖关系被注入到对象中。&quot;</target>
        </trans-unit>
        <trans-unit id="1fbd17eb3e2e00cb03e793a913cd5879c46118b0" translate="yes" xml:space="preserve">
          <source>&amp;ndash; from instantiation to destruction through its BeanFactory.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;ndash;从实例化到通过其BeanFactory进行销毁。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="068b6ab33b6b4be771ec1212da10f6ec032066f1" translate="yes" xml:space="preserve">
          <source>-Java components that are instantiated by the IoC container are called beans, and the &lt;strong&gt;IoC container manages a bean's scope, lifecycle events, and any AOP features&lt;/strong&gt; for which it has been configured and coded.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;由IoC容器实例化的Java组件称为bean，而&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC容器管理bean的作用域，生命周期事件以及&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为其配置和编码的&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;任何AOP功能&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="afa4d9b9f6de7b5688061d0997a422f279e431e1" translate="yes" xml:space="preserve">
          <source>3 . It becomes more appropriate the minute you have a medium sized project of somewhat more complexity.  I would say it becomes appropriate the minute you start feeling pain.</source>
          <target state="translated">3.当你有一个中等规模的项目比较复杂的时候,它就会变得更合适。我想说的是,当你开始感觉到疼痛的时候,它就会变得合适。</target>
        </trans-unit>
        <trans-unit id="40b8b55e45ad1a598253beb75f7288ba8ba55f1d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;Wikipedia Article&lt;/a&gt;. To me, inversion of control is turning your sequentially written code and turning it into an delegation structure. Instead of your program explicitly controlling everything, your program sets up a class or library with certain functions to be called when certain things happen.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;维基百科文章&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对我而言，控制权转换是将您顺序编写的代码转换为委托结构。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;程序没有设置明确控制所有内容的程序，而是设置了具有某些功能的类或库，以在发生某些事情时调用它们。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b3a6cae60fc41c6d95dc1070dcab2bec94c65c7a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;QUICK EXAMPLE:Inversion of Control is about getting freedom, more flexibility, and less dependency. When you are using a desktop computer, you are slaved (or say, controlled). You have to sit before a screen and look at it. Using keyboard to type and using mouse to navigate. And a bad written software can slave you even more. If you replaced your desktop with a laptop, then you somewhat inverted control. You can easily take it and move around. So now you can control where you are with your computer, instead of computer controlling it&lt;/code&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;QUICK EXAMPLE:Inversion of Control is about getting freedom, more flexibility, and less dependency. When you are using a desktop computer, you are slaved (or say, controlled). You have to sit before a screen and look at it. Using keyboard to type and using mouse to navigate. And a bad written software can slave you even more. If you replaced your desktop with a laptop, then you somewhat inverted control. You can easily take it and move around. So now you can control where you are with your computer, instead of computer controlling it&lt;/code&gt; &lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce6277c62215b72c62f6d7b32405d03e8dab8242" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;After 1 hour...&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1小时后...&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4bf00ad6158c463a4d18359447633037167e612a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;In a technological way of explaining, this is very similar to console/shell/cmd vs GUI interaction. (Which is answer of Mark Harrison above no.2 top answer).
In console, you are dependent on the what is being asked/displayed to you and you can't jump to other menus and features without answering it's question first; following a strict sequential flow. (programmatically this is like a method/function loop).
However with GUI, the menus and features are laid out and the user can select whatever it needs thus having more &lt;strong&gt;control&lt;/strong&gt; and being less restricted. (programmatically, menus have callback when selected and an action takes place).&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;用技术上的解释，这与console / shell / cmd vs GUI交互非常相似。 （哪个是马克&amp;middot;哈里森的答案高于第二名的最高答案）。在控制台中，您依赖于所要/显示的内容，并且必须先回答问题才能跳转到其他菜单和功能。遵循严格的顺序流程。 （从编程上来说，这就像一个方法/功能循环）。但是，使用GUI可以布置菜单和功能，并且用户可以选择所需的任何内容，从而具有更多的&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制权&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和更少的限制。 （以编程方式，选择菜单时会回调，并且会执行操作）。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ed29e8d6239fa919bfe90a1309aaa619ab390e6c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;With this objects tell thier dependencies.
And spring makes it available. &lt;br/&gt;This leads to loosely coupled application development.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有了这个对象，就可以告诉他们依赖性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;春天使它可用。&lt;/font&gt;&lt;/font&gt;&lt;br/&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这导致松散耦合的应用程序开发。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="288921ce6b306091d7e29a08f49c763343c42534" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;*Parent&lt;/strong&gt;: You can only speak when I ask you questions and you can only act when I give you permission.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;*家长&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：您只有在我问您问题时才能讲话，并且只有在我允许您的情况下才能采取行动。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c0849807fdb7fca5c56ad0f55c3e8ce3038f606" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;The control of the dependencies is inverted from one being called to the one calling.&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依赖性的控制从一个被调用转换为一个调用。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1f1651d8874b325c4ed4c493b808a5d27b680253" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: (Wants to play but since there's no question from the parent, the child can't do anything).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;小孩&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：（想玩，但由于父母没有任何问题，小孩无法做任何事情）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba8aa85f4075a8f58fc6dbfbaed6f4e152f4edf4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: (finally is able to play).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;孩子&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：（最终可以玩）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb2030779c1e6c6a7bb69d41c861abf6968afbcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: No.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;小孩&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：没有&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d4cb53aa68484a8be2e5c3ce16e52da82e925950" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: Yes.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;孩子&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：是的。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e948765d7e551575d5bbb9e78278d7dc0f14c8f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Classic code (without Dependency injection)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;经典代码（无依赖注入）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d25c9d64eb9c3856ad367881451af0e0aa609be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Creation Inversion&lt;/strong&gt; 
It can be implemented by the following patterns: Factory Pattern, Service Locator, and Dependency Injection. Creation Inversion helps to eliminate dependencies between types moving the process of dependency objects creation outside of the type that uses these dependency objects. Why dependencies are bad? Here are a couple of examples: direct creation of a new object in your code makes testing harder; it is impossible to change references in assemblies without recompilation (OCP principle violation); you can&amp;rsquo;t easily replace a desktop-UI by a web-UI.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;创建反转&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 可以通过以下模式实现：工厂模式，服务定位器和依赖注入。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;创建反转有助于消除类型之间的依赖关系，从而将依赖关系对象的创建过程移到使用这些依赖关系对象的类型之外。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为什么依赖关系不好？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这里有几个例子：在代码中直接创建一个新对象会使测试更加困难。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不重新编译就不可能在程序集中更改引用（违反OCP原则）；&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您无法轻松地通过网络界面替换桌面界面。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="08e78ee2b7c128a89d211a2bf39b2f84466452c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Dependency Injection(DI):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依赖注入（DI）：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d1b89118884de42df71b6af8b8ea2200c727bc22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:-&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example:-&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="64a28b0eac5fea46185f8873a51b9268bdfe88d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Flow Inversion&lt;/strong&gt; 
Changes control of the flow. For example, you have a console application where you asked to enter many parameters and after each entered parameter you are forced to press Enter. You can apply Flow Inversion here and implement a desktop application where the user can choose the sequence of parameters&amp;rsquo; entering, the user can edit parameters, and at the final step, the user needs to press Enter only once.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;流反转&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 更改&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;流的&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如，您有一个控制台应用程序，在其中您要求输入许多参数，并且在每个输入的参数之后都必须按Enter键。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可以在此处应用Flow Inversion并实现一个桌面应用程序，用户可以在其中选择参数的输入顺序，用户可以编辑参数，最后，用户只需按Enter键一次。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cba09dbb242bc98d15d12a8fef257c90c62924a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I shall write down my simple understanding of this two terms:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我将写下对这两个术语的简单理解：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="38d46125888ee3caad2da28aa8d6aa5a8926b541" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I've read a lot of answers for this but if someone is still confused and needs a plus ultra &quot;laymans term&quot; to explain IoC here is my take:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我已经阅读了很多答案，但是如果有人仍然感到困惑并且需要一个加深的&amp;ldquo; laymans术语&amp;rdquo;来解释IoC，这是我的看法：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6bf58eb168559f7cf585397ed5dd09bcc2ca3fba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Interface Inversion&lt;/strong&gt; 
Providers shouldn&amp;rsquo;t define an interface. Instead, the consumer should define the interface and providers must implement it. Interface Inversion allows eliminating the necessity to modify the consumer each time when a new provider added.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;接口反转&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 提供程序不应定义接口。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;取而代之的是，消费者应该定义接口，提供者必须实现它。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;接口反转允许消除每次添加新的提供程序时修改使用者的必要性。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed0b7b3bd833a3c6061e7d3d4e4435a418101a66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inversion of Control(IoC) Container:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制反转（IoC）容器：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c3fde237e686241fd27580469f73cb15114b6b9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inversion of control as a design guideline serves the following purposes:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将控制反转作为设计准则可达到以下目的：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a3b6606a4ce50930db11c9d5745c4e9507283a90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inversion of control&lt;/strong&gt; is when you go to the grocery store and your wife gives you the list of products to buy.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制权&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是当您去杂货店，妻子给您要购买的产品清单时发生的。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1cc610b7deb430a2900463e9ef2e6cade3227cf5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: Do you want to eat?</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;父母&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：你想吃吗？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba949e705d98f2c3b04905c56af2d99f2ae12904" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: I'm back. Do you want to play?</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;父母&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：我回来了。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;你想玩吗？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="586ff1c99fde9c623fd38dc89e47f278ee449a8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: Okay, I'll be back. Wait for me.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;父母&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：好的，我会回来的。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;等等我。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce4d1c01e2c78cc40a78a655d28a601a32149798" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: Permission granted.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;父级&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：已授予权限。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3e6a711eba13c601406802a4b5d24f5f621c30a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: This means, you can't ask me if you can eat, play, go to the bathroom or even sleep if I don't ask you.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;父母&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：这就是说，如果我不问你，你不能问我是否可以吃饭，玩耍，上厕所甚至睡觉。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="228fabf1f35817d8a668be417f7bbf490117f1fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Useful links:-&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有用的链接：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="21b7eafe7407645083182e0bf75e568a7b1481a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using dependency injection&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用依赖注入&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fea0286fee454bd929c61270ce0cea0daaee4e58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What problems does it solve?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它解决什么问题？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c14e5a9c9d9ef0696566b4fb6c19a3faae2a437d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When is it appropriate and when not?&lt;/strong&gt;
In my opinion you use DI when you think there are (or there can be) alternative implementations of a class.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;什么时候合适，什么时候不合适？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 在我看来，当您认为有（或可能有）一个类的替代实现时，可以使用DI。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="825b03cbbacfbb1b7a19868df499e5872f62c0c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;With IoC:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用IoC：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bd7ee2632bbdd33b1d9442666a7099f0a028b310" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;With IoC&lt;/strong&gt;: You can ask for &quot;fruit&quot;. You can get different fruits each time you get served. for example, apple, orange, or water melon.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用IoC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：您可以要求&amp;ldquo;水果&amp;rdquo;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;每次上菜都可以得到不同的水果。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如，苹果，橙子或西瓜。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba18cb219c6ee97148042cefde5d4632bbb536d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;With IoC&lt;/strong&gt;: You have a &lt;strong&gt;desktop&lt;/strong&gt; computer and you accidentally break the screen. You find you can just grab almost any desktop monitor from the market, and it works well with your desktop.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用IoC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：您有一&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;台台式&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;计算机，并且不小心打破了屏幕。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您会发现您几乎可以从市场上买到任何台式机显示器，并且它可以很好地与您的台式机配合使用。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0a27438b705ef7753d44c454be364c9f0bede393" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Without IoC:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;没有IoC：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1d13a77d2a7550cfdb5ca4858f7dcdbc2457d535" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Without IoC&lt;/strong&gt;: You have a &lt;strong&gt;laptop&lt;/strong&gt; computer and you accidentally break the screen. And darn, you find the same model laptop screen is nowhere in the market. So you're stuck.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;没有IoC的情况&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：您有一&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;台便携式&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;计算机，并且不小心打破了屏幕。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而且，您发现市场上没有同型号的笔记本电脑屏幕。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;所以你被困住了。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="836d4b023c42984531a364fb6c44580d073bca78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Without IoC&lt;/strong&gt;: you ask for &quot;apple&quot;, and you are always served apple when you ask more.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果没有IoC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：您要求&amp;ldquo;苹果&amp;rdquo;，而当您提出更多要求时，您总是得到苹果。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="783fb8f1d9a5b79049829582b02390a06e324449" translate="yes" xml:space="preserve">
          <source>A good read with example</source>
          <target state="translated">好的读物,有实例</target>
        </trans-unit>
        <trans-unit id="1fc99bcac170ae4802f35453c9045f144a0a97f2" translate="yes" xml:space="preserve">
          <source>A real life example would be given here. Suppose, you want to develop a web application. So, you create a framework which will handle all the common things a web application should handle like handling http request, creating application menu, serving pages, managing cookies, triggering events etc.</source>
          <target state="translated">这里举一个现实生活中的例子。假设,你想开发一个Web应用程序。因此,你创建一个框架,它将处理一个web应用程序应该处理的所有常见的事情,如处理http请求、创建应用程序菜单、服务页面、管理cookies、触发事件等。</target>
        </trans-unit>
        <trans-unit id="5b72c852f59e3c77579e7c0c79ad0e52e5d0438f" translate="yes" xml:space="preserve">
          <source>A very simple written explanation can be found here</source>
          <target state="translated">这里有一个非常简单的书面解释</target>
        </trans-unit>
        <trans-unit id="03ce18a84ba0139f8b2d282fb731383609571750" translate="yes" xml:space="preserve">
          <source>After hour or something we have a floor covered of plastic cups and water.</source>
          <target state="translated">过了一个小时什么的时候,我们的地板上铺满了塑料杯和水。</target>
        </trans-unit>
        <trans-unit id="b22ecdbc7467f179e8b80b4a5cb28a7d9453723d" translate="yes" xml:space="preserve">
          <source>Although the workers give the control of managing the project on the top level to the managers (the framework). But it is good to have some professionals help out. This is the concept of IoC truly come from.</source>
          <target state="translated">虽然工人们把管理项目上层的控制权交给了管理者(框架)。但有一些专业人员帮忙也是好的。这就是IoC的概念真正的来源。</target>
        </trans-unit>
        <trans-unit id="00fd8444cad967012a1ae67dd61c70de9a3b11a4" translate="yes" xml:space="preserve">
          <source>And once you get into generics, it gets even better.  Imagine having a message publisher that receives records and publishes messages.  It doesn't care what it publishes, but it needs a mapper to take something from a record to a message.</source>
          <target state="translated">而一旦你进入通用性,就会变得更加完美。想象一下,有一个消息发布器,它可以接收记录并发布消息。它并不在乎发布什么,但它需要一个映射器来把记录中的东西变成消息。</target>
        </trans-unit>
        <trans-unit id="e69975b42ed25e7f8f28e85f31d62e2a8cb06b1a" translate="yes" xml:space="preserve">
          <source>And then you leave some hooks in your framework where you can put further codes to generate custom menu, pages, cookies or logging some user events etc. On every browser request, your framework will run and executes your custom codes if hooked then serve it back to the browser.</source>
          <target state="translated">然后你可以在你的框架中留下一些钩子,在那里你可以放一些进一步的代码来生成自定义菜单、页面、cookie或记录一些用户事件等。在每个浏览器的请求中,你的框架会运行并执行你的自定义代码,如果被钩住了,然后将其服务于浏览器。</target>
        </trans-unit>
        <trans-unit id="b665befe257f7ff25fb720471835afdb3362429f" translate="yes" xml:space="preserve">
          <source>And this is exactly what the Spring (another IoC container, for example: Guice) does. Instead of let to application create what it need using new keyword (taking plastic cup), Spring IoC container all of time offer to application the same instance (singleton) of needed object(glass of water).</source>
          <target state="translated">而这正是Spring(另一个IoC容器,例如:Guice)所做的。Spring IoC容器不是让应用程序使用新的关键字(以塑料杯为例)来创建它所需要的东西,而是一直提供给应用程序所需要的对象(水杯)的同一个实例(单子)。</target>
        </trans-unit>
        <trans-unit id="d065037b22d578a8d5a62e61105bf2d8ede75c17" translate="yes" xml:space="preserve">
          <source>Answering only the first part.
What is it?</source>
          <target state="translated">只回答第一部分。是什么?</target>
        </trans-unit>
        <trans-unit id="8ae0498fb7e27f3e77d528523d5e9ef00a7a185a" translate="yes" xml:space="preserve">
          <source>Anyway: be reasonable. Design pattern are &lt;strong&gt;good practices&lt;/strong&gt; but not Bible to be preached. Do not stick it everywhere.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;无论如何：合理。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;设计模式是&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;好的做法，&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但不是要宣扬的圣经。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不要将其粘在任何地方。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a5fc50e3ceaa03d10efa641f9932ed3164ec099" translate="yes" xml:space="preserve">
          <source>Application calls Foo</source>
          <target state="translated">申请电话Foo</target>
        </trans-unit>
        <trans-unit id="ac42390e19be354858b8262243637ee16d63efc2" translate="yes" xml:space="preserve">
          <source>Application creates Bar and gives it Bim</source>
          <target state="translated">应用程序创建Bar并赋予其Bim</target>
        </trans-unit>
        <trans-unit id="cc24fa2cfa1ade20a4b0568072650d805b3f7a37" translate="yes" xml:space="preserve">
          <source>Application creates Bim</source>
          <target state="translated">应用程序创建Bim</target>
        </trans-unit>
        <trans-unit id="70579284eb400d7297fa45f23e86008434a5dae7" translate="yes" xml:space="preserve">
          <source>Application creates Foo</source>
          <target state="translated">应用程序创建Foo</target>
        </trans-unit>
        <trans-unit id="c0f19361a5c397f8b9f7a8e3a097732fbca45296" translate="yes" xml:space="preserve">
          <source>Application creates Foo and gives it Bar</source>
          <target state="translated">应用程序创建Foo并赋予它Bar</target>
        </trans-unit>
        <trans-unit id="1a435d46695a15e5ef97ebb4802372a00c982aa2" translate="yes" xml:space="preserve">
          <source>Application needs Foo (e.g. a controller), so:</source>
          <target state="translated">应用需要Foo(如控制器),所以。</target>
        </trans-unit>
        <trans-unit id="9be6e530a74dcafa45c7b24d7025184525c1bc10" translate="yes" xml:space="preserve">
          <source>Application needs Foo, which needs Bar, which needs Bim, so:</source>
          <target state="translated">应用需要Foo,这需要吧,这需要Bim,所以。</target>
        </trans-unit>
        <trans-unit id="fff41238dbef5b816e589fb9ecf3cbde7896731e" translate="yes" xml:space="preserve">
          <source>Bar creates Bim</source>
          <target state="translated">吧台创建Bim</target>
        </trans-unit>
        <trans-unit id="452099fc339bb9ab1a4137666deb3f1f3b017433" translate="yes" xml:space="preserve">
          <source>Bar does something</source>
          <target state="translated">吧台做的事情</target>
        </trans-unit>
        <trans-unit id="2b2cfde5abc29f811788f8a477a12b0d271a2ada" translate="yes" xml:space="preserve">
          <source>Bar needs Bim (a service, a repository, &amp;hellip;), so:</source>
          <target state="translated">Bar需要Bim（服务，存储库等），因此：</target>
        </trans-unit>
        <trans-unit id="adf15cc582acf54581c37a950b4076c28cebbc7c" translate="yes" xml:space="preserve">
          <source>Basically, &lt;strong&gt;anything&lt;/strong&gt; with an event loop, callbacks, or execute triggers falls into this category.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本上，&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;任何&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;带有事件循环，回调或执行触发器的东西都属于此类。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c15542d7fcb269ae139c7a7886a1b2613dd14f5d" translate="yes" xml:space="preserve">
          <source>Before using Inversion of Control you should be well aware of the fact that it has its pros and cons and you should know why you use it if you do so.</source>
          <target state="translated">大家在使用变频器之前,应该清楚的知道它有它的优点和缺点,如果使用变频器的话,应该知道为什么要使用它。</target>
        </trans-unit>
        <trans-unit id="a75d2762f97d0c2ece2927dafe57eaf0e294409f" translate="yes" xml:space="preserve">
          <source>But I think you have to be very careful with it. If you will overuse this pattern, you will make very complicated design and even more complicated code.</source>
          <target state="translated">但我认为你必须要非常小心地使用它。如果你会过度使用这种模式,你会做出非常复杂的设计,甚至是更复杂的代码。</target>
        </trans-unit>
        <trans-unit id="bf33c7e70ae590068b05025538fd39ae51569fdb" translate="yes" xml:space="preserve">
          <source>By extracting an abstract definition of the behavior used by X in Y, illustrated as I below, and letting the consumer X use an instance of that instead of Y it can continue to do what it does without having to know the specifics about Y.</source>
          <target state="translated">通过提取Y中X所使用的行为的抽象定义,如下图I所示,并让消费者X使用该行为的一个实例来代替Y,它就可以继续做它所做的事情,而不需要知道Y的具体情况。</target>
        </trans-unit>
        <trans-unit id="94d3696bca4e509dbee4b3f2721acf48efbcc91e" translate="yes" xml:space="preserve">
          <source>By implementing Inversion of Control, a software/object consumer get more controls/options over the software/objects, instead of being controlled or having less options.</source>
          <target state="translated">通过实现Inversion of Control,软件对象消费者可以获得更多的控制选项,而不是被控制或少有选择。</target>
        </trans-unit>
        <trans-unit id="a765706b39bb310d1815886a85f5790bb5cddfdd" translate="yes" xml:space="preserve">
          <source>By implementing Inversion of Control, a software/object consumer gets more controls/options over the software/objects, instead of being controlled or having fewer options.</source>
          <target state="translated">通过实现Inversion of Control,软件对象消费者可以获得更多的控制选项,而不是被控制或少有选项。</target>
        </trans-unit>
        <trans-unit id="afc2b6eb93654fed24d8cce3141c211e0dfdd6a4" translate="yes" xml:space="preserve">
          <source>Cons:</source>
          <target state="translated">Cons:</target>
        </trans-unit>
        <trans-unit id="2ef7bd6d6b0fca27c168920a2f37fcb5d9a9e6e9" translate="yes" xml:space="preserve">
          <source>Creating an object within class is called tight coupling, Spring removes this dependency by following a design pattern(DI/IOC). In which object of class in passed in constructor rather than creating in class. More over we give super class reference variable in constructor to define more general structure.</source>
          <target state="translated">在类内创建一个对象被称为紧密耦合,Spring通过遵循一种设计模式(DIIOC)来消除这种依赖。在这个模式中,类的对象在构造函数中传递,而不是在类内创建。更多的是,我们在构造函数中赋予超级类的引用变量来定义更多的通用结构。</target>
        </trans-unit>
        <trans-unit id="8e0638a769a99fa369ab8513b8f14693372f58e0" translate="yes" xml:space="preserve">
          <source>DI (Dependency Injection) is about how the control flows in the application. Traditional desktop application had control flow from your application(main() method) to other library method calls, but with DI control flow is inverted that's framework takes care of starting your app, initializing it and invoking your methods whenever required.</source>
          <target state="translated">DI(Dependency Injection)是关于应用程序中的控制流。传统的桌面应用程序有控制流从你的应用程序(main()方法)到其他库中的方法调用,但有了DI,控制流被颠倒了,即框架负责启动你的应用程序,初始化它,并在需要的时候调用你的方法。</target>
        </trans-unit>
        <trans-unit id="3b1e93f7a994b1c6fa9c849c7f78a08f5f55f101" translate="yes" xml:space="preserve">
          <source>DLL container methods in COM. DllMain, DllCanUnload, etc (what-to-do part) -- COM/OS (when-to-do part)</source>
          <target state="translated">COM中的DLL容器方法。DllMain、DllCanUnload等(需要做什么的部分)----COMOS(需要做什么的部分)。</target>
        </trans-unit>
        <trans-unit id="4b7dce9ad71ae931cbbdb8069b2f958ba77aca4c" translate="yes" xml:space="preserve">
          <source>Dependency Injection and Inversion of Control are related. Dependency Injection is at the &lt;strong&gt;micro&lt;/strong&gt; level and Inversion of Control is at the &lt;strong&gt;macro&lt;/strong&gt; level. You have to eat every bite (implement DI) in order to finish a meal (implement IoC).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依赖注入和控制反转相关。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依赖注入在&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;微观&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;级别，而控制反转在&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;宏观&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;级别。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您必须吃饱每一口（实施DI）才能吃完饭（实施IoC）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6ee080601f38ccffcc77ec09e618c93a8a122547" translate="yes" xml:space="preserve">
          <source>Dependency injection generally means &lt;strong&gt;passing an object on which method depends, as a parameter to a method, rather than having the method create the dependent object&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依赖注入通常意味着&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将方法所依赖的对象作为参数传递给方法，而不是让方法创建依赖对象&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4a343e8a0620741fbb66739fd1d46148979f2b5a" translate="yes" xml:space="preserve">
          <source>Dependency injection makes it easy to swap with the different implementation of the injected classes. While unit testing you can inject a dummy implementation, which makes the testing a lot easier.</source>
          <target state="translated">依赖关系注入使得注入的类的不同实现很容易交换。在进行单元测试时,你可以注入一个假人实现,这使得测试变得更加容易。</target>
        </trans-unit>
        <trans-unit id="92ed562037033112d88e7aaf65217d90ffa2423c" translate="yes" xml:space="preserve">
          <source>Detailed explanation</source>
          <target state="translated">详细说明</target>
        </trans-unit>
        <trans-unit id="2fd22edb8e3ea30eab025ef8f4290ffacde4fb8b" translate="yes" xml:space="preserve">
          <source>Do we really need a name by which to describe the difference between procedural and event driven programming? OK, if we need to, but do we need to pick a brand new &quot;bigger than life&quot; name that confuses more than it solves?</source>
          <target state="translated">我们真的需要一个名字来描述程序化和事件驱动编程之间的区别吗?好吧,如果我们需要,但我们是否需要选择一个全新的 &quot;比生命还大 &quot;的名字,让人感到困惑多于解决问题?</target>
        </trans-unit>
        <trans-unit id="ce8104f0909bbd49f3a87e76b46fd63af7b23865" translate="yes" xml:space="preserve">
          <source>Don't call us, we'll call you</source>
          <target state="translated">别找我们,我们会找你的</target>
        </trans-unit>
        <trans-unit id="5c221fed55ea2a8b9560181babdde0f2e320ba49" translate="yes" xml:space="preserve">
          <source>Ensure that &lt;strong&gt;when&lt;/strong&gt; part knows as &lt;em&gt;little&lt;/em&gt; as possible about &lt;strong&gt;what&lt;/strong&gt; part; and vice versa.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;确保&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;部分知道的&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;少&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;地了解&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;哪些&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;部分; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;反之亦然。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a357e26edfd850a29c72490b46f8b9e1c7e1c26d" translate="yes" xml:space="preserve">
          <source>Event Handling. Event Handlers (what-to-do part) -- Raising Events (when-to-do part)</source>
          <target state="translated">事件处理。事件处理程序(需要做什么的部分)----引发事件(什么时候做的部分)。</target>
        </trans-unit>
        <trans-unit id="4681308f589fd3db8982d8895f704006c536728b" translate="yes" xml:space="preserve">
          <source>Every module can focus on what it is designed for.</source>
          <target state="translated">每个模块都可以专注于它的设计目的。</target>
        </trans-unit>
        <trans-unit id="37013689579c8310949d1aaa459fbe78604e94c8" translate="yes" xml:space="preserve">
          <source>Ex: Suppose your application stores the user uploaded file in the Google Drive, with DI your controller code may look like this:</source>
          <target state="translated">Ex:假设你的应用程序将用户上传的文件存储在Google Drive中,你的控制器代码可能看起来像这样。</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="e9044ac31a8995f5ad62b7e9f444f33bf9e08657" translate="yes" xml:space="preserve">
          <source>Foo calls Bar</source>
          <target state="translated">Foo叫吧</target>
        </trans-unit>
        <trans-unit id="36a8c8318b6369919a71996fd940aacf3965166d" translate="yes" xml:space="preserve">
          <source>Foo creates Bar</source>
          <target state="translated">Foo创建吧</target>
        </trans-unit>
        <trans-unit id="c2cfcdd995da76d7e30b4bb8c5a58a247fe77380" translate="yes" xml:space="preserve">
          <source>Foo needs Bar (e.g. a service), so:</source>
          <target state="translated">Foo需要吧(如服务),所以。</target>
        </trans-unit>
        <trans-unit id="c40a9c4979dbcd08f9143f72f4f97633ba55f56f" translate="yes" xml:space="preserve">
          <source>For example, in an old school menu, you might have:</source>
          <target state="translated">例如,在老式菜单中,你可能有。</target>
        </trans-unit>
        <trans-unit id="54513be8dda986f2beeef0cb1d533fbca0652e5b" translate="yes" xml:space="preserve">
          <source>For example, let's say that we have two classes : &lt;strong&gt;Dog&lt;/strong&gt; and &lt;strong&gt;Cat&lt;/strong&gt;.   Both shares the same qualities/states: age, size, weight. So instead of creating a class of service called &lt;strong&gt;DogService&lt;/strong&gt; and &lt;strong&gt;CatService&lt;/strong&gt;, I can create a single one called &lt;strong&gt;AnimalService&lt;/strong&gt; that allows to use Dog and Cat only if they use the interface &lt;strong&gt;IAnimal&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如，假设我们有两个类：&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dog&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cat&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。两者具有相同的质量/状态：年龄，大小，体重。因此，而不是创造一类服务称为&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DogService&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CatService&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，我可以创建一个单一的一个叫&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AnimalService&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，只允许他们是否使用该接口使用狗和猫&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IAnimal&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d60c0cdafbec5fc9cf7874f8725048484c3f63ce" translate="yes" xml:space="preserve">
          <source>For example, say your application has a text editor component and you want to provide spell checking. Your standard code would look something like this:</source>
          <target state="translated">例如,假设你的应用程序有一个文本编辑器组件,你想提供拼写检查。你的标准代码看起来是这样的。</target>
        </trans-unit>
        <trans-unit id="b193542666e0549ecc44307cdfa4b9bc29a65958" translate="yes" xml:space="preserve">
          <source>For example, task#1 is to create object.
Without IOC concept, task#1 is supposed to be done by Programmer.But With IOC concept, task#1 would be done by container.</source>
          <target state="translated">例如,任务1是创建对象,如果没有IOC概念,任务1应该是由Programmer完成。如果没有IOC概念,任务1应该是由Programmer来完成。</target>
        </trans-unit>
        <trans-unit id="4c4257d920e8870617eb7c2a571ea4b4696b4faf" translate="yes" xml:space="preserve">
          <source>For those interested in more depth on Inversion of Control a paper has been published outlining a more complete picture of Inversion of Control as a design pattern (OfficeFloor: using office patterns to improve software design &lt;a href=&quot;http://doi.acm.org/10.1145/2739011.2739013&quot;&gt;http://doi.acm.org/10.1145/2739011.2739013&lt;/a&gt; with a free copy available to download from &lt;a href=&quot;http://www.officefloor.net/about.html&quot;&gt;http://www.officefloor.net/about.html&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于那些对控制反转有更深入的兴趣的人，已经发表了一篇论文，概述了控制反转作为一种设计模式的更完整图片（OfficeFloor：使用办公模式来改善软件设计&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://doi.acm.org/10.1145/2739011.2739013&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://doi.acm.org/10.1145/ 2739011.2739013&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，可从&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.officefloor.net/about.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://www.officefloor.net/about.html&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;下载免费副本&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="530a5c467b34b9f4477df522b08ee9d842c1a1d7" translate="yes" xml:space="preserve">
          <source>Here is how a code not using DI will roughly work:</source>
          <target state="translated">下面是一个不使用DI的代码大致的工作原理。</target>
        </trans-unit>
        <trans-unit id="8feb0cfc564ed6fe998214e0b617510b751cbf33" translate="yes" xml:space="preserve">
          <source>Here is how a code using DI will roughly work:</source>
          <target state="translated">下面是一个使用DI的代码大致的工作原理。</target>
        </trans-unit>
        <trans-unit id="60b0beb3f28af92c7fd7dc62953c72cac128a607" translate="yes" xml:space="preserve">
          <source>However, pragmatically speaking, it has some backwards.</source>
          <target state="translated">不过,实事求是地说,它有一定的落后性。</target>
        </trans-unit>
        <trans-unit id="fcc6e5b27035a345cfafd067265b9d513f1ff521" translate="yes" xml:space="preserve">
          <source>I agree with &lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#3082&quot;&gt;NilObject&lt;/a&gt;, but I'd like to add to this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我同意&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#3082&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;NilObject&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，但我想补充一点：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3bf68460e0fb730dd585b98cc7af3cac3d6aa69c" translate="yes" xml:space="preserve">
          <source>I am definitely loving IoC/DI.</source>
          <target state="translated">我绝对是爱上了IoCDI。</target>
        </trans-unit>
        <trans-unit id="82d4b78078a9c52e303c8ecc8ca5f4c8c95fc3bf" translate="yes" xml:space="preserve">
          <source>I found a very clear example &lt;a href=&quot;http://php-di.org/doc/understanding-di.html&quot;&gt;here&lt;/a&gt; which explains how the 'control is inverted'.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我在&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://php-di.org/doc/understanding-di.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这里&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;找到了一个非常清楚的示例&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;示例&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解释了&amp;ldquo;控件是如何反转的&amp;rdquo;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b0fb3f858bf2eab2695294bc696e5aa358bf89cd" translate="yes" xml:space="preserve">
          <source>I found one good example &lt;a href=&quot;http://www.goospoos.com/2009/12/inversion-of-control-basics-with-example/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我在&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.goospoos.com/2009/12/inversion-of-control-basics-with-example/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这里&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;找到了一个很好的例子&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c7dd2bab3cb0cd2991bce40ce3201c3f7a535c6f" translate="yes" xml:space="preserve">
          <source>I like this explanation: &lt;a href=&quot;http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&quot;&gt;http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我喜欢这个解释：&lt;/font&gt;&lt;a href=&quot;http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1aa23d27c2aa025d7ac4285b379874694217b40b" translate="yes" xml:space="preserve">
          <source>I understand that the answer has already been given here. But I still think, some basics about the inversion of control have to be discussed here in length for future readers.</source>
          <target state="translated">我知道,这里已经给出了答案。但我还是觉得,关于控制权倒置的一些基本常识,还是要在这里详细讨论一下,供以后的读者参考。</target>
        </trans-unit>
        <trans-unit id="937f692b34fc2319d608f1cbd292305bff67b729" translate="yes" xml:space="preserve">
          <source>I will keep things abstract here, You can visit following links for detail understanding of the topic.</source>
          <target state="translated">我在这里会把事情抽象化,你可以访问下面的链接来详细了解这个主题。</target>
        </trans-unit>
        <trans-unit id="33b4f2de83b8d009dfb1e4f0c8f37f73deb35275" translate="yes" xml:space="preserve">
          <source>I wrote it once, but now I can inject many types into this set of code if I publish different types of messages.  I can also write mappers that take a record of the same type and map them to different messages. Using DI with Generics has given me the ability to write very little code to accomplish many tasks.</source>
          <target state="translated">我写过一次,现在如果发布不同类型的消息,我可以在这组代码中注入很多类型。我还可以写出映射器,把相同类型的记录拿去映射到不同类型的消息。使用DI与Generics给了我写很少的代码来完成很多任务的能力。</target>
        </trans-unit>
        <trans-unit id="46a53efcdd95296d970c368c25c5a862f47bd55c" translate="yes" xml:space="preserve">
          <source>If you find yourself copying and pasting code around, you're almost always doing &lt;em&gt;something&lt;/em&gt; wrong.  Codified as the design principle &lt;a href=&quot;http://c2.com/xp/OnceAndOnlyOnce.html&quot;&gt;Once and Only Once&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果你发现自己复制和粘贴周围的代码，你总是在做&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一些&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;错误的。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;编成设计原则&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://c2.com/xp/OnceAndOnlyOnce.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一次，也只有一次&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29ab9727475a88b2c5d04f24a224b5ff059cd20c" translate="yes" xml:space="preserve">
          <source>If you follow these simple two steps, you have done inversion of control:</source>
          <target state="translated">如果你按照这两个简单的步骤来做,你已经完成了反转控制。</target>
        </trans-unit>
        <trans-unit id="bf55354f38c64ca9c6750feaf917cc557da9b65e" translate="yes" xml:space="preserve">
          <source>Imagine a parent and child talking to each other.</source>
          <target state="translated">想象一下父母和孩子之间的对话。</target>
        </trans-unit>
        <trans-unit id="fddc5beb5789c807e772d70f367d3e0c53630417" translate="yes" xml:space="preserve">
          <source>In IoC the &quot;framework&quot; controls &lt;strong&gt;&lt;em&gt;main()&lt;/em&gt;&lt;/strong&gt; and calls your methods. The &lt;strong&gt;&lt;em&gt;Framework&lt;/em&gt;&lt;/strong&gt; is in control :(</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在IoC中，&amp;ldquo;框架&amp;rdquo;控制&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;main（）&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;并调用您的方法。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;框架&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;处于控制之中:(&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="377410213559b2702c94f0b3b1faeaf157754fdc" translate="yes" xml:space="preserve">
          <source>In a GUI program or somesuch, instead we say:</source>
          <target state="translated">在一个GUI程序或类似的程序中,我们说:。</target>
        </trans-unit>
        <trans-unit id="794ffcb222e8673e69c250708deea7737d00cdd9" translate="yes" xml:space="preserve">
          <source>In normal s/w development, you write the &lt;strong&gt;&lt;em&gt;main()&lt;/em&gt;&lt;/strong&gt; method and call &quot;library&quot; methods.  &lt;strong&gt;&lt;em&gt;You&lt;/em&gt;&lt;/strong&gt; are in control :)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在正常的软件开发中，您编写&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;main（）&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法并调用&amp;ldquo;库&amp;rdquo;方法。 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;你&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在控制中:)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3f10d36138f924778c4756832794808cc0e20331" translate="yes" xml:space="preserve">
          <source>In our programming world, &lt;strong&gt;Hollywood&lt;/strong&gt; represent a generic framework (may be written by you or someone else), &lt;strong&gt;you&lt;/strong&gt; represent the user code you wrote and &lt;strong&gt;the task&lt;/strong&gt; represent the thing you want to accomplish with your code. Now you don't ever go to trigger your task by yourself, not in IoC! Rather you have designed everything in such that your framework will trigger your task for you. Thus you have built a reusable framework which can make someone a hero or another one a villain. But that framework is always in charge, it knows when to pick someone and that someone only knows what it wants to be.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在我们的编程世界中，&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hollywood&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示一个通用框架（可以由您或其他人编写），&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示编写的用户代码，&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而任务&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示您要用代码完成的事情。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在，您不再需要自己触发任务，而不是在IoC中！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;相反，您已设计了所有内容，因此您的框架将为您触发任务。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，您建立了一个可重用的框架，该框架可以使某人成为英雄，而另一个人成为坏人。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是该框架始终负责，它知道何时选择某人，而某人只知道它想要成为什么样的人。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="173b21ccdfbf6f494cf6d1444bbd225f45320e1f" translate="yes" xml:space="preserve">
          <source>In programming terms, she passed a callback function &lt;code&gt;getProductList()&lt;/code&gt; to the function you are executing - &lt;code&gt;doShopping()&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;用编程的方式，她将回调函数&lt;/font&gt;&lt;/font&gt; &lt;code&gt;getProductList()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;传递给&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您正在执行的函数&lt;/font&gt;&lt;/font&gt; &lt;code&gt;doShopping()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83e763a2dee31b60a814d50a0bf409afb468b761" translate="yes" xml:space="preserve">
          <source>In short Control gets inverted from Programmer to container. So, it is called as inversion of control.</source>
          <target state="translated">简而言之,控制从Programmer到容器被反转。所以,它被称为控制的反转。</target>
        </trans-unit>
        <trans-unit id="8ce30cfb65598251ed25908c4dd40a288377ffb4" translate="yes" xml:space="preserve">
          <source>In the end you always win :)</source>
          <target state="translated">最后,你总是会赢的:)</target>
        </trans-unit>
        <trans-unit id="415bf701ddc37ec878782b3147762d4c810c9f63" translate="yes" xml:space="preserve">
          <source>In the first code example we are instantiating &lt;code&gt;SpellChecker&lt;/code&gt; (&lt;code&gt;this.checker = new SpellChecker();&lt;/code&gt;), which means the &lt;code&gt;TextEditor&lt;/code&gt; class directly depends on the &lt;code&gt;SpellChecker&lt;/code&gt; class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在第一个代码示例中，我们实例&lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this.checker = new SpellChecker();&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;），这意味着该&lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;直接类依赖于所述&lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="02311f7e83fcf777d1f281214c8986231c3912c0" translate="yes" xml:space="preserve">
          <source>In the illustration above Y implements I and X uses an instance of I. While it&amp;rsquo;s quite possible that X still uses Y what&amp;rsquo;s interesting is that X doesn&amp;rsquo;t know that. It just knows that it uses something that implements I.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在上面的图示中，Y实现了I，而X使用了I的实例。尽管X仍很可能仍使用Y，但有趣的是X不知道。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它只知道它使用实现I的东西。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="10b6331947724028e6c4d5b46f4ac577504462aa" translate="yes" xml:space="preserve">
          <source>In the second code example we are creating an abstraction by having the &lt;code&gt;SpellChecker&lt;/code&gt; dependency class in &lt;code&gt;TextEditor&lt;/code&gt; constructor signature (not initializing dependency in class). This allows us to call the dependency then pass it to the TextEditor class like so:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在第二个代码示例中，我们通过&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;构造函数签名中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;具有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依赖项类&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（而不是在类中初始化依赖项）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;来创建抽象&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这使我们可以调用依赖项，然后将其传递给TextEditor类，如下所示：&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="86e9aa47c02eac4bb61f7fcbb0829f0a43930434" translate="yes" xml:space="preserve">
          <source>In using a container like Castle Windsor, it solves maintenance issues even better.  Being able to swap out a component that goes to a database for one that uses file based persistence without changing a line of code is awesome (configuration change, you're done).</source>
          <target state="translated">在使用像Castle Windsor这样的容器时,它能更好地解决维护问题。能够在不改变一行代码的情况下,把一个去数据库的组件换成一个使用基于文件的持久化的组件是非常棒的(改变配置,你就完成了)。</target>
        </trans-unit>
        <trans-unit id="393aff0ab87ccb76f01e199b65f9dfff7969a389" translate="yes" xml:space="preserve">
          <source>Instead if you had the controller class to construct the storage object with the &lt;code&gt;new&lt;/code&gt; keyword like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;相反，如果您有控制器类使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关键字&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;来构造存储对象，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如下所示：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd2c07da0630be24a7d3559c8b8807776d8cdf48" translate="yes" xml:space="preserve">
          <source>Interfaces. Component client (when-to-do part) -- Component Interface implementation (what-to-do part)</source>
          <target state="translated">接口。元件客户端(何时做的部分)----元件接口的实现(做什么的部分)。</target>
        </trans-unit>
        <trans-unit id="85b24615680dc38ffe1f3574074bfc21eff397f1" translate="yes" xml:space="preserve">
          <source>Inversion of Control (IoC) can be quite confusing when it is first encountered.</source>
          <target state="translated">反转控制(IoC)在第一次遇到时可能会相当混乱。</target>
        </trans-unit>
        <trans-unit id="7379f00d78c1620733cf4544b441a1c216d8f4b3" translate="yes" xml:space="preserve">
          <source>Inversion of Control (IoC) has been built on a very simple principle called &lt;strong&gt;Hollywood Principle&lt;/strong&gt;. And it says that,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制反转（IoC）建立在一个非常简单的原理上，即&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;好莱坞原理&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它说，&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6e29ef62a3454337d3ef55e638a0463283e61fd7" translate="yes" xml:space="preserve">
          <source>Inversion of Control (IoC) means to create instances of dependencies first and latter instance of a class (optionally injecting them through constructor), instead of creating an instance of the class first and then the class instance creating instances of dependencies.
Thus, inversion of control &lt;strong&gt;inverts&lt;/strong&gt; the &lt;strong&gt;flow of control&lt;/strong&gt; of the program. &lt;strong&gt;Instead of&lt;/strong&gt; the &lt;strong&gt;callee controlling&lt;/strong&gt; the &lt;strong&gt;flow of control&lt;/strong&gt; (while creating dependencies), the &lt;strong&gt;caller controls the flow of control of the program&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制反转（IoC）意味着先创建依赖项的实例，然后再创建类的实例（可选地通过构造函数注入它们），而不是先创建该类的实例，然后再创建该类实例以创建依赖项的实例。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，控制的反转&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;反转&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制的流程&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的程序。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代替&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;被叫方控制&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制的流程&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（在创建依赖关系），则&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;主叫方控制程序的控制的流程&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="447c04d94c54d0ae2f5b843b5618686c41ad12ba" translate="yes" xml:space="preserve">
          <source>Inversion of Control (for methods) = Dependency (state) Injection + Continuation Injection + Thread Injection</source>
          <target state="translated">反转控制(针对方法)=依赖(状态)注入+延续注入+线程注入</target>
        </trans-unit>
        <trans-unit id="3ff7d8358b5e99cc26d5c2e29dcb68ec749052f0" translate="yes" xml:space="preserve">
          <source>Inversion of Control is a generic principle, while Dependency Injection realises this principle as a design pattern for object graph construction (i.e. configuration controls how the objects are referencing each other, rather than the object itself controlling how to get the reference to another object).</source>
          <target state="translated">Inversion of Control是一个通用的原则,而Dependency Injection则将这一原则实现为对象图构造的设计模式(即配置控制对象之间如何相互引用,而不是对象本身控制如何获得对另一个对象的引用)。</target>
        </trans-unit>
        <trans-unit id="246abcec0d5f703c2373d287bf72d2bb3f4b4db4" translate="yes" xml:space="preserve">
          <source>Inversion of Control is a pattern that implements the Dependency Inversion Principle (DIP). DIP states the following: 1. High-level modules should not depend on low-level modules. Both should depend on abstractions (e.g. interfaces). 2. Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions.</source>
          <target state="translated">控制反转是一种实现依赖性反转原理(DIP)的模式。DIP规定了以下几点。1.高层模块不应该依赖低层模块。都应该依赖抽象(如接口)。2.2.抽象不应该依赖于细节。3.细节(具体实现)应该依赖于抽象。</target>
        </trans-unit>
        <trans-unit id="4270e4151e47f0a6838b48ec9ee467895342deec" translate="yes" xml:space="preserve">
          <source>Inversion of Control is what you get when your program callbacks, e.g. like a gui program.</source>
          <target state="translated">Inversion of Control是指当你的程序回调时,比如说像gui程序一样,你会得到的东西。</target>
        </trans-unit>
        <trans-unit id="801b879e0e61fbad9fe20e85dfc6244854d4817e" translate="yes" xml:space="preserve">
          <source>Inversion of Control, (or IoC), is about &lt;strong&gt;getting freedom&lt;/strong&gt; (You get married, you lost freedom and you are being controlled. You divorced, you have just implemented Inversion of Control. That's what we called, &quot;decoupled&quot;. Good computer system discourages some very close relationship.) &lt;strong&gt;more flexibility&lt;/strong&gt; (The kitchen in your office only serves clean tap water, that is your only choice when you want to drink. Your boss implemented Inversion of Control by setting up a new coffee machine. Now you get the flexibility of choosing either tap water or coffee.) and &lt;strong&gt;less dependency&lt;/strong&gt; (Your partner has a job, you don't have a job, you financially depend on your partner, so you are controlled. You find a job, you have implemented Inversion of Control. Good computer system encourages in-dependency.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制反转（或IoC）是关于&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;获得自由&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（您结婚，失去自由并受到控制。离婚后，您刚刚实现了控制反转。这就是我们所说的&amp;ldquo;分离&amp;rdquo;。好的计算机系统不鼓励某些亲密关系。）&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更大的灵活性&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（办公室中的厨房仅提供干净的自来水，这是您喝酒时的唯一选择。老板通过安装新的咖啡机实施了控制反转。选择自来水或咖啡的灵活性。）并且&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依赖性降低&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; （您的合伙人有工作，您没有工作，您在经济上依赖您的合伙人，因此您受到控制。找到工作后，您已经实施了控制反转。好的计算机系统鼓励独立。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="77e5120da94a1f24fb6b60f891876164cb38ce5d" translate="yes" xml:space="preserve">
          <source>Inversion of Controls is about separating concerns.</source>
          <target state="translated">反转控制是要分开关注。</target>
        </trans-unit>
        <trans-unit id="61d07698e52d02e6e124d9b4a9957fccd5ee55fd" translate="yes" xml:space="preserve">
          <source>Inversion of control is a pattern used for decoupling components and layers in the system. The pattern is implemented through injecting dependencies into a component when it is constructed. These dependences are usually provided as interfaces for further decoupling and to support testability. IoC / DI containers such as Castle Windsor, Unity are tools (libraries) which can be used for providing IoC. These tools provide extended features above and beyond simple dependency management, including lifetime, AOP / Interception, policy, etc.</source>
          <target state="translated">反转控制是一种用于解耦系统中的组件和层的模式。该模式是通过在组件构建时向组件注入依赖关系来实现的。这些依赖关系通常作为接口提供,用于进一步解耦和支持可测试性。IoC DI容器,如Castle Windsor、Unity是可以用来提供IoC的工具(库)。这些工具提供了超越简单依赖管理的扩展功能,包括生命周期、AOP拦截、策略等。</target>
        </trans-unit>
        <trans-unit id="be7841f74b212fbb18a52076953f9299c8fad69a" translate="yes" xml:space="preserve">
          <source>Inversion of control is a practical way to reduce code duplication, and if you find yourself copying an entire method and only changing a small piece of the code, you can consider tackling it with inversion of control. Inversion of control is made easy in many languages through the concept of delegates, interfaces, or even raw function pointers.</source>
          <target state="translated">反转控制是一种减少代码重复的实用方法,如果你发现自己复制了整个方法而只改变了一小部分代码,可以考虑用反转控制来解决。在许多语言中,反转控制通过委托代理、接口,甚至是原始函数指针的概念,使反转控制变得简单。</target>
        </trans-unit>
        <trans-unit id="72a912fb5b76b85605df21e6d9aa08ac3caa58f5" translate="yes" xml:space="preserve">
          <source>Inversion of control is about transferring control from library to the client. It makes more sense when we talk about a client that injects (passes) a function value (lambda expression) into a higher order function (library function) that controls (changes) the behavior of the library function. A client or framework that injects library dependencies (which carry behavior) into libraries may also be considered IoC</source>
          <target state="translated">反转控制是指将控制权从库中转移到客户端。当我们谈论一个客户端将一个函数值(传递)注入(传递)到控制(改变)库函数行为的高阶函数(库函数)中时,它更有意义。将库依赖关系(携带行为)注入到库中的客户端或框架也可以被视为IoC</target>
        </trans-unit>
        <trans-unit id="c6f3380296dd1859cc46056be7e5c7d7d18517b1" translate="yes" xml:space="preserve">
          <source>IoC / DI to me is pushing out dependencies to the calling objects. Super simple.</source>
          <target state="translated">IoC DI对我来说就是向调用对象推送出依赖关系。超级简单。</target>
        </trans-unit>
        <trans-unit id="d01f7e74cc075865246062cbffd169c66a84cace" translate="yes" xml:space="preserve">
          <source>IoC in easy terms: It's the use of Interface as a way of specific something (such a field or a parameter) as a wildcard that can be used by some classes. It allows the re-usability of the code.</source>
          <target state="translated">IoC用简单的话来说,就是IoC。它是将Interface作为一种特定的东西(如字段或参数)作为通配符,可以被一些类使用。它允许代码的可重用性。</target>
        </trans-unit>
        <trans-unit id="ecc699e264ec9201c3607773626eecefd4f6379e" translate="yes" xml:space="preserve">
          <source>IoC is about inverting the relationship between your code and third-party code (library/framework):</source>
          <target state="translated">IoC就是要把你的代码和第三方代码(libraryframework)之间的关系倒过来。</target>
        </trans-unit>
        <trans-unit id="b1a30e451f848d07595af921a316e8fdf04e8200" translate="yes" xml:space="preserve">
          <source>IoC not only inverts the control flow in your program, it also clouds it considerably. This means you can no longer just read your code and jump from one place to another because the connections that would normally be in your code are not in the code anymore. Instead it is in XML configuration files or annotations and in the code of your IoC container that interprets these metadata.</source>
          <target state="translated">IoC不仅颠覆了你的程序中的控制流,还大大地云化了你的程序。这意味着你不能再只是读取你的代码,然后从一个地方跳转到另一个地方,因为通常情况下,这些连接已经不在代码中了。取而代之的是在XML配置文件或注释中,以及在你的IoC容器的代码中解释这些元数据。</target>
        </trans-unit>
        <trans-unit id="129c548401379640498c3bd2d9aeda56d02ded9e" translate="yes" xml:space="preserve">
          <source>Isn&amp;rsquo;t it enough that X knows that it uses something that has the behavior, the methods, properties etc, of Y without knowing who actually implements the behavior?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;知道X使用具有Y的行为，方法，属性等的东西而又不知道是谁真正实现了行为，这还不够吗？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="13ba932451564a53b11f07d2fc54611618718a48" translate="yes" xml:space="preserve">
          <source>Isolation of code unit, easier testing</source>
          <target state="translated">隔离的代码单元,更容易测试</target>
        </trans-unit>
        <trans-unit id="f93e3134fbbf3855151cbf5494b8689c1ef262d3" translate="yes" xml:space="preserve">
          <source>It allows user of the function to define some parts of it, making it more flexible.</source>
          <target state="translated">它可以让功能的用户对它的一些部分进行定义,使其更加灵活。</target>
        </trans-unit>
        <trans-unit id="5589f7b0110a12ff8abdfca719dfe54ce07e36dd" translate="yes" xml:space="preserve">
          <source>It is a strong motivator for coding against interfaces instead of implementations</source>
          <target state="translated">它是针对接口而非实现进行编码的强大动力。</target>
        </trans-unit>
        <trans-unit id="9b77b575dc2b25c7a321384bbb10a36aa6f2e8f2" translate="yes" xml:space="preserve">
          <source>It is not appropriate to use in all cases, because the flow of a program can be harder to follow when written this way. It's a useful way to design methods when writing a library that will be reused, but it should be used sparingly in the core of your own program unless it really solves a code duplication problem.</source>
          <target state="translated">这种方法并不适合在所有的情况下使用,因为这样写程序的流程可能会比较难遵循。在编写一个会被重用的程序库时,它是一种有用的方法设计方法,但在自己的程序核心中应该少用,除非它真的解决了代码重复的问题。</target>
        </trans-unit>
        <trans-unit id="4374f68d4d13a5a1e95989bd83ee0dde411e4897" translate="yes" xml:space="preserve">
          <source>It says -</source>
          <target state="translated">它说 --</target>
        </trans-unit>
        <trans-unit id="93947b7bcccf2b2a7d648e4a9fb3a6910d74deb6" translate="yes" xml:space="preserve">
          <source>It seems that the most confusing thing about &quot;IoC&quot; the acronym and the name for which it stands is that it's too glamorous of a name - almost a noise name.</source>
          <target state="translated">看来,&quot;IoC &quot;这个首字母缩写和它所代表的名字最让人困惑的地方在于,它的名字太过华丽--几乎是一个噪音的名字。</target>
        </trans-unit>
        <trans-unit id="8b85e00dbd5642b617bbba6834a701ce8120f842" translate="yes" xml:space="preserve">
          <source>It solves code duplication. For example, in the old days you would manually write your own event loop, polling the system libraries for new events. Nowadays, most modern APIs you simply tell the system libraries what events you're interested in, and it will let you know when they happen.</source>
          <target state="translated">它解决了代码重复的问题。例如,在过去的时代,你会手动编写自己的事件循环,轮询系统库中的新事件。现在,大多数现代的API,你只需告诉系统库你感兴趣的事件是什么事件,它就会在事件发生时让你知道。</target>
        </trans-unit>
        <trans-unit id="b051475457c0cb9b82c447aa1f4d625e160eb580" translate="yes" xml:space="preserve">
          <source>It start simple and shows code examples as well.</source>
          <target state="translated">它的开始很简单,也显示了代码示例。</target>
        </trans-unit>
        <trans-unit id="7cdd8b2cb24570566fcca5c80bc3ce5cdd68603b" translate="yes" xml:space="preserve">
          <source>It's very easy to write unit tests for your code because it depends on nothing else than the objects it accepts in its constructor/setters and you can easily initialize them with the right objects in isolation.</source>
          <target state="translated">为你的代码编写单元测试是非常容易的,因为除了构造函数中接受的对象之外,它不依赖任何其他的对象,你可以很容易地用正确的对象孤立地初始化它们。</target>
        </trans-unit>
        <trans-unit id="e188bfdb88678f850320d1c8300b33308920af0b" translate="yes" xml:space="preserve">
          <source>Laravel and EJB are examples of such a frameworks.</source>
          <target state="translated">Laravel和EJB就是这样的框架的例子。</target>
        </trans-unit>
        <trans-unit id="fdff96c467769e0a8335f8e963bf4da65252f786" translate="yes" xml:space="preserve">
          <source>Leaving aside the question of the hygienic, last form of drinking process control is much more effective and economic.</source>
          <target state="translated">抛开卫生问题不谈,最后一种饮水过程控制的形式更有效、更经济。</target>
        </trans-unit>
        <trans-unit id="07c8b84bfa96ba21d9cc3879005aab0b48bbe962" translate="yes" xml:space="preserve">
          <source>Let invert control.</source>
          <target state="translated">让反转控制。</target>
        </trans-unit>
        <trans-unit id="ad88ff33863680217c647f3d27552b0f563713ae" translate="yes" xml:space="preserve">
          <source>Let to say that we make some meeting in some hotel.</source>
          <target state="translated">让我们说,我们在一些酒店开一些会议。</target>
        </trans-unit>
        <trans-unit id="7c67342f3bd25bc3faba7eb88fdb1040235adf02" translate="yes" xml:space="preserve">
          <source>Like in this example with TextEditor: if you have only one SpellChecker maybe it is not really necessary to use IoC ? Unless you need to write unit tests or something ...</source>
          <target state="translated">就像这个例子中的TextEditor:如果你只有一个SpellChecker,也许真的没有必要使用IoC?除非你需要编写单元测试之类的东西.....。</target>
        </trans-unit>
        <trans-unit id="8c62f1035a8da667e2e44f248499b63934ff87a4" translate="yes" xml:space="preserve">
          <source>Looking at Inversion of Control as a design pattern, we need to look at what we are inverting.  Dependency Injection inverts control of constructing a graph of objects. If told in layman's term, inversion of control implies change in flow of control in the program. Eg. In traditional standalone app, we have main method, from where the control gets passed to other third party libraries(in case, we have used third party library's function), but through inversion of control control gets transferred from third party library code to our code, as we are taking the service of third party library.  But there are other aspects that need to be inverted within a program - e.g. invocation of methods and threads to execute the code.</source>
          <target state="translated">把反转控制作为一种设计模式来看待,我们需要看一下我们反转的是什么。依赖注入(Dependency Injection)颠倒了构建对象图的控制。如果用通俗的说法,控制反转意味着程序中的控制流的改变。例如,在传统的单机程序中,我们有主方法,从主方法中,控制权被传递给其他第三方库(如果我们使用了第三方库的函数),但通过反转控制,控制权被从第三方库的代码中转移到我们的代码中,因为我们是在接受第三方库的服务。但是在程序内部还有一些其他方面需要反转--比如说方法的调用和线程执行代码。</target>
        </trans-unit>
        <trans-unit id="b60c725080b624e8208034cd77ad12d11359316b" translate="yes" xml:space="preserve">
          <source>Maintenance is the number one thing it solves for me.  It guarantees I am using interfaces so that two classes are not intimate with each other.</source>
          <target state="translated">维护是它为我解决的第一件事。它保证了我在使用接口的时候,让两个类之间不至于亲密无间。</target>
        </trans-unit>
        <trans-unit id="5816c432181bcebf9594b545acf0e0a8249ac7eb" translate="yes" xml:space="preserve">
          <source>Many people, many carafes of water, many plastic cups.</source>
          <target state="translated">很多人,很多人,很多车水,很多塑料杯。</target>
        </trans-unit>
        <trans-unit id="c7cec8240199ab24f4d77dd56821078384a55689" translate="yes" xml:space="preserve">
          <source>Modern Web applications with an MVC architecture depends on the framework to do URL Routing and put Controllers in place for the framework to call.</source>
          <target state="translated">现代Web应用采用MVC架构的现代Web应用依赖于框架来做URL路由,并把Controller放好,让框架调用。</target>
        </trans-unit>
        <trans-unit id="1c2a9ecda48a6efc160875050fa4462dcb9abb1a" translate="yes" xml:space="preserve">
          <source>Modules make no assumptions about what other systems do but rely on their contracts.</source>
          <target state="translated">模块对其他系统不做任何假设,而是依赖它们的合同。</target>
        </trans-unit>
        <trans-unit id="6f982201a39d7ef87a3c876a038f8a4fa0dc564a" translate="yes" xml:space="preserve">
          <source>More flexible, implementation can be decided in runtime</source>
          <target state="translated">更加灵活,在运行时就可以决定实现。</target>
        </trans-unit>
        <trans-unit id="c63d9dccb6ce34a0f517acb6938ddacea50ee998" translate="yes" xml:space="preserve">
          <source>Now the client creating the &lt;code&gt;TextEditor&lt;/code&gt; class has the control over which &lt;code&gt;SpellChecker&lt;/code&gt; implementation to use because we're injecting the dependency to the &lt;code&gt;TextEditor&lt;/code&gt; signature.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在，创建&lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的客户端可以&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;哪个&lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实现，因为我们正在将依赖项注入到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;签名中。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="13ba27318305b67266dadd1df67822736823650f" translate="yes" xml:space="preserve">
          <source>Now when we discuss about the principle of IoC, we use to forget about the Hollywood. For IoC, there has to be three element, a Hollywood, you and a task like to fulfill your dream.</source>
          <target state="translated">现在,当我们讨论IoC的原理时,我们习惯于忘记了好莱坞。对于IoC来说,必须要有三个元素,一个是好莱坞,一个是你,一个是你,一个是实现梦想的任务。</target>
        </trans-unit>
        <trans-unit id="794e86e282511605a39174ab8310c8df0912dd6e" translate="yes" xml:space="preserve">
          <source>Oh yeah, there are testability concerns, but they are secondary to the benefits of IoC/DI.</source>
          <target state="translated">哦,是的,有可测试性的问题,但这些都是次要的,因为IoCDI的好处。</target>
        </trans-unit>
        <trans-unit id="2a0b2431eb5e9cf2d9dbb360cae6c15a32ebeb86" translate="yes" xml:space="preserve">
          <source>Personally I see the strong points of IoC and I really like them but I tend to avoid IoC whenever possible because it turns your software into a collection of classes that no longer constitute a &quot;real&quot; program but just something that needs to be put together by XML configuration or annotation metadata and would fall (and falls) apart without it.</source>
          <target state="translated">就我个人而言,我看到了IoC的强项,我很喜欢它们,但我倾向于尽可能避免IoC,因为它把你的软件变成了一个类的集合,不再构成一个 &quot;真正的 &quot;程序,而只是一个需要通过XML配置或注释元数据拼凑起来的东西,如果没有它,就会散架(而且会掉下来)。</target>
        </trans-unit>
        <trans-unit id="eb08e7347d828558b092b9e77e0fb5458ce9a2d2" translate="yes" xml:space="preserve">
          <source>Programming speaking</source>
          <target state="translated">程序设计演讲</target>
        </trans-unit>
        <trans-unit id="042aa6d6a63ef4409a0e20afcb0ca7083c68c8af" translate="yes" xml:space="preserve">
          <source>Pros:</source>
          <target state="translated">Pros:</target>
        </trans-unit>
        <trans-unit id="8136f601ed9917039203c9b2cbe0a294c9649438" translate="yes" xml:space="preserve">
          <source>Read article for further info and description of benefits such as:</source>
          <target state="translated">阅读文章,了解更多信息和好处描述,如。</target>
        </trans-unit>
        <trans-unit id="45c3dc1c7731c6185824876ed514e54f71bacb64" translate="yes" xml:space="preserve">
          <source>Reference:</source>
          <target state="translated">Reference:</target>
        </trans-unit>
        <trans-unit id="7732c541c1ffea8567dc88af68f95f74152053da" translate="yes" xml:space="preserve">
          <source>Replacing modules has no side effect on other modules</source>
          <target state="translated">更换模块对其他模块没有任何副作用。</target>
        </trans-unit>
        <trans-unit id="bd138957d96ba7b23780bcada6b530b96227fe96" translate="yes" xml:space="preserve">
          <source>Separate &lt;strong&gt;what&lt;/strong&gt;-to-do part from &lt;strong&gt;when&lt;/strong&gt;-to-do part.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;分开&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;什么&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -to-做部分来自&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -to-做兼职。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="059afaba1584e036b6791b838c1e68d09e963a7e" translate="yes" xml:space="preserve">
          <source>Since already there are many answers for the question but none of them shows the breakdown of Inversion Control term I see an opportunity to give a more concise and useful answer.</source>
          <target state="translated">由于这道题已经有很多答案,但没有一个答案能显示出反转控制这个词的细分,我认为有机会给出一个更简洁有用的答案。</target>
        </trans-unit>
        <trans-unit id="653efab96f1cc6697e2adadee9923a19cc942f75" translate="yes" xml:space="preserve">
          <source>So now control is inverted... instead of the computer accepting user input in a fixed order, the user controls the order in which the data is entered, and when the data is saved in the database.</source>
          <target state="translated">所以,现在控制权被颠倒了...........计算机不是按照固定的顺序接受用户的输入,而是由用户控制数据的输入顺序,以及数据何时保存到数据库中。</target>
        </trans-unit>
        <trans-unit id="3aa6c886ac387801f1748536a5be995d8bda23e6" translate="yes" xml:space="preserve">
          <source>So number 1 &lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;above&lt;/a&gt;. &lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;What is Inversion of Control?&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;所以&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上面的第一&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;什么是控制反转？&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2c1664d150c0110d8aebe5ffd87821f87f62f6c0" translate="yes" xml:space="preserve">
          <source>So, obviously, IoC is preferred when you like the varieties.</source>
          <target state="translated">所以,很明显,喜欢品种的时候首选IoC。</target>
        </trans-unit>
        <trans-unit id="6c2f7d11ffa12a6a2f23dc757f05ff32b8b7451b" translate="yes" xml:space="preserve">
          <source>So, the idea is pretty much simple. Rather than creating a user application which will control everything, first you create a reusable framework which will control everything then write your custom codes and hook it to the framework to execute those in time.</source>
          <target state="translated">所以,这个想法很简单。与其创建一个用户应用程序来控制一切,不如先创建一个可重用的框架来控制一切,然后写出你的自定义代码,并将其挂到框架上及时执行。</target>
        </trans-unit>
        <trans-unit id="17cd0a1fe505e5c89d3f463669d21beac2c45c69" translate="yes" xml:space="preserve">
          <source>Summary of above relationship for Inversion of Control available -  &lt;a href=&quot;http://dzone.com/articles/inversion-of-coupling-control&quot;&gt;http://dzone.com/articles/inversion-of-coupling-control&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以上关于控制反转的关系的摘要-http: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://dzone.com/articles/inversion-of-coupling-control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//dzone.com/articles/inversion-of-coupling-control&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5f87445ee9546ceda6f15cc4651858d83a401071" translate="yes" xml:space="preserve">
          <source>Suppose you are an object. And you go to a restaurant:</source>
          <target state="translated">假设你是一个对象。而你去了一家餐厅。</target>
        </trans-unit>
        <trans-unit id="a931c37e5c6a3008d1f1d032d8bc063328c40fe2" translate="yes" xml:space="preserve">
          <source>Suppose your code is a group of workers. They need to build a car. These workers need a place and tools (a software framework) to build the car. A &lt;strong&gt;traditional&lt;/strong&gt; software framework will be like a garage with many tools. So the workers need to make a plan themselves and use the tools to build the car. Building a car is not an easy business, it will be really hard for the workers to plan and cooperate properly. A &lt;strong&gt;modern&lt;/strong&gt; software framework will be like a modern car factory with all the facilities and managers in place. The workers do not have to make any plan, the managers (part of the framework, they are the smartest people and made the most sophisticated plan) will help coordinate so that the workers know when to do their job (framework calls your code). The workers just need to be flexible enough to use any tools the managers give to them (by using Dependency Injection).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;假设您的代码是一群工人。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他们需要制造一辆汽车。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这些工人需要一个地方和工具（一个软件框架）来制造汽车。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一个&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;传统的&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;软件框架将像了很多工具，一个车库。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，工人需要自己制定计划并使用工具来制造汽车。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;造车不是一件容易的事，对工人来说，正确地计划和合作确实非常困难。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一个&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现代&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;软件框架将像拥有所有设施和经理的现代化汽车工厂一样。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;工人不必制定任何计划，经理（框架的一部分，他们是最聪明的人，并且制定了最复杂的计划）将帮助协调工作，以便工人知道何时完成工作（框架调用您的代码）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;工作人员只需要足够灵活即可使用管理人员提供给他们的任何工具（通过使用依赖注入）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="819e65d07437a790910bd253a4b815127c82c5c0" translate="yes" xml:space="preserve">
          <source>Template method design pattern. template method when-to-do part -- primitive subclass implementation what-to-do part</source>
          <target state="translated">模板方法设计模式.模板方法when-to-do部分----基元子类实现what-to-do部分</target>
        </trans-unit>
        <trans-unit id="072d0efec26d9587c786734676ace0311bad2787" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;inversion&lt;/em&gt; part of the Inversion of Control (IoC) is the confusing thing; because &lt;em&gt;inversion&lt;/em&gt; is the relative term. The best way to understand IoC is to forget about that word!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制反转（IoC）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;反转&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;部分令人困惑。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因为&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;反转&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是相对项。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;理解IoC的最好方法就是忘记这个词！&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e4f1d9cbbfcaefe232b0b17cdd2fa288e6d29b99" translate="yes" xml:space="preserve">
          <source>The Inversion of Control (IoC) and Dependency Injection (DI) patterns are all about removing dependencies from your code.</source>
          <target state="translated">反转控制(IoC)和依赖注入(DI)模式都是为了消除代码中的依赖关系。</target>
        </trans-unit>
        <trans-unit id="2c005f107282c342e284d1960e28999a1e57b7a8" translate="yes" xml:space="preserve">
          <source>The child has now the ability to ask questions and the parent can respond with answers and permissions. Simply means the control is inverted!
The child is now free to ask questions anytime and though there is still dependency with the parent regarding permissions, he is not dependent in the means of speaking/asking questions.</source>
          <target state="translated">现在孩子有了提问的能力,家长可以用回答和权限来回答。简单来说就是控制权倒置了! 孩子现在可以随时提出问题,虽然在权限上与父母仍有依赖性,但在说话提问的方式上,孩子没有了依赖性。</target>
        </trans-unit>
        <trans-unit id="e8d779de32d8b41b513d81e1a6cd345473659bd2" translate="yes" xml:space="preserve">
          <source>The consumer, X, needs the consumed class, Y, to accomplish something. That&amp;rsquo;s all good and natural, but does X really need to know that it uses Y?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;消费者X需要消费类Y来完成某项工作。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;那都是自然而然的，但是X真的需要知道它使用Y吗？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb2cd6c0bbc8de86755315a949691e7759ddbfdb" translate="yes" xml:space="preserve">
          <source>The non-techy answer is being able to swap out an engine in a car right before you turn it on. If everything hooks up right (the interface), you are good.</source>
          <target state="translated">非技术性的答案是,在你打开汽车之前,就可以把发动机换掉。如果一切正常(界面),你就很好。</target>
        </trans-unit>
        <trans-unit id="7786c0b8ac6345f453b43fa76ea60f8d57e64b53" translate="yes" xml:space="preserve">
          <source>The same meeting in the same place, but instead of plastic cups we have a waiter with one glass cup (Singleton)</source>
          <target state="translated">同样是在同一个地方开会,但我们的服务员没有了塑料杯,而是用一个玻璃杯(Singleton)代替了塑料杯</target>
        </trans-unit>
        <trans-unit id="542741f771182eac1541609f892959c01a150bb3" translate="yes" xml:space="preserve">
          <source>There are several techniques possible for each of these steps based on the technology/language you are using for your implementation.</source>
          <target state="translated">根据您在实施中使用的技术语言,这些步骤中的每个步骤都有几种可能的技术。</target>
        </trans-unit>
        <trans-unit id="f749eb8ad5cf48a5188523fdc79fab2ce30e58b0" translate="yes" xml:space="preserve">
          <source>There are three types of Inversion of Control:</source>
          <target state="translated">控制权的反转有三种类型。</target>
        </trans-unit>
        <trans-unit id="968de91a1dce32fc6c7756cc1c5d7baf82ecfcaf" translate="yes" xml:space="preserve">
          <source>There arises a new class of bugs where you get your XML config or your annotations wrong and you can spend a lot of time finding out why your IoC container injects a null reference into one of your objects under certain conditions.</source>
          <target state="translated">有一类新的bug出现了,在这些bug中,你会弄错你的XML配置或注释,你可能会花很多时间来找出为什么你的IoC容器在特定条件下向其中一个对象注入空引用。</target>
        </trans-unit>
        <trans-unit id="8ff9d8c5ba3c96f3e004ed255d28c54d0ee2f22d" translate="yes" xml:space="preserve">
          <source>There is a decoupling of the execution of a certain task from implementation.</source>
          <target state="translated">某项任务的执行与实施有一个脱钩的过程。</target>
        </trans-unit>
        <trans-unit id="bb2f0f107a4127228821c8f74e51b0ece1573141" translate="yes" xml:space="preserve">
          <source>Think about yourself as organizer of such meeting. You need the way to message to hotel administration that</source>
          <target state="translated">想一想自己是这样的会议的组织者。你需要向酒店管理部门传递信息的方式,即</target>
        </trans-unit>
        <trans-unit id="5c60cb7db906ef638719d0294b506aed4ba3a101" translate="yes" xml:space="preserve">
          <source>This is common characteristic of frameworks,
IOC &lt;strong&gt;manages java objects&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是框架的共同特征，IOC &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;管理java对象&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba7c35b6e4505275374089e51f124be81a7d7fba" translate="yes" xml:space="preserve">
          <source>This simple scenario explains the control is centered to the parent. The child's freedom is restricted and highly depends on the parent's question. The child can &lt;strong&gt;ONLY&lt;/strong&gt; speak when asked to speak, and can &lt;strong&gt;ONLY&lt;/strong&gt; act when granted permission.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这个简单的场景说明了控件以父控件为中心。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;孩子的自由受到限制，在很大程度上取决于父母的问题。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;孩子&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;只有&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在被要求讲话时才可以讲话，并且&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;只有&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在获得许可&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;后才&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;采取行动。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f867a139d0dbe3e72e634a7554a484922278981e" translate="yes" xml:space="preserve">
          <source>What is Inversion of Control</source>
          <target state="translated">什么是控制权倒置</target>
        </trans-unit>
        <trans-unit id="6b2120a1856f6091491edc697891105447b78317" translate="yes" xml:space="preserve">
          <source>What is Inversion of Control?</source>
          <target state="translated">什么是反转控制?</target>
        </trans-unit>
        <trans-unit id="cf7391c25fc73fff3e34f8a317b9b44c5d611a45" translate="yes" xml:space="preserve">
          <source>What is identified is the following relationship:</source>
          <target state="translated">确定的是以下关系:</target>
        </trans-unit>
        <trans-unit id="89511a76c8cbc174d6fe0018b08443f894e18a4b" translate="yes" xml:space="preserve">
          <source>What is it?</source>
          <target state="translated">是什么?</target>
        </trans-unit>
        <trans-unit id="b4f439cf8dc8207caee2714fe1b467c5ad192100" translate="yes" xml:space="preserve">
          <source>What it means in practice is that the method does not depends directly on a particular implementation; any implementation that meets the requirements can be passed as a parameter.</source>
          <target state="translated">实际上它的意思是,该方法不直接依赖于特定的实现,任何符合要求的实现都可以作为参数传递。</target>
        </trans-unit>
        <trans-unit id="abf52a2348eb59964ab851091350a8d3313ed339" translate="yes" xml:space="preserve">
          <source>What it means is that don't go to the Hollywood to fulfill your dream rather if you are worthy then Hollywood will find you and make your dream comes true. Pretty much inverted, huh?</source>
          <target state="translated">它的意思是,不要去好莱坞实现你的梦想,而如果你有价值,那么好莱坞会找到你,让你的梦想成真。相当于颠倒了吧?</target>
        </trans-unit>
        <trans-unit id="20de39054338a4c253f3ce11367d13296360d90a" translate="yes" xml:space="preserve">
          <source>What we've done here creates a dependency between the &lt;code&gt;TextEditor&lt;/code&gt; and the &lt;code&gt;SpellChecker&lt;/code&gt;.
In an IoC scenario we would instead do something like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我们在这里所做的事情在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;之间创建了一个依赖关系&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在IoC场景中，我们改为执行以下操作：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9ef313862d8b18eb5751f0b6070898cb9d7e33b7" translate="yes" xml:space="preserve">
          <source>When is it appropriate to use and when not?</source>
          <target state="translated">什么时候使用合适,什么时候不合适?</target>
        </trans-unit>
        <trans-unit id="e521f0561524653f00013217388d2d5971994008" translate="yes" xml:space="preserve">
          <source>When somebody want to drink, she fill cup, drink and throw cup on the floor.</source>
          <target state="translated">有人要喝,她就把杯子装满,喝完后把杯子扔在地上。</target>
        </trans-unit>
        <trans-unit id="0b055b735943d522f8380495fc0b53e141cd9b25" translate="yes" xml:space="preserve">
          <source>When somebody want to drink, she get from waiter glass, drink and return it back to waiter.</source>
          <target state="translated">当有人想喝酒的时候,她从服务员的杯子里拿出来,喝完后再还给服务员。</target>
        </trans-unit>
        <trans-unit id="3313b632cba0a4333c123f9494413a6ee77d024e" translate="yes" xml:space="preserve">
          <source>When you use a desktop computer, you have slaved (or say, controlled). You have to sit before a screen and look at it. Using the keyboard to type and using the mouse to navigate. And a badly written software can slave you even more. If you replace your desktop with a laptop, then you somewhat inverted control. You can easily take it and move around. So now you can control where you are with your computer, instead of your computer controlling it.</source>
          <target state="translated">当你使用台式电脑的时候,你已经被奴役了(或者说,控制了)。你必须坐在屏幕前看着它。用键盘打字,用鼠标导航。而一个写得不好的软件会让你更加奴役。如果你把你的桌面换成了笔记本电脑,那么你有点倒置控制。你可以轻松地把它和移动。因此,现在你可以控制你的电脑,而不是你的电脑控制它的位置。</target>
        </trans-unit>
        <trans-unit id="1a4624ec0be8f6f66ea2c27b7bf9c47a30790d06" translate="yes" xml:space="preserve">
          <source>When you want to change with the Dropbox implementation you have to replace all the lines where &lt;code&gt;new&lt;/code&gt; GoogleDriveService object is constructed and use the DropboxService. Besides when testing the SomeController class the constructor always expects the GoogleDriveService class and the actual methods of this class are triggered.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您想通过Dropbox实现进行更改，则必须替换所有用于&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;构建&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; GoogleDriveService对象&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的行，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;并使用DropboxService。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;除了在测试SomeController类时，构造函数始终希望使用GoogleDriveService类，并且该类的实际方法会被触发。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aab7b8a12bd75ba2b9b47803cd1e21b97c48b86c" translate="yes" xml:space="preserve">
          <source>When your requirements change say, instead of GoogleDrive you are asked to use the Dropbox. You only need to write a dropbox implementation for the StorageServiceInterface. You don't have make any changes in the controller as long as Dropbox implementation adheres to the StorageServiceInterface.</source>
          <target state="translated">当你的需求发生变化时,比如说,要求你使用Dropbox,而不是GoogleDrive。你只需要为StorageServiceInterface编写一个Dropbox实现。只要Dropbox的实现符合StorageServiceInterface,你就不需要在控制器中做任何更改。</target>
        </trans-unit>
        <trans-unit id="119b801f84f26b70137a5f640c2eaa28d07fdb9f" translate="yes" xml:space="preserve">
          <source>Which problem does it solve?</source>
          <target state="translated">它能解决哪个问题?</target>
        </trans-unit>
        <trans-unit id="fdfd96244f49069c6524042296c538a51a6739a9" translate="yes" xml:space="preserve">
          <source>While testing you can create the mock for the StorageServiceInterface with the dummy implementation where all the methods return null(or any predefined value as per your testing requirement).</source>
          <target state="translated">在测试时,你可以为StorageServiceInterface创建一个假人实现的模拟,其中所有的方法都返回null(或根据你的测试需求,任意预定义的值)。</target>
        </trans-unit>
        <trans-unit id="df530f4bc1a8f211d961ad4e0af76790c047eaa9" translate="yes" xml:space="preserve">
          <source>With the above ideas in mind. We still miss a key part of IoC. In the scenario of IoC, the software/object consumer is a sophisticated framework. That means the code you created is not called by yourself. Now let's explain why this way works better for a web application.</source>
          <target state="translated">有了以上的想法。我们还是错过了IoC的一个关键部分。在IoC的场景中,软件对象消费者是一个复杂的框架。这意味着你所创建的代码不是自己调用的。现在我们来解释一下,为什么这种方式对于一个Web应用来说效果更好。</target>
        </trans-unit>
        <trans-unit id="1d600b9ba9832d2d39a632cc07fe364489b02235" translate="yes" xml:space="preserve">
          <source>X is not dependent on Y anymore</source>
          <target state="translated">X已经不依赖于Y了</target>
        </trans-unit>
        <trans-unit id="c521892a4c82d2426166e25844e7b8aaa13cf0a9" translate="yes" xml:space="preserve">
          <source>Your code gets decoupled so you can easily exchange implementations of an interface with alternative implementations</source>
          <target state="translated">你的代码会被解耦,所以你可以轻松地将接口的实现与其他实现交换。</target>
        </trans-unit>
        <trans-unit id="f9c1a75603cd89b8c4cf5d8e81ab5f55c6d22610" translate="yes" xml:space="preserve">
          <source>Your desktop successfully implements IoC in this case. It accepts a variety type of monitors, while the laptop does not, it needs a specific screen to get fixed.</source>
          <target state="translated">在这种情况下,你的台式机成功实现了IoC。它可以接受各种类型的显示器,而笔记本不接受,它需要特定的屏幕才能得到修复。</target>
        </trans-unit>
        <trans-unit id="3f5ad33ace051da1ec338535b39ff8115145080a" translate="yes" xml:space="preserve">
          <source>a) &lt;strong&gt;Most of the developers don't know how to use it&lt;/strong&gt;.  For example, I can create a class called &lt;strong&gt;Customer&lt;/strong&gt; and &lt;strong&gt;I can create automatically&lt;/strong&gt; (using the tools of the IDE) an interface called &lt;strong&gt;ICustomer&lt;/strong&gt;. So, it's not rare to find a folder filled with classes and interfaces, no matter if the interfaces will be reused or not. It's called BLOATED. Some people could argue that &quot;may be in the future we could use it&quot;.  :-|</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a）&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;大多数开发人员都不知道如何使用它&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。例如，我可以创建一个名为&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Customer&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的类，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;并且&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以自动创建&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（使用IDE的工具）一个名为&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ICustomer&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的接口&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。因此，无论接口是否被重用，都很难找到一个充满类和接口的文件夹。它被称为BLOATED。有人可能会争辩说&amp;ldquo;也许将来我们可以使用它&amp;rdquo;。 ：-|&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a65833fb178f769cbd2a9bc9021c43263c312e48" translate="yes" xml:space="preserve">
          <source>a. Alleviates a component from being responsible for managing it's dependencies.</source>
          <target state="translated">a.减轻了一个组件对管理其依赖性的责任;</target>
        </trans-unit>
        <trans-unit id="63ff9730ec57ffeb05ecc06369fb7667129e3bef" translate="yes" xml:space="preserve">
          <source>a. Critical when doing test-driven development. Without IoC it can be difficult to test, because the components under test are highly coupled to the rest of the system.</source>
          <target state="translated">a.在进行测试驱动开发时至关重要。没有IoC可能很难测试,因为被测组件与系统的其他部分高度耦合。</target>
        </trans-unit>
        <trans-unit id="44985c1031c23e77f88374731d5a01d00e2f9eb2" translate="yes" xml:space="preserve">
          <source>and she all of time offers to guests drinking.</source>
          <target state="translated">她一直在给客人提供饮料。</target>
        </trans-unit>
        <trans-unit id="54acfe4a62ef1001dcfd19dbc445f3cc5fc3822b" translate="yes" xml:space="preserve">
          <source>b) It has some limitings. For example, let's talk about the case of &lt;strong&gt;Dog&lt;/strong&gt; and &lt;strong&gt;Cat&lt;/strong&gt; and I want to add a new service (functionality) only for dogs.  Let's say that I want to calculate the number of days that I need to train a dog (&lt;strong&gt;&lt;code&gt;trainDays()&lt;/code&gt;&lt;/strong&gt;), for cat it's useless, cats can't be trained (I'm joking).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;b）有一些限制。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如，让我们谈谈&amp;ldquo; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;狗&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;猫&amp;rdquo;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的情况，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我想添加仅针对狗的新服务（功能）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;假设我要计算训练狗的天数（&lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;trainDays()&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;），因为猫没用，猫不能训练（我在开玩笑）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74856b92af69493420e4b9bc813673dbcf236ce2" translate="yes" xml:space="preserve">
          <source>b. Critical when developing modular systems. A modular system is a system whose components can be replaced without requiring recompilation.</source>
          <target state="translated">b.开发模块化系统时至关重要。模块化系统是指其组件可以更换而不需要重新编译的系统。</target>
        </trans-unit>
        <trans-unit id="0ea4ef6079611afe337c0be4dc3a73c339faed98" translate="yes" xml:space="preserve">
          <source>b. Provides the ability to swap dependency implementations in different environments.</source>
          <target state="translated">b.提供了在不同环境中交换依赖性实现的能力。</target>
        </trans-unit>
        <trans-unit id="7ea4a797dcd6b8e84153f539da6ccdf8400ac494" translate="yes" xml:space="preserve">
          <source>b.1) If I add &lt;code&gt;trainDays()&lt;/code&gt; to the Service &lt;strong&gt;AnimalService&lt;/strong&gt; then it also works with cats and it's not valid at all.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;b.1）如果我将&lt;/font&gt;&lt;/font&gt; &lt;code&gt;trainDays()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;添加&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;到Service &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AnimalService，&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;那么它也可以与cats一起使用，并且完全无效。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="95864b278c6a1d49a8369149e67975a2e4799356" translate="yes" xml:space="preserve">
          <source>b.2) I can add a condition in &lt;code&gt;trainDays()&lt;/code&gt; where it evaluates which class is used. But it will break completely the IoC.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;b.2）我可以在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;trainDays()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;添加一个条件，以&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;评估使用哪个类。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是它将完全破坏IoC。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e1d91394a944977977450e66a7e9e0fe56940820" translate="yes" xml:space="preserve">
          <source>b.3) I can create a new class of service called &lt;strong&gt;DogService&lt;/strong&gt; just for the new functionality. But, it will increase the maintainability of the code because we will have two classes of service (with similar functionality) for &lt;strong&gt;Dog&lt;/strong&gt; and it's bad.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;b.3）我可以&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为新功能&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;创建一个称为&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DogService&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的新&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;服务类&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，这将增加代码的可维护性，因为我们将为&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dog&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;提供两类服务（具有相似的功能）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，这很不好。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4a4aa0aaf5a477fe08cfc207c3e55741b064206c" translate="yes" xml:space="preserve">
          <source>c. Allows a component be tested through mocking of dependencies.</source>
          <target state="translated">c.允许通过模拟依赖关系来测试一个组件。</target>
        </trans-unit>
        <trans-unit id="c4ee524cd2357103632cd711413ed416314da6e5" translate="yes" xml:space="preserve">
          <source>c. Critical if there are many cross-cutting concerns which need to addressed, partilarly in an enterprise application.</source>
          <target state="translated">c.如果有许多交叉的问题需要解决,特别是在企业应用中需要解决的问题,则至关重要;</target>
        </trans-unit>
        <trans-unit id="f6db05452a6d0e2a2846aef3ed85a00204a3ced3" translate="yes" xml:space="preserve">
          <source>d. Provides a mechanism for sharing resources throughout an application.</source>
          <target state="translated">d.提供了一个在整个应用程序中共享资源的机制。</target>
        </trans-unit>
        <trans-unit id="8c0d44faec42652e00c54838468ee5290bfb4dcf" translate="yes" xml:space="preserve">
          <source>if you find yourself copying an entire method and only changing a small piece of the code, you can consider tackling it with inversion of control</source>
          <target state="translated">如果你发现自己复制了整个方法而只修改了一小部分代码,可以考虑用反转控制的方法来处理</target>
        </trans-unit>
        <trans-unit id="859c89047ad8d601ec08028577b1b350e4c0a8b6" translate="yes" xml:space="preserve">
          <source>meeting members will need glass of water but not piece of cake.</source>
          <target state="translated">会议成员需要水杯,但不需要蛋糕。</target>
        </trans-unit>
        <trans-unit id="ac7e8efc5ef7c1cb26918e697fd6e7efbfcb80be" translate="yes" xml:space="preserve">
          <source>thereby controlling the flow of user interaction.</source>
          <target state="translated">从而控制用户交互的流程。</target>
        </trans-unit>
        <trans-unit id="b849754aed43b9f2f84d1f0fd912c3a39d7f8783" translate="yes" xml:space="preserve">
          <source>xUnit fixture. Setup and TearDown (what-to-do part) -- xUnit frameworks calls to Setup at the beginning and TearDown at the end (when-to-do part)</source>
          <target state="translated">xUnit夹具。Setup和TearDown(什么时候做的部分)----xUnit框架在开始时调用Setup,结束时调用TearDown(什么时候做的部分)。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
