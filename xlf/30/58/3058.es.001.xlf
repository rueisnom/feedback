<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/3058">
    <body>
      <group id="3058">
        <trans-unit id="373c315627044d8114133a9eceb77e35102452b1" translate="yes" xml:space="preserve">
          <source>&quot;Any nontrivial application is made up of two or more classes that
  collaborate with each other to perform some business logic.
  Traditionally, each object is responsible for obtaining its own
  references to the objects it collaborates with (its dependencies).
  When applying DI, the objects are given their dependencies at creation
  time by some external entity that coordinates each object in the
  system. In other words, dependencies are injected into objects.&quot;</source>
          <target state="translated">&quot;Cualquier aplicación no trivial se compone de dos o más clases que colaboran entre sí para realizar alguna lógica de negocio.Tradicionalmente,cada objeto se encarga de obtener sus propias referencias de los objetos con los que colabora (sus dependencias).Al aplicar DI,los objetos reciben sus dependencias en el momento de la creación por alguna entidad externa que coordina cada objeto del sistema.En otras palabras,las dependencias se inyectan en los objetos&quot;.</target>
        </trans-unit>
        <trans-unit id="1fbd17eb3e2e00cb03e793a913cd5879c46118b0" translate="yes" xml:space="preserve">
          <source>&amp;ndash; from instantiation to destruction through its BeanFactory.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;- desde la instanciaci&amp;oacute;n hasta la destrucci&amp;oacute;n a trav&amp;eacute;s de su BeanFactory.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="068b6ab33b6b4be771ec1212da10f6ec032066f1" translate="yes" xml:space="preserve">
          <source>-Java components that are instantiated by the IoC container are called beans, and the &lt;strong&gt;IoC container manages a bean's scope, lifecycle events, and any AOP features&lt;/strong&gt; for which it has been configured and coded.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-Los componentes de Java que son instanciados por el contenedor de IoC se denominan beans, y el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;contenedor de IoC gestiona el alcance de un bean, los eventos del ciclo de vida y cualquier caracter&amp;iacute;stica de AOP&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para la que se haya configurado y codificado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="afa4d9b9f6de7b5688061d0997a422f279e431e1" translate="yes" xml:space="preserve">
          <source>3 . It becomes more appropriate the minute you have a medium sized project of somewhat more complexity.  I would say it becomes appropriate the minute you start feeling pain.</source>
          <target state="translated">3.Se vuelve más apropiado en el momento en que se tiene un proyecto de tamaño medio de algo más de complejidad.Yo diría que se vuelve apropiado en el momento en que empiezas a sentir dolor.</target>
        </trans-unit>
        <trans-unit id="40b8b55e45ad1a598253beb75f7288ba8ba55f1d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;Wikipedia Article&lt;/a&gt;. To me, inversion of control is turning your sequentially written code and turning it into an delegation structure. Instead of your program explicitly controlling everything, your program sets up a class or library with certain functions to be called when certain things happen.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Art&amp;iacute;culo de Wikipedia&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para m&amp;iacute;, la inversi&amp;oacute;n de control es convertir su c&amp;oacute;digo escrito secuencialmente y convertirlo en una estructura de delegaci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En lugar de que su programa controle expl&amp;iacute;citamente todo, su programa configura una clase o biblioteca con ciertas funciones a las que se llamar&amp;aacute; cuando sucedan ciertas cosas.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b3a6cae60fc41c6d95dc1070dcab2bec94c65c7a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;QUICK EXAMPLE:Inversion of Control is about getting freedom, more flexibility, and less dependency. When you are using a desktop computer, you are slaved (or say, controlled). You have to sit before a screen and look at it. Using keyboard to type and using mouse to navigate. And a bad written software can slave you even more. If you replaced your desktop with a laptop, then you somewhat inverted control. You can easily take it and move around. So now you can control where you are with your computer, instead of computer controlling it&lt;/code&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;QUICK EXAMPLE:Inversion of Control is about getting freedom, more flexibility, and less dependency. When you are using a desktop computer, you are slaved (or say, controlled). You have to sit before a screen and look at it. Using keyboard to type and using mouse to navigate. And a bad written software can slave you even more. If you replaced your desktop with a laptop, then you somewhat inverted control. You can easily take it and move around. So now you can control where you are with your computer, instead of computer controlling it&lt;/code&gt; &lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce6277c62215b72c62f6d7b32405d03e8dab8242" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;After 1 hour...&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Despu&amp;eacute;s de 1 hora...&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4bf00ad6158c463a4d18359447633037167e612a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;In a technological way of explaining, this is very similar to console/shell/cmd vs GUI interaction. (Which is answer of Mark Harrison above no.2 top answer).
In console, you are dependent on the what is being asked/displayed to you and you can't jump to other menus and features without answering it's question first; following a strict sequential flow. (programmatically this is like a method/function loop).
However with GUI, the menus and features are laid out and the user can select whatever it needs thus having more &lt;strong&gt;control&lt;/strong&gt; and being less restricted. (programmatically, menus have callback when selected and an action takes place).&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En una forma tecnol&amp;oacute;gica de explicar, esto es muy similar a la interacci&amp;oacute;n consola / shell / cmd vs GUI. (Cu&amp;aacute;l es la respuesta de Mark Harrison arriba de la respuesta superior n. &amp;deg; 2). En la consola, depende de lo que se le pregunta / muestra y no puede saltar a otros men&amp;uacute;s y funciones sin responder primero a su pregunta; siguiendo un flujo secuencial estricto. (program&amp;aacute;ticamente esto es como un m&amp;eacute;todo / bucle de funci&amp;oacute;n). Sin embargo, con la GUI, los men&amp;uacute;s y las funciones se presentan y el usuario puede seleccionar lo que necesite para tener m&amp;aacute;s &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;control&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y estar menos restringido. (mediante programaci&amp;oacute;n, los men&amp;uacute;s tienen devoluci&amp;oacute;n de llamada cuando se seleccionan y se lleva a cabo una acci&amp;oacute;n).&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ed29e8d6239fa919bfe90a1309aaa619ab390e6c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;With this objects tell thier dependencies.
And spring makes it available. &lt;br/&gt;This leads to loosely coupled application development.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con esto los objetos cuentan sus dependencias. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y la primavera lo hace disponible. &lt;/font&gt;&lt;/font&gt;&lt;br/&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto conduce a un desarrollo de aplicaciones poco acoplado.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="288921ce6b306091d7e29a08f49c763343c42534" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;*Parent&lt;/strong&gt;: You can only speak when I ask you questions and you can only act when I give you permission.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;* Padre&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : solo puedes hablar cuando te hago preguntas y solo puedes actuar cuando te doy permiso.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c0849807fdb7fca5c56ad0f55c3e8ce3038f606" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;The control of the dependencies is inverted from one being called to the one calling.&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El control de las dependencias se invierte de una llamada a la que llama.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1f1651d8874b325c4ed4c493b808a5d27b680253" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: (Wants to play but since there's no question from the parent, the child can't do anything).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ni&amp;ntilde;o&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : (Quiere jugar pero como no hay preguntas de los padres, el ni&amp;ntilde;o no puede hacer nada).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba8aa85f4075a8f58fc6dbfbaed6f4e152f4edf4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: (finally is able to play).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ni&amp;ntilde;o&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : (finalmente puede jugar).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb2030779c1e6c6a7bb69d41c861abf6968afbcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: No.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ni&amp;ntilde;o&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : No.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d4cb53aa68484a8be2e5c3ce16e52da82e925950" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: Yes.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ni&amp;ntilde;o&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : si.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e948765d7e551575d5bbb9e78278d7dc0f14c8f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Classic code (without Dependency injection)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C&amp;oacute;digo cl&amp;aacute;sico (sin inyecci&amp;oacute;n de dependencia)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d25c9d64eb9c3856ad367881451af0e0aa609be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Creation Inversion&lt;/strong&gt; 
It can be implemented by the following patterns: Factory Pattern, Service Locator, and Dependency Injection. Creation Inversion helps to eliminate dependencies between types moving the process of dependency objects creation outside of the type that uses these dependency objects. Why dependencies are bad? Here are a couple of examples: direct creation of a new object in your code makes testing harder; it is impossible to change references in assemblies without recompilation (OCP principle violation); you can&amp;rsquo;t easily replace a desktop-UI by a web-UI.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Creaci&amp;oacute;n de inversi&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Se puede implementar mediante los siguientes patrones: Patr&amp;oacute;n de f&amp;aacute;brica, Localizador de servicios e Inyecci&amp;oacute;n de dependencias. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La inversi&amp;oacute;n de creaci&amp;oacute;n ayuda a eliminar las dependencias entre tipos que mueven el proceso de creaci&amp;oacute;n de objetos de dependencia fuera del tipo que utiliza estos objetos de dependencia. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Por qu&amp;eacute; las dependencias son malas? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; hay un par de ejemplos: la creaci&amp;oacute;n directa de un nuevo objeto en su c&amp;oacute;digo dificulta las pruebas; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;es imposible cambiar las referencias en ensamblajes sin recompilaci&amp;oacute;n (violaci&amp;oacute;n del principio OCP); &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no puede reemplazar f&amp;aacute;cilmente una interfaz de usuario de escritorio por una interfaz de usuario web.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="08e78ee2b7c128a89d211a2bf39b2f84466452c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Dependency Injection(DI):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inyecci&amp;oacute;n de dependencia (DI):&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d1b89118884de42df71b6af8b8ea2200c727bc22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:-&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example:-&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="64a28b0eac5fea46185f8873a51b9268bdfe88d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Flow Inversion&lt;/strong&gt; 
Changes control of the flow. For example, you have a console application where you asked to enter many parameters and after each entered parameter you are forced to press Enter. You can apply Flow Inversion here and implement a desktop application where the user can choose the sequence of parameters&amp;rsquo; entering, the user can edit parameters, and at the final step, the user needs to press Enter only once.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inversi&amp;oacute;n de flujo&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Cambia el control del flujo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, tiene una aplicaci&amp;oacute;n de consola en la que solicit&amp;oacute; ingresar muchos par&amp;aacute;metros y despu&amp;eacute;s de cada par&amp;aacute;metro ingresado se ve obligado a presionar Enter. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede aplicar Flow Inversion aqu&amp;iacute; e implementar una aplicaci&amp;oacute;n de escritorio donde el usuario puede elegir la secuencia de entrada de par&amp;aacute;metros, el usuario puede editar par&amp;aacute;metros y, en el paso final, el usuario necesita presionar Enter solo una vez.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cba09dbb242bc98d15d12a8fef257c90c62924a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I shall write down my simple understanding of this two terms:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Escribir&amp;eacute; mi simple comprensi&amp;oacute;n de estos dos t&amp;eacute;rminos:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="38d46125888ee3caad2da28aa8d6aa5a8926b541" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I've read a lot of answers for this but if someone is still confused and needs a plus ultra &quot;laymans term&quot; to explain IoC here is my take:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;He le&amp;iacute;do muchas respuestas para esto, pero si alguien todav&amp;iacute;a est&amp;aacute; confundido y necesita un &quot;t&amp;eacute;rmino laico&quot; ultra m&amp;aacute;s para explicar IoC, aqu&amp;iacute; est&amp;aacute; mi opini&amp;oacute;n:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6bf58eb168559f7cf585397ed5dd09bcc2ca3fba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Interface Inversion&lt;/strong&gt; 
Providers shouldn&amp;rsquo;t define an interface. Instead, the consumer should define the interface and providers must implement it. Interface Inversion allows eliminating the necessity to modify the consumer each time when a new provider added.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; proveedores de &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;inversi&amp;oacute;n de interfaz&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no deber&amp;iacute;an definir una interfaz. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En cambio, el consumidor debe definir la interfaz y los proveedores deben implementarla. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La inversi&amp;oacute;n de interfaz permite eliminar la necesidad de modificar al consumidor cada vez que se agrega un nuevo proveedor.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed0b7b3bd833a3c6061e7d3d4e4435a418101a66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inversion of Control(IoC) Container:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Contenedor de Inversi&amp;oacute;n de Control (IoC):&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c3fde237e686241fd27580469f73cb15114b6b9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inversion of control as a design guideline serves the following purposes:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La inversi&amp;oacute;n del control como gu&amp;iacute;a de dise&amp;ntilde;o sirve para los siguientes prop&amp;oacute;sitos:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a3b6606a4ce50930db11c9d5745c4e9507283a90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inversion of control&lt;/strong&gt; is when you go to the grocery store and your wife gives you the list of products to buy.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La inversi&amp;oacute;n del control&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es cuando vas al supermercado y tu esposa te da la lista de productos para comprar.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1cc610b7deb430a2900463e9ef2e6cade3227cf5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: Do you want to eat?</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Padre&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &amp;iquest;Quieres comer?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba949e705d98f2c3b04905c56af2d99f2ae12904" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: I'm back. Do you want to play?</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Padre&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : estoy de vuelta. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Quieres jugar?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="586ff1c99fde9c623fd38dc89e47f278ee449a8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: Okay, I'll be back. Wait for me.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Padre&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Est&amp;aacute; bien, volver&amp;eacute;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esp&amp;eacute;rame.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce4d1c01e2c78cc40a78a655d28a601a32149798" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: Permission granted.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Padre&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Permiso otorgado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3e6a711eba13c601406802a4b5d24f5f621c30a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: This means, you can't ask me if you can eat, play, go to the bathroom or even sleep if I don't ask you.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Padre&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Esto significa que no puedes preguntarme si puedes comer, jugar, ir al ba&amp;ntilde;o o incluso dormir si no te pregunto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="228fabf1f35817d8a668be417f7bbf490117f1fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Useful links:-&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Enlaces &amp;uacute;tiles:-&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="21b7eafe7407645083182e0bf75e568a7b1481a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using dependency injection&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Usando inyecci&amp;oacute;n de dependencia&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fea0286fee454bd929c61270ce0cea0daaee4e58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What problems does it solve?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Qu&amp;eacute; problemas resuelve?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c14e5a9c9d9ef0696566b4fb6c19a3faae2a437d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When is it appropriate and when not?&lt;/strong&gt;
In my opinion you use DI when you think there are (or there can be) alternative implementations of a class.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Cu&amp;aacute;ndo es apropiado y cu&amp;aacute;ndo no? &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; En mi opini&amp;oacute;n, usas DI cuando crees que hay (o puede haber) implementaciones alternativas de una clase.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="825b03cbbacfbb1b7a19868df499e5872f62c0c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;With IoC:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con IoC:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bd7ee2632bbdd33b1d9442666a7099f0a028b310" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;With IoC&lt;/strong&gt;: You can ask for &quot;fruit&quot;. You can get different fruits each time you get served. for example, apple, orange, or water melon.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con IoC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : puede pedir &quot;fruta&quot;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puedes obtener diferentes frutas cada vez que te sirven. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;por ejemplo, manzana, naranja o sand&amp;iacute;a.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba18cb219c6ee97148042cefde5d4632bbb536d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;With IoC&lt;/strong&gt;: You have a &lt;strong&gt;desktop&lt;/strong&gt; computer and you accidentally break the screen. You find you can just grab almost any desktop monitor from the market, and it works well with your desktop.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con IoC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : tienes una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;computadora de &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;escritorio&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y accidentalmente rompes la pantalla. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Descubres que puedes tomar casi cualquier monitor de escritorio del mercado y funciona bien con tu escritorio.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0a27438b705ef7753d44c454be364c9f0bede393" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Without IoC:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin IoC:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1d13a77d2a7550cfdb5ca4858f7dcdbc2457d535" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Without IoC&lt;/strong&gt;: You have a &lt;strong&gt;laptop&lt;/strong&gt; computer and you accidentally break the screen. And darn, you find the same model laptop screen is nowhere in the market. So you're stuck.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin IoC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : tienes una &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;computadora&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; port&amp;aacute;til y accidentalmente rompes la pantalla. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y, maldita sea, encuentra que el mismo modelo de pantalla del port&amp;aacute;til no est&amp;aacute; en ninguna parte del mercado. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces est&amp;aacute;s atrapado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="836d4b023c42984531a364fb6c44580d073bca78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Without IoC&lt;/strong&gt;: you ask for &quot;apple&quot;, and you are always served apple when you ask more.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin IoC&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : pides &quot;manzana&quot;, y siempre te sirven manzana cuando pides m&amp;aacute;s.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="783fb8f1d9a5b79049829582b02390a06e324449" translate="yes" xml:space="preserve">
          <source>A good read with example</source>
          <target state="translated">Una buena lectura con ejemplo</target>
        </trans-unit>
        <trans-unit id="1fc99bcac170ae4802f35453c9045f144a0a97f2" translate="yes" xml:space="preserve">
          <source>A real life example would be given here. Suppose, you want to develop a web application. So, you create a framework which will handle all the common things a web application should handle like handling http request, creating application menu, serving pages, managing cookies, triggering events etc.</source>
          <target state="translated">Un ejemplo de la vida real se daría aquí.Supongamos que quieres desarrollar una aplicación web.Entonces,creas un marco de trabajo que manejará todas las cosas comunes que una aplicación web debería manejar como manejar una petición http,crear un menú de aplicación,servir páginas,manejar cookies,disparar eventos,etc.</target>
        </trans-unit>
        <trans-unit id="5b72c852f59e3c77579e7c0c79ad0e52e5d0438f" translate="yes" xml:space="preserve">
          <source>A very simple written explanation can be found here</source>
          <target state="translated">Una explicación escrita muy simple se puede encontrar aquí</target>
        </trans-unit>
        <trans-unit id="03ce18a84ba0139f8b2d282fb731383609571750" translate="yes" xml:space="preserve">
          <source>After hour or something we have a floor covered of plastic cups and water.</source>
          <target state="translated">Después de una hora o algo así,tenemos el suelo cubierto de vasos de plástico y agua.</target>
        </trans-unit>
        <trans-unit id="b22ecdbc7467f179e8b80b4a5cb28a7d9453723d" translate="yes" xml:space="preserve">
          <source>Although the workers give the control of managing the project on the top level to the managers (the framework). But it is good to have some professionals help out. This is the concept of IoC truly come from.</source>
          <target state="translated">Aunque los trabajadores dan el control de la gestión del proyecto al más alto nivel a los gestores (el marco).Pero es bueno que algunos profesionales ayuden.Este es el concepto de IO del que realmente proviene.</target>
        </trans-unit>
        <trans-unit id="00fd8444cad967012a1ae67dd61c70de9a3b11a4" translate="yes" xml:space="preserve">
          <source>And once you get into generics, it gets even better.  Imagine having a message publisher that receives records and publishes messages.  It doesn't care what it publishes, but it needs a mapper to take something from a record to a message.</source>
          <target state="translated">Y una vez que te metes en los genéricos,se pone aún mejor.Imagina tener un editor de mensajes que recibe registros y publica mensajes.No le importa lo que publica,pero necesita un mapeador para llevar algo de un registro a un mensaje.</target>
        </trans-unit>
        <trans-unit id="e69975b42ed25e7f8f28e85f31d62e2a8cb06b1a" translate="yes" xml:space="preserve">
          <source>And then you leave some hooks in your framework where you can put further codes to generate custom menu, pages, cookies or logging some user events etc. On every browser request, your framework will run and executes your custom codes if hooked then serve it back to the browser.</source>
          <target state="translated">Y luego dejas algunos ganchos en tu marco donde puedes poner más códigos para generar un menú personalizado,páginas,cookies o registrar algunos eventos de usuarios,etc.En cada petición del navegador,tu framework se ejecutará y ejecutará tus códigos personalizados si están enganchados y luego los devolverá al navegador.</target>
        </trans-unit>
        <trans-unit id="b665befe257f7ff25fb720471835afdb3362429f" translate="yes" xml:space="preserve">
          <source>And this is exactly what the Spring (another IoC container, for example: Guice) does. Instead of let to application create what it need using new keyword (taking plastic cup), Spring IoC container all of time offer to application the same instance (singleton) of needed object(glass of water).</source>
          <target state="translated">Y esto es exactamente lo que hace el Primavera (otro contenedor de IO,por ejemplo:Guice).En lugar de dejar que la aplicación cree lo que necesita usando una nueva palabra clave (tomar vaso de plástico),el contenedor de IO de Spring ofrece todo el tiempo a la aplicación la misma instancia (una sola vez)de objeto necesario (vaso de agua).</target>
        </trans-unit>
        <trans-unit id="d065037b22d578a8d5a62e61105bf2d8ede75c17" translate="yes" xml:space="preserve">
          <source>Answering only the first part.
What is it?</source>
          <target state="translated">Contestando sólo la primera parte.¿Qué es?</target>
        </trans-unit>
        <trans-unit id="8ae0498fb7e27f3e77d528523d5e9ef00a7a185a" translate="yes" xml:space="preserve">
          <source>Anyway: be reasonable. Design pattern are &lt;strong&gt;good practices&lt;/strong&gt; but not Bible to be preached. Do not stick it everywhere.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De todos modos: sea razonable. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los patrones de dise&amp;ntilde;o son &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;buenas pr&amp;aacute;cticas,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; pero no se debe predicar la Biblia. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No lo pegues en todas partes.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a5fc50e3ceaa03d10efa641f9932ed3164ec099" translate="yes" xml:space="preserve">
          <source>Application calls Foo</source>
          <target state="translated">La aplicación llama a Foo</target>
        </trans-unit>
        <trans-unit id="ac42390e19be354858b8262243637ee16d63efc2" translate="yes" xml:space="preserve">
          <source>Application creates Bar and gives it Bim</source>
          <target state="translated">La aplicación crea la barra y le da a Bim</target>
        </trans-unit>
        <trans-unit id="cc24fa2cfa1ade20a4b0568072650d805b3f7a37" translate="yes" xml:space="preserve">
          <source>Application creates Bim</source>
          <target state="translated">La aplicación crea Bim</target>
        </trans-unit>
        <trans-unit id="70579284eb400d7297fa45f23e86008434a5dae7" translate="yes" xml:space="preserve">
          <source>Application creates Foo</source>
          <target state="translated">La aplicación crea Foo</target>
        </trans-unit>
        <trans-unit id="c0f19361a5c397f8b9f7a8e3a097732fbca45296" translate="yes" xml:space="preserve">
          <source>Application creates Foo and gives it Bar</source>
          <target state="translated">La aplicación crea Foo y le da Bar</target>
        </trans-unit>
        <trans-unit id="1a435d46695a15e5ef97ebb4802372a00c982aa2" translate="yes" xml:space="preserve">
          <source>Application needs Foo (e.g. a controller), so:</source>
          <target state="translated">La aplicación necesita Foo (por ejemplo,un controlador),así que:</target>
        </trans-unit>
        <trans-unit id="9be6e530a74dcafa45c7b24d7025184525c1bc10" translate="yes" xml:space="preserve">
          <source>Application needs Foo, which needs Bar, which needs Bim, so:</source>
          <target state="translated">La aplicación necesita a Foo,que necesita a Bar,que necesita a Bim,así que:</target>
        </trans-unit>
        <trans-unit id="fff41238dbef5b816e589fb9ecf3cbde7896731e" translate="yes" xml:space="preserve">
          <source>Bar creates Bim</source>
          <target state="translated">Bar crea a Bim</target>
        </trans-unit>
        <trans-unit id="452099fc339bb9ab1a4137666deb3f1f3b017433" translate="yes" xml:space="preserve">
          <source>Bar does something</source>
          <target state="translated">El bar hace algo</target>
        </trans-unit>
        <trans-unit id="2b2cfde5abc29f811788f8a477a12b0d271a2ada" translate="yes" xml:space="preserve">
          <source>Bar needs Bim (a service, a repository, &amp;hellip;), so:</source>
          <target state="translated">Bar necesita Bim (un servicio, un repositorio, ...), entonces:</target>
        </trans-unit>
        <trans-unit id="adf15cc582acf54581c37a950b4076c28cebbc7c" translate="yes" xml:space="preserve">
          <source>Basically, &lt;strong&gt;anything&lt;/strong&gt; with an event loop, callbacks, or execute triggers falls into this category.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;B&amp;aacute;sicamente, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cualquier cosa&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con un bucle de eventos, devoluciones de llamada o disparadores de ejecuci&amp;oacute;n cae en esta categor&amp;iacute;a.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c15542d7fcb269ae139c7a7886a1b2613dd14f5d" translate="yes" xml:space="preserve">
          <source>Before using Inversion of Control you should be well aware of the fact that it has its pros and cons and you should know why you use it if you do so.</source>
          <target state="translated">Antes de usar la inversión de control debe ser consciente del hecho de que tiene sus pros y sus contras y debe saber por qué lo usa si lo hace.</target>
        </trans-unit>
        <trans-unit id="a75d2762f97d0c2ece2927dafe57eaf0e294409f" translate="yes" xml:space="preserve">
          <source>But I think you have to be very careful with it. If you will overuse this pattern, you will make very complicated design and even more complicated code.</source>
          <target state="translated">Pero creo que hay que tener mucho cuidado con eso.Si usas demasiado este patrón,harás un diseño muy complicado y un código aún más complicado.</target>
        </trans-unit>
        <trans-unit id="bf33c7e70ae590068b05025538fd39ae51569fdb" translate="yes" xml:space="preserve">
          <source>By extracting an abstract definition of the behavior used by X in Y, illustrated as I below, and letting the consumer X use an instance of that instead of Y it can continue to do what it does without having to know the specifics about Y.</source>
          <target state="translated">Al extraer una definición abstracta del comportamiento usado por X en Y,ilustrado como I abajo,y dejando que el consumidor X use una instancia de eso en lugar de Y puede continuar haciendo lo que hace sin tener que saber los detalles específicos sobre Y.</target>
        </trans-unit>
        <trans-unit id="94d3696bca4e509dbee4b3f2721acf48efbcc91e" translate="yes" xml:space="preserve">
          <source>By implementing Inversion of Control, a software/object consumer get more controls/options over the software/objects, instead of being controlled or having less options.</source>
          <target state="translated">Al implementar la inversión de control,el consumidor de un objeto de software obtiene más opciones de control sobre los objetos de software,en lugar de ser controlado o tener menos opciones.</target>
        </trans-unit>
        <trans-unit id="a765706b39bb310d1815886a85f5790bb5cddfdd" translate="yes" xml:space="preserve">
          <source>By implementing Inversion of Control, a software/object consumer gets more controls/options over the software/objects, instead of being controlled or having fewer options.</source>
          <target state="translated">Al implementar la inversión de control,el consumidor de un objeto de software obtiene más opciones de control sobre los objetos de software,en lugar de ser controlado o tener menos opciones.</target>
        </trans-unit>
        <trans-unit id="afc2b6eb93654fed24d8cce3141c211e0dfdd6a4" translate="yes" xml:space="preserve">
          <source>Cons:</source>
          <target state="translated">Cons:</target>
        </trans-unit>
        <trans-unit id="2ef7bd6d6b0fca27c168920a2f37fcb5d9a9e6e9" translate="yes" xml:space="preserve">
          <source>Creating an object within class is called tight coupling, Spring removes this dependency by following a design pattern(DI/IOC). In which object of class in passed in constructor rather than creating in class. More over we give super class reference variable in constructor to define more general structure.</source>
          <target state="translated">La creación de un objeto dentro de la clase se llama acoplamiento apretado,Spring elimina esta dependencia siguiendo un patrón de diseño (DIIOC).En el cual el objeto de clase en pasado en constructor en lugar de crear en clase.Más encima damos super variable de referencia de clase en constructor para definir una estructura más general.</target>
        </trans-unit>
        <trans-unit id="8e0638a769a99fa369ab8513b8f14693372f58e0" translate="yes" xml:space="preserve">
          <source>DI (Dependency Injection) is about how the control flows in the application. Traditional desktop application had control flow from your application(main() method) to other library method calls, but with DI control flow is inverted that's framework takes care of starting your app, initializing it and invoking your methods whenever required.</source>
          <target state="translated">DI (Inyección de dependencia)es sobre cómo el control fluye en la aplicación.La aplicación de escritorio tradicional tenía un flujo de control desde su aplicación (método main())a otras llamadas a métodos de librerías,pero con el flujo de control DI se invierte que el framework se encarga de iniciar su aplicación,inicializarla e invocar sus métodos cuando sea necesario.</target>
        </trans-unit>
        <trans-unit id="3b1e93f7a994b1c6fa9c849c7f78a08f5f55f101" translate="yes" xml:space="preserve">
          <source>DLL container methods in COM. DllMain, DllCanUnload, etc (what-to-do part) -- COM/OS (when-to-do part)</source>
          <target state="translated">Métodos de contenedores DLL en COM.DllMain,DllCanUnload,etc (parte de qué hacer)--COMOS (parte de cuándo hacer)</target>
        </trans-unit>
        <trans-unit id="4b7dce9ad71ae931cbbdb8069b2f958ba77aca4c" translate="yes" xml:space="preserve">
          <source>Dependency Injection and Inversion of Control are related. Dependency Injection is at the &lt;strong&gt;micro&lt;/strong&gt; level and Inversion of Control is at the &lt;strong&gt;macro&lt;/strong&gt; level. You have to eat every bite (implement DI) in order to finish a meal (implement IoC).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La inyecci&amp;oacute;n de dependencia y la inversi&amp;oacute;n de control est&amp;aacute;n relacionadas. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La inyecci&amp;oacute;n de dependencia est&amp;aacute; en el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;nivel &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;micro&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y la inversi&amp;oacute;n de control est&amp;aacute; en el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;nivel &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;macro&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tienes que comer cada bocado (implementar DI) para terminar una comida (implementar IoC).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6ee080601f38ccffcc77ec09e618c93a8a122547" translate="yes" xml:space="preserve">
          <source>Dependency injection generally means &lt;strong&gt;passing an object on which method depends, as a parameter to a method, rather than having the method create the dependent object&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La inyecci&amp;oacute;n de dependencia generalmente significa &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pasar un objeto del cual depende el m&amp;eacute;todo, como par&amp;aacute;metro a un m&amp;eacute;todo, en lugar de hacer que el m&amp;eacute;todo cree el objeto dependiente&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4a343e8a0620741fbb66739fd1d46148979f2b5a" translate="yes" xml:space="preserve">
          <source>Dependency injection makes it easy to swap with the different implementation of the injected classes. While unit testing you can inject a dummy implementation, which makes the testing a lot easier.</source>
          <target state="translated">La inyección de dependencia facilita el intercambio con la diferente implementación de las clases inyectadas.Mientras que las pruebas de unidad se puede inyectar una implementación ficticia,lo que hace que las pruebas sean mucho más fáciles.</target>
        </trans-unit>
        <trans-unit id="92ed562037033112d88e7aaf65217d90ffa2423c" translate="yes" xml:space="preserve">
          <source>Detailed explanation</source>
          <target state="translated">Explicación detallada</target>
        </trans-unit>
        <trans-unit id="2fd22edb8e3ea30eab025ef8f4290ffacde4fb8b" translate="yes" xml:space="preserve">
          <source>Do we really need a name by which to describe the difference between procedural and event driven programming? OK, if we need to, but do we need to pick a brand new &quot;bigger than life&quot; name that confuses more than it solves?</source>
          <target state="translated">¿Realmente necesitamos un nombre con el que describir la diferencia entre la programación de procedimiento y la de eventos? Bien,si es necesario,pero ¿necesitamos elegir un nuevo nombre &quot;más grande que la vida&quot; que confunda más de lo que resuelve?</target>
        </trans-unit>
        <trans-unit id="ce8104f0909bbd49f3a87e76b46fd63af7b23865" translate="yes" xml:space="preserve">
          <source>Don't call us, we'll call you</source>
          <target state="translated">No nos llames,nosotros te llamaremos.</target>
        </trans-unit>
        <trans-unit id="5c221fed55ea2a8b9560181babdde0f2e320ba49" translate="yes" xml:space="preserve">
          <source>Ensure that &lt;strong&gt;when&lt;/strong&gt; part knows as &lt;em&gt;little&lt;/em&gt; as possible about &lt;strong&gt;what&lt;/strong&gt; part; and vice versa.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aseg&amp;uacute;rese de que &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cuando&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; parte sepa lo &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;menos&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; posible sobre &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;qu&amp;eacute;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; parte; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;y viceversa.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a357e26edfd850a29c72490b46f8b9e1c7e1c26d" translate="yes" xml:space="preserve">
          <source>Event Handling. Event Handlers (what-to-do part) -- Raising Events (when-to-do part)</source>
          <target state="translated">Manejo de eventos.Manipulación de eventos (parte de qué hacer)--Levantamiento de eventos (parte de cuándo hacer)</target>
        </trans-unit>
        <trans-unit id="4681308f589fd3db8982d8895f704006c536728b" translate="yes" xml:space="preserve">
          <source>Every module can focus on what it is designed for.</source>
          <target state="translated">Cada módulo puede centrarse en aquello para lo que está diseñado.</target>
        </trans-unit>
        <trans-unit id="37013689579c8310949d1aaa459fbe78604e94c8" translate="yes" xml:space="preserve">
          <source>Ex: Suppose your application stores the user uploaded file in the Google Drive, with DI your controller code may look like this:</source>
          <target state="translated">Ej:Supongamos que tu aplicación almacena el archivo subido por el usuario en el disco duro de Google,con DI tu código de control puede verse así:</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="e9044ac31a8995f5ad62b7e9f444f33bf9e08657" translate="yes" xml:space="preserve">
          <source>Foo calls Bar</source>
          <target state="translated">Foo llama a Bar</target>
        </trans-unit>
        <trans-unit id="36a8c8318b6369919a71996fd940aacf3965166d" translate="yes" xml:space="preserve">
          <source>Foo creates Bar</source>
          <target state="translated">Foo crea el Bar</target>
        </trans-unit>
        <trans-unit id="c2cfcdd995da76d7e30b4bb8c5a58a247fe77380" translate="yes" xml:space="preserve">
          <source>Foo needs Bar (e.g. a service), so:</source>
          <target state="translated">Foo necesita un bar (por ejemplo,un servicio),así que:</target>
        </trans-unit>
        <trans-unit id="c40a9c4979dbcd08f9143f72f4f97633ba55f56f" translate="yes" xml:space="preserve">
          <source>For example, in an old school menu, you might have:</source>
          <target state="translated">Por ejemplo,en un menú de la vieja escuela,podrías tener:</target>
        </trans-unit>
        <trans-unit id="54513be8dda986f2beeef0cb1d533fbca0652e5b" translate="yes" xml:space="preserve">
          <source>For example, let's say that we have two classes : &lt;strong&gt;Dog&lt;/strong&gt; and &lt;strong&gt;Cat&lt;/strong&gt;.   Both shares the same qualities/states: age, size, weight. So instead of creating a class of service called &lt;strong&gt;DogService&lt;/strong&gt; and &lt;strong&gt;CatService&lt;/strong&gt;, I can create a single one called &lt;strong&gt;AnimalService&lt;/strong&gt; that allows to use Dog and Cat only if they use the interface &lt;strong&gt;IAnimal&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, digamos que tenemos dos clases: &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;perro&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;gato&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Ambos comparten las mismas cualidades / estados: edad, tama&amp;ntilde;o, peso. Entonces, en lugar de crear una clase de servicio llamada &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DogService&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CatService&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , puedo crear una sola llamada &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AnimalService&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que permita usar Dog y Cat solo si usan la interfaz &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IAnimal&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d60c0cdafbec5fc9cf7874f8725048484c3f63ce" translate="yes" xml:space="preserve">
          <source>For example, say your application has a text editor component and you want to provide spell checking. Your standard code would look something like this:</source>
          <target state="translated">Por ejemplo,digamos que tu aplicación tiene un componente de editor de texto y quieres proporcionar una revisión ortográfica.Tu código estándar se vería algo así:</target>
        </trans-unit>
        <trans-unit id="b193542666e0549ecc44307cdfa4b9bc29a65958" translate="yes" xml:space="preserve">
          <source>For example, task#1 is to create object.
Without IOC concept, task#1 is supposed to be done by Programmer.But With IOC concept, task#1 would be done by container.</source>
          <target state="translated">Por ejemplo,la tarea #1 es crear un objeto.Sin el concepto de COI,la tarea #1 se supone que debe ser hecha por el programador.Pero con el concepto de COI,la tarea #1 se haría por el contenedor.</target>
        </trans-unit>
        <trans-unit id="4c4257d920e8870617eb7c2a571ea4b4696b4faf" translate="yes" xml:space="preserve">
          <source>For those interested in more depth on Inversion of Control a paper has been published outlining a more complete picture of Inversion of Control as a design pattern (OfficeFloor: using office patterns to improve software design &lt;a href=&quot;http://doi.acm.org/10.1145/2739011.2739013&quot;&gt;http://doi.acm.org/10.1145/2739011.2739013&lt;/a&gt; with a free copy available to download from &lt;a href=&quot;http://www.officefloor.net/about.html&quot;&gt;http://www.officefloor.net/about.html&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para aquellos interesados ​​en profundizar en la Inversi&amp;oacute;n de Control, se ha publicado un documento que describe una imagen m&amp;aacute;s completa de la Inversi&amp;oacute;n de Control como patr&amp;oacute;n de dise&amp;ntilde;o (OfficeFloor: uso de patrones de oficina para mejorar el dise&amp;ntilde;o del software &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://doi.acm.org/10.1145/2739011.2739013&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://doi.acm.org/10.1145/ 2739011.2739013&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con una copia gratuita disponible para descargar desde &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.officefloor.net/about.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://www.officefloor.net/about.html&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="530a5c467b34b9f4477df522b08ee9d842c1a1d7" translate="yes" xml:space="preserve">
          <source>Here is how a code not using DI will roughly work:</source>
          <target state="translated">Así es como un código que no usa DI funcionará aproximadamente:</target>
        </trans-unit>
        <trans-unit id="8feb0cfc564ed6fe998214e0b617510b751cbf33" translate="yes" xml:space="preserve">
          <source>Here is how a code using DI will roughly work:</source>
          <target state="translated">Así es como un código usando DI funcionará aproximadamente:</target>
        </trans-unit>
        <trans-unit id="60b0beb3f28af92c7fd7dc62953c72cac128a607" translate="yes" xml:space="preserve">
          <source>However, pragmatically speaking, it has some backwards.</source>
          <target state="translated">Sin embargo,pragmáticamente hablando,tiene algo de retroceso.</target>
        </trans-unit>
        <trans-unit id="fcc6e5b27035a345cfafd067265b9d513f1ff521" translate="yes" xml:space="preserve">
          <source>I agree with &lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#3082&quot;&gt;NilObject&lt;/a&gt;, but I'd like to add to this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Estoy de acuerdo con &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#3082&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;NilObject&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , pero me gustar&amp;iacute;a agregar a esto:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3bf68460e0fb730dd585b98cc7af3cac3d6aa69c" translate="yes" xml:space="preserve">
          <source>I am definitely loving IoC/DI.</source>
          <target state="translated">Definitivamente me encanta el ICDI.</target>
        </trans-unit>
        <trans-unit id="82d4b78078a9c52e303c8ecc8ca5f4c8c95fc3bf" translate="yes" xml:space="preserve">
          <source>I found a very clear example &lt;a href=&quot;http://php-di.org/doc/understanding-di.html&quot;&gt;here&lt;/a&gt; which explains how the 'control is inverted'.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Encontr&amp;eacute; un ejemplo muy claro &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://php-di.org/doc/understanding-di.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aqu&amp;iacute;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que explica c&amp;oacute;mo se 'invierte el control'.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b0fb3f858bf2eab2695294bc696e5aa358bf89cd" translate="yes" xml:space="preserve">
          <source>I found one good example &lt;a href=&quot;http://www.goospoos.com/2009/12/inversion-of-control-basics-with-example/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Encontr&amp;eacute; un buen ejemplo &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.goospoos.com/2009/12/inversion-of-control-basics-with-example/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aqu&amp;iacute;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c7dd2bab3cb0cd2991bce40ce3201c3f7a535c6f" translate="yes" xml:space="preserve">
          <source>I like this explanation: &lt;a href=&quot;http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&quot;&gt;http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Me gusta esta explicaci&amp;oacute;n: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1aa23d27c2aa025d7ac4285b379874694217b40b" translate="yes" xml:space="preserve">
          <source>I understand that the answer has already been given here. But I still think, some basics about the inversion of control have to be discussed here in length for future readers.</source>
          <target state="translated">Entiendo que la respuesta ya ha sido dada aquí.Pero sigo pensando que algunos conceptos básicos sobre la inversión de control deben ser discutidos aquí en profundidad para los futuros lectores.</target>
        </trans-unit>
        <trans-unit id="937f692b34fc2319d608f1cbd292305bff67b729" translate="yes" xml:space="preserve">
          <source>I will keep things abstract here, You can visit following links for detail understanding of the topic.</source>
          <target state="translated">Mantendré las cosas abstractas aquí,Puedes visitar los siguientes enlaces para una comprensión detallada del tema.</target>
        </trans-unit>
        <trans-unit id="33b4f2de83b8d009dfb1e4f0c8f37f73deb35275" translate="yes" xml:space="preserve">
          <source>I wrote it once, but now I can inject many types into this set of code if I publish different types of messages.  I can also write mappers that take a record of the same type and map them to different messages. Using DI with Generics has given me the ability to write very little code to accomplish many tasks.</source>
          <target state="translated">Lo escribí una vez,pero ahora puedo inyectar muchos tipos en este conjunto de código si publico diferentes tipos de mensajes.También puedo escribir mapeadores que toman un registro del mismo tipo y lo asignan a diferentes mensajes.El uso de DI con los genéricos me ha dado la capacidad de escribir muy poco código para realizar muchas tareas.</target>
        </trans-unit>
        <trans-unit id="46a53efcdd95296d970c368c25c5a862f47bd55c" translate="yes" xml:space="preserve">
          <source>If you find yourself copying and pasting code around, you're almost always doing &lt;em&gt;something&lt;/em&gt; wrong.  Codified as the design principle &lt;a href=&quot;http://c2.com/xp/OnceAndOnlyOnce.html&quot;&gt;Once and Only Once&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si te encuentras copiando y pegando c&amp;oacute;digo, casi siempre est&amp;aacute;s haciendo &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;algo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; mal. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Codificado como el principio de dise&amp;ntilde;o &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://c2.com/xp/OnceAndOnlyOnce.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Once and Only Once&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29ab9727475a88b2c5d04f24a224b5ff059cd20c" translate="yes" xml:space="preserve">
          <source>If you follow these simple two steps, you have done inversion of control:</source>
          <target state="translated">Si sigues estos dos simples pasos,habrás hecho la inversión de control:</target>
        </trans-unit>
        <trans-unit id="bf55354f38c64ca9c6750feaf917cc557da9b65e" translate="yes" xml:space="preserve">
          <source>Imagine a parent and child talking to each other.</source>
          <target state="translated">Imagina a un padre y a un hijo hablando entre ellos.</target>
        </trans-unit>
        <trans-unit id="fddc5beb5789c807e772d70f367d3e0c53630417" translate="yes" xml:space="preserve">
          <source>In IoC the &quot;framework&quot; controls &lt;strong&gt;&lt;em&gt;main()&lt;/em&gt;&lt;/strong&gt; and calls your methods. The &lt;strong&gt;&lt;em&gt;Framework&lt;/em&gt;&lt;/strong&gt; is in control :(</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En IoC, el &quot;marco&quot; controla &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;main ()&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y llama a sus m&amp;eacute;todos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;marco&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; est&amp;aacute; en control :(&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="377410213559b2702c94f0b3b1faeaf157754fdc" translate="yes" xml:space="preserve">
          <source>In a GUI program or somesuch, instead we say:</source>
          <target state="translated">En un programa GUI o algo así,en cambio decimos:</target>
        </trans-unit>
        <trans-unit id="794ffcb222e8673e69c250708deea7737d00cdd9" translate="yes" xml:space="preserve">
          <source>In normal s/w development, you write the &lt;strong&gt;&lt;em&gt;main()&lt;/em&gt;&lt;/strong&gt; method and call &quot;library&quot; methods.  &lt;strong&gt;&lt;em&gt;You&lt;/em&gt;&lt;/strong&gt; are in control :)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En el desarrollo normal de s / w, escribe el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;main ()&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y llama a los m&amp;eacute;todos de &quot;biblioteca&quot;. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;T&amp;uacute; tienes el&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; control :)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3f10d36138f924778c4756832794808cc0e20331" translate="yes" xml:space="preserve">
          <source>In our programming world, &lt;strong&gt;Hollywood&lt;/strong&gt; represent a generic framework (may be written by you or someone else), &lt;strong&gt;you&lt;/strong&gt; represent the user code you wrote and &lt;strong&gt;the task&lt;/strong&gt; represent the thing you want to accomplish with your code. Now you don't ever go to trigger your task by yourself, not in IoC! Rather you have designed everything in such that your framework will trigger your task for you. Thus you have built a reusable framework which can make someone a hero or another one a villain. But that framework is always in charge, it knows when to pick someone and that someone only knows what it wants to be.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En nuestro mundo de programaci&amp;oacute;n, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hollywood&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; representa un marco gen&amp;eacute;rico (puede ser escrito por usted u otra persona), &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;usted&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; representa el c&amp;oacute;digo de usuario que escribi&amp;oacute; y &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la tarea&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; representa lo que desea lograr con su c&amp;oacute;digo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iexcl;Ahora nunca va a activar su tarea usted mismo, no en IoC! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por el contrario, ha dise&amp;ntilde;ado todo de tal manera que su marco desencadenar&amp;aacute; su tarea por usted. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, ha creado un marco reutilizable que puede hacer que alguien sea un h&amp;eacute;roe u otro un villano. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero ese marco siempre est&amp;aacute; a cargo, sabe cu&amp;aacute;ndo elegir a alguien y que alguien solo sabe lo que quiere ser.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="173b21ccdfbf6f494cf6d1444bbd225f45320e1f" translate="yes" xml:space="preserve">
          <source>In programming terms, she passed a callback function &lt;code&gt;getProductList()&lt;/code&gt; to the function you are executing - &lt;code&gt;doShopping()&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En t&amp;eacute;rminos de programaci&amp;oacute;n, pas&amp;oacute; una funci&amp;oacute;n de devoluci&amp;oacute;n de llamada &lt;/font&gt;&lt;/font&gt; &lt;code&gt;getProductList()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a la funci&amp;oacute;n que est&amp;aacute; ejecutando: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;doShopping()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83e763a2dee31b60a814d50a0bf409afb468b761" translate="yes" xml:space="preserve">
          <source>In short Control gets inverted from Programmer to container. So, it is called as inversion of control.</source>
          <target state="translated">En resumen,el control se invierte de programador a contenedor.Por lo tanto,se llama inversión de control.</target>
        </trans-unit>
        <trans-unit id="8ce30cfb65598251ed25908c4dd40a288377ffb4" translate="yes" xml:space="preserve">
          <source>In the end you always win :)</source>
          <target state="translated">Al final siempre ganas :)</target>
        </trans-unit>
        <trans-unit id="415bf701ddc37ec878782b3147762d4c810c9f63" translate="yes" xml:space="preserve">
          <source>In the first code example we are instantiating &lt;code&gt;SpellChecker&lt;/code&gt; (&lt;code&gt;this.checker = new SpellChecker();&lt;/code&gt;), which means the &lt;code&gt;TextEditor&lt;/code&gt; class directly depends on the &lt;code&gt;SpellChecker&lt;/code&gt; class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En el primer ejemplo de c&amp;oacute;digo que estamos instanciar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this.checker = new SpellChecker();&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), que significa la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; clase directamente depende de la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; clase.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="02311f7e83fcf777d1f281214c8986231c3912c0" translate="yes" xml:space="preserve">
          <source>In the illustration above Y implements I and X uses an instance of I. While it&amp;rsquo;s quite possible that X still uses Y what&amp;rsquo;s interesting is that X doesn&amp;rsquo;t know that. It just knows that it uses something that implements I.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En la ilustraci&amp;oacute;n anterior, Y implementa I y X usa una instancia de I. Si bien es bastante posible que X todav&amp;iacute;a use Y, lo interesante es que X no lo sabe. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Simplemente sabe que usa algo que implementa I.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="10b6331947724028e6c4d5b46f4ac577504462aa" translate="yes" xml:space="preserve">
          <source>In the second code example we are creating an abstraction by having the &lt;code&gt;SpellChecker&lt;/code&gt; dependency class in &lt;code&gt;TextEditor&lt;/code&gt; constructor signature (not initializing dependency in class). This allows us to call the dependency then pass it to the TextEditor class like so:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En el segundo ejemplo de c&amp;oacute;digo, estamos creando una abstracci&amp;oacute;n al tener la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;clase de dependencia &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;firma del constructor &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (no inicializando la dependencia en la clase). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto nos permite llamar a la dependencia y luego pasarla a la clase TextEditor as&amp;iacute;:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="86e9aa47c02eac4bb61f7fcbb0829f0a43930434" translate="yes" xml:space="preserve">
          <source>In using a container like Castle Windsor, it solves maintenance issues even better.  Being able to swap out a component that goes to a database for one that uses file based persistence without changing a line of code is awesome (configuration change, you're done).</source>
          <target state="translated">Al usar un contenedor como el Castillo Windsor,resuelve los problemas de mantenimiento aún mejor.Ser capaz de cambiar un componente que va a una base de datos por uno que utiliza la persistencia basada en archivos sin cambiar una línea de código es impresionante (cambio de configuración,ya está hecho).</target>
        </trans-unit>
        <trans-unit id="393aff0ab87ccb76f01e199b65f9dfff7969a389" translate="yes" xml:space="preserve">
          <source>Instead if you had the controller class to construct the storage object with the &lt;code&gt;new&lt;/code&gt; keyword like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En cambio, si tuviera la clase de controlador para construir el objeto de almacenamiento con la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; palabra clave como esta:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd2c07da0630be24a7d3559c8b8807776d8cdf48" translate="yes" xml:space="preserve">
          <source>Interfaces. Component client (when-to-do part) -- Component Interface implementation (what-to-do part)</source>
          <target state="translated">Interfaces.Cliente del componente (parte de cuándo hacer)--Implementación de la interfaz del componente (parte de qué hacer)</target>
        </trans-unit>
        <trans-unit id="85b24615680dc38ffe1f3574074bfc21eff397f1" translate="yes" xml:space="preserve">
          <source>Inversion of Control (IoC) can be quite confusing when it is first encountered.</source>
          <target state="translated">La inversión de control (IoC)puede ser bastante confusa cuando se encuentra por primera vez.</target>
        </trans-unit>
        <trans-unit id="7379f00d78c1620733cf4544b441a1c216d8f4b3" translate="yes" xml:space="preserve">
          <source>Inversion of Control (IoC) has been built on a very simple principle called &lt;strong&gt;Hollywood Principle&lt;/strong&gt;. And it says that,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La Inversi&amp;oacute;n de Control (IoC) se ha construido sobre un principio muy simple llamado &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Principio de Hollywood&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y dice que&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6e29ef62a3454337d3ef55e638a0463283e61fd7" translate="yes" xml:space="preserve">
          <source>Inversion of Control (IoC) means to create instances of dependencies first and latter instance of a class (optionally injecting them through constructor), instead of creating an instance of the class first and then the class instance creating instances of dependencies.
Thus, inversion of control &lt;strong&gt;inverts&lt;/strong&gt; the &lt;strong&gt;flow of control&lt;/strong&gt; of the program. &lt;strong&gt;Instead of&lt;/strong&gt; the &lt;strong&gt;callee controlling&lt;/strong&gt; the &lt;strong&gt;flow of control&lt;/strong&gt; (while creating dependencies), the &lt;strong&gt;caller controls the flow of control of the program&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inversion of Control (IoC) significa crear instancias de dependencias primero y &amp;uacute;ltima instancia de una clase (opcionalmente inyect&amp;aacute;ndolas a trav&amp;eacute;s del constructor), en lugar de crear primero una instancia de la clase y luego la instancia de clase creando instancias de dependencias. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, la inversi&amp;oacute;n de control &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;invierte&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;flujo de control&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; del programa. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En lugar de que&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; la persona que &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;llama controle&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;flujo de control&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (mientras crea dependencias), la &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;persona que llama controla el flujo de control del programa&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="447c04d94c54d0ae2f5b843b5618686c41ad12ba" translate="yes" xml:space="preserve">
          <source>Inversion of Control (for methods) = Dependency (state) Injection + Continuation Injection + Thread Injection</source>
          <target state="translated">Inversión de Control (para los métodos)=Dependencia (estado)Inyección+Inyección de Continuación+Inyección de Hilo</target>
        </trans-unit>
        <trans-unit id="3ff7d8358b5e99cc26d5c2e29dcb68ec749052f0" translate="yes" xml:space="preserve">
          <source>Inversion of Control is a generic principle, while Dependency Injection realises this principle as a design pattern for object graph construction (i.e. configuration controls how the objects are referencing each other, rather than the object itself controlling how to get the reference to another object).</source>
          <target state="translated">La inversión de control es un principio genérico,mientras que la inyección de dependencia realiza este principio como un patrón de diseño para la construcción de gráficos de objetos (es decir,la configuración controla cómo los objetos se refieren entre sí,en lugar de que el propio objeto controle cómo obtener la referencia de otro objeto).</target>
        </trans-unit>
        <trans-unit id="246abcec0d5f703c2373d287bf72d2bb3f4b4db4" translate="yes" xml:space="preserve">
          <source>Inversion of Control is a pattern that implements the Dependency Inversion Principle (DIP). DIP states the following: 1. High-level modules should not depend on low-level modules. Both should depend on abstractions (e.g. interfaces). 2. Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions.</source>
          <target state="translated">La inversión de control es un patrón que implementa el Principio de Inversión de Dependencia (DIP).El DIP establece lo siguiente:1.Los módulos de alto nivel no deben depender de los módulos de bajo nivel.Ambos deberían depender de abstracciones (por ejemplo,interfaces).2.Las abstracciones no deberían depender de los detalles.Los detalles (implementaciones concretas)deben depender de las abstracciones.</target>
        </trans-unit>
        <trans-unit id="4270e4151e47f0a6838b48ec9ee467895342deec" translate="yes" xml:space="preserve">
          <source>Inversion of Control is what you get when your program callbacks, e.g. like a gui program.</source>
          <target state="translated">La inversión de control es lo que obtienes cuando tu programa devuelve las llamadas,por ejemplo,como un programa gui.</target>
        </trans-unit>
        <trans-unit id="801b879e0e61fbad9fe20e85dfc6244854d4817e" translate="yes" xml:space="preserve">
          <source>Inversion of Control, (or IoC), is about &lt;strong&gt;getting freedom&lt;/strong&gt; (You get married, you lost freedom and you are being controlled. You divorced, you have just implemented Inversion of Control. That's what we called, &quot;decoupled&quot;. Good computer system discourages some very close relationship.) &lt;strong&gt;more flexibility&lt;/strong&gt; (The kitchen in your office only serves clean tap water, that is your only choice when you want to drink. Your boss implemented Inversion of Control by setting up a new coffee machine. Now you get the flexibility of choosing either tap water or coffee.) and &lt;strong&gt;less dependency&lt;/strong&gt; (Your partner has a job, you don't have a job, you financially depend on your partner, so you are controlled. You find a job, you have implemented Inversion of Control. Good computer system encourages in-dependency.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La Inversi&amp;oacute;n de Control (o IoC) se trata de &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;obtener la libertad&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (te &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;casas, &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pierdes la libertad&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y est&amp;aacute;s siendo controlado. Te divorciaste, acabas de implementar la Inversi&amp;oacute;n de Control. Eso es lo que llamamos &quot;desacoplado&quot;. Buen sistema inform&amp;aacute;tico desalienta algunas relaciones muy cercanas.) &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;aacute;s flexibilidad&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (la cocina de su oficina solo sirve agua limpia del grifo, esa es su &amp;uacute;nica opci&amp;oacute;n cuando quiere beber. Su jefe implement&amp;oacute; la Inversi&amp;oacute;n de control instalando una nueva m&amp;aacute;quina de caf&amp;eacute;. Ahora obtiene la flexibilidad para elegir agua del grifo o caf&amp;eacute;) y &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;menos dependencia&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (Su pareja tiene un trabajo, usted no tiene un trabajo, depende econ&amp;oacute;micamente de su pareja, por lo que est&amp;aacute; controlado. Encuentra un trabajo, ha implementado la Inversi&amp;oacute;n de control. Un buen sistema inform&amp;aacute;tico fomenta la dependencia).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="77e5120da94a1f24fb6b60f891876164cb38ce5d" translate="yes" xml:space="preserve">
          <source>Inversion of Controls is about separating concerns.</source>
          <target state="translated">La inversión de los controles se trata de separar las preocupaciones.</target>
        </trans-unit>
        <trans-unit id="61d07698e52d02e6e124d9b4a9957fccd5ee55fd" translate="yes" xml:space="preserve">
          <source>Inversion of control is a pattern used for decoupling components and layers in the system. The pattern is implemented through injecting dependencies into a component when it is constructed. These dependences are usually provided as interfaces for further decoupling and to support testability. IoC / DI containers such as Castle Windsor, Unity are tools (libraries) which can be used for providing IoC. These tools provide extended features above and beyond simple dependency management, including lifetime, AOP / Interception, policy, etc.</source>
          <target state="translated">La inversión de control es un patrón utilizado para desacoplar los componentes y capas del sistema.El patrón se implementa mediante la inyección de dependencias en un componente cuando se construye.Esas dependencias suelen servir de interfaz para un mayor desacoplamiento y para apoyar la comprobabilidad.Los contenedores de DI de IO como Castle Windsor,Unity son herramientas (bibliotecas)que pueden utilizarse para proporcionar IO.Estas herramientas proporcionan características ampliadas que van más allá de la simple gestión de dependencias,como la vida útil,la interceptación de AOP,la política,etc.</target>
        </trans-unit>
        <trans-unit id="be7841f74b212fbb18a52076953f9299c8fad69a" translate="yes" xml:space="preserve">
          <source>Inversion of control is a practical way to reduce code duplication, and if you find yourself copying an entire method and only changing a small piece of the code, you can consider tackling it with inversion of control. Inversion of control is made easy in many languages through the concept of delegates, interfaces, or even raw function pointers.</source>
          <target state="translated">La inversión de control es una forma práctica de reducir la duplicación de código,y si se encuentra copiando un método entero y sólo cambiando una pequeña parte del código,puede considerar la posibilidad de abordarlo con la inversión de control.La inversión de control se facilita en muchos idiomas a través del concepto de delegados,interfaces,o incluso punteros de funciones en bruto.</target>
        </trans-unit>
        <trans-unit id="72a912fb5b76b85605df21e6d9aa08ac3caa58f5" translate="yes" xml:space="preserve">
          <source>Inversion of control is about transferring control from library to the client. It makes more sense when we talk about a client that injects (passes) a function value (lambda expression) into a higher order function (library function) that controls (changes) the behavior of the library function. A client or framework that injects library dependencies (which carry behavior) into libraries may also be considered IoC</source>
          <target state="translated">La inversión de control se trata de transferir el control de la biblioteca al cliente.Tiene más sentido cuando hablamos de un cliente que inyecta (pasa)un valor de función (expresión lambda)en una función de orden superior (función de biblioteca)que controla (cambia)el comportamiento de la función de biblioteca.Un cliente o marco de trabajo que inyecta dependencias de la biblioteca (que llevan el comportamiento)en las bibliotecas también puede ser considerado IoC</target>
        </trans-unit>
        <trans-unit id="c6f3380296dd1859cc46056be7e5c7d7d18517b1" translate="yes" xml:space="preserve">
          <source>IoC / DI to me is pushing out dependencies to the calling objects. Super simple.</source>
          <target state="translated">La IOC DI para mí está sacando las dependencias a los objetos de llamada.Súper simple.</target>
        </trans-unit>
        <trans-unit id="d01f7e74cc075865246062cbffd169c66a84cace" translate="yes" xml:space="preserve">
          <source>IoC in easy terms: It's the use of Interface as a way of specific something (such a field or a parameter) as a wildcard that can be used by some classes. It allows the re-usability of the code.</source>
          <target state="translated">IO en términos sencillos:Es el uso de la interfaz como una forma de algo específico (como un campo o un parámetro)como un comodín que puede ser utilizado por algunas clases.Permite la reutilización del código.</target>
        </trans-unit>
        <trans-unit id="ecc699e264ec9201c3607773626eecefd4f6379e" translate="yes" xml:space="preserve">
          <source>IoC is about inverting the relationship between your code and third-party code (library/framework):</source>
          <target state="translated">La IO se trata de invertir la relación entre su código y el código de terceros (libraryframework):</target>
        </trans-unit>
        <trans-unit id="b1a30e451f848d07595af921a316e8fdf04e8200" translate="yes" xml:space="preserve">
          <source>IoC not only inverts the control flow in your program, it also clouds it considerably. This means you can no longer just read your code and jump from one place to another because the connections that would normally be in your code are not in the code anymore. Instead it is in XML configuration files or annotations and in the code of your IoC container that interprets these metadata.</source>
          <target state="translated">La IO no sólo invierte el flujo de control en su programa,sino que también lo nubla considerablemente.Esto significa que ya no puedes simplemente leer tu código y saltar de un lugar a otro porque las conexiones que normalmente estarían en tu código ya no están en el código.En su lugar,es en los archivos de configuración o anotaciones XML y en el código de tu contenedor de IO que interpreta estos metadatos.</target>
        </trans-unit>
        <trans-unit id="129c548401379640498c3bd2d9aeda56d02ded9e" translate="yes" xml:space="preserve">
          <source>Isn&amp;rsquo;t it enough that X knows that it uses something that has the behavior, the methods, properties etc, of Y without knowing who actually implements the behavior?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;No es suficiente que X sepa que usa algo que tiene el comportamiento, los m&amp;eacute;todos, las propiedades, etc., de Y sin saber qui&amp;eacute;n implementa realmente el comportamiento?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="13ba932451564a53b11f07d2fc54611618718a48" translate="yes" xml:space="preserve">
          <source>Isolation of code unit, easier testing</source>
          <target state="translated">Aislamiento de la unidad de código,pruebas más fáciles</target>
        </trans-unit>
        <trans-unit id="f93e3134fbbf3855151cbf5494b8689c1ef262d3" translate="yes" xml:space="preserve">
          <source>It allows user of the function to define some parts of it, making it more flexible.</source>
          <target state="translated">Permite al usuario de la función definir algunas partes de la misma,haciéndola más flexible.</target>
        </trans-unit>
        <trans-unit id="5589f7b0110a12ff8abdfca719dfe54ce07e36dd" translate="yes" xml:space="preserve">
          <source>It is a strong motivator for coding against interfaces instead of implementations</source>
          <target state="translated">Es una fuerte motivación para codificar contra las interfaces en lugar de las implementaciones</target>
        </trans-unit>
        <trans-unit id="9b77b575dc2b25c7a321384bbb10a36aa6f2e8f2" translate="yes" xml:space="preserve">
          <source>It is not appropriate to use in all cases, because the flow of a program can be harder to follow when written this way. It's a useful way to design methods when writing a library that will be reused, but it should be used sparingly in the core of your own program unless it really solves a code duplication problem.</source>
          <target state="translated">No es apropiado utilizarlo en todos los casos,porque el flujo de un programa puede ser más difícil de seguir cuando se escribe de esta manera.Es una forma útil de diseñar métodos cuando se escribe una biblioteca que será reutilizada,pero debe ser usada con moderación en el núcleo de su propio programa a menos que realmente resuelva un problema de duplicación de código.</target>
        </trans-unit>
        <trans-unit id="4374f68d4d13a5a1e95989bd83ee0dde411e4897" translate="yes" xml:space="preserve">
          <source>It says -</source>
          <target state="translated">Dice...</target>
        </trans-unit>
        <trans-unit id="93947b7bcccf2b2a7d648e4a9fb3a6910d74deb6" translate="yes" xml:space="preserve">
          <source>It seems that the most confusing thing about &quot;IoC&quot; the acronym and the name for which it stands is that it's too glamorous of a name - almost a noise name.</source>
          <target state="translated">Parece que lo más confuso de &quot;IoC&quot;,el acrónimo y el nombre que representa,es que es un nombre demasiado glamoroso,casi un nombre ruidoso.</target>
        </trans-unit>
        <trans-unit id="8b85e00dbd5642b617bbba6834a701ce8120f842" translate="yes" xml:space="preserve">
          <source>It solves code duplication. For example, in the old days you would manually write your own event loop, polling the system libraries for new events. Nowadays, most modern APIs you simply tell the system libraries what events you're interested in, and it will let you know when they happen.</source>
          <target state="translated">Resuelve la duplicación de códigos.Por ejemplo,antiguamente se escribía manualmente un bucle de eventos,buscando nuevos eventos en las bibliotecas del sistema.Hoy en día,la mayoría de las modernas APIs simplemente le dices a las bibliotecas del sistema qué eventos te interesan,y te avisa cuando suceden.</target>
        </trans-unit>
        <trans-unit id="b051475457c0cb9b82c447aa1f4d625e160eb580" translate="yes" xml:space="preserve">
          <source>It start simple and shows code examples as well.</source>
          <target state="translated">Empieza simple y muestra ejemplos de código también.</target>
        </trans-unit>
        <trans-unit id="7cdd8b2cb24570566fcca5c80bc3ce5cdd68603b" translate="yes" xml:space="preserve">
          <source>It's very easy to write unit tests for your code because it depends on nothing else than the objects it accepts in its constructor/setters and you can easily initialize them with the right objects in isolation.</source>
          <target state="translated">Es muy fácil escribir pruebas unitarias para su código porque no depende de nada más que de los objetos que acepta en sus constructores y puede fácilmente inicializarlos con los objetos correctos en forma aislada.</target>
        </trans-unit>
        <trans-unit id="e188bfdb88678f850320d1c8300b33308920af0b" translate="yes" xml:space="preserve">
          <source>Laravel and EJB are examples of such a frameworks.</source>
          <target state="translated">Laravel y EJB son ejemplos de tales marcos.</target>
        </trans-unit>
        <trans-unit id="fdff96c467769e0a8335f8e963bf4da65252f786" translate="yes" xml:space="preserve">
          <source>Leaving aside the question of the hygienic, last form of drinking process control is much more effective and economic.</source>
          <target state="translated">Dejando de lado la cuestión de la higiene,la última forma de control del proceso de bebida es mucho más efectiva y económica.</target>
        </trans-unit>
        <trans-unit id="07c8b84bfa96ba21d9cc3879005aab0b48bbe962" translate="yes" xml:space="preserve">
          <source>Let invert control.</source>
          <target state="translated">Deje que invierta el control.</target>
        </trans-unit>
        <trans-unit id="ad88ff33863680217c647f3d27552b0f563713ae" translate="yes" xml:space="preserve">
          <source>Let to say that we make some meeting in some hotel.</source>
          <target state="translated">Digamos que hacemos una reunión en algún hotel.</target>
        </trans-unit>
        <trans-unit id="7c67342f3bd25bc3faba7eb88fdb1040235adf02" translate="yes" xml:space="preserve">
          <source>Like in this example with TextEditor: if you have only one SpellChecker maybe it is not really necessary to use IoC ? Unless you need to write unit tests or something ...</source>
          <target state="translated">Como en este ejemplo con el TextEditor:si sólo tienes un corrector ortográfico tal vez no sea realmente necesario usar IO? A menos que necesites escribir pruebas de unidad o algo así...</target>
        </trans-unit>
        <trans-unit id="8c62f1035a8da667e2e44f248499b63934ff87a4" translate="yes" xml:space="preserve">
          <source>Looking at Inversion of Control as a design pattern, we need to look at what we are inverting.  Dependency Injection inverts control of constructing a graph of objects. If told in layman's term, inversion of control implies change in flow of control in the program. Eg. In traditional standalone app, we have main method, from where the control gets passed to other third party libraries(in case, we have used third party library's function), but through inversion of control control gets transferred from third party library code to our code, as we are taking the service of third party library.  But there are other aspects that need to be inverted within a program - e.g. invocation of methods and threads to execute the code.</source>
          <target state="translated">Mirando a la inversión de control como un patrón de diseño,necesitamos mirar lo que estamos invirtiendo.La Inyección de Dependencia invierte el control de la construcción de un gráfico de objetos.Si se dice en términos simples,la inversión de control implica un cambio en el flujo de control en el programa.Por ejemplo,en una aplicación tradicional autónoma,tenemos el método principal,desde el que el control pasa a otras bibliotecas de terceros (en caso de que hayamos usado la función de la biblioteca de terceros),pero a través de la inversión de control el control se transfiere desde el código de la biblioteca de terceros a nuestro código,ya que estamos tomando el servicio de la biblioteca de terceros.Pero hay otros aspectos que necesitan ser invertidos dentro de un programa-por ejemplo,la invocación de métodos e hilos para ejecutar el código.</target>
        </trans-unit>
        <trans-unit id="b60c725080b624e8208034cd77ad12d11359316b" translate="yes" xml:space="preserve">
          <source>Maintenance is the number one thing it solves for me.  It guarantees I am using interfaces so that two classes are not intimate with each other.</source>
          <target state="translated">El mantenimiento es la primera cosa que me resuelve.Garantiza que estoy usando interfaces para que dos clases no sean íntimas entre sí.</target>
        </trans-unit>
        <trans-unit id="5816c432181bcebf9594b545acf0e0a8249ac7eb" translate="yes" xml:space="preserve">
          <source>Many people, many carafes of water, many plastic cups.</source>
          <target state="translated">Mucha gente,muchas garrafas de agua,muchos vasos de plástico.</target>
        </trans-unit>
        <trans-unit id="c7cec8240199ab24f4d77dd56821078384a55689" translate="yes" xml:space="preserve">
          <source>Modern Web applications with an MVC architecture depends on the framework to do URL Routing and put Controllers in place for the framework to call.</source>
          <target state="translated">Las aplicaciones web modernas con una arquitectura MVC dependen del marco de trabajo para hacer el enrutamiento de URL y poner los controladores en su lugar para que el marco llame.</target>
        </trans-unit>
        <trans-unit id="1c2a9ecda48a6efc160875050fa4462dcb9abb1a" translate="yes" xml:space="preserve">
          <source>Modules make no assumptions about what other systems do but rely on their contracts.</source>
          <target state="translated">Los módulos no hacen suposiciones sobre lo que hacen otros sistemas sino que se basan en sus contratos.</target>
        </trans-unit>
        <trans-unit id="6f982201a39d7ef87a3c876a038f8a4fa0dc564a" translate="yes" xml:space="preserve">
          <source>More flexible, implementation can be decided in runtime</source>
          <target state="translated">Más flexible,la implementación puede decidirse en tiempo de ejecución</target>
        </trans-unit>
        <trans-unit id="c63d9dccb6ce34a0f517acb6938ddacea50ee998" translate="yes" xml:space="preserve">
          <source>Now the client creating the &lt;code&gt;TextEditor&lt;/code&gt; class has the control over which &lt;code&gt;SpellChecker&lt;/code&gt; implementation to use because we're injecting the dependency to the &lt;code&gt;TextEditor&lt;/code&gt; signature.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora el cliente que crea la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene el control sobre qu&amp;eacute; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;implementaci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; usar porque estamos inyectando la dependencia a la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;firma &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="13ba27318305b67266dadd1df67822736823650f" translate="yes" xml:space="preserve">
          <source>Now when we discuss about the principle of IoC, we use to forget about the Hollywood. For IoC, there has to be three element, a Hollywood, you and a task like to fulfill your dream.</source>
          <target state="translated">Cuando discutimos sobre el principio de IO,nos olvidamos de Hollywood.Para la IO,tiene que haber tres elementos,un Hollywood,tú y una tarea como para cumplir tu sueño.</target>
        </trans-unit>
        <trans-unit id="794e86e282511605a39174ab8310c8df0912dd6e" translate="yes" xml:space="preserve">
          <source>Oh yeah, there are testability concerns, but they are secondary to the benefits of IoC/DI.</source>
          <target state="translated">Oh sí,hay preocupaciones de comprobabilidad,pero son secundarias a los beneficios de IoCDI.</target>
        </trans-unit>
        <trans-unit id="2a0b2431eb5e9cf2d9dbb360cae6c15a32ebeb86" translate="yes" xml:space="preserve">
          <source>Personally I see the strong points of IoC and I really like them but I tend to avoid IoC whenever possible because it turns your software into a collection of classes that no longer constitute a &quot;real&quot; program but just something that needs to be put together by XML configuration or annotation metadata and would fall (and falls) apart without it.</source>
          <target state="translated">Personalmente veo los puntos fuertes de la IO y me gustan mucho,pero tiendo a evitar la IO siempre que sea posible porque convierte tu software en una colección de clases que ya no constituyen un programa &quot;real&quot;,sino sólo algo que necesita ser ensamblado por configuración XML o metadatos de anotación y que se desmoronaría (y se cae)sin ella.</target>
        </trans-unit>
        <trans-unit id="eb08e7347d828558b092b9e77e0fb5458ce9a2d2" translate="yes" xml:space="preserve">
          <source>Programming speaking</source>
          <target state="translated">Programación hablando</target>
        </trans-unit>
        <trans-unit id="042aa6d6a63ef4409a0e20afcb0ca7083c68c8af" translate="yes" xml:space="preserve">
          <source>Pros:</source>
          <target state="translated">Pros:</target>
        </trans-unit>
        <trans-unit id="8136f601ed9917039203c9b2cbe0a294c9649438" translate="yes" xml:space="preserve">
          <source>Read article for further info and description of benefits such as:</source>
          <target state="translated">Lea el artículo para más información y descripción de los beneficios como:</target>
        </trans-unit>
        <trans-unit id="45c3dc1c7731c6185824876ed514e54f71bacb64" translate="yes" xml:space="preserve">
          <source>Reference:</source>
          <target state="translated">Reference:</target>
        </trans-unit>
        <trans-unit id="7732c541c1ffea8567dc88af68f95f74152053da" translate="yes" xml:space="preserve">
          <source>Replacing modules has no side effect on other modules</source>
          <target state="translated">La sustitución de los módulos no tiene ningún efecto secundario en otros módulos</target>
        </trans-unit>
        <trans-unit id="bd138957d96ba7b23780bcada6b530b96227fe96" translate="yes" xml:space="preserve">
          <source>Separate &lt;strong&gt;what&lt;/strong&gt;-to-do part from &lt;strong&gt;when&lt;/strong&gt;-to-do part.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Separar &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;lo&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -to-separe de &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cuando&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -to-separe.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="059afaba1584e036b6791b838c1e68d09e963a7e" translate="yes" xml:space="preserve">
          <source>Since already there are many answers for the question but none of them shows the breakdown of Inversion Control term I see an opportunity to give a more concise and useful answer.</source>
          <target state="translated">Dado que ya hay muchas respuestas para la pregunta pero ninguna de ellas muestra el desglose del término Control de Inversión veo la oportunidad de dar una respuesta más concisa y útil.</target>
        </trans-unit>
        <trans-unit id="653efab96f1cc6697e2adadee9923a19cc942f75" translate="yes" xml:space="preserve">
          <source>So now control is inverted... instead of the computer accepting user input in a fixed order, the user controls the order in which the data is entered, and when the data is saved in the database.</source>
          <target state="translated">Así que ahora el control se invierte...en lugar de que la computadora acepte la entrada del usuario en un orden fijo,el usuario controla el orden en que se introducen los datos,y cuando los datos se guardan en la base de datos.</target>
        </trans-unit>
        <trans-unit id="3aa6c886ac387801f1748536a5be995d8bda23e6" translate="yes" xml:space="preserve">
          <source>So number 1 &lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;above&lt;/a&gt;. &lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;What is Inversion of Control?&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces el n&amp;uacute;mero 1 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;arriba&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Qu&amp;eacute; es la inversi&amp;oacute;n de control?&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2c1664d150c0110d8aebe5ffd87821f87f62f6c0" translate="yes" xml:space="preserve">
          <source>So, obviously, IoC is preferred when you like the varieties.</source>
          <target state="translated">Así que,obviamente,se prefiere la IO cuando te gustan las variedades.</target>
        </trans-unit>
        <trans-unit id="6c2f7d11ffa12a6a2f23dc757f05ff32b8b7451b" translate="yes" xml:space="preserve">
          <source>So, the idea is pretty much simple. Rather than creating a user application which will control everything, first you create a reusable framework which will control everything then write your custom codes and hook it to the framework to execute those in time.</source>
          <target state="translated">Así que la idea es bastante simple.En lugar de crear una aplicación de usuario que controle todo,primero creas un marco reutilizable que controle todo y luego escribes tus códigos personalizados y lo enganchas al marco para ejecutarlos a tiempo.</target>
        </trans-unit>
        <trans-unit id="17cd0a1fe505e5c89d3f463669d21beac2c45c69" translate="yes" xml:space="preserve">
          <source>Summary of above relationship for Inversion of Control available -  &lt;a href=&quot;http://dzone.com/articles/inversion-of-coupling-control&quot;&gt;http://dzone.com/articles/inversion-of-coupling-control&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Resumen de la relaci&amp;oacute;n anterior para la Inversi&amp;oacute;n de control disponible: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://dzone.com/articles/inversion-of-coupling-control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://dzone.com/articles/inversion-of-coupling-control&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5f87445ee9546ceda6f15cc4651858d83a401071" translate="yes" xml:space="preserve">
          <source>Suppose you are an object. And you go to a restaurant:</source>
          <target state="translated">Supongamos que eres un objeto.Y vas a un restaurante:</target>
        </trans-unit>
        <trans-unit id="a931c37e5c6a3008d1f1d032d8bc063328c40fe2" translate="yes" xml:space="preserve">
          <source>Suppose your code is a group of workers. They need to build a car. These workers need a place and tools (a software framework) to build the car. A &lt;strong&gt;traditional&lt;/strong&gt; software framework will be like a garage with many tools. So the workers need to make a plan themselves and use the tools to build the car. Building a car is not an easy business, it will be really hard for the workers to plan and cooperate properly. A &lt;strong&gt;modern&lt;/strong&gt; software framework will be like a modern car factory with all the facilities and managers in place. The workers do not have to make any plan, the managers (part of the framework, they are the smartest people and made the most sophisticated plan) will help coordinate so that the workers know when to do their job (framework calls your code). The workers just need to be flexible enough to use any tools the managers give to them (by using Dependency Injection).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Supongamos que su c&amp;oacute;digo es un grupo de trabajadores. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Necesitan construir un auto. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Estos trabajadores necesitan un lugar y herramientas (un marco de software) para construir el autom&amp;oacute;vil. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;marco de software &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tradicional&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ser&amp;aacute; como un garaje con muchas herramientas. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, los trabajadores deben hacer un plan ellos mismos y usar las herramientas para construir el autom&amp;oacute;vil. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Construir un autom&amp;oacute;vil no es un negocio f&amp;aacute;cil, ser&amp;aacute; muy dif&amp;iacute;cil para los trabajadores planificar y cooperar adecuadamente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;moderno&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El marco de software ser&amp;aacute; como una f&amp;aacute;brica de autom&amp;oacute;viles moderna con todas las instalaciones y gerentes en su lugar. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los trabajadores no tienen que hacer ning&amp;uacute;n plan, los gerentes (parte del marco, son las personas m&amp;aacute;s inteligentes y elaboraron el plan m&amp;aacute;s sofisticado) ayudar&amp;aacute;n a coordinar para que los trabajadores sepan cu&amp;aacute;ndo hacer su trabajo (el marco llama a su c&amp;oacute;digo). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los trabajadores solo necesitan ser lo suficientemente flexibles como para usar cualquier herramienta que los gerentes les den (mediante el uso de la inyecci&amp;oacute;n de dependencia).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="819e65d07437a790910bd253a4b815127c82c5c0" translate="yes" xml:space="preserve">
          <source>Template method design pattern. template method when-to-do part -- primitive subclass implementation what-to-do part</source>
          <target state="translated">Patrón de diseño del método de plantillas.método de plantillas parte cuándo hacer --implementación de subclase primitiva parte qué hacer</target>
        </trans-unit>
        <trans-unit id="072d0efec26d9587c786734676ace0311bad2787" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;inversion&lt;/em&gt; part of the Inversion of Control (IoC) is the confusing thing; because &lt;em&gt;inversion&lt;/em&gt; is the relative term. The best way to understand IoC is to forget about that word!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;parte de &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;inversi&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de la Inversi&amp;oacute;n de Control (IoC) es lo confuso; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;porque &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;inversi&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es el t&amp;eacute;rmino relativo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iexcl;La mejor manera de entender IoC es olvidarse de esa palabra!&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e4f1d9cbbfcaefe232b0b17cdd2fa288e6d29b99" translate="yes" xml:space="preserve">
          <source>The Inversion of Control (IoC) and Dependency Injection (DI) patterns are all about removing dependencies from your code.</source>
          <target state="translated">Los patrones de Inversión de Control (IoC)e Inyección de Dependencia (DI)tratan de eliminar las dependencias de tu código.</target>
        </trans-unit>
        <trans-unit id="2c005f107282c342e284d1960e28999a1e57b7a8" translate="yes" xml:space="preserve">
          <source>The child has now the ability to ask questions and the parent can respond with answers and permissions. Simply means the control is inverted!
The child is now free to ask questions anytime and though there is still dependency with the parent regarding permissions, he is not dependent in the means of speaking/asking questions.</source>
          <target state="translated">El niño tiene ahora la capacidad de hacer preguntas y el padre puede responder con respuestas y permisos.¡Simplemente significa que el control está invertido! El niño es ahora libre de hacer preguntas en cualquier momento y aunque todavía hay dependencia con el padre en cuanto a los permisos,no depende de los medios de hablar-preguntas.</target>
        </trans-unit>
        <trans-unit id="e8d779de32d8b41b513d81e1a6cd345473659bd2" translate="yes" xml:space="preserve">
          <source>The consumer, X, needs the consumed class, Y, to accomplish something. That&amp;rsquo;s all good and natural, but does X really need to know that it uses Y?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El consumidor, X, necesita la clase consumida, Y, para lograr algo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Todo eso es bueno y natural, pero &amp;iquest;X realmente necesita saber que usa Y?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb2cd6c0bbc8de86755315a949691e7759ddbfdb" translate="yes" xml:space="preserve">
          <source>The non-techy answer is being able to swap out an engine in a car right before you turn it on. If everything hooks up right (the interface), you are good.</source>
          <target state="translated">La respuesta no técnica es poder cambiar el motor de un coche justo antes de encenderlo.Si todo se conecta bien (la interfaz),eres bueno.</target>
        </trans-unit>
        <trans-unit id="7786c0b8ac6345f453b43fa76ea60f8d57e64b53" translate="yes" xml:space="preserve">
          <source>The same meeting in the same place, but instead of plastic cups we have a waiter with one glass cup (Singleton)</source>
          <target state="translated">La misma reunión en el mismo lugar,pero en lugar de vasos de plástico tenemos un camarero con un vaso de vidrio (Singleton)</target>
        </trans-unit>
        <trans-unit id="542741f771182eac1541609f892959c01a150bb3" translate="yes" xml:space="preserve">
          <source>There are several techniques possible for each of these steps based on the technology/language you are using for your implementation.</source>
          <target state="translated">Hay varias técnicas posibles para cada uno de estos pasos en función del lenguaje tecnológico que se utilice para su aplicación.</target>
        </trans-unit>
        <trans-unit id="f749eb8ad5cf48a5188523fdc79fab2ce30e58b0" translate="yes" xml:space="preserve">
          <source>There are three types of Inversion of Control:</source>
          <target state="translated">Hay tres tipos de inversión de control:</target>
        </trans-unit>
        <trans-unit id="968de91a1dce32fc6c7756cc1c5d7baf82ecfcaf" translate="yes" xml:space="preserve">
          <source>There arises a new class of bugs where you get your XML config or your annotations wrong and you can spend a lot of time finding out why your IoC container injects a null reference into one of your objects under certain conditions.</source>
          <target state="translated">Surge una nueva clase de bugs en los que se obtiene una configuración XML o las anotaciones erróneas y se puede pasar mucho tiempo averiguando por qué el contenedor de IO inyecta una referencia nula en uno de los objetos bajo ciertas condiciones.</target>
        </trans-unit>
        <trans-unit id="8ff9d8c5ba3c96f3e004ed255d28c54d0ee2f22d" translate="yes" xml:space="preserve">
          <source>There is a decoupling of the execution of a certain task from implementation.</source>
          <target state="translated">Existe una disociación entre la ejecución de una determinada tarea y la aplicación.</target>
        </trans-unit>
        <trans-unit id="bb2f0f107a4127228821c8f74e51b0ece1573141" translate="yes" xml:space="preserve">
          <source>Think about yourself as organizer of such meeting. You need the way to message to hotel administration that</source>
          <target state="translated">Piense en usted como organizador de tal reunión.Necesitas la forma de comunicar a la administración del hotel que</target>
        </trans-unit>
        <trans-unit id="5c60cb7db906ef638719d0294b506aed4ba3a101" translate="yes" xml:space="preserve">
          <source>This is common characteristic of frameworks,
IOC &lt;strong&gt;manages java objects&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta es una caracter&amp;iacute;stica com&amp;uacute;n de los frameworks, IOC &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;maneja objetos java&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba7c35b6e4505275374089e51f124be81a7d7fba" translate="yes" xml:space="preserve">
          <source>This simple scenario explains the control is centered to the parent. The child's freedom is restricted and highly depends on the parent's question. The child can &lt;strong&gt;ONLY&lt;/strong&gt; speak when asked to speak, and can &lt;strong&gt;ONLY&lt;/strong&gt; act when granted permission.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Este escenario simple explica que el control est&amp;aacute; centrado en el padre. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La libertad del ni&amp;ntilde;o est&amp;aacute; restringida y depende en gran medida de la pregunta de los padres. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El ni&amp;ntilde;o &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SOLO&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; puede &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;hablar cuando se le pide que hable, y &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SOLO&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; puede &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;actuar cuando se le concede permiso.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f867a139d0dbe3e72e634a7554a484922278981e" translate="yes" xml:space="preserve">
          <source>What is Inversion of Control</source>
          <target state="translated">¿Qué es la inversión de control</target>
        </trans-unit>
        <trans-unit id="6b2120a1856f6091491edc697891105447b78317" translate="yes" xml:space="preserve">
          <source>What is Inversion of Control?</source>
          <target state="translated">¿Qué es la inversión de control?</target>
        </trans-unit>
        <trans-unit id="cf7391c25fc73fff3e34f8a317b9b44c5d611a45" translate="yes" xml:space="preserve">
          <source>What is identified is the following relationship:</source>
          <target state="translated">Lo que se identifica es la siguiente relación:</target>
        </trans-unit>
        <trans-unit id="89511a76c8cbc174d6fe0018b08443f894e18a4b" translate="yes" xml:space="preserve">
          <source>What is it?</source>
          <target state="translated">¿Qué es?</target>
        </trans-unit>
        <trans-unit id="b4f439cf8dc8207caee2714fe1b467c5ad192100" translate="yes" xml:space="preserve">
          <source>What it means in practice is that the method does not depends directly on a particular implementation; any implementation that meets the requirements can be passed as a parameter.</source>
          <target state="translated">Lo que significa en la práctica es que el método no depende directamente de una implementación particular;cualquier implementación que cumpla con los requisitos puede ser pasada como parámetro.</target>
        </trans-unit>
        <trans-unit id="abf52a2348eb59964ab851091350a8d3313ed339" translate="yes" xml:space="preserve">
          <source>What it means is that don't go to the Hollywood to fulfill your dream rather if you are worthy then Hollywood will find you and make your dream comes true. Pretty much inverted, huh?</source>
          <target state="translated">Lo que significa es que no vayas al Hollywood para cumplir tu sueño,sino que si eres digno,entonces el Hollywood te encontrará y hará tu sueño realidad.Bastante invertido,¿no?</target>
        </trans-unit>
        <trans-unit id="20de39054338a4c253f3ce11367d13296360d90a" translate="yes" xml:space="preserve">
          <source>What we've done here creates a dependency between the &lt;code&gt;TextEditor&lt;/code&gt; and the &lt;code&gt;SpellChecker&lt;/code&gt;.
In an IoC scenario we would instead do something like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo que hemos hecho aqu&amp;iacute; crea una dependencia entre &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En un escenario de IoC, har&amp;iacute;amos algo como esto:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9ef313862d8b18eb5751f0b6070898cb9d7e33b7" translate="yes" xml:space="preserve">
          <source>When is it appropriate to use and when not?</source>
          <target state="translated">¿Cuándo es apropiado utilizarlo y cuándo no?</target>
        </trans-unit>
        <trans-unit id="e521f0561524653f00013217388d2d5971994008" translate="yes" xml:space="preserve">
          <source>When somebody want to drink, she fill cup, drink and throw cup on the floor.</source>
          <target state="translated">Cuando alguien quiere beber,llena la copa,bebe y tira la copa al suelo.</target>
        </trans-unit>
        <trans-unit id="0b055b735943d522f8380495fc0b53e141cd9b25" translate="yes" xml:space="preserve">
          <source>When somebody want to drink, she get from waiter glass, drink and return it back to waiter.</source>
          <target state="translated">Cuando alguien quiere beber,saca del vaso del camarero,bebe y se lo devuelve al camarero.</target>
        </trans-unit>
        <trans-unit id="3313b632cba0a4333c123f9494413a6ee77d024e" translate="yes" xml:space="preserve">
          <source>When you use a desktop computer, you have slaved (or say, controlled). You have to sit before a screen and look at it. Using the keyboard to type and using the mouse to navigate. And a badly written software can slave you even more. If you replace your desktop with a laptop, then you somewhat inverted control. You can easily take it and move around. So now you can control where you are with your computer, instead of your computer controlling it.</source>
          <target state="translated">Cuando usas un ordenador de sobremesa,has esclavizado (o digamos,controlado).Tienes que sentarte delante de una pantalla y mirarla.Usar el teclado para escribir y usar el ratón para navegar.Y un software mal escrito puede esclavizarte aún más.Si reemplazas tu escritorio por una computadora portátil,entonces tienes un control algo invertido.Puedes cogerlo fácilmente y moverte.Así que ahora puedes controlar dónde estás con tu ordenador,en lugar de que sea tu ordenador el que lo controle.</target>
        </trans-unit>
        <trans-unit id="1a4624ec0be8f6f66ea2c27b7bf9c47a30790d06" translate="yes" xml:space="preserve">
          <source>When you want to change with the Dropbox implementation you have to replace all the lines where &lt;code&gt;new&lt;/code&gt; GoogleDriveService object is constructed and use the DropboxService. Besides when testing the SomeController class the constructor always expects the GoogleDriveService class and the actual methods of this class are triggered.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando desee cambiar con la implementaci&amp;oacute;n de Dropbox, debe reemplazar todas las l&amp;iacute;neas donde &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se construye el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; objeto GoogleDriveService y usar DropboxService. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, al probar la clase SomeController, el constructor siempre espera la clase GoogleDriveService y se activan los m&amp;eacute;todos reales de esta clase.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aab7b8a12bd75ba2b9b47803cd1e21b97c48b86c" translate="yes" xml:space="preserve">
          <source>When your requirements change say, instead of GoogleDrive you are asked to use the Dropbox. You only need to write a dropbox implementation for the StorageServiceInterface. You don't have make any changes in the controller as long as Dropbox implementation adheres to the StorageServiceInterface.</source>
          <target state="translated">Cuando tus requerimientos cambian dicen,en lugar de GoogleDrive se te pide que uses el Dropbox.Sólo tienes que escribir una implementación de dropbox para la StorageServiceInterface.No tienes que hacer ningún cambio en el controlador mientras la implementación de Dropbox se adhiera a la StorageServiceInterface.</target>
        </trans-unit>
        <trans-unit id="119b801f84f26b70137a5f640c2eaa28d07fdb9f" translate="yes" xml:space="preserve">
          <source>Which problem does it solve?</source>
          <target state="translated">¿Qué problema resuelve?</target>
        </trans-unit>
        <trans-unit id="fdfd96244f49069c6524042296c538a51a6739a9" translate="yes" xml:space="preserve">
          <source>While testing you can create the mock for the StorageServiceInterface with the dummy implementation where all the methods return null(or any predefined value as per your testing requirement).</source>
          <target state="translated">Durante las pruebas puede crear el simulacro de la StorageServiceInterface con la implementación ficticia en la que todos los métodos devuelven nulos (o cualquier valor predefinido según sus requisitos de prueba).</target>
        </trans-unit>
        <trans-unit id="df530f4bc1a8f211d961ad4e0af76790c047eaa9" translate="yes" xml:space="preserve">
          <source>With the above ideas in mind. We still miss a key part of IoC. In the scenario of IoC, the software/object consumer is a sophisticated framework. That means the code you created is not called by yourself. Now let's explain why this way works better for a web application.</source>
          <target state="translated">Con las ideas anteriores en mente.Todavía nos falta una parte clave de la IO.En el escenario de IO,el consumidor de software-objeto es un marco sofisticado.Eso significa que el código que has creado no es llamado por ti mismo.Ahora expliquemos por qué esta forma funciona mejor para una aplicación web.</target>
        </trans-unit>
        <trans-unit id="1d600b9ba9832d2d39a632cc07fe364489b02235" translate="yes" xml:space="preserve">
          <source>X is not dependent on Y anymore</source>
          <target state="translated">X ya no depende de Y</target>
        </trans-unit>
        <trans-unit id="c521892a4c82d2426166e25844e7b8aaa13cf0a9" translate="yes" xml:space="preserve">
          <source>Your code gets decoupled so you can easily exchange implementations of an interface with alternative implementations</source>
          <target state="translated">Tu código se desacoplará para que puedas intercambiar fácilmente implementaciones de una interfaz con implementaciones alternativas</target>
        </trans-unit>
        <trans-unit id="f9c1a75603cd89b8c4cf5d8e81ab5f55c6d22610" translate="yes" xml:space="preserve">
          <source>Your desktop successfully implements IoC in this case. It accepts a variety type of monitors, while the laptop does not, it needs a specific screen to get fixed.</source>
          <target state="translated">Su escritorio implementa con éxito el IO en este caso.Acepta una variedad de monitores,mientras que el portátil no,necesita una pantalla específica para arreglarse.</target>
        </trans-unit>
        <trans-unit id="3f5ad33ace051da1ec338535b39ff8115145080a" translate="yes" xml:space="preserve">
          <source>a) &lt;strong&gt;Most of the developers don't know how to use it&lt;/strong&gt;.  For example, I can create a class called &lt;strong&gt;Customer&lt;/strong&gt; and &lt;strong&gt;I can create automatically&lt;/strong&gt; (using the tools of the IDE) an interface called &lt;strong&gt;ICustomer&lt;/strong&gt;. So, it's not rare to find a folder filled with classes and interfaces, no matter if the interfaces will be reused or not. It's called BLOATED. Some people could argue that &quot;may be in the future we could use it&quot;.  :-|</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a) &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La mayor&amp;iacute;a de los desarrolladores no saben c&amp;oacute;mo usarlo&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Por ejemplo, puedo crear una clase llamada &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cliente&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;puedo crear autom&amp;aacute;ticamente&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (usando las herramientas del IDE) una interfaz llamada &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ICustomer&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Por lo tanto, no es raro encontrar una carpeta llena de clases e interfaces, sin importar si las interfaces se reutilizar&amp;aacute;n o no. Se llama BLOATED. Algunas personas podr&amp;iacute;an argumentar que &quot;puede ser en el futuro que podamos usarlo&quot;. : - |&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a65833fb178f769cbd2a9bc9021c43263c312e48" translate="yes" xml:space="preserve">
          <source>a. Alleviates a component from being responsible for managing it's dependencies.</source>
          <target state="translated">a.Alivia a un componente de ser responsable de la gestión de sus dependencias.</target>
        </trans-unit>
        <trans-unit id="63ff9730ec57ffeb05ecc06369fb7667129e3bef" translate="yes" xml:space="preserve">
          <source>a. Critical when doing test-driven development. Without IoC it can be difficult to test, because the components under test are highly coupled to the rest of the system.</source>
          <target state="translated">a.Crítico cuando se hace un desarrollo dirigido por pruebas.Sin IO puede ser difícil de probar,porque los componentes bajo prueba están altamente acoplados al resto del sistema.</target>
        </trans-unit>
        <trans-unit id="44985c1031c23e77f88374731d5a01d00e2f9eb2" translate="yes" xml:space="preserve">
          <source>and she all of time offers to guests drinking.</source>
          <target state="translated">y ella todo el tiempo se ofrece a los invitados a beber.</target>
        </trans-unit>
        <trans-unit id="54acfe4a62ef1001dcfd19dbc445f3cc5fc3822b" translate="yes" xml:space="preserve">
          <source>b) It has some limitings. For example, let's talk about the case of &lt;strong&gt;Dog&lt;/strong&gt; and &lt;strong&gt;Cat&lt;/strong&gt; and I want to add a new service (functionality) only for dogs.  Let's say that I want to calculate the number of days that I need to train a dog (&lt;strong&gt;&lt;code&gt;trainDays()&lt;/code&gt;&lt;/strong&gt;), for cat it's useless, cats can't be trained (I'm joking).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;b) Tiene algunos l&amp;iacute;mites. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, hablemos del caso de &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dog&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; and &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cat&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y quiero agregar un nuevo servicio (funcionalidad) solo para perros. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Digamos que quiero calcular la cantidad de d&amp;iacute;as que necesito para entrenar a un perro ( &lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;trainDays()&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), para el gato es in&amp;uacute;til, los gatos no pueden ser entrenados (estoy bromeando).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74856b92af69493420e4b9bc813673dbcf236ce2" translate="yes" xml:space="preserve">
          <source>b. Critical when developing modular systems. A modular system is a system whose components can be replaced without requiring recompilation.</source>
          <target state="translated">b.Crítico para el desarrollo de sistemas modulares.Un sistema modular es un sistema cuyos componentes pueden ser reemplazados sin necesidad de recomponerlos.</target>
        </trans-unit>
        <trans-unit id="0ea4ef6079611afe337c0be4dc3a73c339faed98" translate="yes" xml:space="preserve">
          <source>b. Provides the ability to swap dependency implementations in different environments.</source>
          <target state="translated">b.Proporciona la capacidad de intercambiar implementaciones de dependencia en diferentes entornos.</target>
        </trans-unit>
        <trans-unit id="7ea4a797dcd6b8e84153f539da6ccdf8400ac494" translate="yes" xml:space="preserve">
          <source>b.1) If I add &lt;code&gt;trainDays()&lt;/code&gt; to the Service &lt;strong&gt;AnimalService&lt;/strong&gt; then it also works with cats and it's not valid at all.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;b.1) Si agrego &lt;/font&gt;&lt;/font&gt; &lt;code&gt;trainDays()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; al Servicio &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AnimalService&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , tambi&amp;eacute;n funciona con gatos y no es v&amp;aacute;lido en absoluto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="95864b278c6a1d49a8369149e67975a2e4799356" translate="yes" xml:space="preserve">
          <source>b.2) I can add a condition in &lt;code&gt;trainDays()&lt;/code&gt; where it evaluates which class is used. But it will break completely the IoC.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;b.2) Puedo agregar una condici&amp;oacute;n en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;trainDays()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; donde eval&amp;uacute;a qu&amp;eacute; clase se usa. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero romper&amp;aacute; completamente el IoC.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e1d91394a944977977450e66a7e9e0fe56940820" translate="yes" xml:space="preserve">
          <source>b.3) I can create a new class of service called &lt;strong&gt;DogService&lt;/strong&gt; just for the new functionality. But, it will increase the maintainability of the code because we will have two classes of service (with similar functionality) for &lt;strong&gt;Dog&lt;/strong&gt; and it's bad.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;b.3) Puedo crear una nueva clase de servicio llamada &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DogService&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; solo para la nueva funcionalidad. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero, aumentar&amp;aacute; la capacidad de mantenimiento del c&amp;oacute;digo porque tendremos dos clases de servicio (con una funcionalidad similar) para &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dog&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y es malo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4a4aa0aaf5a477fe08cfc207c3e55741b064206c" translate="yes" xml:space="preserve">
          <source>c. Allows a component be tested through mocking of dependencies.</source>
          <target state="translated">c.Permite probar un componente mediante la burla de las dependencias.</target>
        </trans-unit>
        <trans-unit id="c4ee524cd2357103632cd711413ed416314da6e5" translate="yes" xml:space="preserve">
          <source>c. Critical if there are many cross-cutting concerns which need to addressed, partilarly in an enterprise application.</source>
          <target state="translated">c.Crítico si hay muchas preocupaciones transversales que deben ser abordadas,en parte en una aplicación empresarial.</target>
        </trans-unit>
        <trans-unit id="f6db05452a6d0e2a2846aef3ed85a00204a3ced3" translate="yes" xml:space="preserve">
          <source>d. Provides a mechanism for sharing resources throughout an application.</source>
          <target state="translated">d.Proporciona un mecanismo para compartir recursos a través de una aplicación.</target>
        </trans-unit>
        <trans-unit id="8c0d44faec42652e00c54838468ee5290bfb4dcf" translate="yes" xml:space="preserve">
          <source>if you find yourself copying an entire method and only changing a small piece of the code, you can consider tackling it with inversion of control</source>
          <target state="translated">si te encuentras copiando un método entero y sólo cambiando una pequeña parte del código,puedes considerar abordarlo con inversión de control</target>
        </trans-unit>
        <trans-unit id="859c89047ad8d601ec08028577b1b350e4c0a8b6" translate="yes" xml:space="preserve">
          <source>meeting members will need glass of water but not piece of cake.</source>
          <target state="translated">los miembros de la reunión necesitarán un vaso de agua pero no un trozo de pastel.</target>
        </trans-unit>
        <trans-unit id="ac7e8efc5ef7c1cb26918e697fd6e7efbfcb80be" translate="yes" xml:space="preserve">
          <source>thereby controlling the flow of user interaction.</source>
          <target state="translated">controlando así el flujo de la interacción con el usuario.</target>
        </trans-unit>
        <trans-unit id="b849754aed43b9f2f84d1f0fd912c3a39d7f8783" translate="yes" xml:space="preserve">
          <source>xUnit fixture. Setup and TearDown (what-to-do part) -- xUnit frameworks calls to Setup at the beginning and TearDown at the end (when-to-do part)</source>
          <target state="translated">xUnidad de fijación.Setup y TearDown (parte de qué hacer)--xUnit frameworks llama a Setup al principio y TearDown al final (parte de cuándo hacer)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
