<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/3058">
    <body>
      <group id="3058">
        <trans-unit id="373c315627044d8114133a9eceb77e35102452b1" translate="yes" xml:space="preserve">
          <source>&quot;Any nontrivial application is made up of two or more classes that
  collaborate with each other to perform some business logic.
  Traditionally, each object is responsible for obtaining its own
  references to the objects it collaborates with (its dependencies).
  When applying DI, the objects are given their dependencies at creation
  time by some external entity that coordinates each object in the
  system. In other words, dependencies are injected into objects.&quot;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot;모든 사소한 응용 프로그램은 비즈니스 로직을 수행하기 위해 서로 협력하는 두 개 이상의 클래스로 구성됩니다. 일반적으로 각 개체는 공동 작업하는 개체 (종속성)에 대한 자체 참조를 가져옵니다. DI를 적용 할 때 객체는 시스템의 각 객체를 조정하는 외부 엔티티에 의해 생성시 종속성을 부여받습니다. 즉, 종속성은 객체에 주입됩니다. &quot;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1fbd17eb3e2e00cb03e793a913cd5879c46118b0" translate="yes" xml:space="preserve">
          <source>&amp;ndash; from instantiation to destruction through its BeanFactory.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;ndash; BeanFactory를 통한 인스턴스화에서 파기까지.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="068b6ab33b6b4be771ec1212da10f6ec032066f1" translate="yes" xml:space="preserve">
          <source>-Java components that are instantiated by the IoC container are called beans, and the &lt;strong&gt;IoC container manages a bean's scope, lifecycle events, and any AOP features&lt;/strong&gt; for which it has been configured and coded.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-IoC 컨테이너로 인스턴스화되는 Java 구성 요소를 Bean이라고하며 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC 컨테이너는 Bean의 범위, 수명주기 이벤트 및&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 구성 및 코딩 된 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AOP 기능&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;관리합니다&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="afa4d9b9f6de7b5688061d0997a422f279e431e1" translate="yes" xml:space="preserve">
          <source>3 . It becomes more appropriate the minute you have a medium sized project of somewhat more complexity.  I would say it becomes appropriate the minute you start feeling pain.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;삼 . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다소 규모가 더 복잡한 중간 규모의 프로젝트가있을 때 더 적합합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 당신이 고통을 느끼기 시작하는 순간 그것이 적절 해 진다고 말할 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="40b8b55e45ad1a598253beb75f7288ba8ba55f1d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;Wikipedia Article&lt;/a&gt;. To me, inversion of control is turning your sequentially written code and turning it into an delegation structure. Instead of your program explicitly controlling everything, your program sets up a class or library with certain functions to be called when certain things happen.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위키피디아 기사&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나에게 제어의 반전은 순차적으로 작성된 코드를 위임 구조로 바꾸는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프로그램이 명시 적으로 모든 것을 제어하는 ​​대신, 프로그램은 특정 일이 발생할 때 호출 할 특정 함수를 가진 클래스 또는 라이브러리를 설정합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b3a6cae60fc41c6d95dc1070dcab2bec94c65c7a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;QUICK EXAMPLE:Inversion of Control is about getting freedom, more flexibility, and less dependency. When you are using a desktop computer, you are slaved (or say, controlled). You have to sit before a screen and look at it. Using keyboard to type and using mouse to navigate. And a bad written software can slave you even more. If you replaced your desktop with a laptop, then you somewhat inverted control. You can easily take it and move around. So now you can control where you are with your computer, instead of computer controlling it&lt;/code&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;QUICK EXAMPLE:Inversion of Control is about getting freedom, more flexibility, and less dependency. When you are using a desktop computer, you are slaved (or say, controlled). You have to sit before a screen and look at it. Using keyboard to type and using mouse to navigate. And a bad written software can slave you even more. If you replaced your desktop with a laptop, then you somewhat inverted control. You can easily take it and move around. So now you can control where you are with your computer, instead of computer controlling it&lt;/code&gt; &lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce6277c62215b72c62f6d7b32405d03e8dab8242" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;After 1 hour...&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1 시간 후...&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4bf00ad6158c463a4d18359447633037167e612a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;In a technological way of explaining, this is very similar to console/shell/cmd vs GUI interaction. (Which is answer of Mark Harrison above no.2 top answer).
In console, you are dependent on the what is being asked/displayed to you and you can't jump to other menus and features without answering it's question first; following a strict sequential flow. (programmatically this is like a method/function loop).
However with GUI, the menus and features are laid out and the user can select whatever it needs thus having more &lt;strong&gt;control&lt;/strong&gt; and being less restricted. (programmatically, menus have callback when selected and an action takes place).&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;기술적으로 설명하면 콘솔 / 쉘 / cmd 대 GUI 상호 작용과 매우 유사합니다. (마크 해리슨의 답변은 2 위의 최고 답변입니다). 콘솔에서, 당신은 당신에게 요청 / 표시되는 것에 의존하며, 먼저 질문에 대답하지 않고 다른 메뉴와 기능으로 이동할 수 없습니다; 엄격한 순차적 흐름을 따릅니다. (프로그래밍 방식은 메소드 / 함수 루프와 같습니다). 그러나 GUI를 사용하면 메뉴와 기능이 배치되고 사용자는 필요한 것을 선택할 수 있으므로 더 많은 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 제한을받지 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;않아도 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;됩니다. 프로그래밍 방식으로 메뉴를 선택하면 콜백이 발생하고 작업이 수행됩니다.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ed29e8d6239fa919bfe90a1309aaa619ab390e6c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;With this objects tell thier dependencies.
And spring makes it available. &lt;br/&gt;This leads to loosely coupled application development.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 객체로 그들의 의존성을 말해줍니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 봄은 그것을 사용할 수있게합니다. &lt;/font&gt;&lt;/font&gt;&lt;br/&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 느슨하게 결합 된 응용 프로그램 개발로 이어집니다.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="288921ce6b306091d7e29a08f49c763343c42534" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;*Parent&lt;/strong&gt;: You can only speak when I ask you questions and you can only act when I give you permission.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;* 학부모&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 질문 할 때만 말할 수 있으며 허락을 한 경우에만 행동 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c0849807fdb7fca5c56ad0f55c3e8ce3038f606" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;The control of the dependencies is inverted from one being called to the one calling.&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;종속성의 제어는 호출되는 호출에서 호출되는 호출로 반전됩니다.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1f1651d8874b325c4ed4c493b808a5d27b680253" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: (Wants to play but since there's no question from the parent, the child can't do anything).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Child&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : (놀이를하고 싶지만 부모로부터 의심의 여지가 없으므로 아이는 아무것도 할 수 없습니다).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba8aa85f4075a8f58fc6dbfbaed6f4e152f4edf4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: (finally is able to play).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;어린이&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : (마지막으로 재생할 수 있습니다).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb2030779c1e6c6a7bb69d41c861abf6968afbcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: No.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;아동&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 아니오&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d4cb53aa68484a8be2e5c3ce16e52da82e925950" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Child&lt;/strong&gt;: Yes.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;아이&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 예.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e948765d7e551575d5bbb9e78278d7dc0f14c8f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Classic code (without Dependency injection)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;클래식 코드 (종속성 주입 없음)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d25c9d64eb9c3856ad367881451af0e0aa609be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Creation Inversion&lt;/strong&gt; 
It can be implemented by the following patterns: Factory Pattern, Service Locator, and Dependency Injection. Creation Inversion helps to eliminate dependencies between types moving the process of dependency objects creation outside of the type that uses these dependency objects. Why dependencies are bad? Here are a couple of examples: direct creation of a new object in your code makes testing harder; it is impossible to change references in assemblies without recompilation (OCP principle violation); you can&amp;rsquo;t easily replace a desktop-UI by a web-UI.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;생성 반전&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 공장 패턴, 서비스 로케이터 및 종속성 주입 패턴으로 구현할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Creation Inversion은 종속성 개체 생성 프로세스를 이러한 종속성 개체를 사용하는 형식 외부로 이동시키는 형식 간의 종속성을 제거하는 데 도움이됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;종속성이 나쁜 이유는 무엇입니까? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음은 몇 가지 예입니다. 코드에서 새 객체를 직접 작성하면 테스트가 더 어려워집니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;재 컴파일없이 어셈블리에서 참조를 변경하는 것은 불가능합니다 (OCP 원칙 위반). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;데스크탑 UI를 웹 UI로 쉽게 바꿀 수는 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="08e78ee2b7c128a89d211a2bf39b2f84466452c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Dependency Injection(DI):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의존성 주입 (DI) :&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d1b89118884de42df71b6af8b8ea2200c727bc22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:-&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example:-&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="64a28b0eac5fea46185f8873a51b9268bdfe88d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Flow Inversion&lt;/strong&gt; 
Changes control of the flow. For example, you have a console application where you asked to enter many parameters and after each entered parameter you are forced to press Enter. You can apply Flow Inversion here and implement a desktop application where the user can choose the sequence of parameters&amp;rsquo; entering, the user can edit parameters, and at the final step, the user needs to press Enter only once.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;흐름 반전 흐름&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 제어를 변경합니다. 예를 들어 많은 매개 변수를 입력하도록 요청한 콘솔 응용 프로그램이 있으며 입력 한 각 매개 변수 다음에 Enter 키를 눌러야합니다. 여기서 Flow Inversion을 적용하고 사용자가 매개 변수 입력 순서를 선택할 수 있고 사용자가 매개 변수를 편집 할 수 있으며 마지막 단계에서 Enter를 한 번만 눌러야하는 데스크탑 애플리케이션을 구현할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cba09dbb242bc98d15d12a8fef257c90c62924a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I shall write down my simple understanding of this two terms:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 두 용어에 대한 간단한 이해를 적어 두겠습니다.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="38d46125888ee3caad2da28aa8d6aa5a8926b541" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I've read a lot of answers for this but if someone is still confused and needs a plus ultra &quot;laymans term&quot; to explain IoC here is my take:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 이것에 대한 많은 답변을 읽었지만 누군가가 여전히 혼란스럽고 여기에 IoC를 설명하기 위해 플러스 &quot;레이맨 용어&quot;가 필요하다면 여기에 내 테이크가 있습니다.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6bf58eb168559f7cf585397ed5dd09bcc2ca3fba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Interface Inversion&lt;/strong&gt; 
Providers shouldn&amp;rsquo;t define an interface. Instead, the consumer should define the interface and providers must implement it. Interface Inversion allows eliminating the necessity to modify the consumer each time when a new provider added.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Interface Inversion&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Providers는 인터페이스를 정의하지 않아야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;대신 소비자는 인터페이스를 정의해야하며 공급자는이를 구현해야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Interface Inversion을 사용하면 새로운 공급자가 추가 될 때마다 소비자를 수정할 필요가 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed0b7b3bd833a3c6061e7d3d4e4435a418101a66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inversion of Control(IoC) Container:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어 (IoC) 컨테이너의 반전 :&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c3fde237e686241fd27580469f73cb15114b6b9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inversion of control as a design guideline serves the following purposes:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;설계 지침으로 제어를 뒤집 으면 다음과 같은 목적으로 사용됩니다.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a3b6606a4ce50930db11c9d5745c4e9507283a90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inversion of control&lt;/strong&gt; is when you go to the grocery store and your wife gives you the list of products to buy.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어의 반전은&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 당신이 식료품 가게에 가서 당신의 아내는 당신이 구입하는 제품의 목록을 제공 할 때입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1cc610b7deb430a2900463e9ef2e6cade3227cf5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: Do you want to eat?</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;부모&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 먹고 싶니?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba949e705d98f2c3b04905c56af2d99f2ae12904" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: I'm back. Do you want to play?</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;부모&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 돌아 왔어요. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;당신이 연주하고 싶어?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="586ff1c99fde9c623fd38dc89e47f278ee449a8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: Okay, I'll be back. Wait for me.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;부모&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 좋아, 돌아올 게. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;날 기다려.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce4d1c01e2c78cc40a78a655d28a601a32149798" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: Permission granted.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;부모&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 권한 부여.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3e6a711eba13c601406802a4b5d24f5f621c30a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parent&lt;/strong&gt;: This means, you can't ask me if you can eat, play, go to the bathroom or even sleep if I don't ask you.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;부모&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 이것은 당신이 나에게 물어 보지 않으면 먹고 놀거나 화장실에 가거나 잠을 잘 수 있는지 물어볼 수 없다는 것을 의미합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="228fabf1f35817d8a668be417f7bbf490117f1fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Useful links:-&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;유용한 링크:-&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="21b7eafe7407645083182e0bf75e568a7b1481a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using dependency injection&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의존성 주입 사용&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fea0286fee454bd929c61270ce0cea0daaee4e58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What problems does it solve?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;어떤 문제가 해결됩니까?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c14e5a9c9d9ef0696566b4fb6c19a3faae2a437d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When is it appropriate and when not?&lt;/strong&gt;
In my opinion you use DI when you think there are (or there can be) alternative implementations of a class.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;언제 적절한가? &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 내 생각에 당신은 클래스의 대체 구현이 있거나있을 수 있다고 생각할 때 DI를 사용합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="825b03cbbacfbb1b7a19868df499e5872f62c0c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;With IoC:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC로 :&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bd7ee2632bbdd33b1d9442666a7099f0a028b310" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;With IoC&lt;/strong&gt;: You can ask for &quot;fruit&quot;. You can get different fruits each time you get served. for example, apple, orange, or water melon.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC 사용&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &quot;과일&quot;을 요청할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;봉사 할 때마다 다른 과일을 얻을 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어 사과, 오렌지 또는 수박.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba18cb219c6ee97148042cefde5d4632bbb536d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;With IoC&lt;/strong&gt;: You have a &lt;strong&gt;desktop&lt;/strong&gt; computer and you accidentally break the screen. You find you can just grab almost any desktop monitor from the market, and it works well with your desktop.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC 사용&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;데스크탑&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 컴퓨터가 있고 실수로 화면을 깰 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;당신은 시장에서 거의 모든 데스크탑 모니터를 잡을 수 있으며 데스크탑과 잘 작동합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0a27438b705ef7753d44c454be364c9f0bede393" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Without IoC:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC없이 :&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1d13a77d2a7550cfdb5ca4858f7dcdbc2457d535" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Without IoC&lt;/strong&gt;: You have a &lt;strong&gt;laptop&lt;/strong&gt; computer and you accidentally break the screen. And darn, you find the same model laptop screen is nowhere in the market. So you're stuck.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC 미포함&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;랩톱&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 컴퓨터가 있고 실수로 화면을 깰 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고, 당신은 같은 모델의 노트북 화면이 시장에서 어디에도 없다는 것을 알았습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그래서 당신은 붙어 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="836d4b023c42984531a364fb6c44580d073bca78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Without IoC&lt;/strong&gt;: you ask for &quot;apple&quot;, and you are always served apple when you ask more.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC없이&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 당신은 &quot;사과&quot;를 요구하고, 당신은 더 많은 것을 요청할 때 항상 사과를 제공받습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="783fb8f1d9a5b79049829582b02390a06e324449" translate="yes" xml:space="preserve">
          <source>A good read with example</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예제를 잘 읽고&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1fc99bcac170ae4802f35453c9045f144a0a97f2" translate="yes" xml:space="preserve">
          <source>A real life example would be given here. Suppose, you want to develop a web application. So, you create a framework which will handle all the common things a web application should handle like handling http request, creating application menu, serving pages, managing cookies, triggering events etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;실제 사례가 여기에 주어질 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;웹 애플리케이션을 개발하려고한다고 가정하십시오. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 웹 응용 프로그램이 http 요청 처리, 응용 프로그램 메뉴 생성, 페이지 제공, 쿠키 관리, 이벤트 트리거 등과 같이 웹 응용 프로그램이 처리해야하는 모든 공통 사항을 처리하는 프레임 워크를 만듭니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5b72c852f59e3c77579e7c0c79ad0e52e5d0438f" translate="yes" xml:space="preserve">
          <source>A very simple written explanation can be found here</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;매우 간단한 서면 설명은 여기에서 찾을 수 있습니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="03ce18a84ba0139f8b2d282fb731383609571750" translate="yes" xml:space="preserve">
          <source>After hour or something we have a floor covered of plastic cups and water.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;몇 시간 후 또는 우리는 플라스틱 컵과 물로 바닥을 덮었습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b22ecdbc7467f179e8b80b4a5cb28a7d9453723d" translate="yes" xml:space="preserve">
          <source>Although the workers give the control of managing the project on the top level to the managers (the framework). But it is good to have some professionals help out. This is the concept of IoC truly come from.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;근로자는 최상위 수준에서 프로젝트 관리 권한을 관리자에게 제공하지만 (프레임 워크). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 일부 전문가의 도움을받는 것이 좋습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것이 바로 IoC의 개념입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="00fd8444cad967012a1ae67dd61c70de9a3b11a4" translate="yes" xml:space="preserve">
          <source>And once you get into generics, it gets even better.  Imagine having a message publisher that receives records and publishes messages.  It doesn't care what it publishes, but it needs a mapper to take something from a record to a message.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 일단 제네릭에 들어가면 더 좋아집니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;레코드를 받고 메시지를 게시하는 메시지 게시자가 있다고 가정합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;게시하는 내용은 중요하지 않지만 레코드에서 메시지로 무언가를 가져 오려면 매퍼가 필요합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e69975b42ed25e7f8f28e85f31d62e2a8cb06b1a" translate="yes" xml:space="preserve">
          <source>And then you leave some hooks in your framework where you can put further codes to generate custom menu, pages, cookies or logging some user events etc. On every browser request, your framework will run and executes your custom codes if hooked then serve it back to the browser.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그런 다음 프레임 워크에 후크를 남겨서 사용자 정의 메뉴, 페이지, 쿠키를 생성하거나 일부 사용자 이벤트 등을 생성하는 추가 코드를 넣을 수 있습니다. 모든 브라우저 요청에서 프레임 워크가 실행되면 사용자 정의 코드가 실행되고 다시 실행됩니다. 브라우저에.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b665befe257f7ff25fb720471835afdb3362429f" translate="yes" xml:space="preserve">
          <source>And this is exactly what the Spring (another IoC container, for example: Guice) does. Instead of let to application create what it need using new keyword (taking plastic cup), Spring IoC container all of time offer to application the same instance (singleton) of needed object(glass of water).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것이 바로 Spring (예 : 다른 IoC 컨테이너, Guice)의 기능입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring IoC 컨테이너는 항상 새로운 키워드 (플라스틱 컵 사용)를 사용하여 필요한 것을 만들도록하는 대신 필요한 객체 (물 유리)의 동일한 인스턴스 (단일)를 적용 할 수 있도록 항상 제공합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d065037b22d578a8d5a62e61105bf2d8ede75c17" translate="yes" xml:space="preserve">
          <source>Answering only the first part.
What is it?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;첫 번째 부분에만 응답합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;무엇입니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8ae0498fb7e27f3e77d528523d5e9ef00a7a185a" translate="yes" xml:space="preserve">
          <source>Anyway: be reasonable. Design pattern are &lt;strong&gt;good practices&lt;/strong&gt; but not Bible to be preached. Do not stick it everywhere.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;어쨌든 : 합리적입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;디자인 패턴은 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;좋은 습관&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이지만 설교 할 성경은 아닙니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;어디에나 붙이지 마십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a5fc50e3ceaa03d10efa641f9932ed3164ec099" translate="yes" xml:space="preserve">
          <source>Application calls Foo</source>
          <target state="translated">응용 프로그램 호출 Foo</target>
        </trans-unit>
        <trans-unit id="ac42390e19be354858b8262243637ee16d63efc2" translate="yes" xml:space="preserve">
          <source>Application creates Bar and gives it Bim</source>
          <target state="translated">응용 프로그램은 막대를 만들어 Bim을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="cc24fa2cfa1ade20a4b0568072650d805b3f7a37" translate="yes" xml:space="preserve">
          <source>Application creates Bim</source>
          <target state="translated">응용 프로그램이 Bim을 만듭니다</target>
        </trans-unit>
        <trans-unit id="70579284eb400d7297fa45f23e86008434a5dae7" translate="yes" xml:space="preserve">
          <source>Application creates Foo</source>
          <target state="translated">응용 프로그램이 Foo를 만듭니다</target>
        </trans-unit>
        <trans-unit id="c0f19361a5c397f8b9f7a8e3a097732fbca45296" translate="yes" xml:space="preserve">
          <source>Application creates Foo and gives it Bar</source>
          <target state="translated">응용 프로그램이 Foo를 작성하고이를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="1a435d46695a15e5ef97ebb4802372a00c982aa2" translate="yes" xml:space="preserve">
          <source>Application needs Foo (e.g. a controller), so:</source>
          <target state="translated">응용 프로그램에는 Foo (예 : 컨트롤러)가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="9be6e530a74dcafa45c7b24d7025184525c1bc10" translate="yes" xml:space="preserve">
          <source>Application needs Foo, which needs Bar, which needs Bim, so:</source>
          <target state="translated">응용 프로그램에는 Boo가 필요한 Foo가 필요하고 Bim이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="fff41238dbef5b816e589fb9ecf3cbde7896731e" translate="yes" xml:space="preserve">
          <source>Bar creates Bim</source>
          <target state="translated">바는 Bim을 만듭니다</target>
        </trans-unit>
        <trans-unit id="452099fc339bb9ab1a4137666deb3f1f3b017433" translate="yes" xml:space="preserve">
          <source>Bar does something</source>
          <target state="translated">바 뭔가를</target>
        </trans-unit>
        <trans-unit id="2b2cfde5abc29f811788f8a477a12b0d271a2ada" translate="yes" xml:space="preserve">
          <source>Bar needs Bim (a service, a repository, &amp;hellip;), so:</source>
          <target state="translated">Bar는 Bim (서비스, 저장소 등)이 필요하므로 다음과 같이하십시오.</target>
        </trans-unit>
        <trans-unit id="adf15cc582acf54581c37a950b4076c28cebbc7c" translate="yes" xml:space="preserve">
          <source>Basically, &lt;strong&gt;anything&lt;/strong&gt; with an event loop, callbacks, or execute triggers falls into this category.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;기본적으로, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;어떤&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이벤트 루프는, 콜백, 또는 실행 트리거는이 범주에 빠진다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c15542d7fcb269ae139c7a7886a1b2613dd14f5d" translate="yes" xml:space="preserve">
          <source>Before using Inversion of Control you should be well aware of the fact that it has its pros and cons and you should know why you use it if you do so.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inversion of Control을 사용하기 전에 장단점이 있다는 사실을 잘 알고 있어야하며 사용하는 이유를 알아야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a75d2762f97d0c2ece2927dafe57eaf0e294409f" translate="yes" xml:space="preserve">
          <source>But I think you have to be very careful with it. If you will overuse this pattern, you will make very complicated design and even more complicated code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 나는 당신이 그것에 매우 조심해야한다고 생각합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 패턴을 과도하게 사용하면 매우 복잡한 디자인과 더욱 복잡한 코드를 만들 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bf33c7e70ae590068b05025538fd39ae51569fdb" translate="yes" xml:space="preserve">
          <source>By extracting an abstract definition of the behavior used by X in Y, illustrated as I below, and letting the consumer X use an instance of that instead of Y it can continue to do what it does without having to know the specifics about Y.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;아래 I과 같이 Y에서 X가 사용하는 동작의 추상 정의를 추출하고 소비자 X가 Y 대신 해당 인스턴스를 사용하게하면 Y에 대한 세부 사항을 알 필요없이 계속 수행 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94d3696bca4e509dbee4b3f2721acf48efbcc91e" translate="yes" xml:space="preserve">
          <source>By implementing Inversion of Control, a software/object consumer get more controls/options over the software/objects, instead of being controlled or having less options.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inversion of Control을 구현하면 소프트웨어 / 개체 소비자는 제어되거나 옵션이 적은 대신 소프트웨어 / 개체에 대해 더 많은 제어 / 옵션을 얻을 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a765706b39bb310d1815886a85f5790bb5cddfdd" translate="yes" xml:space="preserve">
          <source>By implementing Inversion of Control, a software/object consumer gets more controls/options over the software/objects, instead of being controlled or having fewer options.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inversion of Control을 구현함으로써 소프트웨어 / 개체 소비자는 제어되거나 옵션이 적은 대신 소프트웨어 / 개체에 대해 더 많은 제어 / 옵션을 얻습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="afc2b6eb93654fed24d8cce3141c211e0dfdd6a4" translate="yes" xml:space="preserve">
          <source>Cons:</source>
          <target state="translated">Cons:</target>
        </trans-unit>
        <trans-unit id="2ef7bd6d6b0fca27c168920a2f37fcb5d9a9e6e9" translate="yes" xml:space="preserve">
          <source>Creating an object within class is called tight coupling, Spring removes this dependency by following a design pattern(DI/IOC). In which object of class in passed in constructor rather than creating in class. More over we give super class reference variable in constructor to define more general structure.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;클래스 내에 객체를 생성하는 것을 타이트 커플 링이라고하며 Spring은 디자인 패턴 (DI / IOC)에 따라 이러한 종속성을 제거합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;클래스에서 만들지 않고 생성자가 전달한 클래스의 객체. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 더 일반적인 구조를 정의하기 위해 생성자에 슈퍼 클래스 참조 변수를 제공합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8e0638a769a99fa369ab8513b8f14693372f58e0" translate="yes" xml:space="preserve">
          <source>DI (Dependency Injection) is about how the control flows in the application. Traditional desktop application had control flow from your application(main() method) to other library method calls, but with DI control flow is inverted that's framework takes care of starting your app, initializing it and invoking your methods whenever required.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DI (Dependency Injection)는 응용 프로그램에서 컨트롤의 흐름에 관한 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;기존의 데스크톱 응용 프로그램에는 응용 프로그램 (main () 메서드)에서 다른 라이브러리 메서드 호출로 제어 흐름이 있었지만 DI 제어 흐름을 사용하면 프레임 워크가 앱을 시작하고 초기화하고 필요할 때마다 메서드를 호출합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3b1e93f7a994b1c6fa9c849c7f78a08f5f55f101" translate="yes" xml:space="preserve">
          <source>DLL container methods in COM. DllMain, DllCanUnload, etc (what-to-do part) -- COM/OS (when-to-do part)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;COM의 DLL 컨테이너 메서드 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DllMain, DllCanUnload 등 (할 일 부분)-COM / OS (할 일 부분)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4b7dce9ad71ae931cbbdb8069b2f958ba77aca4c" translate="yes" xml:space="preserve">
          <source>Dependency Injection and Inversion of Control are related. Dependency Injection is at the &lt;strong&gt;micro&lt;/strong&gt; level and Inversion of Control is at the &lt;strong&gt;macro&lt;/strong&gt; level. You have to eat every bite (implement DI) in order to finish a meal (implement IoC).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의존성 주입과 제어 역전은 관련이 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의존성 주입은 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;마이크로&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 레벨에 있고 제어의 반전은 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;매크로&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 레벨에 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;식사 (구현 IoC)를 마치려면 모든 물린 (구현 DI)을 먹어야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6ee080601f38ccffcc77ec09e618c93a8a122547" translate="yes" xml:space="preserve">
          <source>Dependency injection generally means &lt;strong&gt;passing an object on which method depends, as a parameter to a method, rather than having the method create the dependent object&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의존성 주입은 일반적으로 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;메소드가 종속 오브젝트를 작성하지 않고 메소드에 종속 된 오브젝트를 메소드에 매개 변수로 전달하는&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 것을 의미 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4a343e8a0620741fbb66739fd1d46148979f2b5a" translate="yes" xml:space="preserve">
          <source>Dependency injection makes it easy to swap with the different implementation of the injected classes. While unit testing you can inject a dummy implementation, which makes the testing a lot easier.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의존성 주입을 통해 주입 된 클래스의 다른 구현으로 쉽게 교체 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단위 테스트를 수행하는 동안 더미 구현을 삽입 할 수 있으므로 테스트가 훨씬 쉬워집니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="92ed562037033112d88e7aaf65217d90ffa2423c" translate="yes" xml:space="preserve">
          <source>Detailed explanation</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;상해&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2fd22edb8e3ea30eab025ef8f4290ffacde4fb8b" translate="yes" xml:space="preserve">
          <source>Do we really need a name by which to describe the difference between procedural and event driven programming? OK, if we need to, but do we need to pick a brand new &quot;bigger than life&quot; name that confuses more than it solves?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;절차 적 프로그래밍과 이벤트 중심 프로그래밍의 차이점을 설명 할 수있는 이름이 정말로 필요합니까? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우리가 필요로한다면 문제보다 더 혼란스러운 새로운 &quot;생명보다 더 큰&quot;이름을 선택해야합니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce8104f0909bbd49f3a87e76b46fd63af7b23865" translate="yes" xml:space="preserve">
          <source>Don't call us, we'll call you</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;전화 하지마, 전화 할께&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5c221fed55ea2a8b9560181babdde0f2e320ba49" translate="yes" xml:space="preserve">
          <source>Ensure that &lt;strong&gt;when&lt;/strong&gt; part knows as &lt;em&gt;little&lt;/em&gt; as possible about &lt;strong&gt;what&lt;/strong&gt; part; and vice versa.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있는지 확인 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하면&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 부분으로 알고 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;작은&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대해 가능한 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;어떤&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 부분; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그 반대.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a357e26edfd850a29c72490b46f8b9e1c7e1c26d" translate="yes" xml:space="preserve">
          <source>Event Handling. Event Handlers (what-to-do part) -- Raising Events (when-to-do part)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이벤트 처리. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이벤트 처리기 (할일 부분)-이벤트 발생 (할일 부분)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4681308f589fd3db8982d8895f704006c536728b" translate="yes" xml:space="preserve">
          <source>Every module can focus on what it is designed for.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 모듈은 그것이 설계된 것에 집중할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="37013689579c8310949d1aaa459fbe78604e94c8" translate="yes" xml:space="preserve">
          <source>Ex: Suppose your application stores the user uploaded file in the Google Drive, with DI your controller code may look like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예 : 애플리케이션이 사용자가 업로드 한 파일을 Google 드라이브에 저장한다고 가정하면 DI와 함께 컨트롤러 코드는 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="e9044ac31a8995f5ad62b7e9f444f33bf9e08657" translate="yes" xml:space="preserve">
          <source>Foo calls Bar</source>
          <target state="translated">푸 콜 바</target>
        </trans-unit>
        <trans-unit id="36a8c8318b6369919a71996fd940aacf3965166d" translate="yes" xml:space="preserve">
          <source>Foo creates Bar</source>
          <target state="translated">푸는 바를 만듭니다</target>
        </trans-unit>
        <trans-unit id="c2cfcdd995da76d7e30b4bb8c5a58a247fe77380" translate="yes" xml:space="preserve">
          <source>Foo needs Bar (e.g. a service), so:</source>
          <target state="translated">Foo에는 Bar (예 : 서비스)가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="c40a9c4979dbcd08f9143f72f4f97633ba55f56f" translate="yes" xml:space="preserve">
          <source>For example, in an old school menu, you might have:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어 구식 메뉴에는 다음이있을 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="54513be8dda986f2beeef0cb1d533fbca0652e5b" translate="yes" xml:space="preserve">
          <source>For example, let's say that we have two classes : &lt;strong&gt;Dog&lt;/strong&gt; and &lt;strong&gt;Cat&lt;/strong&gt;.   Both shares the same qualities/states: age, size, weight. So instead of creating a class of service called &lt;strong&gt;DogService&lt;/strong&gt; and &lt;strong&gt;CatService&lt;/strong&gt;, I can create a single one called &lt;strong&gt;AnimalService&lt;/strong&gt; that allows to use Dog and Cat only if they use the interface &lt;strong&gt;IAnimal&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dog&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cat&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 클래스가 있다고 가정 해 봅시다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;둘 다 같은 질 / 상태를 공유합니다 : 나이, 크기, 체중. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DogService&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CatService&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 라는 서비스 클래스를 작성하는 대신 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IAnimal&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 인터페이스를 사용하는 경우에만 Dog 및 Cat을 사용할 수있는 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AnimalService&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 라는 단일 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;클래스를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;작성할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d60c0cdafbec5fc9cf7874f8725048484c3f63ce" translate="yes" xml:space="preserve">
          <source>For example, say your application has a text editor component and you want to provide spell checking. Your standard code would look something like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어, 응용 프로그램에 텍스트 편집기 구성 요소가 있고 철자 검사를 제공하려고한다고 가정하십시오. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;표준 코드는 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b193542666e0549ecc44307cdfa4b9bc29a65958" translate="yes" xml:space="preserve">
          <source>For example, task#1 is to create object.
Without IOC concept, task#1 is supposed to be done by Programmer.But With IOC concept, task#1 would be done by container.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어, 작업 # 1은 객체를 만드는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IOC 개념이 없으면 작업 1이 프로그래머가 수행해야하지만 IOC 개념이 있으면 작업 1이 컨테이너에 의해 수행됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4c4257d920e8870617eb7c2a571ea4b4696b4faf" translate="yes" xml:space="preserve">
          <source>For those interested in more depth on Inversion of Control a paper has been published outlining a more complete picture of Inversion of Control as a design pattern (OfficeFloor: using office patterns to improve software design &lt;a href=&quot;http://doi.acm.org/10.1145/2739011.2739013&quot;&gt;http://doi.acm.org/10.1145/2739011.2739013&lt;/a&gt; with a free copy available to download from &lt;a href=&quot;http://www.officefloor.net/about.html&quot;&gt;http://www.officefloor.net/about.html&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inversion of Control에 대해 더 깊이 관심이있는 사람들을 위해 디자인 패턴으로서 Control of Inversion에 대한보다 완전한 그림을 요약 한 논문이 발표되었습니다 (OfficeFloor : 사무실 패턴을 사용하여 소프트웨어 디자인 개선 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://doi.acm.org/10.1145/2739011.2739013&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://doi.acm.org/10.1145/ &lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://www.officefloor.net/about.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://www.officefloor.net/about.html&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 무료로 다운로드 할 수있는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2739011.2739013&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="530a5c467b34b9f4477df522b08ee9d842c1a1d7" translate="yes" xml:space="preserve">
          <source>Here is how a code not using DI will roughly work:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DI를 사용하지 않는 코드가 대략적으로 작동하는 방법은 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8feb0cfc564ed6fe998214e0b617510b751cbf33" translate="yes" xml:space="preserve">
          <source>Here is how a code using DI will roughly work:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DI를 사용하는 코드가 대략적으로 작동하는 방법은 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="60b0beb3f28af92c7fd7dc62953c72cac128a607" translate="yes" xml:space="preserve">
          <source>However, pragmatically speaking, it has some backwards.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 실용적으로 말하면 약간 뒤로 향합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fcc6e5b27035a345cfafd067265b9d513f1ff521" translate="yes" xml:space="preserve">
          <source>I agree with &lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#3082&quot;&gt;NilObject&lt;/a&gt;, but I'd like to add to this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#3082&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;NilObject에&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 동의 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하지만 다음과 같이 추가하고 싶습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3bf68460e0fb730dd585b98cc7af3cac3d6aa69c" translate="yes" xml:space="preserve">
          <source>I am definitely loving IoC/DI.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 IoC / DI를 확실히 좋아합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82d4b78078a9c52e303c8ecc8ca5f4c8c95fc3bf" translate="yes" xml:space="preserve">
          <source>I found a very clear example &lt;a href=&quot;http://php-di.org/doc/understanding-di.html&quot;&gt;here&lt;/a&gt; which explains how the 'control is inverted'.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://php-di.org/doc/understanding-di.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기서&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; '제어가 반전되는 방법'을 설명하는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;매우 명확한 예를 찾았습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b0fb3f858bf2eab2695294bc696e5aa358bf89cd" translate="yes" xml:space="preserve">
          <source>I found one good example &lt;a href=&quot;http://www.goospoos.com/2009/12/inversion-of-control-basics-with-example/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://www.goospoos.com/2009/12/inversion-of-control-basics-with-example/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기서&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 좋은 예를 찾았 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;습니다&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c7dd2bab3cb0cd2991bce40ce3201c3f7a535c6f" translate="yes" xml:space="preserve">
          <source>I like this explanation: &lt;a href=&quot;http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&quot;&gt;http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는이 설명을 좋아한다 : &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1aa23d27c2aa025d7ac4285b379874694217b40b" translate="yes" xml:space="preserve">
          <source>I understand that the answer has already been given here. But I still think, some basics about the inversion of control have to be discussed here in length for future readers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;답변이 이미 여기에 있음을 이해합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 나는 여전히 미래의 독자들을 위해 통제 역전에 대한 몇 가지 기본 사항에 대해 오랫동안 논의해야한다고 생각합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="937f692b34fc2319d608f1cbd292305bff67b729" translate="yes" xml:space="preserve">
          <source>I will keep things abstract here, You can visit following links for detail understanding of the topic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 여기에 추상을 유지합니다. 주제에 대한 자세한 이해를 위해 다음 링크를 방문하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="33b4f2de83b8d009dfb1e4f0c8f37f73deb35275" translate="yes" xml:space="preserve">
          <source>I wrote it once, but now I can inject many types into this set of code if I publish different types of messages.  I can also write mappers that take a record of the same type and map them to different messages. Using DI with Generics has given me the ability to write very little code to accomplish many tasks.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;한 번 작성했지만 다른 유형의 메시지를 게시하면이 코드 세트에 여러 유형을 삽입 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 같은 유형의 레코드를 가져와 다른 메시지에 매핑하는 매퍼를 작성할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DI를 Generics와 함께 사용하면 많은 작업을 수행하기 위해 코드를 거의 작성할 수 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="46a53efcdd95296d970c368c25c5a862f47bd55c" translate="yes" xml:space="preserve">
          <source>If you find yourself copying and pasting code around, you're almost always doing &lt;em&gt;something&lt;/em&gt; wrong.  Codified as the design principle &lt;a href=&quot;http://c2.com/xp/OnceAndOnlyOnce.html&quot;&gt;Once and Only Once&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;자신이 코드를 복사하여 붙여 넣는 것을 발견하면 거의 항상 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;무언가&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 잘못하고 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;설계 원칙으로 성문화 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://c2.com/xp/OnceAndOnlyOnce.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;한 번만&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29ab9727475a88b2c5d04f24a224b5ff059cd20c" translate="yes" xml:space="preserve">
          <source>If you follow these simple two steps, you have done inversion of control:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 간단한 두 단계를 수행하면 제어 역전이 완료된 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bf55354f38c64ca9c6750feaf917cc557da9b65e" translate="yes" xml:space="preserve">
          <source>Imagine a parent and child talking to each other.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;부모와 자녀가 서로 이야기한다고 상상해보십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fddc5beb5789c807e772d70f367d3e0c53630417" translate="yes" xml:space="preserve">
          <source>In IoC the &quot;framework&quot; controls &lt;strong&gt;&lt;em&gt;main()&lt;/em&gt;&lt;/strong&gt; and calls your methods. The &lt;strong&gt;&lt;em&gt;Framework&lt;/em&gt;&lt;/strong&gt; is in control :(</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC에서 &quot;프레임 워크&quot;는 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;main ()을&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 제어 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하고 메소드를 호출합니다. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프레임 워크는&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 컨트롤에 :(&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="377410213559b2702c94f0b3b1faeaf157754fdc" translate="yes" xml:space="preserve">
          <source>In a GUI program or somesuch, instead we say:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;GUI 프로그램 등에서 대신 다음과 같이 말합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="794ffcb222e8673e69c250708deea7737d00cdd9" translate="yes" xml:space="preserve">
          <source>In normal s/w development, you write the &lt;strong&gt;&lt;em&gt;main()&lt;/em&gt;&lt;/strong&gt; method and call &quot;library&quot; methods.  &lt;strong&gt;&lt;em&gt;You&lt;/em&gt;&lt;/strong&gt; are in control :)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;일반적인 소프트웨어 개발에서는 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;main ()&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 메소드 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;를 작성하고 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot;library&quot;메소드를 호출합니다. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;당신&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 통제하고 있습니다 :)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3f10d36138f924778c4756832794808cc0e20331" translate="yes" xml:space="preserve">
          <source>In our programming world, &lt;strong&gt;Hollywood&lt;/strong&gt; represent a generic framework (may be written by you or someone else), &lt;strong&gt;you&lt;/strong&gt; represent the user code you wrote and &lt;strong&gt;the task&lt;/strong&gt; represent the thing you want to accomplish with your code. Now you don't ever go to trigger your task by yourself, not in IoC! Rather you have designed everything in such that your framework will trigger your task for you. Thus you have built a reusable framework which can make someone a hero or another one a villain. But that framework is always in charge, it knows when to pick someone and that someone only knows what it wants to be.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우리의 프로그래밍 세계에서 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hollywood&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 일반적인 프레임 워크 (귀하 또는 다른 사람이 작성할 수 있음) &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;를&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 나타내며, 작성한 사용자 코드를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나타내며 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;작업&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 코드로 수행하려는 것을 나타냅니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 IoC가 아닌 혼자서 작업을 시작하지 않아도됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;오히려 프레임 워크가 작업을 트리거하도록 모든 것을 설계했습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 재사용 가능한 프레임 워크를 구축하여 누군가를 영웅이나 다른 사람으로 만들 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 그 프레임 워크는 항상 책임이 있으며, 누군가를 고를 때를 알고 누군가가 자신이 원하는 것을 알고 있다는 것을 압니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="173b21ccdfbf6f494cf6d1444bbd225f45320e1f" translate="yes" xml:space="preserve">
          <source>In programming terms, she passed a callback function &lt;code&gt;getProductList()&lt;/code&gt; to the function you are executing - &lt;code&gt;doShopping()&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프로그래밍 용어로, 콜백 함수 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;getProductList()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 실행중인 함수 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;doShopping()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83e763a2dee31b60a814d50a0bf409afb468b761" translate="yes" xml:space="preserve">
          <source>In short Control gets inverted from Programmer to container. So, it is called as inversion of control.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;간단히 말해 Control은 프로그래머에서 컨테이너로 반전됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어의 반전이라고합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8ce30cfb65598251ed25908c4dd40a288377ffb4" translate="yes" xml:space="preserve">
          <source>In the end you always win :)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;결국 당신은 항상 승리 :)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="415bf701ddc37ec878782b3147762d4c810c9f63" translate="yes" xml:space="preserve">
          <source>In the first code example we are instantiating &lt;code&gt;SpellChecker&lt;/code&gt; (&lt;code&gt;this.checker = new SpellChecker();&lt;/code&gt;), which means the &lt;code&gt;TextEditor&lt;/code&gt; class directly depends on the &lt;code&gt;SpellChecker&lt;/code&gt; class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;첫 번째 코드 예제에서는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this.checker = new SpellChecker();&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;인스턴스화 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 클래스가 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 클래스 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에 직접 의존 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;함을 의미합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="02311f7e83fcf777d1f281214c8986231c3912c0" translate="yes" xml:space="preserve">
          <source>In the illustration above Y implements I and X uses an instance of I. While it&amp;rsquo;s quite possible that X still uses Y what&amp;rsquo;s interesting is that X doesn&amp;rsquo;t know that. It just knows that it uses something that implements I.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위의 그림에서 Y는 I을 구현하고 X는 I의 인스턴스를 사용합니다. X가 여전히 Y를 사용하는 것이 가능하지만 흥미로운 것은 X가 그것을 알지 못한다는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그것은 내가 그것을 구현하는 것을 사용한다는 것을 알고 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="10b6331947724028e6c4d5b46f4ac577504462aa" translate="yes" xml:space="preserve">
          <source>In the second code example we are creating an abstraction by having the &lt;code&gt;SpellChecker&lt;/code&gt; dependency class in &lt;code&gt;TextEditor&lt;/code&gt; constructor signature (not initializing dependency in class). This allows us to call the dependency then pass it to the TextEditor class like so:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;두 번째 코드 예제 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에서는 &lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 생성자 서명 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 종속성 클래스 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;를 사용하여 추상화를 작성합니다 ( &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;클래스에서 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;종속성을 초기화하지 않음). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이를 통해 종속성을 호출 한 다음 TextEditor 클래스에 전달할 수 있습니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="86e9aa47c02eac4bb61f7fcbb0829f0a43930434" translate="yes" xml:space="preserve">
          <source>In using a container like Castle Windsor, it solves maintenance issues even better.  Being able to swap out a component that goes to a database for one that uses file based persistence without changing a line of code is awesome (configuration change, you're done).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Castle Windsor와 같은 컨테이너를 사용하면 유지 관리 문제를 훨씬 더 잘 해결합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;코드 줄을 변경하지 않고 파일 기반 지속성을 사용하는 구성 요소를 데이터베이스로 이동하는 구성 요소를 교체 할 수 있다는 것은 대단합니다 (구성 변경이 완료되었습니다).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="393aff0ab87ccb76f01e199b65f9dfff7969a389" translate="yes" xml:space="preserve">
          <source>Instead if you had the controller class to construct the storage object with the &lt;code&gt;new&lt;/code&gt; keyword like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;대신 다음과 같이 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 키워드를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용하여 스토리지 오브젝트를 구성하는 컨트롤러 클래스가있는 경우 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd2c07da0630be24a7d3559c8b8807776d8cdf48" translate="yes" xml:space="preserve">
          <source>Interfaces. Component client (when-to-do part) -- Component Interface implementation (what-to-do part)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;인터페이스. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컴포넌트 클라이언트 (할일 부분)-컴포넌트 인터페이스 구현 (할 일 부분)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="85b24615680dc38ffe1f3574074bfc21eff397f1" translate="yes" xml:space="preserve">
          <source>Inversion of Control (IoC) can be quite confusing when it is first encountered.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC (Inversion of Control)는 처음 발생할 때 매우 혼란 스러울 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7379f00d78c1620733cf4544b441a1c216d8f4b3" translate="yes" xml:space="preserve">
          <source>Inversion of Control (IoC) has been built on a very simple principle called &lt;strong&gt;Hollywood Principle&lt;/strong&gt;. And it says that,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC (Inversion of Control)는 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hollywood Principle&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이라는 매우 간단한 원칙을 기반으로 구축되었습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 그것은 말합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6e29ef62a3454337d3ef55e638a0463283e61fd7" translate="yes" xml:space="preserve">
          <source>Inversion of Control (IoC) means to create instances of dependencies first and latter instance of a class (optionally injecting them through constructor), instead of creating an instance of the class first and then the class instance creating instances of dependencies.
Thus, inversion of control &lt;strong&gt;inverts&lt;/strong&gt; the &lt;strong&gt;flow of control&lt;/strong&gt; of the program. &lt;strong&gt;Instead of&lt;/strong&gt; the &lt;strong&gt;callee controlling&lt;/strong&gt; the &lt;strong&gt;flow of control&lt;/strong&gt; (while creating dependencies), the &lt;strong&gt;caller controls the flow of control of the program&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC (Inversion of Control)는 클래스의 인스턴스를 먼저 생성 한 다음 클래스 인스턴스가 종속성의 인스턴스를 생성하는 대신 클래스의 인스턴스를 먼저 생성하고 클래스의 후자의 인스턴스를 생성 (선택적으로 생성자를 통해 주입)하는 것을 의미합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서, 제어의 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;반전&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 프로그램 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 제어 흐름을 &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;반전&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 시킵니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;대신에 &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어 수신자 &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어의 흐름&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (종속성을 생성하는 동안)에서, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;호출자는 프로그램의 제어의 흐름을 제어한다&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="447c04d94c54d0ae2f5b843b5618686c41ad12ba" translate="yes" xml:space="preserve">
          <source>Inversion of Control (for methods) = Dependency (state) Injection + Continuation Injection + Thread Injection</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어 역전 (방법의 경우) = 종속성 (상태) 주입 + 연속 주입 + 스레드 주입&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3ff7d8358b5e99cc26d5c2e29dcb68ec749052f0" translate="yes" xml:space="preserve">
          <source>Inversion of Control is a generic principle, while Dependency Injection realises this principle as a design pattern for object graph construction (i.e. configuration controls how the objects are referencing each other, rather than the object itself controlling how to get the reference to another object).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Control of Inversion은 일반적인 원칙이며, Dependency Injection은이 원칙을 객체 그래프 구성을위한 디자인 패턴으로 인식합니다 (예 : 구성은 객체 자체가 다른 객체에 대한 참조를 얻는 방법을 제어하는 ​​것이 아니라 객체가 서로를 참조하는 방식을 제어합니다).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="246abcec0d5f703c2373d287bf72d2bb3f4b4db4" translate="yes" xml:space="preserve">
          <source>Inversion of Control is a pattern that implements the Dependency Inversion Principle (DIP). DIP states the following: 1. High-level modules should not depend on low-level modules. Both should depend on abstractions (e.g. interfaces). 2. Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inversion of Control은 DIP (Dependency Inversion Principle)를 구현하는 패턴입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DIP는 다음을 나타냅니다. 1. 높은 수준의 모듈은 낮은 수준의 모듈에 의존해서는 안됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;둘 다 추상화 (예 : 인터페이스)에 의존해야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2. 추상화는 세부 사항에 의존해서는 안됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;세부 사항 (콘크리트 구현)은 추상화에 따라 달라집니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4270e4151e47f0a6838b48ec9ee467895342deec" translate="yes" xml:space="preserve">
          <source>Inversion of Control is what you get when your program callbacks, e.g. like a gui program.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어 반전은 GUI 프로그램과 같은 프로그램 콜백시 얻을 수있는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="801b879e0e61fbad9fe20e85dfc6244854d4817e" translate="yes" xml:space="preserve">
          <source>Inversion of Control, (or IoC), is about &lt;strong&gt;getting freedom&lt;/strong&gt; (You get married, you lost freedom and you are being controlled. You divorced, you have just implemented Inversion of Control. That's what we called, &quot;decoupled&quot;. Good computer system discourages some very close relationship.) &lt;strong&gt;more flexibility&lt;/strong&gt; (The kitchen in your office only serves clean tap water, that is your only choice when you want to drink. Your boss implemented Inversion of Control by setting up a new coffee machine. Now you get the flexibility of choosing either tap water or coffee.) and &lt;strong&gt;less dependency&lt;/strong&gt; (Your partner has a job, you don't have a job, you financially depend on your partner, so you are controlled. You find a job, you have implemented Inversion of Control. Good computer system encourages in-dependency.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inversion of Control (또는 IoC)은 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;자유&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;얻는 것에&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 관한 것입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(결혼하고 자유를 잃어 버렸으며 통제되고 있습니다. 이혼하고 방금 Inversion of Control을 구현했습니다. 이것이 바로 &quot;분리&quot;된 것입니다. 스타일을 장려 매우 밀접한 관계.) &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;더 많은 유연성은&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (사무실에 부엌은 당신이 마시고 싶어 할 때 유일한 선택입니다 깨끗한 수돗물을 제공합니다. 당신의 상사가 새로운 커피 머신을 설정하여 컨트롤의 반전을 구현했습니다. 이제 얻을 중 수돗물 또는 커피 선택의 유연성을 제공합니다.)와 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;덜 의존&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (파트너에게는 직업이 있고, 직업이 없으며, 재정적으로 파트너에게 의존하므로, 통제됩니다. 직업을 찾고, 제어의 반전을 구현했습니다. 좋은 컴퓨터 시스템은 독립성을 장려합니다.)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="77e5120da94a1f24fb6b60f891876164cb38ce5d" translate="yes" xml:space="preserve">
          <source>Inversion of Controls is about separating concerns.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;통제 역전은 우려를 분리하는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="61d07698e52d02e6e124d9b4a9957fccd5ee55fd" translate="yes" xml:space="preserve">
          <source>Inversion of control is a pattern used for decoupling components and layers in the system. The pattern is implemented through injecting dependencies into a component when it is constructed. These dependences are usually provided as interfaces for further decoupling and to support testability. IoC / DI containers such as Castle Windsor, Unity are tools (libraries) which can be used for providing IoC. These tools provide extended features above and beyond simple dependency management, including lifetime, AOP / Interception, policy, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어 반전은 시스템에서 구성 요소와 레이어를 분리하는 데 사용되는 패턴입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;패턴은 구성 요소가 구성 될 때 종속성을 구성 요소에 주입하여 구현됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이러한 종속성은 일반적으로 추가 분리 및 테스트 가능성을 지원하기위한 인터페이스로 제공됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Castle Windsor, Unity와 같은 IoC / DI 컨테이너는 IoC를 제공하는 데 사용할 수있는 도구 (라이브러리)입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 도구는 수명, AOP / 차단, 정책 등을 포함하여 단순한 종속성 관리 이상의 확장 된 기능을 제공합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="be7841f74b212fbb18a52076953f9299c8fad69a" translate="yes" xml:space="preserve">
          <source>Inversion of control is a practical way to reduce code duplication, and if you find yourself copying an entire method and only changing a small piece of the code, you can consider tackling it with inversion of control. Inversion of control is made easy in many languages through the concept of delegates, interfaces, or even raw function pointers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어 반전은 코드 중복을 줄이는 실용적인 방법이며 전체 방법을 복사하고 작은 코드 조각 만 변경하면 제어 반전으로 처리하는 것을 고려할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;델리게이트, 인터페이스 또는 원시 함수 포인터의 개념을 통해 많은 언어에서 제어 반전이 쉬워집니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="72a912fb5b76b85605df21e6d9aa08ac3caa58f5" translate="yes" xml:space="preserve">
          <source>Inversion of control is about transferring control from library to the client. It makes more sense when we talk about a client that injects (passes) a function value (lambda expression) into a higher order function (library function) that controls (changes) the behavior of the library function. A client or framework that injects library dependencies (which carry behavior) into libraries may also be considered IoC</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어의 반전은 라이브러리에서 클라이언트로 제어를 전송하는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;함수 값 (람다 식)을 라이브러리 함수의 동작을 제어 (변경)하는 상위 함수 (라이브러리 함수)에 삽입 (전달)하는 클라이언트에 대해 이야기 할 때 더 의미가 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;라이브러리 의존성 (동작을 전달하는)을 라이브러리에 주입하는 클라이언트 또는 프레임 워크도 IoC로 간주 될 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c6f3380296dd1859cc46056be7e5c7d7d18517b1" translate="yes" xml:space="preserve">
          <source>IoC / DI to me is pushing out dependencies to the calling objects. Super simple.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나에게 IoC / DI는 호출 객체에 대한 의존성을 밀어 내고있다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;매우 간단합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d01f7e74cc075865246062cbffd169c66a84cace" translate="yes" xml:space="preserve">
          <source>IoC in easy terms: It's the use of Interface as a way of specific something (such a field or a parameter) as a wildcard that can be used by some classes. It allows the re-usability of the code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;쉬운 용어로 IoC : 인터페이스를 특정 클래스 (예 : 필드 또는 매개 변수)로 와일드 카드로 사용하여 일부 클래스에서 사용할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;코드를 재사용 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ecc699e264ec9201c3607773626eecefd4f6379e" translate="yes" xml:space="preserve">
          <source>IoC is about inverting the relationship between your code and third-party code (library/framework):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC는 코드와 타사 코드 (라이브러리 / 프레임 워크) 간의 관계를 반전시키는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b1a30e451f848d07595af921a316e8fdf04e8200" translate="yes" xml:space="preserve">
          <source>IoC not only inverts the control flow in your program, it also clouds it considerably. This means you can no longer just read your code and jump from one place to another because the connections that would normally be in your code are not in the code anymore. Instead it is in XML configuration files or annotations and in the code of your IoC container that interprets these metadata.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC는 프로그램의 제어 흐름을 반전시킬뿐만 아니라 상당히 흐려집니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이는 일반적으로 코드에있는 연결이 더 이상 코드에 없기 때문에 더 이상 코드를 읽고 한 곳에서 다른 곳으로 이동할 수 없음을 의미합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;대신 XML 구성 파일 또는 주석과 이러한 메타 데이터를 해석하는 IoC 컨테이너의 코드에 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="129c548401379640498c3bd2d9aeda56d02ded9e" translate="yes" xml:space="preserve">
          <source>Isn&amp;rsquo;t it enough that X knows that it uses something that has the behavior, the methods, properties etc, of Y without knowing who actually implements the behavior?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;X가 누가 실제로 행동을 구현하는지 모르면서 Y의 행동, 방법, 속성 등을 가진 것을 사용한다는 것을 X가 아는 것으로 충분하지 않습니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="13ba932451564a53b11f07d2fc54611618718a48" translate="yes" xml:space="preserve">
          <source>Isolation of code unit, easier testing</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;코드 단위의 분리, 쉬운 테스트&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f93e3134fbbf3855151cbf5494b8689c1ef262d3" translate="yes" xml:space="preserve">
          <source>It allows user of the function to define some parts of it, making it more flexible.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;함수의 사용자가 함수의 일부를 정의 할 수있어보다 유연합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5589f7b0110a12ff8abdfca719dfe54ce07e36dd" translate="yes" xml:space="preserve">
          <source>It is a strong motivator for coding against interfaces instead of implementations</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;구현 대신 인터페이스를 코딩하기위한 강력한 동기 부여&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b77b575dc2b25c7a321384bbb10a36aa6f2e8f2" translate="yes" xml:space="preserve">
          <source>It is not appropriate to use in all cases, because the flow of a program can be harder to follow when written this way. It's a useful way to design methods when writing a library that will be reused, but it should be used sparingly in the core of your own program unless it really solves a code duplication problem.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이런 방식으로 작성된 프로그램의 흐름을 따르기가 더 어려울 수 있으므로 모든 경우에 사용하는 것이 적절하지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;재사용 할 라이브러리를 작성할 때 메소드를 설계하는 유용한 방법이지만 코드 복제 문제를 실제로 해결하지 않는 한 자체 프로그램의 핵심에서 드물게 사용해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4374f68d4d13a5a1e95989bd83ee0dde411e4897" translate="yes" xml:space="preserve">
          <source>It says -</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그것은 말한다-&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="93947b7bcccf2b2a7d648e4a9fb3a6910d74deb6" translate="yes" xml:space="preserve">
          <source>It seems that the most confusing thing about &quot;IoC&quot; the acronym and the name for which it stands is that it's too glamorous of a name - almost a noise name.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot;IoC&quot;에 대해 가장 혼동되는 것은 약어와 그 이름의 이름이 너무 매력적이어서 거의 소음이없는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8b85e00dbd5642b617bbba6834a701ce8120f842" translate="yes" xml:space="preserve">
          <source>It solves code duplication. For example, in the old days you would manually write your own event loop, polling the system libraries for new events. Nowadays, most modern APIs you simply tell the system libraries what events you're interested in, and it will let you know when they happen.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;코드 중복을 해결합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어, 옛날에는 새로운 이벤트에 대해 시스템 라이브러리를 폴링하여 자체 이벤트 루프를 수동으로 작성했습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;오늘날 대부분의 최신 API는 시스템 라이브러리에 관심있는 이벤트를 알려 주기만하면 언제 발생하는지 알려줍니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b051475457c0cb9b82c447aa1f4d625e160eb580" translate="yes" xml:space="preserve">
          <source>It start simple and shows code examples as well.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;간단하게 시작하고 코드 예제도 보여줍니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7cdd8b2cb24570566fcca5c80bc3ce5cdd68603b" translate="yes" xml:space="preserve">
          <source>It's very easy to write unit tests for your code because it depends on nothing else than the objects it accepts in its constructor/setters and you can easily initialize them with the right objects in isolation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;생성자 / 설정자에서 허용하는 객체 외에는 아무것도 의존하지 않으므로 코드에 대한 단위 테스트를 작성하는 것이 매우 쉽고 올바른 객체를 사용하여 쉽게 초기화 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e188bfdb88678f850320d1c8300b33308920af0b" translate="yes" xml:space="preserve">
          <source>Laravel and EJB are examples of such a frameworks.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;라 라벨과 EJB가 그러한 프레임 워크의 예입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fdff96c467769e0a8335f8e963bf4da65252f786" translate="yes" xml:space="preserve">
          <source>Leaving aside the question of the hygienic, last form of drinking process control is much more effective and economic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위생적인 문제를 제쳐두고, 마지막 형태의 음주 공정 제어는 훨씬 더 효과적이고 경제적입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="07c8b84bfa96ba21d9cc3879005aab0b48bbe962" translate="yes" xml:space="preserve">
          <source>Let invert control.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어를 반전 시키십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ad88ff33863680217c647f3d27552b0f563713ae" translate="yes" xml:space="preserve">
          <source>Let to say that we make some meeting in some hotel.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;호텔에서 회의를한다고하자.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c67342f3bd25bc3faba7eb88fdb1040235adf02" translate="yes" xml:space="preserve">
          <source>Like in this example with TextEditor: if you have only one SpellChecker maybe it is not really necessary to use IoC ? Unless you need to write unit tests or something ...</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;TextEditor를 사용한이 예제와 같이 SpellChecker가 하나만있는 경우 실제로 IoC를 사용할 필요는 없습니까? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단위 테스트 또는 무언가를 작성해야하는 경우가 아니면 ...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8c62f1035a8da667e2e44f248499b63934ff87a4" translate="yes" xml:space="preserve">
          <source>Looking at Inversion of Control as a design pattern, we need to look at what we are inverting.  Dependency Injection inverts control of constructing a graph of objects. If told in layman's term, inversion of control implies change in flow of control in the program. Eg. In traditional standalone app, we have main method, from where the control gets passed to other third party libraries(in case, we have used third party library's function), but through inversion of control control gets transferred from third party library code to our code, as we are taking the service of third party library.  But there are other aspects that need to be inverted within a program - e.g. invocation of methods and threads to execute the code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inversion of Control을 디자인 패턴으로 볼 때, 우리가 뒤집는 것을 살펴 봐야합니다. 의존성 주입은 객체의 그래프 구성 제어를 반전시킵니다. 평신도의 용어로 말하면 제어의 반전은 프로그램의 제어 흐름의 변화를 의미합니다. 예 : 기존의 독립형 앱에는 컨트롤이 다른 타사 라이브러리로 전달되는 주요 방법이 있지만 (타사 라이브러리 기능을 사용하는 경우) 제어 제어의 반전을 통해 타사 라이브러리 코드에서 코드로 전송됩니다. , 제 3 자 도서관 서비스를 받고 있습니다. 그러나 프로그램 내에서 반전되어야하는 다른 측면들 (예 : 코드를 실행하기위한 메소드 및 스레드 호출)이 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b60c725080b624e8208034cd77ad12d11359316b" translate="yes" xml:space="preserve">
          <source>Maintenance is the number one thing it solves for me.  It guarantees I am using interfaces so that two classes are not intimate with each other.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;유지 보수는 나를 위해 해결하는 가장 중요한 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;두 클래스가 서로 친밀하지 않도록 인터페이스를 사용하고 있음을 보장합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5816c432181bcebf9594b545acf0e0a8249ac7eb" translate="yes" xml:space="preserve">
          <source>Many people, many carafes of water, many plastic cups.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;많은 사람들, 많은 물 한 잔, 많은 플라스틱 컵.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c7cec8240199ab24f4d77dd56821078384a55689" translate="yes" xml:space="preserve">
          <source>Modern Web applications with an MVC architecture depends on the framework to do URL Routing and put Controllers in place for the framework to call.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MVC 아키텍처를 사용하는 최신 웹 응용 프로그램은 URL 라우팅을 수행하고 프레임 워크를 호출 할 컨트롤러를 배치하는 프레임 워크에 의존합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1c2a9ecda48a6efc160875050fa4462dcb9abb1a" translate="yes" xml:space="preserve">
          <source>Modules make no assumptions about what other systems do but rely on their contracts.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모듈은 다른 시스템의 기능에 대한 가정을하지 않고 계약에 의존합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6f982201a39d7ef87a3c876a038f8a4fa0dc564a" translate="yes" xml:space="preserve">
          <source>More flexible, implementation can be decided in runtime</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;런타임에서보다 유연한 구현을 결정할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c63d9dccb6ce34a0f517acb6938ddacea50ee998" translate="yes" xml:space="preserve">
          <source>Now the client creating the &lt;code&gt;TextEditor&lt;/code&gt; class has the control over which &lt;code&gt;SpellChecker&lt;/code&gt; implementation to use because we're injecting the dependency to the &lt;code&gt;TextEditor&lt;/code&gt; signature.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 클래스를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;만드는 클라이언트 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;는 &lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 서명에 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;대한 종속성을 주입하기 때문에 사용할 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 구현을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="13ba27318305b67266dadd1df67822736823650f" translate="yes" xml:space="preserve">
          <source>Now when we discuss about the principle of IoC, we use to forget about the Hollywood. For IoC, there has to be three element, a Hollywood, you and a task like to fulfill your dream.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 우리는 IoC의 원칙에 대해 논의 할 때 할리우드를 잊어 버리기 위해 사용합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC를 위해서는 할리우드, 당신, 그리고 당신의 꿈을 이루기위한 과제의 세 가지 요소가 있어야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="794e86e282511605a39174ab8310c8df0912dd6e" translate="yes" xml:space="preserve">
          <source>Oh yeah, there are testability concerns, but they are secondary to the benefits of IoC/DI.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예, 테스트 가능성 문제가 있지만 IoC / DI의 이점에 부차적입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a0b2431eb5e9cf2d9dbb360cae6c15a32ebeb86" translate="yes" xml:space="preserve">
          <source>Personally I see the strong points of IoC and I really like them but I tend to avoid IoC whenever possible because it turns your software into a collection of classes that no longer constitute a &quot;real&quot; program but just something that needs to be put together by XML configuration or annotation metadata and would fall (and falls) apart without it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;개인적으로 나는 IoC의 장점을 보았고 그것들을 정말로 좋아하지만 가능한 한 IoC를 피하는 경향이 있습니다. 소프트웨어가 더 이상 &quot;실제&quot;프로그램을 구성하는 것이 아니라 단지 하나의 프로그램으로 구성되어야하는 클래스 모음으로 바뀌기 때문입니다. XML 구성 또는 주석 메타 데이터가 없으면 XML 구성 또는 주석 메타 데이터가 분리됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eb08e7347d828558b092b9e77e0fb5458ce9a2d2" translate="yes" xml:space="preserve">
          <source>Programming speaking</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프로그래밍 말하기&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="042aa6d6a63ef4409a0e20afcb0ca7083c68c8af" translate="yes" xml:space="preserve">
          <source>Pros:</source>
          <target state="translated">Pros:</target>
        </trans-unit>
        <trans-unit id="8136f601ed9917039203c9b2cbe0a294c9649438" translate="yes" xml:space="preserve">
          <source>Read article for further info and description of benefits such as:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음과 같은 이점에 대한 자세한 정보 및 설명은 기사를 읽으십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="45c3dc1c7731c6185824876ed514e54f71bacb64" translate="yes" xml:space="preserve">
          <source>Reference:</source>
          <target state="translated">Reference:</target>
        </trans-unit>
        <trans-unit id="7732c541c1ffea8567dc88af68f95f74152053da" translate="yes" xml:space="preserve">
          <source>Replacing modules has no side effect on other modules</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모듈을 교체해도 다른 모듈에는 부작용이 없습니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd138957d96ba7b23780bcada6b530b96227fe96" translate="yes" xml:space="preserve">
          <source>Separate &lt;strong&gt;what&lt;/strong&gt;-to-do part from &lt;strong&gt;when&lt;/strong&gt;-to-do part.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;분리 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;어떤&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 일부를 -to-할 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;때&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 일부를 -to이-않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="059afaba1584e036b6791b838c1e68d09e963a7e" translate="yes" xml:space="preserve">
          <source>Since already there are many answers for the question but none of them shows the breakdown of Inversion Control term I see an opportunity to give a more concise and useful answer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이미 질문에 대한 많은 답변이 있지만 그중 어느 것도 반전 제어 용어의 고장을 보여주지 않습니다. 더 간결하고 유용한 답변을 제공 할 수있는 기회를 봅니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="653efab96f1cc6697e2adadee9923a19cc942f75" translate="yes" xml:space="preserve">
          <source>So now control is inverted... instead of the computer accepting user input in a fixed order, the user controls the order in which the data is entered, and when the data is saved in the database.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 컴퓨터는 사용자 입력을 고정 된 순서로 받아들이지 않고 데이터를 입력하는 순서와 데이터가 데이터베이스에 저장되는시기를 제어합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3aa6c886ac387801f1748536a5be995d8bda23e6" translate="yes" xml:space="preserve">
          <source>So number 1 &lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;above&lt;/a&gt;. &lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;What is Inversion of Control?&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위의&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 1 번 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3058/what-is-inversion-of-control#99100&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어 역전이란 무엇입니까?&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2c1664d150c0110d8aebe5ffd87821f87f62f6c0" translate="yes" xml:space="preserve">
          <source>So, obviously, IoC is preferred when you like the varieties.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 품종을 좋아할 때 IoC가 선호됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6c2f7d11ffa12a6a2f23dc757f05ff32b8b7451b" translate="yes" xml:space="preserve">
          <source>So, the idea is pretty much simple. Rather than creating a user application which will control everything, first you create a reusable framework which will control everything then write your custom codes and hook it to the framework to execute those in time.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;아이디어는 매우 간단합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 것을 제어하는 ​​사용자 응용 프로그램을 만드는 대신 먼저 모든 것을 제어하는 ​​재사용 가능한 프레임 워크를 만든 다음 사용자 지정 코드를 작성하여 프레임 워크에 연결하여 적시에 실행하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="17cd0a1fe505e5c89d3f463669d21beac2c45c69" translate="yes" xml:space="preserve">
          <source>Summary of above relationship for Inversion of Control available -  &lt;a href=&quot;http://dzone.com/articles/inversion-of-coupling-control&quot;&gt;http://dzone.com/articles/inversion-of-coupling-control&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용 가능한 제어 역전에 대한 위의 관계 요약-http: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://dzone.com/articles/inversion-of-coupling-control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//dzone.com/articles/inversion-of-coupling-control&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5f87445ee9546ceda6f15cc4651858d83a401071" translate="yes" xml:space="preserve">
          <source>Suppose you are an object. And you go to a restaurant:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;당신이 객체라고 가정하십시오. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 당신은 식당에 간다 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a931c37e5c6a3008d1f1d032d8bc063328c40fe2" translate="yes" xml:space="preserve">
          <source>Suppose your code is a group of workers. They need to build a car. These workers need a place and tools (a software framework) to build the car. A &lt;strong&gt;traditional&lt;/strong&gt; software framework will be like a garage with many tools. So the workers need to make a plan themselves and use the tools to build the car. Building a car is not an easy business, it will be really hard for the workers to plan and cooperate properly. A &lt;strong&gt;modern&lt;/strong&gt; software framework will be like a modern car factory with all the facilities and managers in place. The workers do not have to make any plan, the managers (part of the framework, they are the smartest people and made the most sophisticated plan) will help coordinate so that the workers know when to do their job (framework calls your code). The workers just need to be flexible enough to use any tools the managers give to them (by using Dependency Injection).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;코드가 워커 그룹이라고 가정하십시오. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그들은 차를 만들어야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 노동자들은 자동차를 만들 장소와 도구 (소프트웨어 프레임 워크)가 필요합니다. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;전통적인&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 소프트웨어 프레임 워크는 많은 도구와 차고처럼 될 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 노동자들은 스스로 계획을 세우고 도구를 사용하여 자동차를 만들어야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;차를 세우는 것은 쉬운 일이 아니므로, 노동자들이 제대로 계획하고 협력하기 란 정말 어려울 것입니다. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;현대&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;소프트웨어 프레임 워크는 모든 시설과 관리자가있는 현대 자동차 공장과 같습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;작업자는 계획을 세울 필요가 없으며, 관리자 (프레임 워크의 일부, 가장 똑똑한 사람들이며 가장 정교한 계획을 세운)는 작업자가 작업을 수행 할시기 (프레임 워크가 코드라고 함)를 알 수 있도록 조정하는 데 도움이됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;작업자는 관리자가 자신에게 제공하는 도구를 사용할 수있을 정도로 유연해야합니다 (종속성 주입 사용).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="819e65d07437a790910bd253a4b815127c82c5c0" translate="yes" xml:space="preserve">
          <source>Template method design pattern. template method when-to-do part -- primitive subclass implementation what-to-do part</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;템플릿 방법 디자인 패턴. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;템플릿 메소드 할일 부분-기본 서브 클래스 구현 할일 부분&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="072d0efec26d9587c786734676ace0311bad2787" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;inversion&lt;/em&gt; part of the Inversion of Control (IoC) is the confusing thing; because &lt;em&gt;inversion&lt;/em&gt; is the relative term. The best way to understand IoC is to forget about that word!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어 반전 (IoC) &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;반전&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 부분은 혼란스러운 것입니다. &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;반전&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 상대적인 용어 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이기 때문 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC를 이해하는 가장 좋은 방법은 그 단어를 잊어 버리는 것입니다!&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e4f1d9cbbfcaefe232b0b17cdd2fa288e6d29b99" translate="yes" xml:space="preserve">
          <source>The Inversion of Control (IoC) and Dependency Injection (DI) patterns are all about removing dependencies from your code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어 반전 (IoC) 및 종속성 주입 (DI) 패턴은 코드에서 종속성을 제거하는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2c005f107282c342e284d1960e28999a1e57b7a8" translate="yes" xml:space="preserve">
          <source>The child has now the ability to ask questions and the parent can respond with answers and permissions. Simply means the control is inverted!
The child is now free to ask questions anytime and though there is still dependency with the parent regarding permissions, he is not dependent in the means of speaking/asking questions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;자녀는 이제 질문을 할 수 있으며 부모는 답변과 허락으로 응답 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;간단히 컨트롤이 반전되었음을 의미합니다! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 자녀는 언제든지 질문을 자유롭게 할 수 있으며 허가와 관련하여 여전히 부모와의 의존 관계는 있지만 질문을하거나 말하는 방법에 의존하지 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e8d779de32d8b41b513d81e1a6cd345473659bd2" translate="yes" xml:space="preserve">
          <source>The consumer, X, needs the consumed class, Y, to accomplish something. That&amp;rsquo;s all good and natural, but does X really need to know that it uses Y?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;소비자 X는 무언가를 달성하기 위해 소비 클래스 Y가 필요합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그것은 모두 좋고 자연 스럽지만 X는 실제로 Y를 사용한다는 것을 알아야합니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb2cd6c0bbc8de86755315a949691e7759ddbfdb" translate="yes" xml:space="preserve">
          <source>The non-techy answer is being able to swap out an engine in a car right before you turn it on. If everything hooks up right (the interface), you are good.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;비 기술적 답변은 엔진을 켜기 직전에 자동차에서 엔진을 교체 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 것이 제대로 연결되면 (인터페이스) 좋습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7786c0b8ac6345f453b43fa76ea60f8d57e64b53" translate="yes" xml:space="preserve">
          <source>The same meeting in the same place, but instead of plastic cups we have a waiter with one glass cup (Singleton)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;같은 장소에서 같은 모임이지만 플라스틱 컵 대신 유리 컵 (싱글 톤)이있는 웨이터가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="542741f771182eac1541609f892959c01a150bb3" translate="yes" xml:space="preserve">
          <source>There are several techniques possible for each of these steps based on the technology/language you are using for your implementation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;구현에 사용중인 기술 / 언어에 따라 이러한 각 단계에 대해 몇 가지 기술이 가능합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f749eb8ad5cf48a5188523fdc79fab2ce30e58b0" translate="yes" xml:space="preserve">
          <source>There are three types of Inversion of Control:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inversion of Control에는 세 가지 유형이 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="968de91a1dce32fc6c7756cc1c5d7baf82ecfcaf" translate="yes" xml:space="preserve">
          <source>There arises a new class of bugs where you get your XML config or your annotations wrong and you can spend a lot of time finding out why your IoC container injects a null reference into one of your objects under certain conditions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;XML 구성 또는 주석이 잘못되는 새로운 버그 클래스가 발생하며 특정 조건에서 IoC 컨테이너가 객체 중 하나에 null 참조를 삽입하는 이유를 찾는 데 많은 시간을 할애 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8ff9d8c5ba3c96f3e004ed255d28c54d0ee2f22d" translate="yes" xml:space="preserve">
          <source>There is a decoupling of the execution of a certain task from implementation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;구현에서 특정 작업의 실행을 분리합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bb2f0f107a4127228821c8f74e51b0ece1573141" translate="yes" xml:space="preserve">
          <source>Think about yourself as organizer of such meeting. You need the way to message to hotel administration that</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러한 모임의 주최자로 자신을 생각하십시오. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;호텔 관리에게 메시지를 보내는 방법이 필요합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5c60cb7db906ef638719d0294b506aed4ba3a101" translate="yes" xml:space="preserve">
          <source>This is common characteristic of frameworks,
IOC &lt;strong&gt;manages java objects&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 프레임 워크의 일반적인 특징이며, IOC &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;는 Java 객체를 관리합니다.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba7c35b6e4505275374089e51f124be81a7d7fba" translate="yes" xml:space="preserve">
          <source>This simple scenario explains the control is centered to the parent. The child's freedom is restricted and highly depends on the parent's question. The child can &lt;strong&gt;ONLY&lt;/strong&gt; speak when asked to speak, and can &lt;strong&gt;ONLY&lt;/strong&gt; act when granted permission.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 간단한 시나리오는 컨트롤이 부모를 중심으로 설명합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;자녀의 자유는 제한되어 있으며 부모의 질문에 크게 의존합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;아동은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;발언 요청이있을 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;때만&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 발언 할 수 있으며 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;허가가있을 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;때만&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 행동 할 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f867a139d0dbe3e72e634a7554a484922278981e" translate="yes" xml:space="preserve">
          <source>What is Inversion of Control</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어 반전이란?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6b2120a1856f6091491edc697891105447b78317" translate="yes" xml:space="preserve">
          <source>What is Inversion of Control?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제어 역전이란 무엇입니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cf7391c25fc73fff3e34f8a317b9b44c5d611a45" translate="yes" xml:space="preserve">
          <source>What is identified is the following relationship:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;식별되는 것은 다음 관계입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="89511a76c8cbc174d6fe0018b08443f894e18a4b" translate="yes" xml:space="preserve">
          <source>What is it?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;무엇입니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b4f439cf8dc8207caee2714fe1b467c5ad192100" translate="yes" xml:space="preserve">
          <source>What it means in practice is that the method does not depends directly on a particular implementation; any implementation that meets the requirements can be passed as a parameter.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;실제로 의미는 방법이 특정 구현에 직접 의존하지 않는다는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;요구 사항을 충족하는 모든 구현은 매개 변수로 전달 될 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="abf52a2348eb59964ab851091350a8d3313ed339" translate="yes" xml:space="preserve">
          <source>What it means is that don't go to the Hollywood to fulfill your dream rather if you are worthy then Hollywood will find you and make your dream comes true. Pretty much inverted, huh?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의미는 당신이 합당하다면 꿈을 이루기 위해 할리우드에 가지 않는 것입니다. 그러면 할리우드가 당신을 찾아 꿈을 이룰 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;거꾸로 된 거지?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="20de39054338a4c253f3ce11367d13296360d90a" translate="yes" xml:space="preserve">
          <source>What we've done here creates a dependency between the &lt;code&gt;TextEditor&lt;/code&gt; and the &lt;code&gt;SpellChecker&lt;/code&gt;.
In an IoC scenario we would instead do something like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기서 수행 한 작업은 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TextEditor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SpellChecker&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사이에 종속성을 만듭니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC 시나리오에서는 대신 다음과 같은 작업을 수행합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9ef313862d8b18eb5751f0b6070898cb9d7e33b7" translate="yes" xml:space="preserve">
          <source>When is it appropriate to use and when not?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;언제 사용하는 것이 적절합니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e521f0561524653f00013217388d2d5971994008" translate="yes" xml:space="preserve">
          <source>When somebody want to drink, she fill cup, drink and throw cup on the floor.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;누군가 마시고 싶을 때 컵을 채우고 마시고 바닥에 컵을 던집니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0b055b735943d522f8380495fc0b53e141cd9b25" translate="yes" xml:space="preserve">
          <source>When somebody want to drink, she get from waiter glass, drink and return it back to waiter.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;누군가 술을 마시고 싶을 때, 그녀는 웨이터 글래스에서 나와서 그것을 웨이터에게 돌려 보냅니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3313b632cba0a4333c123f9494413a6ee77d024e" translate="yes" xml:space="preserve">
          <source>When you use a desktop computer, you have slaved (or say, controlled). You have to sit before a screen and look at it. Using the keyboard to type and using the mouse to navigate. And a badly written software can slave you even more. If you replace your desktop with a laptop, then you somewhat inverted control. You can easily take it and move around. So now you can control where you are with your computer, instead of your computer controlling it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;데스크톱 컴퓨터를 사용하면 슬레이브 (또는 제어) 상태입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;화면 앞에 앉아서 봐야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;키보드를 사용하여 입력하고 마우스를 사용하여 탐색합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;잘못 작성된 소프트웨어는 더 많은 노예가 될 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;데스크탑을 랩톱으로 교체하면 제어가 다소 역전됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;쉽게 가지고 다닐 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 컴퓨터를 제어하는 ​​대신 컴퓨터의 현재 위치를 제어 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1a4624ec0be8f6f66ea2c27b7bf9c47a30790d06" translate="yes" xml:space="preserve">
          <source>When you want to change with the Dropbox implementation you have to replace all the lines where &lt;code&gt;new&lt;/code&gt; GoogleDriveService object is constructed and use the DropboxService. Besides when testing the SomeController class the constructor always expects the GoogleDriveService class and the actual methods of this class are triggered.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dropbox 구현으로 변경하려면 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; GoogleDriveService 객체가 생성 된 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 줄을 바꾸고 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DropboxService를 사용해야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SomeController 클래스를 테스트 할 때 생성자는 항상 GoogleDriveService 클래스를 기대하고이 클래스의 실제 메소드가 트리거됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aab7b8a12bd75ba2b9b47803cd1e21b97c48b86c" translate="yes" xml:space="preserve">
          <source>When your requirements change say, instead of GoogleDrive you are asked to use the Dropbox. You only need to write a dropbox implementation for the StorageServiceInterface. You don't have make any changes in the controller as long as Dropbox implementation adheres to the StorageServiceInterface.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;요구 사항이 변경되면 GoogleDrive 대신 Dropbox를 사용해야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;StorageServiceInterface에 대한 드롭 박스 구현 만 작성하면됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dropbox 구현이 StorageServiceInterface를 준수하는 한 컨트롤러를 변경하지 않아도됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="119b801f84f26b70137a5f640c2eaa28d07fdb9f" translate="yes" xml:space="preserve">
          <source>Which problem does it solve?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;어떤 문제가 해결됩니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fdfd96244f49069c6524042296c538a51a6739a9" translate="yes" xml:space="preserve">
          <source>While testing you can create the mock for the StorageServiceInterface with the dummy implementation where all the methods return null(or any predefined value as per your testing requirement).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;테스트하는 동안 모든 메소드가 널 (또는 테스트 요구 사항에 따라 사전 정의 된 값)을 리턴하는 더미 구현으로 StorageServiceInterface에 대한 모의를 작성할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="df530f4bc1a8f211d961ad4e0af76790c047eaa9" translate="yes" xml:space="preserve">
          <source>With the above ideas in mind. We still miss a key part of IoC. In the scenario of IoC, the software/object consumer is a sophisticated framework. That means the code you created is not called by yourself. Now let's explain why this way works better for a web application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위의 아이디어를 염두에두고 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우리는 여전히 IoC의 핵심 부분을 그리워합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC 시나리오에서 소프트웨어 / 개체 소비자는 정교한 프레임 워크입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;즉, 생성 한 코드는 사용자가 직접 호출하지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제이 방법이 웹 애플리케이션에 더 적합한 이유를 설명하겠습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1d600b9ba9832d2d39a632cc07fe364489b02235" translate="yes" xml:space="preserve">
          <source>X is not dependent on Y anymore</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;X는 더 이상 Y에 의존하지 않습니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c521892a4c82d2426166e25844e7b8aaa13cf0a9" translate="yes" xml:space="preserve">
          <source>Your code gets decoupled so you can easily exchange implementations of an interface with alternative implementations</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;코드가 분리되어 대체 구현과 인터페이스 구현을 쉽게 교환 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f9c1a75603cd89b8c4cf5d8e81ab5f55c6d22610" translate="yes" xml:space="preserve">
          <source>Your desktop successfully implements IoC in this case. It accepts a variety type of monitors, while the laptop does not, it needs a specific screen to get fixed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 경우 데스크탑은 IoC를 성공적으로 구현합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다양한 유형의 모니터를 사용할 수 있지만 랩톱은 그렇지 않지만 고정하려면 특정 화면이 필요합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3f5ad33ace051da1ec338535b39ff8115145080a" translate="yes" xml:space="preserve">
          <source>a) &lt;strong&gt;Most of the developers don't know how to use it&lt;/strong&gt;.  For example, I can create a class called &lt;strong&gt;Customer&lt;/strong&gt; and &lt;strong&gt;I can create automatically&lt;/strong&gt; (using the tools of the IDE) an interface called &lt;strong&gt;ICustomer&lt;/strong&gt;. So, it's not rare to find a folder filled with classes and interfaces, no matter if the interfaces will be reused or not. It's called BLOATED. Some people could argue that &quot;may be in the future we could use it&quot;.  :-|</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a) &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;대부분의 개발자들은 그것을 사용하는 방법을 모른다&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . 예를 들어, 나는라는 클래스 만들 수 있습니다 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;고객&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 과 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;내가 자동으로 생성 할 수 있습니다&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 라는 인터페이스 (IDE의 도구 사용) &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ICustomer을&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . 따라서 인터페이스의 재사용 여부에 관계없이 클래스와 인터페이스로 채워진 폴더를 찾는 것은 드문 일이 아닙니다. BLOATED라고합니다. 어떤 사람들은 &quot;나중에 우리가 그것을 사용할 수 있을지도 모른다&quot;고 주장 할 수 있습니다. :-|&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a65833fb178f769cbd2a9bc9021c43263c312e48" translate="yes" xml:space="preserve">
          <source>a. Alleviates a component from being responsible for managing it's dependencies.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ㅏ. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;구성 요소가 종속성 관리를 담당하지 않도록합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63ff9730ec57ffeb05ecc06369fb7667129e3bef" translate="yes" xml:space="preserve">
          <source>a. Critical when doing test-driven development. Without IoC it can be difficult to test, because the components under test are highly coupled to the rest of the system.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ㅏ. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;테스트 중심 개발을 수행 할 때 중요합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC가 없으면 테스트중인 구성 요소가 나머지 시스템과 밀접하게 연결되어 있기 때문에 테스트하기가 어려울 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="44985c1031c23e77f88374731d5a01d00e2f9eb2" translate="yes" xml:space="preserve">
          <source>and she all of time offers to guests drinking.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 그녀는 항상 손님에게 술을 제공합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="54acfe4a62ef1001dcfd19dbc445f3cc5fc3822b" translate="yes" xml:space="preserve">
          <source>b) It has some limitings. For example, let's talk about the case of &lt;strong&gt;Dog&lt;/strong&gt; and &lt;strong&gt;Cat&lt;/strong&gt; and I want to add a new service (functionality) only for dogs.  Let's say that I want to calculate the number of days that I need to train a dog (&lt;strong&gt;&lt;code&gt;trainDays()&lt;/code&gt;&lt;/strong&gt;), for cat it's useless, cats can't be trained (I'm joking).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;b) 한계가있다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dog&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; and &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cat&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 경우에 대해 이야기하고 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;개&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에만 새로운 서비스 (기능)를 추가하고 싶습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;개를 훈련시키는 데 필요한 일 수를 계산하고 싶다고 가정 해 봅시다 ( &lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;trainDays()&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), 고양이는 쓸모가 없으며 고양이를 훈련시킬 수 없습니다 (농담입니다).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74856b92af69493420e4b9bc813673dbcf236ce2" translate="yes" xml:space="preserve">
          <source>b. Critical when developing modular systems. A modular system is a system whose components can be replaced without requiring recompilation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;비. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모듈 식 시스템을 개발할 때 중요합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모듈 식 시스템은 재 컴파일없이 구성 요소를 교체 할 수있는 시스템입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0ea4ef6079611afe337c0be4dc3a73c339faed98" translate="yes" xml:space="preserve">
          <source>b. Provides the ability to swap dependency implementations in different environments.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;비. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 환경에서 종속성 구현을 교환 할 수있는 기능을 제공합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7ea4a797dcd6b8e84153f539da6ccdf8400ac494" translate="yes" xml:space="preserve">
          <source>b.1) If I add &lt;code&gt;trainDays()&lt;/code&gt; to the Service &lt;strong&gt;AnimalService&lt;/strong&gt; then it also works with cats and it's not valid at all.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;b.1) &lt;/font&gt;&lt;/font&gt; &lt;code&gt;trainDays()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 Service &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AnimalService에&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 추가하면 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;고양이와도 작동하며 전혀 유효하지 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="95864b278c6a1d49a8369149e67975a2e4799356" translate="yes" xml:space="preserve">
          <source>b.2) I can add a condition in &lt;code&gt;trainDays()&lt;/code&gt; where it evaluates which class is used. But it will break completely the IoC.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;b.2) &lt;/font&gt;&lt;/font&gt; &lt;code&gt;trainDays()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에 어떤 클래스가 사용되는지 평가 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하는 조건을 추가 할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 그것은 완전히 IoC를 망칠 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e1d91394a944977977450e66a7e9e0fe56940820" translate="yes" xml:space="preserve">
          <source>b.3) I can create a new class of service called &lt;strong&gt;DogService&lt;/strong&gt; just for the new functionality. But, it will increase the maintainability of the code because we will have two classes of service (with similar functionality) for &lt;strong&gt;Dog&lt;/strong&gt; and it's bad.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;b.3) &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;새로운 기능을 위해 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DogService&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 라는 새로운 서비스 클래스를 만들 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dog에&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대해 두 가지 서비스 클래스 (유사한 기능)가 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있고 코드가 나쁘기 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;때문에 코드의 유지 관리 성이 향상됩니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4a4aa0aaf5a477fe08cfc207c3e55741b064206c" translate="yes" xml:space="preserve">
          <source>c. Allows a component be tested through mocking of dependencies.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;씨. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;종속성을 조롱하여 구성 요소를 테스트 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c4ee524cd2357103632cd711413ed416314da6e5" translate="yes" xml:space="preserve">
          <source>c. Critical if there are many cross-cutting concerns which need to addressed, partilarly in an enterprise application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;씨. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;특히 엔터프라이즈 응용 프로그램에서 해결해야 할 여러 가지 교차 문제가있는 경우 중요합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f6db05452a6d0e2a2846aef3ed85a00204a3ced3" translate="yes" xml:space="preserve">
          <source>d. Provides a mechanism for sharing resources throughout an application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;디. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;응용 프로그램 전체에서 리소스를 공유하기위한 메커니즘을 제공합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8c0d44faec42652e00c54838468ee5290bfb4dcf" translate="yes" xml:space="preserve">
          <source>if you find yourself copying an entire method and only changing a small piece of the code, you can consider tackling it with inversion of control</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;전체 메소드를 복사하고 작은 코드 조각 만 변경하면 제어를 거꾸로 처리하는 것이 좋습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="859c89047ad8d601ec08028577b1b350e4c0a8b6" translate="yes" xml:space="preserve">
          <source>meeting members will need glass of water but not piece of cake.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;회의 회원은 물 한 잔이 필요하지만 케이크 조각은 필요하지 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ac7e8efc5ef7c1cb26918e697fd6e7efbfcb80be" translate="yes" xml:space="preserve">
          <source>thereby controlling the flow of user interaction.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 사용자 상호 작용의 흐름을 제어합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b849754aed43b9f2f84d1f0fd912c3a39d7f8783" translate="yes" xml:space="preserve">
          <source>xUnit fixture. Setup and TearDown (what-to-do part) -- xUnit frameworks calls to Setup at the beginning and TearDown at the end (when-to-do part)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;xUnit 고정구. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Setup 및 TearDown (할일 부분)-xUnit 프레임 워크는 처음에 Setup을 호출하고 마지막에 TearDown을 호출합니다 (할일 부분)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
