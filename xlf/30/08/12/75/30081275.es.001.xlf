<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/30081275">
    <body>
      <group id="30081275">
        <trans-unit id="b9b22b4d2ed8c1f23338279dd7313cb0a5ce7348" translate="yes" xml:space="preserve">
          <source>(As a side note, if you &lt;code&gt;print(iter(a))&lt;/code&gt;, you'll notice that &lt;code&gt;range&lt;/code&gt; uses the same &lt;code&gt;listiterator&lt;/code&gt; type as &lt;code&gt;list&lt;/code&gt;. How does that work? A &lt;code&gt;listiterator&lt;/code&gt; doesn't use anything special about &lt;code&gt;list&lt;/code&gt; except for the fact that it provides a C implementation of &lt;code&gt;__getitem__&lt;/code&gt;, so it works fine for &lt;code&gt;range&lt;/code&gt; too.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Como nota al margen, si &lt;/font&gt;&lt;/font&gt; &lt;code&gt;print(iter(a))&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , notar&amp;aacute; que el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; usa el mismo &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipo de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;listiterator&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;list&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &amp;iquest;C&amp;oacute;mo funciona? Un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;listiterator&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no usa nada especial sobre &lt;/font&gt;&lt;/font&gt; &lt;code&gt;list&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; excepto por el hecho de que proporciona una implementaci&amp;oacute;n en C de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__getitem__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , por lo que tambi&amp;eacute;n funciona bien para el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cab6b967b51f57a6e23db3d5719ae072b7a200b8" translate="yes" xml:space="preserve">
          <source>(in this case, there is no optimization in &lt;code&gt;range&lt;/code&gt;, so if python receives unexpected Decimal, python will compare all numbers)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(en este caso, no hay optimizaci&amp;oacute;n en el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , por lo que si Python recibe un decimal inesperado, Python comparar&amp;aacute; todos los n&amp;uacute;meros)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a1c1856b0e6df956f9239d9be0cfb56946144646" translate="yes" xml:space="preserve">
          <source>* &lt;em&gt;Near&lt;/em&gt; constant time because Python integers are unbounded and so math operations also grow in time as N grows, making this a O(log N) operation. Since it&amp;rsquo;s all executed in optimised C code and Python stores integer values in 30-bit chunks, you&amp;rsquo;d run out of memory before you saw any performance impact due to the size of the integers involved here.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;* &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tiempo casi&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; constante porque los enteros de Python son ilimitados y, por lo tanto, las operaciones matem&amp;aacute;ticas tambi&amp;eacute;n crecen en el tiempo a medida que N crece, lo que hace que sea una operaci&amp;oacute;n O (log N). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dado que todo se ejecuta en c&amp;oacute;digo C optimizado y Python almacena valores enteros en fragmentos de 30 bits, se quedar&amp;aacute; sin memoria antes de ver alg&amp;uacute;n impacto en el rendimiento debido al tama&amp;ntilde;o de los enteros involucrados aqu&amp;iacute;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb89a15dd0f7ba4f8c7f262b3dfc34fcd8cb68c4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/sanan-fataliyev/rangesharp&quot;&gt;Here is&lt;/a&gt; implementation in &lt;code&gt;C#&lt;/code&gt;. You can see how &lt;code&gt;Contains&lt;/code&gt; works in O(1) time.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/sanan-fataliyev/rangesharp&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; est&amp;aacute; la&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; implementaci&amp;oacute;n en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;C#&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede ver c&amp;oacute;mo &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funciona &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Contains&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en el tiempo O (1).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2b26edc99bdb3100bb8ac0704029fc12cc9d2e30" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/a/30081318/2437514&quot;&gt;Martijn Pieters' answer&lt;/a&gt; was chosen for its completeness, but also see &lt;a href=&quot;https://stackoverflow.com/a/30081894/2437514&quot;&gt;abarnert's first answer&lt;/a&gt; for a good discussion of what it means for &lt;code&gt;range&lt;/code&gt; to be a full-fledged &lt;em&gt;sequence&lt;/em&gt; in Python 3, and some information/warning regarding potential inconsistency for &lt;code&gt;__contains__&lt;/code&gt; function optimization across Python implementations. &lt;a href=&quot;https://stackoverflow.com/a/30088140/2437514&quot;&gt;abarnert's other answer&lt;/a&gt; goes into some more detail and provides links for those interested in the history behind the optimization in Python 3 (and lack of optimization of &lt;code&gt;xrange&lt;/code&gt; in Python 2). Answers &lt;a href=&quot;https://stackoverflow.com/a/30081467/2437514&quot;&gt;by poke&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/a/30081470/2437514&quot;&gt;by wim&lt;/a&gt; provide the relevant C source code and explanations for those who are interested.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/30081318/2437514&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La respuesta de Martijn Pieters&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; fue elegida por su integridad, pero tambi&amp;eacute;n puede ver &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/30081894/2437514&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la primera respuesta de abarnert&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para una buena discusi&amp;oacute;n de lo que significa que el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sea ​​una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;secuencia&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; completa &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;en Python 3, y alguna informaci&amp;oacute;n / advertencia con respecto a la inconsistencia potencial para la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;optimizaci&amp;oacute;n de la funci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__contains__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; trav&amp;eacute;s de Implementaciones de Python. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/30088140/2437514&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La otra respuesta de abarnert&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; entra en m&amp;aacute;s detalles y proporciona enlaces para aquellos interesados ​​en la historia detr&amp;aacute;s de la optimizaci&amp;oacute;n en Python 3 (y la falta de optimizaci&amp;oacute;n de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;xrange&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en Python 2). Las respuestas &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/30081467/2437514&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;por poke&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/30081470/2437514&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;por wim&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; proporcionan el c&amp;oacute;digo fuente C relevante y explicaciones para aquellos que est&amp;eacute;n interesados.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0f78814a315ab864b1b80e081629a4f69c3fe24b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(994 - 4) % 2 == 0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;(994 - 4) % 2 == 0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7e7d2b3229c821f60be7a3a4b2e4681f2e40cf23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;4 &amp;lt;= 994 &amp;lt; 1000&lt;/code&gt;, and</source>
          <target state="translated">&lt;code&gt;4 &amp;lt;= 994 &amp;lt; 1000&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e78ad89e688341f68323f2517f6fbbfa13ac2b2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Decimal(sys.maxsize) in range(sys.maxsize)&lt;/code&gt;&lt;em&gt;is pretty slow&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;Decimal(sys.maxsize) in range(sys.maxsize)&lt;/code&gt; &lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;es bastante lento&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7b5d853fcfb0167ad6daeca7539aa545c17c9305" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sys.maxsize in range(sys.maxsize)&lt;/code&gt;&lt;em&gt;is pretty fast&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;sys.maxsize in range(sys.maxsize)&lt;/code&gt; &lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;es bastante r&amp;aacute;pido&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b2c3b48469c0535dee2f2d0cd0188032160e71fe" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;* In fact, you even get iteration for free with indexing alone, but &lt;a href=&quot;https://docs.python.org/2/whatsnew/2.3.html#optimizations&quot;&gt;in 2.3&lt;/a&gt; &lt;code&gt;xrange&lt;/code&gt; objects got a custom iterator.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;* De hecho, incluso obtienes iteraciones gratis solo con indexaci&amp;oacute;n, pero &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/2/whatsnew/2.3.html#optimizations&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;en 2.3 &lt;/font&gt;&lt;/font&gt;&lt;/a&gt; &lt;code&gt;xrange&lt;/code&gt; los&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; objetos tienen un iterador personalizado.&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="cdce64bc8e9dd1bea76793d3f90013d16a5f4d74" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;** The first version actually reimplemented it, and got the details wrong&amp;mdash;e.g., it would give you &lt;code&gt;MyIntSubclass(2) in range(5) == False&lt;/code&gt;. But Daniel Stutzbach's updated version of the patch restored most of the previous code, including the fallback to the generic, slow &lt;code&gt;_PySequence_IterSearch&lt;/code&gt; that pre-3.2 &lt;code&gt;range.__contains__&lt;/code&gt; was implicitly using when the optimization doesn't apply.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;** La primera versi&amp;oacute;n realmente lo reimplement&amp;oacute; y obtuvo los detalles incorrectos, por ejemplo, le dar&amp;iacute;a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyIntSubclass(2) in range(5) == False&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero la versi&amp;oacute;n actualizada del parche de Daniel Stutzbach restaur&amp;oacute; la mayor parte del c&amp;oacute;digo anterior, incluido el retroceso al &lt;/font&gt;&lt;/font&gt; &lt;code&gt;_PySequence_IterSearch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; gen&amp;eacute;rico y lento &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;que el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range.__contains__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; anterior a 3.2 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.__ contiene__&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se usaba impl&amp;iacute;citamente cuando la optimizaci&amp;oacute;n no se aplica.&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="2638dcd8f48aa633a6b79a0374de056acacfe325" translate="yes" xml:space="preserve">
          <source>As a final note - look at the &lt;code&gt;range_contains&lt;/code&gt; function at the bottom of the code snippet.  If the exact type check fails then we don't use the clever algorithm described, instead falling back to a dumb iteration search of the range using &lt;code&gt;_PySequence_IterSearch&lt;/code&gt;!  You can check this behaviour in the interpreter (I'm using v3.5.0 here):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como nota final, observe la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range_contains&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en la parte inferior del fragmento de c&amp;oacute;digo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si la verificaci&amp;oacute;n de tipo exacta falla, entonces no usamos el algoritmo inteligente descrito, sino que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;_PySequence_IterSearch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a una b&amp;uacute;squeda de iteraci&amp;oacute;n tonta del rango usando &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;_PySequence_IterSearch&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede verificar este comportamiento en el int&amp;eacute;rprete (estoy usando v3.5.0 aqu&amp;iacute;):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0b23f97443a02aceb39ac7c77d2d216d2da39b36" translate="yes" xml:space="preserve">
          <source>As you can see,  a range object is an object that remembers its range and can be used many times (even while iterating over it), not just a one-time generator.</source>
          <target state="translated">Como puede ver,un objeto de alcance es un objeto que recuerda su alcance y puede ser utilizado muchas veces (incluso mientras itera sobre él),no sólo un generador de una sola vez.</target>
        </trans-unit>
        <trans-unit id="3a95600cd93ae1ccafd3b04e7616d2c565419b71" translate="yes" xml:space="preserve">
          <source>But it &lt;strong&gt;also&lt;/strong&gt; implements the &lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#object.__contains__&quot;&gt;&lt;code&gt;__contains__&lt;/code&gt;&lt;/a&gt; interface which is actually what gets called when an object appears on the right hand side of the &lt;code&gt;in&lt;/code&gt; operator. The &lt;code&gt;__contains__()&lt;/code&gt; method returns a &lt;code&gt;bool&lt;/code&gt; of whether or not the item on the left-hand-side of the &lt;code&gt;in&lt;/code&gt; is in the object. Since &lt;code&gt;range&lt;/code&gt; objects know their bounds and stride, this is very easy to implement in O(1).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tambi&amp;eacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; implementa la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;interfaz &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#object.__contains__&quot;&gt; &lt;code&gt;__contains__&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que en realidad es lo que se llama cuando aparece un objeto en el lado derecho del &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;operador &lt;/font&gt;&lt;/font&gt; &lt;code&gt;in&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__contains__()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; devuelve un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;bool&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de si el elemento en el lado izquierdo de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;in&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; est&amp;aacute; en el objeto. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dado que los &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objetos de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; conocen sus l&amp;iacute;mites y zancadas, esto es muy f&amp;aacute;cil de implementar en O (1).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="354bb960779420931884b8d4c1cea2a6f1c3df0d" translate="yes" xml:space="preserve">
          <source>But there doesn't seem to be anything in the language that &lt;em&gt;guarantees&lt;/em&gt; this will happen. As Ashwini Chaudhari points out, if you give it a non-integral value, instead of converting to integer and doing the mathematical test, it will fall back to iterating all the values and comparing them one by one. And just because CPython 3.2+ and PyPy 3.x versions happen to contain this optimization, and it's an obvious good idea and easy to do, there's no reason that IronPython or NewKickAssPython 3.x couldn't leave it out. (And in fact CPython 3.0-3.1 &lt;em&gt;didn't&lt;/em&gt; include it.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero no parece haber nada en el lenguaje que &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;garantice&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esto suceda. Como se&amp;ntilde;ala Ashwini Chaudhari, si le da un valor no integral, en lugar de convertirlo a entero y hacer la prueba matem&amp;aacute;tica, recurrir&amp;aacute; a iterar todos los valores y compararlos uno por uno. Y solo porque las versiones CPython 3.2+ y PyPy 3.x contienen esta optimizaci&amp;oacute;n, y es una buena idea obvia y f&amp;aacute;cil de hacer, no hay raz&amp;oacute;n para que IronPython o NewKickAssPython 3.x no puedan dejarla de lado. (Y, de hecho, CPython 3.0-3.1 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no lo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; incluy&amp;oacute;).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fea61079d1346001a34d76f38bb84b60b59657b1" translate="yes" xml:space="preserve">
          <source>By the way, your integer is not such big, consider &lt;code&gt;sys.maxsize&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por cierto, su n&amp;uacute;mero entero no es tan grande, considere &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sys.maxsize&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="70848b1d55a2bbb145ad97f3b3d32690f125d149" translate="yes" xml:space="preserve">
          <source>Check that the number is between &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt;, and</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Verifique que el n&amp;uacute;mero est&amp;eacute; entre &lt;/font&gt;&lt;/font&gt; &lt;code&gt;start&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;stop&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8155d46fff6fff8ac0f63ce2238162827cbc13eb" translate="yes" xml:space="preserve">
          <source>Check that the stride value doesn't &quot;step over&quot; our number.</source>
          <target state="translated">Comprueba que el valor de la zancada no &quot;pase por encima&quot; de nuestro número.</target>
        </trans-unit>
        <trans-unit id="62c382295c8d2ae321b85e68904021c8f8cf0476" translate="yes" xml:space="preserve">
          <source>Check whether the number is between the start and stop.</source>
          <target state="translated">Comprueba si el número está entre el inicio y el final.</target>
        </trans-unit>
        <trans-unit id="4e72e1e36d759a8297f5b95f55c23fd2b3d305df" translate="yes" xml:space="preserve">
          <source>Check whether the step precision value doesn't go over our number.</source>
          <target state="translated">Comprueba si el valor de la precisión de los pasos no sobrepasa nuestro número.</target>
        </trans-unit>
        <trans-unit id="8270aff0f6a02aa25cdf9d7ca6abbd5b839d820f" translate="yes" xml:space="preserve">
          <source>Due to optimization, it is very easy to compare given integers just with min and max range.</source>
          <target state="translated">Debido a la optimización,es muy fácil comparar los números enteros dados sólo con el rango mínimo y máximo.</target>
        </trans-unit>
        <trans-unit id="5c995c07b90a86b97ac69587f4802a9d042ff6c0" translate="yes" xml:space="preserve">
          <source>First, as Ashwini Chaudhary discovered, &lt;a href=&quot;http://bugs.python.org/issue1766304&quot;&gt;issue 1766304&lt;/a&gt; was opened explicitly to optimize &lt;code&gt;[x]range.__contains__&lt;/code&gt;. A patch for this was &lt;a href=&quot;https://hg.python.org/cpython/rev/d599a3f2e72d/&quot;&gt;accepted and checked in for 3.2&lt;/a&gt;, but not backported to 2.7 because &quot;xrange has behaved like this for such a long time that I don't see what it buys us to commit the patch this late.&quot; (2.7 was nearly out at that point.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Primero, como descubri&amp;oacute; Ashwini Chaudhary, el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://bugs.python.org/issue1766304&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;n&amp;uacute;mero 1766304&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se abri&amp;oacute; expl&amp;iacute;citamente para optimizar el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;[x]range.__contains__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Se &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://hg.python.org/cpython/rev/d599a3f2e72d/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;acept&amp;oacute;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; un parche para esto &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;y se registr&amp;oacute; en 3.2&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , pero no se realiz&amp;oacute; un backport a 2.7 porque &quot;xrange se ha comportado as&amp;iacute; durante tanto tiempo que no veo lo que nos compra para enviar el parche tan tarde&quot;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(2.7 estaba casi fuera en ese punto).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d699f1d34979fbbb5a50dc1c8940119ff539063b" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;994&lt;/code&gt; is in &lt;code&gt;range(4, 1000, 2)&lt;/code&gt; because:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;994&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; est&amp;aacute; dentro del &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range(4, 1000, 2)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; porque:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="49c74cdf9c17b14fec7769c164befbfe07a9f1d7" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#range&quot;&gt;&lt;code&gt;range()&lt;/code&gt; object documentation&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De la &lt;/font&gt;&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#range&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;documentaci&amp;oacute;n del objeto &lt;/font&gt;&lt;/a&gt;&lt;/font&gt; &lt;code&gt;range()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d523d2385848293ca6eb84c04316d4acdb288887" translate="yes" xml:space="preserve">
          <source>Furthermore: it seems that no matter how many zeroes I add on, the calculation more or less takes the same amount of time (basically instantaneous).</source>
          <target state="translated">Además:parece que no importa cuántos ceros añada,el cálculo toma más o menos la misma cantidad de tiempo (básicamente instantáneo).</target>
        </trans-unit>
        <trans-unit id="ec8802e5d713691e4575c0beaf2b9286edfbd679" translate="yes" xml:space="preserve">
          <source>I also simplified the &lt;code&gt;__contains__&lt;/code&gt; implementation to only focus on integer tests; if you give a real &lt;code&gt;range()&lt;/code&gt; object a non-integer value (including subclasses of &lt;code&gt;int&lt;/code&gt;), a slow scan is initiated to see if there is a match, just as if you use a containment test against a list of all the contained values. This was done to continue to support other numeric types that just happen to support equality testing with integers but are not expected to support integer arithmetic as well. See the original &lt;a href=&quot;http://bugs.python.org/issue1766304&quot;&gt;Python issue&lt;/a&gt; that implemented the containment test.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n simplifiqu&amp;eacute; la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;implementaci&amp;oacute;n de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__contains__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para centrarme solo en pruebas de enteros; si le da a un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; real &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;un valor no entero (incluidas las subclases de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), se inicia un escaneo lento para ver si hay una coincidencia, al igual que si usa una prueba de contenci&amp;oacute;n contra una lista de todos los valores contenidos . Esto se hizo para continuar admitiendo otros tipos num&amp;eacute;ricos que simplemente admiten pruebas de igualdad con enteros, pero no se espera que tambi&amp;eacute;n admitan la aritm&amp;eacute;tica de enteros. Vea el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://bugs.python.org/issue1766304&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;problema&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; original de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Python&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que implement&amp;oacute; la prueba de contenci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ac23594d95b84e12f3bb123824565d85f7fb54e0" translate="yes" xml:space="preserve">
          <source>I have also tried things like this, but the calculation is still almost instant:</source>
          <target state="translated">También he intentado cosas como esta,pero el cálculo es todavía casi instantáneo:</target>
        </trans-unit>
        <trans-unit id="5d248d1254edc5b3006b7fdce45c93f46ab3c932" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;range&lt;/code&gt; actually were a generator, like &lt;code&gt;my_crappy_range&lt;/code&gt;, then it wouldn't make sense to test &lt;code&gt;__contains__&lt;/code&gt; this way, or at least the way it makes sense wouldn't be obvious. If you'd already iterated the first 3 values, is &lt;code&gt;1&lt;/code&gt; still &lt;code&gt;in&lt;/code&gt; the generator? Should testing for &lt;code&gt;1&lt;/code&gt; cause it to iterate and consume all the values up to &lt;code&gt;1&lt;/code&gt; (or up to the first value &lt;code&gt;&amp;gt;= 1&lt;/code&gt;)?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range&lt;/code&gt; fuera&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; realmente un generador, como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;my_crappy_range&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , entonces no tendr&amp;iacute;a sentido probar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__contains__&lt;/code&gt; de&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; esta manera, o al menos la forma en que tiene sentido no ser&amp;iacute;a obvio. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si ya ha iterado los primeros 3 valores, &amp;iquest;est&amp;aacute; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;todav&amp;iacute;a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;in&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; el generador? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Deben las pruebas para &lt;/font&gt;&lt;/font&gt; &lt;code&gt;1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; hacer que itere y consuma todos los valores hasta &lt;/font&gt;&lt;/font&gt; &lt;code&gt;1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (o hasta el primer valor &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;gt;= 1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e8d8f8622da9a550c98e906b936d8f8b85cf5bed" translate="yes" xml:space="preserve">
          <source>If I try to implement my own range function, the result is not so nice!!</source>
          <target state="translated">¡Si trato de implementar mi propia función de alcance,el resultado no es tan bueno!</target>
        </trans-unit>
        <trans-unit id="3dac25503e03a70a60169ed951c48d820421c349" translate="yes" xml:space="preserve">
          <source>If it were a generator, iterating it once would exhaust it:</source>
          <target state="translated">Si fuera un generador,iterarlo una vez lo agotaría:</target>
        </trans-unit>
        <trans-unit id="83c538f2f822e7a43125ff80528cabb67fea4f23" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s not an &lt;code&gt;int&lt;/code&gt; object, it falls back to iterating until it finds the value (or not).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si no es un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , vuelve a iterar hasta que encuentra el valor (o no).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="44076ad95c48b5e9c2dcd9b88d39a5e905cd2537" translate="yes" xml:space="preserve">
          <source>If you're wondering &lt;em&gt;why&lt;/em&gt; this optimization was added to &lt;code&gt;range.__contains__&lt;/code&gt;, and why it &lt;em&gt;wasn't&lt;/em&gt; added to &lt;code&gt;xrange.__contains__&lt;/code&gt; in 2.7:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si se pregunta &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;por qu&amp;eacute;&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; esta optimizaci&amp;oacute;n se agreg&amp;oacute; al &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range.__contains__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y por qu&amp;eacute; no &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; agreg&amp;oacute; a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;xrange.__contains__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en 2.7:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b4cf964cb90fd408ff753f04baee72150b63cb07" translate="yes" xml:space="preserve">
          <source>In CPython, &lt;code&gt;range(...).__contains__&lt;/code&gt; (a method wrapper) will eventually delegate to a simple calculation which checks if the value can possibly be in the range.  The reason for the speed here is we're using &lt;strong&gt;mathematical reasoning about the bounds, rather than a direct iteration of the range object&lt;/strong&gt;.  To explain the logic used:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En CPython, el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range(...).__contains__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (un contenedor de m&amp;eacute;todos) eventualmente delegar&amp;aacute; en un c&amp;aacute;lculo simple que verifica si el valor puede estar en el rango. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La raz&amp;oacute;n de la velocidad aqu&amp;iacute; es que estamos usando un &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;razonamiento matem&amp;aacute;tico sobre los l&amp;iacute;mites, en lugar de una iteraci&amp;oacute;n directa del objeto de rango&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para explicar la l&amp;oacute;gica utilizada:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b00a3bb8d9a2f646611fb26f48964b92d0fd321f" translate="yes" xml:space="preserve">
          <source>It is my understanding that the &lt;code&gt;range()&lt;/code&gt; function, which is actually &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#typesseq-range&quot;&gt;an object type in Python 3&lt;/a&gt;, generates its contents on the fly, similar to a generator.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tengo entendido que la funci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que en realidad es &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#typesseq-range&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;un tipo de objeto en Python 3&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , genera su contenido sobre la marcha, similar a un generador.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="65d1cc92eba4e60e365685591bc3fc1f75339cb1" translate="yes" xml:space="preserve">
          <source>It's all about a &lt;strong&gt;lazy approach&lt;/strong&gt; to the evaluation and some &lt;strong&gt;extra optimization&lt;/strong&gt; of &lt;code&gt;range&lt;/code&gt;.
Values in ranges don't need to be computed until real use, or even further due to extra optimization.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Se trata de un &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;enfoque perezoso&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para la evaluaci&amp;oacute;n y &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;una optimizaci&amp;oacute;n adicional&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; del &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los valores en rangos no necesitan ser calculados hasta su uso real, o incluso m&amp;aacute;s debido a una optimizaci&amp;oacute;n adicional.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="150c915ae13a66a36795a4e06f9076b11d1d1c7f" translate="yes" xml:space="preserve">
          <source>Meanwhile:</source>
          <target state="translated">Meanwhile:</target>
        </trans-unit>
        <trans-unit id="10df5e461f8cfa6a8e166c6f79ac02779a67f782" translate="yes" xml:space="preserve">
          <source>Now, there's nothing that says that &lt;code&gt;Sequence.__contains__&lt;/code&gt; has to be constant time&amp;mdash;in fact, for obvious examples of sequences like &lt;code&gt;list&lt;/code&gt;, it isn't. But there's nothing that says it &lt;em&gt;can't&lt;/em&gt; be. And it's easier to implement &lt;code&gt;range.__contains__&lt;/code&gt; to just check it mathematically (&lt;code&gt;(val - start) % step&lt;/code&gt;, but with some extra complexity to deal with negative steps) than to actually generate and test all the values, so why &lt;em&gt;shouldn't&lt;/em&gt; it do it the better way?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora, no hay nada que diga que la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sequence.__contains__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene que ser un tiempo constante; de ​​hecho, para ejemplos obvios de secuencias como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;list&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , no lo es. Pero no hay nada que diga que &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no puede&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ser. Y es m&amp;aacute;s f&amp;aacute;cil implementar el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range.__contains__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; simplemente verificarlo matem&amp;aacute;ticamente ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(val - start) % step&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , pero con cierta complejidad adicional para lidiar con los pasos negativos) que generar y probar todos los valores, entonces &amp;iquest;por qu&amp;eacute; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no deber&amp;iacute;a&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; hacerlo? es la mejor manera?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="03b43e73dc591bf9be75b74a405717952ad97038" translate="yes" xml:space="preserve">
          <source>Originally, &lt;code&gt;xrange&lt;/code&gt; was a not-quite-sequence object. As &lt;a href=&quot;https://docs.python.org/3.1/library/stdtypes.html#range-type&quot;&gt;the 3.1 docs&lt;/a&gt; say:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Originalmente, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;xrange&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; era un objeto que no era de secuencia completa. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dicen los &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/3.1/library/stdtypes.html#range-type&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;documentos 3.1&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="98a65da23a2131c6268042f227c779a2d7368022" translate="yes" xml:space="preserve">
          <source>Range objects have very little behavior: they only support indexing, iteration, and the &lt;code&gt;len&lt;/code&gt; function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los objetos de rango tienen muy poco comportamiento: solo admiten indexaci&amp;oacute;n, iteraci&amp;oacute;n y la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;len&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2c1e3b7d0da32713ff7d538fd2353d1091656f5d" translate="yes" xml:space="preserve">
          <source>So at a minimum, your &lt;code&gt;range()&lt;/code&gt; object would do:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, como m&amp;iacute;nimo, su &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; har&amp;iacute;a:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9a50a44cb7780d4b5e344370f2e95352646788c4" translate="yes" xml:space="preserve">
          <source>So for &lt;code&gt;PyLong&lt;/code&gt; objects (which is &lt;code&gt;int&lt;/code&gt; in Python 3), it will use the &lt;code&gt;range_contains_long&lt;/code&gt; function to determine the result. And that function essentially checks if &lt;code&gt;ob&lt;/code&gt; is in the specified range (although it looks a bit more complex in C).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, para los &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objetos &lt;/font&gt;&lt;/font&gt; &lt;code&gt;PyLong&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (que es &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en Python 3), usar&amp;aacute; la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range_contains_long&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para determinar el resultado. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y esa funci&amp;oacute;n esencialmente comprueba si &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ob&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; est&amp;aacute; en el rango especificado (aunque parece un poco m&amp;aacute;s complejo en C).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="13ccd07fe761deb01119765e0985bae94aa6d280" translate="yes" xml:space="preserve">
          <source>So for explaining the logic here:</source>
          <target state="translated">Así que para explicar la lógica aquí:</target>
        </trans-unit>
        <trans-unit id="a24a5619d711b68a02ae65110bc362ca47fe6316" translate="yes" xml:space="preserve">
          <source>So, there were two chances to get this optimization backported to 2.7, but they were both rejected.</source>
          <target state="translated">Por lo tanto,había dos oportunidades de conseguir esta optimización de vuelta a 2,7,pero ambas fueron rechazadas.</target>
        </trans-unit>
        <trans-unit id="5ff57f4185e884322f43c9c59da60f12f41285ea" translate="yes" xml:space="preserve">
          <source>TL;DR</source>
          <target state="translated">TL;DR</target>
        </trans-unit>
        <trans-unit id="ee61df3565aedbde8009e0df74d43abf78f5d079" translate="yes" xml:space="preserve">
          <source>Take an example, &lt;strong&gt;997 is in range(4, 1000, 3)&lt;/strong&gt; because:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tomemos un ejemplo, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;997 est&amp;aacute; en el rango (4, 1000, 3)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; porque:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="544102d6025f36d496d237ff491d7be66f116af3" translate="yes" xml:space="preserve">
          <source>The &quot;meat&quot; of the idea is mentioned in &lt;a href=&quot;https://github.com/python/cpython/blob/9a5bacfecdf6798e960d1447af11d4cfa8d4dc32/Objects/rangeobject.c#L402&quot;&gt;the line&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La &quot;carne&quot; de la idea se menciona en &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/python/cpython/blob/9a5bacfecdf6798e960d1447af11d4cfa8d4dc32/Objects/rangeobject.c#L402&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la l&amp;iacute;nea&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a38ca8b243e9828bd509f775fcac51aeee05f61" translate="yes" xml:space="preserve">
          <source>The Python 3 &lt;code&gt;range()&lt;/code&gt; object doesn't produce numbers immediately; it is a &lt;a href=&quot;https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence&quot;&gt;smart sequence object&lt;/a&gt; that produces numbers &lt;em&gt;on demand&lt;/em&gt;. All it contains is your start, stop and step values, then as you iterate over the object the next integer is calculated each iteration.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Python 3 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no produce n&amp;uacute;meros de inmediato; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es un &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto de secuencia inteligente&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que produce n&amp;uacute;meros &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a pedido&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Todo lo que contiene son sus valores de inicio, parada y paso, luego, a medida que itera sobre el objeto, se calcula el siguiente entero en cada iteraci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc41fb23825acbcea5a60f6310fc110729b01018" translate="yes" xml:space="preserve">
          <source>The advantage of the &lt;code&gt;range&lt;/code&gt; type over a regular &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; is that a range object will always take the same (small) amount of memory, no matter the size of the range it represents (as it only stores the &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;stop&lt;/code&gt; and &lt;code&gt;step&lt;/code&gt; values, calculating individual items and subranges as needed).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La ventaja del &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipo de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sobre una &lt;/font&gt;&lt;/font&gt; &lt;code&gt;list&lt;/code&gt; a&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; normal &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es que un objeto de rango siempre tomar&amp;aacute; la misma cantidad (peque&amp;ntilde;a) de memoria, sin importar el tama&amp;ntilde;o del rango que representa (ya que solo almacena los &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valores de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;start&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;stop&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;step&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , calcular elementos individuales y subranges seg&amp;uacute;n sea necesario).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c152be4c00832582d0bc6b80de516f2d15bc691e" translate="yes" xml:space="preserve">
          <source>The difference between a &lt;code&gt;range&lt;/code&gt; and a &lt;code&gt;list&lt;/code&gt; is that a &lt;code&gt;range&lt;/code&gt; is a &lt;em&gt;lazy&lt;/em&gt; or &lt;em&gt;dynamic&lt;/em&gt; sequence; it doesn't remember all of its values, it just remembers its &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;stop&lt;/code&gt;, and &lt;code&gt;step&lt;/code&gt;, and creates the values on demand on &lt;code&gt;__getitem__&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La diferencia entre un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y una &lt;/font&gt;&lt;/font&gt; &lt;code&gt;list&lt;/code&gt; a&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es que un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;secuencia &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;perezosa&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;din&amp;aacute;mica&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ; no recuerda todos sus valores, solo recuerda su &lt;/font&gt;&lt;/font&gt; &lt;code&gt;start&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;stop&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;step&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y crea los valores a pedido en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__getitem__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="61b656612cb8874b5f17c7652229d53f5e4359c1" translate="yes" xml:space="preserve">
          <source>The full C code is included below, which is a bit more verbose because of memory management and reference counting details, but the basic idea is there:</source>
          <target state="translated">A continuación se incluye el código C completo,que es un poco más verborreico debido a la gestión de la memoria y a los detalles del recuento de referencias,pero la idea básica está ahí:</target>
        </trans-unit>
        <trans-unit id="08d0cbcfed5f11130b318c07b960395b413651cb" translate="yes" xml:space="preserve">
          <source>The fundamental misunderstanding here is in thinking that &lt;code&gt;range&lt;/code&gt; is a generator. It's not. In fact, it's not any kind of iterator.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El malentendido fundamental aqu&amp;iacute; es pensar que el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un generador. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No es. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De hecho, no es ning&amp;uacute;n tipo de iterador.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83617cb12472e960e469717ee64374c98d64bd56" translate="yes" xml:space="preserve">
          <source>The object also implements the &lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#object.__contains__&quot;&gt;&lt;code&gt;object.__contains__&lt;/code&gt; hook&lt;/a&gt;, and &lt;em&gt;calculates&lt;/em&gt; if your number is part of its range. Calculating is a (near) constant time operation &lt;sup&gt;*&lt;/sup&gt;. There is never a need to scan through all possible integers in the range.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El objeto tambi&amp;eacute;n implementa el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#object.__contains__&quot;&gt; &lt;code&gt;object.__contains__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; gancho&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;calcula&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; si su n&amp;uacute;mero es parte de su rango. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El c&amp;aacute;lculo es una operaci&amp;oacute;n (casi) de tiempo constante &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;*&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Nunca es necesario escanear todos los enteros posibles en el rango.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="31348d04ed7bbac1c6a4506714c4344fd7bc3614" translate="yes" xml:space="preserve">
          <source>The object returned by &lt;code&gt;range()&lt;/code&gt; is actually a &lt;code&gt;range&lt;/code&gt; object. This object implements the iterator interface so you can iterate over its values sequentially, just like a generator, list, or tuple.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El objeto devuelto por &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es en realidad un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Este objeto implementa la interfaz del iterador para que pueda iterar sobre sus valores de forma secuencial, al igual que un generador, una lista o una tupla.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bbb21a7ab186d01fa518f7b44cbfb3115da14f42" translate="yes" xml:space="preserve">
          <source>The other answers explained it well already, but I'd like to offer another experiment illustrating the nature of range objects:</source>
          <target state="translated">Las otras respuestas ya lo explicaron bien,pero me gustaría ofrecer otro experimento que ilustre la naturaleza de los objetos del rango:</target>
        </trans-unit>
        <trans-unit id="1071a62c895e03edadab6693bdef7a16b251828f" translate="yes" xml:space="preserve">
          <source>The reason that &lt;strong&gt;range()&lt;/strong&gt; function is so fast in Python3 is that here we use mathematical reasoning for the bounds, rather than a direct iteration of the range object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La raz&amp;oacute;n por la que la funci&amp;oacute;n &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;range ()&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es tan r&amp;aacute;pida en Python3 es que aqu&amp;iacute; usamos el razonamiento matem&amp;aacute;tico para los l&amp;iacute;mites, en lugar de una iteraci&amp;oacute;n directa del objeto range.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bcca856511ab8783293c769078d3b9cb270779d2" translate="yes" xml:space="preserve">
          <source>The whole logic could be translated to pseudo-Python like this:</source>
          <target state="translated">Toda la lógica podría ser traducida a pseudo-Pitón de esta manera:</target>
        </trans-unit>
        <trans-unit id="9ee73e6442aa9fb56321451eef9d8353f28db34c" translate="yes" xml:space="preserve">
          <source>Then, as part of implementing the &lt;a href=&quot;https://www.python.org/dev/peps/pep-3119/&quot;&gt;Abstract Base Classes&lt;/a&gt; PEP, it was important to figure out which builtin types should be marked as implementing which ABCs, and &lt;code&gt;xrange&lt;/code&gt;/&lt;code&gt;range&lt;/code&gt; claimed to implement &lt;code&gt;collections.Sequence&lt;/code&gt;, even though it still only handled the same &quot;very little behavior&quot;. Nobody noticed that problem until &lt;a href=&quot;http://bugs.python.org/issue9213&quot;&gt;issue 9213&lt;/a&gt;. The patch for that issue not only added &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; to 3.2's &lt;code&gt;range&lt;/code&gt;, it also re-worked the optimized &lt;code&gt;__contains__&lt;/code&gt; (which shares the same math with &lt;code&gt;index&lt;/code&gt;, and is directly used by &lt;code&gt;count&lt;/code&gt;).&lt;sup&gt;**&lt;/sup&gt;&lt;a href=&quot;https://github.com/python/cpython/commit/8ee11f7e599b2c5b4de39047bf11bde2246e968f&quot;&gt;This change&lt;/a&gt; went in for 3.2 as well, and was not backported to 2.x, because &quot;it's a bugfix that adds new methods&quot;. (At this point, 2.7 was already past rc status.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Luego, como parte de la implementaci&amp;oacute;n del &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PEP de las &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-3119/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;clases base abstractas&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , era importante determinar qu&amp;eacute; tipos incorporados deber&amp;iacute;an marcarse como implementando qu&amp;eacute; ABC y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;xrange&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; / &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; afirmaban implementar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;collections.Sequence&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Secuencia&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , a pesar de que todav&amp;iacute;a solo manejaba el mismo &quot;muy poco comportamiento &quot;. Nadie not&amp;oacute; ese problema hasta el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://bugs.python.org/issue9213&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;n&amp;uacute;mero 9213&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . El parche para ese problema no solo agreg&amp;oacute; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;index&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;count&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; al &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de 3.2 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, sino que tambi&amp;eacute;n reestructur&amp;oacute; las &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__contains__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; optimizadas &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(que comparte la misma matem&amp;aacute;tica con el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;index&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y se utiliza directamente por &lt;/font&gt;&lt;/font&gt; &lt;code&gt;count&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;** &lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;a href=&quot;https://github.com/python/cpython/commit/8ee11f7e599b2c5b4de39047bf11bde2246e968f&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Este cambio&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;entr&amp;oacute; para 3.2 tambi&amp;eacute;n, y no fue retrocedido a 2.x, porque &quot;es una correcci&amp;oacute;n de errores que agrega nuevos m&amp;eacute;todos&quot;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(En este punto, 2.7 ya hab&amp;iacute;a pasado el estado de RC).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc653234824089c74310215b579f597e087ca140" translate="yes" xml:space="preserve">
          <source>This being the case, I would have expected the following line to take an inordinate amount of time, because in order to determine whether 1 quadrillion is in the range, a quadrillion values would have to be generated:</source>
          <target state="translated">Siendo este el caso,habría esperado que la siguiente línea tomara una cantidad de tiempo desmesurada,porque para determinar si 1 cuatrillón está en el rango,habría que generar un cuatrillón de valores:</target>
        </trans-unit>
        <trans-unit id="601964a0af5fc329286c43494d1b93b4a7ca99d7" translate="yes" xml:space="preserve">
          <source>This is still missing several things that a real &lt;code&gt;range()&lt;/code&gt; supports (such as the &lt;code&gt;.index()&lt;/code&gt; or &lt;code&gt;.count()&lt;/code&gt; methods, hashing, equality testing, or slicing), but should give you an idea.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Todav&amp;iacute;a faltan varias cosas que &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;admite &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; real &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;()&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (como los &lt;/font&gt;&lt;/font&gt; &lt;code&gt;.index()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;.count()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , hashing, pruebas de igualdad o segmentaci&amp;oacute;n), pero deber&amp;iacute;an darle una idea.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f80c4cb0679e53a949c32b0ac190421077750670" translate="yes" xml:space="preserve">
          <source>This means it has to follow all the rules of being a sequence:</source>
          <target state="translated">Esto significa que tiene que seguir todas las reglas de ser una secuencia:</target>
        </trans-unit>
        <trans-unit id="d2ad888ba3b822ce805f3748907ecbf9b1258899" translate="yes" xml:space="preserve">
          <source>This wasn't quite true; an &lt;code&gt;xrange&lt;/code&gt; object actually supported a few other things that come automatically with indexing and &lt;code&gt;len&lt;/code&gt;,&lt;sup&gt;*&lt;/sup&gt; including &lt;code&gt;__contains__&lt;/code&gt; (via linear search). But nobody thought it was worth making them full sequences at the time.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto no era del todo cierto; un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;xrange&lt;/code&gt; en&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; realidad soportaba algunas otras cosas que vienen autom&amp;aacute;ticamente con indexaci&amp;oacute;n y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;len&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;*&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; incluyendo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__contains__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (a trav&amp;eacute;s de b&amp;uacute;squeda lineal). Pero nadie pens&amp;oacute; que val&amp;iacute;a la pena hacerlas secuencias completas en ese momento.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8690b149d8e8cfa8cd1257005457b1463ffe31d1" translate="yes" xml:space="preserve">
          <source>To add to Martijn&amp;rsquo;s answer, this is the relevant part of &lt;a href=&quot;https://hg.python.org/cpython/file/7f8cd879687b/Objects/rangeobject.c#l415&quot;&gt;the source&lt;/a&gt; (in C, as the range object is written in native code):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para agregar a la respuesta de Martijn, esta es la parte relevante de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://hg.python.org/cpython/file/7f8cd879687b/Objects/rangeobject.c#l415&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la fuente&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (en C, ya que el objeto de rango est&amp;aacute; escrito en c&amp;oacute;digo nativo):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="be3b0b42f6680c00507694d72d1f7022605c21a0" translate="yes" xml:space="preserve">
          <source>Try &lt;code&gt;x-1 in (i for i in range(x))&lt;/code&gt; for large &lt;code&gt;x&lt;/code&gt; values, which uses a generator comprehension to avoid invoking the &lt;code&gt;range.__contains__&lt;/code&gt; optimisation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pruebe &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x-1 in (i for i in range(x))&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valores &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;grandes de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que utiliza una comprensi&amp;oacute;n del generador para evitar invocar el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range.__contains__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; optimizaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e813db87426b62a99cf3e4be77476c090bb67049" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://github.com/python/cpython/blob/cff677abe1823900e954592035a170eb67840971/Objects/rangeobject.c#L364-L413&quot;&gt;source&lt;/a&gt;, Luke!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iexcl;Usa la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/python/cpython/blob/cff677abe1823900e954592035a170eb67840971/Objects/rangeobject.c#L364-L413&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;fuente&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , Luke!&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="06802975cefff52a425e022f7da8a89c6ee6eaa3" translate="yes" xml:space="preserve">
          <source>What &lt;code&gt;range&lt;/code&gt; actually is, is a sequence, just like a list. You can even test this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;realidad, el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una secuencia, como una lista. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Incluso puedes probar esto:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a6500d0776cd51af24cdc0e92b78183f446cff7" translate="yes" xml:space="preserve">
          <source>What is the &lt;code&gt;range()&lt;/code&gt; object doing under the hood that makes it so fast?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Qu&amp;eacute; est&amp;aacute; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;haciendo el objeto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;range()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; debajo del cap&amp;oacute; que lo hace tan r&amp;aacute;pido?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2cd6a3c216b35403a6bc87531634cf4fdf33e56f" translate="yes" xml:space="preserve">
          <source>Why is “1000000000000000 in range(1000000000000001)” so fast in Python 3</source>
          <target state="translated">¿Por qué es &quot;1000000000000000 en el rango (1000000000000001)&quot; tan rápido en Python 3</target>
        </trans-unit>
        <trans-unit id="bb3d73e98cfd7f2a1c63112bb0a680f29ffcf196" translate="yes" xml:space="preserve">
          <source>You can tell this pretty easily:</source>
          <target state="translated">Puedes decir esto muy fácilmente:</target>
        </trans-unit>
        <trans-unit id="270480ae2ce563f829cb6203b6308055d57b20ff" translate="yes" xml:space="preserve">
          <source>You should be aware of an implementation detail but should not be relied upon, because this may change in the future.</source>
          <target state="translated">Debe ser consciente de un detalle de aplicación pero no debe confiarse en él,porque esto puede cambiar en el futuro.</target>
        </trans-unit>
        <trans-unit id="b94da3599274cc93c9ee4f4d4dce4fea875b2503" translate="yes" xml:space="preserve">
          <source>but:</source>
          <target state="translated">but:</target>
        </trans-unit>
        <trans-unit id="2a6189afc04320880bd261c8700c56679f1e8e2d" translate="yes" xml:space="preserve">
          <source>due to optimization - it's easy to compare given integer just with min and max of range.</source>
          <target state="translated">debido a la optimización,es fácil comparar un número entero dado con un mínimo y un máximo de rango.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
