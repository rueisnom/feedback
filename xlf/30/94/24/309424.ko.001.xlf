<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/309424">
    <body>
      <group id="309424">
        <trans-unit id="43034e26233535f3360dad382e80b5a62ef3dc0e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;How to do it?&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;어떻게합니까?&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b4ded4073d0491cc20f616c05fcc728c662caf67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note, if you need to be specific about the input stream's encoding, you can provide the second argument to &lt;code&gt;Scanner&lt;/code&gt; constructor that indicates what character set to use (e.g. &quot;UTF-8&quot;).&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;입력 스트림의 인코딩에 대해 구체적이어야하는 경우 사용할 문자 세트 (예 : &quot;UTF-8&quot;)를 나타내는 두 번째 인수를 &lt;code&gt;Scanner&lt;/code&gt; 생성자에 제공 할 수 있습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0245c932230c09c170a3551aaf97ff3c66416a59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Performance tests&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;성능 테스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a8267581055cc77ab39ad71fab25427b57cc0d10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Warning&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="97f4ba42c3525ab67ceb5e6768bd67e64a93b3ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Ways to convert an InputStream to a String:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;InputStream을 문자열로 변환하는 방법 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7661ae913962c93e2c69e8613703c9600c5d4175" translate="yes" xml:space="preserve">
          <source>A nice way to do this is using &lt;a href=&quot;http://commons.apache.org/&quot;&gt;Apache commons&lt;/a&gt;&lt;code&gt;&lt;a href=&quot;https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html&quot;&gt;IOUtils&lt;/a&gt;&lt;/code&gt; to copy the &lt;code&gt;InputStream&lt;/code&gt; into a &lt;code&gt;StringWriter&lt;/code&gt;... something like</source>
          <target state="translated">이를 수행하는 좋은 방법은 &lt;a href=&quot;http://commons.apache.org/&quot;&gt;Apache commons&lt;/a&gt; &lt;code&gt;&lt;a href=&quot;https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html&quot;&gt;IOUtils&lt;/a&gt;&lt;/code&gt; 를 사용하여 &lt;code&gt;InputStream&lt;/code&gt; 을 &lt;code&gt;StringWriter&lt;/code&gt; 에 복사하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="57adaf6efb1bc995826808cb2893e57d9fc85d88" translate="yes" xml:space="preserve">
          <source>Also see: (&lt;a href=&quot;http://commons.apache.org/proper/commons-io/javadocs/api-2.4/org/apache/commons/io/IOUtils.html#toString%28java.io.InputStream,%20java.lang.String&quot;&gt;documentation&lt;/a&gt;)</source>
          <target state="translated">참조 : ( &lt;a href=&quot;http://commons.apache.org/proper/commons-io/javadocs/api-2.4/org/apache/commons/io/IOUtils.html#toString%28java.io.InputStream,%20java.lang.String&quot;&gt;documentation&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="5715134fa19496e459b994c2aa7f62bfdff78188" translate="yes" xml:space="preserve">
          <source>Alternatively, you could use &lt;code&gt;ByteArrayOutputStream&lt;/code&gt; if you don't want to mix your Streams and Writers</source>
          <target state="translated">또는 스트림과 작성자를 혼합하지 않으려는 경우 &lt;code&gt;ByteArrayOutputStream&lt;/code&gt; 을 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="94f04948050168b4e8b0d9e34720fc67285858c3" translate="yes" xml:space="preserve">
          <source>Another one, for all the Spring users:</source>
          <target state="translated">모든 Spring 사용자를위한 또 다른 하나 :</target>
        </trans-unit>
        <trans-unit id="43ec67ee48c84ff251e8e017b8bbfaae392e28b9" translate="yes" xml:space="preserve">
          <source>Any of these approaches is an appropriate solution for grabbing a response and creating a String from it.</source>
          <target state="translated">이러한 접근 방법 중 하나는 응답을 잡고 그로부터 문자열을 작성하는 데 적합한 솔루션입니다.</target>
        </trans-unit>
        <trans-unit id="7c6587e9dc4f379caead6b030a18684db47a77af" translate="yes" xml:space="preserve">
          <source>Apache Commons allows:</source>
          <target state="translated">Apache Commons는 다음을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="8b18e2fc9866cae6b10316b9ce731a876d22ee80" translate="yes" xml:space="preserve">
          <source>ApacheStringWriter2: 574</source>
          <target state="translated">ApacheStringWriter2 : 574</target>
        </trans-unit>
        <trans-unit id="88e43e77f94811e2fdc7560e5002e122f129f638" translate="yes" xml:space="preserve">
          <source>ApacheStringWriter: 1544</source>
          <target state="translated">ApacheStringWriter : 1544</target>
        </trans-unit>
        <trans-unit id="046a5dc08545c00a35020ea2bbe0f3baf9a7b532" translate="yes" xml:space="preserve">
          <source>Approach #1</source>
          <target state="translated">접근법 # 1</target>
        </trans-unit>
        <trans-unit id="50249d436194b8a19538c761c2a23c744b70ae05" translate="yes" xml:space="preserve">
          <source>Approach #2 - 4.3% slower than #1</source>
          <target state="translated">접근법 # 2-# 1보다 4.3 % 느림</target>
        </trans-unit>
        <trans-unit id="13f0aef6d8d874aa0a401ef07dfbbe9b6732848f" translate="yes" xml:space="preserve">
          <source>Approach #3 - 2.6% slower than #1</source>
          <target state="translated">접근법 # 3-# 1보다 2.6 % 느림</target>
        </trans-unit>
        <trans-unit id="ff584d19f07d32446769dcc1ea93d141b94c5244" translate="yes" xml:space="preserve">
          <source>As mentioned by Christoffer Hammarstr&amp;ouml;m below &lt;a href=&quot;https://stackoverflow.com/a/309448/639687&quot;&gt;other answer&lt;/a&gt; it is safer to explicitly specify the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html&quot;&gt;Charset&lt;/a&gt;. I.e. The InputStreamReader constructor can be changes as follows:</source>
          <target state="translated">Christoffer Hammarstr&amp;ouml;m이 &lt;a href=&quot;https://stackoverflow.com/a/309448/639687&quot;&gt;다른 답변에서&lt;/a&gt; 언급했듯이 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html&quot;&gt;Charset&lt;/a&gt; 을 명시 적으로 지정하는 것이 더 안전합니다. 즉, InputStreamReader 생성자는 다음과 같이 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9bdf14f513c5bad328ea1d510aa26abc40544720" translate="yes" xml:space="preserve">
          <source>Benchmark results, of 20 MB random bytes in 20 cycles</source>
          <target state="translated">20주기 동안 20MB 임의 바이트의 벤치 마크 결과</target>
        </trans-unit>
        <trans-unit id="172b5fec66cd340a563229ec72271366f0c71fe0" translate="yes" xml:space="preserve">
          <source>Benchmark source code</source>
          <target state="translated">벤치 마크 소스 코드</target>
        </trans-unit>
        <trans-unit id="9e235f55dd3a7f63cbe1bf8aac564e7dd5598997" translate="yes" xml:space="preserve">
          <source>BufferReaderTest: Error</source>
          <target state="translated">BufferReaderTest : 오류</target>
        </trans-unit>
        <trans-unit id="4a62a9e52b54c2bc1a5012aa1242bc95c7ab1a0c" translate="yes" xml:space="preserve">
          <source>BufferedInputStreamVsByteArrayOutputStream: 314</source>
          <target state="translated">BufferedInputStreamVsByteArrayOutputStream : 314</target>
        </trans-unit>
        <trans-unit id="6bda62e239bd60b77376cced879dd171899a29be" translate="yes" xml:space="preserve">
          <source>ByteArrayOutputStreamTest: 194</source>
          <target state="translated">ByteArrayOutputStream 테스트 : 194</target>
        </trans-unit>
        <trans-unit id="11892965a0ce0741ef36ca64683ef00cac155d9b" translate="yes" xml:space="preserve">
          <source>EDIT: On JDK 7+, you can use try-with-resources construct.</source>
          <target state="translated">편집 : JDK 7 이상에서는 try-with-resources 구문을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dff32e726ab14723e087077547d1d98b475409ef" translate="yes" xml:space="preserve">
          <source>Essentially the same as some other answers except more succinct.</source>
          <target state="translated">더 간결한 것을 제외하고는 다른 답변과 본질적으로 동일합니다.</target>
        </trans-unit>
        <trans-unit id="e9d47961ea204a249e0709bf716e8878eede63dc" translate="yes" xml:space="preserve">
          <source>For JDK 9</source>
          <target state="translated">JDK 9의 경우</target>
        </trans-unit>
        <trans-unit id="2cc9eae5ce66ad937b7ef1f778206d0dacee2a1f" translate="yes" xml:space="preserve">
          <source>For completeness here is &lt;strong&gt;Java 9&lt;/strong&gt; solution:</source>
          <target state="translated">완전성을 위해 여기에 &lt;strong&gt;Java 9&lt;/strong&gt; 솔루션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e3c6602765d9157cf336529d7e2935236a8af1e" translate="yes" xml:space="preserve">
          <source>Graphs (performance tests depending on Input Stream length in Windows 7 system)</source>
          <target state="translated">그래프 (Windows 7 시스템의 입력 스트림 길이에 따른 성능 테스트)</target>
        </trans-unit>
        <trans-unit id="efcc54ff6d2b9567d8ca3725ae7ad3613c3e5947" translate="yes" xml:space="preserve">
          <source>GuavaCharStreams: 589</source>
          <target state="translated">구아바</target>
        </trans-unit>
        <trans-unit id="fc703bde71661f219dcd9a802626d939e4a27e8c" translate="yes" xml:space="preserve">
          <source>Hat tip goes also to &lt;a href=&quot;https://stackoverflow.com/users/68127/jacob-gabrielson&quot;&gt;Jacob&lt;/a&gt;, who once pointed me to the said article.</source>
          <target state="translated">모자 팁도 &lt;a href=&quot;https://stackoverflow.com/users/68127/jacob-gabrielson&quot;&gt;야곱&lt;/a&gt; 에게 갔다.</target>
        </trans-unit>
        <trans-unit id="0ff2ba88a69fe3b81ed5220554fc5ce7e7a3c454" translate="yes" xml:space="preserve">
          <source>Here is the complete method for converting &lt;code&gt;InputStream&lt;/code&gt; into &lt;code&gt;String&lt;/code&gt; without using any third party library. Use &lt;code&gt;StringBuilder&lt;/code&gt; for single threaded environment otherwise use &lt;code&gt;StringBuffer&lt;/code&gt;.</source>
          <target state="translated">다음은 타사 라이브러리를 사용하지 않고 &lt;code&gt;InputStream&lt;/code&gt; 을 &lt;code&gt;String&lt;/code&gt; 으로 변환하는 완전한 방법입니다. 단일 스레드 환경에는 &lt;code&gt;StringBuilder&lt;/code&gt; 를 사용하고 그렇지 않으면 StringBuffer 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="c599e809d0d7660277eced532ba32918ff9f6b15" translate="yes" xml:space="preserve">
          <source>Here's a way using only the standard Java library (note that the stream is not closed, your mileage may vary).</source>
          <target state="translated">표준 Java 라이브러리 만 사용하는 방법이 있습니다 (스트림은 닫히지 않으며 마일리지는 다를 수 있습니다).</target>
        </trans-unit>
        <trans-unit id="cd8641f5a83a1df6d9142e744e344af6444530a8" translate="yes" xml:space="preserve">
          <source>Here's how to do it using just the JDK using byte array buffers. This is actually how the commons-io &lt;code&gt;IOUtils.copy()&lt;/code&gt; methods all work. You can replace &lt;code&gt;byte[]&lt;/code&gt; with &lt;code&gt;char[]&lt;/code&gt; if you're copying from a &lt;code&gt;Reader&lt;/code&gt; instead of an &lt;code&gt;InputStream&lt;/code&gt;.</source>
          <target state="translated">바이트 배열 버퍼를 사용하는 JDK 만 사용하는 방법은 다음과 같습니다. 이것이 실제로 commons-io &lt;code&gt;IOUtils.copy()&lt;/code&gt; 메소드가 모두 작동하는 방식입니다. &lt;code&gt;InputStream&lt;/code&gt; 대신 &lt;code&gt;Reader&lt;/code&gt; 에서 복사하는 경우 &lt;code&gt;byte[]&lt;/code&gt; 를 &lt;code&gt;char[]&lt;/code&gt; [] 로 바꿀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="289f5aa209f62c5822679cb5c2228c01a48ffd6d" translate="yes" xml:space="preserve">
          <source>Here's more-or-less sampath's answer, cleaned up a bit and represented as a function:</source>
          <target state="translated">다음은 다소간 sampath의 답변이며 약간 정리되어 함수로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="c45725471de6703f5a58ba283e0f9f5553f5e09d" translate="yes" xml:space="preserve">
          <source>Here's my &lt;strong&gt;Java 8&lt;/strong&gt; based solution, which uses the &lt;em&gt;new Stream API&lt;/em&gt; to collect all lines from an &lt;code&gt;InputStream&lt;/code&gt;:</source>
          <target state="translated">다음은 &lt;em&gt;새로운 Stream API&lt;/em&gt; 를 사용하여 &lt;code&gt;InputStream&lt;/code&gt; 에서 모든 줄을 수집하는 &lt;strong&gt;Java 8&lt;/strong&gt; 기반 솔루션입니다.</target>
        </trans-unit>
        <trans-unit id="c6500a518e982688b1eb2f36fd03d81e7939dd83" translate="yes" xml:space="preserve">
          <source>Here's the most elegant, pure-Java (no library) solution I came up with after some experimentation:</source>
          <target state="translated">다음은 실험 후 얻은 가장 우아하고 순수한 Java (라이브러리 없음) 솔루션입니다.</target>
        </trans-unit>
        <trans-unit id="242fd7bd00936855357850dc70b8a39637d6e8d8" translate="yes" xml:space="preserve">
          <source>How do I read / convert an InputStream into a String in Java</source>
          <target state="translated">Java에서 InputStream을 읽고 문자열로 변환하는 방법</target>
        </trans-unit>
        <trans-unit id="9eb401a624c4c5bb0f7ca6564411da7adbe56aee" translate="yes" xml:space="preserve">
          <source>I attempted to get the response into a String 3 different ways. (shown below)</source>
          <target state="translated">String 3 다른 방법으로 응답을 얻으려고했습니다. (아래 참조)</target>
        </trans-unit>
        <trans-unit id="072727f359585cd87f883dc1b84d756fbb03a4e2" translate="yes" xml:space="preserve">
          <source>I did a benchmark upon 14 distinct answers here (sorry for not providing credits but there are too many duplicates).</source>
          <target state="translated">나는 여기에 14 개의 별개의 답변에 대한 벤치 마크를했습니다 (크레딧을 제공하지 않아서 너무 많은 사본이 있습니다).</target>
        </trans-unit>
        <trans-unit id="41e096c3c05b588bd1bdb177451443d6496da52f" translate="yes" xml:space="preserve">
          <source>I learned this trick from &lt;a href=&quot;https://community.oracle.com/blogs/pat/2004/10/23/stupid-scanner-tricks&quot;&gt;&quot;Stupid Scanner tricks&quot;&lt;/a&gt; article. The reason it works is because &lt;a href=&quot;http://download.oracle.com/javase/8/docs/api/java/util/Scanner.html&quot;&gt;Scanner&lt;/a&gt; iterates over tokens in the stream, and in this case we separate tokens using &quot;beginning of the input boundary&quot; (\A), thus giving us only one token for the entire contents of the stream.</source>
          <target state="translated">&lt;a href=&quot;https://community.oracle.com/blogs/pat/2004/10/23/stupid-scanner-tricks&quot;&gt;&quot;Stupid Scanner tricks&quot;&lt;/a&gt; 기사에서이 트릭을 배웠습니다. 이것이 작동하는 이유는 &lt;a href=&quot;http://download.oracle.com/javase/8/docs/api/java/util/Scanner.html&quot;&gt;스캐너&lt;/a&gt; 가 스트림의 토큰을 반복하기 때문에 &quot;입력 경계의 시작&quot;(\ A)을 사용하여 토큰을 분리하여 스트림의 전체 내용에 대해 하나의 토큰 만 제공하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="e831b86f84b8dbd3c7b8cb6d1bc3f1233ea9791e" translate="yes" xml:space="preserve">
          <source>I left out try/catch blocks for the sake readability.</source>
          <target state="translated">나는 가독성을 위해 try / catch 블록을 생략했습니다.</target>
        </trans-unit>
        <trans-unit id="7e2ea66d80ea45d3e52409326ca64ca9c627c6fa" translate="yes" xml:space="preserve">
          <source>I ran some timing tests because time matters, always.</source>
          <target state="translated">시간이 항상 중요하기 때문에 타이밍 테스트를 실행했습니다.</target>
        </trans-unit>
        <trans-unit id="d0bb9b89958b70161c410cb2cde4a311154c58ed" translate="yes" xml:space="preserve">
          <source>I'd use some Java 8 tricks.</source>
          <target state="translated">Java 8 트릭을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ce4cdf3959fc5f2fe4ff63feb593f39b5a537573" translate="yes" xml:space="preserve">
          <source>If you are using Google-Collections/Guava you could do the following:</source>
          <target state="translated">Google 컬렉션 / 구아바를 사용하는 경우 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="01784c415c594c6475412f68a184ae1ccb2b0cc7" translate="yes" xml:space="preserve">
          <source>If you can't use Commons IO (FileUtils/IOUtils/CopyUtils), here's an example using a BufferedReader to read the file line by line:</source>
          <target state="translated">Commons IO (FileUtils / IOUtils / CopyUtils)를 사용할 수없는 경우 다음은 BufferedReader를 사용하여 파일을 한 줄씩 읽는 예제입니다.</target>
        </trans-unit>
        <trans-unit id="12963de5b5d06835c8268d0be700e1ca59e8b9e1" translate="yes" xml:space="preserve">
          <source>If you have a &lt;code&gt;java.io.InputStream&lt;/code&gt; object, how should you process that object and produce a &lt;code&gt;String&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;java.io.InputStream&lt;/code&gt; 객체가있는 경우 해당 객체를 어떻게 처리하고 &lt;code&gt;String&lt;/code&gt; 을 생성해야합니까?</target>
        </trans-unit>
        <trans-unit id="606cf7876b4c86c94138c760674aac0174d956b7" translate="yes" xml:space="preserve">
          <source>If you were feeling adventurous, you could mix Scala and Java and end up with this:</source>
          <target state="translated">모험심을 느낀다면 스칼라와 자바를 섞어서 다음과 같이 끝낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6978cfad82d4a8c038ff5b4f8d35cb283ac1a24" translate="yes" xml:space="preserve">
          <source>In Groovy</source>
          <target state="translated">그루비에서</target>
        </trans-unit>
        <trans-unit id="13ddbb86d8702b30d9fb880f8e9ab9a72dfb475a" translate="yes" xml:space="preserve">
          <source>In terms of &lt;code&gt;reduce&lt;/code&gt;, and &lt;code&gt;concat&lt;/code&gt; it can be expressed in Java 8 as:</source>
          <target state="translated">&lt;code&gt;reduce&lt;/code&gt; 와 &lt;code&gt;concat&lt;/code&gt; 의 관점에서 Java 8에서는 다음과 같이 표현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a06ec3cd861d574ba6922c23c84403434589f03" translate="yes" xml:space="preserve">
          <source>InputStreamAndStringBuilder: Error</source>
          <target state="translated">InputStreamAndStringBuilder : 오류</target>
        </trans-unit>
        <trans-unit id="717d8fb549db3017d757b49bfeb7fe1a30cdb46a" translate="yes" xml:space="preserve">
          <source>Is for Java 7 or higher.</source>
          <target state="translated">Java 7 이상입니다.</target>
        </trans-unit>
        <trans-unit id="4b8302ace29757a204e60da507f99cec98ed12fe" translate="yes" xml:space="preserve">
          <source>Is free from library dependencies.</source>
          <target state="translated">라이브러리 종속성이 없습니다.</target>
        </trans-unit>
        <trans-unit id="2f269489dec51317ec43d6f714887f43f83f3c7c" translate="yes" xml:space="preserve">
          <source>It safely handles the Charset.</source>
          <target state="translated">문자셋을 안전하게 처리합니다.</target>
        </trans-unit>
        <trans-unit id="6b38cf16381e20cc807e9a67b63c64cdc5b4880c" translate="yes" xml:space="preserve">
          <source>Java9ISReadAllBytes: 205</source>
          <target state="translated">Java9ISReadAllBytes : 205</target>
        </trans-unit>
        <trans-unit id="11891f20dc1557edc55e2db9c9bf1e4d31a8156a" translate="yes" xml:space="preserve">
          <source>Java9ISTransferTo: 201</source>
          <target state="translated">전송 대상 : 201</target>
        </trans-unit>
        <trans-unit id="3f581552aa8d865cb154c1ae527f013150a175d7" translate="yes" xml:space="preserve">
          <source>Kotlin users simply do:</source>
          <target state="translated">Kotlin 사용자는 단순히 다음을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="c111bd4e8b48a3d4e58d3481b52bdf92e8eee23d" translate="yes" xml:space="preserve">
          <source>Make sure to close the streams at end if you use Stream Readers</source>
          <target state="translated">스트림 리더를 사용하는 경우 스트림을 종료해야합니다</target>
        </trans-unit>
        <trans-unit id="a32efe32757fab7945111b39e86d49bbd28d16ec" translate="yes" xml:space="preserve">
          <source>Mixing Java and Scala code and libraries has it's benefits.</source>
          <target state="translated">Java와 Scala 코드와 라이브러리를 혼합하면 이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="e13555fb2491ca764011241f3a50149b9b045de9" translate="yes" xml:space="preserve">
          <source>NioStream: 198</source>
          <target state="translated">NioStream : 198</target>
        </trans-unit>
        <trans-unit id="6678201542ad7416d4512ee51be113a3f0c1fae9" translate="yes" xml:space="preserve">
          <source>Note that the second parameter (i.e. Charsets.UTF_8) for the &lt;code&gt;InputStreamReader&lt;/code&gt; isn't necessary, but it is generally a good idea to specify the encoding if you know it (which you should!)</source>
          <target state="translated">&lt;code&gt;InputStreamReader&lt;/code&gt; 의 두 번째 매개 변수 (예 : Charsets.UTF_8)는 필요하지 않지만 일반적으로 알고있는 경우 인코딩을 지정하는 것이 좋습니다 (필수)!</target>
        </trans-unit>
        <trans-unit id="e48af330a512c5807fa5dd56024f202fb29da123" translate="yes" xml:space="preserve">
          <source>Of course, you could choose other character encodings besides UTF-8.</source>
          <target state="translated">물론 UTF-8 이외의 다른 문자 인코딩을 선택할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="0128f848d40a96b88416788a20148a4d80fc266e" translate="yes" xml:space="preserve">
          <source>Or if you want raw speed I'd propose a variation on what Paul de Vrieze suggested (which avoids using a StringWriter (which uses a StringBuffer internally):</source>
          <target state="translated">또는 원시 속도를 원한다면 Paul de Vrieze가 제안한 변형을 제안합니다 (StringWriter를 내부적으로 사용하지 않는 StringWriter 사용을 피함).</target>
        </trans-unit>
        <trans-unit id="fe762b1085af1613a6011f26fa4710cbe8399831" translate="yes" xml:space="preserve">
          <source>ParallelStreamApi: Error</source>
          <target state="translated">ParallelStreamApi : 오류</target>
        </trans-unit>
        <trans-unit id="f00bcf85146ca324fd2f5ad3c20098725eca2e09" translate="yes" xml:space="preserve">
          <source>Performance test (Average Time) depending on Input Stream length in Windows 7 system:</source>
          <target state="translated">Windows 7 시스템의 입력 스트림 길이에 따른 성능 테스트 (평균 시간) :</target>
        </trans-unit>
        <trans-unit id="15ce5fd2063b8dfb7a742ad221b54edf01978e13" translate="yes" xml:space="preserve">
          <source>Performance tests for big &lt;code&gt;String&lt;/code&gt; (length = 50100), url in &lt;a href=&quot;https://github.com/Vedenin/useful-java-links/blob/master/helloworlds/5.0-other-examples/src/main/java/other_examples/ConvertBigStringToInputStreamBenchmark.java&quot;&gt;github&lt;/a&gt; (mode = Average Time, system = Linux, score 200,715 is the best):</source>
          <target state="translated">큰 &lt;code&gt;String&lt;/code&gt; (길이 = 50100), &lt;a href=&quot;https://github.com/Vedenin/useful-java-links/blob/master/helloworlds/5.0-other-examples/src/main/java/other_examples/ConvertBigStringToInputStreamBenchmark.java&quot;&gt;github의&lt;/a&gt; url에 대한 성능 테스트 (모드 = 평균 시간, 시스템 = Linux, 점수 200,715가 가장 좋음) :</target>
        </trans-unit>
        <trans-unit id="b3cb4da7e0a46ecc0b89881c22549a0edad490f0" translate="yes" xml:space="preserve">
          <source>Performance tests for small &lt;code&gt;String&lt;/code&gt; (length = 175), url in &lt;a href=&quot;https://github.com/Vedenin/useful-java-links/blob/master/helloworlds/5.0-other-examples/src/main/java/other_examples/ConvertInputStreamToStringBenchmark.java&quot;&gt;github&lt;/a&gt; (mode = Average Time, system = Linux, score 1,343 is the best):</source>
          <target state="translated">작은 &lt;code&gt;String&lt;/code&gt; (길이 = 175), &lt;a href=&quot;https://github.com/Vedenin/useful-java-links/blob/master/helloworlds/5.0-other-examples/src/main/java/other_examples/ConvertInputStreamToStringBenchmark.java&quot;&gt;github의&lt;/a&gt; url에 대한 성능 테스트 (모드 = 평균 시간, 시스템 = Linux, 점수 1,343이 가장 좋음) :</target>
        </trans-unit>
        <trans-unit id="78891d7798e610d404bbb2aa0d32188cf864067d" translate="yes" xml:space="preserve">
          <source>Pure Java solution using &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html&quot;&gt;Stream&lt;/a&gt;s, works since Java 8.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html&quot;&gt;Stream&lt;/a&gt; 을 사용하는 순수 Java 솔루션은 Java 8부터 작동합니다.</target>
        </trans-unit>
        <trans-unit id="da23b99455ab567bf0a97535eef6a9b60b63035c" translate="yes" xml:space="preserve">
          <source>Ranks:</source>
          <target state="translated">Ranks:</target>
        </trans-unit>
        <trans-unit id="581fb72d961561d6847c324a9ca507a1b5950e74" translate="yes" xml:space="preserve">
          <source>ScannerReader: 633</source>
          <target state="translated">스캐너 리더 : 633</target>
        </trans-unit>
        <trans-unit id="ee6f7fdbb95670468252469db258042fb430a2d5" translate="yes" xml:space="preserve">
          <source>ScannerReaderNoNextTest: 614</source>
          <target state="translated">다음 : 테스트 : 614</target>
        </trans-unit>
        <trans-unit id="81511e081f8c9986efc0fdbf311d5e4326afe95e" translate="yes" xml:space="preserve">
          <source>See full description here: &lt;a href=&quot;https://stackoverflow.com/q/5221524/828757&quot;&gt;Idiomatic way to convert an InputStream to a String in Scala&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/q/5221524/828757&quot;&gt;스칼라에서 InputStream을 문자열로 변환하는 관용적 방법은&lt;/a&gt; 여기를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3ea2d6aa38eef43430f33d53fa0bcdba48daa935" translate="yes" xml:space="preserve">
          <source>So first here is the best method:</source>
          <target state="translated">먼저 여기에 가장 좋은 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="fdd23c6c858048553c5af6d3c8b03c82f96172e2" translate="yes" xml:space="preserve">
          <source>So, after running 500 tests on each approach with the same request/response data, here are the numbers. Once again, these are my findings and your findings may not be exactly the same, but I wrote this to give some indication to others of the efficiency differences of these approaches.</source>
          <target state="translated">따라서 동일한 요청 / 응답 데이터를 사용하여 각 방법에 대해 500 개의 테스트를 실행 한 후 숫자가 있습니다. 다시 한 번, 이것들은 나의 발견이며 당신의 발견은 정확히 동일하지 않을 수도 있지만, 나는이 접근법의 효율성 차이에 대해 다른 사람들에게 알리기 위해 이것을 썼습니다.</target>
        </trans-unit>
        <trans-unit id="026b2812f764e70f0892e485d100c69c8f343cbf" translate="yes" xml:space="preserve">
          <source>Solution 11 can't work correctly with Unicode text</source>
          <target state="translated">솔루션 11은 유니 코드 텍스트에서 올바르게 작동하지 않습니다</target>
        </trans-unit>
        <trans-unit id="bc63ac13b888d26e3e57b0b93059a78b5e7f803b" translate="yes" xml:space="preserve">
          <source>Solutions 4, 5 and 9 convert different line breaks to one.</source>
          <target state="translated">솔루션 4, 5 및 9는 다른 줄 바꿈을 하나로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="32d2d6aa36706f3ca8a19f649cef95bedf129a97" translate="yes" xml:space="preserve">
          <source>StreamApi: Error</source>
          <target state="translated">StreamApi : 오류</target>
        </trans-unit>
        <trans-unit id="00627bef2ba7730a07f6233c92965727bd83f278" translate="yes" xml:space="preserve">
          <source>Summarize other answers I found 11 main ways to do this (see below). And I wrote some performance tests (see results below):</source>
          <target state="translated">이 작업을 수행하는 11 가지 주요 방법을 찾은 다른 답변을 요약하십시오 (아래 참조). 그리고 몇 가지 성능 테스트를 작성했습니다 (아래 결과 참조).</target>
        </trans-unit>
        <trans-unit id="5170d50f34a6c54f5d234eb3936b4874c27dd414" translate="yes" xml:space="preserve">
          <source>Suppose I have an &lt;code&gt;InputStream&lt;/code&gt; that contains text data, and I want to convert it to a &lt;code&gt;String&lt;/code&gt;, so for example I can write that to a log file.</source>
          <target state="translated">텍스트 데이터가 포함 된 &lt;code&gt;InputStream&lt;/code&gt; 이 있고이를 &lt;code&gt;String&lt;/code&gt; 으로 변환하려고한다고 가정하면이를 로그 파일에 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0620f1007ab1dae6be89d144c9561e20e3905e38" translate="yes" xml:space="preserve">
          <source>Taking into account file one should first get a &lt;code&gt;java.io.Reader&lt;/code&gt; instance. This can then be read and added to a &lt;code&gt;StringBuilder&lt;/code&gt; (we don't need &lt;code&gt;StringBuffer&lt;/code&gt; if we are not accessing it in multiple threads, and &lt;code&gt;StringBuilder&lt;/code&gt; is faster). The trick here is that we work in blocks, and as such don't need other buffering streams. The block size is parameterized for run-time performance optimization.</source>
          <target state="translated">파일을 고려하면 먼저 &lt;code&gt;java.io.Reader&lt;/code&gt; 인스턴스를 가져와야 합니다. 그런 다음 이것을 읽고 &lt;code&gt;StringBuilder&lt;/code&gt; 에 추가 할 수 있습니다 (여러 스레드에서 액세스하지 않고 &lt;code&gt;StringBuilder&lt;/code&gt; 가 빠를 경우 &lt;code&gt;StringBuffer&lt;/code&gt; 가 필요하지 않습니다). 여기서 트릭은 블록 단위로 작업하므로 다른 버퍼링 스트림이 필요하지 않다는 것입니다. 블록 크기는 런타임 성능 최적화를 위해 매개 변수화됩니다.</target>
        </trans-unit>
        <trans-unit id="06d69d810c034fec1b62349402196709a6d1c1a9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/io/InputStream.html#readAllBytes--&quot;&gt;&lt;code&gt;readAllBytes&lt;/code&gt;&lt;/a&gt; is currently in JDK 9 main codebase, so it likely to appear in the release. You can try it right now using the &lt;a href=&quot;https://jdk9.java.net/download/&quot;&gt;JDK 9 snapshot builds&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/io/InputStream.html#readAllBytes--&quot;&gt; &lt;code&gt;readAllBytes&lt;/code&gt; &lt;/a&gt; 는 현재 JDK 9 기본 코드베이스에 있으므로 릴리스에 나타날 수 있습니다. &lt;a href=&quot;https://jdk9.java.net/download/&quot;&gt;JDK 9 스냅 샷 빌드를&lt;/a&gt; 사용하여 지금 시도 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb9325718d8c22f8d9fc1e2cfb09f54b24776deb" translate="yes" xml:space="preserve">
          <source>The easiest way in JDK is with the following code snipplets.</source>
          <target state="translated">JDK에서 가장 쉬운 방법은 다음 코드 스 니틀을 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="9c5435aa74479b8be20014bff2e00f84fcffc7a2" translate="yes" xml:space="preserve">
          <source>The result is very surprising. It turns out that Apache &lt;strong&gt;IOUtils&lt;/strong&gt; is the slowest and &lt;code&gt;ByteArrayOutputStream&lt;/code&gt; is the fastest solutions:</source>
          <target state="translated">결과는 매우 놀랍습니다. Apache &lt;strong&gt;IOUtils&lt;/strong&gt; 가 가장 느리고 &lt;code&gt;ByteArrayOutputStream&lt;/code&gt; 이 가장 빠른 솔루션이라는 것이 밝혀졌습니다.</target>
        </trans-unit>
        <trans-unit id="f0312c165fe49d2bee03e44ade2f86c55e304b8c" translate="yes" xml:space="preserve">
          <source>The utility methods in &lt;code&gt;org.springframework.util.StreamUtils&lt;/code&gt; are similar to the ones in &lt;code&gt;FileCopyUtils&lt;/code&gt;, but they leave the stream open when done.</source>
          <target state="translated">&lt;code&gt;org.springframework.util.StreamUtils&lt;/code&gt; 의 유틸리티 메소드는 &lt;code&gt;FileCopyUtils&lt;/code&gt; 의 유틸리티 메소드와 유사하지만 완료되면 스트림을 열린 상태로 둡니다.</target>
        </trans-unit>
        <trans-unit id="ab9b81fd2ac75e6a2a1030ea2647bece404a7502" translate="yes" xml:space="preserve">
          <source>This is an answer adapted from &lt;code&gt;org.apache.commons.io.IOUtils&lt;/code&gt;&lt;a href=&quot;http://grepcode.com/file/repo1.maven.org/maven2/commons-io/commons-io/2.4/org/apache/commons/io/IOUtils.java&quot;&gt;source code&lt;/a&gt;, for those who want to have the apache implementation but do not want the whole library.</source>
          <target state="translated">이것은 아파치 구현을 원하지만 전체 라이브러리를 원하지 않는 사람들을 위해 &lt;code&gt;org.apache.commons.io.IOUtils&lt;/code&gt; &lt;a href=&quot;http://grepcode.com/file/repo1.maven.org/maven2/commons-io/commons-io/2.4/org/apache/commons/io/IOUtils.java&quot;&gt;소스 코드&lt;/a&gt; 에서 수정 된 답변입니다.</target>
        </trans-unit>
        <trans-unit id="2874247b741b03dede0a3c456498932a0c7404c5" translate="yes" xml:space="preserve">
          <source>This is the best pure Java solution that fits perfectly for Android and any other JVM.</source>
          <target state="translated">이것은 Android 및 기타 JVM에 완벽하게 맞는 최상의 순수 Java 솔루션입니다.</target>
        </trans-unit>
        <trans-unit id="a071d424b33608e91498b0d5aa290e0d60d414b4" translate="yes" xml:space="preserve">
          <source>This one is nice because:</source>
          <target state="translated">이것은 다음과 같은 이유로 좋습니다.</target>
        </trans-unit>
        <trans-unit id="de0af1f84cacb1a0079f478ef135e4d076097f56" translate="yes" xml:space="preserve">
          <source>This solution works amazingly well... it is simple, fast, and works on small and large streams just the same!! (see benchmark above.. &lt;strong&gt;No. 8&lt;/strong&gt;)</source>
          <target state="translated">이 솔루션은 놀랍도록 잘 작동합니다 ... 간단하고 빠르며 크고 작은 스트림에서도 동일하게 작동합니다 !! (위의 벤치 마크 참조. &lt;strong&gt;No. 8&lt;/strong&gt; )</target>
        </trans-unit>
        <trans-unit id="698baf36cfe375eff6acea9bb1f9575b13b0805c" translate="yes" xml:space="preserve">
          <source>Time in milliseconds</source>
          <target state="translated">밀리 초 단위의 시간</target>
        </trans-unit>
        <trans-unit id="6c8985f53bd19f6060d8f45bc630082e8d049188" translate="yes" xml:space="preserve">
          <source>To give context, this is the preceding code for all 3 approaches:</source>
          <target state="translated">컨텍스트를 제공하기 위해 다음은 세 가지 접근 방식 모두에 대한 선행 코드입니다.</target>
        </trans-unit>
        <trans-unit id="ad1302de11e79d960d8eebd727ac66ab5763b268" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/io/InputStream.html#transferTo-java.io.OutputStream-&quot;&gt;java.io.InputStream.transferTo(OutputStream)&lt;/a&gt; supported in Java 9 and the &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/io/ByteArrayOutputStream.html#toString-java.lang.String-&quot;&gt;ByteArrayOutputStream.toString(String)&lt;/a&gt; which takes the charset name:</source>
          <target state="translated">Java 9에서 지원되는 &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/io/InputStream.html#transferTo-java.io.OutputStream-&quot;&gt;java.io.InputStream.transferTo (OutputStream)&lt;/a&gt; 및 문자 세트 이름을 사용하는 &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/io/ByteArrayOutputStream.html#toString-java.lang.String-&quot;&gt;ByteArrayOutputStream.toString (String)&lt;/a&gt; 을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="bc0e34154d952ed72b15f5d9618112640d548177" translate="yes" xml:space="preserve">
          <source>Use:</source>
          <target state="translated">Use:</target>
        </trans-unit>
        <trans-unit id="3f305d6dbecee9e3d10901eb494718a85eb3b08c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;BufferedInputStream&lt;/code&gt; and &lt;code&gt;ByteArrayOutputStream&lt;/code&gt; (JDK)</source>
          <target state="translated">&lt;code&gt;BufferedInputStream&lt;/code&gt; 및 JDK ( &lt;code&gt;ByteArrayOutputStream&lt;/code&gt; ) 사용</target>
        </trans-unit>
        <trans-unit id="053674bb18db9483ee399efa66c013d2976b366e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;BufferedReader&lt;/code&gt; (JDK). &lt;strong&gt;Warning:&lt;/strong&gt; This solution converts different line breaks (like &lt;code&gt;\n\r&lt;/code&gt;) to &lt;code&gt;line.separator&lt;/code&gt; system property (for example, in Windows to &quot;\r\n&quot;).</source>
          <target state="translated">JDK ( &lt;code&gt;BufferedReader&lt;/code&gt; ) 사용 &lt;strong&gt;경고 :&lt;/strong&gt; 이 솔루션은 다른 줄 바꿈 (예 : &lt;code&gt;\n\r&lt;/code&gt; )을 &lt;code&gt;line.separator&lt;/code&gt; 시스템 속성 (예 : Windows에서 &quot;\ r \ n&quot;으로)으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="9c658ffa6eddad4e564bc1340bca6d933d6f2544" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;ByteArrayOutputStream&lt;/code&gt; and &lt;code&gt;inputStream.read&lt;/code&gt; (JDK)</source>
          <target state="translated">&lt;code&gt;ByteArrayOutputStream&lt;/code&gt; 및 &lt;code&gt;inputStream.read&lt;/code&gt; (JDK) 사용</target>
        </trans-unit>
        <trans-unit id="08ebce2c30cd757eaa86285238dedc6ca1dcf3f8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;CharStreams&lt;/code&gt; (Guava)</source>
          <target state="translated">&lt;code&gt;CharStreams&lt;/code&gt; 사용 (구아바)</target>
        </trans-unit>
        <trans-unit id="a6c69176c57e8eb3011d94434b95607082c0a03b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;IOUtils.toString&lt;/code&gt; (Apache Utils)</source>
          <target state="translated">&lt;code&gt;IOUtils.toString&lt;/code&gt; 사용 (Apache Utils)</target>
        </trans-unit>
        <trans-unit id="b2c1642ae7f6e58bfc5bedcce0bdb6736fa511f6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;InputStreamReader&lt;/code&gt; and &lt;code&gt;StringBuilder&lt;/code&gt; (JDK)</source>
          <target state="translated">&lt;code&gt;InputStreamReader&lt;/code&gt; 및 &lt;code&gt;StringBuilder&lt;/code&gt; (JDK) 사용</target>
        </trans-unit>
        <trans-unit id="7de806a98a99a8f59319102fcc13b3b23f762fa2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Scanner&lt;/code&gt; (JDK)</source>
          <target state="translated">&lt;code&gt;Scanner&lt;/code&gt; (JDK) 사용</target>
        </trans-unit>
        <trans-unit id="73211d62c82fff7813ab45bc8b51b733156786c6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;StringWriter&lt;/code&gt; and &lt;code&gt;IOUtils.copy&lt;/code&gt; (Apache Commons)</source>
          <target state="translated">&lt;code&gt;StringWriter&lt;/code&gt; 및 &lt;code&gt;IOUtils.copy&lt;/code&gt; 사용 (Apache Commons)</target>
        </trans-unit>
        <trans-unit id="09e086ba3a6b5cfa63f589530a5c66b7c8588200" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;inputStream.read()&lt;/code&gt; and &lt;code&gt;StringBuilder&lt;/code&gt; (JDK). &lt;strong&gt;Warning&lt;/strong&gt;: This solution has problems with Unicode, for example with Russian text (works correctly only with non-Unicode text)</source>
          <target state="translated">&lt;code&gt;inputStream.read()&lt;/code&gt; 및 &lt;code&gt;StringBuilder&lt;/code&gt; (JDK) 사용 &lt;strong&gt;경고&lt;/strong&gt; :이 솔루션은 러시아어 텍스트와 같이 유니 코드에 문제가 있습니다 (유니 코드가 아닌 텍스트에서만 올바르게 작동 함)</target>
        </trans-unit>
        <trans-unit id="befda1fb250dd706f15956fc62eddde63660ae34" translate="yes" xml:space="preserve">
          <source>Using &lt;strong&gt;Stream API&lt;/strong&gt; (Java 8). &lt;strong&gt;Warning&lt;/strong&gt;: This solution converts different line breaks (like &lt;code&gt;\r\n&lt;/code&gt;) to &lt;code&gt;\n&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Stream API&lt;/strong&gt; 사용 (Java 8) &lt;strong&gt;경고&lt;/strong&gt; :이 솔루션은 다른 줄 바꿈 (예 : &lt;code&gt;\r\n&lt;/code&gt; )을 &lt;code&gt;\n&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="777b1b7543a47e7a1f58c38911471a754bd6f99c" translate="yes" xml:space="preserve">
          <source>Using &lt;strong&gt;parallel Stream API&lt;/strong&gt; (Java 8). &lt;strong&gt;Warning&lt;/strong&gt;: This solution converts different line breaks (like &lt;code&gt;\r\n&lt;/code&gt;) to &lt;code&gt;\n&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;병렬 스트림 API&lt;/strong&gt; (Java 8) 사용 &lt;strong&gt;경고&lt;/strong&gt; :이 솔루션은 다른 줄 바꿈 (예 : &lt;code&gt;\r\n&lt;/code&gt; )을 &lt;code&gt;\n&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="5f7fb54c32917542cfe9071af96c3161c7083876" translate="yes" xml:space="preserve">
          <source>What is the easiest way to take the &lt;code&gt;InputStream&lt;/code&gt; and convert it to a &lt;code&gt;String&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; 을 가져 와서 &lt;code&gt;String&lt;/code&gt; 으로 변환하는 가장 쉬운 방법은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="de834c8d63e116d87057fc1d47f5bf5605958ae2" translate="yes" xml:space="preserve">
          <source>You can provision the length of the builder and it doesn't have to be an exact value.</source>
          <target state="translated">빌더의 길이를 프로비저닝 할 수 있으며 정확한 값일 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="22512523e0069af602863041298da2b04267b699" translate="yes" xml:space="preserve">
          <source>You control the read buffer size.</source>
          <target state="translated">읽기 버퍼 크기를 제어합니다.</target>
        </trans-unit>
        <trans-unit id="390c23a71517435f2802b05ce34d7e19f26e2894" translate="yes" xml:space="preserve">
          <source>is Kotlin standard library&amp;rsquo;s built-in extension method.</source>
          <target state="translated">Kotlin 표준 라이브러리의 기본 제공 확장 방법입니다.</target>
        </trans-unit>
        <trans-unit id="c05fea263798687e5d33b0e050b51c0ff3878676" translate="yes" xml:space="preserve">
          <source>or even</source>
          <target state="translated">또는</target>
        </trans-unit>
        <trans-unit id="9d7c261bb879e05732311c377252f0746423dde0" translate="yes" xml:space="preserve">
          <source>whereas</source>
          <target state="translated">whereas</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
