<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/4244896">
    <body>
      <group id="4244896">
        <trans-unit id="c25a232090a075394a2c0ea94d2f48e5b00f9443" translate="yes" xml:space="preserve">
          <source>...does get, and does set. It is what I use, the only downside is you got to know JQuery, but this is honestly one of the very many good reasons that every Javascript Developer should learn JQuery, it just makes life easy, and offers methods, like this one, which is not available with standard Javascript.
Hope this helps someone!!!</source>
          <target state="translated">...se pone,y se pone.Es lo que yo uso,la única desventaja es que llegaste a conocer JQuery,pero esta es honestamente una de las muchas buenas razones por las que cada desarrollador de Javascript debería aprender JQuery,sólo hace la vida más fácil,y ofrece métodos,como este,que no está disponible con el Javascript estándar.¡¡Espero que esto ayude a alguien!!</target>
        </trans-unit>
        <trans-unit id="9fac3d93857c0fb8f4bef5e89d7bbed95b49b5d8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.w3schools.com/jsref/jsref_getcomputedstyle.asp&quot;&gt;W3Schools getComputedValue Doc&lt;/a&gt; This gives a good example, and lets you play with it, however, this link &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/computed_value&quot;&gt;Mozilla CSS getComputedValue doc&lt;/a&gt; talks about the getComputedValue function in detail, and should be read by any aspiring developer who isn't totally clear on this subject.</source>
          <target state="translated">&lt;a href=&quot;https://www.w3schools.com/jsref/jsref_getcomputedstyle.asp&quot;&gt;W3Schools getComputedValue Doc&lt;/a&gt; Esto da un buen ejemplo y le permite jugar con &amp;eacute;l, sin embargo, este enlace &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/computed_value&quot;&gt;Mozilla CSS getComputedValue doc&lt;/a&gt; habla sobre la funci&amp;oacute;n getComputedValue en detalle, y debe ser le&amp;iacute;do por cualquier desarrollador aspirante que no est&amp;eacute; totalmente claro sobre este tema.</target>
        </trans-unit>
        <trans-unit id="972a33f942039a3a3949adc61004acb034b7b096" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Code&lt;/strong&gt;&lt;em&gt;&lt;a href=&quot;https://jsfiddle.net/sb2ofndy/&quot;&gt;jsfiddle&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;Code&lt;/strong&gt;&lt;em&gt;&lt;a href=&quot;https://jsfiddle.net/sb2ofndy/&quot;&gt;jsfiddle&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d3e2ac84f369516b4679504380704ab691b46d64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Object destructuring&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Desestructuraci&amp;oacute;n de objetos&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7e71c4b21183bc960b08fecf2f982d00528e1feb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Syntax: object[propery}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Sintaxis: objeto [propiedad}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c643f909c24e9c6fe6ffe8f40faf79ddc5b79028" translate="yes" xml:space="preserve">
          <source>Accessing root properties in object is easily achieved with &lt;code&gt;obj[variable]&lt;/code&gt;, but getting nested complicates thing. Not to write already written code I suggest to use &lt;code&gt;lodash.get&lt;/code&gt;.</source>
          <target state="translated">Acceder a las propiedades ra&amp;iacute;z en el objeto se logra f&amp;aacute;cilmente con &lt;code&gt;obj[variable]&lt;/code&gt; , pero anidarse complica las cosas. Para no escribir c&amp;oacute;digo ya escrito, sugiero usar &lt;code&gt;lodash.get&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2458e6a451d94dc8ed4928ae8f51181b5f7505c5" translate="yes" xml:space="preserve">
          <source>As a side note, the getComputedValue method only gets, it does not set. This, obviously is a major downside, however there is a method that gets from CSS style-sheets, as well as sets values, though it is not standard Javascript.
The JQuery method...</source>
          <target state="translated">Como nota al margen,el método getComputedValue sólo obtiene,no establece.Esto,obviamente es una gran desventaja,sin embargo hay un método que obtiene de las hojas de estilo CSS,así como establece valores,aunque no es el estándar de Javascript.El método JQuery...</target>
        </trans-unit>
        <trans-unit id="574fd35796c44aee0aa95b671e86d5bbf53e0e1c" translate="yes" xml:space="preserve">
          <source>Both dot and bracket notation also work as expected for nested objects:</source>
          <target state="translated">Tanto la notación de puntos como la de corchetes también funcionan como se espera para los objetos anidados:</target>
        </trans-unit>
        <trans-unit id="100b7f9acafb0a410aae5ec157e6e2257f1c9a81" translate="yes" xml:space="preserve">
          <source>Bracket notation: &lt;code&gt;something['bar']&lt;/code&gt;</source>
          <target state="translated">Notaci&amp;oacute;n de corchetes: &lt;code&gt;something['bar']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="826d15187714c567527286ff90b53701b7812cc5" translate="yes" xml:space="preserve">
          <source>But only second case allows to access properties dynamically:</source>
          <target state="translated">Pero sólo el segundo caso permite acceder a las propiedades de forma dinámica:</target>
        </trans-unit>
        <trans-unit id="33224c361c9a7c3bd3d441c33da01cd6061e3422" translate="yes" xml:space="preserve">
          <source>Cheers!</source>
          <target state="translated">Cheers!</target>
        </trans-unit>
        <trans-unit id="176d2d27407b883b38dbc37b0ab15b4f40caea07" translate="yes" xml:space="preserve">
          <source>Dot notation: &lt;code&gt;something.bar&lt;/code&gt;</source>
          <target state="translated">Notaci&amp;oacute;n de puntos: &lt;code&gt;something.bar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3531c1f73bb03f602e7bec16f4152d300db145e9" translate="yes" xml:space="preserve">
          <source>Dynamically access object property using variable</source>
          <target state="translated">Acceder dinámicamente a la propiedad del objeto utilizando variables</target>
        </trans-unit>
        <trans-unit id="72d2971f8b0dd52d0f70eb306db1f5b4576d457c" translate="yes" xml:space="preserve">
          <source>ES5 // Check Deeply Nested Variables</source>
          <target state="translated">ES5/Comprobar las variables profundamente anidadas</target>
        </trans-unit>
        <trans-unit id="540d4bfb3f3963908155e7756b108079c9c3bb38" translate="yes" xml:space="preserve">
          <source>Ex. - a deeply nested array of objects:</source>
          <target state="translated">Ex.-un conjunto de objetos profundamente anidados:</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Ampliar fragmento</target>
        </trans-unit>
        <trans-unit id="c7bcc52db88528b7b02efbf655be86ac20bfc285" translate="yes" xml:space="preserve">
          <source>Firstly I want to address that there are several ways to obtain the value of a property and store it in a dynamic Variable. The first most popular, and easiest way IMHO would be:</source>
          <target state="translated">En primer lugar quiero abordar que hay varias maneras de obtener el valor de una propiedad y almacenarlo en una Variable dinámica.La primera forma más popular,y más fácil,sería IMHO:</target>
        </trans-unit>
        <trans-unit id="507a1593e5924a1a3698a78b330a2da5ef3ede16" translate="yes" xml:space="preserve">
          <source>Following is an ES6 example of how you can access the property of an object using a property name that has been dynamically generated by concatenating two strings.</source>
          <target state="translated">A continuación se muestra un ejemplo ES6 de cómo se puede acceder a la propiedad de un objeto utilizando un nombre de propiedad que se ha generado dinámicamente mediante la concatenación de dos cadenas.</target>
        </trans-unit>
        <trans-unit id="3dd26891ee75d1677720219301e02753b66b0f1a" translate="yes" xml:space="preserve">
          <source>Henceforth the getComputedStyle() method!</source>
          <target state="translated">A partir de ahora el método getComputedStyle()!</target>
        </trans-unit>
        <trans-unit id="d33a241581123a82e44aa78976fb98d5f4d91667" translate="yes" xml:space="preserve">
          <source>Here's a sample of a language file object like the one I wanted data from:</source>
          <target state="translated">Aquí hay una muestra de un objeto de archivo de lenguaje como el que quería datos:</target>
        </trans-unit>
        <trans-unit id="842a00338e4c2a3840c891596d991a493d750a4f" translate="yes" xml:space="preserve">
          <source>I asked a question that kinda duplicated on this topic a while back, and after excessive research, and seeing a lot of information missing that should be here, I feel I have something valuable to add to this older post.</source>
          <target state="translated">Hice una pregunta que se duplicó un poco sobre este tema hace un tiempo,y después de una investigación excesiva,y viendo que falta mucha información que debería estar aquí,siento que tengo algo valioso que añadir a este antiguo post.</target>
        </trans-unit>
        <trans-unit id="707897a43cb9f078387a72e4b8735143038542d7" translate="yes" xml:space="preserve">
          <source>I came across a case where &lt;em&gt;I thought&lt;/em&gt; I wanted to pass the &quot;address&quot; of an object property as data to another function and populate the object (with AJAX), do lookup from address array, and display in that other function. I couldn't use dot notation without doing string acrobatics so I thought an array might be nice to pass instead. I ended-up doing something different anyway, but seemed related to this post.</source>
          <target state="translated">Encontr&amp;eacute; un caso en el &lt;em&gt;que pens&amp;eacute;&lt;/em&gt; que quer&amp;iacute;a pasar la &quot;direcci&amp;oacute;n&quot; de una propiedad de objeto como datos a otra funci&amp;oacute;n y llenar el objeto (con AJAX), buscar desde la matriz de direcciones y mostrar esa otra funci&amp;oacute;n. No pod&amp;iacute;a usar la notaci&amp;oacute;n de puntos sin hacer acrobacias de cuerdas, as&amp;iacute; que pens&amp;eacute; que ser&amp;iacute;a bueno pasar una matriz. Termin&amp;eacute; haciendo algo diferente de todos modos, pero parec&amp;iacute;a relacionado con esta publicaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="0832814a494a22df1c2e0d3813af3745876c268d" translate="yes" xml:space="preserve">
          <source>I created this little function that looks-up the &quot;least specific&quot; (first) address parameter, and reassigns the returned object to itself. Then it is ready to look-up the next-most-specific address parameter if one exists.</source>
          <target state="translated">He creado esta pequeña función que busca el parámetro de dirección &quot;menos específico&quot; (primero),y reasigna el objeto devuelto a sí mismo.Luego está lista para buscar el siguiente parámetro de dirección más específico,si existe.</target>
        </trans-unit>
        <trans-unit id="c814bfa8149a71d74493da6c18ffa015799e9e51" translate="yes" xml:space="preserve">
          <source>I have take comments below into consideration and agreed. Eval is to be avoided.</source>
          <target state="translated">He tomado en consideración las observaciones que figuran a continuación y he aceptado.La evaluación debe evitarse.</target>
        </trans-unit>
        <trans-unit id="4f8ffec12cb60d47e9343d75df82945036bc5214" translate="yes" xml:space="preserve">
          <source>I wanted to be able to pass an array such as: [&quot;audioPlayer&quot;, &quot;controls&quot;, &quot;stop&quot;] to access the language text, &quot;stop&quot; in this case.</source>
          <target state="translated">Quería ser capaz de pasar una matriz como:[&quot;audioPlayer&quot;,&quot;controles&quot;,&quot;stop&quot;]para acceder al texto del idioma,&quot;stop&quot; en este caso.</target>
        </trans-unit>
        <trans-unit id="00e49bdf87fbd4149bdc18f10639c5d4640d4ead" translate="yes" xml:space="preserve">
          <source>I'm trying to access a property of an object using a dynamic name. Is this possible?</source>
          <target state="translated">Estoy tratando de acceder a una propiedad de un objeto usando un nombre dinámico.¿Es esto posible?</target>
        </trans-unit>
        <trans-unit id="91280a13680e9ef6d1d2b711ba922c7fbc22fc47" translate="yes" xml:space="preserve">
          <source>If you want to get nested value dynamically (e.g. by variable), your best option will be to use &lt;code&gt;lodash&lt;/code&gt;.</source>
          <target state="translated">Si desea obtener un valor anidado din&amp;aacute;micamente (por ejemplo, por variable), su mejor opci&amp;oacute;n ser&amp;aacute; usar &lt;code&gt;lodash&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8a03446a3c744bd4e20c6a63b0fe86ebbe6067ce" translate="yes" xml:space="preserve">
          <source>In javascript we can access with:</source>
          <target state="translated">En javascript podemos acceder con:</target>
        </trans-unit>
        <trans-unit id="bda969d76438f0f7004c442304e6649095ebaca3" translate="yes" xml:space="preserve">
          <source>Instead of :</source>
          <target state="translated">En lugar de..:</target>
        </trans-unit>
        <trans-unit id="6fabfc3a48599c0faf28da30b525172d6ce7e23b" translate="yes" xml:space="preserve">
          <source>It gets interesting when you have to pass parameters to this function as well.</source>
          <target state="translated">Se pone interesante cuando tienes que pasar parámetros a esta función también.</target>
        </trans-unit>
        <trans-unit id="a21b10f7a9259ba4e8d43093e46635c7d7476672" translate="yes" xml:space="preserve">
          <source>Lodash get can be used on different ways, here is link to the documentation &lt;a href=&quot;https://lodash.com/docs/4.16.2#get&quot;&gt;lodash.get&lt;/a&gt;</source>
          <target state="translated">Lodash get se puede usar de diferentes maneras, aqu&amp;iacute; hay un enlace a la documentaci&amp;oacute;n &lt;a href=&quot;https://lodash.com/docs/4.16.2#get&quot;&gt;lodash.get&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="27c2f3a0a0cc2f77c7527ec178c49d6519499558" translate="yes" xml:space="preserve">
          <source>The bracket notation is specially powerful as it let's you access a property based on a variable:</source>
          <target state="translated">La notación de paréntesis es especialmente poderosa ya que te permite acceder a una propiedad basada en una variable:</target>
        </trans-unit>
        <trans-unit id="2ac263e4e24512071dd0712a0859ab9284fec838" translate="yes" xml:space="preserve">
          <source>The value between the brackets can be any expression. Therefore, if the property name is stored in a variable, you have to use bracket notation:</source>
          <target state="translated">El valor entre los paréntesis puede ser cualquier expresión.Por lo tanto,si el nombre de la propiedad se almacena en una variable,hay que utilizar la notación de paréntesis:</target>
        </trans-unit>
        <trans-unit id="132f275aaeff40036a6f46cc811e3754f3401cde" translate="yes" xml:space="preserve">
          <source>There are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors&quot;&gt;two ways to access properties&lt;/a&gt; of an object:</source>
          <target state="translated">Hay &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors&quot;&gt;dos formas de acceder a las propiedades&lt;/a&gt; de un objeto:</target>
        </trans-unit>
        <trans-unit id="9c380f38332515f6914fc7eaa0cda268da4cb375" translate="yes" xml:space="preserve">
          <source>There is a few possibilities:</source>
          <target state="translated">Hay algunas posibilidades:</target>
        </trans-unit>
        <trans-unit id="cb2803628217be24d3c0fe5bdbf6820128c20e16" translate="yes" xml:space="preserve">
          <source>This can be extended to looping over every property of an object. This can be seem redundant due to newer JavaScript constructs such as for ... of ..., but helps illustrate a use case:</source>
          <target state="translated">Esto puede extenderse a un bucle sobre cada propiedad de un objeto.Esto puede parecer redundante debido a las nuevas construcciones de JavaScript como para ...de ...,pero ayuda a ilustrar un caso de uso:</target>
        </trans-unit>
        <trans-unit id="d5897b72f294fb8aa0d76e3c83990ba94218ede5" translate="yes" xml:space="preserve">
          <source>This is called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names&quot;&gt;computed property names&lt;/a&gt;</source>
          <target state="translated">Esto se llama &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names&quot;&gt;nombres de propiedades calculadas&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bb351f2719c894112e98defaee21c53d17baa96e" translate="yes" xml:space="preserve">
          <source>This is my solution:</source>
          <target state="translated">Esta es mi solución:</target>
        </trans-unit>
        <trans-unit id="d26fb6c93ce3e23f974697d5258ac71dfc64789b" translate="yes" xml:space="preserve">
          <source>This simple piece of code can check for deeply nested variable / value existence without having to check each variable along the way...</source>
          <target state="translated">Este simple trozo de código puede comprobar la existencia de valores de variables profundamente anidados sin tener que comprobar cada variable a lo largo del camino...</target>
        </trans-unit>
        <trans-unit id="47b23b39759a1908e680a0a3b5cb3c99d6de735e" translate="yes" xml:space="preserve">
          <source>UPDATED</source>
          <target state="translated">UPDATED</target>
        </trans-unit>
        <trans-unit id="173610cb31251b28e80fadc258036215d99d7128" translate="yes" xml:space="preserve">
          <source>Usage examples:</source>
          <target state="translated">Ejemplos de uso:</target>
        </trans-unit>
        <trans-unit id="a2f2e6eafdedf44c2e8588c6802550826e518631" translate="yes" xml:space="preserve">
          <source>Using the code example above; if the width property of the div element that was stored in the 'elem' variable was styled in a CSS style-sheet, and not styled inside of its HTML tag, you are without a doubt going to get a return value of undefined stored inside of the cssProp variable. The undefined value occurs because in-order to get the correct value, the code written inside a CSS Style-Sheet needs to be computed in-order to get the value, therefore; you must use a method that will compute the value of the property who's value lies within the style-sheet.</source>
          <target state="translated">Usando el ejemplo de código anterior;si la propiedad width del elemento div que fue almacenado en la variable 'elem' fue estilizada en una hoja de estilo CSS,y no estilizada dentro de su etiqueta HTML,sin duda vas a obtener un valor de retorno de lo indefinido almacenado dentro de la variable cssProp.El valor indefinido ocurre porque para obtener el valor correcto,el código escrito dentro de una hoja de estilo CSS necesita ser computado para obtener el valor,por lo tanto;debes usar un método que calcule el valor de la propiedad cuyo valor se encuentra dentro de la hoja de estilo.</target>
        </trans-unit>
        <trans-unit id="48e8ba76225406f888b41920a486bfe0a1201059" translate="yes" xml:space="preserve">
          <source>We can now :</source>
          <target state="translated">Ahora podemos:</target>
        </trans-unit>
        <trans-unit id="c99a6a3da67239a2e588104d2e10d14369e0b4e5" translate="yes" xml:space="preserve">
          <source>We could also consider object destructuring as a means to access a property in an object, but as follows:</source>
          <target state="translated">También podríamos considerar la desestructuración del objeto como un medio para acceder a la propiedad de un objeto,pero de la siguiente manera:</target>
        </trans-unit>
        <trans-unit id="3905357ebf181c4b50e393bb69a3d74f87b025bd" translate="yes" xml:space="preserve">
          <source>Whenever you need to access property dynamically you have to use square bracket for accessing property not &quot;.&quot; operator</source>
          <target state="translated">Siempre que necesites acceder a una propiedad de forma dinámica tienes que usar el corchete para acceder a la propiedad no &quot;.&quot; operador</target>
        </trans-unit>
        <trans-unit id="8c2f72513c8502b8b436677eb1fd1a8286c418b5" translate="yes" xml:space="preserve">
          <source>You can achieve this in quite a few different ways.</source>
          <target state="translated">Se puede lograr esto de varias maneras diferentes.</target>
        </trans-unit>
        <trans-unit id="b7ecbd70c7f912bb6ec39411ca0b2d318f260940" translate="yes" xml:space="preserve">
          <source>You can do it like this using Lodash get</source>
          <target state="translated">Puedes hacerlo así usando Lodash get</target>
        </trans-unit>
        <trans-unit id="11904d98efc1e0b6e5d5f477b61a849dec2d5680" translate="yes" xml:space="preserve">
          <source>You should use &lt;code&gt;JSON.parse&lt;/code&gt;, take a look at &lt;a href=&quot;https://www.w3schools.com/js/js_json_parse.asp&quot;&gt;https://www.w3schools.com/js/js_json_parse.asp&lt;/a&gt;</source>
          <target state="translated">Deber&amp;iacute;a usar &lt;code&gt;JSON.parse&lt;/code&gt; , eche un vistazo a &lt;a href=&quot;https://www.w3schools.com/js/js_json_parse.asp&quot;&gt;https://www.w3schools.com/js/js_json_parse.asp&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0a3772e1dbfdf192051b80d4e269ce0fbdb1f2d7" translate="yes" xml:space="preserve">
          <source>dot notation     - &lt;code&gt;foo.bar&lt;/code&gt;</source>
          <target state="translated">notaci&amp;oacute;n de puntos - &lt;code&gt;foo.bar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c7263c675a6d65b6436a45aadd91cf3f6db7ef15" translate="yes" xml:space="preserve">
          <source>however I rarely go this route because it doesn't work on property values assigned via style-sheets. To give you an example, I'll demonstrate with a bit of pseudo code.</source>
          <target state="translated">Sin embargo,raramente sigo esta ruta porque no funciona con los valores de propiedad asignados a través de las hojas de estilo.Para darte un ejemplo,te lo demostraré con un poco de pseudo código.</target>
        </trans-unit>
        <trans-unit id="19465118b87f9cbe4a18959dde3553907dae9e6b" translate="yes" xml:space="preserve">
          <source>square brackets  - &lt;code&gt;foo[someVar]&lt;/code&gt; or &lt;code&gt;foo[&quot;string&quot;]&lt;/code&gt;</source>
          <target state="translated">corchetes - &lt;code&gt;foo[someVar]&lt;/code&gt; o &lt;code&gt;foo[&quot;string&quot;]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d99f66b852fef055214f1f6c4e0864afe932b13e" translate="yes" xml:space="preserve">
          <source>usage:</source>
          <target state="translated">usage:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
