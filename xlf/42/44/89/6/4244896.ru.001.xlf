<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/4244896">
    <body>
      <group id="4244896">
        <trans-unit id="c25a232090a075394a2c0ea94d2f48e5b00f9443" translate="yes" xml:space="preserve">
          <source>...does get, and does set. It is what I use, the only downside is you got to know JQuery, but this is honestly one of the very many good reasons that every Javascript Developer should learn JQuery, it just makes life easy, and offers methods, like this one, which is not available with standard Javascript.
Hope this helps someone!!!</source>
          <target state="translated">...получает и устанавливает.Это то,что я использую,единственный минус в том,что вы познакомились с JQuery,но это,честно говоря,одна из многих веских причин,по которой каждый разработчик Javascript должен выучить JQuery,это просто облегчает жизнь,и предлагает методы,подобные этому,которые недоступны со стандартным Javascript.Надеюсь,это кому-нибудь поможет!!!</target>
        </trans-unit>
        <trans-unit id="9fac3d93857c0fb8f4bef5e89d7bbed95b49b5d8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.w3schools.com/jsref/jsref_getcomputedstyle.asp&quot;&gt;W3Schools getComputedValue Doc&lt;/a&gt; This gives a good example, and lets you play with it, however, this link &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/computed_value&quot;&gt;Mozilla CSS getComputedValue doc&lt;/a&gt; talks about the getComputedValue function in detail, and should be read by any aspiring developer who isn't totally clear on this subject.</source>
          <target state="translated">&lt;a href=&quot;https://www.w3schools.com/jsref/jsref_getcomputedstyle.asp&quot;&gt;W3Schools getComputedValue Doc&lt;/a&gt; Это хороший пример и позволяет вам поиграть с ним, однако, эта ссылка &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/computed_value&quot;&gt;Mozilla CSS getComputedValue doc&lt;/a&gt; рассказывает о функции getComputedValue подробно и должна быть прочитана любым начинающим разработчиком, который не совсем понимает эту тему.</target>
        </trans-unit>
        <trans-unit id="972a33f942039a3a3949adc61004acb034b7b096" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Code&lt;/strong&gt;&lt;em&gt;&lt;a href=&quot;https://jsfiddle.net/sb2ofndy/&quot;&gt;jsfiddle&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;Code&lt;/strong&gt;&lt;em&gt;&lt;a href=&quot;https://jsfiddle.net/sb2ofndy/&quot;&gt;jsfiddle&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d3e2ac84f369516b4679504380704ab691b46d64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Object destructuring&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Деструктуризация объекта&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7e71c4b21183bc960b08fecf2f982d00528e1feb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Syntax: object[propery}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Синтаксис: object [Propery}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c643f909c24e9c6fe6ffe8f40faf79ddc5b79028" translate="yes" xml:space="preserve">
          <source>Accessing root properties in object is easily achieved with &lt;code&gt;obj[variable]&lt;/code&gt;, but getting nested complicates thing. Not to write already written code I suggest to use &lt;code&gt;lodash.get&lt;/code&gt;.</source>
          <target state="translated">Доступ к корневым свойствам объекта легко достигается с помощью &lt;code&gt;obj[variable]&lt;/code&gt; , но получение вложенных элементов усложняет задачу. Чтобы не писать уже написанный код, предлагаю использовать &lt;code&gt;lodash.get&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2458e6a451d94dc8ed4928ae8f51181b5f7505c5" translate="yes" xml:space="preserve">
          <source>As a side note, the getComputedValue method only gets, it does not set. This, obviously is a major downside, however there is a method that gets from CSS style-sheets, as well as sets values, though it is not standard Javascript.
The JQuery method...</source>
          <target state="translated">На заметку,метод getComputedValue только получает,он не устанавливает.Это,очевидно,большой недостаток,однако есть метод,который получает из таблиц стилей CSS,а также устанавливает значения,хотя это и не стандартный Javascript.Метод JQuery...</target>
        </trans-unit>
        <trans-unit id="574fd35796c44aee0aa95b671e86d5bbf53e0e1c" translate="yes" xml:space="preserve">
          <source>Both dot and bracket notation also work as expected for nested objects:</source>
          <target state="translated">И точка,и нотация в скобках также работают,как и ожидалось,для вложенных объектов:</target>
        </trans-unit>
        <trans-unit id="100b7f9acafb0a410aae5ec157e6e2257f1c9a81" translate="yes" xml:space="preserve">
          <source>Bracket notation: &lt;code&gt;something['bar']&lt;/code&gt;</source>
          <target state="translated">Обозначение в скобках: &lt;code&gt;something['bar']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="826d15187714c567527286ff90b53701b7812cc5" translate="yes" xml:space="preserve">
          <source>But only second case allows to access properties dynamically:</source>
          <target state="translated">Но только второй случай позволяет получить динамический доступ к свойствам:</target>
        </trans-unit>
        <trans-unit id="33224c361c9a7c3bd3d441c33da01cd6061e3422" translate="yes" xml:space="preserve">
          <source>Cheers!</source>
          <target state="translated">Cheers!</target>
        </trans-unit>
        <trans-unit id="176d2d27407b883b38dbc37b0ab15b4f40caea07" translate="yes" xml:space="preserve">
          <source>Dot notation: &lt;code&gt;something.bar&lt;/code&gt;</source>
          <target state="translated">Точечная запись: &lt;code&gt;something.bar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3531c1f73bb03f602e7bec16f4152d300db145e9" translate="yes" xml:space="preserve">
          <source>Dynamically access object property using variable</source>
          <target state="translated">Динамический доступ к свойству объекта с помощью переменной</target>
        </trans-unit>
        <trans-unit id="72d2971f8b0dd52d0f70eb306db1f5b4576d457c" translate="yes" xml:space="preserve">
          <source>ES5 // Check Deeply Nested Variables</source>
          <target state="translated">ES5/Проверка глубоко вложенных переменных</target>
        </trans-unit>
        <trans-unit id="540d4bfb3f3963908155e7756b108079c9c3bb38" translate="yes" xml:space="preserve">
          <source>Ex. - a deeply nested array of objects:</source>
          <target state="translated">Бывший.-глубоко вложенный массив объектов:</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Расширить фрагмент</target>
        </trans-unit>
        <trans-unit id="c7bcc52db88528b7b02efbf655be86ac20bfc285" translate="yes" xml:space="preserve">
          <source>Firstly I want to address that there are several ways to obtain the value of a property and store it in a dynamic Variable. The first most popular, and easiest way IMHO would be:</source>
          <target state="translated">Во-первых,я хочу обратить внимание на то,что есть несколько способов получить значение свойства и хранить его в динамической переменной.Первый наиболее популярный и простой способ IMHO:</target>
        </trans-unit>
        <trans-unit id="507a1593e5924a1a3698a78b330a2da5ef3ede16" translate="yes" xml:space="preserve">
          <source>Following is an ES6 example of how you can access the property of an object using a property name that has been dynamically generated by concatenating two strings.</source>
          <target state="translated">Ниже приведен пример ES6,как вы можете получить доступ к свойству объекта,используя имя свойства,которое было динамически сгенерировано путем объединения двух строк.</target>
        </trans-unit>
        <trans-unit id="3dd26891ee75d1677720219301e02753b66b0f1a" translate="yes" xml:space="preserve">
          <source>Henceforth the getComputedStyle() method!</source>
          <target state="translated">Отныне метод getComputedStyle()!</target>
        </trans-unit>
        <trans-unit id="d33a241581123a82e44aa78976fb98d5f4d91667" translate="yes" xml:space="preserve">
          <source>Here's a sample of a language file object like the one I wanted data from:</source>
          <target state="translated">Вот пример объекта языкового файла,похожего на тот,от которого я хотел получить данные:</target>
        </trans-unit>
        <trans-unit id="842a00338e4c2a3840c891596d991a493d750a4f" translate="yes" xml:space="preserve">
          <source>I asked a question that kinda duplicated on this topic a while back, and after excessive research, and seeing a lot of information missing that should be here, I feel I have something valuable to add to this older post.</source>
          <target state="translated">Я задал вопрос,который вроде как дублировался на эту тему некоторое время назад,и после чрезмерных исследований,и увидев,что здесь не хватает много информации,я чувствую,что у меня есть что-то ценное,что я могу добавить в этот старый пост.</target>
        </trans-unit>
        <trans-unit id="707897a43cb9f078387a72e4b8735143038542d7" translate="yes" xml:space="preserve">
          <source>I came across a case where &lt;em&gt;I thought&lt;/em&gt; I wanted to pass the &quot;address&quot; of an object property as data to another function and populate the object (with AJAX), do lookup from address array, and display in that other function. I couldn't use dot notation without doing string acrobatics so I thought an array might be nice to pass instead. I ended-up doing something different anyway, but seemed related to this post.</source>
          <target state="translated">Я натолкнулся на случай, когда &lt;em&gt;мне&lt;/em&gt; захотелось передать &amp;laquo;адрес&amp;raquo; свойства объекта в качестве данных другой функции и заполнить объект (с помощью AJAX), выполнить поиск из массива адресов и отобразить в этой другой функции. Я не мог использовать точечную запись без строковой акробатики, поэтому я подумал, что вместо этого лучше передать массив. В конце концов, я все-таки сделал что-то другое, но, похоже, связано с этим постом.</target>
        </trans-unit>
        <trans-unit id="0832814a494a22df1c2e0d3813af3745876c268d" translate="yes" xml:space="preserve">
          <source>I created this little function that looks-up the &quot;least specific&quot; (first) address parameter, and reassigns the returned object to itself. Then it is ready to look-up the next-most-specific address parameter if one exists.</source>
          <target state="translated">Я создал эту маленькую функцию,которая ищет &quot;наименее конкретный&quot; (первый)адресный параметр,и переназначает возвращаемый объект себе.Затем она готова к поиску следующего наиболее специфического адресного параметра,если он существует.</target>
        </trans-unit>
        <trans-unit id="c814bfa8149a71d74493da6c18ffa015799e9e51" translate="yes" xml:space="preserve">
          <source>I have take comments below into consideration and agreed. Eval is to be avoided.</source>
          <target state="translated">Я принял к сведению и согласен с приведенными ниже замечаниями.Оценки следует избегать.</target>
        </trans-unit>
        <trans-unit id="4f8ffec12cb60d47e9343d75df82945036bc5214" translate="yes" xml:space="preserve">
          <source>I wanted to be able to pass an array such as: [&quot;audioPlayer&quot;, &quot;controls&quot;, &quot;stop&quot;] to access the language text, &quot;stop&quot; in this case.</source>
          <target state="translated">Я хотел иметь возможность передавать такой массив,как..:[&quot;audioPlayer&quot;,&quot;controls&quot;,&quot;stop&quot;]для доступа к тексту языка,&quot;stop&quot; в данном случае.</target>
        </trans-unit>
        <trans-unit id="00e49bdf87fbd4149bdc18f10639c5d4640d4ead" translate="yes" xml:space="preserve">
          <source>I'm trying to access a property of an object using a dynamic name. Is this possible?</source>
          <target state="translated">Я пытаюсь получить доступ к свойствам объекта,используя динамическое имя.Это возможно?</target>
        </trans-unit>
        <trans-unit id="91280a13680e9ef6d1d2b711ba922c7fbc22fc47" translate="yes" xml:space="preserve">
          <source>If you want to get nested value dynamically (e.g. by variable), your best option will be to use &lt;code&gt;lodash&lt;/code&gt;.</source>
          <target state="translated">Если вы хотите получить вложенное значение динамически (например, по переменной), лучшим вариантом будет использование &lt;code&gt;lodash&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8a03446a3c744bd4e20c6a63b0fe86ebbe6067ce" translate="yes" xml:space="preserve">
          <source>In javascript we can access with:</source>
          <target state="translated">С помощью javascript мы можем получить доступ:</target>
        </trans-unit>
        <trans-unit id="bda969d76438f0f7004c442304e6649095ebaca3" translate="yes" xml:space="preserve">
          <source>Instead of :</source>
          <target state="translated">Вместо :</target>
        </trans-unit>
        <trans-unit id="6fabfc3a48599c0faf28da30b525172d6ce7e23b" translate="yes" xml:space="preserve">
          <source>It gets interesting when you have to pass parameters to this function as well.</source>
          <target state="translated">Интересно,когда приходится передавать параметры и этой функции.</target>
        </trans-unit>
        <trans-unit id="a21b10f7a9259ba4e8d43093e46635c7d7476672" translate="yes" xml:space="preserve">
          <source>Lodash get can be used on different ways, here is link to the documentation &lt;a href=&quot;https://lodash.com/docs/4.16.2#get&quot;&gt;lodash.get&lt;/a&gt;</source>
          <target state="translated">Lodash get можно использовать по-разному, вот ссылка на документацию &lt;a href=&quot;https://lodash.com/docs/4.16.2#get&quot;&gt;lodash.get&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="27c2f3a0a0cc2f77c7527ec178c49d6519499558" translate="yes" xml:space="preserve">
          <source>The bracket notation is specially powerful as it let's you access a property based on a variable:</source>
          <target state="translated">Нотация в скобках особенно мощная,так как она позволяет получить доступ к свойству,основанному на переменной:</target>
        </trans-unit>
        <trans-unit id="2ac263e4e24512071dd0712a0859ab9284fec838" translate="yes" xml:space="preserve">
          <source>The value between the brackets can be any expression. Therefore, if the property name is stored in a variable, you have to use bracket notation:</source>
          <target state="translated">Значение между скобками может быть любым выражением.Поэтому,если имя свойства хранится в переменной,необходимо использовать обозначение в скобках:</target>
        </trans-unit>
        <trans-unit id="132f275aaeff40036a6f46cc811e3754f3401cde" translate="yes" xml:space="preserve">
          <source>There are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors&quot;&gt;two ways to access properties&lt;/a&gt; of an object:</source>
          <target state="translated">Есть &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors&quot;&gt;два способа получить доступ к свойствам&lt;/a&gt; объекта:</target>
        </trans-unit>
        <trans-unit id="9c380f38332515f6914fc7eaa0cda268da4cb375" translate="yes" xml:space="preserve">
          <source>There is a few possibilities:</source>
          <target state="translated">Есть несколько возможностей:</target>
        </trans-unit>
        <trans-unit id="cb2803628217be24d3c0fe5bdbf6820128c20e16" translate="yes" xml:space="preserve">
          <source>This can be extended to looping over every property of an object. This can be seem redundant due to newer JavaScript constructs such as for ... of ..., but helps illustrate a use case:</source>
          <target state="translated">Это может быть расширено до петлевания над каждой собственностью объекта.Это может показаться избыточным из-за новых конструкций JavaScript,таких как для ...из ...,но помогает проиллюстрировать пример использования:</target>
        </trans-unit>
        <trans-unit id="d5897b72f294fb8aa0d76e3c83990ba94218ede5" translate="yes" xml:space="preserve">
          <source>This is called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names&quot;&gt;computed property names&lt;/a&gt;</source>
          <target state="translated">Это называется &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names&quot;&gt;вычисляемым именем свойства&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bb351f2719c894112e98defaee21c53d17baa96e" translate="yes" xml:space="preserve">
          <source>This is my solution:</source>
          <target state="translated">Это мое решение:</target>
        </trans-unit>
        <trans-unit id="d26fb6c93ce3e23f974697d5258ac71dfc64789b" translate="yes" xml:space="preserve">
          <source>This simple piece of code can check for deeply nested variable / value existence without having to check each variable along the way...</source>
          <target state="translated">Этот простой кусок кода может проверить существование глубоко вложенных значений переменных без необходимости проверять каждую переменную по пути....</target>
        </trans-unit>
        <trans-unit id="47b23b39759a1908e680a0a3b5cb3c99d6de735e" translate="yes" xml:space="preserve">
          <source>UPDATED</source>
          <target state="translated">UPDATED</target>
        </trans-unit>
        <trans-unit id="173610cb31251b28e80fadc258036215d99d7128" translate="yes" xml:space="preserve">
          <source>Usage examples:</source>
          <target state="translated">Примеры использования:</target>
        </trans-unit>
        <trans-unit id="a2f2e6eafdedf44c2e8588c6802550826e518631" translate="yes" xml:space="preserve">
          <source>Using the code example above; if the width property of the div element that was stored in the 'elem' variable was styled in a CSS style-sheet, and not styled inside of its HTML tag, you are without a doubt going to get a return value of undefined stored inside of the cssProp variable. The undefined value occurs because in-order to get the correct value, the code written inside a CSS Style-Sheet needs to be computed in-order to get the value, therefore; you must use a method that will compute the value of the property who's value lies within the style-sheet.</source>
          <target state="translated">Используя приведенный выше пример кода,если свойство width элемента div,который хранился в переменной 'elem',было стилизовано в стиле CSS,а не стилизовано внутри ее HTML-тега,то вы,несомненно,получите возвращаемое значение неопределенного элемента,хранящегося внутри переменной cssProp.Неопределённое значение возникает из-за того,что для получения правильного значения код,написанный внутри таблицы стилей CSS,должен быть вычислен в порядке получения значения,поэтому необходимо использовать метод,который вычислит значение свойства,значение которого находится внутри таблицы стилей.</target>
        </trans-unit>
        <trans-unit id="48e8ba76225406f888b41920a486bfe0a1201059" translate="yes" xml:space="preserve">
          <source>We can now :</source>
          <target state="translated">Теперь мы можем:</target>
        </trans-unit>
        <trans-unit id="c99a6a3da67239a2e588104d2e10d14369e0b4e5" translate="yes" xml:space="preserve">
          <source>We could also consider object destructuring as a means to access a property in an object, but as follows:</source>
          <target state="translated">Уничтожение объекта также можно рассматривать как средство доступа к свойству в объекте,но следующим образом:</target>
        </trans-unit>
        <trans-unit id="3905357ebf181c4b50e393bb69a3d74f87b025bd" translate="yes" xml:space="preserve">
          <source>Whenever you need to access property dynamically you have to use square bracket for accessing property not &quot;.&quot; operator</source>
          <target state="translated">Всякий раз,когда вам необходимо получить динамический доступ к свойству,вы должны использовать квадратную скобку для доступа к свойству,а не оператор &quot;.</target>
        </trans-unit>
        <trans-unit id="8c2f72513c8502b8b436677eb1fd1a8286c418b5" translate="yes" xml:space="preserve">
          <source>You can achieve this in quite a few different ways.</source>
          <target state="translated">Вы можете достичь этого несколькими разными способами.</target>
        </trans-unit>
        <trans-unit id="b7ecbd70c7f912bb6ec39411ca0b2d318f260940" translate="yes" xml:space="preserve">
          <source>You can do it like this using Lodash get</source>
          <target state="translated">Ты можешь сделать это так,используя Lodash получить</target>
        </trans-unit>
        <trans-unit id="11904d98efc1e0b6e5d5f477b61a849dec2d5680" translate="yes" xml:space="preserve">
          <source>You should use &lt;code&gt;JSON.parse&lt;/code&gt;, take a look at &lt;a href=&quot;https://www.w3schools.com/js/js_json_parse.asp&quot;&gt;https://www.w3schools.com/js/js_json_parse.asp&lt;/a&gt;</source>
          <target state="translated">Вы должны использовать &lt;code&gt;JSON.parse&lt;/code&gt; , посмотрите &lt;a href=&quot;https://www.w3schools.com/js/js_json_parse.asp&quot;&gt;https://www.w3schools.com/js/js_json_parse.asp&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0a3772e1dbfdf192051b80d4e269ce0fbdb1f2d7" translate="yes" xml:space="preserve">
          <source>dot notation     - &lt;code&gt;foo.bar&lt;/code&gt;</source>
          <target state="translated">точечная нотация - &lt;code&gt;foo.bar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c7263c675a6d65b6436a45aadd91cf3f6db7ef15" translate="yes" xml:space="preserve">
          <source>however I rarely go this route because it doesn't work on property values assigned via style-sheets. To give you an example, I'll demonstrate with a bit of pseudo code.</source>
          <target state="translated">Однако я редко иду по этому маршруту,потому что он не работает со значениями свойств,назначенными через таблицы стилей.Чтобы привести пример,я продемонстрирую его немного псевдокодом.</target>
        </trans-unit>
        <trans-unit id="19465118b87f9cbe4a18959dde3553907dae9e6b" translate="yes" xml:space="preserve">
          <source>square brackets  - &lt;code&gt;foo[someVar]&lt;/code&gt; or &lt;code&gt;foo[&quot;string&quot;]&lt;/code&gt;</source>
          <target state="translated">квадратные скобки - &lt;code&gt;foo[someVar]&lt;/code&gt; или &lt;code&gt;foo[&quot;string&quot;]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d99f66b852fef055214f1f6c4e0864afe932b13e" translate="yes" xml:space="preserve">
          <source>usage:</source>
          <target state="translated">usage:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
