<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/805107">
    <body>
      <group id="805107">
        <trans-unit id="91c5b5480299346251874dfad3f9e9c29c027be8" translate="yes" xml:space="preserve">
          <source>(&lt;a href=&quot;https://stackoverflow.com/questions/15649899/is-there-a-reason-javascript-developers-dont-use-array-push&quot;&gt;Is there a reason JavaScript developers don't use Array.push()?&lt;/a&gt;)</source>
          <target state="translated">（ &lt;a href=&quot;https://stackoverflow.com/questions/15649899/is-there-a-reason-javascript-developers-dont-use-array-push&quot;&gt;JavaScript開発者がArray.push（）を使用しない理由はありますか？&lt;/a&gt; ）</target>
        </trans-unit>
        <trans-unit id="4f7091007935c7a8def66d71d35a05859c5a9ad6" translate="yes" xml:space="preserve">
          <source>(Note: I'm not advocating to use HTML in strings)</source>
          <target state="translated">(注:HTMLを文字列で使うことを提唱しているわけではありません)</target>
        </trans-unit>
        <trans-unit id="b7526ba2075c0fc65a94806a798b5ae42402af17" translate="yes" xml:space="preserve">
          <source>(but actually can't be considered as multiline string)</source>
          <target state="translated">(実際には複数行の文字列とはみなされません)</target>
        </trans-unit>
        <trans-unit id="3e43f0d194bd87405a6afd2a963dddf8b484c4bc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://google.github.io/styleguide/javascriptguide.xml?showone=Multiline_string_literals#Multiline_string_literals&quot;&gt;Google's JavaScript style guide&lt;/a&gt; recommends to use string concatenation instead of escaping newlines:</source>
          <target state="translated">&lt;a href=&quot;https://google.github.io/styleguide/javascriptguide.xml?showone=Multiline_string_literals#Multiline_string_literals&quot;&gt;GoogleのJavaScriptスタイルガイドで&lt;/a&gt;は、改行をエスケープする代わりに文字列連結を使用することを推奨しています。</target>
        </trans-unit>
        <trans-unit id="7609a284e44654c674184349ee7a788533d40428" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://kangax.github.io/compat-table/es6/#test-template_literals&quot;&gt;Browser support is OK&lt;/a&gt;, but you can use &lt;a href=&quot;https://babeljs.io/&quot;&gt;transpilers&lt;/a&gt; to be more compatible.</source>
          <target state="translated">&lt;a href=&quot;https://kangax.github.io/compat-table/es6/#test-template_literals&quot;&gt;ブラウザのサポートは問題&lt;/a&gt;ありませんが、 &lt;a href=&quot;https://babeljs.io/&quot;&gt;トランスパイラ&lt;/a&gt;を使用して互換性を高めることができます。</target>
        </trans-unit>
        <trans-unit id="0d8e421de49a26f5de569233645ab350d349cf76" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Not supported in Konqueror 4.7.4&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Konqueror 4.7.4ではサポートされていません&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5a6102bb56d0dae4aa5f0c9ffa8cf939115e95e0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;external edit: &lt;a href=&quot;http://jsfiddle.net/orwellophile/hna15vLw/2/&quot;&gt;jsfiddle&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;外部編集： &lt;a href=&quot;http://jsfiddle.net/orwellophile/hna15vLw/2/&quot;&gt;jsfiddle&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aaef5889f490a36dd2fde210a75cf051368a9e4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1. Slash concatenation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1.スラッシュ連結&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="94494eb77504728e904a4992319c83909534a2e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2. regular concatenation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2.通常の連結&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="510c7d5b6fe709e7c1158fb5677248d3b48ea31a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;3. Array Join concatenation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;3.配列結合連結&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8490be8b8c9b0139e02214129a8e1bc68acc8dcc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not do this:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;こんなことしないで：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4bcfd23dbba6a2b2a3bb731e4f53a8d3e20eb4a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Downvoters&lt;/strong&gt;: This code is supplied for information only.</source>
          <target state="translated">&lt;strong&gt;Downvoters&lt;/strong&gt; ：このコードは情報提供のみを目的としています。</target>
        </trans-unit>
        <trans-unit id="cd8b4a46d393b7fde5b15e91e30f81e50ac696a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ES20xx&lt;/strong&gt; supports spanning strings over multiple lines using &lt;a href=&quot;http://www.2ality.com/2011/09/quasi-literals.html&quot;&gt;template strings&lt;/a&gt;:</source>
          <target state="translated">&lt;strong&gt;ES20xx&lt;/strong&gt;は、 &lt;a href=&quot;http://www.2ality.com/2011/09/quasi-literals.html&quot;&gt;テンプレート文字列&lt;/a&gt;を使用して、複数行にわたる文字列の&lt;strong&gt;スパンを&lt;/strong&gt;サポートしています 。</target>
        </trans-unit>
        <trans-unit id="1b442d866d385744f133d225f007497b761eac47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Refer&lt;/strong&gt;&lt;a href=&quot;http://jsperf.com/zp-string-concatenation/6&quot;&gt;this test case&lt;/a&gt; for more details regarding the performance</source>
          <target state="translated">パフォーマンスに関する詳細については、 &lt;a href=&quot;http://jsperf.com/zp-string-concatenation/6&quot;&gt;このテストケース&lt;/a&gt;を&lt;strong&gt;参照してください&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee947672ace063ceb0fbdd407b2cb329f46d107c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Update:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="666a38396085672c31c1bdcfbc3ade62b4205db4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Updated for 2015&lt;/strong&gt;: it's six years later now:  most people use a module loader, and the main module systems each have ways of loading templates. It's not inline, but the most common type of multiline string are templates, and &lt;strong&gt;templates should generally be kept out of JS anyway&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;2015年に更新&lt;/strong&gt; ：それは6年後です。ほとんどの人がモジュールローダーを使用し、メインモジュールシステムにはそれぞれテンプレートをロードする方法があります。 インラインではありませんが、複数行の文字列の最も一般的なタイプはテンプレートであり、 &lt;strong&gt;テンプレートは通常、JSから除外する必要があり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d80d78fbb7230a8eb76afd94d15ae0d093efd06b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use string concatenation instead:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;代わりに文字列連結を使用してください：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="176a47dcd02d2488e0e4bac620789e50f8c0790e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using Pure Javascript :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;純粋なJavascriptの使用：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="168d363a84a06d7debe2e86e73b9b3260bbb057f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using jQuery&lt;/strong&gt; :</source>
          <target state="translated">&lt;strong&gt;jQueryの使用&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="2abed18708f8cae227abdc165a4a7ae3ae142360" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;b&gt;1&lt;/b&gt;&lt;/sup&gt; Note: this will be lost after minifying/obfuscating your code</source>
          <target state="translated">&lt;sup&gt;&lt;b&gt;1&lt;/b&gt;&lt;/sup&gt;注：これは、コードを縮小/難読化すると失われます</target>
        </trans-unit>
        <trans-unit id="08f6221dce4c8b4c361dd023f6d8b5bc34eae0e4" translate="yes" xml:space="preserve">
          <source>A template literal is delimited by &lt;em&gt;backticks&lt;/em&gt;:</source>
          <target state="translated">テンプレートリテラルは&lt;em&gt;バッククォート&lt;/em&gt;で区切られてい&lt;em&gt;ます&lt;/em&gt; ：</target>
        </trans-unit>
        <trans-unit id="79ba5e1b3f99abfd54ef8d839ba12bd2ac4d79cb" translate="yes" xml:space="preserve">
          <source>After</source>
          <target state="translated">After</target>
        </trans-unit>
        <trans-unit id="3b4f1481ea6ea77dd53c9b367e62394e0458dc04" translate="yes" xml:space="preserve">
          <source>After looking at these (opposing) test runs, it looks like .push() is fine for string arrays which will not likely grow over 100 items - I will avoid it in favor of indexed adds for larger arrays.</source>
          <target state="translated">これらの(相反する)テストを見た後、.push()は100個以上のアイテムが増えない文字列配列には問題ないように見えます。</target>
        </trans-unit>
        <trans-unit id="f5d82d67867683720ddfa5ff2012746ab7dbd26f" translate="yes" xml:space="preserve">
          <source>Also do note that, when extending string over multiple lines using forward backslash at end of each line, any extra characters (mostly spaces, tabs and comments added by mistake) after forward backslash will cause unexpected character error, which i took an hour to find out</source>
          <target state="translated">また、文字列を複数行に渡って拡張する際に、各行の最後にフォワードバックスラッシュを使用すると、フォワードバックスラッシュの後に余分な文字(主にスペース、タブ、コメントなど)が追加されると、予期せぬ文字エラーが発生することに注意してください。</target>
        </trans-unit>
        <trans-unit id="862aa2b8832e02c84ad2458786dcaacf8137bedd" translate="yes" xml:space="preserve">
          <source>As the first answer mentions, with ES6/Babel, you can now create multi-line strings simply by using backticks:</source>
          <target state="translated">最初の回答にもあるように、ES6Babelでは、バックスティックを使うだけで複数行の文字列を作成できるようになりました。</target>
        </trans-unit>
        <trans-unit id="8b775fabb126386ead971d933b79a4f908229cd4" translate="yes" xml:space="preserve">
          <source>Be careful with your minifier, though. It tends to remove comments. For the &lt;a href=&quot;http://www.julienlecomte.net/yuicompressor/README&quot;&gt;YUI compressor&lt;/a&gt;, a comment starting with &lt;code&gt;/*!&lt;/code&gt; (like the one I used) will be preserved.</source>
          <target state="translated">ただし、ミニファイアには注意してください。 コメントを削除する傾向があります。 &lt;a href=&quot;http://www.julienlecomte.net/yuicompressor/README&quot;&gt;YUIコンプレッサーの&lt;/a&gt;場合、 &lt;code&gt;/*!&lt;/code&gt; 始まるコメント！ （私が使用したもののように）保存されます。</target>
        </trans-unit>
        <trans-unit id="74f39697ac328c6325ce068b6aaca626abc0bf63" translate="yes" xml:space="preserve">
          <source>Before</source>
          <target state="translated">Before</target>
        </trans-unit>
        <trans-unit id="7911cbd90564fac721af9b6abdfd5f717ed0258e" translate="yes" xml:space="preserve">
          <source>Browserify &lt;a href=&quot;https://www.npmjs.com/package/brfs&quot;&gt;uses a 'brfs' module&lt;/a&gt; to load text files. This will actually build your template into your bundled HTML.</source>
          <target state="translated">Browserify &lt;a href=&quot;https://www.npmjs.com/package/brfs&quot;&gt;は「brfs」モジュール&lt;/a&gt;を使用してテキストファイルをロードします。 これにより、テンプレートがバンドルされたHTMLに実際に組み込まれます。</target>
        </trans-unit>
        <trans-unit id="61074a476a42bcba1d3b5901b61e9834344738ab" translate="yes" xml:space="preserve">
          <source>But when space is removed it works -</source>
          <target state="translated">しかし、スペースを削除すると、それは動作します。</target>
        </trans-unit>
        <trans-unit id="032a4e9beb4b4caf54ec05722212b4eecd68ca59" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; your browser output will look like -</source>
          <target state="translated">&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; を使用すると、ブラウザの出力は次のようになります-</target>
        </trans-unit>
        <trans-unit id="d0652028f1fbd56b5d5dcddd98e11041b4c65715" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;\n&lt;/code&gt; your source code will look like -</source>
          <target state="translated">&lt;code&gt;\n&lt;/code&gt; を使用すると、ソースコードは次のようになります-</target>
        </trans-unit>
        <trans-unit id="8a900f3a5e136d164113cb71deb58ad3416a8e16" translate="yes" xml:space="preserve">
          <source>Check exact compatibility in Mozilla docs here</source>
          <target state="translated">Mozilla ドキュメントで正確な互換性を確認するには、ここをクリックしてください。</target>
        </trans-unit>
        <trans-unit id="7490b2aef811d5c90db7b15881b21413e48feba5" translate="yes" xml:space="preserve">
          <source>Cheers!!</source>
          <target state="translated">Cheers!!</target>
        </trans-unit>
        <trans-unit id="a191280515104478c66d6692ac8d50e149928fc5" translate="yes" xml:space="preserve">
          <source>Chrome 1 - 45</source>
          <target state="translated">クロム1-45</target>
        </trans-unit>
        <trans-unit id="d65c3081a44251fd769c67a44d1a13f9913e7182" translate="yes" xml:space="preserve">
          <source>Creating multiline strings in JavaScript</source>
          <target state="translated">JavaScriptで複数行の文字列を作成する</target>
        </trans-unit>
        <trans-unit id="038bc41a7c6c6423fba68ab38e1243e0673eb5b1" translate="yes" xml:space="preserve">
          <source>DEMO</source>
          <target state="translated">DEMO</target>
        </trans-unit>
        <trans-unit id="c74b75ccc9743746b207b1de377e2fe290ff3bbf" translate="yes" xml:space="preserve">
          <source>Does anybody know of an environment where there is HTML but it doesn't work?</source>
          <target state="translated">HTMLがあっても動かない環境をご存知の方はいらっしゃいますか?</target>
        </trans-unit>
        <trans-unit id="0ef909b47b82945dc1c739a8c03ba0a9e642f247" translate="yes" xml:space="preserve">
          <source>ECMAScript 6 (ES6) introduces a new type of literal, namely &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings&quot;&gt;&lt;strong&gt;template literals&lt;/strong&gt;&lt;/a&gt;. They have many features, variable interpolation among others, but most importantly for this question, they can be multiline.</source>
          <target state="translated">ECMAScript 6（ES6）では、新しいタイプのリテラル、つまり&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings&quot;&gt;&lt;strong&gt;テンプレートリテラル&lt;/strong&gt;&lt;/a&gt;が導入されてい&lt;strong&gt;ます&lt;/strong&gt; 。 彼らは多くの機能、とりわけ変数補間を持っていますが、この質問にとって最も重要なのは、複数行になる可能性があることです。</target>
        </trans-unit>
        <trans-unit id="3238d1e4078fd7c039e574bdab4467eb6017a97a" translate="yes" xml:space="preserve">
          <source>ES6 UPDATE: You could use backtick instead of creating a function with a comment and running toString on the comment. The regex would need to be updated to only strip spaces. You could also have a string prototype method for doing this:</source>
          <target state="translated">ES6 UPDATE:コメント付きの関数を作成し、コメントの toString を実行する代わりに backtick を使用することができます。正規表現はスペースのみを取り除くように更新する必要があります。これを行うための文字列プロトタイプメソッドを用意することもできます。</target>
        </trans-unit>
        <trans-unit id="6fb1a4b87b8ae12fcce73f77c0fd46dc6675d22a" translate="yes" xml:space="preserve">
          <source>ES6 Update:</source>
          <target state="translated">ES6更新。</target>
        </trans-unit>
        <trans-unit id="3a334ffab1ca6e2ee851755efbfd45ddf6823aee" translate="yes" xml:space="preserve">
          <source>ES6 allows you to use a backtick to specify a string on multiple lines.  It's called a Template Literal.  Like this:</source>
          <target state="translated">ES6では、バックティックを使って複数行で文字列を指定することができます。これはテンプレートリテラルと呼ばれています。このような感じで。</target>
        </trans-unit>
        <trans-unit id="3d8806aab2c8fe08542a0e5ca1513e4f85839513" translate="yes" xml:space="preserve">
          <source>Easiest way to make multiline strings in Javascrips is with the use of backticks ( `` ). This allows you to create multiline strings in which you can insert variables with &lt;code&gt;${variableName}&lt;/code&gt;.</source>
          <target state="translated">Javascriptで複数行の文字列を作成する最も簡単な方法は、バックティック（ ``）を使用することです。 これにより、 &lt;code&gt;${variableName}&lt;/code&gt; 変数を挿入できる複数行の文字列を作成できます。</target>
        </trans-unit>
        <trans-unit id="ea82bfc34dbf1b48e8ffdf4a7df50a3166568d6d" translate="yes" xml:space="preserve">
          <source>Easy.</source>
          <target state="translated">Easy.</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">スニペットを展開</target>
        </trans-unit>
        <trans-unit id="a6a23d942816e20c835acf504ea3e5f99590f77a" translate="yes" xml:space="preserve">
          <source>Firefox 17 - 21 (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString#Notes&quot;&gt;not in 16-&lt;/a&gt;)</source>
          <target state="translated">Firefox &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString#Notes&quot;&gt;17-21&lt;/a&gt; （ 16-ではありません ）</target>
        </trans-unit>
        <trans-unit id="3587ef4db85020921a6d4956d480b2722b6bb454" translate="yes" xml:space="preserve">
          <source>Here's another weird but working 'trick'&lt;sup&gt;&lt;b&gt;1&lt;/b&gt;&lt;/sup&gt;:</source>
          <target state="translated">ここに別の奇妙だが機能する「トリック」があります&lt;sup&gt;&lt;b&gt;1&lt;/b&gt;&lt;/sup&gt; ：</target>
        </trans-unit>
        <trans-unit id="013b46f430894614f1c199ffc1e6648987e55946" translate="yes" xml:space="preserve">
          <source>Here's the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components&quot;&gt;specification&lt;/a&gt;. See browser support at the bottom of this &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings&quot;&gt;page&lt;/a&gt;. Here are some &lt;a href=&quot;https://developers.google.com/web/updates/2015/01/ES6-Template-Strings?hl=en#multiline-strings&quot;&gt;examples&lt;/a&gt; too.</source>
          <target state="translated">こちらが&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components&quot;&gt;仕様&lt;/a&gt;です。 この&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings&quot;&gt;ページ&lt;/a&gt;の下部にあるブラウザのサポートをご覧ください 。 ここにもいくつかの&lt;a href=&quot;https://developers.google.com/web/updates/2015/01/ES6-Template-Strings?hl=en#multiline-strings&quot;&gt;例があり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6832d056298e89adcc38c6f18b71ed8cdadb845a" translate="yes" xml:space="preserve">
          <source>Hope it helps !!</source>
          <target state="translated">それは助けになることを願っています!</target>
        </trans-unit>
        <trans-unit id="f6be1ffa950fa77d20edb2258a67540cf5bb2af0" translate="yes" xml:space="preserve">
          <source>I came up with this very jimmy rigged method of a multi lined string. Since converting a function into a string also returns any comments inside the function you can use the comments as your string using a multilined comment /**/. You just have to trim off the ends and you have your string.</source>
          <target state="translated">私は、複数行の文字列の非常にジミーな方法を思いつきました。関数を文字列に変換すると、関数内のコメントも返されるので、コメントを文字列として使用するには、複数行のコメント**を使用します。端を切り落とせば、文字列ができあがります。</target>
        </trans-unit>
        <trans-unit id="19b03b1b6c37147d5d29f006e500a4ed4c113fb9" translate="yes" xml:space="preserve">
          <source>I get:</source>
          <target state="translated">分かったわ</target>
        </trans-unit>
        <trans-unit id="6b6abda9450ef82c1beb6ade39c658789c33cb13" translate="yes" xml:space="preserve">
          <source>I have the following code in Ruby. I want to convert this code into JavaScript. what's the equivalent code in JS?</source>
          <target state="translated">私はRubyで以下のコードを持っています。このコードをJavaScriptに変換したいのですが、JSではどのようなコードに相当するのでしょうか?</target>
        </trans-unit>
        <trans-unit id="84ea9964264fa606eac35c2b4130ce2c06264d96" translate="yes" xml:space="preserve">
          <source>I like this syntax and indendation:</source>
          <target state="translated">この構文とインデンテーションが好きです。</target>
        </trans-unit>
        <trans-unit id="216ea24feedf5272fc7b8fc5f86df660b57d2770" translate="yes" xml:space="preserve">
          <source>I solved this by outputting a div, making it hidden, and calling the div id by jQuery when I needed it.</source>
          <target state="translated">divを出力して非表示にして、必要な時にjQueryでdiv idを呼び出すことで解決しました。</target>
        </trans-unit>
        <trans-unit id="6aee685159a0fa849556bb23f0c688eec7c1db1d" translate="yes" xml:space="preserve">
          <source>I think a &lt;em&gt;real&lt;/em&gt; solution would be to use &lt;a href=&quot;http://coffeescript.org/#strings&quot;&gt;CoffeeScript&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;実際の&lt;/em&gt;解決策は、 &lt;a href=&quot;http://coffeescript.org/#strings&quot;&gt;CoffeeScript&lt;/a&gt;を使用することだと思います。</target>
        </trans-unit>
        <trans-unit id="d7a61ef1d6cbb034e37c2991ff8261ec327534a3" translate="yes" xml:space="preserve">
          <source>I think this workaround should work in IE, Chrome, Firefox, Safari, Opera -</source>
          <target state="translated">この回避策は、IE、Chrome、Firefox、Safari、Operaで動作すると思います。</target>
        </trans-unit>
        <trans-unit id="a01af91bf8ef40fa799d83178377eccf4f7bb90d" translate="yes" xml:space="preserve">
          <source>I'm surprised I didn't see this, because it works everywhere I've tested it and is very useful for e.g. templates:</source>
          <target state="translated">私がテストしたところではどこでも動作していて、テンプレートなどには非常に便利なので、これを見なかったことに驚いています。</target>
        </trans-unit>
        <trans-unit id="4676375e1b831fd1fdadaa2f352ac2e7464bc9e4" translate="yes" xml:space="preserve">
          <source>IE 4 - 10</source>
          <target state="translated">IE 4-10</target>
        </trans-unit>
        <trans-unit id="ce9c3488b1abdadaa9b4684f94f8941beceac501" translate="yes" xml:space="preserve">
          <source>If you have a lot of legacy code, you can also use the plain JavaScript variant in TypeScript (for cleanup purposes):</source>
          <target state="translated">レガシーコードが多い場合は、TypeScript のプレーン JavaScript バリアントを使用することもできます (クリーンアップのため)。</target>
        </trans-unit>
        <trans-unit id="fe1949dec2f6c9e2bfa865e39ba095e064a7aad0" translate="yes" xml:space="preserve">
          <source>If you'd want to accomplish the same with plain JavaScript:</source>
          <target state="translated">もしあなたがプレーンJavaScriptで同じことを達成したいのであれば。</target>
        </trans-unit>
        <trans-unit id="ceee857c88c4ba94fa186e5d2c8b405aa05ebb62" translate="yes" xml:space="preserve">
          <source>If you're willing to use the escaped newlines, they can be used &lt;em&gt;nicely&lt;/em&gt;.  &lt;strong&gt;It looks like a document with a page border&lt;/strong&gt;.</source>
          <target state="translated">エスケープされた改行を使用する場合は、それらを&lt;em&gt;うまく&lt;/em&gt;使用できます。 &lt;strong&gt;これは、ページ境界線があるドキュメントのように見えます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="65df262484e1653dfd4d7c1bc7955a54788d9181" translate="yes" xml:space="preserve">
          <source>Interpolating variables is a popular new feature that comes with back-tick delimited strings:</source>
          <target state="translated">変数の補間は、バックティックで区切られた文字列が付属している人気の新機能です。</target>
        </trans-unit>
        <trans-unit id="9f13095386686fcfc18ddda0102997d5765a48f6" translate="yes" xml:space="preserve">
          <source>Is the .push() to add to the array taking up a lot of time? See this related answer:</source>
          <target state="translated">配列に追加する.push()に時間がかかっていませんか?こちらの関連する回答を参照してください。</target>
        </trans-unit>
        <trans-unit id="7493f00450d4786e514d13166b0ca17f808e2c5d" translate="yes" xml:space="preserve">
          <source>It DOES work in Opera 11. At least in user JS scripts. Too bad I can't comment on individual answers or upvote the answer, I'd do it immediately. If possible, someone with higher privileges please do it for me.</source>
          <target state="translated">Opera 11では動作します。少なくともユーザーJSスクリプトでは。残念ながら、私は個々の回答にコメントしたり、回答をupvoteすることができません、私はすぐにそれを行うだろう。できれば、より高い権限を持つ人がやってくれないかな。</target>
        </trans-unit>
        <trans-unit id="9c9f4f3869a8711567402378d1b45a90e5c7d85c" translate="yes" xml:space="preserve">
          <source>It doesn't work on firefox or opera; only on IE, chrome and safari.</source>
          <target state="translated">firefoxやオペラでは動作せず、IE、クローム、サファリでのみ動作します。</target>
        </trans-unit>
        <trans-unit id="3a8be88791dc07052d9a6c08e234d8e99e5c5ed8" translate="yes" xml:space="preserve">
          <source>It is now natively supported by all major browser vendors (except internet explorer)</source>
          <target state="translated">現在、すべての主要なブラウザベンダー(インターネットエクスプローラーを除く)でネイティブにサポートされています。</target>
        </trans-unit>
        <trans-unit id="bbf9be9731df6814cc695ff22f360f2520f6a3e7" translate="yes" xml:space="preserve">
          <source>It was introduces in &lt;code&gt;ES6&lt;/code&gt;//&lt;code&gt;es2015&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ES6&lt;/code&gt; // &lt;code&gt;es2015&lt;/code&gt; で紹介されました</target>
        </trans-unit>
        <trans-unit id="179f9c40fd82e87a7dcf8ea7427a41307af2e39e" translate="yes" xml:space="preserve">
          <source>Javascript doesn't have a here-document syntax. You can escape the literal newline, however, which comes close:</source>
          <target state="translated">Javascriptにはhe-documentの構文がありません。しかし、リテラルの改行をエスケープすることができます。</target>
        </trans-unit>
        <trans-unit id="d4b9453eea0ec8b6ea04ed9ccefdd9cc315af266" translate="yes" xml:space="preserve">
          <source>Just tried the Anonymous answer and found there's a little trick here, it doesn't work if there's a space after backslash &lt;code&gt;\&lt;/code&gt;</source>
          <target state="translated">匿名の答えを試してみて、ここに小さなトリックがあることがわかりました、バックスラッシュ &lt;code&gt;\&lt;/code&gt; の後にスペースがある場合は機能しません</target>
        </trans-unit>
        <trans-unit id="d80f7930d63b667860addadd5bf42cfced345045" translate="yes" xml:space="preserve">
          <source>More reference &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">詳細は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;こちら&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b5e84babbc061e9d00d5b635f42dc3d8a8d64524" translate="yes" xml:space="preserve">
          <source>My extension to &lt;a href=&quot;https://stackoverflow.com/a/15558082/80404&quot;&gt;https://stackoverflow.com/a/15558082/80404&lt;/a&gt;.
It expects comment in a form &lt;code&gt;/*! any multiline comment */&lt;/code&gt; where symbol ! is used to prevent removing by minification (at least for YUI compressor)</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/15558082/80404&quot;&gt;https://stackoverflow.com/a/15558082/80404&lt;/a&gt;への私の拡張。 &lt;code&gt;/*! any multiline comment */&lt;/code&gt; 形式のコメントを期待しています！ 複数行コメント* / where記号！ 縮小による削除を防ぐために使用されます（少なくともYUIコンプレッサーの場合）</target>
        </trans-unit>
        <trans-unit id="327468f4961f4be3736c57bc078b066d629c4478" translate="yes" xml:space="preserve">
          <source>My version of array-based join for string concat:</source>
          <target state="translated">配列ベースの文字列結合の私のバージョン。</target>
        </trans-unit>
        <trans-unit id="60c2c0416974dd8c243f7a3c2533415f7fbadeb0" translate="yes" xml:space="preserve">
          <source>NPM/browserify: the 'brfs' module</source>
          <target state="translated">NPMbrowserify:'brfs' モジュール</target>
        </trans-unit>
        <trans-unit id="630493ccdc9ccc13308f420e2fb75b1f9c2001f9" translate="yes" xml:space="preserve">
          <source>Note that the iPad/Safari does not support &lt;code&gt;'functionName.toString()'&lt;/code&gt;</source>
          <target state="translated">iPad / Safariは &lt;code&gt;'functionName.toString()'&lt;/code&gt; をサポートしないことに注意してください</target>
        </trans-unit>
        <trans-unit id="d652d6b052142522d5e9d9ae0f98be1c3905dcc9" translate="yes" xml:space="preserve">
          <source>Opera 9.50 - 12 (not in 9-)</source>
          <target state="translated">オペラ9.50~12(9-ではありません</target>
        </trans-unit>
        <trans-unit id="fe7c5b437af6c4f466346ac501b85b705b6be7ee" translate="yes" xml:space="preserve">
          <source>Original ES5 answer:</source>
          <target state="translated">オリジナルのES5の答え。</target>
        </trans-unit>
        <trans-unit id="60a8ed1f3fae1cd0c150dd6c98d528692dc6c144" translate="yes" xml:space="preserve">
          <source>Performance wise, &lt;strong&gt;Slash concatenation&lt;/strong&gt; (first one) is the fastest.</source>
          <target state="translated">パフォーマンスに関しては、 &lt;strong&gt;スラッシュ連結&lt;/strong&gt; （最初のもの）が最も高速です。</target>
        </trans-unit>
        <trans-unit id="caa9875ec171fff5331114c7fffc38d1807da822" translate="yes" xml:space="preserve">
          <source>Please for the love of the internet use string concatenation and opt not to use ES6 solutions for this. ES6 is NOT supported all across the board, much like CSS3 and certain browsers being slow to adapt to the CSS3 movement. Use plain ol' JavaScript, your end users will thank you.</source>
          <target state="translated">インターネットの愛のために、文字列連結を使用し、ES6ソリューションを使用しないようにしてください。CSS3や特定のブラウザがCSS3の動きに適応するのが遅れているように、ES6は全面的にはサポートされていません。あなたのエンドユーザーは、あなたのエンドユーザーに感謝するでしょう。</target>
        </trans-unit>
        <trans-unit id="ccd9786b11ae8e53160d12abc3b63e0229a76339" translate="yes" xml:space="preserve">
          <source>Rekonq 0.7.0 - 0.8.0</source>
          <target state="translated">Rekonq 0.7.0-0.8.0</target>
        </trans-unit>
        <trans-unit id="caf3ca66b2f4df9d029538e6fa17ee1bece60303" translate="yes" xml:space="preserve">
          <source>Safari 4 - 6 (not in 3-)</source>
          <target state="translated">サファリ4~6(3には入っていない</target>
        </trans-unit>
        <trans-unit id="867de2a3633e7d07c133f7dfc7e4ec13e3c4edd6" translate="yes" xml:space="preserve">
          <source>So I recommend the working approach for Opera user JS users. Unlike what the author was saying:</source>
          <target state="translated">ということで、OperaユーザーJSユーザーには作業的なアプローチをお勧めします。作者が言っていたこととは違い</target>
        </trans-unit>
        <trans-unit id="46f93807af21f04c782aadd9ec39f35c77f378fd" translate="yes" xml:space="preserve">
          <source>So the following solution doesn't work -</source>
          <target state="translated">そのため、以下の解決策はうまくいきません。</target>
        </trans-unit>
        <trans-unit id="7f479d1c28edfab20b93121b357b35d4d27000a8" translate="yes" xml:space="preserve">
          <source>That would be cool. Someone should write this .removeIndentation string method... ;)</source>
          <target state="translated">かっこいいですね。誰かこの .removeIndentation 文字列メソッドを書いてくれないかな...;)</target>
        </trans-unit>
        <trans-unit id="ef70080364d881d5382eddb903cc39b98302bc25" translate="yes" xml:space="preserve">
          <source>The ES6 way of doing it would be by using template literals:</source>
          <target state="translated">ES6の方法では、テンプレートリテラルを使用することになります。</target>
        </trans-unit>
        <trans-unit id="ae01df7fd2d89e5f278c1d9dc3cc2376f7f060f1" translate="yes" xml:space="preserve">
          <source>The equivalent in javascript is:</source>
          <target state="translated">javascriptではこれに相当するものがあります。</target>
        </trans-unit>
        <trans-unit id="0e8df63d49f93c07b756c22250ea5608abef0e77" translate="yes" xml:space="preserve">
          <source>The method has successfully been tested in the following browsers (not mentioned = not tested):</source>
          <target state="translated">このメソッドは以下のブラウザで正常にテストされています(言及されていない=テストされていない)。</target>
        </trans-unit>
        <trans-unit id="3a001afe471a033ff303b5665c1eb1c6980e5391" translate="yes" xml:space="preserve">
          <source>The whitespace at the beginning of each line can't be safely stripped at compile time; whitespace after the slash will result in tricky errors; and while most script engines support this, it is not part of ECMAScript.</source>
          <target state="translated">各行の先頭の空白は、コンパイル時に安全に除去することができません。</target>
        </trans-unit>
        <trans-unit id="46e6ddc461146e4235c51770a5683d50d7f847de" translate="yes" xml:space="preserve">
          <source>Then when I need to get the string, I just use the following jQuery:</source>
          <target state="translated">そして、文字列を取得する必要があるときは、以下のjQueryを使用するだけです。</target>
        </trans-unit>
        <trans-unit id="39e1bfbae3c5595da40bb7be67d4d3f042b9248d" translate="yes" xml:space="preserve">
          <source>There are multiple ways to achieve this</source>
          <target state="translated">これを実現するためには、複数の方法があります。</target>
        </trans-unit>
        <trans-unit id="27af5f0d31556009113722e8035e360b8e6ec7c0" translate="yes" xml:space="preserve">
          <source>There's this library that makes it beautiful:</source>
          <target state="translated">綺麗になる図書館があります。</target>
        </trans-unit>
        <trans-unit id="19c0a3fb12a4f01badd38d5fc54241f3f836734e" translate="yes" xml:space="preserve">
          <source>This has been tested in Fx 19 and Chrome 24 on Mac</source>
          <target state="translated">これはMacのFx 19とChrome 24でテストしました。</target>
        </trans-unit>
        <trans-unit id="9ce730fac9c2d18d2946a5674357b589e4b3f190" translate="yes" xml:space="preserve">
          <source>This has worked well for me, especially as I often insert values into the html constructed this way. But it has lots of limitations. Indentation would be nice. Not having to deal with nested quotation marks would be really nice, and just the bulkyness of it bothers me.</source>
          <target state="translated">これは私にとってはうまく機能しています。特にこの方法で構築されたhtmlに値を挿入することが多いので。しかし、これには多くの制限があります。インデントはいいでしょう。ネストされた引用符を扱う必要がないのは本当にいいことです。</target>
        </trans-unit>
        <trans-unit id="610dd3a9b8a5805e147d17ac870a27a74e549c75" translate="yes" xml:space="preserve">
          <source>This just transpiles down to concatenation:</source>
          <target state="translated">これは単に連結に転置しているだけです。</target>
        </trans-unit>
        <trans-unit id="43f921c1fa94efebfdce9dbc0afd2325ac2f5027" translate="yes" xml:space="preserve">
          <source>This method is based on the serialization of functions, which is &lt;a href=&quot;http://es5.github.io/#x15.3.4.2&quot;&gt;defined to be implementation-dependent&lt;/a&gt;. It does work in the most browsers (see below), but there's no guarantee that it will still work in the future, so do not rely on it.</source>
          <target state="translated">このメソッドは、 &lt;a href=&quot;http://es5.github.io/#x15.3.4.2&quot;&gt;実装に依存するように定義されている&lt;/a&gt;関数のシリアル化に基づいています。 ほとんどのブラウザで動作します（以下を参照）が、今後も動作するという保証はありません。したがって、それに依存しないでください。</target>
        </trans-unit>
        <trans-unit id="ab951f09a5130afb5039a9922d6184fc8193a104" translate="yes" xml:space="preserve">
          <source>This works in IE, Safari, Chrome and Firefox:</source>
          <target state="translated">IE、Safari、Chrome、Firefoxで動作します。</target>
        </trans-unit>
        <trans-unit id="1691ecc8a73a6d9893052684bbc52fa827b49fb8" translate="yes" xml:space="preserve">
          <source>To keep oversight with complex or long multiline strings I sometimes use an array pattern:</source>
          <target state="translated">複雑な文字列や長い複数行の文字列に注意を払うために、私は時々配列パターンを使います。</target>
        </trans-unit>
        <trans-unit id="acf72ff8536cb7c07913f02c5d05cbe20402fc3e" translate="yes" xml:space="preserve">
          <source>Update:</source>
          <target state="translated">Update:</target>
        </trans-unit>
        <trans-unit id="2cc8b54c32ff3a47608ce389c75c9fae180584a2" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;https://github.com/requirejs/text&quot;&gt;require.js 'text' plugin&lt;/a&gt;, with a multiline template in &lt;strong&gt;template.html&lt;/strong&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/requirejs/text&quot;&gt;require.js 'text'プラグイン&lt;/a&gt;を使用し、template.htmlの複数行&lt;strong&gt;テンプレート&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="941bf4825a058076abc5965399544e3b623d4f90" translate="yes" xml:space="preserve">
          <source>Using script tags:</source>
          <target state="translated">スクリプトタグを使用しています。</target>
        </trans-unit>
        <trans-unit id="e3265c43fff083d95ecacbd870bcb941a94b0ad6" translate="yes" xml:space="preserve">
          <source>Using the backtick works in NodeJS, and it's supported by Chrome, Firefox, Edge, Safari, and Opera.</source>
          <target state="translated">backtickの使用はNodeJSで動作し、Chrome、Firefox、Edge、Safari、Operaでサポートされています。</target>
        </trans-unit>
        <trans-unit id="4989b0e66aeebb5b41ea7226ab3d548587abfe83" translate="yes" xml:space="preserve">
          <source>Using the following function:</source>
          <target state="translated">以下の機能を使って</target>
        </trans-unit>
        <trans-unit id="23ddeb0466ab6d7a41140da6ee81ff1244de1213" translate="yes" xml:space="preserve">
          <source>Which returns my text on multiple lines. If I call</source>
          <target state="translated">これは複数行のテキストを返します。もし</target>
        </trans-unit>
        <trans-unit id="2572839cd097cf33b609d9a1eba23c02a431d32e" translate="yes" xml:space="preserve">
          <source>With the &lt;strong&gt;ES2015&lt;/strong&gt;, we can take advantage of its Template strings feature. With it, we just need to use back-ticks for creating multi line strings</source>
          <target state="translated">&lt;strong&gt;ES2015&lt;/strong&gt;では、テンプレートの文字列機能を利用できます。 これで、複数行の文字列を作成するためにバックティックを使用するだけです</target>
        </trans-unit>
        <trans-unit id="9dcb05d74b3d2d805a039302b37c1b4ddf9f812f" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;can&lt;/em&gt; have multiline strings in pure JavaScript.</source>
          <target state="translated">純粋なJavaScriptでは複数行の文字列を使用できます。</target>
        </trans-unit>
        <trans-unit id="3ec1296fccfbcf827daa7b1f4a8b1cfc9b064280" translate="yes" xml:space="preserve">
          <source>You can do this...</source>
          <target state="translated">こんなことができるんですね...。</target>
        </trans-unit>
        <trans-unit id="0b1a030acbff99a2047f447fc70835164fe36427" translate="yes" xml:space="preserve">
          <source>You can have here-documents like this:</source>
          <target state="translated">このようなドキュメントを持つことができます。</target>
        </trans-unit>
        <trans-unit id="7071001656263a0b0914853e07b053aa54d485de" translate="yes" xml:space="preserve">
          <source>You can try TypeScript at</source>
          <target state="translated">でTypeScriptを試すことができます。</target>
        </trans-unit>
        <trans-unit id="2c5db72a01e5ec1898714814eaccad47efb37e75" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;http://www.typescriptlang.org/Playground&quot;&gt;TypeScript&lt;/a&gt; (JavaScript SuperSet), it supports multiline strings, and transpiles back down to pure JavaScript without overhead:</source>
          <target state="translated">&lt;a href=&quot;http://www.typescriptlang.org/Playground&quot;&gt;TypeScript&lt;/a&gt; （JavaScript SuperSet）を使用でき、複数行の文字列をサポートし、オーバーヘッドなしで純粋なJavaScriptにトランスパイルします。</target>
        </trans-unit>
        <trans-unit id="893bacad168532412f6c651b5999cf7170e01b50" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;+=&lt;/code&gt; to concatenate your string, seems like no one answered that, which will be readable, and also neat... something like this</source>
          <target state="translated">&lt;code&gt;+=&lt;/code&gt; を使用して文字列を連結することができ、誰もそれを答えていないようです。これは読みやすく、またきちんと...このようなもの</target>
        </trans-unit>
        <trans-unit id="9d14e2ff189889431e5315389e1033c41609136d" translate="yes" xml:space="preserve">
          <source>You have to use the concatenation operator '+'.</source>
          <target state="translated">連結演算子「+」を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="b095c7952b8061d7c0613ecc76de9dadd3faee2c" translate="yes" xml:space="preserve">
          <source>add a &lt;code&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt; block containing your multiline text into &lt;code&gt;head&lt;/code&gt; tag;</source>
          <target state="translated">複数行のテキストを含む &lt;code&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt; ブロックを &lt;code&gt;head&lt;/code&gt; タグに追加します。</target>
        </trans-unit>
        <trans-unit id="55587055c87a40c50c914d5c723b4c1c7f0ec2d7" translate="yes" xml:space="preserve">
          <source>and you can use the multiline-string object from the plain JavaScript variant, where you put the templates into another file (which you can merge in the bundle).</source>
          <target state="translated">そして、テンプレートを別のファイルに入れて(バンドルにマージすることができます)、プレーンなJavaScriptのバリアントからマルチライン文字列オブジェクトを使用することができます。</target>
        </trans-unit>
        <trans-unit id="1c3e0fb1ffbf08227035f3b11a53c2d31774bd22" translate="yes" xml:space="preserve">
          <source>can be also written as</source>
          <target state="translated">は次のようにも書けます。</target>
        </trans-unit>
        <trans-unit id="9b14fd489a2ea7db0f7f49ad028a069e3852b4fc" translate="yes" xml:space="preserve">
          <source>compatibility :</source>
          <target state="translated">互換性</target>
        </trans-unit>
        <trans-unit id="7f53a68d324346fc8457a1665141697dcc97ee86" translate="yes" xml:space="preserve">
          <source>e.g.</source>
          <target state="translated">e.g.</target>
        </trans-unit>
        <trans-unit id="c05c26d2af9c420a9f6716a38a0456918edf7add" translate="yes" xml:space="preserve">
          <source>get your multiline text as is... (watch out for text encoding: UTF-8, ASCII)</source>
          <target state="translated">複数行のテキストをそのまま取得する...(テキストのエンコーディングに注意:UTF-8,ASCII)</target>
        </trans-unit>
        <trans-unit id="54ce28968d2394751f40d54d26fc49d3c7629b40" translate="yes" xml:space="preserve">
          <source>or the pattern anonymous already showed (escape newline), which can be an ugly block in your code:</source>
          <target state="translated">または、匿名さんがすでに示しているパターン (改行をエスケープ)は、あなたのコードの中で醜いブロックになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="62c1a99302d4ba9d8d479464d845c7a09b9f3843" translate="yes" xml:space="preserve">
          <source>require.js: 'require text'.</source>
          <target state="translated">require.js:'require text'</target>
        </trans-unit>
        <trans-unit id="e76b83e9f81aa49215ab3a4621fb267db9bcae38" translate="yes" xml:space="preserve">
          <source>the pattern &lt;code&gt;text = &amp;lt;&amp;lt;&quot;HERE&quot; This Is A Multiline String HERE&lt;/code&gt; is not available in js (I remember using it much in my good old Perl days).</source>
          <target state="translated">パターン &lt;code&gt;text = &amp;lt;&amp;lt;&quot;HERE&quot; This Is A Multiline String HERE&lt;/code&gt; はjsを使用できません（私は古き良きPerlの時代によく使用したことを覚えています）。</target>
        </trans-unit>
        <trans-unit id="78cf1b699176d8fa12ee8f303fbfdbdd63eccac4" translate="yes" xml:space="preserve">
          <source>this one didn't work: &lt;a href=&quot;https://stackoverflow.com/questions/805107/multiline-strings-in-javascript/805111#805111&quot;&gt;Creating multiline strings in JavaScript&lt;/a&gt;</source>
          <target state="translated">これは機能しませんでした： &lt;a href=&quot;https://stackoverflow.com/questions/805107/multiline-strings-in-javascript/805111#805111&quot;&gt;JavaScriptで複数行の文字列を作成する&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="37cfb316639b26d9e51816bae13bb1aedeedeb79" translate="yes" xml:space="preserve">
          <source>this worked fairly well, I have also figured out how to make it look good in Notepad++ source view: &lt;a href=&quot;https://stackoverflow.com/questions/805107/multiline-strings-in-javascript/5571069#5571069&quot;&gt;Creating multiline strings in JavaScript&lt;/a&gt;</source>
          <target state="translated">これはかなりうまくいきました。Notepad++のソースビューで見栄えを良くする方法もわかりました。JavaScriptで&lt;a href=&quot;https://stackoverflow.com/questions/805107/multiline-strings-in-javascript/5571069#5571069&quot;&gt;複数行の文字列を作成する&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7b6869a2159a8fb6549227e36bd1523db19f7073" translate="yes" xml:space="preserve">
          <source>to sum up, I have tried 2 approaches listed here in user javascript programming (Opera 11.01):</source>
          <target state="translated">要約すると、私はここに記載されている2つのアプローチをユーザーのjavascriptプログラミング(Opera 11.01)で試してみました。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
