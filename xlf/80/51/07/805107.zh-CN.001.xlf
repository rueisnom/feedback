<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/805107">
    <body>
      <group id="805107">
        <trans-unit id="91c5b5480299346251874dfad3f9e9c29c027be8" translate="yes" xml:space="preserve">
          <source>(&lt;a href=&quot;https://stackoverflow.com/questions/15649899/is-there-a-reason-javascript-developers-dont-use-array-push&quot;&gt;Is there a reason JavaScript developers don't use Array.push()?&lt;/a&gt;)</source>
          <target state="translated">（ &lt;a href=&quot;https://stackoverflow.com/questions/15649899/is-there-a-reason-javascript-developers-dont-use-array-push&quot;&gt;JavaScript开发人员不使用Array.push（）是否有原因？&lt;/a&gt; ）</target>
        </trans-unit>
        <trans-unit id="4f7091007935c7a8def66d71d35a05859c5a9ad6" translate="yes" xml:space="preserve">
          <source>(Note: I'm not advocating to use HTML in strings)</source>
          <target state="translated">(注:我不主张在字符串中使用HTML)</target>
        </trans-unit>
        <trans-unit id="b7526ba2075c0fc65a94806a798b5ae42402af17" translate="yes" xml:space="preserve">
          <source>(but actually can't be considered as multiline string)</source>
          <target state="translated">(但实际上不能视为多行字符串)</target>
        </trans-unit>
        <trans-unit id="3e43f0d194bd87405a6afd2a963dddf8b484c4bc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://google.github.io/styleguide/javascriptguide.xml?showone=Multiline_string_literals#Multiline_string_literals&quot;&gt;Google's JavaScript style guide&lt;/a&gt; recommends to use string concatenation instead of escaping newlines:</source>
          <target state="translated">&lt;a href=&quot;https://google.github.io/styleguide/javascriptguide.xml?showone=Multiline_string_literals#Multiline_string_literals&quot;&gt;Google的JavaScript样式指南&lt;/a&gt;建议使用字符串串联而不是换行符：</target>
        </trans-unit>
        <trans-unit id="7609a284e44654c674184349ee7a788533d40428" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://kangax.github.io/compat-table/es6/#test-template_literals&quot;&gt;Browser support is OK&lt;/a&gt;, but you can use &lt;a href=&quot;https://babeljs.io/&quot;&gt;transpilers&lt;/a&gt; to be more compatible.</source>
          <target state="translated">&lt;a href=&quot;https://kangax.github.io/compat-table/es6/#test-template_literals&quot;&gt;浏览器支持还可以&lt;/a&gt; ，但是您可以使用&lt;a href=&quot;https://babeljs.io/&quot;&gt;编译器&lt;/a&gt;来更好地兼容。</target>
        </trans-unit>
        <trans-unit id="0d8e421de49a26f5de569233645ab350d349cf76" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Not supported in Konqueror 4.7.4&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Konqueror 4.7.4不支持&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5a6102bb56d0dae4aa5f0c9ffa8cf939115e95e0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;external edit: &lt;a href=&quot;http://jsfiddle.net/orwellophile/hna15vLw/2/&quot;&gt;jsfiddle&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;外部编辑： &lt;a href=&quot;http://jsfiddle.net/orwellophile/hna15vLw/2/&quot;&gt;jsfiddle&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aaef5889f490a36dd2fde210a75cf051368a9e4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1. Slash concatenation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1.斜线连接&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="94494eb77504728e904a4992319c83909534a2e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2. regular concatenation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2.定期串联&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="510c7d5b6fe709e7c1158fb5677248d3b48ea31a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;3. Array Join concatenation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;3.数组联接串联&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8490be8b8c9b0139e02214129a8e1bc68acc8dcc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not do this:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;不要这样做：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4bcfd23dbba6a2b2a3bb731e4f53a8d3e20eb4a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Downvoters&lt;/strong&gt;: This code is supplied for information only.</source>
          <target state="translated">&lt;strong&gt;Downvoters&lt;/strong&gt; ：此代码仅供参考。</target>
        </trans-unit>
        <trans-unit id="cd8b4a46d393b7fde5b15e91e30f81e50ac696a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ES20xx&lt;/strong&gt; supports spanning strings over multiple lines using &lt;a href=&quot;http://www.2ality.com/2011/09/quasi-literals.html&quot;&gt;template strings&lt;/a&gt;:</source>
          <target state="translated">&lt;strong&gt;ES20xx&lt;/strong&gt;支持使用&lt;a href=&quot;http://www.2ality.com/2011/09/quasi-literals.html&quot;&gt;模板字符串&lt;/a&gt;跨越多行字符串 ：</target>
        </trans-unit>
        <trans-unit id="1b442d866d385744f133d225f007497b761eac47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Refer&lt;/strong&gt;&lt;a href=&quot;http://jsperf.com/zp-string-concatenation/6&quot;&gt;this test case&lt;/a&gt; for more details regarding the performance</source>
          <target state="translated">有关性能的更多详细信息， &lt;strong&gt;请参考&lt;/strong&gt; &lt;a href=&quot;http://jsperf.com/zp-string-concatenation/6&quot;&gt;此测试用例&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ee947672ace063ceb0fbdd407b2cb329f46d107c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Update:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="666a38396085672c31c1bdcfbc3ade62b4205db4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Updated for 2015&lt;/strong&gt;: it's six years later now:  most people use a module loader, and the main module systems each have ways of loading templates. It's not inline, but the most common type of multiline string are templates, and &lt;strong&gt;templates should generally be kept out of JS anyway&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;2015年更新&lt;/strong&gt; ：六年之后：大多数人使用模块加载器，并且每个主模块系统都有加载模板的方式。 它不是内联的，但最常见的多行字符串类型是模板，并且&lt;strong&gt;无论如何&lt;/strong&gt; ， &lt;strong&gt;模板通常都应该放在JS之外&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="d80d78fbb7230a8eb76afd94d15ae0d093efd06b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use string concatenation instead:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;请使用字符串串联：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="176a47dcd02d2488e0e4bac620789e50f8c0790e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using Pure Javascript :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;使用纯Javascript：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="168d363a84a06d7debe2e86e73b9b3260bbb057f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using jQuery&lt;/strong&gt; :</source>
          <target state="translated">&lt;strong&gt;使用jQuery&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="2abed18708f8cae227abdc165a4a7ae3ae142360" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;b&gt;1&lt;/b&gt;&lt;/sup&gt; Note: this will be lost after minifying/obfuscating your code</source>
          <target state="translated">&lt;sup&gt;&lt;b&gt;1&lt;/b&gt;&lt;/sup&gt;注意：缩小/混淆代码后，这将会丢失</target>
        </trans-unit>
        <trans-unit id="08f6221dce4c8b4c361dd023f6d8b5bc34eae0e4" translate="yes" xml:space="preserve">
          <source>A template literal is delimited by &lt;em&gt;backticks&lt;/em&gt;:</source>
          <target state="translated">模板文字由&lt;em&gt;反引号&lt;/em&gt;分隔：</target>
        </trans-unit>
        <trans-unit id="79ba5e1b3f99abfd54ef8d839ba12bd2ac4d79cb" translate="yes" xml:space="preserve">
          <source>After</source>
          <target state="translated">After</target>
        </trans-unit>
        <trans-unit id="3b4f1481ea6ea77dd53c9b367e62394e0458dc04" translate="yes" xml:space="preserve">
          <source>After looking at these (opposing) test runs, it looks like .push() is fine for string arrays which will not likely grow over 100 items - I will avoid it in favor of indexed adds for larger arrays.</source>
          <target state="translated">在看了这些(相反的)测试运行之后,看起来.push()对于字符串数组来说是没有问题的,因为字符串数组不会增长超过100个项目--我将避免使用它,而对较大的数组使用索引添加。</target>
        </trans-unit>
        <trans-unit id="f5d82d67867683720ddfa5ff2012746ab7dbd26f" translate="yes" xml:space="preserve">
          <source>Also do note that, when extending string over multiple lines using forward backslash at end of each line, any extra characters (mostly spaces, tabs and comments added by mistake) after forward backslash will cause unexpected character error, which i took an hour to find out</source>
          <target state="translated">另外要注意的是,当在每行末尾使用前向反斜线扩展字符串时,在前向反斜线后的任何多余的字符(主要是空格、制表符和注释的错误添加)都会导致意外的字符错误,我花了一个小时才发现</target>
        </trans-unit>
        <trans-unit id="862aa2b8832e02c84ad2458786dcaacf8137bedd" translate="yes" xml:space="preserve">
          <source>As the first answer mentions, with ES6/Babel, you can now create multi-line strings simply by using backticks:</source>
          <target state="translated">正如第一个答案中提到的,有了ES6Babel,你现在可以简单地通过使用背投来创建多行字符串。</target>
        </trans-unit>
        <trans-unit id="8b775fabb126386ead971d933b79a4f908229cd4" translate="yes" xml:space="preserve">
          <source>Be careful with your minifier, though. It tends to remove comments. For the &lt;a href=&quot;http://www.julienlecomte.net/yuicompressor/README&quot;&gt;YUI compressor&lt;/a&gt;, a comment starting with &lt;code&gt;/*!&lt;/code&gt; (like the one I used) will be preserved.</source>
          <target state="translated">但是，请小心您的缩小器。 它倾向于删除评论。 对于&lt;a href=&quot;http://www.julienlecomte.net/yuicompressor/README&quot;&gt;YUI压缩器&lt;/a&gt; ，以 &lt;code&gt;/*!&lt;/code&gt; 开头的注释！ （例如我使用过的那个）将被保留。</target>
        </trans-unit>
        <trans-unit id="74f39697ac328c6325ce068b6aaca626abc0bf63" translate="yes" xml:space="preserve">
          <source>Before</source>
          <target state="translated">Before</target>
        </trans-unit>
        <trans-unit id="7911cbd90564fac721af9b6abdfd5f717ed0258e" translate="yes" xml:space="preserve">
          <source>Browserify &lt;a href=&quot;https://www.npmjs.com/package/brfs&quot;&gt;uses a 'brfs' module&lt;/a&gt; to load text files. This will actually build your template into your bundled HTML.</source>
          <target state="translated">Browserify &lt;a href=&quot;https://www.npmjs.com/package/brfs&quot;&gt;使用&amp;ldquo; brfs&amp;rdquo;模块&lt;/a&gt;加载文本文件。 这实际上会将您的模板构建到捆绑的HTML中。</target>
        </trans-unit>
        <trans-unit id="61074a476a42bcba1d3b5901b61e9834344738ab" translate="yes" xml:space="preserve">
          <source>But when space is removed it works -</source>
          <target state="translated">但是,当空间被移除后,它的作用是 --</target>
        </trans-unit>
        <trans-unit id="032a4e9beb4b4caf54ec05722212b4eecd68ca59" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; your browser output will look like -</source>
          <target state="translated">使用 &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; ,您的浏览器输出将类似于-</target>
        </trans-unit>
        <trans-unit id="d0652028f1fbd56b5d5dcddd98e11041b4c65715" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;\n&lt;/code&gt; your source code will look like -</source>
          <target state="translated">使用 &lt;code&gt;\n&lt;/code&gt; 您的源代码将类似于-</target>
        </trans-unit>
        <trans-unit id="8a900f3a5e136d164113cb71deb58ad3416a8e16" translate="yes" xml:space="preserve">
          <source>Check exact compatibility in Mozilla docs here</source>
          <target state="translated">在这里查看Mozilla文档中的确切兼容性</target>
        </trans-unit>
        <trans-unit id="7490b2aef811d5c90db7b15881b21413e48feba5" translate="yes" xml:space="preserve">
          <source>Cheers!!</source>
          <target state="translated">Cheers!!</target>
        </trans-unit>
        <trans-unit id="a191280515104478c66d6692ac8d50e149928fc5" translate="yes" xml:space="preserve">
          <source>Chrome 1 - 45</source>
          <target state="translated">Chrome 1-45</target>
        </trans-unit>
        <trans-unit id="d65c3081a44251fd769c67a44d1a13f9913e7182" translate="yes" xml:space="preserve">
          <source>Creating multiline strings in JavaScript</source>
          <target state="translated">在JavaScript中创建多行字符串</target>
        </trans-unit>
        <trans-unit id="038bc41a7c6c6423fba68ab38e1243e0673eb5b1" translate="yes" xml:space="preserve">
          <source>DEMO</source>
          <target state="translated">DEMO</target>
        </trans-unit>
        <trans-unit id="c74b75ccc9743746b207b1de377e2fe290ff3bbf" translate="yes" xml:space="preserve">
          <source>Does anybody know of an environment where there is HTML but it doesn't work?</source>
          <target state="translated">有没有人知道有HTML的环境,但有HTML却不能用?</target>
        </trans-unit>
        <trans-unit id="0ef909b47b82945dc1c739a8c03ba0a9e642f247" translate="yes" xml:space="preserve">
          <source>ECMAScript 6 (ES6) introduces a new type of literal, namely &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings&quot;&gt;&lt;strong&gt;template literals&lt;/strong&gt;&lt;/a&gt;. They have many features, variable interpolation among others, but most importantly for this question, they can be multiline.</source>
          <target state="translated">ECMAScript 6（ES6）引入了一种新型的文字，即&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings&quot;&gt;&lt;strong&gt;模板文字&lt;/strong&gt;&lt;/a&gt; 。 它们具有许多功能，其中包括变量插值，但对于这个问题最重要的是，它们可以是多行的。</target>
        </trans-unit>
        <trans-unit id="3238d1e4078fd7c039e574bdab4467eb6017a97a" translate="yes" xml:space="preserve">
          <source>ES6 UPDATE: You could use backtick instead of creating a function with a comment and running toString on the comment. The regex would need to be updated to only strip spaces. You could also have a string prototype method for doing this:</source>
          <target state="translated">ES6 UPDATE:你可以使用backtick来代替创建一个带注释的函数并在注释上运行toString。regex需要更新为只去掉空格。你也可以有一个字符串原型方法来做这个事情。</target>
        </trans-unit>
        <trans-unit id="6fb1a4b87b8ae12fcce73f77c0fd46dc6675d22a" translate="yes" xml:space="preserve">
          <source>ES6 Update:</source>
          <target state="translated">ES6更新。</target>
        </trans-unit>
        <trans-unit id="3a334ffab1ca6e2ee851755efbfd45ddf6823aee" translate="yes" xml:space="preserve">
          <source>ES6 allows you to use a backtick to specify a string on multiple lines.  It's called a Template Literal.  Like this:</source>
          <target state="translated">ES6允许你使用反键在多行中指定一个字符串。这就是所谓的 &quot;模板字段&quot;。就像这样。</target>
        </trans-unit>
        <trans-unit id="3d8806aab2c8fe08542a0e5ca1513e4f85839513" translate="yes" xml:space="preserve">
          <source>Easiest way to make multiline strings in Javascrips is with the use of backticks ( `` ). This allows you to create multiline strings in which you can insert variables with &lt;code&gt;${variableName}&lt;/code&gt;.</source>
          <target state="translated">在Javascrips中制作多行字符串的最简单方法是使用反引号（``）。 这使您可以创建多行字符串，在其中可以使用 &lt;code&gt;${variableName}&lt;/code&gt; 插入变量。</target>
        </trans-unit>
        <trans-unit id="ea82bfc34dbf1b48e8ffdf4a7df50a3166568d6d" translate="yes" xml:space="preserve">
          <source>Easy.</source>
          <target state="translated">Easy.</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">扩展片段</target>
        </trans-unit>
        <trans-unit id="a6a23d942816e20c835acf504ea3e5f99590f77a" translate="yes" xml:space="preserve">
          <source>Firefox 17 - 21 (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString#Notes&quot;&gt;not in 16-&lt;/a&gt;)</source>
          <target state="translated">Firefox &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString#Notes&quot;&gt;17-21&lt;/a&gt; （ 不在16-中 ）</target>
        </trans-unit>
        <trans-unit id="3587ef4db85020921a6d4956d480b2722b6bb454" translate="yes" xml:space="preserve">
          <source>Here's another weird but working 'trick'&lt;sup&gt;&lt;b&gt;1&lt;/b&gt;&lt;/sup&gt;:</source>
          <target state="translated">这是另一个奇怪但有效的&amp;ldquo;技巧&amp;rdquo; &lt;sup&gt;&lt;b&gt;1&lt;/b&gt;&lt;/sup&gt; ：</target>
        </trans-unit>
        <trans-unit id="013b46f430894614f1c199ffc1e6648987e55946" translate="yes" xml:space="preserve">
          <source>Here's the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components&quot;&gt;specification&lt;/a&gt;. See browser support at the bottom of this &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings&quot;&gt;page&lt;/a&gt;. Here are some &lt;a href=&quot;https://developers.google.com/web/updates/2015/01/ES6-Template-Strings?hl=en#multiline-strings&quot;&gt;examples&lt;/a&gt; too.</source>
          <target state="translated">这是&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components&quot;&gt;规格&lt;/a&gt; 。 请参阅此&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings&quot;&gt;页面&lt;/a&gt;底部的浏览器支持。 这里也有一些&lt;a href=&quot;https://developers.google.com/web/updates/2015/01/ES6-Template-Strings?hl=en#multiline-strings&quot;&gt;例子&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="6832d056298e89adcc38c6f18b71ed8cdadb845a" translate="yes" xml:space="preserve">
          <source>Hope it helps !!</source>
          <target state="translated">希望对你有帮助!</target>
        </trans-unit>
        <trans-unit id="f6be1ffa950fa77d20edb2258a67540cf5bb2af0" translate="yes" xml:space="preserve">
          <source>I came up with this very jimmy rigged method of a multi lined string. Since converting a function into a string also returns any comments inside the function you can use the comments as your string using a multilined comment /**/. You just have to trim off the ends and you have your string.</source>
          <target state="translated">我想出了这样一个非常jimmy操纵的多行字符串的方法。由于将一个函数转换为字符串也会返回函数中的注释,所以你可以使用多行注释**作为你的字符串。你只需要把两端修剪掉,你就可以得到你的字符串了。</target>
        </trans-unit>
        <trans-unit id="19b03b1b6c37147d5d29f006e500a4ed4c113fb9" translate="yes" xml:space="preserve">
          <source>I get:</source>
          <target state="translated">我明白了。</target>
        </trans-unit>
        <trans-unit id="6b6abda9450ef82c1beb6ade39c658789c33cb13" translate="yes" xml:space="preserve">
          <source>I have the following code in Ruby. I want to convert this code into JavaScript. what's the equivalent code in JS?</source>
          <target state="translated">我有以下Ruby中的代码,我想把这段代码转换为JavaScript。我想把这段代码转换为JavaScript,请问JS中的代码是什么?</target>
        </trans-unit>
        <trans-unit id="84ea9964264fa606eac35c2b4130ce2c06264d96" translate="yes" xml:space="preserve">
          <source>I like this syntax and indendation:</source>
          <target state="translated">我喜欢这种语法和缩进法。</target>
        </trans-unit>
        <trans-unit id="216ea24feedf5272fc7b8fc5f86df660b57d2770" translate="yes" xml:space="preserve">
          <source>I solved this by outputting a div, making it hidden, and calling the div id by jQuery when I needed it.</source>
          <target state="translated">我通过输出一个div,使其隐藏,并在需要时通过jQuery调用div id来解决这个问题。</target>
        </trans-unit>
        <trans-unit id="6aee685159a0fa849556bb23f0c688eec7c1db1d" translate="yes" xml:space="preserve">
          <source>I think a &lt;em&gt;real&lt;/em&gt; solution would be to use &lt;a href=&quot;http://coffeescript.org/#strings&quot;&gt;CoffeeScript&lt;/a&gt;.</source>
          <target state="translated">我认为&lt;em&gt;真正的&lt;/em&gt;解决方案是使用&lt;a href=&quot;http://coffeescript.org/#strings&quot;&gt;CoffeeScript&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="d7a61ef1d6cbb034e37c2991ff8261ec327534a3" translate="yes" xml:space="preserve">
          <source>I think this workaround should work in IE, Chrome, Firefox, Safari, Opera -</source>
          <target state="translated">我想这个方法应该可以在IE、Chrome、Firefox、Safari、Opera中使用。</target>
        </trans-unit>
        <trans-unit id="a01af91bf8ef40fa799d83178377eccf4f7bb90d" translate="yes" xml:space="preserve">
          <source>I'm surprised I didn't see this, because it works everywhere I've tested it and is very useful for e.g. templates:</source>
          <target state="translated">我很惊讶自己没有看到这个,因为我测试过的地方都能用,而且对模板等非常有用。</target>
        </trans-unit>
        <trans-unit id="4676375e1b831fd1fdadaa2f352ac2e7464bc9e4" translate="yes" xml:space="preserve">
          <source>IE 4 - 10</source>
          <target state="translated">IE 4-10</target>
        </trans-unit>
        <trans-unit id="ce9c3488b1abdadaa9b4684f94f8941beceac501" translate="yes" xml:space="preserve">
          <source>If you have a lot of legacy code, you can also use the plain JavaScript variant in TypeScript (for cleanup purposes):</source>
          <target state="translated">如果你有很多遗留的代码,你也可以在TypeScript中使用纯JavaScript变体(为了清理目的)。</target>
        </trans-unit>
        <trans-unit id="fe1949dec2f6c9e2bfa865e39ba095e064a7aad0" translate="yes" xml:space="preserve">
          <source>If you'd want to accomplish the same with plain JavaScript:</source>
          <target state="translated">如果你想用普通的JavaScript来完成同样的任务。</target>
        </trans-unit>
        <trans-unit id="ceee857c88c4ba94fa186e5d2c8b405aa05ebb62" translate="yes" xml:space="preserve">
          <source>If you're willing to use the escaped newlines, they can be used &lt;em&gt;nicely&lt;/em&gt;.  &lt;strong&gt;It looks like a document with a page border&lt;/strong&gt;.</source>
          <target state="translated">如果您愿意使用转义的换行符，可以&lt;em&gt;很好地&lt;/em&gt;使用它们。 &lt;strong&gt;它看起来像带有页面边框的文档&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="65df262484e1653dfd4d7c1bc7955a54788d9181" translate="yes" xml:space="preserve">
          <source>Interpolating variables is a popular new feature that comes with back-tick delimited strings:</source>
          <target state="translated">插值变量是一个流行的新功能,它自带反键分隔符串。</target>
        </trans-unit>
        <trans-unit id="9f13095386686fcfc18ddda0102997d5765a48f6" translate="yes" xml:space="preserve">
          <source>Is the .push() to add to the array taking up a lot of time? See this related answer:</source>
          <target state="translated">添加到数组中的.push()是否占用了很多时间?请看这个相关的回答。</target>
        </trans-unit>
        <trans-unit id="7493f00450d4786e514d13166b0ca17f808e2c5d" translate="yes" xml:space="preserve">
          <source>It DOES work in Opera 11. At least in user JS scripts. Too bad I can't comment on individual answers or upvote the answer, I'd do it immediately. If possible, someone with higher privileges please do it for me.</source>
          <target state="translated">它在Opera 11中确实可以使用。至少在用户的JS脚本中是这样的。太糟糕了,我不能对单个答案发表评论或对答案进行投票,我想马上去做。如果可能的话,请有更高权限的人帮我做一下。</target>
        </trans-unit>
        <trans-unit id="9c9f4f3869a8711567402378d1b45a90e5c7d85c" translate="yes" xml:space="preserve">
          <source>It doesn't work on firefox or opera; only on IE, chrome and safari.</source>
          <target state="translated">它在firefox或 opera上不能使用,只能在IE、chrome和safari上使用。</target>
        </trans-unit>
        <trans-unit id="3a8be88791dc07052d9a6c08e234d8e99e5c5ed8" translate="yes" xml:space="preserve">
          <source>It is now natively supported by all major browser vendors (except internet explorer)</source>
          <target state="translated">它现在已被所有主要的浏览器厂商(除互联网浏览器外)原生支持。</target>
        </trans-unit>
        <trans-unit id="bbf9be9731df6814cc695ff22f360f2520f6a3e7" translate="yes" xml:space="preserve">
          <source>It was introduces in &lt;code&gt;ES6&lt;/code&gt;//&lt;code&gt;es2015&lt;/code&gt;</source>
          <target state="translated">在 &lt;code&gt;ES6&lt;/code&gt; 中引入// // &lt;code&gt;es2015&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="179f9c40fd82e87a7dcf8ea7427a41307af2e39e" translate="yes" xml:space="preserve">
          <source>Javascript doesn't have a here-document syntax. You can escape the literal newline, however, which comes close:</source>
          <target state="translated">Javascript没有here-document语法。但是,你可以转义字面的换行,这一点很接近。</target>
        </trans-unit>
        <trans-unit id="d4b9453eea0ec8b6ea04ed9ccefdd9cc315af266" translate="yes" xml:space="preserve">
          <source>Just tried the Anonymous answer and found there's a little trick here, it doesn't work if there's a space after backslash &lt;code&gt;\&lt;/code&gt;</source>
          <target state="translated">刚刚尝试了匿名答案，发现这里有一个小窍门，如果反斜杠后有空格，它就不起作用了 &lt;code&gt;\&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d80f7930d63b667860addadd5bf42cfced345045" translate="yes" xml:space="preserve">
          <source>More reference &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;在这里&lt;/a&gt;更多参考</target>
        </trans-unit>
        <trans-unit id="b5e84babbc061e9d00d5b635f42dc3d8a8d64524" translate="yes" xml:space="preserve">
          <source>My extension to &lt;a href=&quot;https://stackoverflow.com/a/15558082/80404&quot;&gt;https://stackoverflow.com/a/15558082/80404&lt;/a&gt;.
It expects comment in a form &lt;code&gt;/*! any multiline comment */&lt;/code&gt; where symbol ! is used to prevent removing by minification (at least for YUI compressor)</source>
          <target state="translated">我对&lt;a href=&quot;https://stackoverflow.com/a/15558082/80404&quot;&gt;https://stackoverflow.com/a/15558082/80404的&lt;/a&gt;扩展。 它期望以 &lt;code&gt;/*! any multiline comment */&lt;/code&gt; 形式进行注释！ 任何多行注释* /其中的符号！ 用于防止缩小（至少对于YUI压缩机而言）</target>
        </trans-unit>
        <trans-unit id="327468f4961f4be3736c57bc078b066d629c4478" translate="yes" xml:space="preserve">
          <source>My version of array-based join for string concat:</source>
          <target state="translated">我的版本是基于数组的数组联接,用于string concat。</target>
        </trans-unit>
        <trans-unit id="60c2c0416974dd8c243f7a3c2533415f7fbadeb0" translate="yes" xml:space="preserve">
          <source>NPM/browserify: the 'brfs' module</source>
          <target state="translated">NPMbrowserify:'brfs'模块</target>
        </trans-unit>
        <trans-unit id="630493ccdc9ccc13308f420e2fb75b1f9c2001f9" translate="yes" xml:space="preserve">
          <source>Note that the iPad/Safari does not support &lt;code&gt;'functionName.toString()'&lt;/code&gt;</source>
          <target state="translated">请注意，iPad / Safari不支持 &lt;code&gt;'functionName.toString()'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d652d6b052142522d5e9d9ae0f98be1c3905dcc9" translate="yes" xml:space="preserve">
          <source>Opera 9.50 - 12 (not in 9-)</source>
          <target state="translated">Opera 9.50-12(不在9-)</target>
        </trans-unit>
        <trans-unit id="fe7c5b437af6c4f466346ac501b85b705b6be7ee" translate="yes" xml:space="preserve">
          <source>Original ES5 answer:</source>
          <target state="translated">原本ES5的答案。</target>
        </trans-unit>
        <trans-unit id="60a8ed1f3fae1cd0c150dd6c98d528692dc6c144" translate="yes" xml:space="preserve">
          <source>Performance wise, &lt;strong&gt;Slash concatenation&lt;/strong&gt; (first one) is the fastest.</source>
          <target state="translated">在性能方面， &lt;strong&gt;Slash串联&lt;/strong&gt; （第一个）是最快的。</target>
        </trans-unit>
        <trans-unit id="caa9875ec171fff5331114c7fffc38d1807da822" translate="yes" xml:space="preserve">
          <source>Please for the love of the internet use string concatenation and opt not to use ES6 solutions for this. ES6 is NOT supported all across the board, much like CSS3 and certain browsers being slow to adapt to the CSS3 movement. Use plain ol' JavaScript, your end users will thank you.</source>
          <target state="translated">看在互联网的份上,请使用字符串连接,不要使用ES6解决方案。ES6并不是全面支持的,就像CSS3和某些浏览器迟迟不能适应CSS3运动一样。使用普通的JavaScript,你的终端用户会感谢你的。</target>
        </trans-unit>
        <trans-unit id="ccd9786b11ae8e53160d12abc3b63e0229a76339" translate="yes" xml:space="preserve">
          <source>Rekonq 0.7.0 - 0.8.0</source>
          <target state="translated">Rekonq 0.7.0-0.8.0</target>
        </trans-unit>
        <trans-unit id="caf3ca66b2f4df9d029538e6fa17ee1bece60303" translate="yes" xml:space="preserve">
          <source>Safari 4 - 6 (not in 3-)</source>
          <target state="translated">野生动物园4-6(不在3级)</target>
        </trans-unit>
        <trans-unit id="867de2a3633e7d07c133f7dfc7e4ec13e3c4edd6" translate="yes" xml:space="preserve">
          <source>So I recommend the working approach for Opera user JS users. Unlike what the author was saying:</source>
          <target state="translated">所以笔者推荐的是Opera用户JS用户的工作方式。不像作者说的那样。</target>
        </trans-unit>
        <trans-unit id="46f93807af21f04c782aadd9ec39f35c77f378fd" translate="yes" xml:space="preserve">
          <source>So the following solution doesn't work -</source>
          <target state="translated">所以,下面的解决方案是行不通的 --</target>
        </trans-unit>
        <trans-unit id="7f479d1c28edfab20b93121b357b35d4d27000a8" translate="yes" xml:space="preserve">
          <source>That would be cool. Someone should write this .removeIndentation string method... ;)</source>
          <target state="translated">这将是很酷的。应该有人写出这个.deleteIndentation字符串方法....;)</target>
        </trans-unit>
        <trans-unit id="ef70080364d881d5382eddb903cc39b98302bc25" translate="yes" xml:space="preserve">
          <source>The ES6 way of doing it would be by using template literals:</source>
          <target state="translated">ES6的方法是使用模板字面意思。</target>
        </trans-unit>
        <trans-unit id="ae01df7fd2d89e5f278c1d9dc3cc2376f7f060f1" translate="yes" xml:space="preserve">
          <source>The equivalent in javascript is:</source>
          <target state="translated">javascript中的等价物是:</target>
        </trans-unit>
        <trans-unit id="0e8df63d49f93c07b756c22250ea5608abef0e77" translate="yes" xml:space="preserve">
          <source>The method has successfully been tested in the following browsers (not mentioned = not tested):</source>
          <target state="translated">该方法已在以下浏览器中成功测试过(未提及=未测试)。</target>
        </trans-unit>
        <trans-unit id="3a001afe471a033ff303b5665c1eb1c6980e5391" translate="yes" xml:space="preserve">
          <source>The whitespace at the beginning of each line can't be safely stripped at compile time; whitespace after the slash will result in tricky errors; and while most script engines support this, it is not part of ECMAScript.</source>
          <target state="translated">在编译时,每行开头的空格不能被安全地去掉;斜线后的空格会导致棘手的错误;虽然大多数脚本引擎都支持这一点,但这不是ECMAScript的一部分。</target>
        </trans-unit>
        <trans-unit id="46e6ddc461146e4235c51770a5683d50d7f847de" translate="yes" xml:space="preserve">
          <source>Then when I need to get the string, I just use the following jQuery:</source>
          <target state="translated">那么当我需要获取字符串时,我只需要使用下面的jQuery。</target>
        </trans-unit>
        <trans-unit id="39e1bfbae3c5595da40bb7be67d4d3f042b9248d" translate="yes" xml:space="preserve">
          <source>There are multiple ways to achieve this</source>
          <target state="translated">有多种方法可以实现这一目标</target>
        </trans-unit>
        <trans-unit id="27af5f0d31556009113722e8035e360b8e6ec7c0" translate="yes" xml:space="preserve">
          <source>There's this library that makes it beautiful:</source>
          <target state="translated">有这样一个图书馆,让它变得很美。</target>
        </trans-unit>
        <trans-unit id="19c0a3fb12a4f01badd38d5fc54241f3f836734e" translate="yes" xml:space="preserve">
          <source>This has been tested in Fx 19 and Chrome 24 on Mac</source>
          <target state="translated">这已经在Mac上的Fx 19和Chrome 24中进行了测试。</target>
        </trans-unit>
        <trans-unit id="9ce730fac9c2d18d2946a5674357b589e4b3f190" translate="yes" xml:space="preserve">
          <source>This has worked well for me, especially as I often insert values into the html constructed this way. But it has lots of limitations. Indentation would be nice. Not having to deal with nested quotation marks would be really nice, and just the bulkyness of it bothers me.</source>
          <target state="translated">这个方法对我来说效果很好,尤其是我经常用这种方法将值插入到html中。但它有很多限制。缩进会很好。不需要处理嵌套的引号会很好,而且它的体积太大,让我很烦恼。</target>
        </trans-unit>
        <trans-unit id="610dd3a9b8a5805e147d17ac870a27a74e549c75" translate="yes" xml:space="preserve">
          <source>This just transpiles down to concatenation:</source>
          <target state="translated">这只是换算成了串联。</target>
        </trans-unit>
        <trans-unit id="43f921c1fa94efebfdce9dbc0afd2325ac2f5027" translate="yes" xml:space="preserve">
          <source>This method is based on the serialization of functions, which is &lt;a href=&quot;http://es5.github.io/#x15.3.4.2&quot;&gt;defined to be implementation-dependent&lt;/a&gt;. It does work in the most browsers (see below), but there's no guarantee that it will still work in the future, so do not rely on it.</source>
          <target state="translated">此方法基于功能的序列化，该序列化被&lt;a href=&quot;http://es5.github.io/#x15.3.4.2&quot;&gt;定义为与实现相关&lt;/a&gt; 。 它确实可以在大多数浏览器中运行（请参阅下文），但不能保证它将来仍会运行，因此请不要依赖它。</target>
        </trans-unit>
        <trans-unit id="ab951f09a5130afb5039a9922d6184fc8193a104" translate="yes" xml:space="preserve">
          <source>This works in IE, Safari, Chrome and Firefox:</source>
          <target state="translated">这可以在IE、Safari、Chrome和Firefox中使用。</target>
        </trans-unit>
        <trans-unit id="1691ecc8a73a6d9893052684bbc52fa827b49fb8" translate="yes" xml:space="preserve">
          <source>To keep oversight with complex or long multiline strings I sometimes use an array pattern:</source>
          <target state="translated">为了对复杂或长的多行字符串进行监督,我有时会使用数组模式。</target>
        </trans-unit>
        <trans-unit id="acf72ff8536cb7c07913f02c5d05cbe20402fc3e" translate="yes" xml:space="preserve">
          <source>Update:</source>
          <target state="translated">Update:</target>
        </trans-unit>
        <trans-unit id="2cc8b54c32ff3a47608ce389c75c9fae180584a2" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;https://github.com/requirejs/text&quot;&gt;require.js 'text' plugin&lt;/a&gt;, with a multiline template in &lt;strong&gt;template.html&lt;/strong&gt;</source>
          <target state="translated">使用&lt;a href=&quot;https://github.com/requirejs/text&quot;&gt;require.js'text'插件&lt;/a&gt; ，并在&lt;strong&gt;template.html中&lt;/strong&gt;使用多行&lt;strong&gt;模板&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="941bf4825a058076abc5965399544e3b623d4f90" translate="yes" xml:space="preserve">
          <source>Using script tags:</source>
          <target state="translated">使用脚本标签。</target>
        </trans-unit>
        <trans-unit id="e3265c43fff083d95ecacbd870bcb941a94b0ad6" translate="yes" xml:space="preserve">
          <source>Using the backtick works in NodeJS, and it's supported by Chrome, Firefox, Edge, Safari, and Opera.</source>
          <target state="translated">在NodeJS中使用backtick,Chrome、Firefox、Edge、Safari和Opera都支持。</target>
        </trans-unit>
        <trans-unit id="4989b0e66aeebb5b41ea7226ab3d548587abfe83" translate="yes" xml:space="preserve">
          <source>Using the following function:</source>
          <target state="translated">使用以下功能:</target>
        </trans-unit>
        <trans-unit id="23ddeb0466ab6d7a41140da6ee81ff1244de1213" translate="yes" xml:space="preserve">
          <source>Which returns my text on multiple lines. If I call</source>
          <target state="translated">其中返回我在多行的文本。如果我调用</target>
        </trans-unit>
        <trans-unit id="2572839cd097cf33b609d9a1eba23c02a431d32e" translate="yes" xml:space="preserve">
          <source>With the &lt;strong&gt;ES2015&lt;/strong&gt;, we can take advantage of its Template strings feature. With it, we just need to use back-ticks for creating multi line strings</source>
          <target state="translated">借助&lt;strong&gt;ES2015&lt;/strong&gt; ，我们可以利用其模板字符串功能。 有了它，我们只需要使用反引号来创建多行字符串</target>
        </trans-unit>
        <trans-unit id="9dcb05d74b3d2d805a039302b37c1b4ddf9f812f" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;can&lt;/em&gt; have multiline strings in pure JavaScript.</source>
          <target state="translated">您&lt;em&gt;可以&lt;/em&gt;在纯JavaScript中使用多行字符串。</target>
        </trans-unit>
        <trans-unit id="3ec1296fccfbcf827daa7b1f4a8b1cfc9b064280" translate="yes" xml:space="preserve">
          <source>You can do this...</source>
          <target state="translated">你可以这样做.....</target>
        </trans-unit>
        <trans-unit id="0b1a030acbff99a2047f447fc70835164fe36427" translate="yes" xml:space="preserve">
          <source>You can have here-documents like this:</source>
          <target state="translated">你可以拥有像这样的文件。</target>
        </trans-unit>
        <trans-unit id="7071001656263a0b0914853e07b053aa54d485de" translate="yes" xml:space="preserve">
          <source>You can try TypeScript at</source>
          <target state="translated">你可以在以下网址尝试一下TypeScript</target>
        </trans-unit>
        <trans-unit id="2c5db72a01e5ec1898714814eaccad47efb37e75" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;http://www.typescriptlang.org/Playground&quot;&gt;TypeScript&lt;/a&gt; (JavaScript SuperSet), it supports multiline strings, and transpiles back down to pure JavaScript without overhead:</source>
          <target state="translated">您可以使用&lt;a href=&quot;http://www.typescriptlang.org/Playground&quot;&gt;TypeScript&lt;/a&gt; （JavaScript SuperSet），它支持多行字符串，并且可以将其转换回纯JavaScript，而不会产生开销：</target>
        </trans-unit>
        <trans-unit id="893bacad168532412f6c651b5999cf7170e01b50" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;+=&lt;/code&gt; to concatenate your string, seems like no one answered that, which will be readable, and also neat... something like this</source>
          <target state="translated">您可以使用 &lt;code&gt;+=&lt;/code&gt; 来连接您的字符串，似乎没有人回答，这将是可读的，而且也很整洁。</target>
        </trans-unit>
        <trans-unit id="9d14e2ff189889431e5315389e1033c41609136d" translate="yes" xml:space="preserve">
          <source>You have to use the concatenation operator '+'.</source>
          <target state="translated">你必须使用连接符'+'。</target>
        </trans-unit>
        <trans-unit id="b095c7952b8061d7c0613ecc76de9dadd3faee2c" translate="yes" xml:space="preserve">
          <source>add a &lt;code&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt; block containing your multiline text into &lt;code&gt;head&lt;/code&gt; tag;</source>
          <target state="translated">在 &lt;code&gt;head&lt;/code&gt; 标签中添加包含多行文本的 &lt;code&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt; 块；</target>
        </trans-unit>
        <trans-unit id="55587055c87a40c50c914d5c723b4c1c7f0ec2d7" translate="yes" xml:space="preserve">
          <source>and you can use the multiline-string object from the plain JavaScript variant, where you put the templates into another file (which you can merge in the bundle).</source>
          <target state="translated">而你可以使用纯JavaScript变体中的multline-string对象,在这里你可以把模板放到另一个文件中(你可以把它合并到bundle中)。</target>
        </trans-unit>
        <trans-unit id="1c3e0fb1ffbf08227035f3b11a53c2d31774bd22" translate="yes" xml:space="preserve">
          <source>can be also written as</source>
          <target state="translated">也可以写成</target>
        </trans-unit>
        <trans-unit id="9b14fd489a2ea7db0f7f49ad028a069e3852b4fc" translate="yes" xml:space="preserve">
          <source>compatibility :</source>
          <target state="translated">兼容性</target>
        </trans-unit>
        <trans-unit id="7f53a68d324346fc8457a1665141697dcc97ee86" translate="yes" xml:space="preserve">
          <source>e.g.</source>
          <target state="translated">e.g.</target>
        </trans-unit>
        <trans-unit id="c05c26d2af9c420a9f6716a38a0456918edf7add" translate="yes" xml:space="preserve">
          <source>get your multiline text as is... (watch out for text encoding: UTF-8, ASCII)</source>
          <target state="translated">获取您的多行文本.....。(注意文本编码:UTF-8,ASCII)</target>
        </trans-unit>
        <trans-unit id="54ce28968d2394751f40d54d26fc49d3c7629b40" translate="yes" xml:space="preserve">
          <source>or the pattern anonymous already showed (escape newline), which can be an ugly block in your code:</source>
          <target state="translated">或匿名已经显示的模式(转义换行),这可能是你的代码中一个很难看的块。</target>
        </trans-unit>
        <trans-unit id="62c1a99302d4ba9d8d479464d845c7a09b9f3843" translate="yes" xml:space="preserve">
          <source>require.js: 'require text'.</source>
          <target state="translated">require.js:'require text'。</target>
        </trans-unit>
        <trans-unit id="e76b83e9f81aa49215ab3a4621fb267db9bcae38" translate="yes" xml:space="preserve">
          <source>the pattern &lt;code&gt;text = &amp;lt;&amp;lt;&quot;HERE&quot; This Is A Multiline String HERE&lt;/code&gt; is not available in js (I remember using it much in my good old Perl days).</source>
          <target state="translated">模式 &lt;code&gt;text = &amp;lt;&amp;lt;&quot;HERE&quot; This Is A Multiline String HERE&lt;/code&gt; 在js中不可用（我记得在Perl过去的美好时光中经常使用它）。</target>
        </trans-unit>
        <trans-unit id="78cf1b699176d8fa12ee8f303fbfdbdd63eccac4" translate="yes" xml:space="preserve">
          <source>this one didn't work: &lt;a href=&quot;https://stackoverflow.com/questions/805107/multiline-strings-in-javascript/805111#805111&quot;&gt;Creating multiline strings in JavaScript&lt;/a&gt;</source>
          <target state="translated">这个没有用： &lt;a href=&quot;https://stackoverflow.com/questions/805107/multiline-strings-in-javascript/805111#805111&quot;&gt;用JavaScript创建多行字符串&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="37cfb316639b26d9e51816bae13bb1aedeedeb79" translate="yes" xml:space="preserve">
          <source>this worked fairly well, I have also figured out how to make it look good in Notepad++ source view: &lt;a href=&quot;https://stackoverflow.com/questions/805107/multiline-strings-in-javascript/5571069#5571069&quot;&gt;Creating multiline strings in JavaScript&lt;/a&gt;</source>
          <target state="translated">这工作得很好，我还想出了如何在Notepad ++源代码视图中使其看起来更好： &lt;a href=&quot;https://stackoverflow.com/questions/805107/multiline-strings-in-javascript/5571069#5571069&quot;&gt;在JavaScript中创建多行字符串&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7b6869a2159a8fb6549227e36bd1523db19f7073" translate="yes" xml:space="preserve">
          <source>to sum up, I have tried 2 approaches listed here in user javascript programming (Opera 11.01):</source>
          <target state="translated">总结一下,我在用户javascript编程(Opera 11.01)中尝试了2种方法,这里列出了2种方法。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
