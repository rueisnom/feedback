<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/285177">
    <body>
      <group id="285177">
        <trans-unit id="da2c2a406688ad784f008f6ba0c37d3f4968fde4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;super&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;super&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="1570e0a400659d87380ad774797b12bbbbef9194" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; or</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0578b5272e7590f83f86c29696c0dc2dcfc69161" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;that new constructor call must be the first statement in the current constructor&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esa nueva llamada de constructor debe ser la primera instrucci&amp;oacute;n en el constructor actual&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="113446d8c05dcdbe513e313130a7359b2fe21f6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default constructor&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Constructor predeterminado&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1e504ff0eea855cb66cb68170a7d0daf098d203e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;However, keep in mind that&lt;/strong&gt; within such an explicit constructor invocation statement &lt;strong&gt;you may not refer to&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, tenga en cuenta que&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; dentro de una declaraci&amp;oacute;n de invocaci&amp;oacute;n de constructor tan expl&amp;iacute;cita &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no puede hacer referencia a&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4c6ecf08d4ef58fcc1a22b456f5b5727456a4094" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I will tell you an easy way&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Te dir&amp;eacute; una manera f&amp;aacute;cil&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8fdabbee9df7d4adcd4c3a1d8b69be279041658c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parameterized constructor&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Constructor parametrizado&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="36836982d213919a45ff0d8bae98d2725b0a6e98" translate="yes" xml:space="preserve">
          <source>Also you can call parent constructor by using &lt;code&gt;super()&lt;/code&gt; call</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n puede llamar al constructor padre utilizando la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;llamada &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b351f4ed63056e18b5ad475f23042f6f33ddd67" translate="yes" xml:space="preserve">
          <source>Also, in the case of inheritance, when sub-class's object is created, the super class constructor is first called.</source>
          <target state="translated">Además,en el caso de la herencia,cuando se crea el objeto de la subclase,se llama primero al constructor de la superclase.</target>
        </trans-unit>
        <trans-unit id="28c09431c459319070264df5eb50ac6b26e78fa1" translate="yes" xml:space="preserve">
          <source>As everybody already have said, you use &lt;code&gt;this(&amp;hellip;)&lt;/code&gt;, which is called an &lt;em&gt;explicit constructor invocation&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como todo el mundo ya ha dicho, usa &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this(&amp;hellip;)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que se llama una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;invocaci&amp;oacute;n expl&amp;iacute;cita de constructor&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e25a328797305f111c2114167163229894c68252" translate="yes" xml:space="preserve">
          <source>As stated in JLS (&amp;sect;8.8.7.1).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como se indica en JLS (&amp;sect;8.8.7.1).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cf3a64e8cdb03533b2cb5b6c8ac554264862c6d8" translate="yes" xml:space="preserve">
          <source>Bellow is a link that I explain other topic about constructor and getters() and setters() and I used a class with two constructors. I hope the explanations and examples help you.</source>
          <target state="translated">Abajo hay un enlace en el que explico otro tema sobre constructores y colocadores()y usé una clase con dos constructores.Espero que las explicaciones y ejemplos les ayuden.</target>
        </trans-unit>
        <trans-unit id="c526bc07425ffc1be847fceb88efeb4d2e528240" translate="yes" xml:space="preserve">
          <source>But most often I try to do it the other way around by calling the more complex constructors from the simpler ones on the first line, to the extent possible. For the above example</source>
          <target state="translated">Pero la mayoría de las veces trato de hacerlo al revés,llamando a los constructores más complejos de los más simples en la primera línea,en la medida de lo posible.Para el ejemplo anterior</target>
        </trans-unit>
        <trans-unit id="b352d2c0748e18100553eb126c40fd5afc858ce0" translate="yes" xml:space="preserve">
          <source>Call it with...</source>
          <target state="translated">Llámalo con...</target>
        </trans-unit>
        <trans-unit id="08c629ca58c6af8a5e124bb86ea1ce1b8ca4e4ea" translate="yes" xml:space="preserve">
          <source>Calling constructor from another constructor</source>
          <target state="translated">Llamando al constructor de otro constructor</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="eeff9a63bf20eab5f1e144bf188811896077bcb0" translate="yes" xml:space="preserve">
          <source>Here's another Rectangle class, with a different implementation from the one in the Objects section.</source>
          <target state="translated">Aquí hay otra clase de Rectángulo,con una implementación diferente a la de la sección de Objetos.</target>
        </trans-unit>
        <trans-unit id="a6a0ce9031e0776d5fc6120b3023d51bccf114f1" translate="yes" xml:space="preserve">
          <source>Hope this helps.</source>
          <target state="translated">Espero que esto ayude.</target>
        </trans-unit>
        <trans-unit id="1a4878850a19e4ba95a9ea5c6ab33e240129f8c3" translate="yes" xml:space="preserve">
          <source>How do I call one constructor from another in Java</source>
          <target state="translated">¿Cómo puedo llamar a un constructor de otro en Java</target>
        </trans-unit>
        <trans-unit id="9cd61cf9ea6fcc205f720e1465e10fcb258d0780" translate="yes" xml:space="preserve">
          <source>However, such a call must be the &lt;strong&gt;first&lt;/strong&gt; statement of your constructor. To &lt;strong&gt;overcome&lt;/strong&gt; this limitation, use &lt;a href=&quot;https://stackoverflow.com/a/51571736/9772691&quot;&gt;this answer&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, dicha llamada debe ser la &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;primera&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; declaraci&amp;oacute;n de su constructor. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;superar&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; esta limitaci&amp;oacute;n, use &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/51571736/9772691&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esta respuesta&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29b5be6516cfa45ce600e3f206a012a0e823d433" translate="yes" xml:space="preserve">
          <source>I know there are so many examples of this question but what I found I am putting here to share my Idea. there are two ways to chain constructor. In Same class you can use this keyword. in Inheritance, you need to use super keyword.</source>
          <target state="translated">Sé que hay muchos ejemplos de esta pregunta pero lo que encontré lo pongo aquí para compartir mi idea.Hay dos maneras de encadenar a los constructores.En la misma clase se puede usar esta palabra clave.En Herencia,hay que usar la super palabra clave.</target>
        </trans-unit>
        <trans-unit id="a7bef60a9c8ba9945f6fea6181eaa5bc82defcdb" translate="yes" xml:space="preserve">
          <source>I prefer this way:</source>
          <target state="translated">Prefiero esta forma:</target>
        </trans-unit>
        <trans-unit id="8a0a1a6c31c2f468bfa17b1badfb996ec443bcaa" translate="yes" xml:space="preserve">
          <source>I will explain in one Example</source>
          <target state="translated">Lo explicaré en un ejemplo</target>
        </trans-unit>
        <trans-unit id="a772f022da42c0a58b99959ba423388fced1389f" translate="yes" xml:space="preserve">
          <source>In Java another constructor of the same class can be called from a constructor via &lt;code&gt;this()&lt;/code&gt;. Note however that &lt;code&gt;this&lt;/code&gt; has to be on the first line.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En Java, se puede llamar a otro constructor de la misma clase desde un constructor a trav&amp;eacute;s de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tenga en cuenta &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene que estar en la primera l&amp;iacute;nea.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="857ecb12e0d4c75308567f3f5bdaa628eb9e91d9" translate="yes" xml:space="preserve">
          <source>In the above example I showed 3 types of calling</source>
          <target state="translated">En el ejemplo anterior mostré 3 tipos de llamadas</target>
        </trans-unit>
        <trans-unit id="ed58c2b20d1c779f5f24b86488e90144d82df0e5" translate="yes" xml:space="preserve">
          <source>Is it possible to call a constructor from another (within the same class, not from a subclass)? If yes how? And what could be the best way to call another constructor (if there are several ways to do it)?</source>
          <target state="translated">¿Es posible llamar a un constructor de otro (dentro de la misma clase,no de una subclase)? Si es así,¿cómo? ¿Y cuál podría ser la mejor manera de llamar a otro constructor (si hay varias maneras de hacerlo)?</target>
        </trans-unit>
        <trans-unit id="9da498802f2772660a98c0b51c8680e59083ae79" translate="yes" xml:space="preserve">
          <source>It is called Telescoping Constructor anti-pattern or constructor chaining. Yes, you can definitely do. I see many examples above and I want to add by saying that if you know that you need only two or three constructor, it might be ok. But if you need more, please try to use different design pattern like Builder pattern. As for example:</source>
          <target state="translated">Se llama Constructor Telescópico anti-patrón o encadenamiento de constructor.Sí,definitivamente puedes hacerlo.Veo muchos ejemplos arriba y quiero añadir diciendo que si sabes que sólo necesitas dos o tres constructores,podría estar bien.Pero si necesitas más,por favor,intenta usar un patrón de diseño diferente como el patrón Constructor.Como por ejemplo:</target>
        </trans-unit>
        <trans-unit id="66d004e02aa0bd3c90660cddc0c81a6c1737ff64" translate="yes" xml:space="preserve">
          <source>Just for completeness: There is also the &lt;a href=&quot;https://stackoverflow.com/questions/3987428/what-is-an-initialization-block&quot;&gt;Instance initialization block&lt;/a&gt; that gets executed always and before any other constructor is called. It consists simply of a block of statements &quot;{ ... }&quot; somewhere in the body of your class definition.  You can even have more than one.  You can't call them, but they're like &quot;shared constructor&quot; code if you want to reuse some code across constructors, similar to calling methods.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Solo para completar: tambi&amp;eacute;n existe el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3987428/what-is-an-initialization-block&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;bloque de inicializaci&amp;oacute;n de Instancia&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que se ejecuta siempre y antes de que se llame a cualquier otro constructor. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Consiste simplemente en un bloque de declaraciones &quot;{...}&quot; en alg&amp;uacute;n lugar del cuerpo de su definici&amp;oacute;n de clase. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Incluso puedes tener m&amp;aacute;s de uno. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No puede llamarlos, pero son como c&amp;oacute;digo de &quot;constructor compartido&quot; si desea reutilizar alg&amp;uacute;n c&amp;oacute;digo entre constructores, similar a los m&amp;eacute;todos de llamada.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e1d7d343e3f1883c55ee4833e010cf3de77bb6f6" translate="yes" xml:space="preserve">
          <source>Note:
&lt;strong&gt;this must be the first statement in the constructor.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Nota: &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esta debe ser la primera declaraci&amp;oacute;n en el constructor.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c3c87e545947fc34b0d17bf8dd7b820d790be25" translate="yes" xml:space="preserve">
          <source>Originally from an anser by Mirko Klemm, slightly modified to address the question:</source>
          <target state="translated">Originalmente de un anser de Mirko Klemm,ligeramente modificado para abordar la cuestión:</target>
        </trans-unit>
        <trans-unit id="2c64aa5e2c637c8c6604b5cd115dc7194eec49f0" translate="yes" xml:space="preserve">
          <source>Output -
string as arg constructor..
Default constructor..
int as arg constructor..</source>
          <target state="translated">Salida-cuerda como constructor de arg..Constructor por defecto ..int as arg constructor ..</target>
        </trans-unit>
        <trans-unit id="b60d3818158ba9dbeee3b0a5bda99862e20e9e64" translate="yes" xml:space="preserve">
          <source>Please note that for constructor, only overloading concept is applicable and not inheritance or overriding.</source>
          <target state="translated">Tenga en cuenta que para el constructor,sólo el concepto de sobrecarga es aplicable y no la herencia o la anulación.</target>
        </trans-unit>
        <trans-unit id="c0837e769968431d150bbf5446ef7cf12b4e4b95" translate="yes" xml:space="preserve">
          <source>Pretty simple</source>
          <target state="translated">Bastante simple</target>
        </trans-unit>
        <trans-unit id="d1a28d81c68af25fcf29c170dcb874d6691a17a9" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://stackoverflow.com/questions/284896&quot;&gt;this related question&lt;/a&gt;, which is about C# but where the same principles apply.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Consulte tambi&amp;eacute;n &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/284896&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esta pregunta relacionada&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que trata sobre C # pero donde se aplican los mismos principios.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b55c0a50cc14146837a8fe190b060cd511d1bdc9" translate="yes" xml:space="preserve">
          <source>Setter methods or constructors</source>
          <target state="translated">Los métodos de fijación o los constructores</target>
        </trans-unit>
        <trans-unit id="8deb1cfdc16d10db651aff1f90e9993550a27ead" translate="yes" xml:space="preserve">
          <source>So in your case</source>
          <target state="translated">Así que en tu caso</target>
        </trans-unit>
        <trans-unit id="93774368e56263cf0765c4499f0ac1c3e9f304a5" translate="yes" xml:space="preserve">
          <source>So, something like below will not work.</source>
          <target state="translated">Entonces,algo como lo de abajo no funcionará.</target>
        </trans-unit>
        <trans-unit id="cea6e61837f7133ec906933675fe50fbb564825c" translate="yes" xml:space="preserve">
          <source>That &lt;code&gt;this&lt;/code&gt; has to appear on the first line looks like a big limitation, but you can construct the arguments of other constructors via static methods. For example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tenga que aparecer en la primera l&amp;iacute;nea parece una gran limitaci&amp;oacute;n, pero puede construir los argumentos de otros constructores a trav&amp;eacute;s de m&amp;eacute;todos est&amp;aacute;ticos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3b473341650fae32aaa7670f04766d11ce38db7c" translate="yes" xml:space="preserve">
          <source>The keyword &lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt; can be used to call a constructor from a constructor, when writing several constructor for a class, there are times when you'd like to call one constructor from another to avoid duplicate code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La palabra clave &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;this&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se puede usar para llamar a un constructor desde un constructor, cuando se escriben varios constructores para una clase, hay momentos en los que le gustar&amp;iacute;a llamar a un constructor desde otro para evitar el c&amp;oacute;digo duplicado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="46cb785349c7e141897f24d50c33594ec96e1a6f" translate="yes" xml:space="preserve">
          <source>There are &lt;strong&gt;two&lt;/strong&gt; types of constructors:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hay &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tipos de constructores:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d05e73fcf59db3100ee9ab16c27575c98172193" translate="yes" xml:space="preserve">
          <source>There are design patterns that cover the need for complex construction - if it can't be done succinctly, create a factory method or a factory class.</source>
          <target state="translated">Hay patrones de diseño que cubren la necesidad de una construcción compleja-si no se puede hacer de forma sucinta,crear un método de fábrica o una clase de fábrica.</target>
        </trans-unit>
        <trans-unit id="0d824cab49c8e2bffb159a9925aa5fe848c301c8" translate="yes" xml:space="preserve">
          <source>There is also a &quot;static&quot; version of this to initialize static members: &quot;static { ... }&quot;</source>
          <target state="translated">También hay una versión &quot;estática&quot; de esto para inicializar los miembros estáticos:&quot;Estático&quot;{...}&quot;</target>
        </trans-unit>
        <trans-unit id="b86ec29c29a7fe5f742c631234d9a9f82e359477" translate="yes" xml:space="preserve">
          <source>This class contains a set of constructors. Each constructor initializes some or all of the rectangle's member variables.</source>
          <target state="translated">Esta clase contiene un conjunto de constructores.Cada constructor inicializa algunas o todas las variables de los miembros del rectángulo.</target>
        </trans-unit>
        <trans-unit id="e6eb5df5f73e0e830ef7ab5b3b0bb277bfe295b7" translate="yes" xml:space="preserve">
          <source>This is Name less Object. this automatically calls the default constructor.
3.This calls the Parameterized constructor.</source>
          <target state="translated">Esto es Name less Object.Esto llama automáticamente al constructor por defecto.3.Esto llama al constructor parametrizado.</target>
        </trans-unit>
        <trans-unit id="6e8901eec108afd7fb2965a3eb12cb2ac6b16570" translate="yes" xml:space="preserve">
          <source>This is known as constructor overloading.</source>
          <target state="translated">Esto se conoce como sobrecarga del constructor.</target>
        </trans-unit>
        <trans-unit id="e11ccaaaee014d236c3c0ddb05be21104e16827e" translate="yes" xml:space="preserve">
          <source>Thus, in this case also another constructor call is first declared before any other statements.</source>
          <target state="translated">Así,en este caso también se declara primero otra llamada de constructor antes de cualquier otra declaración.</target>
        </trans-unit>
        <trans-unit id="e94da6c3ce24db587867b70aecc294c08a1dfa21" translate="yes" xml:space="preserve">
          <source>To call a super class, use &lt;code&gt;super(someValue)&lt;/code&gt;. The call to super must be the first call in the constructor or you will get a compiler error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para llamar a una &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super(someValue)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , use &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;super (someValue)&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La llamada a super debe ser la primera llamada en el constructor o obtendr&amp;aacute; un error del compilador.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3c5584dacc3d23e8ed9c3c12f048a86e11d74317" translate="yes" xml:space="preserve">
          <source>To chain to a particular superclass constructor instead of one in the same class, use &lt;code&gt;super&lt;/code&gt; instead of &lt;code&gt;this&lt;/code&gt;. Note that &lt;strong&gt;you can only chain to one constructor&lt;/strong&gt;, and &lt;strong&gt;it has to be the first statement in your constructor body&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para encadenar a un constructor de superclase particular en lugar de uno en la misma clase, use &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; en&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; lugar de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;solo puede encadenar a un constructor&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tiene que ser la primera instrucci&amp;oacute;n en su cuerpo de constructor&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2957781ef81901c7cae99584981e6e6e10de870d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;this(args)&lt;/code&gt;. The preferred pattern is to work from the smallest constructor to the largest.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Usando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this(args)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El patr&amp;oacute;n preferido es trabajar desde el constructor m&amp;aacute;s peque&amp;ntilde;o hasta el m&amp;aacute;s grande.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c71ec62e7c534c99f241f1b9c64ad5a0eff8f03a" translate="yes" xml:space="preserve">
          <source>When I need to call another constructor from inside the code (not on the first line), I usually use a helper method like this:</source>
          <target state="translated">Cuando necesito llamar a otro constructor desde dentro del código (no en la primera línea),suelo utilizar un método de ayuda como este:</target>
        </trans-unit>
        <trans-unit id="f601b8dbd208f77468ecf20c9b2cae92e73a7157" translate="yes" xml:space="preserve">
          <source>With the latest java and the addition of lambdas, it is easy to create a constructor which can accept any initialization code you desire.</source>
          <target state="translated">Con el último java y la adición de lambdas,es fácil crear un constructor que puede aceptar cualquier código de inicialización que desee.</target>
        </trans-unit>
        <trans-unit id="2b4a9b886e4715c909583716543881bb5d30e20f" translate="yes" xml:space="preserve">
          <source>Within a constructor, you can use the &lt;code&gt;this&lt;/code&gt; keyword to invoke another constructor in the same class. Doing so is called an &lt;strong&gt;explicit constructor invocation&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dentro de un constructor, puede usar la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;palabra clave &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para invocar a otro constructor en la misma clase. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hacerlo se llama una &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;invocaci&amp;oacute;n expl&amp;iacute;cita del constructor&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="324f4547602c6809ee881e493de131de31938621" translate="yes" xml:space="preserve">
          <source>Yes it is possible to call one constructor from another with use of &lt;code&gt;this()&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;S&amp;iacute;, es posible llamar a un constructor desde otro con el uso de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6a873f2a98e0da557f4b0a4af6d3da47a7216320" translate="yes" xml:space="preserve">
          <source>Yes it is possible to call one constructor from another. But there is a rule to it. If a call is made from one constructor to another, then</source>
          <target state="translated">Sí,es posible llamar a un constructor de otro.Pero hay una regla para ello.Si se hace una llamada de un constructor a otro,entonces</target>
        </trans-unit>
        <trans-unit id="59827cccf7d8a67e3e558ad7439376a75bfa2aac" translate="yes" xml:space="preserve">
          <source>Yes, any number of constructors can be present in a class and they can be called by another constructor using &lt;code&gt;this()&lt;/code&gt; [Please do not confuse &lt;code&gt;this()&lt;/code&gt; constructor call with &lt;code&gt;this&lt;/code&gt; keyword]. &lt;code&gt;this()&lt;/code&gt; or &lt;code&gt;this(args)&lt;/code&gt; should be the first line in the constructor.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;S&amp;iacute;, cualquier n&amp;uacute;mero de constructores puede estar presente en una clase y otro constructor puede &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;llamarlos &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;usando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; [No confunda &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; llamada de constructor &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;()&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; palabra clave]. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this(args)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; deber&amp;iacute;a ser la primera l&amp;iacute;nea en el constructor.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="40a92cc621d6b692f65bd0a075695cbff22ef108" translate="yes" xml:space="preserve">
          <source>Yes, it is possible:</source>
          <target state="translated">Sí,es posible:</target>
        </trans-unit>
        <trans-unit id="c086bb32bd17fbc422d078734db73fdb1f74abdf" translate="yes" xml:space="preserve">
          <source>Yes, you can call constructors from another constructors. For example:</source>
          <target state="translated">Sí,puedes llamar a constructores de otros constructores.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="3aeb02ac8ed5161f02b49a5b15c3a87ce2af1162" translate="yes" xml:space="preserve">
          <source>You can a constructor from another constructor of same class by using &quot;this&quot; keyword.
Example -</source>
          <target state="translated">Puede un constructor de otro constructor de la misma clase usando &quot;esta&quot; palabra clave.Ejemplo -</target>
        </trans-unit>
        <trans-unit id="b9a53367857637b24d5cc48dfc2224a3953603e9" translate="yes" xml:space="preserve">
          <source>You can also use a more recently advocated approach of valueOf or just &quot;of&quot;:</source>
          <target state="translated">También se puede utilizar un enfoque más recientemente defendido de valorOf o simplemente &quot;de&quot;:</target>
        </trans-unit>
        <trans-unit id="347f9a5e8e0b14bdf9ec4ce6426cd612e7118d05" translate="yes" xml:space="preserve">
          <source>You can call another constructor via the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/thiskey.html&quot;&gt;&lt;code&gt;this(...)&lt;/code&gt;&lt;/a&gt; keyword (when you need to call a constructor from the same class) or the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/IandI/super.html&quot;&gt;&lt;code&gt;super(...)&lt;/code&gt;&lt;/a&gt; keyword
(when you need to call a constructor from a superclass).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede llamar a otro constructor mediante la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;palabra clave &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/thiskey.html&quot;&gt; &lt;code&gt;this(...)&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (cuando necesita llamar a un constructor de la misma clase) o la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;palabra clave &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/IandI/super.html&quot;&gt; &lt;code&gt;super(...)&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (cuando necesita llamar a un constructor desde una superclase).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="daf8c27c3f64e7d7ad76f0c05d70dd4e96372582" translate="yes" xml:space="preserve">
          <source>You may need more. Builder pattern would be a great solution in this case. Here is an article, it might be helpful
&lt;a href=&quot;https://medium.com/@modestofiguereo/design-patterns-2-the-builder-pattern-and-the-telescoping-constructor-anti-pattern-60a33de7522e&quot;&gt;https://medium.com/@modestofiguereo/design-patterns-2-the-builder-pattern-and-the-telescoping-constructor-anti-pattern-60a33de7522e&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es posible que necesites m&amp;aacute;s. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El patr&amp;oacute;n de construcci&amp;oacute;n ser&amp;iacute;a una gran soluci&amp;oacute;n en este caso. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; hay un art&amp;iacute;culo, podr&amp;iacute;a ser &amp;uacute;til &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://medium.com/@modestofiguereo/design-patterns-2-the-builder-pattern-and-the-telescoping-constructor-anti-pattern-60a33de7522e&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://medium.com/@modestofiguereo/design-patterns-2-the-builder-pattern-and-the-telescoping-constructor-anti-pattern-60a33de7522e&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a1ab5d224884da8087e91dd77dd2d60fbc63cb1a" translate="yes" xml:space="preserve">
          <source>[&lt;em&gt;Note: I just want to add one aspect, which I did not see in the other answers: how to overcome limitations of the requirement that this() has to be on the first line).&lt;/em&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Nota: solo quiero agregar un aspecto, que no vi en las otras respuestas: c&amp;oacute;mo superar las limitaciones del requisito de que esto () tiene que estar en la primera l&amp;iacute;nea). &lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11f02ed4a995c4fbe4f90ff04c856b69d07434fd" translate="yes" xml:space="preserve">
          <source>any &lt;em&gt;inner classes&lt;/em&gt; declared in this class or any superclass, or</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cualquier &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;clase interna&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; declarada en esta clase o en cualquier superclase, o&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4ca3e00f6e8414f6b7690d1a46f1a23f4a994d97" translate="yes" xml:space="preserve">
          <source>any &lt;em&gt;instance methods&lt;/em&gt; or</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cualquier &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo de instancia&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b1a887ef0441b5a79b09d33a25a3f7c321a51d59" translate="yes" xml:space="preserve">
          <source>any &lt;em&gt;instance variables&lt;/em&gt; or</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cualquier &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;variable de instancia&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6d9773ad419a3d8fa9a0c6f17211db402c336af7" translate="yes" xml:space="preserve">
          <source>now here is some small extra credit:</source>
          <target state="translated">ahora aquí hay un pequeño crédito extra:</target>
        </trans-unit>
        <trans-unit id="47ffbb8852e5c27ad65b26b1f5795ea1ed0ea736" translate="yes" xml:space="preserve">
          <source>this() call to this must be first statement in constructor</source>
          <target state="translated">esta llamada a esto debe ser la primera declaración en el constructor</target>
        </trans-unit>
        <trans-unit id="e4cf133ec21253dd9c3ca82fdb4db5898c4b377f" translate="yes" xml:space="preserve">
          <source>you can also read in details from 
&lt;a href=&quot;https://beginnersbook.com/2013/12/java-constructor-chaining-with-example/&quot;&gt;Constructor Chaining in Java&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n puede leer los detalles de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://beginnersbook.com/2013/12/java-constructor-chaining-with-example/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Constructor Chaining en Java&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
