<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/285177">
    <body>
      <group id="285177">
        <trans-unit id="da2c2a406688ad784f008f6ba0c37d3f4968fde4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;super&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;super&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="1570e0a400659d87380ad774797b12bbbbef9194" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; or</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 또는&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0578b5272e7590f83f86c29696c0dc2dcfc69161" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;that new constructor call must be the first statement in the current constructor&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;새로운 생성자 호출은 현재 생성자의 첫 번째 명령문이어야합니다&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="113446d8c05dcdbe513e313130a7359b2fe21f6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default constructor&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;기본 생성자&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1e504ff0eea855cb66cb68170a7d0daf098d203e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;However, keep in mind that&lt;/strong&gt; within such an explicit constructor invocation statement &lt;strong&gt;you may not refer to&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이러한 명시적인 생성자 호출 명령문 내 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에서는 참조 할 수 없습니다.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4c6ecf08d4ef58fcc1a22b456f5b5727456a4094" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I will tell you an easy way&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 당신에게 쉬운 방법을 말할 것입니다&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8fdabbee9df7d4adcd4c3a1d8b69be279041658c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parameterized constructor&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;매개 변수화 된 생성자&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="36836982d213919a45ff0d8bae98d2725b0a6e98" translate="yes" xml:space="preserve">
          <source>Also you can call parent constructor by using &lt;code&gt;super()&lt;/code&gt; call</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 호출 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;을 사용하여 부모 생성자를 호출 할 수 있습니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b351f4ed63056e18b5ad475f23042f6f33ddd67" translate="yes" xml:space="preserve">
          <source>Also, in the case of inheritance, when sub-class's object is created, the super class constructor is first called.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 상속의 경우 하위 클래스의 객체가 생성 될 때 수퍼 클래스 생성자가 먼저 호출됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="28c09431c459319070264df5eb50ac6b26e78fa1" translate="yes" xml:space="preserve">
          <source>As everybody already have said, you use &lt;code&gt;this(&amp;hellip;)&lt;/code&gt;, which is called an &lt;em&gt;explicit constructor invocation&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모두가 이미 말했듯이, 당신 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;은 이것을 &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;명시 적 생성자 호출&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이라고하는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this(&amp;hellip;)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e25a328797305f111c2114167163229894c68252" translate="yes" xml:space="preserve">
          <source>As stated in JLS (&amp;sect;8.8.7.1).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JLS (&amp;sect;8.8.7.1)에 명시된 바와 같이.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cf3a64e8cdb03533b2cb5b6c8ac554264862c6d8" translate="yes" xml:space="preserve">
          <source>Bellow is a link that I explain other topic about constructor and getters() and setters() and I used a class with two constructors. I hope the explanations and examples help you.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Bellow는 constructor 및 getters () 및 setters ()에 대한 다른 주제를 설명하는 링크이며 두 개의 생성자와 함께 클래스를 사용했습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;설명과 예제가 도움이 되길 바랍니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c526bc07425ffc1be847fceb88efeb4d2e528240" translate="yes" xml:space="preserve">
          <source>But most often I try to do it the other way around by calling the more complex constructors from the simpler ones on the first line, to the extent possible. For the above example</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 대부분의 경우 첫 번째 줄의 간단한 생성자에서보다 복잡한 생성자를 호출하여 가능한 한 다른 방법으로 시도합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위 예제의 경우&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b352d2c0748e18100553eb126c40fd5afc858ce0" translate="yes" xml:space="preserve">
          <source>Call it with...</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;전화하세요&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="08c629ca58c6af8a5e124bb86ea1ce1b8ca4e4ea" translate="yes" xml:space="preserve">
          <source>Calling constructor from another constructor</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 생성자에서 생성자 호출&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="eeff9a63bf20eab5f1e144bf188811896077bcb0" translate="yes" xml:space="preserve">
          <source>Here's another Rectangle class, with a different implementation from the one in the Objects section.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Objects 섹션의 것과 다른 구현을 가진 또 다른 Rectangle 클래스가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a6a0ce9031e0776d5fc6120b3023d51bccf114f1" translate="yes" xml:space="preserve">
          <source>Hope this helps.</source>
          <target state="translated">도움이 되었기를 바랍니다.</target>
        </trans-unit>
        <trans-unit id="1a4878850a19e4ba95a9ea5c6ab33e240129f8c3" translate="yes" xml:space="preserve">
          <source>How do I call one constructor from another in Java</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Java에서 한 생성자를 다른 호출자로 호출하는 방법&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9cd61cf9ea6fcc205f720e1465e10fcb258d0780" translate="yes" xml:space="preserve">
          <source>However, such a call must be the &lt;strong&gt;first&lt;/strong&gt; statement of your constructor. To &lt;strong&gt;overcome&lt;/strong&gt; this limitation, use &lt;a href=&quot;https://stackoverflow.com/a/51571736/9772691&quot;&gt;this answer&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 이러한 호출은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;생성자 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;첫 번째&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 명령문 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이어야합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 제한 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;을 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;극복&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 하려면 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/51571736/9772691&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 답변을&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하십시오&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29b5be6516cfa45ce600e3f206a012a0e823d433" translate="yes" xml:space="preserve">
          <source>I know there are so many examples of this question but what I found I am putting here to share my Idea. there are two ways to chain constructor. In Same class you can use this keyword. in Inheritance, you need to use super keyword.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는이 질문에 대한 많은 예가 있다는 것을 알고 있지만 내 아이디어를 공유하기 위해 여기에 넣은 것을 발견했습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;생성자를 연결하는 데는 두 가지 방법이 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;같은 클래스에서이 키워드를 사용할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;상속에서는 슈퍼 키워드를 사용해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7bef60a9c8ba9945f6fea6181eaa5bc82defcdb" translate="yes" xml:space="preserve">
          <source>I prefer this way:</source>
          <target state="translated">나는이 방법을 선호합니다 :</target>
        </trans-unit>
        <trans-unit id="8a0a1a6c31c2f468bfa17b1badfb996ec443bcaa" translate="yes" xml:space="preserve">
          <source>I will explain in one Example</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하나의 예에서 설명하겠습니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a772f022da42c0a58b99959ba423388fced1389f" translate="yes" xml:space="preserve">
          <source>In Java another constructor of the same class can be called from a constructor via &lt;code&gt;this()&lt;/code&gt;. Note however that &lt;code&gt;this&lt;/code&gt; has to be on the first line.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Java에서는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 통해 생성자에서 동일한 클래스의 다른 생성자를 호출 할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;것을 그러나 참고 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 첫 번째 줄에 있어야한다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="857ecb12e0d4c75308567f3f5bdaa628eb9e91d9" translate="yes" xml:space="preserve">
          <source>In the above example I showed 3 types of calling</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위의 예에서 나는 3 가지 유형의 호출을 보여 주었다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed58c2b20d1c779f5f24b86488e90144d82df0e5" translate="yes" xml:space="preserve">
          <source>Is it possible to call a constructor from another (within the same class, not from a subclass)? If yes how? And what could be the best way to call another constructor (if there are several ways to do it)?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 클래스 (하위 클래스가 아닌 동일한 클래스 내)에서 생성자를 호출 할 수 있습니까? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그렇다면 어떻게합니까? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 다른 생성자를 호출하는 가장 좋은 방법은 무엇입니까 (몇 가지 방법이있는 경우)?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9da498802f2772660a98c0b51c8680e59083ae79" translate="yes" xml:space="preserve">
          <source>It is called Telescoping Constructor anti-pattern or constructor chaining. Yes, you can definitely do. I see many examples above and I want to add by saying that if you know that you need only two or three constructor, it might be ok. But if you need more, please try to use different design pattern like Builder pattern. As for example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이를 Telescoping Constructor 안티 패턴 또는 생성자 체인이라고합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그렇습니다, 당신은 확실히 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위의 많은 예제를 보았는데 두세 개의 생성자가 필요하다는 것을 알면 괜찮을 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 더 필요한 경우 빌더 패턴과 같은 다른 디자인 패턴을 사용하십시오. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="66d004e02aa0bd3c90660cddc0c81a6c1737ff64" translate="yes" xml:space="preserve">
          <source>Just for completeness: There is also the &lt;a href=&quot;https://stackoverflow.com/questions/3987428/what-is-an-initialization-block&quot;&gt;Instance initialization block&lt;/a&gt; that gets executed always and before any other constructor is called. It consists simply of a block of statements &quot;{ ... }&quot; somewhere in the body of your class definition.  You can even have more than one.  You can't call them, but they're like &quot;shared constructor&quot; code if you want to reuse some code across constructors, similar to calling methods.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;완전성을 위해 : &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 생성자가 호출되기 전에 항상 실행되는 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3987428/what-is-an-initialization-block&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;인스턴스 초기화 블록&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;클래스 정의 본문 어딘가에 &quot;{...}&quot;문장 블록으로 구성되어 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;둘 이상을 가질 수도 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;호출 할 수는 없지만 메소드를 호출하는 것과 비슷하게 생성자에서 일부 코드를 재사용하려면 &quot;공유 생성자&quot;코드와 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e1d7d343e3f1883c55ee4833e010cf3de77bb6f6" translate="yes" xml:space="preserve">
          <source>Note:
&lt;strong&gt;this must be the first statement in the constructor.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;참고 : &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 생성자의 첫 번째 명령문이어야합니다.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c3c87e545947fc34b0d17bf8dd7b820d790be25" translate="yes" xml:space="preserve">
          <source>Originally from an anser by Mirko Klemm, slightly modified to address the question:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;원래 Mirko Klemm의 anser가 질문을 해결하기 위해 약간 수정했습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2c64aa5e2c637c8c6604b5cd115dc7194eec49f0" translate="yes" xml:space="preserve">
          <source>Output -
string as arg constructor..
Default constructor..
int as arg constructor..</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;출력-arg 생성자로서의 문자열. 기본 생성자. at 생성자로서의 int.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b60d3818158ba9dbeee3b0a5bda99862e20e9e64" translate="yes" xml:space="preserve">
          <source>Please note that for constructor, only overloading concept is applicable and not inheritance or overriding.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;생성자의 경우 오버로드 개념 만 적용되며 상속 또는 재정의는 불가능합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c0837e769968431d150bbf5446ef7cf12b4e4b95" translate="yes" xml:space="preserve">
          <source>Pretty simple</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;매우 간단&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d1a28d81c68af25fcf29c170dcb874d6691a17a9" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://stackoverflow.com/questions/284896&quot;&gt;this related question&lt;/a&gt;, which is about C# but where the same principles apply.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C #에 관한 것이지만 동일한 원칙이 적용되는 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/284896&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 관련 질문을&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 참조하십시오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b55c0a50cc14146837a8fe190b060cd511d1bdc9" translate="yes" xml:space="preserve">
          <source>Setter methods or constructors</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;세터 메소드 또는 생성자&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8deb1cfdc16d10db651aff1f90e9993550a27ead" translate="yes" xml:space="preserve">
          <source>So in your case</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그래서 당신의 경우&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="93774368e56263cf0765c4499f0ac1c3e9f304a5" translate="yes" xml:space="preserve">
          <source>So, something like below will not work.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 아래와 같은 것이 작동하지 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cea6e61837f7133ec906933675fe50fbb564825c" translate="yes" xml:space="preserve">
          <source>That &lt;code&gt;this&lt;/code&gt; has to appear on the first line looks like a big limitation, but you can construct the arguments of other constructors via static methods. For example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그건 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 큰 제한 같은 첫 번째 줄의 외모에 표시 할 수있다, 그러나 당신은 정적 인 방법을 통해 다른 생성자의 인수를 구성 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들면 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3b473341650fae32aaa7670f04766d11ce38db7c" translate="yes" xml:space="preserve">
          <source>The keyword &lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt; can be used to call a constructor from a constructor, when writing several constructor for a class, there are times when you'd like to call one constructor from another to avoid duplicate code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;키워드 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;this&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 생성자에서 생성자를 호출하는 데 사용할 수 있습니다. 클래스에 여러 생성자를 작성할 때 중복 코드를 피하기 위해 한 생성자를 다른 생성자에서 호출하려는 경우가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="46cb785349c7e141897f24d50c33594ec96e1a6f" translate="yes" xml:space="preserve">
          <source>There are &lt;strong&gt;two&lt;/strong&gt; types of constructors:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;생성자 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에는 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;두&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가지 유형 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d05e73fcf59db3100ee9ab16c27575c98172193" translate="yes" xml:space="preserve">
          <source>There are design patterns that cover the need for complex construction - if it can't be done succinctly, create a factory method or a factory class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;복잡한 구조의 필요성을 다루는 디자인 패턴이 있습니다. 간결하게 수행 할 수없는 경우 팩토리 메소드 또는 팩토리 클래스를 작성하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0d824cab49c8e2bffb159a9925aa5fe848c301c8" translate="yes" xml:space="preserve">
          <source>There is also a &quot;static&quot; version of this to initialize static members: &quot;static { ... }&quot;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;정적 멤버를 초기화하기위한 &quot;정적&quot;버전도 있습니다 : &quot;static {...}&quot;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b86ec29c29a7fe5f742c631234d9a9f82e359477" translate="yes" xml:space="preserve">
          <source>This class contains a set of constructors. Each constructor initializes some or all of the rectangle's member variables.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 클래스는 생성자 세트를 포함합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;각 생성자는 사각형의 멤버 변수 중 일부 또는 전부를 초기화합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e6eb5df5f73e0e830ef7ab5b3b0bb277bfe295b7" translate="yes" xml:space="preserve">
          <source>This is Name less Object. this automatically calls the default constructor.
3.This calls the Parameterized constructor.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 Name less Object입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 자동으로 기본 생성자를 호출합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;3. Parameterized 생성자를 호출합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6e8901eec108afd7fb2965a3eb12cb2ac6b16570" translate="yes" xml:space="preserve">
          <source>This is known as constructor overloading.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것을 생성자 오버로딩이라고합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e11ccaaaee014d236c3c0ddb05be21104e16827e" translate="yes" xml:space="preserve">
          <source>Thus, in this case also another constructor call is first declared before any other statements.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서이 경우 다른 생성자 앞에 다른 생성자 호출이 먼저 선언됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e94da6c3ce24db587867b70aecc294c08a1dfa21" translate="yes" xml:space="preserve">
          <source>To call a super class, use &lt;code&gt;super(someValue)&lt;/code&gt;. The call to super must be the first call in the constructor or you will get a compiler error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;수퍼 클래스를 호출하려면 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super(someValue)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;super에 대한 호출은 생성자의 첫 번째 호출이어야합니다. 그렇지 않으면 컴파일러 오류가 발생합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3c5584dacc3d23e8ed9c3c12f048a86e11d74317" translate="yes" xml:space="preserve">
          <source>To chain to a particular superclass constructor instead of one in the same class, use &lt;code&gt;super&lt;/code&gt; instead of &lt;code&gt;this&lt;/code&gt;. Note that &lt;strong&gt;you can only chain to one constructor&lt;/strong&gt;, and &lt;strong&gt;it has to be the first statement in your constructor body&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;같은 클래스에있는 클래스 대신 특정 수퍼 클래스 생성자에 연결하려면 &lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대신 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용 &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하십시오&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;참고 것을 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;당신은 하나의 생성자에 체인 수 있습니다&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , 그리고 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그것은 당신의 생성자 본문의 첫 번째 문이어야한다&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2957781ef81901c7cae99584981e6e6e10de870d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;this(args)&lt;/code&gt;. The preferred pattern is to work from the smallest constructor to the largest.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this(args)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;선호되는 패턴은 가장 작은 생성자에서 가장 큰 생성자로 작업하는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c71ec62e7c534c99f241f1b9c64ad5a0eff8f03a" translate="yes" xml:space="preserve">
          <source>When I need to call another constructor from inside the code (not on the first line), I usually use a helper method like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;첫 번째 줄이 아닌 코드 내부에서 다른 생성자를 호출해야 할 때 일반적으로 다음과 같은 도우미 메서드를 사용합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f601b8dbd208f77468ecf20c9b2cae92e73a7157" translate="yes" xml:space="preserve">
          <source>With the latest java and the addition of lambdas, it is easy to create a constructor which can accept any initialization code you desire.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;최신 Java와 람다를 추가하면 원하는 초기화 코드를 허용하는 생성자를 쉽게 만들 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2b4a9b886e4715c909583716543881bb5d30e20f" translate="yes" xml:space="preserve">
          <source>Within a constructor, you can use the &lt;code&gt;this&lt;/code&gt; keyword to invoke another constructor in the same class. Doing so is called an &lt;strong&gt;explicit constructor invocation&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;생성자 내에서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 키워드를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하여 동일한 클래스에서 다른 생성자를 호출 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그렇게하는 것을 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;명시 적 생성자 호출&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이라고합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="324f4547602c6809ee881e493de131de31938621" translate="yes" xml:space="preserve">
          <source>Yes it is possible to call one constructor from another with use of &lt;code&gt;this()&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예, &lt;/font&gt; &lt;code&gt;this()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 사용하여 다른 생성자를 호출 할 수 있습니다&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6a873f2a98e0da557f4b0a4af6d3da47a7216320" translate="yes" xml:space="preserve">
          <source>Yes it is possible to call one constructor from another. But there is a rule to it. If a call is made from one constructor to another, then</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예, 한 생성자를 다른 생성자에서 호출 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 거기에는 규칙이 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;한 생성자에서 다른 생성자로 호출하면&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="59827cccf7d8a67e3e558ad7439376a75bfa2aac" translate="yes" xml:space="preserve">
          <source>Yes, any number of constructors can be present in a class and they can be called by another constructor using &lt;code&gt;this()&lt;/code&gt; [Please do not confuse &lt;code&gt;this()&lt;/code&gt; constructor call with &lt;code&gt;this&lt;/code&gt; keyword]. &lt;code&gt;this()&lt;/code&gt; or &lt;code&gt;this(args)&lt;/code&gt; should be the first line in the constructor.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예, 클래스에는 여러 개의 생성자가있을 수 있으며 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용하여 다른 생성자가 호출 할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 생성자 호출을 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 키워드 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;와 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;혼동하지 마십시오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;)&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 또는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this(args)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 생성자의 첫 번째 행이어야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="40a92cc621d6b692f65bd0a075695cbff22ef108" translate="yes" xml:space="preserve">
          <source>Yes, it is possible:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예, 가능합니다 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c086bb32bd17fbc422d078734db73fdb1f74abdf" translate="yes" xml:space="preserve">
          <source>Yes, you can call constructors from another constructors. For example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예, 다른 생성자에서 생성자를 호출 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들면 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3aeb02ac8ed5161f02b49a5b15c3a87ce2af1162" translate="yes" xml:space="preserve">
          <source>You can a constructor from another constructor of same class by using &quot;this&quot; keyword.
Example -</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot;this&quot;키워드를 사용하여 동일한 클래스의 다른 생성자에서 생성자를 만들 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예 -&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b9a53367857637b24d5cc48dfc2224a3953603e9" translate="yes" xml:space="preserve">
          <source>You can also use a more recently advocated approach of valueOf or just &quot;of&quot;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 최근에 주장 된 valueOf 또는 &quot;of&quot;방식을 사용할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="347f9a5e8e0b14bdf9ec4ce6426cd612e7118d05" translate="yes" xml:space="preserve">
          <source>You can call another constructor via the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/thiskey.html&quot;&gt;&lt;code&gt;this(...)&lt;/code&gt;&lt;/a&gt; keyword (when you need to call a constructor from the same class) or the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/IandI/super.html&quot;&gt;&lt;code&gt;super(...)&lt;/code&gt;&lt;/a&gt; keyword
(when you need to call a constructor from a superclass).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/thiskey.html&quot;&gt; &lt;code&gt;this(...)&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 키워드 (같은 클래스에서 생성자를 호출해야하는 경우) 또는 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/IandI/super.html&quot;&gt; &lt;code&gt;super(...)&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 키워드 ( &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;수퍼&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 클래스에서 생성자를 호출해야하는 경우 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;)&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 통해 다른 생성자를 호출 할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="daf8c27c3f64e7d7ad76f0c05d70dd4e96372582" translate="yes" xml:space="preserve">
          <source>You may need more. Builder pattern would be a great solution in this case. Here is an article, it might be helpful
&lt;a href=&quot;https://medium.com/@modestofiguereo/design-patterns-2-the-builder-pattern-and-the-telescoping-constructor-anti-pattern-60a33de7522e&quot;&gt;https://medium.com/@modestofiguereo/design-patterns-2-the-builder-pattern-and-the-telescoping-constructor-anti-pattern-60a33de7522e&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;더 필요할 수도 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 경우 빌더 패턴은 훌륭한 솔루션입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기 기사가 도움이 될 것입니다 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://medium.com/@modestofiguereo/design-patterns-2-the-builder-pattern-and-the-telescoping-constructor-anti-pattern-60a33de7522e&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://medium.com/@modestofiguereo/design-patterns-2-the-builder-pattern-and-the-telescoping-constructor-anti-pattern-60a33de7522e&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a1ab5d224884da8087e91dd77dd2d60fbc63cb1a" translate="yes" xml:space="preserve">
          <source>[&lt;em&gt;Note: I just want to add one aspect, which I did not see in the other answers: how to overcome limitations of the requirement that this() has to be on the first line).&lt;/em&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;참고 : 다른 답변에서는 보지 못한 한 가지 측면을 추가하고 싶습니다. &lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11f02ed4a995c4fbe4f90ff04c856b69d07434fd" translate="yes" xml:space="preserve">
          <source>any &lt;em&gt;inner classes&lt;/em&gt; declared in this class or any superclass, or</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;어떤 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;내부 클래스는&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이 클래스 또는 슈퍼 클래스에 선언, 또는&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4ca3e00f6e8414f6b7690d1a46f1a23f4a994d97" translate="yes" xml:space="preserve">
          <source>any &lt;em&gt;instance methods&lt;/em&gt; or</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;인스턴스 메소드&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 또는&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b1a887ef0441b5a79b09d33a25a3f7c321a51d59" translate="yes" xml:space="preserve">
          <source>any &lt;em&gt;instance variables&lt;/em&gt; or</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;인스턴스 변수&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 또는&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6d9773ad419a3d8fa9a0c6f17211db402c336af7" translate="yes" xml:space="preserve">
          <source>now here is some small extra credit:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 여기에 약간의 추가 크레딧이 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="47ffbb8852e5c27ad65b26b1f5795ea1ed0ea736" translate="yes" xml:space="preserve">
          <source>this() call to this must be first statement in constructor</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;this에 대한 this () 호출은 생성자의 첫 번째 명령문이어야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e4cf133ec21253dd9c3ca82fdb4db5898c4b377f" translate="yes" xml:space="preserve">
          <source>you can also read in details from 
&lt;a href=&quot;https://beginnersbook.com/2013/12/java-constructor-chaining-with-example/&quot;&gt;Constructor Chaining in Java&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;a href=&quot;https://beginnersbook.com/2013/12/java-constructor-chaining-with-example/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Java의 생성자 체인에서&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 자세한 내용을 읽을 수도 있습니다. &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
