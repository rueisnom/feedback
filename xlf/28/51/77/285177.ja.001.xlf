<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/285177">
    <body>
      <group id="285177">
        <trans-unit id="da2c2a406688ad784f008f6ba0c37d3f4968fde4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;super&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;super&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="1570e0a400659d87380ad774797b12bbbbef9194" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; or</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;か&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0578b5272e7590f83f86c29696c0dc2dcfc69161" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;that new constructor call must be the first statement in the current constructor&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新しいコンストラクター呼び出しは、現在のコンストラクターの最初のステートメントでなければなりません&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="113446d8c05dcdbe513e313130a7359b2fe21f6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default constructor&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デフォルトのコンストラクタ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1e504ff0eea855cb66cb68170a7d0daf098d203e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;However, keep in mind that&lt;/strong&gt; within such an explicit constructor invocation statement &lt;strong&gt;you may not refer to&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このような明示的なコンストラクター呼び出しステートメント内で&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は参照できないことに&lt;/font&gt;&lt;/strong&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注意して&lt;/font&gt;&lt;/strong&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ください。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4c6ecf08d4ef58fcc1a22b456f5b5727456a4094" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I will tell you an easy way&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;簡単な方法を教えます&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8fdabbee9df7d4adcd4c3a1d8b69be279041658c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parameterized constructor&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パラメータ化されたコンストラクタ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="36836982d213919a45ff0d8bae98d2725b0a6e98" translate="yes" xml:space="preserve">
          <source>Also you can call parent constructor by using &lt;code&gt;super()&lt;/code&gt; call</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して親コンストラクタを呼び出すこともでき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b351f4ed63056e18b5ad475f23042f6f33ddd67" translate="yes" xml:space="preserve">
          <source>Also, in the case of inheritance, when sub-class's object is created, the super class constructor is first called.</source>
          <target state="translated">また、継承の場合、サブクラスのオブジェクトが作成されると、まずスーパークラスのコンストラクタが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="28c09431c459319070264df5eb50ac6b26e78fa1" translate="yes" xml:space="preserve">
          <source>As everybody already have said, you use &lt;code&gt;this(&amp;hellip;)&lt;/code&gt;, which is called an &lt;em&gt;explicit constructor invocation&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;誰もがすでに言ったように&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、これは&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;明示的なコンストラクター呼び出し&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼ばれる&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this(&amp;hellip;)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用し&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e25a328797305f111c2114167163229894c68252" translate="yes" xml:space="preserve">
          <source>As stated in JLS (&amp;sect;8.8.7.1).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JLSで述べたように（&amp;sect;8.8.7.1）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cf3a64e8cdb03533b2cb5b6c8ac554264862c6d8" translate="yes" xml:space="preserve">
          <source>Bellow is a link that I explain other topic about constructor and getters() and setters() and I used a class with two constructors. I hope the explanations and examples help you.</source>
          <target state="translated">下記は、コンストラクタとゲッターとセッターについて説明したリンクです。説明と例がお役に立てれば幸いです。</target>
        </trans-unit>
        <trans-unit id="c526bc07425ffc1be847fceb88efeb4d2e528240" translate="yes" xml:space="preserve">
          <source>But most often I try to do it the other way around by calling the more complex constructors from the simpler ones on the first line, to the extent possible. For the above example</source>
          <target state="translated">しかし、多くの場合、可能な限り最初の行で単純なものからより複雑なコンストラクタを呼び出すことで、逆の方法を試しています。上記の例では</target>
        </trans-unit>
        <trans-unit id="b352d2c0748e18100553eb126c40fd5afc858ce0" translate="yes" xml:space="preserve">
          <source>Call it with...</source>
          <target state="translated">電話して...</target>
        </trans-unit>
        <trans-unit id="08c629ca58c6af8a5e124bb86ea1ce1b8ca4e4ea" translate="yes" xml:space="preserve">
          <source>Calling constructor from another constructor</source>
          <target state="translated">別のコンストラクタからコンストラクタを呼び出す</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="eeff9a63bf20eab5f1e144bf188811896077bcb0" translate="yes" xml:space="preserve">
          <source>Here's another Rectangle class, with a different implementation from the one in the Objects section.</source>
          <target state="translated">ここでは、オブジェクトのセクションにあるものとは異なる実装を持つ別のRectangleクラスを紹介します。</target>
        </trans-unit>
        <trans-unit id="a6a0ce9031e0776d5fc6120b3023d51bccf114f1" translate="yes" xml:space="preserve">
          <source>Hope this helps.</source>
          <target state="translated">これが助けになることを願っています。</target>
        </trans-unit>
        <trans-unit id="1a4878850a19e4ba95a9ea5c6ab33e240129f8c3" translate="yes" xml:space="preserve">
          <source>How do I call one constructor from another in Java</source>
          <target state="translated">Javaで1つのコンストラクタを別のコンストラクタから呼び出すには?</target>
        </trans-unit>
        <trans-unit id="9cd61cf9ea6fcc205f720e1465e10fcb258d0780" translate="yes" xml:space="preserve">
          <source>However, such a call must be the &lt;strong&gt;first&lt;/strong&gt; statement of your constructor. To &lt;strong&gt;overcome&lt;/strong&gt; this limitation, use &lt;a href=&quot;https://stackoverflow.com/a/51571736/9772691&quot;&gt;this answer&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、そのような呼び出し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、コンストラクターの&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステートメントで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なければなりません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この制限&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;克服するには&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/51571736/9772691&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この回答を&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;てください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29b5be6516cfa45ce600e3f206a012a0e823d433" translate="yes" xml:space="preserve">
          <source>I know there are so many examples of this question but what I found I am putting here to share my Idea. there are two ways to chain constructor. In Same class you can use this keyword. in Inheritance, you need to use super keyword.</source>
          <target state="translated">この質問の例はたくさんあると思いますが、私のアイデアを共有するためにここに書いています。同じクラスではこのキーワードを使うことができますが、継承ではスーパーキーワードを使う必要があります。</target>
        </trans-unit>
        <trans-unit id="a7bef60a9c8ba9945f6fea6181eaa5bc82defcdb" translate="yes" xml:space="preserve">
          <source>I prefer this way:</source>
          <target state="translated">私はこちらの方が好きです。</target>
        </trans-unit>
        <trans-unit id="8a0a1a6c31c2f468bfa17b1badfb996ec443bcaa" translate="yes" xml:space="preserve">
          <source>I will explain in one Example</source>
          <target state="translated">一つの例で説明します。</target>
        </trans-unit>
        <trans-unit id="a772f022da42c0a58b99959ba423388fced1389f" translate="yes" xml:space="preserve">
          <source>In Java another constructor of the same class can be called from a constructor via &lt;code&gt;this()&lt;/code&gt;. Note however that &lt;code&gt;this&lt;/code&gt; has to be on the first line.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Javaでは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this()&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;介してコンストラクターから同じクラスの別のコンストラクターを呼び出すことができます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は最初の行にある必要があることに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注意してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="857ecb12e0d4c75308567f3f5bdaa628eb9e91d9" translate="yes" xml:space="preserve">
          <source>In the above example I showed 3 types of calling</source>
          <target state="translated">上記の例では、3つのタイプの呼び出しを示しました。</target>
        </trans-unit>
        <trans-unit id="ed58c2b20d1c779f5f24b86488e90144d82df0e5" translate="yes" xml:space="preserve">
          <source>Is it possible to call a constructor from another (within the same class, not from a subclass)? If yes how? And what could be the best way to call another constructor (if there are several ways to do it)?</source>
          <target state="translated">別のコンストラクタから(サブクラスからではなく、同じクラス内で)呼び出すことは可能ですか?もし可能ならば、どのようにして?また、別のコンストラクタを呼び出す最良の方法は何でしょうか (複数の方法がある場合)?</target>
        </trans-unit>
        <trans-unit id="9da498802f2772660a98c0b51c8680e59083ae79" translate="yes" xml:space="preserve">
          <source>It is called Telescoping Constructor anti-pattern or constructor chaining. Yes, you can definitely do. I see many examples above and I want to add by saying that if you know that you need only two or three constructor, it might be ok. But if you need more, please try to use different design pattern like Builder pattern. As for example:</source>
          <target state="translated">Telescoping Constructor anti-patternやconstructor chainingと呼ばれています。はい、絶対にできます。上記のような例をたくさん見てきましたが、コンストラクタが2つか3つで済むとわかっているのであれば、それでいいのではないかと思います。しかし、それ以上の数が必要な場合は、Builderパターンのような別のデザインパターンを使ってみてください。例えば</target>
        </trans-unit>
        <trans-unit id="66d004e02aa0bd3c90660cddc0c81a6c1737ff64" translate="yes" xml:space="preserve">
          <source>Just for completeness: There is also the &lt;a href=&quot;https://stackoverflow.com/questions/3987428/what-is-an-initialization-block&quot;&gt;Instance initialization block&lt;/a&gt; that gets executed always and before any other constructor is called. It consists simply of a block of statements &quot;{ ... }&quot; somewhere in the body of your class definition.  You can even have more than one.  You can't call them, but they're like &quot;shared constructor&quot; code if you want to reuse some code across constructors, similar to calling methods.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完全を期すために：&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他のコンストラクターが呼び出される前に常に実行される&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3987428/what-is-an-initialization-block&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インスタンス初期化ブロック&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もあり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、クラス定義の本体のどこかにあるステートメントのブロック「{...}」で構成されています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは1つ以上を持つことができます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらを呼び出すことはできませんが、メソッドの呼び出しと同様に、コンストラクター間でいくつかのコードを再利用したい場合、それらは「共有コンストラクター」コードのようなものです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e1d7d343e3f1883c55ee4833e010cf3de77bb6f6" translate="yes" xml:space="preserve">
          <source>Note:
&lt;strong&gt;this must be the first statement in the constructor.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注： &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これはコンストラクターの最初のステートメントでなければなりません。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c3c87e545947fc34b0d17bf8dd7b820d790be25" translate="yes" xml:space="preserve">
          <source>Originally from an anser by Mirko Klemm, slightly modified to address the question:</source>
          <target state="translated">元々はMirko Klemmのアンサーからのものですが、質問に対応するために少し修正しました。</target>
        </trans-unit>
        <trans-unit id="2c64aa5e2c637c8c6604b5cd115dc7194eec49f0" translate="yes" xml:space="preserve">
          <source>Output -
string as arg constructor..
Default constructor..
int as arg constructor..</source>
          <target state="translated">出力-arg コンストラクタとしての文字列...デフォルトのコンストラクタ...int as arg コンストラクタ...</target>
        </trans-unit>
        <trans-unit id="b60d3818158ba9dbeee3b0a5bda99862e20e9e64" translate="yes" xml:space="preserve">
          <source>Please note that for constructor, only overloading concept is applicable and not inheritance or overriding.</source>
          <target state="translated">コンストラクタの場合はオーバーロードの概念のみが適用され、継承やオーバーライドは適用されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c0837e769968431d150bbf5446ef7cf12b4e4b95" translate="yes" xml:space="preserve">
          <source>Pretty simple</source>
          <target state="translated">かなりシンプル</target>
        </trans-unit>
        <trans-unit id="d1a28d81c68af25fcf29c170dcb874d6691a17a9" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://stackoverflow.com/questions/284896&quot;&gt;this related question&lt;/a&gt;, which is about C# but where the same principles apply.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/284896&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この関連する質問&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;も参照してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。これはC＃に関するものですが、同じ原則が適用されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b55c0a50cc14146837a8fe190b060cd511d1bdc9" translate="yes" xml:space="preserve">
          <source>Setter methods or constructors</source>
          <target state="translated">セッターメソッドまたはコンストラクタ</target>
        </trans-unit>
        <trans-unit id="8deb1cfdc16d10db651aff1f90e9993550a27ead" translate="yes" xml:space="preserve">
          <source>So in your case</source>
          <target state="translated">あなたの場合は</target>
        </trans-unit>
        <trans-unit id="93774368e56263cf0765c4499f0ac1c3e9f304a5" translate="yes" xml:space="preserve">
          <source>So, something like below will not work.</source>
          <target state="translated">なので、以下のようなものはうまくいきません。</target>
        </trans-unit>
        <trans-unit id="cea6e61837f7133ec906933675fe50fbb564825c" translate="yes" xml:space="preserve">
          <source>That &lt;code&gt;this&lt;/code&gt; has to appear on the first line looks like a big limitation, but you can construct the arguments of other constructors via static methods. For example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;大きな制限のような最初の行のルックスに表示されるようにありますが、あなたは、静的メソッドを介して他のコンストラクタの引数を構築することができます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例えば：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3b473341650fae32aaa7670f04766d11ce38db7c" translate="yes" xml:space="preserve">
          <source>The keyword &lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt; can be used to call a constructor from a constructor, when writing several constructor for a class, there are times when you'd like to call one constructor from another to avoid duplicate code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キーワード&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;this&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して、コンストラクターからコンストラクターを呼び出すことができます。クラスの複数のコンストラクターを作成するとき、コードの重複を避けるために、あるコンストラクターを別のコンストラクターから呼び出したい場合があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="46cb785349c7e141897f24d50c33594ec96e1a6f" translate="yes" xml:space="preserve">
          <source>There are &lt;strong&gt;two&lt;/strong&gt; types of constructors:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンストラクターに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2つの&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タイプ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d05e73fcf59db3100ee9ab16c27575c98172193" translate="yes" xml:space="preserve">
          <source>There are design patterns that cover the need for complex construction - if it can't be done succinctly, create a factory method or a factory class.</source>
          <target state="translated">複雑な構造の必要性をカバーするデザインパターンがあります-簡潔にできない場合は、ファクトリーメソッドやファクトリークラスを作成します。</target>
        </trans-unit>
        <trans-unit id="0d824cab49c8e2bffb159a9925aa5fe848c301c8" translate="yes" xml:space="preserve">
          <source>There is also a &quot;static&quot; version of this to initialize static members: &quot;static { ... }&quot;</source>
          <target state="translated">また、静的なメンバーを初期化するための &quot;static &quot;バージョンもあります。&quot;static{...}&quot;</target>
        </trans-unit>
        <trans-unit id="b86ec29c29a7fe5f742c631234d9a9f82e359477" translate="yes" xml:space="preserve">
          <source>This class contains a set of constructors. Each constructor initializes some or all of the rectangle's member variables.</source>
          <target state="translated">このクラスには、コンストラクタのセットが含まれています。各コンストラクタは矩形のメンバ変数の一部またはすべてを初期化します。</target>
        </trans-unit>
        <trans-unit id="e6eb5df5f73e0e830ef7ab5b3b0bb277bfe295b7" translate="yes" xml:space="preserve">
          <source>This is Name less Object. this automatically calls the default constructor.
3.This calls the Parameterized constructor.</source>
          <target state="translated">これは Name less Object です。これは自動的にデフォルトのコンストラクタを呼び出します。3.これは Parameterized コンストラクタを呼び出します。</target>
        </trans-unit>
        <trans-unit id="6e8901eec108afd7fb2965a3eb12cb2ac6b16570" translate="yes" xml:space="preserve">
          <source>This is known as constructor overloading.</source>
          <target state="translated">これはコンストラクタのオーバーロードとして知られています。</target>
        </trans-unit>
        <trans-unit id="e11ccaaaee014d236c3c0ddb05be21104e16827e" translate="yes" xml:space="preserve">
          <source>Thus, in this case also another constructor call is first declared before any other statements.</source>
          <target state="translated">このように、この場合も、他のステートメントの前に別のコンストラクタの呼び出しが最初に宣言されます。</target>
        </trans-unit>
        <trans-unit id="e94da6c3ce24db587867b70aecc294c08a1dfa21" translate="yes" xml:space="preserve">
          <source>To call a super class, use &lt;code&gt;super(someValue)&lt;/code&gt;. The call to super must be the first call in the constructor or you will get a compiler error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スーパークラスを呼び出すには、super &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super(someValue)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;superの呼び出しは、コンストラクターの最初の呼び出しである必要があります。そうしないと、コンパイラエラーが発生します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3c5584dacc3d23e8ed9c3c12f048a86e11d74317" translate="yes" xml:space="preserve">
          <source>To chain to a particular superclass constructor instead of one in the same class, use &lt;code&gt;super&lt;/code&gt; instead of &lt;code&gt;this&lt;/code&gt;. Note that &lt;strong&gt;you can only chain to one constructor&lt;/strong&gt;, and &lt;strong&gt;it has to be the first statement in your constructor body&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じクラスのコンストラクターではなく特定のスーパークラスコンストラクターにチェーンする&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;には、&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なお、&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなただけの1つのコンストラクタに連鎖することができ&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、そして&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それはあなたのコンストラクタ本体の最初のステートメントでなければなり&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2957781ef81901c7cae99584981e6e6e10de870d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;this(args)&lt;/code&gt;. The preferred pattern is to work from the smallest constructor to the largest.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;this(args)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;推奨されるパターンは、最小のコンストラクターから最大のコンストラクターまで機能することです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c71ec62e7c534c99f241f1b9c64ad5a0eff8f03a" translate="yes" xml:space="preserve">
          <source>When I need to call another constructor from inside the code (not on the first line), I usually use a helper method like this:</source>
          <target state="translated">コードの中から (最初の行ではなく)別のコンストラクタを呼び出す必要がある場合、通常は次のようなヘルパーメソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="f601b8dbd208f77468ecf20c9b2cae92e73a7157" translate="yes" xml:space="preserve">
          <source>With the latest java and the addition of lambdas, it is easy to create a constructor which can accept any initialization code you desire.</source>
          <target state="translated">最新の java と lambdas の追加により、任意の初期化コードを受け入れることができるコンストラクタを簡単に作成することができます。</target>
        </trans-unit>
        <trans-unit id="2b4a9b886e4715c909583716543881bb5d30e20f" translate="yes" xml:space="preserve">
          <source>Within a constructor, you can use the &lt;code&gt;this&lt;/code&gt; keyword to invoke another constructor in the same class. Doing so is called an &lt;strong&gt;explicit constructor invocation&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンストラクター内で&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キーワードを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;して、同じクラスの別のコンストラクターを呼び出す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことができます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これを&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;明示的なコンストラクター呼び出し&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼び&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="324f4547602c6809ee881e493de131de31938621" translate="yes" xml:space="preserve">
          <source>Yes it is possible to call one constructor from another with use of &lt;code&gt;this()&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はい、&lt;/font&gt; &lt;code&gt;this()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して、あるコンストラクタを別のコンストラクタから呼び出すことができます。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6a873f2a98e0da557f4b0a4af6d3da47a7216320" translate="yes" xml:space="preserve">
          <source>Yes it is possible to call one constructor from another. But there is a rule to it. If a call is made from one constructor to another, then</source>
          <target state="translated">はい、あるコンストラクタを別のコンストラクタから呼び出すことは可能です。しかし、これにはルールがあります。あるコンストラクタから別のコンストラクタへの呼び出しは</target>
        </trans-unit>
        <trans-unit id="59827cccf7d8a67e3e558ad7439376a75bfa2aac" translate="yes" xml:space="preserve">
          <source>Yes, any number of constructors can be present in a class and they can be called by another constructor using &lt;code&gt;this()&lt;/code&gt; [Please do not confuse &lt;code&gt;this()&lt;/code&gt; constructor call with &lt;code&gt;this&lt;/code&gt; keyword]. &lt;code&gt;this()&lt;/code&gt; or &lt;code&gt;this(args)&lt;/code&gt; should be the first line in the constructor.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はい、任意の数のコンストラクターをクラスに含めることができ、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して別のコンストラクターから呼び出すことができます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンストラクターの呼び出しと&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キーワードを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;混同しないでください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;]。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this(args)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、コンストラクターの最初の行である必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="40a92cc621d6b692f65bd0a075695cbff22ef108" translate="yes" xml:space="preserve">
          <source>Yes, it is possible:</source>
          <target state="translated">はい、可能です。</target>
        </trans-unit>
        <trans-unit id="c086bb32bd17fbc422d078734db73fdb1f74abdf" translate="yes" xml:space="preserve">
          <source>Yes, you can call constructors from another constructors. For example:</source>
          <target state="translated">はい、別のコンストラクタからコンストラクタを呼び出すことができます。例えば</target>
        </trans-unit>
        <trans-unit id="3aeb02ac8ed5161f02b49a5b15c3a87ce2af1162" translate="yes" xml:space="preserve">
          <source>You can a constructor from another constructor of same class by using &quot;this&quot; keyword.
Example -</source>
          <target state="translated">this &quot;キーワードを使うことで、同じクラスの別のコンストラクタからコンストラクタを作成することができます。例</target>
        </trans-unit>
        <trans-unit id="b9a53367857637b24d5cc48dfc2224a3953603e9" translate="yes" xml:space="preserve">
          <source>You can also use a more recently advocated approach of valueOf or just &quot;of&quot;:</source>
          <target state="translated">また、最近提唱されているvalueOfや単なる &quot;of &quot;のアプローチを使うこともできます。</target>
        </trans-unit>
        <trans-unit id="347f9a5e8e0b14bdf9ec4ce6426cd612e7118d05" translate="yes" xml:space="preserve">
          <source>You can call another constructor via the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/thiskey.html&quot;&gt;&lt;code&gt;this(...)&lt;/code&gt;&lt;/a&gt; keyword (when you need to call a constructor from the same class) or the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/IandI/super.html&quot;&gt;&lt;code&gt;super(...)&lt;/code&gt;&lt;/a&gt; keyword
(when you need to call a constructor from a superclass).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/thiskey.html&quot;&gt; &lt;code&gt;this(...)&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キーワード（同じクラスからコンストラクターを呼び出す必要がある場合）または&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/IandI/super.html&quot;&gt; &lt;code&gt;super(...)&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キーワード（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スーパー&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスからコンストラクターを呼び出す必要がある場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を介して別のコンストラクターを呼び出すことができます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="daf8c27c3f64e7d7ad76f0c05d70dd4e96372582" translate="yes" xml:space="preserve">
          <source>You may need more. Builder pattern would be a great solution in this case. Here is an article, it might be helpful
&lt;a href=&quot;https://medium.com/@modestofiguereo/design-patterns-2-the-builder-pattern-and-the-telescoping-constructor-anti-pattern-60a33de7522e&quot;&gt;https://medium.com/@modestofiguereo/design-patterns-2-the-builder-pattern-and-the-telescoping-constructor-anti-pattern-60a33de7522e&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もっと必要になるかもしれません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この場合、ビルダーパターンは優れたソリューションになります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここに記事があります、それは役に立つかもしれません &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://medium.com/@modestofiguereo/design-patterns-2-the-builder-pattern-and-the-telescoping-constructor-anti-pattern-60a33de7522e&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://medium.com/@modestofiguereo/design-patterns-2-the-builder-pattern-and-the-telescoping-constructor-anti-pattern-60a33de7522e&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a1ab5d224884da8087e91dd77dd2d60fbc63cb1a" translate="yes" xml:space="preserve">
          <source>[&lt;em&gt;Note: I just want to add one aspect, which I did not see in the other answers: how to overcome limitations of the requirement that this() has to be on the first line).&lt;/em&gt;]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注：他の回答では見られなかった1つの側面を追加したいだけです。これは、this（）が最初の行になければならないという要件の制限を克服する方法です）。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11f02ed4a995c4fbe4f90ff04c856b69d07434fd" translate="yes" xml:space="preserve">
          <source>any &lt;em&gt;inner classes&lt;/em&gt; declared in this class or any superclass, or</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;任意の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内部クラス&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このクラスまたは任意のスーパークラスで宣言された、または&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4ca3e00f6e8414f6b7690d1a46f1a23f4a994d97" translate="yes" xml:space="preserve">
          <source>any &lt;em&gt;instance methods&lt;/em&gt; or</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;任意の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インスタンスメソッド&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b1a887ef0441b5a79b09d33a25a3f7c321a51d59" translate="yes" xml:space="preserve">
          <source>any &lt;em&gt;instance variables&lt;/em&gt; or</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;任意の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インスタンス変数&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;や&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6d9773ad419a3d8fa9a0c6f17211db402c336af7" translate="yes" xml:space="preserve">
          <source>now here is some small extra credit:</source>
          <target state="translated">今、ここに少しだけ追加のクレジットがあります。</target>
        </trans-unit>
        <trans-unit id="47ffbb8852e5c27ad65b26b1f5795ea1ed0ea736" translate="yes" xml:space="preserve">
          <source>this() call to this must be first statement in constructor</source>
          <target state="translated">this()の呼び出しはコンストラクタの最初の文でなければなりません。</target>
        </trans-unit>
        <trans-unit id="e4cf133ec21253dd9c3ca82fdb4db5898c4b377f" translate="yes" xml:space="preserve">
          <source>you can also read in details from 
&lt;a href=&quot;https://beginnersbook.com/2013/12/java-constructor-chaining-with-example/&quot;&gt;Constructor Chaining in Java&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また&lt;/font&gt;&lt;a href=&quot;https://beginnersbook.com/2013/12/java-constructor-chaining-with-example/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、Javaのコンストラクタチェーン&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から詳細を読むこともでき &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
