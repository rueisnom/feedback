<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/28250680">
    <body>
      <group id="28250680">
        <trans-unit id="886001de61d616fd7504793554e90b0ead0d7946" translate="yes" xml:space="preserve">
          <source>(Note: a more complex and complete version of this solution has been tested, but not this example version, so it could have a bug.)</source>
          <target state="translated">(Nota:se ha probado una versión más compleja y completa de esta solución,pero no esta versión de ejemplo,por lo que podría tener un fallo).</target>
        </trans-unit>
        <trans-unit id="8c36a0c010728fc244e1f43aab8c1da795455c65" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/q/844536/1048572&quot;&gt;Mutable state is ugly&lt;/a&gt;, and &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil&quot;&gt;global variables are evil&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/q/844536/1048572&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El estado mutable es feo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;las variables globales son malvadas&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="446787ac4bf8edd63cd98d9810d37f90a8ce33c1" translate="yes" xml:space="preserve">
          <source>A less harsh spin on &quot;Mutable contextual state&quot;</source>
          <target state="translated">Un giro menos duro sobre el &quot;Estado contextual mutable&quot;</target>
        </trans-unit>
        <trans-unit id="61650d4ab35176fac8853a022c21d3f429ac0a74" translate="yes" xml:space="preserve">
          <source>According to &lt;a href=&quot;https://html5hive.org/how-to-chain-javascript-promises/&quot;&gt;how-to-chain-javascript-promises&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De acuerdo a &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://html5hive.org/how-to-chain-javascript-promises/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;c&amp;oacute;mo-encadenar-javascript-promesas&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fb4e646963a08495dd8a836cba56eac6efaa78a1" translate="yes" xml:space="preserve">
          <source>Alternatively, you can employ &lt;code&gt;Promise.all&lt;/code&gt; to produce the promise for the array:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Alternativamente, puede emplear &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Promise.all&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para producir la promesa para la matriz:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94665e6ad2dc97bb0515d1739a70f85937dae7b8" translate="yes" xml:space="preserve">
          <source>And then, there are also many other &lt;a href=&quot;https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS#synchronous-to-asynchronous-javascript-compilers-cps&quot;&gt;compile-to-JS languages&lt;/a&gt;
that are dedicated to easing asynchronous programming. They usually use a syntax similar to &lt;code&gt;await&lt;/code&gt;, (e.g. &lt;a href=&quot;http://maxtaco.github.io/coffee-script/&quot;&gt;Iced CoffeeScript&lt;/a&gt;), but there are also others that feature a Haskell-like &lt;code&gt;do&lt;/code&gt;-notation (e.g. &lt;a href=&quot;http://lattejs.com/&quot;&gt;LatteJs&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/monadic&quot;&gt;monadic&lt;/a&gt;, &lt;a href=&quot;http://www.purescript.org/&quot;&gt;PureScript&lt;/a&gt; or &lt;a href=&quot;http://lispyscript.com/&quot;&gt;LispyScript&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y luego, tambi&amp;eacute;n hay muchos otros &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS#synchronous-to-asynchronous-javascript-compilers-cps&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;lenguajes de compilaci&amp;oacute;n a JS&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que est&amp;aacute;n dedicados a facilitar la programaci&amp;oacute;n asincr&amp;oacute;nica. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En general, utilizan una sintaxis similar a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;await&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , (por ejemplo, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://maxtaco.github.io/coffee-script/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;helado CoffeeScript&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), pero tambi&amp;eacute;n hay otros que cuentan con una Haskell-como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;do&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -notation (por ejemplo &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://lattejs.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;LatteJs&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.npmjs.com/package/monadic&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;mon&amp;aacute;dico&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.purescript.org/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Purescript&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://lispyscript.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;LispyScript&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b117394e70cda9ad8f1592c22985ada9cd1467db" translate="yes" xml:space="preserve">
          <source>And you might not only use arrays, but arbitrarily complex objects. For example, with &lt;a href=&quot;http://underscorejs.org/#extend&quot;&gt;&lt;code&gt;_.extend&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;&lt;code&gt;Object.assign&lt;/code&gt;&lt;/a&gt; in a different helper function:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y es posible que no solo use matrices, sino tambi&amp;eacute;n objetos arbitrariamente complejos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, con &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://underscorejs.org/#extend&quot;&gt; &lt;code&gt;_.extend&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; u &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt; &lt;code&gt;Object.assign&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en una funci&amp;oacute;n auxiliar diferente:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6cd0e648be626f2f5734fc06177a48a905ba581d" translate="yes" xml:space="preserve">
          <source>Another answer, using &lt;code&gt;babel-node&lt;/code&gt; version &amp;lt;6</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Otra respuesta, usando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;babel-node&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; versi&amp;oacute;n &amp;lt;6&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="917cd1d01022379cee10d9edbb40647574476354" translate="yes" xml:space="preserve">
          <source>Another answer, using sequential executor &lt;a href=&quot;https://github.com/amaksr/nsynjs&quot;&gt;nsynjs&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Otra respuesta, usando el ejecutor secuencial &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/amaksr/nsynjs&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;nsynjs&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e8aab5e31173c31302ab6dcea021b1848ed8a3ee" translate="yes" xml:space="preserve">
          <source>Assigning promises-for-later-needed-values to variables and then getting their value via synchronous inspection. The example uses bluebird's &lt;code&gt;.value()&lt;/code&gt; method but many libraries provide similar method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Asignando promesas para valores necesarios m&amp;aacute;s tarde a variables y luego obteniendo su valor mediante inspecci&amp;oacute;n sincr&amp;oacute;nica. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El ejemplo utiliza el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;.value()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; bluebird, &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pero muchas bibliotecas proporcionan un m&amp;eacute;todo similar.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="050feb2cbdeb309a67b27f7cdff96683ad234fa3" translate="yes" xml:space="preserve">
          <source>Before destructuring became available with ES6, a nifty helper method called &lt;code&gt;.spread()&lt;/code&gt; was pro&amp;shy;vi&amp;shy;ded by many promise libraries (&lt;a href=&quot;https://github.com/kriskowal/q/wiki/API-Reference#promisespreadonfulfilled-onrejected&quot;&gt;Q&lt;/a&gt;, &lt;a href=&quot;http://bluebirdjs.com/docs/api/spread.html&quot;&gt;Bluebird&lt;/a&gt;, &lt;a href=&quot;https://github.com/cujojs/when/blob/master/docs/api.md#promisespread&quot;&gt;when&lt;/a&gt;, &amp;hellip;). It takes a function with multiple parameters - one for each array element - to be used as &lt;code&gt;.spread(function(resultA, resultB) { &amp;hellip;&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Antes de que la desestructuraci&amp;oacute;n estuviera disponible con ES6, &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;muchas bibliotecas prometedoras proporcionaron &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;un ingenioso m&amp;eacute;todo auxiliar llamado &lt;/font&gt;&lt;/font&gt; &lt;code&gt;.spread()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ( &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/kriskowal/q/wiki/API-Reference#promisespreadonfulfilled-onrejected&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Q&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://bluebirdjs.com/docs/api/spread.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Bluebird&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/cujojs/when/blob/master/docs/api.md#promisespread&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cu&amp;aacute;ndo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , ...). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Se necesita una funci&amp;oacute;n con m&amp;uacute;ltiples par&amp;aacute;metros, uno para cada elemento de la matriz, para usarse como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;.spread(function(resultA, resultB) { &amp;hellip;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b1fbe958b0857725f5a84c804d4ae85da21ceb1d" translate="yes" xml:space="preserve">
          <source>Bluebird also features a dedicated &lt;a href=&quot;http://bluebirdjs.com/docs/api/promise.join.html&quot;&gt;&lt;code&gt;join&lt;/code&gt; function&lt;/a&gt; to replace that &lt;code&gt;Promise.all&lt;/code&gt;+&lt;code&gt;spread&lt;/code&gt; combination with a simpler (and more efficient) construct:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Bluebird tambi&amp;eacute;n presenta una &lt;/font&gt;&lt;a href=&quot;http://bluebirdjs.com/docs/api/promise.join.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funci&amp;oacute;n de &lt;/font&gt;&lt;/a&gt;&lt;/font&gt; &lt;code&gt;join&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; dedicada &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;para reemplazar esa &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;combinaci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Promise.all&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; + &lt;/font&gt;&lt;/font&gt; &lt;code&gt;spread&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con una construcci&amp;oacute;n m&amp;aacute;s simple (y m&amp;aacute;s eficiente):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="064bf726f394fe19c0ef56ee0e3f8168e8f3bf8c" translate="yes" xml:space="preserve">
          <source>Break the chain</source>
          <target state="translated">Romper la cadena</target>
        </trans-unit>
        <trans-unit id="f446dfc8ca31cb54d0b1dae43079076f607503d6" translate="yes" xml:space="preserve">
          <source>ECMAScript 5</source>
          <target state="translated">ECMAScript 5</target>
        </trans-unit>
        <trans-unit id="b02b03612b472d412029a9017657b2e96f26db53" translate="yes" xml:space="preserve">
          <source>ECMAScript 6</source>
          <target state="translated">ECMAScript 6</target>
        </trans-unit>
        <trans-unit id="8eecaf932c06e6aadd977797e815790995527161" translate="yes" xml:space="preserve">
          <source>ECMAScript 8</source>
          <target state="translated">ECMAScript 8</target>
        </trans-unit>
        <trans-unit id="ec3cb3a8bb975f9d73ec9e15cd1211b669541cdd" translate="yes" xml:space="preserve">
          <source>ECMAScript Harmony</source>
          <target state="translated">ECMAScript Harmony</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Ampliar fragmento</target>
        </trans-unit>
        <trans-unit id="2568555d5b3660982a930ffff01c1764f5cb7a9c" translate="yes" xml:space="preserve">
          <source>Explicit pass-through</source>
          <target state="translated">Paso explícito</target>
        </trans-unit>
        <trans-unit id="66a027cb165ddbb392556662ee9b3307626866a1" translate="yes" xml:space="preserve">
          <source>For more complex cases I often use these guy small promise utilities without dependencies tested and typed. p-map has been useful several times. I think he covered most use cases:</source>
          <target state="translated">Para casos más complejos suelo utilizar estos tipos de pequeñas utilidades prometedoras sin dependencias probadas y mecanografiadas.p-map ha sido útil varias veces.Creo que ha cubierto la mayoría de los casos de uso:</target>
        </trans-unit>
        <trans-unit id="5d57f2f84b3ffe6a5b6f65ea9aed650138de72a5" translate="yes" xml:space="preserve">
          <source>Global variables are bad, so this solution uses a locally scoped variable which causes no harm.  It is only accessible within the function.</source>
          <target state="translated">Las variables globales son malas,por lo que esta solución utiliza una variable de alcance local que no causa ningún daño.Sólo es accesible dentro de la función.</target>
        </trans-unit>
        <trans-unit id="24ca8b33236bc0d0ef50e2dd43fb66e04162b483" translate="yes" xml:space="preserve">
          <source>Here is a complete example:</source>
          <target state="translated">Aquí hay un ejemplo completo:</target>
        </trans-unit>
        <trans-unit id="a7f4dfdc3b0e4865ba4c2f88fa68113cce0ed915" translate="yes" xml:space="preserve">
          <source>Here, that little arrow &lt;code&gt;b =&amp;gt; [resultA, b]&lt;/code&gt; is the function that closes over &lt;code&gt;resultA&lt;/code&gt;, and passes an array of both results to the next step. Which uses parameter destructuring syntax to break it up in single variables again.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute;, esa peque&amp;ntilde;a flecha &lt;/font&gt;&lt;/font&gt; &lt;code&gt;b =&amp;gt; [resultA, b]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es la funci&amp;oacute;n que se cierra sobre el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;resultA&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y pasa una matriz de ambos resultados al siguiente paso. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Que utiliza la sintaxis de desestructuraci&amp;oacute;n de par&amp;aacute;metros para dividirla nuevamente en variables individuales.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b545f5f84c287a347a609ffd6cd3f0acc3d440ef" translate="yes" xml:space="preserve">
          <source>How do I access previous promise results in a .then() chain</source>
          <target state="translated">¿Cómo puedo acceder a los resultados de la promesa anterior en una cadena .then()</target>
        </trans-unit>
        <trans-unit id="02900e741b676e32f46da3689f6188c4289e7586" translate="yes" xml:space="preserve">
          <source>However, if you want/need to be backwards-compatible you cannot use those without a transpiler. Both generator functions and async functions are supported by the current tooling, see for example the documentation of Babel on &lt;a href=&quot;http://babeljs.io/learn-es2015/#ecmascript-2015-features-generators&quot;&gt;generators&lt;/a&gt; and &lt;a href=&quot;http://babeljs.io/docs/plugins/syntax-async-functions&quot;&gt;async functions&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, si desea / necesita ser compatible con versiones anteriores, no puede usarlos sin un transpilador. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tanto las funciones del generador como las funciones as&amp;iacute;ncronas son compatibles con las herramientas actuales; consulte, por ejemplo, la documentaci&amp;oacute;n de Babel sobre &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://babeljs.io/learn-es2015/#ecmascript-2015-features-generators&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;generadores&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://babeljs.io/docs/plugins/syntax-async-functions&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funciones as&amp;iacute;ncronas&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d891f22fbf83c3adb5977c46bcbe5452c18a9d0d" translate="yes" xml:space="preserve">
          <source>I am not going to use this pattern in my own code since I'm not a big fan of using global variables. However, in a pinch it will work.</source>
          <target state="translated">No voy a usar este patrón en mi propio código ya que no soy un gran fan de usar variables globales.Sin embargo,en un apuro funcionará.</target>
        </trans-unit>
        <trans-unit id="68345dc8d3438db6294a505941bbc502c5478c3d" translate="yes" xml:space="preserve">
          <source>I have restructured my code to &lt;a href=&quot;https://en.wikipedia.org/wiki/Futures_and_promises&quot;&gt;promises&lt;/a&gt;, and built a wonderful long &lt;strong&gt;flat promise chain&lt;/strong&gt;, consisting of multiple &lt;code&gt;.then()&lt;/code&gt; callbacks. In the end I want to return some composite value, and need to access multiple &lt;strong&gt;intermediate promise results&lt;/strong&gt;. However the resolution values from the middle of the sequence are not in scope in the last callback, how do I access them?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;He reestructurado mi c&amp;oacute;digo a &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Futures_and_promises&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;promesas&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;he &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;creado una maravillosa &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cadena de promesa&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; larga y &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;plana&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que consta de m&amp;uacute;ltiples &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;devoluciones de llamada &lt;/font&gt;&lt;/font&gt; &lt;code&gt;.then()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Al final quiero devolver alg&amp;uacute;n valor compuesto, y necesito acceder a m&amp;uacute;ltiples &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;resultados de promesa intermedios&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Sin embargo, los valores de resoluci&amp;oacute;n del medio de la secuencia no est&amp;aacute;n dentro del alcance en la &amp;uacute;ltima devoluci&amp;oacute;n de llamada, &amp;iquest;c&amp;oacute;mo puedo acceder a ellos?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="134d28e92e3dba4bc6b603007f8ab403b5304a73" translate="yes" xml:space="preserve">
          <source>I think you can use hash of RSVP.</source>
          <target state="translated">Creo que puedes usar el hachís de RSVP.</target>
        </trans-unit>
        <trans-unit id="e39203fa696fcdd915ba3edc88b86f9842cb98fa" translate="yes" xml:space="preserve">
          <source>In cases I do need to reference a promises is when creation and resolution happen at independent/not-related places. So instead an artificial association and probably an event listener just to resolve the &quot;distant&quot; promise, I prefer to expose the promise as a Deferred, which the following code implements it in valid es5</source>
          <target state="translated">En los casos en que necesito hacer referencia a una promesa es cuando la creación y la resolución ocurren en lugares independientes no relacionados.Así que en lugar de una asociación artificial y probablemente un oyente de eventos sólo para resolver la promesa &quot;distante&quot;,prefiero exponer la promesa como un Diferido,que el siguiente código la implementa en es5 válido</target>
        </trans-unit>
        <trans-unit id="24d5ca2482aca47f7ad53f979d066f321ca7b78a" translate="yes" xml:space="preserve">
          <source>In theory, you can always avoid more than two levels of nesting (by making all closures explicit), in practise use as many as are reasonable.</source>
          <target state="translated">En teoría,siempre se pueden evitar más de dos niveles de anidación (haciendo explícitos todos los cierres),en la práctica se utilizan tantos como sean razonables.</target>
        </trans-unit>
        <trans-unit id="d3bf1dc059b68a3d8ddb78e7995e2ab7c5c7d020" translate="yes" xml:space="preserve">
          <source>Instead of many variables one might also use an (initially empty) object, on which the results are stored as dynamically created properties.</source>
          <target state="translated">En lugar de muchas variables también se podría utilizar un objeto (inicialmente vacío),en el que los resultados se almacenan como propiedades creadas dinámicamente.</target>
        </trans-unit>
        <trans-unit id="8f9b6a3354ddc0bb248f6e94d258722ec015fcb3" translate="yes" xml:space="preserve">
          <source>Instead of the parameter destructuring in the callback after &lt;code&gt;Promise.all&lt;/code&gt; that only became avail&amp;shy;able with ES6, in ES5 the &lt;code&gt;then&lt;/code&gt; call would be replaced by a nifty helper method that was provided by many promise libraries (&lt;a href=&quot;https://github.com/kriskowal/q/wiki/API-Reference#promisespreadonfulfilled-onrejected&quot;&gt;Q&lt;/a&gt;, &lt;a href=&quot;http://bluebirdjs.com/docs/api/spread.html&quot;&gt;Bluebird&lt;/a&gt;, &lt;a href=&quot;https://github.com/cujojs/when/blob/master/docs/api.md#promisespread&quot;&gt;when&lt;/a&gt;, &amp;hellip;): &lt;code&gt;.spread(function(resultA, resultB) { &amp;hellip;&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En lugar de la desestructuraci&amp;oacute;n par&amp;aacute;metro en la devoluci&amp;oacute;n de llamada despu&amp;eacute;s de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Promise.all&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que s&amp;oacute;lo estaba disponible con ES6, ES5 en la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;then&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; llamada ser&amp;iacute;a reemplazado por un m&amp;eacute;todo de ayuda ingenioso que fue proporcionado por muchas bibliotecas Promise ( &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/kriskowal/q/wiki/API-Reference#promisespreadonfulfilled-onrejected&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Q&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://bluebirdjs.com/docs/api/spread.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Bluebird&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/cujojs/when/blob/master/docs/api.md#promisespread&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cuando&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , ...): &lt;/font&gt;&lt;/font&gt; &lt;code&gt;.spread(function(resultA, resultB) { &amp;hellip;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9d951045f06a6f96d2459f58d21879f6988c4a16" translate="yes" xml:space="preserve">
          <source>Intermediate promises are not prevented from accessing the state of the results object, but this does not introduce some scary scenario where one of the promises in the chain will go rogue and sabotage your results.  The responsibility of setting the values in each step of the promise is confined to this function and the overall result will either be correct or incorrect...it will not be some bug that will crop up years later in production (unless you intend it to!)</source>
          <target state="translated">No se impide que las promesas intermedias accedan al estado del objeto de los resultados,pero esto no introduce un escenario de miedo en el que una de las promesas de la cadena se vuelva pícara y sabotee sus resultados.La responsabilidad de establecer los valores en cada paso de la promesa se limita a esta función y el resultado global será correcto o incorrecto...no será un error que aparecerá años más tarde en la producción (¡a menos que usted tenga la intención de hacerlo!)</target>
        </trans-unit>
        <trans-unit id="012957063b5658b4b53260c2fa3837d67c7176c3" translate="yes" xml:space="preserve">
          <source>Mutable contextual state</source>
          <target state="translated">Estado contextual mutable</target>
        </trans-unit>
        <trans-unit id="a7d298a254d44b48b6337a699fa090dd4e71111a" translate="yes" xml:space="preserve">
          <source>Mutable state is ugly, but this does not mutate state in an ugly manner.  The ugly mutable state traditionally refers to modifying the state of function arguments or global variables, but this approach simply modifies the state of a locally scoped variable that exists for the sole purpose of aggregating promise results...a variable that will die a simple death once the promise resolves.</source>
          <target state="translated">El estado mutable es feo,pero éste no muta de manera fea.El feo estado mutable se refiere tradicionalmente a la modificación del estado de los argumentos de las funciones o de las variables globales,pero este enfoque simplemente modifica el estado de una variable de alcance local que existe con el único propósito de agregar los resultados de la promesa...una variable que morirá una simple muerte una vez que la promesa se resuelva.</target>
        </trans-unit>
        <trans-unit id="e8449a4b6842da8a1dba6281ce394242d5e45321" translate="yes" xml:space="preserve">
          <source>Nesting (and) closures</source>
          <target state="translated">Cierre de nidos (y)de los nidos...</target>
        </trans-unit>
        <trans-unit id="c40ee383e2e4ca5e287bcee0f67b57f30dfbadf6" translate="yes" xml:space="preserve">
          <source>Node 7.4 now supports async/await calls with the harmony flag.</source>
          <target state="translated">El nodo 7.4 ahora soporta las llamadas de asyncawait con la bandera de la armonía.</target>
        </trans-unit>
        <trans-unit id="412034bba97d4a4ab3e0a443ec0f5a846d142e98" translate="yes" xml:space="preserve">
          <source>Of course, that closure needed here can be further simplified by some helper functions, e.g.</source>
          <target state="translated">Por supuesto,ese cierre necesario aquí puede ser simplificado aún más por algunas funciones de ayuda,por ejemplo.</target>
        </trans-unit>
        <trans-unit id="aae9058adf8a1b510c202b122b2328aaf3580d28" translate="yes" xml:space="preserve">
          <source>Of course, this is building an indentation pyramid. If indentation is getting too large, you still can apply the old tools to counter the &lt;a href=&quot;http://callbackhell.com/&quot;&gt;pyramid of doom&lt;/a&gt;: modularize, use extra named functions, and flatten the promise chain as soon as you don't need a variable any more.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por supuesto, esto es construir una pir&amp;aacute;mide de sangr&amp;iacute;a. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si la sangr&amp;iacute;a se est&amp;aacute; volviendo demasiado grande, a&amp;uacute;n puede aplicar las herramientas antiguas para contrarrestar la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://callbackhell.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pir&amp;aacute;mide de la fatalidad&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : modularizar, usar funciones con nombre adicionales y aplanar la cadena de promesa tan pronto como ya no necesite una variable.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="10a3c56a26dc06509d2fd474a39da19d101d6694" translate="yes" xml:space="preserve">
          <source>Of course, this problem was recognized by the language designers as well. They did a lot of work and the &lt;a href=&quot;http://tc39.github.io/ecmascript-asyncawait/&quot;&gt;async functions proposal&lt;/a&gt; finally made it into</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por supuesto, este problema tambi&amp;eacute;n fue reconocido por los dise&amp;ntilde;adores de idiomas. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hicieron mucho trabajo y la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://tc39.github.io/ecmascript-asyncawait/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propuesta de funciones as&amp;iacute;ncronas&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; finalmente se convirti&amp;oacute; en&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dff95b253f71a37696b949a20c5ca47263763ec1" translate="yes" xml:space="preserve">
          <source>One must choose the scope for those shared variables correctly. It needs to be local to the executed function to prevent race conditions between multiple parallel invocations, as would be the case if, for example, state was stored on an instance.</source>
          <target state="translated">Hay que elegir correctamente el alcance de esas variables compartidas.Debe ser local a la función ejecutada para evitar condiciones de carrera entre múltiples invocaciones paralelas,como sería el caso si,por ejemplo,el estado se almacenara en una instancia.</target>
        </trans-unit>
        <trans-unit id="c1f929f8e70b71568c730fcf1ca04cc7fd34b3af" translate="yes" xml:space="preserve">
          <source>Similar to nesting the callbacks, this technique relies on closures. Yet, the chain stays flat - instead of passing only the latest result, some state object is passed for every step. These state objects accumulate the results of the previous actions, handing down all values that will be needed later again plus the result of the current task.</source>
          <target state="translated">Similar a la anidación de las llamadas de retorno,esta técnica se basa en los cierres.Sin embargo,la cadena se mantiene plana-en lugar de pasar sólo el último resultado,se pasa algún objeto de estado para cada paso.Estos objetos de estado acumulan los resultados de las acciones anteriores,transmitiendo todos los valores que se necesitarán más tarde de nuevo más el resultado de la tarea actual.</target>
        </trans-unit>
        <trans-unit id="6aafb455fdb78b42aaa8e751fa4281daec51a6e7" translate="yes" xml:space="preserve">
          <source>Simple as can be!</source>
          <target state="translated">¡Tan simple como puede ser!</target>
        </trans-unit>
        <trans-unit id="4190ac35a0d65d8420cd953993197fee2c185752" translate="yes" xml:space="preserve">
          <source>Solution:</source>
          <target state="translated">Solution:</target>
        </trans-unit>
        <trans-unit id="740ffbb9952d0db97b17599b914cae9f45ab58ec" translate="yes" xml:space="preserve">
          <source>Something like as below :</source>
          <target state="translated">Algo así como abajo:</target>
        </trans-unit>
        <trans-unit id="9d4e83066087dd1079c656c148313dafa0d0a48a" translate="yes" xml:space="preserve">
          <source>Synchronous inspection</source>
          <target state="translated">Inspección sincrónica</target>
        </trans-unit>
        <trans-unit id="7552eee459001ff5a9e0fbf19a139de19a6e647d" translate="yes" xml:space="preserve">
          <source>The Bluebird library encourages the use of an object that is passed along, using &lt;a href=&quot;http://bluebirdjs.com/docs/api/bind.html&quot;&gt;their &lt;code&gt;bind()&lt;/code&gt; method&lt;/a&gt; to assign a context object to a promise chain. It will be accessible from each callback function via the otherwise unusable &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;&lt;code&gt;this&lt;/code&gt; keyword&lt;/a&gt;. While object properties are more prone to undetected typos than variables, the pattern is quite clever:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La biblioteca Bluebird fomenta el uso de un objeto que se pasa, utilizando &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://bluebirdjs.com/docs/api/bind.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;su &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;bind()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para asignar un objeto de contexto a una cadena de promesa. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Se podr&amp;aacute; acceder desde cada funci&amp;oacute;n de devoluci&amp;oacute;n de llamada a trav&amp;eacute;s de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; palabra clave que de&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; otro modo no se podr&amp;iacute;a utilizar &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si bien las propiedades de los objetos son m&amp;aacute;s propensas a errores tipogr&amp;aacute;ficos no detectados que a las variables, el patr&amp;oacute;n es bastante inteligente:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9da2cb01b9445e3b82cef2fa35434f5be10a373b" translate="yes" xml:space="preserve">
          <source>The scope of the variables does not prevent to access them before they are initialized. This is especially likely for complex promise constructions (loops, branching, excptions) where race conditions might happen. Passing state explicitly, a &lt;a href=&quot;http://en.wikipedia.org/wiki/Declarative_programming&quot;&gt;declarative design&lt;/a&gt; that promises encourage, forces a cleaner coding style which can prevent this.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El alcance de las variables no impide acceder a ellas antes de que se inicialicen. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto es especialmente probable para construcciones de promesa complejas (bucles, ramificaciones, excitaciones) donde las condiciones de carrera pueden ocurrir. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La aprobaci&amp;oacute;n expl&amp;iacute;cita del estado, un &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Declarative_programming&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dise&amp;ntilde;o declarativo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que promete alentar, obliga a un estilo de codificaci&amp;oacute;n m&amp;aacute;s limpio que puede evitar esto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ef9dea0231e47298d8f39b636223237575303e9c" translate="yes" xml:space="preserve">
          <source>The trivial (but inelegant and rather errorprone) solution is to just use higher-scope variables (to which all callbacks in the chain have access) and write result values to them when you get them:</source>
          <target state="translated">La solución trivial (pero poco elegante y bastante propensa a errores)es utilizar simplemente variables de mayor alcance (a las que tienen acceso todas las llamadas de la cadena)y escribir los valores de los resultados en ellas cuando los obtengan:</target>
        </trans-unit>
        <trans-unit id="03ebf8b9502bb380b80a7eb42cece7ab3209b46b" translate="yes" xml:space="preserve">
          <source>Then, run &lt;code&gt;babel-node example.js&lt;/code&gt; and voila!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Luego, ejecute &lt;/font&gt;&lt;/font&gt; &lt;code&gt;babel-node example.js&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y listo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab34eafdad2b4ee95e473c31dd3db173f98501d2" translate="yes" xml:space="preserve">
          <source>There are dedicated libraries (like &lt;a href=&quot;https://github.com/tj/co&quot;&gt;co&lt;/a&gt; or &lt;a href=&quot;http://taskjs.org/&quot;&gt;task.js&lt;/a&gt;), but also many promise libraries have helper functions (&lt;a href=&quot;https://github.com/kriskowal/q/wiki/API-Reference#generators&quot;&gt;Q&lt;/a&gt;, &lt;a href=&quot;http://bluebirdjs.com/docs/api/generators.html&quot;&gt;Bluebird&lt;/a&gt;, &lt;a href=&quot;https://github.com/cujojs/when/blob/master/docs/api.md#es6-generators&quot;&gt;when&lt;/a&gt;, &amp;hellip;) that do &lt;a href=&quot;https://stackoverflow.com/a/23554399/1048572&quot;&gt;this async step-by-step execution&lt;/a&gt; for you when you give them a generator function that yields promises.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hay bibliotecas dedicadas (como &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/tj/co&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;co&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://taskjs.org/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;task.js&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), pero tambi&amp;eacute;n muchas bibliotecas prometedoras tienen funciones auxiliares ( &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/kriskowal/q/wiki/API-Reference#generators&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Q&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://bluebirdjs.com/docs/api/generators.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Bluebird&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/cujojs/when/blob/master/docs/api.md#es6-generators&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cu&amp;aacute;ndo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , ...) que realizan &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/23554399/1048572&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esta ejecuci&amp;oacute;n paso a paso as&amp;iacute;ncrona&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; cuando les das una funci&amp;oacute;n de generador que rinde promesas.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d8a230a40501497f4bfe4e1796388f0ed6d16b20" translate="yes" xml:space="preserve">
          <source>This approach can be easily simulated in promise libraries that do not support .bind (although in a somewhat more verbose way and cannot be used in an expression):</source>
          <target state="translated">Este enfoque puede simularse fácilmente en las bibliotecas de promesas que no admiten .bind (aunque de manera algo más verbosa y no puede utilizarse en una expresión):</target>
        </trans-unit>
        <trans-unit id="144ef4fefc003675e5f3e9aa894c364f1a909c60" translate="yes" xml:space="preserve">
          <source>This can be used for as many values as you like:</source>
          <target state="translated">Esto puede ser usado para todos los valores que quieras:</target>
        </trans-unit>
        <trans-unit id="c73428b0fed4a12cd913cd5733b9a56cd877068d" translate="yes" xml:space="preserve">
          <source>This days, I also hava meet some questions like you. At last, I find a good solution with the quesition, it's simple and good to read. I hope this can help you.</source>
          <target state="translated">En estos días,también he encontrado algunas preguntas como tú.Por fin encuentro una buena solución a la pregunta,es simple y buena de leer.Espero que esto pueda ayudarte.</target>
        </trans-unit>
        <trans-unit id="acfafaf8cb92b754b040f10b093a0b4d1cefb53f" translate="yes" xml:space="preserve">
          <source>This did work in Node.js since version 4.0, also a few browsers (or their dev editions) did support generator syntax relatively early.</source>
          <target state="translated">Esto funcionó en Node.js desde la versión 4.0,también algunos navegadores (o sus ediciones dev)apoyaron la sintaxis del generador relativamente temprano.</target>
        </trans-unit>
        <trans-unit id="9985024202145ce805f87cbe5538067d97b19841" translate="yes" xml:space="preserve">
          <source>This does not introduce a race condition scenario that would arise from parallel invocation because a new instance of the results variable is created for every invocation of the getExample function.</source>
          <target state="translated">Esto no introduce un escenario de condición de carrera que surgiría de una invocación paralela porque se crea una nueva instancia de la variable de resultados para cada invocación de la función getExample.</target>
        </trans-unit>
        <trans-unit id="46c1b4574441bc055943b5b04c15465abdec3bff" translate="yes" xml:space="preserve">
          <source>This pattern doesn't work across function boundaries, modularising the functions is harder as their declarations must not leave the shared scope</source>
          <target state="translated">Este patrón no funciona a través de los límites de la función,modular las funciones es más difícil ya que sus declaraciones no deben salir del ámbito compartido</target>
        </trans-unit>
        <trans-unit id="e5580ff94ef22be48cff7200bd303fbf66ceabd3" translate="yes" xml:space="preserve">
          <source>This solution can be invoked as follows:</source>
          <target state="translated">Esta solución puede ser invocada de la siguiente manera:</target>
        </trans-unit>
        <trans-unit id="e43a3e4618b96cad7d4ab03f023073c45d9f6bd6" translate="yes" xml:space="preserve">
          <source>This solution has several drawbacks:</source>
          <target state="translated">Esta solución tiene varios inconvenientes:</target>
        </trans-unit>
        <trans-unit id="da3dd2f8f239743397e37a9839f3048b1aa2620f" translate="yes" xml:space="preserve">
          <source>This will result in a very straightforward control flow, clear composition of functionalities and therefore easy modularisation.</source>
          <target state="translated">Esto resultará en un flujo de control muy sencillo,una clara composición de las funcionalidades y,por lo tanto,una fácil modularización.</target>
        </trans-unit>
        <trans-unit id="b21480ff457e048e3c7a6593bfb52719279e1f05" translate="yes" xml:space="preserve">
          <source>Try this:</source>
          <target state="translated">Pruebe esto:</target>
        </trans-unit>
        <trans-unit id="2057318d110eca92034720c6472bfc3e1bd381c0" translate="yes" xml:space="preserve">
          <source>Update: added working example</source>
          <target state="translated">Actualización:añadido ejemplo de trabajo</target>
        </trans-unit>
        <trans-unit id="e944e3513336c73f5a43135573f6d4fe61b114c7" translate="yes" xml:space="preserve">
          <source>User is a promisified Mongoose model.</source>
          <target state="translated">El usuario es un modelo promisorio de Mangosta.</target>
        </trans-unit>
        <trans-unit id="03057780495560c1cec710f98e709cc23defb382" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;async - await&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Usando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;async - await&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eee874fe8aaa9db187a682e750fc3f3d02aa63e8" translate="yes" xml:space="preserve">
          <source>Using a locally scoped object to collect the intermediate results in a promise chain is a reasonable approach to the question you posed. Consider the following snippet:</source>
          <target state="translated">El uso de un objeto de alcance local para recoger los resultados intermedios en una cadena de promesas es un enfoque razonable para la pregunta que planteó.Considere el siguiente recorte:</target>
        </trans-unit>
        <trans-unit id="223bff812bcb6fe8adc3710c5c73399c9f4fc29b" translate="yes" xml:space="preserve">
          <source>Using closures for maintaining the scope of variables (in our case, the success callback function parameters) is the natural JavaScript solution. With promises, we can arbitrarily &lt;a href=&quot;https://stackoverflow.com/a/22000931/1048572&quot;&gt;nest and flatten&lt;/a&gt;&lt;code&gt;.then()&lt;/code&gt; callbacks - they are semantically equivalent, except for the scope of the inner one.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El uso de cierres para mantener el alcance de las variables (en nuestro caso, los par&amp;aacute;metros de la funci&amp;oacute;n de devoluci&amp;oacute;n de llamada exitosa) es la soluci&amp;oacute;n natural de JavaScript. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con las promesas, podemos &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/22000931/1048572&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anidar y aplanar &lt;/font&gt;&lt;/font&gt;&lt;/a&gt; &lt;code&gt;.then()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; devoluciones de llamada &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.then ()&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : son sem&amp;aacute;nticamente equivalentes, excepto por el alcance del interno.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63a90d8bcee39e3e934d7225c50fb780b32e01d5" translate="yes" xml:space="preserve">
          <source>What I learn about promises is to use it only as return values &lt;strong&gt;avoid referencing them&lt;/strong&gt; if possible. async/await syntax is particularly practical for that. Today all latest browsers and node support it: &lt;a href=&quot;https://caniuse.com/#feat=async-functions&quot;&gt;https://caniuse.com/#feat=async-functions&lt;/a&gt; , is a simple behavior and the code is like reading synchronous code, forget about callbacks...</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo que aprendo acerca de las promesas es usarlo solo como valores de retorno, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;evite hacer referencia a ellos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; si es posible. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La sintaxis async / await es particularmente pr&amp;aacute;ctica para eso. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hoy todos los navegadores y nodos m&amp;aacute;s recientes lo admiten: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://caniuse.com/#feat=async-functions&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://caniuse.com/#feat=async-functions&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , es un comportamiento simple y el c&amp;oacute;digo es como leer c&amp;oacute;digo s&amp;iacute;ncrono, olvidarse de las devoluciones de llamada ...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8bfce48cbd196a61b1b247b32e5d1c51102f28ea" translate="yes" xml:space="preserve">
          <source>When using bluebird, you can use &lt;code&gt;.bind&lt;/code&gt; method to share variables in promise chain:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando use bluebird, puede usar el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;.bind&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para compartir variables en la cadena de promesa:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b0aee9dff13129530d7d2bee00bb7f9b72fa1522" translate="yes" xml:space="preserve">
          <source>When you need to access the intermediate values in your chain, you should split your chain apart in those single pieces that you need. Instead of attaching one callback and somehow trying to use its parameter multiple times, attach multiple callbacks to the same promise - wherever you need the result value. Don't forget, a &lt;a href=&quot;https://stackoverflow.com/a/22540276/1048572&quot;&gt;promise just represents (proxies) a future value&lt;/a&gt;! Next to deriving one promise from the other in a linear chain, use the promise combinators that are given to you by your library to build the result value.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando necesite acceder a los valores intermedios en su cadena, debe dividir su cadena en esas piezas individuales que necesita. En lugar de adjuntar una devoluci&amp;oacute;n de llamada y de alguna manera tratar de usar su par&amp;aacute;metro varias veces, adjunte varias devoluciones de llamada a la misma promesa, siempre que necesite el valor del resultado. &amp;iexcl;No olvide que una &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/22540276/1048572&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;promesa solo representa (representa) un valor futuro&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ! Adem&amp;aacute;s de derivar una promesa de la otra en una cadena lineal, use los combinadores de promesa que le proporciona su biblioteca para generar el valor del resultado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d4f21d072723ef8937089cfff3fff2bd8c2ed4b3" translate="yes" xml:space="preserve">
          <source>While this pattern guarantees a flat chain and explicit state objects can improve clarity, it will become tedious for a long chain. Especially when you need the state only sporadically, you still have to pass it through every step. With this fixed interface, the single callbacks in the chain are rather tightly coupled and inflexible to change. It makes factoring out single steps harder, and callbacks cannot be supplied directly from other modules - they always need to be wrapped in boilerplate code that cares about the state. Abstract helper functions like the above can ease the pain a bit, but it will always be present.</source>
          <target state="translated">Mientras que este patrón garantiza una cadena plana y los objetos de estado explícito pueden mejorar la claridad,se volverá tedioso para una cadena larga.Especialmente cuando se necesita el estado sólo esporádicamente,todavía hay que pasar por cada paso.Con esta interfaz fija,las llamadas individuales en la cadena están bastante bien acopladas y son inflexibles de cambiar.Esto hace más difícil el factoraje de los pasos individuales,y las llamadas de retorno no pueden ser suministradas directamente desde otros módulos-siempre tienen que ser envueltas en un código de calderilla que se preocupa por el estado.Las funciones de ayuda abstracta como las anteriores pueden aliviar un poco el dolor,pero siempre estará presente.</target>
        </trans-unit>
        <trans-unit id="1b9eacffa6333b9b56f47e8a6b4d99a89cd316d9" translate="yes" xml:space="preserve">
          <source>While we were waiting for ES8, we already did use a very similar kind of syntax. ES6 came with &lt;a href=&quot;http://davidwalsh.name/es6-generators&quot;&gt;generator functions&lt;/a&gt;, which allow to break the execution apart in pieces at arbitrarily placed &lt;code&gt;yield&lt;/code&gt; keywords. Those slices can be run after each other, independently, even asynchronously - and that's just what we do when we want to wait for a promise resolution before running the next step.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Mientras esper&amp;aacute;bamos ES8, ya usamos un tipo de sintaxis muy similar. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ES6 viene con &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://davidwalsh.name/es6-generators&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funciones de generador&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que permiten separar la ejecuci&amp;oacute;n en partes en &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;palabras clave de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;yield&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; colocadas arbitrariamente &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esos segmentos se pueden ejecutar uno tras otro, de forma independiente, incluso de forma asincr&amp;oacute;nica, y eso es justo lo que hacemos cuando queremos esperar una resoluci&amp;oacute;n prometedora antes de ejecutar el siguiente paso.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d663118fbfd1bf9fa6e25101948dd5f5db080d28" translate="yes" xml:space="preserve">
          <source>You can also use helper functions for this kind of &lt;a href=&quot;https://en.wikipedia.org/wiki/Partial_application&quot;&gt;partial application&lt;/a&gt;, like &lt;code&gt;_.partial&lt;/code&gt; from &lt;a href=&quot;http://underscorejs.org/#partial&quot;&gt;Underscore&lt;/a&gt;/&lt;a href=&quot;https://lodash.com/docs#partial&quot;&gt;lodash&lt;/a&gt; or the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;native &lt;code&gt;.bind()&lt;/code&gt; method&lt;/a&gt;, to further decrease indentation:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n puede utilizar funciones de ayuda para este tipo de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Partial_application&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aplicaci&amp;oacute;n parcial&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;_.partial&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://underscorejs.org/#partial&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Subrayado&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; / &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://lodash.com/docs#partial&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;lodash&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; el o &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;nativa &lt;/font&gt;&lt;/font&gt; &lt;code&gt;.bind()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; m&amp;eacute;todo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , a una mayor disminuci&amp;oacute;n de la sangr&amp;iacute;a:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="504ef302e3dad1d0b3f2452e253c7576fe3cfd47" translate="yes" xml:space="preserve">
          <source>You can put intermediate values in scope in any later 'then' function explicitly, by using 'bind'. It is a nice solution that doesn't require changing how Promises work, and only requires a line or two of code to propagate the values just like errors are already propagated.</source>
          <target state="translated">Puedes poner valores intermedios en el alcance en cualquier función posterior de &quot;entonces&quot; explícitamente,usando &quot;bind&quot;.Es una buena solución que no requiere cambiar la forma en que funcionan las promesas,y sólo requiere una o dos líneas de código para propagar los valores como ya se propagan los errores.</target>
        </trans-unit>
        <trans-unit id="e100ea30d9c7be0d59c6c2207e286e7716ba132e" translate="yes" xml:space="preserve">
          <source>You don't need a single &lt;code&gt;then&lt;/code&gt; invocation or callback function any more, as in an asynchronous function (that returns a promise when being called) you can simply wait for promises to resolve directly. It also features arbitrary control structures like conditions, loops and try-catch-clauses, but for the sake of convenience we don't need them here:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No es necesario un solo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;then&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; la invocaci&amp;oacute;n o llamada de funci&amp;oacute;n m&amp;aacute;s, como en una funci&amp;oacute;n as&amp;iacute;ncrona (que devuelve una promesa al ser llamado) puede simplemente esperar a que las promesas para resolver directamente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n presenta estructuras de control arbitrarias como condiciones, bucles y cl&amp;aacute;usulas try-catch-but, pero por conveniencia no las necesitamos aqu&amp;iacute;:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d87de37b1d789f1d1fe1124c674c1df85f72fe40" translate="yes" xml:space="preserve">
          <source>and run the file with:</source>
          <target state="translated">y ejecutar el archivo con:</target>
        </trans-unit>
        <trans-unit id="48d22e4b889c8e81b57a132d3e6fa7ddb0ede8f6" translate="yes" xml:space="preserve">
          <source>easy way :D</source>
          <target state="translated">manera fácil :D</target>
        </trans-unit>
        <trans-unit id="969d4c74db0b220c26ebcbab6fb30ae35bd28194" translate="yes" xml:space="preserve">
          <source>ok, let's look at the code:</source>
          <target state="translated">Bien,veamos el código:</target>
        </trans-unit>
        <trans-unit id="ca09a36d45885d74388e59c155d88008b4a03340" translate="yes" xml:space="preserve">
          <source>please check this link for further information:</source>
          <target state="translated">por favor,compruebe este enlace para más información:</target>
        </trans-unit>
        <trans-unit id="a5222aa7ce87a66abef69219caaf401b2c3230a9" translate="yes" xml:space="preserve">
          <source>transpiled form a typescript project of mine:</source>
          <target state="translated">transpuesto de un proyecto mío de tipografía:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
