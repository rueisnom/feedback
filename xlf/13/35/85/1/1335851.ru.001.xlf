<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/1335851">
    <body>
      <group id="1335851">
        <trans-unit id="59655149a5150c3ca8c39faa908f2d6163ff8a16" translate="yes" xml:space="preserve">
          <source>&quot;Use Strict&quot;; is an insurance that programmer will not use the loose or the bad properties of JavaScript. It is a guide, just like a ruler will help you make straight lines. &quot;Use Strict&quot; will help you do &quot;Straight coding&quot;.</source>
          <target state="translated">&quot;Use Strict&quot;-это страховка от того,что программист не воспользуется свободными или плохими свойствами JavaScript.Это руководство,так же как линейка поможет вам делать прямые линии.&quot;Use Strict&quot; поможет вам сделать &quot;Прямое кодирование&quot;.</target>
        </trans-unit>
        <trans-unit id="3004d681862814bd492c00f298f79de8546a16e3" translate="yes" xml:space="preserve">
          <source>&quot;use strict&quot;; is the ECMA effort to make JavaScript a little bit more robust. It brings in JS an attempt to make it at least a little &quot;strict&quot; (other languages implement strict rules since the 90s). It actually &quot;forces&quot; JavaScript developers to follow some sort of coding best practices.
Still, JavaScript is very fragile. There is no such thing as typed variables, typed methods, etc.
I strongly recommend JavaScript developers to learn a more robust language such as Java or ActionScript3, and implement the same best practices in your JavaScript code, it will work better and be easier to debug.</source>
          <target state="translated">&quot;использовать строгий&quot;;это ECMA усилия,чтобы сделать JavaScript немного более надежным.Это приносит в JS попытку сделать его по крайней мере немного &quot;строгим&quot; (другие языки реализуют строгие правила с 90-х годов).На самом деле,это &quot;заставляет&quot; разработчиков JavaScript следовать некоторым лучшим практикам кодирования.Тем не менее,JavaScript очень хрупок.Нет таких вещей,как типизированные переменные,типизированные методы и так далее.Я настоятельно рекомендую разработчикам JavaScript изучать более надежный язык,такой как Java или ActionScript3,и внедрять те же самые лучшие практики в ваш код JavaScript,он будет работать лучше и будет легче отлаживаться.</target>
        </trans-unit>
        <trans-unit id="a890ef5e6862668a8f388386b332421857c3174b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://web.archive.org/web/20170707015027/http://cjihrig.com/blog/javascripts-strict-mode-and-why-you-should-use-it/&quot;&gt;JavaScript&amp;rsquo;s Strict Mode and Why You Should Use It&lt;/a&gt; on Colin J. Ihrig's blog (archived version)</source>
          <target state="translated">&lt;a href=&quot;http://web.archive.org/web/20170707015027/http://cjihrig.com/blog/javascripts-strict-mode-and-why-you-should-use-it/&quot;&gt;Строгий режим JavaScript и почему вы должны его использовать&lt;/a&gt; в блоге Колина Дж. Ирига (архивная версия)</target>
        </trans-unit>
        <trans-unit id="d3d3727e7b6567159e7a102fb614c67f67805b58" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.jslint.com/&quot;&gt;JSLint&lt;/a&gt; is a debugger written by Douglas Crockford. Simply paste in your script, and it&amp;rsquo;ll quickly scan for any noticeable issues and errors in your code.</source>
          <target state="translated">&lt;a href=&quot;http://www.jslint.com/&quot;&gt;JSLint&lt;/a&gt; - это отладчик, написанный Дугласом Крокфордом. Просто вставьте ваш скрипт, и он быстро отыщет любые заметные проблемы и ошибки в вашем коде.</target>
        </trans-unit>
        <trans-unit id="78bf625f7b5e03664c59d7ee51dc7af02310b85e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.w3schools.com/js/js_strict.asp&quot;&gt;Quoting from w3schools&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://www.w3schools.com/js/js_strict.asp&quot;&gt;Цитирование из w3schools&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="b5af4e0174180b8a2c7208d7edf82d109f9cd5e9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;Strict mode&lt;/a&gt; on MDN</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;Строгий режим&lt;/a&gt; на MDN</target>
        </trans-unit>
        <trans-unit id="b5bcc7d75cb8e736baf64db945995c8b9a3a60be" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode&quot;&gt;Transitioning to strict mode&lt;/a&gt; on MDN</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode&quot;&gt;Переход на строгий режим&lt;/a&gt; на MDN</target>
        </trans-unit>
        <trans-unit id="6e939affa70685384b45a4a4e094772a28124974" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; a directive introduced in ECMAScript 5.</source>
          <target state="translated">&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; директиву, введенную в ECMAScript 5.</target>
        </trans-unit>
        <trans-unit id="643a6e9cb02c410968fee48edd499efb7b160711" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; is widely needed to be used in ECMA5, &lt;strong&gt;in ECMA6 it's part of JavaScript by default&lt;/strong&gt;, so it doesn't need to be added if you're using ES6.</source>
          <target state="translated">&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; широко необходимо для использования в ECMA5, &lt;strong&gt;в ECMA6 это часть JavaScript по умолчанию&lt;/strong&gt; , поэтому его не нужно добавлять, если вы используете ES6.</target>
        </trans-unit>
        <trans-unit id="42f94653c815af9a0a66db63daf88a106628f565" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; makes JavaScript code to run in &lt;em&gt;strict mode&lt;/em&gt;, which basically means everything needs to be defined before use. The main reason for using strict mode is to avoid accidental global uses of undefined methods.</source>
          <target state="translated">&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; заставляет код JavaScript работать в &lt;em&gt;строгом режиме&lt;/em&gt; , что в основном означает, что все должно быть определено перед использованием. Основная причина использования строгого режима состоит в том, чтобы избежать случайного глобального использования неопределенных методов.</target>
        </trans-unit>
        <trans-unit id="b2700ddb133085373ac38f09a3f5d0bf79811178" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arguments.callee&lt;/code&gt; is not supported</source>
          <target state="translated">&lt;code&gt;arguments.callee&lt;/code&gt; не поддерживается</target>
        </trans-unit>
        <trans-unit id="f8d48d4465392e0aa08ee8ea840aa1b3f23996fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval&lt;/code&gt; in strict mode does not introduce new variables</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; в строгом режиме не вводит новые переменные</target>
        </trans-unit>
        <trans-unit id="3ab7533dde427ea5d6492eae8a3125e8afc3cfaa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;implements&lt;/code&gt;, &lt;code&gt;interface&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, and &lt;code&gt;yield&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;implements&lt;/code&gt; &lt;code&gt;interface&lt;/code&gt; , &lt;code&gt;let&lt;/code&gt; , &lt;code&gt;package&lt;/code&gt; , &lt;code&gt;private&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; , &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;static&lt;/code&gt; и &lt;code&gt;yield&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ec53e46b9a64ec466cbf3b9f2ea170c32991ddb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; point to the global object.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; точка для глобального объекта.</target>
        </trans-unit>
        <trans-unit id="ff636551fe7d26c196cc6753f1ecb44215346d16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use strict&lt;/code&gt; also works inside of individual functions. It is always a better practice to include &lt;code&gt;use strict&lt;/code&gt; in your code.</source>
          <target state="translated">&lt;code&gt;use strict&lt;/code&gt; также работает внутри отдельных функций. Лучше всегда включать в свой код &lt;code&gt;use strict&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="189bf0e21b07dc936d1f4023bde32e80cf254249" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use strict&lt;/code&gt; can be used only at the beginning of a script or of a function, i.e. it must precede every other (real) statement. It does not have to be the first instruction in a script of function: it can be preceded by other statement expressions that consist of string literals ( and JavaScript implementations can treat them as implementation specific directives). String literals statements, which follow a first real statement (in a script or function) are simple expression statements. Interpreters must not interpret them as directives and they have no effect.</source>
          <target state="translated">&lt;code&gt;use strict&lt;/code&gt; может использоваться только в начале скрипта или функции, т. е. оно должно предшествовать любому другому (реальному) утверждению. Это не обязательно должна быть первая инструкция в скрипте функции: ей могут предшествовать другие операторные выражения, которые состоят из строковых литералов (и реализации JavaScript могут рассматривать их как директивы, специфичные для реализации). Операторы строковых литералов, которые следуют за первым реальным оператором (в скрипте или функции), являются простыми операторами выражения. Переводчики не должны интерпретировать их как директивы, и они не имеют никакого эффекта.</target>
        </trans-unit>
        <trans-unit id="c8a24ea46f8167baca5ea7c30a696dde06bff8b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use strict&lt;/code&gt; does not contain key words: The directive is a simple expression statement, which consists of a special string literal (in single or double quotes). JavaScript engines, that do not implement ECMAScript 5, merely see an expression statement without side effects. It is expected that future versions of ECMAScript standards introduce &lt;code&gt;use&lt;/code&gt; as a real key word; the quotes would thereby become obsolete.</source>
          <target state="translated">&lt;code&gt;use strict&lt;/code&gt; не содержит ключевых слов: директива представляет собой простое выражение выражения, которое состоит из специального строкового литерала (в одинарных или двойных кавычках). Механизмы JavaScript, которые не реализуют ECMAScript 5, просто видят выражение-выражение без побочных эффектов. Ожидается, что будущие версии стандартов ECMAScript введут &lt;code&gt;use&lt;/code&gt; в качестве реального ключевого слова; таким образом, цитаты устаревают.</target>
        </trans-unit>
        <trans-unit id="93d83abef028d4a348358ca66f7d7b8d130ab13f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use strict&lt;/code&gt; is a way to make your code safer, because you can't use dangerous features that can work not as you expect. And, as was written before, it makes code more strict.</source>
          <target state="translated">&lt;code&gt;use strict&lt;/code&gt; способ повысить безопасность кода, поскольку вы не можете использовать опасные функции, которые могут работать не так, как вы ожидаете. И, как было написано ранее, это делает код более строгим.</target>
        </trans-unit>
        <trans-unit id="02f9e1a9c89babe3794e548d1c031c3a106b1dc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;with&lt;/code&gt; statements can't be minified using tools like &lt;a href=&quot;http://marijnhaverbeke.nl/uglifyjs&quot;&gt;uglify-js&lt;/a&gt;. They're also &lt;a href=&quot;http://www.2ality.com/2011/06/with-statement.html&quot;&gt;deprecated&lt;/a&gt; and removed from future JavaScript versions.</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; утверждениями нельзя минимизировать с помощью таких инструментов, как &lt;a href=&quot;http://marijnhaverbeke.nl/uglifyjs&quot;&gt;uglify-js&lt;/a&gt; . Они также &lt;a href=&quot;http://www.2ality.com/2011/06/with-statement.html&quot;&gt;устарели&lt;/a&gt; и удалены из будущих версий JavaScript.</target>
        </trans-unit>
        <trans-unit id="0f478c9cf6e945f9f4d68899a9b247c36f3d43c0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;My two cents:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Мои два цента:&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b6ab9835d91deb98705b1f3c514957269bbf6e08" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NovoGeek.com - Krishna's weblog&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;NovoGeek.com - блог Кришны&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8816eb841c341fc968650270e2dd8daff581dcd3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Paving the way for future ECMAScript versions&lt;/em&gt;, using one of the newly reserved keywords (in prevision for &lt;em&gt;ECMAScript 6&lt;/em&gt;): &lt;code&gt;implements&lt;/code&gt;, &lt;code&gt;interface&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, and &lt;code&gt;yield&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;Проложить путь для будущих версий ECMAScript&lt;/em&gt; , используя одно из недавно зарезервированных ключевых слов (в преддверии &lt;em&gt;ECMAScript 6&lt;/em&gt; ): &lt;code&gt;implements&lt;/code&gt; &lt;code&gt;interface&lt;/code&gt; , &lt;code&gt;let&lt;/code&gt; , &lt;code&gt;package&lt;/code&gt; , &lt;code&gt;private&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; , &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;static&lt;/code&gt; и &lt;code&gt;yield&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="52f29c68d91653f44d8533c880c63c94e3e9dcf9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&quot;use strict&quot;; Defines that JavaScript code should be executed in
   &quot;strict mode&quot;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;laquo;использовать строгое&amp;raquo;;&lt;/strong&gt; &lt;strong&gt;Определяет, что код JavaScript должен выполняться в &amp;laquo;строгом режиме&amp;raquo;.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="09cd3a0fa55f56bac5040bfc18287c80994ace0f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1) strict mode in functions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1) строгий режим в функциях&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e089472c5ade8f427379cbfba941de4da55d3013" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2) whole-script strict mode&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2) строгий режим всего сценария&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b57044be78a581d58d23dca3de27afea5b94cd7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;3) Assignment to a non-writable global&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;3) Присвоение неписываемым глобальным&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52c10b26b568d358a2c9ff43b75af0bbd5a03c51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Eliminates &lt;code&gt;with&lt;/code&gt; statement :&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Исключает утверждение:&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b530f16cb2cdcb16e6f7fae19819d91e97699f28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Prevents Duplicates :&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Предотвращает дубликаты:&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="006313eaf6ed1ef228bc9756401cadce71d77bf0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Prevents Global Variable Declaration:&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Предотвращает объявление глобальной переменной:&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="44a2e98717969ad732e7c5e16b7d1aae416b7dda" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Disadvantage&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Disadvantage&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ccc562ed44c4f818dcfeca5bfa62cf8a988e432f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Examples of using &quot;use strict&quot;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Примеры использования &amp;laquo;используйте строгий&amp;raquo;:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="32305f493625f6db39745d253e553217cacc1727" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For basic example and for reference go through :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Для базового примера и для справки пройдите:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3d1cedec098132288882de2701536c454db45920" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Modern JavaScript practice should always evoke the &quot;Use Strict&quot;; pragma.&lt;/strong&gt; The only reason that the ECMA Group has made the &quot;Strict&quot; mode optional &lt;em&gt;is to permit less experienced coders access to JavaScript and give then time to adapt to the new and safer coding practices.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;Современная практика JavaScript всегда должна вызывать &amp;laquo;Use Strict&amp;raquo;;&lt;/strong&gt; &lt;strong&gt;Прагма.&lt;/strong&gt; Единственная причина, по которой группа ECMA сделала необязательный режим &amp;laquo;Строгий&amp;raquo;, &lt;em&gt;заключается в том, чтобы предоставить менее опытным кодировщикам доступ к JavaScript и дать время для адаптации к новым и более безопасным методам кодирования.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6733430d33b7d3b1398536a80cb90975b34194ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Strict mode can prevent memory leaks.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Строгий режим может предотвратить утечки памяти.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f944ee70b14fb3dd9fca1ed2e2bdaf3550fc90e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The &quot;use strict&quot; Directive&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Директива об использовании строгих правил&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="606ab5905d1c2d5a8327c6d7ed46db7c3e80503c" translate="yes" xml:space="preserve">
          <source>A word of caution, all you hard-charging programmers:  applying &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; to existing code can be hazardous!  This thing is not some feel-good, happy-face sticker that you can slap on the code to make it 'better'.  With the &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; pragma, the browser will suddenly THROW exceptions in random places that it never threw before just because at that spot you are doing something that default/loose JavaScript happily allows but strict JavaScript abhors!  You may have strictness violations hiding in seldom used calls in your code that will only throw an exception when they do eventually get run - say, in the production environment that your paying customers use!</source>
          <target state="translated">Осторожно, всем вам, программистам, требующим больших усилий: применение &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; к существующему коду может быть опасным! Это не какая-то приятная на ощупь наклейка с счастливым лицом, которую вы можете нанести на код, чтобы сделать его &amp;laquo;лучше&amp;raquo;. Благодаря прагме &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; браузер внезапно выбрасывает исключения в случайных местах, которые он никогда раньше не создавал, просто потому, что в этот момент вы делаете что-то, что по умолчанию / свободный JavaScript разрешает, но строгий JavaScript не терпит! У вас могут быть нарушения строгости, скрывающие редко используемые вызовы в вашем коде, которые будут вызывать исключение, только когда они в конечном счете запускаются - скажем, в производственной среде, которую используют ваши платящие клиенты!</target>
        </trans-unit>
        <trans-unit id="93bdd3af6ffad7ab4f106dd14cd1a4e23ee208e6" translate="yes" xml:space="preserve">
          <source>All modern browsers support &quot;use strict&quot; except &lt;em&gt;Internet Explorer 9 and lower&lt;/em&gt;.</source>
          <target state="translated">Все современные браузеры поддерживают &amp;laquo;строгое использование&amp;raquo;, кроме &lt;em&gt;Internet Explorer 9 и ниже&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="2343885cdd0e3c22f513cc0ca57ce37cc20a84a5" translate="yes" xml:space="preserve">
          <source>All parts of a &lt;em&gt;ClassDeclaration&lt;/em&gt; or a &lt;em&gt;ClassExpression&lt;/em&gt; are strict mode    code.</source>
          <target state="translated">Все части &lt;em&gt;ClassDeclaration&lt;/em&gt; или &lt;em&gt;ClassExpression&lt;/em&gt; являются строгим кодом режима.</target>
        </trans-unit>
        <trans-unit id="289ffdbd1f800570bced2d458ea2e61545122c4a" translate="yes" xml:space="preserve">
          <source>Also in strict mode, things run faster, some warnings or silent warnings throw fatal errors, it's better to always use it to make a neater code.</source>
          <target state="translated">Также в строгом режиме вещи работают быстрее,некоторые предупреждения или молчаливые предупреждения бросают фатальные ошибки,лучше всегда использовать его,чтобы сделать более аккуратный код.</target>
        </trans-unit>
        <trans-unit id="da06e553d0eb67ac4244ee6f5298f173e41be07e" translate="yes" xml:space="preserve">
          <source>Also note you can apply &quot;strict mode&quot; to the whole file... Or you can use it only for a specific function &lt;em&gt;(still quoting from John Resig's article)&lt;/em&gt;:</source>
          <target state="translated">Также обратите внимание, что вы можете применить &amp;laquo;строгий режим&amp;raquo; ко всему файлу ... Или вы можете использовать его только для определенной функции &lt;em&gt;(все еще цитируя статью Джона Резига)&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="d73300c7892262287c245360c5af86d15a6a13f4" translate="yes" xml:space="preserve">
          <source>Also when a function is invoked with &lt;code&gt;call()&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt; in strict mode, then &lt;code&gt;this&lt;/code&gt; is exactly the value of the first argument of the &lt;code&gt;call()&lt;/code&gt;or &lt;code&gt;apply()&lt;/code&gt; invocation. (In normal mode &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; are replaced by the global &lt;code&gt;Object&lt;/code&gt; and values, which are not objects, are cast into objects.)</source>
          <target state="translated">Также, когда функция вызывается с помощью &lt;code&gt;call()&lt;/code&gt; или &lt;code&gt;apply&lt;/code&gt; в строгом режиме, тогда &lt;code&gt;this&lt;/code&gt; в точности значение первого аргумента &lt;code&gt;call()&lt;/code&gt; или &lt;code&gt;apply()&lt;/code&gt; . (В обычном режиме &lt;code&gt;null&lt;/code&gt; и &lt;code&gt;undefined&lt;/code&gt; заменяются глобальными &lt;code&gt;Object&lt;/code&gt; а значения, которые не являются объектами, преобразуются в объекты.)</target>
        </trans-unit>
        <trans-unit id="b93fcc8b812303345005a85b6a1b344c558d79a2" translate="yes" xml:space="preserve">
          <source>Also, as listed above, strict mode stops you from doing certain things.</source>
          <target state="translated">Кроме того,как указано выше,строгий режим останавливает вас от выполнения определенных действий.</target>
        </trans-unit>
        <trans-unit id="f29a859de34d8206276e4fbe86c78577ef463680" translate="yes" xml:space="preserve">
          <source>And:</source>
          <target state="translated">And:</target>
        </trans-unit>
        <trans-unit id="e2abd0d44e964816aa501cf23404b343505b9d60" translate="yes" xml:space="preserve">
          <source>Another scenario is that, say, the variable is declared in a child function. In that case, the compiler checks the validity of that variable in the outer scope, i.e., the parent function. Only then it will check in the global space and create a variable for us there.
That means additional checks need to be done. This will affect the performance of the application.</source>
          <target state="translated">Другой сценарий заключается в том,что,скажем,переменная объявлена в дочерней функции.В этом случае компилятор проверяет валидность этой переменной во внешней области видимости,т.е.в родительской функции.Только тогда он проверит в глобальном пространстве и создаст там переменную для нас.Это означает,что необходимо провести дополнительные проверки.Это повлияет на производительность приложения.</target>
        </trans-unit>
        <trans-unit id="0ce5379811a96887a1d3f16ab89d89d7711a7375" translate="yes" xml:space="preserve">
          <source>Apparently, at the initial stage there will be errors we have never encountered before. To get the full benefit, we need to do proper testing after switching to strict mode to make sure we have caught everything. Definitely we don&amp;rsquo;t just throw &lt;code&gt;use strict&lt;/code&gt; in our code and assume there are no errors. So the churn is that it&amp;rsquo;s time to start using this incredibly useful language feature to write better code.</source>
          <target state="translated">По-видимому, на начальном этапе будут ошибки, с которыми мы никогда не сталкивались. Чтобы получить максимальную выгоду, мы должны провести надлежащее тестирование после перехода в строгий режим, чтобы убедиться, что мы все поймали. Определенно, мы не просто &lt;code&gt;use strict&lt;/code&gt; в нашем коде значение strict и предполагаем, что ошибок нет. Таким образом, проблема в том, что пришло время начать использовать эту невероятно полезную языковую функцию для написания лучшего кода.</target>
        </trans-unit>
        <trans-unit id="23c13738c7207b9f6d81bccd86fb3f5f24fbc321" translate="yes" xml:space="preserve">
          <source>As an example, in normal JavaScript, mistyping a variable name creates
  a new global variable. In strict mode, this will throw an error,
  making it impossible to accidentally create a global variable.</source>
          <target state="translated">Например,в обычном JavaScript неправильное написание имени переменной создает новую глобальную переменную.В строгом режиме это приведет к ошибке,что сделает невозможным случайное создание глобальной переменной.</target>
        </trans-unit>
        <trans-unit id="2c40cd067423f60a47c31129f8f11cc9df0347a6" translate="yes" xml:space="preserve">
          <source>Attempts to delete undeletable properties will throw (&lt;code&gt;delete Object.prototype&lt;/code&gt;)</source>
          <target state="translated">Попытки удалить неотменяемые свойства будут сброшены ( &lt;code&gt;delete Object.prototype&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="9b6df8c6d28fca843574fe8424266b77eefb28e0" translate="yes" xml:space="preserve">
          <source>Believe me. The overhead is negligible compared to poorly designed code. &lt;a href=&quot;http://www.yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/&quot;&gt;Doug Crockford, who has been a senior JavaScript developer for several years, has a very interesting post here&lt;/a&gt;. Personally, I like to return to his site all the time to make sure I don't forget my good practice.</source>
          <target state="translated">Поверь мне. Издержки незначительны по сравнению с плохо разработанным кодом. &lt;a href=&quot;http://www.yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/&quot;&gt;У Дуга Крокфорда, который несколько лет был старшим разработчиком JavaScript, есть очень интересный пост&lt;/a&gt; . Лично мне нравится все время возвращаться на его сайт, чтобы убедиться, что я не забыл свою хорошую практику.</target>
        </trans-unit>
        <trans-unit id="a1ddd7f39e440d9be6e057065c68fec0776269ba" translate="yes" xml:space="preserve">
          <source>Below are the conditions to trigger strict mode in &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-strict-mode-code&quot;&gt;ES6&lt;/a&gt; and &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-strict-mode-code&quot;&gt;ES7&lt;/a&gt;:</source>
          <target state="translated">Ниже приведены условия для запуска строгого режима в &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-strict-mode-code&quot;&gt;ES6&lt;/a&gt; и &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-strict-mode-code&quot;&gt;ES7&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="1928a98ad81a0a2fb8810d43513549e8510e1221" translate="yes" xml:space="preserve">
          <source>Browser compatibility issue: 
The &quot;use&quot; directives are meant to be backwards-compatible. Browsers that do not support them will just see a string literal that isn't referenced further. So, they will pass over it and move on.</source>
          <target state="translated">Проблема совместимости с браузерами:Директивы &quot;использовать&quot; предназначены для обратной совместимости.Браузеры,которые их не поддерживают,просто увидят строковый литерал,на который больше нет ссылок.Таким образом,они пройдут мимо него и пойдут дальше.</target>
        </trans-unit>
        <trans-unit id="0a7fb1b9a52cbb2e017378cb1f11854e33a814a7" translate="yes" xml:space="preserve">
          <source>Browser support for strict mode</source>
          <target state="translated">Поддержка браузером строгого режима</target>
        </trans-unit>
        <trans-unit id="565e25b1be863570aa48357d4e37a3cb9b1014a4" translate="yes" xml:space="preserve">
          <source>Consider this example:</source>
          <target state="translated">Рассмотрим этот пример:</target>
        </trans-unit>
        <trans-unit id="baa2c64bbbada534ed6075e89a55128be8090417" translate="yes" xml:space="preserve">
          <source>Declaring function in blocks</source>
          <target state="translated">Функция объявления в блоках</target>
        </trans-unit>
        <trans-unit id="38996e986e93e308076d27bc04e168330b4535b3" translate="yes" xml:space="preserve">
          <source>Declaring twice the same name for a property name in an object literal</source>
          <target state="translated">Объявление дважды одного и того же имени для имени свойства в объекте буквально</target>
        </trans-unit>
        <trans-unit id="29ac6062865d40d043be78b3c36ccdeeec441106" translate="yes" xml:space="preserve">
          <source>Declaring two function arguments with the same name function</source>
          <target state="translated">Объявление двух аргументов функции с одноименной функцией</target>
        </trans-unit>
        <trans-unit id="5c4d6e11f66aa0a3fdd7d4a8816581873a8955ae" translate="yes" xml:space="preserve">
          <source>Directives are similar to statements, yet different.</source>
          <target state="translated">Директивы аналогичны заявлениям,но отличаются от них.</target>
        </trans-unit>
        <trans-unit id="b8f87df5829d8a168c7e799e5c216af27378f943" translate="yes" xml:space="preserve">
          <source>Disallows global variables. (Catches missing &lt;code&gt;var&lt;/code&gt; declarations and typos in variable names)</source>
          <target state="translated">Запрещает глобальные переменные. (Ловит пропущенные объявления &lt;code&gt;var&lt;/code&gt; и опечатки в именах переменных)</target>
        </trans-unit>
        <trans-unit id="273671e9ae03a9235fcaa5ba2170f1974218b666" translate="yes" xml:space="preserve">
          <source>Do any of the current browsers respond to the &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; string or is it for future use?</source>
          <target state="translated">Отвечает ли какой-либо из текущих браузеров на &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; строка или это для будущего использования?</target>
        </trans-unit>
        <trans-unit id="e4d1d77242da906971270be245172a570ee8b0fb" translate="yes" xml:space="preserve">
          <source>Doing some searching, I realized that some people add &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; into their JavaScript code. Once I added the statement, the error stopped appearing. Unfortunately, Google did not reveal much of the history behind this string statement. Certainly it must have something to do with how the JavaScript is interpreted by the browser, but I have no idea what the effect would be.</source>
          <target state="translated">Сделав некоторые поиски, я понял, что некоторые люди добавляют &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; в их код JavaScript. Как только я добавил заявление, ошибка перестала появляться. К сожалению, Google не раскрыл большую часть истории этого строкового утверждения. Конечно, это как-то связано с тем, как браузер интерпретирует JavaScript, но я понятия не имею, каков будет эффект.</target>
        </trans-unit>
        <trans-unit id="48af85fc915d01a4202f28354202609ebabc9352" translate="yes" xml:space="preserve">
          <source>ECMAScript 5 'Strict mode' support in browsers. What does this mean?</source>
          <target state="translated">Поддержка ECMAScript 5 &quot;Строгий режим&quot; в браузерах.Что это значит?</target>
        </trans-unit>
        <trans-unit id="9fc854e7ec3ef2a462edaa98d116548946d2673f" translate="yes" xml:space="preserve">
          <source>ECMAScript 5 adds a list of reserved words. If you use them as variables or arguments, strict mode will throw an error. The reserved words are:</source>
          <target state="translated">ECMAScript 5 добавляет список зарезервированных слов.Если вы используете их в качестве переменных или аргументов,то строгий режим приведет к ошибке.Зарезервированные слова:</target>
        </trans-unit>
        <trans-unit id="ebcaa1421d2e09e7ea9eec47fe05b48861d7705e" translate="yes" xml:space="preserve">
          <source>Eliminates this coercion</source>
          <target state="translated">Исключает это принуждение</target>
        </trans-unit>
        <trans-unit id="ed326f039ef104d9ba966135c56dac8bf600657a" translate="yes" xml:space="preserve">
          <source>Eliminates with</source>
          <target state="translated">Устраняется с</target>
        </trans-unit>
        <trans-unit id="0c26b81d89bbb54118dbce8cd05504fa17f8b5c2" translate="yes" xml:space="preserve">
          <source>Errors for immutables</source>
          <target state="translated">Ошибки для неизменяемых</target>
        </trans-unit>
        <trans-unit id="efa60700d7b2ed517f9d3d0229490278c5d94c97" translate="yes" xml:space="preserve">
          <source>Et cetera</source>
          <target state="translated">ит cetera</target>
        </trans-unit>
        <trans-unit id="e5356a0a78fcc2f6a59293d5076e50a82279173b" translate="yes" xml:space="preserve">
          <source>Eval code is strict mode code if it begins with a Directive Prologue    that contains a Use Strict Directive or if the call to eval is a direct eval (see 12.3.4.1) that is contained in strict mode code.</source>
          <target state="translated">Код оценки-это код строгого режима,если он начинается с директивы Prologue,содержащей строгую директиву Use Strict Directive,или если обращение к eval является прямым eval (см.12.3.4.1),который содержится в строгом режиме.</target>
        </trans-unit>
        <trans-unit id="89ce572ad2c6a69c00995dd23c773545b3d69731" translate="yes" xml:space="preserve">
          <source>Everything in the &lt;em&gt;lexical scope&lt;/em&gt; of function &lt;code&gt;doSomething&lt;/code&gt; will be interpreted in strict mode. The word &lt;em&gt;lexical scope&lt;/em&gt; is important here. For example, if your &lt;em&gt;strict&lt;/em&gt; code calls a function of a library that is &lt;em&gt;not strict&lt;/em&gt;, only your code is executed in strict mode, and not the called function. See &lt;a href=&quot;https://stackoverflow.com/a/6039163/1461424&quot;&gt;this answer&lt;/a&gt; for a better explanation.</source>
          <target state="translated">Все в &lt;em&gt;лексической области&lt;/em&gt; функции &lt;code&gt;doSomething&lt;/code&gt; будет интерпретироваться в строгом режиме. Слово &lt;em&gt;лексическая сфера&lt;/em&gt; важна здесь. Например, если ваш &lt;em&gt;строгий&lt;/em&gt; код вызывает функцию библиотеки, которая &lt;em&gt;не&lt;/em&gt; является &lt;em&gt;строгой&lt;/em&gt; , в строгом режиме выполняется только ваш код, а не вызываемая функция. Смотрите &lt;a href=&quot;https://stackoverflow.com/a/6039163/1461424&quot;&gt;этот ответ&lt;/a&gt; для лучшего объяснения.</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Расширить фрагмент</target>
        </trans-unit>
        <trans-unit id="4daa46b47ce88ea7b35fb3d45a4029cb54de2f47" translate="yes" xml:space="preserve">
          <source>Few important things which I have learned after using &lt;code&gt;use strict&lt;/code&gt; :</source>
          <target state="translated">Немного важных вещей, которые я узнал после &lt;code&gt;use strict&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b80e966415fec4b14584eef46091cc1f5fed8c7a" translate="yes" xml:space="preserve">
          <source>For a non-exhaustive list of specialties in strict mode, see &lt;a href=&quot;https://stackoverflow.com/a/27114400/1461424&quot;&gt;this answer&lt;/a&gt;.</source>
          <target state="translated">Неисчерпывающий список специальностей в строгом режиме см. В &lt;a href=&quot;https://stackoverflow.com/a/27114400/1461424&quot;&gt;этом ответе&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">Например,</target>
        </trans-unit>
        <trans-unit id="59a44288386a492ebd014862dd175b15ca71076a" translate="yes" xml:space="preserve">
          <source>Forbids binding or assignment of the names &lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt; in any form</source>
          <target state="translated">Запрещает привязку или присвоение имен &lt;code&gt;eval&lt;/code&gt; и &lt;code&gt;arguments&lt;/code&gt; в любой форме</target>
        </trans-unit>
        <trans-unit id="85882ed43f947d20ab023a241c16a0839507bff1" translate="yes" xml:space="preserve">
          <source>Forbids deleting plain names (&lt;code&gt;delete x;&lt;/code&gt;)</source>
          <target state="translated">Запрещает удаление простых имен ( &lt;code&gt;delete x;&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="932069b68ebf7d6e48537be78e32212e3699abcd" translate="yes" xml:space="preserve">
          <source>Forbids octal syntax (&lt;code&gt;var x = 023;&lt;/code&gt; some devs assume wrongly that a preceding zero does nothing to change the number.)</source>
          <target state="translated">Запрещает восьмеричный синтаксис ( &lt;code&gt;var x = 023;&lt;/code&gt; некоторые разработчики ошибочно предполагают, что предыдущий ноль не меняет число.)</target>
        </trans-unit>
        <trans-unit id="3799c98240f4cdb7b40c5e3fdcb7c5e4f2f10c8b" translate="yes" xml:space="preserve">
          <source>Forbids the &lt;code&gt;with&lt;/code&gt; keyword</source>
          <target state="translated">Запрещает &lt;code&gt;with&lt;/code&gt; ключевым словом</target>
        </trans-unit>
        <trans-unit id="b458948cb359c5a3bdb7d06c0c0102f9e79964a1" translate="yes" xml:space="preserve">
          <source>Function code is strict mode code if the associated &lt;em&gt;FunctionDeclaration, FunctionExpression, GeneratorDeclaration, GeneratorExpression, MethodDefinition, or ArrowFunction&lt;/em&gt; is contained in strict mode code or if the code that produces the value of the function&amp;rsquo;s [[ECMAScriptCode]] internal slot begins with a Directive Prologue that contains a Use Strict Directive.</source>
          <target state="translated">Код функции является кодом строгого режима, если связанный код &lt;em&gt;FunctionDeclaration, FunctionExpression, GeneratorDeclaration, GeneratorExpression, MethodDefinition или ArrowFunction&lt;/em&gt; содержится в коде строгого режима или если код, который создает значение внутреннего слота функции [[ECMAScriptCode]], начинается с директивного пролога который содержит директиву об использовании строго.</target>
        </trans-unit>
        <trans-unit id="3c282a4f93e31f632be83929715796e01490e87f" translate="yes" xml:space="preserve">
          <source>Function code that is supplied as the arguments to the built-in    Function and Generator constructors is strict mode code if the last argument is a String that when processed is a &lt;em&gt;FunctionBody&lt;/em&gt; that begins with a Directive Prologue that contains a Use Strict Directive.</source>
          <target state="translated">Код функции, который предоставляется в качестве аргументов для встроенных конструкторов Function и Generator, является кодом строгого режима, если последний аргумент является строкой, которая при обработке является &lt;em&gt;FunctionBody,&lt;/em&gt; которая начинается с пролога директивы, содержащей директиву Use Strict.</target>
        </trans-unit>
        <trans-unit id="1847e9a8ccc9abd72f714eab1618108a4c8cbe08" translate="yes" xml:space="preserve">
          <source>Function parameter names must be unique (&lt;code&gt;function sum (x, x) {...}&lt;/code&gt;)</source>
          <target state="translated">Имена параметров функции должны быть уникальными ( &lt;code&gt;function sum (x, x) {...}&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="bafd4b54282745a2bed1442852b73f4b3189a77a" translate="yes" xml:space="preserve">
          <source>Further Reading</source>
          <target state="translated">Дальнейшее чтение</target>
        </trans-unit>
        <trans-unit id="e311ed625506e39cf4918abdd75a8aaa56e4dfc8" translate="yes" xml:space="preserve">
          <source>Global Leakage</source>
          <target state="translated">Глобальная утечка</target>
        </trans-unit>
        <trans-unit id="eead7b84869b7d6893ff5ea59fd12d29fc73671a" translate="yes" xml:space="preserve">
          <source>Global code is strict mode code if it begins with a Directive    Prologue that contains a Use Strict Directive (see 14.1.1).</source>
          <target state="translated">Глобальный код-это строгий код режима,если он начинается с директивы Prologue,которая содержит строгую директиву по использованию (см.14.1.1).</target>
        </trans-unit>
        <trans-unit id="6304fe8539e56d461068a240f624db35fe5dca0a" translate="yes" xml:space="preserve">
          <source>Here, the compiler throws the reference error. In strict mode, the compiler does not allow us to use the variable without declaring it. So memory leaks can be prevented. In addition, we can write more optimized code.</source>
          <target state="translated">Здесь компилятор выбрасывает ошибку ссылки.В строгом режиме компилятор не позволяет использовать переменную без ее объявления.Таким образом,можно предотвратить утечку памяти.Кроме того,мы можем написать более оптимизированный код.</target>
        </trans-unit>
        <trans-unit id="78d2172dcc5510adbb4b052a53b0f1eaf23d08d5" translate="yes" xml:space="preserve">
          <source>Historically, JavaScript has been confused about how functions
  are scoped. Sometimes they seem to be statically scoped, but some
  features make them behave like they are dynamically scoped. This is
  confusing, making programs difficult to read and understand.
  Misunderstanding causes bugs. It also is a problem for performance.
  Static scoping would permit variable binding to happen at compile
  time, but the requirement for dynamic scope means the binding must be
  deferred to runtime, which comes with a significant performance
  penalty.</source>
          <target state="translated">Исторически сложилось так,что JavaScript был сбит с толку тем,как выполняются функции.Иногда кажется,что они статически скопированы,но некоторые особенности заставляют их вести себя так,как будто они динамически скопированы.Это сбивает с толку,делая программы сложными для чтения и понимания.Непонимание приводит к ошибкам.Это также является проблемой для производительности.Статическая область видимости позволила бы выполнить привязку переменных во время компиляции,но требование динамической области видимости означает,что привязка должна быть отложена до времени выполнения,что влечет за собой значительное снижение производительности.</target>
        </trans-unit>
        <trans-unit id="ff46ea9bef3c6d32c8a1ad7bb317595dd80cf361" translate="yes" xml:space="preserve">
          <source>How do I use strict mode?</source>
          <target state="translated">Как использовать строгий режим?</target>
        </trans-unit>
        <trans-unit id="cc9be850e0a7084a9595e60ae16f023125baaa52" translate="yes" xml:space="preserve">
          <source>I found a &lt;a href=&quot;http://yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/&quot;&gt;nice article&lt;/a&gt; describing several things that are prohibited in strict mode (note that this is not an exclusive list):</source>
          <target state="translated">Я нашел &lt;a href=&quot;http://yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/&quot;&gt;хорошую статью,&lt;/a&gt; описывающую несколько вещей, которые запрещены в строгом режиме (обратите внимание, что это не эксклюзивный список):</target>
        </trans-unit>
        <trans-unit id="dc8952723c45fe0a5695d3b38a7da82ec0f08130" translate="yes" xml:space="preserve">
          <source>I strongly recommend every developer to start using strict mode now. There are enough browsers supporting it that strict mode will legitimately help save us from errors we didn&amp;rsquo;t even know were in your code.</source>
          <target state="translated">Я настоятельно рекомендую каждому разработчику начать использовать строгий режим сейчас. Существует достаточно браузеров, поддерживающих его, поэтому строгий режим на законных основаниях поможет нам уберечь нас от ошибок, о которых мы даже не подозревали в вашем коде.</target>
        </trans-unit>
        <trans-unit id="469b8c44f76024a66385d6b7d25b2e82c43551eb" translate="yes" xml:space="preserve">
          <source>I think even though it is a deadly caged animal, &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; can be good stuff, but you have to do it right.  The best time to go strict is when your project is greenfield and you are starting from scratch. Configure &lt;code&gt;JSHint/JSLint&lt;/code&gt; with all the warnings and options cranked up as tight as your team can stomach, get a good build/test/assert system du jour rigged like &lt;code&gt;Grunt+Karma+Chai&lt;/code&gt;, and only THEN start marking all your new modules as &lt;code&gt;&quot;use strict&quot;&lt;/code&gt;.  Be prepared to cure lots of niggly errors and warnings.  Make sure everyone understands the gravity by configuring the build to FAIL if &lt;code&gt;JSHint/JSLint&lt;/code&gt; produces any violations.</source>
          <target state="translated">Я думаю, что даже если это смертельно опасное животное, &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; может быть хорошим делом, но вы должны делать это правильно. Лучшее время для строгой оценки - это когда ваш проект находится в стадии разработки, и вы начинаете с нуля. Сконфигурируйте &lt;code&gt;JSHint/JSLint&lt;/code&gt; так,чтобы все предупреждения и опции были развернуты настолько жестко, насколько ваша команда может переварить, получить хорошую систему сборки / тестирования / утверждения во время фальсификации, как &lt;code&gt;Grunt+Karma+Chai&lt;/code&gt; , и только ТОГДА начните отмечать все ваши новые модули как &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; . Будьте готовы вылечить множество ошибок и предупреждений. Убедитесь, что все понимают серьезность, настроив сборку на FAIL, если &lt;code&gt;JSHint/JSLint&lt;/code&gt; выдает какие-либо нарушения.</target>
        </trans-unit>
        <trans-unit id="fe9be0949ff68bb7e46ceee0fc5d7b1234fe99fe" translate="yes" xml:space="preserve">
          <source>I would like to offer a somewhat more founded answer complementing the other answers. I was hoping to edit the most popular answer, but failed. I tried to make it as comprehensive and complete as I could.</source>
          <target state="translated">Я хотел бы предложить несколько более обоснованный ответ,дополняющий другие ответы.Я надеялся отредактировать самый популярный ответ,но не смог.Я попытался сделать его как можно более полным и полным.</target>
        </trans-unit>
        <trans-unit id="412701d63b5068562cc4090f3741aedcbe4b4488" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; is used, the code should be written by following a strict set of rules, hence decreasing the chances of errors and ambiguities.</source>
          <target state="translated">Если &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; , код должен быть написан с соблюдением строгого набора правил, что снижает вероятность ошибок и неясностей.</target>
        </trans-unit>
        <trans-unit id="becf61a07fb9b6bce75ee86403b6a44cc4230a2d" translate="yes" xml:space="preserve">
          <source>If a developer used a library that was in strict mode, but the developer was used to working in normal mode, they might call some actions on the library that wouldn&amp;rsquo;t work as expected.</source>
          <target state="translated">Если разработчик использовал библиотеку, которая была в строгом режиме, но разработчик привык работать в обычном режиме, они могли бы вызвать некоторые действия с библиотекой, которые не работали бы должным образом.</target>
        </trans-unit>
        <trans-unit id="73b348a017ce42f08ddfcc1a55aa16726529e7db" translate="yes" xml:space="preserve">
          <source>If people are worried about using &lt;code&gt;use strict&lt;/code&gt; it might be worth checking out this article:</source>
          <target state="translated">Если люди обеспокоены &lt;code&gt;use strict&lt;/code&gt; возможно, стоит проверить эту статью:</target>
        </trans-unit>
        <trans-unit id="fa6ab3ff8e0221431d8c26a934a3e66ae5341150" translate="yes" xml:space="preserve">
          <source>If you are going to take the plunge, it is a good idea to apply &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; alongside comprehensive unit tests and a strictly configured JSHint build task that will give you some confidence that there is no dark corner of your module that will blow up horribly just because you've turned on Strict Mode.  Or, hey, here's another option:  just don't add &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; to any of your legacy code, it's probably safer that way, honestly.  &lt;strong&gt;DEFINITELY DO NOT&lt;/strong&gt; add &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; to any modules you do not own or maintain, like third party modules.</source>
          <target state="translated">Если вы собираетесь сделать решающий шаг, рекомендуется применить &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; наряду с комплексными модульными тестами и строго настроенной задачей сборки JSHint, которая даст вам уверенность в том, что в вашем модуле нет темного угла, который взорвется ужасно только потому, что вы включили строгий режим. Или, эй, вот еще один вариант: просто не добавляйте &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; ни к какому унаследованному коду, это, честно говоря, возможно, безопаснее. &lt;strong&gt;Определенно НЕ&lt;/strong&gt; добавляйте &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; к модулям, которыми вы не владеете или не обслуживаете, например, к сторонним модулям.</target>
        </trans-unit>
        <trans-unit id="bf2b000cc3982bb988fd19b404d2df442c39ee61" translate="yes" xml:space="preserve">
          <source>If you use a browser released in the last year or so then it most likely supports JavaScript Strict mode. Only older browsers around before ECMAScript 5 became the current standard don't support it.</source>
          <target state="translated">Если вы используете браузер,выпущенный в прошлом году или около того,то он,скорее всего,поддерживает режим JavaScript Strict.Только старые браузеры,существовавшие до того,как ECMAScript 5 стал текущим стандартом,его не поддерживают.</target>
        </trans-unit>
        <trans-unit id="a61d4fd4d403e4d13959975f3c5f54da73790ed8" translate="yes" xml:space="preserve">
          <source>Implied Global Variables</source>
          <target state="translated">Введенные глобальные переменные</target>
        </trans-unit>
        <trans-unit id="d3431d0f279fa8fa3e8a6d6d9667d24dcf95f4a3" translate="yes" xml:space="preserve">
          <source>In C, an extremely unfortunate representation of octalness was
  selected: Leading zero. So in C, &lt;code&gt;0100&lt;/code&gt; means 64, not 100, and &lt;code&gt;08&lt;/code&gt; is an
  error, not 8. Even more unfortunately, this anachronism has been
  copied into nearly all modern languages, including JavaScript, where
  it is only used to create errors. It has no other purpose. So in
  strict mode, octal forms are no longer allowed.</source>
          <target state="translated">В C было выбрано крайне неудачное представление восьмеричности: ведущий ноль. Таким образом, в C &lt;code&gt;0100&lt;/code&gt; означает 64, а не 100, а &lt;code&gt;08&lt;/code&gt; - это ошибка, а не 8. Даже к сожалению, этот анахронизм был скопирован почти на все современные языки, включая JavaScript, где он используется только для создания ошибок. У него нет другой цели. Так что в строгом режиме восьмеричные формы больше не разрешены.</target>
        </trans-unit>
        <trans-unit id="16b4064635890ddd67afa5ee74230310465108e6" translate="yes" xml:space="preserve">
          <source>In my &lt;em&gt;existing&lt;/em&gt; JavaScript code: &lt;strong&gt;Probably not!&lt;/strong&gt; If your existing JavaScript code has statements that are prohibited in strict-mode, the application will simply break. If you want strict mode, you should be prepared to debug and correct your existing code. This is why &lt;em&gt;using &lt;code&gt;'use strict';&lt;/code&gt; does not suddenly make your code better&lt;/em&gt;.</source>
          <target state="translated">В моем &lt;em&gt;существующем&lt;/em&gt; коде JavaScript: &lt;strong&gt;вероятно, нет!&lt;/strong&gt; Если в вашем существующем коде JavaScript есть операторы, которые запрещены в строгом режиме, приложение просто сломается. Если вы хотите строгий режим, вы должны быть готовы к отладке и исправлению существующего кода. Вот почему &lt;em&gt;использование &lt;code&gt;'use strict';&lt;/code&gt; &lt;/em&gt; &lt;em&gt;не делает ваш код лучше&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="0c29f3552537c30fb2098c4a96f0030e9e96ee78" translate="yes" xml:space="preserve">
          <source>In my &lt;em&gt;new&lt;/em&gt; JavaScript application: &lt;strong&gt;Absolutely!&lt;/strong&gt; Strict mode can be used as a whistleblower when you are doing something stupid with your code.</source>
          <target state="translated">В моем &lt;em&gt;новом&lt;/em&gt; приложении JavaScript: &lt;strong&gt;Абсолютно!&lt;/strong&gt; Строгий режим можно использовать как информатора, когда вы делаете что-то глупое с вашим кодом.</target>
        </trans-unit>
        <trans-unit id="3634f14a41df1f551fd64c581da9a12e76201cd6" translate="yes" xml:space="preserve">
          <source>In normal JavaScript, a developer will not receive any error feedback
  assigning values to non-writable properties.</source>
          <target state="translated">В обычном JavaScript разработчик не получит обратной связи об ошибках,присваивая значения не записываемым свойствам.</target>
        </trans-unit>
        <trans-unit id="d1c4997af91ea1824f16708d431766bae6358c7a" translate="yes" xml:space="preserve">
          <source>In short will make your code less error prone and in turn will make you write good code.</source>
          <target state="translated">Короче говоря,это сделает ваш код менее склонным к ошибкам и,в свою очередь,заставит вас писать хороший код.</target>
        </trans-unit>
        <trans-unit id="d1a158933baae4e76b4d77171e82fba2ab4d99d9" translate="yes" xml:space="preserve">
          <source>In strict mode all variables have to be declared: if you assign a value to an identifier that has not been declared as variable, function, function parameter, catch-clause parameter or property of the global &lt;code&gt;Object&lt;/code&gt;, then you will get a &lt;code&gt;ReferenceError&lt;/code&gt;. In normal mode the identifier is implicitly declared as a global variable (as a property of the global &lt;code&gt;Object&lt;/code&gt;)</source>
          <target state="translated">В строгом режиме все переменные должны быть объявлены: если вы присваиваете значение идентификатору, который не был объявлен как переменная, функция, параметр функции, параметр catch-clause или свойство глобального &lt;code&gt;Object&lt;/code&gt; , тогда вы получите &lt;code&gt;ReferenceError&lt;/code&gt; . В обычном режиме идентификатор неявно объявляется как глобальная переменная (как свойство глобального &lt;code&gt;Object&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="f9069656fdcbb8041857c4d722a72e7658151a0c" translate="yes" xml:space="preserve">
          <source>In strict mode are more restrictions on the possibilities to examine the call stack. &lt;code&gt;arguments.caller&lt;/code&gt; and &lt;code&gt;arguments.callee&lt;/code&gt; cause a &lt;code&gt;TypeError&lt;/code&gt; in a function in strict mode. Furthermore, some caller- and arguments properties of functions in strict mode cause a &lt;code&gt;TypeError&lt;/code&gt; when you try to read them.</source>
          <target state="translated">В строгом режиме больше ограничений на возможности изучения стека вызовов. &lt;code&gt;arguments.caller&lt;/code&gt; и &lt;code&gt;arguments.callee&lt;/code&gt; вызывают функцию &lt;code&gt;TypeError&lt;/code&gt; в функции в строгом режиме. Кроме того, некоторые свойства вызывающего и аргумента функций в строгом режиме вызывают &lt;code&gt;TypeError&lt;/code&gt; когда вы пытаетесь их прочитать.</target>
        </trans-unit>
        <trans-unit id="b5c0423fd33ef61899aaaab9c15cc303390184f6" translate="yes" xml:space="preserve">
          <source>In strict mode it is considered a syntactical error when a function declaration has multiple parameters with the same name. (In normal mode there is no error.)</source>
          <target state="translated">В строгом режиме это считается синтаксической ошибкой,когда объявление функции имеет несколько параметров с одним и тем же именем.(В нормальном режиме ошибки нет).</target>
        </trans-unit>
        <trans-unit id="ad8a374a0ecffbb86ab61cd3fbd81734ca7e9123" translate="yes" xml:space="preserve">
          <source>In strict mode it is considered a syntactical error when you try to define several properties with the same name for an object literal. (In normal mode there is no error.)</source>
          <target state="translated">В строгом режиме это считается синтаксической ошибкой,когда вы пытаетесь определить несколько свойств с одним и тем же именем для буквального объекта.(В обычном режиме ошибки нет).</target>
        </trans-unit>
        <trans-unit id="6e88e83d9825a17cda0546c6144bf263c3be4fd7" translate="yes" xml:space="preserve">
          <source>In strict mode octal literals are not allowed (these are literals that start with &lt;code&gt;0x&lt;/code&gt;. (In normal mode some implementations do allow octal literals.)</source>
          <target state="translated">В строгом режиме восьмеричные литералы не допускаются (это литералы, начинающиеся с &lt;code&gt;0x&lt;/code&gt; . (В нормальном режиме некоторые реализации допускают восьмеричные литералы.)</target>
        </trans-unit>
        <trans-unit id="ada7b6efb898cb90db8476a67881c7168d01d3c2" translate="yes" xml:space="preserve">
          <source>In strict mode the arguments-object of a function contains a static copy of the values, which are passed to that function. In normal mode the arguments-object has a somewhat &quot;magical&quot; behaviour: The elements of the array and the named function parameters reference both the same value.</source>
          <target state="translated">В строгом режиме объект-аргумент функции содержит статическую копию значений,которые передаются в эту функцию.В нормальном режиме объект-аргументы имеет несколько &quot;магическое&quot; поведение:Элементы массива и параметры именованной функции ссылаются на одно и то же значение.</target>
        </trans-unit>
        <trans-unit id="7045fbdd229530fd0f1b40aa6038b589b411e771" translate="yes" xml:space="preserve">
          <source>In strict mode the identifiers &lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt; are treated like keywords. You cannot change their value, cannot assign a value to them, and you cannot use them as names for variables, functions, function parameters or identifiers of a catch block.</source>
          <target state="translated">В строгом режиме идентификаторы &lt;code&gt;eval&lt;/code&gt; и &lt;code&gt;arguments&lt;/code&gt; обрабатываются как ключевые слова. Вы не можете изменить их значение, не можете присвоить им значение и не можете использовать их в качестве имен для переменных, функций, параметров функций или идентификаторов блока catch.</target>
        </trans-unit>
        <trans-unit id="84f9e027f80dc82cfbcc02dc7ceec363aaaa0369" translate="yes" xml:space="preserve">
          <source>In strict mode the keyword &lt;code&gt;this&lt;/code&gt; has the value &lt;code&gt;undefined&lt;/code&gt; in functions that were invoked as functions (not as methods). (In normal mode &lt;code&gt;this&lt;/code&gt; always points to the global &lt;code&gt;Object&lt;/code&gt;). This difference can be used to test if an implementation supports the strict mode:</source>
          <target state="translated">В строгом режиме ключевое слово &lt;code&gt;this&lt;/code&gt; имеет значение &lt;code&gt;undefined&lt;/code&gt; в функциях, которые вызывались как функции (а не как методы). (В обычном режиме &lt;code&gt;this&lt;/code&gt; всегда указывает на глобальный &lt;code&gt;Object&lt;/code&gt; ). Это различие можно использовать для проверки, поддерживает ли реализация строгий режим:</target>
        </trans-unit>
        <trans-unit id="590bf1e232e9ab23ec1128befcc7fba6b47df466" translate="yes" xml:space="preserve">
          <source>In strict mode you will get a &lt;code&gt;SyntaxError&lt;/code&gt; when the &lt;code&gt;delete&lt;/code&gt; operator is followed by a non qualified identifier (a variable, function or function parameter). In normal mode the &lt;code&gt;delete&lt;/code&gt; expression would do nothing and is evaluated to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">В строгом режиме вы получите &lt;code&gt;SyntaxError&lt;/code&gt; , когда за оператором &lt;code&gt;delete&lt;/code&gt; следует неквалифицированный идентификатор (переменная, функция или параметр функции). В обычном режиме выражение &lt;code&gt;delete&lt;/code&gt; ничего не делает и оценивается как &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="85d415079a470edeb131eb3614bacfeeedb08d6e" translate="yes" xml:space="preserve">
          <source>In strict mode you will get a &lt;code&gt;TypeError&lt;/code&gt; when you try to delete a non configurable property. (In normal mode the attempt simply fails and the &lt;code&gt;delete&lt;/code&gt; expression is evaluated to &lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">В строгом режиме вы получите &lt;code&gt;TypeError&lt;/code&gt; при попытке удалить не настраиваемое свойство. (В обычном режиме попытка просто терпит неудачу, и выражение &lt;code&gt;delete&lt;/code&gt; оценивается как &lt;code&gt;false&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="b36659c0c4c3212e959b1c3409c8e84af48a58ca" translate="yes" xml:space="preserve">
          <source>In strict mode you will get a &lt;code&gt;TypeError&lt;/code&gt;, when you try to assign to readonly properties or to define new properties for a non extensible object. (In normal mode both simply fail without error message.)</source>
          <target state="translated">В строгом режиме вы получите &lt;code&gt;TypeError&lt;/code&gt; , когда вы попытаетесь назначить свойства только для чтения или определить новые свойства для нерасширяемого объекта. (В обычном режиме оба просто не работают без сообщения об ошибке.)</target>
        </trans-unit>
        <trans-unit id="779a188a15eeeb75cd33dabaef5f5607b5e7df04" translate="yes" xml:space="preserve">
          <source>In strict mode, any assignment to a non-writable property, a
  getter-only property, a non-existing property, a non-existing
  variable, or a non-existing object, will throw an error.</source>
          <target state="translated">В строгом режиме любое присвоение не записываемому свойству,свойству только для получения,несуществующему свойству,несуществующей переменной или несуществующему объекту приведет к ошибке.</target>
        </trans-unit>
        <trans-unit id="34660b8b97e8c589b1780bcb0a3ad7df23ae6ebe" translate="yes" xml:space="preserve">
          <source>In strict mode, duplicate keys in a function literal will produce a
  syntax error. A function can&amp;rsquo;t have two parameters with the same name.
  A function can&amp;rsquo;t have a variable with the same name as one of its
  parameters. A function can&amp;rsquo;t &lt;code&gt;delete&lt;/code&gt; its own variables. An attempt to
  &lt;code&gt;delete&lt;/code&gt; a non-configurable property now throws an exception. Primitive
  values are not implicitly wrapped.</source>
          <target state="translated">В строгом режиме дубликаты ключей в функциональном литерале вызовут синтаксическую ошибку. Функция не может иметь два параметра с одинаковым именем. Функция не может иметь переменную с тем же именем, что и один из ее параметров. Функция не может &lt;code&gt;delete&lt;/code&gt; свои собственные переменные. Попытка &lt;code&gt;delete&lt;/code&gt; неконфигурируемое свойство теперь вызывает исключение. Примитивные значения не подразумеваются.</target>
        </trans-unit>
        <trans-unit id="1277d69296a283f503d1a6c94d74f75f1d3e36bd" translate="yes" xml:space="preserve">
          <source>In strict mode, when passing code to &lt;code&gt;eval()&lt;/code&gt;, you cannot declare or define variables or functions in the scope of the caller (as you can do it in normal mode). Instead, a new scope is created for &lt;code&gt;eval()&lt;/code&gt; and the variables and functions are within that scope. That scope is destroyed after &lt;code&gt;eval()&lt;/code&gt; finishes execution.</source>
          <target state="translated">В строгом режиме при передаче кода в &lt;code&gt;eval()&lt;/code&gt; вы не можете объявлять или определять переменные или функции в области действия вызывающей стороны (как вы можете сделать это в обычном режиме). Вместо этого для &lt;code&gt;eval()&lt;/code&gt; создается новая область действия, и переменные и функции находятся в этой области. Эта область уничтожается после того, как &lt;code&gt;eval()&lt;/code&gt; завершает выполнение.</target>
        </trans-unit>
        <trans-unit id="3b9445116c4c7387170dcadef8c31c50c662cba8" translate="yes" xml:space="preserve">
          <source>In their obsession to line up the numeric literals, the developer has inadvertently initialized variable &lt;code&gt;b&lt;/code&gt; with an octal literal. Non-strict mode will interpret this as a numeric literal with value &lt;code&gt;24&lt;/code&gt; (in base 10). However, strict mode will throw an error.</source>
          <target state="translated">Стремясь выстроить числовые литералы, разработчик непреднамеренно инициализировал переменную &lt;code&gt;b&lt;/code&gt; восьмеричным литералом. Нестрогий режим интерпретирует это как числовой литерал со значением &lt;code&gt;24&lt;/code&gt; (в базе 10). Однако строгий режим выдаст ошибку.</target>
        </trans-unit>
        <trans-unit id="9831e3ee257b8570017d5e3cbd952bf7d9110f05" translate="yes" xml:space="preserve">
          <source>In this function, we are using a variable called &lt;code&gt;name&lt;/code&gt; inside the function. Internally, the compiler will first check if there is any variable declared with that particular name in that particular function scope. Since the compiler understood that there is no such variable, it will check in the outer scope. In our case, it is the global scope. Again, the compiler understood that there is also no variable declared in the global space with that name, so it creates such a variable for us in the global space. Conceptually, this variable will be created in the global scope and will be available in the entire application.</source>
          <target state="translated">В этой функции мы используем переменную с именем &lt;code&gt;name&lt;/code&gt; внутри функции. Внутренне компилятор сначала проверит, существует ли какая-либо переменная, объявленная с этим конкретным именем в этой конкретной области действия функции. Поскольку компилятор понял, что такой переменной нет, он проверит внешнюю область видимости. В нашем случае это глобальный охват. Опять же, компилятор понял, что в глобальном пространстве с таким именем также не объявлена ​​переменная, поэтому он создает такую ​​переменную для нас в глобальном пространстве. Концептуально эта переменная будет создана в глобальной области и будет доступна во всем приложении.</target>
        </trans-unit>
        <trans-unit id="29d176e51afc8cfe92995728f708273a3dba6e2b" translate="yes" xml:space="preserve">
          <source>Including &lt;code&gt;use strict&lt;/code&gt; in the beginning of your all sensitive JavaScript files from this point is a small way to be a better JavaScript programmer and avoid random variables becoming global and things change silently.</source>
          <target state="translated">Включение &lt;code&gt;use strict&lt;/code&gt; в начале всех ваших чувствительных файлов JavaScript с этой точки зрения - это небольшой способ стать лучшим программистом JavaScript и избежать случайных переменных, становящихся глобальными, и все меняется молча.</target>
        </trans-unit>
        <trans-unit id="025fb56c42e573032fb397fd3868bcc2c6bb5ce7" translate="yes" xml:space="preserve">
          <source>Insert a &lt;code&gt;'use strict';&lt;/code&gt; statement on top of your script:</source>
          <target state="translated">Вставьте &lt;code&gt;'use strict';&lt;/code&gt; утверждение в верхней части вашего сценария:</target>
        </trans-unit>
        <trans-unit id="9c8d780490a36100dba6e751d2b2cef05a32cfe4" translate="yes" xml:space="preserve">
          <source>Inside &lt;a href=&quot;https://caniuse.com/#feat=es6-module&quot;&gt;native ECMAScript modules&lt;/a&gt; (with &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; statements) and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;ES6 classes&lt;/a&gt;, strict mode is always enabled and cannot be disabled.</source>
          <target state="translated">Внутри &lt;a href=&quot;https://caniuse.com/#feat=es6-module&quot;&gt;собственных модулей ECMAScript&lt;/a&gt; (с операторами &lt;code&gt;import&lt;/code&gt; и &lt;code&gt;export&lt;/code&gt; ) и &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;классов ES6&lt;/a&gt; строгий режим всегда включен и не может быть отключен.</target>
        </trans-unit>
        <trans-unit id="7e171a04a4eeaf5a9849e77b87c64e070643b7ba" translate="yes" xml:space="preserve">
          <source>It catches some common coding bloopers, throwing exceptions.</source>
          <target state="translated">Он ловит обычные кодирующие ляпы,бросая исключения.</target>
        </trans-unit>
        <trans-unit id="9dcb0c3ef0d34afe87dadacc330eb172ee25f066" translate="yes" xml:space="preserve">
          <source>It disables features that are confusing or poorly thought out.</source>
          <target state="translated">Он отключает запутанные или плохо продуманные функции.</target>
        </trans-unit>
        <trans-unit id="49b8baaa6a095c3eb48ab5966d9e83454f6ec304" translate="yes" xml:space="preserve">
          <source>It is not a statement, but a literal expression, ignored by earlier
versions of JavaScript.</source>
          <target state="translated">Это не утверждение,а буквальное выражение,игнорируемое более ранними версиями JavaScript.</target>
        </trans-unit>
        <trans-unit id="f332558e8f07c24532551cb466729913fd5cd0e9" translate="yes" xml:space="preserve">
          <source>It prevents, or throws errors, when relatively &quot;unsafe&quot; actions are taken (such as gaining access to the global object).</source>
          <target state="translated">Она предотвращает или бросает ошибки,когда предпринимаются относительно &quot;небезопасные&quot; действия (такие как получение доступа к глобальному объекту).</target>
        </trans-unit>
        <trans-unit id="8cba967f49d817c496f0e2267da26d8c35639e1d" translate="yes" xml:space="preserve">
          <source>It talks about browser support, but more importantly how to deal with it safely:</source>
          <target state="translated">В нем говорится о поддержке браузеров,но,что более важно,о том,как безопасно с этим справиться:</target>
        </trans-unit>
        <trans-unit id="a7db968114d988709a73f4b2145447f7be94164f" translate="yes" xml:space="preserve">
          <source>It's a new feature of ECMAScript 5. John Resig wrote up &lt;a href=&quot;http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/&quot;&gt;a nice summary&lt;/a&gt; of it.</source>
          <target state="translated">Это новая функция ECMAScript 5. Джон Резиг написал &lt;a href=&quot;http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/&quot;&gt;хорошее резюме&lt;/a&gt; этого.</target>
        </trans-unit>
        <trans-unit id="e32f416964e370d5e5ee36f3cd35416da4dbe41b" translate="yes" xml:space="preserve">
          <source>It's just a string you put in your JavaScript files (either at the top of your file or inside of a function) that looks like this:</source>
          <target state="translated">Это просто строка,которую вы помещаете в ваши JavaScript-файлы (либо в верхней части файла,либо внутри функции),которая выглядит так:</target>
        </trans-unit>
        <trans-unit id="817c8652ad34e116e5811fa2935033d7b0db3d3f" translate="yes" xml:space="preserve">
          <source>JavaScript &amp;ldquo;strict&amp;rdquo; mode was introduced in ECMAScript 5.</source>
          <target state="translated">&amp;laquo;Строгий&amp;raquo; режим JavaScript был введен в ECMAScript 5.</target>
        </trans-unit>
        <trans-unit id="2b940df5bba00944ecb478eabe69d76ab720b74a" translate="yes" xml:space="preserve">
          <source>JavaScript has always had read-only properties, but you
  could not create them yourself until ES5&amp;rsquo;s &lt;code&gt;Object.createProperty&lt;/code&gt;
  function exposed that capability. If you attempted to assign a value
  to a read-only property, it would fail silently. The assignment would
  not change the property&amp;rsquo;s value, but your program would proceed as
  though it had. This is an integrity hazard that can cause programs to
  go into an inconsistent state. In strict mode, attempting to change a
  read-only property will throw an exception.</source>
          <target state="translated">JavaScript всегда имел свойства только для чтения, но вы не можете создавать их самостоятельно, пока функция &lt;code&gt;Object.createProperty&lt;/code&gt; предоставит эту возможность. Если вы попытаетесь присвоить значение свойству только для чтения, оно молча завершится неудачей. Назначение не изменит значение свойства, но ваша программа будет работать так, как если бы это было. Это угроза целостности, которая может привести к тому, что программы перейдут в несовместимое состояние. В строгом режиме попытка изменить свойство только для чтения вызовет исключение.</target>
        </trans-unit>
        <trans-unit id="ddb6e2a5aa8c17476d0875f1a887b8d5ae8365ff" translate="yes" xml:space="preserve">
          <source>JavaScript has implied global variables. If
  you do not explicitly declare a variable, a global variable is
  implicitly declared for you. This makes programming easier for
  beginners because they can neglect some of their basic housekeeping
  chores. But it makes the management of larger programs much more
  difficult and it significantly degrades reliability. So in strict
  mode, implied global variables are no longer created. You should
  explicitly declare all of your variables.</source>
          <target state="translated">JavaScript подразумевал глобальные переменные.Если вы явно не объявляете переменную,то для вас неявно объявляется глобальная переменная.Это облегчает программирование новичкам,так как они могут пренебречь некоторыми из своих основных домашних обязанностей.Но это значительно усложняет управление более крупными программами и существенно снижает надежность.Поэтому в строгом режиме подразумеваемые глобальные переменные больше не создаются.Вы должны явно объявлять все свои переменные.</target>
        </trans-unit>
        <trans-unit id="e2d7eb3c95183e015ef939a2a91a64f282eb81f9" translate="yes" xml:space="preserve">
          <source>List of features (non-exhaustive)</source>
          <target state="translated">Список характеристик (неисчерпывающий)</target>
        </trans-unit>
        <trans-unit id="9c7b40e6928a432a1ec3f4bfbac791071ab83c89" translate="yes" xml:space="preserve">
          <source>Look at these statements and examples from MDN:</source>
          <target state="translated">Посмотрите на эти утверждения и примеры из MDN:</target>
        </trans-unit>
        <trans-unit id="5469b8b61ffe448f41a3cf81a23966ddb0f980b6" translate="yes" xml:space="preserve">
          <source>Module code is always strict mode code.</source>
          <target state="translated">Код модуля-это всегда строгий код режима.</target>
        </trans-unit>
        <trans-unit id="c5e07b85564bd88aae754a962908532c8c0e4b6d" translate="yes" xml:space="preserve">
          <source>My project was not a greenfield project when I adopted &lt;code&gt;&quot;use strict&quot;&lt;/code&gt;.  As a result, my IDE is full of red marks because I don't have &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; on half my modules, and JSHint complains about that.  It's a reminder to me about what refactoring I should do in the future.  My goal is to be red mark free due to all of my missing &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; statements, but that is years away now.</source>
          <target state="translated">Мой проект не был проектом с нуля, когда я принял &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; . В результате моя среда IDE заполнена красными метками, потому что я не &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; на половине моих модулей, и JSHint жалуется на это. Это напоминание мне о том, что рефакторинг я должен делать в будущем. Моя цель состоит в том, чтобы быть свободным от красной метки из-за всех моих пропущенных заявлений о &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; , но это через много лет.</target>
        </trans-unit>
        <trans-unit id="44085a42d6cb5c69ac3619d4793a1d1371ccfcfa" translate="yes" xml:space="preserve">
          <source>N.B: The &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; directive is only recognized at the beginning of a script or a function.</source>
          <target state="translated">NB. Директива &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; распознается только в начале скрипта или функции.</target>
        </trans-unit>
        <trans-unit id="ae74c50e67b3cccd367e03333a64b86a6bddcf67" translate="yes" xml:space="preserve">
          <source>No duplicates</source>
          <target state="translated">Никаких дубликатов</target>
        </trans-unit>
        <trans-unit id="10b58a0a8940ea2e58dbffa20044c150b681b579" translate="yes" xml:space="preserve">
          <source>Noisy Failure</source>
          <target state="translated">Шумный провал</target>
        </trans-unit>
        <trans-unit id="5de14d9134cba90071dacb30ddfcb3e147447382" translate="yes" xml:space="preserve">
          <source>Non-strict mode:</source>
          <target state="translated">Неограниченный режим:</target>
        </trans-unit>
        <trans-unit id="8d36800f9bf0d59a3c2d2c533771cdf6c89406de" translate="yes" xml:space="preserve">
          <source>Normally, JavaScript does not follow strict rules, hence increasing chances of errors. After using &lt;code&gt;&quot;use strict&quot;&lt;/code&gt;, the JavaScript code should follow strict set of rules as in other programming languages such as use of terminators, declaration before initialization, etc.</source>
          <target state="translated">Обычно JavaScript не следует строгим правилам, что увеличивает вероятность ошибок. После использования &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; код JavaScript должен следовать строгому набору правил, как и в других языках программирования, таких как использование терминаторов, объявление перед инициализацией и т. Д.</target>
        </trans-unit>
        <trans-unit id="19034d503e754b80c9af82f89e91b77bf8089b78" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;use strict&lt;/code&gt; was introduced in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;EcmaScript 5&lt;/a&gt; and was kept since then.</source>
          <target state="translated">Обратите внимание, что &lt;code&gt;use strict&lt;/code&gt; было введено в &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;EcmaScript 5&lt;/a&gt; и с тех пор сохранилось.</target>
        </trans-unit>
        <trans-unit id="f92b62c5cd55600499e3b2fcbabc790595cffe51" translate="yes" xml:space="preserve">
          <source>Note that everything in the file &lt;code&gt;myscript.js&lt;/code&gt; will be interpreted in strict mode.</source>
          <target state="translated">Обратите внимание, что все в файле &lt;code&gt;myscript.js&lt;/code&gt; будет интерпретироваться в строгом режиме.</target>
        </trans-unit>
        <trans-unit id="0498bcc5326f24110adbf8018626105327647e5c" translate="yes" xml:space="preserve">
          <source>Now let's write the same function in strict mode.</source>
          <target state="translated">Теперь давайте напишем ту же самую функцию в строгом режиме.</target>
        </trans-unit>
        <trans-unit id="7ca0bcad832ba95a89c297b2ceac7cc9fc126660" translate="yes" xml:space="preserve">
          <source>Now,this code creates &lt;code&gt;nameoftree&lt;/code&gt; in global scope which could be accessed using &lt;code&gt;window.nameoftree&lt;/code&gt;. When we implement &lt;code&gt;use strict&lt;/code&gt; the code would throw error.</source>
          <target state="translated">Теперь этот код создает &lt;code&gt;nameoftree&lt;/code&gt; в глобальной области видимости, к которой можно получить доступ с помощью &lt;code&gt;window.nameoftree&lt;/code&gt; . Когда мы реализуем &lt;code&gt;use strict&lt;/code&gt; код выдаст ошибку.</target>
        </trans-unit>
        <trans-unit id="10500e54805775e3d661be35724e87f0b1dbc4c9" translate="yes" xml:space="preserve">
          <source>Octal</source>
          <target state="translated">Octal</target>
        </trans-unit>
        <trans-unit id="fc48827db54649898f715056ea3b1540dc1d9231" translate="yes" xml:space="preserve">
          <source>Octal syntax</source>
          <target state="translated">синтаксис октября</target>
        </trans-unit>
        <trans-unit id="dc4532f060ff3aae00b84dcf89567e87053d969d" translate="yes" xml:space="preserve">
          <source>Of course it also talks about just what a lot of those misfeatures are (were) and how ECMAScript 5 fixes them.</source>
          <target state="translated">Конечно,в нем также говорится о том,что это за ошибки и как ECMAScript 5 их исправляет.</target>
        </trans-unit>
        <trans-unit id="a9c8e2b60591d63bee27d639f4a20c27d766869f" translate="yes" xml:space="preserve">
          <source>One of the benefits of strict code is that tools like &lt;a href=&quot;http://developer.yahoo.com/yui/compressor/&quot;&gt;YUI Compressor&lt;/a&gt;
  can do a better job when processing it.</source>
          <target state="translated">Одним из преимуществ строгого кода является то, что такие инструменты, как &lt;a href=&quot;http://developer.yahoo.com/yui/compressor/&quot;&gt;YUI Compressor,&lt;/a&gt; могут лучше обрабатывать его.</target>
        </trans-unit>
        <trans-unit id="6441d22a368af55c21ee62c9b9e951bc296104eb" translate="yes" xml:space="preserve">
          <source>One of the goals of strict mode is to allow for faster debugging of issues. It helps the developers by throwing exception when certain wrong things occur that can cause silent &amp;amp; strange behaviour of your webpage. The moment we use &lt;code&gt;use strict&lt;/code&gt;, the code will throw out errors which helps developer to fix it in advance.</source>
          <target state="translated">Одна из целей строгого режима - обеспечить более быструю отладку проблем. Это помогает разработчикам, создавая исключение, когда происходят определенные неправильные вещи, которые могут вызвать тихое и странное поведение вашей веб-страницы. В тот момент, когда мы используем &lt;code&gt;use strict&lt;/code&gt; , код выдаст ошибки, которые помогут разработчику заранее исправить это.</target>
        </trans-unit>
        <trans-unit id="a0456e473032cec369aace45ac22933c75e5b022" translate="yes" xml:space="preserve">
          <source>Or, insert a &lt;code&gt;'use strict';&lt;/code&gt; statement on top of your function body:</source>
          <target state="translated">Или вставьте &lt;code&gt;'use strict';&lt;/code&gt; оператор в верхней части тела вашей функции:</target>
        </trans-unit>
        <trans-unit id="5bfc0f97dcb02767913e44123d36722a2485178e" translate="yes" xml:space="preserve">
          <source>People generally think that you shouldn&amp;rsquo;t use those things in the first place, but some developers don&amp;rsquo;t like the constraint and want to use all the features of the language.</source>
          <target state="translated">Люди обычно думают, что вы не должны использовать эти вещи в первую очередь, но некоторым разработчикам не нравятся ограничения, и они хотят использовать все возможности языка.</target>
        </trans-unit>
        <trans-unit id="f73ad56101ddb20a046ef96d3b285d9ee896e394" translate="yes" xml:space="preserve">
          <source>Please check the function below written in non-strict mode:</source>
          <target state="translated">Пожалуйста,проверьте приведенную ниже функцию,написанную в неограниченном режиме:</target>
        </trans-unit>
        <trans-unit id="ea0e96af85e42105da55a87738dffc05d9c4b8aa" translate="yes" xml:space="preserve">
          <source>Please refer to &lt;a href=&quot;http://www.w3schools.com/js/js_strict.asp&quot;&gt;http://www.w3schools.com/js/js_strict.asp&lt;/a&gt; to know more</source>
          <target state="translated">Пожалуйста, обратитесь к &lt;a href=&quot;http://www.w3schools.com/js/js_strict.asp&quot;&gt;http://www.w3schools.com/js/js_strict.asp,&lt;/a&gt; чтобы узнать больше</target>
        </trans-unit>
        <trans-unit id="73834459f6254152ddd4773c32f68818b0dbafff" translate="yes" xml:space="preserve">
          <source>Prevents accidental declaration of global variables.Using &lt;code&gt;&quot;use strict()&quot;&lt;/code&gt; will make sure that variables are declared with &lt;code&gt;var&lt;/code&gt; before use. 
Eg:</source>
          <target state="translated">Предотвращает случайное объявление глобальных переменных. &lt;code&gt;&quot;use strict()&quot;&lt;/code&gt; гарантирует, что переменные объявляются с помощью &lt;code&gt;var&lt;/code&gt; перед использованием. Например:</target>
        </trans-unit>
        <trans-unit id="d19ef64a263f6819272bad8f55d25e26eaca089d" translate="yes" xml:space="preserve">
          <source>Prevents accidental globals</source>
          <target state="translated">Предотвращает случайные шаровые атаки</target>
        </trans-unit>
        <trans-unit id="74d06b24393fc0bc828f7990084cc04f0d92db56" translate="yes" xml:space="preserve">
          <source>Problem at line 1 character 1: Missing &quot;use strict&quot; statement.</source>
          <target state="translated">Проблема в строке 1,символ 1:Пропущено утверждение &quot;использовать строго&quot;.</target>
        </trans-unit>
        <trans-unit id="313048df06e5e26643dc1670c345e8164e9763eb" translate="yes" xml:space="preserve">
          <source>Putting it in your code now shouldn't cause any problems with current browsers as it's just a string. It may cause problems with your code in the future if your code violates the pragma.  For instance, if you currently have &lt;code&gt;foo = &quot;bar&quot;&lt;/code&gt; without defining &lt;code&gt;foo&lt;/code&gt; first, your code will start failing...which is a good thing in my opinion.</source>
          <target state="translated">Размещение этого в вашем коде сейчас не должно вызывать никаких проблем с текущими браузерами, так как это всего лишь строка. Это может вызвать проблемы с вашим кодом в будущем, если ваш код нарушает прагму. Например, если в настоящее время у вас есть &lt;code&gt;foo = &quot;bar&quot;&lt;/code&gt; без определения &lt;code&gt;foo&lt;/code&gt; , ваш код начнет давать сбой ... что, на мой взгляд, является хорошей вещью.</target>
        </trans-unit>
        <trans-unit id="136f357105c51a569118fd5e9a4b2d1dc183c426" translate="yes" xml:space="preserve">
          <source>Recently, I ran some of my JavaScript code through Crockford's &lt;a href=&quot;http://www.jslint.com/&quot;&gt;JSLint&lt;/a&gt;, and it gave the following error:</source>
          <target state="translated">Недавно я выполнил часть своего кода JavaScript через JSLint Крокфорда, и он выдал следующую ошибку:</target>
        </trans-unit>
        <trans-unit id="86a7a25b3cd35a1d2197e94d964ad1f2752ed5ee" translate="yes" xml:space="preserve">
          <source>Requires all property names in an object literal to be unique (&lt;code&gt;var x = {x1: &quot;1&quot;, x1: &quot;2&quot;}&lt;/code&gt;)</source>
          <target state="translated">Требует, чтобы все имена свойств в литерале объекта были уникальными ( &lt;code&gt;var x = {x1: &quot;1&quot;, x1: &quot;2&quot;}&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="b82277b8027feee64c843902b18fa2f0eaf9f6f9" translate="yes" xml:space="preserve">
          <source>Reserved words for future JavaScript versions</source>
          <target state="translated">Зарезервированные слова для будущих версий JavaScript</target>
        </trans-unit>
        <trans-unit id="00fe32fa055c05b65cba3aa264fdbb5e9ec51640" translate="yes" xml:space="preserve">
          <source>Safer eval()</source>
          <target state="translated">Safer eval()</target>
        </trans-unit>
        <trans-unit id="4651a34e4df9619783ad372f905d6d3b84e9d76d" translate="yes" xml:space="preserve">
          <source>Scope</source>
          <target state="translated">Scope</target>
        </trans-unit>
        <trans-unit id="c5ed7ad12df1fb5c64372abffb2e9c638c2000fd" translate="yes" xml:space="preserve">
          <source>Setting a value to an undeclared variable</source>
          <target state="translated">Установка значения незаявленной переменной</target>
        </trans-unit>
        <trans-unit id="158a5623a22ae074fb939328027da4313300684f" translate="yes" xml:space="preserve">
          <source>Silent failing assignments will throw error in strict mode (assigning &lt;code&gt;NaN = 5;&lt;/code&gt;)</source>
          <target state="translated">Тихие неудачные назначения приведут к ошибке в строгом режиме (назначение &lt;code&gt;NaN = 5;&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="a249bbd654c1ea670a1ce21638e02e4758f365f8" translate="yes" xml:space="preserve">
          <source>Small examples to compare:</source>
          <target state="translated">Маленькие примеры для сравнения:</target>
        </trans-unit>
        <trans-unit id="4a4f135a79bb2ffe4e6528781a0caca54f5e9001" translate="yes" xml:space="preserve">
          <source>So what is &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; all about, what does it imply, and is it still relevant?</source>
          <target state="translated">Так что же такое &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; все о том, что это означает, и это все еще актуально?</target>
        </trans-unit>
        <trans-unit id="efdeaaeb5cef631181f2b0b6615ca443336cee21" translate="yes" xml:space="preserve">
          <source>So, I suppose it's a bit like the &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; you can use in Perl &lt;em&gt;(hence the name?)&lt;/em&gt;: it helps you make fewer errors, by detecting more things that could lead to breakages.</source>
          <target state="translated">Итак, я полагаю, это немного похоже на &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; вы можете использовать в Perl &lt;em&gt;(отсюда и название?)&lt;/em&gt; : Оно помогает вам делать меньше ошибок, обнаруживая больше вещей, которые могут привести к поломкам.</target>
        </trans-unit>
        <trans-unit id="ada52d888ccf16d2711b8a6377768a782af5c30e" translate="yes" xml:space="preserve">
          <source>Sources:</source>
          <target state="translated">Sources:</target>
        </trans-unit>
        <trans-unit id="56888f9c90a484f01fdab9bff41f2251fdd72944" translate="yes" xml:space="preserve">
          <source>Strict Mode - JavaScript | MDN</source>
          <target state="translated">Строгий режим-JavaScript</target>
        </trans-unit>
        <trans-unit id="4c97b7a3fcb78ad7a4d70823a936a41e3b32a18f" translate="yes" xml:space="preserve">
          <source>Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a &quot;strict&quot; operating context. This strict context prevents certain actions from being taken and throws more exceptions.</source>
          <target state="translated">Строгий режим-это новая функция в ECMAScript 5,которая позволяет поместить программу или функцию в &quot;строгий&quot; операционный контекст.Этот строгий контекст не позволяет выполнить определенные действия и бросает больше исключений.</target>
        </trans-unit>
        <trans-unit id="0925c525a403588f0be5f281195e7ab1228e41ce" translate="yes" xml:space="preserve">
          <source>Strict mode changes previously accepted &quot;bad syntax&quot; into real errors.</source>
          <target state="translated">Строгий режим превращает ранее принятый &quot;плохой синтаксис&quot; в реальные ошибки.</target>
        </trans-unit>
        <trans-unit id="dfa23d0a0c1ade7fa039058260fbdf2a088763e0" translate="yes" xml:space="preserve">
          <source>Strict mode does not alias properties of the &lt;code&gt;arguments&lt;/code&gt; object with the formal parameters. (i.e. in &lt;code&gt;function sum (a,b) { return arguments[0] + b;}&lt;/code&gt; This works because &lt;code&gt;arguments[0]&lt;/code&gt; is bound to &lt;code&gt;a&lt;/code&gt; and so on. )</source>
          <target state="translated">Строгий режим не связывает свойства объекта &lt;code&gt;arguments&lt;/code&gt; с формальными параметрами. (т.е. в &lt;code&gt;function sum (a,b) { return arguments[0] + b;}&lt;/code&gt; Это работает, потому что &lt;code&gt;arguments[0]&lt;/code&gt; привязан к &lt;code&gt;a&lt;/code&gt; и т. д.)</target>
        </trans-unit>
        <trans-unit id="1e7b5b22d16bdb8a5476e2e6c1fdc04bffef1ee0" translate="yes" xml:space="preserve">
          <source>Strict mode for functions: Likewise, to invoke strict mode for a
  function, put the exact statement &quot;use strict&quot;; (or 'use strict';) in
  the function's body before any other statements.</source>
          <target state="translated">Строгий режим для функций:Аналогичным образом,чтобы вызвать строгий режим для функции,поставьте точное утверждение &quot;использовать строгий&quot;;(или &quot;использовать строгий&quot;;)в теле функции перед любыми другими утверждениями.</target>
        </trans-unit>
        <trans-unit id="aba1aed4e7b22cf2830dc704dbcbc7728a024ed8" translate="yes" xml:space="preserve">
          <source>Strict mode helps out in a couple ways:</source>
          <target state="translated">Строгий режим помогает парой способов:</target>
        </trans-unit>
        <trans-unit id="a1071c6d144e305f80fc9cb060b9efe833597dc7" translate="yes" xml:space="preserve">
          <source>Strict mode is now &lt;a href=&quot;http://caniuse.com/#use-strict&quot;&gt;supported by all major browsers&lt;/a&gt;.</source>
          <target state="translated">Строгий режим теперь &lt;a href=&quot;http://caniuse.com/#use-strict&quot;&gt;поддерживается всеми основными браузерами&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fecd3bae551b0fe9196f1a9e57dd72fde9f330a3" translate="yes" xml:space="preserve">
          <source>Strict mode makes it easier to write &quot;secure&quot; JavaScript.</source>
          <target state="translated">Строгий режим облегчает написание &quot;безопасного&quot; JavaScript.</target>
        </trans-unit>
        <trans-unit id="ffd44cb0172afba4c6ad8d00101e96f6c2f1ced4" translate="yes" xml:space="preserve">
          <source>Strict mode makes several changes to normal JavaScript semantics:</source>
          <target state="translated">Строгий режим вносит несколько изменений в обычную семантику JavaScript:</target>
        </trans-unit>
        <trans-unit id="42aae285b68e8a7fe6a0256e8acb1b55fb12a44f" translate="yes" xml:space="preserve">
          <source>Strict mode requires that all variable binding be done statically.
  That means that the features that previously required dynamic binding
  must be eliminated or modified. Specifically, the with statement is
  eliminated, and the eval function&amp;rsquo;s ability to tamper with the
  environment of its caller is severely restricted.</source>
          <target state="translated">Строгий режим требует статического связывания всех переменных. Это означает, что функции, которые ранее требовали динамического связывания, должны быть удалены или изменены. В частности, оператор with исключен, а способность функции eval вмешиваться в среду своего вызывающего объекта строго ограничена.</target>
        </trans-unit>
        <trans-unit id="981037f259f5ec994dd978355da84261730db94d" translate="yes" xml:space="preserve">
          <source>Strict mode:</source>
          <target state="translated">Строгий режим:</target>
        </trans-unit>
        <trans-unit id="73600aa2e4bc7bac1a44ca2049803b7ae131c09a" translate="yes" xml:space="preserve">
          <source>The &quot;use strict&quot; directive is new in
  JavaScript 1.8.5 (ECMAScript version 5). It is not a statement, but a
  literal expression, ignored by earlier versions of JavaScript. The
  purpose of &quot;use strict&quot; is to indicate that the code should be
  executed in &quot;strict mode&quot;. With strict mode, you can not, for example,
  use undeclared variables.</source>
          <target state="translated">Директива &quot;use strict&quot; является новой в JavaScript 1.8.5 (ECMAScript версии 5).Это не утверждение,а буквальное выражение,игнорируемое более ранними версиями JavaScript.Цель директивы &quot;use strict&quot;-указать,что код должен выполняться в &quot;строгом режиме&quot;.При использовании строгого режима нельзя,например,использовать необъявленные переменные.</target>
        </trans-unit>
        <trans-unit id="da414cbc8191e02ce23dc8839e8f655afd89e64c" translate="yes" xml:space="preserve">
          <source>The &quot;use strict&quot; directive is new in JavaScript 1.8.5 (ECMAScript
  version 5).</source>
          <target state="translated">Директива &quot;use strict&quot; является новой в JavaScript 1.8.5 (ECMAScript версии 5).</target>
        </trans-unit>
        <trans-unit id="871bf0916612bf268e233d62d36329c75cb6843d" translate="yes" xml:space="preserve">
          <source>The &quot;use strict&quot; directive was new in ECMAScript version 5.</source>
          <target state="translated">Директива &quot;use strict&quot; была новой в ECMAScript версии 5.</target>
        </trans-unit>
        <trans-unit id="bc3dd2b1ab543df882ca1a48ca20880937f9ee29" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;JavaScript strict mode&lt;/a&gt; is a feature in &lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-262.htm&quot;&gt;ECMAScript 5&lt;/a&gt;. You can enable the strict mode by declaring this in the top of your script/function.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;Строгий режим JavaScript&lt;/a&gt; является функцией &lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-262.htm&quot;&gt;ECMAScript 5&lt;/a&gt; . Вы можете включить строгий режим, объявив это в верхней части скрипта / функции.</target>
        </trans-unit>
        <trans-unit id="c3ab9d9f8d23f7bf773bc9224e29ab32c41301a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use strict&lt;/code&gt; directive indicates that the following code (in a script or a function) is strict code.
The code in the highest level of a script (code that is not in a function) is considered strict code when the script contains a &lt;code&gt;use strict&lt;/code&gt; directive.
The content of a function is considered strict code when the function itself is defined in a strict code or when the function contains a &lt;code&gt;use strict&lt;/code&gt; directive.
Code that is passed to an &lt;code&gt;eval()&lt;/code&gt; method is considered strict code when &lt;code&gt;eval()&lt;/code&gt; was called from a strict code or contains the &lt;code&gt;use strict&lt;/code&gt; directive itself.</source>
          <target state="translated">&lt;code&gt;use strict&lt;/code&gt; директива use указывает, что следующий код (в скрипте или функции) является строгим кодом. Код на самом высоком уровне сценария (код, который отсутствует в функции) считается строгим кодом, когда сценарий содержит &lt;code&gt;use strict&lt;/code&gt; директиву use . Содержимое функции считается строгим кодом, если сама функция определена в строгом коде или когда функция содержит &lt;code&gt;use strict&lt;/code&gt; директиву use . Код, который передается методу &lt;code&gt;eval()&lt;/code&gt; считается строгим кодом, когда &lt;code&gt;eval()&lt;/code&gt; вызывается из строгого кода или содержит саму директиву &lt;code&gt;use strict&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e02035bfd1451179fb6fa7438f433460a260f654" translate="yes" xml:space="preserve">
          <source>The arguments pseudo array becomes a little bit more
  array-like in ES5. In strict mode, it loses its &lt;code&gt;callee&lt;/code&gt; and &lt;code&gt;caller&lt;/code&gt;
  properties. This makes it possible to pass your &lt;code&gt;arguments&lt;/code&gt; to untrusted
  code without giving up a lot of confidential context. Also, the
  &lt;code&gt;arguments&lt;/code&gt; property of functions is eliminated.</source>
          <target state="translated">Псевдомассив arguments становится более похожим на массив в ES5. В строгом режиме он теряет свойства &lt;code&gt;callee&lt;/code&gt; и &lt;code&gt;caller&lt;/code&gt; . Это позволяет передавать ваши &lt;code&gt;arguments&lt;/code&gt; в ненадежный код, не отказываясь от большого количества конфиденциального контекста. Также исключено свойство &lt;code&gt;arguments&lt;/code&gt; функции.</target>
        </trans-unit>
        <trans-unit id="a01550b956584e50c573534903412b194d39ea38" translate="yes" xml:space="preserve">
          <source>The main reasons why developers should use &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; are:</source>
          <target state="translated">Основными причинами, по которым разработчики должны использовать &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; являются:</target>
        </trans-unit>
        <trans-unit id="e11cb88feedf1f50b774d7918351ac724492485e" translate="yes" xml:space="preserve">
          <source>The octal (or base 8) representation of numbers was extremely
  useful when doing machine-level programming on machines whose word
  sizes were a multiple of 3. You needed octal when working with the CDC
  6600 mainframe, which had a word size of 60 bits. If you could read
  octal, you could look at a word as 20 digits. Two digits represented
  the op code, and one digit identified one of 8 registers. During the
  slow transition from machine codes to high level languages, it was
  thought to be useful to provide octal forms in programming languages.</source>
          <target state="translated">Восьмеричное (или базовое 8)представление чисел было чрезвычайно полезно при машинном программировании на станках,на которых размер слов кратен 3.При работе с мейнфреймом CDC 6600,на котором размер слов составляет 60 бит,нужен был восьмеричный.Если бы вы умели читать восьмеричные числа,вы могли бы смотреть на слово как на 20-значное.Две цифры представляли собой код операции,а одна цифра идентифицировала один из 8 регистров.Во время медленного перехода от машинных кодов к языкам высокого уровня,считалось полезным предоставлять восьмеричные формы в языках программирования.</target>
        </trans-unit>
        <trans-unit id="1b9d97e5a3c8f84f9eca85dd8d59d37bf769eaf4" translate="yes" xml:space="preserve">
          <source>The purpose of &quot;use strict&quot; is to indicate that the code should be
executed in &quot;strict mode&quot;.</source>
          <target state="translated">Назначение &quot;use strict&quot;-указать,что код должен выполняться в &quot;строгом режиме&quot;.</target>
        </trans-unit>
        <trans-unit id="50e416e7691b94ac73a19329e3d0d84aa7766f77" translate="yes" xml:space="preserve">
          <source>The quotes around the command make sure that the code will still work in older browsers as well (although the things that generate a syntax error in strict mode will generally just cause the script to malfunction in some hard to detect way in those older browsers).</source>
          <target state="translated">Цитаты вокруг команды гарантируют,что код все еще будет работать и в старых браузерах (хотя вещи,которые генерируют синтаксическую ошибку в строгом режиме,как правило,просто приводят к тому,что скрипт будет работать некорректно в тех старых браузерах,которые трудно обнаружить).</target>
        </trans-unit>
        <trans-unit id="fef18bab467b7c8273c3132a626d92c3771e553a" translate="yes" xml:space="preserve">
          <source>The statement &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; instructs the browser to use the Strict mode, which is a reduced and safer feature set of JavaScript.</source>
          <target state="translated">Утверждение &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; инструктирует браузер использовать строгий режим, который представляет собой сокращенный и безопасный набор функций JavaScript.</target>
        </trans-unit>
        <trans-unit id="092a4db52edff1b55719897e8c31aebfe3163802" translate="yes" xml:space="preserve">
          <source>The strict mode of ECMAScript 5 is a restricted subset of the JavaScript language, which eliminates relevant deficits of the language and features more stringent error checking and higher security. The following lists the differences between strict mode and normal mode (of which the first three are particularly important):</source>
          <target state="translated">Строгий режим ECMAScript 5 является ограниченным подмножеством языка JavaScript,который устраняет соответствующие недостатки языка и отличается более строгой проверкой ошибок и повышенной безопасностью.Ниже перечислены различия между строгим режимом и обычным режимом (из которых первые три особенно важны):</target>
        </trans-unit>
        <trans-unit id="35a411c4b982908019ab5ca4beff69a7f8222678" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;&quot;arguments&quot;&lt;/code&gt; cannot be used as a variable:</source>
          <target state="translated">Строка &lt;code&gt;&quot;arguments&quot;&lt;/code&gt; не может использоваться как переменная:</target>
        </trans-unit>
        <trans-unit id="ceeec8e70875ba0392801d9dae48808cf2b43044" translate="yes" xml:space="preserve">
          <source>There are a number of situations that could cause &lt;code&gt;this&lt;/code&gt;
  to be bound to the global object. For example, if you forget to
  provide the &lt;code&gt;new&lt;/code&gt; prefix when calling a constructor function, the
  constructor's &lt;code&gt;this&lt;/code&gt; will be bound unexpectedly to the global object, so
  instead of initializing a new object, it will instead be silently
  tampering with global variables. In these situations, strict mode will
  instead bind &lt;code&gt;this&lt;/code&gt; to &lt;code&gt;undefined&lt;/code&gt;, which will cause the constructor to
  throw an exception instead, allowing the error to be detected much
  sooner.</source>
          <target state="translated">Существует ряд ситуаций, в которых &lt;code&gt;this&lt;/code&gt; может быть связано с глобальным объектом. Например, если вы забудете предоставить &lt;code&gt;new&lt;/code&gt; префикс при вызове функции конструктора, конструктор &lt;code&gt;this&lt;/code&gt; будет неожиданно привязан к глобальному объекту, поэтому вместо инициализации нового объекта он будет молча вмешиваться в глобальные переменные. В этих ситуациях строгий режим вместо этого связывает &lt;code&gt;this&lt;/code&gt; с &lt;code&gt;undefined&lt;/code&gt; , что заставит конструктор вместо этого выдать исключение, что позволит обнаружить ошибку намного быстрее.</target>
        </trans-unit>
        <trans-unit id="2b08b8743bda54c101d135ee7a32c07df9257bf6" translate="yes" xml:space="preserve">
          <source>There are few more but I need to gain more knowledge on that.</source>
          <target state="translated">Их немного,но мне нужно больше узнать об этом.</target>
        </trans-unit>
        <trans-unit id="048399442f3a5673fb36ae4b92a85ca20458e560" translate="yes" xml:space="preserve">
          <source>There's a good talk by some people who were on the ECMAScript committee: &lt;a href=&quot;http://www.youtube.com/watch?v=Kq4FpMe6cRs&quot;&gt;Changes to JavaScript, Part 1: ECMAScript 5&quot;&lt;/a&gt; about how incremental use of the &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; switch allows JavaScript implementers to clean up a lot of the dangerous features of JavaScript without suddenly breaking every website in the world.</source>
          <target state="translated">Некоторые люди, которые были в комитете ECMAScript, рассказали: &amp;laquo; &lt;a href=&quot;http://www.youtube.com/watch?v=Kq4FpMe6cRs&quot;&gt;Изменения в JavaScript, часть 1: ECMAScript 5&amp;raquo;&lt;/a&gt; о том, как постепенное использование переключателя &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; позволяет разработчикам JavaScript очищать многие опасные функции JavaScript без внезапно ломая каждый сайт в мире.</target>
        </trans-unit>
        <trans-unit id="3e37513efc84c83ee98db8c100f7f728f1063cb3" translate="yes" xml:space="preserve">
          <source>This article about Javascript Strict Mode might interest you: &lt;a href=&quot;http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/&quot;&gt;John Resig - ECMAScript 5 Strict Mode, JSON, and More&lt;/a&gt;</source>
          <target state="translated">Эта статья о строгом режиме Javascript может вас заинтересовать: &lt;a href=&quot;http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/&quot;&gt;Джон Резиг - ECMAScript 5 Strict Mode, JSON и другие&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d9da1eab3a2754c07bf853818048cf86ef9a8bc1" translate="yes" xml:space="preserve">
          <source>This is no longer the case in ECMAScript 6 (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1041128&quot;&gt;bug 1041128&lt;/a&gt;).</source>
          <target state="translated">Это больше не относится к ECMAScript 6 ( &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1041128&quot;&gt;ошибка 1041128&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="dd413d88ab98b532770fd5f2fc9d3f7ef62c23ce" translate="yes" xml:space="preserve">
          <source>Those that prefer not to use rulers to do their lines straight usually end up in those pages asking for others to debug their code.</source>
          <target state="translated">Те,кто предпочитает не использовать линейки,чтобы делать свои строки прямо,обычно заканчивают на этих страницах с просьбой к другим отладить их код.</target>
        </trans-unit>
        <trans-unit id="a7fd2f79041e08e0c8925669b484de4ed27bacfa" translate="yes" xml:space="preserve">
          <source>To quote some interesting parts:</source>
          <target state="translated">Цитируя некоторые интересные части:</target>
        </trans-unit>
        <trans-unit id="18959bdb468277df6861dc45265096e4e03b934c" translate="yes" xml:space="preserve">
          <source>To read more about it you can refer &lt;a href=&quot;http://www.w3schools.com/js/js_strict.asp&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Чтобы узнать больше об этом вы можете обратиться &lt;a href=&quot;http://www.w3schools.com/js/js_strict.asp&quot;&gt;сюда&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="42a3bb278c71efefd64c79603bbd7e4b085a3e13" translate="yes" xml:space="preserve">
          <source>Transitioning to strict mode</source>
          <target state="translated">Переход на строгий режим</target>
        </trans-unit>
        <trans-unit id="a036c9d3bcde8686731beb5eb26de106ef7784ed" translate="yes" xml:space="preserve">
          <source>Uncaught ReferenceError: nameoftree is not defined</source>
          <target state="translated">Uncaught ReferenceError:nameoftree не определено.</target>
        </trans-unit>
        <trans-unit id="4c156a916f8a6f9574955750b2a1451326982d3f" translate="yes" xml:space="preserve">
          <source>Uncaught SyntaxError: Duplicate data property in object literal not
  allowed in strict mode</source>
          <target state="translated">Не пойманный синтаксисОшибка:Дублирование свойства данных в объекте буквально не разрешено в строгом режиме.</target>
        </trans-unit>
        <trans-unit id="7aaa011136ee898447ada0c1377720eb7677dcbb" translate="yes" xml:space="preserve">
          <source>Use Strict is used to show common and repeated errors so that it is handled differently , and changes the way java script runs , such changes are :</source>
          <target state="translated">Use Strict используется,чтобы показать общие и повторяющиеся ошибки,так что он обрабатывается по-разному,и меняет способ выполнения java-скрипта,такие изменения являются :</target>
        </trans-unit>
        <trans-unit id="e6a2b8c9600130299cd64c46f5748d992d100d46" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;'use strict';&lt;/code&gt; does not suddenly make your code better.</source>
          <target state="translated">Использование &lt;code&gt;'use strict';&lt;/code&gt; не делает ваш код лучше.</target>
        </trans-unit>
        <trans-unit id="d4d6e1571c87c5715f5b1379bfd5792f9c941414" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;delete&lt;/code&gt; on a variable name &lt;code&gt;delete myVariable;&lt;/code&gt;</source>
          <target state="translated">Используя &lt;code&gt;delete&lt;/code&gt; для имени переменной &lt;code&gt;delete myVariable;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="21daefad12ef11f96031aa365048e01337e377ba" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;eval&lt;/code&gt; or &lt;code&gt;arguments&lt;/code&gt; as variable or function argument name</source>
          <target state="translated">Использование &lt;code&gt;eval&lt;/code&gt; или &lt;code&gt;arguments&lt;/code&gt; в качестве имени аргумента переменной или функции</target>
        </trans-unit>
        <trans-unit id="e4d9563de300edd23fd7c3850db04036a25d79ee" translate="yes" xml:space="preserve">
          <source>We will get the following error.</source>
          <target state="translated">Мы получим следующую ошибку.</target>
        </trans-unit>
        <trans-unit id="4dbef12467da7f5817c1305f1e396998d11eafa3" translate="yes" xml:space="preserve">
          <source>What does “use strict” do in JavaScript, and what is the reasoning behind it</source>
          <target state="translated">Что делает &quot;использовать строго&quot; в JavaScript,и в чем причина этого.</target>
        </trans-unit>
        <trans-unit id="4c18ac01741b6780a43048c77a24b5e2c0540bae" translate="yes" xml:space="preserve">
          <source>What things are prohibited in strict mode?</source>
          <target state="translated">Какие вещи запрещены в строгом режиме?</target>
        </trans-unit>
        <trans-unit id="a48ab950c2dd3afad682dd72baa410b63bc6e0a1" translate="yes" xml:space="preserve">
          <source>When a JavaScript engine sees this &lt;em&gt;directive&lt;/em&gt;, it will start to interpret the code in a special mode. In this mode, errors are thrown up when certain coding practices that could end up being potential bugs are detected (which is the reasoning behind the strict mode).</source>
          <target state="translated">Когда механизм JavaScript видит эту &lt;em&gt;директиву&lt;/em&gt; , он начинает интерпретировать код в специальном режиме. В этом режиме возникают ошибки, когда обнаруживаются определенные методы кодирования, которые могут оказаться потенциальными ошибками (что является причиной строгого режима).</target>
        </trans-unit>
        <trans-unit id="c300272a821d8e78995c84df72b42286f65185e1" translate="yes" xml:space="preserve">
          <source>When adding &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt;, the following cases will throw a &lt;strong&gt;SyntaxError&lt;/strong&gt; before the script is executing:</source>
          <target state="translated">При добавлении &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; в следующих случаях будет &lt;strong&gt;выдано SyntaxError&lt;/strong&gt; перед выполнением сценария:</target>
        </trans-unit>
        <trans-unit id="1027ddb2af687a000e1f43ee83be4b6c15b8e572" translate="yes" xml:space="preserve">
          <source>When we have duplicate property, it throws an exception</source>
          <target state="translated">Когда у нас есть дублирующее свойство,оно выбрасывает исключение.</target>
        </trans-unit>
        <trans-unit id="9786db102e0c8271479dae448d90367999358652" translate="yes" xml:space="preserve">
          <source>Where should I use &lt;code&gt;'use strict';&lt;/code&gt;?</source>
          <target state="translated">Где я должен использовать &lt;code&gt;'use strict';&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="f5501718d21e44942c25ce38f65fbb4d2ea2d9e5" translate="yes" xml:space="preserve">
          <source>Which might be helpful if you have to mix old and new code ;-)</source>
          <target state="translated">Что может быть полезно,если нужно смешивать старый и новый код ;-)</target>
        </trans-unit>
        <trans-unit id="184e2f1b60c365bdbd0ab8e43df510d15bccc6c0" translate="yes" xml:space="preserve">
          <source>Why Strict Mode?</source>
          <target state="translated">Почему &quot;Строгий режим&quot;?</target>
        </trans-unit>
        <trans-unit id="2e23b3df3a20138c20d2c8e491ee2570ddf50bfb" translate="yes" xml:space="preserve">
          <source>Will restrict uses of keywords as variables. Trying to use them will throw errors.</source>
          <target state="translated">Ограничит использование ключевых слов в качестве переменных.Попытка их использования приведет к ошибкам.</target>
        </trans-unit>
        <trans-unit id="a71ea5c1e3ada42c1b0d204b7398947c063f4a74" translate="yes" xml:space="preserve">
          <source>With strict mode, you can not, for example, use undeclared variables.</source>
          <target state="translated">В строгом режиме нельзя,например,использовать необъявленные переменные.</target>
        </trans-unit>
        <trans-unit id="161190f164917a24616c94f2e53483ba35c86211" translate="yes" xml:space="preserve">
          <source>Worse, since the developer is in normal mode, they don&amp;rsquo;t have the advantages of extra errors being thrown, so the error might fail silently.</source>
          <target state="translated">Хуже того, поскольку разработчик находится в обычном режиме, он не имеет преимуществ, связанных с дополнительными ошибками, поэтому ошибка может молча завершиться сбоем.</target>
        </trans-unit>
        <trans-unit id="20bd93de5e3a15e93016dccea88cc98f2d1f95ed" translate="yes" xml:space="preserve">
          <source>Writing &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; at the very top of your JS file turns on strict
syntax checking. It does the following tasks for us:</source>
          <target state="translated">Написание &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; в самом верху вашего JS-файла включается строгая проверка синтаксиса. Он выполняет следующие задачи для нас:</target>
        </trans-unit>
        <trans-unit id="290c3178ac3f676c45b24cb8690955d39c8b4d14" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;read more on MDN&lt;/a&gt;.</source>
          <target state="translated">Вы можете &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;прочитать больше на MDN&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4f7487ef619ee058617d220fbdcb1ff71b70d7e8" translate="yes" xml:space="preserve">
          <source>You can refer to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;MDN documentation&lt;/a&gt; for more information.</source>
          <target state="translated">Вы можете обратиться к &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;документации MDN&lt;/a&gt; для получения дополнительной информации.</target>
        </trans-unit>
        <trans-unit id="5b84b03d930a95b32ff7fff301afe23652a22474" translate="yes" xml:space="preserve">
          <source>You cannot use the &lt;code&gt;with&lt;/code&gt;-statement in strict mode.</source>
          <target state="translated">Вы не можете использовать &lt;code&gt;with&lt;/code&gt; -statement в строгом режиме.</target>
        </trans-unit>
        <trans-unit id="dd707966b9d71560d8d3c73a2fd4a8e76a284eb2" translate="yes" xml:space="preserve">
          <source>[Ref: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;Strict mode&lt;/a&gt;, &lt;em&gt;Mozilla Developer Network&lt;/em&gt;]</source>
          <target state="translated">[Ссылка: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;строгий режим&lt;/a&gt; , &lt;em&gt;Сеть разработчиков Mozilla&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="5640892492b3a140a15198eb7f173e54896999fc" translate="yes" xml:space="preserve">
          <source>eliminates some JavaScript silent errors by changing them
to throw errors.</source>
          <target state="translated">Устраняет некоторые молчаливые ошибки JavaScript,изменяя их на бросание ошибок.</target>
        </trans-unit>
        <trans-unit id="16de3f2d338913f29c8f9f128d32ba48cbb95641" translate="yes" xml:space="preserve">
          <source>fixes mistakes that make it difficult for JavaScript
engines to perform optimizations.</source>
          <target state="translated">исправляет ошибки,затрудняющие работу JavaScript-движков по оптимизации.</target>
        </trans-unit>
        <trans-unit id="0364811af40b95fa72a60403bfe331e1a6c30201" translate="yes" xml:space="preserve">
          <source>for more information vistit &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode&quot;&gt;Strict Mode- Javascript&lt;/a&gt;</source>
          <target state="translated">для получения дополнительной информации vistit &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode&quot;&gt;строгий режим - Javascript&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db0b8b9b231300c663125ba290de7d8ad030cebe" translate="yes" xml:space="preserve">
          <source>forbids some unsafe or error-prone language features</source>
          <target state="translated">запрещает некоторые небезопасные или предрасположенные к ошибкам языковые функции</target>
        </trans-unit>
        <trans-unit id="01f927911ed04f070c42384b5acdb1eaa080798c" translate="yes" xml:space="preserve">
          <source>prohibits some syntax likely to be defined in future
versions of ECMAScript.</source>
          <target state="translated">запрещает некоторый синтаксис,который может быть определен в будущих версиях ECMAScript.</target>
        </trans-unit>
        <trans-unit id="fee36c7820652167ca4505a5dcd195808ce9cfe0" translate="yes" xml:space="preserve">
          <source>shows an error if you try to assign to an undeclared variable</source>
          <target state="translated">показывает ошибку при попытке присвоения необъявленной переменной</target>
        </trans-unit>
        <trans-unit id="65b524cf6d7ace1ef4955efb2c2c0f3cea4f4878" translate="yes" xml:space="preserve">
          <source>stops you from overwriting key JS system libraries</source>
          <target state="translated">останавливает вас от перезаписи ключевых JS системных библиотек</target>
        </trans-unit>
        <trans-unit id="118ad7cd18fd1f4ce16961837b121bd93511a087" translate="yes" xml:space="preserve">
          <source>you can also read this &lt;a href=&quot;https://www.nczonline.net/blog/2012/03/13/its-time-to-start-using-javascript-strict-mode/&quot;&gt;article&lt;/a&gt; for the details</source>
          <target state="translated">Вы также можете прочитать эту &lt;a href=&quot;https://www.nczonline.net/blog/2012/03/13/its-time-to-start-using-javascript-strict-mode/&quot;&gt;статью&lt;/a&gt; для деталей</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
