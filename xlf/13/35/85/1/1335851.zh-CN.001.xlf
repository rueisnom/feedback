<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/1335851">
    <body>
      <group id="1335851">
        <trans-unit id="59655149a5150c3ca8c39faa908f2d6163ff8a16" translate="yes" xml:space="preserve">
          <source>&quot;Use Strict&quot;; is an insurance that programmer will not use the loose or the bad properties of JavaScript. It is a guide, just like a ruler will help you make straight lines. &quot;Use Strict&quot; will help you do &quot;Straight coding&quot;.</source>
          <target state="translated">&quot;严格使用&quot;;是程序员不会使用松散或不良属性的JavaScript的保险。它是一个指南,就像尺子会帮你画出直线一样。&quot;Use Strict &quot;会帮助你做 &quot;直线编码&quot;。</target>
        </trans-unit>
        <trans-unit id="3004d681862814bd492c00f298f79de8546a16e3" translate="yes" xml:space="preserve">
          <source>&quot;use strict&quot;; is the ECMA effort to make JavaScript a little bit more robust. It brings in JS an attempt to make it at least a little &quot;strict&quot; (other languages implement strict rules since the 90s). It actually &quot;forces&quot; JavaScript developers to follow some sort of coding best practices.
Still, JavaScript is very fragile. There is no such thing as typed variables, typed methods, etc.
I strongly recommend JavaScript developers to learn a more robust language such as Java or ActionScript3, and implement the same best practices in your JavaScript code, it will work better and be easier to debug.</source>
          <target state="translated">&quot;使用严格&quot;;是ECMA为使JavaScript更健壮一点的努力。它把JS引入了JS,试图使它至少有点 &quot;严格&quot;(其他语言从90年代开始就实现了严格的规则)。它实际上是在 &quot;强迫 &quot;JavaScript开发人员遵循某种编码最佳实践。尽管如此,JavaScript还是非常脆弱。不存在类型化变量、类型化方法等。我强烈建议JavaScript开发人员学习一种更健壮的语言,如Java或ActionScript3,并在你的JavaScript代码中实现同样的最佳实践,它将会更好地工作,更容易调试。</target>
        </trans-unit>
        <trans-unit id="a890ef5e6862668a8f388386b332421857c3174b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://web.archive.org/web/20170707015027/http://cjihrig.com/blog/javascripts-strict-mode-and-why-you-should-use-it/&quot;&gt;JavaScript&amp;rsquo;s Strict Mode and Why You Should Use It&lt;/a&gt; on Colin J. Ihrig's blog (archived version)</source>
          <target state="translated">&lt;a href=&quot;http://web.archive.org/web/20170707015027/http://cjihrig.com/blog/javascripts-strict-mode-and-why-you-should-use-it/&quot;&gt;JavaScript的严格模式以及为什么要&lt;/a&gt;在Colin J. Ihrig的博客上使用它 （存档版本）</target>
        </trans-unit>
        <trans-unit id="d3d3727e7b6567159e7a102fb614c67f67805b58" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.jslint.com/&quot;&gt;JSLint&lt;/a&gt; is a debugger written by Douglas Crockford. Simply paste in your script, and it&amp;rsquo;ll quickly scan for any noticeable issues and errors in your code.</source>
          <target state="translated">&lt;a href=&quot;http://www.jslint.com/&quot;&gt;JSLint&lt;/a&gt;是由Douglas Crockford编写的调试器。 只需粘贴您的脚本，它就会快速扫描代码中任何明显的问题和错误。</target>
        </trans-unit>
        <trans-unit id="78bf625f7b5e03664c59d7ee51dc7af02310b85e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.w3schools.com/js/js_strict.asp&quot;&gt;Quoting from w3schools&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://www.w3schools.com/js/js_strict.asp&quot;&gt;从w3schools报价&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="b5af4e0174180b8a2c7208d7edf82d109f9cd5e9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;Strict mode&lt;/a&gt; on MDN</source>
          <target state="translated">MDN上的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;严格模式&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b5bcc7d75cb8e736baf64db945995c8b9a3a60be" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode&quot;&gt;Transitioning to strict mode&lt;/a&gt; on MDN</source>
          <target state="translated">在MDN上&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode&quot;&gt;转换为严格模式&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6e939affa70685384b45a4a4e094772a28124974" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; a directive introduced in ECMAScript 5.</source>
          <target state="translated">&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 是ECMAScript 5中引入的指令。</target>
        </trans-unit>
        <trans-unit id="643a6e9cb02c410968fee48edd499efb7b160711" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; is widely needed to be used in ECMA5, &lt;strong&gt;in ECMA6 it's part of JavaScript by default&lt;/strong&gt;, so it doesn't need to be added if you're using ES6.</source>
          <target state="translated">ECMA5中广泛需要 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; ， &lt;strong&gt;在ECMA6中，默认情况下&lt;/strong&gt; ，它&lt;strong&gt;是JavaScript的一部分&lt;/strong&gt; ，因此如果您使用ES6，则不需要添加它。</target>
        </trans-unit>
        <trans-unit id="42f94653c815af9a0a66db63daf88a106628f565" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; makes JavaScript code to run in &lt;em&gt;strict mode&lt;/em&gt;, which basically means everything needs to be defined before use. The main reason for using strict mode is to avoid accidental global uses of undefined methods.</source>
          <target state="translated">&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 使JavaScript代码以&lt;em&gt;严格模式&lt;/em&gt;运行，这基本上意味着在使用之前需要定义所有内容。 使用严格模式的主要原因是为了避免意外地全局使用未定义的方法。</target>
        </trans-unit>
        <trans-unit id="b2700ddb133085373ac38f09a3f5d0bf79811178" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arguments.callee&lt;/code&gt; is not supported</source>
          <target state="translated">不支持 &lt;code&gt;arguments.callee&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f8d48d4465392e0aa08ee8ea840aa1b3f23996fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval&lt;/code&gt; in strict mode does not introduce new variables</source>
          <target state="translated">严格模式下的 &lt;code&gt;eval&lt;/code&gt; 不会引入新变量</target>
        </trans-unit>
        <trans-unit id="3ab7533dde427ea5d6492eae8a3125e8afc3cfaa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;implements&lt;/code&gt;, &lt;code&gt;interface&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, and &lt;code&gt;yield&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;implements&lt;/code&gt; ， &lt;code&gt;interface&lt;/code&gt; ， &lt;code&gt;let&lt;/code&gt; ， &lt;code&gt;package&lt;/code&gt; ， &lt;code&gt;private&lt;/code&gt; ， &lt;code&gt;protected&lt;/code&gt; ， &lt;code&gt;public&lt;/code&gt; ， &lt;code&gt;static&lt;/code&gt; 和 &lt;code&gt;yield&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ec53e46b9a64ec466cbf3b9f2ea170c32991ddb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; point to the global object.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 指向全局对象。</target>
        </trans-unit>
        <trans-unit id="ff636551fe7d26c196cc6753f1ecb44215346d16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use strict&lt;/code&gt; also works inside of individual functions. It is always a better practice to include &lt;code&gt;use strict&lt;/code&gt; in your code.</source>
          <target state="translated">&lt;code&gt;use strict&lt;/code&gt; 也可以在单个功能内使用 。 在代码中包括 &lt;code&gt;use strict&lt;/code&gt; 始终是更好的做法。</target>
        </trans-unit>
        <trans-unit id="189bf0e21b07dc936d1f4023bde32e80cf254249" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use strict&lt;/code&gt; can be used only at the beginning of a script or of a function, i.e. it must precede every other (real) statement. It does not have to be the first instruction in a script of function: it can be preceded by other statement expressions that consist of string literals ( and JavaScript implementations can treat them as implementation specific directives). String literals statements, which follow a first real statement (in a script or function) are simple expression statements. Interpreters must not interpret them as directives and they have no effect.</source>
          <target state="translated">&lt;code&gt;use strict&lt;/code&gt; 只能在脚本或函数的开头使用，即必须在其他所有（真实）语句之前。 它不必是函数脚本中的第一条指令：它可以在其他由字符串文字组成的语句表达式之前（并且JavaScript实现可以将它们视为实现特定的指令）。 紧跟在脚本或函数中的第一个实数语句之后的字符串文字语句是简单的表达式语句。 口译员不得将其解释为指令，并且它们无效。</target>
        </trans-unit>
        <trans-unit id="c8a24ea46f8167baca5ea7c30a696dde06bff8b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use strict&lt;/code&gt; does not contain key words: The directive is a simple expression statement, which consists of a special string literal (in single or double quotes). JavaScript engines, that do not implement ECMAScript 5, merely see an expression statement without side effects. It is expected that future versions of ECMAScript standards introduce &lt;code&gt;use&lt;/code&gt; as a real key word; the quotes would thereby become obsolete.</source>
          <target state="translated">&lt;code&gt;use strict&lt;/code&gt; 不包含关键字：指令是一个简单的表达式语句，由特殊的字符串文字（单引号或双引号）组成。 没有实现ECMAScript 5的JavaScript引擎只能看到一个没有副作用的表达式语句。 预计将来的ECMAScript标准版本会引入 &lt;code&gt;use&lt;/code&gt; 作为真正的关键词； 这样一来，报价就会过时。</target>
        </trans-unit>
        <trans-unit id="93d83abef028d4a348358ca66f7d7b8d130ab13f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use strict&lt;/code&gt; is a way to make your code safer, because you can't use dangerous features that can work not as you expect. And, as was written before, it makes code more strict.</source>
          <target state="translated">&lt;code&gt;use strict&lt;/code&gt; 是使代码更安全的一种方法，因为您不能使用无法正常使用的危险功能。 而且，如前所述，它使代码更加严格。</target>
        </trans-unit>
        <trans-unit id="02f9e1a9c89babe3794e548d1c031c3a106b1dc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;with&lt;/code&gt; statements can't be minified using tools like &lt;a href=&quot;http://marijnhaverbeke.nl/uglifyjs&quot;&gt;uglify-js&lt;/a&gt;. They're also &lt;a href=&quot;http://www.2ality.com/2011/06/with-statement.html&quot;&gt;deprecated&lt;/a&gt; and removed from future JavaScript versions.</source>
          <target state="translated">使用&lt;a href=&quot;http://marijnhaverbeke.nl/uglifyjs&quot;&gt;uglify-js之&lt;/a&gt;类的工具无法最小化 &lt;code&gt;with&lt;/code&gt; 语句。 它们也&lt;a href=&quot;http://www.2ality.com/2011/06/with-statement.html&quot;&gt;已弃用，&lt;/a&gt;并从将来的JavaScript版本中删除。</target>
        </trans-unit>
        <trans-unit id="0f478c9cf6e945f9f4d68899a9b247c36f3d43c0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;My two cents:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;我的两分钱：&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b6ab9835d91deb98705b1f3c514957269bbf6e08" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NovoGeek.com - Krishna's weblog&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;NovoGeek.com-克里希纳的博客&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8816eb841c341fc968650270e2dd8daff581dcd3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Paving the way for future ECMAScript versions&lt;/em&gt;, using one of the newly reserved keywords (in prevision for &lt;em&gt;ECMAScript 6&lt;/em&gt;): &lt;code&gt;implements&lt;/code&gt;, &lt;code&gt;interface&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, and &lt;code&gt;yield&lt;/code&gt;.</source>
          <target state="translated">使用新保留的关键字之一（在&lt;em&gt;ECMAScript 6&lt;/em&gt;的&lt;em&gt;预设中&lt;/em&gt; ） &lt;em&gt;为将来的ECMAScript版本铺平道路&lt;/em&gt; ： &lt;code&gt;implements&lt;/code&gt; ， &lt;code&gt;interface&lt;/code&gt; ， &lt;code&gt;let&lt;/code&gt; ， &lt;code&gt;package&lt;/code&gt; ， &lt;code&gt;private&lt;/code&gt; ， &lt;code&gt;protected&lt;/code&gt; ， &lt;code&gt;public&lt;/code&gt; ， &lt;code&gt;static&lt;/code&gt; 和 &lt;code&gt;yield&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="52f29c68d91653f44d8533c880c63c94e3e9dcf9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&quot;use strict&quot;; Defines that JavaScript code should be executed in
   &quot;strict mode&quot;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;ldquo;使用严格&amp;rdquo;；&lt;/strong&gt; &lt;strong&gt;定义应在&amp;ldquo;严格模式&amp;rdquo;下执行JavaScript代码。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="09cd3a0fa55f56bac5040bfc18287c80994ace0f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1) strict mode in functions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1）严格模式下的功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e089472c5ade8f427379cbfba941de4da55d3013" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2) whole-script strict mode&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2）全脚本严格模式&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b57044be78a581d58d23dca3de27afea5b94cd7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;3) Assignment to a non-writable global&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;3）分配给不可写的全局&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52c10b26b568d358a2c9ff43b75af0bbd5a03c51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Eliminates &lt;code&gt;with&lt;/code&gt; statement :&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt; &lt;code&gt;with&lt;/code&gt; 语句消除：&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b530f16cb2cdcb16e6f7fae19819d91e97699f28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Prevents Duplicates :&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;防止重复：&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="006313eaf6ed1ef228bc9756401cadce71d77bf0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Prevents Global Variable Declaration:&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;防止全局变量声明：&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="44a2e98717969ad732e7c5e16b7d1aae416b7dda" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Disadvantage&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Disadvantage&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ccc562ed44c4f818dcfeca5bfa62cf8a988e432f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Examples of using &quot;use strict&quot;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;使用&amp;ldquo; use strict&amp;rdquo;的示例：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="32305f493625f6db39745d253e553217cacc1727" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For basic example and for reference go through :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;有关基本示例和参考，请通过：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3d1cedec098132288882de2701536c454db45920" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Modern JavaScript practice should always evoke the &quot;Use Strict&quot;; pragma.&lt;/strong&gt; The only reason that the ECMA Group has made the &quot;Strict&quot; mode optional &lt;em&gt;is to permit less experienced coders access to JavaScript and give then time to adapt to the new and safer coding practices.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;现代JavaScript实践应始终唤起&amp;ldquo;使用严格&amp;rdquo;的原则；&lt;/strong&gt; &lt;strong&gt;实用&lt;/strong&gt; ECMA集团将&amp;ldquo;严格&amp;rdquo;模式&lt;em&gt;设为&lt;/em&gt;可选的唯一原因&lt;em&gt;是，允许经验不足的编码人员访问JavaScript，然后给予时间以适应新的更安全的编码实践。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6733430d33b7d3b1398536a80cb90975b34194ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Strict mode can prevent memory leaks.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;严格模式可以防止内存泄漏。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f944ee70b14fb3dd9fca1ed2e2bdaf3550fc90e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The &quot;use strict&quot; Directive&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;ldquo;严格使用&amp;rdquo;指令&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="606ab5905d1c2d5a8327c6d7ed46db7c3e80503c" translate="yes" xml:space="preserve">
          <source>A word of caution, all you hard-charging programmers:  applying &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; to existing code can be hazardous!  This thing is not some feel-good, happy-face sticker that you can slap on the code to make it 'better'.  With the &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; pragma, the browser will suddenly THROW exceptions in random places that it never threw before just because at that spot you are doing something that default/loose JavaScript happily allows but strict JavaScript abhors!  You may have strictness violations hiding in seldom used calls in your code that will only throw an exception when they do eventually get run - say, in the production environment that your paying customers use!</source>
          <target state="translated">提醒您，所有苛刻的程序员：对现有代码应用 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 可能很危险！ 这东西不是一些让人感觉愉悦，表情愉悦的标签，您可以在代码上打一下以使其&amp;ldquo;更好&amp;rdquo;。 使用 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 杂语，浏览器会突然在从未发生过的随机位置抛出异常，这仅仅是因为您正在执行默认/宽松JavaScript允许但严格JavaScript讨厌的事情！ 您可能会遇到严格的违规情况，这些隐匿在您的代码中很少使用的调用中，这些调用只会在最终运行时才抛出异常-例如，在付费客户使用的生产环境中！</target>
        </trans-unit>
        <trans-unit id="93bdd3af6ffad7ab4f106dd14cd1a4e23ee208e6" translate="yes" xml:space="preserve">
          <source>All modern browsers support &quot;use strict&quot; except &lt;em&gt;Internet Explorer 9 and lower&lt;/em&gt;.</source>
          <target state="translated">除&lt;em&gt;Internet Explorer 9及更低版本&lt;/em&gt;外，所有现代浏览器均支持&amp;ldquo;严格使用&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="2343885cdd0e3c22f513cc0ca57ce37cc20a84a5" translate="yes" xml:space="preserve">
          <source>All parts of a &lt;em&gt;ClassDeclaration&lt;/em&gt; or a &lt;em&gt;ClassExpression&lt;/em&gt; are strict mode    code.</source>
          <target state="translated">&lt;em&gt;ClassDeclaration&lt;/em&gt;或&lt;em&gt;ClassExpression的&lt;/em&gt;所有部分都是严格模式代码。</target>
        </trans-unit>
        <trans-unit id="289ffdbd1f800570bced2d458ea2e61545122c4a" translate="yes" xml:space="preserve">
          <source>Also in strict mode, things run faster, some warnings or silent warnings throw fatal errors, it's better to always use it to make a neater code.</source>
          <target state="translated">同样是在严格模式下,东西运行的速度更快,有些警告或无声警告会抛出致命的错误,最好总是用它来做一个更整洁的代码。</target>
        </trans-unit>
        <trans-unit id="da06e553d0eb67ac4244ee6f5298f173e41be07e" translate="yes" xml:space="preserve">
          <source>Also note you can apply &quot;strict mode&quot; to the whole file... Or you can use it only for a specific function &lt;em&gt;(still quoting from John Resig's article)&lt;/em&gt;:</source>
          <target state="translated">还要注意，您可以将&amp;ldquo;严格模式&amp;rdquo;应用于整个文件...或者您只能将其用于特定功能&lt;em&gt;（仍引用John Resig的文章）&lt;/em&gt; ：</target>
        </trans-unit>
        <trans-unit id="d73300c7892262287c245360c5af86d15a6a13f4" translate="yes" xml:space="preserve">
          <source>Also when a function is invoked with &lt;code&gt;call()&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt; in strict mode, then &lt;code&gt;this&lt;/code&gt; is exactly the value of the first argument of the &lt;code&gt;call()&lt;/code&gt;or &lt;code&gt;apply()&lt;/code&gt; invocation. (In normal mode &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; are replaced by the global &lt;code&gt;Object&lt;/code&gt; and values, which are not objects, are cast into objects.)</source>
          <target state="translated">同样，当使用 &lt;code&gt;call()&lt;/code&gt; 调用函数或以严格模式 &lt;code&gt;apply&lt;/code&gt; 函数时， &lt;code&gt;this&lt;/code&gt; 恰好是 &lt;code&gt;call()&lt;/code&gt; 或 &lt;code&gt;apply()&lt;/code&gt; 调用的第一个参数的值。 （在正常模式下，将 &lt;code&gt;null&lt;/code&gt; 和 &lt;code&gt;undefined&lt;/code&gt; 替换为全局 &lt;code&gt;Object&lt;/code&gt; ，并将不是对象的值强制转换为对象。）</target>
        </trans-unit>
        <trans-unit id="b93fcc8b812303345005a85b6a1b344c558d79a2" translate="yes" xml:space="preserve">
          <source>Also, as listed above, strict mode stops you from doing certain things.</source>
          <target state="translated">另外,如上文所列,严格模式阻止你做某些事情。</target>
        </trans-unit>
        <trans-unit id="f29a859de34d8206276e4fbe86c78577ef463680" translate="yes" xml:space="preserve">
          <source>And:</source>
          <target state="translated">And:</target>
        </trans-unit>
        <trans-unit id="e2abd0d44e964816aa501cf23404b343505b9d60" translate="yes" xml:space="preserve">
          <source>Another scenario is that, say, the variable is declared in a child function. In that case, the compiler checks the validity of that variable in the outer scope, i.e., the parent function. Only then it will check in the global space and create a variable for us there.
That means additional checks need to be done. This will affect the performance of the application.</source>
          <target state="translated">另一种情况是,比如说,这个变量被声明在一个子函数中。在这种情况下,编译器会在外部作用域,也就是父函数中检查该变量的有效性。只有这样,它才会在全局空间中进行检查,并在那里为我们创建一个变量。这就意味着需要进行额外的检查。这将影响到应用程序的性能。</target>
        </trans-unit>
        <trans-unit id="0ce5379811a96887a1d3f16ab89d89d7711a7375" translate="yes" xml:space="preserve">
          <source>Apparently, at the initial stage there will be errors we have never encountered before. To get the full benefit, we need to do proper testing after switching to strict mode to make sure we have caught everything. Definitely we don&amp;rsquo;t just throw &lt;code&gt;use strict&lt;/code&gt; in our code and assume there are no errors. So the churn is that it&amp;rsquo;s time to start using this incredibly useful language feature to write better code.</source>
          <target state="translated">显然，在初始阶段会出现我们从未遇到过的错误。 为了获得全部收益，我们需要在切换到严格模式后进行适当的测试，以确保已捕获所有内容。 绝对我们不只是在代码中 &lt;code&gt;use strict&lt;/code&gt; ，并假设没有错误。 因此，令人感到困惑的是，是时候开始使用这一非常有用的语言功能来编写更好的代码了。</target>
        </trans-unit>
        <trans-unit id="23c13738c7207b9f6d81bccd86fb3f5f24fbc321" translate="yes" xml:space="preserve">
          <source>As an example, in normal JavaScript, mistyping a variable name creates
  a new global variable. In strict mode, this will throw an error,
  making it impossible to accidentally create a global variable.</source>
          <target state="translated">举个例子,在正常的JavaScript中,误输入一个变量名会创建一个新的全局变量。在严格模式下,这会抛出一个错误,使得不可能不小心创建一个全局变量。</target>
        </trans-unit>
        <trans-unit id="2c40cd067423f60a47c31129f8f11cc9df0347a6" translate="yes" xml:space="preserve">
          <source>Attempts to delete undeletable properties will throw (&lt;code&gt;delete Object.prototype&lt;/code&gt;)</source>
          <target state="translated">尝试删除不可删除的属性将引发（ &lt;code&gt;delete Object.prototype&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="9b6df8c6d28fca843574fe8424266b77eefb28e0" translate="yes" xml:space="preserve">
          <source>Believe me. The overhead is negligible compared to poorly designed code. &lt;a href=&quot;http://www.yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/&quot;&gt;Doug Crockford, who has been a senior JavaScript developer for several years, has a very interesting post here&lt;/a&gt;. Personally, I like to return to his site all the time to make sure I don't forget my good practice.</source>
          <target state="translated">相信我。 与设计不良的代码相比，开销可忽略不计。 &lt;a href=&quot;http://www.yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/&quot;&gt;多年担任高级JavaScript开发人员的Doug Crockford在此发表了一篇非常有趣的文章&lt;/a&gt; 。 就个人而言，我喜欢一直回到他的网站，以确保我不会忘记自己的良好做法。</target>
        </trans-unit>
        <trans-unit id="a1ddd7f39e440d9be6e057065c68fec0776269ba" translate="yes" xml:space="preserve">
          <source>Below are the conditions to trigger strict mode in &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-strict-mode-code&quot;&gt;ES6&lt;/a&gt; and &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-strict-mode-code&quot;&gt;ES7&lt;/a&gt;:</source>
          <target state="translated">以下是在&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-strict-mode-code&quot;&gt;ES6&lt;/a&gt;和&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-strict-mode-code&quot;&gt;ES7中&lt;/a&gt;触发严格模式的条件：</target>
        </trans-unit>
        <trans-unit id="1928a98ad81a0a2fb8810d43513549e8510e1221" translate="yes" xml:space="preserve">
          <source>Browser compatibility issue: 
The &quot;use&quot; directives are meant to be backwards-compatible. Browsers that do not support them will just see a string literal that isn't referenced further. So, they will pass over it and move on.</source>
          <target state="translated">浏览器的兼容性问题。使用 &quot;使用 &quot;指令是为了向后兼容。不支持这些指令的浏览器会看到一个没有被进一步引用的字符串字段。所以,他们会把它pass掉,然后继续前进。</target>
        </trans-unit>
        <trans-unit id="0a7fb1b9a52cbb2e017378cb1f11854e33a814a7" translate="yes" xml:space="preserve">
          <source>Browser support for strict mode</source>
          <target state="translated">浏览器对严格模式的支持</target>
        </trans-unit>
        <trans-unit id="565e25b1be863570aa48357d4e37a3cb9b1014a4" translate="yes" xml:space="preserve">
          <source>Consider this example:</source>
          <target state="translated">考虑一下这个例子。</target>
        </trans-unit>
        <trans-unit id="baa2c64bbbada534ed6075e89a55128be8090417" translate="yes" xml:space="preserve">
          <source>Declaring function in blocks</source>
          <target state="translated">在块中声明功能</target>
        </trans-unit>
        <trans-unit id="38996e986e93e308076d27bc04e168330b4535b3" translate="yes" xml:space="preserve">
          <source>Declaring twice the same name for a property name in an object literal</source>
          <target state="translated">在一个对象的字面意义中,为一个属性名称声明两次相同的名称。</target>
        </trans-unit>
        <trans-unit id="29ac6062865d40d043be78b3c36ccdeeec441106" translate="yes" xml:space="preserve">
          <source>Declaring two function arguments with the same name function</source>
          <target state="translated">申报两个同名的函数参数函数</target>
        </trans-unit>
        <trans-unit id="5c4d6e11f66aa0a3fdd7d4a8816581873a8955ae" translate="yes" xml:space="preserve">
          <source>Directives are similar to statements, yet different.</source>
          <target state="translated">指令与语句类似,但又不同。</target>
        </trans-unit>
        <trans-unit id="b8f87df5829d8a168c7e799e5c216af27378f943" translate="yes" xml:space="preserve">
          <source>Disallows global variables. (Catches missing &lt;code&gt;var&lt;/code&gt; declarations and typos in variable names)</source>
          <target state="translated">禁止使用全局变量。 （捕获变量名称中缺少的 &lt;code&gt;var&lt;/code&gt; 声明和错别字）</target>
        </trans-unit>
        <trans-unit id="273671e9ae03a9235fcaa5ba2170f1974218b666" translate="yes" xml:space="preserve">
          <source>Do any of the current browsers respond to the &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; string or is it for future use?</source>
          <target state="translated">当前的浏览器是否响应 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; 字符串还是将来使用？</target>
        </trans-unit>
        <trans-unit id="e4d1d77242da906971270be245172a570ee8b0fb" translate="yes" xml:space="preserve">
          <source>Doing some searching, I realized that some people add &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; into their JavaScript code. Once I added the statement, the error stopped appearing. Unfortunately, Google did not reveal much of the history behind this string statement. Certainly it must have something to do with how the JavaScript is interpreted by the browser, but I have no idea what the effect would be.</source>
          <target state="translated">进行搜索后，我意识到有些人添加了 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; 纳入他们的JavaScript代码。 添加语句后，错误停止出现。 不幸的是，谷歌没有透露此字符串语句背后的许多历史。 当然，它一定与浏览器如何解释JavaScript有关，但是我不知道会有什么影响。</target>
        </trans-unit>
        <trans-unit id="48af85fc915d01a4202f28354202609ebabc9352" translate="yes" xml:space="preserve">
          <source>ECMAScript 5 'Strict mode' support in browsers. What does this mean?</source>
          <target state="translated">ECMAScript 5 浏览器中的 &quot;严格模式 &quot;支持。这意味着什么?</target>
        </trans-unit>
        <trans-unit id="9fc854e7ec3ef2a462edaa98d116548946d2673f" translate="yes" xml:space="preserve">
          <source>ECMAScript 5 adds a list of reserved words. If you use them as variables or arguments, strict mode will throw an error. The reserved words are:</source>
          <target state="translated">ECMAScript 5增加了一个保留词的列表。如果你把它们作为变量或参数使用,严格模式会抛出一个错误。保留的字词是:</target>
        </trans-unit>
        <trans-unit id="ebcaa1421d2e09e7ea9eec47fe05b48861d7705e" translate="yes" xml:space="preserve">
          <source>Eliminates this coercion</source>
          <target state="translated">消除了这种胁迫</target>
        </trans-unit>
        <trans-unit id="ed326f039ef104d9ba966135c56dac8bf600657a" translate="yes" xml:space="preserve">
          <source>Eliminates with</source>
          <target state="translated">消除与</target>
        </trans-unit>
        <trans-unit id="0c26b81d89bbb54118dbce8cd05504fa17f8b5c2" translate="yes" xml:space="preserve">
          <source>Errors for immutables</source>
          <target state="translated">不变体的错误</target>
        </trans-unit>
        <trans-unit id="efa60700d7b2ed517f9d3d0229490278c5d94c97" translate="yes" xml:space="preserve">
          <source>Et cetera</source>
          <target state="translated">等等</target>
        </trans-unit>
        <trans-unit id="e5356a0a78fcc2f6a59293d5076e50a82279173b" translate="yes" xml:space="preserve">
          <source>Eval code is strict mode code if it begins with a Directive Prologue    that contains a Use Strict Directive or if the call to eval is a direct eval (see 12.3.4.1) that is contained in strict mode code.</source>
          <target state="translated">如果Eval代码以包含使用严格指令的指令序言开始,或者如果对eval的调用是包含在严格模式代码中的直接eval(见12.3.4.1),则为严格模式代码。</target>
        </trans-unit>
        <trans-unit id="89ce572ad2c6a69c00995dd23c773545b3d69731" translate="yes" xml:space="preserve">
          <source>Everything in the &lt;em&gt;lexical scope&lt;/em&gt; of function &lt;code&gt;doSomething&lt;/code&gt; will be interpreted in strict mode. The word &lt;em&gt;lexical scope&lt;/em&gt; is important here. For example, if your &lt;em&gt;strict&lt;/em&gt; code calls a function of a library that is &lt;em&gt;not strict&lt;/em&gt;, only your code is executed in strict mode, and not the called function. See &lt;a href=&quot;https://stackoverflow.com/a/6039163/1461424&quot;&gt;this answer&lt;/a&gt; for a better explanation.</source>
          <target state="translated">函数 &lt;code&gt;doSomething&lt;/code&gt; 的&lt;em&gt;词法范围内&lt;/em&gt;的所有内容都将以严格模式进行解释。 &lt;em&gt;词汇范围&lt;/em&gt;一词在这里很重要。 例如，如果您的&lt;em&gt;严格&lt;/em&gt;代码调用了&lt;em&gt;非严格&lt;/em&gt;库的函数，则仅您的代码以严格模式执行，而不是被调用函数。 请参阅&lt;a href=&quot;https://stackoverflow.com/a/6039163/1461424&quot;&gt;此答案&lt;/a&gt;以获得更好的解释。</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">扩展片段</target>
        </trans-unit>
        <trans-unit id="4daa46b47ce88ea7b35fb3d45a4029cb54de2f47" translate="yes" xml:space="preserve">
          <source>Few important things which I have learned after using &lt;code&gt;use strict&lt;/code&gt; :</source>
          <target state="translated">在 &lt;code&gt;use strict&lt;/code&gt; 之后，我学到的一些重要的东西很少：</target>
        </trans-unit>
        <trans-unit id="b80e966415fec4b14584eef46091cc1f5fed8c7a" translate="yes" xml:space="preserve">
          <source>For a non-exhaustive list of specialties in strict mode, see &lt;a href=&quot;https://stackoverflow.com/a/27114400/1461424&quot;&gt;this answer&lt;/a&gt;.</source>
          <target state="translated">有关严格模式下的专业的详尽列表，请参见此&lt;a href=&quot;https://stackoverflow.com/a/27114400/1461424&quot;&gt;答案&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="59a44288386a492ebd014862dd175b15ca71076a" translate="yes" xml:space="preserve">
          <source>Forbids binding or assignment of the names &lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt; in any form</source>
          <target state="translated">禁止以任何形式绑定或分配名称 &lt;code&gt;eval&lt;/code&gt; 和 &lt;code&gt;arguments&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="85882ed43f947d20ab023a241c16a0839507bff1" translate="yes" xml:space="preserve">
          <source>Forbids deleting plain names (&lt;code&gt;delete x;&lt;/code&gt;)</source>
          <target state="translated">禁止删除纯名称（ &lt;code&gt;delete x;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="932069b68ebf7d6e48537be78e32212e3699abcd" translate="yes" xml:space="preserve">
          <source>Forbids octal syntax (&lt;code&gt;var x = 023;&lt;/code&gt; some devs assume wrongly that a preceding zero does nothing to change the number.)</source>
          <target state="translated">禁止使用八进制语法（ &lt;code&gt;var x = 023;&lt;/code&gt; 某些开发人员错误地认为前面的零不会更改数字。）</target>
        </trans-unit>
        <trans-unit id="3799c98240f4cdb7b40c5e3fdcb7c5e4f2f10c8b" translate="yes" xml:space="preserve">
          <source>Forbids the &lt;code&gt;with&lt;/code&gt; keyword</source>
          <target state="translated">禁止 &lt;code&gt;with&lt;/code&gt; 关键字</target>
        </trans-unit>
        <trans-unit id="b458948cb359c5a3bdb7d06c0c0102f9e79964a1" translate="yes" xml:space="preserve">
          <source>Function code is strict mode code if the associated &lt;em&gt;FunctionDeclaration, FunctionExpression, GeneratorDeclaration, GeneratorExpression, MethodDefinition, or ArrowFunction&lt;/em&gt; is contained in strict mode code or if the code that produces the value of the function&amp;rsquo;s [[ECMAScriptCode]] internal slot begins with a Directive Prologue that contains a Use Strict Directive.</source>
          <target state="translated">如果在严格模式代码中包含相关的&lt;em&gt;FunctionDeclaration，FunctionExpression，GeneratorDeclaration，GeneratorExpression，MethodDefinition或ArrowFunction&lt;/em&gt; ，或者如果产生该函数的[[ECMAScriptCode]]内部插槽值的代码以&lt;em&gt;伪指令开头，&lt;/em&gt;则功能代码为严格模式代码。包含&amp;ldquo;使用严格&amp;rdquo;指令。</target>
        </trans-unit>
        <trans-unit id="3c282a4f93e31f632be83929715796e01490e87f" translate="yes" xml:space="preserve">
          <source>Function code that is supplied as the arguments to the built-in    Function and Generator constructors is strict mode code if the last argument is a String that when processed is a &lt;em&gt;FunctionBody&lt;/em&gt; that begins with a Directive Prologue that contains a Use Strict Directive.</source>
          <target state="translated">如果最后一个参数是一个字符串，则该函数代码将作为内置函数和生成器构造函数的参数提供给函数代码，该字符串在处理时是一个&lt;em&gt;功能&lt;/em&gt;主体，该主体以包含使用严格指令的指令序言开头。</target>
        </trans-unit>
        <trans-unit id="1847e9a8ccc9abd72f714eab1618108a4c8cbe08" translate="yes" xml:space="preserve">
          <source>Function parameter names must be unique (&lt;code&gt;function sum (x, x) {...}&lt;/code&gt;)</source>
          <target state="translated">函数参数名称必须唯一（ &lt;code&gt;function sum (x, x) {...}&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="bafd4b54282745a2bed1442852b73f4b3189a77a" translate="yes" xml:space="preserve">
          <source>Further Reading</source>
          <target state="translated">延伸阅读</target>
        </trans-unit>
        <trans-unit id="e311ed625506e39cf4918abdd75a8aaa56e4dfc8" translate="yes" xml:space="preserve">
          <source>Global Leakage</source>
          <target state="translated">全球渗漏</target>
        </trans-unit>
        <trans-unit id="eead7b84869b7d6893ff5ea59fd12d29fc73671a" translate="yes" xml:space="preserve">
          <source>Global code is strict mode code if it begins with a Directive    Prologue that contains a Use Strict Directive (see 14.1.1).</source>
          <target state="translated">全局代码是严格模式代码,如果以指令序言开始,包含严格的使用指令(见14.1.1.1)。</target>
        </trans-unit>
        <trans-unit id="6304fe8539e56d461068a240f624db35fe5dca0a" translate="yes" xml:space="preserve">
          <source>Here, the compiler throws the reference error. In strict mode, the compiler does not allow us to use the variable without declaring it. So memory leaks can be prevented. In addition, we can write more optimized code.</source>
          <target state="translated">这里,编译器会抛出引用错误。在严格模式下,编译器不允许我们在不声明变量的情况下使用该变量。所以可以防止内存泄露。另外,我们可以写出更多的优化代码。</target>
        </trans-unit>
        <trans-unit id="78d2172dcc5510adbb4b052a53b0f1eaf23d08d5" translate="yes" xml:space="preserve">
          <source>Historically, JavaScript has been confused about how functions
  are scoped. Sometimes they seem to be statically scoped, but some
  features make them behave like they are dynamically scoped. This is
  confusing, making programs difficult to read and understand.
  Misunderstanding causes bugs. It also is a problem for performance.
  Static scoping would permit variable binding to happen at compile
  time, but the requirement for dynamic scope means the binding must be
  deferred to runtime, which comes with a significant performance
  penalty.</source>
          <target state="translated">历史上,JavaScript对于函数如何进行缩放的问题一直很困惑。有时,它们似乎是静态的,但有些功能却让它们的行为像动态的。这让人感到困惑,使程序难以阅读和理解。误解导致了bug。这对性能也是一个问题。静态范围化可以允许在编译时进行变量绑定,但动态范围化的要求意味着绑定必须推迟到运行时进行,这就带来了很大的性能损失。</target>
        </trans-unit>
        <trans-unit id="ff46ea9bef3c6d32c8a1ad7bb317595dd80cf361" translate="yes" xml:space="preserve">
          <source>How do I use strict mode?</source>
          <target state="translated">如何使用严格模式?</target>
        </trans-unit>
        <trans-unit id="cc9be850e0a7084a9595e60ae16f023125baaa52" translate="yes" xml:space="preserve">
          <source>I found a &lt;a href=&quot;http://yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/&quot;&gt;nice article&lt;/a&gt; describing several things that are prohibited in strict mode (note that this is not an exclusive list):</source>
          <target state="translated">我找到了&lt;a href=&quot;http://yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/&quot;&gt;一篇不错的文章，&lt;/a&gt;描述了严格模式下禁止的几件事（请注意，这不是排他性清单）：</target>
        </trans-unit>
        <trans-unit id="dc8952723c45fe0a5695d3b38a7da82ec0f08130" translate="yes" xml:space="preserve">
          <source>I strongly recommend every developer to start using strict mode now. There are enough browsers supporting it that strict mode will legitimately help save us from errors we didn&amp;rsquo;t even know were in your code.</source>
          <target state="translated">我强烈建议每个开发人员立即开始使用严格模式。 有足够多的浏览器支持它，严格模式将合理地帮助我们避免我们甚至不知道您的代码中存在的错误。</target>
        </trans-unit>
        <trans-unit id="469b8c44f76024a66385d6b7d25b2e82c43551eb" translate="yes" xml:space="preserve">
          <source>I think even though it is a deadly caged animal, &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; can be good stuff, but you have to do it right.  The best time to go strict is when your project is greenfield and you are starting from scratch. Configure &lt;code&gt;JSHint/JSLint&lt;/code&gt; with all the warnings and options cranked up as tight as your team can stomach, get a good build/test/assert system du jour rigged like &lt;code&gt;Grunt+Karma+Chai&lt;/code&gt;, and only THEN start marking all your new modules as &lt;code&gt;&quot;use strict&quot;&lt;/code&gt;.  Be prepared to cure lots of niggly errors and warnings.  Make sure everyone understands the gravity by configuring the build to FAIL if &lt;code&gt;JSHint/JSLint&lt;/code&gt; produces any violations.</source>
          <target state="translated">我认为，尽管这是一种致命的笼养动物，但 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 可能是好东西，但您必须正确地做。 严格执行的最佳时间是当您的项目处于未开发状态并且从头开始时。 在 &lt;code&gt;JSHint/JSLint&lt;/code&gt; 上配置所有警告和选项，使您的团队能够紧紧抓住，并在诸如 &lt;code&gt;Grunt+Karma+Chai&lt;/code&gt; 之类的操纵下获得良好的构建/测试/声明系统，然后只有THEN才开始将所有新模块标记为 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 。 准备好解决许多小错误和警告。 如果 &lt;code&gt;JSHint/JSLint&lt;/code&gt; 产生任何违规，请通过将构建配置为FAIL来确保每个人都了解重力。</target>
        </trans-unit>
        <trans-unit id="fe9be0949ff68bb7e46ceee0fc5d7b1234fe99fe" translate="yes" xml:space="preserve">
          <source>I would like to offer a somewhat more founded answer complementing the other answers. I was hoping to edit the most popular answer, but failed. I tried to make it as comprehensive and complete as I could.</source>
          <target state="translated">我想提供一个比较有根据的答案,补充一下其他答案。我本想编辑一下最受欢迎的答案,但没有成功。我尽力使之尽可能的全面和完整。</target>
        </trans-unit>
        <trans-unit id="412701d63b5068562cc4090f3741aedcbe4b4488" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; is used, the code should be written by following a strict set of rules, hence decreasing the chances of errors and ambiguities.</source>
          <target state="translated">如果 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; ，则应遵循一组严格的规则来编写代码，从而减少错误和歧义的可能性。</target>
        </trans-unit>
        <trans-unit id="becf61a07fb9b6bce75ee86403b6a44cc4230a2d" translate="yes" xml:space="preserve">
          <source>If a developer used a library that was in strict mode, but the developer was used to working in normal mode, they might call some actions on the library that wouldn&amp;rsquo;t work as expected.</source>
          <target state="translated">如果开发人员使用的是严格模式下的库，但是开发人员习惯于在正常模式下工作，则他们可能会对该库调用某些无法按预期方式执行的操作。</target>
        </trans-unit>
        <trans-unit id="73b348a017ce42f08ddfcc1a55aa16726529e7db" translate="yes" xml:space="preserve">
          <source>If people are worried about using &lt;code&gt;use strict&lt;/code&gt; it might be worth checking out this article:</source>
          <target state="translated">如果人们担心 &lt;code&gt;use strict&lt;/code&gt; 使用使用方式，那么可能值得阅读这篇文章：</target>
        </trans-unit>
        <trans-unit id="fa6ab3ff8e0221431d8c26a934a3e66ae5341150" translate="yes" xml:space="preserve">
          <source>If you are going to take the plunge, it is a good idea to apply &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; alongside comprehensive unit tests and a strictly configured JSHint build task that will give you some confidence that there is no dark corner of your module that will blow up horribly just because you've turned on Strict Mode.  Or, hey, here's another option:  just don't add &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; to any of your legacy code, it's probably safer that way, honestly.  &lt;strong&gt;DEFINITELY DO NOT&lt;/strong&gt; add &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; to any modules you do not own or maintain, like third party modules.</source>
          <target state="translated">如果您要尝试一下，最好将 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 与全面的单元测试以及严格配置的JSHint构建任务一起应用，这将使您充满信心，您的模块不会出现死角可怕的是，因为您已启用严格模式。 或者，嘿，这是另一个选择：就是不要在您的任何旧代码中添加 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; ，说实话，这样做可能更安全。 &lt;strong&gt;绝对不要&lt;/strong&gt;在您不拥有或维护的任何模块（例如第三方模块）上添加 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf2b000cc3982bb988fd19b404d2df442c39ee61" translate="yes" xml:space="preserve">
          <source>If you use a browser released in the last year or so then it most likely supports JavaScript Strict mode. Only older browsers around before ECMAScript 5 became the current standard don't support it.</source>
          <target state="translated">如果你使用的是过去一年左右发布的浏览器,那么它很可能支持JavaScript Strict模式。只有在ECMAScript 5成为当前标准之前的旧浏览器不支持它。</target>
        </trans-unit>
        <trans-unit id="a61d4fd4d403e4d13959975f3c5f54da73790ed8" translate="yes" xml:space="preserve">
          <source>Implied Global Variables</source>
          <target state="translated">隐含的全球变量</target>
        </trans-unit>
        <trans-unit id="d3431d0f279fa8fa3e8a6d6d9667d24dcf95f4a3" translate="yes" xml:space="preserve">
          <source>In C, an extremely unfortunate representation of octalness was
  selected: Leading zero. So in C, &lt;code&gt;0100&lt;/code&gt; means 64, not 100, and &lt;code&gt;08&lt;/code&gt; is an
  error, not 8. Even more unfortunately, this anachronism has been
  copied into nearly all modern languages, including JavaScript, where
  it is only used to create errors. It has no other purpose. So in
  strict mode, octal forms are no longer allowed.</source>
          <target state="translated">在C语言中，选择了一个非常不幸的八进制表示形式：前导零。 因此，在C语言中， &lt;code&gt;0100&lt;/code&gt; 表示64，而不是100，而 &lt;code&gt;08&lt;/code&gt; 是一个错误，而不是8。更不幸的是，这种时代错误已被复制到几乎所有现代语言中，包括JavaScript，仅在其中用于创建错误。 它没有其他目的。 因此，在严格模式下，不再允许使用八进制形式。</target>
        </trans-unit>
        <trans-unit id="16b4064635890ddd67afa5ee74230310465108e6" translate="yes" xml:space="preserve">
          <source>In my &lt;em&gt;existing&lt;/em&gt; JavaScript code: &lt;strong&gt;Probably not!&lt;/strong&gt; If your existing JavaScript code has statements that are prohibited in strict-mode, the application will simply break. If you want strict mode, you should be prepared to debug and correct your existing code. This is why &lt;em&gt;using &lt;code&gt;'use strict';&lt;/code&gt; does not suddenly make your code better&lt;/em&gt;.</source>
          <target state="translated">在我&lt;em&gt;现有的&lt;/em&gt; JavaScript代码中： &lt;strong&gt;可能不是！&lt;/strong&gt; 如果您现有的JavaScript代码中的语句在严格模式下被禁止，则应用程序将很容易崩溃。 如果要使用严格模式，则应该准备调试和更正现有代码。 这就是为什么&lt;em&gt;使用 &lt;code&gt;'use strict';&lt;/code&gt; 使用&amp;rdquo;的&lt;/em&gt;原因&lt;em&gt;；&lt;/em&gt; &lt;em&gt;不会突然使您的代码变得更好&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="0c29f3552537c30fb2098c4a96f0030e9e96ee78" translate="yes" xml:space="preserve">
          <source>In my &lt;em&gt;new&lt;/em&gt; JavaScript application: &lt;strong&gt;Absolutely!&lt;/strong&gt; Strict mode can be used as a whistleblower when you are doing something stupid with your code.</source>
          <target state="translated">在我的&lt;em&gt;新&lt;/em&gt; JavaScript应用程序中： &lt;strong&gt;绝对！&lt;/strong&gt; 当您对代码进行愚蠢的操作时，严格模式可用作举报者。</target>
        </trans-unit>
        <trans-unit id="3634f14a41df1f551fd64c581da9a12e76201cd6" translate="yes" xml:space="preserve">
          <source>In normal JavaScript, a developer will not receive any error feedback
  assigning values to non-writable properties.</source>
          <target state="translated">在正常的JavaScript中,开发者不会收到任何为不可写属性赋值的错误反馈。</target>
        </trans-unit>
        <trans-unit id="d1c4997af91ea1824f16708d431766bae6358c7a" translate="yes" xml:space="preserve">
          <source>In short will make your code less error prone and in turn will make you write good code.</source>
          <target state="translated">总之会让你的代码更不容易出错,反过来也会让你写出好的代码。</target>
        </trans-unit>
        <trans-unit id="d1a158933baae4e76b4d77171e82fba2ab4d99d9" translate="yes" xml:space="preserve">
          <source>In strict mode all variables have to be declared: if you assign a value to an identifier that has not been declared as variable, function, function parameter, catch-clause parameter or property of the global &lt;code&gt;Object&lt;/code&gt;, then you will get a &lt;code&gt;ReferenceError&lt;/code&gt;. In normal mode the identifier is implicitly declared as a global variable (as a property of the global &lt;code&gt;Object&lt;/code&gt;)</source>
          <target state="translated">在严格模式下，必须声明所有变量：如果将一个值赋给尚未声明为全局 &lt;code&gt;Object&lt;/code&gt; 变量，函数，函数参数，子句参数或属性的标识符，则将获得 &lt;code&gt;ReferenceError&lt;/code&gt; 。 在正常模式下，标识符隐式声明为全局变量（作为global &lt;code&gt;Object&lt;/code&gt; 的属性）</target>
        </trans-unit>
        <trans-unit id="f9069656fdcbb8041857c4d722a72e7658151a0c" translate="yes" xml:space="preserve">
          <source>In strict mode are more restrictions on the possibilities to examine the call stack. &lt;code&gt;arguments.caller&lt;/code&gt; and &lt;code&gt;arguments.callee&lt;/code&gt; cause a &lt;code&gt;TypeError&lt;/code&gt; in a function in strict mode. Furthermore, some caller- and arguments properties of functions in strict mode cause a &lt;code&gt;TypeError&lt;/code&gt; when you try to read them.</source>
          <target state="translated">在严格模式下，对检查调用堆栈的可能性有更多限制。 &lt;code&gt;arguments.caller&lt;/code&gt; 和 &lt;code&gt;arguments.callee&lt;/code&gt; 在严格模式下的函数中导致 &lt;code&gt;TypeError&lt;/code&gt; 。 此外，在严格模式下，函数的某些调用方和参数属性会在您尝试读取它们时导致 &lt;code&gt;TypeError&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b5c0423fd33ef61899aaaab9c15cc303390184f6" translate="yes" xml:space="preserve">
          <source>In strict mode it is considered a syntactical error when a function declaration has multiple parameters with the same name. (In normal mode there is no error.)</source>
          <target state="translated">在严格模式下,当一个函数声明有多个同名参数时,会被认为是语法错误。在正常模式下,不会出现错误。</target>
        </trans-unit>
        <trans-unit id="ad8a374a0ecffbb86ab61cd3fbd81734ca7e9123" translate="yes" xml:space="preserve">
          <source>In strict mode it is considered a syntactical error when you try to define several properties with the same name for an object literal. (In normal mode there is no error.)</source>
          <target state="translated">在严格模式下,当你试图为一个对象的字面符号定义几个具有相同名称的属性时,会被认为是语法错误。在正常模式下,不会出现错误。</target>
        </trans-unit>
        <trans-unit id="6e88e83d9825a17cda0546c6144bf263c3be4fd7" translate="yes" xml:space="preserve">
          <source>In strict mode octal literals are not allowed (these are literals that start with &lt;code&gt;0x&lt;/code&gt;. (In normal mode some implementations do allow octal literals.)</source>
          <target state="translated">在严格模式下，不允许使用八进制文字（这些文字以 &lt;code&gt;0x&lt;/code&gt; 开头 。（在正常模式下，某些实现确实允许使用八进制文字。）</target>
        </trans-unit>
        <trans-unit id="ada7b6efb898cb90db8476a67881c7168d01d3c2" translate="yes" xml:space="preserve">
          <source>In strict mode the arguments-object of a function contains a static copy of the values, which are passed to that function. In normal mode the arguments-object has a somewhat &quot;magical&quot; behaviour: The elements of the array and the named function parameters reference both the same value.</source>
          <target state="translated">在严格模式下,函数的arguments-object包含一个静态的值的副本,这些值被传递给该函数。在普通模式下,arguments-object有一个有点 &quot;神奇 &quot;的行为。数组的元素和命名的函数参数都引用了相同的值。</target>
        </trans-unit>
        <trans-unit id="7045fbdd229530fd0f1b40aa6038b589b411e771" translate="yes" xml:space="preserve">
          <source>In strict mode the identifiers &lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt; are treated like keywords. You cannot change their value, cannot assign a value to them, and you cannot use them as names for variables, functions, function parameters or identifiers of a catch block.</source>
          <target state="translated">在严格模式下，标识符 &lt;code&gt;eval&lt;/code&gt; 和 &lt;code&gt;arguments&lt;/code&gt; 被视为关键字。 您不能更改它们的值，不能给它们分配值，也不能将它们用作变量，函数，函数参数或catch块标识符的名称。</target>
        </trans-unit>
        <trans-unit id="84f9e027f80dc82cfbcc02dc7ceec363aaaa0369" translate="yes" xml:space="preserve">
          <source>In strict mode the keyword &lt;code&gt;this&lt;/code&gt; has the value &lt;code&gt;undefined&lt;/code&gt; in functions that were invoked as functions (not as methods). (In normal mode &lt;code&gt;this&lt;/code&gt; always points to the global &lt;code&gt;Object&lt;/code&gt;). This difference can be used to test if an implementation supports the strict mode:</source>
          <target state="translated">在严格模式下，关键字 &lt;code&gt;this&lt;/code&gt; 的值在作为函数（而不是方法）调用的函数中具有 &lt;code&gt;undefined&lt;/code&gt; 的值。 （在正常模式下， &lt;code&gt;this&lt;/code&gt; 始终指向全局 &lt;code&gt;Object&lt;/code&gt; ）。 此差异可用于测试实现是否支持严格模式：</target>
        </trans-unit>
        <trans-unit id="590bf1e232e9ab23ec1128befcc7fba6b47df466" translate="yes" xml:space="preserve">
          <source>In strict mode you will get a &lt;code&gt;SyntaxError&lt;/code&gt; when the &lt;code&gt;delete&lt;/code&gt; operator is followed by a non qualified identifier (a variable, function or function parameter). In normal mode the &lt;code&gt;delete&lt;/code&gt; expression would do nothing and is evaluated to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">在严格模式下，当 &lt;code&gt;delete&lt;/code&gt; 运算符后跟非限定标识符（变量，函数或函数参数）时，将出现 &lt;code&gt;SyntaxError&lt;/code&gt; 。 在正常模式下， &lt;code&gt;delete&lt;/code&gt; 表达式将不执行任何操作，并被评估为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="85d415079a470edeb131eb3614bacfeeedb08d6e" translate="yes" xml:space="preserve">
          <source>In strict mode you will get a &lt;code&gt;TypeError&lt;/code&gt; when you try to delete a non configurable property. (In normal mode the attempt simply fails and the &lt;code&gt;delete&lt;/code&gt; expression is evaluated to &lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">在严格模式下，当您尝试删除不可配置的属性时，将出现 &lt;code&gt;TypeError&lt;/code&gt; 。 （在正常模式下，尝试仅会失败，并且 &lt;code&gt;delete&lt;/code&gt; 表达式将被评估为 &lt;code&gt;false&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b36659c0c4c3212e959b1c3409c8e84af48a58ca" translate="yes" xml:space="preserve">
          <source>In strict mode you will get a &lt;code&gt;TypeError&lt;/code&gt;, when you try to assign to readonly properties or to define new properties for a non extensible object. (In normal mode both simply fail without error message.)</source>
          <target state="translated">在严格模式下，当您尝试分配给只读属性或为不可扩展对象定义新属性时，将出现 &lt;code&gt;TypeError&lt;/code&gt; 。 （在正常模式下，两者都只会失败而不会显示错误消息。）</target>
        </trans-unit>
        <trans-unit id="779a188a15eeeb75cd33dabaef5f5607b5e7df04" translate="yes" xml:space="preserve">
          <source>In strict mode, any assignment to a non-writable property, a
  getter-only property, a non-existing property, a non-existing
  variable, or a non-existing object, will throw an error.</source>
          <target state="translated">在严格模式下,任何赋值到不可写属性、仅有获取器的属性、不存在的属性、不存在的变量或不存在的对象,都会抛出一个错误。</target>
        </trans-unit>
        <trans-unit id="34660b8b97e8c589b1780bcb0a3ad7df23ae6ebe" translate="yes" xml:space="preserve">
          <source>In strict mode, duplicate keys in a function literal will produce a
  syntax error. A function can&amp;rsquo;t have two parameters with the same name.
  A function can&amp;rsquo;t have a variable with the same name as one of its
  parameters. A function can&amp;rsquo;t &lt;code&gt;delete&lt;/code&gt; its own variables. An attempt to
  &lt;code&gt;delete&lt;/code&gt; a non-configurable property now throws an exception. Primitive
  values are not implicitly wrapped.</source>
          <target state="translated">在严格模式下，函数文字中的重复键将产生语法错误。 一个函数不能有两个具有相同名称的参数。 函数不能具有与其参数之一相同名称的变量。 函数不能 &lt;code&gt;delete&lt;/code&gt; 自己的变量。 现在，尝试 &lt;code&gt;delete&lt;/code&gt; 不可配置的属性会引发异常。 原始值不会隐式包装。</target>
        </trans-unit>
        <trans-unit id="1277d69296a283f503d1a6c94d74f75f1d3e36bd" translate="yes" xml:space="preserve">
          <source>In strict mode, when passing code to &lt;code&gt;eval()&lt;/code&gt;, you cannot declare or define variables or functions in the scope of the caller (as you can do it in normal mode). Instead, a new scope is created for &lt;code&gt;eval()&lt;/code&gt; and the variables and functions are within that scope. That scope is destroyed after &lt;code&gt;eval()&lt;/code&gt; finishes execution.</source>
          <target state="translated">在严格模式下，将代码传递给 &lt;code&gt;eval()&lt;/code&gt; 时 ，您不能在调用方范围内声明或定义变量或函数（就像在常规模式下那样）。 而是为 &lt;code&gt;eval()&lt;/code&gt; 创建一个新范围，并且变量和函数在该范围内。 &lt;code&gt;eval()&lt;/code&gt; 完成执行后，该作用域被销毁。</target>
        </trans-unit>
        <trans-unit id="3b9445116c4c7387170dcadef8c31c50c662cba8" translate="yes" xml:space="preserve">
          <source>In their obsession to line up the numeric literals, the developer has inadvertently initialized variable &lt;code&gt;b&lt;/code&gt; with an octal literal. Non-strict mode will interpret this as a numeric literal with value &lt;code&gt;24&lt;/code&gt; (in base 10). However, strict mode will throw an error.</source>
          <target state="translated">为了对数字文字进行对齐，开发人员在不经意间将变量 &lt;code&gt;b&lt;/code&gt; 初始化为八进制文字。 非严格模式会将其解释为带有值 &lt;code&gt;24&lt;/code&gt; （以10为底）的数字文字。 但是，严格模式将引发错误。</target>
        </trans-unit>
        <trans-unit id="9831e3ee257b8570017d5e3cbd952bf7d9110f05" translate="yes" xml:space="preserve">
          <source>In this function, we are using a variable called &lt;code&gt;name&lt;/code&gt; inside the function. Internally, the compiler will first check if there is any variable declared with that particular name in that particular function scope. Since the compiler understood that there is no such variable, it will check in the outer scope. In our case, it is the global scope. Again, the compiler understood that there is also no variable declared in the global space with that name, so it creates such a variable for us in the global space. Conceptually, this variable will be created in the global scope and will be available in the entire application.</source>
          <target state="translated">在此函数中，我们在函数内部使用了一个名为 &lt;code&gt;name&lt;/code&gt; 的变量。 在内部，编译器将首先检查在该特定函数范围内是否有使用该特定名称声明的变量。 由于编译器知道没有这样的变量，因此它将检查外部范围。 就我们而言，这是全球范围。 再次，编译器理解在全局空间中也没有使用该名称声明的变量，因此它在全局空间中为我们创建了这样的变量。 从概念上讲，此变量将在全局范围内创建，并将在整个应用程序中可用。</target>
        </trans-unit>
        <trans-unit id="29d176e51afc8cfe92995728f708273a3dba6e2b" translate="yes" xml:space="preserve">
          <source>Including &lt;code&gt;use strict&lt;/code&gt; in the beginning of your all sensitive JavaScript files from this point is a small way to be a better JavaScript programmer and avoid random variables becoming global and things change silently.</source>
          <target state="translated">从这一点开始，在所有敏感的JavaScript文件的开头都包括 &lt;code&gt;use strict&lt;/code&gt; ，这是成为更好的JavaScript程序员的一种小方法，并且可以避免随机变量变得全局化，并且事情无声无息地发生变化。</target>
        </trans-unit>
        <trans-unit id="025fb56c42e573032fb397fd3868bcc2c6bb5ce7" translate="yes" xml:space="preserve">
          <source>Insert a &lt;code&gt;'use strict';&lt;/code&gt; statement on top of your script:</source>
          <target state="translated">插入 &lt;code&gt;'use strict';&lt;/code&gt; 脚本顶部的语句：</target>
        </trans-unit>
        <trans-unit id="9c8d780490a36100dba6e751d2b2cef05a32cfe4" translate="yes" xml:space="preserve">
          <source>Inside &lt;a href=&quot;https://caniuse.com/#feat=es6-module&quot;&gt;native ECMAScript modules&lt;/a&gt; (with &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; statements) and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;ES6 classes&lt;/a&gt;, strict mode is always enabled and cannot be disabled.</source>
          <target state="translated">在&lt;a href=&quot;https://caniuse.com/#feat=es6-module&quot;&gt;本机ECMAScript模块&lt;/a&gt; （带有 &lt;code&gt;import&lt;/code&gt; 和 &lt;code&gt;export&lt;/code&gt; 语句）和&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;ES6类中&lt;/a&gt; ，严格模式始终处于启用状态，不能被禁用。</target>
        </trans-unit>
        <trans-unit id="7e171a04a4eeaf5a9849e77b87c64e070643b7ba" translate="yes" xml:space="preserve">
          <source>It catches some common coding bloopers, throwing exceptions.</source>
          <target state="translated">它可以捕捉到一些常见的编码漏洞,抛出异常。</target>
        </trans-unit>
        <trans-unit id="9dcb0c3ef0d34afe87dadacc330eb172ee25f066" translate="yes" xml:space="preserve">
          <source>It disables features that are confusing or poorly thought out.</source>
          <target state="translated">它取消了一些令人困惑的功能,或考虑不周的功能。</target>
        </trans-unit>
        <trans-unit id="49b8baaa6a095c3eb48ab5966d9e83454f6ec304" translate="yes" xml:space="preserve">
          <source>It is not a statement, but a literal expression, ignored by earlier
versions of JavaScript.</source>
          <target state="translated">它不是一个语句,而是一个字面表达式,被早期版本的JavaScript忽略了。</target>
        </trans-unit>
        <trans-unit id="f332558e8f07c24532551cb466729913fd5cd0e9" translate="yes" xml:space="preserve">
          <source>It prevents, or throws errors, when relatively &quot;unsafe&quot; actions are taken (such as gaining access to the global object).</source>
          <target state="translated">当采取相对 &quot;不安全 &quot;的操作(如获得对全局对象的访问权限)时,它可以防止或抛出错误。</target>
        </trans-unit>
        <trans-unit id="8cba967f49d817c496f0e2267da26d8c35639e1d" translate="yes" xml:space="preserve">
          <source>It talks about browser support, but more importantly how to deal with it safely:</source>
          <target state="translated">它谈到了浏览器的支持,但更重要的是如何安全处理。</target>
        </trans-unit>
        <trans-unit id="a7db968114d988709a73f4b2145447f7be94164f" translate="yes" xml:space="preserve">
          <source>It's a new feature of ECMAScript 5. John Resig wrote up &lt;a href=&quot;http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/&quot;&gt;a nice summary&lt;/a&gt; of it.</source>
          <target state="translated">这是ECMAScript 5的新功能。JohnResig对此进行&lt;a href=&quot;http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/&quot;&gt;了很好的总结&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="e32f416964e370d5e5ee36f3cd35416da4dbe41b" translate="yes" xml:space="preserve">
          <source>It's just a string you put in your JavaScript files (either at the top of your file or inside of a function) that looks like this:</source>
          <target state="translated">它只是一个字符串,你把它放在你的JavaScript文件中(在文件的顶部或函数内部),看起来像这样。</target>
        </trans-unit>
        <trans-unit id="817c8652ad34e116e5811fa2935033d7b0db3d3f" translate="yes" xml:space="preserve">
          <source>JavaScript &amp;ldquo;strict&amp;rdquo; mode was introduced in ECMAScript 5.</source>
          <target state="translated">ECMAScript 5中引入了JavaScript&amp;ldquo;严格&amp;rdquo;模式。</target>
        </trans-unit>
        <trans-unit id="2b940df5bba00944ecb478eabe69d76ab720b74a" translate="yes" xml:space="preserve">
          <source>JavaScript has always had read-only properties, but you
  could not create them yourself until ES5&amp;rsquo;s &lt;code&gt;Object.createProperty&lt;/code&gt;
  function exposed that capability. If you attempted to assign a value
  to a read-only property, it would fail silently. The assignment would
  not change the property&amp;rsquo;s value, but your program would proceed as
  though it had. This is an integrity hazard that can cause programs to
  go into an inconsistent state. In strict mode, attempting to change a
  read-only property will throw an exception.</source>
          <target state="translated">JavaScript始终具有只读属性，但是您无法自己创建它们，直到ES5的 &lt;code&gt;Object.createProperty&lt;/code&gt; 函数公开该功能为止。 如果您尝试将值分配给只读属性，则它将静默失败。 分配不会更改属性的值，但是您的程序将像执行该操作一样进行。 这是完整性危害，可能导致程序进入不一致状态。 在严格模式下，尝试更改只读属性将引发异常。</target>
        </trans-unit>
        <trans-unit id="ddb6e2a5aa8c17476d0875f1a887b8d5ae8365ff" translate="yes" xml:space="preserve">
          <source>JavaScript has implied global variables. If
  you do not explicitly declare a variable, a global variable is
  implicitly declared for you. This makes programming easier for
  beginners because they can neglect some of their basic housekeeping
  chores. But it makes the management of larger programs much more
  difficult and it significantly degrades reliability. So in strict
  mode, implied global variables are no longer created. You should
  explicitly declare all of your variables.</source>
          <target state="translated">JavaScript有隐含的全局变量。如果你没有显式地声明一个变量,那么全局变量就会隐式地为你声明一个全局变量。这使得初学者在编程时更加容易,因为他们可以忽略一些基本的家务事。但它使大型程序的管理变得更加困难,而且它大大降低了可靠性。所以在严格模式下,隐含全局变量不再创建。你应该明确声明所有的变量。</target>
        </trans-unit>
        <trans-unit id="e2d7eb3c95183e015ef939a2a91a64f282eb81f9" translate="yes" xml:space="preserve">
          <source>List of features (non-exhaustive)</source>
          <target state="translated">特征清单(非详尽无遗)</target>
        </trans-unit>
        <trans-unit id="9c7b40e6928a432a1ec3f4bfbac791071ab83c89" translate="yes" xml:space="preserve">
          <source>Look at these statements and examples from MDN:</source>
          <target state="translated">看看MDN的这些说法和例子。</target>
        </trans-unit>
        <trans-unit id="5469b8b61ffe448f41a3cf81a23966ddb0f980b6" translate="yes" xml:space="preserve">
          <source>Module code is always strict mode code.</source>
          <target state="translated">模块代码永远是严格的模式代码。</target>
        </trans-unit>
        <trans-unit id="c5e07b85564bd88aae754a962908532c8c0e4b6d" translate="yes" xml:space="preserve">
          <source>My project was not a greenfield project when I adopted &lt;code&gt;&quot;use strict&quot;&lt;/code&gt;.  As a result, my IDE is full of red marks because I don't have &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; on half my modules, and JSHint complains about that.  It's a reminder to me about what refactoring I should do in the future.  My goal is to be red mark free due to all of my missing &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; statements, but that is years away now.</source>
          <target state="translated">当我采用 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 时，我的项目不是一个新项目。 结果，我的IDE充满了红色标记，因为我对模块的一半没有 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; ，而JSHint对此表示抱怨。 这让我想起了将来应该进行的重构。 我的目标是消除我所有的 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 声明，以免出现红标，但这距离现在已经有几年了。</target>
        </trans-unit>
        <trans-unit id="44085a42d6cb5c69ac3619d4793a1d1371ccfcfa" translate="yes" xml:space="preserve">
          <source>N.B: The &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; directive is only recognized at the beginning of a script or a function.</source>
          <target state="translated">注意： &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 指令只能在脚本或函数的开头识别。</target>
        </trans-unit>
        <trans-unit id="ae74c50e67b3cccd367e03333a64b86a6bddcf67" translate="yes" xml:space="preserve">
          <source>No duplicates</source>
          <target state="translated">无重复</target>
        </trans-unit>
        <trans-unit id="10b58a0a8940ea2e58dbffa20044c150b681b579" translate="yes" xml:space="preserve">
          <source>Noisy Failure</source>
          <target state="translated">嘈杂的故障</target>
        </trans-unit>
        <trans-unit id="5de14d9134cba90071dacb30ddfcb3e147447382" translate="yes" xml:space="preserve">
          <source>Non-strict mode:</source>
          <target state="translated">非严格模式。</target>
        </trans-unit>
        <trans-unit id="8d36800f9bf0d59a3c2d2c533771cdf6c89406de" translate="yes" xml:space="preserve">
          <source>Normally, JavaScript does not follow strict rules, hence increasing chances of errors. After using &lt;code&gt;&quot;use strict&quot;&lt;/code&gt;, the JavaScript code should follow strict set of rules as in other programming languages such as use of terminators, declaration before initialization, etc.</source>
          <target state="translated">通常，JavaScript不遵循严格的规则，因此会增加出错的机会。 使用 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; ，JavaScript代码应遵循其他编程语言中的严格规则集，例如终止符的使用，初始化之前的声明等。</target>
        </trans-unit>
        <trans-unit id="19034d503e754b80c9af82f89e91b77bf8089b78" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;use strict&lt;/code&gt; was introduced in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;EcmaScript 5&lt;/a&gt; and was kept since then.</source>
          <target state="translated">请注意，在&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;EcmaScript 5&lt;/a&gt;中引入了use strict ，并从那时起一直保持使用。</target>
        </trans-unit>
        <trans-unit id="f92b62c5cd55600499e3b2fcbabc790595cffe51" translate="yes" xml:space="preserve">
          <source>Note that everything in the file &lt;code&gt;myscript.js&lt;/code&gt; will be interpreted in strict mode.</source>
          <target state="translated">请注意，文件 &lt;code&gt;myscript.js&lt;/code&gt; 中的所有内容都将以严格模式进行解释。</target>
        </trans-unit>
        <trans-unit id="0498bcc5326f24110adbf8018626105327647e5c" translate="yes" xml:space="preserve">
          <source>Now let's write the same function in strict mode.</source>
          <target state="translated">现在让我们用严格模式来写同样的函数。</target>
        </trans-unit>
        <trans-unit id="7ca0bcad832ba95a89c297b2ceac7cc9fc126660" translate="yes" xml:space="preserve">
          <source>Now,this code creates &lt;code&gt;nameoftree&lt;/code&gt; in global scope which could be accessed using &lt;code&gt;window.nameoftree&lt;/code&gt;. When we implement &lt;code&gt;use strict&lt;/code&gt; the code would throw error.</source>
          <target state="translated">现在，此代码在全局范围内创建 &lt;code&gt;nameoftree&lt;/code&gt; ，可以使用 &lt;code&gt;window.nameoftree&lt;/code&gt; 进行访问。 当我们执行 &lt;code&gt;use strict&lt;/code&gt; ，代码将引发错误。</target>
        </trans-unit>
        <trans-unit id="10500e54805775e3d661be35724e87f0b1dbc4c9" translate="yes" xml:space="preserve">
          <source>Octal</source>
          <target state="translated">Octal</target>
        </trans-unit>
        <trans-unit id="fc48827db54649898f715056ea3b1540dc1d9231" translate="yes" xml:space="preserve">
          <source>Octal syntax</source>
          <target state="translated">八进制语法</target>
        </trans-unit>
        <trans-unit id="dc4532f060ff3aae00b84dcf89567e87053d969d" translate="yes" xml:space="preserve">
          <source>Of course it also talks about just what a lot of those misfeatures are (were) and how ECMAScript 5 fixes them.</source>
          <target state="translated">当然,它也谈到了很多错误的功能是什么,以及ECMAScript 5是如何修复这些错误的。</target>
        </trans-unit>
        <trans-unit id="a9c8e2b60591d63bee27d639f4a20c27d766869f" translate="yes" xml:space="preserve">
          <source>One of the benefits of strict code is that tools like &lt;a href=&quot;http://developer.yahoo.com/yui/compressor/&quot;&gt;YUI Compressor&lt;/a&gt;
  can do a better job when processing it.</source>
          <target state="translated">严格代码的好处之一是，诸如&lt;a href=&quot;http://developer.yahoo.com/yui/compressor/&quot;&gt;YUI Compressor之&lt;/a&gt;类的工具在处理代码时可以做得更好。</target>
        </trans-unit>
        <trans-unit id="6441d22a368af55c21ee62c9b9e951bc296104eb" translate="yes" xml:space="preserve">
          <source>One of the goals of strict mode is to allow for faster debugging of issues. It helps the developers by throwing exception when certain wrong things occur that can cause silent &amp;amp; strange behaviour of your webpage. The moment we use &lt;code&gt;use strict&lt;/code&gt;, the code will throw out errors which helps developer to fix it in advance.</source>
          <target state="translated">严格模式的目标之一是允许更快地调试问题。 当某些错误事件发生时可能引发网页的静默和奇怪行为，它会引发异常，从而帮助开发人员。 当我们使用 &lt;code&gt;use strict&lt;/code&gt; ，代码将抛出错误，这有助于开发人员提前对其进行修复。</target>
        </trans-unit>
        <trans-unit id="a0456e473032cec369aace45ac22933c75e5b022" translate="yes" xml:space="preserve">
          <source>Or, insert a &lt;code&gt;'use strict';&lt;/code&gt; statement on top of your function body:</source>
          <target state="translated">或者，插入 &lt;code&gt;'use strict';&lt;/code&gt; 在函数主体之上的语句：</target>
        </trans-unit>
        <trans-unit id="5bfc0f97dcb02767913e44123d36722a2485178e" translate="yes" xml:space="preserve">
          <source>People generally think that you shouldn&amp;rsquo;t use those things in the first place, but some developers don&amp;rsquo;t like the constraint and want to use all the features of the language.</source>
          <target state="translated">人们通常认为您不应该一开始就使用这些东西，但是一些开发人员不喜欢这种约束，而是想使用该语言的所有功能。</target>
        </trans-unit>
        <trans-unit id="f73ad56101ddb20a046ef96d3b285d9ee896e394" translate="yes" xml:space="preserve">
          <source>Please check the function below written in non-strict mode:</source>
          <target state="translated">请检查以下非严格模式下写的功能。</target>
        </trans-unit>
        <trans-unit id="ea0e96af85e42105da55a87738dffc05d9c4b8aa" translate="yes" xml:space="preserve">
          <source>Please refer to &lt;a href=&quot;http://www.w3schools.com/js/js_strict.asp&quot;&gt;http://www.w3schools.com/js/js_strict.asp&lt;/a&gt; to know more</source>
          <target state="translated">请参考&lt;a href=&quot;http://www.w3schools.com/js/js_strict.asp&quot;&gt;http://www.w3schools.com/js/js_strict.asp&lt;/a&gt;了解更多信息</target>
        </trans-unit>
        <trans-unit id="73834459f6254152ddd4773c32f68818b0dbafff" translate="yes" xml:space="preserve">
          <source>Prevents accidental declaration of global variables.Using &lt;code&gt;&quot;use strict()&quot;&lt;/code&gt; will make sure that variables are declared with &lt;code&gt;var&lt;/code&gt; before use. 
Eg:</source>
          <target state="translated">防止意外声明全局变量。 &lt;code&gt;&quot;use strict()&quot;&lt;/code&gt; 将确保在使用变量之前使用 &lt;code&gt;var&lt;/code&gt; 声明变量。 例如：</target>
        </trans-unit>
        <trans-unit id="d19ef64a263f6819272bad8f55d25e26eaca089d" translate="yes" xml:space="preserve">
          <source>Prevents accidental globals</source>
          <target state="translated">防止意外的球状物</target>
        </trans-unit>
        <trans-unit id="74d06b24393fc0bc828f7990084cc04f0d92db56" translate="yes" xml:space="preserve">
          <source>Problem at line 1 character 1: Missing &quot;use strict&quot; statement.</source>
          <target state="translated">第1行字符1处的问题:缺少 &quot;使用严格 &quot;语句。</target>
        </trans-unit>
        <trans-unit id="313048df06e5e26643dc1670c345e8164e9763eb" translate="yes" xml:space="preserve">
          <source>Putting it in your code now shouldn't cause any problems with current browsers as it's just a string. It may cause problems with your code in the future if your code violates the pragma.  For instance, if you currently have &lt;code&gt;foo = &quot;bar&quot;&lt;/code&gt; without defining &lt;code&gt;foo&lt;/code&gt; first, your code will start failing...which is a good thing in my opinion.</source>
          <target state="translated">现在将其放入您的代码应该不会对当前的浏览器造成任何问题，因为它只是一个字符串。 如果您的代码违反了编译指示，将来可能会导致您的代码出现问题。 例如，如果您当前具有 &lt;code&gt;foo = &quot;bar&quot;&lt;/code&gt; 而不首先定义 &lt;code&gt;foo&lt;/code&gt; ，则您的代码将开始失败...在我看来，这是一件好事。</target>
        </trans-unit>
        <trans-unit id="136f357105c51a569118fd5e9a4b2d1dc183c426" translate="yes" xml:space="preserve">
          <source>Recently, I ran some of my JavaScript code through Crockford's &lt;a href=&quot;http://www.jslint.com/&quot;&gt;JSLint&lt;/a&gt;, and it gave the following error:</source>
          <target state="translated">最近，我通过Crockford的&lt;a href=&quot;http://www.jslint.com/&quot;&gt;JSLint&lt;/a&gt;运行了一些JavaScript代码，它给出了以下错误：</target>
        </trans-unit>
        <trans-unit id="86a7a25b3cd35a1d2197e94d964ad1f2752ed5ee" translate="yes" xml:space="preserve">
          <source>Requires all property names in an object literal to be unique (&lt;code&gt;var x = {x1: &quot;1&quot;, x1: &quot;2&quot;}&lt;/code&gt;)</source>
          <target state="translated">要求对象文字中的所有属性名称必须唯一（ &lt;code&gt;var x = {x1: &quot;1&quot;, x1: &quot;2&quot;}&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b82277b8027feee64c843902b18fa2f0eaf9f6f9" translate="yes" xml:space="preserve">
          <source>Reserved words for future JavaScript versions</source>
          <target state="translated">为以后的JavaScript版本保留字数</target>
        </trans-unit>
        <trans-unit id="00fe32fa055c05b65cba3aa264fdbb5e9ec51640" translate="yes" xml:space="preserve">
          <source>Safer eval()</source>
          <target state="translated">更安全的 eval()</target>
        </trans-unit>
        <trans-unit id="4651a34e4df9619783ad372f905d6d3b84e9d76d" translate="yes" xml:space="preserve">
          <source>Scope</source>
          <target state="translated">Scope</target>
        </trans-unit>
        <trans-unit id="c5ed7ad12df1fb5c64372abffb2e9c638c2000fd" translate="yes" xml:space="preserve">
          <source>Setting a value to an undeclared variable</source>
          <target state="translated">将一个值设置为未声明的变量</target>
        </trans-unit>
        <trans-unit id="158a5623a22ae074fb939328027da4313300684f" translate="yes" xml:space="preserve">
          <source>Silent failing assignments will throw error in strict mode (assigning &lt;code&gt;NaN = 5;&lt;/code&gt;)</source>
          <target state="translated">静默失败的分配将在严格模式下引发错误（分配 &lt;code&gt;NaN = 5;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="a249bbd654c1ea670a1ce21638e02e4758f365f8" translate="yes" xml:space="preserve">
          <source>Small examples to compare:</source>
          <target state="translated">小的例子来比较。</target>
        </trans-unit>
        <trans-unit id="4a4f135a79bb2ffe4e6528781a0caca54f5e9001" translate="yes" xml:space="preserve">
          <source>So what is &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; all about, what does it imply, and is it still relevant?</source>
          <target state="translated">那么什么是 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; 所有这些，这意味着什么，并且它仍然有意义吗？</target>
        </trans-unit>
        <trans-unit id="efdeaaeb5cef631181f2b0b6615ca443336cee21" translate="yes" xml:space="preserve">
          <source>So, I suppose it's a bit like the &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; you can use in Perl &lt;em&gt;(hence the name?)&lt;/em&gt;: it helps you make fewer errors, by detecting more things that could lead to breakages.</source>
          <target state="translated">因此，我想这有点像您可以在Perl中使用 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; &lt;em&gt;（因此得名？）&lt;/em&gt; ：它通过检测更多可能导致损坏的内容来帮助您减少错误。</target>
        </trans-unit>
        <trans-unit id="ada52d888ccf16d2711b8a6377768a782af5c30e" translate="yes" xml:space="preserve">
          <source>Sources:</source>
          <target state="translated">Sources:</target>
        </trans-unit>
        <trans-unit id="56888f9c90a484f01fdab9bff41f2251fdd72944" translate="yes" xml:space="preserve">
          <source>Strict Mode - JavaScript | MDN</source>
          <target state="translated">严格模式-JavaScript</target>
        </trans-unit>
        <trans-unit id="4c97b7a3fcb78ad7a4d70823a936a41e3b32a18f" translate="yes" xml:space="preserve">
          <source>Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a &quot;strict&quot; operating context. This strict context prevents certain actions from being taken and throws more exceptions.</source>
          <target state="translated">严格模式是ECMAScript 5中的一个新功能,它允许你将程序或函数置于 &quot;严格 &quot;的操作上下文中。这个严格的上下文可以阻止某些操作,并抛出更多的异常。</target>
        </trans-unit>
        <trans-unit id="0925c525a403588f0be5f281195e7ab1228e41ce" translate="yes" xml:space="preserve">
          <source>Strict mode changes previously accepted &quot;bad syntax&quot; into real errors.</source>
          <target state="translated">严格模式将以前接受的 &quot;坏语法 &quot;变成了真正的错误。</target>
        </trans-unit>
        <trans-unit id="dfa23d0a0c1ade7fa039058260fbdf2a088763e0" translate="yes" xml:space="preserve">
          <source>Strict mode does not alias properties of the &lt;code&gt;arguments&lt;/code&gt; object with the formal parameters. (i.e. in &lt;code&gt;function sum (a,b) { return arguments[0] + b;}&lt;/code&gt; This works because &lt;code&gt;arguments[0]&lt;/code&gt; is bound to &lt;code&gt;a&lt;/code&gt; and so on. )</source>
          <target state="translated">严格模式不会将 &lt;code&gt;arguments&lt;/code&gt; 对象的属性与形式参数混用。 （即，在 &lt;code&gt;function sum (a,b) { return arguments[0] + b;}&lt;/code&gt; 之所以有效，是因为 &lt;code&gt;arguments[0]&lt;/code&gt; 绑定到 &lt;code&gt;a&lt;/code&gt; 上 ，依此类推。）</target>
        </trans-unit>
        <trans-unit id="1e7b5b22d16bdb8a5476e2e6c1fdc04bffef1ee0" translate="yes" xml:space="preserve">
          <source>Strict mode for functions: Likewise, to invoke strict mode for a
  function, put the exact statement &quot;use strict&quot;; (or 'use strict';) in
  the function's body before any other statements.</source>
          <target state="translated">函数的严格模式。同样,要调用一个函数的严格模式,请在函数的正文中的 &quot;use strict&quot;;(或'use strict';)中,在其他任何语句之前加上 &quot;use strict&quot;;(或'use strict';)。</target>
        </trans-unit>
        <trans-unit id="aba1aed4e7b22cf2830dc704dbcbc7728a024ed8" translate="yes" xml:space="preserve">
          <source>Strict mode helps out in a couple ways:</source>
          <target state="translated">严格模式有几个方面的帮助。</target>
        </trans-unit>
        <trans-unit id="a1071c6d144e305f80fc9cb060b9efe833597dc7" translate="yes" xml:space="preserve">
          <source>Strict mode is now &lt;a href=&quot;http://caniuse.com/#use-strict&quot;&gt;supported by all major browsers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://caniuse.com/#use-strict&quot;&gt;所有主要浏览器&lt;/a&gt;现在都支持严格模式。</target>
        </trans-unit>
        <trans-unit id="fecd3bae551b0fe9196f1a9e57dd72fde9f330a3" translate="yes" xml:space="preserve">
          <source>Strict mode makes it easier to write &quot;secure&quot; JavaScript.</source>
          <target state="translated">严格模式让编写 &quot;安全 &quot;的JavaScript变得更加容易。</target>
        </trans-unit>
        <trans-unit id="ffd44cb0172afba4c6ad8d00101e96f6c2f1ced4" translate="yes" xml:space="preserve">
          <source>Strict mode makes several changes to normal JavaScript semantics:</source>
          <target state="translated">严格模式对正常的JavaScript语义做了一些改变。</target>
        </trans-unit>
        <trans-unit id="42aae285b68e8a7fe6a0256e8acb1b55fb12a44f" translate="yes" xml:space="preserve">
          <source>Strict mode requires that all variable binding be done statically.
  That means that the features that previously required dynamic binding
  must be eliminated or modified. Specifically, the with statement is
  eliminated, and the eval function&amp;rsquo;s ability to tamper with the
  environment of its caller is severely restricted.</source>
          <target state="translated">严格模式要求所有变量绑定都是静态完成的。 这意味着必须消除或修改以前需要动态绑定的功能。 具体来说，消除了with语句，并且eval函数篡改其调用者环境的能力受到严格限制。</target>
        </trans-unit>
        <trans-unit id="981037f259f5ec994dd978355da84261730db94d" translate="yes" xml:space="preserve">
          <source>Strict mode:</source>
          <target state="translated">严格的模式。</target>
        </trans-unit>
        <trans-unit id="73600aa2e4bc7bac1a44ca2049803b7ae131c09a" translate="yes" xml:space="preserve">
          <source>The &quot;use strict&quot; directive is new in
  JavaScript 1.8.5 (ECMAScript version 5). It is not a statement, but a
  literal expression, ignored by earlier versions of JavaScript. The
  purpose of &quot;use strict&quot; is to indicate that the code should be
  executed in &quot;strict mode&quot;. With strict mode, you can not, for example,
  use undeclared variables.</source>
          <target state="translated">在JavaScript 1.8.5版本(ECMAScript 5)中新增了 &quot;use strict &quot;指令。它不是一个语句,而是一个字面表达式,被早期版本的JavaScript忽略了。使用 &quot;use strict &quot;的目的是指示代码应该在 &quot;严格模式 &quot;下执行。在严格模式下,你不能使用未声明的变量等。</target>
        </trans-unit>
        <trans-unit id="da414cbc8191e02ce23dc8839e8f655afd89e64c" translate="yes" xml:space="preserve">
          <source>The &quot;use strict&quot; directive is new in JavaScript 1.8.5 (ECMAScript
  version 5).</source>
          <target state="translated">在JavaScript 1.8.5(ECMAScript 5版本)中新增了 &quot;使用严格 &quot;指令。</target>
        </trans-unit>
        <trans-unit id="871bf0916612bf268e233d62d36329c75cb6843d" translate="yes" xml:space="preserve">
          <source>The &quot;use strict&quot; directive was new in ECMAScript version 5.</source>
          <target state="translated">&quot;使用严格 &quot;指令是ECMAScript 5版本中新增的。</target>
        </trans-unit>
        <trans-unit id="bc3dd2b1ab543df882ca1a48ca20880937f9ee29" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;JavaScript strict mode&lt;/a&gt; is a feature in &lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-262.htm&quot;&gt;ECMAScript 5&lt;/a&gt;. You can enable the strict mode by declaring this in the top of your script/function.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;JavaScript严格模式&lt;/a&gt;是&lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-262.htm&quot;&gt;ECMAScript 5中&lt;/a&gt;的功能。 您可以通过在脚本/函数顶部进行声明来启用严格模式。</target>
        </trans-unit>
        <trans-unit id="c3ab9d9f8d23f7bf773bc9224e29ab32c41301a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use strict&lt;/code&gt; directive indicates that the following code (in a script or a function) is strict code.
The code in the highest level of a script (code that is not in a function) is considered strict code when the script contains a &lt;code&gt;use strict&lt;/code&gt; directive.
The content of a function is considered strict code when the function itself is defined in a strict code or when the function contains a &lt;code&gt;use strict&lt;/code&gt; directive.
Code that is passed to an &lt;code&gt;eval()&lt;/code&gt; method is considered strict code when &lt;code&gt;eval()&lt;/code&gt; was called from a strict code or contains the &lt;code&gt;use strict&lt;/code&gt; directive itself.</source>
          <target state="translated">&lt;code&gt;use strict&lt;/code&gt; 指令指示以下代码（在脚本或函数中）是严格代码。 当脚本包含 &lt;code&gt;use strict&lt;/code&gt; 指令时，脚本最高级别的代码（不在函数中的代码）被视为严格代码。 当函数本身在严格代码中定义或当函数包含 &lt;code&gt;use strict&lt;/code&gt; 指令时，该函数的内容被视为严格代码。 当从严格代码调用 &lt;code&gt;eval()&lt;/code&gt; 或包含 &lt;code&gt;use strict&lt;/code&gt; 指令本身时，传递给 &lt;code&gt;eval()&lt;/code&gt; 方法的代码被视为严格代码。</target>
        </trans-unit>
        <trans-unit id="e02035bfd1451179fb6fa7438f433460a260f654" translate="yes" xml:space="preserve">
          <source>The arguments pseudo array becomes a little bit more
  array-like in ES5. In strict mode, it loses its &lt;code&gt;callee&lt;/code&gt; and &lt;code&gt;caller&lt;/code&gt;
  properties. This makes it possible to pass your &lt;code&gt;arguments&lt;/code&gt; to untrusted
  code without giving up a lot of confidential context. Also, the
  &lt;code&gt;arguments&lt;/code&gt; property of functions is eliminated.</source>
          <target state="translated">参数伪数组在ES5中变得有点像数组。 在严格模式下，它将丢失其 &lt;code&gt;callee&lt;/code&gt; 和 &lt;code&gt;caller&lt;/code&gt; 属性。 这样就可以将您的 &lt;code&gt;arguments&lt;/code&gt; 传递给不受信任的代码，而无需放弃很多机密的上下文。 同样，函数的 &lt;code&gt;arguments&lt;/code&gt; 属性也被消除。</target>
        </trans-unit>
        <trans-unit id="a01550b956584e50c573534903412b194d39ea38" translate="yes" xml:space="preserve">
          <source>The main reasons why developers should use &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; are:</source>
          <target state="translated">开发人员应使用 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 使用&amp;rdquo;的主要原因是：</target>
        </trans-unit>
        <trans-unit id="e11cb88feedf1f50b774d7918351ac724492485e" translate="yes" xml:space="preserve">
          <source>The octal (or base 8) representation of numbers was extremely
  useful when doing machine-level programming on machines whose word
  sizes were a multiple of 3. You needed octal when working with the CDC
  6600 mainframe, which had a word size of 60 bits. If you could read
  octal, you could look at a word as 20 digits. Two digits represented
  the op code, and one digit identified one of 8 registers. During the
  slow transition from machine codes to high level languages, it was
  thought to be useful to provide octal forms in programming languages.</source>
          <target state="translated">当在字大小是3的倍数的机器上进行机器级编程时,数字的八进制(或基数8)表示是非常有用的。 在CDC 6600主机上工作时,你需要八进制,因为它的字大小是60位。如果你能读八进制,你可以把一个字看成20位。两位数代表运算码,一位数代表8个寄存器中的一个。在从机器码向高级语言缓慢过渡的过程中,人们认为在编程语言中提供八进制形式是有用的。</target>
        </trans-unit>
        <trans-unit id="1b9d97e5a3c8f84f9eca85dd8d59d37bf769eaf4" translate="yes" xml:space="preserve">
          <source>The purpose of &quot;use strict&quot; is to indicate that the code should be
executed in &quot;strict mode&quot;.</source>
          <target state="translated">&quot;使用严格模式 &quot;的目的是为了表示代码应该在 &quot;严格模式 &quot;下执行。</target>
        </trans-unit>
        <trans-unit id="50e416e7691b94ac73a19329e3d0d84aa7766f77" translate="yes" xml:space="preserve">
          <source>The quotes around the command make sure that the code will still work in older browsers as well (although the things that generate a syntax error in strict mode will generally just cause the script to malfunction in some hard to detect way in those older browsers).</source>
          <target state="translated">命令周围的引号可以确保代码在老版本的浏览器中也能正常工作 (虽然在严格模式下产生语法错误的东西通常只会导致脚本在老版本的浏览器中以某种难以察觉的方式发生故障)。</target>
        </trans-unit>
        <trans-unit id="fef18bab467b7c8273c3132a626d92c3771e553a" translate="yes" xml:space="preserve">
          <source>The statement &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; instructs the browser to use the Strict mode, which is a reduced and safer feature set of JavaScript.</source>
          <target state="translated">声明 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; 指示浏览器使用严格模式，这是JavaScript的简化和更安全的功能集。</target>
        </trans-unit>
        <trans-unit id="092a4db52edff1b55719897e8c31aebfe3163802" translate="yes" xml:space="preserve">
          <source>The strict mode of ECMAScript 5 is a restricted subset of the JavaScript language, which eliminates relevant deficits of the language and features more stringent error checking and higher security. The following lists the differences between strict mode and normal mode (of which the first three are particularly important):</source>
          <target state="translated">ECMAScript 5的严格模式是JavaScript语言的一个限制性子集,它消除了JavaScript语言的相关缺陷,具有更严格的错误检查和更高的安全性。下面列出了严格模式和普通模式的区别(其中前三者尤为重要)。</target>
        </trans-unit>
        <trans-unit id="35a411c4b982908019ab5ca4beff69a7f8222678" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;&quot;arguments&quot;&lt;/code&gt; cannot be used as a variable:</source>
          <target state="translated">字符串 &lt;code&gt;&quot;arguments&quot;&lt;/code&gt; 不能用作变量：</target>
        </trans-unit>
        <trans-unit id="ceeec8e70875ba0392801d9dae48808cf2b43044" translate="yes" xml:space="preserve">
          <source>There are a number of situations that could cause &lt;code&gt;this&lt;/code&gt;
  to be bound to the global object. For example, if you forget to
  provide the &lt;code&gt;new&lt;/code&gt; prefix when calling a constructor function, the
  constructor's &lt;code&gt;this&lt;/code&gt; will be bound unexpectedly to the global object, so
  instead of initializing a new object, it will instead be silently
  tampering with global variables. In these situations, strict mode will
  instead bind &lt;code&gt;this&lt;/code&gt; to &lt;code&gt;undefined&lt;/code&gt;, which will cause the constructor to
  throw an exception instead, allowing the error to be detected much
  sooner.</source>
          <target state="translated">在许多情况下，可能会导致将其绑定到全局对象。 例如，如果您在调用构造函数时忘记提供 &lt;code&gt;new&lt;/code&gt; 前缀，则构造函数的 &lt;code&gt;this&lt;/code&gt; 前缀将意外绑定到全局对象，因此与其初始化一个新对象，不如对它进行静默篡改全局变量。 在这些情况下，严格模式会将其绑定到 &lt;code&gt;undefined&lt;/code&gt; ，这将导致构造函数抛出异常，从而允许更早地检测到错误。</target>
        </trans-unit>
        <trans-unit id="2b08b8743bda54c101d135ee7a32c07df9257bf6" translate="yes" xml:space="preserve">
          <source>There are few more but I need to gain more knowledge on that.</source>
          <target state="translated">还有一些,但我还需要在这方面多积累一些知识。</target>
        </trans-unit>
        <trans-unit id="048399442f3a5673fb36ae4b92a85ca20458e560" translate="yes" xml:space="preserve">
          <source>There's a good talk by some people who were on the ECMAScript committee: &lt;a href=&quot;http://www.youtube.com/watch?v=Kq4FpMe6cRs&quot;&gt;Changes to JavaScript, Part 1: ECMAScript 5&quot;&lt;/a&gt; about how incremental use of the &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; switch allows JavaScript implementers to clean up a lot of the dangerous features of JavaScript without suddenly breaking every website in the world.</source>
          <target state="translated">ECMAScript委员会中的一些人有一个很好的演讲： &lt;a href=&quot;http://www.youtube.com/watch?v=Kq4FpMe6cRs&quot;&gt;JavaScript的变化，第1部分：ECMAScript 5&amp;rdquo;，&lt;/a&gt;内容涉及 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 开关的增量使用如何使JavaScript实现者能够清除JavaScript的许多危险特性，而无需突然破坏了世界上每个网站。</target>
        </trans-unit>
        <trans-unit id="3e37513efc84c83ee98db8c100f7f728f1063cb3" translate="yes" xml:space="preserve">
          <source>This article about Javascript Strict Mode might interest you: &lt;a href=&quot;http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/&quot;&gt;John Resig - ECMAScript 5 Strict Mode, JSON, and More&lt;/a&gt;</source>
          <target state="translated">这篇有关Javascript严格模式的文章可能会让您感兴趣： &lt;a href=&quot;http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/&quot;&gt;John Resig-ECMAScript 5严格模式，JSON等&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d9da1eab3a2754c07bf853818048cf86ef9a8bc1" translate="yes" xml:space="preserve">
          <source>This is no longer the case in ECMAScript 6 (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1041128&quot;&gt;bug 1041128&lt;/a&gt;).</source>
          <target state="translated">ECMAScript 6（ &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1041128&quot;&gt;错误1041128&lt;/a&gt; ）不再是这种情况。</target>
        </trans-unit>
        <trans-unit id="dd413d88ab98b532770fd5f2fc9d3f7ef62c23ce" translate="yes" xml:space="preserve">
          <source>Those that prefer not to use rulers to do their lines straight usually end up in those pages asking for others to debug their code.</source>
          <target state="translated">那些不喜欢用尺子直接做行的人,最后通常会在那些页面上要求别人调试他们的代码。</target>
        </trans-unit>
        <trans-unit id="a7fd2f79041e08e0c8925669b484de4ed27bacfa" translate="yes" xml:space="preserve">
          <source>To quote some interesting parts:</source>
          <target state="translated">引用一些有趣的部分:</target>
        </trans-unit>
        <trans-unit id="18959bdb468277df6861dc45265096e4e03b934c" translate="yes" xml:space="preserve">
          <source>To read more about it you can refer &lt;a href=&quot;http://www.w3schools.com/js/js_strict.asp&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">要了解更多信息，可以&lt;a href=&quot;http://www.w3schools.com/js/js_strict.asp&quot;&gt;在这里&lt;/a&gt;参考。</target>
        </trans-unit>
        <trans-unit id="42a3bb278c71efefd64c79603bbd7e4b085a3e13" translate="yes" xml:space="preserve">
          <source>Transitioning to strict mode</source>
          <target state="translated">过渡到严格模式</target>
        </trans-unit>
        <trans-unit id="a036c9d3bcde8686731beb5eb26de106ef7784ed" translate="yes" xml:space="preserve">
          <source>Uncaught ReferenceError: nameoftree is not defined</source>
          <target state="translated">Uncaught ReferenceError:nameoftree未定义</target>
        </trans-unit>
        <trans-unit id="4c156a916f8a6f9574955750b2a1451326982d3f" translate="yes" xml:space="preserve">
          <source>Uncaught SyntaxError: Duplicate data property in object literal not
  allowed in strict mode</source>
          <target state="translated">UncaughtaxError:在严格模式下,不允许对象字面符号中的重复数据属性。</target>
        </trans-unit>
        <trans-unit id="7aaa011136ee898447ada0c1377720eb7677dcbb" translate="yes" xml:space="preserve">
          <source>Use Strict is used to show common and repeated errors so that it is handled differently , and changes the way java script runs , such changes are :</source>
          <target state="translated">使用Strict是用来显示常见的和重复的错误,使其得到不同的处理,并改变java脚本的运行方式,这样的改变是。</target>
        </trans-unit>
        <trans-unit id="e6a2b8c9600130299cd64c46f5748d992d100d46" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;'use strict';&lt;/code&gt; does not suddenly make your code better.</source>
          <target state="translated">使用 &lt;code&gt;'use strict';&lt;/code&gt; 不会突然使您的代码变得更好。</target>
        </trans-unit>
        <trans-unit id="d4d6e1571c87c5715f5b1379bfd5792f9c941414" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;delete&lt;/code&gt; on a variable name &lt;code&gt;delete myVariable;&lt;/code&gt;</source>
          <target state="translated">在变量名上使用 &lt;code&gt;delete&lt;/code&gt; &lt;code&gt;delete myVariable;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="21daefad12ef11f96031aa365048e01337e377ba" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;eval&lt;/code&gt; or &lt;code&gt;arguments&lt;/code&gt; as variable or function argument name</source>
          <target state="translated">使用 &lt;code&gt;eval&lt;/code&gt; 或 &lt;code&gt;arguments&lt;/code&gt; 作为变量或函数参数名称</target>
        </trans-unit>
        <trans-unit id="e4d9563de300edd23fd7c3850db04036a25d79ee" translate="yes" xml:space="preserve">
          <source>We will get the following error.</source>
          <target state="translated">我们会得到以下错误。</target>
        </trans-unit>
        <trans-unit id="4dbef12467da7f5817c1305f1e396998d11eafa3" translate="yes" xml:space="preserve">
          <source>What does “use strict” do in JavaScript, and what is the reasoning behind it</source>
          <target state="translated">在JavaScript中,&quot;使用严格 &quot;有什么作用,其背后的道理是什么?</target>
        </trans-unit>
        <trans-unit id="4c18ac01741b6780a43048c77a24b5e2c0540bae" translate="yes" xml:space="preserve">
          <source>What things are prohibited in strict mode?</source>
          <target state="translated">严格模式下哪些事情是禁止的?</target>
        </trans-unit>
        <trans-unit id="a48ab950c2dd3afad682dd72baa410b63bc6e0a1" translate="yes" xml:space="preserve">
          <source>When a JavaScript engine sees this &lt;em&gt;directive&lt;/em&gt;, it will start to interpret the code in a special mode. In this mode, errors are thrown up when certain coding practices that could end up being potential bugs are detected (which is the reasoning behind the strict mode).</source>
          <target state="translated">当JavaScript引擎看到此&lt;em&gt;指令时&lt;/em&gt; ，它将开始以特殊模式解释代码。 在这种模式下，当检测到某些可能最终成为潜在错误的编码实践时，就会引发错误（这是严格模式下的原因）。</target>
        </trans-unit>
        <trans-unit id="c300272a821d8e78995c84df72b42286f65185e1" translate="yes" xml:space="preserve">
          <source>When adding &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt;, the following cases will throw a &lt;strong&gt;SyntaxError&lt;/strong&gt; before the script is executing:</source>
          <target state="translated">当加上 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; ，以下情况将在脚本执行之前引发&lt;strong&gt;SyntaxError&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="1027ddb2af687a000e1f43ee83be4b6c15b8e572" translate="yes" xml:space="preserve">
          <source>When we have duplicate property, it throws an exception</source>
          <target state="translated">当我们有重复的属性时,它会抛出一个异常。</target>
        </trans-unit>
        <trans-unit id="9786db102e0c8271479dae448d90367999358652" translate="yes" xml:space="preserve">
          <source>Where should I use &lt;code&gt;'use strict';&lt;/code&gt;?</source>
          <target state="translated">我应该在哪里使用 &lt;code&gt;'use strict';&lt;/code&gt; ？</target>
        </trans-unit>
        <trans-unit id="f5501718d21e44942c25ce38f65fbb4d2ea2d9e5" translate="yes" xml:space="preserve">
          <source>Which might be helpful if you have to mix old and new code ;-)</source>
          <target state="translated">如果你必须混合新旧代码,这可能会有帮助;-)</target>
        </trans-unit>
        <trans-unit id="184e2f1b60c365bdbd0ab8e43df510d15bccc6c0" translate="yes" xml:space="preserve">
          <source>Why Strict Mode?</source>
          <target state="translated">为什么是严格模式?</target>
        </trans-unit>
        <trans-unit id="2e23b3df3a20138c20d2c8e491ee2570ddf50bfb" translate="yes" xml:space="preserve">
          <source>Will restrict uses of keywords as variables. Trying to use them will throw errors.</source>
          <target state="translated">将限制关键字作为变量的使用。试图使用它们会抛出错误。</target>
        </trans-unit>
        <trans-unit id="a71ea5c1e3ada42c1b0d204b7398947c063f4a74" translate="yes" xml:space="preserve">
          <source>With strict mode, you can not, for example, use undeclared variables.</source>
          <target state="translated">在严格模式下,你不能使用未声明的变量等。</target>
        </trans-unit>
        <trans-unit id="161190f164917a24616c94f2e53483ba35c86211" translate="yes" xml:space="preserve">
          <source>Worse, since the developer is in normal mode, they don&amp;rsquo;t have the advantages of extra errors being thrown, so the error might fail silently.</source>
          <target state="translated">更糟糕的是，由于开发人员处于正常模式，因此他们没有抛出额外错误的优点，因此错误可能会静默地失败。</target>
        </trans-unit>
        <trans-unit id="20bd93de5e3a15e93016dccea88cc98f2d1f95ed" translate="yes" xml:space="preserve">
          <source>Writing &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; at the very top of your JS file turns on strict
syntax checking. It does the following tasks for us:</source>
          <target state="translated">撰写 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; JS文件的最顶部会打开严格的语法检查。 它为我们执行以下任务：</target>
        </trans-unit>
        <trans-unit id="290c3178ac3f676c45b24cb8690955d39c8b4d14" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;read more on MDN&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;在MDN上阅读更多内容&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="4f7487ef619ee058617d220fbdcb1ff71b70d7e8" translate="yes" xml:space="preserve">
          <source>You can refer to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;MDN documentation&lt;/a&gt; for more information.</source>
          <target state="translated">您可以参考&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;MDN文档&lt;/a&gt;以获取更多信息。</target>
        </trans-unit>
        <trans-unit id="5b84b03d930a95b32ff7fff301afe23652a22474" translate="yes" xml:space="preserve">
          <source>You cannot use the &lt;code&gt;with&lt;/code&gt;-statement in strict mode.</source>
          <target state="translated">您不能在严格模式下使用 &lt;code&gt;with&lt;/code&gt; -statement的语句。</target>
        </trans-unit>
        <trans-unit id="dd707966b9d71560d8d3c73a2fd4a8e76a284eb2" translate="yes" xml:space="preserve">
          <source>[Ref: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;Strict mode&lt;/a&gt;, &lt;em&gt;Mozilla Developer Network&lt;/em&gt;]</source>
          <target state="translated">[参考： &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;严格模式&lt;/a&gt; ， &lt;em&gt;Mozilla开发人员网络&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="5640892492b3a140a15198eb7f173e54896999fc" translate="yes" xml:space="preserve">
          <source>eliminates some JavaScript silent errors by changing them
to throw errors.</source>
          <target state="translated">通过将一些JavaScript的无声错误改成抛出错误,消除了一些JavaScript的无声错误。</target>
        </trans-unit>
        <trans-unit id="16de3f2d338913f29c8f9f128d32ba48cbb95641" translate="yes" xml:space="preserve">
          <source>fixes mistakes that make it difficult for JavaScript
engines to perform optimizations.</source>
          <target state="translated">修复了导致JavaScript引擎难以执行优化的错误。</target>
        </trans-unit>
        <trans-unit id="0364811af40b95fa72a60403bfe331e1a6c30201" translate="yes" xml:space="preserve">
          <source>for more information vistit &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode&quot;&gt;Strict Mode- Javascript&lt;/a&gt;</source>
          <target state="translated">有关更多信息，请访问&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode&quot;&gt;严格模式-Javascript&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db0b8b9b231300c663125ba290de7d8ad030cebe" translate="yes" xml:space="preserve">
          <source>forbids some unsafe or error-prone language features</source>
          <target state="translated">禁止一些不安全或容易出错的语言功能</target>
        </trans-unit>
        <trans-unit id="01f927911ed04f070c42384b5acdb1eaa080798c" translate="yes" xml:space="preserve">
          <source>prohibits some syntax likely to be defined in future
versions of ECMAScript.</source>
          <target state="translated">禁止一些可能在未来版本的ECMAScript中定义的语法。</target>
        </trans-unit>
        <trans-unit id="fee36c7820652167ca4505a5dcd195808ce9cfe0" translate="yes" xml:space="preserve">
          <source>shows an error if you try to assign to an undeclared variable</source>
          <target state="translated">如果你试图分配给一个未声明的变量,会显示一个错误,如果你试图分配给一个未声明的变量</target>
        </trans-unit>
        <trans-unit id="65b524cf6d7ace1ef4955efb2c2c0f3cea4f4878" translate="yes" xml:space="preserve">
          <source>stops you from overwriting key JS system libraries</source>
          <target state="translated">阻止你覆盖关键的JS系统库。</target>
        </trans-unit>
        <trans-unit id="118ad7cd18fd1f4ce16961837b121bd93511a087" translate="yes" xml:space="preserve">
          <source>you can also read this &lt;a href=&quot;https://www.nczonline.net/blog/2012/03/13/its-time-to-start-using-javascript-strict-mode/&quot;&gt;article&lt;/a&gt; for the details</source>
          <target state="translated">您也可以阅读&lt;a href=&quot;https://www.nczonline.net/blog/2012/03/13/its-time-to-start-using-javascript-strict-mode/&quot;&gt;本文&lt;/a&gt;以了解详细信息</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
