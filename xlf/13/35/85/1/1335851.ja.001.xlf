<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/1335851">
    <body>
      <group id="1335851">
        <trans-unit id="59655149a5150c3ca8c39faa908f2d6163ff8a16" translate="yes" xml:space="preserve">
          <source>&quot;Use Strict&quot;; is an insurance that programmer will not use the loose or the bad properties of JavaScript. It is a guide, just like a ruler will help you make straight lines. &quot;Use Strict&quot; will help you do &quot;Straight coding&quot;.</source>
          <target state="translated">&quot;Use Strict&quot;;は、プログラマーがJavaScriptの緩い性質や悪い性質を使わないための保険です。定規がまっすぐな線を引くのに役立つように、それはガイドなのです。&quot;Use Strict &quot;は &quot;まっすぐなコーディング &quot;をするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="3004d681862814bd492c00f298f79de8546a16e3" translate="yes" xml:space="preserve">
          <source>&quot;use strict&quot;; is the ECMA effort to make JavaScript a little bit more robust. It brings in JS an attempt to make it at least a little &quot;strict&quot; (other languages implement strict rules since the 90s). It actually &quot;forces&quot; JavaScript developers to follow some sort of coding best practices.
Still, JavaScript is very fragile. There is no such thing as typed variables, typed methods, etc.
I strongly recommend JavaScript developers to learn a more robust language such as Java or ActionScript3, and implement the same best practices in your JavaScript code, it will work better and be easier to debug.</source>
          <target state="translated">&quot;use strict&quot;;は、JavaScript をもう少し頑健にするための ECMA の努力です。これは、少なくとも少しは &quot;厳格&quot; にしようとする試みとして JS を持ち込むものです (他の言語は 90 年代以降、厳格なルールを実装しています)。実際には、JavaScript の開発者にある種のコーディングのベストプラクティスに従うことを「強制」しています。それでも、JavaScript は非常に脆弱です。型付き変数や型付きメソッドなどのようなものはありません。私はJavaScript開発者がJavaやActionScript3のようなより堅牢な言語を学び、JavaScriptのコードに同じベストプラクティスを実装することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="a890ef5e6862668a8f388386b332421857c3174b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://web.archive.org/web/20170707015027/http://cjihrig.com/blog/javascripts-strict-mode-and-why-you-should-use-it/&quot;&gt;JavaScript&amp;rsquo;s Strict Mode and Why You Should Use It&lt;/a&gt; on Colin J. Ihrig's blog (archived version)</source>
          <target state="translated">&lt;a href=&quot;http://web.archive.org/web/20170707015027/http://cjihrig.com/blog/javascripts-strict-mode-and-why-you-should-use-it/&quot;&gt;JavaScriptのストリクトモードと&lt;/a&gt; Colin J. Ihrigのブログ（アーカイブバージョン）でJavaScriptを使用する理由</target>
        </trans-unit>
        <trans-unit id="d3d3727e7b6567159e7a102fb614c67f67805b58" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.jslint.com/&quot;&gt;JSLint&lt;/a&gt; is a debugger written by Douglas Crockford. Simply paste in your script, and it&amp;rsquo;ll quickly scan for any noticeable issues and errors in your code.</source>
          <target state="translated">&lt;a href=&quot;http://www.jslint.com/&quot;&gt;JSLint&lt;/a&gt;は、Douglas Crockfordによって作成されたデバッガーです。 スクリプトに貼り付けるだけで、コード内の目立った問題やエラーをすばやくスキャンできます。</target>
        </trans-unit>
        <trans-unit id="78bf625f7b5e03664c59d7ee51dc7af02310b85e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.w3schools.com/js/js_strict.asp&quot;&gt;Quoting from w3schools&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://www.w3schools.com/js/js_strict.asp&quot;&gt;w3schoolsからの引用&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="b5af4e0174180b8a2c7208d7edf82d109f9cd5e9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;Strict mode&lt;/a&gt; on MDN</source>
          <target state="translated">MDNの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;厳格モード&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b5bcc7d75cb8e736baf64db945995c8b9a3a60be" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode&quot;&gt;Transitioning to strict mode&lt;/a&gt; on MDN</source>
          <target state="translated">MDNでの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode&quot;&gt;厳密モードへの移行&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6e939affa70685384b45a4a4e094772a28124974" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; a directive introduced in ECMAScript 5.</source>
          <target state="translated">ECMAScript 5で導入されたディレクティブ &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="643a6e9cb02c410968fee48edd499efb7b160711" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; is widely needed to be used in ECMA5, &lt;strong&gt;in ECMA6 it's part of JavaScript by default&lt;/strong&gt;, so it doesn't need to be added if you're using ES6.</source>
          <target state="translated">&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; はECMA5で広く使用する必要があります。ECMA6では&lt;strong&gt;デフォルトでJavaScriptの一部である&lt;/strong&gt;ため、ES6を使用している場合は追加する必要はありません。</target>
        </trans-unit>
        <trans-unit id="42f94653c815af9a0a66db63daf88a106628f565" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; makes JavaScript code to run in &lt;em&gt;strict mode&lt;/em&gt;, which basically means everything needs to be defined before use. The main reason for using strict mode is to avoid accidental global uses of undefined methods.</source>
          <target state="translated">&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; は、JavaScriptコードを&lt;em&gt;strictモード&lt;/em&gt;で実行できるようにします。つまり、使用前にすべてを定義する必要があります。 strictモードを使用する主な理由は、未定義のメソッドが誤ってグローバルに使用されるのを防ぐためです。</target>
        </trans-unit>
        <trans-unit id="b2700ddb133085373ac38f09a3f5d0bf79811178" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arguments.callee&lt;/code&gt; is not supported</source>
          <target state="translated">&lt;code&gt;arguments.callee&lt;/code&gt; はサポートされていません</target>
        </trans-unit>
        <trans-unit id="f8d48d4465392e0aa08ee8ea840aa1b3f23996fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval&lt;/code&gt; in strict mode does not introduce new variables</source>
          <target state="translated">strictモードでの &lt;code&gt;eval&lt;/code&gt; は新しい変数を導入しません</target>
        </trans-unit>
        <trans-unit id="3ab7533dde427ea5d6492eae8a3125e8afc3cfaa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;implements&lt;/code&gt;, &lt;code&gt;interface&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, and &lt;code&gt;yield&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;implements&lt;/code&gt; 、 &lt;code&gt;interface&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、 &lt;code&gt;package&lt;/code&gt; 、 &lt;code&gt;private&lt;/code&gt; 、 &lt;code&gt;protected&lt;/code&gt; 、 &lt;code&gt;public&lt;/code&gt; 、 &lt;code&gt;static&lt;/code&gt; 、 &lt;code&gt;yield&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ec53e46b9a64ec466cbf3b9f2ea170c32991ddb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; point to the global object.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; ポイントはグローバルオブジェクトを指します。</target>
        </trans-unit>
        <trans-unit id="ff636551fe7d26c196cc6753f1ecb44215346d16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use strict&lt;/code&gt; also works inside of individual functions. It is always a better practice to include &lt;code&gt;use strict&lt;/code&gt; in your code.</source>
          <target state="translated">&lt;code&gt;use strict&lt;/code&gt; は、個々の関数の内部でも機能します。 コードに &lt;code&gt;use strict&lt;/code&gt; を含めることを常にお勧めします。</target>
        </trans-unit>
        <trans-unit id="189bf0e21b07dc936d1f4023bde32e80cf254249" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use strict&lt;/code&gt; can be used only at the beginning of a script or of a function, i.e. it must precede every other (real) statement. It does not have to be the first instruction in a script of function: it can be preceded by other statement expressions that consist of string literals ( and JavaScript implementations can treat them as implementation specific directives). String literals statements, which follow a first real statement (in a script or function) are simple expression statements. Interpreters must not interpret them as directives and they have no effect.</source>
          <target state="translated">&lt;code&gt;use strict&lt;/code&gt; は、スクリプトまたは関数の先頭でのみ使用できます。つまり、他のすべての（実際の）ステートメントの前に置く必要があります。 関数のスクリプトの最初の命令である必要はありません。文字列リテラルで構成される他のステートメント式を前に付けることができます（JavaScript実装は、それらを実装固有のディレクティブとして扱うことができます）。 （スクリプトまたは関数内の）最初の実際のステートメントに続く文字列リテラルステートメントは、単純な式ステートメントです。 通訳者はそれらをディレクティブとして解釈してはならず、影響はありません。</target>
        </trans-unit>
        <trans-unit id="c8a24ea46f8167baca5ea7c30a696dde06bff8b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use strict&lt;/code&gt; does not contain key words: The directive is a simple expression statement, which consists of a special string literal (in single or double quotes). JavaScript engines, that do not implement ECMAScript 5, merely see an expression statement without side effects. It is expected that future versions of ECMAScript standards introduce &lt;code&gt;use&lt;/code&gt; as a real key word; the quotes would thereby become obsolete.</source>
          <target state="translated">&lt;code&gt;use strict&lt;/code&gt; はキーワードを含まない：ディレクティブは、（単一引用符または二重引用符で囲まれた）特別な文字列リテラルで構成される単純な式ステートメントです。 ECMAScript 5を実装しないJavaScriptエンジンは、副作用のない式ステートメントを表示するだけです。 ECMAScript標準の将来のバージョンでは、実際のキーワードとしての &lt;code&gt;use&lt;/code&gt; 導入される予定です。 引用符はそれによって時代遅れになります。</target>
        </trans-unit>
        <trans-unit id="93d83abef028d4a348358ca66f7d7b8d130ab13f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use strict&lt;/code&gt; is a way to make your code safer, because you can't use dangerous features that can work not as you expect. And, as was written before, it makes code more strict.</source>
          <target state="translated">&lt;code&gt;use strict&lt;/code&gt; することは、コードをより安全にする方法です。これは、期待どおりに機能しない危険な機能を使用できないためです。 そして、以前に書かれたように、それはコードをより厳格にします。</target>
        </trans-unit>
        <trans-unit id="02f9e1a9c89babe3794e548d1c031c3a106b1dc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;with&lt;/code&gt; statements can't be minified using tools like &lt;a href=&quot;http://marijnhaverbeke.nl/uglifyjs&quot;&gt;uglify-js&lt;/a&gt;. They're also &lt;a href=&quot;http://www.2ality.com/2011/06/with-statement.html&quot;&gt;deprecated&lt;/a&gt; and removed from future JavaScript versions.</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; ステートメントは、 &lt;a href=&quot;http://marijnhaverbeke.nl/uglifyjs&quot;&gt;uglify-js&lt;/a&gt;などのツールを使用して縮小することはできません。 また、これらは&lt;a href=&quot;http://www.2ality.com/2011/06/with-statement.html&quot;&gt;非推奨に&lt;/a&gt;なり、将来のJavaScriptバージョンから削除されます。</target>
        </trans-unit>
        <trans-unit id="0f478c9cf6e945f9f4d68899a9b247c36f3d43c0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;My two cents:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;私の2セント：&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b6ab9835d91deb98705b1f3c514957269bbf6e08" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NovoGeek.com - Krishna's weblog&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;NovoGeek.com-クリシュナのブログ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8816eb841c341fc968650270e2dd8daff581dcd3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Paving the way for future ECMAScript versions&lt;/em&gt;, using one of the newly reserved keywords (in prevision for &lt;em&gt;ECMAScript 6&lt;/em&gt;): &lt;code&gt;implements&lt;/code&gt;, &lt;code&gt;interface&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, and &lt;code&gt;yield&lt;/code&gt;.</source>
          <target state="translated">新しく予約されたキーワードの1つを使用して、 &lt;em&gt;将来のECMAScriptバージョンに道を開き&lt;/em&gt;ます（ &lt;em&gt;ECMAScript 6に備えて&lt;/em&gt; ）： &lt;code&gt;implements&lt;/code&gt; 、 &lt;code&gt;interface&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、 &lt;code&gt;package&lt;/code&gt; 、 &lt;code&gt;private&lt;/code&gt; 、 &lt;code&gt;protected&lt;/code&gt; 、 &lt;code&gt;public&lt;/code&gt; 、 &lt;code&gt;static&lt;/code&gt; 、および &lt;code&gt;yield&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="52f29c68d91653f44d8533c880c63c94e3e9dcf9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&quot;use strict&quot;; Defines that JavaScript code should be executed in
   &quot;strict mode&quot;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;「厳格に使用」;&lt;/strong&gt; &lt;strong&gt;JavaScriptコードを「ストリクトモード」で実行する必要があることを定義します。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="09cd3a0fa55f56bac5040bfc18287c80994ace0f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1) strict mode in functions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1）関数の厳格モード&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e089472c5ade8f427379cbfba941de4da55d3013" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2) whole-script strict mode&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2）スクリプト全体の厳格モード&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b57044be78a581d58d23dca3de27afea5b94cd7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;3) Assignment to a non-writable global&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;3）書き込み不可のグローバルへの割り当て&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52c10b26b568d358a2c9ff43b75af0bbd5a03c51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Eliminates &lt;code&gt;with&lt;/code&gt; statement :&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;ステートメントで削除：&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b530f16cb2cdcb16e6f7fae19819d91e97699f28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Prevents Duplicates :&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;重複を防止：&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="006313eaf6ed1ef228bc9756401cadce71d77bf0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Prevents Global Variable Declaration:&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;グローバル変数宣言を防止：&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="44a2e98717969ad732e7c5e16b7d1aae416b7dda" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Disadvantage&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Disadvantage&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ccc562ed44c4f818dcfeca5bfa62cf8a988e432f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Examples of using &quot;use strict&quot;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;「厳密な使用」の使用例：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="32305f493625f6db39745d253e553217cacc1727" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For basic example and for reference go through :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;基本的な例と参考のために：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3d1cedec098132288882de2701536c454db45920" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Modern JavaScript practice should always evoke the &quot;Use Strict&quot;; pragma.&lt;/strong&gt; The only reason that the ECMA Group has made the &quot;Strict&quot; mode optional &lt;em&gt;is to permit less experienced coders access to JavaScript and give then time to adapt to the new and safer coding practices.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;最新のJavaScriptプラクティスは常に「厳密な使用」を呼び起こす必要があります。&lt;/strong&gt; &lt;strong&gt;プラグマ。&lt;/strong&gt; ECMAグループが「Strict」モードをオプションにした唯一の理由は、 &lt;em&gt;経験の浅いコーダーがJavaScriptにアクセスできるようにし、新しい安全なコーディング手法に適応する時間を与えるためです。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6733430d33b7d3b1398536a80cb90975b34194ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Strict mode can prevent memory leaks.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;厳格モードは、メモリリークを防ぐことができます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f944ee70b14fb3dd9fca1ed2e2bdaf3550fc90e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The &quot;use strict&quot; Directive&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;「厳密な使用」ディレクティブ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="606ab5905d1c2d5a8327c6d7ed46db7c3e80503c" translate="yes" xml:space="preserve">
          <source>A word of caution, all you hard-charging programmers:  applying &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; to existing code can be hazardous!  This thing is not some feel-good, happy-face sticker that you can slap on the code to make it 'better'.  With the &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; pragma, the browser will suddenly THROW exceptions in random places that it never threw before just because at that spot you are doing something that default/loose JavaScript happily allows but strict JavaScript abhors!  You may have strictness violations hiding in seldom used calls in your code that will only throw an exception when they do eventually get run - say, in the production environment that your paying customers use!</source>
          <target state="translated">注意が必要なのは、プログラマーにハードチャージするすべてのことです。 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; を既存のコードに適用するのは危険です。 これは、コードを軽く叩いて「より良い」ものにすることができる、気分が良い、幸せそうなステッカーではありません。 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; プラグマを使用すると、ブラウザーが突然スローされたランダムな場所で例外をスローします。その場所では、デフォルト/ルースJavaScriptが喜んで許可しているものの、厳密なJavaScriptは嫌いなためです。 あなたがコード内でめったに使用されない呼び出しに隠された厳格違反があるかもしれません-それらが最終的に実行されるときだけ例外をスローします-たとえば、あなたの支払い顧客が使用する本番環境で！</target>
        </trans-unit>
        <trans-unit id="93bdd3af6ffad7ab4f106dd14cd1a4e23ee208e6" translate="yes" xml:space="preserve">
          <source>All modern browsers support &quot;use strict&quot; except &lt;em&gt;Internet Explorer 9 and lower&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;Internet Explorer 9以下&lt;/em&gt;を除くすべての最新のブラウザは「厳密な使用」をサポートしています。</target>
        </trans-unit>
        <trans-unit id="2343885cdd0e3c22f513cc0ca57ce37cc20a84a5" translate="yes" xml:space="preserve">
          <source>All parts of a &lt;em&gt;ClassDeclaration&lt;/em&gt; or a &lt;em&gt;ClassExpression&lt;/em&gt; are strict mode    code.</source>
          <target state="translated">&lt;em&gt;ClassDeclaration&lt;/em&gt;または&lt;em&gt;ClassExpressionの&lt;/em&gt;すべての部分は、厳密なモードコードです。</target>
        </trans-unit>
        <trans-unit id="289ffdbd1f800570bced2d458ea2e61545122c4a" translate="yes" xml:space="preserve">
          <source>Also in strict mode, things run faster, some warnings or silent warnings throw fatal errors, it's better to always use it to make a neater code.</source>
          <target state="translated">また、厳格なモードでは、物事がより速く実行され、いくつかの警告やサイレント警告が致命的なエラーをスローし、それは常により良いコードを作るためにそれを使用する方が良いです。</target>
        </trans-unit>
        <trans-unit id="da06e553d0eb67ac4244ee6f5298f173e41be07e" translate="yes" xml:space="preserve">
          <source>Also note you can apply &quot;strict mode&quot; to the whole file... Or you can use it only for a specific function &lt;em&gt;(still quoting from John Resig's article)&lt;/em&gt;:</source>
          <target state="translated">また、ファイル全体に「ストリクトモード」を適用できることにも注意してください。または、特定の機能にのみ使用できます&lt;em&gt;（John Resigの記事から引用しています）&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="d73300c7892262287c245360c5af86d15a6a13f4" translate="yes" xml:space="preserve">
          <source>Also when a function is invoked with &lt;code&gt;call()&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt; in strict mode, then &lt;code&gt;this&lt;/code&gt; is exactly the value of the first argument of the &lt;code&gt;call()&lt;/code&gt;or &lt;code&gt;apply()&lt;/code&gt; invocation. (In normal mode &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; are replaced by the global &lt;code&gt;Object&lt;/code&gt; and values, which are not objects, are cast into objects.)</source>
          <target state="translated">また、関数が &lt;code&gt;call()&lt;/code&gt; またはstrictモードで &lt;code&gt;apply&lt;/code&gt; れて呼び出された場合、 &lt;code&gt;this&lt;/code&gt; はまさに &lt;code&gt;call()&lt;/code&gt; または &lt;code&gt;apply()&lt;/code&gt; 呼び出しの最初の引数の値です。 （通常モードでは、 &lt;code&gt;null&lt;/code&gt; と &lt;code&gt;undefined&lt;/code&gt; はグローバル &lt;code&gt;Object&lt;/code&gt; 置き換えられ、 オブジェクトではない値はオブジェクトにキャストされます。）</target>
        </trans-unit>
        <trans-unit id="b93fcc8b812303345005a85b6a1b344c558d79a2" translate="yes" xml:space="preserve">
          <source>Also, as listed above, strict mode stops you from doing certain things.</source>
          <target state="translated">また、上記のように、厳密なモードでは特定のことをしないようにしています。</target>
        </trans-unit>
        <trans-unit id="f29a859de34d8206276e4fbe86c78577ef463680" translate="yes" xml:space="preserve">
          <source>And:</source>
          <target state="translated">And:</target>
        </trans-unit>
        <trans-unit id="e2abd0d44e964816aa501cf23404b343505b9d60" translate="yes" xml:space="preserve">
          <source>Another scenario is that, say, the variable is declared in a child function. In that case, the compiler checks the validity of that variable in the outer scope, i.e., the parent function. Only then it will check in the global space and create a variable for us there.
That means additional checks need to be done. This will affect the performance of the application.</source>
          <target state="translated">別のシナリオとして、変数が子関数で宣言されている場合があります。その場合、コンパイラは外部スコープ、つまり親関数でその変数の有効性をチェックします。そして、グローバル空間をチェックして、そこに変数を作成します。つまり、追加のチェックが必要になります。これはアプリケーションのパフォーマンスに影響します。</target>
        </trans-unit>
        <trans-unit id="0ce5379811a96887a1d3f16ab89d89d7711a7375" translate="yes" xml:space="preserve">
          <source>Apparently, at the initial stage there will be errors we have never encountered before. To get the full benefit, we need to do proper testing after switching to strict mode to make sure we have caught everything. Definitely we don&amp;rsquo;t just throw &lt;code&gt;use strict&lt;/code&gt; in our code and assume there are no errors. So the churn is that it&amp;rsquo;s time to start using this incredibly useful language feature to write better code.</source>
          <target state="translated">どうやら、初期段階では、これまでに発生したことのないエラーが発生するでしょう。 完全なメリットを得るには、ストリクトモードに切り替えた後に適切なテストを実行して、すべてをキャッチしたことを確認する必要があります。 間違いなく、コード内で &lt;code&gt;use strict&lt;/code&gt; をスローするだけではなく、エラーがないと想定しています。 だからこそ、この信じられないほど便利な言語機能を使ってより良いコードを書く時が来たのです。</target>
        </trans-unit>
        <trans-unit id="23c13738c7207b9f6d81bccd86fb3f5f24fbc321" translate="yes" xml:space="preserve">
          <source>As an example, in normal JavaScript, mistyping a variable name creates
  a new global variable. In strict mode, this will throw an error,
  making it impossible to accidentally create a global variable.</source>
          <target state="translated">例として、通常のJavaScriptでは、変数名を誤入力すると新しいグローバル変数が作成されます。厳密なモードでは、これがエラーとなり、誤ってグローバル変数を作成することはできません。</target>
        </trans-unit>
        <trans-unit id="2c40cd067423f60a47c31129f8f11cc9df0347a6" translate="yes" xml:space="preserve">
          <source>Attempts to delete undeletable properties will throw (&lt;code&gt;delete Object.prototype&lt;/code&gt;)</source>
          <target state="translated">削除できないプロパティを削除しようとするとスローされます（ &lt;code&gt;delete Object.prototype&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="9b6df8c6d28fca843574fe8424266b77eefb28e0" translate="yes" xml:space="preserve">
          <source>Believe me. The overhead is negligible compared to poorly designed code. &lt;a href=&quot;http://www.yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/&quot;&gt;Doug Crockford, who has been a senior JavaScript developer for several years, has a very interesting post here&lt;/a&gt;. Personally, I like to return to his site all the time to make sure I don't forget my good practice.</source>
          <target state="translated">私を信じてください。 オーバーヘッドは、不十分に設計されたコードと比較してごくわずかです。 &lt;a href=&quot;http://www.yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/&quot;&gt;ここ数年、JavaScriptの上級開発者であるDoug Crockfordが非常に興味深い投稿をしています&lt;/a&gt; 。 個人的には、自分の良い習慣を忘れないように、いつも彼のサイトに戻りたいです。</target>
        </trans-unit>
        <trans-unit id="a1ddd7f39e440d9be6e057065c68fec0776269ba" translate="yes" xml:space="preserve">
          <source>Below are the conditions to trigger strict mode in &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-strict-mode-code&quot;&gt;ES6&lt;/a&gt; and &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-strict-mode-code&quot;&gt;ES7&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-strict-mode-code&quot;&gt;ES6&lt;/a&gt;および&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-strict-mode-code&quot;&gt;ES7&lt;/a&gt;でストリクトモードをトリガーする条件は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1928a98ad81a0a2fb8810d43513549e8510e1221" translate="yes" xml:space="preserve">
          <source>Browser compatibility issue: 
The &quot;use&quot; directives are meant to be backwards-compatible. Browsers that do not support them will just see a string literal that isn't referenced further. So, they will pass over it and move on.</source>
          <target state="translated">ブラウザの互換性の問題。use&quot; ディレクティブは後方互換性があるように意図されています。それらをサポートしていないブラウザは、それ以上参照されない文字列リテラルを見るだけです。そのため、ブラウザはそれを無視して先に進みます。</target>
        </trans-unit>
        <trans-unit id="0a7fb1b9a52cbb2e017378cb1f11854e33a814a7" translate="yes" xml:space="preserve">
          <source>Browser support for strict mode</source>
          <target state="translated">厳格モードのブラウザ対応</target>
        </trans-unit>
        <trans-unit id="565e25b1be863570aa48357d4e37a3cb9b1014a4" translate="yes" xml:space="preserve">
          <source>Consider this example:</source>
          <target state="translated">この例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="baa2c64bbbada534ed6075e89a55128be8090417" translate="yes" xml:space="preserve">
          <source>Declaring function in blocks</source>
          <target state="translated">ブロックでの機能宣言</target>
        </trans-unit>
        <trans-unit id="38996e986e93e308076d27bc04e168330b4535b3" translate="yes" xml:space="preserve">
          <source>Declaring twice the same name for a property name in an object literal</source>
          <target state="translated">オブジェクトリテラルでプロパティ名と同じ名前を二度宣言する</target>
        </trans-unit>
        <trans-unit id="29ac6062865d40d043be78b3c36ccdeeec441106" translate="yes" xml:space="preserve">
          <source>Declaring two function arguments with the same name function</source>
          <target state="translated">同じ名前の2つの関数引数の宣言 function</target>
        </trans-unit>
        <trans-unit id="5c4d6e11f66aa0a3fdd7d4a8816581873a8955ae" translate="yes" xml:space="preserve">
          <source>Directives are similar to statements, yet different.</source>
          <target state="translated">ディレクティブはステートメントと似ていますが、違います。</target>
        </trans-unit>
        <trans-unit id="b8f87df5829d8a168c7e799e5c216af27378f943" translate="yes" xml:space="preserve">
          <source>Disallows global variables. (Catches missing &lt;code&gt;var&lt;/code&gt; declarations and typos in variable names)</source>
          <target state="translated">グローバル変数を許可しません。 （変数名の欠落している &lt;code&gt;var&lt;/code&gt; 宣言とタイプミスをキャッチします）</target>
        </trans-unit>
        <trans-unit id="273671e9ae03a9235fcaa5ba2170f1974218b666" translate="yes" xml:space="preserve">
          <source>Do any of the current browsers respond to the &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; string or is it for future use?</source>
          <target state="translated">現在のブラウザのいずれかが &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; 応答しますか。 文字列またはそれは将来の使用のためですか？</target>
        </trans-unit>
        <trans-unit id="e4d1d77242da906971270be245172a570ee8b0fb" translate="yes" xml:space="preserve">
          <source>Doing some searching, I realized that some people add &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; into their JavaScript code. Once I added the statement, the error stopped appearing. Unfortunately, Google did not reveal much of the history behind this string statement. Certainly it must have something to do with how the JavaScript is interpreted by the browser, but I have no idea what the effect would be.</source>
          <target state="translated">検索を行ったところ、 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; 追加する人がいることに気づきました。 JavaScriptコードに。 ステートメントを追加すると、エラーが表示されなくなりました。 残念ながら、Googleはこの文字列ステートメントの背後にある歴史の多くを明らかにしませんでした。 確かに、JavaScriptがブラウザによってどのように解釈されるかと関係があるはずですが、その効果がどうなるかはわかりません。</target>
        </trans-unit>
        <trans-unit id="48af85fc915d01a4202f28354202609ebabc9352" translate="yes" xml:space="preserve">
          <source>ECMAScript 5 'Strict mode' support in browsers. What does this mean?</source>
          <target state="translated">ECMAScript 5 ブラウザで「ストリクトモード」をサポート。これは何を意味するのでしょうか?</target>
        </trans-unit>
        <trans-unit id="9fc854e7ec3ef2a462edaa98d116548946d2673f" translate="yes" xml:space="preserve">
          <source>ECMAScript 5 adds a list of reserved words. If you use them as variables or arguments, strict mode will throw an error. The reserved words are:</source>
          <target state="translated">ECMAScript 5 では予約語のリストが追加されました。これらを変数や引数として使用すると、厳密モードではエラーが発生します。予約語は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="ebcaa1421d2e09e7ea9eec47fe05b48861d7705e" translate="yes" xml:space="preserve">
          <source>Eliminates this coercion</source>
          <target state="translated">この強制を排除する</target>
        </trans-unit>
        <trans-unit id="ed326f039ef104d9ba966135c56dac8bf600657a" translate="yes" xml:space="preserve">
          <source>Eliminates with</source>
          <target state="translated">で排除します。</target>
        </trans-unit>
        <trans-unit id="0c26b81d89bbb54118dbce8cd05504fa17f8b5c2" translate="yes" xml:space="preserve">
          <source>Errors for immutables</source>
          <target state="translated">不変量のエラー</target>
        </trans-unit>
        <trans-unit id="efa60700d7b2ed517f9d3d0229490278c5d94c97" translate="yes" xml:space="preserve">
          <source>Et cetera</source>
          <target state="translated">等々</target>
        </trans-unit>
        <trans-unit id="e5356a0a78fcc2f6a59293d5076e50a82279173b" translate="yes" xml:space="preserve">
          <source>Eval code is strict mode code if it begins with a Directive Prologue    that contains a Use Strict Directive or if the call to eval is a direct eval (see 12.3.4.1) that is contained in strict mode code.</source>
          <target state="translated">評価コードは、Use Strict ディレクティブを含むディレクティブプロローグで始まるか、evalへの呼び出しがストリクトモードコードに含まれる直接eval (12.3.4.1参照)である場合にはストリクトモードコードとなります。</target>
        </trans-unit>
        <trans-unit id="89ce572ad2c6a69c00995dd23c773545b3d69731" translate="yes" xml:space="preserve">
          <source>Everything in the &lt;em&gt;lexical scope&lt;/em&gt; of function &lt;code&gt;doSomething&lt;/code&gt; will be interpreted in strict mode. The word &lt;em&gt;lexical scope&lt;/em&gt; is important here. For example, if your &lt;em&gt;strict&lt;/em&gt; code calls a function of a library that is &lt;em&gt;not strict&lt;/em&gt;, only your code is executed in strict mode, and not the called function. See &lt;a href=&quot;https://stackoverflow.com/a/6039163/1461424&quot;&gt;this answer&lt;/a&gt; for a better explanation.</source>
          <target state="translated">関数 &lt;code&gt;doSomething&lt;/code&gt; の &lt;em&gt;レキシカルスコープ内の&lt;/em&gt;すべてが厳密モードで解釈されます。 ここでは&lt;em&gt;語彙スコープ&lt;/em&gt;という言葉が重要です。 たとえば、 &lt;em&gt;厳格な&lt;/em&gt;コードが&lt;em&gt;厳格&lt;/em&gt;で&lt;em&gt;ない&lt;/em&gt;ライブラリの関数を呼び出す場合、コードのみが厳格モードで実行され、呼び出された関数は実行されません。 詳細については、 &lt;a href=&quot;https://stackoverflow.com/a/6039163/1461424&quot;&gt;この回答&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">スニペットを展開</target>
        </trans-unit>
        <trans-unit id="4daa46b47ce88ea7b35fb3d45a4029cb54de2f47" translate="yes" xml:space="preserve">
          <source>Few important things which I have learned after using &lt;code&gt;use strict&lt;/code&gt; :</source>
          <target state="translated">&lt;code&gt;use strict&lt;/code&gt; を使用した後に私が学んだいくつかの重要なこと：</target>
        </trans-unit>
        <trans-unit id="b80e966415fec4b14584eef46091cc1f5fed8c7a" translate="yes" xml:space="preserve">
          <source>For a non-exhaustive list of specialties in strict mode, see &lt;a href=&quot;https://stackoverflow.com/a/27114400/1461424&quot;&gt;this answer&lt;/a&gt;.</source>
          <target state="translated">ストリクトモードの専門分野の完全ではないリストについては、 &lt;a href=&quot;https://stackoverflow.com/a/27114400/1461424&quot;&gt;この回答を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="59a44288386a492ebd014862dd175b15ca71076a" translate="yes" xml:space="preserve">
          <source>Forbids binding or assignment of the names &lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt; in any form</source>
          <target state="translated">名前 &lt;code&gt;eval&lt;/code&gt; と &lt;code&gt;arguments&lt;/code&gt; を任意の形式でバインドまたは割り当てることを禁止します</target>
        </trans-unit>
        <trans-unit id="85882ed43f947d20ab023a241c16a0839507bff1" translate="yes" xml:space="preserve">
          <source>Forbids deleting plain names (&lt;code&gt;delete x;&lt;/code&gt;)</source>
          <target state="translated">プレーンネームの削除を禁止（ &lt;code&gt;delete x;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="932069b68ebf7d6e48537be78e32212e3699abcd" translate="yes" xml:space="preserve">
          <source>Forbids octal syntax (&lt;code&gt;var x = 023;&lt;/code&gt; some devs assume wrongly that a preceding zero does nothing to change the number.)</source>
          <target state="translated">8進構文を禁止します（ &lt;code&gt;var x = 023;&lt;/code&gt; 一部の開発者は、先行するゼロが数値を変更するために何もしないと誤って想定しています。）</target>
        </trans-unit>
        <trans-unit id="3799c98240f4cdb7b40c5e3fdcb7c5e4f2f10c8b" translate="yes" xml:space="preserve">
          <source>Forbids the &lt;code&gt;with&lt;/code&gt; keyword</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; キーワードを禁止する</target>
        </trans-unit>
        <trans-unit id="b458948cb359c5a3bdb7d06c0c0102f9e79964a1" translate="yes" xml:space="preserve">
          <source>Function code is strict mode code if the associated &lt;em&gt;FunctionDeclaration, FunctionExpression, GeneratorDeclaration, GeneratorExpression, MethodDefinition, or ArrowFunction&lt;/em&gt; is contained in strict mode code or if the code that produces the value of the function&amp;rsquo;s [[ECMAScriptCode]] internal slot begins with a Directive Prologue that contains a Use Strict Directive.</source>
          <target state="translated">関連する&lt;em&gt;FunctionDeclaration、FunctionExpression、GeneratorDeclaration、GeneratorExpression、MethodDefinition、またはArrowFunction&lt;/em&gt;がストリクトモードコードに含まれている場合、または関数の[[ECMAScriptCode]]内部スロットの値を生成するコードがディレクティブプロローグで始まる場合、関数コードはストリクトモードコードです。 Use Strictディレクティブが含まれています。</target>
        </trans-unit>
        <trans-unit id="3c282a4f93e31f632be83929715796e01490e87f" translate="yes" xml:space="preserve">
          <source>Function code that is supplied as the arguments to the built-in    Function and Generator constructors is strict mode code if the last argument is a String that when processed is a &lt;em&gt;FunctionBody&lt;/em&gt; that begins with a Directive Prologue that contains a Use Strict Directive.</source>
          <target state="translated">組み込みのFunctionおよびGeneratorコンストラクターへの引数として提供される関数コードは、最後の引数が、処理時にUse Strictディレクティブを含むディレクティブプロローグで始まる&lt;em&gt;FunctionBody&lt;/em&gt;である文字列である場合、厳密モードコードです。</target>
        </trans-unit>
        <trans-unit id="1847e9a8ccc9abd72f714eab1618108a4c8cbe08" translate="yes" xml:space="preserve">
          <source>Function parameter names must be unique (&lt;code&gt;function sum (x, x) {...}&lt;/code&gt;)</source>
          <target state="translated">関数パラメーター名は一意である必要があります（ &lt;code&gt;function sum (x, x) {...}&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="bafd4b54282745a2bed1442852b73f4b3189a77a" translate="yes" xml:space="preserve">
          <source>Further Reading</source>
          <target state="translated">続きを読む</target>
        </trans-unit>
        <trans-unit id="e311ed625506e39cf4918abdd75a8aaa56e4dfc8" translate="yes" xml:space="preserve">
          <source>Global Leakage</source>
          <target state="translated">グローバルリーク</target>
        </trans-unit>
        <trans-unit id="eead7b84869b7d6893ff5ea59fd12d29fc73671a" translate="yes" xml:space="preserve">
          <source>Global code is strict mode code if it begins with a Directive    Prologue that contains a Use Strict Directive (see 14.1.1).</source>
          <target state="translated">グローバルコードは、Use Strict ディレクティブ(14.1.1 参照)を含むディレクティブプロローグで始まる場合、厳格モードコードです。</target>
        </trans-unit>
        <trans-unit id="6304fe8539e56d461068a240f624db35fe5dca0a" translate="yes" xml:space="preserve">
          <source>Here, the compiler throws the reference error. In strict mode, the compiler does not allow us to use the variable without declaring it. So memory leaks can be prevented. In addition, we can write more optimized code.</source>
          <target state="translated">ここで、コンパイラは参照エラーをスローします。厳密なモードでは、コンパイラは変数を宣言しないと使わせてくれません。そのため、メモリリークを防ぐことができます。また、より最適化されたコードを書くことができます。</target>
        </trans-unit>
        <trans-unit id="78d2172dcc5510adbb4b052a53b0f1eaf23d08d5" translate="yes" xml:space="preserve">
          <source>Historically, JavaScript has been confused about how functions
  are scoped. Sometimes they seem to be statically scoped, but some
  features make them behave like they are dynamically scoped. This is
  confusing, making programs difficult to read and understand.
  Misunderstanding causes bugs. It also is a problem for performance.
  Static scoping would permit variable binding to happen at compile
  time, but the requirement for dynamic scope means the binding must be
  deferred to runtime, which comes with a significant performance
  penalty.</source>
          <target state="translated">歴史的に、JavaScriptは関数がどのようにスコープされるかについて混乱してきました。ときには静的にスコープされているように見えることもありますが、機能によっては動的にスコープされているように振る舞うこともあります。これは混乱を招き、プログラムを読んだり理解したりするのを難しくしています。誤解はバグの原因になります。また、パフォーマンスの問題でもあります。スタティックスコープではコンパイル時に変数のバインディングを行うことができますが、ダイナミックスコープの要件は、バインディングを実行時に延期しなければならないことを意味します。</target>
        </trans-unit>
        <trans-unit id="ff46ea9bef3c6d32c8a1ad7bb317595dd80cf361" translate="yes" xml:space="preserve">
          <source>How do I use strict mode?</source>
          <target state="translated">厳格モードを使うにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="cc9be850e0a7084a9595e60ae16f023125baaa52" translate="yes" xml:space="preserve">
          <source>I found a &lt;a href=&quot;http://yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/&quot;&gt;nice article&lt;/a&gt; describing several things that are prohibited in strict mode (note that this is not an exclusive list):</source>
          <target state="translated">ストリクトモードで禁止されているいくつかのことを説明する&lt;a href=&quot;http://yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/&quot;&gt;素晴らしい記事&lt;/a&gt;を見つけました（これは排他的なリストではないことに注意してください）。</target>
        </trans-unit>
        <trans-unit id="dc8952723c45fe0a5695d3b38a7da82ec0f08130" translate="yes" xml:space="preserve">
          <source>I strongly recommend every developer to start using strict mode now. There are enough browsers supporting it that strict mode will legitimately help save us from errors we didn&amp;rsquo;t even know were in your code.</source>
          <target state="translated">私はすべての開発者に今から厳密モードを使い始めることを強く勧めます。 それをサポートする十分なブラウザがあり、ストリクトモードは、コード内にあることさえ知らなかったエラーから私たちを正当に救うのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="469b8c44f76024a66385d6b7d25b2e82c43551eb" translate="yes" xml:space="preserve">
          <source>I think even though it is a deadly caged animal, &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; can be good stuff, but you have to do it right.  The best time to go strict is when your project is greenfield and you are starting from scratch. Configure &lt;code&gt;JSHint/JSLint&lt;/code&gt; with all the warnings and options cranked up as tight as your team can stomach, get a good build/test/assert system du jour rigged like &lt;code&gt;Grunt+Karma+Chai&lt;/code&gt;, and only THEN start marking all your new modules as &lt;code&gt;&quot;use strict&quot;&lt;/code&gt;.  Be prepared to cure lots of niggly errors and warnings.  Make sure everyone understands the gravity by configuring the build to FAIL if &lt;code&gt;JSHint/JSLint&lt;/code&gt; produces any violations.</source>
          <target state="translated">それは致命的な檻の動物ですが、 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; は良いことだと思いますが、あなたはそれを正しく行わなければなりません。 厳格になるのに最適な時期は、プロジェクトがグリーンフィールドであり、ゼロから始めるときです。 すべての警告とオプションを使用して &lt;code&gt;JSHint/JSLint&lt;/code&gt; を構成し、チームがお腹をすくめるまできつく締め、 &lt;code&gt;Grunt+Karma+Chai&lt;/code&gt; のようにリグ付けされた優れたビルド/テスト/アサートシステムを取得し、 その後 、すべての新しいモジュールを &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 。 多くの厄介なエラーと警告を解決する準備をしてください。 &lt;code&gt;JSHint/JSLint&lt;/code&gt; が違反を生成した場合にビルドをFAILに構成することにより、全員が重要性を理解するようにしてください。</target>
        </trans-unit>
        <trans-unit id="fe9be0949ff68bb7e46ceee0fc5d7b1234fe99fe" translate="yes" xml:space="preserve">
          <source>I would like to offer a somewhat more founded answer complementing the other answers. I was hoping to edit the most popular answer, but failed. I tried to make it as comprehensive and complete as I could.</source>
          <target state="translated">他の回答を補完するような、やや根拠のある回答を提示したいと思います。一番人気のある回答を編集しようと思ったのですが、失敗しました。私はそれをできるだけ包括的で完全なものにしようとしました。</target>
        </trans-unit>
        <trans-unit id="412701d63b5068562cc4090f3741aedcbe4b4488" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; is used, the code should be written by following a strict set of rules, hence decreasing the chances of errors and ambiguities.</source>
          <target state="translated">&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; を使用する場合は、厳格な一連のルールに従ってコードを記述してください。これにより、エラーや曖昧さの可能性が減少します。</target>
        </trans-unit>
        <trans-unit id="becf61a07fb9b6bce75ee86403b6a44cc4230a2d" translate="yes" xml:space="preserve">
          <source>If a developer used a library that was in strict mode, but the developer was used to working in normal mode, they might call some actions on the library that wouldn&amp;rsquo;t work as expected.</source>
          <target state="translated">開発者がストリクトモードのライブラリを使用していても、通常モードで作業することに慣れている場合、期待どおりに機能しないいくつかのアクションをライブラリで呼び出す可能性があります。</target>
        </trans-unit>
        <trans-unit id="73b348a017ce42f08ddfcc1a55aa16726529e7db" translate="yes" xml:space="preserve">
          <source>If people are worried about using &lt;code&gt;use strict&lt;/code&gt; it might be worth checking out this article:</source>
          <target state="translated">ユーザーが &lt;code&gt;use strict&lt;/code&gt; の使用について心配している場合は、この記事をチェックする価値があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="fa6ab3ff8e0221431d8c26a934a3e66ae5341150" translate="yes" xml:space="preserve">
          <source>If you are going to take the plunge, it is a good idea to apply &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; alongside comprehensive unit tests and a strictly configured JSHint build task that will give you some confidence that there is no dark corner of your module that will blow up horribly just because you've turned on Strict Mode.  Or, hey, here's another option:  just don't add &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; to any of your legacy code, it's probably safer that way, honestly.  &lt;strong&gt;DEFINITELY DO NOT&lt;/strong&gt; add &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; to any modules you do not own or maintain, like third party modules.</source>
          <target state="translated">思い切って &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; する場合は、包括的なユニットテストと厳密に構成されたJSHintビルドタスクに加えて「use strict」を適用することをお勧めします。これにより、爆発するモジュールの暗いコーナーがないことをある程度確信できます。ひどいことに、厳密モードをオンにしているからです。 または、ねえ、ここに別のオプションがあります。レガシーコードに &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; を追加しないでください。正直なところ、その方が安全です。 サードパーティのモジュールのように、所有または維持していないモジュールに &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; を追加しないでください。</target>
        </trans-unit>
        <trans-unit id="bf2b000cc3982bb988fd19b404d2df442c39ee61" translate="yes" xml:space="preserve">
          <source>If you use a browser released in the last year or so then it most likely supports JavaScript Strict mode. Only older browsers around before ECMAScript 5 became the current standard don't support it.</source>
          <target state="translated">ここ1年ほど前にリリースされたブラウザを使用している場合、そのブラウザは JavaScript Strict モードをサポートしている可能性が高いです。ECMAScript 5 が現在の標準になる前の古いブラウザだけがサポートしていません。</target>
        </trans-unit>
        <trans-unit id="a61d4fd4d403e4d13959975f3c5f54da73790ed8" translate="yes" xml:space="preserve">
          <source>Implied Global Variables</source>
          <target state="translated">推定グローバル変数</target>
        </trans-unit>
        <trans-unit id="d3431d0f279fa8fa3e8a6d6d9667d24dcf95f4a3" translate="yes" xml:space="preserve">
          <source>In C, an extremely unfortunate representation of octalness was
  selected: Leading zero. So in C, &lt;code&gt;0100&lt;/code&gt; means 64, not 100, and &lt;code&gt;08&lt;/code&gt; is an
  error, not 8. Even more unfortunately, this anachronism has been
  copied into nearly all modern languages, including JavaScript, where
  it is only used to create errors. It has no other purpose. So in
  strict mode, octal forms are no longer allowed.</source>
          <target state="translated">Cでは、非常に残念な8進数表現が選択されました。先行ゼロです。 したがって、Cでは、 &lt;code&gt;0100&lt;/code&gt; は100ではなく64を意味し、 &lt;code&gt;08&lt;/code&gt; はエラーではなく8を意味します。さらに残念なことに、このアナクロニズムはJavaScriptを含むほとんどすべての最近の言語にコピーされており、エラーの作成にのみ使用されます。 他の目的はありません。 したがって、厳密モードでは、8進形式は許可されなくなりました。</target>
        </trans-unit>
        <trans-unit id="16b4064635890ddd67afa5ee74230310465108e6" translate="yes" xml:space="preserve">
          <source>In my &lt;em&gt;existing&lt;/em&gt; JavaScript code: &lt;strong&gt;Probably not!&lt;/strong&gt; If your existing JavaScript code has statements that are prohibited in strict-mode, the application will simply break. If you want strict mode, you should be prepared to debug and correct your existing code. This is why &lt;em&gt;using &lt;code&gt;'use strict';&lt;/code&gt; does not suddenly make your code better&lt;/em&gt;.</source>
          <target state="translated">私の&lt;em&gt;既存の&lt;/em&gt; JavaScriptコードでは： &lt;strong&gt;おそらくそうではありません！&lt;/strong&gt; 既存のJavaScriptコードにストリクトモードで禁止されているステートメントがある場合、アプリケーションは単純に中断します。 ストリクトモードが必要な場合は、既存のコードをデバッグして修正する準備をする必要があります。 これが&lt;em&gt; &lt;code&gt;'use strict';&lt;/code&gt; &lt;/em&gt;理由&lt;em&gt;です。&lt;/em&gt; &lt;em&gt;突然コードが改善されるわけではありません&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="0c29f3552537c30fb2098c4a96f0030e9e96ee78" translate="yes" xml:space="preserve">
          <source>In my &lt;em&gt;new&lt;/em&gt; JavaScript application: &lt;strong&gt;Absolutely!&lt;/strong&gt; Strict mode can be used as a whistleblower when you are doing something stupid with your code.</source>
          <target state="translated">私の&lt;em&gt;新しい&lt;/em&gt; JavaScriptアプリケーションでは： &lt;strong&gt;絶対に！&lt;/strong&gt; 厳格モードは、コードで愚かなことをしているときに内部告発者として使用できます。</target>
        </trans-unit>
        <trans-unit id="3634f14a41df1f551fd64c581da9a12e76201cd6" translate="yes" xml:space="preserve">
          <source>In normal JavaScript, a developer will not receive any error feedback
  assigning values to non-writable properties.</source>
          <target state="translated">通常のJavaScriptでは、書き換え不可能なプロパティに値を代入しても、開発者はエラーフィードバックを受け取ることはありません。</target>
        </trans-unit>
        <trans-unit id="d1c4997af91ea1824f16708d431766bae6358c7a" translate="yes" xml:space="preserve">
          <source>In short will make your code less error prone and in turn will make you write good code.</source>
          <target state="translated">要するに、あなたのコードがエラーになりにくくなり、その結果、良いコードが書けるようになります。</target>
        </trans-unit>
        <trans-unit id="d1a158933baae4e76b4d77171e82fba2ab4d99d9" translate="yes" xml:space="preserve">
          <source>In strict mode all variables have to be declared: if you assign a value to an identifier that has not been declared as variable, function, function parameter, catch-clause parameter or property of the global &lt;code&gt;Object&lt;/code&gt;, then you will get a &lt;code&gt;ReferenceError&lt;/code&gt;. In normal mode the identifier is implicitly declared as a global variable (as a property of the global &lt;code&gt;Object&lt;/code&gt;)</source>
          <target state="translated">厳密モードでは、すべての変数を宣言する必要があります。変数、関数、関数パラメーター、catch-clauseパラメーター、またはグローバル &lt;code&gt;Object&lt;/code&gt; のプロパティとして宣言されていない識別子に値を割り当てると、 &lt;code&gt;ReferenceError&lt;/code&gt; が発生します。 通常モードでは、識別子は暗黙的にグローバル変数として宣言されます（グローバル &lt;code&gt;Object&lt;/code&gt; のプロパティとして）</target>
        </trans-unit>
        <trans-unit id="f9069656fdcbb8041857c4d722a72e7658151a0c" translate="yes" xml:space="preserve">
          <source>In strict mode are more restrictions on the possibilities to examine the call stack. &lt;code&gt;arguments.caller&lt;/code&gt; and &lt;code&gt;arguments.callee&lt;/code&gt; cause a &lt;code&gt;TypeError&lt;/code&gt; in a function in strict mode. Furthermore, some caller- and arguments properties of functions in strict mode cause a &lt;code&gt;TypeError&lt;/code&gt; when you try to read them.</source>
          <target state="translated">厳密モードでは、呼び出しスタックを調べる可能性に対する制限が増えます。 &lt;code&gt;arguments.caller&lt;/code&gt; および &lt;code&gt;arguments.callee&lt;/code&gt; は、strictモードの関数で &lt;code&gt;TypeError&lt;/code&gt; を引き起こします。 さらに、strictモードの関数の一部の呼び出し元と引数のプロパティは、それらを読み取ろうとすると &lt;code&gt;TypeError&lt;/code&gt; を引き起こします。</target>
        </trans-unit>
        <trans-unit id="b5c0423fd33ef61899aaaab9c15cc303390184f6" translate="yes" xml:space="preserve">
          <source>In strict mode it is considered a syntactical error when a function declaration has multiple parameters with the same name. (In normal mode there is no error.)</source>
          <target state="translated">厳密なモードでは、関数宣言が同じ名前の複数のパラメータを持つ場合、構文エラーとみなされます(通常モードではエラーはありません)。(通常モードではエラーは発生しません)。</target>
        </trans-unit>
        <trans-unit id="ad8a374a0ecffbb86ab61cd3fbd81734ca7e9123" translate="yes" xml:space="preserve">
          <source>In strict mode it is considered a syntactical error when you try to define several properties with the same name for an object literal. (In normal mode there is no error.)</source>
          <target state="translated">厳密なモードでは、オブジェクトリテラルに対して同じ名前の複数のプロパティを定義しようとすると、構文上のエラーとみなされます(通常モードではエラーは発生しません)。(通常モードではエラーは発生しません)。</target>
        </trans-unit>
        <trans-unit id="6e88e83d9825a17cda0546c6144bf263c3be4fd7" translate="yes" xml:space="preserve">
          <source>In strict mode octal literals are not allowed (these are literals that start with &lt;code&gt;0x&lt;/code&gt;. (In normal mode some implementations do allow octal literals.)</source>
          <target state="translated">厳密モードでは8進リテラルは許可されません（これらは &lt;code&gt;0x&lt;/code&gt; で始まるリテラルです（通常モードでは、一部の実装では8進リテラルが許可されます）。</target>
        </trans-unit>
        <trans-unit id="ada7b6efb898cb90db8476a67881c7168d01d3c2" translate="yes" xml:space="preserve">
          <source>In strict mode the arguments-object of a function contains a static copy of the values, which are passed to that function. In normal mode the arguments-object has a somewhat &quot;magical&quot; behaviour: The elements of the array and the named function parameters reference both the same value.</source>
          <target state="translated">厳密なモードでは、関数の引数オブジェクトはその関数に渡される値の静的コピーを含みます。通常モードでは、引数オブジェクトはやや &quot;魔法のような &quot;振る舞いをします。配列の要素と名前付き関数のパラメータは両方とも同じ値を参照します。</target>
        </trans-unit>
        <trans-unit id="7045fbdd229530fd0f1b40aa6038b589b411e771" translate="yes" xml:space="preserve">
          <source>In strict mode the identifiers &lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt; are treated like keywords. You cannot change their value, cannot assign a value to them, and you cannot use them as names for variables, functions, function parameters or identifiers of a catch block.</source>
          <target state="translated">厳密モードでは、識別子 &lt;code&gt;eval&lt;/code&gt; と &lt;code&gt;arguments&lt;/code&gt; はキーワードのように扱われます。 それらの値を変更したり、値を割り当てたりすることはできません。また、変数の名前、関数、関数パラメーター、またはcatchブロックの識別子として使用することもできません。</target>
        </trans-unit>
        <trans-unit id="84f9e027f80dc82cfbcc02dc7ceec363aaaa0369" translate="yes" xml:space="preserve">
          <source>In strict mode the keyword &lt;code&gt;this&lt;/code&gt; has the value &lt;code&gt;undefined&lt;/code&gt; in functions that were invoked as functions (not as methods). (In normal mode &lt;code&gt;this&lt;/code&gt; always points to the global &lt;code&gt;Object&lt;/code&gt;). This difference can be used to test if an implementation supports the strict mode:</source>
          <target state="translated">厳密モードでは、キーワード &lt;code&gt;this&lt;/code&gt; の値は、メソッドとしてではなく関数として呼び出された関数では &lt;code&gt;undefined&lt;/code&gt; です。 （通常モードでは、 &lt;code&gt;this&lt;/code&gt; 常にグローバル &lt;code&gt;Object&lt;/code&gt; を指します）。 この違いは、実装がストリクトモードをサポートしているかどうかをテストするために使用できます。</target>
        </trans-unit>
        <trans-unit id="590bf1e232e9ab23ec1128befcc7fba6b47df466" translate="yes" xml:space="preserve">
          <source>In strict mode you will get a &lt;code&gt;SyntaxError&lt;/code&gt; when the &lt;code&gt;delete&lt;/code&gt; operator is followed by a non qualified identifier (a variable, function or function parameter). In normal mode the &lt;code&gt;delete&lt;/code&gt; expression would do nothing and is evaluated to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">厳密モードでは、 &lt;code&gt;delete&lt;/code&gt; 演算子の後に非修飾識別子（変数、関数、または関数パラメーター）が続くと、 &lt;code&gt;SyntaxError&lt;/code&gt; が発生します。 通常モードでは、 &lt;code&gt;delete&lt;/code&gt; 式は何もせず、 &lt;code&gt;false&lt;/code&gt; と評価されます 。</target>
        </trans-unit>
        <trans-unit id="85d415079a470edeb131eb3614bacfeeedb08d6e" translate="yes" xml:space="preserve">
          <source>In strict mode you will get a &lt;code&gt;TypeError&lt;/code&gt; when you try to delete a non configurable property. (In normal mode the attempt simply fails and the &lt;code&gt;delete&lt;/code&gt; expression is evaluated to &lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">厳密モードでは、構成不可能なプロパティを削除しようとすると &lt;code&gt;TypeError&lt;/code&gt; が発生します。 （通常モードでは、試行は失敗し、 &lt;code&gt;delete&lt;/code&gt; 式は &lt;code&gt;false&lt;/code&gt; と評価されます ）。</target>
        </trans-unit>
        <trans-unit id="b36659c0c4c3212e959b1c3409c8e84af48a58ca" translate="yes" xml:space="preserve">
          <source>In strict mode you will get a &lt;code&gt;TypeError&lt;/code&gt;, when you try to assign to readonly properties or to define new properties for a non extensible object. (In normal mode both simply fail without error message.)</source>
          <target state="translated">厳密モードでは、読み取り専用プロパティに割り当てたり、拡張不可能なオブジェクトに新しいプロパティを定義したりすると、 &lt;code&gt;TypeError&lt;/code&gt; が発生します。 （通常モードでは、どちらも単にエラーメッセージなしで失敗します。）</target>
        </trans-unit>
        <trans-unit id="779a188a15eeeb75cd33dabaef5f5607b5e7df04" translate="yes" xml:space="preserve">
          <source>In strict mode, any assignment to a non-writable property, a
  getter-only property, a non-existing property, a non-existing
  variable, or a non-existing object, will throw an error.</source>
          <target state="translated">厳密モードでは、書き換え不可能なプロパティ、ゲッターのみのプロパティ、存在しないプロパティ、存在しない変数、または存在しないオブジェクトに代入すると、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="34660b8b97e8c589b1780bcb0a3ad7df23ae6ebe" translate="yes" xml:space="preserve">
          <source>In strict mode, duplicate keys in a function literal will produce a
  syntax error. A function can&amp;rsquo;t have two parameters with the same name.
  A function can&amp;rsquo;t have a variable with the same name as one of its
  parameters. A function can&amp;rsquo;t &lt;code&gt;delete&lt;/code&gt; its own variables. An attempt to
  &lt;code&gt;delete&lt;/code&gt; a non-configurable property now throws an exception. Primitive
  values are not implicitly wrapped.</source>
          <target state="translated">厳密モードでは、関数リテラルの重複キーは構文エラーを生成します。 関数に同じ名前の2つのパラメーターを含めることはできません。 関数は、そのパラメーターの1つと同じ名前の変数を持つことはできません。 関数はそれ自体の変数を &lt;code&gt;delete&lt;/code&gt; できません。 設定不可能なプロパティを &lt;code&gt;delete&lt;/code&gt; しようとすると 、例外がスローされるようになりました。 プリミティブ値は暗黙的にラップされません。</target>
        </trans-unit>
        <trans-unit id="1277d69296a283f503d1a6c94d74f75f1d3e36bd" translate="yes" xml:space="preserve">
          <source>In strict mode, when passing code to &lt;code&gt;eval()&lt;/code&gt;, you cannot declare or define variables or functions in the scope of the caller (as you can do it in normal mode). Instead, a new scope is created for &lt;code&gt;eval()&lt;/code&gt; and the variables and functions are within that scope. That scope is destroyed after &lt;code&gt;eval()&lt;/code&gt; finishes execution.</source>
          <target state="translated">strictモードでは、コードを &lt;code&gt;eval()&lt;/code&gt; に渡すときに、（通常モードで実行できるように）呼び出し元のスコープで変数または関数を宣言または定義できません。 代わりに、 &lt;code&gt;eval()&lt;/code&gt; の新しいスコープが作成され、変数と関数はそのスコープ内にあります。 そのスコープは、 &lt;code&gt;eval()&lt;/code&gt; の実行が終了すると破棄されます。</target>
        </trans-unit>
        <trans-unit id="3b9445116c4c7387170dcadef8c31c50c662cba8" translate="yes" xml:space="preserve">
          <source>In their obsession to line up the numeric literals, the developer has inadvertently initialized variable &lt;code&gt;b&lt;/code&gt; with an octal literal. Non-strict mode will interpret this as a numeric literal with value &lt;code&gt;24&lt;/code&gt; (in base 10). However, strict mode will throw an error.</source>
          <target state="translated">数値リテラルを揃えるという執念の中で、開発者は変数 &lt;code&gt;b&lt;/code&gt; を8進数リテラルで誤って初期化しました。 非厳密モードでは、これを値 &lt;code&gt;24&lt;/code&gt; （基数10）の数値リテラルとして解釈します。 ただし、strictモードではエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="9831e3ee257b8570017d5e3cbd952bf7d9110f05" translate="yes" xml:space="preserve">
          <source>In this function, we are using a variable called &lt;code&gt;name&lt;/code&gt; inside the function. Internally, the compiler will first check if there is any variable declared with that particular name in that particular function scope. Since the compiler understood that there is no such variable, it will check in the outer scope. In our case, it is the global scope. Again, the compiler understood that there is also no variable declared in the global space with that name, so it creates such a variable for us in the global space. Conceptually, this variable will be created in the global scope and will be available in the entire application.</source>
          <target state="translated">この関数では、関数内で &lt;code&gt;name&lt;/code&gt; という変数を使用しています。 内部的には、コンパイラーは最初に、その特定の関数スコープ内にその特定の名前で宣言された変数があるかどうかをチェックします。 コンパイラーはそのような変数がないことを理解しているため、外部スコープでチェックインします。 私たちの場合、それはグローバルスコープです。 この場合も、コンパイラはその名前のグローバルスペースで宣言された変数がないことを理解しているため、グローバルスペースでこのような変数を作成します。 概念的には、この変数はグローバルスコープで作成され、アプリケーション全体で使用できます。</target>
        </trans-unit>
        <trans-unit id="29d176e51afc8cfe92995728f708273a3dba6e2b" translate="yes" xml:space="preserve">
          <source>Including &lt;code&gt;use strict&lt;/code&gt; in the beginning of your all sensitive JavaScript files from this point is a small way to be a better JavaScript programmer and avoid random variables becoming global and things change silently.</source>
          <target state="translated">この時点から機密性の高いすべてのJavaScriptファイルの最初に &lt;code&gt;use strict&lt;/code&gt; を含めることは、より優れたJavaScriptプログラマーになるための小さな方法であり、ランダム変数がグローバルになり、物事が静かに変化するのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="025fb56c42e573032fb397fd3868bcc2c6bb5ce7" translate="yes" xml:space="preserve">
          <source>Insert a &lt;code&gt;'use strict';&lt;/code&gt; statement on top of your script:</source>
          <target state="translated">&lt;code&gt;'use strict';&lt;/code&gt; 挿入します。 スクリプトの上のステートメント：</target>
        </trans-unit>
        <trans-unit id="9c8d780490a36100dba6e751d2b2cef05a32cfe4" translate="yes" xml:space="preserve">
          <source>Inside &lt;a href=&quot;https://caniuse.com/#feat=es6-module&quot;&gt;native ECMAScript modules&lt;/a&gt; (with &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; statements) and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;ES6 classes&lt;/a&gt;, strict mode is always enabled and cannot be disabled.</source>
          <target state="translated">&lt;a href=&quot;https://caniuse.com/#feat=es6-module&quot;&gt;ネイティブECMAScriptモジュール&lt;/a&gt; （ &lt;code&gt;import&lt;/code&gt; および &lt;code&gt;export&lt;/code&gt; ステートメントを含む）および&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;ES6クラス内では&lt;/a&gt; 、厳密モードは常に有効であり、無効にすることはできません。</target>
        </trans-unit>
        <trans-unit id="7e171a04a4eeaf5a9849e77b87c64e070643b7ba" translate="yes" xml:space="preserve">
          <source>It catches some common coding bloopers, throwing exceptions.</source>
          <target state="translated">これは、いくつかの一般的なコーディングのブループをキャッチし、例外をスローします。</target>
        </trans-unit>
        <trans-unit id="9dcb0c3ef0d34afe87dadacc330eb172ee25f066" translate="yes" xml:space="preserve">
          <source>It disables features that are confusing or poorly thought out.</source>
          <target state="translated">紛らわしい、あるいは考えられていない機能を無効にします。</target>
        </trans-unit>
        <trans-unit id="49b8baaa6a095c3eb48ab5966d9e83454f6ec304" translate="yes" xml:space="preserve">
          <source>It is not a statement, but a literal expression, ignored by earlier
versions of JavaScript.</source>
          <target state="translated">これはステートメントではなく、リテラル表現であり、以前のバージョンのJavaScriptでは無視されています。</target>
        </trans-unit>
        <trans-unit id="f332558e8f07c24532551cb466729913fd5cd0e9" translate="yes" xml:space="preserve">
          <source>It prevents, or throws errors, when relatively &quot;unsafe&quot; actions are taken (such as gaining access to the global object).</source>
          <target state="translated">これは、比較的「安全ではない」動作が行われた場合 (グローバルオブジェクトへのアクセスなど)を防止したり、エラーをスローしたりします。</target>
        </trans-unit>
        <trans-unit id="8cba967f49d817c496f0e2267da26d8c35639e1d" translate="yes" xml:space="preserve">
          <source>It talks about browser support, but more importantly how to deal with it safely:</source>
          <target state="translated">ブラウザ対応の話もありますが、それよりも安全に対処するための方法が書かれています。</target>
        </trans-unit>
        <trans-unit id="a7db968114d988709a73f4b2145447f7be94164f" translate="yes" xml:space="preserve">
          <source>It's a new feature of ECMAScript 5. John Resig wrote up &lt;a href=&quot;http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/&quot;&gt;a nice summary&lt;/a&gt; of it.</source>
          <target state="translated">これはECMAScript 5の新機能です。JohnResigは&lt;a href=&quot;http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/&quot;&gt;そのすばらしい要約&lt;/a&gt;を書きました 。</target>
        </trans-unit>
        <trans-unit id="e32f416964e370d5e5ee36f3cd35416da4dbe41b" translate="yes" xml:space="preserve">
          <source>It's just a string you put in your JavaScript files (either at the top of your file or inside of a function) that looks like this:</source>
          <target state="translated">これは、JavaScriptファイル(ファイルの先頭か関数の中)に以下のような文字列を記述したものです。</target>
        </trans-unit>
        <trans-unit id="817c8652ad34e116e5811fa2935033d7b0db3d3f" translate="yes" xml:space="preserve">
          <source>JavaScript &amp;ldquo;strict&amp;rdquo; mode was introduced in ECMAScript 5.</source>
          <target state="translated">JavaScriptの「strict」モードはECMAScript 5で導入されました。</target>
        </trans-unit>
        <trans-unit id="2b940df5bba00944ecb478eabe69d76ab720b74a" translate="yes" xml:space="preserve">
          <source>JavaScript has always had read-only properties, but you
  could not create them yourself until ES5&amp;rsquo;s &lt;code&gt;Object.createProperty&lt;/code&gt;
  function exposed that capability. If you attempted to assign a value
  to a read-only property, it would fail silently. The assignment would
  not change the property&amp;rsquo;s value, but your program would proceed as
  though it had. This is an integrity hazard that can cause programs to
  go into an inconsistent state. In strict mode, attempting to change a
  read-only property will throw an exception.</source>
          <target state="translated">JavaScriptには常に読み取り専用プロパティがありましたが、ES5の &lt;code&gt;Object.createProperty&lt;/code&gt; 関数がその機能を公開するまで、自分で作成することはできませんでした。 読み取り専用プロパティに値を割り当てようとすると、警告なしに失敗します。 割り当てによってプロパティの値が変更されることはありませんが、プログラムはそのように処理されます。 これは、プログラムが一貫性のない状態になる可能性がある完全性の危険です。 厳密モードでは、読み取り専用プロパティを変更しようとすると、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="ddb6e2a5aa8c17476d0875f1a887b8d5ae8365ff" translate="yes" xml:space="preserve">
          <source>JavaScript has implied global variables. If
  you do not explicitly declare a variable, a global variable is
  implicitly declared for you. This makes programming easier for
  beginners because they can neglect some of their basic housekeeping
  chores. But it makes the management of larger programs much more
  difficult and it significantly degrades reliability. So in strict
  mode, implied global variables are no longer created. You should
  explicitly declare all of your variables.</source>
          <target state="translated">JavaScriptにはグローバル変数が暗黙的に宣言されています。明示的に変数を宣言しなければ、暗黙のうちにグローバル変数が宣言されます。これにより、初心者は基本的な家事の一部をおろそかにすることができるので、プログラミングが簡単になります。しかし、大規模なプログラムの管理は非常に困難になり、信頼性を著しく低下させます。そのため、厳密なモードでは、暗黙のグローバル変数は作成されなくなります。すべての変数を明示的に宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="e2d7eb3c95183e015ef939a2a91a64f282eb81f9" translate="yes" xml:space="preserve">
          <source>List of features (non-exhaustive)</source>
          <target state="translated">機能一覧(非網羅的</target>
        </trans-unit>
        <trans-unit id="9c7b40e6928a432a1ec3f4bfbac791071ab83c89" translate="yes" xml:space="preserve">
          <source>Look at these statements and examples from MDN:</source>
          <target state="translated">MDNのこれらのステートメントと例を見てください。</target>
        </trans-unit>
        <trans-unit id="5469b8b61ffe448f41a3cf81a23966ddb0f980b6" translate="yes" xml:space="preserve">
          <source>Module code is always strict mode code.</source>
          <target state="translated">モジュールコードは常にストリクトモードコードです。</target>
        </trans-unit>
        <trans-unit id="c5e07b85564bd88aae754a962908532c8c0e4b6d" translate="yes" xml:space="preserve">
          <source>My project was not a greenfield project when I adopted &lt;code&gt;&quot;use strict&quot;&lt;/code&gt;.  As a result, my IDE is full of red marks because I don't have &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; on half my modules, and JSHint complains about that.  It's a reminder to me about what refactoring I should do in the future.  My goal is to be red mark free due to all of my missing &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; statements, but that is years away now.</source>
          <target state="translated">私が &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; を採用したとき、私のプロジェクトはグリーンフィールドプロジェクトではありませんでした。 その結果、モジュールの半分に &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; を使用していないため、私のIDEは赤いマークでいっぱいになり、JSHintはそれについて不平を言っています。 これは、今後行うべきリファクタリングについてのリマインダーです。 私の目標は、すべての &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; ステートメントが欠落しているために赤いマークがないことですが、それは今から数年先です。</target>
        </trans-unit>
        <trans-unit id="44085a42d6cb5c69ac3619d4793a1d1371ccfcfa" translate="yes" xml:space="preserve">
          <source>N.B: The &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; directive is only recognized at the beginning of a script or a function.</source>
          <target state="translated">注意： &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; ディレクティブは、スクリプトまたは関数の最初でのみ認識されます。</target>
        </trans-unit>
        <trans-unit id="ae74c50e67b3cccd367e03333a64b86a6bddcf67" translate="yes" xml:space="preserve">
          <source>No duplicates</source>
          <target state="translated">重複なし</target>
        </trans-unit>
        <trans-unit id="10b58a0a8940ea2e58dbffa20044c150b681b579" translate="yes" xml:space="preserve">
          <source>Noisy Failure</source>
          <target state="translated">ノイジーな失敗</target>
        </trans-unit>
        <trans-unit id="5de14d9134cba90071dacb30ddfcb3e147447382" translate="yes" xml:space="preserve">
          <source>Non-strict mode:</source>
          <target state="translated">ノンストリクトモード。</target>
        </trans-unit>
        <trans-unit id="8d36800f9bf0d59a3c2d2c533771cdf6c89406de" translate="yes" xml:space="preserve">
          <source>Normally, JavaScript does not follow strict rules, hence increasing chances of errors. After using &lt;code&gt;&quot;use strict&quot;&lt;/code&gt;, the JavaScript code should follow strict set of rules as in other programming languages such as use of terminators, declaration before initialization, etc.</source>
          <target state="translated">通常、JavaScriptは厳密なルールに従っていないため、エラーの可能性が高くなります。 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 後、JavaScriptコードは、ターミネーターの使用、初期化前の宣言など、他のプログラミング言語と同様に、一連の厳密な規則に従う必要があります。</target>
        </trans-unit>
        <trans-unit id="19034d503e754b80c9af82f89e91b77bf8089b78" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;use strict&lt;/code&gt; was introduced in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;EcmaScript 5&lt;/a&gt; and was kept since then.</source>
          <target state="translated">&lt;code&gt;use strict&lt;/code&gt; は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;EcmaScript 5で&lt;/a&gt;導入され、それ以来維持されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f92b62c5cd55600499e3b2fcbabc790595cffe51" translate="yes" xml:space="preserve">
          <source>Note that everything in the file &lt;code&gt;myscript.js&lt;/code&gt; will be interpreted in strict mode.</source>
          <target state="translated">&lt;code&gt;myscript.js&lt;/code&gt; ファイル内のすべてのものが厳密モードで解釈されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0498bcc5326f24110adbf8018626105327647e5c" translate="yes" xml:space="preserve">
          <source>Now let's write the same function in strict mode.</source>
          <target state="translated">では、同じ関数を厳密モードで書いてみましょう。</target>
        </trans-unit>
        <trans-unit id="7ca0bcad832ba95a89c297b2ceac7cc9fc126660" translate="yes" xml:space="preserve">
          <source>Now,this code creates &lt;code&gt;nameoftree&lt;/code&gt; in global scope which could be accessed using &lt;code&gt;window.nameoftree&lt;/code&gt;. When we implement &lt;code&gt;use strict&lt;/code&gt; the code would throw error.</source>
          <target state="translated">現在、このコードは、 &lt;code&gt;window.nameoftree&lt;/code&gt; を使用してアクセスできるグローバルスコープに &lt;code&gt;nameoftree&lt;/code&gt; を作成します。 &lt;code&gt;use strict&lt;/code&gt; を実装すると 、コードはエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="10500e54805775e3d661be35724e87f0b1dbc4c9" translate="yes" xml:space="preserve">
          <source>Octal</source>
          <target state="translated">Octal</target>
        </trans-unit>
        <trans-unit id="fc48827db54649898f715056ea3b1540dc1d9231" translate="yes" xml:space="preserve">
          <source>Octal syntax</source>
          <target state="translated">オクタル構文</target>
        </trans-unit>
        <trans-unit id="dc4532f060ff3aae00b84dcf89567e87053d969d" translate="yes" xml:space="preserve">
          <source>Of course it also talks about just what a lot of those misfeatures are (were) and how ECMAScript 5 fixes them.</source>
          <target state="translated">もちろん、これらの誤動作の多くがどのようなものであるか、そして ECMAScript 5 がどのようにそれらを修正しているかについても触れられています。</target>
        </trans-unit>
        <trans-unit id="a9c8e2b60591d63bee27d639f4a20c27d766869f" translate="yes" xml:space="preserve">
          <source>One of the benefits of strict code is that tools like &lt;a href=&quot;http://developer.yahoo.com/yui/compressor/&quot;&gt;YUI Compressor&lt;/a&gt;
  can do a better job when processing it.</source>
          <target state="translated">厳格なコードの利点の1つは、 &lt;a href=&quot;http://developer.yahoo.com/yui/compressor/&quot;&gt;YUI Compressor&lt;/a&gt;などのツールが処理するときに、より優れた処理を実行できることです。</target>
        </trans-unit>
        <trans-unit id="6441d22a368af55c21ee62c9b9e951bc296104eb" translate="yes" xml:space="preserve">
          <source>One of the goals of strict mode is to allow for faster debugging of issues. It helps the developers by throwing exception when certain wrong things occur that can cause silent &amp;amp; strange behaviour of your webpage. The moment we use &lt;code&gt;use strict&lt;/code&gt;, the code will throw out errors which helps developer to fix it in advance.</source>
          <target state="translated">ストリクトモードの目標の1つは、問題のより迅速なデバッグを可能にすることです。 これは、Webページのサイレントで奇妙な動作を引き起こす可能性がある特定の間違ったことが発生したときに例外をスローすることにより、開発者を支援します。 私たちが使用 &lt;code&gt;use strict&lt;/code&gt; 瞬間にstrictを使用すると、コードはエラーをスローします。これは開発者が事前に修正するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="a0456e473032cec369aace45ac22933c75e5b022" translate="yes" xml:space="preserve">
          <source>Or, insert a &lt;code&gt;'use strict';&lt;/code&gt; statement on top of your function body:</source>
          <target state="translated">または、 &lt;code&gt;'use strict';&lt;/code&gt; 挿入します。 関数本体の上のステートメント：</target>
        </trans-unit>
        <trans-unit id="5bfc0f97dcb02767913e44123d36722a2485178e" translate="yes" xml:space="preserve">
          <source>People generally think that you shouldn&amp;rsquo;t use those things in the first place, but some developers don&amp;rsquo;t like the constraint and want to use all the features of the language.</source>
          <target state="translated">人々は一般的にそもそもそれらのものを使用すべきではないと考えていますが、一部の開発者は制約を嫌い、言語のすべての機能を使用したいと考えています。</target>
        </trans-unit>
        <trans-unit id="f73ad56101ddb20a046ef96d3b285d9ee896e394" translate="yes" xml:space="preserve">
          <source>Please check the function below written in non-strict mode:</source>
          <target state="translated">厳密でないモードで書かれた以下の機能を確認してください。</target>
        </trans-unit>
        <trans-unit id="ea0e96af85e42105da55a87738dffc05d9c4b8aa" translate="yes" xml:space="preserve">
          <source>Please refer to &lt;a href=&quot;http://www.w3schools.com/js/js_strict.asp&quot;&gt;http://www.w3schools.com/js/js_strict.asp&lt;/a&gt; to know more</source>
          <target state="translated">詳細については、 &lt;a href=&quot;http://www.w3schools.com/js/js_strict.asp&quot;&gt;http：//www.w3schools.com/js/js_strict.asp&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="73834459f6254152ddd4773c32f68818b0dbafff" translate="yes" xml:space="preserve">
          <source>Prevents accidental declaration of global variables.Using &lt;code&gt;&quot;use strict()&quot;&lt;/code&gt; will make sure that variables are declared with &lt;code&gt;var&lt;/code&gt; before use. 
Eg:</source>
          <target state="translated">グローバル変数の誤った宣言を防止します。 &lt;code&gt;&quot;use strict()&quot;&lt;/code&gt; を使用すると、使用前に変数が &lt;code&gt;var&lt;/code&gt; で宣言されていることを確認できます。 例えば：</target>
        </trans-unit>
        <trans-unit id="d19ef64a263f6819272bad8f55d25e26eaca089d" translate="yes" xml:space="preserve">
          <source>Prevents accidental globals</source>
          <target state="translated">偶発的なグローバルの防止</target>
        </trans-unit>
        <trans-unit id="74d06b24393fc0bc828f7990084cc04f0d92db56" translate="yes" xml:space="preserve">
          <source>Problem at line 1 character 1: Missing &quot;use strict&quot; statement.</source>
          <target state="translated">1 行目の文字 1 の問題:&quot;use strict&quot; 文の欠落。</target>
        </trans-unit>
        <trans-unit id="313048df06e5e26643dc1670c345e8164e9763eb" translate="yes" xml:space="preserve">
          <source>Putting it in your code now shouldn't cause any problems with current browsers as it's just a string. It may cause problems with your code in the future if your code violates the pragma.  For instance, if you currently have &lt;code&gt;foo = &quot;bar&quot;&lt;/code&gt; without defining &lt;code&gt;foo&lt;/code&gt; first, your code will start failing...which is a good thing in my opinion.</source>
          <target state="translated">これをコードに含めても、現在のブラウザでは単なる文字列であるため、問題は発生しません。 コードがプラグマに違反すると、将来コードに問題が発生する可能性があります。 たとえば、最初に &lt;code&gt;foo&lt;/code&gt; を定義せずに &lt;code&gt;foo = &quot;bar&quot;&lt;/code&gt; を使用している場合、コードは失敗し始めます...これは私の意見では良いことです。</target>
        </trans-unit>
        <trans-unit id="136f357105c51a569118fd5e9a4b2d1dc183c426" translate="yes" xml:space="preserve">
          <source>Recently, I ran some of my JavaScript code through Crockford's &lt;a href=&quot;http://www.jslint.com/&quot;&gt;JSLint&lt;/a&gt;, and it gave the following error:</source>
          <target state="translated">最近、Crockfordの&lt;a href=&quot;http://www.jslint.com/&quot;&gt;JSLint&lt;/a&gt;を介してJavaScriptコードの一部を実行したところ、次のエラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="86a7a25b3cd35a1d2197e94d964ad1f2752ed5ee" translate="yes" xml:space="preserve">
          <source>Requires all property names in an object literal to be unique (&lt;code&gt;var x = {x1: &quot;1&quot;, x1: &quot;2&quot;}&lt;/code&gt;)</source>
          <target state="translated">オブジェクトリテラルのすべてのプロパティ名が一意である必要があります（ &lt;code&gt;var x = {x1: &quot;1&quot;, x1: &quot;2&quot;}&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b82277b8027feee64c843902b18fa2f0eaf9f6f9" translate="yes" xml:space="preserve">
          <source>Reserved words for future JavaScript versions</source>
          <target state="translated">将来のJavaScriptバージョンのための予約語</target>
        </trans-unit>
        <trans-unit id="00fe32fa055c05b65cba3aa264fdbb5e9ec51640" translate="yes" xml:space="preserve">
          <source>Safer eval()</source>
          <target state="translated">より安全な eval()</target>
        </trans-unit>
        <trans-unit id="4651a34e4df9619783ad372f905d6d3b84e9d76d" translate="yes" xml:space="preserve">
          <source>Scope</source>
          <target state="translated">Scope</target>
        </trans-unit>
        <trans-unit id="c5ed7ad12df1fb5c64372abffb2e9c638c2000fd" translate="yes" xml:space="preserve">
          <source>Setting a value to an undeclared variable</source>
          <target state="translated">未定義の変数に値を設定する</target>
        </trans-unit>
        <trans-unit id="158a5623a22ae074fb939328027da4313300684f" translate="yes" xml:space="preserve">
          <source>Silent failing assignments will throw error in strict mode (assigning &lt;code&gt;NaN = 5;&lt;/code&gt;)</source>
          <target state="translated">サイレントで失敗した割り当ては、厳密モードでエラーをスローします（ &lt;code&gt;NaN = 5;&lt;/code&gt; 割り当てる; ）</target>
        </trans-unit>
        <trans-unit id="a249bbd654c1ea670a1ce21638e02e4758f365f8" translate="yes" xml:space="preserve">
          <source>Small examples to compare:</source>
          <target state="translated">比較するための小さな例。</target>
        </trans-unit>
        <trans-unit id="4a4f135a79bb2ffe4e6528781a0caca54f5e9001" translate="yes" xml:space="preserve">
          <source>So what is &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; all about, what does it imply, and is it still relevant?</source>
          <target state="translated">それでは、 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; とは何ですか。 すべてについて、それは何を意味し、それはまだ関連していますか？</target>
        </trans-unit>
        <trans-unit id="efdeaaeb5cef631181f2b0b6615ca443336cee21" translate="yes" xml:space="preserve">
          <source>So, I suppose it's a bit like the &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; you can use in Perl &lt;em&gt;(hence the name?)&lt;/em&gt;: it helps you make fewer errors, by detecting more things that could lead to breakages.</source>
          <target state="translated">したがって、Perlで使用できる &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; ようなものだと思います&lt;em&gt;（そのため、名前が？）&lt;/em&gt; 。破損につながる可能性のあるものをより多く検出することで、エラーを減らすのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="ada52d888ccf16d2711b8a6377768a782af5c30e" translate="yes" xml:space="preserve">
          <source>Sources:</source>
          <target state="translated">Sources:</target>
        </trans-unit>
        <trans-unit id="56888f9c90a484f01fdab9bff41f2251fdd72944" translate="yes" xml:space="preserve">
          <source>Strict Mode - JavaScript | MDN</source>
          <target state="translated">ストリクトモード-JavaScript</target>
        </trans-unit>
        <trans-unit id="4c97b7a3fcb78ad7a4d70823a936a41e3b32a18f" translate="yes" xml:space="preserve">
          <source>Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a &quot;strict&quot; operating context. This strict context prevents certain actions from being taken and throws more exceptions.</source>
          <target state="translated">Strict Mode は ECMAScript 5 の新機能で、プログラムや関数を「厳密な」操作コンテキストに置くことができます。この厳密なコンテキストは、特定のアクションが実行されるのを防ぎ、より多くの例外をスローします。</target>
        </trans-unit>
        <trans-unit id="0925c525a403588f0be5f281195e7ab1228e41ce" translate="yes" xml:space="preserve">
          <source>Strict mode changes previously accepted &quot;bad syntax&quot; into real errors.</source>
          <target state="translated">厳格モードでは、以前に受け入れられていた &quot;不正な構文 &quot;を実際のエラーに変更します。</target>
        </trans-unit>
        <trans-unit id="dfa23d0a0c1ade7fa039058260fbdf2a088763e0" translate="yes" xml:space="preserve">
          <source>Strict mode does not alias properties of the &lt;code&gt;arguments&lt;/code&gt; object with the formal parameters. (i.e. in &lt;code&gt;function sum (a,b) { return arguments[0] + b;}&lt;/code&gt; This works because &lt;code&gt;arguments[0]&lt;/code&gt; is bound to &lt;code&gt;a&lt;/code&gt; and so on. )</source>
          <target state="translated">厳密モードでは、 &lt;code&gt;arguments&lt;/code&gt; オブジェクトのプロパティに仮パラメータがエイリアスされません。 （つまり、 &lt;code&gt;function sum (a,b) { return arguments[0] + b;}&lt;/code&gt; 、 &lt;code&gt;arguments[0]&lt;/code&gt; が &lt;code&gt;a&lt;/code&gt; にバインドされているため、これが機能します。</target>
        </trans-unit>
        <trans-unit id="1e7b5b22d16bdb8a5476e2e6c1fdc04bffef1ee0" translate="yes" xml:space="preserve">
          <source>Strict mode for functions: Likewise, to invoke strict mode for a
  function, put the exact statement &quot;use strict&quot;; (or 'use strict';) in
  the function's body before any other statements.</source>
          <target state="translated">関数の厳格モード。同様に、関数の厳密なモードを呼び出すには、他のステートメントの前に &quot;use strict&quot;;(または 'use strict';)という正確なステートメントを関数のボディに記述します。</target>
        </trans-unit>
        <trans-unit id="aba1aed4e7b22cf2830dc704dbcbc7728a024ed8" translate="yes" xml:space="preserve">
          <source>Strict mode helps out in a couple ways:</source>
          <target state="translated">厳格なモードは、いくつかの方法で助けてくれます。</target>
        </trans-unit>
        <trans-unit id="a1071c6d144e305f80fc9cb060b9efe833597dc7" translate="yes" xml:space="preserve">
          <source>Strict mode is now &lt;a href=&quot;http://caniuse.com/#use-strict&quot;&gt;supported by all major browsers&lt;/a&gt;.</source>
          <target state="translated">厳格モードは現在&lt;a href=&quot;http://caniuse.com/#use-strict&quot;&gt;、すべての主要なブラウザーでサポートされています&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="fecd3bae551b0fe9196f1a9e57dd72fde9f330a3" translate="yes" xml:space="preserve">
          <source>Strict mode makes it easier to write &quot;secure&quot; JavaScript.</source>
          <target state="translated">Strictモードでは、&quot;セキュア &quot;なJavaScriptを簡単に書くことができます。</target>
        </trans-unit>
        <trans-unit id="ffd44cb0172afba4c6ad8d00101e96f6c2f1ced4" translate="yes" xml:space="preserve">
          <source>Strict mode makes several changes to normal JavaScript semantics:</source>
          <target state="translated">Strict モードでは、通常の JavaScript のセマンティクスにいくつかの変更が加えられています。</target>
        </trans-unit>
        <trans-unit id="42aae285b68e8a7fe6a0256e8acb1b55fb12a44f" translate="yes" xml:space="preserve">
          <source>Strict mode requires that all variable binding be done statically.
  That means that the features that previously required dynamic binding
  must be eliminated or modified. Specifically, the with statement is
  eliminated, and the eval function&amp;rsquo;s ability to tamper with the
  environment of its caller is severely restricted.</source>
          <target state="translated">厳密モードでは、すべての変数バインディングが静的に行われる必要があります。 つまり、以前は動的バインディングが必要であった機能を削除または変更する必要があります。 具体的には、withステートメントが削除され、呼び出し元の環境を改ざんするeval関数の機能が大幅に制限されています。</target>
        </trans-unit>
        <trans-unit id="981037f259f5ec994dd978355da84261730db94d" translate="yes" xml:space="preserve">
          <source>Strict mode:</source>
          <target state="translated">厳格なモード。</target>
        </trans-unit>
        <trans-unit id="73600aa2e4bc7bac1a44ca2049803b7ae131c09a" translate="yes" xml:space="preserve">
          <source>The &quot;use strict&quot; directive is new in
  JavaScript 1.8.5 (ECMAScript version 5). It is not a statement, but a
  literal expression, ignored by earlier versions of JavaScript. The
  purpose of &quot;use strict&quot; is to indicate that the code should be
  executed in &quot;strict mode&quot;. With strict mode, you can not, for example,
  use undeclared variables.</source>
          <target state="translated">use strict&quot; ディレクティブは、JavaScript 1.8.5 (ECMAScript バージョン 5)で新しく追加されました。これはステートメントではなく、リテラル表現であり、以前のバージョンの JavaScript では無視されていました。use strict&quot; の目的は、コードを &quot;strict mode&quot; で実行することを示すことです。strict モードでは、例えば、宣言されていない変数を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="da414cbc8191e02ce23dc8839e8f655afd89e64c" translate="yes" xml:space="preserve">
          <source>The &quot;use strict&quot; directive is new in JavaScript 1.8.5 (ECMAScript
  version 5).</source>
          <target state="translated">use strict」ディレクティブは、JavaScript 1.8.5 (ECMAScript version 5)で新たに追加されました。</target>
        </trans-unit>
        <trans-unit id="871bf0916612bf268e233d62d36329c75cb6843d" translate="yes" xml:space="preserve">
          <source>The &quot;use strict&quot; directive was new in ECMAScript version 5.</source>
          <target state="translated">use strict&quot; ディレクティブは ECMAScript バージョン 5 で新たに追加されました。</target>
        </trans-unit>
        <trans-unit id="bc3dd2b1ab543df882ca1a48ca20880937f9ee29" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;JavaScript strict mode&lt;/a&gt; is a feature in &lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-262.htm&quot;&gt;ECMAScript 5&lt;/a&gt;. You can enable the strict mode by declaring this in the top of your script/function.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;JavaScript strictモード&lt;/a&gt;は&lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-262.htm&quot;&gt;ECMAScript 5の&lt;/a&gt;機能です。 strictモードを有効にするには、スクリプト/関数の上部でこれを宣言します。</target>
        </trans-unit>
        <trans-unit id="c3ab9d9f8d23f7bf773bc9224e29ab32c41301a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use strict&lt;/code&gt; directive indicates that the following code (in a script or a function) is strict code.
The code in the highest level of a script (code that is not in a function) is considered strict code when the script contains a &lt;code&gt;use strict&lt;/code&gt; directive.
The content of a function is considered strict code when the function itself is defined in a strict code or when the function contains a &lt;code&gt;use strict&lt;/code&gt; directive.
Code that is passed to an &lt;code&gt;eval()&lt;/code&gt; method is considered strict code when &lt;code&gt;eval()&lt;/code&gt; was called from a strict code or contains the &lt;code&gt;use strict&lt;/code&gt; directive itself.</source>
          <target state="translated">&lt;code&gt;use strict&lt;/code&gt; ディレクティブは、次のコード（スクリプトまたは関数内）がstrictコードであることを示します。 スクリプトに &lt;code&gt;use strict&lt;/code&gt; ディレクティブが含まれている場合、スクリプトの最上位レベルのコード（関数内にないコード）は、strictコードと見なされます。 関数自体が厳密なコードで定義されている場合、または関数に &lt;code&gt;use strict&lt;/code&gt; ディレクティブが含まれている場合、関数の内容は厳密なコードと見なされます。 &lt;code&gt;eval()&lt;/code&gt; メソッドに渡されるコードは、 &lt;code&gt;eval()&lt;/code&gt; が厳密なコードから呼び出された場合、または &lt;code&gt;use strict&lt;/code&gt; ディレクティブ自体を含む場合、厳密なコードと見なされます。</target>
        </trans-unit>
        <trans-unit id="e02035bfd1451179fb6fa7438f433460a260f654" translate="yes" xml:space="preserve">
          <source>The arguments pseudo array becomes a little bit more
  array-like in ES5. In strict mode, it loses its &lt;code&gt;callee&lt;/code&gt; and &lt;code&gt;caller&lt;/code&gt;
  properties. This makes it possible to pass your &lt;code&gt;arguments&lt;/code&gt; to untrusted
  code without giving up a lot of confidential context. Also, the
  &lt;code&gt;arguments&lt;/code&gt; property of functions is eliminated.</source>
          <target state="translated">ES5では、引数の疑似配列がもう少し配列のようになっています。 厳密モードでは、 &lt;code&gt;callee&lt;/code&gt; と &lt;code&gt;caller&lt;/code&gt; プロパティが失われます。 これにより、多くの機密コンテキストをあきらめることなく、信頼できないコードに &lt;code&gt;arguments&lt;/code&gt; を渡すことができます。 また、関数の &lt;code&gt;arguments&lt;/code&gt; プロパティは削除されました。</target>
        </trans-unit>
        <trans-unit id="a01550b956584e50c573534903412b194d39ea38" translate="yes" xml:space="preserve">
          <source>The main reasons why developers should use &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; are:</source>
          <target state="translated">開発者が &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 使用」を使用する必要がある主な理由は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e11cb88feedf1f50b774d7918351ac724492485e" translate="yes" xml:space="preserve">
          <source>The octal (or base 8) representation of numbers was extremely
  useful when doing machine-level programming on machines whose word
  sizes were a multiple of 3. You needed octal when working with the CDC
  6600 mainframe, which had a word size of 60 bits. If you could read
  octal, you could look at a word as 20 digits. Two digits represented
  the op code, and one digit identified one of 8 registers. During the
  slow transition from machine codes to high level languages, it was
  thought to be useful to provide octal forms in programming languages.</source>
          <target state="translated">数字の8進数(または8進数)表現は、ワードサイズが3の倍数であるマシンでマシンレベルのプログラミングを行う際に非常に便利でした。 ワードサイズが60ビットのCDC 6600メインフレームで作業する際には、8進数が必要でした。8進数が読めれば、ワードを20桁の数字で見ることができます。2桁がオペコードを表し、1桁が8つのレジスタの1つを表していました。マシンコードから高レベル言語へのゆっくりとした移行の間に、プログラミング言語で八進数形式を提供することが有用であると考えられました。</target>
        </trans-unit>
        <trans-unit id="1b9d97e5a3c8f84f9eca85dd8d59d37bf769eaf4" translate="yes" xml:space="preserve">
          <source>The purpose of &quot;use strict&quot; is to indicate that the code should be
executed in &quot;strict mode&quot;.</source>
          <target state="translated">use strict」の目的は、コードを「strictモード」で実行することを示すことです。</target>
        </trans-unit>
        <trans-unit id="50e416e7691b94ac73a19329e3d0d84aa7766f77" translate="yes" xml:space="preserve">
          <source>The quotes around the command make sure that the code will still work in older browsers as well (although the things that generate a syntax error in strict mode will generally just cause the script to malfunction in some hard to detect way in those older browsers).</source>
          <target state="translated">コマンドを囲んだ引用符は、古いブラウザでもコードが動作することを確認するためのものです(厳密モードで構文エラーを生成するものは、一般的に古いブラウザでは検出しにくい方法でスクリプトが誤動作する原因になりますが)。</target>
        </trans-unit>
        <trans-unit id="fef18bab467b7c8273c3132a626d92c3771e553a" translate="yes" xml:space="preserve">
          <source>The statement &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; instructs the browser to use the Strict mode, which is a reduced and safer feature set of JavaScript.</source>
          <target state="translated">&lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; という文。 JavaScriptの縮小された安全な機能セットであるStrictモードを使用するようにブラウザーに指示します。</target>
        </trans-unit>
        <trans-unit id="092a4db52edff1b55719897e8c31aebfe3163802" translate="yes" xml:space="preserve">
          <source>The strict mode of ECMAScript 5 is a restricted subset of the JavaScript language, which eliminates relevant deficits of the language and features more stringent error checking and higher security. The following lists the differences between strict mode and normal mode (of which the first three are particularly important):</source>
          <target state="translated">ECMAScript 5 の strict mode は、JavaScript 言語の制限されたサブセットであり、言語の関連する欠点を排除し、より厳格なエラーチェックとより高いセキュリティを特徴としています。以下に、厳密モードと通常モードの違いを示します (このうち、最初の 3 つは特に重要です)。</target>
        </trans-unit>
        <trans-unit id="35a411c4b982908019ab5ca4beff69a7f8222678" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;&quot;arguments&quot;&lt;/code&gt; cannot be used as a variable:</source>
          <target state="translated">文字列 &lt;code&gt;&quot;arguments&quot;&lt;/code&gt; は変数として使用できません：</target>
        </trans-unit>
        <trans-unit id="ceeec8e70875ba0392801d9dae48808cf2b43044" translate="yes" xml:space="preserve">
          <source>There are a number of situations that could cause &lt;code&gt;this&lt;/code&gt;
  to be bound to the global object. For example, if you forget to
  provide the &lt;code&gt;new&lt;/code&gt; prefix when calling a constructor function, the
  constructor's &lt;code&gt;this&lt;/code&gt; will be bound unexpectedly to the global object, so
  instead of initializing a new object, it will instead be silently
  tampering with global variables. In these situations, strict mode will
  instead bind &lt;code&gt;this&lt;/code&gt; to &lt;code&gt;undefined&lt;/code&gt;, which will cause the constructor to
  throw an exception instead, allowing the error to be detected much
  sooner.</source>
          <target state="translated">これがグローバルオブジェクトにバインドされる原因となる状況はいくつかあります。 たとえば、コンストラクター関数を呼び出すときに &lt;code&gt;new&lt;/code&gt; プレフィックスを指定するのを忘れた場合、コンストラクターの &lt;code&gt;this&lt;/code&gt; は予期せずグローバルオブジェクトにバインドされるため、新しいオブジェクトを初期化する代わりに、グローバル変数を暗黙的に改ざんします。 これらの状況では、strictモードは代わりに &lt;code&gt;this&lt;/code&gt; を &lt;code&gt;undefined&lt;/code&gt; にバインドします。 これにより、代わりにコンストラクターが例外をスローし、エラーをより早く検出できるようになります。</target>
        </trans-unit>
        <trans-unit id="2b08b8743bda54c101d135ee7a32c07df9257bf6" translate="yes" xml:space="preserve">
          <source>There are few more but I need to gain more knowledge on that.</source>
          <target state="translated">まだまだ少ないですが、もっと知識をつけないといけませんね。</target>
        </trans-unit>
        <trans-unit id="048399442f3a5673fb36ae4b92a85ca20458e560" translate="yes" xml:space="preserve">
          <source>There's a good talk by some people who were on the ECMAScript committee: &lt;a href=&quot;http://www.youtube.com/watch?v=Kq4FpMe6cRs&quot;&gt;Changes to JavaScript, Part 1: ECMAScript 5&quot;&lt;/a&gt; about how incremental use of the &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; switch allows JavaScript implementers to clean up a lot of the dangerous features of JavaScript without suddenly breaking every website in the world.</source>
          <target state="translated">ECMAScript委員会に参加した一部の人による良い話があり&lt;a href=&quot;http://www.youtube.com/watch?v=Kq4FpMe6cRs&quot;&gt;ます&lt;/a&gt; ： JavaScriptへの変更、パート1：ECMAScript 5 &quot;は、 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; スイッチのインクリメンタルな使用により、JavaScript実装者がJavaScriptの多くの危険な機能をクリーンアップすることなく、世界のすべてのウェブサイトを突然壊します。</target>
        </trans-unit>
        <trans-unit id="3e37513efc84c83ee98db8c100f7f728f1063cb3" translate="yes" xml:space="preserve">
          <source>This article about Javascript Strict Mode might interest you: &lt;a href=&quot;http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/&quot;&gt;John Resig - ECMAScript 5 Strict Mode, JSON, and More&lt;/a&gt;</source>
          <target state="translated">Javascript Strict Modeに関するこの記事は興味深いかもしれません： &lt;a href=&quot;http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/&quot;&gt;John Resig-ECMAScript 5 Strict Mode、JSON、その他&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d9da1eab3a2754c07bf853818048cf86ef9a8bc1" translate="yes" xml:space="preserve">
          <source>This is no longer the case in ECMAScript 6 (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1041128&quot;&gt;bug 1041128&lt;/a&gt;).</source>
          <target state="translated">ECMAScript 6ではこれは&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1041128&quot;&gt;当てはまり&lt;/a&gt;ません（ バグ1041128 ）。</target>
        </trans-unit>
        <trans-unit id="dd413d88ab98b532770fd5f2fc9d3f7ef62c23ce" translate="yes" xml:space="preserve">
          <source>Those that prefer not to use rulers to do their lines straight usually end up in those pages asking for others to debug their code.</source>
          <target state="translated">自分の行をまっすぐにするために定規を使わないことを好む人は、通常、自分のコードをデバッグするために他の人にお願いしているページで終わってしまいます。</target>
        </trans-unit>
        <trans-unit id="a7fd2f79041e08e0c8925669b484de4ed27bacfa" translate="yes" xml:space="preserve">
          <source>To quote some interesting parts:</source>
          <target state="translated">面白いところを引用すると</target>
        </trans-unit>
        <trans-unit id="18959bdb468277df6861dc45265096e4e03b934c" translate="yes" xml:space="preserve">
          <source>To read more about it you can refer &lt;a href=&quot;http://www.w3schools.com/js/js_strict.asp&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;http://www.w3schools.com/js/js_strict.asp&quot;&gt;こちら&lt;/a&gt;を参照してください 。</target>
        </trans-unit>
        <trans-unit id="42a3bb278c71efefd64c79603bbd7e4b085a3e13" translate="yes" xml:space="preserve">
          <source>Transitioning to strict mode</source>
          <target state="translated">厳格モードへの移行</target>
        </trans-unit>
        <trans-unit id="a036c9d3bcde8686731beb5eb26de106ef7784ed" translate="yes" xml:space="preserve">
          <source>Uncaught ReferenceError: nameoftree is not defined</source>
          <target state="translated">捕まえられなかった ReferenceError:nameoftree が定義されていません。</target>
        </trans-unit>
        <trans-unit id="4c156a916f8a6f9574955750b2a1451326982d3f" translate="yes" xml:space="preserve">
          <source>Uncaught SyntaxError: Duplicate data property in object literal not
  allowed in strict mode</source>
          <target state="translated">捕まえられなかった SyntaxError。厳格モードでは許可されていないオブジェクトリテラル内のデータプロパティの重複</target>
        </trans-unit>
        <trans-unit id="7aaa011136ee898447ada0c1377720eb7677dcbb" translate="yes" xml:space="preserve">
          <source>Use Strict is used to show common and repeated errors so that it is handled differently , and changes the way java script runs , such changes are :</source>
          <target state="translated">それが異なるように処理されるように、一般的な、繰り返しのエラーを表示するために使用されます。,そして、Javaスクリプトが実行される方法を変更,そのような変更は .</target>
        </trans-unit>
        <trans-unit id="e6a2b8c9600130299cd64c46f5748d992d100d46" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;'use strict';&lt;/code&gt; does not suddenly make your code better.</source>
          <target state="translated">&lt;code&gt;'use strict';&lt;/code&gt; 突然コードが改善されるわけではありません。</target>
        </trans-unit>
        <trans-unit id="d4d6e1571c87c5715f5b1379bfd5792f9c941414" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;delete&lt;/code&gt; on a variable name &lt;code&gt;delete myVariable;&lt;/code&gt;</source>
          <target state="translated">変数名に &lt;code&gt;delete myVariable;&lt;/code&gt; を使用 &lt;code&gt;delete&lt;/code&gt; と、 myVariableが 削除されます。</target>
        </trans-unit>
        <trans-unit id="21daefad12ef11f96031aa365048e01337e377ba" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;eval&lt;/code&gt; or &lt;code&gt;arguments&lt;/code&gt; as variable or function argument name</source>
          <target state="translated">変数または関数の引数名としての &lt;code&gt;eval&lt;/code&gt; または &lt;code&gt;arguments&lt;/code&gt; 使用</target>
        </trans-unit>
        <trans-unit id="e4d9563de300edd23fd7c3850db04036a25d79ee" translate="yes" xml:space="preserve">
          <source>We will get the following error.</source>
          <target state="translated">以下のようなエラーが出ます。</target>
        </trans-unit>
        <trans-unit id="4dbef12467da7f5817c1305f1e396998d11eafa3" translate="yes" xml:space="preserve">
          <source>What does “use strict” do in JavaScript, and what is the reasoning behind it</source>
          <target state="translated">JavaScriptで &quot;use strict &quot;は何をしているのか、その理由は?</target>
        </trans-unit>
        <trans-unit id="4c18ac01741b6780a43048c77a24b5e2c0540bae" translate="yes" xml:space="preserve">
          <source>What things are prohibited in strict mode?</source>
          <target state="translated">厳戒態勢ではどんなことが禁止されているのでしょうか?</target>
        </trans-unit>
        <trans-unit id="a48ab950c2dd3afad682dd72baa410b63bc6e0a1" translate="yes" xml:space="preserve">
          <source>When a JavaScript engine sees this &lt;em&gt;directive&lt;/em&gt;, it will start to interpret the code in a special mode. In this mode, errors are thrown up when certain coding practices that could end up being potential bugs are detected (which is the reasoning behind the strict mode).</source>
          <target state="translated">JavaScriptエンジンがこの&lt;em&gt;ディレクティブ&lt;/em&gt;を検出すると、特別なモードでコードの解釈を開始します。 このモードでは、潜在的なバグになる可能性のある特定のコーディングプラクティスが検出されると、エラーがスローされます（厳密モードの背後にある理由です）。</target>
        </trans-unit>
        <trans-unit id="c300272a821d8e78995c84df72b42286f65185e1" translate="yes" xml:space="preserve">
          <source>When adding &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt;, the following cases will throw a &lt;strong&gt;SyntaxError&lt;/strong&gt; before the script is executing:</source>
          <target state="translated">&lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; 追加すると、 、次の場合、スクリプトの実行前に&lt;strong&gt;SyntaxError&lt;/strong&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="1027ddb2af687a000e1f43ee83be4b6c15b8e572" translate="yes" xml:space="preserve">
          <source>When we have duplicate property, it throws an exception</source>
          <target state="translated">プロパティが重複している場合、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="9786db102e0c8271479dae448d90367999358652" translate="yes" xml:space="preserve">
          <source>Where should I use &lt;code&gt;'use strict';&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;'use strict';&lt;/code&gt; をどこで使用すればよいですか。 ？</target>
        </trans-unit>
        <trans-unit id="f5501718d21e44942c25ce38f65fbb4d2ea2d9e5" translate="yes" xml:space="preserve">
          <source>Which might be helpful if you have to mix old and new code ;-)</source>
          <target state="translated">古いコードと新しいコードを混在させる必要がある場合に便利かもしれません。)</target>
        </trans-unit>
        <trans-unit id="184e2f1b60c365bdbd0ab8e43df510d15bccc6c0" translate="yes" xml:space="preserve">
          <source>Why Strict Mode?</source>
          <target state="translated">なぜストリクトモードなのか?</target>
        </trans-unit>
        <trans-unit id="2e23b3df3a20138c20d2c8e491ee2570ddf50bfb" translate="yes" xml:space="preserve">
          <source>Will restrict uses of keywords as variables. Trying to use them will throw errors.</source>
          <target state="translated">キーワードの変数としての使用を制限します。それらを使おうとするとエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="a71ea5c1e3ada42c1b0d204b7398947c063f4a74" translate="yes" xml:space="preserve">
          <source>With strict mode, you can not, for example, use undeclared variables.</source>
          <target state="translated">厳密モードでは、例えば宣言されていない変数を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="161190f164917a24616c94f2e53483ba35c86211" translate="yes" xml:space="preserve">
          <source>Worse, since the developer is in normal mode, they don&amp;rsquo;t have the advantages of extra errors being thrown, so the error might fail silently.</source>
          <target state="translated">さらに悪いことに、開発者は通常モードであるため、余分なエラーがスローされるという利点がないため、エラーがサイレントに失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="20bd93de5e3a15e93016dccea88cc98f2d1f95ed" translate="yes" xml:space="preserve">
          <source>Writing &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; at the very top of your JS file turns on strict
syntax checking. It does the following tasks for us:</source>
          <target state="translated">&lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; 書く; JSファイルの最上部で、厳密な構文チェックをオンにします。 次のタスクを実行します。</target>
        </trans-unit>
        <trans-unit id="290c3178ac3f676c45b24cb8690955d39c8b4d14" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;read more on MDN&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;MDNで詳細を読む&lt;/a&gt;ことができます 。</target>
        </trans-unit>
        <trans-unit id="4f7487ef619ee058617d220fbdcb1ff71b70d7e8" translate="yes" xml:space="preserve">
          <source>You can refer to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;MDN documentation&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;MDNのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5b84b03d930a95b32ff7fff301afe23652a22474" translate="yes" xml:space="preserve">
          <source>You cannot use the &lt;code&gt;with&lt;/code&gt;-statement in strict mode.</source>
          <target state="translated">strictモードでは &lt;code&gt;with&lt;/code&gt; -statementを使用できません。</target>
        </trans-unit>
        <trans-unit id="dd707966b9d71560d8d3c73a2fd4a8e76a284eb2" translate="yes" xml:space="preserve">
          <source>[Ref: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;Strict mode&lt;/a&gt;, &lt;em&gt;Mozilla Developer Network&lt;/em&gt;]</source>
          <target state="translated">[参照： &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;厳格モード&lt;/a&gt; 、 &lt;em&gt;Mozilla Developer Network&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="5640892492b3a140a15198eb7f173e54896999fc" translate="yes" xml:space="preserve">
          <source>eliminates some JavaScript silent errors by changing them
to throw errors.</source>
          <target state="translated">は、エラーを投げるように変更することで、いくつかの JavaScript のサイレントエラーを削除します。</target>
        </trans-unit>
        <trans-unit id="16de3f2d338913f29c8f9f128d32ba48cbb95641" translate="yes" xml:space="preserve">
          <source>fixes mistakes that make it difficult for JavaScript
engines to perform optimizations.</source>
          <target state="translated">JavaScriptエンジンが最適化を実行しづらくなるミスを修正しました。</target>
        </trans-unit>
        <trans-unit id="0364811af40b95fa72a60403bfe331e1a6c30201" translate="yes" xml:space="preserve">
          <source>for more information vistit &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode&quot;&gt;Strict Mode- Javascript&lt;/a&gt;</source>
          <target state="translated">詳細については、 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode&quot;&gt;厳密モード&lt;/a&gt; -Javascriptをご覧ください</target>
        </trans-unit>
        <trans-unit id="db0b8b9b231300c663125ba290de7d8ad030cebe" translate="yes" xml:space="preserve">
          <source>forbids some unsafe or error-prone language features</source>
          <target state="translated">禁句</target>
        </trans-unit>
        <trans-unit id="01f927911ed04f070c42384b5acdb1eaa080798c" translate="yes" xml:space="preserve">
          <source>prohibits some syntax likely to be defined in future
versions of ECMAScript.</source>
          <target state="translated">ECMAScript の将来のバージョンで定義される可能性のあるいくつかの構文を禁止します。</target>
        </trans-unit>
        <trans-unit id="fee36c7820652167ca4505a5dcd195808ce9cfe0" translate="yes" xml:space="preserve">
          <source>shows an error if you try to assign to an undeclared variable</source>
          <target state="translated">は、宣言されていない変数に代入しようとした場合にエラーを表示します。</target>
        </trans-unit>
        <trans-unit id="65b524cf6d7ace1ef4955efb2c2c0f3cea4f4878" translate="yes" xml:space="preserve">
          <source>stops you from overwriting key JS system libraries</source>
          <target state="translated">キーとなるJSシステムライブラリの上書きを停止します。</target>
        </trans-unit>
        <trans-unit id="118ad7cd18fd1f4ce16961837b121bd93511a087" translate="yes" xml:space="preserve">
          <source>you can also read this &lt;a href=&quot;https://www.nczonline.net/blog/2012/03/13/its-time-to-start-using-javascript-strict-mode/&quot;&gt;article&lt;/a&gt; for the details</source>
          <target state="translated">詳細&lt;a href=&quot;https://www.nczonline.net/blog/2012/03/13/its-time-to-start-using-javascript-strict-mode/&quot;&gt;について&lt;/a&gt;は、この記事を読むこともできます</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
