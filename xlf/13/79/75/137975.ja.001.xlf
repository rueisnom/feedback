<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/137975">
    <body>
      <group id="137975">
        <trans-unit id="4c0663d54c4595f36a4f42a6f5400ef2ef366a74" translate="yes" xml:space="preserve">
          <source>&quot;Making something global to avoid passing it around is a code smell.&quot; Why isn't passing something around to avoid making it a singleton a code smell?</source>
          <target state="translated">&quot;何かを渡すのを避けるために グローバルにするのはコードの臭いがする&quot; シングルトンにするのを避けるために 何かを渡すのは コードの匂いがしないのはなぜですか?</target>
        </trans-unit>
        <trans-unit id="286d74fd07d872b4e967ba01e43b9ca80c0210fc" translate="yes" xml:space="preserve">
          <source>(&lt;strong&gt;1&lt;/strong&gt;) can only have a single instance, and</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）は単一のインスタンスのみを持つことができ、&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1b63564fae2bc683b52e7b476a02f169d4dea468" translate="yes" xml:space="preserve">
          <source>(&lt;strong&gt;2&lt;/strong&gt;) you need to manage that single instance,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）その単一のインスタンスを管理する必要がある&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bde670e23d5afa06c791afd885f2d353197aa1d7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;Singletons are Pathological Liars&lt;/a&gt; has a unit testing example that illustrates how singletons can make it difficult to figure out dependency chains and start or test an application. It is a fairly extreme example of abuse, but the point that he makes is still valid:</source>
          <target state="translated">&lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンは病理学的である嘘つき&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、依存関係の連鎖を理解し、アプリケーションを開始またはテストすることをシングルトンがどのように困難にすることができるかを示すユニットテストの例を持っています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは虐待のかなり極端な例ですが、彼の主張は今でも有効です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea97013d248ede0dac3ce0ebf687ba0b03cc305d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://misko.hevery.com/2008/08/21/where-have-all-the-singletons-gone/&quot;&gt;Where have all the Singletons Gone&lt;/a&gt; makes the point that dependency injection has made it easy to get instances to constructors that require them, which alleviates the underlying need behind the bad, global Singletons decried in the first article.</source>
          <target state="translated">&lt;a href=&quot;http://misko.hevery.com/2008/08/21/where-have-all-the-singletons-gone/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべてのシングルトンがどこにあるかと&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いうと、依存性注入によってインスタンスを必要とするコンストラクターにインスタンスを簡単に取得できるため、最初の記事で否定されたグローバルなシングルトンの背後にある根本的なニーズが緩和されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7386a9161caeb195946b932a803ccd7dce07346" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.vincehuston.org/dp/singleton.html&quot;&gt;Vince Huston&lt;/a&gt; has these criteria, which seem reasonable to me:</source>
          <target state="translated">&lt;a href=&quot;http://www.vincehuston.org/dp/singleton.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビンス・ヒューストンに&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は次のような基準があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d7957063e281e7382024d1939ac01602bdf86908" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A Singleton is &lt;em&gt;only&lt;/em&gt; an option if you need what a singleton provides. A write-one read-only instance of an object. That same rule should cascade to the object's properties/members as well.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、シングルトンが提供するものが必要な場合の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;唯一&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のオプションです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトの書き込み専用の読み取り専用インスタンス。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じルールは、オブジェクトのプロパティ/メンバーにもカスケードする必要があります。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d010d9112a54e839b4d039b507f891e9d1a364c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How does this apply to Monopoly?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これはモノポリーにどのように当てはまりますか？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4f8924237fd09cf8a914728a948b370f5705d9a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How does this apply to programming?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これはプログラミングにどのように適用されますか？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2b43c4de79f8e20fd1c5bdcc6794a192575c0965" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Monopoly is the devil and singletons with non-readonly/mutable state are the 'real' problem...&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;独占は悪魔であり、非読み取り専用/可変状態のシングルトンは「本当の」問題です...&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52f085799a111dd57a5f852313629fb1ae55285c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Problem&lt;/strong&gt;: It is hard to mock singletons.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;問題&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：シングルトンをモックするのは難しい。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="df35f0cdfd21e3389438a775dce278434deed79f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Problem&lt;/strong&gt;: Singleton can be a challenge in multi-threading environment</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;問題&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：シングルトンはマルチスレッド環境での課題になる可能性があります&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab2836573afdbf2161060713a36ca848e5dcd111" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Resource Contention.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リソースの競合。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="34acfa13c88ce2c117f1bbd47ac919cf1fb4aaeb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Singletons improves maintenance&lt;/strong&gt;: Once you removed a dependency from a class you just deleted some singleton injection, you don't need to go and edit a big link of other classes that just moved your dependency around(This is smelly code for me &lt;a href=&quot;https://stackoverflow.com/a/138012/1129332&quot;&gt;@Jim Burger&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンはメンテナンスを改善します&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：シングルトンインジェクションを削除したクラスから依存関係を削除すると、依存関係を移動した他のクラスの大きなリンクに移動して編集する必要はありません（これは私にとっては臭いコードです&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/138012/1129332&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@ジムバーガー）&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="412f4531434a73757801858ba07eaba2e84b9aff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Singletons improves memory and performance&lt;/strong&gt;: When some thing happens in your application, and it takes a long chain of callbacks to deliver, you are wasting memory and performance, by using Singleton you are cutting the middle man, and improve your performance and memory usage(by avoiding unnecessary local variables allocations).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンはメモリとパフォーマンスを改善します&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：アプリケーションで何かが発生し、コールバックの長いチェーンがかかると、メモリとパフォーマンスを浪費し、シングルトンを使用することで仲介者を削減し、パフォーマンスとメモリ使用量を改善します（不必要なローカル変数の割り当てを回避することにより）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0e2c053373b047bcfe397292fbc3cefa5e286412" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Singletons improves readability&lt;/strong&gt;: You can look at your class and see what singleton it injected to figure out what is it's dependencies.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンは読みやすさを向上させ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。クラスを見て、どのシングルトンが注入されたかを確認して、依存関係を把握できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="023083762e9be2b0e554a8d384287ccabf323eb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution&lt;/strong&gt;: Use a single threaded bootstrap process to initialize all the   dependencies of your singleton.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解決策&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：シングルスレッドのブートストラッププロセスを使用して、シングルトンのすべての依存関係を初期化します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab544ef656038d5821d4e34fbe2cd0a3fa71941e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution&lt;/strong&gt;: Use method &lt;a href=&quot;https://github.com/gazman-sdk/android_life_cycle/wiki&quot;&gt;Factory&lt;/a&gt; pattern for mocking</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解決策&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モックに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッド&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/gazman-sdk/android_life_cycle/wiki&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ファクトリ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パターンを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用する&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8c663d86a9beeaaf39e92c87730e936facd14d2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution&lt;/strong&gt;: Well, dispose them! Implement a callback in your app to properly dispose a singletons, you should remove any data linked to them and finally: remove them from the Factory.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解決策&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：さて、それらを処分してください！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アプリにコールバックを実装して、シングルトンを適切に破棄します。シングルトンにリンクされているデータをすべて削除し、最後にファクトリから削除します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7b51005f66777ea4c5a189f276aba466064e2572" translate="yes" xml:space="preserve">
          <source>A singleton gets implemented using a static method. Static methods are avoided by people who do unit testing because they cannot be mocked or stubbed. Most people on this site are big proponents of unit testing. The generally most accepted convention to avoid them is using the &lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;inversion of control&lt;/a&gt; pattern.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンは、静的メソッドを使用して実装されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静的メソッドは、モックやスタブができないため、ユニットテストを行う人は避けます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このサイトのほとんどの人々は、ユニットテストの大きな支持者です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらを回避するために最も一般的に受け入れられている規則は&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、制御&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パターンの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;反転を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用することです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="98d937e9b1671d2c26255bf2c387222354793a1b" translate="yes" xml:space="preserve">
          <source>After reading &lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;Singletons are Pathological Liars&lt;/a&gt; as suggested in &lt;a href=&quot;https://stackoverflow.com/a/137996/632951&quot;&gt;jason's answer&lt;/a&gt; I came across this little tidbit that provides the best presented example of &lt;strong&gt;how&lt;/strong&gt; singletons are often misused.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;読んだ後&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンは、病理学嘘つきです&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で提案されているように&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/137996/632951&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ジェイソンの答え&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は最良の提示例提供し、この小さなちらほら出くわした&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;か&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンがしばしば誤用されているが。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f70a42dfd14309e34041c393526cf11b2727b5dd" translate="yes" xml:space="preserve">
          <source>Also, it&amp;rsquo;s too easy to write a non-thread-safe singleton.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、スレッドセーフでないシングルトンを作成するのは簡単すぎます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6971cacf99a0946118138ab4a33f2113934990ee" translate="yes" xml:space="preserve">
          <source>And, of course, do:</source>
          <target state="translated">そして、もちろん、そうする。</target>
        </trans-unit>
        <trans-unit id="5d0b974c67fdb9500928fbab323ed42889acaaef" translate="yes" xml:space="preserve">
          <source>As I stated at the title singleton are not about single instance.</source>
          <target state="translated">タイトルにも書いたように、シングルトンはシングルインスタンスのことではありません。</target>
        </trans-unit>
        <trans-unit id="780f02d7ca5df16a5493adb1b0ff7ad99d75e11a" translate="yes" xml:space="preserve">
          <source>Aside from all of the obvious thread-safety and synchronization issues that mutable singletons present... If you have one set of data, that is capable of being read/manipulated by multiple different sources concurrently and exists during the lifetime of the application execution, it's probably a good time to step back and ask &quot;am I using the right type of data structure here&quot;.</source>
          <target state="translated">スレッドの安全性や同期化の問題はさておき、ミュータブルシングルトンが提示しているのは...もしあなたが、複数の異なるソースから同時に読み込まれ、アプリケーションの実行期間中に存在するデータのセットを持っているならば、一歩下がって、「ここで正しいタイプのデータ構造を使っているか」と尋ねるのは良い時期かもしれません。</target>
        </trans-unit>
        <trans-unit id="8ee7b2ad5b9557585fabb335f68adfc9c9c8c706" translate="yes" xml:space="preserve">
          <source>Because they are basically object oriented global variables, you can usually design your classes in such a way so that you don't need them.</source>
          <target state="translated">これらは基本的にオブジェクト指向のグローバル変数なので、通常はそれらを必要としないようにクラスを設計することができます。</target>
        </trans-unit>
        <trans-unit id="937ec02c99912303d347e18aab31deb374647957" translate="yes" xml:space="preserve">
          <source>Classes that depend on singletons are relatively harder to unit test in isolation.</source>
          <target state="translated">シングルトンに依存するクラスは、分離してユニットテストを行うことが比較的困難です。</target>
        </trans-unit>
        <trans-unit id="a380834a96fac726e42e651e3d34770781efcd89" translate="yes" xml:space="preserve">
          <source>Consider the following situation: As a developer, you have to create a web application which accesses a database. To ensure that concurrent database calls do not conflict each other, you create a thread-save &lt;code&gt;SingletonDao&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次の状況を考慮してください。開発者は、データベースにアクセスするWebアプリケーションを作成する必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同時データベース呼び出しが互いに競合しないようにするには、スレッドを保存する&lt;/font&gt;&lt;/font&gt; &lt;code&gt;SingletonDao&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を作成します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9647c9150ba82aa10b72cafd5be139fa2efae5f7" translate="yes" xml:space="preserve">
          <source>During testing and to ensure deterministic behavior, create the singleton class as separate instance as either the actual class itself or a stub/mock that implements its behavior and pass it as is to the class that requires it. Don't use the class factor that creates that object under test that needs the singleton during test as it will pass the single global instance of it, which defeats the purpose.</source>
          <target state="translated">テストの間、そして決定論的な振る舞いを確実にするために、シングルトンクラスを実際のクラスそのものか、その振る舞いを実装したスタブモックとして別のインスタンスとして作成し、それを必要とするクラスにそのまま渡してください。テスト中にシングルトンを必要とするテスト対象のオブジェクトを作成するクラスファクタを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="eac73a2e89308f7ba46bc74c05f8ca76bc870e71" translate="yes" xml:space="preserve">
          <source>During the runtime of you application, where singletons need to be passed to a given object, use a class factory that builds that object and have the class factory pass the singleton instance to the class that needs it.</source>
          <target state="translated">アプリケーションの実行時に、シングルトンを与えられたオブジェクトに渡す必要がある場合は、そのオブジェクトをビルドするクラスファクトリを使用し、そのクラスファクトリがシングルトンのインスタンスを必要とするクラスに渡すようにします。</target>
        </trans-unit>
        <trans-unit id="45bcf685d367a300d4d434185e87272e3868f1d0" translate="yes" xml:space="preserve">
          <source>Everyone talks about Singleton's as globals, because they basically are. However, much (sadly, not all) of the badness in a global comes not intrinsically from being global, but how you use it. Same goes for Singletons. Actually more so as &quot;single instance&quot; really doesn't need to mean &quot;globally accessible&quot;. It is more a natural byproduct, and given all the bad that we know comes from it, we shouldn't be in such a hurry to exploit global accessibility. Once programmers see a Singleton they seem to always access it directly through its instance method. Instead, you should navigate to it just like you would any other object. Most code shouldn't even be aware it is dealing with a Singleton (loose coupling, right?). If only a small bit of code accesses the object like it is a global, a lot of harm is undone. I recommend enforcing it by restricting access to the instance function.</source>
          <target state="translated">シングルトンは基本的にグローバルだからです。しかし、グローバルの悪い点の多くは(悲しいかな、すべてではありませんが)、グローバルであることに本質的な問題ではなく、その使い方に起因しています。シングルトンも同じです。実際には、「シングルインスタンス」は「グローバルにアクセス可能」という意味である必要はありません。それはどちらかというと自然な副産物であり、それがもたらす悪い影響を考えると、私たちはグローバルなアクセシビリティを利用しようと急ぐべきではありません。プログラマがシングルトンを見ると、彼らはいつもそのインスタンスメソッドから直接アクセスするようです。そうではなく、他のオブジェクトと同じように、そのインスタンスに移動する必要があります。ほとんどのコードでは、シングルトンを扱っていることに気づくべきではありません(結合が緩いのでしょうか?ほんの少しのコードがグローバルであるかのようにオブジェクトにアクセスするだけで、多くの害が元に戻ってしまいます。インスタンス関数へのアクセスを制限することで、それを強制することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0aea5f06b0db6f7157edd5c4c141c78e70171cc9" translate="yes" xml:space="preserve">
          <source>Everything is fine so far.</source>
          <target state="translated">今のところ全て順調です。</target>
        </trans-unit>
        <trans-unit id="c2c8d187b56d34de5700469c278c253a4efb35dc" translate="yes" xml:space="preserve">
          <source>FWIW, if it a PIA when you try to unit test it then it's going to PIA when you try to debug, bug fix or enhance it.</source>
          <target state="translated">FWIW,ユニットテストをしようとしたときにPIAになるならば、デバッグやバグフィックス、機能強化をしようとしたときにPIAになるでしょう。</target>
        </trans-unit>
        <trans-unit id="03c69b7e7f3a328ec62260ac5b83e4208fc9daa7" translate="yes" xml:space="preserve">
          <source>Firstly a class and its collaborators should firstly perform their intended purpose rather than focusing on deoendents. Lifecycle management (when instances are creared snd when they go out of scope) should not be part of the cladses responsibility. The accepted best practice for this is to craft or configure a new component to manage dependencies using dependency injection.</source>
          <target state="translated">まず第一に、クラスとその共同作業者は、まずその目的を達成することが重要であり、その目的を達成することが重要である。ライフサイクル管理(インスタンスが作成され、スコープ外になったとき)は、クラスの責任の一部にすべきではありません。このためのベストプラクティスは、依存性インジェクションを使用して依存性を管理するための新しいコンポーネントを作成または設定することです。</target>
        </trans-unit>
        <trans-unit id="f806d6e7027975cfa32f2da9b819f89561ed7538" translate="yes" xml:space="preserve">
          <source>From a pratical point of view, &lt;strong&gt;a singleton is a trade-off developing time vs complexity&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実用的な観点から見ると&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、シングルトンは開発時間と複雑さのトレードオフ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7e4ebfb74a941702ad7c541653b7cf63d07cfd67" translate="yes" xml:space="preserve">
          <source>Global access is not otherwise provided for</source>
          <target state="translated">グローバルアクセスは、他の目的では提供されていません。</target>
        </trans-unit>
        <trans-unit id="0791848a4b5d984612e8fff52eab6e825186b998" translate="yes" xml:space="preserve">
          <source>Global is bad because:</source>
          <target state="translated">グローバルが悪いのは</target>
        </trans-unit>
        <trans-unit id="a8f72bd9a9edbfe0b449bc6c4a04ae6281432fa1" translate="yes" xml:space="preserve">
          <source>GoF Singletons in opposite to IoC Singletons are supposed to expose &quot;singletonity&quot; in the interface through getInstance() method, and so that they suffer from everything said above.</source>
          <target state="translated">GoF のシングルトンは、IoC シングルトンとは逆の意味で、getInstance()メソッドを介してインターフェイスに「シングルトン性」を公開することになっているため、上記のすべての問題を抱えています。</target>
        </trans-unit>
        <trans-unit id="2f78eafa156d6302e52dc35c57960b25dc9c1d2b" translate="yes" xml:space="preserve">
          <source>Here is one more thing about singletons which nobody said yet.</source>
          <target state="translated">ここで、まだ誰も言っていない一重項についてもう一つ。</target>
        </trans-unit>
        <trans-unit id="72f2af37f60d95ea1ed5c8a2e82b0cba6c9da498" translate="yes" xml:space="preserve">
          <source>However, there are &quot;application scope services&quot; (think about a messaging system that makes components interact) - this CALLS for a singleton, a &quot;MessageQueue&quot; - class that has a method &quot;SendMessage(...)&quot;.</source>
          <target state="translated">しかし、&quot;アプリケーションスコープサービス &quot;があります(コンポーネントを相互作用させるメッセージングシステムを考えてみてください)-これはシングルトン、&quot;MessageQueue&quot;-クラスに &quot;SendMessage(...)&quot;メソッドを持つCALLSです。</target>
        </trans-unit>
        <trans-unit id="b07296f711652fac02f0fab15864ed43fdad4def" translate="yes" xml:space="preserve">
          <source>I believe the backlash is due to its overuse which, in turn, is due to the fact that it's the easiest pattern to understand and implement.</source>
          <target state="translated">私は、その反発は、その使いすぎによるものだと思っていますが、それは逆に、最もわかりやすく、実装しやすいパターンであるという事実によるものです。</target>
        </trans-unit>
        <trans-unit id="d547e25d316e8eb86b74c45c720d779a57572804" translate="yes" xml:space="preserve">
          <source>I believe this sort of pattern is called &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt; and is generally considered a good thing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この種のパターンは&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依存性注入&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼ば&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れ、一般的には良いことだと考えられています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29f3a8be4925f9bbf7c6e50d2f3ca550171d47d4" translate="yes" xml:space="preserve">
          <source>I now prefer to design around an &lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;inversion of control&lt;/a&gt; (IoC) container and allow the the lifetimes to be controlled by the container. This gives you the benefit of the classes that depend on the instance to be unaware of the fact that there is a single instance. The lifetime of the singleton can be changed in the future. Once such example I encountered recently was an easy adjustment from single threaded to multi-threaded.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は現在&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、制御の反転&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（IoC）コンテナーを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中心に設計&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し、存続期間をコンテナーによって制御できるようにしています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これにより、インスタンスに依存しているクラスが、単一のインスタンスがあることに気付かないというメリットがあります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンの寿命は将来変更される可能性があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのような例として、最近遭遇したのは、シングルスレッドからマルチスレッドへの簡単な調整でした。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dfa4071ddcee15c06454d19f5b9208a7488963bb" translate="yes" xml:space="preserve">
          <source>I think the confusion is caused by the fact that people don't know the real application of the Singleton pattern. I can't stress this enough. Singleton is &lt;strong&gt;not&lt;/strong&gt; a pattern to wrap globals. Singleton pattern should only be used to guarantee that &lt;strong&gt;one and only one instance of a given class&lt;/strong&gt; exists during run time.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンパターンの実際の適用を人々が知らないという事実が混乱を引き起こしていると思います。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私はこれを十分に強調することはできません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、グローバルをラップするパターンで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はあり&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンパターンは&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行時に&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特定のクラスのインスタンスが1つだけ&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;存在する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことを保証するためにのみ使用する必要があり&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83f36ca8c3ae39ba88c4227bcd9107ebd8714e28" translate="yes" xml:space="preserve">
          <source>I'd like to address the 4 points in the accepted answer, hopefully someone can explain why I'm wrong.</source>
          <target state="translated">受け入れられた回答の中の4つのポイントを取り上げたいと思います。</target>
        </trans-unit>
        <trans-unit id="480115f4bdecc954d3ef342b5b307329636f1cf6" translate="yes" xml:space="preserve">
          <source>I'm not going to comment on the good/evil argument, but I haven't used them since &lt;a href=&quot;http://en.wikipedia.org/wiki/Spring_Framework&quot;&gt;Spring&lt;/a&gt; came along. Using &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt; has pretty much removed my requirements for singleton, servicelocators and factories. I find this a much more productive and clean environment, at least for the type of work I do (Java-based web applications).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は善悪の論点についてコメントするつもりはありませんが、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Spring_Framework&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;春&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が来て&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以来、それらを使用していません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依存性注入&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すると&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、シングルトン、サービスロケーター、およびファクトリーに対する私の要件がほとんど取り除かれました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、少なくとも私が行う作業の種類（JavaベースのWebアプリケーション）にとって、はるかに生産的でクリーンな環境だと思います。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b8f5ab505b9909495273b2e2d51e1a90612cf41" translate="yes" xml:space="preserve">
          <source>If ownership of the single instance, when and how initialization occurs, and global access are not issues, Singleton is not sufficiently interesting.</source>
          <target state="translated">単一インスタンスの所有権、いつ、どのように初期化が行われるか、グローバルアクセスが問題でなければ、Singletonは十分に興味深いものではありません。</target>
        </trans-unit>
        <trans-unit id="06cbcc38cd7b375e6eb3143e88b5e310d19f2f21" translate="yes" xml:space="preserve">
          <source>If you avoid those mistakes, Singletons can still be a PITA, bit it is ready to see a lot of the worst problems are significantly mitigated. Imagine a Java Singleton, that is explicitly defined as once per classloader (which means it needs a thread safety policy), with defined creation and destruction methods and a life cycle that dictates when and how they get invoked, and whose &quot;instance&quot; method has package protection so it is generally accessed through other, non-global objects. Still a potential source of trouble, but certainly much less trouble.</source>
          <target state="translated">これらの間違いを回避する場合、シングルトンはまだPITAである可能性がありますが、ビットは、それが大幅に緩和された最悪の問題の多くを見るために準備ができています。Javaのシングルトンを想像してみてください。クラスローダごとに一度だけと明示的に定義されていて(つまりスレッド安全ポリシーが必要です)、定義された生成・破棄メソッドと、いつ、どのように呼び出されるかを決定するライフサイクルを持ち、その &quot;インスタンス &quot;メソッドはパッケージ保護されているので、一般的には他の非グローバルオブジェクトからアクセスされます。まだまだトラブルの原因になる可能性はありますが、確かにトラブルはずっと少なくなります。</target>
        </trans-unit>
        <trans-unit id="3a1237cb413fdb4c46831101c6617de6e2895e61" translate="yes" xml:space="preserve">
          <source>If you have some resource that</source>
          <target state="translated">もし、あなたが何かのリソースを持っているなら</target>
        </trans-unit>
        <trans-unit id="5aa9787a4fcf5e46b59e52938d4c6b3343093698" translate="yes" xml:space="preserve">
          <source>If you know your application won't change that much they are pretty OK to go with. Just know that you may need to refactor things up if your requirements change in an unexpected way (which is pretty OK in most cases).</source>
          <target state="translated">あなたのアプリケーションがそれほど変わらないことがわかっているのであれば、これで問題ありません。ただ、要件が予期せぬ形で変更された場合には、リファクタリングが必要になるかもしれないことを知っておいてください (これはほとんどの場合には問題ありません)。</target>
        </trans-unit>
        <trans-unit id="28522cf8f3941ff8eed8d87379a03a7891c58392" translate="yes" xml:space="preserve">
          <source>If you're passing an object through 10 functions in a call stack just to avoid a singleton, is that so great?</source>
          <target state="translated">シングルトンを避けるためだけにコールスタックで10個の関数にオブジェクトを通しているとしたら、そんなにすごいことなのか?</target>
        </trans-unit>
        <trans-unit id="a1b6572af45baab99438b33d0afceb089e21a8ae" translate="yes" xml:space="preserve">
          <source>In a &lt;a href=&quot;https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29&quot;&gt;garbage collected&lt;/a&gt; environment singletons can quickly become an issue with regard to memory management.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ガベージコレクト&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;環境シングルトンはすぐにメモリ管理に関する問題になることができます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="557c214439df24b6d9a6e6fb3a93c9584d0cf0e3" translate="yes" xml:space="preserve">
          <source>In most cases &quot;singletonity&quot; is a detail of implementation for some class rather than characteristic of its interface. Inversion of Control Container may hide this characteristic from class users; you just need to mark your class as a singleton (with &lt;code&gt;@Singleton&lt;/code&gt; annotation in Java for example) and that's it; IoCC will do the rest. You don't need to provide global access to your singleton instance because the access is already managed by IoCC. Thus there is nothing wrong with IoC Singletons.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ほとんどの場合、「単一性」は、そのインターフェースの特性ではなく、あるクラスの実装の詳細です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントロールコンテナを反転すると、この特性がクラスユーザーから見えなくなる場合があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスをシングルトンとしてマークする必要があります（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、Javaの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Singleton&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アノテーションを使用）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;残りはIoCCが行います。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アクセスはすでにIoCCによって管理されているため、シングルトンインスタンスへのグローバルアクセスを提供する必要はありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、IoCシングルトンに問題はありません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3adb08488e419152c707b1fe00f30e55841e099" translate="yes" xml:space="preserve">
          <source>In practice the &lt;em&gt;Singleton&lt;/em&gt; pattern is just a programming technique that is a useful part of your toolkit of concepts. From time to time you might find it is the ideal solution and so use it. But using it just so you can boast about using a &lt;em&gt;design pattern&lt;/em&gt; is just as stupid as refusing to ever use it because it is just a &lt;em&gt;global&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際には、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトン&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パターンは、概念のツールキットの有用な部分であるプログラミング手法にすぎません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;時々、それが理想的な解決策であると思うかもしれないので、それを使ってください。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デザインパターンの&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用について自慢できるようにそれを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用することは、それが単なる&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;グローバル&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;であるため、使用を拒否するのと同じくらい愚か&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="175eb0b638a248bbeee6c8c6d26cdf7f0bb9fb17" translate="yes" xml:space="preserve">
          <source>In the last statement he's referring to the blog's concept of 'singletons are liars'.</source>
          <target state="translated">最後の発言で、彼が言及しているのは、ブログのコンセプトである「シングルトンは嘘つき」ということです。</target>
        </trans-unit>
        <trans-unit id="82447f21debdc151d1cac2b4db16313ffdc010f5" translate="yes" xml:space="preserve">
          <source>It is also considered an anti-pattern by some people, who feel that it is overly used, introducing unnecessary limitations in situations where a sole instance of a class is not actually required.[1][2][3][4]</source>
          <target state="translated">また、実際にはクラスの唯一のインスタンスが必要ではない状況で不必要な制限を導入し、過度に使用されていると感じる人もいます[1][2][3][4]。</target>
        </trans-unit>
        <trans-unit id="4b4cbb456545aecd6262079cc8061bb243412865" translate="yes" xml:space="preserve">
          <source>It is easily (ab)used as a global variable.</source>
          <target state="translated">グローバル変数として簡単に(ab)使用できます。</target>
        </trans-unit>
        <trans-unit id="faa6d5d204dc7dbc91d17f723a964f011cefcf2c" translate="yes" xml:space="preserve">
          <source>It's not that singletons themselves are bad but the GoF design pattern is. The only really argument that is valid is that the GoF design pattern doesn't lend itself in regards to testing, especially if tests are run in parallel.</source>
          <target state="translated">シングルトン自体が悪いのではなく、GoF のデザインパターンが悪いのです。本当に有効な唯一の議論は、テストに関してはGoFのデザインパターンがそれ自体に適していないということです、特にテストが並行して実行される場合は。</target>
        </trans-unit>
        <trans-unit id="83b20cebddd201ff984745ea240973a2c8a8348d" translate="yes" xml:space="preserve">
          <source>It's rare that you need a singleton. The reason they're bad is that they feel like a &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global&lt;/a&gt; and they're a fully paid up member of the GoF &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;Design Patterns&lt;/a&gt;&lt;/em&gt; book.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンが必要になることはまれです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;彼らが悪い理由は、彼らが&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;グローバルの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ように感じ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、GoF &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Design Patternsの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;本の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完全に支払い済みのメンバーだからです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="462d96d6490ecf7f21c7d082c3a673c2571d2b5d" translate="yes" xml:space="preserve">
          <source>Lazy initialization is desirable</source>
          <target state="translated">怠惰な初期化が望ましい</target>
        </trans-unit>
        <trans-unit id="2a3024554beb09837fba1b03b0332e6065ffafd1" translate="yes" xml:space="preserve">
          <source>Like any pattern though... Think about it and consider if its use in the given situation is inappropriate or not... Rules are made to be broken usually, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;patterns&lt;/a&gt; should not be applied willy nilly without thought.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他のパターンと同じように...それについて考えて、与えられた状況での使用が不適切かどうかを検討してください...ルールは通常破られるように作られ、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パターン&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は考えずに無意味に適用されるべきではありません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="73f9ccfc3d9b951a95cf8d8c870ebe0d33f5c1e5" translate="yes" xml:space="preserve">
          <source>Make sure that the Singleton is thread-safe.  That's a given.</source>
          <target state="translated">シングルトンがスレッドセーフであることを確認してください。これは当たり前のことです。</target>
        </trans-unit>
        <trans-unit id="99db60c95b1b127007a4512df8fd7cb4dcab18fb" translate="yes" xml:space="preserve">
          <source>Make sure the class that will be used as a singleton implements an interface. This allows stubs or mocks to be implemented using the same interface</source>
          <target state="translated">シングルトンとして使用されるクラスがインターフェイスを実装していることを確認してください。これにより、スタブやモックを同じインターフェイスを使って実装することができます。</target>
        </trans-unit>
        <trans-unit id="906d44ceac744e478b26c3dbfd73fea4bc065db7" translate="yes" xml:space="preserve">
          <source>MessageQueue.Current.RegisterReceiver(this);</source>
          <target state="translated">MessageQueue.Current.RegisterReceiver(this);</target>
        </trans-unit>
        <trans-unit id="e2f175accfe9e7aa85d6a7640719330d57950fde" translate="yes" xml:space="preserve">
          <source>MessageQueue.Current.SendMessage(new MailArrivedMessage(...));</source>
          <target state="translated">MessageQueue.Current.SendMessage(new MailArrivedMessage(...))。</target>
        </trans-unit>
        <trans-unit id="e8f815cd223912c6028928f4b3ad623f1bd5368f" translate="yes" xml:space="preserve">
          <source>Misko Hevery, from Google, has some interesting articles on exactly this topic...</source>
          <target state="translated">GoogleのMisko Hevery氏は、まさにこのトピックについて興味深い記事をいくつか持っています...</target>
        </trans-unit>
        <trans-unit id="aee4bcdfd19cd56b5aca74568fc7d31720489ef4" translate="yes" xml:space="preserve">
          <source>My answer on how Singletons are bad is always, &quot;they are hard to do right&quot;. Many of the foundational components of languages are singletons (classes, functions, namespaces and even operators), as are components in other aspects of computing (localhost, default route, virtual filesystem, etc.), and it is not by accident. While they cause trouble and frustration from time to time, they also can make a lot of things work a LOT better.</source>
          <target state="translated">シングルトンがどのように悪いのかについての私の答えは、いつも「正しく行うのが難しい」ということです。言語の基本的な構成要素の多くはシングルトン(クラス、関数、名前空間、演算子)であり、コンピューティングの他の側面(ローカルホスト、デフォルトルート、仮想ファイルシステムなど)の構成要素と同様に、それは偶然ではありません。言語は時々トラブルやフラストレーションの原因になりますが、多くのものをより良く動作させることができます。</target>
        </trans-unit>
        <trans-unit id="a53607ed2c21f47236870353aed7c4680124034a" translate="yes" xml:space="preserve">
          <source>No class should be thought of as a singleton but rather that should be an aplication of it's usage or how it is used to configure dependents. For a quick and nasty this does not matter - just luke hardcoding say file paths does not matter but for bigger applications such dependencies need to be factored out and managed in more appropriate way using DI.</source>
          <target state="translated">どのクラスもシングルトンとして考えるべきではなく、そのクラスの使い方や、依存関係を設定するためにどのように使用されるかの応用であるべきです。手っ取り早くて厄介な場合には、これは重要ではありません-ファイルパスをルークハードコーディングすることは重要ではありませんが、大規模なアプリケーションでは、このような依存関係を考慮し、DIを使用してより適切な方法で管理する必要があります。</target>
        </trans-unit>
        <trans-unit id="6c62e40008de69cb522d6cdf069852b3341a3b9d" translate="yes" xml:space="preserve">
          <source>Note: Coding Without Comments is no longer valid.  However, The article being linked to has been cloned by another user.</source>
          <target state="translated">注:コメントなしのコーディングはもはや無効です。ただし、リンク先の記事は別のユーザーによってクローンされています。</target>
        </trans-unit>
        <trans-unit id="6ee7cdaf99a266962c9e299de0be53abaae53a44" translate="yes" xml:space="preserve">
          <source>Now the game goes from friendly dice-rolling to serious business. Bob has been made the example of failure and Joe and Ed don't want to end up like 'that guy'. So, being the leading player you, all of a sudden, become the enemy. Joe and Ed start practicing under-the-table trades, behind-the-back money injections, undervalued house-swapping and generally anything to weaken you as a player until one of them rises to the top.</source>
          <target state="translated">これでゲームは友好的なサイコロ転がしから真剣勝負になりました。ボブは失敗の手本にされ、ジョーとエドは「あいつ」のようにはなりたくないと思っています。だから、あなたが主役のプレイヤーであることは、突然、敵になります。ジョーとエドは、それらのいずれかがトップに上昇するまで、アンダーザテーブルの取引、裏金注入、割安なハウススワップと一般的に何でもプレーヤーとしてあなたを弱めるための練習を開始します。</target>
        </trans-unit>
        <trans-unit id="5a2e70213e768863cad258a0f87428f2c1f107fa" translate="yes" xml:space="preserve">
          <source>Now, consider you want to set up multiple instances of your web application in a cluster. Now, you suddenly have something like this:</source>
          <target state="translated">ここで、Webアプリケーションの複数のインスタンスをクラスタにセットアップすることを考えてみましょう。すると、突然このような状態になります。</target>
        </trans-unit>
        <trans-unit id="d0994fb980677959b214d2c3749362ba6e34a5e3" translate="yes" xml:space="preserve">
          <source>Now, for anybody who hasn't &lt;strong&gt;really&lt;/strong&gt; played monopoly, these standards are ideal at best. A defeat in monopoly is hard to swallow because, monopoly is about money, if you lose you have to painstakingly watch the rest of the players finish the game, and losses are usually swift and crushing. So, the rules usually get twisted at some point to serve the self-interest of some of the players at the expense of the others.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さて、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;本当に&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;独占&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をやったことがない人にとって&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、これらの基準は最高の状態で理想的です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;独占の敗北は飲み込むのが難しいです。なぜなら、独占はお金の問題であり、負けた場合、他のプレーヤーがゲームを終了するのをじっくりと見なければならないためです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、ルールは通常、ある時点でねじれ、一部のプレーヤーの自己利益を他のプレーヤーの犠牲にして提供します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8251537426b4a38c0fda5146bbbfce04abd246d3" translate="yes" xml:space="preserve">
          <source>Of course this is an example of a bad usage of a singleton. But the message of this example is: You can not rely that there is exactly one instance of a singleton in your application - especially when it comes to clustering.</source>
          <target state="translated">もちろん、これはシングルトンの悪い使い方の例です。しかし、この例のメッセージは次のようなものです。アプリケーションの中にシングルトンのインスタンスが正確に一つしかないということに頼ってはいけないということです。</target>
        </trans-unit>
        <trans-unit id="12da2eb229cab6f3f45bf52f45d05c18b7744c03" translate="yes" xml:space="preserve">
          <source>Often software gets more complicated it makes sense to have multiple independent instances of the Singleton class with different state. Committing code to simply grab the singleton is wrong in such cases. Using &lt;code&gt;Singleton.getInstance()&lt;/code&gt; might be ok for small simple systems but it doesn't work/scale when one might need a different instance of the same class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;多くの場合、ソフトウェアはより複雑になり、状態の異なるシングルトンクラスの複数の独立したインスタンスを持つことは理にかなっています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このような場合、シングルトンを単に取得するコードをコミットするのは間違っています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;小さな単純なシステムでは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Singleton.getInstance()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ても問題ないかもしれませんが、同じクラスの別のインスタンスが必要な場合は機能しません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="59b9e2cf09e0aebb2a5206089741000b279a7b53" translate="yes" xml:space="preserve">
          <source>One rather bad thing about singletons is that you can't extend them very easily. You basically have to build in some kind of &lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;decorator pattern&lt;/a&gt; or some such thing if you want to change their behavior. Also, if one day you want to have multiple ways of doing that one thing, it can be rather painful to change, depending on how you lay out your code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンの悪い点の1つは、それらを簡単に拡張できないことです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;動作を変更したい場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、基本的に何らかの&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デコレータパターン&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;など&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;組み込む&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、1つのことを複数の方法で実行したい場合、コードのレイアウト方法によっては、変更するのがかなり面倒になる可能性があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce175dbf29b8e8c973f5eaab4951c1d4efea6362" translate="yes" xml:space="preserve">
          <source>One thing to note, if you DO use singletons, try to pass them in to whoever needs them rather than have them access it directly... Otherwise if you ever choose to have multiple ways of doing the thing that singleton does, it will be rather difficult to change as each class embeds a dependency if it accesses the singleton directly.</source>
          <target state="translated">一つ注意すべきことは、もしシングルトンを使う場合は、シングルトンに直接アクセスさせるのではなく、それを必要とする人に渡すようにしてください...そうしないと、シングルトンが行うことを複数の方法で行うことを選択した場合、シングルトンに直接アクセスした場合、各クラスが依存関係を埋め込んでしまうので、変更するのはかなり難しくなります。</target>
        </trans-unit>
        <trans-unit id="b46465a6d50ce5de3f512c57fbb175a4dfef1083" translate="yes" xml:space="preserve">
          <source>Ownership of the single instance cannot be reasonably assigned</source>
          <target state="translated">単一インスタンスの所有権を合理的に割り当てることができない</target>
        </trans-unit>
        <trans-unit id="715eaba002359c1f45ac2b34e6e9e70374fe8629" translate="yes" xml:space="preserve">
          <source>Paraphrased from Brian Button:</source>
          <target state="translated">ブライアン・バトンからの言い換えです。</target>
        </trans-unit>
        <trans-unit id="1252eeb8091f8d534d0de0657525d9e409460566" translate="yes" xml:space="preserve">
          <source>People think Singleton is evil because they are using it for globals. It is because of this confusion that Singleton is looked down upon. Please, don't confuse Singletons and globals. If used for the purpose it was intended for, you will gain extreme benefits from the Singleton pattern.</source>
          <target state="translated">シングルトンを悪だと思っているのは、グローバルに使っているからです。シングルトンが見下ろされるのは、このような混乱があるからです。シングルトンとグローバルを混同しないでください。目的に合わせて使用すれば、シングルトンパターンから最大限の利益を得ることができます。</target>
        </trans-unit>
        <trans-unit id="4488e947e889410b9a191f1d7b72296670a169df" translate="yes" xml:space="preserve">
          <source>Personally, I have seen a programmer abuse a singleton by using it as some sort of twisted cross-thread database store within an application. Having worked on the code directly, I can attest that it was a slow (because of all the thread locks needed to make it thread-safe) and a nightmare to work on (because of the unpredictable/intermittent nature of synchronization bugs), and nearly impossible to test under 'production' conditions. Sure, a system could have been developed using polling/signaling to overcome some of the performance issues but that wouldn't solve the issues with testing and, why bother when a 'real' database can already accomplish the same functionality in a much more robust/scalable manner.</source>
          <target state="translated">個人的には、あるプログラマがシングルトンをアプリケーション内のある種のねじれたクロススレッドデータベースストアとして使用することで、シングルトンを悪用しているのを見たことがあります。そのコードに直接取り組んだことで、私はそれが(スレッドセーフにするために必要なすべてのスレッドロックのために)遅く、(同期化バグの予測不可能な断続的な性質のために)作業するのは悪夢であり、「本番」の条件でテストするのはほぼ不可能であったことを証言できます。確かに、パフォーマンスの問題のいくつかを克服するためにポーリングシグナリングを使用してシステムを開発することはできましたが、それはテストの問題を解決することはできません。</target>
        </trans-unit>
        <trans-unit id="91f89d4db256dc247d870f9462f9bc0c69cb74b5" translate="yes" xml:space="preserve">
          <source>Please support your answers with &quot;&lt;em&gt;facts, references, or specific expertise&lt;/em&gt;&quot;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;事実、参考文献、または特定の専門知識&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;回答をサポートしてください&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="57c71d6ec57b7a7097898abfe53ac93d158a60a4" translate="yes" xml:space="preserve">
          <source>Rather than using singletons, you should pass all the needed utility objects from function to function. That can be simplified if you wrap all them into a helper object, like this:</source>
          <target state="translated">シングルトンを使うのではなく、必要なユーティリティオブジェクトをすべて関数から関数に渡すべきです。これは、以下のようにすべてのオブジェクトをヘルパーオブジェクトにラップすることで単純化できます。</target>
        </trans-unit>
        <trans-unit id="e244aca5c6e08cefb560ff05106c72a053cfd258" translate="yes" xml:space="preserve">
          <source>Recent article on this subject by Chris Reath at &lt;a href=&quot;http://www.codingwithoutcomments.com/&quot;&gt;Coding Without Comments&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://www.codingwithoutcomments.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コメントなしのコーディングでの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クリス・リースによるこの主題に関する最近の記事&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aad46f2b1a8beb2238db459eb8a7984bc88e9ac7" translate="yes" xml:space="preserve">
          <source>References (only relevant references from the article)</source>
          <target state="translated">参考文献(記事からの関連文献のみ</target>
        </trans-unit>
        <trans-unit id="52f59ac0b8d614ab6b3b23685d4c5ee578e87153" translate="yes" xml:space="preserve">
          <source>Regarding unit tests:</source>
          <target state="translated">ユニットテストについて。</target>
        </trans-unit>
        <trans-unit id="030d697ac3114fa5e0f1fd803ceabd44c98c1ff2" translate="yes" xml:space="preserve">
          <source>Sadly, rather than teaching good examples of how to do Singletons. We teach bad examples, let programmers run off using them for a while, and then tell them they are a bad design pattern.</source>
          <target state="translated">悲しいことに、シングルトンのやり方の良い例を教えるのではなく、悪い例を教えて、プログラマーにそれを使って逃げさせて、それが悪いデザインパターンだと教えてしまうのです。私たちは悪い例を教え、プログラマーにそれを使ってしばらく逃げさせてから、それが悪いデザインパターンだと教えるのです。</target>
        </trans-unit>
        <trans-unit id="e0aa79b2c282a159104c446619a487d9dd85bee2" translate="yes" xml:space="preserve">
          <source>See Wikipedia Singleton_pattern</source>
          <target state="translated">ウィキペディアのSingleton_patternを参照してください。</target>
        </trans-unit>
        <trans-unit id="d433b5c0fbdc7c1d72fe35c9443488ae8c3ee54e" translate="yes" xml:space="preserve">
          <source>Single Responsibility Principle: I think this is a bit vague and depends on your definition of responsibility. A relevant question would be, why does adding this &lt;em&gt;specific&lt;/em&gt; &quot;responsibility&quot; to a class matter?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;単一の責任の原則：これは少しあいまいで、責任の定義に依存すると思います。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関連する質問は、なぜこの&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特定の&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「責任」をクラスの問題に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;追加するの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でしょうか。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="26ed3cf8e352b5e7d2bf4aa5387c599ce82c10d1" translate="yes" xml:space="preserve">
          <source>Singleton is a pattern and can be used or abused just like any other tool.</source>
          <target state="translated">シングルトンはパターンであり、他のツールと同じように使用したり乱用したりすることができます。</target>
        </trans-unit>
        <trans-unit id="4b9b5722cbaf5d7c5ad21d8e14a4714334867513" translate="yes" xml:space="preserve">
          <source>Singleton is not about single instance!</source>
          <target state="translated">シングルトンはシングルインスタンスのことではありません</target>
        </trans-unit>
        <trans-unit id="f2e14fa8aa12ee4d53b03570c0e52377418420bf" translate="yes" xml:space="preserve">
          <source>Singleton should be considered only if all three of the following criteria are satisfied:</source>
          <target state="translated">シングルトンは、以下の3つの基準をすべて満たしている場合にのみ検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="f03a7ee73d533121d4ef48caf72e5289060b733f" translate="yes" xml:space="preserve">
          <source>Singletons &lt;em&gt;aren't&lt;/em&gt; evil, if you use it &lt;em&gt;properly&lt;/em&gt; &amp;amp; &lt;em&gt;minimally&lt;/em&gt;. There are lot of other good design patterns which replaces the needs of singleton at some point (&amp;amp; also gives best results). But some programmers are unaware of those good patterns &amp;amp; uses the singleton for all the cases which makes the singleton evil for them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンは&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ありません&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、あなたがそれを使用する場合、悪&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;適切に&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;＆&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最小限に&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある時点でシングルトンの必要性に取って代わる、他にも多くの優れた設計パターンがあります（そして最良の結果も得られます）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、一部のプログラマーはこれらの良いパターンを認識せず、シングルトンを悪用するすべてのケースでシングルトンを使用します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4fd184f94d2ce9383e49a02b30f6641ff78181bb" translate="yes" xml:space="preserve">
          <source>Singletons are NOT bad. It's only bad when you make something globally unique that isn't globally unique.</source>
          <target state="translated">シングルトンは悪いことではありません。世界的にユニークなものを世界的にユニークでないものにした時だけが悪い。</target>
        </trans-unit>
        <trans-unit id="b71ec8c276a2e03ed961206cd36c64bf09b91a25" translate="yes" xml:space="preserve">
          <source>Singletons are also a problem from a testing perspective. They tend to make isolated unit-tests difficult to write. &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;Inversion of control&lt;/a&gt;&lt;/strong&gt; (IoC) and &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt;&lt;/strong&gt; are patterns meant to overcome this problem in an object-oriented manner that lends itself to unit testing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンは、テストの観点からも問題です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらは孤立した単体テストを書くのを難しくする傾向があります。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;制御の反転&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（IoC）と&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依存性注入&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、ユニットテストに役立つオブジェクト指向の方法でこの問題を克服するためのパターンです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="22357d29daa92c763bcdd62993b84e9e2aa5bd87" translate="yes" xml:space="preserve">
          <source>Singletons are also bad when it comes to &lt;strong&gt;clustering&lt;/strong&gt;. Because then, you do not have &quot;exactly one singleton&quot; in your application anymore.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスタリング&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に関しても、シングルトンは良くありません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのため、アプリケーションに「厳密に1つのシングルトン」はもうありません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="55a8b300eb18ba098facc7e6694024b774c6eac8" translate="yes" xml:space="preserve">
          <source>Singletons are bad from a purist point of view.</source>
          <target state="translated">一重子は純粋主義者から見ても悪い。</target>
        </trans-unit>
        <trans-unit id="6571a82538f52d979f2b5e1853bbedb03b9ee0b8" translate="yes" xml:space="preserve">
          <source>Singletons are nothing more than global state. Global state makes it so your objects can secretly get hold of things which are not declared in their APIs, and, as a result, Singletons make your APIs into pathological liars.</source>
          <target state="translated">シングルトンはグローバルステート以外の何物でもありません。グローバルステートは、APIで宣言されていないものをオブジェクトがこっそり手に入れることを可能にします。</target>
        </trans-unit>
        <trans-unit id="3865fa07f2a264ee1aa7be8afa2532f27d7a83de" translate="yes" xml:space="preserve">
          <source>Singletons make it very hard to move from them to regular objects.</source>
          <target state="translated">シングルトンは、それらから通常のオブジェクトへの移動を非常に困難にします。</target>
        </trans-unit>
        <trans-unit id="1a9fa24bd062fcce6fa98e671274d898304f4930" translate="yes" xml:space="preserve">
          <source>Singletons solve one (and only one) problem.</source>
          <target state="translated">シングルトンは、1つの(そして1つだけの)問題を解決します。</target>
        </trans-unit>
        <trans-unit id="9a182b1859f9fcbfb5d6f4df6317aa60d8f6db05" translate="yes" xml:space="preserve">
          <source>Singletons sometimes also complicate &lt;a href=&quot;https://en.wikipedia.org/wiki/Unit_testing&quot;&gt;unit testing&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンは、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Unit_testing&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;単体テストを&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;複雑にすることもあり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="358417c2142a15d4609dbb8b247ce7663b733322" translate="yes" xml:space="preserve">
          <source>So basically:</source>
          <target state="translated">だから基本的には</target>
        </trans-unit>
        <trans-unit id="f4cf667760b907cb4a40918fa4336dd7f2460150" translate="yes" xml:space="preserve">
          <source>So you are sure that only one singleton in your application exists and all database go through this one and only &lt;code&gt;SingletonDao&lt;/code&gt;. Your production environment now looks like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、アプリケーションに存在するシングルトンは1つだけであり、すべてのデータベースがこの1つだけを通過し、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;SingletonDao&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;だけを通過することになります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;運用環境は次のようになります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e6fed6a4edfd3ed86633f28e6a268bd05113200a" translate="yes" xml:space="preserve">
          <source>So you're playing monopoly with friends Bob, Joe, and Ed. You're swiftly building your empire and consuming market share at an exponential rate. Your opponents are weakening and you start to smell blood (figuratively). Your buddy Bob put all of his money into gridlocking as many low-value properties as possible but his isn't receiving a high return on investment the way he expected. Bob, as a stroke of bad luck, lands on your Boardwalk and is excised from the game.</source>
          <target state="translated">あなたは友人のボブ、ジョー、エドと独占プレイをしています。あなたは急速に帝国を築き、指数関数的な速度で市場シェアを消費しています。敵は弱体化し、あなたは血の匂いを感じ始めます(比喩的な意味で)。相棒のボブは、低価値の物件を可能な限り多くのグリッドロックに全財産を投入しましたが、彼が期待したような高い投資収益率を得られていません。ボブは、不運の一撃として、あなたのボードウォークに着陸し、ゲームから削除されます。</target>
        </trans-unit>
        <trans-unit id="668ff333ca3f47ff06a60a3fa60bdab697466e01" translate="yes" xml:space="preserve">
          <source>So, if a rulebook for a game accurately represented a singleton, the monopoly rulebook would be an example of abuse.</source>
          <target state="translated">だから、ゲームのルールブックがシングルトンを正確に表現していたら、独占ルールブックは悪用の一例になります。</target>
        </trans-unit>
        <trans-unit id="0591c19bd97bf670bf6baa531c0194ef328f8f82" translate="yes" xml:space="preserve">
          <source>Some coding snobs look down on them as just a glorified global. In the same way that many people hate the &lt;em&gt;goto&lt;/em&gt; statement there are others that hate the idea of ever using a &lt;em&gt;global&lt;/em&gt;. I have seen several developers go to extraordinary lengths to avoid a &lt;em&gt;global&lt;/em&gt; because they considered using one as an admission of failure. Strange but true.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一部のコーディングスノッブは、それらを美化されたグローバルとして見下しています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;多くの人が&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;goto&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステートメントを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;嫌うのと同じように&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;グローバル&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用するという考えを嫌う人もい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;何人かの開発者が&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;グローバル&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を回避するために並外れた長さを取り&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、失敗を認めるものとして使用することを検討したのを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;見てきました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;奇妙だが真実。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd23f939cf611c71e9dd37ad01d7843f484366f9" translate="yes" xml:space="preserve">
          <source>Stack Overflow especially seems to assume that everyone agrees that Singletons are evil. Why?</source>
          <target state="translated">スタックオーバーフローは特に、シングルトンは悪だと誰もが同意していると思い込んでいるようです。なぜでしょうか?</target>
        </trans-unit>
        <trans-unit id="789f399c246ebf167b232e3114d18264ff6e67cc" translate="yes" xml:space="preserve">
          <source>That sounds weird, but &lt;strong&gt;now you have many singletons in your application&lt;/strong&gt;. And that is exactly what a singleton is not supposed to be: Having many objects of it. This is especially bad if you, as shown in this example, want to make synchronized calls to a database.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;奇妙に聞こえる&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;かもしれませんが&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;今あなたのアプリケーションには多くのシングルトンがあります&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして、それはまさにシングルトンがそうであるべきではないものです：それの多くのオブジェクトを持つこと。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、この例に示すように、データベースへの同期呼び出しを行いたい場合は特に悪いことです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f2475bf5ffeb163ceac957a3d49d6036113fdd88" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;singleton pattern&lt;/a&gt; is a fully paid up member of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;GoF&lt;/a&gt;'s &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201633612&quot;&gt;patterns book&lt;/a&gt;, but it lately seems rather orphaned by the developer world. I still use quite a lot of singletons, especially for &lt;a href=&quot;https://en.wikipedia.org/wiki/Factory_method_pattern&quot;&gt;factory classes&lt;/a&gt;, and while you have to be a bit careful about multithreading issues (like any class actually), I fail to see why they are so awful.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンパターンは&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の完全払込メンバーである&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のGoF&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201633612&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パターンの本&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が、それは最近、むしろ開発者の世界で孤立したようです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私はまだかなりの数のシングルトンを使用していますが、特に&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Factory_method_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ファクトリクラスでは&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、マルチスレッドの問題（実際には他のクラスと同様）に少し注意する必要がありますが、なぜそれほどひどいのかはわかりません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8cc31c742f2cb350a70f7da3d43015596237acc3" translate="yes" xml:space="preserve">
          <source>The Singleton context is also really important. The defining characteristic of a Singleton is that there is &quot;only one&quot;, but the truth is it is &quot;only one&quot; within some kind of context/namespace. They are usually one of: one per thread, process, IP address or cluster, but can also be one per processor, machine, language namespace/class loader/whatever, subnet, Internet, etc.</source>
          <target state="translated">シングルトンのコンテキストも本当に重要です。シングルトンの定義上の特徴は、「唯一のもの」であるということですが、実際にはある種のコンテキスト名前空間の中で「唯一のもの」であるということです。通常はスレッド、プロセス、IPアドレス、クラスタごとに1つずつですが、プロセッサ、マシン、言語名空間、クラスローダ、サブネット、インターネットなどにも1つずつ存在します。</target>
        </trans-unit>
        <trans-unit id="835608667d69c55c183b0cef18dafe7f7cbbb7a5" translate="yes" xml:space="preserve">
          <source>The bad part of a singleton is generally the user (or should I say the inappropriate use of a singleton for things it is not designed to do). The biggest offender is using a singleton as a fake global variable.</source>
          <target state="translated">シングルトンの悪い部分は、一般的にはユーザーです(あるいは、シングルトンが設計されていないことに不適切な使い方をすることと言うべきでしょう)。最大の問題は、シングルトンを偽のグローバル変数として使うことです。</target>
        </trans-unit>
        <trans-unit id="7b5cae7f5b6c184980327093d8fb76a94df99840" translate="yes" xml:space="preserve">
          <source>The other, less common, mistake is to ignore the Singleton lifestyle. Just because there is only one doesn't mean a Singleton is some omnipotent &quot;always was and always will be&quot;, nor is it generally desirable (objects without a begin and end violate all kinds of useful assumptions in code, and should be employed only in the most desperate of circumstances.</source>
          <target state="translated">もう一つの、あまり一般的ではない間違いは、シングルトンのライフスタイルを無視することです。また、シングルトンは一般的に望ましいものではありません(開始と終了を持たないオブジェクトは、コード上のあらゆる種類の有用な前提条件に違反します。</target>
        </trans-unit>
        <trans-unit id="15878b09a961588056074d3687c3f79453c08e1e" translate="yes" xml:space="preserve">
          <source>The problems that singleton cause in testing is a symptom of their hard coded single usage case/environment. The test suite and the many tests are each individual and separate something that is not compatible with hardcoding a singleton.</source>
          <target state="translated">シングルトンがテストで引き起こす問題は、シングルトンのハードコーディングされた単一の使用ケース環境の症状です。テストスイートと多数のテストはそれぞれ個別であり、シングルトンのハードコーディングとは互換性がありません。</target>
        </trans-unit>
        <trans-unit id="9833752e81fedcd533363bb0df3d89b4b006c284" translate="yes" xml:space="preserve">
          <source>The problems with singletons is the issue of increased scope and therefore &lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;coupling&lt;/a&gt;. There is no denying that there are some of situations where you do need access to a single instance, and it can be accomplished other ways.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンの問題は、スコープの拡大、つまり&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;結合の問題&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;単一のインスタンスへのアクセスが必要な状況がいくつかあることは否定できません。それは他の方法で実現できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="df4e6e231e99dc52f3bff603e6c0d51c55026c2a" translate="yes" xml:space="preserve">
          <source>The singleton pattern is not a problem in itself. The problem is that the pattern is often used by people developing software with object-oriented tools without having a solid grasp of OO concepts. When singletons are introduced in this context they tend to grow into unmanageable classes that contain helper methods for every little use.</source>
          <target state="translated">シングルトンパターンはそれ自体は問題ではありません。問題は、オブジェクト指向ツールを使ってソフトウェアを開発している人たちが、オブジェクト指向の概念をしっかりと理解していないまま、このパターンを使うことが多いということです。このような状況でシングルトンが導入されると、それらは管理しきれないほどのクラスに成長する傾向があり、あらゆる小さな用途のためにヘルパーメソッドを含むようになります。</target>
        </trans-unit>
        <trans-unit id="465df7c70852f19533399cca69e2d76b8e5bf51e" translate="yes" xml:space="preserve">
          <source>The singleton should be simple in nature and not overly complicated.</source>
          <target state="translated">シングルトンは本質的にシンプルで、複雑になりすぎないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="d16f8b3beb1ad83c4ab0ac8578a45a586f69fe71" translate="yes" xml:space="preserve">
          <source>The two biggest screw ups I see are: treating it like a global &amp;amp; failing to define the Singleton closure.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私が目にする2つの最大の失敗は、グローバルのように扱うことと、シングルトンクロージャを定義できないことです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3c54f8415cbbb0dc73616090c496cddc67a6a2d6" translate="yes" xml:space="preserve">
          <source>Then, instead of one of them winning, the process starts all over. All of a sudden, a finite set of rules becomes a moving target and the game degenerates into the type of social interactions that would make up the foundation of every high-rated reality TV show since Survivor. Why, because the rules are changing and there's no consensus on how/why/what they're supposed to represent, and more importantly, there's no one person making the decisions. Every player in the game, at that point, is making his/her own rules and chaos ensues until two of the players are too tired to keep up the charade and slowly give up.</source>
          <target state="translated">そして、どちらかが勝つのではなく、最初からやり直しです。突然、ルールの有限のセットは、移動するターゲットになり、ゲームは、サバイバー以来、すべての高評価のリアリティ番組の基盤を構成する社会的相互作用のタイプに退化します。なぜかというと、ルールが変化しているため、どのように、なぜ、どのように、何を表現することになっているのかについてのコンセンサスがなく、さらに重要なのは、意思決定を行う一人の人間がいないからです。ゲーム内のすべてのプレイヤーは、その時点で、自分のルールを作っていると混乱が続く選手の2人があまりにも疲れているまで、カレードを維持するために、ゆっくりとあきらめています。</target>
        </trans-unit>
        <trans-unit id="94f7d2aeef0065cc58a25d8c73e0e4361c409fc9" translate="yes" xml:space="preserve">
          <source>There aren't many examples. A log file is the big one. You don't want to just abandon a single log file. You want to flush, sync and close it properly. This is an example of a single shared resource that has to be managed.</source>
          <target state="translated">例はあまり多くはありません。ログファイルは大きなものです。一つのログファイルだけを捨ててはいけません。きちんとフラッシュして同期して閉じたい。これは、単一の共有リソースを管理しなければならない例です。</target>
        </trans-unit>
        <trans-unit id="f1ebb5ebafa456472c719f0e8d8a94135dd4aeb2" translate="yes" xml:space="preserve">
          <source>There is also the multi-threaded scenario where singletons can become a bottleneck as well as a synchronization issue.</source>
          <target state="translated">同期の問題だけでなく、シングルトンがボトルネックになるマルチスレッドのシナリオもあります。</target>
        </trans-unit>
        <trans-unit id="ae8dc1fef3e4bf10c544a55f52796833a6c58b74" translate="yes" xml:space="preserve">
          <source>There is nothing inherently wrong with the pattern, assuming it is being used for some aspect of your model which is truly single.</source>
          <target state="translated">パターンには本質的には何も問題はありませんが、あなたのモデルのいくつかの側面に使用されていると仮定して、それは本当に単一である。</target>
        </trans-unit>
        <trans-unit id="623dde36e233f0079e0085137f7deb08030d05b3" translate="yes" xml:space="preserve">
          <source>They are generally used as a global instance, why is that so bad? Because you hide the dependencies of your application in your code, instead of exposing them through the interfaces. Making something global to avoid passing it around is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_smell&quot;&gt;code smell&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらは一般的にグローバルインスタンスとして使用されますが、なぜそんなに悪いのですか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インターフェースを介してアプリケーションを公開するのではなく、コードでアプリケーションの依存関係を非表示にするためです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;何かをグローバルに渡さないようにすることは&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_smell&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コードの匂い&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba0e2b9616043f04660dd81d417cf5a73379fae0" translate="yes" xml:space="preserve">
          <source>They carry state around for the lifetime of the application. Another hit to testing since you can end up with a situation where tests need to be ordered which is a big no no for unit tests. Why? Because each unit test should be independent from the other.</source>
          <target state="translated">これらのテストは、アプリケーションの寿命の間、状態を保持します。これはユニットテストにとっては大きな問題ですが、テストを命令する必要がある状況に陥る可能性があるため、テストにはもう一つの打撃となります。なぜでしょうか? なぜなら、各ユニットテストは他のユニットテストから独立しているべきだからです。</target>
        </trans-unit>
        <trans-unit id="0e53548518905c337e4e3cda636d244bba6f2fa4" translate="yes" xml:space="preserve">
          <source>They inherently cause code to be tightly &lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;coupled&lt;/a&gt;. This makes faking them out under test rather difficult in many cases.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらは本質的にコードを密&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;結合させ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これにより、多くの場合、テスト中のそれらを偽装することがかなり困難になります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eaf26fcd332b1240c30b63e8f6f491d24eac2db8" translate="yes" xml:space="preserve">
          <source>They violate the &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;single responsibility principle&lt;/a&gt;: by virtue of the fact that they control their own creation and lifecycle.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;彼らは&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;単一責任の原則に&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;違反し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。彼らは自分たちの創造とライフサイクルを制御しているという事実のおかげで。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4c954584093770b03e88adcfe2a8a14d6ea33cb0" translate="yes" xml:space="preserve">
          <source>To start a game of monopoly, first:</source>
          <target state="translated">モノポリーゲームを始めるには、まず。</target>
        </trans-unit>
        <trans-unit id="ca4d354b99bc24d443677735e54833fae801e272" translate="yes" xml:space="preserve">
          <source>Too many people put objects which are not thread safe in a singleton pattern. I've seen examples of a DataContext (&lt;a href=&quot;http://en.wikipedia.org/wiki/Language_Integrated_Query#LINQ_to_SQL_.28formerly_called_DLINQ.29&quot;&gt;LINQ&amp;nbsp;to&amp;nbsp;SQL&lt;/a&gt;) done in a singleton pattern, despite the fact that the DataContext is not thread safe and is purely a unit-of-work object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スレッドセーフではないオブジェクトをシングルトンパターンに配置する人が多すぎます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DataContextはスレッドセーフではなく、純粋に作業単位オブジェクトであるにもかかわらず、シングルトンパターンで実行さ&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Language_Integrated_Query#LINQ_to_SQL_.28formerly_called_DLINQ.29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れる&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; DataContext（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;LINQ to SQL&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例を見てきました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="398efeaac4bc6e2faa9b4c57d3f5b8a9b52f18bc" translate="yes" xml:space="preserve">
          <source>Unlike other answers I don't want to talk about what is wrong with Singletons but to show you how powerful and awesome they are when used right!</source>
          <target state="translated">他の回答と違って、私はシングルトンの何が悪いのかを話したいのではなく、正しく使用することで、シングルトンがどれだけ強力で素晴らしいかをお見せしたいのです。</target>
        </trans-unit>
        <trans-unit id="24fb6a8b55fe7fc6662d5d9a56b3921a911f125a" translate="yes" xml:space="preserve">
          <source>Using a single instance of an class is a valid construct as long as you apply the following means in code:</source>
          <target state="translated">クラスの単一インスタンスを使用することは、コード内で以下の手段を適用する限り有効な構文です。</target>
        </trans-unit>
        <trans-unit id="7963242df7308adc2b3bd139cf37de9402e4f845" translate="yes" xml:space="preserve">
          <source>We've used Singletons in our solutions with a great deal of success that are testable ensuring deterministic behavior in parallel test run streams.</source>
          <target state="translated">私たちのソリューションではシングルトンを使用しており、並列テスト実行ストリームでの決定論的な動作を確実にテスト可能なものにしており、大きな成功を収めています。</target>
        </trans-unit>
        <trans-unit id="da1a3cb035699759f4a078c19b9474f88a6e772b" translate="yes" xml:space="preserve">
          <source>What is so bad about singletons</source>
          <target state="translated">シングルトンの何がそんなに悪いのか</target>
        </trans-unit>
        <trans-unit id="50f77dcdabdfd3afda084de7fd3d29d5dfae4194" translate="yes" xml:space="preserve">
          <source>When it comes to Singletons</source>
          <target state="translated">シングルトンに関しては</target>
        </trans-unit>
        <trans-unit id="5c986765347b4b7bcb59761b18cd82e4e10e25e6" translate="yes" xml:space="preserve">
          <source>When you think you need a global, you're probably making a terrible design mistake.</source>
          <target state="translated">グローバルが必要だと思ってる時点で、とんでもない設計ミスをしてるんじゃないか?</target>
        </trans-unit>
        <trans-unit id="4380b88b28be97d636237273ad914637b065daf2" translate="yes" xml:space="preserve">
          <source>When you write code using singletons, say, a logger or a database connection, and afterwards you discover you need more than one log or more than one database, you&amp;rsquo;re in trouble.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、ロガーやデータベース接続などのシングルトンを使用してコードを記述し、その後、複数のログまたは複数のデータベースが必要であることがわかった場合、問題が発生します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c2df5f04ca68555136da5ed4bf5bd73a7b744b5f" translate="yes" xml:space="preserve">
          <source>Why does it change how long the state lasts? Singletons can be created or destroyed manually, so the control is still there, and you can make the lifetime the same as a non-singleton object's lifetime would be.</source>
          <target state="translated">なぜ状態の持続時間が変わるのでしょうか?シングルトンは手動で作成したり破壊したりすることができるので、コントロールはそのままで、シングルトンではないオブジェクトの寿命と同じにすることができます。</target>
        </trans-unit>
        <trans-unit id="801e82bda5401c9fc10a0749304f4d28624f7eec" translate="yes" xml:space="preserve">
          <source>Why does passing an object to a class make it more tightly coupled than using that object as a singleton from within the class?</source>
          <target state="translated">なぜオブジェクトをクラスに渡すと、そのオブジェクトをクラス内からシングルトンとして使用するよりも密に結合されるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="a081d3ea69b57f4be3e26dd0623ed07dbee9e870" translate="yes" xml:space="preserve">
          <source>Why is hiding dependencies in your code bad? There are already dozens of hidden dependencies (C runtime calls, OS API calls, global function calls), and singleton dependencies are easy to find (search for instance()).</source>
          <target state="translated">なぜコードに依存関係を隠すのが悪いのでしょうか?隠れた依存関係はすでに何十も存在しており(C言語のランタイムコール、OSのAPIコール、グローバル関数コール)、シングルトン依存関係は簡単に見つけることができます(instance()を検索してください)。</target>
        </trans-unit>
        <trans-unit id="2a2c34163aca31fcba0ec660cb7d173824ec9661" translate="yes" xml:space="preserve">
          <source>You can map &lt;code&gt;MyModel&lt;/code&gt; to &lt;code&gt;TestMyModel&lt;/code&gt; class that inherits it, everywhere when &lt;code&gt;MyModel&lt;/code&gt; will be injected you will get &lt;code&gt;TestMyModel&lt;/code&gt; instread.
 - &lt;strong&gt;Problem&lt;/strong&gt;: Singletons can cause memory leaks as they never disposed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたはマップでき&lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;TestMyModel&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それは、どこにでも時に継承するクラス&lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注入されますあなたが得る&lt;/font&gt;&lt;/font&gt; &lt;code&gt;TestMyModel&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; instreadを。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;- &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;問題&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：シングルトンは破棄されないため、メモリリークを引き起こす可能性があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="070c0a7e28e299b15bf2111d596305db704790a1" translate="yes" xml:space="preserve">
          <source>You can then do the following from all over the place:</source>
          <target state="translated">そうすれば、あちこちから次のようなことができるようになります。</target>
        </trans-unit>
        <trans-unit id="19728079c61f5eb831b4385ced41da1096a537bb" translate="yes" xml:space="preserve">
          <source>^ Alex Miller. &lt;a href=&quot;http://tech.puredanger.com/2007/07/03/pattern-hate-singleton/&quot;&gt;Patterns I hate #1: Singleton&lt;/a&gt;, July 2007</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;^アレックス・ミラー。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://tech.puredanger.com/2007/07/03/pattern-hate-singleton/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;嫌いなパターン＃1：シングルトン&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、2007年7月&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fcb308952610da92d5ca908919ae791dc42bb049" translate="yes" xml:space="preserve">
          <source>^ J.B. Rainsberger, IBM. &lt;a href=&quot;http://www-128.ibm.com/developerworks/webservices/library/co-single.html&quot;&gt;Use your singletons wisely&lt;/a&gt;, July 2001</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;^ JB Rainsberger、IBM。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2001年7月&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www-128.ibm.com/developerworks/webservices/library/co-single.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、シングルトンを賢く使う&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a788156b24d0bf82a606dee1b5227b07e47bd57" translate="yes" xml:space="preserve">
          <source>^ Scott Densmore. &lt;a href=&quot;http://blogs.msdn.com/scottdensmore/archive/2004/05/25/140827.aspx&quot;&gt;Why singletons are evil&lt;/a&gt;, May 2004</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;^スコット・デンスモア。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.msdn.com/scottdensmore/archive/2004/05/25/140827.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンが悪&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;である&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;理由&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、2004年5月&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="484242ea0740f5e0e6cb94704610337fc5b2d075" translate="yes" xml:space="preserve">
          <source>^ Steve Yegge. &lt;a href=&quot;http://steve.yegge.googlepages.com/singleton-considered-stupid&quot;&gt;Singletons considered stupid&lt;/a&gt;, September 2004</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;^ Steve Yegge。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://steve.yegge.googlepages.com/singleton-considered-stupid&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンは愚か&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;である&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と考えられた&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、2004年9月&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4d0ef9363f9acba6ca10c3f8aee3f26826f3a7be" translate="yes" xml:space="preserve">
          <source>a. It causes namespace conflict</source>
          <target state="translated">a.名前空間の競合を引き起こします。</target>
        </trans-unit>
        <trans-unit id="cf3fb1048c25336d3ef9b140e49d8db542d6678f" translate="yes" xml:space="preserve">
          <source>a. The explicit OO way of calling them, prevents the conflicts, so point a. is not an issue</source>
          <target state="translated">a.明示的な OO の呼び出し方は、競合を防ぎますので、a.は問題ではありません。</target>
        </trans-unit>
        <trans-unit id="332b0e2db7c52d7f329fd8b551eb950dee05cf67" translate="yes" xml:space="preserve">
          <source>b. It exposes the state in a unwarranted fashion</source>
          <target state="translated">b.国家を不当に晒している。</target>
        </trans-unit>
        <trans-unit id="8b0eb367ee096fc9e4032dbd74741830957f9414" translate="yes" xml:space="preserve">
          <source>b. Singletons without state are (like factories) are not a problem. Singletons with state can again fall in two categories, those which are immutable or write once and read many (config/property files). These are not bad. Mutable Singletons, which are kind of reference holders are the ones which you are speaking of.</source>
          <target state="translated">b.状態を持たないシングルトンは(工場のように)問題ありません。状態を持つシングルトンは、再び2つのカテゴリに分類され、不変であるものと、一度書き込んで何度も読むもの(configpropertyファイル)に分類されます。これらは悪いものではありません。Mutable Singletonsは、あなたが言っているような参照ホルダーのようなものです。</target>
        </trans-unit>
        <trans-unit id="ab43fcca553c6f3639b5bc191032d2a14dfec129" translate="yes" xml:space="preserve">
          <source>everybody is given an equal start at the beginning of the game</source>
          <target state="translated">序盤は誰もが平等にスタートできる</target>
        </trans-unit>
        <trans-unit id="95c8fe92116d1f9c066ed43d5286406e2f4d1903" translate="yes" xml:space="preserve">
          <source>if they &lt;em&gt;do&lt;/em&gt; need be unit tested and
do need to change the implementation,
it's easy to change a class from
using a singleton to having the
singleton passed to it via dependency
injection.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;単体テスト&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必要で、実装を変更する必要がある&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、クラスをシングルトンの使用から依存関係注入を介して渡されるようにクラスを変更するのは簡単です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1033f06a6e4d031a15155240c5dd06be1392c571" translate="yes" xml:space="preserve">
          <source>in classes that implement IMessageReceiver.</source>
          <target state="translated">IMessageReceiverを実装したクラスで</target>
        </trans-unit>
        <trans-unit id="63c67bcc3aa92c02e8148e8f0850d007f6f9d562" translate="yes" xml:space="preserve">
          <source>not all classes need to be unit
tested</source>
          <target state="translated">すべてのクラスをユニットテストする必要はありません</target>
        </trans-unit>
        <trans-unit id="c6e595dac74db94f58cdd52fe08af8a5e9e4dc59" translate="yes" xml:space="preserve">
          <source>not all classes that need to be unit
tested need to change the
implementation of the singleton</source>
          <target state="translated">ユニットテストが必要なすべてのクラスがシングルトンの実装を変更する必要があるわけではありません。</target>
        </trans-unit>
        <trans-unit id="422ff09c0e800e46347ae06765490e04994e4ce9" translate="yes" xml:space="preserve">
          <source>only one set of rules is presented to avoid confusion</source>
          <target state="translated">混乱を避けるために一つのルールだけを提示します。</target>
        </trans-unit>
        <trans-unit id="82b524d90dbcf160ddb4a560d1503123520ae7c4" translate="yes" xml:space="preserve">
          <source>rather than:</source>
          <target state="translated">というよりも</target>
        </trans-unit>
        <trans-unit id="7570901e3d970213dc3d6ba782f132be44f9d7f9" translate="yes" xml:space="preserve">
          <source>the rules aren't allowed to change throughout the game</source>
          <target state="translated">決められたルールは変えられない</target>
        </trans-unit>
        <trans-unit id="5983b274e96763d883f37aeae5f28173136c7ba9" translate="yes" xml:space="preserve">
          <source>we establish the rules first so everybody is on the same page</source>
          <target state="translated">まずルールを決めて、全員が同じ考えを持つようにします。</target>
        </trans-unit>
        <trans-unit id="1ecf37b81e7ec4252f6722c1010864a51b2b0022" translate="yes" xml:space="preserve">
          <source>you need a &lt;strong&gt;singleton&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトン&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が必要です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
