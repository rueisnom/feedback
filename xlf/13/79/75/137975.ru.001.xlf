<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/137975">
    <body>
      <group id="137975">
        <trans-unit id="4c0663d54c4595f36a4f42a6f5400ef2ef366a74" translate="yes" xml:space="preserve">
          <source>&quot;Making something global to avoid passing it around is a code smell.&quot; Why isn't passing something around to avoid making it a singleton a code smell?</source>
          <target state="translated">&quot;Сделать что-то глобальное,чтобы не передавать это-это запах кода&quot;.Почему бы не передать что-нибудь,чтобы не превратить это в одноэлементный запах кода?</target>
        </trans-unit>
        <trans-unit id="286d74fd07d872b4e967ba01e43b9ca80c0210fc" translate="yes" xml:space="preserve">
          <source>(&lt;strong&gt;1&lt;/strong&gt;) can only have a single instance, and</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) может иметь только один экземпляр, и&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1b63564fae2bc683b52e7b476a02f169d4dea468" translate="yes" xml:space="preserve">
          <source>(&lt;strong&gt;2&lt;/strong&gt;) you need to manage that single instance,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) вам нужно управлять этим единственным экземпляром,&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bde670e23d5afa06c791afd885f2d353197aa1d7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;Singletons are Pathological Liars&lt;/a&gt; has a unit testing example that illustrates how singletons can make it difficult to figure out dependency chains and start or test an application. It is a fairly extreme example of abuse, but the point that he makes is still valid:</source>
          <target state="translated">&lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Синглтоны - это патологический У лжецов&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; есть пример модульного тестирования, который иллюстрирует, как синглтоны могут затруднить определение цепочек зависимостей и запуск или тестирование приложения. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это довольно экстремальный пример злоупотребления, но мысль, которую он высказывает, остается в силе:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea97013d248ede0dac3ce0ebf687ba0b03cc305d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://misko.hevery.com/2008/08/21/where-have-all-the-singletons-gone/&quot;&gt;Where have all the Singletons Gone&lt;/a&gt; makes the point that dependency injection has made it easy to get instances to constructors that require them, which alleviates the underlying need behind the bad, global Singletons decried in the first article.</source>
          <target state="translated">&lt;a href=&quot;http://misko.hevery.com/2008/08/21/where-have-all-the-singletons-gone/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Там, где все Singleons Gone&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; подчеркивают, что внедрение зависимостей облегчает получение экземпляров для конструкторов, которые в них нуждаются, что устраняет основную потребность в плохих, глобальных Singletons, о которых говорилось в первой статье.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7386a9161caeb195946b932a803ccd7dce07346" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.vincehuston.org/dp/singleton.html&quot;&gt;Vince Huston&lt;/a&gt; has these criteria, which seem reasonable to me:</source>
          <target state="translated">&lt;a href=&quot;http://www.vincehuston.org/dp/singleton.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;У Винса Хьюстона&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; есть следующие критерии, которые кажутся мне разумными:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d7957063e281e7382024d1939ac01602bdf86908" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A Singleton is &lt;em&gt;only&lt;/em&gt; an option if you need what a singleton provides. A write-one read-only instance of an object. That same rule should cascade to the object's properties/members as well.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Синглтон - это &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;только&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вариант, если вам нужно то, что обеспечивает синглтон. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Доступный только для чтения экземпляр объекта. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это же правило должно касаться и свойств / элементов объекта.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d010d9112a54e839b4d039b507f891e9d1a364c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How does this apply to Monopoly?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Как это относится к монополии?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4f8924237fd09cf8a914728a948b370f5705d9a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How does this apply to programming?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Как это относится к программированию?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2b43c4de79f8e20fd1c5bdcc6794a192575c0965" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Monopoly is the devil and singletons with non-readonly/mutable state are the 'real' problem...&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Монополия - это дьявол, а синглтоны с нечитаемым / изменяемым состоянием - это &amp;laquo;настоящая&amp;raquo; проблема ...&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52f085799a111dd57a5f852313629fb1ae55285c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Problem&lt;/strong&gt;: It is hard to mock singletons.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Проблема&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : сложно издеваться над одиночками.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="df35f0cdfd21e3389438a775dce278434deed79f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Problem&lt;/strong&gt;: Singleton can be a challenge in multi-threading environment</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Проблема&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Singleton может быть проблемой в многопоточной среде&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab2836573afdbf2161060713a36ca848e5dcd111" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Resource Contention.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ресурс Спор.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="34acfa13c88ce2c117f1bbd47ac919cf1fb4aaeb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Singletons improves maintenance&lt;/strong&gt;: Once you removed a dependency from a class you just deleted some singleton injection, you don't need to go and edit a big link of other classes that just moved your dependency around(This is smelly code for me &lt;a href=&quot;https://stackoverflow.com/a/138012/1129332&quot;&gt;@Jim Burger&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singletons улучшает обслуживание&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : после того, как вы удалили зависимость из класса, вы только что удалили однокомпонентную инъекцию, вам не нужно переходить и редактировать большую ссылку на другие классы, которые просто перемещали вашу зависимость (Это вонючий код для меня &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/138012/1129332&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Jim Burger&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="412f4531434a73757801858ba07eaba2e84b9aff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Singletons improves memory and performance&lt;/strong&gt;: When some thing happens in your application, and it takes a long chain of callbacks to deliver, you are wasting memory and performance, by using Singleton you are cutting the middle man, and improve your performance and memory usage(by avoiding unnecessary local variables allocations).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singletons улучшает память и производительность&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : когда что-то происходит в вашем приложении, и для доставки требуется длинная цепочка обратных вызовов, вы тратите впустую память и производительность, с помощью Singleton вы сокращаете средний уровень и улучшаете свою производительность и использование памяти ( избегая ненужных распределений локальных переменных).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0e2c053373b047bcfe397292fbc3cefa5e286412" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Singletons improves readability&lt;/strong&gt;: You can look at your class and see what singleton it injected to figure out what is it's dependencies.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singletons улучшает читабельность&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : вы можете посмотреть на ваш класс и увидеть, какой синглтон он внедрил, чтобы выяснить, каковы его зависимости.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="023083762e9be2b0e554a8d384287ccabf323eb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution&lt;/strong&gt;: Use a single threaded bootstrap process to initialize all the   dependencies of your singleton.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Решение&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Используйте однопоточный процесс начальной загрузки для инициализации всех зависимостей вашего синглтона.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab544ef656038d5821d4e34fbe2cd0a3fa71941e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution&lt;/strong&gt;: Use method &lt;a href=&quot;https://github.com/gazman-sdk/android_life_cycle/wiki&quot;&gt;Factory&lt;/a&gt; pattern for mocking</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Решение&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : использовать метод &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/gazman-sdk/android_life_cycle/wiki&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Factory&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; pattern для издевательства&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8c663d86a9beeaaf39e92c87730e936facd14d2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution&lt;/strong&gt;: Well, dispose them! Implement a callback in your app to properly dispose a singletons, you should remove any data linked to them and finally: remove them from the Factory.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Решение&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Ну, избавьтесь от них! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Внедрите в свое приложение функцию обратного вызова для правильной утилизации синглетонов, вы должны удалить все связанные с ними данные и, наконец, удалить их из Factory.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7b51005f66777ea4c5a189f276aba466064e2572" translate="yes" xml:space="preserve">
          <source>A singleton gets implemented using a static method. Static methods are avoided by people who do unit testing because they cannot be mocked or stubbed. Most people on this site are big proponents of unit testing. The generally most accepted convention to avoid them is using the &lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;inversion of control&lt;/a&gt; pattern.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Синглтон реализуется статическим методом. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Люди, которые проводят модульное тестирование, избегают статических методов, потому что их нельзя высмеять или зарезать. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Большинство людей на этом сайте являются большими сторонниками модульного тестирования. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Общепринятым соглашением избегать их является использование &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;инверсии&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; схемы &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;управления&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="98d937e9b1671d2c26255bf2c387222354793a1b" translate="yes" xml:space="preserve">
          <source>After reading &lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;Singletons are Pathological Liars&lt;/a&gt; as suggested in &lt;a href=&quot;https://stackoverflow.com/a/137996/632951&quot;&gt;jason's answer&lt;/a&gt; I came across this little tidbit that provides the best presented example of &lt;strong&gt;how&lt;/strong&gt; singletons are often misused.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;После прочтения &amp;laquo; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Синглетоны - это патологические лжецы&amp;raquo;,&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; как это было предложено в &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/137996/632951&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ответе Джейсона,&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; я натолкнулся на этот маленький кусочек, который дает лучший представленный пример того, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;как&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; синглтоны часто используются неправильно.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f70a42dfd14309e34041c393526cf11b2727b5dd" translate="yes" xml:space="preserve">
          <source>Also, it&amp;rsquo;s too easy to write a non-thread-safe singleton.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Кроме того, слишком просто написать не-поточно-безопасный синглтон.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6971cacf99a0946118138ab4a33f2113934990ee" translate="yes" xml:space="preserve">
          <source>And, of course, do:</source>
          <target state="translated">И,конечно же:</target>
        </trans-unit>
        <trans-unit id="5d0b974c67fdb9500928fbab323ed42889acaaef" translate="yes" xml:space="preserve">
          <source>As I stated at the title singleton are not about single instance.</source>
          <target state="translated">Как я уже говорил на заглавной строчке,сингл не имеет отношения к одному экземпляру.</target>
        </trans-unit>
        <trans-unit id="780f02d7ca5df16a5493adb1b0ff7ad99d75e11a" translate="yes" xml:space="preserve">
          <source>Aside from all of the obvious thread-safety and synchronization issues that mutable singletons present... If you have one set of data, that is capable of being read/manipulated by multiple different sources concurrently and exists during the lifetime of the application execution, it's probably a good time to step back and ask &quot;am I using the right type of data structure here&quot;.</source>
          <target state="translated">Помимо всех очевидных проблем,связанных с безопасностью потоков и синхронизацией,которые присутствуют в мутирующих синглонах...Если у вас есть один набор данных,который может быть одновременно обработан несколькими разными источниками и существует в течение жизни приложения,то,вероятно,самое время сделать шаг назад и спросить:&quot;Я использую здесь правильный тип структуры данных&quot;.</target>
        </trans-unit>
        <trans-unit id="8ee7b2ad5b9557585fabb335f68adfc9c9c8c706" translate="yes" xml:space="preserve">
          <source>Because they are basically object oriented global variables, you can usually design your classes in such a way so that you don't need them.</source>
          <target state="translated">Поскольку они в основном являются объектно-ориентированными глобальными переменными,обычно вы можете спроектировать свои классы таким образом,чтобы они вам не понадобились.</target>
        </trans-unit>
        <trans-unit id="937ec02c99912303d347e18aab31deb374647957" translate="yes" xml:space="preserve">
          <source>Classes that depend on singletons are relatively harder to unit test in isolation.</source>
          <target state="translated">Классы,зависящие от синглонов,относительно сложнее тестировать по изоляции.</target>
        </trans-unit>
        <trans-unit id="a380834a96fac726e42e651e3d34770781efcd89" translate="yes" xml:space="preserve">
          <source>Consider the following situation: As a developer, you have to create a web application which accesses a database. To ensure that concurrent database calls do not conflict each other, you create a thread-save &lt;code&gt;SingletonDao&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Рассмотрим следующую ситуацию: Как разработчик, вы должны создать веб-приложение, которое обращается к базе данных. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Чтобы гарантировать, что одновременные вызовы базы данных не конфликтуют друг с другом, вы создаете сохранение потока &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SingletonDao&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9647c9150ba82aa10b72cafd5be139fa2efae5f7" translate="yes" xml:space="preserve">
          <source>During testing and to ensure deterministic behavior, create the singleton class as separate instance as either the actual class itself or a stub/mock that implements its behavior and pass it as is to the class that requires it. Don't use the class factor that creates that object under test that needs the singleton during test as it will pass the single global instance of it, which defeats the purpose.</source>
          <target state="translated">В процессе тестирования и для обеспечения детерминистического поведения создайте класс-одиночку как отдельный экземпляр в виде либо самого класса,либо обходчика,реализующего его поведение и передающего его как есть классу,который его требует.Не используйте фактор класса,создающий тестируемый объект,которому при тестировании нужен синглтон,так как он будет передавать единственный глобальный экземпляр этого класса,что приведет к срыву цели.</target>
        </trans-unit>
        <trans-unit id="eac73a2e89308f7ba46bc74c05f8ca76bc870e71" translate="yes" xml:space="preserve">
          <source>During the runtime of you application, where singletons need to be passed to a given object, use a class factory that builds that object and have the class factory pass the singleton instance to the class that needs it.</source>
          <target state="translated">Во время выполнения вашего приложения,когда синглоны должны быть переданы определенному объекту,используйте завод-изготовитель класса,который собирает этот объект,и заставьте завод-изготовитель класса передать экземпляр синглона тому классу,которому он нужен.</target>
        </trans-unit>
        <trans-unit id="45bcf685d367a300d4d434185e87272e3868f1d0" translate="yes" xml:space="preserve">
          <source>Everyone talks about Singleton's as globals, because they basically are. However, much (sadly, not all) of the badness in a global comes not intrinsically from being global, but how you use it. Same goes for Singletons. Actually more so as &quot;single instance&quot; really doesn't need to mean &quot;globally accessible&quot;. It is more a natural byproduct, and given all the bad that we know comes from it, we shouldn't be in such a hurry to exploit global accessibility. Once programmers see a Singleton they seem to always access it directly through its instance method. Instead, you should navigate to it just like you would any other object. Most code shouldn't even be aware it is dealing with a Singleton (loose coupling, right?). If only a small bit of code accesses the object like it is a global, a lot of harm is undone. I recommend enforcing it by restricting access to the instance function.</source>
          <target state="translated">Все говорят о &quot;Синглтоне&quot; как о шарлатанах,потому что они в основном такие.Однако многое (к сожалению,не все)из плохого в мире исходит не от того,что он является глобальным,а от того,как вы его используете.То же самое касается и синглетонов.На самом деле,в большей степени,так как &quot;единичный экземпляр&quot; на самом деле не обязательно означает &quot;глобально доступный&quot;.Это скорее естественный побочный продукт,и,учитывая,что все плохое,что мы знаем,исходит от него,мы не должны так торопиться использовать глобальную доступность.Как только программисты видят Singleton,они,кажется,всегда получают доступ к нему напрямую через его экземпляр.Вместо этого,к нему следует переходить так же,как к любому другому объекту.Большинство кода даже не должно знать,что он имеет дело с одиночкой (свободная связь,верно?).Если только небольшой кусочек кода обращается к объекту так,как будто он глобальный,то большой вред отменяется.Я рекомендую применять его путем ограничения доступа к функции экземпляра.</target>
        </trans-unit>
        <trans-unit id="0aea5f06b0db6f7157edd5c4c141c78e70171cc9" translate="yes" xml:space="preserve">
          <source>Everything is fine so far.</source>
          <target state="translated">Пока все в порядке.</target>
        </trans-unit>
        <trans-unit id="c2c8d187b56d34de5700469c278c253a4efb35dc" translate="yes" xml:space="preserve">
          <source>FWIW, if it a PIA when you try to unit test it then it's going to PIA when you try to debug, bug fix or enhance it.</source>
          <target state="translated">FWIW,если это PIA при попытке юнит-тестирования,то при попытке отладки,исправления ошибок или усовершенствования она переходит в PIA.</target>
        </trans-unit>
        <trans-unit id="03c69b7e7f3a328ec62260ac5b83e4208fc9daa7" translate="yes" xml:space="preserve">
          <source>Firstly a class and its collaborators should firstly perform their intended purpose rather than focusing on deoendents. Lifecycle management (when instances are creared snd when they go out of scope) should not be part of the cladses responsibility. The accepted best practice for this is to craft or configure a new component to manage dependencies using dependency injection.</source>
          <target state="translated">Прежде всего,класс и его сотрудники должны в первую очередь выполнять свое предназначение,а не фокусироваться на деоцендентах.Управление жизненным циклом (когда случаи творческой деятельности выходят за рамки)не должно быть частью ответственности кланов.Лучшей практикой для этого является создание или настройка нового компонента для управления зависимостями с помощью инъекции зависимостей.</target>
        </trans-unit>
        <trans-unit id="f806d6e7027975cfa32f2da9b819f89561ed7538" translate="yes" xml:space="preserve">
          <source>From a pratical point of view, &lt;strong&gt;a singleton is a trade-off developing time vs complexity&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;С практической точки зрения, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;синглтон - это компромисс между временем разработки и сложностью&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7e4ebfb74a941702ad7c541653b7cf63d07cfd67" translate="yes" xml:space="preserve">
          <source>Global access is not otherwise provided for</source>
          <target state="translated">Глобальный доступ не предусмотрен для</target>
        </trans-unit>
        <trans-unit id="0791848a4b5d984612e8fff52eab6e825186b998" translate="yes" xml:space="preserve">
          <source>Global is bad because:</source>
          <target state="translated">Глобал-это плохо,потому что</target>
        </trans-unit>
        <trans-unit id="a8f72bd9a9edbfe0b449bc6c4a04ae6281432fa1" translate="yes" xml:space="preserve">
          <source>GoF Singletons in opposite to IoC Singletons are supposed to expose &quot;singletonity&quot; in the interface through getInstance() method, and so that they suffer from everything said above.</source>
          <target state="translated">GoF Singletons в противоположность IoC Singletons должны выставлять &quot;одиночество&quot; в интерфейсе с помощью метода getInstance(),и таким образом они страдают от всего,что было сказано выше.</target>
        </trans-unit>
        <trans-unit id="2f78eafa156d6302e52dc35c57960b25dc9c1d2b" translate="yes" xml:space="preserve">
          <source>Here is one more thing about singletons which nobody said yet.</source>
          <target state="translated">Вот еще кое-что о синглонах,о которых еще никто не говорил.</target>
        </trans-unit>
        <trans-unit id="72f2af37f60d95ea1ed5c8a2e82b0cba6c9da498" translate="yes" xml:space="preserve">
          <source>However, there are &quot;application scope services&quot; (think about a messaging system that makes components interact) - this CALLS for a singleton, a &quot;MessageQueue&quot; - class that has a method &quot;SendMessage(...)&quot;.</source>
          <target state="translated">Однако,существуют &quot;сервисы области применения&quot; (подумайте о системе обмена сообщениями,которая заставляет компоненты взаимодействовать)-это CALLS для одиночной кнопки,&quot;MessageQueue&quot;-класс,который имеет метод &quot;SendMessage(...)&quot;.</target>
        </trans-unit>
        <trans-unit id="b07296f711652fac02f0fab15864ed43fdad4def" translate="yes" xml:space="preserve">
          <source>I believe the backlash is due to its overuse which, in turn, is due to the fact that it's the easiest pattern to understand and implement.</source>
          <target state="translated">Я считаю,что зазор обусловлен его чрезмерным использованием,что,в свою очередь,связано с тем,что это самая простая закономерность,которую можно понять и реализовать.</target>
        </trans-unit>
        <trans-unit id="d547e25d316e8eb86b74c45c720d779a57572804" translate="yes" xml:space="preserve">
          <source>I believe this sort of pattern is called &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt; and is generally considered a good thing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я полагаю, что этот тип паттерна называется &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;внедрением зависимостей&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и обычно считается хорошей вещью.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29f3a8be4925f9bbf7c6e50d2f3ca550171d47d4" translate="yes" xml:space="preserve">
          <source>I now prefer to design around an &lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;inversion of control&lt;/a&gt; (IoC) container and allow the the lifetimes to be controlled by the container. This gives you the benefit of the classes that depend on the instance to be unaware of the fact that there is a single instance. The lifetime of the singleton can be changed in the future. Once such example I encountered recently was an easy adjustment from single threaded to multi-threaded.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Теперь я предпочитаю проектировать &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;контейнер &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;с &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;инверсией управления&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (IoC) и позволять контейнеру контролировать время жизни. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это дает вам преимущество классов, которые зависят от экземпляра, чтобы не знать о том, что существует один экземпляр. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Время жизни синглтона может быть изменено в будущем. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Однажды с таким примером, с которым я недавно столкнулся, была простая настройка от однопоточного к многопоточному.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dfa4071ddcee15c06454d19f5b9208a7488963bb" translate="yes" xml:space="preserve">
          <source>I think the confusion is caused by the fact that people don't know the real application of the Singleton pattern. I can't stress this enough. Singleton is &lt;strong&gt;not&lt;/strong&gt; a pattern to wrap globals. Singleton pattern should only be used to guarantee that &lt;strong&gt;one and only one instance of a given class&lt;/strong&gt; exists during run time.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я думаю, что путаница вызвана тем фактом, что люди не знают реального применения паттерна Синглтона. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я не могу подчеркнуть это достаточно. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Синглтон - это &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;не&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; шаблон для переноса глобалов. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Шаблон Singleton должен использоваться только для гарантии того, что &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;один и только один экземпляр данного класса&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; существует во время выполнения.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83f36ca8c3ae39ba88c4227bcd9107ebd8714e28" translate="yes" xml:space="preserve">
          <source>I'd like to address the 4 points in the accepted answer, hopefully someone can explain why I'm wrong.</source>
          <target state="translated">Я бы хотел обратиться к 4 пунктам в принятом ответе,надеюсь,кто-нибудь сможет объяснить,почему я ошибаюсь.</target>
        </trans-unit>
        <trans-unit id="480115f4bdecc954d3ef342b5b307329636f1cf6" translate="yes" xml:space="preserve">
          <source>I'm not going to comment on the good/evil argument, but I haven't used them since &lt;a href=&quot;http://en.wikipedia.org/wiki/Spring_Framework&quot;&gt;Spring&lt;/a&gt; came along. Using &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt; has pretty much removed my requirements for singleton, servicelocators and factories. I find this a much more productive and clean environment, at least for the type of work I do (Java-based web applications).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я не собираюсь комментировать доводы добра / зла, но я не использовал их с тех пор, как &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;пришла &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Spring_Framework&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;весна&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Использование &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;внедрения зависимостей в&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; значительной степени сняло мои требования к синглтону, сервис-локаторам и фабрикам. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я считаю, что это гораздо более продуктивная и чистая среда, по крайней мере, для того типа работы, которую я выполняю (веб-приложения на основе Java).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b8f5ab505b9909495273b2e2d51e1a90612cf41" translate="yes" xml:space="preserve">
          <source>If ownership of the single instance, when and how initialization occurs, and global access are not issues, Singleton is not sufficiently interesting.</source>
          <target state="translated">Если владение единым экземпляром,когда и каким образом происходит инициализация,а также глобальный доступ не являются проблемами,то &quot;Одноэлемент&quot; не представляет достаточного интереса.</target>
        </trans-unit>
        <trans-unit id="06cbcc38cd7b375e6eb3143e88b5e310d19f2f21" translate="yes" xml:space="preserve">
          <source>If you avoid those mistakes, Singletons can still be a PITA, bit it is ready to see a lot of the worst problems are significantly mitigated. Imagine a Java Singleton, that is explicitly defined as once per classloader (which means it needs a thread safety policy), with defined creation and destruction methods and a life cycle that dictates when and how they get invoked, and whose &quot;instance&quot; method has package protection so it is generally accessed through other, non-global objects. Still a potential source of trouble, but certainly much less trouble.</source>
          <target state="translated">Если вы избегаете этих ошибок,синглеты все еще могут быть PITA,бит он готов увидеть,что многие из худших проблем значительно смягчаются.Представьте себе Java Singleton,который явно определен как однократно для каждого класса загрузчика (что означает,что ему нужна политика безопасности потока),с определенными методами создания и уничтожения и жизненным циклом,который диктует,когда и как они вызываются,и чей &quot;экземпляр&quot; метода имеет пакетную защиту,так что доступ к нему,как правило,осуществляется через другие,неглобальные объекты.По-прежнему является потенциальным источником неприятностей,но,безусловно,гораздо меньших.</target>
        </trans-unit>
        <trans-unit id="3a1237cb413fdb4c46831101c6617de6e2895e61" translate="yes" xml:space="preserve">
          <source>If you have some resource that</source>
          <target state="translated">Если у вас есть какой-то ресурс,который</target>
        </trans-unit>
        <trans-unit id="5aa9787a4fcf5e46b59e52938d4c6b3343093698" translate="yes" xml:space="preserve">
          <source>If you know your application won't change that much they are pretty OK to go with. Just know that you may need to refactor things up if your requirements change in an unexpected way (which is pretty OK in most cases).</source>
          <target state="translated">Если вы знаете,что ваше заявление не так уж сильно изменится,то они вполне подойдут.Просто знайте,что вам может понадобиться рефакторинг,если ваши требования изменятся неожиданным образом (что довольно нормально в большинстве случаев).</target>
        </trans-unit>
        <trans-unit id="28522cf8f3941ff8eed8d87379a03a7891c58392" translate="yes" xml:space="preserve">
          <source>If you're passing an object through 10 functions in a call stack just to avoid a singleton, is that so great?</source>
          <target state="translated">Если вы передаете объект через 10 функций в стеке вызовов только для того,чтобы избежать одиночной кнопки,разве это так здорово?</target>
        </trans-unit>
        <trans-unit id="a1b6572af45baab99438b33d0afceb089e21a8ae" translate="yes" xml:space="preserve">
          <source>In a &lt;a href=&quot;https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29&quot;&gt;garbage collected&lt;/a&gt; environment singletons can quickly become an issue with regard to memory management.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В среде &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;сборки мусора&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; синглтоны могут быстро стать проблемой в отношении управления памятью.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="557c214439df24b6d9a6e6fb3a93c9584d0cf0e3" translate="yes" xml:space="preserve">
          <source>In most cases &quot;singletonity&quot; is a detail of implementation for some class rather than characteristic of its interface. Inversion of Control Container may hide this characteristic from class users; you just need to mark your class as a singleton (with &lt;code&gt;@Singleton&lt;/code&gt; annotation in Java for example) and that's it; IoCC will do the rest. You don't need to provide global access to your singleton instance because the access is already managed by IoCC. Thus there is nothing wrong with IoC Singletons.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В большинстве случаев &amp;laquo;синглтонность&amp;raquo; - это деталь реализации некоторого класса, а не характеристика его интерфейса. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Обращение Контейнер Контроля может скрыть эту характеристику от пользователей класса; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;вам просто нужно пометить ваш класс как одиночный (например, с &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;аннотацией &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Singleton&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в Java) и все; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoCC сделает все остальное. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вам не нужно предоставлять глобальный доступ к вашему экземпляру синглтона, потому что доступ уже управляется IoCC. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Таким образом, в IoC Singletons нет ничего плохого.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3adb08488e419152c707b1fe00f30e55841e099" translate="yes" xml:space="preserve">
          <source>In practice the &lt;em&gt;Singleton&lt;/em&gt; pattern is just a programming technique that is a useful part of your toolkit of concepts. From time to time you might find it is the ideal solution and so use it. But using it just so you can boast about using a &lt;em&gt;design pattern&lt;/em&gt; is just as stupid as refusing to ever use it because it is just a &lt;em&gt;global&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;На практике &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;шаблон &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singleton&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - это просто метод программирования, который является полезной частью вашего набора концепций. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Время от времени вы можете обнаружить, что это идеальное решение, и поэтому используйте его. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Но использовать его просто так, чтобы вы могли похвастаться использованием &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;шаблона проектирования,&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; так же глупо, как и отказываться от его использования, потому что он просто &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;глобальный&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="175eb0b638a248bbeee6c8c6d26cdf7f0bb9fb17" translate="yes" xml:space="preserve">
          <source>In the last statement he's referring to the blog's concept of 'singletons are liars'.</source>
          <target state="translated">В последнем заявлении он ссылается на концепцию блога &quot;синглоны-лжецы&quot;.</target>
        </trans-unit>
        <trans-unit id="82447f21debdc151d1cac2b4db16313ffdc010f5" translate="yes" xml:space="preserve">
          <source>It is also considered an anti-pattern by some people, who feel that it is overly used, introducing unnecessary limitations in situations where a sole instance of a class is not actually required.[1][2][3][4]</source>
          <target state="translated">Он также считается анти-макеткой некоторыми людьми,которые считают,что он чрезмерно используется,вводя ненужные ограничения в ситуациях,когда на самом деле не требуется единственный экземпляр класса.[1][2][3][4].</target>
        </trans-unit>
        <trans-unit id="4b4cbb456545aecd6262079cc8061bb243412865" translate="yes" xml:space="preserve">
          <source>It is easily (ab)used as a global variable.</source>
          <target state="translated">Она легко (ab)используется в качестве глобальной переменной.</target>
        </trans-unit>
        <trans-unit id="faa6d5d204dc7dbc91d17f723a964f011cefcf2c" translate="yes" xml:space="preserve">
          <source>It's not that singletons themselves are bad but the GoF design pattern is. The only really argument that is valid is that the GoF design pattern doesn't lend itself in regards to testing, especially if tests are run in parallel.</source>
          <target state="translated">Дело не в том,что сами синглоны плохие,а в том,что дизайнерский шаблон GoF плохой.Единственный действительно весомый аргумент-это то,что шаблон проектирования GoF не поддается тестированию,особенно если тесты выполняются параллельно.</target>
        </trans-unit>
        <trans-unit id="83b20cebddd201ff984745ea240973a2c8a8348d" translate="yes" xml:space="preserve">
          <source>It's rare that you need a singleton. The reason they're bad is that they feel like a &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global&lt;/a&gt; and they're a fully paid up member of the GoF &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;Design Patterns&lt;/a&gt;&lt;/em&gt; book.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это редко, что вам нужен синглтон. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Причина, по которой они плохие, заключается в том, что они чувствуют себя &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;глобальными&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и являются полностью оплаченным членом книги &amp;laquo; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Образцы дизайна&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; GoF &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;raquo;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="462d96d6490ecf7f21c7d082c3a673c2571d2b5d" translate="yes" xml:space="preserve">
          <source>Lazy initialization is desirable</source>
          <target state="translated">желательна ленивая инициализация</target>
        </trans-unit>
        <trans-unit id="2a3024554beb09837fba1b03b0332e6065ffafd1" translate="yes" xml:space="preserve">
          <source>Like any pattern though... Think about it and consider if its use in the given situation is inappropriate or not... Rules are made to be broken usually, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;patterns&lt;/a&gt; should not be applied willy nilly without thought.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Как и в случае с любым другим шаблоном ... Подумайте об этом и подумайте, является ли его использование в данной ситуации неуместным или нет ... Правила обычно нарушаются, и &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;шаблоны&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не должны применяться произвольно, не задумываясь.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="73f9ccfc3d9b951a95cf8d8c870ebe0d33f5c1e5" translate="yes" xml:space="preserve">
          <source>Make sure that the Singleton is thread-safe.  That's a given.</source>
          <target state="translated">Убедитесь в том,что синглтон надежно закреплен на резьбе.Это данность.</target>
        </trans-unit>
        <trans-unit id="99db60c95b1b127007a4512df8fd7cb4dcab18fb" translate="yes" xml:space="preserve">
          <source>Make sure the class that will be used as a singleton implements an interface. This allows stubs or mocks to be implemented using the same interface</source>
          <target state="translated">Убедитесь,что класс,который будет использоваться в качестве одиночной кнопки,реализует интерфейс.Это позволяет реализовать шлейфы или имитации,используя один и тот же интерфейс.</target>
        </trans-unit>
        <trans-unit id="906d44ceac744e478b26c3dbfd73fea4bc065db7" translate="yes" xml:space="preserve">
          <source>MessageQueue.Current.RegisterReceiver(this);</source>
          <target state="translated">MessageQueue.Current.RegisterReceiver(this);</target>
        </trans-unit>
        <trans-unit id="e2f175accfe9e7aa85d6a7640719330d57950fde" translate="yes" xml:space="preserve">
          <source>MessageQueue.Current.SendMessage(new MailArrivedMessage(...));</source>
          <target state="translated">MessageQueue.Current.SendMessage(new MailArrivedMessage(...));</target>
        </trans-unit>
        <trans-unit id="e8f815cd223912c6028928f4b3ad623f1bd5368f" translate="yes" xml:space="preserve">
          <source>Misko Hevery, from Google, has some interesting articles on exactly this topic...</source>
          <target state="translated">У Misko Hevery,из Google,есть несколько интересных статей именно на эту тему...</target>
        </trans-unit>
        <trans-unit id="aee4bcdfd19cd56b5aca74568fc7d31720489ef4" translate="yes" xml:space="preserve">
          <source>My answer on how Singletons are bad is always, &quot;they are hard to do right&quot;. Many of the foundational components of languages are singletons (classes, functions, namespaces and even operators), as are components in other aspects of computing (localhost, default route, virtual filesystem, etc.), and it is not by accident. While they cause trouble and frustration from time to time, they also can make a lot of things work a LOT better.</source>
          <target state="translated">Мой ответ на вопрос о том,насколько плохи синглеты,всегда звучит так:&quot;их трудно сделать правильно&quot;.Многие основополагающие компоненты языков-это синглеты (классы,функции,пространства имен и даже операторы),как и компоненты в других аспектах вычислений (локальный хост,маршрут по умолчанию,виртуальная файловая система и т.д.),и это не случайно.Хотя они время от времени вызывают неприятности и разочарования,они также могут сделать многое из того,что работает LOT лучше.</target>
        </trans-unit>
        <trans-unit id="a53607ed2c21f47236870353aed7c4680124034a" translate="yes" xml:space="preserve">
          <source>No class should be thought of as a singleton but rather that should be an aplication of it's usage or how it is used to configure dependents. For a quick and nasty this does not matter - just luke hardcoding say file paths does not matter but for bigger applications such dependencies need to be factored out and managed in more appropriate way using DI.</source>
          <target state="translated">Ни один класс не должен восприниматься как одноэлементный,а скорее это должно быть облегчением его использования или того,как он используется для настройки зависимостей.Для быстрого и неприятного это не имеет значения-просто,как говорят жесткие кодировки,пути к файлам не имеют значения,но для более крупных приложений такие зависимости должны быть учтены и управляться более подходящим способом с помощью DI.</target>
        </trans-unit>
        <trans-unit id="6c62e40008de69cb522d6cdf069852b3341a3b9d" translate="yes" xml:space="preserve">
          <source>Note: Coding Without Comments is no longer valid.  However, The article being linked to has been cloned by another user.</source>
          <target state="translated">Примечание:Кодирование без комментариев больше не действует.Однако,ссылка на статью была клонирована другим пользователем.</target>
        </trans-unit>
        <trans-unit id="6ee7cdaf99a266962c9e299de0be53abaae53a44" translate="yes" xml:space="preserve">
          <source>Now the game goes from friendly dice-rolling to serious business. Bob has been made the example of failure and Joe and Ed don't want to end up like 'that guy'. So, being the leading player you, all of a sudden, become the enemy. Joe and Ed start practicing under-the-table trades, behind-the-back money injections, undervalued house-swapping and generally anything to weaken you as a player until one of them rises to the top.</source>
          <target state="translated">Теперь игра переходит от товарищеской игры на дичи к серьезному делу.Боб стал примером неудачи,а Джо и Эд не хотят закончить как &quot;тот парень&quot;.Так что,будучи ведущим игроком,ты вдруг становишься врагом.Джо и Эд начинают практиковаться под столом сделок,за спиной денежные вливания,недооцененные замены дома и вообще все,чтобы ослабить вас как игрока,пока один из них не поднимается на вершину.</target>
        </trans-unit>
        <trans-unit id="5a2e70213e768863cad258a0f87428f2c1f107fa" translate="yes" xml:space="preserve">
          <source>Now, consider you want to set up multiple instances of your web application in a cluster. Now, you suddenly have something like this:</source>
          <target state="translated">Теперь рассмотрим,что вы хотите установить несколько экземпляров вашего веб-приложения в кластере.Теперь,у вас внезапно появилось нечто подобное:</target>
        </trans-unit>
        <trans-unit id="d0994fb980677959b214d2c3749362ba6e34a5e3" translate="yes" xml:space="preserve">
          <source>Now, for anybody who hasn't &lt;strong&gt;really&lt;/strong&gt; played monopoly, these standards are ideal at best. A defeat in monopoly is hard to swallow because, monopoly is about money, if you lose you have to painstakingly watch the rest of the players finish the game, and losses are usually swift and crushing. So, the rules usually get twisted at some point to serve the self-interest of some of the players at the expense of the others.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Теперь для тех, кто на &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;самом деле&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;играл монополию, эти стандарты в лучшем случае идеальны. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Трудно проглотить поражение в монополии, потому что монополия - это деньги, если вы проигрываете, вы должны тщательно следить за тем, как остальные игроки заканчивают игру, а потери обычно бывают быстрыми и сокрушительными. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Таким образом, правила обычно изменяются в какой-то момент, чтобы служить личным интересам некоторых игроков за счет других.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8251537426b4a38c0fda5146bbbfce04abd246d3" translate="yes" xml:space="preserve">
          <source>Of course this is an example of a bad usage of a singleton. But the message of this example is: You can not rely that there is exactly one instance of a singleton in your application - especially when it comes to clustering.</source>
          <target state="translated">Конечно,это пример плохого использования одиночки.Но суть этого примера в том:Вы не можете полагаться на то,что в вашем приложении есть ровно один экземпляр одиночной кнопки-особенно,когда речь идет о кластеризации.</target>
        </trans-unit>
        <trans-unit id="12da2eb229cab6f3f45bf52f45d05c18b7744c03" translate="yes" xml:space="preserve">
          <source>Often software gets more complicated it makes sense to have multiple independent instances of the Singleton class with different state. Committing code to simply grab the singleton is wrong in such cases. Using &lt;code&gt;Singleton.getInstance()&lt;/code&gt; might be ok for small simple systems but it doesn't work/scale when one might need a different instance of the same class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Часто программное обеспечение усложняется, имеет смысл иметь несколько независимых экземпляров класса Singleton с различным состоянием. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В таких случаях использование кода для простого захвата синглтона является неправильным. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Использование &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Singleton.getInstance()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; может подойти для небольших простых систем, но оно не работает / не масштабируется, когда может потребоваться другой экземпляр того же класса.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="59b9e2cf09e0aebb2a5206089741000b279a7b53" translate="yes" xml:space="preserve">
          <source>One rather bad thing about singletons is that you can't extend them very easily. You basically have to build in some kind of &lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;decorator pattern&lt;/a&gt; or some such thing if you want to change their behavior. Also, if one day you want to have multiple ways of doing that one thing, it can be rather painful to change, depending on how you lay out your code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В синглетах очень плохо то, что вы не можете легко их расширять. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;По сути, вам нужно встроить какой-нибудь &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;шаблон декоратора&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; или что-то подобное, если вы хотите изменить их поведение. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Кроме того, если однажды вы захотите иметь несколько способов сделать это одно, это может быть довольно болезненным, в зависимости от того, как вы выложили свой код.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce175dbf29b8e8c973f5eaab4951c1d4efea6362" translate="yes" xml:space="preserve">
          <source>One thing to note, if you DO use singletons, try to pass them in to whoever needs them rather than have them access it directly... Otherwise if you ever choose to have multiple ways of doing the thing that singleton does, it will be rather difficult to change as each class embeds a dependency if it accesses the singleton directly.</source>
          <target state="translated">Следует отметить одну вещь:если вы используете синглоны,попробуйте передать их тому,кто в них нуждается,а не иметь к ним прямой доступ...Иначе,если вы когда-нибудь выберете несколько способов делать то,что делает синглтон,будет довольно трудно изменить,так как каждый класс встраивает зависимость,если он обращается к синглтону напрямую.</target>
        </trans-unit>
        <trans-unit id="b46465a6d50ce5de3f512c57fbb175a4dfef1083" translate="yes" xml:space="preserve">
          <source>Ownership of the single instance cannot be reasonably assigned</source>
          <target state="translated">Право собственности на одну инстанцию не может быть обоснованно присвоено</target>
        </trans-unit>
        <trans-unit id="715eaba002359c1f45ac2b34e6e9e70374fe8629" translate="yes" xml:space="preserve">
          <source>Paraphrased from Brian Button:</source>
          <target state="translated">Перефразировано из Брайана Баттона:</target>
        </trans-unit>
        <trans-unit id="1252eeb8091f8d534d0de0657525d9e409460566" translate="yes" xml:space="preserve">
          <source>People think Singleton is evil because they are using it for globals. It is because of this confusion that Singleton is looked down upon. Please, don't confuse Singletons and globals. If used for the purpose it was intended for, you will gain extreme benefits from the Singleton pattern.</source>
          <target state="translated">Люди думают,что Синглтон-это зло,потому что они используют его для шаров.Именно из-за этой путаницы на Синглтона смотрят свысока.Пожалуйста,не путайте синглетов и шаров.Если использовать его для той цели,для которой он предназначался,вы получите огромные преимущества от узора &quot;Синглтон&quot;.</target>
        </trans-unit>
        <trans-unit id="4488e947e889410b9a191f1d7b72296670a169df" translate="yes" xml:space="preserve">
          <source>Personally, I have seen a programmer abuse a singleton by using it as some sort of twisted cross-thread database store within an application. Having worked on the code directly, I can attest that it was a slow (because of all the thread locks needed to make it thread-safe) and a nightmare to work on (because of the unpredictable/intermittent nature of synchronization bugs), and nearly impossible to test under 'production' conditions. Sure, a system could have been developed using polling/signaling to overcome some of the performance issues but that wouldn't solve the issues with testing and, why bother when a 'real' database can already accomplish the same functionality in a much more robust/scalable manner.</source>
          <target state="translated">Лично я видел,как программист злоупотреблял одиночкой,используя ее как какой-то витой магазин кросс-поточных баз данных внутри приложения.Работая непосредственно над кодом,я могу подтвердить,что он был медленным (из-за всех нитевых блокировок,необходимых для обеспечения потоковой безопасности)и кошмаром для работы над ним (из-за непредсказуемости ошибок синхронизации),и практически невозможен для тестирования в условиях &quot;производства&quot;.Конечно,система могла бы быть разработана с использованием опросной сигнализации для преодоления некоторых проблем с производительностью,но это не решило бы проблем с тестированием и,зачем беспокоиться,когда &quot;реальная&quot; база данных уже может выполнять ту же самую функциональность гораздо более роботизированным способом.</target>
        </trans-unit>
        <trans-unit id="91f89d4db256dc247d870f9462f9bc0c69cb74b5" translate="yes" xml:space="preserve">
          <source>Please support your answers with &quot;&lt;em&gt;facts, references, or specific expertise&lt;/em&gt;&quot;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Пожалуйста, поддержите ваши ответы &quot; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;фактами, ссылками или конкретными знаниями&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="57c71d6ec57b7a7097898abfe53ac93d158a60a4" translate="yes" xml:space="preserve">
          <source>Rather than using singletons, you should pass all the needed utility objects from function to function. That can be simplified if you wrap all them into a helper object, like this:</source>
          <target state="translated">Вместо того,чтобы использовать синглоны,необходимо передать все необходимые объекты утилиты из функции в функцию.Это можно упростить,если обернуть их все в вспомогательный объект,подобный этому:</target>
        </trans-unit>
        <trans-unit id="e244aca5c6e08cefb560ff05106c72a053cfd258" translate="yes" xml:space="preserve">
          <source>Recent article on this subject by Chris Reath at &lt;a href=&quot;http://www.codingwithoutcomments.com/&quot;&gt;Coding Without Comments&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Недавняя статья на эту тему Криса Рита в &amp;laquo; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.codingwithoutcomments.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Кодировании без комментариев&amp;raquo;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aad46f2b1a8beb2238db459eb8a7984bc88e9ac7" translate="yes" xml:space="preserve">
          <source>References (only relevant references from the article)</source>
          <target state="translated">Ссылки (только соответствующие ссылки из статьи)</target>
        </trans-unit>
        <trans-unit id="52f59ac0b8d614ab6b3b23685d4c5ee578e87153" translate="yes" xml:space="preserve">
          <source>Regarding unit tests:</source>
          <target state="translated">Что касается единичных тестов:</target>
        </trans-unit>
        <trans-unit id="030d697ac3114fa5e0f1fd803ceabd44c98c1ff2" translate="yes" xml:space="preserve">
          <source>Sadly, rather than teaching good examples of how to do Singletons. We teach bad examples, let programmers run off using them for a while, and then tell them they are a bad design pattern.</source>
          <target state="translated">К сожалению,вместо того,чтобы преподавать хорошие примеры того,как делать синглеты.Мы учим плохим примерам,пусть программисты какое-то время бегают по ним,а потом говорят,что это плохой шаблон проектирования.</target>
        </trans-unit>
        <trans-unit id="e0aa79b2c282a159104c446619a487d9dd85bee2" translate="yes" xml:space="preserve">
          <source>See Wikipedia Singleton_pattern</source>
          <target state="translated">См.раздел Википедия Одноэлементный_узор</target>
        </trans-unit>
        <trans-unit id="d433b5c0fbdc7c1d72fe35c9443488ae8c3ee54e" translate="yes" xml:space="preserve">
          <source>Single Responsibility Principle: I think this is a bit vague and depends on your definition of responsibility. A relevant question would be, why does adding this &lt;em&gt;specific&lt;/em&gt; &quot;responsibility&quot; to a class matter?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Принцип единой ответственности: я думаю, что это немного расплывчато и зависит от вашего определения ответственности. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Уместным будет вопрос, почему добавление этой &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;конкретной&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;laquo;ответственности&amp;raquo; к классу имеет значение?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="26ed3cf8e352b5e7d2bf4aa5387c599ce82c10d1" translate="yes" xml:space="preserve">
          <source>Singleton is a pattern and can be used or abused just like any other tool.</source>
          <target state="translated">Одиночная кнопка-это шаблон,который можно использовать или злоупотреблять так же,как и любой другой инструмент.</target>
        </trans-unit>
        <trans-unit id="4b9b5722cbaf5d7c5ad21d8e14a4714334867513" translate="yes" xml:space="preserve">
          <source>Singleton is not about single instance!</source>
          <target state="translated">Одиночка-это не единственный экземпляр!</target>
        </trans-unit>
        <trans-unit id="f2e14fa8aa12ee4d53b03570c0e52377418420bf" translate="yes" xml:space="preserve">
          <source>Singleton should be considered only if all three of the following criteria are satisfied:</source>
          <target state="translated">Одиночка должна рассматриваться только в том случае,если соблюдены все три из нижеследующих критериев:</target>
        </trans-unit>
        <trans-unit id="f03a7ee73d533121d4ef48caf72e5289060b733f" translate="yes" xml:space="preserve">
          <source>Singletons &lt;em&gt;aren't&lt;/em&gt; evil, if you use it &lt;em&gt;properly&lt;/em&gt; &amp;amp; &lt;em&gt;minimally&lt;/em&gt;. There are lot of other good design patterns which replaces the needs of singleton at some point (&amp;amp; also gives best results). But some programmers are unaware of those good patterns &amp;amp; uses the singleton for all the cases which makes the singleton evil for them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Одиночки &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;не являются&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; злом, если вы используете их &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;правильно&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;минимально&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Есть много других хороших шаблонов проектирования, которые в какой-то момент заменяют потребности в синглтоне (и также дают лучшие результаты). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Но некоторые программисты не знают об этих хороших шаблонах и используют синглтон для всех случаев, что делает синглтон злом для них.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4fd184f94d2ce9383e49a02b30f6641ff78181bb" translate="yes" xml:space="preserve">
          <source>Singletons are NOT bad. It's only bad when you make something globally unique that isn't globally unique.</source>
          <target state="translated">Однополые-это НЕ плохо.Это плохо только тогда,когда ты делаешь что-то глобально уникальное,что не глобально уникально.</target>
        </trans-unit>
        <trans-unit id="b71ec8c276a2e03ed961206cd36c64bf09b91a25" translate="yes" xml:space="preserve">
          <source>Singletons are also a problem from a testing perspective. They tend to make isolated unit-tests difficult to write. &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;Inversion of control&lt;/a&gt;&lt;/strong&gt; (IoC) and &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt;&lt;/strong&gt; are patterns meant to overcome this problem in an object-oriented manner that lends itself to unit testing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Синглтоны также являются проблемой с точки зрения тестирования. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Они обычно затрудняют написание отдельных юнит-тестов. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Инверсия управления&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (IoC) и &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;внедрение зависимостей&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - это шаблоны, предназначенные для решения этой проблемы объектно-ориентированным способом, который поддается модульному тестированию.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="22357d29daa92c763bcdd62993b84e9e2aa5bd87" translate="yes" xml:space="preserve">
          <source>Singletons are also bad when it comes to &lt;strong&gt;clustering&lt;/strong&gt;. Because then, you do not have &quot;exactly one singleton&quot; in your application anymore.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Синглтоны также плохи, когда речь идет о &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;кластеризации&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Потому что в вашем приложении больше нет &amp;laquo;ровно одного синглтона&amp;raquo;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="55a8b300eb18ba098facc7e6694024b774c6eac8" translate="yes" xml:space="preserve">
          <source>Singletons are bad from a purist point of view.</source>
          <target state="translated">С пуристической точки зрения,синглеты-это плохо.</target>
        </trans-unit>
        <trans-unit id="6571a82538f52d979f2b5e1853bbedb03b9ee0b8" translate="yes" xml:space="preserve">
          <source>Singletons are nothing more than global state. Global state makes it so your objects can secretly get hold of things which are not declared in their APIs, and, as a result, Singletons make your APIs into pathological liars.</source>
          <target state="translated">Однополые-это не более чем глобальное государство.Глобальное состояние делает его таким,что ваши объекты могут тайно заполучить вещи,которые не объявлены в их API,и,в результате,сингелеты превращают ваши API в патологических лжецов.</target>
        </trans-unit>
        <trans-unit id="3865fa07f2a264ee1aa7be8afa2532f27d7a83de" translate="yes" xml:space="preserve">
          <source>Singletons make it very hard to move from them to regular objects.</source>
          <target state="translated">Синглетоны очень сильно затрудняют переход от них к обычным предметам.</target>
        </trans-unit>
        <trans-unit id="1a9fa24bd062fcce6fa98e671274d898304f4930" translate="yes" xml:space="preserve">
          <source>Singletons solve one (and only one) problem.</source>
          <target state="translated">Синглетоны решают одну (и только одну)проблему.</target>
        </trans-unit>
        <trans-unit id="9a182b1859f9fcbfb5d6f4df6317aa60d8f6db05" translate="yes" xml:space="preserve">
          <source>Singletons sometimes also complicate &lt;a href=&quot;https://en.wikipedia.org/wiki/Unit_testing&quot;&gt;unit testing&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Синглтоны иногда также усложняют &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Unit_testing&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;юнит-тестирование&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="358417c2142a15d4609dbb8b247ce7663b733322" translate="yes" xml:space="preserve">
          <source>So basically:</source>
          <target state="translated">Так что,по сути:</target>
        </trans-unit>
        <trans-unit id="f4cf667760b907cb4a40918fa4336dd7f2460150" translate="yes" xml:space="preserve">
          <source>So you are sure that only one singleton in your application exists and all database go through this one and only &lt;code&gt;SingletonDao&lt;/code&gt;. Your production environment now looks like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Таким образом, вы уверены, что в вашем приложении существует только один синглтон, и все базы данных проходят через этот единственный &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SingletonDao&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ваша производственная среда теперь выглядит так:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e6fed6a4edfd3ed86633f28e6a268bd05113200a" translate="yes" xml:space="preserve">
          <source>So you're playing monopoly with friends Bob, Joe, and Ed. You're swiftly building your empire and consuming market share at an exponential rate. Your opponents are weakening and you start to smell blood (figuratively). Your buddy Bob put all of his money into gridlocking as many low-value properties as possible but his isn't receiving a high return on investment the way he expected. Bob, as a stroke of bad luck, lands on your Boardwalk and is excised from the game.</source>
          <target state="translated">Так ты играешь в монополию с друзьями Бобом,Джо и Эдом.Ты быстро строишь свою империю и потребляешь долю рынка в экспоненциальном темпе.Твои оппоненты ослабевают,и ты начинаешь чувствовать запах крови (образно).Ваш приятель Боб вложил все свои деньги в блокировку как можно большего количества недорогих объектов недвижимости,но он не получает высокой отдачи от инвестиций так,как он ожидал.Боб,как удар невезения,приземляется на ваш дощатый настил и вырезается из игры.</target>
        </trans-unit>
        <trans-unit id="668ff333ca3f47ff06a60a3fa60bdab697466e01" translate="yes" xml:space="preserve">
          <source>So, if a rulebook for a game accurately represented a singleton, the monopoly rulebook would be an example of abuse.</source>
          <target state="translated">Таким образом,если бы свод правил для игры точно представлял собой одиночку,то свод правил для монополии был бы примером злоупотребления.</target>
        </trans-unit>
        <trans-unit id="0591c19bd97bf670bf6baa531c0194ef328f8f82" translate="yes" xml:space="preserve">
          <source>Some coding snobs look down on them as just a glorified global. In the same way that many people hate the &lt;em&gt;goto&lt;/em&gt; statement there are others that hate the idea of ever using a &lt;em&gt;global&lt;/em&gt;. I have seen several developers go to extraordinary lengths to avoid a &lt;em&gt;global&lt;/em&gt; because they considered using one as an admission of failure. Strange but true.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Некоторые снобы кодирования смотрят на них свысока как на прославленную глобализацию. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Так же, как многие люди ненавидят утверждение &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;goto, так&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и другие ненавидят идею когда-либо использовать &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;глобальные&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я видел, как несколько разработчиков пошли на экстраординарные меры, чтобы избежать &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;глобального,&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; потому что они рассматривали возможность использования одного из них как допущение отказа. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Удивительно, но факт.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd23f939cf611c71e9dd37ad01d7843f484366f9" translate="yes" xml:space="preserve">
          <source>Stack Overflow especially seems to assume that everyone agrees that Singletons are evil. Why?</source>
          <target state="translated">Переполнение стека особенно похоже на то,что все согласны с тем,что синглеты-это зло.Почему?</target>
        </trans-unit>
        <trans-unit id="789f399c246ebf167b232e3114d18264ff6e67cc" translate="yes" xml:space="preserve">
          <source>That sounds weird, but &lt;strong&gt;now you have many singletons in your application&lt;/strong&gt;. And that is exactly what a singleton is not supposed to be: Having many objects of it. This is especially bad if you, as shown in this example, want to make synchronized calls to a database.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это звучит странно, но &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;теперь в вашем приложении много синглетонов&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;И это именно то, чем не должен быть синглтон: иметь много объектов. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это особенно плохо, если вы, как показано в этом примере, хотите выполнять синхронизированные вызовы в базу данных.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f2475bf5ffeb163ceac957a3d49d6036113fdd88" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;singleton pattern&lt;/a&gt; is a fully paid up member of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;GoF&lt;/a&gt;'s &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201633612&quot;&gt;patterns book&lt;/a&gt;, but it lately seems rather orphaned by the developer world. I still use quite a lot of singletons, especially for &lt;a href=&quot;https://en.wikipedia.org/wiki/Factory_method_pattern&quot;&gt;factory classes&lt;/a&gt;, and while you have to be a bit careful about multithreading issues (like any class actually), I fail to see why they are so awful.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Картина синглтона&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; является полностью оплаченным членом &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;GoF&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;laquo;s &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201633612&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;моделея книги&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , но в &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;последнее время , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;кажется , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;довольно сирот в мире разработчика. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я до сих пор использую довольно много синглетов, особенно для &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Factory_method_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;фабричных классов&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , и, хотя вы должны быть немного осторожны с проблемами многопоточности (как и любой другой класс на самом деле), я не понимаю, почему они такие ужасные.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8cc31c742f2cb350a70f7da3d43015596237acc3" translate="yes" xml:space="preserve">
          <source>The Singleton context is also really important. The defining characteristic of a Singleton is that there is &quot;only one&quot;, but the truth is it is &quot;only one&quot; within some kind of context/namespace. They are usually one of: one per thread, process, IP address or cluster, but can also be one per processor, machine, language namespace/class loader/whatever, subnet, Internet, etc.</source>
          <target state="translated">Контекст Синглтона также очень важен.Определяющей характеристикой синглтона является то,что он &quot;единственный&quot;,но правда в том,что он &quot;единственный&quot; в каком-то пространстве контекстных имён.Обычно это одно из:по одному на поток,процесс,IP-адрес или кластер,но также может быть и одно на процессор,машину,язык namespaceclass loaderwever,подсеть,Интернет и т.д.</target>
        </trans-unit>
        <trans-unit id="835608667d69c55c183b0cef18dafe7f7cbbb7a5" translate="yes" xml:space="preserve">
          <source>The bad part of a singleton is generally the user (or should I say the inappropriate use of a singleton for things it is not designed to do). The biggest offender is using a singleton as a fake global variable.</source>
          <target state="translated">Плохая часть одиночной кнопки-это,как правило,пользователь (или я должен сказать,неправильное использование одиночной кнопки для вещей,для которых она не предназначена).Крупнейший преступник использует одиночку в качестве поддельной глобальной переменной.</target>
        </trans-unit>
        <trans-unit id="7b5cae7f5b6c184980327093d8fb76a94df99840" translate="yes" xml:space="preserve">
          <source>The other, less common, mistake is to ignore the Singleton lifestyle. Just because there is only one doesn't mean a Singleton is some omnipotent &quot;always was and always will be&quot;, nor is it generally desirable (objects without a begin and end violate all kinds of useful assumptions in code, and should be employed only in the most desperate of circumstances.</source>
          <target state="translated">Другая,менее распространенная ошибка-игнорирование образа жизни синглтонов.То,что есть только одно,не означает,что синглтон-это какой-то всемогущий &quot;всегда был и всегда будет&quot;,как и не является в целом желательным (объекты без начала и конца нарушают всевозможные полезные предположения в коде,и должны применяться только в самых отчаянных обстоятельствах.</target>
        </trans-unit>
        <trans-unit id="15878b09a961588056074d3687c3f79453c08e1e" translate="yes" xml:space="preserve">
          <source>The problems that singleton cause in testing is a symptom of their hard coded single usage case/environment. The test suite and the many tests are each individual and separate something that is not compatible with hardcoding a singleton.</source>
          <target state="translated">Проблемы,которые возникают при тестировании с помощью одиночной кнопки,являются симптомом их жестко закодированного одноразового использования.Тестовый набор и многочисленные тесты являются каждым отдельным и отделяют то,что не совместимо с жестким кодированием синглтона.</target>
        </trans-unit>
        <trans-unit id="9833752e81fedcd533363bb0df3d89b4b006c284" translate="yes" xml:space="preserve">
          <source>The problems with singletons is the issue of increased scope and therefore &lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;coupling&lt;/a&gt;. There is no denying that there are some of situations where you do need access to a single instance, and it can be accomplished other ways.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Проблемы с синглетонами - это проблема увеличенного объема и, следовательно, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;связи&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Нельзя отрицать, что в некоторых ситуациях вам нужен доступ к одному экземпляру, и это может быть достигнуто другими способами.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="df4e6e231e99dc52f3bff603e6c0d51c55026c2a" translate="yes" xml:space="preserve">
          <source>The singleton pattern is not a problem in itself. The problem is that the pattern is often used by people developing software with object-oriented tools without having a solid grasp of OO concepts. When singletons are introduced in this context they tend to grow into unmanageable classes that contain helper methods for every little use.</source>
          <target state="translated">Однокнопочный шаблон сам по себе не является проблемой.Проблема заключается в том,что шаблон часто используется людьми,разрабатывающими программное обеспечение с объектно-ориентированными инструментами,не имея четкого понимания концепций ОП.Когда одиночные кнопки вводятся в этом контексте,они,как правило,вырастают в неуправляемые классы,которые содержат вспомогательные методы для каждого небольшого использования.</target>
        </trans-unit>
        <trans-unit id="465df7c70852f19533399cca69e2d76b8e5bf51e" translate="yes" xml:space="preserve">
          <source>The singleton should be simple in nature and not overly complicated.</source>
          <target state="translated">Одиночка должна быть простой по своей природе и не слишком сложной.</target>
        </trans-unit>
        <trans-unit id="d16f8b3beb1ad83c4ab0ac8578a45a586f69fe71" translate="yes" xml:space="preserve">
          <source>The two biggest screw ups I see are: treating it like a global &amp;amp; failing to define the Singleton closure.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Два самых больших провала, которые я вижу, это: относиться к нему как к глобальному и не определить замыкание синглтона.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3c54f8415cbbb0dc73616090c496cddc67a6a2d6" translate="yes" xml:space="preserve">
          <source>Then, instead of one of them winning, the process starts all over. All of a sudden, a finite set of rules becomes a moving target and the game degenerates into the type of social interactions that would make up the foundation of every high-rated reality TV show since Survivor. Why, because the rules are changing and there's no consensus on how/why/what they're supposed to represent, and more importantly, there's no one person making the decisions. Every player in the game, at that point, is making his/her own rules and chaos ensues until two of the players are too tired to keep up the charade and slowly give up.</source>
          <target state="translated">Тогда,вместо того,чтобы один из них выиграл,процесс начинается заново.Внезапно конечный набор правил становится движущейся мишенью,и игра перерастает в тип социальных взаимодействий,которые составили бы основу каждого высокорейтингового реалити-шоу со времен &quot;Выжившего&quot;.Почему,потому что правила меняются,и нет единого мнения о том,что они должны представлять,и,что более важно,нет ни одного человека,принимающего решения.Каждый игрок в игре,в этот момент,устанавливает свои правила,и возникает хаос до тех пор,пока двое из игроков не устанут от шарады и медленно сдадутся.</target>
        </trans-unit>
        <trans-unit id="94f7d2aeef0065cc58a25d8c73e0e4361c409fc9" translate="yes" xml:space="preserve">
          <source>There aren't many examples. A log file is the big one. You don't want to just abandon a single log file. You want to flush, sync and close it properly. This is an example of a single shared resource that has to be managed.</source>
          <target state="translated">Не так уж много примеров.Журнал-это большой файл.Вы же не хотите просто бросить один лог-файл.Ты хочешь смыть,синхронизировать и закрыть его должным образом.Это пример одного общего ресурса,которым нужно управлять.</target>
        </trans-unit>
        <trans-unit id="f1ebb5ebafa456472c719f0e8d8a94135dd4aeb2" translate="yes" xml:space="preserve">
          <source>There is also the multi-threaded scenario where singletons can become a bottleneck as well as a synchronization issue.</source>
          <target state="translated">Существует также многопоточный сценарий,в котором одиночные кнопки могут стать узким местом,а также проблемой синхронизации.</target>
        </trans-unit>
        <trans-unit id="ae8dc1fef3e4bf10c544a55f52796833a6c58b74" translate="yes" xml:space="preserve">
          <source>There is nothing inherently wrong with the pattern, assuming it is being used for some aspect of your model which is truly single.</source>
          <target state="translated">Нет ничего по своей природе неправильного в шаблоне,если предположить,что он используется для какого-то аспекта вашей модели,который действительно является единственным.</target>
        </trans-unit>
        <trans-unit id="623dde36e233f0079e0085137f7deb08030d05b3" translate="yes" xml:space="preserve">
          <source>They are generally used as a global instance, why is that so bad? Because you hide the dependencies of your application in your code, instead of exposing them through the interfaces. Making something global to avoid passing it around is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_smell&quot;&gt;code smell&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Они обычно используются в качестве глобального экземпляра, почему это так плохо? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Потому что вы скрываете зависимости вашего приложения в своем коде, вместо того, чтобы показывать их через интерфейсы. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Создание чего-то глобального, чтобы избежать его распространения - это &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_smell&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;запах кода&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba0e2b9616043f04660dd81d417cf5a73379fae0" translate="yes" xml:space="preserve">
          <source>They carry state around for the lifetime of the application. Another hit to testing since you can end up with a situation where tests need to be ordered which is a big no no for unit tests. Why? Because each unit test should be independent from the other.</source>
          <target state="translated">Они несут в себе состояние на протяжении всего срока службы.Еще одним хитом в тестировании может стать ситуация,когда тесты необходимо заказать,что является большим &quot;нет-нет&quot; для юнит-тестов.Почему? Потому что каждый юнит-тест должен быть независим друг от друга.</target>
        </trans-unit>
        <trans-unit id="0e53548518905c337e4e3cda636d244bba6f2fa4" translate="yes" xml:space="preserve">
          <source>They inherently cause code to be tightly &lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;coupled&lt;/a&gt;. This makes faking them out under test rather difficult in many cases.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Они по своей сути заставляют код быть тесно &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;связанным&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это делает во многих случаях подделку тестируемого материала довольно сложной.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eaf26fcd332b1240c30b63e8f6f491d24eac2db8" translate="yes" xml:space="preserve">
          <source>They violate the &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;single responsibility principle&lt;/a&gt;: by virtue of the fact that they control their own creation and lifecycle.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Они нарушают &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;принцип единственной ответственности&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : в силу того, что они контролируют свое собственное творение и жизненный цикл.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4c954584093770b03e88adcfe2a8a14d6ea33cb0" translate="yes" xml:space="preserve">
          <source>To start a game of monopoly, first:</source>
          <target state="translated">Сначала начать игру в монополию:</target>
        </trans-unit>
        <trans-unit id="ca4d354b99bc24d443677735e54833fae801e272" translate="yes" xml:space="preserve">
          <source>Too many people put objects which are not thread safe in a singleton pattern. I've seen examples of a DataContext (&lt;a href=&quot;http://en.wikipedia.org/wiki/Language_Integrated_Query#LINQ_to_SQL_.28formerly_called_DLINQ.29&quot;&gt;LINQ&amp;nbsp;to&amp;nbsp;SQL&lt;/a&gt;) done in a singleton pattern, despite the fact that the DataContext is not thread safe and is purely a unit-of-work object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Слишком много людей помещают объекты, которые не являются потокобезопасными, в единый шаблон. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я видел примеры DataContext ( &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Language_Integrated_Query#LINQ_to_SQL_.28formerly_called_DLINQ.29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;LINQ to SQL&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), выполненного в одноэлементном шаблоне, несмотря на тот факт, что DataContext не является потокобезопасным и является просто объектом единицы работы.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="398efeaac4bc6e2faa9b4c57d3f5b8a9b52f18bc" translate="yes" xml:space="preserve">
          <source>Unlike other answers I don't want to talk about what is wrong with Singletons but to show you how powerful and awesome they are when used right!</source>
          <target state="translated">В отличие от других ответов,я не хочу говорить о том,что не так с синглетонами,а хочу показать вам,насколько они мощны и удивительны,когда используются правильно!</target>
        </trans-unit>
        <trans-unit id="24fb6a8b55fe7fc6662d5d9a56b3921a911f125a" translate="yes" xml:space="preserve">
          <source>Using a single instance of an class is a valid construct as long as you apply the following means in code:</source>
          <target state="translated">Использование одного экземпляра класса является допустимой конструкцией при условии,что в коде применяются следующие средства:</target>
        </trans-unit>
        <trans-unit id="7963242df7308adc2b3bd139cf37de9402e4f845" translate="yes" xml:space="preserve">
          <source>We've used Singletons in our solutions with a great deal of success that are testable ensuring deterministic behavior in parallel test run streams.</source>
          <target state="translated">Мы использовали синглеты в наших решениях с большим успехом,которые являются тестируемыми,обеспечивая детерминированное поведение в параллельных потоках тестирования.</target>
        </trans-unit>
        <trans-unit id="da1a3cb035699759f4a078c19b9474f88a6e772b" translate="yes" xml:space="preserve">
          <source>What is so bad about singletons</source>
          <target state="translated">Что плохого в синглонах</target>
        </trans-unit>
        <trans-unit id="50f77dcdabdfd3afda084de7fd3d29d5dfae4194" translate="yes" xml:space="preserve">
          <source>When it comes to Singletons</source>
          <target state="translated">Когда речь идет о синглетонах</target>
        </trans-unit>
        <trans-unit id="5c986765347b4b7bcb59761b18cd82e4e10e25e6" translate="yes" xml:space="preserve">
          <source>When you think you need a global, you're probably making a terrible design mistake.</source>
          <target state="translated">Когда ты думаешь,что тебе нужен глобальный,ты,наверное,совершаешь ужасную дизайнерскую ошибку.</target>
        </trans-unit>
        <trans-unit id="4380b88b28be97d636237273ad914637b065daf2" translate="yes" xml:space="preserve">
          <source>When you write code using singletons, say, a logger or a database connection, and afterwards you discover you need more than one log or more than one database, you&amp;rsquo;re in trouble.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Когда вы пишете код, используя синглтоны, скажем, регистратор или соединение с базой данных, и впоследствии обнаруживаете, что вам нужно более одного журнала или несколько баз данных, у вас возникают проблемы.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c2df5f04ca68555136da5ed4bf5bd73a7b744b5f" translate="yes" xml:space="preserve">
          <source>Why does it change how long the state lasts? Singletons can be created or destroyed manually, so the control is still there, and you can make the lifetime the same as a non-singleton object's lifetime would be.</source>
          <target state="translated">Почему это меняет то,как долго длится государство? Одиночки могут быть созданы или уничтожены вручную,так что контроль остается на месте,и вы можете сделать жизнь таким же,каким была бы жизнь не одиночного объекта.</target>
        </trans-unit>
        <trans-unit id="801e82bda5401c9fc10a0749304f4d28624f7eec" translate="yes" xml:space="preserve">
          <source>Why does passing an object to a class make it more tightly coupled than using that object as a singleton from within the class?</source>
          <target state="translated">Почему передача объекта классу делает его более тесно связанным,чем использование этого объекта в качестве одиночки внутри класса?</target>
        </trans-unit>
        <trans-unit id="a081d3ea69b57f4be3e26dd0623ed07dbee9e870" translate="yes" xml:space="preserve">
          <source>Why is hiding dependencies in your code bad? There are already dozens of hidden dependencies (C runtime calls, OS API calls, global function calls), and singleton dependencies are easy to find (search for instance()).</source>
          <target state="translated">Почему скрывать зависимости в вашем коде плохо? Уже есть десятки скрытых зависимостей (вызовы среды исполнения C,вызовы OS API,вызовы глобальных функций),а однокнопочные зависимости легко найти (поиск например,с помощью функции()).</target>
        </trans-unit>
        <trans-unit id="2a2c34163aca31fcba0ec660cb7d173824ec9661" translate="yes" xml:space="preserve">
          <source>You can map &lt;code&gt;MyModel&lt;/code&gt; to &lt;code&gt;TestMyModel&lt;/code&gt; class that inherits it, everywhere when &lt;code&gt;MyModel&lt;/code&gt; will be injected you will get &lt;code&gt;TestMyModel&lt;/code&gt; instread.
 - &lt;strong&gt;Problem&lt;/strong&gt;: Singletons can cause memory leaks as they never disposed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы можете сопоставить &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; с &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;классом &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TestMyModel&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; который его наследует, везде, где &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; будет введен, вы получите &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TestMyModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; TestMyModel. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;- &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Проблема&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : синглтоны могут вызвать утечку памяти, поскольку они никогда не удаляются.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="070c0a7e28e299b15bf2111d596305db704790a1" translate="yes" xml:space="preserve">
          <source>You can then do the following from all over the place:</source>
          <target state="translated">Тогда вы можете сделать следующее со всех сторон:</target>
        </trans-unit>
        <trans-unit id="19728079c61f5eb831b4385ced41da1096a537bb" translate="yes" xml:space="preserve">
          <source>^ Alex Miller. &lt;a href=&quot;http://tech.puredanger.com/2007/07/03/pattern-hate-singleton/&quot;&gt;Patterns I hate #1: Singleton&lt;/a&gt;, July 2007</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;^ Алекс Миллер. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://tech.puredanger.com/2007/07/03/pattern-hate-singleton/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Образцы, которые я ненавижу № 1: Синглтон&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , июль 2007&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fcb308952610da92d5ca908919ae791dc42bb049" translate="yes" xml:space="preserve">
          <source>^ J.B. Rainsberger, IBM. &lt;a href=&quot;http://www-128.ibm.com/developerworks/webservices/library/co-single.html&quot;&gt;Use your singletons wisely&lt;/a&gt;, July 2001</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;^ JB Рейнсбергер, IBM. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www-128.ibm.com/developerworks/webservices/library/co-single.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Используй свои синглеты с умом&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , июль 2001&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a788156b24d0bf82a606dee1b5227b07e47bd57" translate="yes" xml:space="preserve">
          <source>^ Scott Densmore. &lt;a href=&quot;http://blogs.msdn.com/scottdensmore/archive/2004/05/25/140827.aspx&quot;&gt;Why singletons are evil&lt;/a&gt;, May 2004</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;^ Скотт Денсмор. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.msdn.com/scottdensmore/archive/2004/05/25/140827.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Почему синглтоны злые&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , май 2004&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="484242ea0740f5e0e6cb94704610337fc5b2d075" translate="yes" xml:space="preserve">
          <source>^ Steve Yegge. &lt;a href=&quot;http://steve.yegge.googlepages.com/singleton-considered-stupid&quot;&gt;Singletons considered stupid&lt;/a&gt;, September 2004</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;^ Стив Йегге. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://steve.yegge.googlepages.com/singleton-considered-stupid&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Синглтоны считаются глупыми&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , сентябрь 2004&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4d0ef9363f9acba6ca10c3f8aee3f26826f3a7be" translate="yes" xml:space="preserve">
          <source>a. It causes namespace conflict</source>
          <target state="translated">a.Это вызывает конфликт пространства имён</target>
        </trans-unit>
        <trans-unit id="cf3fb1048c25336d3ef9b140e49d8db542d6678f" translate="yes" xml:space="preserve">
          <source>a. The explicit OO way of calling them, prevents the conflicts, so point a. is not an issue</source>
          <target state="translated">a.Явный способ ОО называть их,предотвращает конфликты,так что пункт а.не является проблемой.</target>
        </trans-unit>
        <trans-unit id="332b0e2db7c52d7f329fd8b551eb950dee05cf67" translate="yes" xml:space="preserve">
          <source>b. It exposes the state in a unwarranted fashion</source>
          <target state="translated">b.Она обнажает состояние в неоправданной манере...</target>
        </trans-unit>
        <trans-unit id="8b0eb367ee096fc9e4032dbd74741830957f9414" translate="yes" xml:space="preserve">
          <source>b. Singletons without state are (like factories) are not a problem. Singletons with state can again fall in two categories, those which are immutable or write once and read many (config/property files). These are not bad. Mutable Singletons, which are kind of reference holders are the ones which you are speaking of.</source>
          <target state="translated">b.Однополые синглеты без состояния (как на заводах)не являются проблемой.Одиночки с состоянием снова могут попасть в две категории,те,которые являются неизменяемыми или записываются один раз и читают много (файлы конфигурации).Это неплохо.Мутируемые синглеты,которые являются своего рода держателями ссылок-это те,о которых вы говорите.</target>
        </trans-unit>
        <trans-unit id="ab43fcca553c6f3639b5bc191032d2a14dfec129" translate="yes" xml:space="preserve">
          <source>everybody is given an equal start at the beginning of the game</source>
          <target state="translated">в начале игры всем дается равный старт.</target>
        </trans-unit>
        <trans-unit id="95c8fe92116d1f9c066ed43d5286406e2f4d1903" translate="yes" xml:space="preserve">
          <source>if they &lt;em&gt;do&lt;/em&gt; need be unit tested and
do need to change the implementation,
it's easy to change a class from
using a singleton to having the
singleton passed to it via dependency
injection.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;если они &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;делают&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; нужно быть протестировано и сделать необходимость изменить реализацию, это легко изменить класс с помощью синглтона к иметь одноплодной переданную ей через инъекцию зависимостей.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1033f06a6e4d031a15155240c5dd06be1392c571" translate="yes" xml:space="preserve">
          <source>in classes that implement IMessageReceiver.</source>
          <target state="translated">в классах,реализующих IMessageReceiver.</target>
        </trans-unit>
        <trans-unit id="63c67bcc3aa92c02e8148e8f0850d007f6f9d562" translate="yes" xml:space="preserve">
          <source>not all classes need to be unit
tested</source>
          <target state="translated">не все классы должны быть протестированы</target>
        </trans-unit>
        <trans-unit id="c6e595dac74db94f58cdd52fe08af8a5e9e4dc59" translate="yes" xml:space="preserve">
          <source>not all classes that need to be unit
tested need to change the
implementation of the singleton</source>
          <target state="translated">не все классы,нуждающиеся в единичном тестировании,нуждаются в изменении реализации одноэлементного</target>
        </trans-unit>
        <trans-unit id="422ff09c0e800e46347ae06765490e04994e4ce9" translate="yes" xml:space="preserve">
          <source>only one set of rules is presented to avoid confusion</source>
          <target state="translated">во избежание путаницы представлен только один набор правил.</target>
        </trans-unit>
        <trans-unit id="82b524d90dbcf160ddb4a560d1503123520ae7c4" translate="yes" xml:space="preserve">
          <source>rather than:</source>
          <target state="translated">а не..:</target>
        </trans-unit>
        <trans-unit id="7570901e3d970213dc3d6ba782f132be44f9d7f9" translate="yes" xml:space="preserve">
          <source>the rules aren't allowed to change throughout the game</source>
          <target state="translated">правила не могут меняться в течение всей игры.</target>
        </trans-unit>
        <trans-unit id="5983b274e96763d883f37aeae5f28173136c7ba9" translate="yes" xml:space="preserve">
          <source>we establish the rules first so everybody is on the same page</source>
          <target state="translated">мы устанавливаем правила первыми,чтобы все были на одной волне.</target>
        </trans-unit>
        <trans-unit id="1ecf37b81e7ec4252f6722c1010864a51b2b0022" translate="yes" xml:space="preserve">
          <source>you need a &lt;strong&gt;singleton&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вам нужен &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;синглтон&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
