<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/137975">
    <body>
      <group id="137975">
        <trans-unit id="4c0663d54c4595f36a4f42a6f5400ef2ef366a74" translate="yes" xml:space="preserve">
          <source>&quot;Making something global to avoid passing it around is a code smell.&quot; Why isn't passing something around to avoid making it a singleton a code smell?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot;전세계를 통과하지 못하도록하는 것은 코드 냄새입니다.&quot; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤 코드 냄새를 피하기 위해 왜 무언가를 전달하지 않습니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="286d74fd07d872b4e967ba01e43b9ca80c0210fc" translate="yes" xml:space="preserve">
          <source>(&lt;strong&gt;1&lt;/strong&gt;) can only have a single instance, and</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )은 단일 인스턴스 만 가질 수 있으며&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1b63564fae2bc683b52e7b476a02f169d4dea468" translate="yes" xml:space="preserve">
          <source>(&lt;strong&gt;2&lt;/strong&gt;) you need to manage that single instance,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) 단일 인스턴스를 관리해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bde670e23d5afa06c791afd885f2d353197aa1d7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;Singletons are Pathological Liars&lt;/a&gt; has a unit testing example that illustrates how singletons can make it difficult to figure out dependency chains and start or test an application. It is a fairly extreme example of abuse, but the point that he makes is still valid:</source>
          <target state="translated">&lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글턴은 병리학적인 거짓말 쟁이 거짓말 꾼&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤이&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의존성 체인을 파악하고 응용 프로그램을 시작하거나 테스트하는 것을 어렵게 만드는 방법을 보여주는 단위 테스트 예제를 가지고 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그것은 학대에 대한 극단적 인 예이지만, 그가 주장하는 요점은 여전히 ​​유효합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea97013d248ede0dac3ce0ebf687ba0b03cc305d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://misko.hevery.com/2008/08/21/where-have-all-the-singletons-gone/&quot;&gt;Where have all the Singletons Gone&lt;/a&gt; makes the point that dependency injection has made it easy to get instances to constructors that require them, which alleviates the underlying need behind the bad, global Singletons decried in the first article.</source>
          <target state="translated">&lt;a href=&quot;http://misko.hevery.com/2008/08/21/where-have-all-the-singletons-gone/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 Singletons Gone&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이 종속성 주입을 통해 인스턴스를 필요로하는 생성자에게 인스턴스를 쉽게 가져올 수있게되었으므로 첫 번째 기사에서 설명 된 나쁜 글로벌 Singleton의 근본적인 요구를 완화 할 수있었습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7386a9161caeb195946b932a803ccd7dce07346" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.vincehuston.org/dp/singleton.html&quot;&gt;Vince Huston&lt;/a&gt; has these criteria, which seem reasonable to me:</source>
          <target state="translated">&lt;a href=&quot;http://www.vincehuston.org/dp/singleton.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;빈스 휴스턴 (Vince Huston)&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에는 다음과 같은 기준이 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d7957063e281e7382024d1939ac01602bdf86908" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A Singleton is &lt;em&gt;only&lt;/em&gt; an option if you need what a singleton provides. A write-one read-only instance of an object. That same rule should cascade to the object's properties/members as well.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤이 제공하는 것이 필요한 경우 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에만&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 옵션입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;객체의 1 회 읽기 전용 인스턴스입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;동일한 규칙이 객체의 속성 / 멤버에도 연결되어야합니다.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d010d9112a54e839b4d039b507f891e9d1a364c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How does this apply to Monopoly?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것이 독점에 어떻게 적용됩니까?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4f8924237fd09cf8a914728a948b370f5705d9a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How does this apply to programming?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것이 프로그래밍에 어떻게 적용됩니까?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2b43c4de79f8e20fd1c5bdcc6794a192575c0965" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Monopoly is the devil and singletons with non-readonly/mutable state are the 'real' problem...&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;독점은 악마이며 읽기 불가능 / 변경 불가능한 상태의 싱글 톤은 '실제'문제입니다 ...&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52f085799a111dd57a5f852313629fb1ae55285c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Problem&lt;/strong&gt;: It is hard to mock singletons.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;문제&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 싱글 톤을 조롱하기는 어렵다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="df35f0cdfd21e3389438a775dce278434deed79f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Problem&lt;/strong&gt;: Singleton can be a challenge in multi-threading environment</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;문제점&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 멀티 스레딩 환경에서 싱글 톤이 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;문제&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 될 수 있음&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab2836573afdbf2161060713a36ca848e5dcd111" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Resource Contention.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;리소스 경합.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="34acfa13c88ce2c117f1bbd47ac919cf1fb4aaeb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Singletons improves maintenance&lt;/strong&gt;: Once you removed a dependency from a class you just deleted some singleton injection, you don't need to go and edit a big link of other classes that just moved your dependency around(This is smelly code for me &lt;a href=&quot;https://stackoverflow.com/a/138012/1129332&quot;&gt;@Jim Burger&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singletons는 유지 보수를 향상시킵니다&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . 한 번 클래스에서 종속성을 제거한 후 싱글 톤 주입을 삭제하면 종속성을 이동시킨 다른 클래스의 큰 링크를 편집 할 필요가 없습니다 (이 냄새 나는 코드 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/138012/1129332&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Jim Burger&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="412f4531434a73757801858ba07eaba2e84b9aff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Singletons improves memory and performance&lt;/strong&gt;: When some thing happens in your application, and it takes a long chain of callbacks to deliver, you are wasting memory and performance, by using Singleton you are cutting the middle man, and improve your performance and memory usage(by avoiding unnecessary local variables allocations).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤은 메모리와 성능을 향상시킵니다&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . 어플리케이션에서 어떤 일이 발생하고 콜백이 오래 걸리면 싱글 톤을 사용하여 중개인을 줄이고 메모리와 성능을 낭비하고 성능과 메모리 사용량을 향상시킵니다 ( 불필요한 지역 변수 할당을 피함으로써).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0e2c053373b047bcfe397292fbc3cefa5e286412" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Singletons improves readability&lt;/strong&gt;: You can look at your class and see what singleton it injected to figure out what is it's dependencies.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤은 가독성을 향상시킵니다&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . 클래스를보고 어떤 싱글턴이 어떤 종속성인지 파악하여 어떤 종속성이 있는지 알아볼 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="023083762e9be2b0e554a8d384287ccabf323eb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution&lt;/strong&gt;: Use a single threaded bootstrap process to initialize all the   dependencies of your singleton.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;솔루션&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 단일 스레드 부트 스트랩 프로세스를 사용하여 싱글 톤의 모든 종속성을 초기화하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab544ef656038d5821d4e34fbe2cd0a3fa71941e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution&lt;/strong&gt;: Use method &lt;a href=&quot;https://github.com/gazman-sdk/android_life_cycle/wiki&quot;&gt;Factory&lt;/a&gt; pattern for mocking</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;솔루션&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;조롱을위한 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;메소드 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/gazman-sdk/android_life_cycle/wiki&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;팩토리&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 패턴 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8c663d86a9beeaaf39e92c87730e936facd14d2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution&lt;/strong&gt;: Well, dispose them! Implement a callback in your app to properly dispose a singletons, you should remove any data linked to them and finally: remove them from the Factory.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;해결책&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 음, 폐기하십시오! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;앱에서 콜백을 구현하여 싱글 톤을 올바르게 처리하려면 연결된 데이터를 모두 제거하고 마지막으로 팩토리에서 제거해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7b51005f66777ea4c5a189f276aba466064e2572" translate="yes" xml:space="preserve">
          <source>A singleton gets implemented using a static method. Static methods are avoided by people who do unit testing because they cannot be mocked or stubbed. Most people on this site are big proponents of unit testing. The generally most accepted convention to avoid them is using the &lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;inversion of control&lt;/a&gt; pattern.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤은 정적 메소드를 사용하여 구현됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;정적 방법은 조롱하거나 스터 빙 할 수 없으므로 단위 테스트를 수행하는 사람들이 피합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 사이트의 대부분의 사람들은 단위 테스트의 큰 지지자입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이를 피하기 위해 일반적으로 가장 많이 사용되는 규칙은 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;반전 제어&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 패턴을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용하는 것입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="98d937e9b1671d2c26255bf2c387222354793a1b" translate="yes" xml:space="preserve">
          <source>After reading &lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;Singletons are Pathological Liars&lt;/a&gt; as suggested in &lt;a href=&quot;https://stackoverflow.com/a/137996/632951&quot;&gt;jason's answer&lt;/a&gt; I came across this little tidbit that provides the best presented example of &lt;strong&gt;how&lt;/strong&gt; singletons are often misused.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤이 병리학적인 거짓말 쟁이&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 임을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;읽은 후 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/137996/632951&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Jason의 답변&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 제안한대로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤이 종종 오용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;되는 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;방법에&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대한 최상의 예를 제공하는이 작은 음식을 발견했습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f70a42dfd14309e34041c393526cf11b2727b5dd" translate="yes" xml:space="preserve">
          <source>Also, it&amp;rsquo;s too easy to write a non-thread-safe singleton.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 스레드로부터 안전하지 않은 싱글 톤을 작성하는 것은 너무 쉽습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6971cacf99a0946118138ab4a33f2113934990ee" translate="yes" xml:space="preserve">
          <source>And, of course, do:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 물론 다음을 수행하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d0b974c67fdb9500928fbab323ed42889acaaef" translate="yes" xml:space="preserve">
          <source>As I stated at the title singleton are not about single instance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제목에서 언급했듯이 싱글 톤은 단일 인스턴스에 관한 것이 아닙니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="780f02d7ca5df16a5493adb1b0ff7ad99d75e11a" translate="yes" xml:space="preserve">
          <source>Aside from all of the obvious thread-safety and synchronization issues that mutable singletons present... If you have one set of data, that is capable of being read/manipulated by multiple different sources concurrently and exists during the lifetime of the application execution, it's probably a good time to step back and ask &quot;am I using the right type of data structure here&quot;.</source>
          <target state="translated">Aside from all of the obvious thread-safety and synchronization issues that mutable singletons present... If you have one set of data, that is capable of being read/manipulated by multiple different sources concurrently and exists during the lifetime of the application execution, it's probably a good time to step back and ask &quot;am I using the right type of data structure here&quot;.</target>
        </trans-unit>
        <trans-unit id="8ee7b2ad5b9557585fabb335f68adfc9c9c8c706" translate="yes" xml:space="preserve">
          <source>Because they are basically object oriented global variables, you can usually design your classes in such a way so that you don't need them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;기본적으로 객체 지향 전역 변수이므로 필요하지 않은 방식으로 클래스를 디자인 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="937ec02c99912303d347e18aab31deb374647957" translate="yes" xml:space="preserve">
          <source>Classes that depend on singletons are relatively harder to unit test in isolation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤에 의존하는 클래스는 상대적으로 단위 테스트가 상대적으로 어렵습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a380834a96fac726e42e651e3d34770781efcd89" translate="yes" xml:space="preserve">
          <source>Consider the following situation: As a developer, you have to create a web application which accesses a database. To ensure that concurrent database calls do not conflict each other, you create a thread-save &lt;code&gt;SingletonDao&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음 상황을 고려하십시오. 개발자는 데이터베이스에 액세스하는 웹 애플리케이션을 작성해야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;동시 데이터베이스 호출이 서로 충돌하지 않도록 스레드 저장 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SingletonDao&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 작성하십시오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9647c9150ba82aa10b72cafd5be139fa2efae5f7" translate="yes" xml:space="preserve">
          <source>During testing and to ensure deterministic behavior, create the singleton class as separate instance as either the actual class itself or a stub/mock that implements its behavior and pass it as is to the class that requires it. Don't use the class factor that creates that object under test that needs the singleton during test as it will pass the single global instance of it, which defeats the purpose.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;테스트하는 동안 그리고 결정적인 동작을 보장하기 위해 싱글 톤 클래스를 실제 클래스 자체 또는 별도의 인스턴스로 동작을 구현하는 스텁 / mock으로 만들고이를 필요한 클래스에 그대로 전달하십시오. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;테스트 중에 싱글 톤이 필요한 테스트 대상 객체를 생성하는 클래스 팩터를 사용하지 마십시오. 단일 글로벌 인스턴스를 통과하므로 목적을 상실합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eac73a2e89308f7ba46bc74c05f8ca76bc870e71" translate="yes" xml:space="preserve">
          <source>During the runtime of you application, where singletons need to be passed to a given object, use a class factory that builds that object and have the class factory pass the singleton instance to the class that needs it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단일 객체를 지정된 객체로 전달해야하는 응용 프로그램을 실행하는 동안 해당 객체를 빌드하는 클래스 팩토리를 사용하고 클래스 팩토리가 단일 인스턴스를 필요한 클래스에 전달하도록합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="45bcf685d367a300d4d434185e87272e3868f1d0" translate="yes" xml:space="preserve">
          <source>Everyone talks about Singleton's as globals, because they basically are. However, much (sadly, not all) of the badness in a global comes not intrinsically from being global, but how you use it. Same goes for Singletons. Actually more so as &quot;single instance&quot; really doesn't need to mean &quot;globally accessible&quot;. It is more a natural byproduct, and given all the bad that we know comes from it, we shouldn't be in such a hurry to exploit global accessibility. Once programmers see a Singleton they seem to always access it directly through its instance method. Instead, you should navigate to it just like you would any other object. Most code shouldn't even be aware it is dealing with a Singleton (loose coupling, right?). If only a small bit of code accesses the object like it is a global, a lot of harm is undone. I recommend enforcing it by restricting access to the instance function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 사람들은 기본적으로 싱글 톤을 글로벌로 이야기합니다. 그러나, 지구상에서 많은 (슬프게도, 전부는 아님) 악의는 본질적으로 세계적이라는 것이 아니라 어떻게 사용 하는가에 달려 있습니다. 싱글 톤도 마찬가지입니다. 실제로 &quot;단일 인스턴스&quot;가 실제로 &quot;전 세계적으로 액세스 가능&quot;을 의미 할 필요는 없습니다. 그것은 더 자연스러운 부산물이며, 우리가 알고있는 모든 나쁜 점을 감안할 때, 우리는 전 세계의 접근성을 이용하기 위해 서둘러서는 안됩니다. 프로그래머가 싱글 톤을 본 후에는 항상 인스턴스 메소드를 통해 직접 액세스하는 것 같습니다. 대신 다른 개체와 마찬가지로 탐색해야합니다. 대부분의 코드는 싱글 톤 (느슨한 커플 링, 맞습니까?)을 다루고 있다는 것을 인식해서는 안됩니다. 전역 코드처럼 작은 코드 만 개체에 액세스하면 많은 피해가 발생하지 않습니다.인스턴스 기능에 대한 액세스를 제한하여 적용하는 것이 좋습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0aea5f06b0db6f7157edd5c4c141c78e70171cc9" translate="yes" xml:space="preserve">
          <source>Everything is fine so far.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;지금까지 모든 것이 정상입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c2c8d187b56d34de5700469c278c253a4efb35dc" translate="yes" xml:space="preserve">
          <source>FWIW, if it a PIA when you try to unit test it then it's going to PIA when you try to debug, bug fix or enhance it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;FWIW, 단위 테스트를 시도 할 때 PIA 인 경우 디버깅, 버그 수정 또는 향상하려고 할 때 PIA가됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="03c69b7e7f3a328ec62260ac5b83e4208fc9daa7" translate="yes" xml:space="preserve">
          <source>Firstly a class and its collaborators should firstly perform their intended purpose rather than focusing on deoendents. Lifecycle management (when instances are creared snd when they go out of scope) should not be part of the cladses responsibility. The accepted best practice for this is to craft or configure a new component to manage dependencies using dependency injection.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;첫째, 수업과 공동 작업자는 먼저 deoendents에 초점을 맞추기보다는 의도 된 목적을 수행해야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;수명주기 관리 (인스턴스가 범위를 벗어 났을 때 인스턴스가 생성 될 때)는 책임의 일부가되어서는 안됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이에 대한 가장 좋은 방법은 종속성 주입을 사용하여 종속성을 관리하기 위해 새 구성 요소를 만들거나 구성하는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f806d6e7027975cfa32f2da9b819f89561ed7538" translate="yes" xml:space="preserve">
          <source>From a pratical point of view, &lt;strong&gt;a singleton is a trade-off developing time vs complexity&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;실질적인 관점에서 보면, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤은 개발 시간과 복잡성 간의 절충 현상&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7e4ebfb74a941702ad7c541653b7cf63d07cfd67" translate="yes" xml:space="preserve">
          <source>Global access is not otherwise provided for</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;달리 글로벌 액세스는 제공되지 않습니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0791848a4b5d984612e8fff52eab6e825186b998" translate="yes" xml:space="preserve">
          <source>Global is bad because:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음과 같은 이유로 글로벌이 나쁩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a8f72bd9a9edbfe0b449bc6c4a04ae6281432fa1" translate="yes" xml:space="preserve">
          <source>GoF Singletons in opposite to IoC Singletons are supposed to expose &quot;singletonity&quot; in the interface through getInstance() method, and so that they suffer from everything said above.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC 싱글 톤과 반대되는 GoF 싱글 톤은 getInstance () 메소드를 통해 인터페이스에 &quot;단일성&quot;을 노출 시키므로 위에서 언급 한 모든 문제를 겪게됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2f78eafa156d6302e52dc35c57960b25dc9c1d2b" translate="yes" xml:space="preserve">
          <source>Here is one more thing about singletons which nobody said yet.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;아직 아무도 말하지 않은 싱글 톤에 대해 한 가지 더 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="72f2af37f60d95ea1ed5c8a2e82b0cba6c9da498" translate="yes" xml:space="preserve">
          <source>However, there are &quot;application scope services&quot; (think about a messaging system that makes components interact) - this CALLS for a singleton, a &quot;MessageQueue&quot; - class that has a method &quot;SendMessage(...)&quot;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 &quot;응용 프로그램 범위 서비스&quot;(구성 요소가 상호 작용하게하는 메시징 시스템에 대해 생각할 수 있음)가 있습니다.이 방법은 &quot;SendMessage (...)&quot;메서드가있는 단일 클래스 인 &quot;MessageQueue&quot;에 대한 호출입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b07296f711652fac02f0fab15864ed43fdad4def" translate="yes" xml:space="preserve">
          <source>I believe the backlash is due to its overuse which, in turn, is due to the fact that it's the easiest pattern to understand and implement.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 백래시가 과도하게 사용되어서 이해하고 구현하는 것이 가장 쉬운 패턴이기 때문이라고 생각합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d547e25d316e8eb86b74c45c720d779a57572804" translate="yes" xml:space="preserve">
          <source>I believe this sort of pattern is called &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt; and is generally considered a good thing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 이런 종류의 패턴을 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의존성 주입&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이라고 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하며 일반적으로 좋은 것으로 간주됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29f3a8be4925f9bbf7c6e50d2f3ca550171d47d4" translate="yes" xml:space="preserve">
          <source>I now prefer to design around an &lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;inversion of control&lt;/a&gt; (IoC) container and allow the the lifetimes to be controlled by the container. This gives you the benefit of the classes that depend on the instance to be unaware of the fact that there is a single instance. The lifetime of the singleton can be changed in the future. Once such example I encountered recently was an easy adjustment from single threaded to multi-threaded.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC ( &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inversion of Control&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) 컨테이너를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;중심으로 설계하고 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨테이너에서 수명을 제어 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이를 통해 인스턴스에 의존하는 클래스의 이점을 통해 단일 인스턴스가 있다는 사실을 알 수 없습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤의 수명은 나중에 변경 될 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그런 예가 최근에 발생하면 단일 스레드에서 다중 스레드로 쉽게 조정할 수있었습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dfa4071ddcee15c06454d19f5b9208a7488963bb" translate="yes" xml:space="preserve">
          <source>I think the confusion is caused by the fact that people don't know the real application of the Singleton pattern. I can't stress this enough. Singleton is &lt;strong&gt;not&lt;/strong&gt; a pattern to wrap globals. Singleton pattern should only be used to guarantee that &lt;strong&gt;one and only one instance of a given class&lt;/strong&gt; exists during run time.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;혼동은 사람들이 Singleton 패턴의 실제 적용을 알지 못하기 때문에 발생한다고 생각합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 이것을 충분히 강조 할 수 없다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;글로벌을 감싸는 패턴 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;아닙니다&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단일 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;클래스&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 패턴은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;런타임 동안 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;주어진 클래스의 인스턴스가 하나만&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 존재 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하도록 보장하기 위해 사용해야합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83f36ca8c3ae39ba88c4227bcd9107ebd8714e28" translate="yes" xml:space="preserve">
          <source>I'd like to address the 4 points in the accepted answer, hopefully someone can explain why I'm wrong.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;허용 된 답변에서 4 점을 다루고 싶습니다. 아마도 누군가 내가 왜 잘못했는지 설명 할 수 있기를 바랍니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="480115f4bdecc954d3ef342b5b307329636f1cf6" translate="yes" xml:space="preserve">
          <source>I'm not going to comment on the good/evil argument, but I haven't used them since &lt;a href=&quot;http://en.wikipedia.org/wiki/Spring_Framework&quot;&gt;Spring&lt;/a&gt; came along. Using &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt; has pretty much removed my requirements for singleton, servicelocators and factories. I find this a much more productive and clean environment, at least for the type of work I do (Java-based web applications).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 good / evil 논쟁에 대해서는 언급하지 않을 것이지만 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Spring_Framework&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이 등장한 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이래로 나는 그것들을 사용하지 않았다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의존성 주입&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용하면 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤, 서비스 로케이터 및 팩토리에 대한 요구 사항이 거의 제거되었습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;적어도 내가하는 일 (Java 기반 웹 응용 프로그램)의 경우 훨씬 생산적이고 깨끗한 환경입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b8f5ab505b9909495273b2e2d51e1a90612cf41" translate="yes" xml:space="preserve">
          <source>If ownership of the single instance, when and how initialization occurs, and global access are not issues, Singleton is not sufficiently interesting.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단일 인스턴스의 소유권, 초기화시기 및 방법 및 전역 액세스에 문제가없는 경우 Singleton은 충분히 흥미롭지 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="06cbcc38cd7b375e6eb3143e88b5e310d19f2f21" translate="yes" xml:space="preserve">
          <source>If you avoid those mistakes, Singletons can still be a PITA, bit it is ready to see a lot of the worst problems are significantly mitigated. Imagine a Java Singleton, that is explicitly defined as once per classloader (which means it needs a thread safety policy), with defined creation and destruction methods and a life cycle that dictates when and how they get invoked, and whose &quot;instance&quot; method has package protection so it is generally accessed through other, non-global objects. Still a potential source of trouble, but certainly much less trouble.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이러한 실수를 피하면 Singletons는 여전히 PITA가 될 수 있습니다. 비트는 최악의 많은 문제가 크게 완화 될 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;정의 된 생성 및 소멸 방법과 호출시기 및 방법을 결정하는 수명주기와 &quot;인스턴스&quot;메소드의 수명주기를 사용하여 클래스 로더 당 한 번 (스레드 안전성 정책이 필요함) 명시 적으로 정의 된 Java Singleton을 상상해보십시오. 패키지 보호를 통해 일반적으로 다른 비전 역 객체를 통해 액세스합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여전히 잠재적 인 문제의 원천이지만 확실히 훨씬 적은 문제입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3a1237cb413fdb4c46831101c6617de6e2895e61" translate="yes" xml:space="preserve">
          <source>If you have some resource that</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;자원이 있다면&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5aa9787a4fcf5e46b59e52938d4c6b3343093698" translate="yes" xml:space="preserve">
          <source>If you know your application won't change that much they are pretty OK to go with. Just know that you may need to refactor things up if your requirements change in an unexpected way (which is pretty OK in most cases).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;응용 프로그램이 많이 변경되지 않는다는 것을 알고 있다면 함께 갈 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;요구 사항이 예기치 않은 방식으로 변경되는 경우 상황을 리팩토링해야 할 수도 있습니다 (대부분의 경우는 괜찮습니다).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="28522cf8f3941ff8eed8d87379a03a7891c58392" translate="yes" xml:space="preserve">
          <source>If you're passing an object through 10 functions in a call stack just to avoid a singleton, is that so great?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단일 톤을 피하기 위해 호출 스택에서 10 개의 함수를 통해 객체를 전달하는 경우 그렇게 훌륭합니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a1b6572af45baab99438b33d0afceb089e21a8ae" translate="yes" xml:space="preserve">
          <source>In a &lt;a href=&quot;https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29&quot;&gt;garbage collected&lt;/a&gt; environment singletons can quickly become an issue with regard to memory management.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A의 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;쓰레기 수거&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 환경 싱글 빠르게 메모리 관리와 관련하여 문제가 될 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="557c214439df24b6d9a6e6fb3a93c9584d0cf0e3" translate="yes" xml:space="preserve">
          <source>In most cases &quot;singletonity&quot; is a detail of implementation for some class rather than characteristic of its interface. Inversion of Control Container may hide this characteristic from class users; you just need to mark your class as a singleton (with &lt;code&gt;@Singleton&lt;/code&gt; annotation in Java for example) and that's it; IoCC will do the rest. You don't need to provide global access to your singleton instance because the access is already managed by IoCC. Thus there is nothing wrong with IoC Singletons.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;대부분의 경우 &quot;단일성&quot;은 인터페이스의 특성이 아니라 일부 클래스에 대한 세부적인 구현입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨트롤 컨테이너의 반전은이 특성을 클래스 사용자로부터 숨길 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;클래스를 싱글 톤 ( &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예 : Java의 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Singleton&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 주석 사용)으로 표시하면됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoCC가 나머지 작업을 수행합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;액세스가 이미 IoCC에 의해 관리되므로 싱글 톤 인스턴스에 대한 글로벌 액세스를 제공 할 필요가 없습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 IoC 싱글 톤에는 아무런 문제가 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3adb08488e419152c707b1fe00f30e55841e099" translate="yes" xml:space="preserve">
          <source>In practice the &lt;em&gt;Singleton&lt;/em&gt; pattern is just a programming technique that is a useful part of your toolkit of concepts. From time to time you might find it is the ideal solution and so use it. But using it just so you can boast about using a &lt;em&gt;design pattern&lt;/em&gt; is just as stupid as refusing to ever use it because it is just a &lt;em&gt;global&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;실제로 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singleton&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 패턴은 개념 툴킷의 유용한 부분 인 프로그래밍 기술 일뿐입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;때때로 당신은 그것이 이상적인 솔루션임을 알 수 있으므로 그것을 사용하십시오. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;디자인 패턴을&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용하는 것에 대해 자랑 할 수 있도록 그것을 사용하는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;것은 단지 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;글로벌&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이기 때문에 &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;디자인 패턴을&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용하는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;것을 거부하는 것처럼 바보 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="175eb0b638a248bbeee6c8c6d26cdf7f0bb9fb17" translate="yes" xml:space="preserve">
          <source>In the last statement he's referring to the blog's concept of 'singletons are liars'.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;마지막 진술에서 그는 블로그의 '싱글 톤은 거짓말 쟁이이다'라는 개념을 언급하고있다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82447f21debdc151d1cac2b4db16313ffdc010f5" translate="yes" xml:space="preserve">
          <source>It is also considered an anti-pattern by some people, who feel that it is overly used, introducing unnecessary limitations in situations where a sole instance of a class is not actually required.[1][2][3][4]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 과도하게 사용되었다고 느끼는 일부 사람들에 의해 반 패턴으로 간주되며, 클래스의 유일한 인스턴스가 실제로 필요하지 않은 상황에서 불필요한 제한을 초래합니다. [1] [2] [3] [4]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4b4cbb456545aecd6262079cc8061bb243412865" translate="yes" xml:space="preserve">
          <source>It is easily (ab)used as a global variable.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;전역 변수로 쉽게 사용됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="faa6d5d204dc7dbc91d17f723a964f011cefcf2c" translate="yes" xml:space="preserve">
          <source>It's not that singletons themselves are bad but the GoF design pattern is. The only really argument that is valid is that the GoF design pattern doesn't lend itself in regards to testing, especially if tests are run in parallel.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤 자체가 나쁘지는 않지만 GoF 디자인 패턴은 아닙니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;실제로 유일하게 유효한 주장은 GoF 디자인 패턴이 테스트와 관련하여, 특히 테스트가 병렬로 실행되는 경우에는 적합하지 않다는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83b20cebddd201ff984745ea240973a2c8a8348d" translate="yes" xml:space="preserve">
          <source>It's rare that you need a singleton. The reason they're bad is that they feel like a &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global&lt;/a&gt; and they're a fully paid up member of the GoF &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;Design Patterns&lt;/a&gt;&lt;/em&gt; book.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤이 필요한 경우는 거의 없습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그들이 나쁜 이유는 그들이 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;글로벌 한&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 느낌 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이고 GoF &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Design Patterns&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 책 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 전액을 지불했기 때문 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="462d96d6490ecf7f21c7d082c3a673c2571d2b5d" translate="yes" xml:space="preserve">
          <source>Lazy initialization is desirable</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;게으른 초기화가 바람직합니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a3024554beb09837fba1b03b0332e6065ffafd1" translate="yes" xml:space="preserve">
          <source>Like any pattern though... Think about it and consider if its use in the given situation is inappropriate or not... Rules are made to be broken usually, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;patterns&lt;/a&gt; should not be applied willy nilly without thought.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 어떤 패턴과 마찬가지로 ... 그것에 대해 생각하고 주어진 상황에서의 사용이 부적절한 지 아닌지 고려하십시오 ... 규칙은 일반적으로 깨지도록 만들어지며, &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;생각없이 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;패턴&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 적용 할 수 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="73f9ccfc3d9b951a95cf8d8c870ebe0d33f5c1e5" translate="yes" xml:space="preserve">
          <source>Make sure that the Singleton is thread-safe.  That's a given.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤이 스레드로부터 안전해야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그것은 주어진 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="99db60c95b1b127007a4512df8fd7cb4dcab18fb" translate="yes" xml:space="preserve">
          <source>Make sure the class that will be used as a singleton implements an interface. This allows stubs or mocks to be implemented using the same interface</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤으로 사용될 클래스가 인터페이스를 구현하는지 확인하십시오. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이를 통해 동일한 인터페이스를 사용하여 스텁 또는 모의를 구현할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="906d44ceac744e478b26c3dbfd73fea4bc065db7" translate="yes" xml:space="preserve">
          <source>MessageQueue.Current.RegisterReceiver(this);</source>
          <target state="translated">MessageQueue.Current.RegisterReceiver(this);</target>
        </trans-unit>
        <trans-unit id="e2f175accfe9e7aa85d6a7640719330d57950fde" translate="yes" xml:space="preserve">
          <source>MessageQueue.Current.SendMessage(new MailArrivedMessage(...));</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MessageQueue.Current.SendMessage (new MailArrivedMessage (...));&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e8f815cd223912c6028928f4b3ad623f1bd5368f" translate="yes" xml:space="preserve">
          <source>Misko Hevery, from Google, has some interesting articles on exactly this topic...</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;구글의 Misko Hevery는이 주제에 관한 흥미로운 기사를 가지고 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aee4bcdfd19cd56b5aca74568fc7d31720489ef4" translate="yes" xml:space="preserve">
          <source>My answer on how Singletons are bad is always, &quot;they are hard to do right&quot;. Many of the foundational components of languages are singletons (classes, functions, namespaces and even operators), as are components in other aspects of computing (localhost, default route, virtual filesystem, etc.), and it is not by accident. While they cause trouble and frustration from time to time, they also can make a lot of things work a LOT better.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤이 어떻게 나쁜지에 대한 나의 대답은 항상 &quot;올바른 일을하기가 어렵다&quot;입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;언어의 많은 기본 구성 요소는 싱글 톤 (클래스, 함수, 네임 스페이스 및 심지어 연산자)이며 컴퓨팅의 다른 측면 (로컬 호스트, 기본 경로, 가상 파일 시스템 등)의 구성 요소와 마찬가지로 우연이 아닙니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그들은 때때로 문제와 좌절을 야기하지만, 많은 일들이 훨씬 더 잘 작동하도록 만들 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a53607ed2c21f47236870353aed7c4680124034a" translate="yes" xml:space="preserve">
          <source>No class should be thought of as a singleton but rather that should be an aplication of it's usage or how it is used to configure dependents. For a quick and nasty this does not matter - just luke hardcoding say file paths does not matter but for bigger applications such dependencies need to be factored out and managed in more appropriate way using DI.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;어떤 클래스도 싱글 톤으로 생각해서는 안되지만 사용법이나 종속 항목을 구성하는 데 사용되는 방법과 관련이 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;빠르고 불쾌한 경우에는 이것이 중요하지 않습니다. 파일 경로는 중요하지 않다고 말하면 luke 하드 코딩만으로도 더 큰 응용 프로그램의 경우 DI를 사용하여 이러한 종속성을 더 적절하게 제거하고 관리해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6c62e40008de69cb522d6cdf069852b3341a3b9d" translate="yes" xml:space="preserve">
          <source>Note: Coding Without Comments is no longer valid.  However, The article being linked to has been cloned by another user.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;참고 : 주석없는 코딩은 더 이상 유효하지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 연결된 기사가 다른 사용자에 의해 복제되었습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6ee7cdaf99a266962c9e299de0be53abaae53a44" translate="yes" xml:space="preserve">
          <source>Now the game goes from friendly dice-rolling to serious business. Bob has been made the example of failure and Joe and Ed don't want to end up like 'that guy'. So, being the leading player you, all of a sudden, become the enemy. Joe and Ed start practicing under-the-table trades, behind-the-back money injections, undervalued house-swapping and generally anything to weaken you as a player until one of them rises to the top.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 게임은 친절한 주사위 굴림에서 진지한 사업으로 진행됩니다. 밥은 실패의 모범이되었으며 조와 에드는 '그 사람'처럼되기를 원하지 않습니다. 따라서, 당신은 최고의 선수가되어 갑자기 적이됩니다. Joe와 Ed는 테이블 밖에서 거래, 뒤에서 돈을 주입, 저평가 된 주택 스와핑 및 일반적으로 그들 중 하나가 정상에 올 때까지 당신을 약화시키는 것을 연습하기 시작합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a2e70213e768863cad258a0f87428f2c1f107fa" translate="yes" xml:space="preserve">
          <source>Now, consider you want to set up multiple instances of your web application in a cluster. Now, you suddenly have something like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 클러스터에 여러 웹 애플리케이션 인스턴스를 설정하려고합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 갑자기 다음과 같은 것이 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d0994fb980677959b214d2c3749362ba6e34a5e3" translate="yes" xml:space="preserve">
          <source>Now, for anybody who hasn't &lt;strong&gt;really&lt;/strong&gt; played monopoly, these standards are ideal at best. A defeat in monopoly is hard to swallow because, monopoly is about money, if you lose you have to painstakingly watch the rest of the players finish the game, and losses are usually swift and crushing. So, the rules usually get twisted at some point to serve the self-interest of some of the players at the expense of the others.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;자,하지 않은 사람을 위해 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;정말&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 독점을했다,이 표준은 최상의 이상적입니다. 독점에 대한 패배는 삼키기가 어렵습니다. 독점은 돈에 관한 것입니다. 당신이 잃어 버리면 나머지 플레이어가 게임을 끝내는 것을 힘들게 지켜봐야하며, 손실은 일반적으로 신속하고 파쇄됩니다. 따라서 규칙은 일반적으로 특정 시점에서 다른 플레이어를 희생하여 일부 플레이어의 자기 이익을 제공하기 위해 왜곡됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8251537426b4a38c0fda5146bbbfce04abd246d3" translate="yes" xml:space="preserve">
          <source>Of course this is an example of a bad usage of a singleton. But the message of this example is: You can not rely that there is exactly one instance of a singleton in your application - especially when it comes to clustering.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;물론 이것은 싱글 톤의 나쁜 사용법의 예입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나이 예제의 메시지는 다음과 같습니다. 응용 프로그램에 특히 단일 클러스터의 인스턴스가 하나만 있다고 믿을 수는 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="12da2eb229cab6f3f45bf52f45d05c18b7744c03" translate="yes" xml:space="preserve">
          <source>Often software gets more complicated it makes sense to have multiple independent instances of the Singleton class with different state. Committing code to simply grab the singleton is wrong in such cases. Using &lt;code&gt;Singleton.getInstance()&lt;/code&gt; might be ok for small simple systems but it doesn't work/scale when one might need a different instance of the same class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;소프트웨어가 복잡 해지는 경우가 많으며 상태가 다른 Singleton 클래스의 여러 독립 인스턴스를 갖는 것이 좋습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이러한 경우 싱글 톤을 잡기 위해 코드를 커밋하는 것은 잘못입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;작은 간단한 시스템에서는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Singleton.getInstance()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하는 것이 좋지만 동일한 클래스의 다른 인스턴스가 필요할 때는 작동하지 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="59b9e2cf09e0aebb2a5206089741000b279a7b53" translate="yes" xml:space="preserve">
          <source>One rather bad thing about singletons is that you can't extend them very easily. You basically have to build in some kind of &lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;decorator pattern&lt;/a&gt; or some such thing if you want to change their behavior. Also, if one day you want to have multiple ways of doing that one thing, it can be rather painful to change, depending on how you lay out your code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤에 대한 한 가지 나쁜 점은 싱글 톤을 매우 쉽게 확장 할 수 없다는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;기본적으로 어떤 종류의 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;데코레이터 패턴&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이나 그 동작을 변경하려면 그러한 것을 만들어야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 언젠가 여러 가지 방법으로 하나의 작업을 수행하려는 경우 코드 레이아웃에 따라 변경하기가 다소 어려울 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce175dbf29b8e8c973f5eaab4951c1d4efea6362" translate="yes" xml:space="preserve">
          <source>One thing to note, if you DO use singletons, try to pass them in to whoever needs them rather than have them access it directly... Otherwise if you ever choose to have multiple ways of doing the thing that singleton does, it will be rather difficult to change as each class embeds a dependency if it accesses the singleton directly.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;한 가지 주목할 점은 싱글 톤을 사용하는 경우 직접 액세스하지 않고 필요한 사람에게 전달하려고 시도하는 것입니다. 각 클래스가 싱글 톤에 직접 액세스하는 경우 종속성을 포함하므로 변경하기가 다소 어렵습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b46465a6d50ce5de3f512c57fbb175a4dfef1083" translate="yes" xml:space="preserve">
          <source>Ownership of the single instance cannot be reasonably assigned</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단일 인스턴스의 소유권을 합리적으로 할당 할 수 없습니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="715eaba002359c1f45ac2b34e6e9e70374fe8629" translate="yes" xml:space="preserve">
          <source>Paraphrased from Brian Button:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;브라이언 버튼에서 번역 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1252eeb8091f8d534d0de0657525d9e409460566" translate="yes" xml:space="preserve">
          <source>People think Singleton is evil because they are using it for globals. It is because of this confusion that Singleton is looked down upon. Please, don't confuse Singletons and globals. If used for the purpose it was intended for, you will gain extreme benefits from the Singleton pattern.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사람들은 싱글 톤을 글로벌에 사용하기 때문에 싱글 톤이 악하다고 생각합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 혼동으로 인해 싱글 톤을 내려다 보았습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤과 글로벌을 혼동하지 마십시오. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;원래 목적에 맞게 사용하면 싱글 톤 패턴의 이점을 최대한 활용할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4488e947e889410b9a191f1d7b72296670a169df" translate="yes" xml:space="preserve">
          <source>Personally, I have seen a programmer abuse a singleton by using it as some sort of twisted cross-thread database store within an application. Having worked on the code directly, I can attest that it was a slow (because of all the thread locks needed to make it thread-safe) and a nightmare to work on (because of the unpredictable/intermittent nature of synchronization bugs), and nearly impossible to test under 'production' conditions. Sure, a system could have been developed using polling/signaling to overcome some of the performance issues but that wouldn't solve the issues with testing and, why bother when a 'real' database can already accomplish the same functionality in a much more robust/scalable manner.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;개인적으로, 프로그래머가 응용 프로그램 내에서 일종의 트위스트 크로스 스레드 데이터베이스 저장소로 사용하여 싱글 톤을 남용하는 것을 보았습니다. 코드를 직접 연구 한 결과, 느리게 (스레드에 안전하도록하는 데 필요한 모든 스레드 잠금으로 인해) 느리게 작동하고 악의적 인 작업 (예측할 수없는 / 간헐적 인 동기화 버그 때문에)을 증명할 수 있습니다. '생산'조건에서 테스트하기가 거의 불가능합니다. 물론, 성능 문제 중 일부를 극복하기 위해 폴링 / 시그널링을 사용하여 시스템을 개발할 수 있었지만 테스트와 관련된 문제를 해결하지 못하고 왜 '실제'데이터베이스가 훨씬 더 강력한 기능으로 동일한 기능을 이미 수행 할 수 있는지 고민하는 이유 / 확장 가능한 방식.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="91f89d4db256dc247d870f9462f9bc0c69cb74b5" translate="yes" xml:space="preserve">
          <source>Please support your answers with &quot;&lt;em&gt;facts, references, or specific expertise&lt;/em&gt;&quot;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사실, 참조 또는 특정 전문 지식&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;으로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;답변을 지원하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="57c71d6ec57b7a7097898abfe53ac93d158a60a4" translate="yes" xml:space="preserve">
          <source>Rather than using singletons, you should pass all the needed utility objects from function to function. That can be simplified if you wrap all them into a helper object, like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤을 사용하는 대신 필요한 모든 유틸리티 객체를 함수에서 함수로 전달해야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음과 같이 모든 것을 도우미 객체로 감싸면 단순화 될 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e244aca5c6e08cefb560ff05106c72a053cfd258" translate="yes" xml:space="preserve">
          <source>Recent article on this subject by Chris Reath at &lt;a href=&quot;http://www.codingwithoutcomments.com/&quot;&gt;Coding Without Comments&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 주제에 대한 최근 기사는 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.codingwithoutcomments.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;논평없이 코딩&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 하는 Chris Reath의 기사입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aad46f2b1a8beb2238db459eb8a7984bc88e9ac7" translate="yes" xml:space="preserve">
          <source>References (only relevant references from the article)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;참고 문헌 (기사에서 관련 참조 만)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="52f59ac0b8d614ab6b3b23685d4c5ee578e87153" translate="yes" xml:space="preserve">
          <source>Regarding unit tests:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단위 테스트와 관련하여 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="030d697ac3114fa5e0f1fd803ceabd44c98c1ff2" translate="yes" xml:space="preserve">
          <source>Sadly, rather than teaching good examples of how to do Singletons. We teach bad examples, let programmers run off using them for a while, and then tell them they are a bad design pattern.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;슬프게도, 싱글 톤을하는 방법에 대한 좋은 예를 가르치기보다는. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우리는 나쁜 예를 가르치고, 프로그래머가 잠시 동안 사용하지 못하게하고, 잘못된 디자인 패턴이라고 말합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e0aa79b2c282a159104c446619a487d9dd85bee2" translate="yes" xml:space="preserve">
          <source>See Wikipedia Singleton_pattern</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Wikipedia Singleton_pattern 참조&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d433b5c0fbdc7c1d72fe35c9443488ae8c3ee54e" translate="yes" xml:space="preserve">
          <source>Single Responsibility Principle: I think this is a bit vague and depends on your definition of responsibility. A relevant question would be, why does adding this &lt;em&gt;specific&lt;/em&gt; &quot;responsibility&quot; to a class matter?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단일 책임 원칙 : 나는 이것이 약간 모호하며 귀하의 책임 정의에 달려 있다고 생각합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;관련 질문은 왜이 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;특정&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;책임&quot;을 수업에 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;추가 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하는 것입니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="26ed3cf8e352b5e7d2bf4aa5387c599ce82c10d1" translate="yes" xml:space="preserve">
          <source>Singleton is a pattern and can be used or abused just like any other tool.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤은 패턴이며 다른 도구와 마찬가지로 사용하거나 남용 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4b9b5722cbaf5d7c5ad21d8e14a4714334867513" translate="yes" xml:space="preserve">
          <source>Singleton is not about single instance!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글턴은 싱글 인스턴스가 아닙니다!&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f2e14fa8aa12ee4d53b03570c0e52377418420bf" translate="yes" xml:space="preserve">
          <source>Singleton should be considered only if all three of the following criteria are satisfied:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음 세 가지 기준을 모두 충족하는 경우에만 싱글 톤을 고려해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f03a7ee73d533121d4ef48caf72e5289060b733f" translate="yes" xml:space="preserve">
          <source>Singletons &lt;em&gt;aren't&lt;/em&gt; evil, if you use it &lt;em&gt;properly&lt;/em&gt; &amp;amp; &lt;em&gt;minimally&lt;/em&gt;. There are lot of other good design patterns which replaces the needs of singleton at some point (&amp;amp; also gives best results). But some programmers are unaware of those good patterns &amp;amp; uses the singleton for all the cases which makes the singleton evil for them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;은 &lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;적절&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 하고 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;최소한으로&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용하면 악한 &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;것이 아닙니다&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;어떤 시점에서 싱글 톤의 요구를 대체하는 다른 좋은 디자인 패턴이 많이 있습니다 (또한 최상의 결과를 제공합니다). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 일부 프로그래머는 그러한 좋은 패턴을 알지 못하고 싱글 톤을 악용하는 모든 경우에 싱글 톤을 사용합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4fd184f94d2ce9383e49a02b30f6641ff78181bb" translate="yes" xml:space="preserve">
          <source>Singletons are NOT bad. It's only bad when you make something globally unique that isn't globally unique.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤은 나쁘지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;전 세계적으로 독특하지 않은 세계적으로 독특한 것을 만들 때만 나쁩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b71ec8c276a2e03ed961206cd36c64bf09b91a25" translate="yes" xml:space="preserve">
          <source>Singletons are also a problem from a testing perspective. They tend to make isolated unit-tests difficult to write. &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;Inversion of control&lt;/a&gt;&lt;/strong&gt; (IoC) and &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt;&lt;/strong&gt; are patterns meant to overcome this problem in an object-oriented manner that lends itself to unit testing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤은 테스트 관점에서도 문제가됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그들은 고립 된 단위 테스트를 작성하기 어렵게 만드는 경향이 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoC ( &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inversion of Control&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) 및 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;종속성 주입&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 단위 테스트에 적합한 객체 지향 방식으로이 문제를 극복하기위한 패턴입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="22357d29daa92c763bcdd62993b84e9e2aa5bd87" translate="yes" xml:space="preserve">
          <source>Singletons are also bad when it comes to &lt;strong&gt;clustering&lt;/strong&gt;. Because then, you do not have &quot;exactly one singleton&quot; in your application anymore.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;클러스터링과&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 관련하여 싱글 톤도 좋지 않습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 더 이상 응용 프로그램에 &quot;정확히 하나의 싱글 톤&quot;이 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="55a8b300eb18ba098facc7e6694024b774c6eac8" translate="yes" xml:space="preserve">
          <source>Singletons are bad from a purist point of view.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤은 순수한 관점에서 나쁘다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6571a82538f52d979f2b5e1853bbedb03b9ee0b8" translate="yes" xml:space="preserve">
          <source>Singletons are nothing more than global state. Global state makes it so your objects can secretly get hold of things which are not declared in their APIs, and, as a result, Singletons make your APIs into pathological liars.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤은 글로벌 상태에 지나지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;전역 상태는 객체가 API에 선언되지 않은 것을 비밀리에 보유 할 수 있도록하여 싱글 톤은 API를 병리학적인 거짓말 쟁이로 만듭니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3865fa07f2a264ee1aa7be8afa2532f27d7a83de" translate="yes" xml:space="preserve">
          <source>Singletons make it very hard to move from them to regular objects.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤은 그것들을 일반 객체로 옮기기가 매우 어렵습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1a9fa24bd062fcce6fa98e671274d898304f4930" translate="yes" xml:space="preserve">
          <source>Singletons solve one (and only one) problem.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤은 하나의 문제 만 해결합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9a182b1859f9fcbfb5d6f4df6317aa60d8f6db05" translate="yes" xml:space="preserve">
          <source>Singletons sometimes also complicate &lt;a href=&quot;https://en.wikipedia.org/wiki/Unit_testing&quot;&gt;unit testing&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤은 때때로 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Unit_testing&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단위 테스트를&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 복잡하게 만듭니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="358417c2142a15d4609dbb8b247ce7663b733322" translate="yes" xml:space="preserve">
          <source>So basically:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그래서 기본적으로:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f4cf667760b907cb4a40918fa4336dd7f2460150" translate="yes" xml:space="preserve">
          <source>So you are sure that only one singleton in your application exists and all database go through this one and only &lt;code&gt;SingletonDao&lt;/code&gt;. Your production environment now looks like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 응용 프로그램에 하나의 싱글 톤만 존재하고 모든 데이터베이스는이 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SingletonDao&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 하나만 통과해야 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프로덕션 환경은 이제 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e6fed6a4edfd3ed86633f28e6a268bd05113200a" translate="yes" xml:space="preserve">
          <source>So you're playing monopoly with friends Bob, Joe, and Ed. You're swiftly building your empire and consuming market share at an exponential rate. Your opponents are weakening and you start to smell blood (figuratively). Your buddy Bob put all of his money into gridlocking as many low-value properties as possible but his isn't receiving a high return on investment the way he expected. Bob, as a stroke of bad luck, lands on your Boardwalk and is excised from the game.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;친구 밥, 조, 에드와 독점을하고 있습니다. 신속하게 제국을 건설하고 지수 비율로 시장 점유율을 소비하고 있습니다. 상대방이 약해지고 혈액 냄새가 나기 시작합니다 (그림 참조). 버디 밥은 가능한 한 많은 가치가 낮은 부동산을 그리드 락에 넣었지만, 예상대로 높은 투자 수익을 얻지 못했습니다. 불운의 일격으로 밥은 보드 워크에 착륙하여 게임에서 제외됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="668ff333ca3f47ff06a60a3fa60bdab697466e01" translate="yes" xml:space="preserve">
          <source>So, if a rulebook for a game accurately represented a singleton, the monopoly rulebook would be an example of abuse.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 게임에 대한 룰북이 싱글 톤을 정확하게 나타내면 독점 룰북이 남용의 예가됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0591c19bd97bf670bf6baa531c0194ef328f8f82" translate="yes" xml:space="preserve">
          <source>Some coding snobs look down on them as just a glorified global. In the same way that many people hate the &lt;em&gt;goto&lt;/em&gt; statement there are others that hate the idea of ever using a &lt;em&gt;global&lt;/em&gt;. I have seen several developers go to extraordinary lengths to avoid a &lt;em&gt;global&lt;/em&gt; because they considered using one as an admission of failure. Strange but true.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;일부 코딩 스 너브 (snob)는 그것들을 단지 영광스러운 세계로 봅니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;많은 사람들이 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;goto&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 선언을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싫어하는 것과 같은 방식 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;으로 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;글로벌&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용을 싫어하는 사람들이 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 여러 개발자 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;가 실패를 받아들이는 것을 고려했기 때문에 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;전 세계&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 피하기 위해 엄청난 길이로 진행하는 것을 보았습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이상하지만 사실입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd23f939cf611c71e9dd37ad01d7843f484366f9" translate="yes" xml:space="preserve">
          <source>Stack Overflow especially seems to assume that everyone agrees that Singletons are evil. Why?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;스택 오버플로는 특히 모든 사람들이 싱글 톤이 악하다고 동의한다고 가정합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;왜?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="789f399c246ebf167b232e3114d18264ff6e67cc" translate="yes" xml:space="preserve">
          <source>That sounds weird, but &lt;strong&gt;now you have many singletons in your application&lt;/strong&gt;. And that is exactly what a singleton is not supposed to be: Having many objects of it. This is especially bad if you, as shown in this example, want to make synchronized calls to a database.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이상하게 들리지만 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제는 응용 프로그램에 많은 싱글 톤이 있습니다&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것이 바로 싱글 톤이 아니어야하는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 예제에서 볼 수 있듯이 데이터베이스에 동기화 된 호출을하려는 경우 특히 나쁩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f2475bf5ffeb163ceac957a3d49d6036113fdd88" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;singleton pattern&lt;/a&gt; is a fully paid up member of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;GoF&lt;/a&gt;'s &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201633612&quot;&gt;patterns book&lt;/a&gt;, but it lately seems rather orphaned by the developer world. I still use quite a lot of singletons, especially for &lt;a href=&quot;https://en.wikipedia.org/wiki/Factory_method_pattern&quot;&gt;factory classes&lt;/a&gt;, and while you have to be a bit careful about multithreading issues (like any class actually), I fail to see why they are so awful.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤 패턴&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 완전 최대 유료 회원입니다 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;GoF의&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201633612&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;패턴 책&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , 그러나 그것은 최근에 오히려 개발자 세계 고아 보인다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 여전히 많은 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Factory_method_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;팩토리 클래스를 사용합니다.&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 특히 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;팩토리 클래스&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에는 멀티 스레딩 문제에 대해 조심해야하지만 (실제로 다른 클래스와 마찬가지로) 왜 그렇게 끔찍한 지 알 수 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8cc31c742f2cb350a70f7da3d43015596237acc3" translate="yes" xml:space="preserve">
          <source>The Singleton context is also really important. The defining characteristic of a Singleton is that there is &quot;only one&quot;, but the truth is it is &quot;only one&quot; within some kind of context/namespace. They are usually one of: one per thread, process, IP address or cluster, but can also be one per processor, machine, language namespace/class loader/whatever, subnet, Internet, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤 컨텍스트도 매우 중요합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤의 특징은 &quot;하나만&quot;있다는 것이지만, 어떤 맥락 / 네임 스페이스 내에서는 &quot;하나만&quot;이라는 것이 진실입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;일반적으로 스레드, 프로세스, IP 주소 또는 클러스터 당 하나이지만 프로세서, 컴퓨터, 언어 네임 스페이스 / 클래스 로더 / 무엇이든, 서브넷, 인터넷 등 하나 일 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="835608667d69c55c183b0cef18dafe7f7cbbb7a5" translate="yes" xml:space="preserve">
          <source>The bad part of a singleton is generally the user (or should I say the inappropriate use of a singleton for things it is not designed to do). The biggest offender is using a singleton as a fake global variable.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤의 나쁜 부분은 일반적으로 사용자입니다 (또는 싱글 톤이 의도하지 않은 것을 부적절하게 사용한다고 말해야합니다). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;가장 큰 문제는 싱글 톤을 가짜 전역 변수로 사용하는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7b5cae7f5b6c184980327093d8fb76a94df99840" translate="yes" xml:space="preserve">
          <source>The other, less common, mistake is to ignore the Singleton lifestyle. Just because there is only one doesn't mean a Singleton is some omnipotent &quot;always was and always will be&quot;, nor is it generally desirable (objects without a begin and end violate all kinds of useful assumptions in code, and should be employed only in the most desperate of circumstances.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;덜 흔한 또 다른 실수는 싱글 톤 라이프 스타일을 무시하는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단 하나만 있다고해서 싱글 톤이 전능성이 &quot;항상 그렇고 항상있을 것&quot;이라는 의미는 아니며 일반적으로 바람직하지도 않습니다 (시작과 끝이없는 객체는 코드에서 모든 종류의 유용한 가정을 위반하므로 사용되어야합니다) 가장 절박한 상황에서.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="15878b09a961588056074d3687c3f79453c08e1e" translate="yes" xml:space="preserve">
          <source>The problems that singleton cause in testing is a symptom of their hard coded single usage case/environment. The test suite and the many tests are each individual and separate something that is not compatible with hardcoding a singleton.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;테스트에서 싱글 톤이 발생하는 문제는 하드 코딩 된 단일 사용 사례 / 환경의 증상입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;테스트 스위트와 많은 테스트는 각각 개별적이며 싱글 톤 하드 코딩과 호환되지 않는 무언가를 분리합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9833752e81fedcd533363bb0df3d89b4b006c284" translate="yes" xml:space="preserve">
          <source>The problems with singletons is the issue of increased scope and therefore &lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;coupling&lt;/a&gt;. There is no denying that there are some of situations where you do need access to a single instance, and it can be accomplished other ways.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤의 문제점은 범위가 증가하여 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;커플 링&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 되는 문제입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단일 인스턴스에 액세스해야하는 상황이 있다는 것을 부인할 수 없으며 다른 방법으로도 달성 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="df4e6e231e99dc52f3bff603e6c0d51c55026c2a" translate="yes" xml:space="preserve">
          <source>The singleton pattern is not a problem in itself. The problem is that the pattern is often used by people developing software with object-oriented tools without having a solid grasp of OO concepts. When singletons are introduced in this context they tend to grow into unmanageable classes that contain helper methods for every little use.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤 패턴 자체는 문제가되지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;문제는 패턴이 OO 개념을 제대로 파악하지 않고도 객체 지향 도구로 소프트웨어를 개발하는 사람들이 자주 사용한다는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 문맥에서 싱글 톤이 도입되면, 그들은 거의 사용하지 않는 헬퍼 메소드를 포함하는 관리 할 수없는 클래스로 자라는 경향이 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="465df7c70852f19533399cca69e2d76b8e5bf51e" translate="yes" xml:space="preserve">
          <source>The singleton should be simple in nature and not overly complicated.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤은 본질적으로 단순해야하고 지나치게 복잡해서는 안됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d16f8b3beb1ad83c4ab0ac8578a45a586f69fe71" translate="yes" xml:space="preserve">
          <source>The two biggest screw ups I see are: treating it like a global &amp;amp; failing to define the Singleton closure.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;내가 볼 수있는 가장 큰 두 가지 단점은 글로벌로 취급하고 싱글 톤 클로저를 정의하지 못하는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3c54f8415cbbb0dc73616090c496cddc67a6a2d6" translate="yes" xml:space="preserve">
          <source>Then, instead of one of them winning, the process starts all over. All of a sudden, a finite set of rules becomes a moving target and the game degenerates into the type of social interactions that would make up the foundation of every high-rated reality TV show since Survivor. Why, because the rules are changing and there's no consensus on how/why/what they're supposed to represent, and more importantly, there's no one person making the decisions. Every player in the game, at that point, is making his/her own rules and chaos ensues until two of the players are too tired to keep up the charade and slowly give up.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그런 다음 그중 하나가 승리하는 대신 프로세스가 완전히 시작됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;갑자기 유한 한 규칙 세트가 움직이는 목표가되고 게임은 생존자 이후 모든 높은 등급의 현실 TV 쇼의 기초를 구성하는 사회적 상호 작용의 유형으로 변질됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;왜, 규칙이 바뀌고 있고 어떻게 / 왜 / 어떻게 표현되어야하는지에 대한 합의가 없기 때문에 더 중요한 것은 결정을 내리는 사람이 없다는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그 시점에서 게임의 모든 플레이어는 자신의 규칙을 만들고 있으며, 두 명의 플레이어가 너무 피곤하여 차드를 유지하고 천천히 포기할 때까지 혼란을 겪습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94f7d2aeef0065cc58a25d8c73e0e4361c409fc9" translate="yes" xml:space="preserve">
          <source>There aren't many examples. A log file is the big one. You don't want to just abandon a single log file. You want to flush, sync and close it properly. This is an example of a single shared resource that has to be managed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예가 많지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;로그 파일이 큰 파일입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단일 로그 파일 만 포기하고 싶지는 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;플러시, 동기화 및 닫으려고합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 관리해야하는 단일 공유 리소스의 예입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1ebb5ebafa456472c719f0e8d8a94135dd4aeb2" translate="yes" xml:space="preserve">
          <source>There is also the multi-threaded scenario where singletons can become a bottleneck as well as a synchronization issue.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤이 병목 현상이 될 수있는 멀티 스레드 시나리오와 동기화 문제도 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ae8dc1fef3e4bf10c544a55f52796833a6c58b74" translate="yes" xml:space="preserve">
          <source>There is nothing inherently wrong with the pattern, assuming it is being used for some aspect of your model which is truly single.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;패턴이 본질적으로 단일 인 모델의 일부 측면에 사용된다고 가정하면 패턴에는 본질적으로 아무런 문제가 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="623dde36e233f0079e0085137f7deb08030d05b3" translate="yes" xml:space="preserve">
          <source>They are generally used as a global instance, why is that so bad? Because you hide the dependencies of your application in your code, instead of exposing them through the interfaces. Making something global to avoid passing it around is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_smell&quot;&gt;code smell&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그것들은 일반적으로 글로벌 인스턴스로 사용되는데 왜 그렇게 나쁜가? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;인터페이스를 통해 노출하는 대신 코드에서 애플리케이션의 종속성을 숨기므로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그것을 피하기 위해 전역으로 무언가를 만드는 것은 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_smell&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;코드 냄새&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba0e2b9616043f04660dd81d417cf5a73379fae0" translate="yes" xml:space="preserve">
          <source>They carry state around for the lifetime of the application. Another hit to testing since you can end up with a situation where tests need to be ordered which is a big no no for unit tests. Why? Because each unit test should be independent from the other.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그들은 응용 프로그램의 수명 동안 상태를 유지합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;테스트를 주문 해야하는 상황으로 이어질 수 있으므로 테스트에 대한 또 다른 타격은 단위 테스트에 큰 도움이되지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;왜? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;각 단위 테스트는 서로 독립적이어야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0e53548518905c337e4e3cda636d244bba6f2fa4" translate="yes" xml:space="preserve">
          <source>They inherently cause code to be tightly &lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;coupled&lt;/a&gt;. This makes faking them out under test rather difficult in many cases.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것들은 본질적으로 코드가 밀접하게 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;결합되도록&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이로 인해 많은 경우 테스트중인 가짜가 다소 어려워집니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eaf26fcd332b1240c30b63e8f6f491d24eac2db8" translate="yes" xml:space="preserve">
          <source>They violate the &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;single responsibility principle&lt;/a&gt;: by virtue of the fact that they control their own creation and lifecycle.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그들은 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하나의 책임 원칙을&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 위반합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. 즉, 자신의 생성과 수명주기를 제어한다는 사실 때문입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4c954584093770b03e88adcfe2a8a14d6ea33cb0" translate="yes" xml:space="preserve">
          <source>To start a game of monopoly, first:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;독점 게임을 시작하려면 먼저 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ca4d354b99bc24d443677735e54833fae801e272" translate="yes" xml:space="preserve">
          <source>Too many people put objects which are not thread safe in a singleton pattern. I've seen examples of a DataContext (&lt;a href=&quot;http://en.wikipedia.org/wiki/Language_Integrated_Query#LINQ_to_SQL_.28formerly_called_DLINQ.29&quot;&gt;LINQ&amp;nbsp;to&amp;nbsp;SQL&lt;/a&gt;) done in a singleton pattern, despite the fact that the DataContext is not thread safe and is purely a unit-of-work object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;너무 많은 사람들이 싱글 톤 패턴으로 스레드 안전하지 않은 객체를 넣습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DataContext가 스레드 안전하지 않고 순수하게 작업 단위 객체라는 사실에도 불구하고 Singleton 패턴으로 수행 된 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DataContext ( &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Language_Integrated_Query#LINQ_to_SQL_.28formerly_called_DLINQ.29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;LINQ to SQL&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )의 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 보았습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="398efeaac4bc6e2faa9b4c57d3f5b8a9b52f18bc" translate="yes" xml:space="preserve">
          <source>Unlike other answers I don't want to talk about what is wrong with Singletons but to show you how powerful and awesome they are when used right!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 답변과 달리 Singletons의 문제점에 대해 이야기하고 싶지 않지만 올바르게 사용될 때 얼마나 강력하고 훌륭했는지 보여주기 위해!&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="24fb6a8b55fe7fc6662d5d9a56b3921a911f125a" translate="yes" xml:space="preserve">
          <source>Using a single instance of an class is a valid construct as long as you apply the following means in code:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;코드에서 다음 수단을 적용하는 한 클래스의 단일 인스턴스를 사용하는 것이 올바른 구성입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7963242df7308adc2b3bd139cf37de9402e4f845" translate="yes" xml:space="preserve">
          <source>We've used Singletons in our solutions with a great deal of success that are testable ensuring deterministic behavior in parallel test run streams.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우리는 솔루션에서 싱글 톤을 사용하여 병렬 테스트 실행 스트림에서 결정적인 동작을 보장 할 수있는 큰 성공을 거두었습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="da1a3cb035699759f4a078c19b9474f88a6e772b" translate="yes" xml:space="preserve">
          <source>What is so bad about singletons</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤에 대한 나쁜 점&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="50f77dcdabdfd3afda084de7fd3d29d5dfae4194" translate="yes" xml:space="preserve">
          <source>When it comes to Singletons</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤에 관해서&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5c986765347b4b7bcb59761b18cd82e4e10e25e6" translate="yes" xml:space="preserve">
          <source>When you think you need a global, you're probably making a terrible design mistake.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;글로벌이 필요하다고 생각하면 아마도 끔찍한 디자인 실수를 저지른 것일 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4380b88b28be97d636237273ad914637b065daf2" translate="yes" xml:space="preserve">
          <source>When you write code using singletons, say, a logger or a database connection, and afterwards you discover you need more than one log or more than one database, you&amp;rsquo;re in trouble.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;로거 또는 데이터베이스 연결과 같은 싱글 톤을 사용하여 코드를 작성한 후 둘 이상의 로그 나 둘 이상의 데이터베이스가 필요하다는 것을 알게되면 문제가 발생합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c2df5f04ca68555136da5ed4bf5bd73a7b744b5f" translate="yes" xml:space="preserve">
          <source>Why does it change how long the state lasts? Singletons can be created or destroyed manually, so the control is still there, and you can make the lifetime the same as a non-singleton object's lifetime would be.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;상태가 지속되는 시간이 변경되는 이유는 무엇입니까? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤은 수동으로 생성하거나 파괴 할 수 있으므로 컨트롤은 여전히 ​​존재하며 수명은 싱글 톤이 아닌 오브젝트의 수명과 동일하게 만들 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="801e82bda5401c9fc10a0749304f4d28624f7eec" translate="yes" xml:space="preserve">
          <source>Why does passing an object to a class make it more tightly coupled than using that object as a singleton from within the class?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;왜 객체를 클래스에 전달하면 해당 객체를 클래스 내에서 싱글 톤으로 사용하는 것보다 더 밀접하게 결합됩니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a081d3ea69b57f4be3e26dd0623ed07dbee9e870" translate="yes" xml:space="preserve">
          <source>Why is hiding dependencies in your code bad? There are already dozens of hidden dependencies (C runtime calls, OS API calls, global function calls), and singleton dependencies are easy to find (search for instance()).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;코드에 의존성을 숨기는 것이 왜 나쁜가? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이미 수십 개의 숨겨진 종속성 (C 런타임 호출, OS API 호출, 전역 함수 호출)이 있으며 싱글 톤 종속성을 쉽게 찾을 수 있습니다 (예 : search ()).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a2c34163aca31fcba0ec660cb7d173824ec9661" translate="yes" xml:space="preserve">
          <source>You can map &lt;code&gt;MyModel&lt;/code&gt; to &lt;code&gt;TestMyModel&lt;/code&gt; class that inherits it, everywhere when &lt;code&gt;MyModel&lt;/code&gt; will be injected you will get &lt;code&gt;TestMyModel&lt;/code&gt; instread.
 - &lt;strong&gt;Problem&lt;/strong&gt;: Singletons can cause memory leaks as they never disposed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;MyModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;상속하는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TestMyModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 클래스에 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MyModel&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;맵핑 할 수 있습니다. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이 주입 될 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;때 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;마다 TestMyModel&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TestMyModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 히게됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;- &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;문제&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 싱글 톤은 절대로 폐기되지 않아 메모리 누수를 일으킬 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="070c0a7e28e299b15bf2111d596305db704790a1" translate="yes" xml:space="preserve">
          <source>You can then do the following from all over the place:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그런 다음 모든 곳에서 다음을 수행 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="19728079c61f5eb831b4385ced41da1096a537bb" translate="yes" xml:space="preserve">
          <source>^ Alex Miller. &lt;a href=&quot;http://tech.puredanger.com/2007/07/03/pattern-hate-singleton/&quot;&gt;Patterns I hate #1: Singleton&lt;/a&gt;, July 2007</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;uarr; Alex Miller. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://tech.puredanger.com/2007/07/03/pattern-hate-singleton/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;내가 싫어하는 패턴 # 1 : Singleton&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , 2007 년 7 월&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fcb308952610da92d5ca908919ae791dc42bb049" translate="yes" xml:space="preserve">
          <source>^ J.B. Rainsberger, IBM. &lt;a href=&quot;http://www-128.ibm.com/developerworks/webservices/library/co-single.html&quot;&gt;Use your singletons wisely&lt;/a&gt;, July 2001</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;^ JB Rainsberger, IBM. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2001 년 7 월, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www-128.ibm.com/developerworks/webservices/library/co-single.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤을 현명하게 사용하십시오&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a788156b24d0bf82a606dee1b5227b07e47bd57" translate="yes" xml:space="preserve">
          <source>^ Scott Densmore. &lt;a href=&quot;http://blogs.msdn.com/scottdensmore/archive/2004/05/25/140827.aspx&quot;&gt;Why singletons are evil&lt;/a&gt;, May 2004</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;^ Scott Densmore. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.msdn.com/scottdensmore/archive/2004/05/25/140827.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤이 악한 이유&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , 2004 년 5 월&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="484242ea0740f5e0e6cb94704610337fc5b2d075" translate="yes" xml:space="preserve">
          <source>^ Steve Yegge. &lt;a href=&quot;http://steve.yegge.googlepages.com/singleton-considered-stupid&quot;&gt;Singletons considered stupid&lt;/a&gt;, September 2004</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;^ Steve Yegge. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2004 년 9 월, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://steve.yegge.googlepages.com/singleton-considered-stupid&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤은 바보로 간주&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4d0ef9363f9acba6ca10c3f8aee3f26826f3a7be" translate="yes" xml:space="preserve">
          <source>a. It causes namespace conflict</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ㅏ. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;네임 스페이스 충돌이 발생합니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cf3fb1048c25336d3ef9b140e49d8db542d6678f" translate="yes" xml:space="preserve">
          <source>a. The explicit OO way of calling them, prevents the conflicts, so point a. is not an issue</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ㅏ. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;명시적인 OO 방식으로 호출하면 충돌이 방지되므로 a를 가리 킵니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;문제가 아니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="332b0e2db7c52d7f329fd8b551eb950dee05cf67" translate="yes" xml:space="preserve">
          <source>b. It exposes the state in a unwarranted fashion</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;비. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;부주의 한 방식으로 국가를 폭로합니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8b0eb367ee096fc9e4032dbd74741830957f9414" translate="yes" xml:space="preserve">
          <source>b. Singletons without state are (like factories) are not a problem. Singletons with state can again fall in two categories, those which are immutable or write once and read many (config/property files). These are not bad. Mutable Singletons, which are kind of reference holders are the ones which you are speaking of.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;비. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;상태가없는 싱글 톤 (공장과 같은)은 문제가되지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;상태가있는 싱글 톤은 다시 두 가지 범주에 속할 수 있는데,이 범주는 변경 불가능하거나 한 번 쓰고 많은 구성 (속성 파일)을 읽습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것들은 나쁘지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;참조 홀더의 일종 인 가변 싱글 톤 (Mutable Singleton)이 여러분이 말하고있는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab43fcca553c6f3639b5bc191032d2a14dfec129" translate="yes" xml:space="preserve">
          <source>everybody is given an equal start at the beginning of the game</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;게임이 시작될 때 모두에게 동등한 시작이 주어집니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="95c8fe92116d1f9c066ed43d5286406e2f4d1903" translate="yes" xml:space="preserve">
          <source>if they &lt;em&gt;do&lt;/em&gt; need be unit tested and
do need to change the implementation,
it's easy to change a class from
using a singleton to having the
singleton passed to it via dependency
injection.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그들이 경우 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;어떻게&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 단위 테스트 및 구현을 변경해야 할 필요, 그것은 의존성 주입을 통해 전달 된 싱글을 필요로 싱글 톤을 사용하는 클래스를 쉽게 변경할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1033f06a6e4d031a15155240c5dd06be1392c571" translate="yes" xml:space="preserve">
          <source>in classes that implement IMessageReceiver.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IMessageReceiver를 구현하는 클래스에서&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63c67bcc3aa92c02e8148e8f0850d007f6f9d562" translate="yes" xml:space="preserve">
          <source>not all classes need to be unit
tested</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 수업을 단위 테스트 할 필요는 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c6e595dac74db94f58cdd52fe08af8a5e9e4dc59" translate="yes" xml:space="preserve">
          <source>not all classes that need to be unit
tested need to change the
implementation of the singleton</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단위 테스트가 필요한 모든 클래스가 싱글 톤의 구현을 변경해야하는 것은 아닙니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="422ff09c0e800e46347ae06765490e04994e4ce9" translate="yes" xml:space="preserve">
          <source>only one set of rules is presented to avoid confusion</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;혼란을 피하기 위해 하나의 규칙 세트 만 제공됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82b524d90dbcf160ddb4a560d1503123520ae7c4" translate="yes" xml:space="preserve">
          <source>rather than:</source>
          <target state="translated">오히려</target>
        </trans-unit>
        <trans-unit id="7570901e3d970213dc3d6ba782f132be44f9d7f9" translate="yes" xml:space="preserve">
          <source>the rules aren't allowed to change throughout the game</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;게임 내내 규칙을 변경할 수 없습니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5983b274e96763d883f37aeae5f28173136c7ba9" translate="yes" xml:space="preserve">
          <source>we establish the rules first so everybody is on the same page</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 사람들이 같은 페이지에 있도록 규칙을 먼저 설정합니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1ecf37b81e7ec4252f6722c1010864a51b2b0022" translate="yes" xml:space="preserve">
          <source>you need a &lt;strong&gt;singleton&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;싱글 톤&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이 필요합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
