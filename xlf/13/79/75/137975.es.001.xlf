<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/137975">
    <body>
      <group id="137975">
        <trans-unit id="4c0663d54c4595f36a4f42a6f5400ef2ef366a74" translate="yes" xml:space="preserve">
          <source>&quot;Making something global to avoid passing it around is a code smell.&quot; Why isn't passing something around to avoid making it a singleton a code smell?</source>
          <target state="translated">&quot;Hacer algo global para evitar que se transmita es un olor a código&quot;.¿Por qué no se pasa algo para evitar que sea un simple olor a código?</target>
        </trans-unit>
        <trans-unit id="286d74fd07d872b4e967ba01e43b9ca80c0210fc" translate="yes" xml:space="preserve">
          <source>(&lt;strong&gt;1&lt;/strong&gt;) can only have a single instance, and</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) solo puede tener una &amp;uacute;nica instancia, y&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1b63564fae2bc683b52e7b476a02f169d4dea468" translate="yes" xml:space="preserve">
          <source>(&lt;strong&gt;2&lt;/strong&gt;) you need to manage that single instance,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) necesita administrar esa instancia &amp;uacute;nica,&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bde670e23d5afa06c791afd885f2d353197aa1d7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;Singletons are Pathological Liars&lt;/a&gt; has a unit testing example that illustrates how singletons can make it difficult to figure out dependency chains and start or test an application. It is a fairly extreme example of abuse, but the point that he makes is still valid:</source>
          <target state="translated">&lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los singletons son mentirosos patol&amp;oacute;gicos&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene un ejemplo de prueba de unidad que ilustra c&amp;oacute;mo los singletons pueden dificultar la determinaci&amp;oacute;n de cadenas de dependencia e iniciar o probar una aplicaci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es un ejemplo bastante extremo de abuso, pero el punto que &amp;eacute;l hace es v&amp;aacute;lido:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea97013d248ede0dac3ce0ebf687ba0b03cc305d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://misko.hevery.com/2008/08/21/where-have-all-the-singletons-gone/&quot;&gt;Where have all the Singletons Gone&lt;/a&gt; makes the point that dependency injection has made it easy to get instances to constructors that require them, which alleviates the underlying need behind the bad, global Singletons decried in the first article.</source>
          <target state="translated">&lt;a href=&quot;http://misko.hevery.com/2008/08/21/where-have-all-the-singletons-gone/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Donde todos los Singletons Gone&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se&amp;ntilde;ala que la inyecci&amp;oacute;n de dependencia ha facilitado la obtenci&amp;oacute;n de instancias para los constructores que los requieren, lo que alivia la necesidad subyacente detr&amp;aacute;s de los Singletons globales malos denunciados en el primer art&amp;iacute;culo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7386a9161caeb195946b932a803ccd7dce07346" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.vincehuston.org/dp/singleton.html&quot;&gt;Vince Huston&lt;/a&gt; has these criteria, which seem reasonable to me:</source>
          <target state="translated">&lt;a href=&quot;http://www.vincehuston.org/dp/singleton.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vince Huston&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene estos criterios, que me parecen razonables:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d7957063e281e7382024d1939ac01602bdf86908" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A Singleton is &lt;em&gt;only&lt;/em&gt; an option if you need what a singleton provides. A write-one read-only instance of an object. That same rule should cascade to the object's properties/members as well.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un Singleton es &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;solo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; una opci&amp;oacute;n si necesita lo que proporciona un Singleton. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una instancia de solo lectura de escritura de un objeto. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esa misma regla tambi&amp;eacute;n deber&amp;iacute;a conectarse en cascada con las propiedades / miembros del objeto.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d010d9112a54e839b4d039b507f891e9d1a364c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How does this apply to Monopoly?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;C&amp;oacute;mo se aplica esto al Monopolio?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4f8924237fd09cf8a914728a948b370f5705d9a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How does this apply to programming?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;C&amp;oacute;mo se aplica esto a la programaci&amp;oacute;n?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2b43c4de79f8e20fd1c5bdcc6794a192575c0965" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Monopoly is the devil and singletons with non-readonly/mutable state are the 'real' problem...&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El monopolio es el demonio y los singletons con estado no solo de lectura / mutable son el problema 'real' ...&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52f085799a111dd57a5f852313629fb1ae55285c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Problem&lt;/strong&gt;: It is hard to mock singletons.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Problema&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : es dif&amp;iacute;cil burlarse de los singletons.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="df35f0cdfd21e3389438a775dce278434deed79f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Problem&lt;/strong&gt;: Singleton can be a challenge in multi-threading environment</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Problema&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Singleton puede ser un desaf&amp;iacute;o en un entorno de subprocesos m&amp;uacute;ltiples&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab2836573afdbf2161060713a36ca848e5dcd111" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Resource Contention.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Contenci&amp;oacute;n de recursos.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="34acfa13c88ce2c117f1bbd47ac919cf1fb4aaeb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Singletons improves maintenance&lt;/strong&gt;: Once you removed a dependency from a class you just deleted some singleton injection, you don't need to go and edit a big link of other classes that just moved your dependency around(This is smelly code for me &lt;a href=&quot;https://stackoverflow.com/a/138012/1129332&quot;&gt;@Jim Burger&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singletons mejora el mantenimiento&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : una vez que elimin&amp;oacute; una dependencia de una clase, acaba de eliminar una inyecci&amp;oacute;n de singleton, no necesita ir y editar un gran enlace de otras clases que simplemente movieron su dependencia (este es un c&amp;oacute;digo maloliente para m&amp;iacute; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/138012/1129332&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@ Jim Burger&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="412f4531434a73757801858ba07eaba2e84b9aff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Singletons improves memory and performance&lt;/strong&gt;: When some thing happens in your application, and it takes a long chain of callbacks to deliver, you are wasting memory and performance, by using Singleton you are cutting the middle man, and improve your performance and memory usage(by avoiding unnecessary local variables allocations).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singletons mejora la memoria y el rendimiento&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : cuando ocurre algo en su aplicaci&amp;oacute;n, y se necesita una larga cadena de devoluciones de llamada, est&amp;aacute; desperdiciando memoria y rendimiento, al usar Singleton est&amp;aacute; cortando al intermediario y mejora su rendimiento y uso de memoria ( evitando asignaciones innecesarias de variables locales).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0e2c053373b047bcfe397292fbc3cefa5e286412" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Singletons improves readability&lt;/strong&gt;: You can look at your class and see what singleton it injected to figure out what is it's dependencies.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singletons mejora la legibilidad&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : puedes mirar tu clase y ver qu&amp;eacute; singleton inyect&amp;oacute; para descubrir cu&amp;aacute;les son sus dependencias.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="023083762e9be2b0e554a8d384287ccabf323eb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution&lt;/strong&gt;: Use a single threaded bootstrap process to initialize all the   dependencies of your singleton.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Soluci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : utilice un proceso de arranque de subproceso &amp;uacute;nico para inicializar todas las dependencias de su singleton.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab544ef656038d5821d4e34fbe2cd0a3fa71941e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution&lt;/strong&gt;: Use method &lt;a href=&quot;https://github.com/gazman-sdk/android_life_cycle/wiki&quot;&gt;Factory&lt;/a&gt; pattern for mocking</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Soluci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : utilice el m&amp;eacute;todo &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Patr&amp;oacute;n de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/gazman-sdk/android_life_cycle/wiki&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;f&amp;aacute;brica&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para burlarse&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8c663d86a9beeaaf39e92c87730e936facd14d2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution&lt;/strong&gt;: Well, dispose them! Implement a callback in your app to properly dispose a singletons, you should remove any data linked to them and finally: remove them from the Factory.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Soluci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &amp;iexcl;Pues des&amp;eacute;chelos! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Implemente una devoluci&amp;oacute;n de llamada en su aplicaci&amp;oacute;n para desechar correctamente un singletons, debe eliminar todos los datos vinculados a ellos y finalmente: eliminarlos de la f&amp;aacute;brica.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7b51005f66777ea4c5a189f276aba466064e2572" translate="yes" xml:space="preserve">
          <source>A singleton gets implemented using a static method. Static methods are avoided by people who do unit testing because they cannot be mocked or stubbed. Most people on this site are big proponents of unit testing. The generally most accepted convention to avoid them is using the &lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;inversion of control&lt;/a&gt; pattern.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un singleton se implementa utilizando un m&amp;eacute;todo est&amp;aacute;tico. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las personas que realizan pruebas unitarias evitan los m&amp;eacute;todos est&amp;aacute;ticos porque no pueden burlarse ni tropezarse. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La mayor&amp;iacute;a de las personas en este sitio son grandes defensores de las pruebas unitarias. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La convenci&amp;oacute;n generalmente m&amp;aacute;s aceptada para evitarlos es usar el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;patr&amp;oacute;n &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;de inversi&amp;oacute;n de control&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="98d937e9b1671d2c26255bf2c387222354793a1b" translate="yes" xml:space="preserve">
          <source>After reading &lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;Singletons are Pathological Liars&lt;/a&gt; as suggested in &lt;a href=&quot;https://stackoverflow.com/a/137996/632951&quot;&gt;jason's answer&lt;/a&gt; I came across this little tidbit that provides the best presented example of &lt;strong&gt;how&lt;/strong&gt; singletons are often misused.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Despu&amp;eacute;s de leer &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singletons son mentirosos patol&amp;oacute;gicos,&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como se sugiere en &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/137996/632951&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la respuesta de Jason,&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; me encontr&amp;eacute; con este peque&amp;ntilde;o dato que proporciona el mejor ejemplo presentado de &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;c&amp;oacute;mo los&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; singletons a menudo se usan mal.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f70a42dfd14309e34041c393526cf11b2727b5dd" translate="yes" xml:space="preserve">
          <source>Also, it&amp;rsquo;s too easy to write a non-thread-safe singleton.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, es demasiado f&amp;aacute;cil escribir un singleton que no sea seguro para subprocesos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6971cacf99a0946118138ab4a33f2113934990ee" translate="yes" xml:space="preserve">
          <source>And, of course, do:</source>
          <target state="translated">Y,por supuesto,hazlo:</target>
        </trans-unit>
        <trans-unit id="5d0b974c67fdb9500928fbab323ed42889acaaef" translate="yes" xml:space="preserve">
          <source>As I stated at the title singleton are not about single instance.</source>
          <target state="translated">Como he dicho en el título,los Singleton no son de una sola instancia.</target>
        </trans-unit>
        <trans-unit id="780f02d7ca5df16a5493adb1b0ff7ad99d75e11a" translate="yes" xml:space="preserve">
          <source>Aside from all of the obvious thread-safety and synchronization issues that mutable singletons present... If you have one set of data, that is capable of being read/manipulated by multiple different sources concurrently and exists during the lifetime of the application execution, it's probably a good time to step back and ask &quot;am I using the right type of data structure here&quot;.</source>
          <target state="translated">Aparte de todos los obvios problemas de seguridad y sincronización que presentan los singletones mutables...Si tienes un conjunto de datos,que es capaz de ser readmanipulado por múltiples fuentes diferentes simultáneamente y existe durante la vida de la ejecución de la aplicación,es probablemente un buen momento para dar un paso atrás y preguntarse &quot;¿estoy usando el tipo de estructura de datos correcto aquí?</target>
        </trans-unit>
        <trans-unit id="8ee7b2ad5b9557585fabb335f68adfc9c9c8c706" translate="yes" xml:space="preserve">
          <source>Because they are basically object oriented global variables, you can usually design your classes in such a way so that you don't need them.</source>
          <target state="translated">Debido a que son básicamente variables globales orientadas a objetos,normalmente puedes diseñar tus clases de tal manera que no las necesites.</target>
        </trans-unit>
        <trans-unit id="937ec02c99912303d347e18aab31deb374647957" translate="yes" xml:space="preserve">
          <source>Classes that depend on singletons are relatively harder to unit test in isolation.</source>
          <target state="translated">Las clases que dependen de los solteros son relativamente más difíciles de probar en aislamiento.</target>
        </trans-unit>
        <trans-unit id="a380834a96fac726e42e651e3d34770781efcd89" translate="yes" xml:space="preserve">
          <source>Consider the following situation: As a developer, you have to create a web application which accesses a database. To ensure that concurrent database calls do not conflict each other, you create a thread-save &lt;code&gt;SingletonDao&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Considere la siguiente situaci&amp;oacute;n: como desarrollador, debe crear una aplicaci&amp;oacute;n web que acceda a una base de datos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para asegurarse de que las llamadas simult&amp;aacute;neas a la base de datos no entren en conflicto entre s&amp;iacute;, cree un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SingletonDao&lt;/code&gt; para&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; guardar subprocesos &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9647c9150ba82aa10b72cafd5be139fa2efae5f7" translate="yes" xml:space="preserve">
          <source>During testing and to ensure deterministic behavior, create the singleton class as separate instance as either the actual class itself or a stub/mock that implements its behavior and pass it as is to the class that requires it. Don't use the class factor that creates that object under test that needs the singleton during test as it will pass the single global instance of it, which defeats the purpose.</source>
          <target state="translated">Durante las pruebas y para asegurar un comportamiento determinista,crear la clase singleton como una instancia separada como la propia clase o un stubmock que implemente su comportamiento y pasarlo como es a la clase que lo requiera.No use el factor de clase que crea ese objeto bajo prueba que necesita el singleton durante la prueba ya que pasará la única instancia global de él,lo que derrota el propósito.</target>
        </trans-unit>
        <trans-unit id="eac73a2e89308f7ba46bc74c05f8ca76bc870e71" translate="yes" xml:space="preserve">
          <source>During the runtime of you application, where singletons need to be passed to a given object, use a class factory that builds that object and have the class factory pass the singleton instance to the class that needs it.</source>
          <target state="translated">Durante el tiempo de ejecución de su aplicación,donde los singleton deben ser pasados a un objeto dado,utilice una fábrica de clases que construya ese objeto y haga que la fábrica de clases pase la instancia de singleton a la clase que lo necesita.</target>
        </trans-unit>
        <trans-unit id="45bcf685d367a300d4d434185e87272e3868f1d0" translate="yes" xml:space="preserve">
          <source>Everyone talks about Singleton's as globals, because they basically are. However, much (sadly, not all) of the badness in a global comes not intrinsically from being global, but how you use it. Same goes for Singletons. Actually more so as &quot;single instance&quot; really doesn't need to mean &quot;globally accessible&quot;. It is more a natural byproduct, and given all the bad that we know comes from it, we shouldn't be in such a hurry to exploit global accessibility. Once programmers see a Singleton they seem to always access it directly through its instance method. Instead, you should navigate to it just like you would any other object. Most code shouldn't even be aware it is dealing with a Singleton (loose coupling, right?). If only a small bit of code accesses the object like it is a global, a lot of harm is undone. I recommend enforcing it by restricting access to the instance function.</source>
          <target state="translated">Todo el mundo habla de los Singleton como globales,porque básicamente lo son.Sin embargo,gran parte (tristemente,no toda)de la maldad de un global no viene intrínsecamente de ser global,sino de cómo lo usas.Lo mismo ocurre con los Singletons.En realidad más como &quot;instancia única&quot; realmente no necesita significar &quot;accesible globalmente&quot;.Es más bien un subproducto natural,y dado que todo lo malo que sabemos que viene de él,no deberíamos tener tanta prisa en explotar la accesibilidad global.Una vez que los programadores ven un Singleton parece que siempre acceden a él directamente a través de su método de instancia.En cambio,deberían navegar hacia él como lo harían con cualquier otro objeto.La mayoría del código ni siquiera debería ser consciente de que se trata de un Singleton (acoplamiento suelto,¿verdad?).Si sólo un pequeño fragmento de código accede al objeto como si fuera un global,se deshace mucho daño.Recomiendo reforzarlo restringiendo el acceso a la función de instancia.</target>
        </trans-unit>
        <trans-unit id="0aea5f06b0db6f7157edd5c4c141c78e70171cc9" translate="yes" xml:space="preserve">
          <source>Everything is fine so far.</source>
          <target state="translated">Todo está bien hasta ahora.</target>
        </trans-unit>
        <trans-unit id="c2c8d187b56d34de5700469c278c253a4efb35dc" translate="yes" xml:space="preserve">
          <source>FWIW, if it a PIA when you try to unit test it then it's going to PIA when you try to debug, bug fix or enhance it.</source>
          <target state="translated">FWIW,si es una PIA cuando intentas probar la unidad entonces va a PIA cuando intentas depurarla,corregirla o mejorarla.</target>
        </trans-unit>
        <trans-unit id="03c69b7e7f3a328ec62260ac5b83e4208fc9daa7" translate="yes" xml:space="preserve">
          <source>Firstly a class and its collaborators should firstly perform their intended purpose rather than focusing on deoendents. Lifecycle management (when instances are creared snd when they go out of scope) should not be part of the cladses responsibility. The accepted best practice for this is to craft or configure a new component to manage dependencies using dependency injection.</source>
          <target state="translated">En primer lugar,una clase y sus colaboradores deben cumplir con su propósito,en lugar de centrarse en los deoendentes.La gestión del ciclo de vida (cuando se crean instancias y cuando se salen del ámbito de aplicación)no debe ser parte de la responsabilidad de la clase.La mejor práctica aceptada para ello es crear o configurar un nuevo componente para gestionar las dependencias mediante la inyección de dependencia.</target>
        </trans-unit>
        <trans-unit id="f806d6e7027975cfa32f2da9b819f89561ed7538" translate="yes" xml:space="preserve">
          <source>From a pratical point of view, &lt;strong&gt;a singleton is a trade-off developing time vs complexity&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Desde un punto de vista pr&amp;aacute;ctico, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;un singleton es una compensaci&amp;oacute;n entre el tiempo de desarrollo y la complejidad&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7e4ebfb74a941702ad7c541653b7cf63d07cfd67" translate="yes" xml:space="preserve">
          <source>Global access is not otherwise provided for</source>
          <target state="translated">El acceso mundial no está previsto de otra manera</target>
        </trans-unit>
        <trans-unit id="0791848a4b5d984612e8fff52eab6e825186b998" translate="yes" xml:space="preserve">
          <source>Global is bad because:</source>
          <target state="translated">Global es malo porque:</target>
        </trans-unit>
        <trans-unit id="a8f72bd9a9edbfe0b449bc6c4a04ae6281432fa1" translate="yes" xml:space="preserve">
          <source>GoF Singletons in opposite to IoC Singletons are supposed to expose &quot;singletonity&quot; in the interface through getInstance() method, and so that they suffer from everything said above.</source>
          <target state="translated">Los GoF Singletons en oposición a los IoC Singletons se supone que exponen la &quot;singletonidad&quot; en la interfaz a través del método getInstance(),y por lo tanto sufren de todo lo dicho anteriormente.</target>
        </trans-unit>
        <trans-unit id="2f78eafa156d6302e52dc35c57960b25dc9c1d2b" translate="yes" xml:space="preserve">
          <source>Here is one more thing about singletons which nobody said yet.</source>
          <target state="translated">Aquí hay una cosa más sobre los solteros que nadie ha dicho todavía.</target>
        </trans-unit>
        <trans-unit id="72f2af37f60d95ea1ed5c8a2e82b0cba6c9da498" translate="yes" xml:space="preserve">
          <source>However, there are &quot;application scope services&quot; (think about a messaging system that makes components interact) - this CALLS for a singleton, a &quot;MessageQueue&quot; - class that has a method &quot;SendMessage(...)&quot;.</source>
          <target state="translated">Sin embargo,hay &quot;servicios de ámbito de aplicación&quot; (piensa en un sistema de mensajería que hace que los componentes interactúen)-esto LLAMA a un singleton,una &quot;Cola de mensajes&quot;-clase que tiene un método &quot;SendMessage(...)&quot;.</target>
        </trans-unit>
        <trans-unit id="b07296f711652fac02f0fab15864ed43fdad4def" translate="yes" xml:space="preserve">
          <source>I believe the backlash is due to its overuse which, in turn, is due to the fact that it's the easiest pattern to understand and implement.</source>
          <target state="translated">Creo que el contragolpe se debe a su uso excesivo que,a su vez,se debe al hecho de que es el patrón más fácil de entender e implementar.</target>
        </trans-unit>
        <trans-unit id="d547e25d316e8eb86b74c45c720d779a57572804" translate="yes" xml:space="preserve">
          <source>I believe this sort of pattern is called &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt; and is generally considered a good thing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Creo que este tipo de patr&amp;oacute;n se llama &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;inyecci&amp;oacute;n de dependencia&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y generalmente se considera algo bueno.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29f3a8be4925f9bbf7c6e50d2f3ca550171d47d4" translate="yes" xml:space="preserve">
          <source>I now prefer to design around an &lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;inversion of control&lt;/a&gt; (IoC) container and allow the the lifetimes to be controlled by the container. This gives you the benefit of the classes that depend on the instance to be unaware of the fact that there is a single instance. The lifetime of the singleton can be changed in the future. Once such example I encountered recently was an easy adjustment from single threaded to multi-threaded.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora prefiero dise&amp;ntilde;ar alrededor de un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;contenedor &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;de inversi&amp;oacute;n de control&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (IoC) y permitir que las vidas sean controladas por el contenedor. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto le brinda el beneficio de que las clases que dependen de la instancia desconocen el hecho de que hay una sola instancia. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La vida &amp;uacute;til del singleton se puede cambiar en el futuro. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una vez que el ejemplo que encontr&amp;eacute; recientemente fue un ajuste f&amp;aacute;cil de un solo subproceso a varios subprocesos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dfa4071ddcee15c06454d19f5b9208a7488963bb" translate="yes" xml:space="preserve">
          <source>I think the confusion is caused by the fact that people don't know the real application of the Singleton pattern. I can't stress this enough. Singleton is &lt;strong&gt;not&lt;/strong&gt; a pattern to wrap globals. Singleton pattern should only be used to guarantee that &lt;strong&gt;one and only one instance of a given class&lt;/strong&gt; exists during run time.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Creo que la confusi&amp;oacute;n es causada por el hecho de que las personas no conocen la aplicaci&amp;oacute;n real del patr&amp;oacute;n Singleton. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No puedo enfatizar esto lo suficiente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singleton &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;un patr&amp;oacute;n para envolver globales. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El patr&amp;oacute;n Singleton solo debe usarse para garantizar que &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;existe &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;una sola instancia de una clase determinada&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; durante el tiempo de ejecuci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83f36ca8c3ae39ba88c4227bcd9107ebd8714e28" translate="yes" xml:space="preserve">
          <source>I'd like to address the 4 points in the accepted answer, hopefully someone can explain why I'm wrong.</source>
          <target state="translated">Me gustaría abordar los 4 puntos de la respuesta aceptada,espero que alguien pueda explicar por qué me equivoco.</target>
        </trans-unit>
        <trans-unit id="480115f4bdecc954d3ef342b5b307329636f1cf6" translate="yes" xml:space="preserve">
          <source>I'm not going to comment on the good/evil argument, but I haven't used them since &lt;a href=&quot;http://en.wikipedia.org/wiki/Spring_Framework&quot;&gt;Spring&lt;/a&gt; came along. Using &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt; has pretty much removed my requirements for singleton, servicelocators and factories. I find this a much more productive and clean environment, at least for the type of work I do (Java-based web applications).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No voy a comentar sobre el argumento del bien / el mal, pero no los he usado desde que &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;lleg&amp;oacute; la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Spring_Framework&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;primavera&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El uso de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la inyecci&amp;oacute;n de dependencia&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; pr&amp;aacute;cticamente ha eliminado mis requisitos para singleton, servicelocators y f&amp;aacute;bricas. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Me parece un entorno mucho m&amp;aacute;s productivo y limpio, al menos para el tipo de trabajo que hago (aplicaciones web basadas en Java).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b8f5ab505b9909495273b2e2d51e1a90612cf41" translate="yes" xml:space="preserve">
          <source>If ownership of the single instance, when and how initialization occurs, and global access are not issues, Singleton is not sufficiently interesting.</source>
          <target state="translated">Si la propiedad de la instancia única,el momento y la forma en que se produce la inicialización,y el acceso mundial no son problemas,Singleton no es suficientemente interesante.</target>
        </trans-unit>
        <trans-unit id="06cbcc38cd7b375e6eb3143e88b5e310d19f2f21" translate="yes" xml:space="preserve">
          <source>If you avoid those mistakes, Singletons can still be a PITA, bit it is ready to see a lot of the worst problems are significantly mitigated. Imagine a Java Singleton, that is explicitly defined as once per classloader (which means it needs a thread safety policy), with defined creation and destruction methods and a life cycle that dictates when and how they get invoked, and whose &quot;instance&quot; method has package protection so it is generally accessed through other, non-global objects. Still a potential source of trouble, but certainly much less trouble.</source>
          <target state="translated">Si se evitan esos errores,Singletons puede seguir siendo un PITA,aunque está listo para ver que muchos de los peores problemas se mitigan significativamente.Imaginemos un Singleton de Java,que se define explícitamente como una vez por cargador de clase (lo que significa que necesita una política de seguridad de hilos),con métodos definidos de creación y destrucción y un ciclo de vida que dicta cuándo y cómo se invocan,y cuyo método de &quot;instancia&quot; tiene protección de paquete,por lo que generalmente se accede a él a través de otros objetos no globales.Sigue siendo una fuente potencial de problemas,pero ciertamente de muchos menos problemas.</target>
        </trans-unit>
        <trans-unit id="3a1237cb413fdb4c46831101c6617de6e2895e61" translate="yes" xml:space="preserve">
          <source>If you have some resource that</source>
          <target state="translated">Si tienes algún recurso que</target>
        </trans-unit>
        <trans-unit id="5aa9787a4fcf5e46b59e52938d4c6b3343093698" translate="yes" xml:space="preserve">
          <source>If you know your application won't change that much they are pretty OK to go with. Just know that you may need to refactor things up if your requirements change in an unexpected way (which is pretty OK in most cases).</source>
          <target state="translated">Si sabes que tu solicitud no va a cambiar mucho,está bien que vayas con ellos.Sólo sepa que puede necesitar refactorizar las cosas si sus requisitos cambian de manera inesperada (lo cual está bastante bien en la mayoría de los casos).</target>
        </trans-unit>
        <trans-unit id="28522cf8f3941ff8eed8d87379a03a7891c58392" translate="yes" xml:space="preserve">
          <source>If you're passing an object through 10 functions in a call stack just to avoid a singleton, is that so great?</source>
          <target state="translated">Si pasas un objeto a través de 10 funciones en una pila de llamadas sólo para evitar un solo botón,¿es eso tan genial?</target>
        </trans-unit>
        <trans-unit id="a1b6572af45baab99438b33d0afceb089e21a8ae" translate="yes" xml:space="preserve">
          <source>In a &lt;a href=&quot;https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29&quot;&gt;garbage collected&lt;/a&gt; environment singletons can quickly become an issue with regard to memory management.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;entorno de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;recolecci&amp;oacute;n de basura,&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; los singletons pueden convertirse r&amp;aacute;pidamente en un problema con respecto a la administraci&amp;oacute;n de la memoria.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="557c214439df24b6d9a6e6fb3a93c9584d0cf0e3" translate="yes" xml:space="preserve">
          <source>In most cases &quot;singletonity&quot; is a detail of implementation for some class rather than characteristic of its interface. Inversion of Control Container may hide this characteristic from class users; you just need to mark your class as a singleton (with &lt;code&gt;@Singleton&lt;/code&gt; annotation in Java for example) and that's it; IoCC will do the rest. You don't need to provide global access to your singleton instance because the access is already managed by IoCC. Thus there is nothing wrong with IoC Singletons.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En la mayor&amp;iacute;a de los casos, &quot;singletonity&quot; es un detalle de implementaci&amp;oacute;n para alguna clase m&amp;aacute;s que una caracter&amp;iacute;stica de su interfaz. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La inversi&amp;oacute;n del contenedor de control puede ocultar esta caracter&amp;iacute;stica a los usuarios de la clase; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;solo necesita marcar su clase como singleton (con la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anotaci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Singleton&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en Java, por ejemplo) y &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;listo&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoCC har&amp;aacute; el resto. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No necesita proporcionar acceso global a su instancia de singleton porque el acceso ya est&amp;aacute; administrado por IoCC. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, no hay nada malo con IoC Singletons.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3adb08488e419152c707b1fe00f30e55841e099" translate="yes" xml:space="preserve">
          <source>In practice the &lt;em&gt;Singleton&lt;/em&gt; pattern is just a programming technique that is a useful part of your toolkit of concepts. From time to time you might find it is the ideal solution and so use it. But using it just so you can boast about using a &lt;em&gt;design pattern&lt;/em&gt; is just as stupid as refusing to ever use it because it is just a &lt;em&gt;global&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En la pr&amp;aacute;ctica, el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;patr&amp;oacute;n &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singleton&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es solo una t&amp;eacute;cnica de programaci&amp;oacute;n que es una parte &amp;uacute;til de su conjunto de herramientas de conceptos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De vez en cuando puede encontrar que es la soluci&amp;oacute;n ideal y, por lo tanto, &amp;uacute;sela. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero usarlo solo para jactarse de usar un &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;patr&amp;oacute;n de dise&amp;ntilde;o&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es tan est&amp;uacute;pido como negarse a usarlo porque es simplemente &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;global&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="175eb0b638a248bbeee6c8c6d26cdf7f0bb9fb17" translate="yes" xml:space="preserve">
          <source>In the last statement he's referring to the blog's concept of 'singletons are liars'.</source>
          <target state="translated">En la última declaración se refiere al concepto del blog de &quot;los solteros son unos mentirosos&quot;.</target>
        </trans-unit>
        <trans-unit id="82447f21debdc151d1cac2b4db16313ffdc010f5" translate="yes" xml:space="preserve">
          <source>It is also considered an anti-pattern by some people, who feel that it is overly used, introducing unnecessary limitations in situations where a sole instance of a class is not actually required.[1][2][3][4]</source>
          <target state="translated">También es considerado un antipatrón por algunas personas,que sienten que se utiliza en exceso,introduciendo limitaciones innecesarias en situaciones en las que no se requiere una sola instancia de una clase.[1][2][3][4]</target>
        </trans-unit>
        <trans-unit id="4b4cbb456545aecd6262079cc8061bb243412865" translate="yes" xml:space="preserve">
          <source>It is easily (ab)used as a global variable.</source>
          <target state="translated">Es fácilmente (ab)utilizado como una variable global.</target>
        </trans-unit>
        <trans-unit id="faa6d5d204dc7dbc91d17f723a964f011cefcf2c" translate="yes" xml:space="preserve">
          <source>It's not that singletons themselves are bad but the GoF design pattern is. The only really argument that is valid is that the GoF design pattern doesn't lend itself in regards to testing, especially if tests are run in parallel.</source>
          <target state="translated">No es que los solteros sean malos en sí mismos,pero el patrón de diseño del GoF sí lo es.El único argumento realmente válido es que el patrón de diseño del GoF no se presta a ser probado,especialmente si las pruebas se realizan en paralelo.</target>
        </trans-unit>
        <trans-unit id="83b20cebddd201ff984745ea240973a2c8a8348d" translate="yes" xml:space="preserve">
          <source>It's rare that you need a singleton. The reason they're bad is that they feel like a &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global&lt;/a&gt; and they're a fully paid up member of the GoF &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;Design Patterns&lt;/a&gt;&lt;/em&gt; book.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es raro que necesites un singleton. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La raz&amp;oacute;n por la que son malos es que se sienten como un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;miembro &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;global&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y son miembros totalmente pagados del &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;libro &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;GoF &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Design Patterns&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="462d96d6490ecf7f21c7d082c3a673c2571d2b5d" translate="yes" xml:space="preserve">
          <source>Lazy initialization is desirable</source>
          <target state="translated">La inicialización perezosa es deseable</target>
        </trans-unit>
        <trans-unit id="2a3024554beb09837fba1b03b0332e6065ffafd1" translate="yes" xml:space="preserve">
          <source>Like any pattern though... Think about it and consider if its use in the given situation is inappropriate or not... Rules are made to be broken usually, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;patterns&lt;/a&gt; should not be applied willy nilly without thought.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, al igual que cualquier patr&amp;oacute;n ... Pi&amp;eacute;nselo y considere si su uso en la situaci&amp;oacute;n dada es inapropiado o no ... Por lo general, las reglas deben romperse, y los &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;patrones&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no se deben aplicar de ninguna manera sin pensarlo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="73f9ccfc3d9b951a95cf8d8c870ebe0d33f5c1e5" translate="yes" xml:space="preserve">
          <source>Make sure that the Singleton is thread-safe.  That's a given.</source>
          <target state="translated">Asegúrate de que el Singleton es seguro.Eso es un hecho.</target>
        </trans-unit>
        <trans-unit id="99db60c95b1b127007a4512df8fd7cb4dcab18fb" translate="yes" xml:space="preserve">
          <source>Make sure the class that will be used as a singleton implements an interface. This allows stubs or mocks to be implemented using the same interface</source>
          <target state="translated">Asegúrate de que la clase que se utilizará como un singleton implemente una interfaz.Esto permite que los resguardos o las burlas se implementen usando la misma interfaz</target>
        </trans-unit>
        <trans-unit id="906d44ceac744e478b26c3dbfd73fea4bc065db7" translate="yes" xml:space="preserve">
          <source>MessageQueue.Current.RegisterReceiver(this);</source>
          <target state="translated">MessageQueue.Current.RegisterReceiver(this);</target>
        </trans-unit>
        <trans-unit id="e2f175accfe9e7aa85d6a7640719330d57950fde" translate="yes" xml:space="preserve">
          <source>MessageQueue.Current.SendMessage(new MailArrivedMessage(...));</source>
          <target state="translated">Cola de mensajes.Actual.EnviarMensaje (nuevo MailArrivedMessage(...));</target>
        </trans-unit>
        <trans-unit id="e8f815cd223912c6028928f4b3ad623f1bd5368f" translate="yes" xml:space="preserve">
          <source>Misko Hevery, from Google, has some interesting articles on exactly this topic...</source>
          <target state="translated">Misko Hevery,de Google,tiene algunos artículos interesantes sobre este tema...</target>
        </trans-unit>
        <trans-unit id="aee4bcdfd19cd56b5aca74568fc7d31720489ef4" translate="yes" xml:space="preserve">
          <source>My answer on how Singletons are bad is always, &quot;they are hard to do right&quot;. Many of the foundational components of languages are singletons (classes, functions, namespaces and even operators), as are components in other aspects of computing (localhost, default route, virtual filesystem, etc.), and it is not by accident. While they cause trouble and frustration from time to time, they also can make a lot of things work a LOT better.</source>
          <target state="translated">Mi respuesta sobre cómo los solteros son malos es siempre,&quot;son difíciles de hacer bien&quot;.Muchos de los componentes fundacionales de los lenguajes son singletons (clases,funciones,espacios de nombres e incluso operadores),al igual que los componentes de otros aspectos de la informática (localhost,ruta por defecto,sistema de archivos virtual,etc.),y no es por accidente.Aunque causan problemas y frustraciones de vez en cuando,también pueden hacer que muchas cosas funcionen MUCHO mejor.</target>
        </trans-unit>
        <trans-unit id="a53607ed2c21f47236870353aed7c4680124034a" translate="yes" xml:space="preserve">
          <source>No class should be thought of as a singleton but rather that should be an aplication of it's usage or how it is used to configure dependents. For a quick and nasty this does not matter - just luke hardcoding say file paths does not matter but for bigger applications such dependencies need to be factored out and managed in more appropriate way using DI.</source>
          <target state="translated">Ninguna clase debe ser pensada como un singleton,sino que debe ser una aplicación de su uso o cómo se utiliza para configurar los dependientes.Para un rápido y desagradable esto no importa-sólo luke hardcoding dice que las rutas de los archivos no importan pero para aplicaciones más grandes tales dependencias deben ser factorizadas y administradas de manera más apropiada usando DI.</target>
        </trans-unit>
        <trans-unit id="6c62e40008de69cb522d6cdf069852b3341a3b9d" translate="yes" xml:space="preserve">
          <source>Note: Coding Without Comments is no longer valid.  However, The article being linked to has been cloned by another user.</source>
          <target state="translated">Nota:La codificación sin comentarios ya no es válida.Sin embargo,el artículo al que está vinculado ha sido clonado por otro usuario.</target>
        </trans-unit>
        <trans-unit id="6ee7cdaf99a266962c9e299de0be53abaae53a44" translate="yes" xml:space="preserve">
          <source>Now the game goes from friendly dice-rolling to serious business. Bob has been made the example of failure and Joe and Ed don't want to end up like 'that guy'. So, being the leading player you, all of a sudden, become the enemy. Joe and Ed start practicing under-the-table trades, behind-the-back money injections, undervalued house-swapping and generally anything to weaken you as a player until one of them rises to the top.</source>
          <target state="translated">Ahora el juego pasa de un juego de dados amistoso a un negocio serio.Bob se ha convertido en un ejemplo de fracaso y Joe y Ed no quieren terminar como &quot;ese tipo&quot;.Así que,siendo el jugador principal,de repente te conviertes en el enemigo.Joe y Ed empiezan a practicar operaciones por debajo de la mesa,inyecciones de dinero a escondidas,intercambio de casas infravaloradas y,en general,cualquier cosa que te debilite como jugador hasta que uno de ellos llegue a la cima.</target>
        </trans-unit>
        <trans-unit id="5a2e70213e768863cad258a0f87428f2c1f107fa" translate="yes" xml:space="preserve">
          <source>Now, consider you want to set up multiple instances of your web application in a cluster. Now, you suddenly have something like this:</source>
          <target state="translated">Ahora,considere que quiere configurar múltiples instancias de su aplicación web en un clúster.Ahora,de repente tienes algo como esto:</target>
        </trans-unit>
        <trans-unit id="d0994fb980677959b214d2c3749362ba6e34a5e3" translate="yes" xml:space="preserve">
          <source>Now, for anybody who hasn't &lt;strong&gt;really&lt;/strong&gt; played monopoly, these standards are ideal at best. A defeat in monopoly is hard to swallow because, monopoly is about money, if you lose you have to painstakingly watch the rest of the players finish the game, and losses are usually swift and crushing. So, the rules usually get twisted at some point to serve the self-interest of some of the players at the expense of the others.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora, para cualquiera que &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;realmente&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no haya &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;jugado al monopolio, estos est&amp;aacute;ndares son ideales en el mejor de los casos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una derrota en el monopolio es dif&amp;iacute;cil de tragar porque, el monopolio se trata de dinero, si pierde tiene que ver minuciosamente al resto de los jugadores terminar el juego, y las p&amp;eacute;rdidas suelen ser r&amp;aacute;pidas y aplastantes. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, las reglas generalmente se tuercen en alg&amp;uacute;n momento para servir el inter&amp;eacute;s propio de algunos de los jugadores a expensas de los dem&amp;aacute;s.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8251537426b4a38c0fda5146bbbfce04abd246d3" translate="yes" xml:space="preserve">
          <source>Of course this is an example of a bad usage of a singleton. But the message of this example is: You can not rely that there is exactly one instance of a singleton in your application - especially when it comes to clustering.</source>
          <target state="translated">Por supuesto,este es un ejemplo de un mal uso de un singleton.Pero el mensaje de este ejemplo es:No se puede confiar en que haya exactamente una instancia de un singleton en su aplicación-especialmente cuando se trata de la agrupación.</target>
        </trans-unit>
        <trans-unit id="12da2eb229cab6f3f45bf52f45d05c18b7744c03" translate="yes" xml:space="preserve">
          <source>Often software gets more complicated it makes sense to have multiple independent instances of the Singleton class with different state. Committing code to simply grab the singleton is wrong in such cases. Using &lt;code&gt;Singleton.getInstance()&lt;/code&gt; might be ok for small simple systems but it doesn't work/scale when one might need a different instance of the same class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A menudo, el software se vuelve m&amp;aacute;s complicado, tiene sentido tener m&amp;uacute;ltiples instancias independientes de la clase Singleton con un estado diferente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Confirmar c&amp;oacute;digo para simplemente tomar el singleton es incorrecto en tales casos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El uso de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Singleton.getInstance()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; podr&amp;iacute;a estar bien para sistemas peque&amp;ntilde;os y simples, pero no funciona / escala cuando se necesita una instancia diferente de la misma clase.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="59b9e2cf09e0aebb2a5206089741000b279a7b53" translate="yes" xml:space="preserve">
          <source>One rather bad thing about singletons is that you can't extend them very easily. You basically have to build in some kind of &lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;decorator pattern&lt;/a&gt; or some such thing if you want to change their behavior. Also, if one day you want to have multiple ways of doing that one thing, it can be rather painful to change, depending on how you lay out your code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una cosa bastante mala acerca de los singletons es que no puedes extenderlos muy f&amp;aacute;cilmente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;B&amp;aacute;sicamente, debe incorporar alg&amp;uacute;n tipo de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;patr&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;decorador&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o algo similar si desea cambiar su comportamiento. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, si un d&amp;iacute;a desea tener m&amp;uacute;ltiples formas de hacer eso, puede ser bastante doloroso cambiar, dependiendo de c&amp;oacute;mo dise&amp;ntilde;e su c&amp;oacute;digo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce175dbf29b8e8c973f5eaab4951c1d4efea6362" translate="yes" xml:space="preserve">
          <source>One thing to note, if you DO use singletons, try to pass them in to whoever needs them rather than have them access it directly... Otherwise if you ever choose to have multiple ways of doing the thing that singleton does, it will be rather difficult to change as each class embeds a dependency if it accesses the singleton directly.</source>
          <target state="translated">Una cosa a tener en cuenta,si usas singletons,intenta pasarlos a quien los necesite en lugar de que accedan directamente...De lo contrario,si alguna vez eliges tener múltiples formas de hacer lo que hace el singleton,será bastante difícil de cambiar ya que cada clase incorpora una dependencia si accede al singleton directamente.</target>
        </trans-unit>
        <trans-unit id="b46465a6d50ce5de3f512c57fbb175a4dfef1083" translate="yes" xml:space="preserve">
          <source>Ownership of the single instance cannot be reasonably assigned</source>
          <target state="translated">La propiedad de la instancia única no puede asignarse razonablemente</target>
        </trans-unit>
        <trans-unit id="715eaba002359c1f45ac2b34e6e9e70374fe8629" translate="yes" xml:space="preserve">
          <source>Paraphrased from Brian Button:</source>
          <target state="translated">Parafraseado de Brian Button:</target>
        </trans-unit>
        <trans-unit id="1252eeb8091f8d534d0de0657525d9e409460566" translate="yes" xml:space="preserve">
          <source>People think Singleton is evil because they are using it for globals. It is because of this confusion that Singleton is looked down upon. Please, don't confuse Singletons and globals. If used for the purpose it was intended for, you will gain extreme benefits from the Singleton pattern.</source>
          <target state="translated">La gente piensa que Singleton es malo porque lo usan para los globos.Es debido a esta confusión que Singleton es despreciado.Por favor,no confundan a los Singletons con los Globales.Si se usa para el propósito para el que fue diseñado,obtendrás beneficios extremos del patrón Singleton.</target>
        </trans-unit>
        <trans-unit id="4488e947e889410b9a191f1d7b72296670a169df" translate="yes" xml:space="preserve">
          <source>Personally, I have seen a programmer abuse a singleton by using it as some sort of twisted cross-thread database store within an application. Having worked on the code directly, I can attest that it was a slow (because of all the thread locks needed to make it thread-safe) and a nightmare to work on (because of the unpredictable/intermittent nature of synchronization bugs), and nearly impossible to test under 'production' conditions. Sure, a system could have been developed using polling/signaling to overcome some of the performance issues but that wouldn't solve the issues with testing and, why bother when a 'real' database can already accomplish the same functionality in a much more robust/scalable manner.</source>
          <target state="translated">Personalmente,he visto a un programador abusar de un singleton usándolo como una especie de almacén de base de datos de hilos cruzados retorcidos dentro de una aplicación.Habiendo trabajado en el código directamente,puedo atestiguar que fue un lento (debido a todos los bloqueos de hilos necesarios para hacerlo seguro)y una pesadilla en la que trabajar (debido a la naturaleza impredecible e intermitente de los errores de sincronización),y casi imposible de probar en condiciones de &quot;producción&quot;.Claro que se podría haber desarrollado un sistema utilizando señales de sondeo para superar algunos de los problemas de rendimiento,pero eso no resolvería los problemas con las pruebas y,¿por qué molestarse cuando una base de datos &quot;real&quot; ya puede lograr la misma funcionalidad de una manera mucho más robusta y escalable?</target>
        </trans-unit>
        <trans-unit id="91f89d4db256dc247d870f9462f9bc0c69cb74b5" translate="yes" xml:space="preserve">
          <source>Please support your answers with &quot;&lt;em&gt;facts, references, or specific expertise&lt;/em&gt;&quot;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Respalde sus respuestas con &quot; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;hechos, referencias o experiencia espec&amp;iacute;fica&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="57c71d6ec57b7a7097898abfe53ac93d158a60a4" translate="yes" xml:space="preserve">
          <source>Rather than using singletons, you should pass all the needed utility objects from function to function. That can be simplified if you wrap all them into a helper object, like this:</source>
          <target state="translated">En lugar de usar monolitos,deberías pasar todos los objetos utilitarios necesarios de una función a otra.Eso puede simplificarse si los envuelves en un objeto de ayuda,como este:</target>
        </trans-unit>
        <trans-unit id="e244aca5c6e08cefb560ff05106c72a053cfd258" translate="yes" xml:space="preserve">
          <source>Recent article on this subject by Chris Reath at &lt;a href=&quot;http://www.codingwithoutcomments.com/&quot;&gt;Coding Without Comments&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Art&amp;iacute;culo reciente sobre este tema por Chris Reath en &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.codingwithoutcomments.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Codificaci&amp;oacute;n sin comentarios&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aad46f2b1a8beb2238db459eb8a7984bc88e9ac7" translate="yes" xml:space="preserve">
          <source>References (only relevant references from the article)</source>
          <target state="translated">Referencias (sólo las referencias pertinentes del artículo)</target>
        </trans-unit>
        <trans-unit id="52f59ac0b8d614ab6b3b23685d4c5ee578e87153" translate="yes" xml:space="preserve">
          <source>Regarding unit tests:</source>
          <target state="translated">En cuanto a las pruebas de la unidad:</target>
        </trans-unit>
        <trans-unit id="030d697ac3114fa5e0f1fd803ceabd44c98c1ff2" translate="yes" xml:space="preserve">
          <source>Sadly, rather than teaching good examples of how to do Singletons. We teach bad examples, let programmers run off using them for a while, and then tell them they are a bad design pattern.</source>
          <target state="translated">Tristemente,en lugar de enseñar buenos ejemplos de cómo hacer Singletons.Enseñamos malos ejemplos,dejamos que los programadores los usen por un tiempo,y luego les decimos que son un mal patrón de diseño.</target>
        </trans-unit>
        <trans-unit id="e0aa79b2c282a159104c446619a487d9dd85bee2" translate="yes" xml:space="preserve">
          <source>See Wikipedia Singleton_pattern</source>
          <target state="translated">Ver Wikipedia Singleton_pattern</target>
        </trans-unit>
        <trans-unit id="d433b5c0fbdc7c1d72fe35c9443488ae8c3ee54e" translate="yes" xml:space="preserve">
          <source>Single Responsibility Principle: I think this is a bit vague and depends on your definition of responsibility. A relevant question would be, why does adding this &lt;em&gt;specific&lt;/em&gt; &quot;responsibility&quot; to a class matter?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Principio de responsabilidad &amp;uacute;nica: creo que esto es un poco vago y depende de su definici&amp;oacute;n de responsabilidad. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una pregunta relevante ser&amp;iacute;a, &amp;iquest;por qu&amp;eacute; es importante agregar esta &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot;responsabilidad&quot; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;espec&amp;iacute;fica&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a una clase?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="26ed3cf8e352b5e7d2bf4aa5387c599ce82c10d1" translate="yes" xml:space="preserve">
          <source>Singleton is a pattern and can be used or abused just like any other tool.</source>
          <target state="translated">Singleton es un patrón y puede ser usado o abusado como cualquier otra herramienta.</target>
        </trans-unit>
        <trans-unit id="4b9b5722cbaf5d7c5ad21d8e14a4714334867513" translate="yes" xml:space="preserve">
          <source>Singleton is not about single instance!</source>
          <target state="translated">Singleton no se trata de una sola instancia!</target>
        </trans-unit>
        <trans-unit id="f2e14fa8aa12ee4d53b03570c0e52377418420bf" translate="yes" xml:space="preserve">
          <source>Singleton should be considered only if all three of the following criteria are satisfied:</source>
          <target state="translated">Singleton debe considerarse sólo si se cumplen los tres criterios siguientes:</target>
        </trans-unit>
        <trans-unit id="f03a7ee73d533121d4ef48caf72e5289060b733f" translate="yes" xml:space="preserve">
          <source>Singletons &lt;em&gt;aren't&lt;/em&gt; evil, if you use it &lt;em&gt;properly&lt;/em&gt; &amp;amp; &lt;em&gt;minimally&lt;/em&gt;. There are lot of other good design patterns which replaces the needs of singleton at some point (&amp;amp; also gives best results). But some programmers are unaware of those good patterns &amp;amp; uses the singleton for all the cases which makes the singleton evil for them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los singletons &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no son&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; malvados, si los usas &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;adecuadamente&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;iacute;nimamente&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hay muchos otros buenos patrones de dise&amp;ntilde;o que reemplazan las necesidades de singleton en alg&amp;uacute;n momento (y tambi&amp;eacute;n dan los mejores resultados). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero algunos programadores desconocen esos buenos patrones y usan el singleton para todos los casos, lo que hace que el singleton sea malo para ellos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4fd184f94d2ce9383e49a02b30f6641ff78181bb" translate="yes" xml:space="preserve">
          <source>Singletons are NOT bad. It's only bad when you make something globally unique that isn't globally unique.</source>
          <target state="translated">Los solteros NO son malos.Sólo es malo cuando haces algo globalmente único que no es globalmente único.</target>
        </trans-unit>
        <trans-unit id="b71ec8c276a2e03ed961206cd36c64bf09b91a25" translate="yes" xml:space="preserve">
          <source>Singletons are also a problem from a testing perspective. They tend to make isolated unit-tests difficult to write. &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;Inversion of control&lt;/a&gt;&lt;/strong&gt; (IoC) and &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt;&lt;/strong&gt; are patterns meant to overcome this problem in an object-oriented manner that lends itself to unit testing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los singletons tambi&amp;eacute;n son un problema desde una perspectiva de prueba. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tienden a dificultar la escritura de pruebas unitarias aisladas. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La inversi&amp;oacute;n de control&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (IoC) y &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la inyecci&amp;oacute;n de dependencia&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son patrones destinados a superar este problema de una manera orientada a objetos que se presta a pruebas unitarias.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="22357d29daa92c763bcdd62993b84e9e2aa5bd87" translate="yes" xml:space="preserve">
          <source>Singletons are also bad when it comes to &lt;strong&gt;clustering&lt;/strong&gt;. Because then, you do not have &quot;exactly one singleton&quot; in your application anymore.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los singletons tambi&amp;eacute;n son malos cuando se trata de &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;agrupamiento&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Porque entonces, ya no tienes &quot;exactamente un singleton&quot; en tu aplicaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="55a8b300eb18ba098facc7e6694024b774c6eac8" translate="yes" xml:space="preserve">
          <source>Singletons are bad from a purist point of view.</source>
          <target state="translated">Los solteros son malos desde un punto de vista purista.</target>
        </trans-unit>
        <trans-unit id="6571a82538f52d979f2b5e1853bbedb03b9ee0b8" translate="yes" xml:space="preserve">
          <source>Singletons are nothing more than global state. Global state makes it so your objects can secretly get hold of things which are not declared in their APIs, and, as a result, Singletons make your APIs into pathological liars.</source>
          <target state="translated">Los solteros no son más que un estado global.El estado global hace que sus objetos puedan apoderarse secretamente de cosas que no están declaradas en sus APIs,y,como resultado,los Singletons convierten sus APIs en mentirosos patológicos.</target>
        </trans-unit>
        <trans-unit id="3865fa07f2a264ee1aa7be8afa2532f27d7a83de" translate="yes" xml:space="preserve">
          <source>Singletons make it very hard to move from them to regular objects.</source>
          <target state="translated">Los solteros hacen que sea muy difícil pasar de ellos a los objetos normales.</target>
        </trans-unit>
        <trans-unit id="1a9fa24bd062fcce6fa98e671274d898304f4930" translate="yes" xml:space="preserve">
          <source>Singletons solve one (and only one) problem.</source>
          <target state="translated">Los solteros resuelven un (y sólo un)problema.</target>
        </trans-unit>
        <trans-unit id="9a182b1859f9fcbfb5d6f4df6317aa60d8f6db05" translate="yes" xml:space="preserve">
          <source>Singletons sometimes also complicate &lt;a href=&quot;https://en.wikipedia.org/wiki/Unit_testing&quot;&gt;unit testing&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los singletons a veces tambi&amp;eacute;n complican las &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Unit_testing&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pruebas unitarias&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="358417c2142a15d4609dbb8b247ce7663b733322" translate="yes" xml:space="preserve">
          <source>So basically:</source>
          <target state="translated">Así que básicamente:</target>
        </trans-unit>
        <trans-unit id="f4cf667760b907cb4a40918fa4336dd7f2460150" translate="yes" xml:space="preserve">
          <source>So you are sure that only one singleton in your application exists and all database go through this one and only &lt;code&gt;SingletonDao&lt;/code&gt;. Your production environment now looks like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, est&amp;aacute; seguro de que solo existe un singleton en su aplicaci&amp;oacute;n y que todas las bases de datos pasan por este &amp;uacute;nico &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SingletonDao&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Su entorno de producci&amp;oacute;n ahora se ve as&amp;iacute;:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e6fed6a4edfd3ed86633f28e6a268bd05113200a" translate="yes" xml:space="preserve">
          <source>So you're playing monopoly with friends Bob, Joe, and Ed. You're swiftly building your empire and consuming market share at an exponential rate. Your opponents are weakening and you start to smell blood (figuratively). Your buddy Bob put all of his money into gridlocking as many low-value properties as possible but his isn't receiving a high return on investment the way he expected. Bob, as a stroke of bad luck, lands on your Boardwalk and is excised from the game.</source>
          <target state="translated">Así que estás jugando al monopolio con tus amigos Bob,Joe y Ed.Estás construyendo rápidamente tu imperio y consumiendo la cuota de mercado a un ritmo exponencial.Tus oponentes se debilitan y empiezas a oler la sangre (en sentido figurado).Tu amigo Bob puso todo su dinero en atascar tantas propiedades de bajo valor como le fue posible,pero el suyo no está recibiendo un alto retorno de la inversión de la manera que esperaba.Bob,como un golpe de mala suerte,aterriza en tu Boardwalk y es expulsado del juego.</target>
        </trans-unit>
        <trans-unit id="668ff333ca3f47ff06a60a3fa60bdab697466e01" translate="yes" xml:space="preserve">
          <source>So, if a rulebook for a game accurately represented a singleton, the monopoly rulebook would be an example of abuse.</source>
          <target state="translated">Por lo tanto,si un libro de reglas de un juego representara con precisión un singleton,el libro de reglas del monopolio sería un ejemplo de abuso.</target>
        </trans-unit>
        <trans-unit id="0591c19bd97bf670bf6baa531c0194ef328f8f82" translate="yes" xml:space="preserve">
          <source>Some coding snobs look down on them as just a glorified global. In the same way that many people hate the &lt;em&gt;goto&lt;/em&gt; statement there are others that hate the idea of ever using a &lt;em&gt;global&lt;/em&gt;. I have seen several developers go to extraordinary lengths to avoid a &lt;em&gt;global&lt;/em&gt; because they considered using one as an admission of failure. Strange but true.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Algunos snobs de codificaci&amp;oacute;n los miran como un mundo glorificado. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De la misma manera que muchas personas odian la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;declaraci&amp;oacute;n de &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;goto&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , hay otros que odian la idea de usar un &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;global&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;He visto a varios desarrolladores hacer todo lo posible para evitar un &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;global&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; porque consideraron usar uno como una admisi&amp;oacute;n de falla. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Extra&amp;ntilde;o pero cierto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd23f939cf611c71e9dd37ad01d7843f484366f9" translate="yes" xml:space="preserve">
          <source>Stack Overflow especially seems to assume that everyone agrees that Singletons are evil. Why?</source>
          <target state="translated">Stack Overflow especialmente parece asumir que todos están de acuerdo en que los Singletons son malvados.¿Por qué?</target>
        </trans-unit>
        <trans-unit id="789f399c246ebf167b232e3114d18264ff6e67cc" translate="yes" xml:space="preserve">
          <source>That sounds weird, but &lt;strong&gt;now you have many singletons in your application&lt;/strong&gt;. And that is exactly what a singleton is not supposed to be: Having many objects of it. This is especially bad if you, as shown in this example, want to make synchronized calls to a database.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Eso suena extra&amp;ntilde;o, pero &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ahora tiene muchos singletons en su aplicaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y eso es exactamente lo que se supone que no es un singleton: tener muchos objetos de &amp;eacute;l. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto es especialmente malo si, como se muestra en este ejemplo, desea realizar llamadas sincronizadas a una base de datos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f2475bf5ffeb163ceac957a3d49d6036113fdd88" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;singleton pattern&lt;/a&gt; is a fully paid up member of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;GoF&lt;/a&gt;'s &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201633612&quot;&gt;patterns book&lt;/a&gt;, but it lately seems rather orphaned by the developer world. I still use quite a lot of singletons, especially for &lt;a href=&quot;https://en.wikipedia.org/wiki/Factory_method_pattern&quot;&gt;factory classes&lt;/a&gt;, and while you have to be a bit careful about multithreading issues (like any class actually), I fail to see why they are so awful.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;patr&amp;oacute;n Singleton&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un miembro totalmente desembolsado del &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;GoF&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 's &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201633612&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;libro de patrones&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , pero &amp;uacute;ltimamente parece bastante hu&amp;eacute;rfano por el mundo desarrollador. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Todav&amp;iacute;a uso muchos singletons, especialmente para &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Factory_method_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;las clases de f&amp;aacute;brica&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y aunque debes tener un poco de cuidado con los problemas de subprocesos m&amp;uacute;ltiples (como cualquier clase en realidad), no veo por qu&amp;eacute; son tan horribles.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8cc31c742f2cb350a70f7da3d43015596237acc3" translate="yes" xml:space="preserve">
          <source>The Singleton context is also really important. The defining characteristic of a Singleton is that there is &quot;only one&quot;, but the truth is it is &quot;only one&quot; within some kind of context/namespace. They are usually one of: one per thread, process, IP address or cluster, but can also be one per processor, machine, language namespace/class loader/whatever, subnet, Internet, etc.</source>
          <target state="translated">El contexto de Singleton también es muy importante.La característica que define a un Singleton es que hay &quot;sólo uno&quot;,pero la verdad es que es &quot;sólo uno&quot; dentro de algún tipo de espacio de nombres de contexto.Suelen ser uno de:uno por hilo,proceso,dirección IP o clúster,pero también puede ser uno por procesador,máquina,idioma nombre-cargador de la clase lo que sea,subred,Internet,etc.</target>
        </trans-unit>
        <trans-unit id="835608667d69c55c183b0cef18dafe7f7cbbb7a5" translate="yes" xml:space="preserve">
          <source>The bad part of a singleton is generally the user (or should I say the inappropriate use of a singleton for things it is not designed to do). The biggest offender is using a singleton as a fake global variable.</source>
          <target state="translated">La parte mala de un singleton es generalmente el usuario (o debería decir el uso inapropiado de un singleton para cosas para las que no está diseñado).El mayor infractor es usar un singleton como una falsa variable global.</target>
        </trans-unit>
        <trans-unit id="7b5cae7f5b6c184980327093d8fb76a94df99840" translate="yes" xml:space="preserve">
          <source>The other, less common, mistake is to ignore the Singleton lifestyle. Just because there is only one doesn't mean a Singleton is some omnipotent &quot;always was and always will be&quot;, nor is it generally desirable (objects without a begin and end violate all kinds of useful assumptions in code, and should be employed only in the most desperate of circumstances.</source>
          <target state="translated">El otro error,menos común,es ignorar el estilo de vida de los Singleton.El hecho de que sólo haya uno no significa que un Singleton sea un omnipotente &quot;siempre fue y siempre será&quot;,ni tampoco es generalmente deseable (los objetos sin principio ni fin violan todo tipo de supuestos útiles en el código,y deben emplearse sólo en las circunstancias más desesperadas.</target>
        </trans-unit>
        <trans-unit id="15878b09a961588056074d3687c3f79453c08e1e" translate="yes" xml:space="preserve">
          <source>The problems that singleton cause in testing is a symptom of their hard coded single usage case/environment. The test suite and the many tests are each individual and separate something that is not compatible with hardcoding a singleton.</source>
          <target state="translated">Los problemas que causan las pruebas de singleton son un síntoma de su duro entorno de caso de uso único codificado.El conjunto de pruebas y las muchas pruebas son cada una individual y separan algo que no es compatible con la codificación dura de un singleton.</target>
        </trans-unit>
        <trans-unit id="9833752e81fedcd533363bb0df3d89b4b006c284" translate="yes" xml:space="preserve">
          <source>The problems with singletons is the issue of increased scope and therefore &lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;coupling&lt;/a&gt;. There is no denying that there are some of situations where you do need access to a single instance, and it can be accomplished other ways.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El problema con los singletons es la cuesti&amp;oacute;n del aumento del alcance y, por lo tanto, del &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;acoplamiento&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No se puede negar que hay algunas situaciones en las que necesita acceso a una sola instancia, y se puede lograr de otras maneras.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="df4e6e231e99dc52f3bff603e6c0d51c55026c2a" translate="yes" xml:space="preserve">
          <source>The singleton pattern is not a problem in itself. The problem is that the pattern is often used by people developing software with object-oriented tools without having a solid grasp of OO concepts. When singletons are introduced in this context they tend to grow into unmanageable classes that contain helper methods for every little use.</source>
          <target state="translated">El patrón de los monótonos no es un problema en sí mismo.El problema es que el patrón es a menudo utilizado por personas que desarrollan software con herramientas orientadas a objetos sin tener una comprensión sólida de los conceptos de OO.Cuando los singletes se introducen en este contexto tienden a crecer en clases inmanejables que contienen métodos de ayuda para cada pequeño uso.</target>
        </trans-unit>
        <trans-unit id="465df7c70852f19533399cca69e2d76b8e5bf51e" translate="yes" xml:space="preserve">
          <source>The singleton should be simple in nature and not overly complicated.</source>
          <target state="translated">El singleton debe ser de naturaleza simple y no excesivamente complicado.</target>
        </trans-unit>
        <trans-unit id="d16f8b3beb1ad83c4ab0ac8578a45a586f69fe71" translate="yes" xml:space="preserve">
          <source>The two biggest screw ups I see are: treating it like a global &amp;amp; failing to define the Singleton closure.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los dos errores m&amp;aacute;s grandes que veo son: tratarlo como algo global y no definir el cierre Singleton.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3c54f8415cbbb0dc73616090c496cddc67a6a2d6" translate="yes" xml:space="preserve">
          <source>Then, instead of one of them winning, the process starts all over. All of a sudden, a finite set of rules becomes a moving target and the game degenerates into the type of social interactions that would make up the foundation of every high-rated reality TV show since Survivor. Why, because the rules are changing and there's no consensus on how/why/what they're supposed to represent, and more importantly, there's no one person making the decisions. Every player in the game, at that point, is making his/her own rules and chaos ensues until two of the players are too tired to keep up the charade and slowly give up.</source>
          <target state="translated">Entonces,en lugar de que uno de ellos gane,el proceso comienza de nuevo.De repente,un conjunto finito de reglas se convierte en un blanco móvil y el juego degenera en el tipo de interacciones sociales que constituirían la base de todos los programas de reality show de alto rating desde Survivor.Porque las reglas están cambiando y no hay consenso sobre cómo y por qué deben representar,y lo más importante,no hay una sola persona que tome las decisiones.Cada jugador del juego,en ese punto,está haciendo sus propias reglas y se produce un caos hasta que dos de los jugadores están demasiado cansados para seguir con la farsa y poco a poco se rinden.</target>
        </trans-unit>
        <trans-unit id="94f7d2aeef0065cc58a25d8c73e0e4361c409fc9" translate="yes" xml:space="preserve">
          <source>There aren't many examples. A log file is the big one. You don't want to just abandon a single log file. You want to flush, sync and close it properly. This is an example of a single shared resource that has to be managed.</source>
          <target state="translated">No hay muchos ejemplos.Un archivo de registro es el más grande.No quieres abandonar un solo archivo de registro.Quieres tirar de la cadena,sincronizarlo y cerrarlo correctamente.Este es un ejemplo de un único recurso compartido que debe ser administrado.</target>
        </trans-unit>
        <trans-unit id="f1ebb5ebafa456472c719f0e8d8a94135dd4aeb2" translate="yes" xml:space="preserve">
          <source>There is also the multi-threaded scenario where singletons can become a bottleneck as well as a synchronization issue.</source>
          <target state="translated">También existe el escenario multi-hilo donde los monolitos pueden convertirse en un cuello de botella así como en un problema de sincronización.</target>
        </trans-unit>
        <trans-unit id="ae8dc1fef3e4bf10c544a55f52796833a6c58b74" translate="yes" xml:space="preserve">
          <source>There is nothing inherently wrong with the pattern, assuming it is being used for some aspect of your model which is truly single.</source>
          <target state="translated">No hay nada intrínsecamente malo con el patrón,asumiendo que está siendo usado para algún aspecto de su modelo que es verdaderamente único.</target>
        </trans-unit>
        <trans-unit id="623dde36e233f0079e0085137f7deb08030d05b3" translate="yes" xml:space="preserve">
          <source>They are generally used as a global instance, why is that so bad? Because you hide the dependencies of your application in your code, instead of exposing them through the interfaces. Making something global to avoid passing it around is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_smell&quot;&gt;code smell&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Generalmente se usan como una instancia global, &amp;iquest;por qu&amp;eacute; es tan malo? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Porque oculta las dependencias de su aplicaci&amp;oacute;n en su c&amp;oacute;digo, en lugar de exponerlas a trav&amp;eacute;s de las interfaces. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hacer algo global para evitar pasarlo es un &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_smell&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;olor a c&amp;oacute;digo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba0e2b9616043f04660dd81d417cf5a73379fae0" translate="yes" xml:space="preserve">
          <source>They carry state around for the lifetime of the application. Another hit to testing since you can end up with a situation where tests need to be ordered which is a big no no for unit tests. Why? Because each unit test should be independent from the other.</source>
          <target state="translated">Llevan el estado durante toda la vida de la aplicación.Otro golpe a las pruebas,ya que puedes terminar con una situación en la que las pruebas deben ser ordenadas,lo cual es un gran no para las pruebas de unidad.¿Por qué? Porque cada unidad de prueba debe ser independiente de la otra.</target>
        </trans-unit>
        <trans-unit id="0e53548518905c337e4e3cda636d244bba6f2fa4" translate="yes" xml:space="preserve">
          <source>They inherently cause code to be tightly &lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;coupled&lt;/a&gt;. This makes faking them out under test rather difficult in many cases.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inherentemente hacen que el c&amp;oacute;digo est&amp;eacute; estrechamente &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;acoplado&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto hace que fingirlos bajo prueba sea bastante dif&amp;iacute;cil en muchos casos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eaf26fcd332b1240c30b63e8f6f491d24eac2db8" translate="yes" xml:space="preserve">
          <source>They violate the &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;single responsibility principle&lt;/a&gt;: by virtue of the fact that they control their own creation and lifecycle.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Violan el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;principio de responsabilidad &amp;uacute;nica&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : en virtud del hecho de que controlan su propia creaci&amp;oacute;n y ciclo de vida.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4c954584093770b03e88adcfe2a8a14d6ea33cb0" translate="yes" xml:space="preserve">
          <source>To start a game of monopoly, first:</source>
          <target state="translated">Para empezar un juego de monopolio,primero:</target>
        </trans-unit>
        <trans-unit id="ca4d354b99bc24d443677735e54833fae801e272" translate="yes" xml:space="preserve">
          <source>Too many people put objects which are not thread safe in a singleton pattern. I've seen examples of a DataContext (&lt;a href=&quot;http://en.wikipedia.org/wiki/Language_Integrated_Query#LINQ_to_SQL_.28formerly_called_DLINQ.29&quot;&gt;LINQ&amp;nbsp;to&amp;nbsp;SQL&lt;/a&gt;) done in a singleton pattern, despite the fact that the DataContext is not thread safe and is purely a unit-of-work object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Demasiadas personas colocan objetos que no son seguros para subprocesos en un patr&amp;oacute;n singleton. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;He visto ejemplos de un DataContext ( &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Language_Integrated_Query#LINQ_to_SQL_.28formerly_called_DLINQ.29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;LINQ to SQL&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) realizado en un patr&amp;oacute;n singleton, a pesar de que el DataContext no es seguro para subprocesos y es puramente un objeto de unidad de trabajo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="398efeaac4bc6e2faa9b4c57d3f5b8a9b52f18bc" translate="yes" xml:space="preserve">
          <source>Unlike other answers I don't want to talk about what is wrong with Singletons but to show you how powerful and awesome they are when used right!</source>
          <target state="translated">A diferencia de otras respuestas,no quiero hablar de lo que está mal con los Singletons sino mostrarte lo poderosos y asombrosos que son cuando se usan correctamente.</target>
        </trans-unit>
        <trans-unit id="24fb6a8b55fe7fc6662d5d9a56b3921a911f125a" translate="yes" xml:space="preserve">
          <source>Using a single instance of an class is a valid construct as long as you apply the following means in code:</source>
          <target state="translated">El uso de una sola instancia de una clase es una construcción válida siempre y cuando se apliquen los siguientes medios en código:</target>
        </trans-unit>
        <trans-unit id="7963242df7308adc2b3bd139cf37de9402e4f845" translate="yes" xml:space="preserve">
          <source>We've used Singletons in our solutions with a great deal of success that are testable ensuring deterministic behavior in parallel test run streams.</source>
          <target state="translated">Hemos usado Singletons en nuestras soluciones con mucho éxito que son comprobables asegurando un comportamiento determinante en corrientes paralelas de prueba.</target>
        </trans-unit>
        <trans-unit id="da1a3cb035699759f4a078c19b9474f88a6e772b" translate="yes" xml:space="preserve">
          <source>What is so bad about singletons</source>
          <target state="translated">¿Qué hay de malo en los solteros</target>
        </trans-unit>
        <trans-unit id="50f77dcdabdfd3afda084de7fd3d29d5dfae4194" translate="yes" xml:space="preserve">
          <source>When it comes to Singletons</source>
          <target state="translated">Cuando se trata de Singletons</target>
        </trans-unit>
        <trans-unit id="5c986765347b4b7bcb59761b18cd82e4e10e25e6" translate="yes" xml:space="preserve">
          <source>When you think you need a global, you're probably making a terrible design mistake.</source>
          <target state="translated">Cuando crees que necesitas un global,probablemente estás cometiendo un terrible error de diseño.</target>
        </trans-unit>
        <trans-unit id="4380b88b28be97d636237273ad914637b065daf2" translate="yes" xml:space="preserve">
          <source>When you write code using singletons, say, a logger or a database connection, and afterwards you discover you need more than one log or more than one database, you&amp;rsquo;re in trouble.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando escribe c&amp;oacute;digo usando singletons, digamos, un registrador o una conexi&amp;oacute;n de base de datos, y luego descubre que necesita m&amp;aacute;s de un registro o m&amp;aacute;s de una base de datos, est&amp;aacute; en problemas.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c2df5f04ca68555136da5ed4bf5bd73a7b744b5f" translate="yes" xml:space="preserve">
          <source>Why does it change how long the state lasts? Singletons can be created or destroyed manually, so the control is still there, and you can make the lifetime the same as a non-singleton object's lifetime would be.</source>
          <target state="translated">¿Por qué cambia el tiempo que dura el estado? Los monolitos pueden ser creados o destruidos manualmente,así que el control sigue estando ahí,y puedes hacer que la duración de la vida sea la misma que la de un objeto no monolito.</target>
        </trans-unit>
        <trans-unit id="801e82bda5401c9fc10a0749304f4d28624f7eec" translate="yes" xml:space="preserve">
          <source>Why does passing an object to a class make it more tightly coupled than using that object as a singleton from within the class?</source>
          <target state="translated">¿Por qué el paso de un objeto a una clase lo hace más apretado que el uso de ese objeto como un singleton desde dentro de la clase?</target>
        </trans-unit>
        <trans-unit id="a081d3ea69b57f4be3e26dd0623ed07dbee9e870" translate="yes" xml:space="preserve">
          <source>Why is hiding dependencies in your code bad? There are already dozens of hidden dependencies (C runtime calls, OS API calls, global function calls), and singleton dependencies are easy to find (search for instance()).</source>
          <target state="translated">¿Por qué es malo ocultar las dependencias en tu código? Ya hay docenas de dependencias ocultas (llamadas de tiempo de ejecución de C,llamadas a la API del SO,llamadas a funciones globales),y las dependencias de un solo botón son fáciles de encontrar (buscar por ejemplo()).</target>
        </trans-unit>
        <trans-unit id="2a2c34163aca31fcba0ec660cb7d173824ec9661" translate="yes" xml:space="preserve">
          <source>You can map &lt;code&gt;MyModel&lt;/code&gt; to &lt;code&gt;TestMyModel&lt;/code&gt; class that inherits it, everywhere when &lt;code&gt;MyModel&lt;/code&gt; will be injected you will get &lt;code&gt;TestMyModel&lt;/code&gt; instread.
 - &lt;strong&gt;Problem&lt;/strong&gt;: Singletons can cause memory leaks as they never disposed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede asignar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TestMyModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; clase que hereda, por todas partes cuando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se inyectar&amp;aacute; obtendr&amp;aacute; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TestMyModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; instread. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;- &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Problema&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : los Singletons pueden causar p&amp;eacute;rdidas de memoria ya que nunca se eliminaron.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="070c0a7e28e299b15bf2111d596305db704790a1" translate="yes" xml:space="preserve">
          <source>You can then do the following from all over the place:</source>
          <target state="translated">Entonces puedes hacer lo siguiente desde todas partes:</target>
        </trans-unit>
        <trans-unit id="19728079c61f5eb831b4385ced41da1096a537bb" translate="yes" xml:space="preserve">
          <source>^ Alex Miller. &lt;a href=&quot;http://tech.puredanger.com/2007/07/03/pattern-hate-singleton/&quot;&gt;Patterns I hate #1: Singleton&lt;/a&gt;, July 2007</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;^ Alex Miller. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://tech.puredanger.com/2007/07/03/pattern-hate-singleton/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Patrones que odio # 1: Singleton&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , julio de 2007&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fcb308952610da92d5ca908919ae791dc42bb049" translate="yes" xml:space="preserve">
          <source>^ J.B. Rainsberger, IBM. &lt;a href=&quot;http://www-128.ibm.com/developerworks/webservices/library/co-single.html&quot;&gt;Use your singletons wisely&lt;/a&gt;, July 2001</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;^ JB Rainsberger, IBM. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www-128.ibm.com/developerworks/webservices/library/co-single.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Usa tus singletons sabiamente&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , julio de 2001&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a788156b24d0bf82a606dee1b5227b07e47bd57" translate="yes" xml:space="preserve">
          <source>^ Scott Densmore. &lt;a href=&quot;http://blogs.msdn.com/scottdensmore/archive/2004/05/25/140827.aspx&quot;&gt;Why singletons are evil&lt;/a&gt;, May 2004</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;^ Scott Densmore. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.msdn.com/scottdensmore/archive/2004/05/25/140827.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por qu&amp;eacute; los solteros son malvados&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , mayo de 2004&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="484242ea0740f5e0e6cb94704610337fc5b2d075" translate="yes" xml:space="preserve">
          <source>^ Steve Yegge. &lt;a href=&quot;http://steve.yegge.googlepages.com/singleton-considered-stupid&quot;&gt;Singletons considered stupid&lt;/a&gt;, September 2004</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;^ Steve Yegge. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://steve.yegge.googlepages.com/singleton-considered-stupid&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singletons considerados est&amp;uacute;pidos&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , septiembre de 2004&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4d0ef9363f9acba6ca10c3f8aee3f26826f3a7be" translate="yes" xml:space="preserve">
          <source>a. It causes namespace conflict</source>
          <target state="translated">a.Causa un conflicto de nombres</target>
        </trans-unit>
        <trans-unit id="cf3fb1048c25336d3ef9b140e49d8db542d6678f" translate="yes" xml:space="preserve">
          <source>a. The explicit OO way of calling them, prevents the conflicts, so point a. is not an issue</source>
          <target state="translated">a.La forma explícita de llamarlos OO,previene los conflictos,así que el punto a.no es un problema</target>
        </trans-unit>
        <trans-unit id="332b0e2db7c52d7f329fd8b551eb950dee05cf67" translate="yes" xml:space="preserve">
          <source>b. It exposes the state in a unwarranted fashion</source>
          <target state="translated">b.Expone al estado de forma injustificada</target>
        </trans-unit>
        <trans-unit id="8b0eb367ee096fc9e4032dbd74741830957f9414" translate="yes" xml:space="preserve">
          <source>b. Singletons without state are (like factories) are not a problem. Singletons with state can again fall in two categories, those which are immutable or write once and read many (config/property files). These are not bad. Mutable Singletons, which are kind of reference holders are the ones which you are speaking of.</source>
          <target state="translated">b.Los solteros sin estado (como las fábricas)no son un problema.Los monolitos con estado pueden volver a caer en dos categorías,los que son inmutables o escriben una vez y leen muchas (archivos de configuración de propiedad).Estos no son malos.Los singletons mutables,que son una especie de portadores de referencia,son de los que se habla.</target>
        </trans-unit>
        <trans-unit id="ab43fcca553c6f3639b5bc191032d2a14dfec129" translate="yes" xml:space="preserve">
          <source>everybody is given an equal start at the beginning of the game</source>
          <target state="translated">a todos se les da un comienzo igual al principio del juego</target>
        </trans-unit>
        <trans-unit id="95c8fe92116d1f9c066ed43d5286406e2f4d1903" translate="yes" xml:space="preserve">
          <source>if they &lt;em&gt;do&lt;/em&gt; need be unit tested and
do need to change the implementation,
it's easy to change a class from
using a singleton to having the
singleton passed to it via dependency
injection.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;si &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;lo hacen&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; necesario an&amp;aacute;lisis unidad y la necesidad de hacer cambiar la implementaci&amp;oacute;n, es f&amp;aacute;cil cambiar una clase de uso de un producto &amp;uacute;nico a tener el singleton se le ha pasado a trav&amp;eacute;s de la inyecci&amp;oacute;n de dependencia.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1033f06a6e4d031a15155240c5dd06be1392c571" translate="yes" xml:space="preserve">
          <source>in classes that implement IMessageReceiver.</source>
          <target state="translated">en las clases que implementan el receptor de mensajes.</target>
        </trans-unit>
        <trans-unit id="63c67bcc3aa92c02e8148e8f0850d007f6f9d562" translate="yes" xml:space="preserve">
          <source>not all classes need to be unit
tested</source>
          <target state="translated">no todas las clases necesitan ser probadas en la unidad</target>
        </trans-unit>
        <trans-unit id="c6e595dac74db94f58cdd52fe08af8a5e9e4dc59" translate="yes" xml:space="preserve">
          <source>not all classes that need to be unit
tested need to change the
implementation of the singleton</source>
          <target state="translated">no todas las clases que necesitan ser probadas en la unidad necesitan cambiar la implementación del singleton</target>
        </trans-unit>
        <trans-unit id="422ff09c0e800e46347ae06765490e04994e4ce9" translate="yes" xml:space="preserve">
          <source>only one set of rules is presented to avoid confusion</source>
          <target state="translated">sólo se presenta un conjunto de reglas para evitar confusiones</target>
        </trans-unit>
        <trans-unit id="82b524d90dbcf160ddb4a560d1503123520ae7c4" translate="yes" xml:space="preserve">
          <source>rather than:</source>
          <target state="translated">en lugar de:</target>
        </trans-unit>
        <trans-unit id="7570901e3d970213dc3d6ba782f132be44f9d7f9" translate="yes" xml:space="preserve">
          <source>the rules aren't allowed to change throughout the game</source>
          <target state="translated">no se permite que las reglas cambien a lo largo del juego</target>
        </trans-unit>
        <trans-unit id="5983b274e96763d883f37aeae5f28173136c7ba9" translate="yes" xml:space="preserve">
          <source>we establish the rules first so everybody is on the same page</source>
          <target state="translated">establecemos las reglas primero para que todos estén en la misma página</target>
        </trans-unit>
        <trans-unit id="1ecf37b81e7ec4252f6722c1010864a51b2b0022" translate="yes" xml:space="preserve">
          <source>you need a &lt;strong&gt;singleton&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Necesitas un &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;singleton&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
