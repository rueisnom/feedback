<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/137975">
    <body>
      <group id="137975">
        <trans-unit id="4c0663d54c4595f36a4f42a6f5400ef2ef366a74" translate="yes" xml:space="preserve">
          <source>&quot;Making something global to avoid passing it around is a code smell.&quot; Why isn't passing something around to avoid making it a singleton a code smell?</source>
          <target state="translated">&quot;做一个全局性的东西,避免把它变成单子,是一种代码的味道。&quot; 为什么为了避免让某个东西传来传去是单子,不是代码味?</target>
        </trans-unit>
        <trans-unit id="286d74fd07d872b4e967ba01e43b9ca80c0210fc" translate="yes" xml:space="preserve">
          <source>(&lt;strong&gt;1&lt;/strong&gt;) can only have a single instance, and</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）只能有一个实例，并且&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1b63564fae2bc683b52e7b476a02f169d4dea468" translate="yes" xml:space="preserve">
          <source>(&lt;strong&gt;2&lt;/strong&gt;) you need to manage that single instance,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）您需要管理该单个实例，&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bde670e23d5afa06c791afd885f2d353197aa1d7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;Singletons are Pathological Liars&lt;/a&gt; has a unit testing example that illustrates how singletons can make it difficult to figure out dependency chains and start or test an application. It is a fairly extreme example of abuse, but the point that he makes is still valid:</source>
          <target state="translated">&lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singletons是Pathological Liars&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有一个单元测试示例，该示例说明了Singletons如何使得很难弄清依赖链以及启动或测试应用程序。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是虐待的一个极端例子，但他提出的观点仍然有效：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea97013d248ede0dac3ce0ebf687ba0b03cc305d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://misko.hevery.com/2008/08/21/where-have-all-the-singletons-gone/&quot;&gt;Where have all the Singletons Gone&lt;/a&gt; makes the point that dependency injection has made it easy to get instances to constructors that require them, which alleviates the underlying need behind the bad, global Singletons decried in the first article.</source>
          <target state="translated">&lt;a href=&quot;http://misko.hevery.com/2008/08/21/where-have-all-the-singletons-gone/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singletons Gone的所有使用&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;说明了依赖注入使得可以轻松地向需要它们的构造函数获取实例，这减轻了第一篇文章中糟糕的全局Singletons背后的潜在需求。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7386a9161caeb195946b932a803ccd7dce07346" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.vincehuston.org/dp/singleton.html&quot;&gt;Vince Huston&lt;/a&gt; has these criteria, which seem reasonable to me:</source>
          <target state="translated">&lt;a href=&quot;http://www.vincehuston.org/dp/singleton.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;文斯&amp;middot;休斯顿（Vince Huston）&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;具有以下标准，在我看来，这是合理的：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d7957063e281e7382024d1939ac01602bdf86908" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A Singleton is &lt;em&gt;only&lt;/em&gt; an option if you need what a singleton provides. A write-one read-only instance of an object. That same rule should cascade to the object's properties/members as well.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;单身是&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;唯一&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的选择，如果你需要什么单提供。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象的写一只读实例。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;相同的规则也应级联到对象的属性/成员。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d010d9112a54e839b4d039b507f891e9d1a364c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How does this apply to Monopoly?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这如何适用于专卖？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4f8924237fd09cf8a914728a948b370f5705d9a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How does this apply to programming?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这如何适用于编程？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2b43c4de79f8e20fd1c5bdcc6794a192575c0965" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Monopoly is the devil and singletons with non-readonly/mutable state are the 'real' problem...&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;垄断是魔鬼，具有非只读/可变状态的单身人士是``真正的''问题...&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52f085799a111dd57a5f852313629fb1ae55285c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Problem&lt;/strong&gt;: It is hard to mock singletons.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;问题&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：很难模拟单身人士。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="df35f0cdfd21e3389438a775dce278434deed79f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Problem&lt;/strong&gt;: Singleton can be a challenge in multi-threading environment</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;问题&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：在多线程环境中，单例可能是一个挑战&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab2836573afdbf2161060713a36ca848e5dcd111" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Resource Contention.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;资源争用。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="34acfa13c88ce2c117f1bbd47ac919cf1fb4aaeb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Singletons improves maintenance&lt;/strong&gt;: Once you removed a dependency from a class you just deleted some singleton injection, you don't need to go and edit a big link of other classes that just moved your dependency around(This is smelly code for me &lt;a href=&quot;https://stackoverflow.com/a/138012/1129332&quot;&gt;@Jim Burger&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singletons改善了维护&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：从类中删除依赖项后，您只需删除一些Singleton注入，就无需去编辑其他类的大型链接，这些链接只是将您的依赖项移到了周围（这对我来说是很臭的代码&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/138012/1129332&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Jim Burger&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="412f4531434a73757801858ba07eaba2e84b9aff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Singletons improves memory and performance&lt;/strong&gt;: When some thing happens in your application, and it takes a long chain of callbacks to deliver, you are wasting memory and performance, by using Singleton you are cutting the middle man, and improve your performance and memory usage(by avoiding unnecessary local variables allocations).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singletons可以提高内存和性能&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：如果应用程序中发生某些事情，并且需要执行很长的回调链，那么您在浪费内存和性能，而使用Singleton则削减了中间人，并提高了性能和内存使用率（通过避免不必要的局部变量分配）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0e2c053373b047bcfe397292fbc3cefa5e286412" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Singletons improves readability&lt;/strong&gt;: You can look at your class and see what singleton it injected to figure out what is it's dependencies.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singletons提高了可读性&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：您可以查看您的类，查看它注入了什么singleton以确定其依赖关系。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="023083762e9be2b0e554a8d384287ccabf323eb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution&lt;/strong&gt;: Use a single threaded bootstrap process to initialize all the   dependencies of your singleton.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解决方案&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：使用单线程引导过程初始化单例的所有依赖关系。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab544ef656038d5821d4e34fbe2cd0a3fa71941e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution&lt;/strong&gt;: Use method &lt;a href=&quot;https://github.com/gazman-sdk/android_life_cycle/wiki&quot;&gt;Factory&lt;/a&gt; pattern for mocking</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解决方案&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：使用方法&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/gazman-sdk/android_life_cycle/wiki&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Factory&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模式进行模拟&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8c663d86a9beeaaf39e92c87730e936facd14d2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution&lt;/strong&gt;: Well, dispose them! Implement a callback in your app to properly dispose a singletons, you should remove any data linked to them and finally: remove them from the Factory.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解决方案&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：好吧，处置它们！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在您的应用中实现回调以正确处理单例，您应该删除链接到它们的所有数据，最后：从工厂中删除它们。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7b51005f66777ea4c5a189f276aba466064e2572" translate="yes" xml:space="preserve">
          <source>A singleton gets implemented using a static method. Static methods are avoided by people who do unit testing because they cannot be mocked or stubbed. Most people on this site are big proponents of unit testing. The generally most accepted convention to avoid them is using the &lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;inversion of control&lt;/a&gt; pattern.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;单例使用静态方法实现。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;进行单元测试的人员避免使用静态方法，因为它们不能被模拟或存根。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该站点上的大多数人都大力支持单元测试。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;避免它们的最普遍接受的约定是使用&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模式&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;反转&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="98d937e9b1671d2c26255bf2c387222354793a1b" translate="yes" xml:space="preserve">
          <source>After reading &lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;Singletons are Pathological Liars&lt;/a&gt; as suggested in &lt;a href=&quot;https://stackoverflow.com/a/137996/632951&quot;&gt;jason's answer&lt;/a&gt; I came across this little tidbit that provides the best presented example of &lt;strong&gt;how&lt;/strong&gt; singletons are often misused.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在阅读&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;了&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/137996/632951&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;杰森的答案中&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;建议的&amp;ldquo; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;单身人士是病理骗子&amp;rdquo;之后&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我碰到了这个小窍门，它提供了&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关于&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;单身人士经常被滥用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的最佳例子&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f70a42dfd14309e34041c393526cf11b2727b5dd" translate="yes" xml:space="preserve">
          <source>Also, it&amp;rsquo;s too easy to write a non-thread-safe singleton.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;另外，编写非线程安全的单例也很容易。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6971cacf99a0946118138ab4a33f2113934990ee" translate="yes" xml:space="preserve">
          <source>And, of course, do:</source>
          <target state="translated">当然,也要做。</target>
        </trans-unit>
        <trans-unit id="5d0b974c67fdb9500928fbab323ed42889acaaef" translate="yes" xml:space="preserve">
          <source>As I stated at the title singleton are not about single instance.</source>
          <target state="translated">正如我在标题中所说的,单人单调不是关于单例。</target>
        </trans-unit>
        <trans-unit id="780f02d7ca5df16a5493adb1b0ff7ad99d75e11a" translate="yes" xml:space="preserve">
          <source>Aside from all of the obvious thread-safety and synchronization issues that mutable singletons present... If you have one set of data, that is capable of being read/manipulated by multiple different sources concurrently and exists during the lifetime of the application execution, it's probably a good time to step back and ask &quot;am I using the right type of data structure here&quot;.</source>
          <target state="translated">除了所有明显的线程安全和同步问题之外,可突变单子所带来的线程安全和同步问题......如果你有一个数据集,能够同时被多个不同的数据源读取,并且在应用程序执行期间存在,那么可能是个很好的时机,可以退一步问 &quot;我在这里使用的数据结构类型是否正确&quot;。</target>
        </trans-unit>
        <trans-unit id="8ee7b2ad5b9557585fabb335f68adfc9c9c8c706" translate="yes" xml:space="preserve">
          <source>Because they are basically object oriented global variables, you can usually design your classes in such a way so that you don't need them.</source>
          <target state="translated">因为它们基本上都是面向对象的全局变量,所以你通常可以用这样的方式来设计你的类,这样你就不需要它们了。</target>
        </trans-unit>
        <trans-unit id="937ec02c99912303d347e18aab31deb374647957" translate="yes" xml:space="preserve">
          <source>Classes that depend on singletons are relatively harder to unit test in isolation.</source>
          <target state="translated">依赖于单子的类目相对来说比较难单独进行单元测试。</target>
        </trans-unit>
        <trans-unit id="a380834a96fac726e42e651e3d34770781efcd89" translate="yes" xml:space="preserve">
          <source>Consider the following situation: As a developer, you have to create a web application which accesses a database. To ensure that concurrent database calls do not conflict each other, you create a thread-save &lt;code&gt;SingletonDao&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请考虑以下情况：作为开发人员，您必须创建一个访问数据库的Web应用程序。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为了确保并发数据库调用不会相互冲突，请创建一个线程保存的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;SingletonDao&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9647c9150ba82aa10b72cafd5be139fa2efae5f7" translate="yes" xml:space="preserve">
          <source>During testing and to ensure deterministic behavior, create the singleton class as separate instance as either the actual class itself or a stub/mock that implements its behavior and pass it as is to the class that requires it. Don't use the class factor that creates that object under test that needs the singleton during test as it will pass the single global instance of it, which defeats the purpose.</source>
          <target state="translated">在测试过程中,为了保证行为的确定性,将单体类作为实际类本身或实现其行为的stubmock作为单独的实例来创建单体类,并将其传递给需要它的类。在测试过程中,不要使用创建需要单体类的类因子,因为它将传递给需要单体类的单个全局实例,这就违背了测试的目的。</target>
        </trans-unit>
        <trans-unit id="eac73a2e89308f7ba46bc74c05f8ca76bc870e71" translate="yes" xml:space="preserve">
          <source>During the runtime of you application, where singletons need to be passed to a given object, use a class factory that builds that object and have the class factory pass the singleton instance to the class that needs it.</source>
          <target state="translated">在你的应用程序运行过程中,如果需要将单子传递给一个给定的对象,请使用一个类工厂来构建该对象,并让类工厂将单子实例传递给需要它的类。</target>
        </trans-unit>
        <trans-unit id="45bcf685d367a300d4d434185e87272e3868f1d0" translate="yes" xml:space="preserve">
          <source>Everyone talks about Singleton's as globals, because they basically are. However, much (sadly, not all) of the badness in a global comes not intrinsically from being global, but how you use it. Same goes for Singletons. Actually more so as &quot;single instance&quot; really doesn't need to mean &quot;globally accessible&quot;. It is more a natural byproduct, and given all the bad that we know comes from it, we shouldn't be in such a hurry to exploit global accessibility. Once programmers see a Singleton they seem to always access it directly through its instance method. Instead, you should navigate to it just like you would any other object. Most code shouldn't even be aware it is dealing with a Singleton (loose coupling, right?). If only a small bit of code accesses the object like it is a global, a lot of harm is undone. I recommend enforcing it by restricting access to the instance function.</source>
          <target state="translated">每个人都把Singleton说成是全局的,因为它们基本上是全局的。然而,全局的很多(可悲的是,不是所有的)坏处都不是来自于全局,而是你如何使用它。对于Singleons也是如此。其实更多的是,&quot;单实例 &quot;真的不需要 &quot;全局性 &quot;的意思。它更多的是一种自然的副产品,考虑到我们知道它带来的所有坏处,我们不应该急于利用全局可访问性。一旦程序员看到一个Singleton,他们似乎总是通过它的实例方法直接访问它。相反,你应该像浏览其他对象一样浏览它。大多数代码甚至不应该意识到它正在处理一个Singleton(松耦合,对吗?如果只有一小部分代码像访问全局一样访问这个对象,就会造成很大的伤害。我建议通过限制对实例函数的访问来强制执行。</target>
        </trans-unit>
        <trans-unit id="0aea5f06b0db6f7157edd5c4c141c78e70171cc9" translate="yes" xml:space="preserve">
          <source>Everything is fine so far.</source>
          <target state="translated">到目前为止,一切都很好。</target>
        </trans-unit>
        <trans-unit id="c2c8d187b56d34de5700469c278c253a4efb35dc" translate="yes" xml:space="preserve">
          <source>FWIW, if it a PIA when you try to unit test it then it's going to PIA when you try to debug, bug fix or enhance it.</source>
          <target state="translated">FWWIW,如果你试图对它进行单元测试时它是一个PIA,那么当你试图调试、修复bug或增强它时,它就会变成PIA。</target>
        </trans-unit>
        <trans-unit id="03c69b7e7f3a328ec62260ac5b83e4208fc9daa7" translate="yes" xml:space="preserve">
          <source>Firstly a class and its collaborators should firstly perform their intended purpose rather than focusing on deoendents. Lifecycle management (when instances are creared snd when they go out of scope) should not be part of the cladses responsibility. The accepted best practice for this is to craft or configure a new component to manage dependencies using dependency injection.</source>
          <target state="translated">首先,一个类和它的合作者应该首先执行他们的预期目的,而不是专注于deoendents。生命周期管理(当实例被清除和超出范围时)不应该是cladses责任的一部分。对此,公认的最佳实践是使用依赖注入(dependency injection)来设计或配置一个新的组件来管理依赖关系。</target>
        </trans-unit>
        <trans-unit id="f806d6e7027975cfa32f2da9b819f89561ed7538" translate="yes" xml:space="preserve">
          <source>From a pratical point of view, &lt;strong&gt;a singleton is a trade-off developing time vs complexity&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从实用的角度来看，&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;单例是开发时间与复杂性之间的权衡&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7e4ebfb74a941702ad7c541653b7cf63d07cfd67" translate="yes" xml:space="preserve">
          <source>Global access is not otherwise provided for</source>
          <target state="translated">不提供全球接入服务</target>
        </trans-unit>
        <trans-unit id="0791848a4b5d984612e8fff52eab6e825186b998" translate="yes" xml:space="preserve">
          <source>Global is bad because:</source>
          <target state="translated">全球化是不好的,因为。</target>
        </trans-unit>
        <trans-unit id="a8f72bd9a9edbfe0b449bc6c4a04ae6281432fa1" translate="yes" xml:space="preserve">
          <source>GoF Singletons in opposite to IoC Singletons are supposed to expose &quot;singletonity&quot; in the interface through getInstance() method, and so that they suffer from everything said above.</source>
          <target state="translated">GoF Singletons与IoC Singletons相反,GoF Singletons应该是通过getInstance()方法在接口中暴露出 &quot;单一性&quot;,因此,它们遭受上面所说的一切。</target>
        </trans-unit>
        <trans-unit id="2f78eafa156d6302e52dc35c57960b25dc9c1d2b" translate="yes" xml:space="preserve">
          <source>Here is one more thing about singletons which nobody said yet.</source>
          <target state="translated">这里还有一个关于单体的事情,还没有人说过。</target>
        </trans-unit>
        <trans-unit id="72f2af37f60d95ea1ed5c8a2e82b0cba6c9da498" translate="yes" xml:space="preserve">
          <source>However, there are &quot;application scope services&quot; (think about a messaging system that makes components interact) - this CALLS for a singleton, a &quot;MessageQueue&quot; - class that has a method &quot;SendMessage(...)&quot;.</source>
          <target state="translated">然而,有 &quot;应用范围服务&quot;(想想看一个让组件交互的消息系统)--这就调用了一个单子,一个 &quot;MessageQueueue&quot;--类,它有一个方法 &quot;SendMessage(...)&quot;。</target>
        </trans-unit>
        <trans-unit id="b07296f711652fac02f0fab15864ed43fdad4def" translate="yes" xml:space="preserve">
          <source>I believe the backlash is due to its overuse which, in turn, is due to the fact that it's the easiest pattern to understand and implement.</source>
          <target state="translated">我认为,反过来说,我认为是由于它的过度使用,而这又是由于它是最容易理解和实现的模式。</target>
        </trans-unit>
        <trans-unit id="d547e25d316e8eb86b74c45c720d779a57572804" translate="yes" xml:space="preserve">
          <source>I believe this sort of pattern is called &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt; and is generally considered a good thing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我相信这种模式称为&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依赖注入&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，通常被认为是一件好事。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29f3a8be4925f9bbf7c6e50d2f3ca550171d47d4" translate="yes" xml:space="preserve">
          <source>I now prefer to design around an &lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;inversion of control&lt;/a&gt; (IoC) container and allow the the lifetimes to be controlled by the container. This gives you the benefit of the classes that depend on the instance to be unaware of the fact that there is a single instance. The lifetime of the singleton can be changed in the future. Once such example I encountered recently was an easy adjustment from single threaded to multi-threaded.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我现在更喜欢围绕&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制反转&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（IoC）容器&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;进行设计，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;并允许容器&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;生命周期。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这为您提供了依赖实例的类的好处，而不必知道只有一个实例。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;单例的生存期可以在将来更改。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我最近遇到的这样的例子是从单线程到多线程的简单调整。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dfa4071ddcee15c06454d19f5b9208a7488963bb" translate="yes" xml:space="preserve">
          <source>I think the confusion is caused by the fact that people don't know the real application of the Singleton pattern. I can't stress this enough. Singleton is &lt;strong&gt;not&lt;/strong&gt; a pattern to wrap globals. Singleton pattern should only be used to guarantee that &lt;strong&gt;one and only one instance of a given class&lt;/strong&gt; exists during run time.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我认为造成这种混乱的原因是人们不了解Singleton模式的实际应用。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我不能太强调这一点。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singleton &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不是&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;包装全局变量的模式。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;单例模式仅应用于确保&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在运行时存在&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;给定类的一个实例且只有一个实例&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83f36ca8c3ae39ba88c4227bcd9107ebd8714e28" translate="yes" xml:space="preserve">
          <source>I'd like to address the 4 points in the accepted answer, hopefully someone can explain why I'm wrong.</source>
          <target state="translated">我想针对接受答案中的4点,希望有人能解释一下我为什么错了。</target>
        </trans-unit>
        <trans-unit id="480115f4bdecc954d3ef342b5b307329636f1cf6" translate="yes" xml:space="preserve">
          <source>I'm not going to comment on the good/evil argument, but I haven't used them since &lt;a href=&quot;http://en.wikipedia.org/wiki/Spring_Framework&quot;&gt;Spring&lt;/a&gt; came along. Using &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt; has pretty much removed my requirements for singleton, servicelocators and factories. I find this a much more productive and clean environment, at least for the type of work I do (Java-based web applications).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我不会评论善恶论据，但是自从&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Spring_Framework&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;出现&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以来，我就没有使用它们&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依赖注入&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;几乎消除了我对单例，服务定位器和工厂的要求。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我发现这至少在我从事的工作类型（基于Java的Web应用程序）上是一个更加高效和干净的环境。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b8f5ab505b9909495273b2e2d51e1a90612cf41" translate="yes" xml:space="preserve">
          <source>If ownership of the single instance, when and how initialization occurs, and global access are not issues, Singleton is not sufficiently interesting.</source>
          <target state="translated">如果单实例的所有权、初始化何时发生、如何初始化、全局访问等都不是问题,那么Singleton就不够有趣了。</target>
        </trans-unit>
        <trans-unit id="06cbcc38cd7b375e6eb3143e88b5e310d19f2f21" translate="yes" xml:space="preserve">
          <source>If you avoid those mistakes, Singletons can still be a PITA, bit it is ready to see a lot of the worst problems are significantly mitigated. Imagine a Java Singleton, that is explicitly defined as once per classloader (which means it needs a thread safety policy), with defined creation and destruction methods and a life cycle that dictates when and how they get invoked, and whose &quot;instance&quot; method has package protection so it is generally accessed through other, non-global objects. Still a potential source of trouble, but certainly much less trouble.</source>
          <target state="translated">如果你避免了这些错误,Singleton仍然可以是一个PITA,位它准备好了,可以看到很多最糟糕的问题都得到了明显的缓解。想象一下,一个Java的Singleton,它被明确定义为每类加载器一次(这意味着它需要一个线程安全策略),具有定义的创建和销毁方法,以及决定它们何时和如何被调用的生命周期,其 &quot;实例 &quot;方法具有包保护,因此它一般是通过其他非全局对象访问的。仍然是一个潜在的麻烦源,但麻烦肯定要少得多。</target>
        </trans-unit>
        <trans-unit id="3a1237cb413fdb4c46831101c6617de6e2895e61" translate="yes" xml:space="preserve">
          <source>If you have some resource that</source>
          <target state="translated">如果你有一些资源</target>
        </trans-unit>
        <trans-unit id="5aa9787a4fcf5e46b59e52938d4c6b3343093698" translate="yes" xml:space="preserve">
          <source>If you know your application won't change that much they are pretty OK to go with. Just know that you may need to refactor things up if your requirements change in an unexpected way (which is pretty OK in most cases).</source>
          <target state="translated">如果你知道你的应用程序不会有那么大的变化,那么他们是很好用的。只是要知道,如果你的需求发生了意想不到的变化,你可能需要重新构架一下(在大多数情况下,这是很正常的)。</target>
        </trans-unit>
        <trans-unit id="28522cf8f3941ff8eed8d87379a03a7891c58392" translate="yes" xml:space="preserve">
          <source>If you're passing an object through 10 functions in a call stack just to avoid a singleton, is that so great?</source>
          <target state="translated">如果你在调用栈中通过10个函数来传递一个对象,只是为了避免单子,有那么好吗?</target>
        </trans-unit>
        <trans-unit id="a1b6572af45baab99438b33d0afceb089e21a8ae" translate="yes" xml:space="preserve">
          <source>In a &lt;a href=&quot;https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29&quot;&gt;garbage collected&lt;/a&gt; environment singletons can quickly become an issue with regard to memory management.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;垃圾回收&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;环境中，单例可能很快成为内存管理方面的问题。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="557c214439df24b6d9a6e6fb3a93c9584d0cf0e3" translate="yes" xml:space="preserve">
          <source>In most cases &quot;singletonity&quot; is a detail of implementation for some class rather than characteristic of its interface. Inversion of Control Container may hide this characteristic from class users; you just need to mark your class as a singleton (with &lt;code&gt;@Singleton&lt;/code&gt; annotation in Java for example) and that's it; IoCC will do the rest. You don't need to provide global access to your singleton instance because the access is already managed by IoCC. Thus there is nothing wrong with IoC Singletons.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在大多数情况下，&amp;ldquo;单一性&amp;rdquo;是某个类的实现细节，而不是其接口的特征。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制容器的反转可能会使类用户看不到此特性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您只需要将您的类标记为单例（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如，在Java中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;带有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@Singleton&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;批注）即可。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IoCC将完成其余的工作。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您不需要提供对单例实例的全局访问，因为该访问已经由IoCC管理。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，IoC单例没有错。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3adb08488e419152c707b1fe00f30e55841e099" translate="yes" xml:space="preserve">
          <source>In practice the &lt;em&gt;Singleton&lt;/em&gt; pattern is just a programming technique that is a useful part of your toolkit of concepts. From time to time you might find it is the ideal solution and so use it. But using it just so you can boast about using a &lt;em&gt;design pattern&lt;/em&gt; is just as stupid as refusing to ever use it because it is just a &lt;em&gt;global&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实际上，&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Singleton&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模式只是一种编程技术，它是概念工具包的有用部分。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可能会不时发现它是理想的解决方案，因此请使用它。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是使用它只是为了夸耀使用&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;设计模式&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;就像拒绝使用它一样愚蠢，因为它只是&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;全局的&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="175eb0b638a248bbeee6c8c6d26cdf7f0bb9fb17" translate="yes" xml:space="preserve">
          <source>In the last statement he's referring to the blog's concept of 'singletons are liars'.</source>
          <target state="translated">在最后一句话里,他指的是博客里的'单子是骗子'的概念。</target>
        </trans-unit>
        <trans-unit id="82447f21debdc151d1cac2b4db16313ffdc010f5" translate="yes" xml:space="preserve">
          <source>It is also considered an anti-pattern by some people, who feel that it is overly used, introducing unnecessary limitations in situations where a sole instance of a class is not actually required.[1][2][3][4]</source>
          <target state="translated">也有人认为它是一种反模式,认为它被过度使用,在实际上不需要类的唯一实例的情况下,引入了不必要的限制[1][2][3][4]。</target>
        </trans-unit>
        <trans-unit id="4b4cbb456545aecd6262079cc8061bb243412865" translate="yes" xml:space="preserve">
          <source>It is easily (ab)used as a global variable.</source>
          <target state="translated">它很容易(ab)作为全局变量使用。</target>
        </trans-unit>
        <trans-unit id="faa6d5d204dc7dbc91d17f723a964f011cefcf2c" translate="yes" xml:space="preserve">
          <source>It's not that singletons themselves are bad but the GoF design pattern is. The only really argument that is valid is that the GoF design pattern doesn't lend itself in regards to testing, especially if tests are run in parallel.</source>
          <target state="translated">不是说单子本身不好,而是GoF设计模式不好。唯一真正有效的论点是,GoF设计模式不适合测试,尤其是当测试并行运行时。</target>
        </trans-unit>
        <trans-unit id="83b20cebddd201ff984745ea240973a2c8a8348d" translate="yes" xml:space="preserve">
          <source>It's rare that you need a singleton. The reason they're bad is that they feel like a &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global&lt;/a&gt; and they're a fully paid up member of the GoF &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;Design Patterns&lt;/a&gt;&lt;/em&gt; book.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您很少需要单身人士。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他们之所以不好，是因为他们感觉自己像个&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;全球人&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，并且是GoF &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Design Patterns&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;书中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的全薪会员&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="462d96d6490ecf7f21c7d082c3a673c2571d2b5d" translate="yes" xml:space="preserve">
          <source>Lazy initialization is desirable</source>
          <target state="translated">懒惰的初始化是可取的</target>
        </trans-unit>
        <trans-unit id="2a3024554beb09837fba1b03b0332e6065ffafd1" translate="yes" xml:space="preserve">
          <source>Like any pattern though... Think about it and consider if its use in the given situation is inappropriate or not... Rules are made to be broken usually, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;patterns&lt;/a&gt; should not be applied willy nilly without thought.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;就像任何模式一样&amp;hellip;&amp;hellip;考虑它，并考虑在给定情况下使用它是否不合适&amp;hellip;&amp;hellip;通常会违反规则，并且&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不应无意间应用这些&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模式&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="73f9ccfc3d9b951a95cf8d8c870ebe0d33f5c1e5" translate="yes" xml:space="preserve">
          <source>Make sure that the Singleton is thread-safe.  That's a given.</source>
          <target state="translated">确保Singleton的螺纹安全。这一点是肯定的。</target>
        </trans-unit>
        <trans-unit id="99db60c95b1b127007a4512df8fd7cb4dcab18fb" translate="yes" xml:space="preserve">
          <source>Make sure the class that will be used as a singleton implements an interface. This allows stubs or mocks to be implemented using the same interface</source>
          <target state="translated">确保将作为单体类使用的类实现了一个接口。这样可以使用同一个接口实现存根或mocks。</target>
        </trans-unit>
        <trans-unit id="906d44ceac744e478b26c3dbfd73fea4bc065db7" translate="yes" xml:space="preserve">
          <source>MessageQueue.Current.RegisterReceiver(this);</source>
          <target state="translated">MessageQueue.Current.RegisterReceiver(this);</target>
        </trans-unit>
        <trans-unit id="e2f175accfe9e7aa85d6a7640719330d57950fde" translate="yes" xml:space="preserve">
          <source>MessageQueue.Current.SendMessage(new MailArrivedMessage(...));</source>
          <target state="translated">MessageQueueue.Current.SendMessage(newMailArrivedMessage(...)));</target>
        </trans-unit>
        <trans-unit id="e8f815cd223912c6028928f4b3ad623f1bd5368f" translate="yes" xml:space="preserve">
          <source>Misko Hevery, from Google, has some interesting articles on exactly this topic...</source>
          <target state="translated">Misko Hevery,来自Google的Misko Hevery有一些关于这个话题的有趣文章.....</target>
        </trans-unit>
        <trans-unit id="aee4bcdfd19cd56b5aca74568fc7d31720489ef4" translate="yes" xml:space="preserve">
          <source>My answer on how Singletons are bad is always, &quot;they are hard to do right&quot;. Many of the foundational components of languages are singletons (classes, functions, namespaces and even operators), as are components in other aspects of computing (localhost, default route, virtual filesystem, etc.), and it is not by accident. While they cause trouble and frustration from time to time, they also can make a lot of things work a LOT better.</source>
          <target state="translated">关于Singletons如何不好,我的回答永远是,&quot;它们很难做对&quot;。语言的许多基础组件都是单子(类、函数、命名空间甚至是操作符),就像计算的其他方面的组件(localhost、默认路径、虚拟文件系统等)一样,这不是偶然的。虽然它们时不时地会带来麻烦和挫折,但也能让很多事情变得更好。</target>
        </trans-unit>
        <trans-unit id="a53607ed2c21f47236870353aed7c4680124034a" translate="yes" xml:space="preserve">
          <source>No class should be thought of as a singleton but rather that should be an aplication of it's usage or how it is used to configure dependents. For a quick and nasty this does not matter - just luke hardcoding say file paths does not matter but for bigger applications such dependencies need to be factored out and managed in more appropriate way using DI.</source>
          <target state="translated">任何类都不应该被认为是一个单体类,而是应该是它的使用方式或如何配置依赖关系的应用。对于一个快速和讨厌的应用来说,这并不重要---只需要简单的硬编码,比如说文件路径并不重要,但是对于更大的应用来说,这样的依赖关系需要被计算出来,并以更合适的方式使用DI来管理。</target>
        </trans-unit>
        <trans-unit id="6c62e40008de69cb522d6cdf069852b3341a3b9d" translate="yes" xml:space="preserve">
          <source>Note: Coding Without Comments is no longer valid.  However, The article being linked to has been cloned by another user.</source>
          <target state="translated">注:没有评论的编码已经失效。但是,所链接的文章已被另一个用户克隆。</target>
        </trans-unit>
        <trans-unit id="6ee7cdaf99a266962c9e299de0be53abaae53a44" translate="yes" xml:space="preserve">
          <source>Now the game goes from friendly dice-rolling to serious business. Bob has been made the example of failure and Joe and Ed don't want to end up like 'that guy'. So, being the leading player you, all of a sudden, become the enemy. Joe and Ed start practicing under-the-table trades, behind-the-back money injections, undervalued house-swapping and generally anything to weaken you as a player until one of them rises to the top.</source>
          <target state="translated">现在,游戏从友好的掷骰子变成了严肃的事情。鲍勃成为了失败的榜样,乔和艾德都不想落得个像 &quot;那个人 &quot;的下场。所以,作为主角的你,突然间成了敌人。乔和埃德开始练习台下交易,背后的资金注入,被低估的房子交换和一般任何事情,以削弱你作为一个球员,直到他们中的一个上升到顶部。</target>
        </trans-unit>
        <trans-unit id="5a2e70213e768863cad258a0f87428f2c1f107fa" translate="yes" xml:space="preserve">
          <source>Now, consider you want to set up multiple instances of your web application in a cluster. Now, you suddenly have something like this:</source>
          <target state="translated">现在,考虑到你想在一个集群中设置多个Web应用程序的实例。现在,你突然有了这样的东西。</target>
        </trans-unit>
        <trans-unit id="d0994fb980677959b214d2c3749362ba6e34a5e3" translate="yes" xml:space="preserve">
          <source>Now, for anybody who hasn't &lt;strong&gt;really&lt;/strong&gt; played monopoly, these standards are ideal at best. A defeat in monopoly is hard to swallow because, monopoly is about money, if you lose you have to painstakingly watch the rest of the players finish the game, and losses are usually swift and crushing. So, the rules usually get twisted at some point to serve the self-interest of some of the players at the expense of the others.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在，对于没有&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;真正&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;扮演垄断者的人，这些标准充其量是最理想的。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;垄断的失败很难吞噬，因为垄断就是金钱，如果您输了，您就必须认真地看着其余的球员完成比赛，而损失通常是迅速而惊人的。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，规则通常在某些时候会扭曲，以牺牲某些玩家的利益为某些玩家的自身利益服务。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8251537426b4a38c0fda5146bbbfce04abd246d3" translate="yes" xml:space="preserve">
          <source>Of course this is an example of a bad usage of a singleton. But the message of this example is: You can not rely that there is exactly one instance of a singleton in your application - especially when it comes to clustering.</source>
          <target state="translated">当然这是一个例子,是一个单子的不好用的例子。但这个例子所传达的信息是。你不能依赖你的应用程序中正好有一个单体实例--尤其是当涉及到集群时。</target>
        </trans-unit>
        <trans-unit id="12da2eb229cab6f3f45bf52f45d05c18b7744c03" translate="yes" xml:space="preserve">
          <source>Often software gets more complicated it makes sense to have multiple independent instances of the Singleton class with different state. Committing code to simply grab the singleton is wrong in such cases. Using &lt;code&gt;Singleton.getInstance()&lt;/code&gt; might be ok for small simple systems but it doesn't work/scale when one might need a different instance of the same class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通常，软件会变得更加复杂，因此拥有多个具有不同状态的Singleton类的独立实例是有意义的。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这种情况下，提交代码以仅抓住单例是错误的。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于小型简单系统，可以&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Singleton.getInstance()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，但是当可能需要同一类的另一个实例时，它不起作用/无法扩展。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="59b9e2cf09e0aebb2a5206089741000b279a7b53" translate="yes" xml:space="preserve">
          <source>One rather bad thing about singletons is that you can't extend them very easily. You basically have to build in some kind of &lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;decorator pattern&lt;/a&gt; or some such thing if you want to change their behavior. Also, if one day you want to have multiple ways of doing that one thing, it can be rather painful to change, depending on how you lay out your code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关于单例的一件相当不好的事情是，您不能很轻松地扩展它们。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您想更改其行为，则&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本上必须构建某种&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;装饰器模式&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;或类似的东西。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同样，如果有一天您想以多种方式完成一项任务，那么根据您对代码的布局方式进行更改可能会非常痛苦。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce175dbf29b8e8c973f5eaab4951c1d4efea6362" translate="yes" xml:space="preserve">
          <source>One thing to note, if you DO use singletons, try to pass them in to whoever needs them rather than have them access it directly... Otherwise if you ever choose to have multiple ways of doing the thing that singleton does, it will be rather difficult to change as each class embeds a dependency if it accesses the singleton directly.</source>
          <target state="translated">有一点需要注意的是,如果你确实使用了单体,请尽量把它们传递给需要它们的人,而不是让他们直接访问它......否则,如果你选择了多种方式来做单体的事情,那就相当难改了,因为每个类如果直接访问单体就会嵌入一个依赖关系。</target>
        </trans-unit>
        <trans-unit id="b46465a6d50ce5de3f512c57fbb175a4dfef1083" translate="yes" xml:space="preserve">
          <source>Ownership of the single instance cannot be reasonably assigned</source>
          <target state="translated">不能合理分配单一实例的所有权</target>
        </trans-unit>
        <trans-unit id="715eaba002359c1f45ac2b34e6e9e70374fe8629" translate="yes" xml:space="preserve">
          <source>Paraphrased from Brian Button:</source>
          <target state="translated">转述自Brian Button。</target>
        </trans-unit>
        <trans-unit id="1252eeb8091f8d534d0de0657525d9e409460566" translate="yes" xml:space="preserve">
          <source>People think Singleton is evil because they are using it for globals. It is because of this confusion that Singleton is looked down upon. Please, don't confuse Singletons and globals. If used for the purpose it was intended for, you will gain extreme benefits from the Singleton pattern.</source>
          <target state="translated">人们认为Singleton是邪恶的,因为他们用它来做球状物。正是因为这种混淆,才会有人看不起Singleton。请不要把Singleton和globals混为一谈。如果用在它的目的上,你会从Singleton模式中获得极端的好处。</target>
        </trans-unit>
        <trans-unit id="4488e947e889410b9a191f1d7b72296670a169df" translate="yes" xml:space="preserve">
          <source>Personally, I have seen a programmer abuse a singleton by using it as some sort of twisted cross-thread database store within an application. Having worked on the code directly, I can attest that it was a slow (because of all the thread locks needed to make it thread-safe) and a nightmare to work on (because of the unpredictable/intermittent nature of synchronization bugs), and nearly impossible to test under 'production' conditions. Sure, a system could have been developed using polling/signaling to overcome some of the performance issues but that wouldn't solve the issues with testing and, why bother when a 'real' database can already accomplish the same functionality in a much more robust/scalable manner.</source>
          <target state="translated">就我个人而言,我见过一个程序员滥用单体,将其作为应用程序内的某种扭曲的跨线程数据库存储。在直接处理过这段代码之后,我可以证明,它的速度很慢(因为需要所有的线程锁来使它的线程安全),工作起来也是一场噩梦(因为同步bug的不可预测性的间歇性),而且几乎不可能在 &quot;生产 &quot;条件下进行测试。当然,系统可以使用轮询信号来克服一些性能问题,但这并不能解决测试的问题,而且,当一个 &quot;真正的 &quot;数据库已经可以以更稳健的方式完成相同的功能时,何必再费心思。</target>
        </trans-unit>
        <trans-unit id="91f89d4db256dc247d870f9462f9bc0c69cb74b5" translate="yes" xml:space="preserve">
          <source>Please support your answers with &quot;&lt;em&gt;facts, references, or specific expertise&lt;/em&gt;&quot;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请以&amp;ldquo; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;事实，参考或特定专业知识&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;rdquo; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;支持您的回答&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="57c71d6ec57b7a7097898abfe53ac93d158a60a4" translate="yes" xml:space="preserve">
          <source>Rather than using singletons, you should pass all the needed utility objects from function to function. That can be simplified if you wrap all them into a helper object, like this:</source>
          <target state="translated">与其使用单子,不如将所有需要的实用对象从函数中传递给函数。如果你把所有这些对象打包成一个辅助对象,就可以简化,就像这样。</target>
        </trans-unit>
        <trans-unit id="e244aca5c6e08cefb560ff05106c72a053cfd258" translate="yes" xml:space="preserve">
          <source>Recent article on this subject by Chris Reath at &lt;a href=&quot;http://www.codingwithoutcomments.com/&quot;&gt;Coding Without Comments&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;克里斯&amp;middot;瑞思（Chris Reath）在&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.codingwithoutcomments.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Coding Without Comments中&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关于该主题的最新文章&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aad46f2b1a8beb2238db459eb8a7984bc88e9ac7" translate="yes" xml:space="preserve">
          <source>References (only relevant references from the article)</source>
          <target state="translated">参考文献(只选取文章中的相关参考文献)</target>
        </trans-unit>
        <trans-unit id="52f59ac0b8d614ab6b3b23685d4c5ee578e87153" translate="yes" xml:space="preserve">
          <source>Regarding unit tests:</source>
          <target state="translated">关于单位测试:</target>
        </trans-unit>
        <trans-unit id="030d697ac3114fa5e0f1fd803ceabd44c98c1ff2" translate="yes" xml:space="preserve">
          <source>Sadly, rather than teaching good examples of how to do Singletons. We teach bad examples, let programmers run off using them for a while, and then tell them they are a bad design pattern.</source>
          <target state="translated">可悲的是,我们没有教好的例子,而是教好的例子如何做Singletons。我们教不好的例子,让程序员用这些例子跑了一阵子,然后告诉他们这是一个不好的设计模式。</target>
        </trans-unit>
        <trans-unit id="e0aa79b2c282a159104c446619a487d9dd85bee2" translate="yes" xml:space="preserve">
          <source>See Wikipedia Singleton_pattern</source>
          <target state="translated">参见维基百科Singleton_pattern</target>
        </trans-unit>
        <trans-unit id="d433b5c0fbdc7c1d72fe35c9443488ae8c3ee54e" translate="yes" xml:space="preserve">
          <source>Single Responsibility Principle: I think this is a bit vague and depends on your definition of responsibility. A relevant question would be, why does adding this &lt;em&gt;specific&lt;/em&gt; &quot;responsibility&quot; to a class matter?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;单一责任原则：我认为这有点含糊，取决于您对责任的定义。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一个相关的问题是，为什么&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要在课堂&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上添加这种&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特定的&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;ldquo;责任&amp;rdquo;？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="26ed3cf8e352b5e7d2bf4aa5387c599ce82c10d1" translate="yes" xml:space="preserve">
          <source>Singleton is a pattern and can be used or abused just like any other tool.</source>
          <target state="translated">单顿是一种模式,和其他工具一样,可以使用或滥用。</target>
        </trans-unit>
        <trans-unit id="4b9b5722cbaf5d7c5ad21d8e14a4714334867513" translate="yes" xml:space="preserve">
          <source>Singleton is not about single instance!</source>
          <target state="translated">Singleton不在于单一实例!</target>
        </trans-unit>
        <trans-unit id="f2e14fa8aa12ee4d53b03570c0e52377418420bf" translate="yes" xml:space="preserve">
          <source>Singleton should be considered only if all three of the following criteria are satisfied:</source>
          <target state="translated">只有在满足以下三个条件的情况下,才能考虑单顿。</target>
        </trans-unit>
        <trans-unit id="f03a7ee73d533121d4ef48caf72e5289060b733f" translate="yes" xml:space="preserve">
          <source>Singletons &lt;em&gt;aren't&lt;/em&gt; evil, if you use it &lt;em&gt;properly&lt;/em&gt; &amp;amp; &lt;em&gt;minimally&lt;/em&gt;. There are lot of other good design patterns which replaces the needs of singleton at some point (&amp;amp; also gives best results). But some programmers are unaware of those good patterns &amp;amp; uses the singleton for all the cases which makes the singleton evil for them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;正确&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;且&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最少&lt;/font&gt;&lt;/em&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;地&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用它，那么&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;单例&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;并不是&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;邪恶的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;还有许多其他好的设计模式可以在某个时候替代单例的需求（并且也可以提供最佳结果）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是有些程序员没有意识到那些好的模式，并在所有情况下都使用单例，这会使单例对他们有害。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4fd184f94d2ce9383e49a02b30f6641ff78181bb" translate="yes" xml:space="preserve">
          <source>Singletons are NOT bad. It's only bad when you make something globally unique that isn't globally unique.</source>
          <target state="translated">单独不是坏事。只有当你做一些不是全球独一无二的东西时,它才是坏的。</target>
        </trans-unit>
        <trans-unit id="b71ec8c276a2e03ed961206cd36c64bf09b91a25" translate="yes" xml:space="preserve">
          <source>Singletons are also a problem from a testing perspective. They tend to make isolated unit-tests difficult to write. &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;Inversion of control&lt;/a&gt;&lt;/strong&gt; (IoC) and &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt;&lt;/strong&gt; are patterns meant to overcome this problem in an object-oriented manner that lends itself to unit testing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从测试的角度来看，单例也是一个问题。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它们往往使孤立的单元测试难以编写。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;控制反转&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（IoC）和&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依赖项注入&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是旨在以面向对象的方式克服此问题的模式，可用于单元测试。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="22357d29daa92c763bcdd62993b84e9e2aa5bd87" translate="yes" xml:space="preserve">
          <source>Singletons are also bad when it comes to &lt;strong&gt;clustering&lt;/strong&gt;. Because then, you do not have &quot;exactly one singleton&quot; in your application anymore.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;就&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;集群而言，&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;单例也很糟糕&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因为这样，您的应用程序中不再有&amp;ldquo;仅一个单例&amp;rdquo;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="55a8b300eb18ba098facc7e6694024b774c6eac8" translate="yes" xml:space="preserve">
          <source>Singletons are bad from a purist point of view.</source>
          <target state="translated">从纯洁主义的角度看,单打独斗是不好的。</target>
        </trans-unit>
        <trans-unit id="6571a82538f52d979f2b5e1853bbedb03b9ee0b8" translate="yes" xml:space="preserve">
          <source>Singletons are nothing more than global state. Global state makes it so your objects can secretly get hold of things which are not declared in their APIs, and, as a result, Singletons make your APIs into pathological liars.</source>
          <target state="translated">Singletons只不过是全局状态而已。全局状态使你的对象可以秘密地获取没有在其API中声明的东西,因此,Singletons使你的API成为病态的骗子。</target>
        </trans-unit>
        <trans-unit id="3865fa07f2a264ee1aa7be8afa2532f27d7a83de" translate="yes" xml:space="preserve">
          <source>Singletons make it very hard to move from them to regular objects.</source>
          <target state="translated">单身者让人很难从他们身上转移到普通物体上。</target>
        </trans-unit>
        <trans-unit id="1a9fa24bd062fcce6fa98e671274d898304f4930" translate="yes" xml:space="preserve">
          <source>Singletons solve one (and only one) problem.</source>
          <target state="translated">单身人解决一个(也是唯一的)问题。</target>
        </trans-unit>
        <trans-unit id="9a182b1859f9fcbfb5d6f4df6317aa60d8f6db05" translate="yes" xml:space="preserve">
          <source>Singletons sometimes also complicate &lt;a href=&quot;https://en.wikipedia.org/wiki/Unit_testing&quot;&gt;unit testing&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;单例有时会使&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Unit_testing&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;单元测试&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;复杂化&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="358417c2142a15d4609dbb8b247ce7663b733322" translate="yes" xml:space="preserve">
          <source>So basically:</source>
          <target state="translated">所以,基本上。</target>
        </trans-unit>
        <trans-unit id="f4cf667760b907cb4a40918fa4336dd7f2460150" translate="yes" xml:space="preserve">
          <source>So you are sure that only one singleton in your application exists and all database go through this one and only &lt;code&gt;SingletonDao&lt;/code&gt;. Your production environment now looks like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，您可以确保应用程序中仅存在一个单例，并且所有数据库都通过此一个，并且仅通过&lt;/font&gt;&lt;/font&gt; &lt;code&gt;SingletonDao&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在，您的生产环境如下所示：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e6fed6a4edfd3ed86633f28e6a268bd05113200a" translate="yes" xml:space="preserve">
          <source>So you're playing monopoly with friends Bob, Joe, and Ed. You're swiftly building your empire and consuming market share at an exponential rate. Your opponents are weakening and you start to smell blood (figuratively). Your buddy Bob put all of his money into gridlocking as many low-value properties as possible but his isn't receiving a high return on investment the way he expected. Bob, as a stroke of bad luck, lands on your Boardwalk and is excised from the game.</source>
          <target state="translated">所以你和朋友Bob、Joe和Ed在玩垄断游戏。你正在迅速建立你的帝国,并以指数级的速度消耗市场份额。你的对手越来越弱,你开始闻到了血腥味(象征性的)。你的朋友鲍勃把所有的钱都投入到了尽可能多的低价值物业的封锁中,但他的投资回报率并不像他预期的那样高。鲍勃,作为一个倒霉的中风,在你的木板路上的土地和被从游戏中删除。</target>
        </trans-unit>
        <trans-unit id="668ff333ca3f47ff06a60a3fa60bdab697466e01" translate="yes" xml:space="preserve">
          <source>So, if a rulebook for a game accurately represented a singleton, the monopoly rulebook would be an example of abuse.</source>
          <target state="translated">所以说,如果一个游戏的规则书准确的代表了一个人的游戏规则,那么垄断规则书就是一个滥用的例子。</target>
        </trans-unit>
        <trans-unit id="0591c19bd97bf670bf6baa531c0194ef328f8f82" translate="yes" xml:space="preserve">
          <source>Some coding snobs look down on them as just a glorified global. In the same way that many people hate the &lt;em&gt;goto&lt;/em&gt; statement there are others that hate the idea of ever using a &lt;em&gt;global&lt;/em&gt;. I have seen several developers go to extraordinary lengths to avoid a &lt;em&gt;global&lt;/em&gt; because they considered using one as an admission of failure. Strange but true.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一些编码小工具视它们为荣耀的全球对象。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与许多人讨厌&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;goto&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;语句&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一样，其他人讨厌&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;曾经使用&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;全局&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;变量的想法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我已经看到一些开发人员竭尽全力避免&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;全局，&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因为他们考虑将&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;开发人员&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视为失败的承认。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;奇怪但真实。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd23f939cf611c71e9dd37ad01d7843f484366f9" translate="yes" xml:space="preserve">
          <source>Stack Overflow especially seems to assume that everyone agrees that Singletons are evil. Why?</source>
          <target state="translated">Stack Overflow尤其似乎认为大家都认为Singletons是邪恶的。为什么?</target>
        </trans-unit>
        <trans-unit id="789f399c246ebf167b232e3114d18264ff6e67cc" translate="yes" xml:space="preserve">
          <source>That sounds weird, but &lt;strong&gt;now you have many singletons in your application&lt;/strong&gt;. And that is exactly what a singleton is not supposed to be: Having many objects of it. This is especially bad if you, as shown in this example, want to make synchronized calls to a database.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;听起来很奇怪，但是&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在您的应用程序中有很多单例&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而这正是单身人士不应该拥有的：拥有众多对象。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如本例所示，如果您要对数据库进行同步调用，则尤为糟糕。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f2475bf5ffeb163ceac957a3d49d6036113fdd88" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;singleton pattern&lt;/a&gt; is a fully paid up member of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;GoF&lt;/a&gt;'s &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201633612&quot;&gt;patterns book&lt;/a&gt;, but it lately seems rather orphaned by the developer world. I still use quite a lot of singletons, especially for &lt;a href=&quot;https://en.wikipedia.org/wiki/Factory_method_pattern&quot;&gt;factory classes&lt;/a&gt;, and while you have to be a bit careful about multithreading issues (like any class actually), I fail to see why they are so awful.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;单例模式&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是一个缴足成员&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;四人帮&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201633612&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;模式书&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，但最近似乎而是由开发者世界孤立。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我仍然使用很多单例，尤其是对于&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Factory_method_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;工厂类&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，并且尽管您必须对多线程问题（实际上是任何类）有所注意，但我看不出它们为什么如此糟糕。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8cc31c742f2cb350a70f7da3d43015596237acc3" translate="yes" xml:space="preserve">
          <source>The Singleton context is also really important. The defining characteristic of a Singleton is that there is &quot;only one&quot;, but the truth is it is &quot;only one&quot; within some kind of context/namespace. They are usually one of: one per thread, process, IP address or cluster, but can also be one per processor, machine, language namespace/class loader/whatever, subnet, Internet, etc.</source>
          <target state="translated">Singleton上下文也确实很重要。Singleton的定义特征是 &quot;只有一个&quot;,但实际上它是在某种上下文命名空间内 &quot;只有一个&quot;。它们通常是其中之一:每个线程、进程、进程、IP地址或群集都有一个,但也可以是每个处理器、机器、语言命名空间、语言命名空间类加载器whatever、子网、Internet等都有一个。</target>
        </trans-unit>
        <trans-unit id="835608667d69c55c183b0cef18dafe7f7cbbb7a5" translate="yes" xml:space="preserve">
          <source>The bad part of a singleton is generally the user (or should I say the inappropriate use of a singleton for things it is not designed to do). The biggest offender is using a singleton as a fake global variable.</source>
          <target state="translated">一般来说,单元的坏处在于用户(或者我应该说是不恰当地使用单元来做一些它不应该做的事情)。最大的罪魁祸首就是把单体作为一个假的全局变量来使用。</target>
        </trans-unit>
        <trans-unit id="7b5cae7f5b6c184980327093d8fb76a94df99840" translate="yes" xml:space="preserve">
          <source>The other, less common, mistake is to ignore the Singleton lifestyle. Just because there is only one doesn't mean a Singleton is some omnipotent &quot;always was and always will be&quot;, nor is it generally desirable (objects without a begin and end violate all kinds of useful assumptions in code, and should be employed only in the most desperate of circumstances.</source>
          <target state="translated">另一个不太常见的错误是忽略了Singleton生活方式。仅仅因为只有一个,并不意味着Singleton是某种全能的 &quot;永远都是、永远都是&quot;,也不代表它一般是可取的(没有开头和结尾的对象违反了代码中各种有用的假设,只应该在最绝望的情况下才使用。</target>
        </trans-unit>
        <trans-unit id="15878b09a961588056074d3687c3f79453c08e1e" translate="yes" xml:space="preserve">
          <source>The problems that singleton cause in testing is a symptom of their hard coded single usage case/environment. The test suite and the many tests are each individual and separate something that is not compatible with hardcoding a singleton.</source>
          <target state="translated">Singleton在测试中引起的问题,是其硬编码单一用例environment的症状。测试套件和众多的测试是各自为政的,分离的东西,与硬编码的单体用例不兼容。</target>
        </trans-unit>
        <trans-unit id="9833752e81fedcd533363bb0df3d89b4b006c284" translate="yes" xml:space="preserve">
          <source>The problems with singletons is the issue of increased scope and therefore &lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;coupling&lt;/a&gt;. There is no denying that there are some of situations where you do need access to a single instance, and it can be accomplished other ways.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;单身人士的问题是范围扩大并因此&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;耦合的问题&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不可否认，在某些情况下您确实需要访问单个实例，并且可以通过其他方法来实现。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="df4e6e231e99dc52f3bff603e6c0d51c55026c2a" translate="yes" xml:space="preserve">
          <source>The singleton pattern is not a problem in itself. The problem is that the pattern is often used by people developing software with object-oriented tools without having a solid grasp of OO concepts. When singletons are introduced in this context they tend to grow into unmanageable classes that contain helper methods for every little use.</source>
          <target state="translated">单体模式本身并不是问题。问题在于,这种模式经常被那些使用面向对象工具开发软件的人在没有扎实掌握OO概念的情况下使用。当单子模式在这种情况下被引入时,它们往往会成长为不可管理的类,包含了每一个小用处的帮助方法。</target>
        </trans-unit>
        <trans-unit id="465df7c70852f19533399cca69e2d76b8e5bf51e" translate="yes" xml:space="preserve">
          <source>The singleton should be simple in nature and not overly complicated.</source>
          <target state="translated">单身的人应该是简单的,不能过于复杂。</target>
        </trans-unit>
        <trans-unit id="d16f8b3beb1ad83c4ab0ac8578a45a586f69fe71" translate="yes" xml:space="preserve">
          <source>The two biggest screw ups I see are: treating it like a global &amp;amp; failing to define the Singleton closure.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我看到的两个最大的问题是：将其视为全局对象，并且无法定义Singleton闭包。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3c54f8415cbbb0dc73616090c496cddc67a6a2d6" translate="yes" xml:space="preserve">
          <source>Then, instead of one of them winning, the process starts all over. All of a sudden, a finite set of rules becomes a moving target and the game degenerates into the type of social interactions that would make up the foundation of every high-rated reality TV show since Survivor. Why, because the rules are changing and there's no consensus on how/why/what they're supposed to represent, and more importantly, there's no one person making the decisions. Every player in the game, at that point, is making his/her own rules and chaos ensues until two of the players are too tired to keep up the charade and slowly give up.</source>
          <target state="translated">然后,不是其中一个人赢了,而是整个过程重新开始。突然间,一套有限的规则变成了一个移动的目标 游戏就变成了一种社交互动的形式,而这种社交互动是自《幸存者》以来每一个高收视率真人秀节目的基础。为什么呢,因为规则在不断变化,而且在规则应该代表什么的问题上没有共识,更重要的是,没有一个人做决定。每位选手在游戏中,在这一点上,都在制定自己的规则,混乱接踵而至,直到有两位选手疲于奔命,无法坚持下去,慢慢地放弃了。</target>
        </trans-unit>
        <trans-unit id="94f7d2aeef0065cc58a25d8c73e0e4361c409fc9" translate="yes" xml:space="preserve">
          <source>There aren't many examples. A log file is the big one. You don't want to just abandon a single log file. You want to flush, sync and close it properly. This is an example of a single shared resource that has to be managed.</source>
          <target state="translated">例子不多。一个日志文件是大的。你不希望只放弃一个日志文件。你要正确地冲洗、同步和关闭它。这个例子就是一个单一的共享资源必须要管理的例子。</target>
        </trans-unit>
        <trans-unit id="f1ebb5ebafa456472c719f0e8d8a94135dd4aeb2" translate="yes" xml:space="preserve">
          <source>There is also the multi-threaded scenario where singletons can become a bottleneck as well as a synchronization issue.</source>
          <target state="translated">还有就是多线程的情况下,单线程会成为瓶颈,也是同步问题。</target>
        </trans-unit>
        <trans-unit id="ae8dc1fef3e4bf10c544a55f52796833a6c58b74" translate="yes" xml:space="preserve">
          <source>There is nothing inherently wrong with the pattern, assuming it is being used for some aspect of your model which is truly single.</source>
          <target state="translated">假设你的模型的某些方面确实是单一的,这个模式本质上是没有什么问题的。</target>
        </trans-unit>
        <trans-unit id="623dde36e233f0079e0085137f7deb08030d05b3" translate="yes" xml:space="preserve">
          <source>They are generally used as a global instance, why is that so bad? Because you hide the dependencies of your application in your code, instead of exposing them through the interfaces. Making something global to avoid passing it around is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_smell&quot;&gt;code smell&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它们通常用作全局实例，为什么这么糟？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因为您在代码中隐藏了应用程序的依赖关系，而不是通过接口公开它们。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使某些东西全局化以避免传递它是一种&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_smell&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代码味道&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba0e2b9616043f04660dd81d417cf5a73379fae0" translate="yes" xml:space="preserve">
          <source>They carry state around for the lifetime of the application. Another hit to testing since you can end up with a situation where tests need to be ordered which is a big no no for unit tests. Why? Because each unit test should be independent from the other.</source>
          <target state="translated">它们会在应用程序的生命周期内携带状态。这也是对测试的另一个打击,因为你可能会出现需要命令测试的情况,而这对于单元测试来说是一个很大的禁忌。为什么?因为每个单元测试都应该是独立的。</target>
        </trans-unit>
        <trans-unit id="0e53548518905c337e4e3cda636d244bba6f2fa4" translate="yes" xml:space="preserve">
          <source>They inherently cause code to be tightly &lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;coupled&lt;/a&gt;. This makes faking them out under test rather difficult in many cases.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它们固有地导致代码紧密&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;耦合&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在许多情况下，这使伪造它们经受测试相当困难。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eaf26fcd332b1240c30b63e8f6f491d24eac2db8" translate="yes" xml:space="preserve">
          <source>They violate the &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;single responsibility principle&lt;/a&gt;: by virtue of the fact that they control their own creation and lifecycle.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他们违反了&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;单一责任原则&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：由于他们控制自己的创作和生命周期。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4c954584093770b03e88adcfe2a8a14d6ea33cb0" translate="yes" xml:space="preserve">
          <source>To start a game of monopoly, first:</source>
          <target state="translated">要开始一场大富翁游戏,首先。</target>
        </trans-unit>
        <trans-unit id="ca4d354b99bc24d443677735e54833fae801e272" translate="yes" xml:space="preserve">
          <source>Too many people put objects which are not thread safe in a singleton pattern. I've seen examples of a DataContext (&lt;a href=&quot;http://en.wikipedia.org/wiki/Language_Integrated_Query#LINQ_to_SQL_.28formerly_called_DLINQ.29&quot;&gt;LINQ&amp;nbsp;to&amp;nbsp;SQL&lt;/a&gt;) done in a singleton pattern, despite the fact that the DataContext is not thread safe and is purely a unit-of-work object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;太多的人将不是线程安全的对象放在单例模式中。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;尽管DataContext不是线程安全的，并且纯粹是一个工作单元对象，但&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我已经看到&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;了以Singleton模式完成&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的DataContext（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Language_Integrated_Query#LINQ_to_SQL_.28formerly_called_DLINQ.29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;LINQ to SQL&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;示例&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="398efeaac4bc6e2faa9b4c57d3f5b8a9b52f18bc" translate="yes" xml:space="preserve">
          <source>Unlike other answers I don't want to talk about what is wrong with Singletons but to show you how powerful and awesome they are when used right!</source>
          <target state="translated">与其他答案不同的是,我并不想说什么是Singletons有什么问题,而是想告诉你,如果使用得当,它们是多么的强大,多么的牛逼</target>
        </trans-unit>
        <trans-unit id="24fb6a8b55fe7fc6662d5d9a56b3921a911f125a" translate="yes" xml:space="preserve">
          <source>Using a single instance of an class is a valid construct as long as you apply the following means in code:</source>
          <target state="translated">只要你在代码中应用了以下手段,使用一个类的单一实例就是一个有效的构造。</target>
        </trans-unit>
        <trans-unit id="7963242df7308adc2b3bd139cf37de9402e4f845" translate="yes" xml:space="preserve">
          <source>We've used Singletons in our solutions with a great deal of success that are testable ensuring deterministic behavior in parallel test run streams.</source>
          <target state="translated">我们的解决方案中使用了Singletons,并取得了很大的成功,可测试确保并行测试流中的确定性行为。</target>
        </trans-unit>
        <trans-unit id="da1a3cb035699759f4a078c19b9474f88a6e772b" translate="yes" xml:space="preserve">
          <source>What is so bad about singletons</source>
          <target state="translated">单身的人有什么不好</target>
        </trans-unit>
        <trans-unit id="50f77dcdabdfd3afda084de7fd3d29d5dfae4194" translate="yes" xml:space="preserve">
          <source>When it comes to Singletons</source>
          <target state="translated">当说到Singletons时</target>
        </trans-unit>
        <trans-unit id="5c986765347b4b7bcb59761b18cd82e4e10e25e6" translate="yes" xml:space="preserve">
          <source>When you think you need a global, you're probably making a terrible design mistake.</source>
          <target state="translated">当你认为你需要全局的时候,你可能犯了一个可怕的设计错误。</target>
        </trans-unit>
        <trans-unit id="4380b88b28be97d636237273ad914637b065daf2" translate="yes" xml:space="preserve">
          <source>When you write code using singletons, say, a logger or a database connection, and afterwards you discover you need more than one log or more than one database, you&amp;rsquo;re in trouble.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当您使用单例（例如记录器或数据库连接）编写代码时，随后发现您需要多个日志或多个数据库，您就遇到了麻烦。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c2df5f04ca68555136da5ed4bf5bd73a7b744b5f" translate="yes" xml:space="preserve">
          <source>Why does it change how long the state lasts? Singletons can be created or destroyed manually, so the control is still there, and you can make the lifetime the same as a non-singleton object's lifetime would be.</source>
          <target state="translated">为什么要改变状态的持续时间?单子可以手动创建或销毁,所以控制还是有的,你可以让寿命和非单子对象的寿命一样。</target>
        </trans-unit>
        <trans-unit id="801e82bda5401c9fc10a0749304f4d28624f7eec" translate="yes" xml:space="preserve">
          <source>Why does passing an object to a class make it more tightly coupled than using that object as a singleton from within the class?</source>
          <target state="translated">为什么传递一个对象到类中,会比在类中使用该对象作为单子,使其更紧密地耦合?</target>
        </trans-unit>
        <trans-unit id="a081d3ea69b57f4be3e26dd0623ed07dbee9e870" translate="yes" xml:space="preserve">
          <source>Why is hiding dependencies in your code bad? There are already dozens of hidden dependencies (C runtime calls, OS API calls, global function calls), and singleton dependencies are easy to find (search for instance()).</source>
          <target state="translated">为什么在代码中隐藏依赖关系不好?已经有几十个隐藏的依赖(C语言运行时调用、OS API调用、全局函数调用),单子依赖很容易找到(搜索instance())。</target>
        </trans-unit>
        <trans-unit id="2a2c34163aca31fcba0ec660cb7d173824ec9661" translate="yes" xml:space="preserve">
          <source>You can map &lt;code&gt;MyModel&lt;/code&gt; to &lt;code&gt;TestMyModel&lt;/code&gt; class that inherits it, everywhere when &lt;code&gt;MyModel&lt;/code&gt; will be injected you will get &lt;code&gt;TestMyModel&lt;/code&gt; instread.
 - &lt;strong&gt;Problem&lt;/strong&gt;: Singletons can cause memory leaks as they never disposed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可以将&lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;映射&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;到&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;继承它的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;TestMyModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在注入&lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyModel&lt;/code&gt; 的&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;任何地方，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;都会得到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;TestMyModel&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; instread。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;- &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;问题&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：单例可能会导致内存泄漏，因为它们永远不会被丢弃。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="070c0a7e28e299b15bf2111d596305db704790a1" translate="yes" xml:space="preserve">
          <source>You can then do the following from all over the place:</source>
          <target state="translated">然后,你可以从各处做以下几点。</target>
        </trans-unit>
        <trans-unit id="19728079c61f5eb831b4385ced41da1096a537bb" translate="yes" xml:space="preserve">
          <source>^ Alex Miller. &lt;a href=&quot;http://tech.puredanger.com/2007/07/03/pattern-hate-singleton/&quot;&gt;Patterns I hate #1: Singleton&lt;/a&gt;, July 2007</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;^亚历克斯&amp;middot;米勒。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://tech.puredanger.com/2007/07/03/pattern-hate-singleton/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我讨厌的模式1：Singleton&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，2007年7月&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fcb308952610da92d5ca908919ae791dc42bb049" translate="yes" xml:space="preserve">
          <source>^ J.B. Rainsberger, IBM. &lt;a href=&quot;http://www-128.ibm.com/developerworks/webservices/library/co-single.html&quot;&gt;Use your singletons wisely&lt;/a&gt;, July 2001</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;^ JB Rainsberger，IBM。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www-128.ibm.com/developerworks/webservices/library/co-single.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;明智地使用单身人士&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，2001年7月&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a788156b24d0bf82a606dee1b5227b07e47bd57" translate="yes" xml:space="preserve">
          <source>^ Scott Densmore. &lt;a href=&quot;http://blogs.msdn.com/scottdensmore/archive/2004/05/25/140827.aspx&quot;&gt;Why singletons are evil&lt;/a&gt;, May 2004</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;^ Scott Densmore。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.msdn.com/scottdensmore/archive/2004/05/25/140827.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为什么单身人士是邪恶的&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，2004年5月&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="484242ea0740f5e0e6cb94704610337fc5b2d075" translate="yes" xml:space="preserve">
          <source>^ Steve Yegge. &lt;a href=&quot;http://steve.yegge.googlepages.com/singleton-considered-stupid&quot;&gt;Singletons considered stupid&lt;/a&gt;, September 2004</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;^史蒂夫&amp;middot;耶格。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2004年9月，&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://steve.yegge.googlepages.com/singleton-considered-stupid&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;单身汉被认为是愚蠢的&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4d0ef9363f9acba6ca10c3f8aee3f26826f3a7be" translate="yes" xml:space="preserve">
          <source>a. It causes namespace conflict</source>
          <target state="translated">a.会导致命名空间冲突</target>
        </trans-unit>
        <trans-unit id="cf3fb1048c25336d3ef9b140e49d8db542d6678f" translate="yes" xml:space="preserve">
          <source>a. The explicit OO way of calling them, prevents the conflicts, so point a. is not an issue</source>
          <target state="translated">a.明显的OO方式的调用,防止了冲突,所以A点不是问题。</target>
        </trans-unit>
        <trans-unit id="332b0e2db7c52d7f329fd8b551eb950dee05cf67" translate="yes" xml:space="preserve">
          <source>b. It exposes the state in a unwarranted fashion</source>
          <target state="translated">b.它无端地暴露了国家的身份。</target>
        </trans-unit>
        <trans-unit id="8b0eb367ee096fc9e4032dbd74741830957f9414" translate="yes" xml:space="preserve">
          <source>b. Singletons without state are (like factories) are not a problem. Singletons with state can again fall in two categories, those which are immutable or write once and read many (config/property files). These are not bad. Mutable Singletons, which are kind of reference holders are the ones which you are speaking of.</source>
          <target state="translated">b.没有状态的单子(像工厂一样)是没有问题的。有状态的Singleletons又可以分为两类,一类是不可变的,另一类是写一次就可以读很多(configproperty文件)。这两类都不是坏事。Mutable Singletons,也就是你说的那种引用持有者。</target>
        </trans-unit>
        <trans-unit id="ab43fcca553c6f3639b5bc191032d2a14dfec129" translate="yes" xml:space="preserve">
          <source>everybody is given an equal start at the beginning of the game</source>
          <target state="translated">比赛开始时,每个人都有一个平等的起点</target>
        </trans-unit>
        <trans-unit id="95c8fe92116d1f9c066ed43d5286406e2f4d1903" translate="yes" xml:space="preserve">
          <source>if they &lt;em&gt;do&lt;/em&gt; need be unit tested and
do need to change the implementation,
it's easy to change a class from
using a singleton to having the
singleton passed to it via dependency
injection.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;确实&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;需要对&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它们&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;进行单元测试并且确实需要更改实现，则很容易将类从使用单例更改为通过依赖注入将单例传递给它。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1033f06a6e4d031a15155240c5dd06be1392c571" translate="yes" xml:space="preserve">
          <source>in classes that implement IMessageReceiver.</source>
          <target state="translated">在实现IMessageReceiver的类中。</target>
        </trans-unit>
        <trans-unit id="63c67bcc3aa92c02e8148e8f0850d007f6f9d562" translate="yes" xml:space="preserve">
          <source>not all classes need to be unit
tested</source>
          <target state="translated">不是所有的类都需要进行单元测试</target>
        </trans-unit>
        <trans-unit id="c6e595dac74db94f58cdd52fe08af8a5e9e4dc59" translate="yes" xml:space="preserve">
          <source>not all classes that need to be unit
tested need to change the
implementation of the singleton</source>
          <target state="translated">并非所有需要进行单元测试的类都需要改变单子的实现。</target>
        </trans-unit>
        <trans-unit id="422ff09c0e800e46347ae06765490e04994e4ce9" translate="yes" xml:space="preserve">
          <source>only one set of rules is presented to avoid confusion</source>
          <target state="translated">只提出一套规则,以避免混淆。</target>
        </trans-unit>
        <trans-unit id="82b524d90dbcf160ddb4a560d1503123520ae7c4" translate="yes" xml:space="preserve">
          <source>rather than:</source>
          <target state="translated">而不是:</target>
        </trans-unit>
        <trans-unit id="7570901e3d970213dc3d6ba782f132be44f9d7f9" translate="yes" xml:space="preserve">
          <source>the rules aren't allowed to change throughout the game</source>
          <target state="translated">规则是不允许在整个游戏中改变的</target>
        </trans-unit>
        <trans-unit id="5983b274e96763d883f37aeae5f28173136c7ba9" translate="yes" xml:space="preserve">
          <source>we establish the rules first so everybody is on the same page</source>
          <target state="translated">我们先制定规则,这样大家就能达成一致。</target>
        </trans-unit>
        <trans-unit id="1ecf37b81e7ec4252f6722c1010864a51b2b0022" translate="yes" xml:space="preserve">
          <source>you need a &lt;strong&gt;singleton&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您需要一个&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;单身人士&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
