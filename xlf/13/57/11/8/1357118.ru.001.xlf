<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/1357118">
    <body>
      <group id="1357118">
        <trans-unit id="fae0e10bdf0d014868dea3a0da787b04d3dd9d19" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;return false;&lt;/code&gt;&quot; will end the whole execution of process.</source>
          <target state="translated">&amp;laquo; &lt;code&gt;return false;&lt;/code&gt; &amp;raquo; завершит все выполнение процесса.</target>
        </trans-unit>
        <trans-unit id="ffd33deb4d5f18f19f785271ef14a831948e10f4" translate="yes" xml:space="preserve">
          <source>1. &lt;code&gt;event.preventDefault()&lt;/code&gt;</source>
          <target state="translated">1. &lt;code&gt;event.preventDefault()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6911d6ed74a30a44b4f213161bd36b90b35971f8" translate="yes" xml:space="preserve">
          <source>2. &lt;code&gt;return false&lt;/code&gt;</source>
          <target state="translated">2. &lt;code&gt;return false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c682213d69a04d511a2bed94efda8d1b961d1f36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e.preventDefault()&lt;/code&gt; will prevent the default event from occuring, &lt;code&gt;e.stopPropagation()&lt;/code&gt; will prevent the event from bubbling up and &lt;code&gt;return false&lt;/code&gt; will do both. Note that this behaviour differs from &lt;em&gt;normal&lt;/em&gt; (non-jQuery) event handlers, in which, notably, &lt;code&gt;return false&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; stop the event from bubbling up.</source>
          <target state="translated">&lt;code&gt;e.preventDefault()&lt;/code&gt; предотвратит возникновение события по умолчанию, &lt;code&gt;e.stopPropagation()&lt;/code&gt; предотвратит всплытие события и &lt;code&gt;return false&lt;/code&gt; сделает оба. Обратите внимание, что это поведение отличается от &lt;em&gt;обычных&lt;/em&gt; (не jQuery) обработчиков событий, в которых, в частности, &lt;code&gt;return false&lt;/code&gt; &lt;em&gt;не&lt;/em&gt; останавливает всплывающее событие.</target>
        </trans-unit>
        <trans-unit id="e11304fb217292ae2c34c1d5c3b0a6c6416ee224" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return false&lt;/code&gt; from &lt;em&gt;within a jQuery event handler&lt;/em&gt; is effectively the same as calling both  &lt;code&gt;e.preventDefault&lt;/code&gt; and &lt;code&gt;e.stopPropagation&lt;/code&gt; on the passed &lt;a href=&quot;http://api.jquery.com/category/events/event-object/&quot;&gt;jQuery.Event object.&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;return false&lt;/code&gt; из &lt;em&gt;обработчика событий jQuery&lt;/em&gt; фактически аналогичен вызову &lt;code&gt;e.preventDefault&lt;/code&gt; и &lt;code&gt;e.stopPropagation&lt;/code&gt; для переданного &lt;a href=&quot;http://api.jquery.com/category/events/event-object/&quot;&gt;объекта jQuery.Event.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2f9c12c2cb2851f1f89d5c4a92ffa6fb376de34c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Fuel Your Coding&lt;/em&gt; has a great &lt;a href=&quot;https://web.archive.org/web/20160429070956/http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/&quot;&gt;article on &lt;code&gt;return false;&lt;/code&gt; vs &lt;code&gt;event.preventDefault()&lt;/code&gt; vs &lt;code&gt;event.stopPropagation()&lt;/code&gt; vs &lt;code&gt;event.stopImmediatePropagation()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Fuel Your Coding&lt;/em&gt; имеет отличную &lt;a href=&quot;https://web.archive.org/web/20160429070956/http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/&quot;&gt;статью о &lt;code&gt;return false;&lt;/code&gt; &lt;/a&gt; vs &lt;code&gt;event.preventDefault()&lt;/code&gt; vs &lt;code&gt;event.stopPropagation()&lt;/code&gt; vs &lt;code&gt;event.stopImmediatePropagation()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a32d91473df69cb0ffa40d794dc99c71ac87b67b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Any benefit to using event.preventDefault() over &quot;return false&quot; to cancel out an href click?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Есть ли какая-либо польза от использования event.preventDefault () по сравнению с &amp;laquo;return false&amp;raquo; для отмены href клика?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7a4bdbcfc33c58ed25fe8c79135af6f350923341" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;e.preventDefault();&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;e.preventDefault();&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e23a605275e0784797360aeed8d6bedb2ecbdee9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;return False;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;вернуть Ложь;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db4ed8654e13296f089b55781343193b3ecf9979" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;return false is e.preventDefault AND e.stopPropagation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;вернуть false - это e.preventDefault AND e.stopPropagation&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e5fd4f67917c1fb278957c161146d7cb8dc01c25" translate="yes" xml:space="preserve">
          <source>Also you can't use return false in every situation. When giving a javascript function in the href attribute and if you return false then the user will be redirected to a page with false string written.</source>
          <target state="translated">Также нельзя использовать фальшивые возвраты в любой ситуации.При задании функции javascript в атрибуте href и если вы вернете false,то пользователь будет перенаправлен на страницу с написанной ложной строкой.</target>
        </trans-unit>
        <trans-unit id="5e02b250f1f097020809f000e09f54497ee5518c" translate="yes" xml:space="preserve">
          <source>Also, I have to define the first parameter in callback to be able to call the method. Perhaps, there are some reasons why I should avoid doing it like this and use &lt;code&gt;preventDefault&lt;/code&gt; instead? What's the better way?</source>
          <target state="translated">Кроме того, я должен определить первый параметр в обратном вызове, чтобы иметь возможность вызывать метод. Возможно, есть некоторые причины, по которым мне следует избегать подобных &lt;code&gt;preventDefault&lt;/code&gt; и использовать вместо него protectDefault ? Какой способ лучше?</target>
        </trans-unit>
        <trans-unit id="b7a6a825a670c51a75539c2fb419b4a5c69f9e65" translate="yes" xml:space="preserve">
          <source>Basically before starting using &lt;code&gt;return false;&lt;/code&gt;, first understand what &lt;code&gt;e.preventDefault();&lt;/code&gt; and &lt;code&gt;e.stopPropagation();&lt;/code&gt; do, then if you think you need both at the same time, then simply use it.</source>
          <target state="translated">В основном перед началом использования &lt;code&gt;return false;&lt;/code&gt; , сначала поймите, что &lt;code&gt;e.preventDefault();&lt;/code&gt; и &lt;code&gt;e.stopPropagation();&lt;/code&gt; сделайте, тогда, если вы думаете, что вам нужно и то и другое одновременно, просто используйте его.</target>
        </trans-unit>
        <trans-unit id="4d7b8a202991e04a22eacf413473738b7d67ed79" translate="yes" xml:space="preserve">
          <source>Basically, this way you combine things because jQuery is a framework which mostly focuses on HTML elements, you basically preventing the default, but at the same time, you stop propagation to bubble up.</source>
          <target state="translated">В основном,таким образом вы комбинируете вещи,потому что jQuery-это фреймворк,который в основном фокусируется на элементах HTML,вы в основном препятствуете установке по умолчанию,но в то же время,вы останавливаете распространение,чтобы &quot;пузыриться&quot;.</target>
        </trans-unit>
        <trans-unit id="f0cbd3b5faf5098a734c7a88edf69ff71e941e7b" translate="yes" xml:space="preserve">
          <source>But also don't forget it's all in jQuery or DOM related functions, when you run it on the element, basically, it prevents everything from firing including the default behaviour and propagation of the event.</source>
          <target state="translated">Но также не забывайте,что все это находится в функциях,связанных с jQuery или DOM,когда вы запускаете его на элементе,в основном,это предотвращает все от стрельбы,включая поведение по умолчанию и распространение события.</target>
        </trans-unit>
        <trans-unit id="690053acd51112afc99d8ffddb102492c2246e58" translate="yes" xml:space="preserve">
          <source>But if you are sure that the code won't trigger any exceptions, then you can go with any of the method you wish.</source>
          <target state="translated">Но если вы уверены,что код не вызовет никаких исключений,то вы можете выбрать любой метод.</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Расширить фрагмент</target>
        </trans-unit>
        <trans-unit id="3f50968ec35176d6674dcacd90532e90feceb0fa" translate="yes" xml:space="preserve">
          <source>Fact: An event handler that returns false prevents the default action for that event. It does not stop the event propagation. Event handlers have always worked this way, since the old days of Netscape Navigator.</source>
          <target state="translated">Факт:обработчик события,возвращающий false,предотвращает действие по умолчанию для этого события.Он не останавливает распространение события.Обработчики событий всегда работали таким образом,начиная со старых времен Netscape Navigator.</target>
        </trans-unit>
        <trans-unit id="534ee5b4559e3328702f79469bc8adc6687cdaf9" translate="yes" xml:space="preserve">
          <source>For further reading, see &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms536343%28VS.85%29.aspx&quot;&gt;attachEvent on MSDN&lt;/a&gt; and the &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/&quot;&gt;W3C DOM 2 Events documentation&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации см. &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms536343%28VS.85%29.aspx&quot;&gt;AttachEvent на MSDN&lt;/a&gt; и документацию &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/&quot;&gt;W3C DOM 2 Events&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9e87b4ba5212b116cc02bb22ef5f5fcb9e105e7b" translate="yes" xml:space="preserve">
          <source>For me, &lt;code&gt;return false;&lt;/code&gt; is simpler, shorter and probably less error prone than executing a method. With the method, you have to remember about correct casing, parenthesis, etc.</source>
          <target state="translated">Для меня &lt;code&gt;return false;&lt;/code&gt; проще, короче и, вероятно, менее подвержен ошибкам, чем выполнение метода. При использовании этого метода вы должны помнить о правильном регистре, скобках и т. Д.</target>
        </trans-unit>
        <trans-unit id="4bb4049b998507ba12cca0a9fc080b09b59a58f8" translate="yes" xml:space="preserve">
          <source>From my experience event.stopPropagation() is mostly used in CSS effect or animation works, for instance when you have hover effect for both card and button element, when you hover on the button both card and buttons hover effect will be triggered in this case, you can use event.stopPropagation() stop bubbling actions, and event.preventDefault() is for prevent default behaviour of browser actions. For instance, you have form but you only defined click event for the submit action, if the user submits the form by pressing enter, the browser triggered by keypress event, not your click event here you should use event.preventDefault() to avoid inappropriate behavior. I don't know what the hell is return false; sorry.For more clarification visit this link and play around with line #33 &lt;a href=&quot;https://www.codecademy.com/courses/introduction-to-javascript/lessons/requests-i/exercises/xhr-get-request-iv&quot;&gt;https://www.codecademy.com/courses/introduction-to-javascript/lessons/requests-i/exercises/xhr-get-request-iv&lt;/a&gt;</source>
          <target state="translated">Из моего опыта event.stopPropagation () в основном используется в эффектах CSS или анимационных работах, например, когда у вас есть эффект наведения как для карты, так и для элемента кнопки, когда вы наводите курсор на кнопку, в этом случае сработает эффект наведения карты и кнопок. , вы можете использовать event.stopPropagation (), чтобы прекратить всплывать действия, а event.preventDefault () предназначен для предотвращения поведения по умолчанию действий браузера. Например, у вас есть форма, но вы только определили событие щелчка для действия отправки, если пользователь отправляет форму нажатием клавиши ввода, браузер запускается по событию нажатия клавиши, а не событие щелчка здесь, вы должны использовать event.preventDefault (), чтобы избежать неуместного поведение. Я не знаю, что, черт возьми, вернуть ложь; извините. Для получения дополнительной информации перейдите по этой ссылке и поиграйте со строкой # 33 &lt;a href=&quot;https://www.codecademy.com/courses/introduction-to-javascript/lessons/requests-i/exercises/xhr-get-request-iv&quot;&gt;https://www.codecademy.com/courses/introduction-to-javascript/lessons/requests-i/exercises/xhr-get-request-iv&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4cc70deb1e2082683d9277e965b03247f646d725" translate="yes" xml:space="preserve">
          <source>From my experience, there is at least one clear advantage when using event.preventDefault() over using return false. Suppose you are capturing the click event on an anchor tag, otherwise which it would be a big problem if the user were to be navigated away from the current page. If your click handler uses return false to prevent browser navigation, it opens the possibility that the interpreter will not reach the return statement and the browser will proceed to execute the anchor tag's default behavior.</source>
          <target state="translated">По моему опыту,есть по крайней мере одно очевидное преимущество при использовании event.preventDefault()по сравнению с использованием return false.Предположим,вы захватываете событие клика по якорному тегу,в противном случае это будет большой проблемой,если пользователь будет перемещаться в сторону от текущей страницы.Если обработчик кликов использует return false для предотвращения навигации браузера,то это открывает возможность того,что интерпретатор не достигнет оператора возврата и браузер перейдет к выполнению поведения якорного тега по умолчанию.</target>
        </trans-unit>
        <trans-unit id="a31fd6e3fd2821d0a51950f3379956edb21860a6" translate="yes" xml:space="preserve">
          <source>Generally, your first option (&lt;code&gt;preventDefault()&lt;/code&gt;) is the one to take, but you have to know what context you're in and what your goals are.</source>
          <target state="translated">Как правило, вам &lt;code&gt;preventDefault()&lt;/code&gt; выбрать первый вариант ( protectDefault () ), но вы должны знать, в каком контексте вы находитесь, и каковы ваши цели.</target>
        </trans-unit>
        <trans-unit id="0596d6f00a3347313cd04e883e4f87f040474753" translate="yes" xml:space="preserve">
          <source>I think</source>
          <target state="translated">по-моему</target>
        </trans-unit>
        <trans-unit id="7f1c8fab4f672f93d606117684ac995c9116cf4d" translate="yes" xml:space="preserve">
          <source>I think the best way to do this is to use &lt;code&gt;event.preventDefault()&lt;/code&gt; because if some exception is raised in the handler, then the return &lt;code&gt;false&lt;/code&gt; statement will be skipped and the behavior will be opposite to what you want.</source>
          <target state="translated">Я думаю, что лучший способ сделать это - использовать &lt;code&gt;event.preventDefault()&lt;/code&gt; потому что, если в обработчике возникнет какое-то исключение, оператор return &lt;code&gt;false&lt;/code&gt; будет пропущен, а поведение будет противоположным желаемому.</target>
        </trans-unit>
        <trans-unit id="9cdf8d6ce959a22471d3a39738790b9d897e6276" translate="yes" xml:space="preserve">
          <source>If you still want to go with the return &lt;code&gt;false&lt;/code&gt;, then you can put your entire handler code in a try catch block like below:</source>
          <target state="translated">Если вы все еще хотите использовать возвращаемое значение &lt;code&gt;false&lt;/code&gt; , вы можете поместить весь код обработчика в блок try catch, как показано ниже:</target>
        </trans-unit>
        <trans-unit id="bb0d0dd0f06635a2e3099eb699c8b1f557ac6b81" translate="yes" xml:space="preserve">
          <source>Instance Ex.:-</source>
          <target state="translated">Экстрасенс Экс.</target>
        </trans-unit>
        <trans-unit id="4d1140645ad0e22b3b2634fbda0afe8a29f8fc0c" translate="yes" xml:space="preserve">
          <source>Is there any significant difference between those two methods of stopping event propagation?</source>
          <target state="translated">Есть ли существенная разница между этими двумя методами прекращения распространения событий?</target>
        </trans-unit>
        <trans-unit id="2811d4164a7f8982b60f1ce661246571786b4c78" translate="yes" xml:space="preserve">
          <source>It simply stops the default action of an element.</source>
          <target state="translated">Он просто останавливает действие элемента по умолчанию.</target>
        </trans-unit>
        <trans-unit id="0c16236dd51237165bb1b105d75fc40ff8af414b" translate="yes" xml:space="preserve">
          <source>It simply stops the execution of the function().</source>
          <target state="translated">Она просто останавливает выполнение функции().</target>
        </trans-unit>
        <trans-unit id="0c435cad29e82d4e68bf0a96a848c84683cda07d" translate="yes" xml:space="preserve">
          <source>My opinion from my experience saying, that it is always better to use</source>
          <target state="translated">По моему опыту я считаю,что всегда лучше использовать</target>
        </trans-unit>
        <trans-unit id="cc40fbbf66d8048134a4b0bb32ba2a5ab2198d82" translate="yes" xml:space="preserve">
          <source>Practically
        to stop or prevent submit event, whenever we required rather than &lt;code&gt;return false&lt;/code&gt;&lt;code&gt;event.preventDefault()&lt;/code&gt; works fine.</source>
          <target state="translated">Практически, чтобы остановить или предотвратить &lt;code&gt;event.preventDefault()&lt;/code&gt; события, всякий раз, когда нам требуется, а не &lt;code&gt;return false&lt;/code&gt; событие. PreventDefault () работает нормально.</target>
        </trans-unit>
        <trans-unit id="3fb2b45e6f78b9a7db57ffdf7214522d69586f58" translate="yes" xml:space="preserve">
          <source>Reason:-</source>
          <target state="translated">Reason:-</target>
        </trans-unit>
        <trans-unit id="6f7010d72c875819c4a41c2bc984d6fe1df782e1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/&quot;&gt;jQuery Events: Stop (Mis)Using Return False&lt;/a&gt; for more information and examples.</source>
          <target state="translated">Посмотрите &lt;a href=&quot;http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/&quot;&gt;События jQuery: Stop (Mis) Использование Return False&lt;/a&gt; для получения дополнительной информации и примеров.</target>
        </trans-unit>
        <trans-unit id="c22ceaa385f77ac38d89f8db0a94d8c35d9ef508" translate="yes" xml:space="preserve">
          <source>So basically this code below:</source>
          <target state="translated">Так что,в основном,этот код ниже:</target>
        </trans-unit>
        <trans-unit id="d7b748ec7ed905c2c18b5ee0cee93d2212ad82d5" translate="yes" xml:space="preserve">
          <source>So we can simply say, return false in &lt;code&gt;jQuery&lt;/code&gt; is equal to:</source>
          <target state="translated">Таким образом, мы можем просто сказать, что false в &lt;code&gt;jQuery&lt;/code&gt; равно:</target>
        </trans-unit>
        <trans-unit id="69faef1248c7fa0c1296504cd26cf52117e02cd8" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;http://ejohn.org/&quot;&gt;John Resig&lt;/a&gt;</source>
          <target state="translated">Источник: &lt;a href=&quot;http://ejohn.org/&quot;&gt;Джон Резиг&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="94ef51b966cbecdc97b4db056a923bfb7204a243" translate="yes" xml:space="preserve">
          <source>Stops callback execution and returns immediately when called.</source>
          <target state="translated">Останавливает выполнение обратного вызова и возвращается немедленно при вызове.</target>
        </trans-unit>
        <trans-unit id="3427246f89cd545a3f1a7102c57fa5709e7bfbfa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Tutorial/More_Event_Handlers#Prevent_Default_Action&quot;&gt;documentation from MDN&lt;/a&gt; explains how &lt;code&gt;return false&lt;/code&gt; in an event handler works</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Tutorial/More_Event_Handlers#Prevent_Default_Action&quot;&gt;Документация от MDN&lt;/a&gt; объясняет, как работает &lt;code&gt;return false&lt;/code&gt; в обработчике событий</target>
        </trans-unit>
        <trans-unit id="ffb4d9a19371f17a28b2ed336e8397790df1247e" translate="yes" xml:space="preserve">
          <source>The benefit to using event.preventDefault() is that you can add this as the first line in the handler, thereby guaranteeing that the anchor's default behavior will not fire, regardless if the last line of the function is not reached (eg. runtime error).</source>
          <target state="translated">Преимущество использования функции event.preventDefault()заключается в том,что вы можете добавить ее в качестве первой строки в обработчике,гарантируя тем самым,что поведение якоря по умолчанию не начнется,независимо от того,достигнута ли последняя строка функции (например,ошибка во время выполнения).</target>
        </trans-unit>
        <trans-unit id="95d32ca809090890fcedc7e54d58cacbd6310cbc" translate="yes" xml:space="preserve">
          <source>The main difference between &lt;code&gt;return false&lt;/code&gt; and &lt;code&gt;event.preventDefault()&lt;/code&gt; is that your code below &lt;code&gt;return false&lt;/code&gt; will not be executed and in &lt;code&gt;event.preventDefault()&lt;/code&gt; case your code will execute after this statement.</source>
          <target state="translated">Основное различие между &lt;code&gt;return false&lt;/code&gt; и &lt;code&gt;event.preventDefault()&lt;/code&gt; заключается в том, что код ниже &lt;code&gt;return false&lt;/code&gt; не будет выполнен, а в случае &lt;code&gt;event.preventDefault()&lt;/code&gt; ваш код будет выполнен после этого оператора.</target>
        </trans-unit>
        <trans-unit id="75a9628a79bce905f023d872c8d2d1807130fc6b" translate="yes" xml:space="preserve">
          <source>The reason to use &lt;code&gt;e.preventDefault();&lt;/code&gt; is that in our code so something goes wrong in the code, then it will allow to execute the link or form to get submitted or allow to execute or allow whatever action you need to do. &amp;amp; link or submit button will get submitted &amp;amp; still allow further propagation of the event.</source>
          <target state="translated">Причина использования &lt;code&gt;e.preventDefault();&lt;/code&gt; в том, что в нашем коде что-то идет не так в коде, тогда это позволит выполнить ссылку или форму для отправки или позволить выполнить или разрешить любое действие, которое вам нужно сделать. &amp;amp; ссылка или кнопка отправки будут отправлены и все еще позволяют дальнейшее распространение события.</target>
        </trans-unit>
        <trans-unit id="967fe78cf8f095c628d3dc047fcfebf7af3d22aa" translate="yes" xml:space="preserve">
          <source>The reason to use return false; is that you don't want to execute the function any more in strictly mode.</source>
          <target state="translated">Причина использования return false заключается в том,что вы больше не хотите выполнять функцию строго в режиме.</target>
        </trans-unit>
        <trans-unit id="e62eda3b3dd40a1c57862701fc44b746a8939e34" translate="yes" xml:space="preserve">
          <source>This is not, as you've titled it, a &quot;JavaScript&quot; question; it is a question regarding the design of jQuery.</source>
          <target state="translated">Это не вопрос &quot;JavaScript&quot;,как вы его назвали,а вопрос,касающийся дизайна jQuery.</target>
        </trans-unit>
        <trans-unit id="6d13ec0b3c4cbf652038e2e5ef0c80015ecf1149" translate="yes" xml:space="preserve">
          <source>What happens in jQuery is not the same as what happens with event handlers. DOM event listeners and MSIE &quot;attached&quot; events are a different matter altogether.</source>
          <target state="translated">То,что происходит в jQuery,не то же самое,что происходит с обработчиками событий.Слушатели DOM событий и &quot;прикрепленные&quot; события MSIE-это совсем другое дело.</target>
        </trans-unit>
        <trans-unit id="28dc6820fd6fdfeafcfc22f66322d8d6cebd5d05" translate="yes" xml:space="preserve">
          <source>When I want to prevent other event handlers from executing after a certain event is fired, I can use one of two techniques. I'll use jQuery in the examples, but this applies to plain-JS as well:</source>
          <target state="translated">Когда я хочу предотвратить выполнение других обработчиков событий после того,как определенное событие уволено,я могу использовать одну из двух техник.Я буду использовать jQuery в примерах,но это относится и к plain-JS:</target>
        </trans-unit>
        <trans-unit id="ac2f19513a13c9c491b86b8b2e34982c9f484d80" translate="yes" xml:space="preserve">
          <source>When using jQuery, &lt;code&gt;return false&lt;/code&gt; is doing 3 separate things when you call it:</source>
          <target state="translated">При использовании jQuery &lt;code&gt;return false&lt;/code&gt; делает 3 отдельных вещи, когда вы вызываете его:</target>
        </trans-unit>
        <trans-unit id="3f931f5016ba70d8840a41818a56549ccdfbc167" translate="yes" xml:space="preserve">
          <source>When you write return false it do the following things for you behind the scenes.</source>
          <target state="translated">Когда вы пишете фальшивый ответ,он делает для вас следующие вещи за кулисами.</target>
        </trans-unit>
        <trans-unit id="8244e3d25b0c79df38f5527fd1bf6a8bf0663d50" translate="yes" xml:space="preserve">
          <source>You can hang a lot of functions on the &lt;code&gt;onClick&lt;/code&gt; event for one element. How can you be sure the &lt;code&gt;false&lt;/code&gt; one will be the last one to fire? &lt;code&gt;preventDefault&lt;/code&gt; on the other hand will definitely prevent only the default behavior of the element.</source>
          <target state="translated">Вы можете повесить множество функций на событие &lt;code&gt;onClick&lt;/code&gt; для одного элемента. Как вы можете быть уверены, что &lt;code&gt;false&lt;/code&gt; будет последним, кто выстрелит? &lt;code&gt;preventDefault&lt;/code&gt; другой стороны, protectDefault определенно предотвратит только поведение элемента по умолчанию.</target>
        </trans-unit>
        <trans-unit id="062f6d368c3d95df8f8766e9affdef6be9e8a96c" translate="yes" xml:space="preserve">
          <source>You can read this in the W3C spec on &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-cancelation&quot;&gt;Event cancelation&lt;/a&gt;.</source>
          <target state="translated">Вы можете прочитать это в спецификации W3C по &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-cancelation&quot;&gt;отмене событий&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b5b504f53d504cf3929a38a5377f5cb20234c94d" translate="yes" xml:space="preserve">
          <source>event.preventDefault() vs. return false</source>
          <target state="translated">event.preventDefault()vs.return false</target>
        </trans-unit>
        <trans-unit id="785e6744d253e88b07c6226a71524da0112cf0da" translate="yes" xml:space="preserve">
          <source>is &lt;strong&gt;equal&lt;/strong&gt; to this code:</source>
          <target state="translated">&lt;strong&gt;равно&lt;/strong&gt; этому коду:</target>
        </trans-unit>
        <trans-unit id="a1a5acdea7e9ab67d03bf85aa9ddf592c93e3bac" translate="yes" xml:space="preserve">
          <source>is the w3c specified way of canceling events.</source>
          <target state="translated">это указанный w3c способ отмены мероприятий.</target>
        </trans-unit>
        <trans-unit id="3df67bc9df83585391840f5ded6bb0ee58a15d0a" translate="yes" xml:space="preserve">
          <source>jQuery and the &lt;a href=&quot;http://www.mail-archive.com/jquery-en@googlegroups.com/msg71371.html&quot;&gt;previously linked citation&lt;/a&gt; from &lt;a href=&quot;http://ejohn.org&quot;&gt;John Resig&lt;/a&gt; (in &lt;a href=&quot;https://stackoverflow.com/users/70393&quot;&gt;karim79's&lt;/a&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1357118/#1357151&quot;&gt;message&lt;/a&gt;) seem to be the source misunderstanding of how event handlers in general work.</source>
          <target state="translated">jQuery и &lt;a href=&quot;http://www.mail-archive.com/jquery-en@googlegroups.com/msg71371.html&quot;&gt;ранее связанная цитата&lt;/a&gt; от &lt;a href=&quot;http://ejohn.org&quot;&gt;Джона Резига&lt;/a&gt; (в &lt;a href=&quot;https://stackoverflow.com/questions/1357118/#1357151&quot;&gt;сообщении&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/users/70393&quot;&gt;karim79&lt;/a&gt; ), похоже, являются источником неправильного понимания того, как вообще работают обработчики событий.</target>
        </trans-unit>
        <trans-unit id="080713421bac1af25b3e689cddbe0a48d4e74d9d" translate="yes" xml:space="preserve">
          <source>prevents the hyperlink from following the URL, prevents the submit button to submit the form. When you have many event handlers and you just want to prevent default event from occuring, &amp;amp; occuring from many times,
for that we need to  use  in the top of the function().</source>
          <target state="translated">предотвращает переход по гиперссылке по URL, запрещает кнопку отправки для отправки формы. Когда у вас есть много обработчиков событий, и вы просто хотите предотвратить возникновение события по умолчанию и повторение много раз, для этого нам нужно использовать в верхней части функции ().</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
