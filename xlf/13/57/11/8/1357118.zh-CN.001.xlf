<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/1357118">
    <body>
      <group id="1357118">
        <trans-unit id="fae0e10bdf0d014868dea3a0da787b04d3dd9d19" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;return false;&lt;/code&gt;&quot; will end the whole execution of process.</source>
          <target state="translated">&amp;ldquo; &lt;code&gt;return false;&lt;/code&gt; &amp;rdquo;将结束整个过程的执行。</target>
        </trans-unit>
        <trans-unit id="ffd33deb4d5f18f19f785271ef14a831948e10f4" translate="yes" xml:space="preserve">
          <source>1. &lt;code&gt;event.preventDefault()&lt;/code&gt;</source>
          <target state="translated">1. &lt;code&gt;event.preventDefault()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6911d6ed74a30a44b4f213161bd36b90b35971f8" translate="yes" xml:space="preserve">
          <source>2. &lt;code&gt;return false&lt;/code&gt;</source>
          <target state="translated">2. &lt;code&gt;return false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c682213d69a04d511a2bed94efda8d1b961d1f36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e.preventDefault()&lt;/code&gt; will prevent the default event from occuring, &lt;code&gt;e.stopPropagation()&lt;/code&gt; will prevent the event from bubbling up and &lt;code&gt;return false&lt;/code&gt; will do both. Note that this behaviour differs from &lt;em&gt;normal&lt;/em&gt; (non-jQuery) event handlers, in which, notably, &lt;code&gt;return false&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; stop the event from bubbling up.</source>
          <target state="translated">&lt;code&gt;e.preventDefault()&lt;/code&gt; 将阻止默认事件的发生， &lt;code&gt;e.stopPropagation()&lt;/code&gt; 将阻止该事件的冒泡并 &lt;code&gt;return false&lt;/code&gt; 会同时执行这两种操作。 请注意，此行为不同于&lt;em&gt;普通的&lt;/em&gt; （非jQuery）事件处理程序，在事件处理程序中，值得注意的是， &lt;code&gt;return false&lt;/code&gt; 不会阻止事件冒泡。</target>
        </trans-unit>
        <trans-unit id="e11304fb217292ae2c34c1d5c3b0a6c6416ee224" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return false&lt;/code&gt; from &lt;em&gt;within a jQuery event handler&lt;/em&gt; is effectively the same as calling both  &lt;code&gt;e.preventDefault&lt;/code&gt; and &lt;code&gt;e.stopPropagation&lt;/code&gt; on the passed &lt;a href=&quot;http://api.jquery.com/category/events/event-object/&quot;&gt;jQuery.Event object.&lt;/a&gt;</source>
          <target state="translated">从&lt;em&gt;jQuery事件处理程序中&lt;/em&gt; &lt;code&gt;return false&lt;/code&gt; &lt;code&gt;e.preventDefault&lt;/code&gt; 与在传递的&lt;a href=&quot;http://api.jquery.com/category/events/event-object/&quot;&gt;jQuery.Event对象&lt;/a&gt;上调用e.preventDefault和 &lt;code&gt;e.stopPropagation&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="2f9c12c2cb2851f1f89d5c4a92ffa6fb376de34c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Fuel Your Coding&lt;/em&gt; has a great &lt;a href=&quot;https://web.archive.org/web/20160429070956/http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/&quot;&gt;article on &lt;code&gt;return false;&lt;/code&gt; vs &lt;code&gt;event.preventDefault()&lt;/code&gt; vs &lt;code&gt;event.stopPropagation()&lt;/code&gt; vs &lt;code&gt;event.stopImmediatePropagation()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;《加油您的代码》中&lt;/em&gt;有一篇很棒的&lt;a href=&quot;https://web.archive.org/web/20160429070956/http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/&quot;&gt;文章，关于 &lt;code&gt;return false;&lt;/code&gt; &lt;/a&gt; vs &lt;code&gt;event.preventDefault()&lt;/code&gt; vs &lt;code&gt;event.stopPropagation()&lt;/code&gt; vs &lt;code&gt;event.stopImmediatePropagation()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a32d91473df69cb0ffa40d794dc99c71ac87b67b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Any benefit to using event.preventDefault() over &quot;return false&quot; to cancel out an href click?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;使用event.preventDefault（）代替&amp;ldquo; return false&amp;rdquo;来取消href点击有什么好处？&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7a4bdbcfc33c58ed25fe8c79135af6f350923341" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;e.preventDefault();&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;e.preventDefault();&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e23a605275e0784797360aeed8d6bedb2ecbdee9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;return False;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;返回False;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db4ed8654e13296f089b55781343193b3ecf9979" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;return false is e.preventDefault AND e.stopPropagation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;返回false是e.preventDefault和e.stopPropagation&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e5fd4f67917c1fb278957c161146d7cb8dc01c25" translate="yes" xml:space="preserve">
          <source>Also you can't use return false in every situation. When giving a javascript function in the href attribute and if you return false then the user will be redirected to a page with false string written.</source>
          <target state="translated">另外,你不能在任何情况下都使用 return false。当给一个javascript函数的 href属性中的函数,如果你返回false,那么用户将被重定向到一个写有false字符串的页面。</target>
        </trans-unit>
        <trans-unit id="5e02b250f1f097020809f000e09f54497ee5518c" translate="yes" xml:space="preserve">
          <source>Also, I have to define the first parameter in callback to be able to call the method. Perhaps, there are some reasons why I should avoid doing it like this and use &lt;code&gt;preventDefault&lt;/code&gt; instead? What's the better way?</source>
          <target state="translated">另外，我必须在回调中定义第一个参数才能调用该方法。 也许，出于某些原因，我应该避免这样做，而使用 &lt;code&gt;preventDefault&lt;/code&gt; 呢？ 有什么更好的方法？</target>
        </trans-unit>
        <trans-unit id="b7a6a825a670c51a75539c2fb419b4a5c69f9e65" translate="yes" xml:space="preserve">
          <source>Basically before starting using &lt;code&gt;return false;&lt;/code&gt;, first understand what &lt;code&gt;e.preventDefault();&lt;/code&gt; and &lt;code&gt;e.stopPropagation();&lt;/code&gt; do, then if you think you need both at the same time, then simply use it.</source>
          <target state="translated">基本上在开始使用前 &lt;code&gt;return false;&lt;/code&gt; ，首先了解一下 &lt;code&gt;e.preventDefault();&lt;/code&gt; 和 &lt;code&gt;e.stopPropagation();&lt;/code&gt; 然后，如果您认为同时需要两者，则只需使用它。</target>
        </trans-unit>
        <trans-unit id="4d7b8a202991e04a22eacf413473738b7d67ed79" translate="yes" xml:space="preserve">
          <source>Basically, this way you combine things because jQuery is a framework which mostly focuses on HTML elements, you basically preventing the default, but at the same time, you stop propagation to bubble up.</source>
          <target state="translated">基本上,这种方式可以把事情结合起来,因为jQuery是一个框架,它主要是以HTML元素为主,你基本上是防止默认的,但同时,你停止传播的同时,也就停止了传播的泡沫化。</target>
        </trans-unit>
        <trans-unit id="f0cbd3b5faf5098a734c7a88edf69ff71e941e7b" translate="yes" xml:space="preserve">
          <source>But also don't forget it's all in jQuery or DOM related functions, when you run it on the element, basically, it prevents everything from firing including the default behaviour and propagation of the event.</source>
          <target state="translated">但是也别忘了它都是在jQuery或者DOM相关的函数中,当你在元素上运行它的时候,基本上就会阻止所有的事情发生,包括事件的默认行为和传播。</target>
        </trans-unit>
        <trans-unit id="690053acd51112afc99d8ffddb102492c2246e58" translate="yes" xml:space="preserve">
          <source>But if you are sure that the code won't trigger any exceptions, then you can go with any of the method you wish.</source>
          <target state="translated">但如果你确定代码不会触发任何异常,那么你可以用你想用的任何一种方法。</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">扩展片段</target>
        </trans-unit>
        <trans-unit id="3f50968ec35176d6674dcacd90532e90feceb0fa" translate="yes" xml:space="preserve">
          <source>Fact: An event handler that returns false prevents the default action for that event. It does not stop the event propagation. Event handlers have always worked this way, since the old days of Netscape Navigator.</source>
          <target state="translated">事实:一个返回false的事件处理程序会阻止该事件的默认操作。它不会停止事件的传播。从Netscape Navigator的旧时代开始,事件处理程序就一直是这样工作的。</target>
        </trans-unit>
        <trans-unit id="534ee5b4559e3328702f79469bc8adc6687cdaf9" translate="yes" xml:space="preserve">
          <source>For further reading, see &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms536343%28VS.85%29.aspx&quot;&gt;attachEvent on MSDN&lt;/a&gt; and the &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/&quot;&gt;W3C DOM 2 Events documentation&lt;/a&gt;.</source>
          <target state="translated">有关更多阅读，请参阅&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms536343%28VS.85%29.aspx&quot;&gt;MSDN上的attachEvent&lt;/a&gt;和&lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/&quot;&gt;W3C DOM 2事件文档&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="9e87b4ba5212b116cc02bb22ef5f5fcb9e105e7b" translate="yes" xml:space="preserve">
          <source>For me, &lt;code&gt;return false;&lt;/code&gt; is simpler, shorter and probably less error prone than executing a method. With the method, you have to remember about correct casing, parenthesis, etc.</source>
          <target state="translated">对我来说， &lt;code&gt;return false;&lt;/code&gt; 与执行方法相比，它更简单，更短并且更容易出错。 使用该方法时，您必须记住正确的大小写，括号等。</target>
        </trans-unit>
        <trans-unit id="4bb4049b998507ba12cca0a9fc080b09b59a58f8" translate="yes" xml:space="preserve">
          <source>From my experience event.stopPropagation() is mostly used in CSS effect or animation works, for instance when you have hover effect for both card and button element, when you hover on the button both card and buttons hover effect will be triggered in this case, you can use event.stopPropagation() stop bubbling actions, and event.preventDefault() is for prevent default behaviour of browser actions. For instance, you have form but you only defined click event for the submit action, if the user submits the form by pressing enter, the browser triggered by keypress event, not your click event here you should use event.preventDefault() to avoid inappropriate behavior. I don't know what the hell is return false; sorry.For more clarification visit this link and play around with line #33 &lt;a href=&quot;https://www.codecademy.com/courses/introduction-to-javascript/lessons/requests-i/exercises/xhr-get-request-iv&quot;&gt;https://www.codecademy.com/courses/introduction-to-javascript/lessons/requests-i/exercises/xhr-get-request-iv&lt;/a&gt;</source>
          <target state="translated">根据我的经验，event.stopPropagation（）主要用于CSS效果或动画作品中，例如，当您同时对卡片和按钮元素都具有悬停效果时，当您在按钮上悬停时，会触发卡片和按钮的悬停效果，您可以使用event.stopPropagation（）停止冒泡操作，而event.preventDefault（）用于阻止浏览器操作的默认行为。 例如，您有一个表单，但您仅为该提交操作定义了click事件，如果用户通过按Enter提交表单，则由keypress事件触发的浏览器（而不是您的click事件）在这里，您应该使用event.preventDefault（）以避免不合适行为。 我不知道该死的是假。 抱歉。有关更多说明，请访问此链接，并播放＃33行&lt;a href=&quot;https://www.codecademy.com/courses/introduction-to-javascript/lessons/requests-i/exercises/xhr-get-request-iv&quot;&gt;https://www.codecademy.com/courses/introduction-to-javascript/lessons/requests-i/exercises/xhr-get-request-iv&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4cc70deb1e2082683d9277e965b03247f646d725" translate="yes" xml:space="preserve">
          <source>From my experience, there is at least one clear advantage when using event.preventDefault() over using return false. Suppose you are capturing the click event on an anchor tag, otherwise which it would be a big problem if the user were to be navigated away from the current page. If your click handler uses return false to prevent browser navigation, it opens the possibility that the interpreter will not reach the return statement and the browser will proceed to execute the anchor tag's default behavior.</source>
          <target state="translated">从我的经验来看,使用event.protectedDefault()比使用return false至少有一个明显的优势。假设你是在一个锚点标记上捕获点击事件,否则如果用户被导航离开当前页面,那将是一个很大的问题。如果你的点击处理程序使用返回false来阻止浏览器导航,那么就有可能导致解释器无法到达返回语句,而浏览器将继续执行锚标记的默认行为。</target>
        </trans-unit>
        <trans-unit id="a31fd6e3fd2821d0a51950f3379956edb21860a6" translate="yes" xml:space="preserve">
          <source>Generally, your first option (&lt;code&gt;preventDefault()&lt;/code&gt;) is the one to take, but you have to know what context you're in and what your goals are.</source>
          <target state="translated">通常，您的第一个选项（ &lt;code&gt;preventDefault()&lt;/code&gt; ）是您要采用的选项，但是您必须知道您所处的环境以及目标是什么。</target>
        </trans-unit>
        <trans-unit id="0596d6f00a3347313cd04e883e4f87f040474753" translate="yes" xml:space="preserve">
          <source>I think</source>
          <target state="translated">我想</target>
        </trans-unit>
        <trans-unit id="7f1c8fab4f672f93d606117684ac995c9116cf4d" translate="yes" xml:space="preserve">
          <source>I think the best way to do this is to use &lt;code&gt;event.preventDefault()&lt;/code&gt; because if some exception is raised in the handler, then the return &lt;code&gt;false&lt;/code&gt; statement will be skipped and the behavior will be opposite to what you want.</source>
          <target state="translated">我认为最好的方法是使用 &lt;code&gt;event.preventDefault()&lt;/code&gt; ,因为如果在处理程序中引发某些异常，则将跳过 &lt;code&gt;false&lt;/code&gt; 语句，并且行为与您想要的相反。</target>
        </trans-unit>
        <trans-unit id="9cdf8d6ce959a22471d3a39738790b9d897e6276" translate="yes" xml:space="preserve">
          <source>If you still want to go with the return &lt;code&gt;false&lt;/code&gt;, then you can put your entire handler code in a try catch block like below:</source>
          <target state="translated">如果您仍然希望使用return &lt;code&gt;false&lt;/code&gt; ，那么可以将整个处理程序代码放入如下所示的try catch块中：</target>
        </trans-unit>
        <trans-unit id="bb0d0dd0f06635a2e3099eb699c8b1f557ac6b81" translate="yes" xml:space="preserve">
          <source>Instance Ex.:-</source>
          <target state="translated">例子 Ex.:-</target>
        </trans-unit>
        <trans-unit id="4d1140645ad0e22b3b2634fbda0afe8a29f8fc0c" translate="yes" xml:space="preserve">
          <source>Is there any significant difference between those two methods of stopping event propagation?</source>
          <target state="translated">这两种停止事件传播的方法是否有明显区别?</target>
        </trans-unit>
        <trans-unit id="2811d4164a7f8982b60f1ce661246571786b4c78" translate="yes" xml:space="preserve">
          <source>It simply stops the default action of an element.</source>
          <target state="translated">它只是停止了一个元素的默认动作。</target>
        </trans-unit>
        <trans-unit id="0c16236dd51237165bb1b105d75fc40ff8af414b" translate="yes" xml:space="preserve">
          <source>It simply stops the execution of the function().</source>
          <target state="translated">它只是停止了函数()的执行。</target>
        </trans-unit>
        <trans-unit id="0c435cad29e82d4e68bf0a96a848c84683cda07d" translate="yes" xml:space="preserve">
          <source>My opinion from my experience saying, that it is always better to use</source>
          <target state="translated">根据我的经验,我的意见是,最好是使用 &quot;我&quot;。</target>
        </trans-unit>
        <trans-unit id="cc40fbbf66d8048134a4b0bb32ba2a5ab2198d82" translate="yes" xml:space="preserve">
          <source>Practically
        to stop or prevent submit event, whenever we required rather than &lt;code&gt;return false&lt;/code&gt;&lt;code&gt;event.preventDefault()&lt;/code&gt; works fine.</source>
          <target state="translated">实际上，无论何时我们需要而不是 &lt;code&gt;return false&lt;/code&gt; &lt;code&gt;event.preventDefault()&lt;/code&gt; 都可以停止或阻止Submit事件。</target>
        </trans-unit>
        <trans-unit id="3fb2b45e6f78b9a7db57ffdf7214522d69586f58" translate="yes" xml:space="preserve">
          <source>Reason:-</source>
          <target state="translated">Reason:-</target>
        </trans-unit>
        <trans-unit id="6f7010d72c875819c4a41c2bc984d6fe1df782e1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/&quot;&gt;jQuery Events: Stop (Mis)Using Return False&lt;/a&gt; for more information and examples.</source>
          <target state="translated">有关更多信息和示例，请参见&lt;a href=&quot;http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/&quot;&gt;jQuery Events：Stop（Mis）Using Return False&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="c22ceaa385f77ac38d89f8db0a94d8c35d9ef508" translate="yes" xml:space="preserve">
          <source>So basically this code below:</source>
          <target state="translated">所以下面基本上是这样的代码。</target>
        </trans-unit>
        <trans-unit id="d7b748ec7ed905c2c18b5ee0cee93d2212ad82d5" translate="yes" xml:space="preserve">
          <source>So we can simply say, return false in &lt;code&gt;jQuery&lt;/code&gt; is equal to:</source>
          <target state="translated">所以我们可以简单地说，在 &lt;code&gt;jQuery&lt;/code&gt; 中返回false等于：</target>
        </trans-unit>
        <trans-unit id="69faef1248c7fa0c1296504cd26cf52117e02cd8" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;http://ejohn.org/&quot;&gt;John Resig&lt;/a&gt;</source>
          <target state="translated">资料来源： &lt;a href=&quot;http://ejohn.org/&quot;&gt;John Resig&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="94ef51b966cbecdc97b4db056a923bfb7204a243" translate="yes" xml:space="preserve">
          <source>Stops callback execution and returns immediately when called.</source>
          <target state="translated">停止回调执行并在调用时立即返回。</target>
        </trans-unit>
        <trans-unit id="3427246f89cd545a3f1a7102c57fa5709e7bfbfa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Tutorial/More_Event_Handlers#Prevent_Default_Action&quot;&gt;documentation from MDN&lt;/a&gt; explains how &lt;code&gt;return false&lt;/code&gt; in an event handler works</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Tutorial/More_Event_Handlers#Prevent_Default_Action&quot;&gt;MDN&lt;/a&gt;的文档说明了事件处理程序中 &lt;code&gt;return false&lt;/code&gt; 的工作方式</target>
        </trans-unit>
        <trans-unit id="ffb4d9a19371f17a28b2ed336e8397790df1247e" translate="yes" xml:space="preserve">
          <source>The benefit to using event.preventDefault() is that you can add this as the first line in the handler, thereby guaranteeing that the anchor's default behavior will not fire, regardless if the last line of the function is not reached (eg. runtime error).</source>
          <target state="translated">使用event.protectedDefault()的好处是,你可以在处理程序的第一行中添加这个,从而保证锚的默认行为不会被触发,不管函数的最后一行没有到达(例如运行时错误)。</target>
        </trans-unit>
        <trans-unit id="95d32ca809090890fcedc7e54d58cacbd6310cbc" translate="yes" xml:space="preserve">
          <source>The main difference between &lt;code&gt;return false&lt;/code&gt; and &lt;code&gt;event.preventDefault()&lt;/code&gt; is that your code below &lt;code&gt;return false&lt;/code&gt; will not be executed and in &lt;code&gt;event.preventDefault()&lt;/code&gt; case your code will execute after this statement.</source>
          <target state="translated">&lt;code&gt;return false&lt;/code&gt; 和 &lt;code&gt;event.preventDefault()&lt;/code&gt; 之间的主要区别在于， 返回false下面的代码将不会执行，在 &lt;code&gt;event.preventDefault()&lt;/code&gt; 情况下，您的代码将在此语句后执行。</target>
        </trans-unit>
        <trans-unit id="75a9628a79bce905f023d872c8d2d1807130fc6b" translate="yes" xml:space="preserve">
          <source>The reason to use &lt;code&gt;e.preventDefault();&lt;/code&gt; is that in our code so something goes wrong in the code, then it will allow to execute the link or form to get submitted or allow to execute or allow whatever action you need to do. &amp;amp; link or submit button will get submitted &amp;amp; still allow further propagation of the event.</source>
          <target state="translated">使用 &lt;code&gt;e.preventDefault();&lt;/code&gt; 的原因 是在我们的代码中，代码中出了点问题，那么它将允许执行链接或表单以提交或允许执行或执行您需要执行的任何操作。 ＆链接或提交按钮将被提交，并且仍允许事件的进一步传播。</target>
        </trans-unit>
        <trans-unit id="967fe78cf8f095c628d3dc047fcfebf7af3d22aa" translate="yes" xml:space="preserve">
          <source>The reason to use return false; is that you don't want to execute the function any more in strictly mode.</source>
          <target state="translated">使用返回false;的原因是你不想再严格的模式下执行函数。</target>
        </trans-unit>
        <trans-unit id="e62eda3b3dd40a1c57862701fc44b746a8939e34" translate="yes" xml:space="preserve">
          <source>This is not, as you've titled it, a &quot;JavaScript&quot; question; it is a question regarding the design of jQuery.</source>
          <target state="translated">这不是像你所说的那样,是一个 &quot;JavaScript &quot;问题,而是一个关于jQuery设计的问题。</target>
        </trans-unit>
        <trans-unit id="6d13ec0b3c4cbf652038e2e5ef0c80015ecf1149" translate="yes" xml:space="preserve">
          <source>What happens in jQuery is not the same as what happens with event handlers. DOM event listeners and MSIE &quot;attached&quot; events are a different matter altogether.</source>
          <target state="translated">jQuery中发生的事情和事件处理程序发生的事情不一样。DOM事件监听器和MSIE &quot;附加 &quot;事件完全是两回事。</target>
        </trans-unit>
        <trans-unit id="28dc6820fd6fdfeafcfc22f66322d8d6cebd5d05" translate="yes" xml:space="preserve">
          <source>When I want to prevent other event handlers from executing after a certain event is fired, I can use one of two techniques. I'll use jQuery in the examples, but this applies to plain-JS as well:</source>
          <target state="translated">当我想阻止其他事件处理程序在某个事件被触发后执行时,我可以使用两种技术之一。我将在例子中使用jQuery,但这也适用于纯JS。</target>
        </trans-unit>
        <trans-unit id="ac2f19513a13c9c491b86b8b2e34982c9f484d80" translate="yes" xml:space="preserve">
          <source>When using jQuery, &lt;code&gt;return false&lt;/code&gt; is doing 3 separate things when you call it:</source>
          <target state="translated">使用jQuery时，在调用它时， &lt;code&gt;return false&lt;/code&gt; 会做3件事：</target>
        </trans-unit>
        <trans-unit id="3f931f5016ba70d8840a41818a56549ccdfbc167" translate="yes" xml:space="preserve">
          <source>When you write return false it do the following things for you behind the scenes.</source>
          <target state="translated">当你写回假的时候,它在幕后为你做以下事情。</target>
        </trans-unit>
        <trans-unit id="8244e3d25b0c79df38f5527fd1bf6a8bf0663d50" translate="yes" xml:space="preserve">
          <source>You can hang a lot of functions on the &lt;code&gt;onClick&lt;/code&gt; event for one element. How can you be sure the &lt;code&gt;false&lt;/code&gt; one will be the last one to fire? &lt;code&gt;preventDefault&lt;/code&gt; on the other hand will definitely prevent only the default behavior of the element.</source>
          <target state="translated">您可以在 &lt;code&gt;onClick&lt;/code&gt; 事件上为一个元素挂起很多功能。 您如何确定 &lt;code&gt;false&lt;/code&gt; 将是最后一个被解雇的人？ 另一方面， &lt;code&gt;preventDefault&lt;/code&gt; 绝对只能阻止元素的默认行为。</target>
        </trans-unit>
        <trans-unit id="062f6d368c3d95df8f8766e9affdef6be9e8a96c" translate="yes" xml:space="preserve">
          <source>You can read this in the W3C spec on &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-cancelation&quot;&gt;Event cancelation&lt;/a&gt;.</source>
          <target state="translated">您可以在W3C规范中有关&lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-cancelation&quot;&gt;事件取消的内容中进行阅读&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="b5b504f53d504cf3929a38a5377f5cb20234c94d" translate="yes" xml:space="preserve">
          <source>event.preventDefault() vs. return false</source>
          <target state="translated">event.protectDefault()vs.return false</target>
        </trans-unit>
        <trans-unit id="785e6744d253e88b07c6226a71524da0112cf0da" translate="yes" xml:space="preserve">
          <source>is &lt;strong&gt;equal&lt;/strong&gt; to this code:</source>
          <target state="translated">&lt;strong&gt;等于&lt;/strong&gt;以下代码：</target>
        </trans-unit>
        <trans-unit id="a1a5acdea7e9ab67d03bf85aa9ddf592c93e3bac" translate="yes" xml:space="preserve">
          <source>is the w3c specified way of canceling events.</source>
          <target state="translated">是w3c指定的取消事件的方式。</target>
        </trans-unit>
        <trans-unit id="3df67bc9df83585391840f5ded6bb0ee58a15d0a" translate="yes" xml:space="preserve">
          <source>jQuery and the &lt;a href=&quot;http://www.mail-archive.com/jquery-en@googlegroups.com/msg71371.html&quot;&gt;previously linked citation&lt;/a&gt; from &lt;a href=&quot;http://ejohn.org&quot;&gt;John Resig&lt;/a&gt; (in &lt;a href=&quot;https://stackoverflow.com/users/70393&quot;&gt;karim79's&lt;/a&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1357118/#1357151&quot;&gt;message&lt;/a&gt;) seem to be the source misunderstanding of how event handlers in general work.</source>
          <target state="translated">jQuery和&lt;a href=&quot;http://ejohn.org&quot;&gt;John Resig&lt;/a&gt; &lt;a href=&quot;http://www.mail-archive.com/jquery-en@googlegroups.com/msg71371.html&quot;&gt;先前链接的引用&lt;/a&gt; （在&lt;a href=&quot;https://stackoverflow.com/users/70393&quot;&gt;karim79的&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/questions/1357118/#1357151&quot;&gt;消息中&lt;/a&gt; ）似乎是对事件处理程序在一般情况下如何工作的误解。</target>
        </trans-unit>
        <trans-unit id="080713421bac1af25b3e689cddbe0a48d4e74d9d" translate="yes" xml:space="preserve">
          <source>prevents the hyperlink from following the URL, prevents the submit button to submit the form. When you have many event handlers and you just want to prevent default event from occuring, &amp;amp; occuring from many times,
for that we need to  use  in the top of the function().</source>
          <target state="translated">阻止超链接跟随URL，阻止提交按钮提交表单。 当您有很多事件处理程序并且只想防止默认事件发生以及多次发生时，为此，我们需要在function（）的顶部使用。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
