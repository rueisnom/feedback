<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/1357118">
    <body>
      <group id="1357118">
        <trans-unit id="fae0e10bdf0d014868dea3a0da787b04d3dd9d19" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;return false;&lt;/code&gt;&quot; will end the whole execution of process.</source>
          <target state="translated">&quot; &lt;code&gt;return false;&lt;/code&gt; &quot;는 프로세스의 전체 실행을 종료합니다.</target>
        </trans-unit>
        <trans-unit id="ffd33deb4d5f18f19f785271ef14a831948e10f4" translate="yes" xml:space="preserve">
          <source>1. &lt;code&gt;event.preventDefault()&lt;/code&gt;</source>
          <target state="translated">1. &lt;code&gt;event.preventDefault()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6911d6ed74a30a44b4f213161bd36b90b35971f8" translate="yes" xml:space="preserve">
          <source>2. &lt;code&gt;return false&lt;/code&gt;</source>
          <target state="translated">2. &lt;code&gt;return false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c682213d69a04d511a2bed94efda8d1b961d1f36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e.preventDefault()&lt;/code&gt; will prevent the default event from occuring, &lt;code&gt;e.stopPropagation()&lt;/code&gt; will prevent the event from bubbling up and &lt;code&gt;return false&lt;/code&gt; will do both. Note that this behaviour differs from &lt;em&gt;normal&lt;/em&gt; (non-jQuery) event handlers, in which, notably, &lt;code&gt;return false&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; stop the event from bubbling up.</source>
          <target state="translated">&lt;code&gt;e.preventDefault()&lt;/code&gt; 는 기본 이벤트가 발생하지 않도록합니다. &lt;code&gt;e.stopPropagation()&lt;/code&gt; 은 이벤트가 버블 링되는 것을 방지하고 &lt;code&gt;return false&lt;/code&gt; 를 반환 하면 둘 다 수행됩니다. 이 동작은 &lt;em&gt;일반&lt;/em&gt; (jQuery가 아닌) 이벤트 핸들러와 다르며, 특히 &lt;code&gt;return false&lt;/code&gt; 해도 이벤트 버블 링이 중지되지 &lt;em&gt;않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="e11304fb217292ae2c34c1d5c3b0a6c6416ee224" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return false&lt;/code&gt; from &lt;em&gt;within a jQuery event handler&lt;/em&gt; is effectively the same as calling both  &lt;code&gt;e.preventDefault&lt;/code&gt; and &lt;code&gt;e.stopPropagation&lt;/code&gt; on the passed &lt;a href=&quot;http://api.jquery.com/category/events/event-object/&quot;&gt;jQuery.Event object.&lt;/a&gt;</source>
          <target state="translated">&lt;em&gt;jQuery 이벤트 핸들러 내에서&lt;/em&gt; &lt;code&gt;return false&lt;/code&gt; 은 전달 된 &lt;a href=&quot;http://api.jquery.com/category/events/event-object/&quot;&gt;jQuery.Event 객체&lt;/a&gt; 에서 &lt;code&gt;e.preventDefault&lt;/code&gt; 와 &lt;code&gt;e.stopPropagation&lt;/code&gt; 을 모두 호출하는 것과 사실상 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="2f9c12c2cb2851f1f89d5c4a92ffa6fb376de34c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Fuel Your Coding&lt;/em&gt; has a great &lt;a href=&quot;https://web.archive.org/web/20160429070956/http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/&quot;&gt;article on &lt;code&gt;return false;&lt;/code&gt; vs &lt;code&gt;event.preventDefault()&lt;/code&gt; vs &lt;code&gt;event.stopPropagation()&lt;/code&gt; vs &lt;code&gt;event.stopImmediatePropagation()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;연료 코딩&lt;/em&gt; 에는 &lt;a href=&quot;https://web.archive.org/web/20160429070956/http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/&quot;&gt; &lt;code&gt;return false;&lt;/code&gt; 에&lt;/a&gt; 대한 훌륭한 기사가 있습니다 . vs &lt;code&gt;event.preventDefault()&lt;/code&gt; vs &lt;code&gt;event.stopPropagation()&lt;/code&gt; vs &lt;code&gt;event.stopImmediatePropagation()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a32d91473df69cb0ffa40d794dc99c71ac87b67b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Any benefit to using event.preventDefault() over &quot;return false&quot; to cancel out an href click?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;href 클릭을 취소하기 위해 &quot;false return&quot;에 대해 event.preventDefault ()를 사용하면 어떤 이점이 있습니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7a4bdbcfc33c58ed25fe8c79135af6f350923341" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;e.preventDefault();&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;e.preventDefault();&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e23a605275e0784797360aeed8d6bedb2ecbdee9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;return False;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;False를 반환;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db4ed8654e13296f089b55781343193b3ecf9979" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;return false is e.preventDefault AND e.stopPropagation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;false를 반환하면 e.preventDefault이며 e.stopPropagation입니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e5fd4f67917c1fb278957c161146d7cb8dc01c25" translate="yes" xml:space="preserve">
          <source>Also you can't use return false in every situation. When giving a javascript function in the href attribute and if you return false then the user will be redirected to a page with false string written.</source>
          <target state="translated">또한 모든 상황에서 return false를 사용할 수는 없습니다. href 속성에 자바 스크립트 함수를 제공하고 false를 반환하면 사용자는 false 문자열이 작성된 페이지로 리디렉션됩니다.</target>
        </trans-unit>
        <trans-unit id="5e02b250f1f097020809f000e09f54497ee5518c" translate="yes" xml:space="preserve">
          <source>Also, I have to define the first parameter in callback to be able to call the method. Perhaps, there are some reasons why I should avoid doing it like this and use &lt;code&gt;preventDefault&lt;/code&gt; instead? What's the better way?</source>
          <target state="translated">또한 메소드를 호출하려면 콜백에서 첫 번째 매개 변수를 정의해야합니다. 아마도 이와 같이하지 말아야하고 &lt;code&gt;preventDefault&lt;/code&gt; 를 대신 사용해야하는 몇 가지 이유가 있습니까? 더 좋은 방법은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="b7a6a825a670c51a75539c2fb419b4a5c69f9e65" translate="yes" xml:space="preserve">
          <source>Basically before starting using &lt;code&gt;return false;&lt;/code&gt;, first understand what &lt;code&gt;e.preventDefault();&lt;/code&gt; and &lt;code&gt;e.stopPropagation();&lt;/code&gt; do, then if you think you need both at the same time, then simply use it.</source>
          <target state="translated">기본적으로 &lt;code&gt;return false;&lt;/code&gt; 사용하기 전에 ; 먼저 &lt;code&gt;e.preventDefault();&lt;/code&gt; 및 &lt;code&gt;e.stopPropagation();&lt;/code&gt; 그런 다음 동시에 둘 다 필요하다고 생각되면 간단히 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="4d7b8a202991e04a22eacf413473738b7d67ed79" translate="yes" xml:space="preserve">
          <source>Basically, this way you combine things because jQuery is a framework which mostly focuses on HTML elements, you basically preventing the default, but at the same time, you stop propagation to bubble up.</source>
          <target state="translated">기본적으로 jQuery는 HTML 요소에 주로 중점을 둔 프레임 워크이기 때문에 기본적으로 기본값을 방지하지만 동시에 전파를 중지시키는 방식이기 때문에 이러한 방식으로 결합합니다.</target>
        </trans-unit>
        <trans-unit id="f0cbd3b5faf5098a734c7a88edf69ff71e941e7b" translate="yes" xml:space="preserve">
          <source>But also don't forget it's all in jQuery or DOM related functions, when you run it on the element, basically, it prevents everything from firing including the default behaviour and propagation of the event.</source>
          <target state="translated">그러나 jQuery 또는 DOM 관련 함수에 있다는 것을 잊지 마십시오. 요소에서 요소를 실행할 때 기본적으로 기본 동작 및 이벤트 전파를 포함하여 모든 항목이 실행되는 것을 방지합니다.</target>
        </trans-unit>
        <trans-unit id="690053acd51112afc99d8ffddb102492c2246e58" translate="yes" xml:space="preserve">
          <source>But if you are sure that the code won't trigger any exceptions, then you can go with any of the method you wish.</source>
          <target state="translated">그러나 코드가 예외를 트리거하지 않을 것이라고 확신하는 경우 원하는 방법을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">스 니펫 확장</target>
        </trans-unit>
        <trans-unit id="3f50968ec35176d6674dcacd90532e90feceb0fa" translate="yes" xml:space="preserve">
          <source>Fact: An event handler that returns false prevents the default action for that event. It does not stop the event propagation. Event handlers have always worked this way, since the old days of Netscape Navigator.</source>
          <target state="translated">사실 : false를 리턴하는 이벤트 핸들러는 해당 이벤트에 대한 기본 조치를 방지합니다. 이벤트 전파를 중지하지 않습니다. Netscape Navigator의 옛날부터 이벤트 핸들러는 항상 이런 식으로 작동했습니다.</target>
        </trans-unit>
        <trans-unit id="534ee5b4559e3328702f79469bc8adc6687cdaf9" translate="yes" xml:space="preserve">
          <source>For further reading, see &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms536343%28VS.85%29.aspx&quot;&gt;attachEvent on MSDN&lt;/a&gt; and the &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/&quot;&gt;W3C DOM 2 Events documentation&lt;/a&gt;.</source>
          <target state="translated">자세한 내용 &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms536343%28VS.85%29.aspx&quot;&gt;은 MSDN의 attachEvent&lt;/a&gt; 및 &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/&quot;&gt;W3C DOM 2 이벤트 설명서를&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9e87b4ba5212b116cc02bb22ef5f5fcb9e105e7b" translate="yes" xml:space="preserve">
          <source>For me, &lt;code&gt;return false;&lt;/code&gt; is simpler, shorter and probably less error prone than executing a method. With the method, you have to remember about correct casing, parenthesis, etc.</source>
          <target state="translated">나를 위해, &lt;code&gt;return false;&lt;/code&gt; 메소드를 실행하는 것보다 간단하고 짧으며 오류가 적습니다. 이 방법을 사용하면 올바른 케이스, 괄호 등을 기억해야합니다.</target>
        </trans-unit>
        <trans-unit id="4bb4049b998507ba12cca0a9fc080b09b59a58f8" translate="yes" xml:space="preserve">
          <source>From my experience event.stopPropagation() is mostly used in CSS effect or animation works, for instance when you have hover effect for both card and button element, when you hover on the button both card and buttons hover effect will be triggered in this case, you can use event.stopPropagation() stop bubbling actions, and event.preventDefault() is for prevent default behaviour of browser actions. For instance, you have form but you only defined click event for the submit action, if the user submits the form by pressing enter, the browser triggered by keypress event, not your click event here you should use event.preventDefault() to avoid inappropriate behavior. I don't know what the hell is return false; sorry.For more clarification visit this link and play around with line #33 &lt;a href=&quot;https://www.codecademy.com/courses/introduction-to-javascript/lessons/requests-i/exercises/xhr-get-request-iv&quot;&gt;https://www.codecademy.com/courses/introduction-to-javascript/lessons/requests-i/exercises/xhr-get-request-iv&lt;/a&gt;</source>
          <target state="translated">내 경험에서 event.stopPropagation ()은 CSS 효과 또는 애니메이션 작업에 주로 사용됩니다. 예를 들어 카드와 버튼 요소 모두에 호버 효과가있는 경우, 버튼 위에 마우스를 올리면 카드와 버튼 호버 효과가 모두 트리거됩니다. event.stopPropagation () 중지 버블 링 동작을 사용할 수 있으며 event.preventDefault ()는 브라우저 동작의 기본 동작을 방지하기위한 것입니다. 예를 들어, 양식이 있지만 제출 조치에 대한 클릭 이벤트 만 정의했습니다. 사용자가 Enter 키를 눌러 양식을 제출하는 경우 여기에서 클릭 이벤트가 아닌 키 누르기 이벤트에 의해 브라우저가 트리거됩니다. 여기서 부적절한 이벤트를 피하려면 event.preventDefault ()를 사용해야합니다. 행동. 나는 도대체 거짓이 무엇인지 모른다. 자세한 내용을 보려면이 링크를 방문하여 33 번 라인 ( &lt;a href=&quot;https://www.codecademy.com/courses/introduction-to-javascript/lessons/requests-i/exercises/xhr-get-request-iv&quot;&gt;https://www.codecademy.com/courses/introduction-to-javascript/lessons/requests-i/exercises/xhr-get-request-iv)을 참조하십시오.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4cc70deb1e2082683d9277e965b03247f646d725" translate="yes" xml:space="preserve">
          <source>From my experience, there is at least one clear advantage when using event.preventDefault() over using return false. Suppose you are capturing the click event on an anchor tag, otherwise which it would be a big problem if the user were to be navigated away from the current page. If your click handler uses return false to prevent browser navigation, it opens the possibility that the interpreter will not reach the return statement and the browser will proceed to execute the anchor tag's default behavior.</source>
          <target state="translated">내 경험상 return false를 사용하는 것보다 event.preventDefault ()를 사용할 때 분명한 이점이 하나 있습니다. 앵커 태그에서 클릭 이벤트를 캡처한다고 가정하십시오. 그렇지 않으면 사용자가 현재 페이지에서 다른 위치로 이동해야하는 경우 큰 문제가됩니다. 클릭 핸들러가 return false를 사용하여 브라우저 탐색을 방지하면 인터프리터가 return 문에 도달하지 못하고 브라우저가 앵커 태그의 기본 동작을 계속 실행할 가능성이 열립니다.</target>
        </trans-unit>
        <trans-unit id="a31fd6e3fd2821d0a51950f3379956edb21860a6" translate="yes" xml:space="preserve">
          <source>Generally, your first option (&lt;code&gt;preventDefault()&lt;/code&gt;) is the one to take, but you have to know what context you're in and what your goals are.</source>
          <target state="translated">일반적으로 첫 번째 옵션 ( &lt;code&gt;preventDefault()&lt;/code&gt; )을 사용하는 것이 좋지만 현재 상황과 목표가 무엇인지 알아야합니다.</target>
        </trans-unit>
        <trans-unit id="0596d6f00a3347313cd04e883e4f87f040474753" translate="yes" xml:space="preserve">
          <source>I think</source>
          <target state="translated">나는 생각한다</target>
        </trans-unit>
        <trans-unit id="7f1c8fab4f672f93d606117684ac995c9116cf4d" translate="yes" xml:space="preserve">
          <source>I think the best way to do this is to use &lt;code&gt;event.preventDefault()&lt;/code&gt; because if some exception is raised in the handler, then the return &lt;code&gt;false&lt;/code&gt; statement will be skipped and the behavior will be opposite to what you want.</source>
          <target state="translated">핸들러에서 예외가 발생하면 return &lt;code&gt;false&lt;/code&gt; 문을 건너 뛰고 동작이 원하는 것과 반대이기 때문에이를 수행하는 가장 좋은 방법은 &lt;code&gt;event.preventDefault()&lt;/code&gt; 를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="9cdf8d6ce959a22471d3a39738790b9d897e6276" translate="yes" xml:space="preserve">
          <source>If you still want to go with the return &lt;code&gt;false&lt;/code&gt;, then you can put your entire handler code in a try catch block like below:</source>
          <target state="translated">return &lt;code&gt;false&lt;/code&gt; 를 계속 사용하려면 다음과 같이 전체 처리기 코드를 try catch 블록에 넣을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb0d0dd0f06635a2e3099eb699c8b1f557ac6b81" translate="yes" xml:space="preserve">
          <source>Instance Ex.:-</source>
          <target state="translated">사례 예 :-</target>
        </trans-unit>
        <trans-unit id="4d1140645ad0e22b3b2634fbda0afe8a29f8fc0c" translate="yes" xml:space="preserve">
          <source>Is there any significant difference between those two methods of stopping event propagation?</source>
          <target state="translated">이벤트 전파를 중지하는 두 가지 방법 사이에 중요한 차이점이 있습니까?</target>
        </trans-unit>
        <trans-unit id="2811d4164a7f8982b60f1ce661246571786b4c78" translate="yes" xml:space="preserve">
          <source>It simply stops the default action of an element.</source>
          <target state="translated">단순히 요소의 기본 동작을 중지합니다.</target>
        </trans-unit>
        <trans-unit id="0c16236dd51237165bb1b105d75fc40ff8af414b" translate="yes" xml:space="preserve">
          <source>It simply stops the execution of the function().</source>
          <target state="translated">단순히 function ()의 실행을 중지합니다.</target>
        </trans-unit>
        <trans-unit id="0c435cad29e82d4e68bf0a96a848c84683cda07d" translate="yes" xml:space="preserve">
          <source>My opinion from my experience saying, that it is always better to use</source>
          <target state="translated">내 경험에 따르면 내 의견은 항상 사용하는 것이 좋습니다</target>
        </trans-unit>
        <trans-unit id="cc40fbbf66d8048134a4b0bb32ba2a5ab2198d82" translate="yes" xml:space="preserve">
          <source>Practically
        to stop or prevent submit event, whenever we required rather than &lt;code&gt;return false&lt;/code&gt;&lt;code&gt;event.preventDefault()&lt;/code&gt; works fine.</source>
          <target state="translated">실제로 &lt;code&gt;return false&lt;/code&gt; 이벤트를 반환 하지 않고 필요할 때마다 제출 이벤트를 중지하거나 방지하기 위해 &lt;code&gt;event.preventDefault()&lt;/code&gt; 가 제대로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="3fb2b45e6f78b9a7db57ffdf7214522d69586f58" translate="yes" xml:space="preserve">
          <source>Reason:-</source>
          <target state="translated">Reason:-</target>
        </trans-unit>
        <trans-unit id="6f7010d72c875819c4a41c2bc984d6fe1df782e1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/&quot;&gt;jQuery Events: Stop (Mis)Using Return False&lt;/a&gt; for more information and examples.</source>
          <target state="translated">자세한 내용과 예제는 &lt;a href=&quot;http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/&quot;&gt;jQuery 이벤트 : Return False 사용 중지 (Mis)&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c22ceaa385f77ac38d89f8db0a94d8c35d9ef508" translate="yes" xml:space="preserve">
          <source>So basically this code below:</source>
          <target state="translated">기본적으로 아래 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d7b748ec7ed905c2c18b5ee0cee93d2212ad82d5" translate="yes" xml:space="preserve">
          <source>So we can simply say, return false in &lt;code&gt;jQuery&lt;/code&gt; is equal to:</source>
          <target state="translated">따라서 &lt;code&gt;jQuery&lt;/code&gt; 에서 false를 반환하는 것은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="69faef1248c7fa0c1296504cd26cf52117e02cd8" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;http://ejohn.org/&quot;&gt;John Resig&lt;/a&gt;</source>
          <target state="translated">출처 : &lt;a href=&quot;http://ejohn.org/&quot;&gt;John Resig&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="94ef51b966cbecdc97b4db056a923bfb7204a243" translate="yes" xml:space="preserve">
          <source>Stops callback execution and returns immediately when called.</source>
          <target state="translated">콜백 실행을 중지하고 호출되면 즉시 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3427246f89cd545a3f1a7102c57fa5709e7bfbfa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Tutorial/More_Event_Handlers#Prevent_Default_Action&quot;&gt;documentation from MDN&lt;/a&gt; explains how &lt;code&gt;return false&lt;/code&gt; in an event handler works</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Tutorial/More_Event_Handlers#Prevent_Default_Action&quot;&gt;MDN&lt;/a&gt; 의 문서 는 이벤트 핸들러에서 &lt;code&gt;return false&lt;/code&gt; 를 반환 하는 방법을 설명합니다</target>
        </trans-unit>
        <trans-unit id="ffb4d9a19371f17a28b2ed336e8397790df1247e" translate="yes" xml:space="preserve">
          <source>The benefit to using event.preventDefault() is that you can add this as the first line in the handler, thereby guaranteeing that the anchor's default behavior will not fire, regardless if the last line of the function is not reached (eg. runtime error).</source>
          <target state="translated">event.preventDefault ()를 사용하면 이점을 핸들러의 첫 번째 줄로 추가 할 수 있으므로 함수의 마지막 줄에 도달하지 않더라도 앵커의 기본 동작이 시작되지 않습니다 (예 : 런타임 오류). ).</target>
        </trans-unit>
        <trans-unit id="95d32ca809090890fcedc7e54d58cacbd6310cbc" translate="yes" xml:space="preserve">
          <source>The main difference between &lt;code&gt;return false&lt;/code&gt; and &lt;code&gt;event.preventDefault()&lt;/code&gt; is that your code below &lt;code&gt;return false&lt;/code&gt; will not be executed and in &lt;code&gt;event.preventDefault()&lt;/code&gt; case your code will execute after this statement.</source>
          <target state="translated">&lt;code&gt;return false&lt;/code&gt; 와 &lt;code&gt;event.preventDefault()&lt;/code&gt; 의 주요 차이점은 false 를 반환 하는 코드는 실행되지 않으며 &lt;code&gt;event.preventDefault()&lt;/code&gt; 경우이 명령문 이후에 코드가 실행된다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="75a9628a79bce905f023d872c8d2d1807130fc6b" translate="yes" xml:space="preserve">
          <source>The reason to use &lt;code&gt;e.preventDefault();&lt;/code&gt; is that in our code so something goes wrong in the code, then it will allow to execute the link or form to get submitted or allow to execute or allow whatever action you need to do. &amp;amp; link or submit button will get submitted &amp;amp; still allow further propagation of the event.</source>
          <target state="translated">&lt;code&gt;e.preventDefault();&lt;/code&gt; 를 사용하는 이유 ; 우리 코드에서 코드에 문제가 발생하면 링크 또는 양식을 실행하여 제출하거나 실행 또는 필요한 조치를 허용한다는 것입니다. &amp;amp; 링크 또는 제출 버튼이 제출되며 이벤트를 계속 전파 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="967fe78cf8f095c628d3dc047fcfebf7af3d22aa" translate="yes" xml:space="preserve">
          <source>The reason to use return false; is that you don't want to execute the function any more in strictly mode.</source>
          <target state="translated">사용 이유는 false를 반환합니다. 엄격하게 모드에서 더 이상 함수를 실행하고 싶지 않다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e62eda3b3dd40a1c57862701fc44b746a8939e34" translate="yes" xml:space="preserve">
          <source>This is not, as you've titled it, a &quot;JavaScript&quot; question; it is a question regarding the design of jQuery.</source>
          <target state="translated">제목은 &quot;JavaScript&quot;질문이 아닙니다. jQuery 디자인에 관한 질문입니다.</target>
        </trans-unit>
        <trans-unit id="6d13ec0b3c4cbf652038e2e5ef0c80015ecf1149" translate="yes" xml:space="preserve">
          <source>What happens in jQuery is not the same as what happens with event handlers. DOM event listeners and MSIE &quot;attached&quot; events are a different matter altogether.</source>
          <target state="translated">jQuery에서 발생하는 것은 이벤트 핸들러에서 발생하는 것과 다릅니다. DOM 이벤트 리스너와 MSIE &quot;첨부 된&quot;이벤트는 전혀 다릅니다.</target>
        </trans-unit>
        <trans-unit id="28dc6820fd6fdfeafcfc22f66322d8d6cebd5d05" translate="yes" xml:space="preserve">
          <source>When I want to prevent other event handlers from executing after a certain event is fired, I can use one of two techniques. I'll use jQuery in the examples, but this applies to plain-JS as well:</source>
          <target state="translated">특정 이벤트가 발생한 후 다른 이벤트 처리기가 실행되지 않게하려면 두 가지 기술 중 하나를 사용할 수 있습니다. 예제에서는 jQuery를 사용하지만 일반 JS에도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="ac2f19513a13c9c491b86b8b2e34982c9f484d80" translate="yes" xml:space="preserve">
          <source>When using jQuery, &lt;code&gt;return false&lt;/code&gt; is doing 3 separate things when you call it:</source>
          <target state="translated">jQuery를 사용할 때 &lt;code&gt;return false&lt;/code&gt; 하면 호출 할 때 3 가지 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="3f931f5016ba70d8840a41818a56549ccdfbc167" translate="yes" xml:space="preserve">
          <source>When you write return false it do the following things for you behind the scenes.</source>
          <target state="translated">return false를 쓰면 뒤에서 다음을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="8244e3d25b0c79df38f5527fd1bf6a8bf0663d50" translate="yes" xml:space="preserve">
          <source>You can hang a lot of functions on the &lt;code&gt;onClick&lt;/code&gt; event for one element. How can you be sure the &lt;code&gt;false&lt;/code&gt; one will be the last one to fire? &lt;code&gt;preventDefault&lt;/code&gt; on the other hand will definitely prevent only the default behavior of the element.</source>
          <target state="translated">하나의 요소에 대해 &lt;code&gt;onClick&lt;/code&gt; 이벤트에 많은 기능을 정지시킬 수 있습니다. &lt;code&gt;false&lt;/code&gt; 이 마지막으로 발사되는 것을 어떻게 확신 할 수 있습니까? 반면에 &lt;code&gt;preventDefault&lt;/code&gt; 는 요소의 기본 동작 만 확실히 방지합니다.</target>
        </trans-unit>
        <trans-unit id="062f6d368c3d95df8f8766e9affdef6be9e8a96c" translate="yes" xml:space="preserve">
          <source>You can read this in the W3C spec on &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-cancelation&quot;&gt;Event cancelation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-cancelation&quot;&gt;이벤트 취소&lt;/a&gt; 에 대한 W3C 사양에서이 내용을 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5b504f53d504cf3929a38a5377f5cb20234c94d" translate="yes" xml:space="preserve">
          <source>event.preventDefault() vs. return false</source>
          <target state="translated">event.preventDefault () vs. false 반환</target>
        </trans-unit>
        <trans-unit id="785e6744d253e88b07c6226a71524da0112cf0da" translate="yes" xml:space="preserve">
          <source>is &lt;strong&gt;equal&lt;/strong&gt; to this code:</source>
          <target state="translated">이 코드와 같습니다</target>
        </trans-unit>
        <trans-unit id="a1a5acdea7e9ab67d03bf85aa9ddf592c93e3bac" translate="yes" xml:space="preserve">
          <source>is the w3c specified way of canceling events.</source>
          <target state="translated">이벤트를 취소하는 w3c 지정 방법입니다.</target>
        </trans-unit>
        <trans-unit id="3df67bc9df83585391840f5ded6bb0ee58a15d0a" translate="yes" xml:space="preserve">
          <source>jQuery and the &lt;a href=&quot;http://www.mail-archive.com/jquery-en@googlegroups.com/msg71371.html&quot;&gt;previously linked citation&lt;/a&gt; from &lt;a href=&quot;http://ejohn.org&quot;&gt;John Resig&lt;/a&gt; (in &lt;a href=&quot;https://stackoverflow.com/users/70393&quot;&gt;karim79's&lt;/a&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1357118/#1357151&quot;&gt;message&lt;/a&gt;) seem to be the source misunderstanding of how event handlers in general work.</source>
          <target state="translated">jQuery와 &lt;a href=&quot;http://ejohn.org&quot;&gt;John Resig&lt;/a&gt; ( &lt;a href=&quot;https://stackoverflow.com/users/70393&quot;&gt;karim79의&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/questions/1357118/#1357151&quot;&gt;메시지&lt;/a&gt; )에서 &lt;a href=&quot;http://www.mail-archive.com/jquery-en@googlegroups.com/msg71371.html&quot;&gt;이전에 연결된 인용&lt;/a&gt; 은 일반적인 이벤트 처리기가 어떻게 작동하는지에 대한 오해의 소지가있는 것 같습니다.</target>
        </trans-unit>
        <trans-unit id="080713421bac1af25b3e689cddbe0a48d4e74d9d" translate="yes" xml:space="preserve">
          <source>prevents the hyperlink from following the URL, prevents the submit button to submit the form. When you have many event handlers and you just want to prevent default event from occuring, &amp;amp; occuring from many times,
for that we need to  use  in the top of the function().</source>
          <target state="translated">하이퍼 링크가 URL을 따르지 못하게하고 제출 단추가 양식을 제출하지 못하게합니다. 많은 이벤트 핸들러가 있고 기본 이벤트가 발생하지 않도록 여러 번 발생하는 것을 막으려면 function () 맨 위에 사용해야합니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
