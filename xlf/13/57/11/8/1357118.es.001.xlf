<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/1357118">
    <body>
      <group id="1357118">
        <trans-unit id="fae0e10bdf0d014868dea3a0da787b04d3dd9d19" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;return false;&lt;/code&gt;&quot; will end the whole execution of process.</source>
          <target state="translated">&quot; &lt;code&gt;return false;&lt;/code&gt; &quot; terminar&amp;aacute; la ejecuci&amp;oacute;n completa del proceso.</target>
        </trans-unit>
        <trans-unit id="ffd33deb4d5f18f19f785271ef14a831948e10f4" translate="yes" xml:space="preserve">
          <source>1. &lt;code&gt;event.preventDefault()&lt;/code&gt;</source>
          <target state="translated">1. &lt;code&gt;event.preventDefault()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6911d6ed74a30a44b4f213161bd36b90b35971f8" translate="yes" xml:space="preserve">
          <source>2. &lt;code&gt;return false&lt;/code&gt;</source>
          <target state="translated">2. &lt;code&gt;return false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c682213d69a04d511a2bed94efda8d1b961d1f36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e.preventDefault()&lt;/code&gt; will prevent the default event from occuring, &lt;code&gt;e.stopPropagation()&lt;/code&gt; will prevent the event from bubbling up and &lt;code&gt;return false&lt;/code&gt; will do both. Note that this behaviour differs from &lt;em&gt;normal&lt;/em&gt; (non-jQuery) event handlers, in which, notably, &lt;code&gt;return false&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; stop the event from bubbling up.</source>
          <target state="translated">&lt;code&gt;e.preventDefault()&lt;/code&gt; evitar&amp;aacute; que ocurra el evento predeterminado, &lt;code&gt;e.stopPropagation()&lt;/code&gt; evitar&amp;aacute; que el evento brote y &lt;code&gt;return false&lt;/code&gt; har&amp;aacute; ambas cosas. Tenga en cuenta que este comportamiento difiere de &lt;em&gt;los&lt;/em&gt; controladores de eventos &lt;em&gt;normales&lt;/em&gt; (no jQuery), en los que, en particular, &lt;code&gt;return false&lt;/code&gt; &lt;em&gt;no&lt;/em&gt; impide que el evento brote.</target>
        </trans-unit>
        <trans-unit id="e11304fb217292ae2c34c1d5c3b0a6c6416ee224" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return false&lt;/code&gt; from &lt;em&gt;within a jQuery event handler&lt;/em&gt; is effectively the same as calling both  &lt;code&gt;e.preventDefault&lt;/code&gt; and &lt;code&gt;e.stopPropagation&lt;/code&gt; on the passed &lt;a href=&quot;http://api.jquery.com/category/events/event-object/&quot;&gt;jQuery.Event object.&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;return false&lt;/code&gt; desde &lt;em&gt;un controlador de eventos jQuery&lt;/em&gt; es efectivamente lo mismo que llamar a &lt;code&gt;e.preventDefault&lt;/code&gt; y &lt;code&gt;e.stopPropagation&lt;/code&gt; en el &lt;a href=&quot;http://api.jquery.com/category/events/event-object/&quot;&gt;objeto jQuery.Event&lt;/a&gt; pasado .</target>
        </trans-unit>
        <trans-unit id="2f9c12c2cb2851f1f89d5c4a92ffa6fb376de34c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Fuel Your Coding&lt;/em&gt; has a great &lt;a href=&quot;https://web.archive.org/web/20160429070956/http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/&quot;&gt;article on &lt;code&gt;return false;&lt;/code&gt; vs &lt;code&gt;event.preventDefault()&lt;/code&gt; vs &lt;code&gt;event.stopPropagation()&lt;/code&gt; vs &lt;code&gt;event.stopImmediatePropagation()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Fuel Your Coding&lt;/em&gt; tiene un excelente &lt;a href=&quot;https://web.archive.org/web/20160429070956/http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/&quot;&gt;art&amp;iacute;culo sobre &lt;code&gt;return false;&lt;/code&gt; &lt;/a&gt; vs &lt;code&gt;event.preventDefault()&lt;/code&gt; vs &lt;code&gt;event.stopPropagation()&lt;/code&gt; vs &lt;code&gt;event.stopImmediatePropagation()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a32d91473df69cb0ffa40d794dc99c71ac87b67b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Any benefit to using event.preventDefault() over &quot;return false&quot; to cancel out an href click?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;iquest;Alg&amp;uacute;n beneficio al usar event.preventDefault () sobre &quot;return false&quot; para cancelar un clic href?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7a4bdbcfc33c58ed25fe8c79135af6f350923341" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;e.preventDefault();&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;e.preventDefault();&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e23a605275e0784797360aeed8d6bedb2ecbdee9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;return False;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;falso retorno;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db4ed8654e13296f089b55781343193b3ecf9979" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;return false is e.preventDefault AND e.stopPropagation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;return false es e.preventDefault AND e.stopPropagation&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e5fd4f67917c1fb278957c161146d7cb8dc01c25" translate="yes" xml:space="preserve">
          <source>Also you can't use return false in every situation. When giving a javascript function in the href attribute and if you return false then the user will be redirected to a page with false string written.</source>
          <target state="translated">Tampoco puedes usar el retorno falso en cada situación.Al dar una función javascript en el atributo href y si devuelves false entonces el usuario será redirigido a una página con una cadena falsa escrita.</target>
        </trans-unit>
        <trans-unit id="5e02b250f1f097020809f000e09f54497ee5518c" translate="yes" xml:space="preserve">
          <source>Also, I have to define the first parameter in callback to be able to call the method. Perhaps, there are some reasons why I should avoid doing it like this and use &lt;code&gt;preventDefault&lt;/code&gt; instead? What's the better way?</source>
          <target state="translated">Adem&amp;aacute;s, tengo que definir el primer par&amp;aacute;metro en la devoluci&amp;oacute;n de llamada para poder llamar al m&amp;eacute;todo. Tal vez, &amp;iquest;hay algunas razones por las que deber&amp;iacute;a evitar hacerlo as&amp;iacute; y usar &lt;code&gt;preventDefault&lt;/code&gt; en su lugar? &amp;iquest;Cu&amp;aacute;l es la mejor manera?</target>
        </trans-unit>
        <trans-unit id="b7a6a825a670c51a75539c2fb419b4a5c69f9e65" translate="yes" xml:space="preserve">
          <source>Basically before starting using &lt;code&gt;return false;&lt;/code&gt;, first understand what &lt;code&gt;e.preventDefault();&lt;/code&gt; and &lt;code&gt;e.stopPropagation();&lt;/code&gt; do, then if you think you need both at the same time, then simply use it.</source>
          <target state="translated">B&amp;aacute;sicamente antes de comenzar a usar &lt;code&gt;return false;&lt;/code&gt; , primero entienda qu&amp;eacute; &lt;code&gt;e.preventDefault();&lt;/code&gt; y &lt;code&gt;e.stopPropagation();&lt;/code&gt; Si crees que necesitas ambos al mismo tiempo, simplemente &amp;uacute;salo.</target>
        </trans-unit>
        <trans-unit id="4d7b8a202991e04a22eacf413473738b7d67ed79" translate="yes" xml:space="preserve">
          <source>Basically, this way you combine things because jQuery is a framework which mostly focuses on HTML elements, you basically preventing the default, but at the same time, you stop propagation to bubble up.</source>
          <target state="translated">Básicamente,de esta manera combinas las cosas porque jQuery es un marco de trabajo que se centra mayormente en los elementos HTML,básicamente evitas el predeterminado,pero al mismo tiempo,detienes la propagación para hacer burbujas.</target>
        </trans-unit>
        <trans-unit id="f0cbd3b5faf5098a734c7a88edf69ff71e941e7b" translate="yes" xml:space="preserve">
          <source>But also don't forget it's all in jQuery or DOM related functions, when you run it on the element, basically, it prevents everything from firing including the default behaviour and propagation of the event.</source>
          <target state="translated">Pero tampoco olvides que todo está en las funciones relacionadas con jQuery o DOM,cuando lo ejecutas en el elemento,básicamente,impide que todo se dispare incluyendo el comportamiento por defecto y la propagación del evento.</target>
        </trans-unit>
        <trans-unit id="690053acd51112afc99d8ffddb102492c2246e58" translate="yes" xml:space="preserve">
          <source>But if you are sure that the code won't trigger any exceptions, then you can go with any of the method you wish.</source>
          <target state="translated">Pero si está seguro de que el código no provocará ninguna excepción,entonces puede ir con cualquier método que desee.</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Ampliar fragmento</target>
        </trans-unit>
        <trans-unit id="3f50968ec35176d6674dcacd90532e90feceb0fa" translate="yes" xml:space="preserve">
          <source>Fact: An event handler that returns false prevents the default action for that event. It does not stop the event propagation. Event handlers have always worked this way, since the old days of Netscape Navigator.</source>
          <target state="translated">Hecho:Un manejador de eventos que devuelve false impide la acción por defecto para ese evento.No detiene la propagación del evento.Los manejadores de eventos siempre han trabajado de esta manera,desde los viejos tiempos de Netscape Navigator.</target>
        </trans-unit>
        <trans-unit id="534ee5b4559e3328702f79469bc8adc6687cdaf9" translate="yes" xml:space="preserve">
          <source>For further reading, see &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms536343%28VS.85%29.aspx&quot;&gt;attachEvent on MSDN&lt;/a&gt; and the &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/&quot;&gt;W3C DOM 2 Events documentation&lt;/a&gt;.</source>
          <target state="translated">Para leer m&amp;aacute;s, vea &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms536343%28VS.85%29.aspx&quot;&gt;attachEvent en MSDN&lt;/a&gt; y la &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/&quot;&gt;documentaci&amp;oacute;n de eventos W3C DOM 2&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9e87b4ba5212b116cc02bb22ef5f5fcb9e105e7b" translate="yes" xml:space="preserve">
          <source>For me, &lt;code&gt;return false;&lt;/code&gt; is simpler, shorter and probably less error prone than executing a method. With the method, you have to remember about correct casing, parenthesis, etc.</source>
          <target state="translated">Para m&amp;iacute;, &lt;code&gt;return false;&lt;/code&gt; es m&amp;aacute;s simple, m&amp;aacute;s corto y probablemente menos propenso a errores que ejecutar un m&amp;eacute;todo. Con el m&amp;eacute;todo, debe recordar acerca de la carcasa correcta, par&amp;eacute;ntesis, etc.</target>
        </trans-unit>
        <trans-unit id="4bb4049b998507ba12cca0a9fc080b09b59a58f8" translate="yes" xml:space="preserve">
          <source>From my experience event.stopPropagation() is mostly used in CSS effect or animation works, for instance when you have hover effect for both card and button element, when you hover on the button both card and buttons hover effect will be triggered in this case, you can use event.stopPropagation() stop bubbling actions, and event.preventDefault() is for prevent default behaviour of browser actions. For instance, you have form but you only defined click event for the submit action, if the user submits the form by pressing enter, the browser triggered by keypress event, not your click event here you should use event.preventDefault() to avoid inappropriate behavior. I don't know what the hell is return false; sorry.For more clarification visit this link and play around with line #33 &lt;a href=&quot;https://www.codecademy.com/courses/introduction-to-javascript/lessons/requests-i/exercises/xhr-get-request-iv&quot;&gt;https://www.codecademy.com/courses/introduction-to-javascript/lessons/requests-i/exercises/xhr-get-request-iv&lt;/a&gt;</source>
          <target state="translated">Desde mi experiencia, event.stopPropagation () se usa principalmente en efectos de CSS o trabajos de animaci&amp;oacute;n, por ejemplo, cuando tiene un efecto de desplazamiento para el elemento de la tarjeta y el bot&amp;oacute;n, cuando se desplaza sobre el bot&amp;oacute;n, el efecto de desplazamiento de la tarjeta y los botones se activar&amp;aacute; en este caso , puede usar event.stopPropagation () para detener las acciones burbujeantes, y event.preventDefault () es para evitar el comportamiento predeterminado de las acciones del navegador. Por ejemplo, tiene un formulario, pero solo defini&amp;oacute; un evento de clic para la acci&amp;oacute;n de env&amp;iacute;o, si el usuario env&amp;iacute;a el formulario presionando enter, el navegador se activar&amp;aacute; con el evento de pulsaci&amp;oacute;n de tecla, no su evento de clic aqu&amp;iacute;, debe usar event.preventDefault () para evitar comportamiento. No s&amp;eacute; qu&amp;eacute; demonios es volver falso; lo siento. Para obtener m&amp;aacute;s aclaraciones, visite este enlace y juegue con la l&amp;iacute;nea # 33 &lt;a href=&quot;https://www.codecademy.com/courses/introduction-to-javascript/lessons/requests-i/exercises/xhr-get-request-iv&quot;&gt;https://www.codecademy.com/courses/introduction-to-javascript/lessons/requests-i/exercises/xhr-get-request-iv&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4cc70deb1e2082683d9277e965b03247f646d725" translate="yes" xml:space="preserve">
          <source>From my experience, there is at least one clear advantage when using event.preventDefault() over using return false. Suppose you are capturing the click event on an anchor tag, otherwise which it would be a big problem if the user were to be navigated away from the current page. If your click handler uses return false to prevent browser navigation, it opens the possibility that the interpreter will not reach the return statement and the browser will proceed to execute the anchor tag's default behavior.</source>
          <target state="translated">Desde mi experiencia,hay al menos una clara ventaja cuando se usa event.preventDefault()sobre el uso de return false.Suponga que está capturando el evento de clic en una etiqueta de anclaje,de lo contrario sería un gran problema si el usuario se alejara de la página actual.Si tu manejador de clics utiliza return false para evitar la navegación del navegador,se abre la posibilidad de que el intérprete no llegue a la declaración de retorno y el navegador proceda a ejecutar el comportamiento predeterminado de la etiqueta de anclaje.</target>
        </trans-unit>
        <trans-unit id="a31fd6e3fd2821d0a51950f3379956edb21860a6" translate="yes" xml:space="preserve">
          <source>Generally, your first option (&lt;code&gt;preventDefault()&lt;/code&gt;) is the one to take, but you have to know what context you're in and what your goals are.</source>
          <target state="translated">En general, su primera opci&amp;oacute;n ( &lt;code&gt;preventDefault()&lt;/code&gt; ) es la que debe tomar, pero debe saber en qu&amp;eacute; contexto se encuentra y cu&amp;aacute;les son sus objetivos.</target>
        </trans-unit>
        <trans-unit id="0596d6f00a3347313cd04e883e4f87f040474753" translate="yes" xml:space="preserve">
          <source>I think</source>
          <target state="translated">Creo que</target>
        </trans-unit>
        <trans-unit id="7f1c8fab4f672f93d606117684ac995c9116cf4d" translate="yes" xml:space="preserve">
          <source>I think the best way to do this is to use &lt;code&gt;event.preventDefault()&lt;/code&gt; because if some exception is raised in the handler, then the return &lt;code&gt;false&lt;/code&gt; statement will be skipped and the behavior will be opposite to what you want.</source>
          <target state="translated">Creo que la mejor manera de hacer esto es usar &lt;code&gt;event.preventDefault()&lt;/code&gt; porque si se genera alguna excepci&amp;oacute;n en el controlador, entonces se omitir&amp;aacute; la declaraci&amp;oacute;n return &lt;code&gt;false&lt;/code&gt; y el comportamiento ser&amp;aacute; opuesto a lo que desea.</target>
        </trans-unit>
        <trans-unit id="9cdf8d6ce959a22471d3a39738790b9d897e6276" translate="yes" xml:space="preserve">
          <source>If you still want to go with the return &lt;code&gt;false&lt;/code&gt;, then you can put your entire handler code in a try catch block like below:</source>
          <target state="translated">Si a&amp;uacute;n desea ir con el retorno &lt;code&gt;false&lt;/code&gt; , puede poner su c&amp;oacute;digo de controlador completo en un bloque de captura de prueba como a continuaci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="bb0d0dd0f06635a2e3099eb699c8b1f557ac6b81" translate="yes" xml:space="preserve">
          <source>Instance Ex.:-</source>
          <target state="translated">Instancia Ex.:-</target>
        </trans-unit>
        <trans-unit id="4d1140645ad0e22b3b2634fbda0afe8a29f8fc0c" translate="yes" xml:space="preserve">
          <source>Is there any significant difference between those two methods of stopping event propagation?</source>
          <target state="translated">¿Hay alguna diferencia significativa entre esos dos métodos para detener la propagación de eventos?</target>
        </trans-unit>
        <trans-unit id="2811d4164a7f8982b60f1ce661246571786b4c78" translate="yes" xml:space="preserve">
          <source>It simply stops the default action of an element.</source>
          <target state="translated">Simplemente detiene la acción por defecto de un elemento.</target>
        </trans-unit>
        <trans-unit id="0c16236dd51237165bb1b105d75fc40ff8af414b" translate="yes" xml:space="preserve">
          <source>It simply stops the execution of the function().</source>
          <target state="translated">Simplemente detiene la ejecución de la función().</target>
        </trans-unit>
        <trans-unit id="0c435cad29e82d4e68bf0a96a848c84683cda07d" translate="yes" xml:space="preserve">
          <source>My opinion from my experience saying, that it is always better to use</source>
          <target state="translated">Mi opinión desde mi experiencia diciendo,que siempre es mejor usar</target>
        </trans-unit>
        <trans-unit id="cc40fbbf66d8048134a4b0bb32ba2a5ab2198d82" translate="yes" xml:space="preserve">
          <source>Practically
        to stop or prevent submit event, whenever we required rather than &lt;code&gt;return false&lt;/code&gt;&lt;code&gt;event.preventDefault()&lt;/code&gt; works fine.</source>
          <target state="translated">Pr&amp;aacute;cticamente para detener o evitar el env&amp;iacute;o de eventos, siempre que lo &lt;code&gt;event.preventDefault()&lt;/code&gt; lugar de &lt;code&gt;return false&lt;/code&gt; evento falso. PreventDefault () funciona bien.</target>
        </trans-unit>
        <trans-unit id="3fb2b45e6f78b9a7db57ffdf7214522d69586f58" translate="yes" xml:space="preserve">
          <source>Reason:-</source>
          <target state="translated">Reason:-</target>
        </trans-unit>
        <trans-unit id="6f7010d72c875819c4a41c2bc984d6fe1df782e1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/&quot;&gt;jQuery Events: Stop (Mis)Using Return False&lt;/a&gt; for more information and examples.</source>
          <target state="translated">Consulte &lt;a href=&quot;http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/&quot;&gt;jQuery Events: Stop (Mis) Using Return False&lt;/a&gt; para obtener m&amp;aacute;s informaci&amp;oacute;n y ejemplos.</target>
        </trans-unit>
        <trans-unit id="c22ceaa385f77ac38d89f8db0a94d8c35d9ef508" translate="yes" xml:space="preserve">
          <source>So basically this code below:</source>
          <target state="translated">Así que básicamente este código de abajo:</target>
        </trans-unit>
        <trans-unit id="d7b748ec7ed905c2c18b5ee0cee93d2212ad82d5" translate="yes" xml:space="preserve">
          <source>So we can simply say, return false in &lt;code&gt;jQuery&lt;/code&gt; is equal to:</source>
          <target state="translated">Entonces podemos simplemente decir, return false en &lt;code&gt;jQuery&lt;/code&gt; es igual a:</target>
        </trans-unit>
        <trans-unit id="69faef1248c7fa0c1296504cd26cf52117e02cd8" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;http://ejohn.org/&quot;&gt;John Resig&lt;/a&gt;</source>
          <target state="translated">Fuente: &lt;a href=&quot;http://ejohn.org/&quot;&gt;John Resig&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="94ef51b966cbecdc97b4db056a923bfb7204a243" translate="yes" xml:space="preserve">
          <source>Stops callback execution and returns immediately when called.</source>
          <target state="translated">Detiene la ejecución de la llamada y regresa inmediatamente cuando se le llama.</target>
        </trans-unit>
        <trans-unit id="3427246f89cd545a3f1a7102c57fa5709e7bfbfa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Tutorial/More_Event_Handlers#Prevent_Default_Action&quot;&gt;documentation from MDN&lt;/a&gt; explains how &lt;code&gt;return false&lt;/code&gt; in an event handler works</source>
          <target state="translated">La &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Tutorial/More_Event_Handlers#Prevent_Default_Action&quot;&gt;documentaci&amp;oacute;n de MDN&lt;/a&gt; explica c&amp;oacute;mo funciona &lt;code&gt;return false&lt;/code&gt; en un controlador de eventos</target>
        </trans-unit>
        <trans-unit id="ffb4d9a19371f17a28b2ed336e8397790df1247e" translate="yes" xml:space="preserve">
          <source>The benefit to using event.preventDefault() is that you can add this as the first line in the handler, thereby guaranteeing that the anchor's default behavior will not fire, regardless if the last line of the function is not reached (eg. runtime error).</source>
          <target state="translated">El beneficio de usar event.preventDefault()es que se puede añadir como primera línea en el manejador,garantizando así que el comportamiento por defecto del ancla no se disparará,independientemente de que no se alcance la última línea de la función (por ejemplo,error en tiempo de ejecución).</target>
        </trans-unit>
        <trans-unit id="95d32ca809090890fcedc7e54d58cacbd6310cbc" translate="yes" xml:space="preserve">
          <source>The main difference between &lt;code&gt;return false&lt;/code&gt; and &lt;code&gt;event.preventDefault()&lt;/code&gt; is that your code below &lt;code&gt;return false&lt;/code&gt; will not be executed and in &lt;code&gt;event.preventDefault()&lt;/code&gt; case your code will execute after this statement.</source>
          <target state="translated">La principal diferencia entre &lt;code&gt;return false&lt;/code&gt; y &lt;code&gt;event.preventDefault()&lt;/code&gt; es que su c&amp;oacute;digo debajo de &lt;code&gt;return false&lt;/code&gt; no se ejecutar&amp;aacute; y, en caso &lt;code&gt;event.preventDefault()&lt;/code&gt; , su c&amp;oacute;digo se ejecutar&amp;aacute; despu&amp;eacute;s de esta declaraci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="75a9628a79bce905f023d872c8d2d1807130fc6b" translate="yes" xml:space="preserve">
          <source>The reason to use &lt;code&gt;e.preventDefault();&lt;/code&gt; is that in our code so something goes wrong in the code, then it will allow to execute the link or form to get submitted or allow to execute or allow whatever action you need to do. &amp;amp; link or submit button will get submitted &amp;amp; still allow further propagation of the event.</source>
          <target state="translated">La raz&amp;oacute;n para usar &lt;code&gt;e.preventDefault();&lt;/code&gt; es que en nuestro c&amp;oacute;digo hay algo que falla en el c&amp;oacute;digo, entonces permitir&amp;aacute; ejecutar el enlace o formulario para enviarlo o permitir ejecutar o permitir cualquier acci&amp;oacute;n que necesite hacer. El bot&amp;oacute;n &amp;amp; link o submit se enviar&amp;aacute; y a&amp;uacute;n permitir&amp;aacute; una mayor propagaci&amp;oacute;n del evento.</target>
        </trans-unit>
        <trans-unit id="967fe78cf8f095c628d3dc047fcfebf7af3d22aa" translate="yes" xml:space="preserve">
          <source>The reason to use return false; is that you don't want to execute the function any more in strictly mode.</source>
          <target state="translated">La razón para usar return false;es que no quieres ejecutar la función más en modo estricto.</target>
        </trans-unit>
        <trans-unit id="e62eda3b3dd40a1c57862701fc44b746a8939e34" translate="yes" xml:space="preserve">
          <source>This is not, as you've titled it, a &quot;JavaScript&quot; question; it is a question regarding the design of jQuery.</source>
          <target state="translated">Esta no es,como la has titulado,una pregunta de &quot;JavaScript&quot;;es una pregunta sobre el diseño de jQuery.</target>
        </trans-unit>
        <trans-unit id="6d13ec0b3c4cbf652038e2e5ef0c80015ecf1149" translate="yes" xml:space="preserve">
          <source>What happens in jQuery is not the same as what happens with event handlers. DOM event listeners and MSIE &quot;attached&quot; events are a different matter altogether.</source>
          <target state="translated">Lo que sucede en jQuery no es lo mismo que lo que sucede con los manejadores de eventos.Los oyentes de eventos DOM y los eventos &quot;adjuntos&quot; MSIE son un asunto totalmente diferente.</target>
        </trans-unit>
        <trans-unit id="28dc6820fd6fdfeafcfc22f66322d8d6cebd5d05" translate="yes" xml:space="preserve">
          <source>When I want to prevent other event handlers from executing after a certain event is fired, I can use one of two techniques. I'll use jQuery in the examples, but this applies to plain-JS as well:</source>
          <target state="translated">Cuando quiero evitar que otros manejadores de eventos se ejecuten después de que un cierto evento es disparado,puedo usar una de dos técnicas.Usaré jQuery en los ejemplos,pero esto también se aplica a plain-JS:</target>
        </trans-unit>
        <trans-unit id="ac2f19513a13c9c491b86b8b2e34982c9f484d80" translate="yes" xml:space="preserve">
          <source>When using jQuery, &lt;code&gt;return false&lt;/code&gt; is doing 3 separate things when you call it:</source>
          <target state="translated">Cuando usa jQuery, &lt;code&gt;return false&lt;/code&gt; est&amp;aacute; haciendo 3 cosas separadas cuando lo llama:</target>
        </trans-unit>
        <trans-unit id="3f931f5016ba70d8840a41818a56549ccdfbc167" translate="yes" xml:space="preserve">
          <source>When you write return false it do the following things for you behind the scenes.</source>
          <target state="translated">Cuando escribas &quot;return false&quot; haz lo siguiente entre bastidores.</target>
        </trans-unit>
        <trans-unit id="8244e3d25b0c79df38f5527fd1bf6a8bf0663d50" translate="yes" xml:space="preserve">
          <source>You can hang a lot of functions on the &lt;code&gt;onClick&lt;/code&gt; event for one element. How can you be sure the &lt;code&gt;false&lt;/code&gt; one will be the last one to fire? &lt;code&gt;preventDefault&lt;/code&gt; on the other hand will definitely prevent only the default behavior of the element.</source>
          <target state="translated">Puede colgar muchas funciones en el evento &lt;code&gt;onClick&lt;/code&gt; para un elemento. &amp;iquest;C&amp;oacute;mo puedes estar seguro de que el &lt;code&gt;false&lt;/code&gt; ser&amp;aacute; el &amp;uacute;ltimo en disparar? &lt;code&gt;preventDefault&lt;/code&gt; , por otro lado, definitivamente evitar&amp;aacute; solo el comportamiento predeterminado del elemento.</target>
        </trans-unit>
        <trans-unit id="062f6d368c3d95df8f8766e9affdef6be9e8a96c" translate="yes" xml:space="preserve">
          <source>You can read this in the W3C spec on &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-cancelation&quot;&gt;Event cancelation&lt;/a&gt;.</source>
          <target state="translated">Puede leer esto en la especificaci&amp;oacute;n del W3C sobre &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-cancelation&quot;&gt;cancelaci&amp;oacute;n de eventos&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b5b504f53d504cf3929a38a5377f5cb20234c94d" translate="yes" xml:space="preserve">
          <source>event.preventDefault() vs. return false</source>
          <target state="translated">event.preventDefault()vs.return false</target>
        </trans-unit>
        <trans-unit id="785e6744d253e88b07c6226a71524da0112cf0da" translate="yes" xml:space="preserve">
          <source>is &lt;strong&gt;equal&lt;/strong&gt; to this code:</source>
          <target state="translated">es &lt;strong&gt;igual&lt;/strong&gt; a este c&amp;oacute;digo:</target>
        </trans-unit>
        <trans-unit id="a1a5acdea7e9ab67d03bf85aa9ddf592c93e3bac" translate="yes" xml:space="preserve">
          <source>is the w3c specified way of canceling events.</source>
          <target state="translated">es la forma especificada por el W3C para cancelar eventos.</target>
        </trans-unit>
        <trans-unit id="3df67bc9df83585391840f5ded6bb0ee58a15d0a" translate="yes" xml:space="preserve">
          <source>jQuery and the &lt;a href=&quot;http://www.mail-archive.com/jquery-en@googlegroups.com/msg71371.html&quot;&gt;previously linked citation&lt;/a&gt; from &lt;a href=&quot;http://ejohn.org&quot;&gt;John Resig&lt;/a&gt; (in &lt;a href=&quot;https://stackoverflow.com/users/70393&quot;&gt;karim79's&lt;/a&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1357118/#1357151&quot;&gt;message&lt;/a&gt;) seem to be the source misunderstanding of how event handlers in general work.</source>
          <target state="translated">jQuery y la &lt;a href=&quot;http://www.mail-archive.com/jquery-en@googlegroups.com/msg71371.html&quot;&gt;cita previamente vinculada&lt;/a&gt; de &lt;a href=&quot;http://ejohn.org&quot;&gt;John Resig&lt;/a&gt; (en &lt;a href=&quot;https://stackoverflow.com/users/70393&quot;&gt;el&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/questions/1357118/#1357151&quot;&gt;mensaje&lt;/a&gt; de karim79 ) parecen ser la fuente de malentendidos de c&amp;oacute;mo funcionan los controladores de eventos en general.</target>
        </trans-unit>
        <trans-unit id="080713421bac1af25b3e689cddbe0a48d4e74d9d" translate="yes" xml:space="preserve">
          <source>prevents the hyperlink from following the URL, prevents the submit button to submit the form. When you have many event handlers and you just want to prevent default event from occuring, &amp;amp; occuring from many times,
for that we need to  use  in the top of the function().</source>
          <target state="translated">evita que el hiperv&amp;iacute;nculo siga la URL, evita que el bot&amp;oacute;n enviar env&amp;iacute;e el formulario. Cuando tienes muchos controladores de eventos y solo quieres evitar que ocurra un evento predeterminado, y que ocurra muchas veces, para eso necesitamos usarlo en la parte superior de la funci&amp;oacute;n ().</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
