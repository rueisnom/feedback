<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/1373164">
    <body>
      <group id="1373164">
        <trans-unit id="6039cc72c2e501d8b803f4d0f359b7d216beea93" translate="yes" xml:space="preserve">
          <source>&quot;initial_variable&quot;</source>
          <target state="translated">&quot;initial_variable&quot;</target>
        </trans-unit>
        <trans-unit id="5fb6200f31dcb03426f181dfa778a4e44d0588c8" translate="yes" xml:space="preserve">
          <source>&quot;is actually not initial&quot;</source>
          <target state="translated">&quot;no es realmente inicial&quot;</target>
        </trans-unit>
        <trans-unit id="c89219926b58206de9588d41605f62d4b2588d17" translate="yes" xml:space="preserve">
          <source>... choose to implement const variables</source>
          <target state="translated">...elegir para implementar las variables de la const</target>
        </trans-unit>
        <trans-unit id="e5030f237ca24e2f400d411ec8781c9f8cfeeb12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A better solution&lt;/strong&gt; is to use &lt;code&gt;getattr&lt;/code&gt; or store your variables in a dictionary and then access them by name.</source>
          <target state="translated">&lt;strong&gt;Una mejor soluci&amp;oacute;n&lt;/strong&gt; es usar &lt;code&gt;getattr&lt;/code&gt; o almacenar sus variables en un diccionario y luego acceder a ellas por su nombre.</target>
        </trans-unit>
        <trans-unit id="920b598082fb6e89e9b9d2744d7bf0c328bdb5a6" translate="yes" xml:space="preserve">
          <source>Any set of variables can also be wrapped up in a class. 
&quot;Variable&quot; variables may be added to the class instance during runtime by directly accessing the built-in dictionary through __dict__ attribute.</source>
          <target state="translated">Cualquier conjunto de variables también puede ser envuelto en una clase.Las variables &quot;variables&quot; pueden añadirse a la instancia de la clase durante el tiempo de ejecución accediendo directamente al diccionario incorporado mediante el atributo __dict__.</target>
        </trans-unit>
        <trans-unit id="87b993d4814e701a4900badf1ceb8b6302066b50" translate="yes" xml:space="preserve">
          <source>Finally, don't forget other data structures, such as the &lt;code&gt;set&lt;/code&gt; - this is similar to a dictionary, except that each &quot;name&quot; doesn't have a value attached to it. If you simply need a &quot;bag&quot; of objects, this can be a great choice. Instead of something like this:</source>
          <target state="translated">Finalmente, no olvide otras estructuras de datos, como el &lt;code&gt;set&lt;/code&gt; ; esto es similar a un diccionario, excepto que cada &quot;nombre&quot; no tiene un valor adjunto. Si simplemente necesita una &quot;bolsa&quot; de objetos, esta puede ser una excelente opci&amp;oacute;n. En lugar de algo como esto:</target>
        </trans-unit>
        <trans-unit id="62b78176387af05976e3c36610897ce9ccbfa774" translate="yes" xml:space="preserve">
          <source>For cases where you're thinking of doing something like</source>
          <target state="translated">Para los casos en los que estás pensando en hacer algo como</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="52b22ef05e7a7c371ee7038acef57378bc06dece" translate="yes" xml:space="preserve">
          <source>For ordered sequences, lists are more convenient than dicts with integer keys, because lists support iteration in index order, &lt;a href=&quot;https://stackoverflow.com/questions/509211/understanding-pythons-slice-notation&quot;&gt;slicing&lt;/a&gt;, &lt;code&gt;append&lt;/code&gt;, and other operations that would require awkward key management with a dict.</source>
          <target state="translated">Para las secuencias ordenadas, las listas son m&amp;aacute;s convenientes que los dictos con claves enteras, porque las listas admiten la iteraci&amp;oacute;n en orden de &amp;iacute;ndice, &lt;a href=&quot;https://stackoverflow.com/questions/509211/understanding-pythons-slice-notation&quot;&gt;segmentaci&amp;oacute;n&lt;/a&gt; , &lt;code&gt;append&lt;/code&gt; y otras operaciones que requerir&amp;iacute;an una gesti&amp;oacute;n de claves inc&amp;oacute;moda con un dict.</target>
        </trans-unit>
        <trans-unit id="23aec67b01c0b0bdfacb1ae1afd2813f1c643b24" translate="yes" xml:space="preserve">
          <source>Here is an elaborative manual entry, for instance: &lt;em&gt;&lt;a href=&quot;http://us3.php.net/manual/en/language.variables.variable.php&quot;&gt;Variable variables&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">Aqu&amp;iacute; hay una entrada manual elaborada, por ejemplo: &lt;em&gt;&lt;a href=&quot;http://us3.php.net/manual/en/language.variables.variable.php&quot;&gt;Variables variables&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="849a7a6472a8054e5a032a4226d61b4d0a0b08c7" translate="yes" xml:space="preserve">
          <source>How do I accomplish variable variables in Python?</source>
          <target state="translated">¿Cómo puedo lograr variables en Python?</target>
        </trans-unit>
        <trans-unit id="ae6552a5bb87a5c1ce1fccd21112be3815f25f8e" translate="yes" xml:space="preserve">
          <source>How do I create a variable number of variables</source>
          <target state="translated">¿Cómo creo un número variable de variables</target>
        </trans-unit>
        <trans-unit id="8f801a60c8bbd44e6c8e803dd9f5695ec52dec81" translate="yes" xml:space="preserve">
          <source>I have heard this is a bad idea in general though, and it is a security hole in Python. Is that true?</source>
          <target state="translated">He oído que esto es una mala idea en general,y es un agujero de seguridad en Python.¿Es eso cierto?</target>
        </trans-unit>
        <trans-unit id="d07d315c22fa66a5b4d8a0fde4357d7133883329" translate="yes" xml:space="preserve">
          <source>I have tried both in python 3.7.3, you can use either globals() or vars()</source>
          <target state="translated">He probado ambos en python 3.7.3,puedes usar tanto globals()como vars()</target>
        </trans-unit>
        <trans-unit id="2d30a1844a115b32955e1639993f89ad3a09db05" translate="yes" xml:space="preserve">
          <source>I'm am answering the question: &lt;a href=&quot;https://stackoverflow.com/questions/9437726/how-to-get-the-value-of-a-variable-given-its-name-in-a-string&quot;&gt;How to get the value of a variable given its name in a string?&lt;/a&gt;
which is closed as a duplicate with a link to this question.</source>
          <target state="translated">Estoy respondiendo la pregunta: &lt;a href=&quot;https://stackoverflow.com/questions/9437726/how-to-get-the-value-of-a-variable-given-its-name-in-a-string&quot;&gt;&amp;iquest;C&amp;oacute;mo obtener el valor de una variable dado su nombre en una cadena?&lt;/a&gt; que se cierra como un duplicado con un enlace a esta pregunta.</target>
        </trans-unit>
        <trans-unit id="18a5f35bd371c48bcc67f192eed772ec90306d1c" translate="yes" xml:space="preserve">
          <source>If the program requires arbitrary variable &quot;names,&quot; a dictionary is the best choice, as explained in other answers. However, if you're simply trying to create many variables and you don't mind referring to them with a sequence of integers, you're probably looking for a &lt;code&gt;list&lt;/code&gt;. This is particularly true if your data are homogeneous, such as daily temperature readings, weekly quiz scores, or a grid of graphical widgets.</source>
          <target state="translated">Si el programa requiere &quot;nombres&quot; de variables arbitrarias, un diccionario es la mejor opci&amp;oacute;n, como se explica en otras respuestas. Sin embargo, si simplemente est&amp;aacute; tratando de crear muchas variables y no le importa referirse a ellas con una secuencia de enteros, probablemente est&amp;eacute; buscando una &lt;code&gt;list&lt;/code&gt; a . Esto es particularmente cierto si sus datos son homog&amp;eacute;neos, como lecturas diarias de temperatura, puntajes de cuestionarios semanales o una cuadr&amp;iacute;cula de widgets gr&amp;aacute;ficos.</target>
        </trans-unit>
        <trans-unit id="64358dd2d48fdd4cd1bc1a000b89807dc3a13b24" translate="yes" xml:space="preserve">
          <source>If the variables in question are part of an object (part of a class for example) then some useful functions to achieve exactly that are &lt;code&gt;hasattr&lt;/code&gt;, &lt;code&gt;getattr&lt;/code&gt;, and &lt;code&gt;setattr&lt;/code&gt;.</source>
          <target state="translated">Si las variables en cuesti&amp;oacute;n son parte de un objeto (parte de una clase, por ejemplo), entonces algunas funciones &amp;uacute;tiles para lograr exactamente eso son &lt;code&gt;hasattr&lt;/code&gt; , &lt;code&gt;getattr&lt;/code&gt; y &lt;code&gt;setattr&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9f86c76f8e3155e9eaa5ba6e1caff290311c8717" translate="yes" xml:space="preserve">
          <source>If you don't want to use any object, you can still use &lt;code&gt;setattr()&lt;/code&gt; inside your current module:</source>
          <target state="translated">Si no desea usar ning&amp;uacute;n objeto, a&amp;uacute;n puede usar &lt;code&gt;setattr()&lt;/code&gt; dentro de su m&amp;oacute;dulo actual:</target>
        </trans-unit>
        <trans-unit id="2f48f6db9abd28854a569ecf3accb6e0016b254c" translate="yes" xml:space="preserve">
          <source>If you want to access a variable in the local scope you can use &lt;a href=&quot;http://docs.python.org/library/functions.html#locals&quot;&gt;&lt;code&gt;locals()&lt;/code&gt;&lt;/a&gt;, but you cannot assign values to the returned dict.</source>
          <target state="translated">Si desea acceder a una variable en el &amp;aacute;mbito local, puede usar &lt;a href=&quot;http://docs.python.org/library/functions.html#locals&quot;&gt; &lt;code&gt;locals()&lt;/code&gt; &lt;/a&gt; , pero no puede asignar valores al dict devuelto.</target>
        </trans-unit>
        <trans-unit id="7faf2553f8415046471d7a59c6b718da3ebe659a" translate="yes" xml:space="preserve">
          <source>If you wish to allow overwriting of variables with the same type only:</source>
          <target state="translated">Si desea permitir que se sobrescriban las variables con el mismo tipo solamente:</target>
        </trans-unit>
        <trans-unit id="4e0c3b044bf2ead2176cad648113a8d373dfa0e4" translate="yes" xml:space="preserve">
          <source>Instead of a dictionary you can also use &lt;a href=&quot;https://docs.python.org/library/collections.html#collections.namedtuple&quot;&gt;&lt;code&gt;namedtuple&lt;/code&gt;&lt;/a&gt; from the collections module, which makes access easier.</source>
          <target state="translated">En lugar de un diccionario, tambi&amp;eacute;n puede usar &lt;a href=&quot;https://docs.python.org/library/collections.html#collections.namedtuple&quot;&gt; &lt;code&gt;namedtuple&lt;/code&gt; &lt;/a&gt; del m&amp;oacute;dulo de colecciones, lo que facilita el acceso.</target>
        </trans-unit>
        <trans-unit id="9fab19888db5a67123e5839ab084c0aea1b19536" translate="yes" xml:space="preserve">
          <source>It's not a good idea. If you are accessing a global variable you can use &lt;a href=&quot;http://docs.python.org/library/functions.html#globals&quot;&gt;&lt;code&gt;globals()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">No es una buena idea. Si est&amp;aacute; accediendo a una variable global, puede usar &lt;a href=&quot;http://docs.python.org/library/functions.html#globals&quot;&gt; &lt;code&gt;globals()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="06f7ac61350f8d755965920838d3ba902791eca0" translate="yes" xml:space="preserve">
          <source>New coders sometimes write code like this:</source>
          <target state="translated">Los nuevos codificadores a veces escriben códigos como este:</target>
        </trans-unit>
        <trans-unit id="45c3dc1c7731c6185824876ed514e54f71bacb64" translate="yes" xml:space="preserve">
          <source>Reference:</source>
          <target state="translated">Reference:</target>
        </trans-unit>
        <trans-unit id="a892b74a4ac755e4764b0e3e0b4ecbd48f6d9566" translate="yes" xml:space="preserve">
          <source>So for example you can have:</source>
          <target state="translated">Así que,por ejemplo,puedes tener:</target>
        </trans-unit>
        <trans-unit id="30cf33051ddd11a560ceb2f00189926144ceb761" translate="yes" xml:space="preserve">
          <source>That said, I've implemented a &lt;a href=&quot;https://sourceforge.net/projects/python-vvm/&quot;&gt;variable variables manager&lt;/a&gt;-class which provides some of the above ideas. It works for python 2 and 3.</source>
          <target state="translated">Dicho esto, he implementado un &lt;a href=&quot;https://sourceforge.net/projects/python-vvm/&quot;&gt;administrador de variables variables&lt;/a&gt; -clase que proporciona algunas de las ideas anteriores. Funciona para python 2 y 3.</target>
        </trans-unit>
        <trans-unit id="5920ba62da6b3fc96c778d9ff6ddb4b1b25e1823" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/library/types.html#types.SimpleNamespace&quot;&gt;&lt;code&gt;SimpleNamespace&lt;/code&gt;&lt;/a&gt; class could be used to create new attributes with &lt;code&gt;setattr&lt;/code&gt;, or subclass &lt;code&gt;SimpleNamespace&lt;/code&gt; and create your own function to add new attribute names (variables).</source>
          <target state="translated">La clase &lt;a href=&quot;https://docs.python.org/library/types.html#types.SimpleNamespace&quot;&gt; &lt;code&gt;SimpleNamespace&lt;/code&gt; &lt;/a&gt; podr&amp;iacute;a usarse para crear nuevos atributos con &lt;code&gt;setattr&lt;/code&gt; o la subclase &lt;code&gt;SimpleNamespace&lt;/code&gt; y crear su propia funci&amp;oacute;n para agregar nuevos nombres de atributos (variables).</target>
        </trans-unit>
        <trans-unit id="441ab396ac9de093879ddabaadbb3fab730a2cd3" translate="yes" xml:space="preserve">
          <source>The coder is then left with a pile of named variables, with a coding effort of O(&lt;em&gt;m&lt;/em&gt; * &lt;em&gt;n&lt;/em&gt;), where &lt;em&gt;m&lt;/em&gt; is the number of named variables and &lt;em&gt;n&lt;/em&gt; is the number of times that group of variables needs to be accessed (including creation). The more astute beginner observes that the only difference in each of those lines is a number that changes based on a rule, and decides to use a loop. However, they get stuck on how to dynamically create those variable names, and may try something like this:</source>
          <target state="translated">Luego, el codificador se queda con una pila de variables con nombre, con un esfuerzo de codificaci&amp;oacute;n de O ( &lt;em&gt;m&lt;/em&gt; * &lt;em&gt;n&lt;/em&gt; ), donde &lt;em&gt;m&lt;/em&gt; es el n&amp;uacute;mero de variables con nombre &lt;em&gt;yn&lt;/em&gt; es el n&amp;uacute;mero de veces que se necesita acceder a ese grupo de variables (incluida la creaci&amp;oacute;n ) El principiante m&amp;aacute;s astuto observa que la &amp;uacute;nica diferencia en cada una de esas l&amp;iacute;neas es un n&amp;uacute;mero que cambia seg&amp;uacute;n una regla, y decide usar un bucle. Sin embargo, se atascan en c&amp;oacute;mo crear din&amp;aacute;micamente esos nombres de variables y pueden intentar algo como esto:</target>
        </trans-unit>
        <trans-unit id="6cc4f6975b74fc18e12ef2a5b28bb88dc6368a2d" translate="yes" xml:space="preserve">
          <source>The consensus is to use a dictionary for this - see the other answers. This is a good idea for most cases, however, there are many aspects arising from this:</source>
          <target state="translated">El consenso es usar un diccionario para esto-ver las otras respuestas.Esta es una buena idea para la mayoría de los casos,sin embargo,hay muchos aspectos que surgen de esto:</target>
        </trans-unit>
        <trans-unit id="5732d6a71cc900cd8992693021cb55e36f1df364" translate="yes" xml:space="preserve">
          <source>The following code defines Variables class, which adds variables (in this case attributes) to its instance during the construction. Variable names are taken from a specified list (which, for example, could have been generated by program code):</source>
          <target state="translated">El siguiente código define la clase Variables,que añade variables (en este caso atributos)a su instancia durante la construcción.Los nombres de las variables se toman de una lista especificada (que,por ejemplo,podría haber sido generada por el código del programa):</target>
        </trans-unit>
        <trans-unit id="3c4500bc627597f72b477bf78ae14689fefc0f0a" translate="yes" xml:space="preserve">
          <source>The result in either case is a populated &lt;code&gt;list&lt;/code&gt;, with the first element accessed with &lt;code&gt;my_calculator.buttons[0]&lt;/code&gt;, the next with &lt;code&gt;my_calculator.buttons[1]&lt;/code&gt;, and so on. The &quot;base&quot; variable name becomes the name of the &lt;code&gt;list&lt;/code&gt; and the varying identifier is used to access it.</source>
          <target state="translated">El resultado en cualquier caso es una &lt;code&gt;list&lt;/code&gt; a poblada, con el primer elemento al que se accede con &lt;code&gt;my_calculator.buttons[0]&lt;/code&gt; , el siguiente con &lt;code&gt;my_calculator.buttons[1]&lt;/code&gt; , y as&amp;iacute; sucesivamente. El nombre de la variable &quot;base&quot; se convierte en el nombre de la &lt;code&gt;list&lt;/code&gt; a y se utiliza el identificador variable para acceder a ella.</target>
        </trans-unit>
        <trans-unit id="eeae1384b2f94311d0148155d4105806167ce513" translate="yes" xml:space="preserve">
          <source>Then you can do:</source>
          <target state="translated">Entonces puedes hacerlo:</target>
        </trans-unit>
        <trans-unit id="3faa232d4f5186099e424ea2820d4a021fb7a7f8" translate="yes" xml:space="preserve">
          <source>They soon find that this does not work.</source>
          <target state="translated">Pronto descubren que esto no funciona.</target>
        </trans-unit>
        <trans-unit id="290d56ed9b233f779d04a7b929c7bc7fa6dfb2df" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;list&lt;/code&gt; can also be created in one line with a comprehension:</source>
          <target state="translated">Esta &lt;code&gt;list&lt;/code&gt; a tambi&amp;eacute;n se puede crear en una l&amp;iacute;nea con una comprensi&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="4ff57f7c33f548283912e68a98d7cf258ead89a5" translate="yes" xml:space="preserve">
          <source>This can be assembled as follows:</source>
          <target state="translated">Esto se puede ensamblar de la siguiente manera:</target>
        </trans-unit>
        <trans-unit id="7213a70d2034e473881e812faf32408d6512ac9c" translate="yes" xml:space="preserve">
          <source>This way you won't accidentally overwrite previously existing variables (which is the security aspect) and you can have different &quot;namespaces&quot;.</source>
          <target state="translated">De esta manera no se sobrescribirán accidentalmente las variables existentes anteriormente (que es el aspecto de la seguridad)y se podrán tener diferentes &quot;namespaces&quot;.</target>
        </trans-unit>
        <trans-unit id="409561cf2b160a1c36717f3a6949ebae680daf2d" translate="yes" xml:space="preserve">
          <source>This will assign 'a' to all of these 10 variables, of course you can change the value dynamically as well. All of these variables can be accessed now like other globally declared variable:</source>
          <target state="translated">Esto asignará 'a' a todas estas 10 variables,por supuesto también puedes cambiar el valor dinámicamente.Se puede acceder a todas estas variables ahora como a otras variables declaradas globalmente:</target>
        </trans-unit>
        <trans-unit id="9e5295fa48a75da11bc0d9f16c465452c0fc49d7" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;globals()&lt;/code&gt;</source>
          <target state="translated">Usar &lt;code&gt;globals()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e331c614da5d177a4fc6ac78a5fb120a626e96e8" translate="yes" xml:space="preserve">
          <source>Use a &lt;code&gt;list&lt;/code&gt; for a sequence of similar objects, a &lt;code&gt;set&lt;/code&gt; for an arbitrarily-ordered bag of objects, or a &lt;code&gt;dict&lt;/code&gt; for a bag of names with associated values.</source>
          <target state="translated">Use una &lt;code&gt;list&lt;/code&gt; a para una secuencia de objetos similares, un &lt;code&gt;set&lt;/code&gt; para una bolsa de objetos ordenada arbitrariamente o un &lt;code&gt;dict&lt;/code&gt; para una bolsa de nombres con valores asociados.</target>
        </trans-unit>
        <trans-unit id="edc0b7560962bcbf6f4322fa4e87eb0b37234292" translate="yes" xml:space="preserve">
          <source>Use the built-in &lt;a href=&quot;http://docs.python.org/library/functions.html#getattr&quot;&gt;&lt;code&gt;getattr&lt;/code&gt;&lt;/a&gt; function to get an attribute on an object by name.  Modify the name as needed.</source>
          <target state="translated">Utilice la funci&amp;oacute;n &lt;a href=&quot;http://docs.python.org/library/functions.html#getattr&quot;&gt; &lt;code&gt;getattr&lt;/code&gt; &lt;/a&gt; incorporada para obtener un atributo en un objeto por su nombre. Modifique el nombre seg&amp;uacute;n sea necesario.</target>
        </trans-unit>
        <trans-unit id="6b6d13e412e862067defbbb2d6504aee2f2ddbd9" translate="yes" xml:space="preserve">
          <source>Whenever you want to use variable variables, it's probably better to use a dictionary. So instead of writing</source>
          <target state="translated">Siempre que quieras usar variables,probablemente sea mejor usar un diccionario.Así que en lugar de escribir</target>
        </trans-unit>
        <trans-unit id="2eebade0a74f50ac8f0f010afce8443b505c25b9" translate="yes" xml:space="preserve">
          <source>You can actually assign variables to global scope dynamically, for instance, if you want 10 variables that can be accessed on a global scope &lt;code&gt;i_1&lt;/code&gt;, &lt;code&gt;i_2&lt;/code&gt; ... &lt;code&gt;i_10&lt;/code&gt;:</source>
          <target state="translated">En realidad, puede asignar variables al &amp;aacute;mbito global de forma din&amp;aacute;mica, por ejemplo, si desea 10 variables a las que se pueda acceder en un &amp;aacute;mbito global &lt;code&gt;i_1&lt;/code&gt; , &lt;code&gt;i_2&lt;/code&gt; ... &lt;code&gt;i_10&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f8b81497c97d5403c47b7179fa6b3fe89dfa1591" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;https://docs.python.org/tutorial/datastructures.html#dictionaries&quot;&gt;dictionaries&lt;/a&gt; to accomplish this. Dictionaries are stores of keys and values.</source>
          <target state="translated">Puede usar &lt;a href=&quot;https://docs.python.org/tutorial/datastructures.html#dictionaries&quot;&gt;diccionarios&lt;/a&gt; para lograr esto. Los diccionarios son almacenes de claves y valores.</target>
        </trans-unit>
        <trans-unit id="7d9bd4cc0b29bc2c2db7ecf717765fd1ce1a3e4d" translate="yes" xml:space="preserve">
          <source>You can use variable key names to achieve the effect of variable variables without the security risk.</source>
          <target state="translated">Puede utilizar nombres de claves variables para lograr el efecto de las variables variables sin el riesgo de seguridad.</target>
        </trans-unit>
        <trans-unit id="bcf7295d6344e469700691e25ae0c18f64b983ec" translate="yes" xml:space="preserve">
          <source>You have to use &lt;a href=&quot;https://docs.python.org/2/library/functions.html#globals&quot;&gt;&lt;code&gt;globals()&lt;/code&gt; built in method&lt;/a&gt;  to achieve that behaviour:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/2/library/functions.html#globals&quot;&gt; &lt;code&gt;globals()&lt;/code&gt; &lt;/a&gt; usar el m&amp;eacute;todo integrado globals () para lograr ese comportamiento:</target>
        </trans-unit>
        <trans-unit id="fdc9257befef940b959102b0145be8ce9eb50604" translate="yes" xml:space="preserve">
          <source>You will have this:</source>
          <target state="translated">Tendrás esto:</target>
        </trans-unit>
        <trans-unit id="428aa556b84407dd42722850e5ec94cb8472df75" translate="yes" xml:space="preserve">
          <source>You'd use &lt;a href=&quot;https://sourceforge.net/p/python-vvm/code/ci/master/tree/variableVariablesManager.py&quot;&gt;the class&lt;/a&gt; like this:</source>
          <target state="translated">Usar&amp;iacute;as &lt;a href=&quot;https://sourceforge.net/p/python-vvm/code/ci/master/tree/variableVariablesManager.py&quot;&gt;la clase&lt;/a&gt; as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="f9df9e6504db50770c7dec41c0e41bebfd97c019" translate="yes" xml:space="preserve">
          <source>a list may be more appropriate than a dict. A list represents an ordered sequence of objects, with integer indices:</source>
          <target state="translated">una lista puede ser más apropiada que un dictado.Una lista representa una secuencia ordenada de objetos,con índices enteros:</target>
        </trans-unit>
        <trans-unit id="fb7f7c94028fe09a6d2d9b3bf0b8501eb7095619" translate="yes" xml:space="preserve">
          <source>etc.</source>
          <target state="translated">etc.</target>
        </trans-unit>
        <trans-unit id="1cd4904effad73686c1ae71e998a90fb306559c0" translate="yes" xml:space="preserve">
          <source>however, you are much more flexible, e.g.</source>
          <target state="translated">sin embargo,eres mucho más flexible,por ejemplo.</target>
        </trans-unit>
        <trans-unit id="99befabf4533023d4103df2842ce7d736d4c4095" translate="yes" xml:space="preserve">
          <source>if you want to rename a variable name, you'll have to do it manually</source>
          <target state="translated">si quieres renombrar un nombre de variable,tendrás que hacerlo manualmente</target>
        </trans-unit>
        <trans-unit id="2ad25a3ab907d0517e675911828c60750b4252e0" translate="yes" xml:space="preserve">
          <source>there's either no locality or globality for variable variables, it depends on the globality of the dictionary</source>
          <target state="translated">no hay ninguna localidad o globalidad para las variables variables,depende de la globalidad del diccionario</target>
        </trans-unit>
        <trans-unit id="630e51783416953ffc715ff70b006a8cccf423e0" translate="yes" xml:space="preserve">
          <source>to raise an exception on overwriting for different types</source>
          <target state="translated">para plantear una excepción sobre la sobrescritura para diferentes tipos</target>
        </trans-unit>
        <trans-unit id="fe9f4907df588254f3f758e18069e1407ae365e1" translate="yes" xml:space="preserve">
          <source>you can decide to overwrite existing variables or  ...</source>
          <target state="translated">puedes decidir sobrescribir las variables existentes o...</target>
        </trans-unit>
        <trans-unit id="304747224cc19794b15e3d40426989c941348c0c" translate="yes" xml:space="preserve">
          <source>you write</source>
          <target state="translated">escribes...</target>
        </trans-unit>
        <trans-unit id="afca87b48d68ef853ce2576d4755bf1bf7a01246" translate="yes" xml:space="preserve">
          <source>you'll yourself be responsible for this dictionary, including garbage collection (of in-dict variables) etc.</source>
          <target state="translated">usted mismo será responsable de este diccionario,incluyendo la recogida de basura (de variables in-dictadas)etc.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
