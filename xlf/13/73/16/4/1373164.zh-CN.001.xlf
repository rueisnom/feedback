<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/1373164">
    <body>
      <group id="1373164">
        <trans-unit id="6039cc72c2e501d8b803f4d0f359b7d216beea93" translate="yes" xml:space="preserve">
          <source>&quot;initial_variable&quot;</source>
          <target state="translated">&quot;initial_variable&quot;</target>
        </trans-unit>
        <trans-unit id="5fb6200f31dcb03426f181dfa778a4e44d0588c8" translate="yes" xml:space="preserve">
          <source>&quot;is actually not initial&quot;</source>
          <target state="translated">&quot;其实并不是初始化&quot;</target>
        </trans-unit>
        <trans-unit id="c89219926b58206de9588d41605f62d4b2588d17" translate="yes" xml:space="preserve">
          <source>... choose to implement const variables</source>
          <target state="translated">...选择实现常量变量</target>
        </trans-unit>
        <trans-unit id="e5030f237ca24e2f400d411ec8781c9f8cfeeb12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A better solution&lt;/strong&gt; is to use &lt;code&gt;getattr&lt;/code&gt; or store your variables in a dictionary and then access them by name.</source>
          <target state="translated">&lt;strong&gt;更好的解决方案&lt;/strong&gt;是使用 &lt;code&gt;getattr&lt;/code&gt; 或将变量存储在字典中，然后按名称访问它们。</target>
        </trans-unit>
        <trans-unit id="920b598082fb6e89e9b9d2744d7bf0c328bdb5a6" translate="yes" xml:space="preserve">
          <source>Any set of variables can also be wrapped up in a class. 
&quot;Variable&quot; variables may be added to the class instance during runtime by directly accessing the built-in dictionary through __dict__ attribute.</source>
          <target state="translated">任何一组变量也可以被封装在一个类中。&quot;变量 &quot;变量可以在运行时通过__dict__属性直接访问内置的字典,在运行时添加到类实例中。</target>
        </trans-unit>
        <trans-unit id="87b993d4814e701a4900badf1ceb8b6302066b50" translate="yes" xml:space="preserve">
          <source>Finally, don't forget other data structures, such as the &lt;code&gt;set&lt;/code&gt; - this is similar to a dictionary, except that each &quot;name&quot; doesn't have a value attached to it. If you simply need a &quot;bag&quot; of objects, this can be a great choice. Instead of something like this:</source>
          <target state="translated">最后，不要忘记其他数据结构，例如 &lt;code&gt;set&lt;/code&gt; -这类似于字典，只是每个&amp;ldquo;名称&amp;rdquo;都没有附加值。 如果您只需要一个&amp;ldquo;袋&amp;rdquo;的对象，这可能是一个不错的选择。 代替这样的事情：</target>
        </trans-unit>
        <trans-unit id="62b78176387af05976e3c36610897ce9ccbfa774" translate="yes" xml:space="preserve">
          <source>For cases where you're thinking of doing something like</source>
          <target state="translated">对于你想做的情况,比如说</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="52b22ef05e7a7c371ee7038acef57378bc06dece" translate="yes" xml:space="preserve">
          <source>For ordered sequences, lists are more convenient than dicts with integer keys, because lists support iteration in index order, &lt;a href=&quot;https://stackoverflow.com/questions/509211/understanding-pythons-slice-notation&quot;&gt;slicing&lt;/a&gt;, &lt;code&gt;append&lt;/code&gt;, and other operations that would require awkward key management with a dict.</source>
          <target state="translated">对于有序序列，列表比带有整数键的字典更方便，因为列表支持索引顺序的迭代， &lt;a href=&quot;https://stackoverflow.com/questions/509211/understanding-pythons-slice-notation&quot;&gt;切片&lt;/a&gt; ， &lt;code&gt;append&lt;/code&gt; 和其他需要使用字典管理笨拙键的操作。</target>
        </trans-unit>
        <trans-unit id="23aec67b01c0b0bdfacb1ae1afd2813f1c643b24" translate="yes" xml:space="preserve">
          <source>Here is an elaborative manual entry, for instance: &lt;em&gt;&lt;a href=&quot;http://us3.php.net/manual/en/language.variables.variable.php&quot;&gt;Variable variables&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">例如，这是详尽的手动输入： &lt;em&gt;&lt;a href=&quot;http://us3.php.net/manual/en/language.variables.variable.php&quot;&gt;变量变量&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="849a7a6472a8054e5a032a4226d61b4d0a0b08c7" translate="yes" xml:space="preserve">
          <source>How do I accomplish variable variables in Python?</source>
          <target state="translated">如何在Python中完成变量的变化?</target>
        </trans-unit>
        <trans-unit id="ae6552a5bb87a5c1ce1fccd21112be3815f25f8e" translate="yes" xml:space="preserve">
          <source>How do I create a variable number of variables</source>
          <target state="translated">如何创建一个可变数量的变量?</target>
        </trans-unit>
        <trans-unit id="8f801a60c8bbd44e6c8e803dd9f5695ec52dec81" translate="yes" xml:space="preserve">
          <source>I have heard this is a bad idea in general though, and it is a security hole in Python. Is that true?</source>
          <target state="translated">虽然我听说这在一般情况下是个坏主意,而且是Python的安全漏洞。真的是这样吗?</target>
        </trans-unit>
        <trans-unit id="d07d315c22fa66a5b4d8a0fde4357d7133883329" translate="yes" xml:space="preserve">
          <source>I have tried both in python 3.7.3, you can use either globals() or vars()</source>
          <target state="translated">我在python 3.7.3中尝试过这两种方法,你可以使用globals()或vars()</target>
        </trans-unit>
        <trans-unit id="2d30a1844a115b32955e1639993f89ad3a09db05" translate="yes" xml:space="preserve">
          <source>I'm am answering the question: &lt;a href=&quot;https://stackoverflow.com/questions/9437726/how-to-get-the-value-of-a-variable-given-its-name-in-a-string&quot;&gt;How to get the value of a variable given its name in a string?&lt;/a&gt;
which is closed as a duplicate with a link to this question.</source>
          <target state="translated">我正在回答这个问题： &lt;a href=&quot;https://stackoverflow.com/questions/9437726/how-to-get-the-value-of-a-variable-given-its-name-in-a-string&quot;&gt;如何在字符串中给定变量名的情况下获取变量的值？&lt;/a&gt; 该链接作为重复链接关闭，并带有指向该问题的链接。</target>
        </trans-unit>
        <trans-unit id="18a5f35bd371c48bcc67f192eed772ec90306d1c" translate="yes" xml:space="preserve">
          <source>If the program requires arbitrary variable &quot;names,&quot; a dictionary is the best choice, as explained in other answers. However, if you're simply trying to create many variables and you don't mind referring to them with a sequence of integers, you're probably looking for a &lt;code&gt;list&lt;/code&gt;. This is particularly true if your data are homogeneous, such as daily temperature readings, weekly quiz scores, or a grid of graphical widgets.</source>
          <target state="translated">如果程序需要任意变量&amp;ldquo;名称&amp;rdquo;，则字典是最佳选择，如其他答案所述。 但是，如果您只是尝试创建许多变量，而又不介意使用整数序列来引用它们，那么您可能正在寻找一个 &lt;code&gt;list&lt;/code&gt; 。 如果您的数据是同质的，例如每天的温度读数，每周的测验分数或图形小部件网格，则尤其如此。</target>
        </trans-unit>
        <trans-unit id="64358dd2d48fdd4cd1bc1a000b89807dc3a13b24" translate="yes" xml:space="preserve">
          <source>If the variables in question are part of an object (part of a class for example) then some useful functions to achieve exactly that are &lt;code&gt;hasattr&lt;/code&gt;, &lt;code&gt;getattr&lt;/code&gt;, and &lt;code&gt;setattr&lt;/code&gt;.</source>
          <target state="translated">如果有问题的变量是对象的一部分（例如，类的一部分），则可以使用 &lt;code&gt;hasattr&lt;/code&gt; ， &lt;code&gt;getattr&lt;/code&gt; 和 &lt;code&gt;setattr&lt;/code&gt; 来实现某些有用的函数。</target>
        </trans-unit>
        <trans-unit id="9f86c76f8e3155e9eaa5ba6e1caff290311c8717" translate="yes" xml:space="preserve">
          <source>If you don't want to use any object, you can still use &lt;code&gt;setattr()&lt;/code&gt; inside your current module:</source>
          <target state="translated">如果您不想使用任何对象，仍然可以在当前模块内使用 &lt;code&gt;setattr()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="2f48f6db9abd28854a569ecf3accb6e0016b254c" translate="yes" xml:space="preserve">
          <source>If you want to access a variable in the local scope you can use &lt;a href=&quot;http://docs.python.org/library/functions.html#locals&quot;&gt;&lt;code&gt;locals()&lt;/code&gt;&lt;/a&gt;, but you cannot assign values to the returned dict.</source>
          <target state="translated">如果要在本地范围内访问变量，则可以使用&lt;a href=&quot;http://docs.python.org/library/functions.html#locals&quot;&gt; &lt;code&gt;locals()&lt;/code&gt; &lt;/a&gt; ，但不能将值分配给返回的dict。</target>
        </trans-unit>
        <trans-unit id="7faf2553f8415046471d7a59c6b718da3ebe659a" translate="yes" xml:space="preserve">
          <source>If you wish to allow overwriting of variables with the same type only:</source>
          <target state="translated">如果你希望只允许覆盖相同类型的变量。</target>
        </trans-unit>
        <trans-unit id="4e0c3b044bf2ead2176cad648113a8d373dfa0e4" translate="yes" xml:space="preserve">
          <source>Instead of a dictionary you can also use &lt;a href=&quot;https://docs.python.org/library/collections.html#collections.namedtuple&quot;&gt;&lt;code&gt;namedtuple&lt;/code&gt;&lt;/a&gt; from the collections module, which makes access easier.</source>
          <target state="translated">除了字典，您还可以使用collections模块中的&lt;a href=&quot;https://docs.python.org/library/collections.html#collections.namedtuple&quot;&gt; &lt;code&gt;namedtuple&lt;/code&gt; &lt;/a&gt; ，这使访问更加容易。</target>
        </trans-unit>
        <trans-unit id="9fab19888db5a67123e5839ab084c0aea1b19536" translate="yes" xml:space="preserve">
          <source>It's not a good idea. If you are accessing a global variable you can use &lt;a href=&quot;http://docs.python.org/library/functions.html#globals&quot;&gt;&lt;code&gt;globals()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">这不是一个好主意。 如果要访问全局变量，则可以使用&lt;a href=&quot;http://docs.python.org/library/functions.html#globals&quot;&gt; &lt;code&gt;globals()&lt;/code&gt; &lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="06f7ac61350f8d755965920838d3ba902791eca0" translate="yes" xml:space="preserve">
          <source>New coders sometimes write code like this:</source>
          <target state="translated">新的编码员有时会写出这样的代码。</target>
        </trans-unit>
        <trans-unit id="45c3dc1c7731c6185824876ed514e54f71bacb64" translate="yes" xml:space="preserve">
          <source>Reference:</source>
          <target state="translated">Reference:</target>
        </trans-unit>
        <trans-unit id="a892b74a4ac755e4764b0e3e0b4ecbd48f6d9566" translate="yes" xml:space="preserve">
          <source>So for example you can have:</source>
          <target state="translated">所以比如说你可以有:</target>
        </trans-unit>
        <trans-unit id="30cf33051ddd11a560ceb2f00189926144ceb761" translate="yes" xml:space="preserve">
          <source>That said, I've implemented a &lt;a href=&quot;https://sourceforge.net/projects/python-vvm/&quot;&gt;variable variables manager&lt;/a&gt;-class which provides some of the above ideas. It works for python 2 and 3.</source>
          <target state="translated">也就是说，我已经实现了&lt;a href=&quot;https://sourceforge.net/projects/python-vvm/&quot;&gt;变量变量管理器&lt;/a&gt; -class，它提供了上述一些想法。 它适用于python 2和3。</target>
        </trans-unit>
        <trans-unit id="5920ba62da6b3fc96c778d9ff6ddb4b1b25e1823" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/library/types.html#types.SimpleNamespace&quot;&gt;&lt;code&gt;SimpleNamespace&lt;/code&gt;&lt;/a&gt; class could be used to create new attributes with &lt;code&gt;setattr&lt;/code&gt;, or subclass &lt;code&gt;SimpleNamespace&lt;/code&gt; and create your own function to add new attribute names (variables).</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/library/types.html#types.SimpleNamespace&quot;&gt; &lt;code&gt;SimpleNamespace&lt;/code&gt; &lt;/a&gt;类可用于使用 &lt;code&gt;setattr&lt;/code&gt; 或 &lt;code&gt;SimpleNamespace&lt;/code&gt; 子类创建新属性，并创建自己的函数以添加新属性名称（变量）。</target>
        </trans-unit>
        <trans-unit id="441ab396ac9de093879ddabaadbb3fab730a2cd3" translate="yes" xml:space="preserve">
          <source>The coder is then left with a pile of named variables, with a coding effort of O(&lt;em&gt;m&lt;/em&gt; * &lt;em&gt;n&lt;/em&gt;), where &lt;em&gt;m&lt;/em&gt; is the number of named variables and &lt;em&gt;n&lt;/em&gt; is the number of times that group of variables needs to be accessed (including creation). The more astute beginner observes that the only difference in each of those lines is a number that changes based on a rule, and decides to use a loop. However, they get stuck on how to dynamically create those variable names, and may try something like this:</source>
          <target state="translated">然后，给编码器留下一堆命名变量，编码工作量为O（ &lt;em&gt;m&lt;/em&gt; * &lt;em&gt;n&lt;/em&gt; ），其中&lt;em&gt;m&lt;/em&gt;是命名变量的数量， &lt;em&gt;n&lt;/em&gt;是需要访问变量组（包括创建）的次数。 ）。 更加精明的初学者观察到，这些行中的每一行的唯一区别是根据规则而变化的数字，并决定使用循环。 但是，他们陷入了如何动态创建这些变量名的困境，并可能尝试执行以下操作：</target>
        </trans-unit>
        <trans-unit id="6cc4f6975b74fc18e12ef2a5b28bb88dc6368a2d" translate="yes" xml:space="preserve">
          <source>The consensus is to use a dictionary for this - see the other answers. This is a good idea for most cases, however, there are many aspects arising from this:</source>
          <target state="translated">大家的共识是用字典来做----见其他答案。这对大多数情况下是个好办法,但是,由此而产生的问题也有很多方面。</target>
        </trans-unit>
        <trans-unit id="5732d6a71cc900cd8992693021cb55e36f1df364" translate="yes" xml:space="preserve">
          <source>The following code defines Variables class, which adds variables (in this case attributes) to its instance during the construction. Variable names are taken from a specified list (which, for example, could have been generated by program code):</source>
          <target state="translated">下面的代码定义了Variables类,它在构造过程中向其实例添加变量(这里指的是属性)。变量名取自一个指定的列表(例如,可能是由程序代码生成的)。</target>
        </trans-unit>
        <trans-unit id="3c4500bc627597f72b477bf78ae14689fefc0f0a" translate="yes" xml:space="preserve">
          <source>The result in either case is a populated &lt;code&gt;list&lt;/code&gt;, with the first element accessed with &lt;code&gt;my_calculator.buttons[0]&lt;/code&gt;, the next with &lt;code&gt;my_calculator.buttons[1]&lt;/code&gt;, and so on. The &quot;base&quot; variable name becomes the name of the &lt;code&gt;list&lt;/code&gt; and the varying identifier is used to access it.</source>
          <target state="translated">无论哪种情况，结果都是填充 &lt;code&gt;list&lt;/code&gt; ，第一个元素通过 &lt;code&gt;my_calculator.buttons[0]&lt;/code&gt; 访问，第二个元素通过 &lt;code&gt;my_calculator.buttons[1]&lt;/code&gt; ，依此类推。 &amp;ldquo;基本&amp;rdquo;变量名称成为 &lt;code&gt;list&lt;/code&gt; 的名称，并且使用不同的标识符来访问它。</target>
        </trans-unit>
        <trans-unit id="eeae1384b2f94311d0148155d4105806167ce513" translate="yes" xml:space="preserve">
          <source>Then you can do:</source>
          <target state="translated">那么你可以做。</target>
        </trans-unit>
        <trans-unit id="3faa232d4f5186099e424ea2820d4a021fb7a7f8" translate="yes" xml:space="preserve">
          <source>They soon find that this does not work.</source>
          <target state="translated">很快,他们就发现这样做是行不通的。</target>
        </trans-unit>
        <trans-unit id="290d56ed9b233f779d04a7b929c7bc7fa6dfb2df" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;list&lt;/code&gt; can also be created in one line with a comprehension:</source>
          <target state="translated">也可以在一行内容中创建以下 &lt;code&gt;list&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="4ff57f7c33f548283912e68a98d7cf258ead89a5" translate="yes" xml:space="preserve">
          <source>This can be assembled as follows:</source>
          <target state="translated">可按以下方式进行组装:</target>
        </trans-unit>
        <trans-unit id="7213a70d2034e473881e812faf32408d6512ac9c" translate="yes" xml:space="preserve">
          <source>This way you won't accidentally overwrite previously existing variables (which is the security aspect) and you can have different &quot;namespaces&quot;.</source>
          <target state="translated">这样你就不会不小心覆盖了之前存在的变量(这是安全方面),你可以有不同的 &quot;命名空间&quot;。</target>
        </trans-unit>
        <trans-unit id="409561cf2b160a1c36717f3a6949ebae680daf2d" translate="yes" xml:space="preserve">
          <source>This will assign 'a' to all of these 10 variables, of course you can change the value dynamically as well. All of these variables can be accessed now like other globally declared variable:</source>
          <target state="translated">这将为所有这10个变量分配 &quot;a&quot;,当然你也可以动态地改变值。现在所有这些变量都可以像其他全局声明的变量一样访问。</target>
        </trans-unit>
        <trans-unit id="9e5295fa48a75da11bc0d9f16c465452c0fc49d7" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;globals()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;globals()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e331c614da5d177a4fc6ac78a5fb120a626e96e8" translate="yes" xml:space="preserve">
          <source>Use a &lt;code&gt;list&lt;/code&gt; for a sequence of similar objects, a &lt;code&gt;set&lt;/code&gt; for an arbitrarily-ordered bag of objects, or a &lt;code&gt;dict&lt;/code&gt; for a bag of names with associated values.</source>
          <target state="translated">为类似对象的序列使用 &lt;code&gt;list&lt;/code&gt; ，为任意排序的对象袋使用一 &lt;code&gt;set&lt;/code&gt; ，或为具有相关值的名称袋使用 &lt;code&gt;dict&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="edc0b7560962bcbf6f4322fa4e87eb0b37234292" translate="yes" xml:space="preserve">
          <source>Use the built-in &lt;a href=&quot;http://docs.python.org/library/functions.html#getattr&quot;&gt;&lt;code&gt;getattr&lt;/code&gt;&lt;/a&gt; function to get an attribute on an object by name.  Modify the name as needed.</source>
          <target state="translated">使用内置的&lt;a href=&quot;http://docs.python.org/library/functions.html#getattr&quot;&gt; &lt;code&gt;getattr&lt;/code&gt; &lt;/a&gt;函数可按名称获取对象的属性。 根据需要修改名称。</target>
        </trans-unit>
        <trans-unit id="6b6d13e412e862067defbbb2d6504aee2f2ddbd9" translate="yes" xml:space="preserve">
          <source>Whenever you want to use variable variables, it's probably better to use a dictionary. So instead of writing</source>
          <target state="translated">每当你想使用变量的时候,可能最好使用字典。所以,与其写</target>
        </trans-unit>
        <trans-unit id="2eebade0a74f50ac8f0f010afce8443b505c25b9" translate="yes" xml:space="preserve">
          <source>You can actually assign variables to global scope dynamically, for instance, if you want 10 variables that can be accessed on a global scope &lt;code&gt;i_1&lt;/code&gt;, &lt;code&gt;i_2&lt;/code&gt; ... &lt;code&gt;i_10&lt;/code&gt;:</source>
          <target state="translated">实际上，您可以动态地将变量分配给全局范围，例如，如果要在全局范围 &lt;code&gt;i_1&lt;/code&gt; ， &lt;code&gt;i_2&lt;/code&gt; ... &lt;code&gt;i_10&lt;/code&gt; 上访问10个变量：</target>
        </trans-unit>
        <trans-unit id="f8b81497c97d5403c47b7179fa6b3fe89dfa1591" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;https://docs.python.org/tutorial/datastructures.html#dictionaries&quot;&gt;dictionaries&lt;/a&gt; to accomplish this. Dictionaries are stores of keys and values.</source>
          <target state="translated">您可以使用&lt;a href=&quot;https://docs.python.org/tutorial/datastructures.html#dictionaries&quot;&gt;字典&lt;/a&gt;来完成此任务。 字典是键和值的存储。</target>
        </trans-unit>
        <trans-unit id="7d9bd4cc0b29bc2c2db7ecf717765fd1ce1a3e4d" translate="yes" xml:space="preserve">
          <source>You can use variable key names to achieve the effect of variable variables without the security risk.</source>
          <target state="translated">你可以使用可变的密钥名来实现变量的效果,不存在安全风险。</target>
        </trans-unit>
        <trans-unit id="bcf7295d6344e469700691e25ae0c18f64b983ec" translate="yes" xml:space="preserve">
          <source>You have to use &lt;a href=&quot;https://docs.python.org/2/library/functions.html#globals&quot;&gt;&lt;code&gt;globals()&lt;/code&gt; built in method&lt;/a&gt;  to achieve that behaviour:</source>
          <target state="translated">您必须使用&lt;a href=&quot;https://docs.python.org/2/library/functions.html#globals&quot;&gt;内置的 &lt;code&gt;globals()&lt;/code&gt; 方法&lt;/a&gt;来实现该行为：</target>
        </trans-unit>
        <trans-unit id="fdc9257befef940b959102b0145be8ce9eb50604" translate="yes" xml:space="preserve">
          <source>You will have this:</source>
          <target state="translated">你会有这个。</target>
        </trans-unit>
        <trans-unit id="428aa556b84407dd42722850e5ec94cb8472df75" translate="yes" xml:space="preserve">
          <source>You'd use &lt;a href=&quot;https://sourceforge.net/p/python-vvm/code/ci/master/tree/variableVariablesManager.py&quot;&gt;the class&lt;/a&gt; like this:</source>
          <target state="translated">您将使用此类：</target>
        </trans-unit>
        <trans-unit id="f9df9e6504db50770c7dec41c0e41bebfd97c019" translate="yes" xml:space="preserve">
          <source>a list may be more appropriate than a dict. A list represents an ordered sequence of objects, with integer indices:</source>
          <target state="translated">列表可能比dict更合适。列表代表了一个有序的对象序列,有整数索引。</target>
        </trans-unit>
        <trans-unit id="fb7f7c94028fe09a6d2d9b3bf0b8501eb7095619" translate="yes" xml:space="preserve">
          <source>etc.</source>
          <target state="translated">etc.</target>
        </trans-unit>
        <trans-unit id="1cd4904effad73686c1ae71e998a90fb306559c0" translate="yes" xml:space="preserve">
          <source>however, you are much more flexible, e.g.</source>
          <target state="translated">不过,你的灵活性要大得多,比如说</target>
        </trans-unit>
        <trans-unit id="99befabf4533023d4103df2842ce7d736d4c4095" translate="yes" xml:space="preserve">
          <source>if you want to rename a variable name, you'll have to do it manually</source>
          <target state="translated">如果你想重命名一个变量的名字,你必须手动完成</target>
        </trans-unit>
        <trans-unit id="2ad25a3ab907d0517e675911828c60750b4252e0" translate="yes" xml:space="preserve">
          <source>there's either no locality or globality for variable variables, it depends on the globality of the dictionary</source>
          <target state="translated">变量变量不是没有locality就是globality,这取决于字典的globality。</target>
        </trans-unit>
        <trans-unit id="630e51783416953ffc715ff70b006a8cccf423e0" translate="yes" xml:space="preserve">
          <source>to raise an exception on overwriting for different types</source>
          <target state="translated">对不同类型的重写时提出异常处理</target>
        </trans-unit>
        <trans-unit id="fe9f4907df588254f3f758e18069e1407ae365e1" translate="yes" xml:space="preserve">
          <source>you can decide to overwrite existing variables or  ...</source>
          <target state="translated">你可以决定覆盖现有的变量或.....。</target>
        </trans-unit>
        <trans-unit id="304747224cc19794b15e3d40426989c941348c0c" translate="yes" xml:space="preserve">
          <source>you write</source>
          <target state="translated">你写的</target>
        </trans-unit>
        <trans-unit id="afca87b48d68ef853ce2576d4755bf1bf7a01246" translate="yes" xml:space="preserve">
          <source>you'll yourself be responsible for this dictionary, including garbage collection (of in-dict variables) etc.</source>
          <target state="translated">你自己负责这个字典,包括垃圾收集(in-ict变量)等。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
