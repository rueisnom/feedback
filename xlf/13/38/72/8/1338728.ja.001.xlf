<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/1338728">
    <body>
      <group id="1338728">
        <trans-unit id="4b92db3c051e1421ad23f595e0b864d8a5eb9028" translate="yes" xml:space="preserve">
          <source>(note that this would also remove all uncommitted changes; use with care).</source>
          <target state="translated">(これはコミットされていない変更もすべて削除することに注意してください;注意して使用してください)。</target>
        </trans-unit>
        <trans-unit id="4d66258691d869e688c0d1ce20c8a6d85f3f6ed9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git checkout -b repair&lt;/code&gt; Create a new branch to work on.</source>
          <target state="translated">&lt;code&gt;git checkout -b repair&lt;/code&gt; 作業する新しいブランチを作成します。</target>
        </trans-unit>
        <trans-unit id="cc0a041da6998107b8f422c5ecdd2a6991c833cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git checkout b3d92c5&lt;/code&gt; Checkout the last usable commit.</source>
          <target state="translated">&lt;code&gt;git checkout b3d92c5&lt;/code&gt; 最後に使用可能なコミットをチェックアウトします。</target>
        </trans-unit>
        <trans-unit id="f58b8eb8c6bea1a4abfff7e2fa2fd6d4eea2d46b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git checkout master&lt;/code&gt; Checkout master.</source>
          <target state="translated">&lt;code&gt;git checkout master&lt;/code&gt; チェックアウトマスター。</target>
        </trans-unit>
        <trans-unit id="f15e563d231c47acefbd9580d8fb4931e1128c83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git cherry-pick 2c6a45b&lt;/code&gt; Run through commit 1.</source>
          <target state="translated">&lt;code&gt;git cherry-pick 2c6a45b&lt;/code&gt; コミット1を実行します。</target>
        </trans-unit>
        <trans-unit id="554d1cd55ccf7fd5dd6f20cc20ec676c1a516165" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git cherry-pick 77b9b82&lt;/code&gt; Run through commit 3.</source>
          <target state="translated">&lt;code&gt;git cherry-pick 77b9b82&lt;/code&gt; コミット3を実行します。</target>
        </trans-unit>
        <trans-unit id="6ed969f23e403fd1147715d25e47a7d950b421ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git merge repair&lt;/code&gt; Merge our new branch onto master.</source>
          <target state="translated">&lt;code&gt;git merge repair&lt;/code&gt; 新しいブランチをマスターにマージします。</target>
        </trans-unit>
        <trans-unit id="1fbccc102745b24ee753fc23ea7e04a8e56e518b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git push -f origin master&lt;/code&gt; Push master to the remote repo.</source>
          <target state="translated">&lt;code&gt;git push -f origin master&lt;/code&gt; マスターをリモートリポジトリにプッシュします。</target>
        </trans-unit>
        <trans-unit id="ce5fd19917054cca0118039fd5145c2aed7e62c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git rebase -i &amp;lt;SHA&amp;gt;&lt;/code&gt; then &lt;code&gt;d, drop = remove commit&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git rebase -i &amp;lt;SHA&amp;gt;&lt;/code&gt; 次に &lt;code&gt;d, drop = remove commit&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="84ad08b586243d597501c10ed40c455bc0ef53c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git rebase -i HEAD~&amp;lt;number of commits to go back&amp;gt;&lt;/code&gt;, so &lt;code&gt;git rebase -i HEAD~5&lt;/code&gt; if you want to see the last five commits.</source>
          <target state="translated">&lt;code&gt;git rebase -i HEAD~&amp;lt;number of commits to go back&amp;gt;&lt;/code&gt; なので、最後の5つのコミットを見たい場合は &lt;code&gt;git rebase -i HEAD~5&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6110a7a552be36804d2e897ff30ba9fba0e4d6e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset --hard 515b5220c50e3dfbb1063f23789d92ae1d3481a2&lt;/code&gt; //it back-up you to that commit (SHA1 ID of &lt;strong&gt;test change 4&lt;/strong&gt; commit is &lt;strong&gt;515b5220c50e3dfbb1063f23789d92ae1d3481a2&lt;/strong&gt;)</source>
          <target state="translated">&lt;code&gt;git reset --hard 515b5220c50e3dfbb1063f23789d92ae1d3481a2&lt;/code&gt; //そのコミットにバックアップします（ &lt;strong&gt;テスト変更4の&lt;/strong&gt; SHA1 IDコミットは&lt;strong&gt;515b5220c50e3dfbb1063f23789d92ae1d3481a2&lt;/strong&gt; ）</target>
        </trans-unit>
        <trans-unit id="c302cd2729880ee9adb4f39b42c71974525d6556" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset --hard HEAD&lt;/code&gt; did nothing, after checking the &lt;code&gt;reflog&lt;/code&gt;, the last and only &lt;code&gt;HEAD&lt;/code&gt; was the clone - Git wins.</source>
          <target state="translated">&lt;code&gt;git reset --hard HEAD&lt;/code&gt; は何もせず、 &lt;code&gt;reflog&lt;/code&gt; をチェックした後、最後で唯一の &lt;code&gt;HEAD&lt;/code&gt; がクローンでした-Gitが勝ちました。</target>
        </trans-unit>
        <trans-unit id="65bd7116511c0fc5e1b026f4f6de8cc5251d6c28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset --hard HEAD^&lt;/code&gt;  // To remove the last commit from git</source>
          <target state="translated">&lt;code&gt;git reset --hard HEAD^&lt;/code&gt; // gitから最後のコミットを削除するには</target>
        </trans-unit>
        <trans-unit id="eee048dfe8481e0e432511119986a2e6e4439857" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset --hard HEAD~1&lt;/code&gt; // it back-up you before one commit.</source>
          <target state="translated">&lt;code&gt;git reset --hard HEAD~1&lt;/code&gt; // 1つのコミットの前にバックアップします。</target>
        </trans-unit>
        <trans-unit id="df43558e6fcdc45b79eec16ab3918f9058dc0452" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset --hard b3d92c5&lt;/code&gt; Reset master to last usable commit.</source>
          <target state="translated">&lt;code&gt;git reset --hard b3d92c5&lt;/code&gt; マスターを最後の使用可能なコミットにリセットします。</target>
        </trans-unit>
        <trans-unit id="e071e0410fc5a9a852474de92fc2ce44d4484d6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Additively Change History&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;追加的に変更履歴&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bfda979ff53aa098e25ebd6adbc959213dfd764c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Alternative 1:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;代替1：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="da1d6c31b84914b16d8c82b7f81952a610dc1534" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Alternative 2:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;代替2：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="823817763684eacd218f2a670d4ed17902c1c5e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Alternative 3:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;代替3：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d49b14b1cd4650d48dddd898758d69fcb0cccbca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Careful:&lt;/strong&gt;&lt;code&gt;git reset --hard&lt;/code&gt;&lt;em&gt;WILL DELETE YOUR WORKING DIRECTORY CHANGES&lt;/em&gt;. Be sure to &lt;strong&gt;stash any local changes you want to keep&lt;/strong&gt; before running this command.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt; &lt;code&gt;git reset --hard&lt;/code&gt; は作業ディレクトリの変更を &lt;em&gt;削除し&lt;/em&gt;ます。 このコマンドを実行&lt;strong&gt;する&lt;/strong&gt;前に&lt;strong&gt;、保持したいローカルの変更&lt;/strong&gt;を&lt;strong&gt;隠しておいてください&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="8bc4f8569935adfd09345856a1757d198d1260cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not use the --hard&lt;/strong&gt; flag unless you want to destroy your work in progress since the last commit.</source>
          <target state="translated">最後のコミット以降に進行中の作業を破棄したくない場合を除いて&lt;strong&gt;、--hard&lt;/strong&gt;フラグを&lt;strong&gt;使用しないでください&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="b2e16c3d0ac5f55fa41f8954ea31ddce74bab961" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For example  your last  commit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;例えばあなたの最後のコミット&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f355d7997f9571abdeb599d74dffa72eb117c846" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Forcefully Change History&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;履歴を強制的に変更&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5fc0a7064847214666d4fbc9c01850f402b35de3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;However&lt;/strong&gt;, if others may have pulled it, then you would be better off starting a new branch.  Because when they pull, it will just merge it into their work, and you will get it pushed back up again.</source>
          <target state="translated">&lt;strong&gt;ただし&lt;/strong&gt; 、他の人がプルした可能性がある場合は、新しいブランチを開始することをお勧めします。 彼らが引っ張ったとき、それは彼らの仕事にそれをマージするだけなので、あなたはそれを再び押し上げることになるでしょう。</target>
        </trans-unit>
        <trans-unit id="102e9d3a053cbe193ad5aadd2237284dfdf09e7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I'm appending this answer because I don't see why anyone who has just tried to commit work would want to delete all that work because of some mistake using Git!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Gitの使用ミスにより、作業をコミットしようとしたばかりの人がすべての作業を削除する理由がわからないので、この回答を追加します。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7a144d31fdbb59147f96380723e8fe59f0d8dc33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If one or more of the commits is tagged, delete the tag(s) first.&lt;/strong&gt; Otherwise the tagged commit is not removed.</source>
          <target state="translated">&lt;strong&gt;1つ以上のコミットがタグ付けされている場合は、最初にタグを削除します。&lt;/strong&gt; それ以外の場合、タグ付きコミットは削除されません。</target>
        </trans-unit>
        <trans-unit id="267f535bafa2062fe7f1cc5c47b4dc046be2261f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Removing an entire commit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;コミット全体を削除する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c6b0c87e53ab5e1a1aa1757f8f61a440b5c2105c" translate="yes" xml:space="preserve">
          <source>After thinking &lt;code&gt;git reset --hard &amp;lt;SHA&amp;gt;&lt;/code&gt; had worked, I updated another branch to master and 1... 2... poof! the commit was back - Git wins.</source>
          <target state="translated">&lt;code&gt;git reset --hard &amp;lt;SHA&amp;gt;&lt;/code&gt; が機能したと思った後、別のブランチをmasterと1 ... 2 ...に更新しました。 コミットが戻ってきました-Gitが勝利しました。</target>
        </trans-unit>
        <trans-unit id="81466f23699e8691eafccf330632db08ef7f3469" translate="yes" xml:space="preserve">
          <source>All the commands above restore the state of your work tree and index as they were before making the commit, but do not restore the state of the repository. If you look at it, the &quot;removed&quot; commit is not actually removed, it is simply not the one on the tip of the current branch.</source>
          <target state="translated">上記のコマンドはすべて、作業ツリーやインデックスの状態をコミット前の状態に復元しますが、リポジトリの状態を復元するものではありません。見てみると、「削除された」コミットは実際には削除されておらず、単純に現在のブランチの先端にあるものではありません。</target>
        </trans-unit>
        <trans-unit id="b0a31a2991db503bf45da2505d24fac790378032" translate="yes" xml:space="preserve">
          <source>Another possibility is one of my personal favorite commands:</source>
          <target state="translated">もう一つの可能性としては、個人的に好きなコマンドの一つです。</target>
        </trans-unit>
        <trans-unit id="d5b2ded364518b9bbe3354018d3e9b9abd7c0e88" translate="yes" xml:space="preserve">
          <source>As you can see on above image i want to delete revert&quot;test change 2&quot; commit(SHA1 ID: &lt;strong&gt;015b5220c50e3dfbb1063f23789d92ae1d3481a2&lt;/strong&gt;(you can get SHA1 ID by using &lt;code&gt;gitk&lt;/code&gt; command in git bash)).</source>
          <target state="translated">上記の画像を見るとわかるように、revert &quot;test change 2&quot; commit（SHA1 ID： &lt;strong&gt;015b5220c50e3dfbb1063f23789d92ae1d3481a2&lt;/strong&gt; （git bashで &lt;code&gt;gitk&lt;/code&gt; コマンドを使用してSHA1 IDを取得できます）を削除したい）。</target>
        </trans-unit>
        <trans-unit id="6d33c17d47e5901787b7055709de852457aa698f" translate="yes" xml:space="preserve">
          <source>Assuming you are sitting on that commit, then this command will wack it...</source>
          <target state="translated">あなたがそのコミットに座っていると仮定すると、このコマンドはそれを破壊するでしょう...</target>
        </trans-unit>
        <trans-unit id="d1f704896e66cc5e62cd0bf64a834372ff4eeefe" translate="yes" xml:space="preserve">
          <source>Assuming you don't just want to delete the last commit, but you want to delete specific commits of the last n commits, go with:</source>
          <target state="translated">最後のコミットを削除したいだけではなく、最後のn回のコミットのうち特定のコミットを削除したい場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="2b7ec0a27be98d1eff7652f4789af7c6f8bbf4fc" translate="yes" xml:space="preserve">
          <source>Be careful with this though, because if you change something that you &lt;em&gt;have&lt;/em&gt; pushed elsewhere, another approach will be needed unless you are planning to do a force push.</source>
          <target state="translated">ただし、他の場所にプッシュしたものを変更した場合、強制プッシュを行う予定がない限り、別のアプローチが必要になるため、これには注意してください。</target>
        </trans-unit>
        <trans-unit id="c4829627a5bf1e018d5ff182570c84e24753c4ee" translate="yes" xml:space="preserve">
          <source>By &lt;code&gt;delete&lt;/code&gt;, I mean it is as if I didn't make that commit, and when I do a push in the future, my changes will not push to the remote branch.</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; とは、あたかもそのコミットを行わなかったかのようであり、将来的にプッシュを実行しても、変更がリモートブランチにプッシュされないことを意味します。</target>
        </trans-unit>
        <trans-unit id="a109c4c6d15b70f25adc62e372803842fdd9b7b2" translate="yes" xml:space="preserve">
          <source>Change YourCommitId for the number of the commit which you want to revert back to.</source>
          <target state="translated">戻したいコミットの番号にYourCommitIdを変更します。</target>
        </trans-unit>
        <trans-unit id="20933acd191fe84e954af4e111df5ddf77524155" translate="yes" xml:space="preserve">
          <source>Checking back out to master, time to try &lt;code&gt;git rebase -i &amp;lt;SHA&amp;gt;&lt;/code&gt;, then remove the line... to no avail, sad to say. &quot;&lt;em&gt;If you remove a line here THAT COMMIT WILL BE LOST&lt;/em&gt;&quot;. Ah...glossed over new feature &lt;em&gt;troll the n00b&lt;/em&gt; in the &lt;a href=&quot;https://www.dropbox.com/s/swukg8jqui0wc69/2.8.3.txt&quot;&gt;2.8.3 release notes&lt;/a&gt;.</source>
          <target state="translated">マスターに戻ってチェックアウトし、 &lt;code&gt;git rebase -i &amp;lt;SHA&amp;gt;&lt;/code&gt; を試してから、行を削除してください... 「 &lt;em&gt;ここで行を削除すると、そのコミットは失われます&lt;/em&gt; 」。 ああ... &lt;a href=&quot;https://www.dropbox.com/s/swukg8jqui0wc69/2.8.3.txt&quot;&gt;2.8.3リリースノートの&lt;/a&gt;新機能について&lt;em&gt;はn00bをご覧ください&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="985c2265c8fc21f04f4202af59fd7f9496062d5c" translate="yes" xml:space="preserve">
          <source>Checkout the branch you want to revert, then reset your local working copy back to the commit that you want to be the latest one on the remote server (everything after it will go bye-bye). To do this, in SourceTree I right-clicked on the and selected &quot;Reset BRANCHNAME to this commit&quot;. I think the command line is:</source>
          <target state="translated">戻したいブランチをチェックアウトして、ローカルの作業コピーをリモートサーバ上の最新のコミットにリセットします (それ以降はすべてバイバイします)。これを行うには、SourceTreeで右クリックして「このコミットにブランチ名をリセット」を選択しました。コマンドラインだと思います。</target>
        </trans-unit>
        <trans-unit id="1501dad19c952215680d5337162bbf7d77f0f856" translate="yes" xml:space="preserve">
          <source>Delete commits from a branch in Git</source>
          <target state="translated">Git でブランチからコミットを削除する</target>
        </trans-unit>
        <trans-unit id="d5288292067476ab19a14b904b49b343a8fbfbe9" translate="yes" xml:space="preserve">
          <source>Delete the last commit</source>
          <target state="translated">最後のコミットを削除する</target>
        </trans-unit>
        <trans-unit id="cfbfdb050621082eae60e284b13d1df8a93cd081" translate="yes" xml:space="preserve">
          <source>Determined to beat Git and preserve the original times, I deleted this local repository and re-cloned from the remote.</source>
          <target state="translated">Git を叩きのめして元の時間を保存しようと決意した私は、このローカルリポジトリを削除し、リモートから再クローニングしました。</target>
        </trans-unit>
        <trans-unit id="ba2205e4720b9c4875b2063795e768edc9f65654" translate="yes" xml:space="preserve">
          <source>Docs:
&lt;a href=&quot;http://git-scm.com/docs/git-commit.html&quot;&gt;http://git-scm.com/docs/git-commit.html&lt;/a&gt;</source>
          <target state="translated">Docs:
&lt;a href=&quot;http://git-scm.com/docs/git-commit.html&quot;&gt;http://git-scm.com/docs/git-commit.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="482252fa8b6026a7b480156441f6d58f4ba9fafb" translate="yes" xml:space="preserve">
          <source>Exhausting the options:</source>
          <target state="translated">オプションを使い果たす。</target>
        </trans-unit>
        <trans-unit id="d1b30321a67a8f34a339a84c1b5fad05da1ebaa9" translate="yes" xml:space="preserve">
          <source>FYI -- &lt;code&gt;git reset --hard HEAD&lt;/code&gt; is great if you want to get rid of WORK IN PROGRESS.  It will reset you back to the most recent commit, and erase all the changes in your working tree and index.</source>
          <target state="translated">FYI- &lt;code&gt;git reset --hard HEAD&lt;/code&gt; は、WORK IN PROGRESSを削除したい場合に最適です。 それはあなたを最新のコミットにリセットし、作業ツリーとインデックスのすべての変更を消去します。</target>
        </trans-unit>
        <trans-unit id="42bee27f352ee20ccde1028ba1bf775b9ac94daa" translate="yes" xml:space="preserve">
          <source>First reset the branch to the parent of the current commit</source>
          <target state="translated">最初にブランチを現在のコミットの親にリセットします。</target>
        </trans-unit>
        <trans-unit id="af9f98aaf43ec1375f9bc58d58816e48e4eefdf0" translate="yes" xml:space="preserve">
          <source>For particular commit, you want to reset is following</source>
          <target state="translated">特定のコミットをリセットしたい場合は、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="51c5fcfcfa3641e63c6c280da649bcc906af0b0d" translate="yes" xml:space="preserve">
          <source>For that i can use(all below command work on local only. you need to push after delete):</source>
          <target state="translated">そのためには、以下のコマンドを使用することができます(ローカルでのみ動作します。削除後にプッシュする必要があります)。</target>
        </trans-unit>
        <trans-unit id="05460aa43345a06bbc6ec3e0766b7a4e0c113223" translate="yes" xml:space="preserve">
          <source>Force push to origin</source>
          <target state="translated">原点への強制的なプッシュ</target>
        </trans-unit>
        <trans-unit id="9aeb9051871c7a92edee9dcf95ab0fa565db1da5" translate="yes" xml:space="preserve">
          <source>Force-push it to the remote.</source>
          <target state="translated">それをリモートに強制的にプッシュします。</target>
        </trans-unit>
        <trans-unit id="44afab30eb10c33911f37c56300b43abcdf0a5ec" translate="yes" xml:space="preserve">
          <source>Good day to you.</source>
          <target state="translated">ごきげんよう。</target>
        </trans-unit>
        <trans-unit id="5660456bd2342d41572b61d084667a86f2c38463" translate="yes" xml:space="preserve">
          <source>Here '2' is the number of commits you want to rebase.</source>
          <target state="translated">ここで '2' はリベースしたいコミット数です。</target>
        </trans-unit>
        <trans-unit id="88db40b7afb17b19823267284ee78d7675a1f99b" translate="yes" xml:space="preserve">
          <source>Here's another way to do this:</source>
          <target state="translated">別の方法をご紹介します。</target>
        </trans-unit>
        <trans-unit id="5b78e98e04fb956744bb28ffe75c6a82b9a8643e" translate="yes" xml:space="preserve">
          <source>I &lt;code&gt;git rebase -i --root&lt;/code&gt;'ed my branch, ignorantly thinking I could reword the first commit differing from the master (the &lt;em&gt;GitHub for Windows&lt;/em&gt; default view is the comparison to master, hiding it's entirety).</source>
          <target state="translated">私はブランチを &lt;code&gt;git rebase -i --root&lt;/code&gt; し、マスターとは異なる最初のコミットを書き換えることができると考え&lt;em&gt;ていました&lt;/em&gt; （ &lt;em&gt;GitHub for Windowsの&lt;/em&gt;デフォルトビューはマスターとの比較であり、全体を隠しています）。</target>
        </trans-unit>
        <trans-unit id="2e20cff6091dd4a880af140b6004fe0ebe00283b" translate="yes" xml:space="preserve">
          <source>I didn't wish to &lt;code&gt;git revert&lt;/code&gt; - it would create an additional commit, giving Git the upper hand.</source>
          <target state="translated">私は &lt;code&gt;git revert&lt;/code&gt; したくありませんでした-それは追加のコミットを作成し、Gitを優勢にします。</target>
        </trans-unit>
        <trans-unit id="9b59023fbb67854f01d98a0ef51c81c5894eb6a9" translate="yes" xml:space="preserve">
          <source>I don't recommend this option because you can lost your work in progress.</source>
          <target state="translated">作業中の作品が無くなってしまうこともあるので、あまりお勧めできません。</target>
        </trans-unit>
        <trans-unit id="6c9130bb59308d64b23913d997a9d183f2a1e46e" translate="yes" xml:space="preserve">
          <source>I grew a Silicon Valley beard while 900+ commits loaded themselves into Sublime. Exiting with no changes, I charged my battery then proceeded to shave, as all 900+ individual commits nonchalantly rebased - resetting their commit times to now.</source>
          <target state="translated">900人以上のコミット者がSublimeにロードしている間、私はシリコンバレーの髭を生やしました。何も変更せずに終了した後、私はバッテリーを充電してから髭を剃り始めました。900人以上の個々のコミットが淡々とリベースしていたので、コミット時間を今にリセットしました。</target>
        </trans-unit>
        <trans-unit id="7d07e5f7968a37231c185b24027cff07a1a00418" translate="yes" xml:space="preserve">
          <source>I have already pushed. Need to return some commits back remotly.
Have tried many variations, 
but only &lt;a href=&quot;https://stackoverflow.com/a/41927515/6352712&quot;&gt;this&lt;/a&gt; from &lt;a href=&quot;https://stackoverflow.com/users/425964/justin&quot;&gt;Justin&lt;/a&gt; via git bush is working fine for me:</source>
          <target state="translated">もう押しました。 一部のコミットをリモートで返す必要があります。 多くのバリエーションを試しましたが、私にとっては、 &lt;a href=&quot;https://stackoverflow.com/users/425964/justin&quot;&gt;Justin&lt;/a&gt;からgit bushを介して&lt;a href=&quot;https://stackoverflow.com/a/41927515/6352712&quot;&gt;これ&lt;/a&gt;だけがうまくいきます</target>
        </trans-unit>
        <trans-unit id="8c2ad913b00d698cd501b1274ea40f311d53f466" translate="yes" xml:space="preserve">
          <source>I read git help, and I think the command I should use is &lt;code&gt;git reset --hard HEAD&lt;/code&gt;.  Is this correct?</source>
          <target state="translated">私はgitのヘルプを読み、使用する必要があるコマンドは &lt;code&gt;git reset --hard HEAD&lt;/code&gt; だと思います。 これは正しいです？</target>
        </trans-unit>
        <trans-unit id="1f41015da060e52bc94556b3266212aff73b498d" translate="yes" xml:space="preserve">
          <source>I think that there are no means to remove a commit with &lt;a href=&quot;http://git-scm.com/book/ch9-1.html&quot;&gt;porcelain commands&lt;/a&gt;. The only way is to remove it from the log and reflog and then to execute a &lt;code&gt;git prune --expire -now&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://git-scm.com/book/ch9-1.html&quot;&gt;磁器のコマンドで&lt;/a&gt;コミットを削除する方法はないと思います 。 唯一の方法は、ログとreflogから削除し、次に &lt;code&gt;git prune --expire -now&lt;/code&gt; を実行することです。</target>
        </trans-unit>
        <trans-unit id="cfcd243fcaee3b80f71f49eee86f1b93195df385" translate="yes" xml:space="preserve">
          <source>I would like to know how to delete a commit.</source>
          <target state="translated">コミットの削除方法を知りたいです。</target>
        </trans-unit>
        <trans-unit id="96a571367d9898610f47cd20328876141d8b243f" translate="yes" xml:space="preserve">
          <source>If you already published to-be-deleted commit, use &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-revert.html&quot;&gt;git revert&lt;/a&gt;</source>
          <target state="translated">削除予定のコミットをすでに公開している場合は、 &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-revert.html&quot;&gt;git revertを&lt;/a&gt;使用してください</target>
        </trans-unit>
        <trans-unit id="8dbbfe77bb076a97a774b516e7a0174e822682a7" translate="yes" xml:space="preserve">
          <source>If you already pushed it, you will need to do a force push to get rid of it...</source>
          <target state="translated">すでに押してしまった場合は、力押しをしないと始末に負えません...。</target>
        </trans-unit>
        <trans-unit id="5f07f69ee2b374010d7f438229e6cab7e9178928" translate="yes" xml:space="preserve">
          <source>If you already pushed, it may be better to use &lt;code&gt;git revert&lt;/code&gt;, to create a &quot;mirror image&quot; commit that will undo the changes.  However, both commits will be in the log.</source>
          <target state="translated">すでにプッシュしている場合は、 &lt;code&gt;git revert&lt;/code&gt; を使用して、変更を元に戻す「ミラーイメージ」コミットを作成することをお勧めします。 ただし、両方のコミットはログに記録されます。</target>
        </trans-unit>
        <trans-unit id="9ca680c57e79eebe8faffd40434ec200390d75eb" translate="yes" xml:space="preserve">
          <source>If you didn't publish changes, to remove latest commit, you can do</source>
          <target state="translated">変更を公開していない場合、最新のコミットを削除するには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="d0d81f5f4aa174a01caed9744d7ae3997de0bc6c" translate="yes" xml:space="preserve">
          <source>If you have newly staged changes they'll be combined with the last commit (that you're trying to get rid of) and will replace that commit.</source>
          <target state="translated">新たにステージングされた変更がある場合、それらは最後のコミット (削除しようとしているコミット)と結合され、そのコミットに置き換わります。</target>
        </trans-unit>
        <trans-unit id="6596b4ac72d240b0ed2aa62ebeda6c452c1506fe" translate="yes" xml:space="preserve">
          <source>If you have not yet pushed the commit anywhere, you can use &lt;a href=&quot;http://git-scm.com/docs/git-rebase&quot;&gt;&lt;code&gt;git rebase -i&lt;/code&gt;&lt;/a&gt; to remove that commit. First, find out how far back that commit is (approximately). Then do:</source>
          <target state="translated">まだコミットをどこにもプッシュしていない場合は、 &lt;a href=&quot;http://git-scm.com/docs/git-rebase&quot;&gt; &lt;code&gt;git rebase -i&lt;/code&gt; &lt;/a&gt;を使用してそのコミットを削除できます。 最初に、そのコミットが（およそ）どれだけ遡っているかを調べます。 次に行います：</target>
        </trans-unit>
        <trans-unit id="44e3e3f8146c430375da4ee5925227356f44dc40" translate="yes" xml:space="preserve">
          <source>If you just messed up your last commit (wrong message, forgot to add some changes) and want to fix it before pushing it to a public repo why not use:</source>
          <target state="translated">前回のコミットで失敗してしまって(メッセージが間違っていて、変更を追加するのを忘れていた)、公開レポにプッシュする前に修正したい場合は、以下のようにしてみてはいかがでしょうか。</target>
        </trans-unit>
        <trans-unit id="40e1570206d278903e87bb0fcce50d747d648271" translate="yes" xml:space="preserve">
          <source>If you want to fix up your latest commit, you can undo the commit, and unstage the files in it, by doing:</source>
          <target state="translated">最新のコミットを修正したい場合は、コミットを元に戻して、その中のファイルをアンステージすることができます。</target>
        </trans-unit>
        <trans-unit id="c32e117464727f0450f94b5cd20d85260abcabf9" translate="yes" xml:space="preserve">
          <source>If you want to get rid of your latest commit, and do not want to keep the code changes, you can do a &quot;hard&quot; reset.</source>
          <target state="translated">最新のコミットを削除したい場合、コードの変更を維持したくない場合は、「ハード」リセットを行うことができます。</target>
        </trans-unit>
        <trans-unit id="68f21e507db554f3b7a22808df6f609e9a72b5df" translate="yes" xml:space="preserve">
          <source>If you want to keep the history, showing the commit and the revert, you should use:</source>
          <target state="translated">コミットとリバートを表示した履歴を保持したい場合は、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="87a8f8872c341d5920414f07785aad472c8d093b" translate="yes" xml:space="preserve">
          <source>If you want to keep your changes , and remove recent commits</source>
          <target state="translated">変更を維持し、最近のコミットを削除したい場合は</target>
        </trans-unit>
        <trans-unit id="8c8bfe5072413014db38c85be5dce3bc7e9daaf5" translate="yes" xml:space="preserve">
          <source>If you want to keep your work and just 'undo' that commit command (you caught before pushing to repo):</source>
          <target state="translated">もし、あなたの作業をそのままにしておきたい場合は、コミットコマンドを「元に戻す」だけでいいでしょう (repo にプッシュする前にキャッチした)。</target>
        </trans-unit>
        <trans-unit id="e6f5eba4582d5bcee12bca1ae8b4787e484c1768" translate="yes" xml:space="preserve">
          <source>If you want to uncommit N commits, but keep the code changes in your working directory:</source>
          <target state="translated">N回のコミットをアンコミットしたいが、コードの変更は作業ディレクトリに残しておきたい場合。</target>
        </trans-unit>
        <trans-unit id="03d853e9fff6c7aee87d2ac84282fbe4e68e5784" translate="yes" xml:space="preserve">
          <source>If you've already pushed, first find the commit you want to be at HEAD &lt;em&gt;($GIT_COMMIT_HASH_HERE)&lt;/em&gt;, then run the following:</source>
          <target state="translated">すでにプッシュしている場合は、まずHEAD &lt;em&gt;（$ GIT_COMMIT_HASH_HERE）に&lt;/em&gt;したいコミットを見つけてから、次の&lt;em&gt;コマンド&lt;/em&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="d24215566781e2696f7f247fac57197b8e0de6fb" translate="yes" xml:space="preserve">
          <source>In my case, my magic code for this pupose is this one:</source>
          <target state="translated">私の場合、このプポーズのマジックコードはこれです。</target>
        </trans-unit>
        <trans-unit id="f0dba4d1c4b202c5ee3e3e686a01d606a7437de1" translate="yes" xml:space="preserve">
          <source>Lastly, if you need to find a commit that you &quot;deleted&quot;, it is typically present in &lt;code&gt;git reflog&lt;/code&gt; unless you have garbage collected your repository.</source>
          <target state="translated">最後に、「削除」したコミットを見つける必要がある場合、リポジトリをガベージコレクションしていない限り、通常は &lt;code&gt;git reflog&lt;/code&gt; に存在します。</target>
        </trans-unit>
        <trans-unit id="e9cd9f6a58ba27481ffff39cc43119f0d5e65dd2" translate="yes" xml:space="preserve">
          <source>Likewise, if you want to discard the last N commits, and do not want to keep the code changes:</source>
          <target state="translated">同様に、最後の N 回のコミットを破棄し、コードの変更を残したくない場合も同様です。</target>
        </trans-unit>
        <trans-unit id="745b91d049d82bd095df62bde9f98633b90f4e8c" translate="yes" xml:space="preserve">
          <source>Note: &lt;strong&gt;You need to have admin rights over the repo&lt;/strong&gt; since you are using &lt;code&gt;--hard&lt;/code&gt; and &lt;code&gt;-f&lt;/code&gt;.</source>
          <target state="translated">注：-- &lt;code&gt;--hard&lt;/code&gt; と &lt;code&gt;-f&lt;/code&gt; を使用しているため&lt;strong&gt;、リポジトリに対する管理者権限が必要&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="a474912ab0caa8c6bc8338cc8e30575ef75e301f" translate="yes" xml:space="preserve">
          <source>Now it had re-added a most recent unneeded commit to master I wished to remove, so proceeded like so.</source>
          <target state="translated">これで、削除したいマスターに最新の不要なコミットを再追加していたので、そのように進めました。</target>
        </trans-unit>
        <trans-unit id="ae9e14aa8bb8834d2e265c5824898ea78b888b59" translate="yes" xml:space="preserve">
          <source>Now you want to delete this commit then an Easy way to do this following</source>
          <target state="translated">このコミットを削除したい場合は、次のような簡単な方法があります。</target>
        </trans-unit>
        <trans-unit id="953810e2426fca2698e571670180a9ecf83be959" translate="yes" xml:space="preserve">
          <source>Obviously replace &quot;SHA&quot; with the reference you want to get rid of. The &quot;^&quot; in that command is literal.</source>
          <target state="translated">明らかに &quot;SHA&quot; を削除したい参照に置き換えてください。そのコマンドの &quot;^&quot; はリテラルです。</target>
        </trans-unit>
        <trans-unit id="6060a8ba587122239361c1b3752e10cbb1237ea2" translate="yes" xml:space="preserve">
          <source>Of course if you amend a commit after you've pushed it, you're rewriting history so if you do that be sure to understand the implications.</source>
          <target state="translated">もちろん、プッシュした後にコミットを修正する場合は履歴を書き換えることになるので、その意味合いを理解しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="b35e70c607d6e4773828839da8a4ddf1a611d431" translate="yes" xml:space="preserve">
          <source>Or, you could look at the output of &lt;code&gt;git log&lt;/code&gt;, find the commit id of the commit you want to back up to, and then do this:</source>
          <target state="translated">または、 &lt;code&gt;git log&lt;/code&gt; の出力を確認し、バックアップするコミットのコミットIDを見つけて、次のようにすることもできます。</target>
        </trans-unit>
        <trans-unit id="5e0feea6b064c5e1d9ee6b932b0af838d9a11bbf" translate="yes" xml:space="preserve">
          <source>PS: CommitId refers the one which you want to revert back to</source>
          <target state="translated">PS:CommitId は元に戻したいものを指します。</target>
        </trans-unit>
        <trans-unit id="0066fef5eabf90f9eda22966ce542417a292a5e3" translate="yes" xml:space="preserve">
          <source>Reference: &lt;a href=&quot;https://ncona.com/2011/07/how-to-delete-a-commit-in-git-local-and-remote/&quot;&gt;How to delete a commit in git, local and remote&lt;/a&gt;</source>
          <target state="translated">リファレンス： &lt;a href=&quot;https://ncona.com/2011/07/how-to-delete-a-commit-in-git-local-and-remote/&quot;&gt;git、ローカル、リモートでコミットを削除する方法&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a38c53ffb5c282ba793e916879e175c8a183753f" translate="yes" xml:space="preserve">
          <source>Reset on local branch</source>
          <target state="translated">ローカルブランチのリセット</target>
        </trans-unit>
        <trans-unit id="f531bce04c421096a7c9624ebdf7459ce4c4989a" translate="yes" xml:space="preserve">
          <source>Say we want to remove commits 2 &amp;amp; 4 from the repo.</source>
          <target state="translated">リポジトリからコミット2と4を削除したいとします。</target>
        </trans-unit>
        <trans-unit id="e1905f336b926873eafad9091e256f8012bc4da6" translate="yes" xml:space="preserve">
          <source>Since you just checked out your branch from remote, you're not going to have any local changes to worry about losing. But this would lose them if you did.</source>
          <target state="translated">リモートからブランチをチェックアウトしただけなので、ローカルの変更を失う心配はありません。しかし、これでは紛失してしまいます。</target>
        </trans-unit>
        <trans-unit id="257b9b08a37fd673e243e933ff17b8c88000b929" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;https://gist.github.com/sagarjethi/c07723b2f4fa74ad8bdf229166cf79d8&quot;&gt;https://gist.github.com/sagarjethi/c07723b2f4fa74ad8bdf229166cf79d8&lt;/a&gt;</source>
          <target state="translated">出典： &lt;a href=&quot;https://gist.github.com/sagarjethi/c07723b2f4fa74ad8bdf229166cf79d8&quot;&gt;https&lt;/a&gt; : //gist.github.com/sagarjethi/c07723b2f4fa74ad8bdf229166cf79d8</target>
        </trans-unit>
        <trans-unit id="cdde4f20ba31a24db2cc7ae71135c8353631907b" translate="yes" xml:space="preserve">
          <source>Steps</source>
          <target state="translated">Steps</target>
        </trans-unit>
        <trans-unit id="58c53edf5f4bb3ba6e15b6687d6604d277815434" translate="yes" xml:space="preserve">
          <source>Take backup of your code in to temp folder. Following command will reset same as server.</source>
          <target state="translated">tempフォルダにコードのバックアップを取ってください。以下のコマンドを実行すると、サーバと同じようにリセットされます。</target>
        </trans-unit>
        <trans-unit id="14f22d4e6824c3b684660bd71774043dba5eb8ea" translate="yes" xml:space="preserve">
          <source>Test it and tell me. I have tried a few different ones, but this one was the only that helped me.</source>
          <target state="translated">試してみて教えて いくつか試してみましたが、これだけは効果がありました。</target>
        </trans-unit>
        <trans-unit id="33e692e2551ca39d58666652cf0cea9528957f81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HEAD~1&lt;/code&gt; means the commit before head.</source>
          <target state="translated">&lt;code&gt;HEAD~1&lt;/code&gt; は、head before beforeコミットを意味します。</target>
        </trans-unit>
        <trans-unit id="67c69d80b3797000a83f9fa877c8ff4eb0653030" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~N&lt;/code&gt; means rebase the last &lt;code&gt;N&lt;/code&gt; commits (&lt;code&gt;N&lt;/code&gt; must be a number, for example &lt;code&gt;HEAD~10&lt;/code&gt;). Then, you can edit the file that Git presents to you to delete the offending commit. On saving that file, Git will then rewrite all the following commits as if the one you deleted didn't exist.</source>
          <target state="translated">〜Nは、最後の &lt;code&gt;N&lt;/code&gt; 回のコミットをリベースすることを意味します（ &lt;code&gt;~N&lt;/code&gt; はHEAD〜10などの数値でなければなりません）。 次に、Gitが提示するファイルを編集して、問題のコミットを削除できます。 そのファイルを保存すると、Gitは次のすべてのコミットを、削除したコミットが存在しないかのように書き換えます。</target>
        </trans-unit>
        <trans-unit id="c9ad62906f0511afd79d671adfae9e83a883953f" translate="yes" xml:space="preserve">
          <source>The Git Book has a good &lt;a href=&quot;http://git-scm.com/book/en/Git-Branching-Rebasing&quot;&gt;section on rebasing&lt;/a&gt; with pictures and examples.</source>
          <target state="translated">Git Bookには、写真と例を使っ&lt;a href=&quot;http://git-scm.com/book/en/Git-Branching-Rebasing&quot;&gt;たリベースに関する&lt;/a&gt;優れたセクションがあります。</target>
        </trans-unit>
        <trans-unit id="c9e118ff0c6703e901391e677dd298a0e7bd733f" translate="yes" xml:space="preserve">
          <source>The mistake:</source>
          <target state="translated">勘違いしています。</target>
        </trans-unit>
        <trans-unit id="df7e72c4e856ebdeb027f94638db8e9c29d13a3b" translate="yes" xml:space="preserve">
          <source>The solution:</source>
          <target state="translated">その解決策。</target>
        </trans-unit>
        <trans-unit id="5c1a0b46dd2a77265585885a3310d98ffc47632b" translate="yes" xml:space="preserve">
          <source>Then each place the repo has been cloned, run:</source>
          <target state="translated">そして、レポがクローンされた場所ごとに実行します。</target>
        </trans-unit>
        <trans-unit id="516a65a8d341e713504da0b68d69ea30f2df23ad" translate="yes" xml:space="preserve">
          <source>Then in the text editor change the word &lt;code&gt;pick&lt;/code&gt; to &lt;code&gt;drop&lt;/code&gt; next to every commit you would like to remove. Save and quit the editor. Voila!</source>
          <target state="translated">次に、テキストエディタで、 &lt;code&gt;drop&lt;/code&gt; するすべてのコミットの横にある &lt;code&gt;pick&lt;/code&gt; という単語をdropに変更します。 エディターを保存して終了します。 出来上がり！</target>
        </trans-unit>
        <trans-unit id="57bc2c81ed066050c0080e31433ade12c1fafb8c" translate="yes" xml:space="preserve">
          <source>Then navigate to your repository's local directory and run this command:</source>
          <target state="translated">次に、リポジトリのローカルディレクトリに移動し、このコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="b099ac28c4326ac570f4d9c1956512f65cc8f977" translate="yes" xml:space="preserve">
          <source>Then you will be able to choose one of these options.</source>
          <target state="translated">そうすると、これらの選択肢の中から1つを選ぶことができるようになります。</target>
        </trans-unit>
        <trans-unit id="dd2c142717faff37fd8bb94acc2747332ff26df0" translate="yes" xml:space="preserve">
          <source>These lines can be re-ordered; they are executed from top to bottom.
 If you remove a line here THAT COMMIT WILL BE LOST.
 However, if you remove everything, the rebase will be aborted.
 Note that empty commits are commented out</source>
          <target state="translated">これらの行は、上から下に向かって実行されます。ここで行を削除すると、コミットは失われます。しかし、すべての行を削除した場合、リベースは中止されます。空のコミットはコメントアウトされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1c68f6f7024438aa3046a481d2c1addaf9440e70" translate="yes" xml:space="preserve">
          <source>This will erase all commits after the current one in your local repository but only for that one branch.</source>
          <target state="translated">これは、ローカルリポジトリ内の現在のコミット以降のコミットをすべて消去しますが、そのブランチのみを対象とします。</target>
        </trans-unit>
        <trans-unit id="d502420e26f879a1469087bb42f5c742bb32479b" translate="yes" xml:space="preserve">
          <source>This will return your repository to its state before the git add commands that staged the files. Your changes will be in your working directory. HEAD~1 refers to the commit below the current tip of the branch.</source>
          <target state="translated">これで、ファイルをステージングした git add コマンドを実行する前の状態にリポジトリが戻ります。変更内容は作業ディレクトリに保存されます。HEAD~1 は、現在のブランチの先端より下のコミットを指します。</target>
        </trans-unit>
        <trans-unit id="f4900beac84b86412a7d07e64c8e44534ecb3c2e" translate="yes" xml:space="preserve">
          <source>This will start the rebase in interactive mode &lt;code&gt;-i&lt;/code&gt; at the point just before the commit you want to whack. The editor will start up listing all of the commits since then. Delete the line containing the commit you want to obliterate and save the file. Rebase will do the rest of the work, deleting only that commit, and replaying all of the others back into the log.</source>
          <target state="translated">これにより、インタラクティブモード &lt;code&gt;-i&lt;/code&gt; でリベースが開始されます。 その後、エディターはすべてのコミットのリストを表示し始めます。 消去するコミットを含む行を削除して、ファイルを保存します。 リベースは残りの作業を行い、そのコミットのみを削除し、その他すべてをログに再生します。</target>
        </trans-unit>
        <trans-unit id="30fb09222b0f7ce00eb0523b723c5e3ee83290ef" translate="yes" xml:space="preserve">
          <source>To delete in a remote branch, use</source>
          <target state="translated">リモートブランチで削除するには</target>
        </trans-unit>
        <trans-unit id="701868dd44030892fc04d71748a312bb7139bcc4" translate="yes" xml:space="preserve">
          <source>To delete in local branch, use</source>
          <target state="translated">ローカルブランチで削除するには</target>
        </trans-unit>
        <trans-unit id="39365a8d6dab7b0a2f600f4608fd40e8fb368108" translate="yes" xml:space="preserve">
          <source>To get the most recent SHA, I checked the remote repository on github.com - minor win.</source>
          <target state="translated">最新のSHAを取得するために、私はgithub.com上のリモートリポジトリをチェックしました-マイナーウィン。</target>
        </trans-unit>
        <trans-unit id="ef1eb937d57e41d2e2093fa3da5c3197276eb45f" translate="yes" xml:space="preserve">
          <source>To verify, I checked out to another branch, and voila - no hiding commit to fetch/pull from the master.</source>
          <target state="translated">確認のために、別のブランチにチェックアウトしてみましたが、マスターからの fetchpull への非表示コミットはありませんでした。</target>
        </trans-unit>
        <trans-unit id="889cb33078f93d7d9254fd399e6526d844221110" translate="yes" xml:space="preserve">
          <source>Try &lt;code&gt;git revert &amp;lt;commit hash&amp;gt;&lt;/code&gt;. &lt;a href=&quot;https://www.atlassian.com/git/tutorials/undoing-changes/git-revert&quot;&gt;Revert&lt;/a&gt; will create a &lt;em&gt;new&lt;/em&gt; commit that undoes the specified commit.</source>
          <target state="translated">&lt;code&gt;git revert &amp;lt;commit hash&amp;gt;&lt;/code&gt; を試してください。 &lt;a href=&quot;https://www.atlassian.com/git/tutorials/undoing-changes/git-revert&quot;&gt;Revert&lt;/a&gt;は、指定されたコミットを取り消す&lt;em&gt;新しい&lt;/em&gt;コミットを作成します。</target>
        </trans-unit>
        <trans-unit id="19d02bc12c1e811c9be9a24fe184d2d6c6e700a3" translate="yes" xml:space="preserve">
          <source>What I do usually when I commit and push (if anyone pushed his commit this solve the problem):</source>
          <target state="translated">私は通常、私がコミットしてプッシュするときに何をするか(誰もが彼のコミットをプッシュした場合、これは問題を解決します)。</target>
        </trans-unit>
        <trans-unit id="2a70b7832ea9f846685043972515efa0bdb8f748" translate="yes" xml:space="preserve">
          <source>When you issue &lt;code&gt;git log&lt;/code&gt; you'll see both the &quot;wrong&quot; commit and revert log messages.</source>
          <target state="translated">&lt;code&gt;git log&lt;/code&gt; を発行すると、「間違った」コミットメッセージと元に戻すログメッセージの両方が表示されます。</target>
        </trans-unit>
        <trans-unit id="03923623bf2bef6b881c7670f54c3f6df241fa11" translate="yes" xml:space="preserve">
          <source>You can also pass the '--no-edit' option instead of '-m' if you would prefer to use the previous commit's message.</source>
          <target state="translated">前のコミットのメッセージを使いたい場合は、'-m' の代わりに '--no-edit' オプションを渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="9c9a202954ee7cae9dd55fa60d9beb9f7c9033b3" translate="yes" xml:space="preserve">
          <source>You can keep your work and only undo the commit.</source>
          <target state="translated">自分の仕事はそのままにして、コミットを元に戻すだけでOKです。</target>
        </trans-unit>
        <trans-unit id="93b39e19f453fced94de248d0efbd662da9694e6" translate="yes" xml:space="preserve">
          <source>You can simply remove that commit using option &quot;d&quot; or Removing a line that has your commit.</source>
          <target state="translated">そのコミットを削除するには、オプション &quot;d&quot; を使うか、そのコミットがある行を削除します。</target>
        </trans-unit>
        <trans-unit id="54dc32946de529fdad9d8c6bca91633f24297121" translate="yes" xml:space="preserve">
          <source>You have many alternatives, for example:</source>
          <target state="translated">例えば、たくさんの選択肢がありますよね。</target>
        </trans-unit>
        <trans-unit id="fb5936a817bd4c6ea21a209ba29761c28ac16ecd" translate="yes" xml:space="preserve">
          <source>You will be now at previous head. Pull the branch. Push new code. Commit will be removed from git</source>
          <target state="translated">前の頭になります。枝を引っ張って 新しいコードをプッシュします。コミットはgitから削除されます。</target>
        </trans-unit>
        <trans-unit id="1a586f7ddbd3e680eded7fab979c565199ef8b24" translate="yes" xml:space="preserve">
          <source>after delete:</source>
          <target state="translated">を削除した後に</target>
        </trans-unit>
        <trans-unit id="f0c68644aad61f3f96935569eed5547ae4b983ba" translate="yes" xml:space="preserve">
          <source>enter the message explaining why are you reverting and then:</source>
          <target state="translated">を入力して、なぜ戻しているのかを説明するメッセージを入力します。</target>
        </trans-unit>
        <trans-unit id="ddb31e750e6c1c908dfac98ac2f2ecf6698b4d20" translate="yes" xml:space="preserve">
          <source>git push origin +aa61ab32^:master</source>
          <target state="translated">git push origin +aa61ab32^:master</target>
        </trans-unit>
        <trans-unit id="103c1fac527e557fea4472b037eddbdd31cbda77" translate="yes" xml:space="preserve">
          <source>git push origin HEAD --force</source>
          <target state="translated">git push origin HEAD --force</target>
        </trans-unit>
        <trans-unit id="cf136d60baf6dbfd88ddc6f362f5619f4ffa9281" translate="yes" xml:space="preserve">
          <source>git reset --hard</source>
          <target state="translated">git reset --hard</target>
        </trans-unit>
        <trans-unit id="0a2ffabb6c1b23361a8f6cd6fc1a09fea3dc19d6" translate="yes" xml:space="preserve">
          <source>hope this help</source>
          <target state="translated">お役に立てれば幸いです</target>
        </trans-unit>
        <trans-unit id="caa1f6c46e6e29f9f4a967617d593bff1ebd8b86" translate="yes" xml:space="preserve">
          <source>if you want to rebase all the commits.</source>
          <target state="translated">すべてのコミットをリベースしたい場合は</target>
        </trans-unit>
        <trans-unit id="f569834b9f4ecb47276ea40f8ab2653abae05051" translate="yes" xml:space="preserve">
          <source>use git revert  &lt;a href=&quot;https://git-scm.com/docs/git-revert&quot;&gt;https://git-scm.com/docs/git-revert&lt;/a&gt; .It will revert all code then you can do next commit.Then head will point to that last commit. reverted commits never delete but it will not affect on you last commit.</source>
          <target state="translated">git revert &lt;a href=&quot;https://git-scm.com/docs/git-revert&quot;&gt;https://git-scm.com/docs/git-revertを&lt;/a&gt;使用してください 。すべてのコードが元に戻され、次のコミットを実行できます。その後、headはその最後のコミットをポイントします。 元に戻されたコミットは削除されませんが、最後のコミットには影響しません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
