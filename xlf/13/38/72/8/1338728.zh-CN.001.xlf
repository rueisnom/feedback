<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/1338728">
    <body>
      <group id="1338728">
        <trans-unit id="4b92db3c051e1421ad23f595e0b864d8a5eb9028" translate="yes" xml:space="preserve">
          <source>(note that this would also remove all uncommitted changes; use with care).</source>
          <target state="translated">(注意,这也将删除所有未承诺的更改;使用时要谨慎)。)</target>
        </trans-unit>
        <trans-unit id="4d66258691d869e688c0d1ce20c8a6d85f3f6ed9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git checkout -b repair&lt;/code&gt; Create a new branch to work on.</source>
          <target state="translated">&lt;code&gt;git checkout -b repair&lt;/code&gt; 创建一个新分支进行处理。</target>
        </trans-unit>
        <trans-unit id="cc0a041da6998107b8f422c5ecdd2a6991c833cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git checkout b3d92c5&lt;/code&gt; Checkout the last usable commit.</source>
          <target state="translated">&lt;code&gt;git checkout b3d92c5&lt;/code&gt; 检出最后一个可用的提交。</target>
        </trans-unit>
        <trans-unit id="f58b8eb8c6bea1a4abfff7e2fa2fd6d4eea2d46b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git checkout master&lt;/code&gt; Checkout master.</source>
          <target state="translated">&lt;code&gt;git checkout master&lt;/code&gt; 结帐大师。</target>
        </trans-unit>
        <trans-unit id="f15e563d231c47acefbd9580d8fb4931e1128c83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git cherry-pick 2c6a45b&lt;/code&gt; Run through commit 1.</source>
          <target state="translated">&lt;code&gt;git cherry-pick 2c6a45b&lt;/code&gt; 运行提交1。</target>
        </trans-unit>
        <trans-unit id="554d1cd55ccf7fd5dd6f20cc20ec676c1a516165" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git cherry-pick 77b9b82&lt;/code&gt; Run through commit 3.</source>
          <target state="translated">&lt;code&gt;git cherry-pick 77b9b82&lt;/code&gt; 运行提交3。</target>
        </trans-unit>
        <trans-unit id="6ed969f23e403fd1147715d25e47a7d950b421ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git merge repair&lt;/code&gt; Merge our new branch onto master.</source>
          <target state="translated">&lt;code&gt;git merge repair&lt;/code&gt; 将我们的新分支合并到master。</target>
        </trans-unit>
        <trans-unit id="1fbccc102745b24ee753fc23ea7e04a8e56e518b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git push -f origin master&lt;/code&gt; Push master to the remote repo.</source>
          <target state="translated">&lt;code&gt;git push -f origin master&lt;/code&gt; 将master推送到远程仓库。</target>
        </trans-unit>
        <trans-unit id="ce5fd19917054cca0118039fd5145c2aed7e62c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git rebase -i &amp;lt;SHA&amp;gt;&lt;/code&gt; then &lt;code&gt;d, drop = remove commit&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git rebase -i &amp;lt;SHA&amp;gt;&lt;/code&gt; 然后 &lt;code&gt;d, drop = remove commit&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="84ad08b586243d597501c10ed40c455bc0ef53c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git rebase -i HEAD~&amp;lt;number of commits to go back&amp;gt;&lt;/code&gt;, so &lt;code&gt;git rebase -i HEAD~5&lt;/code&gt; if you want to see the last five commits.</source>
          <target state="translated">&lt;code&gt;git rebase -i HEAD~&amp;lt;number of commits to go back&amp;gt;&lt;/code&gt; ，所以如果您想查看最近的五个提交，则 &lt;code&gt;git rebase -i HEAD~5&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6110a7a552be36804d2e897ff30ba9fba0e4d6e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset --hard 515b5220c50e3dfbb1063f23789d92ae1d3481a2&lt;/code&gt; //it back-up you to that commit (SHA1 ID of &lt;strong&gt;test change 4&lt;/strong&gt; commit is &lt;strong&gt;515b5220c50e3dfbb1063f23789d92ae1d3481a2&lt;/strong&gt;)</source>
          <target state="translated">&lt;code&gt;git reset --hard 515b5220c50e3dfbb1063f23789d92ae1d3481a2&lt;/code&gt; //将您备份到该提交（ &lt;strong&gt;测试更改4&lt;/strong&gt;提交的SHA1 ID为&lt;strong&gt;515b5220c50e3dfbb1063f23789d92ae1d3481a2&lt;/strong&gt; ）</target>
        </trans-unit>
        <trans-unit id="c302cd2729880ee9adb4f39b42c71974525d6556" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset --hard HEAD&lt;/code&gt; did nothing, after checking the &lt;code&gt;reflog&lt;/code&gt;, the last and only &lt;code&gt;HEAD&lt;/code&gt; was the clone - Git wins.</source>
          <target state="translated">&lt;code&gt;git reset --hard HEAD&lt;/code&gt; 在检查 &lt;code&gt;reflog&lt;/code&gt; 之后什么也没做，最后一个也是唯一的 &lt;code&gt;HEAD&lt;/code&gt; 是克隆-Git获胜。</target>
        </trans-unit>
        <trans-unit id="65bd7116511c0fc5e1b026f4f6de8cc5251d6c28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset --hard HEAD^&lt;/code&gt;  // To remove the last commit from git</source>
          <target state="translated">&lt;code&gt;git reset --hard HEAD^&lt;/code&gt; //从git删除最后一次提交</target>
        </trans-unit>
        <trans-unit id="eee048dfe8481e0e432511119986a2e6e4439857" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset --hard HEAD~1&lt;/code&gt; // it back-up you before one commit.</source>
          <target state="translated">&lt;code&gt;git reset --hard HEAD~1&lt;/code&gt; //在一次提交之前备份您。</target>
        </trans-unit>
        <trans-unit id="df43558e6fcdc45b79eec16ab3918f9058dc0452" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset --hard b3d92c5&lt;/code&gt; Reset master to last usable commit.</source>
          <target state="translated">&lt;code&gt;git reset --hard b3d92c5&lt;/code&gt; 将master重置为上一次可用的提交。</target>
        </trans-unit>
        <trans-unit id="e071e0410fc5a9a852474de92fc2ce44d4484d6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Additively Change History&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;加性更改历史&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bfda979ff53aa098e25ebd6adbc959213dfd764c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Alternative 1:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;选择1：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="da1d6c31b84914b16d8c82b7f81952a610dc1534" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Alternative 2:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;选择2：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="823817763684eacd218f2a670d4ed17902c1c5e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Alternative 3:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;选择3：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d49b14b1cd4650d48dddd898758d69fcb0cccbca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Careful:&lt;/strong&gt;&lt;code&gt;git reset --hard&lt;/code&gt;&lt;em&gt;WILL DELETE YOUR WORKING DIRECTORY CHANGES&lt;/em&gt;. Be sure to &lt;strong&gt;stash any local changes you want to keep&lt;/strong&gt; before running this command.</source>
          <target state="translated">&lt;strong&gt;小心：&lt;/strong&gt; &lt;code&gt;git reset --hard&lt;/code&gt; &lt;em&gt;将删除您的工作目录更改&lt;/em&gt; 。 在运行此命令之前，请确保&lt;strong&gt;存储要保留的所有本地更改&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="8bc4f8569935adfd09345856a1757d198d1260cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not use the --hard&lt;/strong&gt; flag unless you want to destroy your work in progress since the last commit.</source>
          <target state="translated">除非要破坏自上次提交以来正在进行的工作，否则&lt;strong&gt;不要使用--hard&lt;/strong&gt;标志。</target>
        </trans-unit>
        <trans-unit id="b2e16c3d0ac5f55fa41f8954ea31ddce74bab961" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For example  your last  commit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;例如您的最后一次提交&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f355d7997f9571abdeb599d74dffa72eb117c846" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Forcefully Change History&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;强制更改历史&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5fc0a7064847214666d4fbc9c01850f402b35de3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;However&lt;/strong&gt;, if others may have pulled it, then you would be better off starting a new branch.  Because when they pull, it will just merge it into their work, and you will get it pushed back up again.</source>
          <target state="translated">&lt;strong&gt;但是&lt;/strong&gt; ，如果其他人可能已经撤消了，那么您最好开始新的分支。 因为当他们拉动它时，它只会将其合并到他们的工作中，并且您会再次将其推回去。</target>
        </trans-unit>
        <trans-unit id="102e9d3a053cbe193ad5aadd2237284dfdf09e7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I'm appending this answer because I don't see why anyone who has just tried to commit work would want to delete all that work because of some mistake using Git!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;我要附加这个答案，因为我不明白为什么任何刚尝试提交工作的人都因为使用Git的某些错误而希望删除所有工作！&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7a144d31fdbb59147f96380723e8fe59f0d8dc33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If one or more of the commits is tagged, delete the tag(s) first.&lt;/strong&gt; Otherwise the tagged commit is not removed.</source>
          <target state="translated">&lt;strong&gt;如果对一个或多个提交进行了标记，请首先删除该标记。&lt;/strong&gt; 否则，不会删除标记的提交。</target>
        </trans-unit>
        <trans-unit id="267f535bafa2062fe7f1cc5c47b4dc046be2261f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Removing an entire commit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;删除整个提交&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c6b0c87e53ab5e1a1aa1757f8f61a440b5c2105c" translate="yes" xml:space="preserve">
          <source>After thinking &lt;code&gt;git reset --hard &amp;lt;SHA&amp;gt;&lt;/code&gt; had worked, I updated another branch to master and 1... 2... poof! the commit was back - Git wins.</source>
          <target state="translated">在认为 &lt;code&gt;git reset --hard &amp;lt;SHA&amp;gt;&lt;/code&gt; 已经起作用之后，我将另一个分支更新为master和1 ... 2 ... poof！ 提交又回来了-Git赢了。</target>
        </trans-unit>
        <trans-unit id="81466f23699e8691eafccf330632db08ef7f3469" translate="yes" xml:space="preserve">
          <source>All the commands above restore the state of your work tree and index as they were before making the commit, but do not restore the state of the repository. If you look at it, the &quot;removed&quot; commit is not actually removed, it is simply not the one on the tip of the current branch.</source>
          <target state="translated">上面的所有命令都会将你的工作树和索引恢复到提交前的状态,但不会恢复仓库的状态。如果你看一下,&quot;已删除 &quot;的提交实际上并没有被删除,它只是不在当前分支顶端的那个分支上。</target>
        </trans-unit>
        <trans-unit id="b0a31a2991db503bf45da2505d24fac790378032" translate="yes" xml:space="preserve">
          <source>Another possibility is one of my personal favorite commands:</source>
          <target state="translated">另一种可能是我个人最喜欢的命令之一。</target>
        </trans-unit>
        <trans-unit id="d5b2ded364518b9bbe3354018d3e9b9abd7c0e88" translate="yes" xml:space="preserve">
          <source>As you can see on above image i want to delete revert&quot;test change 2&quot; commit(SHA1 ID: &lt;strong&gt;015b5220c50e3dfbb1063f23789d92ae1d3481a2&lt;/strong&gt;(you can get SHA1 ID by using &lt;code&gt;gitk&lt;/code&gt; command in git bash)).</source>
          <target state="translated">如上图所示，我想删除还原&amp;ldquo;测试更改2&amp;rdquo;提交（SHA1 ID： &lt;strong&gt;015b5220c50e3dfbb1063f23789d92ae1d3481a2&lt;/strong&gt; （您可以通过在git bash中使用 &lt;code&gt;gitk&lt;/code&gt; 命令获得SHA1 ID））。</target>
        </trans-unit>
        <trans-unit id="6d33c17d47e5901787b7055709de852457aa698f" translate="yes" xml:space="preserve">
          <source>Assuming you are sitting on that commit, then this command will wack it...</source>
          <target state="translated">假设你的提交正在进行中,那么这条命令就会让你的提交.....</target>
        </trans-unit>
        <trans-unit id="d1f704896e66cc5e62cd0bf64a834372ff4eeefe" translate="yes" xml:space="preserve">
          <source>Assuming you don't just want to delete the last commit, but you want to delete specific commits of the last n commits, go with:</source>
          <target state="translated">假设你不只是想删除最后一个提交,而是想删除最后N个提交中的具体提交,请用。</target>
        </trans-unit>
        <trans-unit id="2b7ec0a27be98d1eff7652f4789af7c6f8bbf4fc" translate="yes" xml:space="preserve">
          <source>Be careful with this though, because if you change something that you &lt;em&gt;have&lt;/em&gt; pushed elsewhere, another approach will be needed unless you are planning to do a force push.</source>
          <target state="translated">但是请务必小心，因为如果您更改了&lt;em&gt;已&lt;/em&gt;推送到其他位置的内容，则除非计划进行强制推送，否则将需要另一种方法。</target>
        </trans-unit>
        <trans-unit id="c4829627a5bf1e018d5ff182570c84e24753c4ee" translate="yes" xml:space="preserve">
          <source>By &lt;code&gt;delete&lt;/code&gt;, I mean it is as if I didn't make that commit, and when I do a push in the future, my changes will not push to the remote branch.</source>
          <target state="translated">通过 &lt;code&gt;delete&lt;/code&gt; ，我的意思是好像我没有进行该提交，并且以后进行推送时，所做的更改将不会推送到远程分支。</target>
        </trans-unit>
        <trans-unit id="a109c4c6d15b70f25adc62e372803842fdd9b7b2" translate="yes" xml:space="preserve">
          <source>Change YourCommitId for the number of the commit which you want to revert back to.</source>
          <target state="translated">更改YourCommitId为你想恢复到的提交号。</target>
        </trans-unit>
        <trans-unit id="20933acd191fe84e954af4e111df5ddf77524155" translate="yes" xml:space="preserve">
          <source>Checking back out to master, time to try &lt;code&gt;git rebase -i &amp;lt;SHA&amp;gt;&lt;/code&gt;, then remove the line... to no avail, sad to say. &quot;&lt;em&gt;If you remove a line here THAT COMMIT WILL BE LOST&lt;/em&gt;&quot;. Ah...glossed over new feature &lt;em&gt;troll the n00b&lt;/em&gt; in the &lt;a href=&quot;https://www.dropbox.com/s/swukg8jqui0wc69/2.8.3.txt&quot;&gt;2.8.3 release notes&lt;/a&gt;.</source>
          <target state="translated">检查回给主人，时间尝试 &lt;code&gt;git rebase -i &amp;lt;SHA&amp;gt;&lt;/code&gt; 然后取出线......都无济于事，痛心地说。 &amp;ldquo; &lt;em&gt;如果您在此处删除一行，则将丢失&lt;/em&gt; &amp;rdquo;。 啊...关于新功能，请在&lt;a href=&quot;https://www.dropbox.com/s/swukg8jqui0wc69/2.8.3.txt&quot;&gt;2.8.3发行说明中&lt;/a&gt; &lt;em&gt;拖曳n00b&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="985c2265c8fc21f04f4202af59fd7f9496062d5c" translate="yes" xml:space="preserve">
          <source>Checkout the branch you want to revert, then reset your local working copy back to the commit that you want to be the latest one on the remote server (everything after it will go bye-bye). To do this, in SourceTree I right-clicked on the and selected &quot;Reset BRANCHNAME to this commit&quot;. I think the command line is:</source>
          <target state="translated">勾选你要恢复的分支,然后将你的本地工作副本重设为你希望在远程服务器上的最新提交(之后的所有内容都会消失)。要做到这一点,我在SourceTree中右击并选择 &quot;Reset BRANCHNAME to this commit&quot;。我认为命令行是:&quot;重设BRANCHNAME&quot;。</target>
        </trans-unit>
        <trans-unit id="1501dad19c952215680d5337162bbf7d77f0f856" translate="yes" xml:space="preserve">
          <source>Delete commits from a branch in Git</source>
          <target state="translated">从 Git 中删除分支中的提交</target>
        </trans-unit>
        <trans-unit id="d5288292067476ab19a14b904b49b343a8fbfbe9" translate="yes" xml:space="preserve">
          <source>Delete the last commit</source>
          <target state="translated">删除最后一次提交</target>
        </trans-unit>
        <trans-unit id="cfbfdb050621082eae60e284b13d1df8a93cd081" translate="yes" xml:space="preserve">
          <source>Determined to beat Git and preserve the original times, I deleted this local repository and re-cloned from the remote.</source>
          <target state="translated">决心要打败Git,保留原来的时代,我删除了这个本地版本库,从远程重新克隆。</target>
        </trans-unit>
        <trans-unit id="ba2205e4720b9c4875b2063795e768edc9f65654" translate="yes" xml:space="preserve">
          <source>Docs:
&lt;a href=&quot;http://git-scm.com/docs/git-commit.html&quot;&gt;http://git-scm.com/docs/git-commit.html&lt;/a&gt;</source>
          <target state="translated">Docs:
&lt;a href=&quot;http://git-scm.com/docs/git-commit.html&quot;&gt;http://git-scm.com/docs/git-commit.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="482252fa8b6026a7b480156441f6d58f4ba9fafb" translate="yes" xml:space="preserve">
          <source>Exhausting the options:</source>
          <target state="translated">用尽办法。</target>
        </trans-unit>
        <trans-unit id="d1b30321a67a8f34a339a84c1b5fad05da1ebaa9" translate="yes" xml:space="preserve">
          <source>FYI -- &lt;code&gt;git reset --hard HEAD&lt;/code&gt; is great if you want to get rid of WORK IN PROGRESS.  It will reset you back to the most recent commit, and erase all the changes in your working tree and index.</source>
          <target state="translated">仅供参考 &lt;code&gt;git reset --hard HEAD&lt;/code&gt; 非常有用，如果您想要摆脱正在进行的工作。 它将重置您为最新的提交，并清除工作树和索引中的所有更改。</target>
        </trans-unit>
        <trans-unit id="42bee27f352ee20ccde1028ba1bf775b9ac94daa" translate="yes" xml:space="preserve">
          <source>First reset the branch to the parent of the current commit</source>
          <target state="translated">首先将该分支重置为当前提交的父分支。</target>
        </trans-unit>
        <trans-unit id="af9f98aaf43ec1375f9bc58d58816e48e4eefdf0" translate="yes" xml:space="preserve">
          <source>For particular commit, you want to reset is following</source>
          <target state="translated">对于特定的提交,你要重置的是以下内容</target>
        </trans-unit>
        <trans-unit id="51c5fcfcfa3641e63c6c280da649bcc906af0b0d" translate="yes" xml:space="preserve">
          <source>For that i can use(all below command work on local only. you need to push after delete):</source>
          <target state="translated">为此,我可以使用以下命令(以下所有命令只能在本地工作,删除后需要推送)。</target>
        </trans-unit>
        <trans-unit id="05460aa43345a06bbc6ec3e0766b7a4e0c113223" translate="yes" xml:space="preserve">
          <source>Force push to origin</source>
          <target state="translated">强行推到原点</target>
        </trans-unit>
        <trans-unit id="9aeb9051871c7a92edee9dcf95ab0fa565db1da5" translate="yes" xml:space="preserve">
          <source>Force-push it to the remote.</source>
          <target state="translated">强行推到遥控器上。</target>
        </trans-unit>
        <trans-unit id="44afab30eb10c33911f37c56300b43abcdf0a5ec" translate="yes" xml:space="preserve">
          <source>Good day to you.</source>
          <target state="translated">今天是你的好日子。</target>
        </trans-unit>
        <trans-unit id="5660456bd2342d41572b61d084667a86f2c38463" translate="yes" xml:space="preserve">
          <source>Here '2' is the number of commits you want to rebase.</source>
          <target state="translated">这里的'2'是你要重新建立的提交数量。</target>
        </trans-unit>
        <trans-unit id="88db40b7afb17b19823267284ee78d7675a1f99b" translate="yes" xml:space="preserve">
          <source>Here's another way to do this:</source>
          <target state="translated">这里有另一个方法。</target>
        </trans-unit>
        <trans-unit id="5b78e98e04fb956744bb28ffe75c6a82b9a8643e" translate="yes" xml:space="preserve">
          <source>I &lt;code&gt;git rebase -i --root&lt;/code&gt;'ed my branch, ignorantly thinking I could reword the first commit differing from the master (the &lt;em&gt;GitHub for Windows&lt;/em&gt; default view is the comparison to master, hiding it's entirety).</source>
          <target state="translated">我 &lt;code&gt;git rebase -i --root&lt;/code&gt; '分支了我的分支，无知地认为我可以重新编写不同于master的第一次提交（ &lt;em&gt;Windows&lt;/em&gt;的&lt;em&gt;GitHub&lt;/em&gt;默认视图是与master的比较，隐藏了它的全部内容）。</target>
        </trans-unit>
        <trans-unit id="2e20cff6091dd4a880af140b6004fe0ebe00283b" translate="yes" xml:space="preserve">
          <source>I didn't wish to &lt;code&gt;git revert&lt;/code&gt; - it would create an additional commit, giving Git the upper hand.</source>
          <target state="translated">我不希望 &lt;code&gt;git revert&lt;/code&gt; -它会创建一个额外的提交，使Git占上风。</target>
        </trans-unit>
        <trans-unit id="9b59023fbb67854f01d98a0ef51c81c5894eb6a9" translate="yes" xml:space="preserve">
          <source>I don't recommend this option because you can lost your work in progress.</source>
          <target state="translated">我不建议你选择这个方案,因为你可能会失去你正在进行的工作。</target>
        </trans-unit>
        <trans-unit id="6c9130bb59308d64b23913d997a9d183f2a1e46e" translate="yes" xml:space="preserve">
          <source>I grew a Silicon Valley beard while 900+ commits loaded themselves into Sublime. Exiting with no changes, I charged my battery then proceeded to shave, as all 900+ individual commits nonchalantly rebased - resetting their commit times to now.</source>
          <target state="translated">当900多个提交者把自己装进Sublime的时候,我长了一把硅谷的胡子。在没有任何变化的情况下退出,我给自己的电池充电,然后继续刮胡子,因为所有900多个人的提交都不慌不忙地重新建立了基础--将他们的提交时间重置为现在。</target>
        </trans-unit>
        <trans-unit id="7d07e5f7968a37231c185b24027cff07a1a00418" translate="yes" xml:space="preserve">
          <source>I have already pushed. Need to return some commits back remotly.
Have tried many variations, 
but only &lt;a href=&quot;https://stackoverflow.com/a/41927515/6352712&quot;&gt;this&lt;/a&gt; from &lt;a href=&quot;https://stackoverflow.com/users/425964/justin&quot;&gt;Justin&lt;/a&gt; via git bush is working fine for me:</source>
          <target state="translated">我已经推了。 需要远程返回一些提交。 尝试了许多变体，但只有&lt;a href=&quot;https://stackoverflow.com/users/425964/justin&quot;&gt;贾斯汀&lt;/a&gt;通过git bush的方法对我来说效果很好：</target>
        </trans-unit>
        <trans-unit id="8c2ad913b00d698cd501b1274ea40f311d53f466" translate="yes" xml:space="preserve">
          <source>I read git help, and I think the command I should use is &lt;code&gt;git reset --hard HEAD&lt;/code&gt;.  Is this correct?</source>
          <target state="translated">我读了git help，我认为我应该使用的命令是 &lt;code&gt;git reset --hard HEAD&lt;/code&gt; 。 它是否正确？</target>
        </trans-unit>
        <trans-unit id="1f41015da060e52bc94556b3266212aff73b498d" translate="yes" xml:space="preserve">
          <source>I think that there are no means to remove a commit with &lt;a href=&quot;http://git-scm.com/book/ch9-1.html&quot;&gt;porcelain commands&lt;/a&gt;. The only way is to remove it from the log and reflog and then to execute a &lt;code&gt;git prune --expire -now&lt;/code&gt;.</source>
          <target state="translated">我认为没有办法用&lt;a href=&quot;http://git-scm.com/book/ch9-1.html&quot;&gt;瓷器命令&lt;/a&gt;删除提交。 唯一的方法是将其从日志和reflog中删除，然后执行 &lt;code&gt;git prune --expire -now&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cfcd243fcaee3b80f71f49eee86f1b93195df385" translate="yes" xml:space="preserve">
          <source>I would like to know how to delete a commit.</source>
          <target state="translated">我想知道如何删除一个提交。</target>
        </trans-unit>
        <trans-unit id="96a571367d9898610f47cd20328876141d8b243f" translate="yes" xml:space="preserve">
          <source>If you already published to-be-deleted commit, use &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-revert.html&quot;&gt;git revert&lt;/a&gt;</source>
          <target state="translated">如果您已经发布了要删除的提交，请使用&lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-revert.html&quot;&gt;git revert&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8dbbfe77bb076a97a774b516e7a0174e822682a7" translate="yes" xml:space="preserve">
          <source>If you already pushed it, you will need to do a force push to get rid of it...</source>
          <target state="translated">如果你已经推过了,那你就需要做一个强行推送的方式来摆脱......</target>
        </trans-unit>
        <trans-unit id="5f07f69ee2b374010d7f438229e6cab7e9178928" translate="yes" xml:space="preserve">
          <source>If you already pushed, it may be better to use &lt;code&gt;git revert&lt;/code&gt;, to create a &quot;mirror image&quot; commit that will undo the changes.  However, both commits will be in the log.</source>
          <target state="translated">如果已经推送了，最好使用 &lt;code&gt;git revert&lt;/code&gt; 创建一个&amp;ldquo;镜像&amp;rdquo;提交，以撤消更改。 但是，两个提交都将在日志中。</target>
        </trans-unit>
        <trans-unit id="9ca680c57e79eebe8faffd40434ec200390d75eb" translate="yes" xml:space="preserve">
          <source>If you didn't publish changes, to remove latest commit, you can do</source>
          <target state="translated">如果你没有发布修改,要删除最新的提交,你可以这样做</target>
        </trans-unit>
        <trans-unit id="d0d81f5f4aa174a01caed9744d7ae3997de0bc6c" translate="yes" xml:space="preserve">
          <source>If you have newly staged changes they'll be combined with the last commit (that you're trying to get rid of) and will replace that commit.</source>
          <target state="translated">如果你有新的阶段性修改,它们将与最后一个提交(你要删除的提交)结合在一起,并将取代该提交。</target>
        </trans-unit>
        <trans-unit id="6596b4ac72d240b0ed2aa62ebeda6c452c1506fe" translate="yes" xml:space="preserve">
          <source>If you have not yet pushed the commit anywhere, you can use &lt;a href=&quot;http://git-scm.com/docs/git-rebase&quot;&gt;&lt;code&gt;git rebase -i&lt;/code&gt;&lt;/a&gt; to remove that commit. First, find out how far back that commit is (approximately). Then do:</source>
          <target state="translated">如果尚未将提交推送到任何地方，则可以使用&lt;a href=&quot;http://git-scm.com/docs/git-rebase&quot;&gt; &lt;code&gt;git rebase -i&lt;/code&gt; &lt;/a&gt;删除该提交。 首先，找出该提交的距离（大约）。 然后做：</target>
        </trans-unit>
        <trans-unit id="44e3e3f8146c430375da4ee5925227356f44dc40" translate="yes" xml:space="preserve">
          <source>If you just messed up your last commit (wrong message, forgot to add some changes) and want to fix it before pushing it to a public repo why not use:</source>
          <target state="translated">如果你只是把上次提交的内容弄错了(错误的信息,忘记添加一些修改),想在推送到公共的repo之前修复它,为什么不使用。</target>
        </trans-unit>
        <trans-unit id="40e1570206d278903e87bb0fcce50d747d648271" translate="yes" xml:space="preserve">
          <source>If you want to fix up your latest commit, you can undo the commit, and unstage the files in it, by doing:</source>
          <target state="translated">如果你想修复你的最新提交,你可以撤销提交,并解开其中的文件,方法是这样做。</target>
        </trans-unit>
        <trans-unit id="c32e117464727f0450f94b5cd20d85260abcabf9" translate="yes" xml:space="preserve">
          <source>If you want to get rid of your latest commit, and do not want to keep the code changes, you can do a &quot;hard&quot; reset.</source>
          <target state="translated">如果你想删除最新的提交,又不想保留代码修改,可以进行 &quot;硬 &quot;重置。</target>
        </trans-unit>
        <trans-unit id="68f21e507db554f3b7a22808df6f609e9a72b5df" translate="yes" xml:space="preserve">
          <source>If you want to keep the history, showing the commit and the revert, you should use:</source>
          <target state="translated">如果你想保留历史记录,显示提交和还原,你应该使用。</target>
        </trans-unit>
        <trans-unit id="87a8f8872c341d5920414f07785aad472c8d093b" translate="yes" xml:space="preserve">
          <source>If you want to keep your changes , and remove recent commits</source>
          <target state="translated">如果你想保留你的修改,并删除最近提交的内容</target>
        </trans-unit>
        <trans-unit id="8c8bfe5072413014db38c85be5dce3bc7e9daaf5" translate="yes" xml:space="preserve">
          <source>If you want to keep your work and just 'undo' that commit command (you caught before pushing to repo):</source>
          <target state="translated">如果你想保留你的工作,只是 &quot;撤消 &quot;那个提交命令(你在推送到repo之前抓到的)。</target>
        </trans-unit>
        <trans-unit id="e6f5eba4582d5bcee12bca1ae8b4787e484c1768" translate="yes" xml:space="preserve">
          <source>If you want to uncommit N commits, but keep the code changes in your working directory:</source>
          <target state="translated">如果你想取消N个提交,但保留工作目录中的代码修改。</target>
        </trans-unit>
        <trans-unit id="03d853e9fff6c7aee87d2ac84282fbe4e68e5784" translate="yes" xml:space="preserve">
          <source>If you've already pushed, first find the commit you want to be at HEAD &lt;em&gt;($GIT_COMMIT_HASH_HERE)&lt;/em&gt;, then run the following:</source>
          <target state="translated">如果已经推送，则首先在HEAD &lt;em&gt;（$ GIT_COMMIT_HASH_HERE）&lt;/em&gt;处找到要提交的提交，然后运行以下命令：</target>
        </trans-unit>
        <trans-unit id="d24215566781e2696f7f247fac57197b8e0de6fb" translate="yes" xml:space="preserve">
          <source>In my case, my magic code for this pupose is this one:</source>
          <target state="translated">在我的情况下,我的这个瞳孔的魔法密码是这样的。</target>
        </trans-unit>
        <trans-unit id="f0dba4d1c4b202c5ee3e3e686a01d606a7437de1" translate="yes" xml:space="preserve">
          <source>Lastly, if you need to find a commit that you &quot;deleted&quot;, it is typically present in &lt;code&gt;git reflog&lt;/code&gt; unless you have garbage collected your repository.</source>
          <target state="translated">最后，如果您需要查找&amp;ldquo;删除&amp;rdquo;的提交，除非您已垃圾回收存储库，否则它通常存在于 &lt;code&gt;git reflog&lt;/code&gt; 中 。</target>
        </trans-unit>
        <trans-unit id="e9cd9f6a58ba27481ffff39cc43119f0d5e65dd2" translate="yes" xml:space="preserve">
          <source>Likewise, if you want to discard the last N commits, and do not want to keep the code changes:</source>
          <target state="translated">同样的,如果你想丢弃最后的N个提交,又不想保留代码的修改。</target>
        </trans-unit>
        <trans-unit id="745b91d049d82bd095df62bde9f98633b90f4e8c" translate="yes" xml:space="preserve">
          <source>Note: &lt;strong&gt;You need to have admin rights over the repo&lt;/strong&gt; since you are using &lt;code&gt;--hard&lt;/code&gt; and &lt;code&gt;-f&lt;/code&gt;.</source>
          <target state="translated">注意：由于您正在使用 &lt;code&gt;--hard&lt;/code&gt; 和 &lt;code&gt;-f&lt;/code&gt; ,因此 &lt;strong&gt;您需要对该存储库具有管理员权限&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="a474912ab0caa8c6bc8338cc8e30575ef75e301f" translate="yes" xml:space="preserve">
          <source>Now it had re-added a most recent unneeded commit to master I wished to remove, so proceeded like so.</source>
          <target state="translated">现在,它已经重新添加了一个最近的不需要的提交到我想删除的主,所以就这样进行了。</target>
        </trans-unit>
        <trans-unit id="ae9e14aa8bb8834d2e265c5824898ea78b888b59" translate="yes" xml:space="preserve">
          <source>Now you want to delete this commit then an Easy way to do this following</source>
          <target state="translated">现在你想删除这个提交,那么简单的方法是这样做的</target>
        </trans-unit>
        <trans-unit id="953810e2426fca2698e571670180a9ecf83be959" translate="yes" xml:space="preserve">
          <source>Obviously replace &quot;SHA&quot; with the reference you want to get rid of. The &quot;^&quot; in that command is literal.</source>
          <target state="translated">很明显,用你要去掉的引用代替 &quot;SHA&quot;。该命令中的&quot;^&quot;是字面意思。</target>
        </trans-unit>
        <trans-unit id="6060a8ba587122239361c1b3752e10cbb1237ea2" translate="yes" xml:space="preserve">
          <source>Of course if you amend a commit after you've pushed it, you're rewriting history so if you do that be sure to understand the implications.</source>
          <target state="translated">当然,如果你在推送了一个提交之后再修改,那你就是在写历史,所以如果你这样做的话,一定要明白其中的含义。</target>
        </trans-unit>
        <trans-unit id="b35e70c607d6e4773828839da8a4ddf1a611d431" translate="yes" xml:space="preserve">
          <source>Or, you could look at the output of &lt;code&gt;git log&lt;/code&gt;, find the commit id of the commit you want to back up to, and then do this:</source>
          <target state="translated">或者，您可以查看 &lt;code&gt;git log&lt;/code&gt; 的输出，找到要备份到的提交的提交ID，然后执行以下操作：</target>
        </trans-unit>
        <trans-unit id="5e0feea6b064c5e1d9ee6b932b0af838d9a11bbf" translate="yes" xml:space="preserve">
          <source>PS: CommitId refers the one which you want to revert back to</source>
          <target state="translated">PS:CommitId指的是你想返回的那一个。</target>
        </trans-unit>
        <trans-unit id="0066fef5eabf90f9eda22966ce542417a292a5e3" translate="yes" xml:space="preserve">
          <source>Reference: &lt;a href=&quot;https://ncona.com/2011/07/how-to-delete-a-commit-in-git-local-and-remote/&quot;&gt;How to delete a commit in git, local and remote&lt;/a&gt;</source>
          <target state="translated">参考： &lt;a href=&quot;https://ncona.com/2011/07/how-to-delete-a-commit-in-git-local-and-remote/&quot;&gt;如何在git，local和remote中删除提交&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a38c53ffb5c282ba793e916879e175c8a183753f" translate="yes" xml:space="preserve">
          <source>Reset on local branch</source>
          <target state="translated">在本地分支上重设</target>
        </trans-unit>
        <trans-unit id="f531bce04c421096a7c9624ebdf7459ce4c4989a" translate="yes" xml:space="preserve">
          <source>Say we want to remove commits 2 &amp;amp; 4 from the repo.</source>
          <target state="translated">假设我们要从仓库中删除提交2和提交4。</target>
        </trans-unit>
        <trans-unit id="e1905f336b926873eafad9091e256f8012bc4da6" translate="yes" xml:space="preserve">
          <source>Since you just checked out your branch from remote, you're not going to have any local changes to worry about losing. But this would lose them if you did.</source>
          <target state="translated">因为你刚刚从远程签出了你的分支,所以你不会有任何本地的变化,担心丢失。但这样做的话,就会失去他们。</target>
        </trans-unit>
        <trans-unit id="257b9b08a37fd673e243e933ff17b8c88000b929" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;https://gist.github.com/sagarjethi/c07723b2f4fa74ad8bdf229166cf79d8&quot;&gt;https://gist.github.com/sagarjethi/c07723b2f4fa74ad8bdf229166cf79d8&lt;/a&gt;</source>
          <target state="translated">来源： &lt;a href=&quot;https://gist.github.com/sagarjethi/c07723b2f4fa74ad8bdf229166cf79d8&quot;&gt;https&lt;/a&gt; ： //gist.github.com/sagarjethi/c07723b2f4fa74ad8bdf229166cf79d8</target>
        </trans-unit>
        <trans-unit id="cdde4f20ba31a24db2cc7ae71135c8353631907b" translate="yes" xml:space="preserve">
          <source>Steps</source>
          <target state="translated">Steps</target>
        </trans-unit>
        <trans-unit id="58c53edf5f4bb3ba6e15b6687d6604d277815434" translate="yes" xml:space="preserve">
          <source>Take backup of your code in to temp folder. Following command will reset same as server.</source>
          <target state="translated">将你的代码备份到临时文件夹中。下面的命令将重置与服务器相同。</target>
        </trans-unit>
        <trans-unit id="14f22d4e6824c3b684660bd71774043dba5eb8ea" translate="yes" xml:space="preserve">
          <source>Test it and tell me. I have tried a few different ones, but this one was the only that helped me.</source>
          <target state="translated">测试一下,然后告诉我。我试了好几个不同的,但只有这一个对我有帮助。</target>
        </trans-unit>
        <trans-unit id="33e692e2551ca39d58666652cf0cea9528957f81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HEAD~1&lt;/code&gt; means the commit before head.</source>
          <target state="translated">&lt;code&gt;HEAD~1&lt;/code&gt; 表示在head之前提交。</target>
        </trans-unit>
        <trans-unit id="67c69d80b3797000a83f9fa877c8ff4eb0653030" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~N&lt;/code&gt; means rebase the last &lt;code&gt;N&lt;/code&gt; commits (&lt;code&gt;N&lt;/code&gt; must be a number, for example &lt;code&gt;HEAD~10&lt;/code&gt;). Then, you can edit the file that Git presents to you to delete the offending commit. On saving that file, Git will then rewrite all the following commits as if the one you deleted didn't exist.</source>
          <target state="translated">〜N表示对最近的 &lt;code&gt;N&lt;/code&gt; 次提交进行重新基准处理（ &lt;code&gt;N&lt;/code&gt; 必须为数字，例如 &lt;code&gt;HEAD~10&lt;/code&gt; ）。 然后，您可以编辑Git呈现给您的文件以删除有问题的提交。 保存该文件后，Git将重写以下所有提交，就好像您删除的提交不存在一样。</target>
        </trans-unit>
        <trans-unit id="c9ad62906f0511afd79d671adfae9e83a883953f" translate="yes" xml:space="preserve">
          <source>The Git Book has a good &lt;a href=&quot;http://git-scm.com/book/en/Git-Branching-Rebasing&quot;&gt;section on rebasing&lt;/a&gt; with pictures and examples.</source>
          <target state="translated">《 Git书》中有一个很好的&lt;a href=&quot;http://git-scm.com/book/en/Git-Branching-Rebasing&quot;&gt;章节，介绍了&lt;/a&gt;基于图片和示例的基础。</target>
        </trans-unit>
        <trans-unit id="c9e118ff0c6703e901391e677dd298a0e7bd733f" translate="yes" xml:space="preserve">
          <source>The mistake:</source>
          <target state="translated">错的是。</target>
        </trans-unit>
        <trans-unit id="df7e72c4e856ebdeb027f94638db8e9c29d13a3b" translate="yes" xml:space="preserve">
          <source>The solution:</source>
          <target state="translated">解决办法:</target>
        </trans-unit>
        <trans-unit id="5c1a0b46dd2a77265585885a3310d98ffc47632b" translate="yes" xml:space="preserve">
          <source>Then each place the repo has been cloned, run:</source>
          <target state="translated">然后每一个地方的repo已经被克隆,运行。</target>
        </trans-unit>
        <trans-unit id="516a65a8d341e713504da0b68d69ea30f2df23ad" translate="yes" xml:space="preserve">
          <source>Then in the text editor change the word &lt;code&gt;pick&lt;/code&gt; to &lt;code&gt;drop&lt;/code&gt; next to every commit you would like to remove. Save and quit the editor. Voila!</source>
          <target state="translated">然后在文本编辑器中，将单词 &lt;code&gt;pick&lt;/code&gt; &lt;code&gt;drop&lt;/code&gt; 到您要删除的每个提交旁边。 保存并退出编辑器。 瞧！</target>
        </trans-unit>
        <trans-unit id="57bc2c81ed066050c0080e31433ade12c1fafb8c" translate="yes" xml:space="preserve">
          <source>Then navigate to your repository's local directory and run this command:</source>
          <target state="translated">然后导航到你的版本库的本地目录并运行此命令。</target>
        </trans-unit>
        <trans-unit id="b099ac28c4326ac570f4d9c1956512f65cc8f977" translate="yes" xml:space="preserve">
          <source>Then you will be able to choose one of these options.</source>
          <target state="translated">那么你就可以从这些选项中选择一个。</target>
        </trans-unit>
        <trans-unit id="dd2c142717faff37fd8bb94acc2747332ff26df0" translate="yes" xml:space="preserve">
          <source>These lines can be re-ordered; they are executed from top to bottom.
 If you remove a line here THAT COMMIT WILL BE LOST.
 However, if you remove everything, the rebase will be aborted.
 Note that empty commits are commented out</source>
          <target state="translated">这些行可以重新排序,从上到下执行。如果你删除了这里的一行,那么这个COMMIT就会丢失。但是,如果你删除了所有的内容,重构将被中止。注意,空的提交会被注释掉</target>
        </trans-unit>
        <trans-unit id="1c68f6f7024438aa3046a481d2c1addaf9440e70" translate="yes" xml:space="preserve">
          <source>This will erase all commits after the current one in your local repository but only for that one branch.</source>
          <target state="translated">这将删除本地版本库中当前提交之后的所有提交,但只删除该分支。</target>
        </trans-unit>
        <trans-unit id="d502420e26f879a1469087bb42f5c742bb32479b" translate="yes" xml:space="preserve">
          <source>This will return your repository to its state before the git add commands that staged the files. Your changes will be in your working directory. HEAD~1 refers to the commit below the current tip of the branch.</source>
          <target state="translated">这将使你的版本库返回到git添加命令之前的状态,而这些命令是对文件进行分期的。你的修改将在你的工作目录中。HEAD~1指的是当前分支顶端下面的提交。</target>
        </trans-unit>
        <trans-unit id="f4900beac84b86412a7d07e64c8e44534ecb3c2e" translate="yes" xml:space="preserve">
          <source>This will start the rebase in interactive mode &lt;code&gt;-i&lt;/code&gt; at the point just before the commit you want to whack. The editor will start up listing all of the commits since then. Delete the line containing the commit you want to obliterate and save the file. Rebase will do the rest of the work, deleting only that commit, and replaying all of the others back into the log.</source>
          <target state="translated">这将在您要修改的提交之前的点以交互模式 &lt;code&gt;-i&lt;/code&gt; 启动重新基准。 此后，编辑器将开始列出所有提交。 删除包含要删除的提交的行，然后保存文件。 Rebase将完成其余工作，仅删除该提交，并将所有其他提交重播到日志中。</target>
        </trans-unit>
        <trans-unit id="30fb09222b0f7ce00eb0523b723c5e3ee83290ef" translate="yes" xml:space="preserve">
          <source>To delete in a remote branch, use</source>
          <target state="translated">要在远程分支中删除,请使用</target>
        </trans-unit>
        <trans-unit id="701868dd44030892fc04d71748a312bb7139bcc4" translate="yes" xml:space="preserve">
          <source>To delete in local branch, use</source>
          <target state="translated">要在本地分支中删除,请使用</target>
        </trans-unit>
        <trans-unit id="39365a8d6dab7b0a2f600f4608fd40e8fb368108" translate="yes" xml:space="preserve">
          <source>To get the most recent SHA, I checked the remote repository on github.com - minor win.</source>
          <target state="translated">为了获得最新的SHA,我检查了github.com上的远程仓库--小赢。</target>
        </trans-unit>
        <trans-unit id="ef1eb937d57e41d2e2093fa3da5c3197276eb45f" translate="yes" xml:space="preserve">
          <source>To verify, I checked out to another branch, and voila - no hiding commit to fetch/pull from the master.</source>
          <target state="translated">为了验证,我检查了一下,到了另一个分支,发现没有隐藏提交到主站的fetchpull。</target>
        </trans-unit>
        <trans-unit id="889cb33078f93d7d9254fd399e6526d844221110" translate="yes" xml:space="preserve">
          <source>Try &lt;code&gt;git revert &amp;lt;commit hash&amp;gt;&lt;/code&gt;. &lt;a href=&quot;https://www.atlassian.com/git/tutorials/undoing-changes/git-revert&quot;&gt;Revert&lt;/a&gt; will create a &lt;em&gt;new&lt;/em&gt; commit that undoes the specified commit.</source>
          <target state="translated">尝试 &lt;code&gt;git revert &amp;lt;commit hash&amp;gt;&lt;/code&gt; 。 &lt;a href=&quot;https://www.atlassian.com/git/tutorials/undoing-changes/git-revert&quot;&gt;Revert&lt;/a&gt;将创建一个&lt;em&gt;新的&lt;/em&gt;提交，该提交将撤消指定的提交。</target>
        </trans-unit>
        <trans-unit id="19d02bc12c1e811c9be9a24fe184d2d6c6e700a3" translate="yes" xml:space="preserve">
          <source>What I do usually when I commit and push (if anyone pushed his commit this solve the problem):</source>
          <target state="translated">我通常做的是,当我提交和推送的时候(如果有人推送他的提交,这个问题就解决了)。</target>
        </trans-unit>
        <trans-unit id="2a70b7832ea9f846685043972515efa0bdb8f748" translate="yes" xml:space="preserve">
          <source>When you issue &lt;code&gt;git log&lt;/code&gt; you'll see both the &quot;wrong&quot; commit and revert log messages.</source>
          <target state="translated">发出 &lt;code&gt;git log&lt;/code&gt; 时,您将同时看到&amp;ldquo;错误&amp;rdquo;的提交和还原日志消息。</target>
        </trans-unit>
        <trans-unit id="03923623bf2bef6b881c7670f54c3f6df241fa11" translate="yes" xml:space="preserve">
          <source>You can also pass the '--no-edit' option instead of '-m' if you would prefer to use the previous commit's message.</source>
          <target state="translated">如果你希望使用之前的提交信息,你也可以通过'--no-edit'选项来代替'-m'。</target>
        </trans-unit>
        <trans-unit id="9c9a202954ee7cae9dd55fa60d9beb9f7c9033b3" translate="yes" xml:space="preserve">
          <source>You can keep your work and only undo the commit.</source>
          <target state="translated">你可以保留你的工作,只需撤销提交。</target>
        </trans-unit>
        <trans-unit id="93b39e19f453fced94de248d0efbd662da9694e6" translate="yes" xml:space="preserve">
          <source>You can simply remove that commit using option &quot;d&quot; or Removing a line that has your commit.</source>
          <target state="translated">你可以简单地使用选项 &quot;d &quot;或删除有你的提交的行,删除该提交。</target>
        </trans-unit>
        <trans-unit id="54dc32946de529fdad9d8c6bca91633f24297121" translate="yes" xml:space="preserve">
          <source>You have many alternatives, for example:</source>
          <target state="translated">你有很多选择,比如说。</target>
        </trans-unit>
        <trans-unit id="fb5936a817bd4c6ea21a209ba29761c28ac16ecd" translate="yes" xml:space="preserve">
          <source>You will be now at previous head. Pull the branch. Push new code. Commit will be removed from git</source>
          <target state="translated">你现在就在之前的头部。拔掉分支。推送新代码。提交将从git中删除。</target>
        </trans-unit>
        <trans-unit id="1a586f7ddbd3e680eded7fab979c565199ef8b24" translate="yes" xml:space="preserve">
          <source>after delete:</source>
          <target state="translated">删除后。</target>
        </trans-unit>
        <trans-unit id="f0c68644aad61f3f96935569eed5547ae4b983ba" translate="yes" xml:space="preserve">
          <source>enter the message explaining why are you reverting and then:</source>
          <target state="translated">输入信息,说明你为什么要回退,然后:</target>
        </trans-unit>
        <trans-unit id="ddb31e750e6c1c908dfac98ac2f2ecf6698b4d20" translate="yes" xml:space="preserve">
          <source>git push origin +aa61ab32^:master</source>
          <target state="translated">git push origin+aa61ab32^:master</target>
        </trans-unit>
        <trans-unit id="103c1fac527e557fea4472b037eddbdd31cbda77" translate="yes" xml:space="preserve">
          <source>git push origin HEAD --force</source>
          <target state="translated">git push origin HEAD --force</target>
        </trans-unit>
        <trans-unit id="cf136d60baf6dbfd88ddc6f362f5619f4ffa9281" translate="yes" xml:space="preserve">
          <source>git reset --hard</source>
          <target state="translated">git重置 --hard</target>
        </trans-unit>
        <trans-unit id="0a2ffabb6c1b23361a8f6cd6fc1a09fea3dc19d6" translate="yes" xml:space="preserve">
          <source>hope this help</source>
          <target state="translated">希望对你有帮助</target>
        </trans-unit>
        <trans-unit id="caa1f6c46e6e29f9f4a967617d593bff1ebd8b86" translate="yes" xml:space="preserve">
          <source>if you want to rebase all the commits.</source>
          <target state="translated">如果你想把所有的承诺都重新建立在基础上。</target>
        </trans-unit>
        <trans-unit id="f569834b9f4ecb47276ea40f8ab2653abae05051" translate="yes" xml:space="preserve">
          <source>use git revert  &lt;a href=&quot;https://git-scm.com/docs/git-revert&quot;&gt;https://git-scm.com/docs/git-revert&lt;/a&gt; .It will revert all code then you can do next commit.Then head will point to that last commit. reverted commits never delete but it will not affect on you last commit.</source>
          <target state="translated">使用git revert &lt;a href=&quot;https://git-scm.com/docs/git-revert&quot;&gt;https://git-scm.com/docs/git-revert。&lt;/a&gt;它将还原所有代码，然后您可以进行下一次提交。然后头将指向最后一次提交。 还原的提交永远不会删除，但不会影响您的上一次提交。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
