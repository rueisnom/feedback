<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/1338728">
    <body>
      <group id="1338728">
        <trans-unit id="4b92db3c051e1421ad23f595e0b864d8a5eb9028" translate="yes" xml:space="preserve">
          <source>(note that this would also remove all uncommitted changes; use with care).</source>
          <target state="translated">(이는 커밋되지 않은 모든 변경 사항도 제거하므로주의해서 사용하십시오).</target>
        </trans-unit>
        <trans-unit id="4d66258691d869e688c0d1ce20c8a6d85f3f6ed9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git checkout -b repair&lt;/code&gt; Create a new branch to work on.</source>
          <target state="translated">&lt;code&gt;git checkout -b repair&lt;/code&gt; 작업 할 새 분기를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="cc0a041da6998107b8f422c5ecdd2a6991c833cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git checkout b3d92c5&lt;/code&gt; Checkout the last usable commit.</source>
          <target state="translated">&lt;code&gt;git checkout b3d92c5&lt;/code&gt; 마지막으로 사용 가능한 커밋을 체크 아웃하십시오.</target>
        </trans-unit>
        <trans-unit id="f58b8eb8c6bea1a4abfff7e2fa2fd6d4eea2d46b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git checkout master&lt;/code&gt; Checkout master.</source>
          <target state="translated">&lt;code&gt;git checkout master&lt;/code&gt; 체크 아웃 마스터.</target>
        </trans-unit>
        <trans-unit id="f15e563d231c47acefbd9580d8fb4931e1128c83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git cherry-pick 2c6a45b&lt;/code&gt; Run through commit 1.</source>
          <target state="translated">&lt;code&gt;git cherry-pick 2c6a45b&lt;/code&gt; 커밋 1을 통해 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="554d1cd55ccf7fd5dd6f20cc20ec676c1a516165" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git cherry-pick 77b9b82&lt;/code&gt; Run through commit 3.</source>
          <target state="translated">&lt;code&gt;git cherry-pick 77b9b82&lt;/code&gt; 커밋 3을 통해 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="6ed969f23e403fd1147715d25e47a7d950b421ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git merge repair&lt;/code&gt; Merge our new branch onto master.</source>
          <target state="translated">&lt;code&gt;git merge repair&lt;/code&gt; 새로운 브랜치를 마스터에 병합합니다.</target>
        </trans-unit>
        <trans-unit id="1fbccc102745b24ee753fc23ea7e04a8e56e518b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git push -f origin master&lt;/code&gt; Push master to the remote repo.</source>
          <target state="translated">&lt;code&gt;git push -f origin master&lt;/code&gt; 마스터를 원격 저장소로 푸시합니다.</target>
        </trans-unit>
        <trans-unit id="ce5fd19917054cca0118039fd5145c2aed7e62c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git rebase -i &amp;lt;SHA&amp;gt;&lt;/code&gt; then &lt;code&gt;d, drop = remove commit&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git rebase -i &amp;lt;SHA&amp;gt;&lt;/code&gt; 다음에 &lt;code&gt;d, drop = remove commit&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="84ad08b586243d597501c10ed40c455bc0ef53c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git rebase -i HEAD~&amp;lt;number of commits to go back&amp;gt;&lt;/code&gt;, so &lt;code&gt;git rebase -i HEAD~5&lt;/code&gt; if you want to see the last five commits.</source>
          <target state="translated">&lt;code&gt;git rebase -i HEAD~&amp;lt;number of commits to go back&amp;gt;&lt;/code&gt; 이므로 마지막 다섯 개의 커밋을 보려면 &lt;code&gt;git rebase -i HEAD~5&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6110a7a552be36804d2e897ff30ba9fba0e4d6e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset --hard 515b5220c50e3dfbb1063f23789d92ae1d3481a2&lt;/code&gt; //it back-up you to that commit (SHA1 ID of &lt;strong&gt;test change 4&lt;/strong&gt; commit is &lt;strong&gt;515b5220c50e3dfbb1063f23789d92ae1d3481a2&lt;/strong&gt;)</source>
          <target state="translated">&lt;code&gt;git reset --hard 515b5220c50e3dfbb1063f23789d92ae1d3481a2&lt;/code&gt; // 커밋을 백업합니다 ( &lt;strong&gt;테스트 변경 4&lt;/strong&gt; 의 SHA1 ID 커밋은 &lt;strong&gt;515b5220c50e3dfbb1063f23789d92ae1d3481a2&lt;/strong&gt; )</target>
        </trans-unit>
        <trans-unit id="c302cd2729880ee9adb4f39b42c71974525d6556" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset --hard HEAD&lt;/code&gt; did nothing, after checking the &lt;code&gt;reflog&lt;/code&gt;, the last and only &lt;code&gt;HEAD&lt;/code&gt; was the clone - Git wins.</source>
          <target state="translated">&lt;code&gt;git reset --hard HEAD&lt;/code&gt; 는 &lt;code&gt;reflog&lt;/code&gt; 를 확인한 후 마지막으로 유일한 &lt;code&gt;HEAD&lt;/code&gt; 는 클론-Git 승이었습니다.</target>
        </trans-unit>
        <trans-unit id="65bd7116511c0fc5e1b026f4f6de8cc5251d6c28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset --hard HEAD^&lt;/code&gt;  // To remove the last commit from git</source>
          <target state="translated">&lt;code&gt;git reset --hard HEAD^&lt;/code&gt; // git에서 마지막 커밋을 제거하려면</target>
        </trans-unit>
        <trans-unit id="eee048dfe8481e0e432511119986a2e6e4439857" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset --hard HEAD~1&lt;/code&gt; // it back-up you before one commit.</source>
          <target state="translated">&lt;code&gt;git reset --hard HEAD~1&lt;/code&gt; // 한 번의 커밋 전에 백업합니다.</target>
        </trans-unit>
        <trans-unit id="df43558e6fcdc45b79eec16ab3918f9058dc0452" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset --hard b3d92c5&lt;/code&gt; Reset master to last usable commit.</source>
          <target state="translated">&lt;code&gt;git reset --hard b3d92c5&lt;/code&gt; 마지막 사용 가능한 커밋으로 마스터를 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="e071e0410fc5a9a852474de92fc2ce44d4484d6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Additively Change History&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;또한 변경 내역&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bfda979ff53aa098e25ebd6adbc959213dfd764c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Alternative 1:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;대안 1 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="da1d6c31b84914b16d8c82b7f81952a610dc1534" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Alternative 2:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;대안 2 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="823817763684eacd218f2a670d4ed17902c1c5e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Alternative 3:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;대안 3 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d49b14b1cd4650d48dddd898758d69fcb0cccbca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Careful:&lt;/strong&gt;&lt;code&gt;git reset --hard&lt;/code&gt;&lt;em&gt;WILL DELETE YOUR WORKING DIRECTORY CHANGES&lt;/em&gt;. Be sure to &lt;strong&gt;stash any local changes you want to keep&lt;/strong&gt; before running this command.</source>
          <target state="translated">&lt;strong&gt;주의 :&lt;/strong&gt; &lt;code&gt;git reset --hard&lt;/code&gt; 는 &lt;em&gt;작업 디렉토리 변경을 삭제&lt;/em&gt; 합니다. 이 명령을 실행하기 전에 &lt;strong&gt;유지하려는 로컬 변경 사항&lt;/strong&gt; 을 &lt;strong&gt;숨기&lt;/strong&gt; 십시오.</target>
        </trans-unit>
        <trans-unit id="8bc4f8569935adfd09345856a1757d198d1260cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not use the --hard&lt;/strong&gt; flag unless you want to destroy your work in progress since the last commit.</source>
          <target state="translated">마지막 커밋 이후에 진행중인 작업을 제거하지 않으려면 &lt;strong&gt;--hard&lt;/strong&gt; 플래그를 &lt;strong&gt;사용하지 마십시오&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="b2e16c3d0ac5f55fa41f8954ea31ddce74bab961" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For example  your last  commit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예를 들어 마지막 커밋&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f355d7997f9571abdeb599d74dffa72eb117c846" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Forcefully Change History&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;히스토리 변경&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5fc0a7064847214666d4fbc9c01850f402b35de3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;However&lt;/strong&gt;, if others may have pulled it, then you would be better off starting a new branch.  Because when they pull, it will just merge it into their work, and you will get it pushed back up again.</source>
          <target state="translated">&lt;strong&gt;그러나&lt;/strong&gt; 다른 사람들이 그것을 뽑았을 경우 새 지점을 시작하는 것이 좋습니다. 그들이 끌어 당길 때, 그것은 단지 그것들을 그들의 일에 합병시킬 것이고, 당신은 그것을 다시 밀어 올릴 것입니다.</target>
        </trans-unit>
        <trans-unit id="102e9d3a053cbe193ad5aadd2237284dfdf09e7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I'm appending this answer because I don't see why anyone who has just tried to commit work would want to delete all that work because of some mistake using Git!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;방금 작업을 시도한 사람이 Git을 사용하는 실수로 인해 해당 작업을 모두 삭제하려는 이유를 알 수 없기 때문에이 답변을 추가하고 있습니다!&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7a144d31fdbb59147f96380723e8fe59f0d8dc33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If one or more of the commits is tagged, delete the tag(s) first.&lt;/strong&gt; Otherwise the tagged commit is not removed.</source>
          <target state="translated">&lt;strong&gt;하나 이상의 커밋에 태그가 지정된 경우 먼저 태그를 삭제하십시오.&lt;/strong&gt; 그렇지 않으면 태그 된 커밋이 제거되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="267f535bafa2062fe7f1cc5c47b4dc046be2261f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Removing an entire commit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;전체 커밋 제거&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c6b0c87e53ab5e1a1aa1757f8f61a440b5c2105c" translate="yes" xml:space="preserve">
          <source>After thinking &lt;code&gt;git reset --hard &amp;lt;SHA&amp;gt;&lt;/code&gt; had worked, I updated another branch to master and 1... 2... poof! the commit was back - Git wins.</source>
          <target state="translated">&lt;code&gt;git reset --hard &amp;lt;SHA&amp;gt;&lt;/code&gt; 가 효과가 있다고 생각한 후 다른 분기를 마스터로 업데이트하고 1 ... 2 ... 똥! 커밋이 돌아왔다-Git 승.</target>
        </trans-unit>
        <trans-unit id="81466f23699e8691eafccf330632db08ef7f3469" translate="yes" xml:space="preserve">
          <source>All the commands above restore the state of your work tree and index as they were before making the commit, but do not restore the state of the repository. If you look at it, the &quot;removed&quot; commit is not actually removed, it is simply not the one on the tip of the current branch.</source>
          <target state="translated">위의 모든 명령은 커밋을 수행하기 전의 작업 트리 및 인덱스 상태를 복원하지만 리포지토리의 상태는 복원하지 않습니다. 이를 보면 &quot;제거 된&quot;커밋이 실제로 제거되지 않고 단순히 현재 브랜치 끝에있는 것이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="b0a31a2991db503bf45da2505d24fac790378032" translate="yes" xml:space="preserve">
          <source>Another possibility is one of my personal favorite commands:</source>
          <target state="translated">또 다른 가능성은 내가 개인적으로 좋아하는 명령 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="d5b2ded364518b9bbe3354018d3e9b9abd7c0e88" translate="yes" xml:space="preserve">
          <source>As you can see on above image i want to delete revert&quot;test change 2&quot; commit(SHA1 ID: &lt;strong&gt;015b5220c50e3dfbb1063f23789d92ae1d3481a2&lt;/strong&gt;(you can get SHA1 ID by using &lt;code&gt;gitk&lt;/code&gt; command in git bash)).</source>
          <target state="translated">위의 이미지에서 볼 수 있듯이 revert &quot;test change 2&quot;commit (SHA1 ID : &lt;strong&gt;015b5220c50e3dfbb1063f23789d92ae1d3481a2)&lt;/strong&gt; 를 삭제하고 싶습니다 (git bash에서 &lt;code&gt;gitk&lt;/code&gt; 명령을 사용하여 SHA1 ID를 얻을 수 있음).</target>
        </trans-unit>
        <trans-unit id="6d33c17d47e5901787b7055709de852457aa698f" translate="yes" xml:space="preserve">
          <source>Assuming you are sitting on that commit, then this command will wack it...</source>
          <target state="translated">커밋에 앉아 있다고 가정하면이 명령은 그것을 커밋합니다 ...</target>
        </trans-unit>
        <trans-unit id="d1f704896e66cc5e62cd0bf64a834372ff4eeefe" translate="yes" xml:space="preserve">
          <source>Assuming you don't just want to delete the last commit, but you want to delete specific commits of the last n commits, go with:</source>
          <target state="translated">마지막 커밋을 삭제하지 않고 마지막 n 커밋의 특정 커밋을 삭제하려는 경우 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="2b7ec0a27be98d1eff7652f4789af7c6f8bbf4fc" translate="yes" xml:space="preserve">
          <source>Be careful with this though, because if you change something that you &lt;em&gt;have&lt;/em&gt; pushed elsewhere, another approach will be needed unless you are planning to do a force push.</source>
          <target state="translated">다른 곳에서 푸시 한 것을 변경하면 강제 푸시를 계획하지 않는 한 다른 접근 방식이 필요하므로이 점에주의하십시오.</target>
        </trans-unit>
        <trans-unit id="c4829627a5bf1e018d5ff182570c84e24753c4ee" translate="yes" xml:space="preserve">
          <source>By &lt;code&gt;delete&lt;/code&gt;, I mean it is as if I didn't make that commit, and when I do a push in the future, my changes will not push to the remote branch.</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; 는 커밋하지 않은 것처럼 보이고 앞으로 푸시 할 때 변경 사항이 원격 지점으로 푸시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a109c4c6d15b70f25adc62e372803842fdd9b7b2" translate="yes" xml:space="preserve">
          <source>Change YourCommitId for the number of the commit which you want to revert back to.</source>
          <target state="translated">되돌릴 커밋 수에 대한 YourCommitId를 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="20933acd191fe84e954af4e111df5ddf77524155" translate="yes" xml:space="preserve">
          <source>Checking back out to master, time to try &lt;code&gt;git rebase -i &amp;lt;SHA&amp;gt;&lt;/code&gt;, then remove the line... to no avail, sad to say. &quot;&lt;em&gt;If you remove a line here THAT COMMIT WILL BE LOST&lt;/em&gt;&quot;. Ah...glossed over new feature &lt;em&gt;troll the n00b&lt;/em&gt; in the &lt;a href=&quot;https://www.dropbox.com/s/swukg8jqui0wc69/2.8.3.txt&quot;&gt;2.8.3 release notes&lt;/a&gt;.</source>
          <target state="translated">다시 마스터로 체크 아웃하고 &lt;code&gt;git rebase -i &amp;lt;SHA&amp;gt;&lt;/code&gt; 를 시도한 다음 줄을 제거하십시오 ... &quot; &lt;em&gt;여기서 줄을 제거하면 커밋 할 수 없습니다&lt;/em&gt; &quot;. 아 .. &lt;a href=&quot;https://www.dropbox.com/s/swukg8jqui0wc69/2.8.3.txt&quot;&gt;2.8.3 릴리스 정보&lt;/a&gt; 에서 &lt;em&gt;n00b의&lt;/em&gt; 새로운 기능에 대해 설명했습니다 .</target>
        </trans-unit>
        <trans-unit id="985c2265c8fc21f04f4202af59fd7f9496062d5c" translate="yes" xml:space="preserve">
          <source>Checkout the branch you want to revert, then reset your local working copy back to the commit that you want to be the latest one on the remote server (everything after it will go bye-bye). To do this, in SourceTree I right-clicked on the and selected &quot;Reset BRANCHNAME to this commit&quot;. I think the command line is:</source>
          <target state="translated">되돌리려는 지점을 체크 아웃 한 다음 로컬 작업 복사본을 원격 서버에서 최신으로 유지하려는 커밋으로 다시 재설정하십시오 (이후에는 계속됩니다). 이를 위해 SourceTree에서 마우스 오른쪽 단추를 클릭하고 &quot;BRANCHNAME을이 커밋으로 재설정&quot;을 선택했습니다. 커맨드 라인은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1501dad19c952215680d5337162bbf7d77f0f856" translate="yes" xml:space="preserve">
          <source>Delete commits from a branch in Git</source>
          <target state="translated">Git의 브랜치에서 커밋 삭제</target>
        </trans-unit>
        <trans-unit id="d5288292067476ab19a14b904b49b343a8fbfbe9" translate="yes" xml:space="preserve">
          <source>Delete the last commit</source>
          <target state="translated">마지막 커밋 삭제</target>
        </trans-unit>
        <trans-unit id="cfbfdb050621082eae60e284b13d1df8a93cd081" translate="yes" xml:space="preserve">
          <source>Determined to beat Git and preserve the original times, I deleted this local repository and re-cloned from the remote.</source>
          <target state="translated">Git을 이기고 원래 시간을 보존하기로 결정한이 로컬 리포지토리를 삭제하고 원격에서 다시 복제했습니다.</target>
        </trans-unit>
        <trans-unit id="ba2205e4720b9c4875b2063795e768edc9f65654" translate="yes" xml:space="preserve">
          <source>Docs:
&lt;a href=&quot;http://git-scm.com/docs/git-commit.html&quot;&gt;http://git-scm.com/docs/git-commit.html&lt;/a&gt;</source>
          <target state="translated">Docs:
&lt;a href=&quot;http://git-scm.com/docs/git-commit.html&quot;&gt;http://git-scm.com/docs/git-commit.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="482252fa8b6026a7b480156441f6d58f4ba9fafb" translate="yes" xml:space="preserve">
          <source>Exhausting the options:</source>
          <target state="translated">옵션 소진 :</target>
        </trans-unit>
        <trans-unit id="d1b30321a67a8f34a339a84c1b5fad05da1ebaa9" translate="yes" xml:space="preserve">
          <source>FYI -- &lt;code&gt;git reset --hard HEAD&lt;/code&gt; is great if you want to get rid of WORK IN PROGRESS.  It will reset you back to the most recent commit, and erase all the changes in your working tree and index.</source>
          <target state="translated">참고로 &lt;code&gt;git reset --hard HEAD&lt;/code&gt; 는 WORK IN PROGRESS를 제거하고 싶을 때 좋습니다. 가장 최근의 커밋으로 다시 설정되고 작업 트리 및 색인의 모든 변경 사항이 지워집니다.</target>
        </trans-unit>
        <trans-unit id="42bee27f352ee20ccde1028ba1bf775b9ac94daa" translate="yes" xml:space="preserve">
          <source>First reset the branch to the parent of the current commit</source>
          <target state="translated">먼저 현재 커밋의 부모로 분기를 재설정하십시오.</target>
        </trans-unit>
        <trans-unit id="af9f98aaf43ec1375f9bc58d58816e48e4eefdf0" translate="yes" xml:space="preserve">
          <source>For particular commit, you want to reset is following</source>
          <target state="translated">특정 커밋의 경우 재설정을 원합니다.</target>
        </trans-unit>
        <trans-unit id="51c5fcfcfa3641e63c6c280da649bcc906af0b0d" translate="yes" xml:space="preserve">
          <source>For that i can use(all below command work on local only. you need to push after delete):</source>
          <target state="translated">이를 위해 사용할 수 있습니다 (아래의 모든 명령은 로컬에서만 작동합니다. 삭제 후 푸시해야합니다).</target>
        </trans-unit>
        <trans-unit id="05460aa43345a06bbc6ec3e0766b7a4e0c113223" translate="yes" xml:space="preserve">
          <source>Force push to origin</source>
          <target state="translated">원점으로 강제 푸시</target>
        </trans-unit>
        <trans-unit id="9aeb9051871c7a92edee9dcf95ab0fa565db1da5" translate="yes" xml:space="preserve">
          <source>Force-push it to the remote.</source>
          <target state="translated">리모컨에 억지로 밀어 넣으십시오.</target>
        </trans-unit>
        <trans-unit id="44afab30eb10c33911f37c56300b43abcdf0a5ec" translate="yes" xml:space="preserve">
          <source>Good day to you.</source>
          <target state="translated">당신에게 좋은 일.</target>
        </trans-unit>
        <trans-unit id="5660456bd2342d41572b61d084667a86f2c38463" translate="yes" xml:space="preserve">
          <source>Here '2' is the number of commits you want to rebase.</source>
          <target state="translated">여기서 '2'는 리베이스하려는 커밋 수입니다.</target>
        </trans-unit>
        <trans-unit id="88db40b7afb17b19823267284ee78d7675a1f99b" translate="yes" xml:space="preserve">
          <source>Here's another way to do this:</source>
          <target state="translated">이 작업을 수행하는 다른 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b78e98e04fb956744bb28ffe75c6a82b9a8643e" translate="yes" xml:space="preserve">
          <source>I &lt;code&gt;git rebase -i --root&lt;/code&gt;'ed my branch, ignorantly thinking I could reword the first commit differing from the master (the &lt;em&gt;GitHub for Windows&lt;/em&gt; default view is the comparison to master, hiding it's entirety).</source>
          <target state="translated">나는 &lt;code&gt;git rebase -i --root&lt;/code&gt; '내 분기를 무지하게 마스터와 다른 첫 번째 커밋을 무시할 수 있다고 생각 &lt;em&gt;했습니다 (Windows 용 GitHub&lt;/em&gt; 기본보기는 마스터와 비교하여 전체를 숨 깁니다).</target>
        </trans-unit>
        <trans-unit id="2e20cff6091dd4a880af140b6004fe0ebe00283b" translate="yes" xml:space="preserve">
          <source>I didn't wish to &lt;code&gt;git revert&lt;/code&gt; - it would create an additional commit, giving Git the upper hand.</source>
          <target state="translated">나는 &lt;code&gt;git revert&lt;/code&gt; 를 원하지 않았다. 그것은 추가적인 커밋을 만들어 Git에게 우위를 준다.</target>
        </trans-unit>
        <trans-unit id="9b59023fbb67854f01d98a0ef51c81c5894eb6a9" translate="yes" xml:space="preserve">
          <source>I don't recommend this option because you can lost your work in progress.</source>
          <target state="translated">진행중인 작업을 잃을 수 있으므로이 옵션을 권장하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6c9130bb59308d64b23913d997a9d183f2a1e46e" translate="yes" xml:space="preserve">
          <source>I grew a Silicon Valley beard while 900+ commits loaded themselves into Sublime. Exiting with no changes, I charged my battery then proceeded to shave, as all 900+ individual commits nonchalantly rebased - resetting their commit times to now.</source>
          <target state="translated">900 개 이상의 커밋이 Sublime에로드되는 동안 Silicon Valley 수염을 키 웠습니다. 변경없이 종료 한 후, 900 명 이상의 개인 커밋이 모두 무책임하게 다시 커밋하여 커밋 시간을 지금으로 재설정하면서 배터리를 충전 한 다음 면도를 진행했습니다.</target>
        </trans-unit>
        <trans-unit id="7d07e5f7968a37231c185b24027cff07a1a00418" translate="yes" xml:space="preserve">
          <source>I have already pushed. Need to return some commits back remotly.
Have tried many variations, 
but only &lt;a href=&quot;https://stackoverflow.com/a/41927515/6352712&quot;&gt;this&lt;/a&gt; from &lt;a href=&quot;https://stackoverflow.com/users/425964/justin&quot;&gt;Justin&lt;/a&gt; via git bush is working fine for me:</source>
          <target state="translated">나는 이미 밀었다. 커밋을 다시 반환해야합니다. 많은 변형을 시도했지만 git bush를 통해 &lt;a href=&quot;https://stackoverflow.com/users/425964/justin&quot;&gt;Justin의&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/a/41927515/6352712&quot;&gt;이것&lt;/a&gt; 만 이 잘 작동합니다.</target>
        </trans-unit>
        <trans-unit id="8c2ad913b00d698cd501b1274ea40f311d53f466" translate="yes" xml:space="preserve">
          <source>I read git help, and I think the command I should use is &lt;code&gt;git reset --hard HEAD&lt;/code&gt;.  Is this correct?</source>
          <target state="translated">git help를 읽고 사용해야하는 명령은 &lt;code&gt;git reset --hard HEAD&lt;/code&gt; 라고 생각합니다. 이 올바른지?</target>
        </trans-unit>
        <trans-unit id="1f41015da060e52bc94556b3266212aff73b498d" translate="yes" xml:space="preserve">
          <source>I think that there are no means to remove a commit with &lt;a href=&quot;http://git-scm.com/book/ch9-1.html&quot;&gt;porcelain commands&lt;/a&gt;. The only way is to remove it from the log and reflog and then to execute a &lt;code&gt;git prune --expire -now&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://git-scm.com/book/ch9-1.html&quot;&gt;도자기 명령&lt;/a&gt; 으로 커밋을 제거 할 수단이 없다고 생각 합니다 . 유일한 방법은 log와 reflog에서 그것을 제거한 다음 &lt;code&gt;git prune --expire -now&lt;/code&gt; 를 실행하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="cfcd243fcaee3b80f71f49eee86f1b93195df385" translate="yes" xml:space="preserve">
          <source>I would like to know how to delete a commit.</source>
          <target state="translated">커밋을 삭제하는 방법을 알고 싶습니다.</target>
        </trans-unit>
        <trans-unit id="96a571367d9898610f47cd20328876141d8b243f" translate="yes" xml:space="preserve">
          <source>If you already published to-be-deleted commit, use &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-revert.html&quot;&gt;git revert&lt;/a&gt;</source>
          <target state="translated">삭제 될 커밋을 이미 게시 한 경우 &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-revert.html&quot;&gt;git revert를 사용하십시오.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8dbbfe77bb076a97a774b516e7a0174e822682a7" translate="yes" xml:space="preserve">
          <source>If you already pushed it, you will need to do a force push to get rid of it...</source>
          <target state="translated">이미 푸시 한 경우 제거하려면 강제 푸시를 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="5f07f69ee2b374010d7f438229e6cab7e9178928" translate="yes" xml:space="preserve">
          <source>If you already pushed, it may be better to use &lt;code&gt;git revert&lt;/code&gt;, to create a &quot;mirror image&quot; commit that will undo the changes.  However, both commits will be in the log.</source>
          <target state="translated">이미 푸시 한 경우 &lt;code&gt;git revert&lt;/code&gt; 를 사용하여 변경 사항을 취소 할 &quot;미러 이미지&quot;커밋을 만드는 것이 좋습니다. 그러나 두 커밋은 모두 로그에 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ca680c57e79eebe8faffd40434ec200390d75eb" translate="yes" xml:space="preserve">
          <source>If you didn't publish changes, to remove latest commit, you can do</source>
          <target state="translated">변경 사항을 게시하지 않은 경우 최신 커밋을 제거하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="d0d81f5f4aa174a01caed9744d7ae3997de0bc6c" translate="yes" xml:space="preserve">
          <source>If you have newly staged changes they'll be combined with the last commit (that you're trying to get rid of) and will replace that commit.</source>
          <target state="translated">새로 준비한 변경 사항이 있으면 마지막 커밋과 결합되어 제거하려는 커밋을 대체합니다.</target>
        </trans-unit>
        <trans-unit id="6596b4ac72d240b0ed2aa62ebeda6c452c1506fe" translate="yes" xml:space="preserve">
          <source>If you have not yet pushed the commit anywhere, you can use &lt;a href=&quot;http://git-scm.com/docs/git-rebase&quot;&gt;&lt;code&gt;git rebase -i&lt;/code&gt;&lt;/a&gt; to remove that commit. First, find out how far back that commit is (approximately). Then do:</source>
          <target state="translated">아직 커밋을 푸시하지 않은 경우 &lt;a href=&quot;http://git-scm.com/docs/git-rebase&quot;&gt; &lt;code&gt;git rebase -i&lt;/code&gt; &lt;/a&gt; 를 사용하여 커밋을 제거 할 수 있습니다. 먼저 커밋이 얼마나 멀리 있는지 확인하십시오. 그런 다음 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="44e3e3f8146c430375da4ee5925227356f44dc40" translate="yes" xml:space="preserve">
          <source>If you just messed up your last commit (wrong message, forgot to add some changes) and want to fix it before pushing it to a public repo why not use:</source>
          <target state="translated">마지막 커밋을 엉망으로 만들었을 때 (잘못된 메시지, 변경 사항을 추가하지 않은 경우) 공개 리포지토리로 푸시하기 전에 수정하고 싶은 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="40e1570206d278903e87bb0fcce50d747d648271" translate="yes" xml:space="preserve">
          <source>If you want to fix up your latest commit, you can undo the commit, and unstage the files in it, by doing:</source>
          <target state="translated">최신 커밋을 수정하려면 다음을 수행하여 커밋을 실행 취소하고 커밋을 취소 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c32e117464727f0450f94b5cd20d85260abcabf9" translate="yes" xml:space="preserve">
          <source>If you want to get rid of your latest commit, and do not want to keep the code changes, you can do a &quot;hard&quot; reset.</source>
          <target state="translated">최신 커밋을 제거하고 코드 변경 사항을 유지하지 않으려면 &quot;하드&quot;재설정을 수행하면됩니다.</target>
        </trans-unit>
        <trans-unit id="68f21e507db554f3b7a22808df6f609e9a72b5df" translate="yes" xml:space="preserve">
          <source>If you want to keep the history, showing the commit and the revert, you should use:</source>
          <target state="translated">커밋과 되돌리기를 보여주는 기록을 유지하려면 다음을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="87a8f8872c341d5920414f07785aad472c8d093b" translate="yes" xml:space="preserve">
          <source>If you want to keep your changes , and remove recent commits</source>
          <target state="translated">변경 사항을 유지하고 최근 커밋을 제거하려는 경우</target>
        </trans-unit>
        <trans-unit id="8c8bfe5072413014db38c85be5dce3bc7e9daaf5" translate="yes" xml:space="preserve">
          <source>If you want to keep your work and just 'undo' that commit command (you caught before pushing to repo):</source>
          <target state="translated">작업을 유지하고 해당 커밋 명령을 '실행 취소'하려는 경우 (리포지토리로 푸시하기 전에 적발) :</target>
        </trans-unit>
        <trans-unit id="e6f5eba4582d5bcee12bca1ae8b4787e484c1768" translate="yes" xml:space="preserve">
          <source>If you want to uncommit N commits, but keep the code changes in your working directory:</source>
          <target state="translated">N 커밋을 커밋하지 않고 작업 디렉토리에서 코드 변경 사항을 유지하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="03d853e9fff6c7aee87d2ac84282fbe4e68e5784" translate="yes" xml:space="preserve">
          <source>If you've already pushed, first find the commit you want to be at HEAD &lt;em&gt;($GIT_COMMIT_HASH_HERE)&lt;/em&gt;, then run the following:</source>
          <target state="translated">이미 푸시 한 경우 먼저 HEAD &lt;em&gt;($ GIT_COMMIT_HASH_HERE)&lt;/em&gt; 에있을 커밋을 찾은 후 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="d24215566781e2696f7f247fac57197b8e0de6fb" translate="yes" xml:space="preserve">
          <source>In my case, my magic code for this pupose is this one:</source>
          <target state="translated">제 경우에는이 pupose에 대한 내 마법 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f0dba4d1c4b202c5ee3e3e686a01d606a7437de1" translate="yes" xml:space="preserve">
          <source>Lastly, if you need to find a commit that you &quot;deleted&quot;, it is typically present in &lt;code&gt;git reflog&lt;/code&gt; unless you have garbage collected your repository.</source>
          <target state="translated">마지막으로, &quot;삭제 된&quot;커밋을 찾아야하는 경우, 저장소를 가비지 수집하지 않은 경우 일반적으로 &lt;code&gt;git reflog&lt;/code&gt; 에 존재합니다.</target>
        </trans-unit>
        <trans-unit id="e9cd9f6a58ba27481ffff39cc43119f0d5e65dd2" translate="yes" xml:space="preserve">
          <source>Likewise, if you want to discard the last N commits, and do not want to keep the code changes:</source>
          <target state="translated">마찬가지로 마지막 N 커밋을 삭제하고 코드 변경 사항을 유지하지 않으려는 경우 :</target>
        </trans-unit>
        <trans-unit id="745b91d049d82bd095df62bde9f98633b90f4e8c" translate="yes" xml:space="preserve">
          <source>Note: &lt;strong&gt;You need to have admin rights over the repo&lt;/strong&gt; since you are using &lt;code&gt;--hard&lt;/code&gt; and &lt;code&gt;-f&lt;/code&gt;.</source>
          <target state="translated">참고 : &lt;code&gt;--hard&lt;/code&gt; 및 &lt;code&gt;-f&lt;/code&gt; 를 사용 &lt;strong&gt;하고 있으므로 repo에 대한 관리자 권한이 있어야합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="a474912ab0caa8c6bc8338cc8e30575ef75e301f" translate="yes" xml:space="preserve">
          <source>Now it had re-added a most recent unneeded commit to master I wished to remove, so proceeded like so.</source>
          <target state="translated">이제 내가 제거하고 싶은 마스터에 대한 가장 최근의 불필요한 커밋을 다시 추가 했으므로 계속 진행했습니다.</target>
        </trans-unit>
        <trans-unit id="ae9e14aa8bb8834d2e265c5824898ea78b888b59" translate="yes" xml:space="preserve">
          <source>Now you want to delete this commit then an Easy way to do this following</source>
          <target state="translated">이제이 커밋을 삭제하고 다음을 수행하는 쉬운 방법을 원합니다.</target>
        </trans-unit>
        <trans-unit id="953810e2426fca2698e571670180a9ecf83be959" translate="yes" xml:space="preserve">
          <source>Obviously replace &quot;SHA&quot; with the reference you want to get rid of. The &quot;^&quot; in that command is literal.</source>
          <target state="translated">&quot;SHA&quot;를 제거하려는 참조로 바꾸십시오. 해당 명령에서 &quot;^&quot;는 리터럴입니다.</target>
        </trans-unit>
        <trans-unit id="6060a8ba587122239361c1b3752e10cbb1237ea2" translate="yes" xml:space="preserve">
          <source>Of course if you amend a commit after you've pushed it, you're rewriting history so if you do that be sure to understand the implications.</source>
          <target state="translated">물론 커밋을 푸시 한 후에 커밋을 수정하면 히스토리를 다시 작성하므로 의미를 이해해야합니다.</target>
        </trans-unit>
        <trans-unit id="b35e70c607d6e4773828839da8a4ddf1a611d431" translate="yes" xml:space="preserve">
          <source>Or, you could look at the output of &lt;code&gt;git log&lt;/code&gt;, find the commit id of the commit you want to back up to, and then do this:</source>
          <target state="translated">또는 &lt;code&gt;git log&lt;/code&gt; 의 출력을보고 백업하려는 커밋의 커밋 ID를 찾은 다음 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="5e0feea6b064c5e1d9ee6b932b0af838d9a11bbf" translate="yes" xml:space="preserve">
          <source>PS: CommitId refers the one which you want to revert back to</source>
          <target state="translated">PS : CommitId는 되돌리려는 것을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="0066fef5eabf90f9eda22966ce542417a292a5e3" translate="yes" xml:space="preserve">
          <source>Reference: &lt;a href=&quot;https://ncona.com/2011/07/how-to-delete-a-commit-in-git-local-and-remote/&quot;&gt;How to delete a commit in git, local and remote&lt;/a&gt;</source>
          <target state="translated">참조 : &lt;a href=&quot;https://ncona.com/2011/07/how-to-delete-a-commit-in-git-local-and-remote/&quot;&gt;자식, 로컬 및 원격에서 커밋을 삭제하는 방법&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a38c53ffb5c282ba793e916879e175c8a183753f" translate="yes" xml:space="preserve">
          <source>Reset on local branch</source>
          <target state="translated">현지 지점에서 재설정</target>
        </trans-unit>
        <trans-unit id="f531bce04c421096a7c9624ebdf7459ce4c4989a" translate="yes" xml:space="preserve">
          <source>Say we want to remove commits 2 &amp;amp; 4 from the repo.</source>
          <target state="translated">저장소에서 커밋 2 &amp;amp; 4를 제거하고 싶다고 가정 해보십시오.</target>
        </trans-unit>
        <trans-unit id="e1905f336b926873eafad9091e256f8012bc4da6" translate="yes" xml:space="preserve">
          <source>Since you just checked out your branch from remote, you're not going to have any local changes to worry about losing. But this would lose them if you did.</source>
          <target state="translated">방금 원격에서 지점을 체크 아웃 했으므로 손실에 대해 걱정할 로컬 변경 사항이 없습니다. 그러나 만약 당신이 그렇게하면 그것들을 잃을 것입니다.</target>
        </trans-unit>
        <trans-unit id="257b9b08a37fd673e243e933ff17b8c88000b929" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;https://gist.github.com/sagarjethi/c07723b2f4fa74ad8bdf229166cf79d8&quot;&gt;https://gist.github.com/sagarjethi/c07723b2f4fa74ad8bdf229166cf79d8&lt;/a&gt;</source>
          <target state="translated">출처 : &lt;a href=&quot;https://gist.github.com/sagarjethi/c07723b2f4fa74ad8bdf229166cf79d8&quot;&gt;https://gist.github.com/sagarjethi/c07723b2f4fa74ad8bdf229166cf79d8&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cdde4f20ba31a24db2cc7ae71135c8353631907b" translate="yes" xml:space="preserve">
          <source>Steps</source>
          <target state="translated">Steps</target>
        </trans-unit>
        <trans-unit id="58c53edf5f4bb3ba6e15b6687d6604d277815434" translate="yes" xml:space="preserve">
          <source>Take backup of your code in to temp folder. Following command will reset same as server.</source>
          <target state="translated">임시 폴더에 코드를 백업하십시오. 다음 명령은 서버와 동일하게 재설정됩니다.</target>
        </trans-unit>
        <trans-unit id="14f22d4e6824c3b684660bd71774043dba5eb8ea" translate="yes" xml:space="preserve">
          <source>Test it and tell me. I have tried a few different ones, but this one was the only that helped me.</source>
          <target state="translated">그것을 테스트하고 말해줘. 나는 몇 가지 다른 것을 시도했지만 이것 만이 나를 도왔다.</target>
        </trans-unit>
        <trans-unit id="33e692e2551ca39d58666652cf0cea9528957f81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HEAD~1&lt;/code&gt; means the commit before head.</source>
          <target state="translated">&lt;code&gt;HEAD~1&lt;/code&gt; 은 커밋 전에 커밋을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="67c69d80b3797000a83f9fa877c8ff4eb0653030" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~N&lt;/code&gt; means rebase the last &lt;code&gt;N&lt;/code&gt; commits (&lt;code&gt;N&lt;/code&gt; must be a number, for example &lt;code&gt;HEAD~10&lt;/code&gt;). Then, you can edit the file that Git presents to you to delete the offending commit. On saving that file, Git will then rewrite all the following commits as if the one you deleted didn't exist.</source>
          <target state="translated">&lt;code&gt;~N&lt;/code&gt; 은 마지막 &lt;code&gt;N&lt;/code&gt; 커밋을 리베이스하는 것을 의미합니다 ( &lt;code&gt;N&lt;/code&gt; 은 숫자 여야합니다 (예 : &lt;code&gt;HEAD~10&lt;/code&gt; )). 그런 다음 Git이 제공하는 파일을 편집하여 문제가되는 커밋을 삭제할 수 있습니다. 해당 파일을 저장하면 Git은 삭제 한 커밋이 존재하지 않는 것처럼 다음 커밋을 모두 다시 작성합니다.</target>
        </trans-unit>
        <trans-unit id="c9ad62906f0511afd79d671adfae9e83a883953f" translate="yes" xml:space="preserve">
          <source>The Git Book has a good &lt;a href=&quot;http://git-scm.com/book/en/Git-Branching-Rebasing&quot;&gt;section on rebasing&lt;/a&gt; with pictures and examples.</source>
          <target state="translated">Git Book은 그림과 예제로 &lt;a href=&quot;http://git-scm.com/book/en/Git-Branching-Rebasing&quot;&gt;rebasing에&lt;/a&gt; 대한 좋은 섹션을 가지고 있습니다.</target>
        </trans-unit>
        <trans-unit id="c9e118ff0c6703e901391e677dd298a0e7bd733f" translate="yes" xml:space="preserve">
          <source>The mistake:</source>
          <target state="translated">실수:</target>
        </trans-unit>
        <trans-unit id="df7e72c4e856ebdeb027f94638db8e9c29d13a3b" translate="yes" xml:space="preserve">
          <source>The solution:</source>
          <target state="translated">해결책:</target>
        </trans-unit>
        <trans-unit id="5c1a0b46dd2a77265585885a3310d98ffc47632b" translate="yes" xml:space="preserve">
          <source>Then each place the repo has been cloned, run:</source>
          <target state="translated">그런 다음 리포지토리가 복제 된 각 위치에서 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="516a65a8d341e713504da0b68d69ea30f2df23ad" translate="yes" xml:space="preserve">
          <source>Then in the text editor change the word &lt;code&gt;pick&lt;/code&gt; to &lt;code&gt;drop&lt;/code&gt; next to every commit you would like to remove. Save and quit the editor. Voila!</source>
          <target state="translated">그런 다음 텍스트 편집기에서 제거하려는 모든 커밋 옆에 &lt;code&gt;pick&lt;/code&gt; 이라는 단어를 변경하십시오. 편집기를 저장하고 종료하십시오. 짜잔!</target>
        </trans-unit>
        <trans-unit id="57bc2c81ed066050c0080e31433ade12c1fafb8c" translate="yes" xml:space="preserve">
          <source>Then navigate to your repository's local directory and run this command:</source>
          <target state="translated">그런 다음 저장소의 로컬 디렉토리로 이동하여 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="b099ac28c4326ac570f4d9c1956512f65cc8f977" translate="yes" xml:space="preserve">
          <source>Then you will be able to choose one of these options.</source>
          <target state="translated">그런 다음이 옵션 중 하나를 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd2c142717faff37fd8bb94acc2747332ff26df0" translate="yes" xml:space="preserve">
          <source>These lines can be re-ordered; they are executed from top to bottom.
 If you remove a line here THAT COMMIT WILL BE LOST.
 However, if you remove everything, the rebase will be aborted.
 Note that empty commits are commented out</source>
          <target state="translated">이 줄은 순서를 바꿀 수 있습니다. 그것들은 위에서 아래로 실행됩니다. 여기서 줄을 제거하면 커밋이 손실됩니다. 그러나 모든 것을 제거하면 리베이스가 중단됩니다. 빈 커밋은 주석 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="1c68f6f7024438aa3046a481d2c1addaf9440e70" translate="yes" xml:space="preserve">
          <source>This will erase all commits after the current one in your local repository but only for that one branch.</source>
          <target state="translated">로컬 리포지토리에서 현재 커밋 이후 모든 커밋이 지워지지 만 해당 커밋 하나만 지워집니다.</target>
        </trans-unit>
        <trans-unit id="d502420e26f879a1469087bb42f5c742bb32479b" translate="yes" xml:space="preserve">
          <source>This will return your repository to its state before the git add commands that staged the files. Your changes will be in your working directory. HEAD~1 refers to the commit below the current tip of the branch.</source>
          <target state="translated">그러면 파일을 스테이징 한 git add 명령 전에 리포지토리가 상태로 돌아갑니다. 변경 사항은 작업 디렉토리에 있습니다. HEAD ~ 1은 분기의 현재 팁 아래 커밋을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f4900beac84b86412a7d07e64c8e44534ecb3c2e" translate="yes" xml:space="preserve">
          <source>This will start the rebase in interactive mode &lt;code&gt;-i&lt;/code&gt; at the point just before the commit you want to whack. The editor will start up listing all of the commits since then. Delete the line containing the commit you want to obliterate and save the file. Rebase will do the rest of the work, deleting only that commit, and replaying all of the others back into the log.</source>
          <target state="translated">이것은 커밋하기 직전 시점에서 대화식 모드 &lt;code&gt;-i&lt;/code&gt; 로 리베이스를 시작합니다. 에디터는 그 이후로 모든 커밋을 나열하기 시작합니다. 제거하려는 커밋이 포함 된 행을 삭제하고 파일을 저장하십시오. Rebase는 나머지 작업을 수행하고 해당 커밋 만 삭제하고 다른 모든 작업은 다시 로그로 재생합니다.</target>
        </trans-unit>
        <trans-unit id="30fb09222b0f7ce00eb0523b723c5e3ee83290ef" translate="yes" xml:space="preserve">
          <source>To delete in a remote branch, use</source>
          <target state="translated">원격 지점에서 삭제하려면</target>
        </trans-unit>
        <trans-unit id="701868dd44030892fc04d71748a312bb7139bcc4" translate="yes" xml:space="preserve">
          <source>To delete in local branch, use</source>
          <target state="translated">로컬 지점에서 삭제하려면</target>
        </trans-unit>
        <trans-unit id="39365a8d6dab7b0a2f600f4608fd40e8fb368108" translate="yes" xml:space="preserve">
          <source>To get the most recent SHA, I checked the remote repository on github.com - minor win.</source>
          <target state="translated">최신 SHA를 얻으려면 github.com에서 원격 저장소를 확인했습니다.</target>
        </trans-unit>
        <trans-unit id="ef1eb937d57e41d2e2093fa3da5c3197276eb45f" translate="yes" xml:space="preserve">
          <source>To verify, I checked out to another branch, and voila - no hiding commit to fetch/pull from the master.</source>
          <target state="translated">확인하기 위해 다른 지점에 체크 아웃했으며 voila-마스터에서 가져 오기 / 당기기 위해 커밋을 숨기지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="889cb33078f93d7d9254fd399e6526d844221110" translate="yes" xml:space="preserve">
          <source>Try &lt;code&gt;git revert &amp;lt;commit hash&amp;gt;&lt;/code&gt;. &lt;a href=&quot;https://www.atlassian.com/git/tutorials/undoing-changes/git-revert&quot;&gt;Revert&lt;/a&gt; will create a &lt;em&gt;new&lt;/em&gt; commit that undoes the specified commit.</source>
          <target state="translated">&lt;code&gt;git revert &amp;lt;commit hash&amp;gt;&lt;/code&gt; 시도하십시오. &lt;a href=&quot;https://www.atlassian.com/git/tutorials/undoing-changes/git-revert&quot;&gt;되돌리기&lt;/a&gt; 는 지정된 커밋을 취소하는 &lt;em&gt;새로운&lt;/em&gt; 커밋을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="19d02bc12c1e811c9be9a24fe184d2d6c6e700a3" translate="yes" xml:space="preserve">
          <source>What I do usually when I commit and push (if anyone pushed his commit this solve the problem):</source>
          <target state="translated">내가 커밋하고 푸시 할 때 일반적으로하는 일</target>
        </trans-unit>
        <trans-unit id="2a70b7832ea9f846685043972515efa0bdb8f748" translate="yes" xml:space="preserve">
          <source>When you issue &lt;code&gt;git log&lt;/code&gt; you'll see both the &quot;wrong&quot; commit and revert log messages.</source>
          <target state="translated">&lt;code&gt;git log&lt;/code&gt; 를 발행하면 &quot;잘못된&quot;커밋 및 되돌리기 로그 메시지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="03923623bf2bef6b881c7670f54c3f6df241fa11" translate="yes" xml:space="preserve">
          <source>You can also pass the '--no-edit' option instead of '-m' if you would prefer to use the previous commit's message.</source>
          <target state="translated">이전 커밋 메시지를 사용하려는 경우 '-m'대신 '--no-edit'옵션을 전달할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c9a202954ee7cae9dd55fa60d9beb9f7c9033b3" translate="yes" xml:space="preserve">
          <source>You can keep your work and only undo the commit.</source>
          <target state="translated">작업을 유지하고 커밋을 실행 취소 만 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93b39e19f453fced94de248d0efbd662da9694e6" translate="yes" xml:space="preserve">
          <source>You can simply remove that commit using option &quot;d&quot; or Removing a line that has your commit.</source>
          <target state="translated">옵션 &quot;d&quot;를 사용하여 커밋을 제거하거나 커밋이있는 행을 제거하면됩니다.</target>
        </trans-unit>
        <trans-unit id="54dc32946de529fdad9d8c6bca91633f24297121" translate="yes" xml:space="preserve">
          <source>You have many alternatives, for example:</source>
          <target state="translated">예를 들어, 많은 대안이 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb5936a817bd4c6ea21a209ba29761c28ac16ecd" translate="yes" xml:space="preserve">
          <source>You will be now at previous head. Pull the branch. Push new code. Commit will be removed from git</source>
          <target state="translated">당신은 지금 이전 머리에있을 것입니다. 가지를 당깁니다. 새 코드를 푸시하십시오. 커밋은 자식에서 제거됩니다</target>
        </trans-unit>
        <trans-unit id="1a586f7ddbd3e680eded7fab979c565199ef8b24" translate="yes" xml:space="preserve">
          <source>after delete:</source>
          <target state="translated">삭제 후 :</target>
        </trans-unit>
        <trans-unit id="f0c68644aad61f3f96935569eed5547ae4b983ba" translate="yes" xml:space="preserve">
          <source>enter the message explaining why are you reverting and then:</source>
          <target state="translated">되돌리기 이유를 설명하는 메시지를 입력 한 후 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="ddb31e750e6c1c908dfac98ac2f2ecf6698b4d20" translate="yes" xml:space="preserve">
          <source>git push origin +aa61ab32^:master</source>
          <target state="translated">git push origin + aa61ab32 ^ : 마스터</target>
        </trans-unit>
        <trans-unit id="103c1fac527e557fea4472b037eddbdd31cbda77" translate="yes" xml:space="preserve">
          <source>git push origin HEAD --force</source>
          <target state="translated">git push origin HEAD-힘</target>
        </trans-unit>
        <trans-unit id="cf136d60baf6dbfd88ddc6f362f5619f4ffa9281" translate="yes" xml:space="preserve">
          <source>git reset --hard</source>
          <target state="translated">git reset-하드</target>
        </trans-unit>
        <trans-unit id="0a2ffabb6c1b23361a8f6cd6fc1a09fea3dc19d6" translate="yes" xml:space="preserve">
          <source>hope this help</source>
          <target state="translated">이 도움을 바랍니다</target>
        </trans-unit>
        <trans-unit id="caa1f6c46e6e29f9f4a967617d593bff1ebd8b86" translate="yes" xml:space="preserve">
          <source>if you want to rebase all the commits.</source>
          <target state="translated">모든 커밋을 리베이스하려는 경우.</target>
        </trans-unit>
        <trans-unit id="f569834b9f4ecb47276ea40f8ab2653abae05051" translate="yes" xml:space="preserve">
          <source>use git revert  &lt;a href=&quot;https://git-scm.com/docs/git-revert&quot;&gt;https://git-scm.com/docs/git-revert&lt;/a&gt; .It will revert all code then you can do next commit.Then head will point to that last commit. reverted commits never delete but it will not affect on you last commit.</source>
          <target state="translated">git revert &lt;a href=&quot;https://git-scm.com/docs/git-revert&quot;&gt;https://git-scm.com/docs/git-revert&lt;/a&gt; 사용 하십시오 . 모든 코드를 되돌리고 다음 커밋을 수행 할 수 있습니다. 그러면 head는 마지막 커밋을 가리 킵니다. 되 돌린 커밋은 삭제되지 않지만 마지막 커밋에는 영향을 미치지 않습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
