<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/136035">
    <body>
      <group id="136035">
        <trans-unit id="5aaf15b051a125920955bd69c723d28dfb1dc6e9" translate="yes" xml:space="preserve">
          <source>...with some crazy variation of this next code smell, I mean example, only to pretend that you're saving a few keystrokes.</source>
          <target state="translated">............用一些疯狂的变体,我指的是下一个代码的气味,我指的是例子,只是为了装作你在节省几个按键。</target>
        </trans-unit>
        <trans-unit id="c8d3c34755a48a88bcc07da0a84528f3d86616bd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.guid.tryparse.aspx&quot;&gt;TryParse&lt;/a&gt; never throws exceptions and returns false if format is wrong, setting WebId to &lt;code&gt;Guid.Empty&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.guid.tryparse.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;TryParse&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;绝不会引发异常，如果格式错误，则将&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Guid.Empty&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;设置为&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Guid.Empty&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，则返回false &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6a520e492fbc31afda2a4ca2670d6f40c2c2beb0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/questions/136035/catch-multiple-exceptions-at-once/136092#136092&quot;&gt;Joseph Daigle's Answer&lt;/a&gt; is a good solution, but I found the following structure to be a bit tidier and less error prone.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/136035/catch-multiple-exceptions-at-once/136092#136092&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;约瑟夫&amp;middot;戴格尔（Joseph Daigle）的&amp;ldquo;答案&amp;rdquo;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是一个很好的解决方案，但我发现以下结构较为简洁且不易出错。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4e3308c299b7c14b6f16899d7f58eff6d125a522" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Basically provide another empty &lt;code&gt;Catch&lt;/code&gt; overload which returns itself)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（基本上提供另一个空的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Catch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;重载，它会返回自身）&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3aaed97268833a9918a2ba771f9d165a93561908" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms182271.aspx&quot;&gt;CA1800: Do not cast unnecessarily&lt;/a&gt;&lt;/em&gt; says to &quot;consider testing the result of the 'as' operator instead&quot;, but if you do that, you'll be writing more code than if you catch each exception separately.</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms182271.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CA1800：不必进行不必要的强制转换&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，而是&amp;ldquo;考虑测试'as'运算符的结果&amp;rdquo;，但是如果这样做的话，与单独捕获每个异常的情况相比，您将编写更多的代码。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c2ba87e75a77003d169867541b8e1d7b0dbe538c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Also, specifically &lt;code&gt;Guid&lt;/code&gt; has the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.guid.tryparse(v=vs.110).aspx&quot;&gt;&lt;code&gt;Guid.TryParse&lt;/code&gt;&lt;/a&gt; method.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;另外，特别是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Guid&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;具有&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.guid.tryparse(v=vs.110).aspx&quot;&gt; &lt;code&gt;Guid.TryParse&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ab87e8771981891dc3537b561271b84c06af8064" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Can I catch multiple exceptions at once?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我可以一次捕获多个异常吗？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a5c15139e290a34ffa9e286ddfe7f8c968c4f93f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT:&lt;/strong&gt; I do concur with others who are saying that, as of C# 6.0, exception filters are now a perfectly fine way to go: &lt;code&gt;catch (Exception ex) when (ex is ... || ex is ... )&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;编辑：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我确实同意其他人的说法，从C＃6.0开始，异常过滤器现在是一种完美的解决方法：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;catch (Exception ex) when (ex is ... || ex is ... )&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52eee279cccac78795d9bd9b538cdd8748c99dc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit:&lt;/strong&gt; 
The &lt;a href=&quot;http://www.codeproject.com/Articles/853207/What-s-new-in-Csharp-Exception-Filters&quot;&gt;exception filtering&lt;/a&gt; in C# 6.0 will make the syntax a bit cleaner and comes with a &lt;a href=&quot;https://stackoverflow.com/a/27082164/2802543&quot;&gt;number of other benefits&lt;/a&gt; over any current solution. (most notably leaving the stack unharmed)</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;编辑：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; C＃6.0中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 的&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.codeproject.com/Articles/853207/What-s-new-in-Csharp-Exception-Filters&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;异常过滤&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将使语法更简洁，并且&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;比任何当前解决方案&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;都具有&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/27082164/2802543&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;许多其他好处&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（最值得注意的是使堆栈不受损害）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="feb4ca963f08224ee8b4571f84c00c0036a54d42" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Full Error Handling Example (Copy-Paste to new Console app)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完整的错误处理示例（复制粘贴到新的控制台应用程序）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3b3141404e1e36c9cdf3d5f38083a4df531a0430" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How do I avoid writing duplicate code given that I can't catch multiple exception types in the same catch() block?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;考虑到我无法在同一catch（）块中捕获多个异常类型，如何避免编写重复的代码？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="850301d4e8188e719ad5b1ae8a67aef29261306f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IsAnyOf.cs Extension (See Full Error Handling Example for Dependancies)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IsAnyOf.cs扩展（有关依赖关系，请参见完整的错误处理示例）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="542b69fedc4d99881098791ff30ae7adef1bcd67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ORIGINAL:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ORIGINAL:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9a5181d2939565f52ceafa914e74e4bfb90a7f80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Two Sample NUnit Unit Tests&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;两个NUnit单元测试样本&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="372f60334aa5d8918e891d52c780ab816ff7ba23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Usage&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="06d054af62aba5965b1c775157b32a35d2c79e1d" translate="yes" xml:space="preserve">
          <source>@Micheal</source>
          <target state="translated">@Micheal</target>
        </trans-unit>
        <trans-unit id="3389e9e3d38bd01137e197e890e0a7791c71610c" translate="yes" xml:space="preserve">
          <source>A return statement is not necessary</source>
          <target state="translated">没有必要提交退货声明</target>
        </trans-unit>
        <trans-unit id="b65d43af93dde5ad9ef5b8514f0df207615395e0" translate="yes" xml:space="preserve">
          <source>Actually, you can put basically any condition inside that &lt;code&gt;when&lt;/code&gt; clause:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实际上，基本上可以在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;when&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;子句中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;放入任何条件&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cca8d2a8a73470cc7df126300c74b7f20e4a6720" translate="yes" xml:space="preserve">
          <source>Also, it seems the &quot;is&quot; operator might degrade performance slightly.</source>
          <target state="translated">另外,似乎 &quot;是 &quot;操作者的性能可能会略有下降。</target>
        </trans-unit>
        <trans-unit id="caf67b064a82111165779047a0bb4a5990dbbf9a" translate="yes" xml:space="preserve">
          <source>Alternatively, this can be all done inline (the right hand side of the when statement just has to be a boolean expression).</source>
          <target state="translated">另外,这也可以全部内联完成(when语句的右侧必须是一个布尔表达式)。</target>
        </trans-unit>
        <trans-unit id="347c0c93fde8f4ac618ed62172bad2761087e0f6" translate="yes" xml:space="preserve">
          <source>And CatchMany implementation:</source>
          <target state="translated">和CatchMany的实现。</target>
        </trans-unit>
        <trans-unit id="d53cb30e5dd50782f910c1090f2fcd20924a8cd3" translate="yes" xml:space="preserve">
          <source>And as you can see in the &lt;code&gt;MSIL&lt;/code&gt; the code is not translated to &lt;code&gt;if&lt;/code&gt; statements, but to &lt;code&gt;Filters&lt;/code&gt;, and &lt;code&gt;Exceptions&lt;/code&gt; cannot be throw from within the areas marked with &lt;code&gt;Filter 1&lt;/code&gt; and &lt;code&gt;Filter 2&lt;/code&gt; but the filter throwing the &lt;code&gt;Exception&lt;/code&gt; will fail instead, also the last comparison value pushed to the stack before the &lt;code&gt;endfilter&lt;/code&gt; command will determine the success/failure of the filter (&lt;code&gt;Catch 1&lt;/code&gt;&lt;strong&gt;&lt;em&gt;XOR&lt;/em&gt;&lt;/strong&gt;&lt;code&gt;Catch 2&lt;/code&gt; will execute accordingly):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;正如您在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;MSIL&lt;/code&gt; 中&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;看到的那样，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代码不会转换为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;语句，而是转换为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Filters&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，并且&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不能从标记为&lt;/font&gt; &lt;code&gt;Filter 1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt; &lt;code&gt;Filter 2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;的区域内引发&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exceptions&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，但是&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;引发&lt;/font&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;的过滤器&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将失败，最后一个&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;异常&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt; &lt;code&gt;endfilter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;命令&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;之前将比较值压入堆栈&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将确定过滤器的成功/失败（&lt;/font&gt; &lt;code&gt;Catch 1&lt;/code&gt; &lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;XOR&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt; &lt;code&gt;Catch 2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;将相应执行）：&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea816fd8da8992b183fbc63d106dea153a991102" translate="yes" xml:space="preserve">
          <source>And of course FxCop barks at you and so you have to &lt;strong&gt;&lt;em&gt;also&lt;/em&gt;&lt;/strong&gt; add an attribute to your code that has precisely zip to do with the running program, and is only there to tell FxCop to ignore an issue that in 99.9% of cases it is totally correct in flagging. And, sorry, I might be mistaken, but doesn't that &quot;ignore&quot; attribute end up actually compiled into your app?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当然，FxCop会吠叫您，因此您&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;还&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必须在代码中添加一个属性，该属性与正在运行的程序具有精确的zip关系，仅是要告诉FxCop忽略一个问题，即在99.9％的情况下，它完全是正确标记。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而且，对不起，我可能会弄错了，但是，&amp;ldquo; ignore&amp;rdquo;属性最终不会最终编译到您的应用中吗？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="84d00784eb2e326dac15d825625d91a29b5bfea5" translate="yes" xml:space="preserve">
          <source>And the other solution is to catch the Exception object and handle it accordingly. The most literal translation for this, based on the context above is this:</source>
          <target state="translated">而另一种解决方案是抓住Exception对象并进行相应的处理。根据上面的语境,最直白的翻译是这样的。</target>
        </trans-unit>
        <trans-unit id="e23465a9f88e5b869b70e2eda4aabcd1e17d5bdd" translate="yes" xml:space="preserve">
          <source>And use them like this:</source>
          <target state="translated">而且要像这样使用。</target>
        </trans-unit>
        <trans-unit id="83dc80cdafbb6519dd31ddbbe7cea338e549d4df" translate="yes" xml:space="preserve">
          <source>Any other exceptions will be thrown and the code &lt;code&gt;WebId = Guid.Empty;&lt;/code&gt; won't be hit. If you don't want other exceptions to crash your program, just add this AFTER the other two catches:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;其他任何异常都将引发，代码&lt;/font&gt;&lt;/font&gt; &lt;code&gt;WebId = Guid.Empty;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不会被击中。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您不希望其他异常导致程序崩溃，只需在其他两个捕获之后添加该代码：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="418a5b88f6ef7fc8db59855e34f953b266c56327" translate="yes" xml:space="preserve">
          <source>Anyhow, here's what I would do:</source>
          <target state="translated">不管怎么说,这是我想做的。</target>
        </trans-unit>
        <trans-unit id="2cebdf89c9ac259fa1d1b505d0ff6182557aed9a" translate="yes" xml:space="preserve">
          <source>As others have pointed out, you can have an &lt;code&gt;if&lt;/code&gt; statement inside your catch block to determine what is going on. C#6 supports Exception Filters, so the following will work:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;正如其他人指出的那样，您可以&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在catch块内&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;语句来确定正在发生的事情。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃6支持异常过滤器，因此可以使用以下内容：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9017051d440936e5b5db7f09088015fd98c38bfa" translate="yes" xml:space="preserve">
          <source>At this point, we can add a separate function that handles the different types of Exceptions using overload resolution, or to handle the Exception. Both have disadvantages. To start, here's the way to do it with a helper function:</source>
          <target state="translated">这时,我们可以增加一个单独的函数,用过载解析来处理不同类型的Exception,也可以用Exception来处理。这两种方式都有缺点。首先,这里用一个辅助函数来做的方法是这样的。</target>
        </trans-unit>
        <trans-unit id="44f53e52ca0613c4c3dd6af286140722dd6c32b8" translate="yes" xml:space="preserve">
          <source>At time of writing, this will include support for C# 6.</source>
          <target state="translated">在编写本文时,这将包括对C#6的支持。</target>
        </trans-unit>
        <trans-unit id="0c105894787df0d666b778b4e7e827a820c0c625" translate="yes" xml:space="preserve">
          <source>Because it certainly isn't automatically more readable.</source>
          <target state="translated">因为它肯定不是自动可读性更强。</target>
        </trans-unit>
        <trans-unit id="84ec264cf702058749562c6d952f580cc6f0e0e8" translate="yes" xml:space="preserve">
          <source>But it&amp;acute;s not. Actually this is the only new feature in C# 6 that is not possible to emulate in prior versions. First, a re-throw means more overhead than skipping the catch. Second, it is not semantically equivalent. The new feature preserves the stack intact when you are debugging your code. Without this feature the crash dump is less useful or even useless.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但这不是。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实际上，这是C＃6中唯一无法在先前版本中模仿的新功能。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;首先，重新抛出意味着比跳过捕获更多的开销。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;其次，它在语义上并不等效。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;调试代码时，新功能可以使堆栈保持原样。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果没有此功能，则故障转储将变得不太有用甚至无用。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8968328136575f096f276fca672f5d7a0e341da4" translate="yes" xml:space="preserve">
          <source>But that's sort of my point.  Y'all have heard of functions/methods, right?  Seriously.  Write a common &lt;code&gt;ErrorHandler&lt;/code&gt; function and, like, call it from each catch block.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但这是我的意思。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;你们都听说过功能/方法，对吗？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;说真的 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;编写一个通用的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ErrorHandler&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数，然后从每个catch块调用它。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="73907b0eca8f7445628e3ca07e7e04aa2be2d3f5" translate="yes" xml:space="preserve">
          <source>Catch &lt;code&gt;System.Exception&lt;/code&gt; and switch on the types</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;捕获&lt;/font&gt;&lt;/font&gt; &lt;code&gt;System.Exception&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;并打开类型&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6f1008bdf611d7679d3c3f840c1b061398509ab0" translate="yes" xml:space="preserve">
          <source>Catch multiple exceptions at once</source>
          <target state="translated">一次捕捉多个异常</target>
        </trans-unit>
        <trans-unit id="2ff92d3d845f125e73f3f4eef6ab12da2f07a6ec" translate="yes" xml:space="preserve">
          <source>Cautioned and Warned: &lt;a href=&quot;http://community.bartdesmet.net/blogs/bart/archive/2008/01/06/exception-handling-in-functional-style.aspx&quot;&gt;Yet another kind, functional style.&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注意和警告：&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://community.bartdesmet.net/blogs/bart/archive/2008/01/06/exception-handling-in-functional-style.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;另一种功能样式。&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0d008cb4b49a7d4f44a21a4a3014d343569f652e" translate="yes" xml:space="preserve">
          <source>Construct a new Guid in a temporary variable.</source>
          <target state="translated">在一个临时变量中构建一个新的指南。</target>
        </trans-unit>
        <trans-unit id="8d84823db6b97f3970612fd253baf121c346100a" translate="yes" xml:space="preserve">
          <source>Cutting straight to the chase, this kind of duplicates an earlier answer, but if you really want to perform a common action for several exception types and keep the whole thing neat and tidy within the scope of the one method, why not just use a lambda/closure/inline function to do something like the following?  I mean, chances are pretty good that you'll end up realizing that you just want to make that closure a separate method that you can utilize all over the place. But then it will be super easy to do that without actually changing the rest of the code structurally.  Right?</source>
          <target state="translated">直奔主题,这有点重复了之前的答案,但如果你真的想为几个异常类型执行一个共同的操作,并在一个方法的范围内保持整洁,为什么不直接使用lambdaclosureinline函数来做类似下面这样的事情呢?我的意思是,你很有可能最终会意识到,你只是想把这个闭包变成一个单独的方法,让你可以到处利用。但是,这样一来,在不改变其余的代码结构的情况下,你就可以非常容易地做到这一点。对吗?</target>
        </trans-unit>
        <trans-unit id="e9656fda095be85a55c47e88f0f2142837377331" translate="yes" xml:space="preserve">
          <source>E.g.:</source>
          <target state="translated">E.g.:</target>
        </trans-unit>
        <trans-unit id="5de063f97315c5b8e6e1dc2ce35e02b2a46ba4c4" translate="yes" xml:space="preserve">
          <source>Except that I still kind of hate the one-long-line layout and would personally lay the code out like the following. I think this is as functional as it is aesthetic, since I believe it improves comprehension. Some may disagree:</source>
          <target state="translated">除了我还是有点讨厌单长线的布局,我个人会把代码铺成下面这样。我认为这和美学上的功能一样,因为我相信这样可以提高理解力。有些人可能不同意。</target>
        </trans-unit>
        <trans-unit id="75ea838be7539f75e44812538c146599e6015083" translate="yes" xml:space="preserve">
          <source>Exception Hierarchy</source>
          <target state="translated">异常层级</target>
        </trans-unit>
        <trans-unit id="527e4c0d8a347a6d284b98967bd45b476920144c" translate="yes" xml:space="preserve">
          <source>Exception filters are now available in c# 6+. You can do</source>
          <target state="translated">异常过滤器现在在c#6+中可用。你可以做</target>
        </trans-unit>
        <trans-unit id="539f0ec3011bd70cde17e4ba28046cf7608d24cc" translate="yes" xml:space="preserve">
          <source>For example if you use a &quot;catch-all&quot; exception as &lt;strong&gt;Exception&lt;/strong&gt; it will preceed all other catch statements and you will obviously get compiler errors however if you reverse the order you can chain up your catch statements (bit of an anti-pattern I think) you can put the catch-all &lt;strong&gt;Exception&lt;/strong&gt; type at the bottom and this will be capture any exceptions that didn't cater for higher up in your try..catch block:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如，如果您使用&amp;ldquo; catch-all&amp;rdquo;异常作为&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Exception&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，它将优先于所有其他catch语句，并且显然会出现编译器错误，但是如果您颠倒顺序，则可以链接您的catch语句（我认为是反模式的位） ），您可以将&amp;ldquo;全部捕获的&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;异常&amp;rdquo;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类型放在底部，这将捕获在try..catch块中无法满足更高要求的所有异常：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="244c23113ec704871d9cee9221d63c34f391fadd" translate="yes" xml:space="preserve">
          <source>For the sake of completeness, since &lt;strong&gt;.NET 4.0&lt;/strong&gt; the code can rewritten as:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为了完整起见，从&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.NET 4.0开始&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，代码可以重写为：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd09ef4377932d2b4de7f67104a8aadaf92c5594" translate="yes" xml:space="preserve">
          <source>For this you need to create several &quot;Catch&quot; method overloads, similar to System.Action:</source>
          <target state="translated">为此,你需要创建几个 &quot;Catch &quot;方法的重载,类似于System.Action.Action。</target>
        </trans-unit>
        <trans-unit id="e509265720b9dd33023c62eb25685529d8bfc817" translate="yes" xml:space="preserve">
          <source>From C#6 you furthermore have the &lt;a href=&quot;https://stackoverflow.com/questions/4268223/c-sharp-exception-filter&quot;&gt;exception-filters&lt;/a&gt; as already mentioned by others. So you can modify the code above to this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在C＃6中，您还拥有&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;其他人已经提到&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4268223/c-sharp-exception-filter&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;异常过滤器&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，您可以修改上面的代码：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c2a061516ad58558a806faed3e12641e9f86898b" translate="yes" xml:space="preserve">
          <source>Geared for people that want a &lt;a href=&quot;https://stackoverflow.com/q/791390/1718702&quot;&gt;more elegant solution&lt;/a&gt; to catch once and filter exceptions, I use an extension method as demonstrated below.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;针对希望使用&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/q/791390/1718702&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更优雅的解决方案&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;捕获一次并过滤异常的用户，我使用了一种扩展方法，如下所示。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b1295f86f1d7cbf0ad091e0bccf7386af51e9b2a" translate="yes" xml:space="preserve">
          <source>Given your specific sample, where the fall-back value is cheap to construct, I like to follow these steps:</source>
          <target state="translated">考虑到你的具体样本,其中回落值便宜了构建,我喜欢按照这些步骤来做。</target>
        </trans-unit>
        <trans-unit id="36f3882107998a3ab41cc38fab92f798f8b2efce" translate="yes" xml:space="preserve">
          <source>Granted, I left the three identical instances of &lt;code&gt;/* write to a log, whatever... */ return;&lt;/code&gt; out of the first example.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当然，我将&lt;/font&gt;&lt;/font&gt; &lt;code&gt;/* write to a log, whatever... */ return;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的三个相同实例&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;写到日志中，无论如何... * / return; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在第一个例子中&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a13352f633c78630c9980aff67adb5108712346" translate="yes" xml:space="preserve">
          <source>Here is how the same problem would look using C# 6.0 syntax:</source>
          <target state="translated">下面是使用C#6.0语法处理同样的问题。</target>
        </trans-unit>
        <trans-unit id="73f9549a89eef322c33bad695cd89bf59a3fdef1" translate="yes" xml:space="preserve">
          <source>How about</source>
          <target state="translated">怎么样?</target>
        </trans-unit>
        <trans-unit id="e7b0dde9db8bb974802ff2df14397ad3d3f6ccd4" translate="yes" xml:space="preserve">
          <source>How much &lt;em&gt;less&lt;/em&gt; readable does this get when you add three more exception types, a month or two from now?  (Answer: it gets a &lt;strong&gt;&lt;em&gt;lot&lt;/em&gt;&lt;/strong&gt; less readable).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当您再添加三种异常类型（从现在开始的一两个月）时，这种可读性会&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;降低&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;多少&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（答案：它的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可读性差&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;很多&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="720545802c225e5d12bd7f9c93865e5a5357bf85" translate="yes" xml:space="preserve">
          <source>I already had this extension in my library, originally written for other purposes, but it worked just perfectly for &lt;code&gt;type&lt;/code&gt; checking on exceptions.  Plus, imho, it looks cleaner than a bunch of &lt;code&gt;||&lt;/code&gt; statements.  Also, unlike the accepted answer, I prefer explicit exception handling so &lt;code&gt;ex is ...&lt;/code&gt; had undesireable behaviour as derrived classes are assignable to there parent types).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我已经在我的库中有了这个扩展，最初是为其他目的而编写的，但是它对于&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;异常的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;type&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;检查非常有效。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;另外，恕我直言，它看起来比&lt;/font&gt;&lt;/font&gt; &lt;code&gt;||&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一堆还干净。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;陈述。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;另外，与接受的答案不同，我更喜欢显式的异常处理，因此&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ex is ...&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;具有不希望的行为，因为派生的类可以分配给那里的父类型。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74240835cd4bc17fc57bd86b1e86aefb93174327" translate="yes" xml:space="preserve">
          <source>I can't help but wonder (&lt;strong&gt;warning:&lt;/strong&gt; a little irony/sarcasm ahead) why on earth go to all this effort to basically just replace the following:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我不禁怀疑（&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;警告：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;前面有一点讽刺意味/讽刺意味）为什么&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实际上&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要尽一切努力基本上只替换以下内容：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c37622ab80f15e89d47339306984a3ac95887a9c" translate="yes" xml:space="preserve">
          <source>I highly recommend folks review this MSDN document:</source>
          <target state="translated">我强烈建议大家审阅这份MSDN文档。</target>
        </trans-unit>
        <trans-unit id="780d1495b265f4e9a8ecee31bb027832a5d2a8b2" translate="yes" xml:space="preserve">
          <source>I know I'm a little late to the party here, but holy smoke...</source>
          <target state="translated">我知道我有点晚了,但我知道我是来晚了,但我知道......</target>
        </trans-unit>
        <trans-unit id="3d961e357d56d34ad823fd113e2f28765f420089" translate="yes" xml:space="preserve">
          <source>I ran into a use case scenario when trying to cast control object in a datagrid, with either content as TextBox, TextBlock or CheckBox. In this case the returned Exception was the same, but the message varied.</source>
          <target state="translated">我遇到了一个使用场景,当我试图在一个数据网格中投射控件对象时,内容是TextBox、TextBlock或CheckBox。在这种情况下,返回的Exception是一样的,但消息却不一样。</target>
        </trans-unit>
        <trans-unit id="02f94d544750bdf98fc7f9f1023ba56f6ab0aa09" translate="yes" xml:space="preserve">
          <source>I want to suggest shortest answer (one more &lt;strong&gt;functional style&lt;/strong&gt;):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我想提出最短的答案（一种&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;功能样式&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0e9dc59e2c3a11b47ed9d2537dbaa8971253f1b1" translate="yes" xml:space="preserve">
          <source>I wonder why no-one noticed that code-duplication.</source>
          <target state="translated">我想知道为什么没有人注意到这段代码的复制。</target>
        </trans-unit>
        <trans-unit id="c50b41ab335674d6bc828e30c341ae79ecd94048" translate="yes" xml:space="preserve">
          <source>I wonder: Is there a way to catch both exceptions and only call the &lt;code&gt;WebId = Guid.Empty&lt;/code&gt; call once?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我想知道：有没有一种方法可以捕获两个异常，并且只&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;调用一次&lt;/font&gt;&lt;/font&gt; &lt;code&gt;WebId = Guid.Empty&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1c7b599accd0b406b2572bdd7a7f519b38d34b0" translate="yes" xml:space="preserve">
          <source>If any exception is thrown, then WebId is never set to the half-constructed value, and remains Guid.Empty.</source>
          <target state="translated">如果抛出任何异常,那么WebId永远不会被设置为半结构化的值,而是保持Guid.Empty。</target>
        </trans-unit>
        <trans-unit id="f538280fc4add5df1e61ddb0c8c7aaba59a637ea" translate="yes" xml:space="preserve">
          <source>If constructing the fall-back value is expensive, and resetting a value is much cheaper, then I would move the reset code into its own function:</source>
          <target state="translated">如果构造回落值很贵,而重置值要便宜得多,那么我会把重置代码移到自己的函数中。</target>
        </trans-unit>
        <trans-unit id="f8ad4319bb16a812c6324b95e9c2ebe07f4bf57b" translate="yes" xml:space="preserve">
          <source>If the handler is simple, and we want to re-use code, the best solution is probably to introduce a helper function.</source>
          <target state="translated">如果处理程序很简单,而我们想要重复使用代码,最好的解决办法可能是引入一个帮助函数。</target>
        </trans-unit>
        <trans-unit id="8e330682406f1c4b3a85e106c7382d74887afe47" translate="yes" xml:space="preserve">
          <source>If we don't want to re-throw, we might consider catching the right exceptions, and storing them in a temporary.</source>
          <target state="translated">如果我们不想重投的话,可以考虑抓到合适的异常情况,将其临时存储起来。</target>
        </trans-unit>
        <trans-unit id="c11db494a0490dce6a9e17bcd6addd3e6e0d163a" translate="yes" xml:space="preserve">
          <source>If we look at the code, what we really would like to do is forward the call. However, according to the MS Partition II, IL exception handler blocks won't work like this, which in this case makes sense because that would imply that the 'exception' object can have different types.</source>
          <target state="translated">如果我们看一下代码,我们真正想做的是转发调用。然而,根据MS的Partition II,IL异常处理程序块不会这样工作,在这种情况下,这是有道理的,因为这意味着 &quot;异常 &quot;对象可以有不同的类型。</target>
        </trans-unit>
        <trans-unit id="8d8207558989db2e7dfee1091e9a9bd5c52a907d" translate="yes" xml:space="preserve">
          <source>If we want to re-throw, we have no choice but to put the code in a 'Exception' catch handler, which will break FxCop and your debugger's uncaught exceptions.</source>
          <target state="translated">如果我们想要重抛,我们只能把代码放在 &quot;Exception &quot;捕获处理程序中,这将会破坏FxCop和你的调试器的未捕获异常。</target>
        </trans-unit>
        <trans-unit id="2f0396f3fe0933634437e4d13efa9b48318f3803" translate="yes" xml:space="preserve">
          <source>If you ask me, the second example (with the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;is&lt;/code&gt; keywords) is both significantly less readable, and simultaneously significantly more error-prone during the maintenance phase of your project.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您问我，第二个示例（带有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;is&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关键字）在项目维护阶段的可读性大大降低，同时容易出错。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d147073ec9d1be11df42ab43bd63f496ba553b9" translate="yes" xml:space="preserve">
          <source>If you can upgrade your application to C# 6 you are lucky. The new C# version has implemented Exception filters. So you can write this:</source>
          <target state="translated">如果你能将你的应用程序升级到C#6,你就很幸运了。新的C#版本已经实现了Exception过滤器。所以你可以这样写。</target>
        </trans-unit>
        <trans-unit id="4d552cdbb82e4cf6a4940a80e3f2e1be834c498e" translate="yes" xml:space="preserve">
          <source>If you don't want to use an &lt;code&gt;if&lt;/code&gt; statement within the &lt;code&gt;catch&lt;/code&gt; scopes, &lt;strong&gt;&lt;em&gt;in &lt;code&gt;C# 6.0&lt;/code&gt; you can use &lt;code&gt;Exception Filters&lt;/code&gt; syntax&lt;/em&gt;&lt;/strong&gt; which was already supported by the CLR in previews versions but existed only in &lt;code&gt;VB.NET&lt;/code&gt;/&lt;code&gt;MSIL&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果不想&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt; &lt;code&gt;catch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;范围&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;语句&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，则&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt; &lt;code&gt;C# 6.0&lt;/code&gt; &lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，可以使用&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; CLR在预览版本中已支持但仅在&lt;/font&gt; &lt;code&gt;VB.NET&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; / &lt;/font&gt; &lt;code&gt;MSIL&lt;/code&gt; 中&lt;font style=&quot;vertical-align: inherit;&quot;&gt;存在的&lt;/font&gt;&lt;strong&gt;&lt;em&gt; &lt;code&gt;Exception Filters&lt;/code&gt; &lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;语法&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71674352e64f530a61439601f02e7464c8b3b848" translate="yes" xml:space="preserve">
          <source>If you want to continue using Visual Studio 2013, you can install the following nuget package:</source>
          <target state="translated">如果你想继续使用Visual Studio 2013,可以安装以下nuget包。</target>
        </trans-unit>
        <trans-unit id="dfbebe9c28406d73a5cb8384408c1032f57b8c46" translate="yes" xml:space="preserve">
          <source>In C# 7.0+, you can combine this with pattern matching too</source>
          <target state="translated">在C#7.0+中,你也可以将其与模式匹配结合起来。</target>
        </trans-unit>
        <trans-unit id="026fae3457299735b784df3c5b5d4a008f86ea57" translate="yes" xml:space="preserve">
          <source>In c# 6.0,Exception Filters is improvements for exception handling</source>
          <target state="translated">在c#6.0中,异常过滤器是对异常处理的改进。</target>
        </trans-unit>
        <trans-unit id="ca4b4baab3be903a2c5a12429ced4eab9894b0f5" translate="yes" xml:space="preserve">
          <source>In short, no.</source>
          <target state="translated">简而言之,不。</target>
        </trans-unit>
        <trans-unit id="bad182dce85964009f99188e3387cec999f8a81b" translate="yes" xml:space="preserve">
          <source>Initialize WebId to the fall-back value.</source>
          <target state="translated">Initialize WebId to the fall-back value.</target>
        </trans-unit>
        <trans-unit id="21c6170e81cf52460da0fc2b6b268b15204775ca" translate="yes" xml:space="preserve">
          <source>Install-Package Microsoft.Net.Compilers</source>
          <target state="translated">安装软件包 Microsoft.Net.Compilers</target>
        </trans-unit>
        <trans-unit id="65101af96bc9264e39ad9b42429b60c89bda3dca" translate="yes" xml:space="preserve">
          <source>It can even be compacted to a single line (though not very pretty)</source>
          <target state="translated">甚至可以压缩成一条线(虽然不是很好看)。</target>
        </trans-unit>
        <trans-unit id="ee03e87bc255456e61aebe03ef23230147a58f5d" translate="yes" xml:space="preserve">
          <source>It is discouraged to simply catch &lt;code&gt;System.Exception&lt;/code&gt;. Instead, only the &quot;known&quot; exceptions should be caught.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不建议仅捕获&lt;/font&gt;&lt;/font&gt; &lt;code&gt;System.Exception&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;相反，仅应捕获&amp;ldquo;已知&amp;rdquo;异常。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2729d160bb79005beca2084b5df0a3f38c86bb26" translate="yes" xml:space="preserve">
          <source>It is just that Simple!!</source>
          <target state="translated">就是这么简单!</target>
        </trans-unit>
        <trans-unit id="f0e7007b6b6aab9e8c438cca232b2755efd880ff" translate="yes" xml:space="preserve">
          <source>It is worth mentioning here. You can respond to the multiple combinations (Exception error and exception.message).</source>
          <target state="translated">这里值得一提的是。你可以响应多个组合(Exception error和exception.message)。</target>
        </trans-unit>
        <trans-unit id="90f5902bc1a319f8953809309388ae151bffc367" translate="yes" xml:space="preserve">
          <source>Just call the try and catch twice.</source>
          <target state="translated">就叫试一试,抓两次就可以了。</target>
        </trans-unit>
        <trans-unit id="1ebe9b7ab107b293b672019c2bf62a545d09cdda" translate="yes" xml:space="preserve">
          <source>Just how I would do it, trying to find the &lt;em&gt;simple is beautiful&lt;/em&gt; pattern</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我会怎么做，试图找到&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;简单的就是美丽的&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;图案&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3de8e13f2d58751d17f79ba82916bddcf4930db9" translate="yes" xml:space="preserve">
          <source>Just saying...</source>
          <target state="translated">我只是说.....</target>
        </trans-unit>
        <trans-unit id="f654315c2642f6686f15e838fb9cfaef4a30f5c6" translate="yes" xml:space="preserve">
          <source>Let me break your question into 2 questions.  The first,</source>
          <target state="translated">让我把你的问题分成两个问题。第一个问题。</target>
        </trans-unit>
        <trans-unit id="277d463ead616f9c9e3a25bac2ef07c11f92c5ef" translate="yes" xml:space="preserve">
          <source>Matching behaviour for &lt;code&gt;Exception&lt;/code&gt; types is exact (ie. A child IS NOT a match for any of its parent types).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类型的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;匹配行为&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是准确的（即，子代与其父代类型都不匹配）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="50f1c5e1d73fc644c699b6519af102026e9072e7" translate="yes" xml:space="preserve">
          <source>Maybe try to keep your code simple such as putting the common code in a method, as you would do in any other part of the code that is not inside a catch clause?</source>
          <target state="translated">也许你可以试着让你的代码保持简单,比如把普通代码放在一个方法中,就像你在其他不在catch子句中的代码中一样?</target>
        </trans-unit>
        <trans-unit id="f129e30c19fc94a60bf892f96e6f7cc1c93ac303" translate="yes" xml:space="preserve">
          <source>Next useless update to this useless answer comes when deconstruction of out-parameters is implemented in C# 12. :)</source>
          <target state="translated">这个无用的答案的下一个无用的更新是在C#12中实现了对out-parameters的解构时。)</target>
        </trans-unit>
        <trans-unit id="ff3606b31e07f3a5fe0e676990944aadfec5d0d5" translate="yes" xml:space="preserve">
          <source>Not in C# unfortunately, as you'd need an exception filter to do it and C# doesn't expose that feature of MSIL. VB.NET does have this capability though, e.g.</source>
          <target state="translated">不幸的是,在C#中没有,因为你需要一个异常过滤器来做,而C#并没有暴露出MSIL的这个功能。不过VB.NET确实有这个功能,比如说</target>
        </trans-unit>
        <trans-unit id="387204d2ecb9509b33590cf8b44afd14a24010d1" translate="yes" xml:space="preserve">
          <source>Note that I did find one way to do it, but this looks more like material for &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Daily_WTF&quot;&gt;The Daily WTF&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请注意，我确实找到了一种方法来执行此操作，但这看起来更像是&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Daily_WTF&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;The Daily WTF的资料&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a8b5338876c5a2c0e9ee51235aebc5eed5d58b7b" translate="yes" xml:space="preserve">
          <source>Note that as opposed to an &lt;code&gt;if&lt;/code&gt; statement inside the &lt;code&gt;catch&lt;/code&gt;'s scope, &lt;code&gt;Exception Filters&lt;/code&gt; cannot throw &lt;code&gt;Exceptions&lt;/code&gt;, and when they do, or when the condition is not &lt;code&gt;true&lt;/code&gt;, the next &lt;code&gt;catch&lt;/code&gt; condition will be evaluated instead:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请注意，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与&lt;/font&gt; &lt;code&gt;catch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;范围&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;语句&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;相反&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt; &lt;code&gt;Exception Filters&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;无法引发&lt;/font&gt; &lt;code&gt;Exceptions&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;，并且当它们发生&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;异常&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;时或当条件不为&lt;/font&gt; &lt;code&gt;true&lt;/code&gt; 时&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将改为评估&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;下一个&lt;/font&gt; &lt;code&gt;catch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;条件：&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="307da8d59df79d213bf1937c633e591c2d7b1f47" translate="yes" xml:space="preserve">
          <source>Now, this sometimes leads to unneccessary repetitive code, for example:</source>
          <target state="translated">现在,这有时会导致不必要的重复性代码,比如说。</target>
        </trans-unit>
        <trans-unit id="c38182e25f1f4e2e680c0985dd7c98b38942c400" translate="yes" xml:space="preserve">
          <source>One of the major points, really, is that most of the point of formatting the textual source code that we're all looking at every day is to make it really, really obvious to other human beings what is actually happening when the code runs.  Because the compiler turns the source code into something totally different and couldn't care less about your code formatting style.  So all-on-one-line totally sucks, too.</source>
          <target state="translated">其中一个要点,真的,就是我们大家每天都在看的文本源码的格式化,大部分的要点就是要让其他人类在代码运行的时候,真的非常非常的明显。因为编译器会把源码变成完全不同的东西,根本不在乎你的代码格式化风格。所以说,全单行制也是很烂的。</target>
        </trans-unit>
        <trans-unit id="c2798cf70d9db202201ca1f462f0a7aa390a26de" translate="yes" xml:space="preserve">
          <source>Or to write it in code, we ask the compiler to do something like this (well it's not entirely correct, but it's the closest possible thing I guess):</source>
          <target state="translated">或者用代码写出来,我们要求编译器做这样的事情(嗯,这不是完全正确的,但我想这是最接近的)。</target>
        </trans-unit>
        <trans-unit id="2c16777d24367e3f298e7a67a4bfda81a4d9675f" translate="yes" xml:space="preserve">
          <source>Output: Catch.</source>
          <target state="translated">输出。接住。</target>
        </trans-unit>
        <trans-unit id="3c0e4355b62280b3263546bae6eb0a516c472868" translate="yes" xml:space="preserve">
          <source>Output: General catch.</source>
          <target state="translated">产出。一般接获。</target>
        </trans-unit>
        <trans-unit id="ecc3cfb9af571c4404afc45fdc1346391cba3878" translate="yes" xml:space="preserve">
          <source>Referencing this package will cause the project to be built using the
  specific version of the C# and Visual Basic compilers contained in the
  package, as opposed to any system installed version.</source>
          <target state="translated">引用此包将导致项目使用包中包含的C#和Visual Basic编译器的特定版本来构建,而不是任何系统安装的版本。</target>
        </trans-unit>
        <trans-unit id="9889f134527432dcbe02f9a4e26a1566fa481e1d" translate="yes" xml:space="preserve">
          <source>See a &lt;a href=&quot;https://roslyn.codeplex.com/discussions/541301&quot;&gt;discussion about this on CodePlex&lt;/a&gt;. And an &lt;a href=&quot;http://www.volatileread.com/Wiki/Index?id=1087&quot;&gt;example showing the difference&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://roslyn.codeplex.com/discussions/541301&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在CodePlex上&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;查看&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有关此内容&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;讨论&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;并&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.volatileread.com/Wiki/Index?id=1087&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;举例说明差异&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a0f044dd5ba573faa03180c7cb9425085f563062" translate="yes" xml:space="preserve">
          <source>Set WebId to the fully constructed temporary variable.  Make this the final statement of the try{} block.</source>
          <target state="translated">将WebId设置为完全构造的临时变量。使其成为 try{}块的最后一条语句。</target>
        </trans-unit>
        <trans-unit id="7c209d0a5eace88efaaedde48c3ad7c2f70ca081" translate="yes" xml:space="preserve">
          <source>Since &lt;strong&gt;C# 7&lt;/strong&gt; you can avoid introducing a variable on a separate line:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃7开始，&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可以避免在单独的行上引入变量：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fc2791091b2e77f5c8e25ff45eeded0171a350f8" translate="yes" xml:space="preserve">
          <source>Since I felt like these answers just touched the surface, I attempted to dig a bit deeper.</source>
          <target state="translated">因为我觉得这些答案只是触及到了表面,所以我尝试着再深挖一下。</target>
        </trans-unit>
        <trans-unit id="ff984b756a47a0896f0f17221cd64b0b91c34398" translate="yes" xml:space="preserve">
          <source>Slightly revised version of your code:</source>
          <target state="translated">稍微修改了一下你的代码。</target>
        </trans-unit>
        <trans-unit id="a347d294b31f0747c0d427b69390320d40eb5848" translate="yes" xml:space="preserve">
          <source>So the code looks like:</source>
          <target state="translated">所以代码看起来是这样的。</target>
        </trans-unit>
        <trans-unit id="d5ebe26a1976d35b403686baa594965c8a21ec1d" translate="yes" xml:space="preserve">
          <source>So to conclude:</source>
          <target state="translated">所以要总结一下。</target>
        </trans-unit>
        <trans-unit id="fba6c3dd6bfcb0f8599df48543715d028146b9e2" translate="yes" xml:space="preserve">
          <source>So what we would really want to do is something that doesn't compile, say:</source>
          <target state="translated">所以我们真正想做的是不编译的东西,比如说。</target>
        </trans-unit>
        <trans-unit id="0b2999dc55eadeb32a8eea7837711256935984c0" translate="yes" xml:space="preserve">
          <source>So why won't this code compile - and how can we hack it in such a way that it will?</source>
          <target state="translated">那么,为什么这段代码无法编译--我们如何才能用这样的方式黑掉它呢?</target>
        </trans-unit>
        <trans-unit id="59d5b84e463ffda163b9c20671002ba7bede5835" translate="yes" xml:space="preserve">
          <source>So you&amp;acute;re repeating lots of code within every exception-switch? Sounds like extracting a method would be god idea, doesn&amp;acute;t it?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，您在每个异常开关内重复许多代码吗？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;听起来像是提取一种方法会是个主意，不是吗？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="28aad4ec99b5934be9e01f44169ee4a3c9b2b75b" translate="yes" xml:space="preserve">
          <source>So your code comes down to this:</source>
          <target state="translated">所以你的代码是这样的</target>
        </trans-unit>
        <trans-unit id="ef13ab8ec9dd166e5d867d7fbbb39bb73cd543e4" translate="yes" xml:space="preserve">
          <source>Some people think this code is the same as</source>
          <target state="translated">有些人认为这个代码与</target>
        </trans-unit>
        <trans-unit id="7341f6385aceb3a37913d3cc72774b078a8510f0" translate="yes" xml:space="preserve">
          <source>String comparisons are ugly and slow.</source>
          <target state="translated">字符串比较难看,速度也很慢。</target>
        </trans-unit>
        <trans-unit id="c302bfb8c6ca9631e91e2a7e11fcb4a4304b008c" translate="yes" xml:space="preserve">
          <source>That leaves just the 're-throw'. For this to work, we need to be able to perform the handling inside the 'catch' block - and the only way to make this work is by an catching 'Exception' object.</source>
          <target state="translated">这样就只剩下了 &quot;重抛&quot;。为了使之有效,我们需要能够在 &quot;catch &quot;块内部执行处理--而唯一的方法就是通过一个catching &quot;Exception &quot;对象来实现。</target>
        </trans-unit>
        <trans-unit id="5224130c9b85acc029bcb32616a1b11cc5806f7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MyFilter&lt;/code&gt; method could then look something like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;然后，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyFilter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法可能如下所示：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ece06866e04ad9203ab4d537beecbf110f7d9a8" translate="yes" xml:space="preserve">
          <source>The accepted answer seems acceptable, except that CodeAnalysis/&lt;a href=&quot;http://en.wikipedia.org/wiki/FxCop&quot;&gt;FxCop&lt;/a&gt; will complain about the fact that it's catching a general exception type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可接受的答案似乎是可以接受的，除了CodeAnalysis / &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/FxCop&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;FxCop&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;会抱怨它正在捕获通用异常类型这一事实。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4781fc70c4345a21044d116b1280161a2c9956c1" translate="yes" xml:space="preserve">
          <source>The bigger question to this is &lt;em&gt;why&lt;/em&gt;. I do not think the cost outweighs the gain here :)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更大的问题是&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为什么&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我认为成本不会超过收益：)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f58cc981739315748cd319c85046ccdfa234e3cd" translate="yes" xml:space="preserve">
          <source>The code isn't nested</source>
          <target state="translated">该代码没有嵌套</target>
        </trans-unit>
        <trans-unit id="2b8b76967a2caca71316d6dcba09aade5b7149fb" translate="yes" xml:space="preserve">
          <source>The given example is rather simple, as it's only a &lt;a href=&quot;http://en.wikipedia.org/wiki/Globally_unique_identifier&quot;&gt;&lt;code&gt;GUID&lt;/code&gt;&lt;/a&gt;. But imagine code where you modify an object multiple times, and if one of the manipulations fail in an expected way, you want to &quot;reset&quot; the &lt;code&gt;object&lt;/code&gt;. However, if there is an unexpected exception, I still want to throw that higher.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;给定的示例非常简单，因为它只是一个&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Globally_unique_identifier&quot;&gt; &lt;code&gt;GUID&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，请想象一下在代码中多次修改对象的情况，如果其中一种操作以预期的方式失败，则您想&amp;ldquo;重置&amp;rdquo;该&lt;/font&gt;&lt;/font&gt; &lt;code&gt;object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，如果有意外的例外，我仍然想将其提高。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d50d11a893fba32da9b37c41ce8ed5904f8bc553" translate="yes" xml:space="preserve">
          <source>The maintenance phase, for anyone who might be relatively new to programming, is going to comprise 98.7% or more of the overall lifetime of your project, and the poor schmuck doing the maintenance is almost certainly going to be someone other than you. And there is a very good chance they will spend 50% of their time on the job cursing your name.</source>
          <target state="translated">维护阶段,对于任何一个可能相对来说是编程新手的人来说,维护阶段将占到你的项目整体寿命的98.7%甚至更多,而做维护的可怜的笨蛋几乎可以肯定是你以外的人。而且他们很有可能会把50%的时间都花在骂你的名字上。</target>
        </trans-unit>
        <trans-unit id="f61c0731b8f8a19c626811dc48dad3864d3e64a0" translate="yes" xml:space="preserve">
          <source>The obvious disadvantages for this are that we cannot re-throw properly, and -well let's be honest- that it's quite the ugly solution. The uglyness can be fixed a bit by performing branch elimination, which makes the solution slightly better:</source>
          <target state="translated">丑陋的地方可以通过执行分支消除来修复,这使得解决方案稍微好一点。</target>
        </trans-unit>
        <trans-unit id="b53b26658767f7dd6c482127876a53fe82bf3174" translate="yes" xml:space="preserve">
          <source>The reason that this won't compile is quite obvious: what type and value would the '$exception' object have (which are here stored in the variables 'e')? The way we want the compiler to handle this is to note that the common base type of both exceptions is 'Exception', use that for a variable to contain both exceptions, and then handle only the two exceptions that are caught. The way this is implemented in IL is as 'filter', which is available in VB.Net.</source>
          <target state="translated">这样编译不出来的原因很明显:'$exception'对象会有什么样的类型和值(这里是存储在变量'e'中)?我们希望编译器处理这个问题的方法是,注意到这两个异常的共同基本类型是'Exception',用这个类型作为一个变量来包含两个异常,然后只处理被捕获的两个异常。在IL中的实现方式是作为'filter',在VB.Net中可以使用。</target>
        </trans-unit>
        <trans-unit id="7c628a163cc1b537d3685215329c5d7321e035cc" translate="yes" xml:space="preserve">
          <source>The reason we want this is because we don't want the exception handler to catch things that we need later on in the process. Sure, we can catch an Exception and check with an 'if' what to do, but let's be honest, we don't really want that. (FxCop, debugger issues, uglyness)</source>
          <target state="translated">我们之所以想要这样做,是因为我们不希望异常处理程序捕捉到我们以后需要的东西。当然,我们可以捕捉到一个异常,然后用 &quot;if &quot;检查要做什么,但老实说,我们并不希望这样做。(FxCop,调试器问题,丑陋)</target>
        </trans-unit>
        <trans-unit id="38cf9971eeb919703b567eb892ae4463f4a39305" translate="yes" xml:space="preserve">
          <source>There are a few advantages of inverting the expression:</source>
          <target state="translated">反转表达式有几个优点。</target>
        </trans-unit>
        <trans-unit id="2805d8052ac54e828feb8e44e99582c2fc025010" translate="yes" xml:space="preserve">
          <source>There's no risk of forgetting the 'throw' or 'return' statements that in Joseph's solution are separated from the expression.</source>
          <target state="translated">在Joseph的解决方案中,不会有忘记 &quot;抛出 &quot;或 &quot;返回 &quot;语句的风险,而这些语句在Joseph的解决方案中是与表达式分离的。</target>
        </trans-unit>
        <trans-unit id="5952b23f46d9b0270fef53d9264d1c1c54c042f0" translate="yes" xml:space="preserve">
          <source>This code will catch the &lt;code&gt;Exception&lt;/code&gt; only when it's a &lt;code&gt;InvalidDataException&lt;/code&gt; or &lt;code&gt;ArgumentNullException&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仅当它是&lt;/font&gt; &lt;code&gt;InvalidDataException&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;或&lt;/font&gt; &lt;code&gt;ArgumentNullException&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;时，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;此代码&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;才&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;捕获&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4a00e29090c2c1e94dc2959e6bfe7c8589784d0c" translate="yes" xml:space="preserve">
          <source>This is a classic problem every C# developer faces eventually.</source>
          <target state="translated">这是每一个C#开发人员最终都会面临的经典问题。</target>
        </trans-unit>
        <trans-unit id="c7097eacdf2ef8cb7152d26b733053d7d356d8ad" translate="yes" xml:space="preserve">
          <source>This is a variant of Matt's answer (I feel that this is a bit cleaner)...use a method:</source>
          <target state="translated">这是马特的回答的一个变种(我觉得这样做比较干净)......用一个方法。</target>
        </trans-unit>
        <trans-unit id="d064d3721c19dbe49384f0cc083a7d861381bfc2" translate="yes" xml:space="preserve">
          <source>This is different from using an &lt;code&gt;if&lt;/code&gt; statement from within the &lt;code&gt;catch&lt;/code&gt; block, using exception filters &lt;strong&gt;will not&lt;/strong&gt; unwind the stack.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与在&lt;/font&gt; &lt;code&gt;catch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;块中使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;语句&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不同&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，使用异常过滤器&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不会&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;展开堆栈。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ac3d44b1b396d47e05b659d56060dba602f9ef49" translate="yes" xml:space="preserve">
          <source>To make it work in C#, we need a temporary variable with the correct 'Exception' base type. To control the flow of the code, we can add some branches. Here goes:</source>
          <target state="translated">为了让它在C#中正常工作,我们需要一个临时变量,它的基础类型是正确的 &quot;Exception&quot;。为了控制代码的流程,我们可以添加一些分支。下面是这样的。</target>
        </trans-unit>
        <trans-unit id="c51fe20cce0d7eb3f5f99f34d3c1e5b5aba580ac" translate="yes" xml:space="preserve">
          <source>Update 2015-12-15: See &lt;a href=&quot;https://stackoverflow.com/a/22864936/1718702&quot;&gt;https://stackoverflow.com/a/22864936/1718702&lt;/a&gt; for C#6. It's a cleaner and now standard in the language.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2015年12 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;月15日&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更新：有关&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃6，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请参见&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/22864936/1718702&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://stackoverflow.com/a/22864936/1718702&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它是一种更清洁的语言，现在是该语言的标准。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ef54e2ab9573a1dc779ebbc0d5c7ab555e163fd5" translate="yes" xml:space="preserve">
          <source>Wanted to added my short answer to this already long thread.  Something that hasn't been mentioned is the order of precedence of the catch statements, more specifically you need to be aware of the scope of each type of exception you are trying to catch.</source>
          <target state="translated">想在这个已经很长的线程中加入我的简短回答。有一些没有被提到的东西是catch语句的优先顺序,更具体地说,你需要知道你要捕捉的每一种类型的异常的范围。</target>
        </trans-unit>
        <trans-unit id="f657cff0d5b3756ec384f3714196cff6006b0a71" translate="yes" xml:space="preserve">
          <source>What is in the link doesn't answer your question directly, but it's trivial to extend it to look like:</source>
          <target state="translated">链接中的内容并不能直接回答你的问题,但延伸到看起来像,就很琐碎了。</target>
        </trans-unit>
        <trans-unit id="99943cfb5ecf002e5e9ae5a52b8b28cf24b0de74" translate="yes" xml:space="preserve">
          <source>What you could do is use an anonymous function to encapsulate your on-error code, and then call it in those specific catch blocks:</source>
          <target state="translated">你可以使用一个匿名函数来封装你的on-error代码,然后在这些特定的catch块中调用它。</target>
        </trans-unit>
        <trans-unit id="ca80db7575742b27fde65b854b945355d61acbf1" translate="yes" xml:space="preserve">
          <source>When there is more then one &lt;code&gt;true&lt;/code&gt;&lt;code&gt;Exception Filter&lt;/code&gt; - the first one will be accepted:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当有一个以上的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;true&lt;/code&gt; &lt;code&gt;Exception Filter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -第一个将被接受：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7a09fc641433a64a134033646f75d56fd17522d" translate="yes" xml:space="preserve">
          <source>Which leads to the next question,</source>
          <target state="translated">这就引出了下一个问题:</target>
        </trans-unit>
        <trans-unit id="eae36f0ce3daef78241f69b2133207bcf3a34e61" translate="yes" xml:space="preserve">
          <source>With C# 7 &lt;a href=&quot;https://stackoverflow.com/a/136038&quot;&gt;the answer from Michael Stum&lt;/a&gt; can be improved while keeping the readability of a switch statement:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用C＃7 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/136038&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以改善&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Michael Stum的答案，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同时保持switch语句的可读性：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="528302a0747104d2be1351ddb8503984852db552" translate="yes" xml:space="preserve">
          <source>Would putting the entire &lt;code&gt;if&lt;/code&gt; test on one line make it more readable? I don't think so.  I mean, I did have another programmer vehemently argue once long ago that putting more code on one line would make it &quot;run faster.&quot;  But of course he was stark raving nuts. Trying to explain to him (with a straight face--which was challenging) how the interpreter or compiler would break that long line apart into discrete one-instruction-per-line statements--essentially identical to the result if he had gone ahead and just made the code readable instead of trying to out-clever the compiler--had no effect on him whatsoever.  But I digress.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将整个&lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;测试放在一行上是否会使它更具可读性？我不这么认为。我的意思是，很久以前，我确实有另一位程序员激烈地争论过，将更多的代码放在一行上会使它&amp;ldquo;运行得更快&amp;rdquo;。但是他当然是疯了。试图向他解释（直截了当-这很具有挑战性）解释器或编译器如何将长行拆分成离散的每行一条指令的语句-与他继续前进时的结果基本相同只是使代码具有可读性，而不是试图使编译器不那么聪明-对其没有任何影响。但是我离题了。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="131f753f0d5bbeaa4b9a7cad82488c60f2611438" translate="yes" xml:space="preserve">
          <source>You can also create methods for parsing returning tuples, which aren't available in .NET Framework yet as of version 4.6:</source>
          <target state="translated">您还可以创建用于解析返回图元组的方法,这些方法在.NET Framework 4.6版本中还没有。</target>
        </trans-unit>
        <trans-unit id="f61fac0758d9e743bebe99080ec29731f9ec5c60" translate="yes" xml:space="preserve">
          <source>You can download &lt;a href=&quot;http://www.visualstudio.com/en-us/downloads/visual-studio-2015-downloads-vs.aspx&quot;&gt;Visual Studio 2015&lt;/a&gt; to check this out.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可以下载&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.visualstudio.com/en-us/downloads/visual-studio-2015-downloads-vs.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Visual Studio 2015&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;进行检查。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1e5e031fbb8dbee194806a598096e8bbb6e5cc91" translate="yes" xml:space="preserve">
          <source>and so on as many as you wish. But you need to do it once and you can use it in all your projects (or, if you created a nuget package we could use it too).</source>
          <target state="translated">等等,以此类推,你想用多少就用多少。但你只需要做一次,你可以在你所有的项目中使用它(或者,如果你创建了一个nuget包,我们也可以使用它)。</target>
        </trans-unit>
        <trans-unit id="139bc28d7f6f0cb680c67b97d63cee5a0af93231" translate="yes" xml:space="preserve">
          <source>in C# 6 the recommended approach is to use Exception Filters, here is an example:</source>
          <target state="translated">在C#6中,推荐的方法是使用异常过滤器,下面是一个例子。</target>
        </trans-unit>
        <trans-unit id="e163cb1fcc4cf94d0647fa5057c3c5055217b4d7" translate="yes" xml:space="preserve">
          <source>p.s. I haven't put null checks for code simplicity, consider to add parameter validations.</source>
          <target state="translated">p.s.为了代码的简单性,我没有放空校验,考虑增加参数验证。</target>
        </trans-unit>
        <trans-unit id="b52463a5170e012e085593425db69ddae475562f" translate="yes" xml:space="preserve">
          <source>p.s.2 
If you want to return a value from the catch, it's necessary to do same Catch methods, but with returns and Func instead of Action in parameters.</source>
          <target state="translated">p.s.2 如果你想从catch中返回一个值,需要做同样的Catch方法,但在参数中用return和Func代替Action。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
