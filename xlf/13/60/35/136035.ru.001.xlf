<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/136035">
    <body>
      <group id="136035">
        <trans-unit id="5aaf15b051a125920955bd69c723d28dfb1dc6e9" translate="yes" xml:space="preserve">
          <source>...with some crazy variation of this next code smell, I mean example, only to pretend that you're saving a few keystrokes.</source>
          <target state="translated">...с какой-то безумной вариацией запаха следующего кода,я имею в виду пример,только для того,чтобы притвориться,что ты сохраняешь несколько нажатий клавиш.</target>
        </trans-unit>
        <trans-unit id="c8d3c34755a48a88bcc07da0a84528f3d86616bd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.guid.tryparse.aspx&quot;&gt;TryParse&lt;/a&gt; never throws exceptions and returns false if format is wrong, setting WebId to &lt;code&gt;Guid.Empty&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.guid.tryparse.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;TryParse&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; никогда не &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;генерирует&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; исключения и возвращает false, если формат неверный, устанавливая WebId в &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Guid.Empty&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6a520e492fbc31afda2a4ca2670d6f40c2c2beb0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/questions/136035/catch-multiple-exceptions-at-once/136092#136092&quot;&gt;Joseph Daigle's Answer&lt;/a&gt; is a good solution, but I found the following structure to be a bit tidier and less error prone.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/136035/catch-multiple-exceptions-at-once/136092#136092&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ответ Джозефа Дейгла&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - хорошее решение, но я обнаружил, что следующая структура немного более аккуратна и менее подвержена ошибкам.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4e3308c299b7c14b6f16899d7f58eff6d125a522" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Basically provide another empty &lt;code&gt;Catch&lt;/code&gt; overload which returns itself)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(По сути, предоставьте еще одну пустую &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;перегрузку &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Catch&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; которая возвращает себя)&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3aaed97268833a9918a2ba771f9d165a93561908" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms182271.aspx&quot;&gt;CA1800: Do not cast unnecessarily&lt;/a&gt;&lt;/em&gt; says to &quot;consider testing the result of the 'as' operator instead&quot;, but if you do that, you'll be writing more code than if you catch each exception separately.</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms182271.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CA1800: Не приводите излишне призывающие&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;laquo;рассмотреть возможность проверки результата оператора&amp;laquo; as &amp;raquo;вместо этого&amp;raquo;, но если вы сделаете это, вы будете писать больше кода, чем если бы вы ловили каждое исключение отдельно.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c2ba87e75a77003d169867541b8e1d7b0dbe538c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Also, specifically &lt;code&gt;Guid&lt;/code&gt; has the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.guid.tryparse(v=vs.110).aspx&quot;&gt;&lt;code&gt;Guid.TryParse&lt;/code&gt;&lt;/a&gt; method.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Также, в &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Guid&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; есть &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;метод &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.guid.tryparse(v=vs.110).aspx&quot;&gt; &lt;code&gt;Guid.TryParse&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ab87e8771981891dc3537b561271b84c06af8064" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Can I catch multiple exceptions at once?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Могу ли я поймать несколько исключений одновременно?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a5c15139e290a34ffa9e286ddfe7f8c968c4f93f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT:&lt;/strong&gt; I do concur with others who are saying that, as of C# 6.0, exception filters are now a perfectly fine way to go: &lt;code&gt;catch (Exception ex) when (ex is ... || ex is ... )&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;РЕДАКТИРОВАТЬ:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Я согласен с другими, которые говорят, что, начиная с C # 6.0, фильтры исключений теперь являются идеальным способом: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;catch (Exception ex) when (ex is ... || ex is ... )&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52eee279cccac78795d9bd9b538cdd8748c99dc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit:&lt;/strong&gt; 
The &lt;a href=&quot;http://www.codeproject.com/Articles/853207/What-s-new-in-Csharp-Exception-Filters&quot;&gt;exception filtering&lt;/a&gt; in C# 6.0 will make the syntax a bit cleaner and comes with a &lt;a href=&quot;https://stackoverflow.com/a/27082164/2802543&quot;&gt;number of other benefits&lt;/a&gt; over any current solution. (most notably leaving the stack unharmed)</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Edit: &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://www.codeproject.com/Articles/853207/What-s-new-in-Csharp-Exception-Filters&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;фильтрация исключений&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в C # 6.0 будет сделать синтаксис немного чище и поставляется с &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/27082164/2802543&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;рядом других преимуществ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; над любым текущим решением. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(прежде всего оставляя стек без повреждений)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="feb4ca963f08224ee8b4571f84c00c0036a54d42" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Full Error Handling Example (Copy-Paste to new Console app)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Пример полной обработки ошибок (копирование-вставка в новое консольное приложение)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3b3141404e1e36c9cdf3d5f38083a4df531a0430" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How do I avoid writing duplicate code given that I can't catch multiple exception types in the same catch() block?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Как избежать написания дублирующего кода, если я не могу перехватить несколько типов исключений в одном блоке catch ()?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="850301d4e8188e719ad5b1ae8a67aef29261306f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IsAnyOf.cs Extension (See Full Error Handling Example for Dependancies)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Расширение IsAnyOf.cs (см. Пример полной обработки ошибок для зависимостей)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="542b69fedc4d99881098791ff30ae7adef1bcd67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ORIGINAL:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ORIGINAL:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9a5181d2939565f52ceafa914e74e4bfb90a7f80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Two Sample NUnit Unit Tests&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Два примера модульных тестов NUnit&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="372f60334aa5d8918e891d52c780ab816ff7ba23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Usage&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="06d054af62aba5965b1c775157b32a35d2c79e1d" translate="yes" xml:space="preserve">
          <source>@Micheal</source>
          <target state="translated">@Micheal</target>
        </trans-unit>
        <trans-unit id="3389e9e3d38bd01137e197e890e0a7791c71610c" translate="yes" xml:space="preserve">
          <source>A return statement is not necessary</source>
          <target state="translated">Заявление о возврате не требуется</target>
        </trans-unit>
        <trans-unit id="b65d43af93dde5ad9ef5b8514f0df207615395e0" translate="yes" xml:space="preserve">
          <source>Actually, you can put basically any condition inside that &lt;code&gt;when&lt;/code&gt; clause:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;На самом деле, вы можете положить в &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;основном любое условие внутри , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;что , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;when&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; пункт:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cca8d2a8a73470cc7df126300c74b7f20e4a6720" translate="yes" xml:space="preserve">
          <source>Also, it seems the &quot;is&quot; operator might degrade performance slightly.</source>
          <target state="translated">Кроме того,похоже,что оператор &quot;is&quot; может несколько ухудшить производительность.</target>
        </trans-unit>
        <trans-unit id="caf67b064a82111165779047a0bb4a5990dbbf9a" translate="yes" xml:space="preserve">
          <source>Alternatively, this can be all done inline (the right hand side of the when statement just has to be a boolean expression).</source>
          <target state="translated">В качестве альтернативы,все это может быть сделано в строке (правая часть,когда оператор просто должен быть булевым выражением).</target>
        </trans-unit>
        <trans-unit id="347c0c93fde8f4ac618ed62172bad2761087e0f6" translate="yes" xml:space="preserve">
          <source>And CatchMany implementation:</source>
          <target state="translated">И внедрение CatchMany:</target>
        </trans-unit>
        <trans-unit id="d53cb30e5dd50782f910c1090f2fcd20924a8cd3" translate="yes" xml:space="preserve">
          <source>And as you can see in the &lt;code&gt;MSIL&lt;/code&gt; the code is not translated to &lt;code&gt;if&lt;/code&gt; statements, but to &lt;code&gt;Filters&lt;/code&gt;, and &lt;code&gt;Exceptions&lt;/code&gt; cannot be throw from within the areas marked with &lt;code&gt;Filter 1&lt;/code&gt; and &lt;code&gt;Filter 2&lt;/code&gt; but the filter throwing the &lt;code&gt;Exception&lt;/code&gt; will fail instead, also the last comparison value pushed to the stack before the &lt;code&gt;endfilter&lt;/code&gt; command will determine the success/failure of the filter (&lt;code&gt;Catch 1&lt;/code&gt;&lt;strong&gt;&lt;em&gt;XOR&lt;/em&gt;&lt;/strong&gt;&lt;code&gt;Catch 2&lt;/code&gt; will execute accordingly):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;И как вы можете видеть в &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MSIL&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; код переводится не в &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;операторы &lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , а в &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Filters&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , и &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exceptions&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не могут быть выброшены из областей, помеченных как &amp;laquo; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Filter 1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &amp;laquo; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Filter 2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; но &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;вместо этого произойдет сбой &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;фильтра, выдавшего &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , также последнего Значение сравнения, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;endfilter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в стек до того, &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;как&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; команда &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;endfilter&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; определит успех / неудачу фильтра ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Catch 1&lt;/code&gt; ,&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;XOR&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt; &lt;code&gt;Catch 2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; будет выполняться соответственно):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea816fd8da8992b183fbc63d106dea153a991102" translate="yes" xml:space="preserve">
          <source>And of course FxCop barks at you and so you have to &lt;strong&gt;&lt;em&gt;also&lt;/em&gt;&lt;/strong&gt; add an attribute to your code that has precisely zip to do with the running program, and is only there to tell FxCop to ignore an issue that in 99.9% of cases it is totally correct in flagging. And, sorry, I might be mistaken, but doesn't that &quot;ignore&quot; attribute end up actually compiled into your app?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;И, конечно же &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;FxCop лает на вас , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;и поэтому вы должны &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;также&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; добавить атрибут в свой код , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;который точно пронестись делать с запущенной программой, и только там , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;чтобы сказать FxCop игнорировать вопрос , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;что в 99,9% случаев он полностью правильно в маркировке. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;И, извините, я могу ошибаться, но разве этот атрибут &amp;laquo;игнорировать&amp;raquo; не скомпилирован в ваше приложение?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="84d00784eb2e326dac15d825625d91a29b5bfea5" translate="yes" xml:space="preserve">
          <source>And the other solution is to catch the Exception object and handle it accordingly. The most literal translation for this, based on the context above is this:</source>
          <target state="translated">А другое решение-поймать объект Исключения и обработать его соответствующим образом.Самый буквальный перевод для этого,основанный на приведенном выше контексте,заключается в следующем:</target>
        </trans-unit>
        <trans-unit id="e23465a9f88e5b869b70e2eda4aabcd1e17d5bdd" translate="yes" xml:space="preserve">
          <source>And use them like this:</source>
          <target state="translated">И используй их вот так:</target>
        </trans-unit>
        <trans-unit id="83dc80cdafbb6519dd31ddbbe7cea338e549d4df" translate="yes" xml:space="preserve">
          <source>Any other exceptions will be thrown and the code &lt;code&gt;WebId = Guid.Empty;&lt;/code&gt; won't be hit. If you don't want other exceptions to crash your program, just add this AFTER the other two catches:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Любые другие исключения будут выброшены и код &lt;/font&gt;&lt;/font&gt; &lt;code&gt;WebId = Guid.Empty;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;не будет поражен &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если вы не хотите, чтобы другие исключения вызывали сбой вашей программы, просто добавьте это ПОСЛЕ двух других зацепок:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="418a5b88f6ef7fc8db59855e34f953b266c56327" translate="yes" xml:space="preserve">
          <source>Anyhow, here's what I would do:</source>
          <target state="translated">В любом случае,вот что я сделаю:</target>
        </trans-unit>
        <trans-unit id="2cebdf89c9ac259fa1d1b505d0ff6182557aed9a" translate="yes" xml:space="preserve">
          <source>As others have pointed out, you can have an &lt;code&gt;if&lt;/code&gt; statement inside your catch block to determine what is going on. C#6 supports Exception Filters, so the following will work:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Как уже отмечали другие, вы можете иметь оператор &lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; внутри блока catch, чтобы определить, что происходит. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C # 6 поддерживает фильтры исключений, поэтому будет работать следующее:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9017051d440936e5b5db7f09088015fd98c38bfa" translate="yes" xml:space="preserve">
          <source>At this point, we can add a separate function that handles the different types of Exceptions using overload resolution, or to handle the Exception. Both have disadvantages. To start, here's the way to do it with a helper function:</source>
          <target state="translated">На данный момент мы можем добавить отдельную функцию,которая обрабатывает различные типы Исключений,используя разрешение перегрузки,или обрабатывать Исключение.И то и другое имеет свои недостатки.Для начала,вот как это сделать с помощью вспомогательной функции:</target>
        </trans-unit>
        <trans-unit id="44f53e52ca0613c4c3dd6af286140722dd6c32b8" translate="yes" xml:space="preserve">
          <source>At time of writing, this will include support for C# 6.</source>
          <target state="translated">На момент написания статьи это будет включать в себя поддержку C#6.</target>
        </trans-unit>
        <trans-unit id="0c105894787df0d666b778b4e7e827a820c0c625" translate="yes" xml:space="preserve">
          <source>Because it certainly isn't automatically more readable.</source>
          <target state="translated">Потому что она определенно не является более читабельной автоматически.</target>
        </trans-unit>
        <trans-unit id="84ec264cf702058749562c6d952f580cc6f0e0e8" translate="yes" xml:space="preserve">
          <source>But it&amp;acute;s not. Actually this is the only new feature in C# 6 that is not possible to emulate in prior versions. First, a re-throw means more overhead than skipping the catch. Second, it is not semantically equivalent. The new feature preserves the stack intact when you are debugging your code. Without this feature the crash dump is less useful or even useless.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Но это не так. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;На самом деле это единственная новая функция в C # 6, которую невозможно эмулировать в предыдущих версиях. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Во-первых, повторный бросок означает больше накладных расходов, чем пропуск улова. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Во-вторых, это не семантически эквивалентно. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Новая функция сохраняет стек без изменений при отладке кода. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Без этой функции аварийный дамп менее полезен или даже бесполезен.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8968328136575f096f276fca672f5d7a0e341da4" translate="yes" xml:space="preserve">
          <source>But that's sort of my point.  Y'all have heard of functions/methods, right?  Seriously.  Write a common &lt;code&gt;ErrorHandler&lt;/code&gt; function and, like, call it from each catch block.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Но это своего рода моя точка зрения. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы все слышали о функциях / методах, верно? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Шутки в сторону. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Напишите общую &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;функцию &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ErrorHandler&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и, например, вызывайте ее из каждого блока catch.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="73907b0eca8f7445628e3ca07e7e04aa2be2d3f5" translate="yes" xml:space="preserve">
          <source>Catch &lt;code&gt;System.Exception&lt;/code&gt; and switch on the types</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Поймай &lt;/font&gt;&lt;/font&gt; &lt;code&gt;System.Exception&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;включи&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; типы&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6f1008bdf611d7679d3c3f840c1b061398509ab0" translate="yes" xml:space="preserve">
          <source>Catch multiple exceptions at once</source>
          <target state="translated">Поймать несколько исключений одновременно</target>
        </trans-unit>
        <trans-unit id="2ff92d3d845f125e73f3f4eef6ab12da2f07a6ec" translate="yes" xml:space="preserve">
          <source>Cautioned and Warned: &lt;a href=&quot;http://community.bartdesmet.net/blogs/bart/archive/2008/01/06/exception-handling-in-functional-style.aspx&quot;&gt;Yet another kind, functional style.&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Предостережение и предупреждение: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://community.bartdesmet.net/blogs/bart/archive/2008/01/06/exception-handling-in-functional-style.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;еще один вид, функциональный стиль.&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0d008cb4b49a7d4f44a21a4a3014d343569f652e" translate="yes" xml:space="preserve">
          <source>Construct a new Guid in a temporary variable.</source>
          <target state="translated">Постройте новое Руководство во временной переменной.</target>
        </trans-unit>
        <trans-unit id="8d84823db6b97f3970612fd253baf121c346100a" translate="yes" xml:space="preserve">
          <source>Cutting straight to the chase, this kind of duplicates an earlier answer, but if you really want to perform a common action for several exception types and keep the whole thing neat and tidy within the scope of the one method, why not just use a lambda/closure/inline function to do something like the following?  I mean, chances are pretty good that you'll end up realizing that you just want to make that closure a separate method that you can utilize all over the place. But then it will be super easy to do that without actually changing the rest of the code structurally.  Right?</source>
          <target state="translated">Резюмируя прямо к делу,этот вид дублирует более ранний ответ,но если вы действительно хотите выполнить общее действие для нескольких типов исключений и держать все в рамках одного метода,почему бы просто не использовать функцию lambdaclosureinline,чтобы сделать что-то вроде того,что вы делаете? Я имею в виду,что шансы на то,что вы в конце концов поймете,что вы просто хотите сделать это закрытие отдельным методом,который вы можете использовать везде.Но тогда это будет очень просто сделать,не изменяя на самом деле остальной код структурно.Правда?</target>
        </trans-unit>
        <trans-unit id="e9656fda095be85a55c47e88f0f2142837377331" translate="yes" xml:space="preserve">
          <source>E.g.:</source>
          <target state="translated">E.g.:</target>
        </trans-unit>
        <trans-unit id="5de063f97315c5b8e6e1dc2ce35e02b2a46ba4c4" translate="yes" xml:space="preserve">
          <source>Except that I still kind of hate the one-long-line layout and would personally lay the code out like the following. I think this is as functional as it is aesthetic, since I believe it improves comprehension. Some may disagree:</source>
          <target state="translated">За исключением того,что я до сих пор ненавижу однострочную верстку и лично выкладываю код следующим образом.Я думаю,что это так же функционально,как и эстетически,так как я считаю,что это улучшает понимание.Некоторые могут не согласиться:</target>
        </trans-unit>
        <trans-unit id="75ea838be7539f75e44812538c146599e6015083" translate="yes" xml:space="preserve">
          <source>Exception Hierarchy</source>
          <target state="translated">Иерархия исключений</target>
        </trans-unit>
        <trans-unit id="527e4c0d8a347a6d284b98967bd45b476920144c" translate="yes" xml:space="preserve">
          <source>Exception filters are now available in c# 6+. You can do</source>
          <target state="translated">Фильтры исключений теперь доступны в c#6+.Вы можете сделать</target>
        </trans-unit>
        <trans-unit id="539f0ec3011bd70cde17e4ba28046cf7608d24cc" translate="yes" xml:space="preserve">
          <source>For example if you use a &quot;catch-all&quot; exception as &lt;strong&gt;Exception&lt;/strong&gt; it will preceed all other catch statements and you will obviously get compiler errors however if you reverse the order you can chain up your catch statements (bit of an anti-pattern I think) you can put the catch-all &lt;strong&gt;Exception&lt;/strong&gt; type at the bottom and this will be capture any exceptions that didn't cater for higher up in your try..catch block:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Например, если вы используете исключение &amp;laquo;catch-all&amp;raquo; в качестве &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Exception,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; оно будет предшествовать всем остальным операторам catch, и вы, очевидно, получите ошибки компилятора, однако, если вы поменяете порядок, вы можете связать свои выражения catch (немного анти-паттерна, я думаю, ) вы можете положить кетчуп все &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Exception&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; типа в нижней части, &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;и это будет захват каких - &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;либо исключений , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;которые не поставляют еду для выше в вашем try..catch блоке:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="244c23113ec704871d9cee9221d63c34f391fadd" translate="yes" xml:space="preserve">
          <source>For the sake of completeness, since &lt;strong&gt;.NET 4.0&lt;/strong&gt; the code can rewritten as:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для полноты, начиная с &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.NET 4.0&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; код можно переписать так:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd09ef4377932d2b4de7f67104a8aadaf92c5594" translate="yes" xml:space="preserve">
          <source>For this you need to create several &quot;Catch&quot; method overloads, similar to System.Action:</source>
          <target state="translated">Для этого необходимо создать несколько перегрузок метода &quot;Поймать&quot;,похожих на System.Action:</target>
        </trans-unit>
        <trans-unit id="e509265720b9dd33023c62eb25685529d8bfc817" translate="yes" xml:space="preserve">
          <source>From C#6 you furthermore have the &lt;a href=&quot;https://stackoverflow.com/questions/4268223/c-sharp-exception-filter&quot;&gt;exception-filters&lt;/a&gt; as already mentioned by others. So you can modify the code above to this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;С C # 6 у вас также есть &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4268223/c-sharp-exception-filter&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;фильтры исключений,&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; как уже упоминалось другими. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Таким образом, вы можете изменить код выше к этому:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c2a061516ad58558a806faed3e12641e9f86898b" translate="yes" xml:space="preserve">
          <source>Geared for people that want a &lt;a href=&quot;https://stackoverflow.com/q/791390/1718702&quot;&gt;more elegant solution&lt;/a&gt; to catch once and filter exceptions, I use an extension method as demonstrated below.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Предназначенный для людей, которые хотят &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/q/791390/1718702&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;более элегантное решение,&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; чтобы ловить один раз и фильтровать исключения, я использую метод расширения, как показано ниже.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b1295f86f1d7cbf0ad091e0bccf7386af51e9b2a" translate="yes" xml:space="preserve">
          <source>Given your specific sample, where the fall-back value is cheap to construct, I like to follow these steps:</source>
          <target state="translated">Учитывая вашу конкретную выборку,где стоимость обратного выпадения дешево построить,мне нравится следовать этим шагам:</target>
        </trans-unit>
        <trans-unit id="36f3882107998a3ab41cc38fab92f798f8b2efce" translate="yes" xml:space="preserve">
          <source>Granted, I left the three identical instances of &lt;code&gt;/* write to a log, whatever... */ return;&lt;/code&gt; out of the first example.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Конечно, я оставил три одинаковых экземпляра &lt;/font&gt;&lt;/font&gt; &lt;code&gt;/* write to a log, whatever... */ return;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;из первого примера.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a13352f633c78630c9980aff67adb5108712346" translate="yes" xml:space="preserve">
          <source>Here is how the same problem would look using C# 6.0 syntax:</source>
          <target state="translated">Вот как выглядела бы та же проблема при использовании синтаксиса C#6.0:</target>
        </trans-unit>
        <trans-unit id="73f9549a89eef322c33bad695cd89bf59a3fdef1" translate="yes" xml:space="preserve">
          <source>How about</source>
          <target state="translated">Как насчёт</target>
        </trans-unit>
        <trans-unit id="e7b0dde9db8bb974802ff2df14397ad3d3f6ccd4" translate="yes" xml:space="preserve">
          <source>How much &lt;em&gt;less&lt;/em&gt; readable does this get when you add three more exception types, a month or two from now?  (Answer: it gets a &lt;strong&gt;&lt;em&gt;lot&lt;/em&gt;&lt;/strong&gt; less readable).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Насколько &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;менее&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; читабельным это становится, если добавить еще три типа исключений через месяц или два? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Ответ: это становится &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;намного&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; менее читабельным).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="720545802c225e5d12bd7f9c93865e5a5357bf85" translate="yes" xml:space="preserve">
          <source>I already had this extension in my library, originally written for other purposes, but it worked just perfectly for &lt;code&gt;type&lt;/code&gt; checking on exceptions.  Plus, imho, it looks cleaner than a bunch of &lt;code&gt;||&lt;/code&gt; statements.  Also, unlike the accepted answer, I prefer explicit exception handling so &lt;code&gt;ex is ...&lt;/code&gt; had undesireable behaviour as derrived classes are assignable to there parent types).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я уже это расширение в моей библиотеке, первоначально написанное для других целей, но он работал просто отлично для &lt;/font&gt;&lt;/font&gt; &lt;code&gt;type&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; проверки на исключениях. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Плюс, имхо, это выглядит чище, чем куча &lt;/font&gt;&lt;/font&gt; &lt;code&gt;||&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;заявления. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Кроме того, в отличие от принятого ответа, я предпочитаю явную обработку исключений, так как &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ex is ...&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; имеет нежелательное поведение, поскольку классы наследования могут быть назначены родительским типам).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74240835cd4bc17fc57bd86b1e86aefb93174327" translate="yes" xml:space="preserve">
          <source>I can't help but wonder (&lt;strong&gt;warning:&lt;/strong&gt; a little irony/sarcasm ahead) why on earth go to all this effort to basically just replace the following:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я не могу не задаться вопросом ( &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;предупреждение:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; впереди немножко иронии / сарказма), зачем вообще все эти усилия просто заменять следующим:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c37622ab80f15e89d47339306984a3ac95887a9c" translate="yes" xml:space="preserve">
          <source>I highly recommend folks review this MSDN document:</source>
          <target state="translated">Я настоятельно рекомендую людям ознакомиться с этим документом MSDN:</target>
        </trans-unit>
        <trans-unit id="780d1495b265f4e9a8ecee31bb027832a5d2a8b2" translate="yes" xml:space="preserve">
          <source>I know I'm a little late to the party here, but holy smoke...</source>
          <target state="translated">Я знаю,что немного опоздал на вечеринку,но святой дым...</target>
        </trans-unit>
        <trans-unit id="3d961e357d56d34ad823fd113e2f28765f420089" translate="yes" xml:space="preserve">
          <source>I ran into a use case scenario when trying to cast control object in a datagrid, with either content as TextBox, TextBlock or CheckBox. In this case the returned Exception was the same, but the message varied.</source>
          <target state="translated">Я наткнулся на сценарий использования при попытке разыграть управляющий объект в сетке данных,либо с содержимым в виде TextBox,TextBlock или CheckBox.В этом случае возвращаемое Исключение было тем же самым,но сообщение изменялось.</target>
        </trans-unit>
        <trans-unit id="02f94d544750bdf98fc7f9f1023ba56f6ab0aa09" translate="yes" xml:space="preserve">
          <source>I want to suggest shortest answer (one more &lt;strong&gt;functional style&lt;/strong&gt;):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я хочу предложить кратчайший ответ (еще один &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;функциональный стиль&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0e9dc59e2c3a11b47ed9d2537dbaa8971253f1b1" translate="yes" xml:space="preserve">
          <source>I wonder why no-one noticed that code-duplication.</source>
          <target state="translated">Интересно,почему никто не заметил эту кодовую копию.</target>
        </trans-unit>
        <trans-unit id="c50b41ab335674d6bc828e30c341ae79ecd94048" translate="yes" xml:space="preserve">
          <source>I wonder: Is there a way to catch both exceptions and only call the &lt;code&gt;WebId = Guid.Empty&lt;/code&gt; call once?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Интересно: есть ли способ перехватить оба исключения и вызвать только один раз вызов &lt;/font&gt;&lt;/font&gt; &lt;code&gt;WebId = Guid.Empty&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1c7b599accd0b406b2572bdd7a7f519b38d34b0" translate="yes" xml:space="preserve">
          <source>If any exception is thrown, then WebId is never set to the half-constructed value, and remains Guid.Empty.</source>
          <target state="translated">Если выбрасывается какое-либо исключение,то WebId никогда не устанавливается в полуструктурированное значение,а остается Guid.Empty.</target>
        </trans-unit>
        <trans-unit id="f538280fc4add5df1e61ddb0c8c7aaba59a637ea" translate="yes" xml:space="preserve">
          <source>If constructing the fall-back value is expensive, and resetting a value is much cheaper, then I would move the reset code into its own function:</source>
          <target state="translated">Если построение значения отката стоит дорого,а сброс значения намного дешевле,то я бы переместил код сброса в свою функцию:</target>
        </trans-unit>
        <trans-unit id="f8ad4319bb16a812c6324b95e9c2ebe07f4bf57b" translate="yes" xml:space="preserve">
          <source>If the handler is simple, and we want to re-use code, the best solution is probably to introduce a helper function.</source>
          <target state="translated">Если обработчик прост и мы хотим повторно использовать код,то лучшим решением,вероятно,будет введение вспомогательной функции.</target>
        </trans-unit>
        <trans-unit id="8e330682406f1c4b3a85e106c7382d74887afe47" translate="yes" xml:space="preserve">
          <source>If we don't want to re-throw, we might consider catching the right exceptions, and storing them in a temporary.</source>
          <target state="translated">Если мы не хотим перебрасывать,мы можем подумать о том,чтобы поймать нужные исключения и сохранить их во временном хранилище.</target>
        </trans-unit>
        <trans-unit id="c11db494a0490dce6a9e17bcd6addd3e6e0d163a" translate="yes" xml:space="preserve">
          <source>If we look at the code, what we really would like to do is forward the call. However, according to the MS Partition II, IL exception handler blocks won't work like this, which in this case makes sense because that would imply that the 'exception' object can have different types.</source>
          <target state="translated">Если мы посмотрим на код,то что нам действительно хотелось бы сделать,так это переадресовать звонок.Однако,согласно MS Partition II,блоки обработчики исключений IL не будут так работать,что в данном случае имеет смысл,так как это будет означать,что объект &quot;исключение&quot; может иметь различные типы.</target>
        </trans-unit>
        <trans-unit id="8d8207558989db2e7dfee1091e9a9bd5c52a907d" translate="yes" xml:space="preserve">
          <source>If we want to re-throw, we have no choice but to put the code in a 'Exception' catch handler, which will break FxCop and your debugger's uncaught exceptions.</source>
          <target state="translated">Если мы хотим перебрасывать код,у нас нет другого выбора,кроме как поместить код в обработчик ловушки 'Exception',который сломает FxCop и не пойманные исключения вашего отладчика.</target>
        </trans-unit>
        <trans-unit id="2f0396f3fe0933634437e4d13efa9b48318f3803" translate="yes" xml:space="preserve">
          <source>If you ask me, the second example (with the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;is&lt;/code&gt; keywords) is both significantly less readable, and simultaneously significantly more error-prone during the maintenance phase of your project.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если вы спросите меня, второй пример (с &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ключевыми словами &lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt; &lt;code&gt;is&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) и значительно менее читабелен, и одновременно значительно более подвержен ошибкам на этапе обслуживания вашего проекта.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d147073ec9d1be11df42ab43bd63f496ba553b9" translate="yes" xml:space="preserve">
          <source>If you can upgrade your application to C# 6 you are lucky. The new C# version has implemented Exception filters. So you can write this:</source>
          <target state="translated">Если вы можете обновить свое приложение до C#6,то вам повезло.В новой версии на C#реализованы фильтры исключений.Так что вы можете написать это:</target>
        </trans-unit>
        <trans-unit id="4d552cdbb82e4cf6a4940a80e3f2e1be834c498e" translate="yes" xml:space="preserve">
          <source>If you don't want to use an &lt;code&gt;if&lt;/code&gt; statement within the &lt;code&gt;catch&lt;/code&gt; scopes, &lt;strong&gt;&lt;em&gt;in &lt;code&gt;C# 6.0&lt;/code&gt; you can use &lt;code&gt;Exception Filters&lt;/code&gt; syntax&lt;/em&gt;&lt;/strong&gt; which was already supported by the CLR in previews versions but existed only in &lt;code&gt;VB.NET&lt;/code&gt;/&lt;code&gt;MSIL&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если вы не хотите использовать оператор &lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; в&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; пределах &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;областей &lt;/font&gt;&lt;/font&gt; &lt;code&gt;catch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;в &lt;/font&gt;&lt;/font&gt; &lt;code&gt;C# 6.0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вы можете использовать &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;синтаксис &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exception Filters&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; который уже был поддержан CLR в предварительных версиях, но существовал только в &lt;/font&gt;&lt;/font&gt; &lt;code&gt;VB.NET&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; / &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MSIL&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71674352e64f530a61439601f02e7464c8b3b848" translate="yes" xml:space="preserve">
          <source>If you want to continue using Visual Studio 2013, you can install the following nuget package:</source>
          <target state="translated">Если вы хотите продолжить использование Visual Studio 2013,то можете установить следующий пакет nuget:</target>
        </trans-unit>
        <trans-unit id="dfbebe9c28406d73a5cb8384408c1032f57b8c46" translate="yes" xml:space="preserve">
          <source>In C# 7.0+, you can combine this with pattern matching too</source>
          <target state="translated">В C#7.0+,вы можете комбинировать это с подгонкой шаблона тоже</target>
        </trans-unit>
        <trans-unit id="026fae3457299735b784df3c5b5d4a008f86ea57" translate="yes" xml:space="preserve">
          <source>In c# 6.0,Exception Filters is improvements for exception handling</source>
          <target state="translated">В c#6.0,Фильтры исключений-улучшения для обработки исключений.</target>
        </trans-unit>
        <trans-unit id="ca4b4baab3be903a2c5a12429ced4eab9894b0f5" translate="yes" xml:space="preserve">
          <source>In short, no.</source>
          <target state="translated">Короче говоря,нет.</target>
        </trans-unit>
        <trans-unit id="bad182dce85964009f99188e3387cec999f8a81b" translate="yes" xml:space="preserve">
          <source>Initialize WebId to the fall-back value.</source>
          <target state="translated">Инициализируйте WebId до значения падения.</target>
        </trans-unit>
        <trans-unit id="21c6170e81cf52460da0fc2b6b268b15204775ca" translate="yes" xml:space="preserve">
          <source>Install-Package Microsoft.Net.Compilers</source>
          <target state="translated">Инсталл-пакет Microsoft.Net.Compilers</target>
        </trans-unit>
        <trans-unit id="65101af96bc9264e39ad9b42429b60c89bda3dca" translate="yes" xml:space="preserve">
          <source>It can even be compacted to a single line (though not very pretty)</source>
          <target state="translated">Его можно даже сжать в одну линию (хотя и не очень красиво).</target>
        </trans-unit>
        <trans-unit id="ee03e87bc255456e61aebe03ef23230147a58f5d" translate="yes" xml:space="preserve">
          <source>It is discouraged to simply catch &lt;code&gt;System.Exception&lt;/code&gt;. Instead, only the &quot;known&quot; exceptions should be caught.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Не рекомендуется просто ловить &lt;/font&gt;&lt;/font&gt; &lt;code&gt;System.Exception&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вместо этого должны быть обнаружены только &amp;laquo;известные&amp;raquo; исключения.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2729d160bb79005beca2084b5df0a3f38c86bb26" translate="yes" xml:space="preserve">
          <source>It is just that Simple!!</source>
          <target state="translated">Это так просто!!!</target>
        </trans-unit>
        <trans-unit id="f0e7007b6b6aab9e8c438cca232b2755efd880ff" translate="yes" xml:space="preserve">
          <source>It is worth mentioning here. You can respond to the multiple combinations (Exception error and exception.message).</source>
          <target state="translated">Стоит упомянуть об этом.Вы можете отвечать на множественные комбинации (Ошибка исключения и сообщение exception.message).</target>
        </trans-unit>
        <trans-unit id="90f5902bc1a319f8953809309388ae151bffc367" translate="yes" xml:space="preserve">
          <source>Just call the try and catch twice.</source>
          <target state="translated">Просто позвони и поймай дважды.</target>
        </trans-unit>
        <trans-unit id="1ebe9b7ab107b293b672019c2bf62a545d09cdda" translate="yes" xml:space="preserve">
          <source>Just how I would do it, trying to find the &lt;em&gt;simple is beautiful&lt;/em&gt; pattern</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Просто, как бы я это сделал, пытаясь найти &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;простой, красивый&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; шаблон&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3de8e13f2d58751d17f79ba82916bddcf4930db9" translate="yes" xml:space="preserve">
          <source>Just saying...</source>
          <target state="translated">Просто говорю...</target>
        </trans-unit>
        <trans-unit id="f654315c2642f6686f15e838fb9cfaef4a30f5c6" translate="yes" xml:space="preserve">
          <source>Let me break your question into 2 questions.  The first,</source>
          <target state="translated">Позвольте мне разбить ваш вопрос на два вопроса.Первый,</target>
        </trans-unit>
        <trans-unit id="277d463ead616f9c9e3a25bac2ef07c11f92c5ef" translate="yes" xml:space="preserve">
          <source>Matching behaviour for &lt;code&gt;Exception&lt;/code&gt; types is exact (ie. A child IS NOT a match for any of its parent types).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Поведение соответствия для &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;типов &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; является точным (т. Е. Дочерний элемент НЕ соответствует ни одному из своих родительских типов).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="50f1c5e1d73fc644c699b6519af102026e9072e7" translate="yes" xml:space="preserve">
          <source>Maybe try to keep your code simple such as putting the common code in a method, as you would do in any other part of the code that is not inside a catch clause?</source>
          <target state="translated">Может быть,попробуйте упростить свой код,например,поместить обычный код в метод,как вы бы сделали это в любой другой части кода,которая не находится внутри пункта catch?</target>
        </trans-unit>
        <trans-unit id="f129e30c19fc94a60bf892f96e6f7cc1c93ac303" translate="yes" xml:space="preserve">
          <source>Next useless update to this useless answer comes when deconstruction of out-parameters is implemented in C# 12. :)</source>
          <target state="translated">Следующее бесполезное обновление на этот бесполезный ответ наступает при реализации деконструкции out-параметров в C#12.:).</target>
        </trans-unit>
        <trans-unit id="ff3606b31e07f3a5fe0e676990944aadfec5d0d5" translate="yes" xml:space="preserve">
          <source>Not in C# unfortunately, as you'd need an exception filter to do it and C# doesn't expose that feature of MSIL. VB.NET does have this capability though, e.g.</source>
          <target state="translated">К сожалению,не на C#,так как для этого нужен фильтр исключений,а C#не раскрывает эту возможность MSIL.Однако у VB.NET есть такая возможность,например.</target>
        </trans-unit>
        <trans-unit id="387204d2ecb9509b33590cf8b44afd14a24010d1" translate="yes" xml:space="preserve">
          <source>Note that I did find one way to do it, but this looks more like material for &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Daily_WTF&quot;&gt;The Daily WTF&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Обратите внимание, что я нашел один способ сделать это, но это больше похоже на материал для &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Daily_WTF&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;The Daily WTF&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a8b5338876c5a2c0e9ee51235aebc5eed5d58b7b" translate="yes" xml:space="preserve">
          <source>Note that as opposed to an &lt;code&gt;if&lt;/code&gt; statement inside the &lt;code&gt;catch&lt;/code&gt;'s scope, &lt;code&gt;Exception Filters&lt;/code&gt; cannot throw &lt;code&gt;Exceptions&lt;/code&gt;, and when they do, or when the condition is not &lt;code&gt;true&lt;/code&gt;, the next &lt;code&gt;catch&lt;/code&gt; condition will be evaluated instead:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Обратите внимание , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;что в отличие от , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; заявления внутри &lt;/font&gt;&lt;/font&gt; &lt;code&gt;catch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;laquo;s рамок, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exception Filters&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не могут бросить &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exceptions&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , и когда они делают, или если условие не &lt;/font&gt;&lt;/font&gt; &lt;code&gt;true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , то следующий &lt;/font&gt;&lt;/font&gt; &lt;code&gt;catch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; условие будет оцениваться вместо этого:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="307da8d59df79d213bf1937c633e591c2d7b1f47" translate="yes" xml:space="preserve">
          <source>Now, this sometimes leads to unneccessary repetitive code, for example:</source>
          <target state="translated">Иногда это приводит,например,к ненужному повторяющемуся коду:</target>
        </trans-unit>
        <trans-unit id="c38182e25f1f4e2e680c0985dd7c98b38942c400" translate="yes" xml:space="preserve">
          <source>One of the major points, really, is that most of the point of formatting the textual source code that we're all looking at every day is to make it really, really obvious to other human beings what is actually happening when the code runs.  Because the compiler turns the source code into something totally different and couldn't care less about your code formatting style.  So all-on-one-line totally sucks, too.</source>
          <target state="translated">Один из главных моментов,на самом деле,заключается в том,что большая часть смысла форматирования текстового исходного кода,на который мы все смотрим каждый день,заключается в том,чтобы сделать действительно,действительно очевидным для других людей то,что на самом деле происходит,когда код работает.Потому что компилятор превращает исходный текст во что-то совершенно другое и не может не заботиться о стиле форматирования кода.Так что all-on-one-line тоже отстой.</target>
        </trans-unit>
        <trans-unit id="c2798cf70d9db202201ca1f462f0a7aa390a26de" translate="yes" xml:space="preserve">
          <source>Or to write it in code, we ask the compiler to do something like this (well it's not entirely correct, but it's the closest possible thing I guess):</source>
          <target state="translated">Или,чтобы написать его в коде,мы просим компилятор сделать что-нибудь подобное (ну это не совсем корректно,но,наверное,ближе всего):</target>
        </trans-unit>
        <trans-unit id="2c16777d24367e3f298e7a67a4bfda81a4d9675f" translate="yes" xml:space="preserve">
          <source>Output: Catch.</source>
          <target state="translated">Выход:Лови.</target>
        </trans-unit>
        <trans-unit id="3c0e4355b62280b3263546bae6eb0a516c472868" translate="yes" xml:space="preserve">
          <source>Output: General catch.</source>
          <target state="translated">Выход:Общий улов.</target>
        </trans-unit>
        <trans-unit id="ecc3cfb9af571c4404afc45fdc1346391cba3878" translate="yes" xml:space="preserve">
          <source>Referencing this package will cause the project to be built using the
  specific version of the C# and Visual Basic compilers contained in the
  package, as opposed to any system installed version.</source>
          <target state="translated">Ссылка на этот пакет приведет к тому,что проект будет собираться с использованием конкретной версии компиляторов C#и Visual Basic,содержащихся в пакете,в отличие от любой установленной версии системы.</target>
        </trans-unit>
        <trans-unit id="9889f134527432dcbe02f9a4e26a1566fa481e1d" translate="yes" xml:space="preserve">
          <source>See a &lt;a href=&quot;https://roslyn.codeplex.com/discussions/541301&quot;&gt;discussion about this on CodePlex&lt;/a&gt;. And an &lt;a href=&quot;http://www.volatileread.com/Wiki/Index?id=1087&quot;&gt;example showing the difference&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Смотрите &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://roslyn.codeplex.com/discussions/541301&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;обсуждение этого на CodePlex&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;И &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.volatileread.com/Wiki/Index?id=1087&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;пример, показывающий разницу&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a0f044dd5ba573faa03180c7cb9425085f563062" translate="yes" xml:space="preserve">
          <source>Set WebId to the fully constructed temporary variable.  Make this the final statement of the try{} block.</source>
          <target state="translated">Установите WebId в полностью построенную временную переменную.Сделайте это окончательным выражением блока try{}.</target>
        </trans-unit>
        <trans-unit id="7c209d0a5eace88efaaedde48c3ad7c2f70ca081" translate="yes" xml:space="preserve">
          <source>Since &lt;strong&gt;C# 7&lt;/strong&gt; you can avoid introducing a variable on a separate line:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Начиная с &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C # 7,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вы можете избежать введения переменной в отдельной строке:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fc2791091b2e77f5c8e25ff45eeded0171a350f8" translate="yes" xml:space="preserve">
          <source>Since I felt like these answers just touched the surface, I attempted to dig a bit deeper.</source>
          <target state="translated">Так как я чувствовал,что эти ответы просто коснулись поверхности,я попытался копнуть немного глубже.</target>
        </trans-unit>
        <trans-unit id="ff984b756a47a0896f0f17221cd64b0b91c34398" translate="yes" xml:space="preserve">
          <source>Slightly revised version of your code:</source>
          <target state="translated">Слегка переработанная версия вашего кода:</target>
        </trans-unit>
        <trans-unit id="a347d294b31f0747c0d427b69390320d40eb5848" translate="yes" xml:space="preserve">
          <source>So the code looks like:</source>
          <target state="translated">Значит,код выглядит так:</target>
        </trans-unit>
        <trans-unit id="d5ebe26a1976d35b403686baa594965c8a21ec1d" translate="yes" xml:space="preserve">
          <source>So to conclude:</source>
          <target state="translated">Итак,в заключение:</target>
        </trans-unit>
        <trans-unit id="fba6c3dd6bfcb0f8599df48543715d028146b9e2" translate="yes" xml:space="preserve">
          <source>So what we would really want to do is something that doesn't compile, say:</source>
          <target state="translated">Итак,что мы действительно хотели бы сделать,так это что-то,что,скажем,не компилируется:</target>
        </trans-unit>
        <trans-unit id="0b2999dc55eadeb32a8eea7837711256935984c0" translate="yes" xml:space="preserve">
          <source>So why won't this code compile - and how can we hack it in such a way that it will?</source>
          <target state="translated">Так почему же этот код не скомпилируется-и как его можно взломать таким образом?</target>
        </trans-unit>
        <trans-unit id="59d5b84e463ffda163b9c20671002ba7bede5835" translate="yes" xml:space="preserve">
          <source>So you&amp;acute;re repeating lots of code within every exception-switch? Sounds like extracting a method would be god idea, doesn&amp;acute;t it?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;То есть вы повторяете много кода в каждом переключателе исключений? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Похоже, что извлечение метода было бы идеей бога, не так ли?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="28aad4ec99b5934be9e01f44169ee4a3c9b2b75b" translate="yes" xml:space="preserve">
          <source>So your code comes down to this:</source>
          <target state="translated">Итак,твой код сводится к этому:</target>
        </trans-unit>
        <trans-unit id="ef13ab8ec9dd166e5d867d7fbbb39bb73cd543e4" translate="yes" xml:space="preserve">
          <source>Some people think this code is the same as</source>
          <target state="translated">Некоторые люди думают,что этот код такой же,как</target>
        </trans-unit>
        <trans-unit id="7341f6385aceb3a37913d3cc72774b078a8510f0" translate="yes" xml:space="preserve">
          <source>String comparisons are ugly and slow.</source>
          <target state="translated">Сравнение струн уродливо и медленно.</target>
        </trans-unit>
        <trans-unit id="c302bfb8c6ca9631e91e2a7e11fcb4a4304b008c" translate="yes" xml:space="preserve">
          <source>That leaves just the 're-throw'. For this to work, we need to be able to perform the handling inside the 'catch' block - and the only way to make this work is by an catching 'Exception' object.</source>
          <target state="translated">Остаётся только &quot;перебросить&quot;.Чтобы это сработало,нам нужно уметь выполнять обработку внутри блока 'catch'-и единственный способ сделать эту работу-это перехват объекта 'Exception'.</target>
        </trans-unit>
        <trans-unit id="5224130c9b85acc029bcb32616a1b11cc5806f7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MyFilter&lt;/code&gt; method could then look something like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Затем &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;метод &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyFilter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; может выглядеть примерно так:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ece06866e04ad9203ab4d537beecbf110f7d9a8" translate="yes" xml:space="preserve">
          <source>The accepted answer seems acceptable, except that CodeAnalysis/&lt;a href=&quot;http://en.wikipedia.org/wiki/FxCop&quot;&gt;FxCop&lt;/a&gt; will complain about the fact that it's catching a general exception type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Принятый ответ кажется приемлемым, за исключением того, что CodeAnalysis / &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/FxCop&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;FxCop&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; будет жаловаться на тот факт, что он перехватывает общий тип исключения.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4781fc70c4345a21044d116b1280161a2c9956c1" translate="yes" xml:space="preserve">
          <source>The bigger question to this is &lt;em&gt;why&lt;/em&gt;. I do not think the cost outweighs the gain here :)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Большой вопрос к этому - &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;почему&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я не думаю, что стоимость перевешивает выигрыш здесь :)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f58cc981739315748cd319c85046ccdfa234e3cd" translate="yes" xml:space="preserve">
          <source>The code isn't nested</source>
          <target state="translated">Код не вложен</target>
        </trans-unit>
        <trans-unit id="2b8b76967a2caca71316d6dcba09aade5b7149fb" translate="yes" xml:space="preserve">
          <source>The given example is rather simple, as it's only a &lt;a href=&quot;http://en.wikipedia.org/wiki/Globally_unique_identifier&quot;&gt;&lt;code&gt;GUID&lt;/code&gt;&lt;/a&gt;. But imagine code where you modify an object multiple times, and if one of the manipulations fail in an expected way, you want to &quot;reset&quot; the &lt;code&gt;object&lt;/code&gt;. However, if there is an unexpected exception, I still want to throw that higher.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Данный пример довольно прост, так как это всего лишь &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Globally_unique_identifier&quot;&gt; &lt;code&gt;GUID&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Но представьте себе код, в котором вы несколько раз модифицируете объект, и если одна из манипуляций не удалась ожидаемым образом, вы хотите &amp;laquo;сбросить&amp;raquo; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Однако, если есть неожиданное исключение, я все еще хочу бросить это выше.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d50d11a893fba32da9b37c41ce8ed5904f8bc553" translate="yes" xml:space="preserve">
          <source>The maintenance phase, for anyone who might be relatively new to programming, is going to comprise 98.7% or more of the overall lifetime of your project, and the poor schmuck doing the maintenance is almost certainly going to be someone other than you. And there is a very good chance they will spend 50% of their time on the job cursing your name.</source>
          <target state="translated">Фаза сопровождения,для любого,кто может быть относительно новичком в программировании,будет составлять 98.7% и более от общего срока жизни вашего проекта,а бедный болван,который будет заниматься сопровождением,почти наверняка будет кем-то другим,кроме вас.И есть очень большая вероятность,что они потратят 50% своего времени на эту работу,проклиная ваше имя.</target>
        </trans-unit>
        <trans-unit id="f61c0731b8f8a19c626811dc48dad3864d3e64a0" translate="yes" xml:space="preserve">
          <source>The obvious disadvantages for this are that we cannot re-throw properly, and -well let's be honest- that it's quite the ugly solution. The uglyness can be fixed a bit by performing branch elimination, which makes the solution slightly better:</source>
          <target state="translated">Очевидным недостатком является то,что мы не можем правильно перебрасывать,и-что ж,давайте будем честными-это довольно уродливое решение.Уродство можно немного исправить,выполнив удаление ветвей,что делает решение немного лучше:</target>
        </trans-unit>
        <trans-unit id="b53b26658767f7dd6c482127876a53fe82bf3174" translate="yes" xml:space="preserve">
          <source>The reason that this won't compile is quite obvious: what type and value would the '$exception' object have (which are here stored in the variables 'e')? The way we want the compiler to handle this is to note that the common base type of both exceptions is 'Exception', use that for a variable to contain both exceptions, and then handle only the two exceptions that are caught. The way this is implemented in IL is as 'filter', which is available in VB.Net.</source>
          <target state="translated">Причина,по которой он не будет компилироваться,вполне очевидна:какой тип и значение имел бы объект '$exception' (которые здесь хранятся в переменных 'e')? Мы хотим,чтобы компилятор справился с этим,а именно:общий базовый тип обоих исключений-'Exception',используйте его для того,чтобы переменная содержала оба исключения,а затем обрабатывайте только два перехваченных исключения.В IL это реализовано в виде 'фильтра',который доступен в VB.Net.</target>
        </trans-unit>
        <trans-unit id="7c628a163cc1b537d3685215329c5d7321e035cc" translate="yes" xml:space="preserve">
          <source>The reason we want this is because we don't want the exception handler to catch things that we need later on in the process. Sure, we can catch an Exception and check with an 'if' what to do, but let's be honest, we don't really want that. (FxCop, debugger issues, uglyness)</source>
          <target state="translated">Причина,по которой мы хотим этого,заключается в том,что мы не хотим,чтобы обработчик исключений ловил то,что нам нужно в дальнейшем.Конечно,мы можем поймать исключение и проверить &quot;если&quot;,что делать,но давайте будем честными,мы на самом деле не хотим этого.(FxCop,проблемы с отладчиком,уродство)</target>
        </trans-unit>
        <trans-unit id="38cf9971eeb919703b567eb892ae4463f4a39305" translate="yes" xml:space="preserve">
          <source>There are a few advantages of inverting the expression:</source>
          <target state="translated">Есть несколько преимуществ инвертирования выражения:</target>
        </trans-unit>
        <trans-unit id="2805d8052ac54e828feb8e44e99582c2fc025010" translate="yes" xml:space="preserve">
          <source>There's no risk of forgetting the 'throw' or 'return' statements that in Joseph's solution are separated from the expression.</source>
          <target state="translated">Нет никакого риска забыть слова &quot;бросить&quot; или &quot;вернуть&quot;,которые в решении Джозефа отделены от выражения.</target>
        </trans-unit>
        <trans-unit id="5952b23f46d9b0270fef53d9264d1c1c54c042f0" translate="yes" xml:space="preserve">
          <source>This code will catch the &lt;code&gt;Exception&lt;/code&gt; only when it's a &lt;code&gt;InvalidDataException&lt;/code&gt; or &lt;code&gt;ArgumentNullException&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Этот код будет перехватывать &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; только тогда, когда это &lt;/font&gt;&lt;/font&gt; &lt;code&gt;InvalidDataException&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; или &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ArgumentNullException&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4a00e29090c2c1e94dc2959e6bfe7c8589784d0c" translate="yes" xml:space="preserve">
          <source>This is a classic problem every C# developer faces eventually.</source>
          <target state="translated">Это классическая проблема,с которой в конечном итоге сталкивается каждый разработчик C#.</target>
        </trans-unit>
        <trans-unit id="c7097eacdf2ef8cb7152d26b733053d7d356d8ad" translate="yes" xml:space="preserve">
          <source>This is a variant of Matt's answer (I feel that this is a bit cleaner)...use a method:</source>
          <target state="translated">Это вариант ответа Мэтта (я чувствую,что это немного чище)...используйте метод:</target>
        </trans-unit>
        <trans-unit id="d064d3721c19dbe49384f0cc083a7d861381bfc2" translate="yes" xml:space="preserve">
          <source>This is different from using an &lt;code&gt;if&lt;/code&gt; statement from within the &lt;code&gt;catch&lt;/code&gt; block, using exception filters &lt;strong&gt;will not&lt;/strong&gt; unwind the stack.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это отличается от использования оператора &lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; внутри &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;блока &lt;/font&gt;&lt;/font&gt; &lt;code&gt;catch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , использование фильтров исключений &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;не приведет к&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; разматыванию стека.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ac3d44b1b396d47e05b659d56060dba602f9ef49" translate="yes" xml:space="preserve">
          <source>To make it work in C#, we need a temporary variable with the correct 'Exception' base type. To control the flow of the code, we can add some branches. Here goes:</source>
          <target state="translated">Для работы на C#нам нужна временная переменная с правильным базовым типом 'Exception'.Для управления потоком кода можно добавить несколько веток.Итак:</target>
        </trans-unit>
        <trans-unit id="c51fe20cce0d7eb3f5f99f34d3c1e5b5aba580ac" translate="yes" xml:space="preserve">
          <source>Update 2015-12-15: See &lt;a href=&quot;https://stackoverflow.com/a/22864936/1718702&quot;&gt;https://stackoverflow.com/a/22864936/1718702&lt;/a&gt; for C#6. It's a cleaner and now standard in the language.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Обновление 2015-12-15: см. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/22864936/1718702&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Https://stackoverflow.com/a/22864936/1718702&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для C # 6. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это чище и теперь стандарт в языке.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ef54e2ab9573a1dc779ebbc0d5c7ab555e163fd5" translate="yes" xml:space="preserve">
          <source>Wanted to added my short answer to this already long thread.  Something that hasn't been mentioned is the order of precedence of the catch statements, more specifically you need to be aware of the scope of each type of exception you are trying to catch.</source>
          <target state="translated">Хотел добавить мой короткий ответ на эту и без того длинную тему.Чего-то,что не было упомянуто,так это порядка старшинства операторов catch,а точнее,вы должны быть осведомлены о сфере действия каждого типа исключений,которые вы пытаетесь поймать.</target>
        </trans-unit>
        <trans-unit id="f657cff0d5b3756ec384f3714196cff6006b0a71" translate="yes" xml:space="preserve">
          <source>What is in the link doesn't answer your question directly, but it's trivial to extend it to look like:</source>
          <target state="translated">То,что находится в ссылке,не дает прямого ответа на ваш вопрос,но банально расширять ее,чтобы она выглядела как:</target>
        </trans-unit>
        <trans-unit id="99943cfb5ecf002e5e9ae5a52b8b28cf24b0de74" translate="yes" xml:space="preserve">
          <source>What you could do is use an anonymous function to encapsulate your on-error code, and then call it in those specific catch blocks:</source>
          <target state="translated">Что вы можете сделать,так это использовать анонимную функцию для инкапсуляции вашего on-error кода,а затем вызывать его в этих конкретных блоках подхвата:</target>
        </trans-unit>
        <trans-unit id="ca80db7575742b27fde65b854b945355d61acbf1" translate="yes" xml:space="preserve">
          <source>When there is more then one &lt;code&gt;true&lt;/code&gt;&lt;code&gt;Exception Filter&lt;/code&gt; - the first one will be accepted:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если имеется более одного &lt;/font&gt;&lt;/font&gt; &lt;code&gt;true&lt;/code&gt; &lt;code&gt;Exception Filter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - будет принят первый:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7a09fc641433a64a134033646f75d56fd17522d" translate="yes" xml:space="preserve">
          <source>Which leads to the next question,</source>
          <target state="translated">Что приводит к следующему вопросу,</target>
        </trans-unit>
        <trans-unit id="eae36f0ce3daef78241f69b2133207bcf3a34e61" translate="yes" xml:space="preserve">
          <source>With C# 7 &lt;a href=&quot;https://stackoverflow.com/a/136038&quot;&gt;the answer from Michael Stum&lt;/a&gt; can be improved while keeping the readability of a switch statement:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;С C # 7 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/136038&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ответ от Michael Stum&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; может быть улучшен при сохранении читабельности оператора switch:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="528302a0747104d2be1351ddb8503984852db552" translate="yes" xml:space="preserve">
          <source>Would putting the entire &lt;code&gt;if&lt;/code&gt; test on one line make it more readable? I don't think so.  I mean, I did have another programmer vehemently argue once long ago that putting more code on one line would make it &quot;run faster.&quot;  But of course he was stark raving nuts. Trying to explain to him (with a straight face--which was challenging) how the interpreter or compiler would break that long line apart into discrete one-instruction-per-line statements--essentially identical to the result if he had gone ahead and just made the code readable instead of trying to out-clever the compiler--had no effect on him whatsoever.  But I digress.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Поместит ли весь &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;тест, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; он будет в одну строку, более читабельно Я так не думаю. Я имею в виду, у меня когда-то был другой программист, яростно споривший однажды, что размещение большего количества кода в одной строке заставит его &amp;laquo;работать быстрее&amp;raquo;. Но, конечно, он был совершенно безумным. Попытка объяснить ему (с открытым лицом - что было непросто), как интерпретатор или компилятор разбил бы эту длинную строку на отдельные операторы с одной инструкцией на строку - по существу, идентичные результату, если бы он пошел вперед и просто сделал код читабельным вместо того, чтобы пытаться перехитрить компилятор - не оказал на него никакого влияния. Но я отвлекся.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="131f753f0d5bbeaa4b9a7cad82488c60f2611438" translate="yes" xml:space="preserve">
          <source>You can also create methods for parsing returning tuples, which aren't available in .NET Framework yet as of version 4.6:</source>
          <target state="translated">Вы также можете создать методы анализа возвращаемых кортежей,которые еще не доступны в .NET Framework начиная с версии 4.6:</target>
        </trans-unit>
        <trans-unit id="f61fac0758d9e743bebe99080ec29731f9ec5c60" translate="yes" xml:space="preserve">
          <source>You can download &lt;a href=&quot;http://www.visualstudio.com/en-us/downloads/visual-studio-2015-downloads-vs.aspx&quot;&gt;Visual Studio 2015&lt;/a&gt; to check this out.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы можете скачать &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.visualstudio.com/en-us/downloads/visual-studio-2015-downloads-vs.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Visual Studio 2015,&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; чтобы проверить это.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1e5e031fbb8dbee194806a598096e8bbb6e5cc91" translate="yes" xml:space="preserve">
          <source>and so on as many as you wish. But you need to do it once and you can use it in all your projects (or, if you created a nuget package we could use it too).</source>
          <target state="translated">и так далее,сколько захочешь.Но вам нужно сделать это один раз,и вы можете использовать его во всех своих проектах (или,если вы создали самородный пакет,мы тоже можем его использовать).</target>
        </trans-unit>
        <trans-unit id="139bc28d7f6f0cb680c67b97d63cee5a0af93231" translate="yes" xml:space="preserve">
          <source>in C# 6 the recommended approach is to use Exception Filters, here is an example:</source>
          <target state="translated">в C#6 рекомендуемый подход-использование фильтров исключений,вот пример:</target>
        </trans-unit>
        <trans-unit id="e163cb1fcc4cf94d0647fa5057c3c5055217b4d7" translate="yes" xml:space="preserve">
          <source>p.s. I haven't put null checks for code simplicity, consider to add parameter validations.</source>
          <target state="translated">p.s.Я не ставил нулевую проверку простоты кода,подумайте о добавлении проверки параметров.</target>
        </trans-unit>
        <trans-unit id="b52463a5170e012e085593425db69ddae475562f" translate="yes" xml:space="preserve">
          <source>p.s.2 
If you want to return a value from the catch, it's necessary to do same Catch methods, but with returns and Func instead of Action in parameters.</source>
          <target state="translated">p.s.2 Если вы хотите вернуть значение из подхвата,необходимо сделать те же методы подхвата,но с возвратами и функцией вместо Action в параметрах.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
