<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/136035">
    <body>
      <group id="136035">
        <trans-unit id="5aaf15b051a125920955bd69c723d28dfb1dc6e9" translate="yes" xml:space="preserve">
          <source>...with some crazy variation of this next code smell, I mean example, only to pretend that you're saving a few keystrokes.</source>
          <target state="translated">...con alguna loca variaci贸n del olor del pr贸ximo c贸digo,por ejemplo,s贸lo para fingir que te ahorras unas cuantas pulsaciones.</target>
        </trans-unit>
        <trans-unit id="c8d3c34755a48a88bcc07da0a84528f3d86616bd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.guid.tryparse.aspx&quot;&gt;TryParse&lt;/a&gt; never throws exceptions and returns false if format is wrong, setting WebId to &lt;code&gt;Guid.Empty&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.guid.tryparse.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;TryParse&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; nunca arroja excepciones y devuelve falso si el formato es incorrecto, configurando WebId en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Guid.Empty&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6a520e492fbc31afda2a4ca2670d6f40c2c2beb0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/questions/136035/catch-multiple-exceptions-at-once/136092#136092&quot;&gt;Joseph Daigle's Answer&lt;/a&gt; is a good solution, but I found the following structure to be a bit tidier and less error prone.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/136035/catch-multiple-exceptions-at-once/136092#136092&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La respuesta de Joseph Daigle&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una buena soluci&amp;oacute;n, pero encontr&amp;eacute; que la siguiente estructura es un poco m&amp;aacute;s ordenada y menos propensa a errores.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4e3308c299b7c14b6f16899d7f58eff6d125a522" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Basically provide another empty &lt;code&gt;Catch&lt;/code&gt; overload which returns itself)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(B&amp;aacute;sicamente, proporcione otra &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sobrecarga de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Catch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; vac&amp;iacute;a &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;que se devuelve)&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3aaed97268833a9918a2ba771f9d165a93561908" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms182271.aspx&quot;&gt;CA1800: Do not cast unnecessarily&lt;/a&gt;&lt;/em&gt; says to &quot;consider testing the result of the 'as' operator instead&quot;, but if you do that, you'll be writing more code than if you catch each exception separately.</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms182271.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CA1800: No emitir innecesariamente&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; dice &quot;considere probar el resultado del operador 'como' en su lugar&quot;, pero si lo hace, escribir&amp;aacute; m&amp;aacute;s c&amp;oacute;digo que si detecta cada excepci&amp;oacute;n por separado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c2ba87e75a77003d169867541b8e1d7b0dbe538c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Also, specifically &lt;code&gt;Guid&lt;/code&gt; has the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.guid.tryparse(v=vs.110).aspx&quot;&gt;&lt;code&gt;Guid.TryParse&lt;/code&gt;&lt;/a&gt; method.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, espec&amp;iacute;ficamente &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Guid&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.guid.tryparse(v=vs.110).aspx&quot;&gt; &lt;code&gt;Guid.TryParse&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;TryParse&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ab87e8771981891dc3537b561271b84c06af8064" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Can I catch multiple exceptions at once?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Puedo atrapar m&amp;uacute;ltiples excepciones a la vez?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a5c15139e290a34ffa9e286ddfe7f8c968c4f93f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT:&lt;/strong&gt; I do concur with others who are saying that, as of C# 6.0, exception filters are now a perfectly fine way to go: &lt;code&gt;catch (Exception ex) when (ex is ... || ex is ... )&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;EDITAR:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Estoy de acuerdo con otros que dicen que, a partir de C # 6.0, los filtros de excepci&amp;oacute;n ahora son una forma perfecta de hacerlo: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;catch (Exception ex) when (ex is ... || ex is ... )&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52eee279cccac78795d9bd9b538cdd8748c99dc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit:&lt;/strong&gt; 
The &lt;a href=&quot;http://www.codeproject.com/Articles/853207/What-s-new-in-Csharp-Exception-Filters&quot;&gt;exception filtering&lt;/a&gt; in C# 6.0 will make the syntax a bit cleaner and comes with a &lt;a href=&quot;https://stackoverflow.com/a/27082164/2802543&quot;&gt;number of other benefits&lt;/a&gt; over any current solution. (most notably leaving the stack unharmed)</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Editar:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.codeproject.com/Articles/853207/What-s-new-in-Csharp-Exception-Filters&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;filtro de excepci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en C # 6.0 har&amp;aacute; que la sintaxis sea un poco m&amp;aacute;s limpia y viene con una &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/27082164/2802543&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;serie de otros beneficios&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sobre cualquier soluci&amp;oacute;n actual. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(m&amp;aacute;s notablemente dejando la pila ilesa)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="feb4ca963f08224ee8b4571f84c00c0036a54d42" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Full Error Handling Example (Copy-Paste to new Console app)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ejemplo completo de manejo de errores (copiar y pegar en la nueva aplicaci&amp;oacute;n de consola)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3b3141404e1e36c9cdf3d5f38083a4df531a0430" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How do I avoid writing duplicate code given that I can't catch multiple exception types in the same catch() block?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;C&amp;oacute;mo evito escribir c&amp;oacute;digo duplicado dado que no puedo atrapar m&amp;uacute;ltiples tipos de excepci&amp;oacute;n en el mismo bloque catch ()?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="850301d4e8188e719ad5b1ae8a67aef29261306f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IsAnyOf.cs Extension (See Full Error Handling Example for Dependancies)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Extensi&amp;oacute;n IsAnyOf.cs (Ver ejemplo de manejo completo de errores para dependencias)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="542b69fedc4d99881098791ff30ae7adef1bcd67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ORIGINAL:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ORIGINAL:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9a5181d2939565f52ceafa914e74e4bfb90a7f80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Two Sample NUnit Unit Tests&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dos muestras de pruebas de unidad NUnit&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="372f60334aa5d8918e891d52c780ab816ff7ba23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Usage&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="06d054af62aba5965b1c775157b32a35d2c79e1d" translate="yes" xml:space="preserve">
          <source>@Micheal</source>
          <target state="translated">@Micheal</target>
        </trans-unit>
        <trans-unit id="3389e9e3d38bd01137e197e890e0a7791c71610c" translate="yes" xml:space="preserve">
          <source>A return statement is not necessary</source>
          <target state="translated">No es necesaria una declaraci贸n de devoluci贸n</target>
        </trans-unit>
        <trans-unit id="b65d43af93dde5ad9ef5b8514f0df207615395e0" translate="yes" xml:space="preserve">
          <source>Actually, you can put basically any condition inside that &lt;code&gt;when&lt;/code&gt; clause:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En realidad, puedes poner b&amp;aacute;sicamente cualquier condici&amp;oacute;n dentro de esa &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cl&amp;aacute;usula &lt;/font&gt;&lt;/font&gt; &lt;code&gt;when&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cca8d2a8a73470cc7df126300c74b7f20e4a6720" translate="yes" xml:space="preserve">
          <source>Also, it seems the &quot;is&quot; operator might degrade performance slightly.</source>
          <target state="translated">Adem谩s,parece que el operador &quot;es&quot; podr铆a degradar ligeramente el rendimiento.</target>
        </trans-unit>
        <trans-unit id="caf67b064a82111165779047a0bb4a5990dbbf9a" translate="yes" xml:space="preserve">
          <source>Alternatively, this can be all done inline (the right hand side of the when statement just has to be a boolean expression).</source>
          <target state="translated">Alternativamente,todo esto se puede hacer en l铆nea (el lado derecho de la declaraci贸n de cu谩ndo s贸lo tiene que ser una expresi贸n booleana).</target>
        </trans-unit>
        <trans-unit id="347c0c93fde8f4ac618ed62172bad2761087e0f6" translate="yes" xml:space="preserve">
          <source>And CatchMany implementation:</source>
          <target state="translated">Y la implementaci贸n de CatchMany:</target>
        </trans-unit>
        <trans-unit id="d53cb30e5dd50782f910c1090f2fcd20924a8cd3" translate="yes" xml:space="preserve">
          <source>And as you can see in the &lt;code&gt;MSIL&lt;/code&gt; the code is not translated to &lt;code&gt;if&lt;/code&gt; statements, but to &lt;code&gt;Filters&lt;/code&gt;, and &lt;code&gt;Exceptions&lt;/code&gt; cannot be throw from within the areas marked with &lt;code&gt;Filter 1&lt;/code&gt; and &lt;code&gt;Filter 2&lt;/code&gt; but the filter throwing the &lt;code&gt;Exception&lt;/code&gt; will fail instead, also the last comparison value pushed to the stack before the &lt;code&gt;endfilter&lt;/code&gt; command will determine the success/failure of the filter (&lt;code&gt;Catch 1&lt;/code&gt;&lt;strong&gt;&lt;em&gt;XOR&lt;/em&gt;&lt;/strong&gt;&lt;code&gt;Catch 2&lt;/code&gt; will execute accordingly):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y como puede ver en el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MSIL&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; el c&amp;oacute;digo no se traduce a &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;declaraciones &lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , sino a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Filters&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y las &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exceptions&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no se pueden lanzar desde las &amp;aacute;reas marcadas con el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Filter 1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Filter 2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; pero el filtro que arroja la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; fallar&amp;aacute;, tambi&amp;eacute;n el &amp;uacute;ltimo El valor de comparaci&amp;oacute;n empujado a la pila antes del &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;comando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;endfilter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; determinar&amp;aacute; el &amp;eacute;xito / falla del filtro ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Catch 1&lt;/code&gt; &lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;XOR&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt; &lt;code&gt;Catch 2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se ejecutar&amp;aacute; en consecuencia):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea816fd8da8992b183fbc63d106dea153a991102" translate="yes" xml:space="preserve">
          <source>And of course FxCop barks at you and so you have to &lt;strong&gt;&lt;em&gt;also&lt;/em&gt;&lt;/strong&gt; add an attribute to your code that has precisely zip to do with the running program, and is only there to tell FxCop to ignore an issue that in 99.9% of cases it is totally correct in flagging. And, sorry, I might be mistaken, but doesn't that &quot;ignore&quot; attribute end up actually compiled into your app?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y, por supuesto, FxCop te ladra, por lo que &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tambi&amp;eacute;n&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; debes &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;agregar un atributo a tu c&amp;oacute;digo que tenga que ver exactamente con el programa en ejecuci&amp;oacute;n, y solo est&amp;aacute; ah&amp;iacute; para decirle a FxCop que ignore un problema que en el 99.9% de los casos es totalmente correcto en marcar. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y, lo siento, podr&amp;iacute;a estar equivocado, pero &amp;iquest;ese atributo de &quot;ignorar&quot; no termina realmente compilado en su aplicaci&amp;oacute;n?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="84d00784eb2e326dac15d825625d91a29b5bfea5" translate="yes" xml:space="preserve">
          <source>And the other solution is to catch the Exception object and handle it accordingly. The most literal translation for this, based on the context above is this:</source>
          <target state="translated">Y la otra soluci贸n es atrapar el objeto de excepci贸n y manejarlo en consecuencia.La traducci贸n m谩s literal para esto,basada en el contexto anterior es esta:</target>
        </trans-unit>
        <trans-unit id="e23465a9f88e5b869b70e2eda4aabcd1e17d5bdd" translate="yes" xml:space="preserve">
          <source>And use them like this:</source>
          <target state="translated">Y usarlos as铆:</target>
        </trans-unit>
        <trans-unit id="83dc80cdafbb6519dd31ddbbe7cea338e549d4df" translate="yes" xml:space="preserve">
          <source>Any other exceptions will be thrown and the code &lt;code&gt;WebId = Guid.Empty;&lt;/code&gt; won't be hit. If you don't want other exceptions to crash your program, just add this AFTER the other two catches:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cualquier otra excepci&amp;oacute;n ser&amp;aacute; lanzada y el c&amp;oacute;digo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;WebId = Guid.Empty;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No ser&amp;aacute; golpeado. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si no desea que otras excepciones bloqueen su programa, simplemente agregue esto DESPU&amp;Eacute;S de las otras dos capturas:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="418a5b88f6ef7fc8db59855e34f953b266c56327" translate="yes" xml:space="preserve">
          <source>Anyhow, here's what I would do:</source>
          <target state="translated">De todos modos,esto es lo que yo har铆a:</target>
        </trans-unit>
        <trans-unit id="2cebdf89c9ac259fa1d1b505d0ff6182557aed9a" translate="yes" xml:space="preserve">
          <source>As others have pointed out, you can have an &lt;code&gt;if&lt;/code&gt; statement inside your catch block to determine what is going on. C#6 supports Exception Filters, so the following will work:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como otros han se&amp;ntilde;alado, puede tener una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;declaraci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; dentro de su bloque catch para determinar qu&amp;eacute; est&amp;aacute; sucediendo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C # 6 admite filtros de excepci&amp;oacute;n, por lo que funcionar&amp;aacute; lo siguiente:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9017051d440936e5b5db7f09088015fd98c38bfa" translate="yes" xml:space="preserve">
          <source>At this point, we can add a separate function that handles the different types of Exceptions using overload resolution, or to handle the Exception. Both have disadvantages. To start, here's the way to do it with a helper function:</source>
          <target state="translated">En este punto,podemos agregar una funci贸n separada que maneje los diferentes tipos de Excepciones usando la resoluci贸n de sobrecarga,o para manejar la Excepci贸n.Ambas tienen desventajas.Para empezar,esta es la forma de hacerlo con una funci贸n de ayuda:</target>
        </trans-unit>
        <trans-unit id="44f53e52ca0613c4c3dd6af286140722dd6c32b8" translate="yes" xml:space="preserve">
          <source>At time of writing, this will include support for C# 6.</source>
          <target state="translated">En el momento de escribir esto,esto incluir谩 el apoyo a C#6.</target>
        </trans-unit>
        <trans-unit id="0c105894787df0d666b778b4e7e827a820c0c625" translate="yes" xml:space="preserve">
          <source>Because it certainly isn't automatically more readable.</source>
          <target state="translated">Porque ciertamente no es autom谩ticamente m谩s legible.</target>
        </trans-unit>
        <trans-unit id="84ec264cf702058749562c6d952f580cc6f0e0e8" translate="yes" xml:space="preserve">
          <source>But it&amp;acute;s not. Actually this is the only new feature in C# 6 that is not possible to emulate in prior versions. First, a re-throw means more overhead than skipping the catch. Second, it is not semantically equivalent. The new feature preserves the stack intact when you are debugging your code. Without this feature the crash dump is less useful or even useless.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero no lo es. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En realidad, esta es la &amp;uacute;nica caracter&amp;iacute;stica nueva en C # 6 que no es posible emular en versiones anteriores. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Primero, un nuevo lanzamiento significa m&amp;aacute;s sobrecarga que saltarse la captura. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En segundo lugar, no es sem&amp;aacute;nticamente equivalente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La nueva caracter&amp;iacute;stica conserva la pila intacta cuando est&amp;aacute; depurando su c&amp;oacute;digo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin esta caracter&amp;iacute;stica, el volcado por ca&amp;iacute;da es menos &amp;uacute;til o incluso in&amp;uacute;til.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8968328136575f096f276fca672f5d7a0e341da4" translate="yes" xml:space="preserve">
          <source>But that's sort of my point.  Y'all have heard of functions/methods, right?  Seriously.  Write a common &lt;code&gt;ErrorHandler&lt;/code&gt; function and, like, call it from each catch block.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero ese es mi punto. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ustedes han o&amp;iacute;do hablar de funciones / m&amp;eacute;todos, &amp;iquest;verdad? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Seriamente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Escriba una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funci&amp;oacute;n &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;com&amp;uacute;n de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ErrorHandler&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y, como, &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ll&amp;aacute;mela&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; desde cada bloque catch.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="73907b0eca8f7445628e3ca07e7e04aa2be2d3f5" translate="yes" xml:space="preserve">
          <source>Catch &lt;code&gt;System.Exception&lt;/code&gt; and switch on the types</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Captura &lt;/font&gt;&lt;/font&gt; &lt;code&gt;System.Exception&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;enciende&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; los tipos&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6f1008bdf611d7679d3c3f840c1b061398509ab0" translate="yes" xml:space="preserve">
          <source>Catch multiple exceptions at once</source>
          <target state="translated">Captura m煤ltiples excepciones a la vez</target>
        </trans-unit>
        <trans-unit id="2ff92d3d845f125e73f3f4eef6ab12da2f07a6ec" translate="yes" xml:space="preserve">
          <source>Cautioned and Warned: &lt;a href=&quot;http://community.bartdesmet.net/blogs/bart/archive/2008/01/06/exception-handling-in-functional-style.aspx&quot;&gt;Yet another kind, functional style.&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Advertencia y advertencia: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://community.bartdesmet.net/blogs/bart/archive/2008/01/06/exception-handling-in-functional-style.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;otro estilo amable y funcional.&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0d008cb4b49a7d4f44a21a4a3014d343569f652e" translate="yes" xml:space="preserve">
          <source>Construct a new Guid in a temporary variable.</source>
          <target state="translated">Construye una nueva gu铆a en una variable temporal.</target>
        </trans-unit>
        <trans-unit id="8d84823db6b97f3970612fd253baf121c346100a" translate="yes" xml:space="preserve">
          <source>Cutting straight to the chase, this kind of duplicates an earlier answer, but if you really want to perform a common action for several exception types and keep the whole thing neat and tidy within the scope of the one method, why not just use a lambda/closure/inline function to do something like the following?  I mean, chances are pretty good that you'll end up realizing that you just want to make that closure a separate method that you can utilize all over the place. But then it will be super easy to do that without actually changing the rest of the code structurally.  Right?</source>
          <target state="translated">Yendo directamente al grano,este tipo de respuesta duplica una anterior,pero si realmente quieres realizar una acci贸n com煤n para varios tipos de excepciones y mantener todo el asunto ordenado dentro del alcance de un solo m茅todo,驴por qu茅 no utilizar una funci贸n de lambdaclosureinline para hacer algo como lo siguiente? Es decir,es muy probable que termines d谩ndote cuenta de que s贸lo quieres hacer de ese cierre un m茅todo separado que puedes utilizar en todas partes.Pero entonces ser谩 super f谩cil hacerlo sin cambiar el resto del c贸digo estructuralmente.驴Verdad?</target>
        </trans-unit>
        <trans-unit id="e9656fda095be85a55c47e88f0f2142837377331" translate="yes" xml:space="preserve">
          <source>E.g.:</source>
          <target state="translated">E.g.:</target>
        </trans-unit>
        <trans-unit id="5de063f97315c5b8e6e1dc2ce35e02b2a46ba4c4" translate="yes" xml:space="preserve">
          <source>Except that I still kind of hate the one-long-line layout and would personally lay the code out like the following. I think this is as functional as it is aesthetic, since I believe it improves comprehension. Some may disagree:</source>
          <target state="translated">Excepto que todav铆a odio el dise帽o de una sola l铆nea y personalmente pondr铆a el c贸digo como el siguiente.Creo que esto es tan funcional como est茅tico,ya que creo que mejora la comprensi贸n.Algunos pueden estar en desacuerdo:</target>
        </trans-unit>
        <trans-unit id="75ea838be7539f75e44812538c146599e6015083" translate="yes" xml:space="preserve">
          <source>Exception Hierarchy</source>
          <target state="translated">Jerarqu铆a de excepciones</target>
        </trans-unit>
        <trans-unit id="527e4c0d8a347a6d284b98967bd45b476920144c" translate="yes" xml:space="preserve">
          <source>Exception filters are now available in c# 6+. You can do</source>
          <target state="translated">Los filtros de excepci贸n est谩n ahora disponibles en c#6+.Puedes hacer</target>
        </trans-unit>
        <trans-unit id="539f0ec3011bd70cde17e4ba28046cf7608d24cc" translate="yes" xml:space="preserve">
          <source>For example if you use a &quot;catch-all&quot; exception as &lt;strong&gt;Exception&lt;/strong&gt; it will preceed all other catch statements and you will obviously get compiler errors however if you reverse the order you can chain up your catch statements (bit of an anti-pattern I think) you can put the catch-all &lt;strong&gt;Exception&lt;/strong&gt; type at the bottom and this will be capture any exceptions that didn't cater for higher up in your try..catch block:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, si usa una excepci&amp;oacute;n &quot;catch-all&quot; como &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Excepci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , preceder&amp;aacute; a todas las otras declaraciones catch y obviamente obtendr&amp;aacute; errores del compilador; sin embargo, si invierte el orden, puede encadenar sus declaraciones catch (un poco de antipatr&amp;oacute;n, creo ) puede colocar el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipo de &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;excepci&amp;oacute;n general&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en la parte inferior y esto capturar&amp;aacute; las excepciones que no se adaptaron m&amp;aacute;s arriba en su bloque try..catch:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="244c23113ec704871d9cee9221d63c34f391fadd" translate="yes" xml:space="preserve">
          <source>For the sake of completeness, since &lt;strong&gt;.NET 4.0&lt;/strong&gt; the code can rewritten as:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En aras de la integridad, desde &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.NET 4.0&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; el c&amp;oacute;digo puede reescribirse como:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd09ef4377932d2b4de7f67104a8aadaf92c5594" translate="yes" xml:space="preserve">
          <source>For this you need to create several &quot;Catch&quot; method overloads, similar to System.Action:</source>
          <target state="translated">Para ello es necesario crear varias sobrecargas del m茅todo &quot;Catch&quot;,similar a System.Action:</target>
        </trans-unit>
        <trans-unit id="e509265720b9dd33023c62eb25685529d8bfc817" translate="yes" xml:space="preserve">
          <source>From C#6 you furthermore have the &lt;a href=&quot;https://stackoverflow.com/questions/4268223/c-sharp-exception-filter&quot;&gt;exception-filters&lt;/a&gt; as already mentioned by others. So you can modify the code above to this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Desde C # 6, adem&amp;aacute;s, tiene los &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4268223/c-sharp-exception-filter&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;filtros de excepci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como ya han mencionado otros. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para que pueda modificar el c&amp;oacute;digo anterior a esto:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c2a061516ad58558a806faed3e12641e9f86898b" translate="yes" xml:space="preserve">
          <source>Geared for people that want a &lt;a href=&quot;https://stackoverflow.com/q/791390/1718702&quot;&gt;more elegant solution&lt;/a&gt; to catch once and filter exceptions, I use an extension method as demonstrated below.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dise&amp;ntilde;ado para personas que desean una &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/q/791390/1718702&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;soluci&amp;oacute;n m&amp;aacute;s elegante&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para capturar una vez y filtrar excepciones, utilizo un m&amp;eacute;todo de extensi&amp;oacute;n como se muestra a continuaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b1295f86f1d7cbf0ad091e0bccf7386af51e9b2a" translate="yes" xml:space="preserve">
          <source>Given your specific sample, where the fall-back value is cheap to construct, I like to follow these steps:</source>
          <target state="translated">Dada su muestra espec铆fica,en la que el valor de retroceso es barato de construir,me gusta seguir estos pasos:</target>
        </trans-unit>
        <trans-unit id="36f3882107998a3ab41cc38fab92f798f8b2efce" translate="yes" xml:space="preserve">
          <source>Granted, I left the three identical instances of &lt;code&gt;/* write to a log, whatever... */ return;&lt;/code&gt; out of the first example.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por supuesto, dej&amp;eacute; las tres instancias id&amp;eacute;nticas de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;/* write to a log, whatever... */ return;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;fuera del primer ejemplo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a13352f633c78630c9980aff67adb5108712346" translate="yes" xml:space="preserve">
          <source>Here is how the same problem would look using C# 6.0 syntax:</source>
          <target state="translated">As铆 es como se ver铆a el mismo problema usando la sintaxis de C#6.0:</target>
        </trans-unit>
        <trans-unit id="73f9549a89eef322c33bad695cd89bf59a3fdef1" translate="yes" xml:space="preserve">
          <source>How about</source>
          <target state="translated">驴Qu茅 tal si</target>
        </trans-unit>
        <trans-unit id="e7b0dde9db8bb974802ff2df14397ad3d3f6ccd4" translate="yes" xml:space="preserve">
          <source>How much &lt;em&gt;less&lt;/em&gt; readable does this get when you add three more exception types, a month or two from now?  (Answer: it gets a &lt;strong&gt;&lt;em&gt;lot&lt;/em&gt;&lt;/strong&gt; less readable).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Cu&amp;aacute;nto &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;menos&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; legible es esto cuando agrega tres tipos de excepci&amp;oacute;n m&amp;aacute;s, dentro de un mes o dos? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Respuesta: se vuelve &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;mucho&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; menos legible).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="720545802c225e5d12bd7f9c93865e5a5357bf85" translate="yes" xml:space="preserve">
          <source>I already had this extension in my library, originally written for other purposes, but it worked just perfectly for &lt;code&gt;type&lt;/code&gt; checking on exceptions.  Plus, imho, it looks cleaner than a bunch of &lt;code&gt;||&lt;/code&gt; statements.  Also, unlike the accepted answer, I prefer explicit exception handling so &lt;code&gt;ex is ...&lt;/code&gt; had undesireable behaviour as derrived classes are assignable to there parent types).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ya ten&amp;iacute;a esta extensi&amp;oacute;n en mi biblioteca, originalmente escrita para otros fines, pero funcion&amp;oacute; perfectamente para la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;verificaci&amp;oacute;n de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;type&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de excepciones. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, en mi opini&amp;oacute;n, se ve m&amp;aacute;s limpio que un mont&amp;oacute;n de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;||&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;declaraciones. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, a diferencia de la respuesta aceptada, prefiero el manejo expl&amp;iacute;cito de excepciones, por lo que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ex is ...&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tuvo un comportamiento indeseable ya que las clases derivadas se pueden asignar a los tipos principales).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74240835cd4bc17fc57bd86b1e86aefb93174327" translate="yes" xml:space="preserve">
          <source>I can't help but wonder (&lt;strong&gt;warning:&lt;/strong&gt; a little irony/sarcasm ahead) why on earth go to all this effort to basically just replace the following:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No puedo evitar preguntarme ( &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;advertencia:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; un poco de iron&amp;iacute;a / sarcasmo por delante) por qu&amp;eacute; hacer todo este esfuerzo para reemplazar b&amp;aacute;sicamente lo siguiente:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c37622ab80f15e89d47339306984a3ac95887a9c" translate="yes" xml:space="preserve">
          <source>I highly recommend folks review this MSDN document:</source>
          <target state="translated">Recomiendo encarecidamente a la gente que revise este documento MSDN:</target>
        </trans-unit>
        <trans-unit id="780d1495b265f4e9a8ecee31bb027832a5d2a8b2" translate="yes" xml:space="preserve">
          <source>I know I'm a little late to the party here, but holy smoke...</source>
          <target state="translated">S茅 que llego un poco tarde a la fiesta aqu铆,pero santo cielo...</target>
        </trans-unit>
        <trans-unit id="3d961e357d56d34ad823fd113e2f28765f420089" translate="yes" xml:space="preserve">
          <source>I ran into a use case scenario when trying to cast control object in a datagrid, with either content as TextBox, TextBlock or CheckBox. In this case the returned Exception was the same, but the message varied.</source>
          <target state="translated">Me encontr茅 con un escenario de caso de uso al tratar de lanzar un objeto de control en una cuadr铆cula de datos,con contenido como TextBox,TextBlock o CheckBox.En este caso la Excepci贸n devuelta era la misma,pero el mensaje variaba.</target>
        </trans-unit>
        <trans-unit id="02f94d544750bdf98fc7f9f1023ba56f6ab0aa09" translate="yes" xml:space="preserve">
          <source>I want to suggest shortest answer (one more &lt;strong&gt;functional style&lt;/strong&gt;):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Quiero sugerir la respuesta m&amp;aacute;s corta (un &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;estilo funcional&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; m&amp;aacute;s &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0e9dc59e2c3a11b47ed9d2537dbaa8971253f1b1" translate="yes" xml:space="preserve">
          <source>I wonder why no-one noticed that code-duplication.</source>
          <target state="translated">Me pregunto por qu茅 nadie se dio cuenta de esa duplicaci贸n de c贸digo.</target>
        </trans-unit>
        <trans-unit id="c50b41ab335674d6bc828e30c341ae79ecd94048" translate="yes" xml:space="preserve">
          <source>I wonder: Is there a way to catch both exceptions and only call the &lt;code&gt;WebId = Guid.Empty&lt;/code&gt; call once?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Me pregunto: &amp;iquest;hay alguna forma de detectar ambas excepciones y solo llamar a la llamada &lt;/font&gt;&lt;/font&gt; &lt;code&gt;WebId = Guid.Empty&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; una vez?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1c7b599accd0b406b2572bdd7a7f519b38d34b0" translate="yes" xml:space="preserve">
          <source>If any exception is thrown, then WebId is never set to the half-constructed value, and remains Guid.Empty.</source>
          <target state="translated">Si se lanza alguna excepci贸n,entonces WebId nunca se fija en el valor medio construido,y permanece Guid.Empty.</target>
        </trans-unit>
        <trans-unit id="f538280fc4add5df1e61ddb0c8c7aaba59a637ea" translate="yes" xml:space="preserve">
          <source>If constructing the fall-back value is expensive, and resetting a value is much cheaper, then I would move the reset code into its own function:</source>
          <target state="translated">Si construir el valor de retroceso es caro,y reiniciar un valor es mucho m谩s barato,entonces mover铆a el c贸digo de reinicio a su propia funci贸n:</target>
        </trans-unit>
        <trans-unit id="f8ad4319bb16a812c6324b95e9c2ebe07f4bf57b" translate="yes" xml:space="preserve">
          <source>If the handler is simple, and we want to re-use code, the best solution is probably to introduce a helper function.</source>
          <target state="translated">Si el manejador es simple,y queremos reutilizar el c贸digo,la mejor soluci贸n es probablemente introducir una funci贸n de ayuda.</target>
        </trans-unit>
        <trans-unit id="8e330682406f1c4b3a85e106c7382d74887afe47" translate="yes" xml:space="preserve">
          <source>If we don't want to re-throw, we might consider catching the right exceptions, and storing them in a temporary.</source>
          <target state="translated">Si no queremos volver a tirar,podr铆amos considerar coger las excepciones correctas,y almacenarlas de forma temporal.</target>
        </trans-unit>
        <trans-unit id="c11db494a0490dce6a9e17bcd6addd3e6e0d163a" translate="yes" xml:space="preserve">
          <source>If we look at the code, what we really would like to do is forward the call. However, according to the MS Partition II, IL exception handler blocks won't work like this, which in this case makes sense because that would imply that the 'exception' object can have different types.</source>
          <target state="translated">Si miramos el c贸digo,lo que realmente nos gustar铆a hacer es reenviar la llamada.Sin embargo,seg煤n la Partici贸n II de MS,los bloques manejadores de excepciones de IL no funcionar谩n as铆,lo que en este caso tiene sentido porque eso implicar铆a que el objeto &quot;excepci贸n&quot; puede tener diferentes tipos.</target>
        </trans-unit>
        <trans-unit id="8d8207558989db2e7dfee1091e9a9bd5c52a907d" translate="yes" xml:space="preserve">
          <source>If we want to re-throw, we have no choice but to put the code in a 'Exception' catch handler, which will break FxCop and your debugger's uncaught exceptions.</source>
          <target state="translated">Si queremos volver a lanzarlo,no tenemos m谩s remedio que poner el c贸digo en un manejador de capturas &quot;Excepci贸n&quot;,que romper谩 las excepciones no capturadas de FxCop y su depurador.</target>
        </trans-unit>
        <trans-unit id="2f0396f3fe0933634437e4d13efa9b48318f3803" translate="yes" xml:space="preserve">
          <source>If you ask me, the second example (with the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;is&lt;/code&gt; keywords) is both significantly less readable, and simultaneously significantly more error-prone during the maintenance phase of your project.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si me pregunta, el segundo ejemplo (con las &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;palabras clave &lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;is&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) es significativamente menos legible y, al mismo tiempo, significativamente m&amp;aacute;s propenso a errores durante la fase de mantenimiento de su proyecto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d147073ec9d1be11df42ab43bd63f496ba553b9" translate="yes" xml:space="preserve">
          <source>If you can upgrade your application to C# 6 you are lucky. The new C# version has implemented Exception filters. So you can write this:</source>
          <target state="translated">Si puede actualizar su aplicaci贸n a C#6,tendr谩 suerte.La nueva versi贸n de C#ha implementado filtros de excepci贸n.As铆 que puedes escribir esto:</target>
        </trans-unit>
        <trans-unit id="4d552cdbb82e4cf6a4940a80e3f2e1be834c498e" translate="yes" xml:space="preserve">
          <source>If you don't want to use an &lt;code&gt;if&lt;/code&gt; statement within the &lt;code&gt;catch&lt;/code&gt; scopes, &lt;strong&gt;&lt;em&gt;in &lt;code&gt;C# 6.0&lt;/code&gt; you can use &lt;code&gt;Exception Filters&lt;/code&gt; syntax&lt;/em&gt;&lt;/strong&gt; which was already supported by the CLR in previews versions but existed only in &lt;code&gt;VB.NET&lt;/code&gt;/&lt;code&gt;MSIL&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si no desea usar una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;instrucci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; dentro de los &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;aacute;mbitos de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;catch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;C# 6.0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; puede usar la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sintaxis de los &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exception Filters&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que ya era compatible con el CLR en las versiones de vista previa pero solo exist&amp;iacute;a en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;VB.NET&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; / &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MSIL&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71674352e64f530a61439601f02e7464c8b3b848" translate="yes" xml:space="preserve">
          <source>If you want to continue using Visual Studio 2013, you can install the following nuget package:</source>
          <target state="translated">Si quieres seguir usando Visual Studio 2013,puedes instalar el siguiente paquete nuget:</target>
        </trans-unit>
        <trans-unit id="dfbebe9c28406d73a5cb8384408c1032f57b8c46" translate="yes" xml:space="preserve">
          <source>In C# 7.0+, you can combine this with pattern matching too</source>
          <target state="translated">En C#7.0+,puedes combinar esto con la coincidencia de patrones tambi茅n</target>
        </trans-unit>
        <trans-unit id="026fae3457299735b784df3c5b5d4a008f86ea57" translate="yes" xml:space="preserve">
          <source>In c# 6.0,Exception Filters is improvements for exception handling</source>
          <target state="translated">En c#6.0,Filtros de Excepci贸n son mejoras para el manejo de excepciones</target>
        </trans-unit>
        <trans-unit id="ca4b4baab3be903a2c5a12429ced4eab9894b0f5" translate="yes" xml:space="preserve">
          <source>In short, no.</source>
          <target state="translated">En resumen,no.</target>
        </trans-unit>
        <trans-unit id="bad182dce85964009f99188e3387cec999f8a81b" translate="yes" xml:space="preserve">
          <source>Initialize WebId to the fall-back value.</source>
          <target state="translated">Inicializar WebId con el valor de retroceso.</target>
        </trans-unit>
        <trans-unit id="21c6170e81cf52460da0fc2b6b268b15204775ca" translate="yes" xml:space="preserve">
          <source>Install-Package Microsoft.Net.Compilers</source>
          <target state="translated">Paquete de instalaci贸n de compiladores de Microsoft.Net.</target>
        </trans-unit>
        <trans-unit id="65101af96bc9264e39ad9b42429b60c89bda3dca" translate="yes" xml:space="preserve">
          <source>It can even be compacted to a single line (though not very pretty)</source>
          <target state="translated">Incluso se puede compactar a una sola l铆nea (aunque no es muy bonito)</target>
        </trans-unit>
        <trans-unit id="ee03e87bc255456e61aebe03ef23230147a58f5d" translate="yes" xml:space="preserve">
          <source>It is discouraged to simply catch &lt;code&gt;System.Exception&lt;/code&gt;. Instead, only the &quot;known&quot; exceptions should be caught.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Se desaconseja simplemente atrapar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;System.Exception&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En cambio, solo se deben detectar las excepciones &quot;conocidas&quot;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2729d160bb79005beca2084b5df0a3f38c86bb26" translate="yes" xml:space="preserve">
          <source>It is just that Simple!!</source>
          <target state="translated">隆隆Es as铆 de simple!!</target>
        </trans-unit>
        <trans-unit id="f0e7007b6b6aab9e8c438cca232b2755efd880ff" translate="yes" xml:space="preserve">
          <source>It is worth mentioning here. You can respond to the multiple combinations (Exception error and exception.message).</source>
          <target state="translated">Vale la pena mencionarlo aqu铆.Puede responder a las m煤ltiples combinaciones (Exception error y exception.message).</target>
        </trans-unit>
        <trans-unit id="90f5902bc1a319f8953809309388ae151bffc367" translate="yes" xml:space="preserve">
          <source>Just call the try and catch twice.</source>
          <target state="translated">S贸lo llama al intento y atrapa dos veces.</target>
        </trans-unit>
        <trans-unit id="1ebe9b7ab107b293b672019c2bf62a545d09cdda" translate="yes" xml:space="preserve">
          <source>Just how I would do it, trying to find the &lt;em&gt;simple is beautiful&lt;/em&gt; pattern</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C&amp;oacute;mo lo har&amp;iacute;a, tratando de encontrar el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;patr&amp;oacute;n &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;simple es hermoso&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3de8e13f2d58751d17f79ba82916bddcf4930db9" translate="yes" xml:space="preserve">
          <source>Just saying...</source>
          <target state="translated">S贸lo digo...</target>
        </trans-unit>
        <trans-unit id="f654315c2642f6686f15e838fb9cfaef4a30f5c6" translate="yes" xml:space="preserve">
          <source>Let me break your question into 2 questions.  The first,</source>
          <target state="translated">Perm铆tame dividir su pregunta en 2 preguntas.La primera,</target>
        </trans-unit>
        <trans-unit id="277d463ead616f9c9e3a25bac2ef07c11f92c5ef" translate="yes" xml:space="preserve">
          <source>Matching behaviour for &lt;code&gt;Exception&lt;/code&gt; types is exact (ie. A child IS NOT a match for any of its parent types).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El comportamiento de coincidencia para los &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipos de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es exacto (es decir, un hijo NO ES una coincidencia para ninguno de sus tipos principales).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="50f1c5e1d73fc644c699b6519af102026e9072e7" translate="yes" xml:space="preserve">
          <source>Maybe try to keep your code simple such as putting the common code in a method, as you would do in any other part of the code that is not inside a catch clause?</source>
          <target state="translated">Tal vez tratar de mantener su c贸digo simple como poner el c贸digo com煤n en un m茅todo,como lo har铆a en cualquier otra parte del c贸digo que no est谩 dentro de una cl谩usula de captura?</target>
        </trans-unit>
        <trans-unit id="f129e30c19fc94a60bf892f96e6f7cc1c93ac303" translate="yes" xml:space="preserve">
          <source>Next useless update to this useless answer comes when deconstruction of out-parameters is implemented in C# 12. :)</source>
          <target state="translated">La siguiente actualizaci贸n in煤til de esta respuesta in煤til viene cuando la deconstrucci贸n de los par谩metros externos se implementa en C#12.:)</target>
        </trans-unit>
        <trans-unit id="ff3606b31e07f3a5fe0e676990944aadfec5d0d5" translate="yes" xml:space="preserve">
          <source>Not in C# unfortunately, as you'd need an exception filter to do it and C# doesn't expose that feature of MSIL. VB.NET does have this capability though, e.g.</source>
          <target state="translated">No en C#desafortunadamente,ya que se necesitar铆a un filtro de excepci贸n para hacerlo y C#no expone esa caracter铆stica de MSIL.Sin embargo,VB.NET tiene esta capacidad,por ejemplo.</target>
        </trans-unit>
        <trans-unit id="387204d2ecb9509b33590cf8b44afd14a24010d1" translate="yes" xml:space="preserve">
          <source>Note that I did find one way to do it, but this looks more like material for &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Daily_WTF&quot;&gt;The Daily WTF&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que encontr&amp;eacute; una forma de hacerlo, pero esto se parece m&amp;aacute;s al material para &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Daily_WTF&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;The Daily WTF&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a8b5338876c5a2c0e9ee51235aebc5eed5d58b7b" translate="yes" xml:space="preserve">
          <source>Note that as opposed to an &lt;code&gt;if&lt;/code&gt; statement inside the &lt;code&gt;catch&lt;/code&gt;'s scope, &lt;code&gt;Exception Filters&lt;/code&gt; cannot throw &lt;code&gt;Exceptions&lt;/code&gt;, and when they do, or when the condition is not &lt;code&gt;true&lt;/code&gt;, the next &lt;code&gt;catch&lt;/code&gt; condition will be evaluated instead:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que, a diferencia de una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;declaraci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; dentro del &lt;/font&gt;&lt;/font&gt; &lt;code&gt;catch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;captura&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , los &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exception Filters&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no pueden generar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exceptions&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y cuando lo hacen, o cuando la condici&amp;oacute;n no es &lt;/font&gt;&lt;/font&gt; &lt;code&gt;true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se evaluar&amp;aacute; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la siguiente &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;condici&amp;oacute;n de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;catch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="307da8d59df79d213bf1937c633e591c2d7b1f47" translate="yes" xml:space="preserve">
          <source>Now, this sometimes leads to unneccessary repetitive code, for example:</source>
          <target state="translated">Ahora bien,esto a veces conduce a un c贸digo repetitivo innecesario,por ejemplo:</target>
        </trans-unit>
        <trans-unit id="c38182e25f1f4e2e680c0985dd7c98b38942c400" translate="yes" xml:space="preserve">
          <source>One of the major points, really, is that most of the point of formatting the textual source code that we're all looking at every day is to make it really, really obvious to other human beings what is actually happening when the code runs.  Because the compiler turns the source code into something totally different and couldn't care less about your code formatting style.  So all-on-one-line totally sucks, too.</source>
          <target state="translated">Uno de los principales puntos,en realidad,es que la mayor parte del punto de formatear el c贸digo fuente textual que todos estamos viendo cada d铆a es hacer realmente,realmente obvio para otros seres humanos lo que realmente est谩 sucediendo cuando el c贸digo se ejecuta.Porque el compilador convierte el c贸digo fuente en algo totalmente diferente y no podr铆a importarle menos el estilo de formateo de su c贸digo.As铆 que todo en l铆nea apesta totalmente,tambi茅n.</target>
        </trans-unit>
        <trans-unit id="c2798cf70d9db202201ca1f462f0a7aa390a26de" translate="yes" xml:space="preserve">
          <source>Or to write it in code, we ask the compiler to do something like this (well it's not entirely correct, but it's the closest possible thing I guess):</source>
          <target state="translated">O para escribirlo en c贸digo,le pedimos al compilador que haga algo as铆 (bueno,no es del todo correcto,pero es lo m谩s parecido posible,supongo):</target>
        </trans-unit>
        <trans-unit id="2c16777d24367e3f298e7a67a4bfda81a4d9675f" translate="yes" xml:space="preserve">
          <source>Output: Catch.</source>
          <target state="translated">Salida:Atrapar.</target>
        </trans-unit>
        <trans-unit id="3c0e4355b62280b3263546bae6eb0a516c472868" translate="yes" xml:space="preserve">
          <source>Output: General catch.</source>
          <target state="translated">Salida:Captura general.</target>
        </trans-unit>
        <trans-unit id="ecc3cfb9af571c4404afc45fdc1346391cba3878" translate="yes" xml:space="preserve">
          <source>Referencing this package will cause the project to be built using the
  specific version of the C# and Visual Basic compilers contained in the
  package, as opposed to any system installed version.</source>
          <target state="translated">Hacer referencia a este paquete har谩 que el proyecto se construya utilizando la versi贸n espec铆fica de los compiladores C#y Visual Basic contenidos en el paquete,a diferencia de cualquier versi贸n instalada del sistema.</target>
        </trans-unit>
        <trans-unit id="9889f134527432dcbe02f9a4e26a1566fa481e1d" translate="yes" xml:space="preserve">
          <source>See a &lt;a href=&quot;https://roslyn.codeplex.com/discussions/541301&quot;&gt;discussion about this on CodePlex&lt;/a&gt;. And an &lt;a href=&quot;http://www.volatileread.com/Wiki/Index?id=1087&quot;&gt;example showing the difference&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vea una &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://roslyn.codeplex.com/discussions/541301&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;discusi&amp;oacute;n sobre esto en CodePlex&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y un &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.volatileread.com/Wiki/Index?id=1087&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ejemplo que muestra la diferencia&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a0f044dd5ba573faa03180c7cb9425085f563062" translate="yes" xml:space="preserve">
          <source>Set WebId to the fully constructed temporary variable.  Make this the final statement of the try{} block.</source>
          <target state="translated">Ponga WebId en la variable temporal totalmente construida.Haga que esta sea la declaraci贸n final del bloque de prueba.</target>
        </trans-unit>
        <trans-unit id="7c209d0a5eace88efaaedde48c3ad7c2f70ca081" translate="yes" xml:space="preserve">
          <source>Since &lt;strong&gt;C# 7&lt;/strong&gt; you can avoid introducing a variable on a separate line:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Desde &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C # 7&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; puede evitar introducir una variable en una l&amp;iacute;nea separada:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fc2791091b2e77f5c8e25ff45eeded0171a350f8" translate="yes" xml:space="preserve">
          <source>Since I felt like these answers just touched the surface, I attempted to dig a bit deeper.</source>
          <target state="translated">Como sent铆a que estas respuestas s贸lo tocaban la superficie,intent茅 cavar un poco m谩s profundo.</target>
        </trans-unit>
        <trans-unit id="ff984b756a47a0896f0f17221cd64b0b91c34398" translate="yes" xml:space="preserve">
          <source>Slightly revised version of your code:</source>
          <target state="translated">Una versi贸n ligeramente revisada de su c贸digo:</target>
        </trans-unit>
        <trans-unit id="a347d294b31f0747c0d427b69390320d40eb5848" translate="yes" xml:space="preserve">
          <source>So the code looks like:</source>
          <target state="translated">As铆 que el c贸digo parece:</target>
        </trans-unit>
        <trans-unit id="d5ebe26a1976d35b403686baa594965c8a21ec1d" translate="yes" xml:space="preserve">
          <source>So to conclude:</source>
          <target state="translated">As铆 que para concluir:</target>
        </trans-unit>
        <trans-unit id="fba6c3dd6bfcb0f8599df48543715d028146b9e2" translate="yes" xml:space="preserve">
          <source>So what we would really want to do is something that doesn't compile, say:</source>
          <target state="translated">As铆 que lo que realmente queremos hacer es algo que no compile,digamos:</target>
        </trans-unit>
        <trans-unit id="0b2999dc55eadeb32a8eea7837711256935984c0" translate="yes" xml:space="preserve">
          <source>So why won't this code compile - and how can we hack it in such a way that it will?</source>
          <target state="translated">Entonces,驴por qu茅 no compila este c贸digo y c贸mo podemos hackearlo de tal manera que lo haga?</target>
        </trans-unit>
        <trans-unit id="59d5b84e463ffda163b9c20671002ba7bede5835" translate="yes" xml:space="preserve">
          <source>So you&amp;acute;re repeating lots of code within every exception-switch? Sounds like extracting a method would be god idea, doesn&amp;acute;t it?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, &amp;iquest;est&amp;aacute;s repitiendo mucho c&amp;oacute;digo dentro de cada cambio de excepci&amp;oacute;n? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Parece que extraer un m&amp;eacute;todo ser&amp;iacute;a una buena idea, &amp;iquest;no?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="28aad4ec99b5934be9e01f44169ee4a3c9b2b75b" translate="yes" xml:space="preserve">
          <source>So your code comes down to this:</source>
          <target state="translated">As铆 que tu c贸digo se reduce a esto:</target>
        </trans-unit>
        <trans-unit id="ef13ab8ec9dd166e5d867d7fbbb39bb73cd543e4" translate="yes" xml:space="preserve">
          <source>Some people think this code is the same as</source>
          <target state="translated">Algunas personas piensan que este c贸digo es el mismo que</target>
        </trans-unit>
        <trans-unit id="7341f6385aceb3a37913d3cc72774b078a8510f0" translate="yes" xml:space="preserve">
          <source>String comparisons are ugly and slow.</source>
          <target state="translated">Las comparaciones de cuerdas son feas y lentas.</target>
        </trans-unit>
        <trans-unit id="c302bfb8c6ca9631e91e2a7e11fcb4a4304b008c" translate="yes" xml:space="preserve">
          <source>That leaves just the 're-throw'. For this to work, we need to be able to perform the handling inside the 'catch' block - and the only way to make this work is by an catching 'Exception' object.</source>
          <target state="translated">Eso nos deja s贸lo el &quot;relanzamiento&quot;.Para que esto funcione,necesitamos ser capaces de realizar la manipulaci贸n dentro del bloque de 'captura'-y la 煤nica manera de hacer que esto funcione es mediante un objeto de 'excepci贸n' de captura.</target>
        </trans-unit>
        <trans-unit id="5224130c9b85acc029bcb32616a1b11cc5806f7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MyFilter&lt;/code&gt; method could then look something like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyFilter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; podr&amp;iacute;a verse as&amp;iacute;:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ece06866e04ad9203ab4d537beecbf110f7d9a8" translate="yes" xml:space="preserve">
          <source>The accepted answer seems acceptable, except that CodeAnalysis/&lt;a href=&quot;http://en.wikipedia.org/wiki/FxCop&quot;&gt;FxCop&lt;/a&gt; will complain about the fact that it's catching a general exception type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La respuesta aceptada parece aceptable, excepto que CodeAnalysis / &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/FxCop&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;FxCop&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se quejar&amp;aacute; del hecho de que est&amp;aacute; atrapando un tipo de excepci&amp;oacute;n general.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4781fc70c4345a21044d116b1280161a2c9956c1" translate="yes" xml:space="preserve">
          <source>The bigger question to this is &lt;em&gt;why&lt;/em&gt;. I do not think the cost outweighs the gain here :)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La pregunta m&amp;aacute;s grande a esto es &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;por qu&amp;eacute;&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No creo que el costo supere la ganancia aqu&amp;iacute; :)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f58cc981739315748cd319c85046ccdfa234e3cd" translate="yes" xml:space="preserve">
          <source>The code isn't nested</source>
          <target state="translated">El c贸digo no est谩 anidado</target>
        </trans-unit>
        <trans-unit id="2b8b76967a2caca71316d6dcba09aade5b7149fb" translate="yes" xml:space="preserve">
          <source>The given example is rather simple, as it's only a &lt;a href=&quot;http://en.wikipedia.org/wiki/Globally_unique_identifier&quot;&gt;&lt;code&gt;GUID&lt;/code&gt;&lt;/a&gt;. But imagine code where you modify an object multiple times, and if one of the manipulations fail in an expected way, you want to &quot;reset&quot; the &lt;code&gt;object&lt;/code&gt;. However, if there is an unexpected exception, I still want to throw that higher.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El ejemplo dado es bastante simple, ya que es solo un &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Globally_unique_identifier&quot;&gt; &lt;code&gt;GUID&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero imagine el c&amp;oacute;digo donde modifica un objeto varias veces, y si una de las manipulaciones falla de la manera esperada, desea &quot;restablecer&quot; el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, si hay una excepci&amp;oacute;n inesperada, todav&amp;iacute;a quiero lanzar eso m&amp;aacute;s alto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d50d11a893fba32da9b37c41ce8ed5904f8bc553" translate="yes" xml:space="preserve">
          <source>The maintenance phase, for anyone who might be relatively new to programming, is going to comprise 98.7% or more of the overall lifetime of your project, and the poor schmuck doing the maintenance is almost certainly going to be someone other than you. And there is a very good chance they will spend 50% of their time on the job cursing your name.</source>
          <target state="translated">La fase de mantenimiento,para cualquiera que sea relativamente nuevo en la programaci贸n,va a comprender el 98,7% o m谩s de la vida total de su proyecto,y el pobre imb茅cil que haga el mantenimiento casi seguro que ser谩 alguien m谩s que usted.Y hay una gran posibilidad de que pasen el 50% de su tiempo en el trabajo maldiciendo tu nombre.</target>
        </trans-unit>
        <trans-unit id="f61c0731b8f8a19c626811dc48dad3864d3e64a0" translate="yes" xml:space="preserve">
          <source>The obvious disadvantages for this are that we cannot re-throw properly, and -well let's be honest- that it's quite the ugly solution. The uglyness can be fixed a bit by performing branch elimination, which makes the solution slightly better:</source>
          <target state="translated">Las desventajas obvias de esto son que no podemos volver a tirar correctamente,y-seamos honestos-que es una soluci贸n bastante fea.La fealdad puede ser arreglada un poco realizando la eliminaci贸n de ramas,lo que hace que la soluci贸n sea ligeramente mejor:</target>
        </trans-unit>
        <trans-unit id="b53b26658767f7dd6c482127876a53fe82bf3174" translate="yes" xml:space="preserve">
          <source>The reason that this won't compile is quite obvious: what type and value would the '$exception' object have (which are here stored in the variables 'e')? The way we want the compiler to handle this is to note that the common base type of both exceptions is 'Exception', use that for a variable to contain both exceptions, and then handle only the two exceptions that are caught. The way this is implemented in IL is as 'filter', which is available in VB.Net.</source>
          <target state="translated">La raz贸n por la que esto no se compila es bastante obvia:驴qu茅 tipo y valor tendr铆a el objeto &quot;$excepci贸n&quot; (que aqu铆 se almacenan en las variables &quot;e&quot;)? La forma en que queremos que el compilador maneje esto es notar que el tipo de base com煤n de ambas excepciones es 'Excepci贸n',usar eso para que una variable contenga ambas excepciones,y luego manejar s贸lo las dos excepciones que son capturadas.La forma en que esto se implementa en IL es como 'filtro',que est谩 disponible en VB.Net.</target>
        </trans-unit>
        <trans-unit id="7c628a163cc1b537d3685215329c5d7321e035cc" translate="yes" xml:space="preserve">
          <source>The reason we want this is because we don't want the exception handler to catch things that we need later on in the process. Sure, we can catch an Exception and check with an 'if' what to do, but let's be honest, we don't really want that. (FxCop, debugger issues, uglyness)</source>
          <target state="translated">La raz贸n por la que queremos esto es porque no queremos que el manejador de excepciones atrape cosas que necesitamos m谩s adelante en el proceso.Claro,podemos atrapar una excepci贸n y comprobar con un &quot;si&quot; lo que hay que hacer,pero seamos honestos,no queremos eso.(FxCop,problemas de depuraci贸n,fealdad)</target>
        </trans-unit>
        <trans-unit id="38cf9971eeb919703b567eb892ae4463f4a39305" translate="yes" xml:space="preserve">
          <source>There are a few advantages of inverting the expression:</source>
          <target state="translated">Hay algunas ventajas de invertir la expresi贸n:</target>
        </trans-unit>
        <trans-unit id="2805d8052ac54e828feb8e44e99582c2fc025010" translate="yes" xml:space="preserve">
          <source>There's no risk of forgetting the 'throw' or 'return' statements that in Joseph's solution are separated from the expression.</source>
          <target state="translated">No hay riesgo de olvidar las declaraciones de &quot;tirar&quot; o &quot;devolver&quot; que en la soluci贸n de Joseph se separan de la expresi贸n.</target>
        </trans-unit>
        <trans-unit id="5952b23f46d9b0270fef53d9264d1c1c54c042f0" translate="yes" xml:space="preserve">
          <source>This code will catch the &lt;code&gt;Exception&lt;/code&gt; only when it's a &lt;code&gt;InvalidDataException&lt;/code&gt; or &lt;code&gt;ArgumentNullException&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Este c&amp;oacute;digo capturar&amp;aacute; la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; solo cuando sea una &lt;/font&gt;&lt;/font&gt; &lt;code&gt;InvalidDataException&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ArgumentNullException&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4a00e29090c2c1e94dc2959e6bfe7c8589784d0c" translate="yes" xml:space="preserve">
          <source>This is a classic problem every C# developer faces eventually.</source>
          <target state="translated">Este es un problema cl谩sico que todo desarrollador de C#enfrenta eventualmente.</target>
        </trans-unit>
        <trans-unit id="c7097eacdf2ef8cb7152d26b733053d7d356d8ad" translate="yes" xml:space="preserve">
          <source>This is a variant of Matt's answer (I feel that this is a bit cleaner)...use a method:</source>
          <target state="translated">Esta es una variante de la respuesta de Matt (creo que esto es un poco m谩s limpio)...usa un m茅todo:</target>
        </trans-unit>
        <trans-unit id="d064d3721c19dbe49384f0cc083a7d861381bfc2" translate="yes" xml:space="preserve">
          <source>This is different from using an &lt;code&gt;if&lt;/code&gt; statement from within the &lt;code&gt;catch&lt;/code&gt; block, using exception filters &lt;strong&gt;will not&lt;/strong&gt; unwind the stack.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto es diferente de usar una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;instrucci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; desde el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;bloque &lt;/font&gt;&lt;/font&gt; &lt;code&gt;catch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , usar filtros de excepci&amp;oacute;n &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; desenrollar&amp;aacute; la pila.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ac3d44b1b396d47e05b659d56060dba602f9ef49" translate="yes" xml:space="preserve">
          <source>To make it work in C#, we need a temporary variable with the correct 'Exception' base type. To control the flow of the code, we can add some branches. Here goes:</source>
          <target state="translated">Para que funcione en C#,necesitamos una variable temporal con el tipo de base correcto de 'Excepci贸n'.Para controlar el flujo del c贸digo,podemos a帽adir algunas ramas.Aqu铆 va:</target>
        </trans-unit>
        <trans-unit id="c51fe20cce0d7eb3f5f99f34d3c1e5b5aba580ac" translate="yes" xml:space="preserve">
          <source>Update 2015-12-15: See &lt;a href=&quot;https://stackoverflow.com/a/22864936/1718702&quot;&gt;https://stackoverflow.com/a/22864936/1718702&lt;/a&gt; for C#6. It's a cleaner and now standard in the language.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Actualizaci&amp;oacute;n 2015-12-15: Consulte &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/22864936/1718702&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://stackoverflow.com/a/22864936/1718702&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para C # 6. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es un limpiador y ahora est&amp;aacute;ndar en el lenguaje.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ef54e2ab9573a1dc779ebbc0d5c7ab555e163fd5" translate="yes" xml:space="preserve">
          <source>Wanted to added my short answer to this already long thread.  Something that hasn't been mentioned is the order of precedence of the catch statements, more specifically you need to be aware of the scope of each type of exception you are trying to catch.</source>
          <target state="translated">Quer铆a a帽adir mi respuesta corta a este ya largo hilo.Algo que no se ha mencionado es el orden de precedencia de las declaraciones de captura,m谩s espec铆ficamente necesitas estar al tanto del alcance de cada tipo de excepci贸n que est谩s tratando de capturar.</target>
        </trans-unit>
        <trans-unit id="f657cff0d5b3756ec384f3714196cff6006b0a71" translate="yes" xml:space="preserve">
          <source>What is in the link doesn't answer your question directly, but it's trivial to extend it to look like:</source>
          <target state="translated">Lo que est谩 en el enlace no responde directamente a tu pregunta,pero es trivial extenderlo para que parezca:</target>
        </trans-unit>
        <trans-unit id="99943cfb5ecf002e5e9ae5a52b8b28cf24b0de74" translate="yes" xml:space="preserve">
          <source>What you could do is use an anonymous function to encapsulate your on-error code, and then call it in those specific catch blocks:</source>
          <target state="translated">Lo que podr铆as hacer es usar una funci贸n an贸nima para encapsular tu c贸digo de error,y luego llamarlo en esos bloques de captura espec铆ficos:</target>
        </trans-unit>
        <trans-unit id="ca80db7575742b27fde65b854b945355d61acbf1" translate="yes" xml:space="preserve">
          <source>When there is more then one &lt;code&gt;true&lt;/code&gt;&lt;code&gt;Exception Filter&lt;/code&gt; - the first one will be accepted:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando hay m&amp;aacute;s de un &lt;/font&gt; &lt;code&gt;Exception Filter&lt;/code&gt; &lt;/font&gt; &lt;code&gt;true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , se aceptar&amp;aacute; el primero:&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7a09fc641433a64a134033646f75d56fd17522d" translate="yes" xml:space="preserve">
          <source>Which leads to the next question,</source>
          <target state="translated">Lo que nos lleva a la siguiente pregunta,</target>
        </trans-unit>
        <trans-unit id="eae36f0ce3daef78241f69b2133207bcf3a34e61" translate="yes" xml:space="preserve">
          <source>With C# 7 &lt;a href=&quot;https://stackoverflow.com/a/136038&quot;&gt;the answer from Michael Stum&lt;/a&gt; can be improved while keeping the readability of a switch statement:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con C # 7, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/136038&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la respuesta de Michael Stum&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se puede mejorar manteniendo la legibilidad de una declaraci&amp;oacute;n de cambio:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="528302a0747104d2be1351ddb8503984852db552" translate="yes" xml:space="preserve">
          <source>Would putting the entire &lt;code&gt;if&lt;/code&gt; test on one line make it more readable? I don't think so.  I mean, I did have another programmer vehemently argue once long ago that putting more code on one line would make it &quot;run faster.&quot;  But of course he was stark raving nuts. Trying to explain to him (with a straight face--which was challenging) how the interpreter or compiler would break that long line apart into discrete one-instruction-per-line statements--essentially identical to the result if he had gone ahead and just made the code readable instead of trying to out-clever the compiler--had no effect on him whatsoever.  But I digress.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Poner todo el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;test &lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en una l&amp;iacute;nea lo har&amp;iacute;a m&amp;aacute;s legible? No lo creo. Quiero decir, hace mucho tiempo que otro programador argument&amp;oacute; con vehemencia que poner m&amp;aacute;s c&amp;oacute;digo en una l&amp;iacute;nea lo har&amp;iacute;a &quot;correr m&amp;aacute;s r&amp;aacute;pido&quot;. Pero, por supuesto, estaba completamente loco. Tratando de explicarle (con una cara seria, lo cual fue un desaf&amp;iacute;o) c&amp;oacute;mo el int&amp;eacute;rprete o compilador dividir&amp;iacute;a esa larga l&amp;iacute;nea en declaraciones discretas de una instrucci&amp;oacute;n por l&amp;iacute;nea, esencialmente id&amp;eacute;nticas al resultado si hubiera seguido adelante y solo hizo que el c&amp;oacute;digo fuera legible en lugar de tratar de superar al compilador, no tuvo ning&amp;uacute;n efecto en &amp;eacute;l. Pero yo divago.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="131f753f0d5bbeaa4b9a7cad82488c60f2611438" translate="yes" xml:space="preserve">
          <source>You can also create methods for parsing returning tuples, which aren't available in .NET Framework yet as of version 4.6:</source>
          <target state="translated">Tambi茅n puedes crear m茅todos para analizar las tuplas que regresan,que a煤n no est谩n disponibles en el .NET Framework a partir de la versi贸n 4.6:</target>
        </trans-unit>
        <trans-unit id="f61fac0758d9e743bebe99080ec29731f9ec5c60" translate="yes" xml:space="preserve">
          <source>You can download &lt;a href=&quot;http://www.visualstudio.com/en-us/downloads/visual-studio-2015-downloads-vs.aspx&quot;&gt;Visual Studio 2015&lt;/a&gt; to check this out.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede descargar &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.visualstudio.com/en-us/downloads/visual-studio-2015-downloads-vs.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Visual Studio 2015&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para ver esto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1e5e031fbb8dbee194806a598096e8bbb6e5cc91" translate="yes" xml:space="preserve">
          <source>and so on as many as you wish. But you need to do it once and you can use it in all your projects (or, if you created a nuget package we could use it too).</source>
          <target state="translated">y as铆 sucesivamente,tantos como desee.Pero necesitas hacerlo una vez y puedes usarlo en todos tus proyectos (o,si creaste un paquete nuget tambi茅n podr铆amos usarlo).</target>
        </trans-unit>
        <trans-unit id="139bc28d7f6f0cb680c67b97d63cee5a0af93231" translate="yes" xml:space="preserve">
          <source>in C# 6 the recommended approach is to use Exception Filters, here is an example:</source>
          <target state="translated">en C#6 el enfoque recomendado es usar los Filtros de Excepci贸n,aqu铆 hay un ejemplo:</target>
        </trans-unit>
        <trans-unit id="e163cb1fcc4cf94d0647fa5057c3c5055217b4d7" translate="yes" xml:space="preserve">
          <source>p.s. I haven't put null checks for code simplicity, consider to add parameter validations.</source>
          <target state="translated">p.s.No he puesto comprobaciones nulas para la simplicidad del c贸digo,considera a帽adir validaciones de par谩metros.</target>
        </trans-unit>
        <trans-unit id="b52463a5170e012e085593425db69ddae475562f" translate="yes" xml:space="preserve">
          <source>p.s.2 
If you want to return a value from the catch, it's necessary to do same Catch methods, but with returns and Func instead of Action in parameters.</source>
          <target state="translated">p.s.2 Si se quiere devolver un valor de la captura,hay que hacer lo mismo con los m茅todos de captura,pero con retornos y Func en lugar de Acci贸n en los par谩metros.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
