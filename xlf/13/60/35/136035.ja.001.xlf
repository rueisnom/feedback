<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/136035">
    <body>
      <group id="136035">
        <trans-unit id="5aaf15b051a125920955bd69c723d28dfb1dc6e9" translate="yes" xml:space="preserve">
          <source>...with some crazy variation of this next code smell, I mean example, only to pretend that you're saving a few keystrokes.</source>
          <target state="translated">...この次のコードの臭いのいくつかのクレイジーなバリエーションで、私は、例を意味し、あなたがいくつかのキーストロークを保存しているふりをするだけです。</target>
        </trans-unit>
        <trans-unit id="c8d3c34755a48a88bcc07da0a84528f3d86616bd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.guid.tryparse.aspx&quot;&gt;TryParse&lt;/a&gt; never throws exceptions and returns false if format is wrong, setting WebId to &lt;code&gt;Guid.Empty&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.guid.tryparse.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;TryParse&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は例外をスローせず、形式が間違っている場合はfalseを返し、WebIdを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Guid.Empty&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に設定し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6a520e492fbc31afda2a4ca2670d6f40c2c2beb0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/questions/136035/catch-multiple-exceptions-at-once/136092#136092&quot;&gt;Joseph Daigle's Answer&lt;/a&gt; is a good solution, but I found the following structure to be a bit tidier and less error prone.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/136035/catch-multiple-exceptions-at-once/136092#136092&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ジョセフデイグルの回答&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は良い解決策ですが、次の構造は少し整然としていてエラーが発生しにくいことがわかりました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4e3308c299b7c14b6f16899d7f58eff6d125a522" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Basically provide another empty &lt;code&gt;Catch&lt;/code&gt; overload which returns itself)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（基本的に、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それ自体を返す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;別の空の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Catch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オーバーロードを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;提供&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;します）&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3aaed97268833a9918a2ba771f9d165a93561908" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms182271.aspx&quot;&gt;CA1800: Do not cast unnecessarily&lt;/a&gt;&lt;/em&gt; says to &quot;consider testing the result of the 'as' operator instead&quot;, but if you do that, you'll be writing more code than if you catch each exception separately.</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms182271.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CA1800：不必要にキャストしない&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で、「代わりに「as」演算子の結果をテストすることを検討&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;してください&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」と言いますが、これを行うと、各例外を個別にキャッチする場合よりも多くのコードが記述されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c2ba87e75a77003d169867541b8e1d7b0dbe538c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Also, specifically &lt;code&gt;Guid&lt;/code&gt; has the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.guid.tryparse(v=vs.110).aspx&quot;&gt;&lt;code&gt;Guid.TryParse&lt;/code&gt;&lt;/a&gt; method.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、特に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Guid&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;には&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.guid.tryparse(v=vs.110).aspx&quot;&gt; &lt;code&gt;Guid.TryParse&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドがあります。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ab87e8771981891dc3537b561271b84c06af8064" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Can I catch multiple exceptions at once?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一度に複数の例外をキャッチできますか？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a5c15139e290a34ffa9e286ddfe7f8c968c4f93f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT:&lt;/strong&gt; I do concur with others who are saying that, as of C# 6.0, exception filters are now a perfectly fine way to go: &lt;code&gt;catch (Exception ex) when (ex is ... || ex is ... )&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;編集：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は、C＃6.0以降、例外フィルターは完全に優れた方法であると言っている他の人と同意します：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;catch (Exception ex) when (ex is ... || ex is ... )&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52eee279cccac78795d9bd9b538cdd8748c99dc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit:&lt;/strong&gt; 
The &lt;a href=&quot;http://www.codeproject.com/Articles/853207/What-s-new-in-Csharp-Exception-Filters&quot;&gt;exception filtering&lt;/a&gt; in C# 6.0 will make the syntax a bit cleaner and comes with a &lt;a href=&quot;https://stackoverflow.com/a/27082164/2802543&quot;&gt;number of other benefits&lt;/a&gt; over any current solution. (most notably leaving the stack unharmed)</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;編集：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; C＃6.0 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; の&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.codeproject.com/Articles/853207/What-s-new-in-Csharp-Exception-Filters&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例外フィルタリング&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;により、構文が少しわかりやすくなり、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;現在のソリューションに比べて&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/27082164/2802543&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他の多くの利点がもたらさ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（最も顕著なのはスタックを無害のままにする）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="feb4ca963f08224ee8b4571f84c00c0036a54d42" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Full Error Handling Example (Copy-Paste to new Console app)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完全なエラー処理の例（新しいコンソールアプリにコピーして貼り付けます）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3b3141404e1e36c9cdf3d5f38083a4df531a0430" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How do I avoid writing duplicate code given that I can't catch multiple exception types in the same catch() block?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じcatch（）ブロックで複数の例外タイプをキャッチできない場合に、重複したコードを作成しないようにするにはどうすればよいですか？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="850301d4e8188e719ad5b1ae8a67aef29261306f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IsAnyOf.cs Extension (See Full Error Handling Example for Dependancies)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IsAnyOf.cs拡張機能（依存関係の完全なエラー処理の例を参照）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="542b69fedc4d99881098791ff30ae7adef1bcd67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ORIGINAL:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ORIGINAL:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9a5181d2939565f52ceafa914e74e4bfb90a7f80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Two Sample NUnit Unit Tests&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2つのサンプルNUnitユニットテスト&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="372f60334aa5d8918e891d52c780ab816ff7ba23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Usage&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="06d054af62aba5965b1c775157b32a35d2c79e1d" translate="yes" xml:space="preserve">
          <source>@Micheal</source>
          <target state="translated">@Micheal</target>
        </trans-unit>
        <trans-unit id="3389e9e3d38bd01137e197e890e0a7791c71610c" translate="yes" xml:space="preserve">
          <source>A return statement is not necessary</source>
          <target state="translated">返却書は必要ありません</target>
        </trans-unit>
        <trans-unit id="b65d43af93dde5ad9ef5b8514f0df207615395e0" translate="yes" xml:space="preserve">
          <source>Actually, you can put basically any condition inside that &lt;code&gt;when&lt;/code&gt; clause:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際、基本的には、その&lt;/font&gt;&lt;/font&gt; &lt;code&gt;when&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;句の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内部に任意の条件を置くことができます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cca8d2a8a73470cc7df126300c74b7f20e4a6720" translate="yes" xml:space="preserve">
          <source>Also, it seems the &quot;is&quot; operator might degrade performance slightly.</source>
          <target state="translated">また、&quot;is &quot;の演算子は若干性能が落ちそうな気がします。</target>
        </trans-unit>
        <trans-unit id="caf67b064a82111165779047a0bb4a5990dbbf9a" translate="yes" xml:space="preserve">
          <source>Alternatively, this can be all done inline (the right hand side of the when statement just has to be a boolean expression).</source>
          <target state="translated">あるいは、これはすべてインラインで行うことができます(when文の右側にはブーリアン式が必要です)。</target>
        </trans-unit>
        <trans-unit id="347c0c93fde8f4ac618ed62172bad2761087e0f6" translate="yes" xml:space="preserve">
          <source>And CatchMany implementation:</source>
          <target state="translated">そしてCatchManyの実装。</target>
        </trans-unit>
        <trans-unit id="d53cb30e5dd50782f910c1090f2fcd20924a8cd3" translate="yes" xml:space="preserve">
          <source>And as you can see in the &lt;code&gt;MSIL&lt;/code&gt; the code is not translated to &lt;code&gt;if&lt;/code&gt; statements, but to &lt;code&gt;Filters&lt;/code&gt;, and &lt;code&gt;Exceptions&lt;/code&gt; cannot be throw from within the areas marked with &lt;code&gt;Filter 1&lt;/code&gt; and &lt;code&gt;Filter 2&lt;/code&gt; but the filter throwing the &lt;code&gt;Exception&lt;/code&gt; will fail instead, also the last comparison value pushed to the stack before the &lt;code&gt;endfilter&lt;/code&gt; command will determine the success/failure of the filter (&lt;code&gt;Catch 1&lt;/code&gt;&lt;strong&gt;&lt;em&gt;XOR&lt;/em&gt;&lt;/strong&gt;&lt;code&gt;Catch 2&lt;/code&gt; will execute accordingly):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたが見ることができるようにし、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;MSIL&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コードはに翻訳されていない&lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のステートメントが、これらに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Filters&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exceptions&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でマークされたエリア内から投げることができない&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Filter 1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Filter 2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が、投げフィルタ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最後も、代わりに失敗します。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;endfilter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コマンドがフィルターの成功/失敗を決定する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;前にスタックにプッシュされた比較値&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Catch 1&lt;/code&gt; &lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;XOR&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt; &lt;code&gt;Catch 2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はそれに応じて実行されます）：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea816fd8da8992b183fbc63d106dea153a991102" translate="yes" xml:space="preserve">
          <source>And of course FxCop barks at you and so you have to &lt;strong&gt;&lt;em&gt;also&lt;/em&gt;&lt;/strong&gt; add an attribute to your code that has precisely zip to do with the running program, and is only there to tell FxCop to ignore an issue that in 99.9% of cases it is totally correct in flagging. And, sorry, I might be mistaken, but doesn't that &quot;ignore&quot; attribute end up actually compiled into your app?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そしてもちろんのFxCopのあなたに、あなたがしなければならないので、鳴き声&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;も&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;正確に動作しているプログラムで行うにはジップたあなたのコードに属性を追加し、例99.9％で、それは完全であるという問題を無視するようにFxCopのを伝えることしかありませんフラグ設定で修正します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして、申し訳ありませんが、私は間違っているかもしれませんが、その「無視」属性が実際にアプリにコンパイルされてしまうのではないですか？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="84d00784eb2e326dac15d825625d91a29b5bfea5" translate="yes" xml:space="preserve">
          <source>And the other solution is to catch the Exception object and handle it accordingly. The most literal translation for this, based on the context above is this:</source>
          <target state="translated">そしてもう一つの解決策は、例外オブジェクトをキャッチして、それに応じて処理することです。上記の文脈に基づいて、これを最もリテラルに翻訳すると次のようになります。</target>
        </trans-unit>
        <trans-unit id="e23465a9f88e5b869b70e2eda4aabcd1e17d5bdd" translate="yes" xml:space="preserve">
          <source>And use them like this:</source>
          <target state="translated">そして、こんな風に使います。</target>
        </trans-unit>
        <trans-unit id="83dc80cdafbb6519dd31ddbbe7cea338e549d4df" translate="yes" xml:space="preserve">
          <source>Any other exceptions will be thrown and the code &lt;code&gt;WebId = Guid.Empty;&lt;/code&gt; won't be hit. If you don't want other exceptions to crash your program, just add this AFTER the other two catches:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その他の例外はスローされ、コード&lt;/font&gt;&lt;/font&gt; &lt;code&gt;WebId = Guid.Empty;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がスローされ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ヒットしません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他の例外でプログラムをクラッシュさせたくない場合は、他の2つのキャッチの後にこれを追加します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="418a5b88f6ef7fc8db59855e34f953b266c56327" translate="yes" xml:space="preserve">
          <source>Anyhow, here's what I would do:</source>
          <target state="translated">とにかく、私ならこうします。</target>
        </trans-unit>
        <trans-unit id="2cebdf89c9ac259fa1d1b505d0ff6182557aed9a" translate="yes" xml:space="preserve">
          <source>As others have pointed out, you can have an &lt;code&gt;if&lt;/code&gt; statement inside your catch block to determine what is going on. C#6 supports Exception Filters, so the following will work:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他の人が指摘したように、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;何が起こっているのかを判断するために、catchブロック内に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステートメントを含める&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことができ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃6は例外フィルターをサポートしているため、以下が機能します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9017051d440936e5b5db7f09088015fd98c38bfa" translate="yes" xml:space="preserve">
          <source>At this point, we can add a separate function that handles the different types of Exceptions using overload resolution, or to handle the Exception. Both have disadvantages. To start, here's the way to do it with a helper function:</source>
          <target state="translated">この時点で、オーバーロード解決を利用して異なる種類のExceptionを処理する関数を別途追加するか、Exceptionを処理するようにします。どちらもデメリットがあります。手始めに、ヘルパー関数を使った方法を紹介します。</target>
        </trans-unit>
        <trans-unit id="44f53e52ca0613c4c3dd6af286140722dd6c32b8" translate="yes" xml:space="preserve">
          <source>At time of writing, this will include support for C# 6.</source>
          <target state="translated">執筆時点では、これにはC#6のサポートが含まれる予定です。</target>
        </trans-unit>
        <trans-unit id="0c105894787df0d666b778b4e7e827a820c0c625" translate="yes" xml:space="preserve">
          <source>Because it certainly isn't automatically more readable.</source>
          <target state="translated">確かに自動的に読みやすくなるわけではありませんから。</target>
        </trans-unit>
        <trans-unit id="84ec264cf702058749562c6d952f580cc6f0e0e8" translate="yes" xml:space="preserve">
          <source>But it&amp;acute;s not. Actually this is the only new feature in C# 6 that is not possible to emulate in prior versions. First, a re-throw means more overhead than skipping the catch. Second, it is not semantically equivalent. The new feature preserves the stack intact when you are debugging your code. Without this feature the crash dump is less useful or even useless.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、そうではありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際、これはC＃6の唯一の新機能であり、以前のバージョンではエミュレートできません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;まず、再スローは、キャッチをスキップするよりもオーバーヘッドが多いことを意味します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;第二に、それは意味的に同等ではありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新しい機能では、コードをデバッグするときにスタックをそのまま維持します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この機能がないと、クラッシュダンプはあまり役に立たないか、役に立たないことさえあります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8968328136575f096f276fca672f5d7a0e341da4" translate="yes" xml:space="preserve">
          <source>But that's sort of my point.  Y'all have heard of functions/methods, right?  Seriously.  Write a common &lt;code&gt;ErrorHandler&lt;/code&gt; function and, like, call it from each catch block.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、それは私の主張のようなものです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y'allは関数/メソッドについて聞いたことがありますか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;真剣に。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;共通の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ErrorHandler&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;記述&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し、同様に各catchブロックから呼び出します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="73907b0eca8f7445628e3ca07e7e04aa2be2d3f5" translate="yes" xml:space="preserve">
          <source>Catch &lt;code&gt;System.Exception&lt;/code&gt; and switch on the types</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;System.Exception&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キャッチ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;して型をオンにする&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6f1008bdf611d7679d3c3f840c1b061398509ab0" translate="yes" xml:space="preserve">
          <source>Catch multiple exceptions at once</source>
          <target state="translated">複数の例外を一度にキャッチ</target>
        </trans-unit>
        <trans-unit id="2ff92d3d845f125e73f3f4eef6ab12da2f07a6ec" translate="yes" xml:space="preserve">
          <source>Cautioned and Warned: &lt;a href=&quot;http://community.bartdesmet.net/blogs/bart/archive/2008/01/06/exception-handling-in-functional-style.aspx&quot;&gt;Yet another kind, functional style.&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注意と警告：&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://community.bartdesmet.net/blogs/bart/archive/2008/01/06/exception-handling-in-functional-style.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さらに別の種類の機能的なスタイル。&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0d008cb4b49a7d4f44a21a4a3014d343569f652e" translate="yes" xml:space="preserve">
          <source>Construct a new Guid in a temporary variable.</source>
          <target state="translated">テンポラリ変数に新しいGuidを構築します。</target>
        </trans-unit>
        <trans-unit id="8d84823db6b97f3970612fd253baf121c346100a" translate="yes" xml:space="preserve">
          <source>Cutting straight to the chase, this kind of duplicates an earlier answer, but if you really want to perform a common action for several exception types and keep the whole thing neat and tidy within the scope of the one method, why not just use a lambda/closure/inline function to do something like the following?  I mean, chances are pretty good that you'll end up realizing that you just want to make that closure a separate method that you can utilize all over the place. But then it will be super easy to do that without actually changing the rest of the code structurally.  Right?</source>
          <target state="translated">本題に入りますが、これは以前の回答と重複しますが、もし本当に複数の例外タイプに対して共通のアクションを実行し、1つのメソッドの範囲内で全体を整頓しておきたいのであれば、ラムダクロージャーインライン関数を使用して以下のようなことをしてみてはどうでしょうか?つまり、そのクロージャを別のメソッドにして、あちこちで利用できるようにしたいということに気づく可能性が高いのです。しかし、それは構造的にコードの残りの部分を変更することなく、超簡単にできます。そうですよね?</target>
        </trans-unit>
        <trans-unit id="e9656fda095be85a55c47e88f0f2142837377331" translate="yes" xml:space="preserve">
          <source>E.g.:</source>
          <target state="translated">E.g.:</target>
        </trans-unit>
        <trans-unit id="5de063f97315c5b8e6e1dc2ce35e02b2a46ba4c4" translate="yes" xml:space="preserve">
          <source>Except that I still kind of hate the one-long-line layout and would personally lay the code out like the following. I think this is as functional as it is aesthetic, since I believe it improves comprehension. Some may disagree:</source>
          <target state="translated">ただし、私はまだ一本の長文のレイアウトが嫌いで、個人的には以下のようにレイアウトしたいと思っています。これは機能的であると同時に美的でもあると思うのですが、私はこれが理解力を高めると信じているからです。反対する人もいるかもしれません。</target>
        </trans-unit>
        <trans-unit id="75ea838be7539f75e44812538c146599e6015083" translate="yes" xml:space="preserve">
          <source>Exception Hierarchy</source>
          <target state="translated">例外の階層</target>
        </trans-unit>
        <trans-unit id="527e4c0d8a347a6d284b98967bd45b476920144c" translate="yes" xml:space="preserve">
          <source>Exception filters are now available in c# 6+. You can do</source>
          <target state="translated">c#6+で例外フィルタが使えるようになりました。以下のことができます。</target>
        </trans-unit>
        <trans-unit id="539f0ec3011bd70cde17e4ba28046cf7608d24cc" translate="yes" xml:space="preserve">
          <source>For example if you use a &quot;catch-all&quot; exception as &lt;strong&gt;Exception&lt;/strong&gt; it will preceed all other catch statements and you will obviously get compiler errors however if you reverse the order you can chain up your catch statements (bit of an anti-pattern I think) you can put the catch-all &lt;strong&gt;Exception&lt;/strong&gt; type at the bottom and this will be capture any exceptions that didn't cater for higher up in your try..catch block:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、「catch-all」例外を&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Exception&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として使用すると、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他のすべてのcatchステートメントよりも優先され、明らかにコンパイラエラーが発生しますが、順序を逆にすると、catchステートメントを連鎖させることができます（アンチパターンのビット）キャッチオール&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例外&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タイプを下部に配置すると、try..catchブロックで上位に対応しなかった例外がキャプチャされます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="244c23113ec704871d9cee9221d63c34f391fadd" translate="yes" xml:space="preserve">
          <source>For the sake of completeness, since &lt;strong&gt;.NET 4.0&lt;/strong&gt; the code can rewritten as:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完全を期すために、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.NET 4.0以降&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、コードは次のように書き直すことができ&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd09ef4377932d2b4de7f67104a8aadaf92c5594" translate="yes" xml:space="preserve">
          <source>For this you need to create several &quot;Catch&quot; method overloads, similar to System.Action:</source>
          <target state="translated">このためには、System.Action.Actionと同様に、いくつかの &quot;Catch &quot;メソッドのオーバーロードを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="e509265720b9dd33023c62eb25685529d8bfc817" translate="yes" xml:space="preserve">
          <source>From C#6 you furthermore have the &lt;a href=&quot;https://stackoverflow.com/questions/4268223/c-sharp-exception-filter&quot;&gt;exception-filters&lt;/a&gt; as already mentioned by others. So you can modify the code above to this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃6からは、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他の人がすでに述べたように&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、さらに&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4268223/c-sharp-exception-filter&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例外フィルター&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、上記のコードを次のように変更できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c2a061516ad58558a806faed3e12641e9f86898b" translate="yes" xml:space="preserve">
          <source>Geared for people that want a &lt;a href=&quot;https://stackoverflow.com/q/791390/1718702&quot;&gt;more elegant solution&lt;/a&gt; to catch once and filter exceptions, I use an extension method as demonstrated below.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一度キャッチして例外をフィルタリングするための&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/q/791390/1718702&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;より洗練されたソリューション&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必要な&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;人の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ために、以下に示すように拡張メソッドを使用します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b1295f86f1d7cbf0ad091e0bccf7386af51e9b2a" translate="yes" xml:space="preserve">
          <source>Given your specific sample, where the fall-back value is cheap to construct, I like to follow these steps:</source>
          <target state="translated">フォールバック値が安価で構築できるあなたの特定のサンプルを考えると、私は以下の手順に従いたいと思います。</target>
        </trans-unit>
        <trans-unit id="36f3882107998a3ab41cc38fab92f798f8b2efce" translate="yes" xml:space="preserve">
          <source>Granted, I left the three identical instances of &lt;code&gt;/* write to a log, whatever... */ return;&lt;/code&gt; out of the first example.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;確かに、私は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;/* write to a log, whatever... */ return;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 3つの同一のインスタンスを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ログ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に残しました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。何でも... * / return; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の例から。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a13352f633c78630c9980aff67adb5108712346" translate="yes" xml:space="preserve">
          <source>Here is how the same problem would look using C# 6.0 syntax:</source>
          <target state="translated">同じ問題がC#6.0の構文を使ってどのように見えるかを示します。</target>
        </trans-unit>
        <trans-unit id="73f9549a89eef322c33bad695cd89bf59a3fdef1" translate="yes" xml:space="preserve">
          <source>How about</source>
          <target state="translated">どうですか?</target>
        </trans-unit>
        <trans-unit id="e7b0dde9db8bb974802ff2df14397ad3d3f6ccd4" translate="yes" xml:space="preserve">
          <source>How much &lt;em&gt;less&lt;/em&gt; readable does this get when you add three more exception types, a month or two from now?  (Answer: it gets a &lt;strong&gt;&lt;em&gt;lot&lt;/em&gt;&lt;/strong&gt; less readable).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;今から1か月または2か月後に3つの例外タイプを追加すると、これは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どれほど&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;読み&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;にくく&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なりますか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（回答：それは取得&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たくさん&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;読みにくく）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="720545802c225e5d12bd7f9c93865e5a5357bf85" translate="yes" xml:space="preserve">
          <source>I already had this extension in my library, originally written for other purposes, but it worked just perfectly for &lt;code&gt;type&lt;/code&gt; checking on exceptions.  Plus, imho, it looks cleaner than a bunch of &lt;code&gt;||&lt;/code&gt; statements.  Also, unlike the accepted answer, I prefer explicit exception handling so &lt;code&gt;ex is ...&lt;/code&gt; had undesireable behaviour as derrived classes are assignable to there parent types).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この拡張機能は、元々他の目的で作成されたライブラリに既にありましたが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、例外の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;type&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;チェックには&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完全に機能しました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さらに、imhoは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;||&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;束よりもきれいに見えます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステートメント。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、受け入れられた回答とは異なり、明示的な例外処理を好むので&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、派生クラスは親の型に割り当てることができる&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ex is ...&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は望ましくない動作をしました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74240835cd4bc17fc57bd86b1e86aefb93174327" translate="yes" xml:space="preserve">
          <source>I can't help but wonder (&lt;strong&gt;warning:&lt;/strong&gt; a little irony/sarcasm ahead) why on earth go to all this effort to basically just replace the following:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は仕方がありません（&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;警告：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;少し皮肉/皮肉）なぜ地球上でこのすべての努力に取り組み、基本的に次のものを置き換えるだけなのでしょうか。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c37622ab80f15e89d47339306984a3ac95887a9c" translate="yes" xml:space="preserve">
          <source>I highly recommend folks review this MSDN document:</source>
          <target state="translated">このMSDN文書をレビューすることを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="780d1495b265f4e9a8ecee31bb027832a5d2a8b2" translate="yes" xml:space="preserve">
          <source>I know I'm a little late to the party here, but holy smoke...</source>
          <target state="translated">少し遅れての参加ですが、何てこった...</target>
        </trans-unit>
        <trans-unit id="3d961e357d56d34ad823fd113e2f28765f420089" translate="yes" xml:space="preserve">
          <source>I ran into a use case scenario when trying to cast control object in a datagrid, with either content as TextBox, TextBlock or CheckBox. In this case the returned Exception was the same, but the message varied.</source>
          <target state="translated">データグリッド内のコントロールオブジェクトをTextBox、TextBlock、CheckBoxのいずれかのコンテンツでキャストしようとしたときに、あるユースケースのシナリオに遭遇しました。この場合、返される例外は同じですが、メッセージが異なります。</target>
        </trans-unit>
        <trans-unit id="02f94d544750bdf98fc7f9f1023ba56f6ab0aa09" translate="yes" xml:space="preserve">
          <source>I want to suggest shortest answer (one more &lt;strong&gt;functional style&lt;/strong&gt;):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は最短の答えを提案したいと思います（もう1つの&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;機能的なスタイル&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0e9dc59e2c3a11b47ed9d2537dbaa8971253f1b1" translate="yes" xml:space="preserve">
          <source>I wonder why no-one noticed that code-duplication.</source>
          <target state="translated">なんで誰もそのコードデュプリケーションに気づかなかったんだろう。</target>
        </trans-unit>
        <trans-unit id="c50b41ab335674d6bc828e30c341ae79ecd94048" translate="yes" xml:space="preserve">
          <source>I wonder: Is there a way to catch both exceptions and only call the &lt;code&gt;WebId = Guid.Empty&lt;/code&gt; call once?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;両方の例外をキャッチして、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;WebId = Guid.Empty&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出しを1回&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;だけ呼び出す方法はあるの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でしょうか。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1c7b599accd0b406b2572bdd7a7f519b38d34b0" translate="yes" xml:space="preserve">
          <source>If any exception is thrown, then WebId is never set to the half-constructed value, and remains Guid.Empty.</source>
          <target state="translated">例外がスローされた場合は、WebId はハーフコンストラクト値に設定されることはなく、Guid.Empty のままになります。</target>
        </trans-unit>
        <trans-unit id="f538280fc4add5df1e61ddb0c8c7aaba59a637ea" translate="yes" xml:space="preserve">
          <source>If constructing the fall-back value is expensive, and resetting a value is much cheaper, then I would move the reset code into its own function:</source>
          <target state="translated">フォールバック値の構築にコストがかかり、値のリセットの方がはるかに安いのであれば、私はリセットコードを独自の関数に移動させます。</target>
        </trans-unit>
        <trans-unit id="f8ad4319bb16a812c6324b95e9c2ebe07f4bf57b" translate="yes" xml:space="preserve">
          <source>If the handler is simple, and we want to re-use code, the best solution is probably to introduce a helper function.</source>
          <target state="translated">ハンドラがシンプルで、コードを再利用したい場合、最良の解決策はヘルパー関数を導入することでしょう。</target>
        </trans-unit>
        <trans-unit id="8e330682406f1c4b3a85e106c7382d74887afe47" translate="yes" xml:space="preserve">
          <source>If we don't want to re-throw, we might consider catching the right exceptions, and storing them in a temporary.</source>
          <target state="translated">再投しないのであれば、正しい例外をキャッチして一時的に保管することを考えてもいいかもしれません。</target>
        </trans-unit>
        <trans-unit id="c11db494a0490dce6a9e17bcd6addd3e6e0d163a" translate="yes" xml:space="preserve">
          <source>If we look at the code, what we really would like to do is forward the call. However, according to the MS Partition II, IL exception handler blocks won't work like this, which in this case makes sense because that would imply that the 'exception' object can have different types.</source>
          <target state="translated">コードを見ると、私たちが本当にしたいことは、呼び出しを転送することです。しかし、MS パーティション II によると、IL の例外ハンドラブロックはこのようには動作しません。</target>
        </trans-unit>
        <trans-unit id="8d8207558989db2e7dfee1091e9a9bd5c52a907d" translate="yes" xml:space="preserve">
          <source>If we want to re-throw, we have no choice but to put the code in a 'Exception' catch handler, which will break FxCop and your debugger's uncaught exceptions.</source>
          <target state="translated">再投したい場合は、コードを 'Exception' キャッチハンドラに入れるしかありませんが、これは FxCop とデバッガの捕捉されていない例外を壊すことになります。</target>
        </trans-unit>
        <trans-unit id="2f0396f3fe0933634437e4d13efa9b48318f3803" translate="yes" xml:space="preserve">
          <source>If you ask me, the second example (with the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;is&lt;/code&gt; keywords) is both significantly less readable, and simultaneously significantly more error-prone during the maintenance phase of your project.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私に尋ねると、2番目の例（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;is&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キーワードを使用）はどちらも大幅に読みにくくなり、同時にプロジェクトのメンテナンスフェーズ中に大幅にエラーが発生しやすくなります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d147073ec9d1be11df42ab43bd63f496ba553b9" translate="yes" xml:space="preserve">
          <source>If you can upgrade your application to C# 6 you are lucky. The new C# version has implemented Exception filters. So you can write this:</source>
          <target state="translated">アプリケーションをC#6にアップグレードできるならラッキーです。新しいC#のバージョンでは、例外フィルタが実装されています。なので、このように書くことができます。</target>
        </trans-unit>
        <trans-unit id="4d552cdbb82e4cf6a4940a80e3f2e1be834c498e" translate="yes" xml:space="preserve">
          <source>If you don't want to use an &lt;code&gt;if&lt;/code&gt; statement within the &lt;code&gt;catch&lt;/code&gt; scopes, &lt;strong&gt;&lt;em&gt;in &lt;code&gt;C# 6.0&lt;/code&gt; you can use &lt;code&gt;Exception Filters&lt;/code&gt; syntax&lt;/em&gt;&lt;/strong&gt; which was already supported by the CLR in previews versions but existed only in &lt;code&gt;VB.NET&lt;/code&gt;/&lt;code&gt;MSIL&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたが使用しない場合は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内の文&lt;/font&gt;&lt;/font&gt; &lt;code&gt;catch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、スコープ&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C# 6.0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用でき&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exception Filters&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構文&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すでにプレビューバージョンでCLRでサポートされているだけに存在していた&lt;/font&gt;&lt;/font&gt; &lt;code&gt;VB.NET&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; / &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MSIL&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71674352e64f530a61439601f02e7464c8b3b848" translate="yes" xml:space="preserve">
          <source>If you want to continue using Visual Studio 2013, you can install the following nuget package:</source>
          <target state="translated">Visual Studio 2013を引き続き使用したい場合は、以下のnugetパッケージをインストールします。</target>
        </trans-unit>
        <trans-unit id="dfbebe9c28406d73a5cb8384408c1032f57b8c46" translate="yes" xml:space="preserve">
          <source>In C# 7.0+, you can combine this with pattern matching too</source>
          <target state="translated">C#7.0+では、パターンマッチングと組み合わせることもできます。</target>
        </trans-unit>
        <trans-unit id="026fae3457299735b784df3c5b5d4a008f86ea57" translate="yes" xml:space="preserve">
          <source>In c# 6.0,Exception Filters is improvements for exception handling</source>
          <target state="translated">c#6.0では、例外処理を改善するためにException Filtersを使用しています。</target>
        </trans-unit>
        <trans-unit id="ca4b4baab3be903a2c5a12429ced4eab9894b0f5" translate="yes" xml:space="preserve">
          <source>In short, no.</source>
          <target state="translated">要するに、ダメなんです。</target>
        </trans-unit>
        <trans-unit id="bad182dce85964009f99188e3387cec999f8a81b" translate="yes" xml:space="preserve">
          <source>Initialize WebId to the fall-back value.</source>
          <target state="translated">WebIdをフォールバック値に初期化します。</target>
        </trans-unit>
        <trans-unit id="21c6170e81cf52460da0fc2b6b268b15204775ca" translate="yes" xml:space="preserve">
          <source>Install-Package Microsoft.Net.Compilers</source>
          <target state="translated">インストールパッケージ Microsoft.Net.Compilers</target>
        </trans-unit>
        <trans-unit id="65101af96bc9264e39ad9b42429b60c89bda3dca" translate="yes" xml:space="preserve">
          <source>It can even be compacted to a single line (though not very pretty)</source>
          <target state="translated">一本の線にコンパクトにすることも可能です(あまり可愛くはないですが</target>
        </trans-unit>
        <trans-unit id="ee03e87bc255456e61aebe03ef23230147a58f5d" translate="yes" xml:space="preserve">
          <source>It is discouraged to simply catch &lt;code&gt;System.Exception&lt;/code&gt;. Instead, only the &quot;known&quot; exceptions should be caught.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;単に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;System.Exception&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キャッチすることはお勧めしません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに、「既知の」例外のみをキャッチする必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2729d160bb79005beca2084b5df0a3f38c86bb26" translate="yes" xml:space="preserve">
          <source>It is just that Simple!!</source>
          <target state="translated">それはちょうどそのシンプルです</target>
        </trans-unit>
        <trans-unit id="f0e7007b6b6aab9e8c438cca232b2755efd880ff" translate="yes" xml:space="preserve">
          <source>It is worth mentioning here. You can respond to the multiple combinations (Exception error and exception.message).</source>
          <target state="translated">ここで言及しておく価値はあります。複数の組み合わせ(Exception errorとexception.message)に対応することができます。</target>
        </trans-unit>
        <trans-unit id="90f5902bc1a319f8953809309388ae151bffc367" translate="yes" xml:space="preserve">
          <source>Just call the try and catch twice.</source>
          <target state="translated">トライとキャッチを2回呼べばいいだけ。</target>
        </trans-unit>
        <trans-unit id="1ebe9b7ab107b293b672019c2bf62a545d09cdda" translate="yes" xml:space="preserve">
          <source>Just how I would do it, trying to find the &lt;em&gt;simple is beautiful&lt;/em&gt; pattern</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シンプルに美しい&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パターン&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を見つけよう&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3de8e13f2d58751d17f79ba82916bddcf4930db9" translate="yes" xml:space="preserve">
          <source>Just saying...</source>
          <target state="translated">言ってみただけですが...</target>
        </trans-unit>
        <trans-unit id="f654315c2642f6686f15e838fb9cfaef4a30f5c6" translate="yes" xml:space="preserve">
          <source>Let me break your question into 2 questions.  The first,</source>
          <target state="translated">あなたの質問を2つに分けてみましょう。1つ目は</target>
        </trans-unit>
        <trans-unit id="277d463ead616f9c9e3a25bac2ef07c11f92c5ef" translate="yes" xml:space="preserve">
          <source>Matching behaviour for &lt;code&gt;Exception&lt;/code&gt; types is exact (ie. A child IS NOT a match for any of its parent types).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タイプの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;マッチング動作&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は正確です（つまり、子はその親タイプのいずれにも一致しません）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="50f1c5e1d73fc644c699b6519af102026e9072e7" translate="yes" xml:space="preserve">
          <source>Maybe try to keep your code simple such as putting the common code in a method, as you would do in any other part of the code that is not inside a catch clause?</source>
          <target state="translated">キャッチ句の中にないコードの他の部分で行うように、共通のコードをメソッドに入れるなど、コードをシンプルに保つようにしてみてはいかがでしょうか?</target>
        </trans-unit>
        <trans-unit id="f129e30c19fc94a60bf892f96e6f7cc1c93ac303" translate="yes" xml:space="preserve">
          <source>Next useless update to this useless answer comes when deconstruction of out-parameters is implemented in C# 12. :)</source>
          <target state="translated">この無意味な答えに対する次の無意味な更新は、C#12でアウトパラメタのデコンストラクションが実装されたときに来る。)</target>
        </trans-unit>
        <trans-unit id="ff3606b31e07f3a5fe0e676990944aadfec5d0d5" translate="yes" xml:space="preserve">
          <source>Not in C# unfortunately, as you'd need an exception filter to do it and C# doesn't expose that feature of MSIL. VB.NET does have this capability though, e.g.</source>
          <target state="translated">残念ながらC#ではできません。VB.NETにはこの機能があります。</target>
        </trans-unit>
        <trans-unit id="387204d2ecb9509b33590cf8b44afd14a24010d1" translate="yes" xml:space="preserve">
          <source>Note that I did find one way to do it, but this looks more like material for &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Daily_WTF&quot;&gt;The Daily WTF&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私はそれを行う方法を1つ見つけましたが、これは&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Daily_WTF&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;The Daily WTFの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;資料のように見えます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a8b5338876c5a2c0e9ee51235aebc5eed5d58b7b" translate="yes" xml:space="preserve">
          <source>Note that as opposed to an &lt;code&gt;if&lt;/code&gt; statement inside the &lt;code&gt;catch&lt;/code&gt;'s scope, &lt;code&gt;Exception Filters&lt;/code&gt; cannot throw &lt;code&gt;Exceptions&lt;/code&gt;, and when they do, or when the condition is not &lt;code&gt;true&lt;/code&gt;, the next &lt;code&gt;catch&lt;/code&gt; condition will be evaluated instead:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;catch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;スコープ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステートメント&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とは異なり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;Exception Filters&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例外を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スローできません。&lt;/font&gt; &lt;code&gt;Exceptions&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;がスローさ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れる場合、または条件が&lt;/font&gt; &lt;code&gt;true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次の&lt;/font&gt; &lt;code&gt;catch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;条件が評価されます。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="307da8d59df79d213bf1937c633e591c2d7b1f47" translate="yes" xml:space="preserve">
          <source>Now, this sometimes leads to unneccessary repetitive code, for example:</source>
          <target state="translated">さて、これは時々、例えば不必要な反復コードにつながります。</target>
        </trans-unit>
        <trans-unit id="c38182e25f1f4e2e680c0985dd7c98b38942c400" translate="yes" xml:space="preserve">
          <source>One of the major points, really, is that most of the point of formatting the textual source code that we're all looking at every day is to make it really, really obvious to other human beings what is actually happening when the code runs.  Because the compiler turns the source code into something totally different and couldn't care less about your code formatting style.  So all-on-one-line totally sucks, too.</source>
          <target state="translated">大きなポイントの一つは、私たちが毎日見ているテキストのソースコードをフォーマットするポイントのほとんどは、コードが実行されたときに実際に何が起こっているのかを、他の人間に本当に本当に本当に明白にすることです。コンパイラはソースコードを全く別のものに変えてしまうので、あなたのコードフォーマットのスタイルは気にしません。だから、オール・オン・ワン・ラインも最悪なんです。</target>
        </trans-unit>
        <trans-unit id="c2798cf70d9db202201ca1f462f0a7aa390a26de" translate="yes" xml:space="preserve">
          <source>Or to write it in code, we ask the compiler to do something like this (well it's not entirely correct, but it's the closest possible thing I guess):</source>
          <target state="translated">あるいはコードで書くと、コンパイラにこんな感じでお願いしています(まあ完全に正しいわけではありませんが、これが一番近いのではないでしょうか)。</target>
        </trans-unit>
        <trans-unit id="2c16777d24367e3f298e7a67a4bfda81a4d9675f" translate="yes" xml:space="preserve">
          <source>Output: Catch.</source>
          <target state="translated">出力。キャッチ。</target>
        </trans-unit>
        <trans-unit id="3c0e4355b62280b3263546bae6eb0a516c472868" translate="yes" xml:space="preserve">
          <source>Output: General catch.</source>
          <target state="translated">出力。一般的なキャッチ。</target>
        </trans-unit>
        <trans-unit id="ecc3cfb9af571c4404afc45fdc1346391cba3878" translate="yes" xml:space="preserve">
          <source>Referencing this package will cause the project to be built using the
  specific version of the C# and Visual Basic compilers contained in the
  package, as opposed to any system installed version.</source>
          <target state="translated">このパッケージを参照すると、システムにインストールされているバージョンではなく、パッケージに含まれている特定のバージョンのC#およびVisual Basicコンパイラを使用してプロジェクトがビルドされます。</target>
        </trans-unit>
        <trans-unit id="9889f134527432dcbe02f9a4e26a1566fa481e1d" translate="yes" xml:space="preserve">
          <source>See a &lt;a href=&quot;https://roslyn.codeplex.com/discussions/541301&quot;&gt;discussion about this on CodePlex&lt;/a&gt;. And an &lt;a href=&quot;http://www.volatileread.com/Wiki/Index?id=1087&quot;&gt;example showing the difference&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://roslyn.codeplex.com/discussions/541301&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CodePlexでこれに関する議論を&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.volatileread.com/Wiki/Index?id=1087&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;違いを示す例&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a0f044dd5ba573faa03180c7cb9425085f563062" translate="yes" xml:space="preserve">
          <source>Set WebId to the fully constructed temporary variable.  Make this the final statement of the try{} block.</source>
          <target state="translated">WebId を完全に構築された一時変数に設定します。これを try{}ブロックの最後の文にします。</target>
        </trans-unit>
        <trans-unit id="7c209d0a5eace88efaaedde48c3ad7c2f70ca081" translate="yes" xml:space="preserve">
          <source>Since &lt;strong&gt;C# 7&lt;/strong&gt; you can avoid introducing a variable on a separate line:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃7&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以降&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、別の行に変数を導入することを回避できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fc2791091b2e77f5c8e25ff45eeded0171a350f8" translate="yes" xml:space="preserve">
          <source>Since I felt like these answers just touched the surface, I attempted to dig a bit deeper.</source>
          <target state="translated">これらの答えが表面に出ただけのような気がしたので、もう少し深く掘り下げてみました。</target>
        </trans-unit>
        <trans-unit id="ff984b756a47a0896f0f17221cd64b0b91c34398" translate="yes" xml:space="preserve">
          <source>Slightly revised version of your code:</source>
          <target state="translated">あなたのコードを少し修正しました。</target>
        </trans-unit>
        <trans-unit id="a347d294b31f0747c0d427b69390320d40eb5848" translate="yes" xml:space="preserve">
          <source>So the code looks like:</source>
          <target state="translated">そのため、コードは次のようになります。</target>
        </trans-unit>
        <trans-unit id="d5ebe26a1976d35b403686baa594965c8a21ec1d" translate="yes" xml:space="preserve">
          <source>So to conclude:</source>
          <target state="translated">結論から言うと</target>
        </trans-unit>
        <trans-unit id="fba6c3dd6bfcb0f8599df48543715d028146b9e2" translate="yes" xml:space="preserve">
          <source>So what we would really want to do is something that doesn't compile, say:</source>
          <target state="translated">だから、本当にやりたいのは、コンパイルしないようなものです。</target>
        </trans-unit>
        <trans-unit id="0b2999dc55eadeb32a8eea7837711256935984c0" translate="yes" xml:space="preserve">
          <source>So why won't this code compile - and how can we hack it in such a way that it will?</source>
          <target state="translated">では、なぜこのコードはコンパイルされないのでしょうか?</target>
        </trans-unit>
        <trans-unit id="59d5b84e463ffda163b9c20671002ba7bede5835" translate="yes" xml:space="preserve">
          <source>So you&amp;acute;re repeating lots of code within every exception-switch? Sounds like extracting a method would be god idea, doesn&amp;acute;t it?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では、すべての例外スイッチ内で多くのコードを繰り返していますか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドを抽出するような音は素晴らしいアイデアでしょうね。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="28aad4ec99b5934be9e01f44169ee4a3c9b2b75b" translate="yes" xml:space="preserve">
          <source>So your code comes down to this:</source>
          <target state="translated">あなたのコードはこうなる</target>
        </trans-unit>
        <trans-unit id="ef13ab8ec9dd166e5d867d7fbbb39bb73cd543e4" translate="yes" xml:space="preserve">
          <source>Some people think this code is the same as</source>
          <target state="translated">このコードは</target>
        </trans-unit>
        <trans-unit id="7341f6385aceb3a37913d3cc72774b078a8510f0" translate="yes" xml:space="preserve">
          <source>String comparisons are ugly and slow.</source>
          <target state="translated">文字列の比較は醜くて遅い</target>
        </trans-unit>
        <trans-unit id="c302bfb8c6ca9631e91e2a7e11fcb4a4304b008c" translate="yes" xml:space="preserve">
          <source>That leaves just the 're-throw'. For this to work, we need to be able to perform the handling inside the 'catch' block - and the only way to make this work is by an catching 'Exception' object.</source>
          <target state="translated">これでは 're-throw' だけが残ってしまいます。これを動作させるためには、'catch' ブロックの中で処理を実行できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="5224130c9b85acc029bcb32616a1b11cc5806f7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MyFilter&lt;/code&gt; method could then look something like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;MyFilter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法は、このようなものになります：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ece06866e04ad9203ab4d537beecbf110f7d9a8" translate="yes" xml:space="preserve">
          <source>The accepted answer seems acceptable, except that CodeAnalysis/&lt;a href=&quot;http://en.wikipedia.org/wiki/FxCop&quot;&gt;FxCop&lt;/a&gt; will complain about the fact that it's catching a general exception type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;受け入れられた回答は受け入れられるようですが、CodeAnalysis / &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/FxCop&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;FxCop&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が一般的な例外タイプをキャッチしているという事実について文句を言う場合があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4781fc70c4345a21044d116b1280161a2c9956c1" translate="yes" xml:space="preserve">
          <source>The bigger question to this is &lt;em&gt;why&lt;/em&gt;. I do not think the cost outweighs the gain here :)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これに対するより大きな問題は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、その理由&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コストがここでの利益を上回るとは思わない:)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f58cc981739315748cd319c85046ccdfa234e3cd" translate="yes" xml:space="preserve">
          <source>The code isn't nested</source>
          <target state="translated">コードがネストされていない</target>
        </trans-unit>
        <trans-unit id="2b8b76967a2caca71316d6dcba09aade5b7149fb" translate="yes" xml:space="preserve">
          <source>The given example is rather simple, as it's only a &lt;a href=&quot;http://en.wikipedia.org/wiki/Globally_unique_identifier&quot;&gt;&lt;code&gt;GUID&lt;/code&gt;&lt;/a&gt;. But imagine code where you modify an object multiple times, and if one of the manipulations fail in an expected way, you want to &quot;reset&quot; the &lt;code&gt;object&lt;/code&gt;. However, if there is an unexpected exception, I still want to throw that higher.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与えられた例は、単なる&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Globally_unique_identifier&quot;&gt; &lt;code&gt;GUID&lt;/code&gt; である&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、かなり単純&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、オブジェクトを複数回変更するコードを想像してください。操作の1つが予期した方法で失敗した場合は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を「リセット」する必要があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、予期しない例外が発生した場合でも、さらに高くしたいと思います。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d50d11a893fba32da9b37c41ce8ed5904f8bc553" translate="yes" xml:space="preserve">
          <source>The maintenance phase, for anyone who might be relatively new to programming, is going to comprise 98.7% or more of the overall lifetime of your project, and the poor schmuck doing the maintenance is almost certainly going to be someone other than you. And there is a very good chance they will spend 50% of their time on the job cursing your name.</source>
          <target state="translated">メンテナンスの段階では、プログラミングに比較的慣れていない人にとっては、プロジェクトの全寿命の98.7%以上を占めることになります。そして、彼らがあなたの名前を罵りながら仕事をしている時間の50%を過ごす可能性が非常に高いのです。</target>
        </trans-unit>
        <trans-unit id="f61c0731b8f8a19c626811dc48dad3864d3e64a0" translate="yes" xml:space="preserve">
          <source>The obvious disadvantages for this are that we cannot re-throw properly, and -well let's be honest- that it's quite the ugly solution. The uglyness can be fixed a bit by performing branch elimination, which makes the solution slightly better:</source>
          <target state="translated">この場合の明らかな欠点は、適切な再投ができないことと、正直言って、かなり醜い解答になってしまうことです。この醜さは、分岐消去を実行することで少しは修正できます。</target>
        </trans-unit>
        <trans-unit id="b53b26658767f7dd6c482127876a53fe82bf3174" translate="yes" xml:space="preserve">
          <source>The reason that this won't compile is quite obvious: what type and value would the '$exception' object have (which are here stored in the variables 'e')? The way we want the compiler to handle this is to note that the common base type of both exceptions is 'Exception', use that for a variable to contain both exceptions, and then handle only the two exceptions that are caught. The way this is implemented in IL is as 'filter', which is available in VB.Net.</source>
          <target state="translated">これがコンパイルできない理由は明白です。コンパイラがこれを処理する方法は、両方の例外の共通の基本型が 'Exception' であることに注意し、それを変数に使用して両方の例外を格納し、キャッチされた2つの例外のみを処理することです。これをILで実装する方法は'filter'で、VB.Netで利用可能です。</target>
        </trans-unit>
        <trans-unit id="7c628a163cc1b537d3685215329c5d7321e035cc" translate="yes" xml:space="preserve">
          <source>The reason we want this is because we don't want the exception handler to catch things that we need later on in the process. Sure, we can catch an Exception and check with an 'if' what to do, but let's be honest, we don't really want that. (FxCop, debugger issues, uglyness)</source>
          <target state="translated">なぜこれが必要なのかというと、プロセスの後半で必要なものを例外ハンドラにキャッチさせたくないからです。確かに、例外をキャッチして「if」で何をすべきかをチェックすることはできますが、正直言って、それは本当に望んでいません。(FxCop,デバッガの問題,不細工さ)</target>
        </trans-unit>
        <trans-unit id="38cf9971eeb919703b567eb892ae4463f4a39305" translate="yes" xml:space="preserve">
          <source>There are a few advantages of inverting the expression:</source>
          <target state="translated">式を反転させることには、いくつかのメリットがあります。</target>
        </trans-unit>
        <trans-unit id="2805d8052ac54e828feb8e44e99582c2fc025010" translate="yes" xml:space="preserve">
          <source>There's no risk of forgetting the 'throw' or 'return' statements that in Joseph's solution are separated from the expression.</source>
          <target state="translated">ジョセフの解答では「投げる」や「返す」の文が式から切り離されていることを忘れてしまう危険性はありません。</target>
        </trans-unit>
        <trans-unit id="5952b23f46d9b0270fef53d9264d1c1c54c042f0" translate="yes" xml:space="preserve">
          <source>This code will catch the &lt;code&gt;Exception&lt;/code&gt; only when it's a &lt;code&gt;InvalidDataException&lt;/code&gt; or &lt;code&gt;ArgumentNullException&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このコードは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;InvalidDataException&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt; &lt;code&gt;ArgumentNullException&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;の場合にのみ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をキャッチし&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4a00e29090c2c1e94dc2959e6bfe7c8589784d0c" translate="yes" xml:space="preserve">
          <source>This is a classic problem every C# developer faces eventually.</source>
          <target state="translated">これは、C#の開発者なら誰もが最終的に直面する古典的な問題です。</target>
        </trans-unit>
        <trans-unit id="c7097eacdf2ef8cb7152d26b733053d7d356d8ad" translate="yes" xml:space="preserve">
          <source>This is a variant of Matt's answer (I feel that this is a bit cleaner)...use a method:</source>
          <target state="translated">これはマットさんの回答の亜種です(少しすっきりした感じがします)...方法を使ってください。</target>
        </trans-unit>
        <trans-unit id="d064d3721c19dbe49384f0cc083a7d861381bfc2" translate="yes" xml:space="preserve">
          <source>This is different from using an &lt;code&gt;if&lt;/code&gt; statement from within the &lt;code&gt;catch&lt;/code&gt; block, using exception filters &lt;strong&gt;will not&lt;/strong&gt; unwind the stack.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;catch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;ブロック&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内から&lt;/font&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステートメント&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とは異なり、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例外フィルター&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;てもスタック&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;巻き戻され&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ac3d44b1b396d47e05b659d56060dba602f9ef49" translate="yes" xml:space="preserve">
          <source>To make it work in C#, we need a temporary variable with the correct 'Exception' base type. To control the flow of the code, we can add some branches. Here goes:</source>
          <target state="translated">C#で動作させるためには、正しい「Exception」ベースの型を持つテンポラリ変数が必要です。コードの流れを制御するために、いくつかのブランチを追加することができます。ここでは、次のようにします。</target>
        </trans-unit>
        <trans-unit id="c51fe20cce0d7eb3f5f99f34d3c1e5b5aba580ac" translate="yes" xml:space="preserve">
          <source>Update 2015-12-15: See &lt;a href=&quot;https://stackoverflow.com/a/22864936/1718702&quot;&gt;https://stackoverflow.com/a/22864936/1718702&lt;/a&gt; for C#6. It's a cleaner and now standard in the language.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2015-12-15の更新：&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃6 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;については、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/22864936/1718702&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：//stackoverflow.com/a/22864936/1718702を参照して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これはよりクリーンで、言語の標準となっています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ef54e2ab9573a1dc779ebbc0d5c7ab555e163fd5" translate="yes" xml:space="preserve">
          <source>Wanted to added my short answer to this already long thread.  Something that hasn't been mentioned is the order of precedence of the catch statements, more specifically you need to be aware of the scope of each type of exception you are trying to catch.</source>
          <target state="translated">すでに長いスレッドに短い回答を追加したいと思いました。まだ言及されていないことは、キャッチステートメントの優先順位です。</target>
        </trans-unit>
        <trans-unit id="f657cff0d5b3756ec384f3714196cff6006b0a71" translate="yes" xml:space="preserve">
          <source>What is in the link doesn't answer your question directly, but it's trivial to extend it to look like:</source>
          <target state="translated">リンク先にあるものが直接答えになっていませんが、見た目に拡張するのは些細なことです。</target>
        </trans-unit>
        <trans-unit id="99943cfb5ecf002e5e9ae5a52b8b28cf24b0de74" translate="yes" xml:space="preserve">
          <source>What you could do is use an anonymous function to encapsulate your on-error code, and then call it in those specific catch blocks:</source>
          <target state="translated">何ができるかというと、匿名関数を使ってオンエラーコードをカプセル化し、特定のキャッチブロックで呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="ca80db7575742b27fde65b854b945355d61acbf1" translate="yes" xml:space="preserve">
          <source>When there is more then one &lt;code&gt;true&lt;/code&gt;&lt;code&gt;Exception Filter&lt;/code&gt; - the first one will be accepted:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;true&lt;/code&gt; &lt;code&gt;Exception Filter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が複数ある場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-最初の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;フィルター&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が受け入れられます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7a09fc641433a64a134033646f75d56fd17522d" translate="yes" xml:space="preserve">
          <source>Which leads to the next question,</source>
          <target state="translated">それが次の質問につながる。</target>
        </trans-unit>
        <trans-unit id="eae36f0ce3daef78241f69b2133207bcf3a34e61" translate="yes" xml:space="preserve">
          <source>With C# 7 &lt;a href=&quot;https://stackoverflow.com/a/136038&quot;&gt;the answer from Michael Stum&lt;/a&gt; can be improved while keeping the readability of a switch statement:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃7を使用&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/136038&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と、switchステートメントの読みやすさを維持しながら&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、Michael Stumからの回答を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;改善できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="528302a0747104d2be1351ddb8503984852db552" translate="yes" xml:space="preserve">
          <source>Would putting the entire &lt;code&gt;if&lt;/code&gt; test on one line make it more readable? I don't think so.  I mean, I did have another programmer vehemently argue once long ago that putting more code on one line would make it &quot;run faster.&quot;  But of course he was stark raving nuts. Trying to explain to him (with a straight face--which was challenging) how the interpreter or compiler would break that long line apart into discrete one-instruction-per-line statements--essentially identical to the result if he had gone ahead and just made the code readable instead of trying to out-clever the compiler--had no effect on him whatsoever.  But I digress.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;テスト&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;全体&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を1行にすると、読みやすくなりますか？私はそうは思いません。つまり、私は別のプログラマーに、1行にコードを追加すると「より高速に実行できる」と強く主張していました。しかし、もちろん彼は荒れ狂う猛烈な勢いでした。インタプリタまたはコンパイラがその長い行を個別の1行の1命令のステートメントに分解する方法を（真っ直ぐな顔で-困難である）彼に説明しようとする-先に進んだ場合の結果と本質的に同じコンパイラを巧妙にしようとする代わりに、コードを読みやすくしただけで、コンパイラには何の影響もありませんでした。しかし、私は余談です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="131f753f0d5bbeaa4b9a7cad82488c60f2611438" translate="yes" xml:space="preserve">
          <source>You can also create methods for parsing returning tuples, which aren't available in .NET Framework yet as of version 4.6:</source>
          <target state="translated">また、戻りタプルを解析するためのメソッドを作成することもできますが、これはバージョン4.6の時点ではまだ.NET Frameworkでは利用できません。</target>
        </trans-unit>
        <trans-unit id="f61fac0758d9e743bebe99080ec29731f9ec5c60" translate="yes" xml:space="preserve">
          <source>You can download &lt;a href=&quot;http://www.visualstudio.com/en-us/downloads/visual-studio-2015-downloads-vs.aspx&quot;&gt;Visual Studio 2015&lt;/a&gt; to check this out.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://www.visualstudio.com/en-us/downloads/visual-studio-2015-downloads-vs.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Visual Studio 2015&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ダウンロードして、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これを確認&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1e5e031fbb8dbee194806a598096e8bbb6e5cc91" translate="yes" xml:space="preserve">
          <source>and so on as many as you wish. But you need to do it once and you can use it in all your projects (or, if you created a nuget package we could use it too).</source>
          <target state="translated">といったように、好きなだけの数を書いてください。しかし、それは一度だけで、すべてのプロジェクトで使うことができます (または、nuget パッケージを作成した場合は、私たちもそれを使うことができます)。</target>
        </trans-unit>
        <trans-unit id="139bc28d7f6f0cb680c67b97d63cee5a0af93231" translate="yes" xml:space="preserve">
          <source>in C# 6 the recommended approach is to use Exception Filters, here is an example:</source>
          <target state="translated">C#6では、例外フィルタを使用することが推奨されています。</target>
        </trans-unit>
        <trans-unit id="e163cb1fcc4cf94d0647fa5057c3c5055217b4d7" translate="yes" xml:space="preserve">
          <source>p.s. I haven't put null checks for code simplicity, consider to add parameter validations.</source>
          <target state="translated">p.s.コードを簡単にするためにヌルチェックを入れていないので、パラメータバリデーションの追加を検討してみてください。</target>
        </trans-unit>
        <trans-unit id="b52463a5170e012e085593425db69ddae475562f" translate="yes" xml:space="preserve">
          <source>p.s.2 
If you want to return a value from the catch, it's necessary to do same Catch methods, but with returns and Func instead of Action in parameters.</source>
          <target state="translated">p.s.2 キャッチから値を返したい場合は、同じCatchメソッドを実行する必要がありますが、パラメータにはActionではなくreturnsとFuncを使う必要があります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
