<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/134845">
    <body>
      <group id="134845">
        <trans-unit id="bd9a05fc79dc919ee8f37187136cd170c86ec000" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#&lt;/code&gt; is better than &lt;code&gt;javascript:anything&lt;/code&gt;, but the following is even better:</source>
          <target state="translated">&lt;code&gt;javascript:anything&lt;/code&gt; よりも優れていますが、次の方がさらに優れています。</target>
        </trans-unit>
        <trans-unit id="d13303585dad04c88853285805c96d301ae351ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;a [routerLink]=&quot;&quot; (click)=&quot;passTheSalt()&quot;&amp;gt;Click me&amp;lt;/a&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;a [routerLink]=&quot;&quot; (click)=&quot;passTheSalt()&quot;&amp;gt;Click me&amp;lt;/a&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="66098ba4c05ecdfacd9f658027335da408922dd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'#'&lt;/code&gt; will take the user back to the top of the page, so I usually go with &lt;code&gt;void(0)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'#'&lt;/code&gt; はユーザーをページの先頭に戻すため、通常は &lt;code&gt;void(0)&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="312f97c5a58e6153e44c36e633daf36e3ba7f7a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;javascript:;&lt;/code&gt; also behaves like &lt;code&gt;javascript:void(0);&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;javascript:;&lt;/code&gt; また、 &lt;code&gt;javascript:void(0);&lt;/code&gt; のように動作します。</target>
        </trans-unit>
        <trans-unit id="d630050255eb1447bf20aa08fa1d2d8f3b9370be" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Or you can change the &lt;strong&gt;href&lt;/strong&gt; attribute with JavaScript like:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;または、次のようにJavaScriptで&lt;strong&gt;href&lt;/strong&gt;属性を変更できます。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a1b67b7d55d05fa470b042c000c35c102854a70a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;*Note:&lt;/strong&gt; For dynamically created elements, use:</source>
          <target state="translated">&lt;strong&gt;*注意：&lt;/strong&gt;動的に作成された要素の場合、以下を使用します：</target>
        </trans-unit>
        <trans-unit id="dd18ad4d12234247b1086240c340527f7ff571a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Don't use links for the sole purpose of running JavaScript.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;JavaScriptの実行のみを目的としてリンクを使用しないでください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1ed559f58d1012098e76aa02f5987633940fcf2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HTML&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;HTML&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="45565dc2a4e38dfb88e321711fd07ae8f3e420e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JavaScript&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;JavaScript&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b423dbffd6212f2c51f0b1683e68068ddc8f1493" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reasons:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Reasons:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="279e0a0c57b48964447c3c7b49cb421013744ca1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;or&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;or&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="64a36367510a74320eeb73e9f7eb07284507c67a" translate="yes" xml:space="preserve">
          <source>A blackboxed &lt;em&gt;&lt;a href=&quot;http://documentcloud.github.com/backbone/&quot;&gt;Backbone.js&lt;/a&gt;&lt;/em&gt; example</source>
          <target state="translated">ブラックボックス化された&lt;em&gt;&lt;a href=&quot;http://documentcloud.github.com/backbone/&quot;&gt;Backbone.jsの&lt;/a&gt;&lt;/em&gt;例</target>
        </trans-unit>
        <trans-unit id="37a8070f7c88e3349acd823f028acbc805037eb6" translate="yes" xml:space="preserve">
          <source>A second reason for avoiding &lt;code&gt;#&lt;/code&gt; is that the final &lt;code&gt;return false;&lt;/code&gt; will not execute if the called function throws an error. Hence the developers have to also remember to handle any error appropriately in the called function.</source>
          <target state="translated">&lt;code&gt;#&lt;/code&gt; を回避する2つ目の理由は、最終的 &lt;code&gt;return false;&lt;/code&gt; 呼び出された関数がエラーをスローした場合、実行されません。 したがって、開発者は呼び出された関数でエラーを適切に処理することも忘れてはなりません。</target>
        </trans-unit>
        <trans-unit id="21105a7cdd1e4d498a450d175c3236a8e1dd36cd" translate="yes" xml:space="preserve">
          <source>A third reason is that there are cases where the &lt;code&gt;onclick&lt;/code&gt; event property is assigned dynamically.  I prefer to be able to call a function or assign it dynamically without having to code the function specifically for one method of attachment or another. Hence my &lt;code&gt;onclick&lt;/code&gt; (or on anything) in HTML markup look like this:</source>
          <target state="translated">3番目の理由は、 &lt;code&gt;onclick&lt;/code&gt; イベントプロパティが動的に割り当てられる場合があることです 。 私は、関数を呼び出したり、動的に割り当てたりできるようにしたいのですが、アタッチメントのメソッドごとに関数をコーディングする必要はありません。 したがって、HTMLマークアップの &lt;code&gt;onclick&lt;/code&gt; （または何か）は次のようになります。</target>
        </trans-unit>
        <trans-unit id="a4ed08c4c6145cdd2af098012bc4d6243908855f" translate="yes" xml:space="preserve">
          <source>And at the end, if you are binding the event from the JavaScript code itself, there you can do &lt;code&gt;event.preventDefault()&lt;/code&gt; to achieve this if you are using &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag, but if you are not using a &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag for this, there you get an advantage, you don't need to do this.</source>
          <target state="translated">そして最後に、JavaScriptコード自体からイベントをバインドしている場合、 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; タグを使用している場合は &lt;code&gt;event.preventDefault()&lt;/code&gt; を実行してこれを実現できますが、 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; タグを使用していない場合はこれで、利点が得られます。これを行う必要はありません。</target>
        </trans-unit>
        <trans-unit id="6d47584a657f22627c286c065b01ef0eec3ff30e" translate="yes" xml:space="preserve">
          <source>And for dynamically created elements which are created with dynamically created elements, use:</source>
          <target state="translated">そして、動的に作成された要素で作成された動的に作成された要素には、使用します。</target>
        </trans-unit>
        <trans-unit id="453026dc796aeb6d29ddf8df59d8b46fa665a396" translate="yes" xml:space="preserve">
          <source>And for the HTML, the link is simply</source>
          <target state="translated">そして、HTMLについては、リンクは単純に</target>
        </trans-unit>
        <trans-unit id="95f5aa76b12c67b525c77c3e75be466cc937bf2c" translate="yes" xml:space="preserve">
          <source>And for users with JavaScript disabled: if there isn't a fallback (for example, an alternative &lt;code&gt;href&lt;/code&gt;), they should at least not be able to see and interact with that element at all, whatever it is an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; or a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">また、JavaScriptが無効になっているユーザーの場合：代替がない場合（たとえば、代替 &lt;code&gt;href&lt;/code&gt; ）、ユーザーは、 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; タグ。</target>
        </trans-unit>
        <trans-unit id="e88eec5c27cba3632c0d40e5cbd3edd4fd8e378c" translate="yes" xml:space="preserve">
          <source>And style it with CSS:</source>
          <target state="translated">そしてCSSでスタイルを整えます。</target>
        </trans-unit>
        <trans-unit id="35a844c6a80cfc07cc920daac48c12d3b58f5465" translate="yes" xml:space="preserve">
          <source>But I'm using that just for preventing the page jumping to the top when the user clicks on an empty anchor. I'm rarely using onClick and other &lt;code&gt;on&lt;/code&gt; events directly in HTML.</source>
          <target state="translated">しかし、ユーザーが空のアンカーをクリックしたときにページが最上部にジャンプするのを防ぐためだけにそれを使用しています。 onClickなどのイベントを直接HTMLで直接使用することはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="99a146f23e49914b10a58de2f533ddb845149264" translate="yes" xml:space="preserve">
          <source>But semantically, all the above ways to achieve this are wrong &lt;em&gt;(it works fine though)&lt;/em&gt;. If any element is not created to navigate the page and that have some JavaScript things associated with it, then it should not be a &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">しかし、意味的には、これを達成するための上記の方法はすべて間違っています&lt;em&gt;（ただし、うまくいきます）&lt;/em&gt; 。 ページをナビゲートするための要素が作成されておらず、それに関連付けられたJavaScriptの要素がある場合、それは &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; タグであってはなりません。</target>
        </trans-unit>
        <trans-unit id="fbd07b5abfd55cfe055cb14acc954e5ad57b454b" translate="yes" xml:space="preserve">
          <source>But then they forget to use &lt;code&gt;return doSomething()&lt;/code&gt; in the onclick and just use &lt;code&gt;doSomething()&lt;/code&gt;.</source>
          <target state="translated">しかし、onclickで &lt;code&gt;return doSomething()&lt;/code&gt; を使用するのを忘れて、 doSomething（）を使用するだけです。</target>
        </trans-unit>
        <trans-unit id="b42a1500b25c0660b57181b19c01d4b3eb7c6fbf" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;return false;&lt;/code&gt;, the page doesn't jump to the top or break the &lt;code&gt;back&lt;/code&gt; button.</source>
          <target state="translated">&lt;code&gt;return false;&lt;/code&gt; を使用することにより、 、ページが一番上にジャンプしたり、 &lt;code&gt;back&lt;/code&gt; ボタンを壊したりしない。</target>
        </trans-unit>
        <trans-unit id="fdc74074ca47c21bd3b21b6aeb8f256f90c8e2c9" translate="yes" xml:space="preserve">
          <source>Check out &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Unobtrusive_JavaScript&quot;&gt;Unobtrusive JavaScript&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Progressive_enhancement&quot;&gt;Progressive enhancement&lt;/a&gt;&lt;/em&gt; (both Wikipedia).</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Unobtrusive_JavaScript&quot;&gt;邪魔にならないJavaScript&lt;/a&gt;&lt;/em&gt;と&lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Progressive_enhancement&quot;&gt;プログレッシブ拡張&lt;/a&gt;&lt;/em&gt; （両方のWikipedia）を調べてください。</target>
        </trans-unit>
        <trans-unit id="a2b39636986a25ff8379e8d673a9d2a172edde07" translate="yes" xml:space="preserve">
          <source>Definitely hash (&lt;code&gt;#&lt;/code&gt;) is better because in JavaScript it is a pseudoscheme:</source>
          <target state="translated">JavaScriptでは疑似スキームであるため、ハッシュ（ &lt;code&gt;#&lt;/code&gt; ）は間違いなく優れています。</target>
        </trans-unit>
        <trans-unit id="ab225a03db28555ac74d12a43409554a8e1d0685" translate="yes" xml:space="preserve">
          <source>Depending on what you want to accomplish, you could forget the onclick and just use the href:</source>
          <target state="translated">何を達成したいかによっては、onclickを忘れてhrefだけにすることもできます。</target>
        </trans-unit>
        <trans-unit id="ccfb7f94fd7eac312a70ee0ec8cd7a643243d3cf" translate="yes" xml:space="preserve">
          <source>Doing &lt;code&gt;&amp;lt;a href=&quot;#&quot; onclick=&quot;myJsFunc();&quot;&amp;gt;Link&amp;lt;/a&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;myJsFunc();&quot;&amp;gt;Link&amp;lt;/a&amp;gt;&lt;/code&gt; or whatever else that contains an &lt;code&gt;onclick&lt;/code&gt; attribute - was okay back five years ago, though now it can be a bad practice. Here's why:</source>
          <target state="translated">&lt;code&gt;&amp;lt;a href=&quot;#&quot; onclick=&quot;myJsFunc();&quot;&amp;gt;Link&amp;lt;/a&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;myJsFunc();&quot;&amp;gt;Link&amp;lt;/a&amp;gt;&lt;/code&gt; または &lt;code&gt;onclick&lt;/code&gt; 属性を含む他のものは何でも-5年前は大丈夫でしたが、今では悪い習慣になる可能性があります。 理由は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d7e4b16f963f46e303d8129da25ee4fda74df07e" translate="yes" xml:space="preserve">
          <source>Example... Let's say you have the following search link:</source>
          <target state="translated">例...以下のような検索リンクがあるとします。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">スニペットを展開</target>
        </trans-unit>
        <trans-unit id="256b34ae5bf64fd1e7c412983943787c254f3234" translate="yes" xml:space="preserve">
          <source>For a scalable, blackboxed, Backbone.js component example - &lt;em&gt;&lt;a href=&quot;http://jsfiddle.net/balupton/sTzdD/&quot;&gt;see this working jsfiddle example here&lt;/a&gt;&lt;/em&gt;. Notice how we utilize unobtrusive JavaScript practices, and in a tiny amount of code have a component that can be repeated across the page multiple times without side-effects or conflicts between the different component instances. Amazing!</source>
          <target state="translated">スケーラブルでブラックボックス化されたBackbone.jsコンポーネントの例&lt;em&gt;&lt;a href=&quot;http://jsfiddle.net/balupton/sTzdD/&quot;&gt;については、こちらのjsfiddleの動作例をご覧ください&lt;/a&gt;&lt;/em&gt; 。 控えめなJavaScriptプラクティスをどのように利用しているかに注意してください。少量のコードで、異なるコンポーネントインスタンス間の副作用や競合なしにページ全体で複数回繰り返すことができるコンポーネントがあります。 すごい！</target>
        </trans-unit>
        <trans-unit id="9f738ce8457f291b18ee47e665e96baa84f38fcd" translate="yes" xml:space="preserve">
          <source>HTML</source>
          <target state="translated">HTML</target>
        </trans-unit>
        <trans-unit id="11dc542c0ffeed8b41bad901e2044f438e4ab0e5" translate="yes" xml:space="preserve">
          <source>HTML:</source>
          <target state="translated">HTML:</target>
        </trans-unit>
        <trans-unit id="bfe5704ee66566a95b73c5b240c85d48233a0c03" translate="yes" xml:space="preserve">
          <source>Here is a sample. Home/ChangePicture is a working link to a form on a page complete with user interface and standard HTML submit buttons, but it looks nicer injected into a modal dialog with jQueryUI buttons. Either way works, depending on the browser, which satisfies mobile first development.</source>
          <target state="translated">ここにサンプルがあります。HomeChangePictureは、ユーザーインターフェイスと標準的なHTMLの送信ボタンを備えたページ上のフォームへのリンクですが、jQueryUIボタンを備えたモーダルダイアログに注入した方が見栄えが良いです。どちらの方法でもブラウザに依存しますが、モバイルファーストの開発を満足させることができます。</target>
        </trans-unit>
        <trans-unit id="48a45ae35adf7aefdc4234047465cfabe67b39db" translate="yes" xml:space="preserve">
          <source>Here's &lt;strong&gt;&lt;a href=&quot;http://jsFiddle.net/mdesdev/Dn8YT/&quot;&gt;a jsFiddle&lt;/a&gt;&lt;/strong&gt; example of above aforementioned.</source>
          <target state="translated">上記の&lt;strong&gt;&lt;a href=&quot;http://jsFiddle.net/mdesdev/Dn8YT/&quot;&gt;jsFiddleの&lt;/a&gt;&lt;/strong&gt;例を&lt;strong&gt;次に&lt;/strong&gt;示します。</target>
        </trans-unit>
        <trans-unit id="af0f247bdfb76d39157de73b38f8c569f1bed9c5" translate="yes" xml:space="preserve">
          <source>I agree with Mr. D4V360 who suggested that, even though you are using the anchor tag, you do not truly have an anchor here. All you have is a special section of a document that should behave slightly different. A &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tag is far more appropriate.</source>
          <target state="translated">アンカータグを使用しているのに、ここにアンカーが存在しないというD4V360氏に同意します。 あなたが持っているのはわずかに異なる動作をするはずのドキュメントの特別なセクションです。 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; タグの方がはるかに適切です。</target>
        </trans-unit>
        <trans-unit id="8b66ccf07b47db554765f27b6c481f900714e083" translate="yes" xml:space="preserve">
          <source>I agree with suggestions elsewhere stating that you should use regular URL in &lt;code&gt;href&lt;/code&gt; attribute, then call some JavaScript function in onclick. The flaw is, that they automaticaly add &lt;code&gt;return false&lt;/code&gt; after the call.</source>
          <target state="translated">他の場所で &lt;code&gt;href&lt;/code&gt; 属性に通常のURLを使用し、onclickでJavaScript関数を呼び出す必要があるとの提案に同意します。 欠点は、呼び出し後に自動的に &lt;code&gt;return false&lt;/code&gt; を返すことです。</target>
        </trans-unit>
        <trans-unit id="a380124779a6a974fd92f45c584ebee1075ab8a7" translate="yes" xml:space="preserve">
          <source>I believe you are presenting a false dichotomy. These are not the only two options.</source>
          <target state="translated">あなたは間違った二項対立を提示していると思います。これらは唯一の2つの選択肢ではありません。</target>
        </trans-unit>
        <trans-unit id="a95f583000a6d6471c45baf0530d2dddf28a9013" translate="yes" xml:space="preserve">
          <source>I choose use &lt;code&gt;javascript:void(0)&lt;/code&gt;, because use this could prevent right click to open the content menu. But &lt;code&gt;javascript:;&lt;/code&gt; is shorter and does the same thing.</source>
          <target state="translated">&lt;code&gt;javascript:void(0)&lt;/code&gt; を使用することを選択します。これを使用すると、右クリックでコンテンツメニューを開くことができなくなる可能性があるためです。 しかし、 &lt;code&gt;javascript:;&lt;/code&gt; より短く、同じことを行います。</target>
        </trans-unit>
        <trans-unit id="96087e21f2dbf7911c372442be487eb14f5a264d" translate="yes" xml:space="preserve">
          <source>I don't like using Hash-Tags unless they're used for anchors, and I only do the above when I've got more than two faux-links, otherwise I go with javascript:void(0).</source>
          <target state="translated">アンカーに使われない限りハッシュタグを使うのは好きではありませんし、上記のようなことをするのは2つ以上のフェイクリンクがあるときだけで、そうでない場合はjavascript:void(0)を使います。</target>
        </trans-unit>
        <trans-unit id="e1768468b361fab43f929b120179e50e5000f5c3" translate="yes" xml:space="preserve">
          <source>I personally use them in combination. For example:</source>
          <target state="translated">個人的には組み合わせて使っています。例えば</target>
        </trans-unit>
        <trans-unit id="1f0983da23d5be03a8b645a4411ddd3ac7bc75ec" translate="yes" xml:space="preserve">
          <source>I realize this isn't always possible, but in my opinion it should be striven for in developing any public website.</source>
          <target state="translated">これは必ずしも可能なことではないと思いますが、私の考えでは、どのような公開サイトを開発するにしても努力すべきことだと思います。</target>
        </trans-unit>
        <trans-unit id="58b87b45b40fd41bb411d996f2114853bdb955b8" translate="yes" xml:space="preserve">
          <source>I recommend using a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element instead, &lt;em&gt;especially&lt;/em&gt; if the control is supposed to produce a change in the data. (Something like a POST.)</source>
          <target state="translated">&lt;em&gt;特に&lt;/em&gt;コントロールがデータの変更を生成することになっている場合は、代わりに &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 要素を使用することをお勧めします。 （POSTのようなもの。）</target>
        </trans-unit>
        <trans-unit id="0659955dd4df5923a30ee6d5913674dc5d8e2b01" translate="yes" xml:space="preserve">
          <source>I tried both in google chrome with the developer tools, and the &lt;code&gt;id=&quot;#&quot;&lt;/code&gt; took 0.32 seconds. While the &lt;code&gt;javascript:void(0)&lt;/code&gt; method took only 0.18 seconds. So in google chrome, &lt;code&gt;javascript:void(0)&lt;/code&gt; works better and faster.</source>
          <target state="translated">開発者ツールを使用してGoogle Chromeで両方を試したところ、 &lt;code&gt;id=&quot;#&quot;&lt;/code&gt; に0.32秒かかりました。 一方、 &lt;code&gt;javascript:void(0)&lt;/code&gt; メソッドは0.18秒しかかかりませんでした。 したがって、Google Chromeでは、 &lt;code&gt;javascript:void(0)&lt;/code&gt; がより適切に、より高速に動作します。</target>
        </trans-unit>
        <trans-unit id="5109866b7d3389f201821ad19d4d064cc956b926" translate="yes" xml:space="preserve">
          <source>I use &lt;code&gt;javascript:void(0)&lt;/code&gt;.</source>
          <target state="translated">私は &lt;code&gt;javascript:void(0)&lt;/code&gt; を使用しています。</target>
        </trans-unit>
        <trans-unit id="c172eebb89e95daca91530697b9af96397c94df8" translate="yes" xml:space="preserve">
          <source>I use the following</source>
          <target state="translated">私は以下のように使用しています。</target>
        </trans-unit>
        <trans-unit id="57cf8845fa007adeab3a5acc415f45fd1bb1846a" translate="yes" xml:space="preserve">
          <source>I usually go for</source>
          <target state="translated">いつもは</target>
        </trans-unit>
        <trans-unit id="eb7c88cfddb1e942897629653e455a623a4de90f" translate="yes" xml:space="preserve">
          <source>I would honestly suggest neither.  I would use a stylized &lt;code&gt;&amp;lt;button&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt; for that behavior.</source>
          <target state="translated">どちらも正直にお勧めします。 私はその動作に様式化された &lt;code&gt;&amp;lt;button&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="3abe3dddf2b07b6bfdae8fdc108601add56c4f34" translate="yes" xml:space="preserve">
          <source>I would use:</source>
          <target state="translated">私なら使います。</target>
        </trans-unit>
        <trans-unit id="804270c45f2c120a3a97bbb1e763a5eaffcbd795" translate="yes" xml:space="preserve">
          <source>I'm basically paraphrasing from &lt;a href=&quot;http://www.matthidinger.com/archive/2011/02/22/Progressive-enhancement-tutorial-with-ASP-NET-MVC-3-and-jQuery.aspx&quot;&gt;this practical article using progressive enhancement&lt;/a&gt;. &lt;strong&gt;The short answer is that you never use &lt;code&gt;javascript:void(0);&lt;/code&gt; or &lt;code&gt;#&lt;/code&gt; unless your user interface has already inferred that JavaScript is enabled, in which case you should use &lt;code&gt;javascript:void(0);&lt;/code&gt;&lt;/strong&gt;. Also, do not use span as links, since that is semantically false to begin with.</source>
          <target state="translated">私は基本的に、 &lt;a href=&quot;http://www.matthidinger.com/archive/2011/02/22/Progressive-enhancement-tutorial-with-ASP-NET-MVC-3-and-jQuery.aspx&quot;&gt;この実用的な記事&lt;/a&gt;からプログレッシブエンハンスメントを使用して言い換えています。 &lt;strong&gt;簡単に言えば、 &lt;code&gt;javascript:void(0);&lt;/code&gt; を使用することはありません。&lt;/strong&gt; &lt;strong&gt;または &lt;code&gt;#&lt;/code&gt; ユーザーインターフェースがJavaScriptが有効になっていることをすでに推論していない限り、 &lt;code&gt;javascript:void(0);&lt;/code&gt; を使用する必要があります。&lt;/strong&gt; 。 また、スパンをリンクとして使用しないでください。これは、最初は意味的にfalseであるためです。</target>
        </trans-unit>
        <trans-unit id="6d5d36429acbb4b8b2f395fbbdf6acc6a3c38a0b" translate="yes" xml:space="preserve">
          <source>Ideally you'd do this:</source>
          <target state="translated">理想はこれだな</target>
        </trans-unit>
        <trans-unit id="00d2f854e6bdeb1c870bd9dbb5045f67d2c0bbe3" translate="yes" xml:space="preserve">
          <source>If that is not possible, then you should at least inject the anchor tag into the document with JavaScript and the appropriate click event handlers.</source>
          <target state="translated">それが不可能な場合は、少なくともJavaScriptと適切なクリックイベントハンドラでアンカータグをドキュメントに注入する必要があります。</target>
        </trans-unit>
        <trans-unit id="212472301315975ffd2e37b699dd3653d5d7ab0b" translate="yes" xml:space="preserve">
          <source>If there is no &lt;code&gt;href&lt;/code&gt; maybe there is no reason to use an anchor tag.</source>
          <target state="translated">&lt;code&gt;href&lt;/code&gt; がない場合、おそらくアンカータグを使用する理由はありません。</target>
        </trans-unit>
        <trans-unit id="3fbd40c242c40cb0b3c6722827bfd1390a74dc28" translate="yes" xml:space="preserve">
          <source>If you &lt;em&gt;MUST&lt;/em&gt; use an A element, use &lt;code&gt;javascript:void(0);&lt;/code&gt; for reasons already mentioned.</source>
          <target state="translated">A要素を使用する必要がある場合&lt;em&gt;は&lt;/em&gt; 、 &lt;code&gt;javascript:void(0);&lt;/code&gt; を使用してください。 すでに述べた理由のため。</target>
        </trans-unit>
        <trans-unit id="28d7882ac4e01aeaa34e02649f7788fc7aad6938" translate="yes" xml:space="preserve">
          <source>If you can have an actual URL that makes sense use that as the HREF.  The onclick won't fire if someone middle-clicks on your link to open a new tab or if they have JavaScript disabled.</source>
          <target state="translated">意味のある実際のURLがあれば、それをHREFとして使用してください。誰かがあなたのリンクをミドルクリックして新しいタブを開いた場合や、JavaScriptを無効にしている場合には、クリックしてもクリックされません。</target>
        </trans-unit>
        <trans-unit id="de669b86638dcf73ae3668a5c38687eddd030088" translate="yes" xml:space="preserve">
          <source>If you happen to be using &lt;a href=&quot;http://angularjs.org/&quot;&gt;&lt;strong&gt;AngularJS&lt;/strong&gt;&lt;/a&gt;, you can use the following:</source>
          <target state="translated">&lt;a href=&quot;http://angularjs.org/&quot;&gt;&lt;strong&gt;AngularJS&lt;/strong&gt;&lt;/a&gt;を使用している場合は、以下を使用できます。</target>
        </trans-unit>
        <trans-unit id="804f3288dea9da73c4359b16a93c611d804ee543" translate="yes" xml:space="preserve">
          <source>If you use Angular2, this way works:</source>
          <target state="translated">Angular2を使用している場合は、この方法が有効です。</target>
        </trans-unit>
        <trans-unit id="ad5929b44b8b9854ce64c2375d1bc9cc7608ddf0" translate="yes" xml:space="preserve">
          <source>If you want your action to still work with JavaScript disabled, then using an &lt;code&gt;a&lt;/code&gt; element with a &lt;code&gt;href&lt;/code&gt; attribute that goes to some URL that will perform the action manually instead of via an Ajax request or whatever should be the way to go. If you are doing this, then you want to ensure you do an &lt;code&gt;event.preventDefault()&lt;/code&gt; on your click call to make sure when the button is clicked it does not follow the link. This option is called graceful degradation.</source>
          <target state="translated">JavaScriptを無効にしてもアクションを機能させたい場合は、Ajaxリクエストなどを経由する代わりに手動でアクションを実行するURLに移動する &lt;code&gt;href&lt;/code&gt; 属性を持つ &lt;code&gt;a&lt;/code&gt; 要素を使用します。 これを行っている場合は、クリック呼び出しで &lt;code&gt;event.preventDefault()&lt;/code&gt; を実行して、ボタンがクリックされたときにリンクをたどらないようにする必要があります。 このオプションは、グレースフルデグラデーションと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="32737c28e056736b9f71e199ea71ce66c890d6e0" translate="yes" xml:space="preserve">
          <source>If your &quot;link&quot; has the sole purpose of running some JavaScript code it doesn't qualify as a link; rather a piece of text with a JavaScript function coupled to it. I would recommend to use a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tag with an &lt;code&gt;onclick handler&lt;/code&gt; attached to it and some basic CSS to immitate a link. Links are made for navigation, and if your JavaScript code isn't for navigation it should not be an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">「リンク」がJavaScriptコードを実行することのみを目的としている場合は、リンクと見なされません。 JavaScript関数が結合されたテキストの一部です。 リンクを模倣するために、 &lt;code&gt;onclick handler&lt;/code&gt; 付加された &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; タグといくつかの基本的なCSSを使用することをお勧めします。 リンクはナビゲーション用に作成されます。JavaScriptコードがナビゲーション用でない場合は、 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; タグであってはなりません。</target>
        </trans-unit>
        <trans-unit id="46e3a38016d86ba7214b26757c2cfc95f05dd8d8" translate="yes" xml:space="preserve">
          <source>In addition</source>
          <target state="translated">さらに</target>
        </trans-unit>
        <trans-unit id="de626ba3c47bd3e6c70f8fa7b92ad16e7ab1df22" translate="yes" xml:space="preserve">
          <source>In addition, regarding cowgod's suggestion, particularly this: &lt;code&gt;...href=&quot;javascript_required.html&quot; onclick=&quot;...&lt;/code&gt; This is good approach, but it doesn't distinguish between &quot;JavaScript disabled&quot; and &quot;onclick fails&quot; scenarios.</source>
          <target state="translated">さらに、Cowgodの提案、特にこれについて： &lt;code&gt;...href=&quot;javascript_required.html&quot; onclick=&quot;...&lt;/code&gt; これは良いアプローチですが、「JavaScriptが無効」と「onclickが失敗する」シナリオを区別しません。</target>
        </trans-unit>
        <trans-unit id="5f4095b56e1965992a00ffe2c85250cb05dcfc85" translate="yes" xml:space="preserve">
          <source>Instead, use an element other than a link:</source>
          <target state="translated">代わりに、リンク以外の要素を使用します。</target>
        </trans-unit>
        <trans-unit id="3a64ed76369a90aa5c918a8b11d861c017006fa9" translate="yes" xml:space="preserve">
          <source>It gets around the need to return false. I don't like the &lt;code&gt;#&lt;/code&gt; option because, as mentioned, it will take the user to the top of the page. If you have somewhere else to send the user if they don't have JavaScript enabled (which is rare where I work, but a very good idea), then Steve's proposed method works great.</source>
          <target state="translated">falseを返す必要性を回避します。 前述のように、ユーザーがページの上部に移動するため、 &lt;code&gt;#&lt;/code&gt; オプションは好きではありません。 JavaScriptが有効になっていない場合にユーザーを送信する別の場所がある場合（これは私が作業する場所ではめったにありませんが、非常に良いアイデアです）、Steveの提案する方法はうまく機能します。</target>
        </trans-unit>
        <trans-unit id="4aba6ab3ebf5c70f336816f81bd49cb9be79da3b" translate="yes" xml:space="preserve">
          <source>It is short an concise</source>
          <target state="translated">それは短く簡潔である</target>
        </trans-unit>
        <trans-unit id="05d248935f7dfb7c2986856b90ff8132ad46390c" translate="yes" xml:space="preserve">
          <source>It promotes the practice of obtrusive JavaScript - which has turned out to be difficult to maintain and difficult to scale. More on this in &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Unobtrusive_JavaScript&quot;&gt;Unobtrusive JavaScript&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">それは邪魔なJavaScriptの実践を促進します-それは維持するのが難しく、スケーリングするのが難しいことが判明しました。 詳細については、 &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Unobtrusive_JavaScript&quot;&gt;控えめなJavaScriptを&lt;/a&gt;&lt;/em&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="78ab3661fb4274583e571731590054b5ccbe8d86" translate="yes" xml:space="preserve">
          <source>It will not take you to the top of the page, as with (#)</source>
          <target state="translated">(#)のようにページの先頭には移動しません。</target>
        </trans-unit>
        <trans-unit id="ee0a7d8c1d6e41002b515104d36b8e33adec0a88" translate="yes" xml:space="preserve">
          <source>It would be better to use jQuery,</source>
          <target state="translated">jQueryを使った方が良いと思います。</target>
        </trans-unit>
        <trans-unit id="c7829ed128c64788f09241792585b6b6ca508330" translate="yes" xml:space="preserve">
          <source>It's even better if you inject the elements unobtrusively, a type of progressive enhancement. (See &lt;a href=&quot;https://stackoverflow.com/questions/134845/href-for-javascript-links-or-javascriptvoid0#134957&quot;&gt;this comment&lt;/a&gt;.)</source>
          <target state="translated">要素を目立たないように注入すると、さらに効果的です。 （ &lt;a href=&quot;https://stackoverflow.com/questions/134845/href-for-javascript-links-or-javascriptvoid0#134957&quot;&gt;このコメントを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="d7a3fa77b0b23097c1a73962b4a6a268909df9fd" translate="yes" xml:space="preserve">
          <source>It's shorter than javascript:void(0) and does the same.</source>
          <target state="translated">javascript:void(0)よりも短く、同じことをします。</target>
        </trans-unit>
        <trans-unit id="cfb6fdf6dd9570afa354dfcf688c4ee6c87c5367" translate="yes" xml:space="preserve">
          <source>JavaScript:</source>
          <target state="translated">JavaScript:</target>
        </trans-unit>
        <trans-unit id="027d0cca50d0abcf3c970c19a2fc5d77ab3580f5" translate="yes" xml:space="preserve">
          <source>Just don't have a &lt;code&gt;href&lt;/code&gt; attribute at all! Any good CSS reset would take care of the missing default cursor style, so that is a non-issue. Then attach your JavaScript functionality using graceful and unobtrusive  best practices - which are more maintainable as your JavaScript logic stays in JavaScript, instead of in your markup - which is essential when you start developing large scale JavaScript applications which require your logic to be split up into blackboxed components and templates. More on this in &lt;em&gt;&lt;a href=&quot;http://speakerdeck.com/u/addyosmani/p/large-scale-javascript-application-architecture&quot;&gt;Large-scale JavaScript Application Architecture&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">まったく &lt;code&gt;href&lt;/code&gt; 属性を持たないでください！ CSSを適切にリセットすると、欠落しているデフォルトのカーソルスタイルが処理されるため、問題はありません。 次に、優雅で控えめなベストプラクティスを使用してJavaScript機能をアタッチします。これは、JavaScriptロジックがマークアップではなくJavaScriptに留まるため、より保守しやすくなります。これは、ロジックを分割する必要がある大規模なJavaScriptアプリケーションの開発を始めるときに不可欠です。ブラックボックス化されたコンポーネントとテンプレート。 &lt;em&gt;&lt;a href=&quot;http://speakerdeck.com/u/addyosmani/p/large-scale-javascript-application-architecture&quot;&gt;大規模なJavaScriptアプリケーションアーキテクチャの詳細&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e79d804ae4c4d2418313f51b0a6c22f6469d32c6" translate="yes" xml:space="preserve">
          <source>Lastly, you can use &lt;code&gt;javascript:void(0)&lt;/code&gt; if you do not want anyone to go anywhere and if you don't want to call a JavaScript function. It works great if you have an image you want a mouseover event to happen with, but there's not anything for the user to click on.</source>
          <target state="translated">最後に、誰にも行きたくない場合、およびJavaScript関数を呼び出したくない場合は、 &lt;code&gt;javascript:void(0)&lt;/code&gt; を使用できます。 マウスオーバーイベントを発生させたい画像がある場合にうまく機能しますが、ユーザーがクリックするものは何もありません。</target>
        </trans-unit>
        <trans-unit id="98be2b1aaa56ea07d84773c494e9efaa717f0c18" translate="yes" xml:space="preserve">
          <source>My suggestion would be to use &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; element with the &lt;code&gt;class&lt;/code&gt; attribute instead of
an anchor. For example:</source>
          <target state="translated">私の提案は、アンカーの代わりに &lt;code&gt;class&lt;/code&gt; 属性を持つ &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 要素を使用することです。 例えば：</target>
        </trans-unit>
        <trans-unit id="1859e04da42645894d4f5a8456f449d16a579623" translate="yes" xml:space="preserve">
          <source>NOTE: You can replace the &lt;code&gt;0&lt;/code&gt; with a string such as &lt;code&gt;javascript:void('Delete record 123')&lt;/code&gt; which can serve as an extra indicator that will show what the click will actually do.</source>
          <target state="translated">注： &lt;code&gt;0&lt;/code&gt; を &lt;code&gt;javascript:void('Delete record 123')&lt;/code&gt; などの文字列に置き換えることができます。これは、クリックが実際に何を行うかを示す追加のインジケーターとして機能します。</target>
        </trans-unit>
        <trans-unit id="7d64ff37b1b1bbb318463de427a0b3e65aad1b34" translate="yes" xml:space="preserve">
          <source>Neither if you ask me;</source>
          <target state="translated">私に言わせればどちらでもない</target>
        </trans-unit>
        <trans-unit id="6408fac84dc551a699a1e0a8a0ec23490893a171" translate="yes" xml:space="preserve">
          <source>Neither.</source>
          <target state="translated">Neither.</target>
        </trans-unit>
        <trans-unit id="a4fe7b7b3fdc67415aec63114e067b36a0e3da5d" translate="yes" xml:space="preserve">
          <source>Note, that I negate the result of the &lt;code&gt;doSomething()&lt;/code&gt; function. If it works, it will return &lt;code&gt;true&lt;/code&gt;, so it will be negated (&lt;code&gt;false&lt;/code&gt;) and the &lt;code&gt;path/to/some/URL&lt;/code&gt; will not be called. If the function will return &lt;code&gt;false&lt;/code&gt; (for example, the browser doesn't support something used within the function or anything else goes wrong), it is negated to &lt;code&gt;true&lt;/code&gt; and the &lt;code&gt;path/to/some/URL&lt;/code&gt; is called.</source>
          <target state="translated">なお、 &lt;code&gt;doSomething()&lt;/code&gt; 関数の結果は無効になっています。 機能する場合は &lt;code&gt;true&lt;/code&gt; を返すため、否定され（ &lt;code&gt;false&lt;/code&gt; ）、 &lt;code&gt;path/to/some/URL&lt;/code&gt; は呼び出されません。 関数が &lt;code&gt;false&lt;/code&gt; を返す場合（たとえば、ブラウザーが関数内で使用されているものをサポートしていないか、何かがうまくいかない場合）、関数は &lt;code&gt;true&lt;/code&gt; に否定され、 &lt;code&gt;path/to/some/URL&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="f579c523960af1aec824c6fdc57af6d4abd76a1f" translate="yes" xml:space="preserve">
          <source>OR</source>
          <target state="translated">OR</target>
        </trans-unit>
        <trans-unit id="b4b28229212dbfad05165a5bcaa2d9543543dc27" translate="yes" xml:space="preserve">
          <source>Of course &quot;#&quot; with an onclick handler which prevents default action is [much] better. Moreover, a link that has the sole purpose to run JavaScript is not really &quot;a link&quot; unless you are sending user to some sensible anchor on the page (just # will send to top) when something goes wrong. You can simply simulate look and feel of link with stylesheet and forget about href at all.</source>
          <target state="translated">もちろん、デフォルトの動作を防ぐオンクリックハンドラを持つ &quot;#&quot;の方が[はるかに]良いです。さらに、JavaScriptを実行することだけを目的としたリンクは、何か問題が発生したときにユーザーをページ上の適切なアンカーに送るのでなければ、本当の意味での「リンク」ではありません(#はトップに送られるだけです)。スタイルシートでリンクのルックアンドフィールをシミュレートすればいいし、hrefのことは全く忘れてもいい。</target>
        </trans-unit>
        <trans-unit id="3f89a0eec1da10518de63068696e628968159d46" translate="yes" xml:space="preserve">
          <source>Omitting the &lt;code&gt;href&lt;/code&gt; attribute on the &lt;code&gt;a&lt;/code&gt; element will cause &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_6&quot;&gt;Internet&amp;nbsp;Explorer&amp;nbsp;6&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_7&quot;&gt;Internet&amp;nbsp;Explorer&amp;nbsp;7&lt;/a&gt; to not take on the &lt;code&gt;a:hover&lt;/code&gt; styling, which is why we have added a simple JavaScript shim to accomplish this via &lt;code&gt;a.hover&lt;/code&gt; instead. Which is perfectly okay, as if you don't have a href attribute and no graceful degradation then your link won't work anyway - and you'll have bigger issues to worry about.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 要素の &lt;code&gt;href&lt;/code&gt; 属性を省略すると、 &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_6&quot;&gt;Internet Explorer 6&lt;/a&gt;と&lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_7&quot;&gt;Internet Explorer 7&lt;/a&gt;が &lt;code&gt;a:hover&lt;/code&gt; &lt;code&gt;a.hover&lt;/code&gt; を適用しなくなります。そのため、代わりにa.hoverを介してこれを実現する単純なJavaScriptシムを追加しました。 これはまったく問題ありません。href属性がなく、適切な低下がない場合は、リンクが機能せず、さらに大きな問題が発生することになります。</target>
        </trans-unit>
        <trans-unit id="79d90211195df24c07a1f39be84dcafb2c0c0cff" translate="yes" xml:space="preserve">
          <source>Omitting the &lt;code&gt;href&lt;/code&gt; attribute on the &lt;code&gt;a&lt;/code&gt; element will cause the element to not be accessible using &lt;code&gt;tab&lt;/code&gt; key navigation. If you wish for those elements to be accessible via the &lt;code&gt;tab&lt;/code&gt; key, you can set the &lt;code&gt;tabindex&lt;/code&gt; attribute, or use &lt;code&gt;button&lt;/code&gt; elements instead. You can easily style button elements to look like normal links as mentioned in &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/a/8525002/130638&quot;&gt;Tracker1's answer&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 要素の &lt;code&gt;href&lt;/code&gt; 属性を省略すると、要素は &lt;code&gt;tab&lt;/code&gt; ナビゲーションを使用してアクセスできなくなります。 これらの要素に &lt;code&gt;tab&lt;/code&gt; キーを介してアクセスできるようにする場合は、 &lt;code&gt;tabindex&lt;/code&gt; 属性を設定するか、代わりに &lt;code&gt;button&lt;/code&gt; 要素を使用できます 。 &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/a/8525002/130638&quot;&gt;Tracker1の回答で&lt;/a&gt;&lt;/em&gt;述べたように、ボタン要素を通常のリンクのように簡単にスタイル設定でき&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd9e05ef7026ea1d31a3a27b1cbc509e85605be2" translate="yes" xml:space="preserve">
          <source>Or, even better, you'd have the default action link in the HTML, and you'd add the onclick event to the element unobtrusively via JavaScript after the DOM renders, thus ensuring that if JavaScript is not present/utilized you don't have useless event handlers riddling your code and potentially obfuscating (or at least distracting from) your actual content.</source>
          <target state="translated">あるいは、HTMLにデフォルトのアクションリンクを設定し、DOMがレンダリングされた後にJavaScriptを使ってonclickイベントを控えめに要素に追加することで、JavaScriptが利用されていない場合でも、無駄なイベントハンドラがコードを混乱させたり、実際のコンテンツを難読化させたり(少なくとも気が散る)することがなくなります。</target>
        </trans-unit>
        <trans-unit id="03c75c5ce96ade25b0a822150e4ade9ee3d0f56d" translate="yes" xml:space="preserve">
          <source>See here &lt;a href=&quot;https://stackoverflow.com/a/45465728/2803344&quot;&gt;https://stackoverflow.com/a/45465728/2803344&lt;/a&gt;</source>
          <target state="translated">こちらを&lt;a href=&quot;https://stackoverflow.com/a/45465728/2803344&quot;&gt;ご覧くださいhttps://stackoverflow.com/a/45465728/2803344&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="48f1019bcb9fa24ea0f76248ea083a4c0cd02134" translate="yes" xml:space="preserve">
          <source>Simple code example</source>
          <target state="translated">簡単なコード例</target>
        </trans-unit>
        <trans-unit id="6badb4f47fa2047e5ad167fd7ff402e1d9f4868c" translate="yes" xml:space="preserve">
          <source>Simple enough!</source>
          <target state="translated">簡単なことだ!</target>
        </trans-unit>
        <trans-unit id="49478b0f42b3a3835f22e0884382200e0c658115" translate="yes" xml:space="preserve">
          <source>So if you're a lone developer then you can clearly make your own choice, but if you work as a team you have to either state:</source>
          <target state="translated">一人で開発者をしている場合は自分で選択することができますが、チームで仕事をしている場合はどちらかの状態にしなければなりません。</target>
        </trans-unit>
        <trans-unit id="1ac335dc215eec9b9f35bf9b20acd9ed338242ca" translate="yes" xml:space="preserve">
          <source>So, &lt;strong&gt;there is one benefit&lt;/strong&gt; to use &lt;code&gt;&amp;lt;a href=&quot;#&quot;&amp;gt;&lt;/code&gt;. You get the cursor pointer by default on that element when you do &lt;code&gt;a href=&quot;#&quot;&lt;/code&gt;. For that, I think you can use CSS for this like &lt;code&gt;cursor:pointer;&lt;/code&gt; which solves this problem also.</source>
          <target state="translated">したがって、 &lt;code&gt;&amp;lt;a href=&quot;#&quot;&amp;gt;&lt;/code&gt; を使用する&lt;strong&gt;利点が1つあり&lt;/strong&gt;ます。 デフォルトでは &lt;code&gt;a href=&quot;#&quot;&lt;/code&gt; を実行すると、その要素にカーソルポインターが表示されます。 そのため、 &lt;code&gt;cursor:pointer;&lt;/code&gt; のように、CSSを使用できると思います。 これもこの問題を解決します。</target>
        </trans-unit>
        <trans-unit id="4a70586a9842b7d5401479afaec3f0a019fa6c2c" translate="yes" xml:space="preserve">
          <source>So, if you see, it's better not to use a tag for this kind of stuff.</source>
          <target state="translated">だから、見たら、こういうのはタグを使わない方がいい。</target>
        </trans-unit>
        <trans-unit id="d2627d25180adeafcf0f79b745b4905945e14598" translate="yes" xml:space="preserve">
          <source>So, when you are doing some JavaScript things with an &lt;code&gt;&amp;lt;a /&amp;gt;&lt;/code&gt; tag and if you put &lt;code&gt;href=&quot;#&quot;&lt;/code&gt; as well, you can add &lt;strong&gt;return false&lt;/strong&gt; at the end of the event &lt;em&gt;(in case of inline event binding)&lt;/em&gt; like:</source>
          <target state="translated">したがって、 &lt;code&gt;&amp;lt;a /&amp;gt;&lt;/code&gt; タグを使用してJavaScriptの処理を行っているときに、 &lt;code&gt;href=&quot;#&quot;&lt;/code&gt; も指定すると、次のように、イベントの最後に&lt;strong&gt;return false&lt;/strong&gt;を追加できます&lt;em&gt;（インラインイベントバインディングの場合）&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="7abfe43b1386b494fd45872b2cc6943e02d94ab9" translate="yes" xml:space="preserve">
          <source>That way, people with JavaScript disabled are directed to &lt;code&gt;search.php&lt;/code&gt; while your viewers with JavaScript view your enhanced functionality.</source>
          <target state="translated">これにより、JavaScriptが無効になっているユーザーは &lt;code&gt;search.php&lt;/code&gt; に誘導され、JavaScriptを使用しているビューアは拡張機能を表示します。</target>
        </trans-unit>
        <trans-unit id="f0ea564302a451fd2f0c6f42304e263314f68d81" translate="yes" xml:space="preserve">
          <source>The anchor tag markup will be like</source>
          <target state="translated">アンカータグのマークアップは次のようになります。</target>
        </trans-unit>
        <trans-unit id="1fa21ff042ee48d76e87bfc5b42429623407e190" translate="yes" xml:space="preserve">
          <source>The first one, ideally with a real link to follow in case the user has JavaScript disabled. Just make sure to return false to prevent the click event from firing if the JavaScript executes.</source>
          <target state="translated">最初の1つは、理想的には、ユーザーがJavaScriptを無効にしている場合には、実際のリンクを辿ることができます。JavaScript が実行された場合にクリックイベントが発生しないように false を返すようにしてください。</target>
        </trans-unit>
        <trans-unit id="1daf7431c85ba11ffd7dc6ff69bf824dd7a20830" translate="yes" xml:space="preserve">
          <source>The following are two methods of building a link that has the sole purpose of running JavaScript code. Which is better, in terms of functionality, page load speed, validation purposes, etc.?</source>
          <target state="translated">JavaScriptのコードを実行することだけを目的としたリンクを構築する方法は以下の2つです。機能性、ページの読み込み速度、検証目的など、どちらが優れているでしょうか?</target>
        </trans-unit>
        <trans-unit id="269c0d128dd6aa15c46409249e0cb329a40beab5" translate="yes" xml:space="preserve">
          <source>The hash tag can cause unexpected behavior if the click falls through (onclick throws), avoid it unless it's an appropriate fall-through behavior, and you want to change the navigation history.</source>
          <target state="translated">ハッシュタグは、クリックが落ちると予期せぬ動作を引き起こす可能性があります(onclick throws)、適切なフォールスルー動作でない限り回避し、ナビゲーション履歴を変更したい場合に使用します。</target>
        </trans-unit>
        <trans-unit id="c4494667d2a969ff9ab74b014574747d77306b24" translate="yes" xml:space="preserve">
          <source>The problem with this approach is, that if the function will not work or if there will be any problem, the link will become unclickable. Onclick event will always return &lt;code&gt;false&lt;/code&gt;, so the normal URL will not be called.</source>
          <target state="translated">このアプローチの問題は、関数が機能しない場合、または問題がある場合、リンクがクリックできなくなることです。 Onclickイベントは常に &lt;code&gt;false&lt;/code&gt; を返すため、通常のURLは呼び出されません。</target>
        </trans-unit>
        <trans-unit id="4b58746c8c626555acaac41aff5e2ead214c95fe" translate="yes" xml:space="preserve">
          <source>The second is clearly much easier to communicate.</source>
          <target state="translated">2つ目の方が明らかに伝わりやすいです。</target>
        </trans-unit>
        <trans-unit id="482e865b307b47aa297b58a84ea961e535f68ee1" translate="yes" xml:space="preserve">
          <source>The unobtrusive JavaScript way</source>
          <target state="translated">邪魔にならないJavaScriptの方法</target>
        </trans-unit>
        <trans-unit id="a9ff79e11576caa15996b6365f7cd93425fd9adc" translate="yes" xml:space="preserve">
          <source>The use of href=&quot;#&quot; scrolls the page to the top; the use of void(0) creates navigational problems within the browser.</source>
          <target state="translated">href=&quot;#&quot; の使用はページを上にスクロールさせます;void(0)の使用はブラウザ内でのナビゲーションの問題を引き起こします。</target>
        </trans-unit>
        <trans-unit id="614fa21c604f3659b02c8f778f1538fdd087da29" translate="yes" xml:space="preserve">
          <source>Then assign the function to &lt;code&gt;.link&lt;/code&gt; with a script wrapped in the body and just before the &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tag or in an external JavaScript document.</source>
          <target state="translated">次に、本体と &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; タグの直前または外部JavaScriptドキュメントでラップされたスクリプトを使用して、関数を &lt;code&gt;.link&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="b20f1b8c943debdc2004de3e35bd0bd8eee1f28c" translate="yes" xml:space="preserve">
          <source>Then in jQuery, I add the following code:</source>
          <target state="translated">そしてjQueryでは、以下のコードを追加しています。</target>
        </trans-unit>
        <trans-unit id="17feadbe346f495f0e3d2b51a1ff2d982ff5b7a1" translate="yes" xml:space="preserve">
          <source>Then you can style the span element to look like an anchor with a little CSS:</source>
          <target state="translated">そして、少しのCSSでspan要素をアンカーのようなスタイルにすることができます。</target>
        </trans-unit>
        <trans-unit id="f0bf07952005c3ec2fcb4e80a0427801536e162e" translate="yes" xml:space="preserve">
          <source>There are now better, easier, and more maintainable and scalable ways of accomplishing the desired result.</source>
          <target state="translated">望ましい結果を達成するための、より良い、より簡単な、より保守的でスケーラブルな方法があります。</target>
        </trans-unit>
        <trans-unit id="6735f9d73a2577bbd369c3fd2c10bf6b092a89df" translate="yes" xml:space="preserve">
          <source>There's very simple solution. Let function return &lt;code&gt;true&lt;/code&gt; if it works correctly. Then use the returned value to determine if the click should be cancelled or not:</source>
          <target state="translated">非常に簡単な解決策があります。 正しく機能する &lt;code&gt;true&lt;/code&gt; 、関数にtrueを返させます 。 次に、戻り値を使用して、クリックをキャンセルする必要があるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="98a9fb4ccab373e333dbb2ff3a74f3cae1e4513a" translate="yes" xml:space="preserve">
          <source>Therefore, you don't need to explicitly return &lt;code&gt;false&lt;/code&gt; with JavaScript</source>
          <target state="translated">したがって、JavaScriptで明示的に &lt;code&gt;false&lt;/code&gt; を返す必要はありません。</target>
        </trans-unit>
        <trans-unit id="1d7c8da4b8b4ff05efe2ee43a1441aa8483e5da0" translate="yes" xml:space="preserve">
          <source>This makes the &lt;code&gt;href&lt;/code&gt; simple, search engines need it. If you use anything else ( such as a string), it may cause a &lt;code&gt;404 not found&lt;/code&gt; error.</source>
          <target state="translated">これにより、 &lt;code&gt;href&lt;/code&gt; がシンプルになり、検索エンジンで必要になります。 それ以外のもの（文字列など）を使用すると、 &lt;code&gt;404 not found&lt;/code&gt; エラーが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="6ebabe065f2e6d6d97bdcb17d4b76aeefaaba9ae" translate="yes" xml:space="preserve">
          <source>This way you can assign your onclick.  I also suggest binding via script, not using the &lt;code&gt;onclick&lt;/code&gt; attribute on the element tag.  The only gotcha is the psuedo 3d text effect in older IEs that cannot be disabled.</source>
          <target state="translated">このようにして、onclickを割り当てることができます。 また、要素タグの &lt;code&gt;onclick&lt;/code&gt; 属性を使用するのではなく、スクリプトを介してバインドすることをお勧めします。 唯一の問題は、無効にできない古いIEの疑似3dテキスト効果です。</target>
        </trans-unit>
        <trans-unit id="702b86d5b5cbacb5b92c4fcf82a98463957cc2d0" translate="yes" xml:space="preserve">
          <source>Three reasons. Encouraging the use of &lt;code&gt;#&lt;/code&gt; amongst a team of developers inevitably leads to some using the return value of the function called like this:</source>
          <target state="translated">3つの理由。 開発者のチームの間で &lt;code&gt;#&lt;/code&gt; の使用を奨励すると、必然的に次のように呼び出される関数の戻り値を使用するようになります。</target>
        </trans-unit>
        <trans-unit id="20772c2b98562800fba03c386b95e46f651eaba2" translate="yes" xml:space="preserve">
          <source>Typically, I like to just avoid using a link at all and just wrap something around in a span and use that as a way to active some JavaScript code, like a pop-up or a content-reveal.</source>
          <target state="translated">一般的に、私はリンクの使用を全く避け、スパンで何かを包み込み、ポップアップやコンテンツ公開のようなJavaScriptコードをアクティブにする方法として使用したいと思っています。</target>
        </trans-unit>
        <trans-unit id="7cb22bdab3f97840c6388285c6c482bb1dd83b0e" translate="yes" xml:space="preserve">
          <source>Unless you're writing out the link using JavaScript (so that you know it's enabled in the browser), you should ideally be providing a proper link for people who are browsing with JavaScript disabled and then prevent the default action of the link in your onclick event handler. This way those with JavaScript enabled will run the function and those with JavaScript disabled will jump to an appropriate page (or location within the same page) rather than just clicking on the link and having nothing happen.</source>
          <target state="translated">JavaScriptを使用してリンクを書き出している場合(ブラウザで有効になっていることがわかるように)を除き、JavaScriptを無効にして閲覧している人のために適切なリンクを提供し、クリックイベントハンドラでリンクのデフォルトアクションを防止するのが理想的です。そうすれば、JavaScriptを有効にしている人は機能を実行し、JavaScriptを無効にしている人はリンクをクリックしても何も起こらないのではなく、適切なページ(または同じページ内の場所)にジャンプすることができます。</target>
        </trans-unit>
        <trans-unit id="7b8695724e414bfa1bb582fecd14c6afe7795c3e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;href=&quot;#&quot;&lt;/code&gt;, make sure &lt;code&gt;onclick&lt;/code&gt; always contains &lt;code&gt;return false;&lt;/code&gt; at the end, that any called function does not throw an error and if you attach a function dynamically to the &lt;code&gt;onclick&lt;/code&gt; property make sure that as well as not throwing an error it returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;href=&quot;#&quot;&lt;/code&gt; を使用して、 &lt;code&gt;onclick&lt;/code&gt; に常に &lt;code&gt;return false;&lt;/code&gt; が含まれていることを確認してください。 最後に、呼び出された関数はエラーをスローしません。関数を &lt;code&gt;onclick&lt;/code&gt; プロパティに動的にアタッチする場合は、エラーをスローしないことと、 &lt;code&gt;false&lt;/code&gt; を返すことを確認してください。</target>
        </trans-unit>
        <trans-unit id="0128b97172aa885ce9e934954b105231cdc32b48" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;href=&quot;javascript:void(0)&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;href=&quot;javascript:void(0)&quot;&lt;/code&gt; を使用してください</target>
        </trans-unit>
        <trans-unit id="a12a5998cd4a1a292c19fd32f9761fd034d7d9f0" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;http://en.wikipedia.org/wiki/Search_engine_optimization&quot;&gt;SEO&lt;/a&gt; friendly URL routes in your application, such as /Home/Action/Parameters is a good practice as well. If you have a link to a page that works without JavaScript first, you can enhance the experience afterward. Use a real link to a working page, then add an onlick event to enhance the presentation.</source>
          <target state="translated">/ Home / Action / Parametersなどのアプリケーションで&lt;a href=&quot;http://en.wikipedia.org/wiki/Search_engine_optimization&quot;&gt;SEO対応の&lt;/a&gt; URLルートを使用することもお勧めします。 最初にJavaScriptなしで機能するページへのリンクがあれば、後でエクスペリエンスを向上させることができます。 作業中のページへの実際のリンクを使用し、onlickイベントを追加してプレゼンテーションを強化します。</target>
        </trans-unit>
        <trans-unit id="c4dbe03c8c4b7cfc862655b2cc0c5360e6012dab" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;javascript:void(0)&lt;/code&gt; avoids all of the above headaches, and I haven't found any examples of a downside.</source>
          <target state="translated">&lt;code&gt;javascript:void(0)&lt;/code&gt; を使用すると、上記のすべての頭痛の種を回避でき、欠点の例は見つかりませんでした。</target>
        </trans-unit>
        <trans-unit id="db11279fac943ad89d6f69763bf7811bca9ce6c9" translate="yes" xml:space="preserve">
          <source>Using just &lt;code&gt;#&lt;/code&gt; makes some funny movements, so I would recommend to use &lt;code&gt;#self&lt;/code&gt; if you would like to save on typing efforts of &lt;code&gt;JavaScript bla, bla,&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;#&lt;/code&gt; だけを使用すると、面白い動きになるので、 &lt;code&gt;JavaScript bla, bla,&lt;/code&gt; .の入力作業を節約したい場合は、 ＃ &lt;code&gt;#self&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="dc1cda1dd2ead613cec7da19ef5d6a915ebf4f35" translate="yes" xml:space="preserve">
          <source>Usually, you should always have a fall back link to make sure that clients with JavaScript disabled still has some functionality. This concept is called unobtrusive JavaScript.</source>
          <target state="translated">通常、JavaScriptが無効になっているクライアントがまだ何らかの機能を持っていることを確認するために、フォールバックリンクを常に用意しておく必要があります。この概念は、控えめなJavaScriptと呼ばれています。</target>
        </trans-unit>
        <trans-unit id="6954c3bbb0379e79fe70bcb4796810ec355f4b94" translate="yes" xml:space="preserve">
          <source>When I've got several faux-links, I prefer to give them a class of 'no-link'.</source>
          <target state="translated">いくつかのフェイクリンクを持っている場合、私はそれらに「ノーリンク」のクラスを与えることを好みます。</target>
        </trans-unit>
        <trans-unit id="f8e2369b8d99375a6e5639486043b3d2146e4b56" translate="yes" xml:space="preserve">
          <source>When mouse hovers over the link, it doesn't show that it is a script.</source>
          <target state="translated">リンクの上にマウスを置いてもスクリプトであることが表示されません。</target>
        </trans-unit>
        <trans-unit id="61b44bbc89b917fa7c30a0f1a3f58894ad655538" translate="yes" xml:space="preserve">
          <source>Which will not do anything.</source>
          <target state="translated">何もしない</target>
        </trans-unit>
        <trans-unit id="a314a0ef6189eb65d5b3e4debee37ac4fae3168f" translate="yes" xml:space="preserve">
          <source>Which “href” value should I use for JavaScript links, “#” or “javascript:void(0)”</source>
          <target state="translated">JavaScriptのリンクには、&quot;#&quot;と &quot;javascript:void(0)&quot;のどちらの &quot;href &quot;値を使用する必要がありますか?</target>
        </trans-unit>
        <trans-unit id="2a61d37d475e6b6597176eb106fb6d1c59b1e618" translate="yes" xml:space="preserve">
          <source>Will always intercept in case your onclick event fails.</source>
          <target state="translated">オンクリックイベントが失敗した場合には、常にインターセプトします。</target>
        </trans-unit>
        <trans-unit id="731d0ff294ec0c3887a1f04959fba2a5602adff4" translate="yes" xml:space="preserve">
          <source>Will not have errant load calls happen, or trigger other events based on a hash change</source>
          <target state="translated">誤ったロードコールが発生したり、ハッシュの変更に基づいて他のイベントが発生したりしないようにします。</target>
        </trans-unit>
        <trans-unit id="3738d55a9cad1f32952968ee8cbc0cf807b6e3f9" translate="yes" xml:space="preserve">
          <source>You can always do the following:</source>
          <target state="translated">いつでも以下のようなことができます。</target>
        </trans-unit>
        <trans-unit id="da7531d336c39a47e5eaed5fa94893126500dc7d" translate="yes" xml:space="preserve">
          <source>You can attach events (click, hover, etc.) on almost every element, so why not just use a &lt;code&gt;span&lt;/code&gt;or a &lt;code&gt;div&lt;/code&gt;?</source>
          <target state="translated">イベント（クリック、ホバーなど）をほぼすべての要素にアタッチできるので、なぜ単に &lt;code&gt;span&lt;/code&gt; または &lt;code&gt;div&lt;/code&gt; を使用しないのですか？</target>
        </trans-unit>
        <trans-unit id="ab971355f6658d7288c950fff818ea0aa5ea9f9b" translate="yes" xml:space="preserve">
          <source>You can simply use a &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; instead to do things or any other element like b, span or whatever fits there as per your need, because you are allowed to add events on all the elements.</source>
          <target state="translated">すべての要素にイベントを追加することが許可されているため、代わりに &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; を使用して、必要に応じてbやspanなどの要素やその他の要素を実行することができます。</target>
        </trans-unit>
        <trans-unit id="e7a36ec7a3315f07240fb3666b9b0045b809b1ef" translate="yes" xml:space="preserve">
          <source>You should always strive for graceful degradation (in the event that the user doesn't have JavaScript enabled...and when it is with specs. and budget).  Also, it is considered bad form to use JavaScript attributes and protocol directly in HTML.</source>
          <target state="translated">常に潔く劣化させる努力をすべきです(ユーザーがJavaScriptを有効にしていない場合...スペックや予算との兼ね合いもあります)。また、HTML内でJavaScriptの属性やプロトコルを直接使用するのは悪しき形式とされています。</target>
        </trans-unit>
        <trans-unit id="619ece4847838fa5df03de55dd03cce3f3c0a698" translate="yes" xml:space="preserve">
          <source>You're spending your time writing incredibly overly verbose code - which has very little (if any) benefit to your codebase.</source>
          <target state="translated">あなたは、信じられないほど冗長なコードを書くことに時間を費やしていますが、それはあなたのコードベースにはほとんど(あるとしても)メリットがありません。</target>
        </trans-unit>
        <trans-unit id="8699b249c4dcf2e85dacd055f92f3fd58667de39" translate="yes" xml:space="preserve">
          <source>and omit both &lt;code&gt;href=&quot;#&quot;&lt;/code&gt; and &lt;code&gt;href=&quot;javascript:void(0)&quot;&lt;/code&gt;.</source>
          <target state="translated">また、 &lt;code&gt;href=&quot;#&quot;&lt;/code&gt; と &lt;code&gt;href=&quot;javascript:void(0)&quot;&lt;/code&gt; の両方を省略します。</target>
        </trans-unit>
        <trans-unit id="b54c9fdd392c0c6c0634d55188bd5d64387083d8" translate="yes" xml:space="preserve">
          <source>instantiates new copy of engine</source>
          <target state="translated">エンジンの新しいコピーをインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="571d5bc739cc9f7bbab15b2de12fe6c2903c98a9" translate="yes" xml:space="preserve">
          <source>instead</source>
          <target state="translated">instead</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="dc07658cb62d9aef55e874007ead4934d0b9c2bc" translate="yes" xml:space="preserve">
          <source>pollutes history</source>
          <target state="translated">歴史を汚す</target>
        </trans-unit>
        <trans-unit id="5b0a43ff2ce4a480c6dd584e5f5cc50c43071f56" translate="yes" xml:space="preserve">
          <source>runs in global scope and doesn't respect event system.</source>
          <target state="translated">はグローバルスコープで実行され、イベントシステムを尊重しません。</target>
        </trans-unit>
        <trans-unit id="ab7fd42e195f24dca7b841f1fff928b3bf815ee3" translate="yes" xml:space="preserve">
          <source>with little bit of jQuery</source>
          <target state="translated">jQueryを少し使って</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
