<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/134845">
    <body>
      <group id="134845">
        <trans-unit id="bd9a05fc79dc919ee8f37187136cd170c86ec000" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#&lt;/code&gt; is better than &lt;code&gt;javascript:anything&lt;/code&gt;, but the following is even better:</source>
          <target state="translated">&lt;code&gt;#&lt;/code&gt; 은 &lt;code&gt;javascript:anything&lt;/code&gt; 보다 낫지 만 다음이 훨씬 좋습니다.</target>
        </trans-unit>
        <trans-unit id="d13303585dad04c88853285805c96d301ae351ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;a [routerLink]=&quot;&quot; (click)=&quot;passTheSalt()&quot;&amp;gt;Click me&amp;lt;/a&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;a [routerLink]=&quot;&quot; (click)=&quot;passTheSalt()&quot;&amp;gt;Click me&amp;lt;/a&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="66098ba4c05ecdfacd9f658027335da408922dd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'#'&lt;/code&gt; will take the user back to the top of the page, so I usually go with &lt;code&gt;void(0)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'#'&lt;/code&gt; 은 사용자를 페이지 상단으로 다시 이동 시키므로 보통 &lt;code&gt;void(0)&lt;/code&gt; 으로갑니다.</target>
        </trans-unit>
        <trans-unit id="312f97c5a58e6153e44c36e633daf36e3ba7f7a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;javascript:;&lt;/code&gt; also behaves like &lt;code&gt;javascript:void(0);&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;javascript:;&lt;/code&gt; 또한 &lt;code&gt;javascript:void(0);&lt;/code&gt; 과 같이 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="d630050255eb1447bf20aa08fa1d2d8f3b9370be" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Or you can change the &lt;strong&gt;href&lt;/strong&gt; attribute with JavaScript like:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;또는 다음과 같이 JavaScript를 사용하여 &lt;strong&gt;href&lt;/strong&gt; 속성을 변경할 수 있습니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a1b67b7d55d05fa470b042c000c35c102854a70a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;*Note:&lt;/strong&gt; For dynamically created elements, use:</source>
          <target state="translated">&lt;strong&gt;* 참고 :&lt;/strong&gt; 동적으로 생성 된 요소의 경우 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="dd18ad4d12234247b1086240c340527f7ff571a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Don't use links for the sole purpose of running JavaScript.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;JavaScript를 실행하기위한 목적으로 만 링크를 사용하지 마십시오.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1ed559f58d1012098e76aa02f5987633940fcf2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HTML&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;HTML&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="45565dc2a4e38dfb88e321711fd07ae8f3e420e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JavaScript&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;JavaScript&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b423dbffd6212f2c51f0b1683e68068ddc8f1493" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reasons:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Reasons:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="279e0a0c57b48964447c3c7b49cb421013744ca1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;or&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;or&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="64a36367510a74320eeb73e9f7eb07284507c67a" translate="yes" xml:space="preserve">
          <source>A blackboxed &lt;em&gt;&lt;a href=&quot;http://documentcloud.github.com/backbone/&quot;&gt;Backbone.js&lt;/a&gt;&lt;/em&gt; example</source>
          <target state="translated">블랙 박스 된 &lt;em&gt;&lt;a href=&quot;http://documentcloud.github.com/backbone/&quot;&gt;Backbone.js&lt;/a&gt;&lt;/em&gt; 예제</target>
        </trans-unit>
        <trans-unit id="37a8070f7c88e3349acd823f028acbc805037eb6" translate="yes" xml:space="preserve">
          <source>A second reason for avoiding &lt;code&gt;#&lt;/code&gt; is that the final &lt;code&gt;return false;&lt;/code&gt; will not execute if the called function throws an error. Hence the developers have to also remember to handle any error appropriately in the called function.</source>
          <target state="translated">&lt;code&gt;#&lt;/code&gt; 을 피하는 두 번째 이유는 최종 &lt;code&gt;return false;&lt;/code&gt; 이기 때문입니다 . 호출 된 함수에서 오류가 발생하면 실행되지 않습니다. 따라서 개발자는 호출 된 함수에서 오류를 적절히 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="21105a7cdd1e4d498a450d175c3236a8e1dd36cd" translate="yes" xml:space="preserve">
          <source>A third reason is that there are cases where the &lt;code&gt;onclick&lt;/code&gt; event property is assigned dynamically.  I prefer to be able to call a function or assign it dynamically without having to code the function specifically for one method of attachment or another. Hence my &lt;code&gt;onclick&lt;/code&gt; (or on anything) in HTML markup look like this:</source>
          <target state="translated">세 번째 이유는 &lt;code&gt;onclick&lt;/code&gt; 이벤트 속성이 동적으로 할당되는 경우가 있기 때문입니다. 하나의 첨부 방법 또는 다른 방법으로 함수를 특별히 코딩하지 않고도 함수를 호출하거나 동적으로 할당하는 것을 선호합니다. 따라서 HTML 마크 업의 &lt;code&gt;onclick&lt;/code&gt; (또는 무엇이든)은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a4ed08c4c6145cdd2af098012bc4d6243908855f" translate="yes" xml:space="preserve">
          <source>And at the end, if you are binding the event from the JavaScript code itself, there you can do &lt;code&gt;event.preventDefault()&lt;/code&gt; to achieve this if you are using &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag, but if you are not using a &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag for this, there you get an advantage, you don't need to do this.</source>
          <target state="translated">그리고 마지막으로 JavaScript 코드 자체에서 이벤트를 바인딩하는 경우 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 태그를 사용하지만 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 태그를 사용하지 않는 경우 &lt;code&gt;event.preventDefault()&lt;/code&gt; 를 수행하여이를 수행 할 수 있습니다 이것, 당신은 이점을 얻습니다, 당신은 이것을 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="6d47584a657f22627c286c065b01ef0eec3ff30e" translate="yes" xml:space="preserve">
          <source>And for dynamically created elements which are created with dynamically created elements, use:</source>
          <target state="translated">동적으로 작성된 요소로 작성된 동적으로 작성된 요소의 경우 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="453026dc796aeb6d29ddf8df59d8b46fa665a396" translate="yes" xml:space="preserve">
          <source>And for the HTML, the link is simply</source>
          <target state="translated">HTML의 경우 링크는</target>
        </trans-unit>
        <trans-unit id="95f5aa76b12c67b525c77c3e75be466cc937bf2c" translate="yes" xml:space="preserve">
          <source>And for users with JavaScript disabled: if there isn't a fallback (for example, an alternative &lt;code&gt;href&lt;/code&gt;), they should at least not be able to see and interact with that element at all, whatever it is an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; or a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">그리고 자바 스크립트가 비활성화 된 사용자의 경우 폴 백이없는 경우 (예 : 대체 &lt;code&gt;href&lt;/code&gt; ) &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 태그.</target>
        </trans-unit>
        <trans-unit id="e88eec5c27cba3632c0d40e5cbd3edd4fd8e378c" translate="yes" xml:space="preserve">
          <source>And style it with CSS:</source>
          <target state="translated">CSS로 스타일을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="35a844c6a80cfc07cc920daac48c12d3b58f5465" translate="yes" xml:space="preserve">
          <source>But I'm using that just for preventing the page jumping to the top when the user clicks on an empty anchor. I'm rarely using onClick and other &lt;code&gt;on&lt;/code&gt; events directly in HTML.</source>
          <target state="translated">그러나 사용자가 빈 앵커를 클릭 할 때 페이지가 맨 위로 이동하지 못하게하기 위해 사용하고 있습니다. HTML에서 직접 onClick 및 기타 이벤트를 거의 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="99a146f23e49914b10a58de2f533ddb845149264" translate="yes" xml:space="preserve">
          <source>But semantically, all the above ways to achieve this are wrong &lt;em&gt;(it works fine though)&lt;/em&gt;. If any element is not created to navigate the page and that have some JavaScript things associated with it, then it should not be a &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">그러나 의미 적으로, 이것을 달성하는 위의 모든 방법은 잘못되었습니다 &lt;em&gt;(그러나 잘 작동합니다)&lt;/em&gt; . 페이지를 탐색하기 위해 작성된 요소가없고 연관된 JavaScript가있는 요소는 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 태그가 아니어야합니다.</target>
        </trans-unit>
        <trans-unit id="fbd07b5abfd55cfe055cb14acc954e5ad57b454b" translate="yes" xml:space="preserve">
          <source>But then they forget to use &lt;code&gt;return doSomething()&lt;/code&gt; in the onclick and just use &lt;code&gt;doSomething()&lt;/code&gt;.</source>
          <target state="translated">그러나 onclick에서 &lt;code&gt;return doSomething()&lt;/code&gt; 을 사용하는 것을 잊어 버리고 doSomething () 을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="b42a1500b25c0660b57181b19c01d4b3eb7c6fbf" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;return false;&lt;/code&gt;, the page doesn't jump to the top or break the &lt;code&gt;back&lt;/code&gt; button.</source>
          <target state="translated">&lt;code&gt;return false;&lt;/code&gt; 를 사용하여 ; 페이지가 맨 위로 이동하거나 &lt;code&gt;back&lt;/code&gt; 버튼을 깰 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="fdc74074ca47c21bd3b21b6aeb8f256f90c8e2c9" translate="yes" xml:space="preserve">
          <source>Check out &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Unobtrusive_JavaScript&quot;&gt;Unobtrusive JavaScript&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Progressive_enhancement&quot;&gt;Progressive enhancement&lt;/a&gt;&lt;/em&gt; (both Wikipedia).</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Unobtrusive_JavaScript&quot;&gt;눈에 띄지 않는 JavaScript&lt;/a&gt;&lt;/em&gt; 및 &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Progressive_enhancement&quot;&gt;Progressive 향상&lt;/a&gt;&lt;/em&gt; (위키 백과)을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="a2b39636986a25ff8379e8d673a9d2a172edde07" translate="yes" xml:space="preserve">
          <source>Definitely hash (&lt;code&gt;#&lt;/code&gt;) is better because in JavaScript it is a pseudoscheme:</source>
          <target state="translated">JavaScript에서는 의사 스키마이기 때문에 확실히 해시 ( &lt;code&gt;#&lt;/code&gt; )가 더 좋습니다.</target>
        </trans-unit>
        <trans-unit id="ab225a03db28555ac74d12a43409554a8e1d0685" translate="yes" xml:space="preserve">
          <source>Depending on what you want to accomplish, you could forget the onclick and just use the href:</source>
          <target state="translated">달성하려는 것에 따라 onclick을 잊고 href를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ccfb7f94fd7eac312a70ee0ec8cd7a643243d3cf" translate="yes" xml:space="preserve">
          <source>Doing &lt;code&gt;&amp;lt;a href=&quot;#&quot; onclick=&quot;myJsFunc();&quot;&amp;gt;Link&amp;lt;/a&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;myJsFunc();&quot;&amp;gt;Link&amp;lt;/a&amp;gt;&lt;/code&gt; or whatever else that contains an &lt;code&gt;onclick&lt;/code&gt; attribute - was okay back five years ago, though now it can be a bad practice. Here's why:</source>
          <target state="translated">&lt;code&gt;&amp;lt;a href=&quot;#&quot; onclick=&quot;myJsFunc();&quot;&amp;gt;Link&amp;lt;/a&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;myJsFunc();&quot;&amp;gt;Link&amp;lt;/a&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;onclick&lt;/code&gt; 속성을 포함하는 다른 모든 것-5 년 전에는 괜찮 았지만 지금은 나쁜 습관이 될 수 있습니다. 이유는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d7e4b16f963f46e303d8129da25ee4fda74df07e" translate="yes" xml:space="preserve">
          <source>Example... Let's say you have the following search link:</source>
          <target state="translated">예 ... 다음과 같은 검색 링크가 있다고 가정 해 봅시다.</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">스 니펫 확장</target>
        </trans-unit>
        <trans-unit id="256b34ae5bf64fd1e7c412983943787c254f3234" translate="yes" xml:space="preserve">
          <source>For a scalable, blackboxed, Backbone.js component example - &lt;em&gt;&lt;a href=&quot;http://jsfiddle.net/balupton/sTzdD/&quot;&gt;see this working jsfiddle example here&lt;/a&gt;&lt;/em&gt;. Notice how we utilize unobtrusive JavaScript practices, and in a tiny amount of code have a component that can be repeated across the page multiple times without side-effects or conflicts between the different component instances. Amazing!</source>
          <target state="translated">확장 가능하고 블랙 박스 처리 된 Backbone.js 구성 요소 예를 &lt;em&gt;&lt;a href=&quot;http://jsfiddle.net/balupton/sTzdD/&quot;&gt;보려면이 작동하는 jsfiddle 예를 참조하십시오&lt;/a&gt;&lt;/em&gt; . 우리가 눈에 거슬리지 않는 JavaScript 관행을 어떻게 활용하는지, 그리고 적은 양의 코드에는 여러 구성 요소 인스턴스 간의 부작용이나 충돌없이 페이지에서 여러 번 반복 할 수있는 구성 요소가 있습니다. 놀랄 만한!</target>
        </trans-unit>
        <trans-unit id="9f738ce8457f291b18ee47e665e96baa84f38fcd" translate="yes" xml:space="preserve">
          <source>HTML</source>
          <target state="translated">HTML</target>
        </trans-unit>
        <trans-unit id="11dc542c0ffeed8b41bad901e2044f438e4ab0e5" translate="yes" xml:space="preserve">
          <source>HTML:</source>
          <target state="translated">HTML:</target>
        </trans-unit>
        <trans-unit id="bfe5704ee66566a95b73c5b240c85d48233a0c03" translate="yes" xml:space="preserve">
          <source>Here is a sample. Home/ChangePicture is a working link to a form on a page complete with user interface and standard HTML submit buttons, but it looks nicer injected into a modal dialog with jQueryUI buttons. Either way works, depending on the browser, which satisfies mobile first development.</source>
          <target state="translated">다음은 샘플입니다. Home / ChangePicture는 사용자 인터페이스와 표준 HTML 제출 버튼이 포함 된 페이지의 양식에 대한 작업 링크이지만 jQueryUI 버튼이있는 모달 대화 상자에 더 잘 삽입됩니다. 모바일 우선 개발을 만족시키는 브라우저에 따라 어느 쪽이든 작동합니다.</target>
        </trans-unit>
        <trans-unit id="48a45ae35adf7aefdc4234047465cfabe67b39db" translate="yes" xml:space="preserve">
          <source>Here's &lt;strong&gt;&lt;a href=&quot;http://jsFiddle.net/mdesdev/Dn8YT/&quot;&gt;a jsFiddle&lt;/a&gt;&lt;/strong&gt; example of above aforementioned.</source>
          <target state="translated">위 &lt;strong&gt;&lt;a href=&quot;http://jsFiddle.net/mdesdev/Dn8YT/&quot;&gt;의 jsFiddle&lt;/a&gt;&lt;/strong&gt; 예제는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="af0f247bdfb76d39157de73b38f8c569f1bed9c5" translate="yes" xml:space="preserve">
          <source>I agree with Mr. D4V360 who suggested that, even though you are using the anchor tag, you do not truly have an anchor here. All you have is a special section of a document that should behave slightly different. A &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tag is far more appropriate.</source>
          <target state="translated">앵커 태그를 사용하더라도 여기에 앵커가 없다고 제안한 D4V360 씨에 동의합니다. 당신이 가진 전부는 약간 다르게 행동해야하는 문서의 특별한 섹션입니다. &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 태그가 훨씬 더 적합합니다.</target>
        </trans-unit>
        <trans-unit id="8b66ccf07b47db554765f27b6c481f900714e083" translate="yes" xml:space="preserve">
          <source>I agree with suggestions elsewhere stating that you should use regular URL in &lt;code&gt;href&lt;/code&gt; attribute, then call some JavaScript function in onclick. The flaw is, that they automaticaly add &lt;code&gt;return false&lt;/code&gt; after the call.</source>
          <target state="translated">&lt;code&gt;href&lt;/code&gt; 속성에 일반 URL을 사용하고 onclick에서 일부 JavaScript 함수를 호출해야한다는 제안에 동의합니다. 결함은 호출 후 자동으로 &lt;code&gt;return false&lt;/code&gt; 를 반환 한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="a380124779a6a974fd92f45c584ebee1075ab8a7" translate="yes" xml:space="preserve">
          <source>I believe you are presenting a false dichotomy. These are not the only two options.</source>
          <target state="translated">나는 당신이 잘못된 이분법을 제시하고 있다고 생각합니다. 이것 만이 두 가지 옵션이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="a95f583000a6d6471c45baf0530d2dddf28a9013" translate="yes" xml:space="preserve">
          <source>I choose use &lt;code&gt;javascript:void(0)&lt;/code&gt;, because use this could prevent right click to open the content menu. But &lt;code&gt;javascript:;&lt;/code&gt; is shorter and does the same thing.</source>
          <target state="translated">&lt;code&gt;javascript:void(0)&lt;/code&gt; 사용을 선택하면 컨텐츠 메뉴를 열려면 마우스 오른쪽 버튼을 클릭하지 못할 수 있습니다. 그러나 &lt;code&gt;javascript:;&lt;/code&gt; 더 짧고 같은 일을합니다.</target>
        </trans-unit>
        <trans-unit id="96087e21f2dbf7911c372442be487eb14f5a264d" translate="yes" xml:space="preserve">
          <source>I don't like using Hash-Tags unless they're used for anchors, and I only do the above when I've got more than two faux-links, otherwise I go with javascript:void(0).</source>
          <target state="translated">앵커에 사용되지 않는 한 해시 태그를 사용하는 것을 좋아하지 않으며 둘 이상의 가짜 링크가있을 때만 위의 작업을 수행합니다. 그렇지 않으면 javascript : void (0)로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="e1768468b361fab43f929b120179e50e5000f5c3" translate="yes" xml:space="preserve">
          <source>I personally use them in combination. For example:</source>
          <target state="translated">나는 개인적으로 그것들을 조합하여 사용합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1f0983da23d5be03a8b645a4411ddd3ac7bc75ec" translate="yes" xml:space="preserve">
          <source>I realize this isn't always possible, but in my opinion it should be striven for in developing any public website.</source>
          <target state="translated">이것이 항상 가능하지는 않지만, 제 생각에는 공개 웹 사이트를 개발하기 위해 노력해야합니다.</target>
        </trans-unit>
        <trans-unit id="58b87b45b40fd41bb411d996f2114853bdb955b8" translate="yes" xml:space="preserve">
          <source>I recommend using a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element instead, &lt;em&gt;especially&lt;/em&gt; if the control is supposed to produce a change in the data. (Something like a POST.)</source>
          <target state="translated">&lt;em&gt;특히&lt;/em&gt; 컨트롤이 데이터를 변경해야하는 경우 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 요소를 대신 사용하는 것이 좋습니다. (POST와 같은 것)</target>
        </trans-unit>
        <trans-unit id="0659955dd4df5923a30ee6d5913674dc5d8e2b01" translate="yes" xml:space="preserve">
          <source>I tried both in google chrome with the developer tools, and the &lt;code&gt;id=&quot;#&quot;&lt;/code&gt; took 0.32 seconds. While the &lt;code&gt;javascript:void(0)&lt;/code&gt; method took only 0.18 seconds. So in google chrome, &lt;code&gt;javascript:void(0)&lt;/code&gt; works better and faster.</source>
          <target state="translated">개발자 도구를 사용하여 Google 크롬에서 모두 시도했지만 &lt;code&gt;id=&quot;#&quot;&lt;/code&gt; 는 0.32 초가 걸렸습니다. &lt;code&gt;javascript:void(0)&lt;/code&gt; 메서드는 0.18 초 밖에 걸리지 않았습니다. 따라서 Google 크롬에서 &lt;code&gt;javascript:void(0)&lt;/code&gt; 가 더 빠르고 더 잘 작동합니다.</target>
        </trans-unit>
        <trans-unit id="5109866b7d3389f201821ad19d4d064cc956b926" translate="yes" xml:space="preserve">
          <source>I use &lt;code&gt;javascript:void(0)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;javascript:void(0)&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="c172eebb89e95daca91530697b9af96397c94df8" translate="yes" xml:space="preserve">
          <source>I use the following</source>
          <target state="translated">나는 다음을 사용한다</target>
        </trans-unit>
        <trans-unit id="57cf8845fa007adeab3a5acc415f45fd1bb1846a" translate="yes" xml:space="preserve">
          <source>I usually go for</source>
          <target state="translated">나는 보통</target>
        </trans-unit>
        <trans-unit id="eb7c88cfddb1e942897629653e455a623a4de90f" translate="yes" xml:space="preserve">
          <source>I would honestly suggest neither.  I would use a stylized &lt;code&gt;&amp;lt;button&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt; for that behavior.</source>
          <target state="translated">나는 정직하게 제안하지 않을 것입니다. 해당 동작에 양식화 된 &lt;code&gt;&amp;lt;button&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt; 을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="3abe3dddf2b07b6bfdae8fdc108601add56c4f34" translate="yes" xml:space="preserve">
          <source>I would use:</source>
          <target state="translated">나는 사용할 것이다 :</target>
        </trans-unit>
        <trans-unit id="804270c45f2c120a3a97bbb1e763a5eaffcbd795" translate="yes" xml:space="preserve">
          <source>I'm basically paraphrasing from &lt;a href=&quot;http://www.matthidinger.com/archive/2011/02/22/Progressive-enhancement-tutorial-with-ASP-NET-MVC-3-and-jQuery.aspx&quot;&gt;this practical article using progressive enhancement&lt;/a&gt;. &lt;strong&gt;The short answer is that you never use &lt;code&gt;javascript:void(0);&lt;/code&gt; or &lt;code&gt;#&lt;/code&gt; unless your user interface has already inferred that JavaScript is enabled, in which case you should use &lt;code&gt;javascript:void(0);&lt;/code&gt;&lt;/strong&gt;. Also, do not use span as links, since that is semantically false to begin with.</source>
          <target state="translated">나는 기본적으로 &lt;a href=&quot;http://www.matthidinger.com/archive/2011/02/22/Progressive-enhancement-tutorial-with-ASP-NET-MVC-3-and-jQuery.aspx&quot;&gt;점진적인 향상을 사용 하여이 실용적인 기사를&lt;/a&gt; 역설하고 있습니다. &lt;strong&gt;짧은 대답은 &lt;code&gt;javascript:void(0);&lt;/code&gt; 사용하지 않는다는 것입니다 .void (0);&lt;/strong&gt; &lt;strong&gt;또는 &lt;code&gt;#&lt;/code&gt; 사용자 인터페이스가 JavaScript가 활성화되어 있다고 이미 추론하지 않은 경우 &lt;code&gt;javascript:void(0);&lt;/code&gt; &lt;/strong&gt; . 또한 span은 링크로 사용하지 마십시오. 이는 의미 상 처음부터 거짓이기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="6d5d36429acbb4b8b2f395fbbdf6acc6a3c38a0b" translate="yes" xml:space="preserve">
          <source>Ideally you'd do this:</source>
          <target state="translated">이상적으로는 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="00d2f854e6bdeb1c870bd9dbb5045f67d2c0bbe3" translate="yes" xml:space="preserve">
          <source>If that is not possible, then you should at least inject the anchor tag into the document with JavaScript and the appropriate click event handlers.</source>
          <target state="translated">이것이 가능하지 않은 경우 최소한 JavaScript 및 적절한 클릭 이벤트 핸들러를 사용하여 앵커 태그를 문서에 삽입해야합니다.</target>
        </trans-unit>
        <trans-unit id="212472301315975ffd2e37b699dd3653d5d7ab0b" translate="yes" xml:space="preserve">
          <source>If there is no &lt;code&gt;href&lt;/code&gt; maybe there is no reason to use an anchor tag.</source>
          <target state="translated">&lt;code&gt;href&lt;/code&gt; 가 없으면 앵커 태그를 사용할 이유가 없습니다.</target>
        </trans-unit>
        <trans-unit id="3fbd40c242c40cb0b3c6722827bfd1390a74dc28" translate="yes" xml:space="preserve">
          <source>If you &lt;em&gt;MUST&lt;/em&gt; use an A element, use &lt;code&gt;javascript:void(0);&lt;/code&gt; for reasons already mentioned.</source>
          <target state="translated">&lt;em&gt;반드시&lt;/em&gt; A 요소를 &lt;em&gt;사용해야&lt;/em&gt; 한다면 &lt;code&gt;javascript:void(0);&lt;/code&gt; 이미 언급 한 이유로.</target>
        </trans-unit>
        <trans-unit id="28d7882ac4e01aeaa34e02649f7788fc7aad6938" translate="yes" xml:space="preserve">
          <source>If you can have an actual URL that makes sense use that as the HREF.  The onclick won't fire if someone middle-clicks on your link to open a new tab or if they have JavaScript disabled.</source>
          <target state="translated">실제 URL이 있으면 HREF로 사용하십시오. 링크를 마우스 가운데 버튼으로 클릭하여 새 탭을 열거 나 JavaScript가 비활성화되어 있으면 onclick이 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="de669b86638dcf73ae3668a5c38687eddd030088" translate="yes" xml:space="preserve">
          <source>If you happen to be using &lt;a href=&quot;http://angularjs.org/&quot;&gt;&lt;strong&gt;AngularJS&lt;/strong&gt;&lt;/a&gt;, you can use the following:</source>
          <target state="translated">&lt;a href=&quot;http://angularjs.org/&quot;&gt;&lt;strong&gt;AngularJS&lt;/strong&gt;&lt;/a&gt; 를 사용하는 경우 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="804f3288dea9da73c4359b16a93c611d804ee543" translate="yes" xml:space="preserve">
          <source>If you use Angular2, this way works:</source>
          <target state="translated">Angular2를 사용하면 다음과 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="ad5929b44b8b9854ce64c2375d1bc9cc7608ddf0" translate="yes" xml:space="preserve">
          <source>If you want your action to still work with JavaScript disabled, then using an &lt;code&gt;a&lt;/code&gt; element with a &lt;code&gt;href&lt;/code&gt; attribute that goes to some URL that will perform the action manually instead of via an Ajax request or whatever should be the way to go. If you are doing this, then you want to ensure you do an &lt;code&gt;event.preventDefault()&lt;/code&gt; on your click call to make sure when the button is clicked it does not follow the link. This option is called graceful degradation.</source>
          <target state="translated">자바 스크립트가 비활성화 된 상태에서 작업을 계속 수행하려면 Ajax 요청을 통해 또는 수동으로 작업을 수행하는 대신 수동으로 작업을 수행하는 일부 URL로 이동하는 &lt;code&gt;href&lt;/code&gt; 속성이 &lt;code&gt;a&lt;/code&gt; 요소를 사용하십시오. 이 작업을 수행하는 경우 클릭 호출에서 &lt;code&gt;event.preventDefault()&lt;/code&gt; 를 수행하여 버튼을 클릭했을 때 링크를 따르지 않는지 확인하십시오. 이 옵션을 정상 저하라고합니다.</target>
        </trans-unit>
        <trans-unit id="32737c28e056736b9f71e199ea71ce66c890d6e0" translate="yes" xml:space="preserve">
          <source>If your &quot;link&quot; has the sole purpose of running some JavaScript code it doesn't qualify as a link; rather a piece of text with a JavaScript function coupled to it. I would recommend to use a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tag with an &lt;code&gt;onclick handler&lt;/code&gt; attached to it and some basic CSS to immitate a link. Links are made for navigation, and if your JavaScript code isn't for navigation it should not be an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">&quot;링크&quot;에 JavaScript 코드를 실행하려는 목적이있는 경우 링크로 인정되지 않습니다. 오히려 JavaScript 함수가 결합 된 텍스트입니다. &lt;code&gt;onclick handler&lt;/code&gt; 첨부 된 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 태그와 일부 기본 CSS를 사용하여 링크를 모방하는 것이 좋습니다. 탐색을위한 링크가 있으며 JavaScript 코드가 탐색 용이 아닌 경우 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 태그가 아니어야합니다.</target>
        </trans-unit>
        <trans-unit id="46e3a38016d86ba7214b26757c2cfc95f05dd8d8" translate="yes" xml:space="preserve">
          <source>In addition</source>
          <target state="translated">게다가</target>
        </trans-unit>
        <trans-unit id="de626ba3c47bd3e6c70f8fa7b92ad16e7ab1df22" translate="yes" xml:space="preserve">
          <source>In addition, regarding cowgod's suggestion, particularly this: &lt;code&gt;...href=&quot;javascript_required.html&quot; onclick=&quot;...&lt;/code&gt; This is good approach, but it doesn't distinguish between &quot;JavaScript disabled&quot; and &quot;onclick fails&quot; scenarios.</source>
          <target state="translated">또한 cowgod의 제안과 관련하여 특히 다음과 같습니다. &lt;code&gt;...href=&quot;javascript_required.html&quot; onclick=&quot;...&lt;/code&gt; 이것은 좋은 접근 방법이지만&quot;JavaScript disabled &quot;와&quot;onclick failure &quot;시나리오를 구분하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="5f4095b56e1965992a00ffe2c85250cb05dcfc85" translate="yes" xml:space="preserve">
          <source>Instead, use an element other than a link:</source>
          <target state="translated">대신 링크 이외의 요소를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="3a64ed76369a90aa5c918a8b11d861c017006fa9" translate="yes" xml:space="preserve">
          <source>It gets around the need to return false. I don't like the &lt;code&gt;#&lt;/code&gt; option because, as mentioned, it will take the user to the top of the page. If you have somewhere else to send the user if they don't have JavaScript enabled (which is rare where I work, but a very good idea), then Steve's proposed method works great.</source>
          <target state="translated">거짓을 반환해야 할 필요성을 극복합니다. 언급했듯이 &lt;code&gt;#&lt;/code&gt; 옵션이 마음에 들지 않기 때문에 페이지 상단으로 사용자를 안내합니다. JavaScript를 사용하지 않는 사용자에게 보낼 다른 곳이 있다면 (이곳에서는 매우 드물지만 좋은 아이디어입니다) Steve의 제안 된 방법이 훌륭합니다.</target>
        </trans-unit>
        <trans-unit id="4aba6ab3ebf5c70f336816f81bd49cb9be79da3b" translate="yes" xml:space="preserve">
          <source>It is short an concise</source>
          <target state="translated">간결하다</target>
        </trans-unit>
        <trans-unit id="05d248935f7dfb7c2986856b90ff8132ad46390c" translate="yes" xml:space="preserve">
          <source>It promotes the practice of obtrusive JavaScript - which has turned out to be difficult to maintain and difficult to scale. More on this in &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Unobtrusive_JavaScript&quot;&gt;Unobtrusive JavaScript&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">그것은 유지하기 어려우며 확장하기 어려운 것으로 판명 된 눈에 띄는 JavaScript의 실천을 장려합니다. 이에 대한 자세한 내용은 &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Unobtrusive_JavaScript&quot;&gt;Unobtrusive JavaScript&lt;/a&gt;&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="78ab3661fb4274583e571731590054b5ccbe8d86" translate="yes" xml:space="preserve">
          <source>It will not take you to the top of the page, as with (#)</source>
          <target state="translated">(#)과 같이 페이지 상단으로 이동하지 않습니다</target>
        </trans-unit>
        <trans-unit id="ee0a7d8c1d6e41002b515104d36b8e33adec0a88" translate="yes" xml:space="preserve">
          <source>It would be better to use jQuery,</source>
          <target state="translated">jQuery를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="c7829ed128c64788f09241792585b6b6ca508330" translate="yes" xml:space="preserve">
          <source>It's even better if you inject the elements unobtrusively, a type of progressive enhancement. (See &lt;a href=&quot;https://stackoverflow.com/questions/134845/href-for-javascript-links-or-javascriptvoid0#134957&quot;&gt;this comment&lt;/a&gt;.)</source>
          <target state="translated">눈에 잘 띄지 않는 점진적 향상 유형의 요소를 주입하면 더 좋습니다. ( &lt;a href=&quot;https://stackoverflow.com/questions/134845/href-for-javascript-links-or-javascriptvoid0#134957&quot;&gt;이 의견&lt;/a&gt; 참조)</target>
        </trans-unit>
        <trans-unit id="d7a3fa77b0b23097c1a73962b4a6a268909df9fd" translate="yes" xml:space="preserve">
          <source>It's shorter than javascript:void(0) and does the same.</source>
          <target state="translated">javascript : void (0)보다 짧으며 동일한 기능을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="cfb6fdf6dd9570afa354dfcf688c4ee6c87c5367" translate="yes" xml:space="preserve">
          <source>JavaScript:</source>
          <target state="translated">JavaScript:</target>
        </trans-unit>
        <trans-unit id="027d0cca50d0abcf3c970c19a2fc5d77ab3580f5" translate="yes" xml:space="preserve">
          <source>Just don't have a &lt;code&gt;href&lt;/code&gt; attribute at all! Any good CSS reset would take care of the missing default cursor style, so that is a non-issue. Then attach your JavaScript functionality using graceful and unobtrusive  best practices - which are more maintainable as your JavaScript logic stays in JavaScript, instead of in your markup - which is essential when you start developing large scale JavaScript applications which require your logic to be split up into blackboxed components and templates. More on this in &lt;em&gt;&lt;a href=&quot;http://speakerdeck.com/u/addyosmani/p/large-scale-javascript-application-architecture&quot;&gt;Large-scale JavaScript Application Architecture&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;href&lt;/code&gt; 속성이 전혀 없습니다! CSS를 올바르게 재설정하면 기본 커서 스타일이 누락되어 처리되므로 문제가되지 않습니다. 그런 다음 우아하고 눈에 거슬리지 않는 모범 사례를 사용하여 자바 스크립트 기능을 추가합니다.이 모범 사례는 마크 업 대신 자바 스크립트 로직이 자바 스크립트로 유지 될 때 유지 관리가 쉬워집니다. 이는 로직을 분리해야하는 대규모 자바 스크립트 애플리케이션 개발을 시작할 때 필수적입니다. 블랙 박스 구성 요소 및 템플릿. &lt;em&gt;&lt;a href=&quot;http://speakerdeck.com/u/addyosmani/p/large-scale-javascript-application-architecture&quot;&gt;대규모 JavaScript 애플리케이션 아키텍처에서 이에 대한 추가 정보&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e79d804ae4c4d2418313f51b0a6c22f6469d32c6" translate="yes" xml:space="preserve">
          <source>Lastly, you can use &lt;code&gt;javascript:void(0)&lt;/code&gt; if you do not want anyone to go anywhere and if you don't want to call a JavaScript function. It works great if you have an image you want a mouseover event to happen with, but there's not anything for the user to click on.</source>
          <target state="translated">마지막으로, 누군가가 가고 싶지 않고 JavaScript 함수를 호출하지 않으려면 &lt;code&gt;javascript:void(0)&lt;/code&gt; 사용할 수 있습니다. 마우스 오버 이벤트가 발생하기를 원하는 이미지가 있지만 사용자가 클릭 할 것이 없으면 효과적입니다.</target>
        </trans-unit>
        <trans-unit id="98be2b1aaa56ea07d84773c494e9efaa717f0c18" translate="yes" xml:space="preserve">
          <source>My suggestion would be to use &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; element with the &lt;code&gt;class&lt;/code&gt; attribute instead of
an anchor. For example:</source>
          <target state="translated">내 제안은 앵커 대신 &lt;code&gt;class&lt;/code&gt; 속성과 함께 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 요소를 사용하는 것입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1859e04da42645894d4f5a8456f449d16a579623" translate="yes" xml:space="preserve">
          <source>NOTE: You can replace the &lt;code&gt;0&lt;/code&gt; with a string such as &lt;code&gt;javascript:void('Delete record 123')&lt;/code&gt; which can serve as an extra indicator that will show what the click will actually do.</source>
          <target state="translated">참고 : &lt;code&gt;0&lt;/code&gt; 을 &lt;code&gt;javascript:void('Delete record 123')&lt;/code&gt; 와 같은 문자열로 대체하여 클릭이 실제로 수행 할 작업을 나타내는 추가 표시기 역할을 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d64ff37b1b1bbb318463de427a0b3e65aad1b34" translate="yes" xml:space="preserve">
          <source>Neither if you ask me;</source>
          <target state="translated">당신이 나에게 물어 보더라도;</target>
        </trans-unit>
        <trans-unit id="6408fac84dc551a699a1e0a8a0ec23490893a171" translate="yes" xml:space="preserve">
          <source>Neither.</source>
          <target state="translated">Neither.</target>
        </trans-unit>
        <trans-unit id="a4fe7b7b3fdc67415aec63114e067b36a0e3da5d" translate="yes" xml:space="preserve">
          <source>Note, that I negate the result of the &lt;code&gt;doSomething()&lt;/code&gt; function. If it works, it will return &lt;code&gt;true&lt;/code&gt;, so it will be negated (&lt;code&gt;false&lt;/code&gt;) and the &lt;code&gt;path/to/some/URL&lt;/code&gt; will not be called. If the function will return &lt;code&gt;false&lt;/code&gt; (for example, the browser doesn't support something used within the function or anything else goes wrong), it is negated to &lt;code&gt;true&lt;/code&gt; and the &lt;code&gt;path/to/some/URL&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;doSomething()&lt;/code&gt; 함수의 결과를 부정한다는 점에 유의하십시오. 작동하면 &lt;code&gt;true&lt;/code&gt; 를 반환하므로 무효화되고 ( &lt;code&gt;false&lt;/code&gt; ) &lt;code&gt;path/to/some/URL&lt;/code&gt; 이 호출되지 않습니다. 함수가 &lt;code&gt;false&lt;/code&gt; 를 리턴하면 (예를 들어, 브라우저가 함수 내에서 사용 된 것을 지원하지 않거나 다른 것이 잘못되는 경우) &lt;code&gt;true&lt;/code&gt; 로 부정되고 &lt;code&gt;path/to/some/URL&lt;/code&gt; 이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="f579c523960af1aec824c6fdc57af6d4abd76a1f" translate="yes" xml:space="preserve">
          <source>OR</source>
          <target state="translated">OR</target>
        </trans-unit>
        <trans-unit id="b4b28229212dbfad05165a5bcaa2d9543543dc27" translate="yes" xml:space="preserve">
          <source>Of course &quot;#&quot; with an onclick handler which prevents default action is [much] better. Moreover, a link that has the sole purpose to run JavaScript is not really &quot;a link&quot; unless you are sending user to some sensible anchor on the page (just # will send to top) when something goes wrong. You can simply simulate look and feel of link with stylesheet and forget about href at all.</source>
          <target state="translated">물론 기본 액션을 막는 onclick 핸들러가있는 &quot;#&quot;이 훨씬 좋습니다. 또한, 자바 스크립트를 실행하기위한 유일한 목적을 가진 링크는 사용자가 무언가 잘못되었을 때 페이지의 적절한 앵커로 사용자를 보내지 않는 한 실제로는 &quot;링크&quot;가 아닙니다. 스타일 시트와 연결 모양과 느낌을 시뮬레이션하고 href를 전혀 잊어 버릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f89a0eec1da10518de63068696e628968159d46" translate="yes" xml:space="preserve">
          <source>Omitting the &lt;code&gt;href&lt;/code&gt; attribute on the &lt;code&gt;a&lt;/code&gt; element will cause &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_6&quot;&gt;Internet&amp;nbsp;Explorer&amp;nbsp;6&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_7&quot;&gt;Internet&amp;nbsp;Explorer&amp;nbsp;7&lt;/a&gt; to not take on the &lt;code&gt;a:hover&lt;/code&gt; styling, which is why we have added a simple JavaScript shim to accomplish this via &lt;code&gt;a.hover&lt;/code&gt; instead. Which is perfectly okay, as if you don't have a href attribute and no graceful degradation then your link won't work anyway - and you'll have bigger issues to worry about.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 요소에서 &lt;code&gt;href&lt;/code&gt; 속성을 생략하면 &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_6&quot;&gt;Internet Explorer 6&lt;/a&gt; 및 &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_7&quot;&gt;Internet Explorer 7&lt;/a&gt; 이 &lt;code&gt;a:hover&lt;/code&gt; 스타일을 &lt;code&gt;a.hover&lt;/code&gt; 하지 않으므로 a.hover 를 통해이를 수행하기 위해 간단한 JavaScript shim을 추가했습니다. href 속성이없고 우아한 저하가없는 것처럼 링크가 작동하지 않는 것처럼 완벽하게 괜찮습니다. 더 큰 문제가 생길 것입니다.</target>
        </trans-unit>
        <trans-unit id="79d90211195df24c07a1f39be84dcafb2c0c0cff" translate="yes" xml:space="preserve">
          <source>Omitting the &lt;code&gt;href&lt;/code&gt; attribute on the &lt;code&gt;a&lt;/code&gt; element will cause the element to not be accessible using &lt;code&gt;tab&lt;/code&gt; key navigation. If you wish for those elements to be accessible via the &lt;code&gt;tab&lt;/code&gt; key, you can set the &lt;code&gt;tabindex&lt;/code&gt; attribute, or use &lt;code&gt;button&lt;/code&gt; elements instead. You can easily style button elements to look like normal links as mentioned in &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/a/8525002/130638&quot;&gt;Tracker1's answer&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 요소에서 &lt;code&gt;href&lt;/code&gt; 속성을 생략하면 &lt;code&gt;tab&lt;/code&gt; 키 탐색을 사용하여 요소에 액세스 할 수 없습니다. &lt;code&gt;tab&lt;/code&gt; 키를 통해 이러한 요소에 액세스하려면 &lt;code&gt;tabindex&lt;/code&gt; 속성을 설정하거나 &lt;code&gt;button&lt;/code&gt; 요소를 대신 사용할 수 있습니다. &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/a/8525002/130638&quot;&gt;Tracker1의 answer&lt;/a&gt;&lt;/em&gt; 에서 언급했듯이 버튼 요소의 스타일을 일반 링크처럼 쉽게 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd9e05ef7026ea1d31a3a27b1cbc509e85605be2" translate="yes" xml:space="preserve">
          <source>Or, even better, you'd have the default action link in the HTML, and you'd add the onclick event to the element unobtrusively via JavaScript after the DOM renders, thus ensuring that if JavaScript is not present/utilized you don't have useless event handlers riddling your code and potentially obfuscating (or at least distracting from) your actual content.</source>
          <target state="translated">또는 HTML에 기본 작업 링크가 있으며 DOM 렌더링 후 JavaScript를 통해 요소에 onclick 이벤트를 눈에 띄게 추가하여 JavaScript가 존재하지 않거나 사용되지 않는 경우 쓸모없는 이벤트 핸들러가 코드를 방해하고 잠재적으로 실제 콘텐츠를 혼란스럽게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="03c75c5ce96ade25b0a822150e4ade9ee3d0f56d" translate="yes" xml:space="preserve">
          <source>See here &lt;a href=&quot;https://stackoverflow.com/a/45465728/2803344&quot;&gt;https://stackoverflow.com/a/45465728/2803344&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/45465728/2803344&quot;&gt;https://stackoverflow.com/a/45465728/2803344 참조&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="48f1019bcb9fa24ea0f76248ea083a4c0cd02134" translate="yes" xml:space="preserve">
          <source>Simple code example</source>
          <target state="translated">간단한 코드 예</target>
        </trans-unit>
        <trans-unit id="6badb4f47fa2047e5ad167fd7ff402e1d9f4868c" translate="yes" xml:space="preserve">
          <source>Simple enough!</source>
          <target state="translated">충분히 간단합니다!</target>
        </trans-unit>
        <trans-unit id="49478b0f42b3a3835f22e0884382200e0c658115" translate="yes" xml:space="preserve">
          <source>So if you're a lone developer then you can clearly make your own choice, but if you work as a team you have to either state:</source>
          <target state="translated">따라서 고독한 개발자라면 자신이 직접 선택할 수 있지만 팀으로 일하는 경우 다음 중 하나를 명시해야합니다.</target>
        </trans-unit>
        <trans-unit id="1ac335dc215eec9b9f35bf9b20acd9ed338242ca" translate="yes" xml:space="preserve">
          <source>So, &lt;strong&gt;there is one benefit&lt;/strong&gt; to use &lt;code&gt;&amp;lt;a href=&quot;#&quot;&amp;gt;&lt;/code&gt;. You get the cursor pointer by default on that element when you do &lt;code&gt;a href=&quot;#&quot;&lt;/code&gt;. For that, I think you can use CSS for this like &lt;code&gt;cursor:pointer;&lt;/code&gt; which solves this problem also.</source>
          <target state="translated">따라서 &lt;code&gt;&amp;lt;a href=&quot;#&quot;&amp;gt;&lt;/code&gt; 을 사용하면 &lt;strong&gt;이점&lt;/strong&gt; 이 있습니다. &lt;code&gt;a href=&quot;#&quot;&lt;/code&gt; 을 수행 하면 해당 요소에 기본적으로 커서 포인터가 표시됩니다. 이를 위해 &lt;code&gt;cursor:pointer;&lt;/code&gt; 와 같은 CSS를 사용할 수 있다고 생각합니다 . 이 문제도 해결합니다.</target>
        </trans-unit>
        <trans-unit id="4a70586a9842b7d5401479afaec3f0a019fa6c2c" translate="yes" xml:space="preserve">
          <source>So, if you see, it's better not to use a tag for this kind of stuff.</source>
          <target state="translated">보시다시피 이런 종류의 물건에는 태그를 사용하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="d2627d25180adeafcf0f79b745b4905945e14598" translate="yes" xml:space="preserve">
          <source>So, when you are doing some JavaScript things with an &lt;code&gt;&amp;lt;a /&amp;gt;&lt;/code&gt; tag and if you put &lt;code&gt;href=&quot;#&quot;&lt;/code&gt; as well, you can add &lt;strong&gt;return false&lt;/strong&gt; at the end of the event &lt;em&gt;(in case of inline event binding)&lt;/em&gt; like:</source>
          <target state="translated">따라서 &lt;code&gt;&amp;lt;a /&amp;gt;&lt;/code&gt; 태그를 사용하여 JavaScript 작업을 수행하고 &lt;code&gt;href=&quot;#&quot;&lt;/code&gt; 을 넣는 &lt;em&gt;경우&lt;/em&gt; 이벤트 끝에 &lt;em&gt;(인라인 이벤트 바인딩의 경우) 다음&lt;/em&gt; 과 같이 &lt;strong&gt;false 반환&lt;/strong&gt; 을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7abfe43b1386b494fd45872b2cc6943e02d94ab9" translate="yes" xml:space="preserve">
          <source>That way, people with JavaScript disabled are directed to &lt;code&gt;search.php&lt;/code&gt; while your viewers with JavaScript view your enhanced functionality.</source>
          <target state="translated">이렇게하면 JavaScript를 사용하지 않는 사용자는 &lt;code&gt;search.php&lt;/code&gt; 로 이동 하지만 JavaScript를 사용하는 시청자는 향상된 기능을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0ea564302a451fd2f0c6f42304e263314f68d81" translate="yes" xml:space="preserve">
          <source>The anchor tag markup will be like</source>
          <target state="translated">앵커 태그 마크 업은</target>
        </trans-unit>
        <trans-unit id="1fa21ff042ee48d76e87bfc5b42429623407e190" translate="yes" xml:space="preserve">
          <source>The first one, ideally with a real link to follow in case the user has JavaScript disabled. Just make sure to return false to prevent the click event from firing if the JavaScript executes.</source>
          <target state="translated">첫 번째는 사용자가 JavaScript를 비활성화 한 경우 따라야 할 실제 링크입니다. JavaScript가 실행될 때 click 이벤트가 발생하지 않도록하려면 false를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="1daf7431c85ba11ffd7dc6ff69bf824dd7a20830" translate="yes" xml:space="preserve">
          <source>The following are two methods of building a link that has the sole purpose of running JavaScript code. Which is better, in terms of functionality, page load speed, validation purposes, etc.?</source>
          <target state="translated">다음은 JavaScript 코드를 실행하기위한 목적으로 만 링크를 작성하는 두 가지 방법입니다. 기능, 페이지로드 속도, 유효성 검사 등의 측면에서 어떤 것이 더 좋습니까?</target>
        </trans-unit>
        <trans-unit id="269c0d128dd6aa15c46409249e0cb329a40beab5" translate="yes" xml:space="preserve">
          <source>The hash tag can cause unexpected behavior if the click falls through (onclick throws), avoid it unless it's an appropriate fall-through behavior, and you want to change the navigation history.</source>
          <target state="translated">클릭이 실패 (온 클릭 발생)하는 경우 해시 태그가 예기치 않은 동작을 유발할 수 있으며, 적절한 폴 스루 동작이 아니고 탐색 기록을 변경하려는 경우에는이를 피하십시오.</target>
        </trans-unit>
        <trans-unit id="c4494667d2a969ff9ab74b014574747d77306b24" translate="yes" xml:space="preserve">
          <source>The problem with this approach is, that if the function will not work or if there will be any problem, the link will become unclickable. Onclick event will always return &lt;code&gt;false&lt;/code&gt;, so the normal URL will not be called.</source>
          <target state="translated">이 방법의 문제점은 기능이 작동하지 않거나 문제가 발생하면 링크를 클릭 할 수 없게된다는 것입니다. Onclick 이벤트는 항상 &lt;code&gt;false&lt;/code&gt; 를 반환하므로 일반 URL은 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4b58746c8c626555acaac41aff5e2ead214c95fe" translate="yes" xml:space="preserve">
          <source>The second is clearly much easier to communicate.</source>
          <target state="translated">두 번째는 분명히 의사 소통하기가 훨씬 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="482e865b307b47aa297b58a84ea961e535f68ee1" translate="yes" xml:space="preserve">
          <source>The unobtrusive JavaScript way</source>
          <target state="translated">눈에 잘 띄지 않는 JavaScript 방식</target>
        </trans-unit>
        <trans-unit id="a9ff79e11576caa15996b6365f7cd93425fd9adc" translate="yes" xml:space="preserve">
          <source>The use of href=&quot;#&quot; scrolls the page to the top; the use of void(0) creates navigational problems within the browser.</source>
          <target state="translated">href = &quot;#&quot;을 사용하면 페이지가 맨 위로 스크롤됩니다. void (0)을 사용하면 브라우저 내에서 탐색 문제가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="614fa21c604f3659b02c8f778f1538fdd087da29" translate="yes" xml:space="preserve">
          <source>Then assign the function to &lt;code&gt;.link&lt;/code&gt; with a script wrapped in the body and just before the &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tag or in an external JavaScript document.</source>
          <target state="translated">그런 다음 본문에 싸인 스크립트와 &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 태그 바로 앞 또는 외부 JavaScript 문서에서 함수를 &lt;code&gt;.link&lt;/code&gt; 에 할당하십시오.</target>
        </trans-unit>
        <trans-unit id="b20f1b8c943debdc2004de3e35bd0bd8eee1f28c" translate="yes" xml:space="preserve">
          <source>Then in jQuery, I add the following code:</source>
          <target state="translated">그런 다음 jQuery에서 다음 코드를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="17feadbe346f495f0e3d2b51a1ff2d982ff5b7a1" translate="yes" xml:space="preserve">
          <source>Then you can style the span element to look like an anchor with a little CSS:</source>
          <target state="translated">그런 다음 span 요소를 CSS가 작은 앵커처럼 보이도록 스타일을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0bf07952005c3ec2fcb4e80a0427801536e162e" translate="yes" xml:space="preserve">
          <source>There are now better, easier, and more maintainable and scalable ways of accomplishing the desired result.</source>
          <target state="translated">원하는 결과를 달성하는 데 더 좋고, 쉽고, 유지 보수가 쉽고 확장 가능한 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6735f9d73a2577bbd369c3fd2c10bf6b092a89df" translate="yes" xml:space="preserve">
          <source>There's very simple solution. Let function return &lt;code&gt;true&lt;/code&gt; if it works correctly. Then use the returned value to determine if the click should be cancelled or not:</source>
          <target state="translated">매우 간단한 해결책이 있습니다. 제대로 작동하면 함수가 &lt;code&gt;true&lt;/code&gt; 를 반환하도록합니다. 그런 다음 반환 된 값을 사용하여 클릭을 취소해야하는지 여부를 결정하십시오.</target>
        </trans-unit>
        <trans-unit id="98a9fb4ccab373e333dbb2ff3a74f3cae1e4513a" translate="yes" xml:space="preserve">
          <source>Therefore, you don't need to explicitly return &lt;code&gt;false&lt;/code&gt; with JavaScript</source>
          <target state="translated">따라서 JavaScript를 사용하여 명시 적으로 &lt;code&gt;false&lt;/code&gt; 를 반환 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="1d7c8da4b8b4ff05efe2ee43a1441aa8483e5da0" translate="yes" xml:space="preserve">
          <source>This makes the &lt;code&gt;href&lt;/code&gt; simple, search engines need it. If you use anything else ( such as a string), it may cause a &lt;code&gt;404 not found&lt;/code&gt; error.</source>
          <target state="translated">이를 통해 검색 엔진이 &lt;code&gt;href&lt;/code&gt; 를 간단하게 만들 수 있습니다. 문자열과 같은 다른 것을 사용하면 &lt;code&gt;404 not found&lt;/code&gt; 오류가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ebabe065f2e6d6d97bdcb17d4b76aeefaaba9ae" translate="yes" xml:space="preserve">
          <source>This way you can assign your onclick.  I also suggest binding via script, not using the &lt;code&gt;onclick&lt;/code&gt; attribute on the element tag.  The only gotcha is the psuedo 3d text effect in older IEs that cannot be disabled.</source>
          <target state="translated">이런 식으로 onclick을 할당 할 수 있습니다. 또한 요소 태그에서 &lt;code&gt;onclick&lt;/code&gt; 속성을 사용하지 않고 스크립트를 통한 바인딩을 제안합니다. 유일한 단점은 비활성화 할 수없는 이전 IE의 psuedo 3d 텍스트 효과입니다.</target>
        </trans-unit>
        <trans-unit id="702b86d5b5cbacb5b92c4fcf82a98463957cc2d0" translate="yes" xml:space="preserve">
          <source>Three reasons. Encouraging the use of &lt;code&gt;#&lt;/code&gt; amongst a team of developers inevitably leads to some using the return value of the function called like this:</source>
          <target state="translated">세 가지 이유. 개발자 팀간에 &lt;code&gt;#&lt;/code&gt; 사용을 권장하면 필연적으로 다음과 같은 함수의 반환 값을 사용하게됩니다.</target>
        </trans-unit>
        <trans-unit id="20772c2b98562800fba03c386b95e46f651eaba2" translate="yes" xml:space="preserve">
          <source>Typically, I like to just avoid using a link at all and just wrap something around in a span and use that as a way to active some JavaScript code, like a pop-up or a content-reveal.</source>
          <target state="translated">일반적으로 링크를 전혀 사용하지 않고 범위 내에서 무언가를 감싸고 팝업이나 내용 공개와 같은 일부 JavaScript 코드를 활성화하는 방법으로 사용하고 싶습니다.</target>
        </trans-unit>
        <trans-unit id="7cb22bdab3f97840c6388285c6c482bb1dd83b0e" translate="yes" xml:space="preserve">
          <source>Unless you're writing out the link using JavaScript (so that you know it's enabled in the browser), you should ideally be providing a proper link for people who are browsing with JavaScript disabled and then prevent the default action of the link in your onclick event handler. This way those with JavaScript enabled will run the function and those with JavaScript disabled will jump to an appropriate page (or location within the same page) rather than just clicking on the link and having nothing happen.</source>
          <target state="translated">JavaScript를 사용하여 링크를 작성하지 않는 한 (브라우저에서 활성화되어 있음을 알 수있는 경우) JavaScript를 사용하지 않고 탐색하는 사용자에게 적절한 링크를 제공 한 다음 onclick에서 링크의 기본 동작을 방지해야합니다. 이벤트 핸들러. 이 방법으로 JavaScript를 사용하는 사용자는 기능을 실행하고 JavaScript를 사용하지 않는 사용자는 링크를 클릭하고 아무 일도 일어나지 않고 적절한 페이지 (또는 동일한 페이지 내의 위치)로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="7b8695724e414bfa1bb582fecd14c6afe7795c3e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;href=&quot;#&quot;&lt;/code&gt;, make sure &lt;code&gt;onclick&lt;/code&gt; always contains &lt;code&gt;return false;&lt;/code&gt; at the end, that any called function does not throw an error and if you attach a function dynamically to the &lt;code&gt;onclick&lt;/code&gt; property make sure that as well as not throwing an error it returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;href=&quot;#&quot;&lt;/code&gt; 을 사용하고 &lt;code&gt;onclick&lt;/code&gt; 에 항상 &lt;code&gt;return false;&lt;/code&gt; 가 포함되어 있는지 확인하십시오 . 결국, 호출 된 함수는 오류를 발생시키지 않으며 &lt;code&gt;onclick&lt;/code&gt; 속성에 함수를 동적으로 첨부하면 오류를 발생시키지 않고 &lt;code&gt;false&lt;/code&gt; 를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="0128b97172aa885ce9e934954b105231cdc32b48" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;href=&quot;javascript:void(0)&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;href=&quot;javascript:void(0)&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a12a5998cd4a1a292c19fd32f9761fd034d7d9f0" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;http://en.wikipedia.org/wiki/Search_engine_optimization&quot;&gt;SEO&lt;/a&gt; friendly URL routes in your application, such as /Home/Action/Parameters is a good practice as well. If you have a link to a page that works without JavaScript first, you can enhance the experience afterward. Use a real link to a working page, then add an onlick event to enhance the presentation.</source>
          <target state="translated">응용 프로그램에서 / Home / Action / Parameters와 같은 &lt;a href=&quot;http://en.wikipedia.org/wiki/Search_engine_optimization&quot;&gt;SEO&lt;/a&gt; 친화적 인 URL 경로를 사용하는 것도 좋습니다. JavaScript없이 작동하는 페이지에 대한 링크가 있으면 나중에 경험을 향상시킬 수 있습니다. 작업중인 페이지에 대한 실제 링크를 사용한 다음 onlick 이벤트를 추가하여 프리젠 테이션을 향상 시키십시오.</target>
        </trans-unit>
        <trans-unit id="c4dbe03c8c4b7cfc862655b2cc0c5360e6012dab" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;javascript:void(0)&lt;/code&gt; avoids all of the above headaches, and I haven't found any examples of a downside.</source>
          <target state="translated">&lt;code&gt;javascript:void(0)&lt;/code&gt; 하면 위의 모든 두통을 피할 수 있으며 단점의 예를 찾지 못했습니다.</target>
        </trans-unit>
        <trans-unit id="db11279fac943ad89d6f69763bf7811bca9ce6c9" translate="yes" xml:space="preserve">
          <source>Using just &lt;code&gt;#&lt;/code&gt; makes some funny movements, so I would recommend to use &lt;code&gt;#self&lt;/code&gt; if you would like to save on typing efforts of &lt;code&gt;JavaScript bla, bla,&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;#&lt;/code&gt; 을 사용하면 재미있는 움직임이 발생하므로 &lt;code&gt;JavaScript bla, bla,&lt;/code&gt; 의 입력 노력을 절약하려면 &lt;code&gt;#self&lt;/code&gt; 를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="dc1cda1dd2ead613cec7da19ef5d6a915ebf4f35" translate="yes" xml:space="preserve">
          <source>Usually, you should always have a fall back link to make sure that clients with JavaScript disabled still has some functionality. This concept is called unobtrusive JavaScript.</source>
          <target state="translated">일반적으로 JavaScript가 비활성화 된 클라이언트가 여전히 일부 기능을 사용하려면 대체 링크가 있어야합니다. 이 개념을 눈에 잘 띄지 않는 JavaScript라고합니다.</target>
        </trans-unit>
        <trans-unit id="6954c3bbb0379e79fe70bcb4796810ec355f4b94" translate="yes" xml:space="preserve">
          <source>When I've got several faux-links, I prefer to give them a class of 'no-link'.</source>
          <target state="translated">내가 여러 개의 가짜 링크를 받았을 때 나는 그들에게 'no-link'클래스를 선호한다.</target>
        </trans-unit>
        <trans-unit id="f8e2369b8d99375a6e5639486043b3d2146e4b56" translate="yes" xml:space="preserve">
          <source>When mouse hovers over the link, it doesn't show that it is a script.</source>
          <target state="translated">마우스를 링크 위로 가져 가면 스크립트임을 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="61b44bbc89b917fa7c30a0f1a3f58894ad655538" translate="yes" xml:space="preserve">
          <source>Which will not do anything.</source>
          <target state="translated">아무것도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a314a0ef6189eb65d5b3e4debee37ac4fae3168f" translate="yes" xml:space="preserve">
          <source>Which “href” value should I use for JavaScript links, “#” or “javascript:void(0)”</source>
          <target state="translated">JavaScript 링크 &quot;#&quot;또는 &quot;javascript : void (0)&quot;에 사용해야하는 &quot;href&quot;값</target>
        </trans-unit>
        <trans-unit id="2a61d37d475e6b6597176eb106fb6d1c59b1e618" translate="yes" xml:space="preserve">
          <source>Will always intercept in case your onclick event fails.</source>
          <target state="translated">onclick 이벤트가 실패하는 경우 항상 차단합니다.</target>
        </trans-unit>
        <trans-unit id="731d0ff294ec0c3887a1f04959fba2a5602adff4" translate="yes" xml:space="preserve">
          <source>Will not have errant load calls happen, or trigger other events based on a hash change</source>
          <target state="translated">잘못된로드 호출이 발생하지 않거나 해시 변경을 기반으로 다른 이벤트를 트리거하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3738d55a9cad1f32952968ee8cbc0cf807b6e3f9" translate="yes" xml:space="preserve">
          <source>You can always do the following:</source>
          <target state="translated">언제든지 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="da7531d336c39a47e5eaed5fa94893126500dc7d" translate="yes" xml:space="preserve">
          <source>You can attach events (click, hover, etc.) on almost every element, so why not just use a &lt;code&gt;span&lt;/code&gt;or a &lt;code&gt;div&lt;/code&gt;?</source>
          <target state="translated">거의 모든 요소에 이벤트 (클릭, 호버 등)를 첨부 할 수 있으므로 &lt;code&gt;span&lt;/code&gt; 또는 &lt;code&gt;div&lt;/code&gt; 만 사용하는 것이 어떻습니까?</target>
        </trans-unit>
        <trans-unit id="ab971355f6658d7288c950fff818ea0aa5ea9f9b" translate="yes" xml:space="preserve">
          <source>You can simply use a &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; instead to do things or any other element like b, span or whatever fits there as per your need, because you are allowed to add events on all the elements.</source>
          <target state="translated">모든 요소에 이벤트를 추가 할 수 있으므로 &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; 을 대신 사용하여 b, span 또는 필요에 따라 적절한 요소를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e7a36ec7a3315f07240fb3666b9b0045b809b1ef" translate="yes" xml:space="preserve">
          <source>You should always strive for graceful degradation (in the event that the user doesn't have JavaScript enabled...and when it is with specs. and budget).  Also, it is considered bad form to use JavaScript attributes and protocol directly in HTML.</source>
          <target state="translated">사용자가 JavaScript를 사용할 수없는 경우 (사양 및 예산이있는 경우)에는 항상 정상적인 성능 저하를 위해 노력해야합니다. 또한 JavaScript 속성과 프로토콜을 HTML에서 직접 사용하는 것은 잘못된 형식으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="619ece4847838fa5df03de55dd03cce3f3c0a698" translate="yes" xml:space="preserve">
          <source>You're spending your time writing incredibly overly verbose code - which has very little (if any) benefit to your codebase.</source>
          <target state="translated">엄청나게 지나치게 장황한 코드를 작성하는 데 시간을 투자하고 있습니다.이 코드는 코드베이스에 거의 이점이 없습니다.</target>
        </trans-unit>
        <trans-unit id="8699b249c4dcf2e85dacd055f92f3fd58667de39" translate="yes" xml:space="preserve">
          <source>and omit both &lt;code&gt;href=&quot;#&quot;&lt;/code&gt; and &lt;code&gt;href=&quot;javascript:void(0)&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;href=&quot;#&quot;&lt;/code&gt; 및 &lt;code&gt;href=&quot;javascript:void(0)&quot;&lt;/code&gt; 모두 생략하십시오.</target>
        </trans-unit>
        <trans-unit id="b54c9fdd392c0c6c0634d55188bd5d64387083d8" translate="yes" xml:space="preserve">
          <source>instantiates new copy of engine</source>
          <target state="translated">엔진의 새로운 사본을 인스턴스화</target>
        </trans-unit>
        <trans-unit id="571d5bc739cc9f7bbab15b2de12fe6c2903c98a9" translate="yes" xml:space="preserve">
          <source>instead</source>
          <target state="translated">instead</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="dc07658cb62d9aef55e874007ead4934d0b9c2bc" translate="yes" xml:space="preserve">
          <source>pollutes history</source>
          <target state="translated">역사를 오염</target>
        </trans-unit>
        <trans-unit id="5b0a43ff2ce4a480c6dd584e5f5cc50c43071f56" translate="yes" xml:space="preserve">
          <source>runs in global scope and doesn't respect event system.</source>
          <target state="translated">글로벌 범위에서 실행되며 이벤트 시스템을 존중하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ab7fd42e195f24dca7b841f1fff928b3bf815ee3" translate="yes" xml:space="preserve">
          <source>with little bit of jQuery</source>
          <target state="translated">약간의 jQuery와 함께</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
