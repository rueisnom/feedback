<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/1394797">
    <body>
      <group id="1394797">
        <trans-unit id="ba486396875db8ae9ec14bf5a1239c6e235f52be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;!&lt;/strong&gt;   If the repo has more than one stash, see which one to apply to the new-branch:</source>
          <target state="translated">&lt;strong&gt;!&lt;/strong&gt; Если в репо более одного тайника, посмотрите, какой из них применить к новой ветке:</target>
        </trans-unit>
        <trans-unit id="2bf695ac2647c1533249c9022a8f96def0a7b1b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Warning:&lt;/em&gt;&lt;/strong&gt; There is also a danger if you rebase after branching, which is &lt;a href=&quot;https://stackoverflow.com/a/36463546/99777&quot;&gt;described here&lt;/a&gt;.  The only way to avoid that is to create a new history using cherry-pick.  That link describes &lt;strong&gt;the safest fool-proof method&lt;/strong&gt;.  If you have uncommitted changes, you may want to &lt;code&gt;git stash&lt;/code&gt; at the start and &lt;code&gt;git stash pop&lt;/code&gt; at the end.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Предупреждение.&lt;/em&gt;&lt;/strong&gt; Существует также опасность перебазирования после ветвления, которое &lt;a href=&quot;https://stackoverflow.com/a/36463546/99777&quot;&gt;описано здесь&lt;/a&gt; . Единственный способ избежать этого - создать новую историю с помощью cherry-pick. Эта ссылка описывает &lt;strong&gt;самый безопасный метод защиты от ошибок&lt;/strong&gt; . Если у вас есть незафиксированные изменения, вы можете захотеть использовать &lt;code&gt;git stash&lt;/code&gt; в начале и &lt;code&gt;git stash pop&lt;/code&gt; в конце.</target>
        </trans-unit>
        <trans-unit id="1dc09849dcad3761871d9ee917e048cf9c22dde7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Warning:&lt;/em&gt;&lt;/strong&gt;&lt;code&gt;git branch -f master origin/master&lt;/code&gt; will &lt;em&gt;reset the tracking information&lt;/em&gt; for that branch.  So if you have configured your &lt;code&gt;master&lt;/code&gt; branch to push to somewhere other than &lt;code&gt;origin/master&lt;/code&gt; then that configuration will be lost.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Предупреждение:&lt;/em&gt;&lt;/strong&gt; &lt;code&gt;git branch -f master origin/master&lt;/code&gt; &lt;em&gt;сбросит информацию об отслеживании&lt;/em&gt; для этой ветви. Таким образом, если вы настроили свою &lt;code&gt;master&lt;/code&gt; ветвь так, чтобы она передавалась куда-либо, кроме &lt;code&gt;origin/master&lt;/code&gt; тогда эта конфигурация будет потеряна.</target>
        </trans-unit>
        <trans-unit id="7f9ad6c0ec2a73b8d713e3d81a49de29bff79dc9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Command&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Command&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e2477858102f7652389b875f96a2e140e6fd64b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If you have been making commits&lt;/strong&gt; on your main branch while you coded, but you now want to move those commits to a different branch, this is a quick way:</source>
          <target state="translated">&lt;strong&gt;Если вы выполняли коммиты&lt;/strong&gt; в своей основной ветке во время кодирования, но теперь хотите переместить эти коммиты в другую ветку, это быстрый способ:</target>
        </trans-unit>
        <trans-unit id="1c6238087e049f3d0691d7bd7a1ccbf11bdc4c9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SourceTree&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;SourceTree&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="364298da3e6538acf42867a5ddd243b1de71dc7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TortoiseGIT&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;TortoiseGIT&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e34b3b0ea3d7be25a4e72b4749dea317e42a1f26" translate="yes" xml:space="preserve">
          <source>All you need to do is switch to the new branch in GitHub Desktop, and it will prompt you to leave your changes on the current branch (which will be stashed), or to bring your changes with you to the new branch. Just choose the second option, to bring the changes to the new branch. You can then commit as usual.</source>
          <target state="translated">Всё,что вам нужно сделать,это перейти на новое ответвление в GitHub Desktop,и оно попросит вас оставить ваши изменения на текущем ответвлении (которое будет спрятано),или перенести их с собой в новое ответвление.Просто выберите второй вариант,чтобы перенести изменения в новое ответвление.После этого вы можете выполнить фиксацию,как обычно.</target>
        </trans-unit>
        <trans-unit id="c85c58dec99e5ab948d510b95570ff7548c7b434" translate="yes" xml:space="preserve">
          <source>Alternatively:</source>
          <target state="translated">Alternatively:</target>
        </trans-unit>
        <trans-unit id="af6fe2dfd2b702ee9c4634a1fbec1f0ba87607ff" translate="yes" xml:space="preserve">
          <source>Copy your current history onto a new branch, bringing along any uncommitted changes too:</source>
          <target state="translated">Скопируйте вашу текущую историю в новую ветку,принеся с собой любые нефиксированные изменения:</target>
        </trans-unit>
        <trans-unit id="d74e937433f4ec11a53b474659c010b78ec26526" translate="yes" xml:space="preserve">
          <source>Create a new branch based on this stash, and switch to the new branch:</source>
          <target state="translated">Создайте новую ветку на основе этого тайника и переключитесь на новую ветку:</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Например:</target>
        </trans-unit>
        <trans-unit id="8d2961b41291ba5b61f065ca5a9ade88738ccef9" translate="yes" xml:space="preserve">
          <source>Git 2.23 adds the new &lt;code&gt;switch&lt;/code&gt; subcommand in an attempt to clear some of the confusion that comes from the overloaded usage of &lt;code&gt;checkout&lt;/code&gt; (switching branches, restoring files, detaching HEAD, etc.)</source>
          <target state="translated">Git 2.23 добавляет новую подкоманду &lt;code&gt;switch&lt;/code&gt; в попытке устранить некоторую путаницу, связанную с перегруженным использованием &lt;code&gt;checkout&lt;/code&gt; (переключение веток, восстановление файлов, отключение HEAD и т. Д.)</target>
        </trans-unit>
        <trans-unit id="25d2c2b1aca053db2279c5abae2f58f2560f39a3" translate="yes" xml:space="preserve">
          <source>How do I move the existing uncommitted changes to a new branch and reset my current one?</source>
          <target state="translated">Как перенести существующие неиспользуемые изменения в новую ветку и сбросить текущую?</target>
        </trans-unit>
        <trans-unit id="561541131dd59d2b4ea14dd7f7521dec21ced931" translate="yes" xml:space="preserve">
          <source>I started some work on a new feature and after coding for a bit, I decided this feature should be on its own branch.</source>
          <target state="translated">Я начал кое-какую работу над новой функцией и,немного поработав над ней,решил,что эта функция должна быть в своей ветке.</target>
        </trans-unit>
        <trans-unit id="ce000e487cc15cdd599c5e7a39dafbd95a412e0b" translate="yes" xml:space="preserve">
          <source>I used &lt;a href=&quot;https://stackoverflow.com/a/30927991/4149861&quot;&gt;@Robin&lt;/a&gt; answer &amp;amp; listing all that I did,</source>
          <target state="translated">Я использовал ответ &lt;a href=&quot;https://stackoverflow.com/a/30927991/4149861&quot;&gt;@Robin&lt;/a&gt; и перечислил все, что я сделал,</target>
        </trans-unit>
        <trans-unit id="c7391ed2637e644368f0521e7e43e7864e5a4630" translate="yes" xml:space="preserve">
          <source>I want to reset my current branch while preserving existing work on the new feature.</source>
          <target state="translated">Я хочу сбросить мою текущую ветку,сохранив при этом существующую работу над новой функцией.</target>
        </trans-unit>
        <trans-unit id="6aa389b1da3f6f442903cb6820a91cb3c0e17d71" translate="yes" xml:space="preserve">
          <source>If you commit it, you could also cherry-pick the single commit ID.  I do this often when I start work in master, and then want to create a local branch before I push up to my origin/.</source>
          <target state="translated">Если вы совершаете коммит,вы также можете выбрать идентификатор одиночного коммита.Я часто делаю это,когда начинаю работать в мастере,а затем хочу создать локальную ветку до того,как я перейду к своему происхождению.</target>
        </trans-unit>
        <trans-unit id="b298f57ebc4077b762c6a1ce2866654050fdb7ab" translate="yes" xml:space="preserve">
          <source>Move existing, uncommitted work to a new branch in Git</source>
          <target state="translated">Переместить существующие,незанятые работы в новый филиал в Git.</target>
        </trans-unit>
        <trans-unit id="5a1270962cf994901a5b46427b97c33d06a12e26" translate="yes" xml:space="preserve">
          <source>Now force the original &quot;messy&quot; branch to roll back: (without switching to it)</source>
          <target state="translated">Теперь заставь первоначальную &quot;грязную&quot; ветку откатиться назад:(не переключаясь на нее)</target>
        </trans-unit>
        <trans-unit id="c224788c05df4ff1d1d8812f96b7dd74d158b5a8" translate="yes" xml:space="preserve">
          <source>Or inspect all stashes at once:</source>
          <target state="translated">Или проверьте все тайники сразу:</target>
        </trans-unit>
        <trans-unit id="ac1b7836245be583a0314602f255f394611b0b12" translate="yes" xml:space="preserve">
          <source>Right-click on your repository and then use TortoiseGit-&amp;gt;Switch/Checkout</source>
          <target state="translated">Щелкните правой кнопкой мыши по вашему репозиторию и затем используйте TortoiseGit-&amp;gt; Switch / Checkout</target>
        </trans-unit>
        <trans-unit id="4cb2473d1a9663dbfcce1afa77b723f19484009f" translate="yes" xml:space="preserve">
          <source>Save current changes to a temp stash:</source>
          <target state="translated">Сохраните текущие изменения в временной заначке:</target>
        </trans-unit>
        <trans-unit id="a402f9933183f964ca68793227503e860d765bd4" translate="yes" xml:space="preserve">
          <source>Starting with this version of Git, replace above's command with:</source>
          <target state="translated">Начиная с этой версии Git'а,замените вышеприведённую команду:</target>
        </trans-unit>
        <trans-unit id="ba9131ec417c9a8ab0e8d4f31502a4f4fed17c56" translate="yes" xml:space="preserve">
          <source>Switch branch - it will move your changes to new-branch. Then you can commit changes.</source>
          <target state="translated">Переключить ветку-она переместит ваши изменения в новую ветку.Затем вы можете зафиксировать изменения.</target>
        </trans-unit>
        <trans-unit id="79c9d3dda07e1c3a8f3955036e6e9b7455a661f5" translate="yes" xml:space="preserve">
          <source>The behavior is identical and remains unchanged.</source>
          <target state="translated">Поведение идентично и остается неизменным.</target>
        </trans-unit>
        <trans-unit id="4ec2ca34cf5f8ab05811622d65ba6f5de8d8e208" translate="yes" xml:space="preserve">
          <source>The changes in the working directory and changes staged in index &lt;em&gt;do not belong to any branch&lt;/em&gt; yet. This changes the branch where those modifications would end in.</source>
          <target state="translated">Изменения в рабочем каталоге и внесенные в индекс изменения &lt;em&gt;еще не принадлежат ни одной ветви&lt;/em&gt; . Это изменяет ветку, в которой эти модификации заканчиваются.</target>
        </trans-unit>
        <trans-unit id="81c2a72e26eb6d3af7267ab7e4bddd00421a2cb4" translate="yes" xml:space="preserve">
          <source>The common scenario is the following: I forgot to create the new branch for the new feature, and was doing all the work in the old feature branch. I have commited all the &quot;old&quot; work to the master branch, and I want my new branch to grow from the &quot;master&quot;. I have not made a single commit of my new work.
Here is the branch structure:
&quot;master&quot;-&amp;gt;&quot;Old_feature&quot;</source>
          <target state="translated">Общий сценарий следующий: я забыл создать новую ветку для новой функции и выполнял всю работу в старой ветви функции. Я передал всю &amp;laquo;старую&amp;raquo; работу в ветку master и хочу, чтобы моя новая ветвь выросла из &amp;laquo;master&amp;raquo;. Я не сделал ни одного коммита моей новой работы. Вот структура ветви: &quot;master&quot; -&amp;gt; &quot;Old_feature&quot;</target>
        </trans-unit>
        <trans-unit id="d6bfe534338f93bba2f16566e3b76e30c418a379" translate="yes" xml:space="preserve">
          <source>There is actually a really easy way to do this with GitHub Desktop now that I don't believe was a feature before.</source>
          <target state="translated">На самом деле есть действительно простой способ сделать это с GitHub Desktop теперь,когда я не верю,что это была функция раньше.</target>
        </trans-unit>
        <trans-unit id="1c0653175c372182c14b05b1fd0df72ef1681996" translate="yes" xml:space="preserve">
          <source>There is alot you can do with cherry-pick, as described &lt;a href=&quot;https://git-scm.com/docs/git-cherry-pick&quot;&gt;here&lt;/a&gt;, but this could be a use-case for you.</source>
          <target state="translated">Существует много возможностей, которые вы можете использовать с cherry-pick, как описано &lt;a href=&quot;https://git-scm.com/docs/git-cherry-pick&quot;&gt;здесь&lt;/a&gt; , но это может быть полезным для вас.</target>
        </trans-unit>
        <trans-unit id="bd7ed0fafb9ce8b6d4a8a896071624ec143d1d56" translate="yes" xml:space="preserve">
          <source>This may be helpful for all using tools for GIT</source>
          <target state="translated">Это может быть полезно для всех,кто использует инструменты для GIT</target>
        </trans-unit>
        <trans-unit id="da077db9b311b66042457479300697ab669d5d01" translate="yes" xml:space="preserve">
          <source>This will leave your current branch as it is, create and checkout a new branch and keep all your changes. You can then stage changes in files to commit with:</source>
          <target state="translated">Это оставит ваше текущее ответвление как есть,создаст и извлечёт новое ответвление и сохранит все ваши изменения.Затем вы можете зафиксировать изменения в файлах для фиксации:</target>
        </trans-unit>
        <trans-unit id="b4a215ebaea7d82ec9461232c8095db4ee383b5f" translate="yes" xml:space="preserve">
          <source>Tip: use tab key to reduce typing the stash name.</source>
          <target state="translated">Совет:используйте клавишу табуляции,чтобы уменьшить набор имени тайника.</target>
        </trans-unit>
        <trans-unit id="becde14ef41bbf13dfecef5d85c8bfcb751caeb9" translate="yes" xml:space="preserve">
          <source>Update 2020 / Git 2.23</source>
          <target state="translated">Обновление 2020 Git 2.23</target>
        </trans-unit>
        <trans-unit id="85ebfb4fe55a1ee0f5b07ae2dd384843a6e72cfb" translate="yes" xml:space="preserve">
          <source>Use the &quot;Checkout&quot; button to switch branch. You will see the &quot;checkout&quot; button at the top after clicking on a branch. Changes from the current branch will be applied automatically.  Then you can commit them.</source>
          <target state="translated">Для переключения ответвления используйте кнопку &quot;Checkout&quot;.После нажатия на ветку в верхней части вы увидите кнопку &quot;Оформить заказ&quot;.Изменения из текущего ответвления будут применены автоматически.Затем вы можете зафиксировать их.</target>
        </trans-unit>
        <trans-unit id="9f8a1626b883c2f3276b89ccbee6f458981b3c6b" translate="yes" xml:space="preserve">
          <source>Use the following:</source>
          <target state="translated">Используйте следующее:</target>
        </trans-unit>
        <trans-unit id="98e4ff14af1895227f442b3b0d38996c483e9fa3" translate="yes" xml:space="preserve">
          <source>You don't &lt;em&gt;reset&lt;/em&gt; your original branch, it stays as it is. The last commit on &lt;code&gt;&amp;lt;old-branch&amp;gt;&lt;/code&gt; will still be the same. Therefore you &lt;code&gt;checkout -b&lt;/code&gt; and then commit.</source>
          <target state="translated">Вы не &lt;em&gt;сбрасываете&lt;/em&gt; исходную ветку, она остается как есть. Последний коммит на &lt;code&gt;&amp;lt;old-branch&amp;gt;&lt;/code&gt; останется прежним. Поэтому вы &lt;code&gt;checkout -b&lt;/code&gt; а затем фиксируете.</target>
        </trans-unit>
        <trans-unit id="4501ad41b9c25e2ac0a25cb11c60f77c18080098" translate="yes" xml:space="preserve">
          <source>and commit to your &lt;em&gt;new branch&lt;/em&gt; with:</source>
          <target state="translated">и добавьте в свою &lt;em&gt;новую ветку&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="3a87edc1a77b3ef1079647eaea86b842bb2e2c5a" translate="yes" xml:space="preserve">
          <source>and inspect the individual stash by,</source>
          <target state="translated">и осмотрите индивидуальный тайник,</target>
        </trans-unit>
        <trans-unit id="89023c029834bb950e9973e068dc6f1315c10e5e" translate="yes" xml:space="preserve">
          <source>or if you had made 4 commits:</source>
          <target state="translated">или если бы вы сделали 4 обязательства:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
