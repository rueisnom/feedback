<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/179123">
    <body>
      <group id="179123">
        <trans-unit id="2d83e069dedd71fdecfa4fdbff3e7d05d4379f90" translate="yes" xml:space="preserve">
          <source>&amp;darr;</source>
          <target state="translated">&amp;darr;</target>
        </trans-unit>
        <trans-unit id="ea81b36fda5c4b4efdf3377d8485597e3f78d325" translate="yes" xml:space="preserve">
          <source>&amp;hellip;however, this can make multi-line commit messages or small corrections more cumbersome to enter.</source>
          <target state="translated">그러나 여러 줄 커밋 메시지 나 작은 수정 사항을 입력하기가 더 번거로울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="354c6cc208269f5a5fe067f22626f0bf4c409c79" translate="yes" xml:space="preserve">
          <source>&amp;larr;</source>
          <target state="translated">&amp;larr;</target>
        </trans-unit>
        <trans-unit id="4466f5ea01bad40a521f3168b5b7a9dbde092776" translate="yes" xml:space="preserve">
          <source>&amp;rarr;</source>
          <target state="translated">&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="b91878827a2aeacb8a8be36c9f47b30ac9d58817" translate="yes" xml:space="preserve">
          <source>&amp;uarr;</source>
          <target state="translated">&amp;uarr;</target>
        </trans-unit>
        <trans-unit id="d5666fa217269dfecdbf9e16efa7f88d709dc058" translate="yes" xml:space="preserve">
          <source>(As you see, I'm not that experienced in Vim, so if I used the wrong 'lingo' to explain what's happening, feel free to correct me!)</source>
          <target state="translated">(보시다시피, 나는 Vim에서 그 경험이 많지 않으므로 잘못된 'lingo'를 사용하여 무슨 일이 일어나고 있는지 설명하면 자유롭게 수정하십시오!)</target>
        </trans-unit>
        <trans-unit id="e821587bbb25ca29016fd0ce5d0c0d350e8b521d" translate="yes" xml:space="preserve">
          <source>(Replace &lt;b&gt;commit_count&lt;/b&gt; with number of commits that you want to edit.) This command launches your editor. Mark the first commit (the one that you want to change) as &amp;ldquo;edit&amp;rdquo; instead of &amp;ldquo;pick&amp;rdquo;, then save and exit your editor. Make the change you want to commit and then run</source>
          <target state="translated">&lt;b&gt;commit_count&lt;/b&gt; 를 편집하려는 커밋 수로 바꿉니다.이 명령은 편집기를 시작합니다. 첫 번째 커밋 (변경하려는 커밋)을 &quot;pick&quot;대신 &quot;edit&quot;로 표시 한 다음 편집기를 저장하고 종료하십시오. 커밋하려는 변경을 수행 한 후 실행</target>
        </trans-unit>
        <trans-unit id="f604eb308400b6fcc9b139d918e56d9385e739d6" translate="yes" xml:space="preserve">
          <source>* &lt;em&gt;Watch out for options like &lt;code&gt;--hard&lt;/code&gt; and &lt;code&gt;--force&lt;/code&gt; though &amp;mdash; they can discard data.&lt;/em&gt;
*  &lt;em&gt;Also, don't rewrite history on any branches you're collaborating on.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;--hard&lt;/code&gt; 및 &lt;code&gt;--force&lt;/code&gt; 와 같은 옵션은 데이터를 버릴 수 있습니다.&lt;/em&gt; * &lt;em&gt;또한 공동 작업중인 지점의 기록을 다시 쓰지 마십시오.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="70f59dd18f4fa6d27f2733af8cec8e49a34e118e" translate="yes" xml:space="preserve">
          <source>*Where 5 is the number of commit messages you want to change (so if you want to change the 10th to last commit, you type in 10).</source>
          <target state="translated">* 여기서 5는 변경하려는 커밋 메시지의 수입니다. 따라서 10 번째 커밋을 마지막 커밋으로 변경하려면 10을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">,</target>
        </trans-unit>
        <trans-unit id="dd7db60a25d2f33c49897bafb010b021104ce84c" translate="yes" xml:space="preserve">
          <source>: Rebasing will commence. If all is well, the output will end &quot;Completed successfully&quot;. &lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt;&lt;em&gt; I've recently seen it fail with &lt;code&gt;Unable to create 'project_path/.git/index.lock': File exists.&lt;/code&gt; when trying to modify multiple commit messages at the same time. Not sure exactly what the issue is, or whether it will be fixed in a future version of Sourcetree, but if this happens would recommend rebasing them one at a time (slower but seems more reliable).&lt;/em&gt;</source>
          <target state="translated">: Rebasing이 시작됩니다. 모두 제대로되면 출력이 &quot;완료&quot;로 종료됩니다. &lt;strong&gt;&lt;em&gt;참고 :&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;최근에 &lt;code&gt;Unable to create 'project_path/.git/index.lock': File exists.&lt;/code&gt; 실패했습니다 . 파일이 있습니다.&lt;/em&gt; &lt;em&gt;여러 커밋 메시지를 동시에 수정하려고 할 때.&lt;/em&gt; &lt;em&gt;문제가 정확히 무엇인지 또는 향후 버전의 Sourcetree에서 수정 될지 확실하지 않지만,이 문제가 발생하면 한 번에 하나씩 다시 조정하는 것이 좋습니다 (느리지 만 더 안정적인 것 같습니다).&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d6f3372616ad038c9f426eb85fec13882c496b89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--&lt;/code&gt; separates filter-branch options from revision options.</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; 필터 분기 옵션을 개정 옵션과 분리합니다.</target>
        </trans-unit>
        <trans-unit id="a383ad9b9e5f67ceaba1d76c92508e786ffd7989" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--all&lt;/code&gt; will make sure that all &lt;em&gt;branches&lt;/em&gt; and &lt;em&gt;tags&lt;/em&gt; are rewritten.</source>
          <target state="translated">&lt;code&gt;--all&lt;/code&gt; 은 모든 &lt;em&gt;브랜치&lt;/em&gt; 와 &lt;em&gt;태그&lt;/em&gt; 가 다시 작성되도록합니다.</target>
        </trans-unit>
        <trans-unit id="ae3e3e0c7f658ac59fa98de794221855efc3c05e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-f&lt;/code&gt; will enforce the execution of the operation. This is necessary if the temporary directory is already present or if there are already references stored under &lt;code&gt;refs/original&lt;/code&gt;. If that is not the case, you can drop this flag.</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; 는 작업 실행을 강제합니다. 임시 디렉토리가 이미 존재하거나 &lt;code&gt;refs/original&lt;/code&gt; 에 이미 저장된 참조가있는 경우에 필요합니다. 그렇지 않은 경우이 플래그를 삭제할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3656c5170c626772a9ee01596ec6da06d997c577" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset&lt;/code&gt; can help you to break one commit into multiple commits too:</source>
          <target state="translated">&lt;code&gt;git reset&lt;/code&gt; 은 하나의 커밋을 여러 커밋으로 나누는 데 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="89796e3472e2992c48df1f6e192ad34723e62a70" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Using the &lt;code&gt;-o&lt;/code&gt; (&lt;code&gt;--only&lt;/code&gt;) flag to make sure you change only the commit message)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;커밋 메시지 만 변경하려면 &lt;code&gt;-o&lt;/code&gt; ( &lt;code&gt;--only&lt;/code&gt; ) 플래그를 사용하십시오.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fd5546f138dc2cc3211e60b308b58f99abbdea94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;...Or... for commits that have already been pushed:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;... 또는 ... 이미 푸시 된 커밋의 경우 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2e0c94b4744713fbcd803dcf727286da47ec1745" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For commits that haven't yet been pushed to a remote:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;아직 원격으로 푸시되지 않은 커밋의 경우 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0554c5b83012a8ded9a19263344413baf6ef925e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important note:&lt;/strong&gt; When you use the force push directly you might end up with code issues that other developers are working on the same branch. So to avoid those conflicts, you need to pull the code from your branch before making the &lt;strong&gt;force push&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;중요 사항 :&lt;/strong&gt; 강제 푸시를 직접 사용하면 다른 개발자가 동일한 브랜치에서 작업하는 코드 문제가 발생할 수 있습니다. 따라서 이러한 충돌을 피하려면 &lt;strong&gt;강제 푸시&lt;/strong&gt; 하기 전에 지점에서 코드를 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="e05b402ad172ef685c44cd07af20ef4fa48c1ee5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Please read my entire answer before doing it.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;하기 전에 전체 답변을 읽으십시오.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5cbde27676208b6be2688cefd241c151fe5a3206" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remember&lt;/strong&gt; to specify &lt;code&gt;--soft&lt;/code&gt; instead of &lt;code&gt;--hard&lt;/code&gt;, otherwise you lose that commit entirely.</source>
          <target state="translated">&lt;code&gt;--hard&lt;/code&gt; 대신 &lt;code&gt;--soft&lt;/code&gt; 를 지정 &lt;strong&gt;해야&lt;/strong&gt; 합니다. 그렇지 않으면 커밋이 완전히 손실됩니다.</target>
        </trans-unit>
        <trans-unit id="c668d5d92da7ec12bec1eac6788154d1bc2f1c2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning: be cautious about amending commits that you have already shared with other people.&lt;/strong&gt; Amending commits essentially &lt;em&gt;rewrites&lt;/em&gt; them to have different &lt;a href=&quot;http://en.wikipedia.org/wiki/SHA-1&quot;&gt;SHA&lt;/a&gt; IDs, which poses a problem if other people have copies of the old commit that you've rewritten. Anyone who has a copy of the old commit will need to synchronize their work with your newly re-written commit, which can sometimes be difficult, so make sure you coordinate with others when attempting to rewrite shared commit history, or just avoid rewriting shared commits altogether.</source>
          <target state="translated">&lt;strong&gt;경고 : 이미 다른 사람과 공유 한 커밋을 수정하는 데주의하십시오.&lt;/strong&gt; 수정 커밋은 본질적으로 다른 &lt;a href=&quot;http://en.wikipedia.org/wiki/SHA-1&quot;&gt;SHA&lt;/a&gt; ID를 갖도록 &lt;em&gt;다시 작성&lt;/em&gt; 하므로 다른 사람들이 이전에 작성한 커밋 사본을 다시 작성하면 문제가 발생합니다. 이전 커밋의 사본을 가진 사람은 작업을 새로 다시 작성된 커밋과 동기화해야 할 수 있습니다. 때로는 어려울 수 있으므로 공유 커밋 기록을 다시 쓰려고 할 때 다른 사람과 조정하거나 공유 커밋을 다시 쓰지 않도록하십시오. 전부.</target>
        </trans-unit>
        <trans-unit id="a0aa2ab5846fc6a469a41ebfe82dcc30df985134" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning: force-pushing will overwrite the remote branch with the state of your local one&lt;/strong&gt;. If there are commits on the remote branch that you don't have in your local branch, you &lt;em&gt;will&lt;/em&gt; lose those commits.</source>
          <target state="translated">&lt;strong&gt;경고 : 강제 푸시는 원격 분기를 로컬 분기의 상태로 덮어 씁니다&lt;/strong&gt; . 로컬 지점에없는 원격 지점에 커밋이 있으면 해당 커밋 &lt;em&gt;이&lt;/em&gt; 손실됩니다.</target>
        </trans-unit>
        <trans-unit id="05c42590ee8fe1b57940e9f9bba56832663aa580" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; force pushing your changes will overwrite the remote branch with your local one. Make sure that you aren't going to be overwriting anything that you want to keep. Also be cautious about force pushing an amended (rewritten) commit if anyone else shares the branch with you, because they'll need to rewrite their own history if they have the old copy of the commit that you've just rewritten.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 변경 사항을 강제로 누르면 원격 지점을 로컬 지점으로 덮어 씁니다. 보관하고 싶은 것을 덮어 쓰지 않도록하십시오. 또한 누군가가 당신과 지점을 공유하면 수정 된 (다시 작성 된) 커밋을 강제로 밀지 않도록 조심하십시오. 방금 다시 쓴 커밋의 사본이 있으면 자신의 기록을 다시 작성해야하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="4f04f666c1def44a685b9a58ee1333d9271f876e" translate="yes" xml:space="preserve">
          <source>All commands can be prefixed with a &quot;range&quot;, e.g.</source>
          <target state="translated">모든 명령 앞에 &quot;범위&quot;를 붙일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="738d42d2a163ac0883ea95842ce4cc479c3f8946" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;git rebase -i origin/master&lt;/code&gt;is a nice mantra that will always present you with the commits you have done on top of master, and give you the option to amend, delete, reorder or squash. No need to get hold of that hash first.</source>
          <target state="translated">또한 &lt;code&gt;git rebase -i origin/master&lt;/code&gt; 는 항상 마스터 위에서 수행 한 커밋을 표시하고 수정, 삭제, 재정렬 또는 스쿼시 옵션을 제공하는 훌륭한 지침입니다. 해시를 먼저 잡을 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="b989269017a4eb81c60ad36b273636181e7aed0d" translate="yes" xml:space="preserve">
          <source>Amend</source>
          <target state="translated">Amend</target>
        </trans-unit>
        <trans-unit id="3a441e515dea998e6b6574e6787f20dbdf1acdd6" translate="yes" xml:space="preserve">
          <source>Amending the most recent commit message</source>
          <target state="translated">가장 최근의 커밋 메시지 수정</target>
        </trans-unit>
        <trans-unit id="633a78d37060f88c799ce35a31c4524455ef413c" translate="yes" xml:space="preserve">
          <source>An editor will come up, with a list of all commits since the one you gave.</source>
          <target state="translated">당신이 준 커밋 이후 모든 커밋 목록이있는 에디터가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="f29548a0ced6516f82698ab95cf3242f963baa7c" translate="yes" xml:space="preserve">
          <source>Another option is to use interactive rebase.
This allows you to edit any message you want to update even if it's not the latest message.</source>
          <target state="translated">또 다른 옵션은 대화식 리베이스를 사용하는 것입니다. 최신 메시지가 아닌 경우에도 업데이트하려는 메시지를 편집 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="12c99922ad5f0d621f9fd1198a80b98d98f75d73" translate="yes" xml:space="preserve">
          <source>As already mentioned, &lt;code&gt;git commit --amend&lt;/code&gt; is the way to overwrite the last commit. One note: if you would like to also &lt;strong&gt;overwrite the files&lt;/strong&gt;, the command would be</source>
          <target state="translated">이미 언급했듯이 &lt;code&gt;git commit --amend&lt;/code&gt; 는 마지막 커밋을 덮어 쓰는 방법입니다. 참고 사항 : &lt;strong&gt;파일을 덮어 쓰&lt;/strong&gt; 려면 명령은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d043c3daef4d8ca33c4d6da32d502453338ba5d2" translate="yes" xml:space="preserve">
          <source>But if you want to edit several commits in a row, you should use rebasing instead:</source>
          <target state="translated">그러나 여러 커밋을 연속으로 편집하려면 rebasing을 대신 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="fc81dfbcc92d6db644079e9fd1e3221331e30949" translate="yes" xml:space="preserve">
          <source>Change &lt;code&gt;pick&lt;/code&gt; to &lt;code&gt;reword&lt;/code&gt; (or on old versions of Git, to &lt;code&gt;edit&lt;/code&gt;) in front of any commits you want to fix.</source>
          <target state="translated">수정하려는 커밋 앞에서 &lt;code&gt;pick&lt;/code&gt; 을 &lt;code&gt;reword&lt;/code&gt; (또는 이전 버전의 Git에서 &lt;code&gt;edit&lt;/code&gt; )로 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="cd60416657978941670ac10679df331d4ea07fd7" translate="yes" xml:space="preserve">
          <source>Change the commit in any way you like.</source>
          <target state="translated">원하는 방식으로 커밋을 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="d46c931ce468b46e5abf20d61245248f3348d2b0" translate="yes" xml:space="preserve">
          <source>Changing the message of a commit that you've already pushed to your remote branch</source>
          <target state="translated">이미 원격 지사로 푸시 한 커밋 메시지 변경</target>
        </trans-unit>
        <trans-unit id="79cbc5eb672a54c2b82572afd52f2a6a4f85e598" translate="yes" xml:space="preserve">
          <source>Click</source>
          <target state="translated">Click</target>
        </trans-unit>
        <trans-unit id="1dec358be2f5904a55a78b4bf8dc49b6430cce90" translate="yes" xml:space="preserve">
          <source>Click the &quot;Edit Message&quot; button.</source>
          <target state="translated">&quot;메시지 편집&quot;버튼을 클릭하십시오.</target>
        </trans-unit>
        <trans-unit id="dd6a02a553da4cb247f914011dd67c37487ec082" translate="yes" xml:space="preserve">
          <source>Ctrl</source>
          <target state="translated">Ctrl</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="482848e61e0cb57d443b83b93dbd01b3c2270228" translate="yes" xml:space="preserve">
          <source>Due to the backup of your old references, you can easily go back to the state before executing the command.</source>
          <target state="translated">이전 참조의 백업으로 인해 명령을 실행하기 전에 상태로 쉽게 돌아갈 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d19f7fe68caa759dd89c5b936538ad9c08a6667" translate="yes" xml:space="preserve">
          <source>Edit the message as desired in the dialog that comes up and then click</source>
          <target state="translated">대화 상자가 나타나면 원하는대로 메시지를 편집 한 다음</target>
        </trans-unit>
        <trans-unit id="2b9eceb7a86a9f577ef80586c5c1d7fde9ff493d" translate="yes" xml:space="preserve">
          <source>Enter</source>
          <target state="translated">Enter</target>
        </trans-unit>
        <trans-unit id="1f7a4f9e2f70d0b81cffc15ab30fd344aeb34fb3" translate="yes" xml:space="preserve">
          <source>Esc</source>
          <target state="translated">Esc</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="0e953b87fb65331535cd13602b7042eba5d8c5f0" translate="yes" xml:space="preserve">
          <source>Find the commit you want, change &lt;code&gt;pick&lt;/code&gt; to &lt;code&gt;r&lt;/code&gt; (&lt;code&gt;reword&lt;/code&gt;), and save and close the file. Done!</source>
          <target state="translated">원하는 커밋을 찾고 &lt;code&gt;pick&lt;/code&gt; 을 &lt;code&gt;r&lt;/code&gt; ( &lt;code&gt;reword&lt;/code&gt; )로 변경 한 다음 파일을 저장하고 닫습니다. 끝난!</target>
        </trans-unit>
        <trans-unit id="5c693c9d95a317d3f4014446be294772668a131b" translate="yes" xml:space="preserve">
          <source>Follow the steps in &lt;a href=&quot;https://stackoverflow.com/questions/17604232#23239109&quot;&gt;this answer&lt;/a&gt;, which are similar to above, but require a further command to be run from the command line (&lt;code&gt;git push origin &amp;lt;branch&amp;gt; -f&lt;/code&gt;) to force-push the branch. I would recommend reading it all and applying the necessary caution!</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/17604232#23239109&quot;&gt;이 답변&lt;/a&gt; 의 단계를 따르십시오. 위와 비슷하지만 &lt;code&gt;git push origin &amp;lt;branch&amp;gt; -f&lt;/code&gt; 를 강제 푸시 하려면 명령 줄에서 추가 명령을 실행해야합니다 ( git push origin &amp;lt;branch&amp;gt; -f ). 모든 내용을 읽고 필요한주의를 기울이는 것이 좋습니다!</target>
        </trans-unit>
        <trans-unit id="aabc72f89b7e503ec80d1cd176e62a540d554afa" translate="yes" xml:space="preserve">
          <source>For anyone looking for a Windows/Mac GUI to help with editing older messages (i.e. not just the latest message), I'd recommend &lt;a href=&quot;http://www.sourcetreeapp.com&quot;&gt;Sourcetree&lt;/a&gt;. The steps to follow are below.</source>
          <target state="translated">오래된 메시지 (예 : 최신 메시지뿐만 아니라)를 편집하는 데 도움이되는 Windows / Mac GUI를 찾는 사람이라면 &lt;a href=&quot;http://www.sourcetreeapp.com&quot;&gt;Sourcetree를 사용하는&lt;/a&gt; 것이 좋습니다. 다음 단계는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="56a3e95e1be2395d8937cd2c69606bcd6173d273" translate="yes" xml:space="preserve">
          <source>For each commit you want to &lt;em&gt;reword&lt;/em&gt;, Git will drop you back into your editor. For each commit you want to &lt;em&gt;edit&lt;/em&gt;, Git drops you into the shell. If you&amp;rsquo;re in the shell:</source>
          <target state="translated">&lt;em&gt;reword&lt;/em&gt; 하려는 커밋마다 Git이 편집기로 다시 돌아갑니다. &lt;em&gt;편집&lt;/em&gt; 하려는 커밋마다 Git이 쉘로 이동합니다. 껍질 안에 있다면 :</target>
        </trans-unit>
        <trans-unit id="85811ef2e3b7a0d2ba4565ff2bd9205dc620d5c4" translate="yes" xml:space="preserve">
          <source>Git will create a temporary directory for rewriting and additionally backup old references in &lt;code&gt;refs/original/&lt;/code&gt;.</source>
          <target state="translated">Git은 &lt;code&gt;refs/original/&lt;/code&gt; 에 재 작성을 위해 임시 디렉토리를 생성하고 이전 참조를 추가로 백업합니다.</target>
        </trans-unit>
        <trans-unit id="64c5aefe857251584dc2fa8076d51d67df6b03c6" translate="yes" xml:space="preserve">
          <source>Good tip:</source>
          <target state="translated">좋은 팁 :</target>
        </trans-unit>
        <trans-unit id="99fda9050cfbb0b15316cca06972614dbc5760db" translate="yes" xml:space="preserve">
          <source>Here you have successfully broken your last commit into two commits.</source>
          <target state="translated">마지막 커밋을 두 개의 커밋으로 나누었습니다.</target>
        </trans-unit>
        <trans-unit id="a690949028d9d5d7fa5460499209a06a6a80f0be" translate="yes" xml:space="preserve">
          <source>How can I change the message? The commit has not been pushed yet.</source>
          <target state="translated">메시지를 어떻게 변경합니까? 커밋이 아직 푸시되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="d7c2de4b7aff480eb623b150a38b2d7f110eacc9" translate="yes" xml:space="preserve">
          <source>How to modify existing, unpushed commit messages</source>
          <target state="translated">푸시되지 않은 기존 커밋 메시지를 수정하는 방법</target>
        </trans-unit>
        <trans-unit id="f872b24f203857e6dec69e0cc329fa249387115a" translate="yes" xml:space="preserve">
          <source>I always do this if I forget to add a file or do a change.</source>
          <target state="translated">파일 추가 또는 변경을 잊어 버린 경우 항상이 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="f71d285985b60110c9b5ac8a68fe095280d58797" translate="yes" xml:space="preserve">
          <source>I have added the aliases &lt;code&gt;reci&lt;/code&gt; and &lt;code&gt;recm&lt;/code&gt; for &lt;code&gt;recommit (amend)&lt;/code&gt; it. Now I can do it with &lt;code&gt;git recm&lt;/code&gt; or &lt;code&gt;git recm -m&lt;/code&gt;:</source>
          <target state="translated">나는 그것을 &lt;code&gt;recommit (amend)&lt;/code&gt; &lt;code&gt;recm&lt;/code&gt; 하기 위해 별명 &lt;code&gt;reci&lt;/code&gt; 및 recm 을 추가했습니다 (수정) . 이제 &lt;code&gt;git recm&lt;/code&gt; 또는 &lt;code&gt;git recm -m&lt;/code&gt; 으로 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ead0f1a1d7a03041f8c0f351ac7716f8ec9d55c" translate="yes" xml:space="preserve">
          <source>I like to use the following:</source>
          <target state="translated">나는 다음을 사용하고 싶다 :</target>
        </trans-unit>
        <trans-unit id="a7bef60a9c8ba9945f6fea6181eaa5bc82defcdb" translate="yes" xml:space="preserve">
          <source>I prefer this way:</source>
          <target state="translated">나는이 방법을 선호합니다 :</target>
        </trans-unit>
        <trans-unit id="9ccc5570e7a2f37a3daf20e33dbfa5e08ec1b719" translate="yes" xml:space="preserve">
          <source>I realised that I had pushed a commit with a typo in it. In order to undo, I did the following:</source>
          <target state="translated">나는 오타로 커밋을 밀었다는 것을 깨달았습니다. 취소하기 위해 다음을 수행했습니다.</target>
        </trans-unit>
        <trans-unit id="d5424a7af0820b9f259dde33162fb40289dd1d7c" translate="yes" xml:space="preserve">
          <source>I use the &lt;a href=&quot;http://git-scm.com/docs/git-gui&quot;&gt;Git GUI&lt;/a&gt; as much as I can, and that gives you the option to amend the last commit:</source>
          <target state="translated">나는 &lt;a href=&quot;http://git-scm.com/docs/git-gui&quot;&gt;Git GUI&lt;/a&gt; 를 최대한 많이 사용한다. 그러면 마지막 커밋을 수정할 수있는 옵션이 제공된다.</target>
        </trans-unit>
        <trans-unit id="5a058042cca786b98a983dca9754de82d480c7ab" translate="yes" xml:space="preserve">
          <source>I wanted to change my five latest commits that I already pushed to the server. This is quite 'dangerous' because if someone else already pulled from this, you can mess things up by changing the commit messages. However, when you&amp;rsquo;re working on your own little branch and are sure no one pulled it you can change it like this:</source>
          <target state="translated">이미 서버에 푸시 한 5 개의 최신 커밋을 변경하고 싶었습니다. 다른 누군가가 이미 이것을 가져 갔다면 커밋 메시지를 변경하여 일을 망칠 수 있기 때문에 이것은 매우 위험합니다. 그러나, 당신이 당신의 자신의 작은 지점에서 작업하고 아무도 그것을 뽑아하지 않은 경우 다음과 같이 변경할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="d2a21af0dca7524c6564dc47503dec34c6089bf5" translate="yes" xml:space="preserve">
          <source>I wrote the wrong thing in a commit message.</source>
          <target state="translated">커밋 메시지에 잘못된 것을 썼습니다.</target>
        </trans-unit>
        <trans-unit id="3f16d37e328913517e1b219c98bb494e1bf48ab2" translate="yes" xml:space="preserve">
          <source>If it's a buried commit, use the awesome &lt;strong&gt;interactive rebase&lt;/strong&gt;:</source>
          <target state="translated">묻힌 커밋 인 경우 멋진 &lt;strong&gt;대화 형 rebase를&lt;/strong&gt; 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="1a2e40ecd7b22110fc1732e82667bf1e96bc7f07" translate="yes" xml:space="preserve">
          <source>If it's your last commit, just &lt;strong&gt;amend&lt;/strong&gt; the commit:</source>
          <target state="translated">마지막 커밋이라면 커밋을 &lt;strong&gt;수정&lt;/strong&gt; 하십시오.</target>
        </trans-unit>
        <trans-unit id="a1011b4a910232b030e11a685dd628900c37c828" translate="yes" xml:space="preserve">
          <source>If the commit you want to fix isn&amp;rsquo;t the most recent one:</source>
          <target state="translated">수정하려는 커밋이 최신이 아닌 경우 :</target>
        </trans-unit>
        <trans-unit id="1c7674dcf5d9a17f0553bab64e4371023b3edba6" translate="yes" xml:space="preserve">
          <source>If you are using the Git GUI tool, there is a button named &lt;em&gt;Amend last commit&lt;/em&gt;. Click on that button and then it will display your last commit files and message. Just edit that message, and you can commit it with a new commit message.</source>
          <target state="translated">Git GUI 도구를 사용하는 경우 &lt;em&gt;Amend last commit&lt;/em&gt; 버튼 &lt;em&gt;이&lt;/em&gt; 있습니다. 해당 버튼을 클릭하면 마지막 커밋 파일과 메시지가 표시됩니다. 해당 메시지를 편집하기 만하면 새로운 커밋 메시지로 커밋 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bfb7181ae8b7cc50362583d5868780d3cf80d663" translate="yes" xml:space="preserve">
          <source>If you are using the Git GUI, you can amend the last commit which hasn't been pushed with:</source>
          <target state="translated">Git GUI를 사용하는 경우 푸시되지 않은 마지막 커밋을 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1090dcdcd14bcb8e0aee40586e0f4512539645ad" translate="yes" xml:space="preserve">
          <source>If you edit text a lot, then switch to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Dvorak_keyboard_layout&quot;&gt;Dvorak keyboard layout&lt;/a&gt;, learn to touch-type, and learn Vim. &lt;a href=&quot;https://stackoverflow.com/questions/597077/is-learning-vim-worth-the-effort&quot;&gt;Is it worth the effort?&lt;/a&gt; Yes.</source>
          <target state="translated">텍스트를 많이 편집하는 경우 &lt;a href=&quot;https://en.wikipedia.org/wiki/Dvorak_keyboard_layout&quot;&gt;Dvorak 키보드 레이아웃으로&lt;/a&gt; 전환하고 터치 방식을 배우고 Vim을 배우십시오. &lt;a href=&quot;https://stackoverflow.com/questions/597077/is-learning-vim-worth-the-effort&quot;&gt;노력할만한 가치가 있습니까?&lt;/a&gt; 예.</target>
        </trans-unit>
        <trans-unit id="537da781c94247dd0b331b0d2a81df4b0b8e7aab" translate="yes" xml:space="preserve">
          <source>If you have not pushed the code to your remote branch (&lt;a href=&quot;http://en.wikipedia.org/wiki/GitHub&quot;&gt;GitHub&lt;/a&gt;/&lt;a href=&quot;http://en.wikipedia.org/wiki/Bitbucket&quot;&gt;Bitbucket&lt;/a&gt;) you can change the commit message on the command line as below.</source>
          <target state="translated">코드를 원격 브랜치 ( &lt;a href=&quot;http://en.wikipedia.org/wiki/GitHub&quot;&gt;GitHub&lt;/a&gt; / &lt;a href=&quot;http://en.wikipedia.org/wiki/Bitbucket&quot;&gt;Bitbucket&lt;/a&gt; )로 푸시하지 않은 경우 다음과 같이 명령 행에서 커밋 메시지를 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1bf0de856b25c0c411ebf5096c9883b06bdb439a" translate="yes" xml:space="preserve">
          <source>If you have to change an old commit message over multiple branches (i.e., the commit with the erroneous message is present in multiple branches) you might want to use:</source>
          <target state="translated">여러 분기에서 이전 커밋 메시지를 변경해야하는 경우 (즉, 잘못된 메시지가있는 커밋이 여러 분기에 존재하는 경우) 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a32e66acf92892ea696bdbbb3a5802cb762c5de" translate="yes" xml:space="preserve">
          <source>If you have to do it for more than a single branch and you might face conflicts when amending the content, set up &lt;a href=&quot;https://stackoverflow.com/questions/35415925/is-it-possible-to-setup-git-merge-for-automatic-resolving-git-rerere/35417944#35417944&quot;&gt;&lt;code&gt;git rerere&lt;/code&gt;&lt;/a&gt; and let Git resolve those conflicts automatically for you.</source>
          <target state="translated">하나 이상의 브랜치에 대해 수행해야하고 컨텐츠를 &lt;a href=&quot;https://stackoverflow.com/questions/35415925/is-it-possible-to-setup-git-merge-for-automatic-resolving-git-rerere/35417944#35417944&quot;&gt; &lt;code&gt;git rerere&lt;/code&gt; &lt;/a&gt; 때 충돌이 발생할 경우 git rerere를 설정하고 Git이 자동으로 충돌을 해결하도록하십시오.</target>
        </trans-unit>
        <trans-unit id="ee566402d3c4cf74ce64b4e59cfaf0282be7d528" translate="yes" xml:space="preserve">
          <source>If you just want to edit the latest commit, use:</source>
          <target state="translated">최신 커밋을 편집하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="82db7cb0693c57af7eb1ade32e9fb0a3a3edf799" translate="yes" xml:space="preserve">
          <source>If you only want to change your last message you should use the &lt;code&gt;--only&lt;/code&gt; flag or its shortcut &lt;code&gt;-o&lt;/code&gt; with &lt;code&gt;commit --amend&lt;/code&gt;:</source>
          <target state="translated">마지막 메시지 만 변경하려면 &lt;code&gt;--only&lt;/code&gt; 플래그 또는 바로 가기 &lt;code&gt;-o&lt;/code&gt; 를 &lt;code&gt;commit --amend&lt;/code&gt; 와 함께 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="17d40439e8088f91ded464271472bd49f0be088b" translate="yes" xml:space="preserve">
          <source>If you only want to modify your last commit message, then do:</source>
          <target state="translated">마지막 커밋 메시지 만 수정하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="51d4e79bd1d7f2d3d683716abe38bbe7ad091692" translate="yes" xml:space="preserve">
          <source>If you want to change the last three commit messages, or any of the commit messages up to that point, supply &lt;code&gt;HEAD~3&lt;/code&gt; to the &lt;code&gt;git rebase -i&lt;/code&gt; command:</source>
          <target state="translated">마지막 3 개의 커밋 메시지 또는 그 시점까지 커밋 메시지를 변경하려면 &lt;code&gt;HEAD~3&lt;/code&gt; 을 &lt;code&gt;git rebase -i&lt;/code&gt; 명령에 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="7a28de6ea6092c5fbab73a01a366d5cb3fe30429" translate="yes" xml:space="preserve">
          <source>If you want to edit more than one commit message, run</source>
          <target state="translated">둘 이상의 커밋 메시지를 편집하려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="a78e8bdc2ded9f51b7dfc568c468421d01041d3b" translate="yes" xml:space="preserve">
          <source>If you want to fix several flawed commits, pass the parent of the oldest one of them.</source>
          <target state="translated">결함이있는 커밋을 여러 개 수정하려면 가장 오래된 커밋의 부모를 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="324cec321d0415c9b54e054ec9386f21bed91f09" translate="yes" xml:space="preserve">
          <source>If you're working on a specific branch do this:</source>
          <target state="translated">특정 지점에서 작업하는 경우 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="a683e388ede9765e08735d6d667b440ac09228ba" translate="yes" xml:space="preserve">
          <source>If you've already pushed the code with the wrong message, and you need to be careful when changing the message. That is, after you change the commit message and try pushing it again, you end up with having issues. To make it smooth, follow these steps.</source>
          <target state="translated">이미 잘못된 메시지로 코드를 푸시 한 경우 메시지를 변경할 때주의해야합니다. 즉, 커밋 메시지를 변경하고 다시 푸시하면 문제가 발생합니다. 부드럽게하려면 다음 단계를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="49b3bf5ad384d123b2c23eae7dad2dcbde32c93b" translate="yes" xml:space="preserve">
          <source>If you've already pushed your commit up to your remote branch, then - after amending your commit locally (as described above) - you'll also &lt;a href=&quot;https://stackoverflow.com/questions/41003071/why-must-i-force-push-after-changing-a-commit-message&quot;&gt;need to force push the commit&lt;/a&gt; with:</source>
          <target state="translated">커밋을 원격 브랜치로 이미 푸시 한 경우-위에서 설명한 커밋을 로컬로 수정 한 후 커밋 &lt;a href=&quot;https://stackoverflow.com/questions/41003071/why-must-i-force-push-after-changing-a-commit-message&quot;&gt;을 강제로 푸시해야합니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ad1a060e5c6e478f27f57f590ca4b4ee0468c221" translate="yes" xml:space="preserve">
          <source>Important note about interactive rebase</source>
          <target state="translated">대화식 리베이스에 대한 중요 사항</target>
        </trans-unit>
        <trans-unit id="01a19c640eb703c350db672793b82e9a0b1d059a" translate="yes" xml:space="preserve">
          <source>In a file, like the one above, write &lt;code&gt;edit/e&lt;/code&gt; or one of the other options, and hit save and exit.</source>
          <target state="translated">위와 같은 파일에서 &lt;code&gt;edit/e&lt;/code&gt; 또는 다른 옵션 중 하나를 작성하고 저장 후 종료를 누르십시오.</target>
        </trans-unit>
        <trans-unit id="7598426d8a00853dbc0cca37aee0c4cf2d31d72e" translate="yes" xml:space="preserve">
          <source>In order to do a Git squash, follow these steps:</source>
          <target state="translated">Git 스쿼시를 수행하려면 다음 단계를 따르십시오.</target>
        </trans-unit>
        <trans-unit id="e2d58277a6cdab88c14651a65598ded91b284e8f" translate="yes" xml:space="preserve">
          <source>In the &quot;Log / History&quot; tab, right click on the entry with an adjoining line in the graph &lt;strong&gt;one below&lt;/strong&gt; the commit(s) you wish to edit and select &quot;Rebase children of &lt;em&gt;&amp;lt;commit ref&amp;gt;&lt;/em&gt; interactively...&quot;</source>
          <target state="translated">&quot;로그 / 이력&quot;탭에서 편집하려는 커밋 &lt;strong&gt;아래&lt;/strong&gt; 의 그래프에서 인접한 선이있는 항목을 마우스 오른쪽 단추로 클릭하고 &quot;대화식으로 &lt;em&gt;&amp;lt;commit ref&amp;gt;의&lt;/em&gt; 하위 하위 항목 ...&quot;을 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="5c44dced14ced82516c17a2f8ed5fa91a97e5224" translate="yes" xml:space="preserve">
          <source>In the default editor, modify 'pick' to 'edit' in the line whose commit you want to modify. Make your changes and then stage them with</source>
          <target state="translated">기본 편집기에서 커밋을 수정하려는 행에서 'pick'을 'edit'로 수정하십시오. 변경 한 다음</target>
        </trans-unit>
        <trans-unit id="226bab813445ce9f153dc587a2f5cd8f29f0724e" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;pick&lt;/code&gt; you need to write &lt;code&gt;reword&lt;/code&gt;. You can do this in Vim by typing in &lt;code&gt;i&lt;/code&gt;. That makes you go in to &lt;em&gt;insert&lt;/em&gt; mode. (You see that you&amp;rsquo;re in insert mode by the word &lt;em&gt;INSERT&lt;/em&gt; at the bottom.) For the commits you want to change, type in &lt;code&gt;reword&lt;/code&gt; instead of &lt;code&gt;pick&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pick&lt;/code&gt; 대신 &lt;code&gt;reword&lt;/code&gt; 를 작성해야 합니다 . Vim에서 &lt;code&gt;i&lt;/code&gt; 를 입력하면됩니다. &lt;em&gt;삽입&lt;/em&gt; 모드로 들어갑니다. (아래에 &lt;em&gt;INSERT&lt;/em&gt; 라는 단어가 삽입 모드에 있다는 것을 알 수 있습니다.) 커밋을 변경하려면 &lt;code&gt;pick&lt;/code&gt; 대신 &lt;code&gt;reword&lt;/code&gt; 를 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="8283ba700399d4e9b3046d8bf11fb6437003b436" translate="yes" xml:space="preserve">
          <source>Interactive rebase</source>
          <target state="translated">대화식 리베이스</target>
        </trans-unit>
        <trans-unit id="64388b42c1ec2c5f907675208286ca6379d56b28" translate="yes" xml:space="preserve">
          <source>It is designed to edit any commit (not just last) same way as &lt;code&gt;commit --amend&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;commit --amend&lt;/code&gt; 과 같은 방식으로 커밋 ( 마지막이 아닌)을 편집하도록 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="f3c4da5aba698dd7991db9cd195e40587df60bfb" translate="yes" xml:space="preserve">
          <source>It is named after the action on rebase interactive to amend a commit: &quot;reword&quot;. See &lt;a href=&quot;https://robots.thoughtbot.com/git-interactive-rebase-squash-amend-rewriting-history&quot;&gt;this post&lt;/a&gt; and &lt;a href=&quot;http://git-scm.com/docs/git-rebase&quot;&gt;man&lt;/a&gt; -section interactive mode-</source>
          <target state="translated">커밋을 수정하기 위해 &quot;reword&quot;커밋을 수정하기 위해 대화식 rebase 작업의 이름을 따서 명명되었습니다. &lt;a href=&quot;https://robots.thoughtbot.com/git-interactive-rebase-squash-amend-rewriting-history&quot;&gt;이 게시물&lt;/a&gt; 및 &lt;a href=&quot;http://git-scm.com/docs/git-rebase&quot;&gt;사람-&lt;/a&gt; 섹션 대화식 모드 참조</target>
        </trans-unit>
        <trans-unit id="33f6c69e7bd97548a38dc0a2467332aaa518a1b1" translate="yes" xml:space="preserve">
          <source>It's not as easy as a trivial &lt;code&gt;git commit --amend&lt;/code&gt;, but it's especially useful, if you already have some merges after your erroneous commit message.</source>
          <target state="translated">사소한 &lt;code&gt;git commit --amend&lt;/code&gt; 만큼 쉽지는 않지만 잘못된 커밋 메시지 후에 이미 병합이있는 경우 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="b757980d7844ff5175d1481ed1e3c6bbedaf5c77" translate="yes" xml:space="preserve">
          <source>Let's say you want to change your five latest commits, and then you type this in the terminal:</source>
          <target state="translated">5 개의 최신 커밋을 변경하고 터미널에 다음을 입력한다고 가정 해 봅시다.</target>
        </trans-unit>
        <trans-unit id="314e39a7aaaf46a85c0cea62f484616a7f6dbae7" translate="yes" xml:space="preserve">
          <source>Make sure you don't have any working copy changes &lt;em&gt;staged&lt;/em&gt; before doing this or they will get committed too. (&lt;em&gt;Unstaged&lt;/em&gt; changes will not get committed.)</source>
          <target state="translated">이 작업을 수행하기 전에 작업 복사본 변경이 &lt;em&gt;준비되어&lt;/em&gt; 있지 않은지 확인하십시오. 그렇지 않으면 변경 사항도 커밋됩니다. ( &lt;em&gt;무단계&lt;/em&gt; 변경은 커밋되지 않습니다.)</target>
        </trans-unit>
        <trans-unit id="75efdbef38e3f34b3b4a921f14e84734e02ab7f2" translate="yes" xml:space="preserve">
          <source>Make sure you've committed or stashed all current changes (i.e., so there are no files listed in the &quot;File Status&quot; tab) - it won't work otherwise.</source>
          <target state="translated">현재 변경 사항을 모두 커밋했거나 보관했는지 확인하십시오 (즉, &quot;파일 상태&quot;탭에 파일이 나열되지 않은 경우). 그렇지 않으면 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c459ebce80600c41e94f89ddca86f21bbb93cd94" translate="yes" xml:space="preserve">
          <source>Miniature Vim tutorial (or, how to rebase with only 8 keystrokes</source>
          <target state="translated">미니어처 Vim 튜토리얼 (또는 8 번의 키 입력으로 리베이스하는 방법)</target>
        </trans-unit>
        <trans-unit id="5cb0e58a346389526e93fdf68ccc3bdc41d9a68c" translate="yes" xml:space="preserve">
          <source>Most of this sequence will be explained to you by the output of the various commands as you go. It&amp;rsquo;s very easy; you don&amp;rsquo;t need to memorise it &amp;ndash; just remember that &lt;code&gt;git rebase --interactive&lt;/code&gt; lets you correct commits no matter how long ago they were.</source>
          <target state="translated">이 순서의 대부분은 다양한 명령의 출력으로 설명됩니다. 이것은 정말 쉽습니다; &lt;code&gt;git rebase --interactive&lt;/code&gt; 를 사용하면 얼마나 오래 전에 커밋을 수정했는지 기억하십시오.</target>
        </trans-unit>
        <trans-unit id="c32b2165806ae246917f4662d8eb71c8c3babae1" translate="yes" xml:space="preserve">
          <source>Note that these things change all your SHA hashes after that particular commit.</source>
          <target state="translated">이러한 사항은 특정 커밋 후에 모든 SHA 해시를 변경합니다.</target>
        </trans-unit>
        <trans-unit id="a6ac0e570855e8a6fd20567d169ad63e8f660398" translate="yes" xml:space="preserve">
          <source>Note that this will try to rewrite &lt;em&gt;every&lt;/em&gt; commit between &lt;code&gt;HEAD&lt;/code&gt; and the flawed commit, so you should choose your &lt;code&gt;msg-filter&lt;/code&gt; command very wisely ;-)</source>
          <target state="translated">&lt;code&gt;HEAD&lt;/code&gt; 와 결함이있는 커밋 사이의 &lt;em&gt;모든&lt;/em&gt; 커밋을 다시 작성하려고 시도하므로 &lt;code&gt;msg-filter&lt;/code&gt; 명령을 매우 현명하게 선택해야합니다. ;-)</target>
        </trans-unit>
        <trans-unit id="b46bc9f64374b0571d067b4a755f642780c1922f" translate="yes" xml:space="preserve">
          <source>Note that you will not want to change commits that you have already pushed. Or maybe you do, but in that case you will have to take great care to communicate with everyone who may have pulled your commits and done work on top of them. &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4084868/how-do-i-recover-resynchronise-after-someone-pushes-a-rebase-or-a-reset-to-a-pub&quot;&gt;How do I recover/resynchronise after someone pushes a rebase or a reset to a published branch?&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">이미 푸시 한 커밋은 변경하지 않을 것입니다. 또는 당신이 할 수도 있지만, 그 경우에는 커밋을 풀고 그 위에 작업을 한 모든 사람들과 의사 소통을 위해 많은주의를 기울여야합니다. &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4084868/how-do-i-recover-resynchronise-after-someone-pushes-a-rebase-or-a-reset-to-a-pub&quot;&gt;누군가가 리베이스 또는 재설정을 게시 된 브랜치로 푸시 한 후 어떻게 복구 / 재 동기화합니까?&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="18901ada473f70bd3df3861690385ff2583a5640" translate="yes" xml:space="preserve">
          <source>Note: You can also &quot;Make the change you want&quot; from the editor opened by &lt;code&gt;git commit --amend&lt;/code&gt;</source>
          <target state="translated">참고 : &lt;code&gt;git commit --amend&lt;/code&gt; 에서 연 편집기에서 &quot;원하는대로 변경&quot;할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="afa96f5ef82343e80b75b32d5fb1ce76d59679eb" translate="yes" xml:space="preserve">
          <source>Now you can use</source>
          <target state="translated">이제 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="7787ac5bd348952efbbc395221aa23b299315da2" translate="yes" xml:space="preserve">
          <source>Now you have changed your commit messages!</source>
          <target state="translated">이제 커밋 메시지를 변경했습니다!</target>
        </trans-unit>
        <trans-unit id="5d8308874a84249b672f526d18159a66c85a318f" translate="yes" xml:space="preserve">
          <source>Now you'll be at the first wrong commit. Make changes in the files, and they'll be automatically staged for you. Type</source>
          <target state="translated">지금 당신은 첫 번째 잘못된 커밋에있을 것입니다. 파일을 변경하면 자동으로 준비됩니다. 유형</target>
        </trans-unit>
        <trans-unit id="9ce3bd4224c8c1780db56b4125ecf3f24bf748b7" translate="yes" xml:space="preserve">
          <source>OK</source>
          <target state="translated">OK</target>
        </trans-unit>
        <trans-unit id="0a419341678c8db38200c28d3bc480175a6b7f03" translate="yes" xml:space="preserve">
          <source>On this question there are a lot of answers, but none of them explains in super detail how to change older commit messages using &lt;a href=&quot;http://en.wikipedia.org/wiki/Vim_%28text_editor%29&quot;&gt;Vim&lt;/a&gt;. I was stuck trying to do this myself, so here I'll write down in detail how I did this especially for people who have no experience in Vim!</source>
          <target state="translated">이 질문에는 많은 답변이 있지만 &lt;a href=&quot;http://en.wikipedia.org/wiki/Vim_%28text_editor%29&quot;&gt;Vim을&lt;/a&gt; 사용하여 이전 커밋 메시지를 변경하는 방법에 대한 자세한 설명은 없습니다. 나는 이것을 스스로하려고 노력하고 있었으므로 여기에 Vim에 경험이없는 사람들을 위해 이것을 어떻게했는지 자세히 기록 할 것입니다!</target>
        </trans-unit>
        <trans-unit id="8f4283541ffc56fa2391f987d51c11f228e9cf5e" translate="yes" xml:space="preserve">
          <source>Once you save, Git will replay the listed commits.</source>
          <target state="translated">저장하면 Git은 나열된 커밋을 재생합니다.</target>
        </trans-unit>
        <trans-unit id="c3c5323e77e97b944f42a7ac0137785258b47f15" translate="yes" xml:space="preserve">
          <source>Once you squash your commits - choose the &lt;code&gt;e/r&lt;/code&gt; for editing the message:</source>
          <target state="translated">커밋을 스쿼시하고 나면 메시지 편집을 위해 &lt;code&gt;e/r&lt;/code&gt; 을 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="52be91bf5d9781fa67954063b817a92e0da0fcb9" translate="yes" xml:space="preserve">
          <source>Or use this command from a console/terminal:</source>
          <target state="translated">또는 콘솔 / 터미널에서이 명령을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="20de4020936774e43563105e9f083c88256e0de5" translate="yes" xml:space="preserve">
          <source>Or, try Git reset like below:</source>
          <target state="translated">또는 아래와 같이 Git 재설정을 시도하십시오.</target>
        </trans-unit>
        <trans-unit id="f4602422740c6d3f89e9ff56816c492ed6cbd4e7" translate="yes" xml:space="preserve">
          <source>Otherwise, if it's not your last commit, you can do an interactive rebase,</source>
          <target state="translated">그렇지 않으면 마지막 커밋이 아닌 경우 대화식 리베이스를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="55e74ef477a9216e7e4cda96d4ad2263c3a5ec10" translate="yes" xml:space="preserve">
          <source>Otherwise, there will be a new commit with a new commit ID.</source>
          <target state="translated">그렇지 않으면 새로운 커밋 ID를 가진 새로운 커밋이 있습니다.</target>
        </trans-unit>
        <trans-unit id="eed2b533b936ff8cc5fd4e5ef633af9481bf9a5f" translate="yes" xml:space="preserve">
          <source>Perform an interactive rebase</source>
          <target state="translated">대화식 리베이스 수행</target>
        </trans-unit>
        <trans-unit id="77ecdb8d3da3edd63521ce51f90410c6290e3a2d" translate="yes" xml:space="preserve">
          <source>ProTip&amp;trade;: Don't be afraid to experiment with &quot;dangerous&quot; commands that rewrite history* &amp;mdash; Git doesn't delete your commits for 90 days by default; you can find them in the reflog:</source>
          <target state="translated">ProTip &amp;trade; : 기록을 다시 작성하는 &quot;위험한&quot;명령을 실험하는 것을 두려워하지 마십시오 * &amp;mdash; Git은 기본적으로 90 일 동안 커밋을 삭제하지 않습니다. reflog에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3308b6ccef5a11ddcd6a26ca18d3f31ea4629ee3" translate="yes" xml:space="preserve">
          <source>Repeat steps 3-4 if there are other commit messages to change.</source>
          <target state="translated">변경할 다른 커밋 메시지가있는 경우 3-4 단계를 반복하십시오.</target>
        </trans-unit>
        <trans-unit id="7dfb87706e14c88c0e15e93aba66aeadc9f16477" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;vimtutor&lt;/code&gt; if you have time</source>
          <target state="translated">시간이 있으면 &lt;code&gt;vimtutor&lt;/code&gt; 를 실행</target>
        </trans-unit>
        <trans-unit id="33bee255359d5325886f2f9f38bd1b7ef63c2b4a" translate="yes" xml:space="preserve">
          <source>Save and exit that and type</source>
          <target state="translated">저장하고 종료하고 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="e0a9d3ab2e00da3e1e5b35ad368e4985153b116e" translate="yes" xml:space="preserve">
          <source>Say, you want to recover your master and access it in branch &lt;code&gt;old_master&lt;/code&gt;:</source>
          <target state="translated">마스터를 복구하고 &lt;code&gt;old_master&lt;/code&gt; 브랜치에 액세스하고 싶다고 가정 해보십시오 .</target>
        </trans-unit>
        <trans-unit id="9a1164328303f0e7aef0ad70722adac01bf5714d" translate="yes" xml:space="preserve">
          <source>Select the whole row for a commit message you wish to change (&lt;em&gt;i.e., click on the &quot;Message&quot; column&lt;/em&gt;).</source>
          <target state="translated">변경하려는 커밋 메시지의 전체 행을 선택하십시오 ( &lt;em&gt;예 : &quot;메시지&quot;열 클릭&lt;/em&gt; ).</target>
        </trans-unit>
        <trans-unit id="a26f780678a6d3a9f251706447f5b64005273b37" translate="yes" xml:space="preserve">
          <source>That will drop you into your text editor and let you change the last commit message.</source>
          <target state="translated">텍스트 편집기로 이동하여 마지막 커밋 메시지를 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4096d93990554059857e203340d7a995c560a36" translate="yes" xml:space="preserve">
          <source>Then Vim will go over every commit message you want to reword, and here you can actually change the commit messages. You&amp;rsquo;ll do this by going into insert mode, changing the commit message, going into the command-mode, and save and quit. Do this five times and you&amp;rsquo;re out of Vim!</source>
          <target state="translated">그런 다음 Vim은 변경하려는 모든 커밋 메시지를 처리하며 실제로 커밋 메시지를 변경할 수 있습니다. 삽입 모드, 커밋 메시지 변경, 명령 모드로 이동하여 저장하고 종료하면됩니다. 이 다섯 번하고 Vim을 벗어났습니다!</target>
        </trans-unit>
        <trans-unit id="b75e221ac3451aee7b1b94cc11b344316ef30b6e" translate="yes" xml:space="preserve">
          <source>Then inside the interactive rebase you simply add edit to that commit. When it comes up, do a &lt;code&gt;git commit --amend&lt;/code&gt; and modify the commit message. If you want to roll back before that commit point, you could also use &lt;code&gt;git reflog&lt;/code&gt; and just delete that commit. Then you just do a &lt;code&gt;git commit&lt;/code&gt; again.</source>
          <target state="translated">그런 다음 대화식 리베이스 내에서 해당 커밋에 편집을 추가하기 만하면됩니다. 커밋 메시지를 수정하고 수정하십시오. 해당 커밋 지점 전에 롤백하려면 &lt;code&gt;git reflog&lt;/code&gt; 를 사용하고 해당 커밋을 삭제하십시오. 그런 다음 &lt;code&gt;git commit&lt;/code&gt; 을 다시 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="44035053d738daf2c3426a6fb01ffb7685720036" translate="yes" xml:space="preserve">
          <source>Then you need to save and quit this screen. You do that by first going in to &amp;lsquo;command-mode&amp;rsquo; by pressing the</source>
          <target state="translated">그런 다음이 화면을 저장하고 종료해야합니다. 먼저 'command-mode'로 들어가서</target>
        </trans-unit>
        <trans-unit id="2e8da7db63753dabddaee4db6af25bdee3a5e09e" translate="yes" xml:space="preserve">
          <source>Then, if you already pushed your wrong commits, you need to &lt;code&gt;git push --force&lt;/code&gt; to overwrite them. Remember that &lt;code&gt;git push --force&lt;/code&gt; is quite a dangerous thing to do, so make sure that no one pulled from the server since you pushed your wrong commits!</source>
          <target state="translated">그런 다음 이미 잘못된 커밋을 푸시 한 경우 덮어 &lt;code&gt;git push --force&lt;/code&gt; 려면 push --force 를 git 해야합니다. &lt;code&gt;git push --force&lt;/code&gt; 는 매우 위험한 일이므로, 잘못된 커밋을 푸시 한 후 서버에서 아무도 가져 오지 않도록하십시오!</target>
        </trans-unit>
        <trans-unit id="26253e4abf4e26e804dd81363163b679c4468f73" translate="yes" xml:space="preserve">
          <source>This command will get you into Vim there you can &amp;lsquo;edit&amp;rsquo; your commit history. You&amp;rsquo;ll see your last five commits at the top like this:</source>
          <target state="translated">이 명령을 사용하면 커밋 기록을 '편집'할 수있는 Vim으로 이동합니다. 마지막 5 개의 커밋은 다음과 같이 맨 위에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="6b465354216b882095ff215390469dd80b17e5f0" translate="yes" xml:space="preserve">
          <source>This ensures that you don't accidentally enhance your commit with staged stuff. Of course it's best to have a proper &lt;code&gt;$EDITOR&lt;/code&gt; configuration. Then you can leave the &lt;code&gt;-m&lt;/code&gt; option out, and Git will pre-fill the commit message with the old one. In this way it can be easily edited.</source>
          <target state="translated">이렇게하면 실수로 준비된 내용으로 커밋을 강화하지 않아도됩니다. 물론 적절한 &lt;code&gt;$EDITOR&lt;/code&gt; 설정을하는 것이 가장 좋습니다. 그런 다음 &lt;code&gt;-m&lt;/code&gt; 옵션을 그대로두고 Git은 커밋 메시지를 이전 메시지로 미리 채 웁니다. 이런 방식으로 쉽게 편집 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b7b71b3ef7f4905bf520438e695a63d94ef4fdec" translate="yes" xml:space="preserve">
          <source>This is the best practice when changing the commit message, if it was already pushed.</source>
          <target state="translated">커밋 메시지가 이미 푸시 된 경우이를 변경하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="e472addcb340e40e46d441b595f9ad47732b3f30" translate="yes" xml:space="preserve">
          <source>This will open a file in your text editor representing your new commit message. It starts out populated with the text from your old commit message. Change the commit message as you want, then save the file and quit your editor to finish.</source>
          <target state="translated">그러면 새 커밋 메시지를 나타내는 파일이 텍스트 편집기에 열립니다. 이전 커밋 메시지의 텍스트로 채워집니다. 커밋 메시지를 원하는대로 변경 한 다음 파일을 저장하고 편집기를 종료하여 완료하십시오.</target>
        </trans-unit>
        <trans-unit id="a73614e15359a42654cd495530206975abb50e8b" translate="yes" xml:space="preserve">
          <source>To amend the previous commit and keep the same log message, run</source>
          <target state="translated">이전 커밋을 수정하고 동일한 로그 메시지를 유지하려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="a639ce1453a3eb7eb95b4f7400c7d8daf2a6daf6" translate="yes" xml:space="preserve">
          <source>To amend the previous commit, make the changes you want and stage those changes, and then run</source>
          <target state="translated">이전 커밋을 수정하려면 원하는 변경을 수행하고 해당 변경을 준비한 다음 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="7ecf92cf1ec772b7937c2227365be83d9ed29db5" translate="yes" xml:space="preserve">
          <source>To fix the previous commit by removing it entirely, run</source>
          <target state="translated">이전 커밋을 완전히 제거하여 수정하려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="d49b00477423eae08072ae322db9654f51877b3a" translate="yes" xml:space="preserve">
          <source>To understand it in detail, an excellent post is &lt;em&gt;&lt;a href=&quot;https://www.atlassian.com/git/tutorials/rewriting-history#git-commit--amend&quot;&gt;4. Rewriting Git History&lt;/a&gt;&lt;/em&gt;. It also talks about &lt;strong&gt;when not to use&lt;/strong&gt;&lt;code&gt;git commit --amend&lt;/code&gt;.</source>
          <target state="translated">그것을 자세히 이해하기 위해 훌륭한 게시물은 &lt;em&gt;&lt;a href=&quot;https://www.atlassian.com/git/tutorials/rewriting-history#git-commit--amend&quot;&gt;4. Git History를 다시 작성하는 것&lt;/a&gt;&lt;/em&gt; 입니다. 또한 &lt;code&gt;git commit --amend&lt;/code&gt; &lt;strong&gt;을 사용하지 않는 경우에&lt;/strong&gt; 대해서도 설명합니다.</target>
        </trans-unit>
        <trans-unit id="dfdda8b62ffd2d3eaba69154904f415d055e181a" translate="yes" xml:space="preserve">
          <source>Update your last wrong commit message with the new commit message in one line:</source>
          <target state="translated">한 줄에 새 커밋 메시지로 마지막 잘못된 커밋 메시지를 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="1d4d43cc6f3a833e0340a0d1794b6d7b9958657e" translate="yes" xml:space="preserve">
          <source>Use</source>
          <target state="translated">Use</target>
        </trans-unit>
        <trans-unit id="632993fe184f88b280a3d7d23dd1109d7c895db7" translate="yes" xml:space="preserve">
          <source>Using reset to split commits into smaller commits</source>
          <target state="translated">재설정을 사용하여 커밋을 더 작은 커밋으로 분할</target>
        </trans-unit>
        <trans-unit id="7a17e609b482fcb3423f1cd7db14297d187da49a" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;git rebase -i HEAD~n&lt;/code&gt; there can be &lt;strong&gt;more&lt;/strong&gt; than n commits. Git will &quot;collect&quot; all the commits in the last n commits, and if there was a merge somewhere in between that range you will see all the commits as well, so the outcome will be n + .</source>
          <target state="translated">&lt;code&gt;git rebase -i HEAD~n&lt;/code&gt; 을 사용하면 n &lt;strong&gt;개&lt;/strong&gt; 이상의 커밋이있을 수 있습니다. Git은 마지막 n 개의 커밋에서 모든 커밋을 &quot;수집&quot;하고, 해당 범위 사이에 병합이 있으면 모든 커밋도 볼 수 있으므로 결과는 n +입니다.</target>
        </trans-unit>
        <trans-unit id="7bdd996fb9f3a79b5e191fc7debf67431d4e47e3" translate="yes" xml:space="preserve">
          <source>Wow, so there are a lot of ways to do this.</source>
          <target state="translated">와우, 이렇게하는 많은 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="30790662109be1b01ef4a7cc38d14098ff0c5bb2" translate="yes" xml:space="preserve">
          <source>Yet another way to do this is to delete the last commit, but keep its changes so that you won't lose your work. You can then do another commit with the corrected message. This would look something like this:</source>
          <target state="translated">또 다른 방법은 마지막 커밋을 삭제하지만 변경 사항을 유지하여 작업을 잃지 않도록하는 것입니다. 그런 다음 수정 된 메시지로 다른 커밋을 수행 할 수 있습니다. 이것은 다음과 같이 보일 것입니다 :</target>
        </trans-unit>
        <trans-unit id="d562170d5afd40c1f73b6228c7a9ceae7ce5d62c" translate="yes" xml:space="preserve">
          <source>You also can use &lt;code&gt;git filter-branch&lt;/code&gt; for that.</source>
          <target state="translated">이를 위해 &lt;code&gt;git filter-branch&lt;/code&gt; 를 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c9b51188bfd91fc21736786a8d6536e83014e535" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;http://git-scm.com/book/en/Git-Branching-Rebasing&quot;&gt;Git rebasing&lt;/a&gt;. For example, if you want to modify back to commit bbc643cd, run</source>
          <target state="translated">&lt;a href=&quot;http://git-scm.com/book/en/Git-Branching-Rebasing&quot;&gt;Git 리베이스&lt;/a&gt; 를 사용할 수 있습니다. 예를 들어 bbc643cd를 커밋하도록 다시 수정하려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="7438d3ec7a3e4327838d10a8d934081bb500f511" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;https://github.com/albfan/git-rebase-reword&quot;&gt;git-rebase-reword&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/albfan/git-rebase-reword&quot;&gt;git-rebase-reword를&lt;/a&gt; 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="af21acfd6828386c24a507086a1b24ccdfe064c8" translate="yes" xml:space="preserve">
          <source>You have a couple of options here. You can do</source>
          <target state="translated">여기 몇 가지 옵션이 있습니다. 넌 할 수있어</target>
        </trans-unit>
        <trans-unit id="5078d61e272fdb231416324112c7872885be513d" translate="yes" xml:space="preserve">
          <source>as long as it's your last commit.</source>
          <target state="translated">마지막 커밋 인 한</target>
        </trans-unit>
        <trans-unit id="84b0e28b58f2980b68e47f7ae3a2b61f1e93891f" translate="yes" xml:space="preserve">
          <source>button (you can check that you&amp;rsquo;re in command-mode if the word &lt;em&gt;INSERT&lt;/em&gt; at the bottom has disappeared). Then you can type in a command by typing &lt;code&gt;:&lt;/code&gt;. The command to save and quit is &lt;code&gt;wq&lt;/code&gt;. So if you type in &lt;code&gt;:wq&lt;/code&gt; you&amp;rsquo;re on the right track.</source>
          <target state="translated">버튼 (하단에 &lt;em&gt;INSERT&lt;/em&gt; 라는 단어가 사라진 경우 명령 모드에 있는지 확인할 수 있습니다). 그런 다음 다음을 입력하여 명령을 입력 할 수 있습니다.. 저장하고 종료하는 명령은 &lt;code&gt;wq&lt;/code&gt; 입니다. 따라서 &lt;code&gt;:wq&lt;/code&gt; 를 입력하면 올바른 길을 가고 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8fbb6980f90eb02ebb81570fde3a124f877ce69" translate="yes" xml:space="preserve">
          <source>correspond to movement keys</source>
          <target state="translated">이동 키에 해당</target>
        </trans-unit>
        <trans-unit id="a50b09bb601459b63cd32db9c8bc4be2f38a8095" translate="yes" xml:space="preserve">
          <source>git-commit(1) Manual Page</source>
          <target state="translated">git-commit (1) 매뉴얼 페이지</target>
        </trans-unit>
        <trans-unit id="79675dc6d8cb4e6af07c04773a516e1c2b45bdc4" translate="yes" xml:space="preserve">
          <source>git-push(1) Manual Page</source>
          <target state="translated">git-push (1) 매뉴얼 페이지</target>
        </trans-unit>
        <trans-unit id="bf0a0f5e3f4891f99c6917eb096e94bd64744220" translate="yes" xml:space="preserve">
          <source>git-rebase(1) Manual Page</source>
          <target state="translated">git-rebase (1) 매뉴얼 페이지</target>
        </trans-unit>
        <trans-unit id="a02c8b249ce9bae21f915eec52abeadf0e214a75" translate="yes" xml:space="preserve">
          <source>moves down three lines</source>
          <target state="translated">세 줄 아래로 이동</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="bc8067e60d906af0dae0b2f9b16103b2c16ce5c5" translate="yes" xml:space="preserve">
          <source>to change a line, word, or letter, respectively (same as</source>
          <target state="translated">줄, 단어 또는 문자를 각각 변경하려면</target>
        </trans-unit>
        <trans-unit id="c97b9d50f39fc9d46036376014823bbe7547d71c" translate="yes" xml:space="preserve">
          <source>to copy (&quot;yank&quot;) a line, word, or letter, respectively</source>
          <target state="translated">줄, 단어 또는 문자를 각각 복사 ( &quot;yank&quot;)</target>
        </trans-unit>
        <trans-unit id="a0ce74f62c3d0eb95142d19801d0b0b76d0bcd12" translate="yes" xml:space="preserve">
          <source>to delete a line, word, or letter, respectively</source>
          <target state="translated">줄, 단어 또는 문자를 각각 삭제</target>
        </trans-unit>
        <trans-unit id="aaaa0e52acb9746dfa5438b7cf65ca6f035f56e4" translate="yes" xml:space="preserve">
          <source>to enter insert mode &amp;mdash; text you type will appear in the file</source>
          <target state="translated">삽입 모드로 들어가기 &amp;mdash; 입력 한 텍스트가 파일에 나타납니다</target>
        </trans-unit>
        <trans-unit id="99db56f69e2d891dd70f2d26ed9c64792a66b959" translate="yes" xml:space="preserve">
          <source>to exit insert mode and return to &quot;normal&quot; mode</source>
          <target state="translated">삽입 모드를 종료하고 &quot;일반&quot;모드로 돌아 가기</target>
        </trans-unit>
        <trans-unit id="b6ed2f1096144e70175303d03ff1181610e8bf09" translate="yes" xml:space="preserve">
          <source>to modify the commit, and after that</source>
          <target state="translated">커밋을 수정 한 후</target>
        </trans-unit>
        <trans-unit id="97208c0f89ca192b2f4971aa263bdf9117933776" translate="yes" xml:space="preserve">
          <source>to move to next selection until finished with all your selections.</source>
          <target state="translated">모든 선택이 끝날 때까지 다음 선택으로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="9a2b31c3771eceb572709ee77808fa165b24715e" translate="yes" xml:space="preserve">
          <source>to paste after, or before current position, respectively</source>
          <target state="translated">현재 위치 이후 또는 현재 위치 이전에 붙여 넣기</target>
        </trans-unit>
        <trans-unit id="0cf0e0111fe609a89ed16dca218c858fb6803513" translate="yes" xml:space="preserve">
          <source>to quit without saving</source>
          <target state="translated">저장하지 않고 종료</target>
        </trans-unit>
        <trans-unit id="a2c7ddba954d772f094a428d21b46e46530cb0b4" translate="yes" xml:space="preserve">
          <source>to redo</source>
          <target state="translated">다시하기</target>
        </trans-unit>
        <trans-unit id="1307936b93fc814e854e3caf017ce12ab456620b" translate="yes" xml:space="preserve">
          <source>to return back to the previous head commit.</source>
          <target state="translated">이전 헤드 커밋으로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="f66d982a4fc4c4c315a2d5e0da423f6ff0149947" translate="yes" xml:space="preserve">
          <source>to save (write) a file</source>
          <target state="translated">파일을 저장 (쓰기)</target>
        </trans-unit>
        <trans-unit id="0bf874c9d3659d05682b5c10bbcd5cfa3b758100" translate="yes" xml:space="preserve">
          <source>to save and quit</source>
          <target state="translated">저장하고 종료</target>
        </trans-unit>
        <trans-unit id="3ca29c2152337cff1a8724c31774fb8c1109aae0" translate="yes" xml:space="preserve">
          <source>to undo</source>
          <target state="translated">실행 취소</target>
        </trans-unit>
        <trans-unit id="85569b57d3c5b818f2c6785d171952a6882d9e3e" translate="yes" xml:space="preserve">
          <source>will open your editor, allowing you to change the commit message of the most recent commit. Additionally, you can set the commit message directly in the command line with:</source>
          <target state="translated">편집기를 열어 가장 최근의 커밋 메시지를 변경할 수 있습니다. 또한 다음을 사용하여 커밋 메시지를 명령 줄에서 직접 설정할 수 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
