<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/179123">
    <body>
      <group id="179123">
        <trans-unit id="2d83e069dedd71fdecfa4fdbff3e7d05d4379f90" translate="yes" xml:space="preserve">
          <source>&amp;darr;</source>
          <target state="translated">&amp;darr;</target>
        </trans-unit>
        <trans-unit id="ea81b36fda5c4b4efdf3377d8485597e3f78d325" translate="yes" xml:space="preserve">
          <source>&amp;hellip;however, this can make multi-line commit messages or small corrections more cumbersome to enter.</source>
          <target state="translated">&amp;hellip;ただし、これにより、複数行のコミットメッセージや小さな修正を入力するのが面倒になります。</target>
        </trans-unit>
        <trans-unit id="354c6cc208269f5a5fe067f22626f0bf4c409c79" translate="yes" xml:space="preserve">
          <source>&amp;larr;</source>
          <target state="translated">&amp;larr;</target>
        </trans-unit>
        <trans-unit id="4466f5ea01bad40a521f3168b5b7a9dbde092776" translate="yes" xml:space="preserve">
          <source>&amp;rarr;</source>
          <target state="translated">&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="b91878827a2aeacb8a8be36c9f47b30ac9d58817" translate="yes" xml:space="preserve">
          <source>&amp;uarr;</source>
          <target state="translated">&amp;uarr;</target>
        </trans-unit>
        <trans-unit id="d5666fa217269dfecdbf9e16efa7f88d709dc058" translate="yes" xml:space="preserve">
          <source>(As you see, I'm not that experienced in Vim, so if I used the wrong 'lingo' to explain what's happening, feel free to correct me!)</source>
          <target state="translated">(見ての通り、私はVimの経験が浅いので、何が起こっているかを説明するために間違った「用語」を使っていたら、遠慮なく訂正してください!)</target>
        </trans-unit>
        <trans-unit id="e821587bbb25ca29016fd0ce5d0c0d350e8b521d" translate="yes" xml:space="preserve">
          <source>(Replace &lt;b&gt;commit_count&lt;/b&gt; with number of commits that you want to edit.) This command launches your editor. Mark the first commit (the one that you want to change) as &amp;ldquo;edit&amp;rdquo; instead of &amp;ldquo;pick&amp;rdquo;, then save and exit your editor. Make the change you want to commit and then run</source>
          <target state="translated">（ &lt;b&gt;commit_count&lt;/b&gt;を、編集するコミットの数に置き換えます。）このコマンドは、エディターを起動します。 最初のコミット（変更するコミット）を「選択」ではなく「編集」としてマークし、保存してエディターを終了します。 コミットする変更を行ってから実行します</target>
        </trans-unit>
        <trans-unit id="f604eb308400b6fcc9b139d918e56d9385e739d6" translate="yes" xml:space="preserve">
          <source>* &lt;em&gt;Watch out for options like &lt;code&gt;--hard&lt;/code&gt; and &lt;code&gt;--force&lt;/code&gt; though &amp;mdash; they can discard data.&lt;/em&gt;
*  &lt;em&gt;Also, don't rewrite history on any branches you're collaborating on.&lt;/em&gt;</source>
          <target state="translated">* &lt;em&gt; &lt;code&gt;--hard&lt;/code&gt; や &lt;code&gt;--force&lt;/code&gt; などのオプションに注意してください&amp;mdash;データを破棄できます。&lt;/em&gt; * &lt;em&gt;また、協力しているブランチの履歴を書き換えないでください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="70f59dd18f4fa6d27f2733af8cec8e49a34e118e" translate="yes" xml:space="preserve">
          <source>*Where 5 is the number of commit messages you want to change (so if you want to change the 10th to last commit, you type in 10).</source>
          <target state="translated">*5は変更したいコミットメッセージの数です(10番目から最後のコミットまでを変更したい場合は10と入力します)。</target>
        </trans-unit>
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">,</target>
        </trans-unit>
        <trans-unit id="dd7db60a25d2f33c49897bafb010b021104ce84c" translate="yes" xml:space="preserve">
          <source>: Rebasing will commence. If all is well, the output will end &quot;Completed successfully&quot;. &lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt;&lt;em&gt; I've recently seen it fail with &lt;code&gt;Unable to create 'project_path/.git/index.lock': File exists.&lt;/code&gt; when trying to modify multiple commit messages at the same time. Not sure exactly what the issue is, or whether it will be fixed in a future version of Sourcetree, but if this happens would recommend rebasing them one at a time (slower but seems more reliable).&lt;/em&gt;</source>
          <target state="translated">：リベースが開始されます。 すべて問題なければ、出力は「正常に完了しました」で終了します。 &lt;strong&gt;&lt;em&gt;注：&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;最近、 &lt;code&gt;Unable to create 'project_path/.git/index.lock': File exists.&lt;/code&gt; ずに失敗することを確認しました。ファイルが存在します。&lt;/em&gt; &lt;em&gt;複数のコミットメッセージを同時に変更しようとした場合。&lt;/em&gt; &lt;em&gt;問題が何であるか、またはSourcetreeの将来のバージョンで修正されるかどうかは正確にはわかりませんが、これが発生した場合は、一度に1つずつリベースすることをお勧めします（遅いですが、信頼性が高いようです）。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d6f3372616ad038c9f426eb85fec13882c496b89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--&lt;/code&gt; separates filter-branch options from revision options.</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; フィルターブランチオプションをリビジョンオプションから分離します。</target>
        </trans-unit>
        <trans-unit id="a383ad9b9e5f67ceaba1d76c92508e786ffd7989" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--all&lt;/code&gt; will make sure that all &lt;em&gt;branches&lt;/em&gt; and &lt;em&gt;tags&lt;/em&gt; are rewritten.</source>
          <target state="translated">&lt;code&gt;--all&lt;/code&gt; は、すべての&lt;em&gt;ブランチ&lt;/em&gt;と&lt;em&gt;タグ&lt;/em&gt;が確実に書き換えられるようにします。</target>
        </trans-unit>
        <trans-unit id="ae3e3e0c7f658ac59fa98de794221855efc3c05e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-f&lt;/code&gt; will enforce the execution of the operation. This is necessary if the temporary directory is already present or if there are already references stored under &lt;code&gt;refs/original&lt;/code&gt;. If that is not the case, you can drop this flag.</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; は操作の実行を強制します。 これは、一時ディレクトリがすでに存在する場合、または &lt;code&gt;refs/original&lt;/code&gt; に格納されている参照がすでに存在する場合に必要です。 そうでない場合は、このフラグを削除できます。</target>
        </trans-unit>
        <trans-unit id="3656c5170c626772a9ee01596ec6da06d997c577" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset&lt;/code&gt; can help you to break one commit into multiple commits too:</source>
          <target state="translated">&lt;code&gt;git reset&lt;/code&gt; は、1つのコミットを複数のコミットに分割するのにも役立ちます。</target>
        </trans-unit>
        <trans-unit id="89796e3472e2992c48df1f6e192ad34723e62a70" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Using the &lt;code&gt;-o&lt;/code&gt; (&lt;code&gt;--only&lt;/code&gt;) flag to make sure you change only the commit message)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（コミットメッセージのみを変更するには、 &lt;code&gt;-o&lt;/code&gt; （-- &lt;code&gt;--only&lt;/code&gt; ）フラグを使用します）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fd5546f138dc2cc3211e60b308b58f99abbdea94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;...Or... for commits that have already been pushed:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;...または...すでにプッシュされたコミットの場合：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2e0c94b4744713fbcd803dcf727286da47ec1745" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For commits that haven't yet been pushed to a remote:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;まだリモートにプッシュされていないコミットの場合：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0554c5b83012a8ded9a19263344413baf6ef925e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important note:&lt;/strong&gt; When you use the force push directly you might end up with code issues that other developers are working on the same branch. So to avoid those conflicts, you need to pull the code from your branch before making the &lt;strong&gt;force push&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;重要な注意：&lt;/strong&gt;強制プッシュを直接使用すると、他の開発者が同じブランチで作業しているコードの問題が発生する可能性があります。 したがって、これらの競合を回避するには、 &lt;strong&gt;強制プッシュを&lt;/strong&gt;行う前に、ブランチからコードをプルする必要があります。</target>
        </trans-unit>
        <trans-unit id="e05b402ad172ef685c44cd07af20ef4fa48c1ee5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Please read my entire answer before doing it.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;それを行う前に私の全体の答えを読んでください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5cbde27676208b6be2688cefd241c151fe5a3206" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remember&lt;/strong&gt; to specify &lt;code&gt;--soft&lt;/code&gt; instead of &lt;code&gt;--hard&lt;/code&gt;, otherwise you lose that commit entirely.</source>
          <target state="translated">&lt;code&gt;--soft&lt;/code&gt; ではなく--softを指定することを&lt;strong&gt;忘れないでください&lt;/strong&gt; 。そうしないと、そのコミットが完全に失われます。</target>
        </trans-unit>
        <trans-unit id="c668d5d92da7ec12bec1eac6788154d1bc2f1c2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning: be cautious about amending commits that you have already shared with other people.&lt;/strong&gt; Amending commits essentially &lt;em&gt;rewrites&lt;/em&gt; them to have different &lt;a href=&quot;http://en.wikipedia.org/wiki/SHA-1&quot;&gt;SHA&lt;/a&gt; IDs, which poses a problem if other people have copies of the old commit that you've rewritten. Anyone who has a copy of the old commit will need to synchronize their work with your newly re-written commit, which can sometimes be difficult, so make sure you coordinate with others when attempting to rewrite shared commit history, or just avoid rewriting shared commits altogether.</source>
          <target state="translated">&lt;strong&gt;警告：すでに他の人と共有しているコミットの修正には注意してください。&lt;/strong&gt; コミットを修正すると、本質的にそれらが異なる&lt;a href=&quot;http://en.wikipedia.org/wiki/SHA-1&quot;&gt;SHA&lt;/a&gt; IDを持つように書き換えられます。これは、他の人があなたが書き換えた古いコミットのコピーを持っている場合に問題を引き起こします。 古いコミットのコピーを持っている人は、新しく書き直されたコミットと作業を同期する必要があります。これは時々難しい場合があるので、共有コミット履歴を書き直そうとするときは他の人と調整するようにしてください。完全に。</target>
        </trans-unit>
        <trans-unit id="a0aa2ab5846fc6a469a41ebfe82dcc30df985134" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning: force-pushing will overwrite the remote branch with the state of your local one&lt;/strong&gt;. If there are commits on the remote branch that you don't have in your local branch, you &lt;em&gt;will&lt;/em&gt; lose those commits.</source>
          <target state="translated">&lt;strong&gt;警告：force-pushingは、リモートブランチをローカルブランチの状態で上書きします&lt;/strong&gt; 。 ローカルブランチにないリモートブランチのコミットがある場合、それらのコミット&lt;em&gt;は&lt;/em&gt;失われます。</target>
        </trans-unit>
        <trans-unit id="05c42590ee8fe1b57940e9f9bba56832663aa580" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; force pushing your changes will overwrite the remote branch with your local one. Make sure that you aren't going to be overwriting anything that you want to keep. Also be cautious about force pushing an amended (rewritten) commit if anyone else shares the branch with you, because they'll need to rewrite their own history if they have the old copy of the commit that you've just rewritten.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;変更を強制的にプッシュすると、リモートブランチがローカルブランチで上書きされます。 残しておきたいものを上書きしないようにしてください。 また、誰かがあなたとブランチを共有している場合、修正された（書き換えられた）コミットを強制的にプッシュすることにも注意してください。書き直したばかりのコミットの古いコピーがある場合は、自分の履歴を書き直す必要があるためです。</target>
        </trans-unit>
        <trans-unit id="4f04f666c1def44a685b9a58ee1333d9271f876e" translate="yes" xml:space="preserve">
          <source>All commands can be prefixed with a &quot;range&quot;, e.g.</source>
          <target state="translated">すべてのコマンドの前に「範囲」を付けることができます。</target>
        </trans-unit>
        <trans-unit id="738d42d2a163ac0883ea95842ce4cc479c3f8946" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;git rebase -i origin/master&lt;/code&gt;is a nice mantra that will always present you with the commits you have done on top of master, and give you the option to amend, delete, reorder or squash. No need to get hold of that hash first.</source>
          <target state="translated">また、 &lt;code&gt;git rebase -i origin/master&lt;/code&gt; は、 マスターの上で実行したコミットを常に提示し、修正、削除、並べ替え、またはスカッシュするオプションを提供する素晴らしいマントラです。 最初にそのハッシュを取得する必要はありません。</target>
        </trans-unit>
        <trans-unit id="b989269017a4eb81c60ad36b273636181e7aed0d" translate="yes" xml:space="preserve">
          <source>Amend</source>
          <target state="translated">Amend</target>
        </trans-unit>
        <trans-unit id="3a441e515dea998e6b6574e6787f20dbdf1acdd6" translate="yes" xml:space="preserve">
          <source>Amending the most recent commit message</source>
          <target state="translated">最新のコミットメッセージを修正する</target>
        </trans-unit>
        <trans-unit id="633a78d37060f88c799ce35a31c4524455ef413c" translate="yes" xml:space="preserve">
          <source>An editor will come up, with a list of all commits since the one you gave.</source>
          <target state="translated">エディタが表示され、あなたが与えたコミット以降のすべてのコミットのリストが表示されます。</target>
        </trans-unit>
        <trans-unit id="f29548a0ced6516f82698ab95cf3242f963baa7c" translate="yes" xml:space="preserve">
          <source>Another option is to use interactive rebase.
This allows you to edit any message you want to update even if it's not the latest message.</source>
          <target state="translated">もう一つのオプションは、インタラクティブリベースを使用することです。これにより、最新のメッセージでなくても、更新したいメッセージを編集することができます。</target>
        </trans-unit>
        <trans-unit id="12c99922ad5f0d621f9fd1198a80b98d98f75d73" translate="yes" xml:space="preserve">
          <source>As already mentioned, &lt;code&gt;git commit --amend&lt;/code&gt; is the way to overwrite the last commit. One note: if you would like to also &lt;strong&gt;overwrite the files&lt;/strong&gt;, the command would be</source>
          <target state="translated">すでに述べたように、 &lt;code&gt;git commit --amend&lt;/code&gt; は最後のコミットを上書きする方法です。 注： &lt;strong&gt;ファイル&lt;/strong&gt;も&lt;strong&gt;上書きする場合&lt;/strong&gt; 、コマンドは次のようになります。</target>
        </trans-unit>
        <trans-unit id="d043c3daef4d8ca33c4d6da32d502453338ba5d2" translate="yes" xml:space="preserve">
          <source>But if you want to edit several commits in a row, you should use rebasing instead:</source>
          <target state="translated">しかし、複数のコミットを連続して編集したい場合は、代わりにリベースを使うべきです。</target>
        </trans-unit>
        <trans-unit id="fc81dfbcc92d6db644079e9fd1e3221331e30949" translate="yes" xml:space="preserve">
          <source>Change &lt;code&gt;pick&lt;/code&gt; to &lt;code&gt;reword&lt;/code&gt; (or on old versions of Git, to &lt;code&gt;edit&lt;/code&gt;) in front of any commits you want to fix.</source>
          <target state="translated">修正したいコミットの前で、 &lt;code&gt;pick&lt;/code&gt; を &lt;code&gt;reword&lt;/code&gt; （またはGitの古いバージョンでは &lt;code&gt;edit&lt;/code&gt; ）に変更します。</target>
        </trans-unit>
        <trans-unit id="cd60416657978941670ac10679df331d4ea07fd7" translate="yes" xml:space="preserve">
          <source>Change the commit in any way you like.</source>
          <target state="translated">コミットを好きなように変更してください。</target>
        </trans-unit>
        <trans-unit id="d46c931ce468b46e5abf20d61245248f3348d2b0" translate="yes" xml:space="preserve">
          <source>Changing the message of a commit that you've already pushed to your remote branch</source>
          <target state="translated">リモートブランチにプッシュしたコミットのメッセージを変更する</target>
        </trans-unit>
        <trans-unit id="79cbc5eb672a54c2b82572afd52f2a6a4f85e598" translate="yes" xml:space="preserve">
          <source>Click</source>
          <target state="translated">Click</target>
        </trans-unit>
        <trans-unit id="1dec358be2f5904a55a78b4bf8dc49b6430cce90" translate="yes" xml:space="preserve">
          <source>Click the &quot;Edit Message&quot; button.</source>
          <target state="translated">メッセージ編集」ボタンをクリックします。</target>
        </trans-unit>
        <trans-unit id="dd6a02a553da4cb247f914011dd67c37487ec082" translate="yes" xml:space="preserve">
          <source>Ctrl</source>
          <target state="translated">Ctrl</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="482848e61e0cb57d443b83b93dbd01b3c2270228" translate="yes" xml:space="preserve">
          <source>Due to the backup of your old references, you can easily go back to the state before executing the command.</source>
          <target state="translated">古いリファレンスのバックアップのため、コマンドを実行する前の状態に簡単に戻ることができます。</target>
        </trans-unit>
        <trans-unit id="7d19f7fe68caa759dd89c5b936538ad9c08a6667" translate="yes" xml:space="preserve">
          <source>Edit the message as desired in the dialog that comes up and then click</source>
          <target state="translated">表示されたダイアログで必要に応じてメッセージを編集し、次のようにクリックします。</target>
        </trans-unit>
        <trans-unit id="2b9eceb7a86a9f577ef80586c5c1d7fde9ff493d" translate="yes" xml:space="preserve">
          <source>Enter</source>
          <target state="translated">Enter</target>
        </trans-unit>
        <trans-unit id="1f7a4f9e2f70d0b81cffc15ab30fd344aeb34fb3" translate="yes" xml:space="preserve">
          <source>Esc</source>
          <target state="translated">Esc</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="0e953b87fb65331535cd13602b7042eba5d8c5f0" translate="yes" xml:space="preserve">
          <source>Find the commit you want, change &lt;code&gt;pick&lt;/code&gt; to &lt;code&gt;r&lt;/code&gt; (&lt;code&gt;reword&lt;/code&gt;), and save and close the file. Done!</source>
          <target state="translated">必要なコミットを見つけ、 &lt;code&gt;pick&lt;/code&gt; を &lt;code&gt;r&lt;/code&gt; （ &lt;code&gt;reword&lt;/code&gt; ）に変更し、ファイルを保存して閉じます。 できた！</target>
        </trans-unit>
        <trans-unit id="5c693c9d95a317d3f4014446be294772668a131b" translate="yes" xml:space="preserve">
          <source>Follow the steps in &lt;a href=&quot;https://stackoverflow.com/questions/17604232#23239109&quot;&gt;this answer&lt;/a&gt;, which are similar to above, but require a further command to be run from the command line (&lt;code&gt;git push origin &amp;lt;branch&amp;gt; -f&lt;/code&gt;) to force-push the branch. I would recommend reading it all and applying the necessary caution!</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/17604232#23239109&quot;&gt;この回答&lt;/a&gt;の手順は上記と同様ですが、 &lt;code&gt;git push origin &amp;lt;branch&amp;gt; -f&lt;/code&gt; を強制的にプッシュするには、コマンドライン（ git push origin &amp;lt;branch&amp;gt; -f ）からコマンドを実行する必要があります。 それをすべて読み、必要な注意を払うことをお勧めします！</target>
        </trans-unit>
        <trans-unit id="aabc72f89b7e503ec80d1cd176e62a540d554afa" translate="yes" xml:space="preserve">
          <source>For anyone looking for a Windows/Mac GUI to help with editing older messages (i.e. not just the latest message), I'd recommend &lt;a href=&quot;http://www.sourcetreeapp.com&quot;&gt;Sourcetree&lt;/a&gt;. The steps to follow are below.</source>
          <target state="translated">古いメッセージ（つまり、最新のメッセージだけではない）の編集に役立つWindows / Mac GUIを探している人には、 &lt;a href=&quot;http://www.sourcetreeapp.com&quot;&gt;Sourcetreeを&lt;/a&gt;お勧めします 。 以下の手順は以下のとおりです。</target>
        </trans-unit>
        <trans-unit id="56a3e95e1be2395d8937cd2c69606bcd6173d273" translate="yes" xml:space="preserve">
          <source>For each commit you want to &lt;em&gt;reword&lt;/em&gt;, Git will drop you back into your editor. For each commit you want to &lt;em&gt;edit&lt;/em&gt;, Git drops you into the shell. If you&amp;rsquo;re in the shell:</source>
          <target state="translated">&lt;em&gt;書き直し&lt;/em&gt;たいコミットごとに、Gitはエディターに戻ります。 &lt;em&gt;編集&lt;/em&gt;するコミットごとに、Gitはシェルにドロップします。 シェルにいる場合：</target>
        </trans-unit>
        <trans-unit id="85811ef2e3b7a0d2ba4565ff2bd9205dc620d5c4" translate="yes" xml:space="preserve">
          <source>Git will create a temporary directory for rewriting and additionally backup old references in &lt;code&gt;refs/original/&lt;/code&gt;.</source>
          <target state="translated">Gitは書き換え用の一時ディレクトリを作成し、古い参照を &lt;code&gt;refs/original/&lt;/code&gt; バックアップします。</target>
        </trans-unit>
        <trans-unit id="64c5aefe857251584dc2fa8076d51d67df6b03c6" translate="yes" xml:space="preserve">
          <source>Good tip:</source>
          <target state="translated">良いヒントだ</target>
        </trans-unit>
        <trans-unit id="99fda9050cfbb0b15316cca06972614dbc5760db" translate="yes" xml:space="preserve">
          <source>Here you have successfully broken your last commit into two commits.</source>
          <target state="translated">ここでは、最後のコミットを2つのコミットに分割することに成功しました。</target>
        </trans-unit>
        <trans-unit id="a690949028d9d5d7fa5460499209a06a6a80f0be" translate="yes" xml:space="preserve">
          <source>How can I change the message? The commit has not been pushed yet.</source>
          <target state="translated">メッセージを変更するにはどうすればいいですか?コミットはまだプッシュされていません。</target>
        </trans-unit>
        <trans-unit id="d7c2de4b7aff480eb623b150a38b2d7f110eacc9" translate="yes" xml:space="preserve">
          <source>How to modify existing, unpushed commit messages</source>
          <target state="translated">既存のプッシュされていないコミットメッセージを修正する方法</target>
        </trans-unit>
        <trans-unit id="f872b24f203857e6dec69e0cc329fa249387115a" translate="yes" xml:space="preserve">
          <source>I always do this if I forget to add a file or do a change.</source>
          <target state="translated">ファイルの追加や変更を忘れた時にいつもやっています。</target>
        </trans-unit>
        <trans-unit id="f71d285985b60110c9b5ac8a68fe095280d58797" translate="yes" xml:space="preserve">
          <source>I have added the aliases &lt;code&gt;reci&lt;/code&gt; and &lt;code&gt;recm&lt;/code&gt; for &lt;code&gt;recommit (amend)&lt;/code&gt; it. Now I can do it with &lt;code&gt;git recm&lt;/code&gt; or &lt;code&gt;git recm -m&lt;/code&gt;:</source>
          <target state="translated">それを &lt;code&gt;recommit (amend)&lt;/code&gt; &lt;code&gt;recm&lt;/code&gt; （修正）するために、エイリアス &lt;code&gt;reci&lt;/code&gt; およびrecmを追加しました。 これで &lt;code&gt;git recm&lt;/code&gt; または &lt;code&gt;git recm -m&lt;/code&gt; で実行できます。</target>
        </trans-unit>
        <trans-unit id="7ead0f1a1d7a03041f8c0f351ac7716f8ec9d55c" translate="yes" xml:space="preserve">
          <source>I like to use the following:</source>
          <target state="translated">を使うのが好きです。</target>
        </trans-unit>
        <trans-unit id="a7bef60a9c8ba9945f6fea6181eaa5bc82defcdb" translate="yes" xml:space="preserve">
          <source>I prefer this way:</source>
          <target state="translated">私はこちらの方が好きです。</target>
        </trans-unit>
        <trans-unit id="9ccc5570e7a2f37a3daf20e33dbfa5e08ec1b719" translate="yes" xml:space="preserve">
          <source>I realised that I had pushed a commit with a typo in it. In order to undo, I did the following:</source>
          <target state="translated">タイプミスのあるコミットを押してしまったことに気がつきました。元に戻すために、以下のようにしました。</target>
        </trans-unit>
        <trans-unit id="d5424a7af0820b9f259dde33162fb40289dd1d7c" translate="yes" xml:space="preserve">
          <source>I use the &lt;a href=&quot;http://git-scm.com/docs/git-gui&quot;&gt;Git GUI&lt;/a&gt; as much as I can, and that gives you the option to amend the last commit:</source>
          <target state="translated">私はできる限り&lt;a href=&quot;http://git-scm.com/docs/git-gui&quot;&gt;Git GUI&lt;/a&gt;を使用しています。これにより、最後のコミットを修正するオプションが提供されます。</target>
        </trans-unit>
        <trans-unit id="5a058042cca786b98a983dca9754de82d480c7ab" translate="yes" xml:space="preserve">
          <source>I wanted to change my five latest commits that I already pushed to the server. This is quite 'dangerous' because if someone else already pulled from this, you can mess things up by changing the commit messages. However, when you&amp;rsquo;re working on your own little branch and are sure no one pulled it you can change it like this:</source>
          <target state="translated">私はすでにサーバーにプッシュした5つの最新のコミットを変更したいと思っていました。 これはかなり「危険」です。誰かがすでにこれをプルしている場合、コミットメッセージを変更することで混乱する可能性があるためです。 ただし、自分の小さなブランチで作業していて、誰もそれをプルしていないことが確実な場合は、次のように変更できます。</target>
        </trans-unit>
        <trans-unit id="d2a21af0dca7524c6564dc47503dec34c6089bf5" translate="yes" xml:space="preserve">
          <source>I wrote the wrong thing in a commit message.</source>
          <target state="translated">コミットメッセージに間違ったことを書いてしまいました。</target>
        </trans-unit>
        <trans-unit id="3f16d37e328913517e1b219c98bb494e1bf48ab2" translate="yes" xml:space="preserve">
          <source>If it's a buried commit, use the awesome &lt;strong&gt;interactive rebase&lt;/strong&gt;:</source>
          <target state="translated">埋め込み型のコミットの場合は、すばらしい&lt;strong&gt;インタラクティブリベースを&lt;/strong&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="1a2e40ecd7b22110fc1732e82667bf1e96bc7f07" translate="yes" xml:space="preserve">
          <source>If it's your last commit, just &lt;strong&gt;amend&lt;/strong&gt; the commit:</source>
          <target state="translated">最後のコミットの場合は、コミットを&lt;strong&gt;修正し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a1011b4a910232b030e11a685dd628900c37c828" translate="yes" xml:space="preserve">
          <source>If the commit you want to fix isn&amp;rsquo;t the most recent one:</source>
          <target state="translated">修正したいコミットが最新のものではない場合：</target>
        </trans-unit>
        <trans-unit id="1c7674dcf5d9a17f0553bab64e4371023b3edba6" translate="yes" xml:space="preserve">
          <source>If you are using the Git GUI tool, there is a button named &lt;em&gt;Amend last commit&lt;/em&gt;. Click on that button and then it will display your last commit files and message. Just edit that message, and you can commit it with a new commit message.</source>
          <target state="translated">Git GUIツールを使用している場合は、 &lt;em&gt;Amend last commit&lt;/em&gt;という名前のボタンがあります。 そのボタンをクリックすると、最後のコミットファイルとメッセージが表示されます。 そのメッセージを編集するだけで、新しいコミットメッセージでコミットできます。</target>
        </trans-unit>
        <trans-unit id="bfb7181ae8b7cc50362583d5868780d3cf80d663" translate="yes" xml:space="preserve">
          <source>If you are using the Git GUI, you can amend the last commit which hasn't been pushed with:</source>
          <target state="translated">Git GUIを使っている場合は、プッシュされていない最後のコミットを修正することができます。</target>
        </trans-unit>
        <trans-unit id="1090dcdcd14bcb8e0aee40586e0f4512539645ad" translate="yes" xml:space="preserve">
          <source>If you edit text a lot, then switch to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Dvorak_keyboard_layout&quot;&gt;Dvorak keyboard layout&lt;/a&gt;, learn to touch-type, and learn Vim. &lt;a href=&quot;https://stackoverflow.com/questions/597077/is-learning-vim-worth-the-effort&quot;&gt;Is it worth the effort?&lt;/a&gt; Yes.</source>
          <target state="translated">テキストを頻繁に編集する場合は、 &lt;a href=&quot;https://en.wikipedia.org/wiki/Dvorak_keyboard_layout&quot;&gt;Dvorakキーボードレイアウトに&lt;/a&gt;切り替え、タッチ入力を学び、Vimを学びます。 &lt;a href=&quot;https://stackoverflow.com/questions/597077/is-learning-vim-worth-the-effort&quot;&gt;努力する価値はありますか？&lt;/a&gt; はい。</target>
        </trans-unit>
        <trans-unit id="537da781c94247dd0b331b0d2a81df4b0b8e7aab" translate="yes" xml:space="preserve">
          <source>If you have not pushed the code to your remote branch (&lt;a href=&quot;http://en.wikipedia.org/wiki/GitHub&quot;&gt;GitHub&lt;/a&gt;/&lt;a href=&quot;http://en.wikipedia.org/wiki/Bitbucket&quot;&gt;Bitbucket&lt;/a&gt;) you can change the commit message on the command line as below.</source>
          <target state="translated">コードをリモートブランチ（ &lt;a href=&quot;http://en.wikipedia.org/wiki/GitHub&quot;&gt;GitHub&lt;/a&gt; / &lt;a href=&quot;http://en.wikipedia.org/wiki/Bitbucket&quot;&gt;Bitbucket&lt;/a&gt; ）にプッシュしていない場合は、コマンドラインでコミットメッセージを次のように変更できます。</target>
        </trans-unit>
        <trans-unit id="1bf0de856b25c0c411ebf5096c9883b06bdb439a" translate="yes" xml:space="preserve">
          <source>If you have to change an old commit message over multiple branches (i.e., the commit with the erroneous message is present in multiple branches) you might want to use:</source>
          <target state="translated">古いコミットメッセージを複数のブランチにまたがって変更しなければならない場合 (つまり、誤ったメッセージを含むコミットが複数のブランチに存在する場合)には、これを使うとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="8a32e66acf92892ea696bdbbb3a5802cb762c5de" translate="yes" xml:space="preserve">
          <source>If you have to do it for more than a single branch and you might face conflicts when amending the content, set up &lt;a href=&quot;https://stackoverflow.com/questions/35415925/is-it-possible-to-setup-git-merge-for-automatic-resolving-git-rerere/35417944#35417944&quot;&gt;&lt;code&gt;git rerere&lt;/code&gt;&lt;/a&gt; and let Git resolve those conflicts automatically for you.</source>
          <target state="translated">複数のブランチでこれを行う必要があり、コンテンツを修正するときに競合が発生する可能性がある場合は、 &lt;a href=&quot;https://stackoverflow.com/questions/35415925/is-it-possible-to-setup-git-merge-for-automatic-resolving-git-rerere/35417944#35417944&quot;&gt; &lt;code&gt;git rerere&lt;/code&gt; &lt;/a&gt;を設定し、Gitにそれらの競合を自動的に解決させます。</target>
        </trans-unit>
        <trans-unit id="ee566402d3c4cf74ce64b4e59cfaf0282be7d528" translate="yes" xml:space="preserve">
          <source>If you just want to edit the latest commit, use:</source>
          <target state="translated">最新のコミットを編集したいだけならば、以下のようにしてください。</target>
        </trans-unit>
        <trans-unit id="82db7cb0693c57af7eb1ade32e9fb0a3a3edf799" translate="yes" xml:space="preserve">
          <source>If you only want to change your last message you should use the &lt;code&gt;--only&lt;/code&gt; flag or its shortcut &lt;code&gt;-o&lt;/code&gt; with &lt;code&gt;commit --amend&lt;/code&gt;:</source>
          <target state="translated">最後のメッセージのみを変更したい場合は、-- &lt;code&gt;--only&lt;/code&gt; フラグまたはそのショートカット &lt;code&gt;-o&lt;/code&gt; を &lt;code&gt;commit --amend&lt;/code&gt; とともに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="17d40439e8088f91ded464271472bd49f0be088b" translate="yes" xml:space="preserve">
          <source>If you only want to modify your last commit message, then do:</source>
          <target state="translated">最後のコミットメッセージを修正したいだけならば、修正してください。</target>
        </trans-unit>
        <trans-unit id="51d4e79bd1d7f2d3d683716abe38bbe7ad091692" translate="yes" xml:space="preserve">
          <source>If you want to change the last three commit messages, or any of the commit messages up to that point, supply &lt;code&gt;HEAD~3&lt;/code&gt; to the &lt;code&gt;git rebase -i&lt;/code&gt; command:</source>
          <target state="translated">最後の3つのコミットメッセージ、またはその時点までのいずれかのコミットメッセージを変更する場合は、 &lt;code&gt;git rebase -i&lt;/code&gt; コマンドにHEAD〜3を指定します 。</target>
        </trans-unit>
        <trans-unit id="7a28de6ea6092c5fbab73a01a366d5cb3fe30429" translate="yes" xml:space="preserve">
          <source>If you want to edit more than one commit message, run</source>
          <target state="translated">複数のコミットメッセージを編集したい場合は</target>
        </trans-unit>
        <trans-unit id="a78e8bdc2ded9f51b7dfc568c468421d01041d3b" translate="yes" xml:space="preserve">
          <source>If you want to fix several flawed commits, pass the parent of the oldest one of them.</source>
          <target state="translated">複数の欠陥のあるコミットを修正したい場合は、一番古いコミットの親を渡します。</target>
        </trans-unit>
        <trans-unit id="324cec321d0415c9b54e054ec9386f21bed91f09" translate="yes" xml:space="preserve">
          <source>If you're working on a specific branch do this:</source>
          <target state="translated">特定のブランチで作業している場合は、これを実行してください。</target>
        </trans-unit>
        <trans-unit id="a683e388ede9765e08735d6d667b440ac09228ba" translate="yes" xml:space="preserve">
          <source>If you've already pushed the code with the wrong message, and you need to be careful when changing the message. That is, after you change the commit message and try pushing it again, you end up with having issues. To make it smooth, follow these steps.</source>
          <target state="translated">すでに間違ったメッセージでコードをプッシュしてしまっていて、メッセージを変更する際に注意が必要な場合。つまり、コミットメッセージを変更して再度プッシュしようとした後に、問題が発生してしまうのです。スムーズにするには、以下の手順に従ってください。</target>
        </trans-unit>
        <trans-unit id="49b3bf5ad384d123b2c23eae7dad2dcbde32c93b" translate="yes" xml:space="preserve">
          <source>If you've already pushed your commit up to your remote branch, then - after amending your commit locally (as described above) - you'll also &lt;a href=&quot;https://stackoverflow.com/questions/41003071/why-must-i-force-push-after-changing-a-commit-message&quot;&gt;need to force push the commit&lt;/a&gt; with:</source>
          <target state="translated">すでにコミットをリモートブランチに&lt;a href=&quot;https://stackoverflow.com/questions/41003071/why-must-i-force-push-after-changing-a-commit-message&quot;&gt;プッシュしている&lt;/a&gt;場合は、（上記のように）コミットをローカルで修正した後、次のコマンドを使用してコミットを強制的にプッシュする必要があります。</target>
        </trans-unit>
        <trans-unit id="ad1a060e5c6e478f27f57f590ca4b4ee0468c221" translate="yes" xml:space="preserve">
          <source>Important note about interactive rebase</source>
          <target state="translated">インタラクティブリベースに関する重要な注意事項</target>
        </trans-unit>
        <trans-unit id="01a19c640eb703c350db672793b82e9a0b1d059a" translate="yes" xml:space="preserve">
          <source>In a file, like the one above, write &lt;code&gt;edit/e&lt;/code&gt; or one of the other options, and hit save and exit.</source>
          <target state="translated">上記のようなファイルに、 &lt;code&gt;edit/e&lt;/code&gt; または他のオプションの1つを書き込み、保存して終了します。</target>
        </trans-unit>
        <trans-unit id="7598426d8a00853dbc0cca37aee0c4cf2d31d72e" translate="yes" xml:space="preserve">
          <source>In order to do a Git squash, follow these steps:</source>
          <target state="translated">Git スカッシュを行うには、以下の手順に従います。</target>
        </trans-unit>
        <trans-unit id="e2d58277a6cdab88c14651a65598ded91b284e8f" translate="yes" xml:space="preserve">
          <source>In the &quot;Log / History&quot; tab, right click on the entry with an adjoining line in the graph &lt;strong&gt;one below&lt;/strong&gt; the commit(s) you wish to edit and select &quot;Rebase children of &lt;em&gt;&amp;lt;commit ref&amp;gt;&lt;/em&gt; interactively...&quot;</source>
          <target state="translated">[ログ/履歴]タブで、編集するコミットの&lt;strong&gt;下&lt;/strong&gt;にあるグラフの隣接する行を含むエントリを右クリックし、[ &lt;em&gt;&amp;lt;commit ref&amp;gt;の&lt;/em&gt;子をインタラクティブにリベース...]を選択します。</target>
        </trans-unit>
        <trans-unit id="5c44dced14ced82516c17a2f8ed5fa91a97e5224" translate="yes" xml:space="preserve">
          <source>In the default editor, modify 'pick' to 'edit' in the line whose commit you want to modify. Make your changes and then stage them with</source>
          <target state="translated">デフォルトのエディタでは、変更したいコミットの行で'ピック'を'編集'に変更します。変更を行ってから</target>
        </trans-unit>
        <trans-unit id="226bab813445ce9f153dc587a2f5cd8f29f0724e" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;pick&lt;/code&gt; you need to write &lt;code&gt;reword&lt;/code&gt;. You can do this in Vim by typing in &lt;code&gt;i&lt;/code&gt;. That makes you go in to &lt;em&gt;insert&lt;/em&gt; mode. (You see that you&amp;rsquo;re in insert mode by the word &lt;em&gt;INSERT&lt;/em&gt; at the bottom.) For the commits you want to change, type in &lt;code&gt;reword&lt;/code&gt; instead of &lt;code&gt;pick&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pick&lt;/code&gt; の代わりに &lt;code&gt;reword&lt;/code&gt; を書く必要があります。 Vimでこれを行うには、 &lt;code&gt;i&lt;/code&gt; と入力します。 &lt;em&gt;挿入&lt;/em&gt;モードになります。 （一番下の&lt;em&gt;INSERT&lt;/em&gt;という単語で挿入モードになっていることがわかります。）変更するコミットについては、 &lt;code&gt;reword&lt;/code&gt; 代わりにrewordと入力します。</target>
        </trans-unit>
        <trans-unit id="8283ba700399d4e9b3046d8bf11fb6437003b436" translate="yes" xml:space="preserve">
          <source>Interactive rebase</source>
          <target state="translated">インタラクティブリベース</target>
        </trans-unit>
        <trans-unit id="64388b42c1ec2c5f907675208286ca6379d56b28" translate="yes" xml:space="preserve">
          <source>It is designed to edit any commit (not just last) same way as &lt;code&gt;commit --amend&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;commit --amend&lt;/code&gt; と同じ方法で、（最後だけでなく）コミットを編集するように設計されています</target>
        </trans-unit>
        <trans-unit id="f3c4da5aba698dd7991db9cd195e40587df60bfb" translate="yes" xml:space="preserve">
          <source>It is named after the action on rebase interactive to amend a commit: &quot;reword&quot;. See &lt;a href=&quot;https://robots.thoughtbot.com/git-interactive-rebase-squash-amend-rewriting-history&quot;&gt;this post&lt;/a&gt; and &lt;a href=&quot;http://git-scm.com/docs/git-rebase&quot;&gt;man&lt;/a&gt; -section interactive mode-</source>
          <target state="translated">これは、コミットを修正するためのrebase interactiveのアクションにちなんで名付けられました： &quot;reword&quot;。 &lt;a href=&quot;https://robots.thoughtbot.com/git-interactive-rebase-squash-amend-rewriting-history&quot;&gt;この投稿&lt;/a&gt;と&lt;a href=&quot;http://git-scm.com/docs/git-rebase&quot;&gt;man&lt;/a&gt; -sectionインタラクティブモード-を参照してください</target>
        </trans-unit>
        <trans-unit id="33f6c69e7bd97548a38dc0a2467332aaa518a1b1" translate="yes" xml:space="preserve">
          <source>It's not as easy as a trivial &lt;code&gt;git commit --amend&lt;/code&gt;, but it's especially useful, if you already have some merges after your erroneous commit message.</source>
          <target state="translated">これは、些細な &lt;code&gt;git commit --amend&lt;/code&gt; ほど簡単ではありませんが、誤ったコミットメッセージの後に既にいくつかのマージがある場合は特に便利です。</target>
        </trans-unit>
        <trans-unit id="b757980d7844ff5175d1481ed1e3c6bbedaf5c77" translate="yes" xml:space="preserve">
          <source>Let's say you want to change your five latest commits, and then you type this in the terminal:</source>
          <target state="translated">5つの最新のコミットを変更したい場合、ターミナルでこのように入力します。</target>
        </trans-unit>
        <trans-unit id="314e39a7aaaf46a85c0cea62f484616a7f6dbae7" translate="yes" xml:space="preserve">
          <source>Make sure you don't have any working copy changes &lt;em&gt;staged&lt;/em&gt; before doing this or they will get committed too. (&lt;em&gt;Unstaged&lt;/em&gt; changes will not get committed.)</source>
          <target state="translated">これを行う前に、作業コピーの変更が&lt;em&gt;ステージングされ&lt;/em&gt;ていないことを確認してください。そうしないと、コミットもコミットされます。 （ &lt;em&gt;ステージング&lt;/em&gt;されていない変更はコミットされません。）</target>
        </trans-unit>
        <trans-unit id="75efdbef38e3f34b3b4a921f14e84734e02ab7f2" translate="yes" xml:space="preserve">
          <source>Make sure you've committed or stashed all current changes (i.e., so there are no files listed in the &quot;File Status&quot; tab) - it won't work otherwise.</source>
          <target state="translated">現在の変更がすべてコミットされているか、または保存されていることを確認してください(つまり、&quot;ファイルの状態 &quot;タブにリストされているファイルがないことを確認してください)-そうしないと動作しません。</target>
        </trans-unit>
        <trans-unit id="c459ebce80600c41e94f89ddca86f21bbb93cd94" translate="yes" xml:space="preserve">
          <source>Miniature Vim tutorial (or, how to rebase with only 8 keystrokes</source>
          <target state="translated">ミニチュア Vim チュートリアル (または、わずか 8 キーストロークでリベースする方法)</target>
        </trans-unit>
        <trans-unit id="5cb0e58a346389526e93fdf68ccc3bdc41d9a68c" translate="yes" xml:space="preserve">
          <source>Most of this sequence will be explained to you by the output of the various commands as you go. It&amp;rsquo;s very easy; you don&amp;rsquo;t need to memorise it &amp;ndash; just remember that &lt;code&gt;git rebase --interactive&lt;/code&gt; lets you correct commits no matter how long ago they were.</source>
          <target state="translated">このシーケンスのほとんどは、さまざまなコマンドの出力に応じて説明されます。 それは非常に簡単です; 覚える必要はありません &lt;code&gt;git rebase --interactive&lt;/code&gt; 使用すると、コミットがどれだけ前でも修正できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c32b2165806ae246917f4662d8eb71c8c3babae1" translate="yes" xml:space="preserve">
          <source>Note that these things change all your SHA hashes after that particular commit.</source>
          <target state="translated">これらのことは、特定のコミット後にすべての SHA ハッシュを変更することに注意してください。</target>
        </trans-unit>
        <trans-unit id="a6ac0e570855e8a6fd20567d169ad63e8f660398" translate="yes" xml:space="preserve">
          <source>Note that this will try to rewrite &lt;em&gt;every&lt;/em&gt; commit between &lt;code&gt;HEAD&lt;/code&gt; and the flawed commit, so you should choose your &lt;code&gt;msg-filter&lt;/code&gt; command very wisely ;-)</source>
          <target state="translated">これは &lt;code&gt;HEAD&lt;/code&gt; と欠陥のあるコミットの間の&lt;em&gt;すべての&lt;/em&gt;コミットを書き換えようとするので、 &lt;code&gt;msg-filter&lt;/code&gt; コマンドを非常に賢く選択する必要があることに注意してください;-)</target>
        </trans-unit>
        <trans-unit id="b46bc9f64374b0571d067b4a755f642780c1922f" translate="yes" xml:space="preserve">
          <source>Note that you will not want to change commits that you have already pushed. Or maybe you do, but in that case you will have to take great care to communicate with everyone who may have pulled your commits and done work on top of them. &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4084868/how-do-i-recover-resynchronise-after-someone-pushes-a-rebase-or-a-reset-to-a-pub&quot;&gt;How do I recover/resynchronise after someone pushes a rebase or a reset to a published branch?&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">すでにプッシュしたコミットを変更したくないことに注意してください。 あるいは、そうするかもしれませんが、その場合は、コミットをプルしてその上で作業を行った可能性のあるすべての人と通信するように細心の注意を払う必要があります。 &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4084868/how-do-i-recover-resynchronise-after-someone-pushes-a-rebase-or-a-reset-to-a-pub&quot;&gt;公開されたブランチに誰かがリベースまたはリセットをプッシュした後、どのように回復/再同期しますか？&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="18901ada473f70bd3df3861690385ff2583a5640" translate="yes" xml:space="preserve">
          <source>Note: You can also &quot;Make the change you want&quot; from the editor opened by &lt;code&gt;git commit --amend&lt;/code&gt;</source>
          <target state="translated">注： &lt;code&gt;git commit --amend&lt;/code&gt; で開いたエディターから「必要な変更を加える」こともできます。</target>
        </trans-unit>
        <trans-unit id="afa96f5ef82343e80b75b32d5fb1ce76d59679eb" translate="yes" xml:space="preserve">
          <source>Now you can use</source>
          <target state="translated">これで、あなたは</target>
        </trans-unit>
        <trans-unit id="7787ac5bd348952efbbc395221aa23b299315da2" translate="yes" xml:space="preserve">
          <source>Now you have changed your commit messages!</source>
          <target state="translated">これでコミットメッセージが変更されました</target>
        </trans-unit>
        <trans-unit id="5d8308874a84249b672f526d18159a66c85a318f" translate="yes" xml:space="preserve">
          <source>Now you'll be at the first wrong commit. Make changes in the files, and they'll be automatically staged for you. Type</source>
          <target state="translated">これで最初の間違ったコミットのところで ファイルに変更を加えれば、自動的にステージングされます。タイプ</target>
        </trans-unit>
        <trans-unit id="9ce3bd4224c8c1780db56b4125ecf3f24bf748b7" translate="yes" xml:space="preserve">
          <source>OK</source>
          <target state="translated">OK</target>
        </trans-unit>
        <trans-unit id="0a419341678c8db38200c28d3bc480175a6b7f03" translate="yes" xml:space="preserve">
          <source>On this question there are a lot of answers, but none of them explains in super detail how to change older commit messages using &lt;a href=&quot;http://en.wikipedia.org/wiki/Vim_%28text_editor%29&quot;&gt;Vim&lt;/a&gt;. I was stuck trying to do this myself, so here I'll write down in detail how I did this especially for people who have no experience in Vim!</source>
          <target state="translated">この質問には多くの答えがありますが、 &lt;a href=&quot;http://en.wikipedia.org/wiki/Vim_%28text_editor%29&quot;&gt;Vim&lt;/a&gt;を使用して古いコミットメッセージを変更する方法を非常に詳細に説明しているものはありません。 私がこれを自分でやろうとして動けなくなったので、ここでは、特にVimの経験がない人のために、これをどのように行ったのかを詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="8f4283541ffc56fa2391f987d51c11f228e9cf5e" translate="yes" xml:space="preserve">
          <source>Once you save, Git will replay the listed commits.</source>
          <target state="translated">保存すると、Git はリストアップされたコミットを再生します。</target>
        </trans-unit>
        <trans-unit id="c3c5323e77e97b944f42a7ac0137785258b47f15" translate="yes" xml:space="preserve">
          <source>Once you squash your commits - choose the &lt;code&gt;e/r&lt;/code&gt; for editing the message:</source>
          <target state="translated">コミットを押しつぶしたら、メッセージを編集するための &lt;code&gt;e/r&lt;/code&gt; を選択します。</target>
        </trans-unit>
        <trans-unit id="52be91bf5d9781fa67954063b817a92e0da0fcb9" translate="yes" xml:space="preserve">
          <source>Or use this command from a console/terminal:</source>
          <target state="translated">または、コンソールターミナルからこのコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="20de4020936774e43563105e9f083c88256e0de5" translate="yes" xml:space="preserve">
          <source>Or, try Git reset like below:</source>
          <target state="translated">もしくは、以下のようにGitをリセットしてみてください。</target>
        </trans-unit>
        <trans-unit id="f4602422740c6d3f89e9ff56816c492ed6cbd4e7" translate="yes" xml:space="preserve">
          <source>Otherwise, if it's not your last commit, you can do an interactive rebase,</source>
          <target state="translated">そうでなければ、最後のコミットでない場合は、対話的にリベースを行うことができます。</target>
        </trans-unit>
        <trans-unit id="55e74ef477a9216e7e4cda96d4ad2263c3a5ec10" translate="yes" xml:space="preserve">
          <source>Otherwise, there will be a new commit with a new commit ID.</source>
          <target state="translated">そうでない場合は、新しいコミットIDの新しいコミットが作成されます。</target>
        </trans-unit>
        <trans-unit id="eed2b533b936ff8cc5fd4e5ef633af9481bf9a5f" translate="yes" xml:space="preserve">
          <source>Perform an interactive rebase</source>
          <target state="translated">インタラクティブなリベースを実行します。</target>
        </trans-unit>
        <trans-unit id="77ecdb8d3da3edd63521ce51f90410c6290e3a2d" translate="yes" xml:space="preserve">
          <source>ProTip&amp;trade;: Don't be afraid to experiment with &quot;dangerous&quot; commands that rewrite history* &amp;mdash; Git doesn't delete your commits for 90 days by default; you can find them in the reflog:</source>
          <target state="translated">ProTip&amp;trade;：履歴を書き換える「危険な」コマンドを試すことを恐れないでください&amp;mdash; Gitはデフォルトで90日間コミットを削除しません。 あなたはそれらをreflogで見つけることができます：</target>
        </trans-unit>
        <trans-unit id="3308b6ccef5a11ddcd6a26ca18d3f31ea4629ee3" translate="yes" xml:space="preserve">
          <source>Repeat steps 3-4 if there are other commit messages to change.</source>
          <target state="translated">他に変更するコミットメッセージがある場合は、手順3-4を繰り返します。</target>
        </trans-unit>
        <trans-unit id="7dfb87706e14c88c0e15e93aba66aeadc9f16477" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;vimtutor&lt;/code&gt; if you have time</source>
          <target state="translated">時間がある場合は &lt;code&gt;vimtutor&lt;/code&gt; を実行します</target>
        </trans-unit>
        <trans-unit id="33bee255359d5325886f2f9f38bd1b7ef63c2b4a" translate="yes" xml:space="preserve">
          <source>Save and exit that and type</source>
          <target state="translated">保存して終了し、タイプ</target>
        </trans-unit>
        <trans-unit id="e0a9d3ab2e00da3e1e5b35ad368e4985153b116e" translate="yes" xml:space="preserve">
          <source>Say, you want to recover your master and access it in branch &lt;code&gt;old_master&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;old_master&lt;/code&gt; 、マスターを回復して、 old_masterブランチでアクセスしたいとします。</target>
        </trans-unit>
        <trans-unit id="9a1164328303f0e7aef0ad70722adac01bf5714d" translate="yes" xml:space="preserve">
          <source>Select the whole row for a commit message you wish to change (&lt;em&gt;i.e., click on the &quot;Message&quot; column&lt;/em&gt;).</source>
          <target state="translated">変更するコミットメッセージの行全体を選択します（ &lt;em&gt;つまり、[メッセージ]列をクリックします&lt;/em&gt; ）。</target>
        </trans-unit>
        <trans-unit id="a26f780678a6d3a9f251706447f5b64005273b37" translate="yes" xml:space="preserve">
          <source>That will drop you into your text editor and let you change the last commit message.</source>
          <target state="translated">これでテキストエディタにドロップされ、最後のコミットメッセージを変更することができます。</target>
        </trans-unit>
        <trans-unit id="e4096d93990554059857e203340d7a995c560a36" translate="yes" xml:space="preserve">
          <source>Then Vim will go over every commit message you want to reword, and here you can actually change the commit messages. You&amp;rsquo;ll do this by going into insert mode, changing the commit message, going into the command-mode, and save and quit. Do this five times and you&amp;rsquo;re out of Vim!</source>
          <target state="translated">次に、Vimは言い換えたいすべてのコミットメッセージを確認します。ここで実際にコミットメッセージを変更できます。 これを行うには、挿入モードに入り、コミットメッセージを変更し、コマンドモードに入り、保存して終了します。 これを5回行うと、Vimは終了します。</target>
        </trans-unit>
        <trans-unit id="b75e221ac3451aee7b1b94cc11b344316ef30b6e" translate="yes" xml:space="preserve">
          <source>Then inside the interactive rebase you simply add edit to that commit. When it comes up, do a &lt;code&gt;git commit --amend&lt;/code&gt; and modify the commit message. If you want to roll back before that commit point, you could also use &lt;code&gt;git reflog&lt;/code&gt; and just delete that commit. Then you just do a &lt;code&gt;git commit&lt;/code&gt; again.</source>
          <target state="translated">次に、インタラクティブなリベース内で、そのコミットに編集を追加するだけです。 起動したら、 &lt;code&gt;git commit --amend&lt;/code&gt; を実行して、コミットメッセージを変更します。 そのコミットポイントの前にロールバックしたい場合は、 &lt;code&gt;git reflog&lt;/code&gt; を使用して、そのコミットを削除することもできます。 次に、もう一度 &lt;code&gt;git commit&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="44035053d738daf2c3426a6fb01ffb7685720036" translate="yes" xml:space="preserve">
          <source>Then you need to save and quit this screen. You do that by first going in to &amp;lsquo;command-mode&amp;rsquo; by pressing the</source>
          <target state="translated">次に、この画面を保存して終了する必要があります。 あなたは最初に「コマンドモード」に入り、</target>
        </trans-unit>
        <trans-unit id="2e8da7db63753dabddaee4db6af25bdee3a5e09e" translate="yes" xml:space="preserve">
          <source>Then, if you already pushed your wrong commits, you need to &lt;code&gt;git push --force&lt;/code&gt; to overwrite them. Remember that &lt;code&gt;git push --force&lt;/code&gt; is quite a dangerous thing to do, so make sure that no one pulled from the server since you pushed your wrong commits!</source>
          <target state="translated">次に、間違ったコミットをすでにプッシュしている場合は、それらを上書きするために &lt;code&gt;git push --force&lt;/code&gt; を実行する必要があります。 &lt;code&gt;git push --force&lt;/code&gt; を実行するのは非常に危険であることを忘れないでください。間違ったコミットをプッシュしたため、誰もサーバーからプルしないようにしてください。</target>
        </trans-unit>
        <trans-unit id="26253e4abf4e26e804dd81363163b679c4468f73" translate="yes" xml:space="preserve">
          <source>This command will get you into Vim there you can &amp;lsquo;edit&amp;rsquo; your commit history. You&amp;rsquo;ll see your last five commits at the top like this:</source>
          <target state="translated">このコマンドを実行すると、Vimに移動し、コミット履歴を「編集」できます。 次のように、最後の5つのコミットが上部に表示されます。</target>
        </trans-unit>
        <trans-unit id="6b465354216b882095ff215390469dd80b17e5f0" translate="yes" xml:space="preserve">
          <source>This ensures that you don't accidentally enhance your commit with staged stuff. Of course it's best to have a proper &lt;code&gt;$EDITOR&lt;/code&gt; configuration. Then you can leave the &lt;code&gt;-m&lt;/code&gt; option out, and Git will pre-fill the commit message with the old one. In this way it can be easily edited.</source>
          <target state="translated">これにより、ステージングされたもので誤ってコミットを強化することがなくなります。 もちろん、 &lt;code&gt;$EDITOR&lt;/code&gt; 適切に構成することをお勧めします。 次に、 &lt;code&gt;-m&lt;/code&gt; オプションを省略できます。Gitはコミットメッセージに古いメッセージを事前に入力します。 このようにして、簡単に編集できます。</target>
        </trans-unit>
        <trans-unit id="b7b71b3ef7f4905bf520438e695a63d94ef4fdec" translate="yes" xml:space="preserve">
          <source>This is the best practice when changing the commit message, if it was already pushed.</source>
          <target state="translated">コミットメッセージが既にプッシュされている場合に、コミットメッセージを変更する際のベストプラクティスです。</target>
        </trans-unit>
        <trans-unit id="e472addcb340e40e46d441b595f9ad47732b3f30" translate="yes" xml:space="preserve">
          <source>This will open a file in your text editor representing your new commit message. It starts out populated with the text from your old commit message. Change the commit message as you want, then save the file and quit your editor to finish.</source>
          <target state="translated">これは、新しいコミットメッセージを表すファイルをテキストエディタで開きます。このファイルには、古いコミットメッセージのテキストが含まれています。コミットメッセージを好きなように変更してからファイルを保存し、エディタを終了して終了します。</target>
        </trans-unit>
        <trans-unit id="a73614e15359a42654cd495530206975abb50e8b" translate="yes" xml:space="preserve">
          <source>To amend the previous commit and keep the same log message, run</source>
          <target state="translated">前のコミットを修正し、同じログメッセージを保持するには、次のように実行します。</target>
        </trans-unit>
        <trans-unit id="a639ce1453a3eb7eb95b4f7400c7d8daf2a6daf6" translate="yes" xml:space="preserve">
          <source>To amend the previous commit, make the changes you want and stage those changes, and then run</source>
          <target state="translated">前のコミットを修正するには、変更したい変更を行い、その変更をステージングしてから</target>
        </trans-unit>
        <trans-unit id="7ecf92cf1ec772b7937c2227365be83d9ed29db5" translate="yes" xml:space="preserve">
          <source>To fix the previous commit by removing it entirely, run</source>
          <target state="translated">前のコミットを完全に削除して修正するには、次のように実行します。</target>
        </trans-unit>
        <trans-unit id="d49b00477423eae08072ae322db9654f51877b3a" translate="yes" xml:space="preserve">
          <source>To understand it in detail, an excellent post is &lt;em&gt;&lt;a href=&quot;https://www.atlassian.com/git/tutorials/rewriting-history#git-commit--amend&quot;&gt;4. Rewriting Git History&lt;/a&gt;&lt;/em&gt;. It also talks about &lt;strong&gt;when not to use&lt;/strong&gt;&lt;code&gt;git commit --amend&lt;/code&gt;.</source>
          <target state="translated">詳細に理解するには、優れた投稿は&lt;em&gt;&lt;a href=&quot;https://www.atlassian.com/git/tutorials/rewriting-history#git-commit--amend&quot;&gt;4. Git Historyの書き換え&lt;/a&gt;&lt;/em&gt;です。 また、 &lt;code&gt;git commit --amend&lt;/code&gt; &lt;strong&gt;を使用しない場合&lt;/strong&gt;についても説明します。</target>
        </trans-unit>
        <trans-unit id="dfdda8b62ffd2d3eaba69154904f415d055e181a" translate="yes" xml:space="preserve">
          <source>Update your last wrong commit message with the new commit message in one line:</source>
          <target state="translated">前回の間違ったコミットメッセージを1行で新しいコミットメッセージに更新します。</target>
        </trans-unit>
        <trans-unit id="1d4d43cc6f3a833e0340a0d1794b6d7b9958657e" translate="yes" xml:space="preserve">
          <source>Use</source>
          <target state="translated">Use</target>
        </trans-unit>
        <trans-unit id="632993fe184f88b280a3d7d23dd1109d7c895db7" translate="yes" xml:space="preserve">
          <source>Using reset to split commits into smaller commits</source>
          <target state="translated">reset を使用してコミットをより小さなコミットに分割する</target>
        </trans-unit>
        <trans-unit id="7a17e609b482fcb3423f1cd7db14297d187da49a" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;git rebase -i HEAD~n&lt;/code&gt; there can be &lt;strong&gt;more&lt;/strong&gt; than n commits. Git will &quot;collect&quot; all the commits in the last n commits, and if there was a merge somewhere in between that range you will see all the commits as well, so the outcome will be n + .</source>
          <target state="translated">&lt;code&gt;git rebase -i HEAD~n&lt;/code&gt; を使用すると、nを超えるコミットが存在する可能性があります。 Gitは最後のn個のコミットのすべてのコミットを「収集」します。その範囲の間にマージがあった場合は、すべてのコミットも表示されるため、結果はn +になります。</target>
        </trans-unit>
        <trans-unit id="7bdd996fb9f3a79b5e191fc7debf67431d4e47e3" translate="yes" xml:space="preserve">
          <source>Wow, so there are a lot of ways to do this.</source>
          <target state="translated">うわー、だから色々な方法があるんですね。</target>
        </trans-unit>
        <trans-unit id="30790662109be1b01ef4a7cc38d14098ff0c5bb2" translate="yes" xml:space="preserve">
          <source>Yet another way to do this is to delete the last commit, but keep its changes so that you won't lose your work. You can then do another commit with the corrected message. This would look something like this:</source>
          <target state="translated">さらに別の方法としては、最後のコミットを削除しても、その変更点を残しておくことで、自分の作業を失うことがないようにすることができます。そうすれば、修正されたメッセージで別のコミットを行うことができます。これは次のようになります。</target>
        </trans-unit>
        <trans-unit id="d562170d5afd40c1f73b6228c7a9ceae7ce5d62c" translate="yes" xml:space="preserve">
          <source>You also can use &lt;code&gt;git filter-branch&lt;/code&gt; for that.</source>
          <target state="translated">&lt;code&gt;git filter-branch&lt;/code&gt; を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="c9b51188bfd91fc21736786a8d6536e83014e535" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;http://git-scm.com/book/en/Git-Branching-Rebasing&quot;&gt;Git rebasing&lt;/a&gt;. For example, if you want to modify back to commit bbc643cd, run</source>
          <target state="translated">&lt;a href=&quot;http://git-scm.com/book/en/Git-Branching-Rebasing&quot;&gt;Gitリベース&lt;/a&gt;を使用できます。 たとえば、bbc643cdをコミットするように変更して戻す場合は、次を実行します。</target>
        </trans-unit>
        <trans-unit id="7438d3ec7a3e4327838d10a8d934081bb500f511" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;https://github.com/albfan/git-rebase-reword&quot;&gt;git-rebase-reword&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/albfan/git-rebase-reword&quot;&gt;git-rebase-rewordを&lt;/a&gt;使用できます</target>
        </trans-unit>
        <trans-unit id="af21acfd6828386c24a507086a1b24ccdfe064c8" translate="yes" xml:space="preserve">
          <source>You have a couple of options here. You can do</source>
          <target state="translated">ここにはいくつかの選択肢があります あなたができるのは</target>
        </trans-unit>
        <trans-unit id="5078d61e272fdb231416324112c7872885be513d" translate="yes" xml:space="preserve">
          <source>as long as it's your last commit.</source>
          <target state="translated">それがあなたの最後のコミットである限り。</target>
        </trans-unit>
        <trans-unit id="84b0e28b58f2980b68e47f7ae3a2b61f1e93891f" translate="yes" xml:space="preserve">
          <source>button (you can check that you&amp;rsquo;re in command-mode if the word &lt;em&gt;INSERT&lt;/em&gt; at the bottom has disappeared). Then you can type in a command by typing &lt;code&gt;:&lt;/code&gt;. The command to save and quit is &lt;code&gt;wq&lt;/code&gt;. So if you type in &lt;code&gt;:wq&lt;/code&gt; you&amp;rsquo;re on the right track.</source>
          <target state="translated">ボタン（下部にある&lt;em&gt;INSERT&lt;/em&gt;という単語が消えた場合は、コマンドモードであることを確認できます）。 次に、次のように入力してコマンドを入力できます。 保存して終了するコマンドは &lt;code&gt;wq&lt;/code&gt; です。 したがって、 &lt;code&gt;:wq&lt;/code&gt; と入力すると、正しい方向に進んでいます。</target>
        </trans-unit>
        <trans-unit id="f8fbb6980f90eb02ebb81570fde3a124f877ce69" translate="yes" xml:space="preserve">
          <source>correspond to movement keys</source>
          <target state="translated">移動キーに対応</target>
        </trans-unit>
        <trans-unit id="a50b09bb601459b63cd32db9c8bc4be2f38a8095" translate="yes" xml:space="preserve">
          <source>git-commit(1) Manual Page</source>
          <target state="translated">git-commit(1)マニュアルページ</target>
        </trans-unit>
        <trans-unit id="79675dc6d8cb4e6af07c04773a516e1c2b45bdc4" translate="yes" xml:space="preserve">
          <source>git-push(1) Manual Page</source>
          <target state="translated">git-push(1)マニュアルページ</target>
        </trans-unit>
        <trans-unit id="bf0a0f5e3f4891f99c6917eb096e94bd64744220" translate="yes" xml:space="preserve">
          <source>git-rebase(1) Manual Page</source>
          <target state="translated">git-rebase(1)マニュアルページ</target>
        </trans-unit>
        <trans-unit id="a02c8b249ce9bae21f915eec52abeadf0e214a75" translate="yes" xml:space="preserve">
          <source>moves down three lines</source>
          <target state="translated">さんぎょう</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="bc8067e60d906af0dae0b2f9b16103b2c16ce5c5" translate="yes" xml:space="preserve">
          <source>to change a line, word, or letter, respectively (same as</source>
          <target state="translated">で、それぞれの行、単語、文字を変更することができます。</target>
        </trans-unit>
        <trans-unit id="c97b9d50f39fc9d46036376014823bbe7547d71c" translate="yes" xml:space="preserve">
          <source>to copy (&quot;yank&quot;) a line, word, or letter, respectively</source>
          <target state="translated">写す</target>
        </trans-unit>
        <trans-unit id="a0ce74f62c3d0eb95142d19801d0b0b76d0bcd12" translate="yes" xml:space="preserve">
          <source>to delete a line, word, or letter, respectively</source>
          <target state="translated">で、それぞれの行、単語、文字を削除します。</target>
        </trans-unit>
        <trans-unit id="aaaa0e52acb9746dfa5438b7cf65ca6f035f56e4" translate="yes" xml:space="preserve">
          <source>to enter insert mode &amp;mdash; text you type will appear in the file</source>
          <target state="translated">挿入モードに入る&amp;mdash;入力したテキストはファイルに表示されます</target>
        </trans-unit>
        <trans-unit id="99db56f69e2d891dd70f2d26ed9c64792a66b959" translate="yes" xml:space="preserve">
          <source>to exit insert mode and return to &quot;normal&quot; mode</source>
          <target state="translated">をクリックしてインサートモードを終了し、&quot;通常 &quot;モードに戻ります。</target>
        </trans-unit>
        <trans-unit id="b6ed2f1096144e70175303d03ff1181610e8bf09" translate="yes" xml:space="preserve">
          <source>to modify the commit, and after that</source>
          <target state="translated">でコミットを修正し、その後</target>
        </trans-unit>
        <trans-unit id="97208c0f89ca192b2f4971aa263bdf9117933776" translate="yes" xml:space="preserve">
          <source>to move to next selection until finished with all your selections.</source>
          <target state="translated">をクリックすると、すべての選択が終了するまで次の選択に移動します。</target>
        </trans-unit>
        <trans-unit id="9a2b31c3771eceb572709ee77808fa165b24715e" translate="yes" xml:space="preserve">
          <source>to paste after, or before current position, respectively</source>
          <target state="translated">をクリックすると、それぞれ現在の位置の後、または前に貼り付けます。</target>
        </trans-unit>
        <trans-unit id="0cf0e0111fe609a89ed16dca218c858fb6803513" translate="yes" xml:space="preserve">
          <source>to quit without saving</source>
          <target state="translated">辞めるに辞められない</target>
        </trans-unit>
        <trans-unit id="a2c7ddba954d772f094a428d21b46e46530cb0b4" translate="yes" xml:space="preserve">
          <source>to redo</source>
          <target state="translated">やり直し</target>
        </trans-unit>
        <trans-unit id="1307936b93fc814e854e3caf017ce12ab456620b" translate="yes" xml:space="preserve">
          <source>to return back to the previous head commit.</source>
          <target state="translated">をクリックすると、前のヘッドコミットに戻ります。</target>
        </trans-unit>
        <trans-unit id="f66d982a4fc4c4c315a2d5e0da423f6ff0149947" translate="yes" xml:space="preserve">
          <source>to save (write) a file</source>
          <target state="translated">書き留める</target>
        </trans-unit>
        <trans-unit id="0bf874c9d3659d05682b5c10bbcd5cfa3b758100" translate="yes" xml:space="preserve">
          <source>to save and quit</source>
          <target state="translated">貯めて辞めるために</target>
        </trans-unit>
        <trans-unit id="3ca29c2152337cff1a8724c31774fb8c1109aae0" translate="yes" xml:space="preserve">
          <source>to undo</source>
          <target state="translated">元に戻す</target>
        </trans-unit>
        <trans-unit id="85569b57d3c5b818f2c6785d171952a6882d9e3e" translate="yes" xml:space="preserve">
          <source>will open your editor, allowing you to change the commit message of the most recent commit. Additionally, you can set the commit message directly in the command line with:</source>
          <target state="translated">を実行するとエディタが開き、最新のコミットのコミットメッセージを変更することができます。さらに、コマンドラインで直接コミットメッセージを設定することもできます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
