<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/179123">
    <body>
      <group id="179123">
        <trans-unit id="2d83e069dedd71fdecfa4fdbff3e7d05d4379f90" translate="yes" xml:space="preserve">
          <source>&amp;darr;</source>
          <target state="translated">&amp;darr;</target>
        </trans-unit>
        <trans-unit id="ea81b36fda5c4b4efdf3377d8485597e3f78d325" translate="yes" xml:space="preserve">
          <source>&amp;hellip;however, this can make multi-line commit messages or small corrections more cumbersome to enter.</source>
          <target state="translated">&amp;hellip;但是，这会使输入多行提交消息或进行小的更正变得更加麻烦。</target>
        </trans-unit>
        <trans-unit id="354c6cc208269f5a5fe067f22626f0bf4c409c79" translate="yes" xml:space="preserve">
          <source>&amp;larr;</source>
          <target state="translated">&amp;larr;</target>
        </trans-unit>
        <trans-unit id="4466f5ea01bad40a521f3168b5b7a9dbde092776" translate="yes" xml:space="preserve">
          <source>&amp;rarr;</source>
          <target state="translated">&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="b91878827a2aeacb8a8be36c9f47b30ac9d58817" translate="yes" xml:space="preserve">
          <source>&amp;uarr;</source>
          <target state="translated">&amp;uarr;</target>
        </trans-unit>
        <trans-unit id="d5666fa217269dfecdbf9e16efa7f88d709dc058" translate="yes" xml:space="preserve">
          <source>(As you see, I'm not that experienced in Vim, so if I used the wrong 'lingo' to explain what's happening, feel free to correct me!)</source>
          <target state="translated">(如你所见,我对Vim没有那么多的经验,所以如果我用错了 &quot;行话 &quot;来解释发生了什么事,请随时纠正我!)</target>
        </trans-unit>
        <trans-unit id="e821587bbb25ca29016fd0ce5d0c0d350e8b521d" translate="yes" xml:space="preserve">
          <source>(Replace &lt;b&gt;commit_count&lt;/b&gt; with number of commits that you want to edit.) This command launches your editor. Mark the first commit (the one that you want to change) as &amp;ldquo;edit&amp;rdquo; instead of &amp;ldquo;pick&amp;rdquo;, then save and exit your editor. Make the change you want to commit and then run</source>
          <target state="translated">（用要编辑的提交数替换&lt;b&gt;commit_count&lt;/b&gt; 。）此命令启动编辑器。 将第一个提交（您要更改的提交）标记为&amp;ldquo;编辑&amp;rdquo;而不是&amp;ldquo;选择&amp;rdquo;，然后保存并退出编辑器。 进行您要提交的更改，然后运行</target>
        </trans-unit>
        <trans-unit id="f604eb308400b6fcc9b139d918e56d9385e739d6" translate="yes" xml:space="preserve">
          <source>* &lt;em&gt;Watch out for options like &lt;code&gt;--hard&lt;/code&gt; and &lt;code&gt;--force&lt;/code&gt; though &amp;mdash; they can discard data.&lt;/em&gt;
*  &lt;em&gt;Also, don't rewrite history on any branches you're collaborating on.&lt;/em&gt;</source>
          <target state="translated">*但是要&lt;em&gt;小心 &lt;code&gt;--hard&lt;/code&gt; 和 &lt;code&gt;--force&lt;/code&gt; 之类的选项，它们会丢弃数据。&lt;/em&gt; * &lt;em&gt;另外，请勿在您正在合作的任何分支机构上重写历史记录。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="70f59dd18f4fa6d27f2733af8cec8e49a34e118e" translate="yes" xml:space="preserve">
          <source>*Where 5 is the number of commit messages you want to change (so if you want to change the 10th to last commit, you type in 10).</source>
          <target state="translated">*其中5是你要更改的提交信息的数量(所以如果你想更改第10个提交到最后一个提交,你可以输入10)。</target>
        </trans-unit>
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">,</target>
        </trans-unit>
        <trans-unit id="dd7db60a25d2f33c49897bafb010b021104ce84c" translate="yes" xml:space="preserve">
          <source>: Rebasing will commence. If all is well, the output will end &quot;Completed successfully&quot;. &lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt;&lt;em&gt; I've recently seen it fail with &lt;code&gt;Unable to create 'project_path/.git/index.lock': File exists.&lt;/code&gt; when trying to modify multiple commit messages at the same time. Not sure exactly what the issue is, or whether it will be fixed in a future version of Sourcetree, but if this happens would recommend rebasing them one at a time (slower but seems more reliable).&lt;/em&gt;</source>
          <target state="translated">：将开始重新设置基准。 如果一切顺利，输出将结束&amp;ldquo;成功完成&amp;rdquo;。 &lt;strong&gt;&lt;em&gt;注意：&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;我最近看到它失败， &lt;code&gt;Unable to create 'project_path/.git/index.lock': File exists.&lt;/code&gt; &lt;/em&gt; &lt;em&gt;尝试同时修改多个提交消息时。&lt;/em&gt; &lt;em&gt;不确定确切的问题是什么，或者不确定它是否会在Sourcetree的将来版本中解决，但是如果发生这种情况，建议一次将其重新设置为基础（速度较慢，但​​似乎更可靠）。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d6f3372616ad038c9f426eb85fec13882c496b89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--&lt;/code&gt; separates filter-branch options from revision options.</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; 将筛选器分支选项与修订选项分开。</target>
        </trans-unit>
        <trans-unit id="a383ad9b9e5f67ceaba1d76c92508e786ffd7989" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--all&lt;/code&gt; will make sure that all &lt;em&gt;branches&lt;/em&gt; and &lt;em&gt;tags&lt;/em&gt; are rewritten.</source>
          <target state="translated">&lt;code&gt;--all&lt;/code&gt; 将确保所有&lt;em&gt;分支&lt;/em&gt;和&lt;em&gt;标签&lt;/em&gt;都被重写。</target>
        </trans-unit>
        <trans-unit id="ae3e3e0c7f658ac59fa98de794221855efc3c05e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-f&lt;/code&gt; will enforce the execution of the operation. This is necessary if the temporary directory is already present or if there are already references stored under &lt;code&gt;refs/original&lt;/code&gt;. If that is not the case, you can drop this flag.</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; 将强制执行该操作。 如果临时目录已经存在或在 &lt;code&gt;refs/original&lt;/code&gt; 下已经存储了引用，则这是必需的。 如果不是这种情况，则可以删除此标志。</target>
        </trans-unit>
        <trans-unit id="3656c5170c626772a9ee01596ec6da06d997c577" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset&lt;/code&gt; can help you to break one commit into multiple commits too:</source>
          <target state="translated">&lt;code&gt;git reset&lt;/code&gt; 也可以帮助您将一个提交分成多个提交：</target>
        </trans-unit>
        <trans-unit id="89796e3472e2992c48df1f6e192ad34723e62a70" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Using the &lt;code&gt;-o&lt;/code&gt; (&lt;code&gt;--only&lt;/code&gt;) flag to make sure you change only the commit message)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（使用 &lt;code&gt;-o&lt;/code&gt; （-- &lt;code&gt;--only&lt;/code&gt; ）标志以确保仅更改提交消息）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fd5546f138dc2cc3211e60b308b58f99abbdea94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;...Or... for commits that have already been pushed:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;...或者...对于已经推送的提交：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2e0c94b4744713fbcd803dcf727286da47ec1745" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For commits that haven't yet been pushed to a remote:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;对于尚未推送到远程的提交：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0554c5b83012a8ded9a19263344413baf6ef925e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important note:&lt;/strong&gt; When you use the force push directly you might end up with code issues that other developers are working on the same branch. So to avoid those conflicts, you need to pull the code from your branch before making the &lt;strong&gt;force push&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;重要说明：&lt;/strong&gt;直接使用强制推送时，可能会遇到其他开发人员在同一分支上工作的代码问题。 因此，为了避免这些冲突，您需要在执行&lt;strong&gt;强制推送&lt;/strong&gt;之前从分支中提取代码：</target>
        </trans-unit>
        <trans-unit id="e05b402ad172ef685c44cd07af20ef4fa48c1ee5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Please read my entire answer before doing it.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;请先阅读我的完整答案，然后再做。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5cbde27676208b6be2688cefd241c151fe5a3206" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remember&lt;/strong&gt; to specify &lt;code&gt;--soft&lt;/code&gt; instead of &lt;code&gt;--hard&lt;/code&gt;, otherwise you lose that commit entirely.</source>
          <target state="translated">&lt;strong&gt;请记住&lt;/strong&gt;指定 &lt;code&gt;--soft&lt;/code&gt; 而不是 &lt;code&gt;--hard&lt;/code&gt; ，否则将完全丢失该提交。</target>
        </trans-unit>
        <trans-unit id="c668d5d92da7ec12bec1eac6788154d1bc2f1c2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning: be cautious about amending commits that you have already shared with other people.&lt;/strong&gt; Amending commits essentially &lt;em&gt;rewrites&lt;/em&gt; them to have different &lt;a href=&quot;http://en.wikipedia.org/wiki/SHA-1&quot;&gt;SHA&lt;/a&gt; IDs, which poses a problem if other people have copies of the old commit that you've rewritten. Anyone who has a copy of the old commit will need to synchronize their work with your newly re-written commit, which can sometimes be difficult, so make sure you coordinate with others when attempting to rewrite shared commit history, or just avoid rewriting shared commits altogether.</source>
          <target state="translated">&lt;strong&gt;警告：对于修改您已经与其他人共享的提交要谨慎。&lt;/strong&gt; 修改提交实质上&lt;em&gt;会将&lt;/em&gt;它们&lt;em&gt;重写&lt;/em&gt;为具有不同的&lt;a href=&quot;http://en.wikipedia.org/wiki/SHA-1&quot;&gt;SHA&lt;/a&gt; ID，如果其他人拥有您已重写的旧提交的副本，则会带来问题。 拥有旧提交副本的任何人都需要将其工作与新重写的提交同步，这有时可能很困难，因此在尝试重写共享提交历史记录时请确保与他人协调，或者只是避免重写共享提交共。</target>
        </trans-unit>
        <trans-unit id="a0aa2ab5846fc6a469a41ebfe82dcc30df985134" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning: force-pushing will overwrite the remote branch with the state of your local one&lt;/strong&gt;. If there are commits on the remote branch that you don't have in your local branch, you &lt;em&gt;will&lt;/em&gt; lose those commits.</source>
          <target state="translated">&lt;strong&gt;警告：强行推入将用您本地的状态覆盖远程分支&lt;/strong&gt; 。 如果远程分支上有您本地分支中没有的提交，您&lt;em&gt;将&lt;/em&gt;丢失这些提交。</target>
        </trans-unit>
        <trans-unit id="05c42590ee8fe1b57940e9f9bba56832663aa580" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; force pushing your changes will overwrite the remote branch with your local one. Make sure that you aren't going to be overwriting anything that you want to keep. Also be cautious about force pushing an amended (rewritten) commit if anyone else shares the branch with you, because they'll need to rewrite their own history if they have the old copy of the commit that you've just rewritten.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;强行推动更改将用本地分支覆盖远程分支。 确保您不会覆盖要保留的任何内容。 如果其他人与您共享分支，则在强制推送经过修改（重写）的提交时也要保持谨慎，因为如果他们拥有刚重写的提交的旧副本，则他们需要重写自己的历史记录。</target>
        </trans-unit>
        <trans-unit id="4f04f666c1def44a685b9a58ee1333d9271f876e" translate="yes" xml:space="preserve">
          <source>All commands can be prefixed with a &quot;range&quot;, e.g.</source>
          <target state="translated">所有命令都可以用 &quot;范围 &quot;作为前缀,如</target>
        </trans-unit>
        <trans-unit id="738d42d2a163ac0883ea95842ce4cc479c3f8946" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;git rebase -i origin/master&lt;/code&gt;is a nice mantra that will always present you with the commits you have done on top of master, and give you the option to amend, delete, reorder or squash. No need to get hold of that hash first.</source>
          <target state="translated">另外， &lt;code&gt;git rebase -i origin/master&lt;/code&gt; 是一个不错的口头禅，它将始终向您展示您在master之上所做的提交，并为您提供修改，删除，重新排序或压缩的选项。 无需先掌握该哈希值。</target>
        </trans-unit>
        <trans-unit id="b989269017a4eb81c60ad36b273636181e7aed0d" translate="yes" xml:space="preserve">
          <source>Amend</source>
          <target state="translated">Amend</target>
        </trans-unit>
        <trans-unit id="3a441e515dea998e6b6574e6787f20dbdf1acdd6" translate="yes" xml:space="preserve">
          <source>Amending the most recent commit message</source>
          <target state="translated">修正最近的提交信息</target>
        </trans-unit>
        <trans-unit id="633a78d37060f88c799ce35a31c4524455ef413c" translate="yes" xml:space="preserve">
          <source>An editor will come up, with a list of all commits since the one you gave.</source>
          <target state="translated">一个编辑器就会出现了,里面有你给的那个人之后的所有承诺列表。</target>
        </trans-unit>
        <trans-unit id="f29548a0ced6516f82698ab95cf3242f963baa7c" translate="yes" xml:space="preserve">
          <source>Another option is to use interactive rebase.
This allows you to edit any message you want to update even if it's not the latest message.</source>
          <target state="translated">另一个选择是使用交互式的rebase。这允许你编辑任何你想更新的消息,即使它不是最新的消息。</target>
        </trans-unit>
        <trans-unit id="12c99922ad5f0d621f9fd1198a80b98d98f75d73" translate="yes" xml:space="preserve">
          <source>As already mentioned, &lt;code&gt;git commit --amend&lt;/code&gt; is the way to overwrite the last commit. One note: if you would like to also &lt;strong&gt;overwrite the files&lt;/strong&gt;, the command would be</source>
          <target state="translated">如前所述， &lt;code&gt;git commit --amend&lt;/code&gt; 是覆盖最后一次提交的方法。 注意事项：如果您还想&lt;strong&gt;覆盖文件&lt;/strong&gt; ，则命令为</target>
        </trans-unit>
        <trans-unit id="d043c3daef4d8ca33c4d6da32d502453338ba5d2" translate="yes" xml:space="preserve">
          <source>But if you want to edit several commits in a row, you should use rebasing instead:</source>
          <target state="translated">但如果你想连续编辑几个提交,你应该用rebasing来代替。</target>
        </trans-unit>
        <trans-unit id="fc81dfbcc92d6db644079e9fd1e3221331e30949" translate="yes" xml:space="preserve">
          <source>Change &lt;code&gt;pick&lt;/code&gt; to &lt;code&gt;reword&lt;/code&gt; (or on old versions of Git, to &lt;code&gt;edit&lt;/code&gt;) in front of any commits you want to fix.</source>
          <target state="translated">在您要修复的所有提交之前，将 &lt;code&gt;pick&lt;/code&gt; 更改为 &lt;code&gt;reword&lt;/code&gt; （或在旧版本的Git上进行 &lt;code&gt;edit&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="cd60416657978941670ac10679df331d4ea07fd7" translate="yes" xml:space="preserve">
          <source>Change the commit in any way you like.</source>
          <target state="translated">用你喜欢的任何方式改变提交。</target>
        </trans-unit>
        <trans-unit id="d46c931ce468b46e5abf20d61245248f3348d2b0" translate="yes" xml:space="preserve">
          <source>Changing the message of a commit that you've already pushed to your remote branch</source>
          <target state="translated">更改你已经推送到远程分支的提交的消息</target>
        </trans-unit>
        <trans-unit id="79cbc5eb672a54c2b82572afd52f2a6a4f85e598" translate="yes" xml:space="preserve">
          <source>Click</source>
          <target state="translated">Click</target>
        </trans-unit>
        <trans-unit id="1dec358be2f5904a55a78b4bf8dc49b6430cce90" translate="yes" xml:space="preserve">
          <source>Click the &quot;Edit Message&quot; button.</source>
          <target state="translated">点击 &quot;编辑消息 &quot;按钮。</target>
        </trans-unit>
        <trans-unit id="dd6a02a553da4cb247f914011dd67c37487ec082" translate="yes" xml:space="preserve">
          <source>Ctrl</source>
          <target state="translated">Ctrl</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="482848e61e0cb57d443b83b93dbd01b3c2270228" translate="yes" xml:space="preserve">
          <source>Due to the backup of your old references, you can easily go back to the state before executing the command.</source>
          <target state="translated">由于备份了旧的参考资料,所以在执行命令前,可以很容易地回到状态。</target>
        </trans-unit>
        <trans-unit id="7d19f7fe68caa759dd89c5b936538ad9c08a6667" translate="yes" xml:space="preserve">
          <source>Edit the message as desired in the dialog that comes up and then click</source>
          <target state="translated">在弹出的对话框中根据需要编辑消息,然后点击</target>
        </trans-unit>
        <trans-unit id="2b9eceb7a86a9f577ef80586c5c1d7fde9ff493d" translate="yes" xml:space="preserve">
          <source>Enter</source>
          <target state="translated">Enter</target>
        </trans-unit>
        <trans-unit id="1f7a4f9e2f70d0b81cffc15ab30fd344aeb34fb3" translate="yes" xml:space="preserve">
          <source>Esc</source>
          <target state="translated">Esc</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="0e953b87fb65331535cd13602b7042eba5d8c5f0" translate="yes" xml:space="preserve">
          <source>Find the commit you want, change &lt;code&gt;pick&lt;/code&gt; to &lt;code&gt;r&lt;/code&gt; (&lt;code&gt;reword&lt;/code&gt;), and save and close the file. Done!</source>
          <target state="translated">找到所需的提交，将 &lt;code&gt;pick&lt;/code&gt; 更改为 &lt;code&gt;r&lt;/code&gt; （ &lt;code&gt;reword&lt;/code&gt; ），然后保存并关闭文件。 做完了！</target>
        </trans-unit>
        <trans-unit id="5c693c9d95a317d3f4014446be294772668a131b" translate="yes" xml:space="preserve">
          <source>Follow the steps in &lt;a href=&quot;https://stackoverflow.com/questions/17604232#23239109&quot;&gt;this answer&lt;/a&gt;, which are similar to above, but require a further command to be run from the command line (&lt;code&gt;git push origin &amp;lt;branch&amp;gt; -f&lt;/code&gt;) to force-push the branch. I would recommend reading it all and applying the necessary caution!</source>
          <target state="translated">遵循&lt;a href=&quot;https://stackoverflow.com/questions/17604232#23239109&quot;&gt;此答案&lt;/a&gt;中与上述类似的步骤，但是需要从命令行运行另一个命令（ &lt;code&gt;git push origin &amp;lt;branch&amp;gt; -f&lt;/code&gt; ）以强制推送分支。 我建议您阅读所有内容并采取必要的注意！</target>
        </trans-unit>
        <trans-unit id="aabc72f89b7e503ec80d1cd176e62a540d554afa" translate="yes" xml:space="preserve">
          <source>For anyone looking for a Windows/Mac GUI to help with editing older messages (i.e. not just the latest message), I'd recommend &lt;a href=&quot;http://www.sourcetreeapp.com&quot;&gt;Sourcetree&lt;/a&gt;. The steps to follow are below.</source>
          <target state="translated">对于想要Windows / Mac GUI来帮助编辑较旧消息（即不仅仅是最新消息）的任何人，我建议您使用&lt;a href=&quot;http://www.sourcetreeapp.com&quot;&gt;Sourcetree&lt;/a&gt; 。 遵循的步骤如下。</target>
        </trans-unit>
        <trans-unit id="56a3e95e1be2395d8937cd2c69606bcd6173d273" translate="yes" xml:space="preserve">
          <source>For each commit you want to &lt;em&gt;reword&lt;/em&gt;, Git will drop you back into your editor. For each commit you want to &lt;em&gt;edit&lt;/em&gt;, Git drops you into the shell. If you&amp;rsquo;re in the shell:</source>
          <target state="translated">对于您要&lt;em&gt;重新&lt;/em&gt;编写&lt;em&gt;单词的&lt;/em&gt;每次提交，Git都会将您带回到编辑器中。 对于每个要&lt;em&gt;编辑的&lt;/em&gt;提交，Git会将您放入外壳。 如果您在外壳中：</target>
        </trans-unit>
        <trans-unit id="85811ef2e3b7a0d2ba4565ff2bd9205dc620d5c4" translate="yes" xml:space="preserve">
          <source>Git will create a temporary directory for rewriting and additionally backup old references in &lt;code&gt;refs/original/&lt;/code&gt;.</source>
          <target state="translated">Git将创建一个用于重写的临时目录，并另外将旧引用备份到 &lt;code&gt;refs/original/&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="64c5aefe857251584dc2fa8076d51d67df6b03c6" translate="yes" xml:space="preserve">
          <source>Good tip:</source>
          <target state="translated">好的提示。</target>
        </trans-unit>
        <trans-unit id="99fda9050cfbb0b15316cca06972614dbc5760db" translate="yes" xml:space="preserve">
          <source>Here you have successfully broken your last commit into two commits.</source>
          <target state="translated">在这里,你已经成功地将你的最后一次提交分成了两次提交。</target>
        </trans-unit>
        <trans-unit id="a690949028d9d5d7fa5460499209a06a6a80f0be" translate="yes" xml:space="preserve">
          <source>How can I change the message? The commit has not been pushed yet.</source>
          <target state="translated">如何修改消息?提交还没有推送。</target>
        </trans-unit>
        <trans-unit id="d7c2de4b7aff480eb623b150a38b2d7f110eacc9" translate="yes" xml:space="preserve">
          <source>How to modify existing, unpushed commit messages</source>
          <target state="translated">如何修改现有的、未推送的提交信息</target>
        </trans-unit>
        <trans-unit id="f872b24f203857e6dec69e0cc329fa249387115a" translate="yes" xml:space="preserve">
          <source>I always do this if I forget to add a file or do a change.</source>
          <target state="translated">如果忘记添加文件或做修改,我总是这样做。</target>
        </trans-unit>
        <trans-unit id="f71d285985b60110c9b5ac8a68fe095280d58797" translate="yes" xml:space="preserve">
          <source>I have added the aliases &lt;code&gt;reci&lt;/code&gt; and &lt;code&gt;recm&lt;/code&gt; for &lt;code&gt;recommit (amend)&lt;/code&gt; it. Now I can do it with &lt;code&gt;git recm&lt;/code&gt; or &lt;code&gt;git recm -m&lt;/code&gt;:</source>
          <target state="translated">我已经添加了别名 &lt;code&gt;reci&lt;/code&gt; 和 &lt;code&gt;recm&lt;/code&gt; 来 &lt;code&gt;recommit (amend)&lt;/code&gt; 提交 （修改）它。 现在我可以用 &lt;code&gt;git recm&lt;/code&gt; 或 &lt;code&gt;git recm -m&lt;/code&gt; 做到这一点 ：</target>
        </trans-unit>
        <trans-unit id="7ead0f1a1d7a03041f8c0f351ac7716f8ec9d55c" translate="yes" xml:space="preserve">
          <source>I like to use the following:</source>
          <target state="translated">我喜欢用下面的方法。</target>
        </trans-unit>
        <trans-unit id="a7bef60a9c8ba9945f6fea6181eaa5bc82defcdb" translate="yes" xml:space="preserve">
          <source>I prefer this way:</source>
          <target state="translated">我更喜欢这种方式。</target>
        </trans-unit>
        <trans-unit id="9ccc5570e7a2f37a3daf20e33dbfa5e08ec1b719" translate="yes" xml:space="preserve">
          <source>I realised that I had pushed a commit with a typo in it. In order to undo, I did the following:</source>
          <target state="translated">我意识到我推送了一个有错别字的提交。为了解锁,我做了以下的事情。</target>
        </trans-unit>
        <trans-unit id="d5424a7af0820b9f259dde33162fb40289dd1d7c" translate="yes" xml:space="preserve">
          <source>I use the &lt;a href=&quot;http://git-scm.com/docs/git-gui&quot;&gt;Git GUI&lt;/a&gt; as much as I can, and that gives you the option to amend the last commit:</source>
          <target state="translated">我尽可能地使用&lt;a href=&quot;http://git-scm.com/docs/git-gui&quot;&gt;Git GUI&lt;/a&gt; ，这使您可以选择修改最后一次提交：</target>
        </trans-unit>
        <trans-unit id="5a058042cca786b98a983dca9754de82d480c7ab" translate="yes" xml:space="preserve">
          <source>I wanted to change my five latest commits that I already pushed to the server. This is quite 'dangerous' because if someone else already pulled from this, you can mess things up by changing the commit messages. However, when you&amp;rsquo;re working on your own little branch and are sure no one pulled it you can change it like this:</source>
          <target state="translated">我想更改我已经推送到服务器的五个最新提交。 这是非常&amp;ldquo;危险的&amp;rdquo;，因为如果其他人已经从中退出，则可以通过更改提交消息来弄乱事情。 但是，当您在自己的小分支上工作时，请确保没有人拉过它，您可以像这样更改它：</target>
        </trans-unit>
        <trans-unit id="d2a21af0dca7524c6564dc47503dec34c6089bf5" translate="yes" xml:space="preserve">
          <source>I wrote the wrong thing in a commit message.</source>
          <target state="translated">我在提交信息中写错了。</target>
        </trans-unit>
        <trans-unit id="3f16d37e328913517e1b219c98bb494e1bf48ab2" translate="yes" xml:space="preserve">
          <source>If it's a buried commit, use the awesome &lt;strong&gt;interactive rebase&lt;/strong&gt;:</source>
          <target state="translated">如果这是一个隐秘的提交，请使用很棒的&lt;strong&gt;交互式rebase&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="1a2e40ecd7b22110fc1732e82667bf1e96bc7f07" translate="yes" xml:space="preserve">
          <source>If it's your last commit, just &lt;strong&gt;amend&lt;/strong&gt; the commit:</source>
          <target state="translated">如果这是您的最后一次提交，则只需&lt;strong&gt;修改&lt;/strong&gt;提交：</target>
        </trans-unit>
        <trans-unit id="a1011b4a910232b030e11a685dd628900c37c828" translate="yes" xml:space="preserve">
          <source>If the commit you want to fix isn&amp;rsquo;t the most recent one:</source>
          <target state="translated">如果您要修复的提交不是最新的提交：</target>
        </trans-unit>
        <trans-unit id="1c7674dcf5d9a17f0553bab64e4371023b3edba6" translate="yes" xml:space="preserve">
          <source>If you are using the Git GUI tool, there is a button named &lt;em&gt;Amend last commit&lt;/em&gt;. Click on that button and then it will display your last commit files and message. Just edit that message, and you can commit it with a new commit message.</source>
          <target state="translated">如果您使用的是Git GUI工具，则有一个名为&lt;em&gt;Amend last commit&lt;/em&gt;的按钮。 单击该按钮，然后它将显示您的最后提交文件和消息。 只需编辑该消息，就可以使用新的提交消息来提交它。</target>
        </trans-unit>
        <trans-unit id="bfb7181ae8b7cc50362583d5868780d3cf80d663" translate="yes" xml:space="preserve">
          <source>If you are using the Git GUI, you can amend the last commit which hasn't been pushed with:</source>
          <target state="translated">如果你使用的是GUI,你可以修改上一次提交没有被推送的提交。</target>
        </trans-unit>
        <trans-unit id="1090dcdcd14bcb8e0aee40586e0f4512539645ad" translate="yes" xml:space="preserve">
          <source>If you edit text a lot, then switch to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Dvorak_keyboard_layout&quot;&gt;Dvorak keyboard layout&lt;/a&gt;, learn to touch-type, and learn Vim. &lt;a href=&quot;https://stackoverflow.com/questions/597077/is-learning-vim-worth-the-effort&quot;&gt;Is it worth the effort?&lt;/a&gt; Yes.</source>
          <target state="translated">如果您经常编辑文本，请切换至&lt;a href=&quot;https://en.wikipedia.org/wiki/Dvorak_keyboard_layout&quot;&gt;Dvorak键盘布局&lt;/a&gt; ，学习触摸式输入法，并学习Vim。 &lt;a href=&quot;https://stackoverflow.com/questions/597077/is-learning-vim-worth-the-effort&quot;&gt;值得付出努力吗？&lt;/a&gt; 是。</target>
        </trans-unit>
        <trans-unit id="537da781c94247dd0b331b0d2a81df4b0b8e7aab" translate="yes" xml:space="preserve">
          <source>If you have not pushed the code to your remote branch (&lt;a href=&quot;http://en.wikipedia.org/wiki/GitHub&quot;&gt;GitHub&lt;/a&gt;/&lt;a href=&quot;http://en.wikipedia.org/wiki/Bitbucket&quot;&gt;Bitbucket&lt;/a&gt;) you can change the commit message on the command line as below.</source>
          <target state="translated">如果您尚未将代码推送到远程分支（ &lt;a href=&quot;http://en.wikipedia.org/wiki/GitHub&quot;&gt;GitHub&lt;/a&gt; / &lt;a href=&quot;http://en.wikipedia.org/wiki/Bitbucket&quot;&gt;Bitbucket&lt;/a&gt; ），则可以在命令行上更改提交消息，如下所示。</target>
        </trans-unit>
        <trans-unit id="1bf0de856b25c0c411ebf5096c9883b06bdb439a" translate="yes" xml:space="preserve">
          <source>If you have to change an old commit message over multiple branches (i.e., the commit with the erroneous message is present in multiple branches) you might want to use:</source>
          <target state="translated">如果你必须在多个分支中更改一个旧的提交信息(也就是说,有错误信息的提交存在于多个分支中),你可能需要使用:</target>
        </trans-unit>
        <trans-unit id="8a32e66acf92892ea696bdbbb3a5802cb762c5de" translate="yes" xml:space="preserve">
          <source>If you have to do it for more than a single branch and you might face conflicts when amending the content, set up &lt;a href=&quot;https://stackoverflow.com/questions/35415925/is-it-possible-to-setup-git-merge-for-automatic-resolving-git-rerere/35417944#35417944&quot;&gt;&lt;code&gt;git rerere&lt;/code&gt;&lt;/a&gt; and let Git resolve those conflicts automatically for you.</source>
          <target state="translated">如果您需要为多个分支执行此操作，并且在修改内容时可能会遇到冲突，请设置&lt;a href=&quot;https://stackoverflow.com/questions/35415925/is-it-possible-to-setup-git-merge-for-automatic-resolving-git-rerere/35417944#35417944&quot;&gt; &lt;code&gt;git rerere&lt;/code&gt; &lt;/a&gt;并让Git为您自动解决这些冲突。</target>
        </trans-unit>
        <trans-unit id="ee566402d3c4cf74ce64b4e59cfaf0282be7d528" translate="yes" xml:space="preserve">
          <source>If you just want to edit the latest commit, use:</source>
          <target state="translated">如果你只是想编辑最新的提交,请使用。</target>
        </trans-unit>
        <trans-unit id="82db7cb0693c57af7eb1ade32e9fb0a3a3edf799" translate="yes" xml:space="preserve">
          <source>If you only want to change your last message you should use the &lt;code&gt;--only&lt;/code&gt; flag or its shortcut &lt;code&gt;-o&lt;/code&gt; with &lt;code&gt;commit --amend&lt;/code&gt;:</source>
          <target state="translated">如果只想更改最后一条消息，则应使用 &lt;code&gt;--only&lt;/code&gt; 标志或其快捷方式 &lt;code&gt;-o&lt;/code&gt; 和 &lt;code&gt;commit --amend&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="17d40439e8088f91ded464271472bd49f0be088b" translate="yes" xml:space="preserve">
          <source>If you only want to modify your last commit message, then do:</source>
          <target state="translated">如果你只想修改上次提交的消息,那就去做。</target>
        </trans-unit>
        <trans-unit id="51d4e79bd1d7f2d3d683716abe38bbe7ad091692" translate="yes" xml:space="preserve">
          <source>If you want to change the last three commit messages, or any of the commit messages up to that point, supply &lt;code&gt;HEAD~3&lt;/code&gt; to the &lt;code&gt;git rebase -i&lt;/code&gt; command:</source>
          <target state="translated">如果要更改最后三个提交消息，或者直到该点为止的任何提交消息，请向 &lt;code&gt;git rebase -i&lt;/code&gt; 命令提供HEAD〜3 ：</target>
        </trans-unit>
        <trans-unit id="7a28de6ea6092c5fbab73a01a366d5cb3fe30429" translate="yes" xml:space="preserve">
          <source>If you want to edit more than one commit message, run</source>
          <target state="translated">如果你想编辑一条以上的提交消息,请运行</target>
        </trans-unit>
        <trans-unit id="a78e8bdc2ded9f51b7dfc568c468421d01041d3b" translate="yes" xml:space="preserve">
          <source>If you want to fix several flawed commits, pass the parent of the oldest one of them.</source>
          <target state="translated">如果你想修复几个有缺陷的提交,就把其中最老的一个提交的父级通过。</target>
        </trans-unit>
        <trans-unit id="324cec321d0415c9b54e054ec9386f21bed91f09" translate="yes" xml:space="preserve">
          <source>If you're working on a specific branch do this:</source>
          <target state="translated">如果你是在做一个特定的分支,就这样做。</target>
        </trans-unit>
        <trans-unit id="a683e388ede9765e08735d6d667b440ac09228ba" translate="yes" xml:space="preserve">
          <source>If you've already pushed the code with the wrong message, and you need to be careful when changing the message. That is, after you change the commit message and try pushing it again, you end up with having issues. To make it smooth, follow these steps.</source>
          <target state="translated">如果你在推送代码时已经推送了错误的消息,而你在修改消息的时候需要注意。也就是说,当你修改了提交消息后,再次尝试推送时,最终会出现问题。为了使其顺利进行,请按照以下步骤进行操作。</target>
        </trans-unit>
        <trans-unit id="49b3bf5ad384d123b2c23eae7dad2dcbde32c93b" translate="yes" xml:space="preserve">
          <source>If you've already pushed your commit up to your remote branch, then - after amending your commit locally (as described above) - you'll also &lt;a href=&quot;https://stackoverflow.com/questions/41003071/why-must-i-force-push-after-changing-a-commit-message&quot;&gt;need to force push the commit&lt;/a&gt; with:</source>
          <target state="translated">如果您已经将提交推送到远程分支，那么-在本地修改提交（如上所述）之后-您还&lt;a href=&quot;https://stackoverflow.com/questions/41003071/why-must-i-force-push-after-changing-a-commit-message&quot;&gt;需要通过以下方式强制提交&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="ad1a060e5c6e478f27f57f590ca4b4ee0468c221" translate="yes" xml:space="preserve">
          <source>Important note about interactive rebase</source>
          <target state="translated">关于交互式基础的重要说明</target>
        </trans-unit>
        <trans-unit id="01a19c640eb703c350db672793b82e9a0b1d059a" translate="yes" xml:space="preserve">
          <source>In a file, like the one above, write &lt;code&gt;edit/e&lt;/code&gt; or one of the other options, and hit save and exit.</source>
          <target state="translated">与上面的文件一样，在文件中编写 &lt;code&gt;edit/e&lt;/code&gt; 或其他选项之一，然后单击保存并退出。</target>
        </trans-unit>
        <trans-unit id="7598426d8a00853dbc0cca37aee0c4cf2d31d72e" translate="yes" xml:space="preserve">
          <source>In order to do a Git squash, follow these steps:</source>
          <target state="translated">要做一个Git squash,请按照以下步骤进行。</target>
        </trans-unit>
        <trans-unit id="e2d58277a6cdab88c14651a65598ded91b284e8f" translate="yes" xml:space="preserve">
          <source>In the &quot;Log / History&quot; tab, right click on the entry with an adjoining line in the graph &lt;strong&gt;one below&lt;/strong&gt; the commit(s) you wish to edit and select &quot;Rebase children of &lt;em&gt;&amp;lt;commit ref&amp;gt;&lt;/em&gt; interactively...&quot;</source>
          <target state="translated">在&amp;ldquo;日志/历史记录&amp;rdquo;选项卡中，右键单击图形&lt;strong&gt;中&lt;/strong&gt;您要编辑的提交&lt;strong&gt;下方&lt;/strong&gt;的一条相邻行的条目，然后选择&amp;ldquo;以交互方式重新设置&lt;em&gt;&amp;lt;commit ref&amp;gt;的子级&lt;/em&gt; ...&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="5c44dced14ced82516c17a2f8ed5fa91a97e5224" translate="yes" xml:space="preserve">
          <source>In the default editor, modify 'pick' to 'edit' in the line whose commit you want to modify. Make your changes and then stage them with</source>
          <target state="translated">在默认的编辑器中,将 &quot;pick &quot;修改为 &quot;编辑&quot;,在你要修改的提交行中修改 &quot;pick&quot;。进行修改,然后用</target>
        </trans-unit>
        <trans-unit id="226bab813445ce9f153dc587a2f5cd8f29f0724e" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;pick&lt;/code&gt; you need to write &lt;code&gt;reword&lt;/code&gt;. You can do this in Vim by typing in &lt;code&gt;i&lt;/code&gt;. That makes you go in to &lt;em&gt;insert&lt;/em&gt; mode. (You see that you&amp;rsquo;re in insert mode by the word &lt;em&gt;INSERT&lt;/em&gt; at the bottom.) For the commits you want to change, type in &lt;code&gt;reword&lt;/code&gt; instead of &lt;code&gt;pick&lt;/code&gt;.</source>
          <target state="translated">除了 &lt;code&gt;pick&lt;/code&gt; 您还需要编写 &lt;code&gt;reword&lt;/code&gt; 。 您可以在Vim中输入 &lt;code&gt;i&lt;/code&gt; 来完成此操作。 这使您可以进入&lt;em&gt;插入&lt;/em&gt;模式。 （您会看到底部的&lt;em&gt;INSERT&lt;/em&gt;字样处于插入模式。）对于要更改的提交，请输入 &lt;code&gt;reword&lt;/code&gt; 而不是 &lt;code&gt;pick&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8283ba700399d4e9b3046d8bf11fb6437003b436" translate="yes" xml:space="preserve">
          <source>Interactive rebase</source>
          <target state="translated">交互式基座</target>
        </trans-unit>
        <trans-unit id="64388b42c1ec2c5f907675208286ca6379d56b28" translate="yes" xml:space="preserve">
          <source>It is designed to edit any commit (not just last) same way as &lt;code&gt;commit --amend&lt;/code&gt;</source>
          <target state="translated">它旨在以与 &lt;code&gt;commit --amend&lt;/code&gt; 相同的方式编辑任何提交（不仅仅是最后一次）</target>
        </trans-unit>
        <trans-unit id="f3c4da5aba698dd7991db9cd195e40587df60bfb" translate="yes" xml:space="preserve">
          <source>It is named after the action on rebase interactive to amend a commit: &quot;reword&quot;. See &lt;a href=&quot;https://robots.thoughtbot.com/git-interactive-rebase-squash-amend-rewriting-history&quot;&gt;this post&lt;/a&gt; and &lt;a href=&quot;http://git-scm.com/docs/git-rebase&quot;&gt;man&lt;/a&gt; -section interactive mode-</source>
          <target state="translated">它是基于对rebase交互式操作进行修改以修改提交的名称：&amp;ldquo; reword&amp;rdquo;。 请参阅&lt;a href=&quot;https://robots.thoughtbot.com/git-interactive-rebase-squash-amend-rewriting-history&quot;&gt;此帖子&lt;/a&gt;和&lt;a href=&quot;http://git-scm.com/docs/git-rebase&quot;&gt;人-部分&lt;/a&gt;交互模式-</target>
        </trans-unit>
        <trans-unit id="33f6c69e7bd97548a38dc0a2467332aaa518a1b1" translate="yes" xml:space="preserve">
          <source>It's not as easy as a trivial &lt;code&gt;git commit --amend&lt;/code&gt;, but it's especially useful, if you already have some merges after your erroneous commit message.</source>
          <target state="translated">它不像普通的 &lt;code&gt;git commit --amend&lt;/code&gt; 那样容易，但是如果您在错误的提交消息之后已经进行了一些合并，则它特别有用。</target>
        </trans-unit>
        <trans-unit id="b757980d7844ff5175d1481ed1e3c6bbedaf5c77" translate="yes" xml:space="preserve">
          <source>Let's say you want to change your five latest commits, and then you type this in the terminal:</source>
          <target state="translated">假设你想改变你的5个最新的提交,然后在终端中输入这样的内容。</target>
        </trans-unit>
        <trans-unit id="314e39a7aaaf46a85c0cea62f484616a7f6dbae7" translate="yes" xml:space="preserve">
          <source>Make sure you don't have any working copy changes &lt;em&gt;staged&lt;/em&gt; before doing this or they will get committed too. (&lt;em&gt;Unstaged&lt;/em&gt; changes will not get committed.)</source>
          <target state="translated">在执行此操作之前，请确保没有进行任何工作副本更改，否则它们也会被提交。 （未&lt;em&gt;暂存的&lt;/em&gt;更改将不会提交。）</target>
        </trans-unit>
        <trans-unit id="75efdbef38e3f34b3b4a921f14e84734e02ab7f2" translate="yes" xml:space="preserve">
          <source>Make sure you've committed or stashed all current changes (i.e., so there are no files listed in the &quot;File Status&quot; tab) - it won't work otherwise.</source>
          <target state="translated">确保你已经承诺或隐藏了所有当前的更改(即,所以 &quot;文件状态 &quot;选项卡中没有列出任何文件)--否则将无法工作。</target>
        </trans-unit>
        <trans-unit id="c459ebce80600c41e94f89ddca86f21bbb93cd94" translate="yes" xml:space="preserve">
          <source>Miniature Vim tutorial (or, how to rebase with only 8 keystrokes</source>
          <target state="translated">微型Vim教程(或者说,如何只用8个按键就能重做基础?</target>
        </trans-unit>
        <trans-unit id="5cb0e58a346389526e93fdf68ccc3bdc41d9a68c" translate="yes" xml:space="preserve">
          <source>Most of this sequence will be explained to you by the output of the various commands as you go. It&amp;rsquo;s very easy; you don&amp;rsquo;t need to memorise it &amp;ndash; just remember that &lt;code&gt;git rebase --interactive&lt;/code&gt; lets you correct commits no matter how long ago they were.</source>
          <target state="translated">您将通过执行各种命令的输出向您解释此序列的大部分内容。 这很容易； 您不需要记住它-只需记住 &lt;code&gt;git rebase --interactive&lt;/code&gt; 即可纠正提交，无论它们是多久之前的。</target>
        </trans-unit>
        <trans-unit id="c32b2165806ae246917f4662d8eb71c8c3babae1" translate="yes" xml:space="preserve">
          <source>Note that these things change all your SHA hashes after that particular commit.</source>
          <target state="translated">请注意,这些东西会改变你所有的SHA哈希值,在那个特定的提交之后。</target>
        </trans-unit>
        <trans-unit id="a6ac0e570855e8a6fd20567d169ad63e8f660398" translate="yes" xml:space="preserve">
          <source>Note that this will try to rewrite &lt;em&gt;every&lt;/em&gt; commit between &lt;code&gt;HEAD&lt;/code&gt; and the flawed commit, so you should choose your &lt;code&gt;msg-filter&lt;/code&gt; command very wisely ;-)</source>
          <target state="translated">请注意，这将尝试重写 &lt;code&gt;HEAD&lt;/code&gt; 和有缺陷的提交之间的&lt;em&gt;每个&lt;/em&gt;提交，因此您应该非常明智地选择 &lt;code&gt;msg-filter&lt;/code&gt; 命令；-)</target>
        </trans-unit>
        <trans-unit id="b46bc9f64374b0571d067b4a755f642780c1922f" translate="yes" xml:space="preserve">
          <source>Note that you will not want to change commits that you have already pushed. Or maybe you do, but in that case you will have to take great care to communicate with everyone who may have pulled your commits and done work on top of them. &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4084868/how-do-i-recover-resynchronise-after-someone-pushes-a-rebase-or-a-reset-to-a-pub&quot;&gt;How do I recover/resynchronise after someone pushes a rebase or a reset to a published branch?&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">注意，您将不想更改已经推送的提交。 也许您确实这样做了，但是在那种情况下，您将必须格外小心，与可能撤消您的承诺并在其上完成工作的所有人进行沟通。 &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4084868/how-do-i-recover-resynchronise-after-someone-pushes-a-rebase-or-a-reset-to-a-pub&quot;&gt;在有人将基准或重置推送到已发布的分支后，如何恢复/重新同步？&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="18901ada473f70bd3df3861690385ff2583a5640" translate="yes" xml:space="preserve">
          <source>Note: You can also &quot;Make the change you want&quot; from the editor opened by &lt;code&gt;git commit --amend&lt;/code&gt;</source>
          <target state="translated">注意：您也可以从 &lt;code&gt;git commit --amend&lt;/code&gt; 打开的编辑器中&amp;ldquo;进行所需的更改&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="afa96f5ef82343e80b75b32d5fb1ce76d59679eb" translate="yes" xml:space="preserve">
          <source>Now you can use</source>
          <target state="translated">现在,你可以使用</target>
        </trans-unit>
        <trans-unit id="7787ac5bd348952efbbc395221aa23b299315da2" translate="yes" xml:space="preserve">
          <source>Now you have changed your commit messages!</source>
          <target state="translated">现在你已经改变了你的提交信息!</target>
        </trans-unit>
        <trans-unit id="5d8308874a84249b672f526d18159a66c85a318f" translate="yes" xml:space="preserve">
          <source>Now you'll be at the first wrong commit. Make changes in the files, and they'll be automatically staged for you. Type</source>
          <target state="translated">现在,你会在第一次错误提交时。在文件中进行修改,它们会自动为你分期。键入</target>
        </trans-unit>
        <trans-unit id="9ce3bd4224c8c1780db56b4125ecf3f24bf748b7" translate="yes" xml:space="preserve">
          <source>OK</source>
          <target state="translated">OK</target>
        </trans-unit>
        <trans-unit id="0a419341678c8db38200c28d3bc480175a6b7f03" translate="yes" xml:space="preserve">
          <source>On this question there are a lot of answers, but none of them explains in super detail how to change older commit messages using &lt;a href=&quot;http://en.wikipedia.org/wiki/Vim_%28text_editor%29&quot;&gt;Vim&lt;/a&gt;. I was stuck trying to do this myself, so here I'll write down in detail how I did this especially for people who have no experience in Vim!</source>
          <target state="translated">关于这个问题，有很多答案，但是都没有一个非常详细地说明如何使用&lt;a href=&quot;http://en.wikipedia.org/wiki/Vim_%28text_editor%29&quot;&gt;Vim&lt;/a&gt;更改旧的提交消息。 我一直试图自己做这件事，所以在这里我将详细记述我是如何做到这一点的，特别是对那些没有Vim经验的人！</target>
        </trans-unit>
        <trans-unit id="8f4283541ffc56fa2391f987d51c11f228e9cf5e" translate="yes" xml:space="preserve">
          <source>Once you save, Git will replay the listed commits.</source>
          <target state="translated">一旦你保存了,Git就会重放列出的提交。</target>
        </trans-unit>
        <trans-unit id="c3c5323e77e97b944f42a7ac0137785258b47f15" translate="yes" xml:space="preserve">
          <source>Once you squash your commits - choose the &lt;code&gt;e/r&lt;/code&gt; for editing the message:</source>
          <target state="translated">压缩提交后，请选择 &lt;code&gt;e/r&lt;/code&gt; 来编辑消息：</target>
        </trans-unit>
        <trans-unit id="52be91bf5d9781fa67954063b817a92e0da0fcb9" translate="yes" xml:space="preserve">
          <source>Or use this command from a console/terminal:</source>
          <target state="translated">或者从consoleterminal中使用这个命令。</target>
        </trans-unit>
        <trans-unit id="20de4020936774e43563105e9f083c88256e0de5" translate="yes" xml:space="preserve">
          <source>Or, try Git reset like below:</source>
          <target state="translated">或者,可以尝试像下面这样的Git重置。</target>
        </trans-unit>
        <trans-unit id="f4602422740c6d3f89e9ff56816c492ed6cbd4e7" translate="yes" xml:space="preserve">
          <source>Otherwise, if it's not your last commit, you can do an interactive rebase,</source>
          <target state="translated">否则,如果不是你最后一次提交,你可以做一个交互式的rebase。</target>
        </trans-unit>
        <trans-unit id="55e74ef477a9216e7e4cda96d4ad2263c3a5ec10" translate="yes" xml:space="preserve">
          <source>Otherwise, there will be a new commit with a new commit ID.</source>
          <target state="translated">否则,会有一个新的提交,并有一个新的提交ID。</target>
        </trans-unit>
        <trans-unit id="eed2b533b936ff8cc5fd4e5ef633af9481bf9a5f" translate="yes" xml:space="preserve">
          <source>Perform an interactive rebase</source>
          <target state="translated">执行交互式回访</target>
        </trans-unit>
        <trans-unit id="77ecdb8d3da3edd63521ce51f90410c6290e3a2d" translate="yes" xml:space="preserve">
          <source>ProTip&amp;trade;: Don't be afraid to experiment with &quot;dangerous&quot; commands that rewrite history* &amp;mdash; Git doesn't delete your commits for 90 days by default; you can find them in the reflog:</source>
          <target state="translated">ProTip&amp;trade;：不要害怕尝试重写历史记录的&amp;ldquo;危险&amp;rdquo;命令* &amp;mdash; Git默认不会删除您的提交90天； 您可以在参考日志中找到它们：</target>
        </trans-unit>
        <trans-unit id="3308b6ccef5a11ddcd6a26ca18d3f31ea4629ee3" translate="yes" xml:space="preserve">
          <source>Repeat steps 3-4 if there are other commit messages to change.</source>
          <target state="translated">如果有其他提交信息需要更改,请重复步骤3-4。</target>
        </trans-unit>
        <trans-unit id="7dfb87706e14c88c0e15e93aba66aeadc9f16477" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;vimtutor&lt;/code&gt; if you have time</source>
          <target state="translated">如果有时间，请运行 &lt;code&gt;vimtutor&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="33bee255359d5325886f2f9f38bd1b7ef63c2b4a" translate="yes" xml:space="preserve">
          <source>Save and exit that and type</source>
          <target state="translated">保存和退出,并输入</target>
        </trans-unit>
        <trans-unit id="e0a9d3ab2e00da3e1e5b35ad368e4985153b116e" translate="yes" xml:space="preserve">
          <source>Say, you want to recover your master and access it in branch &lt;code&gt;old_master&lt;/code&gt;:</source>
          <target state="translated">假设您要恢复主数据库并在分支 &lt;code&gt;old_master&lt;/code&gt; 中进行访问：</target>
        </trans-unit>
        <trans-unit id="9a1164328303f0e7aef0ad70722adac01bf5714d" translate="yes" xml:space="preserve">
          <source>Select the whole row for a commit message you wish to change (&lt;em&gt;i.e., click on the &quot;Message&quot; column&lt;/em&gt;).</source>
          <target state="translated">选择您要更改的提交消息的整行（ &lt;em&gt;即，单击&amp;ldquo;消息&amp;rdquo;列&lt;/em&gt; ）。</target>
        </trans-unit>
        <trans-unit id="a26f780678a6d3a9f251706447f5b64005273b37" translate="yes" xml:space="preserve">
          <source>That will drop you into your text editor and let you change the last commit message.</source>
          <target state="translated">这将会把你放到你的文本编辑器中,让你改变最后的提交信息。</target>
        </trans-unit>
        <trans-unit id="e4096d93990554059857e203340d7a995c560a36" translate="yes" xml:space="preserve">
          <source>Then Vim will go over every commit message you want to reword, and here you can actually change the commit messages. You&amp;rsquo;ll do this by going into insert mode, changing the commit message, going into the command-mode, and save and quit. Do this five times and you&amp;rsquo;re out of Vim!</source>
          <target state="translated">然后，Vim将遍历您要重新编写单词的所有提交消息，在这里您实际上可以更改提交消息。 您将通过进入插入模式，更改提交消息，进入命令模式以及保存并退出来完成此操作。 这样做五次，您就离开了Vim！</target>
        </trans-unit>
        <trans-unit id="b75e221ac3451aee7b1b94cc11b344316ef30b6e" translate="yes" xml:space="preserve">
          <source>Then inside the interactive rebase you simply add edit to that commit. When it comes up, do a &lt;code&gt;git commit --amend&lt;/code&gt; and modify the commit message. If you want to roll back before that commit point, you could also use &lt;code&gt;git reflog&lt;/code&gt; and just delete that commit. Then you just do a &lt;code&gt;git commit&lt;/code&gt; again.</source>
          <target state="translated">然后，在交互式基础库中，您只需向该提交添加编辑。 当它出现时，执行 &lt;code&gt;git commit --amend&lt;/code&gt; 并修改提交消息。 如果要在该提交点之前回滚，还可以使用 &lt;code&gt;git reflog&lt;/code&gt; 并删除该提交。 然后，您只需再次执行 &lt;code&gt;git commit&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="44035053d738daf2c3426a6fb01ffb7685720036" translate="yes" xml:space="preserve">
          <source>Then you need to save and quit this screen. You do that by first going in to &amp;lsquo;command-mode&amp;rsquo; by pressing the</source>
          <target state="translated">然后，您需要保存并退出此屏幕。 您可以先按&amp;ldquo;进入命令模式&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="2e8da7db63753dabddaee4db6af25bdee3a5e09e" translate="yes" xml:space="preserve">
          <source>Then, if you already pushed your wrong commits, you need to &lt;code&gt;git push --force&lt;/code&gt; to overwrite them. Remember that &lt;code&gt;git push --force&lt;/code&gt; is quite a dangerous thing to do, so make sure that no one pulled from the server since you pushed your wrong commits!</source>
          <target state="translated">然后，如果您已经推送了错误的提交，则需要 &lt;code&gt;git push --force&lt;/code&gt; 来覆盖它们。 请记住，执行 &lt;code&gt;git push --force&lt;/code&gt; 是一件非常危险的事情，因此请确保自您推送错误的提交以来，没有人从服务器中拉出！</target>
        </trans-unit>
        <trans-unit id="26253e4abf4e26e804dd81363163b679c4468f73" translate="yes" xml:space="preserve">
          <source>This command will get you into Vim there you can &amp;lsquo;edit&amp;rsquo; your commit history. You&amp;rsquo;ll see your last five commits at the top like this:</source>
          <target state="translated">该命令将带您进入Vim，在这里您可以&amp;ldquo;编辑&amp;rdquo;您的提交历史记录。 您将在顶部看到最后五个提交，如下所示：</target>
        </trans-unit>
        <trans-unit id="6b465354216b882095ff215390469dd80b17e5f0" translate="yes" xml:space="preserve">
          <source>This ensures that you don't accidentally enhance your commit with staged stuff. Of course it's best to have a proper &lt;code&gt;$EDITOR&lt;/code&gt; configuration. Then you can leave the &lt;code&gt;-m&lt;/code&gt; option out, and Git will pre-fill the commit message with the old one. In this way it can be easily edited.</source>
          <target state="translated">这样可以确保您不会意外地使用分阶段的东西来增强您的承诺。 当然，最好具有适当的 &lt;code&gt;$EDITOR&lt;/code&gt; 配置。 然后，您可以不使用 &lt;code&gt;-m&lt;/code&gt; 选项，Git将用旧的预填充提交消息。 这样就可以轻松地对其进行编辑。</target>
        </trans-unit>
        <trans-unit id="b7b71b3ef7f4905bf520438e695a63d94ef4fdec" translate="yes" xml:space="preserve">
          <source>This is the best practice when changing the commit message, if it was already pushed.</source>
          <target state="translated">这是修改提交消息时的最佳做法,如果已经推送了,那就是最好的做法。</target>
        </trans-unit>
        <trans-unit id="e472addcb340e40e46d441b595f9ad47732b3f30" translate="yes" xml:space="preserve">
          <source>This will open a file in your text editor representing your new commit message. It starts out populated with the text from your old commit message. Change the commit message as you want, then save the file and quit your editor to finish.</source>
          <target state="translated">这将在您的文本编辑器中打开一个文件,代表您的新提交信息。开始时,它是用旧提交消息的文本填充的。按照你的要求更改提交信息,然后保存文件,然后退出编辑器完成。</target>
        </trans-unit>
        <trans-unit id="a73614e15359a42654cd495530206975abb50e8b" translate="yes" xml:space="preserve">
          <source>To amend the previous commit and keep the same log message, run</source>
          <target state="translated">要修改之前的提交并保留相同的日志信息,请运行</target>
        </trans-unit>
        <trans-unit id="a639ce1453a3eb7eb95b4f7400c7d8daf2a6daf6" translate="yes" xml:space="preserve">
          <source>To amend the previous commit, make the changes you want and stage those changes, and then run</source>
          <target state="translated">要修改之前的提交,请做出你想要的更改,并将这些更改进行阶段化,然后运行</target>
        </trans-unit>
        <trans-unit id="7ecf92cf1ec772b7937c2227365be83d9ed29db5" translate="yes" xml:space="preserve">
          <source>To fix the previous commit by removing it entirely, run</source>
          <target state="translated">要修复之前的提交,完全删除它,请运行</target>
        </trans-unit>
        <trans-unit id="d49b00477423eae08072ae322db9654f51877b3a" translate="yes" xml:space="preserve">
          <source>To understand it in detail, an excellent post is &lt;em&gt;&lt;a href=&quot;https://www.atlassian.com/git/tutorials/rewriting-history#git-commit--amend&quot;&gt;4. Rewriting Git History&lt;/a&gt;&lt;/em&gt;. It also talks about &lt;strong&gt;when not to use&lt;/strong&gt;&lt;code&gt;git commit --amend&lt;/code&gt;.</source>
          <target state="translated">要详细了解它，一个出色的文章是&lt;em&gt;&lt;a href=&quot;https://www.atlassian.com/git/tutorials/rewriting-history#git-commit--amend&quot;&gt;4. Rewrite Git History&lt;/a&gt;&lt;/em&gt; 。 它还讨论了&lt;strong&gt;何时不使用&lt;/strong&gt; &lt;code&gt;git commit --amend&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dfdda8b62ffd2d3eaba69154904f415d055e181a" translate="yes" xml:space="preserve">
          <source>Update your last wrong commit message with the new commit message in one line:</source>
          <target state="translated">用一行新的提交信息更新你最后一条错误的提交信息。</target>
        </trans-unit>
        <trans-unit id="1d4d43cc6f3a833e0340a0d1794b6d7b9958657e" translate="yes" xml:space="preserve">
          <source>Use</source>
          <target state="translated">Use</target>
        </trans-unit>
        <trans-unit id="632993fe184f88b280a3d7d23dd1109d7c895db7" translate="yes" xml:space="preserve">
          <source>Using reset to split commits into smaller commits</source>
          <target state="translated">使用重置将提交拆分成更小的提交</target>
        </trans-unit>
        <trans-unit id="7a17e609b482fcb3423f1cd7db14297d187da49a" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;git rebase -i HEAD~n&lt;/code&gt; there can be &lt;strong&gt;more&lt;/strong&gt; than n commits. Git will &quot;collect&quot; all the commits in the last n commits, and if there was a merge somewhere in between that range you will see all the commits as well, so the outcome will be n + .</source>
          <target state="translated">当您使用 &lt;code&gt;git rebase -i HEAD~n&lt;/code&gt; ，可以提交n次&lt;strong&gt;以上&lt;/strong&gt; 。 Git将&amp;ldquo;收集&amp;rdquo;最近n次提交中的所有提交，如果在该范围之间某处存在合并，您也会看到所有提交，因此结果将为n +。</target>
        </trans-unit>
        <trans-unit id="7bdd996fb9f3a79b5e191fc7debf67431d4e47e3" translate="yes" xml:space="preserve">
          <source>Wow, so there are a lot of ways to do this.</source>
          <target state="translated">哇,所以有很多方法可以做到这一点。</target>
        </trans-unit>
        <trans-unit id="30790662109be1b01ef4a7cc38d14098ff0c5bb2" translate="yes" xml:space="preserve">
          <source>Yet another way to do this is to delete the last commit, but keep its changes so that you won't lose your work. You can then do another commit with the corrected message. This would look something like this:</source>
          <target state="translated">然而,另一种方法是删除上次提交,但保留它的修改,这样你就不会丢失你的工作。然后你可以用修正后的信息再做一次提交。这看起来会是这样的。</target>
        </trans-unit>
        <trans-unit id="d562170d5afd40c1f73b6228c7a9ceae7ce5d62c" translate="yes" xml:space="preserve">
          <source>You also can use &lt;code&gt;git filter-branch&lt;/code&gt; for that.</source>
          <target state="translated">您也可以为此使用 &lt;code&gt;git filter-branch&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c9b51188bfd91fc21736786a8d6536e83014e535" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;http://git-scm.com/book/en/Git-Branching-Rebasing&quot;&gt;Git rebasing&lt;/a&gt;. For example, if you want to modify back to commit bbc643cd, run</source>
          <target state="translated">您可以使用&lt;a href=&quot;http://git-scm.com/book/en/Git-Branching-Rebasing&quot;&gt;Git rebasing&lt;/a&gt; 。 例如，如果要修改回以提交bbc643cd，请运行</target>
        </trans-unit>
        <trans-unit id="7438d3ec7a3e4327838d10a8d934081bb500f511" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;https://github.com/albfan/git-rebase-reword&quot;&gt;git-rebase-reword&lt;/a&gt;</source>
          <target state="translated">您可以使用&lt;a href=&quot;https://github.com/albfan/git-rebase-reword&quot;&gt;git-rebase-reword&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="af21acfd6828386c24a507086a1b24ccdfe064c8" translate="yes" xml:space="preserve">
          <source>You have a couple of options here. You can do</source>
          <target state="translated">你有几个选择 你可以做的是</target>
        </trans-unit>
        <trans-unit id="5078d61e272fdb231416324112c7872885be513d" translate="yes" xml:space="preserve">
          <source>as long as it's your last commit.</source>
          <target state="translated">只要这是你最后的承诺。</target>
        </trans-unit>
        <trans-unit id="84b0e28b58f2980b68e47f7ae3a2b61f1e93891f" translate="yes" xml:space="preserve">
          <source>button (you can check that you&amp;rsquo;re in command-mode if the word &lt;em&gt;INSERT&lt;/em&gt; at the bottom has disappeared). Then you can type in a command by typing &lt;code&gt;:&lt;/code&gt;. The command to save and quit is &lt;code&gt;wq&lt;/code&gt;. So if you type in &lt;code&gt;:wq&lt;/code&gt; you&amp;rsquo;re on the right track.</source>
          <target state="translated">按钮（如果底部的&amp;ldquo; &lt;em&gt;插入&lt;/em&gt; &amp;rdquo;一词消失了，则可以检查您是否处于命令模式）。 然后您可以通过输入 &lt;code&gt;:&lt;/code&gt; 来输入命令。 保存和退出的命令是 &lt;code&gt;wq&lt;/code&gt; 。 因此，如果输入 &lt;code&gt;:wq&lt;/code&gt; ,您的位置正确。</target>
        </trans-unit>
        <trans-unit id="f8fbb6980f90eb02ebb81570fde3a124f877ce69" translate="yes" xml:space="preserve">
          <source>correspond to movement keys</source>
          <target state="translated">对应运动键</target>
        </trans-unit>
        <trans-unit id="a50b09bb601459b63cd32db9c8bc4be2f38a8095" translate="yes" xml:space="preserve">
          <source>git-commit(1) Manual Page</source>
          <target state="translated">git-commit(1)手册页</target>
        </trans-unit>
        <trans-unit id="79675dc6d8cb4e6af07c04773a516e1c2b45bdc4" translate="yes" xml:space="preserve">
          <source>git-push(1) Manual Page</source>
          <target state="translated">git-push(1)手册页</target>
        </trans-unit>
        <trans-unit id="bf0a0f5e3f4891f99c6917eb096e94bd64744220" translate="yes" xml:space="preserve">
          <source>git-rebase(1) Manual Page</source>
          <target state="translated">git-rebase(1)手册页</target>
        </trans-unit>
        <trans-unit id="a02c8b249ce9bae21f915eec52abeadf0e214a75" translate="yes" xml:space="preserve">
          <source>moves down three lines</source>
          <target state="translated">下移三线</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="bc8067e60d906af0dae0b2f9b16103b2c16ce5c5" translate="yes" xml:space="preserve">
          <source>to change a line, word, or letter, respectively (same as</source>
          <target state="translated">分别更改行、字或字母(同</target>
        </trans-unit>
        <trans-unit id="c97b9d50f39fc9d46036376014823bbe7547d71c" translate="yes" xml:space="preserve">
          <source>to copy (&quot;yank&quot;) a line, word, or letter, respectively</source>
          <target state="translated">抄写</target>
        </trans-unit>
        <trans-unit id="a0ce74f62c3d0eb95142d19801d0b0b76d0bcd12" translate="yes" xml:space="preserve">
          <source>to delete a line, word, or letter, respectively</source>
          <target state="translated">分别删除一行、一个字或一个字母</target>
        </trans-unit>
        <trans-unit id="aaaa0e52acb9746dfa5438b7cf65ca6f035f56e4" translate="yes" xml:space="preserve">
          <source>to enter insert mode &amp;mdash; text you type will appear in the file</source>
          <target state="translated">进入插入模式-您键入的文本将出现在文件中</target>
        </trans-unit>
        <trans-unit id="99db56f69e2d891dd70f2d26ed9c64792a66b959" translate="yes" xml:space="preserve">
          <source>to exit insert mode and return to &quot;normal&quot; mode</source>
          <target state="translated">退出插入模式,返回到 &quot;正常 &quot;模式。</target>
        </trans-unit>
        <trans-unit id="b6ed2f1096144e70175303d03ff1181610e8bf09" translate="yes" xml:space="preserve">
          <source>to modify the commit, and after that</source>
          <target state="translated">来修改提交,之后</target>
        </trans-unit>
        <trans-unit id="97208c0f89ca192b2f4971aa263bdf9117933776" translate="yes" xml:space="preserve">
          <source>to move to next selection until finished with all your selections.</source>
          <target state="translated">直到完成所有的选择,再进入下一个选择。</target>
        </trans-unit>
        <trans-unit id="9a2b31c3771eceb572709ee77808fa165b24715e" translate="yes" xml:space="preserve">
          <source>to paste after, or before current position, respectively</source>
          <target state="translated">分别粘贴在当前位置之后,或之前的位置。</target>
        </trans-unit>
        <trans-unit id="0cf0e0111fe609a89ed16dca218c858fb6803513" translate="yes" xml:space="preserve">
          <source>to quit without saving</source>
          <target state="translated">不辞而别</target>
        </trans-unit>
        <trans-unit id="a2c7ddba954d772f094a428d21b46e46530cb0b4" translate="yes" xml:space="preserve">
          <source>to redo</source>
          <target state="translated">重做</target>
        </trans-unit>
        <trans-unit id="1307936b93fc814e854e3caf017ce12ab456620b" translate="yes" xml:space="preserve">
          <source>to return back to the previous head commit.</source>
          <target state="translated">回归到前一个人头的承诺。</target>
        </trans-unit>
        <trans-unit id="f66d982a4fc4c4c315a2d5e0da423f6ff0149947" translate="yes" xml:space="preserve">
          <source>to save (write) a file</source>
          <target state="translated">存档</target>
        </trans-unit>
        <trans-unit id="0bf874c9d3659d05682b5c10bbcd5cfa3b758100" translate="yes" xml:space="preserve">
          <source>to save and quit</source>
          <target state="translated">省吃俭用</target>
        </trans-unit>
        <trans-unit id="3ca29c2152337cff1a8724c31774fb8c1109aae0" translate="yes" xml:space="preserve">
          <source>to undo</source>
          <target state="translated">撤消</target>
        </trans-unit>
        <trans-unit id="85569b57d3c5b818f2c6785d171952a6882d9e3e" translate="yes" xml:space="preserve">
          <source>will open your editor, allowing you to change the commit message of the most recent commit. Additionally, you can set the commit message directly in the command line with:</source>
          <target state="translated">将打开你的编辑器,允许你修改最近一次提交的提交信息。此外,你可以在命令行中直接设置提交信息。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
