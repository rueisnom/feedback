<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/1711990">
    <body>
      <group id="1711990">
        <trans-unit id="7e613a7fd1e7d5e6f85e01029fdf991003a2e323" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://isocpp.org/wiki/faq/ctors#init-lists&quot;&gt;You should, in most cases, initialize all member objects in the member initialization list&lt;/a&gt; (however, do note the exceptions listed at the end of the FAQ entry).</source>
          <target state="translated">&lt;a href=&quot;https://isocpp.org/wiki/faq/ctors#init-lists&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在大多数情况下，您应该初始化成员初始化列表中的所有成员对象&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（但是，请注意FAQ末尾列出的例外）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0affe1016f32ebe788878059fc8f6a0d6e0fcff2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MyClass2&lt;/code&gt; doesn't have a default constructor so it has to be initialized through member initializer list.</source>
          <target state="translated">&lt;code&gt;MyClass2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;没有默认的构造函数，因此必须通过成员初始化程序列表进行初始化。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0fa11c708f799df07b6fe7753cfc3ade770847aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class Member variables are always initialized in the order in which they are declared in the class.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类成员变量始终按照在类中声明它们的顺序进行初始化。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6add4fbc53e49dcfb16f8b88345c049d16c11f9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Member Assignment:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;成员分配：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2626806f810bf48f086a62858d2a704dff9a0ace" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Member Initialization:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;成员初始化：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="09eed7418f9ab3d9eb803cfb772c473cc23d481b" translate="yes" xml:space="preserve">
          <source>A code example:</source>
          <target state="translated">一个代码的例子。</target>
        </trans-unit>
        <trans-unit id="880601c71d36a994eccfb7ce4ad4fd51a6c30393" translate="yes" xml:space="preserve">
          <source>All other things being equal, your code will run faster if you use initialization lists rather than assignment.</source>
          <target state="translated">在其他条件相同的情况下,如果你使用初始化列表而不是分配,你的代码会运行得更快。</target>
        </trans-unit>
        <trans-unit id="180cb3c011eede67ffe110f2ff78f8224e8ea8dc" translate="yes" xml:space="preserve">
          <source>As you see there is an additional overhead of creation &amp;amp; assignment in the latter, which might be considerable for user defined classes.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如您所见，在后者中创建和分配会产生额外的开销，这对于用户定义的类而言可能是相当大的。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ae4863e1b55c5a2c25e012120fa8f7aa48c74fc" translate="yes" xml:space="preserve">
          <source>Base class &lt;code&gt;MyClass&lt;/code&gt; does not have a default constructor, So to initialize its member one will need to use Member Initializer List.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基类&lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyClass&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;没有默认的构造函数，因此要初始化其成员，将需要使用成员初始化器列表。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63a748cf820d91dfb1d14d29c01dd52d4c07e9c1" translate="yes" xml:space="preserve">
          <source>Basically, in your case, &lt;code&gt;x&lt;/code&gt; will be initialized with &lt;code&gt;_x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; with &lt;code&gt;_y&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; with &lt;code&gt;_z&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本上，在您的情况下，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;_x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初始化&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;y&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;_y&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初始化&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;z&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;_z&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初始化&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7a7b310d2495e484fea1ff460e80d2fdad0204cf" translate="yes" xml:space="preserve">
          <source>Consider these two examples:</source>
          <target state="translated">考虑一下这两个例子。</target>
        </trans-unit>
        <trans-unit id="5947803b4e3a9b081b26bdb9af02f24e3aff8f35" translate="yes" xml:space="preserve">
          <source>For an inbuilt (your code example) or POD class members there is no practical overhead.</source>
          <target state="translated">对于内置的(你的代码示例)或POD类成员,没有实际的开销。</target>
        </trans-unit>
        <trans-unit id="7b72847121d3d265625d8bf2b51578b60dd777ed" translate="yes" xml:space="preserve">
          <source>For initialization of base class members or</source>
          <target state="translated">用于初始化基类成员或</target>
        </trans-unit>
        <trans-unit id="ddc1f915dfc6e4275e2f889ff9d789e04740f007" translate="yes" xml:space="preserve">
          <source>Given the above it is always a good practice to maintain the same order of members for Member initialization as the order in which they are declared in the class definition. This is because compilers do not warn if the two orders are different but a relatively new user might confuse member Initializer list as the order of initialization and write some code dependent on that.</source>
          <target state="translated">鉴于上述情况,保持成员初始化的顺序与类定义中声明的顺序相同是一个很好的做法。这是因为如果这两个顺序不一样,编译器不会发出警告,但相对来说,一个相对较新的用户可能会把成员初始化器列表作为初始化的顺序混淆,并写一些依赖这个顺序的代码。</target>
        </trans-unit>
        <trans-unit id="3790df37f778ce461ee2b133fb28189aa9b894d5" translate="yes" xml:space="preserve">
          <source>I don't know how you could miss this one, it's pretty basic. That's the syntax for initializing member variables or base class constructors.  It works for plain old data types as well as class objects.</source>
          <target state="translated">我不知道你怎么会错过这个,这是很基本的。这就是初始化成员变量或基类构造函数的语法。它既适用于普通的数据类型,也适用于类对象。</target>
        </trans-unit>
        <trans-unit id="db3a2761f5ab5a4ef0eced07df4683018bca3199" translate="yes" xml:space="preserve">
          <source>I just want to note that the syntax that, as you said, &quot;looks like a constructor call&quot;, is not necessarily a constructor call. In C++ language the &lt;code&gt;()&lt;/code&gt; syntax is just one standard form of &lt;em&gt;initialization syntax&lt;/em&gt;. It is interpreted differently for different types. For class types with user-defined constructor it means one thing (it is indeed a constructor call), for class types without user-defined constructor it means another thing (so called &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/value_initialization&quot;&gt;&lt;strong&gt;&lt;em&gt;value initialization&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; ) for empty &lt;code&gt;()&lt;/code&gt;) and for non-class types it again means something different (since non-class types have no constructors).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我只想指出，正如您所说，&amp;ldquo;看起来像构造函数调用&amp;rdquo;的语法不一定是构造函数调用。在C ++语言中，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;语法只是&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初始化语法的&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一种标准形式&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。不同类型对它的解释不同。对于具有用户定义的构造函数的类类型，它意味着一件事（实际上是一个构造函数调用），对于没有用户定义的构造函数的类类型，它意味着&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;空&lt;/font&gt; &lt;code&gt;()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;）和非类类型的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;另一件事（所谓的&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp/language/value_initialization&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;值初始化&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这又意味着不同（因为非类类型没有构造函数）。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d4f8139120d4e5b6f293692eeb62c98dded902e2" translate="yes" xml:space="preserve">
          <source>If you use &lt;strong&gt;&lt;em&gt;assignment&lt;/em&gt;&lt;/strong&gt; then the fields will be first initialized with default constructors and then reassigned (via assignment operator) with actual values.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果使用&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;赋值&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，则将首先使用默认构造函数初始化字段，然后使用实际值（通过赋值运算符）将其重新赋值。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4c351d217baf85075ad72e3f0aaf960f97f95b8d" translate="yes" xml:space="preserve">
          <source>Important points to Note while using Member Initializer Lists:</source>
          <target state="translated">使用会员初始化器列表时要注意的事项。</target>
        </trans-unit>
        <trans-unit id="a7edaa552efcdfe234d7e029e132172a0f954dfa" translate="yes" xml:space="preserve">
          <source>In example 1:</source>
          <target state="translated">在例子1中:</target>
        </trans-unit>
        <trans-unit id="ceb343a2f455b8a75b5bd2c0c3cfeca03b83227e" translate="yes" xml:space="preserve">
          <source>In example 2:</source>
          <target state="translated">在例子2中。</target>
        </trans-unit>
        <trans-unit id="6ac34c875da4aeca70449d729ca98a5b2a40d12a" translate="yes" xml:space="preserve">
          <source>In short, Member initialization list does not determine the order of initialization.</source>
          <target state="translated">总之,成员初始化列表不决定初始化的顺序。</target>
        </trans-unit>
        <trans-unit id="9e65ca2b7c2ace33af0e94d035c5832c4cf30d57" translate="yes" xml:space="preserve">
          <source>In the first example, str will be initialized by its no-argument constructor</source>
          <target state="translated">在第一个例子中,str将由它的无参数构造函数初始化。</target>
        </trans-unit>
        <trans-unit id="55ed577fb0966ae0522ac54e43678f540485e57b" translate="yes" xml:space="preserve">
          <source>In your case the data member has type &lt;code&gt;int&lt;/code&gt;. &lt;code&gt;int&lt;/code&gt; is not a class type, so it has no constructor. For type &lt;code&gt;int&lt;/code&gt; this syntax means simply &quot;initialize &lt;code&gt;bar&lt;/code&gt; with the value of &lt;code&gt;num&lt;/code&gt;&quot; and that's it. It is done just like that, directly, no constructors involved, since, once again, &lt;code&gt;int&lt;/code&gt; is not a class type of therefore it can't have any constructors.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在您的情况下，数据成员的类型为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不是类类型，因此它没有构造函数。对于&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类型，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;此语法仅表示&amp;ldquo; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt; &lt;code&gt;num&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;的值&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初始化&lt;/font&gt;&lt;/font&gt; &lt;code&gt;bar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;rdquo;即可。就像那样直接完成，不涉及任何构造函数，因为&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;再次&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不是类类型，因此它不能有任何构造函数。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6001cad2b42815ecb51dcec682bd3d238b96ce1b" translate="yes" xml:space="preserve">
          <source>It's a &lt;em&gt;member initialization list&lt;/em&gt;.  You should find information about it in any &lt;a href=&quot;https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list&quot;&gt;good C++ book&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是一个&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;成员初始化列表&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您应该在任何&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;优秀的C ++书籍中&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;找到有关它的信息&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f795a937da21ee6744d6cdfa79812d7c84f12c0c" translate="yes" xml:space="preserve">
          <source>It's all about efficiency.</source>
          <target state="translated">这都是效率问题。</target>
        </trans-unit>
        <trans-unit id="ea8ebfb20a1664723438a91d0ac1c4f927a3ce70" translate="yes" xml:space="preserve">
          <source>It's an initialization list for the constructor. Instead of default constructing &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; and then assigning them the values received in the parameters, those members will be initialized with those values right off the bat. This may not seem terribly useful for &lt;code&gt;float&lt;/code&gt;s, but it can be quite a timesaver with custom classes that are expensive to construct.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是构造函数的初始化列表。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代替默认构造&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;y&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;z&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，然后为它们分配参数中接收的值，这些成员将立即使用这些值进行初始化。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于&lt;/font&gt;&lt;/font&gt; &lt;code&gt;float&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;来说，这似乎并不是非常有用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，但是对于自定义类而言，构建一个昂贵的组件可能会节省很多时间。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="61c4bedc7ad1b0462f4a43d5cf2914409a9b6514" translate="yes" xml:space="preserve">
          <source>Not mentioned yet on this thread: since C++11, the member initializer list can use list-initialization  (aka. &quot;uniform initialization&quot;, &quot;braced initialization&quot;):</source>
          <target state="translated">这个线程中还没有提到:从C++11开始,成员初始化器列表可以使用list-initialization(又名 &quot;统一初始化&quot;、&quot;括号初始化&quot;)。</target>
        </trans-unit>
        <trans-unit id="dcf5e42daec51eb7f8764c8bfdf463e6ff5ceff4" translate="yes" xml:space="preserve">
          <source>Recently I've seen an example like the following:</source>
          <target state="translated">最近我看到一个类似下面的例子。</target>
        </trans-unit>
        <trans-unit id="b932af732e5e21996073c6dbbc9ef6f4f02b7b7c" translate="yes" xml:space="preserve">
          <source>Simply said, it &lt;strong&gt;initializes&lt;/strong&gt; your member &lt;code&gt;bar&lt;/code&gt; to a value &lt;code&gt;num&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;简而言之，它将&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;成员&lt;/font&gt; &lt;code&gt;bar&lt;/code&gt; &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初始化&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为值&lt;/font&gt; &lt;code&gt;num&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab5ce908762849ae0fa009c66f046b08095ef51d" translate="yes" xml:space="preserve">
          <source>That's constructor initialisation.  It is the correct way to initialise members in a class constructor, as it prevents the default constructor being invoked.</source>
          <target state="translated">这就是构造函数的初始化。它是在类构造函数中初始化成员的正确方法,因为它可以防止默认构造函数被调用。</target>
        </trans-unit>
        <trans-unit id="66b048d42e6a3eb9a43bc6d9950d55ff9153c23f" translate="yes" xml:space="preserve">
          <source>The latter is actually equivalent to:</source>
          <target state="translated">后者实际上相当于:</target>
        </trans-unit>
        <trans-unit id="755c8932e2b5791a3e63356c6600a12413babfc2" translate="yes" xml:space="preserve">
          <source>The other already explained to you that the syntax that you observe is called &quot;constructor initializer list&quot;. This syntax lets you to custom-initialize base subobjects and member subobjects of the class (as opposed to allowing them to default-initialize or to remain uninitialized).</source>
          <target state="translated">其他的已经给你解释过了,你观察到的语法叫做 &quot;构造函数初始化器列表&quot;。这个语法可以让你自定义初始化类的基础子对象和成员子对象(而不是让它们默认初始化或保持不初始化)。</target>
        </trans-unit>
        <trans-unit id="a6f2d7f773eb92a407018d744440a2466c739cd7" translate="yes" xml:space="preserve">
          <source>The takeaway point from the FAQ entry is that,</source>
          <target state="translated">从常见问题解答条目中,我们可以得出的结论是:</target>
        </trans-unit>
        <trans-unit id="32fc652b48d905fd3b8d9f3fdb3679d254cd248a" translate="yes" xml:space="preserve">
          <source>There is a significant difference between Initializing a member using Member initializer list and assigning it an value inside the constructor body.</source>
          <target state="translated">使用Member初始化器列表初始化一个成员和在构造体内部赋予它一个值是有很大区别的。</target>
        </trans-unit>
        <trans-unit id="c8c2868665fe6c6390704b375f2aa729b9f62f88" translate="yes" xml:space="preserve">
          <source>They are &lt;strong&gt;not&lt;/strong&gt; initialized in the order in which they are specified in the Member Initializer List.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它们&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;未&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;按照成员初始化程序列表中指定的顺序进行初始化。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8f4e030af718c825592a70f61c77350972f7863b" translate="yes" xml:space="preserve">
          <source>This construct is called a &lt;strong&gt;Member Initializer List&lt;/strong&gt; in C++.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;此构造&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在C ++中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;称为&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;成员初始化器列表&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5fa57f50540c7770916fd7d1b857c2b9643f6dc1" translate="yes" xml:space="preserve">
          <source>This is an initialization list. It'll initialize the members before the constructor body is run.
Consider</source>
          <target state="translated">这是一个初始化列表。它将在构造体运行之前初始化成员。考虑一下</target>
        </trans-unit>
        <trans-unit id="0ac464d5399e0c8a011ca0211c64d3ce9fe9b1b4" translate="yes" xml:space="preserve">
          <source>This is called an initialization list.  It is a way of initializing class members.  There are benefits to using this instead of simply assigning new values to the members in the body of the constructor, but if you have class members which are &lt;em&gt;constants&lt;/em&gt; or &lt;em&gt;references&lt;/em&gt; they &lt;em&gt;must&lt;/em&gt; be initialized.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这称为初始化列表。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是初始化类成员的一种方法。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用此方法有很多好处，而不是简单地向构造函数主体中的成员分配新值，但是如果您有类成员，这些成员是&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;常量&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;或&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;引用，&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;则&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必须&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对其进行初始化。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a6750f4aaeae63e5720e3a68b65e1980f6a1bbc" translate="yes" xml:space="preserve">
          <source>This is not obscure, it's the &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/initializer_list&quot;&gt;C++ initialization list syntax&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这不是晦涩的，它是&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp/language/initializer_list&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++初始化列表的语法&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="53c1aabc06f6027cf4e5ec9fd20c49a7d15c2b30" translate="yes" xml:space="preserve">
          <source>What does this strange &lt;code&gt;: bar(num)&lt;/code&gt; mean? It somehow seems to initialize the member variable but I've never seen this syntax before. It looks like a function/constructor call but for an &lt;code&gt;int&lt;/code&gt;?  Makes no sense for me. Perhaps someone could enlighten me. And, by the way, are there any other esoteric language features like this, you'll never find in an ordinary C++ book?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这个奇怪的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;: bar(num)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是什么意思？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它似乎以某种方式初始化了成员变量，但我之前从未见过这种语法。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它看起来像一个函数/构造函数调用，但要使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;吗？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对我来说毫无意义。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;也许有人可以启发我。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;顺便说一句，还有其他任何深奥的语言功能，在普通的C ++书籍中找不到吗？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82c7641717ae11ba8d702ebd047eff90f7d6d49b" translate="yes" xml:space="preserve">
          <source>What is the difference between Initializing and Assignment inside a constructor?</source>
          <target state="translated">构造函数内部的Initializing和Assignment有什么区别?</target>
        </trans-unit>
        <trans-unit id="11aeeccb080ea4fb19b9b6094aec75cf3c865822" translate="yes" xml:space="preserve">
          <source>What is this weird colon-member (“ : ”) syntax in the constructor</source>
          <target state="translated">在构造函数中,这个奇怪的冒号成员(&quot;:&quot;)语法是什么?</target>
        </trans-unit>
        <trans-unit id="72d60b81e1762c8994f2d868ffbbc8abc0b41996" translate="yes" xml:space="preserve">
          <source>When constructor&amp;rsquo;s parameter name is same as data member(this is not really a MUST)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当构造函数的参数名称与数据成员相同时（这不是必须的）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9dc941a8bb728953e774cb706496f3e48243ca02" translate="yes" xml:space="preserve">
          <source>When do you HAVE TO use Member Initializer list?</source>
          <target state="translated">你必须在什么时候使用会员初始化器列表?</target>
        </trans-unit>
        <trans-unit id="e0c6c8d417ff6627a0124a08de7883ae7511f3ca" translate="yes" xml:space="preserve">
          <source>When you &lt;strong&gt;&lt;em&gt;initialize&lt;/em&gt;&lt;/strong&gt; fields via Member initializer list the constructors will be called once and the object will be constructed and initialized in one operation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当你&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初始化&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通过成员字段初始化列表构造函数将被调用一次与对象将构造并在一次操作中被初始化。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ebc3241919665078364a95d52a9165e822dc30ca" translate="yes" xml:space="preserve">
          <source>Wheras in the second example, str will be initialized directly by
calling its constructor</source>
          <target state="translated">在第二个例子中,str将通过调用其构造函数直接初始化。</target>
        </trans-unit>
        <trans-unit id="f4f0ac48cffd6745ff6a32fae3ea98141ca1b17d" translate="yes" xml:space="preserve">
          <source>While the former is equivalent to just:</source>
          <target state="translated">而前者相当于只是。</target>
        </trans-unit>
        <trans-unit id="de9d44bf598487e6479a23193a3096783d76ab83" translate="yes" xml:space="preserve">
          <source>You are correct, this is indeed a way to initialize member variables.  I'm not sure that there's much benefit to this, other than clearly expressing that it's an initialization.  Having a &quot;bar=num&quot; inside the code could get moved around, deleted, or misinterpreted much more easily.</source>
          <target state="translated">你说的没错,这确实是初始化成员变量的一种方式。我不确定这样做有什么好处,除了清楚地表达出它是一个初始化之外。在代码里有一个 &quot;bar=num &quot;可能更容易被移动、删除或误读。</target>
        </trans-unit>
        <trans-unit id="a0b51ff8c41793d2f3b977e8288cd747edace1ff" translate="yes" xml:space="preserve">
          <source>You will &lt;strong&gt;have(rather forced) to&lt;/strong&gt; use a Member Initializer list if:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在以下情况下，您将&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（而是被迫）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用成员初始化器列表：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="533c067aff470ecf1cf17ea337acd7f17a55966e" translate="yes" xml:space="preserve">
          <source>Your class has a non static const member or</source>
          <target state="translated">你的类有一个非静态成员或</target>
        </trans-unit>
        <trans-unit id="fb2245c596d643b069e12828278627408eeb08f6" translate="yes" xml:space="preserve">
          <source>Your class has a reference member</source>
          <target state="translated">你的类有一个参考成员</target>
        </trans-unit>
        <trans-unit id="e4c1e66d85c1552339e63362828ab9cb1289cf6c" translate="yes" xml:space="preserve">
          <source>Your class member doesn't have a default constructor or</source>
          <target state="translated">你的类成员没有默认的构造函数或</target>
        </trans-unit>
        <trans-unit id="d17e61782e975aad8a59ebfd95fe42b0b27b1fff" translate="yes" xml:space="preserve">
          <source>before the body of the Foo constructor. Inside the foo constructor, the</source>
          <target state="translated">在Foo构造函数的主体之前。在foo构造函数内部,</target>
        </trans-unit>
        <trans-unit id="fe4b03553c2242b7ac87e5d19342918dba0fe01f" translate="yes" xml:space="preserve">
          <source>if the member variable type does not support null initialization or if its a reference (which cannot be null initialized) then you have no choice but to supply an initialization list</source>
          <target state="translated">如果成员变量类型不支持空初始化,或者是引用(不能为空初始化),那么除了提供一个初始化列表外,你别无选择。</target>
        </trans-unit>
        <trans-unit id="099996239a56eb00959aaef16cb395d5af7872ab" translate="yes" xml:space="preserve">
          <source>there is another 'benefit'</source>
          <target state="translated">还有一个 &quot;好处</target>
        </trans-unit>
        <trans-unit id="691a77cd21a31b1b144537311a05b0bb5ff8fd2d" translate="yes" xml:space="preserve">
          <source>vs</source>
          <target state="translated">vs</target>
        </trans-unit>
        <trans-unit id="c7eee21b85191d8de6dded55dbd1cdf406ea62a5" translate="yes" xml:space="preserve">
          <source>which has the same semantics as list-initialization in other contexts.</source>
          <target state="translated">在其他上下文中具有与列表初始化相同的语义。</target>
        </trans-unit>
        <trans-unit id="94cc7ffc6a8d9e66ec197544cce625140bb41602" translate="yes" xml:space="preserve">
          <source>will be called on 'str' as you do   str = p;</source>
          <target state="translated">将在'str'上被调用,因为你做str=p。</target>
        </trans-unit>
        <trans-unit id="3cf1ebb407c1ed531cfe3fe98ecbcd216dfee228" translate="yes" xml:space="preserve">
          <source>with 'p' as an argument.</source>
          <target state="translated">用'p'作为参数。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
