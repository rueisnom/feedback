<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/1711990">
    <body>
      <group id="1711990">
        <trans-unit id="7e613a7fd1e7d5e6f85e01029fdf991003a2e323" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://isocpp.org/wiki/faq/ctors#init-lists&quot;&gt;You should, in most cases, initialize all member objects in the member initialization list&lt;/a&gt; (however, do note the exceptions listed at the end of the FAQ entry).</source>
          <target state="translated">&lt;a href=&quot;https://isocpp.org/wiki/faq/ctors#init-lists&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En la mayor&amp;iacute;a de los casos, debe inicializar todos los objetos miembros en la lista de inicializaci&amp;oacute;n de miembros&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (sin embargo, tenga en cuenta las excepciones enumeradas al final de la entrada de preguntas frecuentes).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0affe1016f32ebe788878059fc8f6a0d6e0fcff2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MyClass2&lt;/code&gt; doesn't have a default constructor so it has to be initialized through member initializer list.</source>
          <target state="translated">&lt;code&gt;MyClass2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no tiene un constructor predeterminado, por lo que debe inicializarse a trav&amp;eacute;s de la lista de inicializadores de miembros.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0fa11c708f799df07b6fe7753cfc3ade770847aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class Member variables are always initialized in the order in which they are declared in the class.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las variables de Miembro de clase siempre se inicializan en el orden en que se declaran en la clase.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6add4fbc53e49dcfb16f8b88345c049d16c11f9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Member Assignment:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Asignaci&amp;oacute;n de miembros:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2626806f810bf48f086a62858d2a704dff9a0ace" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Member Initialization:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inicializaci&amp;oacute;n de miembros:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="09eed7418f9ab3d9eb803cfb772c473cc23d481b" translate="yes" xml:space="preserve">
          <source>A code example:</source>
          <target state="translated">Un ejemplo de código:</target>
        </trans-unit>
        <trans-unit id="880601c71d36a994eccfb7ce4ad4fd51a6c30393" translate="yes" xml:space="preserve">
          <source>All other things being equal, your code will run faster if you use initialization lists rather than assignment.</source>
          <target state="translated">En igualdad de condiciones,su código se ejecutará más rápido si utiliza listas de inicialización en lugar de asignaciones.</target>
        </trans-unit>
        <trans-unit id="180cb3c011eede67ffe110f2ff78f8224e8ea8dc" translate="yes" xml:space="preserve">
          <source>As you see there is an additional overhead of creation &amp;amp; assignment in the latter, which might be considerable for user defined classes.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como puede ver, hay una sobrecarga adicional de creaci&amp;oacute;n y asignaci&amp;oacute;n en este &amp;uacute;ltimo, que podr&amp;iacute;a ser considerable para las clases definidas por el usuario.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ae4863e1b55c5a2c25e012120fa8f7aa48c74fc" translate="yes" xml:space="preserve">
          <source>Base class &lt;code&gt;MyClass&lt;/code&gt; does not have a default constructor, So to initialize its member one will need to use Member Initializer List.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La clase base &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyClass&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no tiene un constructor predeterminado, por lo tanto, para inicializar su miembro, deber&amp;aacute; usar la Lista de inicializadores de miembros.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63a748cf820d91dfb1d14d29c01dd52d4c07e9c1" translate="yes" xml:space="preserve">
          <source>Basically, in your case, &lt;code&gt;x&lt;/code&gt; will be initialized with &lt;code&gt;_x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; with &lt;code&gt;_y&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; with &lt;code&gt;_z&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;B&amp;aacute;sicamente, en su caso, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se inicializar&amp;aacute; con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;_x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;y&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;_y&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;z&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;_z&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7a7b310d2495e484fea1ff460e80d2fdad0204cf" translate="yes" xml:space="preserve">
          <source>Consider these two examples:</source>
          <target state="translated">Considere estos dos ejemplos:</target>
        </trans-unit>
        <trans-unit id="5947803b4e3a9b081b26bdb9af02f24e3aff8f35" translate="yes" xml:space="preserve">
          <source>For an inbuilt (your code example) or POD class members there is no practical overhead.</source>
          <target state="translated">Para los miembros de la clase &quot;Inbuilt&quot; (su ejemplo de código)o &quot;POD&quot; no hay gastos generales prácticos.</target>
        </trans-unit>
        <trans-unit id="7b72847121d3d265625d8bf2b51578b60dd777ed" translate="yes" xml:space="preserve">
          <source>For initialization of base class members or</source>
          <target state="translated">Para la inicialización de los miembros de la clase base o</target>
        </trans-unit>
        <trans-unit id="ddc1f915dfc6e4275e2f889ff9d789e04740f007" translate="yes" xml:space="preserve">
          <source>Given the above it is always a good practice to maintain the same order of members for Member initialization as the order in which they are declared in the class definition. This is because compilers do not warn if the two orders are different but a relatively new user might confuse member Initializer list as the order of initialization and write some code dependent on that.</source>
          <target state="translated">Habida cuenta de lo anterior,siempre es una buena práctica mantener el mismo orden de los miembros para la inicialización de los miembros que el orden en que se declaran en la definición de la clase.Esto se debe a que los compiladores no advierten si los dos órdenes son diferentes,pero un usuario relativamente nuevo podría confundir la lista de miembros para la inicialización de miembros con el orden de inicialización y escribir algún código dependiente de ello.</target>
        </trans-unit>
        <trans-unit id="3790df37f778ce461ee2b133fb28189aa9b894d5" translate="yes" xml:space="preserve">
          <source>I don't know how you could miss this one, it's pretty basic. That's the syntax for initializing member variables or base class constructors.  It works for plain old data types as well as class objects.</source>
          <target state="translated">No sé cómo puedes perderte esta,es bastante básica.Es la sintaxis para inicializar variables de miembros o constructores de clases base.Funciona tanto para los tipos de datos normales como para los objetos de clase.</target>
        </trans-unit>
        <trans-unit id="db3a2761f5ab5a4ef0eced07df4683018bca3199" translate="yes" xml:space="preserve">
          <source>I just want to note that the syntax that, as you said, &quot;looks like a constructor call&quot;, is not necessarily a constructor call. In C++ language the &lt;code&gt;()&lt;/code&gt; syntax is just one standard form of &lt;em&gt;initialization syntax&lt;/em&gt;. It is interpreted differently for different types. For class types with user-defined constructor it means one thing (it is indeed a constructor call), for class types without user-defined constructor it means another thing (so called &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/value_initialization&quot;&gt;&lt;strong&gt;&lt;em&gt;value initialization&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; ) for empty &lt;code&gt;()&lt;/code&gt;) and for non-class types it again means something different (since non-class types have no constructors).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Solo quiero se&amp;ntilde;alar que la sintaxis que, como dijiste, &quot;parece una llamada de constructor&quot;, no es necesariamente una llamada de constructor. En lenguaje C ++, la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sintaxis &lt;/font&gt;&lt;/font&gt; &lt;code&gt;()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es solo una forma est&amp;aacute;ndar de &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sintaxis&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;inicializaci&amp;oacute;n&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Se interpreta de manera diferente para diferentes tipos. Para los tipos de clase con constructor definido por el usuario significa una cosa (de hecho es una llamada de constructor), para los tipos de clase sin constructor definido por el usuario significa otra cosa (llamada &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp/language/value_initialization&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;inicializaci&amp;oacute;n de valor&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) para empty &lt;/font&gt;&lt;/font&gt; &lt;code&gt;()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) y para tipos que no son de clase nuevamente significa algo diferente (ya que los tipos que no son de clase no tienen constructores).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d4f8139120d4e5b6f293692eeb62c98dded902e2" translate="yes" xml:space="preserve">
          <source>If you use &lt;strong&gt;&lt;em&gt;assignment&lt;/em&gt;&lt;/strong&gt; then the fields will be first initialized with default constructors and then reassigned (via assignment operator) with actual values.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si usa la &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;asignaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , los campos se inicializar&amp;aacute;n primero con los constructores predeterminados y luego se reasignar&amp;aacute;n (a trav&amp;eacute;s del operador de asignaci&amp;oacute;n) con los valores reales.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4c351d217baf85075ad72e3f0aaf960f97f95b8d" translate="yes" xml:space="preserve">
          <source>Important points to Note while using Member Initializer Lists:</source>
          <target state="translated">Puntos importantes a tener en cuenta al utilizar las listas de inicialización de miembros:</target>
        </trans-unit>
        <trans-unit id="a7edaa552efcdfe234d7e029e132172a0f954dfa" translate="yes" xml:space="preserve">
          <source>In example 1:</source>
          <target state="translated">En el ejemplo 1:</target>
        </trans-unit>
        <trans-unit id="ceb343a2f455b8a75b5bd2c0c3cfeca03b83227e" translate="yes" xml:space="preserve">
          <source>In example 2:</source>
          <target state="translated">En el ejemplo 2:</target>
        </trans-unit>
        <trans-unit id="6ac34c875da4aeca70449d729ca98a5b2a40d12a" translate="yes" xml:space="preserve">
          <source>In short, Member initialization list does not determine the order of initialization.</source>
          <target state="translated">En resumen,la lista de inicialización de los Miembros no determina el orden de la inicialización.</target>
        </trans-unit>
        <trans-unit id="9e65ca2b7c2ace33af0e94d035c5832c4cf30d57" translate="yes" xml:space="preserve">
          <source>In the first example, str will be initialized by its no-argument constructor</source>
          <target state="translated">En el primer ejemplo,str será inicializado por su constructor sin argumentos</target>
        </trans-unit>
        <trans-unit id="55ed577fb0966ae0522ac54e43678f540485e57b" translate="yes" xml:space="preserve">
          <source>In your case the data member has type &lt;code&gt;int&lt;/code&gt;. &lt;code&gt;int&lt;/code&gt; is not a class type, so it has no constructor. For type &lt;code&gt;int&lt;/code&gt; this syntax means simply &quot;initialize &lt;code&gt;bar&lt;/code&gt; with the value of &lt;code&gt;num&lt;/code&gt;&quot; and that's it. It is done just like that, directly, no constructors involved, since, once again, &lt;code&gt;int&lt;/code&gt; is not a class type of therefore it can't have any constructors.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En su caso, el miembro de datos tiene el tipo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no es un tipo de clase, por lo que no tiene constructor. Para el tipo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; esta sintaxis significa simplemente &quot;inicializar la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;bar&lt;/code&gt; ra&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con el valor de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;num&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot; y eso es todo. Se hace as&amp;iacute;, directamente, sin constructores involucrados, ya que, una vez m&amp;aacute;s, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no es un tipo de clase, por lo tanto, no puede tener ning&amp;uacute;n constructor.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6001cad2b42815ecb51dcec682bd3d238b96ce1b" translate="yes" xml:space="preserve">
          <source>It's a &lt;em&gt;member initialization list&lt;/em&gt;.  You should find information about it in any &lt;a href=&quot;https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list&quot;&gt;good C++ book&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;lista de inicializaci&amp;oacute;n de miembros&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Deber&amp;iacute;a encontrar informaci&amp;oacute;n al respecto en cualquier &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;buen libro de C ++&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f795a937da21ee6744d6cdfa79812d7c84f12c0c" translate="yes" xml:space="preserve">
          <source>It's all about efficiency.</source>
          <target state="translated">Se trata de la eficiencia.</target>
        </trans-unit>
        <trans-unit id="ea8ebfb20a1664723438a91d0ac1c4f927a3ce70" translate="yes" xml:space="preserve">
          <source>It's an initialization list for the constructor. Instead of default constructing &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; and then assigning them the values received in the parameters, those members will be initialized with those values right off the bat. This may not seem terribly useful for &lt;code&gt;float&lt;/code&gt;s, but it can be quite a timesaver with custom classes that are expensive to construct.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es una lista de inicializaci&amp;oacute;n para el constructor. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En lugar de construir por defecto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;y&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;z&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y luego asignarles los valores recibidos en los par&amp;aacute;metros, esos miembros se inicializar&amp;aacute;n con esos valores de inmediato. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto puede no parecer terriblemente &amp;uacute;til para los &lt;/font&gt;&lt;/font&gt; &lt;code&gt;float&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , pero puede ahorrar bastante tiempo con clases personalizadas que son costosas de construir.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="61c4bedc7ad1b0462f4a43d5cf2914409a9b6514" translate="yes" xml:space="preserve">
          <source>Not mentioned yet on this thread: since C++11, the member initializer list can use list-initialization  (aka. &quot;uniform initialization&quot;, &quot;braced initialization&quot;):</source>
          <target state="translated">No se menciona todavía en este hilo:desde C++11,la lista de inicialización de los miembros puede utilizar la inicialización de la lista (también conocida como &quot;inicialización uniforme&quot;,&quot;inicialización reforzada&quot;):</target>
        </trans-unit>
        <trans-unit id="dcf5e42daec51eb7f8764c8bfdf463e6ff5ceff4" translate="yes" xml:space="preserve">
          <source>Recently I've seen an example like the following:</source>
          <target state="translated">Recientemente he visto un ejemplo como el siguiente:</target>
        </trans-unit>
        <trans-unit id="b932af732e5e21996073c6dbbc9ef6f4f02b7b7c" translate="yes" xml:space="preserve">
          <source>Simply said, it &lt;strong&gt;initializes&lt;/strong&gt; your member &lt;code&gt;bar&lt;/code&gt; to a value &lt;code&gt;num&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Simplemente dicho, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;inicializa&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; su &lt;/font&gt;&lt;/font&gt; &lt;code&gt;bar&lt;/code&gt; ra de&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; miembros &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a un valor &lt;/font&gt;&lt;/font&gt; &lt;code&gt;num&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab5ce908762849ae0fa009c66f046b08095ef51d" translate="yes" xml:space="preserve">
          <source>That's constructor initialisation.  It is the correct way to initialise members in a class constructor, as it prevents the default constructor being invoked.</source>
          <target state="translated">Eso es la inicialización del constructor.Es la forma correcta de inicializar los miembros en un constructor de clase,ya que evita que se invoque el constructor por defecto.</target>
        </trans-unit>
        <trans-unit id="66b048d42e6a3eb9a43bc6d9950d55ff9153c23f" translate="yes" xml:space="preserve">
          <source>The latter is actually equivalent to:</source>
          <target state="translated">Este último es en realidad equivalente a:</target>
        </trans-unit>
        <trans-unit id="755c8932e2b5791a3e63356c6600a12413babfc2" translate="yes" xml:space="preserve">
          <source>The other already explained to you that the syntax that you observe is called &quot;constructor initializer list&quot;. This syntax lets you to custom-initialize base subobjects and member subobjects of the class (as opposed to allowing them to default-initialize or to remain uninitialized).</source>
          <target state="translated">El otro ya le explicó que la sintaxis que observa se llama &quot;lista de inicialización del constructor&quot;.Esta sintaxis le permite inicializar a medida los subobjetos base y los subobjetos miembros de la clase (en contraposición a permitir que se inicialicen por defecto o que permanezcan sin inicializar).</target>
        </trans-unit>
        <trans-unit id="a6f2d7f773eb92a407018d744440a2466c739cd7" translate="yes" xml:space="preserve">
          <source>The takeaway point from the FAQ entry is that,</source>
          <target state="translated">El punto de partida de la entrada de la FAQ es que,</target>
        </trans-unit>
        <trans-unit id="32fc652b48d905fd3b8d9f3fdb3679d254cd248a" translate="yes" xml:space="preserve">
          <source>There is a significant difference between Initializing a member using Member initializer list and assigning it an value inside the constructor body.</source>
          <target state="translated">Existe una diferencia significativa entre inicializar un miembro utilizando la lista de inicialización de miembros y asignarle un valor dentro del cuerpo constructor.</target>
        </trans-unit>
        <trans-unit id="c8c2868665fe6c6390704b375f2aa729b9f62f88" translate="yes" xml:space="preserve">
          <source>They are &lt;strong&gt;not&lt;/strong&gt; initialized in the order in which they are specified in the Member Initializer List.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Est&amp;aacute;n &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; inicializados en el orden en el que se especifican en la lista de inicializaci&amp;oacute;n miembros.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8f4e030af718c825592a70f61c77350972f7863b" translate="yes" xml:space="preserve">
          <source>This construct is called a &lt;strong&gt;Member Initializer List&lt;/strong&gt; in C++.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta construcci&amp;oacute;n se denomina &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lista de inicializador de miembros&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en C ++.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5fa57f50540c7770916fd7d1b857c2b9643f6dc1" translate="yes" xml:space="preserve">
          <source>This is an initialization list. It'll initialize the members before the constructor body is run.
Consider</source>
          <target state="translated">Esta es una lista de inicialización.Inicializará los miembros antes de que se ejecute el cuerpo del constructor.Considere</target>
        </trans-unit>
        <trans-unit id="0ac464d5399e0c8a011ca0211c64d3ce9fe9b1b4" translate="yes" xml:space="preserve">
          <source>This is called an initialization list.  It is a way of initializing class members.  There are benefits to using this instead of simply assigning new values to the members in the body of the constructor, but if you have class members which are &lt;em&gt;constants&lt;/em&gt; or &lt;em&gt;references&lt;/em&gt; they &lt;em&gt;must&lt;/em&gt; be initialized.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto se llama una lista de inicializaci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es una forma de inicializar a los miembros de la clase. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hay beneficios al usar esto en lugar de simplemente asignar nuevos valores a los miembros en el cuerpo del constructor, pero si tiene miembros de clase que son &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;constantes&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;referencias&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;deben&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; inicializarse.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a6750f4aaeae63e5720e3a68b65e1980f6a1bbc" translate="yes" xml:space="preserve">
          <source>This is not obscure, it's the &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/initializer_list&quot;&gt;C++ initialization list syntax&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto no es oscuro, es la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp/language/initializer_list&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sintaxis de la lista de inicializaci&amp;oacute;n de C ++&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="53c1aabc06f6027cf4e5ec9fd20c49a7d15c2b30" translate="yes" xml:space="preserve">
          <source>What does this strange &lt;code&gt;: bar(num)&lt;/code&gt; mean? It somehow seems to initialize the member variable but I've never seen this syntax before. It looks like a function/constructor call but for an &lt;code&gt;int&lt;/code&gt;?  Makes no sense for me. Perhaps someone could enlighten me. And, by the way, are there any other esoteric language features like this, you'll never find in an ordinary C++ book?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Qu&amp;eacute; significa esto extra&amp;ntilde;o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;: bar(num)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De alguna manera parece inicializar la variable miembro, pero nunca he visto esta sintaxis antes. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Parece una llamada de funci&amp;oacute;n / constructor pero para un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No tiene sentido para mi. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Quiz&amp;aacute;s alguien pueda iluminarme. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y, por cierto, &amp;iquest;hay otras caracter&amp;iacute;sticas del lenguaje esot&amp;eacute;rico como esta que nunca encontrar&amp;aacute;s en un libro de C ++ normal?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82c7641717ae11ba8d702ebd047eff90f7d6d49b" translate="yes" xml:space="preserve">
          <source>What is the difference between Initializing and Assignment inside a constructor?</source>
          <target state="translated">¿Cuál es la diferencia entre Inicialización y Asignación dentro de un constructor?</target>
        </trans-unit>
        <trans-unit id="11aeeccb080ea4fb19b9b6094aec75cf3c865822" translate="yes" xml:space="preserve">
          <source>What is this weird colon-member (“ : ”) syntax in the constructor</source>
          <target state="translated">¿Qué es esta extraña sintaxis del miembro del colon (&quot;:&quot;)en el constructor</target>
        </trans-unit>
        <trans-unit id="72d60b81e1762c8994f2d868ffbbc8abc0b41996" translate="yes" xml:space="preserve">
          <source>When constructor&amp;rsquo;s parameter name is same as data member(this is not really a MUST)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando el nombre del par&amp;aacute;metro del constructor es el mismo que el miembro de datos (esto no es realmente NECESARIO)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9dc941a8bb728953e774cb706496f3e48243ca02" translate="yes" xml:space="preserve">
          <source>When do you HAVE TO use Member Initializer list?</source>
          <target state="translated">¿Cuándo tienes que usar la lista de miembros iniciadores?</target>
        </trans-unit>
        <trans-unit id="e0c6c8d417ff6627a0124a08de7883ae7511f3ca" translate="yes" xml:space="preserve">
          <source>When you &lt;strong&gt;&lt;em&gt;initialize&lt;/em&gt;&lt;/strong&gt; fields via Member initializer list the constructors will be called once and the object will be constructed and initialized in one operation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;inicializa&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; campos a trav&amp;eacute;s de la lista de inicializadores de Miembros, los constructores se llamar&amp;aacute;n una vez y el objeto se construir&amp;aacute; e inicializar&amp;aacute; en una operaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ebc3241919665078364a95d52a9165e822dc30ca" translate="yes" xml:space="preserve">
          <source>Wheras in the second example, str will be initialized directly by
calling its constructor</source>
          <target state="translated">En el segundo ejemplo,str se inicializará directamente llamando a su constructor</target>
        </trans-unit>
        <trans-unit id="f4f0ac48cffd6745ff6a32fae3ea98141ca1b17d" translate="yes" xml:space="preserve">
          <source>While the former is equivalent to just:</source>
          <target state="translated">Mientras que lo primero equivale a lo justo:</target>
        </trans-unit>
        <trans-unit id="de9d44bf598487e6479a23193a3096783d76ab83" translate="yes" xml:space="preserve">
          <source>You are correct, this is indeed a way to initialize member variables.  I'm not sure that there's much benefit to this, other than clearly expressing that it's an initialization.  Having a &quot;bar=num&quot; inside the code could get moved around, deleted, or misinterpreted much more easily.</source>
          <target state="translated">Tiene razón,es una forma de inicializar las variables de los miembros.No estoy seguro de que esto sea muy beneficioso,aparte de expresar claramente que es una inicialización.Tener un &quot;bar=num&quot; dentro del código podría moverse,borrarse o malinterpretarse mucho más fácilmente.</target>
        </trans-unit>
        <trans-unit id="a0b51ff8c41793d2f3b977e8288cd747edace1ff" translate="yes" xml:space="preserve">
          <source>You will &lt;strong&gt;have(rather forced) to&lt;/strong&gt; use a Member Initializer list if:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tendr&amp;aacute; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(m&amp;aacute;s bien forzado)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; usar una lista de inicializador de miembros si:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="533c067aff470ecf1cf17ea337acd7f17a55966e" translate="yes" xml:space="preserve">
          <source>Your class has a non static const member or</source>
          <target state="translated">Su clase tiene un miembro constante no estático o</target>
        </trans-unit>
        <trans-unit id="fb2245c596d643b069e12828278627408eeb08f6" translate="yes" xml:space="preserve">
          <source>Your class has a reference member</source>
          <target state="translated">Su clase tiene un miembro de referencia</target>
        </trans-unit>
        <trans-unit id="e4c1e66d85c1552339e63362828ab9cb1289cf6c" translate="yes" xml:space="preserve">
          <source>Your class member doesn't have a default constructor or</source>
          <target state="translated">Su miembro de la clase no tiene un constructor por defecto o</target>
        </trans-unit>
        <trans-unit id="d17e61782e975aad8a59ebfd95fe42b0b27b1fff" translate="yes" xml:space="preserve">
          <source>before the body of the Foo constructor. Inside the foo constructor, the</source>
          <target state="translated">ante el cuerpo del constructor de Foo.Dentro del constructor Foo,el</target>
        </trans-unit>
        <trans-unit id="fe4b03553c2242b7ac87e5d19342918dba0fe01f" translate="yes" xml:space="preserve">
          <source>if the member variable type does not support null initialization or if its a reference (which cannot be null initialized) then you have no choice but to supply an initialization list</source>
          <target state="translated">si el tipo de variable de miembro no admite la inicialización nula o si es una referencia (que no puede ser inicializada nula)entonces no tiene más remedio que suministrar una lista de inicialización</target>
        </trans-unit>
        <trans-unit id="099996239a56eb00959aaef16cb395d5af7872ab" translate="yes" xml:space="preserve">
          <source>there is another 'benefit'</source>
          <target state="translated">hay otro &quot;beneficio</target>
        </trans-unit>
        <trans-unit id="691a77cd21a31b1b144537311a05b0bb5ff8fd2d" translate="yes" xml:space="preserve">
          <source>vs</source>
          <target state="translated">vs</target>
        </trans-unit>
        <trans-unit id="c7eee21b85191d8de6dded55dbd1cdf406ea62a5" translate="yes" xml:space="preserve">
          <source>which has the same semantics as list-initialization in other contexts.</source>
          <target state="translated">que tiene la misma semántica que la inicialización de la lista en otros contextos.</target>
        </trans-unit>
        <trans-unit id="94cc7ffc6a8d9e66ec197544cce625140bb41602" translate="yes" xml:space="preserve">
          <source>will be called on 'str' as you do   str = p;</source>
          <target state="translated">será llamado en 'str' como lo hace str=p;</target>
        </trans-unit>
        <trans-unit id="3cf1ebb407c1ed531cfe3fe98ecbcd216dfee228" translate="yes" xml:space="preserve">
          <source>with 'p' as an argument.</source>
          <target state="translated">con la 'p' como argumento.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
