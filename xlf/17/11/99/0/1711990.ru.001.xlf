<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/1711990">
    <body>
      <group id="1711990">
        <trans-unit id="7e613a7fd1e7d5e6f85e01029fdf991003a2e323" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://isocpp.org/wiki/faq/ctors#init-lists&quot;&gt;You should, in most cases, initialize all member objects in the member initialization list&lt;/a&gt; (however, do note the exceptions listed at the end of the FAQ entry).</source>
          <target state="translated">&lt;a href=&quot;https://isocpp.org/wiki/faq/ctors#init-lists&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В большинстве случаев вам следует инициализировать все объекты-члены в списке инициализации членов&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (однако, обратите внимание на исключения, перечисленные в конце записи FAQ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0affe1016f32ebe788878059fc8f6a0d6e0fcff2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MyClass2&lt;/code&gt; doesn't have a default constructor so it has to be initialized through member initializer list.</source>
          <target state="translated">&lt;code&gt;MyClass2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не имеет конструктора по умолчанию, поэтому его нужно инициализировать через список инициализаторов членов.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0fa11c708f799df07b6fe7753cfc3ade770847aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class Member variables are always initialized in the order in which they are declared in the class.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Переменные-члены класса всегда инициализируются в том порядке, в котором они объявлены в классе.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6add4fbc53e49dcfb16f8b88345c049d16c11f9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Member Assignment:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Назначение участника:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2626806f810bf48f086a62858d2a704dff9a0ace" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Member Initialization:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Инициализация участника:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="09eed7418f9ab3d9eb803cfb772c473cc23d481b" translate="yes" xml:space="preserve">
          <source>A code example:</source>
          <target state="translated">Пример кода:</target>
        </trans-unit>
        <trans-unit id="880601c71d36a994eccfb7ce4ad4fd51a6c30393" translate="yes" xml:space="preserve">
          <source>All other things being equal, your code will run faster if you use initialization lists rather than assignment.</source>
          <target state="translated">При прочих равных условиях,ваш код будет работать быстрее,если вы используете списки инициализации,а не присваивания.</target>
        </trans-unit>
        <trans-unit id="180cb3c011eede67ffe110f2ff78f8224e8ea8dc" translate="yes" xml:space="preserve">
          <source>As you see there is an additional overhead of creation &amp;amp; assignment in the latter, which might be considerable for user defined classes.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Как вы видите, в последнем имеются дополнительные издержки создания и назначения, которые могут быть значительными для пользовательских классов.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ae4863e1b55c5a2c25e012120fa8f7aa48c74fc" translate="yes" xml:space="preserve">
          <source>Base class &lt;code&gt;MyClass&lt;/code&gt; does not have a default constructor, So to initialize its member one will need to use Member Initializer List.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Базовый класс &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyClass&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не имеет конструктора по умолчанию, поэтому для инициализации его члена нужно будет использовать Member Initializer List.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63a748cf820d91dfb1d14d29c01dd52d4c07e9c1" translate="yes" xml:space="preserve">
          <source>Basically, in your case, &lt;code&gt;x&lt;/code&gt; will be initialized with &lt;code&gt;_x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; with &lt;code&gt;_y&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; with &lt;code&gt;_z&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В основном, в вашем случае, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; будет инициализирован с &lt;/font&gt;&lt;/font&gt; &lt;code&gt;_x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;y&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; с &lt;/font&gt;&lt;/font&gt; &lt;code&gt;_y&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;z&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; с &lt;/font&gt;&lt;/font&gt; &lt;code&gt;_z&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7a7b310d2495e484fea1ff460e80d2fdad0204cf" translate="yes" xml:space="preserve">
          <source>Consider these two examples:</source>
          <target state="translated">Рассмотрим эти два примера:</target>
        </trans-unit>
        <trans-unit id="5947803b4e3a9b081b26bdb9af02f24e3aff8f35" translate="yes" xml:space="preserve">
          <source>For an inbuilt (your code example) or POD class members there is no practical overhead.</source>
          <target state="translated">Для встроенного (ваш пример кода)или членов класса POD нет практических накладных расходов.</target>
        </trans-unit>
        <trans-unit id="7b72847121d3d265625d8bf2b51578b60dd777ed" translate="yes" xml:space="preserve">
          <source>For initialization of base class members or</source>
          <target state="translated">Для инициализации членов базового класса или</target>
        </trans-unit>
        <trans-unit id="ddc1f915dfc6e4275e2f889ff9d789e04740f007" translate="yes" xml:space="preserve">
          <source>Given the above it is always a good practice to maintain the same order of members for Member initialization as the order in which they are declared in the class definition. This is because compilers do not warn if the two orders are different but a relatively new user might confuse member Initializer list as the order of initialization and write some code dependent on that.</source>
          <target state="translated">Учитывая вышеизложенное,всегда хорошей практикой является поддержание того же самого порядка членов для инициализации Члена,что и порядок,в котором они объявляются в определении класса.Это связано с тем,что компиляторы не предупреждают,если эти два порядка разнятся,но относительно новый пользователь может запутать список членов Initializer как порядок инициализации и написать какой-нибудь код,зависящий от этого.</target>
        </trans-unit>
        <trans-unit id="3790df37f778ce461ee2b133fb28189aa9b894d5" translate="yes" xml:space="preserve">
          <source>I don't know how you could miss this one, it's pretty basic. That's the syntax for initializing member variables or base class constructors.  It works for plain old data types as well as class objects.</source>
          <target state="translated">Не знаю,как ты можешь это пропустить,это довольно элементарно.Это синтаксис для инициализации переменных-членов или конструкторов базовых классов.Он работает как для простых старых типов данных,так и для объектов классов.</target>
        </trans-unit>
        <trans-unit id="db3a2761f5ab5a4ef0eced07df4683018bca3199" translate="yes" xml:space="preserve">
          <source>I just want to note that the syntax that, as you said, &quot;looks like a constructor call&quot;, is not necessarily a constructor call. In C++ language the &lt;code&gt;()&lt;/code&gt; syntax is just one standard form of &lt;em&gt;initialization syntax&lt;/em&gt;. It is interpreted differently for different types. For class types with user-defined constructor it means one thing (it is indeed a constructor call), for class types without user-defined constructor it means another thing (so called &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/value_initialization&quot;&gt;&lt;strong&gt;&lt;em&gt;value initialization&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; ) for empty &lt;code&gt;()&lt;/code&gt;) and for non-class types it again means something different (since non-class types have no constructors).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я просто хочу отметить, что синтаксис, который, как вы сказали, &amp;laquo;выглядит как вызов конструктора&amp;raquo;, не обязательно является вызовом конструктора. В языке C ++ &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;синтаксис &lt;/font&gt;&lt;/font&gt; &lt;code&gt;()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; является лишь одной из стандартных форм &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;синтаксиса инициализации&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Это интерпретируется по-разному для разных типов. Для типов классов с определяемым пользователем конструктором это означает одно (это действительно вызов конструктора), для типов классов без определяемого пользователем конструктора это означает другое (так называемая &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp/language/value_initialization&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;инициализация значения&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) для empty &lt;/font&gt;&lt;/font&gt; &lt;code&gt;()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) и для не относящихся к классу типов. это снова означает что-то другое (так как не классовые типы не имеют конструкторов).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d4f8139120d4e5b6f293692eeb62c98dded902e2" translate="yes" xml:space="preserve">
          <source>If you use &lt;strong&gt;&lt;em&gt;assignment&lt;/em&gt;&lt;/strong&gt; then the fields will be first initialized with default constructors and then reassigned (via assignment operator) with actual values.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если вы используете &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;присваивание,&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; то поля сначала будут инициализированы конструкторами по умолчанию, а затем переназначены (с помощью оператора присваивания) фактическими значениями.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4c351d217baf85075ad72e3f0aaf960f97f95b8d" translate="yes" xml:space="preserve">
          <source>Important points to Note while using Member Initializer Lists:</source>
          <target state="translated">Важно отметить при использовании списков инициализаторов:</target>
        </trans-unit>
        <trans-unit id="a7edaa552efcdfe234d7e029e132172a0f954dfa" translate="yes" xml:space="preserve">
          <source>In example 1:</source>
          <target state="translated">В примере 1:</target>
        </trans-unit>
        <trans-unit id="ceb343a2f455b8a75b5bd2c0c3cfeca03b83227e" translate="yes" xml:space="preserve">
          <source>In example 2:</source>
          <target state="translated">В примере 2:</target>
        </trans-unit>
        <trans-unit id="6ac34c875da4aeca70449d729ca98a5b2a40d12a" translate="yes" xml:space="preserve">
          <source>In short, Member initialization list does not determine the order of initialization.</source>
          <target state="translated">Короче говоря,список инициализаций участников не определяет порядок инициализации.</target>
        </trans-unit>
        <trans-unit id="9e65ca2b7c2ace33af0e94d035c5832c4cf30d57" translate="yes" xml:space="preserve">
          <source>In the first example, str will be initialized by its no-argument constructor</source>
          <target state="translated">В первом примере,str будет инициализирована своим безымянным конструктором</target>
        </trans-unit>
        <trans-unit id="55ed577fb0966ae0522ac54e43678f540485e57b" translate="yes" xml:space="preserve">
          <source>In your case the data member has type &lt;code&gt;int&lt;/code&gt;. &lt;code&gt;int&lt;/code&gt; is not a class type, so it has no constructor. For type &lt;code&gt;int&lt;/code&gt; this syntax means simply &quot;initialize &lt;code&gt;bar&lt;/code&gt; with the value of &lt;code&gt;num&lt;/code&gt;&quot; and that's it. It is done just like that, directly, no constructors involved, since, once again, &lt;code&gt;int&lt;/code&gt; is not a class type of therefore it can't have any constructors.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В вашем случае элемент данных имеет тип &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не является типом класса, поэтому у него нет конструктора. Для типа &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; этот синтаксис означает просто &amp;laquo;инициализировать &lt;/font&gt;&lt;/font&gt; &lt;code&gt;bar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; со значением &lt;/font&gt;&lt;/font&gt; &lt;code&gt;num&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;raquo; и все. Это делается просто так, напрямую, без участия конструкторов, так как, опять же, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не является типом класса, поэтому он не может иметь никаких конструкторов.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6001cad2b42815ecb51dcec682bd3d238b96ce1b" translate="yes" xml:space="preserve">
          <source>It's a &lt;em&gt;member initialization list&lt;/em&gt;.  You should find information about it in any &lt;a href=&quot;https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list&quot;&gt;good C++ book&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;список инициализации члена&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы должны найти информацию об этом в любой &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;хорошей книге C ++&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f795a937da21ee6744d6cdfa79812d7c84f12c0c" translate="yes" xml:space="preserve">
          <source>It's all about efficiency.</source>
          <target state="translated">Все дело в эффективности.</target>
        </trans-unit>
        <trans-unit id="ea8ebfb20a1664723438a91d0ac1c4f927a3ce70" translate="yes" xml:space="preserve">
          <source>It's an initialization list for the constructor. Instead of default constructing &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; and then assigning them the values received in the parameters, those members will be initialized with those values right off the bat. This may not seem terribly useful for &lt;code&gt;float&lt;/code&gt;s, but it can be quite a timesaver with custom classes that are expensive to construct.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это список инициализации для конструктора. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вместо того, чтобы по умолчанию создавать &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;y&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt; &lt;code&gt;z&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; а затем присваивать им значения, полученные в параметрах, эти члены будут инициализированы с этими значениями сразу. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это может показаться не очень полезным для &lt;/font&gt;&lt;/font&gt; &lt;code&gt;float&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; с &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;плавающей запятой&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , но это может сэкономить время при использовании пользовательских классов, которые стоят дорого в создании.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="61c4bedc7ad1b0462f4a43d5cf2914409a9b6514" translate="yes" xml:space="preserve">
          <source>Not mentioned yet on this thread: since C++11, the member initializer list can use list-initialization  (aka. &quot;uniform initialization&quot;, &quot;braced initialization&quot;):</source>
          <target state="translated">На этой теме еще не упоминалось:начиная с C++11,в списке инициализаторов-участников может использоваться list-initialization (так же известный как &quot;равномерная инициализация&quot;,&quot;сшитая инициализация&quot;):</target>
        </trans-unit>
        <trans-unit id="dcf5e42daec51eb7f8764c8bfdf463e6ff5ceff4" translate="yes" xml:space="preserve">
          <source>Recently I've seen an example like the following:</source>
          <target state="translated">Недавно я видел пример,похожий на следующий:</target>
        </trans-unit>
        <trans-unit id="b932af732e5e21996073c6dbbc9ef6f4f02b7b7c" translate="yes" xml:space="preserve">
          <source>Simply said, it &lt;strong&gt;initializes&lt;/strong&gt; your member &lt;code&gt;bar&lt;/code&gt; to a value &lt;code&gt;num&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Проще говоря, он &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;инициализирует&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вашу &lt;/font&gt;&lt;/font&gt; &lt;code&gt;bar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; член &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;на значение &lt;/font&gt;&lt;/font&gt; &lt;code&gt;num&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab5ce908762849ae0fa009c66f046b08095ef51d" translate="yes" xml:space="preserve">
          <source>That's constructor initialisation.  It is the correct way to initialise members in a class constructor, as it prevents the default constructor being invoked.</source>
          <target state="translated">Это инициализация конструктора.Это правильный способ инициализации членов в конструкторе класса,так как он предотвращает вызов конструктора по умолчанию.</target>
        </trans-unit>
        <trans-unit id="66b048d42e6a3eb9a43bc6d9950d55ff9153c23f" translate="yes" xml:space="preserve">
          <source>The latter is actually equivalent to:</source>
          <target state="translated">Последнее на самом деле эквивалентно:</target>
        </trans-unit>
        <trans-unit id="755c8932e2b5791a3e63356c6600a12413babfc2" translate="yes" xml:space="preserve">
          <source>The other already explained to you that the syntax that you observe is called &quot;constructor initializer list&quot;. This syntax lets you to custom-initialize base subobjects and member subobjects of the class (as opposed to allowing them to default-initialize or to remain uninitialized).</source>
          <target state="translated">Другой уже объяснял вам,что синтаксис,который вы наблюдаете,называется &quot;список инициализаторов конструктора&quot;.Этот синтаксис позволяет вам инициализировать базовые подобъекты и подобъекты-члены класса (в противоположность тому,чтобы позволить им инициализировать по умолчанию или оставаться неинициализированными).</target>
        </trans-unit>
        <trans-unit id="a6f2d7f773eb92a407018d744440a2466c739cd7" translate="yes" xml:space="preserve">
          <source>The takeaway point from the FAQ entry is that,</source>
          <target state="translated">Точка взлета от входа в FAQ,</target>
        </trans-unit>
        <trans-unit id="32fc652b48d905fd3b8d9f3fdb3679d254cd248a" translate="yes" xml:space="preserve">
          <source>There is a significant difference between Initializing a member using Member initializer list and assigning it an value inside the constructor body.</source>
          <target state="translated">Существует существенная разница между инициализацией члена с помощью списка инициализаторов Member и присвоением ему значения внутри тела конструктора.</target>
        </trans-unit>
        <trans-unit id="c8c2868665fe6c6390704b375f2aa729b9f62f88" translate="yes" xml:space="preserve">
          <source>They are &lt;strong&gt;not&lt;/strong&gt; initialized in the order in which they are specified in the Member Initializer List.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Они &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;не&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; инициализируются в том порядке, в котором они указаны в списке инициализаторов элементов.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8f4e030af718c825592a70f61c77350972f7863b" translate="yes" xml:space="preserve">
          <source>This construct is called a &lt;strong&gt;Member Initializer List&lt;/strong&gt; in C++.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Эта конструкция называется &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;списком инициализирующих элементов&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в C ++.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5fa57f50540c7770916fd7d1b857c2b9643f6dc1" translate="yes" xml:space="preserve">
          <source>This is an initialization list. It'll initialize the members before the constructor body is run.
Consider</source>
          <target state="translated">Это список инициализации.Он инициализирует членов до запуска тела конструктора.Рассмотрим .</target>
        </trans-unit>
        <trans-unit id="0ac464d5399e0c8a011ca0211c64d3ce9fe9b1b4" translate="yes" xml:space="preserve">
          <source>This is called an initialization list.  It is a way of initializing class members.  There are benefits to using this instead of simply assigning new values to the members in the body of the constructor, but if you have class members which are &lt;em&gt;constants&lt;/em&gt; or &lt;em&gt;references&lt;/em&gt; they &lt;em&gt;must&lt;/em&gt; be initialized.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это называется списком инициализации. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это способ инициализации учеников. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Есть преимущества в использовании этого, вместо простого присваивания новых значений членам в теле конструктора, но если у вас есть члены класса, которые являются &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;константами&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; или &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ссылками,&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; они &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;должны&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; быть инициализированы.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a6750f4aaeae63e5720e3a68b65e1980f6a1bbc" translate="yes" xml:space="preserve">
          <source>This is not obscure, it's the &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/initializer_list&quot;&gt;C++ initialization list syntax&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это неясно, это &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp/language/initializer_list&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;синтаксис списка инициализации C ++&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="53c1aabc06f6027cf4e5ec9fd20c49a7d15c2b30" translate="yes" xml:space="preserve">
          <source>What does this strange &lt;code&gt;: bar(num)&lt;/code&gt; mean? It somehow seems to initialize the member variable but I've never seen this syntax before. It looks like a function/constructor call but for an &lt;code&gt;int&lt;/code&gt;?  Makes no sense for me. Perhaps someone could enlighten me. And, by the way, are there any other esoteric language features like this, you'll never find in an ordinary C++ book?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Что это странно &lt;/font&gt;&lt;/font&gt; &lt;code&gt;: bar(num)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; означает? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Кажется, что-то инициализирует переменную-член, но я никогда раньше не видел этот синтаксис. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это похоже на вызов функции / конструктора, но для &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Не имеет смысла для меня. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Возможно, кто-то мог бы просветить меня. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;И, кстати, есть ли какие-либо другие особенности эзотерического языка, подобные этой, которые вы никогда не найдете в обычной книге по С ++?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82c7641717ae11ba8d702ebd047eff90f7d6d49b" translate="yes" xml:space="preserve">
          <source>What is the difference between Initializing and Assignment inside a constructor?</source>
          <target state="translated">В чем разница между Инициализацией и Назначением внутри конструктора?</target>
        </trans-unit>
        <trans-unit id="11aeeccb080ea4fb19b9b6094aec75cf3c865822" translate="yes" xml:space="preserve">
          <source>What is this weird colon-member (“ : ”) syntax in the constructor</source>
          <target state="translated">Что это за странный синтаксис члена двоеточия (&quot;:&quot;)в конструкторе</target>
        </trans-unit>
        <trans-unit id="72d60b81e1762c8994f2d868ffbbc8abc0b41996" translate="yes" xml:space="preserve">
          <source>When constructor&amp;rsquo;s parameter name is same as data member(this is not really a MUST)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Когда имя параметра конструктора совпадает с элементом данных (на самом деле это НЕ ДОЛЖНО)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9dc941a8bb728953e774cb706496f3e48243ca02" translate="yes" xml:space="preserve">
          <source>When do you HAVE TO use Member Initializer list?</source>
          <target state="translated">Когда вы должны использовать список Members Initializer?</target>
        </trans-unit>
        <trans-unit id="e0c6c8d417ff6627a0124a08de7883ae7511f3ca" translate="yes" xml:space="preserve">
          <source>When you &lt;strong&gt;&lt;em&gt;initialize&lt;/em&gt;&lt;/strong&gt; fields via Member initializer list the constructors will be called once and the object will be constructed and initialized in one operation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Когда вы &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;инициализируете&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; поля через список инициализатора элемента, конструкторы будут вызываться один раз, а объект будет создан и инициализирован за одну операцию.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ebc3241919665078364a95d52a9165e822dc30ca" translate="yes" xml:space="preserve">
          <source>Wheras in the second example, str will be initialized directly by
calling its constructor</source>
          <target state="translated">Wheras во втором примере,str будет инициализирована непосредственно путем вызова ее конструктора</target>
        </trans-unit>
        <trans-unit id="f4f0ac48cffd6745ff6a32fae3ea98141ca1b17d" translate="yes" xml:space="preserve">
          <source>While the former is equivalent to just:</source>
          <target state="translated">В то время как первая эквивалентна справедливой:</target>
        </trans-unit>
        <trans-unit id="de9d44bf598487e6479a23193a3096783d76ab83" translate="yes" xml:space="preserve">
          <source>You are correct, this is indeed a way to initialize member variables.  I'm not sure that there's much benefit to this, other than clearly expressing that it's an initialization.  Having a &quot;bar=num&quot; inside the code could get moved around, deleted, or misinterpreted much more easily.</source>
          <target state="translated">Вы правы,это действительно способ инициализировать переменные-члены.Я не уверен,что в этом есть большая польза,кроме ясного выражения того,что это инициализация.Наличие &quot;bar=num&quot; внутри кода может намного проще перемещаться,удаляться или неправильно истолковываться.</target>
        </trans-unit>
        <trans-unit id="a0b51ff8c41793d2f3b977e8288cd747edace1ff" translate="yes" xml:space="preserve">
          <source>You will &lt;strong&gt;have(rather forced) to&lt;/strong&gt; use a Member Initializer list if:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы будете &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;вынуждены&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; использовать список инициализаторов участников, если:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="533c067aff470ecf1cf17ea337acd7f17a55966e" translate="yes" xml:space="preserve">
          <source>Your class has a non static const member or</source>
          <target state="translated">Ваш класс имеет нестатический член const или</target>
        </trans-unit>
        <trans-unit id="fb2245c596d643b069e12828278627408eeb08f6" translate="yes" xml:space="preserve">
          <source>Your class has a reference member</source>
          <target state="translated">В вашем классе есть референтный член</target>
        </trans-unit>
        <trans-unit id="e4c1e66d85c1552339e63362828ab9cb1289cf6c" translate="yes" xml:space="preserve">
          <source>Your class member doesn't have a default constructor or</source>
          <target state="translated">Член вашего класса не имеет конструктора по умолчанию или</target>
        </trans-unit>
        <trans-unit id="d17e61782e975aad8a59ebfd95fe42b0b27b1fff" translate="yes" xml:space="preserve">
          <source>before the body of the Foo constructor. Inside the foo constructor, the</source>
          <target state="translated">перед телом конструктора Фу.Внутри конструктора Фу</target>
        </trans-unit>
        <trans-unit id="fe4b03553c2242b7ac87e5d19342918dba0fe01f" translate="yes" xml:space="preserve">
          <source>if the member variable type does not support null initialization or if its a reference (which cannot be null initialized) then you have no choice but to supply an initialization list</source>
          <target state="translated">если тип переменной-членов не поддерживает нулевую инициализацию или если ее ссылка (которая не может быть инициализирована нулем),то у вас нет другого выбора,кроме как предоставить список инициализаций</target>
        </trans-unit>
        <trans-unit id="099996239a56eb00959aaef16cb395d5af7872ab" translate="yes" xml:space="preserve">
          <source>there is another 'benefit'</source>
          <target state="translated">есть ещё одно &quot;преимущество</target>
        </trans-unit>
        <trans-unit id="691a77cd21a31b1b144537311a05b0bb5ff8fd2d" translate="yes" xml:space="preserve">
          <source>vs</source>
          <target state="translated">vs</target>
        </trans-unit>
        <trans-unit id="c7eee21b85191d8de6dded55dbd1cdf406ea62a5" translate="yes" xml:space="preserve">
          <source>which has the same semantics as list-initialization in other contexts.</source>
          <target state="translated">которая имеет такую же семантику,как и в других контекстах.</target>
        </trans-unit>
        <trans-unit id="94cc7ffc6a8d9e66ec197544cce625140bb41602" translate="yes" xml:space="preserve">
          <source>will be called on 'str' as you do   str = p;</source>
          <target state="translated">будет называться 'str',как вы делаете str=p;</target>
        </trans-unit>
        <trans-unit id="3cf1ebb407c1ed531cfe3fe98ecbcd216dfee228" translate="yes" xml:space="preserve">
          <source>with 'p' as an argument.</source>
          <target state="translated">с буквой &quot;п&quot; в качестве аргумента.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
