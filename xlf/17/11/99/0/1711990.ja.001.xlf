<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/1711990">
    <body>
      <group id="1711990">
        <trans-unit id="7e613a7fd1e7d5e6f85e01029fdf991003a2e323" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://isocpp.org/wiki/faq/ctors#init-lists&quot;&gt;You should, in most cases, initialize all member objects in the member initialization list&lt;/a&gt; (however, do note the exceptions listed at the end of the FAQ entry).</source>
          <target state="translated">&lt;a href=&quot;https://isocpp.org/wiki/faq/ctors#init-lists&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ほとんどの場合、メンバー初期化リストのすべてのメンバーオブジェクトを初期化する必要があります&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（ただし、FAQエントリの最後にリストされている例外に注意してください）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0affe1016f32ebe788878059fc8f6a0d6e0fcff2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MyClass2&lt;/code&gt; doesn't have a default constructor so it has to be initialized through member initializer list.</source>
          <target state="translated">&lt;code&gt;MyClass2&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はデフォルトのコンストラクターがないため、メンバー初期化子リストを介して初期化する必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0fa11c708f799df07b6fe7753cfc3ade770847aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class Member variables are always initialized in the order in which they are declared in the class.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスメンバー変数は常に、クラスで宣言された順序で初期化されます。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6add4fbc53e49dcfb16f8b88345c049d16c11f9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Member Assignment:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メンバーの割り当て：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2626806f810bf48f086a62858d2a704dff9a0ace" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Member Initialization:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メンバーの初期化：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="09eed7418f9ab3d9eb803cfb772c473cc23d481b" translate="yes" xml:space="preserve">
          <source>A code example:</source>
          <target state="translated">コード例。</target>
        </trans-unit>
        <trans-unit id="880601c71d36a994eccfb7ce4ad4fd51a6c30393" translate="yes" xml:space="preserve">
          <source>All other things being equal, your code will run faster if you use initialization lists rather than assignment.</source>
          <target state="translated">他のすべてのことは同じですが、代入ではなく初期化リストを使用した方がコードは速く実行されます。</target>
        </trans-unit>
        <trans-unit id="180cb3c011eede67ffe110f2ff78f8224e8ea8dc" translate="yes" xml:space="preserve">
          <source>As you see there is an additional overhead of creation &amp;amp; assignment in the latter, which might be considerable for user defined classes.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ご覧のとおり、後者では作成と割り当てのオーバーヘッドが追加されます。これは、ユーザー定義のクラスではかなりの量になる可能性があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ae4863e1b55c5a2c25e012120fa8f7aa48c74fc" translate="yes" xml:space="preserve">
          <source>Base class &lt;code&gt;MyClass&lt;/code&gt; does not have a default constructor, So to initialize its member one will need to use Member Initializer List.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本クラス&lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyClass&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はデフォルトのコンストラクタがないため、そのメンバーを初期化するには、Member Initializer Listを使用する必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63a748cf820d91dfb1d14d29c01dd52d4c07e9c1" translate="yes" xml:space="preserve">
          <source>Basically, in your case, &lt;code&gt;x&lt;/code&gt; will be initialized with &lt;code&gt;_x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; with &lt;code&gt;_y&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; with &lt;code&gt;_z&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本的に、あなたのケースでは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; が&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で初期化されます&lt;/font&gt;&lt;/font&gt; &lt;code&gt;_x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;y&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;_y&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;z&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;_z&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7a7b310d2495e484fea1ff460e80d2fdad0204cf" translate="yes" xml:space="preserve">
          <source>Consider these two examples:</source>
          <target state="translated">この2つの例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="5947803b4e3a9b081b26bdb9af02f24e3aff8f35" translate="yes" xml:space="preserve">
          <source>For an inbuilt (your code example) or POD class members there is no practical overhead.</source>
          <target state="translated">インビルト(あなたのコード例)やPODクラスのメンバーの場合、実用的なオーバーヘッドはありません。</target>
        </trans-unit>
        <trans-unit id="7b72847121d3d265625d8bf2b51578b60dd777ed" translate="yes" xml:space="preserve">
          <source>For initialization of base class members or</source>
          <target state="translated">基底クラスのメンバの初期化や</target>
        </trans-unit>
        <trans-unit id="ddc1f915dfc6e4275e2f889ff9d789e04740f007" translate="yes" xml:space="preserve">
          <source>Given the above it is always a good practice to maintain the same order of members for Member initialization as the order in which they are declared in the class definition. This is because compilers do not warn if the two orders are different but a relatively new user might confuse member Initializer list as the order of initialization and write some code dependent on that.</source>
          <target state="translated">上記のことを考えると、メンバの初期化のためのメンバの順序は、クラス定義で宣言されている順序と同じにしておくことは常に良い習慣です。これは、コンパイラは2つの順序が異なっていても警告しないからですが、比較的新しいユーザがメンバーの初期化リストを初期化の順序と混同してしまい、それに依存したコードを書いてしまう可能性があるからです。</target>
        </trans-unit>
        <trans-unit id="3790df37f778ce461ee2b133fb28189aa9b894d5" translate="yes" xml:space="preserve">
          <source>I don't know how you could miss this one, it's pretty basic. That's the syntax for initializing member variables or base class constructors.  It works for plain old data types as well as class objects.</source>
          <target state="translated">これを見逃すわけがない、かなり基本的なことです。これはメンバ変数や基底クラスのコンストラクタを初期化するための構文です。これはクラスオブジェクトだけでなく、古いデータ型でも動作します。</target>
        </trans-unit>
        <trans-unit id="db3a2761f5ab5a4ef0eced07df4683018bca3199" translate="yes" xml:space="preserve">
          <source>I just want to note that the syntax that, as you said, &quot;looks like a constructor call&quot;, is not necessarily a constructor call. In C++ language the &lt;code&gt;()&lt;/code&gt; syntax is just one standard form of &lt;em&gt;initialization syntax&lt;/em&gt;. It is interpreted differently for different types. For class types with user-defined constructor it means one thing (it is indeed a constructor call), for class types without user-defined constructor it means another thing (so called &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/value_initialization&quot;&gt;&lt;strong&gt;&lt;em&gt;value initialization&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; ) for empty &lt;code&gt;()&lt;/code&gt;) and for non-class types it again means something different (since non-class types have no constructors).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたが言ったように、「コンストラクター呼び出しのように見える」構文は、必ずしもコンストラクター呼び出しではないことに注意したいだけです。 C ++言語では、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構文は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初期化構文の&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 1つの標準形式にすぎません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。タイプによって解釈が異なります。ユーザー定義コンストラクターを持つクラス型の場合、これは1つのこと（実際にはコンストラクター呼び出し）を意味し、ユーザー定義コンストラクターのないクラス型の場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、空&lt;/font&gt; &lt;code&gt;()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;）と非クラス型の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;別のこと（いわゆる&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp/language/value_initialization&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値の初期化&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;意味し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ますこれもまた別のことを意味します（非クラス型にはコンストラクタがないため）。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d4f8139120d4e5b6f293692eeb62c98dded902e2" translate="yes" xml:space="preserve">
          <source>If you use &lt;strong&gt;&lt;em&gt;assignment&lt;/em&gt;&lt;/strong&gt; then the fields will be first initialized with default constructors and then reassigned (via assignment operator) with actual values.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;割り当て&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用する場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、フィールドは最初にデフォルトのコンストラクターで初期化され、次に実際の値で（割り当て演算子を介して）再割り当てされます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4c351d217baf85075ad72e3f0aaf960f97f95b8d" translate="yes" xml:space="preserve">
          <source>Important points to Note while using Member Initializer Lists:</source>
          <target state="translated">メンバー初期化リストを使用する際の注意点</target>
        </trans-unit>
        <trans-unit id="a7edaa552efcdfe234d7e029e132172a0f954dfa" translate="yes" xml:space="preserve">
          <source>In example 1:</source>
          <target state="translated">実施例1では</target>
        </trans-unit>
        <trans-unit id="ceb343a2f455b8a75b5bd2c0c3cfeca03b83227e" translate="yes" xml:space="preserve">
          <source>In example 2:</source>
          <target state="translated">例2では</target>
        </trans-unit>
        <trans-unit id="6ac34c875da4aeca70449d729ca98a5b2a40d12a" translate="yes" xml:space="preserve">
          <source>In short, Member initialization list does not determine the order of initialization.</source>
          <target state="translated">つまり、メンバーの初期化リストは、初期化の順番を決定しません。</target>
        </trans-unit>
        <trans-unit id="9e65ca2b7c2ace33af0e94d035c5832c4cf30d57" translate="yes" xml:space="preserve">
          <source>In the first example, str will be initialized by its no-argument constructor</source>
          <target state="translated">最初の例では、str は引数なしのコンストラクタで初期化されます。</target>
        </trans-unit>
        <trans-unit id="55ed577fb0966ae0522ac54e43678f540485e57b" translate="yes" xml:space="preserve">
          <source>In your case the data member has type &lt;code&gt;int&lt;/code&gt;. &lt;code&gt;int&lt;/code&gt; is not a class type, so it has no constructor. For type &lt;code&gt;int&lt;/code&gt; this syntax means simply &quot;initialize &lt;code&gt;bar&lt;/code&gt; with the value of &lt;code&gt;num&lt;/code&gt;&quot; and that's it. It is done just like that, directly, no constructors involved, since, once again, &lt;code&gt;int&lt;/code&gt; is not a class type of therefore it can't have any constructors.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたの場合、データメンバーの型は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はクラス型ではないため、コンストラクタはありません。タイプ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; の場合、&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この構文は単に「&lt;/font&gt; &lt;code&gt;num&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;の値で&lt;/font&gt;&lt;/font&gt; &lt;code&gt;bar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初期化する」ことを意味&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それだけです。&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; はの&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラス型ではないため、コンストラクターを含めることはできないため、これは、その&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ように直接行われ、関係するコンストラクター&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はありません。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6001cad2b42815ecb51dcec682bd3d238b96ce1b" translate="yes" xml:space="preserve">
          <source>It's a &lt;em&gt;member initialization list&lt;/em&gt;.  You should find information about it in any &lt;a href=&quot;https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list&quot;&gt;good C++ book&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それはだ&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メンバー初期化リスト&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これに関する情報は、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;優れたC ++の本にあり&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f795a937da21ee6744d6cdfa79812d7c84f12c0c" translate="yes" xml:space="preserve">
          <source>It's all about efficiency.</source>
          <target state="translated">全ては効率化のためです。</target>
        </trans-unit>
        <trans-unit id="ea8ebfb20a1664723438a91d0ac1c4f927a3ce70" translate="yes" xml:space="preserve">
          <source>It's an initialization list for the constructor. Instead of default constructing &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; and then assigning them the values received in the parameters, those members will be initialized with those values right off the bat. This may not seem terribly useful for &lt;code&gt;float&lt;/code&gt;s, but it can be quite a timesaver with custom classes that are expensive to construct.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、コンストラクターの初期化リストです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デフォルトで&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;y&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;z&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を作成し、パラメーターで受け取った値を割り当てる&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、これらのメンバーはすぐにそれらの値で初期化されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;float&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合はそれほど有用ではないように見えるかもしれません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が、構築にコストがかかるカスタムクラスを使用すると、かなり時間を節約できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="61c4bedc7ad1b0462f4a43d5cf2914409a9b6514" translate="yes" xml:space="preserve">
          <source>Not mentioned yet on this thread: since C++11, the member initializer list can use list-initialization  (aka. &quot;uniform initialization&quot;, &quot;braced initialization&quot;):</source>
          <target state="translated">このスレッドではまだ触れられていませんが、C++11 以降、メンバーの初期化リストではリスト初期化 (別名 &quot;一様初期化&quot;、&quot;ブレース付き初期化&quot;)を使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="dcf5e42daec51eb7f8764c8bfdf463e6ff5ceff4" translate="yes" xml:space="preserve">
          <source>Recently I've seen an example like the following:</source>
          <target state="translated">最近では以下のような例を見かけるようになりました。</target>
        </trans-unit>
        <trans-unit id="b932af732e5e21996073c6dbbc9ef6f4f02b7b7c" translate="yes" xml:space="preserve">
          <source>Simply said, it &lt;strong&gt;initializes&lt;/strong&gt; your member &lt;code&gt;bar&lt;/code&gt; to a value &lt;code&gt;num&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;簡単に言うと、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メンバー&lt;/font&gt; &lt;code&gt;bar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を値&lt;/font&gt; &lt;code&gt;num&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初期化し&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab5ce908762849ae0fa009c66f046b08095ef51d" translate="yes" xml:space="preserve">
          <source>That's constructor initialisation.  It is the correct way to initialise members in a class constructor, as it prevents the default constructor being invoked.</source>
          <target state="translated">これがコンストラクタの初期化です。デフォルトのコンストラクタが呼び出されないようにするため、クラスのコンストラクタでメンバーを初期化するのが正しい方法です。</target>
        </trans-unit>
        <trans-unit id="66b048d42e6a3eb9a43bc6d9950d55ff9153c23f" translate="yes" xml:space="preserve">
          <source>The latter is actually equivalent to:</source>
          <target state="translated">後者は実はこれに相当します。</target>
        </trans-unit>
        <trans-unit id="755c8932e2b5791a3e63356c6600a12413babfc2" translate="yes" xml:space="preserve">
          <source>The other already explained to you that the syntax that you observe is called &quot;constructor initializer list&quot;. This syntax lets you to custom-initialize base subobjects and member subobjects of the class (as opposed to allowing them to default-initialize or to remain uninitialized).</source>
          <target state="translated">他の方がすでに説明したように、あなたが観察している構文は「コンストラクタの初期化リスト」と呼ばれるものです。この構文では、クラスのベースサブオブジェクトとメンバサブオブジェクトをカスタム初期化することができます (デフォルト初期化や未初期化のままにすることを許可するのとは対照的です)。</target>
        </trans-unit>
        <trans-unit id="a6f2d7f773eb92a407018d744440a2466c739cd7" translate="yes" xml:space="preserve">
          <source>The takeaway point from the FAQ entry is that,</source>
          <target state="translated">よくある質問のエントリーからのテイクアウェイポイントは、それです。</target>
        </trans-unit>
        <trans-unit id="32fc652b48d905fd3b8d9f3fdb3679d254cd248a" translate="yes" xml:space="preserve">
          <source>There is a significant difference between Initializing a member using Member initializer list and assigning it an value inside the constructor body.</source>
          <target state="translated">メンバーの初期化リストを使ってメンバーを初期化するのと、コンストラクタのボディ内で値を代入するのとでは大きな違いがあります。</target>
        </trans-unit>
        <trans-unit id="c8c2868665fe6c6390704b375f2aa729b9f62f88" translate="yes" xml:space="preserve">
          <source>They are &lt;strong&gt;not&lt;/strong&gt; initialized in the order in which they are specified in the Member Initializer List.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、メンバー初期化リストで指定された順序で初期化され&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8f4e030af718c825592a70f61c77350972f7863b" translate="yes" xml:space="preserve">
          <source>This construct is called a &lt;strong&gt;Member Initializer List&lt;/strong&gt; in C++.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この構造は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、C ++では&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メンバー初期化リスト&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼ばれ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5fa57f50540c7770916fd7d1b857c2b9643f6dc1" translate="yes" xml:space="preserve">
          <source>This is an initialization list. It'll initialize the members before the constructor body is run.
Consider</source>
          <target state="translated">これは初期化リストです。コンストラクタ本体が実行される前にメンバーを初期化します。次のように考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="0ac464d5399e0c8a011ca0211c64d3ce9fe9b1b4" translate="yes" xml:space="preserve">
          <source>This is called an initialization list.  It is a way of initializing class members.  There are benefits to using this instead of simply assigning new values to the members in the body of the constructor, but if you have class members which are &lt;em&gt;constants&lt;/em&gt; or &lt;em&gt;references&lt;/em&gt; they &lt;em&gt;must&lt;/em&gt; be initialized.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは初期化リストと呼ばれます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスメンバーを初期化する方法です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンストラクターの本体のメンバーに新しい値を単に割り当てる代わりに、これを使用する利点がありますが、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;定数&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照で&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あるクラスメンバーがある場合&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、初期化&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必要&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a6750f4aaeae63e5720e3a68b65e1980f6a1bbc" translate="yes" xml:space="preserve">
          <source>This is not obscure, it's the &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/initializer_list&quot;&gt;C++ initialization list syntax&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは不明瞭ではありません&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp/language/initializer_list&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。C++初期化リストの構文です&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="53c1aabc06f6027cf4e5ec9fd20c49a7d15c2b30" translate="yes" xml:space="preserve">
          <source>What does this strange &lt;code&gt;: bar(num)&lt;/code&gt; mean? It somehow seems to initialize the member variable but I've never seen this syntax before. It looks like a function/constructor call but for an &lt;code&gt;int&lt;/code&gt;?  Makes no sense for me. Perhaps someone could enlighten me. And, by the way, are there any other esoteric language features like this, you'll never find in an ordinary C++ book?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;this strange &lt;/font&gt;&lt;/font&gt; &lt;code&gt;: bar(num)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どういう意味ですか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それはどういうわけかメンバー変数を初期化するようですが、私はこれまでこの構文を見たことがありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数/コンストラクター呼び出しのように見えますが、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; の場合&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ですか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私には意味がありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;多分誰かが私を啓発することができました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして、ところで、このような他の難解な言語機能はありますか？通常のC ++の本では決して見つかりませんか？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82c7641717ae11ba8d702ebd047eff90f7d6d49b" translate="yes" xml:space="preserve">
          <source>What is the difference between Initializing and Assignment inside a constructor?</source>
          <target state="translated">コンストラクタ内での初期化と代入の違いは何ですか?</target>
        </trans-unit>
        <trans-unit id="11aeeccb080ea4fb19b9b6094aec75cf3c865822" translate="yes" xml:space="preserve">
          <source>What is this weird colon-member (“ : ”) syntax in the constructor</source>
          <target state="translated">コンストラクタ内のこの奇妙なコロンメンバー(&quot;:&quot;)構文は何ですか?</target>
        </trans-unit>
        <trans-unit id="72d60b81e1762c8994f2d868ffbbc8abc0b41996" translate="yes" xml:space="preserve">
          <source>When constructor&amp;rsquo;s parameter name is same as data member(this is not really a MUST)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンストラクターのパラメーター名がデータメンバーと同じである場合（これは実際には必須ではありません）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9dc941a8bb728953e774cb706496f3e48243ca02" translate="yes" xml:space="preserve">
          <source>When do you HAVE TO use Member Initializer list?</source>
          <target state="translated">メンバーの初期化リストを使用しなければならないのはいつですか?</target>
        </trans-unit>
        <trans-unit id="e0c6c8d417ff6627a0124a08de7883ae7511f3ca" translate="yes" xml:space="preserve">
          <source>When you &lt;strong&gt;&lt;em&gt;initialize&lt;/em&gt;&lt;/strong&gt; fields via Member initializer list the constructors will be called once and the object will be constructed and initialized in one operation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたはときに&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初期化&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リスト初期化子部材を介してフィールドをコンストラクタは一度呼び出され、オブジェクトが構築され、一回の操作で初期化されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ebc3241919665078364a95d52a9165e822dc30ca" translate="yes" xml:space="preserve">
          <source>Wheras in the second example, str will be initialized directly by
calling its constructor</source>
          <target state="translated">2 番目の例では、str はコンストラクタを呼び出すことで直接初期化されます。</target>
        </trans-unit>
        <trans-unit id="f4f0ac48cffd6745ff6a32fae3ea98141ca1b17d" translate="yes" xml:space="preserve">
          <source>While the former is equivalent to just:</source>
          <target state="translated">前者がジャストに相当するのに対し</target>
        </trans-unit>
        <trans-unit id="de9d44bf598487e6479a23193a3096783d76ab83" translate="yes" xml:space="preserve">
          <source>You are correct, this is indeed a way to initialize member variables.  I'm not sure that there's much benefit to this, other than clearly expressing that it's an initialization.  Having a &quot;bar=num&quot; inside the code could get moved around, deleted, or misinterpreted much more easily.</source>
          <target state="translated">おっしゃる通り、これは確かにメンバ変数を初期化する方法です。初期化であることを明確に表現する以外に、これにはあまりメリットがないと思います。コードの中に &quot;bar=num&quot; があると、移動したり、削除したり、誤解されたりする可能性があります。</target>
        </trans-unit>
        <trans-unit id="a0b51ff8c41793d2f3b977e8288cd747edace1ff" translate="yes" xml:space="preserve">
          <source>You will &lt;strong&gt;have(rather forced) to&lt;/strong&gt; use a Member Initializer list if:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下の場合&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、（むしろ強制的に）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メンバー初期化リスト&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用する必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="533c067aff470ecf1cf17ea337acd7f17a55966e" translate="yes" xml:space="preserve">
          <source>Your class has a non static const member or</source>
          <target state="translated">あなたのクラスには、静的ではない const メンバや</target>
        </trans-unit>
        <trans-unit id="fb2245c596d643b069e12828278627408eeb08f6" translate="yes" xml:space="preserve">
          <source>Your class has a reference member</source>
          <target state="translated">あなたのクラスには参照メンバがあります。</target>
        </trans-unit>
        <trans-unit id="e4c1e66d85c1552339e63362828ab9cb1289cf6c" translate="yes" xml:space="preserve">
          <source>Your class member doesn't have a default constructor or</source>
          <target state="translated">あなたのクラスのメンバにはデフォルトのコンストラクタや</target>
        </trans-unit>
        <trans-unit id="d17e61782e975aad8a59ebfd95fe42b0b27b1fff" translate="yes" xml:space="preserve">
          <source>before the body of the Foo constructor. Inside the foo constructor, the</source>
          <target state="translated">を Foo コンストラクタのボディの前に配置します。foo コンストラクタの内部では</target>
        </trans-unit>
        <trans-unit id="fe4b03553c2242b7ac87e5d19342918dba0fe01f" translate="yes" xml:space="preserve">
          <source>if the member variable type does not support null initialization or if its a reference (which cannot be null initialized) then you have no choice but to supply an initialization list</source>
          <target state="translated">メンバ変数の型がヌル初期化をサポートしていない場合や、参照 (ヌル初期化できない)の場合は、初期化リストを指定するしかありません。</target>
        </trans-unit>
        <trans-unit id="099996239a56eb00959aaef16cb395d5af7872ab" translate="yes" xml:space="preserve">
          <source>there is another 'benefit'</source>
          <target state="translated">他にもメリットがある</target>
        </trans-unit>
        <trans-unit id="691a77cd21a31b1b144537311a05b0bb5ff8fd2d" translate="yes" xml:space="preserve">
          <source>vs</source>
          <target state="translated">vs</target>
        </trans-unit>
        <trans-unit id="c7eee21b85191d8de6dded55dbd1cdf406ea62a5" translate="yes" xml:space="preserve">
          <source>which has the same semantics as list-initialization in other contexts.</source>
          <target state="translated">は、他の文脈でのリスト初期化と同じセマンティクスを持っています。</target>
        </trans-unit>
        <trans-unit id="94cc7ffc6a8d9e66ec197544cce625140bb41602" translate="yes" xml:space="preserve">
          <source>will be called on 'str' as you do   str = p;</source>
          <target state="translated">は str=p と同様に str' で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3cf1ebb407c1ed531cfe3fe98ecbcd216dfee228" translate="yes" xml:space="preserve">
          <source>with 'p' as an argument.</source>
          <target state="translated">p'を引数にして</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
