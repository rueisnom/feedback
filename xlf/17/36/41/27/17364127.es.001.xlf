<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/17364127">
    <body>
      <group id="17364127">
        <trans-unit id="64c134d03b9bef7a1b2c4b1cc5a323435009edc5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.wikipedia.org/wiki/Schwartzian_transform&quot;&gt;The Schwartzian transform&lt;/a&gt;, also referred to as the decorate-sort-undecorate idiom, effects a stable sort with an inherently unstable sorting algorithm.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Schwartzian_transform&quot;&gt;La transformaci&amp;oacute;n de Schwartz&lt;/a&gt; , tambi&amp;eacute;n conocida como modismo decorar-ordenar-decorar, produce un ordenamiento estable con un algoritmo de ordenamiento inherentemente inestable.</target>
        </trans-unit>
        <trans-unit id="ec0b9d91e8865701f4b5b4d7b036cf124aafa4d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sort&lt;/code&gt; sorts by reference and does not return anything useful!</source>
          <target state="translated">&lt;code&gt;sort&lt;/code&gt; ordena por referencia y no devuelve nada &amp;uacute;til!</target>
        </trans-unit>
        <trans-unit id="5acc8ee181e8da0ea9d9be45f707be213fefa4db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strcmp&lt;/code&gt; does exactly what's expected of &lt;code&gt;cmp&lt;/code&gt; here, it returns &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;strcmp&lt;/code&gt; hace exactamente lo que se espera de &lt;code&gt;cmp&lt;/code&gt; aqu&amp;iacute;, devuelve &lt;code&gt;-1&lt;/code&gt; , &lt;code&gt;0&lt;/code&gt; o &lt;code&gt;1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6250fe13bd2141652473bccea20d7a3edc21534a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;usort&lt;/code&gt; will take two items from the array and call your &lt;code&gt;cmp&lt;/code&gt; function with them. So &lt;code&gt;cmp()&lt;/code&gt; will be called with &lt;code&gt;$a&lt;/code&gt; as &lt;code&gt;array('foo' =&amp;gt; 'bar', 'baz' =&amp;gt; 42)&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; as another &lt;code&gt;array('foo' =&amp;gt; ..., 'baz' =&amp;gt; ...)&lt;/code&gt;. The function then returns to &lt;code&gt;usort&lt;/code&gt; which of the values was larger or whether they were equal. &lt;code&gt;usort&lt;/code&gt; repeats this process passing different values for &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; until the array is sorted. The &lt;code&gt;cmp&lt;/code&gt; function will be called many times, &lt;em&gt;at least&lt;/em&gt; as many times as there are values in &lt;code&gt;$array&lt;/code&gt;, with different combinations of values for &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; every time.</source>
          <target state="translated">&lt;code&gt;usort&lt;/code&gt; tomar&amp;aacute; dos elementos de la matriz y llamar&amp;aacute; a su funci&amp;oacute;n &lt;code&gt;cmp&lt;/code&gt; con ellos. Entonces se llamar&amp;aacute; a &lt;code&gt;cmp()&lt;/code&gt; con &lt;code&gt;$a&lt;/code&gt; como &lt;code&gt;array('foo' =&amp;gt; 'bar', 'baz' =&amp;gt; 42)&lt;/code&gt; y &lt;code&gt;$b&lt;/code&gt; como otra &lt;code&gt;array('foo' =&amp;gt; ..., 'baz' =&amp;gt; ...)&lt;/code&gt; La funci&amp;oacute;n luego vuelve a &lt;code&gt;usort&lt;/code&gt; cu&amp;aacute;l de los valores era mayor o si eran iguales. &lt;code&gt;usort&lt;/code&gt; repite este proceso pasando valores diferentes para &lt;code&gt;$a&lt;/code&gt; y &lt;code&gt;$b&lt;/code&gt; hasta que se ordena la matriz. La funci&amp;oacute;n &lt;code&gt;cmp&lt;/code&gt; se llamar&amp;aacute; muchas veces, &lt;em&gt;al menos&lt;/em&gt; tantas veces como haya valores en &lt;code&gt;$array&lt;/code&gt; , con diferentes combinaciones de valores para &lt;code&gt;$a&lt;/code&gt; y &lt;code&gt;$b&lt;/code&gt; cada vez.</target>
        </trans-unit>
        <trans-unit id="91a3fac04b5043f66c638448a2ec4a9d40256c47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Basic sorting&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Clasificaci&amp;oacute;n b&amp;aacute;sica&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ae5cef9d3d93e404cd7eaf3cebb98381606bb57f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Multidimensional sort by key value&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Clasificaci&amp;oacute;n multidimensional por valor clave&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ad87ca1f0b6cc5122ffd4adf3852faabfb4606d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sorting array of objects&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ordenar una matriz de objetos&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d54d56ae70bc0bd717365af26342ff7f0609c18" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sorting by function result&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ordenar por resultado de funci&amp;oacute;n&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="442b02603b1b00edd73e6ecb47de346ad50a30a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sorting multidimensional array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ordenar una matriz multidimensional&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7427550bbfea3e00b1744c697847bdfdc2887d54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sorting with a comparison function&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ordenar con una funci&amp;oacute;n de comparaci&amp;oacute;n&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e21f70118d196d40f3aca759ed5d74ff5bb9753d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Test case:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Caso de prueba:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5043ab6424dd981758b046a437b0a3d11f0fac39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Schwartzian transform&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;La transformaci&amp;oacute;n de Schwartz&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c570d11b81351591dc82387e9c2d0e5c99eed9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The sort wasn't stable!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;iexcl;El tipo no era estable!&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ae6f075d81fe91ec85a2cda94e88595f84602fb7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What about reuse?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;iquest;Qu&amp;eacute; pasa con la reutilizaci&amp;oacute;n?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d6153e439d266c625b80b0798a43006194091e98" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;* developed by me, see readme for more details and comparison with other LINQ ports&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;* desarrollado por m&amp;iacute;, consulte el archivo L&amp;eacute;ame para obtener m&amp;aacute;s detalles y compararlo con otros puertos LINQ&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="f9df68a046eeab006969fe2d05597fc43aedc367" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;If you have more common cases, feel free to edit this answer.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;Si tiene casos m&amp;aacute;s comunes, no dude en editar esta respuesta.&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="d0a564f5b4042652c7506a0e980220e88741b88a" translate="yes" xml:space="preserve">
          <source>A shortcut for the first string comparison version:</source>
          <target state="translated">Un atajo para la primera versión de comparación de cuerdas:</target>
        </trans-unit>
        <trans-unit id="1d43617dc0b5a021c31bb1e8464713303a5a922c" translate="yes" xml:space="preserve">
          <source>Afterwards, we undecorate:</source>
          <target state="translated">Después de eso,desecamos:</target>
        </trans-unit>
        <trans-unit id="7931945cc2816f5241e83f79777cd3649fe7a700" translate="yes" xml:space="preserve">
          <source>Again, they only differ in whether they keep key-value associations and sort by values or keys. Read their documentation for details.</source>
          <target state="translated">Una vez más,sólo difieren en si mantienen asociaciones clave-valor y clasifican por valores o claves.Lea su documentación para más detalles.</target>
        </trans-unit>
        <trans-unit id="a70cd3b3cb5f9b9f666113d7269e0526e688db81" translate="yes" xml:space="preserve">
          <source>All you did was define a custom way to compare two items, that's all you need. That works with all sorts of values.</source>
          <target state="translated">Todo lo que hiciste fue definir una forma personalizada de comparar dos artículos,eso es todo lo que necesitas.Eso funciona con todo tipo de valores.</target>
        </trans-unit>
        <trans-unit id="7e5e4131293f07cab8ee6d2fcb5a44fee49f9403" translate="yes" xml:space="preserve">
          <source>Also for all of the above, to switch between ascending and descending order simply swap the &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; arguments around. E.g.:</source>
          <target state="translated">Tambi&amp;eacute;n para todo lo anterior, para cambiar entre orden ascendente y descendente, simplemente intercambie los argumentos &lt;code&gt;$a&lt;/code&gt; y &lt;code&gt;$b&lt;/code&gt; . P.ej:</target>
        </trans-unit>
        <trans-unit id="b9601f704b51bebf86466d306bf841c6e4c693eb" translate="yes" xml:space="preserve">
          <source>Also see &lt;a href=&quot;https://stackoverflow.com/a/22812695/476&quot;&gt;this very neat shorthand version&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/a/22829326/476&quot;&gt;how to create such a comparison function dynamically for an arbitrary number of keys&lt;/a&gt;.</source>
          <target state="translated">Vea tambi&amp;eacute;n &lt;a href=&quot;https://stackoverflow.com/a/22812695/476&quot;&gt;esta versi&amp;oacute;n abreviada muy ordenada&lt;/a&gt; y &lt;a href=&quot;https://stackoverflow.com/a/22829326/476&quot;&gt;c&amp;oacute;mo crear una funci&amp;oacute;n de comparaci&amp;oacute;n de este tipo din&amp;aacute;micamente para un n&amp;uacute;mero arbitrario de teclas&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8716dd3e8af6710d5fdaa991141a80734a184f4a" translate="yes" xml:space="preserve">
          <source>And now you want to sort on the first letter only:</source>
          <target state="translated">Y ahora quieres clasificar sólo la primera letra:</target>
        </trans-unit>
        <trans-unit id="ece93d1b3c1ff5290fd30d672442002e929ec257" translate="yes" xml:space="preserve">
          <source>And then there's the peculiar &lt;a href=&quot;http://php.net/array_multisort&quot;&gt;&lt;code&gt;array_multisort&lt;/code&gt;&lt;/a&gt;, which lets you sort one array based on another:</source>
          <target state="translated">Y luego est&amp;aacute; el peculiar &lt;a href=&quot;http://php.net/array_multisort&quot;&gt; &lt;code&gt;array_multisort&lt;/code&gt; &lt;/a&gt; , que le permite ordenar una matriz en funci&amp;oacute;n de otra:</target>
        </trans-unit>
        <trans-unit id="a7272763986e00b04cd352962090c6aeb7a8abd7" translate="yes" xml:space="preserve">
          <source>Applicable sort functions:</source>
          <target state="translated">Funciones de clasificación aplicables:</target>
        </trans-unit>
        <trans-unit id="1f5fbafcc6b2be3e4003214daaf54304ae710e57" translate="yes" xml:space="preserve">
          <source>As of PHP 5.3 with closures it is also possible to use a closure to determine the order of your sort.</source>
          <target state="translated">A partir de PHP 5.3 con cierres también es posible utilizar un cierre para determinar el orden de su clase.</target>
        </trans-unit>
        <trans-unit id="a26da193435c50e2c23ef2300be7cff7d23086bf" translate="yes" xml:space="preserve">
          <source>As of PHP 5.5.0 you can use &lt;code&gt;array_column&lt;/code&gt; to extract a column from a multi dimensional array and sort the array on that column:</source>
          <target state="translated">A partir de PHP 5.5.0, puede usar &lt;code&gt;array_column&lt;/code&gt; para extraer una columna de una matriz multidimensional y ordenar la matriz en esa columna:</target>
        </trans-unit>
        <trans-unit id="3aa88f9496d79e65e1268bd5cd94428456942d7d" translate="yes" xml:space="preserve">
          <source>As of PHP 7.0.0 you can also extract properties from an array of objects.</source>
          <target state="translated">A partir de PHP 7.0.0 también se pueden extraer propiedades de un conjunto de objetos.</target>
        </trans-unit>
        <trans-unit id="3a6c74b1fb6f77c435e7654b0a2bb753b7036c67" translate="yes" xml:space="preserve">
          <source>At your own discretion, from PHP7.4 you can use arrow syntax with these anonymous functions.  &lt;a href=&quot;https://3v4l.org/N5hs1&quot;&gt;Same script with arrow syntax&lt;/a&gt;.</source>
          <target state="translated">A su discreci&amp;oacute;n, desde PHP7.4 puede usar la sintaxis de flecha con estas funciones an&amp;oacute;nimas. &lt;a href=&quot;https://3v4l.org/N5hs1&quot;&gt;El mismo script con sintaxis de flecha&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c3481f742ff766b292ff10b811189b66a6a8a188" translate="yes" xml:space="preserve">
          <source>Basic one dimensional arrays</source>
          <target state="translated">Matrices unidimensionales básicas</target>
        </trans-unit>
        <trans-unit id="1c0f6078f43ed59ef9e69be5b2d9b8ba776052ee" translate="yes" xml:space="preserve">
          <source>Basic one-dimensional arrays; Incl. Multidimensional arrays, incl. arrays of objects; Incl. Sorting one array based on another</source>
          <target state="translated">Matrices unidimensionales básicas;incl.Matrices multidimensionales,incl.matrices de objetos;incl.Clasificación de una matriz basada en otra</target>
        </trans-unit>
        <trans-unit id="7a9564635844dbb13c650e09e6dca78deee82d44" translate="yes" xml:space="preserve">
          <source>Bubble Sort</source>
          <target state="translated">Bubble Sort</target>
        </trans-unit>
        <trans-unit id="0ee0df1fe84ba4f23bf4a4787e7f2ab939905d5b" translate="yes" xml:space="preserve">
          <source>Bubble sort, sometimes incorrectly referred to as sinking sort, is a simple sorting algorithm that works by repeatedly stepping through the list to be sorted, comparing each pair of adjacent items and swapping them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted. The algorithm gets its name from the way smaller elements &quot;bubble&quot; to the top of the list. Because it only uses comparisons to operate on elements, it is a comparison sort. Although the algorithm is simple, most of the other sorting algorithms are more efficient for large lists.</source>
          <target state="translated">La clasificación de burbujas,a veces incorrectamente llamada clasificación de hundimiento,es un simple algoritmo de clasificación que funciona pasando repetidamente por la lista a clasificar,comparando cada par de elementos adyacentes e intercambiándolos si están en el orden incorrecto.El paso a través de la lista se repite hasta que no se necesitan intercambios,lo que indica que la lista está clasificada.El algoritmo obtiene su nombre de la forma en que los elementos más pequeños &quot;burbujan&quot; al principio de la lista.Debido a que sólo utiliza comparaciones para operar en los elementos,es un tipo de comparación.Aunque el algoritmo es simple,la mayoría de los otros algoritmos de clasificación son más eficientes para las listas grandes.</target>
        </trans-unit>
        <trans-unit id="3f5228c2bb37ea03d02a48ced721ff6fce42582f" translate="yes" xml:space="preserve">
          <source>By the way, this works on any value, the values don't have to be complex arrays. If you have a custom comparison you want to do, you can do it on a simple array of numbers too.</source>
          <target state="translated">Por cierto,esto funciona con cualquier valor,los valores no tienen que ser arreglos complejos.Si tienes una comparación personalizada que quieres hacer,también puedes hacerlo en un simple arreglo de números.</target>
        </trans-unit>
        <trans-unit id="1f7b5e3a07e4aa10794b25b9eb1b333d19a93959" translate="yes" xml:space="preserve">
          <source>Comb sort</source>
          <target state="translated">Tipo de peine</target>
        </trans-unit>
        <trans-unit id="2a88d28be7a721a09c87fbc18b87669fb817bf11" translate="yes" xml:space="preserve">
          <source>Comb sort is a relatively simple sorting algorithm originally designed by Wlodzimierz Dobosiewicz in 1980. Later it was rediscovered by Stephen Lacey and Richard Box in 1991. Comb sort improves on bubble sort.</source>
          <target state="translated">Comb sort sort es un algoritmo de clasificación relativamente simple diseñado originalmente por Wlodzimierz Dobosiewicz en 1980.Más tarde fue redescubierto por Stephen Lacey y Richard Box en 1991.Comb sort mejora la clasificación por burbujas.</target>
        </trans-unit>
        <trans-unit id="646e0b865c714a7aff37ecc033eed142b2c958be" translate="yes" xml:space="preserve">
          <source>Comparisons can be further customized by passing a callback as a second argument, for example:</source>
          <target state="translated">Las comparaciones pueden personalizarse aún más pasando una llamada como segundo argumento,por ejemplo:</target>
        </trans-unit>
        <trans-unit id="a1dbb3512ba2c2ef412c726afc917e9ed563da64" translate="yes" xml:space="preserve">
          <source>Custom numeric comparisons</source>
          <target state="translated">Comparaciones numéricas personalizadas</target>
        </trans-unit>
        <trans-unit id="2a8dd816d14251367ee45f28876e6654657e5dc0" translate="yes" xml:space="preserve">
          <source>Demonstrations (to avoid Stackoverflow page bloat, please see &lt;a href=&quot;https://3v4l.org/2OnVs&quot;&gt;the demo link&lt;/a&gt; for the outputs):</source>
          <target state="translated">Demostraciones (para evitar la hinchaz&amp;oacute;n de p&amp;aacute;gina de Stackoverflow, consulte &lt;a href=&quot;https://3v4l.org/2OnVs&quot;&gt;el enlace de demostraci&amp;oacute;n&lt;/a&gt; para las salidas):</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">Ejemplo de uso:</target>
        </trans-unit>
        <trans-unit id="f9aad07cf38b9608c1a59cad08fd3d2a44488a85" translate="yes" xml:space="preserve">
          <source>First, you decorate each array element with another array comprising a primary key (the value) and a secondary key (its index or position):</source>
          <target state="translated">Primero,se decora cada elemento de la matriz con otra matriz que comprende una clave primaria (el valor)y una clave secundaria (su índice o posición):</target>
        </trans-unit>
        <trans-unit id="5d589d82437d73e6fc415fb3acaa13acf2e67fbc" translate="yes" xml:space="preserve">
          <source>For all the above, if you're using PHP 5.3 or higher (and you really should), use anonymous functions for shorter code and to avoid having another global function floating around:</source>
          <target state="translated">Por todo lo anterior,si estás usando PHP 5.3 o superior (y realmente deberías),usa funciones anónimas para un código más corto y para evitar tener otra función global flotando por ahí:</target>
        </trans-unit>
        <trans-unit id="8a7d9d374259b691daf285d948859be53a0d48f4" translate="yes" xml:space="preserve">
          <source>For example assuming $array is an array of objects that contain a month property.</source>
          <target state="translated">Por ejemplo,asumiendo que $array es un conjunto de objetos que contienen una propiedad de un mes.</target>
        </trans-unit>
        <trans-unit id="05c24c41a15f9e61769c627b1026c3bba5757c1a" translate="yes" xml:space="preserve">
          <source>For the practical answer using PHP's existing functions see 1., for the academic in-detail answer on sorting algorithms (which PHP's functions implement and which you &lt;em&gt;may&lt;/em&gt; need for really, really complex cases), see 2.</source>
          <target state="translated">Para la respuesta pr&amp;aacute;ctica usando las funciones existentes de PHP, consulte 1., para la respuesta acad&amp;eacute;mica detallada sobre algoritmos de clasificaci&amp;oacute;n (qu&amp;eacute; funciones de PHP implementan y cu&amp;aacute;les &lt;em&gt;puede&lt;/em&gt; necesitar para casos realmente, muy complejos), consulte 2.</target>
        </trans-unit>
        <trans-unit id="e7e0012b84ebe1c2d6c656f0728fbc05a8b629e0" translate="yes" xml:space="preserve">
          <source>For those familiar, this is equivalent to an SQL query with &lt;code&gt;ORDER BY foo, baz&lt;/code&gt;.</source>
          <target state="translated">Para aquellos familiares, esto es equivalente a una consulta SQL con &lt;code&gt;ORDER BY foo, baz&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="10713d2d5d97f92b70ceeaa1abf16e664ba19d25" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;http://en.wikipedia.org/wiki/Comb_sort&quot;&gt;the Wikipedia article on Comb sort:&lt;/a&gt;</source>
          <target state="translated">Del &lt;a href=&quot;http://en.wikipedia.org/wiki/Comb_sort&quot;&gt;art&amp;iacute;culo de Wikipedia sobre el tipo de peine:&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="af6f8187ecb41c7a3a724fde62c2291f0de0c1e6" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;http://en.wikipedia.org/wiki/Merge_sort&quot;&gt;the Wikipedia article on Merge sort:&lt;/a&gt;</source>
          <target state="translated">Del &lt;a href=&quot;http://en.wikipedia.org/wiki/Merge_sort&quot;&gt;art&amp;iacute;culo de Wikipedia sobre Merge sort:&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f04a70693d1fc91e698f20afedbe860f081e3080" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;http://en.wikipedia.org/wiki/Quicksort&quot;&gt;the Wikipedia article on Quicksort:&lt;/a&gt;</source>
          <target state="translated">Del &lt;a href=&quot;http://en.wikipedia.org/wiki/Quicksort&quot;&gt;art&amp;iacute;culo de Wikipedia sobre Quicksort:&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="231cb574983359b4f2fc2d0eabb3cee56f18d159" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;http://en.wikipedia.org/wiki/Radix_sort&quot;&gt;the Wikipedia article on Radix sort:&lt;/a&gt;</source>
          <target state="translated">Del &lt;a href=&quot;http://en.wikipedia.org/wiki/Radix_sort&quot;&gt;art&amp;iacute;culo de Wikipedia sobre el tipo Radix:&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="335cc9004b8bc9590aeeaa5f2c309c7998fffbc1" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;http://en.wikipedia.org/wiki/Selection_sort&quot;&gt;the Wikipedia article on Selection sort:&lt;/a&gt;</source>
          <target state="translated">Del &lt;a href=&quot;http://en.wikipedia.org/wiki/Selection_sort&quot;&gt;art&amp;iacute;culo de Wikipedia sobre Selecci&amp;oacute;n tipo:&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fa8d636c21c2bb087af8f1c0516b00da6213c942" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;http://rosettacode.org/wiki/Sorting_algorithms/Permutation_sort&quot;&gt;the Wikipedia article on Permutation sort:&lt;/a&gt;</source>
          <target state="translated">Del &lt;a href=&quot;http://rosettacode.org/wiki/Sorting_algorithms/Permutation_sort&quot;&gt;art&amp;iacute;culo de Wikipedia sobre el tipo de permutaci&amp;oacute;n:&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="598734ed0e26e19f679e1e9533a6ea9144140fc1" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;http://en.wikipedia.org/wiki/Bubble_sort&quot;&gt;Wikipedia article on Bubble Sort:&lt;/a&gt;</source>
          <target state="translated">Del &lt;a href=&quot;http://en.wikipedia.org/wiki/Bubble_sort&quot;&gt;art&amp;iacute;culo de Wikipedia sobre Bubble Sort:&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e6bc71c3a10f14e6b4ea14a4d51755b852912608" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;http://en.wikipedia.org/wiki/Insertion_sort&quot;&gt;Wikipedia article on Insertion sort:&lt;/a&gt;</source>
          <target state="translated">Del &lt;a href=&quot;http://en.wikipedia.org/wiki/Insertion_sort&quot;&gt;art&amp;iacute;culo de Wikipedia sobre el tipo de inserci&amp;oacute;n:&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="75d4de6c59d942777ba337701271351a8ba9c7bc" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;http://en.wikipedia.org/wiki/Shellsort&quot;&gt;Wikipedia article on Shellsort:&lt;/a&gt;</source>
          <target state="translated">Del &lt;a href=&quot;http://en.wikipedia.org/wiki/Shellsort&quot;&gt;art&amp;iacute;culo de Wikipedia sobre Shellsort:&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="bc53affe93a56f0ac2327b800d76e9c76e766162" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;'$v-&amp;gt;count'&lt;/code&gt; is a shorthand for &lt;code&gt;function ($v) { return $v-&amp;gt;count; }&lt;/code&gt; (either can be used). These method chains return iterators, iterators can be transformed to arrays by adding &lt;code&gt;-&amp;gt;toArray()&lt;/code&gt; in the end if needed.</source>
          <target state="translated">Aqu&amp;iacute;, &lt;code&gt;'$v-&amp;gt;count'&lt;/code&gt; es una abreviatura de &lt;code&gt;function ($v) { return $v-&amp;gt;count; }&lt;/code&gt; } (cualquiera puede ser usado). Estas cadenas de m&amp;eacute;todos devuelven iteradores, los iteradores se pueden transformar en matrices agregando &lt;code&gt;-&amp;gt;toArray()&lt;/code&gt; al final si es necesario.</target>
        </trans-unit>
        <trans-unit id="37d11951535b9e7819e17bbaa7fa8bb897720d41" translate="yes" xml:space="preserve">
          <source>How can I sort arrays and data in PHP</source>
          <target state="translated">¿Cómo puedo ordenar las matrices y los datos en PHP</target>
        </trans-unit>
        <trans-unit id="59294f795e706794f92a5ab10d06ef7bfa38d205" translate="yes" xml:space="preserve">
          <source>How do I sort a &lt;em&gt;complex&lt;/em&gt; array in PHP?</source>
          <target state="translated">&amp;iquest;C&amp;oacute;mo clasifico una matriz &lt;em&gt;compleja&lt;/em&gt; en PHP?</target>
        </trans-unit>
        <trans-unit id="70590ec3e9e5b76199d05655615734e1136c5ea3" translate="yes" xml:space="preserve">
          <source>How do I sort an array in PHP?</source>
          <target state="translated">¿Cómo puedo ordenar una matriz en PHP?</target>
        </trans-unit>
        <trans-unit id="ffc8695c757dd16a946a9df92a2827b4afaac13c" translate="yes" xml:space="preserve">
          <source>How do I sort an array of objects in PHP?</source>
          <target state="translated">¿Cómo ordeno un conjunto de objetos en PHP?</target>
        </trans-unit>
        <trans-unit id="0464412340e55485032482f66471f7409836566d" translate="yes" xml:space="preserve">
          <source>If someone wants a simpler solution to manipulate arrays, just use Laravel Collection package which has an implemented sortBy function that lets your sort by keys simply.</source>
          <target state="translated">Si alguien quiere una solución más simple para manipular matrices,sólo tiene que usar el paquete Laravel Collection que tiene implementada una función sortBy que permite ordenar por claves de forma sencilla.</target>
        </trans-unit>
        <trans-unit id="45bf070aff3c78274f4df26fea9e3429bf4ad3b8" translate="yes" xml:space="preserve">
          <source>If sorting descending order according their value,'arsort()' method can be used.
Suppose that you want to sort that array according their key value. In this , 'ksort()' method can be use.</source>
          <target state="translated">Si se clasifica en orden descendente según su valor,se puede utilizar el método 'arsort()'.Supongamos que quieres clasificar esa matriz de acuerdo a su valor clave.En esto,el método 'ksort()' puede ser usado.</target>
        </trans-unit>
        <trans-unit id="925d0b321049ce7fba34b78caeb03d17d843dd9b" translate="yes" xml:space="preserve">
          <source>If you have an array of objects, it works the same way:</source>
          <target state="translated">Si tienes un conjunto de objetos,funciona de la misma manera:</target>
        </trans-unit>
        <trans-unit id="8edadb37485a056a0ba896c032254cd92d020270" translate="yes" xml:space="preserve">
          <source>If you want to order by the key value, then you can do it one line, elegant and clear.  This will order by the price ascending.  Uses array_multisort and array_column.</source>
          <target state="translated">Si quieres ordenar por el valor clave,puedes hacerlo en una línea,elegante y clara.Esto se ordenará por el precio ascendente.Usa array_multisort y array_column.</target>
        </trans-unit>
        <trans-unit id="6d1b10feb5169be2830f541c80ba389d86eb0388" translate="yes" xml:space="preserve">
          <source>If you want to sort &lt;code&gt;$array&lt;/code&gt; by the key 'foo' of each entry, you need a &lt;em&gt;custom comparison function&lt;/em&gt;. The above &lt;code&gt;sort&lt;/code&gt; and related functions work on simple values that they know how to compare and sort. PHP does not simply &quot;know&quot; what to do with a &lt;em&gt;complex value&lt;/em&gt; like &lt;code&gt;array('foo' =&amp;gt; 'bar', 'baz' =&amp;gt; 42)&lt;/code&gt; though; so you need to tell it.</source>
          <target state="translated">Si desea ordenar &lt;code&gt;$array&lt;/code&gt; por la clave 'foo' de cada entrada, necesita una &lt;em&gt;funci&amp;oacute;n de comparaci&amp;oacute;n personalizada&lt;/em&gt; . El orden anterior y las funciones relacionadas funcionan con valores simples que saben c&amp;oacute;mo comparar y ordenar. PHP no simplemente &quot;sabe&quot; qu&amp;eacute; hacer con un &lt;em&gt;valor complejo&lt;/em&gt; como &lt;code&gt;array('foo' =&amp;gt; 'bar', 'baz' =&amp;gt; 42)&lt;/code&gt; sin embargo; as&amp;iacute; que necesitas contarlo.</target>
        </trans-unit>
        <trans-unit id="9f6716ad7296fe732de50b7dcb13b798d77ac3c5" translate="yes" xml:space="preserve">
          <source>If you want to sort by the &lt;code&gt;baz&lt;/code&gt; key, which is numeric, all you need to do is:</source>
          <target state="translated">Si desea ordenar por la tecla &lt;code&gt;baz&lt;/code&gt; , que es num&amp;eacute;rica, todo lo que necesita hacer es:</target>
        </trans-unit>
        <trans-unit id="2d2d91011e4cafdd99a83cde167a000a3b9c397d" translate="yes" xml:space="preserve">
          <source>If you want to sort elements into a &quot;manual order&quot; like &lt;em&gt;&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;&lt;/em&gt;:</source>
          <target state="translated">Si desea ordenar los elementos en un &quot;orden manual&quot; como &lt;em&gt;&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="52cc97be3f5343af977f4a56eb17cf35bc05914a" translate="yes" xml:space="preserve">
          <source>If you want to sort primarily by &lt;code&gt;foo&lt;/code&gt;, but if &lt;code&gt;foo&lt;/code&gt; is equal for two elements sort by &lt;code&gt;baz&lt;/code&gt;:</source>
          <target state="translated">Si desea ordenar principalmente por &lt;code&gt;foo&lt;/code&gt; , pero si &lt;code&gt;foo&lt;/code&gt; es igual para dos elementos, ordene por &lt;code&gt;baz&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="af3d3d14d6ec1cb2fcbbe7eb203a079631fb777a" translate="yes" xml:space="preserve">
          <source>If your question is closed as a duplicate of this one, please ask for your question to be reopened only if you can explain why it differs markedly from all of the below.</source>
          <target state="translated">Si su pregunta se cierra como un duplicado de ésta,por favor pida que se reabra su pregunta sólo si puede explicar por qué difiere notablemente de todas las siguientes.</target>
        </trans-unit>
        <trans-unit id="582175a51757c187ebe0a614be085ee5195af579" translate="yes" xml:space="preserve">
          <source>In .NET, LINQ is frequently used for sorting, which provides a much nicer syntax over comparison functions, especially when objects need to be sorted by multiple fields. There're several ports of LINQ to PHP, including &lt;a href=&quot;https://github.com/Athari/YaLinqo&quot;&gt;YaLinqo&lt;/a&gt; library*. With it, arrays can be sorted with a single line without writing complex comparison functions.</source>
          <target state="translated">En .NET, LINQ se usa con frecuencia para ordenar, lo que proporciona una sintaxis mucho mejor que las funciones de comparaci&amp;oacute;n, especialmente cuando los objetos necesitan ser ordenados por m&amp;uacute;ltiples campos. Hay varios puertos de LINQ to PHP, incluida la biblioteca &lt;a href=&quot;https://github.com/Athari/YaLinqo&quot;&gt;YaLinqo&lt;/a&gt; *. Con &amp;eacute;l, las matrices se pueden ordenar con una sola l&amp;iacute;nea sin escribir funciones de comparaci&amp;oacute;n complejas.</target>
        </trans-unit>
        <trans-unit id="f9ad5247ca5515c6c34dc526808eb4006a03baba" translate="yes" xml:space="preserve">
          <source>In computer science, a merge sort (also commonly spelled mergesort) is an O(n log n) comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output</source>
          <target state="translated">En la informática,un tipo de fusión (también llamado mergesort)es un algoritmo de clasificación basado en la comparación de O(n log n).La mayoría de las implementaciones producen una clasificación estable,lo que significa que la implementación preserva el orden de entrada de elementos iguales en la salida clasificada</target>
        </trans-unit>
        <trans-unit id="fd773dac0cce1b252cddef9fa0e747f7ecda84a9" translate="yes" xml:space="preserve">
          <source>In computer science, radix sort is a non-comparative integer sorting algorithm that sorts data with integer keys by grouping keys by the individual digits which share the same significant position and value.</source>
          <target state="translated">En informática,la clasificación de radix es un algoritmo de clasificación de enteros no comparativo que clasifica los datos con claves de enteros agrupando las claves por los dígitos individuales que comparten la misma posición y valor significativos.</target>
        </trans-unit>
        <trans-unit id="2bebc9e7fd3f70ecd7761684ac68e27bf4d9b7a7" translate="yes" xml:space="preserve">
          <source>In computer science, selection sort is a sorting algorithm, specifically an in-place comparison sort. It has O(n2) time complexity, making it inefficient on large lists, and generally performs worse than the similar insertion sort. Selection sort is noted for its simplicity, and it has performance advantages over more complicated algorithms in certain situations, particularly where auxiliary memory is limited.</source>
          <target state="translated">En informática,la selección es un algoritmo de clasificación,específicamente un tipo de comparación in situ.Tiene una complejidad de tiempo O(n2),lo que lo hace ineficiente en grandes listas,y generalmente se desempeña peor que el tipo de inserción similar.El tipo de selección se caracteriza por su simplicidad,y tiene ventajas de rendimiento respecto de algoritmos más complicados en determinadas situaciones,en particular cuando la memoria auxiliar es limitada.</target>
        </trans-unit>
        <trans-unit id="a5bbc46810b022a4f9a43546060c63f13368908b" translate="yes" xml:space="preserve">
          <source>Insertion sort</source>
          <target state="translated">Insertar hacia fuera</target>
        </trans-unit>
        <trans-unit id="8a2aef5e40c2233bb33a10c7a43749ed88dbbd60" translate="yes" xml:space="preserve">
          <source>Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort. However, insertion sort provides several advantages:</source>
          <target state="translated">La clasificación de inserción es un simple algoritmo de clasificación que construye la matriz (o lista)clasificada final,un elemento a la vez.Es mucho menos eficiente en las grandes listas que los algoritmos más avanzados como el quicksort,el heapsort o el merge sort.Sin embargo,la clasificación por inserción ofrece varias ventajas:</target>
        </trans-unit>
        <trans-unit id="09dfd03d9fa968a44a324d9a9670952800b1a369" translate="yes" xml:space="preserve">
          <source>Internally, &lt;code&gt;orderBy&lt;/code&gt; and related methods call appropriate array sorting functions (&lt;code&gt;uasort&lt;/code&gt;, &lt;code&gt;krsort&lt;/code&gt;, &lt;code&gt;multisort&lt;/code&gt;, &lt;code&gt;usort&lt;/code&gt; etc.).</source>
          <target state="translated">Internamente, &lt;code&gt;orderBy&lt;/code&gt; y los m&amp;eacute;todos relacionados llaman a las funciones de clasificaci&amp;oacute;n de matriz apropiadas ( &lt;code&gt;uasort&lt;/code&gt; , &lt;code&gt;krsort&lt;/code&gt; , multisort , usort , etc.).</target>
        </trans-unit>
        <trans-unit id="da1531a814d65a809aa862e5d5c336dc8e0042a7" translate="yes" xml:space="preserve">
          <source>It is very convenient to sort arrays with &lt;a href=&quot;https://github.com/ihor/Nspl#sortedarray-array-reversed--false-key--null-cmp--null&quot;&gt;sorted&lt;/a&gt; function from &lt;a href=&quot;https://github.com/ihor/Nspl&quot;&gt;Nspl&lt;/a&gt;:</source>
          <target state="translated">Es muy conveniente ordenar las matrices con la funci&amp;oacute;n &lt;a href=&quot;https://github.com/ihor/Nspl#sortedarray-array-reversed--false-key--null-cmp--null&quot;&gt;ordenada&lt;/a&gt; de &lt;a href=&quot;https://github.com/ihor/Nspl&quot;&gt;Nspl&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="667a4c437c43ca4427c06a7c18f482d831ef30ee" translate="yes" xml:space="preserve">
          <source>LINQ</source>
          <target state="translated">LINQ</target>
        </trans-unit>
        <trans-unit id="d7b23de8effd125677df7440a79328060cc5e033" translate="yes" xml:space="preserve">
          <source>LINQ contains many more methods inspired by SQL: filtering, grouping, joining, aggregating etc. It's best suited for cases when complex transformations on arrays and objects need to be performed without relying on databases.</source>
          <target state="translated">LINQ contiene muchos más métodos inspirados en SQL:filtrado,agrupación,unión,agregación,etc.Es más adecuado para los casos en los que es necesario realizar transformaciones complejas en matrices y objetos sin depender de las bases de datos.</target>
        </trans-unit>
        <trans-unit id="f64a19aa28fb1c68abbaec37b0257c0dcb685d6c" translate="yes" xml:space="preserve">
          <source>Let's say you have an array like this:</source>
          <target state="translated">Digamos que tienes un arreglo como este:</target>
        </trans-unit>
        <trans-unit id="c6e2b023f3c4383d2cf7c27139646fae922e2b4a" translate="yes" xml:space="preserve">
          <source>Let's write the sort step using this function:</source>
          <target state="translated">Escribamos el paso de clasificación usando esta función:</target>
        </trans-unit>
        <trans-unit id="67151004822cc885e4122a06e2904151a40b8599" translate="yes" xml:space="preserve">
          <source>Merge sort</source>
          <target state="translated">Fusionar tipo</target>
        </trans-unit>
        <trans-unit id="a90731fa64d2eaebed1e787a4012ebb1d3ba50b7" translate="yes" xml:space="preserve">
          <source>Multi dimensional arrays, including arrays of objects</source>
          <target state="translated">Matrices multidimensionales,incluyendo matrices de objetos</target>
        </trans-unit>
        <trans-unit id="6e0c416675708d317f2b07de659b4ababe413cc0" translate="yes" xml:space="preserve">
          <source>Natural sort of a multidimensional array by a key value and also keep the original order(do not shuffle the main keys):</source>
          <target state="translated">Es una especie de conjunto multidimensional por un valor de clave y también mantiene el orden original (no mezcle las claves principales):</target>
        </trans-unit>
        <trans-unit id="1b9453aa0a00bdf9f4d988745a47066a5de0f25b" translate="yes" xml:space="preserve">
          <source>Note that the array sorts &lt;em&gt;in place&lt;/em&gt;, you do not need to assign the return value to anything. &lt;code&gt;$array = sort($array)&lt;/code&gt; will replace the array with &lt;code&gt;true&lt;/code&gt;, not with a sorted array. Just &lt;code&gt;sort($array);&lt;/code&gt; works.</source>
          <target state="translated">Tenga en cuenta que la matriz se ordena &lt;em&gt;en su lugar&lt;/em&gt; , no necesita asignar el valor de retorno a nada. &lt;code&gt;$array = sort($array)&lt;/code&gt; reemplazar&amp;aacute; la matriz con &lt;code&gt;true&lt;/code&gt; , no con una matriz ordenada. Simplemente &lt;code&gt;sort($array);&lt;/code&gt; trabajos.</target>
        </trans-unit>
        <trans-unit id="975c9470ca30f7d2e09bf09a076cb2fa5788f53e" translate="yes" xml:space="preserve">
          <source>Note that this won't work well for &lt;code&gt;float&lt;/code&gt; values, since they'll be reduced to an &lt;code&gt;int&lt;/code&gt; and lose precision. Use explicit &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; return values instead.</source>
          <target state="translated">Tenga en cuenta que esto no funcionar&amp;aacute; bien para los valores &lt;code&gt;float&lt;/code&gt; , ya que se reducir&amp;aacute;n a &lt;code&gt;int&lt;/code&gt; y perder&amp;aacute;n precisi&amp;oacute;n. Utilice valores de retorno expl&amp;iacute;citos &lt;code&gt;-1&lt;/code&gt; , &lt;code&gt;0&lt;/code&gt; y &lt;code&gt;1&lt;/code&gt; en su lugar.</target>
        </trans-unit>
        <trans-unit id="9480ac07046c735f2fecfd2332cb6f82d4b86385" translate="yes" xml:space="preserve">
          <source>Now array is sorted according their key value.If You want to sort the array in descending order according their key value,'krsort()' method can be used.</source>
          <target state="translated">Si quieres ordenar la matriz en orden descendente según su valor clave,puedes usar el método 'krsort()'.</target>
        </trans-unit>
        <trans-unit id="6954657f48f6b7ff5d7802374273a3999c5374ed" translate="yes" xml:space="preserve">
          <source>Now array is sorted in descending order.Ok, Let's consider an associative array.I will give an associative array(Associative array means that, An array whose each index has unique key value.) like this,</source>
          <target state="translated">Ahora la matriz está ordenada en orden descendente.Ok,consideremos una matriz asociativa.Daré una matriz asociativa (matriz asociativa significa que,una matriz cuyo índice tiene un valor clave único.)como esta,</target>
        </trans-unit>
        <trans-unit id="8ae68b7f9f856327cadf4b20822beefd6eed6802" translate="yes" xml:space="preserve">
          <source>Now associative array is sorted in descending order according their key value.Look at the output.</source>
          <target state="translated">Ahora la matriz asociativa se ordena en orden descendente según su valor clave.Mira la salida.</target>
        </trans-unit>
        <trans-unit id="72ee2e304658dc96b31d0a5b7baf0c4b1799c99d" translate="yes" xml:space="preserve">
          <source>Now consider the output of that,</source>
          <target state="translated">Ahora considera el resultado de eso,</target>
        </trans-unit>
        <trans-unit id="d827a6d027f57d096cc39d07e7c52f06a4bc5370" translate="yes" xml:space="preserve">
          <source>Now consider the output.</source>
          <target state="translated">Ahora considera la salida.</target>
        </trans-unit>
        <trans-unit id="bb53e72bba70d545e597e3fd609e9845c180b9b2" translate="yes" xml:space="preserve">
          <source>Now, we adjust the comparison step; we compare the first letter again, but if they're the same, the secondary key is used to retain the original ordering:</source>
          <target state="translated">Ahora,ajustamos el paso de comparación;comparamos la primera letra de nuevo,pero si son iguales,la clave secundaria se utiliza para mantener el orden original:</target>
        </trans-unit>
        <trans-unit id="72a83add2c5ede877c10d23f302d3e17accbadab" translate="yes" xml:space="preserve">
          <source>Objects</source>
          <target state="translated">Objects</target>
        </trans-unit>
        <trans-unit id="e39453d0bca511e0ba4ab9de0245d522eae2bb85" translate="yes" xml:space="preserve">
          <source>Often, you will want to use an &lt;a href=&quot;http://php.net/manual/en/functions.anonymous.php&quot;&gt;anonymous function&lt;/a&gt; as the callback. If you want to use a method or static method, see the &lt;a href=&quot;http://php.net/manual/en/language.types.callable.php&quot;&gt;other ways of specifying a callback in PHP&lt;/a&gt;.</source>
          <target state="translated">A menudo, querr&amp;aacute; usar una &lt;a href=&quot;http://php.net/manual/en/functions.anonymous.php&quot;&gt;funci&amp;oacute;n an&amp;oacute;nima&lt;/a&gt; como devoluci&amp;oacute;n de llamada. Si desea utilizar un m&amp;eacute;todo o m&amp;eacute;todo est&amp;aacute;tico, consulte las &lt;a href=&quot;http://php.net/manual/en/language.types.callable.php&quot;&gt;otras formas de especificar una devoluci&amp;oacute;n de llamada en PHP&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c35d83d789a540e6897531d14c6254373ce83781" translate="yes" xml:space="preserve">
          <source>Other Types of Sort</source>
          <target state="translated">Otros tipos de clasificación</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="b0267e700c88a37263a43b92d7a395bce05551fd" translate="yes" xml:space="preserve">
          <source>PHP 7 introduced the &lt;a href=&quot;https://stackoverflow.com/a/31298778/476&quot;&gt;spaceship operator&lt;/a&gt;, which unifies and simplifies equal/smaller/larger than comparisons across types:</source>
          <target state="translated">PHP 7 introdujo el &lt;a href=&quot;https://stackoverflow.com/a/31298778/476&quot;&gt;operador de nave espacial&lt;/a&gt; , que unifica y simplifica igual / menor / mayor que las comparaciones entre tipos:</target>
        </trans-unit>
        <trans-unit id="3f2d32e9b9fcccd95d471d74d44aa03d86740971" translate="yes" xml:space="preserve">
          <source>Permutation sort</source>
          <target state="translated">Tipo de permutación</target>
        </trans-unit>
        <trans-unit id="c173eb402711aa25b0f47a3eba4637bd8ca240a3" translate="yes" xml:space="preserve">
          <source>Permutation sort, which proceeds by generating the possible permutations of the input array/list until discovering the sorted one.</source>
          <target state="translated">Permutación tipo,que procede generando las posibles permutaciones de la lista de arreglos de entrada hasta descubrir la ordenada.</target>
        </trans-unit>
        <trans-unit id="d44cb3d8ba3820f721444056407b199d364b0108" translate="yes" xml:space="preserve">
          <source>Quicksort</source>
          <target state="translated">Quicksort</target>
        </trans-unit>
        <trans-unit id="4e2f2ccda2d141cdb71813f9ece456d6058909d2" translate="yes" xml:space="preserve">
          <source>Quicksort, or partition-exchange sort, is a sorting algorithm developed by Tony Hoare that, on average, makes O(n log n) comparisons to sort n items. In the worst case, it makes O(n2) comparisons, though this behavior is rare.</source>
          <target state="translated">Quicksort,o clasificación de intercambio de particiones,es un algoritmo de clasificación desarrollado por Tony Hoare que,en promedio,hace comparaciones de O(n log n)para clasificar n artículos.En el peor de los casos,hace comparaciones de O(n2),aunque este comportamiento es raro.</target>
        </trans-unit>
        <trans-unit id="bff4909dacd843638a143efdc8a9f26a73d4d021" translate="yes" xml:space="preserve">
          <source>Radix sort</source>
          <target state="translated">Radix está saliendo</target>
        </trans-unit>
        <trans-unit id="c7ffa0f7b8c42b69643661d77faa8591b90c537c" translate="yes" xml:space="preserve">
          <source>Sample data for my demonstrations:</source>
          <target state="translated">Datos de muestra para mis demostraciones:</target>
        </trans-unit>
        <trans-unit id="e3cdf383e3767cd3d19172cf65aee5ac75789a6a" translate="yes" xml:space="preserve">
          <source>Selection sort</source>
          <target state="translated">Tipo de selección</target>
        </trans-unit>
        <trans-unit id="5b80873e838a3de2e0b8501112112c5e85d97341" translate="yes" xml:space="preserve">
          <source>Shellsort</source>
          <target state="translated">Shellsort</target>
        </trans-unit>
        <trans-unit id="7f8c6841ac8c565f0f59479a33bf5e67aeff1fd7" translate="yes" xml:space="preserve">
          <source>Shellsort, also known as Shell sort or Shell's method, is an in-place comparison sort. It generalizes an exchanging sort, such as insertion or bubble sort, by starting the comparison and exchange of elements with elements that are far apart before finishing with neighboring elements.</source>
          <target state="translated">Shellsort,también conocido como Shell sort o método de Shell,es un tipo de comparación in situ.Generaliza una clasificación de intercambio,como la inserción o la clasificación de burbujas,comenzando la comparación y el intercambio de elementos con elementos que están muy separados antes de terminar con los elementos vecinos.</target>
        </trans-unit>
        <trans-unit id="c72db2b9bd5162f4ee3192fa5a58bf805b06a3e0" translate="yes" xml:space="preserve">
          <source>So ,Now I want to sort this array in ascending order according their value.'asort()' method can be used for that.</source>
          <target state="translated">Así que,ahora quiero ordenar esta matriz en orden ascendente de acuerdo a su valor.El método &quot;asort()&quot; puede ser usado para eso.</target>
        </trans-unit>
        <trans-unit id="6deb74510a05647499e115f644b036d0c78033e2" translate="yes" xml:space="preserve">
          <source>Sorting by multiple fields</source>
          <target state="translated">Clasificando por múltiples campos</target>
        </trans-unit>
        <trans-unit id="0abc6fe29f723ac5ab847735d61a3e848b86510b" translate="yes" xml:space="preserve">
          <source>Sorting into a manual, static order</source>
          <target state="translated">Clasificando en un orden manual y estático</target>
        </trans-unit>
        <trans-unit id="6ae7466fd879afa82cce3b8c69fc1d7a38b8457b" translate="yes" xml:space="preserve">
          <source>Sorting logic:</source>
          <target state="translated">Lógica de clasificación:</target>
        </trans-unit>
        <trans-unit id="5828996ad33961b80dd02a99ba31c274af774b8c" translate="yes" xml:space="preserve">
          <source>Sorting one array based on another</source>
          <target state="translated">Clasificar un arreglo basado en otro</target>
        </trans-unit>
        <trans-unit id="dc76f608fa88e8b8d88d502255d84d79946a6d0f" translate="yes" xml:space="preserve">
          <source>Sorting with SPL</source>
          <target state="translated">Clasificación con SPL</target>
        </trans-unit>
        <trans-unit id="33e63fd49e04368d0c74d40d9016c5e47c3d84bc" translate="yes" xml:space="preserve">
          <source>Spaceship operator</source>
          <target state="translated">Operador de la nave espacial</target>
        </trans-unit>
        <trans-unit id="b18198f5f9f57564c4ac888b338ec7bdf4bd8815" translate="yes" xml:space="preserve">
          <source>Stable sort</source>
          <target state="translated">Tipo estable...</target>
        </trans-unit>
        <trans-unit id="3816c4beac471c733eed1d91c213f8c2b6a29262" translate="yes" xml:space="preserve">
          <source>Strings</source>
          <target state="translated">Strings</target>
        </trans-unit>
        <trans-unit id="be8b35a38597692f15ee011684c538a2449fccf4" translate="yes" xml:space="preserve">
          <source>Thanks to &lt;strong&gt;The PoWEr oF MATH&lt;/strong&gt; this returns a value &amp;lt; 0, 0 or &amp;gt; 0 depending on whether &lt;code&gt;$a&lt;/code&gt; is lower than, equal to or larger than &lt;code&gt;$b&lt;/code&gt;.</source>
          <target state="translated">Gracias a &lt;strong&gt;The PoWEr of MATH&lt;/strong&gt; esto devuelve un valor &amp;lt;0, 0 o&amp;gt; 0 dependiendo de si &lt;code&gt;$a&lt;/code&gt; es menor, igual o mayor que &lt;code&gt;$b&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="18b26e687c8060faed4b3283538901d99924da0c" translate="yes" xml:space="preserve">
          <source>That's how simple sorting a complex multi-dimensional array can be. Again, just think in terms of &lt;em&gt;teaching PHP how to tell which of two items is &quot;greater&quot;&lt;/em&gt;; let PHP do the actual sorting.</source>
          <target state="translated">As&amp;iacute; de simple puede ser ordenar una compleja matriz multidimensional. Nuevamente, solo piense en t&amp;eacute;rminos de &lt;em&gt;ense&amp;ntilde;ar a PHP c&amp;oacute;mo saber cu&amp;aacute;l de los dos elementos es &quot;mayor&quot;&lt;/em&gt; ; deje que PHP haga la clasificaci&amp;oacute;n real.</target>
        </trans-unit>
        <trans-unit id="12c288ba8b61fad8ca7f16d60422336faa5fe119" translate="yes" xml:space="preserve">
          <source>The SplMaxHeap class provides the main functionalities of a heap, keeping the maximum on the top.</source>
          <target state="translated">La clase SplMaxHeap proporciona las principales funcionalidades de un montón,manteniendo el máximo en la parte superior.</target>
        </trans-unit>
        <trans-unit id="054693f687dcbdc3235c558c02357cafa6badd3e" translate="yes" xml:space="preserve">
          <source>The SplMinHeap class provides the main functionalities of a heap, keeping the minimum on the top.</source>
          <target state="translated">La clase SplMinHeap proporciona las principales funcionalidades de un montón,manteniendo el mínimo en la parte superior.</target>
        </trans-unit>
        <trans-unit id="d4d87b5e9fc3737c7e81b15ed8aa38249fbcf373" translate="yes" xml:space="preserve">
          <source>The difference between those is merely whether key-value associations are kept (the &quot;&lt;code&gt;a&lt;/code&gt;&quot; functions), whether it sorts low-to-high or reverse (&quot;&lt;code&gt;r&lt;/code&gt;&quot;), whether it sorts values or keys (&quot;&lt;code&gt;k&lt;/code&gt;&quot;) and how it compares values (&quot;&lt;code&gt;nat&lt;/code&gt;&quot; vs. normal). See &lt;a href=&quot;http://php.net/manual/en/array.sorting.php&quot;&gt;http://php.net/manual/en/array.sorting.php&lt;/a&gt; for an overview and links to further details.</source>
          <target state="translated">La diferencia entre ellos es simplemente si las asociaciones de clave-valor se mantienen (las funciones &quot; &lt;code&gt;a&lt;/code&gt; &quot;), si clasifica de bajo a alto o inverso (&quot; &lt;code&gt;r&lt;/code&gt; &quot;), si clasifica valores o claves (&quot; &lt;code&gt;k&lt;/code&gt; &quot;) y c&amp;oacute;mo compara valores (&quot; &lt;code&gt;nat&lt;/code&gt; &quot; vs. normal). Consulte &lt;a href=&quot;http://php.net/manual/en/array.sorting.php&quot;&gt;http://php.net/manual/en/array.sorting.php&lt;/a&gt; para obtener una descripci&amp;oacute;n general y enlaces a m&amp;aacute;s detalles.</target>
        </trans-unit>
        <trans-unit id="725e8396ee12340d6238f40e07cd4a73b61075ce" translate="yes" xml:space="preserve">
          <source>The elements from both sides of the operator will be traversed left to right, one at a time, and returning the evaluation as soon as a non-tie is encountered or when the elements have all been compared.</source>
          <target state="translated">Los elementos de ambos lados del operador se recorrerán de izquierda a derecha,uno a uno,y se devolverá la evaluación tan pronto como se encuentre un no-enlace o cuando se hayan comparado todos los elementos.</target>
        </trans-unit>
        <trans-unit id="0b2f20e21a299cb112503b754502d1f181c00b06" translate="yes" xml:space="preserve">
          <source>The expected result here would be:</source>
          <target state="translated">El resultado esperado aquí sería:</target>
        </trans-unit>
        <trans-unit id="953adeb96e5f44095ec62a8ec7fb264aa7f1685a" translate="yes" xml:space="preserve">
          <source>The final result:</source>
          <target state="translated">El resultado final:</target>
        </trans-unit>
        <trans-unit id="c0657eaaa8eae57d4b0859d34d3f627d4a16f08b" translate="yes" xml:space="preserve">
          <source>The keen observer may have noticed that the array sorting algorithm (QuickSort) didn't produce a stable outcome and that the original order between words of the same first letter wasn't preserved. This case is trivial and we should have compared the whole string, but let's assume your use-case is more complicated, such as two consecutive sorts on different fields that shouldn't cancel out each other's work.</source>
          <target state="translated">El observador agudo puede haber notado que el algoritmo de clasificación de matrices (QuickSort)no produjo un resultado estable y que el orden original entre las palabras de la misma primera letra no fue preservado.Este caso es trivial y deberíamos haber comparado toda la cadena,pero asumamos que su caso de uso es más complicado,como dos tipos consecutivos en campos diferentes que no deberían anularse mutuamente.</target>
        </trans-unit>
        <trans-unit id="40557e3db4165270942853579e99a47f46705025" translate="yes" xml:space="preserve">
          <source>The outcome is this:</source>
          <target state="translated">El resultado es este:</target>
        </trans-unit>
        <trans-unit id="8ab3b917f6b1d0b8f5cf7e5e7047d13f590ba823" translate="yes" xml:space="preserve">
          <source>The simplest is to use usort function to sort array without any looping :
Below is an example :</source>
          <target state="translated">Lo más simple es usar la función de clasificación para ordenar la matriz sin ningún tipo de bucle:A continuación se muestra un ejemplo:</target>
        </trans-unit>
        <trans-unit id="b2b8e2cb335886e04d4d752fe8fe7627299eacc6" translate="yes" xml:space="preserve">
          <source>There are several ways to sort an array.I will mention some methods for doing that task.fist of all , I will give an integer array which is called as '$numbers'.</source>
          <target state="translated">Hay varias maneras de ordenar una matriz.Mencionaré algunos métodos para hacer esa tarea.Primero que nada,daré una matriz entera que se llama &quot;$números&quot;.</target>
        </trans-unit>
        <trans-unit id="f08a86bb02cd3d4e2099033080e2835aae6d74dd" translate="yes" xml:space="preserve">
          <source>These are the some methods for sorting an array in ascending or descending order in php.I hope to you could get an idea.Thank you!</source>
          <target state="translated">Estos son algunos métodos para clasificar una matriz en orden ascendente o descendente en php.Espero que puedas tener una idea.¡Gracias!</target>
        </trans-unit>
        <trans-unit id="8c2be70445cb54d01611838358190c3a777e3184" translate="yes" xml:space="preserve">
          <source>This is the normal way to creating an array. Suppose that , I want to sort that array in ascending order.For that, 'sort()' method can be used.</source>
          <target state="translated">Esta es la forma normal de crear una matriz.Supongamos que quiero clasificar esa matriz en orden ascendente.Para ello,se puede utilizar el método &quot;sort()&quot;.</target>
        </trans-unit>
        <trans-unit id="dde20aef894f0fb7fd0addad9c8e2eca69acf984" translate="yes" xml:space="preserve">
          <source>This makes great strides in reducing code bloat and improving readability.</source>
          <target state="translated">Esto hace grandes avances en la reducción de la hinchazón del código y la mejora de la legibilidad.</target>
        </trans-unit>
        <trans-unit id="8ae5faa04b7f0b4ab713cf58213e707e0e5433a0" translate="yes" xml:space="preserve">
          <source>This page is very comprehensive, but I want to add a bit more about the awesome utility of the spaceship operator (three way comparison operator) -- a beautiful child of PHP7+.</source>
          <target state="translated">Esta página es muy completa,pero quiero añadir un poco más sobre la impresionante utilidad del operador de la nave espacial (operador de comparación de tres vías)-un hermoso hijo de PHP7+.</target>
        </trans-unit>
        <trans-unit id="d2aa926b92b550aa69143e32375772daf3d60b1a" translate="yes" xml:space="preserve">
          <source>This question is intended as a reference for questions about sorting arrays in PHP. It is easy to think that your particular case is unique and worthy of a new question, but most are actually minor variations of one of the solutions on this page.</source>
          <target state="translated">Esta pregunta está pensada como una referencia para preguntas sobre la clasificación de matrices en PHP.Es fácil pensar que su caso particular es único y digno de una nueva pregunta,pero la mayoría son en realidad variaciones menores de una de las soluciones de esta página.</target>
        </trans-unit>
        <trans-unit id="f80d90d89f72bcf9b275cd7306e8e7131a2b8842" translate="yes" xml:space="preserve">
          <source>This syntax allows you to sort values, functional outcomes, deep-nested data, and sorting direction in a elegant fashion.  This is definitely worth putting in your php toolbelt ...for cases when you are processing non-database data -- because of course SQL would be a much more sensible technique.</source>
          <target state="translated">Esta sintaxis permite clasificar valores,resultados funcionales,datos anidados profundamente y dirección de clasificación de una manera elegante.Esto definitivamente vale la pena ponerlo en tu cinturón de herramientas php...para los casos en que estás procesando datos que no son de base de datos...porque por supuesto SQL sería una técnica mucho más sensata.</target>
        </trans-unit>
        <trans-unit id="71b460d3c37c7ce78ce6b0d6df859d807f5083db" translate="yes" xml:space="preserve">
          <source>This transforms the array into this:</source>
          <target state="translated">Esto transforma la matriz en esto:</target>
        </trans-unit>
        <trans-unit id="0402d6569e261eb376cd0e0480149c110dfe7e44" translate="yes" xml:space="preserve">
          <source>This will sort in asending order :</source>
          <target state="translated">Esto se clasificará en orden ascendente:</target>
        </trans-unit>
        <trans-unit id="973b5f203a597863c3416acc2681e81c4c38e982" translate="yes" xml:space="preserve">
          <source>This will sort in desending order :</source>
          <target state="translated">Esto se clasificará en orden decreciente:</target>
        </trans-unit>
        <trans-unit id="ec3712d52e6639c57acc511c0d5bd37714eb0283" translate="yes" xml:space="preserve">
          <source>To do that, you need to create a &lt;em&gt;comparison function&lt;/em&gt;. That function takes two elements and must return &lt;code&gt;0&lt;/code&gt; if these elements are considered equal, a value lower than &lt;code&gt;0&lt;/code&gt; if the first value is lower and a value higher than &lt;code&gt;0&lt;/code&gt; if the first value is higher. That's all that's needed:</source>
          <target state="translated">Para hacer eso, necesita crear una &lt;em&gt;funci&amp;oacute;n de comparaci&amp;oacute;n&lt;/em&gt; . Esa funci&amp;oacute;n toma dos elementos y debe devolver &lt;code&gt;0&lt;/code&gt; si estos elementos se consideran iguales, un valor menor que &lt;code&gt;0&lt;/code&gt; si el primer valor es menor y un valor mayor que &lt;code&gt;0&lt;/code&gt; si el primer valor es mayor. Eso es todo lo que se necesita:</target>
        </trans-unit>
        <trans-unit id="9ff58a12c33c24d9444fe3d80dd760a502773162" translate="yes" xml:space="preserve">
          <source>To get used to this idea, try this:</source>
          <target state="translated">Para acostumbrarse a esta idea,pruebe esto:</target>
        </trans-unit>
        <trans-unit id="4d7fc375f7c2d29c511ad47f3b0427f8fe029dc7" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;array_multisort&lt;/code&gt; to get there:</source>
          <target state="translated">Use &lt;code&gt;array_multisort&lt;/code&gt; para llegar all&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="cc8255a05e0c9e77bc8b8f60a36e1a52dda63dbb" translate="yes" xml:space="preserve">
          <source>Using the spaceship operator to implement multiple sort conditions</source>
          <target state="translated">Usar el operador de la nave espacial para implementar múltiples condiciones de clasificación</target>
        </trans-unit>
        <trans-unit id="01ba4a7aa0b09c32b597708fbf029367d4fc4548" translate="yes" xml:space="preserve">
          <source>Voila! Your pristine comparison code is back.</source>
          <target state="translated">¡Voila! Tu prístino código de comparación ha vuelto.</target>
        </trans-unit>
        <trans-unit id="4081ff83370ff929f9d82da1aa8c8026b891606f" translate="yes" xml:space="preserve">
          <source>Well most basic methods are already covered by &lt;a href=&quot;https://stackoverflow.com/a/17364128&quot;&gt;deceze&lt;/a&gt; I would try to look at other types of sort</source>
          <target state="translated">Bueno, la mayor&amp;iacute;a de los m&amp;eacute;todos b&amp;aacute;sicos ya est&amp;aacute;n cubiertos por el &lt;a href=&quot;https://stackoverflow.com/a/17364128&quot;&gt;enga&amp;ntilde;o&lt;/a&gt; . Intentar&amp;iacute;a mirar otros tipos de</target>
        </trans-unit>
        <trans-unit id="3a5e3a6448c0eea877c84b7a66986dbba7567544" translate="yes" xml:space="preserve">
          <source>When writing your custom sort (&lt;code&gt;usort()&lt;/code&gt;/&lt;code&gt;uasort()&lt;/code&gt;/&lt;code&gt;uksort()&lt;/code&gt;) function to process a multiple conditions, you only need to write balanced arrays on either side of the operator and return the outcome. &lt;strong&gt;No more nested condition blocks or multiple returns.&lt;/strong&gt;</source>
          <target state="translated">Al escribir su funci&amp;oacute;n de clasificaci&amp;oacute;n personalizada ( &lt;code&gt;usort()&lt;/code&gt; / &lt;code&gt;uasort()&lt;/code&gt; / &lt;code&gt;uksort()&lt;/code&gt; ) para procesar m&amp;uacute;ltiples condiciones, solo necesita escribir matrices balanceadas a cada lado del operador y devolver el resultado. &lt;strong&gt;No m&amp;aacute;s bloques de condiciones anidadas o retornos m&amp;uacute;ltiples.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6ab42d0070bc672b70cc0b562ef5caca83182c66" translate="yes" xml:space="preserve">
          <source>You can do anything you need inside a comparison function, including calling functions:</source>
          <target state="translated">Puedes hacer todo lo que necesites dentro de una función de comparación,incluyendo funciones de llamada:</target>
        </trans-unit>
        <trans-unit id="c2598758b7b8e523ec8fa99a6fb1a68f431a6a36" translate="yes" xml:space="preserve">
          <source>You can see all these examples &lt;a href=&quot;https://github.com/ihor/Nspl/blob/master/examples/a_sorted.php&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Puedes ver todos estos ejemplos &lt;a href=&quot;https://github.com/ihor/Nspl/blob/master/examples/a_sorted.php&quot;&gt;aqu&amp;iacute;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0c73513599241b3ce7f8138e76771704dbf6c490" translate="yes" xml:space="preserve">
          <source>You can see printed number array is sorted. If you want to that number array to be sort is descending order, 'rsort()' method can be use for that task.</source>
          <target state="translated">Puedes ver que la matriz de números impresos está ordenada.Si quieres que la matriz de números se ordene en orden descendente,puedes usar el método 'rsort()' para esa tarea.</target>
        </trans-unit>
        <trans-unit id="f9fa873c922dd4519bb3310f2049638099570603" translate="yes" xml:space="preserve">
          <source>You had to rewrite your comparison function to work with the transformed array elements; you may not want to edit your delicate comparison functions, so here's a wrapper for the comparison function:</source>
          <target state="translated">Tuviste que reescribir tu función de comparación para trabajar con los elementos de la matriz transformada;puede que no quieras editar tus delicadas funciones de comparación,así que aquí tienes un envoltorio para la función de comparación:</target>
        </trans-unit>
        <trans-unit id="f693970746f4c98af758145696b3f03075e624fd" translate="yes" xml:space="preserve">
          <source>You then use one of these functions:</source>
          <target state="translated">Luego se utiliza una de estas funciones:</target>
        </trans-unit>
        <trans-unit id="d6dc10b51f4ac19dc7e1c1bf1c90cd2514ff5fda" translate="yes" xml:space="preserve">
          <source>boolean ASC</source>
          <target state="translated">ASC booleano</target>
        </trans-unit>
        <trans-unit id="011f88a6deac532999df9a4bf406f2452a5e4ec2" translate="yes" xml:space="preserve">
          <source>boolean DESC (false = 0, true = 1, so trues before falses)</source>
          <target state="translated">DESC booleano (falso=0,verdadero=1,así que verdades antes que falsas)</target>
        </trans-unit>
        <trans-unit id="51aa2637eade754937f7d4b54457cc38ed3ebe0d" translate="yes" xml:space="preserve">
          <source>consider the output..</source>
          <target state="translated">considerar la salida..</target>
        </trans-unit>
        <trans-unit id="435226da679aca3541980cba99db2b6a022eb075" translate="yes" xml:space="preserve">
          <source>float ASC</source>
          <target state="translated">flotar ASC</target>
        </trans-unit>
        <trans-unit id="2d71871d1b3a78e77346189fe7602ee55e8ea317" translate="yes" xml:space="preserve">
          <source>i.e., in order to sort first by a, then b, then c, the correct clause would be</source>
          <target state="translated">es decir,con el fin de clasificar primero por a,luego b,luego c,la cláusula correcta sería</target>
        </trans-unit>
        <trans-unit id="b13b3070cef0cf3ace0f7f9a184ef548be1c6c51" translate="yes" xml:space="preserve">
          <source>iterability of mixed DESC</source>
          <target state="translated">iterabilidad del DESC mixto</target>
        </trans-unit>
        <trans-unit id="acb5e075da5022ac6ab70076026e7f717ee2621a" translate="yes" xml:space="preserve">
          <source>mixed ASC</source>
          <target state="translated">CSA mixto</target>
        </trans-unit>
        <trans-unit id="641c176e662a04a9783622e92508da3d59203cd6" translate="yes" xml:space="preserve">
          <source>natString ASC</source>
          <target state="translated">natString ASC</target>
        </trans-unit>
        <trans-unit id="92be7e45d7a0699bc3a9c9723e9cb645e47c33fd" translate="yes" xml:space="preserve">
          <source>natString length ASC</source>
          <target state="translated">Longitud de natString ASC</target>
        </trans-unit>
        <trans-unit id="d4a4c6438367ffdd711c2e9f3c7389c021225aed" translate="yes" xml:space="preserve">
          <source>object ASC</source>
          <target state="translated">objeto ASC</target>
        </trans-unit>
        <trans-unit id="678cf1c73e8c23cc8b56f38065ff425f1804790c" translate="yes" xml:space="preserve">
          <source>property count of object ASC</source>
          <target state="translated">cuenta de propiedades del objeto ASC</target>
        </trans-unit>
        <trans-unit id="2c81b69885c711d3fc704aa7da591bfb0542dc5e" translate="yes" xml:space="preserve">
          <source>to produce</source>
          <target state="translated">para producir</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
