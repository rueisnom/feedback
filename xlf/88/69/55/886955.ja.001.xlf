<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/886955">
    <body>
      <group id="886955">
        <trans-unit id="b80218e3b1fda6a74915e2cd76a397b53bea82b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for (int j = 0; j &amp;lt; 5; j++) //inner loop&lt;/code&gt; should be replaced with 
    &lt;code&gt;for (int j = 0; j &amp;lt; 5 &amp;amp;&amp;amp; !exitloops; j++)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;for (int j = 0; j &amp;lt; 5; j++) //inner loop&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は &lt;/font&gt;&lt;/font&gt; &lt;code&gt;for (int j = 0; j &amp;lt; 5 &amp;amp;&amp;amp; !exitloops; j++)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a79903480a5608a4282c3838d1bbe7ef700e434b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Demo&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Demo&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d0c515d7701957d390fde29b5dc185a8c6fd250e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Labeled break&lt;/strong&gt; concept is used to break out nested loops in java, by using labeled break you can break nesting of loops at any position. 
Example 1:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ラベル付きブレークの&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;概念は、Javaでネストされたループを分割するために使用されます。ラベル付きブレークを使用すると、任意の位置でループのネストを分割できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例1：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b93a391f1faa76420accc9609dd3538ae9f49d29" translate="yes" xml:space="preserve">
          <source>Another one solution, mentioned without example (it actually works in prod code).</source>
          <target state="translated">もう一つの解決策は、例なしで言及されています(それは実際にprodコードで動作します)。</target>
        </trans-unit>
        <trans-unit id="03c3b0b78237c426d7cc39e55ada2dc9980e4db7" translate="yes" xml:space="preserve">
          <source>Basically a question to the author of this question: what do you consider of this approach?</source>
          <target state="translated">基本的にこの質問の筆者への質問:このアプローチをどう考えるか?</target>
        </trans-unit>
        <trans-unit id="00253e5bdef32f8243119f58a7e8622ef932fc35" translate="yes" xml:space="preserve">
          <source>Best and Easy Method..</source>
          <target state="translated">最高に簡単な方法...</target>
        </trans-unit>
        <trans-unit id="a51a19a5279c5da7c6229518fcaa3aafe6a43efe" translate="yes" xml:space="preserve">
          <source>Demo for &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, and &lt;code&gt;label&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;break&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;continue&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;label&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デモ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="714dd294466601df7e364f9d958705838a3e449f" translate="yes" xml:space="preserve">
          <source>Depending on your function, you can also exit/return from the inner loop:</source>
          <target state="translated">機能によっては、内側のループからexitreturnすることもできます。</target>
        </trans-unit>
        <trans-unit id="7bf29d2791633fd06f407774f23e932ef99822f5" translate="yes" xml:space="preserve">
          <source>Even creating a flag for the outer loop and checking that after each execution of the inner loop can be the answer.</source>
          <target state="translated">外側のループのフラグを作成して、内側のループを実行するたびにそれを確認することさえも答えになります。</target>
        </trans-unit>
        <trans-unit id="78c9fbed76afd9bba65ba1e6e64d64ff2fa0fa65" translate="yes" xml:space="preserve">
          <source>Example : if &lt;code&gt;i = 3&lt;/code&gt; and &lt;code&gt;j=2&lt;/code&gt; then condition is &lt;code&gt;false&lt;/code&gt;.  But in next iteration of inner loop &lt;code&gt;j=3&lt;/code&gt;  then condition &lt;code&gt;(i*j)&lt;/code&gt; become &lt;code&gt;9&lt;/code&gt; which is &lt;code&gt;true&lt;/code&gt; but inner loop will be continue till &lt;code&gt;j&lt;/code&gt; become &lt;code&gt;5&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i = 3&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;j=2&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合、条件は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;false&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、次の内部ループ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;j=3&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;反復では&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 、条件&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(i*j)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;9&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なり、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が、内部ループは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;j&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;5&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なる&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;まで続き&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="15d490ab75c9ae376feb389a26cbf1fd3b307bf4" translate="yes" xml:space="preserve">
          <source>For some cases, We can use &lt;code&gt;while&lt;/code&gt; loop effectively here.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;while&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; whileループを効果的に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用できる場合が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ca04e794e098c7ec881747c012c7b728e25dc1c2" translate="yes" xml:space="preserve">
          <source>HERE! So, while a simple break will not work, it can be made to work using &lt;code&gt;continue&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここに！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、単純なブレークは機能しませんが、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;continue&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して機能させることができます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ae97d123a5c02896f81ed64cd60fbd3952c67281" translate="yes" xml:space="preserve">
          <source>Here condition1 is the condition which is used to break from loop K and J.
And condition2 is the condition which is used to break from loop K , J and I.</source>
          <target state="translated">ここで、条件1はループKとJから抜け出すための条件であり、条件2はループK,J,Iから抜け出すための条件である。</target>
        </trans-unit>
        <trans-unit id="7bb190f1fd4e808ae823ccc6e2ddd755472a4cef" translate="yes" xml:space="preserve">
          <source>Here, in this case complete nested loops should be exit if condition is &lt;code&gt;True&lt;/code&gt; . But if we use  &lt;code&gt;exitloops&lt;/code&gt; only to the upper &lt;code&gt;loop&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで、この場合、条件が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;True&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合、ネストされた完全なループは終了し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、上部&lt;/font&gt; &lt;code&gt;loop&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;のみ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;exitloops&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用すると &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6f1883baa939d1492a6bbca0266f12b98e57a661" translate="yes" xml:space="preserve">
          <source>How do I break out of nested loops in Java</source>
          <target state="translated">Javaで入れ子になったループから抜け出すには</target>
        </trans-unit>
        <trans-unit id="1641069548492a330a8d79d7d6f3ca1639fa56ff" translate="yes" xml:space="preserve">
          <source>I don't want to put the inner loop in a different method.</source>
          <target state="translated">内側のループを別のメソッドに入れたくない。</target>
        </trans-unit>
        <trans-unit id="0e4b32662ba99153eef3b001b9db00df4642d4a3" translate="yes" xml:space="preserve">
          <source>I don't want to rerun the loops. When breaking I'm finished with the execution of the loop block.</source>
          <target state="translated">ループを再実行したくない ブレークするときはループブロックの実行を終えている。</target>
        </trans-unit>
        <trans-unit id="2f43fbe6a7ce84061470cb9c44b3cafb47c7a959" translate="yes" xml:space="preserve">
          <source>I needed to do a similar thing, but I chose not to use the enhanced for loop to do it.</source>
          <target state="translated">私も同じようなことをする必要がありましたが、それをするためにenhanced for loopを使わないことにしました。</target>
        </trans-unit>
        <trans-unit id="0b0b597307ef51e52f0057990c60d944040d6d87" translate="yes" xml:space="preserve">
          <source>I never use labels. It seems like a bad practice to get into. Here's what I would do:</source>
          <target state="translated">ラベルは絶対に使わない。入り込むには悪い習慣のように思えます。私ならこうします。</target>
        </trans-unit>
        <trans-unit id="4fb4907d11eaea2fda5746575eee2834201676ac" translate="yes" xml:space="preserve">
          <source>I prefer to add an explicit &quot;exit&quot; to the loop tests.  It makes it clear to 
any casual reader that the loop may terminate early.</source>
          <target state="translated">私はループテストに明示的な &quot;exit&quot; を追加することを好みます。これは、ループが早期に終了する可能性があることを、どんなカジュアルな読者にも明らかにします。</target>
        </trans-unit>
        <trans-unit id="9e59aa083440a052831b896bf3209559123e43cd" translate="yes" xml:space="preserve">
          <source>I've got a nested loop construct like this:</source>
          <target state="translated">こんな感じで入れ子になったループ構造になっています。</target>
        </trans-unit>
        <trans-unit id="ef4c2ae6ae07b8556052851b28865d28a19f994f" translate="yes" xml:space="preserve">
          <source>If it is inside some function why don't you just return it:</source>
          <target state="translated">何かの関数の中にあるのであれば、なぜそれを返すだけではいけないのでしょうか。</target>
        </trans-unit>
        <trans-unit id="72a3f244ec365265fd933b777fd9a3d152ddbc5b" translate="yes" xml:space="preserve">
          <source>If it's a new implementation, you can try rewriting the logic as if-else_if-else statements.</source>
          <target state="translated">新しい実装であれば、if-else_if-else文としてロジックを書き換えてみてください。</target>
        </trans-unit>
        <trans-unit id="6fe2143eafdfb9707d1f5d8e7840029bebf4615c" translate="yes" xml:space="preserve">
          <source>If you are simply porting the logic from one programming language to Java and just want to get the thing working you can try using &lt;a href=&quot;https://stackoverflow.com/questions/26430630/how-to-use-goto-statement-correctly&quot;&gt;labels&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ロジックを1つのプログラミング言語からJavaに移植するだけで、機能を動作させたい場合は、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/26430630/how-to-use-goto-statement-correctly&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ラベル&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用してみてください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c7793f874dfff7be1c372afeefeffcc890f3c89b" translate="yes" xml:space="preserve">
          <source>If you don't like &lt;code&gt;break&lt;/code&gt;s and &lt;code&gt;goto&lt;/code&gt;s, you can use a &quot;traditional&quot; for loop instead the for-in, with an extra abort condition:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;break&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;goto&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が気に入らない場合は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、for-inの代わりに「従来の」forループを使用して、追加の中止条件を指定できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b30d02d8a564b22e88f0bbac8298ed06cc1425be" translate="yes" xml:space="preserve">
          <source>It's just tricky solution.</source>
          <target state="translated">ただのトリッキーな解決策です。</target>
        </trans-unit>
        <trans-unit id="b41491844b4fee5eb3780c6db75353778189de02" translate="yes" xml:space="preserve">
          <source>It's seem used rare, but useful.</source>
          <target state="translated">レアな中古のようですが、重宝しています。</target>
        </trans-unit>
        <trans-unit id="7922684a0aa16c78a44f4be9623f063ac4e44187" translate="yes" xml:space="preserve">
          <source>Java 8 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/?java/util/stream/Stream.html&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; solution:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Java 8 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/?java/util/stream/Stream.html&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ソリューション：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9920e89b272f48d443bc6d71b7e7946f16e6c309" translate="yes" xml:space="preserve">
          <source>Java does not have a goto feature like there is in C++. But still, &lt;code&gt;goto&lt;/code&gt; is a reserved keyword in Java. They might implement it in the future. For your question, the answer is that there is something called label in Java to which you can apply a &lt;code&gt;continue&lt;/code&gt; and &lt;code&gt;break&lt;/code&gt; statement. Find the code below:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Javaには、C ++にあるようなgoto機能がありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、それでも&lt;/font&gt;&lt;/font&gt; &lt;code&gt;goto&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はJavaの予約キーワードです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;彼らは将来それを実装するかもしれません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたの質問の答えは、Javaにはlabelと呼ばれるもの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;continue&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あり、それに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;continue&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステートメント&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;break&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステートメントを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;適用できる&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ということです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下のコードを見つけてください：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f7224adc0a9aeb565861c82f51fabacf3aa83aba" translate="yes" xml:space="preserve">
          <source>Java keywords &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; have a default value. It's the &quot;nearest loop&quot;, and today, after a few years of using Java, I just got it!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Javaキーワードの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;break&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;continue&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;にはデフォルト値があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それは「最も近いループ」であり、今日、Javaを使用して数年後、私はちょうどそれを手に入れました！&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a60ffd0afee9274156c5e8f0ec19b4046101695b" translate="yes" xml:space="preserve">
          <source>Like @1800 INFORMATION suggestion, use the condition that breaks the inner loop as a condition on the outer loop:</source>
          <target state="translated">1800 INFORMATIONの提案のように、内側のループを破る条件を外側のループの条件として使用します。</target>
        </trans-unit>
        <trans-unit id="6a4c3556cea7b4f21dab2145c9cf3b709127bdb3" translate="yes" xml:space="preserve">
          <source>Like other answerers, I'd definitely &lt;em&gt;prefer&lt;/em&gt; to put the loops in a different method, at which point you can just return to stop iterating completely. This answer just shows how the requirements in the question can be met.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他の回答者と同じように、私は間違いだろう&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;好む&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなただけの完全反復を停止するには戻ることができた時点で、別の方法でループを配置します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この回答は、質問の要件を満たす方法を示しています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="59b86486aed4edafd59a372a9da15c32460385f0" translate="yes" xml:space="preserve">
          <source>Like this:</source>
          <target state="translated">こんな感じで。</target>
        </trans-unit>
        <trans-unit id="29f4404959c7c0a6c41ca8b1810015f896d43042" translate="yes" xml:space="preserve">
          <source>Major cons:</source>
          <target state="translated">主な欠点。</target>
        </trans-unit>
        <trans-unit id="0b10c79c21cc1299b74a5fa1d170a9e805cf990c" translate="yes" xml:space="preserve">
          <source>Matching the example for the accepted answer:</source>
          <target state="translated">受理した答えの例に合わせる。</target>
        </trans-unit>
        <trans-unit id="f68b501dca849bdcfec47f5f3182cb5d63a15bbb" translate="yes" xml:space="preserve">
          <source>Now how can I break out of both loops? I've looked at similar questions, but none concerns Java specifically. I couldn't apply these solutions because most used gotos.</source>
          <target state="translated">さて、どのようにして両方のループから抜け出すことができますか?似たような質問を見てきましたが、特にJavaに関係するものはありませんでした。これらの解決策を適用することはできませんでした。</target>
        </trans-unit>
        <trans-unit id="dd855e0582846b428d4ff684d2a2bf7047ebd078" translate="yes" xml:space="preserve">
          <source>Of course &lt;code&gt;BreakLoopException&lt;/code&gt; should be internal, private and accelerated with no-stack-trace:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もちろん、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;BreakLoopException&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は内部、プライベート、およびスタックトレースなしで高速化する必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="729ab7b062db3756c61317e2f5c496fcffb5beea" translate="yes" xml:space="preserve">
          <source>Otherwise you can try setting a flag when that special condition has occured and check for that flag in each of your loop-conditions.</source>
          <target state="translated">それ以外の場合は、その特別な条件が発生したときにフラグを設定して、ループ条件のそれぞれでそのフラグがあるかどうかをチェックしてみてください。</target>
        </trans-unit>
        <trans-unit id="5fc3248b44091c796b8422747948e1748693ff1f" translate="yes" xml:space="preserve">
          <source>Rather unusual approach but in terms of code length (&lt;strong&gt;not performance&lt;/strong&gt;) this is the easiest thing you could do:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;かなり珍しいアプローチですが、コード長（&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パフォーマンスで&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はあり&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）に関しては、これが最も簡単な方法です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c9a39daa646bbffb5868fc72e3b1d7c68660d1ba" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;http://[http://javarevisited.blogspot.com/2012/05/break-continue-and-lablel-in-loop-java.html][1]&quot;&gt;this article&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;a href=&quot;http://[http://javarevisited.blogspot.com/2012/05/break-continue-and-lablel-in-loop-java.html][1]&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この記事を&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照し&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;てください&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fb5e5ddb54f14f9f6cc2264696bbc253737e6364" translate="yes" xml:space="preserve">
          <source>So it is just handling the case via a different approach.</source>
          <target state="translated">つまり、別のアプローチで対応しているだけなのです。</target>
        </trans-unit>
        <trans-unit id="0961d6292a7a7b63d4893bd417b9ab9653dd5060" translate="yes" xml:space="preserve">
          <source>So, it must use &lt;code&gt;exitloops&lt;/code&gt; to the inner loops too.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内部ループにも&lt;/font&gt;&lt;/font&gt; &lt;code&gt;exitloops&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用する必要があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fd5a417c54f2754874523bc7c3eef977e0b41e42" translate="yes" xml:space="preserve">
          <source>Technically the correct answer is to label the outer loop. In practice if you want to exit at any point inside an inner loop then you would be better off externalizing the code into a method (a static method if needs be) and then call it.</source>
          <target state="translated">技術的には外側のループにラベルを付けるのが正解です。実際には、内側のループ内の任意のポイントで終了したい場合は、コードをメソッド(必要に応じて静的メソッド)に外部化してからそれを呼び出す方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="5add78a94de4e9e5774dc34e49d99ba9bb472e75" translate="yes" xml:space="preserve">
          <source>That would pay off for readability.</source>
          <target state="translated">それは読みやすさのためにも報われるだろう。</target>
        </trans-unit>
        <trans-unit id="f5936f96c73f4fc49a5de7948852771e6dad0b01" translate="yes" xml:space="preserve">
          <source>The code would become something like that:</source>
          <target state="translated">コードはこんな感じになります。</target>
        </trans-unit>
        <trans-unit id="4488ad5716b91a9fd25cc56d0a0a82dbe360efef" translate="yes" xml:space="preserve">
          <source>The pros:</source>
          <target state="translated">賛成派。</target>
        </trans-unit>
        <trans-unit id="1d2fb16730fa6f69cb42e13c9ca6a79eed1dfd58" translate="yes" xml:space="preserve">
          <source>Then inner loop will continues, because there is no extra flag that notify this inner loop to exit.</source>
          <target state="translated">この場合、内部ループの終了を通知する余分なフラグがないため、内部ループは継続されます。</target>
        </trans-unit>
        <trans-unit id="345205710c1209079bdf05b4d146f25fe0a01f36" translate="yes" xml:space="preserve">
          <source>This prints:</source>
          <target state="translated">このプリント。</target>
        </trans-unit>
        <trans-unit id="eac348169c36370306c6c056f15fafa5a8e2e56d" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;condition&lt;/code&gt; as a flag for when you are done processing. Then the inner loop only continues on while the condition has not been met. Either way, the outer loop will keep on chuggin'.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;処理が完了したときのフラグとして&lt;/font&gt;&lt;/font&gt; &lt;code&gt;condition&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に、条件が満たされていない間だけ内側のループが継続します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どちらの方法でも、外側のループは継続します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5eb75d52e78a3eb68468ce70c25921c31b71e2f9" translate="yes" xml:space="preserve">
          <source>Use Labels.</source>
          <target state="translated">ラベルを使用します。</target>
        </trans-unit>
        <trans-unit id="8d80228a3c779475dbd9c704d3364349b0250118" translate="yes" xml:space="preserve">
          <source>Use a function:</source>
          <target state="translated">関数を使用します。</target>
        </trans-unit>
        <trans-unit id="ee1f4243c8caa5dd919d36be9b75ce1b513c90ea" translate="yes" xml:space="preserve">
          <source>Usually in such cases, it is coming in scope of more meaningful logic, let's say some searching or manipulating over some of the iterated 'for'-objects in question, so I usually use the functional approach:</source>
          <target state="translated">このような場合、通常は、より意味のあるロジックの範囲内に入ってくるので、例えば、問題の反復された'for'オブジェクトのいくつかを検索したり、操作したりすることがあります。</target>
        </trans-unit>
        <trans-unit id="f157b02589f999a849fef1992bd0a4c36e324d2e" translate="yes" xml:space="preserve">
          <source>You can break from all loops without using any label: and flags.</source>
          <target state="translated">ラベル:やフラグを使わずに、すべてのループから抜け出すことができます。</target>
        </trans-unit>
        <trans-unit id="3fd8f7d4956f2ab2d824524b33a25092ec6e462e" translate="yes" xml:space="preserve">
          <source>You can do the following:</source>
          <target state="translated">以下のようなことができます。</target>
        </trans-unit>
        <trans-unit id="32327597d742863f4106faef3a95f2885c74247c" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;break&lt;/code&gt; with a label for the outer loop. For example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;外側のループには、ラベル付きの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;break&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用でき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例えば：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ecfc0ddac85222b6fd9341d212351dac369e5977" translate="yes" xml:space="preserve">
          <source>You can use a named block around the loops:</source>
          <target state="translated">ループの周りに名前付きブロックを使うことができます。</target>
        </trans-unit>
        <trans-unit id="1eb9e3ba667a974e54502653e2fa647d4111d55d" translate="yes" xml:space="preserve">
          <source>You can use a temporary variable:</source>
          <target state="translated">テンポラリ変数を使うことができます。</target>
        </trans-unit>
        <trans-unit id="eb41410fd67d3ca23c9dba4fc82e310b4a4cc51b" translate="yes" xml:space="preserve">
          <source>You can use labels:</source>
          <target state="translated">ラベルを使うことができます。</target>
        </trans-unit>
        <trans-unit id="1a28340e663d04f445ec23650c15a3911665272d" translate="yes" xml:space="preserve">
          <source>higher ratio of readability</source>
          <target state="translated">高可読率</target>
        </trans-unit>
        <trans-unit id="94e3bb6d9756d935f1a41f3191b86169b317152b" translate="yes" xml:space="preserve">
          <source>more consumption of computing cycles, meaning it is slower from algorithmic point-of-view</source>
          <target state="translated">より多くの計算サイクルを消費し、アルゴリズムの観点から見て遅いことを意味します。</target>
        </trans-unit>
        <trans-unit id="c736ca7a47dfa39a871e2ff07e4f16881202333d" translate="yes" xml:space="preserve">
          <source>more typing work</source>
          <target state="translated">打ち込み作業</target>
        </trans-unit>
        <trans-unit id="a4a04e26ff4fd1ceb438e1e02c61be746198e315" translate="yes" xml:space="preserve">
          <source>roughly twice more lines</source>
          <target state="translated">倍行</target>
        </trans-unit>
        <trans-unit id="34a4144ebb3342ebe9e8a15465b26de9d123707a" translate="yes" xml:space="preserve">
          <source>set a local variable to &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ローカル変数を&lt;/font&gt; &lt;code&gt;false&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;設定し&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4cfcd7ba61f12f8a2dad6c2201d363e067338c78" translate="yes" xml:space="preserve">
          <source>set that variable &lt;code&gt;true&lt;/code&gt; in the first loop, when you want to break</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ブレークしたいときに、最初のループで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その変数を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;設定します&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71502d131f7623576497a9b05dd39789ca2d9e65" translate="yes" xml:space="preserve">
          <source>suppose there are 3 loops and you want to terminate the loop3:
Example 2:</source>
          <target state="translated">3つのループがあり、ループ3を終了させたいとします。</target>
        </trans-unit>
        <trans-unit id="6e3431d8aa954130778daf3df2969533881e3624" translate="yes" xml:space="preserve">
          <source>the higher ratio of re-usability and control of
searching/manipulating logic without</source>
          <target state="translated">再利用可能性と検索操作ロジックの制御の比率が高い方が無難です。</target>
        </trans-unit>
        <trans-unit id="658aa4061228347e98af08978b9f65d02f0a0774" translate="yes" xml:space="preserve">
          <source>the higher ratio to separation of concerns because of functional granularity</source>
          <target state="translated">機能的な粒度のため、懸念事項の分離に高い比率</target>
        </trans-unit>
        <trans-unit id="51a4f8da411b003dd1a7f4d88389b1e786b6bc9a" translate="yes" xml:space="preserve">
          <source>the methods are not long, thus they are more compact and easier to comprehend</source>
          <target state="translated">メソッドは長くないので、よりコンパクトで理解しやすいです。</target>
        </trans-unit>
        <trans-unit id="d297c689626e6ef1a355b234d0b343f5aa22d248" translate="yes" xml:space="preserve">
          <source>then you can check in the outer loop, that whether the condition is set then break from the outer loop as well.</source>
          <target state="translated">とすると、条件が設定されているかどうかを外側のループで確認して、外側のループから抜け出すことができます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
