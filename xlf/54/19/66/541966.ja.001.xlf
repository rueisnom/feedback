<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/541966">
    <body>
      <group id="541966">
        <trans-unit id="9018cced31f6138d2ddd1c43920d6dd0330ffe68" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://android-developers.blogspot.com/2010/07/multithreading-for-performance.html&quot;&gt;Multithreading For Performance&lt;/a&gt;, a tutorial by Gilles Debunne.</source>
          <target state="translated">&lt;a href=&quot;http://android-developers.blogspot.com/2010/07/multithreading-for-performance.html&quot;&gt;パフォーマンスのためのマルチスレッド&lt;/a&gt; 、Gilles Debunneによるチュートリアル。</target>
        </trans-unit>
        <trans-unit id="798b84b22fd0f6bd56860a5243bfbaaaef435816" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://droidparts.org&quot;&gt;DroidParts&lt;/a&gt; has &lt;a href=&quot;https://github.com/yanchenko/droidparts/blob/master/droidparts/src/org/droidparts/net/image/ImageFetcher.java&quot;&gt;ImageFetcher&lt;/a&gt; that requires zero configuration to get started.</source>
          <target state="translated">&lt;a href=&quot;http://droidparts.org&quot;&gt;DroidPartsに&lt;/a&gt;は&lt;a href=&quot;https://github.com/yanchenko/droidparts/blob/master/droidparts/src/org/droidparts/net/image/ImageFetcher.java&quot;&gt;ImageFetcher&lt;/a&gt;があり、開始するために構成が必要ありません。</target>
        </trans-unit>
        <trans-unit id="183ba1a25f1145ba5a208728aa4658376ab09552" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/koush/UrlImageViewHelper&quot;&gt;URLImageViewHelper&lt;/a&gt; is an amazing library that helps you to do that.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/koush/UrlImageViewHelper&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;URLImageViewHelper&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、そのための素晴らしいライブラリです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b56dd7cd65b139c0730fb4cc7f6b6504e9215113" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AsyncTasks&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AsyncTasks&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="7f6af57be25006d6b78bce216a8bf2c5aaba7d0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;// For a simple view:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;//単純なビューの場合：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="816bc47998d3cfc0c1894905f32b58536c862bdc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1.&lt;/strong&gt;&lt;a href=&quot;http://square.github.io/picasso/&quot;&gt;&lt;strong&gt;Picasso&lt;/strong&gt;&lt;/a&gt; allows for hassle-free image loading in your application&amp;mdash;often in one line of code!</source>
          <target state="translated">&lt;strong&gt;1.&lt;/strong&gt; &lt;a href=&quot;http://square.github.io/picasso/&quot;&gt;&lt;strong&gt;Picassoを&lt;/strong&gt;&lt;/a&gt;使用すると、アプリケーションに手間をかけずに画像を読み込むことができます&lt;strong&gt;。&lt;/strong&gt;多くの場合、1行のコードで読み込みます。</target>
        </trans-unit>
        <trans-unit id="7be806b05c98847268fc9a8f9d99ac5039cef2d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2.&lt;/strong&gt;&lt;a href=&quot;https://github.com/bumptech/glide&quot;&gt;&lt;strong&gt;Glide&lt;/strong&gt;&lt;/a&gt; An image loading and caching library for Android focused on smooth scrolling</source>
          <target state="translated">&lt;strong&gt;2.&lt;/strong&gt; &lt;a href=&quot;https://github.com/bumptech/glide&quot;&gt;&lt;strong&gt;Glide&lt;/strong&gt;&lt;/a&gt; Android向けの画像読み込みおよびキャッシュライブラリ。スムーズなスクロールに焦点を当てています。</target>
        </trans-unit>
        <trans-unit id="a393d0b816addef5a402e631cedfacd8ce890f18" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;3.&lt;/strong&gt;&lt;a href=&quot;https://github.com/facebook/fresco&quot;&gt;&lt;strong&gt;fresco&lt;/strong&gt;&lt;/a&gt;  is a powerful system for displaying images in Android 
   applications.Fresco takes care of image loading and display, so you don't have 
  to.</source>
          <target state="translated">&lt;strong&gt;3.&lt;/strong&gt; &lt;a href=&quot;https://github.com/facebook/fresco&quot;&gt;&lt;strong&gt;フレスコ&lt;/strong&gt;&lt;/a&gt;は、Androidアプリケーションで画像を表示するための強力なシステムです&lt;strong&gt;。&lt;/strong&gt; &lt;strong&gt;フレスコ&lt;/strong&gt;は、画像のロードと表示を処理するので、あなたがする必要はありません。</target>
        </trans-unit>
        <trans-unit id="533616d8543a0514115aabefebaed2b06ff667be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Features&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Features&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="80125fcb2b3f9dd8457bc073a5ee9e056404bba4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fresco by Facebook&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Facebookによるフレスコ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="096e6b62db1cbbcc91229ae91ed9c9d782560672" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Getting Started with Fresco&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;フレスコ入門&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a0d14cc9a2351dbffe0c64071cbb0db0247c5e8e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Glide&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Glide&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ad15d41133a48151a3140e3573e291fff6e45b30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Picasso&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Picasso&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eaf9f0c6c43a1aa39ce3589757aaf6f4968b667c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Picasso&lt;/strong&gt;  is a library specifically for this purpose, in-fact it will manage cache and all other network operations automatically.You will have to add library in your project and just write a single line of code to load image from remote URL.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Picasso&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; は、この目的専用のライブラリです。実際には、キャッシュやその他のすべてのネットワーク操作を自動的に管理します。プロジェクトにライブラリを追加し、コードを1行書くだけで、リモートURLから画像を読み込む必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1779f3260972f4945e5aafba1c119ab62a1260e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update: Note that this answer is pretty ineffective now. The Garbage Collector acts aggressively on SoftReference and WeakReference, so this code is NOT suitable for new apps.&lt;/strong&gt;  (Instead, try libraries like &lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;Universal Image Loader&lt;/a&gt; suggested in other answers.)</source>
          <target state="translated">&lt;strong&gt;更新：この回答は現在かなり効果がないことに注意してください。&lt;/strong&gt; &lt;strong&gt;ガベージコレクターはSoftReferenceとWeakReferenceに対して積極的に動作するため、このコードは新しいアプリには適していません。&lt;/strong&gt; （代わりに、他の回答で提案されている&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;Universal Image Loaderの&lt;/a&gt;ようなライブラリを試してください。）</target>
        </trans-unit>
        <trans-unit id="8287fba00f66a794e24419e707edaed6f7516403" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use Gradle:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Gradleを使用する：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0712dbc27867fa22b927a1646b0acb90fc529253" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;placeholder&lt;/em&gt;&lt;code&gt;Drawable&lt;/code&gt; while you download.</source>
          <target state="translated">ダウンロード中の &lt;code&gt;Drawable&lt;/code&gt; &lt;em&gt;プレースホルダー&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="ba33e57daf2c7bbee1881d25bd8b1261c5ae341f" translate="yes" xml:space="preserve">
          <source>A hard, limited size, &lt;code&gt;FIFO cache&lt;/code&gt;.</source>
          <target state="translated">ハードで制限されたサイズの &lt;code&gt;FIFO cache&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6f91f49d93710992afbcb24bbb877c16dd24f9a8" translate="yes" xml:space="preserve">
          <source>A powerful image downloading and caching library for Android.</source>
          <target state="translated">Android用の強力な画像ダウンロード・キャッシングライブラリ。</target>
        </trans-unit>
        <trans-unit id="87494a016436ec870bce507736b1268a0646f83b" translate="yes" xml:space="preserve">
          <source>A soft, easily &lt;code&gt;garbage collect&lt;/code&gt;-ed cache.</source>
          <target state="translated">ソフトで簡単に &lt;code&gt;garbage collect&lt;/code&gt; キャッシュ。</target>
        </trans-unit>
        <trans-unit id="d257242b66cc8b23dd357a521cdb7043c930f2b3" translate="yes" xml:space="preserve">
          <source>Add this dependency in your gradle file.</source>
          <target state="translated">この依存関係を gradle ファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="9c9be9ec74a7b96021d89ddc180c178c76b32ff1" translate="yes" xml:space="preserve">
          <source>All above code have their own worth but with my personal experience just give a try with Picasso.</source>
          <target state="translated">上記のすべてのコードは、自分の価値を持っていますが、私の個人的な経験では、ちょうどピカソで試してみてください。</target>
        </trans-unit>
        <trans-unit id="d0f94c4493c1c6cb4ab447af0d7981efcecbd8f2" translate="yes" xml:space="preserve">
          <source>And here is the java code for it.</source>
          <target state="translated">そして、ここにそのためのjavaコードがあります。</target>
        </trans-unit>
        <trans-unit id="a26989261475cacdd94de4844a353645cb3ac4b3" translate="yes" xml:space="preserve">
          <source>Android 2.0+ support</source>
          <target state="translated">Android 2.0+対応</target>
        </trans-unit>
        <trans-unit id="dddf73cd98dcce7c884fe24956533693e61e8e3f" translate="yes" xml:space="preserve">
          <source>As an example:</source>
          <target state="translated">一例として。</target>
        </trans-unit>
        <trans-unit id="bb0dab232f949b5954e21e1c5ccbcd10f611bcde" translate="yes" xml:space="preserve">
          <source>Asynchronously load images from network or app resources with one line of code</source>
          <target state="translated">1行のコードでネットワークまたはアプリのリソースから画像を非同期にロードします。</target>
        </trans-unit>
        <trans-unit id="5227a496f6fa4a1e4e5d3faf16fe1091f04e4b98" translate="yes" xml:space="preserve">
          <source>Automatic &lt;code&gt;ListView&lt;/code&gt; detection</source>
          <target state="translated">&lt;code&gt;ListView&lt;/code&gt; 自動検出</target>
        </trans-unit>
        <trans-unit id="ebf63a0fa6c6a4d9de25d6e5bd8864d15f55d9cc" translate="yes" xml:space="preserve">
          <source>Automatic disk and memory caching</source>
          <target state="translated">ディスクとメモリの自動キャッシング</target>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="translated">基本的な使い方</target>
        </trans-unit>
        <trans-unit id="9743eff7d22a9b4eea0040c6a752920c001d6b41" translate="yes" xml:space="preserve">
          <source>Basically &lt;a href=&quot;http://developer.android.com/resources/samples/XmlAdapters/src/com/example/android/xmladapters/ImageDownloader.html&quot;&gt;this ImageDownloader&lt;/a&gt; is your answer (as it covers most of your requirements). Some you can also implement in that.</source>
          <target state="translated">基本的に、 &lt;a href=&quot;http://developer.android.com/resources/samples/XmlAdapters/src/com/example/android/xmladapters/ImageDownloader.html&quot;&gt;このImageDownloader&lt;/a&gt;はあなたの答えです（ほとんどの要件をカバーしているため）。 その中に実装できるものもあります。</target>
        </trans-unit>
        <trans-unit id="216c9fa7af079b1a641e7c3d202599ed755e6033" translate="yes" xml:space="preserve">
          <source>Can do custom transformations</source>
          <target state="translated">カスタム変換が可能</target>
        </trans-unit>
        <trans-unit id="9318ada750f26ac931415a060879f5f1ffa7a63d" translate="yes" xml:space="preserve">
          <source>Check my fork of &lt;a href=&quot;https://github.com/nicolasjafelle/LazyList&quot;&gt;LazyList&lt;/a&gt;. Basically, I improve the LazyList by delaying the call of the ImageView and create two methods:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/nicolasjafelle/LazyList&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;LazyListの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;フォークを確認してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本的に、ImageViewの呼び出しを遅らせることでLazyListを改善し、2つのメソッドを作成します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="15635a8f596592ab5f9fdc74010ed766951639d8" translate="yes" xml:space="preserve">
          <source>Clone &lt;a href=&quot;https://github.com/yanchenko/droidparts/tree/master/droidparts-samples/DroidPartsGram&quot;&gt;DroidPartsGram&lt;/a&gt; for an example:</source>
          <target state="translated">例として&lt;a href=&quot;https://github.com/yanchenko/droidparts/tree/master/droidparts-samples/DroidPartsGram&quot;&gt;DroidPartsGramの&lt;/a&gt;クローンを作成します。</target>
        </trans-unit>
        <trans-unit id="9c1bd73863928ae57a0e0c21b5c901aa7645bee6" translate="yes" xml:space="preserve">
          <source>DIY =&amp;gt; Not the best solution but for a few images and if you want to go without the hassle of using others libraries</source>
          <target state="translated">DIY =&amp;gt;最善の解決策ではありませんが、いくつかの画像で、他のライブラリを使用する手間をかけずに移動したい場合</target>
        </trans-unit>
        <trans-unit id="438cebd9f0d14f47e7bf6d703e2380cac6f54796" translate="yes" xml:space="preserve">
          <source>Developers Google events</source>
          <target state="translated">開発者のGoogleのイベント</target>
        </trans-unit>
        <trans-unit id="a2afadd1373fc345254fa69a3e353f8bddc383a7" translate="yes" xml:space="preserve">
          <source>Don't forget to add the
  following permissions to your AndroidManifest.xml:</source>
          <target state="translated">AndroidManifest.xmlに以下のパーミッションを追加することを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="d4112e60ea8c98d0b47a2280640a4c629e467ea9" translate="yes" xml:space="preserve">
          <source>Efficiently decodes images.</source>
          <target state="translated">画像を効率よくデコードします。</target>
        </trans-unit>
        <trans-unit id="5a05bdc1b3e09d16042de7bf9c3957dc3f218437" translate="yes" xml:space="preserve">
          <source>Frequently updated</source>
          <target state="translated">頻繁に更新される</target>
        </trans-unit>
        <trans-unit id="7035acb6765a95f61d5955e17dabc2bff7a919f9" translate="yes" xml:space="preserve">
          <source>Fresco Documentation</source>
          <target state="translated">フレッシュドキュメント</target>
        </trans-unit>
        <trans-unit id="09f852ed44e9c5a73017f25944eacb1889d1551e" translate="yes" xml:space="preserve">
          <source>Fresco Github</source>
          <target state="translated">フレスコGithub</target>
        </trans-unit>
        <trans-unit id="77f754976dcf7161929381c562937a0c6e2c8c31" translate="yes" xml:space="preserve">
          <source>Fresco is a powerful system for displaying images in Android applications.</source>
          <target state="translated">Frescoは、Androidアプリで画像を表示するための強力なシステムです。</target>
        </trans-unit>
        <trans-unit id="d794ea1317ebc58b147b03481ef360b3f4fe1c99" translate="yes" xml:space="preserve">
          <source>Fresco takes care of image loading and display, so you don't have to. It will load images from the network, local storage, or local resources, and display a placeholder until the image has arrived. It has two levels of cache; one in memory and another in internal storage.</source>
          <target state="translated">Frescoは画像の読み込みと表示を代行してくれるので、その必要はありません。ネットワーク、ローカルストレージ、またはローカルリソースから画像を読み込み、画像が到着するまでプレースホルダを表示します。キャッシュはメモリと内部ストレージの2つのレベルに分かれています。</target>
        </trans-unit>
        <trans-unit id="a1e52f849fad98c5d827142abc12f7fbaf39c355" translate="yes" xml:space="preserve">
          <source>Give &lt;a href=&quot;https://code.google.com/p/android-query/wiki/ImageLoading&quot;&gt;Aquery&lt;/a&gt; a try. It has amazingly simple methods to load and cache images asynchronously.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与える&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://code.google.com/p/android-query/wiki/ImageLoading&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqueryに&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;試して。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;非同期で画像を読み込んでキャッシュする驚くほど簡単な方法があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8540a450329cc3a129f0eec42974857b5f19230e" translate="yes" xml:space="preserve">
          <source>Glide Image Loading Library</source>
          <target state="translated">グライド画像読み込みライブラリ</target>
        </trans-unit>
        <trans-unit id="9861e2cf521ab319396c15d906e3603fd6cebc91" translate="yes" xml:space="preserve">
          <source>Glide is a fast and efficient open source media management framework for Android that wraps media decoding, memory and disk caching, and resource pooling into a simple and easy to use interface.</source>
          <target state="translated">Glideは、メディアのデコード、メモリとディスクのキャッシング、リソースプーリングをシンプルで使いやすいインターフェースにまとめた、高速で効率的なAndroid用のオープンソースメディア管理フレームワークです。</target>
        </trans-unit>
        <trans-unit id="f9cec647494ceba78da65437e2ccc5b9d89b7160" translate="yes" xml:space="preserve">
          <source>Glide supports fetching, decoding, and displaying video stills, images, and animated GIFs. Glide includes a flexible api that allows developers to plug in to almost any network stack. By default Glide uses a custom HttpUrlConnection based stack, but also includes utility libraries plug in to Google's Volley project or Square's OkHttp library instead.</source>
          <target state="translated">Glideは、ビデオ静止画、画像、アニメーションGIFの取得、デコード、表示をサポートしています。Glide には柔軟な API が含まれており、開発者はほとんどのネットワークスタックにプラグインすることができます。デフォルトでは、Glide はカスタム HttpUrlConnection ベースのスタックを使用しますが、代わりに Google の Volley プロジェクトや Square の OkHttp ライブラリにプラグインするユーティリティライブラリも含まれています。</target>
        </trans-unit>
        <trans-unit id="69a2fd689dc7a41c0d5336a0c3e6536f22b9ed66" translate="yes" xml:space="preserve">
          <source>Glide's primary focus is on making scrolling any kind of a list of images as smooth and fast as possible, but Glide is also effective for almost any case where you need to fetch, resize, and display a remote image.</source>
          <target state="translated">Glideは、どんな種類の画像のリストでもスクロールを可能な限りスムーズかつ高速にすることに主眼を置いていますが、リモート画像の取得やリサイズ、表示など、ほとんどの場合にも効果的です。</target>
        </trans-unit>
        <trans-unit id="a0d9c2bfcd54203470e6f84a175aa39348bd1359" translate="yes" xml:space="preserve">
          <source>Google I/O 2013 volley image cache tutorial</source>
          <target state="translated">Google IO 2013のボレー画像キャッシュのチュートリアル</target>
        </trans-unit>
        <trans-unit id="7aae71a8229fac40e3a384eceda31032e6b265c2" translate="yes" xml:space="preserve">
          <source>Handling ImageView recycling and download cancellation in an adapter.
Complex image transformations with minimal memory use.
Automatic memory and disk caching.</source>
          <target state="translated">アダプタでImageViewのリサイクルとダウンロードキャンセルを処理します。メモリ使用量を最小限に抑えた複雑な画像変換 自動メモリおよびディスクキャッシング</target>
        </trans-unit>
        <trans-unit id="6ab19455b9c91e5525c05dc051a1d8078c6342e9" translate="yes" xml:space="preserve">
          <source>Has image loading progress callback.</source>
          <target state="translated">画像の読み込み進行状況のコールバックを持っています。</target>
        </trans-unit>
        <trans-unit id="bacaf3972ab4cd21d1bb275ef757a67747611566" translate="yes" xml:space="preserve">
          <source>Has simple cross-fade.</source>
          <target state="translated">シンプルなクロスフェードを持っています。</target>
        </trans-unit>
        <trans-unit id="a74ac6eef10d5f7d85b1dc82c41070528afff805" translate="yes" xml:space="preserve">
          <source>Have a look at &lt;a href=&quot;https://github.com/applidium/Shutterbug&quot;&gt;Shutterbug&lt;/a&gt;, Applidium's lightweight SDWebImage (a nice library on iOS) port to Android.
It supports asynchronous caching, stores failed URLs, handles concurrency well, and helpful subclasses are included.</source>
          <target state="translated">Applidiumの軽量なSDWebImage（iOSの素晴らしいライブラリ）をAndroidに移植する&lt;a href=&quot;https://github.com/applidium/Shutterbug&quot;&gt;Shutterbug&lt;/a&gt;をご覧ください。 非同期キャッシングをサポートし、失敗したURLを格納し、並行性を適切に処理し、役立つサブクラスが含まれています。</target>
        </trans-unit>
        <trans-unit id="981d3366d55b7e7b374bafaa71ee98ad9bc879a1" translate="yes" xml:space="preserve">
          <source>Here is how it looks like.</source>
          <target state="translated">こんな感じです。</target>
        </trans-unit>
        <trans-unit id="c0910f8fe8638c096d1f5b05529cb8fd5470a590" translate="yes" xml:space="preserve">
          <source>Here's the ideal code to cache and then call the above in getView of an adapter when retrieving the web image:</source>
          <target state="translated">ここでは、ウェブ画像を取得する際にアダプタのgetViewで上記をキャッシュして呼び出す理想的なコードを紹介します。</target>
        </trans-unit>
        <trans-unit id="9473002be7032befa5a38f7c117b38587c057f2f" translate="yes" xml:space="preserve">
          <source>Here's what I created to hold the images that my app is currently displaying. Please note that the &quot;Log&quot; object in use here is my custom wrapper around the final Log class inside Android.</source>
          <target state="translated">これは、私のアプリが現在表示している画像を保持するために作成したものです。ここで使用されている &quot;Log &quot;オブジェクトは、Android内の最終的なLogクラスのラッパーです。</target>
        </trans-unit>
        <trans-unit id="1fb9a64bead3c1faf47035368acecdff94e42a70" translate="yes" xml:space="preserve">
          <source>High performance loader - after examining the methods suggested here,
I used &lt;a href=&quot;http://negativeprobability.blogspot.com/2011/08/lazy-loading-of-images-in-listview.html&quot;&gt;Ben's solution&lt;/a&gt; with some changes -</source>
          <target state="translated">高性能ローダー-ここで提案された方法を検討した後、いくつかの変更を加えて&lt;a href=&quot;http://negativeprobability.blogspot.com/2011/08/lazy-loading-of-images-in-listview.html&quot;&gt;ベンのソリューション&lt;/a&gt;を使用しました-</target>
        </trans-unit>
        <trans-unit id="35d2d5116464670b1b5c41d08ee45d2d09f39452" translate="yes" xml:space="preserve">
          <source>How to lazy load images in ListView in Android</source>
          <target state="translated">AndroidでListViewで画像をダラダラ読み込む方法</target>
        </trans-unit>
        <trans-unit id="0c7927d4ea56b29ce50d9e6c7a0489950091343a" translate="yes" xml:space="preserve">
          <source>I also improved the ImageLoader by implementing a &lt;a href=&quot;http://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;singleton&lt;/a&gt; in this object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このオブジェクトに&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトン&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実装することにより、ImageLoaderも改善しました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7e657ad729b0aee42497dccabf84bc04c0421254" translate="yes" xml:space="preserve">
          <source>I am using a &lt;code&gt;ListView&lt;/code&gt; to display some images and captions associated with those images. I am getting the images from the Internet. Is there a way to lazy load images so while the text displays, the UI is not blocked and images are displayed as they are downloaded?</source>
          <target state="translated">&lt;code&gt;ListView&lt;/code&gt; を使用して、いくつかの画像とそれらの画像に関連付けられたキャプションを表示しています。 インターネットから画像を取得しています。 画像を遅延読み込みする方法はありますか？テキストが表示されている間、UIはブロックされず、ダウンロードされた画像が表示されますか？</target>
        </trans-unit>
        <trans-unit id="77a7f9b6d58b17818e6bed9ae30273cf0834aec4" translate="yes" xml:space="preserve">
          <source>I can recommend a different way that works like a charm: Android Query.</source>
          <target state="translated">私は魅力のように動作する別の方法をお勧めすることができます。Android Queryです。</target>
        </trans-unit>
        <trans-unit id="b31b0897acd8e54898ab53706d69b42d5d3c13bc" translate="yes" xml:space="preserve">
          <source>I had this issue and implemented lruCache. I believe you need API 12 and above or use the compatiblity v4 library. lurCache is fast memory, but it also has a budget, so if you're worried about that you can use a diskcache... It's all described in &lt;em&gt;&lt;a href=&quot;http://developer.android.com/training/displaying-bitmaps/cache-bitmap.html&quot;&gt;Caching Bitmaps&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私にはこの問題があり、lruCacheを実装しました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;API 12以降が必要か、互換性v4ライブラリを使用していると思います。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;lurCacheは高速メモリですが、予算もあるので、心配な場合はディスク&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;a href=&quot;http://developer.android.com/training/displaying-bitmaps/cache-bitmap.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キャッシュを&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用できます...これはすべて「&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビットマップのキャッシュ」で&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;説明されてい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fd628b03fa5669f377a506002b18f65492356408" translate="yes" xml:space="preserve">
          <source>I have been using NetworkImageView from the new Android Volley Library &lt;code&gt;com.android.volley.toolbox.NetworkImageView&lt;/code&gt;, and it seems to be working pretty well. Apparently, this is the same view that is used in &lt;a href=&quot;http://en.wikipedia.org/wiki/Google_Play&quot;&gt;Google Play&lt;/a&gt; and other new Google applications. Definitely worth checking out.</source>
          <target state="translated">私は新しいAndroid Volley Library &lt;code&gt;com.android.volley.toolbox.NetworkImageView&lt;/code&gt; の NetworkImageViewを使用していますが、かなりうまく機能しているようです。 どうやら、これは&lt;a href=&quot;http://en.wikipedia.org/wiki/Google_Play&quot;&gt;Google Play&lt;/a&gt;や他の新しいGoogleアプリケーションで使用されているのと同じビューです。 間違いなくチェックアウトする価値があります。</target>
        </trans-unit>
        <trans-unit id="2d3197fce3eaa15b808c2841edb1eb91e5ad492e" translate="yes" xml:space="preserve">
          <source>I have followed this Android Training and I think it does an excellent job at downloading images without blocking the main UI.  It also handles caching and dealing with scrolling through many images: &lt;a href=&quot;http://developer.android.com/training/displaying-bitmaps/load-bitmap.html&quot;&gt;Loading Large Bitmaps Efficiently&lt;/a&gt;</source>
          <target state="translated">私はこのAndroidトレーニングを実施しましたが、メインUIをブロックせずに画像をダウンロードすることは素晴らしい仕事だと思います。 また、キャッシュと多くの画像のスクロール処理も処理します。 &lt;a href=&quot;http://developer.android.com/training/displaying-bitmaps/load-bitmap.html&quot;&gt;大きなビットマップを効率的にロードする&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cab413449b9351739e0bae6a3b22dd7f0ae48afe" translate="yes" xml:space="preserve">
          <source>I just want to add one more good example, &lt;em&gt;&lt;a href=&quot;http://developer.android.com/resources/samples/XmlAdapters/index.html&quot;&gt;XML Adapters&lt;/a&gt;&lt;/em&gt;. As it's is used by Google and I am also using the same logic to avoid an OutOfMemory error.</source>
          <target state="translated">もう1つ良い例として、 &lt;em&gt;&lt;a href=&quot;http://developer.android.com/resources/samples/XmlAdapters/index.html&quot;&gt;XMLアダプター&lt;/a&gt;&lt;/em&gt;を追加したいと思い&lt;em&gt;ます&lt;/em&gt; 。 これはGoogleで使用されているため、同じロジックを使用してOutOfMemoryエラーを回避しています。</target>
        </trans-unit>
        <trans-unit id="d039635eabb06ca7f01ced23c96dede484dc0b78" translate="yes" xml:space="preserve">
          <source>I made &lt;a href=&quot;https://github.com/thest1/LazyList&quot;&gt;a simple demo of a lazy list&lt;/a&gt; (located at GitHub) with images.</source>
          <target state="translated">画像付きの&lt;a href=&quot;https://github.com/thest1/LazyList&quot;&gt;遅延リスト&lt;/a&gt; （GitHubにあります）の簡単なデモを作成しました 。</target>
        </trans-unit>
        <trans-unit id="561298e678800fce438d57a7dc46f40537901c8b" translate="yes" xml:space="preserve">
          <source>I realized that working with drawables is faster that with bitmaps so I uses drawables instead</source>
          <target state="translated">ビットマップよりもドローアブルを使った方が早いことに気づいたので、代わりにドローアブルを使っています。</target>
        </trans-unit>
        <trans-unit id="5b191db6d8a864af94ed7477083e6e7726a18ca4" translate="yes" xml:space="preserve">
          <source>I recommend open source instrument &lt;strong&gt;&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;Universal Image Loader&lt;/a&gt;&lt;/strong&gt;. It is originally based on Fedor Vlasov's project &lt;strong&gt;LazyList&lt;/strong&gt; and has been vastly improved since then.</source>
          <target state="translated">オープンソースの計測器&lt;strong&gt;&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;Universal Image Loader&lt;/a&gt;&lt;/strong&gt;をお勧めします。 もともとはFedor Vlasovのプロジェクト&lt;strong&gt;LazyListに&lt;/strong&gt;基づいており、それ以来大幅に改善されています。</target>
        </trans-unit>
        <trans-unit id="4248737ead10b436d3595a15fef4a26ea92c98ad" translate="yes" xml:space="preserve">
          <source>I think this issue is very popular among Android developers, and there are plenty of such libraries that claims to resolve this issue, but only a few of them seems to be on the mark. &lt;a href=&quot;http://code.google.com/p/android-query/&quot;&gt;AQuery&lt;/a&gt; is one such library, but it is better than most of them in all aspects and is worth trying for.</source>
          <target state="translated">この問題はAndroid開発者の間で非常に人気があると思います。この問題を解決すると主張しているライブラリはたくさんありますが、その一部しかマークされていないようです。 &lt;a href=&quot;http://code.google.com/p/android-query/&quot;&gt;AQuery&lt;/a&gt;はそのようなライブラリの1つですが、あらゆる面でほとんどのライブラリよりも優れており、試してみる価値があります。</target>
        </trans-unit>
        <trans-unit id="86bcb74883528b75b81811b1733dd7a3df3db73c" translate="yes" xml:space="preserve">
          <source>I'll now provide my implementation which is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;singleton&lt;/a&gt; I call from anywhere like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、このようなどこからでも呼び出す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルトンである&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実装を提供します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="64d8f8ad79817213d74364ec900378beb66851da" translate="yes" xml:space="preserve">
          <source>I've written a tutorial that explains how to do lazy-loading of images in a listview. I go into some detail about the issues of recycling and concurrency. I also use a fixed thread pool to prevent spawning a lot of threads.</source>
          <target state="translated">リストビューで画像の遅延読み込みを行う方法を解説したチュートリアルを書いてみました。リサイクルと並行処理の問題について詳しく説明しています。また、大量のスレッドを生成しないように固定スレッドプールを使用しています。</target>
        </trans-unit>
        <trans-unit id="2fe2660f1f9b49ec509f3416164c83eb80f70ca1" translate="yes" xml:space="preserve">
          <source>If you want to display Shimmer layout like Facebook there is a official facebook library for that. &lt;a href=&quot;http://facebook.github.io/shimmer-android/&quot;&gt;FaceBook Shimmer Android&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;FacebookのようなShimmerレイアウトを表示したい場合は、そのための公式facebookライブラリがあります。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://facebook.github.io/shimmer-android/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;FaceBookシマーAndroid&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="65b9a3782b4c089a55e3d93ff12a1c5f3f71c630" translate="yes" xml:space="preserve">
          <source>Image caching in memory and/or on disk (device's file system or SD card)</source>
          <target state="translated">メモリまたはディスク(デバイスのファイルシステムまたはSDカード)上でのイメージキャッシング</target>
        </trans-unit>
        <trans-unit id="d09a15f73b8ff62631bee99d4aa54ddf939e324b" translate="yes" xml:space="preserve">
          <source>Images add much-needed context and visual flair to Android applications. Picasso allows for hassle-free image loading in your application&amp;mdash;often in one line of code!</source>
          <target state="translated">画像は、Androidアプリケーションに待望のコンテキストと視覚的センスを追加します。 Picassoを使用すると、多くの場合1行のコードで、アプリケーションに手間をかけずに画像を読み込むことができます。</target>
        </trans-unit>
        <trans-unit id="da42d083ecc44d6570402e6de6d077da4063c2fd" translate="yes" xml:space="preserve">
          <source>In Android 4.x and lower, Fresco puts images in a special region of Android memory. This lets your application run faster - and suffer the dreaded OutOfMemoryError much less often.</source>
          <target state="translated">Android 4.x以下では、FrescoはAndroidメモリの特別な領域に画像を配置します。これにより、アプリケーションを高速に実行することができ、恐ろしいOutOfMemoryErrorに悩まされることも少なくなります。</target>
        </trans-unit>
        <trans-unit id="2d94e63c5f735bee7d2bb0629cadfe19cbe3f2c5" translate="yes" xml:space="preserve">
          <source>It may be helpful to somebody. It downloads images in the background thread. Images are being cached on an SD card and in memory. The cache implementation is very simple and is just enough for the demo. I decode images with inSampleSize to reduce memory consumption. I also try to handle recycled views correctly.</source>
          <target state="translated">誰かの参考になるかもしれません。バックグラウンドスレッドで画像をダウンロードしています。画像はSDカードとメモリにキャッシュされています。キャッシュの実装は非常にシンプルで、デモではこれだけで十分です。私はメモリ消費を抑えるためにinSampleSizeで画像をデコードしています。また、リサイクルされたビューを正しく扱うようにしています。</target>
        </trans-unit>
        <trans-unit id="4f8ba6094a48651263af977f7572ae1f36bd577a" translate="yes" xml:space="preserve">
          <source>It should be solve your lazy loading problem.</source>
          <target state="translated">それはあなたの怠惰なローディングの問題を解決する必要があります。</target>
        </trans-unit>
        <trans-unit id="2469d1d6fff666dc43a5e7eac0358e69547beb22" translate="yes" xml:space="preserve">
          <source>It takes care of everything, You just need to put your desired design code in nested manner in shimmer frame.
Here is a sample code.</source>
          <target state="translated">シマーフレームに好きなデザインのコードを入れ子状に配置するだけで、すべてを処理してくれます。以下はサンプルコードです。</target>
        </trans-unit>
        <trans-unit id="be2db2f978aaa1a80117f7d90f04d99b4627c424" translate="yes" xml:space="preserve">
          <source>It's very fast and accurate, and using this you can find many more features like animation when loading, getting a bitmap (if needed), etc.</source>
          <target state="translated">非常に速くて正確で、これを使うとロード時のアニメーション、ビットマップの取得(必要に応じて)など、他にも多くの機能を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="fc07f530268fdafb26c914918cb337cb160b37d4" translate="yes" xml:space="preserve">
          <source>Just a quick tip for someone who is in indecision regarding what library to use for lazy-loading images:</source>
          <target state="translated">怠惰なローディング画像にどのライブラリを使うべきか迷っている人のための簡単なヒントです。</target>
        </trans-unit>
        <trans-unit id="f68545ae331940838775e00e849fe77037d8f13c" translate="yes" xml:space="preserve">
          <source>Just one line of code!</source>
          <target state="translated">たった一行のコード!</target>
        </trans-unit>
        <trans-unit id="27965ad9156aaa26bb531e72922f42d8fd806a1b" translate="yes" xml:space="preserve">
          <source>Lazy loading of images in Listview Tutorial</source>
          <target state="translated">Listviewチュートリアルでの画像の遅延読み込み</target>
        </trans-unit>
        <trans-unit id="28071a3672aa1af72105ff43c69e7ce1e89915c5" translate="yes" xml:space="preserve">
          <source>Listening loading process (including downloading progress)</source>
          <target state="translated">リスニングロード処理(ダウンロードの進捗状況を含む</target>
        </trans-unit>
        <trans-unit id="1ff62d55dc2eab547ff5391293e0d364a56c4af4" translate="yes" xml:space="preserve">
          <source>Lots of configurable options</source>
          <target state="translated">設定可能なオプションが豊富</target>
        </trans-unit>
        <trans-unit id="3c85edc9a6b5c8fad867c0bbc788010fac6de49c" translate="yes" xml:space="preserve">
          <source>Many common pitfalls of image loading on Android are handled automatically by Picasso:</source>
          <target state="translated">Androidでの画像読み込みの多くの一般的な落とし穴は、ピカソによって自動的に処理されます。</target>
        </trans-unit>
        <trans-unit id="cac27c95cafa3f2ee44d1c4282f90d68662ad99d" translate="yes" xml:space="preserve">
          <source>Many customization options for every display image call (stub images, caching switch, decoding options, Bitmap processing and displaying, etc.)</source>
          <target state="translated">表示画像の呼び出しごとに多くのカスタマイズオプション(スタブ画像、キャッシングスイッチ、デコードオプション、ビットマップ処理と表示など)があります。</target>
        </trans-unit>
        <trans-unit id="e4734ac755aa4d2731e84e90a510c25c0a6e3555" translate="yes" xml:space="preserve">
          <source>Multithread image loading</source>
          <target state="translated">マルチスレッド画像の読み込み</target>
        </trans-unit>
        <trans-unit id="43653e8158d95b8ddede5029dfef7bbd8f666888" translate="yes" xml:space="preserve">
          <source>Multithread image loading (async or sync)</source>
          <target state="translated">マルチスレッド画像の読み込み(非同期または同期</target>
        </trans-unit>
        <trans-unit id="45f890bc588efc786eb82bac4ae8f89c8ae39e2a" translate="yes" xml:space="preserve">
          <source>My code:</source>
          <target state="translated">私のコード</target>
        </trans-unit>
        <trans-unit id="ca050b22c2c831ef63f02aee7a45cbbfd46c1337" translate="yes" xml:space="preserve">
          <source>Novoda also has a great &lt;a href=&quot;http://androidimageloader.com/&quot;&gt;lazy image loading library&lt;/a&gt; and many apps like Songkick, Podio, SecretDJ and ImageSearch use their library.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Novodaには優れた&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://androidimageloader.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;遅延画像読み込みライブラリも&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あり、Songkick、Podio、SecretDJ、ImageSearchなどの多くのアプリがライブラリを使用しています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bdf87b2bb2882af4e2596d8f3c6aa516ee0d3c27" translate="yes" xml:space="preserve">
          <source>Open source, but headed up by &lt;code&gt;Jake Wharton&lt;/code&gt; of &lt;a href=&quot;http://actionbarsherlock.com/&quot;&gt;ActionBarSherlock&lt;/a&gt; fame.</source>
          <target state="translated">オープンソースですが、 &lt;a href=&quot;http://actionbarsherlock.com/&quot;&gt;ActionBarSherlock&lt;/a&gt;名声の &lt;code&gt;Jake Wharton&lt;/code&gt; が率いています。</target>
        </trans-unit>
        <trans-unit id="ed631ad9c221b144962add488c07637175f61b93" translate="yes" xml:space="preserve">
          <source>Picasso Jake Wharton's Library</source>
          <target state="translated">ピカソ ジェイク・ウォートンの図書館</target>
        </trans-unit>
        <trans-unit id="75140ba7190a4867914fd8fb448eee5927e6b7ed" translate="yes" xml:space="preserve">
          <source>Picasso: A simple solution that just works, you can even specify the exact image size you want to bring in. It is very simple to use but might not be very &quot;performant&quot; for apps that has to deal with humongous amounts of images.</source>
          <target state="translated">Picasso:シンプルなソリューションで、持ち込む画像のサイズを正確に指定することもできます。使い方はとてもシンプルですが、膨大な量の画像を扱わなければならないアプリにはあまり「パフォーマンス」が高くないかもしれません。</target>
        </trans-unit>
        <trans-unit id="c7984f7f6786e61e7851623c8e7ac6d100e04249" translate="yes" xml:space="preserve">
          <source>Please visit here : &lt;a href=&quot;http://code.tutsplus.com/tutorials/android-sdk-working-with-picasso--cms-22149&quot;&gt;http://code.tutsplus.com/tutorials/android-sdk-working-with-picasso--cms-22149&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;こちらをご覧ください：&lt;/font&gt;&lt;a href=&quot;http://code.tutsplus.com/tutorials/android-sdk-working-with-picasso--cms-22149&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//code.tutsplus.com/tutorials/android-sdk-working-with-picasso--cms-22149&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a2d0b83d6fc40ae2967445f9ab6a3717fa0957de" translate="yes" xml:space="preserve">
          <source>Possibility of image caching in memory and/or on device's file sysytem (or SD card)</source>
          <target state="translated">メモリやデバイスのファイルシステム(またはSDカード)上での画像キャッシュの可能性</target>
        </trans-unit>
        <trans-unit id="f3fa7f6efb48e5c8ec810de938dbf693e211bbaf" translate="yes" xml:space="preserve">
          <source>Possibility of wide tuning ImageLoader's configuration (thread executors, downlaoder, decoder, memory and disc cache, display image options, and others)</source>
          <target state="translated">ImageLoaderの構成(スレッド実行器、ダウンローダー、デコーダ、メモリ・ディスクキャッシュ、表示画像オプションなど)の幅広いチューニングが可能です。</target>
        </trans-unit>
        <trans-unit id="659b171f6e80b852cddd2af83a85077f44923990" translate="yes" xml:space="preserve">
          <source>Possibility to &quot;listen&quot; loading process</source>
          <target state="translated">読み込み処理を「リッスン」する可能性</target>
        </trans-unit>
        <trans-unit id="f0e11e4634812a3749cba4c811b27af9d9965909" translate="yes" xml:space="preserve">
          <source>Possibility to customize every display image call with separated options</source>
          <target state="translated">分離されたオプションを使用して、すべての表示画像の呼び出しをカスタマイズすることが可能</target>
        </trans-unit>
        <trans-unit id="c9f0644cc8efbabcb3290b003f88757932ddef05" translate="yes" xml:space="preserve">
          <source>Pull requests (and bug reports) are welcome, too!</source>
          <target state="translated">プルリクエスト(バグ報告)も大歓迎です。</target>
        </trans-unit>
        <trans-unit id="9f50023c227bb4ef0b8ec5d8c01405528ccb2023" translate="yes" xml:space="preserve">
          <source>Super simple API</source>
          <target state="translated">超シンプルなAPI</target>
        </trans-unit>
        <trans-unit id="6b73b86b5cb837a2747a180e1a6baaf0bb90fa99" translate="yes" xml:space="preserve">
          <source>Supports modifying bitmaps in background thread.</source>
          <target state="translated">バックグラウンドスレッドでのビットマップの変更に対応しました。</target>
        </trans-unit>
        <trans-unit id="b8f294e11ab2cbacc6d37cba04d404b84a37921c" translate="yes" xml:space="preserve">
          <source>Thanks to James for the code, and Bao-Long for the suggestion of using SoftReference. I implemented the SoftReference changes on James' code. Unfortunately SoftReferences caused my images to be garbage collected too quickly. In my case it was fine without the SoftReference stuff, because my list size is limited and my images are small.</source>
          <target state="translated">コードを提供してくれた James に感謝し、SoftReference を使用することを提案してくれた Bao-Long に感謝します。私はJamesのコードにSoftReferenceの変更を実装しました。残念なことに、SoftReferenceは私のイメージをガベージコレクションしてしまう原因となりました。私の場合は、リストのサイズが限られていて、画像が小さいので、SoftReferenceを使わなくても問題ありませんでした。</target>
        </trans-unit>
        <trans-unit id="ef12ea7787c13f63653cc9eb5643ff537ca030eb" translate="yes" xml:space="preserve">
          <source>The total number of images is not fixed.</source>
          <target state="translated">画像の総数は決まっていません。</target>
        </trans-unit>
        <trans-unit id="d23a7aa4c0b2b7fa49b95eb796e76fc14e3133fa" translate="yes" xml:space="preserve">
          <source>The way I do it is by launching a thread to download the images in the background and hand it a callback for each list item.  When an image is finished downloading it calls the callback which updates the view for the list item.</source>
          <target state="translated">この方法では、スレッドを起動してバックグラウンドで画像をダウンロードし、リスト項目ごとにコールバックを渡しています。画像のダウンロードが終了すると、リスト項目のビューを更新するコールバックを呼び出します。</target>
        </trans-unit>
        <trans-unit id="aef1e496096ef5911198a5e56e1e7152f9e930f7" translate="yes" xml:space="preserve">
          <source>Their library is hosted &lt;a href=&quot;https://github.com/novoda/ImageLoader&quot;&gt;here&lt;/a&gt; on Github and they have a pretty active &lt;a href=&quot;https://github.com/novoda/ImageLoader/issues&quot;&gt;issues tracker&lt;/a&gt; as well. Their project seems to be pretty active too, with over 300+ commits at the time of writing this reply.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;彼らのライブラリは&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/novoda/ImageLoader&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Githubで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ホスト&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れており、かなり活発な&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/novoda/ImageLoader/issues&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;課題トラッカー&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;も持っています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;彼らのプロジェクトもかなり活発で、この返信を書いている時点では300以上のコミットがあります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c34fbabea4b9c03f6da19eabb2c003969c0e8e07" translate="yes" xml:space="preserve">
          <source>There are four basic ways.</source>
          <target state="translated">基本的には4つの方法があります。</target>
        </trans-unit>
        <trans-unit id="31367a420c32dbf578d41425a2131141ca6a7657" translate="yes" xml:space="preserve">
          <source>There's a discussion from a year ago regarding the SoftReferences on google groups: &lt;a href=&quot;http://groups.google.com/group/android-developers/browse_thread/thread/ebabb0dadf38acc1&quot;&gt;link to thread&lt;/a&gt;. As a solution to the too-early garbage collection, they suggest the possibility of manually setting the VM heap size using dalvik.system.VMRuntime.setMinimumHeapSize(), which is not very attractive to me.</source>
          <target state="translated">1年前のGoogleグループのSoftReferencesに関する議論があります： &lt;a href=&quot;http://groups.google.com/group/android-developers/browse_thread/thread/ebabb0dadf38acc1&quot;&gt;スレッドへのリンク&lt;/a&gt; 。 あまりに早いガベージコレクションの解決策として、dalvik.system.VMRuntime.setMinimumHeapSize（）を使用してVMヒープサイズを手動で設定する可能性が示唆されていますが、あまり魅力的ではありません。</target>
        </trans-unit>
        <trans-unit id="aa7ace2990661b473f9d4f01bf329f37791f444d" translate="yes" xml:space="preserve">
          <source>This is a common problem on Android that has been solved in many ways by many people.  In my opinion the best solution I've seen is the relatively new library called &lt;a href=&quot;http://square.github.io/picasso/&quot;&gt;Picasso&lt;/a&gt;.  Here are the highlights:</source>
          <target state="translated">これはAndroidに共通する問題であり、多くの人々によってさまざまな方法で解決されています。 私の見解では、私が見た最良の解決策は、 &lt;a href=&quot;http://square.github.io/picasso/&quot;&gt;ピカソ&lt;/a&gt;と呼ばれる比較的新しいライブラリです。 ここにハイライトがあります：</target>
        </trans-unit>
        <trans-unit id="3625e86dd0c0b6309ace4fa64e75deaa1f90958d" translate="yes" xml:space="preserve">
          <source>This is from the Android Developers Blog. The suggested code uses:</source>
          <target state="translated">これはAndroid Developers Blogからです。提案されたコードの使い方です。</target>
        </trans-unit>
        <trans-unit id="27b2b9b08e65b861c7aff1eadb1e48d6af33faaa" translate="yes" xml:space="preserve">
          <source>This is my code:</source>
          <target state="translated">これは私のコードだ</target>
        </trans-unit>
        <trans-unit id="c47508b26e2eccb0f83fe5b653f4cc6cc488353b" translate="yes" xml:space="preserve">
          <source>This method doesn't work very well when you're recycling views however.</source>
          <target state="translated">しかし、この方法は、ビューをリサイクルしているときにはあまりうまくいきません。</target>
        </trans-unit>
        <trans-unit id="862f12a0a024dc44918532f93128441ab19c26b9" translate="yes" xml:space="preserve">
          <source>To open the InputStream I used java.net.URLConnection which allows me to use web cache (you need to set a response cache first, but that's another story)</source>
          <target state="translated">InputStreamを開くためにjava.net.URLConnectionを使用しました。これはウェブキャッシュを使用することができます(最初にレスポンスキャッシュを設定する必要がありますが、それは別の話です)。</target>
        </trans-unit>
        <trans-unit id="15e99613190c7d08a45a8eef119677ee9ef6f510" translate="yes" xml:space="preserve">
          <source>UIL: The best way to lazy load images. You can cache images(you need permission of course), initialize the loader once, then have your work done. The most mature asynchronous image loading library I have ever seen so far.</source>
          <target state="translated">UIL:画像の遅延ロードに最適な方法です。画像をキャッシュして(もちろん許可が必要です)、ローダを一度初期化してから作業を行うことができます。今まで見た中で最も成熟した非同期画像読み込みライブラリです。</target>
        </trans-unit>
        <trans-unit id="b6b38e32de40ab8570bd7700f054f5fb707811c4" translate="yes" xml:space="preserve">
          <source>Universal Image Loader</source>
          <target state="translated">ユニバーサルイメージローダ</target>
        </trans-unit>
        <trans-unit id="d278862f0e36527b18e42a3858e2d2b451d8d018" translate="yes" xml:space="preserve">
          <source>Use Jake Wharton's  Picasso Library. 
(A Perfect ImageLoading Library form the developer of ActionBarSherlock)</source>
          <target state="translated">Jake WhartonのPicasso Libraryを使います。(ActionBarSherlockの開発者による完璧なイメージロードライブラリ)</target>
        </trans-unit>
        <trans-unit id="c38241d6f91f0aa0dcc95d49d68e0be2f0d3bc3e" translate="yes" xml:space="preserve">
          <source>Use the glide library. It worked for me and will work for your code too.It works for both images as well as gifs too.</source>
          <target state="translated">glide ライブラリを使ってください。これは私のために動作しましたが、あなたのコードでも動作するでしょう。</target>
        </trans-unit>
        <trans-unit id="342076b56a8d6c03f9476459ece0fc654d31673e" translate="yes" xml:space="preserve">
          <source>Uses a disk &amp;amp; in-memory &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_algorithms#Examples&quot;&gt;Least Recently Used&lt;/a&gt; (LRU) cache.</source>
          <target state="translated">ディスクとメモリ内の&lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_algorithms#Examples&quot;&gt;最も最近使用された&lt;/a&gt; （LRU）キャッシュを使用します。</target>
        </trans-unit>
        <trans-unit id="2ea7908a92bd25a38f49d461fc007fb5b2c25e0f" translate="yes" xml:space="preserve">
          <source>Using SoftReference is great, but it makes the cached image to be deleted too often, so I added a Linked list that holds images references, preventing from the image to be deleted, until it reached a predefined size</source>
          <target state="translated">SoftReferenceを使うのは良いのですが、キャッシュされた画像が削除されてしまうことが多いので、あらかじめ定義したサイズになるまで、画像の参照を保持するLinkedリストを追加して、画像が削除されないようにしました。</target>
        </trans-unit>
        <trans-unit id="f9577d69e08610a1f9ab45138fdb0d5c80c5d670" translate="yes" xml:space="preserve">
          <source>Volley's Lazy Loading library =&amp;gt; From guys at android. It is nice and everything but is poorly documented and hence is a problem to use.</source>
          <target state="translated">Volleyの遅延読み込みライブラリ=&amp;gt; androidの人から。 それは素晴らしいですが、文書化が不十分であるため、使用するには問題があります。</target>
        </trans-unit>
        <trans-unit id="c21fdd2cfd8c226eb95278f9396c70a2a9252bfc" translate="yes" xml:space="preserve">
          <source>Well, image loading time from the Internet has many solutions. You may also use the library &lt;a href=&quot;https://code.google.com/p/android-query/wiki/ImageLoading&quot;&gt;Android-Query&lt;/a&gt;. It will give you all the required activity. Make sure what you want to do and read the library wiki page. And solve the image loading restriction.</source>
          <target state="translated">まあ、インターネットからの画像読み込み時間には多くの解決策があります。 ライブラリ&lt;a href=&quot;https://code.google.com/p/android-query/wiki/ImageLoading&quot;&gt;Android-Queryを&lt;/a&gt;使用することもできます。 それはあなたに必要なすべての活動を提供します。 何をしたいかを確認し、ライブラリのwikiページを読んでください。 そして、画像の読み込み制限を解決します。</target>
        </trans-unit>
        <trans-unit id="501593cf64d51eb41f5ede3cee10f57947a9867e" translate="yes" xml:space="preserve">
          <source>When you need to put something like &quot;Loading image...&quot;</source>
          <target state="translated">&quot;Loading image...&quot;のようなものを入れる必要がある場合</target>
        </trans-unit>
        <trans-unit id="340c1f999abbbba494ca3922ca5a7c5bcc6ef112" translate="yes" xml:space="preserve">
          <source>When you need to show the downloaded image.</source>
          <target state="translated">ダウンロードした画像を表示する必要がある場合</target>
        </trans-unit>
        <trans-unit id="bf9e8b329d76e7150d73c5a5811e6c73235bb87c" translate="yes" xml:space="preserve">
          <source>Wide customization of ImageLoader's configuration (thread executors, downloader, decoder, memory and disk cache, display image options, etc.)</source>
          <target state="translated">ImageLoaderの設定の幅広いカスタマイズ(スレッド実行、ダウンローダ、デコーダ、メモリとディスクキャッシュ、表示イメージオプションなど</target>
        </trans-unit>
        <trans-unit id="1683173da1e3182e4ebcd07b9364191d4a0120c9" translate="yes" xml:space="preserve">
          <source>Widget support</source>
          <target state="translated">ウィジェットのサポート</target>
        </trans-unit>
        <trans-unit id="aa0d8a43a429fecece3d9b492ad7b12db22d943f" translate="yes" xml:space="preserve">
          <source>You can download that &lt;a href=&quot;http://en.wikipedia.org/wiki/JAR_%28file_format%29&quot;&gt;JAR&lt;/a&gt; file from &lt;a href=&quot;http://code.google.com/p/android-query/downloads/list&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;a href=&quot;http://code.google.com/p/android-query/downloads/list&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここ&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/JAR_%28file_format%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JAR&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ファイルを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ダウンロードできます。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a2150109b3b22d358ba8fdd09cd1148382d0a5a5" translate="yes" xml:space="preserve">
          <source>You must try this Universal Loader is best.
I am using this after done many RnD on lazy loading .</source>
          <target state="translated">Universal Loaderが一番いいです。怠惰なローディングで何度もRnDをした後、これを使っています。</target>
        </trans-unit>
        <trans-unit id="855b8be24fa05da6e074b6059a488f75185b60c3" translate="yes" xml:space="preserve">
          <source>create only one instance of ImageLoader and reuse it all around your
  application. This way image caching will be much more efficient.</source>
          <target state="translated">ImageLoader のインスタンスを一つだけ作成して、それをアプリケーション全体で再利用します。このようにして、画像のキャッシュをより効率的に行うことができます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
