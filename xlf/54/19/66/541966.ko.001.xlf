<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/541966">
    <body>
      <group id="541966">
        <trans-unit id="9018cced31f6138d2ddd1c43920d6dd0330ffe68" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://android-developers.blogspot.com/2010/07/multithreading-for-performance.html&quot;&gt;Multithreading For Performance&lt;/a&gt;, a tutorial by Gilles Debunne.</source>
          <target state="translated">Gilles Debunne의 튜토리얼, &lt;a href=&quot;http://android-developers.blogspot.com/2010/07/multithreading-for-performance.html&quot;&gt;멀티 스레딩 For Performance&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="798b84b22fd0f6bd56860a5243bfbaaaef435816" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://droidparts.org&quot;&gt;DroidParts&lt;/a&gt; has &lt;a href=&quot;https://github.com/yanchenko/droidparts/blob/master/droidparts/src/org/droidparts/net/image/ImageFetcher.java&quot;&gt;ImageFetcher&lt;/a&gt; that requires zero configuration to get started.</source>
          <target state="translated">&lt;a href=&quot;http://droidparts.org&quot;&gt;DroidParts&lt;/a&gt; 에는 &lt;a href=&quot;https://github.com/yanchenko/droidparts/blob/master/droidparts/src/org/droidparts/net/image/ImageFetcher.java&quot;&gt;ImageFetcher&lt;/a&gt; 가 있으며이를 시작하기 위해 구성이 필요 없습니다.</target>
        </trans-unit>
        <trans-unit id="183ba1a25f1145ba5a208728aa4658376ab09552" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/koush/UrlImageViewHelper&quot;&gt;URLImageViewHelper&lt;/a&gt; is an amazing library that helps you to do that.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/koush/UrlImageViewHelper&quot;&gt;URLImageViewHelper&lt;/a&gt; 는이를 수행하는 데 도움이되는 놀라운 라이브러리입니다.</target>
        </trans-unit>
        <trans-unit id="b56dd7cd65b139c0730fb4cc7f6b6504e9215113" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AsyncTasks&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AsyncTasks&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="7f6af57be25006d6b78bce216a8bf2c5aaba7d0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;// For a simple view:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;// 간단한보기 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="816bc47998d3cfc0c1894905f32b58536c862bdc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1.&lt;/strong&gt;&lt;a href=&quot;http://square.github.io/picasso/&quot;&gt;&lt;strong&gt;Picasso&lt;/strong&gt;&lt;/a&gt; allows for hassle-free image loading in your application&amp;mdash;often in one line of code!</source>
          <target state="translated">&lt;strong&gt;1.&lt;/strong&gt; &lt;a href=&quot;http://square.github.io/picasso/&quot;&gt;&lt;strong&gt;Picasso&lt;/strong&gt;&lt;/a&gt; 는 응용 프로그램에서 번거롭지 않은 이미지 로딩을 허용합니다. 종종 한 줄의 코드로도 가능합니다!</target>
        </trans-unit>
        <trans-unit id="7be806b05c98847268fc9a8f9d99ac5039cef2d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2.&lt;/strong&gt;&lt;a href=&quot;https://github.com/bumptech/glide&quot;&gt;&lt;strong&gt;Glide&lt;/strong&gt;&lt;/a&gt; An image loading and caching library for Android focused on smooth scrolling</source>
          <target state="translated">&lt;strong&gt;2.&lt;/strong&gt; &lt;a href=&quot;https://github.com/bumptech/glide&quot;&gt;&lt;strong&gt;글라이드&lt;/strong&gt;&lt;/a&gt; 부드러운 스크롤링에 중점을 둔 Android 용 이미지 로딩 및 캐싱 라이브러리</target>
        </trans-unit>
        <trans-unit id="a393d0b816addef5a402e631cedfacd8ce890f18" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;3.&lt;/strong&gt;&lt;a href=&quot;https://github.com/facebook/fresco&quot;&gt;&lt;strong&gt;fresco&lt;/strong&gt;&lt;/a&gt;  is a powerful system for displaying images in Android 
   applications.Fresco takes care of image loading and display, so you don't have 
  to.</source>
          <target state="translated">&lt;strong&gt;3.&lt;/strong&gt; &lt;a href=&quot;https://github.com/facebook/fresco&quot;&gt;&lt;strong&gt;fresco&lt;/strong&gt;&lt;/a&gt; 는 Android 응용 프로그램에서 이미지를 표시하는 강력한 시스템입니다. &lt;strong&gt;Fresco&lt;/strong&gt; 는 이미지로드 및 표시를 처리하므로 사용자가 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="533616d8543a0514115aabefebaed2b06ff667be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Features&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Features&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="80125fcb2b3f9dd8457bc073a5ee9e056404bba4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fresco by Facebook&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;페이스 북에 의해 프레스코&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="096e6b62db1cbbcc91229ae91ed9c9d782560672" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Getting Started with Fresco&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Fresco 시작하기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a0d14cc9a2351dbffe0c64071cbb0db0247c5e8e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Glide&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Glide&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ad15d41133a48151a3140e3573e291fff6e45b30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Picasso&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Picasso&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eaf9f0c6c43a1aa39ce3589757aaf6f4968b667c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Picasso&lt;/strong&gt;  is a library specifically for this purpose, in-fact it will manage cache and all other network operations automatically.You will have to add library in your project and just write a single line of code to load image from remote URL.</source>
          <target state="translated">&lt;strong&gt;피카소&lt;/strong&gt; 는 캐시와 다른 모든 네트워크 작업을 자동으로 관리하는 이러한 목적을 위해 특별히 &lt;strong&gt;설계된&lt;/strong&gt; 라이브러리입니다. 프로젝트에 라이브러리를 추가하고 원격 URL에서 이미지를로드하기 위해 한 줄의 코드 만 작성하면됩니다.</target>
        </trans-unit>
        <trans-unit id="1779f3260972f4945e5aafba1c119ab62a1260e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update: Note that this answer is pretty ineffective now. The Garbage Collector acts aggressively on SoftReference and WeakReference, so this code is NOT suitable for new apps.&lt;/strong&gt;  (Instead, try libraries like &lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;Universal Image Loader&lt;/a&gt; suggested in other answers.)</source>
          <target state="translated">&lt;strong&gt;업데이트 :이 답변은 현재 매우 효과적이지 않습니다.&lt;/strong&gt; &lt;strong&gt;가비지 콜렉터는 SoftReference 및 WeakReference에 대해 적극적으로 작동하므로이 코드는 새 앱에는 적합하지 않습니다.&lt;/strong&gt; (대신 다른 답변에서 제안 된 &lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;Universal Image Loader&lt;/a&gt; 와 같은 라이브러리를 사용해보십시오.)</target>
        </trans-unit>
        <trans-unit id="8287fba00f66a794e24419e707edaed6f7516403" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use Gradle:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Gradle 사용 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0712dbc27867fa22b927a1646b0acb90fc529253" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;placeholder&lt;/em&gt;&lt;code&gt;Drawable&lt;/code&gt; while you download.</source>
          <target state="translated">다운로드하는 동안 &lt;em&gt;자리 표시 자&lt;/em&gt; &lt;code&gt;Drawable&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ba33e57daf2c7bbee1881d25bd8b1261c5ae341f" translate="yes" xml:space="preserve">
          <source>A hard, limited size, &lt;code&gt;FIFO cache&lt;/code&gt;.</source>
          <target state="translated">단단하고 제한된 크기의 &lt;code&gt;FIFO cache&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6f91f49d93710992afbcb24bbb877c16dd24f9a8" translate="yes" xml:space="preserve">
          <source>A powerful image downloading and caching library for Android.</source>
          <target state="translated">Android 용 강력한 이미지 다운로드 및 캐싱 라이브러리.</target>
        </trans-unit>
        <trans-unit id="87494a016436ec870bce507736b1268a0646f83b" translate="yes" xml:space="preserve">
          <source>A soft, easily &lt;code&gt;garbage collect&lt;/code&gt;-ed cache.</source>
          <target state="translated">부드럽고 &lt;code&gt;garbage collect&lt;/code&gt; 캐시입니다.</target>
        </trans-unit>
        <trans-unit id="d257242b66cc8b23dd357a521cdb7043c930f2b3" translate="yes" xml:space="preserve">
          <source>Add this dependency in your gradle file.</source>
          <target state="translated">gradle 파일에이 종속성을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="9c9be9ec74a7b96021d89ddc180c178c76b32ff1" translate="yes" xml:space="preserve">
          <source>All above code have their own worth but with my personal experience just give a try with Picasso.</source>
          <target state="translated">위의 코드는 모두 가치가 있지만 개인적인 경험으로 피카소를 사용해보십시오.</target>
        </trans-unit>
        <trans-unit id="d0f94c4493c1c6cb4ab447af0d7981efcecbd8f2" translate="yes" xml:space="preserve">
          <source>And here is the java code for it.</source>
          <target state="translated">그리고 여기에 대한 자바 코드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="a26989261475cacdd94de4844a353645cb3ac4b3" translate="yes" xml:space="preserve">
          <source>Android 2.0+ support</source>
          <target state="translated">안드로이드 2.0 이상 지원</target>
        </trans-unit>
        <trans-unit id="dddf73cd98dcce7c884fe24956533693e61e8e3f" translate="yes" xml:space="preserve">
          <source>As an example:</source>
          <target state="translated">예로서:</target>
        </trans-unit>
        <trans-unit id="bb0dab232f949b5954e21e1c5ccbcd10f611bcde" translate="yes" xml:space="preserve">
          <source>Asynchronously load images from network or app resources with one line of code</source>
          <target state="translated">한 줄의 코드로 네트워크 또는 앱 리소스에서 이미지를 비동기 적으로로드</target>
        </trans-unit>
        <trans-unit id="5227a496f6fa4a1e4e5d3faf16fe1091f04e4b98" translate="yes" xml:space="preserve">
          <source>Automatic &lt;code&gt;ListView&lt;/code&gt; detection</source>
          <target state="translated">자동 &lt;code&gt;ListView&lt;/code&gt; 감지</target>
        </trans-unit>
        <trans-unit id="ebf63a0fa6c6a4d9de25d6e5bd8864d15f55d9cc" translate="yes" xml:space="preserve">
          <source>Automatic disk and memory caching</source>
          <target state="translated">자동 디스크 및 메모리 캐싱</target>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="translated">기본 사용법</target>
        </trans-unit>
        <trans-unit id="9743eff7d22a9b4eea0040c6a752920c001d6b41" translate="yes" xml:space="preserve">
          <source>Basically &lt;a href=&quot;http://developer.android.com/resources/samples/XmlAdapters/src/com/example/android/xmladapters/ImageDownloader.html&quot;&gt;this ImageDownloader&lt;/a&gt; is your answer (as it covers most of your requirements). Some you can also implement in that.</source>
          <target state="translated">기본적 &lt;a href=&quot;http://developer.android.com/resources/samples/XmlAdapters/src/com/example/android/xmladapters/ImageDownloader.html&quot;&gt;으로이 ImageDownloader&lt;/a&gt; 는 대부분의 요구 사항을 충족하므로 귀하의 답변입니다. 일부는 그 안에 구현할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="216c9fa7af079b1a641e7c3d202599ed755e6033" translate="yes" xml:space="preserve">
          <source>Can do custom transformations</source>
          <target state="translated">커스텀 변형 가능</target>
        </trans-unit>
        <trans-unit id="9318ada750f26ac931415a060879f5f1ffa7a63d" translate="yes" xml:space="preserve">
          <source>Check my fork of &lt;a href=&quot;https://github.com/nicolasjafelle/LazyList&quot;&gt;LazyList&lt;/a&gt;. Basically, I improve the LazyList by delaying the call of the ImageView and create two methods:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/nicolasjafelle/LazyList&quot;&gt;LazyList의&lt;/a&gt; 포크를 확인하십시오. 기본적으로 ImageView 호출을 지연시켜 LazyList를 개선하고 두 가지 방법을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="15635a8f596592ab5f9fdc74010ed766951639d8" translate="yes" xml:space="preserve">
          <source>Clone &lt;a href=&quot;https://github.com/yanchenko/droidparts/tree/master/droidparts-samples/DroidPartsGram&quot;&gt;DroidPartsGram&lt;/a&gt; for an example:</source>
          <target state="translated">예를 들어 &lt;a href=&quot;https://github.com/yanchenko/droidparts/tree/master/droidparts-samples/DroidPartsGram&quot;&gt;DroidPartsGram&lt;/a&gt; 을 복제 하십시오 .</target>
        </trans-unit>
        <trans-unit id="9c1bd73863928ae57a0e0c21b5c901aa7645bee6" translate="yes" xml:space="preserve">
          <source>DIY =&amp;gt; Not the best solution but for a few images and if you want to go without the hassle of using others libraries</source>
          <target state="translated">DIY =&amp;gt; 가장 좋은 해결책은 아니지만 몇 가지 이미지와 다른 라이브러리를 사용하는 번거 로움없이 가고 싶다면</target>
        </trans-unit>
        <trans-unit id="438cebd9f0d14f47e7bf6d703e2380cac6f54796" translate="yes" xml:space="preserve">
          <source>Developers Google events</source>
          <target state="translated">개발자 Google 이벤트</target>
        </trans-unit>
        <trans-unit id="a2afadd1373fc345254fa69a3e353f8bddc383a7" translate="yes" xml:space="preserve">
          <source>Don't forget to add the
  following permissions to your AndroidManifest.xml:</source>
          <target state="translated">AndroidManifest.xml에 다음 권한을 추가하는 것을 잊지 마십시오.</target>
        </trans-unit>
        <trans-unit id="d4112e60ea8c98d0b47a2280640a4c629e467ea9" translate="yes" xml:space="preserve">
          <source>Efficiently decodes images.</source>
          <target state="translated">이미지를 효율적으로 디코딩합니다.</target>
        </trans-unit>
        <trans-unit id="5a05bdc1b3e09d16042de7bf9c3957dc3f218437" translate="yes" xml:space="preserve">
          <source>Frequently updated</source>
          <target state="translated">자주 업데이트</target>
        </trans-unit>
        <trans-unit id="7035acb6765a95f61d5955e17dabc2bff7a919f9" translate="yes" xml:space="preserve">
          <source>Fresco Documentation</source>
          <target state="translated">프레스코 문서</target>
        </trans-unit>
        <trans-unit id="09f852ed44e9c5a73017f25944eacb1889d1551e" translate="yes" xml:space="preserve">
          <source>Fresco Github</source>
          <target state="translated">프레스코 깃 허브</target>
        </trans-unit>
        <trans-unit id="77f754976dcf7161929381c562937a0c6e2c8c31" translate="yes" xml:space="preserve">
          <source>Fresco is a powerful system for displaying images in Android applications.</source>
          <target state="translated">Fresco는 Android 애플리케이션에서 이미지를 표시하기위한 강력한 시스템입니다.</target>
        </trans-unit>
        <trans-unit id="d794ea1317ebc58b147b03481ef360b3f4fe1c99" translate="yes" xml:space="preserve">
          <source>Fresco takes care of image loading and display, so you don't have to. It will load images from the network, local storage, or local resources, and display a placeholder until the image has arrived. It has two levels of cache; one in memory and another in internal storage.</source>
          <target state="translated">Fresco는 이미지 로딩 및 디스플레이를 관리하므로 사용자는 필요하지 않습니다. 네트워크, 로컬 스토리지 또는 로컬 리소스에서 이미지를로드하고 이미지가 도착할 때까지 자리 표시자를 표시합니다. 캐시에는 두 가지 레벨이 있습니다. 하나는 메모리에 있고 다른 하나는 내부 저장소에 있습니다.</target>
        </trans-unit>
        <trans-unit id="a1e52f849fad98c5d827142abc12f7fbaf39c355" translate="yes" xml:space="preserve">
          <source>Give &lt;a href=&quot;https://code.google.com/p/android-query/wiki/ImageLoading&quot;&gt;Aquery&lt;/a&gt; a try. It has amazingly simple methods to load and cache images asynchronously.</source>
          <target state="translated">&lt;a href=&quot;https://code.google.com/p/android-query/wiki/ImageLoading&quot;&gt;Aquery&lt;/a&gt; 를 사용해보십시오. 이미지를 비동기식으로로드하고 캐시하는 놀랍도록 간단한 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8540a450329cc3a129f0eec42974857b5f19230e" translate="yes" xml:space="preserve">
          <source>Glide Image Loading Library</source>
          <target state="translated">글라이드 이미지 로딩 라이브러리</target>
        </trans-unit>
        <trans-unit id="9861e2cf521ab319396c15d906e3603fd6cebc91" translate="yes" xml:space="preserve">
          <source>Glide is a fast and efficient open source media management framework for Android that wraps media decoding, memory and disk caching, and resource pooling into a simple and easy to use interface.</source>
          <target state="translated">글라이드는 미디어 디코딩, 메모리 및 디스크 캐싱 및 리소스 풀링을 간단하고 사용하기 쉬운 인터페이스로 감싸는 Android 용 빠르고 효율적인 오픈 소스 미디어 관리 프레임 워크입니다.</target>
        </trans-unit>
        <trans-unit id="f9cec647494ceba78da65437e2ccc5b9d89b7160" translate="yes" xml:space="preserve">
          <source>Glide supports fetching, decoding, and displaying video stills, images, and animated GIFs. Glide includes a flexible api that allows developers to plug in to almost any network stack. By default Glide uses a custom HttpUrlConnection based stack, but also includes utility libraries plug in to Google's Volley project or Square's OkHttp library instead.</source>
          <target state="translated">Glide는 비디오 스틸, 이미지 및 애니메이션 GIF 가져 오기, 디코딩 및 표시를 지원합니다. Glide에는 개발자가 거의 모든 네트워크 스택에 플러그인 할 수있는 유연한 API가 포함되어 있습니다. 기본적으로 Glide는 커스텀 HttpUrlConnection 기반 스택을 사용하지만 대신 Google의 Volley 프로젝트 또는 Square의 OkHttp 라이브러리에 플러그인하는 유틸리티 라이브러리도 포함합니다.</target>
        </trans-unit>
        <trans-unit id="69a2fd689dc7a41c0d5336a0c3e6536f22b9ed66" translate="yes" xml:space="preserve">
          <source>Glide's primary focus is on making scrolling any kind of a list of images as smooth and fast as possible, but Glide is also effective for almost any case where you need to fetch, resize, and display a remote image.</source>
          <target state="translated">글라이드의 주요 초점은 모든 종류의 이미지 목록을 가능한 한 매끄럽고 빠르게 스크롤하는 것입니다. 그러나 글라이드는 원격 이미지를 가져 와서 크기를 조정하고 표시해야하는 거의 모든 경우에 효과적입니다.</target>
        </trans-unit>
        <trans-unit id="a0d9c2bfcd54203470e6f84a175aa39348bd1359" translate="yes" xml:space="preserve">
          <source>Google I/O 2013 volley image cache tutorial</source>
          <target state="translated">Google I / O 2013 발리 이미지 캐시 자습서</target>
        </trans-unit>
        <trans-unit id="7aae71a8229fac40e3a384eceda31032e6b265c2" translate="yes" xml:space="preserve">
          <source>Handling ImageView recycling and download cancellation in an adapter.
Complex image transformations with minimal memory use.
Automatic memory and disk caching.</source>
          <target state="translated">어댑터에서 ImageView 재활용 및 다운로드 취소 처리 최소한의 메모리 사용으로 복잡한 이미지 변환. 자동 메모리 및 디스크 캐싱.</target>
        </trans-unit>
        <trans-unit id="6ab19455b9c91e5525c05dc051a1d8078c6342e9" translate="yes" xml:space="preserve">
          <source>Has image loading progress callback.</source>
          <target state="translated">이미지 로딩 진행 콜백이 있습니다.</target>
        </trans-unit>
        <trans-unit id="bacaf3972ab4cd21d1bb275ef757a67747611566" translate="yes" xml:space="preserve">
          <source>Has simple cross-fade.</source>
          <target state="translated">간단한 크로스 페이드 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a74ac6eef10d5f7d85b1dc82c41070528afff805" translate="yes" xml:space="preserve">
          <source>Have a look at &lt;a href=&quot;https://github.com/applidium/Shutterbug&quot;&gt;Shutterbug&lt;/a&gt;, Applidium's lightweight SDWebImage (a nice library on iOS) port to Android.
It supports asynchronous caching, stores failed URLs, handles concurrency well, and helpful subclasses are included.</source>
          <target state="translated">Applidium의 경량 SDWebImage (iOS의 멋진 라이브러리) 포트 인 Android에 대한 &lt;a href=&quot;https://github.com/applidium/Shutterbug&quot;&gt;Shutterbug를&lt;/a&gt; 살펴보십시오. 비동기 캐싱을 지원하고, 실패한 URL을 저장하고, 동시성을 잘 처리하며, 유용한 서브 클래스가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="981d3366d55b7e7b374bafaa71ee98ad9bc879a1" translate="yes" xml:space="preserve">
          <source>Here is how it looks like.</source>
          <target state="translated">그 모습은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c0910f8fe8638c096d1f5b05529cb8fd5470a590" translate="yes" xml:space="preserve">
          <source>Here's the ideal code to cache and then call the above in getView of an adapter when retrieving the web image:</source>
          <target state="translated">다음은 웹 이미지를 검색 할 때 어댑터의 getView에서 캐시하고 호출하는 이상적인 코드입니다.</target>
        </trans-unit>
        <trans-unit id="9473002be7032befa5a38f7c117b38587c057f2f" translate="yes" xml:space="preserve">
          <source>Here's what I created to hold the images that my app is currently displaying. Please note that the &quot;Log&quot; object in use here is my custom wrapper around the final Log class inside Android.</source>
          <target state="translated">내 앱이 현재 표시하고있는 이미지를 담기 위해 만든 것입니다. 여기서 사용중인 &quot;Log&quot;개체는 Android 내부의 최종 Log 클래스에 대한 사용자 지정 래퍼입니다.</target>
        </trans-unit>
        <trans-unit id="1fb9a64bead3c1faf47035368acecdff94e42a70" translate="yes" xml:space="preserve">
          <source>High performance loader - after examining the methods suggested here,
I used &lt;a href=&quot;http://negativeprobability.blogspot.com/2011/08/lazy-loading-of-images-in-listview.html&quot;&gt;Ben's solution&lt;/a&gt; with some changes -</source>
          <target state="translated">고성능 로더-여기에 제안 된 방법을 검토 한 후 &lt;a href=&quot;http://negativeprobability.blogspot.com/2011/08/lazy-loading-of-images-in-listview.html&quot;&gt;Ben의 솔루션&lt;/a&gt; 을 약간 변경하여 사용했습니다.</target>
        </trans-unit>
        <trans-unit id="35d2d5116464670b1b5c41d08ee45d2d09f39452" translate="yes" xml:space="preserve">
          <source>How to lazy load images in ListView in Android</source>
          <target state="translated">Android의 ListView에서 이미지를 지연로드하는 방법</target>
        </trans-unit>
        <trans-unit id="0c7927d4ea56b29ce50d9e6c7a0489950091343a" translate="yes" xml:space="preserve">
          <source>I also improved the ImageLoader by implementing a &lt;a href=&quot;http://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;singleton&lt;/a&gt; in this object.</source>
          <target state="translated">또한이 객체에 &lt;a href=&quot;http://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;싱글 톤&lt;/a&gt; 을 구현하여 ImageLoader를 개선했습니다.</target>
        </trans-unit>
        <trans-unit id="7e657ad729b0aee42497dccabf84bc04c0421254" translate="yes" xml:space="preserve">
          <source>I am using a &lt;code&gt;ListView&lt;/code&gt; to display some images and captions associated with those images. I am getting the images from the Internet. Is there a way to lazy load images so while the text displays, the UI is not blocked and images are displayed as they are downloaded?</source>
          <target state="translated">&lt;code&gt;ListView&lt;/code&gt; 를 사용하여 해당 이미지와 관련된 일부 이미지 및 캡션을 표시하고 있습니다. 인터넷에서 이미지를 가져옵니다. 텍스트가 표시되는 동안 UI가 차단되지 않고 이미지가 다운로드 될 때 이미지가 표시되도록 이미지를 지연로드하는 방법이 있습니까?</target>
        </trans-unit>
        <trans-unit id="77a7f9b6d58b17818e6bed9ae30273cf0834aec4" translate="yes" xml:space="preserve">
          <source>I can recommend a different way that works like a charm: Android Query.</source>
          <target state="translated">매력처럼 작동하는 다른 방법 인 Android Query를 추천 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b31b0897acd8e54898ab53706d69b42d5d3c13bc" translate="yes" xml:space="preserve">
          <source>I had this issue and implemented lruCache. I believe you need API 12 and above or use the compatiblity v4 library. lurCache is fast memory, but it also has a budget, so if you're worried about that you can use a diskcache... It's all described in &lt;em&gt;&lt;a href=&quot;http://developer.android.com/training/displaying-bitmaps/cache-bitmap.html&quot;&gt;Caching Bitmaps&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">나는이 문제가 있었고 lruCache를 구현했다. API 12 이상이 필요하거나 호환성 v4 라이브러리를 사용한다고 생각합니다. lurCache는 빠른 메모리이지만 예산도 있으므로 디스크 캐시를 사용할 수 있다고 걱정되면 &lt;em&gt;&lt;a href=&quot;http://developer.android.com/training/displaying-bitmaps/cache-bitmap.html&quot;&gt;캐싱 비트 맵에&lt;/a&gt;&lt;/em&gt; 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd628b03fa5669f377a506002b18f65492356408" translate="yes" xml:space="preserve">
          <source>I have been using NetworkImageView from the new Android Volley Library &lt;code&gt;com.android.volley.toolbox.NetworkImageView&lt;/code&gt;, and it seems to be working pretty well. Apparently, this is the same view that is used in &lt;a href=&quot;http://en.wikipedia.org/wiki/Google_Play&quot;&gt;Google Play&lt;/a&gt; and other new Google applications. Definitely worth checking out.</source>
          <target state="translated">새로운 Android Volley Library &lt;code&gt;com.android.volley.toolbox.NetworkImageView&lt;/code&gt; 에서 NetworkImageView를 사용하고 있으며 꽤 잘 작동하는 것 같습니다. 분명히 이것은 &lt;a href=&quot;http://en.wikipedia.org/wiki/Google_Play&quot;&gt;Google Play&lt;/a&gt; 및 기타 새로운 Google 응용 프로그램에서 사용되는 것과 동일한 견해입니다. 체크 아웃 가치가 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d3197fce3eaa15b808c2841edb1eb91e5ad492e" translate="yes" xml:space="preserve">
          <source>I have followed this Android Training and I think it does an excellent job at downloading images without blocking the main UI.  It also handles caching and dealing with scrolling through many images: &lt;a href=&quot;http://developer.android.com/training/displaying-bitmaps/load-bitmap.html&quot;&gt;Loading Large Bitmaps Efficiently&lt;/a&gt;</source>
          <target state="translated">나는이 안드로이드 교육을 따랐으며 메인 UI를 차단하지 않고 이미지를 다운로드하는 데 훌륭한 역할을한다고 생각합니다. 또한 많은 이미지를 통한 캐싱 및 스크롤 처리를 처리합니다. &lt;a href=&quot;http://developer.android.com/training/displaying-bitmaps/load-bitmap.html&quot;&gt;효율적으로 큰 비트 맵로드&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cab413449b9351739e0bae6a3b22dd7f0ae48afe" translate="yes" xml:space="preserve">
          <source>I just want to add one more good example, &lt;em&gt;&lt;a href=&quot;http://developer.android.com/resources/samples/XmlAdapters/index.html&quot;&gt;XML Adapters&lt;/a&gt;&lt;/em&gt;. As it's is used by Google and I am also using the same logic to avoid an OutOfMemory error.</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;http://developer.android.com/resources/samples/XmlAdapters/index.html&quot;&gt;XML Adapters&lt;/a&gt;&lt;/em&gt; 예제를 하나 더 추가하고 싶습니다. Google에서 사용하고 OutOfMemory 오류를 피하기 위해 동일한 논리를 사용하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="d039635eabb06ca7f01ced23c96dede484dc0b78" translate="yes" xml:space="preserve">
          <source>I made &lt;a href=&quot;https://github.com/thest1/LazyList&quot;&gt;a simple demo of a lazy list&lt;/a&gt; (located at GitHub) with images.</source>
          <target state="translated">이미지 &lt;a href=&quot;https://github.com/thest1/LazyList&quot;&gt;가있는 게으른 목록&lt;/a&gt; (GitHub에 위치) 의 간단한 데모를 만들었습니다.</target>
        </trans-unit>
        <trans-unit id="561298e678800fce438d57a7dc46f40537901c8b" translate="yes" xml:space="preserve">
          <source>I realized that working with drawables is faster that with bitmaps so I uses drawables instead</source>
          <target state="translated">비트 맵을 사용하는 것보다 드로어 블을 사용하는 것이 더 빠르다는 것을 깨달았습니다.</target>
        </trans-unit>
        <trans-unit id="5b191db6d8a864af94ed7477083e6e7726a18ca4" translate="yes" xml:space="preserve">
          <source>I recommend open source instrument &lt;strong&gt;&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;Universal Image Loader&lt;/a&gt;&lt;/strong&gt;. It is originally based on Fedor Vlasov's project &lt;strong&gt;LazyList&lt;/strong&gt; and has been vastly improved since then.</source>
          <target state="translated">오픈 소스 기기 &lt;strong&gt;&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;Universal Image Loader를&lt;/a&gt;&lt;/strong&gt; 권장합니다. 원래 Fedor Vlasov의 프로젝트 &lt;strong&gt;LazyList를&lt;/strong&gt; 기반으로하며 그 이후로 크게 개선되었습니다.</target>
        </trans-unit>
        <trans-unit id="4248737ead10b436d3595a15fef4a26ea92c98ad" translate="yes" xml:space="preserve">
          <source>I think this issue is very popular among Android developers, and there are plenty of such libraries that claims to resolve this issue, but only a few of them seems to be on the mark. &lt;a href=&quot;http://code.google.com/p/android-query/&quot;&gt;AQuery&lt;/a&gt; is one such library, but it is better than most of them in all aspects and is worth trying for.</source>
          <target state="translated">나는이 문제가 안드로이드 개발자들에게 매우 인기가 있다고 생각하며,이 문제를 해결한다고 주장하는 라이브러리가 많이 있지만 그중 소수만이 마크에있는 것 같습니다. &lt;a href=&quot;http://code.google.com/p/android-query/&quot;&gt;AQuery&lt;/a&gt; 는 그러한 라이브러리 중 하나이지만 모든 측면에서 대부분의 라이브러리보다 낫고 시도해 볼 가치가 있습니다.</target>
        </trans-unit>
        <trans-unit id="86bcb74883528b75b81811b1733dd7a3df3db73c" translate="yes" xml:space="preserve">
          <source>I'll now provide my implementation which is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;singleton&lt;/a&gt; I call from anywhere like this:</source>
          <target state="translated">이제 다음과 같이 어디에서나 호출하는 &lt;a href=&quot;http://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;싱글 톤 인&lt;/a&gt; 구현을 제공 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="64d8f8ad79817213d74364ec900378beb66851da" translate="yes" xml:space="preserve">
          <source>I've written a tutorial that explains how to do lazy-loading of images in a listview. I go into some detail about the issues of recycling and concurrency. I also use a fixed thread pool to prevent spawning a lot of threads.</source>
          <target state="translated">목록보기에서 이미지를 느리게로드하는 방법을 설명하는 자습서를 작성했습니다. 재활용 및 동시성 문제에 대해 자세히 설명합니다. 또한 많은 스레드 생성을 방지하기 위해 고정 스레드 풀을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="2fe2660f1f9b49ec509f3416164c83eb80f70ca1" translate="yes" xml:space="preserve">
          <source>If you want to display Shimmer layout like Facebook there is a official facebook library for that. &lt;a href=&quot;http://facebook.github.io/shimmer-android/&quot;&gt;FaceBook Shimmer Android&lt;/a&gt;</source>
          <target state="translated">Facebook과 같은 Shimmer 레이아웃을 표시하려면 공식 Facebook 라이브러리가 있습니다. &lt;a href=&quot;http://facebook.github.io/shimmer-android/&quot;&gt;페이스 북 쉬머 안드로이드&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="65b9a3782b4c089a55e3d93ff12a1c5f3f71c630" translate="yes" xml:space="preserve">
          <source>Image caching in memory and/or on disk (device's file system or SD card)</source>
          <target state="translated">메모리 및 / 또는 디스크 (장치의 파일 시스템 또는 SD 카드)의 이미지 캐싱</target>
        </trans-unit>
        <trans-unit id="d09a15f73b8ff62631bee99d4aa54ddf939e324b" translate="yes" xml:space="preserve">
          <source>Images add much-needed context and visual flair to Android applications. Picasso allows for hassle-free image loading in your application&amp;mdash;often in one line of code!</source>
          <target state="translated">이미지는 Android 애플리케이션에 필요한 컨텍스트와 시각적 감각을 추가합니다. Picasso는 응용 프로그램에서 번거롭지 않은 이미지 로딩을 허용합니다. 종종 한 줄의 코드로도 가능합니다!</target>
        </trans-unit>
        <trans-unit id="da42d083ecc44d6570402e6de6d077da4063c2fd" translate="yes" xml:space="preserve">
          <source>In Android 4.x and lower, Fresco puts images in a special region of Android memory. This lets your application run faster - and suffer the dreaded OutOfMemoryError much less often.</source>
          <target state="translated">Android 4.x 이하에서는 Fresco가 Android 메모리의 특수 영역에 이미지를 넣습니다. 이를 통해 응용 프로그램을 더 빠르게 실행할 수 있으며 끔찍한 OutOfMemoryError가 훨씬 덜 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2d94e63c5f735bee7d2bb0629cadfe19cbe3f2c5" translate="yes" xml:space="preserve">
          <source>It may be helpful to somebody. It downloads images in the background thread. Images are being cached on an SD card and in memory. The cache implementation is very simple and is just enough for the demo. I decode images with inSampleSize to reduce memory consumption. I also try to handle recycled views correctly.</source>
          <target state="translated">누군가에게 도움이 될 수 있습니다. 백그라운드 스레드에서 이미지를 다운로드합니다. 이미지가 SD 카드와 메모리에 캐시됩니다. 캐시 구현은 매우 간단하며 데모 용으로 충분합니다. 메모리 소비를 줄이기 위해 inSampleSize로 이미지를 디코딩합니다. 또한 재활용 뷰를 올바르게 처리하려고합니다.</target>
        </trans-unit>
        <trans-unit id="4f8ba6094a48651263af977f7572ae1f36bd577a" translate="yes" xml:space="preserve">
          <source>It should be solve your lazy loading problem.</source>
          <target state="translated">지연 로딩 문제를 해결해야합니다.</target>
        </trans-unit>
        <trans-unit id="2469d1d6fff666dc43a5e7eac0358e69547beb22" translate="yes" xml:space="preserve">
          <source>It takes care of everything, You just need to put your desired design code in nested manner in shimmer frame.
Here is a sample code.</source>
          <target state="translated">모든 것을 처리하므로 원하는 디자인 코드를 중첩 된 프레임에 쉬머 프레임에 넣으면됩니다. 다음은 샘플 코드입니다.</target>
        </trans-unit>
        <trans-unit id="be2db2f978aaa1a80117f7d90f04d99b4627c424" translate="yes" xml:space="preserve">
          <source>It's very fast and accurate, and using this you can find many more features like animation when loading, getting a bitmap (if needed), etc.</source>
          <target state="translated">매우 빠르고 정확하며,이를 사용하면로드 할 때 애니메이션, 비트 맵 (필요한 경우) 가져 오기 등과 같은 더 많은 기능을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc07f530268fdafb26c914918cb337cb160b37d4" translate="yes" xml:space="preserve">
          <source>Just a quick tip for someone who is in indecision regarding what library to use for lazy-loading images:</source>
          <target state="translated">지연 로딩 이미지에 어떤 라이브러리를 사용해야하는지 잘 모르는 사람을위한 간단한 팁 :</target>
        </trans-unit>
        <trans-unit id="f68545ae331940838775e00e849fe77037d8f13c" translate="yes" xml:space="preserve">
          <source>Just one line of code!</source>
          <target state="translated">한 줄의 코드 만!</target>
        </trans-unit>
        <trans-unit id="27965ad9156aaa26bb531e72922f42d8fd806a1b" translate="yes" xml:space="preserve">
          <source>Lazy loading of images in Listview Tutorial</source>
          <target state="translated">Listview Tutorial에서 이미지 로딩 지연</target>
        </trans-unit>
        <trans-unit id="28071a3672aa1af72105ff43c69e7ce1e89915c5" translate="yes" xml:space="preserve">
          <source>Listening loading process (including downloading progress)</source>
          <target state="translated">청취 로딩 프로세스 (다운로드 진행률 포함)</target>
        </trans-unit>
        <trans-unit id="1ff62d55dc2eab547ff5391293e0d364a56c4af4" translate="yes" xml:space="preserve">
          <source>Lots of configurable options</source>
          <target state="translated">구성 가능한 많은 옵션</target>
        </trans-unit>
        <trans-unit id="3c85edc9a6b5c8fad867c0bbc788010fac6de49c" translate="yes" xml:space="preserve">
          <source>Many common pitfalls of image loading on Android are handled automatically by Picasso:</source>
          <target state="translated">피카소는 안드로이드에서 이미지 로딩의 많은 함정을 자동으로 처리합니다.</target>
        </trans-unit>
        <trans-unit id="cac27c95cafa3f2ee44d1c4282f90d68662ad99d" translate="yes" xml:space="preserve">
          <source>Many customization options for every display image call (stub images, caching switch, decoding options, Bitmap processing and displaying, etc.)</source>
          <target state="translated">모든 디스플레이 이미지 호출에 대한 많은 사용자 정의 옵션 (스텁 이미지, 캐싱 스위치, 디코딩 옵션, 비트 맵 처리 및 표시 등)</target>
        </trans-unit>
        <trans-unit id="e4734ac755aa4d2731e84e90a510c25c0a6e3555" translate="yes" xml:space="preserve">
          <source>Multithread image loading</source>
          <target state="translated">멀티 스레드 이미지 로딩</target>
        </trans-unit>
        <trans-unit id="43653e8158d95b8ddede5029dfef7bbd8f666888" translate="yes" xml:space="preserve">
          <source>Multithread image loading (async or sync)</source>
          <target state="translated">멀티 스레드 이미지 로딩 (비동기 또는 동기화)</target>
        </trans-unit>
        <trans-unit id="45f890bc588efc786eb82bac4ae8f89c8ae39e2a" translate="yes" xml:space="preserve">
          <source>My code:</source>
          <target state="translated">내 코드 :</target>
        </trans-unit>
        <trans-unit id="ca050b22c2c831ef63f02aee7a45cbbfd46c1337" translate="yes" xml:space="preserve">
          <source>Novoda also has a great &lt;a href=&quot;http://androidimageloader.com/&quot;&gt;lazy image loading library&lt;/a&gt; and many apps like Songkick, Podio, SecretDJ and ImageSearch use their library.</source>
          <target state="translated">Novoda는 또한 &lt;a href=&quot;http://androidimageloader.com/&quot;&gt;게으른 이미지 로딩 라이브러리를 가지고&lt;/a&gt; 있으며 Songkick, Podio, SecretDJ 및 ImageSearch와 같은 많은 앱이 라이브러리를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="bdf87b2bb2882af4e2596d8f3c6aa516ee0d3c27" translate="yes" xml:space="preserve">
          <source>Open source, but headed up by &lt;code&gt;Jake Wharton&lt;/code&gt; of &lt;a href=&quot;http://actionbarsherlock.com/&quot;&gt;ActionBarSherlock&lt;/a&gt; fame.</source>
          <target state="translated">오픈 소스이지만 &lt;a href=&quot;http://actionbarsherlock.com/&quot;&gt;ActionBarSherlock의&lt;/a&gt; &lt;code&gt;Jake Wharton&lt;/code&gt; 이 이끌고 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed631ad9c221b144962add488c07637175f61b93" translate="yes" xml:space="preserve">
          <source>Picasso Jake Wharton's Library</source>
          <target state="translated">피카소 제이크 와튼의 도서관</target>
        </trans-unit>
        <trans-unit id="75140ba7190a4867914fd8fb448eee5927e6b7ed" translate="yes" xml:space="preserve">
          <source>Picasso: A simple solution that just works, you can even specify the exact image size you want to bring in. It is very simple to use but might not be very &quot;performant&quot; for apps that has to deal with humongous amounts of images.</source>
          <target state="translated">피카소 : 작동하는 간단한 솔루션으로, 가져 오려는 정확한 이미지 크기를 지정할 수도 있습니다. 사용하기가 매우 간단하지만 엄청난 양의 이미지를 처리해야하는 앱의 경우 &quot;성능&quot;이 아닐 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7984f7f6786e61e7851623c8e7ac6d100e04249" translate="yes" xml:space="preserve">
          <source>Please visit here : &lt;a href=&quot;http://code.tutsplus.com/tutorials/android-sdk-working-with-picasso--cms-22149&quot;&gt;http://code.tutsplus.com/tutorials/android-sdk-working-with-picasso--cms-22149&lt;/a&gt;</source>
          <target state="translated">여기를 방문하십시오 : &lt;a href=&quot;http://code.tutsplus.com/tutorials/android-sdk-working-with-picasso--cms-22149&quot;&gt;http://code.tutsplus.com/tutorials/android-sdk-working-with-picasso--cms-22149&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a2d0b83d6fc40ae2967445f9ab6a3717fa0957de" translate="yes" xml:space="preserve">
          <source>Possibility of image caching in memory and/or on device's file sysytem (or SD card)</source>
          <target state="translated">메모리 및 / 또는 장치의 파일 시스템 (또는 SD 카드)에서 이미지 캐싱 가능</target>
        </trans-unit>
        <trans-unit id="f3fa7f6efb48e5c8ec810de938dbf693e211bbaf" translate="yes" xml:space="preserve">
          <source>Possibility of wide tuning ImageLoader's configuration (thread executors, downlaoder, decoder, memory and disc cache, display image options, and others)</source>
          <target state="translated">광범위한 조정 ImageLoader 구성 가능 (스레드 실행기, 다운 레이더, 디코더, 메모리 및 디스크 캐시, 디스플레이 이미지 옵션 등)</target>
        </trans-unit>
        <trans-unit id="659b171f6e80b852cddd2af83a85077f44923990" translate="yes" xml:space="preserve">
          <source>Possibility to &quot;listen&quot; loading process</source>
          <target state="translated">로딩 프로세스 &quot;듣기&quot;가능성</target>
        </trans-unit>
        <trans-unit id="f0e11e4634812a3749cba4c811b27af9d9965909" translate="yes" xml:space="preserve">
          <source>Possibility to customize every display image call with separated options</source>
          <target state="translated">별도의 옵션으로 모든 디스플레이 이미지 호출을 사용자 정의 할 수 있음</target>
        </trans-unit>
        <trans-unit id="c9f0644cc8efbabcb3290b003f88757932ddef05" translate="yes" xml:space="preserve">
          <source>Pull requests (and bug reports) are welcome, too!</source>
          <target state="translated">풀 요청 (및 버그 보고서)도 환영합니다!</target>
        </trans-unit>
        <trans-unit id="9f50023c227bb4ef0b8ec5d8c01405528ccb2023" translate="yes" xml:space="preserve">
          <source>Super simple API</source>
          <target state="translated">매우 간단한 API</target>
        </trans-unit>
        <trans-unit id="6b73b86b5cb837a2747a180e1a6baaf0bb90fa99" translate="yes" xml:space="preserve">
          <source>Supports modifying bitmaps in background thread.</source>
          <target state="translated">백그라운드 스레드에서 비트 맵 수정을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="b8f294e11ab2cbacc6d37cba04d404b84a37921c" translate="yes" xml:space="preserve">
          <source>Thanks to James for the code, and Bao-Long for the suggestion of using SoftReference. I implemented the SoftReference changes on James' code. Unfortunately SoftReferences caused my images to be garbage collected too quickly. In my case it was fine without the SoftReference stuff, because my list size is limited and my images are small.</source>
          <target state="translated">코드에 대해서는 James, SoftReference 사용에 대한 제안은 Bao-Long에게 감사드립니다. James 코드에서 SoftReference 변경 사항을 구현했습니다. 불행히도 SoftReferences로 인해 이미지가 너무 빨리 가비지 수집되었습니다. 필자의 경우 목록 크기가 제한되어 있고 이미지가 작기 때문에 SoftReference 항목이 없으면 문제가 없습니다.</target>
        </trans-unit>
        <trans-unit id="ef12ea7787c13f63653cc9eb5643ff537ca030eb" translate="yes" xml:space="preserve">
          <source>The total number of images is not fixed.</source>
          <target state="translated">총 이미지 수는 고정되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d23a7aa4c0b2b7fa49b95eb796e76fc14e3133fa" translate="yes" xml:space="preserve">
          <source>The way I do it is by launching a thread to download the images in the background and hand it a callback for each list item.  When an image is finished downloading it calls the callback which updates the view for the list item.</source>
          <target state="translated">내가하는 방법은 스레드를 시작하여 백그라운드에서 이미지를 다운로드하고 각 목록 항목에 대한 콜백을 전달하는 것입니다. 이미지 다운로드가 완료되면 콜백을 호출하여 목록 항목의보기를 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="aef1e496096ef5911198a5e56e1e7152f9e930f7" translate="yes" xml:space="preserve">
          <source>Their library is hosted &lt;a href=&quot;https://github.com/novoda/ImageLoader&quot;&gt;here&lt;/a&gt; on Github and they have a pretty active &lt;a href=&quot;https://github.com/novoda/ImageLoader/issues&quot;&gt;issues tracker&lt;/a&gt; as well. Their project seems to be pretty active too, with over 300+ commits at the time of writing this reply.</source>
          <target state="translated">그들의 라이브러리는 &lt;a href=&quot;https://github.com/novoda/ImageLoader&quot;&gt;여기&lt;/a&gt; Github에서 호스팅되며 꽤 활발한 &lt;a href=&quot;https://github.com/novoda/ImageLoader/issues&quot;&gt;이슈 트래커&lt;/a&gt; 도 있습니다. 이 답변을 작성할 당시 300 개 이상의 커밋으로 프로젝트가 상당히 활발한 것으로 보입니다.</target>
        </trans-unit>
        <trans-unit id="c34fbabea4b9c03f6da19eabb2c003969c0e8e07" translate="yes" xml:space="preserve">
          <source>There are four basic ways.</source>
          <target state="translated">네 가지 기본 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="31367a420c32dbf578d41425a2131141ca6a7657" translate="yes" xml:space="preserve">
          <source>There's a discussion from a year ago regarding the SoftReferences on google groups: &lt;a href=&quot;http://groups.google.com/group/android-developers/browse_thread/thread/ebabb0dadf38acc1&quot;&gt;link to thread&lt;/a&gt;. As a solution to the too-early garbage collection, they suggest the possibility of manually setting the VM heap size using dalvik.system.VMRuntime.setMinimumHeapSize(), which is not very attractive to me.</source>
          <target state="translated">1 년 전 Google 그룹의 SoftReferences에 관한 토론이 있습니다 : &lt;a href=&quot;http://groups.google.com/group/android-developers/browse_thread/thread/ebabb0dadf38acc1&quot;&gt;링크 링크&lt;/a&gt; . 너무 이른 가비지 수집에 대한 해결책으로 dalvik.system.VMRuntime.setMinimumHeapSize ()를 사용하여 VM 힙 크기를 수동으로 설정할 가능성을 제안합니다.</target>
        </trans-unit>
        <trans-unit id="aa7ace2990661b473f9d4f01bf329f37791f444d" translate="yes" xml:space="preserve">
          <source>This is a common problem on Android that has been solved in many ways by many people.  In my opinion the best solution I've seen is the relatively new library called &lt;a href=&quot;http://square.github.io/picasso/&quot;&gt;Picasso&lt;/a&gt;.  Here are the highlights:</source>
          <target state="translated">이것은 많은 사람들이 여러 가지 방법으로 해결 한 Android의 일반적인 문제입니다. 내 생각에 가장 좋은 해결책은 &lt;a href=&quot;http://square.github.io/picasso/&quot;&gt;Picasso&lt;/a&gt; 라는 비교적 새로운 라이브러리입니다. 주요 내용은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3625e86dd0c0b6309ace4fa64e75deaa1f90958d" translate="yes" xml:space="preserve">
          <source>This is from the Android Developers Blog. The suggested code uses:</source>
          <target state="translated">이것은 Android 개발자 블로그에서 가져온 것입니다. 제안 된 코드는 다음을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="27b2b9b08e65b861c7aff1eadb1e48d6af33faaa" translate="yes" xml:space="preserve">
          <source>This is my code:</source>
          <target state="translated">이것은 내 코드입니다.</target>
        </trans-unit>
        <trans-unit id="c47508b26e2eccb0f83fe5b653f4cc6cc488353b" translate="yes" xml:space="preserve">
          <source>This method doesn't work very well when you're recycling views however.</source>
          <target state="translated">그러나이 방법은 뷰를 재활용 할 때 제대로 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="862f12a0a024dc44918532f93128441ab19c26b9" translate="yes" xml:space="preserve">
          <source>To open the InputStream I used java.net.URLConnection which allows me to use web cache (you need to set a response cache first, but that's another story)</source>
          <target state="translated">InputStream을 열려면 웹 캐시를 사용할 수있는 java.net.URLConnection을 사용했습니다 (응답 캐시를 먼저 설정해야하지만 다른 이야기입니다)</target>
        </trans-unit>
        <trans-unit id="15e99613190c7d08a45a8eef119677ee9ef6f510" translate="yes" xml:space="preserve">
          <source>UIL: The best way to lazy load images. You can cache images(you need permission of course), initialize the loader once, then have your work done. The most mature asynchronous image loading library I have ever seen so far.</source>
          <target state="translated">UIL : 이미지를 지연로드하는 가장 좋은 방법입니다. 이미지를 캐시하고 (물론 권한이 필요함) 로더를 한 번 초기화 한 다음 작업을 수행 할 수 있습니다. 내가 지금까지 본 가장 성숙한 비동기 이미지 로딩 라이브러리.</target>
        </trans-unit>
        <trans-unit id="b6b38e32de40ab8570bd7700f054f5fb707811c4" translate="yes" xml:space="preserve">
          <source>Universal Image Loader</source>
          <target state="translated">범용 이미지 로더</target>
        </trans-unit>
        <trans-unit id="d278862f0e36527b18e42a3858e2d2b451d8d018" translate="yes" xml:space="preserve">
          <source>Use Jake Wharton's  Picasso Library. 
(A Perfect ImageLoading Library form the developer of ActionBarSherlock)</source>
          <target state="translated">Jake Wharton의 Picasso Library를 사용하십시오. (ActionBarSherlock 개발자의 완벽한 이미지 로딩 라이브러리)</target>
        </trans-unit>
        <trans-unit id="c38241d6f91f0aa0dcc95d49d68e0be2f0d3bc3e" translate="yes" xml:space="preserve">
          <source>Use the glide library. It worked for me and will work for your code too.It works for both images as well as gifs too.</source>
          <target state="translated">글라이드 라이브러리를 사용하십시오. 그것은 나를 위해 일했고 코드에서도 작동합니다. 이미지뿐만 아니라 GIF에서도 작동합니다.</target>
        </trans-unit>
        <trans-unit id="342076b56a8d6c03f9476459ece0fc654d31673e" translate="yes" xml:space="preserve">
          <source>Uses a disk &amp;amp; in-memory &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_algorithms#Examples&quot;&gt;Least Recently Used&lt;/a&gt; (LRU) cache.</source>
          <target state="translated">디스크 및 메모리 내 LRU (Least Recent Used) 캐시를 &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_algorithms#Examples&quot;&gt;사용&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="2ea7908a92bd25a38f49d461fc007fb5b2c25e0f" translate="yes" xml:space="preserve">
          <source>Using SoftReference is great, but it makes the cached image to be deleted too often, so I added a Linked list that holds images references, preventing from the image to be deleted, until it reached a predefined size</source>
          <target state="translated">SoftReference를 사용하는 것은 좋지만 캐시 된 이미지가 너무 자주 삭제되므로 이미지 참조가 포함 된 링크 된 목록을 추가하여 미리 정의 된 크기에 도달 할 때까지 이미지가 삭제되지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="f9577d69e08610a1f9ab45138fdb0d5c80c5d670" translate="yes" xml:space="preserve">
          <source>Volley's Lazy Loading library =&amp;gt; From guys at android. It is nice and everything but is poorly documented and hence is a problem to use.</source>
          <target state="translated">발리의 게으른 로딩 라이브러리 =&amp;gt; 안드로이드의 사람들로부터. 훌륭하고 모든 것이지만 문서화가 잘되어 있지 않아서 사용하는 데 문제가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c21fdd2cfd8c226eb95278f9396c70a2a9252bfc" translate="yes" xml:space="preserve">
          <source>Well, image loading time from the Internet has many solutions. You may also use the library &lt;a href=&quot;https://code.google.com/p/android-query/wiki/ImageLoading&quot;&gt;Android-Query&lt;/a&gt;. It will give you all the required activity. Make sure what you want to do and read the library wiki page. And solve the image loading restriction.</source>
          <target state="translated">인터넷에서 이미지 로딩 시간에는 많은 솔루션이 있습니다. &lt;a href=&quot;https://code.google.com/p/android-query/wiki/ImageLoading&quot;&gt;Android-Query&lt;/a&gt; 라이브러리를 사용할 수도 있습니다. 필요한 모든 활동을 제공합니다. 원하는 것을 확인하고 라이브러리 위키 페이지를 읽으십시오. 이미지 로딩 제한을 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="501593cf64d51eb41f5ede3cee10f57947a9867e" translate="yes" xml:space="preserve">
          <source>When you need to put something like &quot;Loading image...&quot;</source>
          <target state="translated">&quot;이미지로드 중 ...&quot;과 같은 것을 넣어야 할 때</target>
        </trans-unit>
        <trans-unit id="340c1f999abbbba494ca3922ca5a7c5bcc6ef112" translate="yes" xml:space="preserve">
          <source>When you need to show the downloaded image.</source>
          <target state="translated">다운로드 한 이미지를 표시해야 할 때.</target>
        </trans-unit>
        <trans-unit id="bf9e8b329d76e7150d73c5a5811e6c73235bb87c" translate="yes" xml:space="preserve">
          <source>Wide customization of ImageLoader's configuration (thread executors, downloader, decoder, memory and disk cache, display image options, etc.)</source>
          <target state="translated">ImageLoader 구성의 광범위한 사용자 정의 (스레드 실행기, 다운로더, 디코더, 메모리 및 디스크 캐시, 표시 이미지 옵션 등)</target>
        </trans-unit>
        <trans-unit id="1683173da1e3182e4ebcd07b9364191d4a0120c9" translate="yes" xml:space="preserve">
          <source>Widget support</source>
          <target state="translated">위젯 지원</target>
        </trans-unit>
        <trans-unit id="aa0d8a43a429fecece3d9b492ad7b12db22d943f" translate="yes" xml:space="preserve">
          <source>You can download that &lt;a href=&quot;http://en.wikipedia.org/wiki/JAR_%28file_format%29&quot;&gt;JAR&lt;/a&gt; file from &lt;a href=&quot;http://code.google.com/p/android-query/downloads/list&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://code.google.com/p/android-query/downloads/list&quot;&gt;여기&lt;/a&gt; 에서 해당 &lt;a href=&quot;http://en.wikipedia.org/wiki/JAR_%28file_format%29&quot;&gt;JAR&lt;/a&gt; 파일을 다운로드 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="a2150109b3b22d358ba8fdd09cd1148382d0a5a5" translate="yes" xml:space="preserve">
          <source>You must try this Universal Loader is best.
I am using this after done many RnD on lazy loading .</source>
          <target state="translated">이 범용 로더를 사용하는 것이 가장 좋습니다. 지연 로딩에 많은 RnD를 수행 한 후 이것을 사용하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="855b8be24fa05da6e074b6059a488f75185b60c3" translate="yes" xml:space="preserve">
          <source>create only one instance of ImageLoader and reuse it all around your
  application. This way image caching will be much more efficient.</source>
          <target state="translated">ImageLoader 인스턴스를 하나만 만들고 응용 프로그램 주위에서 재사용하십시오. 이 방법으로 이미지 캐싱이 훨씬 더 효율적입니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
