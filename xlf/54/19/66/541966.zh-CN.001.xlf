<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/541966">
    <body>
      <group id="541966">
        <trans-unit id="9018cced31f6138d2ddd1c43920d6dd0330ffe68" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://android-developers.blogspot.com/2010/07/multithreading-for-performance.html&quot;&gt;Multithreading For Performance&lt;/a&gt;, a tutorial by Gilles Debunne.</source>
          <target state="translated">Gilles Debunne撰写的教程Multi &lt;a href=&quot;http://android-developers.blogspot.com/2010/07/multithreading-for-performance.html&quot;&gt;Performanceing for Performance&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="798b84b22fd0f6bd56860a5243bfbaaaef435816" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://droidparts.org&quot;&gt;DroidParts&lt;/a&gt; has &lt;a href=&quot;https://github.com/yanchenko/droidparts/blob/master/droidparts/src/org/droidparts/net/image/ImageFetcher.java&quot;&gt;ImageFetcher&lt;/a&gt; that requires zero configuration to get started.</source>
          <target state="translated">&lt;a href=&quot;http://droidparts.org&quot;&gt;DroidParts的&lt;/a&gt; &lt;a href=&quot;https://github.com/yanchenko/droidparts/blob/master/droidparts/src/org/droidparts/net/image/ImageFetcher.java&quot;&gt;ImageFetcher&lt;/a&gt;需要零配置才能开始。</target>
        </trans-unit>
        <trans-unit id="183ba1a25f1145ba5a208728aa4658376ab09552" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/koush/UrlImageViewHelper&quot;&gt;URLImageViewHelper&lt;/a&gt; is an amazing library that helps you to do that.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/koush/UrlImageViewHelper&quot;&gt;URLImageViewHelper&lt;/a&gt;是一个了不起的库，可以帮助您做到这一点。</target>
        </trans-unit>
        <trans-unit id="b56dd7cd65b139c0730fb4cc7f6b6504e9215113" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AsyncTasks&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AsyncTasks&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="7f6af57be25006d6b78bce216a8bf2c5aaba7d0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;// For a simple view:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;//对于一个简单的视图：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="816bc47998d3cfc0c1894905f32b58536c862bdc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1.&lt;/strong&gt;&lt;a href=&quot;http://square.github.io/picasso/&quot;&gt;&lt;strong&gt;Picasso&lt;/strong&gt;&lt;/a&gt; allows for hassle-free image loading in your application&amp;mdash;often in one line of code!</source>
          <target state="translated">&lt;strong&gt;1.&lt;/strong&gt; &lt;a href=&quot;http://square.github.io/picasso/&quot;&gt;&lt;strong&gt;Picasso&lt;/strong&gt;&lt;/a&gt;允许在您的应用程序中轻松加载图像-通常只需一行代码！</target>
        </trans-unit>
        <trans-unit id="7be806b05c98847268fc9a8f9d99ac5039cef2d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2.&lt;/strong&gt;&lt;a href=&quot;https://github.com/bumptech/glide&quot;&gt;&lt;strong&gt;Glide&lt;/strong&gt;&lt;/a&gt; An image loading and caching library for Android focused on smooth scrolling</source>
          <target state="translated">&lt;strong&gt;2.&lt;/strong&gt; &lt;a href=&quot;https://github.com/bumptech/glide&quot;&gt;&lt;strong&gt;滑行&lt;/strong&gt;&lt;/a&gt; Android的图像加载和缓存库着重于平滑滚动</target>
        </trans-unit>
        <trans-unit id="a393d0b816addef5a402e631cedfacd8ce890f18" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;3.&lt;/strong&gt;&lt;a href=&quot;https://github.com/facebook/fresco&quot;&gt;&lt;strong&gt;fresco&lt;/strong&gt;&lt;/a&gt;  is a powerful system for displaying images in Android 
   applications.Fresco takes care of image loading and display, so you don't have 
  to.</source>
          <target state="translated">&lt;strong&gt;3.&lt;/strong&gt; &lt;a href=&quot;https://github.com/facebook/fresco&quot;&gt;&lt;strong&gt;fresco&lt;/strong&gt;&lt;/a&gt;是一个功能强大的系统，可在Android应用程序中显示图像。Fresco负责图像的加载和显示，因此您不必这样做。</target>
        </trans-unit>
        <trans-unit id="533616d8543a0514115aabefebaed2b06ff667be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Features&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Features&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="80125fcb2b3f9dd8457bc073a5ee9e056404bba4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fresco by Facebook&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Facebook的壁画&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="096e6b62db1cbbcc91229ae91ed9c9d782560672" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Getting Started with Fresco&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;壁画入门&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a0d14cc9a2351dbffe0c64071cbb0db0247c5e8e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Glide&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Glide&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ad15d41133a48151a3140e3573e291fff6e45b30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Picasso&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Picasso&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eaf9f0c6c43a1aa39ce3589757aaf6f4968b667c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Picasso&lt;/strong&gt;  is a library specifically for this purpose, in-fact it will manage cache and all other network operations automatically.You will have to add library in your project and just write a single line of code to load image from remote URL.</source>
          <target state="translated">&lt;strong&gt;毕加索&lt;/strong&gt;是一个专门用于此目的的库，实际上它将自动管理缓存和所有其他网络操作。您将不得不在项目中添加库，只需编写一行代码即可从远程URL加载图像。</target>
        </trans-unit>
        <trans-unit id="1779f3260972f4945e5aafba1c119ab62a1260e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update: Note that this answer is pretty ineffective now. The Garbage Collector acts aggressively on SoftReference and WeakReference, so this code is NOT suitable for new apps.&lt;/strong&gt;  (Instead, try libraries like &lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;Universal Image Loader&lt;/a&gt; suggested in other answers.)</source>
          <target state="translated">&lt;strong&gt;更新：请注意，此答案现在无效。&lt;/strong&gt; &lt;strong&gt;垃圾收集器对SoftReference和WeakReference采取积极措施，因此此代码不适用于新应用。&lt;/strong&gt; （相反，请尝试其他答案中建议的类似&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;Universal Image Loader的&lt;/a&gt;库。）</target>
        </trans-unit>
        <trans-unit id="8287fba00f66a794e24419e707edaed6f7516403" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use Gradle:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;使用Gradle：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0712dbc27867fa22b927a1646b0acb90fc529253" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;placeholder&lt;/em&gt;&lt;code&gt;Drawable&lt;/code&gt; while you download.</source>
          <target state="translated">下载时 &lt;code&gt;Drawable&lt;/code&gt; 的&lt;em&gt;占位符&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="ba33e57daf2c7bbee1881d25bd8b1261c5ae341f" translate="yes" xml:space="preserve">
          <source>A hard, limited size, &lt;code&gt;FIFO cache&lt;/code&gt;.</source>
          <target state="translated">硬的，有限大小的 &lt;code&gt;FIFO cache&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6f91f49d93710992afbcb24bbb877c16dd24f9a8" translate="yes" xml:space="preserve">
          <source>A powerful image downloading and caching library for Android.</source>
          <target state="translated">是一款功能强大的Android图片下载和缓存库。</target>
        </trans-unit>
        <trans-unit id="87494a016436ec870bce507736b1268a0646f83b" translate="yes" xml:space="preserve">
          <source>A soft, easily &lt;code&gt;garbage collect&lt;/code&gt;-ed cache.</source>
          <target state="translated">一个软的，易于 &lt;code&gt;garbage collect&lt;/code&gt; 缓存。</target>
        </trans-unit>
        <trans-unit id="d257242b66cc8b23dd357a521cdb7043c930f2b3" translate="yes" xml:space="preserve">
          <source>Add this dependency in your gradle file.</source>
          <target state="translated">在你的gradle文件中添加这个依赖关系。</target>
        </trans-unit>
        <trans-unit id="9c9be9ec74a7b96021d89ddc180c178c76b32ff1" translate="yes" xml:space="preserve">
          <source>All above code have their own worth but with my personal experience just give a try with Picasso.</source>
          <target state="translated">以上的代码都有自己的价值,但以我个人的经验,只需用Picasso试试。</target>
        </trans-unit>
        <trans-unit id="d0f94c4493c1c6cb4ab447af0d7981efcecbd8f2" translate="yes" xml:space="preserve">
          <source>And here is the java code for it.</source>
          <target state="translated">这里是它的java代码。</target>
        </trans-unit>
        <trans-unit id="a26989261475cacdd94de4844a353645cb3ac4b3" translate="yes" xml:space="preserve">
          <source>Android 2.0+ support</source>
          <target state="translated">安卓2.0以上的支持</target>
        </trans-unit>
        <trans-unit id="dddf73cd98dcce7c884fe24956533693e61e8e3f" translate="yes" xml:space="preserve">
          <source>As an example:</source>
          <target state="translated">举例来说:</target>
        </trans-unit>
        <trans-unit id="bb0dab232f949b5954e21e1c5ccbcd10f611bcde" translate="yes" xml:space="preserve">
          <source>Asynchronously load images from network or app resources with one line of code</source>
          <target state="translated">只需一行代码就能从网络或应用程序资源中异步加载图像。</target>
        </trans-unit>
        <trans-unit id="5227a496f6fa4a1e4e5d3faf16fe1091f04e4b98" translate="yes" xml:space="preserve">
          <source>Automatic &lt;code&gt;ListView&lt;/code&gt; detection</source>
          <target state="translated">自动 &lt;code&gt;ListView&lt;/code&gt; 检测</target>
        </trans-unit>
        <trans-unit id="ebf63a0fa6c6a4d9de25d6e5bd8864d15f55d9cc" translate="yes" xml:space="preserve">
          <source>Automatic disk and memory caching</source>
          <target state="translated">自动磁盘和内存缓存</target>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="translated">基本用法</target>
        </trans-unit>
        <trans-unit id="9743eff7d22a9b4eea0040c6a752920c001d6b41" translate="yes" xml:space="preserve">
          <source>Basically &lt;a href=&quot;http://developer.android.com/resources/samples/XmlAdapters/src/com/example/android/xmladapters/ImageDownloader.html&quot;&gt;this ImageDownloader&lt;/a&gt; is your answer (as it covers most of your requirements). Some you can also implement in that.</source>
          <target state="translated">基本上， &lt;a href=&quot;http://developer.android.com/resources/samples/XmlAdapters/src/com/example/android/xmladapters/ImageDownloader.html&quot;&gt;此ImageDownloader&lt;/a&gt;是您的答案（因为它涵盖了您的大多数要求）。 您也可以在其中实现某些功能。</target>
        </trans-unit>
        <trans-unit id="216c9fa7af079b1a641e7c3d202599ed755e6033" translate="yes" xml:space="preserve">
          <source>Can do custom transformations</source>
          <target state="translated">可以进行定制化改造</target>
        </trans-unit>
        <trans-unit id="9318ada750f26ac931415a060879f5f1ffa7a63d" translate="yes" xml:space="preserve">
          <source>Check my fork of &lt;a href=&quot;https://github.com/nicolasjafelle/LazyList&quot;&gt;LazyList&lt;/a&gt;. Basically, I improve the LazyList by delaying the call of the ImageView and create two methods:</source>
          <target state="translated">检查我的&lt;a href=&quot;https://github.com/nicolasjafelle/LazyList&quot;&gt;LazyList&lt;/a&gt;叉子。 基本上，我通过延迟ImageView的调用来改进LazyList并创建两个方法：</target>
        </trans-unit>
        <trans-unit id="15635a8f596592ab5f9fdc74010ed766951639d8" translate="yes" xml:space="preserve">
          <source>Clone &lt;a href=&quot;https://github.com/yanchenko/droidparts/tree/master/droidparts-samples/DroidPartsGram&quot;&gt;DroidPartsGram&lt;/a&gt; for an example:</source>
          <target state="translated">以克隆&lt;a href=&quot;https://github.com/yanchenko/droidparts/tree/master/droidparts-samples/DroidPartsGram&quot;&gt;DroidPartsGram&lt;/a&gt;为例：</target>
        </trans-unit>
        <trans-unit id="9c1bd73863928ae57a0e0c21b5c901aa7645bee6" translate="yes" xml:space="preserve">
          <source>DIY =&amp;gt; Not the best solution but for a few images and if you want to go without the hassle of using others libraries</source>
          <target state="translated">DIY =&amp;gt;不是最好的解决方案，但是对于一些图像，如果您想不用使用其他库的麻烦</target>
        </trans-unit>
        <trans-unit id="438cebd9f0d14f47e7bf6d703e2380cac6f54796" translate="yes" xml:space="preserve">
          <source>Developers Google events</source>
          <target state="translated">开发者谷歌活动</target>
        </trans-unit>
        <trans-unit id="a2afadd1373fc345254fa69a3e353f8bddc383a7" translate="yes" xml:space="preserve">
          <source>Don't forget to add the
  following permissions to your AndroidManifest.xml:</source>
          <target state="translated">不要忘记在你的AndroidManifest.xml中添加以下权限。</target>
        </trans-unit>
        <trans-unit id="d4112e60ea8c98d0b47a2280640a4c629e467ea9" translate="yes" xml:space="preserve">
          <source>Efficiently decodes images.</source>
          <target state="translated">高效解码图像。</target>
        </trans-unit>
        <trans-unit id="5a05bdc1b3e09d16042de7bf9c3957dc3f218437" translate="yes" xml:space="preserve">
          <source>Frequently updated</source>
          <target state="translated">经常更新</target>
        </trans-unit>
        <trans-unit id="7035acb6765a95f61d5955e17dabc2bff7a919f9" translate="yes" xml:space="preserve">
          <source>Fresco Documentation</source>
          <target state="translated">新鲜文档</target>
        </trans-unit>
        <trans-unit id="09f852ed44e9c5a73017f25944eacb1889d1551e" translate="yes" xml:space="preserve">
          <source>Fresco Github</source>
          <target state="translated">Fresco Github</target>
        </trans-unit>
        <trans-unit id="77f754976dcf7161929381c562937a0c6e2c8c31" translate="yes" xml:space="preserve">
          <source>Fresco is a powerful system for displaying images in Android applications.</source>
          <target state="translated">Fresco是一个强大的系统,可以在Android应用中显示图片。</target>
        </trans-unit>
        <trans-unit id="d794ea1317ebc58b147b03481ef360b3f4fe1c99" translate="yes" xml:space="preserve">
          <source>Fresco takes care of image loading and display, so you don't have to. It will load images from the network, local storage, or local resources, and display a placeholder until the image has arrived. It has two levels of cache; one in memory and another in internal storage.</source>
          <target state="translated">Fresco负责图像的加载和显示,所以你不需要这样做。它将从网络、本地存储或本地资源中加载图像,并在图像到达之前显示占位符。它有两级缓存,一级在内存中,另一级在内部存储中。</target>
        </trans-unit>
        <trans-unit id="a1e52f849fad98c5d827142abc12f7fbaf39c355" translate="yes" xml:space="preserve">
          <source>Give &lt;a href=&quot;https://code.google.com/p/android-query/wiki/ImageLoading&quot;&gt;Aquery&lt;/a&gt; a try. It has amazingly simple methods to load and cache images asynchronously.</source>
          <target state="translated">&lt;a href=&quot;https://code.google.com/p/android-query/wiki/ImageLoading&quot;&gt;试试看Aquery&lt;/a&gt; 。 它具有非常简单的方法来异步加载和缓存图像。</target>
        </trans-unit>
        <trans-unit id="8540a450329cc3a129f0eec42974857b5f19230e" translate="yes" xml:space="preserve">
          <source>Glide Image Loading Library</source>
          <target state="translated">滑翔图像加载库</target>
        </trans-unit>
        <trans-unit id="9861e2cf521ab319396c15d906e3603fd6cebc91" translate="yes" xml:space="preserve">
          <source>Glide is a fast and efficient open source media management framework for Android that wraps media decoding, memory and disk caching, and resource pooling into a simple and easy to use interface.</source>
          <target state="translated">Glide是一个快速高效的Android开源媒体管理框架,它将媒体解码、内存和磁盘缓存以及资源池封装在一个简单易用的界面中。</target>
        </trans-unit>
        <trans-unit id="f9cec647494ceba78da65437e2ccc5b9d89b7160" translate="yes" xml:space="preserve">
          <source>Glide supports fetching, decoding, and displaying video stills, images, and animated GIFs. Glide includes a flexible api that allows developers to plug in to almost any network stack. By default Glide uses a custom HttpUrlConnection based stack, but also includes utility libraries plug in to Google's Volley project or Square's OkHttp library instead.</source>
          <target state="translated">Glide支持获取、解码和显示视频剧照、图片和动画GIFs。Glide包含了灵活的API,允许开发者插入到几乎所有的网络堆栈中。默认情况下,Glide使用了一个基于HttpUrlConnection的自定义堆栈,但也包括插入到Google的Volley项目或Square的OkHttp库中的实用程序库。</target>
        </trans-unit>
        <trans-unit id="69a2fd689dc7a41c0d5336a0c3e6536f22b9ed66" translate="yes" xml:space="preserve">
          <source>Glide's primary focus is on making scrolling any kind of a list of images as smooth and fast as possible, but Glide is also effective for almost any case where you need to fetch, resize, and display a remote image.</source>
          <target state="translated">Glide的主要关注点是让滚动任何类型的图片列表尽可能的流畅和快速,但Glide也适用于几乎所有需要获取、调整大小和显示远程图片的情况。</target>
        </trans-unit>
        <trans-unit id="a0d9c2bfcd54203470e6f84a175aa39348bd1359" translate="yes" xml:space="preserve">
          <source>Google I/O 2013 volley image cache tutorial</source>
          <target state="translated">谷歌IO 2013年排球图像缓存教程</target>
        </trans-unit>
        <trans-unit id="7aae71a8229fac40e3a384eceda31032e6b265c2" translate="yes" xml:space="preserve">
          <source>Handling ImageView recycling and download cancellation in an adapter.
Complex image transformations with minimal memory use.
Automatic memory and disk caching.</source>
          <target state="translated">在一个适配器中处理ImageView的回收和下载取消。以最小的内存使用量进行复杂的图像转换。自动内存和磁盘缓存。</target>
        </trans-unit>
        <trans-unit id="6ab19455b9c91e5525c05dc051a1d8078c6342e9" translate="yes" xml:space="preserve">
          <source>Has image loading progress callback.</source>
          <target state="translated">具有图像加载进度回调。</target>
        </trans-unit>
        <trans-unit id="bacaf3972ab4cd21d1bb275ef757a67747611566" translate="yes" xml:space="preserve">
          <source>Has simple cross-fade.</source>
          <target state="translated">具有简单的交叉融合。</target>
        </trans-unit>
        <trans-unit id="a74ac6eef10d5f7d85b1dc82c41070528afff805" translate="yes" xml:space="preserve">
          <source>Have a look at &lt;a href=&quot;https://github.com/applidium/Shutterbug&quot;&gt;Shutterbug&lt;/a&gt;, Applidium's lightweight SDWebImage (a nice library on iOS) port to Android.
It supports asynchronous caching, stores failed URLs, handles concurrency well, and helpful subclasses are included.</source>
          <target state="translated">看看&lt;a href=&quot;https://github.com/applidium/Shutterbug&quot;&gt;Shutterbug&lt;/a&gt; ，这是Applidium的轻量级SDWebImage（iOS上的一个不错的库）移植到Android。 它支持异步缓存，存储失败的URL，很好地处理并发性，并且包括有用的子类。</target>
        </trans-unit>
        <trans-unit id="981d3366d55b7e7b374bafaa71ee98ad9bc879a1" translate="yes" xml:space="preserve">
          <source>Here is how it looks like.</source>
          <target state="translated">下面是它的样子。</target>
        </trans-unit>
        <trans-unit id="c0910f8fe8638c096d1f5b05529cb8fd5470a590" translate="yes" xml:space="preserve">
          <source>Here's the ideal code to cache and then call the above in getView of an adapter when retrieving the web image:</source>
          <target state="translated">下面是理想的缓存代码,然后在检索网页图片时,在适配器的getView中调用上面的代码。</target>
        </trans-unit>
        <trans-unit id="9473002be7032befa5a38f7c117b38587c057f2f" translate="yes" xml:space="preserve">
          <source>Here's what I created to hold the images that my app is currently displaying. Please note that the &quot;Log&quot; object in use here is my custom wrapper around the final Log class inside Android.</source>
          <target state="translated">下面是我创建的用于保存我的应用程序当前显示的图片。请注意,这里使用的 &quot;日志 &quot;对象是我在Android内部的最终日志类的自定义包装器。</target>
        </trans-unit>
        <trans-unit id="1fb9a64bead3c1faf47035368acecdff94e42a70" translate="yes" xml:space="preserve">
          <source>High performance loader - after examining the methods suggested here,
I used &lt;a href=&quot;http://negativeprobability.blogspot.com/2011/08/lazy-loading-of-images-in-listview.html&quot;&gt;Ben's solution&lt;/a&gt; with some changes -</source>
          <target state="translated">高性能加载程序-在检查了此处建议的方法后，我使用了&lt;a href=&quot;http://negativeprobability.blogspot.com/2011/08/lazy-loading-of-images-in-listview.html&quot;&gt;Ben的解决方案&lt;/a&gt;并进行了一些更改-</target>
        </trans-unit>
        <trans-unit id="35d2d5116464670b1b5c41d08ee45d2d09f39452" translate="yes" xml:space="preserve">
          <source>How to lazy load images in ListView in Android</source>
          <target state="translated">如何在Android的ListView中偷懒加载图片</target>
        </trans-unit>
        <trans-unit id="0c7927d4ea56b29ce50d9e6c7a0489950091343a" translate="yes" xml:space="preserve">
          <source>I also improved the ImageLoader by implementing a &lt;a href=&quot;http://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;singleton&lt;/a&gt; in this object.</source>
          <target state="translated">通过在此对象中实现&lt;a href=&quot;http://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;单例&lt;/a&gt; ，我还改进了ImageLoader。</target>
        </trans-unit>
        <trans-unit id="7e657ad729b0aee42497dccabf84bc04c0421254" translate="yes" xml:space="preserve">
          <source>I am using a &lt;code&gt;ListView&lt;/code&gt; to display some images and captions associated with those images. I am getting the images from the Internet. Is there a way to lazy load images so while the text displays, the UI is not blocked and images are displayed as they are downloaded?</source>
          <target state="translated">我正在使用 &lt;code&gt;ListView&lt;/code&gt; 显示一些图像和与这些图像相关的标题。 我正在从互联网上获取图像。 有没有一种方法可以延迟加载图像，以便在显示文本时不阻止UI并在下载图像时显示它们？</target>
        </trans-unit>
        <trans-unit id="77a7f9b6d58b17818e6bed9ae30273cf0834aec4" translate="yes" xml:space="preserve">
          <source>I can recommend a different way that works like a charm: Android Query.</source>
          <target state="translated">我可以推荐一种不同的方法,效果很好。安卓查询。</target>
        </trans-unit>
        <trans-unit id="b31b0897acd8e54898ab53706d69b42d5d3c13bc" translate="yes" xml:space="preserve">
          <source>I had this issue and implemented lruCache. I believe you need API 12 and above or use the compatiblity v4 library. lurCache is fast memory, but it also has a budget, so if you're worried about that you can use a diskcache... It's all described in &lt;em&gt;&lt;a href=&quot;http://developer.android.com/training/displaying-bitmaps/cache-bitmap.html&quot;&gt;Caching Bitmaps&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">我遇到了这个问题，并实现了lruCache。 我相信您需要API 12及更高版本或使用兼容性v4库。 lurCache是​​快速内存，但它也有预算，因此，如果您担心可以使用磁盘&lt;em&gt;&lt;a href=&quot;http://developer.android.com/training/displaying-bitmaps/cache-bitmap.html&quot;&gt;缓存，请&lt;/a&gt;&lt;/em&gt;参见&lt;em&gt;缓存位图中&lt;/em&gt;的所有内容。</target>
        </trans-unit>
        <trans-unit id="fd628b03fa5669f377a506002b18f65492356408" translate="yes" xml:space="preserve">
          <source>I have been using NetworkImageView from the new Android Volley Library &lt;code&gt;com.android.volley.toolbox.NetworkImageView&lt;/code&gt;, and it seems to be working pretty well. Apparently, this is the same view that is used in &lt;a href=&quot;http://en.wikipedia.org/wiki/Google_Play&quot;&gt;Google Play&lt;/a&gt; and other new Google applications. Definitely worth checking out.</source>
          <target state="translated">我一直在使用新的Android Volley库 &lt;code&gt;com.android.volley.toolbox.NetworkImageView&lt;/code&gt; 中的 NetworkImageView，它似乎运行得很好。 显然，这与&lt;a href=&quot;http://en.wikipedia.org/wiki/Google_Play&quot;&gt;Google Play&lt;/a&gt;和其他新的Google应用程序中使用的视图相同。 绝对值得一试。</target>
        </trans-unit>
        <trans-unit id="2d3197fce3eaa15b808c2841edb1eb91e5ad492e" translate="yes" xml:space="preserve">
          <source>I have followed this Android Training and I think it does an excellent job at downloading images without blocking the main UI.  It also handles caching and dealing with scrolling through many images: &lt;a href=&quot;http://developer.android.com/training/displaying-bitmaps/load-bitmap.html&quot;&gt;Loading Large Bitmaps Efficiently&lt;/a&gt;</source>
          <target state="translated">我已经接受了本Android培训，并且我认为它在下载图像方面做得很好，而且不会阻塞主界面。 它还处理缓存并处理滚动浏览许多图像： &lt;a href=&quot;http://developer.android.com/training/displaying-bitmaps/load-bitmap.html&quot;&gt;有效地加载大位图&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cab413449b9351739e0bae6a3b22dd7f0ae48afe" translate="yes" xml:space="preserve">
          <source>I just want to add one more good example, &lt;em&gt;&lt;a href=&quot;http://developer.android.com/resources/samples/XmlAdapters/index.html&quot;&gt;XML Adapters&lt;/a&gt;&lt;/em&gt;. As it's is used by Google and I am also using the same logic to avoid an OutOfMemory error.</source>
          <target state="translated">我只想添加一个更好的示例&lt;em&gt;&lt;a href=&quot;http://developer.android.com/resources/samples/XmlAdapters/index.html&quot;&gt;XML Adapters&lt;/a&gt;&lt;/em&gt; 。 由于Google使用了它，因此我也使用相同的逻辑来避免OutOfMemory错误。</target>
        </trans-unit>
        <trans-unit id="d039635eabb06ca7f01ced23c96dede484dc0b78" translate="yes" xml:space="preserve">
          <source>I made &lt;a href=&quot;https://github.com/thest1/LazyList&quot;&gt;a simple demo of a lazy list&lt;/a&gt; (located at GitHub) with images.</source>
          <target state="translated">我做&lt;a href=&quot;https://github.com/thest1/LazyList&quot;&gt;了一个&lt;/a&gt;带有图像的惰性列表的简单演示 （位于GitHub上）。</target>
        </trans-unit>
        <trans-unit id="561298e678800fce438d57a7dc46f40537901c8b" translate="yes" xml:space="preserve">
          <source>I realized that working with drawables is faster that with bitmaps so I uses drawables instead</source>
          <target state="translated">我意识到使用可绘制物比使用位图要快,所以我用可绘制物来代替。</target>
        </trans-unit>
        <trans-unit id="5b191db6d8a864af94ed7477083e6e7726a18ca4" translate="yes" xml:space="preserve">
          <source>I recommend open source instrument &lt;strong&gt;&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;Universal Image Loader&lt;/a&gt;&lt;/strong&gt;. It is originally based on Fedor Vlasov's project &lt;strong&gt;LazyList&lt;/strong&gt; and has been vastly improved since then.</source>
          <target state="translated">我建议使用开放源代码工具&lt;strong&gt;&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;Universal Image Loader&lt;/a&gt;&lt;/strong&gt; 。 它最初是基于Fedor Vlasov的项目&lt;strong&gt;LazyList进行的&lt;/strong&gt; ，此后得到了极大的改进。</target>
        </trans-unit>
        <trans-unit id="4248737ead10b436d3595a15fef4a26ea92c98ad" translate="yes" xml:space="preserve">
          <source>I think this issue is very popular among Android developers, and there are plenty of such libraries that claims to resolve this issue, but only a few of them seems to be on the mark. &lt;a href=&quot;http://code.google.com/p/android-query/&quot;&gt;AQuery&lt;/a&gt; is one such library, but it is better than most of them in all aspects and is worth trying for.</source>
          <target state="translated">我认为这个问题在Android开发人员中非常流行，并且有很多此类库声称可以解决此问题，但是似乎只有少数几个库可以解决。 &lt;a href=&quot;http://code.google.com/p/android-query/&quot;&gt;AQuery&lt;/a&gt;是这样的一个库，但在各个方面都比大多数库要好，值得尝试。</target>
        </trans-unit>
        <trans-unit id="86bcb74883528b75b81811b1733dd7a3df3db73c" translate="yes" xml:space="preserve">
          <source>I'll now provide my implementation which is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;singleton&lt;/a&gt; I call from anywhere like this:</source>
          <target state="translated">现在，我将提供我的实现，这是我可以从任何地方调用的&lt;a href=&quot;http://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;单例代码&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="64d8f8ad79817213d74364ec900378beb66851da" translate="yes" xml:space="preserve">
          <source>I've written a tutorial that explains how to do lazy-loading of images in a listview. I go into some detail about the issues of recycling and concurrency. I also use a fixed thread pool to prevent spawning a lot of threads.</source>
          <target state="translated">我写了一个教程,讲解如何在列表视图中进行图片的懒人加载。关于回收和并发的问题,我详细的讲了一些。我还用了一个固定的线程池来防止产生大量的线程。</target>
        </trans-unit>
        <trans-unit id="2fe2660f1f9b49ec509f3416164c83eb80f70ca1" translate="yes" xml:space="preserve">
          <source>If you want to display Shimmer layout like Facebook there is a official facebook library for that. &lt;a href=&quot;http://facebook.github.io/shimmer-android/&quot;&gt;FaceBook Shimmer Android&lt;/a&gt;</source>
          <target state="translated">如果要显示Facebook的Shimmer布局，则有一个官方的Facebook库。 &lt;a href=&quot;http://facebook.github.io/shimmer-android/&quot;&gt;FaceBook微光Android&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="65b9a3782b4c089a55e3d93ff12a1c5f3f71c630" translate="yes" xml:space="preserve">
          <source>Image caching in memory and/or on disk (device's file system or SD card)</source>
          <target state="translated">内存和磁盘上的图像缓存(设备的文件系统或SD卡)。</target>
        </trans-unit>
        <trans-unit id="d09a15f73b8ff62631bee99d4aa54ddf939e324b" translate="yes" xml:space="preserve">
          <source>Images add much-needed context and visual flair to Android applications. Picasso allows for hassle-free image loading in your application&amp;mdash;often in one line of code!</source>
          <target state="translated">图像为Android应用程序增加了急需的上下文和视觉效果。 Picasso允许在您的应用程序中轻松加载图像-通常只需一行代码！</target>
        </trans-unit>
        <trans-unit id="da42d083ecc44d6570402e6de6d077da4063c2fd" translate="yes" xml:space="preserve">
          <source>In Android 4.x and lower, Fresco puts images in a special region of Android memory. This lets your application run faster - and suffer the dreaded OutOfMemoryError much less often.</source>
          <target state="translated">在Android 4.x及以下版本中,Fresco将图像放在Android内存的一个特殊区域。这可以让你的应用程序运行得更快----并减少了可怕的OutOfMemoryError。</target>
        </trans-unit>
        <trans-unit id="2d94e63c5f735bee7d2bb0629cadfe19cbe3f2c5" translate="yes" xml:space="preserve">
          <source>It may be helpful to somebody. It downloads images in the background thread. Images are being cached on an SD card and in memory. The cache implementation is very simple and is just enough for the demo. I decode images with inSampleSize to reduce memory consumption. I also try to handle recycled views correctly.</source>
          <target state="translated">可能会对某人有所帮助。它在后台线程中下载图片。图片被缓存在SD卡和内存中。缓存的实现非常简单,对于演示来说刚好够用。我用inSampleSize对图片进行解码,以减少内存消耗。我还尝试着正确处理回收的视图。</target>
        </trans-unit>
        <trans-unit id="4f8ba6094a48651263af977f7572ae1f36bd577a" translate="yes" xml:space="preserve">
          <source>It should be solve your lazy loading problem.</source>
          <target state="translated">应该可以解决你的懒惰装载问题。</target>
        </trans-unit>
        <trans-unit id="2469d1d6fff666dc43a5e7eac0358e69547beb22" translate="yes" xml:space="preserve">
          <source>It takes care of everything, You just need to put your desired design code in nested manner in shimmer frame.
Here is a sample code.</source>
          <target state="translated">它可以解决一切问题,你只需要把你所需要的设计代码以嵌套的方式放在闪亮框架中。这里是一个示例代码。</target>
        </trans-unit>
        <trans-unit id="be2db2f978aaa1a80117f7d90f04d99b4627c424" translate="yes" xml:space="preserve">
          <source>It's very fast and accurate, and using this you can find many more features like animation when loading, getting a bitmap (if needed), etc.</source>
          <target state="translated">它的速度非常快,也非常准确,使用这个可以发现更多的功能,比如加载动画的时候,得到一个位图(如果需要的话)等。</target>
        </trans-unit>
        <trans-unit id="fc07f530268fdafb26c914918cb337cb160b37d4" translate="yes" xml:space="preserve">
          <source>Just a quick tip for someone who is in indecision regarding what library to use for lazy-loading images:</source>
          <target state="translated">只是给正在犹豫不决的人一个简单的提示,对于懒人图片用什么库来加载的问题。</target>
        </trans-unit>
        <trans-unit id="f68545ae331940838775e00e849fe77037d8f13c" translate="yes" xml:space="preserve">
          <source>Just one line of code!</source>
          <target state="translated">就一行代码!</target>
        </trans-unit>
        <trans-unit id="27965ad9156aaa26bb531e72922f42d8fd806a1b" translate="yes" xml:space="preserve">
          <source>Lazy loading of images in Listview Tutorial</source>
          <target state="translated">Listview教程中的图片懒惰加载</target>
        </trans-unit>
        <trans-unit id="28071a3672aa1af72105ff43c69e7ce1e89915c5" translate="yes" xml:space="preserve">
          <source>Listening loading process (including downloading progress)</source>
          <target state="translated">监听加载过程(包括下载进度)</target>
        </trans-unit>
        <trans-unit id="1ff62d55dc2eab547ff5391293e0d364a56c4af4" translate="yes" xml:space="preserve">
          <source>Lots of configurable options</source>
          <target state="translated">大量的可配置选项</target>
        </trans-unit>
        <trans-unit id="3c85edc9a6b5c8fad867c0bbc788010fac6de49c" translate="yes" xml:space="preserve">
          <source>Many common pitfalls of image loading on Android are handled automatically by Picasso:</source>
          <target state="translated">在安卓系统中,很多常见的图片加载陷阱都是由毕加索自动处理的。</target>
        </trans-unit>
        <trans-unit id="cac27c95cafa3f2ee44d1c4282f90d68662ad99d" translate="yes" xml:space="preserve">
          <source>Many customization options for every display image call (stub images, caching switch, decoding options, Bitmap processing and displaying, etc.)</source>
          <target state="translated">每个显示图像调用的许多自定义选项(存根图像、缓存切换、解码选项、位图处理和显示等)。</target>
        </trans-unit>
        <trans-unit id="e4734ac755aa4d2731e84e90a510c25c0a6e3555" translate="yes" xml:space="preserve">
          <source>Multithread image loading</source>
          <target state="translated">多线程图像加载</target>
        </trans-unit>
        <trans-unit id="43653e8158d95b8ddede5029dfef7bbd8f666888" translate="yes" xml:space="preserve">
          <source>Multithread image loading (async or sync)</source>
          <target state="translated">多线程图像加载(异步或同步)</target>
        </trans-unit>
        <trans-unit id="45f890bc588efc786eb82bac4ae8f89c8ae39e2a" translate="yes" xml:space="preserve">
          <source>My code:</source>
          <target state="translated">我的代码。</target>
        </trans-unit>
        <trans-unit id="ca050b22c2c831ef63f02aee7a45cbbfd46c1337" translate="yes" xml:space="preserve">
          <source>Novoda also has a great &lt;a href=&quot;http://androidimageloader.com/&quot;&gt;lazy image loading library&lt;/a&gt; and many apps like Songkick, Podio, SecretDJ and ImageSearch use their library.</source>
          <target state="translated">Novoda还具有出色的&lt;a href=&quot;http://androidimageloader.com/&quot;&gt;惰性图像加载库，&lt;/a&gt;并且Songkick，Podio，SecretDJ和ImageSearch等许多应用程序都使用它们的库。</target>
        </trans-unit>
        <trans-unit id="bdf87b2bb2882af4e2596d8f3c6aa516ee0d3c27" translate="yes" xml:space="preserve">
          <source>Open source, but headed up by &lt;code&gt;Jake Wharton&lt;/code&gt; of &lt;a href=&quot;http://actionbarsherlock.com/&quot;&gt;ActionBarSherlock&lt;/a&gt; fame.</source>
          <target state="translated">开源，但以&lt;a href=&quot;http://actionbarsherlock.com/&quot;&gt;ActionBarSherlock&lt;/a&gt;成名的 &lt;code&gt;Jake Wharton&lt;/code&gt; 为首。</target>
        </trans-unit>
        <trans-unit id="ed631ad9c221b144962add488c07637175f61b93" translate="yes" xml:space="preserve">
          <source>Picasso Jake Wharton's Library</source>
          <target state="translated">毕加索-杰克-沃顿的图书馆</target>
        </trans-unit>
        <trans-unit id="75140ba7190a4867914fd8fb448eee5927e6b7ed" translate="yes" xml:space="preserve">
          <source>Picasso: A simple solution that just works, you can even specify the exact image size you want to bring in. It is very simple to use but might not be very &quot;performant&quot; for apps that has to deal with humongous amounts of images.</source>
          <target state="translated">Picasso:一个简单的解决方案,它的工作原理很简单,你甚至可以指定你想带入的图片大小。它的使用非常简单,但对于需要处理大量图片的应用程序来说,可能不是很 &quot;执行&quot;。</target>
        </trans-unit>
        <trans-unit id="c7984f7f6786e61e7851623c8e7ac6d100e04249" translate="yes" xml:space="preserve">
          <source>Please visit here : &lt;a href=&quot;http://code.tutsplus.com/tutorials/android-sdk-working-with-picasso--cms-22149&quot;&gt;http://code.tutsplus.com/tutorials/android-sdk-working-with-picasso--cms-22149&lt;/a&gt;</source>
          <target state="translated">请访问此处： &lt;a href=&quot;http://code.tutsplus.com/tutorials/android-sdk-working-with-picasso--cms-22149&quot;&gt;http&lt;/a&gt; : //code.tutsplus.com/tutorials/android-sdk-working-with-picasso--cms-22149</target>
        </trans-unit>
        <trans-unit id="a2d0b83d6fc40ae2967445f9ab6a3717fa0957de" translate="yes" xml:space="preserve">
          <source>Possibility of image caching in memory and/or on device's file sysytem (or SD card)</source>
          <target state="translated">在内存和设备的文件系统(或SD卡)中缓存图像的可能性</target>
        </trans-unit>
        <trans-unit id="f3fa7f6efb48e5c8ec810de938dbf693e211bbaf" translate="yes" xml:space="preserve">
          <source>Possibility of wide tuning ImageLoader's configuration (thread executors, downlaoder, decoder, memory and disc cache, display image options, and others)</source>
          <target state="translated">可以对ImageLoader的配置(线程执行器、downlaoder、解码器、内存和光盘缓存、显示图像选项等)进行广泛的调整。</target>
        </trans-unit>
        <trans-unit id="659b171f6e80b852cddd2af83a85077f44923990" translate="yes" xml:space="preserve">
          <source>Possibility to &quot;listen&quot; loading process</source>
          <target state="translated">聆听 &quot;加载过程的可能性</target>
        </trans-unit>
        <trans-unit id="f0e11e4634812a3749cba4c811b27af9d9965909" translate="yes" xml:space="preserve">
          <source>Possibility to customize every display image call with separated options</source>
          <target state="translated">可以用分离的选项自定义每个显示图像调用的可能性</target>
        </trans-unit>
        <trans-unit id="c9f0644cc8efbabcb3290b003f88757932ddef05" translate="yes" xml:space="preserve">
          <source>Pull requests (and bug reports) are welcome, too!</source>
          <target state="translated">我们也欢迎你的请求(和错误报告)!</target>
        </trans-unit>
        <trans-unit id="9f50023c227bb4ef0b8ec5d8c01405528ccb2023" translate="yes" xml:space="preserve">
          <source>Super simple API</source>
          <target state="translated">超简单的API</target>
        </trans-unit>
        <trans-unit id="6b73b86b5cb837a2747a180e1a6baaf0bb90fa99" translate="yes" xml:space="preserve">
          <source>Supports modifying bitmaps in background thread.</source>
          <target state="translated">支持在后台线程中修改位图。</target>
        </trans-unit>
        <trans-unit id="b8f294e11ab2cbacc6d37cba04d404b84a37921c" translate="yes" xml:space="preserve">
          <source>Thanks to James for the code, and Bao-Long for the suggestion of using SoftReference. I implemented the SoftReference changes on James' code. Unfortunately SoftReferences caused my images to be garbage collected too quickly. In my case it was fine without the SoftReference stuff, because my list size is limited and my images are small.</source>
          <target state="translated">感谢James提供的代码,也感谢宝龙提出的使用SoftReference的建议。我在James的代码上实现了SoftReference的修改。不幸的是,SoftReference导致我的图片被垃圾收集的速度太快了。在我的情况下,不使用SoftReference的东西是没有问题的,因为我的列表大小有限,而且我的图片很小。</target>
        </trans-unit>
        <trans-unit id="ef12ea7787c13f63653cc9eb5643ff537ca030eb" translate="yes" xml:space="preserve">
          <source>The total number of images is not fixed.</source>
          <target state="translated">总数并不固定。</target>
        </trans-unit>
        <trans-unit id="d23a7aa4c0b2b7fa49b95eb796e76fc14e3133fa" translate="yes" xml:space="preserve">
          <source>The way I do it is by launching a thread to download the images in the background and hand it a callback for each list item.  When an image is finished downloading it calls the callback which updates the view for the list item.</source>
          <target state="translated">我的方法是通过启动一个线程来下载后台的图片,并为每个列表项传递一个回调。当一个图片下载完成后,它会调用回调来更新列表项的视图。</target>
        </trans-unit>
        <trans-unit id="aef1e496096ef5911198a5e56e1e7152f9e930f7" translate="yes" xml:space="preserve">
          <source>Their library is hosted &lt;a href=&quot;https://github.com/novoda/ImageLoader&quot;&gt;here&lt;/a&gt; on Github and they have a pretty active &lt;a href=&quot;https://github.com/novoda/ImageLoader/issues&quot;&gt;issues tracker&lt;/a&gt; as well. Their project seems to be pretty active too, with over 300+ commits at the time of writing this reply.</source>
          <target state="translated">他们的图书馆在Github上托管，他们也有一个非常活跃的&lt;a href=&quot;https://github.com/novoda/ImageLoader/issues&quot;&gt;问题跟踪器&lt;/a&gt; 。 他们的项目似乎也很活跃，在撰写此回复时有300多个提交。</target>
        </trans-unit>
        <trans-unit id="c34fbabea4b9c03f6da19eabb2c003969c0e8e07" translate="yes" xml:space="preserve">
          <source>There are four basic ways.</source>
          <target state="translated">有四种基本方式。</target>
        </trans-unit>
        <trans-unit id="31367a420c32dbf578d41425a2131141ca6a7657" translate="yes" xml:space="preserve">
          <source>There's a discussion from a year ago regarding the SoftReferences on google groups: &lt;a href=&quot;http://groups.google.com/group/android-developers/browse_thread/thread/ebabb0dadf38acc1&quot;&gt;link to thread&lt;/a&gt;. As a solution to the too-early garbage collection, they suggest the possibility of manually setting the VM heap size using dalvik.system.VMRuntime.setMinimumHeapSize(), which is not very attractive to me.</source>
          <target state="translated">一年前，有一个关于Google组上的SoftReferences的讨论： &lt;a href=&quot;http://groups.google.com/group/android-developers/browse_thread/thread/ebabb0dadf38acc1&quot;&gt;链接到thread&lt;/a&gt; 。 作为过早的垃圾回收的一种解决方案，他们建议使用dalvik.system.VMRuntime.setMinimumHeapSize（）手动设置VM堆大小的可能性，这对我来说不是很有吸引力。</target>
        </trans-unit>
        <trans-unit id="aa7ace2990661b473f9d4f01bf329f37791f444d" translate="yes" xml:space="preserve">
          <source>This is a common problem on Android that has been solved in many ways by many people.  In my opinion the best solution I've seen is the relatively new library called &lt;a href=&quot;http://square.github.io/picasso/&quot;&gt;Picasso&lt;/a&gt;.  Here are the highlights:</source>
          <target state="translated">这是Android上的常见问题，许多人已通过多种方式解决了这个问题。 我认为，最好的解决方案是相对较新的名为&lt;a href=&quot;http://square.github.io/picasso/&quot;&gt;Picasso的&lt;/a&gt;库。 以下是重点内容：</target>
        </trans-unit>
        <trans-unit id="3625e86dd0c0b6309ace4fa64e75deaa1f90958d" translate="yes" xml:space="preserve">
          <source>This is from the Android Developers Blog. The suggested code uses:</source>
          <target state="translated">这是来自于Android开发者博客。建议的代码使用。</target>
        </trans-unit>
        <trans-unit id="27b2b9b08e65b861c7aff1eadb1e48d6af33faaa" translate="yes" xml:space="preserve">
          <source>This is my code:</source>
          <target state="translated">这是我的代码。</target>
        </trans-unit>
        <trans-unit id="c47508b26e2eccb0f83fe5b653f4cc6cc488353b" translate="yes" xml:space="preserve">
          <source>This method doesn't work very well when you're recycling views however.</source>
          <target state="translated">然而,当你在回收意见时,这种方法并不是很好用。</target>
        </trans-unit>
        <trans-unit id="862f12a0a024dc44918532f93128441ab19c26b9" translate="yes" xml:space="preserve">
          <source>To open the InputStream I used java.net.URLConnection which allows me to use web cache (you need to set a response cache first, but that's another story)</source>
          <target state="translated">为了打开InputStream,我使用了java.net.URLConnection,它允许我使用Web缓存(你需要先设置一个响应缓存,但这是另一回事</target>
        </trans-unit>
        <trans-unit id="15e99613190c7d08a45a8eef119677ee9ef6f510" translate="yes" xml:space="preserve">
          <source>UIL: The best way to lazy load images. You can cache images(you need permission of course), initialize the loader once, then have your work done. The most mature asynchronous image loading library I have ever seen so far.</source>
          <target state="translated">UIL:懒惰加载图片的最佳方法。你可以缓存图片(当然你需要权限),初始化加载器一次,然后就可以完成你的工作。这是我迄今为止见过的最成熟的异步加载图片库。</target>
        </trans-unit>
        <trans-unit id="b6b38e32de40ab8570bd7700f054f5fb707811c4" translate="yes" xml:space="preserve">
          <source>Universal Image Loader</source>
          <target state="translated">通用图像加载器</target>
        </trans-unit>
        <trans-unit id="d278862f0e36527b18e42a3858e2d2b451d8d018" translate="yes" xml:space="preserve">
          <source>Use Jake Wharton's  Picasso Library. 
(A Perfect ImageLoading Library form the developer of ActionBarSherlock)</source>
          <target state="translated">使用Jake Wharton的Picasso库。(Aperfect ImageLoading Library,由ActionBarSherlock的开发者提供)</target>
        </trans-unit>
        <trans-unit id="c38241d6f91f0aa0dcc95d49d68e0be2f0d3bc3e" translate="yes" xml:space="preserve">
          <source>Use the glide library. It worked for me and will work for your code too.It works for both images as well as gifs too.</source>
          <target state="translated">使用glide库。它对我有效,也会对你的代码有效,它对图片和GIFs都有效。</target>
        </trans-unit>
        <trans-unit id="342076b56a8d6c03f9476459ece0fc654d31673e" translate="yes" xml:space="preserve">
          <source>Uses a disk &amp;amp; in-memory &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_algorithms#Examples&quot;&gt;Least Recently Used&lt;/a&gt; (LRU) cache.</source>
          <target state="translated">使用磁盘和内存中的&lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_algorithms#Examples&quot;&gt;最近&lt;/a&gt;最少使用 （LRU）缓存。</target>
        </trans-unit>
        <trans-unit id="2ea7908a92bd25a38f49d461fc007fb5b2c25e0f" translate="yes" xml:space="preserve">
          <source>Using SoftReference is great, but it makes the cached image to be deleted too often, so I added a Linked list that holds images references, preventing from the image to be deleted, until it reached a predefined size</source>
          <target state="translated">使用SoftReference是很好的,但它使缓存的图片被删除的频率太高,所以我添加了一个链接列表,保存图片的引用,防止图片被删除,直到它达到预定义的大小</target>
        </trans-unit>
        <trans-unit id="f9577d69e08610a1f9ab45138fdb0d5c80c5d670" translate="yes" xml:space="preserve">
          <source>Volley's Lazy Loading library =&amp;gt; From guys at android. It is nice and everything but is poorly documented and hence is a problem to use.</source>
          <target state="translated">Volley的惰性加载库=&amp;gt;来自android的家伙。 很好，一切都很好，但是文档记录很差，因此使用起来很麻烦。</target>
        </trans-unit>
        <trans-unit id="c21fdd2cfd8c226eb95278f9396c70a2a9252bfc" translate="yes" xml:space="preserve">
          <source>Well, image loading time from the Internet has many solutions. You may also use the library &lt;a href=&quot;https://code.google.com/p/android-query/wiki/ImageLoading&quot;&gt;Android-Query&lt;/a&gt;. It will give you all the required activity. Make sure what you want to do and read the library wiki page. And solve the image loading restriction.</source>
          <target state="translated">嗯，从Internet加载图像的时间有很多解决方案。 您也可以使用库&lt;a href=&quot;https://code.google.com/p/android-query/wiki/ImageLoading&quot;&gt;Android-Query&lt;/a&gt; 。 它将为您提供所有必需的活动。 确保您要做什么并阅读图书馆Wiki页面。 并解决了图像加载的限制。</target>
        </trans-unit>
        <trans-unit id="501593cf64d51eb41f5ede3cee10f57947a9867e" translate="yes" xml:space="preserve">
          <source>When you need to put something like &quot;Loading image...&quot;</source>
          <target state="translated">当你需要把类似 &quot;加载图片...&quot;</target>
        </trans-unit>
        <trans-unit id="340c1f999abbbba494ca3922ca5a7c5bcc6ef112" translate="yes" xml:space="preserve">
          <source>When you need to show the downloaded image.</source>
          <target state="translated">当你需要显示下载的图片时。</target>
        </trans-unit>
        <trans-unit id="bf9e8b329d76e7150d73c5a5811e6c73235bb87c" translate="yes" xml:space="preserve">
          <source>Wide customization of ImageLoader's configuration (thread executors, downloader, decoder, memory and disk cache, display image options, etc.)</source>
          <target state="translated">ImageLoader配置的广泛定制(线程执行器、下载器、解码器、内存和磁盘缓存、显示图像选项等)。</target>
        </trans-unit>
        <trans-unit id="1683173da1e3182e4ebcd07b9364191d4a0120c9" translate="yes" xml:space="preserve">
          <source>Widget support</source>
          <target state="translated">小工具支持</target>
        </trans-unit>
        <trans-unit id="aa0d8a43a429fecece3d9b492ad7b12db22d943f" translate="yes" xml:space="preserve">
          <source>You can download that &lt;a href=&quot;http://en.wikipedia.org/wiki/JAR_%28file_format%29&quot;&gt;JAR&lt;/a&gt; file from &lt;a href=&quot;http://code.google.com/p/android-query/downloads/list&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">您可以从&lt;a href=&quot;http://code.google.com/p/android-query/downloads/list&quot;&gt;此处&lt;/a&gt;下载该&lt;a href=&quot;http://en.wikipedia.org/wiki/JAR_%28file_format%29&quot;&gt;JAR&lt;/a&gt;文件</target>
        </trans-unit>
        <trans-unit id="a2150109b3b22d358ba8fdd09cd1148382d0a5a5" translate="yes" xml:space="preserve">
          <source>You must try this Universal Loader is best.
I am using this after done many RnD on lazy loading .</source>
          <target state="translated">你一定要试试这个通用加载器是最好的。我正在使用这个在做了很多RnD后,懒惰的加载。</target>
        </trans-unit>
        <trans-unit id="855b8be24fa05da6e074b6059a488f75185b60c3" translate="yes" xml:space="preserve">
          <source>create only one instance of ImageLoader and reuse it all around your
  application. This way image caching will be much more efficient.</source>
          <target state="translated">只创建一个ImageLoader的实例,然后在你的应用程序中重用它。这样一来,图像缓存的效率会更高。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
