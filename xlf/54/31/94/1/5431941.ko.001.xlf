<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/5431941">
    <body>
      <group id="5431941">
        <trans-unit id="6e1b2cc5e3930b8b330394fc60c0c44a838abc25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;feof()&lt;/code&gt; indicates if one has tried to read past the end of file. That means it has little predictive effect: if it is true, you are sure that the next input operation will fail (you aren't sure the previous one failed BTW), but if it is false, you aren't sure the next input operation will succeed.  More over, input operations may fail for other reasons than the end of file (a format error for formatted input, a pure IO failure -- disk failure, network timeout -- for all input kinds), so even if you could be predictive about the end of file (and anybody who has tried to implement Ada one, which is predictive, will tell you it can complex if you need to skip spaces, and that it has undesirable effects on interactive devices -- sometimes forcing the input of the next line before starting the handling of the previous one), you would have to be able to handle a failure.</source>
          <target state="translated">&lt;code&gt;feof()&lt;/code&gt; 는 파일 끝을 지나서 읽으려고했는지 여부를 나타냅니다. 즉, 예측 효과가 거의 없음을 의미합니다. 사실 경우 다음 입력 작업이 실패 할 것이라고 확신하지만 (이전 작업이 BTW에 실패했는지 확실하지 않은 경우) 거짓 인 경우 다음 입력이 확실하지 않습니다 작업이 성공합니다. 또한 파일 끝 이외의 다른 이유로 입력 작업이 실패 할 수 있습니다 (형식화 된 입력의 경우 형식 오류, 순수한 IO 오류 (디스크 오류, 네트워크 시간 초과-모든 입력 종류의 경우)). 파일의 끝 (그리고 예측 가능한 Ada one을 구현하려고 시도한 사람은 공백을 건너 뛸 필요가 있으면 복잡 할 수 있으며 대화 형 장치에 바람직하지 않은 영향을 미치며 때로는 다음 입력을 강요한다고 말합니다. 이전의 처리를 시작하기 전에 줄) 실패를 처리 할 수 ​​있어야합니다.</target>
        </trans-unit>
        <trans-unit id="afa06bf319127e946cf4e91c64db135f72173ee7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while(!feof)&lt;/code&gt; is wrong because it tests for something that is irrelevant and fails to test for something that you need to know. The result is that you are erroneously executing code that assumes that it is accessing data that was read successfully, when in fact this never happened.</source>
          <target state="translated">&lt;code&gt;while(!feof)&lt;/code&gt; 는 관련이 없으며 알아야 할 사항을 테스트하지 못하기 때문에 잘못되었습니다. 결과적으로 실제로 이런 일이 발생하지 않은 경우 성공적으로 읽은 데이터에 액세스한다고 가정하는 코드를 잘못 실행하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="9eb326b40426039e3d1d065ee164e2d844fa627d" translate="yes" xml:space="preserve">
          <source>A final example that actually queries the EOF state: Suppose you have a string and want to test that it represents an integer in its entirety, with no extra bits at the end except whitespace. Using C++ iostreams, it goes like this:</source>
          <target state="translated">실제로 EOF 상태를 쿼리하는 마지막 예는 다음과 같습니다. 문자열이 있고 공백을 제외한 끝에 추가 비트가없는 전체 정수를 나타내는 지 테스트한다고 가정합니다. C ++ iostream을 사용하면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8dc77d583dd50f5726373188a86ce687c8478084" translate="yes" xml:space="preserve">
          <source>C stdio, &lt;code&gt;scanf&lt;/code&gt;:</source>
          <target state="translated">C stdio, &lt;code&gt;scanf&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1fec40ea496c0be88b250ec229e62a91f3723582" translate="yes" xml:space="preserve">
          <source>C stdio, read from a file:</source>
          <target state="translated">C stdio, 파일에서 읽음 :</target>
        </trans-unit>
        <trans-unit id="d42eafbaea2b0c2a8705dac6e80e5982ec2c04e3" translate="yes" xml:space="preserve">
          <source>C++, iostreams formatted extraction:</source>
          <target state="translated">C ++, iostream 형식의 추출 :</target>
        </trans-unit>
        <trans-unit id="9819de783fd655b396980f4cc286ff286bfccab4" translate="yes" xml:space="preserve">
          <source>C++, iostreams getline:</source>
          <target state="translated">C ++, iostreams getline :</target>
        </trans-unit>
        <trans-unit id="c50b4aa773448ba7d6756b6d57c20bebb5810fea" translate="yes" xml:space="preserve">
          <source>Concurrency and simultaneity</source>
          <target state="translated">동시성과 동시성</target>
        </trans-unit>
        <trans-unit id="4adddd0410090df891e6fa4925fe03ba5adb5c9d" translate="yes" xml:space="preserve">
          <source>Consider the following code:</source>
          <target state="translated">다음 코드를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="cda4aab5bcbd0ed38717196ad5a3684cd59490a3" translate="yes" xml:space="preserve">
          <source>EOF</source>
          <target state="translated">EOF</target>
        </trans-unit>
        <trans-unit id="73dc949a54f03d991a93620bb37f1f1fb97fcbe8" translate="yes" xml:space="preserve">
          <source>Even worse, consider the case where a read error occurs.  In that case, &lt;code&gt;fgetc()&lt;/code&gt; returns &lt;code&gt;EOF&lt;/code&gt;, &lt;code&gt;feof()&lt;/code&gt; returns false, and the loop never terminates.  In all cases where &lt;code&gt;while(!feof(p))&lt;/code&gt; is used, there must be at least a check inside the loop for &lt;code&gt;ferror()&lt;/code&gt;, or at the very least the while condition should be replaced with &lt;code&gt;while(!feof(p) &amp;amp;&amp;amp; !ferror(p))&lt;/code&gt; or there is a very real possibility of an infinite loop, probably spewing all sorts of garbage as invalid data is being processed.</source>
          <target state="translated">더 나쁜 것은 읽기 오류가 발생하는 경우를 고려하십시오. 이 경우 &lt;code&gt;fgetc()&lt;/code&gt; 는 &lt;code&gt;EOF&lt;/code&gt; 를 반환하고 &lt;code&gt;feof()&lt;/code&gt; 는 false를 반환하며 루프는 종료되지 않습니다. &lt;code&gt;while(!feof(p))&lt;/code&gt; 가 사용되는 모든 경우에 &lt;code&gt;ferror()&lt;/code&gt; 의 루프 내부에 최소한 점검이 있거나 최소한 while 조건은 &lt;code&gt;while(!feof(p) &amp;amp;&amp;amp; !ferror(p))&lt;/code&gt; 또는 무한 루프의 가능성이 매우 높으며, 유효하지 않은 데이터가 처리 될 때 모든 종류의 가비지를 뿜어 낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="d5fb570011dd7778bf532c618109acc3eba49ca7" translate="yes" xml:space="preserve">
          <source>I'd like to provide an abstract, high-level perspective.</source>
          <target state="translated">추상적이고 높은 수준의 관점을 제공하고 싶습니다.</target>
        </trans-unit>
        <trans-unit id="48a4e8d542c3e9555786d500773be3d2bcbb6f32" translate="yes" xml:space="preserve">
          <source>I've seen people trying to read files like this in a lot of posts lately:</source>
          <target state="translated">요즘 많은 게시물에서 이와 같은 파일을 읽으려는 사람들을 보았습니다.</target>
        </trans-unit>
        <trans-unit id="391b94302281cf331dee93fdab146e79d7a9d7f6" translate="yes" xml:space="preserve">
          <source>I/O operations interact with the environment. The environment is not part of your program, and not under your control. The environment truly exists &quot;concurrently&quot; with your program. As with all things concurrent, questions about the &quot;current state&quot; don't make sense: There is no concept of &quot;simultaneity&quot; across concurrent events. Many properties of state simply don't &lt;em&gt;exist&lt;/em&gt; concurrently.</source>
          <target state="translated">I / O 작업은 환경과 상호 작용합니다. 환경은 프로그램의 일부가 아니며 사용자가 통제 할 수 없습니다. 환경은 프로그램과 &quot;동시에&quot;존재합니다. 모든 것이 동시에 그렇듯이 &quot;현재 상태&quot;에 대한 질문은 의미가 없습니다. 동시 이벤트에 대한 &quot;동시&quot;개념은 없습니다. 상태의 많은 속성은 단순히 동시에 &lt;em&gt;존재&lt;/em&gt; 하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6cfad93b891ef97aae642f181beb8c35018a07f9" translate="yes" xml:space="preserve">
          <source>In each of the examples, note carefully that we &lt;em&gt;first&lt;/em&gt; attempt the I/O operation and &lt;em&gt;then&lt;/em&gt; consume the result if it is valid. Note further that we &lt;em&gt;always&lt;/em&gt; must use the result of the I/O operation, though the result takes different shapes and forms in each example.</source>
          <target state="translated">각 예제에서 &lt;em&gt;먼저&lt;/em&gt; I / O 작업을 시도한 &lt;em&gt;다음&lt;/em&gt; 유효한 경우 결과 &lt;em&gt;를&lt;/em&gt; 사용합니다. 또한 각 예제에서 결과의 모양과 형태가 다르지만 &lt;em&gt;항상&lt;/em&gt; I / O 작업의 결과를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="9f489c41d38ccf842f692e0db445abd3e48eee2b" translate="yes" xml:space="preserve">
          <source>In the C standard library you can achieve something similar with the &lt;code&gt;strto*l&lt;/code&gt; functions by checking that the end pointer has reached the end of the input string.</source>
          <target state="translated">C 표준 라이브러리에서는 끝 포인터가 입력 문자열의 끝에 도달했는지 확인하여 &lt;code&gt;strto*l&lt;/code&gt; 함수와 비슷한 것을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="94f320dacdbdb7b3f3c407e0a74b13947ccdf877" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;feof()&lt;/code&gt; is called before any data has been read, so it returns false.  The loop is entered, &lt;code&gt;fgetc()&lt;/code&gt; is called (and returns &lt;code&gt;EOF&lt;/code&gt;), and count is incremented.  Then &lt;code&gt;feof()&lt;/code&gt; is called and returns true, causing the loop to abort.</source>
          <target state="translated">이 경우 데이터를 읽기 전에 &lt;code&gt;feof()&lt;/code&gt; 가 호출되므로 false를 반환합니다. 루프가 입력되고 &lt;code&gt;fgetc()&lt;/code&gt; 가 호출되고 &lt;code&gt;EOF&lt;/code&gt; 를 반환하며 카운트가 증가합니다. 그런 다음 &lt;code&gt;feof()&lt;/code&gt; 가 호출되고 true를 반환하여 루프가 중단됩니다.</target>
        </trans-unit>
        <trans-unit id="df7cb0a6afe126d638917eed2a4e224c4b44dc9f" translate="yes" xml:space="preserve">
          <source>It is always necessary to check the return value of a read (either an &lt;code&gt;fread()&lt;/code&gt;, or an &lt;code&gt;fscanf()&lt;/code&gt;, or an &lt;code&gt;fgetc()&lt;/code&gt;) before calling &lt;code&gt;feof()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;feof()&lt;/code&gt; 를 호출하기 전에 항상 읽기 ( &lt;code&gt;fread()&lt;/code&gt; 또는 &lt;code&gt;fscanf()&lt;/code&gt; 또는 &lt;code&gt;fgetc()&lt;/code&gt; )의 반환 값을 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="222d991e983b86924c85aebf64b8055dafefd796" translate="yes" xml:space="preserve">
          <source>It's wrong because (in the absence of a read error) it enters the loop one more time than the author expects.  If there is a read error, the loop never terminates.</source>
          <target state="translated">읽기 오류가 없으면 작성자가 예상 한 것보다 한 번 더 루프에 들어가기 때문에 잘못되었습니다. 읽기 오류가 있으면 루프가 종료되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="72403131093f16a828236fe0866b652fccd6f5ee" translate="yes" xml:space="preserve">
          <source>Let me make this more precise: Suppose you want to ask, &quot;do you have more data&quot;. You could ask this of a concurrent container, or of your I/O system. But the answer is generally unactionable, and thus meaningless. So what if the container says &quot;yes&quot; &amp;ndash; by the time you try reading, it may no longer have data. Similarly, if the answer is &quot;no&quot;, by the time you try reading, data may have arrived. The conclusion is that there simply &lt;em&gt;is&lt;/em&gt; no property like &quot;I have data&quot;, since you cannot act meaningfully in response to any possible answer. (The situation is slightly better with buffered input, where you might conceivably get a &quot;yes, I have data&quot; that constitutes some kind of guarantee, but you would still have to be able to deal with the opposite case. And with output the situation is certainly just as bad as I described: you never know if that disk or that network buffer is full.)</source>
          <target state="translated">좀 더 정확하게 말씀 드리겠습니다. &quot;더 많은 데이터가 있습니까?&quot; 이를 동시 컨테이너 또는 I / O 시스템에 요청할 수 있습니다. 그러나 그 대답은 일반적으로 행동 할 수 없으므로 의미가 없습니다. 따라서 컨테이너에 &quot;예&quot;라고 표시된 경우 &amp;ndash; 읽을 때까지 더 이상 데이터가 없을 수 있습니다. 마찬가지로, 대답이 &quot;아니오&quot;인 경우, 읽을 때까지 데이터가 도착했을 수 있습니다. 결론은 &quot;나는 데이터가있다&quot;와 같은 속성 &lt;em&gt;이&lt;/em&gt; 없다는 것입니다. 왜냐하면 당신은 가능한 대답에 응답하여 의미있게 행동 할 수 없기 때문입니다. (버퍼 입력을 사용하면 상황이 약간 더 나아질 수 있습니다. 여기에서는 일종의 보증을 구성하는 &quot;예, 데이터가 있습니다&quot;를 얻을 수 있지만 여전히 반대의 경우를 처리 할 수 ​​있어야합니다. 디스크 또는 네트워크 버퍼가 꽉 찼는 지 알 수 없습니다.)</target>
        </trans-unit>
        <trans-unit id="9a0fe292e7d9800c123efbe9d32e1657a9705bbd" translate="yes" xml:space="preserve">
          <source>No it's not always wrong. If your loop condition is &quot;while we haven't tried to read past end of file&quot; then you use &lt;code&gt;while (!feof(f))&lt;/code&gt;. This is however not a common loop condition - usually you want to test for something else (such as &quot;can I read more&quot;). &lt;code&gt;while (!feof(f))&lt;/code&gt; isn't wrong, it's just &lt;em&gt;used&lt;/em&gt; wrong.</source>
          <target state="translated">아니요 항상 틀린 것은 아닙니다. 루프 조건이 &quot;파일의 과거 끝을 읽으려고 시도하지 않은 동안&quot;인 경우 &lt;code&gt;while (!feof(f))&lt;/code&gt; . 그러나 이것은 일반적인 루프 조건이 아닙니다. 일반적으로 다른 것을 테스트하려고합니다 (예 : &quot;더 많은 것을 읽을 수 있습니까&quot;). &lt;code&gt;while (!feof(f))&lt;/code&gt; 는 틀리지 않지만 방금 잘못 &lt;em&gt;사용되었습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="ddcbc1fbbf593776812d44f0c505dd66950884f6" translate="yes" xml:space="preserve">
          <source>Note that the function explicitly returns &lt;code&gt;-1&lt;/code&gt; (and not EOF!) when an error occurs or it reaches EOF.</source>
          <target state="translated">오류가 발생하거나 EOF에 도달하면 함수는 명시 적으로 &lt;code&gt;-1&lt;/code&gt; (EOF가 아님)을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c138187ee78a95264184501dc023ae49eaee3b8e" translate="yes" xml:space="preserve">
          <source>Now we get to EOF. EOF is the &lt;em&gt;response&lt;/em&gt; you get from an &lt;em&gt;attempted&lt;/em&gt; I/O operation. It means that you were trying to read or write something, but when doing so you failed to read or write any data, and instead the end of the input or output was encountered. This is true for essentially all the I/O APIs, whether it be the C standard library, C++ iostreams, or other libraries. As long as the I/O operations succeed, you simply &lt;em&gt;cannot know&lt;/em&gt; whether further, future operations will succeed. You &lt;em&gt;must&lt;/em&gt; always first try the operation and then respond to success or failure.</source>
          <target state="translated">이제 우리는 EOF에 도착합니다. EOF는 &lt;em&gt;시도한&lt;/em&gt; I / O 작업에서 얻은 &lt;em&gt;응답&lt;/em&gt; 입니다. 그것은 무언가를 읽거나 쓰려고했지만 그렇게 할 때 데이터를 읽거나 쓰지 않고 대신 입력 또는 출력의 끝이 발생했음을 의미합니다. 이는 C 표준 라이브러리, C ++ iostream 또는 기타 라이브러리에 관계없이 본질적으로 모든 I / O API에 해당됩니다. I / O 작업이 성공하면 향후 추가 작업이 성공할지 여부를 &lt;em&gt;알 수 없습니다&lt;/em&gt; . 항상 먼저 작업을 시도한 다음 성공 또는 실패에 응답 &lt;em&gt;해야합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="e6f37fa35c54fd8bca21c8861aadeeabddb790fb" translate="yes" xml:space="preserve">
          <source>POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/getline.html&quot;&gt;&lt;code&gt;getline()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/getline.html&quot;&gt; &lt;code&gt;getline()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3c29f18cc80a5ab4397ce9ee67110730141c85b5" translate="yes" xml:space="preserve">
          <source>POSIX, &lt;code&gt;write(2)&lt;/code&gt; to flush a buffer:</source>
          <target state="translated">POSIX, &lt;code&gt;write(2)&lt;/code&gt; 는 버퍼를 플러시합니다 :</target>
        </trans-unit>
        <trans-unit id="158b03cf3f0ee84ce61146b4f5131a4764b5329d" translate="yes" xml:space="preserve">
          <source>So the correct idiom in C is to loop with the IO operation success as loop condition, and then test the cause of the failure.  For instance:</source>
          <target state="translated">따라서 C의 올바른 관용구는 IO 작업 성공을 루프 조건으로 반복 한 다음 실패 원인을 테스트하는 것입니다. 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="817fc48d7d94d06d30c126604b404be0c742323a" translate="yes" xml:space="preserve">
          <source>So we conclude that it is impossible, and in fact un&lt;em&gt;reasonable&lt;/em&gt;, to ask an I/O system whether it &lt;em&gt;will be&lt;/em&gt; able to perform an I/O operation. The only possible way we can interact with it (just as with a concurrent container) is to &lt;em&gt;attempt&lt;/em&gt; the operation and check whether it succeeded or failed. At that moment where you interact with the environment, then and only then can you know whether the interaction was actually possible, and at that point you must commit to performing the interaction. (This is a &quot;synchronisation point&quot;, if you will.)</source>
          <target state="translated">따라서 I / O 시스템이 I / O 작업을 수행 할 수 있는지 여부를 묻는 것은 불가능하며 실제로는 &lt;em&gt;합리적&lt;/em&gt; 이지 않다는 결론을 내립니다. 동시 컨테이너와 마찬가지로 상호 작용할 수있는 유일한 방법은 작업을 &lt;em&gt;시도&lt;/em&gt; 하고 성공 또는 실패 여부를 확인하는 것입니다. 환경과 상호 작용하는 순간에는 상호 작용이 실제로 가능한지 여부 만 알 수 있으며 그 시점에서 상호 작용을 수행해야합니다. (이것은 &quot;동기화 지점&quot;입니다.)</target>
        </trans-unit>
        <trans-unit id="846041b1f2857074a016d9e21966bce492dc7a74" translate="yes" xml:space="preserve">
          <source>So, in summary, although I cannot state with certainty that there is never a situation in which it may be semantically correct to write &quot;&lt;code&gt;while(!feof(f))&lt;/code&gt;&quot; (although there &lt;strong&gt;must&lt;/strong&gt; be another check inside the loop with a break to avoid a infinite loop on a read error), it is the case that it is almost certainly always wrong.  And even if a case ever arose where it would be correct, it is so idiomatically wrong that it would not be the right way to write the code.  Anyone seeing that code should immediately hesitate and say, &quot;that's a bug&quot;.  And possibly slap the author (unless the author is your boss in which case discretion is advised.)</source>
          <target state="translated">따라서 요약하면, &quot; &lt;code&gt;while(!feof(f))&lt;/code&gt; &quot;를 작성하는 것이 의미 적으로 정확할 수있는 상황은 없다고 확신 할 수는 없지만 ( 루프 안에는 다른 점검이 &lt;strong&gt;있어야&lt;/strong&gt; 하지만 읽기 오류에서 무한 루프를 피하십시오)) 거의 항상 잘못된 경우입니다. 그리고 올바른 경우가 발생하더라도 관용적으로 잘못되어 코드를 작성하는 올바른 방법이 아닐 수 있습니다. 이 코드를 보는 사람은 즉시 주저하고 &quot;버그입니다&quot;라고 말합니다. 저자가 당신의 상사 인 경우를 제외하고 저자를 때릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7011b1a621a67e63735eb77a3fab573aef5632e9" translate="yes" xml:space="preserve">
          <source>The answer</source>
          <target state="translated">대답</target>
        </trans-unit>
        <trans-unit id="6c637ec0e42c35161dade1e8e1b6a8760f84d564" translate="yes" xml:space="preserve">
          <source>The result we must use is &lt;code&gt;n&lt;/code&gt;, the number of elements that were read (which may be as little as zero).</source>
          <target state="translated">우리가 사용해야하는 결과는 읽은 요소의 개수 인 &lt;code&gt;n&lt;/code&gt; 입니다 (제로만큼 작을 수 있음).</target>
        </trans-unit>
        <trans-unit id="dd8b9000013378645669f0c9713d6ab04b2f81d8" translate="yes" xml:space="preserve">
          <source>The result we must use is &lt;code&gt;nbytes&lt;/code&gt;, the number of bytes up to and including the newline (or EOF if the file did not end with a newline).</source>
          <target state="translated">우리가 사용해야하는 결과는 &lt;code&gt;nbytes&lt;/code&gt; , 개행까지의 바이트 수 (파일이 개행으로 끝나지 않은 경우 EOF)입니다.</target>
        </trans-unit>
        <trans-unit id="a2be6c557782f15a6fe8146ffef5463a0c52393e" translate="yes" xml:space="preserve">
          <source>The result we must use is &lt;code&gt;std::cin&lt;/code&gt; itself, which can be evaluated in a boolean context and tells us whether the stream is still in the &lt;code&gt;good()&lt;/code&gt; state.</source>
          <target state="translated">우리가 사용해야하는 결과는 &lt;code&gt;std::cin&lt;/code&gt; 자체이며 부울 컨텍스트에서 평가 될 수 있으며 스트림이 여전히 &lt;code&gt;good()&lt;/code&gt; 상태인지 여부를 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="94f4bf47648a9a9a15729400e2bbd4e7a33fd3d8" translate="yes" xml:space="preserve">
          <source>The result we must use is again &lt;code&gt;std::cin&lt;/code&gt;, just as before.</source>
          <target state="translated">우리가 사용해야하는 결과는 이전과 마찬가지로 다시 &lt;code&gt;std::cin&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e176f9e6233fcb3bd9259568ee600f922fc9b066" translate="yes" xml:space="preserve">
          <source>The result we must use is the return value of &lt;code&gt;scanf&lt;/code&gt;, the number of elements converted.</source>
          <target state="translated">사용해야하는 결과는 변환 된 요소 수인 &lt;code&gt;scanf&lt;/code&gt; 의 반환 값입니다.</target>
        </trans-unit>
        <trans-unit id="303da19e8cd21a2b3892dcd8aaca7a9c24e2434b" translate="yes" xml:space="preserve">
          <source>The result we use here is &lt;code&gt;k&lt;/code&gt;, the number of bytes written. The point here is that we can only know how many bytes were written &lt;em&gt;after&lt;/em&gt; the write operation.</source>
          <target state="translated">여기서 사용하는 결과는 쓴 바이트 수인 &lt;code&gt;k&lt;/code&gt; 입니다. 여기서 요점은 쓰기 작업 &lt;em&gt;후에&lt;/em&gt; 쓴 바이트 수만 알 수 있다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="b372e2f1e30a0546ffa61e565b193a1cfb9392b9" translate="yes" xml:space="preserve">
          <source>This happens in all such cases.  &lt;code&gt;feof()&lt;/code&gt; does not return true until &lt;strong&gt;after&lt;/strong&gt; a read on the stream encounters the end of file.  The purpose of &lt;code&gt;feof()&lt;/code&gt; is NOT to check if the next read will reach the end of file.  The purpose of &lt;code&gt;feof()&lt;/code&gt; is to distinguish between a read error and having reached the end of the file.  If &lt;code&gt;fread()&lt;/code&gt; returns 0, you must use &lt;code&gt;feof&lt;/code&gt;/&lt;code&gt;ferror&lt;/code&gt; to decide whether an error was encountered or if all of the data was consumed.  Similarly if &lt;code&gt;fgetc&lt;/code&gt; returns &lt;code&gt;EOF&lt;/code&gt;.  &lt;code&gt;feof()&lt;/code&gt; is only useful &lt;strong&gt;after&lt;/strong&gt; fread has returned zero or &lt;code&gt;fgetc&lt;/code&gt; has returned &lt;code&gt;EOF&lt;/code&gt;.  Before that happens, &lt;code&gt;feof()&lt;/code&gt; will always return 0.</source>
          <target state="translated">이것은 모든 경우에 발생합니다. &lt;code&gt;feof()&lt;/code&gt; 는 스트림에서 읽은 파일 끝에 도달 할 때까지 true를 리턴하지 않습니다. &lt;code&gt;feof()&lt;/code&gt; 의 목적은 다음 읽기가 파일의 끝에 도달하는지 확인하는 것이 아닙니다. &lt;code&gt;feof()&lt;/code&gt; 의 목적은 읽기 오류와 파일 끝에 도달 한 것을 구별하는 것입니다. &lt;code&gt;fread()&lt;/code&gt; 가 0을 반환하면 &lt;code&gt;feof&lt;/code&gt; / &lt;code&gt;ferror&lt;/code&gt; 를 사용하여 오류가 발생했는지 또는 모든 데이터가 소비되었는지를 결정해야합니다. &lt;code&gt;fgetc&lt;/code&gt; 가 &lt;code&gt;EOF&lt;/code&gt; 를 반환하는 경우와 유사합니다. &lt;code&gt;feof()&lt;/code&gt; 는 fread가 0을 반환하거나 &lt;code&gt;fgetc&lt;/code&gt; 가 EOF를 반환 &lt;strong&gt;한 후에&lt;/strong&gt; 만 유용합니다. 그렇게하기 전에 &lt;code&gt;feof()&lt;/code&gt; 는 항상 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1f110543f655f47775382a08be85a099094240cb" translate="yes" xml:space="preserve">
          <source>This program will consistently print one greater than the number of characters in the input stream (assuming no read errors).  Consider the case where the input stream is empty:</source>
          <target state="translated">이 프로그램은 입력 스트림의 문자 수보다 1을 크게 인쇄합니다 (읽기 오류가 없다고 가정). 입력 스트림이 비어있는 경우를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="b0925f526af3483a02c05fdbde7c36f4875c2e14" translate="yes" xml:space="preserve">
          <source>We use two results here. The first is &lt;code&gt;iss&lt;/code&gt;, the stream object itself, to check that the formatted extraction to &lt;code&gt;value&lt;/code&gt; succeeded. But then, after also consuming whitespace, we perform another I/O/ operation, &lt;code&gt;iss.get()&lt;/code&gt;, and expect it to fail as EOF, which is the case if the entire string has already been consumed by the formatted extraction.</source>
          <target state="translated">여기서는 두 가지 결과를 사용합니다. 첫 번째는 스트림 객체 자체 인 &lt;code&gt;iss&lt;/code&gt; 로 포맷 된 추출 &lt;code&gt;value&lt;/code&gt; 성공 했는지 확인합니다. 그러나 공백을 소비 한 후 다른 I / O / 작업 인 &lt;code&gt;iss.get()&lt;/code&gt; 을 수행하고 EOF로 실패 할 것으로 예상합니다. 이는 전체 문자열이 형식화 된 추출에 의해 이미 소비 된 경우입니다.</target>
        </trans-unit>
        <trans-unit id="648647fd82435dc0507ee1805f9b069afb309877" translate="yes" xml:space="preserve">
          <source>What is wrong with this loop?</source>
          <target state="translated">이 루프에 어떤 문제가 있습니까?</target>
        </trans-unit>
        <trans-unit id="2a805c3203447610847e1ae47416a85730b84c3d" translate="yes" xml:space="preserve">
          <source>Why is “while ( !feof (file) )” always wrong</source>
          <target state="translated">&amp;ldquo;while (! feof (file))&amp;rdquo;이 왜 항상 잘못된 것입니까?</target>
        </trans-unit>
        <trans-unit id="f54a4cb85ad4243779102fab2d01c2695116ea1c" translate="yes" xml:space="preserve">
          <source>You may notice that we very rarely spell out the actual word &quot;EOF&quot;. We usually detect the error condition in some other way that is more immediately interesting to us (e.g. failure to perform as much I/O as we had desired). In every example there is some API feature that could tell us explicitly that the EOF state has been encountered, but this is in fact not a terribly useful piece of information. It is much more of a detail than we often care about. What matters is whether the I/O succeeded, more-so than how it failed.</source>
          <target state="translated">실제 단어 &quot;EOF&quot;를 거의 언급하지 않는 경우가 있습니다. 우리는 일반적으로 우리에게 더 흥미로운 다른 방식으로 오류 상태를 감지합니다 (예 : 원하는만큼 I / O를 수행하지 못하는 경우). 모든 예에는 EOF 상태가 발생했음을 명시 적으로 알려주는 API 기능이 있지만 실제로는 유용한 정보가 아닙니다. 우리가 자주 걱정하는 것보다 훨씬 자세한 내용입니다. 중요한 것은 I / O가 실패한 방법보다 성공했는지 여부입니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
