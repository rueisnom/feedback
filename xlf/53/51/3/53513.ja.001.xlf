<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/53513">
    <body>
      <group id="53513">
        <trans-unit id="fa6087ea829d2efe469e42d5b4ea7ef6c710c3b4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://books.google.com/books?id=vpTAq4dnmuAC&amp;amp;pg=RA1-PA479&amp;amp;lpg=RA1-PA479&amp;amp;dq=Python+len+big+O&amp;amp;source=web&amp;amp;ots=AOM6A1K9Fy&amp;amp;sig=iQo8mV6Xf9KdzuNSa-Jkr8wDEuw&amp;amp;hl=en&amp;amp;sa=X&amp;amp;oi=book_result&amp;amp;resnum=4&amp;amp;ct=result&quot;&gt;&lt;code&gt;len()&lt;/code&gt; is an O(1) operation&lt;/a&gt; for Python lists, strings, dicts, and sets. Python internally keeps track of the number of elements in these containers.</source>
          <target state="translated">&lt;a href=&quot;http://books.google.com/books?id=vpTAq4dnmuAC&amp;amp;pg=RA1-PA479&amp;amp;lpg=RA1-PA479&amp;amp;dq=Python+len+big+O&amp;amp;source=web&amp;amp;ots=AOM6A1K9Fy&amp;amp;sig=iQo8mV6Xf9KdzuNSa-Jkr8wDEuw&amp;amp;hl=en&amp;amp;sa=X&amp;amp;oi=book_result&amp;amp;resnum=4&amp;amp;ct=result&quot;&gt; &lt;code&gt;len()&lt;/code&gt; は、&lt;/a&gt; Pythonリスト、文字列、辞書、およびセットのO（1）操作です。 Pythonはこれらのコンテナー内の要素の数を内部的に追跡します。</target>
        </trans-unit>
        <trans-unit id="85fd292fdea964654b12fcc3bff501372a02fc3f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/a/53522/908494&quot;&gt;Patrick's (accepted) answer&lt;/a&gt; is right: &lt;code&gt;if not a:&lt;/code&gt; is the right way to do it. &lt;a href=&quot;https://stackoverflow.com/a/53752/908494&quot;&gt;Harley Holcombe's answer&lt;/a&gt; is right that this is in the PEP 8 style guide. But what none of the answers explain is why it's a good idea to follow the idiom&amp;mdash;even if you personally find it's not explicit enough or confusing to Ruby users or whatever.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/53522/908494&quot;&gt;Patrickの（承認された）答え&lt;/a&gt;は正しいです。 &lt;code&gt;if not a:&lt;/code&gt; が正しい方法です。 &lt;a href=&quot;https://stackoverflow.com/a/53752/908494&quot;&gt;Harley Holcombeの答え&lt;/a&gt;は、これがPEP 8スタイルガイドにあることです。 しかし、答えがどれも説明しないのは、たとえイディオムに従うのが良い考えであるかです。たとえ個人的にそれが十分に明示的ではなく、Rubyユーザーなどにとって混乱しているとしても。</target>
        </trans-unit>
        <trans-unit id="f6bd068dee72f5e7acd72d046b51628d73431616" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/#programming-recommendations&quot;&gt;PEP 8&lt;/a&gt;, the official Python style guide for Python code in Python's standard library, asserts:</source>
          <target state="translated">Pythonの標準ライブラリにあるPythonコードの公式Pythonスタイルガイドである&lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/#programming-recommendations&quot;&gt;PEP 8は&lt;/a&gt; 、次のように主張しています。</target>
        </trans-unit>
        <trans-unit id="709c05e03db9fe7106ff167bae3e20510ada6c6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1)&lt;/strong&gt; The pretty simple pythonic way:</source>
          <target state="translated">&lt;strong&gt;1）&lt;/strong&gt;かなり単純なpythonicの方法：</target>
        </trans-unit>
        <trans-unit id="73bff0478225a1ca5de41c8041fd2f172d65b5e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2)&lt;/strong&gt; A much explicit way: using the &lt;code&gt;len()&lt;/code&gt; to find the length and check if it equals to &lt;code&gt;0&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;2）&lt;/strong&gt;より明確な方法： &lt;code&gt;len()&lt;/code&gt; を使用して長さを見つけ、それが &lt;code&gt;0&lt;/code&gt; に等しいかどうかを確認します 。</target>
        </trans-unit>
        <trans-unit id="f9d4a74112f8906073526e0491135de335a7db27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;3)&lt;/strong&gt; Or comparing it to an anonymous empty list:</source>
          <target state="translated">&lt;strong&gt;3）&lt;/strong&gt;または、それを匿名の空のリストと比較します。</target>
        </trans-unit>
        <trans-unit id="406daadaa5d41723954f852ca3012418a893aa74" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;4)&lt;/strong&gt; Another yet &lt;em&gt;silly&lt;/em&gt; way to do is using &lt;code&gt;exception&lt;/code&gt; and &lt;code&gt;iter()&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;4）&lt;/strong&gt;もう1つの&lt;em&gt;馬鹿げた&lt;/em&gt;方法は、 &lt;code&gt;exception&lt;/code&gt; と &lt;code&gt;iter()&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="2d2003a249df2249cead04ad47fd9076516a663f" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;This is the first google hit for &quot;python test empty array&quot; and similar queries, plus other people seem to be generalizing the question beyond just lists, so I thought I'd add a caveat for a different type of sequence that a lot of people might use.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;これは「python test empty array」と同様のクエリに対する最初のgoogleヒットです。他の人々はリストだけでなく質問を一般化しているようですので、多くの人々が異なるタイプのシーケンスについて警告を追加したいと思いました使用するかもしれません。&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="e08157bc06e9b1d4da704ba91099e16c06508dab" translate="yes" xml:space="preserve">
          <source>@Daren Thomas</source>
          <target state="translated">ダレン・トーマス</target>
        </trans-unit>
        <trans-unit id="dbf83e4117a99476070d823064700dc3ed352dc3" translate="yes" xml:space="preserve">
          <source>All values other than what is listed here are considered &lt;code&gt;True&lt;/code&gt;</source>
          <target state="translated">ここにリストされているもの以外のすべての値は &lt;code&gt;True&lt;/code&gt; と見なされます</target>
        </trans-unit>
        <trans-unit id="2a2a7eec8c7ee8d914fe13445e4f282e1b2a7082" translate="yes" xml:space="preserve">
          <source>Although it's worth nothing that &lt;code&gt;None&lt;/code&gt; is falsy. So if you don't want to separate test for &lt;code&gt;None&lt;/code&gt;-ness, you don't have to do that.</source>
          <target state="translated">&lt;code&gt;None&lt;/code&gt; が偽物であることは何の価値もありません。 したがって、 &lt;code&gt;None&lt;/code&gt; -nessのテストを分離したくない場合は、それを行う必要はありません。</target>
        </trans-unit>
        <trans-unit id="a3eda0c093884c5cdf292a4a6958a44bd4e2a71d" translate="yes" xml:space="preserve">
          <source>An empty list is itself considered false in true value testing (see &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#truth-value-testing&quot;&gt;python documentation&lt;/a&gt;):</source>
          <target state="translated">空のリストは、真の値のテストではそれ自体がfalseと見なされます（ &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#truth-value-testing&quot;&gt;pythonのドキュメントを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="ab5f88a40a649b5bd874e7e3cf70712fe8fcfbfb" translate="yes" xml:space="preserve">
          <source>And for the &lt;code&gt;[] == []&lt;/code&gt; it has to build an unnecessary list and then, again, do the comparison operation in Python's virtual machine (as opposed to C)</source>
          <target state="translated">&lt;code&gt;[] == []&lt;/code&gt; 場合、不要なリストを作成してから、Pythonの仮想マシンで比較操作を実行する必要があります（Cとは対照的に）。</target>
        </trans-unit>
        <trans-unit id="44044d9b0333bc1e2793c401ceb8f5611f29a99f" translate="yes" xml:space="preserve">
          <source>And the datamodel documentation:</source>
          <target state="translated">データモデルのドキュメントも</target>
        </trans-unit>
        <trans-unit id="45af135cc0b7fd22346b0a3dce703ee3a4f1fac5" translate="yes" xml:space="preserve">
          <source>And users of lazy languages may be tempted to do this:</source>
          <target state="translated">そして、怠惰な言語のユーザーは、このようなことをしたくなるかもしれません。</target>
        </trans-unit>
        <trans-unit id="6202056bf6b3d838f4ff8c5b7307d6357e08439f" translate="yes" xml:space="preserve">
          <source>And, of course, there is a very natural way to do it:</source>
          <target state="translated">もちろん、ごく自然な方法もあります。</target>
        </trans-unit>
        <trans-unit id="ff47252d65d441c800203256a95b3a6607509fac" translate="yes" xml:space="preserve">
          <source>As can be seen, empty list &lt;code&gt;[]&lt;/code&gt; is &lt;em&gt;falsy&lt;/em&gt;, so doing what would be done to a boolean value sounds most efficient:</source>
          <target state="translated">&lt;em&gt;ご覧の&lt;/em&gt;ように、空のリスト &lt;code&gt;[]&lt;/code&gt; は&lt;em&gt;不正な&lt;/em&gt;ため、ブール値に対して行われることを行うのが最も効率的です。</target>
        </trans-unit>
        <trans-unit id="bba28c4ea8d4854a5cac4c82193c5746abc143e3" translate="yes" xml:space="preserve">
          <source>As explained in the &lt;a href=&quot;http://www.scipy.org/scipylib/faq.html#what-is-the-preferred-way-to-check-for-an-empty-zero-element-array&quot;&gt;SciPy FAQ&lt;/a&gt;, the correct method in all cases where you know you have a NumPy array is to use &lt;code&gt;if x.size&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://www.scipy.org/scipylib/faq.html#what-is-the-preferred-way-to-check-for-an-empty-zero-element-array&quot;&gt;SciPy FAQ&lt;/a&gt;で説明されているように、NumPy配列があることがわかっているすべてのケースで正しい方法は &lt;code&gt;if x.size&lt;/code&gt; に使用することです 。</target>
        </trans-unit>
        <trans-unit id="c2a373c95098f9c06da7f59b6f9464570c1f1907" translate="yes" xml:space="preserve">
          <source>Being inspired by @dubiousjim's solution, I propose to use an additional general check of whether is it something iterable</source>
          <target state="translated">dbiousjimさんの解決策に触発されて、それが反復可能なものであるかどうかの追加の一般的なチェックを使うことを提案します。</target>
        </trans-unit>
        <trans-unit id="3ab76bc795d839d5beddbad54e0ccdf03bc826b1" translate="yes" xml:space="preserve">
          <source>Best way to check if a list is empty</source>
          <target state="translated">リストが空かどうかを確認する最良の方法</target>
        </trans-unit>
        <trans-unit id="eca779c7f85faf34e05c115f1686ec19c2ba5f60" translate="yes" xml:space="preserve">
          <source>But at least the case above tells you that it failed.  If you happen to have a NumPy array with exactly one element, the &lt;code&gt;if&lt;/code&gt; statement will &quot;work&quot;, in the sense that you don't get an error.  However, if that one element happens to be &lt;code&gt;0&lt;/code&gt; (or &lt;code&gt;0.0&lt;/code&gt;, or &lt;code&gt;False&lt;/code&gt;, ...), the &lt;code&gt;if&lt;/code&gt; statement will incorrectly result in &lt;code&gt;False&lt;/code&gt;:</source>
          <target state="translated">しかし、少なくとも上記の場合は、失敗したことを示しています。 要素が1つだけのNumPy配列がある &lt;code&gt;if&lt;/code&gt; 、 ifステートメントは、エラーが発生しないという意味で「機能」します。 ただし、その1つの要素が偶然 &lt;code&gt;0&lt;/code&gt; （または &lt;code&gt;0.0&lt;/code&gt; 、または &lt;code&gt;False&lt;/code&gt; 、...）である &lt;code&gt;if&lt;/code&gt; 、 ifステートメントは誤って &lt;code&gt;False&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="daf538c97712481cae9a4d466b7c25253ade40a8" translate="yes" xml:space="preserve">
          <source>But clearly &lt;code&gt;x&lt;/code&gt; exists and is not empty!  This result is not what you wanted.</source>
          <target state="translated">しかし明らかに &lt;code&gt;x&lt;/code&gt; は存在し、空ではありません！ この結果はあなたが望んだものではありません。</target>
        </trans-unit>
        <trans-unit id="352789ca029b151d48e5b54d32774d3617bff5aa" translate="yes" xml:space="preserve">
          <source>But we consider it un-Pythonic because Python supports these semantics directly in the list object's interface via boolean coercion.</source>
          <target state="translated">しかし、Pythonはこれらのセマンティクスをブーリアン強制を介してリストオブジェクトのインターフェイスで直接サポートしているため、私たちはこれを非ピソニックス的なものと考えています。</target>
        </trans-unit>
        <trans-unit id="b38bccd576f28416712521493d4fcfd148c28f3f" translate="yes" xml:space="preserve">
          <source>But when you don't have anything to be explicit about, anything other than &lt;code&gt;if not a:&lt;/code&gt; is misleading the reader. You're signaling something as important when it isn't. (You may also be making the code less flexible, or slower, or whatever, but that's all less important.) And if you &lt;em&gt;habitually&lt;/em&gt; mislead the reader like this, then when you &lt;em&gt;do&lt;/em&gt; need to make a distinction, it's going to pass unnoticed because you've been &quot;crying wolf&quot; all over your code.</source>
          <target state="translated">しかし、明確にする必要のあるものがない場合、そうでない &lt;code&gt;if not a:&lt;/code&gt; 以外は、読者を誤解させます。 それが重要ではないときに重要な何かを知らせています。 （コードの柔軟性が低下したり、遅くなったりすることもありますが、それはそれほど重要ではありません。）そして、このように読者を&lt;em&gt;習慣的に&lt;/em&gt;誤解させた場合、区別する必要がある場合、それは気付かれずに通過します。コード全体で「オオカミを泣いている」。</target>
        </trans-unit>
        <trans-unit id="f3c03b9e169237bd714c4403d329565895990596" translate="yes" xml:space="preserve">
          <source>By default, an object is considered true unless its class defines
  either a &lt;code&gt;__bool__()&lt;/code&gt; method that returns &lt;code&gt;False&lt;/code&gt; or a &lt;code&gt;__len__()&lt;/code&gt; method
  that returns zero, when called with the object. Here are most of the built-in objects considered false:</source>
          <target state="translated">オブジェクトで &lt;code&gt;__bool__()&lt;/code&gt; たときに 、クラスが &lt;code&gt;False&lt;/code&gt; を返す &lt;code&gt;__len__()&lt;/code&gt; メソッドまたはゼロを返す__len __（）メソッドのいずれかをクラスが定義していない限り、デフォルトでは、オブジェクトはTrueと見なされます。 以下は、falseと見なされる組み込みオブジェクトのほとんどです。</target>
        </trans-unit>
        <trans-unit id="0fdcbacfeed5434a99e0a6a9a898a2d1742fc056" translate="yes" xml:space="preserve">
          <source>Called to implement the built-in function &lt;code&gt;len()&lt;/code&gt;. Should return the length of the object, an integer &amp;gt;= 0. Also, an object that doesn&amp;rsquo;t define a &lt;code&gt;__bool__()&lt;/code&gt; method and whose &lt;code&gt;__len__()&lt;/code&gt; method returns zero is considered to be false in a Boolean context.</source>
          <target state="translated">組み込み関数 &lt;code&gt;len()&lt;/code&gt; を実装するために呼び出されます。 オブジェクトの長さ、0以上の整数を返す必要があります。また、 &lt;code&gt;__bool__()&lt;/code&gt; メソッドを定義せず、 __ &lt;code&gt;__len__()&lt;/code&gt; メソッドがゼロを返すオブジェクトは、ブール値のコンテキストではfalseと見なされます。</target>
        </trans-unit>
        <trans-unit id="e25864a93b493700b01d581e68d0cd82ca932f25" translate="yes" xml:space="preserve">
          <source>Called to implement truth value testing and the built-in operation &lt;code&gt;bool()&lt;/code&gt;; should return &lt;code&gt;False&lt;/code&gt; or &lt;code&gt;True&lt;/code&gt;. When this method is not defined,
  &lt;code&gt;__len__()&lt;/code&gt; is called, if it is defined, and the object is considered true if its result is nonzero. If a class defines neither &lt;code&gt;__len__()&lt;/code&gt;
  nor &lt;code&gt;__bool__()&lt;/code&gt;, all its instances are considered true.</source>
          <target state="translated">真理値テストと組み込みオペレーション &lt;code&gt;bool()&lt;/code&gt; を実装するために呼び出されます。 &lt;code&gt;False&lt;/code&gt; または &lt;code&gt;True&lt;/code&gt; を返す必要があります 。 このメソッドが定義されていない場合、定義されている場合は &lt;code&gt;__len__()&lt;/code&gt; が呼び出され、結果がゼロ以外の場合、オブジェクトはtrueと見なされます。 クラスが &lt;code&gt;__len__()&lt;/code&gt; も &lt;code&gt;__bool__()&lt;/code&gt; も定義しない場合、そのすべてのインスタンスはtrueと見なされます。</target>
        </trans-unit>
        <trans-unit id="a09d8fe71d819660f00ffa7e97f5581804bd696d" translate="yes" xml:space="preserve">
          <source>Do this:</source>
          <target state="translated">これをやってくれ</target>
        </trans-unit>
        <trans-unit id="f5b5eede35878f55c7d57820131de56da262d55f" translate="yes" xml:space="preserve">
          <source>Does it pay off? (Note that less time to perform an equivalent operation is better:)</source>
          <target state="translated">儲かるのか?(同等の操作を行う時間が少ない方が良いことに注意してください:)</target>
        </trans-unit>
        <trans-unit id="373d23c12606180ec0cf1beb638fb73524fadb61" translate="yes" xml:space="preserve">
          <source>Doing what's Pythonic usually pays off in performance:</source>
          <target state="translated">ピトニックなことをすることは、通常、パフォーマンスで利益を得ることができます。</target>
        </trans-unit>
        <trans-unit id="97f2e93e05fd80db822418cf3feec3652cf3a370" translate="yes" xml:space="preserve">
          <source>EDIT : This works with python2.7 too..</source>
          <target state="translated">EDIT:これはpython2.7でも動作します。</target>
        </trans-unit>
        <trans-unit id="a76d5cc35692d4dad67addbef26267cdf67ffeed" translate="yes" xml:space="preserve">
          <source>EDIT: Another point against testing
  the empty list as False: What about
  polymorphism? You shouldn't depend on
  a list being a list. It should just
  quack like a duck - how are you going
  to get your duckCollection to quack
  ''False'' when it has no elements?</source>
          <target state="translated">EDIT:空のリストをFalseとしてテストすることに対するもう一点。多相性はどうでしょうか?リストがリストであることに依存すべきではありません。アヒルのように鳴くべきです-duckCollection が要素を持たないときに ''False'' を鳴くようにするにはどうすればいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="dcedc96969a1d0a6f2a233b8f6888a0a00ab7357" translate="yes" xml:space="preserve">
          <source>Evidence from the C source and documentation</source>
          <target state="translated">Cソースからのエビデンスと文書化</target>
        </trans-unit>
        <trans-unit id="b32ef340ea4702fd5f41dbe4001671d76174ef71" translate="yes" xml:space="preserve">
          <source>Explanation</source>
          <target state="translated">Explanation</target>
        </trans-unit>
        <trans-unit id="c25e4d6b416a6cd9233a3e845e94921c7430d50d" translate="yes" xml:space="preserve">
          <source>First Python has to check the globals to see if &lt;code&gt;len&lt;/code&gt; is shadowed.</source>
          <target state="translated">最初のPythonはグローバルをチェックして、 &lt;code&gt;len&lt;/code&gt; がシャドウされているかどうかを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="f3412712dcaf0e84cb53a746ad7e9f73d9013702" translate="yes" xml:space="preserve">
          <source>For example, if passed the following:</source>
          <target state="translated">例えば、以下のように渡された場合。</target>
        </trans-unit>
        <trans-unit id="1bad339600e3699390f0ed87a2003eee92c4dfcf" translate="yes" xml:space="preserve">
          <source>For scale, here's the cost of calling the function and constructing and returning an empty list, which you might subtract from the costs of the emptiness checks used above:</source>
          <target state="translated">規模を拡大するために、関数を呼び出して空のリストを構築して返すためのコストを示しています。</target>
        </trans-unit>
        <trans-unit id="e7f942debb8d0e14241aa308336c922d6775903a" translate="yes" xml:space="preserve">
          <source>For sequences, (strings, lists, tuples), use the fact that empty sequences are false.</source>
          <target state="translated">シーケンス(文字列、リスト、タプル)については、空のシーケンスがfalseであるという事実を使用します。</target>
        </trans-unit>
        <trans-unit id="bac1c52ffa1b4459d0f919bc355c6d2057242350" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;len(a) == 0&lt;/code&gt; check:</source>
          <target state="translated">&lt;code&gt;len(a) == 0&lt;/code&gt; 場合：</target>
        </trans-unit>
        <trans-unit id="aaaaeb6ed2be6a7373f22ebc411776f617e21985" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;https://docs.python.org/3.5/library/stdtypes.html#truth-value-testing&quot;&gt;documentation&lt;/a&gt; on truth value testing:</source>
          <target state="translated">真理値テスト&lt;a href=&quot;https://docs.python.org/3.5/library/stdtypes.html#truth-value-testing&quot;&gt;に関するドキュメント&lt;/a&gt;から：</target>
        </trans-unit>
        <trans-unit id="609634de36f52ce2e3fd7aa8ecbe7c6e9b48a3be" translate="yes" xml:space="preserve">
          <source>From python3 onwards you can use</source>
          <target state="translated">python3以降では</target>
        </trans-unit>
        <trans-unit id="1232457a90ed6c80cf66104828eec8c675b2e5f6" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#truth-value-testing&quot;&gt;docs&lt;/a&gt; (and note specifically the inclusion of the empty list, &lt;code&gt;[]&lt;/code&gt;):</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#truth-value-testing&quot;&gt;ドキュメント&lt;/a&gt;から（そして空のリスト &lt;code&gt;[]&lt;/code&gt; が含まれていることに特に注意してください）：</target>
        </trans-unit>
        <trans-unit id="728f688a52623e6d5037d6bbdfb3e7ba80193709" translate="yes" xml:space="preserve">
          <source>From the c source in &lt;a href=&quot;https://github.com/python/cpython/blob/master/Include/listobject.h&quot;&gt;Include/listobject.h&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/python/cpython/blob/master/Include/listobject.h&quot;&gt;Include / listobject.hの&lt;/a&gt; Cソースから：</target>
        </trans-unit>
        <trans-unit id="683112e7d730f26c7bccb345b8ef7aaf95794090" translate="yes" xml:space="preserve">
          <source>Here are a few ways you can check if a list is empty:</source>
          <target state="translated">リストが空かどうかを確認する方法をいくつかご紹介します。</target>
        </trans-unit>
        <trans-unit id="a6a0ce9031e0776d5fc6120b3023d51bccf114f1" translate="yes" xml:space="preserve">
          <source>Hope this helps.</source>
          <target state="translated">これが助けになることを願っています。</target>
        </trans-unit>
        <trans-unit id="5ff7fbc89be7316e185d7a00a7ff3d90d022034c" translate="yes" xml:space="preserve">
          <source>How do I check if a list is empty</source>
          <target state="translated">リストが空かどうかを確認するには</target>
        </trans-unit>
        <trans-unit id="33c5d06ed9c860acea48b74dc4a823901ef3f8f1" translate="yes" xml:space="preserve">
          <source>How do I check to see if &lt;code&gt;a&lt;/code&gt; is empty?</source>
          <target state="translated">が空かどうかを確認するにはどうすればよいですか？</target>
        </trans-unit>
        <trans-unit id="e5fcefe7e34c52a1195ed32056bdb1089ea254b1" translate="yes" xml:space="preserve">
          <source>How do I check to see if a is empty?</source>
          <target state="translated">Aが空かどうかを確認するには?</target>
        </trans-unit>
        <trans-unit id="a9f1c0fc9cfe4503ffc9501fffdfcb4226311e22" translate="yes" xml:space="preserve">
          <source>I am not sure why there are so many complicated answers.
It's pretty clear and straightforward</source>
          <target state="translated">なぜこんなに複雑な答えが多いのかがよくわかりません。かなりわかりやすくてわかりやすい</target>
        </trans-unit>
        <trans-unit id="25ab0752fffc84134368c44c5351c7020c10bf59" translate="yes" xml:space="preserve">
          <source>I frequently see code like this from experienced programmers new to Python:</source>
          <target state="translated">Pythonに慣れていないベテランプログラマーの方のこのようなコードをよく見かけます。</target>
        </trans-unit>
        <trans-unit id="70fe8a86746b4223af6f5c03bf7b7263ef48e957" translate="yes" xml:space="preserve">
          <source>I had written:</source>
          <target state="translated">書いていました。</target>
        </trans-unit>
        <trans-unit id="503904ef0bb804cf7a77e21d4237ad21f29e4536" translate="yes" xml:space="preserve">
          <source>I love this way for checking list is empty or not.</source>
          <target state="translated">私はリストが空かどうかをチェックするためのこの方法が大好きです。</target>
        </trans-unit>
        <trans-unit id="6936816d820ecc9d4d156fa6961e9db56da9a535" translate="yes" xml:space="preserve">
          <source>I prefer it explicitly:</source>
          <target state="translated">明示的な方がいいですね。</target>
        </trans-unit>
        <trans-unit id="c822b9b00d42f96380485775d1aabfaff330ecc8" translate="yes" xml:space="preserve">
          <source>I prefer the following:</source>
          <target state="translated">私は以下の方が好きです。</target>
        </trans-unit>
        <trans-unit id="07d7c92c83648b3dcf817f34c2fe61d11e207210" translate="yes" xml:space="preserve">
          <source>I suppose the problem is testing with timeit since just &lt;code&gt;if l:&lt;/code&gt; is sufficient but surprisingly &lt;code&gt;%timeit bool(l)&lt;/code&gt; yields 101 ns &amp;plusmn; 2.64 ns. Interesting there is no way to coerce to bool without this penalty. &lt;code&gt;%timeit l&lt;/code&gt; is useless since no conversion would occur.</source>
          <target state="translated">&lt;code&gt;if l:&lt;/code&gt; で十分ですが、驚くべきことに &lt;code&gt;%timeit bool(l)&lt;/code&gt; の結果は101 ns&amp;plusmn;2.64 nsなので、問題はtimeitでテストしていると思います。 興味深いことに、このペナルティなしにブールを強制する方法はありません。 &lt;code&gt;%timeit l&lt;/code&gt; は変換が行われないため、役に立ちません。</target>
        </trans-unit>
        <trans-unit id="4a53819da8c55112c5bbdb5ec0a8f8c0331eed55" translate="yes" xml:space="preserve">
          <source>I would argue that the &lt;em&gt;most pythonic&lt;/em&gt; way is to not check at all, but rather to just process the list.  That way it will do the right thing whether empty or full.</source>
          <target state="translated">&lt;em&gt;最もパイソン&lt;/em&gt;的な方法は、まったくチェックしないで、リストを処理するだけであると私は主張します。 そうすれば、それは空であろうと満杯であろうと正しいことをします。</target>
        </trans-unit>
        <trans-unit id="df53c7c830c1b687f914d825896b14ea3616de2b" translate="yes" xml:space="preserve">
          <source>I would point out that this is also true for the non-empty case though its pretty ugly as with &lt;code&gt;l=[]&lt;/code&gt; then &lt;code&gt;%timeit len(l) != 0&lt;/code&gt; 90.6 ns &amp;plusmn; 8.3 ns, &lt;code&gt;%timeit l != []&lt;/code&gt; 55.6 ns &amp;plusmn; 3.09, &lt;code&gt;%timeit not not l&lt;/code&gt; 38.5 ns &amp;plusmn; 0.372. But there is no way anyone is going to enjoy &lt;code&gt;not not l&lt;/code&gt; despite triple the speed. It looks ridiculous. But the speed wins out</source>
          <target state="translated">これは空でない場合にも当てはまることを指摘しますが、 &lt;code&gt;l=[]&lt;/code&gt; の場合はかなり醜く、 &lt;code&gt;%timeit len(l) != 0&lt;/code&gt; 90.6 ns&amp;plusmn;8.3 ns、 &lt;code&gt;%timeit l != []&lt;/code&gt; 55.6 ns &amp;plusmn;3.09、 &lt;code&gt;%timeit not not l&lt;/code&gt; 38.5 ns&amp;plusmn;0.372。 しかし、速度が3倍になったにもかかわらず、誰もが &lt;code&gt;not not l&lt;/code&gt; ことを楽しむ方法はありません 。 ばかげて見えます。 しかし、速度は勝つ</target>
        </trans-unit>
        <trans-unit id="d4412db9669f7d0df447ee505c3d56a16c1a3414" translate="yes" xml:space="preserve">
          <source>IPython magic, &lt;code&gt;%timeit&lt;/code&gt;, is not entirely useless here:</source>
          <target state="translated">IPythonマジック &lt;code&gt;%timeit&lt;/code&gt; は 、ここでは完全に役に立たないわけではありません。</target>
        </trans-unit>
        <trans-unit id="2a07e4c6e816613379546e213ea347ae1a8fa784" translate="yes" xml:space="preserve">
          <source>If you do actually need to check the array for emptiness, the other answers are sufficient.</source>
          <target state="translated">実際に配列が空かどうかをチェックする必要がある場合は、他の答えで十分です。</target>
        </trans-unit>
        <trans-unit id="125e68683b69b0a281814ca748de40fb9e6f3516" translate="yes" xml:space="preserve">
          <source>If you need to do more than just check if the input is empty, and you're using other NumPy features like indexing or math operations, it's probably more efficient (and certainly more common) to force the input &lt;em&gt;to be&lt;/em&gt; a NumPy array.  There are a few nice functions for doing this quickly &amp;mdash;&amp;nbsp;most importantly &lt;a href=&quot;https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.asarray.html&quot;&gt;&lt;code&gt;numpy.asarray&lt;/code&gt;&lt;/a&gt;.  This takes your input, does nothing if it's already an array, or wraps your input into an array if it's a list, tuple, etc., and optionally converts it to your chosen &lt;code&gt;dtype&lt;/code&gt;.  So it's very quick whenever it can be, and it ensures that you just get to assume the input is a NumPy array.  We usually even just use the same name, as the conversion to an array won't make it back outside of the current &lt;a href=&quot;http://python-textbok.readthedocs.io/en/1.0/Variables_and_Scope.html&quot;&gt;scope&lt;/a&gt;:</source>
          <target state="translated">入力が空であるかどうかを確認するだけでなく、インデックス作成や数学演算などの他のNumPy機能を使用している場合は、入力&lt;em&gt;を&lt;/em&gt; NumPy配列に強制する方がおそらくより効率的です（そしてより一般的です）。 これをすばやく行うための便利な関数がいくつかあります。最も重要なのは&lt;a href=&quot;https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.asarray.html&quot;&gt; &lt;code&gt;numpy.asarray&lt;/code&gt; &lt;/a&gt;です。 これはあなたの入力を受け取り、それがすでに配列である場合は何もせず、それがリストやタプルなどである場合は入力を配列にラップし、オプションでそれを選択した &lt;code&gt;dtype&lt;/code&gt; に変換します。 そのため、可能な限り非常に高速であり、入力がNumPy配列であると想定できるようにします。 配列に変換しても現在の&lt;a href=&quot;http://python-textbok.readthedocs.io/en/1.0/Variables_and_Scope.html&quot;&gt;スコープの&lt;/a&gt;外には戻らないため、通常は同じ名前を使用します 。</target>
        </trans-unit>
        <trans-unit id="8fb952d33272c37411f1179bd271c831539a4522" translate="yes" xml:space="preserve">
          <source>If you want to check if a list is empty:</source>
          <target state="translated">リストが空かどうかを確認したい場合。</target>
        </trans-unit>
        <trans-unit id="40e6c40dc0a9104c2eddd05cdb70a55879c0c1a5" translate="yes" xml:space="preserve">
          <source>If you want to check whether all the values in list is empty. However it will be &lt;code&gt;True&lt;/code&gt; for an empty list:</source>
          <target state="translated">リストのすべての値が空かどうかを確認する場合。 ただし、リストが空の場合は &lt;code&gt;True&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="536f093032dabe47659c67529b21e5619964a16e" translate="yes" xml:space="preserve">
          <source>If you want to use both cases together:</source>
          <target state="translated">両方のケースを併用したい場合</target>
        </trans-unit>
        <trans-unit id="8841134ee2ab08cfb3f81a5ebb9e79b04b2bff1d" translate="yes" xml:space="preserve">
          <source>If you're not sure whether it might be a &lt;code&gt;list&lt;/code&gt;, a NumPy array, or something else, you could combine this approach with &lt;a href=&quot;https://stackoverflow.com/a/10835703/1194883&quot;&gt;the answer @dubiousjim gives&lt;/a&gt; to make sure the right test is used for each type.  Not very &quot;pythonic&quot;, but it turns out that NumPy intentionally broke pythonicity in at least this sense.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; であるか、NumPy配列であるかなどが&lt;a href=&quot;https://stackoverflow.com/a/10835703/1194883&quot;&gt;不明&lt;/a&gt;な場合は、このアプローチと@dubiousjimの回答を組み合わせて、各タイプに適切なテストが使用されていることを確認できます。 それほど「Pythonic」ではありませんが、NumPyは少なくともこの意味でPythonicityを意図的に壊したことがわかりました。</target>
        </trans-unit>
        <trans-unit id="428f7e34ea9af326d1a0f2aad6f147c45fdb55ac" translate="yes" xml:space="preserve">
          <source>In Python, &lt;strong&gt;empty containers&lt;/strong&gt; such as lists,tuples,sets,dicts,variables etc are seen as &lt;code&gt;False&lt;/code&gt;. One could simply treat the list as a predicate (&lt;em&gt;returning a Boolean value&lt;/em&gt;). And  a &lt;code&gt;True&lt;/code&gt; value would indicate that it's non-empty.</source>
          <target state="translated">Pythonでは、リスト、タプル、セット、ディクショナリ、変数などの&lt;strong&gt;空のコンテナ&lt;/strong&gt;は &lt;code&gt;False&lt;/code&gt; と見なされます。 リストを述語として扱う（ &lt;em&gt;ブール値を返す&lt;/em&gt; ）だけです。 そして、 &lt;code&gt;True&lt;/code&gt; 値はそれが空でないことを示します。</target>
        </trans-unit>
        <trans-unit id="a160b38c575aa7abd79420a97f3bbb8f340afc2a" translate="yes" xml:space="preserve">
          <source>It can be used for any data_structure like a list,tuples, dictionary and many more. By these, you can call it many times using just &lt;code&gt;is_empty(any_structure)&lt;/code&gt;.</source>
          <target state="translated">リスト、タプル、辞書などのdata_structureに使用できます。 これらにより、 &lt;code&gt;is_empty(any_structure)&lt;/code&gt; を使用して何度でも呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="c32bab15a2ee7ad8ba7c6641bb23e238358e1623" translate="yes" xml:space="preserve">
          <source>It is sometimes good to test for &lt;code&gt;None&lt;/code&gt; and for emptiness separately as those are two different states. The code above produces the following output:</source>
          <target state="translated">&lt;code&gt;None&lt;/code&gt; とemptyityを別々にテストすると、2つの異なる状態になるため、これらを個別にテストするとよい場合があります。 上記のコードは次の出力を生成します。</target>
        </trans-unit>
        <trans-unit id="c5d891bd3646d03ddb9c17a5be09027bd036ced8" translate="yes" xml:space="preserve">
          <source>It's true that &lt;code&gt;if not a:&lt;/code&gt; doesn't distinguish empty lists from &lt;code&gt;None&lt;/code&gt;, or numeric 0, or empty tuples, or empty user-created collection types, or empty user-created not-quite-collection types, or single-element NumPy array acting as scalars with falsey values, etc. And sometimes it's important to be explicit about that. And in that case, you know &lt;em&gt;what&lt;/em&gt; you want to be explicit about, so you can test for exactly that. For example, &lt;code&gt;if not a and a is not None:&lt;/code&gt; means &quot;anything falsey except None&quot;, while &lt;code&gt;if len(a) != 0:&lt;/code&gt; means &quot;only empty sequences&amp;mdash;and anything besides a sequence is an error here&quot;, and so on. Besides testing for exactly what you want to test, this also signals to the reader that this test is important.</source>
          <target state="translated">そうで &lt;code&gt;if not a:&lt;/code&gt; 空のリストを &lt;code&gt;None&lt;/code&gt; 、数値0、空のタプル、空のユーザー作成コレクションタイプ、空のユーザー作成非完全コレクションタイプ、または単一要素のNumPy配列と区別しない誤った値などを持つスカラーとして機能します。そして、それについて明示することが重要な場合があります。 その場合は、 &lt;em&gt;何&lt;/em&gt;を明示したい&lt;em&gt;か&lt;/em&gt;がわかって&lt;em&gt;いる&lt;/em&gt;ので、それを正確にテストできます。 たとえば、 &lt;code&gt;if not a and a is not None:&lt;/code&gt; 「None以外のすべての誤り」を意味し &lt;code&gt;if len(a) != 0:&lt;/code&gt; は、「空のシーケンスのみであり、シーケンス以外のものはここではエラーになります」などです。 。 これは、テストしたいものを正確にテストすることに加えて、このテストが重要であることを読者に知らせます。</target>
        </trans-unit>
        <trans-unit id="c7b0318d9faa41f53e682c3bbc37b5cfd1c0e726" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;a href=&quot;http://www.isolani.co.uk/blog/javascript/TruthyFalsyAndTypeCasting&quot;&gt;has a similar notion of truthy/falsy&lt;/a&gt;.</source>
          <target state="translated">JavaScript &lt;a href=&quot;http://www.isolani.co.uk/blog/javascript/TruthyFalsyAndTypeCasting&quot;&gt;にも同様の真実/虚偽の概念があり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="5142fae3c5db9d1461a71db588118a77074a605f" translate="yes" xml:space="preserve">
          <source>Many answers have been given, and a lot of them are pretty good. I just wanted to add that the check</source>
          <target state="translated">多くの答えが出ていますが、その多くはかなりのものです。付け加えておきたかったのは、チェックの</target>
        </trans-unit>
        <trans-unit id="bf1a55fc2dfc2923592d18290d8210ac0f8e2701" translate="yes" xml:space="preserve">
          <source>Method 1 (Preferred):</source>
          <target state="translated">方法1(好ましい)。</target>
        </trans-unit>
        <trans-unit id="4e958d4a4b4554ff4a60439e18120188e8915232" translate="yes" xml:space="preserve">
          <source>Method 2 :</source>
          <target state="translated">方法 2 .</target>
        </trans-unit>
        <trans-unit id="5c1700aea4db454bd25188c6878b4574d94f6e62" translate="yes" xml:space="preserve">
          <source>Method 3:</source>
          <target state="translated">方法3.</target>
        </trans-unit>
        <trans-unit id="4163466ea446b9664c1bdbc1d45e8ba19c39c8f9" translate="yes" xml:space="preserve">
          <source>No one seems to have addressed questioning your &lt;em&gt;need&lt;/em&gt; to test the list in the first place.  Because you provided no additional context, I can imagine that you may not need to do this check in the first place, but are unfamiliar with list processing in Python.</source>
          <target state="translated">そもそもリストをテストする&lt;em&gt;必要性&lt;/em&gt;を問うことに誰も対処していないようです。 追加のコンテキストを提供しなかったので、最初にこのチェックを行う必要はないかもしれませんが、Pythonでのリスト処理に慣れていない可能性があります。</target>
        </trans-unit>
        <trans-unit id="2ec0c5d4d7981ce6e9ff1b380ca6846b74422e54" translate="yes" xml:space="preserve">
          <source>Note: a string is considered to be iterable. - add &lt;code&gt;and not isinstance(a,(str,unicode))&lt;/code&gt; if you want the empty string to be excluded</source>
          <target state="translated">注：文字列は反復可能と見なされます。 -空の文字列を除外する場合 &lt;code&gt;and not isinstance(a,(str,unicode))&lt;/code&gt; 追加します</target>
        </trans-unit>
        <trans-unit id="18b642e9538492bb0944a34dd8a2e506f10e19b4" translate="yes" xml:space="preserve">
          <source>Now let's look at the case for an unempty list:</source>
          <target state="translated">では、無職リストの場合を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="9ca01a949b72339ff024541a16acb34d56d5458e" translate="yes" xml:space="preserve">
          <source>Now you can use:</source>
          <target state="translated">これで使えるようになりました。</target>
        </trans-unit>
        <trans-unit id="9b84859507e274233a23af1cd06d846a49723981" translate="yes" xml:space="preserve">
          <source>Of course, do &lt;strong&gt;not&lt;/strong&gt; use &lt;code&gt;bool&lt;/code&gt; in &lt;code&gt;if&lt;/code&gt; (i.e., &lt;code&gt;if bool(L):&lt;/code&gt;) because it's implied. But, for the cases when &quot;is not empty&quot; is explicitly needed as a function, &lt;code&gt;bool&lt;/code&gt; is the best choice.</source>
          <target state="translated">もちろん、暗黙のうちに &lt;code&gt;bool&lt;/code&gt; を &lt;code&gt;if&lt;/code&gt; （つまり &lt;code&gt;if bool(L):&lt;/code&gt; ：）で使用し&lt;strong&gt;ない&lt;/strong&gt;でください。 ただし、関数として「空でない」が明示的に必要な場合は、 &lt;code&gt;bool&lt;/code&gt; が最適です。</target>
        </trans-unit>
        <trans-unit id="d62a34899b1789ad0de88de972782e3233f85466" translate="yes" xml:space="preserve">
          <source>Other methods don't work for NumPy arrays</source>
          <target state="translated">他のメソッドはNumPy配列では動作しない</target>
        </trans-unit>
        <trans-unit id="7508036889deb522e760a0d2d530c531b6a2002f" translate="yes" xml:space="preserve">
          <source>PEP 8</source>
          <target state="translated">PEP 8</target>
        </trans-unit>
        <trans-unit id="3ecde6cd436f098db79f5599fdb3667956fcbf60" translate="yes" xml:space="preserve">
          <source>Place the list in a boolean context (for example, with an &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt; statement). It will test &lt;code&gt;False&lt;/code&gt; if it is empty, and &lt;code&gt;True&lt;/code&gt; otherwise. For example:</source>
          <target state="translated">リストをブールコンテキストに配置します（たとえば、 &lt;code&gt;if&lt;/code&gt; または &lt;code&gt;while&lt;/code&gt; ステートメントを使用）。 空の場合は &lt;code&gt;False&lt;/code&gt; 、それ以外の場合は &lt;code&gt;True&lt;/code&gt; をテストします。 例えば：</target>
        </trans-unit>
        <trans-unit id="d2931340025c9c2fd67ac84f3da9bf695821b222" translate="yes" xml:space="preserve">
          <source>Python code, and the Python community, has very strong idioms. Following those idioms makes your code easier to read for anyone experienced in Python. And when you violate those idioms, that's a strong signal.</source>
          <target state="translated">Python のコードや Python コミュニティには、非常に強力なイディオムがあります。これらのイディオムに従うことで、Python の経験者であれば誰でもあなたのコードを読みやすくすることができます。そして、あなたがこれらのイディオムに違反した場合、それは強いシグナルとなります。</target>
        </trans-unit>
        <trans-unit id="d64b6eced566b47a6b2fd33e4bc9acd66737c2c8" translate="yes" xml:space="preserve">
          <source>Python is written in C; it uses its logic at the C level. Anything you write in Python will be slower. And it will likely be orders of magnitude slower unless you're using the mechanisms built into Python directly.</source>
          <target state="translated">PythonはC言語で書かれており、Cレベルのロジックを使用します。Pythonで書いたものは何でも遅くなります。そして、Pythonに組み込まれたメカニズムを直接使用していない限り、おそらく桁違いに遅くなるでしょう。</target>
        </trans-unit>
        <trans-unit id="420e21b5db5cbb25f52fe0a4ec446fd398e6e2c3" translate="yes" xml:space="preserve">
          <source>Response to comments:</source>
          <target state="translated">コメントへの対応。</target>
        </trans-unit>
        <trans-unit id="ea5008a4db7f66da07d14fae6d752831a2ea6498" translate="yes" xml:space="preserve">
          <source>Short Answer:</source>
          <target state="translated">短答です。</target>
        </trans-unit>
        <trans-unit id="df611a40b52b245a7619d867739b3da4fbcc5aa9" translate="yes" xml:space="preserve">
          <source>Simple way is checking the length is equal zero.</source>
          <target state="translated">簡単な方法は、長さがゼロに等しいことを確認することです。</target>
        </trans-unit>
        <trans-unit id="799b8c4046e8b1c2ade9b021de07a884f7f35ef8" translate="yes" xml:space="preserve">
          <source>Simply use is_empty() or make function like:-</source>
          <target state="translated">単純に is_empty()を使うか、以下のような関数を作るだけです。</target>
        </trans-unit>
        <trans-unit id="4259f87fbbe70d265110f62571c4d8eb3fa4ff0c" translate="yes" xml:space="preserve">
          <source>So instead of this:</source>
          <target state="translated">だから、これの代わりに</target>
        </trans-unit>
        <trans-unit id="5d3e2372695f63ce0c53a4f4135db20d5ae16db5" translate="yes" xml:space="preserve">
          <source>Test:</source>
          <target state="translated">Test:</target>
        </trans-unit>
        <trans-unit id="78307d3a12ed5a2b855d5a3f147d8f6260767c8c" translate="yes" xml:space="preserve">
          <source>The &quot;Pythonic&quot; way is a much simpler and faster check since the length of the list is cached in the object instance header:</source>
          <target state="translated">Pythonic」の方法は、リストの長さがオブジェクトのインスタンスヘッダにキャッシュされるので、よりシンプルで高速なチェックが可能です。</target>
        </trans-unit>
        <trans-unit id="cce1f662637f486e769a258aed0d1f1480d3aae4" translate="yes" xml:space="preserve">
          <source>The &quot;pythonic&quot; way doesn't work: Part 1</source>
          <target state="translated">ピトニック」のやり方ではうまくいかない その1</target>
        </trans-unit>
        <trans-unit id="a62e97267f48afa3faa3d59f99bd87e92a95b78d" translate="yes" xml:space="preserve">
          <source>The &quot;pythonic&quot; way doesn't work: Part 2</source>
          <target state="translated">ピトニック」のやり方ではうまくいかない その2</target>
        </trans-unit>
        <trans-unit id="228125c176323a97205fc40f5c53dc9e1b8cb415" translate="yes" xml:space="preserve">
          <source>The &quot;pythonic&quot; way fails with NumPy arrays because NumPy tries to cast the array to an array of &lt;code&gt;bool&lt;/code&gt;s, and &lt;code&gt;if x&lt;/code&gt; tries to evaluate all of those &lt;code&gt;bool&lt;/code&gt;s at once for some kind of aggregate truth value.  But this doesn't make any sense, so you get a &lt;code&gt;ValueError&lt;/code&gt;:</source>
          <target state="translated">NumPyが配列を &lt;code&gt;bool&lt;/code&gt; の配列にキャストしようとするため、および &lt;code&gt;if x&lt;/code&gt; が何らかの &lt;code&gt;bool&lt;/code&gt; の真理値についてそれらのboolのすべてを一度に評価しようとすると、 「pythonic」の方法はNumPy配列で失敗します。 しかし、これは意味をなさないため、 &lt;code&gt;ValueError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="0a3f21db414612559e4bd0aa2e9d4ccdd7620a0b" translate="yes" xml:space="preserve">
          <source>The numpythonic way</source>
          <target state="translated">俗に言う</target>
        </trans-unit>
        <trans-unit id="839d95ab808bb10053fa88f4716855013b528654" translate="yes" xml:space="preserve">
          <source>The pythonic way to do it is from the &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008&quot;&gt;PEP 8 style guide&lt;/a&gt; (where &lt;strong&gt;Yes&lt;/strong&gt; means &amp;ldquo;recommended&amp;rdquo; and &lt;strong&gt;No&lt;/strong&gt; means &amp;ldquo;not recommended&amp;rdquo;):</source>
          <target state="translated">それを行うためのpythonicの方法は、 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008&quot;&gt;PEP 8スタイルガイドからです&lt;/a&gt; （ここで、 &lt;strong&gt;「はい」&lt;/strong&gt;は「推奨」を意味し、「 &lt;strong&gt;いいえ&lt;/strong&gt; 」は「非推奨」を意味します）。</target>
        </trans-unit>
        <trans-unit id="419ef69c944861f78388669cc2be094309f545d1" translate="yes" xml:space="preserve">
          <source>The second way is a &lt;strong&gt;&lt;code&gt;more pythonic&lt;/code&gt;&lt;/strong&gt; one. This method is an implicit way of checking and much more preferable than the previous one.</source>
          <target state="translated">2番目の方法は、 &lt;strong&gt; &lt;code&gt;more pythonic&lt;/code&gt; &lt;/strong&gt;的な方法です。 この方法は暗黙的なチェック方法であり、以前の方法よりもはるかに望ましい方法です。</target>
        </trans-unit>
        <trans-unit id="26bb1f3155a5dcb9fceb486c2448558698ce4333" translate="yes" xml:space="preserve">
          <source>The truth value of an empty list is &lt;code&gt;False&lt;/code&gt; whereas for a non-empty list it is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">空のリストの真理値は &lt;code&gt;False&lt;/code&gt; ですが、空でないリストの場合は &lt;code&gt;True&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bbc6e8440ee75ab717bf6ec8f427152001e12352" translate="yes" xml:space="preserve">
          <source>Then it must call the function, load &lt;code&gt;0&lt;/code&gt;, and do the equality comparison in Python (instead of with C):</source>
          <target state="translated">次に、関数を呼び出して &lt;code&gt;0&lt;/code&gt; をロードし、Pythonで（Cの代わりに）等価比較を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="d90a30ab848b090999fc31f8d7530affde230d5d" translate="yes" xml:space="preserve">
          <source>These are correct in their respective other languages. And this is even semantically correct in Python.</source>
          <target state="translated">これらはそれぞれの他の言語では正しいです。そして、これはPythonでは意味的にも正しいのです。</target>
        </trans-unit>
        <trans-unit id="e237e40349b5d41720ad35c29c2a146f51cf9485" translate="yes" xml:space="preserve">
          <source>This has the benefit of handling any contents of &lt;strong&gt;a&lt;/strong&gt;, while not requiring a specific check for emptiness.  If &lt;strong&gt;a&lt;/strong&gt; is empty, the dependent block will not execute and the interpreter will fall through to the next line.</source>
          <target state="translated">これには、空の特定のチェックを必要とせずに、のコンテンツを処理できるという利点があります。 &lt;strong&gt;a&lt;/strong&gt;が空の場合、依存ブロックは実行されず、インタープリターは次の行に進みます。</target>
        </trans-unit>
        <trans-unit id="e07f7e1c2e6c131a4dd992f68429d70bd4456992" translate="yes" xml:space="preserve">
          <source>This is an extension of &lt;code&gt;PyObject&lt;/code&gt; that adds the &lt;code&gt;ob_size&lt;/code&gt; field. This is only used for objects that have some notion of length. This type does not often appear in the Python/C API. It corresponds to the fields defined by the expansion of the &lt;code&gt;PyObject_VAR_HEAD&lt;/code&gt; macro.</source>
          <target state="translated">これは &lt;code&gt;ob_size&lt;/code&gt; フィールドを追加する &lt;code&gt;PyObject&lt;/code&gt; の拡張です。 これは、長さの概念を持つオブジェクトにのみ使用されます。 このタイプは、Python / C APIではあまり表示されません。 &lt;code&gt;PyObject_VAR_HEAD&lt;/code&gt; マクロの展開で定義されるフィールドに対応します 。</target>
        </trans-unit>
        <trans-unit id="834cb8e0db15a3974ebe92a788d932cf5c816ae7" translate="yes" xml:space="preserve">
          <source>This way it's 100% clear that &lt;code&gt;li&lt;/code&gt; is a sequence (list) and we want to test its size. My problem with &lt;code&gt;if not li: ...&lt;/code&gt; is that it gives the false impression that &lt;code&gt;li&lt;/code&gt; is a boolean variable.</source>
          <target state="translated">このようにして、 &lt;code&gt;li&lt;/code&gt; がシーケンス（リスト）であることが100％明確であり、そのサイズをテストする必要があります。 &lt;code&gt;if not li: ...&lt;/code&gt; 私の問題：... &lt;code&gt;li&lt;/code&gt; がブール変数であるという誤った印象を与えることです。</target>
        </trans-unit>
        <trans-unit id="517b32f316ce0d136fe88818f855b9745999ba35" translate="yes" xml:space="preserve">
          <source>This will make the &lt;code&gt;x.size&lt;/code&gt; check work in all cases I see on this page.</source>
          <target state="translated">これにより、このページに表示されるすべてのケースで &lt;code&gt;x.size&lt;/code&gt; チェックが機能します。</target>
        </trans-unit>
        <trans-unit id="166295003ca1870a3de65a50bfe6d0b14501234e" translate="yes" xml:space="preserve">
          <source>To check whether a list is empty or not you can use two following ways. But remember, we should avoid the way of explicitly checking for a type of sequence (it's a &lt;strong&gt;&lt;code&gt;less pythonic&lt;/code&gt;&lt;/strong&gt; way):</source>
          <target state="translated">リストが空かどうかを確認するには、次の2つの方法を使用できます。 ただし、シーケンスのタイプを明示的にチェックする方法は避ける必要があります（ &lt;strong&gt; &lt;code&gt;less pythonic&lt;/code&gt; &lt;/strong&gt;的な方法ではあり&lt;strong&gt;ません&lt;/strong&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d88775ff0c4e2103146fa814bf595e1bad3bd121" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;len&lt;/code&gt; can give unexpected results</source>
          <target state="translated">&lt;code&gt;len&lt;/code&gt; を使用すると、予期しない結果が生じる可能性があります</target>
        </trans-unit>
        <trans-unit id="3210b647602906055a2ea6630c8e3fee2353fdbe" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#truth-value-testing&quot;&gt;implicit booleanness&lt;/a&gt; of the empty &lt;code&gt;list&lt;/code&gt; is quite pythonic.</source>
          <target state="translated">空の &lt;code&gt;list&lt;/code&gt; &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#truth-value-testing&quot;&gt;暗黙のブール値&lt;/a&gt;を使用することは、かなりpythonicです。</target>
        </trans-unit>
        <trans-unit id="e4100216a9aee376fd77c24841324702e83c57b2" translate="yes" xml:space="preserve">
          <source>Very handy and useful.</source>
          <target state="translated">とても便利で重宝しています。</target>
        </trans-unit>
        <trans-unit id="bec8251989ae95f17e7917e7a4667d9b939024a6" translate="yes" xml:space="preserve">
          <source>We can see there's a bit of linear cost for each additional &lt;code&gt;not&lt;/code&gt; here. We want to see the costs, &lt;em&gt;ceteris paribus&lt;/em&gt;, that is, all else equal - where all else is minimized as far as possible:</source>
          <target state="translated">ここに &lt;code&gt;not&lt;/code&gt; 追加ごとに少し線形コストがあることがわかります。 コスト、 &lt;em&gt;ceteris paribus&lt;/em&gt; 、つまり他のすべてが等しい-他のすべてが可能な限り最小限に抑えられることを確認したいと思います。</target>
        </trans-unit>
        <trans-unit id="0a1d52cb17cca8e7191f36986558bb72f7957e50" translate="yes" xml:space="preserve">
          <source>We see that &lt;em&gt;either&lt;/em&gt; checking for length with the builtin function &lt;code&gt;len&lt;/code&gt; compared to &lt;code&gt;0&lt;/code&gt;&lt;em&gt;or&lt;/em&gt; checking against an empty list is &lt;strong&gt;much&lt;/strong&gt; less performant than using the builtin syntax of the language as documented.</source>
          <target state="translated">組み込み関数 &lt;code&gt;len&lt;/code&gt; を&lt;em&gt;使用&lt;/em&gt;して長さを &lt;code&gt;0&lt;/code&gt; と比較してチェックするか、空のリストをチェックする方が、ドキュメントに記載されている言語の組み込み構文を使用するよりもパフォーマンスが&lt;strong&gt;はるかに&lt;/strong&gt;低いことがわかります。</target>
        </trans-unit>
        <trans-unit id="93defcec033f02c7813b4fa2999f8fa8e135291c" translate="yes" xml:space="preserve">
          <source>We should expect that standard library code should be as performant and correct as possible. But why is that the case, and why do we need this guidance?</source>
          <target state="translated">私たちは、標準ライブラリのコードが可能な限りパフォーマンスが高く、正しいものであることを期待すべきです。しかし、なぜそうなるのか、なぜこのガイダンスが必要なのか。</target>
        </trans-unit>
        <trans-unit id="53f50b6170acffe67cc4616bcd8c695dc5c3e587" translate="yes" xml:space="preserve">
          <source>What brought me here is a special use-case: I actually wanted a &lt;em&gt;function&lt;/em&gt; to tell me if a list is empty or not. I wanted to avoid writing my own function or using a lambda-expression here (because it seemed like it should be simple enough):</source>
          <target state="translated">ここに私を連れてきたのは特別なユースケースです：私は実際にリストが空かどうかを&lt;em&gt;関数&lt;/em&gt;に教えてほしかったです。 自分の関数を記述したり、ここでラムダ式を使用したりすることは避けたかったのです（十分に単純なように見えたため）。</target>
        </trans-unit>
        <trans-unit id="6c52a1ca8670775a8c8a00491e8712ffcaca818c" translate="yes" xml:space="preserve">
          <source>What we can see here is that it makes little difference whether you pass in an actual &lt;code&gt;bool&lt;/code&gt; to the condition check or the list itself, and if anything, giving the list, as is, is faster.</source>
          <target state="translated">ここでわかるのは、実際の &lt;code&gt;bool&lt;/code&gt; を条件チェックに渡しても、リスト自体に渡してもほとんど違いがなく、どちらかと言えば、リストをそのまま渡す方が高速であることです。</target>
        </trans-unit>
        <trans-unit id="0a4d3c26f7312a3bcafab015f36e0c94e6e8659e" translate="yes" xml:space="preserve">
          <source>Why check at all?</source>
          <target state="translated">なぜ全くチェックしないのか?</target>
        </trans-unit>
        <trans-unit id="d77989c1e3c0e0ace735631597dc367ffdfa6f32" translate="yes" xml:space="preserve">
          <source>Why?</source>
          <target state="translated">Why?</target>
        </trans-unit>
        <trans-unit id="3ecc4c96e7de4be0cda6aa9f38dc351865be20e7" translate="yes" xml:space="preserve">
          <source>You can even try using bool() like this</source>
          <target state="translated">以下のように bool()を使ってみることもできます。</target>
        </trans-unit>
        <trans-unit id="f65dd7b083f4ea2c1ee4f439f364acdec6b47258" translate="yes" xml:space="preserve">
          <source>You can get away without the explicit type check, but only if the surrounding context already assures you that &lt;code&gt;a&lt;/code&gt; is a value of the types you're prepared to handle, or if you're sure that types you're not prepared to handle are going to raise errors (e.g., a &lt;code&gt;TypeError&lt;/code&gt; if you call &lt;code&gt;len&lt;/code&gt; on a value for which it's undefined) that you're prepared to handle. In general, the &quot;pythonic&quot; conventions seem to go this last way. Squeeze it like a duck and let it raise a DuckError if it doesn't know how to quack. You still have to &lt;em&gt;think&lt;/em&gt; about what type assumptions you're making, though, and whether the cases you're not prepared to handle properly really are going to error out in the right places. The Numpy arrays are a good example where just blindly relying on &lt;code&gt;len&lt;/code&gt; or the boolean typecast may not do precisely what you're expecting.</source>
          <target state="translated">明示的な型チェックがなくても回避できますが &lt;code&gt;a&lt;/code&gt; が処理する準備ができている型の値であることを周囲のコンテキストがすでに保証している場合、または処理する準備ができていない型が処理する準備ができているエラー（たとえば、未定義の値に対して &lt;code&gt;len&lt;/code&gt; を呼び出す場合は &lt;code&gt;TypeError&lt;/code&gt; ）が発生します。 一般的に、「pythonic」の慣習は、この最後の方法に行くようです。 カモのようにそれを絞って、いちゃつく方法がわからない場合はDuckErrorを発生させます。 ただし、どのようなタイプの仮定を行っているのか、適切に処理する準備ができていないケースが実際に適切な場所でエラーになるかどうかについて&lt;em&gt;考える&lt;/em&gt;必要があります。 Numpy配列は、やみくもに &lt;code&gt;len&lt;/code&gt; またはブール型キャストに依存しているだけで期待どおりの結果が得られない場合の良い例です。</target>
        </trans-unit>
        <trans-unit id="9083cd48fae65c5b68f6712180202c73821b23fa" translate="yes" xml:space="preserve">
          <source>You need to be careful with NumPy arrays, because other methods that work fine for &lt;code&gt;list&lt;/code&gt;s or other standard containers fail for NumPy arrays.  I explain why below, but in short, the &lt;a href=&quot;http://www.scipy.org/scipylib/faq.html#what-is-the-preferred-way-to-check-for-an-empty-zero-element-array&quot;&gt;preferred method&lt;/a&gt; is to use &lt;code&gt;size&lt;/code&gt;.</source>
          <target state="translated">NumPy配列では、 &lt;code&gt;list&lt;/code&gt; やその他の標準コンテナーで正常に機能する他のメソッドが失敗するため、NumPy配列には注意する必要があります。 以下で理由を説明しますが、簡単に言うと、 &lt;a href=&quot;http://www.scipy.org/scipylib/faq.html#what-is-the-preferred-way-to-check-for-an-empty-zero-element-array&quot;&gt;推奨される方法&lt;/a&gt;は &lt;code&gt;size&lt;/code&gt; を使用することです 。</target>
        </trans-unit>
        <trans-unit id="b7d227705c28851b3cabdba2c9c370a4f7063204" translate="yes" xml:space="preserve">
          <source>Your duckCollection should implement &lt;code&gt;__nonzero__&lt;/code&gt; or &lt;code&gt;__len__&lt;/code&gt; so the if a: will work without problems.</source>
          <target state="translated">duckCollectionは &lt;code&gt;__nonzero__&lt;/code&gt; または__len__を実装する必要があるため、if a：は問題なく動作します。</target>
        </trans-unit>
        <trans-unit id="e1f11fedb84b9948d72cba30d27c4ba1e5b96b6b" translate="yes" xml:space="preserve">
          <source>a little more practical:</source>
          <target state="translated">もう少し実用的に</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="5fa43287b1c5b62b65463b926344285e74e283b5" translate="yes" xml:space="preserve">
          <source>and shertest version:</source>
          <target state="translated">とシャアバージョン。</target>
        </trans-unit>
        <trans-unit id="83ab88ee561c2c3fbf9a72f4e64edd6d102bc31c" translate="yes" xml:space="preserve">
          <source>any empty mapping, for example, &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">空のマッピング（例： &lt;code&gt;{}&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="f2952616e90efb7a6dd44095c44dfdd2377bc3ab" translate="yes" xml:space="preserve">
          <source>any empty sequence, for example, &lt;code&gt;''&lt;/code&gt;, &lt;code&gt;()&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">空のシーケンス（例： &lt;code&gt;''&lt;/code&gt; 、 &lt;code&gt;()&lt;/code&gt; 、 &lt;code&gt;[]&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b131ef05b1826b4dcf14f5da963e3b8f3d60f6f6" translate="yes" xml:space="preserve">
          <source>constants defined to be false: &lt;code&gt;None&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">falseと定義されている定数： &lt;code&gt;None&lt;/code&gt; および &lt;code&gt;False&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aa71fa14fe89fc7eb25cd68186ad53611ebfd167" translate="yes" xml:space="preserve">
          <source>empty sequences and collections: &lt;code&gt;''&lt;/code&gt;, &lt;code&gt;()&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;{}&lt;/code&gt;, &lt;code&gt;set()&lt;/code&gt;, &lt;code&gt;range(0)&lt;/code&gt;</source>
          <target state="translated">空のシーケンスとコレクション： &lt;code&gt;''&lt;/code&gt; 、 &lt;code&gt;()&lt;/code&gt; 、 &lt;code&gt;[]&lt;/code&gt; 、 &lt;code&gt;{}&lt;/code&gt; 、 &lt;code&gt;set()&lt;/code&gt; 、 &lt;code&gt;range(0)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="054f2c8e08dfd096608d12043bbc8cd93bbd3d80" translate="yes" xml:space="preserve">
          <source>if you only want to accept instances of particular types (and their subtypes), or with:</source>
          <target state="translated">特定の型(とそのサブ型)のインスタンスのみを受け入れたい場合、または</target>
        </trans-unit>
        <trans-unit id="bbe92aa90ac3da927a82d780633d2c79550b5147" translate="yes" xml:space="preserve">
          <source>instances of user-defined classes, if the class defines a &lt;code&gt;__bool__()&lt;/code&gt; or &lt;code&gt;__len__()&lt;/code&gt; method, when that method returns the integer zero or bool value &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">ユーザー定義クラスのインスタンス &lt;code&gt;__bool__()&lt;/code&gt; クラスが__bool __（）または &lt;code&gt;__len__()&lt;/code&gt; メソッドを定義している場合、そのメソッドが整数のゼロまたはブール値 &lt;code&gt;False&lt;/code&gt; を返す場合。</target>
        </trans-unit>
        <trans-unit id="53cf26e91fa509e97555428c86572d99948c5513" translate="yes" xml:space="preserve">
          <source>or this:</source>
          <target state="translated">それともこれか</target>
        </trans-unit>
        <trans-unit id="5fe84e072cb8774215db86ddfc171c8aa9283127" translate="yes" xml:space="preserve">
          <source>produces expected</source>
          <target state="translated">期待値を生む</target>
        </trans-unit>
        <trans-unit id="bdb401ea8d165ea2005c10c5877c586d8207bf1a" translate="yes" xml:space="preserve">
          <source>returns 1, even though the array has zero elements.</source>
          <target state="translated">は、配列の要素が0であっても1を返します。</target>
        </trans-unit>
        <trans-unit id="9f03e5ffbf02bb878e6dd52843870f4e01cc42fb" translate="yes" xml:space="preserve">
          <source>the first test is in response to @Mike's answer, above. The third line could also be replaced with:</source>
          <target state="translated">最初のテストは上記の@Mikeさんの回答に対応しています。3行目も置き換えられます。</target>
        </trans-unit>
        <trans-unit id="a818933ef67b2d17d00dabdb02f08102734ba6d7" translate="yes" xml:space="preserve">
          <source>to check if the list is empty</source>
          <target state="translated">でリストが空かどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="113a8713eff230494f7adff7cabd13b33e7a718c" translate="yes" xml:space="preserve">
          <source>we could use a simple if else:</source>
          <target state="translated">単純な if else を使うことができます。</target>
        </trans-unit>
        <trans-unit id="75e6b798f41cc1b686d5e5e68f072d8fc897174b" translate="yes" xml:space="preserve">
          <source>which was voted -1. I'm not sure if that's because readers objected to the strategy or thought the answer wasn't helpful as presented. I'll pretend it was the latter, since---whatever counts as &quot;pythonic&quot;---this is the correct strategy. Unless you've already ruled out, or are prepared to handle cases where &lt;code&gt;a&lt;/code&gt; is, for example, &lt;code&gt;False&lt;/code&gt;, you need a test more restrictive than just &lt;code&gt;if not a:&lt;/code&gt;. You could use something like this:</source>
          <target state="translated">これは-1に投票されました。 それが読者が戦略に反対したか、提示された答えが役に立たないと思ったためか、私にはわかりません。 --pythonicとしてカウントされるものは何でも------これが正しい戦略なので、後者だと思います。 既に除外していない場合、または &lt;code&gt;a&lt;/code&gt; が &lt;code&gt;False&lt;/code&gt; などのケースを処理する準備ができている場合を除き 、 &lt;code&gt;if not a:&lt;/code&gt; よりもさらに厳しいテストが必要です 。 あなたはこのようなものを使うことができます：</target>
        </trans-unit>
        <trans-unit id="9c021d12abb7b3e2b39cca48ff8eeeb38bb02d18" translate="yes" xml:space="preserve">
          <source>will also pass for &lt;code&gt;None&lt;/code&gt; and other types of empty structures. If you truly want to check for an empty list, you can do this:</source>
          <target state="translated">&lt;code&gt;None&lt;/code&gt; およびその他のタイプの空の構造体も渡します。 空のリストを本当に確認したい場合は、次のようにできます。</target>
        </trans-unit>
        <trans-unit id="0e6f0e52997217d3b5a709de67763a194e319b26" translate="yes" xml:space="preserve">
          <source>zero of any numeric type, for example, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;0.0&lt;/code&gt;, &lt;code&gt;0j&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;0j&lt;/code&gt; など、任意の数値タイプのゼロ。</target>
        </trans-unit>
        <trans-unit id="9a325962fa4501e445c5fc397f589278bbc1b016" translate="yes" xml:space="preserve">
          <source>zero of any numeric type: &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;0.0&lt;/code&gt;, &lt;code&gt;0j&lt;/code&gt;, &lt;code&gt;Decimal(0)&lt;/code&gt;, &lt;code&gt;Fraction(0, 1)&lt;/code&gt;</source>
          <target state="translated">任意の数値型のゼロ： &lt;code&gt;0j&lt;/code&gt; 、 &lt;code&gt;Decimal(0)&lt;/code&gt; 、 &lt;code&gt;Fraction(0, 1)&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
