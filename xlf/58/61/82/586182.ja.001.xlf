<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/586182">
    <body>
      <group id="586182">
        <trans-unit id="667b0ed13255663dafe017a71b3a7a8189df18e7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://masteringjs.io/tutorials/fundamentals/array-splice&quot;&gt;&lt;code&gt;Array#splice()&lt;/code&gt;&lt;/a&gt; is the way to go, unless you really want to avoid mutating the array. Given 2 arrays &lt;code&gt;arr1&lt;/code&gt; and &lt;code&gt;arr2&lt;/code&gt;, here's how you would insert the contents of &lt;code&gt;arr2&lt;/code&gt; into &lt;code&gt;arr1&lt;/code&gt; after the first element:</source>
          <target state="translated">&lt;a href=&quot;https://masteringjs.io/tutorials/fundamentals/array-splice&quot;&gt; &lt;code&gt;Array#splice()&lt;/code&gt; &lt;/a&gt;を本当に避けたい場合を除き、 Array＃splice（）が適しています。 2つの配列 &lt;code&gt;arr1&lt;/code&gt; とarr2がある &lt;code&gt;arr2&lt;/code&gt; 、 arr2の内容を最初の要素の後に &lt;code&gt;arr1&lt;/code&gt; に挿入する方法を次に示します。</target>
        </trans-unit>
        <trans-unit id="729a1c55ee7a2a7823b6497476a9b016a28221c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arr.splice(index, 0, item);&lt;/code&gt; will insert &lt;code&gt;item&lt;/code&gt; into &lt;code&gt;arr&lt;/code&gt; at the specified index (deleting &lt;code&gt;0&lt;/code&gt; items first, that is, it's just an insert).</source>
          <target state="translated">&lt;code&gt;arr.splice(index, 0, item);&lt;/code&gt; 指定されたインデックスで &lt;code&gt;arr&lt;/code&gt; に &lt;code&gt;item&lt;/code&gt; を挿入します （最初に &lt;code&gt;0&lt;/code&gt; 項目を削除します。つまり、単なる挿入です）。</target>
        </trans-unit>
        <trans-unit id="caf243187fe6b18027f328eb42df3b89e9d8e6cd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;1. With multiple arguments and chaining support&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;1.複数の引数と連鎖サポートを使用&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3f2d359d3e2d868480f44df182f2394d1c5edd7f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;2. With array-type arguments merging and chaining support&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;2.配列型の引数のマージとチェーンのサポート&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fb9332801774221201342fa53990e401a706a8a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Append Multiple Element at a specific index&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;特定のインデックスに複数の要素を追加する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d1a8239920f281a041ac9ffa431d73371815fffe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Append Single Element at a specific index&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;特定のインデックスに単一要素を追加する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e676bd1d1023fdd59465ac8bb506ebd374d96104" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DEMO:&lt;/strong&gt;&lt;a href=&quot;http://jsfiddle.net/UPphH/&quot;&gt;http://jsfiddle.net/UPphH/&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;DEMO:&lt;/strong&gt;&lt;a href=&quot;http://jsfiddle.net/UPphH/&quot;&gt;http://jsfiddle.net/UPphH/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="88d579f187963377cfd2012ed4ceeee690c68fa8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here are two ways :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2つの方法があります。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f8e01739d5b6815e58b82ad6033855dbc821cb51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OR&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;OR&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ab3f3edd086a910ca55fa89cf44468663a46e6ee" translate="yes" xml:space="preserve">
          <source>A bit of an older thread, but I have to agree with Redu above because splice definitely has a bit of a confusing interface. And the response given by cdbajorin that &quot;it only returns an empty array when the second parameter is 0. If it's greater than 0, it returns the items removed from the array&quot; is, while accurate, proving the point. The function's intent is to splice or as said earlier by Jakob Keller, &quot;to join or connect, also to change. You have an established array that you are now changing which would involve adding or removing elements....&quot; Given that, the return value of the elements, if any, that were removed is awkward at best. And I 100% agree that this method could have been better suited to chaining if it had returned what seems natural, a new array with the spliced elements added. Then you could do things like [&quot;19&quot;, &quot;17&quot;].splice(1,0,&quot;18&quot;).join(&quot;...&quot;) or whatever you like with the returned array. The fact that it returns what was removed is just kinda nonsense IMHO. If the intention of the method was to &quot;cut out a set of elements&quot; and that was it's only intent, maybe. It seems like if I don't know what I'm cutting out already though, I probably have little reason to cut those elements out, doesn't it? It would be better if it behaved like concat, map, reduce, slice, etc where a new array is made from the existing array rather than mutating the existing array. Those are all chainable, and that IS a significant issue. It's rather common to chain array manipulation. Seems like the language needs to go one or the other direction and try to stick to it as much as possible. Javascript being functional and less declarative, it just seems like a strange deviation from the norm.</source>
          <target state="translated">少し古いスレッドですが、私は上記のReduに同意しなければなりません。そして、cdbajorin によって与えられた「2 番目のパラメータが 0 のときだけ空の配列を返します。 0 より大きい場合は、配列から削除された項目を返します」という回答は、正確ではありますが、要点を証明しています。この関数の意図は、先ほどヤコブ・ケラーが言ったように、「結合したり接続したり、変更したりすること」を目的としています。あなたが今変更しようとしているのは、要素を追加したり削除したりすることを含む、確立された配列です。それを考えると、削除された要素の戻り値は、もしあれば、せいぜい厄介なものになります。そして、もしこのメソッドが自然と思われるものを返し、スプライスされた要素が追加された新しい配列を返すのであれば、このメソッドはチェーン化にもっと適していたかもしれないということに100%同意します。そうすれば、[&quot;19&quot;,&quot;17&quot;].splice(1,0,&quot;18&quot;).join(&quot;....&quot;)のようなことができます。削除されたものを返すという事実は、IMHOではナンセンスだと思います。メソッドの意図が「要素の集合を切り取る」ということだけで、それが唯一の意図であったならば、そうかもしれません。でも、何を切り取っているのかわからないのであれば、その要素を切り取る理由はほとんどないのではないでしょうか?concat,map,reduce,slice などのように、既存の配列を変異させるのではなく、既存の配列から新しい配列を作るような振る舞いにした方が良いと思います。これらはすべてチェイン可能であり、これは重要な問題です。配列操作を連鎖させることはむしろ一般的です。言語はどちらか一方の方向に進み、可能な限りそれに固執する必要があるように思えます。機能的で宣言的ではないJavascriptは、標準からの奇妙な逸脱のように思えます。</target>
        </trans-unit>
        <trans-unit id="8b661ad9df8d48ec23c8d247f0ccaf9817d934bb" translate="yes" xml:space="preserve">
          <source>Also here are some functions to illustrate both examples:</source>
          <target state="translated">また、両方の例を説明するためにいくつかの機能をご紹介します。</target>
        </trans-unit>
        <trans-unit id="dc44bfeb28806e966991b987afb7c9fd496cb75a" translate="yes" xml:space="preserve">
          <source>And then I call it below.</source>
          <target state="translated">そして、それを下に呼ぶ。</target>
        </trans-unit>
        <trans-unit id="f22c8026d6f436a9ed9b0a55c38568fa125ff9a8" translate="yes" xml:space="preserve">
          <source>And then iterate the object, placing the newly created temporary objects into the desired locations in the array without really any &quot;sorting&quot; taking place.</source>
          <target state="translated">そして、オブジェクトを繰り返し処理して、新しく作成された一時オブジェクトを、実際には何の「ソート」も行わずに、配列内の希望の場所に配置します。</target>
        </trans-unit>
        <trans-unit id="29928d781cdadf175da5204e6085c8cab9378f65" translate="yes" xml:space="preserve">
          <source>And this is how you use the functions:</source>
          <target state="translated">そして、このような機能の使い方をするのです。</target>
        </trans-unit>
        <trans-unit id="90e33061a75f32f6c6ad98e6d9f5619a7e9e8f57" translate="yes" xml:space="preserve">
          <source>Another possible solution, with usage of &lt;code&gt;Array#reduce&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Array#reduce&lt;/code&gt; を使用した別の可能な解決策。</target>
        </trans-unit>
        <trans-unit id="860a292478931fd5d82e63ffa3f372929a4736fd" translate="yes" xml:space="preserve">
          <source>Anyone who's still having issues with this one and have tried all the options above and never got it. I'm sharing my solution, this is to take consideration that you don't wan't to explicitly state the properties of your object vs the array.</source>
          <target state="translated">まだこの問題を抱えていて、上記のすべてのオプションを試してみたが、それを得ることができなかった人。私は私の解決策を共有していますが、これは、オブジェクトと配列のプロパティを明示的に記述したくないことを考慮しています。</target>
        </trans-unit>
        <trans-unit id="475c9e5beaff7b5f3da1aa72ac29cc8b84a5af24" translate="yes" xml:space="preserve">
          <source>Custom array &lt;code&gt;insert&lt;/code&gt; methods</source>
          <target state="translated">カスタム配列 &lt;code&gt;insert&lt;/code&gt; メソッド</target>
        </trans-unit>
        <trans-unit id="4bcff3f268979530320804f012139bd11e229259" translate="yes" xml:space="preserve">
          <source>Even though this has been answered already, I'm adding this note for an alternative approach.</source>
          <target state="translated">すでに回答されているにもかかわらず、別のアプローチのためにこの注意書きを追加します。</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">スニペットを展開</target>
        </trans-unit>
        <trans-unit id="d275542cdfe9842b3f1c307576e12a7298a3a12a" translate="yes" xml:space="preserve">
          <source>Finally here is a jsFiddle so you can see it for youself: &lt;a href=&quot;http://jsfiddle.net/luisperezphd/Wc8aS/&quot;&gt;http://jsfiddle.net/luisperezphd/Wc8aS/&lt;/a&gt;</source>
          <target state="translated">最後にここにjsFiddleがありますので、あなた自身でそれを見ることができます： &lt;a href=&quot;http://jsfiddle.net/luisperezphd/Wc8aS/&quot;&gt;http&lt;/a&gt; ://jsfiddle.net/luisperezphd/Wc8aS/</target>
        </trans-unit>
        <trans-unit id="3aee9f665a2dd3d71957d03efd86a6ff62c93b90" translate="yes" xml:space="preserve">
          <source>First the source object, a JSONB string retrieved from PostgreSQL. I wanted to have it sorted by the &quot;order&quot; property in each child object.</source>
          <target state="translated">まずソースオブジェクト、PostgreSQLから取得したJSONBの文字列。これを各子オブジェクトの &quot;order &quot;プロパティでソートさせたいと思いました。</target>
        </trans-unit>
        <trans-unit id="90a693afb1f86033567ce0bfdefafca6a23c4ffe" translate="yes" xml:space="preserve">
          <source>For proper functional programming and chaining purposes an invention of &lt;code&gt;Array.prototype.insert()&lt;/code&gt; is essential. Actually splice could have been perfect if it had returned the mutated array instead of a totally meaningless empty array. So here it goes</source>
          <target state="translated">適切な関数型プログラミングと連鎖の目的には、 &lt;code&gt;Array.prototype.insert()&lt;/code&gt; の発明が不可欠です。 実際には、完全に無意味な空の配列ではなく、変異した配列を返していれば、スプライスは完璧だったかもしれません。 だからここに行く</target>
        </trans-unit>
        <trans-unit id="1f015ef38b60a9b45df796850fe8cfba1208cafc" translate="yes" xml:space="preserve">
          <source>Here's a working function that I uses in one of my application.</source>
          <target state="translated">私のアプリケーションの一つで使用しているワーキング関数はこちらです。</target>
        </trans-unit>
        <trans-unit id="36d0da20006443cc265f16731b7449e6ef344e79" translate="yes" xml:space="preserve">
          <source>How to insert an item into an array at a specific index (JavaScript)</source>
          <target state="translated">特定のインデックスで配列に項目を挿入する方法(JavaScript)</target>
        </trans-unit>
        <trans-unit id="b9d1ed6b75c812d8077c31159668ba9b29f4be4d" translate="yes" xml:space="preserve">
          <source>I am looking for a JavaScript array insert method, in the style of:</source>
          <target state="translated">のスタイルで、JavaScriptの配列挿入メソッドを探しています。</target>
        </trans-unit>
        <trans-unit id="544bacd74da4af30d6efbdb2da5a621c4550018d" translate="yes" xml:space="preserve">
          <source>I recommend using pure &lt;strong&gt;JavaScript&lt;/strong&gt; in this case, also there is no insert method in JavaScript, but we have a method which is a  &lt;strong&gt;built-in Array&lt;/strong&gt; method which does the job for you, it's called &lt;strong&gt;splice&lt;/strong&gt;...</source>
          <target state="translated">この場合は純粋な&lt;strong&gt;JavaScript&lt;/strong&gt;を使用することをお勧めし&lt;strong&gt;ます。JavaScript&lt;/strong&gt;には挿入メソッドもありませんが、 &lt;strong&gt;組み込みのArray&lt;/strong&gt;メソッドである、 &lt;strong&gt;splice&lt;/strong&gt;と呼ばれる機能を備えています。</target>
        </trans-unit>
        <trans-unit id="2756fa3617e8bc1f2910a304bcab75e80de7abe2" translate="yes" xml:space="preserve">
          <source>I tried this and it is working fine!</source>
          <target state="translated">これを試してみたところ、問題なく動作しています!</target>
        </trans-unit>
        <trans-unit id="74cc64f9e5c4d9804b820e8b44aa62d33a285741" translate="yes" xml:space="preserve">
          <source>I wanted to place a &lt;strong&gt;known number&lt;/strong&gt; of items into an array, into specific positions, as they come off of an &quot;associative array&quot; (i.e. an object) which by definition is not guaranteed to be in a sorted order. I wanted the resulting array to be an array of objects, but the objects to be in a specific order in the array since an array guarantees their order. So I did this.</source>
          <target state="translated">&lt;strong&gt;既知の数&lt;/strong&gt;の項目を配列、特定の位置に配置したかったのは、それらが「連想配列」（つまり、オブジェクト）から派生するためです。これは、定義上、ソートされた順序であることが保証されていません。 結果の配列はオブジェクトの配列にしたかったのですが、配列はオブジェクトの順序を保証するため、オブジェクトは配列内の特定の順序になっています。 だから私はこれをやった。</target>
        </trans-unit>
        <trans-unit id="3f236306597464fd9a64d527b52af6c49b59f53a" translate="yes" xml:space="preserve">
          <source>If you are concerned about mutating the array (for example, if using Immutable.js), you can instead use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&quot;&gt;&lt;code&gt;slice()&lt;/code&gt;&lt;/a&gt;, not to be confused with &lt;code&gt;splice()&lt;/code&gt; with a 'p'.</source>
          <target state="translated">配列の変更が心配な場合（たとえば、Immutable.jsを使用している場合）、代わりに&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&quot;&gt; &lt;code&gt;slice()&lt;/code&gt; を&lt;/a&gt;使用できます。pを指定した &lt;code&gt;splice()&lt;/code&gt; と混同しないでください。</target>
        </trans-unit>
        <trans-unit id="483a172849c1d36e36b12cb5d32a0f9a38998391" translate="yes" xml:space="preserve">
          <source>If you want to insert multiple elements into an array at once check out this Stack Overflow answer: &lt;a href=&quot;https://stackoverflow.com/questions/1348178/a-better-way-to-splice-an-arrray-into-an-array-in-javascript&quot;&gt;A better way to splice an array into an array in javascript&lt;/a&gt;</source>
          <target state="translated">複数の要素を配列に一度に挿入したい場合は、このスタックオーバーフローの回答を確認してください&lt;a href=&quot;https://stackoverflow.com/questions/1348178/a-better-way-to-splice-an-arrray-into-an-array-in-javascript&quot;&gt;。JavaScriptで配列を配列にスプライスするより良い方法&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e643adfb3b1686303f90df03cbb1b3659395dfc0" translate="yes" xml:space="preserve">
          <source>In this example we will create an array and add an element to it into index 2:</source>
          <target state="translated">この例では、配列を作成し、インデックス2に要素を追加します。</target>
        </trans-unit>
        <trans-unit id="6f820d1d8895a41be8c8d35e6ba81be89e5a5645" translate="yes" xml:space="preserve">
          <source>Index is the position where you want to insert or delete the element.
0 i.e. the second parameters defines the number of element from the index to be removed
item are the new entries which you want to make in array. It can be one or more than one.</source>
          <target state="translated">インデックスは要素を挿入または削除したい位置を指定します。0、つまり2番目のパラメータはインデックスから削除する要素の数を定義します。項目は1つでも複数でも構いません。</target>
        </trans-unit>
        <trans-unit id="ddfa21ff23ab326ceea7c37b06738d301327f869" translate="yes" xml:space="preserve">
          <source>It can insert multiple elements (as native &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt; does) and supports chaining:</source>
          <target state="translated">複数の要素を挿入でき（ネイティブ&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt; &lt;code&gt;splice&lt;/code&gt; &lt;/a&gt;同様）、連鎖をサポートします。</target>
        </trans-unit>
        <trans-unit id="5cfc95d36d424d2cda631d31b6c12ba8657a29cd" translate="yes" xml:space="preserve">
          <source>It can merge arrays from the arguments with the given array and also supports chaining:</source>
          <target state="translated">引数の配列を与えられた配列にマージすることができ、チェイニングもサポートしています。</target>
        </trans-unit>
        <trans-unit id="7ced62006201ed658eec69bc5e9178843c7f41e3" translate="yes" xml:space="preserve">
          <source>It will return 3, but if we check the arr now, we have:</source>
          <target state="translated">3が返ってきますが、今、arrを確認すると、あります。</target>
        </trans-unit>
        <trans-unit id="7975cd93b61d5fb446d1b4a82d208acb79729b34" translate="yes" xml:space="preserve">
          <source>Let's see what we have done...</source>
          <target state="translated">何をしてきたのか見てみよう...。</target>
        </trans-unit>
        <trans-unit id="857e8992ae0915ef69b55ae76a6431d99d285563" translate="yes" xml:space="preserve">
          <source>Let's see what's &lt;strong&gt;splice()&lt;/strong&gt;...</source>
          <target state="translated">&lt;strong&gt;splice（）と&lt;/strong&gt;は何かを見てみましょう...</target>
        </trans-unit>
        <trans-unit id="d6fa581ef677ef0031b695752077bdee04f3ba96" translate="yes" xml:space="preserve">
          <source>OK, imagine we have this array below:</source>
          <target state="translated">以下の配列を想像してみてください。</target>
        </trans-unit>
        <trans-unit id="c5af1b321a254fe233907533db7dfbf1fee498ba" translate="yes" xml:space="preserve">
          <source>Other than splice, you can use this approach which will not mutate the original array, but will create a new array with the added item. You should usually avoid mutation whenever possible. I'm using ES6 spread operator here.</source>
          <target state="translated">スプライス以外では、元の配列を突然変異させず、追加された項目で新しい配列を作成するこの方法を使うことができます。通常は可能な限り突然変異を避けるべきです。ここではES6のスプレッド演算子を使っています。</target>
        </trans-unit>
        <trans-unit id="a6afed8c49e250a1e5c5d1bf8e8aa8ab7f19d1bf" translate="yes" xml:space="preserve">
          <source>Preferably in jQuery, but any JavaScript implementation will do at this point.</source>
          <target state="translated">できればjQueryでの実装が望ましいですが、この時点ではどのようなJavaScriptの実装でも問題ありません。</target>
        </trans-unit>
        <trans-unit id="6c674ddcd6507d4a64241e92ef6ff9ade6f5fe7b" translate="yes" xml:space="preserve">
          <source>Since the number of nodes in the object is known, I first create an array with the specified length:</source>
          <target state="translated">オブジェクトのノード数がわかっているので、まず指定した長さの配列を作成します。</target>
        </trans-unit>
        <trans-unit id="31a3e983b6ca43e81655bdbe27f9741aa0ca03a7" translate="yes" xml:space="preserve">
          <source>So at this way we can return a new array (will be a cool functional way - more much better than use push or splice) with the element inserted at index, and if the index is greater than the length of the array it will be inserted at the end.</source>
          <target state="translated">この方法では、新しい配列を返すことができます(クールな機能的な方法になります-pushやspliceを使用するよりもはるかに良い)要素をインデックスに挿入し、インデックスが配列の長さよりも大きい場合は最後に挿入されます。</target>
        </trans-unit>
        <trans-unit id="0dae2c63be0a01f5bc2a528ce68677498e296bf2" translate="yes" xml:space="preserve">
          <source>So far, so good, but how we can add a new element to array using splice?
Let's put back 3 in the arr...</source>
          <target state="translated">ここまでは順調ですが、スプライスを使って配列に新しい要素を追加するにはどうすればいいのでしょうか?3を配列に戻そう...</target>
        </trans-unit>
        <trans-unit id="2bd9605e48af5f626917de2c417f7beaa48d7cf6" translate="yes" xml:space="preserve">
          <source>Taking profit of reduce method as following:</source>
          <target state="translated">以下のようにリデュース法の利益を取る。</target>
        </trans-unit>
        <trans-unit id="d4607f5f4d353df616911ce44cbb32ce72dbbf7a" translate="yes" xml:space="preserve">
          <source>The splice() method changes the contents of an array by removing
  existing elements and/or adding new elements.</source>
          <target state="translated">splice()メソッドは、既存の要素を削除したり、新しい要素を追加したりして配列の内容を変更します。</target>
        </trans-unit>
        <trans-unit id="62a2fb04bbb69e406cad00528937349a39da9047" translate="yes" xml:space="preserve">
          <source>Then you can use it like:</source>
          <target state="translated">ならば、こんな風に使えばいいのです。</target>
        </trans-unit>
        <trans-unit id="08ba34b2203e8ccf4cdba32251561d21147d239d" translate="yes" xml:space="preserve">
          <source>This can be used to add more than one item by tweaking the function a bit to use the rest operator for the new items, and spread that in the returned result as well</source>
          <target state="translated">これは、新しい項目に rest 演算子を使用するように関数を少しいじることで、複数の項目を追加することができます。</target>
        </trans-unit>
        <trans-unit id="fa479ef2769d6bf952621237f3344b2008c0f730" translate="yes" xml:space="preserve">
          <source>This checks if item exit</source>
          <target state="translated">これは、アイテムが終了するかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="d6e6345faa235e30eb53880b945a2375948867ac" translate="yes" xml:space="preserve">
          <source>This is a combination of iterating the reference array and comparing it to the object you wanted to check, convert both of them into a string then iterated if it matched. Then you can just count. This can be improved but this is where I settled. Hope this helps.</source>
          <target state="translated">これは、参照配列をイテレートして、チェックしたいオブジェクトと比較し、両方を文字列に変換して、一致したらイテレートするという組み合わせです。あとはカウントするだけです。これを改善することもできますが、私はここに落ち着きました。お役に立てれば幸いです。</target>
        </trans-unit>
        <trans-unit id="93cd6d38f8c570772e3855142c42f20553973157" translate="yes" xml:space="preserve">
          <source>This is showing how each item in splice work:</source>
          <target state="translated">これは、スプライスの各項目がどのように動作するかを示しています。</target>
        </trans-unit>
        <trans-unit id="42bf72c68d10903f64ee4fe7096ad4643cacad67" translate="yes" xml:space="preserve">
          <source>We can remove &lt;code&gt;3&lt;/code&gt; like this:</source>
          <target state="translated">次のように &lt;code&gt;3&lt;/code&gt; つを削除できます。</target>
        </trans-unit>
        <trans-unit id="1018f207660dbe71bd0035087955b6b126503d46" translate="yes" xml:space="preserve">
          <source>We use &lt;strong&gt;splice&lt;/strong&gt; again, but this time for the second argument, we pass &lt;strong&gt;0&lt;/strong&gt;, means we want to delete no item, but at the same time, we add third argument which is 3 that will be added at second index...</source>
          <target state="translated">もう一度&lt;strong&gt;スプライス&lt;/strong&gt;を使用しますが、今回は2番目の引数に&lt;strong&gt;0&lt;/strong&gt;を渡し&lt;strong&gt;ます&lt;/strong&gt; 。つまり、アイテムを削除しないことを意味しますが、同時に3番目の引数である3を追加します。これは2番目のインデックスに追加されます...</target>
        </trans-unit>
        <trans-unit id="d98ce89b0f0cf820b708648a8ffaceb787909d98" translate="yes" xml:space="preserve">
          <source>Well ok the above with the &lt;code&gt;Array.prototype.splice()&lt;/code&gt; one mutates the original array and some might complain like &quot;you shouldn't modify what doesn't belong to you&quot; and that might turn out to be right as well. So for the public welfare i would like to give another &lt;code&gt;Array.prototype.insert()&lt;/code&gt; which doesn't mutate the original array. Here it goes;</source>
          <target state="translated">上記の &lt;code&gt;Array.prototype.splice()&lt;/code&gt; を使用して元の配列を変更すると、「自分のものではないものを変更してはならない」などと文句を言う人もいるかもしれません。 公共の福祉のために、元の配列を変更しない別の &lt;code&gt;Array.prototype.insert()&lt;/code&gt; を提供したいと思います。 ここに行く;</target>
        </trans-unit>
        <trans-unit id="da66e27bf198c132cf6b03f5e1cc639501169ba7" translate="yes" xml:space="preserve">
          <source>What you want is the &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; function on the native array object.</source>
          <target state="translated">必要なのは、ネイティブ配列オブジェクトの&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt; &lt;code&gt;splice&lt;/code&gt; &lt;/a&gt;&lt;/strong&gt;関数です。</target>
        </trans-unit>
        <trans-unit id="d06b6746be798753f00148abc36fa3d6b8b2852b" translate="yes" xml:space="preserve">
          <source>Which will delete &lt;strong&gt;2 items&lt;/strong&gt; at index 2, then add &lt;strong&gt;3&lt;/strong&gt; at index 2 and result will be:</source>
          <target state="translated">インデックス2の&lt;strong&gt;2つのアイテム&lt;/strong&gt;を削除し、インデックス2に&lt;strong&gt;3&lt;/strong&gt;を追加すると、結果は次のようになります。</target>
        </trans-unit>
        <trans-unit id="ede543f3ddd43ced64afdab4b612462b1b0e1d9e" translate="yes" xml:space="preserve">
          <source>You can implement the &lt;code&gt;Array.insert&lt;/code&gt; method by doing this:</source>
          <target state="translated">&lt;code&gt;Array.insert&lt;/code&gt; メソッドを実装するには、 次のようにします。</target>
        </trans-unit>
        <trans-unit id="11135937a075ca3187dd1eeb96ceb6b48057a2f9" translate="yes" xml:space="preserve">
          <source>You should be aware, that we can &lt;strong&gt;delete&lt;/strong&gt; and &lt;strong&gt;add&lt;/strong&gt; at the same time, for example now we can do:</source>
          <target state="translated">&lt;strong&gt;削除&lt;/strong&gt;と&lt;strong&gt;追加&lt;/strong&gt;を同時に行うことができることに注意して&lt;strong&gt;ください。&lt;/strong&gt;たとえば、次のようにできます。</target>
        </trans-unit>
        <trans-unit id="e764621fb804a516c11bae65dd7002a1111c567c" translate="yes" xml:space="preserve">
          <source>array.splice(start, deleteCount, item1, item2, item3 ...)</source>
          <target state="translated">array.splice(start,deleteCount,item1,item2,item3 ...)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
