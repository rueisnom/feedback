<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/586182">
    <body>
      <group id="586182">
        <trans-unit id="667b0ed13255663dafe017a71b3a7a8189df18e7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://masteringjs.io/tutorials/fundamentals/array-splice&quot;&gt;&lt;code&gt;Array#splice()&lt;/code&gt;&lt;/a&gt; is the way to go, unless you really want to avoid mutating the array. Given 2 arrays &lt;code&gt;arr1&lt;/code&gt; and &lt;code&gt;arr2&lt;/code&gt;, here's how you would insert the contents of &lt;code&gt;arr2&lt;/code&gt; into &lt;code&gt;arr1&lt;/code&gt; after the first element:</source>
          <target state="translated">&lt;a href=&quot;https://masteringjs.io/tutorials/fundamentals/array-splice&quot;&gt; &lt;code&gt;Array#splice()&lt;/code&gt; &lt;/a&gt; - путь, если только вы действительно не хотите избежать изменения массива. Учитывая 2 массива &lt;code&gt;arr1&lt;/code&gt; и &lt;code&gt;arr2&lt;/code&gt; , вот как вы должны вставить содержимое &lt;code&gt;arr2&lt;/code&gt; в &lt;code&gt;arr1&lt;/code&gt; после первого элемента:</target>
        </trans-unit>
        <trans-unit id="729a1c55ee7a2a7823b6497476a9b016a28221c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arr.splice(index, 0, item);&lt;/code&gt; will insert &lt;code&gt;item&lt;/code&gt; into &lt;code&gt;arr&lt;/code&gt; at the specified index (deleting &lt;code&gt;0&lt;/code&gt; items first, that is, it's just an insert).</source>
          <target state="translated">&lt;code&gt;arr.splice(index, 0, item);&lt;/code&gt; вставит &lt;code&gt;item&lt;/code&gt; в &lt;code&gt;arr&lt;/code&gt; по указанному индексу (сначала удаляет &lt;code&gt;0&lt;/code&gt; элементов, то есть это просто вставка).</target>
        </trans-unit>
        <trans-unit id="caf243187fe6b18027f328eb42df3b89e9d8e6cd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;1. With multiple arguments and chaining support&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;1. С несколькими аргументами и поддержкой цепочки&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3f2d359d3e2d868480f44df182f2394d1c5edd7f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;2. With array-type arguments merging and chaining support&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;2. С поддержкой слияния и создания цепочек аргументов&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fb9332801774221201342fa53990e401a706a8a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Append Multiple Element at a specific index&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Добавить несколько элементов по определенному индексу&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d1a8239920f281a041ac9ffa431d73371815fffe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Append Single Element at a specific index&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Добавить отдельный элемент по определенному индексу&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e676bd1d1023fdd59465ac8bb506ebd374d96104" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DEMO:&lt;/strong&gt;&lt;a href=&quot;http://jsfiddle.net/UPphH/&quot;&gt;http://jsfiddle.net/UPphH/&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;DEMO:&lt;/strong&gt;&lt;a href=&quot;http://jsfiddle.net/UPphH/&quot;&gt;http://jsfiddle.net/UPphH/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="88d579f187963377cfd2012ed4ceeee690c68fa8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here are two ways :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Вот два способа:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f8e01739d5b6815e58b82ad6033855dbc821cb51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OR&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;OR&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ab3f3edd086a910ca55fa89cf44468663a46e6ee" translate="yes" xml:space="preserve">
          <source>A bit of an older thread, but I have to agree with Redu above because splice definitely has a bit of a confusing interface. And the response given by cdbajorin that &quot;it only returns an empty array when the second parameter is 0. If it's greater than 0, it returns the items removed from the array&quot; is, while accurate, proving the point. The function's intent is to splice or as said earlier by Jakob Keller, &quot;to join or connect, also to change. You have an established array that you are now changing which would involve adding or removing elements....&quot; Given that, the return value of the elements, if any, that were removed is awkward at best. And I 100% agree that this method could have been better suited to chaining if it had returned what seems natural, a new array with the spliced elements added. Then you could do things like [&quot;19&quot;, &quot;17&quot;].splice(1,0,&quot;18&quot;).join(&quot;...&quot;) or whatever you like with the returned array. The fact that it returns what was removed is just kinda nonsense IMHO. If the intention of the method was to &quot;cut out a set of elements&quot; and that was it's only intent, maybe. It seems like if I don't know what I'm cutting out already though, I probably have little reason to cut those elements out, doesn't it? It would be better if it behaved like concat, map, reduce, slice, etc where a new array is made from the existing array rather than mutating the existing array. Those are all chainable, and that IS a significant issue. It's rather common to chain array manipulation. Seems like the language needs to go one or the other direction and try to stick to it as much as possible. Javascript being functional and less declarative, it just seems like a strange deviation from the norm.</source>
          <target state="translated">Немного старый поток,но я должен согласиться с Redu выше,потому что сращивание определенно имеет немного запутанный интерфейс.А ответ cdbajorin о том,что &quot;он возвращает пустой массив только тогда,когда второй параметр равен 0.Если он больше 0,то он возвращает элементы,удаленные из массива&quot;,является,хотя и точным,доказательством этого.Функция предназначена для сращивания или,как говорил ранее Якоб Келлер,&quot;для сращивания или соединения,также для изменения&quot;.У вас есть установленный массив,который вы сейчас меняете,и который будет включать в себя добавление или удаление элементов....&quot;.Учитывая это,возвращаемое значение элементов,если таковые имеются,которые были удалены,в лучшем случае неудобно.И я на 100% согласен с тем,что этот метод мог бы лучше подойти для цепочки,если бы он вернул то,что кажется естественным,новый массив с добавленными сращиваемыми элементами.Тогда можно было бы делать такие вещи,как [&quot;19&quot;,&quot;17&quot;].splice(1,0,&quot;18&quot;).join(&quot;...)или что угодно с возвращаемым массивом.Тот факт,что он возвращает то,что было удалено-это просто чушь IMHO.Если намерение метода состояло в том,чтобы &quot;вырезать набор элементов&quot;,то,возможно,это было единственной целью.Похоже,что если я уже не знаю,что вырезаю,то,наверное,у меня мало причин вырезать эти элементы,не так ли? Было бы лучше,если бы он вел себя как concat,map,reduce,slice и т.д.,где новый массив делается из существующего,а не мутировал бы существующий массив.Все это цепочки,и это является существенной проблемой.Это довольно часто встречается при манипулировании цепными массивами.Похоже,что язык должен идти в том или ином направлении и стараться придерживаться его как можно больше.Яваскрипт,будучи функциональным и менее декларативным,просто кажется странным отклонением от нормы.</target>
        </trans-unit>
        <trans-unit id="8b661ad9df8d48ec23c8d247f0ccaf9817d934bb" translate="yes" xml:space="preserve">
          <source>Also here are some functions to illustrate both examples:</source>
          <target state="translated">Также здесь приведены некоторые функции для иллюстрации обоих примеров:</target>
        </trans-unit>
        <trans-unit id="dc44bfeb28806e966991b987afb7c9fd496cb75a" translate="yes" xml:space="preserve">
          <source>And then I call it below.</source>
          <target state="translated">А потом я называю это внизу.</target>
        </trans-unit>
        <trans-unit id="f22c8026d6f436a9ed9b0a55c38568fa125ff9a8" translate="yes" xml:space="preserve">
          <source>And then iterate the object, placing the newly created temporary objects into the desired locations in the array without really any &quot;sorting&quot; taking place.</source>
          <target state="translated">А затем выполнить итерацию объекта,помещая вновь созданные временные объекты в нужные места в массиве без реальной &quot;сортировки&quot;.</target>
        </trans-unit>
        <trans-unit id="29928d781cdadf175da5204e6085c8cab9378f65" translate="yes" xml:space="preserve">
          <source>And this is how you use the functions:</source>
          <target state="translated">И вот как вы используете функции:</target>
        </trans-unit>
        <trans-unit id="90e33061a75f32f6c6ad98e6d9f5619a7e9e8f57" translate="yes" xml:space="preserve">
          <source>Another possible solution, with usage of &lt;code&gt;Array#reduce&lt;/code&gt;.</source>
          <target state="translated">Другое возможное решение, с использованием &lt;code&gt;Array#reduce&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="860a292478931fd5d82e63ffa3f372929a4736fd" translate="yes" xml:space="preserve">
          <source>Anyone who's still having issues with this one and have tried all the options above and never got it. I'm sharing my solution, this is to take consideration that you don't wan't to explicitly state the properties of your object vs the array.</source>
          <target state="translated">Любой,у кого до сих пор есть проблемы с этим,кто перепробовал все вышеперечисленные варианты и никогда не получал их.Я делюсь своим решением,это для того,чтобы учесть,что вы не хотите явно указывать свойства вашего объекта против массива.</target>
        </trans-unit>
        <trans-unit id="475c9e5beaff7b5f3da1aa72ac29cc8b84a5af24" translate="yes" xml:space="preserve">
          <source>Custom array &lt;code&gt;insert&lt;/code&gt; methods</source>
          <target state="translated">Пользовательские методы &lt;code&gt;insert&lt;/code&gt; массива</target>
        </trans-unit>
        <trans-unit id="4bcff3f268979530320804f012139bd11e229259" translate="yes" xml:space="preserve">
          <source>Even though this has been answered already, I'm adding this note for an alternative approach.</source>
          <target state="translated">Несмотря на то,что на этот вопрос уже был дан ответ,я добавляю эту записку для альтернативного подхода.</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Расширить фрагмент</target>
        </trans-unit>
        <trans-unit id="d275542cdfe9842b3f1c307576e12a7298a3a12a" translate="yes" xml:space="preserve">
          <source>Finally here is a jsFiddle so you can see it for youself: &lt;a href=&quot;http://jsfiddle.net/luisperezphd/Wc8aS/&quot;&gt;http://jsfiddle.net/luisperezphd/Wc8aS/&lt;/a&gt;</source>
          <target state="translated">Наконец, вот jsFiddle, так что вы можете увидеть его сами: &lt;a href=&quot;http://jsfiddle.net/luisperezphd/Wc8aS/&quot;&gt;http://jsfiddle.net/luisperezphd/Wc8aS/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3aee9f665a2dd3d71957d03efd86a6ff62c93b90" translate="yes" xml:space="preserve">
          <source>First the source object, a JSONB string retrieved from PostgreSQL. I wanted to have it sorted by the &quot;order&quot; property in each child object.</source>
          <target state="translated">Сначала исходный объект,JSONB строка,полученная из PostgreSQL.Я хотел,чтобы она сортировалась по свойству &quot;порядок&quot; в каждом дочернем объекте.</target>
        </trans-unit>
        <trans-unit id="90a693afb1f86033567ce0bfdefafca6a23c4ffe" translate="yes" xml:space="preserve">
          <source>For proper functional programming and chaining purposes an invention of &lt;code&gt;Array.prototype.insert()&lt;/code&gt; is essential. Actually splice could have been perfect if it had returned the mutated array instead of a totally meaningless empty array. So here it goes</source>
          <target state="translated">Для правильного функционального программирования и создания цепочек необходимо использовать &lt;code&gt;Array.prototype.insert()&lt;/code&gt; . На самом деле, сплайсинг мог бы быть идеальным, если бы он возвращал измененный массив вместо совершенно бессмысленного пустого массива. Так что здесь идет</target>
        </trans-unit>
        <trans-unit id="1f015ef38b60a9b45df796850fe8cfba1208cafc" translate="yes" xml:space="preserve">
          <source>Here's a working function that I uses in one of my application.</source>
          <target state="translated">Вот рабочая функция,которую я использую в одном из моих приложений.</target>
        </trans-unit>
        <trans-unit id="36d0da20006443cc265f16731b7449e6ef344e79" translate="yes" xml:space="preserve">
          <source>How to insert an item into an array at a specific index (JavaScript)</source>
          <target state="translated">Как вставить элемент в массив по определенному индексу (JavaScript)</target>
        </trans-unit>
        <trans-unit id="b9d1ed6b75c812d8077c31159668ba9b29f4be4d" translate="yes" xml:space="preserve">
          <source>I am looking for a JavaScript array insert method, in the style of:</source>
          <target state="translated">Я ищу метод вставки массивов JavaScript,в стиле:</target>
        </trans-unit>
        <trans-unit id="544bacd74da4af30d6efbdb2da5a621c4550018d" translate="yes" xml:space="preserve">
          <source>I recommend using pure &lt;strong&gt;JavaScript&lt;/strong&gt; in this case, also there is no insert method in JavaScript, but we have a method which is a  &lt;strong&gt;built-in Array&lt;/strong&gt; method which does the job for you, it's called &lt;strong&gt;splice&lt;/strong&gt;...</source>
          <target state="translated">В этом случае я рекомендую использовать чистый &lt;strong&gt;JavaScript&lt;/strong&gt; , также в JavaScript нет метода вставки, но у нас есть метод, который является &lt;strong&gt;встроенным&lt;/strong&gt; методом &lt;strong&gt;Array,&lt;/strong&gt; который выполняет эту работу за вас, он называется &lt;strong&gt;splice&lt;/strong&gt; ...</target>
        </trans-unit>
        <trans-unit id="2756fa3617e8bc1f2910a304bcab75e80de7abe2" translate="yes" xml:space="preserve">
          <source>I tried this and it is working fine!</source>
          <target state="translated">Я попробовал это,и оно отлично работает!</target>
        </trans-unit>
        <trans-unit id="74cc64f9e5c4d9804b820e8b44aa62d33a285741" translate="yes" xml:space="preserve">
          <source>I wanted to place a &lt;strong&gt;known number&lt;/strong&gt; of items into an array, into specific positions, as they come off of an &quot;associative array&quot; (i.e. an object) which by definition is not guaranteed to be in a sorted order. I wanted the resulting array to be an array of objects, but the objects to be in a specific order in the array since an array guarantees their order. So I did this.</source>
          <target state="translated">Я хотел поместить &lt;strong&gt;известное количество&lt;/strong&gt; элементов в массив, в определенные позиции, так как они выходят из &amp;laquo;ассоциативного массива&amp;raquo; (то есть объекта), который по определению не гарантированно находится в отсортированном порядке. Я хотел, чтобы результирующий массив был массивом объектов, но объекты должны быть в определенном порядке в массиве, так как массив гарантирует их порядок. Я так и сделал.</target>
        </trans-unit>
        <trans-unit id="3f236306597464fd9a64d527b52af6c49b59f53a" translate="yes" xml:space="preserve">
          <source>If you are concerned about mutating the array (for example, if using Immutable.js), you can instead use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&quot;&gt;&lt;code&gt;slice()&lt;/code&gt;&lt;/a&gt;, not to be confused with &lt;code&gt;splice()&lt;/code&gt; with a 'p'.</source>
          <target state="translated">Если вас беспокоит изменение массива (например, при использовании Immutable.js), вы можете вместо этого использовать &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&quot;&gt; &lt;code&gt;slice()&lt;/code&gt; &lt;/a&gt; , чтобы не путать с &lt;code&gt;splice()&lt;/code&gt; с &amp;laquo;p&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="483a172849c1d36e36b12cb5d32a0f9a38998391" translate="yes" xml:space="preserve">
          <source>If you want to insert multiple elements into an array at once check out this Stack Overflow answer: &lt;a href=&quot;https://stackoverflow.com/questions/1348178/a-better-way-to-splice-an-arrray-into-an-array-in-javascript&quot;&gt;A better way to splice an array into an array in javascript&lt;/a&gt;</source>
          <target state="translated">Если вы хотите вставить несколько элементов в массив одновременно, проверьте ответ &amp;laquo;Переполнение стека&amp;raquo;: &lt;a href=&quot;https://stackoverflow.com/questions/1348178/a-better-way-to-splice-an-arrray-into-an-array-in-javascript&quot;&gt;лучший способ объединить массив в массив в javascript&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e643adfb3b1686303f90df03cbb1b3659395dfc0" translate="yes" xml:space="preserve">
          <source>In this example we will create an array and add an element to it into index 2:</source>
          <target state="translated">В данном примере мы создадим массив и добавим элемент в индекс 2:</target>
        </trans-unit>
        <trans-unit id="6f820d1d8895a41be8c8d35e6ba81be89e5a5645" translate="yes" xml:space="preserve">
          <source>Index is the position where you want to insert or delete the element.
0 i.e. the second parameters defines the number of element from the index to be removed
item are the new entries which you want to make in array. It can be one or more than one.</source>
          <target state="translated">Индекс-это позиция,в которую необходимо вставить или удалить элемент.0,т.е.второй параметр определяет количество элементов из индекса,которые необходимо удалить-это новые записи,которые вы хотите сделать в массиве.Это может быть одна или несколько записей.</target>
        </trans-unit>
        <trans-unit id="ddfa21ff23ab326ceea7c37b06738d301327f869" translate="yes" xml:space="preserve">
          <source>It can insert multiple elements (as native &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt; does) and supports chaining:</source>
          <target state="translated">Он может вставлять несколько элементов (как это делает нативный &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt; &lt;code&gt;splice&lt;/code&gt; &lt;/a&gt; ) и поддерживает цепочку:</target>
        </trans-unit>
        <trans-unit id="5cfc95d36d424d2cda631d31b6c12ba8657a29cd" translate="yes" xml:space="preserve">
          <source>It can merge arrays from the arguments with the given array and also supports chaining:</source>
          <target state="translated">Он может объединять массивы из аргументов с заданным массивом,а также поддерживает цепочки:</target>
        </trans-unit>
        <trans-unit id="7ced62006201ed658eec69bc5e9178843c7f41e3" translate="yes" xml:space="preserve">
          <source>It will return 3, but if we check the arr now, we have:</source>
          <target state="translated">Он вернет 3,но если мы сейчас проверим арр,мы это сделаем:</target>
        </trans-unit>
        <trans-unit id="7975cd93b61d5fb446d1b4a82d208acb79729b34" translate="yes" xml:space="preserve">
          <source>Let's see what we have done...</source>
          <target state="translated">Посмотрим,что мы сделали...</target>
        </trans-unit>
        <trans-unit id="857e8992ae0915ef69b55ae76a6431d99d285563" translate="yes" xml:space="preserve">
          <source>Let's see what's &lt;strong&gt;splice()&lt;/strong&gt;...</source>
          <target state="translated">Посмотрим, что такое &lt;strong&gt;склейка ()&lt;/strong&gt; ...</target>
        </trans-unit>
        <trans-unit id="d6fa581ef677ef0031b695752077bdee04f3ba96" translate="yes" xml:space="preserve">
          <source>OK, imagine we have this array below:</source>
          <target state="translated">Хорошо,представьте,что у нас есть этот массив внизу:</target>
        </trans-unit>
        <trans-unit id="c5af1b321a254fe233907533db7dfbf1fee498ba" translate="yes" xml:space="preserve">
          <source>Other than splice, you can use this approach which will not mutate the original array, but will create a new array with the added item. You should usually avoid mutation whenever possible. I'm using ES6 spread operator here.</source>
          <target state="translated">Кроме сращивания,можно использовать и такой подход,который не будет мутировать исходный массив,а создаст новый массив с добавленным элементом.Обычно,по возможности,следует избегать мутации.Здесь я использую оператор ES6 spread.</target>
        </trans-unit>
        <trans-unit id="a6afed8c49e250a1e5c5d1bf8e8aa8ab7f19d1bf" translate="yes" xml:space="preserve">
          <source>Preferably in jQuery, but any JavaScript implementation will do at this point.</source>
          <target state="translated">Предпочтительно в jQuery,но любая реализация JavaScript подойдет на данный момент.</target>
        </trans-unit>
        <trans-unit id="6c674ddcd6507d4a64241e92ef6ff9ade6f5fe7b" translate="yes" xml:space="preserve">
          <source>Since the number of nodes in the object is known, I first create an array with the specified length:</source>
          <target state="translated">Так как количество узлов в объекте известно,то сначала я создаю массив с заданной длиной:</target>
        </trans-unit>
        <trans-unit id="31a3e983b6ca43e81655bdbe27f9741aa0ca03a7" translate="yes" xml:space="preserve">
          <source>So at this way we can return a new array (will be a cool functional way - more much better than use push or splice) with the element inserted at index, and if the index is greater than the length of the array it will be inserted at the end.</source>
          <target state="translated">Таким образом,мы можем вернуть новый массив (это будет крутой функциональный способ-гораздо лучше,чем использовать push или splice)с элементом,вставленным в индекс,и если индекс больше длины массива,то он будет вставлен в конце.</target>
        </trans-unit>
        <trans-unit id="0dae2c63be0a01f5bc2a528ce68677498e296bf2" translate="yes" xml:space="preserve">
          <source>So far, so good, but how we can add a new element to array using splice?
Let's put back 3 in the arr...</source>
          <target state="translated">Пока все хорошо,но как мы можем добавить новый элемент в массив с помощью сплайса? Давайте вернемся к 3 в арр...</target>
        </trans-unit>
        <trans-unit id="2bd9605e48af5f626917de2c417f7beaa48d7cf6" translate="yes" xml:space="preserve">
          <source>Taking profit of reduce method as following:</source>
          <target state="translated">Принятие прибыли методом сокращения следующим образом:</target>
        </trans-unit>
        <trans-unit id="d4607f5f4d353df616911ce44cbb32ce72dbbf7a" translate="yes" xml:space="preserve">
          <source>The splice() method changes the contents of an array by removing
  existing elements and/or adding new elements.</source>
          <target state="translated">Метод splice()изменяет содержимое массива,удаляя существующие элементы или добавляя новые.</target>
        </trans-unit>
        <trans-unit id="62a2fb04bbb69e406cad00528937349a39da9047" translate="yes" xml:space="preserve">
          <source>Then you can use it like:</source>
          <target state="translated">Тогда ты можешь использовать его как:</target>
        </trans-unit>
        <trans-unit id="08ba34b2203e8ccf4cdba32251561d21147d239d" translate="yes" xml:space="preserve">
          <source>This can be used to add more than one item by tweaking the function a bit to use the rest operator for the new items, and spread that in the returned result as well</source>
          <target state="translated">Это может быть использовано для добавления более одного элемента,немного откорректировав функцию,чтобы использовать оператор rest для новых элементов,и распространив его также и в возвращаемом результате</target>
        </trans-unit>
        <trans-unit id="fa479ef2769d6bf952621237f3344b2008c0f730" translate="yes" xml:space="preserve">
          <source>This checks if item exit</source>
          <target state="translated">При этом проверяется,выходит ли элемент</target>
        </trans-unit>
        <trans-unit id="d6e6345faa235e30eb53880b945a2375948867ac" translate="yes" xml:space="preserve">
          <source>This is a combination of iterating the reference array and comparing it to the object you wanted to check, convert both of them into a string then iterated if it matched. Then you can just count. This can be improved but this is where I settled. Hope this helps.</source>
          <target state="translated">Это комбинация итерации ссылочного массива и сравнения его с объектом,который вы хотели проверить,преобразования обоих в строку,а затем итерации,если он совпадает.Тогда вы можете просто считать.Это можно улучшить,но это то,где я остановился.Надеюсь,это поможет.</target>
        </trans-unit>
        <trans-unit id="93cd6d38f8c570772e3855142c42f20553973157" translate="yes" xml:space="preserve">
          <source>This is showing how each item in splice work:</source>
          <target state="translated">Это показывает,как работает каждый элемент в сращивании:</target>
        </trans-unit>
        <trans-unit id="42bf72c68d10903f64ee4fe7096ad4643cacad67" translate="yes" xml:space="preserve">
          <source>We can remove &lt;code&gt;3&lt;/code&gt; like this:</source>
          <target state="translated">Мы можем удалить &lt;code&gt;3&lt;/code&gt; , как это:</target>
        </trans-unit>
        <trans-unit id="1018f207660dbe71bd0035087955b6b126503d46" translate="yes" xml:space="preserve">
          <source>We use &lt;strong&gt;splice&lt;/strong&gt; again, but this time for the second argument, we pass &lt;strong&gt;0&lt;/strong&gt;, means we want to delete no item, but at the same time, we add third argument which is 3 that will be added at second index...</source>
          <target state="translated">Мы снова используем &lt;strong&gt;splice&lt;/strong&gt; , но на этот раз для второго аргумента мы передаем &lt;strong&gt;0&lt;/strong&gt; , что означает, что мы не хотим удалять элемент, но в то же время мы добавляем третий аргумент, который будет 3, который будет добавлен во второй индекс ...</target>
        </trans-unit>
        <trans-unit id="d98ce89b0f0cf820b708648a8ffaceb787909d98" translate="yes" xml:space="preserve">
          <source>Well ok the above with the &lt;code&gt;Array.prototype.splice()&lt;/code&gt; one mutates the original array and some might complain like &quot;you shouldn't modify what doesn't belong to you&quot; and that might turn out to be right as well. So for the public welfare i would like to give another &lt;code&gt;Array.prototype.insert()&lt;/code&gt; which doesn't mutate the original array. Here it goes;</source>
          <target state="translated">Что ж, хорошо, что выше с &lt;code&gt;Array.prototype.splice()&lt;/code&gt; один мутирует исходный массив, а некоторые могут жаловаться, что &amp;laquo;вы не должны изменять то, что вам не принадлежит&amp;raquo;, и это также может оказаться правильным. Поэтому для общественного блага я хотел бы дать еще один &lt;code&gt;Array.prototype.insert()&lt;/code&gt; который не изменяет исходный массив. Здесь это идет;</target>
        </trans-unit>
        <trans-unit id="da66e27bf198c132cf6b03f5e1cc639501169ba7" translate="yes" xml:space="preserve">
          <source>What you want is the &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; function on the native array object.</source>
          <target state="translated">То, что вы хотите, это функция &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt; &lt;code&gt;splice&lt;/code&gt; &lt;/a&gt;&lt;/strong&gt; на собственном объекте массива.</target>
        </trans-unit>
        <trans-unit id="d06b6746be798753f00148abc36fa3d6b8b2852b" translate="yes" xml:space="preserve">
          <source>Which will delete &lt;strong&gt;2 items&lt;/strong&gt; at index 2, then add &lt;strong&gt;3&lt;/strong&gt; at index 2 and result will be:</source>
          <target state="translated">Который удалит &lt;strong&gt;2 элемента&lt;/strong&gt; в индексе 2, затем добавит &lt;strong&gt;3&lt;/strong&gt; в индексе 2, и результат будет:</target>
        </trans-unit>
        <trans-unit id="ede543f3ddd43ced64afdab4b612462b1b0e1d9e" translate="yes" xml:space="preserve">
          <source>You can implement the &lt;code&gt;Array.insert&lt;/code&gt; method by doing this:</source>
          <target state="translated">Вы можете реализовать метод &lt;code&gt;Array.insert&lt;/code&gt; , выполнив это:</target>
        </trans-unit>
        <trans-unit id="11135937a075ca3187dd1eeb96ceb6b48057a2f9" translate="yes" xml:space="preserve">
          <source>You should be aware, that we can &lt;strong&gt;delete&lt;/strong&gt; and &lt;strong&gt;add&lt;/strong&gt; at the same time, for example now we can do:</source>
          <target state="translated">Вы должны знать, что мы можем &lt;strong&gt;удалять&lt;/strong&gt; и &lt;strong&gt;добавлять&lt;/strong&gt; одновременно, например, теперь мы можем сделать:</target>
        </trans-unit>
        <trans-unit id="e764621fb804a516c11bae65dd7002a1111c567c" translate="yes" xml:space="preserve">
          <source>array.splice(start, deleteCount, item1, item2, item3 ...)</source>
          <target state="translated">array.splice(start,deleteCount,item1,item2,item3 ...).</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
