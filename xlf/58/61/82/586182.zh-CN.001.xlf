<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/586182">
    <body>
      <group id="586182">
        <trans-unit id="667b0ed13255663dafe017a71b3a7a8189df18e7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://masteringjs.io/tutorials/fundamentals/array-splice&quot;&gt;&lt;code&gt;Array#splice()&lt;/code&gt;&lt;/a&gt; is the way to go, unless you really want to avoid mutating the array. Given 2 arrays &lt;code&gt;arr1&lt;/code&gt; and &lt;code&gt;arr2&lt;/code&gt;, here's how you would insert the contents of &lt;code&gt;arr2&lt;/code&gt; into &lt;code&gt;arr1&lt;/code&gt; after the first element:</source>
          <target state="translated">除非您确实要避免对数组进行变异，否则&lt;a href=&quot;https://masteringjs.io/tutorials/fundamentals/array-splice&quot;&gt; &lt;code&gt;Array#splice()&lt;/code&gt; &lt;/a&gt;是必经之路。 给定2个数组 &lt;code&gt;arr1&lt;/code&gt; 和 &lt;code&gt;arr2&lt;/code&gt; ，这是在第一个元素之后将 &lt;code&gt;arr2&lt;/code&gt; 的内容插入到 &lt;code&gt;arr1&lt;/code&gt; 中的方法：</target>
        </trans-unit>
        <trans-unit id="729a1c55ee7a2a7823b6497476a9b016a28221c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arr.splice(index, 0, item);&lt;/code&gt; will insert &lt;code&gt;item&lt;/code&gt; into &lt;code&gt;arr&lt;/code&gt; at the specified index (deleting &lt;code&gt;0&lt;/code&gt; items first, that is, it's just an insert).</source>
          <target state="translated">&lt;code&gt;arr.splice(index, 0, item);&lt;/code&gt; 将在指定索引处将 &lt;code&gt;item&lt;/code&gt; 插入到 &lt;code&gt;arr&lt;/code&gt; 中（首先删除 &lt;code&gt;0&lt;/code&gt; 个项目，也就是说，它只是一个插入）。</target>
        </trans-unit>
        <trans-unit id="caf243187fe6b18027f328eb42df3b89e9d8e6cd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;1. With multiple arguments and chaining support&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;1.具有多个参数和链接支持&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3f2d359d3e2d868480f44df182f2394d1c5edd7f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;2. With array-type arguments merging and chaining support&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;2.具有数组类型参数合并和链接支持&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fb9332801774221201342fa53990e401a706a8a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Append Multiple Element at a specific index&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;在特定索引处附加多个元素&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d1a8239920f281a041ac9ffa431d73371815fffe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Append Single Element at a specific index&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;在特定索引处附加单个元素&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e676bd1d1023fdd59465ac8bb506ebd374d96104" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DEMO:&lt;/strong&gt;&lt;a href=&quot;http://jsfiddle.net/UPphH/&quot;&gt;http://jsfiddle.net/UPphH/&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;DEMO:&lt;/strong&gt;&lt;a href=&quot;http://jsfiddle.net/UPphH/&quot;&gt;http://jsfiddle.net/UPphH/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="88d579f187963377cfd2012ed4ceeee690c68fa8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here are two ways :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;有两种方法：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f8e01739d5b6815e58b82ad6033855dbc821cb51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OR&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;OR&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ab3f3edd086a910ca55fa89cf44468663a46e6ee" translate="yes" xml:space="preserve">
          <source>A bit of an older thread, but I have to agree with Redu above because splice definitely has a bit of a confusing interface. And the response given by cdbajorin that &quot;it only returns an empty array when the second parameter is 0. If it's greater than 0, it returns the items removed from the array&quot; is, while accurate, proving the point. The function's intent is to splice or as said earlier by Jakob Keller, &quot;to join or connect, also to change. You have an established array that you are now changing which would involve adding or removing elements....&quot; Given that, the return value of the elements, if any, that were removed is awkward at best. And I 100% agree that this method could have been better suited to chaining if it had returned what seems natural, a new array with the spliced elements added. Then you could do things like [&quot;19&quot;, &quot;17&quot;].splice(1,0,&quot;18&quot;).join(&quot;...&quot;) or whatever you like with the returned array. The fact that it returns what was removed is just kinda nonsense IMHO. If the intention of the method was to &quot;cut out a set of elements&quot; and that was it's only intent, maybe. It seems like if I don't know what I'm cutting out already though, I probably have little reason to cut those elements out, doesn't it? It would be better if it behaved like concat, map, reduce, slice, etc where a new array is made from the existing array rather than mutating the existing array. Those are all chainable, and that IS a significant issue. It's rather common to chain array manipulation. Seems like the language needs to go one or the other direction and try to stick to it as much as possible. Javascript being functional and less declarative, it just seems like a strange deviation from the norm.</source>
          <target state="translated">这是个有点老的线程,但我不得不同意Redu的观点,因为splice肯定有一个有点混乱的接口。而cdbajorin给出的 &quot;它只在第二个参数为0时返回一个空数组,如果大于0,则返回从数组中删除的项 &quot;的回答虽然准确,但也证明了这一点。这个函数的意图是拼接,或者像Jakob Keller前面说的那样,&quot;加入或连接,也是为了改变。你有一个已建立的数组,现在要改变它将涉及到增加或删除元素...........&quot; 考虑到这一点,如果有被删除的元素的返回值,那就很尴尬了。而且我100%同意,如果这个方法返回的是一个新的数组,并且添加了拼接的元素,那么这个方法可能会更适合于链式。然后你可以用[&quot;19&quot;,&quot;17&quot;].splice(1,0,&quot;18&quot;).join(&quot;...&quot;)或者其他你喜欢的方法来处理返回的数组。事实上,它返回的是被删除的内容,这在IMHO看来是无稽之谈。如果这个方法的意图是 &quot;删除一组元素&quot;,而这是它的唯一意图,也许是的。但是,如果我不知道要删除的是什么,我可能就没有什么理由去删除这些元素了,不是吗?如果它能像concat、map、reduce、slice等那样,从现有的数组中创建一个新的数组,而不是突变现有的数组,那就更好了。这些都是可链式的,而这是一个重要的问题。对数组进行链式操作是相当常见的。似乎语言需要往一个方向走,并尽可能地坚持下去。Javascript是功能化的,声明性的东西比较少,这似乎是一种奇怪的偏离规范的做法。</target>
        </trans-unit>
        <trans-unit id="8b661ad9df8d48ec23c8d247f0ccaf9817d934bb" translate="yes" xml:space="preserve">
          <source>Also here are some functions to illustrate both examples:</source>
          <target state="translated">这里也有一些功能说明这两个例子。</target>
        </trans-unit>
        <trans-unit id="dc44bfeb28806e966991b987afb7c9fd496cb75a" translate="yes" xml:space="preserve">
          <source>And then I call it below.</source>
          <target state="translated">然后我在下面叫它。</target>
        </trans-unit>
        <trans-unit id="f22c8026d6f436a9ed9b0a55c38568fa125ff9a8" translate="yes" xml:space="preserve">
          <source>And then iterate the object, placing the newly created temporary objects into the desired locations in the array without really any &quot;sorting&quot; taking place.</source>
          <target state="translated">然后对对象进行迭代,将新创建的临时对象放置到数组中需要的位置,而不需要真正进行任何 &quot;排序&quot;。</target>
        </trans-unit>
        <trans-unit id="29928d781cdadf175da5204e6085c8cab9378f65" translate="yes" xml:space="preserve">
          <source>And this is how you use the functions:</source>
          <target state="translated">而这些功能的使用方法就是这样。</target>
        </trans-unit>
        <trans-unit id="90e33061a75f32f6c6ad98e6d9f5619a7e9e8f57" translate="yes" xml:space="preserve">
          <source>Another possible solution, with usage of &lt;code&gt;Array#reduce&lt;/code&gt;.</source>
          <target state="translated">另一种可能的解决方案，使用 &lt;code&gt;Array#reduce&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="860a292478931fd5d82e63ffa3f372929a4736fd" translate="yes" xml:space="preserve">
          <source>Anyone who's still having issues with this one and have tried all the options above and never got it. I'm sharing my solution, this is to take consideration that you don't wan't to explicitly state the properties of your object vs the array.</source>
          <target state="translated">如果有谁还在这个问题上有问题,并且尝试了上面所有的选项都没有得到。我分享一下我的解决方案,这个是考虑到你不要明文规定你的对象的属性与数组的属性。</target>
        </trans-unit>
        <trans-unit id="475c9e5beaff7b5f3da1aa72ac29cc8b84a5af24" translate="yes" xml:space="preserve">
          <source>Custom array &lt;code&gt;insert&lt;/code&gt; methods</source>
          <target state="translated">自定义数组 &lt;code&gt;insert&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="4bcff3f268979530320804f012139bd11e229259" translate="yes" xml:space="preserve">
          <source>Even though this has been answered already, I'm adding this note for an alternative approach.</source>
          <target state="translated">虽然这个问题已经有人回答过了,但我在此补充说明一下,换个方法。</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">扩展片段</target>
        </trans-unit>
        <trans-unit id="d275542cdfe9842b3f1c307576e12a7298a3a12a" translate="yes" xml:space="preserve">
          <source>Finally here is a jsFiddle so you can see it for youself: &lt;a href=&quot;http://jsfiddle.net/luisperezphd/Wc8aS/&quot;&gt;http://jsfiddle.net/luisperezphd/Wc8aS/&lt;/a&gt;</source>
          <target state="translated">最后是一个jsFiddle，因此您可以自己查看： &lt;a href=&quot;http://jsfiddle.net/luisperezphd/Wc8aS/&quot;&gt;http&lt;/a&gt; : //jsfiddle.net/luisperezphd/Wc8aS/</target>
        </trans-unit>
        <trans-unit id="3aee9f665a2dd3d71957d03efd86a6ff62c93b90" translate="yes" xml:space="preserve">
          <source>First the source object, a JSONB string retrieved from PostgreSQL. I wanted to have it sorted by the &quot;order&quot; property in each child object.</source>
          <target state="translated">首先是源对象,一个从PostgreSQL检索的JSONB字符串。我想通过每个子对象中的 &quot;顺序 &quot;属性对其进行排序。</target>
        </trans-unit>
        <trans-unit id="90a693afb1f86033567ce0bfdefafca6a23c4ffe" translate="yes" xml:space="preserve">
          <source>For proper functional programming and chaining purposes an invention of &lt;code&gt;Array.prototype.insert()&lt;/code&gt; is essential. Actually splice could have been perfect if it had returned the mutated array instead of a totally meaningless empty array. So here it goes</source>
          <target state="translated">为了进行适当的功能编程和链接， &lt;code&gt;Array.prototype.insert()&lt;/code&gt; 的发明必不可少。 如果拼接返回了变异数组而不是完全没有意义的空数组，则实际上拼接可能是完美的。 所以就这样</target>
        </trans-unit>
        <trans-unit id="1f015ef38b60a9b45df796850fe8cfba1208cafc" translate="yes" xml:space="preserve">
          <source>Here's a working function that I uses in one of my application.</source>
          <target state="translated">这里有一个我在我的一个应用程序中使用的工作功能。</target>
        </trans-unit>
        <trans-unit id="36d0da20006443cc265f16731b7449e6ef344e79" translate="yes" xml:space="preserve">
          <source>How to insert an item into an array at a specific index (JavaScript)</source>
          <target state="translated">如何在特定索引处插入一个项目到数组中(JavaScript)</target>
        </trans-unit>
        <trans-unit id="b9d1ed6b75c812d8077c31159668ba9b29f4be4d" translate="yes" xml:space="preserve">
          <source>I am looking for a JavaScript array insert method, in the style of:</source>
          <target state="translated">我正在寻找一个JavaScript数组插入方法,样式为:。</target>
        </trans-unit>
        <trans-unit id="544bacd74da4af30d6efbdb2da5a621c4550018d" translate="yes" xml:space="preserve">
          <source>I recommend using pure &lt;strong&gt;JavaScript&lt;/strong&gt; in this case, also there is no insert method in JavaScript, but we have a method which is a  &lt;strong&gt;built-in Array&lt;/strong&gt; method which does the job for you, it's called &lt;strong&gt;splice&lt;/strong&gt;...</source>
          <target state="translated">我建议在这种情况下使用纯&lt;strong&gt;JavaScript&lt;/strong&gt; ， &lt;strong&gt;JavaScript&lt;/strong&gt;中也没有insert方法，但是我们有一个&lt;strong&gt;内置的Array&lt;/strong&gt;方法，它可以为您完成工作，它称为&lt;strong&gt;splice&lt;/strong&gt; ...。</target>
        </trans-unit>
        <trans-unit id="2756fa3617e8bc1f2910a304bcab75e80de7abe2" translate="yes" xml:space="preserve">
          <source>I tried this and it is working fine!</source>
          <target state="translated">我试了一下,效果很好!</target>
        </trans-unit>
        <trans-unit id="74cc64f9e5c4d9804b820e8b44aa62d33a285741" translate="yes" xml:space="preserve">
          <source>I wanted to place a &lt;strong&gt;known number&lt;/strong&gt; of items into an array, into specific positions, as they come off of an &quot;associative array&quot; (i.e. an object) which by definition is not guaranteed to be in a sorted order. I wanted the resulting array to be an array of objects, but the objects to be in a specific order in the array since an array guarantees their order. So I did this.</source>
          <target state="translated">我想将&lt;strong&gt;已知数量&lt;/strong&gt;的项目放置到数组中的特定位置，因为它们来自&amp;ldquo;关联数组&amp;rdquo;（即对象），而根据定义，这些&amp;ldquo;数组&amp;rdquo;不能保证按顺序排列。 我希望生成的数组是对象数组，但是对象要按数组中的特定顺序排列，因为数组可以保证它们的顺序。 所以我做到了。</target>
        </trans-unit>
        <trans-unit id="3f236306597464fd9a64d527b52af6c49b59f53a" translate="yes" xml:space="preserve">
          <source>If you are concerned about mutating the array (for example, if using Immutable.js), you can instead use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&quot;&gt;&lt;code&gt;slice()&lt;/code&gt;&lt;/a&gt;, not to be confused with &lt;code&gt;splice()&lt;/code&gt; with a 'p'.</source>
          <target state="translated">如果您担心更改数组（例如，如果使用Immutable.js），则可以改用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&quot;&gt; &lt;code&gt;slice()&lt;/code&gt; &lt;/a&gt; ，不要与带有p的 &lt;code&gt;splice()&lt;/code&gt; 混淆。</target>
        </trans-unit>
        <trans-unit id="483a172849c1d36e36b12cb5d32a0f9a38998391" translate="yes" xml:space="preserve">
          <source>If you want to insert multiple elements into an array at once check out this Stack Overflow answer: &lt;a href=&quot;https://stackoverflow.com/questions/1348178/a-better-way-to-splice-an-arrray-into-an-array-in-javascript&quot;&gt;A better way to splice an array into an array in javascript&lt;/a&gt;</source>
          <target state="translated">如果您想一次将多个元素插入到数组中，请查看此Stack Overflow答案： &lt;a href=&quot;https://stackoverflow.com/questions/1348178/a-better-way-to-splice-an-arrray-into-an-array-in-javascript&quot;&gt;在JavaScript中将数组拼接为数组的更好方法&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e643adfb3b1686303f90df03cbb1b3659395dfc0" translate="yes" xml:space="preserve">
          <source>In this example we will create an array and add an element to it into index 2:</source>
          <target state="translated">在这个例子中,我们将创建一个数组,并在其中添加一个元素到索引2中。</target>
        </trans-unit>
        <trans-unit id="6f820d1d8895a41be8c8d35e6ba81be89e5a5645" translate="yes" xml:space="preserve">
          <source>Index is the position where you want to insert or delete the element.
0 i.e. the second parameters defines the number of element from the index to be removed
item are the new entries which you want to make in array. It can be one or more than one.</source>
          <target state="translated">Index是指你要插入或删除元素的位置。0即第二个参数定义了从索引中删除的元素的数量,是要在数组中新建的条目,可以是一个或多个。它可以是一个或多个。</target>
        </trans-unit>
        <trans-unit id="ddfa21ff23ab326ceea7c37b06738d301327f869" translate="yes" xml:space="preserve">
          <source>It can insert multiple elements (as native &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt; does) and supports chaining:</source>
          <target state="translated">它可以插入多个元素（就像本地&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt; &lt;code&gt;splice&lt;/code&gt; &lt;/a&gt;一样）并支持链接：</target>
        </trans-unit>
        <trans-unit id="5cfc95d36d424d2cda631d31b6c12ba8657a29cd" translate="yes" xml:space="preserve">
          <source>It can merge arrays from the arguments with the given array and also supports chaining:</source>
          <target state="translated">它可以将参数中的数组与给定的数组进行合并,还支持链式。</target>
        </trans-unit>
        <trans-unit id="7ced62006201ed658eec69bc5e9178843c7f41e3" translate="yes" xml:space="preserve">
          <source>It will return 3, but if we check the arr now, we have:</source>
          <target state="translated">它将返回3,但如果我们现在检查 arr,我们有。</target>
        </trans-unit>
        <trans-unit id="7975cd93b61d5fb446d1b4a82d208acb79729b34" translate="yes" xml:space="preserve">
          <source>Let's see what we have done...</source>
          <target state="translated">我们来看看我们都做了什么......</target>
        </trans-unit>
        <trans-unit id="857e8992ae0915ef69b55ae76a6431d99d285563" translate="yes" xml:space="preserve">
          <source>Let's see what's &lt;strong&gt;splice()&lt;/strong&gt;...</source>
          <target state="translated">让我们看看什么是&lt;strong&gt;splice（）&lt;/strong&gt; ...</target>
        </trans-unit>
        <trans-unit id="d6fa581ef677ef0031b695752077bdee04f3ba96" translate="yes" xml:space="preserve">
          <source>OK, imagine we have this array below:</source>
          <target state="translated">OK,想象一下,我们有下面这个阵列。</target>
        </trans-unit>
        <trans-unit id="c5af1b321a254fe233907533db7dfbf1fee498ba" translate="yes" xml:space="preserve">
          <source>Other than splice, you can use this approach which will not mutate the original array, but will create a new array with the added item. You should usually avoid mutation whenever possible. I'm using ES6 spread operator here.</source>
          <target state="translated">除了拼接之外,你可以使用这种方法,它不会突变原来的数组,而是用添加的项创建一个新的数组。通常情况下,你应该尽可能避免突变。我这里使用的是ES6的spread操作符。</target>
        </trans-unit>
        <trans-unit id="a6afed8c49e250a1e5c5d1bf8e8aa8ab7f19d1bf" translate="yes" xml:space="preserve">
          <source>Preferably in jQuery, but any JavaScript implementation will do at this point.</source>
          <target state="translated">最好是用jQuery,但在这一点上,任何JavaScript实现都可以。</target>
        </trans-unit>
        <trans-unit id="6c674ddcd6507d4a64241e92ef6ff9ade6f5fe7b" translate="yes" xml:space="preserve">
          <source>Since the number of nodes in the object is known, I first create an array with the specified length:</source>
          <target state="translated">由于对象中的节点数是已知的,所以我首先创建一个指定长度的数组。</target>
        </trans-unit>
        <trans-unit id="31a3e983b6ca43e81655bdbe27f9741aa0ca03a7" translate="yes" xml:space="preserve">
          <source>So at this way we can return a new array (will be a cool functional way - more much better than use push or splice) with the element inserted at index, and if the index is greater than the length of the array it will be inserted at the end.</source>
          <target state="translated">所以在这种方式下,我们可以返回一个新的数组(将是一种很酷的功能方式----比使用push或splice好得多),在索引处插入元素,如果索引大于数组的长度,就会在最后插入。</target>
        </trans-unit>
        <trans-unit id="0dae2c63be0a01f5bc2a528ce68677498e296bf2" translate="yes" xml:space="preserve">
          <source>So far, so good, but how we can add a new element to array using splice?
Let's put back 3 in the arr...</source>
          <target state="translated">到目前为止,很好,但我们如何使用拼接来增加一个新元素到数组中?让我们把3个元素放回数组中.....</target>
        </trans-unit>
        <trans-unit id="2bd9605e48af5f626917de2c417f7beaa48d7cf6" translate="yes" xml:space="preserve">
          <source>Taking profit of reduce method as following:</source>
          <target state="translated">减法利润如下:</target>
        </trans-unit>
        <trans-unit id="d4607f5f4d353df616911ce44cbb32ce72dbbf7a" translate="yes" xml:space="preserve">
          <source>The splice() method changes the contents of an array by removing
  existing elements and/or adding new elements.</source>
          <target state="translated">splice()方法通过删除现有元素或添加新元素来改变数组的内容。</target>
        </trans-unit>
        <trans-unit id="62a2fb04bbb69e406cad00528937349a39da9047" translate="yes" xml:space="preserve">
          <source>Then you can use it like:</source>
          <target state="translated">那么你就可以用它的样子。</target>
        </trans-unit>
        <trans-unit id="08ba34b2203e8ccf4cdba32251561d21147d239d" translate="yes" xml:space="preserve">
          <source>This can be used to add more than one item by tweaking the function a bit to use the rest operator for the new items, and spread that in the returned result as well</source>
          <target state="translated">这可以用来添加多个项目,通过对函数进行调整,将新的项目使用 rest 运算符,并在返回的结果中进行扩散。</target>
        </trans-unit>
        <trans-unit id="fa479ef2769d6bf952621237f3344b2008c0f730" translate="yes" xml:space="preserve">
          <source>This checks if item exit</source>
          <target state="translated">这将检查项目是否退出</target>
        </trans-unit>
        <trans-unit id="d6e6345faa235e30eb53880b945a2375948867ac" translate="yes" xml:space="preserve">
          <source>This is a combination of iterating the reference array and comparing it to the object you wanted to check, convert both of them into a string then iterated if it matched. Then you can just count. This can be improved but this is where I settled. Hope this helps.</source>
          <target state="translated">这就是将引用数组迭代,然后将其与你要检查的对象进行比较,将两者转换为一个字符串,然后如果匹配的话再进行迭代。然后就可以直接进行计数了。这个方法可以改进,但我就在这里解决了。希望这对你有帮助。</target>
        </trans-unit>
        <trans-unit id="93cd6d38f8c570772e3855142c42f20553973157" translate="yes" xml:space="preserve">
          <source>This is showing how each item in splice work:</source>
          <target state="translated">这是在展示拼接中每个项目的工作原理。</target>
        </trans-unit>
        <trans-unit id="42bf72c68d10903f64ee4fe7096ad4643cacad67" translate="yes" xml:space="preserve">
          <source>We can remove &lt;code&gt;3&lt;/code&gt; like this:</source>
          <target state="translated">我们可以这样删除 &lt;code&gt;3&lt;/code&gt; 个 ：</target>
        </trans-unit>
        <trans-unit id="1018f207660dbe71bd0035087955b6b126503d46" translate="yes" xml:space="preserve">
          <source>We use &lt;strong&gt;splice&lt;/strong&gt; again, but this time for the second argument, we pass &lt;strong&gt;0&lt;/strong&gt;, means we want to delete no item, but at the same time, we add third argument which is 3 that will be added at second index...</source>
          <target state="translated">我们再次使用了&lt;strong&gt;splice&lt;/strong&gt; ，但是这次我们为第二个参数传递了&lt;strong&gt;0&lt;/strong&gt; ，这意味着我们不希望删除任何项目，但是与此同时，我们添加了第三个参数3，它将在第二个索引处添加...</target>
        </trans-unit>
        <trans-unit id="d98ce89b0f0cf820b708648a8ffaceb787909d98" translate="yes" xml:space="preserve">
          <source>Well ok the above with the &lt;code&gt;Array.prototype.splice()&lt;/code&gt; one mutates the original array and some might complain like &quot;you shouldn't modify what doesn't belong to you&quot; and that might turn out to be right as well. So for the public welfare i would like to give another &lt;code&gt;Array.prototype.insert()&lt;/code&gt; which doesn't mutate the original array. Here it goes;</source>
          <target state="translated">好的，上面用 &lt;code&gt;Array.prototype.splice()&lt;/code&gt; 可以使原始数组发生变异，并且有些人可能会抱怨&amp;ldquo;您不应该修改不属于您的内容&amp;rdquo;，这也可能是正确的。 因此，为了公共利益，我想再提供一个不会改变原始数组的 &lt;code&gt;Array.prototype.insert()&lt;/code&gt; 。 它去了；</target>
        </trans-unit>
        <trans-unit id="da66e27bf198c132cf6b03f5e1cc639501169ba7" translate="yes" xml:space="preserve">
          <source>What you want is the &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; function on the native array object.</source>
          <target state="translated">您想要的是本机数组对象上的&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt; &lt;code&gt;splice&lt;/code&gt; &lt;/a&gt;&lt;/strong&gt;函数。</target>
        </trans-unit>
        <trans-unit id="d06b6746be798753f00148abc36fa3d6b8b2852b" translate="yes" xml:space="preserve">
          <source>Which will delete &lt;strong&gt;2 items&lt;/strong&gt; at index 2, then add &lt;strong&gt;3&lt;/strong&gt; at index 2 and result will be:</source>
          <target state="translated">这将删除索引2处的&lt;strong&gt;2个项目&lt;/strong&gt; ，然后在索引2处添加&lt;strong&gt;3&lt;/strong&gt; ，结果将是：</target>
        </trans-unit>
        <trans-unit id="ede543f3ddd43ced64afdab4b612462b1b0e1d9e" translate="yes" xml:space="preserve">
          <source>You can implement the &lt;code&gt;Array.insert&lt;/code&gt; method by doing this:</source>
          <target state="translated">您可以通过执行以下 &lt;code&gt;Array.insert&lt;/code&gt; 来实现Array.insert方法：</target>
        </trans-unit>
        <trans-unit id="11135937a075ca3187dd1eeb96ceb6b48057a2f9" translate="yes" xml:space="preserve">
          <source>You should be aware, that we can &lt;strong&gt;delete&lt;/strong&gt; and &lt;strong&gt;add&lt;/strong&gt; at the same time, for example now we can do:</source>
          <target state="translated">您应该知道，我们可以同时&lt;strong&gt;删除&lt;/strong&gt;和&lt;strong&gt;添加&lt;/strong&gt; ，例如现在我们可以：</target>
        </trans-unit>
        <trans-unit id="e764621fb804a516c11bae65dd7002a1111c567c" translate="yes" xml:space="preserve">
          <source>array.splice(start, deleteCount, item1, item2, item3 ...)</source>
          <target state="translated">array.splice(start,deleteCount,item1,item2,item3 ...)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
