<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/586182">
    <body>
      <group id="586182">
        <trans-unit id="667b0ed13255663dafe017a71b3a7a8189df18e7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://masteringjs.io/tutorials/fundamentals/array-splice&quot;&gt;&lt;code&gt;Array#splice()&lt;/code&gt;&lt;/a&gt; is the way to go, unless you really want to avoid mutating the array. Given 2 arrays &lt;code&gt;arr1&lt;/code&gt; and &lt;code&gt;arr2&lt;/code&gt;, here's how you would insert the contents of &lt;code&gt;arr2&lt;/code&gt; into &lt;code&gt;arr1&lt;/code&gt; after the first element:</source>
          <target state="translated">&lt;a href=&quot;https://masteringjs.io/tutorials/fundamentals/array-splice&quot;&gt; &lt;code&gt;Array#splice()&lt;/code&gt; &lt;/a&gt; es el camino a seguir, a menos que realmente desee evitar mutar la matriz. Dados 2 arreglos &lt;code&gt;arr1&lt;/code&gt; y &lt;code&gt;arr2&lt;/code&gt; , as&amp;iacute; es como insertar&amp;iacute;a el contenido de &lt;code&gt;arr2&lt;/code&gt; en &lt;code&gt;arr1&lt;/code&gt; despu&amp;eacute;s del primer elemento:</target>
        </trans-unit>
        <trans-unit id="729a1c55ee7a2a7823b6497476a9b016a28221c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arr.splice(index, 0, item);&lt;/code&gt; will insert &lt;code&gt;item&lt;/code&gt; into &lt;code&gt;arr&lt;/code&gt; at the specified index (deleting &lt;code&gt;0&lt;/code&gt; items first, that is, it's just an insert).</source>
          <target state="translated">&lt;code&gt;arr.splice(index, 0, item);&lt;/code&gt; insertar&amp;aacute; el &lt;code&gt;item&lt;/code&gt; en &lt;code&gt;arr&lt;/code&gt; en el &amp;iacute;ndice especificado (eliminando &lt;code&gt;0&lt;/code&gt; elementos primero, es decir, es solo una inserci&amp;oacute;n).</target>
        </trans-unit>
        <trans-unit id="caf243187fe6b18027f328eb42df3b89e9d8e6cd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;1. With multiple arguments and chaining support&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;1. Con m&amp;uacute;ltiples argumentos y soporte de encadenamiento&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3f2d359d3e2d868480f44df182f2394d1c5edd7f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;2. With array-type arguments merging and chaining support&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;2. Con soporte de fusi&amp;oacute;n y encadenamiento de argumentos de tipo matriz&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fb9332801774221201342fa53990e401a706a8a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Append Multiple Element at a specific index&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Agregar elementos m&amp;uacute;ltiples en un &amp;iacute;ndice espec&amp;iacute;fico&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d1a8239920f281a041ac9ffa431d73371815fffe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Append Single Element at a specific index&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Agregar elemento &amp;uacute;nico en un &amp;iacute;ndice espec&amp;iacute;fico&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e676bd1d1023fdd59465ac8bb506ebd374d96104" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DEMO:&lt;/strong&gt;&lt;a href=&quot;http://jsfiddle.net/UPphH/&quot;&gt;http://jsfiddle.net/UPphH/&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;DEMO:&lt;/strong&gt;&lt;a href=&quot;http://jsfiddle.net/UPphH/&quot;&gt;http://jsfiddle.net/UPphH/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="88d579f187963377cfd2012ed4ceeee690c68fa8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here are two ways :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Aqu&amp;iacute; hay dos formas:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f8e01739d5b6815e58b82ad6033855dbc821cb51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OR&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;OR&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ab3f3edd086a910ca55fa89cf44468663a46e6ee" translate="yes" xml:space="preserve">
          <source>A bit of an older thread, but I have to agree with Redu above because splice definitely has a bit of a confusing interface. And the response given by cdbajorin that &quot;it only returns an empty array when the second parameter is 0. If it's greater than 0, it returns the items removed from the array&quot; is, while accurate, proving the point. The function's intent is to splice or as said earlier by Jakob Keller, &quot;to join or connect, also to change. You have an established array that you are now changing which would involve adding or removing elements....&quot; Given that, the return value of the elements, if any, that were removed is awkward at best. And I 100% agree that this method could have been better suited to chaining if it had returned what seems natural, a new array with the spliced elements added. Then you could do things like [&quot;19&quot;, &quot;17&quot;].splice(1,0,&quot;18&quot;).join(&quot;...&quot;) or whatever you like with the returned array. The fact that it returns what was removed is just kinda nonsense IMHO. If the intention of the method was to &quot;cut out a set of elements&quot; and that was it's only intent, maybe. It seems like if I don't know what I'm cutting out already though, I probably have little reason to cut those elements out, doesn't it? It would be better if it behaved like concat, map, reduce, slice, etc where a new array is made from the existing array rather than mutating the existing array. Those are all chainable, and that IS a significant issue. It's rather common to chain array manipulation. Seems like the language needs to go one or the other direction and try to stick to it as much as possible. Javascript being functional and less declarative, it just seems like a strange deviation from the norm.</source>
          <target state="translated">Un poco de un hilo más viejo,pero tengo que estar de acuerdo con Redu arriba porque el empalme definitivamente tiene un poco de una interfaz confusa.Y la respuesta dada por cdbajorin de que &quot;sólo devuelve un array vacío cuando el segundo parámetro es 0.Si es mayor de 0,devuelve los elementos eliminados del array&quot; es,aunque precisa,prueba el punto.La intención de la función es empalmar o,como dijo antes Jakob Keller,&quot;unir o conectar,también cambiar&quot;.Tienes una matriz establecida que ahora estás cambiando,lo que implicaría añadir o quitar elementos...&quot; Dado eso,el valor de retorno de los elementos,si los hubiera,que fueron eliminados es incómodo en el mejor de los casos.Y estoy 100% de acuerdo en que este método podría haber sido más adecuado para encadenar si hubiera devuelto lo que parece natural,una nueva matriz con los elementos empalmados añadidos.Entonces podrías hacer cosas como [&quot;19&quot;,&quot;17&quot;].splice(1,0,&quot;18&quot;).join(&quot;...&quot;)o lo que quieras con la matriz devuelta.El hecho de que devuelva lo que se ha eliminado es una especie de IMHO sin sentido.Si la intención del método era &quot;cortar un conjunto de elementos&quot; y esa era su única intención,tal vez.Parece que si no sé lo que estoy eliminando ya,probablemente tengo pocas razones para eliminar esos elementos,¿no? Sería mejor si se comportara como concat,mapear,reducir,rebanar,etc.donde se hace un nuevo conjunto a partir del conjunto existente en lugar de mutar el conjunto existente.Todo eso es encadenable,y eso ES un problema significativo.Es bastante común la manipulación de arreglos en cadena.Parece que el lenguaje tiene que ir en una u otra dirección y tratar de adherirse a ella tanto como sea posible.Siendo Javascript funcional y menos declarativo,parece una extraña desviación de la norma.</target>
        </trans-unit>
        <trans-unit id="8b661ad9df8d48ec23c8d247f0ccaf9817d934bb" translate="yes" xml:space="preserve">
          <source>Also here are some functions to illustrate both examples:</source>
          <target state="translated">También aquí hay algunas funciones para ilustrar ambos ejemplos:</target>
        </trans-unit>
        <trans-unit id="dc44bfeb28806e966991b987afb7c9fd496cb75a" translate="yes" xml:space="preserve">
          <source>And then I call it below.</source>
          <target state="translated">Y luego lo llamo abajo.</target>
        </trans-unit>
        <trans-unit id="f22c8026d6f436a9ed9b0a55c38568fa125ff9a8" translate="yes" xml:space="preserve">
          <source>And then iterate the object, placing the newly created temporary objects into the desired locations in the array without really any &quot;sorting&quot; taking place.</source>
          <target state="translated">Y luego iterar el objeto,colocando los objetos temporales recién creados en las ubicaciones deseadas en la matriz sin que realmente se produzca ninguna &quot;clasificación&quot;.</target>
        </trans-unit>
        <trans-unit id="29928d781cdadf175da5204e6085c8cab9378f65" translate="yes" xml:space="preserve">
          <source>And this is how you use the functions:</source>
          <target state="translated">Y así es como se usan las funciones:</target>
        </trans-unit>
        <trans-unit id="90e33061a75f32f6c6ad98e6d9f5619a7e9e8f57" translate="yes" xml:space="preserve">
          <source>Another possible solution, with usage of &lt;code&gt;Array#reduce&lt;/code&gt;.</source>
          <target state="translated">Otra posible soluci&amp;oacute;n, con el uso de &lt;code&gt;Array#reduce&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="860a292478931fd5d82e63ffa3f372929a4736fd" translate="yes" xml:space="preserve">
          <source>Anyone who's still having issues with this one and have tried all the options above and never got it. I'm sharing my solution, this is to take consideration that you don't wan't to explicitly state the properties of your object vs the array.</source>
          <target state="translated">Cualquiera que todavía tenga problemas con este y haya intentado todas las opciones anteriores y nunca lo consiguió.Estoy compartiendo mi solución,esto es para tener en cuenta que no quieres declarar explícitamente las propiedades de tu objeto frente a la matriz.</target>
        </trans-unit>
        <trans-unit id="475c9e5beaff7b5f3da1aa72ac29cc8b84a5af24" translate="yes" xml:space="preserve">
          <source>Custom array &lt;code&gt;insert&lt;/code&gt; methods</source>
          <target state="translated">M&amp;eacute;todos de &lt;code&gt;insert&lt;/code&gt; matriz personalizados</target>
        </trans-unit>
        <trans-unit id="4bcff3f268979530320804f012139bd11e229259" translate="yes" xml:space="preserve">
          <source>Even though this has been answered already, I'm adding this note for an alternative approach.</source>
          <target state="translated">Aunque esto ya ha sido contestado,añado esta nota para un enfoque alternativo.</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Ampliar fragmento</target>
        </trans-unit>
        <trans-unit id="d275542cdfe9842b3f1c307576e12a7298a3a12a" translate="yes" xml:space="preserve">
          <source>Finally here is a jsFiddle so you can see it for youself: &lt;a href=&quot;http://jsfiddle.net/luisperezphd/Wc8aS/&quot;&gt;http://jsfiddle.net/luisperezphd/Wc8aS/&lt;/a&gt;</source>
          <target state="translated">Finalmente, aqu&amp;iacute; hay un jsFiddle para que pueda verlo por usted mismo: &lt;a href=&quot;http://jsfiddle.net/luisperezphd/Wc8aS/&quot;&gt;http://jsfiddle.net/luisperezphd/Wc8aS/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3aee9f665a2dd3d71957d03efd86a6ff62c93b90" translate="yes" xml:space="preserve">
          <source>First the source object, a JSONB string retrieved from PostgreSQL. I wanted to have it sorted by the &quot;order&quot; property in each child object.</source>
          <target state="translated">Primero el objeto fuente,una cadena JSONB recuperada de PostgreSQL.Quería tenerla ordenada por la propiedad &quot;order&quot; en cada objeto hijo.</target>
        </trans-unit>
        <trans-unit id="90a693afb1f86033567ce0bfdefafca6a23c4ffe" translate="yes" xml:space="preserve">
          <source>For proper functional programming and chaining purposes an invention of &lt;code&gt;Array.prototype.insert()&lt;/code&gt; is essential. Actually splice could have been perfect if it had returned the mutated array instead of a totally meaningless empty array. So here it goes</source>
          <target state="translated">Para fines de programaci&amp;oacute;n y encadenamiento funcional adecuados, es esencial una invenci&amp;oacute;n de &lt;code&gt;Array.prototype.insert()&lt;/code&gt; . En realidad, el empalme podr&amp;iacute;a haber sido perfecto si hubiera devuelto la matriz mutada en lugar de una matriz vac&amp;iacute;a totalmente sin sentido. As&amp;iacute; que aqu&amp;iacute; va</target>
        </trans-unit>
        <trans-unit id="1f015ef38b60a9b45df796850fe8cfba1208cafc" translate="yes" xml:space="preserve">
          <source>Here's a working function that I uses in one of my application.</source>
          <target state="translated">Aquí hay una función de trabajo que uso en una de mis aplicaciones.</target>
        </trans-unit>
        <trans-unit id="36d0da20006443cc265f16731b7449e6ef344e79" translate="yes" xml:space="preserve">
          <source>How to insert an item into an array at a specific index (JavaScript)</source>
          <target state="translated">Cómo insertar un artículo en una matriz en un índice específico (JavaScript)</target>
        </trans-unit>
        <trans-unit id="b9d1ed6b75c812d8077c31159668ba9b29f4be4d" translate="yes" xml:space="preserve">
          <source>I am looking for a JavaScript array insert method, in the style of:</source>
          <target state="translated">Estoy buscando un método de inserción de una matriz de JavaScript,al estilo de:</target>
        </trans-unit>
        <trans-unit id="544bacd74da4af30d6efbdb2da5a621c4550018d" translate="yes" xml:space="preserve">
          <source>I recommend using pure &lt;strong&gt;JavaScript&lt;/strong&gt; in this case, also there is no insert method in JavaScript, but we have a method which is a  &lt;strong&gt;built-in Array&lt;/strong&gt; method which does the job for you, it's called &lt;strong&gt;splice&lt;/strong&gt;...</source>
          <target state="translated">Recomiendo usar &lt;strong&gt;JavaScript&lt;/strong&gt; puro en este caso, tampoco hay un m&amp;eacute;todo de inserci&amp;oacute;n en JavaScript, pero tenemos un m&amp;eacute;todo que es un m&amp;eacute;todo &lt;strong&gt;Array incorporado&lt;/strong&gt; que hace el trabajo por usted, se llama &lt;strong&gt;empalme&lt;/strong&gt; ...</target>
        </trans-unit>
        <trans-unit id="2756fa3617e8bc1f2910a304bcab75e80de7abe2" translate="yes" xml:space="preserve">
          <source>I tried this and it is working fine!</source>
          <target state="translated">¡Intenté esto y está funcionando bien!</target>
        </trans-unit>
        <trans-unit id="74cc64f9e5c4d9804b820e8b44aa62d33a285741" translate="yes" xml:space="preserve">
          <source>I wanted to place a &lt;strong&gt;known number&lt;/strong&gt; of items into an array, into specific positions, as they come off of an &quot;associative array&quot; (i.e. an object) which by definition is not guaranteed to be in a sorted order. I wanted the resulting array to be an array of objects, but the objects to be in a specific order in the array since an array guarantees their order. So I did this.</source>
          <target state="translated">Quer&amp;iacute;a colocar un &lt;strong&gt;n&amp;uacute;mero conocido&lt;/strong&gt; de elementos en una matriz, en posiciones espec&amp;iacute;ficas, ya que provienen de una &quot;matriz asociativa&quot; (es decir, un objeto) que, por definici&amp;oacute;n, no se garantiza que est&amp;eacute; en un orden ordenado. Quer&amp;iacute;a que la matriz resultante fuera una matriz de objetos, pero los objetos estar&amp;iacute;an en un orden espec&amp;iacute;fico en la matriz ya que una matriz garantiza su orden. Entonces hice esto.</target>
        </trans-unit>
        <trans-unit id="3f236306597464fd9a64d527b52af6c49b59f53a" translate="yes" xml:space="preserve">
          <source>If you are concerned about mutating the array (for example, if using Immutable.js), you can instead use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&quot;&gt;&lt;code&gt;slice()&lt;/code&gt;&lt;/a&gt;, not to be confused with &lt;code&gt;splice()&lt;/code&gt; with a 'p'.</source>
          <target state="translated">Si le preocupa mutar la matriz (por ejemplo, si usa Immutable.js), puede usar &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&quot;&gt; &lt;code&gt;slice()&lt;/code&gt; &lt;/a&gt; , que no debe confundirse con &lt;code&gt;splice()&lt;/code&gt; con una 'p'.</target>
        </trans-unit>
        <trans-unit id="483a172849c1d36e36b12cb5d32a0f9a38998391" translate="yes" xml:space="preserve">
          <source>If you want to insert multiple elements into an array at once check out this Stack Overflow answer: &lt;a href=&quot;https://stackoverflow.com/questions/1348178/a-better-way-to-splice-an-arrray-into-an-array-in-javascript&quot;&gt;A better way to splice an array into an array in javascript&lt;/a&gt;</source>
          <target state="translated">Si desea insertar varios elementos en una matriz a la vez, consulte esta respuesta de desbordamiento de pila: &lt;a href=&quot;https://stackoverflow.com/questions/1348178/a-better-way-to-splice-an-arrray-into-an-array-in-javascript&quot;&gt;una mejor manera de empalmar una matriz en una matriz en javascript&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e643adfb3b1686303f90df03cbb1b3659395dfc0" translate="yes" xml:space="preserve">
          <source>In this example we will create an array and add an element to it into index 2:</source>
          <target state="translated">En este ejemplo crearemos una matriz y le añadiremos un elemento en el índice 2:</target>
        </trans-unit>
        <trans-unit id="6f820d1d8895a41be8c8d35e6ba81be89e5a5645" translate="yes" xml:space="preserve">
          <source>Index is the position where you want to insert or delete the element.
0 i.e. the second parameters defines the number of element from the index to be removed
item are the new entries which you want to make in array. It can be one or more than one.</source>
          <target state="translated">El índice es la posición en la que se quiere insertar o eliminar el elemento.0 es decir,el segundo parámetro que define el número de elemento del índice que debe ser eliminado es el de las nuevas entradas que quieres hacer en la matriz.Puede ser uno o más de uno.</target>
        </trans-unit>
        <trans-unit id="ddfa21ff23ab326ceea7c37b06738d301327f869" translate="yes" xml:space="preserve">
          <source>It can insert multiple elements (as native &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt; does) and supports chaining:</source>
          <target state="translated">Puede insertar m&amp;uacute;ltiples elementos (como lo hace el &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt; &lt;code&gt;splice&lt;/code&gt; &lt;/a&gt; nativo) y admite el encadenamiento:</target>
        </trans-unit>
        <trans-unit id="5cfc95d36d424d2cda631d31b6c12ba8657a29cd" translate="yes" xml:space="preserve">
          <source>It can merge arrays from the arguments with the given array and also supports chaining:</source>
          <target state="translated">Puede fusionar matrices de los argumentos con la matriz dada y también soporta el encadenamiento:</target>
        </trans-unit>
        <trans-unit id="7ced62006201ed658eec69bc5e9178843c7f41e3" translate="yes" xml:space="preserve">
          <source>It will return 3, but if we check the arr now, we have:</source>
          <target state="translated">Volverá 3,pero si comprobamos el arribo ahora,lo hemos hecho:</target>
        </trans-unit>
        <trans-unit id="7975cd93b61d5fb446d1b4a82d208acb79729b34" translate="yes" xml:space="preserve">
          <source>Let's see what we have done...</source>
          <target state="translated">Veamos lo que hemos hecho...</target>
        </trans-unit>
        <trans-unit id="857e8992ae0915ef69b55ae76a6431d99d285563" translate="yes" xml:space="preserve">
          <source>Let's see what's &lt;strong&gt;splice()&lt;/strong&gt;...</source>
          <target state="translated">Veamos qu&amp;eacute; es &lt;strong&gt;splice ()&lt;/strong&gt; ...</target>
        </trans-unit>
        <trans-unit id="d6fa581ef677ef0031b695752077bdee04f3ba96" translate="yes" xml:space="preserve">
          <source>OK, imagine we have this array below:</source>
          <target state="translated">Bien,imagina que tenemos esta matriz abajo:</target>
        </trans-unit>
        <trans-unit id="c5af1b321a254fe233907533db7dfbf1fee498ba" translate="yes" xml:space="preserve">
          <source>Other than splice, you can use this approach which will not mutate the original array, but will create a new array with the added item. You should usually avoid mutation whenever possible. I'm using ES6 spread operator here.</source>
          <target state="translated">Aparte del empalme,puedes usar este enfoque que no mutará el arreglo original,sino que creará un nuevo arreglo con el elemento añadido.Normalmente deberías evitar la mutación siempre que sea posible.Estoy usando el operador de propagación ES6 aquí.</target>
        </trans-unit>
        <trans-unit id="a6afed8c49e250a1e5c5d1bf8e8aa8ab7f19d1bf" translate="yes" xml:space="preserve">
          <source>Preferably in jQuery, but any JavaScript implementation will do at this point.</source>
          <target state="translated">Preferiblemente en jQuery,pero cualquier implementación de JavaScript servirá en este momento.</target>
        </trans-unit>
        <trans-unit id="6c674ddcd6507d4a64241e92ef6ff9ade6f5fe7b" translate="yes" xml:space="preserve">
          <source>Since the number of nodes in the object is known, I first create an array with the specified length:</source>
          <target state="translated">Como se conoce el número de nodos en el objeto,primero creo una matriz con la longitud especificada:</target>
        </trans-unit>
        <trans-unit id="31a3e983b6ca43e81655bdbe27f9741aa0ca03a7" translate="yes" xml:space="preserve">
          <source>So at this way we can return a new array (will be a cool functional way - more much better than use push or splice) with the element inserted at index, and if the index is greater than the length of the array it will be inserted at the end.</source>
          <target state="translated">Así que de esta manera podemos devolver una nueva matriz (será una forma funcional genial-mucho mejor que usar el empuje o el empalme)con el elemento insertado en el índice,y si el índice es mayor que la longitud de la matriz se insertará al final.</target>
        </trans-unit>
        <trans-unit id="0dae2c63be0a01f5bc2a528ce68677498e296bf2" translate="yes" xml:space="preserve">
          <source>So far, so good, but how we can add a new element to array using splice?
Let's put back 3 in the arr...</source>
          <target state="translated">Hasta ahora,todo bien,¿pero cómo podemos añadir un nuevo elemento al conjunto usando el empalme? Volvamos a poner 3 en el arreglo...</target>
        </trans-unit>
        <trans-unit id="2bd9605e48af5f626917de2c417f7beaa48d7cf6" translate="yes" xml:space="preserve">
          <source>Taking profit of reduce method as following:</source>
          <target state="translated">Aprovechando el método de reducción como sigue:</target>
        </trans-unit>
        <trans-unit id="d4607f5f4d353df616911ce44cbb32ce72dbbf7a" translate="yes" xml:space="preserve">
          <source>The splice() method changes the contents of an array by removing
  existing elements and/or adding new elements.</source>
          <target state="translated">El método splice()cambia el contenido de una matriz eliminando los elementos existentes y/o añadiendo nuevos elementos.</target>
        </trans-unit>
        <trans-unit id="62a2fb04bbb69e406cad00528937349a39da9047" translate="yes" xml:space="preserve">
          <source>Then you can use it like:</source>
          <target state="translated">Entonces puedes usarlo como:</target>
        </trans-unit>
        <trans-unit id="08ba34b2203e8ccf4cdba32251561d21147d239d" translate="yes" xml:space="preserve">
          <source>This can be used to add more than one item by tweaking the function a bit to use the rest operator for the new items, and spread that in the returned result as well</source>
          <target state="translated">Esto puede ser usado para añadir más de un artículo ajustando un poco la función para usar el operador del resto para los nuevos artículos,y extender eso en el resultado devuelto también</target>
        </trans-unit>
        <trans-unit id="fa479ef2769d6bf952621237f3344b2008c0f730" translate="yes" xml:space="preserve">
          <source>This checks if item exit</source>
          <target state="translated">Esto comprueba si el artículo sale</target>
        </trans-unit>
        <trans-unit id="d6e6345faa235e30eb53880b945a2375948867ac" translate="yes" xml:space="preserve">
          <source>This is a combination of iterating the reference array and comparing it to the object you wanted to check, convert both of them into a string then iterated if it matched. Then you can just count. This can be improved but this is where I settled. Hope this helps.</source>
          <target state="translated">Esta es una combinación de iterar la matriz de referencia y compararla con el objeto que querías comprobar,convertir ambos en una cadena y luego iterarla si coincide.Entonces puedes simplemente contar.Esto puede ser mejorado pero aquí es donde me establecí.Espero que esto ayude.</target>
        </trans-unit>
        <trans-unit id="93cd6d38f8c570772e3855142c42f20553973157" translate="yes" xml:space="preserve">
          <source>This is showing how each item in splice work:</source>
          <target state="translated">Esto muestra cómo funciona cada artículo en el empalme:</target>
        </trans-unit>
        <trans-unit id="42bf72c68d10903f64ee4fe7096ad4643cacad67" translate="yes" xml:space="preserve">
          <source>We can remove &lt;code&gt;3&lt;/code&gt; like this:</source>
          <target state="translated">Podemos eliminar &lt;code&gt;3&lt;/code&gt; como este:</target>
        </trans-unit>
        <trans-unit id="1018f207660dbe71bd0035087955b6b126503d46" translate="yes" xml:space="preserve">
          <source>We use &lt;strong&gt;splice&lt;/strong&gt; again, but this time for the second argument, we pass &lt;strong&gt;0&lt;/strong&gt;, means we want to delete no item, but at the same time, we add third argument which is 3 that will be added at second index...</source>
          <target state="translated">Usamos &lt;strong&gt;empalme&lt;/strong&gt; nuevamente, pero esta vez para el segundo argumento, pasamos &lt;strong&gt;0&lt;/strong&gt; , significa que no queremos eliminar ning&amp;uacute;n elemento, pero al mismo tiempo, agregamos un tercer argumento que es 3 que se agregar&amp;aacute; en el segundo &amp;iacute;ndice ...</target>
        </trans-unit>
        <trans-unit id="d98ce89b0f0cf820b708648a8ffaceb787909d98" translate="yes" xml:space="preserve">
          <source>Well ok the above with the &lt;code&gt;Array.prototype.splice()&lt;/code&gt; one mutates the original array and some might complain like &quot;you shouldn't modify what doesn't belong to you&quot; and that might turn out to be right as well. So for the public welfare i would like to give another &lt;code&gt;Array.prototype.insert()&lt;/code&gt; which doesn't mutate the original array. Here it goes;</source>
          <target state="translated">Bien, lo anterior con &lt;code&gt;Array.prototype.splice()&lt;/code&gt; uno muta la matriz original y algunos podr&amp;iacute;an quejarse como &quot;no deber&amp;iacute;as modificar lo que no te pertenece&quot; y eso podr&amp;iacute;a resultar correcto tambi&amp;eacute;n. Entonces, para el bienestar p&amp;uacute;blico, me gustar&amp;iacute;a dar otro &lt;code&gt;Array.prototype.insert()&lt;/code&gt; que no mute la matriz original. Aqu&amp;iacute; va;</target>
        </trans-unit>
        <trans-unit id="da66e27bf198c132cf6b03f5e1cc639501169ba7" translate="yes" xml:space="preserve">
          <source>What you want is the &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; function on the native array object.</source>
          <target state="translated">Lo que desea es la funci&amp;oacute;n de &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt; &lt;code&gt;splice&lt;/code&gt; &lt;/a&gt;&lt;/strong&gt; en el objeto de matriz nativa.</target>
        </trans-unit>
        <trans-unit id="d06b6746be798753f00148abc36fa3d6b8b2852b" translate="yes" xml:space="preserve">
          <source>Which will delete &lt;strong&gt;2 items&lt;/strong&gt; at index 2, then add &lt;strong&gt;3&lt;/strong&gt; at index 2 and result will be:</source>
          <target state="translated">Lo cual eliminar&amp;aacute; &lt;strong&gt;2 elementos&lt;/strong&gt; en el &amp;iacute;ndice 2, luego agregar&amp;aacute; &lt;strong&gt;3&lt;/strong&gt; en el &amp;iacute;ndice 2 y el resultado ser&amp;aacute;:</target>
        </trans-unit>
        <trans-unit id="ede543f3ddd43ced64afdab4b612462b1b0e1d9e" translate="yes" xml:space="preserve">
          <source>You can implement the &lt;code&gt;Array.insert&lt;/code&gt; method by doing this:</source>
          <target state="translated">Puede implementar el m&amp;eacute;todo &lt;code&gt;Array.insert&lt;/code&gt; haciendo esto:</target>
        </trans-unit>
        <trans-unit id="11135937a075ca3187dd1eeb96ceb6b48057a2f9" translate="yes" xml:space="preserve">
          <source>You should be aware, that we can &lt;strong&gt;delete&lt;/strong&gt; and &lt;strong&gt;add&lt;/strong&gt; at the same time, for example now we can do:</source>
          <target state="translated">Debe tener en cuenta que podemos &lt;strong&gt;eliminar&lt;/strong&gt; y &lt;strong&gt;agregar&lt;/strong&gt; al mismo tiempo, por ejemplo, ahora podemos hacer:</target>
        </trans-unit>
        <trans-unit id="e764621fb804a516c11bae65dd7002a1111c567c" translate="yes" xml:space="preserve">
          <source>array.splice(start, deleteCount, item1, item2, item3 ...)</source>
          <target state="translated">array.splice(start,deleteCount,item1,item2,item3 ...)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
