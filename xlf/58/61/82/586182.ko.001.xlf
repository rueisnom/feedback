<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/586182">
    <body>
      <group id="586182">
        <trans-unit id="667b0ed13255663dafe017a71b3a7a8189df18e7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://masteringjs.io/tutorials/fundamentals/array-splice&quot;&gt;&lt;code&gt;Array#splice()&lt;/code&gt;&lt;/a&gt; is the way to go, unless you really want to avoid mutating the array. Given 2 arrays &lt;code&gt;arr1&lt;/code&gt; and &lt;code&gt;arr2&lt;/code&gt;, here's how you would insert the contents of &lt;code&gt;arr2&lt;/code&gt; into &lt;code&gt;arr1&lt;/code&gt; after the first element:</source>
          <target state="translated">실제로 배열을 변경하지 않으려면 &lt;a href=&quot;https://masteringjs.io/tutorials/fundamentals/array-splice&quot;&gt; &lt;code&gt;Array#splice()&lt;/code&gt; &lt;/a&gt; 를 사용하십시오. 2 개의 배열 &lt;code&gt;arr1&lt;/code&gt; 및 &lt;code&gt;arr2&lt;/code&gt; 가 주어지면 다음은 첫 번째 요소 다음에 &lt;code&gt;arr2&lt;/code&gt; 의 내용을 arr1 에 삽입하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="729a1c55ee7a2a7823b6497476a9b016a28221c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arr.splice(index, 0, item);&lt;/code&gt; will insert &lt;code&gt;item&lt;/code&gt; into &lt;code&gt;arr&lt;/code&gt; at the specified index (deleting &lt;code&gt;0&lt;/code&gt; items first, that is, it's just an insert).</source>
          <target state="translated">&lt;code&gt;arr.splice(index, 0, item);&lt;/code&gt; 지정된 인덱스에서 &lt;code&gt;item&lt;/code&gt; 을 &lt;code&gt;arr&lt;/code&gt; 에 삽입합니다 (먼저 &lt;code&gt;0&lt;/code&gt; 개의 항목을 삭제합니다. 즉, 단지 삽입입니다).</target>
        </trans-unit>
        <trans-unit id="caf243187fe6b18027f328eb42df3b89e9d8e6cd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;1. With multiple arguments and chaining support&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;1. 여러 개의 인수와 연결 지원&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3f2d359d3e2d868480f44df182f2394d1c5edd7f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;2. With array-type arguments merging and chaining support&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;2. 배열 유형 인수 병합 및 체인 지원&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fb9332801774221201342fa53990e401a706a8a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Append Multiple Element at a specific index&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;특정 색인에 여러 요소 추가&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d1a8239920f281a041ac9ffa431d73371815fffe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Append Single Element at a specific index&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;특정 색인에 단일 요소 추가&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e676bd1d1023fdd59465ac8bb506ebd374d96104" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DEMO:&lt;/strong&gt;&lt;a href=&quot;http://jsfiddle.net/UPphH/&quot;&gt;http://jsfiddle.net/UPphH/&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;DEMO:&lt;/strong&gt;&lt;a href=&quot;http://jsfiddle.net/UPphH/&quot;&gt;http://jsfiddle.net/UPphH/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="88d579f187963377cfd2012ed4ceeee690c68fa8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here are two ways :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;두 가지 방법이 있습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f8e01739d5b6815e58b82ad6033855dbc821cb51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OR&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;OR&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ab3f3edd086a910ca55fa89cf44468663a46e6ee" translate="yes" xml:space="preserve">
          <source>A bit of an older thread, but I have to agree with Redu above because splice definitely has a bit of a confusing interface. And the response given by cdbajorin that &quot;it only returns an empty array when the second parameter is 0. If it's greater than 0, it returns the items removed from the array&quot; is, while accurate, proving the point. The function's intent is to splice or as said earlier by Jakob Keller, &quot;to join or connect, also to change. You have an established array that you are now changing which would involve adding or removing elements....&quot; Given that, the return value of the elements, if any, that were removed is awkward at best. And I 100% agree that this method could have been better suited to chaining if it had returned what seems natural, a new array with the spliced elements added. Then you could do things like [&quot;19&quot;, &quot;17&quot;].splice(1,0,&quot;18&quot;).join(&quot;...&quot;) or whatever you like with the returned array. The fact that it returns what was removed is just kinda nonsense IMHO. If the intention of the method was to &quot;cut out a set of elements&quot; and that was it's only intent, maybe. It seems like if I don't know what I'm cutting out already though, I probably have little reason to cut those elements out, doesn't it? It would be better if it behaved like concat, map, reduce, slice, etc where a new array is made from the existing array rather than mutating the existing array. Those are all chainable, and that IS a significant issue. It's rather common to chain array manipulation. Seems like the language needs to go one or the other direction and try to stick to it as much as possible. Javascript being functional and less declarative, it just seems like a strange deviation from the norm.</source>
          <target state="translated">조금 오래된 스레드이지만 스플 라이스에는 분명히 혼란스러운 인터페이스가 있기 때문에 위의 Redu에 동의해야합니다. cdbajorin이 제공 한 응답은 &quot;두 번째 매개 변수가 0 일 때 빈 배열 만 반환합니다.이 값이 0보다 크면 배열에서 제거 된 항목을 반환합니다&quot;는 정확하지만 포인트를 증명합니다. 이 기능의 목적은 Jakob Keller가 &quot;연결하거나 연결하거나 변경하는 것&quot;과 같이 스플 라이스하거나 이전에 말한 것처럼, 요소를 추가하거나 제거하는 것과 관련하여 현재 변경중인 기존 배열이 있습니다 .... 제거 된 요소의 값을 반환하는 것이 가장 어색합니다. 그리고 100 %는이 방법이 스 플라이 싱 된 요소가 추가 된 새로운 배열 인 자연스럽게 보이는 것을 반환 한 경우 체인에 더 적합 할 수 있음에 동의합니다. 그런 다음 [ &quot;19&quot;, &quot;17&quot;]. splice (1,0, &quot;18&quot;). join ( &quot;...&quot;) 또는 반환 된 배열로 원하는 것을 수행 할 수 있습니다. 그것이 제거 된 것을 반환한다는 사실은 말도 안되는 IMHO입니다. 이 방법의 의도가 &quot;요소 세트를 잘라내는 것&quot;이고 이것이 의도 된 것일 경우 일 수 있습니다. 내가 이미 잘라 내고있는 것을 모른다면 아마도 그 요소를 잘라낼 이유가 거의 없을 것 같습니다. 기존 배열을 변경하지 않고 기존 배열에서 새 배열을 만드는 concat, map, reduce, slice 등의 동작을 수행하는 것이 좋습니다. 그것들은 모두 연결할 수 있으며 중요한 문제입니다. 배열 조작을 체인화하는 것이 일반적입니다. 언어가 하나 또는 다른 방향으로 가고 가능한 한 많은 언어를 고수하려고하는 것 같습니다. 자바 스크립트는 기능적이고 덜 선언적이며, 표준에서 이상한 편차처럼 보입니다.</target>
        </trans-unit>
        <trans-unit id="8b661ad9df8d48ec23c8d247f0ccaf9817d934bb" translate="yes" xml:space="preserve">
          <source>Also here are some functions to illustrate both examples:</source>
          <target state="translated">다음은 두 예제를 모두 설명하는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="dc44bfeb28806e966991b987afb7c9fd496cb75a" translate="yes" xml:space="preserve">
          <source>And then I call it below.</source>
          <target state="translated">그런 다음 아래에서 호출합니다.</target>
        </trans-unit>
        <trans-unit id="f22c8026d6f436a9ed9b0a55c38568fa125ff9a8" translate="yes" xml:space="preserve">
          <source>And then iterate the object, placing the newly created temporary objects into the desired locations in the array without really any &quot;sorting&quot; taking place.</source>
          <target state="translated">그런 다음 새로 생성 된 임시 객체를 실제로 &quot;정렬&quot;하지 않고 배열의 원하는 위치에 배치하여 객체를 반복합니다.</target>
        </trans-unit>
        <trans-unit id="29928d781cdadf175da5204e6085c8cab9378f65" translate="yes" xml:space="preserve">
          <source>And this is how you use the functions:</source>
          <target state="translated">그리고 이것은 당신이 기능을 사용하는 방법입니다 :</target>
        </trans-unit>
        <trans-unit id="90e33061a75f32f6c6ad98e6d9f5619a7e9e8f57" translate="yes" xml:space="preserve">
          <source>Another possible solution, with usage of &lt;code&gt;Array#reduce&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Array#reduce&lt;/code&gt; 사용으로 가능한 또 다른 솔루션입니다.</target>
        </trans-unit>
        <trans-unit id="860a292478931fd5d82e63ffa3f372929a4736fd" translate="yes" xml:space="preserve">
          <source>Anyone who's still having issues with this one and have tried all the options above and never got it. I'm sharing my solution, this is to take consideration that you don't wan't to explicitly state the properties of your object vs the array.</source>
          <target state="translated">이 문제에 여전히 문제가 있고 위의 모든 옵션을 시도했지만 결코 얻지 못한 사람. 내 솔루션을 공유하고 있습니다. 이것은 객체 대 배열의 속성을 명시 적으로 언급하고 싶지 않다는 것을 고려하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="475c9e5beaff7b5f3da1aa72ac29cc8b84a5af24" translate="yes" xml:space="preserve">
          <source>Custom array &lt;code&gt;insert&lt;/code&gt; methods</source>
          <target state="translated">맞춤형 배열 &lt;code&gt;insert&lt;/code&gt; 방법</target>
        </trans-unit>
        <trans-unit id="4bcff3f268979530320804f012139bd11e229259" translate="yes" xml:space="preserve">
          <source>Even though this has been answered already, I'm adding this note for an alternative approach.</source>
          <target state="translated">이것이 이미 답변되었지만 대안 접근 방식 으로이 메모를 추가하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">스 니펫 확장</target>
        </trans-unit>
        <trans-unit id="d275542cdfe9842b3f1c307576e12a7298a3a12a" translate="yes" xml:space="preserve">
          <source>Finally here is a jsFiddle so you can see it for youself: &lt;a href=&quot;http://jsfiddle.net/luisperezphd/Wc8aS/&quot;&gt;http://jsfiddle.net/luisperezphd/Wc8aS/&lt;/a&gt;</source>
          <target state="translated">마지막으로 여기 jsFiddle이 있으므로 직접 볼 수 있습니다. &lt;a href=&quot;http://jsfiddle.net/luisperezphd/Wc8aS/&quot;&gt;http://jsfiddle.net/luisperezphd/Wc8aS/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3aee9f665a2dd3d71957d03efd86a6ff62c93b90" translate="yes" xml:space="preserve">
          <source>First the source object, a JSONB string retrieved from PostgreSQL. I wanted to have it sorted by the &quot;order&quot; property in each child object.</source>
          <target state="translated">먼저 PostgreSQL에서 검색 한 JSONB 문자열 인 소스 객체입니다. 각 자식 개체의 &quot;order&quot;속성을 기준으로 정렬하고 싶었습니다.</target>
        </trans-unit>
        <trans-unit id="90a693afb1f86033567ce0bfdefafca6a23c4ffe" translate="yes" xml:space="preserve">
          <source>For proper functional programming and chaining purposes an invention of &lt;code&gt;Array.prototype.insert()&lt;/code&gt; is essential. Actually splice could have been perfect if it had returned the mutated array instead of a totally meaningless empty array. So here it goes</source>
          <target state="translated">적절한 기능적 프로그래밍과 체인 목적을 위해서는 &lt;code&gt;Array.prototype.insert()&lt;/code&gt; 의 발명이 필수적입니다. 실제로 의미없는 빈 배열 대신 돌연변이 배열을 반환하면 실제로 스플 라이스가 완벽했을 수 있습니다. 그래서 여기에 간다</target>
        </trans-unit>
        <trans-unit id="1f015ef38b60a9b45df796850fe8cfba1208cafc" translate="yes" xml:space="preserve">
          <source>Here's a working function that I uses in one of my application.</source>
          <target state="translated">내 응용 프로그램 중 하나에서 사용하는 작동 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="36d0da20006443cc265f16731b7449e6ef344e79" translate="yes" xml:space="preserve">
          <source>How to insert an item into an array at a specific index (JavaScript)</source>
          <target state="translated">특정 색인에서 배열에 항목을 삽입하는 방법 (JavaScript)</target>
        </trans-unit>
        <trans-unit id="b9d1ed6b75c812d8077c31159668ba9b29f4be4d" translate="yes" xml:space="preserve">
          <source>I am looking for a JavaScript array insert method, in the style of:</source>
          <target state="translated">다음과 같은 스타일의 JavaScript 배열 삽입 방법을 찾고 있습니다.</target>
        </trans-unit>
        <trans-unit id="544bacd74da4af30d6efbdb2da5a621c4550018d" translate="yes" xml:space="preserve">
          <source>I recommend using pure &lt;strong&gt;JavaScript&lt;/strong&gt; in this case, also there is no insert method in JavaScript, but we have a method which is a  &lt;strong&gt;built-in Array&lt;/strong&gt; method which does the job for you, it's called &lt;strong&gt;splice&lt;/strong&gt;...</source>
          <target state="translated">이 경우 순수한 &lt;strong&gt;JavaScript&lt;/strong&gt; 를 사용하는 것이 좋습니다. 또한 JavaScript에는 insert 메소드가 없지만 &lt;strong&gt;내장 배열&lt;/strong&gt; 메소드 인 메소드가 있습니다. &lt;strong&gt;스플 라이스&lt;/strong&gt; 라고합니다 ...</target>
        </trans-unit>
        <trans-unit id="2756fa3617e8bc1f2910a304bcab75e80de7abe2" translate="yes" xml:space="preserve">
          <source>I tried this and it is working fine!</source>
          <target state="translated">나는 이것을 시도했고 잘 작동하고있다!</target>
        </trans-unit>
        <trans-unit id="74cc64f9e5c4d9804b820e8b44aa62d33a285741" translate="yes" xml:space="preserve">
          <source>I wanted to place a &lt;strong&gt;known number&lt;/strong&gt; of items into an array, into specific positions, as they come off of an &quot;associative array&quot; (i.e. an object) which by definition is not guaranteed to be in a sorted order. I wanted the resulting array to be an array of objects, but the objects to be in a specific order in the array since an array guarantees their order. So I did this.</source>
          <target state="translated">정의에 따라 정렬 된 순서로 보장되지 않는 &quot;연관 배열&quot;(예 : 개체)에서 나오는 &lt;strong&gt;알려진 수&lt;/strong&gt; 의 항목을 배열, 특정 위치에 배치하려고했습니다. 결과 배열이 객체의 배열이되기를 원했지만 배열이 순서를 보장하기 때문에 객체가 배열의 특정 순서가되도록했습니다. 그래서 나는 이것을했다.</target>
        </trans-unit>
        <trans-unit id="3f236306597464fd9a64d527b52af6c49b59f53a" translate="yes" xml:space="preserve">
          <source>If you are concerned about mutating the array (for example, if using Immutable.js), you can instead use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&quot;&gt;&lt;code&gt;slice()&lt;/code&gt;&lt;/a&gt;, not to be confused with &lt;code&gt;splice()&lt;/code&gt; with a 'p'.</source>
          <target state="translated">배열을 변경하는 것이 우려되는 경우 (예 : Immutable.js를 사용하는 경우) 대신 p (p &lt;code&gt;splice()&lt;/code&gt; 사용하여 splice () 와 혼동하지 않고 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&quot;&gt; &lt;code&gt;slice()&lt;/code&gt; &lt;/a&gt; 를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="483a172849c1d36e36b12cb5d32a0f9a38998391" translate="yes" xml:space="preserve">
          <source>If you want to insert multiple elements into an array at once check out this Stack Overflow answer: &lt;a href=&quot;https://stackoverflow.com/questions/1348178/a-better-way-to-splice-an-arrray-into-an-array-in-javascript&quot;&gt;A better way to splice an array into an array in javascript&lt;/a&gt;</source>
          <target state="translated">한 번에 여러 요소를 배열에 삽입하려면이 스택 오버플로 답변을 확인하십시오. &lt;a href=&quot;https://stackoverflow.com/questions/1348178/a-better-way-to-splice-an-arrray-into-an-array-in-javascript&quot;&gt;자바 배열에서 배열을 배열에 결합하는 더 좋은 방법&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e643adfb3b1686303f90df03cbb1b3659395dfc0" translate="yes" xml:space="preserve">
          <source>In this example we will create an array and add an element to it into index 2:</source>
          <target state="translated">이 예제에서는 배열을 만들고 인덱스 2에 요소를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="6f820d1d8895a41be8c8d35e6ba81be89e5a5645" translate="yes" xml:space="preserve">
          <source>Index is the position where you want to insert or delete the element.
0 i.e. the second parameters defines the number of element from the index to be removed
item are the new entries which you want to make in array. It can be one or more than one.</source>
          <target state="translated">색인은 요소를 삽입하거나 삭제하려는 위치입니다. 즉, 두 번째 매개 변수는 제거 할 인덱스의 요소 수를 정의합니다. 항목은 배열에서 만들려는 새 항목입니다. 하나 이상일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ddfa21ff23ab326ceea7c37b06738d301327f869" translate="yes" xml:space="preserve">
          <source>It can insert multiple elements (as native &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt; does) and supports chaining:</source>
          <target state="translated">네이티브 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt; &lt;code&gt;splice&lt;/code&gt; &lt;/a&gt; 처럼 여러 요소를 삽입하고 체인을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="5cfc95d36d424d2cda631d31b6c12ba8657a29cd" translate="yes" xml:space="preserve">
          <source>It can merge arrays from the arguments with the given array and also supports chaining:</source>
          <target state="translated">주어진 배열과 인수의 배열을 병합 할 수 있으며 연결을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="7ced62006201ed658eec69bc5e9178843c7f41e3" translate="yes" xml:space="preserve">
          <source>It will return 3, but if we check the arr now, we have:</source>
          <target state="translated">3을 반환하지만 지금 arr을 확인하면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7975cd93b61d5fb446d1b4a82d208acb79729b34" translate="yes" xml:space="preserve">
          <source>Let's see what we have done...</source>
          <target state="translated">우리가 한 일을 보자 ...</target>
        </trans-unit>
        <trans-unit id="857e8992ae0915ef69b55ae76a6431d99d285563" translate="yes" xml:space="preserve">
          <source>Let's see what's &lt;strong&gt;splice()&lt;/strong&gt;...</source>
          <target state="translated">&lt;strong&gt;splice ()가&lt;/strong&gt; 무엇인지 보자 ...</target>
        </trans-unit>
        <trans-unit id="d6fa581ef677ef0031b695752077bdee04f3ba96" translate="yes" xml:space="preserve">
          <source>OK, imagine we have this array below:</source>
          <target state="translated">자, 아래 배열이 있다고 상상해보십시오.</target>
        </trans-unit>
        <trans-unit id="c5af1b321a254fe233907533db7dfbf1fee498ba" translate="yes" xml:space="preserve">
          <source>Other than splice, you can use this approach which will not mutate the original array, but will create a new array with the added item. You should usually avoid mutation whenever possible. I'm using ES6 spread operator here.</source>
          <target state="translated">스플 라이스 이외의 방법으로이 방법을 사용하면 원래 배열을 변경하지 않지만 추가 된 항목으로 새 배열을 만들 수 있습니다. 가능하면 항상 돌연변이를 피해야합니다. 여기에 ES6 스프레드 연산자를 사용하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="a6afed8c49e250a1e5c5d1bf8e8aa8ab7f19d1bf" translate="yes" xml:space="preserve">
          <source>Preferably in jQuery, but any JavaScript implementation will do at this point.</source>
          <target state="translated">가급적 jQuery에서는 모든 JavaScript 구현이이 시점에서 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="6c674ddcd6507d4a64241e92ef6ff9ade6f5fe7b" translate="yes" xml:space="preserve">
          <source>Since the number of nodes in the object is known, I first create an array with the specified length:</source>
          <target state="translated">객체의 노드 수를 알고 있기 때문에 먼저 지정된 길이의 배열을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="31a3e983b6ca43e81655bdbe27f9741aa0ca03a7" translate="yes" xml:space="preserve">
          <source>So at this way we can return a new array (will be a cool functional way - more much better than use push or splice) with the element inserted at index, and if the index is greater than the length of the array it will be inserted at the end.</source>
          <target state="translated">따라서이 방법으로 인덱스에 요소를 삽입 한 상태에서 새로운 배열을 반환 할 수 있습니다 (멋진 기능 방식-푸시 또는 스플 라이스를 사용하는 것보다 낫습니다). 인덱스가 배열의 길이보다 길면 삽입됩니다 끝에.</target>
        </trans-unit>
        <trans-unit id="0dae2c63be0a01f5bc2a528ce68677498e296bf2" translate="yes" xml:space="preserve">
          <source>So far, so good, but how we can add a new element to array using splice?
Let's put back 3 in the arr...</source>
          <target state="translated">지금까지는 훌륭했지만 스플 라이스를 사용하여 배열에 새 요소를 추가하는 방법은 무엇입니까? Arr에 3을 다시 넣자 ...</target>
        </trans-unit>
        <trans-unit id="2bd9605e48af5f626917de2c417f7beaa48d7cf6" translate="yes" xml:space="preserve">
          <source>Taking profit of reduce method as following:</source>
          <target state="translated">다음과 같이 감소 방법의 이익을 얻으십시오 :</target>
        </trans-unit>
        <trans-unit id="d4607f5f4d353df616911ce44cbb32ce72dbbf7a" translate="yes" xml:space="preserve">
          <source>The splice() method changes the contents of an array by removing
  existing elements and/or adding new elements.</source>
          <target state="translated">splice () 메서드는 기존 요소를 제거하거나 새 요소를 추가하여 배열의 내용을 변경합니다.</target>
        </trans-unit>
        <trans-unit id="62a2fb04bbb69e406cad00528937349a39da9047" translate="yes" xml:space="preserve">
          <source>Then you can use it like:</source>
          <target state="translated">그런 다음 다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="08ba34b2203e8ccf4cdba32251561d21147d239d" translate="yes" xml:space="preserve">
          <source>This can be used to add more than one item by tweaking the function a bit to use the rest operator for the new items, and spread that in the returned result as well</source>
          <target state="translated">이것은 새로운 아이템에 나머지 연산자를 사용하기 위해 함수를 약간 조정하여 하나 이상의 아이템을 추가하는 데 사용될 수 있으며, 그 결과를 반환 된 결과로도 확산시킬 수 있습니다</target>
        </trans-unit>
        <trans-unit id="fa479ef2769d6bf952621237f3344b2008c0f730" translate="yes" xml:space="preserve">
          <source>This checks if item exit</source>
          <target state="translated">항목이 종료되는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="d6e6345faa235e30eb53880b945a2375948867ac" translate="yes" xml:space="preserve">
          <source>This is a combination of iterating the reference array and comparing it to the object you wanted to check, convert both of them into a string then iterated if it matched. Then you can just count. This can be improved but this is where I settled. Hope this helps.</source>
          <target state="translated">이것은 참조 배열을 반복하고 확인하려는 객체와 비교하고 두 배열을 모두 문자열로 변환 한 다음 일치하면 반복합니다. 그럼 당신은 셀 수 있습니다. 이것은 향상 될 수 있지만 이것은 내가 정착 한 곳입니다. 도움이 되었기를 바랍니다.</target>
        </trans-unit>
        <trans-unit id="93cd6d38f8c570772e3855142c42f20553973157" translate="yes" xml:space="preserve">
          <source>This is showing how each item in splice work:</source>
          <target state="translated">스플 라이스의 각 항목이 작동하는 방식을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="42bf72c68d10903f64ee4fe7096ad4643cacad67" translate="yes" xml:space="preserve">
          <source>We can remove &lt;code&gt;3&lt;/code&gt; like this:</source>
          <target state="translated">다음과 같이 &lt;code&gt;3&lt;/code&gt; 을 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1018f207660dbe71bd0035087955b6b126503d46" translate="yes" xml:space="preserve">
          <source>We use &lt;strong&gt;splice&lt;/strong&gt; again, but this time for the second argument, we pass &lt;strong&gt;0&lt;/strong&gt;, means we want to delete no item, but at the same time, we add third argument which is 3 that will be added at second index...</source>
          <target state="translated">우리는 다시 &lt;strong&gt;접속을&lt;/strong&gt; 사용하지만 이번에는 두 번째 인수에 대해 &lt;strong&gt;0&lt;/strong&gt; 을 전달합니다. 항목을 삭제하지 않으려 고하지만 동시에 두 번째 색인에 추가 될 3 인 세 번째 인수를 추가합니다 ...</target>
        </trans-unit>
        <trans-unit id="d98ce89b0f0cf820b708648a8ffaceb787909d98" translate="yes" xml:space="preserve">
          <source>Well ok the above with the &lt;code&gt;Array.prototype.splice()&lt;/code&gt; one mutates the original array and some might complain like &quot;you shouldn't modify what doesn't belong to you&quot; and that might turn out to be right as well. So for the public welfare i would like to give another &lt;code&gt;Array.prototype.insert()&lt;/code&gt; which doesn't mutate the original array. Here it goes;</source>
          <target state="translated">위의 &lt;code&gt;Array.prototype.splice()&lt;/code&gt; 위의 내용을 확인하십시오. 하나는 원래 배열을 변경하고 일부는 &quot;귀하의 것이 아닌 것을 수정해서는 안됩니다&quot;와 같이 불평 할 수 있으며 그 결과도 옳습니다. 따라서 공공 복지를 위해 원래 배열을 변경하지 않는 다른 &lt;code&gt;Array.prototype.insert()&lt;/code&gt; 를 제공하고 싶습니다. 여기 간다;</target>
        </trans-unit>
        <trans-unit id="da66e27bf198c132cf6b03f5e1cc639501169ba7" translate="yes" xml:space="preserve">
          <source>What you want is the &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; function on the native array object.</source>
          <target state="translated">원하는 것은 기본 배열 객체의 &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt; &lt;code&gt;splice&lt;/code&gt; &lt;/a&gt;&lt;/strong&gt; 기능입니다.</target>
        </trans-unit>
        <trans-unit id="d06b6746be798753f00148abc36fa3d6b8b2852b" translate="yes" xml:space="preserve">
          <source>Which will delete &lt;strong&gt;2 items&lt;/strong&gt; at index 2, then add &lt;strong&gt;3&lt;/strong&gt; at index 2 and result will be:</source>
          <target state="translated">인덱스 2에서 &lt;strong&gt;2 개의 항목&lt;/strong&gt; 을 삭제 한 다음 인덱스 2에서 &lt;strong&gt;3&lt;/strong&gt; 을 추가하면 결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ede543f3ddd43ced64afdab4b612462b1b0e1d9e" translate="yes" xml:space="preserve">
          <source>You can implement the &lt;code&gt;Array.insert&lt;/code&gt; method by doing this:</source>
          <target state="translated">다음을 수행하여 &lt;code&gt;Array.insert&lt;/code&gt; 메소드를 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="11135937a075ca3187dd1eeb96ceb6b48057a2f9" translate="yes" xml:space="preserve">
          <source>You should be aware, that we can &lt;strong&gt;delete&lt;/strong&gt; and &lt;strong&gt;add&lt;/strong&gt; at the same time, for example now we can do:</source>
          <target state="translated">우리는 동시에 &lt;strong&gt;삭제&lt;/strong&gt; 하고 &lt;strong&gt;추가&lt;/strong&gt; 할 수 있다는 것을 알고 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="e764621fb804a516c11bae65dd7002a1111c567c" translate="yes" xml:space="preserve">
          <source>array.splice(start, deleteCount, item1, item2, item3 ...)</source>
          <target state="translated">array.splice (start, deleteCount, item1, item2, item3 ...)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
