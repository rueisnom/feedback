<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/5890584">
    <body>
      <group id="5890584">
        <trans-unit id="f2b66a421a0655a184b6c33aee83557ebbe684e9" translate="yes" xml:space="preserve">
          <source>(&lt;a href=&quot;https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reshape.html&quot;&gt;Reference: Efficient reshaping using data.tables&lt;/a&gt;)</source>
          <target state="translated">（ &lt;a href=&quot;https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reshape.html&quot;&gt;参照：data.tablesを使用した効率的な再形成&lt;/a&gt; ）</target>
        </trans-unit>
        <trans-unit id="b423d301648942b4bc78aa000ffd20a2cb941079" translate="yes" xml:space="preserve">
          <source>-&amp;gt; created another column for showing the functionality</source>
          <target state="translated">-&amp;gt;機能を示すための別の列を作成しました</target>
        </trans-unit>
        <trans-unit id="8c93e36a63740a396b58f1cd3bd7092e779a3c01" translate="yes" xml:space="preserve">
          <source>-single column long -&amp;gt; wide</source>
          <target state="translated">-シングルカラムロング-&amp;gt;ワイド</target>
        </trans-unit>
        <trans-unit id="3e02b6a3faf5bc2e9319e23e96e7bf00c9aec131" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;direction&lt;/code&gt; specifies wide or long format</source>
          <target state="translated">&lt;code&gt;direction&lt;/code&gt; はワイドまたはロングフォーマットを指定します</target>
        </trans-unit>
        <trans-unit id="5d209b595770146d619b3879e4cefed470a176dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;idvar&lt;/code&gt; is the column of classes that separates rows</source>
          <target state="translated">&lt;code&gt;idvar&lt;/code&gt; は、行を区切るクラスの列です。</target>
        </trans-unit>
        <trans-unit id="dbf2606d2abb216ebd3bf8194a72b13e5427c552" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sqldf&lt;/code&gt; package:</source>
          <target state="translated">&lt;code&gt;sqldf&lt;/code&gt; パッケージ：</target>
        </trans-unit>
        <trans-unit id="b732c0054669b0f3697aff02c007f66aac2d1419" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tidyr&lt;/code&gt; is a reframing of &lt;code&gt;reshape2&lt;/code&gt; designed to accompany the tidy data framework, and to work hand-in-hand with &lt;code&gt;magrittr&lt;/code&gt; and &lt;code&gt;dplyr&lt;/code&gt; to build a solid pipeline for data analysis.</source>
          <target state="translated">&lt;code&gt;tidyr&lt;/code&gt; は整頓されたデータフレームワークに &lt;code&gt;magrittr&lt;/code&gt; 、 &lt;code&gt;dplyr&lt;/code&gt; とdplyrと連携してデータ分析用の堅牢なパイプラインを構築するために設計された &lt;code&gt;reshape2&lt;/code&gt; のリフレーミングです。</target>
        </trans-unit>
        <trans-unit id="59f92604e7a9721fb8b4f780700116cc104a8d00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timevar&lt;/code&gt; is the column of classes to cast wide</source>
          <target state="translated">&lt;code&gt;timevar&lt;/code&gt; は、広範囲にキャストするクラスの列です。</target>
        </trans-unit>
        <trans-unit id="363785327e5d76185fca735eb93a3c3a46c80eca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v.names&lt;/code&gt; is the column containing numeric values</source>
          <target state="translated">&lt;code&gt;v.names&lt;/code&gt; は数値を含む列です</target>
        </trans-unit>
        <trans-unit id="8b48c85794bfb5c7ca45d586626d1f8ce4e83548" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit:&lt;/strong&gt; Now, in 2019, tidyr v 1.0 has launched and set &lt;code&gt;spread&lt;/code&gt; and &lt;code&gt;gather&lt;/code&gt; on a deprecation path, preferring instead &lt;code&gt;pivot_wider&lt;/code&gt; and &lt;code&gt;pivot_longer&lt;/code&gt;, which you can find described &lt;a href=&quot;https://stackoverflow.com/a/57013551/903061&quot;&gt;in this answer&lt;/a&gt;. Read on if you want a brief glimpse into the brief life of &lt;code&gt;spread/gather&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;編集：&lt;/strong&gt;今、2019年にtidyr v 1.0がリリースされ、非推奨パスで &lt;code&gt;spread&lt;/code&gt; と &lt;code&gt;gather&lt;/code&gt; を設定しました。代わりに、 &lt;code&gt;pivot_wider&lt;/code&gt; と &lt;code&gt;pivot_longer&lt;/code&gt; を使用してください。 &lt;code&gt;spread/gather&lt;/code&gt; 短い人生を少し垣間見たい場合は、以下をお読みください。</target>
        </trans-unit>
        <trans-unit id="55cc92d6fbd3bc4d924c769f7115a4e5bd8a7f7c" translate="yes" xml:space="preserve">
          <source>And, as of data.table v1.9.6 we can cast on multiple columns</source>
          <target state="translated">また、data.table v1.9.6では、複数のカラムにキャストすることができます。</target>
        </trans-unit>
        <trans-unit id="c8f052b9cda47e8ce74251c074f38bcfe2a7a09f" translate="yes" xml:space="preserve">
          <source>Another option if performance is a concern is to use &lt;code&gt;data.table&lt;/code&gt;'s extension of &lt;code&gt;reshape2&lt;/code&gt;'s melt &amp;amp; dcast functions</source>
          <target state="translated">パフォーマンスが懸念される場合の別のオプションは、 &lt;code&gt;reshape2&lt;/code&gt; のメルト＆キャスト関数の拡張を使用することです。</target>
        </trans-unit>
        <trans-unit id="32adc54da7e1dd098f05014024de61a9f88fbe05" translate="yes" xml:space="preserve">
          <source>Base package:</source>
          <target state="translated">基本パッケージ。</target>
        </trans-unit>
        <trans-unit id="1f8d5da96d5ee502ef384d47dcdae51782a2e3c8" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;https://github.com/hadley/tidyr&quot;&gt;github&lt;/a&gt;,</source>
          <target state="translated">&lt;a href=&quot;https://github.com/hadley/tidyr&quot;&gt;github&lt;/a&gt;から、</target>
        </trans-unit>
        <trans-unit id="77c7c7ba946bfbd9be7a9ee608e586028b25bf2f" translate="yes" xml:space="preserve">
          <source>How to reshape data from long to wide format</source>
          <target state="translated">ロングフォーマットからワイドフォーマットにデータをリシェイプする方法</target>
        </trans-unit>
        <trans-unit id="95feb5be7cb2c1d8edbf0be2fd2f15bb3e5c1c78" translate="yes" xml:space="preserve">
          <source>I want to reshape it so that each unique &quot;name&quot; variable is a rowname, with the &quot;values&quot; as observations along that row and the &quot;numbers&quot; as colnames. Sort of like this:</source>
          <target state="translated">それぞれのユニークな &quot;name &quot;変数がrownameで、&quot;value &quot;がその行に沿ったオブザベーション、&quot;number &quot;がcolnamesとなるように再構築したいと思います。このような感じです。</target>
        </trans-unit>
        <trans-unit id="d9a3ccd40ef3877efe8a1b2cb4d6f770e62e7c0e" translate="yes" xml:space="preserve">
          <source>I'm having trouble rearranging the following data frame:</source>
          <target state="translated">以下のデータフレームの並び替えに困っています。</target>
        </trans-unit>
        <trans-unit id="1fd30b3bce62814bd717849f08ded001356603d4" translate="yes" xml:space="preserve">
          <source>I've looked at &lt;code&gt;melt&lt;/code&gt; and &lt;code&gt;cast&lt;/code&gt; and a few other things, but none seem to do the job.</source>
          <target state="translated">私は &lt;code&gt;melt&lt;/code&gt; や &lt;code&gt;cast&lt;/code&gt; 、その他いくつかのものを見てきましたが、どれもその仕事をしていないようです。</target>
        </trans-unit>
        <trans-unit id="67d8bbe85b74ca1fe2c44834d30774330a464d0b" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;idvar&lt;/code&gt; exists, create one before using the &lt;code&gt;reshape()&lt;/code&gt; function:</source>
          <target state="translated">&lt;code&gt;idvar&lt;/code&gt; が存在しない場合は、 reshape &lt;code&gt;reshape()&lt;/code&gt; 関数を使用する前に作成します。</target>
        </trans-unit>
        <trans-unit id="22f98d9b19a256e05bc0cd6a1bb6e03c69bca481" translate="yes" xml:space="preserve">
          <source>It is easy to write many different operations in terms of the
  cdata primitives. These operators can work-in memory or at big data
  scale (with databases and Apache Spark; for big data use the
  cdata::moveValuesToRowsN() and cdata::moveValuesToColumnsN()
  variants). The transforms are controlled by a control table that
  itself is a diagram of (or picture of) the transform.</source>
          <target state="translated">cdataプリミティブを利用することで、様々な演算子を簡単に書くことができます。これらの演算子はメモリ内でもビッグデータのスケールでも動作します (データベースやApache Sparkでは cdata::moveValuesToRowsN()と cdata::moveValuesToColumnsN()のバリアントを使用します)。変換は制御テーブルによって制御され、それ自体が変換のダイアグラム (または図)になります。</target>
        </trans-unit>
        <trans-unit id="144e741b4c39fd81ed7915072c22a68ebeaf8e92" translate="yes" xml:space="preserve">
          <source>Just as &lt;code&gt;reshape2&lt;/code&gt; did less than reshape, &lt;code&gt;tidyr&lt;/code&gt; does less than &lt;code&gt;reshape2&lt;/code&gt;. It's designed specifically for tidying data, not the general reshaping that &lt;code&gt;reshape2&lt;/code&gt; does, or the general aggregation that reshape did. In particular, built-in methods only work for data frames, and &lt;code&gt;tidyr&lt;/code&gt; provides no margins or aggregation.</source>
          <target state="translated">&lt;code&gt;reshape2&lt;/code&gt; がreshapeよりも少ないことを行ったように、 &lt;code&gt;tidyr&lt;/code&gt; はreshape2よりも少ないことを &lt;code&gt;reshape2&lt;/code&gt; ます。 データを整頓するために特別に設計されており、 &lt;code&gt;reshape2&lt;/code&gt; が行う一般的な再形成や、 reshape2が行った一般的な集計ではありません。 特に、組み込みメソッドはデータフレームに対してのみ機能し、 &lt;code&gt;tidyr&lt;/code&gt; はマージンや集約を提供しません。</target>
        </trans-unit>
        <trans-unit id="3c330efc8ae2749590fbcb23486dd883c59d7bc4" translate="yes" xml:space="preserve">
          <source>Just remember that &lt;code&gt;idvar&lt;/code&gt; is required! The &lt;code&gt;timevar&lt;/code&gt; and &lt;code&gt;v.names&lt;/code&gt; part is easy. The output of this function is more predictable than some of the others, as everything is explicitly defined.</source>
          <target state="translated">&lt;code&gt;idvar&lt;/code&gt; が必要であることを覚えておいてください ！ &lt;code&gt;timevar&lt;/code&gt; と &lt;code&gt;v.names&lt;/code&gt; の部分は簡単です。 すべてが明示的に定義されているため、この関数の出力は他の関数よりも予測可能です。</target>
        </trans-unit>
        <trans-unit id="7b370008864784686060818eff43542ed6216d81" translate="yes" xml:space="preserve">
          <source>Or using &lt;code&gt;reshape2&lt;/code&gt;</source>
          <target state="translated">または &lt;code&gt;reshape2&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="ef57e5ac4f5671078f6faf0de903013d96b5fb3f" translate="yes" xml:space="preserve">
          <source>Other two options:</source>
          <target state="translated">他にも2つの選択肢があります。</target>
        </trans-unit>
        <trans-unit id="7c776aa89da2f0d5f86aeab3955679d17f1de770" translate="yes" xml:space="preserve">
          <source>The base &lt;code&gt;reshape&lt;/code&gt; function works perfectly fine:</source>
          <target state="translated">基本の &lt;code&gt;reshape&lt;/code&gt; 機能は完全に正常に動作します。</target>
        </trans-unit>
        <trans-unit id="0ed9a8ad112ec9c8e0b3a0bfa9fd2e6a613cf44a" translate="yes" xml:space="preserve">
          <source>The new (in 2014) &lt;code&gt;tidyr&lt;/code&gt; package also does this simply, with &lt;code&gt;gather()&lt;/code&gt;/&lt;code&gt;spread()&lt;/code&gt; being the terms for &lt;code&gt;melt&lt;/code&gt;/&lt;code&gt;cast&lt;/code&gt;.</source>
          <target state="translated">新しい（2014年の） &lt;code&gt;tidyr&lt;/code&gt; パッケージもこれを簡単に実行します。gather &lt;code&gt;gather()&lt;/code&gt; / &lt;code&gt;spread()&lt;/code&gt; は、 &lt;code&gt;melt&lt;/code&gt; / &lt;code&gt;cast&lt;/code&gt; の用語です。</target>
        </trans-unit>
        <trans-unit id="d83d3182426e986c1d29038fb322bbd38cd8bfb2" translate="yes" xml:space="preserve">
          <source>The whole system is based on two primitives or operators
  cdata::moveValuesToRowsD() and cdata::moveValuesToColumnsD(). These
  operators have pivot, un-pivot, one-hot encode, transpose, moving
  multiple rows and columns, and many other transforms as simple special
  cases.</source>
          <target state="translated">システム全体は,2つのプリミティブまたは演算子 cdata::moveValuesToRowsD()と cdata::moveValuesToColumnsD()に基づいています.これらの演算子には、ピボット、アンピボット、ワンホットエンコード、転置、複数の行や列の移動、その他多くの変換が単純な特殊ケースとして用意されています。</target>
        </trans-unit>
        <trans-unit id="8bf9bf881f1ad32b3180f6ade4bfb0d25ba9e77b" translate="yes" xml:space="preserve">
          <source>There's very powerful new package from genius data scientists at Win-Vector (folks that made &lt;code&gt;vtreat&lt;/code&gt;, &lt;code&gt;seplyr&lt;/code&gt; and &lt;code&gt;replyr&lt;/code&gt;) called &lt;code&gt;cdata&lt;/code&gt;. It implements &quot;coordinated data&quot; principles described in &lt;a href=&quot;https://github.com/WinVector/cdata/blob/master/extras/RowsAndColumns.md&quot;&gt;this document&lt;/a&gt; and also in this &lt;a href=&quot;http://www.win-vector.com/blog/2017/03/coordinatized-data-a-fluid-data-specification/&quot;&gt;blog post&lt;/a&gt;. The idea is that regardless how you organize your data, it should be possible to identify individual data points using a system of &quot;data coordinates&quot;. Here's a excerpt from the recent blog post by John Mount:</source>
          <target state="translated">Win-Vectorの天才データサイエンティスト（ &lt;code&gt;vtreat&lt;/code&gt; 、 &lt;code&gt;seplyr&lt;/code&gt; 、 replyrを &lt;code&gt;replyr&lt;/code&gt; ）による &lt;code&gt;cdata&lt;/code&gt; と呼ばれる非常に強力な新しいパッケージがあります 。 &lt;a href=&quot;https://github.com/WinVector/cdata/blob/master/extras/RowsAndColumns.md&quot;&gt;このドキュメント&lt;/a&gt;とこの&lt;a href=&quot;http://www.win-vector.com/blog/2017/03/coordinatized-data-a-fluid-data-specification/&quot;&gt;ブログの投稿&lt;/a&gt;で説明されている「調整データ」の原則を実装しています 。 データをどのように編成するかに関係なく、「データ座標」のシステムを使用して個々のデータポイントを識別できるはずです。 ジョンマウントによる最近のブログ投稿からの抜粋です。</target>
        </trans-unit>
        <trans-unit id="15ae6a8db4ce297ef06455be3cfe1f8dfaaeef58" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;reshape&lt;/code&gt; function:</source>
          <target state="translated">&lt;code&gt;reshape&lt;/code&gt; 関数の使用：</target>
        </trans-unit>
        <trans-unit id="716e5f0424b51cc0958fe5b0a70776fe077e97d1" translate="yes" xml:space="preserve">
          <source>Using base R &lt;code&gt;aggregate&lt;/code&gt; function:</source>
          <target state="translated">ベースR &lt;code&gt;aggregate&lt;/code&gt; 関数の使用：</target>
        </trans-unit>
        <trans-unit id="db2d34eff67a4da9f9fedec623a7b05fafe765ba" translate="yes" xml:space="preserve">
          <source>Using your example dataframe, we could:</source>
          <target state="translated">データフレームの例を使うと、次のようなことができます。</target>
        </trans-unit>
        <trans-unit id="a164e0f73cee51e074bfd5170f1b3ad81650de93" translate="yes" xml:space="preserve">
          <source>We will first build the control table (see &lt;a href=&quot;http://www.win-vector.com/blog/2017/03/coordinatized-data-a-fluid-data-specification/&quot;&gt;blog post&lt;/a&gt; for details) and then perform the move of data from rows to columns.</source>
          <target state="translated">最初にコントロールテーブルを作成し（詳細については&lt;a href=&quot;http://www.win-vector.com/blog/2017/03/coordinatized-data-a-fluid-data-specification/&quot;&gt;ブログの投稿&lt;/a&gt;を参照）、次に行から列へのデータの移動を実行します。</target>
        </trans-unit>
        <trans-unit id="525f61b6729229b1a8854a9e50bcaa52ea96b131" translate="yes" xml:space="preserve">
          <source>Where</source>
          <target state="translated">Where</target>
        </trans-unit>
        <trans-unit id="efb2d954501863c2a58fba735f23397d425284ec" translate="yes" xml:space="preserve">
          <source>With the devel version of &lt;code&gt;tidyr&lt;/code&gt;&lt;code&gt;&amp;lsquo;0.8.3.9000&amp;rsquo;&lt;/code&gt;, there is &lt;code&gt;pivot_wider&lt;/code&gt; and &lt;code&gt;pivot_longer&lt;/code&gt; which is generalized to do the reshaping (long -&amp;gt; wide, wide -&amp;gt; long, respectively) from 1 to multiple columns.  Using the OP's data</source>
          <target state="translated">&lt;code&gt;tidyr&lt;/code&gt; &lt;code&gt;&amp;lsquo;0.8.3.9000&amp;rsquo;&lt;/code&gt; バージョンでは、1から複数の列への再形成（それぞれ、長い-&amp;gt;広い、広い-&amp;gt;長い）を行うように一般化された、 &lt;code&gt;pivot_wider&lt;/code&gt; と &lt;code&gt;pivot_longer&lt;/code&gt; があります。 OPのデータの使用</target>
        </trans-unit>
        <trans-unit id="2a1d1e5bd82d0fd7df26169b22ad20aff853baeb" translate="yes" xml:space="preserve">
          <source>You can do this with the &lt;code&gt;reshape()&lt;/code&gt; function, or with the &lt;code&gt;melt()&lt;/code&gt; / &lt;code&gt;cast()&lt;/code&gt; functions in the reshape package. For the second option, example code is</source>
          <target state="translated">これを行うには、 &lt;code&gt;reshape()&lt;/code&gt; 関数を使用するか、reshapeパッケージ内の &lt;code&gt;melt()&lt;/code&gt; / &lt;code&gt;cast()&lt;/code&gt; 関数を使用します。 2番目のオプションのコード例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="446e1da4bffc55b3260320c1b4dbeec48a8a7ccc" translate="yes" xml:space="preserve">
          <source>if you want to go back from wide to long, only change Wide to Long, and no changes in objects.</source>
          <target state="translated">ワイドからロングに戻したい場合は、ワイドをロングに変更するだけで、オブジェクトの変更はありません。</target>
        </trans-unit>
        <trans-unit id="5f5de958335b3f6a5d3ec3e7658e6a483d9d104f" translate="yes" xml:space="preserve">
          <source>much easier way!</source>
          <target state="translated">らくらく</target>
        </trans-unit>
        <trans-unit id="8c29c224a25b16cff35e5ec4cbce49639805ad8c" translate="yes" xml:space="preserve">
          <source>the optional &lt;code&gt;sep&lt;/code&gt; argument is the separator used in between &lt;code&gt;timevar&lt;/code&gt; class names and &lt;code&gt;v.names&lt;/code&gt; in the output &lt;code&gt;data.frame&lt;/code&gt;.</source>
          <target state="translated">オプションの &lt;code&gt;sep&lt;/code&gt; 引数は、 &lt;code&gt;timevar&lt;/code&gt; クラス名と出力 &lt;code&gt;data.frame&lt;/code&gt; の &lt;code&gt;v.names&lt;/code&gt; の間で使用される区切り文字です 。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
