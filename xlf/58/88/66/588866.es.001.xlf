<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/588866">
    <body>
      <group id="588866">
        <trans-unit id="29411947b64337d949e3249a16a8087de5059836" translate="yes" xml:space="preserve">
          <source>'atomic' means it cannot be broken down. 
  In OS/programming terms an atomic function call is one that cannot be interrupted - the entire function must be executed, and not swapped out of the CPU by the OS's usual context switching until it's complete. Just in case you didn't know: since the CPU can only do one thing at a time, the OS rotates access to the CPU to all running processes in little time-slices, to give the &lt;em&gt;illusion&lt;/em&gt; of multitasking. The CPU scheduler can (and does) interrupt a process at any point in its execution - even in mid function call. So for actions like updating shared counter variables where two processes could try to update the variable at the same time, they must be executed 'atomically', i.e., each update action has to finish in its entirety before any other process can be swapped onto the CPU.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;'at&amp;oacute;mico' significa que no se puede descomponer. En t&amp;eacute;rminos de SO / programaci&amp;oacute;n, una llamada de funci&amp;oacute;n at&amp;oacute;mica es aquella que no se puede interrumpir: toda la funci&amp;oacute;n debe ejecutarse y no cambiarse de la CPU por el cambio de contexto habitual del SO hasta que se complete. En caso de que no lo supiera: dado que la CPU solo puede hacer una cosa a la vez, el sistema operativo gira el acceso a la CPU a todos los procesos en ejecuci&amp;oacute;n en peque&amp;ntilde;os intervalos de tiempo, para dar la &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ilusi&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;de multitarea. El programador de la CPU puede (y lo hace) interrumpir un proceso en cualquier punto de su ejecuci&amp;oacute;n, incluso en una llamada de funci&amp;oacute;n media. Entonces, para acciones como la actualizaci&amp;oacute;n de variables de contador compartidas donde dos procesos podr&amp;iacute;an intentar actualizar la variable al mismo tiempo, deben ejecutarse 'at&amp;oacute;micamente', es decir, cada acci&amp;oacute;n de actualizaci&amp;oacute;n tiene que finalizar en su totalidad antes de que cualquier otro proceso pueda intercambiarse en el UPC.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="65736baa892bc6f32d06472e7079b5cff8c9af94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assign&lt;/code&gt;             // Default</source>
          <target state="translated">&lt;code&gt;assign&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; // Predeterminado&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bac17a28340bcd4bfb53b1b5e3a83f2a13250a9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;atomic&lt;/code&gt;             // Default</source>
          <target state="translated">&lt;code&gt;atomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; // Predeterminado&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="01d882e76c1163761e47b5a0bb408737608a9242" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;atomic&lt;/code&gt; is the default behavior</source>
          <target state="translated">&lt;code&gt;atomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es el comportamiento predeterminado&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cd25f9b1ee3c8eaa4226923ff82b96fd6eca134a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;atomic&lt;/code&gt; is thread safe.</source>
          <target state="translated">&lt;code&gt;atomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es seguro para los hilos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="80e3a512b8083c4567a879d96cc0303bf08edd67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;atomic&lt;/code&gt; means only one thread access the variable (static type).</source>
          <target state="translated">&lt;code&gt;atomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; significa que solo un hilo accede a la variable (tipo est&amp;aacute;tico).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ff1d83cc3154ada7d25a25cffb2c0f316485b818" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;atomicity&lt;/code&gt; of a single property also cannot guarantee thread safety when multiple dependent properties are in play.</source>
          <target state="translated">&lt;code&gt;atomicity&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de una sola propiedad tampoco puede garantizar la seguridad del subproceso cuando varias propiedades dependientes est&amp;aacute;n en juego.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e0676c9bf1fac4480032641cbb6a68b1b7b2be56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nonatomic&lt;/code&gt; is NOT default behavior. We need to add the &lt;code&gt;nonatomic&lt;/code&gt; keyword in the property attribute.</source>
          <target state="translated">&lt;code&gt;nonatomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; NO es un comportamiento predeterminado. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Necesitamos agregar la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;palabra clave no &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nonatomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en el atributo de propiedad.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b453d3a7a5746cdfc0be6127c5ee1332e4ae20b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nonatomic&lt;/code&gt; is thread-unsafe.</source>
          <target state="translated">&lt;code&gt;nonatomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es inseguro para subprocesos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="144c4b12fa77d18882a8cd254b25ce6824a3fd33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nonatomic&lt;/code&gt; means multiple thread access the variable (dynamic type).</source>
          <target state="translated">&lt;code&gt;nonatomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; significa acceso m&amp;uacute;ltiple a la variable (tipo din&amp;aacute;mico).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94704458ff99f8b43566a1a29d92a57098a31b7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;readwrite&lt;/code&gt;                 // Default</source>
          <target state="translated">&lt;code&gt;readwrite&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; // Predeterminado&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="16fdeec49d31d634e8dd057a685b6f1a125f2dc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strong = retain&lt;/code&gt;        // Default</source>
          <target state="translated">&lt;code&gt;strong = retain&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; // Predeterminado&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1817be6d1b19c950de8c9a2fd3ae06f454649a42" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Thats why non atomic is called thread unsafe But but it is fast in performance because of parallel execution&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es por eso que no at&amp;oacute;mico se llama hilo inseguro, pero es r&amp;aacute;pido en rendimiento debido a la ejecuci&amp;oacute;n paralela&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5cdd7cb3f0962dd785ee980cc0728796fe1f9761" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The keywords doesn't have to be written as first property attribute at all.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las palabras clave no tienen que escribirse como primer atributo de propiedad.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6a10d89828ebaa54d8102b7cb13ba8665b0b81b2" translate="yes" xml:space="preserve">
          <source>&lt;strike&gt;Note that there is no &quot;atomic&quot; keyword, if you do not specify &quot;nonatomic&quot;, then the property is atomic, but specifying &quot;atomic&quot; explicitly will result in an error.&lt;/strike&gt;</source>
          <target state="translated">&lt;strike&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que no hay una palabra clave &quot;at&amp;oacute;mica&quot;, si no especifica &quot;no at&amp;oacute;mica&quot;, entonces la propiedad es at&amp;oacute;mica, pero si especifica &quot;at&amp;oacute;mica&quot; expl&amp;iacute;citamente se producir&amp;aacute; un error.&lt;/font&gt;&lt;/font&gt;&lt;/strike&gt;</target>
        </trans-unit>
        <trans-unit id="ffd409aa01eefdb8323b9fe5351b0b0a2ae95d7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;-  Nonatomic means multiple thread access the variable(dynamic type).&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;- No at&amp;oacute;mico significa acceso m&amp;uacute;ltiple a la variable (tipo din&amp;aacute;mico).&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="466db7383e12a27164e85bd429689284264834b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;- Nonatomic is thread unsafe.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;- No at&amp;oacute;mico es un hilo inseguro.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="36549c905b7712f2a9bd3e65321c0b4716e2e567" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;- but it is fast in performance&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;- pero es r&amp;aacute;pido en rendimiento&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4ffaa095c82217a0d20db0b7833a8f1b5ded92da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;-Atomic is thread safe.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-Atomic es seguro para subprocesos.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="386c6c59efb1ceedd21973ad7d42db9e83d58724" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;-Atomic means only one thread access the variable(static type).&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-Atomic significa que solo un hilo accede a la variable (tipo est&amp;aacute;tico).&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d9289b20dbb4a5dfc44402b984b9b7fb71c00550" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;-Nonatomic is NOT default behavior, we need to add nonatomic keyword    in property attribute.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-Nonatomic NO es un comportamiento predeterminado, debemos agregar una palabra clave no at&amp;oacute;mica en el atributo de propiedad.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f0c853f0aa5af920ea97541fcad5a333859dd74d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;-but it is slow in performance&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-pero es lento en rendimiento&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e4f84e82d964d65d5331ec4dc31848f2f7892ac9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;atomic&lt;/code&gt; will ALWAYS guarantee&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; SIEMPRE garantizar&amp;aacute;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ddde3b23162bbee9de624e2f156bcd96875a1c35" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0bb576a1c9d49b79e806ea0099e6c66b36101634" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;nonatomic&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;nonatomic&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="716a0725bfe701eef013b5666a762ce35538990b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Atomicity
atomic (default)&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Atomicidad at&amp;oacute;mica (predeterminado)&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="568741eb5bb25f08010362cde0dec871c3a27255" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;That's why atomic is called thread Safe&lt;/em&gt;&lt;/strong&gt; and 
&lt;strong&gt;&lt;em&gt;That's why it is called read-write safe&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es por eso que atomic se llama thread Safe&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; por eso se llama read-write safe&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6db8014b9ff772505aa968a0f3cb71151a1dfeb5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;nonatomic&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;nonatomic&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="86bb8a493b4f26c9d609a3571320b145e83a3265" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;And&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;And&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9ae1919a56a424217d7942d186776bb7154473a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Atomic :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;At&amp;oacute;mico:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8847114c556e5aa0915a5a58f41de257fd15603b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Atomic properties&lt;/strong&gt; :- When a variable assigned with atomic property that means it has only one thread access and it will be thread safe and will be good in performance perspective, will have default behaviour.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Propiedades at&amp;oacute;micas&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : cuando una variable asignada con una propiedad at&amp;oacute;mica que significa que solo tiene acceso a un subproceso y ser&amp;aacute; segura para los subprocesos y tendr&amp;aacute; una buena perspectiva de rendimiento, tendr&amp;aacute; un comportamiento predeterminado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="10970c29b4e931a96e449c43e2331815ca29c267" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Atomic&lt;/strong&gt;     = thread safety</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;At&amp;oacute;mico&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; = seguridad del hilo&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bf1acd29fac53602f47b91d7c8afc125f052e57a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Atomicity property attributes (atomic and nonatomic) are not reflected in the corresponding Swift property declaration, but the atomicity guarantees of the Objective-C implementation still hold when the imported property is accessed from Swift.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los atributos de propiedad de atomicidad (at&amp;oacute;mica y no at&amp;oacute;mica) no se reflejan en la correspondiente declaraci&amp;oacute;n de propiedad de Swift, pero las garant&amp;iacute;as de atomicidad de la implementaci&amp;oacute;n de Objective-C a&amp;uacute;n se mantienen cuando se accede a la propiedad importada desde Swift.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3d30e499b268ef956cffe268c4793a9718b721f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cons :&lt;/strong&gt;
Chances of garbage value in case of multi-threading.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Contras:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; posibilidades de valor de basura en caso de subprocesos m&amp;uacute;ltiples.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6e4911144287afea7fb4bf6a0ef3999b2bb29492" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cons :&lt;/strong&gt;
Performance hit, makes execution a little slower</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Contras:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; impacto en el rendimiento, hace que la ejecuci&amp;oacute;n sea un poco m&amp;aacute;s lenta&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="234b4527dee6fe4a00dfe2bbf7a4bb066e7ff877" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Don't forget, this doesn't mean that the property as a whole is thread-safe. Only the method call of the setter/getter is. But if you use a setter and after that a getter at the same time with 2 different threads, it could be broken too!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No olvide que esto no significa que la propiedad en su conjunto sea segura para subprocesos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Solo la llamada al m&amp;eacute;todo del setter / getter es. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero si usa un setter y luego un getter al mismo tiempo con 2 hilos diferentes, &amp;iexcl;podr&amp;iacute;a romperse tambi&amp;eacute;n!&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dd1385db75a313e27cd1eb8e32ba179bf7f05987" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Execution&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Execution&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f1d5591d26cb3f294591f3efdff8f6b9e2481e94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How to declare:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C&amp;oacute;mo declarar:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7811690ec89311f10f21d909af0798328148ae64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Non Atomic Properties&lt;/strong&gt; :- When a variable assigned with atomic property that means it has multi thread access and it will not be thread safe and will be slow in performance perspective, will have default behaviour and when two different threads want to access variable at same time it will give unexpected results.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Propiedades no at&amp;oacute;micas&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : cuando una variable asignada con propiedad at&amp;oacute;mica significa que tiene acceso a m&amp;uacute;ltiples subprocesos y no ser&amp;aacute; segura para subprocesos y ser&amp;aacute; lenta en la perspectiva de rendimiento, tendr&amp;aacute; un comportamiento predeterminado y cuando dos subprocesos diferentes desean acceder a la variable al mismo tiempo dar&amp;aacute; resultados inesperados&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6678f00c71129c25e8fad8de4d6883b313b1be14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Non-Atomic :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No at&amp;oacute;mico:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f8545b1c7ebcf7fbb96a330cc7553c4639fcd04f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Non-atomic&lt;/strong&gt; = No thread safety</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No at&amp;oacute;mico&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; = Sin seguridad de hilo&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8601d32aec89322e75d4db57f8a0bc0221121029" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Now If *name property is atomic&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora si la propiedad * name es at&amp;oacute;mica&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="151983afa96ad8bf924e8cee40345c29148887cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Now If *name property is nonatomic&lt;/strong&gt; then</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora si la propiedad * name no es at&amp;oacute;mica,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; entonces&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="48bf5499e3ac63560ca0e0106a29021adb072bfb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Performance&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Performance&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc771fd41033a77969a605ae1d4d583af20dfab0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pros :&lt;/strong&gt;
Extremely fast execution.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pros:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ejecuci&amp;oacute;n extremadamente r&amp;aacute;pida.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d428c41cc97f21b9ed84d34ebd585cbf9424fe05" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pros :&lt;/strong&gt;
Return of fully initialised objects each time makes it best choice in case of multi-threading.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pros: El&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; retorno de objetos completamente inicializados cada vez es la mejor opci&amp;oacute;n en caso de subprocesos m&amp;uacute;ltiples.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5dd2654f3ebc510659995067c7118d35b3e88d2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;So &amp;mdash; if you define an atomic property in Objective-C it will remain atomic when used by Swift.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, si define una propiedad at&amp;oacute;mica en Objective-C, permanecer&amp;aacute; at&amp;oacute;mica cuando Swift la use.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6d99c357ae636e2b3295a9622db183d6bbd34fa0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;There is no such keyword &quot;atomic&quot;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No existe esa palabra clave &quot;at&amp;oacute;mica&quot;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0b354ff06cc9df3b63e2688468d4f8a55f30ccb5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What?! Are multithreading and &lt;a href=&quot;https://stackoverflow.com/questions/261683/what-is-meant-by-thread-safe-code&quot;&gt;thread safety&lt;/a&gt; different?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iexcl;&amp;iquest;Qu&amp;eacute;?! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Son &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;diferentes &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/261683/what-is-meant-by-thread-safe-code&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;los subprocesos&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; m&amp;uacute;ltiples y la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;seguridad del hilo&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d1c255bfcdaf01e1eed156159bb65466687e8bbb" translate="yes" xml:space="preserve">
          <source>AND in implementation file</source>
          <target state="translated">Y en el archivo de aplicación</target>
        </trans-unit>
        <trans-unit id="031026e6565f207b619d61f36867d2bad1a58089" translate="yes" xml:space="preserve">
          <source>ARC | atomic | synthesized getter: 47</source>
          <target state="translated">atomic</target>
        </trans-unit>
        <trans-unit id="5cdbb3f5ce65e619a74e436ca69abc9e558570a5" translate="yes" xml:space="preserve">
          <source>ARC | nonatomic | synthesized getter: 38 (note: ARC's adding ref count cycling here)</source>
          <target state="translated">nonatomic</target>
        </trans-unit>
        <trans-unit id="4f64e38a90d15b8a6b6573bc690e9e02e460bc3e" translate="yes" xml:space="preserve">
          <source>Adding to this:</source>
          <target state="translated">Añadiendo a esto:</target>
        </trans-unit>
        <trans-unit id="005fcaf14fcbfa73d92d1ddda41994d6c9b6572e" translate="yes" xml:space="preserve">
          <source>After reading so many articles, Stack&amp;nbsp;Overflow posts and making demo applications to check variable property attributes, I decided to put all the attributes information together:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Despu&amp;eacute;s de leer tantos art&amp;iacute;culos, publicaciones de Stack Overflow y hacer aplicaciones de demostraci&amp;oacute;n para verificar los atributos de las propiedades variables, decid&amp;iacute; juntar toda la informaci&amp;oacute;n de los atributos:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="97743bd8dd615d016758a893c5cacd3619f8ec85" translate="yes" xml:space="preserve">
          <source>All properties work parallelly (like asynchronously).</source>
          <target state="translated">Todas las propiedades funcionan paralelamente (como asincrónicamente).</target>
        </trans-unit>
        <trans-unit id="3dea8ae48d01239709fc42013945ab309b71b9be" translate="yes" xml:space="preserve">
          <source>Allowing to be read right in the middle of a 'not yet finished write or empty value' or not allowing and only allowing to read when the value is &lt;em&gt;fully&lt;/em&gt; written.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Permitir que se lea justo en el medio de un 'valor de escritura o valor vac&amp;iacute;o a&amp;uacute;n no terminado' o no permitir y solo permitir leer cuando el valor est&amp;aacute; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;completamente&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; escrito.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ffe57890eea72d085b8c1756cf6ca03abeaf9aee" translate="yes" xml:space="preserve">
          <source>Although I pay close attention to performance, I still say &lt;strong&gt;Semantics First!&lt;/strong&gt;. Meanwhile, performance is a low priority for many projects. However, knowing execution details and costs of technologies you use certainly doesn't hurt. You should use the right technology for your needs, purposes, and abilities. Hopefully this will save you a few hours of comparisons, and help you make a better informed decision when designing your programs.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aunque presto mucha atenci&amp;oacute;n al rendimiento, sigo diciendo &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Semantics First! &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Mientras tanto, el rendimiento es una prioridad baja para muchos proyectos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, conocer los detalles de ejecuci&amp;oacute;n y los costos de las tecnolog&amp;iacute;as que usa ciertamente no hace da&amp;ntilde;o. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Debe usar la tecnolog&amp;iacute;a adecuada para sus necesidades, prop&amp;oacute;sitos y habilidades. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esperemos que esto le ahorre algunas horas de comparaci&amp;oacute;n y lo ayude a tomar una decisi&amp;oacute;n mejor informada al dise&amp;ntilde;ar sus programas.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2cbd9d8863eeb2645be04a094bcbed84ed0f52b0" translate="yes" xml:space="preserve">
          <source>Another difference is that atomic properties will retain/release cycle your objects within the getter.</source>
          <target state="translated">Otra diferencia es que las propiedades atómicas retendrán el ciclo de liberación de sus objetos dentro del obturador.</target>
        </trans-unit>
        <trans-unit id="b90a1bc53199071cf2f05cf74dce10673fc22174" translate="yes" xml:space="preserve">
          <source>As atomic is default so,</source>
          <target state="translated">Como atómico es por defecto así,</target>
        </trans-unit>
        <trans-unit id="669dc440babc6ff197e609915366d3ba4ec76a8c" translate="yes" xml:space="preserve">
          <source>As you have probably guessed, reference count activity/cycling is a significant contributor with atomics and under ARC. You would also see greater differences in contested cases.</source>
          <target state="translated">Como probablemente has adivinado,el recuento de referencia de la actividad cíclica es un contribuyente significativo con la atómica y bajo el ARC.También vería mayores diferencias en los casos impugnados.</target>
        </trans-unit>
        <trans-unit id="5b1dca09059391e6197dc9be1c6f3ad674bb8c11" translate="yes" xml:space="preserve">
          <source>Assuming that you are @synthesizing the method implementations, atomic vs. non-atomic changes the generated code.  If you are writing your own setter/getters, atomic/nonatomic/retain/assign/copy are merely advisory.  (Note:  @synthesize is now the default behavior in recent versions of LLVM.  There is also no need to declare instance variables;  they will be synthesized automatically, too, and will have an &lt;code&gt;_&lt;/code&gt; prepended to their name to prevent accidental direct access).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Suponiendo que est&amp;aacute; sintetizando las implementaciones del m&amp;eacute;todo, at&amp;oacute;mico vs. no at&amp;oacute;mico cambia el c&amp;oacute;digo generado. Si est&amp;aacute; escribiendo su propio setter / getters, at&amp;oacute;mico / no at&amp;oacute;mico / retener / asignar / copiar son meramente informativos. (Nota: @synthesize ahora es el comportamiento predeterminado en versiones recientes de LLVM. Tampoco es necesario declarar variables de instancia; tambi&amp;eacute;n se sintetizar&amp;aacute;n autom&amp;aacute;ticamente y tendr&amp;aacute;n un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;_&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; antepuesto a su nombre para evitar el acceso directo accidental).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="51aecdcbd1fa29f5e17a19748f03b1a72c7b0d7c" translate="yes" xml:space="preserve">
          <source>At the same time if you call</source>
          <target state="translated">Al mismo tiempo,si llamas</target>
        </trans-unit>
        <trans-unit id="f3023cb8188912c321e51f84008e15af7ab75428" translate="yes" xml:space="preserve">
          <source>Atomic</source>
          <target state="translated">Atomic</target>
        </trans-unit>
        <trans-unit id="9b160c50dc810596cdf78df71886c71571d64371" translate="yes" xml:space="preserve">
          <source>Atomic - it can't be broken down, so the result is expected. With nonatomic - when another thread access the memory zone it can modify it, so the result is unexpected.</source>
          <target state="translated">Atómico-no puede ser descompuesto,por lo que el resultado es esperado.Con no atómico-cuando otro hilo accede a la zona de memoria puede modificarlo,así que el resultado es inesperado.</target>
        </trans-unit>
        <trans-unit id="56787168e1c9b9ef3ae0cf3dad2217f8eba7d6c7" translate="yes" xml:space="preserve">
          <source>Atomic &lt;strong&gt;doesn't&lt;/strong&gt; guarantee thread safety, though it's useful for achieving thread safety. Thread Safety is relative to how you write your code/ which thread queue you are reading/writing from. It only guarantees non-crashable multithreading.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Atomic &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; garantiza la seguridad del hilo, aunque es &amp;uacute;til para lograr la seguridad del hilo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La seguridad de subprocesos depende de c&amp;oacute;mo escriba su c&amp;oacute;digo / de qu&amp;eacute; fila de subprocesos est&amp;aacute; leyendo / escribiendo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Solo garantiza el subprocesamiento m&amp;uacute;ltiple no bloqueable.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="158d5f3bbf986fce8d6f3929fb7a0ecce795cd2b" translate="yes" xml:space="preserve">
          <source>Atomic accessors in a non garbage collected environment (i.e. when using retain/release/autorelease) will use a lock to ensure that another thread doesn't interfere with the correct setting/getting of the value.</source>
          <target state="translated">Los accesorios atómicos en un entorno que no sea de recogida de basura (es decir,cuando se utiliza retainreleaseautorelease)utilizarán un candado para garantizar que otro hilo no interfiera con la correcta fijación del valor.</target>
        </trans-unit>
        <trans-unit id="89e66db1ad91cce7b2d346303a7b197d5ece77a4" translate="yes" xml:space="preserve">
          <source>Atomic guarantees that access to the property will be performed in an atomic manner. E.g. it always return a fully initialised objects, any get/set of a property on one thread must complete before another can access it.</source>
          <target state="translated">La atómica garantiza que el acceso a la propiedad se realizará de manera atómica.Por ejemplo,siempre devuelve un objeto totalmente inicializado,cualquier inicio de una propiedad en un hilo debe completarse antes de que otro pueda acceder a él.</target>
        </trans-unit>
        <trans-unit id="f5f7dedc45052e0d3aeb0e9c80106066a594e4ba" translate="yes" xml:space="preserve">
          <source>Atomic is &lt;strong&gt;thread safe&lt;/strong&gt;, it is &lt;strong&gt;slow&lt;/strong&gt; and it &lt;strong&gt;well-assures (not guaranteed)&lt;/strong&gt; that only the locked value is provided no matter how many threads are attempting access over the same zone. When using atomic, a piece of code written inside this function becomes the part of the critical section, to which only one thread can execute at a time.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Atomic es &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;seguro para subprocesos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , es &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;lento&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;asegura (no est&amp;aacute; garantizado)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que solo se proporciona el valor bloqueado sin importar cu&amp;aacute;ntos subprocesos intenten acceder en la misma zona. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando se usa atomic, un fragmento de c&amp;oacute;digo escrito dentro de esta funci&amp;oacute;n se convierte en parte de la secci&amp;oacute;n cr&amp;iacute;tica, a la que solo se puede ejecutar un subproceso a la vez.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7585badc81fcfc702a4b9198178ff361601c32cd" translate="yes" xml:space="preserve">
          <source>Atomic is the default: if you don&amp;rsquo;t type anything, your property is
  atomic. An atomic property is guaranteed that if you try to read from
  it, you will get back a valid value. It does not make any guarantees
  about what that value might be, but you will get back good data, not
  just junk memory. What this allows you to do is if you have multiple
  threads or multiple processes pointing at a single variable, one
  thread can read and another thread can write. If they hit at the same
  time, the reader thread is guaranteed to get one of the two values:
  either before the change or after the change. What atomic does not
  give you is any sort of guarantee about which of those values you
  might get. Atomic is really commonly confused with being thread-safe,
  and that is not correct. You need to guarantee your thread safety
  other ways. However, atomic will guarantee that if you try to read,
  you get back some kind of value.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;At&amp;oacute;mico es el valor predeterminado: si no escribe nada, su propiedad es at&amp;oacute;mica. Se garantiza una propiedad at&amp;oacute;mica que si intenta leer de ella, obtendr&amp;aacute; un valor v&amp;aacute;lido. No ofrece ninguna garant&amp;iacute;a sobre cu&amp;aacute;l podr&amp;iacute;a ser ese valor, pero obtendr&amp;aacute; buenos datos, no solo la memoria basura. Lo que esto le permite hacer es que si tiene m&amp;uacute;ltiples hilos o m&amp;uacute;ltiples procesos apuntando a una sola variable, un hilo puede leer y otro hilo puede escribir. Si golpean al mismo tiempo, se garantiza que el hilo del lector obtendr&amp;aacute; uno de los dos valores: antes del cambio o despu&amp;eacute;s del cambio. Lo que atomic no le ofrece es ning&amp;uacute;n tipo de garant&amp;iacute;a sobre cu&amp;aacute;les de esos valores puede obtener. Atomic se confunde realmente con ser seguro para subprocesos, y eso no es correcto. Debe garantizar la seguridad de su hilo de otras maneras.Sin embargo, atomic garantizar&amp;aacute; que si intentas leer, obtienes alg&amp;uacute;n tipo de valor.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c26403b797c5d1768fd18ce45b0e96426d55041b" translate="yes" xml:space="preserve">
          <source>Atomic make getter and setter of the property thread safe. for example if u have written :</source>
          <target state="translated">Los atómicos hacen que el receptor y el fijador del hilo de la propiedad sean seguros.Por ejemplo,si has escrito..:</target>
        </trans-unit>
        <trans-unit id="ea657186686dc25af58658f7340d085ea2354148" translate="yes" xml:space="preserve">
          <source>Atomic means only one thread accesses the variable (static type). Atomic is thread-safe, but it is slow.</source>
          <target state="translated">Atómico significa que sólo un hilo accede a la variable (tipo estático).El atómico es seguro para el hilo,pero es lento.</target>
        </trans-unit>
        <trans-unit id="f6d05505130392ddbaadc6fa8e2fe878cbaf0010" translate="yes" xml:space="preserve">
          <source>Atomic means only one thread can access the variable at a time (static type). Atomic is thread-safe, but it is slow.</source>
          <target state="translated">Atómico significa que sólo un hilo puede acceder a la variable a la vez (tipo estático).El atómico es seguro para el hilo,pero es lento.</target>
        </trans-unit>
        <trans-unit id="2c29d43758bf4c1706fdf7c909cd8aef22678f57" translate="yes" xml:space="preserve">
          <source>Atomic: Ensure thread-safety by locking the thread using NSLOCK.</source>
          <target state="translated">Atómica:Asegura la seguridad del hilo bloqueando el hilo con NSLOCK.</target>
        </trans-unit>
        <trans-unit id="cd7773c6a864e0691a1de774e8c8593a1e851ce9" translate="yes" xml:space="preserve">
          <source>Basically, the atomic version has to take a lock in order to guarantee thread safety, and also is bumping the ref count on the object (and the autorelease count to balance it) so that the object is guaranteed to exist for the caller, otherwise there is a potential race condition if another thread is setting the value, causing the ref count to drop to 0.</source>
          <target state="translated">Básicamente,la versión atómica tiene que llevar un candado para garantizar la seguridad del hilo,y también está haciendo saltar el recuento de ref.en el objeto (y el recuento de auto-lanzamiento para equilibrarlo)de modo que se garantice la existencia del objeto para la persona que llama,de lo contrario hay una posible condición de carrera si otro hilo está fijando el valor,haciendo que el recuento de ref.caiga a 0.</target>
        </trans-unit>
        <trans-unit id="dfc88261cc9b67c90909d642678537e41c4ff870" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;atomic&lt;/code&gt; variables can not be interrupted, the value contained by them at any point is (thread-lock) guaranteed to be &lt;strong&gt;uncorrupted&lt;/strong&gt;, although, ensuring this thread lock makes access to them slower. &lt;code&gt;non-atomic&lt;/code&gt; variables, on the other hand, make no such guarantee but do offer the luxury of quicker access. To sum it up, go with &lt;code&gt;non-atomic&lt;/code&gt; when you know your variables won't be accessed by multiple threads simultaneously and speed things up.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Debido a que las &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;variables &lt;/font&gt;&lt;/font&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no se pueden interrumpir, se garantiza que el valor contenido en ellas en cualquier punto (bloqueo de hilo) &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;corrompe&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , aunque garantizar que este bloqueo de hilo haga que el acceso a ellas sea m&amp;aacute;s lento. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;non-atomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; variables &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no at&amp;oacute;micas&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , por otro lado, no ofrecen tal garant&amp;iacute;a, pero ofrecen el lujo de un acceso m&amp;aacute;s r&amp;aacute;pido. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para resumir, elija &lt;/font&gt;&lt;/font&gt; &lt;code&gt;non-atomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; cuando sepa que m&amp;uacute;ltiples hilos no tendr&amp;aacute;n acceso a sus variables simult&amp;aacute;neamente y acelerar&amp;aacute; las cosas.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5def4d181c0b234f6030c20a1065db3aa1e7656e" translate="yes" xml:space="preserve">
          <source>Before you begin: You must know that every object in memory needs to be deallocated from memory for a new writer to happen. You can't just simply write on top of something as you do on paper. You &lt;strong&gt;must&lt;/strong&gt; first erase (dealloc) it and then you can write onto it. If at the moment that the erase is done (or half done) and nothing &lt;strong&gt;has yet&lt;/strong&gt; been wrote (or half wrote) and you try to read it could be very problematic! Atomic and nonatomic help you treat this problem in different ways.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Antes de comenzar: debe saber que cada objeto en la memoria debe ser desasignado de la memoria para que ocurra un nuevo escritor. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No puedes simplemente escribir encima de algo como lo haces en papel. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Usted &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;debe&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; borrar primero (dealloc) y luego se puede escribir en &amp;eacute;l. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si en el momento en que se borra (o se hace a medias) y &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;todav&amp;iacute;a&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ha escrito &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;nada &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(o &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ha escrito a medias) e intenta leerlo, &amp;iexcl;podr&amp;iacute;a ser muy problem&amp;aacute;tico! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La ayuda at&amp;oacute;mica y no at&amp;oacute;mica lo ayuda a tratar este problema de diferentes maneras.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e19bbd7c23d0c7c4056f980c7f2cc203506c4688" translate="yes" xml:space="preserve">
          <source>But it is fast in performance</source>
          <target state="translated">Pero es rápido en el desempeño</target>
        </trans-unit>
        <trans-unit id="59d1bb168c787f2090eeb85af65c9e07fbd0c969" translate="yes" xml:space="preserve">
          <source>But it is slow in performance</source>
          <target state="translated">Pero es lento en el desempeño</target>
        </trans-unit>
        <trans-unit id="466385388946acc99f6af4e50599b87b0caa1038" translate="yes" xml:space="preserve">
          <source>Code Talk :</source>
          <target state="translated">Hablar en código:</target>
        </trans-unit>
        <trans-unit id="75e291169a2ebb63c935a5de7382990c0513d618" translate="yes" xml:space="preserve">
          <source>Consider:</source>
          <target state="translated">Consider:</target>
        </trans-unit>
        <trans-unit id="1bababff006e8f53086ecf6a193ae7c2dc1436a1" translate="yes" xml:space="preserve">
          <source>Crashing or not because of having or not having an autorelease pool.</source>
          <target state="translated">Chocando o no por tener o no tener una piscina de auto-lanzamiento.</target>
        </trans-unit>
        <trans-unit id="4cf9c3f11dca2f6a00e2d96ff2141da6323e8c8b" translate="yes" xml:space="preserve">
          <source>Doesn't guarantee full written values to be read!</source>
          <target state="translated">¡No garantiza los valores escritos completos para ser leídos!</target>
        </trans-unit>
        <trans-unit id="2a68c2b3f3d3b9d7f59544dacf5f1d2373fa8a26" translate="yes" xml:space="preserve">
          <source>Due to the number of optimizations and variations in implementations, it's quite difficult to measure real-world impacts in these contexts. You might often hear something like &quot;Trust it, unless you profile and find it is a problem&quot;. Due to the abstraction level, it's actually quite difficult to measure actual impact. Gleaning actual costs from profiles can be very time consuming, and due to abstractions, quite inaccurate. As well, ARC vs MRC can make a big difference.</source>
          <target state="translated">Debido al número de optimizaciones y variaciones en las implementaciones,es bastante difícil medir los impactos en el mundo real en estos contextos.A menudo se puede escuchar algo como &quot;Confía en ello,a menos que hagas un perfil y descubras que es un problema&quot;.Debido al nivel de abstracción,es en realidad bastante difícil medir el impacto real.La obtención de los costos reales de los perfiles puede llevar mucho tiempo,y debido a las abstracciones,bastante inexacto.Además,ARC vs MRC puede hacer una gran diferencia.</target>
        </trans-unit>
        <trans-unit id="dc588869b460d7a7c0dde78b8f7455e69c812d3c" translate="yes" xml:space="preserve">
          <source>Easiest answer first: There's no difference between your second two examples. By default, property accessors are atomic.</source>
          <target state="translated">La respuesta más fácil primero:No hay diferencia entre sus dos segundos ejemplos.Por defecto,los accesorios de la propiedad son atómicos.</target>
        </trans-unit>
        <trans-unit id="757cc03a89227c519cc7dc5a2bfb3c7e09103b83" translate="yes" xml:space="preserve">
          <source>Ensuring data integrity -- one of the primary challenges of multi-threaded programming -- is achieved by other means.</source>
          <target state="translated">Asegurar la integridad de los datos-uno de los principales desafíos de la programación multi-hilo-se logra por otros medios.</target>
        </trans-unit>
        <trans-unit id="952a7acd4884031a827584cd959102d7c27e63db" translate="yes" xml:space="preserve">
          <source>Example with MRC of a property with an ivar _internal:</source>
          <target state="translated">Ejemplo con MRC de una propiedad con un ivar _interno:</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="af66993b461bd3431cadd690caf86ea36449e356" translate="yes" xml:space="preserve">
          <source>First read &lt;a href=&quot;https://stackoverflow.com/questions/21098494/atomic-properties-vs-thread-safe-in-objective-c&quot;&gt;this&lt;/a&gt; question and then read &lt;a href=&quot;https://stackoverflow.com/a/589392/5175709&quot;&gt;Bbum's answer&lt;/a&gt;. In addition, then read my summary.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Primero lea &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/21098494/atomic-properties-vs-thread-safe-in-objective-c&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esta&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; pregunta y luego lea &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/589392/5175709&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la respuesta de Bbum&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, luego lea mi resumen.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0cecd6711aec49678ad292677bfd067b2bfe459b" translate="yes" xml:space="preserve">
          <source>For In Swift
Confirming that Swift properties are nonatomic in the ObjC sense. One reason is so you think about whether per-property atomicity is sufficient for your needs.</source>
          <target state="translated">Porque en Swift se confirma que las propiedades de Swift son no atómicas en el sentido de ObjC.Una razón es para que piense si la atomicidad por propiedad es suficiente para sus necesidades.</target>
        </trans-unit>
        <trans-unit id="0ea1177f91a4c498d582627a0507f246eb7808be" translate="yes" xml:space="preserve">
          <source>Fro more info please visit the website 
&lt;a href=&quot;http://rdcworld-iphone.blogspot.in/2012/12/variable-property-attributes-or.html&quot;&gt;http://rdcworld-iphone.blogspot.in/2012/12/variable-property-attributes-or.html&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para obtener m&amp;aacute;s informaci&amp;oacute;n, visite el sitio web &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://rdcworld-iphone.blogspot.in/2012/12/variable-property-attributes-or.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://rdcworld-iphone.blogspot.in/2012/12/variable-property-attributes-or.html&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db368e14ab7f01e913bc2e2e6d175b2110a3c9c9" translate="yes" xml:space="preserve">
          <source>Here's the interesting part: Performance using atomic property accesses in &lt;strong&gt;uncontested&lt;/strong&gt; (e.g. single-threaded) cases can be really very fast in some cases. In less than ideal cases, use of atomic accesses can cost more than 20 times the overhead of &lt;code&gt;nonatomic&lt;/code&gt;. While the &lt;strong&gt;Contested&lt;/strong&gt; case using 7 threads was 44 times slower for the three-byte struct (2.2&amp;nbsp;GHz &lt;a href=&quot;https://en.wikipedia.org/wiki/Intel_Core#Core_i7&quot;&gt;Core&amp;nbsp;i7&lt;/a&gt; Quad Core, x86_64). The three-byte struct is an example of a very slow property.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; est&amp;aacute; la parte interesante: el rendimiento mediante el acceso a propiedades at&amp;oacute;micas en &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;casos &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no disputados&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (por ejemplo, de un solo subproceso) puede ser realmente muy r&amp;aacute;pido en algunos casos. En casos menos que ideales, el uso de accesos at&amp;oacute;micos puede costar m&amp;aacute;s de 20 veces la sobrecarga de los no &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nonatomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Mientras que el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;caso &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;impugnado&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con 7 subprocesos fue 44 veces m&amp;aacute;s lento para la estructura de tres bytes ( &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Intel_Core#Core_i7&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Core i7&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Quad Core de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2.2 GHz &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, x86_64). La estructura de tres bytes es un ejemplo de una propiedad muy lenta.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="42e679fd3d38e1ac2ae9fb1fd1602697916fa1ae" translate="yes" xml:space="preserve">
          <source>I found a pretty well put explanation of atomic and non-atomic properties &lt;a href=&quot;http://archive.atomicmpc.com.au/forums.asp?s=2&amp;amp;c=10&amp;amp;t=4594&quot;&gt;here&lt;/a&gt;. Here's some relevant text from the same:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Encontr&amp;eacute; una explicaci&amp;oacute;n bastante bien puesta de las propiedades at&amp;oacute;micas y no at&amp;oacute;micas &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://archive.atomicmpc.com.au/forums.asp?s=2&amp;amp;c=10&amp;amp;t=4594&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aqu&amp;iacute;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; hay un texto relevante del mismo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0dcf329e22e36816a065b09cb8ea101357ebfd69" translate="yes" xml:space="preserve">
          <source>I'd always considered atomic as a default quite curious. At the abstraction level we work at, using atomic properties for a class as a vehicle to achieve 100% thread-safety is a corner case. For truly correct multithreaded programs, intervention by the programmer is almost certainly a requirement. Meanwhile, performance characteristics and execution have not&amp;nbsp;yet been detailed in depth. Having written some heavily multithreaded programs over the years, I had been declaring my properties as &lt;code&gt;nonatomic&lt;/code&gt; the entire time because atomic was not sensible for any purpose. During discussion of the details of atomic and nonatomic properties &lt;a href=&quot;https://stackoverflow.com/questions/12010211/use-of-atomic-properties-in-objective-c-any-side-effects&quot;&gt;this question&lt;/a&gt;, I did some profiling encountered some curious results.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Siempre hab&amp;iacute;a considerado at&amp;oacute;mico como un defecto bastante curioso. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En el nivel de abstracci&amp;oacute;n en el que trabajamos, el uso de propiedades at&amp;oacute;micas para una clase como veh&amp;iacute;culo para lograr el 100% de seguridad de roscas es un caso de esquina. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para programas multiproceso verdaderamente correctos, la intervenci&amp;oacute;n del programador es casi un requisito. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Mientras tanto, las caracter&amp;iacute;sticas de rendimiento y ejecuci&amp;oacute;n a&amp;uacute;n no se han detallado en profundidad. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Habiendo escrito algunos programas muy multiproceso a lo largo de los a&amp;ntilde;os, hab&amp;iacute;a estado declarando mis propiedades como no &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nonatomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; todo el tiempo porque atomic no era sensato para ning&amp;uacute;n prop&amp;oacute;sito. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Durante la discusi&amp;oacute;n de los detalles de las propiedades at&amp;oacute;micas y no at&amp;oacute;micas de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/12010211/use-of-atomic-properties-in-objective-c-any-side-effects&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esta pregunta&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , hice algunos perfiles &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;y encontr&amp;eacute; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;algunos resultados curiosos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="53df0d90dbfd2e8b81a9c6bdb363f7adf147a62d" translate="yes" xml:space="preserve">
          <source>If &lt;strong&gt;before&lt;/strong&gt; writing you &lt;strong&gt;have&lt;/strong&gt; erased that which was previously written on paper and then someone wants to read you &lt;em&gt;can&lt;/em&gt; still read. How? You will be reading from something similar to Mac OS Trash bin ( as Trash bin is not still 100% erased...it's in a limbo) ---&amp;gt; If ThreadA is to read while ThreadB has already deallocated to write, you would get a value from either the final fully written value by ThreadB or get something from autorelease pool.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;antes de&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; escribir &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ha&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; borrado lo que estaba escrito anteriormente en papel y luego alguien quiere leer, &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a&amp;uacute;n &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;puede&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; leer. &amp;iquest;C&amp;oacute;mo? Leer&amp;aacute; algo similar a la papelera de Mac OS (ya que la papelera a&amp;uacute;n no se ha borrado al 100% ... est&amp;aacute; en un limbo) ---&amp;gt; Si ThreadA es para leer mientras ThreadB ya se ha desasignado para escribir, obtendr&amp;aacute; un valor del valor final completamente escrito por ThreadB u obtener algo del grupo de liberaci&amp;oacute;n autom&amp;aacute;tica.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aeb0ab7ed38eced8087358822adc1caacc3f25eb" translate="yes" xml:space="preserve">
          <source>If a thread changes the value of the instance the changed value is available to all the threads, and only one thread can change the value at a time.</source>
          <target state="translated">Si un hilo cambia el valor de la instancia,el valor cambiado está disponible para todos los hilos,y sólo un hilo puede cambiar el valor a la vez.</target>
        </trans-unit>
        <trans-unit id="9cd5b7f015914683553101835da5c0b4775c2c87" translate="yes" xml:space="preserve">
          <source>If one person is trying to write and has only written 4 of the 8 letters to write, then no can read in the middle, the reading can only be done when all 8 letters is written --&amp;gt; No read(get) will happen on 'a thread that is still writing', i.e. if there are 8 bytes to bytes to be written, and only 4 bytes are written&amp;mdash;&amp;mdash;up to that moment, you are not allowed to read from it. But since I said it won't crash then it would read from the value of an &lt;em&gt;autoreleased&lt;/em&gt; object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si una persona est&amp;aacute; tratando de escribir y solo ha escrito 4 de las 8 letras para escribir, entonces no se puede leer en el medio, la lectura solo se puede hacer cuando se escriben las 8 letras -&amp;gt; No suceder&amp;aacute; lectura (get) en 'un hilo que todav&amp;iacute;a est&amp;aacute; escribiendo', es decir, si hay que escribir de 8 bytes a bytes y solo se escriben 4 bytes, hasta ese momento, no se le permite leer de &amp;eacute;l. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero como dije que no se bloquear&amp;aacute;, leer&amp;iacute;a el valor de un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;lanzado autom&amp;aacute;ticamente&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0e60a837b656fdb2a0431c6bc1d827b07c77b719" translate="yes" xml:space="preserve">
          <source>If the instance variable is not gonna be changed by multiple threads you can use it. It improves the performance.</source>
          <target state="translated">Si la variable de instancia no va a ser cambiada por múltiples hilos,puedes usarla.Mejora el rendimiento.</target>
        </trans-unit>
        <trans-unit id="fa7d0e9c8949d2b6aa328a9fec0cb7a660ef020c" translate="yes" xml:space="preserve">
          <source>If the property &quot;name&quot; was nonatomic, then all threads in above example - A,B, C and D will execute simultaneously producing any unpredictable result. In case of atomic, either one of A, B or C will execute first, but D can still execute in parallel.</source>
          <target state="translated">Si la propiedad &quot;name&quot; era no atómica,entonces todos los hilos del ejemplo anterior-A,B,C y D se ejecutarán simultáneamente produciendo cualquier resultado impredecible.En el caso de atómico,cualquiera de A,B o C se ejecutará primero,pero D todavía puede ejecutarse en paralelo.</target>
        </trans-unit>
        <trans-unit id="fe485326675d7d2b88c23e0f595ee6a297fa4017" translate="yes" xml:space="preserve">
          <source>If two different people want to read and write at the same time, your paper won't just burn! --&amp;gt; Your application will never crash, even in a race condition.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si dos personas diferentes quieren leer y escribir al mismo tiempo, &amp;iexcl;tu papel no se quemar&amp;aacute;! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-&amp;gt; Tu aplicaci&amp;oacute;n nunca se bloquear&amp;aacute;, incluso en condiciones de carrera.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2907fa671a851246609e65b92f375972d2b090d5" translate="yes" xml:space="preserve">
          <source>If you are using atomic, it means the thread will be safe and read-only. If you are using nonatomic, it means the multiple threads access the variable and is thread unsafe, but it is executed fast, done a read and write operations; this is a dynamic type.</source>
          <target state="translated">Si estás usando el atómico,significa que el hilo será seguro y de sólo lectura.Si estás usando no atómico,significa que los múltiples hilos acceden a la variable y es un hilo inseguro,pero se ejecuta rápidamente,se hace una operación de lectura y escritura;este es un tipo dinámico.</target>
        </trans-unit>
        <trans-unit id="428f7d87b20e0ac4a9aac645a9382a64497f95b5" translate="yes" xml:space="preserve">
          <source>If you are using your property in multi-threaded code then you would be able to see the difference between nonatomic and atomic attributes. Nonatomic is faster than atomic and atomic is thread-safe, not nonatomic.</source>
          <target state="translated">Si está usando su propiedad en código multi-hilo entonces podría ver la diferencia entre los atributos no atómicos y atómicos.Nonatomic es más rápido que atómico y atómico es a prueba de hilos,no no-atómico.</target>
        </trans-unit>
        <trans-unit id="bf0fc3cb78576b4927e58b55e16dad60b50135e6" translate="yes" xml:space="preserve">
          <source>If you call &quot;name&quot; from thread &lt;strong&gt;A&lt;/strong&gt;,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si llamas &quot;nombre&quot; desde el hilo &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ,&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6bed63c9b598ff3c1689b7a172b312f05c94268c" translate="yes" xml:space="preserve">
          <source>If you do not specify &quot;nonatomic&quot;, then the property is atomic, but you can still specify &quot;atomic&quot; explicitly in recent versions if you want to.</source>
          <target state="translated">Si no se especifica &quot;no atómico&quot;,entonces la propiedad es atómica,pero aún se puede especificar &quot;atómico&quot; explícitamente en las versiones recientes si se desea.</target>
        </trans-unit>
        <trans-unit id="b3d25d57cfcaf0f91a92c71b555c13ca24c48562" translate="yes" xml:space="preserve">
          <source>If you imagine the following function occurring on two threads at once you can see why the results would not be pretty.</source>
          <target state="translated">Si imaginas la siguiente función ocurriendo en dos hilos a la vez puedes ver por qué los resultados no serían bonitos.</target>
        </trans-unit>
        <trans-unit id="ad0bd596c87dee16e9b201c0db38575508e5f5f7" translate="yes" xml:space="preserve">
          <source>Implication of &lt;code&gt;atomic&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Implicaci&amp;oacute;n de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83e77580a4c5ad2c6ae90254011081aed2807ee6" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;nonatomic&lt;/code&gt;, no such guarantees are made.   Thus, &lt;code&gt;nonatomic&lt;/code&gt; is considerably faster than &quot;atomic&quot;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En no &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nonatomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , no se hacen tales garant&amp;iacute;as. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, no &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nonatomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es considerablemente m&amp;aacute;s r&amp;aacute;pido que &quot;at&amp;oacute;mico&quot;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8933d5f65d5f09ff3f586e9b3d5961e4504e9a90" translate="yes" xml:space="preserve">
          <source>In iOS, &lt;code&gt;@sychronise&lt;/code&gt; also provides the mutex lock .Now it serves in FIFO mode and ensures the flow is not affected by two classes sharing the same instance. However, if the task is on main thread, avoid accessing object using atomic properties as it may hold your UI and degrade the performance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En iOS, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@sychronise&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tambi&amp;eacute;n proporciona el bloqueo de mutex. Ahora sirve en modo FIFO y garantiza que el flujo no se vea afectado por dos clases que comparten la misma instancia. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, si la tarea est&amp;aacute; en el subproceso principal, evite acceder al objeto utilizando propiedades at&amp;oacute;micas, ya que puede contener su interfaz de usuario y degradar el rendimiento.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="78dcc05a8b48a89d78a8a925227ef5c773900b55" translate="yes" xml:space="preserve">
          <source>In our context:</source>
          <target state="translated">En nuestro contexto:</target>
        </trans-unit>
        <trans-unit id="b2fc2a31bbb825f80a48c090d06d5637549e56ef" translate="yes" xml:space="preserve">
          <source>In the article &lt;em&gt;&lt;a href=&quot;http://rdcworld-iphone.blogspot.in/2012/12/variable-property-attributes-or.html&quot;&gt;&lt;strong&gt;Variable property attributes or modifiers in iOS&lt;/strong&gt;&lt;/a&gt;&lt;/em&gt; you can find all the above-mentioned attributes, and that will definitely help you.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En el art&amp;iacute;culo &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;a href=&quot;http://rdcworld-iphone.blogspot.in/2012/12/variable-property-attributes-or.html&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Atributos o modificadores de propiedades variables en iOS&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , puede encontrar todos los atributos mencionados anteriormente, y eso definitivamente lo ayudar&amp;aacute;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b510c07af1689d04e0c92073219c7e5327f2a972" translate="yes" xml:space="preserve">
          <source>In this case, thread A could be renaming the object by calling &lt;code&gt;setFirstName:&lt;/code&gt; and then calling &lt;code&gt;setLastName:&lt;/code&gt;.   In the meantime, thread B may call &lt;code&gt;fullName&lt;/code&gt; in between thread A's two calls and will receive the new first name coupled with the old last name.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En este caso, el hilo A podr&amp;iacute;a cambiar el nombre del objeto llamando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;setFirstName:&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y luego llamar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;setLastName:&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Mientras tanto, el subproceso B puede llamar a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;fullName&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; entre las dos llamadas del subproceso A y recibir&amp;aacute; el nuevo nombre junto con el apellido anterior.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="da9491d2fb2ea9a679ca39f1170f07c876da3d2d" translate="yes" xml:space="preserve">
          <source>Instance variables are thread-safe if they behave correctly when accessed from multiple threads, regardless of the scheduling or interleaving of the execution of those threads by the runtime environment, and with no additional synchronization or other coordination on the part of the calling code.</source>
          <target state="translated">Las variables de instancia son seguras para los hilos si se comportan correctamente cuando se accede a ellas desde múltiples hilos,independientemente de la programación o intercalación de la ejecución de esos hilos por el entorno de tiempo de ejecución,y sin ninguna sincronización adicional u otro tipo de coordinación por parte del código de llamada.</target>
        </trans-unit>
        <trans-unit id="88955b39760efe23b0a168fea5c46d327d69b8c0" translate="yes" xml:space="preserve">
          <source>Interesting side note: User-defined accessors of the three-byte struct were 52 times faster than the synthesized atomic accessors; or 84% the speed of synthesized nonatomic accessors.</source>
          <target state="translated">Nota complementaria interesante:Los accesorios definidos por el usuario de la estructura de tres bytes eran 52 veces más rápidos que los accesorios atómicos sintetizados;o el 84% de la velocidad de los accesorios no atómicos sintetizados.</target>
        </trans-unit>
        <trans-unit id="bd5f7aa29cdb5852e9c6134812d23c81d4c91dde" translate="yes" xml:space="preserve">
          <source>Is faster than atomic</source>
          <target state="translated">Es más rápido que el atómico</target>
        </trans-unit>
        <trans-unit id="d9935d8df3697bfdf2e3d1810a602d26ae25554e" translate="yes" xml:space="preserve">
          <source>It is not actually a keyword.</source>
          <target state="translated">En realidad no es una palabra clave.</target>
        </trans-unit>
        <trans-unit id="965f4053d5f6a421d7a99992699acc65a44280ac" translate="yes" xml:space="preserve">
          <source>It may result in unexpected behavior, when two different process (threads) access the same variable at the same time.</source>
          <target state="translated">Puede dar lugar a un comportamiento inesperado,cuando dos procesos diferentes (hilos)acceden a la misma variable al mismo tiempo.</target>
        </trans-unit>
        <trans-unit id="ff986039c13fe411fa26a6360a02bf568a2527f8" translate="yes" xml:space="preserve">
          <source>It only assures the thread safety; it does not guarantee that. &lt;strong&gt;What I mean is you hire an expert driver for you car, still it doesn't guarantees car won't meet an accident. However, probability remains the slightest.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Solo asegura la seguridad del hilo; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No garantiza eso. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo que quiero decir es que contratas a un conductor experto para tu auto, a&amp;uacute;n as&amp;iacute; no garantiza que el auto no tenga un accidente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, la probabilidad sigue siendo la m&amp;aacute;s m&amp;iacute;nima.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d7e4c133e544fa1549014a474b3fdd79ecdd9b91" translate="yes" xml:space="preserve">
          <source>It will ensure value &quot;Sourov&quot; for A</source>
          <target state="translated">Asegurará el valor &quot;Sourov&quot; para A</target>
        </trans-unit>
        <trans-unit id="8aabb46c24820f1082cacf15fbe9319e591e75fa" translate="yes" xml:space="preserve">
          <source>It will return value &quot;Datta&quot; for A</source>
          <target state="translated">Devolverá el valor &quot;Datta&quot; para A</target>
        </trans-unit>
        <trans-unit id="d1d66b8948b48962f8898cfc2c57c109d82eec4c" translate="yes" xml:space="preserve">
          <source>It will return value &quot;Datta&quot; for B</source>
          <target state="translated">Devolverá el valor &quot;Datta&quot; para B</target>
        </trans-unit>
        <trans-unit id="5a101e022a872ea8b43a671dbba37801c695a1a0" translate="yes" xml:space="preserve">
          <source>MRC | atomic | synthesized getter: 47</source>
          <target state="translated">atomic</target>
        </trans-unit>
        <trans-unit id="a9c588343e9c4452aa8db91f654be503b1635cd7" translate="yes" xml:space="preserve">
          <source>MRC | nonatomic | manually implemented getters: 2</source>
          <target state="translated">nonatomic</target>
        </trans-unit>
        <trans-unit id="3e6e15d6a8cbe6913bff385297e0082e4e14a0e8" translate="yes" xml:space="preserve">
          <source>MRC | nonatomic | synthesized getter: 7</source>
          <target state="translated">nonatomic</target>
        </trans-unit>
        <trans-unit id="f936ab0c829c9aaa1ec757b6c0fe8638f4147e53" translate="yes" xml:space="preserve">
          <source>Mutex lock, as per the name, locks the mutability of the object. So if the object is accessed by a class, no other class can access the same object.</source>
          <target state="translated">El bloqueo de mutex,según el nombre,bloquea la mutabilidad del objeto.Así que si el objeto es accedido por una clase,ninguna otra clase puede acceder al mismo objeto.</target>
        </trans-unit>
        <trans-unit id="cf200f6a5c12c6aa0c00f246af59f0794bb918fd" translate="yes" xml:space="preserve">
          <source>Non atomic: Doesn't ensure thread-safety as there is no thread-locking mechanism.</source>
          <target state="translated">No atómico:No asegura la seguridad de los hilos ya que no hay un mecanismo de bloqueo de los hilos.</target>
        </trans-unit>
        <trans-unit id="cef6468ab63b7d41ecdaa4adabb0e5f0fb04e3f5" translate="yes" xml:space="preserve">
          <source>Non-Atomic</source>
          <target state="translated">Non-Atomic</target>
        </trans-unit>
        <trans-unit id="7265a45814aa6aabd0873b14668bcf5e20b299da" translate="yes" xml:space="preserve">
          <source>Nonatomic means multiple threads access the variable (dynamic type). Nonatomic is thread-unsafe, but it is fast.</source>
          <target state="translated">No atómico significa que múltiples hilos acceden a la variable (tipo dinámico).Nonatomic es un hilo inseguro,pero es rápido.</target>
        </trans-unit>
        <trans-unit id="40adcfc307e315b6e42a566334895747663e1977" translate="yes" xml:space="preserve">
          <source>Nonatomic means multiple threads can access the variable at same time (dynamic type). Nonatomic is thread-unsafe, but it is fast.</source>
          <target state="translated">No atómico significa que múltiples hilos pueden acceder a la variable al mismo tiempo (tipo dinámico).Nonatomic es un hilo inseguro,pero es rápido.</target>
        </trans-unit>
        <trans-unit id="3bbe9a95845165551fded485e043fff87beb015a" translate="yes" xml:space="preserve">
          <source>Not as fast as &lt;code&gt;nonatomic&lt;/code&gt; because &lt;code&gt;nonatomic&lt;/code&gt; doesn't require any watchdog work on that from runtime .</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No es tan r&amp;aacute;pido como no &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nonatomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; porque &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nonatomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no requiere ning&amp;uacute;n trabajo de vigilancia en el tiempo de ejecuci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b35330b19eb26e776ba809c005b85869c82196c" translate="yes" xml:space="preserve">
          <source>Now, the atomic variant is a bit more complicated:</source>
          <target state="translated">Ahora,la variante atómica es un poco más complicada:</target>
        </trans-unit>
        <trans-unit id="476e89eb6fdf9059091b1eff94b8ef25b54472b1" translate="yes" xml:space="preserve">
          <source>Objects in contested cases can also exceed 50 times.</source>
          <target state="translated">Los objetos en los casos impugnados también pueden exceder de 50 veces.</target>
        </trans-unit>
        <trans-unit id="2b4b3304ba3417b0a99cb67827234158af1d91b0" translate="yes" xml:space="preserve">
          <source>Ok. The first thing I would like to clear up is that the locking implementation is implementation-defined and abstracted. Louis uses &lt;code&gt;@synchronized(self)&lt;/code&gt; in his example -- I have seen this as a common source of confusion. The implementation does not &lt;em&gt;actually&lt;/em&gt; use &lt;code&gt;@synchronized(self)&lt;/code&gt;; it uses object level &lt;em&gt;spin locks&lt;/em&gt;. Louis's illustration is good for a high-level illustration using constructs we are all familiar with, but it's important to know it does not use &lt;code&gt;@synchronized(self)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Okay. Lo primero que me gustar&amp;iacute;a aclarar es que la implementaci&amp;oacute;n de bloqueo est&amp;aacute; definida y resumida en la implementaci&amp;oacute;n. Louis usa &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@synchronized(self)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en su ejemplo. He visto esto como una fuente com&amp;uacute;n de confusi&amp;oacute;n. La implementaci&amp;oacute;n en &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;realidad&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;usa &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@synchronized(self)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ; utiliza &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;bloqueos de giro a&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; nivel de objeto &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. La ilustraci&amp;oacute;n de Louis es buena para una ilustraci&amp;oacute;n de alto nivel usando construcciones con las que todos estamos familiarizados, pero es importante saber que no usa &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@synchronized(self)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8eda76917b36b5a0223c73aefb7f0094260633e0" translate="yes" xml:space="preserve">
          <source>On the flip side, non-atomic, as you can probably guess, just means,
  &amp;ldquo;don&amp;rsquo;t do that atomic stuff.&amp;rdquo; What you lose is that guarantee that you
  always get back something. If you try to read in the middle of a
  write, you could get back garbage data. But, on the other hand, you go
  a little bit faster. Because atomic properties have to do some magic
  to guarantee that you will get back a value, they are a bit slower. If
  it is a property that you are accessing a lot, you may want to drop
  down to nonatomic to make sure that you are not incurring that speed
  penalty.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por otro lado, no at&amp;oacute;mico, como probablemente puedas adivinar, solo significa &quot;no hagas esas cosas at&amp;oacute;micas&quot;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo que pierde es esa garant&amp;iacute;a de que siempre recuperar&amp;aacute; algo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si intenta leer en medio de una escritura, podr&amp;iacute;a recuperar datos basura. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero, por otro lado, vas un poco m&amp;aacute;s r&amp;aacute;pido. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Debido a que las propiedades at&amp;oacute;micas tienen que hacer algo de magia para garantizar que obtendr&amp;aacute; un valor, son un poco m&amp;aacute;s lentas. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si es una propiedad a la que est&amp;aacute; accediendo mucho, es posible que desee desplegar a no at&amp;oacute;mico para asegurarse de no incurrir en esa penalizaci&amp;oacute;n de velocidad.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9c81a07baf1e0c099e90ee1555e3bf169d497d6a" translate="yes" xml:space="preserve">
          <source>On the flip side, non-atomic, as you can probably guess, just means,
  &amp;ldquo;don&amp;rsquo;t do that atomic stuff.&amp;rdquo; What you lose is that guarantee that you
  always get back something. If you try to read in the middle of a
  write, you could get back garbage data. But, on the other hand, you go
  a little bit faster. Because atomic properties have to do some magic
  to guarantee that you will get back a value, they are a bit slower. If
  it is a property that you are accessing a lot, you may want to drop
  down to nonatomic to make sure that you are not incurring that speed
  penalty. Access</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por otro lado, no at&amp;oacute;mico, como probablemente puedas adivinar, solo significa &quot;no hagas esas cosas at&amp;oacute;micas&quot;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo que pierde es esa garant&amp;iacute;a de que siempre recuperar&amp;aacute; algo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si intenta leer en medio de una escritura, podr&amp;iacute;a recuperar datos basura. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero, por otro lado, vas un poco m&amp;aacute;s r&amp;aacute;pido. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Debido a que las propiedades at&amp;oacute;micas tienen que hacer algo de magia para garantizar que obtendr&amp;aacute; un valor, son un poco m&amp;aacute;s lentas. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si es una propiedad a la que est&amp;aacute; accediendo mucho, es posible que desee desplegar a no at&amp;oacute;mico para asegurarse de no incurrir en esa penalizaci&amp;oacute;n de velocidad. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Acceso&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ede7fdf8394bacfee2c5d9d6c6715fcc80fd5ca2" translate="yes" xml:space="preserve">
          <source>On the other hand does &lt;code&gt;nonatomic&lt;/code&gt; add nothing to your code. So it is only thread safe if you code security mechanism yourself.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por otro lado, no &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nonatomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;agrega nada a su c&amp;oacute;digo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, solo es seguro para subprocesos si codifica el mecanismo de seguridad usted mismo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6f9e4693c5de190a913db87e5fffad315df67cf0" translate="yes" xml:space="preserve">
          <source>Overall they are different in 2 aspects:</source>
          <target state="translated">En general son diferentes en 2 aspectos:</target>
        </trans-unit>
        <trans-unit id="a8d21ad08d8d73e7da30d9ddc531902648d50e29" translate="yes" xml:space="preserve">
          <source>Reference: &lt;a href=&quot;https://forums.developer.apple.com/thread/25642&quot;&gt;https://forums.developer.apple.com/thread/25642&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Referencia: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://forums.developer.apple.com/thread/25642&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://forums.developer.apple.com/thread/25642&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8fecd72ac5703d1f089cc77fd529233801bb3a26" translate="yes" xml:space="preserve">
          <source>Retain counts are the way in which memory is managed in Objective-C.
  When you create an object, it has a retain count of 1. When you send
  an object a retain message, its retain count is incremented by 1. When
  you send an object a release message, its retain count is decremented
  by 1. When you send an object an &lt;strong&gt;autorelease message&lt;/strong&gt;, its retain count
  is decremented by 1 at some stage in the future. If an objectʼs retain
  count is reduced to 0, it is deallocated.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Retener recuentos es la forma en que se gestiona la memoria en Objective-C. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando crea un objeto, tiene una cuenta de retenci&amp;oacute;n de 1. Cuando env&amp;iacute;a un mensaje de retenci&amp;oacute;n a un objeto, su cuenta de retenci&amp;oacute;n se incrementa en 1. Cuando env&amp;iacute;a un mensaje de liberaci&amp;oacute;n a un objeto, su cuenta de retenci&amp;oacute;n se reduce en 1. Cuando env&amp;iacute;a un objeto a un &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;mensaje de liberaci&amp;oacute;n autom&amp;aacute;tica&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , su recuento de retenci&amp;oacute;n se reduce en 1 en alg&amp;uacute;n momento en el futuro. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si el recuento de retenci&amp;oacute;n de un objeto se reduce a 0, se desasigna.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ebe6555b66f03eb95c37f29257ced7d32e7dc117" translate="yes" xml:space="preserve">
          <source>See Stack Overflow question &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/8036604&quot;&gt;I am getting issues if I use @property(atomic,retain)NSString *myString&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Consulte la pregunta sobre desbordamiento de pila. &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/8036604&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tengo problemas si uso @property (atomic, retener) NSString * myString&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9da147f788793e65a0755d642c4bb0e545a250a7" translate="yes" xml:space="preserve">
          <source>See more here: &lt;a href=&quot;https://realm.io/news/tmi-objective-c-property-attributes/&quot;&gt;https://realm.io/news/tmi-objective-c-property-attributes/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ver m&amp;aacute;s aqu&amp;iacute;: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://realm.io/news/tmi-objective-c-property-attributes/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://realm.io/news/tmi-objective-c-property-attributes/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d7f269e276c1c10bb04cd4f5d00a647d81224fcd" translate="yes" xml:space="preserve">
          <source>See the &quot;&lt;a href=&quot;http://www.scribd.com/doc/121014348/89/Performance-and-Threading&quot;&gt;Performance and Threading&lt;/a&gt;&quot; section of Apple's Objective-C 2.0 documentation for some more information and for other considerations when creating multi-threaded apps.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Consulte la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;secci&amp;oacute;n &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.scribd.com/doc/121014348/89/Performance-and-Threading&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Rendimiento y subprocesos&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot; de la documentaci&amp;oacute;n de Objective-C 2.0 de Apple para obtener m&amp;aacute;s informaci&amp;oacute;n y otras consideraciones al crear aplicaciones de subprocesos m&amp;uacute;ltiples.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="48821aa7a0680f5b53cb1a6360cb3b3f30d0e1f3" translate="yes" xml:space="preserve">
          <source>Since there is no such thing like Mac OS Trash Bin, then nobody cares whether or not you always get a value (&amp;lt;-- This could potentially lead to a crash), nor anybody cares if someone tries to read halfway through your writing (although halfway writing in memory is very different from halfway writing on paper, on memory it could give you a crazy stupid value from before, while on paper you only see half of what's been written) --&amp;gt; Doesn't guarantee to not crash, because it doesn't use autorelease mechanism.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dado que no existe una Papelera para Mac OS, a nadie le importa si siempre obtienes un valor (&amp;lt;- Esto podr&amp;iacute;a provocar un bloqueo), y a nadie le importa si alguien intenta leer la mitad de tu escritura (aunque escribir a mitad de camino en la memoria es muy diferente de escribir a mitad de camino en papel, en la memoria podr&amp;iacute;a darte un valor est&amp;uacute;pido loco de antes, mientras que en papel solo ves la mitad de lo que se ha escrito) -&amp;gt; No garantiza que no se bloquee, porque No utiliza el mecanismo de liberaci&amp;oacute;n autom&amp;aacute;tica.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="113d393b69e044789d1b6366771234113f38b14f" translate="yes" xml:space="preserve">
          <source>So I'd be guessing that atomic in this case means the attribute reader methods cannot be interrupted - in effect meaning that the variable(s) being read by the method cannot change their value half way through because some other thread/call/function gets swapped onto the CPU.</source>
          <target state="translated">Así que supongo que atómico en este caso significa que los métodos de lectura de atributos no pueden ser interrumpidos-en efecto,lo que significa que la(s)variable(s)que está(n)siendo leída(s)por el método no puede(n)cambiar su valor a mitad de camino porque alguna otra threadcallfunction se intercambia en la CPU.</target>
        </trans-unit>
        <trans-unit id="69377ccc9052efea495fe71ce1907c01a47348e0" translate="yes" xml:space="preserve">
          <source>So let's step back, &lt;em&gt;not&lt;/em&gt; focussing on the implementation of property accesses, we'll include the usual suspects like &lt;code&gt;objc_msgSend&lt;/code&gt;, and examine some real-world high-level results for many calls to a &lt;code&gt;NSString&lt;/code&gt; getter in &lt;em&gt;uncontested&lt;/em&gt; cases (values in seconds):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, retrocedamos, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sin&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; centrarnos en la implementaci&amp;oacute;n de accesos de propiedad, incluiremos a los sospechosos habituales como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;objc_msgSend&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y examinaremos algunos resultados de alto nivel del mundo real para muchas llamadas a un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;getter &lt;/font&gt;&lt;/font&gt; &lt;code&gt;NSString&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;casos &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no &lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;controvertidos&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (valores en segundos):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4e73cec755e1a5861f24f2339a99f042aded44c4" translate="yes" xml:space="preserve">
          <source>So these last two are the same:</source>
          <target state="translated">Así que estos dos últimos son los mismos:</target>
        </trans-unit>
        <trans-unit id="0fa399823cc9a3b9c6fc88614e72860a2970f673" translate="yes" xml:space="preserve">
          <source>Such situation operation will perform serially.
 &lt;strong&gt;And Slow in performance&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tal operaci&amp;oacute;n de situaci&amp;oacute;n se realizar&amp;aacute; en serie. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y lento en el rendimiento&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aef6c1df292141223c4225f95d65f2f8dd8d1cd6" translate="yes" xml:space="preserve">
          <source>Suppose a task related to three properties are</source>
          <target state="translated">Supongamos que una tarea relacionada con tres propiedades son</target>
        </trans-unit>
        <trans-unit id="7fc22c24b2c8b9f7f69f63e17474f6fc605495d1" translate="yes" xml:space="preserve">
          <source>Suppose there is an atomic string property called &quot;name&quot;, and if you call &lt;code&gt;[self setName:@&quot;A&quot;]&lt;/code&gt; from thread A, call &lt;code&gt;[self setName:@&quot;B&quot;]&lt;/code&gt; from thread B, and call &lt;code&gt;[self name]&lt;/code&gt; from thread C, then all operations on different threads will be performed serially which means if one thread is executing a setter or getter, then other threads will wait.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Suponga que hay una propiedad de cadena at&amp;oacute;mica llamada &quot;nombre&quot;, y si llama a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;[self setName:@&quot;A&quot;]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; desde el hilo A, llame a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;[self setName:@&quot;B&quot;]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; desde el hilo B y llame a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;[self name]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; desde subproceso C, entonces todas las operaciones en diferentes subprocesos se realizar&amp;aacute;n en serie, lo que significa que si un subproceso est&amp;aacute; ejecutando un setter o getter, otros subprocesos esperar&amp;aacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="64bbc7da00d041882553632c9d6151a6047024d2" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;default&lt;/strong&gt; is &lt;code&gt;atomic&lt;/code&gt;, this means it does cost you performance whenever you use the property, but it is thread safe. What Objective-C does, is set a lock, so only the actual thread may access the variable, as long as the setter/getter is executed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valor predeterminado&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es &lt;/font&gt;&lt;/font&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , esto significa que le cuesta rendimiento cada vez que usa la propiedad, pero es seguro para subprocesos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo que hace Objective-C es establecer un bloqueo, por lo que solo el subproceso real puede acceder a la variable, siempre que se ejecute el setter / getter.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9d29141c6d63a5b7ea6a09f9b7af2c90594dc0ae" translate="yes" xml:space="preserve">
          <source>The atomic property ensures to retain a fully initialised value irrespective of how many threads are doing getter &amp;amp; setter on it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La propiedad at&amp;oacute;mica asegura retener un valor completamente inicializado independientemente de cu&amp;aacute;ntos hilos est&amp;eacute;n haciendo getter &amp;amp; setter en &amp;eacute;l.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6640dea145fe359abf70ed10c4ea9eb6bb728dda" translate="yes" xml:space="preserve">
          <source>The best way to understand the difference is using the following example.</source>
          <target state="translated">La mejor manera de entender la diferencia es usando el siguiente ejemplo.</target>
        </trans-unit>
        <trans-unit id="3134cf91b76122f389197dac0a38627d8e34e79b" translate="yes" xml:space="preserve">
          <source>The last two are identical; &quot;atomic&quot; is the default behavior (&lt;strike&gt;note that it is not actually a keyword; it is specified only by the absence of &lt;code&gt;nonatomic&lt;/code&gt;&lt;/strike&gt; -- &lt;code&gt;atomic&lt;/code&gt; was added as a keyword in recent versions of llvm/clang).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los dos &amp;uacute;ltimos son id&amp;eacute;nticos; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot;at&amp;oacute;mica&quot; es el comportamiento por defecto ( &lt;/font&gt;&lt;/font&gt;&lt;strike&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;nota que no es en realidad una palabra clave, sino que s&amp;oacute;lo se especifica por la ausencia de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nonatomic&lt;/code&gt; &lt;/strike&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - &lt;/font&gt;&lt;/font&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se a&amp;ntilde;adi&amp;oacute; como palabra clave en las versiones recientes de llvm / ruido met&amp;aacute;lico).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="54da41fe44eb73968148a077b290f8b60c74912e" translate="yes" xml:space="preserve">
          <source>The nonatomic property specifies that synthesized accessors simply set or return a value directly, with no guarantees about what happens if that same value is accessed simultaneously from different threads.</source>
          <target state="translated">La propiedad no atómica especifica que los accesorios sintetizados simplemente establecen o devuelven un valor directamente,sin garantías sobre lo que sucede si se accede a ese mismo valor simultáneamente desde diferentes hilos.</target>
        </trans-unit>
        <trans-unit id="96d01ce85b72880373e3c0dcd3f3bc35a68d5182" translate="yes" xml:space="preserve">
          <source>The syntax and semantics are already well-defined by other excellent answers to this question. Because &lt;em&gt;execution&lt;/em&gt; and &lt;em&gt;performance&lt;/em&gt; are not detailed well, I will add my answer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La sintaxis y la sem&amp;aacute;ntica ya est&amp;aacute;n bien definidas por otras excelentes respuestas a esta pregunta. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como la &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ejecuci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y el &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;rendimiento&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no est&amp;aacute;n bien detallados, agregar&amp;eacute; mi respuesta.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9dd04fd3b87b8e6634cb35ae09b1210f69bb26fd" translate="yes" xml:space="preserve">
          <source>The truth is that they use spin lock to implement atomic property. The code as below:</source>
          <target state="translated">La verdad es que utilizan el Spin Lock para implementar la propiedad atómica.El código es el siguiente:</target>
        </trans-unit>
        <trans-unit id="90d87c12b9e2bb4e32e509af94e1f228c0cf3ed3" translate="yes" xml:space="preserve">
          <source>Then It will return value &quot;Datta&quot; for B</source>
          <target state="translated">Entonces devolverá el valor &quot;Datta&quot; para B</target>
        </trans-unit>
        <trans-unit id="12a3f33c0a6d700d8d23d40a430ab7d0d07c038c" translate="yes" xml:space="preserve">
          <source>There are actually a large number of different variants of how these things work depending on whether the properties are scalar values or objects, and how retain, copy, readonly, nonatomic, etc interact. In general the property synthesizers just know how to do the &quot;right thing&quot; for all combinations.</source>
          <target state="translated">En realidad hay un gran número de variantes diferentes de cómo funcionan estas cosas dependiendo de si las propiedades son valores escalares u objetos,y de cómo interactúan la retención,la copia,la lectura,la no atómica,etc.En general,los sintetizadores de propiedades sólo saben hacer lo &quot;correcto&quot; para todas las combinaciones.</target>
        </trans-unit>
        <trans-unit id="1ca1757c9d44592c31915b42da6f23bdd121ea3e" translate="yes" xml:space="preserve">
          <source>This is explained in Apple's &lt;a href=&quot;http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjectiveC/Chapters/ocProperties.html&quot;&gt;documentation&lt;/a&gt;, but below are some examples of what is actually happening.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto se explica en la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjectiveC/Chapters/ocProperties.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;documentaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de Apple &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, pero a continuaci&amp;oacute;n se presentan algunos ejemplos de lo que realmente est&amp;aacute; sucediendo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="066c6b0a7801dd6a2523303a92225758599fcded" translate="yes" xml:space="preserve">
          <source>This makes property &quot;name&quot; read/write safe, but if another thread, D, calls &lt;code&gt;[name release]&lt;/code&gt; simultaneously then this operation might produce a crash because there is no setter/getter call involved here. Which means an object is read/write safe (ATOMIC), but not thread-safe as another threads can simultaneously send any type of messages to the object. The developer should ensure thread-safety for such objects.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto hace que la propiedad &quot;nombre&quot; de lectura / escritura sea segura, pero si otro hilo, D, llama &lt;/font&gt;&lt;/font&gt; &lt;code&gt;[name release]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; simult&amp;aacute;neamente, esta operaci&amp;oacute;n podr&amp;iacute;a producir un bloqueo porque no hay una llamada de establecimiento / obtenci&amp;oacute;n involucrada aqu&amp;iacute;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo que significa que un objeto es seguro para lectura / escritura (ATOMIC), pero no para subprocesos, ya que otros subprocesos pueden enviar simult&amp;aacute;neamente cualquier tipo de mensajes al objeto. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El desarrollador debe garantizar la seguridad del hilo para tales objetos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e11028386ce8d3ec51e22188331a6eee4d25d4eb" translate="yes" xml:space="preserve">
          <source>Thread safety:</source>
          <target state="translated">Seguridad de los hilos:</target>
        </trans-unit>
        <trans-unit id="e0add02488dd9fb38cb10fde62581151af49ced0" translate="yes" xml:space="preserve">
          <source>To address this, you need a &lt;em&gt;transactional model&lt;/em&gt;.   I.e. some other kind of synchronization and/or exclusion that allows one to exclude access to &lt;code&gt;fullName&lt;/code&gt; while the dependent properties are being updated.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para abordar esto, necesita un &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;modelo transaccional&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es decir, alg&amp;uacute;n otro tipo de sincronizaci&amp;oacute;n y / o exclusi&amp;oacute;n que permita excluir el acceso a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;fullName&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; mientras se actualizan las propiedades dependientes.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5110af47a6444933e62ac77d9ec23d8337442dd9" translate="yes" xml:space="preserve">
          <source>To simplify the entire confusion, let us understand mutex lock.</source>
          <target state="translated">Para simplificar toda la confusión,entendamos la cerradura mutex.</target>
        </trans-unit>
        <trans-unit id="bc1c0153c9c58e2e9e7658c0005457d1997dea11" translate="yes" xml:space="preserve">
          <source>Unlike Atomic, it doesn't ensure fully initialised object return each time.</source>
          <target state="translated">A diferencia de la Atómica,no asegura el retorno del objeto totalmente inicializado cada vez.</target>
        </trans-unit>
        <trans-unit id="b24c7b3b63fa45274145ca8bf271886c92e41e64" translate="yes" xml:space="preserve">
          <source>Vijayendra Tripathi has already given an example for a multi-threaded environment.</source>
          <target state="translated">Vijayendra Tripathi ya ha dado un ejemplo de un entorno multi-hilo.</target>
        </trans-unit>
        <trans-unit id="282a30d041d8affe9efa43d4e1dc9b43e44779fb" translate="yes" xml:space="preserve">
          <source>We can use the above like</source>
          <target state="translated">Podemos usar lo anterior como</target>
        </trans-unit>
        <trans-unit id="e3ba9e816602170c61a435a2bd6558fcc1491c60" translate="yes" xml:space="preserve">
          <source>What &quot;atomic&quot; does &lt;strong&gt;not&lt;/strong&gt; do is make any guarantees about thread safety.  If thread A is calling the getter simultaneously with thread B and C calling the setter with different values, thread A may get any one of the three values returned -- the one prior to any setters being called or either of the values passed into the setters in B and C.  Likewise, the object may end up with the value from B or C, no way to tell.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo que &quot;atomic&quot; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; hace es garantizar la seguridad del hilo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si el subproceso A est&amp;aacute; llamando al captador simult&amp;aacute;neamente con el subproceso B y C llamando al establecedor con valores diferentes, el subproceso A puede obtener cualquiera de los tres valores devueltos, el anterior a cualquier llamada establecida o cualquiera de los valores pasados ​​a los establecedores en B y C. Del mismo modo, el objeto puede terminar con el valor de B o C, no hay forma de saberlo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="75b417c352b35dcb29960132183fac99bea8692c" translate="yes" xml:space="preserve">
          <source>What do &lt;code&gt;atomic&lt;/code&gt; and &lt;code&gt;nonatomic&lt;/code&gt; mean in property declarations?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Qu&amp;eacute; hacer &lt;/font&gt;&lt;/font&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nonatomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; media de declaraciones de bienes?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f88aa3645b681f6cb9c6ef6394fafdf9591974e9" translate="yes" xml:space="preserve">
          <source>What is the functional difference between these 3?</source>
          <target state="translated">¿Cuál es la diferencia funcional entre estos tres?</target>
        </trans-unit>
        <trans-unit id="b724b678520bf6613baa4fd73257c08dd17931cd" translate="yes" xml:space="preserve">
          <source>What is the operational difference between these three?</source>
          <target state="translated">¿Cuál es la diferencia operativa entre estos tres?</target>
        </trans-unit>
        <trans-unit id="f756614cb11bcdd5b59e27f02d997161f296ea51" translate="yes" xml:space="preserve">
          <source>What's the difference between the atomic and nonatomic attributes</source>
          <target state="translated">¿Cuál es la diferencia entre los atributos atómicos y no atómicos</target>
        </trans-unit>
        <trans-unit id="c64b1d527fee8009f5adc6a83e6a239d59e0ea51" translate="yes" xml:space="preserve">
          <source>Where to use &lt;code&gt;atomic&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;D&amp;oacute;nde usar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7e7bc1f7a764eaa33b78b0b105cc9acc35d0b510" translate="yes" xml:space="preserve">
          <source>Where to use &lt;code&gt;nonatomic&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;D&amp;oacute;nde usar no &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nonatomic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="54566271c0cda41c75f32f014925fd367b3560c7" translate="yes" xml:space="preserve">
          <source>With &quot;atomic&quot;, the synthesized setter/getter will ensure that a &lt;em&gt;whole&lt;/em&gt; value is always returned from the getter or set by the setter, regardless of setter activity on any other thread.   That is, if thread A is in the middle of the getter while thread B calls the setter, an actual viable value -- an autoreleased object, most likely -- will be returned to the caller in A.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con &quot;atomic&quot;, el setter / getter sintetizado garantizar&amp;aacute; que &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;el setter siempre devuelva &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valor &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;completo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o que el setter lo devuelva, independientemente de la actividad del setter en cualquier otro hilo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es decir, si el subproceso A est&amp;aacute; en el medio del captador mientras el subproceso B llama al establecedor, un valor viable real, un objeto liberado autom&amp;aacute;ticamente, muy probablemente, se devolver&amp;aacute; al llamante en A.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6c9a3225e3bb61264813e6bc22cf4e00afcb6175" translate="yes" xml:space="preserve">
          <source>Yes. Multithreading means: multiple threads can read a shared piece of data at the same time and we will not crash, yet it doesn't guarantee that you aren't reading from a non-autoreleased value. With thread safety, it's guaranteed that what you read is not auto-released. 
The reason that we don't make everything atomic by default is, that there is a performance cost and for most things don't really need thread safety. A few parts of our code need it and for those few parts, we need to write our code in a thread-safe way using locks, mutex or synchronization.</source>
          <target state="translated">Sí.Multihilo significa:varios hilos pueden leer un dato compartido al mismo tiempo y no nos estrellaremos,pero no garantiza que no esté leyendo de un valor no liberado por un tutor.Con la seguridad de los hilos,está garantizado que lo que lees no se libera automáticamente.La razón por la que no hacemos que todo sea atómico por defecto es que hay un coste de rendimiento y para la mayoría de las cosas no se necesita realmente la seguridad de los hilos.Algunas partes de nuestro código lo necesitan y para esas pocas partes,necesitamos escribir nuestro código de una manera segura usando bloqueos,mutex o sincronización.</target>
        </trans-unit>
        <trans-unit id="4eeca7ec366447fc5ec19a0b9ad7e6b1fe0fb298" translate="yes" xml:space="preserve">
          <source>atomic (default)</source>
          <target state="translated">atómico (por defecto)</target>
        </trans-unit>
        <trans-unit id="4a63e825f62c5da736e35e342ff2c8a54bca26cd" translate="yes" xml:space="preserve">
          <source>courtesy
&lt;a href=&quot;https://medium.com/@YogevSitton/atomic-vs-non-atomic-properties-crash-course-d11c23f4366c&quot;&gt;https://medium.com/@YogevSitton/atomic-vs-non-atomic-properties-crash-course-d11c23f4366c&lt;/a&gt;</source>
          <target state="translated">courtesy
&lt;a href=&quot;https://medium.com/@YogevSitton/atomic-vs-non-atomic-properties-crash-course-d11c23f4366c&quot;&gt;https://medium.com/@YogevSitton/atomic-vs-non-atomic-properties-crash-course-d11c23f4366c&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f124574f61bdf32374632af0108e67664713163a" translate="yes" xml:space="preserve">
          <source>courtesy &lt;a href=&quot;https://academy.realm.io/posts/tmi-objective-c-property-attributes/&quot;&gt;https://academy.realm.io/posts/tmi-objective-c-property-attributes/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cortes&amp;iacute;a &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://academy.realm.io/posts/tmi-objective-c-property-attributes/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://academy.realm.io/posts/tmi-objective-c-property-attributes/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="32e276343305029c03cdcb3816d31d9b48ec3b8a" translate="yes" xml:space="preserve">
          <source>faster (for synthesized code, that is, for variables created using @property and @synthesize)</source>
          <target state="translated">más rápido (para el código sintetizado,es decir,para las variables creadas con @propiedad y @sintetizar)</target>
        </trans-unit>
        <trans-unit id="b87d9f5aa62d639719db3c1cba82e1a8056395ba" translate="yes" xml:space="preserve">
          <source>from thread &lt;strong&gt;B&lt;/strong&gt;,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;del hilo &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;B&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ,&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea03bbce1bf33f2a2f1f731974a10c0b4d23d189" translate="yes" xml:space="preserve">
          <source>if the instance variable is gonna be accessed in a multithreaded environment.</source>
          <target state="translated">si se va a acceder a la variable de instancia en un entorno multihilo.</target>
        </trans-unit>
        <trans-unit id="2a72dfc65f7a451001d4950d531af6251bac7c29" translate="yes" xml:space="preserve">
          <source>is NOT the default behavior</source>
          <target state="translated">NO es el comportamiento por defecto</target>
        </trans-unit>
        <trans-unit id="f84f249f927c1237bd8d3f9d8beee88f0e82e524" translate="yes" xml:space="preserve">
          <source>is NOT thread safe.</source>
          <target state="translated">no es seguro para el hilo.</target>
        </trans-unit>
        <trans-unit id="c3f9636d3c7898c47849a2e162812438d24bdcd9" translate="yes" xml:space="preserve">
          <source>is not fast, as it ensures the process is completed entirely</source>
          <target state="translated">no es rápido,ya que asegura que el proceso se complete por completo</target>
        </trans-unit>
        <trans-unit id="73a390d781fdc2811cea29373d9b4ebafddb1cd6" translate="yes" xml:space="preserve">
          <source>is the default behavior</source>
          <target state="translated">es el comportamiento por defecto</target>
        </trans-unit>
        <trans-unit id="4490b997d646a855de50058e749d8a90da0b8e08" translate="yes" xml:space="preserve">
          <source>is thread safe.</source>
          <target state="translated">es seguro para el hilo.</target>
        </trans-unit>
        <trans-unit id="f05572b4d0844e4f8ee101746d55eb4ac8f137e3" translate="yes" xml:space="preserve">
          <source>may result in unexpected behavior, when two different process access the same variable at the same time</source>
          <target state="translated">puede dar lugar a un comportamiento inesperado,cuando dos procesos diferentes acceden a la misma variable al mismo tiempo</target>
        </trans-unit>
        <trans-unit id="3f5ed1fe4cc1bdb26194014d8b09d207046b8cce" translate="yes" xml:space="preserve">
          <source>nonatomic</source>
          <target state="translated">nonatomic</target>
        </trans-unit>
        <trans-unit id="c749558b48cd7f85853939c44d043c5ce6c52a24" translate="yes" xml:space="preserve">
          <source>not thread-safe</source>
          <target state="translated">no es seguro para el hilo</target>
        </trans-unit>
        <trans-unit id="4983137fc7b12c4757b165db2c0980a574bdd040" translate="yes" xml:space="preserve">
          <source>will ensure the present process is completed by the CPU, before another process accesses the variable</source>
          <target state="translated">asegurará que el proceso actual sea completado por la CPU,antes de que otro proceso acceda a la variable</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
