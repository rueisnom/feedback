<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/7244321">
    <body>
      <group id="7244321">
        <trans-unit id="837239dc1752aa33767206805faadce95726829a" translate="yes" xml:space="preserve">
          <source>(I use Android Studio 3.0 with &quot;Git integration&quot; and &quot;GitHub&quot; plugins.)</source>
          <target state="translated">(私はAndroid Studio 3.0で「Gitインテグレーション」と「GitHub」プラグインを使っています)</target>
        </trans-unit>
        <trans-unit id="f7bddf7f104c215149d89a27e04f9f82c5bdae57" translate="yes" xml:space="preserve">
          <source>, all commits will be made &quot;with&quot; you, the original PRs will link to your PR, and GitHub will display &lt;code&gt;This branch is X commits ahead, Y commits behind &amp;lt;original fork&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">、すべてのコミットは「あなたと共に」行われ、元のPRはあなたのPRにリンクし、GitHubは「 &lt;code&gt;This branch is X commits ahead, Y commits behind &amp;lt;original fork&amp;gt;&lt;/code&gt; ます」と表示します。</target>
        </trans-unit>
        <trans-unit id="fa18006684a6730be7d42134f2ce945e1ca9dfd5" translate="yes" xml:space="preserve">
          <source>, but don't click anything yet.</source>
          <target state="translated">まだ何もクリックしないで</target>
        </trans-unit>
        <trans-unit id="aed7f30b6eec6bdad869eaf0cc6d252d35ce10dd" translate="yes" xml:space="preserve">
          <source>. By default, GitHub will compare the original with your fork, and there shouldn't be anything to compare if you didn't make any changes.</source>
          <target state="translated">.デフォルトでは、GitHub はオリジナルとあなたのフォークを比較します。</target>
        </trans-unit>
        <trans-unit id="9e288959c997c74dcab4f214316ce37256bb0e82" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Create Pull Request&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;プルリクエストを作成&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1dec1ee12cc0ee47690f681d5af701402e2a059e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Rebase my GitHub fork&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;GitHubフォークをリベース&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c23532b197c28f5e2c167d5de1d1410ac36f24a8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Tip: If you want to update your repository on GitHub, follow the instructions &lt;a href=&quot;https://help.github.com/articles/pushing-to-a-remote#pushing-a-branch&quot;&gt;here&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ヒント：GitHubのリポジトリを更新する場合は、 &lt;a href=&quot;https://help.github.com/articles/pushing-to-a-remote#pushing-a-branch&quot;&gt;こちら&lt;/a&gt;の手順に従ってください&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9ef67562961602cb5e06540f46c6ad69d781b01e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Tip: Syncing your fork only updates your local copy of the repository; it does not update your repository on GitHub.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ヒント：フォークを同期しても、リポジトリのローカルコピーのみが更新されます。&lt;/em&gt; &lt;em&gt;GitHub上のリポジトリは更新されません。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="091a67df8cb7e3a2e39438a2304cecc9cfcd7fa7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1. Create the branches&lt;/strong&gt; from the fork master and &lt;strong&gt;do changes there&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;1.&lt;/strong&gt;フォークマスターから&lt;strong&gt;ブランチ&lt;/strong&gt;を&lt;strong&gt;作成し、&lt;/strong&gt; &lt;strong&gt;そこで変更&lt;/strong&gt;を&lt;strong&gt;行います&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="ace59f481ab2e485809074bf3421337f65d1e484" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2. Create a scheduled job&lt;/strong&gt; for the fork master to &lt;strong&gt;do update automatically&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;2.&lt;/strong&gt;フォークマスターが&lt;strong&gt;自動的に更新&lt;/strong&gt;する&lt;strong&gt;ように&lt;/strong&gt; &lt;strong&gt;スケジュールされたジョブ&lt;/strong&gt;を&lt;strong&gt;作成し&lt;/strong&gt; &lt;strong&gt;ます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="8c6ef361872ea9dca75b25f08ab190d9ab77471d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Checkout to your branch&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ブランチにチェックアウト&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7cba2c022702bc7188073aa3405c4473f2a91a47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; git checkout master</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt; git checkout master</target>
        </trans-unit>
        <trans-unit id="d2f1180576dd05c72a3829a89721f20a338e1252" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; git pull &lt;a href=&quot;https://github.com/ORIGINAL_OWNER/ORIGINAL_REPO.git&quot;&gt;https://github.com/ORIGINAL_OWNER/ORIGINAL_REPO.git&lt;/a&gt; BRANCH_NAME</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt; git pull &lt;a href=&quot;https://github.com/ORIGINAL_OWNER/ORIGINAL_REPO.git&quot;&gt;https://github.com/ORIGINAL_OWNER/ORIGINAL_REPO.git&lt;/a&gt; BRANCH_NAME</target>
        </trans-unit>
        <trans-unit id="038223c0b4eee8eb40e89e3334da6a52eeaaf53d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Foreword:&lt;/strong&gt; Your fork is the &quot;origin&quot; and the repository you forked from is the &quot;upstream&quot;.</source>
          <target state="translated">&lt;strong&gt;序：&lt;/strong&gt;フォークは「元」であり、フォークしたリポジトリは「上流」です。</target>
        </trans-unit>
        <trans-unit id="83675adcd63528ba85b7735bf175b9ad961c21e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If that is given then you need to continue in this order:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;それが指定されている場合は、この順序で続行する必要があります。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d7bc8b4919bc01d463826deb19d44e1b4e26951" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In the meantime, GitHub user bardiharborow has created a tool to do just this:&lt;/strong&gt;&lt;a href=&quot;https://upriver.github.io/&quot;&gt;https://upriver.github.io/&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;それまでの間、GitHubユーザーbardiharborowがこれを行うためのツールを作成しました：&lt;/strong&gt; &lt;a href=&quot;https://upriver.github.io/&quot;&gt;https&lt;/a&gt; &lt;strong&gt;://upriver.github.io/&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c53483308246ab7077bf1fbd5790e40c6ffb4674" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pull source repository branch for getting the latest code&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;最新のコードを取得するためにソースリポジトリブランチをプルする&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="39f7deb9c8e2585fec4fb5fb5b57b3fefb8ec63d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Syntax:&lt;/strong&gt; git branch yourDevelopmentBranch</source>
          <target state="translated">&lt;strong&gt;構文：&lt;/strong&gt; git branch yourDevelopmentBranch</target>
        </trans-unit>
        <trans-unit id="30519498f0f744e1c306f5deb9b11dd9dc3422bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Syntax:&lt;/strong&gt; git pull &lt;a href=&quot;https://github.com/tastejs/awesome-app-ideas&quot;&gt;https://github.com/tastejs/awesome-app-ideas&lt;/a&gt; master</source>
          <target state="translated">&lt;strong&gt;構文：&lt;/strong&gt; git pull &lt;a href=&quot;https://github.com/tastejs/awesome-app-ideas&quot;&gt;https://github.com/tastejs/awesome-app-ideas&lt;/a&gt; master</target>
        </trans-unit>
        <trans-unit id="c22468d3a019b313d1bce8c15882b7e2dc72ab9b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This branch is even with &lt;code&gt;&amp;lt;upstream&amp;gt;&lt;/code&gt;:master&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;このブランチは、 &lt;code&gt;&amp;lt;upstream&amp;gt;&lt;/code&gt; ：masterでもあり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="836dd07f6d51bd7c72878311bf22a4ef9c537100" translate="yes" xml:space="preserve">
          <source>A few days later another change was made by another contributor. So my fork doesn't contain that change.</source>
          <target state="translated">数日後、別の投稿者によって別の変更が行われました。そのため、私のフォークにはその変更は含まれていません。</target>
        </trans-unit>
        <trans-unit id="d111dda0df7611e4a760ea8349943d255c38c603" translate="yes" xml:space="preserve">
          <source>A lot of answers end up moving your fork &lt;strong&gt;one commit ahead&lt;/strong&gt; of the parent repository. This answer summarizes the steps found &lt;a href=&quot;http://2buntu.com/articles/1459/keeping-your-forked-repo-synced-with-the-upstream-source/&quot;&gt;here&lt;/a&gt; which will &lt;strong&gt;move your fork to the same commit as the parent&lt;/strong&gt;.</source>
          <target state="translated">多くの答えは、最終的に親リポジトリ&lt;strong&gt;より&lt;/strong&gt;も&lt;strong&gt;1コミット先&lt;/strong&gt;にフォークを移動する&lt;strong&gt;こと&lt;/strong&gt;になります。 この回答は、 &lt;strong&gt;フォークを親と同じコミットに移動する、&lt;/strong&gt; &lt;a href=&quot;http://2buntu.com/articles/1459/keeping-your-forked-repo-synced-with-the-upstream-source/&quot;&gt;ここに&lt;/a&gt;ある手順を要約しています。</target>
        </trans-unit>
        <trans-unit id="a571dcfb301530d4534f671f455e5eca37543f4b" translate="yes" xml:space="preserve">
          <source>Actually, it is possible to create a branch in your fork from any commit of the upstream in the browser:</source>
          <target state="translated">実際には、ブラウザ上で上流の任意のコミットからフォークにブランチを作成することが可能です。</target>
        </trans-unit>
        <trans-unit id="5f88b6685a748abb35be251ed6735d785185f6ea" translate="yes" xml:space="preserve">
          <source>Add the &quot;upstream&quot; to your cloned repository (&quot;origin&quot;):</source>
          <target state="translated">クローン化したリポジトリ(「オリジン」)に「アップストリーム」を追加します。</target>
        </trans-unit>
        <trans-unit id="5a08ed9da2ad311b22c813f50ad5770b2a215a0a" translate="yes" xml:space="preserve">
          <source>Add the parent as a remote repository, &lt;code&gt;git remote add upstream &amp;lt;repo-location&amp;gt;&lt;/code&gt;</source>
          <target state="translated">親をリモートリポジトリとして追加します &lt;code&gt;git remote add upstream &amp;lt;repo-location&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a67e617a769c44bdd8f8d877909cfd92bf6f9b61" translate="yes" xml:space="preserve">
          <source>And pay attention to the two last popup menu items:</source>
          <target state="translated">そして、最後の2つのポップアップメニュー項目に注目してください。</target>
        </trans-unit>
        <trans-unit id="77b29e62e23f78b86305bbbc7a82f5e4ee0b7dd6" translate="yes" xml:space="preserve">
          <source>And there you are good to go. All updated changes in the main repository will be pushed into your fork repository.</source>
          <target state="translated">これで完了です。メインリポジトリで更新された変更はすべてあなたのフォークリポジトリにプッシュされます。</target>
        </trans-unit>
        <trans-unit id="735bbd6e19a781c73f9b39e632cb76b45edb8e9a" translate="yes" xml:space="preserve">
          <source>Android Studio now has learned to work with GitHub fork repositories (you don't even have to add &quot;upstream&quot; remote repository by console command).</source>
          <target state="translated">Android Studioでは、GitHubのフォークリポジトリとの連携を学習できるようになりました(コンソールコマンドでリモートリポジトリの「上流」を追加する必要もありません)。</target>
        </trans-unit>
        <trans-unit id="b862909c99578f4b84baffee2fcba870c7bb3d2b" translate="yes" xml:space="preserve">
          <source>Any of these branch sync commands may fail for one of two reasons: either the &lt;em&gt;upstream&lt;/em&gt; branch have been rewritten, or you have pushed commits on that branch to your fork. In the first case where you haven't committed anything to the branch on your fork it is safe to push forcefully (Add the &lt;strong&gt;-f&lt;/strong&gt; switch; i.e. &lt;code&gt;git push -f&lt;/code&gt; in the command above). In the other case this is normal as your fork branch have diverged and you can't expect the sync command to work until your commits have been merged back into &lt;em&gt;upstream&lt;/em&gt;.</source>
          <target state="translated">これらのブランチ同期コマンドは、次の2つの理由のいずれかで失敗する可能性があります。 &lt;em&gt;上流の&lt;/em&gt;ブランチが書き直されたか、そのブランチのコミットをフォークにプッシュしたかのいずれかです。 フォークのブランチに何もコミットしていない最初のケースでは、強制的にプッシュしても安全です（ &lt;strong&gt;-f&lt;/strong&gt;スイッチを追加します。つまり、上記のコマンドで &lt;code&gt;git push -f&lt;/code&gt; ）。 他のケースでは、これは正常です。フォークブランチが分岐し、コミットが&lt;em&gt;アップストリームに&lt;/em&gt;マージされるまで、syncコマンドが機能することは期待できません。</target>
        </trans-unit>
        <trans-unit id="2bc1aaa72c608f4cf6f7c42e3a16c71cd5f587a7" translate="yes" xml:space="preserve">
          <source>As a complement to this answer, I was looking for a way to update all remote branches of my cloned repo (&lt;em&gt;origin&lt;/em&gt;) from &lt;em&gt;upstream&lt;/em&gt; branches in one go. This is how I did it.</source>
          <target state="translated">この答えを補完するものとして、私はクローンされたリポジトリのすべてのリモートブランチ（ &lt;em&gt;origin&lt;/em&gt; ）を&lt;em&gt;上流の&lt;/em&gt;ブランチから一度に更新する方法を探していました。 これは私がやった方法です。</target>
        </trans-unit>
        <trans-unit id="a9b4790fc412d85990b1d6a052f870d7a70a17fe" translate="yes" xml:space="preserve">
          <source>As of the date of this answer, GitHub has not (&lt;a href=&quot;https://github.com/blog/266-fast-forward-your-fork&quot;&gt;or shall I say no longer?&lt;/a&gt;) this feature in the web interface. You can, however, ask &lt;code&gt;support@github.com&lt;/code&gt; to add your vote for that.</source>
          <target state="translated">この回答の日付の時点で、GitHubはWebインターフェースにこの機能を備えていません（ &lt;a href=&quot;https://github.com/blog/266-fast-forward-your-fork&quot;&gt;または、もう言う必要はありませんか？&lt;/a&gt; ）。 ただし、 &lt;code&gt;support@github.com&lt;/code&gt; にそのための投票を追加するよう依頼できます。</target>
        </trans-unit>
        <trans-unit id="1adc04b7dba016a901bd1df1b78a3ab6cd41900e" translate="yes" xml:space="preserve">
          <source>Assuming you never committed anything on master yourself you should be done already. Now you can push your local master to your origin remote GitHub fork. You could also rebase your development branch on your now up-to-date local master.</source>
          <target state="translated">自分でmasterに何かをコミットしたことがないと仮定すると、すでに完了しているはずです。これで、ローカルマスターをリモートの GitHub フォークにプッシュすることができます。また、開発ブランチを最新のローカルマスターにリベースすることもできます。</target>
        </trans-unit>
        <trans-unit id="07e2084f9d86a95da2e8d3b95a5ce00601649747" translate="yes" xml:space="preserve">
          <source>At this stage you check that commits what will be merged by typing &lt;code&gt;git status&lt;/code&gt;</source>
          <target state="translated">この段階で、 &lt;code&gt;git status&lt;/code&gt; と入力して、マージされるものをコミットすることを確認します</target>
        </trans-unit>
        <trans-unit id="b9ae2528623f4113c5de53633d5a27b55e035549" translate="yes" xml:space="preserve">
          <source>Before you can sync, you need to add a remote that points to the upstream repository. You may have done this when you originally forked.</source>
          <target state="translated">同期する前に、アップストリームリポジトリを指すリモートを追加する必要があります。もともとフォークしたときにこれを行っていたかもしれません。</target>
        </trans-unit>
        <trans-unit id="47e8690455bc45922966085b3d33db413219f0a2" translate="yes" xml:space="preserve">
          <source>Change directory to your local repository.</source>
          <target state="translated">ディレクトリをローカルリポジトリに変更します。</target>
        </trans-unit>
        <trans-unit id="3fd8a96d486985aff675e7a9223f2ee169b4d761" translate="yes" xml:space="preserve">
          <source>Check your forked repository. From time to time it will always show this notification:</source>
          <target state="translated">フォークされたリポジトリを確認してください。時折、この通知が表示されます。</target>
        </trans-unit>
        <trans-unit id="79cbc5eb672a54c2b82572afd52f2a6a4f85e598" translate="yes" xml:space="preserve">
          <source>Click</source>
          <target state="translated">Click</target>
        </trans-unit>
        <trans-unit id="071cff0034f6979c282cf4b38b624dc0f9e36bf0" translate="yes" xml:space="preserve">
          <source>Click &quot;Update from user/branch&quot; button the top.</source>
          <target state="translated">上部の「ユーザーブランチから更新」ボタンをクリックします。</target>
        </trans-unit>
        <trans-unit id="ca543cc44bf3a211828d947a183b294a7e9af7ad" translate="yes" xml:space="preserve">
          <source>Click on</source>
          <target state="translated">をクリックしてください。</target>
        </trans-unit>
        <trans-unit id="3332bb0a8aaeddbc5c4c764802dab7eac1b229dd" translate="yes" xml:space="preserve">
          <source>Click on the &quot;Tree: ....&quot; button.</source>
          <target state="translated">ツリー:......」ボタンをクリックします。</target>
        </trans-unit>
        <trans-unit id="f15f54a10c34d555b72ff683c2e2ac900e98d76a" translate="yes" xml:space="preserve">
          <source>Create pull request</source>
          <target state="translated">プルリクエストの作成</target>
        </trans-unit>
        <trans-unit id="2b9eceb7a86a9f577ef80586c5c1d7fde9ff493d" translate="yes" xml:space="preserve">
          <source>Enter</source>
          <target state="translated">Enter</target>
        </trans-unit>
        <trans-unit id="5b40a987f771c491468f8d2c27086ff8829378a5" translate="yes" xml:space="preserve">
          <source>Fetch the commits (and branches) from the &quot;upstream&quot;:</source>
          <target state="translated">上流」からコミット(とブランチ)を取得します。</target>
        </trans-unit>
        <trans-unit id="8794810c9e1140dda7a53c49126aeec77324d72d" translate="yes" xml:space="preserve">
          <source>Fetching</source>
          <target state="translated">Fetching</target>
        </trans-unit>
        <trans-unit id="de8ecbd3f82de881ecb335599deb8883e5dcdb55" translate="yes" xml:space="preserve">
          <source>Fetching from the remote repository will bring in its branches and their respective commits. These are stored in your local repository under special branches.</source>
          <target state="translated">リモートリポジトリから取得すると、そのブランチとそれぞれのコミットが表示されます。これらはローカルリポジトリの特別なブランチの下に保存されます。</target>
        </trans-unit>
        <trans-unit id="ad5e28ad709967562cc9a234219d9cd5ce08ca14" translate="yes" xml:space="preserve">
          <source>Follow the below steps. I tried them and it helped me.</source>
          <target state="translated">以下の手順に従ってください。私はそれらを試してみて、それは私を助けた。</target>
        </trans-unit>
        <trans-unit id="aac6c9184d41f07130651418971dab1ad3bb3d7a" translate="yes" xml:space="preserve">
          <source>For more information about these commands, refer to &lt;a href=&quot;http://2buntu.com/articles/1459/keeping-your-forked-repo-synced-with-the-upstream-source/&quot;&gt;step 3&lt;/a&gt;.</source>
          <target state="translated">これらのコマンドの詳細については、 &lt;a href=&quot;http://2buntu.com/articles/1459/keeping-your-forked-repo-synced-with-the-upstream-source/&quot;&gt;ステップ3を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4daf005c65a6710994eea45279ec8f0858cdce7c" translate="yes" xml:space="preserve">
          <source>From the local clone of your fork, create your upstream remote. You only need to do that once:</source>
          <target state="translated">フォークのローカルクローンから、アップストリームのリモートを作成します。この作業は一度だけで済みます。</target>
        </trans-unit>
        <trans-unit id="7e8949b82184a3f3fa7e043499748855d5ab06a6" translate="yes" xml:space="preserve">
          <source>Get back your stashed changes (if any)</source>
          <target state="translated">隠していた小銭を取り戻せ(あれば</target>
        </trans-unit>
        <trans-unit id="0af551dae4561b188cfce1916f265f84a1900eff" translate="yes" xml:space="preserve">
          <source>GitHub also provides instructions for this topic: &lt;a href=&quot;https://help.github.com/articles/syncing-a-fork/&quot;&gt;Syncing a fork&lt;/a&gt;</source>
          <target state="translated">GitHubはこのトピックの手順も提供しています： &lt;a href=&quot;https://help.github.com/articles/syncing-a-fork/&quot;&gt;フォークの同期&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6e718004f95ed97d308f5c3b90b16f79859f4e3a" translate="yes" xml:space="preserve">
          <source>Here is GitHub's official document on &lt;a href=&quot;https://help.github.com/articles/syncing-a-fork&quot;&gt;Syncing a fork&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://help.github.com/articles/syncing-a-fork&quot;&gt;フォークの同期&lt;/a&gt;に関するGitHubの公式ドキュメントは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9b2ec29532190fe18af38b3ec081dc17c3f39aab" translate="yes" xml:space="preserve">
          <source>Here two &lt;code&gt;mergemethods&lt;/code&gt; are into play, one is &lt;code&gt;hardreset&lt;/code&gt; which helps force sync changes in the &lt;code&gt;master&lt;/code&gt; branch of the forked repo with the parent repo and the other method is &lt;code&gt;merge&lt;/code&gt;. This method is used to merge changes done by you in the &lt;code&gt;feature&lt;/code&gt; branch and changes done due to force sync in the &lt;code&gt;master&lt;/code&gt; branch. In case of merge conflict, the pull app will allow you to choose the next course of action during the pull request.</source>
          <target state="translated">ここでは2つの &lt;code&gt;mergemethods&lt;/code&gt; が使用されています &lt;code&gt;hardreset&lt;/code&gt; つはhardresetで、フォークされたレポの &lt;code&gt;master&lt;/code&gt; ブランチの変更を親レポと強制的に同期させるのに役立ち、もう1つは &lt;code&gt;merge&lt;/code&gt; です。 この方法は、 &lt;code&gt;feature&lt;/code&gt; ブランチで行った変更と、 &lt;code&gt;master&lt;/code&gt; ブランチでの強制同期によって行われた変更をマージするために使用されます。 マージの競合が発生した場合、プルアプリを使用すると、プルリクエスト中に次のアクションコースを選択できます。</target>
        </trans-unit>
        <trans-unit id="b5feec425815667dd7926e4b4daeaf95a1186782" translate="yes" xml:space="preserve">
          <source>How can I get that change into my fork? Do I need to delete and re-create my fork when I have further changes to contribute? Or is there an update button?</source>
          <target state="translated">その変更をフォークに反映させるにはどうすればいいですか?貢献するためにさらに変更があった場合、フォークを削除して再作成する必要がありますか?それとも更新ボタンはありますか?</target>
        </trans-unit>
        <trans-unit id="df3f50d03f3257c40379dd4c99a541c8b77c103e" translate="yes" xml:space="preserve">
          <source>How do I update a GitHub forked repository</source>
          <target state="translated">GitHub でフォークされたリポジトリを更新するには?</target>
        </trans-unit>
        <trans-unit id="2a343e9b11ae32ded7d0e7a5911f54356160ee28" translate="yes" xml:space="preserve">
          <source>How it works (it is a guess, I don't know how exactly GitHub does it): forks share object storage and use &lt;a href=&quot;https://git-scm.com/docs/gitnamespaces&quot;&gt;namespaces&lt;/a&gt; to separate users' references. So you can access all commits through your fork, even if they did not exist by the time of forking.</source>
          <target state="translated">それがどのように機能するか（推測ですが、GitHubが正確にどのように機能するかはわかりません）：フォークはオブジェクトストレージを共有し、 &lt;a href=&quot;https://git-scm.com/docs/gitnamespaces&quot;&gt;名前空間&lt;/a&gt;を使用してユーザーの参照を分離します。 そのため、フォークの時点でコミットが存在していなかった場合でも、フォークを介してすべてのコミットにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="a7a6d461704fadab40e3cbdcaa120b732e90a03d" translate="yes" xml:space="preserve">
          <source>I am currently using this configuration in my forked repo &lt;a href=&quot;https://github.com/Saurabh702/notepad-plus-plus&quot;&gt;here&lt;/a&gt; to make sure an enhancement requested &lt;a href=&quot;https://stackoverflow.com/q/20700696/10155936&quot;&gt;here&lt;/a&gt; stays updated.</source>
          <target state="translated">私は現在、このフォークされたリポジトリ&lt;a href=&quot;https://github.com/Saurabh702/notepad-plus-plus&quot;&gt;で&lt;/a&gt;この設定を使用して、 ここでリクエストさ&lt;a href=&quot;https://stackoverflow.com/q/20700696/10155936&quot;&gt;れ&lt;/a&gt;た拡張機能が更新されたままであることを確認しています。</target>
        </trans-unit>
        <trans-unit id="78d7a9033ce91a4b7b3a7701acdd5a29798f8a71" translate="yes" xml:space="preserve">
          <source>I recently forked a project and applied several fixes. I then created a pull request which was then accepted.</source>
          <target state="translated">私は最近プロジェクトをフォークして、いくつかの修正を適用しました。その後、プルリクエストを作成し、それが受け入れられました。</target>
        </trans-unit>
        <trans-unit id="b68acdee24b57f33bdc001ed632493c5aacf71af" translate="yes" xml:space="preserve">
          <source>I update my forked repos with this one line:</source>
          <target state="translated">この一行でフォークしたレポを更新しています。</target>
        </trans-unit>
        <trans-unit id="3d1755748b7a1f154a7eb20aaa1e789b4626379d" translate="yes" xml:space="preserve">
          <source>I would like to add on to &lt;a href=&quot;https://stackoverflow.com/users/946850/krlmlr&quot;&gt;@krlmlr's&lt;/a&gt;&lt;a href=&quot;https://stackoverflow.com/a/58965171/10155936&quot;&gt;answer&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/users/946850/krlmlr&quot;&gt;@krlmlrの&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/a/58965171/10155936&quot;&gt;回答&lt;/a&gt;に追加したいと思います 。</target>
        </trans-unit>
        <trans-unit id="71af5f6a415612676d1ad958b19ac1026d89b7ad" translate="yes" xml:space="preserve">
          <source>If it's quite a big repository you may have wanted to manage it in a special way (e.g. drop history). Basically, you can get differences between current and upstream versions, commit them and then cherry pick back to master.</source>
          <target state="translated">かなり大きなリポジトリであれば、特別な方法で管理したいと思ったことがあるかもしれません(ドロップ履歴など)。基本的には、現在のバージョンと上流のバージョンの差分を取得してコミットし、それをマスターに戻してチェリーピックすることができます。</target>
        </trans-unit>
        <trans-unit id="f360336737f9708dddf596319f29f29ec83c7e7f" translate="yes" xml:space="preserve">
          <source>If you are using GitHub for Windows or Mac then now they have a one-click feature to update forks:</source>
          <target state="translated">WindowsやMacでGitHubを使っている場合は、ワンクリックでフォークを更新できるようになりました。</target>
        </trans-unit>
        <trans-unit id="d583b891b833ad9366a05e0e74488e8f90cc70ea" translate="yes" xml:space="preserve">
          <source>If you click</source>
          <target state="translated">クリックすると</target>
        </trans-unit>
        <trans-unit id="8cd173ef4abf2972ff0859ffa0e0e3238865ce10" translate="yes" xml:space="preserve">
          <source>If you click the dropdown and choose &quot;Squash and merge&quot;, all intervening commits will be squashed into one. This is most often something you don't want.</source>
          <target state="translated">ドロップダウンをクリックして &quot;Squash and merge&quot; を選択すると、間に介在するすべてのコミットが一つにまとめられます。これは大抵の場合、あなたが望まないことです。</target>
        </trans-unit>
        <trans-unit id="90d18659a140ac7f945393381c5f3b9ca34813b7" translate="yes" xml:space="preserve">
          <source>If you don't want to rewrite the history of your master branch, (for example because other people may have cloned it) then you should replace the last command with &lt;code&gt;git merge upstream/master&lt;/code&gt;.  However, for making further pull requests that are as clean as possible, it's probably better to rebase.</source>
          <target state="translated">masterブランチの履歴を書き直したくない場合（たとえば、他の人がそれを複製した可能性があるため）、最後のコマンドを &lt;code&gt;git merge upstream/master&lt;/code&gt; 置き換える必要があります。 ただし、できるだけクリーンなプルリクエストを行うには、リベースすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f776089b6ff08edf49e6864a333020e225edb195" translate="yes" xml:space="preserve">
          <source>If you set your upstream. Check with &lt;code&gt;git remote -v&lt;/code&gt;, then this will suffice.</source>
          <target state="translated">アップストリームを設定した場合。 &lt;code&gt;git remote -v&lt;/code&gt; で確認してください。これで十分です。</target>
        </trans-unit>
        <trans-unit id="eecc136151fb2163383b33ace6b3000a063ca69a" translate="yes" xml:space="preserve">
          <source>If you want the forked repository to be in sync with the parent repository, you could set up a config file(&lt;code&gt;pull.yml&lt;/code&gt;) for the &lt;a href=&quot;https://github.com/apps/pull&quot;&gt;Pull app&lt;/a&gt; (&lt;em&gt;in the feature branch&lt;/em&gt;), like this:</source>
          <target state="translated">フォークされたリポジトリーを親リポジトリーと同期させたい場合は、次のように（ &lt;em&gt;機能ブランチで&lt;/em&gt; ） &lt;a href=&quot;https://github.com/apps/pull&quot;&gt;Pullアプリの&lt;/a&gt; &lt;code&gt;pull.yml&lt;/code&gt; ファイル（ pull.yml ）を設定できます。</target>
        </trans-unit>
        <trans-unit id="77060506139f0b51bcc1b4098f77874ee60d9177" translate="yes" xml:space="preserve">
          <source>If you've rebased your branch onto &lt;code&gt;upstream/master&lt;/code&gt; you may need to force the push in order to push it to your own forked repository on GitHub.  You'd do that with:</source>
          <target state="translated">ブランチを &lt;code&gt;upstream/master&lt;/code&gt; リベースした場合は、GitHubの独自のフォークされたリポジトリーにプッシュするために、強制的にプッシュする必要がある場合があります。 あなたはそれを行うでしょう：</target>
        </trans-unit>
        <trans-unit id="000a1d52ae55ce4b3bb388299603fc6d81fc1724" translate="yes" xml:space="preserve">
          <source>If your local branch didn't have any unique commits, git will instead perform a &quot;fast-forward&quot;:</source>
          <target state="translated">ローカルブランチにユニークなコミットがなかった場合、git は代わりに &quot;fast-forward&quot; を実行します。</target>
        </trans-unit>
        <trans-unit id="d61bf845eb2e03fe01a1bce8c1c5087cb5e173fb" translate="yes" xml:space="preserve">
          <source>If, like me, you &lt;strong&gt;never commit anything directly to master&lt;/strong&gt;, which you should really, you can do the following.</source>
          <target state="translated">私のように、 &lt;strong&gt;master&lt;/strong&gt;に&lt;strong&gt;何かを直接コミットする&lt;/strong&gt;ことがない場合は、次のようにすることができます。</target>
        </trans-unit>
        <trans-unit id="ba7ece19362b2a8c4dc2565657e3511e377c5240" translate="yes" xml:space="preserve">
          <source>In your local clone of your forked repository, you can add the original GitHub repository as a &quot;remote&quot;.  (&quot;Remotes&quot; are like nicknames for the URLs of repositories - &lt;code&gt;origin&lt;/code&gt; is one, for example.)  Then you can fetch all the branches from that upstream repository, and rebase your work to continue working on the upstream version.  In terms of commands that might look like:</source>
          <target state="translated">フォークしたリポジトリのローカルクローンに、元のGitHubリポジトリを「リモート」として追加できます。 （「リモート」は、リポジトリのURLのニックネームのようなものです-たとえば、 &lt;code&gt;origin&lt;/code&gt; は1です。）次に、そのアップストリームリポジトリからすべてのブランチをフェッチし、作業をリベースして、アップストリームバージョンでの作業を続行できます。 次のようなコマンドの観点から：</target>
        </trans-unit>
        <trans-unit id="4f76a37b2e9c82019debf694fc201830d540f64f" translate="yes" xml:space="preserve">
          <source>Initially, the forked repository has one branch named : &lt;code&gt;master&lt;/code&gt;. If you are working on a new feature or a fix, you would generally create a new branch &lt;code&gt;feature&lt;/code&gt; and make the changes.</source>
          <target state="translated">最初は、フォークされたリポジトリーに &lt;code&gt;master&lt;/code&gt; という名前のブランチが1つあります。 新しい機能または修正に取り組んでいる場合は、通常、新しいブランチ &lt;code&gt;feature&lt;/code&gt; を作成して変更を加えます。</target>
        </trans-unit>
        <trans-unit id="567aa3a9c463f855ebdc229f01b738038656dcf5" translate="yes" xml:space="preserve">
          <source>Issue &lt;code&gt;git fetch upstream&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;git fetch upstream&lt;/code&gt; 発行する</target>
        </trans-unit>
        <trans-unit id="2904cebb10ab5eec224d68ccddd840625ed8a542" translate="yes" xml:space="preserve">
          <source>Issue &lt;code&gt;git push origin master&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;git push origin master&lt;/code&gt; 発行する</target>
        </trans-unit>
        <trans-unit id="a713068b13d135dfba7a6c9428bd80843ed4c780" translate="yes" xml:space="preserve">
          <source>Issue &lt;code&gt;git rebase upstream/master&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;git rebase upstream/master&lt;/code&gt; 発行する</target>
        </trans-unit>
        <trans-unit id="19c5df0feb2b0529669b5279411c78a559c787e9" translate="yes" xml:space="preserve">
          <source>Let's assume that you cloned already your fork to your computer with a command like this:</source>
          <target state="translated">このようなコマンドを使って、すでに自分のフォークをコンピュータにクローンしたとしましょう。</target>
        </trans-unit>
        <trans-unit id="a456f552d2cbe2b0b026d5f4dc290bf6543ca035" translate="yes" xml:space="preserve">
          <source>Merge pull request</source>
          <target state="translated">プルリクエストをマージ</target>
        </trans-unit>
        <trans-unit id="1504d9472f1d9c97375340082225d911a0b0b19e" translate="yes" xml:space="preserve">
          <source>Merge the changes from the &quot;master&quot; branch of the &quot;upstream&quot; into your the &quot;master&quot; branch of your &quot;origin&quot;:</source>
          <target state="translated">上流」の「master」ブランチからの変更を「原点」の「master」ブランチにマージします。</target>
        </trans-unit>
        <trans-unit id="40de0d4de887a374168bf79e72c7aa0fa4594d6e" translate="yes" xml:space="preserve">
          <source>Merging</source>
          <target state="translated">Merging</target>
        </trans-unit>
        <trans-unit id="c46dcb747276ef7e8abc1bb08d26a98e6491aa62" translate="yes" xml:space="preserve">
          <source>New Pull Request</source>
          <target state="translated">新規プルリクエスト</target>
        </trans-unit>
        <trans-unit id="7fb9ddf13694977e0cf256f6247e6abd2cc1d409" translate="yes" xml:space="preserve">
          <source>Note: Since the feature request is unofficial it is also advisable to contact &lt;code&gt;support@github.com&lt;/code&gt; to add your support for a feature like this to be implemented. The unofficial feature request above could be used as evidence of the amount of interest in this being implemented.</source>
          <target state="translated">注：機能のリクエストは非公式なので、 &lt;code&gt;support@github.com&lt;/code&gt; github.comに連絡して、このような機能を実装するためのサポートを追加することをお勧めします。 上記の非公式の機能リクエストは、実装されていることに対する関心の高さの証拠として使用できます。</target>
        </trans-unit>
        <trans-unit id="90ec6d50e987929ac6a45b7b32db268e747b1c74" translate="yes" xml:space="preserve">
          <source>Now that we have fetched the upstream repository, we want to merge its changes into our local branch. This will bring that branch into sync with the upstream, without losing our local changes.</source>
          <target state="translated">上流のリポジトリを取得したので、その変更をローカルブランチにマージしたいと思います。これにより、ローカルの変更を失わずにブランチをアップストリームと同期させることができます。</target>
        </trans-unit>
        <trans-unit id="fd009286901c837efdaef58b7a10f3197c9d3276" translate="yes" xml:space="preserve">
          <source>Now you have three options, but each will lead to a less-than-clean commit history.</source>
          <target state="translated">これで3つの選択肢ができましたが、それぞれがあまりきれいではないコミット履歴になってしまいます。</target>
        </trans-unit>
        <trans-unit id="8bf2ab2b4594a56cd8b9fb6f9bdbeec3bb92f849" translate="yes" xml:space="preserve">
          <source>Open &lt;code&gt;https://github.com/&amp;lt;repo&amp;gt;/commits/&amp;lt;hash&amp;gt;&lt;/code&gt;, where &lt;em&gt;repo&lt;/em&gt; is your fork, and &lt;em&gt;hash&lt;/em&gt; is full hash of commit which you can find in the upstream web interface. For example, I can open &lt;a href=&quot;https://github.com/max630/linux/commits/0aa0313f9d576affd7747cc3f179feb097d28990&quot;&gt;https://github.com/max630/linux/commits/0aa0313f9d576affd7747cc3f179feb097d28990&lt;/a&gt;, which points to &lt;code&gt;linux&lt;/code&gt;&lt;code&gt;master&lt;/code&gt; as time of writing.</source>
          <target state="translated">&lt;code&gt;https://github.com/&amp;lt;repo&amp;gt;/commits/&amp;lt;hash&amp;gt;&lt;/code&gt; を開きます。ここで、 &lt;em&gt;repo&lt;/em&gt;はフォークであり、 &lt;em&gt;hash&lt;/em&gt;はコミットの完全なハッシュであり、上流のWebインターフェイスで見つけることができます。 たとえば、私は&lt;a href=&quot;https://github.com/max630/linux/commits/0aa0313f9d576affd7747cc3f179feb097d28990&quot;&gt;https://github.com/max630/linux/commits/0aa0313f9d576affd7747cc3f179feb097d28990&lt;/a&gt;を開くことができます 。これは、執筆の時点で &lt;code&gt;linux&lt;/code&gt; &lt;code&gt;master&lt;/code&gt; をポイントしています。</target>
        </trans-unit>
        <trans-unit id="bf7747d9aa574b4704007bf15ba2ed436f66d151" translate="yes" xml:space="preserve">
          <source>Open menu &lt;em&gt;VCS&lt;/em&gt; &amp;rarr; &lt;em&gt;Git&lt;/em&gt;</source>
          <target state="translated">メニュー&lt;em&gt;VCS&lt;/em&gt; &amp;rarr; &lt;em&gt;Gitを&lt;/em&gt;開く</target>
        </trans-unit>
        <trans-unit id="234ae272ca6f312c89a8e8df6909fdfb0acb3451" translate="yes" xml:space="preserve">
          <source>Open your fork on GitHub.</source>
          <target state="translated">GitHubでフォークを開きます。</target>
        </trans-unit>
        <trans-unit id="27ac6148008f56cd689f0438348c712daa89325f" translate="yes" xml:space="preserve">
          <source>Past the initial upstream setup and master checkout, all you need to do is run the following command to sync your master with upstream: &lt;strong&gt;git pull upstream master&lt;/strong&gt;.</source>
          <target state="translated">最初のアップストリームセットアップとマスターチェックアウトを終えたら、次のコマンドを実行してマスターをアップストリームと同期するだけです： &lt;strong&gt;git pullアップストリームマスター&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="30ab8d084e2209d47a1dc198c8de1e251f390a94" translate="yes" xml:space="preserve">
          <source>Pull Requests</source>
          <target state="translated">プルリクエスト</target>
        </trans-unit>
        <trans-unit id="ae6fc052a45c770a9169a7ab638bc505e00bb03c" translate="yes" xml:space="preserve">
          <source>Push the changes to your fork</source>
          <target state="translated">変更点をフォークに押し込む</target>
        </trans-unit>
        <trans-unit id="5693314a70b827fd392394697ad3e48be809f455" translate="yes" xml:space="preserve">
          <source>Rebase and merge</source>
          <target state="translated">リベースとマージ</target>
        </trans-unit>
        <trans-unit id="2be8b8a63ab459b9cea7716971f0b489291f8f7d" translate="yes" xml:space="preserve">
          <source>Resolve merge conflicts if any and commit your merge</source>
          <target state="translated">マージの競合を解決し、マージをコミットします。</target>
        </trans-unit>
        <trans-unit id="d4af81a4796c3cb95c1f56e0df4695725005f254" translate="yes" xml:space="preserve">
          <source>Scroll down to</source>
          <target state="translated">下にスクロールして</target>
        </trans-unit>
        <trans-unit id="d61c5e591073d46124cf6b9aecef7a23df6ba7fd" translate="yes" xml:space="preserve">
          <source>Select the repository in the UI.</source>
          <target state="translated">UIでリポジトリを選択します。</target>
        </trans-unit>
        <trans-unit id="e7e619212ed526f7f497ba569b8215af3e6930ce" translate="yes" xml:space="preserve">
          <source>Since November 2013 there has been an unofficial feature request open with GitHub to ask them to add a very simple and intuitive method to keep a local fork in sync with upstream:</source>
          <target state="translated">2013年11月からGitHubで非公式な機能リクエストが公開されており、ローカルフォークをアップストリームと同期させておくための非常にシンプルで直感的な方法を追加してほしいとの要望がありました。</target>
        </trans-unit>
        <trans-unit id="7471ffd6ac4a8061b4408edaa480bb1bc093a600" translate="yes" xml:space="preserve">
          <source>So when your &lt;em&gt;Pull Request&lt;/em&gt; is accepted then you can safely delete the branch as your contributed code will be then live in your master of your forked repository when you update it with the upstream. By this your master will always be in clean condition to create a new branch to do another change.</source>
          <target state="translated">したがって、 &lt;em&gt;プルリクエスト&lt;/em&gt;が受け入れられると、貢献したコードがアップストリームで更新されたときにフォークされたリポジトリのマスターに存在するため、ブランチを安全に削除できます。 これにより、マスターは常にクリーンな状態になり、新しいブランチを作成して別の変更を行うことができます。</target>
        </trans-unit>
        <trans-unit id="bde179cf043a598d6ebae765e11145b2713e12da" translate="yes" xml:space="preserve">
          <source>So yes, you can keep your repo updated with its upstream using the GitHub web UI, but doing so will sully your commit history. Stick to &lt;a href=&quot;https://stackoverflow.com/questions/7244321/how-do-i-update-a-github-forked-repository/7244456#7244456&quot;&gt;the command line&lt;/a&gt; instead - it's easy.</source>
          <target state="translated">つまり、GitHubウェブUIを使用して、アップストリームでリポジトリを最新の状態に保つことができますが、そうすると、コミット履歴が不正になります。 代わりに&lt;a href=&quot;https://stackoverflow.com/questions/7244321/how-do-i-update-a-github-forked-repository/7244456#7244456&quot;&gt;コマンドラインを&lt;/a&gt;使用してください-簡単です。</target>
        </trans-unit>
        <trans-unit id="af3d4309c9cbe26ad276b210691bac0fd29af135" translate="yes" xml:space="preserve">
          <source>Source is here: &lt;a href=&quot;https://github.com/upriver/upriver.github.io&quot;&gt;https://github.com/upriver/upriver.github.io&lt;/a&gt;</source>
          <target state="translated">ソースはこちら： &lt;a href=&quot;https://github.com/upriver/upriver.github.io&quot;&gt;https&lt;/a&gt; : //github.com/upriver/upriver.github.io</target>
        </trans-unit>
        <trans-unit id="b2b25a8ecb73ab17a486ebf26f4dc535e692fd1d" translate="yes" xml:space="preserve">
          <source>Starting in May 2014, it is possible to update a fork directly from GitHub. This still works as of September 2017, &lt;strong&gt;BUT&lt;/strong&gt; it will lead to a dirty commit history.</source>
          <target state="translated">2014年5月から、GitHubから直接フォークを更新できるようになりました。 これは2017年9月の時点でも機能していますが、コミット履歴がダーティになります。</target>
        </trans-unit>
        <trans-unit id="94232c5c336a258f43a35d0ed1f8564a260b87f4" translate="yes" xml:space="preserve">
          <source>Stash the changes of your &quot;master&quot; branch:</source>
          <target state="translated">master」ブランチの変更を保存します。</target>
        </trans-unit>
        <trans-unit id="00b47bb1619911e7792fe20f714c21d2a1fc7eab" translate="yes" xml:space="preserve">
          <source>Switch to master branch if you are not &lt;code&gt;git checkout master&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;git checkout master&lt;/code&gt; でない場合はmasterブランチに切り替えます</target>
        </trans-unit>
        <trans-unit id="550dbb15410741b3ec255e0399965d535e2b1607" translate="yes" xml:space="preserve">
          <source>Switch to the &quot;master&quot; branch of your fork (&quot;origin&quot;):</source>
          <target state="translated">フォークの &quot;master &quot;ブランチ(&quot;origin&quot;)に切り替えます。</target>
        </trans-unit>
        <trans-unit id="4ae6fa22bc9918cf39eb8d8cef197a88e78982e8" translate="yes" xml:space="preserve">
          <source>Syncing</source>
          <target state="translated">Syncing</target>
        </trans-unit>
        <trans-unit id="a95b37b3017effb7b215d767ac0e2211e6aa724b" translate="yes" xml:space="preserve">
          <source>Syncing a fork</source>
          <target state="translated">フォークの同期</target>
        </trans-unit>
        <trans-unit id="f6cab97732eaeae1f3f5633b252cbea26c2cada7" translate="yes" xml:space="preserve">
          <source>That depends on the size of your repository and how you forked it.</source>
          <target state="translated">これはリポジトリのサイズとフォークの仕方によります。</target>
        </trans-unit>
        <trans-unit id="5dc7ae634569e14ec7d42e039a67f21cd21cbe73" translate="yes" xml:space="preserve">
          <source>The &quot;fetch&quot; command is indispensable for staying up-to-date in a project: only when performing a &quot;git fetch&quot; will you be informed about the changes your colleagues pushed to the remote server.</source>
          <target state="translated">git fetch&quot; を実行して初めて、同僚がリモートサーバーにプッシュした変更内容を知ることができます。</target>
        </trans-unit>
        <trans-unit id="aaf533ccf7e6caa9b7b03a28b06c9bac28a5ee27" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/apps/pull&quot;&gt;&quot;Pull&quot; app&lt;/a&gt; is an automatic set-up-and-forget solution. It will sync the default branch of your fork with the upstream repository.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/apps/pull&quot;&gt;「プル」アプリ&lt;/a&gt;は、自動セットアップ＆フォーゲットソリューションです。 フォークのデフォルトブランチをアップストリームリポジトリと同期します。</target>
        </trans-unit>
        <trans-unit id="0b41a8d83b439c9b4f4885f64b9339a1c1d30a13" translate="yes" xml:space="preserve">
          <source>The Setup</source>
          <target state="translated">セットアップ</target>
        </trans-unit>
        <trans-unit id="264bd0e9406f8519a0848bd766d97c323e32936c" translate="yes" xml:space="preserve">
          <source>The branch is updated once per hour directly on GitHub, on your local machine you need to pull the master branch to ensure that your local copy is in sync.</source>
          <target state="translated">ブランチは1時間に一度GitHub上で直接更新されますが、ローカルマシン上ではマスターブランチをプルしてローカルコピーが同期していることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="8f7c026574a5c8cfd1326e6ff76ca5c776670d83" translate="yes" xml:space="preserve">
          <source>The default will create an ugly merge commit.</source>
          <target state="translated">デフォルトでは、見苦しいマージコミットが作成されます。</target>
        </trans-unit>
        <trans-unit id="6f1ebfb3019b0fae6470df879b3b87ef304817de" translate="yes" xml:space="preserve">
          <source>The first part of this command lists all heads in the &lt;em&gt;upstream&lt;/em&gt; remote repo and removes the SHA-1 followed by &lt;code&gt;refs/heads/&lt;/code&gt; branch name prefix.</source>
          <target state="translated">このコマンドの最初の部分は、 &lt;em&gt;上流の&lt;/em&gt;リモートリポジトリのすべてのヘッドをリストし、SHA-1を削除し、その後に &lt;code&gt;refs/heads/&lt;/code&gt; ブランチ名のプレフィックスを付けます。</target>
        </trans-unit>
        <trans-unit id="0fd61e5b8cc0dcec4af47834c1c482a521206bf7" translate="yes" xml:space="preserve">
          <source>Then for each of these branches, it pushes the local copy of the &lt;em&gt;upstream&lt;/em&gt; remote tracking branch (&lt;code&gt;refs/remotes/upstream/&amp;lt;branch&amp;gt;&lt;/code&gt; on local side) directly to the remote branch on &lt;em&gt;origin&lt;/em&gt; (&lt;code&gt;refs/heads/&amp;lt;branch&amp;gt;&lt;/code&gt; on remote side).</source>
          <target state="translated">次に、これらの各ブランチについて、 &lt;em&gt;上流の&lt;/em&gt;リモート追跡ブランチ（ローカル側の &lt;code&gt;refs/remotes/upstream/&amp;lt;branch&amp;gt;&lt;/code&gt; ）のローカルコピーを、 &lt;em&gt;起点&lt;/em&gt;のリモートブランチ（リモート側の &lt;code&gt;refs/heads/&amp;lt;branch&amp;gt;&lt;/code&gt; ）に直接プッシュします。 ）。</target>
        </trans-unit>
        <trans-unit id="c40a11b834f4f1e641021d97be329e8b5d0b544e" translate="yes" xml:space="preserve">
          <source>Then run:</source>
          <target state="translated">その後、実行します。</target>
        </trans-unit>
        <trans-unit id="4e3c3ccfe5c2a2ebf037580df28bcb9fb26dc642" translate="yes" xml:space="preserve">
          <source>Then whenever you want to catch up with the upstream repository master branch you need to:</source>
          <target state="translated">そうすると、上流のリポジトリマスターブランチに追いつきたいときはいつでも必要になります。</target>
        </trans-unit>
        <trans-unit id="55f2ca371ae7e64950478e9d947b56fc79a8fc12" translate="yes" xml:space="preserve">
          <source>There are two main things on keeping a forked repository always update for good.</source>
          <target state="translated">フォークされたリポジトリを常に更新し続けることについては、主に2つのことがあります。</target>
        </trans-unit>
        <trans-unit id="8b85c401196c95bfb03457e3a7d6a5d80620657f" translate="yes" xml:space="preserve">
          <source>There are two steps required to sync your repository with the upstream: first you must fetch from the remote, then you must merge the desired branch into your local branch.</source>
          <target state="translated">リポジトリをアップストリームと同期させるには、2つのステップが必要です:まずリモートから取得し、次に希望するブランチをローカルブランチにマージします。</target>
        </trans-unit>
        <trans-unit id="8c4a41363b12f65f41188e7ab9b8178b65cd6f00" translate="yes" xml:space="preserve">
          <source>This assumes you have already configured an &lt;em&gt;upstream&lt;/em&gt; remote pointing at the source repository (where &lt;em&gt;origin&lt;/em&gt; was forked from) and have synced it with &lt;code&gt;git fetch upstream&lt;/code&gt;.</source>
          <target state="translated">これは、ソースレポジトリ（ &lt;em&gt;オリジン&lt;/em&gt;が分岐された場所）を指す&lt;em&gt;アップストリーム&lt;/em&gt;リモートをすでに構成し、それを &lt;code&gt;git fetch upstream&lt;/code&gt; と同期していることを前提としています。</target>
        </trans-unit>
        <trans-unit id="d3f73d1133e9c4aa6c1cb82052b4e208866b9e1e" translate="yes" xml:space="preserve">
          <source>This can be done with &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cron&quot;&gt;cron&lt;/a&gt;&lt;/em&gt;. Here is for an example code if you do it in linux.</source>
          <target state="translated">これは&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cron&quot;&gt;cron&lt;/a&gt;&lt;/em&gt;で実行できます。 Linuxで実行する場合のコード例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="3c04d0e03a98055770769ef6c37adf6dffe58c36" translate="yes" xml:space="preserve">
          <source>This keeps the &lt;code&gt;master&lt;/code&gt; branch of the forked repo up-to-date with the parent repo.  It keeps the &lt;code&gt;feature&lt;/code&gt; branch of the forked repo updated via the &lt;code&gt;master&lt;/code&gt; branch of the forked repo by merging the same. This assumes that the &lt;code&gt;feature&lt;/code&gt; branch is the default branch which contains the config file.</source>
          <target state="translated">これにより、フォークされたレポの &lt;code&gt;master&lt;/code&gt; ブランチが親レポで最新の状態に保たれます。 フォークされたレポの &lt;code&gt;master&lt;/code&gt; ブランチをマージすることにより、フォークされたレポの &lt;code&gt;feature&lt;/code&gt; ブランチを更新し続けます。 これは、 &lt;code&gt;feature&lt;/code&gt; ブランチが構成ファイルを含むデフォルトのブランチであることを前提としています。</target>
        </trans-unit>
        <trans-unit id="ab33c2f98bee89af79c24e3347a9eca7e1e6213d" translate="yes" xml:space="preserve">
          <source>Try reading &lt;a href=&quot;https://www.atlassian.com/blog/git/handle-big-repositories-git&quot;&gt;this one&lt;/a&gt;. It describes how to handle big Git repositories and how to upstream them with latest changes.</source>
          <target state="translated">&lt;a href=&quot;https://www.atlassian.com/blog/git/handle-big-repositories-git&quot;&gt;これを&lt;/a&gt;読んでみてください。 大きなGitリポジトリを処理する方法と、最新の変更でそれらをアップストリームする方法について説明します。</target>
        </trans-unit>
        <trans-unit id="7348e561a5ae9cb8353b257c56d9e4058e561c43" translate="yes" xml:space="preserve">
          <source>Try them. I use the first one to synchronize my local repository. Anyway the branches from the parent remote repository (&quot;upstream&quot;) will be accessible in Android Studio after you click &quot;Rebase my GitHub fork&quot;, and you will be able to operate with them easily.</source>
          <target state="translated">それらを試してみてください。私は最初のものをローカルリポジトリの同期に使っています。いずれにしても、&quot;Rebase my GitHub fork &quot;をクリックすると、親リモートリポジトリ(&quot;upstream&quot;)からのブランチにAndroid Studioからアクセスできるようになり、簡単に操作できるようになります。</target>
        </trans-unit>
        <trans-unit id="05a79fa3f7b71ff3af83543b0a99f9e7dc46d22d" translate="yes" xml:space="preserve">
          <source>Type name of the new branch and press</source>
          <target state="translated">新しいブランチの名前を入力して</target>
        </trans-unit>
        <trans-unit id="48d7f3aad1014aaefe582d965a38754ca3c81e6d" translate="yes" xml:space="preserve">
          <source>Use these commands (in lucky case)</source>
          <target state="translated">これらのコマンドを使用してください(ラッキーな場合</target>
        </trans-unit>
        <trans-unit id="c958a967cc046028cbaa999ed165b1df294e56ca" translate="yes" xml:space="preserve">
          <source>Use this if you dont want to add another remote endpoint to your project, as other solutions posted here.</source>
          <target state="translated">ここに投稿されている他のソリューションのように、プロジェクトに別のリモートエンドポイントを追加したくない場合に使用してください。</target>
        </trans-unit>
        <trans-unit id="113dabb069eb5c3615ca09078051fb9bfe028789" translate="yes" xml:space="preserve">
          <source>Visit the URL, click the green &quot;Install&quot; button and select the repositories where you want to enable automatic synchronization.</source>
          <target state="translated">URLにアクセスし、緑色の「インストール」ボタンをクリックし、自動同期を有効にしたいリポジトリを選択します。</target>
        </trans-unit>
        <trans-unit id="9e41c53b0c9e900eb8c17dcec719e6c5e2cda65e" translate="yes" xml:space="preserve">
          <source>We now have the upstream's master branch stored in a local branch, upstream/master</source>
          <target state="translated">これで、アップストリームのマスターブランチがローカルブランチの upstreammaster に格納されました。</target>
        </trans-unit>
        <trans-unit id="70996155aeb81fb8f674121234ed3c2b155fbcc6" translate="yes" xml:space="preserve">
          <source>When you have cloned your forked repository, go to the directory path where your clone resides and the few lines in your Git Bash Terminal.</source>
          <target state="translated">フォークしたリポジトリのクローンを作成したら、クローンが存在するディレクトリパスと Git Bash Terminal での数行を入力します。</target>
        </trans-unit>
        <trans-unit id="b4273e60bfcbcab2ec3724e77b23410fb74fa6aa" translate="yes" xml:space="preserve">
          <source>You can read about basic and advanced configs and various &lt;code&gt;mergemethods&lt;/code&gt;&lt;a href=&quot;https://github.com/wei/pull/#getting-started&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/wei/pull/#getting-started&quot;&gt;ここでは&lt;/a&gt; 、基本的な構成と高度な構成、およびさまざまな &lt;code&gt;mergemethods&lt;/code&gt; について読むことができます 。</target>
        </trans-unit>
        <trans-unit id="a5a7f7e1f68353d42fb1d08559607349859cb7d0" translate="yes" xml:space="preserve">
          <source>You can still visit &lt;a href=&quot;https://help.github.com/articles/fetching-a-remote/&quot;&gt;here&lt;/a&gt; for further queries</source>
          <target state="translated">詳細なクエリについては、 &lt;a href=&quot;https://help.github.com/articles/fetching-a-remote/&quot;&gt;ここ&lt;/a&gt;にアクセスできます</target>
        </trans-unit>
        <trans-unit id="ff6f510068911753cb9bd5368c75b45cf289df57" translate="yes" xml:space="preserve">
          <source>You can then fetch that branch to your local clone, and you won't have to push all that data back to GitHub when you push edits on top of that commit. Or use the web interface to change something in that branch.</source>
          <target state="translated">ブランチをローカルのクローンにフェッチすれば、そのコミットの上に編集をプッシュするときに GitHub にすべてのデータをプッシュする必要はありません。あるいは、ウェブインターフェイスを使ってブランチの内容を変更することもできます。</target>
        </trans-unit>
        <trans-unit id="39a2962d24c5da003463d40c3ba453db9e711b97" translate="yes" xml:space="preserve">
          <source>You only need to use the &lt;code&gt;-f&lt;/code&gt; the first time after you've rebased.</source>
          <target state="translated">リベースした後、初めて &lt;code&gt;-f&lt;/code&gt; を使用する必要があるだけです。</target>
        </trans-unit>
        <trans-unit id="c434032ffe13d43d03ab1c4fccc8af93e0a936ea" translate="yes" xml:space="preserve">
          <source>You're done! Congratulations!</source>
          <target state="translated">お疲れ様でした!おめでとう!</target>
        </trans-unit>
        <trans-unit id="a746abb742e0859202204870a3d7b7c8a1cc09c0" translate="yes" xml:space="preserve">
          <source>and assign a predictable name to your pull request (e.g., &lt;code&gt;Update from original&lt;/code&gt;).</source>
          <target state="translated">予測可能な名前をプルリクエストに割り当てます（例： &lt;code&gt;Update from original&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="df21a3d2fd99b84fa7cb13ec4ad8cb363da327a4" translate="yes" xml:space="preserve">
          <source>base fork</source>
          <target state="translated">ベースフォーク</target>
        </trans-unit>
        <trans-unit id="532f130ef6fb0e430af8a5beabc44c9f973fffb7" translate="yes" xml:space="preserve">
          <source>drop down to your fork, and the</source>
          <target state="translated">フォークにドロップダウンして</target>
        </trans-unit>
        <trans-unit id="2fea52e0bcab5f5be75f35cc928f2d5d550f6363" translate="yes" xml:space="preserve">
          <source>head fork</source>
          <target state="translated">ヘッドフォーク</target>
        </trans-unit>
        <trans-unit id="adddb4502940da2585c73da6895d602125b04b64" translate="yes" xml:space="preserve">
          <source>if you see that link. Otherwise, manually set the</source>
          <target state="translated">をクリックしてください。そうでなければ、手動で</target>
        </trans-unit>
        <trans-unit id="4f4d58ad0cad805b755078913c2a8c10b63617f7" translate="yes" xml:space="preserve">
          <source>put this code on the &lt;code&gt;crontab file&lt;/code&gt; to execute the job in hourly basis.</source>
          <target state="translated">このコードを &lt;code&gt;crontab file&lt;/code&gt; に配置して、1時間ごとにジョブを実行します。</target>
        </trans-unit>
        <trans-unit id="2b5782d6a2c529fd97cbf05eb0094e6162849111" translate="yes" xml:space="preserve">
          <source>switching the base</source>
          <target state="translated">ベース切り替え</target>
        </trans-unit>
        <trans-unit id="d057e0f6d02a5d2cb09ee3e8d5bcb43e5378e0b5" translate="yes" xml:space="preserve">
          <source>then create the &lt;code&gt;cron.sh&lt;/code&gt; script file and a &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/a/56304600/4058484&quot;&gt;git interaction&lt;/a&gt;&lt;/em&gt; with &lt;em&gt;&lt;a href=&quot;https://www.ssh.com/ssh/agent&quot;&gt;ssh-agent&lt;/a&gt;&lt;/em&gt; and/or &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/a/55779022/4058484&quot;&gt;expect&lt;/a&gt;&lt;/em&gt; as below</source>
          <target state="translated">次に、 &lt;code&gt;cron.sh&lt;/code&gt; スクリプトファイルと&lt;em&gt;&lt;a href=&quot;https://www.ssh.com/ssh/agent&quot;&gt;ssh-agent&lt;/a&gt;&lt;/em&gt;との&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/a/56304600/4058484&quot;&gt;git対話&lt;/a&gt;&lt;/em&gt;を作成し、以下のように&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/a/55779022/4058484&quot;&gt;期待&lt;/a&gt;&lt;/em&gt;します</target>
        </trans-unit>
        <trans-unit id="e94efa29d42e9ae0e72fe4835a46e739de853f87" translate="yes" xml:space="preserve">
          <source>to the upstream. Now GitHub will compare your fork with the original, and you should see all the latest changes.</source>
          <target state="translated">をアップストリームに変更しました。これでGitHubがあなたのフォークをオリジナルと比較し、最新の変更点をすべて確認できるようになりました。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
