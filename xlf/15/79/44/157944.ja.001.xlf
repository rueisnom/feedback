<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/157944">
    <body>
      <group id="157944">
        <trans-unit id="9b942cc7947960be180c4985b4aa7badbbf83dab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://openjdk.java.net/jeps/269&quot;&gt;JEP 269&lt;/a&gt; provides some convenience factory methods for &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_collections_framework&quot;&gt;Java Collections&lt;/a&gt; API. These immutable static factory methods are built into the &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/List.html&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Set.html&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Map.html&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; interfaces in Java 9 and later.</source>
          <target state="translated">&lt;a href=&quot;http://openjdk.java.net/jeps/269&quot;&gt;JEP 269&lt;/a&gt;は、 &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_collections_framework&quot;&gt;Javaコレクション&lt;/a&gt; APIのいくつかの便利なファクトリーメソッドを提供します。 これらの不変の静的ファクトリーメソッドは、Java 9以降の&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/List.html&quot;&gt; &lt;code&gt;List&lt;/code&gt; &lt;/a&gt; 、 &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Set.html&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt; 、および&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Map.html&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;インターフェースに組み込まれています。</target>
        </trans-unit>
        <trans-unit id="ef1dc5e83054168577f46179178e2089cd651f39" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;sup&gt;(old thread, but just 2 cents as none mention Guava or other libs and some other details)&lt;/sup&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;sup&gt;（古いスレッドですが、グアバやその他のライブラリやその他の詳細については誰も言及していないため、2セントです）&lt;/sup&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b45e3acdf3c125b56f5b7f5368924189613667f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Convert Array to ArrayList&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;配列をArrayListに変換&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dfc1fdfab9256b5d294a77b3432d03a3bc5cd514" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Convert Array to LinkedList&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;配列をLinkedListに変換&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="46d961acbe9218bcb8a1992f9fa428411e0f8473" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Convert Array to List:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;配列をリストに変換：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f58a420090ad27155b159be3bd06ba5e31fef68d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Given Object Array:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;指定されたオブジェクト配列：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="427c44d8ba6ed744b734bb05ae190b4a05959f13" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; : each &lt;code&gt;new Element(int args)&lt;/code&gt; will be treated as Individual Object and can be passed as a &lt;code&gt;var-args&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt; ： &lt;code&gt;new Element(int args)&lt;/code&gt; 各Element（int args）は個別オブジェクトとして扱われ、 &lt;code&gt;var-args&lt;/code&gt; として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="5b86f02d233610bf5027dc98685331fe1c7e25ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OUTPUT&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;OUTPUT&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5cb942b5cb26a39470c45755826667a5964a3b32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ObservableList:&lt;/strong&gt; A list that allows listeners to track changes when they occur.</source>
          <target state="translated">&lt;strong&gt;ObservableList：&lt;/strong&gt;変更が発生したときにリスナーが変更を追跡できるようにするリスト。</target>
        </trans-unit>
        <trans-unit id="bf1bcbb61652e94d6357fc7728e4d9db1f0bd54b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Print List:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;リストを印刷：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="002a4166f0e9c3eab1497b02e125c5f42fd851da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update Java 9&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Java 9を更新する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0412f3cba7610d10f68030b8f476f54d286e373d" translate="yes" xml:space="preserve">
          <source>A few characters would be saved, if this could be just a &lt;code&gt;List&lt;/code&gt;</source>
          <target state="translated">これが単なる &lt;code&gt;List&lt;/code&gt; である場合、数文字が保存されます</target>
        </trans-unit>
        <trans-unit id="12f88e64757b6a7f9bb520382c40bf67f02a1047" translate="yes" xml:space="preserve">
          <source>According with the question the answer using java 1.7 is:</source>
          <target state="translated">質問によると、java 1.7を使用して答えがあります。</target>
        </trans-unit>
        <trans-unit id="217cf842234efe4f32f01d8c6ad53b49a1f4f515" translate="yes" xml:space="preserve">
          <source>Already everyone has provided enough good answer for your problem. 
Now from the all suggestions, you need to decided which will fit your requirement. There are two types of collection which you need to know. One is unmodified collection and other one collection which will allow you to modify the object later.</source>
          <target state="translated">すでに誰もがあなたの問題のために十分な良い答えを提供しています。今、すべての提案から、あなたはあなたの要件に合うかを決定する必要があります。あなたが知る必要があるコレクションには2つのタイプがあります。1つは変更されていないコレクションで、もう1つは後でオブジェクトを変更できるようにするコレクションです。</target>
        </trans-unit>
        <trans-unit id="5eb363d873c8badba233f6343c7ada54c73339f4" translate="yes" xml:space="preserve">
          <source>And they very well support all operations of ArrayList</source>
          <target state="translated">そして、それらはArrayListのすべての操作を非常によくサポートしています。</target>
        </trans-unit>
        <trans-unit id="aa4d8277c171fa4ab1ac60f69cba4865b43e908a" translate="yes" xml:space="preserve">
          <source>Another Java8 solution &lt;em&gt;(I may have missed the answer among the large set. If so, my apologies).&lt;/em&gt; This creates an ArrayList (as opposed to a List) i.e. one can delete elements</source>
          <target state="translated">別のJava8ソリューション&lt;em&gt;（大規模なセットの中で答えを逃したかもしれません。もしそうなら、私の謝罪です）。&lt;/em&gt; これにより、（リストではなく）ArrayListが作成されます。つまり、要素を削除できます</target>
        </trans-unit>
        <trans-unit id="1162980813c64df820fe0dd105ad7848144e56fa" translate="yes" xml:space="preserve">
          <source>Another simple way is to add all elements from the array to a new ArrayList using a for-each loop.</source>
          <target state="translated">もう一つの簡単な方法は、for-eachループを使用して配列の全要素を新しいArrayListに追加することです。</target>
        </trans-unit>
        <trans-unit id="128d630cda50f2ae478c85cde76ad78ca2282c3c" translate="yes" xml:space="preserve">
          <source>Another update, almost ending year 2014, you can do it with Java 8 too:</source>
          <target state="translated">もう一つのアップデート、2014年も終わりに近づいてきましたが、Java 8でもできるようになりました。</target>
        </trans-unit>
        <trans-unit id="7f15d4df893701ff324bb3febd8121c1e8335818" translate="yes" xml:space="preserve">
          <source>Another way (although essentially equivalent to the &lt;code&gt;new ArrayList(Arrays.asList(array))&lt;/code&gt; solution performance-wise:</source>
          <target state="translated">別の方法（基本的には、 &lt;code&gt;new ArrayList(Arrays.asList(array))&lt;/code&gt; と同等のパフォーマンス）ソリューション：</target>
        </trans-unit>
        <trans-unit id="e8fccef5cf6ed02799d46e512e1c7f5463912bae" translate="yes" xml:space="preserve">
          <source>As of Java 5, &lt;code&gt;Arrays.asList()&lt;/code&gt; takes a varargs parameter and you don't have to construct the array explicitly.</source>
          <target state="translated">Java 5以降、 &lt;code&gt;Arrays.asList()&lt;/code&gt; はvarargsパラメーターを受け取り、配列を明示的に作成する必要はありません。</target>
        </trans-unit>
        <trans-unit id="33513d9337d9ae79236a7b76e271d5c23bf5b8d0" translate="yes" xml:space="preserve">
          <source>But it's not the only reason (and Java 7 isn't everywhere yet): the shorthand syntax is also very handy, and the methods initializers, as seen above, allow to write more expressive code. You do in one Guava call what takes 2 with the current Java Collections.</source>
          <target state="translated">しかし、それだけが理由ではありません(そして、Java 7はまだどこにでもあるわけではありません):速記構文も非常に便利ですし、上で見たようにメソッドのイニシャライザは、より表現力豊かなコードを書くことを可能にします。あなたは、現在のJavaコレクションで2を取るものを1つのGuavaコールで行います。</target>
        </trans-unit>
        <trans-unit id="8d47923f1cbb36ac3a5a8bb2f4b633fedd31b222" translate="yes" xml:space="preserve">
          <source>But the following operations returns just a List view of an ArrayList and not actual ArrayList.</source>
          <target state="translated">しかし、以下の操作はArrayListのリストビューを返すだけで、実際のArrayListは返されません。</target>
        </trans-unit>
        <trans-unit id="bb46a0512987983a307df4629e6094b9c08da5ff" translate="yes" xml:space="preserve">
          <source>Create ArrayList from array</source>
          <target state="translated">配列からArrayListを作成</target>
        </trans-unit>
        <trans-unit id="55cec6035ea7cd683c88e52d9f5892d3f6e12cb5" translate="yes" xml:space="preserve">
          <source>Even though there are many perfectly written answers to this question, I will add my inputs.</source>
          <target state="translated">完璧に書かれた回答がたくさんあるにもかかわらず、私のインプットを追加します。</target>
        </trans-unit>
        <trans-unit id="b56bc0c7117deede8ae48599b4c7c2af6ecca205" translate="yes" xml:space="preserve">
          <source>For A Mutable List</source>
          <target state="translated">可変リストの場合</target>
        </trans-unit>
        <trans-unit id="cb87386ab9412d8e4c203ea1ce2bb60edbfb3790" translate="yes" xml:space="preserve">
          <source>For Educational Purposes: The Good ol' Manual Way</source>
          <target state="translated">教育目的のために。古き良きマニュアルの方法</target>
        </trans-unit>
        <trans-unit id="6798c49e9b80213f237b24c89c618646bfc94382" translate="yes" xml:space="preserve">
          <source>For a Mutable List</source>
          <target state="translated">可変リストの場合</target>
        </trans-unit>
        <trans-unit id="c518db1644f1c3a95b6977af509f1c2b7c6c5808" translate="yes" xml:space="preserve">
          <source>For an Immutable List</source>
          <target state="translated">不変のリストのために</target>
        </trans-unit>
        <trans-unit id="6317d7eb41a522fbd75319c35fca4a417b35e665" translate="yes" xml:space="preserve">
          <source>For more detail you can refer to &lt;a href=&quot;http://javarevisited.blogspot.in/2011/06/converting-array-to-arraylist-in-java.html&quot;&gt;http://javarevisited.blogspot.in/2011/06/converting-array-to-arraylist-in-java.html&lt;/a&gt;</source>
          <target state="translated">詳細については、 &lt;a href=&quot;http://javarevisited.blogspot.in/2011/06/converting-array-to-arraylist-in-java.html&quot;&gt;http：//javarevisited.blogspot.in/2011/06/converting-array-to-arraylist-in-java.html&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4995b03bb76a28d266ae0e6878f17f62e4353375" translate="yes" xml:space="preserve">
          <source>Fortunately the JDK implementation is fast and &lt;code&gt;Arrays.asList(a[])&lt;/code&gt; is very well done. It create a kind of ArrayList named Arrays.ArrayList where the Object[] data points directly to the array.</source>
          <target state="translated">幸い、JDKの実装は高速で、 &lt;code&gt;Arrays.asList(a[])&lt;/code&gt; は非常によくできています。 Object []データが配列を直接指すArrays.ArrayListという名前の一種のArrayListを作成します。</target>
        </trans-unit>
        <trans-unit id="4975cd64a92e88880758085eef7772db2bdb4f4d" translate="yes" xml:space="preserve">
          <source>Given:</source>
          <target state="translated">Given:</target>
        </trans-unit>
        <trans-unit id="f7ff9e8b7bb2e09b70935a5d785e0cc5d9d0abf0" translate="yes" xml:space="preserve">
          <source>Hello</source>
          <target state="translated">Hello</target>
        </trans-unit>
        <trans-unit id="910f96951b7a91ba2dfaefacbe9558bf86f578e0" translate="yes" xml:space="preserve">
          <source>However it's better always use the interface:</source>
          <target state="translated">しかし、それは常にインターフェイスを使用する方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="b4774e6ebd900d7ee57aac2fc27964b74209e88b" translate="yes" xml:space="preserve">
          <source>I have an array that is initialized like:</source>
          <target state="translated">のように初期化された配列を持っています。</target>
        </trans-unit>
        <trans-unit id="489056af7da65c50784f0f80798a4ba7b77aa6cd" translate="yes" xml:space="preserve">
          <source>I love to use &lt;code&gt;Collections&lt;/code&gt;, &lt;code&gt;Arrays&lt;/code&gt;, or Guava. But if it don't fit, or you don't feel it, just write another inelegant line instead.</source>
          <target state="translated">&lt;code&gt;Collections&lt;/code&gt; 、 &lt;code&gt;Arrays&lt;/code&gt; 、またはグアバを使用するのが大好きです。 しかし、それが合わない場合、または感じない場合は、代わりに別のエレガントな行を書いてください。</target>
        </trans-unit>
        <trans-unit id="c3c3ccdd7ab586a11d712daa5812f2dfa54edf34" translate="yes" xml:space="preserve">
          <source>I would like to convert this array into an object of the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html&quot;&gt;&lt;code&gt;ArrayList&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">この配列を&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html&quot;&gt; &lt;code&gt;ArrayList&lt;/code&gt; &lt;/a&gt;クラスのオブジェクトに変換したいと思います。</target>
        </trans-unit>
        <trans-unit id="a2532bc9ed0c0e0fa544de8f817764604bda711d" translate="yes" xml:space="preserve">
          <source>If You Can't...</source>
          <target state="translated">できないなら...</target>
        </trans-unit>
        <trans-unit id="c60e904065c51b655cedff0205733c91ab3fb109" translate="yes" xml:space="preserve">
          <source>If You Can, Use Guava</source>
          <target state="translated">できればグァバを使う</target>
        </trans-unit>
        <trans-unit id="7ea1026b3ba5e93eb23c4ac9f2715d49c8e5b7b6" translate="yes" xml:space="preserve">
          <source>If not, the most understandable way is to do this :</source>
          <target state="translated">そうでない場合は、最も理解しやすい方法は、これを行うことです。</target>
        </trans-unit>
        <trans-unit id="1b1777513c4a56aa5555565ee7b2d0c8dc234624" translate="yes" xml:space="preserve">
          <source>If the array is of a primitive type, the given answers won't work. But since Java 8 you can use:</source>
          <target state="translated">配列がプリミティブ型の場合、与えられた答えは動作しません。しかし、Java 8 以降では</target>
        </trans-unit>
        <trans-unit id="d54231b2a573c62f741b9c8227d1b63f49d676d7" translate="yes" xml:space="preserve">
          <source>If we see the definition of &lt;code&gt;Arrays.asList()&lt;/code&gt; method you will get something like this:</source>
          <target state="translated">&lt;code&gt;Arrays.asList()&lt;/code&gt; メソッドの定義を確認すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="5a60b1ac823fcaa6316d16f6d82e04c67c686e68" translate="yes" xml:space="preserve">
          <source>If you see declaration for &lt;code&gt;java.util.Collections.addAll()&lt;/code&gt; method you will get something like this:</source>
          <target state="translated">&lt;code&gt;java.util.Collections.addAll()&lt;/code&gt; メソッドの宣言がある場合は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="98d8199108d84fe0f14808410092cf0049556e9a" translate="yes" xml:space="preserve">
          <source>If you use :</source>
          <target state="translated">を使用している場合は、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="9ae135b8a6b978c83d3a4808b1e740481640da4a" translate="yes" xml:space="preserve">
          <source>Immutable collection creation :: When you don't want to modify the collection object after creation</source>
          <target state="translated">不変のコレクション作成 :.作成後にコレクションオブジェクトを変更したくない場合</target>
        </trans-unit>
        <trans-unit id="b7567251aa123cef5b9285727b4a21303b990669" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_9&quot;&gt;Java 9&lt;/a&gt;, you can use &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/List.html#of-E-E-E-&quot;&gt;&lt;code&gt;List.of&lt;/code&gt;&lt;/a&gt; static factory method in order to create a &lt;code&gt;List&lt;/code&gt; literal. Something like the following:</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_9&quot;&gt;Java 9&lt;/a&gt;では、 &lt;code&gt;List&lt;/code&gt; リテラルを作成するために、静的ファクトリメソッド&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/List.html#of-E-E-E-&quot;&gt; &lt;code&gt;List.of&lt;/code&gt; &lt;/a&gt;を使用できます。 次のようなもの：</target>
        </trans-unit>
        <trans-unit id="e83b98eaecd1f582ab703758d4723c13ab1af0b7" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;Java 9&lt;/code&gt; you can use:</source>
          <target state="translated">&lt;code&gt;Java 9&lt;/code&gt; では 、以下を使用できます。</target>
        </trans-unit>
        <trans-unit id="278fa8cbf16218e0d49a65c3ed7dbd142d2114f2" translate="yes" xml:space="preserve">
          <source>It forbids modifications through some of the &lt;code&gt;List&lt;/code&gt; API's methods by way of simply extending an &lt;code&gt;AbstractList&lt;/code&gt; (so, adding or removing elements is unsupported), however it allows calls to &lt;code&gt;set()&lt;/code&gt; to override elements. Thus this list isn't truly immutable and a call to &lt;code&gt;asList()&lt;/code&gt; should be wrapped with &lt;code&gt;Collections.unmodifiableList()&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;AbstractList&lt;/code&gt; を単純に拡張することにより（ &lt;code&gt;List&lt;/code&gt; 追加または削除はサポートされていないため）、 List APIの一部のメソッドを介した変更を禁止しますが、 &lt;code&gt;set()&lt;/code&gt; を呼び出して要素をオーバーライドできます。 したがって、このリストは実際には不変ではなく、 &lt;code&gt;asList()&lt;/code&gt; の呼び出しは &lt;code&gt;Collections.unmodifiableList()&lt;/code&gt; でラップする必要があります。</target>
        </trans-unit>
        <trans-unit id="68ea1d0dba80fb87a8c2c7bc11b595268940fd31" translate="yes" xml:space="preserve">
          <source>It's worth pointing out the Guava way, which greatly simplifies these shenanigans:</source>
          <target state="translated">これらの悪ふざけを大幅に単純化するグァバの方法を指摘する価値があります。</target>
        </trans-unit>
        <trans-unit id="d428ada67860a9918a72f1319c195859f7748eda" translate="yes" xml:space="preserve">
          <source>JEP 269: Convenience Factory Methods for Collections</source>
          <target state="translated">JEP 269.コレクションのためのコンビニエンス・ファクトリー方式</target>
        </trans-unit>
        <trans-unit id="93e3eacff2e082a56024c3cb6fbe4505d1213946" translate="yes" xml:space="preserve">
          <source>Java 8&amp;rsquo;s Arrays class provides a stream() method which has overloaded versions accepting both primitive arrays and Object arrays.</source>
          <target state="translated">Java 8のArraysクラスは、プリミティブ配列とオブジェクト配列の両方を受け入れるオーバーロードされたバージョンを持つstream（）メソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="ab994d56aa86e444fa4e74d952e3f0b12739c889" translate="yes" xml:space="preserve">
          <source>Java 9</source>
          <target state="translated">ジャバ9</target>
        </trans-unit>
        <trans-unit id="da7284a98307aa46a9a33aa051e9b6e8d9f0470e" translate="yes" xml:space="preserve">
          <source>Make sure that &lt;code&gt;myArray&lt;/code&gt; is the same type as &lt;code&gt;T&lt;/code&gt;. You'll get a compiler error if you try to create a &lt;code&gt;List&amp;lt;Integer&amp;gt;&lt;/code&gt; from an array of &lt;code&gt;int&lt;/code&gt;, for example.</source>
          <target state="translated">&lt;code&gt;myArray&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; と同じ型であることを確認してください。 たとえば、 &lt;code&gt;int&lt;/code&gt; の配列から &lt;code&gt;List&amp;lt;Integer&amp;gt;&lt;/code&gt; を作成しようとすると、コンパイラエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="60806d6e1cd6fad57126f564546fd544a8aa6f94" translate="yes" xml:space="preserve">
          <source>More on List representation of array &lt;a href=&quot;https://stackoverflow.com/questions/43187083/benefits-of-creating-a-list-using-arrays-aslist&quot;&gt;link&lt;/a&gt;.</source>
          <target state="translated">配列&lt;a href=&quot;https://stackoverflow.com/questions/43187083/benefits-of-creating-a-list-using-arrays-aslist&quot;&gt;リンクの&lt;/a&gt;リスト表現の詳細。</target>
        </trans-unit>
        <trans-unit id="e70df6edef171f51963ab12bfc15983e41b06fd8" translate="yes" xml:space="preserve">
          <source>Mutable collection creation :: When you may want to modify the created collection object after creation.</source>
          <target state="translated">Mutableコレクションの作成 :.作成されたコレクションオブジェクトを作成後に変更したい場合があります。</target>
        </trans-unit>
        <trans-unit id="4937210990bb5ba1d320b0a7a7236d42431b52bb" translate="yes" xml:space="preserve">
          <source>New ArrayList can be created in the following ways</source>
          <target state="translated">新しいArrayListは以下の方法で作成することができます。</target>
        </trans-unit>
        <trans-unit id="8af295b8d3b352e0fb2f5e97eec7875b9593baa1" translate="yes" xml:space="preserve">
          <source>Note that the returned type for &lt;code&gt;asList()&lt;/code&gt; is a &lt;code&gt;List&lt;/code&gt; using a concrete &lt;code&gt;ArrayList&lt;/code&gt; implementation, but &lt;strong&gt;it is NOT&lt;/strong&gt;&lt;code&gt;java.util.ArrayList&lt;/code&gt;. It's an inner type, which emulates an &lt;code&gt;ArrayList&lt;/code&gt; but actually directly references the passed array and makes it &quot;write through&quot; (modifications are reflected in the array).</source>
          <target state="translated">&lt;code&gt;asList()&lt;/code&gt; に対して返されるタイプは、具体的な &lt;code&gt;ArrayList&lt;/code&gt; 実装を使用した &lt;code&gt;List&lt;/code&gt; ですが、 &lt;code&gt;java.util.ArrayList&lt;/code&gt; &lt;strong&gt;ではありません&lt;/strong&gt; 。 これは内部タイプで、 &lt;code&gt;ArrayList&lt;/code&gt; をエミュレートしますが、実際には渡された配列を直接参照し、「ライトスルー」します（変更は配列に反映されます）。</target>
        </trans-unit>
        <trans-unit id="3c52b1cffad0a53918650e84c042c989af91e254" translate="yes" xml:space="preserve">
          <source>Or as said @glglgl, you can create another independant ArrayList with :</source>
          <target state="translated">または、@glglglglが言ったように、あなたは別の独立したArrayListを作成することができます。</target>
        </trans-unit>
        <trans-unit id="cf22996f8dd491ddaa900ef6d32eafa32b31e974" translate="yes" xml:space="preserve">
          <source>Output is...</source>
          <target state="translated">出力は...</target>
        </trans-unit>
        <trans-unit id="d65713d5a91b13d0fa38c5631f2f80906eddc3c3" translate="yes" xml:space="preserve">
          <source>Please also note the similar methods for other data structures in other classes, for instance in &lt;a href=&quot;https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/Sets.java&quot;&gt;&lt;code&gt;Sets&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">また、他のクラスの他のデータ構造、たとえば&lt;a href=&quot;https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/Sets.java&quot;&gt; &lt;code&gt;Sets&lt;/code&gt; &lt;/a&gt;の同様のメソッドにも注意してください。</target>
        </trans-unit>
        <trans-unit id="358b3c17a9df55e717acb5abbd5e5d045e791086" translate="yes" xml:space="preserve">
          <source>Same as above, but wrapped with an actual &lt;code&gt;java.util.ArrayList&lt;/code&gt;:</source>
          <target state="translated">上記と同じですが、実際の &lt;code&gt;java.util.ArrayList&lt;/code&gt; でラップされています。</target>
        </trans-unit>
        <trans-unit id="4d4b8a23213e549dc605819e685badc539ba1eca" translate="yes" xml:space="preserve">
          <source>Say you have &lt;code&gt;Element[] array = { new Element(1), new Element(2), new Element(3) };&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Element[] array = { new Element(1), new Element(2), new Element(3) };&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c4c57d2de5343a338b898ba059d53dc507504fa9" translate="yes" xml:space="preserve">
          <source>See the next step if you need a mutable list.</source>
          <target state="translated">変形可能なリストが必要な場合は次のステップを参照してください。</target>
        </trans-unit>
        <trans-unit id="374746167a97c2dc04667bfabcece01028932223" translate="yes" xml:space="preserve">
          <source>Simplest way to do so is by adding following code. Tried and Tested.</source>
          <target state="translated">最も簡単な方法は、以下のコードを追加することです。試行錯誤してみました。</target>
        </trans-unit>
        <trans-unit id="3cb8a85a9802a1d9486fddcf6dca428f95553375" translate="yes" xml:space="preserve">
          <source>Since Java 8 there is an easier way to transform:</source>
          <target state="translated">Java 8以降、変換する簡単な方法があります。</target>
        </trans-unit>
        <trans-unit id="2d5f13aecf8cd0e0c80dd962dee97f85e7f0ce3e" translate="yes" xml:space="preserve">
          <source>Since this question is pretty old, it surprises me that nobody suggested the simplest form yet:</source>
          <target state="translated">この質問はかなり古いものなので、まだ誰も一番簡単な形を提案していないのには驚きました。</target>
        </trans-unit>
        <trans-unit id="00c08764d7eb1dd4c928db5068b732194c2eab45" translate="yes" xml:space="preserve">
          <source>So, Here I will give short example for two use cases.</source>
          <target state="translated">そこで、ここでは2つのユースケースについて簡単な例を挙げてみたいと思います。</target>
        </trans-unit>
        <trans-unit id="c0861646d613a192ebaa8d73142cabaae8db82f3" translate="yes" xml:space="preserve">
          <source>So, this code is also useful to do so</source>
          <target state="translated">なので、このコードも便利です。</target>
        </trans-unit>
        <trans-unit id="1a6892fc5d4b805d3c2ecdc87d782d8f1d9f5e8c" translate="yes" xml:space="preserve">
          <source>So, you might initialize &lt;code&gt;arraylist&lt;/code&gt; like this:</source>
          <target state="translated">したがって、次のように &lt;code&gt;arraylist&lt;/code&gt; を初期化できます。</target>
        </trans-unit>
        <trans-unit id="641a78617d5f3e336db6a161acc5f88ed2367b3d" translate="yes" xml:space="preserve">
          <source>The dangerous side is that &lt;strong&gt;if you change the initial array, you change the List !&lt;/strong&gt; Are you sure you want that ? Maybe yes, maybe not.</source>
          <target state="translated">危険なのは&lt;strong&gt;、最初の配列を変更すると、リストが変更されることです。&lt;/strong&gt; よろしいですか？ たぶんそうかもしれません。</target>
        </trans-unit>
        <trans-unit id="29bb40b0f5bd08cfd23f01c6af96fdebb7d9a5c2" translate="yes" xml:space="preserve">
          <source>The list returned from &lt;code&gt;asList()&lt;/code&gt; is backed by the original array.  If you modify the original array, the list will be modified as well.  This may be surprising.</source>
          <target state="translated">&lt;code&gt;asList()&lt;/code&gt; から返されたリストは、元の配列に基づいています。 元の配列を変更すると、リストも変更されます。 これは意外かもしれません。</target>
        </trans-unit>
        <trans-unit id="21ee5afaa980de511bb99b0dc1f832fa117188b8" translate="yes" xml:space="preserve">
          <source>The list returned from asList has &lt;strong&gt;fixed size&lt;/strong&gt;.  So, if you want to be able to add or remove elements from the returned list in your code, you'll need to wrap it in a new &lt;code&gt;ArrayList&lt;/code&gt;.  Otherwise you'll get an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.</source>
          <target state="translated">asListから返されるリストは&lt;strong&gt;固定サイズ&lt;/strong&gt;です。 したがって、コードで返されたリストに要素を追加または削除できるようにする場合は、それを新しい &lt;code&gt;ArrayList&lt;/code&gt; でラップする必要があります。 そうし &lt;code&gt;UnsupportedOperationException&lt;/code&gt; 、 UnsupportedOperationExceptionが発生します。</target>
        </trans-unit>
        <trans-unit id="4337f04aeb488665906b2f40b45af14c0b5f94e7" translate="yes" xml:space="preserve">
          <source>The main attraction could be to reduce the clutter due to generics for type-safety, as the use of the Guava &lt;a href=&quot;http://code.google.com/p/guava-libraries/wiki/CollectionUtilitiesExplained#Static_constructors&quot;&gt;factory methods&lt;/a&gt; allow the types to be inferred most of the time. However, this argument holds less water since Java 7 arrived with the new diamond operator.</source>
          <target state="translated">Guava &lt;a href=&quot;http://code.google.com/p/guava-libraries/wiki/CollectionUtilitiesExplained#Static_constructors&quot;&gt;ファクトリメソッドを&lt;/a&gt;使用すると、ほとんどの場合、型を推論できるため、主な魅力は、型安全のためのジェネリックによる混乱を減らすことです。 ただし、Java 7が新しいdiamondオペレーターとともに登場して以来、この議論の水は少なくなっています。</target>
        </trans-unit>
        <trans-unit id="840a436d443fc6c0bd10a906f67e02decbb0609a" translate="yes" xml:space="preserve">
          <source>The simplest answer is to do:</source>
          <target state="translated">一番簡単な答えは</target>
        </trans-unit>
        <trans-unit id="6efab02db44f967bd95b4588d14ae5fbdd227074" translate="yes" xml:space="preserve">
          <source>There is no guarantee that the object will actually be of class &lt;code&gt;ArrayList&lt;/code&gt;. If you need that guarantee, do this:</source>
          <target state="translated">オブジェクトが実際に &lt;code&gt;ArrayList&lt;/code&gt; クラスであるという保証はありません。 その保証が必要な場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="636b4dc927af51b52275857fbdccdf6c42213821" translate="yes" xml:space="preserve">
          <source>There might be another answer for this question too.</source>
          <target state="translated">この質問にも別の答えがあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="4baf066f30b88f0c9642dd55f6dbbbfdc6a4ca7a" translate="yes" xml:space="preserve">
          <source>Therefore, they will give error when trying to make some ArrayList operations</source>
          <target state="translated">そのため、いくつかのArrayList操作を行おうとするとエラーになります。</target>
        </trans-unit>
        <trans-unit id="d82b06291a651c647124ca9cee89faf90f5147aa" translate="yes" xml:space="preserve">
          <source>This will work fine.  But some caveats:</source>
          <target state="translated">これはうまくいくでしょう。しかし、いくつかの注意点があります。</target>
        </trans-unit>
        <trans-unit id="dc3eba237c7cf2053b645bc3b346db75683a429b" translate="yes" xml:space="preserve">
          <source>This would return an &lt;a href=&quot;https://en.wikipedia.org/wiki/Immutable_object&quot;&gt;&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; list containing three elements. If you want a &lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt; list, pass that list to the &lt;code&gt;ArrayList&lt;/code&gt; constructor:</source>
          <target state="translated">これは、3つの要素を含む&lt;a href=&quot;https://en.wikipedia.org/wiki/Immutable_object&quot;&gt;&lt;strong&gt;&lt;em&gt;不変の&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;リストを返します。 &lt;strong&gt;&lt;em&gt;変更可能な&lt;/em&gt;&lt;/strong&gt;リストが必要&lt;strong&gt;&lt;em&gt;な&lt;/em&gt;&lt;/strong&gt;場合は、そのリストを &lt;code&gt;ArrayList&lt;/code&gt; コンストラクターに渡します。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="0be377c7eef2d55ed7e4a8f226fd171c393a3633" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java&quot;&gt;&lt;code&gt;ImmutableList&lt;/code&gt;&lt;/a&gt; class and its &lt;a href=&quot;https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java#L101&quot;&gt;&lt;code&gt;of()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java#L225&quot;&gt;&lt;code&gt;copyOf()&lt;/code&gt;&lt;/a&gt; factory methods &lt;sup&gt;(elements can't be null)&lt;/sup&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java&quot;&gt; &lt;code&gt;ImmutableList&lt;/code&gt; &lt;/a&gt;クラスとその&lt;a href=&quot;https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java#L101&quot;&gt; &lt;code&gt;of()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java#L225&quot;&gt; &lt;code&gt;copyOf()&lt;/code&gt; &lt;/a&gt;ファクトリメソッドを使用します&lt;sup&gt;（要素をnullにすることはできません）&lt;/sup&gt; 。</target>
        </trans-unit>
        <trans-unit id="99ab97408967acb971b5bc6f7868d6e0b38da7be" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/Lists.java&quot;&gt;&lt;code&gt;Lists&lt;/code&gt;&lt;/a&gt; class and its &lt;a href=&quot;https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/Lists.java#L87&quot;&gt;&lt;code&gt;newArrayList()&lt;/code&gt;&lt;/a&gt; factory methods:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/Lists.java&quot;&gt; &lt;code&gt;Lists&lt;/code&gt; &lt;/a&gt;クラスとその&lt;a href=&quot;https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/Lists.java#L87&quot;&gt; &lt;code&gt;newArrayList()&lt;/code&gt; &lt;/a&gt;ファクトリメソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="dcba10e0d2d5781546fa406b4d574cb10c7975fb" translate="yes" xml:space="preserve">
          <source>Use the JDK's &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html&quot;&gt;&lt;code&gt;Arrays&lt;/code&gt;&lt;/a&gt; class and its &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#asList%28T...%29&quot;&gt;&lt;code&gt;asList()&lt;/code&gt;&lt;/a&gt; factory method, wrapped with a &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#unmodifiableList%28java.util.List%29&quot;&gt;&lt;code&gt;Collections.unmodifiableList()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">JDKの&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html&quot;&gt; &lt;code&gt;Arrays&lt;/code&gt; &lt;/a&gt;クラスとその&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#asList%28T...%29&quot;&gt; &lt;code&gt;asList()&lt;/code&gt; &lt;/a&gt;ファクトリメソッドを、 &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#unmodifiableList%28java.util.List%29&quot;&gt; &lt;code&gt;Collections.unmodifiableList()&lt;/code&gt; &lt;/a&gt;でラップして使用します 。</target>
        </trans-unit>
        <trans-unit id="aec4a80ca6eee75f469f008c65a4f866789bd956" translate="yes" xml:space="preserve">
          <source>Use the following code to convert an element array into an ArrayList.</source>
          <target state="translated">次のコードを使用して、要素配列をArrayListに変換します。</target>
        </trans-unit>
        <trans-unit id="3474f63056db5bd42198df04253aa7aa104c7bd8" translate="yes" xml:space="preserve">
          <source>We can easily convert an array to &lt;code&gt;ArrayList&lt;/code&gt;.
We use Collection interface's &lt;code&gt;addAll()&lt;/code&gt; method for the purpose of copying content from one list to another.</source>
          <target state="translated">配列を &lt;code&gt;ArrayList&lt;/code&gt; に簡単に変換できます。 あるリストから別のリストにコンテンツをコピーするために、コレクションインターフェイスの &lt;code&gt;addAll()&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="e4bd01a2df5f7a6defd6c408d945fdf71336a0c7" translate="yes" xml:space="preserve">
          <source>Why Guava?</source>
          <target state="translated">なぜグァバなのか?</target>
        </trans-unit>
        <trans-unit id="2f87a94597835d6ab7a6946872546fd74a5bbc0d" translate="yes" xml:space="preserve">
          <source>You also can do it with stream in Java 8.</source>
          <target state="translated">Java 8ではストリームでもできます。</target>
        </trans-unit>
        <trans-unit id="12dd80890a066d28dc8ad725395340354a998a45" translate="yes" xml:space="preserve">
          <source>You can convert using different methods</source>
          <target state="translated">さまざまな方法で変換することができます。</target>
        </trans-unit>
        <trans-unit id="659ba4d47965f130f8b5e87cbd2f27a40475f0f8" translate="yes" xml:space="preserve">
          <source>You can create an &lt;code&gt;ArrayList&lt;/code&gt; using &lt;a href=&quot;http://www.cactoos.org&quot;&gt;Cactoos&lt;/a&gt; (I'm one of the developers):</source>
          <target state="translated">&lt;a href=&quot;http://www.cactoos.org&quot;&gt;Cactoos&lt;/a&gt;を使用して &lt;code&gt;ArrayList&lt;/code&gt; を作成できます（私は開発者の1人です）。</target>
        </trans-unit>
        <trans-unit id="1198b75340b73cc9d05513a7fa4f63670acec015" translate="yes" xml:space="preserve">
          <source>You can do it in java 8 as follows</source>
          <target state="translated">java 8では、以下のように実行できます。</target>
        </trans-unit>
        <trans-unit id="de2a9e345b0c261a3a3fff27ea9505b8b03d0860" translate="yes" xml:space="preserve">
          <source>You probably just need a List, not an ArrayList.  In that case you can just do:</source>
          <target state="translated">おそらく、ArrayListではなくListが必要なだけでしょう。その場合は</target>
        </trans-unit>
        <trans-unit id="b94fd054a92499944db0f317a52118892228f5e1" translate="yes" xml:space="preserve">
          <source>also in Java 9 it's a little bit easy:</source>
          <target state="translated">もJava 9では少し簡単です。</target>
        </trans-unit>
        <trans-unit id="ae06032282695639c4e4f07750d8b27ba70300f2" translate="yes" xml:space="preserve">
          <source>and the common newest way to create array is &lt;strong&gt;observableArrays&lt;/strong&gt;</source>
          <target state="translated">配列を作成する一般的な最新の方法は、 &lt;strong&gt;observableArraysです。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="601f9603b5a145f80a10350d7a726681f5748433" translate="yes" xml:space="preserve">
          <source>as all said this will do so</source>
          <target state="translated">言われてみればそうなる</target>
        </trans-unit>
        <trans-unit id="138078261bddfafa47efd0d260bc862c574f795a" translate="yes" xml:space="preserve">
          <source>for Java SE you can try</source>
          <target state="translated">Java SEの場合は、以下のようにしてみてください。</target>
        </trans-unit>
        <trans-unit id="95eb570201e5431d654286b99cc3c32e47657684" translate="yes" xml:space="preserve">
          <source>observableArrayList()
  Creates a new empty observable list that is backed by an arraylist.
  observableArrayList(E... items)
  Creates a new observable array list with items added to it.</source>
          <target state="translated">observableArrayList()配列リストに裏打ちされた新しい空の observable リストを作成します。 observableArrayList(E...items)アイテムを追加した新しい observable 配列リストを作成します。</target>
        </trans-unit>
        <trans-unit id="41798c1b73ce6f5c7fc33c62895a88e11ceb5ea2" translate="yes" xml:space="preserve">
          <source>that is according to &lt;a href=&quot;https://docs.oracle.com/javase/8/javafx/api/javafx/collections/FXCollections.html&quot;&gt;Oracle Docs&lt;/a&gt;</source>
          <target state="translated">それは&lt;a href=&quot;https://docs.oracle.com/javase/8/javafx/api/javafx/collections/FXCollections.html&quot;&gt;Oracle Docsに&lt;/a&gt;よると</target>
        </trans-unit>
        <trans-unit id="7c211433f02071597741e6ff5a8ea34789abbf43" translate="yes" xml:space="preserve">
          <source>world</source>
          <target state="translated">world</target>
        </trans-unit>
        <trans-unit id="52e1b56f52ba9e1c2459b76aae686a62e0a5149e" translate="yes" xml:space="preserve">
          <source>you &lt;strong&gt;may&lt;/strong&gt; create &lt;strong&gt;and fill&lt;/strong&gt; two lists ! Filling twice a big list is exactly what you don't want to do because it will create another &lt;code&gt;Object[]&lt;/code&gt; array each time the capacity needs to be extended.</source>
          <target state="translated">2つのリストを作成&lt;strong&gt;して入力でき&lt;/strong&gt;ます。 容量の拡張が必要になるたびに別の &lt;code&gt;Object[]&lt;/code&gt; 配列が作成されるため、大きなリストを2回埋めることは、まさに望まないことです。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
