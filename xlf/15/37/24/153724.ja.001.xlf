<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/153724">
    <body>
      <group id="153724">
        <trans-unit id="e8a49d85a6103cb6baf79b15d479c77d9169a1d1" translate="yes" xml:space="preserve">
          <source>(For the sake of this example I am using a custom locale)</source>
          <target state="translated">(この例のために、私はカスタムロケールを使用しています)</target>
        </trans-unit>
        <trans-unit id="ed4ed5de8fc99a9b44b7b7c487086d4fe381be7f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.5/org/apache/commons/math3/util/Precision.html&quot;&gt;Precision&lt;/a&gt; from Apache Commons Math</source>
          <target state="translated">Apache Commons Mathの&lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.5/org/apache/commons/math3/util/Precision.html&quot;&gt;精度&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7998fa1328b8e99c3576358b030ec1a142c01696" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/text/DecimalFormat.html#setRoundingMode%28java.math.RoundingMode%29&quot;&gt;DecimalFormat#setRoundingMode()&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/text/DecimalFormat.html#setRoundingMode%28java.math.RoundingMode%29&quot;&gt;DecimalFormat#setRoundingMode()&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="53a7333b9280765dec1f386291ee2f3947c81ee4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://dst.lbl.gov/ACSSoftware/colt/api/cern/jet/math/Functions.html&quot;&gt;Functions&lt;/a&gt; from Colt</source>
          <target state="translated">コルトの&lt;a href=&quot;http://dst.lbl.gov/ACSSoftware/colt/api/cern/jet/math/Functions.html&quot;&gt;機能&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dfa9b4d2dc598552a40ec1b3f02b5d19029d0e0b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://weka.sourceforge.net/doc.stable/weka/core/Utils.html#roundDouble(double,%20int)&quot;&gt;Utils&lt;/a&gt; from Weka</source>
          <target state="translated">Wekaのユーティリティ</target>
        </trans-unit>
        <trans-unit id="7fb863e79c1c6d68f78e5f1b9fde3ac6c54c6224" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Disclaimer:&lt;/em&gt; I am involved in the decimal4j project.</source>
          <target state="translated">&lt;em&gt;免責事項：&lt;/em&gt;私はdecimal4jプロジェクトに関与しています。</target>
        </trans-unit>
        <trans-unit id="1d8935fb73cb1285f8855582c2d416ad977d155a" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;A similar but fast and garbage-free method is provided by the &lt;code&gt;DoubleRounder&lt;/code&gt; utility in the decimal4j library:&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;同様の高速でガベージフリーのメソッドは、decimal4jライブラリの &lt;code&gt;DoubleRounder&lt;/code&gt; ユーティリティによって提供されます。&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="bcb15e3bc01228fddc8330537892be1f39a86a2d" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;However if you &lt;em&gt;do&lt;/em&gt; want to round the double value and get a &lt;code&gt;double&lt;/code&gt; value result, you can use &lt;code&gt;org.apache.commons.math3.util.Precision.round(..)&lt;/code&gt; as mentioned above. The implementation uses &lt;code&gt;BigDecimal&lt;/code&gt;, is slow and creates garbage.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;ただし、double値を丸めてdouble値の結果を取得&lt;em&gt;し&lt;/em&gt;たい場合は、上記のように &lt;code&gt;org.apache.commons.math3.util.Precision.round(..)&lt;/code&gt; を使用できます。&lt;/s&gt; &lt;s&gt;実装は &lt;code&gt;BigDecimal&lt;/code&gt; を使用し、遅く、ゴミを作成します。&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="7c52a5b8d2821b520eb72f81700edec9d526d45b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT:&lt;/strong&gt; To address some comments below I redid the modulus part of the test loop using &lt;code&gt;BigDecimal&lt;/code&gt; and &lt;code&gt;new MathContext(16)&lt;/code&gt; for the modulus operation as follows:</source>
          <target state="translated">&lt;strong&gt;編集：&lt;/strong&gt;以下のいくつかのコメントに対処するために、次のように、モジュラス演算に &lt;code&gt;BigDecimal&lt;/code&gt; と &lt;code&gt;new MathContext(16)&lt;/code&gt; を使用して、テストループのモジュラス部分をやり直しました。</target>
        </trans-unit>
        <trans-unit id="7fb87470f7539a26dec74a1340d032e54806e041" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT&lt;/strong&gt;: The original answer does not address the accuracy of the double values. That is fine if you don't care much whether it rounds up or down. But if you want accurate rounding, then you need to take the expected accuracy of the values into account. Floating point values have a binary representation internally. That means that a value like 2.7735 does not actually have that exact value internally. It can be slightly larger or slightly smaller. If the internal value is slightly smaller, then it will not round up to 2.7740. To remedy that situation, you need to be aware of the accuracy of the values that you are working with, and add or subtract that value before rounding. For example, when you know that your values are accurate up to 6 digits, then to round half-way values up, add that accuracy to the value:</source>
          <target state="translated">&lt;strong&gt;編集&lt;/strong&gt; ：元の答えは、double値の正確性に対処していません。 切り上げても切り下げてもあまり気にしないのであれば問題ありません。 ただし、正確な丸めが必要な場合は、予想される値の精度を考慮する必要があります。 浮動小数点値は内部的にバイナリ表現を持っています。 つまり、2.7735のような値は、実際にはその正確な値を内部的に持っていません。 少し大きくすることも小さくすることもできます。 内部値がわずかに小さい場合、2.7740に切り上げられません。 この状況を改善するには、使用している値の正確性に注意し、丸める前にその値を加算または減算する必要があります。 たとえば、値が6桁まで正確であることがわかっている場合、中間値を切り上げるには、その精度を値に追加します。</target>
        </trans-unit>
        <trans-unit id="a60e913b8822dda4ef9fd9c78b0a185910e84830" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Exponential notation&lt;/strong&gt;: Start using exponential notation after a certain threshold</source>
          <target state="translated">&lt;strong&gt;指数表記&lt;/strong&gt; ：特定のしきい値の後で指数表記の使用を開始します</target>
        </trans-unit>
        <trans-unit id="a2d53d29974214019ec09861ae4032c14fdc83c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Formatting&lt;/strong&gt;: Easily format a double to string with a certain number of decimal places</source>
          <target state="translated">&lt;strong&gt;書式設定&lt;/strong&gt; ：doubleを特定の小数点以下の桁数の文字列に簡単に&lt;strong&gt;書式設定&lt;/strong&gt;します</target>
        </trans-unit>
        <trans-unit id="58de58c69dedbe6a21ddd94f8c66201ab80636cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here is the class&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;ここにクラスがあり&lt;/strong&gt;ます：</target>
        </trans-unit>
        <trans-unit id="f2375ef9b1da9276d6fafcbe53edbf50d1385c98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Locale&lt;/strong&gt;: Format and parse using the default locale</source>
          <target state="translated">&lt;strong&gt;ロケール&lt;/strong&gt; ：デフォルトのロケールを使用してフォーマットおよび解析します</target>
        </trans-unit>
        <trans-unit id="ef937726101d6bbf1ea792d981c362dd127505c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Notes:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Notes:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d418a1cc97d1d278ab2ef8e789111916297e4ed2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parsing&lt;/strong&gt;: Parse the formatted value back to double</source>
          <target state="translated">&lt;strong&gt;解析&lt;/strong&gt; ：フォーマットされた値を解析して倍精度に戻します</target>
        </trans-unit>
        <trans-unit id="29854fdb1978b4df4571fc65d5e6c439cb8fcf00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update:&lt;/strong&gt;
As @iaforek pointed out DoubleRounder sometimes returns counterintuitive results. The reason is that it performs mathematically correct rounding. For instance &lt;code&gt;DoubleRounder.round(256.025d, 2)&lt;/code&gt; will be rounded down to 256.02 because the double value represented as 256.025d is somewhat smaller than the rational value 256.025 and hence will be rounded down.</source>
          <target state="translated">&lt;strong&gt;更新：&lt;/strong&gt; @iaforekが指摘したように、DoubleRounderは時として直観に反する結果を返します。 その理由は、数学的に正しい丸めを実行するためです。 たとえば、 &lt;code&gt;DoubleRounder.round(256.025d, 2)&lt;/code&gt; は256.02に切り捨てられます。これは、256.025dとして表されるdouble値が有理値256.025よりもいくらか小さいため、切り捨てられるためです。</target>
        </trans-unit>
        <trans-unit id="122766c56bde93766b9ec54013195dd2dfaa1889" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage is pretty simple&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;使い方はかなり簡単&lt;/strong&gt;です：</target>
        </trans-unit>
        <trans-unit id="42eeddaab3e1f8e5c463997d349d4d2b0a53f40e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;demo online.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;オンラインデモ。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="671c674354203f9a4adc8c5cd6e5971141e115c1" translate="yes" xml:space="preserve">
          <source>@Milhous: the decimal format for rounding is excellent:</source>
          <target state="translated">@Milhous:四捨五入の10進数形式が素晴らしいですね。</target>
        </trans-unit>
        <trans-unit id="c8fdc6d7e15991afe1a080edeebb5f49f84a57c7" translate="yes" xml:space="preserve">
          <source>A succinct solution:</source>
          <target state="translated">簡潔な解決策。</target>
        </trans-unit>
        <trans-unit id="9313715a06c284b35431a62be6a9f8f0eb4d5b6f" translate="yes" xml:space="preserve">
          <source>Another method is to use the &lt;code&gt;DecimalFormatter&lt;/code&gt;:</source>
          <target state="translated">別の方法は &lt;code&gt;DecimalFormatter&lt;/code&gt; を使用することです ：</target>
        </trans-unit>
        <trans-unit id="bce8fdd56ec70c0d3e4427caceeb6f9f5aae12ea" translate="yes" xml:space="preserve">
          <source>Any decimal value is rounded down to the next integer. This method returns a &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="translated">10進数の値は、次の整数に切り捨てられます。 このメソッドは &lt;code&gt;double&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2d44ba4904869b3958c9b3d68bb073eb1ac2d55d" translate="yes" xml:space="preserve">
          <source>Any decimal value is rounded up to the next integer. It goes to the &lt;strong&gt;ceil&lt;/strong&gt;ing. This method returns a &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="translated">10進数の値は、次の整数に切り上げられます。 それは&lt;strong&gt;天井&lt;/strong&gt;に行きます。 このメソッドは &lt;code&gt;double&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ae16d68e49ec37da78f538086dcaa776281079c7" translate="yes" xml:space="preserve">
          <source>Apache Commons Mathematics Library homepage is: &lt;a href=&quot;http://commons.apache.org/proper/commons-math/index.html&quot;&gt;http://commons.apache.org/proper/commons-math/index.html&lt;/a&gt;</source>
          <target state="translated">Apache Commons Mathematics Libraryホームページは、 &lt;a href=&quot;http://commons.apache.org/proper/commons-math/index.html&quot;&gt;http&lt;/a&gt; ： //commons.apache.org/proper/commons-math/index.htmlです。</target>
        </trans-unit>
        <trans-unit id="5fc05c32c957ac348eda7d5b925f68f7ab276330" translate="yes" xml:space="preserve">
          <source>As some others have noted, the correct answer is to use either &lt;code&gt;DecimalFormat&lt;/code&gt; or &lt;code&gt;BigDecimal&lt;/code&gt;. Floating-point doesn't &lt;em&gt;have&lt;/em&gt; decimal places so you cannot possibly round/truncate to a specific number of them in the first place. You have to work in a decimal radix, and that is what those two classes do.</source>
          <target state="translated">他の人が指摘したように、正しい答えは &lt;code&gt;DecimalFormat&lt;/code&gt; または &lt;code&gt;BigDecimal&lt;/code&gt; を使用することです 。 浮動小数点に&lt;em&gt;は&lt;/em&gt;小数点以下の桁数がないため、最初に特定の数に丸める/切り捨てることはできません。 あなたは10進数で作業しなければなりません、そしてそれはそれらの2つのクラスがすることです。</target>
        </trans-unit>
        <trans-unit id="0fbe9b0f26458c36ff995dbad1802eca7ee9945e" translate="yes" xml:space="preserve">
          <source>As stated above, this rounds to the nearest whole number. &lt;code&gt;.5&lt;/code&gt; decimals round up.  This method returns an &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">上記のように、これは最も近い整数に丸めます。 &lt;code&gt;.5&lt;/code&gt; 小数点以下は切り上げられます。 このメソッドは &lt;code&gt;int&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="3901688f444dfec670680bd1f513052ad73f1001" translate="yes" xml:space="preserve">
          <source>Assuming &lt;code&gt;value&lt;/code&gt; is a &lt;code&gt;double&lt;/code&gt;, you can do:</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が &lt;code&gt;double&lt;/code&gt; であるとすると、次のことができます。</target>
        </trans-unit>
        <trans-unit id="a80629c6bd6b08b0261959b55e21104540fff404" translate="yes" xml:space="preserve">
          <source>BigDecimal#setScale()</source>
          <target state="translated">BigDecimal#setScale()</target>
        </trans-unit>
        <trans-unit id="094a821a78159fabbf8dbd16217b6f3bc113e117" translate="yes" xml:space="preserve">
          <source>DecimalFormat is the best ways to output, but I don't prefer it. I always do this all the time, because it return the double value. So I can use it  more than just output.</source>
          <target state="translated">DecimalFormatで出力するのが一番いいのですが、私は好みではありません。倍の値を返してくれるので、いつもこれをやっています。なので、出力以外にも使えますね。</target>
        </trans-unit>
        <trans-unit id="4e749a054ad6b4b4e6d62f427b584962334f73f0" translate="yes" xml:space="preserve">
          <source>Defining this values:</source>
          <target state="translated">この値を定義します。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="2f65f8630426c4ed4fd9dd19e4214fc15682ef93" translate="yes" xml:space="preserve">
          <source>For those reasons and everything mentioned above in this post I &lt;strong&gt;cannot recommend to use DoubleRounder&lt;/strong&gt;.</source>
          <target state="translated">これらの理由と、この投稿で前述したすべての理由から、私&lt;strong&gt;はDoubleRounderの使用を推奨できません&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="a9cff78d444a4efe099a9b81b60b609cae30be12" translate="yes" xml:space="preserve">
          <source>Here is a suggestion of what libraries you can use if you want &lt;code&gt;double&lt;/code&gt; as a result. I wouldn't recommend it for string conversion, though, as double may not be able to represent what you want exactly (see e.g. &lt;a href=&quot;https://stackoverflow.com/q/3730019/2032064&quot;&gt;here&lt;/a&gt;):</source>
          <target state="translated">結果として &lt;code&gt;double&lt;/code&gt; したい場合に使用できるライブラリの提案を次に示します。 ただし、doubleは必要なものを正確に表現できない可能性があるため、文字列変換にはお勧めしません（たとえば、 &lt;a href=&quot;https://stackoverflow.com/q/3730019/2032064&quot;&gt;こちらを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="ffff53110ebaf8268e4bbf3333bddd4b375e23c7" translate="yes" xml:space="preserve">
          <source>Here is a summary of what you can use if you want the result as String:</source>
          <target state="translated">結果をStringにしたい場合に使えるものをまとめてみました。</target>
        </trans-unit>
        <trans-unit id="22686526469f672eb6453158ae54ec7220556a6a" translate="yes" xml:space="preserve">
          <source>How to round a number in Java</source>
          <target state="translated">Javaで数字を丸める方法</target>
        </trans-unit>
        <trans-unit id="0c6ad6147061b3e8fb0843e40c1811ee0019e7c2" translate="yes" xml:space="preserve">
          <source>How to round a number to n decimal places in Java</source>
          <target state="translated">Javaで数字を小数点以下 n 桁に丸める方法</target>
        </trans-unit>
        <trans-unit id="ad93497a1aac8e144a5e5287aeb14ded45f15904" translate="yes" xml:space="preserve">
          <source>However as you can see this uses half-even rounding. That is it will round down if the previous digit is even. What I'd like is this:</source>
          <target state="translated">しかし、ご覧のように、これは半偶数丸めを使用しています。つまり、前の桁が偶数の場合は切り捨てられます。私が欲しいのはこれです。</target>
        </trans-unit>
        <trans-unit id="bb7bde9d84a579e8508019fb3c56978e57a1f52b" translate="yes" xml:space="preserve">
          <source>Hypothetical: you have to implement a rounding mechanism into a GUI
program. To alter the accuracy / precision of a result output simply 
change the caret format (i.e. within the brackets).  So that:</source>
          <target state="translated">仮説ですが、GUIプログラムに丸め機構を実装しなければなりません。結果出力の精度を変更するには、単にキャレット形式を変更します(すなわち、括弧内)。ということです。</target>
        </trans-unit>
        <trans-unit id="1016160673ec1d014154d12b2f34f71ebbeb09e3" translate="yes" xml:space="preserve">
          <source>I agree with the chosen answer to use &lt;code&gt;DecimalFormat&lt;/code&gt; --- or alternatively &lt;code&gt;BigDecimal&lt;/code&gt;.</source>
          <target state="translated">私は &lt;code&gt;DecimalFormat&lt;/code&gt; ---または &lt;code&gt;BigDecimal&lt;/code&gt; を使用するために選択された回答に同意します。</target>
        </trans-unit>
        <trans-unit id="bc070f27d4b62a053029e95fe0fc4eccafac317f" translate="yes" xml:space="preserve">
          <source>I also would like only significant digits to be displayed - i.e. there should not be any trailing zeroes.</source>
          <target state="translated">また、有効数字だけを表示してほしいと思います。</target>
        </trans-unit>
        <trans-unit id="2a0870f41697a3968262011df9000f982fdc1aad" translate="yes" xml:space="preserve">
          <source>I am posting the following code as a counter-example to all the answers in this thread and indeed all over StackOverflow (and elsewhere) that recommend multiplication followed by truncation followed by division. It is incumbent on advocates of this technique to explain why the following code produces the wrong output in over 92% of cases.</source>
          <target state="translated">このスレッドや StackOverflow (やその他の場所)で、乗算の後に切り捨ての後に除算を行うことを推奨しているすべての回答に対する反例として、以下のコードを投稿します。このテクニックを支持する人たちは、以下のコードがなぜ 92% 以上の場合に間違った出力を生成するのかを説明する必要があります。</target>
        </trans-unit>
        <trans-unit id="8e58c53c32829f245fe2cfeb49af6710173697c7" translate="yes" xml:space="preserve">
          <source>I came here just wanting a simple answer on how to round a number. This is a supplemental answer to provide that.</source>
          <target state="translated">私は単純に数字の丸め方の答えが欲しくて ここに来ました それを提供するための補足的な回答です。</target>
        </trans-unit>
        <trans-unit id="d6649c1b1a83dae75d1d6875241da65520e90d32" translate="yes" xml:space="preserve">
          <source>I do use BigDecimal for calculations, but bear in mind it is dependent on the size of
numbers you're dealing with.  In most of my implementations, I find parsing from double or
integer to Long is sufficient enough for very large number calculations.</source>
          <target state="translated">私は計算に BigDecimal を使用していますが、扱う数値の大きさに依存することを覚えておいてください。私の実装のほとんどでは、非常に大きな数の計算には double や integer から Long へのパースで十分だと感じています。</target>
        </trans-unit>
        <trans-unit id="f822a20fe4e34c783365fa306c4110b15beea656" translate="yes" xml:space="preserve">
          <source>I know one method of doing this is to use the &lt;code&gt;String.format&lt;/code&gt; method:</source>
          <target state="translated">これを行う1つの方法は、 &lt;code&gt;String.format&lt;/code&gt; メソッドを使用することです 。</target>
        </trans-unit>
        <trans-unit id="a51fee6efb767fb1a5d5c4e6df30cfa04282d4e6" translate="yes" xml:space="preserve">
          <source>I would add that this method is very good at providing an actual
numeric, rounding mechanism - not only visually, but also when processing.</source>
          <target state="translated">この方法は、実際の数値、丸めの仕組みを提供するのに非常に優れていることを付け加えたいと思います-視覚的にだけでなく、処理するときにも。</target>
        </trans-unit>
        <trans-unit id="8bb95432f9793b9c54b240628c5e9e0d865f552e" translate="yes" xml:space="preserve">
          <source>If you need large decimal places value, you can use BigDecimal instead. Anyways &lt;code&gt;.0&lt;/code&gt; is important. Without it the rounding of 0.33333d5 return 0.33333 and only 9 digits are allows. The second function without &lt;code&gt;.0&lt;/code&gt; has problems with 0.30000 return 0.30000000000000004.</source>
          <target state="translated">小数点以下の桁数の値が必要な場合は、代わりにBigDecimalを使用できます。 とにかく &lt;code&gt;.0&lt;/code&gt; は重要です。 これがないと、0.33333d5の丸めは0.33333を返し、9桁しか使用できません。 &lt;code&gt;.0&lt;/code&gt; のない2番目の関数には、0.30000が0.30000000000000004を返すという問題があります。</target>
        </trans-unit>
        <trans-unit id="ca9cee5995bf1fbb05e538266b5c505b1255e58f" translate="yes" xml:space="preserve">
          <source>If you really want decimal numbers for calculation (and not only for output), do not use a binary-based floating point format like double.</source>
          <target state="translated">本当に計算用の10進数が欲しいのであれば(出力用だけでなく)、doubleのような2進数ベースの浮動小数点フォーマットは使わないでください。</target>
        </trans-unit>
        <trans-unit id="59b3beef6db6e180d34521c7214e045c4d7fe959" translate="yes" xml:space="preserve">
          <source>If you're using &lt;code&gt;DecimalFormat&lt;/code&gt; to convert &lt;code&gt;double&lt;/code&gt; to &lt;code&gt;String&lt;/code&gt;, it's very straightforward:</source>
          <target state="translated">&lt;code&gt;DecimalFormat&lt;/code&gt; を使用して &lt;code&gt;double&lt;/code&gt; を &lt;code&gt;String&lt;/code&gt; に変換している場合、それは非常に簡単です。</target>
        </trans-unit>
        <trans-unit id="3993562e5e396270d29574d3f5aa171ef954e991" translate="yes" xml:space="preserve">
          <source>If you're using a technology that has a minimal JDK.  Here's a way without any Java libs:</source>
          <target state="translated">最低限のJDKを持っている技術を使っているのであれば Javaのlibを一切使わない方法を紹介します。</target>
        </trans-unit>
        <trans-unit id="813ed4d70e8d6abf3fa17aecb7f432ac6c12f2b0" translate="yes" xml:space="preserve">
          <source>In fact, I've
recently used parsed-to-Long to get accurate representations (as opposed to hex results)
in a GUI for numbers as big as ################################# characters (as an 
example).</source>
          <target state="translated">実際、私は最近、(例として)#####################のような大きな数字をGUIで正確に表現するために(16進数の結果とは対照的に)Parsered-to-Longを使用しています。</target>
        </trans-unit>
        <trans-unit id="ef69761016065df342a41f1ba61cbdee1af2e52f" translate="yes" xml:space="preserve">
          <source>In general, rounding is done by scaling: &lt;code&gt;round(num / p) * p&lt;/code&gt;</source>
          <target state="translated">一般的に、丸めはスケーリングによって行われます： &lt;code&gt;round(num / p) * p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a22628f448e48449b4cbd2dcc834bd641e538d25" translate="yes" xml:space="preserve">
          <source>Just in case someone still needs help with this. This solution works perfectly for me.</source>
          <target state="translated">誰かがまだこれで助けを必要としている場合に備えて。このソリューションは私にとって完璧に機能します。</target>
        </trans-unit>
        <trans-unit id="57c2383f2b5e00a3b3b4959445e4ce953597c3f8" translate="yes" xml:space="preserve">
          <source>Keep in mind that String.format() and DecimalFormat produce string using default Locale. So they may write formatted number with dot or comma as a separator between integer and decimal parts. To make sure that rounded String is in the format you want use java.text.NumberFormat as so:</source>
          <target state="translated">String.format()とDecimalFormatはデフォルトのロケールを使って文字列を生成することに注意してください。そのため、整数部と小数部の間の区切りとしてドットやカンマを使ってフォーマットされた数値を書くことがあります。丸められた文字列が希望する形式であることを確認するには、java.text.NumberFormatを次のように使用します。</target>
        </trans-unit>
        <trans-unit id="699a1ef8099139c81268f5f405b8f0f4c46b2e96" translate="yes" xml:space="preserve">
          <source>Numbers are rounded to the nearest whole number. A &lt;code&gt;.5&lt;/code&gt; value is rounded up. If you need different rounding behavior than that, you can use one of the other &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/lang/Math.html&quot;&gt;Math&lt;/a&gt; functions. See the comparison below.</source>
          <target state="translated">数値は最も近い整数に丸められます。 &lt;code&gt;.5&lt;/code&gt; の値は切り上げられます。 それとは異なる丸め動作が必要な場合は、他のいずれかの&lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/lang/Math.html&quot;&gt;数学&lt;/a&gt;関数を使用できます。 以下の比較をご覧ください。</target>
        </trans-unit>
        <trans-unit id="f579c523960af1aec824c6fdc57af6d4abd76a1f" translate="yes" xml:space="preserve">
          <source>OR</source>
          <target state="translated">OR</target>
        </trans-unit>
        <trans-unit id="49f49b27074cf3f26b0c8875804028f46bf61ac6" translate="yes" xml:space="preserve">
          <source>Output of this program:</source>
          <target state="translated">このプログラムの出力。</target>
        </trans-unit>
        <trans-unit id="5039f5432d56d1e13f80715db5aca88a2c6282b2" translate="yes" xml:space="preserve">
          <source>Please read &lt;strong&gt;Update&lt;/strong&gt; below first!</source>
          <target state="translated">まず下の&lt;strong&gt;更新を&lt;/strong&gt;読んでください！</target>
        </trans-unit>
        <trans-unit id="0fbdea6269aecef5fa9fdaf328268cbf751985ec" translate="yes" xml:space="preserve">
          <source>Real's Java How-to &lt;a href=&quot;http://www.rgagnon.com/javadetails/java-0016.html&quot;&gt;posts&lt;/a&gt; this solution, which is also compatible for versions before Java 1.6.</source>
          <target state="translated">RealのJava How-toがこのソリューションを&lt;a href=&quot;http://www.rgagnon.com/javadetails/java-0016.html&quot;&gt;投稿&lt;/a&gt;します。これは、Java 1.6より前のバージョンでも互換性があります。</target>
        </trans-unit>
        <trans-unit id="617736e6e1429ee61ad9451ae4d7b278e27f4aab" translate="yes" xml:space="preserve">
          <source>Refer: &lt;a href=&quot;http://www.javabeat.net/precise-rounding-of-decimals-using-rounding-mode-enumeration/&quot;&gt;http://www.javabeat.net/precise-rounding-of-decimals-using-rounding-mode-enumeration/&lt;/a&gt;</source>
          <target state="translated">参照： &lt;a href=&quot;http://www.javabeat.net/precise-rounding-of-decimals-using-rounding-mode-enumeration/&quot;&gt;http&lt;/a&gt; : //www.javabeat.net/precise-rounding-of-decimals-using-rounding-mode-enumeration/</target>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="9d7d4e92c686c95f74062fdb56c346325d223bac" translate="yes" xml:space="preserve">
          <source>Rounding mode to round towards &quot;nearest neighbor&quot; unless both
  neighbors are equidistant, in which case round up.</source>
          <target state="translated">両方の隣人が等距離でない限り、&quot;最も近い隣人 &quot;に向かってラウンドする丸めモード。</target>
        </trans-unit>
        <trans-unit id="4685444141d2c8a4bc01b6c70d4c7e32098bb041" translate="yes" xml:space="preserve">
          <source>Sample program:</source>
          <target state="translated">サンプルプログラム。</target>
        </trans-unit>
        <trans-unit id="b3aa1e5752237278e1e5d2196cfa403d181e09b1" translate="yes" xml:space="preserve">
          <source>See
&lt;a href=&quot;https://github.com/tools4j/decimal4j/wiki/DoubleRounder-Utility&quot;&gt;https://github.com/tools4j/decimal4j/wiki/DoubleRounder-Utility&lt;/a&gt;</source>
          <target state="translated">See
&lt;a href=&quot;https://github.com/tools4j/decimal4j/wiki/DoubleRounder-Utility&quot;&gt;https://github.com/tools4j/decimal4j/wiki/DoubleRounder-Utility&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b7c036e676470a3ae2e2886875d9e189ba8ad678" translate="yes" xml:space="preserve">
          <source>See also, &lt;a href=&quot;https://stackoverflow.com/a/22186845/212950&quot;&gt;https://stackoverflow.com/a/22186845/212950&lt;/a&gt;
Thanks to &lt;a href=&quot;https://stackoverflow.com/users/2984077/jpdymond&quot;&gt;jpdymond&lt;/a&gt; for offering this.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/22186845/212950&quot;&gt;https://stackoverflow.com/a/22186845/212950&lt;/a&gt;も参照してください。これを提供してくれた&lt;a href=&quot;https://stackoverflow.com/users/2984077/jpdymond&quot;&gt;jpdymond&lt;/a&gt;に感謝します 。</target>
        </trans-unit>
        <trans-unit id="9dfb1a168c168173dc39ee347135b88e4d107763" translate="yes" xml:space="preserve">
          <source>See: &lt;a href=&quot;http://commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math3/util/Precision.html&quot;&gt;http://commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math3/util/Precision.html&lt;/a&gt;</source>
          <target state="translated">参照： &lt;a href=&quot;http://commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math3/util/Precision.html&quot;&gt;http&lt;/a&gt; : //commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math3/util/Precision.html</target>
        </trans-unit>
        <trans-unit id="435c6c0482cfd1a18690747fc07ef53adb8ab354" translate="yes" xml:space="preserve">
          <source>Since I found no complete answer on this theme I've put together a class that should handle this properly, with support for:</source>
          <target state="translated">このテーマでは完全な答えが見つからなかったので、これをきちんと処理するためのクラスをサポート付きでまとめてみました。</target>
        </trans-unit>
        <trans-unit id="b220eddc131b29cf6a60e1ce86ca5b45dd6b5e0a" translate="yes" xml:space="preserve">
          <source>So after reading most of the answers, I realized most of them won't be precise, in fact using &lt;code&gt;BigDecimal&lt;/code&gt; seems like the best choice, but if you don't understand how the &lt;code&gt;RoundingMode&lt;/code&gt; works, you will inevitable lose precision. I figured this out when working with big numbers in a project and thought it could help others having trouble rounding numbers. For example.</source>
          <target state="translated">したがって、ほとんどの回答を読んだ後、それらのほとんどが正確ではないことに気付きました。実際には &lt;code&gt;BigDecimal&lt;/code&gt; を使用するのが最良の選択のように見えますが、 &lt;code&gt;RoundingMode&lt;/code&gt; の仕組みを理解していないと、必然的に精度が失われます。 私はプロジェクトで大きな数を扱うときにこれを理解し、それが他の人が数を丸める際の問題を解決するのに役立つと考えました。 例えば。</target>
        </trans-unit>
        <trans-unit id="2f076fa72b0c1e4b496f0dbaae174ed2d5e32d33" translate="yes" xml:space="preserve">
          <source>So essentially, the beauty of DecimalFormat is that it simultaneously handles the string 
appearance - as well as the level of rounding precision set. Ergo: you 
get two benefits for the price of one code implementation. ;)</source>
          <target state="translated">つまり、基本的にDecimalFormatの利点は、文字列の外観と丸め精度のレベルを同時に処理できることです。つまり、1つのコード実装の値段で2つの利点を得ることができるのです。)</target>
        </trans-unit>
        <trans-unit id="82437e73582996ab5e0733d171ad0854ec6d9a4a" translate="yes" xml:space="preserve">
          <source>So knowing this, we realized that we won't be getting an exact rounding, unless we want to round towards &lt;em&gt;nearest neighbor&lt;/em&gt;. So, to accomplish an adequate round, we would need to loop from the &lt;code&gt;n-1&lt;/code&gt; decimal towards the desired decimals digits. For example.</source>
          <target state="translated">これを知って、 &lt;em&gt;最も近い隣に&lt;/em&gt;向かって丸めたいのでなければ、正確な丸めが得られないことに気づきました。 したがって、適切なラウンドを達成するには、 &lt;code&gt;n-1&lt;/code&gt; の 10進数から目的の10進数の桁に向かってループする必要があります。 例えば。</target>
        </trans-unit>
        <trans-unit id="e76011ef730e99e46d7bf791668b8fb84e5933c9" translate="yes" xml:space="preserve">
          <source>Suppose you have</source>
          <target state="translated">を持っているとします。</target>
        </trans-unit>
        <trans-unit id="7ae503a3bf24f516aeee7921220b8cdbe935ee51" translate="yes" xml:space="preserve">
          <source>That's for 5 digits precision. The number of zeros indicate the number of decimals.</source>
          <target state="translated">それは5桁の精度のためです。ゼロの数は小数の数を示しています。</target>
        </trans-unit>
        <trans-unit id="7acafc57906e43b71b12133d9f2dfb8f883f78e0" translate="yes" xml:space="preserve">
          <source>The code snippet below shows how to display n digits.  The trick is to set variable pp to 1 followed by n zeros.  In the example below, variable pp value has 5 zeros, so 5 digits will be displayed.</source>
          <target state="translated">以下のコードスニペットは、n桁の数字を表示する方法を示しています。コツとしては、変数ppに1とn個のゼロを設定することです。下の例では、変数ppの値には5つのゼロがあるので、5桁の数字が表示されます。</target>
        </trans-unit>
        <trans-unit id="373c04cbbf15df2e9106189027003077b88b8f74" translate="yes" xml:space="preserve">
          <source>The example is taken from Farenda - &lt;a href=&quot;http://farenda.com/java/java-format-double-2-decimal-places/&quot;&gt;how to convert double to String correctly&lt;/a&gt;.</source>
          <target state="translated">この例は、Farenda- &lt;a href=&quot;http://farenda.com/java/java-format-double-2-decimal-places/&quot;&gt;doubleをStringに正しく変換する方法&lt;/a&gt;から取られました 。</target>
        </trans-unit>
        <trans-unit id="0dece382c4f59eb72a6bf73e13bf55ea55888ca5" translate="yes" xml:space="preserve">
          <source>The internal implemetation of this method is:</source>
          <target state="translated">このメソッドの内部実装は</target>
        </trans-unit>
        <trans-unit id="9300667e4bcb60e21038f3c40079ee9f4cd03835" translate="yes" xml:space="preserve">
          <source>The most common case is to use &lt;code&gt;Math.round()&lt;/code&gt;.</source>
          <target state="translated">最も一般的なケースは、 &lt;code&gt;Math.round()&lt;/code&gt; を使用することです 。</target>
        </trans-unit>
        <trans-unit id="d0a216a0d5dcbe57689d80065e9ebb794aa98fbc" translate="yes" xml:space="preserve">
          <source>The problem can be circumvented with a double rounding step to a higher precision first, but it is complicated and I am not going into the details here</source>
          <target state="translated">この問題は、最初に二重丸めのステップでより高い精度で回避することができますが、それは複雑なので、ここでは詳細には触れません。</target>
        </trans-unit>
        <trans-unit id="7328f216ec11f26899cae2e6b580b4aa8c4252ae" translate="yes" xml:space="preserve">
          <source>There are several &lt;code&gt;RoundingMode&lt;/code&gt; enum values to select from, depending upon the behaviour you require.</source>
          <target state="translated">必要な動作に応じて、いくつかの &lt;code&gt;RoundingMode&lt;/code&gt; 列挙値から選択できます。</target>
        </trans-unit>
        <trans-unit id="0b26e32c96a1204ddf3ccb7dc426b7f3d0b7b39c" translate="yes" xml:space="preserve">
          <source>This behaviour is very similar to that of the &lt;code&gt;BigDecimal(double)&lt;/code&gt; constructor (but not to &lt;code&gt;valueOf(double)&lt;/code&gt; which uses the string constructor).</source>
          <target state="translated">この動作は、 &lt;code&gt;BigDecimal(double)&lt;/code&gt; コンストラクターの動作と非常に似ています（ただし、文字列コンストラクターを使用する &lt;code&gt;valueOf(double)&lt;/code&gt; の動作とは異なります）。</target>
        </trans-unit>
        <trans-unit id="c746dbdfb142c756b65b2088b688baaadef0bbc7" translate="yes" xml:space="preserve">
          <source>This is similar to round in that decimal values round to the closest integer. However, unlike &lt;code&gt;round&lt;/code&gt;, &lt;code&gt;.5&lt;/code&gt; values round to the even integer.  This method returns a &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="translated">これは、10進値が最も近い整数に丸められるという点で、丸めに似ています。 ただし、 &lt;code&gt;round&lt;/code&gt; とは異なり、 &lt;code&gt;.5&lt;/code&gt; の値は偶数の整数に丸められます。 このメソッドは &lt;code&gt;double&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5d223d6843a2db01219034bd85a3e6da6b601be0" translate="yes" xml:space="preserve">
          <source>This will end up giving us the expected output, which would be &lt;code&gt;1363.28&lt;/code&gt;.</source>
          <target state="translated">これにより、期待される出力が &lt;code&gt;1363.28&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="2d46801e3a502c217ff6b30a9ead20f6fbec0358" translate="yes" xml:space="preserve">
          <source>To achieve this we can use this formatter:</source>
          <target state="translated">これを実現するために、このフォーマッタを使用することができます。</target>
        </trans-unit>
        <trans-unit id="961c59dbdaab1bf2d24f7a2fd7cd91f4c0b41044" translate="yes" xml:space="preserve">
          <source>To round down, subtract the accuracy.</source>
          <target state="translated">丸くするには、精度を引き算します。</target>
        </trans-unit>
        <trans-unit id="e3964b71598e17afe6484093e39c4df23d9886bf" translate="yes" xml:space="preserve">
          <source>Try this: org.apache.commons.math3.util.Precision.round(double x, int scale)</source>
          <target state="translated">試してみてください:org.apache.commons.math3.util.Precision.round(double x,int scale)</target>
        </trans-unit>
        <trans-unit id="b662affd2e0c8a96428679db86d38945b478f920" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html#setRoundingMode(java.math.RoundingMode)&quot;&gt;&lt;code&gt;setRoundingMode&lt;/code&gt;&lt;/a&gt;, set the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/RoundingMode.html&quot;&gt;&lt;code&gt;RoundingMode&lt;/code&gt;&lt;/a&gt; explicitly to handle your issue with the half-even round, then use the format pattern for your required output.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html#setRoundingMode(java.math.RoundingMode)&quot;&gt; &lt;code&gt;setRoundingMode&lt;/code&gt; を&lt;/a&gt;使用し、 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/RoundingMode.html&quot;&gt; &lt;code&gt;RoundingMode&lt;/code&gt; を&lt;/a&gt;明示的に設定して問題を半偶数ラウンドで処理し、必要な出力にフォーマットパターンを使用します。</target>
        </trans-unit>
        <trans-unit id="c0e450c2393de2a7db451fda526d192cbca7be2d" translate="yes" xml:space="preserve">
          <source>Use this method to get always two decimals:</source>
          <target state="translated">常に2つの小数を取得するには、このメソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="7e36f20182475ffc4767765e0732e95521b8ffa3" translate="yes" xml:space="preserve">
          <source>Using the method we can get this results:</source>
          <target state="translated">この方法を使うと、このような結果が得られます。</target>
        </trans-unit>
        <trans-unit id="0d769aa111bbdba8086e7cbe1f8f6cc06f763e2e" translate="yes" xml:space="preserve">
          <source>What I would like is a method to convert a double to a string which rounds using the half-up method - i.e. if the decimal to be rounded is 5, it always rounds up to the next number. This is the standard method of rounding most people expect in most situations.</source>
          <target state="translated">私が欲しいのは、ダブルをハーフアップ法で丸めて文字列に変換する方法です。これは、ほとんどの人がほとんどの状況で期待している丸めの標準的な方法です。</target>
        </trans-unit>
        <trans-unit id="f4ca6a4b5fda776925a7c75f8a573555e85118e7" translate="yes" xml:space="preserve">
          <source>What is the best way to achieve this in Java?</source>
          <target state="translated">Javaで実現するにはどうすればいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="972b3e0d7501505074925ea900d2a0a54ea9892f" translate="yes" xml:space="preserve">
          <source>Where &lt;em&gt;dp&lt;/em&gt; = decimal place you want,
and &lt;em&gt;value&lt;/em&gt; is a double.</source>
          <target state="translated">ここで、 &lt;em&gt;dp&lt;/em&gt; =希望する小数点以下の桁数で、 &lt;em&gt;値&lt;/em&gt;はdoubleです。</target>
        </trans-unit>
        <trans-unit id="e012bd2854254580514f478d3bb60e50df1d66cc" translate="yes" xml:space="preserve">
          <source>Will output</source>
          <target state="translated">出力されます。</target>
        </trans-unit>
        <trans-unit id="9768ea29026752e4efa66679ec600186b67ca2b9" translate="yes" xml:space="preserve">
          <source>Will print in English locale (no matter what your locale is):
  0.99
  123.57
  123.00</source>
          <target state="translated">英語ロケールで印刷されます(ロケールに関係なく):0.99 123.57 123.00</target>
        </trans-unit>
        <trans-unit id="79a86963d5daca82c56ec0af8464032984ecc118" translate="yes" xml:space="preserve">
          <source>You can also use the</source>
          <target state="translated">また、そのような場合には</target>
        </trans-unit>
        <trans-unit id="189e1d3137395d10986897ccc001e20fc7fceed6" translate="yes" xml:space="preserve">
          <source>You can use BigDecimal</source>
          <target state="translated">BigDecimalを使用することができます。</target>
        </trans-unit>
        <trans-unit id="50ecf8c03654dc61716c0c90830f5d8e577f1050" translate="yes" xml:space="preserve">
          <source>You can use the DecimalFormat class.</source>
          <target state="translated">DecimalFormatクラスを使用することができます。</target>
        </trans-unit>
        <trans-unit id="33642c0adaf033763fe76d86a33fc50ffaf1b5c5" translate="yes" xml:space="preserve">
          <source>You could use the following utility method-</source>
          <target state="translated">次のようなユーティリティーメソッドを使用することができます。</target>
        </trans-unit>
        <trans-unit id="26da33a818de4f5ab909e5ca811994231d780c96" translate="yes" xml:space="preserve">
          <source>You would expect to get &lt;code&gt;1363.28&lt;/code&gt; as an output, but you will end up with &lt;code&gt;1363.27&lt;/code&gt;, which is not expected, if you don't know what the &lt;code&gt;RoundingMode&lt;/code&gt; is doing. So looking into the &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/math/RoundingMode.html&quot;&gt;Oracle Docs&lt;/a&gt;, you will find the following description for &lt;code&gt;RoundingMode.HALF_UP&lt;/code&gt;.</source>
          <target state="translated">出力として &lt;code&gt;1363.28&lt;/code&gt; を取得することを期待しますが、 &lt;code&gt;RoundingMode&lt;/code&gt; が何をしているのかがわからない場合、予期しない &lt;code&gt;1363.27&lt;/code&gt; になります。 したがって、 &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/math/RoundingMode.html&quot;&gt;Oracle Docs&lt;/a&gt;を見ると、 &lt;code&gt;RoundingMode.HALF_UP&lt;/code&gt; に関する次の説明があります。</target>
        </trans-unit>
        <trans-unit id="608fe6be9c903d77bfd7cc325c39f618780d9bbd" translate="yes" xml:space="preserve">
          <source>[EDIT: also if the caret format is like so (&quot;#0.############&quot;) and you
enter a decimal, e.g. 3.1415926, for argument's sake, DecimalFormat
does not produce any garbage (e.g. trailing zeroes) and will return:
&lt;code&gt;3.1415926&lt;/code&gt; .. if you're that way inclined. Granted, it's a little verbose
for the liking of some dev's - but hey, it's got a low memory footprint
during processing and is very easy to implement.]</source>
          <target state="translated">[編集：キャレット形式がそうである場合（ &quot;＃0。############&quot;）に小数を入力すると（例：3.1415926）、引数のためにDecimalFormatはガベージを生成しません（例：末尾のゼロ）が返されます： &lt;code&gt;3.1415926&lt;/code&gt; ..傾斜している場合。 確かに、一部の開発者の好みには少し冗長ですが、処理中にメモリフットプリントが低く、実装が非常に簡単です。]</target>
        </trans-unit>
        <trans-unit id="613af80c25dfbc9ef75ce605280571b9a518d632" translate="yes" xml:space="preserve">
          <source>ceil</source>
          <target state="translated">ceil</target>
        </trans-unit>
        <trans-unit id="3684c9d3c05e7bee19e2728c6a5b2bbccf0cd9c7" translate="yes" xml:space="preserve">
          <source>floor</source>
          <target state="translated">floor</target>
        </trans-unit>
        <trans-unit id="fe98c8a113255ae1bf3ed0aa0c2eb99f16f74837" translate="yes" xml:space="preserve">
          <source>gives the output:</source>
          <target state="translated">が出力を与えます。</target>
        </trans-unit>
        <trans-unit id="44a75a7c936d7cc53886559df1b48a62ffcd22f0" translate="yes" xml:space="preserve">
          <source>here is my answer:</source>
          <target state="translated">これが私の答えです。</target>
        </trans-unit>
        <trans-unit id="585837f6244e30b72914a3ece74825e0e6f2ad22" translate="yes" xml:space="preserve">
          <source>or without BigDecimal</source>
          <target state="translated">またはBigDecimalなし</target>
        </trans-unit>
        <trans-unit id="1d9ad0addee82809659247e9008e6f9e82aa9000" translate="yes" xml:space="preserve">
          <source>or:</source>
          <target state="translated">or:</target>
        </trans-unit>
        <trans-unit id="9486cef00de9ecc8fdbd5e4c991f6d77bd681232" translate="yes" xml:space="preserve">
          <source>returns a &lt;code&gt; String &lt;/code&gt; with the desired output.</source>
          <target state="translated">目的の出力を持つ &lt;code&gt; String &lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="37b8dabf0b7bfae1c2eecb47a6afcd8bc92cc94c" translate="yes" xml:space="preserve">
          <source>returns:</source>
          <target state="translated">returns:</target>
        </trans-unit>
        <trans-unit id="5b8ef7192fe75d3e998925c2a6f950fa3bcbc5ba" translate="yes" xml:space="preserve">
          <source>rint</source>
          <target state="translated">rint</target>
        </trans-unit>
        <trans-unit id="f0590a6dd3663be108ff31f58d16b829a1284be6" translate="yes" xml:space="preserve">
          <source>round</source>
          <target state="translated">round</target>
        </trans-unit>
        <trans-unit id="564403f2736b3be7d078042d1bf5a794320d7993" translate="yes" xml:space="preserve">
          <source>to make sure you have the trailing 0's.</source>
          <target state="translated">で最後の0を確認してください。</target>
        </trans-unit>
        <trans-unit id="b9a4d336269dd6771b71e3ff95ac0f7719854c82" translate="yes" xml:space="preserve">
          <source>which is great, however it always displays numbers with 5 decimal places even if they are not significant:</source>
          <target state="translated">これは素晴らしいのですが、小数点以下5桁の数字が重要でなくても常に表示されます。</target>
        </trans-unit>
        <trans-unit id="9cef970864c306bd005e4f5bb7ea96c9ef80881d" translate="yes" xml:space="preserve">
          <source>will get you a &lt;code&gt;BigDecimal&lt;/code&gt;.  To get the string out of it, just call that &lt;code&gt;BigDecimal&lt;/code&gt;'s &lt;code&gt;toString&lt;/code&gt; method, or the &lt;code&gt;toPlainString&lt;/code&gt; method for Java 5+ for a plain format string.</source>
          <target state="translated">&lt;code&gt;BigDecimal&lt;/code&gt; を取得します。 文字列を取得するには、 &lt;code&gt;BigDecimal&lt;/code&gt; の &lt;code&gt;toString&lt;/code&gt; メソッドを呼び出すか、Java 5以降の場合は &lt;code&gt;toPlainString&lt;/code&gt; メソッドを呼び出して、プレーンな形式の文字列を取得します。</target>
        </trans-unit>
        <trans-unit id="a2048b21dbea50e2b999e38777aff3c3b8cc4f92" translate="yes" xml:space="preserve">
          <source>with both solutions &lt;code&gt;d == 9232.13&lt;/code&gt;</source>
          <target state="translated">両方のソリューションで &lt;code&gt;d == 9232.13&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="57161573ccaca2384e3af81b5e70cf6b6d0bdb20" translate="yes" xml:space="preserve">
          <source>would return as output: &lt;code&gt;0.912385&lt;/code&gt;</source>
          <target state="translated">出力として返されます： &lt;code&gt;0.912385&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9236983092fe2060263570074f63530563eeb1e2" translate="yes" xml:space="preserve">
          <source>would return as output: &lt;code&gt;0.91239&lt;/code&gt;</source>
          <target state="translated">出力として返されます： &lt;code&gt;0.91239&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e4fd1761839265a76c01b8754899f4ae02128aac" translate="yes" xml:space="preserve">
          <source>would return as output: &lt;code&gt;0.9124&lt;/code&gt;</source>
          <target state="translated">出力として返されます： &lt;code&gt;0.9124&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2cbfbe230eae72a4f85a6fc0e071213485692b3b" translate="yes" xml:space="preserve">
          <source>you can use &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">あなたは&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt; &lt;code&gt;BigDecimal&lt;/code&gt; &lt;/a&gt;を使うことができます</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
