<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/4685450">
    <body>
      <group id="4685450">
        <trans-unit id="83ca03fe1d75fd5700c66a6a6778846449f04e8a" translate="yes" xml:space="preserve">
          <source>(1/3) means Integer division, thats why you can not get decimal value from this division. To solve this problem use:</source>
          <target state="translated">(13)は整数の除算を意味します。この問題を解決するために使用します。</target>
        </trans-unit>
        <trans-unit id="13c829a0c029b2c71efa88015d62a1dd72a6c964" translate="yes" xml:space="preserve">
          <source>1 and 3 are integer contants and so Java does an integer division which's result is 0. If you want to write double constants you have to write &lt;code&gt;1.0&lt;/code&gt; and &lt;code&gt;3.0&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1と3は整数定数なので、Javaは整数除算を実行し、結果は0になります。二重定数を記述したい場合は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;1.0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;3.0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を記述する必要があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8df4aafa92d4d5d1c73fa0da94152dd40999b4f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;1/3&lt;/code&gt; uses integer division as both sides are integers.</source>
          <target state="translated">&lt;code&gt;1/3&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、両側が整数であるため、整数除算を使用します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="baaa2c0e143279b27b6dacba2736c772a9f50631" translate="yes" xml:space="preserve">
          <source>A simple working example is enough to prove this</source>
          <target state="translated">簡単な例を挙げれば、これを証明するのに十分です。</target>
        </trans-unit>
        <trans-unit id="1a4542f0a184a792bac13618252f332080fe9d26" translate="yes" xml:space="preserve">
          <source>A small example using Eclipse to show that even an addition of two &lt;code&gt;short&lt;/code&gt;s will not be that easy :</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Eclipseを使用して2つの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;short&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;追加しても&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それほど簡単ではないこと&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を示す小さな例&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c3e4ecd4d1599993fa5cfb874445271c0d3b1d1" translate="yes" xml:space="preserve">
          <source>Also, note that if &lt;em&gt;both&lt;/em&gt; operands (numbers) are given as floats; 3.0 and 1.0, or even just the &lt;em&gt;first&lt;/em&gt;, then floating-point arithmetic is used, giving you &lt;code&gt;0.333...&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;両方の&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オペランド（数値）が浮動小数点として指定され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ている場合に&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;も&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注意してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;3.0と1.0、または&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合でも&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、浮動小数点演算が使用され、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;0.333...&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が得られ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1143ef123ba581b8c839b0f8b8144caa503a97d8" translate="yes" xml:space="preserve">
          <source>An operation on only integers casts the result of the operation to an integer.</source>
          <target state="translated">整数のみに対する演算は、演算結果を整数にキャストします。</target>
        </trans-unit>
        <trans-unit id="9223e3823771b04837acdd363cbe975ad8fe3823" translate="yes" xml:space="preserve">
          <source>And an example is always the best way to translate the JLS ;)</source>
          <target state="translated">そして、JLS を翻訳するには、常に例が最良の方法です ;)</target>
        </trans-unit>
        <trans-unit id="22e5f7c582f7be1e686b0e2be36e78dd98f3c769" translate="yes" xml:space="preserve">
          <source>And the mix of both integer and floating value result in floating values as said</source>
          <target state="translated">そして、整数値と浮動小数点値の両方が混在していると、結果的に浮動小数点値になってしまいます。</target>
        </trans-unit>
        <trans-unit id="bcbbefc3b17aaa55178f2b37a98feaf58eeb1f57" translate="yes" xml:space="preserve">
          <source>As @Noldorin says, if both operators are integers, then integer division is used.</source>
          <target state="translated">noldorinさんがおっしゃるように、両方の演算子が整数であれば、整数除算が使われます。</target>
        </trans-unit>
        <trans-unit id="5ca4b084d70132b40628c1a9143cfa7ea2dedfd9" translate="yes" xml:space="preserve">
          <source>Because it treats 1 and 3 as integers, therefore rounding the result down to 0, so that it is an integer.</source>
          <target state="translated">1と3を整数として扱うので、結果を0に丸めると整数になります。</target>
        </trans-unit>
        <trans-unit id="bb74650a926444040d1c9d20cd4a5500051c1a91" translate="yes" xml:space="preserve">
          <source>Because you are doing integer division.</source>
          <target state="translated">整数の除算をしているからです。</target>
        </trans-unit>
        <trans-unit id="7d9db168fd46b5f8fe90b3a22923d78c7f00525d" translate="yes" xml:space="preserve">
          <source>Do &quot;double g=1.0/3.0;&quot; instead.</source>
          <target state="translated">代わりに「double g=1.03.0;」としてください。</target>
        </trans-unit>
        <trans-unit id="0d60db3234e5f1f5bedd14078c53a9cc2b4916fd" translate="yes" xml:space="preserve">
          <source>Explicitly cast it as a &lt;code&gt;double&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;明示的に&lt;/font&gt; &lt;code&gt;double&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;としてキャストする&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9649ad598ebdf718b10a574595a9779f4122280f" translate="yes" xml:space="preserve">
          <source>I was writing this code:</source>
          <target state="translated">このコードを書いていました。</target>
        </trans-unit>
        <trans-unit id="02acf376ecf4e8a1e8780ab95e6458f91b302cb3" translate="yes" xml:space="preserve">
          <source>If an integer operator other than a shift operator has at least one operand of type long, then the operation is carried out using 64-bit precision, and the result of the numerical operator is of type long. If the other operand is not long, it is first widened (&amp;sect;5.1.5) to type long by numeric promotion (&amp;sect;5.6).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シフト演算子以外の整数演算子に少なくとも1つのlong型のオペランドがある場合、演算は64ビット精度を使用して実行され、数値演算子の結果はlong型になります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他のオペランドがlongでない場合、最初に拡張され（&amp;sect;5.1.5）、数値の昇格（&amp;sect;5.6）によってlongと入力されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6659ebd94fd13557758032fd513924ea95c18d19" translate="yes" xml:space="preserve">
          <source>If any of the operators is a &lt;code&gt;double&lt;/code&gt; / &lt;code&gt;float&lt;/code&gt;, then floating point arithmetic will take place. But you'll have the same problem if you do that:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演算子のいずれかが&lt;/font&gt;&lt;/font&gt; &lt;code&gt;double&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; / &lt;/font&gt;&lt;/font&gt; &lt;code&gt;float&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合、浮動小数点演算が行われます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、これを行うと同じ問題が発生します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a44e7cf64c00b99c313e2186a2ad12f9d35c1859" translate="yes" xml:space="preserve">
          <source>If at least one of the operands to a binary operator is of floating-point type, then the operation is a floating-point operation, even if the other is integral.</source>
          <target state="translated">2値演算子に対するオペランドのうち少なくとも1つが浮動小数点型である場合、他のオペランドが積分であっても、その演算は浮動小数点型の演算となります。</target>
        </trans-unit>
        <trans-unit id="1912977f1a23feb378ee1cc1c4f7b85f1b3154cc" translate="yes" xml:space="preserve">
          <source>If at least one of the operands to a numerical operator is of type double, then the operation is carried out using 64-bit floating-point arithmetic, and the result of the numerical operator is a value of type double. If the other operand is not a double, it is first widened (&amp;sect;5.1.5) to type double by numeric promotion (&amp;sect;5.6).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数値演算子の少なくとも1つのオペランドがdouble型の場合、演算は64ビット浮動小数点演算を使用して実行され、数値演算子の結果はdouble型の値になります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他のオペランドがdoubleでない場合、最初に拡張され（&amp;sect;5.1.5）、数値による昇格（&amp;sect;5.6）によってdoubleと入力されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ac207176f1ec0d1ea3289e36c937789f122ab63a" translate="yes" xml:space="preserve">
          <source>If you are entering the values in the source code like your question, you can do &lt;code&gt;1.0/3&lt;/code&gt; ; the &lt;code&gt;1.0&lt;/code&gt; is a double.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;質問のようにソースコードに値を入力する場合は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;1.0/3&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;1.0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;倍です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2b525e811bebced061ac54941549a25c265305b1" translate="yes" xml:space="preserve">
          <source>If you get the values from elsewhere you can use &lt;code&gt;(double)&lt;/code&gt; to turn the &lt;code&gt;int&lt;/code&gt; into a &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他の場所から値を取得する場合、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(double)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;て&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;double&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変換&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c10a02c5e562f1743931b0cd366509bbf63d02ab" translate="yes" xml:space="preserve">
          <source>Int division: Why is the result of 1/3 == 0</source>
          <target state="translated">Int除算です。なぜ 13 ==0 の結果が 0 になるのか</target>
        </trans-unit>
        <trans-unit id="ca04b4f1a8e2cc2530097763117db9931074bfbf" translate="yes" xml:space="preserve">
          <source>Integer division of course returns the true result of division rounded towards zero. The result of &lt;code&gt;0.333...&lt;/code&gt; is thus rounded down to 0 here. (Note that the processor doesn't actually do any rounding, but you can think of it that way still.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もちろん整数除算は、ゼロに向かって丸められた除算の真の結果を返します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;0.333...&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の結果は、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここでは0に切り捨てられます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（プロセッサは実際には丸めを行いませんが、そのように考えることもできます。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6056d6e76d06d0b7afb26f897c2aea54bbf5f4d5" translate="yes" xml:space="preserve">
          <source>Integer division returns integer.</source>
          <target state="translated">整数の除算は整数を返します。</target>
        </trans-unit>
        <trans-unit id="d70689be0d673ab3445c0f4feac5357d190a49ce" translate="yes" xml:space="preserve">
          <source>It varies on the implementation of the language, but Wikipedia has a fairly comprehensive view, and it does talk about &lt;em&gt;coercion&lt;/em&gt; as well, which is a pivotal piece of information in answering your question.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;言語の実装によって異なりますが、ウィキペディアにはかなり包括的な見解があり、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;強制&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;への回答も含まれています。これは、質問への回答において極めて重要な情報です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7ea08ecb3ff21245e7bb142ddbf5ff505c088de3" translate="yes" xml:space="preserve">
          <source>Make the 1 a float and float division will be used</source>
          <target state="translated">1をfloatとfloatの分割が使用されます。</target>
        </trans-unit>
        <trans-unit id="2fe180da70dacdf0d443850765aa127e70804db5" translate="yes" xml:space="preserve">
          <source>Many others have failed to point out the real issue:</source>
          <target state="translated">他の多くの人は、本当の問題を指摘できていない。</target>
        </trans-unit>
        <trans-unit id="ce6de639a624113b95619c443727d5aea0411e5c" translate="yes" xml:space="preserve">
          <source>Otherwise, the operation is carried out using 32-bit precision, and the result of the numerical operator is of type int. If either operand is not an int, it is first widened to type int by numeric promotion.</source>
          <target state="translated">それ以外の場合は32ビット精度で演算が行われ、数値演算子の結果はint型になります。どちらかのオペランドがintでない場合は、最初に数値昇格によってint型に拡張されます。</target>
        </trans-unit>
        <trans-unit id="2ba0e99615b1c2f1613afb960553161ad439c871" translate="yes" xml:space="preserve">
          <source>Since both 1 and 3 are ints the result not rounded but it's truncated. So you ignore fractions and take only wholes.</source>
          <target state="translated">1と3は両方とも整数なので、結果は丸められていませんが、切り捨てられています。だから、分数は無視して、卸売だけを取る。</target>
        </trans-unit>
        <trans-unit id="26ee0116802893428267b1411cf5865b29204217" translate="yes" xml:space="preserve">
          <source>So the promotion is done on the float into double.</source>
          <target state="translated">ダブルにフロートで昇格するわけですね。</target>
        </trans-unit>
        <trans-unit id="11f08e7c2d459a55e571efc95d1c2edf5a5b6b75" translate="yes" xml:space="preserve">
          <source>The conversion in JAVA is quite simple but need some understanding. As explain in the JLS for &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.2.2&quot;&gt;integer operations&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JAVAでの変換は非常に簡単ですが、ある程度の理解が必要です。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.2.2&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;整数演算&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のJLSで説明するように&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aba50470714af541b304d1e5e82c1355529b6d65" translate="yes" xml:space="preserve">
          <source>The easiest solution is to just do this</source>
          <target state="translated">最も簡単な解決策は、次のようにすることです。</target>
        </trans-unit>
        <trans-unit id="3090daf4ca83afab5f975a1f7e0eb26344ed3e8a" translate="yes" xml:space="preserve">
          <source>The reason is that there is an implicit cast done here, this will be execute like</source>
          <target state="translated">理由は、ここでは暗黙のキャストが行われているため、これは次のように実行されます。</target>
        </trans-unit>
        <trans-unit id="3427b7fbcbd6e06e628aa69019da17abe74c0e38" translate="yes" xml:space="preserve">
          <source>The result 0.33333333 can't be represented as an integer, therefore only the integer part (0) is assigned to the result.</source>
          <target state="translated">結果0.3333333は整数として表現できないので、整数部(0)のみが代入されます。</target>
        </trans-unit>
        <trans-unit id="3065fa5b0532d0e7ef52e52c4209f5ac5df04424" translate="yes" xml:space="preserve">
          <source>The result is 0.  Why is this, and how do I solve this problem?</source>
          <target state="translated">結果は0になるのですが、これはなぜなのか、どうすれば解決できるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="4e64f426b0b16a2a23db646072e12487dbf88850" translate="yes" xml:space="preserve">
          <source>The same is true for the &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.2.4&quot;&gt;floating point operators&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じことが&lt;/font&gt;&lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.2.4&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;浮動小数点演算子に&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;も当てはまります&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="420cc97c08d9c438f98e694692133d3478355dad" translate="yes" xml:space="preserve">
          <source>The two operands (1 and 3) are integers, therefore integer arithmetic (division here) is used. Declaring the result variable as double just causes an implicit conversion to occur &lt;em&gt;after division&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2つのオペランド（1と3）は整数であるため、整数演算（ここでは除算）が使用されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;結果変数をdoubleとして宣言すると&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、除算後に&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;暗黙の変換が発生します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="803de18271304fb6e19ec706acf7f3de52210ee6" translate="yes" xml:space="preserve">
          <source>This happens because Java uses the integer division operation for &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; since you entered them as integer constants.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、Javaが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;整数定数として入力した&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;3&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;整数除算演算を使用するために発生し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ee937d585a122ea68cde4973bc7f6ef2a27e1adf" translate="yes" xml:space="preserve">
          <source>This is true for binary operators but not for &quot;Assignment Operators&quot; like &lt;code&gt;+=&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、2項演算子には当てはまりますが、&lt;/font&gt; &lt;code&gt;+=&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ような「代入演算子」には当てはまりません。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ecc9f98093e956f83e2ab0b3748d0c4f56c49e99" translate="yes" xml:space="preserve">
          <source>This necessarily means that floating point results, that &lt;em&gt;could&lt;/em&gt; be displayed as an integer, will be truncated (lop off the decimal part).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、整数として表示される&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可能性の&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある浮動小数点の結果&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が切り捨てられることを意味します（小数部を切り捨てます）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7f08a97169145dbed19b0b2891d63008699f7f5e" translate="yes" xml:space="preserve">
          <source>This will required a casting with a possible loss of precision.</source>
          <target state="translated">これでは精度が落ちる可能性のある鋳造が必要になります。</target>
        </trans-unit>
        <trans-unit id="0d8c4f27b990643d95d356ded253b0a6acce4258" translate="yes" xml:space="preserve">
          <source>To avoid this have at least one of your numbers 1 or 3 as a decimal form 1.0 and/or 3.0.</source>
          <target state="translated">これを避けるためには、あなたの数1または3のうち少なくとも1つを10進数形式の1.0と3.0として持っています。</target>
        </trans-unit>
        <trans-unit id="c6f5e7a4d7efd21c714c2f91db7d03636dc2b386" translate="yes" xml:space="preserve">
          <source>To get the result you are looking for, explicitly tell java that the numbers are doubles like so:</source>
          <target state="translated">求めている結果を得るためには、次のように数値が倍数であることを明示的にjavaに伝えます。</target>
        </trans-unit>
        <trans-unit id="200267f03d21574410e2a83bbc223379c81ffdc5" translate="yes" xml:space="preserve">
          <source>Try this out:</source>
          <target state="translated">これを試してみてください。</target>
        </trans-unit>
        <trans-unit id="3d561848dfb0d7f3352a95784b002f858486f82d" translate="yes" xml:space="preserve">
          <source>What is &lt;em&gt;casting&lt;/em&gt; (typecasting / type conversion) you ask?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;何をしている&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キャスト&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と尋ねる（型キャスト/型変換）？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="055d69208ae9f5b6064381d001547001c72d24f4" translate="yes" xml:space="preserve">
          <source>What this does, since you didn't enter 1.0 / 3.0, is let you manually convert it to data type double since Java assumed it was Integer division, and it would do it even if it meant narrowing the conversion. This is what is called a cast operator.</source>
          <target state="translated">これが何をするかというと、1.0 3.0を入力していないので、Javaが整数除算だと仮定していたので、手動でデータ型doubleに変換させて、変換を狭めることを意味していたとしても、それをしてくれました。これがキャスト演算子と呼ばれるものです。</target>
        </trans-unit>
        <trans-unit id="a730dbf200cd4355694ac1815494422c542fbc30" translate="yes" xml:space="preserve">
          <source>You need at least one of them to be &lt;code&gt;float&lt;/code&gt; or &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;少なくとも1つは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;float&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;double&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;である必要があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="ebd9deca7a1dfee62f7034faa7be6bb751eaf571" translate="yes" xml:space="preserve">
          <source>you should use</source>
          <target state="translated">使うべき</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
