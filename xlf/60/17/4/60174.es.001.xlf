<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/60174">
    <body>
      <group id="60174">
        <trans-unit id="28db4e540747091b7a00b15b115a95e87c6fb18f" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;$conn&lt;/code&gt; is a &lt;code&gt;PDO&lt;/code&gt; object)</source>
          <target state="translated">( &lt;code&gt;$conn&lt;/code&gt; es un objeto &lt;code&gt;PDO&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="7df4be97ec047ed1a29912298ea3b0fcbc7ed380" translate="yes" xml:space="preserve">
          <source>--- &lt;strong&gt;MySQLi&lt;/strong&gt;</source>
          <target state="translated">--- &lt;strong&gt;MySQLi&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="566ea8d89155c02c58ff63984dcd175883a55e5f" translate="yes" xml:space="preserve">
          <source>---- &lt;strong&gt;PDO&lt;/strong&gt;</source>
          <target state="translated">---- &lt;strong&gt;PDO&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="16d6eec24d215237193fd125401ea3f72038ce7c" translate="yes" xml:space="preserve">
          <source>----- Named placeholders</source>
          <target state="translated">-----Nombrados marcadores de posición</target>
        </trans-unit>
        <trans-unit id="6f87ec96d5b86996a40f5259f92fc7fad65ced43" translate="yes" xml:space="preserve">
          <source>----- No placeholders - ripe for SQL injection! &lt;strong&gt;It's bad&lt;/strong&gt;</source>
          <target state="translated">----- Sin marcadores de posici&amp;oacute;n: &amp;iexcl;listo para la inyecci&amp;oacute;n de SQL! &lt;strong&gt;Es malo&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f9fcff74f12914fdb8c051ea2e336776fd176f90" translate="yes" xml:space="preserve">
          <source>----- Unnamed placeholders</source>
          <target state="translated">-----Marcadores de posición sin nombre</target>
        </trans-unit>
        <trans-unit id="c8f539c5cc020994d7d2752bb0266689882010b0" translate="yes" xml:space="preserve">
          <source>// Connect to MySQL</source>
          <target state="translated">/Conectar a MySQL</target>
        </trans-unit>
        <trans-unit id="210d7dde35cddea92280995918b6bfd938945cd2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.webappsec.org/projects/articles/091007.txt&quot;&gt;Source&lt;/a&gt;: &lt;em&gt;The Unexpected SQL Injection (When Escaping Is Not Enough)&lt;/em&gt;</source>
          <target state="translated">&lt;a href=&quot;http://www.webappsec.org/projects/articles/091007.txt&quot;&gt;Fuente&lt;/a&gt; : &lt;em&gt;La inyecci&amp;oacute;n SQL inesperada (cuando escapar no es suficiente)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fafbba6ac674ca8233b3bb137474220f54670c01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mysql_escape_string&lt;/code&gt; &amp;mdash; Escapes a string for use in a mysql_query</source>
          <target state="translated">&lt;code&gt;mysql_escape_string&lt;/code&gt; - Se escapa de una cadena para usar en un mysql_query</target>
        </trans-unit>
        <trans-unit id="2acf2cfec503ef763160d951705f3dcc3dbb00be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mysql_real_escape_string()&lt;/code&gt; is deprecated as of PHP 5.5.0. Use either mysqli or PDO.</source>
          <target state="translated">&lt;code&gt;mysql_real_escape_string()&lt;/code&gt; est&amp;aacute; en desuso a partir de PHP 5.5.0. Use mysqli o PDO.</target>
        </trans-unit>
        <trans-unit id="ac2812cda025d0222eb136ebe05af667375a9255" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mysql_real_escape_string&lt;/code&gt; takes a string that is going to be used in a MySQL query and return the same string with all SQL injection attempts safely escaped. Basically, it will replace those troublesome quotes(') a user might enter with a MySQL-safe substitute, an escaped quote \'.</source>
          <target state="translated">&lt;code&gt;mysql_real_escape_string&lt;/code&gt; toma una cadena que se utilizar&amp;aacute; en una consulta MySQL y devuelve la misma cadena con todos los intentos de inyecci&amp;oacute;n SQL escapados de forma segura. B&amp;aacute;sicamente, reemplazar&amp;aacute; esas comillas problem&amp;aacute;ticas (') que un usuario puede ingresar con un sustituto seguro de MySQL, una comilla escapada'.</target>
        </trans-unit>
        <trans-unit id="993cce94e6973d25742799e350d687c6d47eb565" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;http://www.tizag.com/mysqlTutorial/mysql-php-sql-injection.php&quot;&gt;What is SQL injection and how to prevent&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;http://www.tizag.com/mysqlTutorial/mysql-php-sql-injection.php&quot;&gt;&amp;iquest;Qu&amp;eacute; es la inyecci&amp;oacute;n SQL y c&amp;oacute;mo prevenirla?&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2eedc1ef7aa89311e0fab1b48d2dbf4f551aa710" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;https://docs.microsoft.com/en-gb/archive/blogs/brian_swan/whats-the-right-way-to-prevent-sql-injection-in-php-scripts&quot;&gt;Microsoft explanation of SQL injection and prevention in PHP&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://docs.microsoft.com/en-gb/archive/blogs/brian_swan/whats-the-right-way-to-prevent-sql-injection-in-php-scripts&quot;&gt;Explicaci&amp;oacute;n de Microsoft de la inyecci&amp;oacute;n y prevenci&amp;oacute;n de SQL en PHP&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f09a2090f97db4e53860ae5ab475445cb9ea655d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;https://php.net/manual/en/security.database.sql-injection.php&quot;&gt;PHP manual for SQL injection&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://php.net/manual/en/security.database.sql-injection.php&quot;&gt;Manual PHP para inyecci&amp;oacute;n SQL&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="12b6995e63bfc6f9fa8ec35b4a707089f01068f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;And please test every query to your database - it's a better way to prevent injection.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Y pruebe cada consulta en su base de datos: es una mejor manera de evitar la inyecci&amp;oacute;n.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="881c07549030945c2309cee9e2e2ac2c9261312f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Data filtering for (converting unsafe data to safe data)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Filtrado de datos para (convertir datos no seguros en datos seguros)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b74390d8460cdf00400fa1ae06a8df3cec12865" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated Warning:&lt;/strong&gt;
  This answer's sample code (like the question's sample code) uses PHP's &lt;code&gt;MySQL&lt;/code&gt; extension, which was deprecated in PHP 5.5.0 and removed entirely in PHP 7.0.0.</source>
          <target state="translated">&lt;strong&gt;Advertencia obsoleta:&lt;/strong&gt; el c&amp;oacute;digo de muestra de esta respuesta (como el c&amp;oacute;digo de muestra de la pregunta) utiliza la extensi&amp;oacute;n &lt;code&gt;MySQL&lt;/code&gt; de PHP, que fue obsoleta en PHP 5.5.0 y eliminada por completo en PHP 7.0.0.</target>
        </trans-unit>
        <trans-unit id="1051e53e86d6b39bb445cb5e011266551db0339e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated Warning&lt;/strong&gt;: The mysql extension is deprecated at this time. we recommend using the &lt;em&gt;PDO extension&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;Advertencia obsoleta&lt;/strong&gt; : la extensi&amp;oacute;n mysql est&amp;aacute; obsoleta en este momento. Recomendamos utilizar la &lt;em&gt;extensi&amp;oacute;n PDO&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5fbf4a00d6a882121a802d2725d98940aaaeb108" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Edit:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4168878b06eaa6917a0f012585506612f5054ea6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5dda06a174f7dd5e74c8eabf80656879e8b1f296" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I want a single column&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Quiero una sola columna&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="80c1cc3b7b50e8fd2aea1b4ca0b3b75408434e8e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I want a single row result&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Quiero un solo resultado de fila&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="024c9614f439c4a7911a75baa6232c91c34e16cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I want an array of results&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Quiero una serie de resultados.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1ff4dc6dc4cb39edde6e4cb977be5a4e00bfee01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I want an array(key =&amp;gt; value) results (i.e. for making a selectbox)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Quiero una matriz (clave =&amp;gt; valor) resultados (es decir, para hacer un cuadro de selecci&amp;oacute;n)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8052e9a559828f926aaf4cb0e3c1b2ca31046e95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IMPORTANT&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;IMPORTANT&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cde4be58e6e2d465148f3e98b5727244f7a72453" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Libraries examples:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ejemplos de bibliotecas:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e446408dbdb6997b7424912b8c1d79a1c5ab993b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MySQLi:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;MySQLi:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f23d6bf55f17ae053d22c5b227546c45610ff250" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MySQLi&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;MySQLi&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c585f3da07abdc2dcc052b0a31c75b51345fff8f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; you must be connected to the database to use this function!</source>
          <target state="translated">&lt;strong&gt;NOTA:&lt;/strong&gt; &amp;iexcl;debe estar conectado a la base de datos para usar esta funci&amp;oacute;n!</target>
        </trans-unit>
        <trans-unit id="a67dc084aafad94a19d93929a672c4d8c26d1f06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;P.S&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;P.S&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="b10a86d4bbe9f0b1901a8bde6b52d5685220b62b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PDO:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;PDO:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a3a71e18b47cb4549c122f88532d562818113692" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Query Log:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Registro de consultas:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b3b772547fb5634e5dbe11cab975563db5faff2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RULE: do not create one database user for all privileges. For all SQL operations, you can create your scheme like (deluser, selectuser, updateuser) as usernames for easy usage.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;REGLA: no cree un usuario de base de datos para todos los privilegios.&lt;/strong&gt; &lt;strong&gt;Para todas las operaciones de SQL, puede crear su esquema como (deluser, selectuser, updateuser) como nombres de usuario para facilitar su uso.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1e3668d2a13faa5a6d222104bab0c82a2d2b1525" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Security Warning&lt;/strong&gt;: This answer is not in line with security best practices. &lt;a href=&quot;https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide&quot;&gt;Escaping is inadequate to prevent SQL injection&lt;/a&gt;, use &lt;em&gt;prepared statements&lt;/em&gt; instead. Use the strategy outlined below at your own risk. (Also, &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; was removed in PHP 7.)</source>
          <target state="translated">&lt;strong&gt;Advertencia de seguridad&lt;/strong&gt; : esta respuesta no est&amp;aacute; en l&amp;iacute;nea con las mejores pr&amp;aacute;cticas de seguridad. &lt;a href=&quot;https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide&quot;&gt;Escapar es inadecuado para evitar la inyecci&amp;oacute;n de SQL&lt;/a&gt; , utilice en su lugar &lt;em&gt;declaraciones preparadas&lt;/em&gt; . Utilice la estrategia descrita a continuaci&amp;oacute;n bajo su propio riesgo. (Adem&amp;aacute;s, &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; se elimin&amp;oacute; en PHP 7.)</target>
        </trans-unit>
        <trans-unit id="69b9b6580cb9915e7a2d71a41230225b3ca5ffb8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UNHEX()&lt;/strong&gt; works on &lt;strong&gt;any&lt;/strong&gt; column; you do not have to worry about the empty string.</source>
          <target state="translated">&lt;strong&gt;UNHEX ()&lt;/strong&gt; funciona en &lt;strong&gt;cualquier&lt;/strong&gt; columna; No tiene que preocuparse por la cadena vac&amp;iacute;a.</target>
        </trans-unit>
        <trans-unit id="e7d6310b11ad04ede1d86386dd85ffa2b6b00627" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use prepared statements and parameterized queries.&lt;/strong&gt; These are SQL statements that are sent to and parsed by the database server separately from any parameters. This way it is impossible for an attacker to inject malicious SQL.</source>
          <target state="translated">&lt;strong&gt;Use declaraciones preparadas y consultas parametrizadas.&lt;/strong&gt; Estas son declaraciones SQL que el servidor de la base de datos env&amp;iacute;a y analiza por separado de cualquier par&amp;aacute;metro. De esta manera, es imposible que un atacante inyecte SQL malicioso.</target>
        </trans-unit>
        <trans-unit id="4b66375073c94d88e7cae14419ae8276f33a993c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning: the approach described in this answer only applies to very specific scenarios and isn't secure since SQL injection attacks do not only rely on being able to inject &lt;code&gt;X=Y&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Advertencia: el enfoque descrito en esta respuesta solo se aplica a escenarios muy espec&amp;iacute;ficos y no es seguro ya que los ataques de inyecci&amp;oacute;n SQL no solo dependen de poder inyectar &lt;code&gt;X=Y&lt;/code&gt; .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="167a410708537f3843a1e61a18f3cd510d6bcd35" translate="yes" xml:space="preserve">
          <source>A few guidelines for escaping special characters in SQL statements.</source>
          <target state="translated">Algunas pautas para escapar de los caracteres especiales en las sentencias SQL.</target>
        </trans-unit>
        <trans-unit id="260ac50ca6144215fd0045d1af48ccfa01e745f8" translate="yes" xml:space="preserve">
          <source>A good idea is to use an &lt;strong&gt;'object-relational mapper'&lt;/strong&gt; like &lt;a href=&quot;http://j4mie.github.io/idiormandparis/&quot;&gt;Idiorm&lt;/a&gt;:</source>
          <target state="translated">Una buena idea es usar un &lt;strong&gt;'mapeador relacional de objetos'&lt;/strong&gt; como &lt;a href=&quot;http://j4mie.github.io/idiormandparis/&quot;&gt;Idiorm&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="1f6d894b7333493ff06b2ed34e4c107a54abe2c5" translate="yes" xml:space="preserve">
          <source>A simple way would be to use a PHP framework like &lt;a href=&quot;http://en.wikipedia.org/wiki/Codeigniter#CodeIgniter&quot;&gt;CodeIgniter&lt;/a&gt; or &lt;a href=&quot;https://laravel.com/&quot;&gt;Laravel&lt;/a&gt; which have inbuilt features like filtering and active-record so that you don't have to worry about these nuances.</source>
          <target state="translated">Una manera simple ser&amp;iacute;a utilizar un marco PHP como &lt;a href=&quot;http://en.wikipedia.org/wiki/Codeigniter#CodeIgniter&quot;&gt;CodeIgniter&lt;/a&gt; o &lt;a href=&quot;https://laravel.com/&quot;&gt;Laravel&lt;/a&gt; que tienen caracter&amp;iacute;sticas incorporadas como filtrado y registro activo para que no tenga que preocuparse por estos matices.</target>
        </trans-unit>
        <trans-unit id="a4f547e2a90f5422256b70e6749192b1dc12e925" translate="yes" xml:space="preserve">
          <source>A user commented that this post is useless, OK! Here is what &lt;a href=&quot;https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet#Defense_Option_3:_Escaping_All_User_Supplied_Input&quot;&gt;OWASP.ORG provided&lt;/a&gt;:</source>
          <target state="translated">Un usuario coment&amp;oacute; que esta publicaci&amp;oacute;n es in&amp;uacute;til, &amp;iexcl;OK! &lt;a href=&quot;https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet#Defense_Option_3:_Escaping_All_User_Supplied_Input&quot;&gt;Esto&lt;/a&gt; es lo que proporcion&amp;oacute; OWASP.ORG :</target>
        </trans-unit>
        <trans-unit id="f8bcba9062fd4c5354b3fe7577630f1852a5a4f1" translate="yes" xml:space="preserve">
          <source>Additional defenses:</source>
          <target state="translated">Defensas adicionales:</target>
        </trans-unit>
        <trans-unit id="5a9a57fdfe801732160d7b653550c5f2e63ef2a2" translate="yes" xml:space="preserve">
          <source>Adopting the MVC pattern and a framework like &lt;a href=&quot;http://cakephp.org/&quot;&gt;CakePHP&lt;/a&gt; or &lt;a href=&quot;http://codeigniter.com/&quot;&gt;CodeIgniter&lt;/a&gt; is probably the right way to go: Common tasks like creating secure database queries have been solved and centrally implemented in such frameworks. They help you to organize your web application in a sensible way and make you think more about loading and saving objects than about securely constructing single SQL queries.</source>
          <target state="translated">Adoptar el patr&amp;oacute;n MVC y un marco como &lt;a href=&quot;http://cakephp.org/&quot;&gt;CakePHP&lt;/a&gt; o &lt;a href=&quot;http://codeigniter.com/&quot;&gt;CodeIgniter&lt;/a&gt; es probablemente el camino correcto: las tareas comunes como la creaci&amp;oacute;n de consultas seguras en la base de datos se han resuelto e implementado centralmente en dichos marcos. Le ayudan a organizar su aplicaci&amp;oacute;n web de una manera sensata y le hacen pensar m&amp;aacute;s en cargar y guardar objetos que en construir de forma segura consultas SQL &amp;uacute;nicas.</target>
        </trans-unit>
        <trans-unit id="c8a14a30d16f16ac980bf356d9504fab38b7075b" translate="yes" xml:space="preserve">
          <source>Also Enforce: Least Privilege</source>
          <target state="translated">También hacer cumplir:El menor privilegio</target>
        </trans-unit>
        <trans-unit id="1896c2015dcc61c975328aa2d6d19cd66a93eed3" translate="yes" xml:space="preserve">
          <source>Also Perform: White List Input Validation</source>
          <target state="translated">También actúa:Validación de la entrada de la lista blanca</target>
        </trans-unit>
        <trans-unit id="a7a90d96967d5c49bc4afaed57e9dee54e4e9f9c" translate="yes" xml:space="preserve">
          <source>Also, as others have suggested, you may find it useful/easier to step up a layer of abstraction with something like &lt;a href=&quot;http://php.net/pdo&quot;&gt;PDO&lt;/a&gt;.</source>
          <target state="translated">Adem&amp;aacute;s, como han sugerido otros, puede resultarle &amp;uacute;til / m&amp;aacute;s f&amp;aacute;cil aumentar una capa de abstracci&amp;oacute;n con algo como &lt;a href=&quot;http://php.net/pdo&quot;&gt;PDO&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2c30cce0b8c2965ca51b265a25df9d3693f83528" translate="yes" xml:space="preserve">
          <source>Also, its use is a little complicated if you are about to insert an empty string. You'll have to entirely replace it with &lt;code&gt;''&lt;/code&gt;, or you'll get an error.</source>
          <target state="translated">Adem&amp;aacute;s, su uso es un poco complicado si est&amp;aacute; a punto de insertar una cadena vac&amp;iacute;a. Tendr&amp;aacute; que reemplazarlo por completo con &lt;code&gt;''&lt;/code&gt; , o recibir&amp;aacute; un error.</target>
        </trans-unit>
        <trans-unit id="69c4f0f8d46827c16603dcdf21511ca657bcb9e9" translate="yes" xml:space="preserve">
          <source>Also, you can 'prepare' your arguments before preparing your query so that you can build dynamic queries and at the end have a fully prepared statements query. &lt;a href=&quot;http://dalmp.readthedocs.org/en/latest/database/Prepare.html&quot;&gt;DALMP Database Abstraction Layer for MySQL using PHP.&lt;/a&gt;</source>
          <target state="translated">Adem&amp;aacute;s, puede 'preparar' sus argumentos antes de preparar su consulta para poder construir consultas din&amp;aacute;micas y al final tener una consulta de declaraciones completamente preparada. &lt;a href=&quot;http://dalmp.readthedocs.org/en/latest/database/Prepare.html&quot;&gt;Capa de abstracci&amp;oacute;n de base de datos DALMP para MySQL usando PHP.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="74d699a30675fa3d298fbab5df176b5b25503844" translate="yes" xml:space="preserve">
          <source>Although there is a general agreement on the best practices regarding SQL injection protection, there are &lt;strong&gt;still many bad practices as well.&lt;/strong&gt; And some of them too deeply rooted in the minds of PHP users. For instance, on this very page there are (although invisible to most visitors) &lt;strong&gt;more than 80 deleted answers&lt;/strong&gt; - all removed by the community due to bad quality or promoting bad and outdated practices. Worse yet, some of the bad answers aren't deleted, but rather prospering.</source>
          <target state="translated">Aunque hay un acuerdo general sobre las mejores pr&amp;aacute;cticas con respecto a la protecci&amp;oacute;n de inyecci&amp;oacute;n SQL, todav&amp;iacute;a hay &lt;strong&gt;muchas malas pr&amp;aacute;cticas tambi&amp;eacute;n.&lt;/strong&gt; Y algunos de ellos est&amp;aacute;n demasiado arraigados en las mentes de los usuarios de PHP. Por ejemplo, en esta misma p&amp;aacute;gina hay (aunque invisibles para la mayor&amp;iacute;a de los visitantes) &lt;strong&gt;m&amp;aacute;s de 80 respuestas eliminadas&lt;/strong&gt; , todas eliminadas por la comunidad debido a la mala calidad o la promoci&amp;oacute;n de pr&amp;aacute;cticas malas y obsoletas. Peor a&amp;uacute;n, algunas de las malas respuestas no se eliminan, sino que prosperan.</target>
        </trans-unit>
        <trans-unit id="eabd1c8f5b2f8e2b973f2b52cc71e91a5bb24985" translate="yes" xml:space="preserve">
          <source>Although you can set the &lt;code&gt;charset&lt;/code&gt; in the options of the constructor, it's important to note that 'older' versions of PHP (before 5.3.6) &lt;a href=&quot;http://php.net/manual/en/ref.pdo-mysql.connection.php&quot;&gt;silently ignored the charset parameter&lt;/a&gt; in the DSN.</source>
          <target state="translated">Aunque puede establecer el juego de &lt;code&gt;charset&lt;/code&gt; en las opciones del constructor, es importante tener en cuenta que las versiones 'antiguas' de PHP (anteriores a 5.3.6) &lt;a href=&quot;http://php.net/manual/en/ref.pdo-mysql.connection.php&quot;&gt;ignoraron en silencio el par&amp;aacute;metro del juego de caracteres&lt;/a&gt; en el DSN.</target>
        </trans-unit>
        <trans-unit id="89427a94f14d4db682ce047617bd39f90aeb83cc" translate="yes" xml:space="preserve">
          <source>An alternative to mysql_real_escape_string() is</source>
          <target state="translated">Una alternativa a mysql_real_escape_string()es</target>
        </trans-unit>
        <trans-unit id="7bcc7fb301834a94c428663cf127b9d3c420bafb" translate="yes" xml:space="preserve">
          <source>And OWASP makes it even worse, stressing on escaping &lt;em&gt;user input&lt;/em&gt; which is an utter nonsense: there should be no such words in the context of injection protection. Every variable is potentially dangerous - no matter the source! Or, in other words - every variable has to be properly formatted to be put into a query - no matter the source again. It's the destination that matters. The moment a developer starts to separate the sheep from the goats (thinking whether some particular variable is &quot;safe&quot; or not) he/she takes his/her first step towards disaster. Not to mention that even the wording suggests bulk escaping at the entry point, resembling the very magic quotes feature - already despised, deprecated and removed.</source>
          <target state="translated">Y OWASP lo empeora a&amp;uacute;n m&amp;aacute;s, haciendo hincapi&amp;eacute; en escapar de &lt;em&gt;la entrada del usuario, lo&lt;/em&gt; cual es una absoluta tonter&amp;iacute;a: no deber&amp;iacute;a haber tales palabras en el contexto de la protecci&amp;oacute;n de inyecci&amp;oacute;n. Cada variable es potencialmente peligrosa, &amp;iexcl;sin importar la fuente! O, en otras palabras, cada variable tiene que formatearse correctamente para ser puesta en una consulta, sin importar la fuente nuevamente. Es el destino lo que importa. En el momento en que un desarrollador comienza a separar las ovejas de las cabras (pensando si alguna variable particular es &quot;segura&quot; o no), &amp;eacute;l / ella da su primer paso hacia el desastre. Sin mencionar que incluso la redacci&amp;oacute;n sugiere un escape masivo en el punto de entrada, que se asemeja a la caracter&amp;iacute;stica de citas muy m&amp;aacute;gicas, ya despreciadas, desaprobadas y eliminadas.</target>
        </trans-unit>
        <trans-unit id="029c0a0374bedd82f613d03ef16978761b30cf7e" translate="yes" xml:space="preserve">
          <source>And by using PDO rather than &lt;code&gt;mysql_&lt;/code&gt;, &lt;code&gt;mysqli_&lt;/code&gt;, and &lt;code&gt;pgsql_&lt;/code&gt; functions, you make your application a little more abstracted from the database, in the rare occurrence that you have to switch database providers.</source>
          <target state="translated">Y al usar PDO en lugar de las &lt;code&gt;mysql_&lt;/code&gt; , &lt;code&gt;mysqli_&lt;/code&gt; y &lt;code&gt;pgsql_&lt;/code&gt; , hace que su aplicaci&amp;oacute;n sea un poco m&amp;aacute;s abstracta de la base de datos, en el caso poco frecuente de que tenga que cambiar de proveedor de base de datos.</target>
        </trans-unit>
        <trans-unit id="9b5ef3ee55266b405431414057f96c242ca0a3ea" translate="yes" xml:space="preserve">
          <source>And it is so much better to use those functions to check input data with &lt;code&gt;mysql_real_escape_string&lt;/code&gt;.</source>
          <target state="translated">Y es mucho mejor usar esas funciones para verificar los datos de entrada con &lt;code&gt;mysql_real_escape_string&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8b6f9dd7708882555f93273050b2295e1ff50293" translate="yes" xml:space="preserve">
          <source>And prepared statements cover only two of them.</source>
          <target state="translated">Y las declaraciones preparadas sólo cubren dos de ellas.</target>
        </trans-unit>
        <trans-unit id="9a818eb4d9f22f32e544143c95e4a338abac3b6a" translate="yes" xml:space="preserve">
          <source>And some other like &lt;em&gt;&lt;a href=&quot;https://web.archive.org/web/20190221025712/http://www.digifuzz.net/archives/2007/07/preventing-sql-injection-with-php/&quot;&gt;Preventing SQL injection with MySQL and PHP&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">Y algunos otros como &lt;em&gt;&lt;a href=&quot;https://web.archive.org/web/20190221025712/http://www.digifuzz.net/archives/2007/07/preventing-sql-injection-with-php/&quot;&gt;Prevenci&amp;oacute;n de inyecci&amp;oacute;n SQL con MySQL y PHP&lt;/a&gt;&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="5a9c32269a2494bf681823b0f8ef4fe2f380c0b7" translate="yes" xml:space="preserve">
          <source>And the use of &lt;code&gt;mysqli_real_escape_string&lt;/code&gt; is for, as the name says, escaping special characters in a string, so it will not make integers safe. The purpose of this function is to prevent breaking the strings in SQL statements, and the damage to the database that it could cause. &lt;code&gt;mysqli_real_escape_string&lt;/code&gt; is a useful function when used properly, especially when combined with &lt;code&gt;sprintf&lt;/code&gt;.</source>
          <target state="translated">Y el uso de &lt;code&gt;mysqli_real_escape_string&lt;/code&gt; es para, como su nombre lo dice, escapar de caracteres especiales en una cadena, por lo que no har&amp;aacute; que los enteros sean seguros. El prop&amp;oacute;sito de esta funci&amp;oacute;n es evitar romper las cadenas en las declaraciones SQL y el da&amp;ntilde;o a la base de datos que podr&amp;iacute;a causar. &lt;code&gt;mysqli_real_escape_string&lt;/code&gt; es una funci&amp;oacute;n &amp;uacute;til cuando se usa correctamente, especialmente cuando se combina con &lt;code&gt;sprintf&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="77fdc73c5a405950cdef3ff428d3bc7c8429a576" translate="yes" xml:space="preserve">
          <source>And then just select whatever data ones want. Isn't it cool?</source>
          <target state="translated">Y luego sólo hay que seleccionar los datos que uno quiere.¿No es genial?</target>
        </trans-unit>
        <trans-unit id="469e5ab140693a349e074c76557802c31c33fd02" translate="yes" xml:space="preserve">
          <source>Another benefit of using prepared statements is that if you execute the same statement many times in the same session it will only be parsed and compiled once, giving you some speed gains.</source>
          <target state="translated">Otra ventaja de utilizar declaraciones preparadas es que si se ejecuta la misma declaración muchas veces en la misma sesión,sólo se analizará y compilará una vez,lo que permite ganar algo de velocidad.</target>
        </trans-unit>
        <trans-unit id="ac2632462245c897b1b550ec3d5bcf2e8b29db73" translate="yes" xml:space="preserve">
          <source>Any other query part, such as an SQL keyword, a table or a field name, or an operator - must be filtered through a white list.</source>
          <target state="translated">Cualquier otra parte de la consulta,como una palabra clave SQL,un nombre de tabla o de campo,o un operador-debe ser filtrada a través de una lista blanca.</target>
        </trans-unit>
        <trans-unit id="59ca1e0dddd5402d6c514f23b5ab618318bd9b52" translate="yes" xml:space="preserve">
          <source>Any parameters you send when using a prepared statement will just be treated as strings (although the database engine may do some optimization so parameters may end up as numbers too, of course). In the example above, if the &lt;code&gt;$name&lt;/code&gt; variable contains &lt;code&gt;'Sarah'; DELETE FROM employees&lt;/code&gt; the result would simply be a search for the string &lt;code&gt;&quot;'Sarah'; DELETE FROM employees&quot;&lt;/code&gt;, and you will not end up with &lt;a href=&quot;http://xkcd.com/327/&quot;&gt;an empty table&lt;/a&gt;.</source>
          <target state="translated">Cualquier par&amp;aacute;metro que env&amp;iacute;e al usar una declaraci&amp;oacute;n preparada solo se tratar&amp;aacute; como cadenas (aunque el motor de la base de datos puede hacer alguna optimizaci&amp;oacute;n, por lo que los par&amp;aacute;metros tambi&amp;eacute;n pueden terminar como n&amp;uacute;meros, por supuesto). En el ejemplo anterior, si la variable &lt;code&gt;$name&lt;/code&gt; contiene &lt;code&gt;'Sarah'; DELETE FROM employees&lt;/code&gt; BORRAR DE empleados El resultado ser&amp;iacute;a simplemente una b&amp;uacute;squeda de la cadena &lt;code&gt;&quot;'Sarah'; DELETE FROM employees&quot;&lt;/code&gt; , y no terminar&amp;aacute;s con &lt;a href=&quot;http://xkcd.com/327/&quot;&gt;una tabla vac&amp;iacute;a&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="814927018a663b40d6800585c37e63752cd8b345" translate="yes" xml:space="preserve">
          <source>Any variable that represents an SQL data literal, (or, to put it simply - an SQL string, or a number) must be added through a prepared statement. No Exceptions.</source>
          <target state="translated">Cualquier variable que represente un literal de datos SQL,(o,para decirlo simplemente-una cadena de SQL,o un número)debe ser añadida a través de una declaración preparada.No hay excepciones.</target>
        </trans-unit>
        <trans-unit id="8f339838f01ea88e77c778fe86da6db1dbb6727f" translate="yes" xml:space="preserve">
          <source>As also mentioned in the above statement,</source>
          <target state="translated">Como también se menciona en la declaración anterior,</target>
        </trans-unit>
        <trans-unit id="35a0aae8525a92229ff81ec077bfddd794e5ad1c" translate="yes" xml:space="preserve">
          <source>As you can see, people suggest you use prepared statements at the most. It's not wrong, but when your query is executed &lt;strong&gt;just once&lt;/strong&gt; per process, there would be a slight performance penalty.</source>
          <target state="translated">Como puede ver, la gente sugiere que use declaraciones preparadas como m&amp;aacute;ximo. No est&amp;aacute; mal, pero cuando su consulta se ejecuta &lt;strong&gt;solo una vez&lt;/strong&gt; por proceso, habr&amp;aacute; una ligera penalizaci&amp;oacute;n de rendimiento.</target>
        </trans-unit>
        <trans-unit id="bd2cedbc3cba1b466c7ccb0d7d8ccb2234565bfd" translate="yes" xml:space="preserve">
          <source>As you may know, claiming an article should be supported by a valid argument, at least by one reference! Otherwise, it's considered as an attack and a bad claim!</source>
          <target state="translated">Como ya sabrá,la reivindicación de un artículo debe apoyarse en un argumento válido,¡al menos en una referencia! ¡De lo contrario,se considera como un ataque y una mala reclamación!</target>
        </trans-unit>
        <trans-unit id="820ba4d63bbc346ca4423e23a1bea3ca67844669" translate="yes" xml:space="preserve">
          <source>Basically, read it &lt;a href=&quot;http://php.net/pdo&quot;&gt;while you read the manual&lt;/a&gt; to see how to put the PDO functions to use in real life to make it simple to store and retrieve values in the format &lt;strong&gt;you&lt;/strong&gt; want.</source>
          <target state="translated">B&amp;aacute;sicamente, l&amp;eacute;alo &lt;a href=&quot;http://php.net/pdo&quot;&gt;mientras lee el manual&lt;/a&gt; para ver c&amp;oacute;mo usar las funciones PDO en la vida real para que sea m&amp;aacute;s f&amp;aacute;cil almacenar y recuperar valores en el formato &lt;strong&gt;que&lt;/strong&gt; desee.</target>
        </trans-unit>
        <trans-unit id="984f8b5a40d91fa830e321cc52151441d3cd3388" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;1=1&lt;/code&gt;, &lt;code&gt;2=2&lt;/code&gt;, &lt;code&gt;1=2&lt;/code&gt;, &lt;code&gt;2=1&lt;/code&gt;, &lt;code&gt;1+1=2&lt;/code&gt;, etc... are the common questions to an SQL database of an attacker. Maybe also it's used by many hacking applications.</source>
          <target state="translated">Debido a que &lt;code&gt;1=1&lt;/code&gt; , &lt;code&gt;2=2&lt;/code&gt; , &lt;code&gt;1=2&lt;/code&gt; , &lt;code&gt;2=1&lt;/code&gt; , &lt;code&gt;1+1=2&lt;/code&gt; , etc. son las preguntas comunes a una base de datos SQL de un atacante. Quiz&amp;aacute;s tambi&amp;eacute;n lo usan muchas aplicaciones de hackeo.</target>
        </trans-unit>
        <trans-unit id="c0510df3f1d4695430a58920cd200e354ad3da70" translate="yes" xml:space="preserve">
          <source>Bound variables will be escaped automatically by the server. The
  server inserts their escaped values at the appropriate places into the
  statement template before execution. A hint must be provided to the
  server for the type of bound variable, to create an appropriate
  conversion. See the mysqli_stmt_bind_param() function for more
  information.</source>
          <target state="translated">Las variables de los límites serán escapadas automáticamente por el servidor.El servidor inserta sus valores de escape en los lugares apropiados en la plantilla de la declaración antes de la ejecución.Se debe proporcionar una pista al servidor para el tipo de variable ligada,para crear una conversión apropiada.Vea la función mysqli_stmt_bind_param()para más información.</target>
        </trans-unit>
        <trans-unit id="6c45ced87722560ce91bdb8d47661e48efa8ce64" translate="yes" xml:space="preserve">
          <source>But if the coder of an injectable site would hex it, no injection would be possible because the query would look like this: &lt;code&gt;SELECT ... WHERE id = UNHEX('2d312075...3635')&lt;/code&gt;</source>
          <target state="translated">Pero si el codificador de un sitio inyectable lo hechizara, no ser&amp;iacute;a posible ninguna inyecci&amp;oacute;n porque la consulta se ver&amp;iacute;a as&amp;iacute;: &lt;code&gt;SELECT ... WHERE id = UNHEX('2d312075...3635')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e1130d41244662be40e74568e6d313b2aeba7a56" translate="yes" xml:space="preserve">
          <source>But sometimes we have to make our query even more dynamic, adding operators or identifiers as well.
So, we will need different protection techniques.</source>
          <target state="translated">Pero a veces tenemos que hacer nuestra consulta aún más dinámica,añadiendo operadores o identificadores también.Por lo tanto,necesitaremos diferentes técnicas de protección.</target>
        </trans-unit>
        <trans-unit id="388e5f4608b9c0c64a94caf6cb522f68f0b812be" translate="yes" xml:space="preserve">
          <source>But while both PDO and MySQLi are quite fast, MySQLi performs
insignificantly faster in benchmarks &amp;ndash; ~2.5% for non-prepared
statements, and ~6.5% for prepared ones.</source>
          <target state="translated">Pero aunque tanto PDO como MySQLi son bastante r&amp;aacute;pidos, MySQLi se desempe&amp;ntilde;a de manera insignificantemente m&amp;aacute;s r&amp;aacute;pida en los puntos de referencia: ~ 2.5% para declaraciones no preparadas y ~ 6.5% para las preparadas.</target>
        </trans-unit>
        <trans-unit id="11ae2ab8e554cd29a407caca0e6fabee0756957e" translate="yes" xml:space="preserve">
          <source>But you must be careful, that you must not rewrite a safe query from your site. The code above is giving you a tip, to rewrite or redirect &lt;em&gt;(it depends on you)&lt;/em&gt; that hacking-specific dynamic query string into a page that will store the attacker's &lt;a href=&quot;http://en.wikipedia.org/wiki/IP_address&quot;&gt;IP address&lt;/a&gt;, or EVEN THEIR COOKIES, history, browser, or any other sensitive information, so you can deal with them later by banning their account or contacting authorities.</source>
          <target state="translated">Pero debe tener cuidado, no debe reescribir una consulta segura desde su sitio. El c&amp;oacute;digo anterior le da una sugerencia, para reescribir o redirigir &lt;em&gt;(depende de usted)&lt;/em&gt; esa cadena de consulta din&amp;aacute;mica espec&amp;iacute;fica de pirater&amp;iacute;a en una p&amp;aacute;gina que almacenar&amp;aacute; la &lt;a href=&quot;http://en.wikipedia.org/wiki/IP_address&quot;&gt;direcci&amp;oacute;n IP&lt;/a&gt; del atacante, o INCLUSO SUS COOKIES, historial, navegador o cualquier otro elemento sensible informaci&amp;oacute;n, para que pueda tratar con ellos m&amp;aacute;s tarde prohibiendo su cuenta o contactando a las autoridades.</target>
        </trans-unit>
        <trans-unit id="c2424b0d28c65836412890f683090b9c10c2c3e2" translate="yes" xml:space="preserve">
          <source>Can prepared statements be used for dynamic queries?</source>
          <target state="translated">¿Pueden utilizarse declaraciones preparadas para consultas dinámicas?</target>
        </trans-unit>
        <trans-unit id="cc031d2a659335c48d55ac551c2a927f393178cf" translate="yes" xml:space="preserve">
          <source>Consider that &lt;a href=&quot;http://en.wikipedia.org/wiki/PHP#History&quot;&gt;PDO&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/MySQLi&quot;&gt;MySQLi&lt;/a&gt; are not available. How can you secure your application? Do you force me to use them? What about other languages other than PHP? I prefer to provide general ideas as it can be used for wider border, not just for a specific language.</source>
          <target state="translated">Tenga en cuenta que &lt;a href=&quot;http://en.wikipedia.org/wiki/PHP#History&quot;&gt;PDO&lt;/a&gt; y &lt;a href=&quot;http://en.wikipedia.org/wiki/MySQLi&quot;&gt;MySQLi&lt;/a&gt; no est&amp;aacute;n disponibles. &amp;iquest;C&amp;oacute;mo puede asegurar su aplicaci&amp;oacute;n? &amp;iquest;Me obligas a usarlos? &amp;iquest;Qu&amp;eacute; pasa con otros lenguajes que no sean PHP? Prefiero proporcionar ideas generales, ya que puede usarse para un borde m&amp;aacute;s amplio, no solo para un idioma espec&amp;iacute;fico.</target>
        </trans-unit>
        <trans-unit id="1e6f64ab75678829dd084a6595e2b0ae29ecddec" translate="yes" xml:space="preserve">
          <source>Consider the following query:</source>
          <target state="translated">Considere la siguiente pregunta:</target>
        </trans-unit>
        <trans-unit id="6047ffa640b216365f3915cb1825dec617a4486c" translate="yes" xml:space="preserve">
          <source>Correctly setting up the connection</source>
          <target state="translated">Estableciendo correctamente la conexión</target>
        </trans-unit>
        <trans-unit id="a6b87d4687eee957fbc10c0728a5bff14a875b82" translate="yes" xml:space="preserve">
          <source>Data filtering: before building any query user input, it should be validated and filtered. For programmers, it's important to define some properties for each user-input variables:
&lt;strong&gt;data type, data pattern, and data length&lt;/strong&gt;. A field that is a number between (x and y) must be exactly validated using the exact rule, and for a field that is a string (text): pattern is the case, for example, a username must contain only some characters, let&amp;rsquo;s say [a-zA-Z0-9_-.]. The length varies between (x and n) where x and n (integers, x &amp;lt;=n).
&lt;strong&gt;Rule: creating exact filters and validation rules are best practices for me.&lt;/strong&gt;</source>
          <target state="translated">Filtrado de datos: antes de generar cualquier consulta del usuario, debe validarse y filtrarse. Para los programadores, es importante definir algunas propiedades para cada variable de entrada del usuario: &lt;strong&gt;tipo de datos, patr&amp;oacute;n de datos y longitud de datos&lt;/strong&gt; . Un campo que es un n&amp;uacute;mero entre (x e y) debe validarse exactamente usando la regla exacta, y para un campo que es una cadena (texto): el caso es el patr&amp;oacute;n, por ejemplo, un nombre de usuario debe contener solo algunos caracteres, vamos a diga [a-zA-Z0-9_-.]. La longitud var&amp;iacute;a entre (x y n) donde x y n (enteros, x &amp;lt;= n). &lt;strong&gt;Regla: crear filtros exactos y reglas de validaci&amp;oacute;n son las mejores pr&amp;aacute;cticas para m&amp;iacute;.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ac512b2277dc12fb253b90cadeff4b79f7f0c52d" translate="yes" xml:space="preserve">
          <source>Data validation</source>
          <target state="translated">Validación de datos</target>
        </trans-unit>
        <trans-unit id="bc11336395287ce262bd5113df8755daa9bf7976" translate="yes" xml:space="preserve">
          <source>Difference between UNHEX function and 0x prefix</source>
          <target state="translated">Diferencia entre la función UNHEX y el prefijo 0x</target>
        </trans-unit>
        <trans-unit id="64fadb85f6f8e77597bc8111b879ba46ab913ae2" translate="yes" xml:space="preserve">
          <source>Don't use &lt;a href=&quot;http://www.php.net/manual/en/intro.mysql.php&quot;&gt;MySQL&lt;/a&gt;. This extension is deprecated. Use &lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot;&gt;MySQLi&lt;/a&gt; or &lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt; instead.</source>
          <target state="translated">No uses &lt;a href=&quot;http://www.php.net/manual/en/intro.mysql.php&quot;&gt;MySQL&lt;/a&gt; . Esta extensi&amp;oacute;n est&amp;aacute; en desuso. Utilice &lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot;&gt;MySQLi&lt;/a&gt; o &lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;PDO en su&lt;/a&gt; lugar.</target>
        </trans-unit>
        <trans-unit id="47070a639c03e8836d4eb1ec8798be8eba3ad73e" translate="yes" xml:space="preserve">
          <source>Don't worry about that the escaped string will have a 2x size of its original length because even if you use &lt;code&gt;mysql_real_escape_string&lt;/code&gt;, PHP has to allocate same capacity &lt;code&gt;((2*input_length)+1)&lt;/code&gt;, which is the same.</source>
          <target state="translated">No se preocupe por que la cadena de escape tendr&amp;aacute; un tama&amp;ntilde;o 2x de su longitud original porque incluso si usa &lt;code&gt;mysql_real_escape_string&lt;/code&gt; , PHP tiene que asignar la misma capacidad &lt;code&gt;((2*input_length)+1)&lt;/code&gt; , que es la misma.</target>
        </trans-unit>
        <trans-unit id="a8399b7eb2075e4b434c811aae00c5124b738ead" translate="yes" xml:space="preserve">
          <source>Escaping and SQL injection</source>
          <target state="translated">Escapada e inyección SQL</target>
        </trans-unit>
        <trans-unit id="f51a89736407728dd8dad04a11c2585ad6ed1ddc" translate="yes" xml:space="preserve">
          <source>Every answer here covers only part of the problem.
In fact, there are &lt;strong&gt;four&lt;/strong&gt; different query parts which we can add to SQL dynamically: -</source>
          <target state="translated">Cada respuesta aqu&amp;iacute; cubre solo una parte del problema. De hecho, hay &lt;strong&gt;cuatro&lt;/strong&gt; partes de consulta diferentes que podemos agregar din&amp;aacute;micamente a SQL:</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="b32ef340ea4702fd5f41dbe4001671d76174ef71" translate="yes" xml:space="preserve">
          <source>Explanation</source>
          <target state="translated">Explanation</target>
        </trans-unit>
        <trans-unit id="7f33f9daadca6cb0086c1f093e4291fd8f752aed" translate="yes" xml:space="preserve">
          <source>Finally you get:</source>
          <target state="translated">Por fin lo consigues:</target>
        </trans-unit>
        <trans-unit id="203bdc584486062bd9b0a868468cf5b0c6115900" translate="yes" xml:space="preserve">
          <source>Finally, let's consider that a user sends this text below instead of entering his/her username:</source>
          <target state="translated">Por último,consideremos que un usuario envía este texto a continuación en lugar de introducir su nombre de usuario:</target>
        </trans-unit>
        <trans-unit id="4c529cebc105c5ddf809043dcd4cda22ee4366d8" translate="yes" xml:space="preserve">
          <source>For automatic escaping of values with prepared statements, use &lt;a href=&quot;http://www.php.net/manual/en/mysqli.prepare.php&quot;&gt;mysqli_prepare&lt;/a&gt;, and &lt;a href=&quot;http://www.php.net/manual/en/mysqli-stmt.bind-param.php&quot;&gt;mysqli_stmt_bind_param&lt;/a&gt; where types for the corresponding bind variables must be provided for an appropriate conversion:</source>
          <target state="translated">Para el escape autom&amp;aacute;tico de valores con sentencias preparadas, use &lt;a href=&quot;http://www.php.net/manual/en/mysqli.prepare.php&quot;&gt;mysqli_prepare&lt;/a&gt; y &lt;a href=&quot;http://www.php.net/manual/en/mysqli-stmt.bind-param.php&quot;&gt;mysqli_stmt_bind_param&lt;/a&gt; donde se deben proporcionar los tipos para las variables de enlace correspondientes para una conversi&amp;oacute;n adecuada:</target>
        </trans-unit>
        <trans-unit id="263085c2dabdadf48b189f11fe3b9f44078570cc" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;https://stackoverflow.com/a/11802479&quot;&gt;there(1)&lt;/a&gt;&lt;a href=&quot;https://stackoverflow.com/a/6381189&quot;&gt;are(2)&lt;/a&gt;&lt;a href=&quot;https://stackoverflow.com/a/60195/&quot;&gt;still(3)&lt;/a&gt;&lt;a href=&quot;https://stackoverflow.com/a/12426697/&quot;&gt;many(4)&lt;/a&gt;&lt;a href=&quot;https://stackoverflow.com/a/21179234&quot;&gt;answers(5)&lt;/a&gt;, including the &lt;a href=&quot;https://stackoverflow.com/a/60442&quot;&gt;second most upvoted answer&lt;/a&gt; suggesting you manual string escaping - an outdated approach that is proven to be insecure.</source>
          <target state="translated">Por ejemplo, &lt;a href=&quot;https://stackoverflow.com/a/11802479&quot;&gt;hay (1)&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/a/6381189&quot;&gt;(2)&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/a/60195/&quot;&gt;todav&amp;iacute;a (3)&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/a/12426697/&quot;&gt;muchas (4)&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/a/21179234&quot;&gt;respuestas (5)&lt;/a&gt; , incluida la &lt;a href=&quot;https://stackoverflow.com/a/60442&quot;&gt;segunda respuesta m&amp;aacute;s votada que&lt;/a&gt; sugiere el escape de cadena manual: un enfoque obsoleto que se ha demostrado que es inseguro.</target>
        </trans-unit>
        <trans-unit id="dd135ed1c5cdc625f86215a3d852d0a226ec19ca" translate="yes" xml:space="preserve">
          <source>For example, if you just do something like this:</source>
          <target state="translated">Por ejemplo,si haces algo como esto:</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="816ab6a230a5f009a780f99ed39f9fa8ad076a2f" translate="yes" xml:space="preserve">
          <source>For manually escaping special characters in a string you can use the &lt;a href=&quot;http://www.php.net/manual/en/mysqli.real-escape-string.php&quot;&gt;mysqli_real_escape_string&lt;/a&gt; function. The function will not work properly unless the correct character set is set with &lt;a href=&quot;http://www.php.net/manual/en/mysqli.set-charset.php&quot;&gt;mysqli_set_charset&lt;/a&gt;.</source>
          <target state="translated">Para escapar manualmente caracteres especiales en una cadena, puede usar la funci&amp;oacute;n &lt;a href=&quot;http://www.php.net/manual/en/mysqli.real-escape-string.php&quot;&gt;mysqli_real_escape_string&lt;/a&gt; . La funci&amp;oacute;n no funcionar&amp;aacute; correctamente a menos que el conjunto de caracteres correcto est&amp;eacute; configurado con &lt;a href=&quot;http://www.php.net/manual/en/mysqli.set-charset.php&quot;&gt;mysqli_set_charset&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6faf52c891f9ed8efba053050f428dfa69b63649" translate="yes" xml:space="preserve">
          <source>For more information, please read &lt;a href=&quot;https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet&quot;&gt;OWASP SQL Injection Prevention Cheat Sheet&lt;/a&gt;.</source>
          <target state="translated">Para obtener m&amp;aacute;s informaci&amp;oacute;n, lea la &lt;a href=&quot;https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet&quot;&gt;hoja de trucos de prevenci&amp;oacute;n de inyecci&amp;oacute;n SQL de OWASP&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4d38e733b61cd3029c8e0a13aa3342ac97a1dd29" translate="yes" xml:space="preserve">
          <source>For more prevention, you can add at the end ...</source>
          <target state="translated">Para más prevención,puedes añadir al final...</target>
        </trans-unit>
        <trans-unit id="9b951568ae96d7b8f246820658eefa294ec054b6" translate="yes" xml:space="preserve">
          <source>For these specific scenarios, the best thing to do is use a whitelist filter that restricts the possible values.</source>
          <target state="translated">Para estos escenarios específicos,lo mejor es usar un filtro de lista blanca que restrinja los posibles valores.</target>
        </trans-unit>
        <trans-unit id="3113d98fc6c4b79c794822624639f6af44b6df61" translate="yes" xml:space="preserve">
          <source>For those unsure of how to use PDO (coming from the &lt;code&gt;mysql_&lt;/code&gt; functions), I made a &lt;a href=&quot;https://github.com/Xeoncross/DByte/blob/master/DByte/DB.php&quot;&gt;very, very simple PDO wrapper&lt;/a&gt; that is a single file. It exists to show how easy it is to do all the common things applications need to be done. Works with PostgreSQL, MySQL, and SQLite.</source>
          <target state="translated">Para aquellos que no est&amp;aacute;n seguros de c&amp;oacute;mo usar PDO (proveniente de las funciones &lt;code&gt;mysql_&lt;/code&gt; ), hice un &lt;a href=&quot;https://github.com/Xeoncross/DByte/blob/master/DByte/DB.php&quot;&gt;contenedor PDO muy, muy simple&lt;/a&gt; que es un solo archivo. Existe para mostrar lo f&amp;aacute;cil que es hacer todas las cosas comunes que deben hacerse las aplicaciones. Funciona con PostgreSQL, MySQL y SQLite.</target>
        </trans-unit>
        <trans-unit id="31a94adfc6ded26176c675ac449c92a6685c5361" translate="yes" xml:space="preserve">
          <source>From the PHP manual, &lt;a href=&quot;http://php.net/manual/en/mysqli.quickstart.prepared-statements.php&quot;&gt;PHP: Prepared Statements - Manual&lt;/a&gt;:</source>
          <target state="translated">Del manual de PHP, &lt;a href=&quot;http://php.net/manual/en/mysqli.quickstart.prepared-statements.php&quot;&gt;PHP: Declaraciones preparadas - Manual&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="6e5468989f2e2437840e22ffb20130112517c2fc" translate="yes" xml:space="preserve">
          <source>Hex is the perfect escape. No way to inject.</source>
          <target state="translated">Hex es el escape perfecto.No hay forma de inyectar.</target>
        </trans-unit>
        <trans-unit id="1de0731dde0800e271064f5cf722c055c76cb148" translate="yes" xml:space="preserve">
          <source>Hex methods are often used as attacks</source>
          <target state="translated">Los métodos hexagonales se utilizan a menudo como ataques</target>
        </trans-unit>
        <trans-unit id="b62564667d0dfb9e44b590131236f464401bdd8b" translate="yes" xml:space="preserve">
          <source>How can I prevent SQL injection in PHP</source>
          <target state="translated">¿Cómo puedo evitar la inyección SQL en PHP</target>
        </trans-unit>
        <trans-unit id="bd0deab6887a1354686773b46e00790e48d6fe0e" translate="yes" xml:space="preserve">
          <source>I created test cases for knowing how PDO and MySQLi send the query to the MySQL server when using a prepared statement:</source>
          <target state="translated">Creé casos de prueba para saber cómo PDO y MySQLi envían la consulta al servidor de MySQL al usar una declaración preparada:</target>
        </trans-unit>
        <trans-unit id="b9bbcd490604fe09b3cd1968bb6c6f7fa088e009" translate="yes" xml:space="preserve">
          <source>I favor &lt;a href=&quot;http://en.wikipedia.org/wiki/Stored_procedure&quot;&gt;stored procedures&lt;/a&gt; (&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.1/en/stored-routines-syntax.html&quot;&gt;MySQL has had stored procedures support since 5.0&lt;/a&gt;) from a security point of view - the advantages are -</source>
          <target state="translated">Estoy a favor de los &lt;a href=&quot;http://en.wikipedia.org/wiki/Stored_procedure&quot;&gt;procedimientos almacenados&lt;/a&gt; ( &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.1/en/stored-routines-syntax.html&quot;&gt;MySQL ha tenido soporte de procedimientos almacenados desde 5.0&lt;/a&gt; ) desde un punto de vista de seguridad, las ventajas son:</target>
        </trans-unit>
        <trans-unit id="43758c0ba6ab9cf4ca9dc9ffd9fe8ff1ebfc4f99" translate="yes" xml:space="preserve">
          <source>I hope this will help you.</source>
          <target state="translated">Espero que esto te ayude.</target>
        </trans-unit>
        <trans-unit id="84a0fd31784433f7ef6a00aea8326647c9561507" translate="yes" xml:space="preserve">
          <source>I suggest, using PDO is the best option.</source>
          <target state="translated">Sugiero que usar PDO es la mejor opción.</target>
        </trans-unit>
        <trans-unit id="18aa4535a307c95c0ececdd0bfb8cd49698d9cca" translate="yes" xml:space="preserve">
          <source>I think if someone wants to use PHP and MySQL or some other dataBase server:</source>
          <target state="translated">Creo que si alguien quiere usar PHP y MySQL o algún otro servidor de base de datos:</target>
        </trans-unit>
        <trans-unit id="c95768ad26c493130f9d2b473fe6ef3eb215bddb" translate="yes" xml:space="preserve">
          <source>I think that all this because of one very old superstition, supported by such authorities like &lt;a href=&quot;https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet#Defense_Option_4:_Escaping_All_User_Supplied_Input&quot;&gt;OWASP&lt;/a&gt; or &lt;a href=&quot;http://php.net/manual/en/function.mysql-real-escape-string.php#refsect1-function.mysql-real-escape-string-description&quot;&gt;the PHP manual&lt;/a&gt;, which proclaims equality between whatever &quot;escaping&quot; and protection from SQL injections.</source>
          <target state="translated">Creo que todo esto se debe a una superstici&amp;oacute;n muy antigua, respaldada por autoridades como &lt;a href=&quot;https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet#Defense_Option_4:_Escaping_All_User_Supplied_Input&quot;&gt;OWASP&lt;/a&gt; o &lt;a href=&quot;http://php.net/manual/en/function.mysql-real-escape-string.php#refsect1-function.mysql-real-escape-string-description&quot;&gt;el manual de PHP&lt;/a&gt; , que proclama la igualdad entre cualquier &quot;escape&quot; y protecci&amp;oacute;n contra las inyecciones SQL.</target>
        </trans-unit>
        <trans-unit id="06f647de8211b09469d07c391ca6e9753993ee87" translate="yes" xml:space="preserve">
          <source>I use three different ways to prevent my web application from being vulnerable to SQL injection.</source>
          <target state="translated">Utilizo tres formas diferentes para evitar que mi aplicación web sea vulnerable a la inyección SQL.</target>
        </trans-unit>
        <trans-unit id="aa717e5dd178fdf0c4683b6d4ebda0dfe58dee0e" translate="yes" xml:space="preserve">
          <source>I was facing this issue, but I think I solved it in &lt;em&gt;very&lt;/em&gt; sophisticated way - the way hackers use to avoid using quotes. I used this in conjunction with emulated prepared statements. I use it to prevent &lt;em&gt;all&lt;/em&gt; kinds of possible SQL injection attacks.</source>
          <target state="translated">Estaba enfrentando este problema, pero creo que lo resolv&amp;iacute; de &lt;em&gt;una&lt;/em&gt; manera &lt;em&gt;muy&lt;/em&gt; sofisticada, la forma en que los hackers usan para evitar el uso de citas. Us&amp;eacute; esto junto con declaraciones preparadas emuladas. Lo uso para prevenir &lt;em&gt;todo&lt;/em&gt; tipo de posibles ataques de inyecci&amp;oacute;n SQL.</target>
        </trans-unit>
        <trans-unit id="e5f69a8687e8ff3c1c4991d23a6d4ef4077382ba" translate="yes" xml:space="preserve">
          <source>I would like to let you know: Why do we try for preventing SQL injection with a short example below:</source>
          <target state="translated">Me gustaría hacérselo saber:¿Por qué tratamos de prevenir la inyección SQL con un breve ejemplo a continuación:</target>
        </trans-unit>
        <trans-unit id="eba600f8bfb98c671cd997242fbcbddc9efa69ac" translate="yes" xml:space="preserve">
          <source>I'd recommend using &lt;a href=&quot;http://ca3.php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt; (PHP Data Objects) to run parameterized SQL queries.</source>
          <target state="translated">Recomiendo usar &lt;a href=&quot;http://ca3.php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt; (PHP Data Objects) para ejecutar consultas SQL parametrizadas.</target>
        </trans-unit>
        <trans-unit id="40c2e08dff1fe6c1375d48a2c7cea92dc8a4069b" translate="yes" xml:space="preserve">
          <source>I've written this little function several years ago:</source>
          <target state="translated">Escribí esta pequeña función hace varios años:</target>
        </trans-unit>
        <trans-unit id="bd1f9c5fa454d3c00b06ea476a20111a54613929" translate="yes" xml:space="preserve">
          <source>If possible, cast the types of your parameters. But it's only working on simple types like int, bool, and float.</source>
          <target state="translated">Si es posible,proyecte los tipos de sus parámetros.Pero sólo funciona con tipos simples como int,bool y float.</target>
        </trans-unit>
        <trans-unit id="5827c6c3a2418ad354c9d261967a8450348a74c1" translate="yes" xml:space="preserve">
          <source>If the attackers are trying to hack into the form via PHP's &lt;code&gt;$_GET&lt;/code&gt; variable or with the URL's query string, you would be able to catch them if they're not secure.</source>
          <target state="translated">Si los atacantes intentan piratear el formulario a trav&amp;eacute;s de la variable &lt;code&gt;$_GET&lt;/code&gt; PHP o con la cadena de consulta de la URL, podr&amp;aacute; atraparlos si no son seguros.</target>
        </trans-unit>
        <trans-unit id="e7511b2b136cd15346fc6c4ed024e6a28da03c3b" translate="yes" xml:space="preserve">
          <source>If user input is inserted without modification into an SQL query, then the application becomes vulnerable to &lt;a href=&quot;https://stackoverflow.com/a/332367/&quot;&gt;SQL injection&lt;/a&gt;, like in the following example:</source>
          <target state="translated">Si la entrada del usuario se inserta sin modificaci&amp;oacute;n en una consulta SQL, la aplicaci&amp;oacute;n se vuelve vulnerable a la &lt;a href=&quot;https://stackoverflow.com/a/332367/&quot;&gt;inyecci&amp;oacute;n SQL&lt;/a&gt; , como en el siguiente ejemplo:</target>
        </trans-unit>
        <trans-unit id="252e57771708143a8a54033603a42c7a9528bde0" translate="yes" xml:space="preserve">
          <source>If you expect anything else from integer &lt;strong&gt;hex it&lt;/strong&gt;. If you hex it, you will perfectly escape all input. In C/C++ there's a function called &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.0/en/mysql-hex-string.html&quot;&gt;&lt;code&gt;mysql_hex_string()&lt;/code&gt;&lt;/a&gt;, in PHP you can use &lt;a href=&quot;http://www.php.net/manual/en/function.bin2hex.php&quot;&gt;&lt;code&gt;bin2hex()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Si esperas algo m&amp;aacute;s de un entero &lt;strong&gt;hechizo&lt;/strong&gt; . Si lo hechizas, escapar&amp;aacute;s perfectamente de toda entrada. En C / C ++ hay una funci&amp;oacute;n llamada &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.0/en/mysql-hex-string.html&quot;&gt; &lt;code&gt;mysql_hex_string()&lt;/code&gt; &lt;/a&gt; , en PHP puedes usar &lt;a href=&quot;http://www.php.net/manual/en/function.bin2hex.php&quot;&gt; &lt;code&gt;bin2hex()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0094481ec99be1c5a7d70dc70e550f643a741a7d" translate="yes" xml:space="preserve">
          <source>If you expect input to be integer make sure it's &lt;strong&gt;&lt;em&gt;really&lt;/em&gt;&lt;/strong&gt; integer. In a variable-type language like PHP it is this &lt;em&gt;very&lt;/em&gt; important. You can use for example this very simple but powerful solution: &lt;code&gt;sprintf(&quot;SELECT 1,2,3 FROM table WHERE 4 = %u&quot;, $input);&lt;/code&gt;</source>
          <target state="translated">Si espera que la entrada sea entera, aseg&amp;uacute;rese de que sea &lt;strong&gt;&lt;em&gt;realmente&lt;/em&gt;&lt;/strong&gt; entera. En un lenguaje de tipo variable como PHP, esto es &lt;em&gt;muy&lt;/em&gt; importante. Puede usar, por ejemplo, esta soluci&amp;oacute;n muy simple pero poderosa: &lt;code&gt;sprintf(&quot;SELECT 1,2,3 FROM table WHERE 4 = %u&quot;, $input);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="506301687174ad39af3412a5f9d9bf697ce6b22d" translate="yes" xml:space="preserve">
          <source>If you use integers from user input in a condition and take the &lt;code&gt;mysql_real_escape_string&lt;/code&gt; approach, you will suffer from the problem described by &lt;a href=&quot;https://stackoverflow.com/users/978756/polynomial&quot;&gt;Polynomial&lt;/a&gt; in the comments below. This case is trickier because integers would not be surrounded by quotes, so you could deal with by validating that the user input contains only digits.</source>
          <target state="translated">Si utiliza enteros de la entrada del usuario en una condici&amp;oacute;n y adopta el enfoque &lt;code&gt;mysql_real_escape_string&lt;/code&gt; , sufrir&amp;aacute; el problema descrito por &lt;a href=&quot;https://stackoverflow.com/users/978756/polynomial&quot;&gt;Polynomial&lt;/a&gt; en los comentarios a continuaci&amp;oacute;n. Este caso es m&amp;aacute;s complicado porque los enteros no estar&amp;iacute;an rodeados de comillas, por lo que podr&amp;iacute;a lidiar al validar que la entrada del usuario contiene solo d&amp;iacute;gitos.</target>
        </trans-unit>
        <trans-unit id="98415529fb77c227add683c142b9927f11fa1d97" translate="yes" xml:space="preserve">
          <source>If you want to alter the structure of the SQL based on user input, parameterized queries are not going to help, and the escaping required is not covered by &lt;code&gt;mysql_real_escape_string&lt;/code&gt;. In this kind of case, you would be better off passing the user's input through a whitelist to ensure only 'safe' values are allowed through.</source>
          <target state="translated">Si desea alterar la estructura del SQL en funci&amp;oacute;n de la entrada del usuario, las consultas parametrizadas no ayudar&amp;aacute;n, y el escape requerido no est&amp;aacute; cubierto por &lt;code&gt;mysql_real_escape_string&lt;/code&gt; . En este tipo de casos, ser&amp;iacute;a mejor que pasara la entrada del usuario a trav&amp;eacute;s de una lista blanca para asegurarse de que solo se permitan valores &quot;seguros&quot;.</target>
        </trans-unit>
        <trans-unit id="8785f3e80562fc002361ca18a095e5f516055181" translate="yes" xml:space="preserve">
          <source>If you want to take advantage of cache engines, like &lt;a href=&quot;http://en.wikipedia.org/wiki/Redis_%28data_store%29&quot;&gt;Redis&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/Memcached&quot;&gt;Memcached&lt;/a&gt;, maybe DALMP could be a choice. It uses pure &lt;a href=&quot;http://en.wikipedia.org/wiki/MySQLi&quot;&gt;MySQLi&lt;/a&gt;. Check this: &lt;a href=&quot;http://dalmp.readthedocs.org/en/latest/database/PExecute.html&quot;&gt;DALMP Database Abstraction Layer for MySQL using PHP.&lt;/a&gt;</source>
          <target state="translated">Si desea aprovechar los motores de cach&amp;eacute;, como &lt;a href=&quot;http://en.wikipedia.org/wiki/Redis_%28data_store%29&quot;&gt;Redis&lt;/a&gt; o &lt;a href=&quot;http://en.wikipedia.org/wiki/Memcached&quot;&gt;Memcached&lt;/a&gt; , quiz&amp;aacute;s DALMP podr&amp;iacute;a ser una opci&amp;oacute;n. Utiliza &lt;a href=&quot;http://en.wikipedia.org/wiki/MySQLi&quot;&gt;MySQLi&lt;/a&gt; puro. Verifique esto: &lt;a href=&quot;http://dalmp.readthedocs.org/en/latest/database/PExecute.html&quot;&gt;Capa de abstracci&amp;oacute;n de base de datos DALMP para MySQL usando PHP.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bb7a8e4204cd0dadf37e960ba81602dfdecab9d3" translate="yes" xml:space="preserve">
          <source>If you're connecting to a database other than MySQL, there is a driver-specific second option that you can refer to (for example, &lt;code&gt;pg_prepare()&lt;/code&gt; and &lt;code&gt;pg_execute()&lt;/code&gt; for PostgreSQL). PDO is the universal option.</source>
          <target state="translated">Si se est&amp;aacute; conectando a una base de datos que no sea MySQL, hay una segunda opci&amp;oacute;n espec&amp;iacute;fica del controlador a la que puede referirse (por ejemplo, &lt;code&gt;pg_prepare()&lt;/code&gt; y &lt;code&gt;pg_execute()&lt;/code&gt; para PostgreSQL). PDO es la opci&amp;oacute;n universal.</target>
        </trans-unit>
        <trans-unit id="d16f400a258fe645cbcf862d1cdacec8afcc86a4" translate="yes" xml:space="preserve">
          <source>If you're using a recent version of PHP, the &lt;code&gt;mysql_real_escape_string&lt;/code&gt; option outlined below will no longer be available (though &lt;code&gt;mysqli::escape_string&lt;/code&gt; is a modern equivalent). These days the &lt;code&gt;mysql_real_escape_string&lt;/code&gt; option would only make sense for legacy code on an old version of PHP.</source>
          <target state="translated">Si est&amp;aacute; utilizando una versi&amp;oacute;n reciente de PHP, la opci&amp;oacute;n &lt;code&gt;mysql_real_escape_string&lt;/code&gt; que se describe a continuaci&amp;oacute;n ya no estar&amp;aacute; disponible (aunque &lt;code&gt;mysqli::escape_string&lt;/code&gt; es un equivalente moderno). En estos d&amp;iacute;as, la opci&amp;oacute;n &lt;code&gt;mysql_real_escape_string&lt;/code&gt; solo tendr&amp;iacute;a sentido para el c&amp;oacute;digo heredado en una versi&amp;oacute;n anterior de PHP.</target>
        </trans-unit>
        <trans-unit id="a87d9bb2e1e1d38953625a44a667a275d119c139" translate="yes" xml:space="preserve">
          <source>In both cases, you can't use &lt;code&gt;'&lt;/code&gt; to protect the encapsulation.</source>
          <target state="translated">En ambos casos, no puede usar &lt;code&gt;'&lt;/code&gt; para proteger la encapsulaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="bc303fbbb40874deaf199e9d6a1fad1eae12e122" translate="yes" xml:space="preserve">
          <source>In general, such a protection approach is based on &lt;em&gt;whitelisting&lt;/em&gt;.</source>
          <target state="translated">En general, este enfoque de protecci&amp;oacute;n se basa en la &lt;em&gt;lista blanca&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="7fca827b92ede4c4e14d63153d01c7f1f4172674" translate="yes" xml:space="preserve">
          <source>In my opinion, the best way to generally prevent SQL injection in your PHP application (or any web application, for that matter) is to think about your application's architecture. If the only way to protect against SQL injection is to remember to use a special method or function that does The Right Thing every time you talk to the database, you are doing it wrong. That way, it's just a matter of time until you forget to correctly format your query at some point in your code.</source>
          <target state="translated">En mi opinión,la mejor manera de evitar en general la inyección SQL en su aplicación PHP (o cualquier aplicación web,para el caso)es pensar en la arquitectura de su aplicación.Si la única manera de protegerse contra la inyección SQL es recordar usar un método o función especial que haga lo correcto cada vez que hable con la base de datos,lo está haciendo mal.De esa manera,es sólo cuestión de tiempo hasta que olvides formatear correctamente tu consulta en algún punto de tu código.</target>
        </trans-unit>
        <trans-unit id="65b6a7572f51598d01d28ef1ca6341d368dbf0b0" translate="yes" xml:space="preserve">
          <source>In the above example the error mode isn't strictly necessary, &lt;strong&gt;but it is advised to add it&lt;/strong&gt;. This way the script will not stop with a &lt;code&gt;Fatal Error&lt;/code&gt; when something goes wrong. And it gives the developer the chance to &lt;code&gt;catch&lt;/code&gt; any error(s) which are &lt;code&gt;throw&lt;/code&gt;n as &lt;code&gt;PDOException&lt;/code&gt;s.</source>
          <target state="translated">En el ejemplo anterior, el modo de error no es estrictamente necesario, &lt;strong&gt;pero se recomienda agregarlo&lt;/strong&gt; . De esta manera, el script no se detendr&amp;aacute; con un &lt;code&gt;Fatal Error&lt;/code&gt; cuando algo salga mal. Y le da al desarrollador la oportunidad de &lt;code&gt;catch&lt;/code&gt; cualquier error que se &lt;code&gt;throw&lt;/code&gt; como &lt;code&gt;PDOException&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d2db286e4cb56e8b42ba950818e8b8f310b67a57" translate="yes" xml:space="preserve">
          <source>In this case, every dynamic parameter should be hardcoded in your script and chosen from that set.
For example, to do dynamic ordering:</source>
          <target state="translated">En este caso,cada parámetro dinámico debe ser codificado en su guión y elegido de ese conjunto.Por ejemplo,para hacer el ordenamiento dinámico:</target>
        </trans-unit>
        <trans-unit id="6b2d5fd11bcfa0af9c55f66b09eb36931b5296de" translate="yes" xml:space="preserve">
          <source>Information security</source>
          <target state="translated">Seguridad de la información</target>
        </trans-unit>
        <trans-unit id="7be8da2bc759d6b5b0023a64f7e97f8d22bcbce1" translate="yes" xml:space="preserve">
          <source>Injection prevention - &lt;a href=&quot;http://php.net/manual/en/function.mysql-real-escape-string.php&quot;&gt;mysql_real_escape_string()&lt;/a&gt;</source>
          <target state="translated">Prevenci&amp;oacute;n de inyecci&amp;oacute;n - &lt;a href=&quot;http://php.net/manual/en/function.mysql-real-escape-string.php&quot;&gt;mysql_real_escape_string ()&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1f5d58263c5f2019288630bda6ee4cb637fd37bd" translate="yes" xml:space="preserve">
          <source>It escapes considering the variable type. If you try to parameterize table, column names, it would fail as it puts every string in quotes which is an invalid syntax.</source>
          <target state="translated">Se escapa considerando el tipo variable.Si tratas de parametrizar los nombres de las tablas y columnas,fallaría ya que pone cada cadena entre comillas,lo cual es una sintaxis inválida.</target>
        </trans-unit>
        <trans-unit id="e66723c3916c6792b6e9358bbc39573f7f203093" translate="yes" xml:space="preserve">
          <source>It not only saves you from SQL injections but from syntax errors too! Also Supports collections of models with method chaining to filter or apply actions to multiple results at once and multiple connections.</source>
          <target state="translated">No sólo te salva de las inyecciones de SQL,sino también de los errores de sintaxis.También soporta colecciones de modelos con encadenamiento de métodos para filtrar o aplicar acciones a múltiples resultados a la vez y a múltiples conexiones.</target>
        </trans-unit>
        <trans-unit id="f53f074e916e32d9c9de79faceea3b3a0b1b8268" translate="yes" xml:space="preserve">
          <source>It's clear that a prepared statement is also escaping the data, nothing else.</source>
          <target state="translated">Está claro que una declaración preparada también escapa a los datos,nada más.</target>
        </trans-unit>
        <trans-unit id="066059abccc3bb425cd0e667ccb08532bb6fc8ca" translate="yes" xml:space="preserve">
          <source>Learn more about &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/grant.html&quot;&gt;GRANT&lt;/a&gt;.</source>
          <target state="translated">Obtenga m&amp;aacute;s informaci&amp;oacute;n sobre &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/grant.html&quot;&gt;GRANT&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ed0dd15ea735ebf8e4f7aefab757f8823897465c" translate="yes" xml:space="preserve">
          <source>Most databases (including &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.1/en/stored-routines-privileges.html&quot;&gt;MySQL&lt;/a&gt;) enable user access to be restricted to executing stored procedures. The fine-grained security access control is useful to prevent escalation of privileges attacks. This prevents compromised applications from being able to run SQL directly against the database.</source>
          <target state="translated">La mayor&amp;iacute;a de las bases de datos (incluido &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.1/en/stored-routines-privileges.html&quot;&gt;MySQL&lt;/a&gt; ) permiten restringir el acceso del usuario a la ejecuci&amp;oacute;n de procedimientos almacenados. El control de acceso de seguridad detallado es &amp;uacute;til para evitar ataques de escalada de privilegios. Esto evita que las aplicaciones comprometidas puedan ejecutar SQL directamente contra la base de datos.</target>
        </trans-unit>
        <trans-unit id="cbc26a832cdcd4282066d905ed7a05f1fdc9ed21" translate="yes" xml:space="preserve">
          <source>My approach against SQL injection is: clearing user-input data before sending it to the database (before using it inside any query).</source>
          <target state="translated">Mi enfoque contra la inyección SQL es:limpiar los datos introducidos por el usuario antes de enviarlos a la base de datos (antes de usarlos dentro de cualquier consulta).</target>
        </trans-unit>
        <trans-unit id="05f8f3c79f55806a7dcfe96187c4600251c00e11" translate="yes" xml:space="preserve">
          <source>My approach:</source>
          <target state="translated">Mi enfoque:</target>
        </trans-unit>
        <trans-unit id="4d52e8740d9df9e1c638ac50e30925e49fcd8e33" translate="yes" xml:space="preserve">
          <source>No matter if you use prepared statements or &lt;code&gt;mysqli_real_escape_string&lt;/code&gt;, you always have to know the type of input data you're working with.</source>
          <target state="translated">No importa si usa declaraciones preparadas o &lt;code&gt;mysqli_real_escape_string&lt;/code&gt; , siempre debe saber el tipo de datos de entrada con los que est&amp;aacute; trabajando.</target>
        </trans-unit>
        <trans-unit id="529ff19c5e6399e4d50652370e959d26daab503b" translate="yes" xml:space="preserve">
          <source>Not only does this protect against SQL injection, but it also speeds up queries.</source>
          <target state="translated">Esto no sólo protege contra la inyección SQL,sino que también acelera las consultas.</target>
        </trans-unit>
        <trans-unit id="ad07b10ae48ce9bcac4c0024173c1939bf2d4d50" translate="yes" xml:space="preserve">
          <source>Note that this hex method is often used as an SQL injection attack where integers are just like strings and escaped just with &lt;code&gt;mysql_real_escape_string&lt;/code&gt;. Then you can avoid the use of quotes.</source>
          <target state="translated">Tenga en cuenta que este m&amp;eacute;todo hexadecimal se usa a menudo como un ataque de inyecci&amp;oacute;n SQL donde los enteros son como cadenas y se escapan solo con &lt;code&gt;mysql_real_escape_string&lt;/code&gt; . Entonces puede evitar el uso de comillas.</target>
        </trans-unit>
        <trans-unit id="6bd876670bffa2dedbaa4302b16a1c84ee2ebe22" translate="yes" xml:space="preserve">
          <source>Note that when using &lt;code&gt;PDO&lt;/code&gt; to access a MySQL database &lt;em&gt;real&lt;/em&gt; prepared statements are &lt;strong&gt;not used by default&lt;/strong&gt;. To fix this you have to disable the emulation of prepared statements. An example of creating a connection using PDO is:</source>
          <target state="translated">Tenga en cuenta que cuando se usa &lt;code&gt;PDO&lt;/code&gt; para acceder a una base de datos MySQL, &lt;em&gt;las&lt;/em&gt; declaraciones preparadas &lt;em&gt;reales&lt;/em&gt; &lt;strong&gt;no se usan por defecto&lt;/strong&gt; . Para solucionar esto, debe deshabilitar la emulaci&amp;oacute;n de las declaraciones preparadas. Un ejemplo de crear una conexi&amp;oacute;n usando PDO es:</target>
        </trans-unit>
        <trans-unit id="0281801c06d0ce9e250fd24a61b6b6723729516b" translate="yes" xml:space="preserve">
          <source>Now, &lt;strong&gt;why you do you need to prevent your query from SQL injection?&lt;/strong&gt;</source>
          <target state="translated">Ahora, &lt;strong&gt;&amp;iquest;por qu&amp;eacute; necesita evitar que su consulta sea inyectada por SQL?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="26d705214b3428e5682f630c8e66663452ff37b5" translate="yes" xml:space="preserve">
          <source>Now, if someone (a hacker) puts</source>
          <target state="translated">Ahora,si alguien (un hacker)pone</target>
        </trans-unit>
        <trans-unit id="66eb148a1111b249fa1c3f3a55a2330ca909715f" translate="yes" xml:space="preserve">
          <source>Now, if you are an advanced user, start using this defense as you like, but, for beginners, if they can't quickly implement a stored procedure and prepared the statement, it's better to filter input data as much they can.</source>
          <target state="translated">Ahora,si eres un usuario avanzado,empieza a usar esta defensa como quieras,pero,para los principiantes,si no pueden implementar rápidamente un procedimiento almacenado y preparar la declaración,es mejor filtrar los datos de entrada tanto como puedan.</target>
        </trans-unit>
        <trans-unit id="f64627235bbf5e10f0dda979a643fa08ab87651d" translate="yes" xml:space="preserve">
          <source>Now, our point is to prevent security threats such as SQL injection attacks, the question asking (how to prevent an SQL injection attack using PHP), be more realistic, data filtering or clearing input data is the case when using user-input data inside such query, using PHP or any other programming language is not the case, or as recommended by more people to use modern technology such as prepared statement or any other tools that currently supporting SQL injection prevention, consider that these tools not available anymore? How do you secure your application?</source>
          <target state="translated">Ahora bien,nuestro punto es prevenir las amenazas a la seguridad como los ataques de inyección SQL,la pregunta que se hace (cómo prevenir un ataque de inyección SQL usando PHP),ser más realista,el filtrado de datos o la limpieza de datos de entrada es el caso cuando se usan datos de entrada del usuario dentro de dicha consulta,el uso de PHP o cualquier otro lenguaje de programación no es el caso,o según lo recomendado por más personas para usar la tecnología moderna como la declaración preparada o cualquier otra herramienta que actualmente apoya la prevención de la inyección SQL,considerar que estas herramientas ya no están disponibles? ¿Cómo asegura su aplicación?</target>
        </trans-unit>
        <trans-unit id="a2ebdce6e2debca99f4971e3f20fb7e609a0d677" translate="yes" xml:space="preserve">
          <source>Oh, and since you asked about how to do it for an insert, here's an example (using PDO):</source>
          <target state="translated">Oh,y ya que preguntaste cómo hacerlo para una inserción,aquí tienes un ejemplo (usando PDO):</target>
        </trans-unit>
        <trans-unit id="134949ae0b25999cca22947fe40274275ecfbf40" translate="yes" xml:space="preserve">
          <source>Option #1: Use of Prepared Statements (Parameterized Queries)</source>
          <target state="translated">Opción #1:Uso de declaraciones preparadas (Consultas parametrizadas)</target>
        </trans-unit>
        <trans-unit id="5d2a8213d51185403db055f6aea59f59d1a24bff" translate="yes" xml:space="preserve">
          <source>Option #2: Use of Stored Procedures</source>
          <target state="translated">Opción #2:Uso de procedimientos almacenados</target>
        </trans-unit>
        <trans-unit id="ca0c50b92c49801edcf1ea0388797ec4f53add0c" translate="yes" xml:space="preserve">
          <source>Option #3: Escaping all User Supplied Input</source>
          <target state="translated">Opción #3:Escapar de todas las entradas suministradas por el usuario</target>
        </trans-unit>
        <trans-unit id="1b175495915b9cebd7a4f0c7b63ed399ad461fb6" translate="yes" xml:space="preserve">
          <source>Or there is a slightly better answer that suggests just &lt;a href=&quot;https://stackoverflow.com/a/12710285&quot;&gt;another method of string formatting&lt;/a&gt; and even boasts it as the ultimate panacea. While of course, it is not. This method is no better than regular string formatting, yet it keeps all its drawbacks: it is applicable to strings only and, like any other manual formatting, it's essentially optional, non-obligatory measure, prone to human error of any sort.</source>
          <target state="translated">O hay una respuesta un poco mejor que sugiere &lt;a href=&quot;https://stackoverflow.com/a/12710285&quot;&gt;otro m&amp;eacute;todo de formato de cadena&lt;/a&gt; e incluso se jacta de ser la panacea definitiva. Si bien, por supuesto, no lo es. Este m&amp;eacute;todo no es mejor que el formato de cadena normal, pero mantiene todos sus inconvenientes: es aplicable solo a cadenas y, como cualquier otro formato manual, es esencialmente una medida opcional, no obligatoria, propensa a errores humanos de cualquier tipo.</target>
        </trans-unit>
        <trans-unit id="f0ded22686c7a01e80dd23bbdd785e9739881413" translate="yes" xml:space="preserve">
          <source>PDO wins this battle with ease. With support for twelve
different database drivers and named parameters, we can ignore the
small performance loss, and get used to its API. From a security
standpoint, both of them are safe as long as the developer uses them
the way they are supposed to be used</source>
          <target state="translated">PDO gana esta batalla con facilidad.Con soporte para doce diferentes controladores de base de datos y parámetros con nombre,podemos ignorar la pequeña pérdida de rendimiento,y acostumbrarnos a su API.Desde el punto de vista de la seguridad,ambos son seguros siempre y cuando el desarrollador los use como se supone que deben ser usados</target>
        </trans-unit>
        <trans-unit id="54e0d751e792502d244f26c003fbc0168957db96" translate="yes" xml:space="preserve">
          <source>PHP has a specially-made function to prevent these attacks. All you need to do is use the mouthful of a function, &lt;code&gt;mysql_real_escape_string&lt;/code&gt;.</source>
          <target state="translated">PHP tiene una funci&amp;oacute;n especialmente dise&amp;ntilde;ada para prevenir estos ataques. Todo lo que necesita hacer es utilizar la funci&amp;oacute;n de un bocado, &lt;code&gt;mysql_real_escape_string&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ccf9fc49cbe33f37545bdf96ec74793151180cf7" translate="yes" xml:space="preserve">
          <source>Parameterized query AND input validation is the way to go. There are many scenarios under which SQL injection may occur, even though &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; has been used.</source>
          <target state="translated">La consulta parametrizada Y la validaci&amp;oacute;n de entrada es el camino a seguir. Hay muchos escenarios bajo los cuales puede ocurrir la inyecci&amp;oacute;n SQL, a pesar de que &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; ha sido utilizado.</target>
        </trans-unit>
        <trans-unit id="9efa2dbb908a0d252e5cd2661bab4bcef31b8aec" translate="yes" xml:space="preserve">
          <source>Please note that the case you asked about is a fairly simple one and that more complex cases may require more complex approaches. In particular:</source>
          <target state="translated">Tenga en cuenta que el caso sobre el que ha preguntado es bastante simple y que los casos más complejos pueden requerir enfoques más complejos.En particular:</target>
        </trans-unit>
        <trans-unit id="bcf57ec934b9b4abfe2e011b6d61b8f3fe9b293d" translate="yes" xml:space="preserve">
          <source>Please see this question for more detail: &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/18026088/pdo-sends-raw-query-to-mysql-while-mysqli-sends-prepared-query-both-produce-the&quot;&gt;PDO sends raw query to MySQL while Mysqli sends prepared query, both produce the same result&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">Consulte esta pregunta para obtener m&amp;aacute;s detalles: &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/18026088/pdo-sends-raw-query-to-mysql-while-mysqli-sends-prepared-query-both-produce-the&quot;&gt;PDO env&amp;iacute;a consultas sin formato a MySQL mientras Mysqli env&amp;iacute;a consultas preparadas, ambas producen el mismo resultado&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="253bf3e933bdeac3a809eb91c495e40d9d61fe9d" translate="yes" xml:space="preserve">
          <source>Primary defenses:</source>
          <target state="translated">Defensas primarias:</target>
        </trans-unit>
        <trans-unit id="d52155a58f068ac65eaa3922fec6c4b67e140457" translate="yes" xml:space="preserve">
          <source>Query for login authentication match:</source>
          <target state="translated">Consulta para la coincidencia de la autenticación de inicio de sesión:</target>
        </trans-unit>
        <trans-unit id="9d1e4e7d27b519b1da3d7266c9c87d7861741080" translate="yes" xml:space="preserve">
          <source>References:</source>
          <target state="translated">References:</target>
        </trans-unit>
        <trans-unit id="058114cbca517a731cb958e54ea1701d36b6c3b4" translate="yes" xml:space="preserve">
          <source>Regarding many useful answers, I hope to add some value to this thread.</source>
          <target state="translated">En cuanto a muchas respuestas útiles,espero añadir algún valor a este hilo.</target>
        </trans-unit>
        <trans-unit id="e096b01f49b6da8c19f1bffa18f6d83e4dd4871e" translate="yes" xml:space="preserve">
          <source>Regardless of what PHP manual said for ages, &lt;strong&gt;&lt;code&gt;*_escape_string&lt;/code&gt; by no means makes data safe&lt;/strong&gt; and never has been intended to. Besides being useless for any SQL part other than string, manual escaping is wrong, because it is manual as opposite to automated.</source>
          <target state="translated">Independientemente de lo que el manual de PHP haya dicho durante a&amp;ntilde;os, &lt;strong&gt; &lt;code&gt;*_escape_string&lt;/code&gt; de ninguna manera hace que los datos sean seguros&lt;/strong&gt; y nunca ha sido pensado. Adem&amp;aacute;s de ser in&amp;uacute;til para cualquier parte de SQL que no sea cadena, el escape manual es incorrecto, porque es manual en lugar de automatizado.</target>
        </trans-unit>
        <trans-unit id="4b26d7b5c670dfa0c5a71f99bb87ebad73afd959" translate="yes" xml:space="preserve">
          <source>SECURITY UPDATE: The previous &lt;code&gt;str_replace&lt;/code&gt; version allowed injections by adding {#} tokens into user data. This &lt;code&gt;preg_replace_callback&lt;/code&gt; version doesn't cause problems if the replacement contains these tokens.</source>
          <target state="translated">ACTUALIZACI&amp;Oacute;N DE SEGURIDAD: la versi&amp;oacute;n anterior de &lt;code&gt;str_replace&lt;/code&gt; permit&amp;iacute;a inyecciones agregando {#} tokens en los datos del usuario. Esta versi&amp;oacute;n &lt;code&gt;preg_replace_callback&lt;/code&gt; no causa problemas si el reemplazo contiene estos tokens.</target>
        </trans-unit>
        <trans-unit id="2248f755da0797902356c62702fce90dfe90f334" translate="yes" xml:space="preserve">
          <source>SELECT ... WHERE id = -1 union all select column_name from information_schema.column where table_name = &lt;strong&gt;0x61727469636c65&lt;/strong&gt;</source>
          <target state="translated">SELECT ... WHERE id = -1 union all select column_name from information_schema.column donde &lt;strong&gt;table_name&lt;/strong&gt; = &lt;strong&gt;0x61727469636c65&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="72ce3741372785fc3d1b9e81dc08822e0ee3697b" translate="yes" xml:space="preserve">
          <source>SELECT ... WHERE id = &lt;strong&gt;-1 union all select table_name from information_schema.tables&lt;/strong&gt;</source>
          <target state="translated">SELECT ... WHERE id = &lt;strong&gt;-1 union all select table_name from information_schema.tables&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2aaa640d6aff57cc99ee7b8f6b262da344d87124" translate="yes" xml:space="preserve">
          <source>SQL Injection</source>
          <target state="translated">Inyección SQL</target>
        </trans-unit>
        <trans-unit id="aaae6cc0c6e64da88ddbf398d39cff7dd8d70208" translate="yes" xml:space="preserve">
          <source>SQL Injection Cheat Sheet</source>
          <target state="translated">Hoja de trucos de inyección SQL</target>
        </trans-unit>
        <trans-unit id="df8511b36a40094461c2fa8100abbe0ef28e937c" translate="yes" xml:space="preserve">
          <source>SQL injection is an attack that can be done through user inputs (inputs that filled by a user and then used inside queries). The SQL injection patterns are correct query syntax while we can call it: bad queries for bad reasons, and we assume that there might be a bad person that try to get secret information (bypassing access control) that affect the three principles of security (confidentiality, integrity, and availability).</source>
          <target state="translated">La inyección SQL es un ataque que puede realizarse a través de entradas de usuario (entradas que rellena un usuario y que luego utiliza dentro de las consultas).Los patrones de inyección SQL son una sintaxis de consulta correcta,aunque podemos llamarlo:consultas malas por razones malas,y suponemos que puede haber una mala persona que intente obtener información secreta (eludiendo el control de acceso)que afecte a los tres principios de seguridad (confidencialidad,integridad y disponibilidad).</target>
        </trans-unit>
        <trans-unit id="4c18831b8c7d74dba4d4cf532d188cd34482c6be" translate="yes" xml:space="preserve">
          <source>SQL user (limiting user privilege): most common SQL operations are (SELECT, UPDATE, INSERT), then, why give the UPDATE privilege to a user that does not require it? For example, &lt;strong&gt;login, and search pages&lt;/strong&gt; are only using SELECT, then, why use DB users in these pages with high privileges?</source>
          <target state="translated">Usuario SQL (privilegio de usuario limitado): las operaciones SQL m&amp;aacute;s comunes son (SELECCIONAR, ACTUALIZAR, INSERTAR), entonces, &amp;iquest;por qu&amp;eacute; otorgar el privilegio ACTUALIZAR a un usuario que no lo requiere? Por ejemplo, las &lt;strong&gt;p&amp;aacute;ginas de inicio de sesi&amp;oacute;n y b&amp;uacute;squeda&lt;/strong&gt; solo usan SELECT, entonces, &amp;iquest;por qu&amp;eacute; usar usuarios de DB en estas p&amp;aacute;ginas con altos privilegios?</target>
        </trans-unit>
        <trans-unit id="3c9750d49c83fa8a5b3a0075cee19045e8360352" translate="yes" xml:space="preserve">
          <source>Security Principles</source>
          <target state="translated">Principios de seguridad</target>
        </trans-unit>
        <trans-unit id="8a0ff19685c3593d2dd9348235796673a86f433d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://en.wikipedia.org/wiki/Principle_of_least_privilege&quot;&gt;principle of least privilege&lt;/a&gt;.</source>
          <target state="translated">Ver &lt;a href=&quot;http://en.wikipedia.org/wiki/Principle_of_least_privilege&quot;&gt;principio de m&amp;iacute;nimo privilegio&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3bc5aad5e191c67a30c0d326b34a9e4894a1fec3" translate="yes" xml:space="preserve">
          <source>See also, the details of the &lt;a href=&quot;http://php.net/mysql_real_escape_string&quot;&gt;&lt;code&gt;mysql_real_escape_string&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">Vea tambi&amp;eacute;n los detalles de la funci&amp;oacute;n &lt;a href=&quot;http://php.net/mysql_real_escape_string&quot;&gt; &lt;code&gt;mysql_real_escape_string&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="be33bd1eb7dbd848bc959ced6f1d33144f31d5c8" translate="yes" xml:space="preserve">
          <source>So if you use a prepared statement, you must specify the types of the variables for &lt;code&gt;mysqli_stmt_bind_param&lt;/code&gt; function.</source>
          <target state="translated">Entonces, si usa una declaraci&amp;oacute;n preparada, debe especificar los tipos de variables para la funci&amp;oacute;n &lt;code&gt;mysqli_stmt_bind_param&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7791c9096ecb3c52f38cfacf2ed5a600ac8ac03b" translate="yes" xml:space="preserve">
          <source>So, a general recommendation may be phrased as</source>
          <target state="translated">Así pues,una recomendación general puede formularse como</target>
        </trans-unit>
        <trans-unit id="5b4eb875965dcbc46634a834943ce8fb7d495d10" translate="yes" xml:space="preserve">
          <source>So, for example, the query:</source>
          <target state="translated">Así que,por ejemplo,la consulta:</target>
        </trans-unit>
        <trans-unit id="cfd8f629333fbfac1be3ab64cdcec4377eaa444d" translate="yes" xml:space="preserve">
          <source>So, unlike whatever &quot;escaping&quot;, prepared statements &lt;em&gt;is&lt;/em&gt; the measure that indeed protects from SQL injection (when applicable).</source>
          <target state="translated">Entonces, a diferencia de cualquier &quot;escape&quot;, las declaraciones preparadas &lt;em&gt;son&lt;/em&gt; la medida que realmente protege de la inyecci&amp;oacute;n SQL (cuando corresponde).</target>
        </trans-unit>
        <trans-unit id="bdd6c788b4bc40941d92c120767a09a678ddf541" translate="yes" xml:space="preserve">
          <source>Still, there is an issue with SQL syntax keywords (such as &lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;DESC&lt;/code&gt; and such), but white-listing seems the only approach in this case.</source>
          <target state="translated">A&amp;uacute;n as&amp;iacute;, hay un problema con las palabras clave de sintaxis SQL (como &lt;code&gt;AND&lt;/code&gt; , &lt;code&gt;DESC&lt;/code&gt; y dem&amp;aacute;s ), pero la lista blanca parece ser el &amp;uacute;nico enfoque en este caso.</target>
        </trans-unit>
        <trans-unit id="25fe63edd9746e4a688d1d2796a06118495eb155" translate="yes" xml:space="preserve">
          <source>That's because the user can input something like &lt;code&gt;value'); DROP TABLE table;--&lt;/code&gt;, and the query becomes:</source>
          <target state="translated">Eso es porque el usuario puede ingresar algo como &lt;code&gt;value'); DROP TABLE table;--&lt;/code&gt; DROP TABLE table; - , y la consulta se convierte en:</target>
        </trans-unit>
        <trans-unit id="ea6f46a1818ef256a65fd25fce4ef5438834b53d" translate="yes" xml:space="preserve">
          <source>The ** 0x** prefix can only be used for data columns such as &lt;strong&gt;char, varchar, text, block, binary, etc&lt;/strong&gt;.</source>
          <target state="translated">El prefijo ** 0x ** solo se puede usar para columnas de datos como &lt;strong&gt;char, varchar, text, block, binary, etc.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="22493fd5585b849e0dfac158f0d91d71de2a9f53" translate="yes" xml:space="preserve">
          <source>The SQL statement you pass to &lt;code&gt;prepare&lt;/code&gt; is parsed and compiled by the database server. By specifying parameters (either a &lt;code&gt;?&lt;/code&gt; or a named parameter like &lt;code&gt;:name&lt;/code&gt; in the example above) you tell the database engine where you want to filter on. Then when you call &lt;code&gt;execute&lt;/code&gt;, the prepared statement is combined with the parameter values you specify.</source>
          <target state="translated">El servidor de bases de datos analiza y compila la instrucci&amp;oacute;n SQL que pasa para &lt;code&gt;prepare&lt;/code&gt; . Al especificar par&amp;aacute;metros (ya sea un &lt;code&gt;?&lt;/code&gt; O un par&amp;aacute;metro con nombre como &lt;code&gt;:name&lt;/code&gt; en el ejemplo anterior), le dice al motor de la base de datos d&amp;oacute;nde desea filtrar. Luego, cuando llama a &lt;code&gt;execute&lt;/code&gt; , la instrucci&amp;oacute;n preparada se combina con los valores de par&amp;aacute;metros que especifique.</target>
        </trans-unit>
        <trans-unit id="220daddb11e24bc5b6c1d64820ad3b7f7ddb93fa" translate="yes" xml:space="preserve">
          <source>The automatic escaping of values within the server is sometimes
  considered a security feature to prevent SQL injection. The same
  degree of security can be achieved with non-prepared statements if
  input values are escaped correctly.</source>
          <target state="translated">La fuga automática de valores dentro del servidor se considera a veces una característica de seguridad para evitar la inyección SQL.Se puede lograr el mismo grado de seguridad con declaraciones no preparadas si los valores de entrada se escapan correctamente.</target>
        </trans-unit>
        <trans-unit id="8e19049bf34dbc02fad22f1e2a94559fad21acf0" translate="yes" xml:space="preserve">
          <source>The automatic escaping of values within the server is sometimes considered a security feature to prevent SQL injection. The same degree of security can be achieved with non-prepared statements, if input values are escaped correctly</source>
          <target state="translated">La fuga automática de valores dentro del servidor se considera a veces una característica de seguridad para evitar la inyección SQL.El mismo grado de seguridad puede lograrse con declaraciones no preparadas,si los valores de entrada se escapan correctamente</target>
        </trans-unit>
        <trans-unit id="fdf65f1abe7fe4e3d2342b41af2f1116791c2af6" translate="yes" xml:space="preserve">
          <source>The best way to prevent SQL Injection is to use &lt;strong&gt;Prepared Statements&lt;/strong&gt;&lt;em&gt;instead of escaping&lt;/em&gt;, as &lt;a href=&quot;https://stackoverflow.com/a/60496/2224584&quot;&gt;the accepted answer&lt;/a&gt; demonstrates.</source>
          <target state="translated">La mejor manera de evitar la inyecci&amp;oacute;n de SQL es usar &lt;strong&gt;declaraciones preparadas en&lt;/strong&gt; &lt;em&gt;lugar de escapar&lt;/em&gt; , como &lt;a href=&quot;https://stackoverflow.com/a/60496/2224584&quot;&gt;lo&lt;/a&gt; demuestra la respuesta aceptada .</target>
        </trans-unit>
        <trans-unit id="7cc7e03df37b2e8c386abd1ebf523f1b7f2477d6" translate="yes" xml:space="preserve">
          <source>The disadvantages are -</source>
          <target state="translated">Las desventajas son...</target>
        </trans-unit>
        <trans-unit id="b02e13a130f7a3159e0982874d64e46b658e4a3d" translate="yes" xml:space="preserve">
          <source>The important thing here is that the parameter values are combined with the compiled statement, not an SQL string. SQL injection works by tricking the script into including malicious strings when it creates SQL to send to the database. So by sending the actual SQL separately from the parameters, you limit the risk of ending up with something you didn't intend.</source>
          <target state="translated">Lo importante aquí es que los valores de los parámetros se combinen con la sentencia compilada,no con una cadena SQL.La inyección SQL funciona engañando al script para que incluya cadenas maliciosas cuando crea el SQL para enviar a la base de datos.Así que al enviar el SQL real por separado de los parámetros,se limita el riesgo de terminar con algo que no se pretendía.</target>
        </trans-unit>
        <trans-unit id="f2ce25b2d0b72f92570aaba8ea168300f90b408b" translate="yes" xml:space="preserve">
          <source>The key function you'll want to read up on there would be &lt;a href=&quot;http://php.net/mysqli.prepare&quot;&gt;&lt;code&gt;mysqli::prepare&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">La funci&amp;oacute;n clave que querr&amp;aacute; leer all&amp;iacute; ser&amp;iacute;a &lt;a href=&quot;http://php.net/mysqli.prepare&quot;&gt; &lt;code&gt;mysqli::prepare&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8329b222e736716b29e6f8c8d1bf0eb05508d581" translate="yes" xml:space="preserve">
          <source>The last point is detecting unexpected behavior which requires more effort and complexity; it's not recommended for normal web applications.</source>
          <target state="translated">El último punto es la detección de comportamientos inesperados que requieren más esfuerzo y complejidad;no se recomienda para aplicaciones web normales.</target>
        </trans-unit>
        <trans-unit id="ec2ec032df8d4e54047d67def864e600f72c7368" translate="yes" xml:space="preserve">
          <source>The most advanced way is to use PDOs.</source>
          <target state="translated">La forma más avanzada es usar PDOs.</target>
        </trans-unit>
        <trans-unit id="77a019a8e37c861117253efcafbe8b46c80d55cb" translate="yes" xml:space="preserve">
          <source>The other part will be discarded. So, what will happen? A non-authorized user (hacker) will be able to log in as administrator without having his/her password. Now, he/she can do anything that the administrator/email person can do. See, it's very dangerous if SQL injection is not prevented.</source>
          <target state="translated">La otra parte será descartada.Entonces,¿qué pasará? Un usuario no autorizado (hacker)podrá entrar como administrador sin tener su contraseña.Ahora,él puede hacer cualquier cosa que la persona del correo electrónico del administrador pueda hacer.Verás,es muy peligroso si no se previene la inyección SQL.</target>
        </trans-unit>
        <trans-unit id="caef473bbc5d786e58c45a04c732b8e95dae8488" translate="yes" xml:space="preserve">
          <source>The query will be parsed into the system only up to:</source>
          <target state="translated">La consulta será analizada en el sistema sólo hasta..:</target>
        </trans-unit>
        <trans-unit id="0600942d37431f06a2041faca7c57369364ca714" translate="yes" xml:space="preserve">
          <source>The simple alternative to this problem could be solved by granting appropriate permissions in the database itself.
For example: if you are using a MySQL database then enter into the database through terminal or the UI provided and just follow this command:</source>
          <target state="translated">La alternativa sencilla a este problema podría resolverse concediendo los permisos adecuados en la propia base de datos.Por ejemplo:si usted está usando una base de datos MySQL,entonces entre en la base de datos a través de la terminal o la interfaz de usuario proporcionada y sólo siga este comando:</target>
        </trans-unit>
        <trans-unit id="49869c7c4ee5782157501a3f5be9f08cda113757" translate="yes" xml:space="preserve">
          <source>There are libraries such as &lt;a href=&quot;https://github.com/auraphp/Aura.Sql&quot;&gt;Aura.Sql&lt;/a&gt; and &lt;a href=&quot;https://github.com/paragonie/easydb&quot;&gt;EasyDB&lt;/a&gt; that allow developers to use prepared statements easier. To learn more about why prepared statements are better at &lt;a href=&quot;https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide&quot;&gt;stopping SQL injection&lt;/a&gt;, refer to &lt;a href=&quot;https://stackoverflow.com/a/12118602/2224584&quot;&gt;this &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; bypass&lt;/a&gt; and &lt;a href=&quot;https://kraft.im/2015/05/how-emoji-saved-your-sites-hide/&quot;&gt;recently fixed Unicode SQL Injection vulnerabilities in WordPress&lt;/a&gt;.</source>
          <target state="translated">Hay bibliotecas como &lt;a href=&quot;https://github.com/auraphp/Aura.Sql&quot;&gt;Aura.Sql&lt;/a&gt; y &lt;a href=&quot;https://github.com/paragonie/easydb&quot;&gt;EasyDB&lt;/a&gt; que permiten a los desarrolladores usar declaraciones preparadas m&amp;aacute;s f&amp;aacute;cilmente. Para obtener m&amp;aacute;s informaci&amp;oacute;n acerca de por qu&amp;eacute; las declaraciones preparadas son mejores para &lt;a href=&quot;https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide&quot;&gt;detener la inyecci&amp;oacute;n de SQL&lt;/a&gt; , consulte &lt;a href=&quot;https://stackoverflow.com/a/12118602/2224584&quot;&gt;esta &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; &lt;/a&gt; y &lt;a href=&quot;https://kraft.im/2015/05/how-emoji-saved-your-sites-hide/&quot;&gt;las vulnerabilidades de inyecci&amp;oacute;n de Unicode SQL recientemente reparadas en WordPress&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c789aef75c0a5b094c0f29903ad99459e880351c" translate="yes" xml:space="preserve">
          <source>There are likely other cases I'm not aware of. You might find &lt;a href=&quot;http://webappsec.org/projects/articles/091007.txt&quot;&gt;this&lt;/a&gt; is a useful resource on some of the more subtle problems you can encounter.</source>
          <target state="translated">Probablemente hay otros casos que no conozco. Puede encontrar que &lt;a href=&quot;http://webappsec.org/projects/articles/091007.txt&quot;&gt;este&lt;/a&gt; es un recurso &amp;uacute;til en algunos de los problemas m&amp;aacute;s sutiles que puede encontrar.</target>
        </trans-unit>
        <trans-unit id="780ecc400391203ddd8ddd799d6ab422887cada5" translate="yes" xml:space="preserve">
          <source>There are many ways of preventing SQL injections and other SQL hacks. You can easily find it on the Internet (Google Search). Of course &lt;strong&gt;PDO is one of the good solutions.&lt;/strong&gt; But I would like to suggest you some good links prevention from SQL injection.</source>
          <target state="translated">Hay muchas formas de prevenir las inyecciones SQL y otros hacks SQL. Puede encontrarlo f&amp;aacute;cilmente en Internet (B&amp;uacute;squeda de Google). Por supuesto, &lt;strong&gt;PDO es una de las buenas soluciones.&lt;/strong&gt; Pero me gustar&amp;iacute;a sugerirle algunos buenos enlaces de prevenci&amp;oacute;n de inyecci&amp;oacute;n SQL.</target>
        </trans-unit>
        <trans-unit id="218c170e6057412489f970c39cfe283ca621a4f8" translate="yes" xml:space="preserve">
          <source>There are more abilities to prevent this: like identify - if the input is a string, number, char or array, there are so many inbuilt functions to detect this. Also, it would be better to use these functions to check input data.</source>
          <target state="translated">Hay más habilidades para prevenir esto:como identificar-si la entrada es una cadena,un número,un carácter o una matriz,hay tantas funciones incorporadas para detectar esto.Además,sería mejor utilizar estas funciones para comprobar los datos de entrada.</target>
        </trans-unit>
        <trans-unit id="830b53ae56caf2de4b110b5e5e28b176692222da" translate="yes" xml:space="preserve">
          <source>There are so many answers for &lt;strong&gt;PHP and MySQL&lt;/strong&gt;, but here is code for &lt;strong&gt;PHP and Oracle&lt;/strong&gt; for preventing SQL injection as well as regular use of oci8 drivers:</source>
          <target state="translated">Hay muchas respuestas para &lt;strong&gt;PHP y MySQL&lt;/strong&gt; , pero aqu&amp;iacute; hay un c&amp;oacute;digo para &lt;strong&gt;PHP y Oracle&lt;/strong&gt; para evitar la inyecci&amp;oacute;n de SQL, as&amp;iacute; como el uso regular de controladores oci8:</target>
        </trans-unit>
        <trans-unit id="df8b9e7a092d7b299097fd0d02efb87caa3a7f13" translate="yes" xml:space="preserve">
          <source>There is another way to secure identifiers - escaping but I rather stick to whitelisting as a more robust and explicit approach. Yet as long as you have an identifier quoted, you can escape the quote character to make it safe. For example, by default for mysql you have to &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/identifiers.html&quot;&gt;double the quote character to escape it&lt;/a&gt;. For other other DBMS escaping rules would be different.</source>
          <target state="translated">Hay otra forma de proteger los identificadores: escapar, pero prefiero seguir en la lista blanca como un enfoque m&amp;aacute;s s&amp;oacute;lido y expl&amp;iacute;cito. Sin embargo, siempre que tenga un identificador entre comillas, puede escapar del car&amp;aacute;cter de comillas para que sea seguro. Por ejemplo, de forma predeterminada para mysql, debe &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/identifiers.html&quot;&gt;duplicar el car&amp;aacute;cter de comillas para escapar de &amp;eacute;l&lt;/a&gt; . Para otros otros DBMS, las reglas de escape ser&amp;iacute;an diferentes.</target>
        </trans-unit>
        <trans-unit id="f884dfef89c26e94f34c8d0d17a3e45bfbc8acd8" translate="yes" xml:space="preserve">
          <source>There was some discussion in comments, so I finally want to make it clear. These two approaches are very similar, but they are a little different in some ways:</source>
          <target state="translated">Hubo alguna discusión en los comentarios,así que finalmente quiero dejarlo claro.Estos dos enfoques son muy similares,pero son un poco diferentes en algunos aspectos:</target>
        </trans-unit>
        <trans-unit id="224c361000365c82c6c9b9f7d7a6ec856e58482b" translate="yes" xml:space="preserve">
          <source>Therefore, this proves that data validation such as &lt;code&gt;intval()&lt;/code&gt; is a good idea for integer values before sending any query. In addition, preventing malicious user data before sending the query is &lt;strong&gt;a correct and valid approach&lt;/strong&gt;.</source>
          <target state="translated">Por lo tanto, esto prueba que la validaci&amp;oacute;n de datos como &lt;code&gt;intval()&lt;/code&gt; es una buena idea para valores enteros antes de enviar cualquier consulta. Adem&amp;aacute;s, prevenir los datos maliciosos del usuario antes de enviar la consulta es &lt;strong&gt;un enfoque correcto y v&amp;aacute;lido&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="82972fc3059a1c85c5e906a0ee53efee54cb0064" translate="yes" xml:space="preserve">
          <source>They (stored procedures) are tough to maintain and tend to multiply very quickly. This makes managing them an issue.</source>
          <target state="translated">Son (procedimientos almacenados)difíciles de mantener y tienden a multiplicarse muy rápidamente.Esto hace que el manejo de ellos sea un problema.</target>
        </trans-unit>
        <trans-unit id="9db87902986489638b3a9991da4a7a39a2f10d0c" translate="yes" xml:space="preserve">
          <source>They abstract the raw SQL query from the application so less information of the database structure is available to the application. This makes it harder for people to understand the underlying structure of the database and design suitable attacks.</source>
          <target state="translated">Abstraen la consulta SQL en bruto de la aplicación,de modo que la aplicación dispone de menos información de la estructura de la base de datos.Esto hace que sea más difícil para la gente entender la estructura subyacente de la base de datos y diseñar ataques adecuados.</target>
        </trans-unit>
        <trans-unit id="63f9a45d5192235d9d02af20e18d0355ff4d3bbe" translate="yes" xml:space="preserve">
          <source>They accept only parameters, so the advantages of parameterized queries are there. Of course - IMO you still need to sanitize your input - especially if you are using dynamic SQL inside the stored procedure.</source>
          <target state="translated">Sólo aceptan parámetros,por lo que las ventajas de las consultas con parámetros están ahí.Por supuesto-OMI todavía tiene que sanear su entrada-especialmente si está usando SQL dinámico dentro del procedimiento almacenado.</target>
        </trans-unit>
        <trans-unit id="da88560285c94420f786914a9987bc73dbdb490a" translate="yes" xml:space="preserve">
          <source>They are not very suitable for dynamic queries - if they are built to accept dynamic code as parameters then a lot of the advantages are negated.</source>
          <target state="translated">No son muy adecuados para las consultas dinámicas-si están construidos para aceptar el código dinámico como parámetros,entonces muchas de las ventajas quedan anuladas.</target>
        </trans-unit>
        <trans-unit id="a718b71211da4fde3996aa73a97cdfec744e2e31" translate="yes" xml:space="preserve">
          <source>Think about learning &lt;a href=&quot;http://en.wikipedia.org/wiki/MySQLi&quot;&gt;MySQLi&lt;/a&gt;</source>
          <target state="translated">Piensa en aprender &lt;a href=&quot;http://en.wikipedia.org/wiki/MySQLi&quot;&gt;MySQLi&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4bc28bb81fa5e19dbc4f90b70f46fd3864b30aac" translate="yes" xml:space="preserve">
          <source>Think about learning &lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt; (PHP Data Objects) &amp;ndash; it is a database access layer providing a uniform method of access to multiple databases.</source>
          <target state="translated">Piense en aprender &lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt; (PHP Data Objects): es una capa de acceso a la base de datos que proporciona un m&amp;eacute;todo uniforme de acceso a m&amp;uacute;ltiples bases de datos.</target>
        </trans-unit>
        <trans-unit id="b269ba0fd879f3932b2b527ca85caeb00cf5ba6e" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;https://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string&quot;&gt;question&lt;/a&gt; has some good answers about this.</source>
          <target state="translated">Esta &lt;a href=&quot;https://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string&quot;&gt;pregunta&lt;/a&gt; tiene algunas buenas respuestas sobre esto.</target>
        </trans-unit>
        <trans-unit id="92ad37abc91646ccd8977cbbc7608b0efd79be0e" translate="yes" xml:space="preserve">
          <source>This allows running statements in an one-liner C#-ish String.Format like:</source>
          <target state="translated">Esto permite ejecutar declaraciones en un formato de una línea de C#-ish String.Formato como:</target>
        </trans-unit>
        <trans-unit id="d422b5f7b27e73794ff7c5132ab85405bcfe5b91" translate="yes" xml:space="preserve">
          <source>This hex method is often used when you transfer binary data, but I see no reason why not use it on all data to prevent SQL injection attacks. Note that you have to prepend data with &lt;code&gt;0x&lt;/code&gt; or use the MySQL function &lt;code&gt;UNHEX&lt;/code&gt; instead.</source>
          <target state="translated">Este m&amp;eacute;todo hexadecimal se usa a menudo cuando transfiere datos binarios, pero no veo ninguna raz&amp;oacute;n por la que no lo use en todos los datos para evitar ataques de inyecci&amp;oacute;n SQL. Tenga en cuenta que debe anteponer los datos con &lt;code&gt;0x&lt;/code&gt; o utilizar la funci&amp;oacute;n &lt;code&gt;UNHEX&lt;/code&gt; de MySQL en su lugar.</target>
        </trans-unit>
        <trans-unit id="10c3b317d4690df3f686ef3a89e96ef8591796f2" translate="yes" xml:space="preserve">
          <source>This input can be checked early without any prepared statement and stored procedures, but to be on the safe side, using them starts after user-data filtering and validation.</source>
          <target state="translated">Esta entrada puede ser comprobada tempranamente sin ninguna declaración preparada y procedimientos almacenados,pero para estar seguros,su uso comienza después del filtrado y validación de los datos del usuario.</target>
        </trans-unit>
        <trans-unit id="93f5c7f0ce17d7d18825ad4c94168610dc65618a" translate="yes" xml:space="preserve">
          <source>This will restrict the user to only get confined with the specified query's only. Remove the delete permission and so the data would never get deleted from the query fired from the PHP page.
The second thing to do is to flush the privileges so that the MySQL refreshes the permissions and updates.</source>
          <target state="translated">Esto restringirá al usuario para que se limite sólo a la consulta especificada.Elimina el permiso de borrado y así los datos nunca serán borrados de la consulta lanzada desde la página de PHP.La segunda cosa a hacer es eliminar los privilegios para que MySQL actualice los permisos y las actualizaciones.</target>
        </trans-unit>
        <trans-unit id="fff7386dc03b73f854a16a474ef2b8c2fda58dc3" translate="yes" xml:space="preserve">
          <source>This won't solve every problem, but it's a very good stepping stone. I left out obvious items such as checking the variable's existence, format (numbers, letters, etc.).</source>
          <target state="translated">Esto no resolverá todos los problemas,pero es un muy buen trampolín.Dejé de lado elementos obvios como la comprobación de la existencia de la variable,el formato (números,letras,etc.).</target>
        </trans-unit>
        <trans-unit id="16c9cc86f82e3a7c1ca1d9b3739a49f6e61d2e8e" translate="yes" xml:space="preserve">
          <source>Those examples are vulnerable to SQL injection:</source>
          <target state="translated">Esos ejemplos son vulnerables a la inyección SQL:</target>
        </trans-unit>
        <trans-unit id="8789487a1a2a5eb11f2a7cfa438ec136c375dc71" translate="yes" xml:space="preserve">
          <source>To ease the process I wrote a &lt;a href=&quot;https://phpdelusions.net/pdo_examples/order_by&quot;&gt;whitelist helper function&lt;/a&gt; that does all the job in one line:</source>
          <target state="translated">Para facilitar el proceso, escrib&amp;iacute; una &lt;a href=&quot;https://phpdelusions.net/pdo_examples/order_by&quot;&gt;funci&amp;oacute;n auxiliar de la lista blanca&lt;/a&gt; que hace todo el trabajo en una l&amp;iacute;nea:</target>
        </trans-unit>
        <trans-unit id="fa14c04c76de2e2fab6840f10e0b4d476494ed7a" translate="yes" xml:space="preserve">
          <source>To see the current privileges for the user fire the following query.</source>
          <target state="translated">Para ver los privilegios actuales del usuario dispare la siguiente consulta.</target>
        </trans-unit>
        <trans-unit id="b6cd0f951a947782e4aa09afbcf7e67bd3612b70" translate="yes" xml:space="preserve">
          <source>To use the parameterized query, you need to use &lt;a href=&quot;http://php.net/mysqli&quot;&gt;MySQLi&lt;/a&gt; rather than the &lt;a href=&quot;http://php.net/mysql&quot;&gt;MySQL&lt;/a&gt; functions. To rewrite your example, we would need something like the following.</source>
          <target state="translated">Para usar la consulta parametrizada, debe usar &lt;a href=&quot;http://php.net/mysqli&quot;&gt;MySQLi en&lt;/a&gt; lugar de las funciones de &lt;a href=&quot;http://php.net/mysql&quot;&gt;MySQL&lt;/a&gt; . Para reescribir su ejemplo, necesitar&amp;iacute;amos algo como lo siguiente.</target>
        </trans-unit>
        <trans-unit id="92ea56f2bcd611121ebf82d1bb94be8a12add9bd" translate="yes" xml:space="preserve">
          <source>UPDATE 1:</source>
          <target state="translated">ACTUALIZACIÓN 1:</target>
        </trans-unit>
        <trans-unit id="f1e7ccfb017f1e9286a26f4401498e961fa8566b" translate="yes" xml:space="preserve">
          <source>Unexpected behavior in the above user input is SELECT, UNION, IF, SUBSTRING, BENCHMARK, SHA, and root. Once these words detected, you can avoid the input.</source>
          <target state="translated">El comportamiento inesperado en la entrada de usuario anterior es SELECT,UNION,IF,SUBSTRING,BENCHMARK,SHA,y root.Una vez que estas palabras se detectan,se puede evitar la entrada.</target>
        </trans-unit>
        <trans-unit id="fb91e24fa52d8d2b32937bf04d843f730319a902" translate="yes" xml:space="preserve">
          <source>Update</source>
          <target state="translated">Update</target>
        </trans-unit>
        <trans-unit id="58b2e2813f252bd73c0a240fc752d08e7de81f2b" translate="yes" xml:space="preserve">
          <source>Update 2:</source>
          <target state="translated">Actualización 2:</target>
        </trans-unit>
        <trans-unit id="ab598eb253cb41b46f92f26312a455cadea5aee1" translate="yes" xml:space="preserve">
          <source>Update 3:</source>
          <target state="translated">Actualización 3:</target>
        </trans-unit>
        <trans-unit id="a097c6d2f311ec0bb34ee1571b93398b7da217e4" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;PDO&lt;/code&gt; and prepared queries.</source>
          <target state="translated">Use &lt;code&gt;PDO&lt;/code&gt; y consultas preparadas.</target>
        </trans-unit>
        <trans-unit id="536e4e3355286cdf5ee35d48911488b38952ca82" translate="yes" xml:space="preserve">
          <source>Use native PHP functions like: &lt;a href=&quot;http://php.net/manual/en/function.strip-tags.php&quot;&gt;strip_tags&lt;/a&gt;, &lt;a href=&quot;http://php.net/manual/en/function.mysql-real-escape-string.php&quot;&gt;mysql_real_escape_string&lt;/a&gt; or if variable numeric, just &lt;code&gt;(int)$foo&lt;/code&gt;. Read more about type of variables in PHP &lt;a href=&quot;http://php.net/manual/en/language.types.php&quot;&gt;here&lt;/a&gt;. If you're using libraries such as PDO or MySQLi, always use &lt;a href=&quot;http://php.net/manual/en/pdo.quote.php&quot;&gt;PDO::quote()&lt;/a&gt; and &lt;a href=&quot;http://php.net/manual/en/mysqli.real-escape-string.php&quot;&gt;mysqli_real_escape_string()&lt;/a&gt;.</source>
          <target state="translated">Use funciones nativas de PHP como: &lt;a href=&quot;http://php.net/manual/en/function.strip-tags.php&quot;&gt;strip_tags&lt;/a&gt; , &lt;a href=&quot;http://php.net/manual/en/function.mysql-real-escape-string.php&quot;&gt;mysql_real_escape_string&lt;/a&gt; o si es variable num&amp;eacute;rica, solo &lt;code&gt;(int)$foo&lt;/code&gt; . Lea m&amp;aacute;s sobre el tipo de variables en PHP &lt;a href=&quot;http://php.net/manual/en/language.types.php&quot;&gt;aqu&amp;iacute;&lt;/a&gt; . Si est&amp;aacute; utilizando bibliotecas como PDO o MySQLi, use siempre &lt;a href=&quot;http://php.net/manual/en/pdo.quote.php&quot;&gt;PDO :: quote ()&lt;/a&gt; y &lt;a href=&quot;http://php.net/manual/en/mysqli.real-escape-string.php&quot;&gt;mysqli_real_escape_string ()&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d38f5f0dc278ebfe3743f0e9d9ad122b9d88ce8f" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;mysql_real_escape_string()&lt;/code&gt;, which is a pre-defined function in &lt;a href=&quot;http://en.wikipedia.org/wiki/PHP&quot;&gt;PHP&lt;/a&gt;, and this code add backslashes to the following characters: &lt;code&gt;\x00&lt;/code&gt;, &lt;code&gt;\n&lt;/code&gt;, &lt;code&gt;\r&lt;/code&gt;, &lt;code&gt;\&lt;/code&gt;, &lt;code&gt;'&lt;/code&gt;, &lt;code&gt;&quot;&lt;/code&gt; and &lt;code&gt;\x1a&lt;/code&gt;. Pass the input values as parameters to minimize the chance of SQL injection.</source>
          <target state="translated">Uso de &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; , que es una funci&amp;oacute;n predefinida en &lt;a href=&quot;http://en.wikipedia.org/wiki/PHP&quot;&gt;PHP&lt;/a&gt; , y este c&amp;oacute;digo agrega barras invertidas a los siguientes caracteres: &lt;code&gt;\x00&lt;/code&gt; , &lt;code&gt;\n&lt;/code&gt; , &lt;code&gt;\r&lt;/code&gt; , &lt;code&gt;\&lt;/code&gt; , &lt;code&gt;'&lt;/code&gt; , &lt;code&gt;&quot;&lt;/code&gt; y &lt;code&gt;\x1a&lt;/code&gt; . Pase los valores de entrada como par&amp;aacute;metros para minimizar la posibilidad de inyecci&amp;oacute;n SQL.</target>
        </trans-unit>
        <trans-unit id="56d170f163928a8c1fff4954924527fa155e8ca3" translate="yes" xml:space="preserve">
          <source>Use other tools: Here, I will also agree with you that a prepared statement (parametrized query) and stored procedures. The disadvantages here is these ways require advanced skills which do not exist for most users. The basic idea here is to distinguish between the SQL query and the data that is used inside. Both approaches can be used even with unsafe data, because the user-input data here does not add anything to the original query, such as (any or x=x).</source>
          <target state="translated">Usa otras herramientas:Aquí,también estaré de acuerdo con usted en que una declaración preparada (consulta parametrizada)y procedimientos almacenados.Las desventajas aquí es que estas formas requieren habilidades avanzadas que no existen para la mayoría de los usuarios.La idea básica aquí es distinguir entre la consulta SQL y los datos que se utilizan en su interior.Ambos enfoques pueden utilizarse incluso con datos inseguros,porque los datos introducidos por el usuario aquí no añaden nada a la consulta original,como (any o x=x).</target>
        </trans-unit>
        <trans-unit id="2ab1b2c4d270d99ef373efcd0f8b8574c802370d" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;http://in3.php.net/pdo&quot;&gt;PDO&lt;/a&gt; and &lt;a href=&quot;http://in3.php.net/mysqli&quot;&gt;MYSQLi&lt;/a&gt; is a good practice to prevent SQL injections, but if you really want to work with MySQL functions and queries, it would be better to use</source>
          <target state="translated">Usar &lt;a href=&quot;http://in3.php.net/pdo&quot;&gt;PDO&lt;/a&gt; y &lt;a href=&quot;http://in3.php.net/mysqli&quot;&gt;MYSQLi&lt;/a&gt; es una buena pr&amp;aacute;ctica para evitar inyecciones de SQL, pero si realmente desea trabajar con las funciones y consultas de MySQL, ser&amp;iacute;a mejor usar</target>
        </trans-unit>
        <trans-unit id="38c0c660c5df9571196ca554badedbf16ace904b" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot;&gt;MySQLi&lt;/a&gt; (for MySQL):</source>
          <target state="translated">Usando &lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot;&gt;MySQLi&lt;/a&gt; (para MySQL):</target>
        </trans-unit>
        <trans-unit id="a4e7bd1b02d3303b9bd6d557965df01c324c3557" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt; (for any supported database driver):</source>
          <target state="translated">Usando &lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt; (para cualquier controlador de base de datos compatible):</target>
        </trans-unit>
        <trans-unit id="64fd160974da8c9008dad32fa19315d8009920f4" translate="yes" xml:space="preserve">
          <source>Using this PHP function &lt;code&gt;mysql_escape_string()&lt;/code&gt; you can get a good prevention in a fast way.</source>
          <target state="translated">Usando esta funci&amp;oacute;n PHP &lt;code&gt;mysql_escape_string()&lt;/code&gt; puede obtener una buena prevenci&amp;oacute;n de una manera r&amp;aacute;pida.</target>
        </trans-unit>
        <trans-unit id="0d3a08ce38eb2066c704c7481d4b7d5c8f7699f5" translate="yes" xml:space="preserve">
          <source>We'll cover the lower impact string escaping one first.</source>
          <target state="translated">Cubriremos la cuerda de impacto inferior escapando uno primero.</target>
        </trans-unit>
        <trans-unit id="b0ca7362248cae31401c4742155c18ebaa5ff23d" translate="yes" xml:space="preserve">
          <source>What can be done to prevent this from happening?</source>
          <target state="translated">¿Qué se puede hacer para evitar que esto suceda?</target>
        </trans-unit>
        <trans-unit id="4ec900e30a04771ad57031ac632ba224fe5ec06c" translate="yes" xml:space="preserve">
          <source>What is &lt;strong&gt;mandatory&lt;/strong&gt;, however, is the first &lt;code&gt;setAttribute()&lt;/code&gt; line, which tells PDO to disable emulated prepared statements and use &lt;em&gt;real&lt;/em&gt; prepared statements. This makes sure the statement and the values aren't parsed by PHP before sending it to the MySQL server (giving a possible attacker no chance to inject malicious SQL).</source>
          <target state="translated">Sin embargo, lo que es &lt;strong&gt;obligatorio&lt;/strong&gt; es la primera l&amp;iacute;nea &lt;code&gt;setAttribute()&lt;/code&gt; , que le dice a PDO que deshabilite las declaraciones preparadas emuladas y use declaraciones preparadas &lt;em&gt;reales&lt;/em&gt; . Esto asegura que la declaraci&amp;oacute;n y los valores no sean analizados por PHP antes de enviarlos al servidor MySQL (dando a un posible atacante la posibilidad de inyectar SQL malicioso).</target>
        </trans-unit>
        <trans-unit id="4a061bb9449a7869b1bb6c140f6c244c24e19160" translate="yes" xml:space="preserve">
          <source>Whatever you do end up using, make sure that you check your input hasn't already been mangled by &lt;code&gt;magic_quotes&lt;/code&gt; or some other well-meaning rubbish, and if necessary, run it through &lt;code&gt;stripslashes&lt;/code&gt; or whatever to sanitize it.</source>
          <target state="translated">Sea lo que sea que &lt;code&gt;magic_quotes&lt;/code&gt; usando, aseg&amp;uacute;rate de verificar que tu entrada no haya sido destruida por magic_quotes o alguna otra basura bien intencionada, y si es necesario, &lt;code&gt;stripslashes&lt;/code&gt; trav&amp;eacute;s de tiras o lo que sea para desinfectarla.</target>
        </trans-unit>
        <trans-unit id="00f02bbdebbfdbc228c8163a6409202a17282e4d" translate="yes" xml:space="preserve">
          <source>While you can still use prepared statements for the query parameters, the structure of the dynamic query itself cannot be parametrized and certain query features cannot be parametrized.</source>
          <target state="translated">Aunque se pueden utilizar declaraciones preparadas para los parámetros de la consulta,la estructura de la consulta dinámica en sí misma no puede ser parametrizada y ciertas características de la consulta no pueden ser parametrizadas.</target>
        </trans-unit>
        <trans-unit id="1ac6d9646522fe48ad32b3fffb2a4692cff0ee0f" translate="yes" xml:space="preserve">
          <source>Will become:</source>
          <target state="translated">Se convertirá:</target>
        </trans-unit>
        <trans-unit id="204b32dc579f45400949999976e4e7bd02995817" translate="yes" xml:space="preserve">
          <source>You basically have two options to achieve this:</source>
          <target state="translated">Básicamente tienes dos opciones para lograrlo:</target>
        </trans-unit>
        <trans-unit id="ec00a1df9d6128980fc27b80f095461babcb7153" translate="yes" xml:space="preserve">
          <source>You can find more details in &lt;em&gt;&lt;a href=&quot;http://www.tizag.com/mysqlTutorial/mysql-php-sql-injection.php&quot;&gt;MySQL - SQL Injection Prevention&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">Puede encontrar m&amp;aacute;s detalles en &lt;em&gt;&lt;a href=&quot;http://www.tizag.com/mysqlTutorial/mysql-php-sql-injection.php&quot;&gt;MySQL - Prevenci&amp;oacute;n de inyecci&amp;oacute;n SQL&lt;/a&gt;&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="b865044a62cd48efbfda9b53b850310ecec07a85" translate="yes" xml:space="preserve">
          <source>You could do something basic like this:</source>
          <target state="translated">Podrías hacer algo básico como esto:</target>
        </trans-unit>
        <trans-unit id="0cff3e61f8aade5ced706b23961eeb5d59ba96ea" translate="yes" xml:space="preserve">
          <source>You've got two options - escaping the special characters in your &lt;code&gt;unsafe_variable&lt;/code&gt;, or using a parameterized query. Both would protect you from SQL injection. The parameterized query is considered the better practice but will require changing to a newer MySQL extension in PHP before you can use it.</source>
          <target state="translated">Tiene dos opciones: escapar de los caracteres especiales en su &lt;code&gt;unsafe_variable&lt;/code&gt; o usar una consulta parametrizada. Ambos lo proteger&amp;iacute;an de la inyecci&amp;oacute;n SQL. La consulta parametrizada se considera la mejor pr&amp;aacute;ctica, pero requerir&amp;aacute; cambiar a una nueva extensi&amp;oacute;n MySQL en PHP antes de que pueda usarla.</target>
        </trans-unit>
        <trans-unit id="c37f5d4c24ebe19faceff2fa752f48ced17e4bc7" translate="yes" xml:space="preserve">
          <source>a number</source>
          <target state="translated">un número</target>
        </trans-unit>
        <trans-unit id="555d01e6c83266b3e9f92bd811905370caf62770" translate="yes" xml:space="preserve">
          <source>a string</source>
          <target state="translated">una cuerda</target>
        </trans-unit>
        <trans-unit id="5bb5bc166d482477e7f41c8996346a70df7264aa" translate="yes" xml:space="preserve">
          <source>a syntax keyword</source>
          <target state="translated">una palabra clave de sintaxis</target>
        </trans-unit>
        <trans-unit id="415dd55dd005527a8b6d386ea933f1cb842449b8" translate="yes" xml:space="preserve">
          <source>an attack can inject you very &lt;em&gt;easily&lt;/em&gt;. Consider the following injected code returned from your script:</source>
          <target state="translated">Un ataque puede inyectarte muy &lt;em&gt;f&amp;aacute;cilmente&lt;/em&gt; . Considere el siguiente c&amp;oacute;digo inyectado devuelto por su script:</target>
        </trans-unit>
        <trans-unit id="eb4952e764d7c270f5b65eab412865f0e3d1e28d" translate="yes" xml:space="preserve">
          <source>an identifier</source>
          <target state="translated">un identificador</target>
        </trans-unit>
        <trans-unit id="e371325eaf8cf1513b8fb5c935edacb07019dc53" translate="yes" xml:space="preserve">
          <source>and now just extract table structure:</source>
          <target state="translated">y ahora sólo extraer la estructura de la mesa:</target>
        </trans-unit>
        <trans-unit id="00a568b3ade5326f00d2f75efc890a8fa7d228a0" translate="yes" xml:space="preserve">
          <source>and password anything....</source>
          <target state="translated">...y ponerle una contraseña a cualquier cosa...</target>
        </trans-unit>
        <trans-unit id="dcdc68162ecd47207ad2d4500cb7f65ba1b2f599" translate="yes" xml:space="preserve">
          <source>is_numeric</source>
          <target state="translated">is_numeric</target>
        </trans-unit>
        <trans-unit id="b32f9e192cce5e6c514823660d6fc173cb3dd500" translate="yes" xml:space="preserve">
          <source>is_string</source>
          <target state="translated">is_string</target>
        </trans-unit>
        <trans-unit id="77064c82097c6f5dee58b4d6d530b90e598c4da1" translate="yes" xml:space="preserve">
          <source>more information about &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/flush.html&quot;&gt;flush&lt;/a&gt;.</source>
          <target state="translated">M&amp;aacute;s informaci&amp;oacute;n sobre &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/flush.html&quot;&gt;flush&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="71d20c07a9f068a85df7519fb5b1a4e4eecf531f" translate="yes" xml:space="preserve">
          <source>mysql_real_escape_string</source>
          <target state="translated">mysql_real_escape_string</target>
        </trans-unit>
        <trans-unit id="6ccd64ba549314b5da86aaa89a6184349dcc2710" translate="yes" xml:space="preserve">
          <source>mysql_real_escape_string() will not protect here. If you use single quotes (' ') around your variables inside your query is what protects you against this. Here is an solution below for this:</source>
          <target state="translated">mysql_real_escape_string()no protegerá aquí.Si usas comillas simples (' ')alrededor de tus variables dentro de tu consulta es lo que te protege contra esto.Aquí tienes una solución para esto:</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
