<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/182287">
    <body>
      <group id="182287">
        <trans-unit id="24e710c67e0fd1aa1109e788dd7bfe15b56ab6e3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Late answer, consult my side note).&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（遅い答え、私のサイドノートを参照してください）。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="abb4f45f57d5a02cc323d365ac9c7f7fff26508d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Side note:&lt;/strong&gt; I added this answer (as a community wiki) because it often used to close questions with, where some people posted questions similar to this in trying to bind a &lt;strong&gt;database&lt;/strong&gt; and not a table and/or column.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サイドノート：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私はこの回答を（コミュニティーWikiとして）追加しました。これは、質問を閉じるためによく使用されていたため&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。テーブルや列ではなく&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;データベース&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をバインドしようとして、これに似た質問を投稿した人&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もいます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3bc53861a89e7c37ae787827e0114f69f6a2947e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table and Column names CANNOT be replaced by parameters in PDO.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;テーブル名と列名は、PDOのパラメーターで置き換えることはできません。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1dbe76d641093b5ed16d2f150029f69b8de25715" translate="yes" xml:space="preserve">
          <source>As for the main question in this thread, the other posts made it clear why we can't bind values to column names when preparing statements, so here is one solution:</source>
          <target state="translated">このスレッドの本題については、他の投稿で、ステートメントを準備する際にカラム名に値をバインドできない理由が明らかになっていますので、ここでは一つの解決策を紹介します。</target>
        </trans-unit>
        <trans-unit id="384a1d8ea079e646068e0e42ace9abda19129a8d" translate="yes" xml:space="preserve">
          <source>By leaving no default case or using a default case that returns an error message you ensure that only values that you want used get used.</source>
          <target state="translated">デフォルトケースを使用しないか、エラーメッセージを返すデフォルトケースを使用することで、使用したい値だけが使用されることを保証します。</target>
        </trans-unit>
        <trans-unit id="2b82ca65a8f1030df9353dd56f8a4f41409c89b5" translate="yes" xml:space="preserve">
          <source>Can PHP PDO Statements accept the table or column name as parameter</source>
          <target state="translated">PHP の PDO ステートメントで、パラメータとしてテーブル名やカラム名を指定することはできますか?</target>
        </trans-unit>
        <trans-unit id="a83468588048f768624c0f8097bd42880f4e892f" translate="yes" xml:space="preserve">
          <source>I have a function that receives two parameters like...</source>
          <target state="translated">のような2つのパラメータを受け取る関数を持っています...</target>
        </trans-unit>
        <trans-unit id="a30f6494ace13f7bab1438deae1a138e622ce162" translate="yes" xml:space="preserve">
          <source>I haven't really thought through it, but it seems like removing anything except characters and underscores might work.</source>
          <target state="translated">考え抜いたわけではありませんが、文字とアンダースコア以外は削除しても大丈夫そうですね。</target>
        </trans-unit>
        <trans-unit id="5bad51b276706cc2ff3239c00b110342a169b1cd" translate="yes" xml:space="preserve">
          <source>I see this is an old post, but I found it useful and thought I'd share a solution similar to what @kzqai suggested:</source>
          <target state="translated">これは古い投稿ですが、私はそれが有用であることを見つけたので、@kzqaiが提案したものと似たような解決策を共有しようと思いました。</target>
        </trans-unit>
        <trans-unit id="dc6c3cb6d26cb6f183c56b72e4222e789e6cb27e" translate="yes" xml:space="preserve">
          <source>I.e.:</source>
          <target state="translated">I.e.:</target>
        </trans-unit>
        <trans-unit id="02a6e1e3489628469a04b2c9b34a91dea3483252" translate="yes" xml:space="preserve">
          <source>In that case you will simply want to filter and sanitize the data manually. One way to do this is to pass in shorthand parameters to the function that will execute the query dynamically and then use a &lt;code&gt;switch()&lt;/code&gt; statement to create a white list of valid values to be used for the table name or column name. That way no user input ever goes directly into the query. So for example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その場合は、単にデータを手動でフィルタリングしてサニタイズする必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これを行う1つの方法は、クエリを動的に実行する関数に省略形のパラメーターを渡してから、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;switch()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステートメントを使用して、テーブル名または列名に使用する有効な値のホワイトリストを作成することです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これにより、ユーザー入力がクエリに直接入力されることはありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;だから例えば：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30e734282a8ea6a008a4977d23816c5e5fba6323" translate="yes" xml:space="preserve">
          <source>Inside I check against arrays I've set up to make sure only tables and columns with &quot;blessed&quot; tables are accessible:</source>
          <target state="translated">内部では、「祝福された」テーブルと列だけがアクセスできるように設定した配列と照合しています。</target>
        </trans-unit>
        <trans-unit id="064641b43f5539b9ed82ee860d0cbb078a0c1794" translate="yes" xml:space="preserve">
          <source>Is there another safe way to insert a table name into a SQL query? With safe, I mean that I don't want to do</source>
          <target state="translated">SQLクエリにテーブル名を挿入する別の安全な方法はありますか?安全というのは、私がしたくないことは</target>
        </trans-unit>
        <trans-unit id="8c3d882f0f16f841504e5c15869f8f42659ac2e3" translate="yes" xml:space="preserve">
          <source>Part of me wonders if you could provide your own custom sanitizing function as simple as this:</source>
          <target state="translated">私の一部は、このような簡単な独自のカスタムサニタイズ機能を提供することができないかと疑問に思っています。</target>
        </trans-unit>
        <trans-unit id="16618efe59d5919d52e4497327442206630ee808" translate="yes" xml:space="preserve">
          <source>The above is just an example, so needless to say, copy-&amp;gt;paste won't work. Adjust for your needs.
Now this may not provide 100% security, but it allows some control over the column names when they &quot;come in&quot; as dynamic strings and may be changed on users end. Furthermore, there is no need to build some array with your table column names and types since they are extracted from the information_schema.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記は一例ですので、言うまでもなくcopy-&amp;gt; pasteは機能しません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ニーズに合わせて調整します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これで100％のセキュリティは提供されない可能性がありますが、動的文字列として「入ってくる」ときにユーザー名で変更できるように、列名をある程度制御できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さらに、それらはinformation_schemaから抽出されるため、テーブルの列名と型で配列を構築する必要はありません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e25cbdb25382ce69770855b24324b6ac8671b89f" translate="yes" xml:space="preserve">
          <source>The plan for &lt;code&gt;SELECT name FROM my_table WHERE id = :value&lt;/code&gt; will be the same whatever you substitute for &lt;code&gt;:value&lt;/code&gt;, but the seemingly similar &lt;code&gt;SELECT name FROM :table WHERE id = :value&lt;/code&gt; cannot be planned, because the DBMS has no idea what table you're actually going to select from.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;SELECT name FROM my_table WHERE id = :value&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の計画は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;:value&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに何でも同じです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、DBMSはどのテーブルを認識していないので&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、一見似た&lt;/font&gt;&lt;/font&gt; &lt;code&gt;SELECT name FROM :table WHERE id = :value&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は計画できません。実際に選択するつもりです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="91435555f22635a26c4d213da7d6fdfed16ec944" translate="yes" xml:space="preserve">
          <source>The same rule applies when trying to create a &quot;database&quot;.</source>
          <target state="translated">データベース」を作成しようとする場合も同様のルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="73610e9c90576b5df793a7af90fbd0f7c51fa443" translate="yes" xml:space="preserve">
          <source>Then the PHP check before running PDO looks like...</source>
          <target state="translated">すると、PDOを実行する前のPHPのチェックは次のようになります。</target>
        </trans-unit>
        <trans-unit id="d27f913ee472e2ac9a6a8080ed0bf6751e1374fb" translate="yes" xml:space="preserve">
          <source>This is not something an abstraction library like PDO can or should work around, either, since it would defeat the 2 key purposes of prepared statements: 1) to allow the database to decide in advance how a query will be run, and use the same plan multiple times; and 2) to prevent security issues by separating the logic of the query from the variable input.</source>
          <target state="translated">これはPDOのような抽象化ライブラリが回避できるものではありませんし、回避すべきものでもありません。1)クエリがどのように実行されるかをデータベースが事前に決定し、同じプランを複数回使用できるようにすること、2)クエリのロジックを変数の入力から分離することでセキュリティの問題を防ぐこと。</target>
        </trans-unit>
        <trans-unit id="e566b4689c893755d6a15505c3c92934f2d0281c" translate="yes" xml:space="preserve">
          <source>To understand &lt;em&gt;why&lt;/em&gt; binding a table (or column) name doesn't work, you have to understand how the placeholders in prepared statements work: they are not simply substituted in as (suitably escaped) strings, and the resulting SQL executed. Instead, a DBMS asked to &quot;prepare&quot; a statement comes up with a complete query plan for how it would execute that query, including which tables and indexes it would use, which will be the same regardless of how you fill in the placeholders.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;理解するために&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、なぜ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表（または列）を結合名前が仕事をしない、あなたは準備された文の仕事にどのようにプレースホルダを理解する必要があります：彼らは単に（適切にエスケープ）文字列としてで置換されていない、そして得られたSQLを実行します。代わりに、ステートメントを「準備する」ように要求されたDBMSは、どのテーブルとインデックスを使用するかなど、そのクエリの実行方法に関する完全なクエリプランを作成します。これは、プレースホルダーの入力方法に関係なく同じです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4b5a2cee39ea258afb1c8f413cd4b8614e84b9c1" translate="yes" xml:space="preserve">
          <source>Using the former isn't inherently more safe than the latter, you need to sanitize the input whether it's part of a parameter array or a simple variable.  So I don't see anything wrong with using the latter form with &lt;code&gt;$table&lt;/code&gt;, provided you make sure that the content of &lt;code&gt;$table&lt;/code&gt; is safe (alphanum plus underscores?) before using it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;前者を使用することは、後者より本質的に安全ではないため、パラメーター配列の一部であっても、単純な変数であっても、入力を無害化する必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$table&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;後者のフォームを使用しても問題はありません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。使用する前に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$table&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のコンテンツ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が安全&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;であることを確認してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（alphanumとアンダースコア）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1d29c71706c88f5bfc0eda5abb752bd03114d53" translate="yes" xml:space="preserve">
          <source>Why can't I pass the table name to a prepared PDO statement?</source>
          <target state="translated">用意されたPDO文にテーブル名を渡すことができないのはなぜですか?</target>
        </trans-unit>
        <trans-unit id="ad0846d159368e05174643cfb15ae8e34fd48113" translate="yes" xml:space="preserve">
          <source>You cannot use a prepared statement to bind a database.</source>
          <target state="translated">準備されたステートメントを使用してデータベースをバインドすることはできません。</target>
        </trans-unit>
        <trans-unit id="c870c45bc08c3074aad1e8f9f5c6cd8547361f2f" translate="yes" xml:space="preserve">
          <source>will not work. Use a safelist instead.</source>
          <target state="translated">は機能しません。代わりにセーフリストを使用してください。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
