<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/1894269">
    <body>
      <group id="1894269">
        <trans-unit id="0efa36d79f4277cd0a1634134e19c449ff1d8c3e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/library/ast.html#ast.literal_eval&quot;&gt;ast.literal_eval&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/library/ast.html#ast.literal_eval&quot;&gt;ast.literal_eval&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="3d10339196a81962d0d1e9b813c2ebbf2f1c024b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Method 1: ast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Способ 1: аст&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f58347e9ebee23af87e44396802111fa64d512ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Method 2: json&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Способ 2: JSON&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b50716922eeadc66b2c972743fb015cbfaf5afc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Method 3: no import&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Способ 3: нет импорта&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cfb5d50304308b17ebe90d8546b1db6443b3e87d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Stepwise explanation:&lt;/strong&gt;
You remove all whitespacing,bracketing and value_separators (provided they are not part of the values you want to extract, else make the regex more complex). Then you split the cleaned string on single or double quotes and take the non-empty values (or odd indexed values, whatever the preference).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Пошаговое объяснение:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Вы удаляете все пробелы, скобки и разделители-значения (если они не являются частью значений, которые вы хотите извлечь, иначе вы можете сделать регулярное выражение более сложным). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Затем вы разбиваете очищенную строку на одинарные или двойные кавычки и принимаете непустые значения (или нечетные индексированные значения, независимо от предпочтения).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bf94990c867270f3099a34a94ba3c7096ab1eda3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;testsample&lt;/strong&gt;: &quot;['21',&quot;foo&quot; '6', '0', &quot; A&quot;]&quot;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;testample&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &quot;['21',&quot; foo &quot;'6', '0',&quot; A &quot;]&quot;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e8cbfde7c4cc21636bc649f60d12f565114cb0d8" translate="yes" xml:space="preserve">
          <source>Assuming that all your inputs are lists and that the double quotes in the input actually don't matter, this can be done with a simple regexp replace.  It is a bit perl-y but works like a charm.  Note also that the output is now a list of unicode strings, you didn't specify that you needed that, but it seems to make sense given unicode input.</source>
          <target state="translated">Предполагая,что все ваши входные данные-это списки,и что двойные кавычки во входных данных на самом деле не имеют значения,это может быть сделано с помощью простой замены регенерата.Это немного perl-y,но работает как шарм.Обратите также внимание,что вывод теперь является списком строк в юникоде,вы не указывали,что вам это нужно,но кажется,что это имеет смысл,учитывая ввод в юникоде.</target>
        </trans-unit>
        <trans-unit id="f97d7fef6c365f9ab4ada340798413b18b7da5c0" translate="yes" xml:space="preserve">
          <source>Convert string representation of list to list</source>
          <target state="translated">Преобразование строкового представления списка в список</target>
        </trans-unit>
        <trans-unit id="603de3067137b63bad6fd195e5e19c3d52e80fd3" translate="yes" xml:space="preserve">
          <source>Even in case user puts spaces in between the commas, and spaces inside of the quotes. I need to handle that as well to:</source>
          <target state="translated">Даже в том случае,если пользователь ставит пробелы между запятыми,и пробелы внутри кавычек.Мне нужно разобраться и с этим:</target>
        </trans-unit>
        <trans-unit id="6dbad64345284e58c377473ea568ef0aa37305e8" translate="yes" xml:space="preserve">
          <source>I know I can strip spaces with &lt;code&gt;strip()&lt;/code&gt; and &lt;code&gt;split()&lt;/code&gt; using the split operator and check for non alphabets. But the code was getting very kludgy. Is there a quick function that I'm not aware of?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я знаю, что могу вырезать пробелы с помощью &lt;/font&gt;&lt;/font&gt; &lt;code&gt;strip()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt; &lt;code&gt;split()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; с помощью оператора split и проверять наличие не алфавитов. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Но код становился очень грязным. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Есть ли быстрая функция, о которой я не знаю?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e8120b59cab0e80b79772ba15069e171c182442e" translate="yes" xml:space="preserve">
          <source>I was disappointed to see what I considered the method with the worst readability was the method with the best performance... there are tradeoffs to consider when going with the most readable option... for the type of workloads I use python for I usually value readability over a slightly more performant option, but as usual it depends.</source>
          <target state="translated">Я был разочарован,увидев,что,по моему мнению,метод с наихудшей читабельности-это метод с наилучшей производительностью...есть компромиссы,которые следует учитывать при выборе наиболее читабельного варианта...для типа рабочих нагрузок я использую питон,так как обычно я ценю читабельность,а не чуть более производительный вариант,но,как обычно,это зависит от того,как это будет выглядеть.</target>
        </trans-unit>
        <trans-unit id="4cd53bb83a5fd1a235d97d838d4c0d1c617a578f" translate="yes" xml:space="preserve">
          <source>I was wondering what the simplest way is to convert a &lt;code&gt;string&lt;/code&gt; list like the following to a &lt;code&gt;list&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Мне было интересно, как проще всего преобразовать &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;список &lt;/font&gt;&lt;/font&gt; &lt;code&gt;string&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; подобный следующему, в &lt;/font&gt;&lt;/font&gt; &lt;code&gt;list&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a2f9cb454f77f58eb776888eafbb9e728ebb6d0f" translate="yes" xml:space="preserve">
          <source>I would like to provide a more intuitive patterning solution with regex. 
The below function takes as input a stringified list containing arbitrary strings.</source>
          <target state="translated">Я хотел бы предоставить более интуитивное решение для структурирования с регексом.Функция ниже принимает за вход строчный список,содержащий произвольные строки.</target>
        </trans-unit>
        <trans-unit id="2530df1ee2adb8c504ac203a87dd3b84ec87380e" translate="yes" xml:space="preserve">
          <source>If it's only a one dimensional list, this can be done without importing anything:</source>
          <target state="translated">Если это только одномерный список,то это можно сделать без импорта ничего:</target>
        </trans-unit>
        <trans-unit id="bf5eb87eccfe44518713e7e54b7221154b583758" translate="yes" xml:space="preserve">
          <source>If you have 2.6 or newer, use ast instead of eval:</source>
          <target state="translated">Если у вас есть 2,6 или более новых,используйте аст вместо оценки:</target>
        </trans-unit>
        <trans-unit id="6e662462389f1cccebd25e20fd2ed0696c9d854f" translate="yes" xml:space="preserve">
          <source>If you know that your lists only contain quoted strings, this pyparsing example will give you your list of stripped strings (even preserving the original Unicode-ness).</source>
          <target state="translated">Если вы знаете,что ваши списки содержат только цитируемые строки,то в этом примере обхода вы получите список полосатых строк (даже с сохранением исходной Unicode-ness).</target>
        </trans-unit>
        <trans-unit id="dee2f4331a22bd0f33d553e2b2c1990f2917c8c7" translate="yes" xml:space="preserve">
          <source>If you're on an older version of Python, you can get very close to what you want with a simple regular expression:</source>
          <target state="translated">Если вы находитесь на старой версии Python,вы можете приблизиться к тому,что вы хотите,с помощью простого регулярного выражения:</target>
        </trans-unit>
        <trans-unit id="fa6afad9114bc19a76d434a86204c3de63ff1130" translate="yes" xml:space="preserve">
          <source>If your lists can have more datatypes, or even contain lists within lists, then you will need a more complete grammar - like &lt;a href=&quot;http://pyparsing.wikispaces.com/file/view/parsePythonValue.py&quot;&gt;this one&lt;/a&gt; on the pyparsing wiki, which will handle tuples, lists, ints, floats, and quoted strings.  Will work with Python versions back to 2.4.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если ваши списки могут иметь больше типов данных или даже содержать списки в списках, то вам понадобится более полная грамматика - такая, как &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://pyparsing.wikispaces.com/file/view/parsePythonValue.py&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;эта&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в вики с pyparsing, которая будет обрабатывать кортежи, списки, целые числа, числа с плавающей запятой и строки в кавычках. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Будет работать с версиями Python до 2.4.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7b6f4306c142c3439b8fd5ddccd05e09bd8af288" translate="yes" xml:space="preserve">
          <source>Inspired from some of the answers above that work with base python packages I compared the performance of a few (using Python 3.7.3):</source>
          <target state="translated">Вдохновившись некоторыми ответами выше,что работаю с базовыми питоновыми пакетами,я сравнил производительность некоторых из них (используя Python 3.7.3):</target>
        </trans-unit>
        <trans-unit id="9f6030eec115bfd1e882a1da65b755577ffce083" translate="yes" xml:space="preserve">
          <source>Note that this also removes spaces from inside entries u'[&quot;oh no&quot;]' ---&amp;gt; [u'ohno'].  If this is not what you wanted, the regexp needs to be souped up a bit.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Обратите внимание, что при этом также удаляются пробелы внутри записей u '[&quot;oh no&quot;]' ---&amp;gt; [u'ohno ']. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если это не то, что вы хотели, регулярное выражение нужно немного улучшить.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba67616a01a6a8ba22f315db01324b08cc2ad101" translate="yes" xml:space="preserve">
          <source>Once you have that, &lt;code&gt;strip&lt;/code&gt; the strings.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Как только у вас есть это, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;strip&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; струны.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0df5b62317eeac762d6d8de8ded61c204a2aa13c" translate="yes" xml:space="preserve">
          <source>Similarly</source>
          <target state="translated">Similarly</target>
        </trans-unit>
        <trans-unit id="cd04b1ec2991881e605bd02d37de6c6cb9938f51" translate="yes" xml:space="preserve">
          <source>So in the end regex wins!</source>
          <target state="translated">Так что,в конце концов,Регекс побеждает!</target>
        </trans-unit>
        <trans-unit id="fd22c75c773ebc2d342cfbc24898ddb766a34812" translate="yes" xml:space="preserve">
          <source>So, following all the answers I decided to time the most common methods:</source>
          <target state="translated">Итак,следуя всем ответам,я решил выделить время для наиболее распространенных методов:</target>
        </trans-unit>
        <trans-unit id="1f698e6b1ed9e81b9608b1514ecbe071fc4fa8d2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/3/library/json.html&quot;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt; module is a better solution whenever there is a &lt;em&gt;stringified&lt;/em&gt; list of dictionaries. The &lt;code&gt;json.loads(your_data)&lt;/code&gt; function can be used to convert it to a list.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Модуль &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/3/library/json.html&quot;&gt; &lt;code&gt;json&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; является лучшим решением, когда существует &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;строковый&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; список словарей. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;json.loads(your_data)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; функция может быть использована для преобразования его в список.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6c5b0b44257587afda77ff680c44935ab531756a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eval&lt;/code&gt; is dangerous - you shouldn't execute user input.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;eval&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; опасно - вы не должны выполнять ввод данных пользователя.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4f3168d7567a8d43a62598fe530c90e926c14adf" translate="yes" xml:space="preserve">
          <source>The junkers variable contains a compiled regexp (for speed) of all characters we don't want, using ] as a character required some backslash trickery.
The re.sub replaces all these characters with nothing, and we split the resulting string at the commas.</source>
          <target state="translated">Переменная junkers содержит скомпилированный регеxp (для скорости)всех символов,которые нам не нужны,используя]как символ,требующий некоторой хитрости обратного слеша.re.sub заменяет все эти символы ничем,и мы разделяем результирующую строку запятыми.</target>
        </trans-unit>
        <trans-unit id="1ebbb64de4eec42600853af376ecfc03cde47566" translate="yes" xml:space="preserve">
          <source>There is a quick solution:</source>
          <target state="translated">Есть быстрое решение:</target>
        </trans-unit>
        <trans-unit id="bd39b45eb2ccadcecf8956fe7b5632ce26216ec6" translate="yes" xml:space="preserve">
          <source>This isn't as good as the ast solution, for example it doesn't correctly handle escaped quotes in strings. But it's simple, doesn't involve a dangerous eval, and might be good enough for your purpose if you're on an older Python without ast.</source>
          <target state="translated">Это не так хорошо,как аст-решение,например,оно некорректно обрабатывает экранированные кавычки в строках.Но это просто,не связано с опасной оценкой,и может быть достаточно хорошо для вашей цели,если вы находитесь на старом Python без ast.</target>
        </trans-unit>
        <trans-unit id="867924488b11ec5baa310ee5351933f41ca0a04b" translate="yes" xml:space="preserve">
          <source>To further complete @Ryan 's answer using json, one very convenient function to convert unicode is the one posted here: &lt;a href=&quot;https://stackoverflow.com/a/13105359/7599285&quot;&gt;https://stackoverflow.com/a/13105359/7599285&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для дальнейшего завершения ответа @Ryan, используя json, одна очень удобная функция для преобразования юникода - это та, которая размещена здесь: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/13105359/7599285&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://stackoverflow.com/a/13105359/7599285&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="410f97e7aa72854f653d86dfe60ee8e72dc60612" translate="yes" xml:space="preserve">
          <source>Unwanted whitespaces in the list elements may be removed in this way:</source>
          <target state="translated">Нежелательные белые пробелы в элементах списка могут быть удалены таким образом:</target>
        </trans-unit>
        <trans-unit id="b3d4a5a715efd7316e589fb57cf2cc32579f5147" translate="yes" xml:space="preserve">
          <source>With ast.literal_eval, you can safely evaluate an expression node or a string containing a Python expression. The string or node provided may only consist of the following Python literal structures: strings, numbers, tuples, lists, dicts, booleans, and None.</source>
          <target state="translated">С помощью ast.literal_eval можно безопасно оценить узел выражения или строку,содержащую выражение Python.Предоставленная строка или узел может состоять только из следующих структур Python literal:строк,чисел,кортежей,списков,диктатов,булеонов и None.</target>
        </trans-unit>
        <trans-unit id="60dbddabab938d2b293738c76a498da356686737" translate="yes" xml:space="preserve">
          <source>and with pure python - not importing any libraries</source>
          <target state="translated">и с чистым питоном-не импортируя никаких библиотек.</target>
        </trans-unit>
        <trans-unit id="f4a38ad66467dfd300b032d84366205f68ffb5c5" translate="yes" xml:space="preserve">
          <source>ex with double or single quotes:</source>
          <target state="translated">с двойной или одинарной кавычкой:</target>
        </trans-unit>
        <trans-unit id="4e0199865f4846b71da5f878a3bcdfe65cefb43c" translate="yes" xml:space="preserve">
          <source>in Python.</source>
          <target state="translated">в Пайтоне.</target>
        </trans-unit>
        <trans-unit id="1f47380510539f8ba23dec4976ef86cd792f1a7b" translate="yes" xml:space="preserve">
          <source>you can save yourself the .strip() fcn by just slicing off the first and last characters from the string representation of the list (see third line below)</source>
          <target state="translated">вы можете сохранить .strip()fcn,просто отрезав первый и последний символы из строкового представления списка (см.третью строку ниже).</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
