<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/1458633">
    <body>
      <group id="1458633">
        <trans-unit id="a58ae6e028aa9f56e0b393f9b27512d036863b7f" translate="yes" xml:space="preserve">
          <source>--- as in ---</source>
          <target state="translated">---как ---</target>
        </trans-unit>
        <trans-unit id="a61acece68b9a4523517acd4c2932a44347a36f6" translate="yes" xml:space="preserve">
          <source>---also---</source>
          <target state="translated">---also---</target>
        </trans-unit>
        <trans-unit id="04039dd8c765ea73c439eaf667216b755095fcbb" translate="yes" xml:space="preserve">
          <source>---or---</source>
          <target state="translated">---or---</target>
        </trans-unit>
        <trans-unit id="e239b2f0cb4457085cc5a0a4c2e32b9d1078ef93" translate="yes" xml:space="preserve">
          <source>0.1 in binary floating points is like 1/3 in decimal (i.e. 0.3333333333333... forever), there's just no accurate way to handle it.</source>
          <target state="translated">0.1 в двоичных плавающих точках как 13 в десятичном (т.е.0.33333333333...навсегда),просто нет точного способа с этим справиться.</target>
        </trans-unit>
        <trans-unit id="bc9246ffda94554579941bcde9c4edc49c446d01" translate="yes" xml:space="preserve">
          <source>0.6 * 3 it's awesome!))
For me this works fine:</source>
          <target state="translated">0.6*3 это потрясающе!))Для меня это отлично работает:</target>
        </trans-unit>
        <trans-unit id="3cc69294c19b6465378465752174c2fdb6cba03d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mikemcl.github.io/decimal.js/&quot;&gt;decimal.js&lt;/a&gt;, &lt;a href=&quot;http://mikemcl.github.io/big.js/&quot;&gt;big.js&lt;/a&gt; or &lt;a href=&quot;http://mikemcl.github.io/bignumber.js/&quot;&gt;bignumber.js&lt;/a&gt; can be used to avoid floating-point manipulation problems in Javascript:</source>
          <target state="translated">&lt;a href=&quot;http://mikemcl.github.io/decimal.js/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;decimal.js&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://mikemcl.github.io/big.js/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;big.js&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; или &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://mikemcl.github.io/bignumber.js/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;bignumber.js&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; могут быть использованы, чтобы избежать проблем манипуляции с плавающей точкой в ​​Javascript:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f8da0f03b27353c36e89a7f463f0f26edc030610" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/MikeMcl/bignumber.js&quot;&gt;BigNumbers&lt;/a&gt; solved the problem, but introduced another, somewhat ironic, problem. When trying to load 8.5 into BigNumbers I was informed that it was really 8.4999&amp;hellip; and had more than 15 significant digits. This meant BigNumbers could not accept it (I believe I mentioned this problem was somewhat ironic).</source>
          <target state="translated">&lt;a href=&quot;https://github.com/MikeMcl/bignumber.js&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;BigNumbers&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; решили проблему, но представили другую, несколько ироническую проблему. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Когда я пытался загрузить 8.5 в BigNumbers, мне сообщили, что это действительно 8.4999&amp;hellip; и в нем более 15 значащих цифр. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это означало, что BigNumbers не могли принять это (я думаю, я упоминал, что эта проблема была несколько ироничной).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce0db9bea2fbfefa7b87bc4a1388e1cc35b89b2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Better avoid having the problem&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Лучше избегать проблем&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="92f696b23971dfa0a68250122f4ece948aba6e57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Discrete functions or operators (like modula)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Дискретные функции или операторы (например, по модулю)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d4abe6058e1666fa25cd7562739ff8d998c39bfd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Input and output for floating point values&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ввод и вывод для значений с плавающей запятой&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a09079fe3f3cae3b532870bda64e5af716b17478" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Problem&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Problem&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="241fda0675cef6227b22533c7fc0f61068a79a12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What can I do to avoid this problem?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Что я могу сделать, чтобы избежать этой проблемы?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ce9300b41e15ad2d19e7ece35b5fc60757beb39e" translate="yes" xml:space="preserve">
          <source>A (very quick) solution looks something like:</source>
          <target state="translated">(очень быстрое)решение выглядит как-то так:</target>
        </trans-unit>
        <trans-unit id="33a2b5e174fcca7358ea0f736487477bfc1ffec7" translate="yes" xml:space="preserve">
          <source>A JavaScript library for arbitrary-precision decimal and non-decimal arithmetic.</source>
          <target state="translated">Библиотека JavaScript для десятичной и не десятичной арифметики произвольной точности.</target>
        </trans-unit>
        <trans-unit id="cdc228a5887707e65f81fcb3dccdf34e8acdcbf5" translate="yes" xml:space="preserve">
          <source>A small, fast JavaScript library for arbitrary-precision decimal arithmetic. The little sister to bignumber.js.</source>
          <target state="translated">Небольшая быстрая библиотека JavaScript для десятичной арифметики произвольной точности.Младшая сестра bignumber.js.</target>
        </trans-unit>
        <trans-unit id="24ab8c562d1e296af3223a66eb9647aaf3256c06" translate="yes" xml:space="preserve">
          <source>A special check/correction on intermediate calculation results, immediately after applying the discrete function or operator might be required.
For a specific case (modula operator), see my answer on question: &lt;a href=&quot;https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/45346570#45346570&quot;&gt;Why does modulus operator return fractional number in javascript?&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Может потребоваться специальная проверка / исправление промежуточных результатов расчета сразу после применения дискретной функции или оператора. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для конкретного случая (оператор по &lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/45346570#45346570&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;модулю&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) см. Мой ответ на вопрос: &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;почему оператор модуля возвращает дробное число в javascript?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9e147f80845946fb26fa310a4077a3d65e96df84" translate="yes" xml:space="preserve">
          <source>Add a small value to the outputs before rounding/formatting them which is smaller than or equal to 1/4 of the desired precision and bigger than the maximum expected error caused by rounding errors on input and during calculation. If that is not possible the combination of the precision of the used data type isn't enough to deliver the desired output precision for your calculation.</source>
          <target state="translated">Добавьте небольшое значение к выходам перед их скруглением,которое меньше или равно 14 от требуемой точности и больше максимальной ожидаемой погрешности,вызванной ошибками скругления на входе и во время вычисления.Если это невозможно,то комбинации точности используемого типа данных недостаточно для получения требуемой выходной точности для ваших вычислений.</target>
        </trans-unit>
        <trans-unit id="9ec5991d0491a50ed072932cfd75f49e54ea8673" translate="yes" xml:space="preserve">
          <source>An arbitrary-precision Decimal type for JavaScript.</source>
          <target state="translated">Десятичный тип с произвольной точностью для JavaScript.</target>
        </trans-unit>
        <trans-unit id="22b59d0bd4142a0ac4d0949aed1e7a4055828148" translate="yes" xml:space="preserve">
          <source>Are you only performing multiplication?  If so then you can use to your advantage a neat secret about decimal arithmetic.  That is that &lt;code&gt;NumberOfDecimals(X) + NumberOfDecimals(Y) = ExpectedNumberOfDecimals&lt;/code&gt;. That is to say that if we have &lt;code&gt;0.123 * 0.12&lt;/code&gt; then we know that there will be 5 decimal places because &lt;code&gt;0.123&lt;/code&gt; has 3 decimal places and &lt;code&gt;0.12&lt;/code&gt; has two. Thus if JavaScript gave us a number like &lt;code&gt;0.014760000002&lt;/code&gt; we can safely round to the 5th decimal place without fear of losing precision.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы только выполняете умножение? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если это так, то вы можете использовать в своих интересах секрет секретной десятичной арифметики. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;То есть &lt;/font&gt;&lt;/font&gt; &lt;code&gt;NumberOfDecimals(X) + NumberOfDecimals(Y) = ExpectedNumberOfDecimals&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;То есть сказать , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;что если мы имеем &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0.123 * 0.12&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , то мы знаем , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;что там будет 5 знаков после запятой , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;поскольку &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0.123&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; имеет 3 знака после запятой и &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0.12&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; имеет два. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Таким образом, если JavaScript дал нам число, подобное &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0.014760000002&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; мы можем безопасно округлить до 5-го знака после запятой, не боясь потерять точность.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1c873412f7d33e43d993fd7170b2548732ae1976" translate="yes" xml:space="preserve">
          <source>Because the rounding adds an error which can cause the total error to be more then half of the desired precision, the output should be corrected based on expected precision of inputs and desired precision of output. You should</source>
          <target state="translated">Так как округление добавляет погрешность,которая может привести к тому,что общая погрешность будет больше половины требуемой точности,выход должен быть скорректирован на основе ожидаемой точности входов и требуемой точности выхода.Вы должны</target>
        </trans-unit>
        <trans-unit id="5292ab4ae2ac6f1f1671909362adce21a8d03efb" translate="yes" xml:space="preserve">
          <source>Big.js</source>
          <target state="translated">Big.js</target>
        </trans-unit>
        <trans-unit id="d66c7d4989fa88e8c1967fe5c794a60a171e4bb4" translate="yes" xml:space="preserve">
          <source>Does anyone have a good solution so that in such case I get the correct result &lt;code&gt;0.02&lt;/code&gt;? I know there are functions like &lt;code&gt;toFixed&lt;/code&gt; or rounding would be another possibility, but I'd like to really have the whole number printed without any cutting and rounding. Just wanted to know if one of you has some nice, elegant solution.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;У кого-нибудь есть хорошее решение, чтобы в таком случае я получил правильный результат &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0.02&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я знаю, что есть такие функции, как &lt;/font&gt;&lt;/font&gt; &lt;code&gt;toFixed&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; или округление было бы другой возможностью, но я бы хотел, чтобы на самом деле было напечатано целое число без каких-либо вырезок и округлений. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Просто хотел узнать, есть ли у кого-нибудь хорошее, элегантное решение.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Расширить фрагмент</target>
        </trans-unit>
        <trans-unit id="c341e94c1b98a43dae4389df37cf0aada6e3fee0" translate="yes" xml:space="preserve">
          <source>Fix:</source>
          <target state="translated">Fix:</target>
        </trans-unit>
        <trans-unit id="4056e753845c8a8fd4a301c49e68620745f4fc19" translate="yes" xml:space="preserve">
          <source>Floating point can't store all decimal values exactly. So when using floating point formats there will always be rounding errors on the input values.
The errors on the inputs of course results on errors on the output.
In case of a discrete function or operator there can be big differences on the output around the point where the function or operator is discrete.</source>
          <target state="translated">Плавающая запятая не может точно хранить все десятичные значения.Поэтому при использовании форматов с плавающей точкой всегда будут возникать ошибки округления входных значений.Ошибки на входах,конечно,приводят к ошибкам на выходе.В случае дискретной функции или оператора на выходе могут быть большие различия вокруг точки,где функция или оператор дискретны.</target>
        </trans-unit>
        <trans-unit id="aeb92746f89ae3b376318f5f1b422a3f62e2d554" translate="yes" xml:space="preserve">
          <source>For the mathematically inclined: &lt;a href=&quot;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&quot;&gt;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для математически склонных: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bd67f72c65d9c61d8d2450191828d1627d8d5146" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;http://floating-point-gui.de/&quot;&gt;Floating-Point Guide&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Из &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://floating-point-gui.de/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;путеводителя&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; с &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;плавающей точкой&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f3aade10752679fef5dd7ea1f4d15d9b02c98c3e" translate="yes" xml:space="preserve">
          <source>Have a look at &lt;a href=&quot;http://en.wikipedia.org/wiki/Fixed-point_arithmetic&quot;&gt;Fixed-point arithmetic&lt;/a&gt;. It will probably solve your problem, if the range of numbers you want to operate on is small (eg, currency). I would round it off to a few decimal values, which is the simplest solution.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Посмотрите на &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Fixed-point_arithmetic&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;арифметику с фиксированной точкой&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вероятно, это решит вашу проблему, если диапазон чисел, с которыми вы хотите работать, невелик (например, валюта). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я бы округлил его до нескольких десятичных значений, что является самым простым решением.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b83cbd138fff23024c94f3b4bad484eafc94fff3" translate="yes" xml:space="preserve">
          <source>Here's some code using BigNumber:</source>
          <target state="translated">Вот код,использующий BigNumber:</target>
        </trans-unit>
        <trans-unit id="ee81411664de7bb4caaa5929799806ccb568b7b0" translate="yes" xml:space="preserve">
          <source>How to deal with floating point number precision in JavaScript</source>
          <target state="translated">Как работать с точностью чисел с плавающей запятой в JavaScript</target>
        </trans-unit>
        <trans-unit id="c8df9c129f17bfcc385ced7492e4b82ccec5e93a" translate="yes" xml:space="preserve">
          <source>I definitely recommend using a tested library like &lt;a href=&quot;https://github.com/guipn/sinful.js/blob/master/sinful.js&quot;&gt;SinfulJS&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я определенно рекомендую использовать проверенную библиотеку, такую ​​как &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/guipn/sinful.js/blob/master/sinful.js&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SinfulJS&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a853ef4121663b373e78e17939e2d11ca4c83986" translate="yes" xml:space="preserve">
          <source>I had a nasty rounding error problem with mod 3. Sometimes when I should get 0 I would get .000...01. That's easy enough to handle, just test for &amp;lt;= .01. But then sometimes I would get 2.99999999999998. OUCH!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;У меня была проблема с ошибками округления с модом 3. Иногда, когда я должен был получить 0, я получал .000 ... 01. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это достаточно просто для обработки, просто проверьте на &amp;lt;= .01. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Но тогда иногда я получал 2.99999999999998. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ОЙ!&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e9f9d35c2b34cb9f3475700d017c4d1185419e3c" translate="yes" xml:space="preserve">
          <source>I have the following dummy test script:</source>
          <target state="translated">У меня есть следующий тестовый сценарий:</target>
        </trans-unit>
        <trans-unit id="ba55b9d67e3d6448720f1cc36080a3e415841b6d" translate="yes" xml:space="preserve">
          <source>I like Pedro Ladaria's solution and use something similar.</source>
          <target state="translated">Мне нравится решение Педро Ладарии и я использую нечто подобное.</target>
        </trans-unit>
        <trans-unit id="11e4c0a4884796e3eaf68f789faed2b433d2248f" translate="yes" xml:space="preserve">
          <source>I'm finding &lt;a href=&quot;https://github.com/MikeMcl/bignumber.js/&quot;&gt;BigNumber.js&lt;/a&gt; meets my needs.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я считаю, что &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/MikeMcl/bignumber.js/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;BigNumber.js&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; отвечает моим потребностям.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="970fc9047311aa9e995057a784ac862b33e2831e" translate="yes" xml:space="preserve">
          <source>If the first point really applies to you, use &lt;a href=&quot;https://web.archive.org/web/20150511085914/https://github.com/dtrebbien/BigDecimal.js&quot;&gt;BigDecimal for JavaScript&lt;/a&gt;, which is not elegant at all, but actually solves the problem rather than providing an imperfect workaround.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если первый пункт действительно относится к вам, используйте &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://web.archive.org/web/20150511085914/https://github.com/dtrebbien/BigDecimal.js&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;BigDecimal для JavaScript&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , который не очень элегантен, но на самом деле решает проблему, а не предоставляет несовершенный обходной путь.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f6e317ec81ade40f1e9e97cedccdc40678ac775d" translate="yes" xml:space="preserve">
          <source>If you are doing if-s/comparisons and don't want to cut of then you also need a small constant, usually called eps, which is one decimal place higher than max expected error. Say that your cut-off is last two decimals - then your eps has 1 at the 3rd place from the last (3rd least significant) and you can use it to compare whether the result is within eps range of expected (0.02 -eps &amp;lt; 0.1*0.2 &amp;lt; 0.02 +eps).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если вы делаете сравнения if-s / и не хотите сокращать их, вам также нужна небольшая константа, обычно называемая eps, которая на один десятичный знак выше максимальной ожидаемой ошибки. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Скажем, что ваш предел составляет последние два знака после запятой - тогда ваш eps имеет 1 на 3-м месте от последнего (3-е наименее значимое), и вы можете использовать его, чтобы сравнить, находится ли результат в пределах ожидаемого диапазона eps (0,02 -eps &amp;lt;0,1) * 0,2 &amp;lt;0,02 + EPS).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3fb645f140e6b7fba5cf80b199367d878602c09e" translate="yes" xml:space="preserve">
          <source>If you have no decimal datatype available, an alternative is to work
  with integers, e.g. do money
  calculations entirely in cents. But
  this is more work and has some
  drawbacks.</source>
          <target state="translated">Если у вас нет десятичного типа данных,альтернативой может быть работа с целыми числами,например,делать денежные вычисления полностью в центах.Но это больше работа и имеет некоторые недостатки.</target>
        </trans-unit>
        <trans-unit id="f9a231822977eedb774b63cec0c1a0376b172063" translate="yes" xml:space="preserve">
          <source>If you just don&amp;rsquo;t want to see all those extra decimal places: simply
  format your result rounded to a fixed
  number of decimal places when
  displaying it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если вы просто не хотите видеть все эти дополнительные десятичные разряды: просто отформатируйте свой результат, округленный до фиксированного количества десятичных разрядов, при его отображении.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="42fc965d2e7933faeb52ad0042fa265db75c529f" translate="yes" xml:space="preserve">
          <source>If you really need your results to add up exactly, especially when you
  work with money: use a special decimal
  datatype.</source>
          <target state="translated">Если вам действительно нужны результаты для точного суммирования,особенно когда вы работаете с деньгами:используйте специальный десятичный тип данных.</target>
        </trans-unit>
        <trans-unit id="d5f63b24009028d7cd1e82a2dcdac457c43a8f72" translate="yes" xml:space="preserve">
          <source>If you're dealing with floats &lt;em&gt;always&lt;/em&gt; expect small rounding errors, so you'll also always have to round the displayed result to something sensible. In return you get very very fast and powerful arithmetic because all the computations are in the native binary of the processor.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если вы имеете дело с числами с плавающей запятой, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;всегда&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ожидайте небольших ошибок округления, поэтому вам также всегда придется округлять отображаемый результат до чего-то разумного. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Взамен вы получаете очень очень быструю и мощную арифметику, потому что все вычисления находятся в собственном двоичном файле процессора.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="76df916b62840bf387c4d5f679f0bb56b6c112cd" translate="yes" xml:space="preserve">
          <source>In this case:</source>
          <target state="translated">В данном случае:</target>
        </trans-unit>
        <trans-unit id="dc35e05387823f39d75255f34cb157621bf93da5" translate="yes" xml:space="preserve">
          <source>It has good &lt;a href=&quot;http://mikemcl.github.io/bignumber.js/&quot;&gt;documentation&lt;/a&gt; and the author is very diligent responding to feedback.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;У него хорошая &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://mikemcl.github.io/bignumber.js/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;документация,&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и автор очень старательно реагирует на отзывы.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c0dbedb40544f549861aab974817b42583eb09a3" translate="yes" xml:space="preserve">
          <source>It is often more efficient to avoid these problems by using data types (integer or fixed point formats) for calculations like this which can store the expected input without rounding errors.
An example of that is that you should never use floating point values for financial calculations.</source>
          <target state="translated">Часто более эффективно избежать этих проблем можно,используя типы данных (форматы целых чисел или фиксированных точек)для подобных вычислений,которые могут хранить ожидаемый вход без ошибок округления.Примером этого является то,что никогда не следует использовать значения с плавающей точкой для финансовых вычислений.</target>
        </trans-unit>
        <trans-unit id="448607d7ba223d62964e7cd11aa31257cd4a3f9c" translate="yes" xml:space="preserve">
          <source>Many systems omit working with decimals this way. That is the reason why many systems work with cents (as integer) instead of dollars/euro's (as floating point).</source>
          <target state="translated">Многие системы так не работают с децималями.Поэтому многие системы работают с центами (в виде целого числа),а не с долларом (в виде плавающей запятой).</target>
        </trans-unit>
        <trans-unit id="6d6f9a91ba210d6d0d8e1736e610c0911b4b3dfe" translate="yes" xml:space="preserve">
          <source>Most of the time the solution is not to switch to fixed-point arithmetic, mainly because it's much slower and 99% of the time you just don't need the accuracy. If you're dealing with stuff that does need that level of accuracy (for instance financial transactions) Javascript probably isn't the best tool to use anyway (as you've want to enforce the fixed-point types a static language is probably better).</source>
          <target state="translated">В большинстве случаев решение заключается в том,чтобы не переключаться на арифметику с фиксированной точкой,в основном потому,что она намного медленнее и в 99% случаев точность просто не нужна.Если Вы имеете дело с вещами,которые действительно нуждаются в таком уровне точности (например,финансовые транзакции),Javascript,вероятно,не является лучшим инструментом для использования в любом случае (так как Вы хотите обеспечить соблюдение типов с фиксированной точкой,статический язык,вероятно,лучше).</target>
        </trans-unit>
        <trans-unit id="9bf7090b248473b9077c1c5f6937631d47c5fe07" translate="yes" xml:space="preserve">
          <source>Note that the first point only applies if you really need specific precise &lt;em&gt;decimal&lt;/em&gt; behaviour. Most people don't need that, they're just irritated that their programs don't work correctly with numbers like 1/10 without realizing that they wouldn't even blink at the same error if it occurred with 1/3.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Обратите внимание, что первая точка применяется только в том случае, если вам действительно нужно конкретное точное &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;десятичное&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; поведение. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Большинству людей это не нужно, они просто раздражены тем, что их программы не работают правильно с числами, такими как 1/10, даже не осознавая, что они даже не будут мигать при той же ошибке, если она произошла с 1/3.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eb097215ec09eb0024375e4ae22d1c146c281243" translate="yes" xml:space="preserve">
          <source>Note: When dealing with 32 or 64 bit floats, you should use toPrecision(7) and toPrecision(15) for best results.  See &lt;a href=&quot;https://stackoverflow.com/questions/28045787/how-many-decimal-places-does-the-primitive-float-and-double-support&quot;&gt;this question&lt;/a&gt; for info as to why.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Примечание. При работе с 32- или 64-разрядными числами с плавающей запятой для достижения наилучших результатов следует использовать toPrecision (7) и toPrecision (15) &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Смотрите &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/28045787/how-many-decimal-places-does-the-primitive-float-and-double-support&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;этот вопрос&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для информации о том, почему.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11195d73ee275b234990d7d7cb1e88d873fcca46" translate="yes" xml:space="preserve">
          <source>Notice that for the general purpose use, this behavior is likely to be acceptable.</source>
          <target state="translated">Обратите внимание,что для общего пользования такое поведение,скорее всего,будет приемлемым.</target>
        </trans-unit>
        <trans-unit id="3290637a00912e04380d8c64be613af76228d4bf" translate="yes" xml:space="preserve">
          <source>Numerical errors accumulate with every further operation and if you don't cut it off early it's just going to grow. Numerical libraries which present results that look clean simply cut off the last 2 digits at every step, numerical co-processors also have a &quot;normal&quot; and &quot;full&quot; lenght for the same reason. Cuf-offs are cheap for a processor but very expensive for you in a script (multiplying and dividing and using pov(...)). Good math lib would provide floor(x,n) to do the cut-off for you.</source>
          <target state="translated">Числовые ошибки накапливаются с каждой последующей операцией,и если вы не отключите его раньше времени,он просто будет расти.Числовые библиотеки,представляющие результаты,которые выглядят чистыми,просто отсекают последние 2 цифры на каждом шаге,числовые сопроцессоры также имеют &quot;нормальную&quot; и &quot;полную&quot; длину по той же причине.Cuf-offs дешево для процессора,но очень дорого для вас в скрипте (умножение и деление и использование pov(...)).Хорошая математическая библиотека обеспечит floor(x,n)для выполнения отсечения за вас.</target>
        </trans-unit>
        <trans-unit id="2839401e766a935656ba07eb6b9d6b7c03f3cac8" translate="yes" xml:space="preserve">
          <source>Of course that won't help much with irrational numbers. But you may want to optimize your computations in the way they will cause the least problem (e.g. detecting situations like &lt;code&gt;sqrt(3)^2)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Конечно, это не очень поможет с иррациональными числами. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Но вы можете оптимизировать свои вычисления так, чтобы они вызывали наименьшую проблему (например, обнаружение ситуаций, подобных &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sqrt(3)^2)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63652065953c408e91fa63939df078c88343bbe4" translate="yes" xml:space="preserve">
          <source>Of course, otherwise I'll round to some 10 digits or so.</source>
          <target state="translated">Конечно,иначе я округлюсь до десяти цифр или около того.</target>
        </trans-unit>
        <trans-unit id="56ceded875df16b30aabedd0be6143d73e5f2da8" translate="yes" xml:space="preserve">
          <source>Output using the following function:</source>
          <target state="translated">Выход с помощью следующей функции:</target>
        </trans-unit>
        <trans-unit id="1a87200547de52dcba232ee8140c48ce625448de" translate="yes" xml:space="preserve">
          <source>Pay attention to the output &lt;code&gt;toFixedCurrency(x)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Обратите внимание на вывод &lt;/font&gt;&lt;/font&gt; &lt;code&gt;toFixedCurrency(x)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7ccc77c464d68ec4d4d9bc39d5016a33fe1860ca" translate="yes" xml:space="preserve">
          <source>Round inputs to the expected precision or make sure no values can be entered with higher precision.</source>
          <target state="translated">Круглые входы с ожидаемой точностью или убедитесь,что никакие значения не могут быть введены с более высокой точностью.</target>
        </trans-unit>
        <trans-unit id="fea441daf71749c24a14635d2315d7865e68e5f8" translate="yes" xml:space="preserve">
          <source>Simple solution to ironic problem:</source>
          <target state="translated">Простое решение иронической проблемы:</target>
        </trans-unit>
        <trans-unit id="5fa04705106510002b87a6a2c96b7082fb446b6c" translate="yes" xml:space="preserve">
          <source>So at the very least you should make global var/constant with pov(10,n) - meaning that you decided on the precision you need :-) Then do:</source>
          <target state="translated">Так что,по крайней мере,вы должны сделать глобальный varconstant с pov(10,n)-это означает,что вы решили,какая точность вам нужна :-).Тогда делайте:</target>
        </trans-unit>
        <trans-unit id="87f4cc4a8551195a42d1a9c700149f90f3ab76a5" translate="yes" xml:space="preserve">
          <source>So instead of performing the comparison like this</source>
          <target state="translated">Так что вместо того,чтобы проводить такое сравнение.</target>
        </trans-unit>
        <trans-unit id="04289cf569c9ea315b899e01e3ff8127ebce2c75" translate="yes" xml:space="preserve">
          <source>So, when using floating point variables, you should always be aware of this. And whatever output you want from a calculation with floating points should always be formatted/conditioned before displaying with this in mind.</source>
          <target state="translated">Поэтому при использовании переменных с плавающей точкой,вы всегда должны знать об этом.И любой вывод,который вы хотите получить из вычисления с плавающей точкой,всегда должен быть отформатирован условно перед отображением с учетом этого.</target>
        </trans-unit>
        <trans-unit id="a55f20d8ecae19b33f63d58dc9371e763bf4f2d9" translate="yes" xml:space="preserve">
          <source>Source : &lt;a href=&quot;http://2ality.com/2015/04/numbers-math-es6.html#numberepsilon&quot;&gt;http://2ality.com/2015/04/numbers-math-es6.html#numberepsilon&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Источник: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://2ality.com/2015/04/numbers-math-es6.html#numberepsilon&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://2ality.com/2015/04/numbers-math-es6.html#numberepsilon&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d25e632121467e8635330d7167a552d2e9181c60" translate="yes" xml:space="preserve">
          <source>Surprisingly, this function has not been posted yet although others have similar variations of it. It is from the MDN web docs for Math.round().
It's concise and allows for varying precision.</source>
          <target state="translated">Удивительно,но эта функция еще не размещена,хотя другие имеют схожие вариации.Она взята из MDN веб-документов для Math.round().Она лаконична и позволяет варьировать точность.</target>
        </trans-unit>
        <trans-unit id="87dbc587972268868e6cbe059d1ed329fd1a5fc4" translate="yes" xml:space="preserve">
          <source>That depends on what kind of
  calculations you&amp;rsquo;re doing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это зависит от того, какие вычисления вы делаете.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c927531832108bc06279d31503b601200af52f43" translate="yes" xml:space="preserve">
          <source>The problem arises when comparing those floating points values to determine an appropriate action.</source>
          <target state="translated">Проблема возникает при сравнении этих значений с плавающей запятой для определения соответствующего действия.</target>
        </trans-unit>
        <trans-unit id="55b1d2cc4477268763bd5500964d5b184e3991ae" translate="yes" xml:space="preserve">
          <source>The recommended approach is to use correction factors (multiply by a suitable power of 10 so that the arithmetic happens between integers).  For example, in the case of &lt;code&gt;0.1 * 0.2&lt;/code&gt;, the correction factor is &lt;code&gt;10&lt;/code&gt;, and you are performing the calculation:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Рекомендуемый подход заключается в использовании поправочных коэффициентов (умножьте на подходящую степень 10, чтобы арифметика происходила между целыми числами). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Например, в случае &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0.1 * 0.2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; поправочный коэффициент равен &lt;/font&gt;&lt;/font&gt; &lt;code&gt;10&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , и вы выполняете расчет:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3b6daa3471e97c035d55063d4c0b0d8e3d0cf9a7" translate="yes" xml:space="preserve">
          <source>The result you've got is correct and fairly consistent across floating point implementations in different languages, processors and operating systems - the only thing that changes is the level of the inaccuracy when the float is actually a double (or higher).</source>
          <target state="translated">Результат,который вы получили,правильный и достаточно последовательный в реализации с плавающей точкой на разных языках,процессорах и операционных системах-единственное,что меняется,это уровень неточности,когда на самом деле плавающий диск является двойным (или выше).</target>
        </trans-unit>
        <trans-unit id="578414fc1ccf375f1c3022393ae84492ed9b86d6" translate="yes" xml:space="preserve">
          <source>The round() function at phpjs.org works nicely: &lt;a href=&quot;http://phpjs.org/functions/round&quot;&gt;http://phpjs.org/functions/round&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Функция round () на phpjs.org работает хорошо: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://phpjs.org/functions/round&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://phpjs.org/functions/round&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7aa22287f011062f40011982b9b1e4267305ec01" translate="yes" xml:space="preserve">
          <source>The same author has 2 other similar libraries:</source>
          <target state="translated">У того же автора есть еще 2 аналогичные библиотеки:</target>
        </trans-unit>
        <trans-unit id="45b18900669ce60100b2a8139e01034f4d63e1c4" translate="yes" xml:space="preserve">
          <source>These 2 things are usually not done and in most cases the differences caused by not doing them are too small to be important for most users, but I already had a project where output wasn't accepted by the users without those corrections.</source>
          <target state="translated">Эти 2 вещи обычно не делаются,и в большинстве случаев различия,вызванные их невыполнением,слишком малы,чтобы быть важными для большинства пользователей,но у меня уже был проект,в котором выходные данные не принимались пользователями без этих исправлений.</target>
        </trans-unit>
        <trans-unit id="995e6adcd7dd4e903f9034755d0f02e5f32e42e5" translate="yes" xml:space="preserve">
          <source>These conditions work correctly:</source>
          <target state="translated">Эти условия работают правильно:</target>
        </trans-unit>
        <trans-unit id="30a1e69eaf576087f4adc95f66859b6980b7efbd" translate="yes" xml:space="preserve">
          <source>This function will determine the needed precision from the multiplication of two floating point numbers and return a result with the appropriate precision. Elegant though it is not.</source>
          <target state="translated">Эта функция определит необходимую точность из умножения двух чисел с плавающей точкой и вернет результат с соответствующей точностью.Элегантно,хотя это и не так.</target>
        </trans-unit>
        <trans-unit id="1c60c8cf88cdadc5ddf53a3cf7f9de9f9bf4f000" translate="yes" xml:space="preserve">
          <source>This just adds a digit to the right when rounding decimals.
MDN has updated the Math.round page so maybe someone could provide a 
better solution.</source>
          <target state="translated">Это просто добавляет цифру справа при округлении десятичных знаков.MDN обновил страницу Math.round,так что,возможно,кто-то сможет предоставить лучшее решение.</target>
        </trans-unit>
        <trans-unit id="22f1374e80bb9c8ef8c66feafcef8948c3f17d13" translate="yes" xml:space="preserve">
          <source>This will print the result &lt;code&gt;0.020000000000000004&lt;/code&gt; while it should just print &lt;code&gt;0.02&lt;/code&gt; (if you use your calculator). As far as I understood this is due to errors in the floating point multiplication precision.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это напечатает результат &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0.020000000000000004&lt;/code&gt; ,в&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; то время как он должен просто напечатать &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0.02&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (если вы используете свой калькулятор). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Насколько я понял, это связано с ошибками в точности умножения с плавающей точкой.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1b4e4dd5dedd60c21b1e2d40ef5986a69c044c8f" translate="yes" xml:space="preserve">
          <source>This works for me:</source>
          <target state="translated">Это работает на меня:</target>
        </trans-unit>
        <trans-unit id="41a41835f3c82af8647a7b77cb179b50a5405429" translate="yes" xml:space="preserve">
          <source>To avoid this you should work with integer values instead of floating points. So when you want to have 2 positions precision work with the values * 100, for 3 positions use 1000. When displaying you use a formatter to put in the separator.</source>
          <target state="translated">Чтобы этого избежать,следует работать с целочисленными значениями,а не с плавающими точками.Таким образом,когда вы хотите иметь 2 позиции,работайте точно со значениями*100,для 3 позиций используйте 1000.При отображении используйте формулу для вставки разделителя.</target>
        </trans-unit>
        <trans-unit id="9f4481943972d21f141fcea329ac4f83c9332934" translate="yes" xml:space="preserve">
          <source>Try &lt;a href=&quot;http://www.diveintojavascript.com/projects/javascript-sprintf&quot;&gt;javascript-sprintf&lt;/a&gt;, you would call it like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Попробуйте &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.diveintojavascript.com/projects/javascript-sprintf&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;javascript-sprintf&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , вы бы назвали это так:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7818ea1fdff45e1ca14750be6d4169bfaee57e85" translate="yes" xml:space="preserve">
          <source>Try my chiliadic arithmetic library, which you can see &lt;a href=&quot;http://www.daniweb.com/forums/thread222006.html&quot;&gt;here&lt;/a&gt;.
If you want a later version, I can get you one.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Попробуйте мою chiliadic арифметическую библиотеку, которую вы можете увидеть &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.daniweb.com/forums/thread222006.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;здесь&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если вы хотите более позднюю версию, я могу получить ее.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="069816246ed77462eefa613586edbd76e4fd87a2" translate="yes" xml:space="preserve">
          <source>UPDATE: Aug/20/2019
Just noticed this error. I believe it's due to a floating point precision error with Math.round().</source>
          <target state="translated">UPDATE:Aug202019 Только что заметили эту ошибку.Думаю,это связано с ошибкой точности с плавающей точкой с помощью Math.round().</target>
        </trans-unit>
        <trans-unit id="16e517b2e990ed3cf70be817c23709bd8d7accfa" translate="yes" xml:space="preserve">
          <source>Unlike Pedros solution this will round up 0.999...repeating and is accurate to plus/minus one on the least significant digit.</source>
          <target state="translated">В отличие от решения Pedros,оно округляет 0.999...повторяясь и имеет точность плюс-минус один на наименее значимую цифру.</target>
        </trans-unit>
        <trans-unit id="1d4d43cc6f3a833e0340a0d1794b6d7b9958657e" translate="yes" xml:space="preserve">
          <source>Use</source>
          <target state="translated">Use</target>
        </trans-unit>
        <trans-unit id="c9fa3b375e9e156eb9d66c9445e57dd3139fe0c4" translate="yes" xml:space="preserve">
          <source>Use Number(1.234443).toFixed(2); it will print 1.23</source>
          <target state="translated">Использовать номер(1.234443).toFixed(2);он напечатает 1.23.</target>
        </trans-unit>
        <trans-unit id="8dbb2394fd5cea4a5a0bceabe5ea9e242ad8b66c" translate="yes" xml:space="preserve">
          <source>Very very simple))</source>
          <target state="translated">Очень просто))</target>
        </trans-unit>
        <trans-unit id="a6dda06638f436253a8d23045c0f9134a35f024c" translate="yes" xml:space="preserve">
          <source>When discrete operators or functions are involved, extra corrections might be required to make sure the output is as expected. Rounding and adding small corrections before rounding can't solve the problem.</source>
          <target state="translated">Когда задействованы дискретные операторы или функции,могут потребоваться дополнительные корректировки,чтобы убедиться,что выходной сигнал соответствует ожидаемому.Округление и добавление небольших исправлений перед округлением не может решить проблему.</target>
        </trans-unit>
        <trans-unit id="99becbd0dffc744e204763d33ed726f31f4a99ac" translate="yes" xml:space="preserve">
          <source>When only continuous functions and operators are used, rounding to the desired precision often will do (don't truncate).  Standard formatting features used to convert floats to string will usually do this for you.</source>
          <target state="translated">Когда используются только непрерывные функции и операторы,часто выполняется округление до нужной точности (не усекайте).Стандартные функции форматирования,используемые для преобразования флотов в строки,обычно делают это за вас.</target>
        </trans-unit>
        <trans-unit id="c6d73c873914a39afca0e4eb9a2e40a4035e5e08" translate="yes" xml:space="preserve">
          <source>With the advent of ES6, a new constant &lt;code&gt;Number.EPSILON&lt;/code&gt; is defined to determine the acceptable error margin :</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;С появлением ES6 определена новая константа &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Number.EPSILON&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; чтобы определить допустимый предел ошибки:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="14be6040fc36980e04bebea70f3f947216b405d0" translate="yes" xml:space="preserve">
          <source>You are looking for an &lt;code&gt;sprintf&lt;/code&gt; implementation for JavaScript, so that you can write out floats with small errors in them (since they are stored in binary format) in a format that you expect.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы ищете &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;реализацию &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sprintf&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для JavaScript, чтобы вы могли выписывать числа с небольшими ошибками (поскольку они хранятся в двоичном формате) в ожидаемом формате.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ec9ba5ceb02278a88d554e12764f6b29484e13fb" translate="yes" xml:space="preserve">
          <source>You are right, the reason for that is limited precision of floating point numbers. Store your rational numbers as a division of two integer numbers and in most situations you'll be able to store numbers without any precision loss. When it comes to printing, you may want to display the result as fraction. With representation I proposed, it becomes trivial.</source>
          <target state="translated">Вы правы,причина этого-ограниченная точность чисел с плавающей точкой.Храните свои рациональные числа в виде деления на два целых числа,и в большинстве ситуаций вы сможете хранить числа без потери точности.Когда дело доходит до печати,вы можете захотеть отобразить результат как дробь.С представлением,которое я предложил,это становится тривиальным.</target>
        </trans-unit>
        <trans-unit id="4ffd7bd84840ca50d76440ccf8ca0c3594bc487e" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;parseFloat()&lt;/code&gt; and &lt;code&gt;toFixed()&lt;/code&gt; if you want to bypass this issue for a small operation:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы можете использовать &lt;/font&gt;&lt;/font&gt; &lt;code&gt;parseFloat()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt; &lt;code&gt;toFixed()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; если хотите обойти эту проблему для небольшой операции:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="40157fe7c1bc40e6a5655614855b704359d6e483" translate="yes" xml:space="preserve">
          <source>You can't represent most decimal fractions exactly with binary floating point types (which is what ECMAScript uses to represent floating point values). So there isn't an elegant solution unless you use arbitrary precision arithmetic types or a decimal based floating point type. For example, &lt;a href=&quot;http://blogs.msdn.com/b/oldnewthing/archive/2004/05/25/141253.aspx&quot;&gt;the Calculator app that ships with Windows now uses arbitrary precision arithmetic to solve this problem&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы не можете представлять большинство десятичных дробей точно с двоичными типами с плавающей запятой (это то, что ECMAScript использует для представления значений с плавающей запятой). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Таким образом, не существует элегантного решения, если вы не используете арифметические типы произвольной точности или тип с плавающей запятой в десятичной форме. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Например, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.msdn.com/b/oldnewthing/archive/2004/05/25/141253.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;приложение Calculator, поставляемое с Windows, теперь использует произвольную арифметику точности для решения этой проблемы&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d1cfea31bd9e2d6a6462a80aa994ae5ee23456ce" translate="yes" xml:space="preserve">
          <source>You could also keep doing math and only cut-off at the end - assuming that you are only displaying and not doing if-s with results. If you can do that, then .toFixed(...) might be more efficient.</source>
          <target state="translated">Вы также можете продолжать заниматься математикой и обрезать только в конце-предполагая,что вы только отображаете и не делаете if-s с результатами.Если вы можете это сделать,то .toFixed(...)может быть более эффективным.</target>
        </trans-unit>
        <trans-unit id="efdde9427ae67b144eb864b034a322d41713c6fa" translate="yes" xml:space="preserve">
          <source>You just have to make up your mind on how many decimal digits you actually want - can't have the cake and eat it too :-)</source>
          <target state="translated">Вы просто должны решить,сколько десятичных цифр вы на самом деле хотите-не можете взять торт и съесть его тоже :-)</target>
        </trans-unit>
        <trans-unit id="b92e6abf5f2b79acdec60ef0de73fe34f00ef252" translate="yes" xml:space="preserve">
          <source>You may also use  &lt;a href=&quot;http://www.w3schools.com/jsref/jsref_tofixed.asp&quot;&gt;Number.toFixed()&lt;/a&gt;  for display purposes, if you'd rather not include  more files merely for floating point rounding to a given precision.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы также можете использовать &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.w3schools.com/jsref/jsref_tofixed.asp&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Number.toFixed ()&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для отображения, если вы не хотите включать больше файлов просто для округления с плавающей запятой с заданной точностью.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="edfa60213bd8f2d844928a429d60cb63e965db84" translate="yes" xml:space="preserve">
          <source>You're looking for the elegant solution then I'm afraid this is it: floats are quick but have small rounding errors - always round to something sensible when displaying their results.</source>
          <target state="translated">Вы ищете элегантное решение,боюсь,что это оно и есть:поплавки быстрые,но имеют небольшие ошибки округления-всегда округляются до чего-то разумного при отображении результатов.</target>
        </trans-unit>
        <trans-unit id="4eab28434b44398092c734e075943f499d2e137c" translate="yes" xml:space="preserve">
          <source>and &lt;a href=&quot;https://github.com/MikeMcl/decimal.js/&quot;&gt;Decimal.js&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;и &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/MikeMcl/decimal.js/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Decimal.js&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="31fbdc945417c8ee525f933924cfe13a7f2424af" translate="yes" xml:space="preserve">
          <source>big.js: minimalist; easy-to-use; precision specified in decimal places; precision applied to division only.</source>
          <target state="translated">big.js:минималистский;простой в использовании;точность указывается в десятичных знаках;точность применяется только к делению.</target>
        </trans-unit>
        <trans-unit id="b09fe83f641a1a95cde4fd67164f2ee057e13d0a" translate="yes" xml:space="preserve">
          <source>bignumber.js: bases 2-64; configuration options; NaN; Infinity; precision specified in decimal places; precision applied to division only; base prefixes.</source>
          <target state="translated">bignumber.js:базы 2-64;варианты конфигурации;NaN;бесконечность;точность указывается в десятичных знаках;точность применяется только к делению;базовые префиксы.</target>
        </trans-unit>
        <trans-unit id="ca0fb1811849befef678634dcad67c0b4854e51b" translate="yes" xml:space="preserve">
          <source>console.log((parseFloat(0.1) + parseFloat(0.2)).toFixed(1) == parseFloat(0.3).toFixed(1));</source>
          <target state="translated">console.log((parseFloat(0.1)+parseFloat(0.2)).toFixed(1)==parseFloat(0.3).toFixed(1));</target>
        </trans-unit>
        <trans-unit id="a72717b86f4f1d0fa2a38b2fab25f2b271a2264a" translate="yes" xml:space="preserve">
          <source>console.log(precisionRound(1234.5678, -1));
   // expected output: 1230</source>
          <target state="translated">console.log(precisionRound(1234.5678,-1));/ожидаемый выход:1230</target>
        </trans-unit>
        <trans-unit id="d0fef98d2af7d1d1a6c13739c51a505822c3b782" translate="yes" xml:space="preserve">
          <source>console.log(precisionRound(1234.5678, 1));
   // expected output: 1234.6</source>
          <target state="translated">console.log(precisionRound(1234.5678,1));/ожидаемый выход:1234.6</target>
        </trans-unit>
        <trans-unit id="057764ffca879ed98c1fe3d95161aa733b9b4ef2" translate="yes" xml:space="preserve">
          <source>decimal.js: bases 2-64; configuration options; NaN; Infinity; non-integer powers, exp, ln, log; precision specified in significant digits; precision always applied; random numbers.</source>
          <target state="translated">десятичные.js:основы 2-64;варианты конфигурации;NaN;бесконечность;неинтегрированные силы,exp,ln,log;точность,указанная в значащих цифрах;точность,всегда применяемая;случайные числа.</target>
        </trans-unit>
        <trans-unit id="da3f5b4eb74efe48286815d68ffd305b61e0751e" translate="yes" xml:space="preserve">
          <source>link to detailed comparisons</source>
          <target state="translated">ссылка на детальные сравнения</target>
        </trans-unit>
        <trans-unit id="9cbee38ce3307e66953c2a713e6ab5747f3d951e" translate="yes" xml:space="preserve">
          <source>not elegant but does the job (removes trailing zeros)</source>
          <target state="translated">не элегантно,но делает свою работу (удаляет замыкающие нули)</target>
        </trans-unit>
        <trans-unit id="4fcdee7cbb8d16776e4fba9f1cd17e31d1427924" translate="yes" xml:space="preserve">
          <source>to print out your number as a float with two decimal places.</source>
          <target state="translated">чтобы распечатать ваш номер в виде поплавка с двумя знаками после запятой.</target>
        </trans-unit>
        <trans-unit id="428fd5c08f7f539b3d5e5c5b24c3f54e50e227a7" translate="yes" xml:space="preserve">
          <source>while adding two  float value its never give the precise values so we need to fixed this to certain number that will help us to compare.</source>
          <target state="translated">При добавлении двух значений с плавающей запятой,оно никогда не дает точных значений,поэтому нам нужно исправить это к определенному числу,которое поможет нам сравнить.</target>
        </trans-unit>
        <trans-unit id="e8f984f0c891a245d25e57c3d16b020e0d0d3e8d" translate="yes" xml:space="preserve">
          <source>you can define a custom compare function, like this :</source>
          <target state="translated">вы можете определить пользовательскую функцию сравнения,например,вот так:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
