<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/1458633">
    <body>
      <group id="1458633">
        <trans-unit id="a58ae6e028aa9f56e0b393f9b27512d036863b7f" translate="yes" xml:space="preserve">
          <source>--- as in ---</source>
          <target state="translated">---como en ---</target>
        </trans-unit>
        <trans-unit id="a61acece68b9a4523517acd4c2932a44347a36f6" translate="yes" xml:space="preserve">
          <source>---also---</source>
          <target state="translated">---also---</target>
        </trans-unit>
        <trans-unit id="04039dd8c765ea73c439eaf667216b755095fcbb" translate="yes" xml:space="preserve">
          <source>---or---</source>
          <target state="translated">---or---</target>
        </trans-unit>
        <trans-unit id="e239b2f0cb4457085cc5a0a4c2e32b9d1078ef93" translate="yes" xml:space="preserve">
          <source>0.1 in binary floating points is like 1/3 in decimal (i.e. 0.3333333333333... forever), there's just no accurate way to handle it.</source>
          <target state="translated">0,1 en puntos flotantes binarios es como 13 en decimal (es decir,0,3333333333333...para siempre),simplemente no hay una forma precisa de manejarlo.</target>
        </trans-unit>
        <trans-unit id="bc9246ffda94554579941bcde9c4edc49c446d01" translate="yes" xml:space="preserve">
          <source>0.6 * 3 it's awesome!))
For me this works fine:</source>
          <target state="translated">0.6*3 es impresionante!))Para mí esto funciona bien:</target>
        </trans-unit>
        <trans-unit id="3cc69294c19b6465378465752174c2fdb6cba03d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mikemcl.github.io/decimal.js/&quot;&gt;decimal.js&lt;/a&gt;, &lt;a href=&quot;http://mikemcl.github.io/big.js/&quot;&gt;big.js&lt;/a&gt; or &lt;a href=&quot;http://mikemcl.github.io/bignumber.js/&quot;&gt;bignumber.js&lt;/a&gt; can be used to avoid floating-point manipulation problems in Javascript:</source>
          <target state="translated">&lt;a href=&quot;http://mikemcl.github.io/decimal.js/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;decimal.js&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://mikemcl.github.io/big.js/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;big.js&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://mikemcl.github.io/bignumber.js/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;bignumber.js&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se pueden usar para evitar problemas de manipulaci&amp;oacute;n de punto flotante en Javascript:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f8da0f03b27353c36e89a7f463f0f26edc030610" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/MikeMcl/bignumber.js&quot;&gt;BigNumbers&lt;/a&gt; solved the problem, but introduced another, somewhat ironic, problem. When trying to load 8.5 into BigNumbers I was informed that it was really 8.4999&amp;hellip; and had more than 15 significant digits. This meant BigNumbers could not accept it (I believe I mentioned this problem was somewhat ironic).</source>
          <target state="translated">&lt;a href=&quot;https://github.com/MikeMcl/bignumber.js&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;BigNumbers&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; resolvi&amp;oacute; el problema, pero introdujo otro problema, algo ir&amp;oacute;nico. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Al intentar cargar 8.5 en BigNumbers, me informaron que en realidad era 8.4999 ... y que ten&amp;iacute;a m&amp;aacute;s de 15 d&amp;iacute;gitos significativos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto significaba que BigNumbers no pod&amp;iacute;a aceptarlo (creo que mencion&amp;eacute; que este problema era algo ir&amp;oacute;nico).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce0db9bea2fbfefa7b87bc4a1388e1cc35b89b2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Better avoid having the problem&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Mejor evitar tener el problema&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="92f696b23971dfa0a68250122f4ece948aba6e57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Discrete functions or operators (like modula)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Funciones u operadores discretos (como m&amp;oacute;dulo)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d4abe6058e1666fa25cd7562739ff8d998c39bfd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Input and output for floating point values&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entrada y salida para valores de coma flotante&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a09079fe3f3cae3b532870bda64e5af716b17478" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Problem&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Problem&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="241fda0675cef6227b22533c7fc0f61068a79a12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What can I do to avoid this problem?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Qu&amp;eacute; puedo hacer para evitar este problema?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ce9300b41e15ad2d19e7ece35b5fc60757beb39e" translate="yes" xml:space="preserve">
          <source>A (very quick) solution looks something like:</source>
          <target state="translated">Una solución (muy rápida)parece algo así:</target>
        </trans-unit>
        <trans-unit id="33a2b5e174fcca7358ea0f736487477bfc1ffec7" translate="yes" xml:space="preserve">
          <source>A JavaScript library for arbitrary-precision decimal and non-decimal arithmetic.</source>
          <target state="translated">Una biblioteca de JavaScript para aritmética decimal y no decimal de precisión arbitraria.</target>
        </trans-unit>
        <trans-unit id="cdc228a5887707e65f81fcb3dccdf34e8acdcbf5" translate="yes" xml:space="preserve">
          <source>A small, fast JavaScript library for arbitrary-precision decimal arithmetic. The little sister to bignumber.js.</source>
          <target state="translated">Una pequeña y rápida biblioteca de JavaScript para aritmética decimal de precisión arbitraria.La hermana pequeña de bignumber.js.</target>
        </trans-unit>
        <trans-unit id="24ab8c562d1e296af3223a66eb9647aaf3256c06" translate="yes" xml:space="preserve">
          <source>A special check/correction on intermediate calculation results, immediately after applying the discrete function or operator might be required.
For a specific case (modula operator), see my answer on question: &lt;a href=&quot;https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/45346570#45346570&quot;&gt;Why does modulus operator return fractional number in javascript?&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es posible que se requiera una verificaci&amp;oacute;n / correcci&amp;oacute;n especial en los resultados de c&amp;aacute;lculo intermedios, inmediatamente despu&amp;eacute;s de aplicar la funci&amp;oacute;n u operador discreto. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para un caso espec&amp;iacute;fico (operador de m&amp;oacute;dulo), vea mi respuesta a la pregunta: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/45346570#45346570&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Por qu&amp;eacute; el operador de m&amp;oacute;dulo devuelve un n&amp;uacute;mero fraccionario en javascript?&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9e147f80845946fb26fa310a4077a3d65e96df84" translate="yes" xml:space="preserve">
          <source>Add a small value to the outputs before rounding/formatting them which is smaller than or equal to 1/4 of the desired precision and bigger than the maximum expected error caused by rounding errors on input and during calculation. If that is not possible the combination of the precision of the used data type isn't enough to deliver the desired output precision for your calculation.</source>
          <target state="translated">Añadir un pequeño valor a las salidas antes de redondearlas,que sea menor o igual a 14 de la precisión deseada y mayor que el máximo error esperado causado por los errores de redondeo en la entrada y durante el cálculo.Si eso no es posible,la combinación de la precisión del tipo de datos utilizado no es suficiente para obtener la precisión de salida deseada para su cálculo.</target>
        </trans-unit>
        <trans-unit id="9ec5991d0491a50ed072932cfd75f49e54ea8673" translate="yes" xml:space="preserve">
          <source>An arbitrary-precision Decimal type for JavaScript.</source>
          <target state="translated">Un tipo de decimal de precisión arbitraria para JavaScript.</target>
        </trans-unit>
        <trans-unit id="22b59d0bd4142a0ac4d0949aed1e7a4055828148" translate="yes" xml:space="preserve">
          <source>Are you only performing multiplication?  If so then you can use to your advantage a neat secret about decimal arithmetic.  That is that &lt;code&gt;NumberOfDecimals(X) + NumberOfDecimals(Y) = ExpectedNumberOfDecimals&lt;/code&gt;. That is to say that if we have &lt;code&gt;0.123 * 0.12&lt;/code&gt; then we know that there will be 5 decimal places because &lt;code&gt;0.123&lt;/code&gt; has 3 decimal places and &lt;code&gt;0.12&lt;/code&gt; has two. Thus if JavaScript gave us a number like &lt;code&gt;0.014760000002&lt;/code&gt; we can safely round to the 5th decimal place without fear of losing precision.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Solo est&amp;aacute;s realizando multiplicaci&amp;oacute;n? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si es as&amp;iacute;, puede utilizar a su favor un secreto claro sobre la aritm&amp;eacute;tica decimal. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es decir que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;NumberOfDecimals(X) + NumberOfDecimals(Y) = ExpectedNumberOfDecimals&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es decir que si tenemos &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0.123 * 0.12&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; entonces sabemos que habr&amp;aacute; 5 lugares decimales porque &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0.123&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene 3 lugares decimales y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0.12&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene dos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, si JavaScript nos dio un n&amp;uacute;mero como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0.014760000002&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , podemos redondear con seguridad al quinto decimal sin temor a perder precisi&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1c873412f7d33e43d993fd7170b2548732ae1976" translate="yes" xml:space="preserve">
          <source>Because the rounding adds an error which can cause the total error to be more then half of the desired precision, the output should be corrected based on expected precision of inputs and desired precision of output. You should</source>
          <target state="translated">Debido a que el redondeo añade un error que puede hacer que el error total sea más de la mitad de la precisión deseada,la salida debe ser corregida en base a la precisión esperada de las entradas y la precisión deseada de la salida.Se debe</target>
        </trans-unit>
        <trans-unit id="5292ab4ae2ac6f1f1671909362adce21a8d03efb" translate="yes" xml:space="preserve">
          <source>Big.js</source>
          <target state="translated">Big.js</target>
        </trans-unit>
        <trans-unit id="d66c7d4989fa88e8c1967fe5c794a60a171e4bb4" translate="yes" xml:space="preserve">
          <source>Does anyone have a good solution so that in such case I get the correct result &lt;code&gt;0.02&lt;/code&gt;? I know there are functions like &lt;code&gt;toFixed&lt;/code&gt; or rounding would be another possibility, but I'd like to really have the whole number printed without any cutting and rounding. Just wanted to know if one of you has some nice, elegant solution.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Alguien tiene una buena soluci&amp;oacute;n para que en tal caso obtenga el resultado correcto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0.02&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;S&amp;eacute; que hay funciones como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;toFixed&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o el redondeo ser&amp;iacute;a otra posibilidad, pero me gustar&amp;iacute;a tener el n&amp;uacute;mero entero impreso sin ning&amp;uacute;n corte y redondeo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Solo quer&amp;iacute;a saber si alguno de ustedes tiene una soluci&amp;oacute;n agradable y elegante.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Ampliar fragmento</target>
        </trans-unit>
        <trans-unit id="c341e94c1b98a43dae4389df37cf0aada6e3fee0" translate="yes" xml:space="preserve">
          <source>Fix:</source>
          <target state="translated">Fix:</target>
        </trans-unit>
        <trans-unit id="4056e753845c8a8fd4a301c49e68620745f4fc19" translate="yes" xml:space="preserve">
          <source>Floating point can't store all decimal values exactly. So when using floating point formats there will always be rounding errors on the input values.
The errors on the inputs of course results on errors on the output.
In case of a discrete function or operator there can be big differences on the output around the point where the function or operator is discrete.</source>
          <target state="translated">El punto flotante no puede almacenar todos los valores decimales exactamente.Así que cuando se usan formatos de punto flotante siempre habrá errores de redondeo en los valores de entrada.Los errores en las entradas,por supuesto,resultan en errores en las salidas.En el caso de una función u operador discreto puede haber grandes diferencias en la salida alrededor del punto donde la función u operador es discreto.</target>
        </trans-unit>
        <trans-unit id="aeb92746f89ae3b376318f5f1b422a3f62e2d554" translate="yes" xml:space="preserve">
          <source>For the mathematically inclined: &lt;a href=&quot;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&quot;&gt;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para los matem&amp;aacute;ticamente inclinados: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bd67f72c65d9c61d8d2450191828d1627d8d5146" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;http://floating-point-gui.de/&quot;&gt;Floating-Point Guide&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://floating-point-gui.de/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;gu&amp;iacute;a de punto flotante&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f3aade10752679fef5dd7ea1f4d15d9b02c98c3e" translate="yes" xml:space="preserve">
          <source>Have a look at &lt;a href=&quot;http://en.wikipedia.org/wiki/Fixed-point_arithmetic&quot;&gt;Fixed-point arithmetic&lt;/a&gt;. It will probably solve your problem, if the range of numbers you want to operate on is small (eg, currency). I would round it off to a few decimal values, which is the simplest solution.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Echa un vistazo a la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Fixed-point_arithmetic&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aritm&amp;eacute;tica de punto fijo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Probablemente resolver&amp;aacute; su problema, si el rango de n&amp;uacute;meros en el que desea operar es peque&amp;ntilde;o (por ejemplo, moneda). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo redondear&amp;iacute;a a unos pocos valores decimales, que es la soluci&amp;oacute;n m&amp;aacute;s simple.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b83cbd138fff23024c94f3b4bad484eafc94fff3" translate="yes" xml:space="preserve">
          <source>Here's some code using BigNumber:</source>
          <target state="translated">Aquí hay un código usando BigNumber:</target>
        </trans-unit>
        <trans-unit id="ee81411664de7bb4caaa5929799806ccb568b7b0" translate="yes" xml:space="preserve">
          <source>How to deal with floating point number precision in JavaScript</source>
          <target state="translated">Cómo tratar con la precisión del número de punto flotante en JavaScript</target>
        </trans-unit>
        <trans-unit id="c8df9c129f17bfcc385ced7492e4b82ccec5e93a" translate="yes" xml:space="preserve">
          <source>I definitely recommend using a tested library like &lt;a href=&quot;https://github.com/guipn/sinful.js/blob/master/sinful.js&quot;&gt;SinfulJS&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Definitivamente recomiendo usar una biblioteca probada como &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/guipn/sinful.js/blob/master/sinful.js&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SinfulJS&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a853ef4121663b373e78e17939e2d11ca4c83986" translate="yes" xml:space="preserve">
          <source>I had a nasty rounding error problem with mod 3. Sometimes when I should get 0 I would get .000...01. That's easy enough to handle, just test for &amp;lt;= .01. But then sometimes I would get 2.99999999999998. OUCH!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tuve un desagradable problema de error de redondeo con el mod 3. A veces, cuando obten&amp;iacute;a 0, obten&amp;iacute;a .000 ... 01. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Eso es bastante f&amp;aacute;cil de manejar, solo pruebe &amp;lt;= .01. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero a veces obten&amp;iacute;a 2.99999999999998. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iexcl;AY!&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e9f9d35c2b34cb9f3475700d017c4d1185419e3c" translate="yes" xml:space="preserve">
          <source>I have the following dummy test script:</source>
          <target state="translated">Tengo el siguiente guión de prueba ficticio:</target>
        </trans-unit>
        <trans-unit id="ba55b9d67e3d6448720f1cc36080a3e415841b6d" translate="yes" xml:space="preserve">
          <source>I like Pedro Ladaria's solution and use something similar.</source>
          <target state="translated">Me gusta la solución de Pedro Ladaria y uso algo similar.</target>
        </trans-unit>
        <trans-unit id="11e4c0a4884796e3eaf68f789faed2b433d2248f" translate="yes" xml:space="preserve">
          <source>I'm finding &lt;a href=&quot;https://github.com/MikeMcl/bignumber.js/&quot;&gt;BigNumber.js&lt;/a&gt; meets my needs.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Estoy descubriendo que &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/MikeMcl/bignumber.js/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;BigNumber.js&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; satisface mis necesidades.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="970fc9047311aa9e995057a784ac862b33e2831e" translate="yes" xml:space="preserve">
          <source>If the first point really applies to you, use &lt;a href=&quot;https://web.archive.org/web/20150511085914/https://github.com/dtrebbien/BigDecimal.js&quot;&gt;BigDecimal for JavaScript&lt;/a&gt;, which is not elegant at all, but actually solves the problem rather than providing an imperfect workaround.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si el primer punto realmente se aplica a usted, use &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://web.archive.org/web/20150511085914/https://github.com/dtrebbien/BigDecimal.js&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;BigDecimal para JavaScript&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que no es elegante en absoluto, pero en realidad resuelve el problema en lugar de proporcionar una soluci&amp;oacute;n imperfecta.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f6e317ec81ade40f1e9e97cedccdc40678ac775d" translate="yes" xml:space="preserve">
          <source>If you are doing if-s/comparisons and don't want to cut of then you also need a small constant, usually called eps, which is one decimal place higher than max expected error. Say that your cut-off is last two decimals - then your eps has 1 at the 3rd place from the last (3rd least significant) and you can use it to compare whether the result is within eps range of expected (0.02 -eps &amp;lt; 0.1*0.2 &amp;lt; 0.02 +eps).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si est&amp;aacute; haciendo if-s / comparaciones y no quiere cortar, entonces tambi&amp;eacute;n necesita una peque&amp;ntilde;a constante, generalmente llamada eps, que es un decimal m&amp;aacute;s que el error m&amp;aacute;ximo esperado. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Supongamos que su punto de corte son los dos &amp;uacute;ltimos decimales, entonces su eps tiene 1 en el tercer lugar desde el &amp;uacute;ltimo (3. &amp;deg; menos significativo) y puede usarlo para comparar si el resultado est&amp;aacute; dentro del rango de eps esperado (0.02 -eps &amp;lt;0.1 * 0.2 &amp;lt;0.02 + eps).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3fb645f140e6b7fba5cf80b199367d878602c09e" translate="yes" xml:space="preserve">
          <source>If you have no decimal datatype available, an alternative is to work
  with integers, e.g. do money
  calculations entirely in cents. But
  this is more work and has some
  drawbacks.</source>
          <target state="translated">Si no se dispone de un tipo de datos decimal,una alternativa es trabajar con números enteros,por ejemplo,hacer cálculos de dinero totalmente en centavos.Pero esto es más trabajo y tiene algunos inconvenientes.</target>
        </trans-unit>
        <trans-unit id="f9a231822977eedb774b63cec0c1a0376b172063" translate="yes" xml:space="preserve">
          <source>If you just don&amp;rsquo;t want to see all those extra decimal places: simply
  format your result rounded to a fixed
  number of decimal places when
  displaying it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si no desea ver todos esos lugares decimales adicionales: simplemente formatee su resultado redondeado a un n&amp;uacute;mero fijo de lugares decimales cuando lo muestre.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="42fc965d2e7933faeb52ad0042fa265db75c529f" translate="yes" xml:space="preserve">
          <source>If you really need your results to add up exactly, especially when you
  work with money: use a special decimal
  datatype.</source>
          <target state="translated">Si realmente necesitas que tus resultados sumen exactamente,especialmente cuando trabajas con dinero:usa un tipo de dato decimal especial.</target>
        </trans-unit>
        <trans-unit id="d5f63b24009028d7cd1e82a2dcdac457c43a8f72" translate="yes" xml:space="preserve">
          <source>If you're dealing with floats &lt;em&gt;always&lt;/em&gt; expect small rounding errors, so you'll also always have to round the displayed result to something sensible. In return you get very very fast and powerful arithmetic because all the computations are in the native binary of the processor.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si se trata de flotadores, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;siempre&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; espere peque&amp;ntilde;os errores de redondeo, por lo que tambi&amp;eacute;n tendr&amp;aacute; que redondear el resultado mostrado a algo sensato. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A cambio, obtienes aritm&amp;eacute;tica muy, muy r&amp;aacute;pida y potente porque todos los c&amp;aacute;lculos est&amp;aacute;n en el binario nativo del procesador.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="76df916b62840bf387c4d5f679f0bb56b6c112cd" translate="yes" xml:space="preserve">
          <source>In this case:</source>
          <target state="translated">En este caso:</target>
        </trans-unit>
        <trans-unit id="dc35e05387823f39d75255f34cb157621bf93da5" translate="yes" xml:space="preserve">
          <source>It has good &lt;a href=&quot;http://mikemcl.github.io/bignumber.js/&quot;&gt;documentation&lt;/a&gt; and the author is very diligent responding to feedback.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tiene buena &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://mikemcl.github.io/bignumber.js/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;documentaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y el autor responde muy diligentemente a los comentarios.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c0dbedb40544f549861aab974817b42583eb09a3" translate="yes" xml:space="preserve">
          <source>It is often more efficient to avoid these problems by using data types (integer or fixed point formats) for calculations like this which can store the expected input without rounding errors.
An example of that is that you should never use floating point values for financial calculations.</source>
          <target state="translated">A menudo es más eficiente evitar estos problemas utilizando tipos de datos (formatos de números enteros o de puntos fijos)para cálculos como éste,que pueden almacenar la entrada esperada sin errores de redondeo.Un ejemplo de ello es que nunca se deben utilizar valores de coma flotante para los cálculos financieros.</target>
        </trans-unit>
        <trans-unit id="448607d7ba223d62964e7cd11aa31257cd4a3f9c" translate="yes" xml:space="preserve">
          <source>Many systems omit working with decimals this way. That is the reason why many systems work with cents (as integer) instead of dollars/euro's (as floating point).</source>
          <target state="translated">Muchos sistemas omiten trabajar con decimales de esta manera.Esa es la razón por la que muchos sistemas trabajan con céntimos (como enteros)en lugar de dollarseuro (como punto flotante).</target>
        </trans-unit>
        <trans-unit id="6d6f9a91ba210d6d0d8e1736e610c0911b4b3dfe" translate="yes" xml:space="preserve">
          <source>Most of the time the solution is not to switch to fixed-point arithmetic, mainly because it's much slower and 99% of the time you just don't need the accuracy. If you're dealing with stuff that does need that level of accuracy (for instance financial transactions) Javascript probably isn't the best tool to use anyway (as you've want to enforce the fixed-point types a static language is probably better).</source>
          <target state="translated">La mayoría de las veces la solución es no cambiar a la aritmética de punto fijo,principalmente porque es mucho más lenta y el 99% de las veces no necesitas la precisión.Si se trata de cosas que sí necesitan ese nivel de precisión (por ejemplo,las transacciones financieras)Javascript probablemente no es la mejor herramienta para utilizar de todos modos (como se quiere reforzar los tipos de punto fijo,un lenguaje estático es probablemente mejor).</target>
        </trans-unit>
        <trans-unit id="9bf7090b248473b9077c1c5f6937631d47c5fe07" translate="yes" xml:space="preserve">
          <source>Note that the first point only applies if you really need specific precise &lt;em&gt;decimal&lt;/em&gt; behaviour. Most people don't need that, they're just irritated that their programs don't work correctly with numbers like 1/10 without realizing that they wouldn't even blink at the same error if it occurred with 1/3.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que el primer punto solo se aplica si realmente necesita un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;comportamiento &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;decimal&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; preciso espec&amp;iacute;fico &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La mayor&amp;iacute;a de las personas no necesitan eso, simplemente est&amp;aacute;n molestos porque sus programas no funcionan correctamente con n&amp;uacute;meros como 1/10 sin darse cuenta de que ni siquiera parpadear&amp;iacute;an ante el mismo error si ocurriera con 1/3.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eb097215ec09eb0024375e4ae22d1c146c281243" translate="yes" xml:space="preserve">
          <source>Note: When dealing with 32 or 64 bit floats, you should use toPrecision(7) and toPrecision(15) for best results.  See &lt;a href=&quot;https://stackoverflow.com/questions/28045787/how-many-decimal-places-does-the-primitive-float-and-double-support&quot;&gt;this question&lt;/a&gt; for info as to why.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Nota: Cuando se trata de flotantes de 32 o 64 bits, debe usar toPrecision (7) y toPrecision (15) para obtener mejores resultados. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vea &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/28045787/how-many-decimal-places-does-the-primitive-float-and-double-support&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esta pregunta&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para obtener informaci&amp;oacute;n sobre por qu&amp;eacute;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11195d73ee275b234990d7d7cb1e88d873fcca46" translate="yes" xml:space="preserve">
          <source>Notice that for the general purpose use, this behavior is likely to be acceptable.</source>
          <target state="translated">Fíjese que para el uso general,este comportamiento es probable que sea aceptable.</target>
        </trans-unit>
        <trans-unit id="3290637a00912e04380d8c64be613af76228d4bf" translate="yes" xml:space="preserve">
          <source>Numerical errors accumulate with every further operation and if you don't cut it off early it's just going to grow. Numerical libraries which present results that look clean simply cut off the last 2 digits at every step, numerical co-processors also have a &quot;normal&quot; and &quot;full&quot; lenght for the same reason. Cuf-offs are cheap for a processor but very expensive for you in a script (multiplying and dividing and using pov(...)). Good math lib would provide floor(x,n) to do the cut-off for you.</source>
          <target state="translated">Los errores numéricos se acumulan con cada operación que se realiza y si no lo cortas pronto,simplemente crecerá.Las librerías numéricas que presentan resultados que parecen limpios simplemente cortan los últimos 2 dígitos en cada paso,los co-procesadores numéricos también tienen una longitud &quot;normal&quot; y &quot;completa&quot; por la misma razón.Los Cuf-offs son baratos para un procesador pero muy caros para ti en un script (multiplicando y dividiendo y usando pov(...)).Una buena habilidad matemática te dará el piso(x,n)para hacer el corte por ti.</target>
        </trans-unit>
        <trans-unit id="2839401e766a935656ba07eb6b9d6b7c03f3cac8" translate="yes" xml:space="preserve">
          <source>Of course that won't help much with irrational numbers. But you may want to optimize your computations in the way they will cause the least problem (e.g. detecting situations like &lt;code&gt;sqrt(3)^2)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por supuesto, eso no ayudar&amp;aacute; mucho con los n&amp;uacute;meros irracionales. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero es posible que desee optimizar sus c&amp;aacute;lculos de la forma en que causar&amp;aacute;n el menor problema (por ejemplo, detectar situaciones como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sqrt(3)^2)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63652065953c408e91fa63939df078c88343bbe4" translate="yes" xml:space="preserve">
          <source>Of course, otherwise I'll round to some 10 digits or so.</source>
          <target state="translated">Por supuesto,si no,redondearé a unos 10 dígitos más o menos.</target>
        </trans-unit>
        <trans-unit id="56ceded875df16b30aabedd0be6143d73e5f2da8" translate="yes" xml:space="preserve">
          <source>Output using the following function:</source>
          <target state="translated">Salida usando la siguiente función:</target>
        </trans-unit>
        <trans-unit id="1a87200547de52dcba232ee8140c48ce625448de" translate="yes" xml:space="preserve">
          <source>Pay attention to the output &lt;code&gt;toFixedCurrency(x)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Preste atenci&amp;oacute;n a la salida a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;toFixedCurrency(x)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7ccc77c464d68ec4d4d9bc39d5016a33fe1860ca" translate="yes" xml:space="preserve">
          <source>Round inputs to the expected precision or make sure no values can be entered with higher precision.</source>
          <target state="translated">Redondee las entradas a la precisión esperada o asegúrese de que no se puedan introducir valores con mayor precisión.</target>
        </trans-unit>
        <trans-unit id="fea441daf71749c24a14635d2315d7865e68e5f8" translate="yes" xml:space="preserve">
          <source>Simple solution to ironic problem:</source>
          <target state="translated">Una solución simple para un problema irónico:</target>
        </trans-unit>
        <trans-unit id="5fa04705106510002b87a6a2c96b7082fb446b6c" translate="yes" xml:space="preserve">
          <source>So at the very least you should make global var/constant with pov(10,n) - meaning that you decided on the precision you need :-) Then do:</source>
          <target state="translated">Así que al menos deberías hacer la varconstancia global con pov(10,n)-lo que significa que has decidido la precisión que necesitas :-)Entonces hazlo:</target>
        </trans-unit>
        <trans-unit id="87f4cc4a8551195a42d1a9c700149f90f3ab76a5" translate="yes" xml:space="preserve">
          <source>So instead of performing the comparison like this</source>
          <target state="translated">Así que en lugar de realizar la comparación de esta manera</target>
        </trans-unit>
        <trans-unit id="04289cf569c9ea315b899e01e3ff8127ebce2c75" translate="yes" xml:space="preserve">
          <source>So, when using floating point variables, you should always be aware of this. And whatever output you want from a calculation with floating points should always be formatted/conditioned before displaying with this in mind.</source>
          <target state="translated">Así que,cuando se usan variables de punto flotante,siempre hay que tener en cuenta esto.Y cualquier resultado que se quiera obtener de un cálculo con puntos flotantes siempre debe ser formateado y condicionado antes de mostrarlo con esto en mente.</target>
        </trans-unit>
        <trans-unit id="a55f20d8ecae19b33f63d58dc9371e763bf4f2d9" translate="yes" xml:space="preserve">
          <source>Source : &lt;a href=&quot;http://2ality.com/2015/04/numbers-math-es6.html#numberepsilon&quot;&gt;http://2ality.com/2015/04/numbers-math-es6.html#numberepsilon&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Fuente: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://2ality.com/2015/04/numbers-math-es6.html#numberepsilon&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://2ality.com/2015/04/numbers-math-es6.html#numberepsilon&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d25e632121467e8635330d7167a552d2e9181c60" translate="yes" xml:space="preserve">
          <source>Surprisingly, this function has not been posted yet although others have similar variations of it. It is from the MDN web docs for Math.round().
It's concise and allows for varying precision.</source>
          <target state="translated">Sorprendentemente,esta función no ha sido publicada todavía,aunque otras tienen variaciones similares de ella.Es de los documentos web de MDN para Math.round().Es conciso y permite una precisión variable.</target>
        </trans-unit>
        <trans-unit id="87dbc587972268868e6cbe059d1ed329fd1a5fc4" translate="yes" xml:space="preserve">
          <source>That depends on what kind of
  calculations you&amp;rsquo;re doing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Eso depende de qu&amp;eacute; tipo de c&amp;aacute;lculos est&amp;eacute;s haciendo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c927531832108bc06279d31503b601200af52f43" translate="yes" xml:space="preserve">
          <source>The problem arises when comparing those floating points values to determine an appropriate action.</source>
          <target state="translated">El problema surge cuando se comparan esos valores de puntos flotantes para determinar una acción apropiada.</target>
        </trans-unit>
        <trans-unit id="55b1d2cc4477268763bd5500964d5b184e3991ae" translate="yes" xml:space="preserve">
          <source>The recommended approach is to use correction factors (multiply by a suitable power of 10 so that the arithmetic happens between integers).  For example, in the case of &lt;code&gt;0.1 * 0.2&lt;/code&gt;, the correction factor is &lt;code&gt;10&lt;/code&gt;, and you are performing the calculation:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El enfoque recomendado es usar factores de correcci&amp;oacute;n (multiplicar por una potencia adecuada de 10 para que la aritm&amp;eacute;tica ocurra entre enteros). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, en el caso de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0.1 * 0.2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , el factor de correcci&amp;oacute;n es &lt;/font&gt;&lt;/font&gt; &lt;code&gt;10&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y est&amp;aacute; realizando el c&amp;aacute;lculo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3b6daa3471e97c035d55063d4c0b0d8e3d0cf9a7" translate="yes" xml:space="preserve">
          <source>The result you've got is correct and fairly consistent across floating point implementations in different languages, processors and operating systems - the only thing that changes is the level of the inaccuracy when the float is actually a double (or higher).</source>
          <target state="translated">El resultado que ha obtenido es correcto y bastante consistente a través de implementaciones de punto flotante en diferentes lenguajes,procesadores y sistemas operativos-lo único que cambia es el nivel de la inexactitud cuando el punto flotante es en realidad un doble (o superior).</target>
        </trans-unit>
        <trans-unit id="578414fc1ccf375f1c3022393ae84492ed9b86d6" translate="yes" xml:space="preserve">
          <source>The round() function at phpjs.org works nicely: &lt;a href=&quot;http://phpjs.org/functions/round&quot;&gt;http://phpjs.org/functions/round&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La funci&amp;oacute;n round () en phpjs.org funciona bien: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://phpjs.org/functions/round&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://phpjs.org/functions/round&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7aa22287f011062f40011982b9b1e4267305ec01" translate="yes" xml:space="preserve">
          <source>The same author has 2 other similar libraries:</source>
          <target state="translated">El mismo autor tiene otras dos bibliotecas similares:</target>
        </trans-unit>
        <trans-unit id="45b18900669ce60100b2a8139e01034f4d63e1c4" translate="yes" xml:space="preserve">
          <source>These 2 things are usually not done and in most cases the differences caused by not doing them are too small to be important for most users, but I already had a project where output wasn't accepted by the users without those corrections.</source>
          <target state="translated">Estas 2 cosas normalmente no se hacen y en la mayoría de los casos las diferencias causadas por no hacerlas son demasiado pequeñas para ser importantes para la mayoría de los usuarios,pero yo ya tenía un proyecto en el que los resultados no eran aceptados por los usuarios sin esas correcciones.</target>
        </trans-unit>
        <trans-unit id="995e6adcd7dd4e903f9034755d0f02e5f32e42e5" translate="yes" xml:space="preserve">
          <source>These conditions work correctly:</source>
          <target state="translated">Estas condiciones funcionan correctamente:</target>
        </trans-unit>
        <trans-unit id="30a1e69eaf576087f4adc95f66859b6980b7efbd" translate="yes" xml:space="preserve">
          <source>This function will determine the needed precision from the multiplication of two floating point numbers and return a result with the appropriate precision. Elegant though it is not.</source>
          <target state="translated">Esta función determinará la precisión necesaria a partir de la multiplicación de dos números de punto flotante y devolverá un resultado con la precisión apropiada.Aunque no es elegante.</target>
        </trans-unit>
        <trans-unit id="1c60c8cf88cdadc5ddf53a3cf7f9de9f9bf4f000" translate="yes" xml:space="preserve">
          <source>This just adds a digit to the right when rounding decimals.
MDN has updated the Math.round page so maybe someone could provide a 
better solution.</source>
          <target state="translated">Esto sólo añade un dígito a la derecha al redondear los decimales.MDN ha actualizado la página Math.round para que alguien pueda ofrecer una mejor solución.</target>
        </trans-unit>
        <trans-unit id="22f1374e80bb9c8ef8c66feafcef8948c3f17d13" translate="yes" xml:space="preserve">
          <source>This will print the result &lt;code&gt;0.020000000000000004&lt;/code&gt; while it should just print &lt;code&gt;0.02&lt;/code&gt; (if you use your calculator). As far as I understood this is due to errors in the floating point multiplication precision.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto imprimir&amp;aacute; el resultado &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0.020000000000000004&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; mientras que deber&amp;iacute;a imprimir &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0.02&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (si usa su calculadora). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Seg&amp;uacute;n tengo entendido, esto se debe a errores en la precisi&amp;oacute;n de multiplicaci&amp;oacute;n de coma flotante.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1b4e4dd5dedd60c21b1e2d40ef5986a69c044c8f" translate="yes" xml:space="preserve">
          <source>This works for me:</source>
          <target state="translated">Esto funciona para mí:</target>
        </trans-unit>
        <trans-unit id="41a41835f3c82af8647a7b77cb179b50a5405429" translate="yes" xml:space="preserve">
          <source>To avoid this you should work with integer values instead of floating points. So when you want to have 2 positions precision work with the values * 100, for 3 positions use 1000. When displaying you use a formatter to put in the separator.</source>
          <target state="translated">Para evitarlo,debería trabajar con valores enteros en lugar de puntos flotantes.Así que cuando quieras tener 2 posiciones,trabaja con los valores*100,para 3 posiciones usa 1000.Cuando se muestra,se utiliza un formateador para poner el separador.</target>
        </trans-unit>
        <trans-unit id="9f4481943972d21f141fcea329ac4f83c9332934" translate="yes" xml:space="preserve">
          <source>Try &lt;a href=&quot;http://www.diveintojavascript.com/projects/javascript-sprintf&quot;&gt;javascript-sprintf&lt;/a&gt;, you would call it like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pruebe &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.diveintojavascript.com/projects/javascript-sprintf&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;javascript-sprintf&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , lo llamar&amp;iacute;a as&amp;iacute;:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7818ea1fdff45e1ca14750be6d4169bfaee57e85" translate="yes" xml:space="preserve">
          <source>Try my chiliadic arithmetic library, which you can see &lt;a href=&quot;http://www.daniweb.com/forums/thread222006.html&quot;&gt;here&lt;/a&gt;.
If you want a later version, I can get you one.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Prueba mi biblioteca de aritm&amp;eacute;tica chilena, que puedes ver &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.daniweb.com/forums/thread222006.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aqu&amp;iacute;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si quieres una versi&amp;oacute;n posterior, puedo conseguirte una.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="069816246ed77462eefa613586edbd76e4fd87a2" translate="yes" xml:space="preserve">
          <source>UPDATE: Aug/20/2019
Just noticed this error. I believe it's due to a floating point precision error with Math.round().</source>
          <target state="translated">ACTUALIZACIÓN:Aug202019 Acabo de notar este error.Creo que se debe a un error de precisión de punto flotante con Math.round().</target>
        </trans-unit>
        <trans-unit id="16e517b2e990ed3cf70be817c23709bd8d7accfa" translate="yes" xml:space="preserve">
          <source>Unlike Pedros solution this will round up 0.999...repeating and is accurate to plus/minus one on the least significant digit.</source>
          <target state="translated">A diferencia de la solución de Pedros,esta redondeará 0,999...repitiéndose y es exacta a más-menos uno en el dígito menos significativo.</target>
        </trans-unit>
        <trans-unit id="1d4d43cc6f3a833e0340a0d1794b6d7b9958657e" translate="yes" xml:space="preserve">
          <source>Use</source>
          <target state="translated">Use</target>
        </trans-unit>
        <trans-unit id="c9fa3b375e9e156eb9d66c9445e57dd3139fe0c4" translate="yes" xml:space="preserve">
          <source>Use Number(1.234443).toFixed(2); it will print 1.23</source>
          <target state="translated">Use el número(1.234443).aFijo(2);imprimirá 1.23</target>
        </trans-unit>
        <trans-unit id="8dbb2394fd5cea4a5a0bceabe5ea9e242ad8b66c" translate="yes" xml:space="preserve">
          <source>Very very simple))</source>
          <target state="translated">Muy,muy simple))</target>
        </trans-unit>
        <trans-unit id="a6dda06638f436253a8d23045c0f9134a35f024c" translate="yes" xml:space="preserve">
          <source>When discrete operators or functions are involved, extra corrections might be required to make sure the output is as expected. Rounding and adding small corrections before rounding can't solve the problem.</source>
          <target state="translated">Cuando se trata de operadores o funciones discretas,pueden ser necesarias correcciones adicionales para asegurarse de que el resultado sea el esperado.Redondear y añadir pequeñas correcciones antes del redondeo no puede resolver el problema.</target>
        </trans-unit>
        <trans-unit id="99becbd0dffc744e204763d33ed726f31f4a99ac" translate="yes" xml:space="preserve">
          <source>When only continuous functions and operators are used, rounding to the desired precision often will do (don't truncate).  Standard formatting features used to convert floats to string will usually do this for you.</source>
          <target state="translated">Cuando sólo se utilizan funciones y operadores continuos,a menudo basta con redondear a la precisión deseada (no truncar).Las funciones de formato estándar utilizadas para convertir los flotadores en cuerda normalmente lo harán por usted.</target>
        </trans-unit>
        <trans-unit id="c6d73c873914a39afca0e4eb9a2e40a4035e5e08" translate="yes" xml:space="preserve">
          <source>With the advent of ES6, a new constant &lt;code&gt;Number.EPSILON&lt;/code&gt; is defined to determine the acceptable error margin :</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con el advenimiento de ES6, &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se define &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;un nuevo n&amp;uacute;mero constante. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Number.EPSILON&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para determinar el margen de error aceptable:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="14be6040fc36980e04bebea70f3f947216b405d0" translate="yes" xml:space="preserve">
          <source>You are looking for an &lt;code&gt;sprintf&lt;/code&gt; implementation for JavaScript, so that you can write out floats with small errors in them (since they are stored in binary format) in a format that you expect.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Est&amp;aacute; buscando una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;implementaci&amp;oacute;n de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sprintf&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para JavaScript, de modo que pueda escribir flotantes con peque&amp;ntilde;os errores (ya que est&amp;aacute;n almacenados en formato binario) en el formato que espera.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ec9ba5ceb02278a88d554e12764f6b29484e13fb" translate="yes" xml:space="preserve">
          <source>You are right, the reason for that is limited precision of floating point numbers. Store your rational numbers as a division of two integer numbers and in most situations you'll be able to store numbers without any precision loss. When it comes to printing, you may want to display the result as fraction. With representation I proposed, it becomes trivial.</source>
          <target state="translated">Tienes razón,la razón de eso es la precisión limitada de los números de punto flotante.Almacena tus números racionales como una división de dos números enteros y en la mayoría de las situaciones serás capaz de almacenar los números sin ninguna pérdida de precisión.Cuando se trata de imprimir,puede que quieras mostrar el resultado como una fracción.Con la representación que propuse,se vuelve trivial.</target>
        </trans-unit>
        <trans-unit id="4ffd7bd84840ca50d76440ccf8ca0c3594bc487e" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;parseFloat()&lt;/code&gt; and &lt;code&gt;toFixed()&lt;/code&gt; if you want to bypass this issue for a small operation:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede usar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;parseFloat()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;toFixed()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; si desea evitar este problema para una operaci&amp;oacute;n peque&amp;ntilde;a:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="40157fe7c1bc40e6a5655614855b704359d6e483" translate="yes" xml:space="preserve">
          <source>You can't represent most decimal fractions exactly with binary floating point types (which is what ECMAScript uses to represent floating point values). So there isn't an elegant solution unless you use arbitrary precision arithmetic types or a decimal based floating point type. For example, &lt;a href=&quot;http://blogs.msdn.com/b/oldnewthing/archive/2004/05/25/141253.aspx&quot;&gt;the Calculator app that ships with Windows now uses arbitrary precision arithmetic to solve this problem&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No puede representar la mayor&amp;iacute;a de las fracciones decimales exactamente con los tipos de punto flotante binario (que es lo que ECMAScript usa para representar valores de punto flotante). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, no hay una soluci&amp;oacute;n elegante a menos que use tipos aritm&amp;eacute;ticos de precisi&amp;oacute;n arbitraria o un tipo de coma flotante basado en decimales. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.msdn.com/b/oldnewthing/archive/2004/05/25/141253.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la aplicaci&amp;oacute;n Calculadora que se incluye con Windows ahora usa aritm&amp;eacute;tica de precisi&amp;oacute;n arbitraria para resolver este problema&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d1cfea31bd9e2d6a6462a80aa994ae5ee23456ce" translate="yes" xml:space="preserve">
          <source>You could also keep doing math and only cut-off at the end - assuming that you are only displaying and not doing if-s with results. If you can do that, then .toFixed(...) might be more efficient.</source>
          <target state="translated">También podrías seguir haciendo matemáticas y sólo cortar al final-asumiendo que sólo estás mostrando y no haciendo if-s con resultados.Si puedes hacer eso,entonces .toFixed(...)podría ser más eficiente.</target>
        </trans-unit>
        <trans-unit id="efdde9427ae67b144eb864b034a322d41713c6fa" translate="yes" xml:space="preserve">
          <source>You just have to make up your mind on how many decimal digits you actually want - can't have the cake and eat it too :-)</source>
          <target state="translated">Sólo tienes que decidir cuántos dígitos decimales quieres,no puedes tener el pastel y comértelo también :-)</target>
        </trans-unit>
        <trans-unit id="b92e6abf5f2b79acdec60ef0de73fe34f00ef252" translate="yes" xml:space="preserve">
          <source>You may also use  &lt;a href=&quot;http://www.w3schools.com/jsref/jsref_tofixed.asp&quot;&gt;Number.toFixed()&lt;/a&gt;  for display purposes, if you'd rather not include  more files merely for floating point rounding to a given precision.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n puede usar &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.w3schools.com/jsref/jsref_tofixed.asp&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Number.toFixed ()&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para fines de visualizaci&amp;oacute;n, si prefiere no incluir m&amp;aacute;s archivos simplemente para el redondeo de punto flotante a una precisi&amp;oacute;n dada.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="edfa60213bd8f2d844928a429d60cb63e965db84" translate="yes" xml:space="preserve">
          <source>You're looking for the elegant solution then I'm afraid this is it: floats are quick but have small rounding errors - always round to something sensible when displaying their results.</source>
          <target state="translated">Estás buscando la solución elegante,entonces me temo que es ésta:los flotadores son rápidos pero tienen pequeños errores de redondeo-siempre redondean a algo sensato al mostrar sus resultados.</target>
        </trans-unit>
        <trans-unit id="4eab28434b44398092c734e075943f499d2e137c" translate="yes" xml:space="preserve">
          <source>and &lt;a href=&quot;https://github.com/MikeMcl/decimal.js/&quot;&gt;Decimal.js&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;y &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/MikeMcl/decimal.js/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Decimal.js&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="31fbdc945417c8ee525f933924cfe13a7f2424af" translate="yes" xml:space="preserve">
          <source>big.js: minimalist; easy-to-use; precision specified in decimal places; precision applied to division only.</source>
          <target state="translated">big.js:minimalista;fácil de usar;precisión especificada en los decimales;precisión aplicada sólo a la división.</target>
        </trans-unit>
        <trans-unit id="b09fe83f641a1a95cde4fd67164f2ee057e13d0a" translate="yes" xml:space="preserve">
          <source>bignumber.js: bases 2-64; configuration options; NaN; Infinity; precision specified in decimal places; precision applied to division only; base prefixes.</source>
          <target state="translated">bignumber.js:bases 2-64;opciones de configuración;NaN;Infinito;precisión especificada en los decimales;precisión aplicada sólo a la división;prefijos de bases.</target>
        </trans-unit>
        <trans-unit id="ca0fb1811849befef678634dcad67c0b4854e51b" translate="yes" xml:space="preserve">
          <source>console.log((parseFloat(0.1) + parseFloat(0.2)).toFixed(1) == parseFloat(0.3).toFixed(1));</source>
          <target state="translated">console.log((parseFloat(0.1)+parseFloat(0.2)).toFixed(1)==parseFloat(0.3).toFixed(1));</target>
        </trans-unit>
        <trans-unit id="a72717b86f4f1d0fa2a38b2fab25f2b271a2264a" translate="yes" xml:space="preserve">
          <source>console.log(precisionRound(1234.5678, -1));
   // expected output: 1230</source>
          <target state="translated">console.log(precisionRound(1234.5678,-1));/salida esperada:1230</target>
        </trans-unit>
        <trans-unit id="d0fef98d2af7d1d1a6c13739c51a505822c3b782" translate="yes" xml:space="preserve">
          <source>console.log(precisionRound(1234.5678, 1));
   // expected output: 1234.6</source>
          <target state="translated">console.log(precisionRound(1234.5678,1));/salida esperada:1234.6</target>
        </trans-unit>
        <trans-unit id="057764ffca879ed98c1fe3d95161aa733b9b4ef2" translate="yes" xml:space="preserve">
          <source>decimal.js: bases 2-64; configuration options; NaN; Infinity; non-integer powers, exp, ln, log; precision specified in significant digits; precision always applied; random numbers.</source>
          <target state="translated">decimal.js:bases 2-64;opciones de configuración;NaN;Infinito;potencias no enteras,exp,ln,log;precisión especificada en dígitos significativos;precisión siempre aplicada;números aleatorios.</target>
        </trans-unit>
        <trans-unit id="da3f5b4eb74efe48286815d68ffd305b61e0751e" translate="yes" xml:space="preserve">
          <source>link to detailed comparisons</source>
          <target state="translated">enlace a comparaciones detalladas</target>
        </trans-unit>
        <trans-unit id="9cbee38ce3307e66953c2a713e6ab5747f3d951e" translate="yes" xml:space="preserve">
          <source>not elegant but does the job (removes trailing zeros)</source>
          <target state="translated">no es elegante,pero hace el trabajo (quita los ceros que quedan)</target>
        </trans-unit>
        <trans-unit id="4fcdee7cbb8d16776e4fba9f1cd17e31d1427924" translate="yes" xml:space="preserve">
          <source>to print out your number as a float with two decimal places.</source>
          <target state="translated">para imprimir tu número como un flotador con dos decimales.</target>
        </trans-unit>
        <trans-unit id="428fd5c08f7f539b3d5e5c5b24c3f54e50e227a7" translate="yes" xml:space="preserve">
          <source>while adding two  float value its never give the precise values so we need to fixed this to certain number that will help us to compare.</source>
          <target state="translated">mientras que la suma de dos valores de flotación nunca da los valores precisos,por lo que tenemos que fijarlo en un cierto número que nos ayude a comparar.</target>
        </trans-unit>
        <trans-unit id="e8f984f0c891a245d25e57c3d16b020e0d0d3e8d" translate="yes" xml:space="preserve">
          <source>you can define a custom compare function, like this :</source>
          <target state="translated">puedes definir una función de comparación personalizada,como esta:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
