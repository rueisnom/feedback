<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/14049480">
    <body>
      <group id="14049480">
        <trans-unit id="362bc9e9f2395367fb43cf442b2292ab7399efc1" translate="yes" xml:space="preserve">
          <source>(I colored one line gray just so that it is clear where it is going.)</source>
          <target state="translated">(我把一条线染成灰色,只是为了让它的去处更清晰)。</target>
        </trans-unit>
        <trans-unit id="9c2aca2ce080196d80035e8f58fd11cf1e5830a2" translate="yes" xml:space="preserve">
          <source>(If you really want to share data via controllers scope inheritance, there is nothing you need to do.  The child scope will have access to all of the parent scope properties.
See also &lt;a href=&quot;https://stackoverflow.com/questions/13825419/controller-load-order-differs-when-loading-or-navigating/13843771#13843771&quot;&gt;Controller load order differs when loading or navigating&lt;/a&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（如果您确实想通过Controller作用域继承共享数据，则无需执行任何操作。子作用域将有权访问所有父作用域属性。另请参见&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/13825419/controller-load-order-differs-when-loading-or-navigating/13843771#13843771&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;加载或导航时Controller的加载顺序有所不同&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6abdf5e252c173cf61f961b6ff4d944694989e8b" translate="yes" xml:space="preserve">
          <source>(Note that to save space, I show the &lt;code&gt;anArray&lt;/code&gt; object as a single blue object with its three values, rather than an single blue object with three separate gray literals.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（请注意，为了节省空间，我将&lt;/font&gt;&lt;/font&gt; &lt;code&gt;anArray&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;显示&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为具有三个值的单个蓝色对象，而不是显示具有三个单独的灰色文字的单个蓝色对象。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8941d57a8e655af45677490b9e8bcf3f00abc03d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;my-directive interpolated=&quot;{{parentProp1}}&quot; twowayBinding=&quot;parentProp2&quot;&amp;gt;&lt;/code&gt; and</source>
          <target state="translated">&lt;code&gt;&amp;lt;my-directive interpolated=&quot;{{parentProp1}}&quot; twowayBinding=&quot;parentProp2&quot;&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b352e34f8d41798496797eea2a8bb57e8ed408f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope: true&lt;/code&gt; - the directive creates a new child scope that prototypically inherits from the parent scope.  If more than one directive (on the same DOM element) requests a new scope, only one new child scope is created.  Since we have &quot;normal&quot; prototypal inheritance, this is like ng-include and ng-switch, so be wary of 2-way data binding to parent scope primitives, and child scope hiding/shadowing of parent scope properties.</source>
          <target state="translated">&lt;code&gt;scope: true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指令创建一个新的子范围，该子范围典型地从父范围继承。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果一个以上的指令（在同一DOM元素上）请求一个新范围，则仅创建一个新的子范围。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;由于我们具有&amp;ldquo;常规&amp;rdquo;原型继承，因此就像ng-include和ng-switch一样，因此请谨慎使用2路数据绑定到父作用域原语，以及子作用域隐藏/遮蔽父作用域属性。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="835213763afd5946d0090cecedf505f83435ec77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope: { ... }&lt;/code&gt; - the directive creates a new isolate/isolated scope.  It does not prototypically inherit.  This is usually your best choice when creating reusable components, since the directive cannot accidentally read or modify the parent scope.  However, such directives often need access to a few parent scope properties.  The object hash is used to set up two-way binding (using '=') or one-way binding (using '@') between the parent scope and the isolate scope.  There is also '&amp;amp;' to bind to parent scope expressions.  So, these all create local scope properties that are derived from the parent scope.
Note that attributes are used to help set up the binding -- you can't just reference parent scope property names in the object hash, you have to use an attribute.  E.g., this won't work if you want to bind to parent property &lt;code&gt;parentProp&lt;/code&gt; in the isolated scope: &lt;code&gt;&amp;lt;div my-directive&amp;gt;&lt;/code&gt; and &lt;code&gt;scope: { localProp: '@parentProp' }&lt;/code&gt;.  An attribute must be used to specify each parent property that the directive wants to bind to: &lt;code&gt;&amp;lt;div my-directive the-Parent-Prop=parentProp&amp;gt;&lt;/code&gt; and &lt;code&gt;scope: { localProp: '@theParentProp' }&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;scope: { ... }&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -指令创建一个新的隔离/隔离范围。它不是原型继承的。在创建可重用组件时，这通常是最佳选择，因为该指令不会意外读取或修改父作用域。但是，此类指令通常需要访问一些父范围属性。对象哈希用于在父作用域和隔离作用域之间建立双向绑定（使用'='）或单向绑定（使用'@'）。还有&amp;ldquo;＆&amp;rdquo;绑定到父作用域表达式。因此，所有这些都创建了从父范围派生的本地范围属性。请注意，属性用于帮助设置绑定-您不能仅在对象哈希中引用父作用域属性名称，而必须使用属性。例如，这不会如果您想绑定到父属性，则无法正常工作&lt;/font&gt;&lt;/font&gt; &lt;code&gt;parentProp&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在隔离范围：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;div my-directive&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;scope: { localProp: '@parentProp' }&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必须使用属性来指定指令要绑定到的每个父属性：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;div my-directive the-Parent-Prop=parentProp&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;scope: { localProp: '@theParentProp' }&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63c2b4504aad72d404557032a2480a14ed8d5ff5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transclude: true&lt;/code&gt; - the directive creates a new &quot;transcluded&quot; child scope, which prototypically inherits from the parent scope.  The transcluded and the isolated scope (if any) are siblings -- the $parent property of each scope references the same parent scope.  When a transcluded and an isolate scope both exist, isolate scope property $$nextSibling will reference the transcluded scope.  I'm not aware of any nuances with the transcluded scope.</source>
          <target state="translated">&lt;code&gt;transclude: true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;伪指令创建一个新的&amp;ldquo; transcluded&amp;rdquo;子作用域，该子作用域典型地从父作用域继承。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;超越范围和隔离范围（如果有的话）是兄弟姐妹-每个范围的$ parent属性引用相同的父范围。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当同时存在一个被隐蔽的范围和一个隔离范围时，隔离范围属性$$ nextSibling将引用被隐含的范围。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我不知道这个被包含在范围之外的细微差别。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bbff377660b20abffad7a6d418423be860f4fc17" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Check the results.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;检查结果。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0b15b86c1b80fabe2aabd774598b38aa8e612eb2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Also placed on the AngularJS wiki:&lt;/strong&gt;&lt;a href=&quot;https://github.com/angular/angular.js/wiki/Understanding-Scopes&quot;&gt;https://github.com/angular/angular.js/wiki/Understanding-Scopes&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;也放在AngularJS Wiki上：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;a href=&quot;https://github.com/angular/angular.js/wiki/Understanding-Scopes&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https &lt;/font&gt;&lt;/a&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;: &lt;/font&gt;&lt;/strong&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//github.com/angular/angular.js/wiki/Understanding-Scopes&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0449a09c1348a6a0f43c8e8b64a0a9bf4e617d86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;L-o-n-g answer&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;长答案&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1d556e0b5d60936a8ec25e7a4314e53c446c74b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Only property reads search the prototype chain, not writes.&lt;/strong&gt; So when you set</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;只有属性读取会搜索原型链，而不会写入。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;所以当你设定&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8cfea32fb3dfc1fc810909a8f8a65f811513413f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Quick answer&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;快速解答&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e06154976179776fe34c6a025af4919585fcf6bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;there's a subtle read going on within that write operation&lt;/strong&gt; that tries to look up myThing before writing to its prop. So that's why writing to object.properties from the child gets at the parent's objects.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在该写入操作&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中进行了&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一个微妙的读取，该写入&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;尝试在写入其道具之前查找myThing。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，这就是为什么从子级写入object.properties会到达父级的对象的原因。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="13c918f981c68e456ab5bc890ab4c0ec502977dc" translate="yes" xml:space="preserve">
          <source>A child scope normally prototypically inherits from its parent scope, but not always.  One exception to this rule is a directive with &lt;code&gt;scope: { ... }&lt;/code&gt; -- this creates an &quot;isolate&quot; scope that does not prototypically inherit.  This construct is often used when creating a &quot;reusable component&quot; directive.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;子作用域通常从其父作用域继承，但并非总是如此。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该规则的一个例外是带有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;scope: { ... }&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的指令&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：{...}&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -这会创建一个&amp;ldquo;隔离&amp;rdquo;范围，该范围不会被原型继承。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;创建&amp;ldquo;可重用组件&amp;rdquo;指令时，经常使用此构造。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fe358764520311848c1bc91fb5c17d29cb979406" translate="yes" xml:space="preserve">
          <source>A scope (prototypically) inherits properties from its parent scope.</source>
          <target state="translated">一个作用域(原型)从其父作用域继承属性。</target>
        </trans-unit>
        <trans-unit id="d1d8bffbf559d5536f6500ea0a1d093618886336" translate="yes" xml:space="preserve">
          <source>A scope &lt;em&gt;can&lt;/em&gt; inherit from a parent scope.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;范围&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从父范围继承。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ddc19a49f4aeae5b69a08fb93c799e9c9d7b697" translate="yes" xml:space="preserve">
          <source>Add method &quot;changeProps&quot; to a child prototype, which will rewrite &quot;primitive&quot; property value in Child object and change &quot;object.one&quot; value  both in Child and Parent objects</source>
          <target state="translated">在子原型中添加 &quot;changeProps &quot;方法,该方法将重写Child对象中的 &quot;primitive &quot;属性值,并改变Child和Parent对象中的 &quot;object.one &quot;值。</target>
        </trans-unit>
        <trans-unit id="d81280e6f9424c6ac30ad9caa6dffbfbd01910fa" translate="yes" xml:space="preserve">
          <source>Also, assume the directive does this in its linking function: &lt;code&gt;scope.someIsolateProp = &quot;I'm isolated&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;另外，假设该指令在其链接函数中执行此操作：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;scope.someIsolateProp = &quot;I'm isolated&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6a451079fcc06fda672c9171e72986125dacf31a" translate="yes" xml:space="preserve">
          <source>And in our HTML:</source>
          <target state="translated">而在我们的HTML中。</target>
        </trans-unit>
        <trans-unit id="a9a0f24354599619f9de8e6d6028a558064ab0cb" translate="yes" xml:space="preserve">
          <source>Angular Scope Inheritance</source>
          <target state="translated">Angular Scope 继承</target>
        </trans-unit>
        <trans-unit id="04edf7c89b9f81715bbe002e006477ad0ecd1ebf" translate="yes" xml:space="preserve">
          <source>As for the nuances, scope inheritance is normally straightfoward... until you need &lt;strong&gt;2-way data binding&lt;/strong&gt; (i.e., form elements, ng-model) in the child scope.  Ng-repeat, ng-switch, and ng-include can trip you up if you try to bind to a &lt;strong&gt;primitive&lt;/strong&gt; (e.g., number, string, boolean) in the parent scope from inside the child scope.  It doesn't work the way most people expect it should work.  The child scope gets its own property that hides/shadows the parent property of the same name.  Your workarounds are</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于细微差别，作用域继承通常是直截了当的&amp;hellip;&amp;hellip;直到您需要&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在子作用域中进行&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2路数据绑定&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（即表单元素，ng-model）。如果您尝试&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从子作用域内部&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;绑定到&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;父作用域中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;原语&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（例如，数字，字符串，布尔值），则&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ng-repeat，ng-switch和ng-include可能会使您绊倒&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。它不能像大多数人期望的那样工作。子作用域具有其自己的属性，该属性隐藏/阴影相同名称的父属性。您的解决方法是&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4ed249b8cae7519efef1d54e83355e59137f1469" translate="yes" xml:space="preserve">
          <source>Assign child prototype (Make child prototype inherit from parent prototype)</source>
          <target state="translated">分配子原型(让子原型继承父原型</target>
        </trans-unit>
        <trans-unit id="2996f5993b5b26bf797d1e78ed5e38759f07c7bb" translate="yes" xml:space="preserve">
          <source>Assign proper &quot;Child&quot; prototype constructor</source>
          <target state="translated">分配适当的 &quot;子 &quot;原型构造函数</target>
        </trans-unit>
        <trans-unit id="b5081c09c76c448c8f28cf7a987c299007621686" translate="yes" xml:space="preserve">
          <source>Call Child (son) changeProps method</source>
          <target state="translated">调用Child (儿子)changeProps方法</target>
        </trans-unit>
        <trans-unit id="8a364885c600d88f272a42d908f8846ef75358c2" translate="yes" xml:space="preserve">
          <source>Child primitive property changed (rewritten)</source>
          <target state="translated">子基元属性改变(重写)。</target>
        </trans-unit>
        <trans-unit id="1ffec34742859a8b858a2042f314ba6bb9712a26" translate="yes" xml:space="preserve">
          <source>Create &quot;Child&quot; object function</source>
          <target state="translated">创建 &quot;子 &quot;对象函数</target>
        </trans-unit>
        <trans-unit id="d05ba29982ee4adb0294fdfc09f8849d4dae68fb" translate="yes" xml:space="preserve">
          <source>Diagrams were generated with &lt;a href=&quot;/questions/tagged/graphviz&quot;&gt;graphviz&lt;/a&gt; &quot;*.dot&quot; files, which are on &lt;a href=&quot;https://github.com/mrajcok/angularjs-prototypal-inheritance-diagrams&quot;&gt;github&lt;/a&gt;. Tim Caswell's &quot;&lt;a href=&quot;http://howtonode.org/object-graphs&quot;&gt;Learning JavaScript with Object Graphs&lt;/a&gt;&quot; was the inspiration for using GraphViz for the diagrams.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;图表是用&lt;/font&gt;&lt;a href=&quot;https://github.com/mrajcok/angularjs-prototypal-inheritance-diagrams&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;github&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上的&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;/questions/tagged/graphviz&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;graphviz&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;ldquo; * .dot&amp;rdquo;文件&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;生成的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;蒂姆&amp;middot;卡斯韦尔（T​​im Caswell）的&amp;ldquo; &lt;/font&gt;&lt;a href=&quot;http://howtonode.org/object-graphs&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;用对象图学习JavaScript&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;rdquo;是为图表使用GraphViz的灵感。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="224f881f49f35e408bbcfa7028d153590b37fec0" translate="yes" xml:space="preserve">
          <source>Each ng-include generates a new child scope, which prototypically inherits from the parent scope.</source>
          <target state="translated">每一个ng-include都会生成一个新的子作用域,这个子作用域原型上继承自父作用域。</target>
        </trans-unit>
        <trans-unit id="f0f83f9d583818dd44d3f9d04d8204b2b0d352a8" translate="yes" xml:space="preserve">
          <source>First we create &quot;Parent&quot; object function</source>
          <target state="translated">首先我们创建 &quot;父 &quot;对象函数</target>
        </trans-unit>
        <trans-unit id="76003c9c8e1d358158e7998b80eba506f2cddf5c" translate="yes" xml:space="preserve">
          <source>For all scopes (prototypal or not), Angular always tracks a parent-child relationship (i.e., a hierarchy), via properties $parent and $$childHead and $$childTail.</source>
          <target state="translated">对于所有的作用域(无论是否是原型的),Angular总是通过属性$parent和$$childHead和$childTail来跟踪一个父子关系(即层次结构)。</target>
        </trans-unit>
        <trans-unit id="d68a226c6237d24500cc2414bd86f74041060caa" translate="yes" xml:space="preserve">
          <source>For all scopes (prototypal or not), Angular always tracks a parent-child relationship (i.e., a hierarchy), via scope properties $parent, $$childHead and $$childTail.  I normally don't show these scope properties in the diagrams.</source>
          <target state="translated">对于所有的作用域(无论是否是原型的),Angular总是通过作用域属性$parent、$$childHead和$childTail来跟踪一个父子关系(即层次结构)。我通常不会在图中显示这些作用域属性。</target>
        </trans-unit>
        <trans-unit id="b883a122a0ff99a0160d4dd55f990d7e4e400f28" translate="yes" xml:space="preserve">
          <source>For each item/iteration, ng-repeat creates a new scope, which prototypically inherits from the parent scope, &lt;strong&gt;but it also assigns the item's value to a new property on the new child scope&lt;/strong&gt;.  (The name of the new property is the loop variable's name.)  Here's what the Angular source code for ng-repeat actually is:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于每个项目/迭代，ng-repeat都会创建一个新的范围，该范围通常是从父范围继承的，&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但也会将该项目的值分配给新的子范围上的新属性&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（新属性的名称是循环变量的名称。）以下是ng-repeat的Angular源代码：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d22a4e3b74d54cfd3eda148ac16ef352c95fcccd" translate="yes" xml:space="preserve">
          <source>For more information on isolate scopes see &lt;a href=&quot;http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/&quot;&gt;http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有关隔离范围的更多信息，请参见&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5f28c07f801f81133a48ea659f76557041efbb55" translate="yes" xml:space="preserve">
          <source>For scenarios where form elements are not involved, another solution is to define a function on the parent scope to modify the primitive.  Then ensure the child always calls this function, which will be available to the child scope due to prototypal inheritance. E.g.,</source>
          <target state="translated">对于不涉及表单元素的场景,另一个解决方案是在父作用域上定义一个函数来修改基元。然后确保子作用域总是调用这个函数,由于原型继承,子作用域将可以使用这个函数。例如:。</target>
        </trans-unit>
        <trans-unit id="39de2c52b338823dcf28717c0da794fd864f6e31" translate="yes" xml:space="preserve">
          <source>For the picture below we have</source>
          <target state="translated">对于下面的图片,我们有</target>
        </trans-unit>
        <trans-unit id="25a4a3b828e0fdd290235d69c7a56465278b9b20" translate="yes" xml:space="preserve">
          <source>For the picture below, assume the same directive as above with this addition: &lt;code&gt;transclude: true&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于下面的图片，假定与上面相同的指令，并带有以下附加内容：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;transclude: true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a17ac04579a8099173830d945d577b08efd0e95c" translate="yes" xml:space="preserve">
          <source>Having a '.' in your models will ensure that prototypal inheritance is in play. So, use</source>
          <target state="translated">在你的模型中使用'.'将确保原型继承的作用。所以,使用</target>
        </trans-unit>
        <trans-unit id="cf13bf79e05888c8ce47a05548ac7b8463808a88" translate="yes" xml:space="preserve">
          <source>Here is a &lt;a href=&quot;http://jsfiddle.net/mrajcok/jNxyE/&quot;&gt;sample fiddle&lt;/a&gt; that uses this &quot;parent function&quot; approach.  (The fiddle was written as part of this answer: &lt;a href=&quot;https://stackoverflow.com/a/14104318/215945&quot;&gt;https://stackoverflow.com/a/14104318/215945&lt;/a&gt;.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是一个&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用这种&amp;ldquo;父函数&amp;rdquo;方法的&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://jsfiddle.net/mrajcok/jNxyE/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;小提琴示例&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（小提琴是作为该答案的一部分编写的：&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/14104318/215945&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//stackoverflow.com/a/14104318/215945&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="78d9d8c7814ea8c0bc54dc3db2d80fadc8541048" translate="yes" xml:space="preserve">
          <source>I in no way want to compete with Mark's answer, but just wanted to highlight the piece that finally made everything click as someone new to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;Javascript inheritance and its prototype chain&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我绝不想与Mark的答案抗衡，而只是想强调一下这件作品，最终成为&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Java继承及其原型链的&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新手，使一切都点击&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;了&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="343a19234efc27bcc15d07110b0015da8503ed16" translate="yes" xml:space="preserve">
          <source>I would like to add an example of prototypical inheritance with javascript to @Scott Driscoll answer. We'll be using classical inheritance pattern with Object.create() which is a part of  EcmaScript 5 specification.</source>
          <target state="translated">我想在@Scott Driscoll的回答中加入一个用javascript的原型继承的例子。我们将使用Object.create()的经典继承模式,这是EcmaScript 5规范的一部分。</target>
        </trans-unit>
        <trans-unit id="802781ec18af22b8b318435ab4f3e32318e26ccc" translate="yes" xml:space="preserve">
          <source>If item is a primitive (as in myArrayOfPrimitives), essentially a copy of the value is assigned to the new child scope property.  Changing the child scope property's value (i.e., using ng-model, hence child scope &lt;code&gt;num&lt;/code&gt;) does &lt;strong&gt;not&lt;/strong&gt; change the array the parent scope references.  So in the first ng-repeat above, each child scope gets a &lt;code&gt;num&lt;/code&gt; property that is independent of the myArrayOfPrimitives array:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果item是基元（例如，在myArrayOfPrimitives中），则实质上将值的副本分配给新的子作用域属性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更改子作用域属性的值（即使用NG-模型，因此子范围&lt;/font&gt;&lt;/font&gt; &lt;code&gt;num&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）并&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不会&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;改变阵列父范围引用。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，在上面的第一个ng-repeat中，每个子范围都获得一个&lt;/font&gt;&lt;/font&gt; &lt;code&gt;num&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性，该属性独立于myArrayOfPrimitives数组：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4866d5c72997fb88595861f951b716f4b48a2c00" translate="yes" xml:space="preserve">
          <source>If we read childScope.propertyX, and childScope has propertyX, then the prototype chain is not consulted.</source>
          <target state="translated">如果我们读了childScope.propertyX,而childScope有propertyX,那么原型链就不会被查阅。</target>
        </trans-unit>
        <trans-unit id="557b0df6a8ad1c719a17070ca1480aff70f73067" translate="yes" xml:space="preserve">
          <source>If we set childScope.propertyX, the prototype chain is not consulted.</source>
          <target state="translated">如果我们设置了childScope.propertyX,那么原型链就不会被查询。</target>
        </trans-unit>
        <trans-unit id="d680be6d3dd2682e10431ab13158d61b069cf24d" translate="yes" xml:space="preserve">
          <source>If we try to access a property defined on the parentScope from the child scope, JavaScript will first look in the child scope, not find the property, then look in the inherited scope, and find the property.  (If it didn't find the property in the parentScope, it would continue up the prototype chain... all the way up to the root scope). So, these are all true:</source>
          <target state="translated">如果我们试图从子作用域中访问一个定义在parentScope上的属性,JavaScript将首先在子作用域中查找,没有找到该属性,然后在继承的作用域中查找,并找到该属性。如果它没有在parentScope中找到属性,它就会继续在prototype链上寻找...........一直到根作用域)。所以,这些都是真的。</target>
        </trans-unit>
        <trans-unit id="4aa54311fd9a9a8128dded66c00d21f4fcfb64e3" translate="yes" xml:space="preserve">
          <source>Initiate Parent (dad) and Child (son) objects.</source>
          <target state="translated">启动父母(父亲)和孩子(儿子)的对象。</target>
        </trans-unit>
        <trans-unit id="19e47d935ce82b089f07b281873a3517222fa41b" translate="yes" xml:space="preserve">
          <source>Isolate scope's &lt;code&gt;__proto__&lt;/code&gt; references Object.
Isolate scope's $parent references the parent scope, so although it is isolated and doesn't inherit prototypically from the parent scope, it is still a child scope.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;隔离范围的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;引用对象。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;隔离作用域的$ parent引用父作用域，因此，尽管它是隔离的并且不从父作用域原型继承，但它仍然是子作用域。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a1cb23b18b0ca50c3a0a704b077fee50b3d6f174" translate="yes" xml:space="preserve">
          <source>It doesn't look up the chain, but when you set</source>
          <target state="translated">它不看链子,但当你设置了</target>
        </trans-unit>
        <trans-unit id="b0be3f5d2d9159cde42e618e5abe2a242f9b35b2" translate="yes" xml:space="preserve">
          <source>It is important to first have a solid understanding of prototypal inheritance, especially if you are coming from a server-side background and you are more familiar with class-ical inheritance.  So let's review that first.</source>
          <target state="translated">首先要对原型继承有一个扎实的了解,尤其是当你是服务器端背景的人,对类继承比较熟悉的时候,首先要对原型继承有一个扎实的了解。所以,我们先来复习一下。</target>
        </trans-unit>
        <trans-unit id="1851c59bc3075bb17267a2a94b26d1a8cbcc1f23" translate="yes" xml:space="preserve">
          <source>JavaScript Prototypal Inheritance</source>
          <target state="translated">JavaScript原型继承</target>
        </trans-unit>
        <trans-unit id="81e79922be316c42d992eacbd258ccdc9e61e020" translate="yes" xml:space="preserve">
          <source>More info on Object.create here &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create&quot;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有关Object.create的更多信息，请参见&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="17b26fc30b1512c9e24a72c572b1f77391a20540" translate="yes" xml:space="preserve">
          <source>Nesting controllers using ng-controller results in normal prototypal inheritance, just like ng-include and ng-switch, so the same techniques apply.
However, &quot;it is considered bad form for two controllers to share information via $scope inheritance&quot; -- &lt;a href=&quot;http://onehungrymind.com/angularjs-sticky-notes-pt-1-architecture/&quot;&gt;http://onehungrymind.com/angularjs-sticky-notes-pt-1-architecture/&lt;/a&gt;
A service should be used to share data between controllers instead.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用ng-controller嵌套控制器会导致正常的原型继承，就像ng-include和ng-switch一样，因此适用相同的技术。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，&amp;ldquo;两个控制器通过$ scope继承共享信息被认为是错误的形式&amp;rdquo; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://onehungrymind.com/angularjs-sticky-notes-pt-1-architecture/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-http://onehungrymind.com/angularjs-sticky-notes-pt-1-architecture/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 应该使用服务在两个之间共享数据控制器代替。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bdfea434bdc407230ae5f60034419d37fb129edd" translate="yes" xml:space="preserve">
          <source>New AngularJS developers often do not realize that &lt;code&gt;ng-repeat&lt;/code&gt;, &lt;code&gt;ng-switch&lt;/code&gt;, &lt;code&gt;ng-view&lt;/code&gt;, &lt;code&gt;ng-include&lt;/code&gt; and &lt;code&gt;ng-if&lt;/code&gt; all create new child scopes, so the problem often shows up when these directives are involved. (See &lt;a href=&quot;http://plnkr.co/edit/zZfUQN?p=preview&quot;&gt;this example&lt;/a&gt; for a quick illustration of the problem.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新的AngularJS开发人员通常不会意识到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-repeat&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-switch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-view&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-include&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;都会创建新的子范围，因此当涉及这些指令时，常常会出现问题。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（有关&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://plnkr.co/edit/zZfUQN?p=preview&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;此&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;问题的快速说明，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请参&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;见此示例。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3c51eaa7a8ebfbc7717269ec1e43a6a1a4e5edd9" translate="yes" xml:space="preserve">
          <source>Ng-repeat works a little differently.  Suppose we have in our controller:</source>
          <target state="translated">Ng-repeat的工作方式有点不同。假设我们的控制器里有</target>
        </trans-unit>
        <trans-unit id="c7ee5ad42887cfc364ac2ae6c87e55321fd13ccc" translate="yes" xml:space="preserve">
          <source>Note, by default, directives do not create new scope -- i.e., the default is &lt;code&gt;scope: false&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注意，默认情况下，伪指令不会创建新的作用域-即，默认值为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;scope: false&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c221036d1055470cf610288db1253caab6ef6104" translate="yes" xml:space="preserve">
          <source>One last scenario:</source>
          <target state="translated">最后一种情况。</target>
        </trans-unit>
        <trans-unit id="e0f4a686f88d43bf71f098468123a0d1b2480522" translate="yes" xml:space="preserve">
          <source>Parent and Child object.one properties changed</source>
          <target state="translated">父子对象和子对象.1属性改变</target>
        </trans-unit>
        <trans-unit id="f1755d0d23e3e1b31d2d35a7c30e78c25e37675e" translate="yes" xml:space="preserve">
          <source>Parent primitive property did not change</source>
          <target state="translated">母基元属性没有变化</target>
        </trans-unit>
        <trans-unit id="33e340f444883767e95f1138224ae3c363df1354" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://stackoverflow.com/a/13782671/215945&quot;&gt;https://stackoverflow.com/a/13782671/215945&lt;/a&gt; and &lt;a href=&quot;https://github.com/angular/angular.js/issues/1267&quot;&gt;https://github.com/angular/angular.js/issues/1267&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;另请参阅&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/13782671/215945&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://stackoverflow.com/a/13782671/215945&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/angular/angular.js/issues/1267&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://github.com/angular/angular.js/issues/1267&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fec6ce6579046ec5e7f88479a74428b8d21a89a9" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://stackoverflow.com/questions/12405005/angularjs-bind-scope-of-a-switch-case/12414410&quot;&gt;AngularJS, bind scope of a switch-case?&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;另请参阅&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/12405005/angularjs-bind-scope-of-a-switch-case/12414410&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AngularJS，绑定开关盒的范围？&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e719ff46b30c8a375d9fec4a2f353bfcc4f0efc2" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://stackoverflow.com/questions/13714884/difficulty-with-ng-model-ng-repeat-and-inputs&quot;&gt;Difficulty with ng-model, ng-repeat, and inputs&lt;/a&gt; and 
&lt;a href=&quot;https://stackoverflow.com/a/13782671/215945&quot;&gt;https://stackoverflow.com/a/13782671/215945&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;另请参见&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/13714884/difficulty-with-ng-model-ng-repeat-and-inputs&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ng-model，ng-repeat和输入的难度&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以及 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/13782671/215945&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://stackoverflow.com/a/13782671/215945&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9a4b9917ddd787e8d62b82f045df5b9f2c17092e" translate="yes" xml:space="preserve">
          <source>So, does a child scope always prototypically inherit from its parent scope? Are there exceptions? When it does inherit, is it always normal JavaScript prototypal inheritance?</source>
          <target state="translated">那么,子作用域是否总是从其父作用域继承原型?是否有例外?当它继承时,是否总是正常的JavaScript原型继承?</target>
        </trans-unit>
        <trans-unit id="9e6369804c78f7f810d1a2f16ee7cb0a8e521992" translate="yes" xml:space="preserve">
          <source>So, if item is an object, a reference to the original object (not a copy) is assigned to the new child scope property.  Changing the child scope property's value (i.e., using ng-model, hence &lt;code&gt;obj.num&lt;/code&gt;) &lt;strong&gt;does&lt;/strong&gt; change the object the parent scope references.  So in the second ng-repeat above, we have:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，如果item是对象，则将对原始对象（不是副本）的引用分配给新的子范围属性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更改子范围属性的值（即使用ng-model，因此使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;obj.num&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;确实会&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更改父范围引用的对象。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，在上面的第二个ng-repeat中，我们有：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="cc4d3539063b02aa54ad5dda83c79896a3067f88" translate="yes" xml:space="preserve">
          <source>Suppose parentScope has properties aString, aNumber, anArray, anObject, and aFunction.  If childScope prototypically inherits from parentScope, we have:</source>
          <target state="translated">假设parentScope有属性aString、aNumber、anArray、anObject和aFunction。如果childScope原型继承于parentScope,那么我们就有:</target>
        </trans-unit>
        <trans-unit id="e425db46930aa754cb8074fc1c831cb164b51bd2" translate="yes" xml:space="preserve">
          <source>Suppose we have in our controller:</source>
          <target state="translated">假设我们的控制器里有:</target>
        </trans-unit>
        <trans-unit id="a1633172dfdf4a530f7d467aceec66485f144710" translate="yes" xml:space="preserve">
          <source>Suppose we then do this:</source>
          <target state="translated">假设我们再这样做。</target>
        </trans-unit>
        <trans-unit id="bba48911b62c99d44cbc4f4088dedb4a1a4ee050" translate="yes" xml:space="preserve">
          <source>Takeaways:</source>
          <target state="translated">Takeaways:</target>
        </trans-unit>
        <trans-unit id="2cb274acb022d6adbcd46abc2c49043f6a50a791" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://docs.angularjs.org/api/ng.$rootScope.Scope&quot;&gt;API Reference Scope page&lt;/a&gt; says:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;ldquo; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.angularjs.org/api/ng.$rootScope.Scope&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;API参考范围&amp;rdquo;页面显示&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6ece9a032e06e6d7a13d6f923e60f3c3759a8bf2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://docs.angularjs.org/guide/scope&quot;&gt;Developer Guide Scope page&lt;/a&gt; says:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.angularjs.org/guide/scope&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;开发者指南范围页&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;说：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1effa6eab1a807614c56859066cc710880afa491" translate="yes" xml:space="preserve">
          <source>The contenders:</source>
          <target state="translated">竞争者。</target>
        </trans-unit>
        <trans-unit id="5a245f54b8cc6be3fdde1e33a7363c01930e01fe" translate="yes" xml:space="preserve">
          <source>The following create new scopes, and inherit prototypically: ng-repeat, ng-include, ng-switch, ng-controller, directive with &lt;code&gt;scope: true&lt;/code&gt;, directive with &lt;code&gt;transclude: true&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下内容将创建新的作用域并进行原型继承：ng-repeat，ng-include，ng-switch，ng-controller，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;scope: true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指令，带&lt;/font&gt;&lt;/font&gt; &lt;code&gt;transclude: true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指令&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：true&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a8cbb9552e324fab0129a77cc1ae823eb0817c84" translate="yes" xml:space="preserve">
          <source>The following creates a new scope which does not inherit prototypically: directive with &lt;code&gt;scope: { ... }&lt;/code&gt;.  This creates an &quot;isolate&quot; scope instead.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下内容创建了一个新的作用域，该作用域不原型继承：具有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;scope: { ... }&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指令&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而是创建一个&amp;ldquo;隔离&amp;rdquo;范围。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e3193a8d2f9764731db9796b762232331fe4c06e" translate="yes" xml:space="preserve">
          <source>The prototype chain is consulted because the objects (anArray and anObject) are not found in the childScope.  The objects are found in the parentScope, and the property values are updated on the original objects.  No new properties are added to the childScope;  no new objects are created.  (Note that in JavaScript arrays and functions are also objects.)</source>
          <target state="translated">因为在子Scope中没有找到对象(anArray和anObject),所以查询原型链。在父Scope中找到对象,并在原始对象上更新属性值。没有新的属性被添加到子Scope中;没有创建新的对象。(注意,在JavaScript中数组和函数也是对象)。</target>
        </trans-unit>
        <trans-unit id="ddc297ce30d1c5e731cb81f6c86632fa1dfaa612" translate="yes" xml:space="preserve">
          <source>The prototype chain is not consulted, and a new aString property is added to the childScope.  &lt;strong&gt;This new property hides/shadows the parentScope property with the same name.&lt;/strong&gt;  This will become very important when we discuss ng-repeat and ng-include below.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;未查询原型链，并且将新的aString属性添加到childScope。 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;此新属性将隐藏/阴影具有相同名称的parentScope属性。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 当我们在下面讨论ng-repeat和ng-include时，这将变得非常重要。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="942d42a24d1cc10fb1ea338258bb011bcb714618" translate="yes" xml:space="preserve">
          <source>The prototype chain is not consulted, and child scope gets two new object properties that hide/shadow the parentScope object properties with the same names.</source>
          <target state="translated">原型链不被查询,子作用域获得两个新的对象属性,这些属性隐藏了父Scope对象属性的相同名称。</target>
        </trans-unit>
        <trans-unit id="5872b3ca634f4e1f14cb4befbf0b13a06e096db5" translate="yes" xml:space="preserve">
          <source>Then add a prototype to &quot;Parent&quot; object function</source>
          <target state="translated">然后在 &quot;Parent &quot;对象中添加一个原型函数。</target>
        </trans-unit>
        <trans-unit id="35f7fbf3fa1d3a4b9cdfa29fa721275206b27d50" translate="yes" xml:space="preserve">
          <source>There are four types of scopes:</source>
          <target state="translated">瞄准镜有四种类型。</target>
        </trans-unit>
        <trans-unit id="58fda558452d6dbbc530387b7a71b1f7218fc6f2" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;http://jsfiddle.net/mrajcok/7g3QM/&quot;&gt;fiddle&lt;/a&gt; has a &lt;code&gt;showScope()&lt;/code&gt; function that can be used to examine an isolate and transcluded scope.  See the instructions in the comments in the fiddle.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://jsfiddle.net/mrajcok/7g3QM/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;小提琴&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;具有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;showScope()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数，可用于检查隔离的和被&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;超越的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;范围。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请参阅小提琴中注释中的说明。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4b6a5000175f5778b88f085776bf0da1c77aa040" translate="yes" xml:space="preserve">
          <source>This issue with primitives can be easily avoided by following the &quot;best practice&quot; of &lt;a href=&quot;http://www.youtube.com/watch?v=ZhfUv0spHCY&amp;amp;feature=youtu.be&amp;amp;t=30m&quot;&gt;always have a '.' in your ng-models&lt;/a&gt; &amp;ndash; watch 3 minutes worth. Misko demonstrates the primitive binding issue with &lt;code&gt;ng-switch&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通过遵循&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=ZhfUv0spHCY&amp;amp;feature=youtu.be&amp;amp;t=30m&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;始终具有&amp;ldquo;'&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;rdquo;的&amp;ldquo;最佳实践&amp;rdquo;，可以很容易避免原语的此问题&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在您的ng模型中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;ndash;观看3分钟值得。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Misko演示了&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-switch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的原始绑定问题&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4c0202c6ca940503ffce3f2fa915f6ef7f7755ae" translate="yes" xml:space="preserve">
          <source>This ng-repeat will not work (like you want/expect it to).  Typing into the textboxes changes the values in the gray boxes, which are only visible in the child scopes.  What we want is for the inputs to affect the myArrayOfPrimitives array, not a child scope primitive property.  To accomplish this, we need to change the model to be an array of objects.</source>
          <target state="translated">这个ng-repeat将无法工作(就像你希望的那样)。在文本框中输入会改变灰色框中的值,而这些值只在子作用域中可见。我们想要的是让输入影响到myArrayOfPrimitives数组,而不是子作用域的基元属性。为了实现这个目标,我们需要将模型改成一个对象数组。</target>
        </trans-unit>
        <trans-unit id="b1a9027cd710b57f1f8bc341338c25f8f6fcef46" translate="yes" xml:space="preserve">
          <source>This works as expected.  Typing into the textboxes changes the values in the gray boxes, which are visible to both the child and parent scopes.</source>
          <target state="translated">这与预期中的效果一样。在文本框中输入文本框会改变灰色框中的值,而这些值对子域和父域都是可见的。</target>
        </trans-unit>
        <trans-unit id="2735a892bde0fac77b60fc1ad9ecb60ccdef800d" translate="yes" xml:space="preserve">
          <source>Typing (say, &quot;22&quot;) into this input textbox does not result in a new child property.  The model is now bound to a property of the parent scope (because $parent is a child scope property that references the parent scope).</source>
          <target state="translated">在这个输入文本框中输入(例如,&quot;22&quot;)不会产生一个新的子属性。模型现在被绑定到父作用域的一个属性上(因为$parent是子作用域属性,引用了父作用域)。</target>
        </trans-unit>
        <trans-unit id="47d0d3a86ac79a9f76da91b2fd9f3a8aedb85fae" translate="yes" xml:space="preserve">
          <source>Typing (say, &quot;77&quot;) into the first input textbox causes the child scope to get a new &lt;code&gt;myPrimitive&lt;/code&gt; scope property that hides/shadows the parent scope property of the same name.  This is probably not what you want/expect.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在第一个输入文本框中键入（例如&amp;ldquo; 77&amp;rdquo;）会使子范围获得一个新的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;myPrimitive&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;范围属性，该属性将隐藏/阴影相同名称的父范围属性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这可能不是您想要/期望的。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3ad716f56bb492e391fbe53da39e07eb8b12282" translate="yes" xml:space="preserve">
          <source>Typing (say, &quot;99&quot;) into the second input textbox does not result in a new child property.  Because tpl2.html binds the model to an object property, prototypal inheritance kicks in when the ngModel looks for object myObject -- it finds it in the parent scope.</source>
          <target state="translated">在第二个输入文本框中输入(比如说 &quot;99&quot;)不会产生一个新的子属性。因为 tpl2.html 将模型与对象属性绑定,所以当 ngModel 寻找对象 myObject 时,原型继承就会启动 ----它在父域中找到它。</target>
        </trans-unit>
        <trans-unit id="ab8ed7a4dd8872f800f71c44f823cffbdd129693" translate="yes" xml:space="preserve">
          <source>We can rewrite the first template to use $parent, if we don't want to change our model from a primitive to an object:</source>
          <target state="translated">如果我们不想把模型从基元变成对象,我们可以重写第一个模板,使用$parent。</target>
        </trans-unit>
        <trans-unit id="7625c1d4a0c7673afd934025f8f220fcfab5353d" translate="yes" xml:space="preserve">
          <source>We deleted the childScope property first, then when we try to access the property again, the prototype chain is consulted.</source>
          <target state="translated">我们先删除了childScope属性,然后当我们再次尝试访问该属性时,就会查询到原型链。</target>
        </trans-unit>
        <trans-unit id="2bc2e06693640b04d006a3e5bfec8b61c441b22a" translate="yes" xml:space="preserve">
          <source>What are the nuances of scope prototypal / prototypical inheritance in AngularJS</source>
          <target state="translated">在AngularJS中,范围原型继承的细微差别是什么?</target>
        </trans-unit>
        <trans-unit id="1c8fa7a6cb664f88272907fcc27cd0145f211d78" translate="yes" xml:space="preserve">
          <source>Working example here &lt;a href=&quot;http://jsbin.com/xexurukiso/1/edit/&quot;&gt;http://jsbin.com/xexurukiso/1/edit/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这里的工作示例&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://jsbin.com/xexurukiso/1/edit/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://jsbin.com/xexurukiso/1/edit/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5d0dec12c98280606d2778a4bcb1abfb0e7f8d0c" translate="yes" xml:space="preserve">
          <source>default (&lt;code&gt;scope: false&lt;/code&gt;) - the directive does not create a new scope, so there is no inheritance here.  This is easy, but also dangerous because, e.g., a directive might think it is creating a new property on the scope, when in fact it is clobbering an existing property.  This is not a good choice for writing directives that are intended as reusable components.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;default（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;scope: false&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）-指令不会创建新的作用域，因此此处没有继承。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这很容易，但也很危险，因为，例如，一条指令可能认为它正在作用域上创建新属性，而实际上却在破坏现有属性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于编写旨在用作可重用组件的指令，这不是一个好的选择。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba1842f28a57fe23a90d2efec05d224744c39651" translate="yes" xml:space="preserve">
          <source>define a function on the parent scope, and call it from the child (not always possible)</source>
          <target state="translated">在父作用域中定义一个函数,并从子作用域中调用(不一定能做到)。</target>
        </trans-unit>
        <trans-unit id="27ea3d35983ed18a7ab56325d8423ae0f39bbc5b" translate="yes" xml:space="preserve">
          <source>define objects in the parent for your model, then reference a property of that object  in the child:  parentObj.someProp</source>
          <target state="translated">为你的模型定义父对象,然后在子对象中引用该对象的属性:parentObj.someProp</target>
        </trans-unit>
        <trans-unit id="5b41ba2601e37104d54d7666ca68c4f5e11a1c4c" translate="yes" xml:space="preserve">
          <source>directives</source>
          <target state="translated">directives</target>
        </trans-unit>
        <trans-unit id="f4549b6f57b926059ceb24f113afc3e54afffa58" translate="yes" xml:space="preserve">
          <source>isolate scope -- directive with &lt;code&gt;scope: {...}&lt;/code&gt;.  This one is not prototypal, but '=', '@', and '&amp;amp;' provide a mechanism to access parent scope properties, via attributes.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;隔离范围- &lt;/font&gt;&lt;/font&gt; &lt;code&gt;scope: {...}&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指令&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这不是原型，但是'='，'@'和'＆'提供了一种通过属性访问父范围属性的机制。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c942ad93a5be36ba73a8752c3c44b6797b79ac69" translate="yes" xml:space="preserve">
          <source>ng-controller</source>
          <target state="translated">ng-controller</target>
        </trans-unit>
        <trans-unit id="19a68c5679f612b19da24843d5d39d5c934d28f4" translate="yes" xml:space="preserve">
          <source>ng-include</source>
          <target state="translated">ng-include</target>
        </trans-unit>
        <trans-unit id="0e45397994cf73af09c27e90f79ceb5606ed2a7d" translate="yes" xml:space="preserve">
          <source>ng-repeat</source>
          <target state="translated">ng-repeat</target>
        </trans-unit>
        <trans-unit id="18b8f4fb887d618b0516df6042f780fb3da97f38" translate="yes" xml:space="preserve">
          <source>ng-switch</source>
          <target state="translated">ng-switch</target>
        </trans-unit>
        <trans-unit id="4e8683d937e4339a8c800fa795e3f1be28867631" translate="yes" xml:space="preserve">
          <source>ng-switch scope inheritance works just like ng-include.  So if you need 2-way data binding to a primitive in the parent scope, use $parent, or change the model to be an object and then bind to a property of that object.  This will avoid child scope hiding/shadowing of parent scope properties.</source>
          <target state="translated">ng-switch作用域继承的工作原理和ng-include一样。所以如果你需要对父作用域中的基元进行双向数据绑定,可以使用$parent,或者将模型改为对象,然后绑定到该对象的属性。这样可以避免子作用域隐藏父作用域属性的阴影。</target>
        </trans-unit>
        <trans-unit id="0ab5ad0e9b0dd449ed7192dc1a78c8e697023091" translate="yes" xml:space="preserve">
          <source>normal prototypal scope inheritance -- ng-include, ng-switch, ng-controller, directive with &lt;code&gt;scope: true&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;正常的原型作用域继承-ng-include，ng-switch，ng-controller，&lt;/font&gt; &lt;code&gt;scope: true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;指令&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2ddefe75ff60bb0b45a230e1492152cbebae9d6e" translate="yes" xml:space="preserve">
          <source>normal prototypal scope inheritance with a copy/assignment -- ng-repeat.  Each iteration of ng-repeat creates a new child scope, and that new child scope always gets a new property.</source>
          <target state="translated">正常的原型作用域继承与复制分配 ----ng-repeat。ng-repeat的每一次迭代都会创建一个新的子作用域,而这个新的子作用域总是得到一个新的属性。</target>
        </trans-unit>
        <trans-unit id="135c88242dc85baeb3e79543a0c7a8e5a6803c4e" translate="yes" xml:space="preserve">
          <source>transcluded scope -- directive with &lt;code&gt;transclude: true&lt;/code&gt;.  This one is also normal prototypal scope inheritance, but it is also a sibling of any isolate scope.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;transcluded scope-带有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;transclude: true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指令&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这也是正常的原型作用域继承，但它也是任何孤立作用域的同级对象。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="995ad0b731059826a9125c627e28cc9351e5bcf3" translate="yes" xml:space="preserve">
          <source>use $parent.parentScopeProperty (not always possible, but easier than 1. where possible)</source>
          <target state="translated">使用$parent.parent.parent.parentScopeProperty(不一定能做到,但在可能的情况下,比1.更容易。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
