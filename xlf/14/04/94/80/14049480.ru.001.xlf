<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/14049480">
    <body>
      <group id="14049480">
        <trans-unit id="362bc9e9f2395367fb43cf442b2292ab7399efc1" translate="yes" xml:space="preserve">
          <source>(I colored one line gray just so that it is clear where it is going.)</source>
          <target state="translated">(Я окрасил одну строчку в серый цвет,чтобы было понятно,куда она идет.)</target>
        </trans-unit>
        <trans-unit id="9c2aca2ce080196d80035e8f58fd11cf1e5830a2" translate="yes" xml:space="preserve">
          <source>(If you really want to share data via controllers scope inheritance, there is nothing you need to do.  The child scope will have access to all of the parent scope properties.
See also &lt;a href=&quot;https://stackoverflow.com/questions/13825419/controller-load-order-differs-when-loading-or-navigating/13843771#13843771&quot;&gt;Controller load order differs when loading or navigating&lt;/a&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Если вы действительно хотите поделиться данными через наследование области контроллеров, вам ничего не нужно делать. Дочерняя область будет иметь доступ ко всем свойствам родительской области. См. Также &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/13825419/controller-load-order-differs-when-loading-or-navigating/13843771#13843771&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Порядок загрузки контроллера отличается при загрузке или навигации&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6abdf5e252c173cf61f961b6ff4d944694989e8b" translate="yes" xml:space="preserve">
          <source>(Note that to save space, I show the &lt;code&gt;anArray&lt;/code&gt; object as a single blue object with its three values, rather than an single blue object with three separate gray literals.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Обратите внимание, что для экономии места я показываю &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;объект &lt;/font&gt;&lt;/font&gt; &lt;code&gt;anArray&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; как один синий объект с его тремя значениями, а не как один синий объект с тремя отдельными серыми литералами.)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8941d57a8e655af45677490b9e8bcf3f00abc03d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;my-directive interpolated=&quot;{{parentProp1}}&quot; twowayBinding=&quot;parentProp2&quot;&amp;gt;&lt;/code&gt; and</source>
          <target state="translated">&lt;code&gt;&amp;lt;my-directive interpolated=&quot;{{parentProp1}}&quot; twowayBinding=&quot;parentProp2&quot;&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b352e34f8d41798496797eea2a8bb57e8ed408f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope: true&lt;/code&gt; - the directive creates a new child scope that prototypically inherits from the parent scope.  If more than one directive (on the same DOM element) requests a new scope, only one new child scope is created.  Since we have &quot;normal&quot; prototypal inheritance, this is like ng-include and ng-switch, so be wary of 2-way data binding to parent scope primitives, and child scope hiding/shadowing of parent scope properties.</source>
          <target state="translated">&lt;code&gt;scope: true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - директива создает новую дочернюю область, которая прототипно наследуется от родительской области. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если более одной директивы (для одного элемента DOM) запрашивает новую область, создается только одна новая дочерняя область. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Поскольку у нас есть &amp;laquo;нормальное&amp;raquo; наследование прототипов, это похоже на ng-include и ng-switch, так что будьте осторожны с двухсторонним связыванием данных с родительскими областями примитивов, а также скрытием / затенением дочерних областей свойств родительской области.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="835213763afd5946d0090cecedf505f83435ec77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope: { ... }&lt;/code&gt; - the directive creates a new isolate/isolated scope.  It does not prototypically inherit.  This is usually your best choice when creating reusable components, since the directive cannot accidentally read or modify the parent scope.  However, such directives often need access to a few parent scope properties.  The object hash is used to set up two-way binding (using '=') or one-way binding (using '@') between the parent scope and the isolate scope.  There is also '&amp;amp;' to bind to parent scope expressions.  So, these all create local scope properties that are derived from the parent scope.
Note that attributes are used to help set up the binding -- you can't just reference parent scope property names in the object hash, you have to use an attribute.  E.g., this won't work if you want to bind to parent property &lt;code&gt;parentProp&lt;/code&gt; in the isolated scope: &lt;code&gt;&amp;lt;div my-directive&amp;gt;&lt;/code&gt; and &lt;code&gt;scope: { localProp: '@parentProp' }&lt;/code&gt;.  An attribute must be used to specify each parent property that the directive wants to bind to: &lt;code&gt;&amp;lt;div my-directive the-Parent-Prop=parentProp&amp;gt;&lt;/code&gt; and &lt;code&gt;scope: { localProp: '@theParentProp' }&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;scope: { ... }&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - директива создает новую изолированную / изолированную область. Он не наследуется по прототипу. Обычно это лучший выбор при создании повторно используемых компонентов, поскольку директива не может случайно прочитать или изменить родительскую область. Однако таким директивам часто требуется доступ к нескольким родительским свойствам области. Хэш объекта используется для установки двусторонней привязки (с помощью &amp;laquo;=&amp;raquo;) или односторонней привязки (с помощью &amp;laquo;@&amp;raquo;) между родительской областью и областью изолята. Также есть '&amp;amp;' для привязки к родительским выражениям области видимости. Таким образом, все они создают свойства локальной области, которые являются производными от родительской области. Обратите внимание, что атрибуты используются для настройки привязки - вы не можете просто ссылаться на имена свойств родительской области в хэше объекта, вы должны использовать атрибут. Например, это победилоне работает, если вы хотите связать с родительским свойством&lt;/font&gt;&lt;/font&gt; &lt;code&gt;parentProp&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в изолированной области: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;div my-directive&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt; &lt;code&gt;scope: { localProp: '@parentProp' }&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Атрибут должен использоваться для указания каждого родительского свойства, с которым директива хочет связать: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;div my-directive the-Parent-Prop=parentProp&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt; &lt;code&gt;scope: { localProp: '@theParentProp' }&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63c2b4504aad72d404557032a2480a14ed8d5ff5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transclude: true&lt;/code&gt; - the directive creates a new &quot;transcluded&quot; child scope, which prototypically inherits from the parent scope.  The transcluded and the isolated scope (if any) are siblings -- the $parent property of each scope references the same parent scope.  When a transcluded and an isolate scope both exist, isolate scope property $$nextSibling will reference the transcluded scope.  I'm not aware of any nuances with the transcluded scope.</source>
          <target state="translated">&lt;code&gt;transclude: true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - директива создает новую &amp;laquo;включенную&amp;raquo; дочернюю область, которая прототипно наследуется от родительской области. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Трансклюзивная и изолированная область (если таковые имеются) являются одноуровневыми - свойство $ parent каждой области ссылается на одну и ту же родительскую область. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если существуют оба включенных и изолированного контекста, свойство изолирующего контекста $$ nextSibling будет ссылаться на трансклюзивную область. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Мне не известны какие-либо нюансы с включенной областью.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bbff377660b20abffad7a6d418423be860f4fc17" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Check the results.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Проверьте результаты.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0b15b86c1b80fabe2aabd774598b38aa8e612eb2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Also placed on the AngularJS wiki:&lt;/strong&gt;&lt;a href=&quot;https://github.com/angular/angular.js/wiki/Understanding-Scopes&quot;&gt;https://github.com/angular/angular.js/wiki/Understanding-Scopes&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Также размещен на вики AngularJS: &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;a href=&quot;https://github.com/angular/angular.js/wiki/Understanding-Scopes&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://github.com/angular/angular.js/wiki/Understanding-Scopes&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0449a09c1348a6a0f43c8e8b64a0a9bf4e617d86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;L-o-n-g answer&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Длинный ответ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1d556e0b5d60936a8ec25e7a4314e53c446c74b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Only property reads search the prototype chain, not writes.&lt;/strong&gt; So when you set</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Только свойство читает поиск по цепочке прототипов, а не пишет. &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Итак, когда вы установите&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8cfea32fb3dfc1fc810909a8f8a65f811513413f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Quick answer&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Быстрый ответ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e06154976179776fe34c6a025af4919585fcf6bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;there's a subtle read going on within that write operation&lt;/strong&gt; that tries to look up myThing before writing to its prop. So that's why writing to object.properties from the child gets at the parent's objects.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;внутри этой операции записи происходит тонкое чтение,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; которое пытается найти myThing перед записью в свой реквизит. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Так вот почему запись в object.properties от потомка получает объекты родителя.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="13c918f981c68e456ab5bc890ab4c0ec502977dc" translate="yes" xml:space="preserve">
          <source>A child scope normally prototypically inherits from its parent scope, but not always.  One exception to this rule is a directive with &lt;code&gt;scope: { ... }&lt;/code&gt; -- this creates an &quot;isolate&quot; scope that does not prototypically inherit.  This construct is often used when creating a &quot;reusable component&quot; directive.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Дочерняя область обычно прототипически наследуется от родительской области, но не всегда. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Единственным исключением из этого правила является директива с &lt;/font&gt;&lt;/font&gt; &lt;code&gt;scope: { ... }&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - это создает &amp;laquo;изолированную&amp;raquo; область, которая не наследуется прототипами. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Эта конструкция часто используется при создании директивы &amp;laquo;повторно используемый компонент&amp;raquo;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fe358764520311848c1bc91fb5c17d29cb979406" translate="yes" xml:space="preserve">
          <source>A scope (prototypically) inherits properties from its parent scope.</source>
          <target state="translated">Область действия (прототипная)наследует свойства от родительской области действия.</target>
        </trans-unit>
        <trans-unit id="d1d8bffbf559d5536f6500ea0a1d093618886336" translate="yes" xml:space="preserve">
          <source>A scope &lt;em&gt;can&lt;/em&gt; inherit from a parent scope.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Область &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;может&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; наследоваться от родительской области.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ddc19a49f4aeae5b69a08fb93c799e9c9d7b697" translate="yes" xml:space="preserve">
          <source>Add method &quot;changeProps&quot; to a child prototype, which will rewrite &quot;primitive&quot; property value in Child object and change &quot;object.one&quot; value  both in Child and Parent objects</source>
          <target state="translated">Добавить метод &quot;changeProps&quot; в дочерний прототип,который перепишет значение свойства &quot;примитив&quot; в дочернем объекте и изменит значение &quot;object.one&quot; как в дочернем,так и в родительском.</target>
        </trans-unit>
        <trans-unit id="d81280e6f9424c6ac30ad9caa6dffbfbd01910fa" translate="yes" xml:space="preserve">
          <source>Also, assume the directive does this in its linking function: &lt;code&gt;scope.someIsolateProp = &quot;I'm isolated&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Кроме того, предположим, что директива делает это в своей функции связывания: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;scope.someIsolateProp = &quot;I'm isolated&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6a451079fcc06fda672c9171e72986125dacf31a" translate="yes" xml:space="preserve">
          <source>And in our HTML:</source>
          <target state="translated">И в нашем HTML:</target>
        </trans-unit>
        <trans-unit id="a9a0f24354599619f9de8e6d6028a558064ab0cb" translate="yes" xml:space="preserve">
          <source>Angular Scope Inheritance</source>
          <target state="translated">Наследование углового пространства</target>
        </trans-unit>
        <trans-unit id="04edf7c89b9f81715bbe002e006477ad0ecd1ebf" translate="yes" xml:space="preserve">
          <source>As for the nuances, scope inheritance is normally straightfoward... until you need &lt;strong&gt;2-way data binding&lt;/strong&gt; (i.e., form elements, ng-model) in the child scope.  Ng-repeat, ng-switch, and ng-include can trip you up if you try to bind to a &lt;strong&gt;primitive&lt;/strong&gt; (e.g., number, string, boolean) in the parent scope from inside the child scope.  It doesn't work the way most people expect it should work.  The child scope gets its own property that hides/shadows the parent property of the same name.  Your workarounds are</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Что касается нюансов, то наследование области обычно прямолинейно ... до тех пор, пока вам не понадобится &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;двухстороннее связывание данных&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (т.е. элементы формы, ng-модель) в дочерней области. Ng-repeat, ng-switch и ng-include могут сбить вас с толку, если вы попытаетесь выполнить привязку к &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;примитиву&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (например, число, строка, логическое значение) в родительской области изнутри дочерней области. Это не работает так, как ожидает большинство людей. Дочерняя область действия получает свое собственное свойство, которое скрывает / скрывает родительское свойство с тем же именем. Ваши обходные пути&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4ed249b8cae7519efef1d54e83355e59137f1469" translate="yes" xml:space="preserve">
          <source>Assign child prototype (Make child prototype inherit from parent prototype)</source>
          <target state="translated">Назначить дочерний прототип (Сделать дочерний прототип наследственным от родительского прототипа)</target>
        </trans-unit>
        <trans-unit id="2996f5993b5b26bf797d1e78ed5e38759f07c7bb" translate="yes" xml:space="preserve">
          <source>Assign proper &quot;Child&quot; prototype constructor</source>
          <target state="translated">Назначьте соответствующий &quot;Детский&quot; конструктор-прототип</target>
        </trans-unit>
        <trans-unit id="b5081c09c76c448c8f28cf7a987c299007621686" translate="yes" xml:space="preserve">
          <source>Call Child (son) changeProps method</source>
          <target state="translated">Вызов ребенка (сына)changeProps метод</target>
        </trans-unit>
        <trans-unit id="8a364885c600d88f272a42d908f8846ef75358c2" translate="yes" xml:space="preserve">
          <source>Child primitive property changed (rewritten)</source>
          <target state="translated">Изменена (переписана)детская примитивная собственность</target>
        </trans-unit>
        <trans-unit id="1ffec34742859a8b858a2042f314ba6bb9712a26" translate="yes" xml:space="preserve">
          <source>Create &quot;Child&quot; object function</source>
          <target state="translated">Создать функцию объекта &quot;Дети&quot;</target>
        </trans-unit>
        <trans-unit id="d05ba29982ee4adb0294fdfc09f8849d4dae68fb" translate="yes" xml:space="preserve">
          <source>Diagrams were generated with &lt;a href=&quot;/questions/tagged/graphviz&quot;&gt;graphviz&lt;/a&gt; &quot;*.dot&quot; files, which are on &lt;a href=&quot;https://github.com/mrajcok/angularjs-prototypal-inheritance-diagrams&quot;&gt;github&lt;/a&gt;. Tim Caswell's &quot;&lt;a href=&quot;http://howtonode.org/object-graphs&quot;&gt;Learning JavaScript with Object Graphs&lt;/a&gt;&quot; was the inspiration for using GraphViz for the diagrams.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Диаграммы были сгенерированы с помощью &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;/questions/tagged/graphviz&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;графических файлов&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;* .dot&quot;, которые находятся на &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/mrajcok/angularjs-prototypal-inheritance-diagrams&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;github&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;laquo; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://howtonode.org/object-graphs&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Изучение JavaScript с помощью графов объектов&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;raquo; Тима Касвелла послужило вдохновением для использования GraphViz для диаграмм.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="224f881f49f35e408bbcfa7028d153590b37fec0" translate="yes" xml:space="preserve">
          <source>Each ng-include generates a new child scope, which prototypically inherits from the parent scope.</source>
          <target state="translated">Каждое ng-include генерирует новую дочернюю область видимости,которая по прототипу наследуется от родительской области видимости.</target>
        </trans-unit>
        <trans-unit id="f0f83f9d583818dd44d3f9d04d8204b2b0d352a8" translate="yes" xml:space="preserve">
          <source>First we create &quot;Parent&quot; object function</source>
          <target state="translated">Сначала создаем функцию объекта &quot;Родитель&quot;</target>
        </trans-unit>
        <trans-unit id="76003c9c8e1d358158e7998b80eba506f2cddf5c" translate="yes" xml:space="preserve">
          <source>For all scopes (prototypal or not), Angular always tracks a parent-child relationship (i.e., a hierarchy), via properties $parent and $$childHead and $$childTail.</source>
          <target state="translated">Для всех диапазонов (прототипных или нет),Angular всегда отслеживает отношение родитель-ребенок (т.е.иерархию),через свойства $parent и $$childHead и $$childTail.</target>
        </trans-unit>
        <trans-unit id="d68a226c6237d24500cc2414bd86f74041060caa" translate="yes" xml:space="preserve">
          <source>For all scopes (prototypal or not), Angular always tracks a parent-child relationship (i.e., a hierarchy), via scope properties $parent, $$childHead and $$childTail.  I normally don't show these scope properties in the diagrams.</source>
          <target state="translated">Для всех диапазонов (прототипных или нет),Angular всегда отслеживает отношение родитель-ребенок (т.е.иерархию),через свойства scope $parent,$$childHead и $$childTail.Обычно я не показываю эти свойства границ на диаграммах.</target>
        </trans-unit>
        <trans-unit id="b883a122a0ff99a0160d4dd55f990d7e4e400f28" translate="yes" xml:space="preserve">
          <source>For each item/iteration, ng-repeat creates a new scope, which prototypically inherits from the parent scope, &lt;strong&gt;but it also assigns the item's value to a new property on the new child scope&lt;/strong&gt;.  (The name of the new property is the loop variable's name.)  Here's what the Angular source code for ng-repeat actually is:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для каждого элемента / итерации ng-repeat создает новую область, которая прототипически наследуется от родительской области, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;но также назначает значение элемента новому свойству в новой дочерней области&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Имя нового свойства - это имя переменной цикла.) Вот что на самом деле представляет исходный код Angular для ng-repeat:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d22a4e3b74d54cfd3eda148ac16ef352c95fcccd" translate="yes" xml:space="preserve">
          <source>For more information on isolate scopes see &lt;a href=&quot;http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/&quot;&gt;http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для получения дополнительной информации об изолирующих областях см. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5f28c07f801f81133a48ea659f76557041efbb55" translate="yes" xml:space="preserve">
          <source>For scenarios where form elements are not involved, another solution is to define a function on the parent scope to modify the primitive.  Then ensure the child always calls this function, which will be available to the child scope due to prototypal inheritance. E.g.,</source>
          <target state="translated">Для сценариев,в которых элементы формы не задействованы,другим решением является определение функции в родительской области видимости для изменения примитива.Затем убедиться,что дочерний элемент всегда вызывает эту функцию,которая будет доступна дочерней области видимости из-за наследования по прототипу.Например,</target>
        </trans-unit>
        <trans-unit id="39de2c52b338823dcf28717c0da794fd864f6e31" translate="yes" xml:space="preserve">
          <source>For the picture below we have</source>
          <target state="translated">Для нижеприведенного рисунка у нас есть</target>
        </trans-unit>
        <trans-unit id="25a4a3b828e0fdd290235d69c7a56465278b9b20" translate="yes" xml:space="preserve">
          <source>For the picture below, assume the same directive as above with this addition: &lt;code&gt;transclude: true&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для рисунка ниже примите ту же директиву, что и выше, с этим дополнением: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;transclude: true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a17ac04579a8099173830d945d577b08efd0e95c" translate="yes" xml:space="preserve">
          <source>Having a '.' in your models will ensure that prototypal inheritance is in play. So, use</source>
          <target state="translated">Наличие &quot;...&quot; в ваших моделях обеспечит наследование прототипа.Итак,используйте</target>
        </trans-unit>
        <trans-unit id="cf13bf79e05888c8ce47a05548ac7b8463808a88" translate="yes" xml:space="preserve">
          <source>Here is a &lt;a href=&quot;http://jsfiddle.net/mrajcok/jNxyE/&quot;&gt;sample fiddle&lt;/a&gt; that uses this &quot;parent function&quot; approach.  (The fiddle was written as part of this answer: &lt;a href=&quot;https://stackoverflow.com/a/14104318/215945&quot;&gt;https://stackoverflow.com/a/14104318/215945&lt;/a&gt;.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вот &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://jsfiddle.net/mrajcok/jNxyE/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;пример скрипта,&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; который использует этот подход &amp;laquo;родительская функция&amp;raquo;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Скрипка была написана как часть этого ответа: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/14104318/215945&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://stackoverflow.com/a/14104318/215945&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="78d9d8c7814ea8c0bc54dc3db2d80fadc8541048" translate="yes" xml:space="preserve">
          <source>I in no way want to compete with Mark's answer, but just wanted to highlight the piece that finally made everything click as someone new to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;Javascript inheritance and its prototype chain&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я ни в коем случае не хочу конкурировать с ответом Марка, но просто хотел выделить часть, которая, наконец, заставила все щелкнуть, как &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;новичка в наследовании Javascript и его цепочке прототипов&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="343a19234efc27bcc15d07110b0015da8503ed16" translate="yes" xml:space="preserve">
          <source>I would like to add an example of prototypical inheritance with javascript to @Scott Driscoll answer. We'll be using classical inheritance pattern with Object.create() which is a part of  EcmaScript 5 specification.</source>
          <target state="translated">Я хотел бы добавить в ответ @Scott Driscoll пример прототипного наследования с помощью javascript.Мы будем использовать классический шаблон наследования с функцией Object.create(),которая является частью спецификации EcmaScript 5.</target>
        </trans-unit>
        <trans-unit id="802781ec18af22b8b318435ab4f3e32318e26ccc" translate="yes" xml:space="preserve">
          <source>If item is a primitive (as in myArrayOfPrimitives), essentially a copy of the value is assigned to the new child scope property.  Changing the child scope property's value (i.e., using ng-model, hence child scope &lt;code&gt;num&lt;/code&gt;) does &lt;strong&gt;not&lt;/strong&gt; change the array the parent scope references.  So in the first ng-repeat above, each child scope gets a &lt;code&gt;num&lt;/code&gt; property that is independent of the myArrayOfPrimitives array:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если элемент является примитивом (как в myArrayOfPrimitives), по сути, копия значения присваивается новому дочернему свойству области. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Изменение значения свойства дочерней области (т. Е. Использование ng-модели, следовательно, дочерней области &lt;/font&gt;&lt;/font&gt; &lt;code&gt;num&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;не&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; изменяет массив, на который ссылается родительская область. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Таким образом, в первом вышеприведенном ng-повторе каждая &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;дочерняя &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;область получает &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;свойство &lt;/font&gt;&lt;/font&gt; &lt;code&gt;num&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; которое не зависит от массива myArrayOfPrimitives:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4866d5c72997fb88595861f951b716f4b48a2c00" translate="yes" xml:space="preserve">
          <source>If we read childScope.propertyX, and childScope has propertyX, then the prototype chain is not consulted.</source>
          <target state="translated">Если мы читаем childScope.propertyX,а у childScope есть свойствоX,то прототип цепи не проверяется.</target>
        </trans-unit>
        <trans-unit id="557b0df6a8ad1c719a17070ca1480aff70f73067" translate="yes" xml:space="preserve">
          <source>If we set childScope.propertyX, the prototype chain is not consulted.</source>
          <target state="translated">Если мы установим childScope.propertyX,то цепь прототипов не будет проверяться.</target>
        </trans-unit>
        <trans-unit id="d680be6d3dd2682e10431ab13158d61b069cf24d" translate="yes" xml:space="preserve">
          <source>If we try to access a property defined on the parentScope from the child scope, JavaScript will first look in the child scope, not find the property, then look in the inherited scope, and find the property.  (If it didn't find the property in the parentScope, it would continue up the prototype chain... all the way up to the root scope). So, these are all true:</source>
          <target state="translated">Если мы попытаемся получить доступ к свойству,определённому в parentScope из дочерней области видимости,JavaScript сначала посмотрит в дочерней области видимости,не найдёт это свойство,а затем посмотрит в унаследованную область видимости и найдёт это свойство.(Если оно не найдет свойство в parentScope,то продолжит цепочку прототипов...вплоть до корневого scope).Итак,все это правда:</target>
        </trans-unit>
        <trans-unit id="4aa54311fd9a9a8128dded66c00d21f4fcfb64e3" translate="yes" xml:space="preserve">
          <source>Initiate Parent (dad) and Child (son) objects.</source>
          <target state="translated">Инициировать объекты Родитель (папа)и Ребенок (сын).</target>
        </trans-unit>
        <trans-unit id="19e47d935ce82b089f07b281873a3517222fa41b" translate="yes" xml:space="preserve">
          <source>Isolate scope's &lt;code&gt;__proto__&lt;/code&gt; references Object.
Isolate scope's $parent references the parent scope, so although it is isolated and doesn't inherit prototypically from the parent scope, it is still a child scope.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Изолировать область видимости &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ссылки на объект. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Изолирующая область $ parent ссылается на родительскую область, поэтому, хотя она изолирована и не наследуется прототипно от родительской области, она все же является дочерней областью.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a1cb23b18b0ca50c3a0a704b077fee50b3d6f174" translate="yes" xml:space="preserve">
          <source>It doesn't look up the chain, but when you set</source>
          <target state="translated">Он не смотрит вверх по цепочке,но когда вы устанавливаете</target>
        </trans-unit>
        <trans-unit id="b0be3f5d2d9159cde42e618e5abe2a242f9b35b2" translate="yes" xml:space="preserve">
          <source>It is important to first have a solid understanding of prototypal inheritance, especially if you are coming from a server-side background and you are more familiar with class-ical inheritance.  So let's review that first.</source>
          <target state="translated">В первую очередь,важно иметь ясное представление о наследовании прототипов,особенно,если вы работаете на стороне сервера и больше знаете о наследовании в классе.Так что давайте сначала рассмотрим это.</target>
        </trans-unit>
        <trans-unit id="1851c59bc3075bb17267a2a94b26d1a8cbcc1f23" translate="yes" xml:space="preserve">
          <source>JavaScript Prototypal Inheritance</source>
          <target state="translated">Наследование прототипа JavaScript</target>
        </trans-unit>
        <trans-unit id="81e79922be316c42d992eacbd258ccdc9e61e020" translate="yes" xml:space="preserve">
          <source>More info on Object.create here &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create&quot;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Дополнительная информация о Object.create здесь &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="17b26fc30b1512c9e24a72c572b1f77391a20540" translate="yes" xml:space="preserve">
          <source>Nesting controllers using ng-controller results in normal prototypal inheritance, just like ng-include and ng-switch, so the same techniques apply.
However, &quot;it is considered bad form for two controllers to share information via $scope inheritance&quot; -- &lt;a href=&quot;http://onehungrymind.com/angularjs-sticky-notes-pt-1-architecture/&quot;&gt;http://onehungrymind.com/angularjs-sticky-notes-pt-1-architecture/&lt;/a&gt;
A service should be used to share data between controllers instead.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вложенные контроллеры, использующие ng-controller, приводят к нормальному наследованию прототипов, так же как ng-include и ng-switch, поэтому применяются те же методы. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Однако &amp;laquo;считается плохой формой для двух контроллеров обмениваться информацией через наследование $ scope&amp;raquo; - &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://onehungrymind.com/angularjs-sticky-notes-pt-1-architecture/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://onehungrymind.com/angularjs-sticky-notes-pt-1-architecture/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Для обмена данными между службами следует использовать службу контроллеры вместо.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bdfea434bdc407230ae5f60034419d37fb129edd" translate="yes" xml:space="preserve">
          <source>New AngularJS developers often do not realize that &lt;code&gt;ng-repeat&lt;/code&gt;, &lt;code&gt;ng-switch&lt;/code&gt;, &lt;code&gt;ng-view&lt;/code&gt;, &lt;code&gt;ng-include&lt;/code&gt; and &lt;code&gt;ng-if&lt;/code&gt; all create new child scopes, so the problem often shows up when these directives are involved. (See &lt;a href=&quot;http://plnkr.co/edit/zZfUQN?p=preview&quot;&gt;this example&lt;/a&gt; for a quick illustration of the problem.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Новые разработчики AngularJS часто не осознают, что &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-repeat&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-switch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-view&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-include&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-if&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; все создают новые дочерние области, поэтому проблема часто обнаруживается, когда задействованы эти директивы. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(См. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://plnkr.co/edit/zZfUQN?p=preview&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Этот пример&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для быстрой иллюстрации проблемы.)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3c51eaa7a8ebfbc7717269ec1e43a6a1a4e5edd9" translate="yes" xml:space="preserve">
          <source>Ng-repeat works a little differently.  Suppose we have in our controller:</source>
          <target state="translated">Нг-репетиция работает немного по-другому.Предположим,у нас есть в контроллере:</target>
        </trans-unit>
        <trans-unit id="c7ee5ad42887cfc364ac2ae6c87e55321fd13ccc" translate="yes" xml:space="preserve">
          <source>Note, by default, directives do not create new scope -- i.e., the default is &lt;code&gt;scope: false&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Обратите внимание, что по умолчанию директивы не создают новую область видимости, то есть по умолчанию &lt;/font&gt;&lt;/font&gt; &lt;code&gt;scope: false&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c221036d1055470cf610288db1253caab6ef6104" translate="yes" xml:space="preserve">
          <source>One last scenario:</source>
          <target state="translated">Последний сценарий:</target>
        </trans-unit>
        <trans-unit id="e0f4a686f88d43bf71f098468123a0d1b2480522" translate="yes" xml:space="preserve">
          <source>Parent and Child object.one properties changed</source>
          <target state="translated">Родительский и детский объект.изменилось одно свойство</target>
        </trans-unit>
        <trans-unit id="f1755d0d23e3e1b31d2d35a7c30e78c25e37675e" translate="yes" xml:space="preserve">
          <source>Parent primitive property did not change</source>
          <target state="translated">Родительское первобытное свойство не изменилось</target>
        </trans-unit>
        <trans-unit id="33e340f444883767e95f1138224ae3c363df1354" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://stackoverflow.com/a/13782671/215945&quot;&gt;https://stackoverflow.com/a/13782671/215945&lt;/a&gt; and &lt;a href=&quot;https://github.com/angular/angular.js/issues/1267&quot;&gt;https://github.com/angular/angular.js/issues/1267&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;См. Также &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/13782671/215945&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://stackoverflow.com/a/13782671/215945&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/angular/angular.js/issues/1267&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://github.com/angular/angular.js/issues/1267&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fec6ce6579046ec5e7f88479a74428b8d21a89a9" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://stackoverflow.com/questions/12405005/angularjs-bind-scope-of-a-switch-case/12414410&quot;&gt;AngularJS, bind scope of a switch-case?&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Смотрите также &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/12405005/angularjs-bind-scope-of-a-switch-case/12414410&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AngularJS, связать область применения коммутатора?&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e719ff46b30c8a375d9fec4a2f353bfcc4f0efc2" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://stackoverflow.com/questions/13714884/difficulty-with-ng-model-ng-repeat-and-inputs&quot;&gt;Difficulty with ng-model, ng-repeat, and inputs&lt;/a&gt; and 
&lt;a href=&quot;https://stackoverflow.com/a/13782671/215945&quot;&gt;https://stackoverflow.com/a/13782671/215945&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;См. Также &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/13714884/difficulty-with-ng-model-ng-repeat-and-inputs&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Трудности с ng-моделью, ng-repeat и входными данными&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/13782671/215945&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://stackoverflow.com/a/13782671/215945&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9a4b9917ddd787e8d62b82f045df5b9f2c17092e" translate="yes" xml:space="preserve">
          <source>So, does a child scope always prototypically inherit from its parent scope? Are there exceptions? When it does inherit, is it always normal JavaScript prototypal inheritance?</source>
          <target state="translated">Итак,всегда ли прототипная область видимости ребенка наследуется от родительской области видимости? Существуют ли исключения? Когда он наследует,всегда ли это обычное наследование прототипа на JavaScript?</target>
        </trans-unit>
        <trans-unit id="9e6369804c78f7f810d1a2f16ee7cb0a8e521992" translate="yes" xml:space="preserve">
          <source>So, if item is an object, a reference to the original object (not a copy) is assigned to the new child scope property.  Changing the child scope property's value (i.e., using ng-model, hence &lt;code&gt;obj.num&lt;/code&gt;) &lt;strong&gt;does&lt;/strong&gt; change the object the parent scope references.  So in the second ng-repeat above, we have:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Таким образом, если элемент является объектом, ссылка на исходный объект (не на копию) назначается новому дочернему свойству области. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Изменение стоимости имущества ребенка Scope (то есть, используя нг-модель, следовательно , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;obj.num&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;делает&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; изменить объект ссылки области действия родителя. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Итак, во втором нг-повторе выше мы имеем:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="cc4d3539063b02aa54ad5dda83c79896a3067f88" translate="yes" xml:space="preserve">
          <source>Suppose parentScope has properties aString, aNumber, anArray, anObject, and aFunction.  If childScope prototypically inherits from parentScope, we have:</source>
          <target state="translated">Предположим,что parentScope имеет свойства aString,aNumber,anArray,anObject и aFunction.Если childScope по прототипу наследует от parentScope,то мы имеем:</target>
        </trans-unit>
        <trans-unit id="e425db46930aa754cb8074fc1c831cb164b51bd2" translate="yes" xml:space="preserve">
          <source>Suppose we have in our controller:</source>
          <target state="translated">Предположим,у нас есть в контроллере:</target>
        </trans-unit>
        <trans-unit id="a1633172dfdf4a530f7d467aceec66485f144710" translate="yes" xml:space="preserve">
          <source>Suppose we then do this:</source>
          <target state="translated">Предположим,мы сделаем это:</target>
        </trans-unit>
        <trans-unit id="bba48911b62c99d44cbc4f4088dedb4a1a4ee050" translate="yes" xml:space="preserve">
          <source>Takeaways:</source>
          <target state="translated">Takeaways:</target>
        </trans-unit>
        <trans-unit id="2cb274acb022d6adbcd46abc2c49043f6a50a791" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://docs.angularjs.org/api/ng.$rootScope.Scope&quot;&gt;API Reference Scope page&lt;/a&gt; says:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Страница &amp;laquo; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.angularjs.org/api/ng.$rootScope.Scope&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Область действия API&amp;raquo;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; гласит:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6ece9a032e06e6d7a13d6f923e60f3c3759a8bf2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://docs.angularjs.org/guide/scope&quot;&gt;Developer Guide Scope page&lt;/a&gt; says:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;На &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.angularjs.org/guide/scope&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;странице Scope Guide Developer&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; говорится:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1effa6eab1a807614c56859066cc710880afa491" translate="yes" xml:space="preserve">
          <source>The contenders:</source>
          <target state="translated">Претенденты:</target>
        </trans-unit>
        <trans-unit id="5a245f54b8cc6be3fdde1e33a7363c01930e01fe" translate="yes" xml:space="preserve">
          <source>The following create new scopes, and inherit prototypically: ng-repeat, ng-include, ng-switch, ng-controller, directive with &lt;code&gt;scope: true&lt;/code&gt;, directive with &lt;code&gt;transclude: true&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Следующие создают новые области и наследуют прототипы: ng-repeat, ng-include, ng-switch, ng-controller, директива с &lt;/font&gt;&lt;/font&gt; &lt;code&gt;scope: true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , директива с &lt;/font&gt;&lt;/font&gt; &lt;code&gt;transclude: true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a8cbb9552e324fab0129a77cc1ae823eb0817c84" translate="yes" xml:space="preserve">
          <source>The following creates a new scope which does not inherit prototypically: directive with &lt;code&gt;scope: { ... }&lt;/code&gt;.  This creates an &quot;isolate&quot; scope instead.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Следующее создает новую область, которая не наследует прототип: директива с &lt;/font&gt;&lt;/font&gt; &lt;code&gt;scope: { ... }&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это создает вместо этого &amp;laquo;изолированную&amp;raquo; область.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e3193a8d2f9764731db9796b762232331fe4c06e" translate="yes" xml:space="preserve">
          <source>The prototype chain is consulted because the objects (anArray and anObject) are not found in the childScope.  The objects are found in the parentScope, and the property values are updated on the original objects.  No new properties are added to the childScope;  no new objects are created.  (Note that in JavaScript arrays and functions are also objects.)</source>
          <target state="translated">Цепь прототипа консультируется,потому что объекты (anArray и anObject)не найдены в дочернемScope.Объекты находятся в parentScope,а значения свойств обновляются на оригинальных объектах.Новые свойства в дочернийScope не добавляются;новые объекты не создаются.(Обратите внимание,что в массивах и функциях JavaScript также находятся объекты).</target>
        </trans-unit>
        <trans-unit id="ddc297ce30d1c5e731cb81f6c86632fa1dfaa612" translate="yes" xml:space="preserve">
          <source>The prototype chain is not consulted, and a new aString property is added to the childScope.  &lt;strong&gt;This new property hides/shadows the parentScope property with the same name.&lt;/strong&gt;  This will become very important when we discuss ng-repeat and ng-include below.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Цепочка прототипов не используется, и в childScope добавляется новое свойство aString. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это новое свойство скрывает / скрывает свойство parentScope с тем же именем. &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Это станет очень важным, когда мы обсудим ng-repeat и ng-include ниже.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="942d42a24d1cc10fb1ea338258bb011bcb714618" translate="yes" xml:space="preserve">
          <source>The prototype chain is not consulted, and child scope gets two new object properties that hide/shadow the parentScope object properties with the same names.</source>
          <target state="translated">Цепь прототипов не проверяется,а дочерний scope получает два новых свойства объекта,которые скрывают свойства объекта parentScope с теми же самыми именами.</target>
        </trans-unit>
        <trans-unit id="5872b3ca634f4e1f14cb4befbf0b13a06e096db5" translate="yes" xml:space="preserve">
          <source>Then add a prototype to &quot;Parent&quot; object function</source>
          <target state="translated">Затем добавьте прототип в функцию объекта &quot;Родитель&quot;.</target>
        </trans-unit>
        <trans-unit id="35f7fbf3fa1d3a4b9cdfa29fa721275206b27d50" translate="yes" xml:space="preserve">
          <source>There are four types of scopes:</source>
          <target state="translated">Есть четыре типа диапазонов:</target>
        </trans-unit>
        <trans-unit id="58fda558452d6dbbc530387b7a71b1f7218fc6f2" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;http://jsfiddle.net/mrajcok/7g3QM/&quot;&gt;fiddle&lt;/a&gt; has a &lt;code&gt;showScope()&lt;/code&gt; function that can be used to examine an isolate and transcluded scope.  See the instructions in the comments in the fiddle.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Эта &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://jsfiddle.net/mrajcok/7g3QM/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;скрипка&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; имеет функцию &lt;/font&gt;&lt;/font&gt; &lt;code&gt;showScope()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; которую можно использовать для проверки изолированной и включенной области видимости. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Смотрите инструкции в комментариях в скрипке.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4b6a5000175f5778b88f085776bf0da1c77aa040" translate="yes" xml:space="preserve">
          <source>This issue with primitives can be easily avoided by following the &quot;best practice&quot; of &lt;a href=&quot;http://www.youtube.com/watch?v=ZhfUv0spHCY&amp;amp;feature=youtu.be&amp;amp;t=30m&quot;&gt;always have a '.' in your ng-models&lt;/a&gt; &amp;ndash; watch 3 minutes worth. Misko demonstrates the primitive binding issue with &lt;code&gt;ng-switch&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Эту проблему с примитивами можно легко избежать, следуя &amp;laquo;лучшей практике&amp;raquo; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=ZhfUv0spHCY&amp;amp;feature=youtu.be&amp;amp;t=30m&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;всегда иметь &amp;laquo;.&amp;raquo; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;в ваших ng-моделях&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - смотреть стоит 3 минуты. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Миско демонстрирует проблему примитивного связывания с &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ng-switch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4c0202c6ca940503ffce3f2fa915f6ef7f7755ae" translate="yes" xml:space="preserve">
          <source>This ng-repeat will not work (like you want/expect it to).  Typing into the textboxes changes the values in the gray boxes, which are only visible in the child scopes.  What we want is for the inputs to affect the myArrayOfPrimitives array, not a child scope primitive property.  To accomplish this, we need to change the model to be an array of objects.</source>
          <target state="translated">Этот ng-повтор не сработает (как вы и ожидали).Ввод в текстовые поля изменяет значения в серых ячейках,которые видны только в дочерних диапазонах.Мы хотим,чтобы входные данные влияли на массив myArrayOfPrimitives,а не на дочернее примитивное свойство scope.Для этого нам нужно изменить модель на массив объектов.</target>
        </trans-unit>
        <trans-unit id="b1a9027cd710b57f1f8bc341338c25f8f6fcef46" translate="yes" xml:space="preserve">
          <source>This works as expected.  Typing into the textboxes changes the values in the gray boxes, which are visible to both the child and parent scopes.</source>
          <target state="translated">Все работает,как и ожидалось.Ввод в текстовые поля изменяет значения в серых областях,которые видны как для дочернего,так и для родительского диапазона.</target>
        </trans-unit>
        <trans-unit id="2735a892bde0fac77b60fc1ad9ecb60ccdef800d" translate="yes" xml:space="preserve">
          <source>Typing (say, &quot;22&quot;) into this input textbox does not result in a new child property.  The model is now bound to a property of the parent scope (because $parent is a child scope property that references the parent scope).</source>
          <target state="translated">Ввод (скажем,&quot;22&quot;)в это текстовое поле ввода не приводит к появлению нового дочернего свойства.Модель теперь привязана к свойству родительской области видимости (поскольку $parent является дочерним свойством области видимости,которое ссылается на родительскую область видимости).</target>
        </trans-unit>
        <trans-unit id="47d0d3a86ac79a9f76da91b2fd9f3a8aedb85fae" translate="yes" xml:space="preserve">
          <source>Typing (say, &quot;77&quot;) into the first input textbox causes the child scope to get a new &lt;code&gt;myPrimitive&lt;/code&gt; scope property that hides/shadows the parent scope property of the same name.  This is probably not what you want/expect.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ввод (скажем, &amp;laquo;77&amp;raquo;) в первом текстовом поле ввода приводит к тому, что &lt;/font&gt;&lt;/font&gt; &lt;code&gt;myPrimitive&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; область &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;получает новое &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;свойство&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; области &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;myPrimitive,&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; которое скрывает / скрывает родительское свойство области с тем же именем. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это, вероятно, не то, что вы хотите / ожидаете.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3ad716f56bb492e391fbe53da39e07eb8b12282" translate="yes" xml:space="preserve">
          <source>Typing (say, &quot;99&quot;) into the second input textbox does not result in a new child property.  Because tpl2.html binds the model to an object property, prototypal inheritance kicks in when the ngModel looks for object myObject -- it finds it in the parent scope.</source>
          <target state="translated">Ввод (скажем,&quot;99&quot;)во второе текстовое поле ввода не приводит к появлению нового дочернего свойства.Так как tpl2.html привязывает модель к свойству объекта,наследование прототипа запускается,когда ngModel ищет объект myObject --он находит его в родительской области видимости.</target>
        </trans-unit>
        <trans-unit id="ab8ed7a4dd8872f800f71c44f823cffbdd129693" translate="yes" xml:space="preserve">
          <source>We can rewrite the first template to use $parent, if we don't want to change our model from a primitive to an object:</source>
          <target state="translated">Мы можем переписать первый шаблон для использования $parent,если не хотим менять нашу модель с примитива на объект:</target>
        </trans-unit>
        <trans-unit id="7625c1d4a0c7673afd934025f8f220fcfab5353d" translate="yes" xml:space="preserve">
          <source>We deleted the childScope property first, then when we try to access the property again, the prototype chain is consulted.</source>
          <target state="translated">Сначала мы удалили свойство childScope,затем,когда мы снова пытаемся получить доступ к этому свойству,просматривается цепочка прототипов.</target>
        </trans-unit>
        <trans-unit id="2bc2e06693640b04d006a3e5bfec8b61c441b22a" translate="yes" xml:space="preserve">
          <source>What are the nuances of scope prototypal / prototypical inheritance in AngularJS</source>
          <target state="translated">Каковы нюансы наследования прототипа масштаба в AngularJS</target>
        </trans-unit>
        <trans-unit id="1c8fa7a6cb664f88272907fcc27cd0145f211d78" translate="yes" xml:space="preserve">
          <source>Working example here &lt;a href=&quot;http://jsbin.com/xexurukiso/1/edit/&quot;&gt;http://jsbin.com/xexurukiso/1/edit/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Рабочий пример здесь &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://jsbin.com/xexurukiso/1/edit/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://jsbin.com/xexurukiso/1/edit/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5d0dec12c98280606d2778a4bcb1abfb0e7f8d0c" translate="yes" xml:space="preserve">
          <source>default (&lt;code&gt;scope: false&lt;/code&gt;) - the directive does not create a new scope, so there is no inheritance here.  This is easy, but also dangerous because, e.g., a directive might think it is creating a new property on the scope, when in fact it is clobbering an existing property.  This is not a good choice for writing directives that are intended as reusable components.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;default ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;scope: false&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) - директива не создает новую область, поэтому здесь нет наследования. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это легко, но также опасно, потому что, например, директива может подумать, что она создает новое свойство в области действия, когда на самом деле оно забивает существующее свойство. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это не хороший выбор для написания директив, которые предназначены для повторного использования компонентов.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba1842f28a57fe23a90d2efec05d224744c39651" translate="yes" xml:space="preserve">
          <source>define a function on the parent scope, and call it from the child (not always possible)</source>
          <target state="translated">определить функцию в родительской области видимости и вызвать ее из дочерней (не всегда возможно)</target>
        </trans-unit>
        <trans-unit id="27ea3d35983ed18a7ab56325d8423ae0f39bbc5b" translate="yes" xml:space="preserve">
          <source>define objects in the parent for your model, then reference a property of that object  in the child:  parentObj.someProp</source>
          <target state="translated">определить объекты в родителе для вашей модели,затем сослаться на свойство этого объекта в дочернем процессе:parentObj.someProp</target>
        </trans-unit>
        <trans-unit id="5b41ba2601e37104d54d7666ca68c4f5e11a1c4c" translate="yes" xml:space="preserve">
          <source>directives</source>
          <target state="translated">directives</target>
        </trans-unit>
        <trans-unit id="f4549b6f57b926059ceb24f113afc3e54afffa58" translate="yes" xml:space="preserve">
          <source>isolate scope -- directive with &lt;code&gt;scope: {...}&lt;/code&gt;.  This one is not prototypal, but '=', '@', and '&amp;amp;' provide a mechanism to access parent scope properties, via attributes.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;изолировать область действия - директива с &lt;/font&gt;&lt;/font&gt; &lt;code&gt;scope: {...}&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это не прототип, но '=', '@' и '&amp;amp;' предоставляют механизм доступа к свойствам родительской области через атрибуты.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c942ad93a5be36ba73a8752c3c44b6797b79ac69" translate="yes" xml:space="preserve">
          <source>ng-controller</source>
          <target state="translated">ng-controller</target>
        </trans-unit>
        <trans-unit id="19a68c5679f612b19da24843d5d39d5c934d28f4" translate="yes" xml:space="preserve">
          <source>ng-include</source>
          <target state="translated">ng-include</target>
        </trans-unit>
        <trans-unit id="0e45397994cf73af09c27e90f79ceb5606ed2a7d" translate="yes" xml:space="preserve">
          <source>ng-repeat</source>
          <target state="translated">ng-repeat</target>
        </trans-unit>
        <trans-unit id="18b8f4fb887d618b0516df6042f780fb3da97f38" translate="yes" xml:space="preserve">
          <source>ng-switch</source>
          <target state="translated">ng-switch</target>
        </trans-unit>
        <trans-unit id="4e8683d937e4339a8c800fa795e3f1be28867631" translate="yes" xml:space="preserve">
          <source>ng-switch scope inheritance works just like ng-include.  So if you need 2-way data binding to a primitive in the parent scope, use $parent, or change the model to be an object and then bind to a property of that object.  This will avoid child scope hiding/shadowing of parent scope properties.</source>
          <target state="translated">Наследование ng-switch диапазона работает так же,как и ng-include.Поэтому,если вам нужна 2-х сторонняя привязка данных к примитиву в родительской области видимости,используйте $parent,или измените модель,чтобы она стала объектом,а затем привяжите ее к свойству этого объекта.Это позволит избежать затенения дочерней области видимости свойствами родительской области видимости.</target>
        </trans-unit>
        <trans-unit id="0ab5ad0e9b0dd449ed7192dc1a78c8e697023091" translate="yes" xml:space="preserve">
          <source>normal prototypal scope inheritance -- ng-include, ng-switch, ng-controller, directive with &lt;code&gt;scope: true&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;нормальное наследование прототипа - ng-include, ng-switch, ng-controller, директива с &lt;/font&gt;&lt;/font&gt; &lt;code&gt;scope: true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2ddefe75ff60bb0b45a230e1492152cbebae9d6e" translate="yes" xml:space="preserve">
          <source>normal prototypal scope inheritance with a copy/assignment -- ng-repeat.  Each iteration of ng-repeat creates a new child scope, and that new child scope always gets a new property.</source>
          <target state="translated">обычное наследование прототипной области видимости с копированием --ng-repeat.Каждая итерация ng-repeat создает новый дочерний scope,и этот новый дочерний scope всегда получает новое свойство.</target>
        </trans-unit>
        <trans-unit id="135c88242dc85baeb3e79543a0c7a8e5a6803c4e" translate="yes" xml:space="preserve">
          <source>transcluded scope -- directive with &lt;code&gt;transclude: true&lt;/code&gt;.  This one is also normal prototypal scope inheritance, but it is also a sibling of any isolate scope.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;transcluded scope - директива с &lt;/font&gt;&lt;/font&gt; &lt;code&gt;transclude: true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Этот тип также является обычным наследованием прототипной области, но также является родственным элементом любой изолированной области.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="995ad0b731059826a9125c627e28cc9351e5bcf3" translate="yes" xml:space="preserve">
          <source>use $parent.parentScopeProperty (not always possible, but easier than 1. where possible)</source>
          <target state="translated">использовать $parent.parentScopeProperty (не всегда возможно,но проще чем 1.где возможно)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
