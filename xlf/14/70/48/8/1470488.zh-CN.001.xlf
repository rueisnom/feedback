<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/1470488">
    <body>
      <group id="1470488">
        <trans-unit id="50a459f1669475395e2cd1093e7fecf50dddab26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const&lt;/code&gt; should be used for 95% of cases. It makes it so the variable reference can't change, thus array, object, and DOM node properties can change and should likely be &lt;code&gt;const&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;应该用于95％的情况。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它使得变量引用不能更改，因此数组，对象和DOM节点属性可以更改，并且应该为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c9ff56a83273ba2d872c12e448ba217ced10dec6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt; should be be used for any variable expecting to be reassigned. This includes within a for loop. If you ever write &lt;code&gt;varName =&lt;/code&gt; beyond the initialization, use &lt;code&gt;let&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;应该用于期望重新分配的任何变量。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这包括在for循环中。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您曾经&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在初始化之外&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;编写&lt;/font&gt;&lt;/font&gt; &lt;code&gt;varName =&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，请使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;let&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c95a9fb0840fb74fe4273ad18226be86bedc55af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var x = 1&lt;/code&gt;&lt;strong&gt;declares variable&lt;/strong&gt;&lt;code&gt;x&lt;/code&gt; in current scope (aka execution context). If the declaration appears in a function - a local variable is declared; if it's in global scope - a global variable is declared.</source>
          <target state="translated">&lt;code&gt;var x = 1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在当前作用域（也称为执行上下文）中&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;声明变量&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果声明出现在函数中，则声明局部变量；&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果在全局范围内，则声明一个全局变量。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4499c44e6911cb45b29ab51516cecc4cc2689ddd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var&lt;/code&gt; declares a variable &lt;em&gt;in the current scope&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在当前范围内&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;声明一个变量&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="70ce3bccad6abbc5eef98e13b7ac4dc6a34f19cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var&lt;/code&gt; was the pre-ES6 way to declare a variable. We are now &lt;em&gt;in the future&lt;/em&gt;, and you should be coding as such.</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是ES6之前的声明变量的方法。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我们现在&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在将来&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，您应该这样编码。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3ac3ff1b2520539ac10e1b1265bf74a079ef6ca0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x = 1&lt;/code&gt;, on the other hand, is merely a property assignment. It first tries to resolve &lt;code&gt;x&lt;/code&gt; against scope chain. If it finds it anywhere in that scope chain, it performs assignment; if it doesn't find &lt;code&gt;x&lt;/code&gt;, only then does &lt;strong&gt;it creates &lt;code&gt;x&lt;/code&gt; property on a global object&lt;/strong&gt; (which is a top level object in a scope chain).</source>
          <target state="translated">&lt;code&gt;x = 1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;另一方面，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;x = 1&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仅仅是一个属性分配。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它首先尝试&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;根据范围链&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解析&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果在范围链中的任何地方找到它，它将执行分配；否则，它将执行分配。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果找不到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，则只有&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在全局对象&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（范围链中的顶级对象）&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上&lt;/font&gt;&lt;/strong&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;创建&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="af13201ddc24dc571d398f654d280a2518121ad1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(&lt;code&gt;i&lt;/code&gt; is reset at every iteration of the loop, as it's not declared locally in the &lt;code&gt;for&lt;/code&gt; loop but globally) eventually resulting in infinite loop&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在循环的每次迭代中都会重置，因为它不是在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;for&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;循环中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;本地声明，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而是在全局中声明），最终导致无限循环&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ece97d29bd76535aaa6375b3eb70cb76ae58c31c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;NOTE&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;: This question was asked from the viewpoint of ECMAScript version 3 or 5. The answers might become outdated with the introduction of new features in the release of ECMAScript 6.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注意&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：从ECMAScript版本3或5的角度提出了此问题。随着ECMAScript 6版本中引入新功能，答案可能会过时。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8115e639335d833240663506049d0442b68dbba5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Conclusion&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Conclusion&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="676f8b6a6df963994f145f8e721340590b3a88c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;There's a difference&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有区别&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="75dc3466d60fc7b0ab4a242508831e37e541c1f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[Update 2010/12/16]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[2010年12月16日更新]&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="15749b0e49feae8502f746946fb037a28cb462c0" translate="yes" xml:space="preserve">
          <source>@Chris S gave a nice example showcasing the practical difference (and danger) between &lt;code&gt;var&lt;/code&gt; and no &lt;code&gt;var&lt;/code&gt;. Here's another one, I find this one particularly dangerous because the difference is only visible in an asynchronous environment so it can easily slip by during testing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Chris S给出了一个很好的示例，展示了&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和no &lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;之间的实际区别（和危险）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是另一种，我发现这特别危险，因为差异仅在异步环境中可见，因此在测试过程中很容易漏掉。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ad516aba9de0bc92580b7826e23c0a7c4a4fe7c1" translate="yes" xml:space="preserve">
          <source>A rule of thumb is to always use &lt;code&gt;var&lt;/code&gt;, because otherwise you run the risk of introducing subtle bugs.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一条经验法则是始终使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，否则会冒引入细微错误的风险。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a5d9e0760725264eaa807c85d71d66c3db737614" translate="yes" xml:space="preserve">
          <source>Always declare &lt;code&gt;var&lt;/code&gt; explicitly because it's good practice</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;始终&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;明确&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;声明&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因为这是一种很好的做法&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0a1b6bb77b4c9a7b3057300ef71d941b32987edc" translate="yes" xml:space="preserve">
          <source>Always use the &lt;code&gt;var&lt;/code&gt; keyword to declare variables. Why? Good coding practice should be enough of a reason in itself, but omitting it means it is declared in the &lt;strong&gt;global&lt;/strong&gt; scope (a variable like this is called an &quot;implied&quot; global). Douglas Crockford &lt;a href=&quot;http://javascript.crockford.com/code.html#variable%20declarations&quot;&gt;recommends never using implied globals&lt;/a&gt;, and according to the &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/ScriptingAutomation/Conceptual/JSCodingGuide/Advanced/Advanced.html#//apple_ref/doc/uid/TP40006541&quot;&gt;Apple JavaScript Coding Guidelines&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;始终使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关键字声明变量。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为什么？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;良好的编码习惯本身就足够了，但是省略它意味着它是在&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;全局&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;范围内&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;声明的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（这样的变量称为&amp;ldquo;隐式&amp;rdquo;全局变量）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;道格拉斯&amp;middot;克罗克福德（Douglas Crockford）&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://javascript.crockford.com/code.html#variable%20declarations&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;建议不要使用隐式全局变量&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，并且根据&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/ScriptingAutomation/Conceptual/JSCodingGuide/Advanced/Advanced.html#//apple_ref/doc/uid/TP40006541&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Apple JavaScript编码准则&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7cacc4776fe490a54f10614e914b71dd71d7b174" translate="yes" xml:space="preserve">
          <source>Any variable created without the &lt;code&gt;var&lt;/code&gt;
  keyword is created at the global scope
  and is not garbage collected when the
  function returns (because it doesn&amp;rsquo;t
  go out of scope), presenting the
  opportunity for a memory leak.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;没有使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 关键字创建的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;任何变量&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;都在全局范围内创建，并且在函数返回时不会被垃圾回收（因为它不会超出范围），这会导致内存泄漏。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d26370d68e4b529b10005e80671c731452169f9f" translate="yes" xml:space="preserve">
          <source>As someeone trying to learn this this is how I see it. The above examples were maybe a bit overly complicated for a beginner.</source>
          <target state="translated">作为一个想学这个的人,我是这样看的。上面的例子对于一个初学者来说可能有点过于复杂。</target>
        </trans-unit>
        <trans-unit id="648bb981154b488e531fa2b7f0c07e720b93739d" translate="yes" xml:space="preserve">
          <source>As you'd expect the following snippet outputs &lt;code&gt;[&quot;text&quot;]&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如您所料，以下代码片段输出&lt;/font&gt;&lt;/font&gt; &lt;code&gt;[&quot;text&quot;]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3671985bf227c62b8cbe939f72ba78ebe122748b" translate="yes" xml:space="preserve">
          <source>Because it sees the variables in the function as seperate from those outside of it, hence the term local variable and this was because we used var in the assignment. If you take away the var in the function so it now reads like this:</source>
          <target state="translated">因为它认为函数中的变量与函数外的变量是分开的,所以才有了 &quot;本地变量 &quot;这个词,这是因为我们在赋值中使用了var。如果你把函数中的var去掉,那么现在就会变成这样。</target>
        </trans-unit>
        <trans-unit id="aefdc6cf773153fe4a0018b9ebe37e4aabf50532" translate="yes" xml:space="preserve">
          <source>Besides scopes issue, some folks also mention &lt;a href=&quot;https://www.w3schools.com/js/js_hoisting.asp&quot;&gt;hoisting&lt;/a&gt;, but no one gave an example. Here's one for global scope:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;除了范围问题外，有些人还提到了&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.w3schools.com/js/js_hoisting.asp&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;吊装&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，但没有人举任何例子。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是全球范围的一种：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6ded685dc3f638415720835d72b5c0007cb6044c" translate="yes" xml:space="preserve">
          <source>Both have block level scoping, as expected in most other languages.</source>
          <target state="translated">正如大多数其他语言所期望的那样,这两种语言都有块级范围。</target>
        </trans-unit>
        <trans-unit id="cddbd5d2793c851c432bf6f96ac2d6a3c2efa394" translate="yes" xml:space="preserve">
          <source>But behaves differently with multiple ones:</source>
          <target state="translated">但在多个的情况下表现不一样。</target>
        </trans-unit>
        <trans-unit id="2fffb4b9c2120cd3b141b0e8624555e6f35da296" translate="yes" xml:space="preserve">
          <source>But this is just theory of course, and &lt;strong&gt;in practice there are even more differences between the two&lt;/strong&gt;, due to various bugs in implementations (such as those from IE).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但这当然只是理论，&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实际上&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，由于实现中的各种错误（例如来自IE的错误），&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;两者之间甚至存在更多差异&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f0d5e6712079fbcd2dc852510d7a96cd020ca370" translate="yes" xml:space="preserve">
          <source>Declaring a variable in scopes different from window using &lt;code&gt;var&lt;/code&gt;&lt;strong&gt;is not the same thing&lt;/strong&gt; as declaring a variable without &lt;code&gt;var&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;声明中使用的窗口不同范围的变量&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; &lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是不一样的东西&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;作为声明一个变量没有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c0c83c050eeca138dbe313d3b29b6cd65df49461" translate="yes" xml:space="preserve">
          <source>Declaring a variable in the global scope (window) using &lt;code&gt;var&lt;/code&gt; is the same as omitting it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在全局作用域（窗口）中声明变量&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与省略&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;变量&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;相同。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d90bf163bcb2db235a413e32b79d547a9c66b83e" translate="yes" xml:space="preserve">
          <source>Don't use &lt;code&gt;var&lt;/code&gt;!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不要使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;！&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1fdac6a9db88caf89ef6c216bc856226ea30a3b8" translate="yes" xml:space="preserve">
          <source>EDIT:
After the critiques I received, I would like to emphasize the following:</source>
          <target state="translated">EDIT:在我收到评论后,我想强调以下几点。</target>
        </trans-unit>
        <trans-unit id="ed86afdd520260d1183342c68b990e7a84d61654" translate="yes" xml:space="preserve">
          <source>Executing the data manipulation asynchronously still produces the same result with a single executor:</source>
          <target state="translated">异步执行数据操作仍然会产生同样的结果,只需一个执行器就可以。</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">扩展片段</target>
        </trans-unit>
        <trans-unit id="0dd7c4917bd5ac303fcc5d926156bb3bdac17df9" translate="yes" xml:space="preserve">
          <source>For more information, you can search &quot;scope chain JavaScript&quot; in Google.</source>
          <target state="translated">更多信息,可以在Google中搜索 &quot;范围链JavaScript&quot;。</target>
        </trans-unit>
        <trans-unit id="e57d6ff0b73ee4b6534bd0d8d6db93d74cfd77fe" translate="yes" xml:space="preserve">
          <source>Here's quite a good example of how you can get caught out from not declaring local variables with &lt;code&gt;var&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是一个很好的示例，说明了如何通过不使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;声明局部变量而陷入困境&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6d24361b3d9af831744494bab652bf0904b1abcc" translate="yes" xml:space="preserve">
          <source>Hope it all makes sense : )</source>
          <target state="translated">希望这一切都有意义 :)</target>
        </trans-unit>
        <trans-unit id="278b534ec8e14213e74ca09168734ffa587a74c5" translate="yes" xml:space="preserve">
          <source>I see people are confused when declaring variables with or without &lt;strong&gt;var&lt;/strong&gt; and inside or outside the function. Here is a deep example that will walk you through these steps:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我看到人们在声明带或不带&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;var&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以及函数内部或外部的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;变量时感到困惑&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是一个深入的示例，将带您完成以下步骤：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="392d90156f85d314ea3524aeb9adf02b8c040ff8" translate="yes" xml:space="preserve">
          <source>I would say it's better to use &lt;strong&gt;&lt;code&gt;var&lt;/code&gt;&lt;/strong&gt; in most situations.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我会说&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在大多数情况下&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;var&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更好&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="95254ece773a99b6b2446961e8bde455ffa71bf9" translate="yes" xml:space="preserve">
          <source>If the variable is declared with var inside a function only (like d in testVar1 or testVar2) it will will be undefined whenever the function ends. So it will be temporary variable in a function.</source>
          <target state="translated">如果在函数中只用var声明了变量(如testVar1或testVar2中的d),那么在函数结束时,这个变量将是未定义的。所以它将成为函数中的临时变量。</target>
        </trans-unit>
        <trans-unit id="c2d464adceebc02be96318568bd5f0cee501ade8" translate="yes" xml:space="preserve">
          <source>If the variable is declared without var inside a function (like c), it will act like the previous rule, it will preserve its value across all functions from now on. Either it got its first value in function testVar1() it still preserves the value and get additional value in function testVar2()</source>
          <target state="translated">如果在函数中声明了变量而不声明var,那么它将像前面的规则一样,从现在开始在所有的函数中保留它的值。要么它在函数testVar1()中得到了第一个值,它仍然保留这个值,并在函数testVar2()中得到附加值。</target>
        </trans-unit>
        <trans-unit id="f53c4e7d0f314a3f01533b8d6df39bbc5ea3d03c" translate="yes" xml:space="preserve">
          <source>If you do not use &lt;strong&gt;&lt;code&gt;var&lt;/code&gt;&lt;/strong&gt; to declare a variable, the variable will be in global scope.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果不使用&lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;var&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;声明变量，则该变量将位于全局范围内。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="39c5726d10134ef67233d2162946f5ce8d89a7a0" translate="yes" xml:space="preserve">
          <source>If you run this code:</source>
          <target state="translated">如果你运行这段代码,</target>
        </trans-unit>
        <trans-unit id="1362cfaddd572ae35c459e4a2d075b7589090e04" translate="yes" xml:space="preserve">
          <source>If you're in a function then &lt;strong&gt;&lt;code&gt;var&lt;/code&gt;&lt;/strong&gt; will create a local variable, &quot;no var&quot; will look up the scope chain until it finds the variable or hits the global scope (at which point it will create it):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您在函数中，则&lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;var&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将创建一个局部变量，&amp;ldquo; no var&amp;rdquo;将查找范围链，直到找到该变量或达到全局范围为止（此时将创建该范围）：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="567442a365f8e1172a362a7bfa6b28c56e13ddc5" translate="yes" xml:space="preserve">
          <source>If you're in the global scope then there's not much difference. Read &lt;a href=&quot;https://stackoverflow.com/a/1471738/1541051&quot;&gt;Kangax's&lt;/a&gt; answer for explanation</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您位于全球范围内，则没有太大区别。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;阅读&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/1471738/1541051&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Kangax的&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;答案以获取解释&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="684f51fe3c6e9a2cd98e8e26d4fe7982c0b10afa" translate="yes" xml:space="preserve">
          <source>If you're not doing an assignment then you need to use &lt;code&gt;var&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您不进行分配，则需要使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="75ddf84fa9fd986bd218dbcb0159c239ed354aed" translate="yes" xml:space="preserve">
          <source>In ES5 (ECMAScript 5; recently standardized, 5th edition of the language) there's a so-called &quot;strict mode&quot; &amp;mdash; an opt-in language mode, which slightly changes the behavior of undeclared assignments. In strict mode, assignment to an undeclared identifier is a &lt;strong&gt;ReferenceError&lt;/strong&gt;. The rationale for this was to catch accidental assignments, preventing creation of undesired global properties. Some of the newer browsers have already started rolling support for strict mode. See, for example, &lt;a href=&quot;http://kangax.github.com/es5-compat-table&quot;&gt;my compat table&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在ES5（ECMAScript 5；最近标准化的语言的第5版）中，有一个所谓的&amp;ldquo;严格模式&amp;rdquo; &amp;mdash;选择加入语言模式，它会稍微改变未声明分配的行为。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在严格模式下，分配给未声明的标识符是&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ReferenceError&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这样做的理由是捕获意外的任务，以防止创建不希望的全局属性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一些较新的浏览器已经开始对严格模式进行滚动支持。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参见，例如，&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://kangax.github.com/es5-compat-table&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我的compat表&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2aecaa3ada288824428e9a5930bf9c4c86fbd57c" translate="yes" xml:space="preserve">
          <source>Inside a code you if you use a variable without using var, then what happens is the automatically var var_name is placed in the global scope eg:</source>
          <target state="translated">在一个代码中,如果你使用一个变量而不使用var,那么会发生的情况是自动将var_name放在全局范围内,例如</target>
        </trans-unit>
        <trans-unit id="1944f63a2520656dd1863bd1cf3ff057276757a8" translate="yes" xml:space="preserve">
          <source>It might be better to think of it as the difference between &quot;&lt;strong&gt;local&lt;/strong&gt; and &lt;strong&gt;nearest&lt;/strong&gt;&quot;. The nearest can surely be global, but that won't always be the case.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最好将其视为&amp;ldquo; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;本地&amp;rdquo;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&amp;ldquo; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最近&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;rdquo; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;之间的区别&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最接近的肯定是全局的，但情况并非总是如此。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3fd0170f28132668b781164ef4a7f444052bd81b" translate="yes" xml:space="preserve">
          <source>Its value is &lt;code&gt;undefined&lt;/code&gt; ( Its value is not &lt;code&gt;null&lt;/code&gt; and it is not equal to &lt;code&gt;null&lt;/code&gt; interestingly.).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;其值是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有趣的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它的值不为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;null&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;且不等于&lt;/font&gt;&lt;/font&gt; &lt;code&gt;null&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e76c29e1a3e9b26eec9ed7514a7cb785d3add93d" translate="yes" xml:space="preserve">
          <source>Local variables are always faster than the variables in global scope.</source>
          <target state="translated">本地变量总是比全局范围内的变量快。</target>
        </trans-unit>
        <trans-unit id="a55428ee3f8e91b8e9361a3d555244249e1d0c11" translate="yes" xml:space="preserve">
          <source>More info on &lt;a href=&quot;https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Statements/with&quot;&gt;&lt;code&gt;with&lt;/code&gt; - MDN&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关于更多信息&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Statements/with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - MDN&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e3df1bd5af933b5d2ffe740ae29130b487f63b38" translate="yes" xml:space="preserve">
          <source>No matter declared with or without var (like a, b) if they get their value outside the function, they will preserve their value and also any other values that are added inside various functions through the script are preserved.</source>
          <target state="translated">无论声明有无var(如a、b),如果在函数外得到它们的值,都会保留它们的值,而且通过脚本添加到各种函数中的其他值也会被保留。</target>
        </trans-unit>
        <trans-unit id="1db4a5a88f9462694e56a0ebed2ae05fc7476c68" translate="yes" xml:space="preserve">
          <source>Not using &lt;code&gt;var&lt;/code&gt; implicitly declares &lt;code&gt;var&lt;/code&gt; in the global scope (window)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在全局范围内（窗口）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;隐式声明&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="02b35ff758a58328dba9a2651f7ef048ad38014f" translate="yes" xml:space="preserve">
          <source>Now, notice that it doesn't declare a global variable, it creates a global property.</source>
          <target state="translated">现在,请注意,它没有声明一个全局变量,而是创建了一个全局属性。</target>
        </trans-unit>
        <trans-unit id="043667ed3fc4ad66e38fe2db89cdd560510b59f5" translate="yes" xml:space="preserve">
          <source>On the other hand you can define a vaiable like;</source>
          <target state="translated">另一方面,你也可以定义一个可变现的像。</target>
        </trans-unit>
        <trans-unit id="365d5c0c6b2622c82804f5ad19b9284375cfa8a7" translate="yes" xml:space="preserve">
          <source>Saying it's the difference between &quot;&lt;strong&gt;local&lt;/strong&gt; and &lt;strong&gt;global&lt;/strong&gt;&quot; isn't entirely accurate.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;说这是&amp;ldquo; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;本地&amp;rdquo;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&amp;ldquo; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;全球&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;rdquo; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;之间的差异&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;并不完全准确。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="568c986c2fa481f1c954e7d1f9fcbf645322f2e9" translate="yes" xml:space="preserve">
          <source>See the script below in action here at jsfiddle</source>
          <target state="translated">请看下面的脚本在这里jsfiddle的行动</target>
        </trans-unit>
        <trans-unit id="5d4fe542efe0d5275c08fbd1fadbbe1b796a1d1d" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;var&lt;/code&gt; declares a variable &lt;em&gt;in the current scope&lt;/em&gt; , there is no difference between declaring &lt;code&gt;var&lt;/code&gt;&lt;strong&gt;inside window&lt;/strong&gt; and not declaring it at all.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;由于&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在当前作用域中&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;声明了一个变量&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，因此&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在窗口内部&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;声明&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与根本不声明&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;变量&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;之间没有区别&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f84ba3d9a5a6ba1624588a0020794bbf4bbbc18e" translate="yes" xml:space="preserve">
          <source>Since variable declaration creates property with the DontDelete flag, the difference between &lt;code&gt;var x = 1&lt;/code&gt; and &lt;code&gt;x = 1&lt;/code&gt; (when executed in global scope) is that the former one - variable declaration - creates the DontDelete'able property, and latter one doesn't. As a consequence, the property created via this implicit assignment can then be deleted from the global object, and the former one - the one created via variable declaration - cannot be deleted.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;由于变量声明使用DontDelete标志创建属性，因此&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var x = 1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x = 1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（在全局范围内执行时）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;之间的区别在于&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，前者-变量声明-创建了DontDelete'able属性，而后一个则不创建。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，可以从全局对象中删除通过此隐式赋值创建的属性，并且不能删除前一个属性（通过变量声明创建的属性）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a5b64e7da16a457aef55185587bfa79983d510a" translate="yes" xml:space="preserve">
          <source>So does the following snippet (note the missing &lt;code&gt;let&lt;/code&gt; before &lt;code&gt;array&lt;/code&gt;):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;所以，做下面的代码片段（注意失踪&lt;/font&gt;&lt;/font&gt; &lt;code&gt;let&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;前&lt;/font&gt;&lt;/font&gt; &lt;code&gt;array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="431ffdf1d536b062b4db4bea2ffc094843f5a9fb" translate="yes" xml:space="preserve">
          <source>Strongly recommended to &lt;strong&gt;ALWAYS&lt;/strong&gt; use &lt;code&gt;var&lt;/code&gt; statement, because init global variable in local context - is evil. But, if you need this dirty trick, you should write comment at start of page:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;强烈建议&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;始终&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;语句，因为在局部上下文中初始化全局变量-是邪恶的。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，如果您需要这个肮脏的把戏，则应在页面开头写评论：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="01f486418a7f7e0b87f7505ef747ef5218937570" translate="yes" xml:space="preserve">
          <source>The difference between the two is subtle and might be confusing unless you understand that &lt;strong&gt;variable declarations also create properties&lt;/strong&gt; (only on a Variable Object) and that every property in Javascript (well, ECMAScript) have certain flags that describe their properties - ReadOnly, DontEnum and DontDelete.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;除非您了解&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;变量声明还创建属性&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（仅在变量对象上）并且Javascript中的每个属性（以及ECMAScript）都具有描述其属性的某些标志，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;否则两者之间的区别是细微的并且可能令人困惑。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不要删除。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30c7cf5eb22ea9425e8cea1ba0f2139361e1a878" translate="yes" xml:space="preserve">
          <source>The difference comes when you're not directly inside the window, e.g. inside a function or inside a block.</source>
          <target state="translated">当你不是直接在窗口里面,比如说在一个功能里面,或者在一个区块里面,区别就来了。</target>
        </trans-unit>
        <trans-unit id="b7afad152c06ff7383a8a12fd0871f5f7c85821a" translate="yes" xml:space="preserve">
          <source>The global scope is &lt;code&gt;window&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;全局范围是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;window&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e5e88d9446577a89541536cb132d7205cdf1107f" translate="yes" xml:space="preserve">
          <source>The output is false, false, false, false</source>
          <target state="translated">输出是假的,假的,假的,假的,假的,假的,假的</target>
        </trans-unit>
        <trans-unit id="a001fc43a617436f0270abcfb7b1644b3f64fe7d" translate="yes" xml:space="preserve">
          <source>The output will read as:  false, false, true, true</source>
          <target state="translated">输出将读成:false,false,false,true,true,true</target>
        </trans-unit>
        <trans-unit id="c154cc21ec489852be888084733fec962f21294b" translate="yes" xml:space="preserve">
          <source>This is because rather than creating a new variable in the local scope or function it simply uses the global variables and reassigns them to false.</source>
          <target state="translated">这是因为它不是在本地范围或函数中创建一个新的变量,而是简单地使用全局变量并将其重新分配给false。</target>
        </trans-unit>
        <trans-unit id="ae3c4b2b2e272bb3d99fc62076cf95294168c7f0" translate="yes" xml:space="preserve">
          <source>This is example code I have written for you to understand this concept:</source>
          <target state="translated">这是我写的例子代码,是为了让大家理解这个概念。</target>
        </trans-unit>
        <trans-unit id="86e51c54af332f976cb5a779f636121143a60d03" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;并&lt;/font&gt;&lt;/font&gt; &lt;code&gt;let&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d2681815ba9144830d84335134d593a7b9795b67" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;var&lt;/code&gt; is always a good idea to prevent variables from cluttering the global scope and variables from conflicting with each other, causing unwanted overwriting.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;始终是一个好主意，以防止变量造成全局范围混乱和变量彼此冲突，从而导致不必要的覆盖。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a8498522bb7975baec141bc69e58ad19fc014259" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;var&lt;/code&gt; lets you hide external variables that have the same name. In this way you can simulate a &quot;private&quot; variable, but that's another topic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以隐藏具有相同名称的外部变量。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这样，您可以模拟&amp;ldquo;私有&amp;rdquo;变量，但这是另一个主题。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b9b6fb10723d16a6ac48829d3a4497a9043f6980" translate="yes" xml:space="preserve">
          <source>Using let however:</source>
          <target state="translated">采用让的方式,但是。</target>
        </trans-unit>
        <trans-unit id="4906efc7267c8351bf5b979540c54df3da79ef7c" translate="yes" xml:space="preserve">
          <source>What exactly is the function of the &lt;code&gt;var&lt;/code&gt; keyword in JavaScript, and what is the difference between</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScript中&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关键字&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的功能到底是&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;什么，它们之间有什么区别&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="758ca9ad7b12f9ed5b67f8ec012817879d7955f1" translate="yes" xml:space="preserve">
          <source>What is the purpose of the var keyword and when should I use it (or omit it)</source>
          <target state="translated">var关键字的目的是什么,我应该在什么时候使用它(或省略它)?</target>
        </trans-unit>
        <trans-unit id="28d5eb31d94815ea65bfaad6447a7ebd8a7e7de0" translate="yes" xml:space="preserve">
          <source>When Javascript is executed in a browser, all your code is surrounded by a with statement, like so:</source>
          <target state="translated">当Javascript在浏览器中执行时,你的所有代码都会被一个with语句包围,就像这样。</target>
        </trans-unit>
        <trans-unit id="b7bb9228f6081f083a2b973e1437459ece8c7be1" translate="yes" xml:space="preserve">
          <source>When the value is assigned to a variable in javascript, the interpreter first tries to find the &amp;ldquo;variable declaration&amp;rdquo; in the same context/scope as that of assignment. When the interpreter executes &lt;code&gt;dummyVariable = 20&lt;/code&gt;, it looks up for the declaration of dummyVariable at beginning of the function. 
(Since all Variable declarations are moved to the beginning of the context by javascript interpreter and this is called hoisting)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当将值分配给javascript中的变量时，解释器首先尝试在与赋值相同的上下文/范围内查找&amp;ldquo;变量声明&amp;rdquo;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当解释器执行&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dummyVariable = 20&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，它将在函数开始处查找dummyVariable的声明。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（由于所有的变量声明都由javascript解释器移动到上下文的开头，因此称为提升）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b976cd212cdef4a97d04d7f351af666826a8c712" translate="yes" xml:space="preserve">
          <source>When variables get defined without the use of var keyword, what it looks like is a simple &amp;ldquo;assignment&amp;rdquo; operation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当在不使用var关键字的情况下定义变量时，看起来像是一个简单的&amp;ldquo;赋值&amp;rdquo;操作。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d38e65e5fed4a0351f74089258d5276352d71896" translate="yes" xml:space="preserve">
          <source>When would you use either one, and why/what does it do?</source>
          <target state="translated">你什么时候会用这两种,为什么要用这两种,有什么作用?</target>
        </trans-unit>
        <trans-unit id="d84313cef3699a4dc71c21ba2ba2f3e7056ea9b1" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;var&lt;/code&gt; - global variable.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;没有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; -&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;全局变量。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c0038c0ad3dedff26bcb8caff8ac8a2e53f0784b" translate="yes" xml:space="preserve">
          <source>Without using &quot;var&quot; variables can only define when set a value. In example:</source>
          <target state="translated">在不使用 &quot;var &quot;的情况下,只能在定义变量时设置一个值。比如说。</target>
        </trans-unit>
        <trans-unit id="d1f01145498d215dada93ebddd6f73769191e877" translate="yes" xml:space="preserve">
          <source>You may also want to look at &lt;a href=&quot;http://www.yourtechchick.com/javascript/what-is-hoisting-in-javascript-javascript-hoisting-explained/&quot;&gt;hoisting in javascript&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可能还想看看&lt;/font&gt;&lt;a href=&quot;http://www.yourtechchick.com/javascript/what-is-hoisting-in-javascript-javascript-hoisting-explained/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;用javascript&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;进行&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;吊装&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="68bb2b7f8b270c5f0e4a0878da658ccff83a008c" translate="yes" xml:space="preserve">
          <source>You should use var keyword unless you intend to have the variable attached to window object in browser. &lt;a href=&quot;http://www.yourtechchick.com/javascript/difference-between-javascript-variables-with-var-and-without-var/&quot;&gt;Here's a link that explains scoping and difference between glocal scoping and local scoping with and wihtout var keyword.&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;除非打算在浏览器中将变量附加到窗口对象，否则应使用var关键字。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.yourtechchick.com/javascript/difference-between-javascript-variables-with-var-and-without-var/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是一个链接，用于解释范围以及使用和wihtout var关键字进行的glocal范围与本地范围之间的区别。&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="b13d77a64c0a73e7706da22d3d1a50bb815e5c89" translate="yes" xml:space="preserve">
          <source>another difference 
e.g</source>
          <target state="translated">另有区别,如</target>
        </trans-unit>
        <trans-unit id="d69535e3b8a9d122af21d58f179a89f49e79dc8b" translate="yes" xml:space="preserve">
          <source>cannot work in &lt;strong&gt;global scope&lt;/strong&gt; or &lt;strong&gt;any other scope&lt;/strong&gt;. It should be with value like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;无法在&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;全球范围&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;或&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;任何其他范围内工作&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它应具有以下值：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6517f89c46c3f0d6db9cb009b8c7d1f98c371fa0" translate="yes" xml:space="preserve">
          <source>while</source>
          <target state="translated">while</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
