<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/1451009">
    <body>
      <group id="1451009">
        <trans-unit id="d3629fdb5d29d86ed9675754d02ff7c48885fc5f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/questions/643542/doesnt-javascript-support-closures-with-local-variables/643664#643664&quot;&gt;Quoting myself&lt;/a&gt; for an explanation of the first example:</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/643542/doesnt-javascript-support-closures-with-local-variables/643664#643664&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;引用我自己&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;来解释第一个示例：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c8aeae7b3a26e47626f8da3497483469a02b8efc" translate="yes" xml:space="preserve">
          <source>After the loop terminates, the function-level variable i has the value 5, and that's what the inner function 'sees'.</source>
          <target state="translated">循环终止后,函数级变量i的值为5,这就是内部函数 &quot;看到 &quot;的东西。</target>
        </trans-unit>
        <trans-unit id="f55487a622699d39f09c50e574a30094b459e210" translate="yes" xml:space="preserve">
          <source>Basically the poor mans let-binding.</source>
          <target state="translated">基本上是穷人的放任束缚。</target>
        </trans-unit>
        <trans-unit id="14a572b53356e2252086428034607a037de2ea3d" translate="yes" xml:space="preserve">
          <source>Basically, in the first example you're binding the &lt;code&gt;i&lt;/code&gt; inside the &lt;code&gt;onclick&lt;/code&gt; handler directly to the &lt;code&gt;i&lt;/code&gt; outside the &lt;code&gt;onclick&lt;/code&gt; handler.  So when the &lt;code&gt;i&lt;/code&gt; outside the &lt;code&gt;onclick&lt;/code&gt; handler changes, the &lt;code&gt;i&lt;/code&gt; inside the &lt;code&gt;onclick&lt;/code&gt; handler changes too.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本上，在第一个例子，你要绑定的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;里面&lt;/font&gt;&lt;/font&gt; &lt;code&gt;onclick&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;直接处理给&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;外面&lt;/font&gt;&lt;/font&gt; &lt;code&gt;onclick&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;处理程序。因此，当&lt;/font&gt; &lt;code&gt;onclick&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;处理程序&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;外部&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更改时，&lt;/font&gt; &lt;code&gt;onclick&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;处理程序&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内部的&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;也更改。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6a446d8b3de7e3dee7ab9e9898b432096b4d7f80" translate="yes" xml:space="preserve">
          <source>But how it works and How &lt;strong&gt;closure&lt;/strong&gt; makes it work are all beyond my understanding. Why the first one doesn't work while the second one works? Can anyone give a detailed explanation about the magic?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是它是如何工作的以及&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关闭&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如何&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;工作的，这些都是我无法理解的。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为什么第一个不起作用而第二个却起作用？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;任何人都可以对魔术进行详细说明吗？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e870eda725a6ae9687a7cfd0e92eccc068def337" translate="yes" xml:space="preserve">
          <source>But really addressing the problem (and building this up slowly) ...</source>
          <target state="translated">但真正解决这个问题(并慢慢建立起来).....。</target>
        </trans-unit>
        <trans-unit id="90e4787048f42b3a089ab3687dd531ade0b83fd5" translate="yes" xml:space="preserve">
          <source>But the following codes snippet works as our expectation.</source>
          <target state="translated">但是,下面的代码片段却如我们所期望的那样,可以正常工作。</target>
        </trans-unit>
        <trans-unit id="e74922e426d6803d5a572fd620dc614128ef76b9" translate="yes" xml:space="preserve">
          <source>I like to write simple explanations for thick people, because I'm thick so here goes ...</source>
          <target state="translated">我喜欢写一些简单的解说词,因为我很厚的人,因为我很厚,所以在这里......</target>
        </trans-unit>
        <trans-unit id="98044507e5f7d79bd77f6b55defa58c4d796d82b" translate="yes" xml:space="preserve">
          <source>I've got the following code snippet.</source>
          <target state="translated">我有以下代码片段。</target>
        </trans-unit>
        <trans-unit id="0440d47ee8b968bf864983097a8f8f9147c6ff2e" translate="yes" xml:space="preserve">
          <source>If you can't get your head around that then this should be easier to understand and has the same effect ...</source>
          <target state="translated">如果你无法理解,那么这个应该比较容易理解,而且效果也是一样的。</target>
        </trans-unit>
        <trans-unit id="6a0afe6de268854b7f080be424074fae5ac8abfb" translate="yes" xml:space="preserve">
          <source>In the first example, you simply bind this function to the onclick event:</source>
          <target state="translated">在第一个例子中,你只需将此函数绑定到onclick事件中。</target>
        </trans-unit>
        <trans-unit id="d24e58b5bdc6c1b3d5528879d77d05cf2d490842" translate="yes" xml:space="preserve">
          <source>In the second example you generate a function to be bound with another function:</source>
          <target state="translated">在第二个例子中,你生成一个函数与另一个函数绑定。</target>
        </trans-unit>
        <trans-unit id="0db60ff4d06f4229813ae86b736c04c69c7d1599" translate="yes" xml:space="preserve">
          <source>In the second example, for each iteration step the outer function literal will evaluate to a new function object with its own scope and local variable &lt;code&gt;num&lt;/code&gt;, whose value is set to the current value of &lt;code&gt;i&lt;/code&gt;. As &lt;code&gt;num&lt;/code&gt; is never modified, it will stay constant over the lifetime of the closure: The next iteration step doesn't overwrite the old value as the function objects are independant.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在第二个示例中，对于每个迭代步骤，外部函数文字将评估为具有自己的作用域和局部变量&lt;/font&gt;&lt;/font&gt; &lt;code&gt;num&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的新函数对象，该变量&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的值设置为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的当前值&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。由于&lt;/font&gt;&lt;/font&gt; &lt;code&gt;num&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从未被修改，因此它将在闭包的整个生命周期内保持不变：由于函数对象是独立的，因此下一迭代步骤不会覆盖旧值。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="35d51b79a12af861645cf472ed9c622b34156559" translate="yes" xml:space="preserve">
          <source>In the second example, instead of binding it to the &lt;code&gt;num&lt;/code&gt; in the &lt;code&gt;onclick&lt;/code&gt; handler, you're passing it into a function, which then binds it to the &lt;code&gt;num&lt;/code&gt; in the &lt;code&gt;onclick&lt;/code&gt; handler.  When you pass it into the function, the value of &lt;code&gt;i&lt;/code&gt; is &lt;em&gt;copied, not bound&lt;/em&gt; to &lt;code&gt;num&lt;/code&gt;.  So when &lt;code&gt;i&lt;/code&gt; changes, &lt;code&gt;num&lt;/code&gt; stays the same.  The copy occurs because functions in JavaScript are &quot;closures&quot;, meaning that once something is passed into the function, it's &quot;closed&quot; for outside modification.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在第二个例子中，而不是将其绑定到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;num&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中&lt;/font&gt;&lt;/font&gt; &lt;code&gt;onclick&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;处理程序中，你传递给函数，然后绑定到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;num&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中&lt;/font&gt;&lt;/font&gt; &lt;code&gt;onclick&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;处理程序。当你将它传递到的功能，价值&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;复制的，未绑定&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;至&lt;/font&gt;&lt;/font&gt; &lt;code&gt;num&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。因此，当&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更改时，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;num&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;保持不变。发生复制是因为JavaScript中的函数是&amp;ldquo;闭包&amp;rdquo;，这意味着一旦将某些内容传递到函数中，就将其&amp;ldquo;关闭&amp;rdquo;以进行外部修改。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="da1131ce13e7708f25ab5cfb3e75ba06db61edf8" translate="yes" xml:space="preserve">
          <source>JavaScript's scopes are function-level, not block-level, and creating a closure just means that the enclosing scope gets added to the lexical environment of the enclosed function.</source>
          <target state="translated">JavaScript的作用域是函数级的,而不是块级的,创建一个闭包只是意味着包围的作用域被添加到包围函数的词法环境中。</target>
        </trans-unit>
        <trans-unit id="d543376a1cb01b26038855f58e6cc4b0fbcdf1ba" translate="yes" xml:space="preserve">
          <source>Javascript infamous Loop issue</source>
          <target state="translated">Javascript臭名昭著的循环问题</target>
        </trans-unit>
        <trans-unit id="f0c23724248db646463d30f22c1f9515c613aca5" translate="yes" xml:space="preserve">
          <source>Keep in mind that this approach is rather inefficient as two new function objects have to be created for each link. This is unnecessary, as they can easily be shared if you use the DOM node for information storage:</source>
          <target state="translated">请记住,这种方法是相当低效的,因为每个链接都要创建两个新的函数对象。这是不必要的,因为如果你使用DOM节点进行信息存储,它们可以很容易被共享。</target>
        </trans-unit>
        <trans-unit id="9f1d64cd1dcf02e2eb838a3d5019cb997b33f17e" translate="yes" xml:space="preserve">
          <source>Others have explained what's going on, here's an alternative solution.</source>
          <target state="translated">其他人都解释了是怎么回事,这里有一个备选方案。</target>
        </trans-unit>
        <trans-unit id="b9062277a4788dab91b5398ea813980422f4b600" translate="yes" xml:space="preserve">
          <source>SIMPLE TO UNDERSTAND ALTERNATIVE</source>
          <target state="translated">通俗易懂</target>
        </trans-unit>
        <trans-unit id="64e02dbe9ba60cc3c2162da4c3aa447b47ad40c0" translate="yes" xml:space="preserve">
          <source>STEP 1</source>
          <target state="translated">步骤1</target>
        </trans-unit>
        <trans-unit id="b2ad896a1cb2a935d086236efdbb6d736ec7bb8a" translate="yes" xml:space="preserve">
          <source>STEP 2</source>
          <target state="translated">第二步</target>
        </trans-unit>
        <trans-unit id="06bec4e67f32a15eb53681f5e9d0e19f7fc271f4" translate="yes" xml:space="preserve">
          <source>The above 2 snippets are quoted from &lt;a href=&quot;http://robertnyman.com/2008/10/09/explaining-javascript-scope-and-closures/&quot;&gt;here&lt;/a&gt;. As the author's explanation, seems the &lt;strong&gt;closure&lt;/strong&gt; makes the magic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://robertnyman.com/2008/10/09/explaining-javascript-scope-and-closures/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这里&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;引用了以上两个片段&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;正如作者的解释，似乎&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;封闭&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使魔术。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="38c8fae3aef0bb86439ec189e980bd9faf10db20" translate="yes" xml:space="preserve">
          <source>The above code is for generating 5 links and bind each link with an alert event to show the current link id. But It doesn't work. When you click the generated links they all say &quot;link 5&quot;.</source>
          <target state="translated">上面的代码是用于生成5个链接,并给每个链接绑定一个警告事件来显示当前链接的id。但是,它并没有工作。当你点击生成的链接,它们都说 &quot;链接5&quot;。</target>
        </trans-unit>
        <trans-unit id="5bb430c0a8aa818d339d1f21bcbfdc114e183c15" translate="yes" xml:space="preserve">
          <source>The point is that in the first example your function contained a variable reference, while in the second one with the help of the outer function you substituted the reference with an actual value. This is called a closure roughly because you &quot;enclose&quot; the current value of a variable within your function instead of keeping a reference to it.</source>
          <target state="translated">问题是,在第一个例子中,你的函数包含了一个变量引用,而在第二个例子中,你借助于外部函数的帮助,用一个实际值代替了引用。这大概就是所谓的闭包,因为你在函数中 &quot;封装 &quot;了一个变量的当前值,而不是保留一个引用。</target>
        </trans-unit>
        <trans-unit id="32f5540c763324b2a16331ff166e460fa5fc986e" translate="yes" xml:space="preserve">
          <source>This means that on the click event js should alert the value of the addlink functions i variable. Its value will be 5 because of the for loop().</source>
          <target state="translated">这意味着,在点击事件上js应该提示addlink函数i变量的值。其值将为5,因为for循环()。</target>
        </trans-unit>
        <trans-unit id="fdc7e684f23a59219ae5f68649f179122a614f28" translate="yes" xml:space="preserve">
          <source>This means: if called with a value, return me a function that will alert the input value. E.g. calling &lt;code&gt;function(3)&lt;/code&gt; will return &lt;code&gt;function() { alert(3) };&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这意味着：如果使用一个值调用，请给我返回一个将警告输入值的函数。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如，调用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;function(3)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将返回&lt;/font&gt;&lt;/font&gt; &lt;code&gt;function() { alert(3) };&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9a4330f33715c1da70cd9a82c9a65b6e38605465" translate="yes" xml:space="preserve">
          <source>This should be simple to understand if you remember that a functions variable values are set when the function is called (but this uses the exact same thought process as before)</source>
          <target state="translated">如果你还记得函数的变量值是在函数被调用时设置的,这应该很容易理解(但这和之前的思维过程完全相同</target>
        </trans-unit>
        <trans-unit id="1d5f837130195e677934efe9b799bebaf80ab6d3" translate="yes" xml:space="preserve">
          <source>We have 5 divs on the page, each with an ID ... div1, div2, div3, div4, div5</source>
          <target state="translated">我们在页面上有5个div,每个div都有一个ID......div1,div2,div3,div4,div5</target>
        </trans-unit>
        <trans-unit id="242d1d689f33bacbcd639b239ea0eca85c5fe9f4" translate="yes" xml:space="preserve">
          <source>You call this function with the value i at every iteration, thus you create separate onclick functions for each links.</source>
          <target state="translated">你在每次迭代时用值i调用这个函数,因此你为每个链接创建单独的onclick函数。</target>
        </trans-unit>
        <trans-unit id="f0873f2af846342e590c905b16c5cc2770b8f445" translate="yes" xml:space="preserve">
          <source>jQuery can do this ...</source>
          <target state="translated">jQuery可以这样做.....</target>
        </trans-unit>
        <trans-unit id="1da2da17310fd4a9c245a1653c8c1e99b321c15b" translate="yes" xml:space="preserve">
          <source>thanks.</source>
          <target state="translated">thanks.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
